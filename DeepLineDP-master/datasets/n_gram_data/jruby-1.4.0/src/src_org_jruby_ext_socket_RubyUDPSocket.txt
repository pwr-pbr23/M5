/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2007 damian steer <pldms@mac.com>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby ext socket
import java io filedescriptor
import java io ioexception
import java net connectexception
import java net inet4address
import java net inetaddress
import java net inetsocketaddress
import java net socketexception
import java net unknownhostexception
import java nio bytebuffer
import java nio channels datagramchannel
import java nio channels selectionkey
import org jruby ruby
import org jruby rubyclass
import org jruby rubyfixnum
import org jruby rubyio
import org jruby rubynumeric
import org jruby rubystring
import org jruby anno jrubyclass
import org jruby anno jrubymethod
import org jruby runtime block
import org jruby runtime objectallocator
import org jruby runtime threadcontext
import org jruby runtime visibility
import org jruby runtime builtin irubyobject
import org jruby util bytelist
import org jruby util io modeflags
import org jruby util io channeldescriptor
/**
* @author <a href="mailto:pldms@mac.com">damian steer</a>
*/
@jrubyclass name    parent
public class rubyudpsocket extends rubyipsocket
static void createudpsocket ruby runtime
rubyclass rb_cudpsocket   runtime defineclass    runtime fastgetclass     udpsocket_allocator
rb_cudpsocket includemodule runtime fastgetclass    fastgetconstant
rb_cudpsocket defineannotatedmethods rubyudpsocket class
runtime getobject   fastsetconstant    rb_cudpsocket
private static objectallocator udpsocket_allocator   new objectallocator
public irubyobject allocate ruby runtime  rubyclass klass
return new rubyudpsocket runtime  klass
public rubyudpsocket ruby runtime  rubyclass type
super runtime  type
@jrubymethod visibility   visibility private
public irubyobject initialize threadcontext context
try
datagramchannel channel   datagramchannel open
initsocket context getruntime    new channeldescriptor channel  rubyio getnewfileno    new modeflags modeflags rdwr   new filedescriptor
catch  org jruby util io invalidvalueexception ex
throw context getruntime   newerrnoeinvalerror
catch  connectexception e
throw context getruntime   newerrnoeconnrefusederror
catch  unknownhostexception e
throw sockerr context getruntime
catch  ioexception e
throw sockerr context getruntime
return this
@jrubymethod visibility   visibility private
public irubyobject initialize threadcontext context  irubyobject protocol
// we basically ignore protocol. let someone report it...
return initialize context
@deprecated
public irubyobject bind irubyobject host  irubyobject port
return bind getruntime   getcurrentcontext    host  port
@jrubymethod
public irubyobject bind threadcontext context  irubyobject host  irubyobject port
inetsocketaddress addr   null
try
if  host isnil
host instanceof rubystring
rubystring  host  isempty
// host is nil or the empty string, bind to inaddr_any
addr   new inetsocketaddress rubynumeric fix2int port
else
addr   new inetsocketaddress inetaddress getbyname host converttostring   tostring     rubynumeric fix2int port
datagramchannel  this getchannel    socket   bind addr
return rubyfixnum zero context getruntime
catch  unknownhostexception e
throw sockerr context getruntime
catch  socketexception e
throw sockerr context getruntime
catch  error e
// workaround for a bug in sun's jdk 1.5.x, see
// http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6303753
if  e getcause   instanceof socketexception
throw sockerr context getruntime
else
throw e
@deprecated
public irubyobject connect irubyobject host  irubyobject port
return connect getruntime   getcurrentcontext    host  port
@jrubymethod
public irubyobject connect threadcontext context  irubyobject host  irubyobject port
try
inetsocketaddress addr
addr   new inetsocketaddress inetaddress getbyname host converttostring   tostring     rubynumeric fix2int port
datagramchannel  this getchannel    connect addr
return rubyfixnum zero context getruntime
catch  unknownhostexception e
throw sockerr context getruntime
catch  ioexception e
throw sockerr context getruntime
@deprecated
public irubyobject recvfrom irubyobject args
return recvfrom getruntime   getcurrentcontext    args
@jrubymethod required   1  rest   true
public irubyobject recvfrom threadcontext context  irubyobject args
try
int length   rubynumeric fix2int args
bytebuffer buf   bytebuffer allocate length
datagramchannel  this getchannel    configureblocking false
context getthread   select this  selectionkey op_read
inetsocketaddress sender    inetsocketaddress    datagramchannel  this getchannel    receive buf
irubyobject addressarray   context getruntime   newarray new irubyobject
context getruntime   newstring
context getruntime   newfixnum sender getport
context getruntime   newstring sender gethostname
context getruntime   newstring sender getaddress   gethostaddress
irubyobject result   context getruntime   newstring new bytelist buf array    0  buf position
return context getruntime   newarray new irubyobject result  addressarray
catch  unknownhostexception e
throw sockerr context getruntime
catch  ioexception e
throw sockerr context getruntime
@override
public irubyobject recv threadcontext context  irubyobject args
try
int length   rubynumeric fix2int args
bytebuffer buf   bytebuffer allocate length
context getthread   select this  selectionkey op_read
datagramchannel  this getchannel    receive buf
return context getruntime   newstring new bytelist buf array    0  buf position
catch  ioexception e
throw sockerr context getruntime
@deprecated
public irubyobject send irubyobject args
return send getruntime   getcurrentcontext    args
@jrubymethod required   1  rest   true
public irubyobject send threadcontext context  irubyobject args
try
int written
if  args length >  3       host and port given
rubystring namestr   args converttostring
rubystring data   args converttostring
bytebuffer buf   bytebuffer wrap data getbytes
inetaddress address   rubysocket getrubyinetaddress namestr getbytelist
inetsocketaddress addr
new inetsocketaddress address  rubynumeric fix2int args
written     datagramchannel  this getchannel    send buf  addr
else
rubystring data   args converttostring
bytebuffer buf   bytebuffer wrap data getbytes
written     datagramchannel  this getchannel    write buf
return context getruntime   newfixnum written
catch  unknownhostexception e
throw sockerr context getruntime
catch  ioexception e
throw sockerr context getruntime
@deprecated
public static irubyobject open irubyobject recv  irubyobject args  block block
return open recv getruntime   getcurrentcontext    recv  args  block
@jrubymethod rest   true  frame   true  meta   true
public static irubyobject open threadcontext context  irubyobject recv  irubyobject args  block block
rubyudpsocket sock    rubyudpsocket  recv callmethod context     args
if   block isgiven
return sock
try
return block yield context  sock
finally
if  sock openfile isopen
sock close
rubyudpsocket