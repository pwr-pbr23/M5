/*
***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2006 charles o nutter <headius@headius.com>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby compiler impl
import java io file
import java io fileoutputstream
import java io ioexception
import java io printstream
import java io printwriter
import java lang reflect constructor
import java lang reflect invocationtargetexception
import java lang reflect method
import org jruby ruby
import org jruby rubyinstanceconfig
import org jruby ast executable abstractscript
import org jruby compiler astinspector
import org jruby compiler cachecompiler
import org jruby compiler compilercallback
import org jruby compiler bodycompiler
import org jruby compiler scriptcompiler
import org jruby javasupport util runtimehelpers
import org jruby parser staticscope
import org jruby runtime block
import org jruby runtime threadcontext
import org jruby runtime builtin irubyobject
import static org jruby util codegenutils
import org jruby util jrubyclassloader
import org jruby util safepropertyaccessor
import org objectweb asm classreader
import org objectweb asm classvisitor
import org objectweb asm classwriter
import org objectweb asm label
import org objectweb asm methodvisitor
import org objectweb asm opcodes
import org objectweb asm util checkclassadapter
import org objectweb asm util traceclassvisitor
/**
*
* @author headius
*/
public class standardasmcompiler implements scriptcompiler  opcodes
public static final string threadcontext   p threadcontext class
public static final string ruby   p ruby class
public static final string irubyobject   p irubyobject class
public static string getstaticmethodsignature string classname  int args
switch  args
case 0
return sig irubyobject class      classname      threadcontext class  irubyobject class  block class
case 1
return sig irubyobject class      classname      threadcontext class  irubyobject class  irubyobject class  block class
case 2
return sig irubyobject class      classname      threadcontext class  irubyobject class  irubyobject class  irubyobject class  block class
case 3
return sig irubyobject class      classname      threadcontext class  irubyobject class  irubyobject class  irubyobject class  irubyobject class  block class
case 4
return sig irubyobject class      classname      threadcontext class  irubyobject class  irubyobject class  block class
default
throw new runtimeexception     args
public static string getmethodsignature int args
switch  args
case 0
return sig irubyobject class  threadcontext class  irubyobject class  block class
case 1
return sig irubyobject class  threadcontext class  irubyobject class  irubyobject class  block class
case 2
return sig irubyobject class  threadcontext class  irubyobject class  irubyobject class  irubyobject class  block class
case 3
return sig irubyobject class  threadcontext class  irubyobject class  irubyobject class  irubyobject class  irubyobject class  block class
case 4
return sig irubyobject class  threadcontext class  irubyobject class  irubyobject class  block class
default
throw new runtimeexception     args
public static string getstaticclosuresignature string classdesc
return sig irubyobject class      classdesc      threadcontext class  irubyobject class  irubyobject class
public static string getstaticclosure19signature string classdesc
return sig irubyobject class      classdesc      threadcontext class  irubyobject class  irubyobject class  block class
public static string getclosuresignature
return sig irubyobject class  threadcontext class  irubyobject class  irubyobject class
public static string getclosure19signature
return sig irubyobject class  threadcontext class  irubyobject class  irubyobject class  block class
public static final int this   0
public static final int threadcontext_index   1
public static final int self_index   2
public static final int args_index   3
public static final int closure_offset   0
public static final int dynamic_scope_offset   1
public static final int runtime_offset   2
public static final int vars_array_offset   3
public static final int nil_offset   4
public static final int exception_offset   5
public static final int previous_exception_offset   6
public static final int first_temp_offset   7
public static final int starting_dstr_size   20
private string classname
private string sourcename
private classwriter classwriter
private skinnymethodadapter initmethod
private skinnymethodadapter clinitmethod
private int methodindex   0
private int innerindex   0
int fieldindex   0
private int rescuenumber   1
private int ensurenumber   1
staticscope toplevelscope
private cachecompiler cachecompiler
public static final constructor invdyninvcompilerconstructor
public static final method invdynsupportinstaller
static
constructor compilerconstructor   null
method installermethod   null
try
if  safepropertyaccessor getboolean
// if that succeeds, the others should as well
class compiler
class forname
class support
class forname
compilerconstructor   compiler getconstructor basebodycompiler class  skinnymethodadapter class
installermethod   support getdeclaredmethod    methodvisitor class  string class
catch  exception e
e printstacktrace
// leave it null and fall back on our normal invocation logic
invdyninvcompilerconstructor   compilerconstructor
invdynsupportinstaller   installermethod
/** creates a new instance of standardcompilercontext */
public standardasmcompiler string classname  string sourcename
this classname   classname
this sourcename   sourcename
public byte getclassbytearray
return classwriter tobytearray
public class<?> loadclass jrubyclassloader classloader  throws classnotfoundexception
classloader defineclass c getclassname     classwriter tobytearray
return classloader loadclass c getclassname
public void dumpclass printstream out
printwriter pw   new printwriter out
try
traceclassvisitor tcv   new traceclassvisitor pw
new classreader classwriter tobytearray    accept tcv  0
finally
pw close
public void writeclass file destination  throws ioexception
writeclass getclassname   destination  classwriter
private void writeclass string classname  file destination  classwriter writer  throws ioexception
string fullname   classname
string filename   null
string path   null
// verify the class
byte bytecode   writer tobytearray
checkclassadapter verify new classreader bytecode   false  new printwriter system err
if  fullname lastindexof        1
filename   fullname
path
else
filename   fullname substring fullname lastindexof      1
path   fullname substring 0  fullname lastindexof
// create dir if necessary
file pathfile   new file destination  path
pathfile mkdirs
fileoutputstream out   new fileoutputstream new file pathfile  filename
out write bytecode
out close
public string getclassname
return classname
public string getsourcename
return sourcename
public classvisitor getclassvisitor
return classwriter
public void startscript staticscope scope
classwriter   new classwriter classwriter compute_maxs   classwriter compute_frames
// create the class with the appropriate class name and source file
classwriter visit rubyinstanceconfig java_version  acc_public   acc_super getclassname    null  p abstractscript class   null
// add setposition impl, which stores filename as constant to speed updates
skinnymethodadapter method   new skinnymethodadapter getclassvisitor   visitmethod acc_private   acc_static   acc_synthetic     sig void type  params threadcontext class  int class    null  null
method start
method aload 0      thread context
method ldc sourcename
method iload 1      line number
method invokevirtual p threadcontext class      sig void class  string class  int class
method voidreturn
method end
toplevelscope   scope
begininit
cachecompiler   new inheritedcachecompiler this
string sourcenopath
if  sourcename indexof    >  0
string pathelements   sourcename split
sourcenopath   pathelements
else if  sourcename indexof    >  0
string pathelements   sourcename split
sourcenopath   pathelements
else
sourcenopath   sourcename
classwriter visitsource sourcenopath  null
public void endscript boolean generateload  boolean generatemain
// add script#run impl, used for running this script with a specified threadcontext and self
// root method of a script is always in __file__ method
string methodname
if  generateload    generatemain
// the load method is used for loading as a top-level script, and prepares appropriate scoping around the code
skinnymethodadapter method   new skinnymethodadapter getclassvisitor   visitmethod acc_public     getmethodsignature 4   null  null
method start
// invoke __file__ with threadcontext, self, args (null), and block (null)
label trybegin   new label
label tryfinally   new label
method label trybegin
method aload threadcontext_index
buildstaticscopenames method  toplevelscope
method invokestatic p runtimehelpers class      sig void class  threadcontext class  string class
method aload this
method aload threadcontext_index
method aload self_index
method aload args_index
// load always uses irubyobject[], so simple closure offset calculation here
method aload args_index   1   closure_offset
method invokestatic getclassname   methodname  getstaticmethodsignature getclassname    4
method aload threadcontext_index
method invokestatic p runtimehelpers class      sig void class  threadcontext class
method areturn
method label tryfinally
method aload threadcontext_index
method invokestatic p runtimehelpers class      sig void class  threadcontext class
method athrow
method trycatch trybegin  tryfinally  tryfinally  null
method end
if  generatemain
// add main impl, used for detached or command-line execution of this script with a new runtime
// root method of a script is always in stub0, method0
skinnymethodadapter method   new skinnymethodadapter getclassvisitor   visitmethod acc_public   acc_static     sig void type  params string class    null  null
method start
// new instance to invoke run against
method newobj getclassname
method dup
method invokespecial getclassname       sig void type
// instance config for the script run
method newobj p rubyinstanceconfig class
method dup
method invokespecial p rubyinstanceconfig class
// set argv from main's args
method dup
method aload 0
method invokevirtual p rubyinstanceconfig class      sig void class  string class
// invoke run with threadcontext and topself
method invokestatic p ruby class      sig ruby class  rubyinstanceconfig class
method dup
method invokevirtual ruby     sig threadcontext class
method swap
method invokevirtual ruby     sig irubyobject class
method getstatic p irubyobject class      ci irubyobject class
method getstatic p block class      ci block class
method invokevirtual getclassname       getmethodsignature 4
method voidreturn
method end
getcachecompiler   finish
endinit
endclassinit
public static void buildstaticscopenames skinnymethodadapter method  staticscope scope
// construct static scope list of names
string signature   null
switch  scope getnumberofvariables
case 0
method pushint 0
method anewarray p string class
break
case 1  case 2  case 3  case 4  case 5
case 6  case 7  case 8  case 9  case 10
signature   sig string class  params string class  scope getnumberofvariables
for  int i   0  i < scope getnumberofvariables    i
method ldc scope getvariables
method invokestatic p runtimehelpers class      signature
break
default
method pushint scope getnumberofvariables
method anewarray p string class
for  int i   0  i < scope getnumberofvariables    i
method dup
method pushint i
method ldc scope getvariables
method arraystore
break
private void begininit
classvisitor cv   getclassvisitor
initmethod   new skinnymethodadapter cv visitmethod acc_public     sig void type   null  null
initmethod start
initmethod aload this
initmethod invokespecial p abstractscript class      sig void type
cv visitfield acc_private   acc_final     ci class class   null  null
// fixme: this really ought to be in clinit, but it doesn't matter much
initmethod aload this
initmethod ldc c getclassname
initmethod invokestatic p class class      sig class class  params string class
initmethod putfield getclassname       ci class class
// jruby-3014: make __file__ dynamically determined at load time, but
// we provide a reasonable default here
initmethod aload this
initmethod ldc getsourcename
initmethod putfield getclassname       ci string class
private void endinit
initmethod voidreturn
initmethod end
private void beginclassinit
classvisitor cv   getclassvisitor
clinitmethod   new skinnymethodadapter cv visitmethod acc_public   acc_static     sig void type   null  null
clinitmethod start
if  invdynsupportinstaller    null
// install invokedynamic bootstrapper
// todo need to abstract this setup behind another compiler interface
try
invdynsupportinstaller invoke null  clinitmethod  getclassname
catch  illegalaccessexception ex
ex printstacktrace
// ignore; we won't use invokedynamic
catch  illegalargumentexception ex
ex printstacktrace
// ignore; we won't use invokedynamic
catch  invocationtargetexception ex
ex printstacktrace
// ignore; we won't use invokedynamic
private void endclassinit
if  clinitmethod    null
clinitmethod voidreturn
clinitmethod end
public skinnymethodadapter getinitmethod
return initmethod
public skinnymethodadapter getclassinitmethod
// lazily create class init only if necessary
if  clinitmethod    null
beginclassinit
return clinitmethod
public cachecompiler getcachecompiler
return cachecompiler
public bodycompiler startmethod string rubyname  string javaname  compilercallback args  staticscope scope  astinspector inspector
rootscopedbodycompiler methodcompiler   new methodbodycompiler this  rubyname  javaname  inspector  scope
methodcompiler beginmethod args  scope
return methodcompiler
public bodycompiler startfilemethod compilercallback args  staticscope scope  astinspector inspector
methodbodycompiler methodcompiler   new methodbodycompiler this        inspector  scope
methodcompiler beginmethod args  scope
// boxed arg list __file__
skinnymethodadapter method   new skinnymethodadapter getclassvisitor   visitmethod acc_public     getmethodsignature 4   null  null
method start
// invoke static __file__
method aload this
method aload threadcontext_index
method aload self_index
method aload args_index
method aload args_index   1      block
method invokestatic getclassname       getstaticmethodsignature getclassname    4
method areturn
method end
if  methodcompiler isspecificarity
// exact arg list __file__
method   new skinnymethodadapter getclassvisitor   visitmethod acc_public     getmethodsignature scope getrequiredargs     null  null
method start
// invoke static __file__
method aload this
method aload threadcontext_index
method aload self_index
for  int i   0  i < scope getrequiredargs    i
method aload args_index   i
method aload args_index   scope getrequiredargs        block
method invokestatic getclassname       getstaticmethodsignature getclassname    scope getrequiredargs
method areturn
method end
return methodcompiler
public bodycompiler startroot string rubyname  string javaname  staticscope scope  astinspector inspector
rootscopedbodycompiler methodcompiler   new methodbodycompiler this  rubyname  javaname  inspector  scope
methodcompiler beginmethod null  scope
return methodcompiler
public int getmethodindex
return methodindex
public int getandincrementmethodindex
return methodindex
public int getinnerindex
return innerindex
public int getandincrementinnerindex
return innerindex
public int getrescuenumber
return rescuenumber
public int getandincrementrescuenumber
return rescuenumber
public int getensurenumber
return ensurenumber
public int getandincrementensurenumber
return ensurenumber
private int constants   0
public string getnewconstant string type  string name_prefix
return getnewconstant type  name_prefix  null
public synchronized string getnewconstantname
return     constants
public string getnewconstant string type  string name_prefix  object init
classvisitor cv   getclassvisitor
string realname   getnewconstantname
// declare the field
cv visitfield acc_private  realname  type  null  null  visitend
if init    null
initmethod aload this
initmethod ldc init
initmethod putfield getclassname   realname  type
return realname
public string getnewfield string type  string name  object init
classvisitor cv   getclassvisitor
// declare the field
cv visitfield acc_private  name  type  null  null  visitend
if init    null
initmethod aload this
initmethod ldc init
initmethod putfield getclassname   name  type
return name
public string getnewstaticconstant string type  string name_prefix
classvisitor cv   getclassvisitor
string realname
synchronized  this
realname       constants
// declare the field
cv visitfield acc_private   acc_static   acc_final  realname  type  null  null  visitend
return realname