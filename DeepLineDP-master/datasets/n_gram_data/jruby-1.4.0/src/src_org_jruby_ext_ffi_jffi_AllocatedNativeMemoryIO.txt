package org jruby ext ffi jffi
import java util map
import java util concurrent concurrenthashmap
import org jruby ruby
import org jruby ext ffi allocateddirectmemoryio
import org jruby util referencereaper
final class allocatednativememoryio extends boundednativememoryio implements allocateddirectmemoryio
/** keeps strong references to the memoryholder until cleanup */
private static final map<memoryholder  boolean> referenceset   new concurrenthashmap<memoryholder  boolean>
private final memoryholder holder
/**
* allocates native memory
*
* @param runtime the ruby runtime
* @param size the number of bytes to allocate
* @param clear whether the memory should be cleared (zeroed)
* @return a new {@link allocateddirectmemoryio}
*/
static final allocatednativememoryio allocate ruby runtime  int size  boolean clear
return allocatealigned runtime  size  1  clear
/**
* allocates native memory, aligned to a minimum boundary.
*
* @param runtime the ruby runtime
* @param size the number of bytes to allocate
* @param align the minimum alignment of the memory
* @param clear whether the memory should be cleared (zeroed)
* @return a new {@link allocateddirectmemoryio}
*/
static final allocatednativememoryio allocatealigned ruby runtime  int size  int align  boolean clear
final long address   io allocatememory size   align   1  clear
if  address    0
throw runtime newruntimeerror     size
try
return new allocatednativememoryio runtime  address  size  align
catch  throwable t
io freememory address
throw new runtimeexception t
private allocatednativememoryio ruby runtime  long address  int size  int align
super runtime    address   1    ~ align   1     align  size
referenceset put holder   new memoryholder this  address   boolean true
public void free
if  holder released
throw getruntime   newruntimeerror
holder free
referenceset remove holder      no auto cleanup needed
public void setautorelease boolean release
holder autorelease   release
private static final class memoryholder extends referencereaper phantom<allocatednativememoryio> implements runnable
private final long storage
private volatile boolean released   false
private volatile boolean autorelease   true
memoryholder allocatednativememoryio mem  long storage
super mem
this storage   storage
public final void run
referenceset remove this
if  autorelease
free
final void free
if   released
released   true
io freememory storage