/*
***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2004-2009 thomas e enebo <enebo@acm.org>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby
import java io file
import java io ioexception
import org jruby anno jrubyclass
import org jruby anno jrubymethod
import org jruby platform platform
import org jruby runtime block
import org jruby runtime objectallocator
import org jruby runtime threadcontext
import org jruby runtime visibility
import org jruby runtime builtin irubyobject
import org jruby util io invalidvalueexception
import org jruby util io modeflags
/**
* an implementation of tempfile.rb in java.
*/
@jrubyclass name    parent
public class rubytempfile extends rubyfile
private static objectallocator tempfile_allocator   new objectallocator
public irubyobject allocate ruby runtime  rubyclass klass
rubyfile instance   new rubytempfile runtime  klass
instance setmetaclass klass
return instance
public static rubyclass createtempfileclass ruby runtime
rubyclass tempfileclass   runtime defineclass    runtime getfile    tempfile_allocator
rubykernel require tempfileclass  runtime newstring     block null_block
tempfileclass defineannotatedmethods rubytempfile class
return tempfileclass
private final static string default_tmp_dir
private static final object tmpfilelock   new object
private static int counter    1
static
string tmpdir
if  platform is_windows
tmpdir   system getproperty
if  tmpdir    null  tmpdir   system getenv
if  tmpdir    null  tmpdir   system getenv
if  tmpdir    null  tmpdir
else
tmpdir
default_tmp_dir   tmpdir
private file tmpfile   null
// this should only be called by this and rubyfile.
// it allows this object to be created without a iohandler.
public rubytempfile ruby runtime  rubyclass type
super runtime  type
@jrubymethod required   1  optional   1  frame   true  visibility   visibility private
@override
public irubyobject initialize irubyobject args  block block
ruby runtime   getruntime
irubyobject basename   args
irubyobject dir   defaulttmpdir runtime  args
file tmp   null
synchronized tmpfilelock
while  true
try
if  counter     1
counter   new java util random   nextint     0xffff
counter
// we do this b/c make_tmpname might be overridden
irubyobject tmpname   callmethod runtime getcurrentcontext
new irubyobject  basename  runtime newfixnum counter
tmp   new file dir converttostring   tostring    tmpname converttostring   tostring
if  tmp createnewfile
tmpfile   tmp
path   tmp getpath
tmpfile deleteonexit
initializeopen
return this
catch  ioexception e
throw runtime newioerrorfromexception e
private irubyobject defaulttmpdir ruby runtime  irubyobject args
irubyobject dir   null
if  args length    2
dir   args
else
// dir::tmpdir
runtime getloadservice   require
dir   runtime getdir   callmethod runtime getcurrentcontext
if  runtime getsafelevel   > 0    dir istaint
dir   runtime newstring default_tmp_dir
return dir
private void initializeopen
try
modeflags modeflags   new modeflags modeflags rdwr   modeflags excl
getruntime   getposix   chmod path  0600
sysopeninternal path  modeflags  0600
catch  invalidvalueexception e
throw getruntime   newerrnoeinvalerror
/**
* compatibility with tempfile#make_tmpname(basename, n) in mri
*/
@jrubymethod frame   true  required   2  visibility   visibility private
public irubyobject make_tmpname threadcontext context  irubyobject basename  irubyobject n  block block
ruby runtime   context getruntime
irubyobject newargs   new irubyobject
irubyobject base  suffix
if  basename instanceof rubyarray
rubyarray array    rubyarray  basename
int length   array getlength
base   length > 0 ? array eltinternal 0    runtime getnil
suffix   length > 0 ? array eltinternal 1    runtime getnil
else
base   basename
suffix   runtime newstring
newargs   runtime newstring
newargs   base
newargs   runtime getglobalvariables   get        pid
newargs   n
newargs   suffix
return callmethod context     newargs
@jrubymethod frame   true  visibility   visibility public
public irubyobject open
if   isclosed    close
try
openinternal path
catch  invalidvalueexception ex
throw getruntime   newerrnoeinvalerror
return this
@jrubymethod frame   true  visibility   visibility protected
public irubyobject _close threadcontext context
return  isclosed   ? super close     context getruntime   getnil
@jrubymethod optional   1  frame   true  visibility   visibility public
public irubyobject close threadcontext context  irubyobject args  block block
boolean unlink   args length    1 ? args istrue     false
return unlink ? close_bang context    _close context
@jrubymethod name      frame   true  visibility   visibility public
public irubyobject close_bang threadcontext context
_close context
tmpfile delete
return context getruntime   getnil
@jrubymethod name           frame   true
public irubyobject unlink threadcontext context
if  tmpfile exists    tmpfile delete
return context getruntime   getnil
@jrubymethod name           frame   true
public irubyobject size threadcontext context
if   isclosed
flush
return context getruntime   newfilestat path  false  size
return rubyfixnum zero context getruntime
@jrubymethod required   1  optional   1  frame   true  meta   true
public static irubyobject open threadcontext context  irubyobject recv  irubyobject args  block block
ruby runtime   context getruntime
rubyclass klass    rubyclass  recv
rubytempfile tempfile    rubytempfile  klass newinstance context  args  block
if  block isgiven
try
block yield context  tempfile
finally
if   tempfile isclosed    tempfile close
return runtime getnil
return tempfile