/*
***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2001 chad fowler <chadfowler@chadfowler.com>
* copyright (c) 2001 alan moore <alan_moore@gmx.net>
* copyright (c) 2001-2002 benoit cerrina <b.cerrina@wanadoo.fr>
* copyright (c) 2001-2004 jan arne petersen <jpetersen@uni-bonn.de>
* copyright (c) 2002-2006 thomas e enebo <enebo@acm.org>
* copyright (c) 2002-2004 anders bengtsson <ndrsbngtssn@yahoo.se>
* copyright (c) 2004-2005 charles o nutter <headius@headius.com>
* copyright (c) 2004 stefan matthias aust <sma@3plus4.de>
* copyright (c) 2005 kiel hodges <jruby-devel@selfsosoft.com>
* copyright (c) 2006 evan buswell <evan@heron.sytes.net>
* copyright (c) 2006 ola bini <ola@ologix.com>
* copyright (c) 2006 michael studman <codehaus@michaelstudman.com>
* copyright (c) 2006 miguel covarrubias <mlcovarrubias@gmail.com>
* copyright (c) 2007 nick sieger <nicksieger@gmail.com>
* copyright (c) 2008 joseph lafata <joe@quibb.org>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby
import java io bytearrayoutputstream
import java math biginteger
import java util arraylist
import java util random
import static org jruby rubyenumerator enumeratorize
import static org jruby anno framefield
import org jruby anno jrubymethod
import org jruby anno jrubymodule
import org jruby ast util argsutil
import org jruby common irubywarnings id
import org jruby evaluator astinterpreter
import org jruby exceptions jumpexception
import org jruby exceptions mainexitexception
import org jruby exceptions raiseexception
import org jruby internal runtime jumptarget
import org jruby internal runtime methods callconfiguration
import org jruby internal runtime methods javamethod javamethodnblock
import org jruby javasupport util runtimehelpers
import org jruby runtime binding
import org jruby runtime block
import org jruby runtime calltype
import org jruby runtime frame
import org jruby runtime threadcontext
import org jruby runtime visibility
import static org jruby runtime visibility
import org jruby runtime builtin irubyobject
import org jruby runtime load iautoloadmethod
import org jruby runtime load loadservice
import org jruby util idutil
import org jruby util shelllauncher
import org jruby util typeconverter
/**
* note: for cvs history, see kernelmodule.java.
*/
@jrubymodule name
public class rubykernel
public final static class<?> iruby_object   irubyobject class
public static abstract class methodmissingmethod extends javamethodnblock
public methodmissingmethod rubymodule implementationclass
super implementationclass  visibility private  callconfiguration framefullscopenone
@override
public irubyobject call threadcontext context  irubyobject self  rubymodule clazz  string name  irubyobject args  block block
try
preframeonly context  self  name  block
return methodmissing context  self  clazz  name  args  block
finally
postframeonly context
public abstract irubyobject methodmissing threadcontext context  irubyobject self  rubymodule clazz  string name  irubyobject args  block block
public static rubymodule createkernelmodule ruby runtime
rubymodule module   runtime definemodule
runtime setkernel module
module defineannotatedmethods rubykernel class
module defineannotatedmethods rubyobject class
runtime setrespondtomethod module searchmethod
module setflag rubyobject user7_f  false     kernel is the only module that doesn't need an implementor
runtime setprivatemethodmissing new methodmissingmethod module
@override
public irubyobject methodmissing threadcontext context  irubyobject self  rubymodule clazz  string name  irubyobject args  block block
return rubykernel methodmissing context  self  name  private  calltype normal  args  block
runtime setprotectedmethodmissing new methodmissingmethod module
@override
public irubyobject methodmissing threadcontext context  irubyobject self  rubymodule clazz  string name  irubyobject args  block block
return rubykernel methodmissing context  self  name  protected  calltype normal  args  block
runtime setvariablemethodmissing new methodmissingmethod module
@override
public irubyobject methodmissing threadcontext context  irubyobject self  rubymodule clazz  string name  irubyobject args  block block
return rubykernel methodmissing context  self  name  public  calltype variable  args  block
runtime setsupermethodmissing new methodmissingmethod module
@override
public irubyobject methodmissing threadcontext context  irubyobject self  rubymodule clazz  string name  irubyobject args  block block
return rubykernel methodmissing context  self  name  public  calltype super  args  block
runtime setnormalmethodmissing new methodmissingmethod module
@override
public irubyobject methodmissing threadcontext context  irubyobject self  rubymodule clazz  string name  irubyobject args  block block
return rubykernel methodmissing context  self  name  public  calltype normal  args  block
runtime setdefaultmethodmissing module searchmethod
return module
@jrubymethod name      frame   true  module   true  visibility   private
public static irubyobject at_exit threadcontext context  irubyobject recv  block block
return context getruntime   pushexitblock context getruntime   newproc block type proc  block
@jrubymethod name      required   1  module   true  visibility   private
public static irubyobject autoload_p threadcontext context  final irubyobject recv  irubyobject symbol
ruby runtime   context getruntime
rubymodule module   recv instanceof rubymodule ?  rubymodule  recv   runtime getobject
string name   module getname         symbol asjavastring
iautoloadmethod autoloadmethod   runtime getloadservice   autoloadfor name
if  autoloadmethod    null  return runtime getnil
return runtime newstring autoloadmethod file
@jrubymethod name      required   2  frame   true  module   true  visibility   private
public static irubyobject autoload final irubyobject recv  irubyobject symbol  final irubyobject file
ruby runtime   recv getruntime
final loadservice loadservice   runtime getloadservice
string noninternedname   symbol asjavastring
if   idutil isvalidconstantname noninternedname
throw runtime newnameerror    noninternedname
if    file instanceof rubystring   throw runtime newtypeerror file  runtime getstring
rubystring filestring   file converttostring
if  filestring isempty
throw runtime newargumenterror
final string basename   symbol asjavastring   intern       interned  ok for   methods
final rubymodule module   recv instanceof rubymodule ?  rubymodule  recv   runtime getobject
string nm   module getname         basename
irubyobject existingvalue   module fastfetchconstant basename
if  existingvalue    null    existingvalue    rubyobject undef  return runtime getnil
module faststoreconstant basename  rubyobject undef
loadservice addautoload nm  new iautoloadmethod
public string file
return file tostring
/**
* @see org.jruby.runtime.load.iautoloadmethod#load(ruby, string)
*/
public irubyobject load ruby runtime  string name
boolean required   loadservice require file
// file to be loaded by autoload has already been or is being loaded.
if   required  return null
return module fastgetconstant basename
return runtime getnil
@jrubymethod name      rest   true  frame   true  module   true  visibility   private
public static irubyobject method_missing threadcontext context  irubyobject recv  irubyobject args  block block
visibility lastvis   context getlastvisibility
calltype lastcalltype   context getlastcalltype
if  args length    0      args instanceof rubysymbol   throw context getruntime   newargumenterror
return methodmissingdirect context  recv   rubysymbol args  lastvis  lastcalltype  args  block
private static irubyobject methodmissingdirect threadcontext context  irubyobject recv  rubysymbol symbol  visibility lastvis  calltype lastcalltype  irubyobject args  block block
ruby runtime   context getruntime
// create a lightweight thunk
irubyobject msg   new rubynameerror rubynameerrormessage runtime
recv
symbol
lastvis
lastcalltype
final irubyobjectexargs
final rubyclass exc
if  lastcalltype    calltype variable
exc   runtime getnomethoderror
exargs   new irubyobject msg  symbol  rubyarray newarraynocopy runtime  args  1
else
exc   runtime getnameerror
exargs   new irubyobject msg  symbol
throw new raiseexception  rubyexception exc newinstance context  exargs  block null_block
private static irubyobject methodmissing threadcontext context  irubyobject recv  string name  visibility lastvis  calltype lastcalltype  irubyobject args  block block
ruby runtime   context getruntime
// todo: pass this in?
rubysymbol symbol   runtime newsymbol name
// create a lightweight thunk
irubyobject msg   new rubynameerror rubynameerrormessage runtime
recv
symbol
lastvis
lastcalltype
final irubyobjectexargs
final rubyclass exc
if  lastcalltype    calltype variable
exc   runtime getnomethoderror
exargs   new irubyobject msg  symbol  rubyarray newarraynocopy runtime  args
else
exc   runtime getnameerror
exargs   new irubyobject msg  symbol
throw new raiseexception  rubyexception exc newinstance context  exargs  block null_block
@jrubymethod name      required   1  optional   2  frame   true  module   true  visibility   private
public static irubyobject open threadcontext context  irubyobject recv  irubyobject args  block block
string arg   args converttostring   tostring
ruby runtime   context getruntime
if  arg startswith
string command   arg substring 1
// exec process, create io with process
return rubyio popen context  runtime getio    new irubyobject  runtime newstring command    block
return rubyfile open context  runtime getfile    args  block
@jrubymethod name      module   true  visibility   private
public static irubyobject getc threadcontext context  irubyobject recv
context getruntime   getwarnings   warn id deprecated_method
irubyobject defin   context getruntime   getglobalvariables   get
return defin callmethod context
@jrubymethod name      optional   1  module   true  visibility   private
public static irubyobject gets threadcontext context  irubyobject recv  irubyobject args
return rubyargsfile gets context  context getruntime   getglobalvariables   get     args
@jrubymethod name      optional   1  module   true  visibility   private
public static irubyobject abort threadcontext context  irubyobject recv  irubyobject args
if args length    1
context getruntime   getglobalvariables   get    callmethod context   args
throw new mainexitexception 1 true
@jrubymethod name      required   1  module   true  visibility   private
public static irubyobject new_array threadcontext context  irubyobject recv  irubyobject object
irubyobject value   object checkarraytype
if  value isnil
if  object getmetaclass   searchmethod    getimplementationclass      context getruntime   getkernel
value   object callmethod context
if    value instanceof rubyarray   throw context getruntime   newtypeerror
return value
else
return context getruntime   newarray object
return value
@jrubymethod name      module   true  visibility   private  compat   compatversion ruby1_9
public static irubyobject new_complex threadcontext context  irubyobject recv
return runtimehelpers invoke context  context getruntime   getcomplex
@jrubymethod name      module   true  visibility   private  compat   compatversion ruby1_9
public static irubyobject new_complex threadcontext context  irubyobject recv  irubyobject arg
return runtimehelpers invoke context  context getruntime   getcomplex       arg
@jrubymethod name      module   true  visibility   private  compat   compatversion ruby1_9
public static irubyobject new_complex threadcontext context  irubyobject recv  irubyobject arg0  irubyobject arg1
return runtimehelpers invoke context  context getruntime   getcomplex       arg0  arg1
@jrubymethod name      module   true  visibility   private  compat   compatversion ruby1_9
public static irubyobject new_rational threadcontext context  irubyobject recv
return runtimehelpers invoke context  context getruntime   getrational
@jrubymethod name      module   true  visibility   private  compat   compatversion ruby1_9
public static irubyobject new_rational threadcontext context  irubyobject recv  irubyobject arg
return runtimehelpers invoke context  context getruntime   getrational       arg
@jrubymethod name      module   true  visibility   private  compat   compatversion ruby1_9
public static irubyobject new_rational threadcontext context  irubyobject recv  irubyobject arg0  irubyobject arg1
return runtimehelpers invoke context  context getruntime   getrational       arg0  arg1
@jrubymethod name      module   true  visibility   private
public static rubyfloat new_float irubyobject recv  irubyobject object
if object instanceof rubyfixnum
return rubyfloat newfloat object getruntime      rubyfixnum object  getdoublevalue
else if object instanceof rubyfloat
return  rubyfloat object
else if object instanceof rubybignum
return rubyfloat newfloat object getruntime    rubybignum big2dbl  rubybignum object
else if object instanceof rubystring
if   rubystring object  getbytelist   realsize    0      rb_cstr_to_dbl case
throw recv getruntime   newargumenterror     object inspect
return rubynumeric str2fnum recv getruntime    rubystring object true
else if object isnil
throw recv getruntime   newtypeerror
else
rubyfloat rfloat    rubyfloat typeconverter converttotype object  recv getruntime   getfloat
if  double isnan rfloat getdoublevalue     throw recv getruntime   newargumenterror
return rfloat
@jrubymethod name      required   1  module   true  visibility   private
public static irubyobject new_integer threadcontext context  irubyobject recv  irubyobject object
if  object instanceof rubyfloat
double val     rubyfloat object  getdoublevalue
if  val >  double  rubyfixnum max    val <  double  rubyfixnum min
return rubynumeric dbl2num context getruntime     rubyfloat object  getdoublevalue
else if  object instanceof rubyfixnum    object instanceof rubybignum
return object
else if  object instanceof rubystring
return rubynumeric str2inum context getruntime    rubystring object 0 true
irubyobject tmp   typeconverter converttotype object  context getruntime   getinteger       false
if  tmp isnil    return object converttointeger
return tmp
@jrubymethod name      required   1  module   true  visibility   private
public static irubyobject new_string threadcontext context  irubyobject recv  irubyobject object
return typeconverter converttotype object  context getruntime   getstring
@jrubymethod name      rest   true  module   true  visibility   private
public static irubyobject p threadcontext context  irubyobject recv  irubyobject args
ruby runtime   context getruntime
irubyobject defout   runtime getglobalvariables   get
for  int i   0  i < args length  i
if  args    null
defout callmethod context     rubyobject inspect context  args
defout callmethod context     runtime newstring
irubyobject result   runtime getnil
if  runtime is1_9
if  args length    1
result   args
else if  args length > 1
result   runtime newarray args
if  defout instanceof rubyfile
rubyfile defout  flush
return result
/** rb_f_putc
*/
@jrubymethod name      required   1  module   true  visibility   private
public static irubyobject putc threadcontext context  irubyobject recv  irubyobject ch
irubyobject defout   context getruntime   getglobalvariables   get
return rubyio putc context  defout  ch
@jrubymethod name      rest   true  module   true  visibility   private
public static irubyobject puts threadcontext context  irubyobject recv  irubyobject args
irubyobject defout   context getruntime   getglobalvariables   get
return rubyio puts context  defout  args
@jrubymethod name      rest   true  module   true  visibility   private
public static irubyobject print threadcontext context  irubyobject recv  irubyobject args
irubyobject defout   context getruntime   getglobalvariables   get
return rubyio print context  defout  args
@jrubymethod name      rest   true  module   true  visibility   private
public static irubyobject printf threadcontext context  irubyobject recv  irubyobject args
if  args length    0
irubyobject defout   context getruntime   getglobalvariables   get
if    args instanceof rubystring
defout   args
args   argsutil poparray args
defout callmethod context     rubykernel sprintf recv  args
return context getruntime   getnil
@jrubymethod name      optional   1  module   true  visibility   private
public static irubyobject readline threadcontext context  irubyobject recv  irubyobject args
irubyobject line   gets context  recv  args
if  line isnil    throw context getruntime   neweoferror
return line
@jrubymethod name      optional   1  module   true  visibility   private
public static irubyobject readlines threadcontext context  irubyobject recv  irubyobject args
return rubyargsfile readlines context  context getruntime   getglobalvariables   get     args
/** returns value of $_.
*
* @throws typeerror if $_ is not a string or nil.
* @return value of $_ as string.
*/
private static rubystring getlastlinestring threadcontext context  ruby runtime
irubyobject line   context getcurrentscope   getlastline runtime
if  line isnil
throw runtime newtypeerror
else if    line instanceof rubystring
throw runtime newtypeerror     line getmetaclass   getname
else
return  rubystring  line
/**
* variable-arity version for compatibility. not bound to ruby.
* @deprecated use the one or two-arg versions.
*/
public static irubyobject sub_bang threadcontext context  irubyobject recv  irubyobject args  block block
return getlastlinestring context  context getruntime    sub_bang context  args  block
@jrubymethod name      frame   true  module   true  visibility   private  reads   lastline  compat   compatversion ruby1_8
public static irubyobject sub_bang threadcontext context  irubyobject recv  irubyobject arg0  block block
return getlastlinestring context  context getruntime    sub_bang context  arg0  block
@jrubymethod name      frame   true  module   true  visibility   private  reads   lastline  compat   compatversion ruby1_8
public static irubyobject sub_bang threadcontext context  irubyobject recv  irubyobject arg0  irubyobject arg1  block block
return getlastlinestring context  context getruntime    sub_bang context  arg0  arg1  block
/**
* variable-arity version for compatibility. not bound to ruby.
* @deprecated use the one or two-arg versions.
*/
public static irubyobject sub threadcontext context  irubyobject recv  irubyobject args  block block
rubystring str    rubystring  getlastlinestring context  context getruntime    dup
if   str sub_bang context  args  block  isnil
context getcurrentscope   setlastline str
return str
@jrubymethod name      frame   true  module   true  visibility   private  reads   lastline  writes   lastline  compat   compatversion ruby1_8
public static irubyobject sub threadcontext context  irubyobject recv  irubyobject arg0  block block
rubystring str    rubystring  getlastlinestring context  context getruntime    dup
if   str sub_bang context  arg0  block  isnil
context getcurrentscope   setlastline str
return str
@jrubymethod name      frame   true  module   true  visibility   private  reads   lastline  writes   lastline  compat   compatversion ruby1_8
public static irubyobject sub threadcontext context  irubyobject recv  irubyobject arg0  irubyobject arg1  block block
rubystring str    rubystring  getlastlinestring context  context getruntime    dup
if   str sub_bang context  arg0  arg1  block  isnil
context getcurrentscope   setlastline str
return str
/**
* variable-arity version for compatibility. not bound to ruby.
* @deprecated use the one or two-arg versions.
*/
public static irubyobject gsub_bang threadcontext context  irubyobject recv  irubyobject args  block block
return getlastlinestring context  context getruntime    gsub_bang context  args  block
@jrubymethod name      frame   true  module   true  visibility   private  reads   lastline  writes   lastline  compat   compatversion ruby1_8
public static irubyobject gsub_bang threadcontext context  irubyobject recv  irubyobject arg0  block block
return getlastlinestring context  context getruntime    gsub_bang context  arg0  block
@jrubymethod name      frame   true  module   true  visibility   private  reads   lastline  writes   lastline  compat   compatversion ruby1_8
public static irubyobject gsub_bang threadcontext context  irubyobject recv  irubyobject arg0  irubyobject arg1  block block
return getlastlinestring context  context getruntime    gsub_bang context  arg0  arg1  block
/**
* variable-arity version for compatibility. not bound to ruby.
* @deprecated use the one or two-arg versions.
*/
public static irubyobject gsub threadcontext context  irubyobject recv  irubyobject args  block block
rubystring str    rubystring  getlastlinestring context  context getruntime    dup
if   str gsub_bang context  args  block  isnil
context getcurrentscope   setlastline str
return str
@jrubymethod name      frame   true  module   true  visibility   private  reads   lastline  writes   lastline  compat   compatversion ruby1_8
public static irubyobject gsub threadcontext context  irubyobject recv  irubyobject arg0  block block
rubystring str    rubystring  getlastlinestring context  context getruntime    dup
if   str gsub_bang context  arg0  block  isnil
context getcurrentscope   setlastline str
return str
@jrubymethod name      frame   true  module   true  visibility   private  reads   lastline  writes   lastline  compat   compatversion ruby1_8
public static irubyobject gsub threadcontext context  irubyobject recv  irubyobject arg0  irubyobject arg1  block block
rubystring str    rubystring  getlastlinestring context  context getruntime    dup
if   str gsub_bang context  arg0  arg1  block  isnil
context getcurrentscope   setlastline str
return str
@jrubymethod name      frame   true  module   true  visibility   private  reads   lastline  writes   lastline  compat   compatversion ruby1_8
public static irubyobject chop_bang threadcontext context  irubyobject recv  block block
return getlastlinestring context  context getruntime    chop_bang context
@jrubymethod name      frame   true  module   true  visibility   private  reads   lastline  writes   lastline  compat   compatversion ruby1_8
public static irubyobject chop threadcontext context  irubyobject recv  block block
rubystring str   getlastlinestring context  context getruntime
if  str getbytelist   realsize > 0
str    rubystring  str dup
str chop_bang context
context getcurrentscope   setlastline str
return str
/**
* variable-arity version for compatibility. not bound to ruby.
* @deprecated use the zero or one-arg versions.
*/
public static irubyobject chomp_bang threadcontext context  irubyobject recv  irubyobject args  block block
return getlastlinestring context  context getruntime    chomp_bang args
@jrubymethod name      frame   true  module   true  visibility   private  reads   lastline  writes   lastline  compat   compatversion ruby1_8
public static irubyobject chomp_bang threadcontext context  irubyobject recv
return getlastlinestring context  context getruntime    chomp_bang context
@jrubymethod name      frame   true  module   true  visibility   private  reads   lastline  writes   lastline  compat   compatversion ruby1_8
public static irubyobject chomp_bang threadcontext context  irubyobject recv  irubyobject arg0
return getlastlinestring context  context getruntime    chomp_bang context  arg0
/**
* variable-arity version for compatibility. not bound to ruby.
* @deprecated use the zero or one-arg versions.
*/
public static irubyobject chomp threadcontext context  irubyobject recv  irubyobject args  block block
rubystring str   getlastlinestring context  context getruntime
rubystring dup    rubystring  str dup
if  dup chomp_bang args  isnil
return str
context getcurrentscope   setlastline dup
return dup
@jrubymethod name      frame   true  module   true  visibility   private  reads   lastline  writes   lastline  compat   compatversion ruby1_8
public static irubyobject chomp threadcontext context  irubyobject recv
rubystring str   getlastlinestring context  context getruntime
rubystring dup    rubystring  str dup
if  dup chomp_bang context  isnil
return str
context getcurrentscope   setlastline dup
return dup
@jrubymethod name      frame   true  module   true  visibility   private  reads   lastline  writes   lastline  compat   compatversion ruby1_8
public static irubyobject chomp threadcontext context  irubyobject recv  irubyobject arg0
rubystring str   getlastlinestring context  context getruntime
rubystring dup    rubystring  str dup
if  dup chomp_bang context  arg0  isnil
return str
context getcurrentscope   setlastline dup
return dup
/**
* variable arity version for compatibility. not bound to a ruby method.
*
* @param context the thread context for the current thread
* @param recv the receiver of the method (usually a class that has included kernel)
* @return
* @deprecated use the versions with zero, one, or two args.
*/
public static irubyobject split threadcontext context  irubyobject recv  irubyobject args
return getlastlinestring context  context getruntime    split context  args
@jrubymethod name      frame   true  module   true  visibility   private  reads   lastline  writes    lastline  backref   compat   compatversion ruby1_8
public static irubyobject split threadcontext context  irubyobject recv
return getlastlinestring context  context getruntime    split context
@jrubymethod name      frame   true  module   true  visibility   private  reads   lastline  writes    lastline  backref   compat   compatversion ruby1_8
public static irubyobject split threadcontext context  irubyobject recv  irubyobject arg0
return getlastlinestring context  context getruntime    split context  arg0
@jrubymethod name      frame   true  module   true  visibility   private  reads   lastline  writes    lastline  backref   compat   compatversion ruby1_8
public static irubyobject split threadcontext context  irubyobject recv  irubyobject arg0  irubyobject arg1
return getlastlinestring context  context getruntime    split context  arg0  arg1
@jrubymethod name      required   1  frame   true  module   true  visibility   private  reads    lastline  backref   writes    lastline  backref   compat   compatversion ruby1_8
public static irubyobject scan threadcontext context  irubyobject recv  irubyobject pattern  block block
return getlastlinestring context  context getruntime    scan context  pattern  block
@jrubymethod name      required   1  optional   3  module   true  visibility   private
public static irubyobject select threadcontext context  irubyobject recv  irubyobject args
return rubyio select_static context  context getruntime    args
@jrubymethod name      optional   1  module   true  visibility   private
public static irubyobject sleep threadcontext context  irubyobject recv  irubyobject args
long milliseconds
if  args length    0
// zero sleeps forever
milliseconds   0
else
if    args instanceof rubynumeric
throw context getruntime   newtypeerror     args getmetaclass   getname
milliseconds    long   args converttofloat   getdoublevalue     1000
if  milliseconds < 0
throw context getruntime   newargumenterror
else if  milliseconds    0
// explicit zero in mri returns immediately
return context getruntime   newfixnum 0
long starttime   system currenttimemillis
rubythread rubythread   context getthread
// spurious wakeup-loop
do
long loopstarttime   system currenttimemillis
try
// we break if we know this sleep was explicitly woken up/interrupted
if   rubythread sleep milliseconds   break
catch  interruptedexception iexcptn
milliseconds     system currenttimemillis     loopstarttime
while  milliseconds > 0
return context getruntime   newfixnum math round  system currenttimemillis     starttime    1000 0
// fixme: add at_exit and finalizers to exit, then make exit_bang not call those.
@jrubymethod name      optional   1  module   true  visibility   private
public static irubyobject exit irubyobject recv  irubyobject args
exit recv getruntime    args  false
return recv getruntime   getnil       not reached
@jrubymethod name      optional   1  module   true  visibility   private
public static irubyobject exit_bang irubyobject recv  irubyobject args
exit recv getruntime    args  true
return recv getruntime   getnil       not reached
private static void exit ruby runtime  irubyobject args  boolean hard
runtime secure 4
int status   1
if  args length > 0
rubyobject argument    rubyobject args
if  argument instanceof rubyfixnum
status   rubynumeric fix2int argument
else
status   argument isfalse   ? 1   0
if  hard
throw new mainexitexception status  true
else
throw runtime newsystemexit status
/** returns an array with the names of all global variables.
*
*/
@jrubymethod name      module   true  visibility   private
public static rubyarray global_variables threadcontext context  irubyobject recv
ruby runtime   context getruntime
rubyarray globalvariables   runtime newarray
for  string globalvariablename   runtime getglobalvariables   getnames
globalvariables append runtime newstring globalvariablename
return globalvariables
/** returns an array with the names of all local variables.
*
*/
@jrubymethod name      module   true  visibility   private
public static rubyarray local_variables threadcontext context  irubyobject recv
final ruby runtime   context getruntime
rubyarray localvariables   runtime newarray
for  string name  context getcurrentscope   getallnamesinscope
if  idutil islocal name   localvariables append runtime newstring name
return localvariables
@jrubymethod name      module   true  visibility   private  compat   compatversion ruby1_8
public static rubybinding binding threadcontext context  irubyobject recv  block block
return rubybinding newbinding context getruntime    context currentbinding recv
@jrubymethod name      module   true  visibility   private  compat   compatversion ruby1_9
public static rubybinding binding_1_9 threadcontext context  irubyobject recv  block block
return rubybinding newbinding context getruntime    context currentbinding
@jrubymethod name           frame   true  module   true  visibility   private
public static rubyboolean block_given_p threadcontext context  irubyobject recv  block block
return context getruntime   newboolean context getpreviousframe   getblock   isgiven
@deprecated
public static irubyobject sprintf irubyobject recv  irubyobject args
return sprintf recv getruntime   getcurrentcontext    recv  args
@jrubymethod name           required   1  rest   true  module   true  visibility   private
public static irubyobject sprintf threadcontext context  irubyobject recv  irubyobject args
if  args length    0
throw context getruntime   newargumenterror
rubystring str   rubystring stringvalue args
rubyarray newargs   context getruntime   newarraynocopy args
newargs shift context
return str op_format context  newargs
@jrubymethod name           optional   3  frame   true  module   true  visibility   private
public static irubyobject raise threadcontext context  irubyobject recv  irubyobject args  block block
// fixme: pass block down?
ruby runtime   context getruntime
if  args length    0
irubyobject lastexception   runtime getglobalvariables   get
if  lastexception isnil
throw new raiseexception runtime  runtime getruntimeerror       false
throw new raiseexception  rubyexception  lastexception
irubyobject exception
if  args length    1
if  args instanceof rubystring
throw new raiseexception  rubyexception runtime getruntimeerror   newinstance context  args  block
if   args respondsto
throw runtime newtypeerror
exception   args callmethod context
else
if   args respondsto
throw runtime newtypeerror
exception   args callmethod context     args
if   runtime fastgetclass    isinstance exception
throw runtime newtypeerror
if  args length    3
rubyexception  exception  set_backtrace args
if  runtime getdebug   istrue
printexceptionsummary context  runtime   rubyexception  exception
throw new raiseexception  rubyexception  exception
private static void printexceptionsummary threadcontext context  ruby runtime  rubyexception rex
frame currentframe   context getcurrentframe
string msg   string format
rex getmetaclass    rex converttostring   tostring
currentframe getfile    currentframe getline     1
rex to_s
runtime geterr   print msg
/**
* require.
* mri allows to require ever .rb files or ruby extension dll (.so or .dll depending on system).
* we allow requiring either .rb files or jars.
* @param recv ruby object used to call require (any object will do and it won't be used anyway).
* @param name the name of the file to require
**/
@jrubymethod name      required   1  frame   true  module   true  visibility   private
public static irubyobject require irubyobject recv  irubyobject name  block block
ruby runtime   recv getruntime
if  runtime getloadservice   lockandrequire name converttostring   tostring
return runtime gettrue
return runtime getfalse
@jrubymethod name      required   1  optional   1  frame   true  module   true  visibility   private
public static irubyobject load irubyobject recv  irubyobject args  block block
ruby runtime   recv getruntime
rubystring file   args converttostring
boolean wrap   args length    2 ? args istrue     false
runtime getloadservice   load file getbytelist   tostring    wrap
return runtime gettrue
@jrubymethod name      required   1  optional   3  frame   true  module   true  visibility   private
public static irubyobject eval threadcontext context  irubyobject recv  irubyobject args  block block
ruby runtime   context getruntime
// string to eval
rubystring src   args converttostring
runtime checksafestring src
boolean bindinggiven   args length > 1     args isnil
binding binding   bindinggiven ? converttobinding args    context previousbinding
if  args length > 2
// file given, use it and force it into binding
binding setfile args converttostring   tostring
else
// file not given
if  bindinggiven
// binding given, use binding's file
else
// no binding given, use (eval)
binding setfile
if  args length > 3
// file given, use it and force it into binding
binding setline  int  args converttointeger   getlongvalue
else
// no binding given, use 0 for both
binding setline 0
return astinterpreter evalwithbinding context  src  binding
private static binding converttobinding irubyobject scope
if  scope instanceof rubybinding
return   rubybinding scope  getbinding   clone
else
if  scope instanceof rubyproc
return   rubyproc  scope  getblock   getbinding   clone
else
// bomb out, it's not a binding or a proc
throw scope getruntime   newtypeerror     scope getmetaclass
@jrubymethod name      frame   true  module   true  visibility   private
public static irubyobject callcc threadcontext context  irubyobject recv  block block
rubycontinuation continuation   new rubycontinuation context getruntime
return continuation enter context  block
public static irubyobject caller threadcontext context  irubyobject recv  irubyobject args  block block
int level   args length > 0 ? rubynumeric fix2int args    1
if  level < 0
throw context getruntime   newargumenterror     level
return context createcallerbacktrace context getruntime    level
@jrubymethod name      optional   1  frame   true  module   true  visibility   private
public static irubyobject caller1_9 threadcontext context  irubyobject recv  irubyobject args  block block
int level   args length > 0 ? rubynumeric fix2int args    1
if  level < 0
throw context getruntime   newargumenterror     level
return context createcallerbacktrace context getruntime    level
@jrubymethod name      required   1  frame   true  module   true  visibility   private
public static irubyobject rbcatch threadcontext context  irubyobject recv  irubyobject tag  block block
catchtarget target   new catchtarget tag asjavastring
try
context pushcatch target
return block yield context  tag
catch  jumpexception throwjump tj
if  tj gettarget      target  return  irubyobject  tj getvalue
throw tj
finally
context popcatch
public static class catchtarget implements jumptarget
private final string tag
public catchtarget string tag    this tag   tag
public string gettag     return tag
@jrubymethod name      required   1  frame   true  optional   1  module   true  visibility   private
public static irubyobject rbthrow threadcontext context  irubyobject recv  irubyobject args  block block
ruby runtime   context getruntime
string tag   args asjavastring
catchtarget catches   context getactivecatches
string message       tag
// ordering of array traversal not important, just intuitive
for  int i   catches length   1   i >  0   i
if  tag equals catches gettag
//catch active, throw for catch to handle
throw new jumpexception throwjump catches  args length > 1 ? args   runtime getnil
// no catch active for this throw
rubythread currentthread   context getthread
if  currentthread    runtime getthreadservice   getmainthread
throw runtime newnameerror message  tag
else
throw runtime newthreaderror message       integer tohexstring rubyinteger fix2int currentthread id
@jrubymethod name      required   1  frame   true  optional   1  module   true  visibility   private
public static irubyobject trap threadcontext context  irubyobject recv  irubyobject args  block block
context getruntime   getloadservice   require
return runtimehelpers invoke context  recv     args  block
@jrubymethod name      required   1  module   true  visibility   private
public static irubyobject warn threadcontext context  irubyobject recv  irubyobject message
ruby runtime   context getruntime
if  runtime warningsenabled
irubyobject out   runtime getglobalvariables   get
runtimehelpers invoke context  out     message
return runtime getnil
@jrubymethod name      required   1  frame   true  module   true  visibility   private
public static irubyobject set_trace_func threadcontext context  irubyobject recv  irubyobject trace_func  block block
if   rubyinstanceconfig full_trace_enabled
// without full tracing, many events will not fire
context getruntime   getwarnings   warn
if  trace_func isnil
context getruntime   settracefunction null
else if    trace_func instanceof rubyproc
throw context getruntime   newtypeerror
else
context getruntime   settracefunction  rubyproc  trace_func
return trace_func
@jrubymethod name      required   1  optional   1  frame   true  module   true  visibility   private
public static irubyobject trace_var threadcontext context  irubyobject recv  irubyobject args  block block
if  args length    0  throw context getruntime   newargumenterror 0  1
rubyproc proc   null
string var   args length > 1 ? args tostring     null
// ignore if it's not a global var
if  var charat 0        return context getruntime   getnil
if  args length    1  proc   rubyproc newproc context getruntime    block  block type proc
if  args length    2
proc    rubyproc typeconverter converttotype args  context getruntime   getproc       true
context getruntime   getglobalvariables   settracevar var  proc
return context getruntime   getnil
@jrubymethod name      required   1  optional   1  frame   true  module   true  visibility   private
public static irubyobject untrace_var threadcontext context  irubyobject recv  irubyobject args  block block
if  args length    0  throw context getruntime   newargumenterror 0  1
string var   args length >  1 ? args tostring     null
// ignore if it's not a global var
if  var charat 0        return context getruntime   getnil
if  args length > 1
arraylist<irubyobject> success   new arraylist<irubyobject>
for  int i   1  i < args length  i
if  context getruntime   getglobalvariables   untracevar var  args
success add args
return rubyarray newarray context getruntime    success
else
context getruntime   getglobalvariables   untracevar var
return context getruntime   getnil
@jrubymethod name      required   1  frame   true  module   true  visibility   private
public static irubyobject singleton_method_added threadcontext context  irubyobject recv  irubyobject symbolid  block block
return context getruntime   getnil
@jrubymethod name      required   1  frame   true  module   true  visibility   private
public static irubyobject singleton_method_removed threadcontext context  irubyobject recv  irubyobject symbolid  block block
return context getruntime   getnil
@jrubymethod name      required   1  frame   true  module   true  visibility   private
public static irubyobject singleton_method_undefined threadcontext context  irubyobject recv  irubyobject symbolid  block block
return context getruntime   getnil
@jrubymethod name      required   1  optional   1  module   true  visibility   private  compat   compatversion ruby1_9
public static irubyobject define_singleton_method threadcontext context  irubyobject recv  irubyobject args  block block
if  args length    0  throw context getruntime   newargumenterror 0  1
rubyclass singleton_class   recv getsingletonclass
irubyobject obj   args length > 1 ?
singleton_class define_method context  args  args  block
singleton_class define_method context  args  block
return obj
@jrubymethod name           frame   true  module   true  visibility   private  compat   compatversion ruby1_8
public static rubyproc proc threadcontext context  irubyobject recv  block block
return context getruntime   newproc block type lambda  block
@deprecated
public static rubyproc proc irubyobject recv  block block
return recv getruntime   newproc block type lambda  block
@jrubymethod name        frame   true  module   true  visibility   private  compat   compatversion ruby1_9
public static rubyproc lambda threadcontext context  irubyobject recv  block block
return context getruntime   newproc block type lambda  block
@jrubymethod name        frame   true  module   true  visibility   private  compat   compatversion ruby1_9
public static rubyproc proc_1_9 threadcontext context  irubyobject recv  block block
return context getruntime   newproc block type proc  block
@jrubymethod name        frame   true  module   true  visibility   private
public static irubyobject loop_1_9 threadcontext context  irubyobject recv  block block
irubyobject nil   context getruntime   getnil
rubyclass stopiteration   context getruntime   getstopiteration
try
while  true
block yield context  nil
context pollthreadevents
catch  raiseexception ex
if   stopiteration op_eqq context  ex getexception    istrue
throw ex
return nil
@jrubymethod name      required   2  optional   1  module   true  visibility   private
public static irubyobject test threadcontext context  irubyobject recv  irubyobject args
if  args length    0  throw context getruntime   newargumenterror
int cmd
if  args instanceof rubyfixnum
cmd    int   rubyfixnum  args  getlongvalue
else if  args instanceof rubystring
rubystring  args  getbytelist   length   > 0
// mri behavior: use first byte of string value if len > 0
cmd     rubystring  args  getbytelist   charat 0
else
cmd    int  args converttointeger   getlongvalue
// mri behavior: raise argumenterror for 'unknown command' before
// checking number of args.
switch cmd
case    case    case    case    case    case    case    case    case
case    case    case    case    case    case    case    case    case
case    case    case    case    case    case    case    case    case
case    case
break
default
throw context getruntime   newargumenterror      char  cmd
// mri behavior: now check arg count
switch cmd
case    case    case    case
if  args length    3  throw context getruntime   newargumenterror args length  3
break
default
if  args length    2  throw context getruntime   newargumenterror args length  2
break
switch  cmd
case       ?a    time      last access time for file1
return context getruntime   newfilestat args converttostring   tostring    false  atime
case       ?b    boolean   true if file1 is a block device
return rubyfiletest blockdev_p recv  args
case       ?c    boolean   true if file1 is a character device
return rubyfiletest chardev_p recv  args
case       ?c    time      last change time for file1
return context getruntime   newfilestat args converttostring   tostring    false  ctime
case       ?d    boolean   true if file1 exists and is a directory
return rubyfiletest directory_p recv  args
case       ?e    boolean   true if file1 exists
return rubyfiletest exist_p recv  args
case       ?f    boolean   true if file1 exists and is a regular file
return rubyfiletest file_p recv  args
case       ?g    boolean   true if file1 has the  cf setgid  bit
return rubyfiletest setgid_p recv  args
case       ?g    boolean   true if file1 exists and has a group ownership equal to the caller's group
return rubyfiletest grpowned_p recv  args
case       ?k    boolean   true if file1 exists and has the sticky bit set
return rubyfiletest sticky_p recv  args
case       ?m    time      last modification time for file1
return context getruntime   newfilestat args converttostring   tostring    false  mtime
case       ?l    boolean   true if file1 exists and is a symbolic link
return rubyfiletest symlink_p recv  args
case       ?o    boolean   true if file1 exists and is owned by the caller's effective uid
return rubyfiletest owned_p recv  args
case       ?o    boolean   true if file1 exists and is owned by the caller's real uid
return rubyfiletest rowned_p recv  args
case       ?p    boolean   true if file1 exists and is a fifo
return rubyfiletest pipe_p recv  args
case       ?r    boolean   true if file1 is readable by the effective uid gid of the caller
return rubyfiletest readable_p recv  args
case       ?r    boolean   true if file is readable by the real uid gid of the caller
// fixme: need to implement an readable_real_p in filetest
return rubyfiletest readable_p recv  args
case       ?s    int nil   if file1 has nonzero size  return the size  otherwise nil
return rubyfiletest size_p recv  args
case       ?s    boolean   true if file1 exists and is a socket
return rubyfiletest socket_p recv  args
case       ?u    boolean   true if file1 has the setuid bit set
return rubyfiletest setuid_p recv  args
case       ?w    boolean   true if file1 exists and is writable by effective uid gid
return rubyfiletest writable_p recv  args
case       ?w    boolean   true if file1 exists and is writable by the real uid gid
// fixme: need to implement an writable_real_p in filetest
return rubyfiletest writable_p recv  args
case       ?x    boolean   true if file1 exists and is executable by the effective uid gid
return rubyfiletest executable_p recv  args
case       ?x    boolean   true if file1 exists and is executable by the real uid gid
return rubyfiletest executable_real_p recv  args
case       ?z    boolean   true if file1 exists and has a zero length
return rubyfiletest zero_p recv  args
case       ?     boolean   true if the modification times of file1 and file2 are equal
return context getruntime   newfilestat args converttostring   tostring    false  mtimeequals args
case       ?<    boolean   true if the modification time of file1 is prior to that of file2
return context getruntime   newfilestat args converttostring   tostring    false  mtimelessthan args
case       ?>    boolean   true if the modification time of file1 is after that of file2
return context getruntime   newfilestat args converttostring   tostring    false  mtimegreaterthan args
case       ?     boolean   true if file1 and file2 are identical
return rubyfiletest identical_p recv  args  args
default
throw new internalerror
@jrubymethod name      required   1  module   true  visibility   private
public static irubyobject backquote threadcontext context  irubyobject recv  irubyobject astring
ruby runtime   context getruntime
bytearrayoutputstream output   new bytearrayoutputstream
rubystring string   astring converttostring
int resultcode   shelllauncher runandwait runtime  new irubyobject  string   output
runtime getglobalvariables   set    rubyprocess rubystatus newprocessstatus runtime  resultcode
return rubystring newstringnocopy runtime  output tobytearray
@jrubymethod name      module   true  visibility   private
public static rubyinteger srand threadcontext context  irubyobject recv
ruby runtime   context getruntime
// not sure how well this works, but it works much better than
// just currenttimemillis by itself.
long oldrandomseed   runtime getrandomseed
runtime setrandomseed system currenttimemillis   ^
recv hashcode   ^ runtime incrementrandomseedsequence   ^
runtime getrandom   nextint math max 1  math abs  int runtime getrandomseed
runtime getrandom   setseed runtime getrandomseed
return runtime newfixnum oldrandomseed
@jrubymethod name      module   true  visibility   private
public static rubyinteger srand threadcontext context  irubyobject recv  irubyobject arg
rubyinteger integerseed   arg converttointeger
ruby runtime   context getruntime
long oldrandomseed   runtime getrandomseed
runtime setrandomseed integerseed getlongvalue
runtime getrandom   setseed runtime getrandomseed
return runtime newfixnum oldrandomseed
@jrubymethod name      module   true  visibility   private
public static rubynumeric rand threadcontext context  irubyobject recv
ruby runtime   context getruntime
return rubyfloat newfloat runtime  runtime getrandom   nextdouble
@jrubymethod name      module   true  visibility   private
public static rubynumeric rand threadcontext context  irubyobject recv  irubyobject arg
ruby runtime   context getruntime
random random   runtime getrandom
if  arg instanceof rubybignum
byte bigceilbytes     rubybignum  arg  getvalue   tobytearray
biginteger bigceil   new biginteger bigceilbytes  abs
byte randbytes   new byte
random nextbytes randbytes
biginteger result   new biginteger randbytes  abs   mod bigceil
return new rubybignum runtime  result
rubyinteger integerceil    rubyinteger rubykernel new_integer context  recv  arg
long ceil   math abs integerceil getlongvalue
if  ceil    0  return rubyfloat newfloat runtime  random nextdouble
if  ceil > integer max_value  return runtime newfixnum math abs random nextlong    % ceil
return runtime newfixnum random nextint  int  ceil
@jrubymethod name      required   1  rest   true  module   true  visibility   private  compat   compatversion ruby1_9
public static rubyfixnum spawn threadcontext context  irubyobject recv  irubyobject args
ruby runtime   context getruntime
long pid   shelllauncher runwithoutwait runtime  args
return rubyfixnum newfixnum runtime  pid
@jrubymethod name      required   1  optional   9  module   true  visibility   private
public static irubyobject syscall threadcontext context  irubyobject recv  irubyobject args
throw context getruntime   newnotimplementederror
@jrubymethod name      required   1  rest   true  module   true  visibility   private
public static rubyboolean system threadcontext context  irubyobject recv  irubyobject args
ruby runtime   context getruntime
int resultcode
try
resultcode   shelllauncher runandwait runtime  args
catch  exception e
resultcode   127
runtime getglobalvariables   set    rubyprocess rubystatus newprocessstatus runtime  resultcode
return runtime newboolean resultcode    0
@jrubymethod name        required   1  rest   true  module   true  visibility   private
public static irubyobject exec threadcontext context  irubyobject recv  irubyobject args
ruby runtime   context getruntime
// this is a fairly specific hack for empty string, but it does the job
if  args length    1    args converttostring   isempty
throw runtime newerrnoenoenterror args converttostring   tostring
int resultcode
try
// todo: exec should replace the current process.
// this could be possible with jna.
resultcode   shelllauncher execandwait runtime  args
catch  exception e
throw runtime newerrnoenoenterror
exit runtime  new irubyobject  runtime newfixnum resultcode    true
// not reached
return runtime getnil
@jrubymethod name      module   true  visibility   private
public static irubyobject fork threadcontext context  irubyobject recv  block block
ruby runtime   context getruntime
if   rubyinstanceconfig fork_enabled
throw runtime newnotimplementederror
if  block isgiven
int pid   runtime getposix   fork
if  pid    0
try
block yield context  runtime getnil
catch  raiseexception re
if  re getexception   instanceof rubysystemexit
throw re
return exit_bang recv  new irubyobject  rubyfixnum minus_one runtime
catch  throwable t
return exit_bang recv  new irubyobject  rubyfixnum minus_one runtime
return exit_bang recv  new irubyobject  rubyfixnum zero runtime
else
return runtime newfixnum pid
else
int result   runtime getposix   fork
if  result     1
return runtime getnil
return runtime newfixnum result
@jrubymethod frame   true  module   true
public static irubyobject tap threadcontext context  irubyobject recv  block block
block yield context  recv
return recv
@jrubymethod name           rest   true  compat   compatversion ruby1_9
public static irubyobject to_enum threadcontext context  irubyobject recv  irubyobject args
ruby runtime   context getruntime
switch  args length
case 0  return enumeratorize runtime  recv
case 1  return enumeratorize runtime  recv  args asjavastring
case 2  return enumeratorize runtime  recv  args asjavastring    args
default
irubyobject enumargs   new irubyobject
system arraycopy args  1  enumargs  0  enumargs length
return enumeratorize runtime  recv  args asjavastring    enumargs
@jrubymethod name             module   true  visibility   private
public static irubyobject __method__ threadcontext context  irubyobject recv
frame f   context getcurrentframe
string name   f    null ? f getname     null
return name    null ? context getruntime   newsymbol name    context getruntime   getnil