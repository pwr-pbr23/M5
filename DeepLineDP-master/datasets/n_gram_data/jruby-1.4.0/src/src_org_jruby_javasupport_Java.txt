/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2002 jan arne petersen <jpetersen@uni-bonn.de>
* copyright (c) 2002-2004 anders bengtsson <ndrsbngtssn@yahoo.se>
* copyright (c) 2004 stefan matthias aust <sma@3plus4.de>
* copyright (c) 2004 david corbin <dcorbin@users.sourceforge.net>
* copyright (c) 2004-2005 thomas e enebo <enebo@acm.org>
* copyright (c) 2006 kresten krab thorup <krab@gnu.org>
* copyright (c) 2007 william n dortch <bill.dortch@gmail.com>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby javasupport
import org jruby java proxies javainterfacetemplate
import org jruby java addons kerneljavaaddons
import java io ioexception
import java lang reflect constructor
import java util arraylist
import java util arrays
import java util list
import java util hashmap
import java util map
import java util regex matcher
import java util regex pattern
import java lang reflect invocationhandler
import java lang reflect invocationtargetexception
import java lang reflect method
import java lang reflect modifier
import java lang reflect proxy
import java math bigdecimal
import java math biginteger
import java util concurrent concurrenthashmap
import org jruby metaclass
import org jruby ruby
import org jruby rubyarray
import org jruby rubyclass
import org jruby rubyclasspathvariable
import org jruby rubyexception
import org jruby rubymethod
import org jruby rubymodule
import org jruby rubyproc
import org jruby rubystring
import org jruby rubyunboundmethod
import org jruby common irubywarnings id
import org jruby exceptions raiseexception
import org jruby javasupport proxy javaproxyclass
import org jruby javasupport proxy javaproxyconstructor
import org jruby javasupport util runtimehelpers
import org jruby runtime arity
import org jruby runtime block
import org jruby runtime threadcontext
import org jruby runtime visibility
import org jruby runtime builtin irubyobject
import org jruby runtime load library
import org jruby util classprovider
import org jruby anno jrubymethod
import org jruby anno jrubymodule
import org jruby internal runtime methods javamethod javamethodn
import org jruby internal runtime methods javamethod javamethodzero
import org jruby java minijava
import org jruby java addons arrayjavaaddons
import org jruby java addons iojavaaddons
import org jruby java addons stringjavaaddons
import org jruby java dispatch callableselector
import org jruby java invokers instancemethodinvoker
import org jruby java invokers methodinvoker
import org jruby java invokers staticmethodinvoker
import org jruby java proxies arrayjavaproxy
import org jruby java proxies concretejavaproxy
import org jruby java proxies javaproxy
import org jruby runtime callback callback
import org jruby util codegenutils
import org jruby util safepropertyaccessor
@jrubymodule name
public class java implements library
public void load ruby runtime  boolean wrap  throws ioexception
createjavamodule runtime
runtime getloadservice   smartload
rubyclasspathvariable createclasspathvariable runtime
public static rubymodule createjavamodule ruby runtime
threadcontext context   runtime getcurrentcontext
rubymodule javamodule   runtime definemodule
javamodule defineannotatedmethods java class
javaobject createjavaobjectclass runtime  javamodule
javaarray createjavaarrayclass runtime  javamodule
javaclass createjavaclassclass runtime  javamodule
javamethod createjavamethodclass runtime  javamodule
javaconstructor createjavaconstructorclass runtime  javamodule
javafield createjavafieldclass runtime  javamodule
// set of utility methods for java-based proxy objects
javaproxymethods createjavaproxymethods context
// the proxy (wrapper) type hierarchy
javaproxy createjavaproxy context
concretejavaproxy createconcretejavaproxy context
//interfacejavaproxy.createinterfacejavaproxy(context);
arrayjavaproxy createarrayjavaproxy context
// also create the javaproxy* classes
javaproxyclass createjavaproxymodule runtime
// the template for interface modules
javainterfacetemplate createjavainterfacetemplatemodule context
rubymodule javautils   runtime definemodule
javautils defineannotatedmethods javautilities class
runtime getjavasupport   setconcreteproxycallback new callback
public irubyobject execute irubyobject recv  irubyobject args  block block
arity checkargumentcount recv getruntime    args  1  1
return java concrete_proxy_inherited recv  args
public arity getarity
return arity one_argument
javaarrayutilities createjavaarrayutilitiesmodule runtime
// now attach java-related extras to core classes
runtime getarray   defineannotatedmethods arrayjavaaddons class
runtime getkernel   defineannotatedmethods kerneljavaaddons class
runtime getstring   defineannotatedmethods stringjavaaddons class
runtime getio   defineannotatedmethods iojavaaddons class
if  runtime getobject   isconstantdefined
rubyclass runtime getobject    defineannotatedmethods iojavaaddons anyio class
// add all name-to-class mappings
addnameclassmappings runtime  runtime getjavasupport   getnameclassmap
// add some base java classes everyone will need
runtime getjavasupport   setobjectjavaclass javaclass get runtime  object class
// finally, set javasupport.isenabled to true
runtime getjavasupport   setactive true
return javamodule
/**
* this populates the master map from short-cut names to javaclass instances for
* a number of core java types.
*
* @param runtime
* @param nameclassmap
*/
private static void addnameclassmappings ruby runtime  map<string  javaclass> nameclassmap
javaclass booleanprimclass   javaclass get runtime  boolean type
javaclass booleanclass   javaclass get runtime  boolean class
nameclassmap put    booleanprimclass
nameclassmap put    booleanclass
nameclassmap put    booleanclass
javaclass byteprimclass   javaclass get runtime  byte type
javaclass byteclass   javaclass get runtime  byte class
nameclassmap put    byteprimclass
nameclassmap put    byteclass
nameclassmap put    byteclass
javaclass shortprimclass   javaclass get runtime  short type
javaclass shortclass   javaclass get runtime  short class
nameclassmap put    shortprimclass
nameclassmap put    shortclass
nameclassmap put    shortclass
javaclass charprimclass   javaclass get runtime  character type
javaclass charclass   javaclass get runtime  character class
nameclassmap put    charprimclass
nameclassmap put    charclass
nameclassmap put    charclass
nameclassmap put    charclass
javaclass intprimclass   javaclass get runtime  integer type
javaclass intclass   javaclass get runtime  integer class
nameclassmap put    intprimclass
nameclassmap put    intclass
nameclassmap put    intclass
nameclassmap put    intclass
javaclass longprimclass   javaclass get runtime  long type
javaclass longclass   javaclass get runtime  long class
nameclassmap put    longprimclass
nameclassmap put    longclass
nameclassmap put    longclass
javaclass floatprimclass   javaclass get runtime  float type
javaclass floatclass   javaclass get runtime  float class
nameclassmap put    floatprimclass
nameclassmap put    floatclass
nameclassmap put    floatclass
javaclass doubleprimclass   javaclass get runtime  double type
javaclass doubleclass   javaclass get runtime  double class
nameclassmap put    doubleprimclass
nameclassmap put    doubleclass
nameclassmap put    doubleclass
javaclass bigintclass   javaclass get runtime  biginteger class
nameclassmap put    bigintclass
nameclassmap put    bigintclass
nameclassmap put    bigintclass
nameclassmap put    bigintclass
javaclass bigdecimalclass   javaclass get runtime  bigdecimal class
nameclassmap put    bigdecimalclass
nameclassmap put    bigdecimalclass
nameclassmap put    bigdecimalclass
javaclass objectclass   javaclass get runtime  object class
nameclassmap put    objectclass
nameclassmap put    objectclass
nameclassmap put    objectclass
javaclass stringclass   javaclass get runtime  string class
nameclassmap put    stringclass
nameclassmap put    stringclass
nameclassmap put    stringclass
private static final classprovider java_package_class_provider   new classprovider
public rubyclass defineclassunder rubymodule pkg  string name  rubyclass superclazz
// shouldn't happen, but if a superclass is specified, it's not ours
if  superclazz    null
return null
irubyobject packagename
// again, shouldn't happen. todo: might want to throw exception instead.
if   packagename   pkg getinstancevariables   fastgetinstancevariable        null
return null
ruby runtime   pkg getruntime
return  rubyclass  get_proxy_class
runtime getjavasupport   getjavautilitiesmodule
javaclass fornameverbose runtime  packagename asjavastring     name
public rubymodule definemoduleunder rubymodule pkg  string name
irubyobject packagename
// again, shouldn't happen. todo: might want to throw exception instead.
if   packagename   pkg getinstancevariables   fastgetinstancevariable        null
return null
ruby runtime   pkg getruntime
return  rubymodule  get_interface_module
runtime
javaclass fornameverbose runtime  packagename asjavastring     name
private static final map<string  boolean> java_primitives   new hashmap<string  boolean>
static
string primitives
for  string primitive   primitives
java_primitives put primitive  boolean true
public static irubyobject create_proxy_class
irubyobject recv
irubyobject constant
irubyobject javaclass
irubyobject module
if    module instanceof rubymodule
throw recv getruntime   newtypeerror module  recv getruntime   getmodule
return   rubymodule  module  const_set constant  get_proxy_class recv  javaclass
public static irubyobject get_java_class irubyobject recv  irubyobject name
try
return javaclass for_name recv  name
catch  exception e
recv getruntime   getjavasupport   handlenativeexception e  null
return recv getruntime   getnil
/**
* returns a new proxy instance of a type corresponding to rawjavaobject's class,
* or the cached proxy if we've already seen this object.  note that primitives
* and strings are <em>not</em> coerced to corresponding ruby types; use
* javautil.convertjavatousablerubyobject to get coerced types or proxies as
* appropriate.
*
* @param runtime
* @param rawjavaobject
* @return the new or cached proxy for the specified java object
* @see javautil.convertjavatousablerubyobject
*/
public static irubyobject getinstance ruby runtime  object rawjavaobject
if  rawjavaobject    null
return runtime getjavasupport   getobjectproxycache   getorcreate rawjavaobject
rubyclass  getproxyclass runtime  javaclass get runtime  rawjavaobject getclass
return runtime getnil
public static rubymodule getinterfacemodule ruby runtime  javaclass javaclass
if   javaclass javaclass   isinterface
throw runtime newargumenterror javaclass tostring
rubymodule interfacemodule
if   interfacemodule   javaclass getproxymodule       null
return interfacemodule
javaclass lockproxy
try
if   interfacemodule   javaclass getproxymodule       null
interfacemodule    rubymodule  runtime getjavasupport   getjavainterfacetemplate   dup
interfacemodule fastsetinstancevariable    javaclass
addtojavapackagemodule interfacemodule  javaclass
javaclass setupinterfacemodule interfacemodule
// include any interfaces we extend
class<?> extended   javaclass javaclass   getinterfaces
for  int i   extended length    i >  0
javaclass extendedclass   javaclass get runtime  extended
rubymodule extmodule   getinterfacemodule runtime  extendedclass
interfacemodule includemodule extmodule
finally
javaclass unlockproxy
return interfacemodule
public static irubyobject get_interface_module ruby runtime  irubyobject javaclassobject
javaclass javaclass
if  javaclassobject instanceof rubystring
javaclass   javaclass fornameverbose runtime  javaclassobject asjavastring
else if  javaclassobject instanceof javaclass
javaclass    javaclass  javaclassobject
else
throw runtime newargumenterror     javaclassobject
return getinterfacemodule runtime  javaclass
public static rubymodule getproxyclass ruby runtime  javaclass javaclass
rubyclass proxyclass
final class<?> c   javaclass javaclass
if   proxyclass   javaclass getproxyclass       null
return proxyclass
if  c isinterface
return getinterfacemodule runtime  javaclass
javaclass lockproxy
try
if   proxyclass   javaclass getproxyclass       null
if  c isarray
proxyclass   createproxyclass runtime
runtime getjavasupport   getarrayproxyclass
javaclass  true
else if  c isprimitive
proxyclass   createproxyclass runtime
runtime getjavasupport   getconcreteproxyclass
javaclass  true
else if  c    object class
// java.lang.object is added at root of java proxy classes
proxyclass   createproxyclass runtime
runtime getjavasupport   getconcreteproxyclass
javaclass  true
proxyclass getmetaclass   definefastmethod
runtime getjavasupport   getconcreteproxycallback
addtojavapackagemodule proxyclass  javaclass
else
// other java proxy classes added under their superclass' java proxy
proxyclass   createproxyclass runtime
rubyclass  getproxyclass runtime  javaclass get runtime  c getsuperclass
javaclass  false
// include interface modules into the proxy class
class<?> interfaces   c getinterfaces
for  int i   interfaces length    i >  0
javaclass ifc   javaclass get runtime  interfaces
proxyclass includemodule getinterfacemodule runtime  ifc
if  modifier ispublic c getmodifiers
addtojavapackagemodule proxyclass  javaclass
// jruby-1000, fail early when attempting to subclass a final java class;
// solved here by adding an exception-throwing "inherited"
if  modifier isfinal c getmodifiers
proxyclass getmetaclass   addmethod    new org jruby internal runtime methods javamethod
@override
public irubyobject call threadcontext context  irubyobject self  rubymodule clazz  string name  irubyobject args  block block
throw context getruntime   newtypeerror     c getcanonicalname
finally
javaclass unlockproxy
return proxyclass
public static irubyobject get_proxy_class irubyobject recv  irubyobject java_class_object
ruby runtime   recv getruntime
javaclass javaclass
if  java_class_object instanceof rubystring
javaclass   javaclass for_name recv  java_class_object
else if  java_class_object instanceof javaclass
javaclass    javaclass  java_class_object
else
throw runtime newtypeerror java_class_object  runtime getjavasupport   getjavaclassclass
return getproxyclass runtime  javaclass
private static rubyclass createproxyclass ruby runtime  rubyclass basetype
javaclass javaclass  boolean invokeinherited
// jruby-2938 the proxy class might already exist
rubyclass proxyclass   javaclass getproxyclass
if  proxyclass    null
return proxyclass
// this needs to be split, since conditional calling #inherited doesn't fit standard ruby semantics
rubyclass checkinheritable basetype
rubyclass superclass    rubyclass  basetype
proxyclass   rubyclass newclass runtime  superclass
proxyclass makemetaclass superclass getmetaclass
proxyclass setallocator superclass getallocator
if  invokeinherited
proxyclass inherit superclass
proxyclass callmethod runtime getcurrentcontext       javaclass
javaclass setupproxy proxyclass
// add java_method for unbound use
proxyclass defineannotatedmethods javaproxyclassmethods class
return proxyclass
public static class javaproxyclassmethods
@jrubymethod backtrace   true  meta   true
public static irubyobject java_method threadcontext context  irubyobject proxyclass  irubyobject rubyname
string name   rubyname asjavastring
return getrubymethod context  proxyclass  name
@jrubymethod backtrace   true  meta   true
public static irubyobject java_method threadcontext context  irubyobject proxyclass  irubyobject rubyname  irubyobject argtypes
string name   rubyname asjavastring
rubyarray argtypesary   argtypes converttoarray
class argtypesclasses    class argtypesary toarray new class
return getrubymethod context  proxyclass  name  argtypesclasses
@jrubymethod backtrace   true  meta   true  visibility   visibility private
public static irubyobject java_alias threadcontext context  irubyobject proxyclass  irubyobject newname  irubyobject rubyname
return java_alias context  proxyclass  newname  rubyname  context getruntime   newemptyarray
@jrubymethod backtrace   true  meta   true  visibility   visibility private
public static irubyobject java_alias threadcontext context  irubyobject proxyclass  irubyobject newname  irubyobject rubyname  irubyobject argtypes
string name   rubyname asjavastring
string newnamestr   newname asjavastring
rubyarray argtypesary   argtypes converttoarray
class argtypesclasses    class argtypesary toarray new class
ruby runtime   context getruntime
rubyclass rubyclass
if  proxyclass instanceof rubyclass
rubyclass    rubyclass proxyclass
else
throw runtime newtypeerror proxyclass  runtime getmodule
class jclass    class   javaclass proxyclass callmethod context      getvalue
method method   getmethodfromclass runtime  jclass  name  argtypesclasses
methodinvoker invoker   getmethodinvokerformethod rubyclass  method
if  modifier isstatic method getmodifiers
// add alias to meta
rubyclass getsingletonclass   addmethod newnamestr  invoker
else
rubyclass addmethod newnamestr  invoker
return runtime getnil
private static irubyobject getrubymethod threadcontext context  irubyobject proxyclass  string name  class    argtypesclasses
ruby runtime   context getruntime
rubyclass rubyclass
if  proxyclass instanceof rubyclass
rubyclass    rubyclass proxyclass
else
throw runtime newtypeerror proxyclass  runtime getmodule
class jclass    class   javaclass proxyclass callmethod context      getvalue
string prettyname   name   codegenutils prettyparams argtypesclasses
try
method jmethod   jclass getmethod name  argtypesclasses
methodinvoker invoker
if  modifier isstatic jmethod getmodifiers
invoker   new staticmethodinvoker rubyclass  jmethod
return rubymethod newmethod rubyclass  prettyname  rubyclass  name  invoker  proxyclass
else
invoker   new instancemethodinvoker rubyclass  jmethod
return rubyunboundmethod newunboundmethod rubyclass  prettyname  rubyclass  name  invoker
catch  nosuchmethodexception nsme
string errorname   jclass getname         prettyname
throw runtime newnameerror     errorname  name
public static method getmethodfromclass ruby runtime  class jclass  string name  class    argtypes
try
return jclass getmethod name  argtypes
catch  nosuchmethodexception nsme
throw javamethod newmethodnotfounderror runtime  jclass  name   codegenutils prettyparams argtypes   name
private static methodinvoker getmethodinvokerformethod rubyclass metaclass  method method
if  modifier isstatic method getmodifiers
return new staticmethodinvoker metaclass getmetaclass    method
else
return new instancemethodinvoker metaclass  method
public static irubyobject concrete_proxy_inherited irubyobject recv  irubyobject subclass
ruby runtime   recv getruntime
threadcontext tc   runtime getcurrentcontext
javasupport javasupport   runtime getjavasupport
rubyclass javaproxyclass   javasupport getjavaproxyclass   getmetaclass
runtimehelpers invokeas tc  javaproxyclass  recv     subclass
block null_block
return setupjavasubclass tc  subclass  recv callmethod tc
private static irubyobject setupjavasubclass threadcontext context  irubyobject subclass  irubyobject java_class
ruby runtime   context getruntime
if    subclass instanceof rubyclass
throw runtime newtypeerror subclass  runtime getclassclass
rubyclass rubysubclass    rubyclass subclass
rubysubclass getinstancevariables   fastsetinstancevariable    runtime getnil
rubyclass subclasssingleton   rubysubclass getsingletonclass
subclasssingleton addreadwriteattribute context
subclasssingleton addmethod    new javamethodzero subclasssingleton  visibility public
@override
public irubyobject call threadcontext context  irubyobject self  rubymodule clazz  string name
irubyobject javainterfaces   self getinstancevariables   fastgetinstancevariable
if  javainterfaces    null  return javainterfaces dup
return context getruntime   getnil
rubysubclass addmethod    new javamethodn subclasssingleton  visibility public
private final map<integer  parametertypes> methodcache   new hashmap<integer  parametertypes>
@override
public irubyobject call threadcontext context  irubyobject self  rubymodule clazz  string name  irubyobject args
irubyobject proxyclass   self getmetaclass   getinstancevariables   fastgetinstancevariable
if  proxyclass    null    proxyclass isnil
proxyclass   javaproxyclass get_with_class self  self getmetaclass
self getmetaclass   getinstancevariables   fastsetinstancevariable    proxyclass
javaproxyclass realproxyclass    javaproxyclass proxyclass
rubyarray constructors   realproxyclass constructors
arraylist<javaproxyconstructor> forarity   new arraylist<javaproxyconstructor>
for  int i   0  i < constructors size    i
javaproxyconstructor constructor    javaproxyconstructor constructors eltinternal i
if  constructor getparametertypes   length    args length
forarity add constructor
if  forarity size      0
throw context getruntime   newargumenterror
javaproxyconstructor matching    javaproxyconstructor callableselector matchingcallablearityn
self
methodcache
forarity toarray new javaproxyconstructor   args  args length
object newargs   new object
class parametertypes   matching getparametertypes
for  int i   0  i < args length  i
newargs   args tojava parametertypes
javaobject newobject   matching newinstance self  newargs
return javautilities set_java_object self  self  newobject
return runtime getnil
// package scheme 2: separate module for each full package name, constructed
// from the camel-cased package segments: java::javalang::object,
private static void addtojavapackagemodule rubymodule proxyclass  javaclass javaclass
class<?> clazz   javaclass javaclass
string fullname
if   fullname   clazz getname       null
return
int endpackage   fullname lastindexof
// we'll only map conventional class names to modules
if  fullname indexof        1     character isuppercase fullname charat endpackage   1
return
ruby runtime   proxyclass getruntime
string packagestring   endpackage < 0 ?     fullname substring 0  endpackage
rubymodule packagemodule   getjavapackagemodule runtime  packagestring
if  packagemodule    null
string classname   fullname substring endpackage   1
if  packagemodule getconstantat classname     null
packagemodule const_set runtime newsymbol classname   proxyclass
private static rubymodule getjavapackagemodule ruby runtime  string packagestring
string packagename
int length   packagestring length
if  length    0
packagename
else
stringbuilder buf   new stringbuilder
for  int start   0  offset   0  start < length  start   offset   1
if   offset   packagestring indexof    start       1
offset   length
buf append character touppercase packagestring charat start    append packagestring substring start   1  offset
packagename   buf tostring
rubymodule javamodule   runtime getjavasupport   getjavamodule
irubyobject packagemodule   javamodule getconstantat packagename
if  packagemodule    null
return createpackagemodule javamodule  packagename  packagestring
else if  packagemodule instanceof rubymodule
return  rubymodule  packagemodule
else
return null
private static rubymodule createpackagemodule rubymodule parent  string name  string packagestring
ruby runtime   parent getruntime
rubymodule packagemodule    rubymodule  runtime getjavasupport   getpackagemoduletemplate   dup
packagemodule fastsetinstancevariable    runtime newstring
packagestring length   > 0 ? packagestring       packagestring
// this is where we'll get connected when classes are opened using
// package module syntax.
packagemodule addclassprovider java_package_class_provider
parent const_set runtime newsymbol name   packagemodule
metaclass metaclass    metaclass  packagemodule getmetaclass
metaclass setattached packagemodule
return packagemodule
private static final pattern camel_case_package_splitter   pattern compile
private static rubymodule getpackagemodule ruby runtime  string name
rubymodule javamodule   runtime getjavasupport   getjavamodule
irubyobject value
if   value   javamodule getconstantat name   instanceof rubymodule
return  rubymodule  value
string packagename
if    equals name
packagename
else
matcher m   camel_case_package_splitter matcher name
packagename   m replaceall    tolowercase
return createpackagemodule javamodule  name  packagename
public static irubyobject get_package_module irubyobject recv  irubyobject symobject
return getpackagemodule recv getruntime    symobject asjavastring
public static irubyobject get_package_module_dot_format irubyobject recv  irubyobject dottedname
ruby runtime   recv getruntime
rubymodule module   getjavapackagemodule runtime  dottedname asjavastring
return module    null ? runtime getnil     module
private static rubymodule getproxyorpackageunderpackage threadcontext context  final ruby runtime
rubymodule parentpackage  string sym
irubyobject packagenameobj   parentpackage fastgetinstancevariable
if  packagenameobj    null
throw runtime newargumenterror
string packagename   packagenameobj asjavastring
final string name   sym trim   intern
if  name length      0
throw runtime newargumenterror
string fullname   packagename   name
if   character isuppercase name charat 0
// filter out any java primitive names
// todo: should check against all java reserved names here, not just primitives
if  java_primitives containskey name
throw runtime newargumenterror     name
// this covers the rare case of lower-case class names (and thus will
// fail 99.999% of the time). fortunately, we'll only do this once per
// package name. (and seriously, folks, look into best practices...)
try
return getproxyclass runtime  javaclass fornamequiet runtime  fullname
catch  raiseexception re       expected
rubyexception rubyex   re getexception
if  rubyex kind_of_p context  runtime getstandarderror    istrue
runtimehelpers seterrorinfo runtime  runtime getnil
catch  exception e       expected
// haven't found a class, continue on as though it were a package
rubymodule packagemodule
// todo: decompose getjavapackagemodule so we don't parse fullname
if   packagemodule   getjavapackagemodule runtime  fullname      null
return null
// save package module as ivar in parent, and add method to parent so
// we don't have to come back here.
final string ivarname        name  intern
parentpackage fastsetinstancevariable ivarname  packagemodule
rubyclass singleton   parentpackage getsingletonclass
singleton addmethod name  new org jruby internal runtime methods javamethod singleton  visibility public
public irubyobject call threadcontext context  irubyobject self  rubymodule clazz  string name  irubyobject args  block block
if  args length    0
arity raiseargumenterror runtime  args length  0  0
irubyobject variable
if   variable     rubymodule  self  fastgetinstancevariable ivarname      null
return variable
return runtime getnil
@override
public arity getarity
return arity noarguments
return packagemodule
else
// upper case name, so most likely a class
return getproxyclass runtime  javaclass fornameverbose runtime  fullname
// fixme: we should also support orgs that use capitalized package
// names (including, embarrassingly, the one i work for), but this
// should be enabled by a system property, as the expected default
// behavior for an upper-case value should be (and is) to treat it
// as a class name, and raise an exception if it's not found
//            try {
//                return getproxyclass(runtime, javaclass.forname(runtime, fullname));
//            } catch (exception e) {
//                // but for those not hip to conventions and best practices,
//                // we'll try as a package
//                return getjavapackagemodule(runtime, fullname);
//            }
public static irubyobject get_proxy_or_package_under_package
threadcontext context
irubyobject recv
irubyobject parentpackage
irubyobject sym
ruby runtime   recv getruntime
if    parentpackage instanceof rubymodule
throw runtime newtypeerror parentpackage  runtime getmodule
rubymodule result
if   result   getproxyorpackageunderpackage context  runtime
rubymodule  parentpackage  sym asjavastring        null
return result
return runtime getnil
private static rubymodule gettoplevelproxyorpackage threadcontext context  final ruby runtime  string sym
final string name   sym trim   intern
if  name length      0
throw runtime newargumenterror
if  character islowercase name charat 0
// this covers primitives and (unlikely) lower-case class names
try
return getproxyclass runtime  javaclass fornamequiet runtime  name
catch  raiseexception re       not primitive or lc class
rubyexception rubyex   re getexception
if  rubyex kind_of_p context  runtime getstandarderror    istrue
runtimehelpers seterrorinfo runtime  runtime getnil
catch  exception e       not primitive or lc class
// todo: check for java reserved names and raise exception if encountered
rubymodule packagemodule
// todo: decompose getjavapackagemodule so we don't parse fullname
if   packagemodule   getjavapackagemodule runtime  name      null
return null
rubymodule javamodule   runtime getjavasupport   getjavamodule
if  javamodule getmetaclass   ismethodbound name  false
return packagemodule
// save package module as ivar in parent, and add method to parent so
// we don't have to come back here.
final string ivarname        name  intern
javamodule fastsetinstancevariable ivarname  packagemodule
rubyclass singleton   javamodule getsingletonclass
singleton addmethod name  new org jruby internal runtime methods javamethod singleton  visibility public
public irubyobject call threadcontext context  irubyobject self  rubymodule clazz  string name  irubyobject args  block block
if  args length    0
arity raiseargumenterror runtime  args length  0  0
irubyobject variable
if   variable     rubymodule  self  fastgetinstancevariable ivarname      null
return variable
return runtime getnil
@override
public arity getarity
return arity noarguments
return packagemodule
else
try
return getproxyclass runtime  javaclass fornamequiet runtime  name
catch  raiseexception re       not a class
rubyexception rubyex   re getexception
if  rubyex kind_of_p context  runtime getstandarderror    istrue
runtimehelpers seterrorinfo runtime  runtime getnil
catch  exception e       not a class
// upper-case package name
// todo: top-level upper-case package was supported in the previous (ruby-based)
// implementation, so leaving as is.  see note at #getproxyorpackageunderpackage
// re: future approach below the top-level.
return getpackagemodule runtime  name
public static irubyobject get_top_level_proxy_or_package threadcontext context  irubyobject recv  irubyobject sym
ruby runtime   context getruntime
rubymodule result   gettoplevelproxyorpackage context  runtime  sym asjavastring
return result    null ? result   runtime getnil
public static irubyobject wrap ruby runtime  irubyobject java_object
return getinstance runtime    javaobject  java_object  getvalue
/**
* high-level object conversion utility function 'java_to_primitive' is the low-level version
*/
@deprecated
@jrubymethod frame   true  module   true  visibility   visibility private
public static irubyobject java_to_ruby irubyobject recv  irubyobject object  block unusedblock
try
return javautil java_to_ruby recv getruntime    object
catch  runtimeexception e
recv getruntime   getjavasupport   handlenativeexception e  null
// this point is only reached if there was an exception handler installed.
return recv getruntime   getnil
// todo: formalize conversion mechanisms between java and ruby
/**
* high-level object conversion utility.
*/
@deprecated
@jrubymethod frame   true  module   true  visibility   visibility private
public static irubyobject ruby_to_java final irubyobject recv  irubyobject object  block unusedblock
return javautil ruby_to_java recv  object  unusedblock
@deprecated
@jrubymethod frame   true  module   true  visibility   visibility private
public static irubyobject java_to_primitive irubyobject recv  irubyobject object  block unusedblock
return javautil java_to_primitive recv  object  unusedblock
@jrubymethod required   1  rest   true  frame   true  module   true  visibility   visibility private
@deprecated
public static irubyobject new_proxy_instance final irubyobject recv  irubyobject args  block block
int size   arity checkargumentcount recv getruntime    args  1   1    1
final rubyproc proc
// is there a supplied proc argument or do we assume a block was supplied
if  args instanceof rubyproc
proc    rubyproc  args
else
proc   recv getruntime   newproc block type proc  block
size
// create list of interfaces to proxy (and make sure they really are interfaces)
class interfaces   new class
for  int i   0  i < size  i
if    args instanceof javaclass        javaclass  args  interface_p   istrue
throw recv getruntime   newargumenterror     args
interfaces     javaclass  args  javaclass
return javaobject wrap recv getruntime    proxy newproxyinstance recv getruntime   getjrubyclassloader    interfaces  new invocationhandler
private map parametertypecache   new concurrenthashmap
public object invoke object proxy  method method  object nargs  throws throwable
class parametertypes    class  parametertypecache get method
if  parametertypes    null
parametertypes   method getparametertypes
parametertypecache put method  parametertypes
int methodargslength   parametertypes length
string methodname   method getname
if  methodname equals       methodargslength    0
return proxy getclass   getname
else if  methodname equals       methodargslength    0
return new integer proxy getclass   hashcode
else if  methodname equals       methodargslength    1    parametertypes equals object class
return boolean valueof proxy    nargs
ruby runtime   recv getruntime
int length   nargs    null ? 0   nargs length
irubyobject rubyargs   new irubyobject
rubyargs   javautil convertjavatoruby runtime  proxy
rubyargs   new javamethod runtime  method
for  int i   0  i < length  i
rubyargs   javautil convertjavatoruby runtime  nargs
return proc call runtime getcurrentcontext    rubyargs  tojava method getreturntype
@jrubymethod required   2  frame   true  module   true  visibility   visibility private
public static irubyobject new_proxy_instance2 irubyobject recv  final irubyobject wrapper  irubyobject ifcs  block block
irubyobject javaclasses     rubyarray ifcs  tojavaarray
final ruby runtime   recv getruntime
// create list of interface names to proxy (and make sure they really are interfaces)
// also build a hashcode from all classes to use for retrieving previously-created impl
class interfaces   new class
for  int i   0  i < javaclasses length  i
if    javaclasses instanceof javaclass        javaclass  javaclasses  interface_p   istrue
throw recv getruntime   newargumenterror     javaclasses
interfaces     javaclass  javaclasses  javaclass
// hashcode is a combination of the interfaces and the ruby class we're using
// to implement them
if   safepropertyaccessor getboolean
int interfaceshashcode   interfaceshashcode interfaces
// if it's a singleton class and the real class is proc, we're doing closure conversion
// so just use proc's hashcode
if  wrapper getmetaclass   issingleton      wrapper getmetaclass   getrealclass      runtime getproc
interfaceshashcode   31   interfaceshashcode   runtime getproc   hashcode
else
// normal new class implementing interfaces
interfaceshashcode   31   interfaceshashcode   wrapper getmetaclass   hashcode
string implclassname       math abs interfaceshashcode
class proxyimplclass
try
proxyimplclass   class forname implclassname  true  runtime getjrubyclassloader
catch  classnotfoundexception cnfe
proxyimplclass   minijava createoldstyleimplclass interfaces  wrapper getmetaclass    runtime  implclassname
try
constructor proxyconstructor   proxyimplclass getconstructor irubyobject class
return javaobject wrap recv getruntime    proxyconstructor newinstance wrapper
catch  nosuchmethodexception nsme
throw runtime newtypeerror     nsme
catch  invocationtargetexception ite
throw runtime newtypeerror     ite
catch  instantiationexception ie
throw runtime newtypeerror     ie
catch  illegalaccessexception iae
throw runtime newtypeerror     iae
else
return javaobject wrap recv getruntime    proxy newproxyinstance recv getruntime   getjrubyclassloader    interfaces  new invocationhandler
private map parametertypecache   new concurrenthashmap
public object invoke object proxy  method method  object nargs  throws throwable
string methodname   method getname
int length   nargs    null ? 0   nargs length
// fixme: wtf is this? why would these use the class?
if  methodname         length    0
return proxy getclass   getname
else if  methodname         length    0
return new integer proxy getclass   hashcode
else if  methodname         length    1
class parametertypes    class  parametertypecache get method
if  parametertypes    null
parametertypes   method getparametertypes
parametertypecache put method  parametertypes
if  parametertypes equals object class
return boolean valueof proxy    nargs
irubyobject rubyargs   javautil convertjavaarraytoruby runtime  nargs
try
return runtimehelpers invoke runtime getcurrentcontext    wrapper  methodname  rubyargs  tojava method getreturntype
catch  runtimeexception e    e printstacktrace    throw e
private static int interfaceshashcode class a
if  a    null
return 0
int result   1
for  class element   a
result   31   result    element    null ? 0   element hashcode
return result