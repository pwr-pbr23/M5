/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2006 ola bini <ola@ologix.com>
* copyright (c) 2006 damian steer <pldms@mac.com>
* copyright (c) 2008 joseph lafata <joe@quibb.org>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby ext
import java awt event actionevent
import java awt event actionlistener
import java io ioexception
import java io printwriter
import java lang reflect field
import java nio charbuffer
import java util arraylist
import java util list
import java util iterator
import java util collections
import org jruby ruby
import org jruby rubymodule
import org jruby rubyarray
import org jruby runtime block
import org jruby runtime threadcontext
import org jruby runtime load library
import org jruby runtime builtin irubyobject
import org jruby anno jrubymodule
import jline consolereader
import jline completor
import jline filenamecompletor
import jline candidatelistcompletionhandler
import jline history
import org jruby compatversion
import org jruby rubyio
import org jruby rubynumeric
import org jruby rubystring
import org jruby anno jrubymethod
import org jruby javasupport util runtimehelpers
import org jruby runtime visibility
/**
* @author <a href="mailto:ola.bini@ki.se">ola bini</a>
* @author <a href="mailto:pldms@mac.com">damian steer</a>
* @author <a href="mailto:koichiro@meadowy.org">koichiro ohba</a>
*/
@jrubymodule name
public class readline
public static final char esc_key_code    char 27
private final static boolean debug   false
public static class service implements library
public void load final ruby runtime  boolean wrap  throws ioexception
createreadline runtime
public static class readlinehistory extends history
arraylist historylist   null
field index   null
public readlinehistory
try
field list   history class getdeclaredfield
list setaccessible true
historylist    arraylist  list get this
index   history class getdeclaredfield
index setaccessible true
catch  nosuchfieldexception ex
ex printstacktrace
catch  securityexception ex
ex printstacktrace
catch  illegalargumentexception ex
ex printstacktrace
catch  illegalaccessexception ex
ex printstacktrace
public void setcurrentindex int i
try
index setint this  i
catch  illegalargumentexception ex
ex printstacktrace
catch  illegalaccessexception ex
ex printstacktrace
public void set int i  string s
historylist set i  s
public string pop
return remove historylist size     1
public string remove int i
setcurrentindex historylist size     2
return  string historylist remove i
public static class consoleholder
public consolereader readline
public completor currentcompletor
public readlinehistory history
public static void createreadline ruby runtime  throws ioexception
consoleholder holder   new consoleholder
holder history   new readlinehistory
holder currentcompletor   null
rubymodule mreadline   runtime definemodule
mreadline datawrapstruct holder
mreadline defineannotatedmethods readline class
irubyobject hist   runtime getobject   callmethod runtime getcurrentcontext
mreadline fastsetconstant    hist
hist getsingletonclass   includemodule runtime getenumerable
hist getsingletonclass   defineannotatedmethods historymethods class
// mri does similar thing on macos x with 'editline wrapper'.
mreadline fastsetconstant    runtime newstring
// we lazily initialize this in case readline.readline has been overridden in ruby (s_readline)
protected static void initreadline ruby runtime  final consoleholder holder  throws ioexception
holder readline   new consolereader
holder readline setusehistory false
holder readline setusepagination true
holder readline setbellenabled true
candidatelistcompletionhandler  holder readline getcompletionhandler    setalwaysincludenewline false
if  holder currentcompletor    null
holder currentcompletor   new rubyfilenamecompletor
holder readline addcompletor holder currentcompletor
holder readline sethistory holder history
// jruby-852, ignore escape key (it causes irb to quit if we pass it out through readline)
holder readline addtriggeredaction esc_key_code  new actionlistener
public void actionperformed actionevent e
try
holder readline beep
catch  ioexception ioe
// ignore
if  debug  holder readline setdebug new printwriter system err
public static history gethistory consoleholder holder
return holder history
public static consoleholder getholder ruby runtime
return  consoleholder   runtime fastgetmodule    datagetstruct
public static void setcompletor consoleholder holder  completor completor
if  holder readline    null
holder readline removecompletor holder currentcompletor
holder currentcompletor   completor
if  holder readline    null
holder readline addcompletor holder currentcompletor
public static completor getcompletor consoleholder holder
return holder currentcompletor
public static irubyobject s_readline irubyobject recv  irubyobject prompt  irubyobject add_to_hist  throws ioexception
return s_readline recv getruntime   getcurrentcontext    recv  prompt  add_to_hist
@jrubymethod name      module   true  visibility   visibility private
public static irubyobject s_readline threadcontext context  irubyobject recv  irubyobject prompt  irubyobject add_to_hist  throws ioexception
ruby runtime   context getruntime
consoleholder holder   getholder runtime
if  holder readline    null
initreadline runtime  holder      not overridden  let's go
irubyobject line   runtime getnil
string v   null
while  true
try
holder readline getterminal   disableecho
v   holder readline readline prompt tostring
break
catch  ioexception ioe
if  rubyio restartsystemcall ioe
// this is for jruby-2988, since after a suspend the terminal seems
// to need to be reinitialized. since we can't easily detect suspension,
// initialize after every readline. probably not fast, but this is for
// interactive terminals anyway...so who cares?
try  holder readline getterminal   initializeterminal     catch  exception e
continue
throw runtime newioerrorfromexception ioe
finally
holder readline getterminal   enableecho
if  null    v
if  add_to_hist istrue
holder readline gethistory   addtohistory v
/* explicitly use utf-8 here. c.f. history.addtohistory using line.asutf8() */
line   rubystring newunicodestring recv getruntime    v
return line
@jrubymethod name      module   true  visibility   visibility private  compat   compatversion ruby1_9
public static irubyobject setinput threadcontext context  irubyobject recv  irubyobject input
// fixme: jruby-3604
return context getruntime   getnil
@jrubymethod name      module   true  visibility   visibility private  compat   compatversion ruby1_9
public static irubyobject setoutput threadcontext context  irubyobject recv  irubyobject output
// fixme: jruby-3604
return context getruntime   getnil
@jrubymethod name      module   true  visibility   visibility private
public static irubyobject s_readline irubyobject recv  irubyobject prompt  throws ioexception
return s_readline recv  prompt  recv getruntime   getfalse
@jrubymethod name      module   true  visibility   visibility private
public static irubyobject s_readline irubyobject recv  throws ioexception
return s_readline recv  rubystring newemptystring recv getruntime     recv getruntime   getfalse
@jrubymethod name      module   true  visibility   visibility private
public static irubyobject s_set_basic_word_break_character irubyobject recv  irubyobject achar  throws exception
ruby runtime   recv getruntime
if   achar respondsto
throw runtime newtypeerror     achar getmetaclass
proccompletor setdelimiter achar converttostring   tostring
return achar
@jrubymethod name      module   true  visibility   visibility private
public static irubyobject s_get_basic_word_break_character irubyobject recv  throws exception
return recv getruntime   newstring proccompletor getdelimiter
@jrubymethod name      module   true  visibility   visibility private
public static irubyobject s_set_completion_append_character irubyobject recv  irubyobject achar  throws exception
return recv getruntime   getnil
@jrubymethod name      module   true  visibility   visibility private
public static irubyobject s_set_completion_proc irubyobject recv  irubyobject proc  throws exception
if   proc respondsto
throw recv getruntime   newargumenterror
setcompletor getholder recv getruntime     new proccompletor proc
return recv getruntime   getnil
public static class historymethods
@jrubymethod name           rest   true
public static irubyobject s_push irubyobject recv  irubyobject lines  throws exception
consoleholder holder   getholder recv getruntime
for  int i   0  i < lines length  i
rubystring line   lines converttostring
holder history addtohistory line getunicodevalue
return recv getruntime   getnil
@jrubymethod name
@suppresswarnings
public static irubyobject s_pop irubyobject recv  throws exception
ruby runtime   recv getruntime
consoleholder holder   getholder runtime
if holder history size      0
return runtime getnil
rubystring output   runtime newstring  string holder history pop
output taint runtime getcurrentcontext
return output
@jrubymethod name
public static irubyobject s_hist_to_a irubyobject recv  throws exception
consoleholder holder   getholder recv getruntime
rubyarray histlist   recv getruntime   newarray
for  iterator i   holder history gethistorylist   iterator    i hasnext
histlist append recv getruntime   newstring  string  i next
return histlist
@jrubymethod name
public static irubyobject s_hist_to_s irubyobject recv
return recv getruntime   newstring
@jrubymethod name
public static irubyobject s_hist_get irubyobject recv  irubyobject index
ruby runtime   recv getruntime
consoleholder holder   getholder runtime
int i    int  index converttointeger   getlongvalue
if i < 0
i    holder history size
try
rubystring output   runtime newstring  string  holder history gethistorylist   get i
output taint runtime getcurrentcontext
return output
catch  indexoutofboundsexception ioobe
throw runtime newindexerror     i
@jrubymethod name
public static irubyobject s_hist_set irubyobject recv  irubyobject index  irubyobject val
ruby runtime   recv getruntime
consoleholder holder   getholder runtime
int i    int  index converttointeger   getlongvalue
if i < 0
i    holder history size
try
holder history set i  val asjavastring
catch  indexoutofboundsexception ioobe
throw runtime newindexerror     i
return runtime getnil
@jrubymethod name
public static irubyobject s_hist_shift irubyobject recv
ruby runtime   recv getruntime
consoleholder holder   getholder recv getruntime
if holder history size      0
return runtime getnil
try
rubystring output   runtime newstring holder history remove 0
output taint runtime getcurrentcontext
return output
catch  indexoutofboundsexception ioobe
throw runtime newindexerror
@jrubymethod name
public static irubyobject s_hist_length irubyobject recv
consoleholder holder   getholder recv getruntime
return recv getruntime   newfixnum holder history size
@jrubymethod name
public static irubyobject s_hist_empty_p irubyobject recv
consoleholder holder   getholder recv getruntime
return recv getruntime   newboolean holder history size      0
@jrubymethod name
public static irubyobject s_hist_delete_at irubyobject recv  irubyobject index
ruby runtime   recv getruntime
consoleholder holder   getholder recv getruntime
int i   rubynumeric num2int index
if i < 0
i    holder history size
try
rubystring output   runtime newstring holder history remove i
output taint runtime getcurrentcontext
return output
catch  indexoutofboundsexception ioobe
throw runtime newindexerror     i
@jrubymethod name
public static irubyobject s_hist_each irubyobject recv  block block
consoleholder holder   getholder recv getruntime
for  iterator i   holder history gethistorylist   iterator    i hasnext
rubystring output   recv getruntime   newstring  string  i next
output taint recv getruntime   getcurrentcontext
block yield recv getruntime   getcurrentcontext    output
return recv
// complete using a proc object
public static class proccompletor implements completor
irubyobject proccompletor
//\t\n\"\\'`@$><=;|&{(
static private string delimiters                  ' ` @ $ > <            "
public proccompletor irubyobject proccompletor
this proccompletor   proccompletor
public static string getdelimiter
stringbuilder result   new stringbuilder delimiters length
for  string delimiter   delimiters
result append delimiter
return result tostring
public static void setdelimiter string delimiter
list<string> l   new arraylist<string>
charbuffer buf   charbuffer wrap delimiter
while  buf hasremaining
l add string valueof buf get
delimiters   l toarray new string
private int wordindexof string buffer
int index   0
for  string c   delimiters
index   buffer lastindexof c
if  index     1  return index
return index
public int complete string buffer  int cursor  list candidates
buffer   buffer substring 0  cursor
int index   wordindexof buffer
if  index     1
buffer   buffer substring index   1
threadcontext context   proccompletor getruntime   getcurrentcontext
irubyobject comps   runtimehelpers
invoke context  proccompletor     proccompletor getruntime   newstring buffer
callmethod context
if  comps instanceof list
for  iterator i     list  comps  iterator    i hasnext
object obj   i next
if  obj    null
candidates add obj tostring
collections sort candidates
return cursor   buffer length
// fix filenamecompletor to work mid-line
public static class rubyfilenamecompletor extends filenamecompletor
@override
public int complete string buffer  int cursor  list candidates
buffer   buffer substring 0  cursor
int index   buffer lastindexof
if  index     1
buffer   buffer substring index   1
return index   1   super complete buffer  cursor  candidates
readline