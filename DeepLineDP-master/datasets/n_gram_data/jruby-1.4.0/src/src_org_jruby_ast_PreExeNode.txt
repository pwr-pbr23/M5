/*
***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2007 thomas e enebo <enebo@acm.org>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby ast
import org jruby ruby
import org jruby ast visitor nodevisitor
import org jruby lexer yacc isourceposition
import org jruby parser staticscope
import org jruby runtime block
import org jruby runtime dynamicscope
import org jruby runtime interpretedblock
import org jruby runtime threadcontext
import org jruby runtime builtin irubyobject
/**
* a pre-execution construction (begin { ... }).
*/
public class preexenode extends iternode
public preexenode isourceposition position  staticscope scope  node body
super position  null  scope  body
public nodetype getnodetype
return nodetype preexenode
@override
public object accept nodevisitor ivisitor
return ivisitor visitpreexenode this
@override
public irubyobject interpret ruby runtime  threadcontext context  irubyobject self  block ablock
dynamicscope scope   dynamicscope newdynamicscope getscope
// each root node has a top-level scope that we need to push
context prescopedbody scope
// fixme: i use a for block to implement end node because we need a proc which captures
// its enclosing scope.   forblock now represents these node and should be renamed.
block block   interpretedblock newinterpretedclosure context  this  self
try
block yield context  null
finally
context postscopedbody
return runtime getnil