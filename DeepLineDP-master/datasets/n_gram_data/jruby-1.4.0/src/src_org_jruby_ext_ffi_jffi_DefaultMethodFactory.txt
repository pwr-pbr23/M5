package org jruby ext ffi jffi
import com kenai jffi callingconvention
import com kenai jffi function
import com kenai jffi heapinvocationbuffer
import com kenai jffi invocationbuffer
import com kenai jffi invoker
import com kenai jffi arrayflags
import org jruby ruby
import org jruby rubyboolean
import org jruby rubyhash
import org jruby rubymodule
import org jruby rubynumeric
import org jruby rubystring
import org jruby rubysymbol
import org jruby ext ffi abstractmemory
import org jruby ext ffi arraymemoryio
import org jruby ext ffi buffer
import org jruby ext ffi callbackinfo
import org jruby ext ffi directmemoryio
import org jruby ext ffi memoryio
import org jruby ext ffi memorypointer
import org jruby ext ffi nativetype
import org jruby ext ffi platform
import org jruby ext ffi pointer
import org jruby ext ffi struct
import org jruby ext ffi structbyvalue
import org jruby ext ffi structlayout
import org jruby ext ffi type
import org jruby ext ffi util
import org jruby internal runtime methods dynamicmethod
import org jruby runtime threadcontext
import org jruby runtime builtin irubyobject
import org jruby util bytelist
public final class defaultmethodfactory
private static final class singletonholder
private static final defaultmethodfactory instance   new defaultmethodfactory
private defaultmethodfactory
public static final defaultmethodfactory getfactory
return singletonholder instance
dynamicmethod createmethod rubymodule module  function function
type returntype  type parametertypes  callingconvention convention  irubyobject enums
functioninvoker functioninvoker   getfunctioninvoker returntype
parametermarshaller marshallers   new parametermarshaller
for  int i   0  i < parametertypes length    i
marshallers   getmarshaller parametertypes  convention  enums
if  marshallers    null
throw module getruntime   newtypeerror     parametertypes
/*
* if there is exactly _one_ callback argument to the function,
* then a block can be given and automatically subsituted for the callback
* parameter.
*/
if  marshallers length > 0
int cbcount   0  cbindex    1
for  int i   0  i < marshallers length    i
if  marshallers instanceof callbackmarshaller
cbcount
cbindex   i
if  cbcount    1
return new callbackmethodwithblock module  function  functioninvoker  marshallers  cbindex
//
// determine if the parameter might be passed as a 32bit int parameter.
// this just applies to buffer/pointer types.
//
fastintmethodfactory fastintfactory   fastintmethodfactory getfactory
boolean canbefastint   enums isnil      parametertypes length <  3    fastintfactory isfastintresult returntype
for  int i   0  canbefastint    i < parametertypes length    i
if    parametertypes instanceof type builtin     marshallers needsinvocationsession
canbefastint   false
else
switch  parametertypes getnativetype
case pointer
case buffer_in
case buffer_out
case buffer_inout
canbefastint   platform getplatform   addresssize      32
break
default
canbefastint   fastintfactory isfastintparam parametertypes
break
if   canbefastint  switch  parametertypes length
case 0
return new defaultmethodzeroarg module  function  functioninvoker
case 1
return new defaultmethodonearg module  function  functioninvoker  marshallers
case 2
return new defaultmethodtwoarg module  function  functioninvoker  marshallers
case 3
return new defaultmethodthreearg module  function  functioninvoker  marshallers
default
return new defaultmethod module  function  functioninvoker  marshallers
//
// set up for potentially fast-int operations
//
intresultconverter resultconverter   fastintfactory getintresultconverter returntype
intparameterconverter intparameterconverters   new intparameterconverter
for  int i   0  i < parametertypes length    i
intparameterconverters   fastintfactory getintparameterconverter parametertypes
switch  parametertypes length
case 0
return new fastintmethodzeroarg module  function  resultconverter  intparameterconverters
case 1
return new fastintpointermethodonearg module  function  resultconverter
intparameterconverters  marshallers
case 2
return new fastintpointermethodtwoarg module  function  resultconverter
intparameterconverters  marshallers
case 3
return new fastintpointermethodthreearg module  function  resultconverter
intparameterconverters  marshallers
throw new illegalargumentexception
static functioninvoker getfunctioninvoker type returntype
if  returntype instanceof type builtin
return getfunctioninvoker returntype getnativetype
else if  returntype instanceof callbackinfo
return new callbackinvoker  callbackinfo  returntype
else if  returntype instanceof org jruby ext ffi enum
return new enuminvoker  org jruby ext ffi enum  returntype
else if  returntype instanceof structbyvalue
return new structbyvalueinvoker  structbyvalue  returntype
throw returntype getruntime   newargumenterror     returntype
static functioninvoker getfunctioninvoker nativetype returntype
switch  returntype
case void
return voidinvoker instance
case bool
return booleaninvoker instance
case pointer
return pointerinvoker instance
case char
return signed8invoker instance
case short
return signed16invoker instance
case int
return signed32invoker instance
case uchar
return unsigned8invoker instance
case ushort
return unsigned16invoker instance
case uint
return unsigned32invoker instance
case long_long
return signed64invoker instance
case ulong_long
return unsigned64invoker instance
case long
return platform getplatform   longsize      32
? signed32invoker instance
signed64invoker instance
case ulong
return platform getplatform   longsize      32
? unsigned32invoker instance
unsigned64invoker instance
case float
return float32invoker instance
case double
return float64invoker instance
case string
return stringinvoker instance
default
throw new illegalargumentexception     returntype
/**
* gets a marshaller to convert from a ruby type to a native type.
*
* @param type the native type to convert to.
* @return a new <tt>marshaller</tt>
*/
static final parametermarshaller getmarshaller type type  callingconvention convention  irubyobject enums
if  type instanceof type builtin
return enums    null     enums isnil   ? getenummarshaller type  enums    getmarshaller type getnativetype
else if  type instanceof org jruby ext ffi callbackinfo
return new callbackmarshaller  org jruby ext ffi callbackinfo  type  convention
else if  type instanceof org jruby ext ffi enum
return getenummarshaller type  type callmethod type getruntime   getcurrentcontext
else if  type instanceof org jruby ext ffi structbyvalue
return new structbyvaluemarshaller  org jruby ext ffi structbyvalue  type
else
return null
/**
* gets a marshaller to convert from a ruby type to a native type.
*
* @param type the native type to convert to.
* @param enums the enum map
* @return a new <tt>parametermarshaller</tt>
*/
static final parametermarshaller getenummarshaller type type  irubyobject enums
switch  type getnativetype
case char
case uchar
case short
case ushort
case int
case uint
case long_long
case ulong_long
if    enums instanceof rubyhash
throw type getruntime   newargumenterror
enums getmetaclass   getname
return new enummarshaller getmarshaller type getnativetype      rubyhash  enums
default
return getmarshaller type getnativetype
/**
* gets a marshaller to convert from a ruby type to a native type.
*
* @param type the native type to convert to.
* @return a new <tt>parametermarshaller</tt>
*/
static final parametermarshaller getmarshaller nativetype type
switch  type
case bool
return booleanmarshaller instance
case char
return signed8marshaller instance
case uchar
return unsigned8marshaller instance
case short
return signed16marshaller instance
case ushort
return unsigned16marshaller instance
case int
return signed32marshaller instance
case uint
return unsigned32marshaller instance
case long_long
return signed64marshaller instance
case ulong_long
return unsigned64marshaller instance
case long
return platform getplatform   longsize      32
? signed32marshaller instance
signed64marshaller instance
case ulong
return platform getplatform   longsize      32
? signed32marshaller instance
unsigned64marshaller instance
case float
return float32marshaller instance
case double
return float64marshaller instance
case string
return stringmarshaller instance
case pointer
return buffermarshaller inout
case buffer_in
return buffermarshaller in
case buffer_out
return buffermarshaller out
case buffer_inout
return buffermarshaller inout
default
throw new illegalargumentexception     type
private static abstract class baseinvoker implements functioninvoker
static final invoker invoker   invoker getinstance
/**
* invokes the native function with no return type, and returns nil to ruby.
*/
private static final class voidinvoker extends baseinvoker
public final irubyobject invoke ruby runtime  function function  heapinvocationbuffer args
invoker invokeint function  args
return runtime getnil
public static final functioninvoker instance   new voidinvoker
/**
* invokes the native function with a boolean return value.
* returns a boolean to ruby.
*/
private static final class booleaninvoker extends baseinvoker
public final irubyobject invoke ruby runtime  function function  heapinvocationbuffer args
return runtime newboolean invoker invokeint function  args     0
public static final functioninvoker instance   new booleaninvoker
/**
* invokes the native function with a native int type, and converts to a symbol
*/
private static final class enuminvoker extends baseinvoker
private final org jruby ext ffi enum returntype
public enuminvoker org jruby ext ffi enum returntype
this returntype   returntype
public final irubyobject invoke ruby runtime  function function  heapinvocationbuffer args
return returntype callmethod runtime getcurrentcontext
runtime newfixnum invoker invokeint function  args
/**
* invokes the native function with n signed 8 bit integer return value.
* returns a fixnum to ruby.
*/
private static final class signed8invoker extends baseinvoker
public final irubyobject invoke ruby runtime  function function  heapinvocationbuffer args
return util newsigned8 runtime  invoker invokeint function  args
public static final functioninvoker instance   new signed8invoker
/**
* invokes the native function with an unsigned 8 bit integer return value.
* returns a fixnum to ruby.
*/
private static final class unsigned8invoker extends baseinvoker
public final irubyobject invoke ruby runtime  function function  heapinvocationbuffer args
return util newunsigned8 runtime  invoker invokeint function  args
public static final functioninvoker instance   new unsigned8invoker
/**
* invokes the native function with n signed 8 bit integer return value.
* returns a fixnum to ruby.
*/
private static final class signed16invoker extends baseinvoker
public final irubyobject invoke ruby runtime  function function  heapinvocationbuffer args
return util newsigned16 runtime  invoker invokeint function  args
public static final functioninvoker instance   new signed16invoker
/**
* invokes the native function with an unsigned 32 bit integer return value.
* returns a fixnum to ruby.
*/
private static final class unsigned16invoker extends baseinvoker
public final irubyobject invoke ruby runtime  function function  heapinvocationbuffer args
return util newunsigned16 runtime  invoker invokeint function  args
public static final functioninvoker instance   new unsigned16invoker
/**
* invokes the native function with a 32 bit integer return value.
* returns a fixnum to ruby.
*/
private static final class signed32invoker extends baseinvoker
public final irubyobject invoke ruby runtime  function function  heapinvocationbuffer args
return util newsigned32 runtime  invoker invokeint function  args
public static final functioninvoker instance   new signed32invoker
/**
* invokes the native function with an unsigned 32 bit integer return value.
* returns a fixnum to ruby.
*/
private static final class unsigned32invoker extends baseinvoker
public final irubyobject invoke ruby runtime  function function  heapinvocationbuffer args
return util newunsigned32 runtime  invoker invokeint function  args
public static final functioninvoker instance   new unsigned32invoker
/**
* invokes the native function with a 64 bit integer return value.
* returns a fixnum to ruby.
*/
private static final class signed64invoker extends baseinvoker
public final irubyobject invoke ruby runtime  function function  heapinvocationbuffer args
return util newsigned64 runtime  invoker invokelong function  args
public static final functioninvoker instance   new signed64invoker
/**
* invokes the native function with a 64 bit unsigned integer return value.
* returns a ruby fixnum or bignum.
*/
private static final class unsigned64invoker extends baseinvoker
public final irubyobject invoke ruby runtime  function function  heapinvocationbuffer args
return util newunsigned64 runtime  invoker invokelong function  args
public static final functioninvoker instance   new unsigned64invoker
/**
* invokes the native function with a 32 bit float return value.
* returns a float to ruby.
*/
private static final class float32invoker extends baseinvoker
public final irubyobject invoke ruby runtime  function function  heapinvocationbuffer args
return runtime newfloat invoker invokefloat function  args
public static final functioninvoker instance   new float32invoker
/**
* invokes the native function with a 64 bit float return value.
* returns a float to ruby.
*/
private static final class float64invoker extends baseinvoker
public final irubyobject invoke ruby runtime  function function  heapinvocationbuffer args
return runtime newfloat invoker invokedouble function  args
public static final functioninvoker instance   new float64invoker
/**
* invokes the native function with a native pointer return value.
* returns a {@link memorypointer} to ruby.
*/
private static final class pointerinvoker extends baseinvoker
public final irubyobject invoke ruby runtime  function function  heapinvocationbuffer args
final long address   invoker invokeaddress function  args
return new pointer runtime  nativememoryio wrap runtime  address
public static final functioninvoker instance   new pointerinvoker
/**
* invokes the native function with a native string return value.
* returns a {@link rubystring} to ruby.
*/
private static final class stringinvoker extends baseinvoker
private static final com kenai jffi memoryio io   com kenai jffi memoryio getinstance
public final irubyobject invoke ruby runtime  function function  heapinvocationbuffer args
return ffiutil getstring runtime  invoker invokeaddress function  args
public static final functioninvoker instance   new stringinvoker
/**
* invokes the native function with a native struct return value.
* returns a ffi::struct instance to ruby.
*/
private static final class structbyvalueinvoker extends baseinvoker
private static final com kenai jffi memoryio io   com kenai jffi memoryio getinstance
private final structbyvalue info
public structbyvalueinvoker structbyvalue info
this info   info
public final irubyobject invoke ruby runtime  function function  heapinvocationbuffer args
return info newstruct runtime  invoker invokestruct function  args   0
/**
* invokes the native function with a callback/function pointer return value.
* returns a {@link invoker} to ruby.
*/
private static final class callbackinvoker extends baseinvoker
private static final com kenai jffi memoryio io   com kenai jffi memoryio getinstance
private final type returntype
private final type parametertypes
public callbackinvoker callbackinfo cbinfo
this returntype   cbinfo getreturntype
this parametertypes   cbinfo getparametertypes
public final irubyobject invoke ruby runtime  function function  heapinvocationbuffer args
long address   invoker invokeaddress function  args
if  address    0
return runtime getnil
return new jffiinvoker runtime  address  returntype  parametertypes
/*------------------------------------------------------------------------*/
static abstract class basemarshaller implements parametermarshaller
public boolean needsinvocationsession
return false
/**
* converts a ruby enum into an native integer.
*/
static final class enummarshaller extends basemarshaller
private final parametermarshaller marshaller
private final rubyhash enums
public enummarshaller parametermarshaller marshaller  rubyhash enums
this marshaller   marshaller
this enums   enums
public final void marshal threadcontext context  invocationbuffer buffer  irubyobject parameter
if  parameter instanceof rubysymbol
parameter   enums fastaref parameter
if  parameter isnil
throw context getruntime   newargumenterror     parameter
marshaller marshal context  buffer  parameter
public void marshal invocation invocation  invocationbuffer buffer  irubyobject parameter
marshal invocation getthreadcontext    buffer  parameter
/**
* converts a ruby boolean into an 32 bit native integer.
*/
static final class booleanmarshaller extends basemarshaller
public final void marshal threadcontext context  invocationbuffer buffer  irubyobject parameter
buffer putint parameter istrue   ? 1   0
public void marshal invocation invocation  invocationbuffer buffer  irubyobject parameter
if    parameter instanceof rubyboolean
throw invocation getthreadcontext   getruntime   newtypeerror
buffer putint parameter istrue   ? 1   0
public static final parametermarshaller instance   new booleanmarshaller
/**
* converts a ruby fixnum into an 8 bit native integer.
*/
static final class signed8marshaller extends basemarshaller
public final void marshal threadcontext context  invocationbuffer buffer  irubyobject parameter
buffer putbyte util int8value parameter
public void marshal invocation invocation  invocationbuffer buffer  irubyobject parameter
buffer putbyte util int8value parameter
public static final parametermarshaller instance   new signed8marshaller
/**
* converts a ruby fixnum into an 8 bit native unsigned integer.
*/
static final class unsigned8marshaller extends basemarshaller
public final void marshal threadcontext context  invocationbuffer buffer  irubyobject parameter
buffer putbyte util uint8value parameter
public final void marshal invocation invocation  invocationbuffer buffer  irubyobject parameter
buffer putbyte util uint8value parameter
public static final parametermarshaller instance   new unsigned8marshaller
/**
* converts a ruby fixnum into a 16 bit native signed integer.
*/
static final class signed16marshaller extends basemarshaller
public final void marshal threadcontext context  invocationbuffer buffer  irubyobject parameter
buffer putshort util int16value parameter
public final void marshal invocation invocation  invocationbuffer buffer  irubyobject parameter
buffer putshort util int16value parameter
public static final parametermarshaller instance   new signed16marshaller
/**
* converts a ruby fixnum into a 16 bit native unsigned integer.
*/
static final class unsigned16marshaller extends basemarshaller
public final void marshal threadcontext context  invocationbuffer buffer  irubyobject parameter
buffer putshort util uint16value parameter
public final void marshal invocation invocation  invocationbuffer buffer  irubyobject parameter
buffer putshort util uint16value parameter
public static final parametermarshaller instance   new unsigned16marshaller
/**
* converts a ruby fixnum into a 32 bit native signed integer.
*/
static final class signed32marshaller extends basemarshaller
public final void marshal threadcontext context  invocationbuffer buffer  irubyobject parameter
buffer putint util int32value parameter
public final void marshal invocation invocation  invocationbuffer buffer  irubyobject parameter
buffer putint util int32value parameter
public static final parametermarshaller instance   new signed32marshaller
/**
* converts a ruby fixnum into a 32 bit native unsigned integer.
*/
static final class unsigned32marshaller extends basemarshaller
public final void marshal threadcontext context  invocationbuffer buffer  irubyobject parameter
buffer putint  int  util uint32value parameter
public final void marshal invocation invocation  invocationbuffer buffer  irubyobject parameter
buffer putint  int  util uint32value parameter
public static final parametermarshaller instance   new unsigned32marshaller
/**
* converts a ruby fixnum into a 64 bit native signed integer.
*/
static final class signed64marshaller extends basemarshaller
public final void marshal threadcontext context  invocationbuffer buffer  irubyobject parameter
buffer putlong util int64value parameter
public final void marshal invocation invocation  invocationbuffer buffer  irubyobject parameter
buffer putlong util int64value parameter
public static final parametermarshaller instance   new signed64marshaller
/**
* converts a ruby fixnum into a 64 bit native unsigned integer.
*/
static final class unsigned64marshaller extends basemarshaller
public final void marshal threadcontext context  invocationbuffer buffer  irubyobject parameter
buffer putlong util uint64value parameter
public final void marshal invocation invocation  invocationbuffer buffer  irubyobject parameter
buffer putlong util uint64value parameter
public static final parametermarshaller instance   new unsigned64marshaller
/**
* converts a ruby float into a 32 bit native float.
*/
static final class float32marshaller extends basemarshaller
public final void marshal threadcontext context  invocationbuffer buffer  irubyobject parameter
buffer putfloat  float  rubynumeric num2dbl parameter
public final void marshal invocation invocation  invocationbuffer buffer  irubyobject parameter
buffer putfloat  float  rubynumeric num2dbl parameter
public static final parametermarshaller instance   new float32marshaller
/**
* converts a ruby float into a 64 bit native float.
*/
static final class float64marshaller extends basemarshaller
public final void marshal threadcontext context  invocationbuffer buffer  irubyobject parameter
buffer putdouble rubynumeric num2dbl parameter
public final void marshal invocation invocation  invocationbuffer buffer  irubyobject parameter
buffer putdouble rubynumeric num2dbl parameter
public static final parametermarshaller instance   new float64marshaller
/**
* converts a ruby buffer into a native address.
*/
static final class buffermarshaller extends basemarshaller
static final parametermarshaller in   new buffermarshaller arrayflags in
static final parametermarshaller out   new buffermarshaller arrayflags out
static final parametermarshaller inout   new buffermarshaller arrayflags in   arrayflags out
private final int flags
public buffermarshaller int flags
this flags   flags
private static final int bufferflags buffer buffer
int f   buffer getinoutflags
return   f   buffer in     0 ? arrayflags in  0
f   buffer out     0 ? arrayflags out   0
@override
public boolean needsinvocationsession
return false
private static final void addbufferparameter invocationbuffer buffer  irubyobject parameter  int flags
arraymemoryio memory    arraymemoryio    buffer  parameter  getmemoryio
buffer putarray memory array    memory arrayoffset    memory arraylength
flags   bufferflags  buffer  parameter
private static final long getaddress pointer ptr
return   directmemoryio  ptr getmemoryio    getaddress
public final void marshal threadcontext context  invocationbuffer buffer  irubyobject parameter
if  parameter instanceof buffer
addbufferparameter buffer  parameter  flags
else if  parameter instanceof pointer
buffer putaddress getaddress  pointer  parameter
else if  parameter instanceof struct
irubyobject memory     struct  parameter  getmemory
if  memory instanceof buffer
addbufferparameter buffer  memory  flags
else if  memory instanceof pointer
buffer putaddress getaddress  pointer  memory
else if  memory    null    memory isnil
buffer putaddress 0l
else
throw context getruntime   newargumenterror
else if  parameter isnil
buffer putaddress 0l
else if  parameter instanceof rubystring
bytelist bl     rubystring  parameter  getbytelist
buffer putarray bl unsafebytes    bl begin    bl length    flags   arrayflags nulterminate
else if  parameter respondsto
final int maxrecurse   4
for  int depth   0  depth < maxrecurse    depth
irubyobject ptr   parameter callmethod context
if  ptr instanceof pointer
buffer putaddress getaddress  pointer  ptr
else if  ptr instanceof buffer
addbufferparameter buffer  ptr  flags
else if  ptr isnil
buffer putaddress 0l
else if  depth < maxrecurse    ptr respondsto
parameter   ptr
continue
else
throw context getruntime   newargumenterror
break
else
throw context getruntime   newargumenterror
public final void marshal invocation invocation  invocationbuffer buffer  irubyobject parameter
marshal invocation getthreadcontext    buffer  parameter
/**
* converts a ruby string into a native pointer.
*/
static final class stringmarshaller extends basemarshaller
public final void marshal threadcontext context  invocationbuffer buffer  irubyobject parameter
if  parameter instanceof rubystring
util checkstringsafety context getruntime    parameter
bytelist bl     rubystring  parameter  getbytelist
buffer putarray bl unsafebytes    bl begin    bl length
arrayflags in   arrayflags nulterminate
else if  parameter isnil
buffer putaddress 0
else
throw context getruntime   newargumenterror
public final void marshal invocation invocation  invocationbuffer buffer  irubyobject parameter
marshal invocation getthreadcontext    buffer  parameter
public static final parametermarshaller instance   new stringmarshaller
/**
* converts a ruby string into a native pointer.
*/
static final class structbyvaluemarshaller extends basemarshaller
private final structlayout layout
public structbyvaluemarshaller org jruby ext ffi structbyvalue sbv
layout   sbv getstructlayout
public final void marshal threadcontext context  invocationbuffer buffer  irubyobject parameter
if    parameter instanceof struct
throw context getruntime   newtypeerror
parameter getmetaclass   getname
irubyobject memory     struct  parameter  getmemory
if    memory instanceof abstractmemory
throw context getruntime   newtypeerror
memory getmetaclass   getname
if    abstractmemory  memory  getsize   < layout getsize
throw context getruntime   newargumenterror
memoryio io     abstractmemory  memory  getmemoryio
if  io instanceof directmemoryio
if  io isnull
throw context getruntime   newruntimeerror
buffer putstruct   directmemoryio  io  getaddress
else if  io instanceof arraymemoryio
arraymemoryio aio    arraymemoryio  io
buffer putstruct aio array    aio arrayoffset
else
throw context getruntime   newruntimeerror
public final void marshal invocation invocation  invocationbuffer buffer  irubyobject parameter
marshal invocation getthreadcontext    buffer  parameter