/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2008-2009 joseph lafata <joe@quibb.org>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby util
import java util arraylist
import java util comparator
public class qsort
private static final int size_threshold   16
public static void sort object a  comparator c
if a length < size_threshold
insertionsort a  0  a length  c
return
quicksort_loop a  0  a length  c
public static void sort object a  int begin  int end  comparator c
if  begin < end
if  end   begin  < size_threshold
insertionsort a  begin  end  c
return
quicksort_loop a  begin  end  c
private static void endtest object a  int lo  int hi  comparator c
if  c compare a  a  <  0
if  c compare a  a  > 0
bubbleup a  lo  hi 1  c
else
if  c compare a  a  > 0
insertionsort a  lo  hi  c
else
bubbledown a  lo  hi 1  c
private static boolean seqtest object a  int lo  int hi  comparator c
int i   lo   1  j   hi   2
//sequential
while  i < j    c compare a  a  <  0
i
if  i    j
return false
endtest a  lo  hi  c
return true
private static boolean revtest object a  int lo  int hi  comparator c
int i   lo   1  j   hi   2
while  i < j    c compare a  a  >  0
i
if  i    j
return false
// reverse the entire area of the array selected if it's reversed.
i   lo
while  i < j
swap a  i  j
i
j
endtest a  lo  hi  c
return true
private static void quicksort_loop object a  int lo  int hi  comparator c
final arraylist<int> stack   new arraylist<int> 16
int entry   new int
entry   lo
entry   hi
while   stack isempty      entry    null
if  entry    null
entry   stack remove stack size     1
lo   entry
hi   entry
int midi   lo    hi   lo    2
object mid   a
object m1
object m3
// do median of 7 if the array is over 200 elements.
if   hi   lo  >  200
int t    hi   lo    8
m1   med3 a  a  a  c
m3   med3 a  a  a  c
else
// if it's less than 200 do median of 3
int t    hi   lo    4
m1   a
m3   a
mid   med3 m1  mid  m3  c
if  hi   lo >  63
if  c compare m1  mid  <  0    c compare mid  m3  <  0
if  seqtest a  lo  hi  c
entry   null
continue
else if  c compare m1  mid  >  0    c compare mid  m3  >  0
if  revtest a  lo  hi  c
entry   null
continue
int p   partition a  lo  hi  mid  c
if hi   p > size_threshold    p   lo > size_threshold
entry   p
entry   hi
stack add entry
entry   new int
entry   lo
entry   p
else if  hi   p > size_threshold
entry   p
entry   hi
insertionsort a  lo  p  c
else if  p   lo > size_threshold
entry   lo
entry   p
insertionsort a  p  hi  c
else
insertionsort a  lo  p  c
insertionsort a  p  hi  c
entry   null
private static int partition object a  int lo1  int hi  object x  comparator c
int lo   lo1
int i   lo  j   hi  c1   0
while  lo < hi    c compare x  a     0
lo
i   lo
while  true
while  i < j     c1   c compare a  x   <  0
if  c1    0    i    lo
while  c compare x  a     0
lo
if  lo > i
i   lo   1
else
swap a  lo    i
i
j
while  j >  i     c1   c compare x  a   < 0
j
if  i > j
break
if  c1    0
while  c compare x  a     0
lo
swap a  i  j
if  lo    i
swap a  lo    i
else
lo
if  lo > i
i   lo   1
else
swap a  i  j
i
c1     i >  hi  ? hi 1   i
while  c1 > lo1    c compare x  a  < 0
c1
while  lo < hi    c compare x  a     0
lo
lo
while  lo >  lo1    c1 > lo
swap a  lo1    c1
return new int  c1 > lo  ? c1   1   lo1  i
private static object med3 object lo  object mid  object hi  comparator c
if  c compare mid  lo  < 0
if  c compare hi  mid  < 0
return mid
else
if  c compare hi  lo  < 0
return hi
else
return lo
else
if  c compare hi  mid  < 0
if  c compare hi  lo  < 0
return lo
else
return hi
else
return mid
private static void insertionsort object a  int lo  int hi  comparator c
int i
for  i   lo 1  i < hi  i
if  c compare a  a  < 0
int j   i   1
object t   a
a   a
for     j    lo    c compare t  a  < 0    j
a   a
a   t
private static void bubbledown object a  int lo  int hi  comparator c
object x   a
while  lo < hi    c compare x  a  > 0
a   a
a   x
private static void bubbleup object a  int lo  int hi  comparator c
object x   a
while  hi > lo    c compare x  a  < 0
a   a
a   x
private static void swap object a  int i  int j
object t   a
a   a
a   t