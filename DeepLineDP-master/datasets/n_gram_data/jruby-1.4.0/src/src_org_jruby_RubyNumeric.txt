/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2001 alan moore <alan_moore@gmx.net>
* copyright (c) 2001-2004 jan arne petersen <jpetersen@uni-bonn.de>
* copyright (c) 2002 benoit cerrina <b.cerrina@wanadoo.fr>
* copyright (c) 2002-2004 anders bengtsson <ndrsbngtssn@yahoo.se>
* copyright (c) 2002-2004 thomas e enebo <enebo@acm.org>
* copyright (c) 2004 stefan matthias aust <sma@3plus4.de>
* copyright (c) 2006 miguel covarrubias <mlcovarrubias@gmail.com>
* copyright (c) 2006 antti karanta <antti.karanta@napa.fi>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby
import static org jruby rubyenumerator enumeratorize
import static org jruby util numeric f_abs
import static org jruby util numeric f_arg
import static org jruby util numeric f_mul
import static org jruby util numeric f_negative_p
import java math biginteger
import org jruby anno jrubyclass
import org jruby anno jrubymethod
import org jruby exceptions raiseexception
import org jruby javasupport javautil
import org jruby javasupport util runtimehelpers
import org jruby runtime block
import org jruby runtime objectallocator
import org jruby runtime threadcontext
import org jruby runtime visibility
import org jruby runtime builtin irubyobject
import org jruby util bytelist
import org jruby util convert
import org jruby util convert2
/**
* base class for all numerical types in ruby.
*/
// todo: numeric.new works in ruby and it does here too.  however trying to use
//   that instance in a numeric operation should generate an argumenterror. doing
//   this seems so pathological i do not see the need to fix this now.
@jrubyclass name    include
public class rubynumeric extends rubyobject
public static rubyclass createnumericclass ruby runtime
rubyclass numeric   runtime defineclass    runtime getobject    numeric_allocator
runtime setnumeric numeric
numeric kindof   new rubymodule kindof
@override
public boolean iskindof irubyobject obj  rubymodule type
return obj instanceof rubynumeric
numeric includemodule runtime getcomparable
numeric defineannotatedmethods rubynumeric class
return numeric
protected static final objectallocator numeric_allocator   new objectallocator
public irubyobject allocate ruby runtime  rubyclass klass
return new rubynumeric runtime  klass
public static double dbl_epsilon 2 2204460492503131e 16
private static irubyobject converttonum double val  ruby runtime
if  val >   double  rubyfixnum max    val <  double  rubyfixnum min
return rubybignum newbignum runtime  val
return rubyfixnum newfixnum runtime   long  val
public rubynumeric ruby runtime  rubyclass metaclass
super runtime  metaclass
public rubynumeric rubyclass metaclass
super metaclass
public rubynumeric ruby runtime  rubyclass metaclass  boolean useobjectspace
super runtime  metaclass  useobjectspace
public rubynumeric ruby runtime  rubyclass metaclass  boolean useobjectspace  boolean canbetainted
super runtime  metaclass  useobjectspace  canbetainted
// the implementations of these are all bonus (see todo above)  i was going
// to throw an error from these, but it appears to be the wrong place to
// do it.
public double getdoublevalue
return 0
public long getlongvalue
return 0
public biginteger getbigintegervalue
return biginteger zero
public static rubynumeric newnumeric ruby runtime
return new rubynumeric runtime  runtime getnumeric
/*  ================
*  utility methods
*  ================
*/
/** rb_num2int, num2int
*
*/
public static int num2int irubyobject arg
long num   num2long arg
checkint arg  num
return  int num
/** check_int
*
*/
public static void checkint irubyobject arg  long num
if  num < integer min_value
toosmall arg  num
else if  num > integer max_value
toobig arg  num
else
return
private static void toosmall irubyobject arg  long num
throw arg getruntime   newrangeerror     num
private static void toobig irubyobject arg  long num
throw arg getruntime   newrangeerror     num
/**
* num2chr
*/
public static byte num2chr irubyobject arg
if  arg instanceof rubystring
string value     rubystring  arg  tostring
if  value    null    value length   > 0  return  byte  value charat 0
return  byte  num2int arg
/** rb_num2long and fix2long (numeric.c)
*
*/
public static long num2long irubyobject arg
if  arg instanceof rubyfixnum
return   rubyfixnum  arg  getlongvalue
else
return other2long arg
private static long other2long irubyobject arg  throws raiseexception
if  arg isnil
throw arg getruntime   newtypeerror
else if  arg instanceof rubyfloat
return float2long  rubyfloat arg
else if  arg instanceof rubybignum
return rubybignum big2long  rubybignum  arg
return arg converttointeger   getlongvalue
private static long float2long rubyfloat flt
double afloat   flt getdoublevalue
if  afloat <   double  long max_value    afloat >   double  long min_value
return  long  afloat
else
// todo: number formatting here, mri uses "%-.10g", 1.4 api is a must?
throw flt getruntime   newrangeerror     afloat
/** rb_dbl2big + long2fix at once (numeric.c)
*
*/
/** rb_dbl2big + long2fix at once (numeric.c)
*
*/
public static irubyobject dbl2num ruby runtime  double val
if  double isinfinite val
throw runtime newfloatdomainerror val < 0 ?
if  double isnan val
throw runtime newfloatdomainerror
return converttonum val runtime
/** rb_num2dbl and num2dbl
*
*/
public static double num2dbl irubyobject arg
if  arg instanceof rubyfloat
return   rubyfloat  arg  getdoublevalue
else if  arg instanceof rubystring
throw arg getruntime   newtypeerror
else if  arg    arg getruntime   getnil
throw arg getruntime   newtypeerror
return rubykernel new_float arg  arg  getdoublevalue
/** rb_dbl_cmp (numeric.c)
*
*/
public static irubyobject dbl_cmp ruby runtime  double a  double b
if  double isnan a     double isnan b   return runtime getnil
return a    b ? rubyfixnum zero runtime    a > b ?
rubyfixnum one runtime    rubyfixnum minus_one runtime
public static long fix2long irubyobject arg
return   rubyfixnum  arg  getlongvalue
public static int fix2int irubyobject arg
long num   arg instanceof rubyfixnum ? fix2long arg    num2long arg
checkint arg  num
return  int  num
public static int fix2int rubyfixnum arg
long num   arg getlongvalue
checkint arg  num
return  int  num
public static rubyinteger str2inum ruby runtime  rubystring str  int base
return str2inum runtime str base false
public static rubynumeric int2fix ruby runtime  long val
return rubyfixnum newfixnum runtime val
/** rb_num2fix
*
*/
public static irubyobject num2fix irubyobject val
if  val instanceof rubyfixnum
return val
if  val instanceof rubybignum
// any biginteger is bigger than fixnum and we don't have fixable
throw val getruntime   newrangeerror     val
return rubyfixnum newfixnum val getruntime    num2long val
/**
* converts a string representation of an integer to the integer value.
* parsing starts at the beginning of the string (after leading and
* trailing whitespace have been removed), and stops at the end or at the
* first character that can't be part of an integer.  leading signs are
* allowed. if <code>base</code> is zero, strings that begin with '0[xx]',
* '0[bb]', or '0' (optionally preceded by a sign) will be treated as hex,
* binary, or octal numbers, respectively.  if a non-zero base is given,
* only the prefix (if any) that is appropriate to that base will be
* parsed correctly.  for example, if the base is zero or 16, the string
* "0xff" will be converted to 256, but if the base is 10, it will come out
* as zero, since 'x' is not a valid decimal digit.  if the string fails
* to parse as a number, zero is returned.
*
* @param runtime  the ruby runtime
* @param str   the string to be converted
* @param base  the expected base of the number (for example, 2, 8, 10, 16),
*              or 0 if the method should determine the base automatically
*              (defaults to 10). values 0 and 2-36 are permitted. any other
*              value will result in an argumenterror.
* @param strict if true, enforce the strict criteria for string encoding of
*               numeric values, as required by integer('n'), and raise an
*               exception when those criteria are not met. otherwise, allow
*               lax expression of values, as permitted by string#to_i, and
*               return a value in almost all cases (excepting illegal radix).
*               todo: describe the rules/criteria
* @return  a rubyfixnum or (if necessary) a rubybignum representing
*          the result of the conversion, which will be zero if the
*          conversion failed.
*/
public static rubyinteger str2inum ruby runtime  rubystring str  int base  boolean strict
bytelist s   str getbytelist
return convert2 bytelisttoinum runtime  s  base  strict
public static rubyfloat str2fnum ruby runtime  rubystring arg
return str2fnum runtime arg false
/**
* converts a string representation of a floating-point number to the
* numeric value.  parsing starts at the beginning of the string (after
* leading and trailing whitespace have been removed), and stops at the
* end or at the first character that can't be part of a number.  if
* the string fails to parse as a number, 0.0 is returned.
*
* @param runtime  the ruby runtime
* @param arg   the string to be converted
* @param strict if true, enforce the strict criteria for string encoding of
*               numeric values, as required by float('n'), and raise an
*               exception when those criteria are not met. otherwise, allow
*               lax expression of values, as permitted by string#to_f, and
*               return a value in all cases.
*               todo: describe the rules/criteria
* @return  a rubyfloat representing the result of the conversion, which
*          will be 0.0 if the conversion failed.
*/
public static rubyfloat str2fnum ruby runtime  rubystring arg  boolean strict
final double zero   0 0
try
return new rubyfloat runtime convert bytelisttodouble arg getbytelist   strict
catch  numberformatexception e
if  strict
throw runtime newargumenterror
arg callmethod runtime getcurrentcontext       tostring
return new rubyfloat runtime zero
/** numeric methods. (num_*)
*
*/
protected irubyobject getcoerced threadcontext context  irubyobject other  boolean error
irubyobject result
try
result   other callmethod context     this
catch  raiseexception e
if  error
throw getruntime   newtypeerror
other getmetaclass   getname         getmetaclass   getname
return null
if    result instanceof rubyarray       rubyarray result  getlength      2
throw getruntime   newtypeerror
return   rubyarray result  tojavaarray
protected irubyobject callcoerced threadcontext context  string method  irubyobject other  boolean err
irubyobject args   getcoerced context  other  err
if args    null
return getruntime   getnil
return args callmethod context  method  args
protected irubyobject callcoerced threadcontext context  string method  irubyobject other
irubyobject args   getcoerced context  other  false
if args    null
return getruntime   getnil
return args callmethod context  method  args
// beneath are rewritten coercions that reflect mri logic, the aboves are used only by rubybigdecimal
/** coerce_body
*
*/
protected final irubyobject coercebody threadcontext context  irubyobject other
return other callmethod context     this
/** do_coerce
*
*/
protected final rubyarray docoerce threadcontext context  irubyobject other  boolean err
irubyobject result
try
result   coercebody context  other
catch  raiseexception e
if  err
throw getruntime   newtypeerror
other getmetaclass   getname         getmetaclass   getname
return null
if    result instanceof rubyarray       rubyarray  result  getlength      2
throw getruntime   newtypeerror
return  rubyarray  result
/** rb_num_coerce_bin
*  coercion taking two arguments
*/
protected final irubyobject coercebin threadcontext context  string method  irubyobject other
rubyarray ary   docoerce context  other  true
return  ary eltinternal 0   callmethod context  method  ary eltinternal 1
/** rb_num_coerce_cmp
*  coercion used for comparisons
*/
protected final irubyobject coercecmp threadcontext context  string method  irubyobject other
rubyarray ary   docoerce context  other  false
if  ary    null
return getruntime   getnil       mri does it
return  ary eltinternal 0   callmethod context  method  ary eltinternal 1
/** rb_num_coerce_relop
*  coercion used for relative operators
*/
protected final irubyobject coercerelop threadcontext context  string method  irubyobject other
rubyarray ary   docoerce context  other  false
if  ary    null
return rubycomparable cmperr this  other
return unwrapcoerced context  method  other  ary
private final irubyobject unwrapcoerced threadcontext context  string method  irubyobject other  rubyarray ary
irubyobject result    ary eltinternal 0   callmethod context  method  ary eltinternal 1
if  result isnil
return rubycomparable cmperr this  other
return result
public rubynumeric asnumeric
return this
/*  ================
*  instance methods
*  ================
*/
/** num_sadded
*
*/
@jrubymethod name
public irubyobject sadded irubyobject name
throw getruntime   newtypeerror     name       gettype   getname
/** num_init_copy
*
*/
@override
@jrubymethod name      visibility   visibility private
public irubyobject initialize_copy irubyobject arg
throw getruntime   newtypeerror     gettype   getname
/** num_coerce
*
*/
@jrubymethod name
public irubyobject coerce irubyobject other
if  getmetaclass      other getmetaclass    return getruntime   newarray other  this
irubyobject cdr   rubykernel new_float this  this
irubyobject car   rubykernel new_float this  other
return getruntime   newarray car  cdr
/** num_uplus
*
*/
@jrubymethod name
public irubyobject op_uplus
return this
/** num_uminus
*
*/
@jrubymethod name
public irubyobject op_uminus threadcontext context
rubyarray ary   rubyfixnum zero context getruntime    docoerce context  this  true
return ary eltinternal 0  callmethod context     ary eltinternal 1
/** num_cmp
*
*/
@jrubymethod name
public irubyobject op_cmp irubyobject other
if  this    other       won't hurt fixnums
return rubyfixnum zero getruntime
return getruntime   getnil
/** num_eql
*
*/
@jrubymethod name
public irubyobject eql_p threadcontext context  irubyobject other
if  getclass      other getclass    return getruntime   getfalse
return equalinternal context  this  other  ? getruntime   gettrue     getruntime   getfalse
/** num_quo
*
*/
@jrubymethod name
public irubyobject quo threadcontext context  irubyobject other
return callmethod context     other
/** num_quo
*
*/
@jrubymethod name      compat   compatversion ruby1_9
public irubyobject quo_19 threadcontext context  irubyobject other
return rubyrational newrationalraw context getruntime    this  callmethod context     other
/** num_div
*
*/
@jrubymethod name
public irubyobject div threadcontext context  irubyobject other
return callmethod context     other  converttofloat   floor
/** num_divmod
*
*/
@jrubymethod name
public irubyobject divmod threadcontext context  irubyobject other
return rubyarray newarray getruntime    div context  other   modulo context  other
/** num_fdiv (1.9) */
@jrubymethod name      compat   compatversion ruby1_9
public irubyobject fdiv threadcontext context  irubyobject other
return runtimehelpers invoke context  this converttofloat       other
/** num_modulo
*
*/
@jrubymethod name
public irubyobject modulo threadcontext context  irubyobject other
return callmethod context     other
/** num_remainder
*
*/
@jrubymethod name
public irubyobject remainder threadcontext context  irubyobject dividend
irubyobject z   callmethod context     dividend
irubyobject x   this
rubyfixnum zero   rubyfixnum zero getruntime
if   equalinternal context  z  zero
x callmethod context     zero  istrue
dividend callmethod context     zero  istrue
x callmethod context     zero  istrue
dividend callmethod context     zero  istrue
return z callmethod context     dividend
else
return z
/** num_abs
*
*/
@jrubymethod name
public irubyobject abs threadcontext context
if  callmethod context     rubyfixnum zero getruntime     istrue
return callmethod context
return this
/** num_abs/1.9
*
*/
@jrubymethod name      compat   compatversion ruby1_9
public irubyobject magnitude threadcontext context
return abs context
/** num_to_int
*
*/
@jrubymethod name
public irubyobject to_int threadcontext context
return runtimehelpers invoke context  this
/** num_real_p
*
*/
@jrubymethod name      compat   compatversion ruby1_9
public irubyobject scalar_p
return getruntime   gettrue
/** num_int_p
*
*/
@jrubymethod name
public irubyobject integer_p
return getruntime   getfalse
/** num_zero_p
*
*/
@jrubymethod name
public irubyobject zero_p threadcontext context
return equalinternal context  this  rubyfixnum zero getruntime     ? getruntime   gettrue     getruntime   getfalse
/** num_nonzero_p
*
*/
@jrubymethod name
public irubyobject nonzero_p threadcontext context
if  callmethod context     istrue
return getruntime   getnil
return this
/** num_floor
*
*/
@jrubymethod name
public irubyobject floor
return converttofloat   floor
/** num_ceil
*
*/
@jrubymethod name
public irubyobject ceil
return converttofloat   ceil
/** num_round
*
*/
@jrubymethod name
public irubyobject round
return converttofloat   round
/** num_truncate
*
*/
@jrubymethod name
public irubyobject truncate
return converttofloat   truncate
@deprecated
public irubyobject step threadcontext context  irubyobject args  block block
switch  args length
case 0  throw context getruntime   newargumenterror 0  1
case 1  return step context  args  block
case 2  return step context  args  args  block
default  throw context getruntime   newargumenterror args length  2
public irubyobject step threadcontext context  irubyobject arg0  block block
return step context  arg0  rubyfixnum one context getruntime     block
public irubyobject step threadcontext context  irubyobject to  irubyobject step  block block
ruby runtime   context getruntime
if  this instanceof rubyfixnum    to instanceof rubyfixnum    step instanceof rubyfixnum
fixnumstep context  runtime    rubyfixnum this  getlongvalue
rubyfixnum to  getlongvalue
rubyfixnum step  getlongvalue
block
else if  this instanceof rubyfloat    to instanceof rubyfloat    step instanceof rubyfloat
floatstep context  runtime  this  to  step  block
else
duckstep context  runtime  this  to  step  block
return this
@jrubymethod name      frame   true
public irubyobject step19 threadcontext context  irubyobject arg0  block block
return block isgiven   ? stepcommon19 context  arg0  rubyfixnum one context getruntime     block    enumeratorize context getruntime    this     arg0
@jrubymethod name      frame   true
public irubyobject step19 threadcontext context  irubyobject to  irubyobject step  block block
return block isgiven   ? stepcommon19 context  to  step  block    enumeratorize context getruntime    this     new irubyobject  to  step
private irubyobject stepcommon19 threadcontext context  irubyobject to  irubyobject step  block block
ruby runtime   context getruntime
if  this instanceof rubyfixnum    to instanceof rubyfixnum    step instanceof rubyfixnum
fixnumstep context  runtime    rubyfixnum this  getlongvalue
rubyfixnum to  getlongvalue
rubyfixnum step  getlongvalue
block
else if  this instanceof rubyfloat    to instanceof rubyfloat    step instanceof rubyfloat
floatstep19 context  runtime  this  to  step  false  block
else
duckstep context  runtime  this  to  step  block
return this
private static void fixnumstep threadcontext context  ruby runtime  long value  long end  long diff  block block
if  diff    0  throw runtime newargumenterror
if  diff > 0
for  long i   value  i <  end  i    diff
block yield context  rubyfixnum newfixnum runtime  i
else
for  long i   value  i >  end  i    diff
block yield context  rubyfixnum newfixnum runtime  i
protected static void floatstep threadcontext context  ruby runtime  irubyobject from  irubyobject to  irubyobject step  block block
double beg   num2dbl from
double end   num2dbl to
double unit   num2dbl step
if  unit    0  throw runtime newargumenterror
double n    end   beg  unit
double err    math abs beg    math abs end    math abs end   beg     math abs unit    dbl_epsilon
if  err > 0 5  err   0 5
n   math floor n   err    1
for  long i   0  i < n  i
block yield context  rubyfloat newfloat runtime  i   unit   beg
static void floatstep19 threadcontext context  ruby runtime  irubyobject from  irubyobject to  irubyobject step  boolean excl  block block
double beg   num2dbl from
double end   num2dbl to
double unit   num2dbl step
// todo: remove
if  unit    0  throw runtime newargumenterror
double n    end   beg  unit
double err    math abs beg    math abs end    math abs end   beg     math abs unit    dbl_epsilon
if  double isinfinite unit
if  unit > 0  block yield context  rubyfloat newfloat runtime  beg
else
if  err > 0 5  err   0 5
n   math floor n   err
if   excl  n
for  long i   0  i < n  i
block yield context  rubyfloat newfloat runtime  i   unit   beg
private static void duckstep threadcontext context  ruby runtime  irubyobject from  irubyobject to  irubyobject step  block block
irubyobject i   from
string cmpstring   step callmethod context     rubyfixnum zero runtime   istrue   ?
while  true
if  i callmethod context  cmpstring  to  istrue    break
block yield context  i
i   i callmethod context     step
/** num_equal, doesn't override rubyobject.op_equal
*
*/
protected final irubyobject op_num_equal threadcontext context  irubyobject other
// it won't hurt fixnums
if  this    other   return getruntime   gettrue
return other callmethod context     this
/** num_numerator
*
*/
@jrubymethod name      compat   compatversion ruby1_9
public irubyobject numerator threadcontext context
return rubyrational newrationalconvert context  this  callmethod context
/** num_denominator
*
*/
@jrubymethod name      compat   compatversion ruby1_9
public irubyobject denominator threadcontext context
return rubyrational newrationalconvert context  this  callmethod context
/** numeric_to_c
*
*/
@jrubymethod name      compat   compatversion ruby1_9
public irubyobject to_c threadcontext context
return rubycomplex newcomplexcanonicalize context  this
/** numeric_real
*
*/
@jrubymethod name      compat   compatversion ruby1_9
public irubyobject real threadcontext context
return this
/** numeric_image
*
*/
@jrubymethod name           compat   compatversion ruby1_9
public irubyobject image threadcontext context
return rubyfixnum zero context getruntime
/** numeric_abs2
*
*/
@jrubymethod name      compat   compatversion ruby1_9
public irubyobject abs2 threadcontext context
return f_mul context  this  this
/** numeric_arg
*
*/
@jrubymethod name              compat   compatversion ruby1_9
public irubyobject arg threadcontext context
if   f_negative_p context  this   return rubyfixnum zero context getruntime
return context getruntime   getmath   fastfetchconstant
/** numeric_rect
*
*/
@jrubymethod name           compat   compatversion ruby1_9
public irubyobject rect threadcontext context
return context getruntime   newarray this  rubyfixnum zero context getruntime
/** numeric_polar
*
*/
@jrubymethod name      compat   compatversion ruby1_9
public irubyobject polar threadcontext context
return context getruntime   newarray f_abs context  this   f_arg context  this
/** numeric_real
*
*/
@jrubymethod name           compat   compatversion ruby1_9
public irubyobject conjugate threadcontext context
return this
@override
public object tojava class target
return javautil getnumericconverter target  coerce this  target
public static class invalidintegerexception extends numberformatexception
private static final long serialversionuid   55019452543252148l
public invalidintegerexception
super
public invalidintegerexception string message
super message
@override
public throwable fillinstacktrace
return this
public static class numbertoolargeexception extends numberformatexception
private static final long serialversionuid    1835120694982699449l
public numbertoolargeexception
super
public numbertoolargeexception string message
super message
@override
public throwable fillinstacktrace
return this