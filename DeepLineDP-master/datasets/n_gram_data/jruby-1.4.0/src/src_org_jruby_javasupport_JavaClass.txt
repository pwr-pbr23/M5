/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2002-2004 anders bengtsson <ndrsbngtssn@yahoo.se>
* copyright (c) 2002-2004 jan arne petersen <jpetersen@uni-bonn.de>
* copyright (c) 2004-2005 thomas e enebo <enebo@acm.org>
* copyright (c) 2004 stefan matthias aust <sma@3plus4.de>
* copyright (c) 2004 david corbin <dcorbin@users.sourceforge.net>
* copyright (c) 2005 charles o nutter <headius@headius.com>
* copyright (c) 2006 kresten krab thorup <krab@gnu.org>
* copyright (c) 2007 miguel covarrubias <mlcovarrubias@gmail.com>
* copyright (c) 2007 william n dortch <bill.dortch@gmail.com>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby javasupport
import org jruby java invokers staticfieldgetter
import org jruby java invokers staticmethodinvoker
import org jruby java invokers instancefieldgetter
import org jruby java invokers instancefieldsetter
import org jruby java invokers instancemethodinvoker
import org jruby java invokers staticfieldsetter
import java io bytearrayoutputstream
import java io inputstream
import java io ioexception
import java lang reflect array
import java lang reflect constructor
import java lang reflect field
import java lang reflect method
import java lang reflect modifier
import java util arraylist
import java util collections
import java util hashmap
import java util list
import java util map
import java util concurrent locks reentrantlock
import org jruby ruby
import org jruby rubyarray
import org jruby rubyboolean
import org jruby rubyclass
import org jruby rubyfixnum
import org jruby rubyinteger
import org jruby rubymodule
import org jruby rubystring
import org jruby anno jrubymethod
import org jruby anno jrubyclass
import org jruby common irubywarnings id
import org jruby exceptions raiseexception
import org jruby internal runtime methods dynamicmethod
import org jruby java addons arrayjavaaddons
import org jruby java proxies arrayjavaproxy
import org jruby java invokers constructorinvoker
import org jruby javasupport util runtimehelpers
import org jruby runtime arity
import org jruby runtime block
import org jruby runtime objectallocator
import org jruby runtime threadcontext
import org jruby runtime visibility
import org jruby runtime builtin irubyobject
import org jruby runtime callback callback
import org jruby util bytelist
import org jruby util codegenutils
import org jruby util idutil
@jrubyclass name    parent
public class javaclass extends javaobject
public static final string method_mangle
/**
* assigned names only override based priority of an assigned type, the type must be less than
* or equal to the assigned type. for example, field name (field) in a subclass will override
* an alias (alias) in a superclass, but not a method (method).
*/
private enum priority
reserved 0   method 1   field 2   protected_method 3
weakly_reserved 4   alias 5   protected_field 6
private int value
priority int value
this value   value
public boolean asimportantas assignedname other
return other    null    other type value    value
public boolean lessimportantthan assignedname other
return other    null    other type value < value
public boolean moreimportantthan assignedname other
return other    null    other type value > value
private static class assignedname
string name
priority type
assignedname
assignedname string name  priority type
this name   name
this type   type
// todo: other reserved names?
private static final map<string  assignedname> reserved_names   new hashmap<string  assignedname>
static
reserved_names put    new assignedname    priority reserved
reserved_names put    new assignedname    priority reserved
reserved_names put    new assignedname    priority reserved
reserved_names put    new assignedname    priority reserved
reserved_names put    new assignedname    priority reserved
reserved_names put    new assignedname    priority reserved
reserved_names put    new assignedname    priority reserved
reserved_names put    new assignedname    priority reserved
// weakly reserved names
reserved_names put    new assignedname    priority weakly_reserved
private static final map<string  assignedname> static_reserved_names   new hashmap<string  assignedname> reserved_names
static
static_reserved_names put    new assignedname    priority reserved
static_reserved_names put    new assignedname    priority reserved
private static final map<string  assignedname> instance_reserved_names   new hashmap<string  assignedname> reserved_names
private static abstract class namedinstaller
static final int static_field   1
static final int static_method   2
static final int instance_field   3
static final int instance_method   4
static final int constructor   5
string name
int type
visibility visibility   visibility public
boolean isprotected
namedinstaller
namedinstaller  string name  int type
this name   name
this type   type
abstract void install rubymodule proxy
// small hack to save a cast later on
boolean haslocalmethod
return true
boolean ispublic
return visibility    visibility public
boolean isprotected
return visibility    visibility protected
private static abstract class fieldinstaller extends namedinstaller
field field
fieldinstaller
fieldinstaller string name  int type  field field
super name type
this field   field
private static class staticfieldgetterinstaller extends fieldinstaller
staticfieldgetterinstaller
staticfieldgetterinstaller string name  field field
super name static_field field
void install rubymodule proxy
if  modifier ispublic field getmodifiers
proxy getsingletonclass   addmethod name  new staticfieldgetter name  proxy  field
private static class staticfieldsetterinstaller extends fieldinstaller
staticfieldsetterinstaller
staticfieldsetterinstaller string name  field field
super name static_field field
void install rubymodule proxy
if  modifier ispublic field getmodifiers
proxy getsingletonclass   addmethod name  new staticfieldsetter name  proxy  field
private static class instancefieldgetterinstaller extends fieldinstaller
instancefieldgetterinstaller
instancefieldgetterinstaller string name  field field
super name instance_field field
void install rubymodule proxy
if  modifier ispublic field getmodifiers
proxy addmethod name  new instancefieldgetter name  proxy  field
private static class instancefieldsetterinstaller extends fieldinstaller
instancefieldsetterinstaller
instancefieldsetterinstaller string name  field field
super name instance_field field
void install rubymodule proxy
if  modifier ispublic field getmodifiers
proxy addmethod name  new instancefieldsetter name  proxy  field
private static abstract class methodinstaller extends namedinstaller
private boolean havelocalmethod
protected list<method> methods
protected list<string> aliases
methodinstaller
methodinstaller string name  int type
super name type
// called only by initializing thread; no synchronization required
void addmethod method method  class<?> javaclass
if  methods    null
methods   new arraylist<method> 4
if   ruby issecurityrestricted
try
method setaccessible true
catch securityexception e
methods add method
havelocalmethod    javaclass    method getdeclaringclass
// called only by initializing thread; no synchronization required
void addalias string alias
if  aliases    null
aliases   new arraylist<string> 4
if   aliases contains alias
aliases add alias
// modified only by addmethod; no synchronization required
@override
boolean haslocalmethod
return havelocalmethod
private static class constructorinvokerinstaller extends methodinstaller
private boolean havelocalconstructor
protected list<constructor> constructors
constructorinvokerinstaller string name
super name static_method
// called only by initializing thread; no synchronization required
void addconstructor constructor ctor  class<?> javaclass
if  constructors    null
constructors   new arraylist<constructor> 4
if   ruby issecurityrestricted
try
ctor setaccessible true
catch securityexception e
constructors add ctor
havelocalconstructor    javaclass    ctor getdeclaringclass
void install rubymodule proxy
if  havelocalconstructor
dynamicmethod method   new constructorinvoker proxy  constructors
proxy addmethod name  method
else
// if there's no constructor, we must prevent construction
proxy addmethod name  new org jruby internal runtime methods javamethod
@override
public irubyobject call threadcontext context  irubyobject self  rubymodule clazz  string name  irubyobject args  block block
throw context getruntime   newtypeerror     clazz
private static class staticmethodinvokerinstaller extends methodinstaller
staticmethodinvokerinstaller string name
super name static_method
void install rubymodule proxy
if  haslocalmethod
rubyclass singleton   proxy getsingletonclass
dynamicmethod method   new staticmethodinvoker singleton  methods
singleton addmethod name  method
if  aliases    null    ispublic
singleton definealiases aliases  this name
aliases   null
private static class instancemethodinvokerinstaller extends methodinstaller
instancemethodinvokerinstaller string name
super name instance_method
void install rubymodule proxy
if  haslocalmethod
dynamicmethod method   new instancemethodinvoker proxy  methods
proxy addmethod name  method
if  aliases    null    ispublic
proxy definealiases aliases  this name
aliases   null
private static class constantfield
static final int constant   modifier final   modifier public   modifier static
final field field
constantfield field field
this field   field
void install final rubymodule proxy
if  proxy getconstantat field getname       null
// todo: catch exception if constant is already set by other
// thread
if   ruby issecurityrestricted
try
field setaccessible true
catch securityexception e
try
proxy setconstant field getname    javautil convertjavatousablerubyobject proxy getruntime    field get null
catch  illegalaccessexception iae
throw proxy getruntime   newtypeerror
iae getmessage
static boolean isconstant final field field
return  field getmodifiers     constant     constant
character isuppercase field getname   charat 0
private final rubymodule java_utilities   getruntime   getjavasupport   getjavautilitiesmodule
private map<string  assignedname> staticassignednames
private map<string  assignedname> instanceassignednames
private map<string  namedinstaller> staticinstallers
private map<string  namedinstaller> instanceinstallers
private constructorinvokerinstaller constructorinstaller
private list<constantfield> constantfields
// caching constructors, as they're accessed for each new instance
private volatile rubyarray constructors
private volatile arraylist<irubyobject> proxyextenders
// proxy module for interfaces
private volatile rubymodule proxymodule
// proxy class for concrete classes.  also used for
// "concrete" interfaces, which is why we have two fields
private volatile rubyclass proxyclass
// readable only by thread building proxy, so don't need to be
// volatile. used to handle recursive calls to getproxyclass/module
// while proxy is being constructed (usually when a constant
// defined by a class is of the same type as that class).
private rubymodule unfinishedproxymodule
private rubyclass unfinishedproxyclass
private final reentrantlock proxylock   new reentrantlock
public rubymodule getproxymodule
// allow proxy to be read without synchronization. if proxy
// is under construction, only the building thread can see it.
rubymodule proxy
if   proxy   proxymodule     null
// proxy is complete, return it
return proxy
else if  proxylock isheldbycurrentthread
// proxy is under construction, building thread can
// safely read non-volatile value
return unfinishedproxymodule
return null
public rubyclass getproxyclass
// allow proxy to be read without synchronization. if proxy
// is under construction, only the building thread can see it.
rubyclass proxy
if   proxy   proxyclass     null
// proxy is complete, return it
return proxy
else if  proxylock isheldbycurrentthread
// proxy is under construction, building thread can
// safely read non-volatile value
return unfinishedproxyclass
return null
public void lockproxy
proxylock lock
public void unlockproxy
proxylock unlock
protected map<string  assignedname> getstaticassignednames
return staticassignednames
protected map<string  assignedname> getinstanceassignednames
return instanceassignednames
private javaclass ruby runtime  class<?> javaclass
super runtime   rubyclass  runtime getjavasupport   getjavaclassclass    javaclass
if  javaclass isinterface
initializeinterface javaclass
else if    javaclass isarray      javaclass isprimitive
// todo: public only?
initializeclass javaclass
@override
public boolean equals object other
return other instanceof javaclass
this getvalue        javaclass other  getvalue
private void initializeinterface class<?> javaclass
map<string  assignedname> staticnames    new hashmap<string  assignedname> static_reserved_names
list<constantfield> constants   new arraylist<constantfield>
map<string  namedinstaller> staticcallbacks   new hashmap<string  namedinstaller>
field fields   getdeclaredfields javaclass
for  int i   fields length    i >  0
field field   fields
if  javaclass    field getdeclaringclass    continue
if  constantfield isconstant field   constants add new constantfield field
int modifiers   field getmodifiers
if  modifier isstatic modifiers   addfield staticcallbacks  staticnames  field  modifier isfinal modifiers   true
// now add all aliases for the static methods (fields) as appropriate
for  map entry<string  namedinstaller> entry   staticcallbacks entryset
if  entry getvalue   type    namedinstaller static_method    entry getvalue   haslocalmethod
assignaliases  methodinstaller entry getvalue    staticnames
this staticassignednames   staticnames
this staticinstallers   staticcallbacks
this constantfields   constants
private void initializeclass class<?> javaclass
class<?> superclass   javaclass getsuperclass
map<string  assignedname> staticnames
map<string  assignedname> instancenames
if  superclass    null
staticnames   new hashmap<string  assignedname>
instancenames   new hashmap<string  assignedname>
else
javaclass superjavaclass   get getruntime   superclass
staticnames   new hashmap<string  assignedname> superjavaclass getstaticassignednames
instancenames   new hashmap<string  assignedname> superjavaclass getinstanceassignednames
staticnames putall static_reserved_names
instancenames putall instance_reserved_names
map<string  namedinstaller> staticcallbacks   new hashmap<string  namedinstaller>
map<string  namedinstaller> instancecallbacks   new hashmap<string  namedinstaller>
list<constantfield> constantfields   new arraylist<constantfield>
setupclassfields javaclass  constantfields  staticnames  staticcallbacks  instancenames  instancecallbacks
setupclassmethods javaclass  staticnames  staticcallbacks  instancenames  instancecallbacks
setupclassconstructors javaclass
this staticassignednames   collections unmodifiablemap staticnames
this instanceassignednames   collections unmodifiablemap instancenames
this staticinstallers   collections unmodifiablemap staticcallbacks
this instanceinstallers   collections unmodifiablemap instancecallbacks
this constantfields   collections unmodifiablelist constantfields
public void setupproxy final rubyclass proxy
assert proxylock isheldbycurrentthread
proxy definefastmethod    __jsend_method
final class<?> javaclass   javaclass
if  javaclass isinterface
setupinterfaceproxy proxy
return
assert this proxyclass    null
this unfinishedproxyclass   proxy
if  javaclass isarray      javaclass isprimitive
// see note below re: 2-field kludge
this proxyclass   proxy
this proxymodule   proxy
return
installclassfields proxy
installclassmethods proxy
installclassconstructors proxy
installclassconstants javaclass  proxy
// fixme: bit of a kludge here (non-interface classes assigned to both
// class and module fields). simplifies proxy extender code, will go away
// when ji is overhauled (and proxy extenders are deprecated).
this proxyclass   proxy
this proxymodule   proxy
applyproxyextenders
// todo: we can probably release our references to the constantfields
// array and static/instance callback hashes at this point.
private static void assignaliases methodinstaller installer  map<string  assignedname> assignednames
string name   installer name
string rubycasedname   javautil getrubycasedname name
addunassignedalias rubycasedname assignednames installer
string javapropertyname   javautil getjavapropertyname name
string rubypropertyname   null
for  method method  installer methods
class<?> argtypes   method getparametertypes
class<?> resulttype   method getreturntype
int argcount   argtypes length
// add property name aliases
if  javapropertyname    null
if  rubycasedname startswith
rubypropertyname   rubycasedname substring 4
if  argcount    0                                      getfoo       > foo
argcount    1    argtypes    int class          getfoo int   > foo int
addunassignedalias javapropertyname assignednames installer
addunassignedalias rubypropertyname assignednames installer
else if  rubycasedname startswith
rubypropertyname   rubycasedname substring 4
if  argcount    1    resulttype    void class          setfoo foo   > foo  foo
addunassignedalias javapropertyname   assignednames installer
addunassignedalias rubypropertyname   assignednames installer
else if  rubycasedname startswith
rubypropertyname   rubycasedname substring 3
if  resulttype    boolean class                        isfoo    > foo  isfoo     > foo
addunassignedalias javapropertyname assignednames installer
addunassignedalias rubypropertyname assignednames installer
// additionally add ?-postfixed aliases to any boolean methods and properties.
if  resulttype    boolean class
// is_something?, contains_thing?
addunassignedalias rubycasedname   assignednames installer
if  rubypropertyname    null
// something?
addunassignedalias rubypropertyname   assignednames installer
private static void addunassignedalias string name  map<string  assignedname> assignednames
methodinstaller installer
if  name    null  return
assignedname assignedname   assignednames get name
// todo: missing additional logic for dealing with conflicting protected fields.
if  priority alias moreimportantthan assignedname
installer addalias name
assignednames put name  new assignedname name  priority alias
else if  priority alias asimportantas assignedname
installer addalias name
private void installclassconstants final class<?> javaclass  final rubyclass proxy
// setup constants for public inner classes
class<?> classes   getclasses javaclass
for  int i   classes length    i >  0
if  javaclass    classes getdeclaringclass
class<?> clazz   classes
string simplename   getsimplename clazz
if  simplename length      0
continue
// ignore bad constant named inner classes pending jruby-697
if  idutil isconstant simplename     proxy getconstantat simplename     null
proxy setconstant simplename  java get_proxy_class java_utilities  get getruntime    clazz
private synchronized void installclassconstructors final rubyclass proxy
if  constructorinstaller    null
constructorinstaller install proxy
constructorinstaller   null
private synchronized void installclassfields final rubyclass proxy
for  constantfield field   constantfields
field install proxy
constantfields   null
private synchronized void installclassmethods final rubyclass proxy
for  namedinstaller installer   staticinstallers values
installer install proxy
staticinstallers   null
for  namedinstaller installer   instanceinstallers values
installer install proxy
instanceinstallers   null
private void setupclassconstructors class<?> javaclass
// todo: protected methods.  this is going to require a rework
// of some of the mechanism.
constructor constructors   getconstructors javaclass
// create constructorinstaller; if there are no constructors, it will disable construction
constructorinstaller   new constructorinvokerinstaller
for  int i   constructors length    i >  0
// we need to collect all methods, though we'll only
// install the ones that are named in this class
constructor ctor   constructors
constructorinstaller addconstructor ctor  javaclass
private void addfield map <string  namedinstaller> callbacks  map<string  assignedname> names
field field  boolean isfinal  boolean isstatic
string name   field getname
if  priority field lessimportantthan names get name    return
names put name  new assignedname name  priority field
callbacks put name  isstatic ? new staticfieldgetterinstaller name  field
new instancefieldgetterinstaller name  field
if   isfinal
string setname   name
callbacks put setname  isstatic ? new staticfieldsetterinstaller setname  field
new instancefieldsetterinstaller setname  field
private void setupclassfields class<?> javaclass  list<constantfield> constantfields  map<string  assignedname> staticnames  map<string  namedinstaller> staticcallbacks  map<string  assignedname> instancenames  map<string  namedinstaller> instancecallbacks
field fields   getfields javaclass
for  int i   fields length    i >  0
field field   fields
if  javaclass    field getdeclaringclass    continue
if  constantfield isconstant field
constantfields add new constantfield field
continue
int modifiers   field getmodifiers
if  modifier isstatic modifiers
addfield staticcallbacks  staticnames  field  modifier isfinal modifiers   true
else
addfield instancecallbacks  instancenames  field  modifier isfinal modifiers   false
private void setupclassmethods class<?> javaclass  map<string  assignedname> staticnames  map<string  namedinstaller> staticcallbacks  map<string  assignedname> instancenames  map<string  namedinstaller> instancecallbacks
// todo: protected methods.  this is going to require a rework of some of the mechanism.
method methods   getmethods javaclass
for  int i   methods length    i >  0
// we need to collect all methods, though we'll only
// install the ones that are named in this class
method method   methods
string name   method getname
if  modifier isstatic method getmodifiers
// install direct java methods with mangled name so 'send' can call them directly.
installstaticmethods staticcallbacks  javaclass  method  name   method_mangle
assignedname assignedname   staticnames get name
if  assignedname    null
staticnames put name  new assignedname name  priority method
else
if  priority method lessimportantthan assignedname   continue
if   priority method asimportantas assignedname
staticcallbacks remove name
staticcallbacks remove name
staticnames put name  new assignedname name  priority method
installstaticmethods staticcallbacks  javaclass  method  name
else
// install direct java methods with mangled name so 'send' can call them directly.
installinstancemethods instancecallbacks  javaclass  method  name   method_mangle
assignedname assignedname   instancenames get name
if  assignedname    null
instancenames put name  new assignedname name  priority method
else
if  priority method lessimportantthan assignedname   continue
if   priority method asimportantas assignedname
instancecallbacks remove name
instancecallbacks remove name
instancenames put name  new assignedname name  priority method
installinstancemethods instancecallbacks  javaclass  method  name
// now iterate over all installers and make sure they also have appropriate aliases
for  map entry<string  namedinstaller> entry   staticcallbacks entryset
if  entry getvalue   type    namedinstaller static_method    entry getvalue   haslocalmethod
assignaliases  methodinstaller  entry getvalue    staticnames
for  map entry<string  namedinstaller> entry   instancecallbacks entryset
if  entry getvalue   type    namedinstaller instance_method    entry getvalue   haslocalmethod
assignaliases  methodinstaller  entry getvalue    instancenames
private void installinstancemethods map<string  namedinstaller> methodcallbacks  class<?> javaclass  method method  string name
methodinstaller invoker    methodinstaller  methodcallbacks get name
if  invoker    null
invoker   new instancemethodinvokerinstaller name
methodcallbacks put name  invoker
invoker addmethod method  javaclass
private void installstaticmethods map<string  namedinstaller> methodcallbacks  class<?> javaclass  method method  string name
methodinstaller invoker    methodinstaller  methodcallbacks get name
if  invoker    null
invoker   new staticmethodinvokerinstaller name
methodcallbacks put name  invoker
invoker addmethod method  javaclass
// old (quasi-deprecated) interface class
private void setupinterfaceproxy final rubyclass proxy
assert javaclass   isinterface
assert proxylock isheldbycurrentthread
assert this proxyclass    null
this proxyclass   proxy
// nothing else to here - the module version will be
// included in the class.
public void setupinterfacemodule final rubymodule module
assert javaclass   isinterface
assert proxylock isheldbycurrentthread
assert this proxymodule    null
this unfinishedproxymodule   module
class<?> javaclass   javaclass
for  constantfield field  constantfields
field install module
for  namedinstaller installer   staticinstallers values
installer install module
// setup constants for public inner classes
class<?> classes   getclasses javaclass
for  int i   classes length    i >  0
if  javaclass    classes getdeclaringclass
class<?> clazz   classes
string simplename   getsimplename clazz
if  simplename length      0  continue
// ignore bad constant named inner classes pending jruby-697
if  idutil isconstant simplename     module getconstantat simplename     null
module const_set getruntime   newstring simplename
java get_proxy_class java_utilities get getruntime   clazz
this proxymodule   module
applyproxyextenders
public void addproxyextender final irubyobject extender
lockproxy
try
if   extender respondsto
throw getruntime   newtypeerror
if  proxymodule    null
if  proxyextenders    null
proxyextenders   new arraylist<irubyobject>
proxyextenders add extender
else
getruntime   getwarnings   warn id proxy_extended_late      this
extendproxy extender
finally
unlockproxy
private void applyproxyextenders
arraylist<irubyobject> extenders
if   extenders   proxyextenders     null
for  irubyobject extender   extenders
extendproxy extender
proxyextenders   null
private void extendproxy irubyobject extender
extender callmethod getruntime   getcurrentcontext       proxymodule
@jrubymethod required   1
public irubyobject extend_proxy irubyobject extender
addproxyextender extender
return getruntime   getnil
public static javaclass get ruby runtime  class<?> klass
javaclass javaclass   runtime getjavasupport   getjavaclassfromcache klass
if  javaclass    null
javaclass   createjavaclass runtime klass
return javaclass
public static rubyarray getrubyarray ruby runtime  class<?> classes
irubyobject javaclasses   new irubyobject
for  int i   classes length    i >  0
javaclasses   get runtime  classes
return runtime newarraynocopy javaclasses
private static synchronized javaclass createjavaclass ruby runtime  class<?> klass
// double-check the cache now that we're synchronized
javaclass javaclass   runtime getjavasupport   getjavaclassfromcache klass
if  javaclass    null
javaclass   new javaclass runtime  klass
runtime getjavasupport   putjavaclassintocache javaclass
return javaclass
public static rubyclass createjavaclassclass ruby runtime  rubymodule javamodule
// fixme: determine if a real allocator is needed here. do people want to extend
// javaclass? do we want them to do that? can you class.new(javaclass)? should
// you be able to?
// todo: not_allocatable_allocator is probably ok here, since we don't intend for people to monkey with
// this type and it can't be marshalled. confirm. jruby-415
rubyclass result   javamodule defineclassunder    javamodule fastgetclass     objectallocator not_allocatable_allocator
result includemodule runtime fastgetmodule
result defineannotatedmethods javaclass class
result getmetaclass   undefinemethod
result getmetaclass   undefinemethod
return result
private static map<string  class> primitive_to_class   new hashmap<string class>
static
primitive_to_class put    byte class
primitive_to_class put    boolean class
primitive_to_class put    short class
primitive_to_class put    char class
primitive_to_class put    int class
primitive_to_class put    long class
primitive_to_class put    float class
primitive_to_class put    double class
public static synchronized javaclass fornameverbose ruby runtime  string classname
class <?> klass   null
if  classname indexof        1    character islowercase classname charat 0
// one word type name that starts lower-case...it may be a primitive type
klass   primitive_to_class get classname
if  klass    null
klass   runtime getjavasupport   loadjavaclassverbose classname
return javaclass get runtime  klass
public static synchronized javaclass fornamequiet ruby runtime  string classname
class klass   runtime getjavasupport   loadjavaclassquiet classname
return javaclass get runtime  klass
@jrubymethod name      required   1  meta   true
public static javaclass for_name irubyobject recv  irubyobject name
return fornameverbose recv getruntime    name asjavastring
private static final callback __jsend_method   new callback
public irubyobject execute irubyobject self  irubyobject args  block block
string name   args asjavastring
dynamicmethod method   self getmetaclass   searchmethod name
int v   method getarity   getvalue
irubyobject newargs   new irubyobject
system arraycopy args  1  newargs  0  newargs length
if v < 0    v     newargs length
return runtimehelpers invoke self getruntime   getcurrentcontext    self  name  newargs  block
else
rubyclass superclass   self getmetaclass   getsuperclass
return runtimehelpers invokeas self getruntime   getcurrentcontext    superclass  self  name  newargs  block
public arity getarity
return arity optional
@jrubymethod
public rubymodule ruby_class
// java.getproxyclass deals with sync issues, so we won't duplicate the logic here
return java getproxyclass getruntime    this
@jrubymethod name
public rubyboolean public_p
return getruntime   newboolean modifier ispublic javaclass   getmodifiers
@jrubymethod name
public rubyboolean protected_p
return getruntime   newboolean modifier isprotected javaclass   getmodifiers
@jrubymethod name
public rubyboolean private_p
return getruntime   newboolean modifier isprivate javaclass   getmodifiers
public class javaclass
return  class  getvalue
@jrubymethod name
public rubyboolean final_p
return getruntime   newboolean modifier isfinal javaclass   getmodifiers
@jrubymethod name
public rubyboolean interface_p
return getruntime   newboolean javaclass   isinterface
@jrubymethod name
public rubyboolean array_p
return getruntime   newboolean javaclass   isarray
@jrubymethod name
public rubyboolean enum_p
return getruntime   newboolean javaclass   isenum
@jrubymethod name
public rubyboolean annotation_p
return getruntime   newboolean javaclass   isannotation
@jrubymethod name
public rubyboolean anonymous_class_p
return getruntime   newboolean javaclass   isanonymousclass
@jrubymethod name
public rubyboolean local_class_p
return getruntime   newboolean javaclass   islocalclass
@jrubymethod name
public rubyboolean member_class_p
return getruntime   newboolean javaclass   ismemberclass
@jrubymethod name
public irubyobject synthetic_p
return getruntime   newboolean javaclass   issynthetic
@jrubymethod name
public rubystring name
return getruntime   newstring javaclass   getname
@jrubymethod
public rubystring inspect
return getruntime   newstring     javaclass   getname
@jrubymethod
public irubyobject canonical_name
string canonicalname   javaclass   getcanonicalname
if  canonicalname    null
return getruntime   newstring canonicalname
return getruntime   getnil
@jrubymethod name
public irubyobject get_package
return java getinstance getruntime    javaclass   getpackage
@jrubymethod
public irubyobject class_loader
return java getinstance getruntime    javaclass   getclassloader
@jrubymethod
public irubyobject protection_domain
return java getinstance getruntime    javaclass   getprotectiondomain
@jrubymethod required   1
public irubyobject resource irubyobject name
return java getinstance getruntime    javaclass   getresource name asjavastring
@jrubymethod required   1
public irubyobject resource_as_stream irubyobject name
return java getinstance getruntime    javaclass   getresourceasstream name asjavastring
@jrubymethod required   1
public irubyobject resource_as_string irubyobject name
inputstream in   javaclass   getresourceasstream name asjavastring
if  in    null  return getruntime   getnil
bytearrayoutputstream out   new bytearrayoutputstream
try
int len
byte buf   new byte
while   len   in read buf   >  0
out write buf  0  len
catch  ioexception e
throw getruntime   newioerrorfromexception e
return getruntime   newstring new bytelist out tobytearray    false
@suppresswarnings
@jrubymethod required   1
public irubyobject annotation irubyobject annoclass
if    annoclass instanceof javaclass
throw getruntime   newtypeerror annoclass  getruntime   getjavasupport   getjavaclassclass
return java getinstance getruntime    javaclass   getannotation   javaclass annoclass  javaclass
@jrubymethod
public irubyobject annotations
// note: intentionally returning the actual array returned from java, rather
// than wrapping it in a rubyarray. wave of the future, when java_class will
// return the actual class, rather than a javaclass wrapper.
return java getinstance getruntime    javaclass   getannotations
@jrubymethod name
public rubyboolean annotations_p
return getruntime   newboolean javaclass   getannotations   length > 0
@jrubymethod
public irubyobject declared_annotations
// see note above re: return type
return java getinstance getruntime    javaclass   getdeclaredannotations
@jrubymethod name
public rubyboolean declared_annotations_p
return getruntime   newboolean javaclass   getdeclaredannotations   length > 0
@suppresswarnings
@jrubymethod name      required   1
public irubyobject annotation_present_p irubyobject annoclass
if    annoclass instanceof javaclass
throw getruntime   newtypeerror annoclass  getruntime   getjavasupport   getjavaclassclass
return getruntime   newboolean javaclass   isannotationpresent   javaclass annoclass  javaclass
@jrubymethod
public irubyobject modifiers
return getruntime   newfixnum javaclass   getmodifiers
@jrubymethod
public irubyobject declaring_class
class<?> clazz   javaclass   getdeclaringclass
if  clazz    null
return javaclass get getruntime    clazz
return getruntime   getnil
@jrubymethod
public irubyobject enclosing_class
return java getinstance getruntime    javaclass   getenclosingclass
@jrubymethod
public irubyobject enclosing_constructor
constructor<?> ctor   javaclass   getenclosingconstructor
if  ctor    null
return new javaconstructor getruntime    ctor
return getruntime   getnil
@jrubymethod
public irubyobject enclosing_method
method meth   javaclass   getenclosingmethod
if  meth    null
return new javamethod getruntime    meth
return getruntime   getnil
@jrubymethod
public irubyobject enum_constants
return java getinstance getruntime    javaclass   getenumconstants
@jrubymethod
public irubyobject generic_interfaces
return java getinstance getruntime    javaclass   getgenericinterfaces
@jrubymethod
public irubyobject generic_superclass
return java getinstance getruntime    javaclass   getgenericsuperclass
@jrubymethod
public irubyobject type_parameters
return java getinstance getruntime    javaclass   gettypeparameters
@jrubymethod
public irubyobject signers
return java getinstance getruntime    javaclass   getsigners
private static string getsimplename class<?> clazz
if  clazz isarray
return getsimplename clazz getcomponenttype
string classname   clazz getname
int len   classname length
int i   classname lastindexof
if  i     1
do
i
while  i < len    character isdigit classname charat i
return classname substring i
return classname substring classname lastindexof      1
@jrubymethod
public rubystring simple_name
return getruntime   newstring getsimplename javaclass
@jrubymethod
public irubyobject superclass
class<?> superclass   javaclass   getsuperclass
if  superclass    null
return getruntime   getnil
return javaclass get getruntime    superclass
@jrubymethod name      required   1
public rubyfixnum op_cmp irubyobject other
if     other instanceof javaclass
throw getruntime   newtypeerror     other gettype
javaclass otherclass    javaclass  other
if  this javaclass      otherclass javaclass
return getruntime   newfixnum 0
if  otherclass javaclass   isassignablefrom this javaclass
return getruntime   newfixnum  1
return getruntime   newfixnum 1
@jrubymethod
public rubyarray java_instance_methods
return java_methods javaclass   getmethods    false
@jrubymethod
public rubyarray declared_instance_methods
return java_methods javaclass   getdeclaredmethods    false
private rubyarray java_methods method methods  boolean isstatic
rubyarray result   getruntime   newarray methods length
for  int i   0  i < methods length  i
method method   methods
if  isstatic    modifier isstatic method getmodifiers
result append javamethod create getruntime    method
return result
@jrubymethod
public rubyarray java_class_methods
return java_methods javaclass   getmethods    true
@jrubymethod
public rubyarray declared_class_methods
return java_methods javaclass   getdeclaredmethods    true
@jrubymethod required   1  rest   true
public javamethod java_method irubyobject args  throws classnotfoundexception
string methodname   args asjavastring
class<?> argumenttypes   buildargumenttypes args
return javamethod create getruntime    javaclass    methodname  argumenttypes
@jrubymethod required   1  rest   true
public javamethod declared_method irubyobject args  throws classnotfoundexception
string methodname   args asjavastring
class<?> argumenttypes   buildargumenttypes args
return javamethod createdeclared getruntime    javaclass    methodname  argumenttypes
@jrubymethod required   1  rest   true
public javacallable declared_method_smart irubyobject args  throws classnotfoundexception
string methodname   args asjavastring
class<?> argumenttypes   buildargumenttypes args
javacallable callable   getmatchingcallable getruntime    javaclass    methodname  argumenttypes
if  callable    null  return callable
throw getruntime   newnameerror     methodname       javaclass   getname
methodname
public static javacallable getmatchingcallable ruby runtime  class<?> javaclass  string methodname  class<?> argumenttypes
if    equals methodname
return javaconstructor getmatchingconstructor runtime  javaclass  argumenttypes
else
// fixme: do we really want 'declared' methods?  includes private/protected, and does _not_
// include superclass methods
return javamethod getmatchingdeclaredmethod runtime  javaclass  methodname  argumenttypes
private class<?> buildargumenttypes irubyobject args  throws classnotfoundexception
if  args length < 1
throw getruntime   newargumenterror args length  1
class<?> argumenttypes   new class
for  int i   1  i < args length  i
javaclass type
if  args instanceof javaclass
type    javaclass args
else if  args respondsto
type    javaclass args callmethod getruntime   getcurrentcontext
else
type   for_name this  args
argumenttypes   type javaclass
return argumenttypes
@jrubymethod
public rubyarray constructors
rubyarray ctors
if   ctors   constructors     null  return ctors
return constructors   buildconstructors javaclass   getconstructors
@jrubymethod
public rubyarray classes
return javaclass getrubyarray getruntime    javaclass   getclasses
@jrubymethod
public rubyarray declared_classes
ruby runtime   getruntime
rubyarray result   runtime newarray
class<?> javaclass   javaclass
try
class<?> classes   javaclass getdeclaredclasses
for  int i   0  i < classes length  i
if  modifier ispublic classes getmodifiers
result append get runtime  classes
catch  securityexception e
// restrictive security policy; no matter, we only want public
// classes anyway
try
class<?> classes   javaclass getclasses
for  int i   0  i < classes length  i
if  javaclass    classes getdeclaringclass
result append get runtime  classes
catch  securityexception e2
// very restrictive policy (disallows member.public)
// we'd never actually get this far in that case
return result
@jrubymethod
public rubyarray declared_constructors
return buildconstructors javaclass   getdeclaredconstructors
private rubyarray buildconstructors constructor<?> constructors
rubyarray result   getruntime   newarray constructors length
for  int i   0  i < constructors length  i
result append new javaconstructor getruntime    constructors
return result
@jrubymethod rest   true
public javaconstructor constructor irubyobject args
try
class<?> parametertypes   buildclassargs args
constructor<?> constructor   javaclass   getconstructor parametertypes
return new javaconstructor getruntime    constructor
catch  nosuchmethodexception nsme
throw getruntime   newnameerror    null
@jrubymethod rest   true
public javaconstructor declared_constructor irubyobject args
try
class<?> parametertypes   buildclassargs args
constructor<?> constructor   javaclass   getdeclaredconstructor  parametertypes
return new javaconstructor getruntime    constructor
catch  nosuchmethodexception nsme
throw getruntime   newnameerror    null
private class<?> buildclassargs irubyobject args
class<?> parametertypes   new class<?>
for  int i   0  i < args length  i
javaclass type
if  args instanceof javaclass
type    javaclass args
else if  args respondsto
type    javaclass args callmethod getruntime   getcurrentcontext
else
type   for_name this  args
parametertypes   type javaclass
return parametertypes
@jrubymethod
public javaclass array_class
return javaclass get getruntime    array newinstance javaclass    0  getclass
@jrubymethod required   1
public javaobject new_array irubyobject lengthargument
if  lengthargument instanceof rubyinteger
// one-dimensional array
int length    int    rubyinteger  lengthargument  getlongvalue
return new javaarray getruntime    array newinstance javaclass    length
else if  lengthargument instanceof rubyarray
// n-dimensional array
list list     rubyarray lengthargument  getlist
int length   list size
if  length    0
throw getruntime   newargumenterror
int dimensions   new int
for  int i   length    i >  0
irubyobject dimensionlength    irubyobject list get i
if     dimensionlength instanceof rubyinteger
throw getruntime
newtypeerror dimensionlength  getruntime   getinteger
dimensions    int    rubyinteger  dimensionlength  getlongvalue
return new javaarray getruntime    array newinstance javaclass    dimensions
else
throw getruntime   newargumenterror
public irubyobject emptyjavaarray threadcontext context
javaarray javaarray   new javaarray getruntime    array newinstance javaclass    0
rubyclass proxyclass    rubyclass java get_proxy_class javaarray  array_class
arrayjavaproxy proxy   new arrayjavaproxy context getruntime    proxyclass
proxy datawrapstruct javaarray
return proxy
public irubyobject javaarraysubarray threadcontext context  javaarray fromarray  int index  int size
int actuallength   array getlength fromarray getvalue
if  index >  actuallength
return context getruntime   getnil
else
if  index   size > actuallength
size   actuallength   index
object newarray   array newinstance javaclass    size
javaarray javaarray   new javaarray getruntime    newarray
system arraycopy fromarray getvalue    index  newarray  0  size
rubyclass proxyclass    rubyclass java get_proxy_class javaarray  array_class
arrayjavaproxy proxy   new arrayjavaproxy context getruntime    proxyclass
proxy datawrapstruct javaarray
return proxy
/**
* contatenate two java arrays into a new one. the component type of the
* additional array must be assignable to the component type of the
* original array.
*
* @param context
* @param original
* @param additional
* @return
*/
public irubyobject concatarrays threadcontext context  javaarray original  javaarray additional
int oldlength    int original length   getlongvalue
int addlength    int additional length   getlongvalue
object newarray   array newinstance javaclass    oldlength   addlength
javaarray javaarray   new javaarray getruntime    newarray
system arraycopy original getvalue    0  newarray  0  oldlength
system arraycopy additional getvalue    0  newarray  oldlength  addlength
rubyclass proxyclass    rubyclass java get_proxy_class javaarray  array_class
arrayjavaproxy proxy   new arrayjavaproxy context getruntime    proxyclass
proxy datawrapstruct javaarray
return proxy
/**
* the slow version for when concatenating a java array of a different type.
*
* @param context
* @param original
* @param additional
* @return
*/
public irubyobject concatarrays threadcontext context  javaarray original  irubyobject additional
int oldlength    int original length   getlongvalue
int addlength    int   rubyfixnum runtimehelpers invoke context  additional      getlongvalue
object newarray   array newinstance javaclass    oldlength   addlength
javaarray javaarray   new javaarray getruntime    newarray
system arraycopy original getvalue    0  newarray  0  oldlength
rubyclass proxyclass    rubyclass java get_proxy_class javaarray  array_class
arrayjavaproxy proxy   new arrayjavaproxy context getruntime    proxyclass
proxy datawrapstruct javaarray
ruby runtime   context getruntime
for  int i   0  i < addlength  i
runtimehelpers invoke context  proxy     runtime newfixnum oldlength   i
runtimehelpers invoke context  additional     runtime newfixnum i
return proxy
public irubyobject javaarrayfromrubyarray threadcontext context  irubyobject fromarray
ruby runtime   context getruntime
if    fromarray instanceof rubyarray
throw runtime newtypeerror fromarray  runtime getarray
rubyarray rubyarray    rubyarray fromarray
javaarray javaarray   new javaarray getruntime    array newinstance javaclass    rubyarray size
if  javaclass   isarray
// if it's an array of arrays, recurse with the component type
for  int i   0  i < rubyarray size    i
javaclass componenttype   component_type
irubyobject wrappedcomponentarray   componenttype javaarrayfromrubyarray context  rubyarray eltinternal i
javaarray setwithexceptionhandling i  javautil unwrapjavaobject wrappedcomponentarray
else
arrayjavaaddons copydatatojavaarray context  rubyarray  javaarray
rubyclass proxyclass    rubyclass java get_proxy_class javaarray  array_class
arrayjavaproxy proxy   new arrayjavaproxy runtime  proxyclass
proxy datawrapstruct javaarray
return proxy
@jrubymethod
public rubyarray fields
return buildfieldresults javaclass   getfields
@jrubymethod
public rubyarray declared_fields
return buildfieldresults javaclass   getdeclaredfields
private rubyarray buildfieldresults field fields
rubyarray result   getruntime   newarray fields length
for  int i   0  i < fields length  i
result append new javafield getruntime    fields
return result
@jrubymethod required   1
public javafield field threadcontext context  irubyobject name
class<?> javaclass   javaclass
ruby runtime   context getruntime
string stringname   name asjavastring
try
return new javafield runtime  javaclass getfield stringname
catch  nosuchfieldexception nsfe
string newname   javautil getjavacasedname stringname
if newname    null
try
return new javafield runtime  javaclass getfield newname
catch  nosuchfieldexception nsfe2
throw undefinedfielderror runtime  javaclass getname    stringname
@jrubymethod required   1
public javafield declared_field threadcontext context  irubyobject name
class<?> javaclass   javaclass
ruby runtime   context getruntime
string stringname   name asjavastring
try
return new javafield runtime  javaclass getdeclaredfield stringname
catch  nosuchfieldexception nsfe
string newname   javautil getjavacasedname stringname
if newname    null
try
return new javafield runtime  javaclass getdeclaredfield newname
catch  nosuchfieldexception nsfe2
throw undefinedfielderror runtime  javaclass getname    stringname
public static raiseexception undefinedfielderror ruby runtime  string javaclassname  string name
return runtime newnameerror     name       javaclassname      name
@jrubymethod
public rubyarray interfaces
return javaclass getrubyarray getruntime    javaclass   getinterfaces
@jrubymethod name
public rubyboolean primitive_p
return getruntime   newboolean isprimitive
@jrubymethod name      required   1
public rubyboolean assignable_from_p irubyobject other
if     other instanceof javaclass
throw getruntime   newtypeerror     other gettype
class<?> otherclass     javaclass  other  javaclass
return assignable javaclass    otherclass  ? getruntime   gettrue     getruntime   getfalse
public static boolean assignable class<?> thisclass  class<?> otherclass
if  thisclass isprimitive      otherclass    void type
thisclass isassignablefrom otherclass
return true
otherclass   javautil primitivetowrapper otherclass
thisclass   javautil primitivetowrapper thisclass
if thisclass isassignablefrom otherclass
return true
if number class isassignablefrom thisclass
if number class isassignablefrom otherclass
return true
if otherclass equals character class
return true
if thisclass equals character class
if number class isassignablefrom otherclass
return true
return false
private boolean isprimitive
return javaclass   isprimitive
@jrubymethod
public javaclass component_type
if    javaclass   isarray
throw getruntime   newtypeerror
return javaclass get getruntime    javaclass   getcomponenttype
private static constructor getconstructors class<?> javaclass
try
return javaclass getconstructors
catch  securityexception e
return new constructor
private static class<?> getclasses class<?> javaclass
try
return javaclass getclasses
catch  securityexception e
return new class<?>
public static field getdeclaredfields class<?> javaclass
try
return javaclass getdeclaredfields
catch  securityexception e
return getfields javaclass
public static field getfields class<?> javaclass
try
return javaclass getfields
catch  securityexception e
return new field
private static method getmethods class<?> javaclass
hashmap<string  method> namemethods   new hashmap<string  method>
// we all all superclasses, but avoid adding superclass methods with same name+signature as subclass methods
// see jruby-3130
for  class c   javaclass  c    null  c   c getsuperclass
try
for  method m   c getdeclaredmethods
int modifiers   m getmodifiers
if  modifier ispublic modifiers     modifier isprotected modifiers
string nameplussig   m getname     codegenutils sigparams m getparametertypes
if  namemethods containskey nameplussig   continue
namemethods put nameplussig  m
catch  securityexception e
arraylist<method> list2   new arraylist<method>
for  map entry<string  method> entry   namemethods entryset
list2 add entry getvalue
return list2 toarray new method