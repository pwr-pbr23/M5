/*
***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2001 alan moore <alan_moore@gmx.net>
* copyright (c) 2001-2002 benoit cerrina <b.cerrina@wanadoo.fr>
* copyright (c) 2001-2004 jan arne petersen <jpetersen@uni-bonn.de>
* copyright (c) 2002-2004 anders bengtsson <ndrsbngtssn@yahoo.se>
* copyright (c) 2004 thomas e enebo <enebo@acm.org>
* copyright (c) 2004-2006 charles o nutter <headius@headius.com>
* copyright (c) 2004 stefan matthias aust <sma@3plus4.de>
* copyright (c) 2005 kiel hodges <jruby-devel@selfsosoft.com>
* copyright (c) 2005 jason voegele <jason@jvoegele.com>
* copyright (c) 2005 tim azzopardi <tim@tigerfive.com>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby
import java io bufferedreader
import java io ioexception
import java io inputstream
import java io inputstreamreader
import java io printstream
import java io file
import java io fileinputstream
import java io filenotfoundexception
import org jruby exceptions mainexitexception
import org jruby exceptions raiseexception
import org jruby exceptions threadkill
import org jruby platform platform
import org jruby runtime threadcontext
import org jruby runtime builtin irubyobject
import org jruby util safepropertyaccessor
import org jruby util simplesampler
/**
* class used to launch the interpreter.
* this is the main class as defined in the jruby.mf manifest.
* it is very basic and does not support yet the same array of switches
* as the c interpreter.
*       usage: java -jar jruby.jar [switches] [rubyfile.rb] [arguments]
*           -e 'command'    one line of script. several -e's allowed. omit [programfile]
* @author  jpetersen
*/
public class main
private boolean hasprintedusage   false
private final rubyinstanceconfig config
public main rubyinstanceconfig config
this config   config
public main final inputstream in  final printstream out  final printstream err
this new rubyinstanceconfig
setinput in
setoutput out
seterror err
public main
this new rubyinstanceconfig
public static void main string args
// ensure we're not running on gcj, since it's not supported and leads to weird errors
if  platform is_gcj
system err println
system exit 1
main main   new main
try
int status   main run args
if  status    0
system exit status
catch  raiseexception re
throw re
catch  throwable t
// print out as a nice ruby backtrace
system err println threadcontext createrawbacktracestringfromthrowable t
while   t   t getcause       null
system err println
system err println threadcontext createrawbacktracestringfromthrowable t
system exit 1
public int run string args
try
config processarguments args
return run
catch  mainexitexception mee
if   mee isaborted
config getoutput   println mee getmessage
if  mee isusageerror
printusage
return mee getstatus
catch  outofmemoryerror oome
// produce a nicer error since rubyists aren't used to seeing this
system gc
string memorymax   safepropertyaccessor getproperty
string message
if  memorymax    null
message       memorymax
config geterror   println     message
config geterror   println
if  config getverbose
config geterror   println
oome printstacktrace
else
config geterror   println
return 1
catch  stackoverflowerror soe
// produce a nicer error since rubyists aren't used to seeing this
system gc
string stackmax   safepropertyaccessor getproperty
string message
if  stackmax    null
message       stackmax
config geterror   println     message
config geterror   println
if  config getverbose
config geterror   println
soe printstacktrace
else
config geterror   println
return 1
catch  unsupportedclassversionerror ucve
config geterror   println
config geterror   println
if  config getverbose
config geterror   println
ucve printstacktrace
else
config geterror   println
return 1
catch  threadkill kill
return 0
public int run
if  config isshowversion
showversion
if  config isshowcopyright
showcopyright
if   config shouldruninterpreter
if  config shouldprintusage
printusage
if  config shouldprintproperties
printproperties
return 0
inputstream in     config getscriptsource
string filename    config displayedfilename
string args   parseshebangoptions in
if  args length > 0
config processarguments args
ruby runtime       ruby newinstance config
// set thread context jruby classloader here, for the main thread
try
thread currentthread   setcontextclassloader runtime getjrubyclassloader
catch  securityexception se
// can't set tc classloader
if  runtime getinstanceconfig   isverbose
config geterror   println
if  in    null
// no script to run, return success below
else if  config isshouldchecksyntax
int status   0
try
runtime parsefrommain in  filename
config getoutput   println     filename
catch  raiseexception re
status    1
if  re getexception   getmetaclass   getbasename   equals
config getoutput   println     re getexception   message runtime getcurrentcontext
else
throw re
if  config getargv   length > 0
for  string arg   config getargv
file argfile   new file arg
if  argfile exists
try
runtime parsefrommain new fileinputstream argfile   arg
config getoutput   println     arg
catch  filenotfoundexception fnfe
status    1
config getoutput   println     arg
catch  raiseexception re
status    1
if  re getexception   getmetaclass   getbasename   equals
config getoutput   println     re getexception   message runtime getcurrentcontext
else
throw re
else
status    1
config getoutput   println     arg
return status
else
long now    1
try
if  config isbenchmarking
now   system currenttimemillis
if  config issamplingenabled
simplesampler startsamplethread
try
runtime runfrommain in  filename
finally
runtime teardown
if  config isbenchmarking
config getoutput   println      system currenttimemillis     now
if  config issamplingenabled
org jruby util simplesampler report
catch  raiseexception rj
rubyexception raisedexception   rj getexception
if  runtime getsystemexit   isinstance raisedexception
irubyobject status   raisedexception callmethod runtime getcurrentcontext
if  status    null     status isnil
return rubynumeric fix2int status
else
runtime printerror raisedexception
return 1
return 0
private void showversion
config getoutput   println config getversionstring
private void showcopyright
config getoutput   println config getcopyrightstring
public void printusage
if   hasprintedusage
config getoutput   print config getbasicusagehelp
hasprintedusage   true
public void printproperties
config getoutput   print config getpropertyhelp
/**
* the intent here is to gather up any options that might have
* been specified in the shebang line and return them so they can
* be merged into the ones specified on the commandline.  this is
* kind of a hopeless task because it's impossible to figure out
* where the command invocation stops and the parameters start.
* we try to work with the common scenarios where /usr/bin/env is
* used to invoke the jruby shell script, and skip any parameters
* it might have.  then we look for the interpreter invokation and
* assume that the binary will have the word "ruby" in the name.
* this is error prone but should cover more cases than the
* previous code.
*/
private string parseshebangoptions inputstream in
bufferedreader reader   null
string result   new string
if  in    null  return result
try
in mark 1024
reader   new bufferedreader new inputstreamreader in      8192
string firstline   reader readline
boolean usesenv   false
if  firstline length   > 2    firstline charat 0          firstline charat 1
string options   firstline substring 2  split
int i
for  i   0  i < options length  i
// skip /usr/bin/env if it's first
if  i    0    options endswith
usesenv   true
continue
// skip any assignments if /usr/bin/env is in play
if  usesenv    options indexof    > 0
continue
// skip any commandline args if /usr/bin/env is in play
if  usesenv    options startswith
continue
string basename    new file options   getname
if  basename indexof    > 0
break
system arraycopy options  i  result  0  options length   i
catch  exception ex
// ignore error
finally
try
in reset
catch  ioexception ex
return result