/*
***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2001 alan moore <alan_moore@gmx.net>
* copyright (c) 2001-2004 jan arne petersen <jpetersen@uni-bonn.de>
* copyright (c) 2002 don schwartz <schwardo@users.sourceforge.net>
* copyright (c) 2002 benoit cerrina <b.cerrina@wanadoo.fr>
* copyright (c) 2002-2004 thomas e enebo <enebo@acm.org>
* copyright (c) 2002-2004 anders bengtsson <ndrsbngtssn@yahoo.se>
* copyright (c) 2004 stefan matthias aust <sma@3plus4.de>
* copyright (c) 2004 charles o nutter <headius@headius.com>
* copyright (c) 2006 miguel covarrubias <mlcovarrubias@gmail.com>
* copyright (c) 2008 joseph lafata <joe@quibb.org>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby
import java math biginteger
import static org jruby util numeric f_expt
import static org jruby util numeric f_mul
import static org jruby util numeric frexp
import static org jruby util numeric ldexp
import java text decimalformat
import java text decimalformatsymbols
import java util locale
import java util regex pattern
import org jcodings specific asciiencoding
import org jruby anno jrubyclass
import org jruby anno jrubymethod
import org jruby runtime classindex
import org jruby runtime objectallocator
import org jruby runtime threadcontext
import org jruby runtime builtin irubyobject
import org jruby runtime marshal marshalstream
import org jruby runtime marshal unmarshalstream
import org jruby util bytelist
import org jruby util sprintf
/**
* a representation of a float object
*/
@jrubyclass name    parent    include
public class rubyfloat extends rubynumeric
public static final int rounds   1
public static final int radix   2
public static final int mant_dig   53
public static final int dig   15
public static final int min_exp    1021
public static final int max_exp   1024
public static final int max_10_exp   308
public static final int min_10_exp    307
public static final double epsilon   2 2204460492503131e 16
public static rubyclass createfloatclass ruby runtime
rubyclass floatc   runtime defineclass    runtime getnumeric    objectallocator not_allocatable_allocator
runtime setfloat floatc
floatc index   classindex float
floatc kindof   new rubymodule kindof
@override
public boolean iskindof irubyobject obj  rubymodule type
return obj instanceof rubyfloat
floatc getsingletonclass   undefinemethod
if   runtime is1_9
floatc includemodule runtime getprecision
// java doubles are 64 bit long:
floatc defineconstant    rubyfixnum newfixnum runtime  rounds
floatc defineconstant    rubyfixnum newfixnum runtime  radix
floatc defineconstant    rubyfixnum newfixnum runtime  mant_dig
floatc defineconstant    rubyfixnum newfixnum runtime  dig
// double.max_exponent since java 1.6
floatc defineconstant    rubyfixnum newfixnum runtime  min_exp
// double.max_exponent since java 1.6
floatc defineconstant    rubyfixnum newfixnum runtime  max_exp
floatc defineconstant    rubyfixnum newfixnum runtime  min_10_exp
floatc defineconstant    rubyfixnum newfixnum runtime  max_10_exp
floatc defineconstant    rubyfloat newfloat runtime  double min_value
floatc defineconstant    rubyfloat newfloat runtime  double max_value
floatc defineconstant    rubyfloat newfloat runtime  epsilon
floatc defineannotatedmethods rubyfloat class
return floatc
private final double value
@override
public int getnativetypeindex
return classindex float
public rubyfloat ruby runtime
this runtime  0 0
public rubyfloat ruby runtime  double value
super runtime  runtime getfloat
this value   value
@override
public class<?> getjavaclass
// this needs to be thought out more along with the changes in rubyfixnum
// since "to object" coercion will generally want to produce the same
// type every time
//        if (value >= float.min_value && value <= float.max_value) {
//            return float.class;
//        }
return double class
/** getter for property value.
* @return value of property value.
*/
public double getvalue
return this value
@override
public double getdoublevalue
return value
@override
public long getlongvalue
return  long  value
@override
public biginteger getbigintegervalue
return biginteger valueof  long value
@override
public rubyfloat converttofloat
return this
protected int comparevalue rubynumeric other
double otherval   other getdoublevalue
return getvalue   > otherval ? 1   getvalue   < otherval ?  1   0
public static rubyfloat newfloat ruby runtime  double value
return new rubyfloat runtime  value
/*  ================
*  instance methods
*  ================
*/
/** rb_flo_induced_from
*
*/
@jrubymethod name      meta   true  compat   compatversion ruby1_8
public static irubyobject induced_from threadcontext context  irubyobject recv  irubyobject number
if  number instanceof rubyfixnum    number instanceof rubybignum    number instanceof rubyrational
return number callmethod context
else if  number instanceof rubyfloat
return number
throw recv getruntime   newtypeerror
number getmetaclass
private final static decimalformat format   new decimalformat
new decimalformatsymbols locale english
/** flo_to_s
*
*/
@jrubymethod name
@override
public irubyobject to_s
ruby runtime   getruntime
if  double isinfinite value   return rubystring newstring runtime  value < 0 ?
if  double isnan value   return rubystring newstring runtime
bytelist buf   new bytelist
sprintf sprintf buf  locale us     this
int e   buf indexof
if  e     1  e   buf realsize
asciiencoding ascii   asciiencoding instance
if   ascii isdigit buf get e   1
buf realsize   0
sprintf sprintf buf  locale us     this
e   buf indexof
if  e     1  e   buf realsize
int p   e
while  buf get p   1          ascii isdigit buf get p   2    p
system arraycopy buf bytes  e  buf bytes  p  buf realsize   e
buf realsize   p   buf realsize   e
return runtime newstring buf
/** flo_coerce
*
*/
@jrubymethod name      required   1
@override
public irubyobject coerce irubyobject other
return getruntime   newarray rubykernel new_float this  other   this
/** flo_uminus
*
*/
@jrubymethod name
public irubyobject op_uminus
return rubyfloat newfloat getruntime     value
/** flo_plus
*
*/
@jrubymethod name      required   1
public irubyobject op_plus threadcontext context  irubyobject other
switch  other getmetaclass   index
case classindex fixnum
case classindex bignum
case classindex float
return rubyfloat newfloat getruntime    value     rubynumeric  other  getdoublevalue
default
return coercebin context     other
/** flo_minus
*
*/
@jrubymethod name      required   1
public irubyobject op_minus threadcontext context  irubyobject other
switch  other getmetaclass   index
case classindex fixnum
case classindex bignum
case classindex float
return rubyfloat newfloat getruntime    value     rubynumeric  other  getdoublevalue
default
return coercebin context     other
/** flo_mul
*
*/
@jrubymethod name      required   1
public irubyobject op_mul threadcontext context  irubyobject other
switch  other getmetaclass   index
case classindex fixnum
case classindex bignum
case classindex float
return rubyfloat newfloat
getruntime    value     rubynumeric  other  getdoublevalue
default
return coercebin context     other
/** flo_div
*
*/
@jrubymethod name      required   1
public irubyobject op_fdiv threadcontext context  irubyobject other       don't override numeric#div
switch  other getmetaclass   index
case classindex fixnum
case classindex bignum
case classindex float
return rubyfloat newfloat getruntime    value     rubynumeric  other  getdoublevalue
default
return coercebin context     other
/** flo_quo
*
*/
@jrubymethod name      compat   compatversion ruby1_9
public irubyobject magnitude threadcontext context  irubyobject other
return callmethod context     other
/** flo_mod
*
*/
@jrubymethod name           required   1
public irubyobject op_mod threadcontext context  irubyobject other
switch  other getmetaclass   index
case classindex fixnum
case classindex bignum
case classindex float
double y     rubynumeric  other  getdoublevalue
// modelled after c ruby implementation (java /,% not same as ruby)
double x   value
double mod   math ieeeremainder x  y
if  y   mod < 0
mod    y
return rubyfloat newfloat getruntime    mod
default
return coercebin context     other
/** flo_divmod
*
*/
@jrubymethod name      required   1
@override
public irubyobject divmod threadcontext context  irubyobject other
switch  other getmetaclass   index
case classindex fixnum
case classindex bignum
case classindex float
double y     rubynumeric  other  getdoublevalue
double x   value
double mod   math ieeeremainder x  y
// mri behavior:
if  double isnan mod
throw getruntime   newfloatdomainerror
double div   math floor x   y
if  y   mod < 0
mod    y
final ruby runtime   getruntime
irubyobject car   dbl2num runtime  div
rubyfloat cdr   rubyfloat newfloat runtime  mod
return rubyarray newarray runtime  car  cdr
default
return coercebin context     other
/** flo_pow
*
*/
@jrubymethod name      required   1
public irubyobject op_pow threadcontext context  irubyobject other
switch  other getmetaclass   index
case classindex fixnum
case classindex bignum
case classindex float
return rubyfloat newfloat getruntime    math pow value    rubynumeric  other
getdoublevalue
default
return coercebin context     other
/** flo_eq
*
*/
@jrubymethod name      required   1
@override
public irubyobject op_equal threadcontext context  irubyobject other
if  double isnan value
return getruntime   getfalse
switch  other getmetaclass   index
case classindex fixnum
case classindex bignum
case classindex float
return rubyboolean newboolean getruntime    value      rubynumeric  other
getdoublevalue
default
// numeric.equal
return super op_num_equal context  other
@override
public final int compareto irubyobject other
switch  other getmetaclass   index
case classindex fixnum
case classindex bignum
case classindex float
return double compare value    rubynumeric  other  getdoublevalue
default
return  int coercecmp getruntime   getcurrentcontext       other  converttointeger   getlongvalue
/** flo_cmp
*
*/
@jrubymethod name      required   1
public irubyobject op_cmp threadcontext context  irubyobject other
switch  other getmetaclass   index
case classindex fixnum
case classindex bignum
if  double isinfinite value
return value > 0 0 ? rubyfixnum one getruntime      rubyfixnum minus_one getruntime
case classindex float
double b     rubynumeric  other  getdoublevalue
return dbl_cmp getruntime    value  b
default
return coercecmp context     other
/** flo_gt
*
*/
@jrubymethod name      required   1
public irubyobject op_gt threadcontext context  irubyobject other
switch  other getmetaclass   index
case classindex fixnum
case classindex bignum
case classindex float
double b     rubynumeric  other  getdoublevalue
return rubyboolean newboolean getruntime     double isnan b     value > b
default
return coercerelop context     other
/** flo_ge
*
*/
@jrubymethod name      required   1
public irubyobject op_ge threadcontext context  irubyobject other
switch  other getmetaclass   index
case classindex fixnum
case classindex bignum
case classindex float
double b     rubynumeric  other  getdoublevalue
return rubyboolean newboolean getruntime     double isnan b     value >  b
default
return coercerelop context     other
/** flo_lt
*
*/
@jrubymethod name      required   1
public irubyobject op_lt threadcontext context  irubyobject other
switch  other getmetaclass   index
case classindex fixnum
case classindex bignum
case classindex float
double b     rubynumeric  other  getdoublevalue
return rubyboolean newboolean getruntime     double isnan b     value < b
default
return coercerelop context     other
/** flo_le
*
*/
@jrubymethod name      required   1
public irubyobject op_le threadcontext context  irubyobject other
switch  other getmetaclass   index
case classindex fixnum
case classindex bignum
case classindex float
double b     rubynumeric  other  getdoublevalue
return rubyboolean newboolean getruntime     double isnan b     value <  b
default
return coercerelop context     other
/** flo_eql
*
*/
@jrubymethod name      required   1
@override
public irubyobject eql_p irubyobject other
if  other instanceof rubyfloat
double b     rubyfloat  other  value
if  double isnan value     double isnan b
return getruntime   getfalse
if  value    b
return getruntime   gettrue
return getruntime   getfalse
/** flo_hash
*
*/
@jrubymethod name
@override
public rubyfixnum hash
return getruntime   newfixnum hashcode
@override
public final int hashcode
long l   double doubletolongbits value
return  int  l ^ l >>> 32
/** flo_fo
*
*/
@jrubymethod name
public irubyobject to_f
return this
/** flo_abs
*
*/
@jrubymethod name
@override
public irubyobject abs threadcontext context
if  double doubletolongbits value  < 0
return rubyfloat newfloat context getruntime    math abs value
return this
/** flo_abs/1.9
*
*/
@jrubymethod name      compat   compatversion ruby1_9
@override
public irubyobject magnitude threadcontext context
return abs context
/** flo_zero_p
*
*/
@jrubymethod name
public irubyobject zero_p
return rubyboolean newboolean getruntime    value    0 0
/** flo_truncate
*
*/
@jrubymethod name
@override
public irubyobject truncate
double f   value
if  f > 0 0  f   math floor f
if  f < 0 0  f   math ceil f
return dbl2num getruntime    f
/** flo_numerator
*
*/
@jrubymethod name      compat   compatversion ruby1_9
@override
public irubyobject numerator threadcontext context
if  double isinfinite value     double isnan value   return this
return super numerator context
/** flo_denominator
*
*/
@jrubymethod name      compat   compatversion ruby1_9
@override
public irubyobject denominator threadcontext context
if  double isinfinite value     double isnan value   return rubyfixnum one context getruntime
return super denominator context
/** float_to_r, float_decode
*
*/
static final int dbl_mant_dig   53
static final int flt_radix   2
@jrubymethod name      compat   compatversion ruby1_9
public irubyobject to_r threadcontext context
longexp   new long
double f   frexp value  exp
f   ldexp f  dbl_mant_dig
long n   exp   dbl_mant_dig
ruby runtime   context getruntime
irubyobject rf   rubynumeric dbl2num runtime  f
irubyobject rn   rubyfixnum newfixnum runtime  n
return f_mul context  rf  f_expt context  rubyfixnum newfixnum runtime  flt_radix   rn
/** floor
*
*/
@jrubymethod name
@override
public irubyobject floor
return dbl2num getruntime    math floor value
/** flo_ceil
*
*/
@jrubymethod name
@override
public irubyobject ceil
return dbl2num getruntime    math ceil value
/** flo_round
*
*/
@jrubymethod name
@override
public irubyobject round
double f   value
if  f > 0 0
f   math floor f   0 5
if  f < 0 0
f   math ceil f   0 5
return dbl2num getruntime    f
/** flo_is_nan_p
*
*/
@jrubymethod name
public irubyobject nan_p
return rubyboolean newboolean getruntime    double isnan value
/** flo_is_infinite_p
*
*/
@jrubymethod name
public irubyobject infinite_p
if  double isinfinite value
return rubyfixnum newfixnum getruntime    value < 0 ?  1   1
return getruntime   getnil
/** flo_is_finite_p
*
*/
@jrubymethod name
public irubyobject finite_p
if  double isinfinite value     double isnan value
return getruntime   getfalse
return getruntime   gettrue
// cruby uses sprintf(buf, "%.*g", float_dig, d);
// this pattern adjusts the output of string.pattern("%g") to mimic
// the c version.
private static final pattern pattern   pattern compile
private static string formatdouble double x
return pattern matcher string format    x   replacefirst
private string marshaldump
if  double isinfinite value   return value < 0 ?
if  double isnan value   return
return formatdouble value
public static void marshalto rubyfloat afloat  marshalstream output  throws java io ioexception
output registerlinktarget afloat
output writestring afloat marshaldump
public static rubyfloat unmarshalfrom unmarshalstream input  throws java io ioexception
rubyfloat result   rubyfloat newfloat input getruntime    org jruby util convert bytelisttodouble input unmarshalstring   false
input registerlinktarget result
return result