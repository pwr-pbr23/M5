/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2004-2005, 2009 charles o nutter <headius@headius.com>
* copyright (c) 2004 thomas e enebo <enebo@acm.org>
* copyright (c) 2004 jan arne petersen <jpetersen@uni-bonn.de>
* copyright (c) 2004 stefan matthias aust <sma@3plus4.de>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby
import java util jar jarfile
import java util zip zipentry
import org jruby anno jrubymethod
import org jruby anno jrubymodule
import org jruby exceptions raiseexception
import org jruby runtime builtin irubyobject
import org jruby util jrubyfile
import static org jruby rubyfile get_path
@jrubymodule name
public class rubyfiletest
public static rubymodule createfiletestmodule ruby runtime
rubymodule filetestmodule   runtime definemodule
runtime setfiletest filetestmodule
filetestmodule defineannotatedmethods rubyfiletest class
return filetestmodule
@jrubymethod name      required   1  module   true
public static irubyobject blockdev_p irubyobject recv  irubyobject filename
ruby runtime   recv getruntime
jrubyfile file   file filename
return runtime newboolean file exists      runtime getposix   stat file getabsolutepath    isblockdev
@jrubymethod name      required   1  module   true
public static irubyobject chardev_p irubyobject recv  irubyobject filename
ruby runtime   recv getruntime
jrubyfile file   file filename
return runtime newboolean file exists      runtime getposix   stat file getabsolutepath    ischardev
@jrubymethod name      required   1  module   true
public static irubyobject directory_p irubyobject recv  irubyobject filename
return directory_p recv getruntime    filename
public static irubyobject directory_p ruby runtime  irubyobject filename
zipentry entry   file_in_archive filename
if  entry    null
return entry isdirectory   ? runtime gettrue     runtime getfalse
jrubyfile file   file filename
return runtime newboolean file exists      runtime getposix   stat file getabsolutepath    isdirectory
@jrubymethod name      required   1  module   true
public static irubyobject executable_p irubyobject recv  irubyobject filename
ruby runtime   recv getruntime
jrubyfile file   file filename
return runtime newboolean file exists      runtime getposix   stat file getabsolutepath    isexecutable
@jrubymethod name      required   1  module   true
public static irubyobject executable_real_p irubyobject recv  irubyobject filename
ruby runtime   recv getruntime
jrubyfile file   file filename
return runtime newboolean file exists      runtime getposix   stat file getabsolutepath    isexecutablereal
@jrubymethod name           required   1  module   true
public static irubyobject exist_p irubyobject recv  irubyobject filename
ruby runtime   recv getruntime
if  ruby issecurityrestricted
return runtime getfalse
if  file_in_archive filename     null
return runtime gettrue
return runtime newboolean file filename  exists
@jrubymethod name      required   1  module   true
public static rubyboolean file_p irubyobject recv  irubyobject filename
ruby runtime   recv getruntime
zipentry entry   file_in_archive filename
if  entry    null
return entry isdirectory   ?
recv getruntime   getfalse
recv getruntime   gettrue
jrubyfile file   file filename
return runtime newboolean file exists      file isfile
@jrubymethod name      required   1  module   true
public static irubyobject grpowned_p irubyobject recv  irubyobject filename
ruby runtime   recv getruntime
jrubyfile file   file filename
return runtime newboolean file exists      runtime getposix   stat file getabsolutepath    isgroupowned
@jrubymethod name      required   2  module   true
public static irubyobject identical_p irubyobject recv  irubyobject filename1  irubyobject filename2
ruby runtime   recv getruntime
jrubyfile file1   file filename1
jrubyfile file2   file filename2
return runtime newboolean file1 exists      file2 exists
runtime getposix   stat file1 getabsolutepath    isidentical runtime getposix   stat file2 getabsolutepath
@jrubymethod name      required   1  module   true
public static irubyobject owned_p irubyobject recv  irubyobject filename
ruby runtime   recv getruntime
jrubyfile file   file filename
return runtime newboolean file exists      runtime getposix   stat file getabsolutepath    isowned
@jrubymethod name      required   1  module   true
public static irubyobject pipe_p irubyobject recv  irubyobject filename
ruby runtime   recv getruntime
jrubyfile file   file filename
return runtime newboolean file exists      runtime getposix   stat file getabsolutepath    isnamedpipe
// we use file test since it is faster than a stat; also euid == uid in java always
@jrubymethod name           required   1  module   true
public static irubyobject readable_p irubyobject recv  irubyobject filename
ruby runtime   recv getruntime
zipentry entry   file_in_archive filename
if  entry    null
return entry isdirectory   ?
recv getruntime   getfalse
recv getruntime   gettrue
jrubyfile file   file filename
return runtime newboolean file exists      file canread
// not exposed by filetest, but so similiar in nature that it is stored here
public static irubyobject rowned_p irubyobject recv  irubyobject filename
ruby runtime   recv getruntime
jrubyfile file   file filename
return runtime newboolean file exists      runtime getposix   stat file getabsolutepath    isrowned
@jrubymethod name      required   1  module   true
public static irubyobject setgid_p irubyobject recv  irubyobject filename
ruby runtime   recv getruntime
jrubyfile file   file filename
return runtime newboolean file exists      runtime getposix   stat file getabsolutepath    issetgid
@jrubymethod name      required   1  module   true
public static irubyobject setuid_p irubyobject recv  irubyobject filename
ruby runtime   recv getruntime
jrubyfile file   file filename
return runtime newboolean file exists      runtime getposix   stat file getabsolutepath    issetuid
@jrubymethod name      required   1  module   true
public static irubyobject size irubyobject recv  irubyobject filename
ruby runtime   recv getruntime
zipentry entry   file_in_archive filename
if  entry    null
return runtime newfixnum entry getsize
jrubyfile file   file filename
if   file exists
nofileerror filename
return runtime newfixnum file length
@jrubymethod name      required   1  module   true
public static irubyobject size_p irubyobject recv  irubyobject filename
ruby runtime   recv getruntime
zipentry entry   file_in_archive filename
if  entry    null
long size   entry getsize
if  size > 0
return runtime newfixnum size
else
return runtime getnil
jrubyfile file   file filename
if   file exists
return runtime getnil
long length   file length
if  length > 0
return runtime newfixnum length
else
return runtime getnil
@jrubymethod name      required   1  module   true
public static irubyobject socket_p irubyobject recv  irubyobject filename
ruby runtime   recv getruntime
jrubyfile file   file filename
return runtime newboolean file exists      runtime getposix   stat file getabsolutepath    issocket
@jrubymethod name      required   1  module   true
public static irubyobject sticky_p irubyobject recv  irubyobject filename
ruby runtime   recv getruntime
jrubyfile file   file filename
return runtime newboolean file exists      runtime getposix   stat file getabsolutepath    issticky
@jrubymethod name      required   1  module   true
public static rubyboolean symlink_p irubyobject recv  irubyobject filename
ruby runtime   recv getruntime
jrubyfile file   file filename
try
// note: we can't use file.exists() to check whether the symlink
// exists or not, because that method returns false for existing
// but broken symlink. so, we try without the existence check,
// but in the try-catch block.
// mri behavior: symlink? on broken symlink should return true.
return runtime newboolean runtime getposix   lstat file getabsolutepath    issymlink
catch  securityexception re
return runtime getfalse
catch  raiseexception re
return runtime getfalse
// we do both writable and writable_real through the same method because
// in our java process effective and real userid will always be the same.
@jrubymethod name           required   1  module   true
public static rubyboolean writable_p irubyobject recv  irubyobject filename
return filename getruntime   newboolean file filename  canwrite
@jrubymethod name      required   1  module   true
public static rubyboolean zero_p irubyobject recv  irubyobject filename
ruby runtime   recv getruntime
zipentry entry   file_in_archive filename
if  entry    null
return runtime newboolean entry getsize      0l
jrubyfile file   file filename
return runtime newboolean file exists      file length      0l
private static jrubyfile file irubyobject pathorfile
ruby runtime   pathorfile getruntime
if  pathorfile instanceof rubyfile
return jrubyfile create runtime getcurrentdirectory      rubyfile  pathorfile  getpath
else
rubystring path   get_path runtime getcurrentcontext    pathorfile
return jrubyfile create runtime getcurrentdirectory    path getunicodevalue
private static zipentry file_in_archive irubyobject path
ruby runtime   path getruntime
if  path instanceof rubyfile
return null
rubystring pathstr   get_path runtime getcurrentcontext    path
string pathjstr   pathstr getunicodevalue
if  pathjstr startswith
string file   pathjstr substring 5
int bang   file indexof
if  bang     1    bang    file length     1
return null
string jar   file substring 0  bang
string after   file substring bang   2
try
jarfile jf   new jarfile jar
zipentry entry   jf getentry after          first try as directory
if  entry    null
entry   jf getentry after      next as regular file
return entry
catch  exception e
return null
private static void nofileerror irubyobject filename
throw filename getruntime   newerrnoenoenterror
filename converttostring