package org jruby ext ffi jffi
import com kenai jffi callingconvention
import org jruby ruby
import org jruby rubyarray
import org jruby rubyclass
import org jruby rubyhash
import org jruby rubymodule
import org jruby rubyproc
import org jruby anno jrubyclass
import org jruby anno jrubymethod
import org jruby ext ffi abstractinvoker
import org jruby ext ffi allocateddirectmemoryio
import org jruby ext ffi directmemoryio
import org jruby ext ffi freedmemoryio
import org jruby ext ffi pointer
import org jruby ext ffi type
import org jruby internal runtime methods dynamicmethod
import org jruby runtime block
import org jruby runtime objectallocator
import org jruby runtime threadcontext
import org jruby runtime builtin irubyobject
@jrubyclass name    parent
public final class function extends org jruby ext ffi abstractinvoker
private final com kenai jffi function function
private final type returntype
private final type parametertypes
private final callingconvention convention
private final irubyobject enums
private volatile boolean autorelease   true
public static rubyclass createfunctionclass ruby runtime  rubymodule module
rubyclass result   module defineclassunder
module fastgetclass
objectallocator not_allocatable_allocator
result defineannotatedmethods abstractinvoker class
result defineannotatedmethods function class
result defineannotatedconstants function class
return result
function ruby runtime  rubyclass klass  directmemoryio address
type returntype  type parametertypes  callingconvention convention  irubyobject enums
super runtime  klass  parametertypes length  address
final com kenai jffi type jffireturntype   ffiutil getffitype returntype
if  jffireturntype    null
throw runtime newargumenterror     returntype
com kenai jffi type jffiparamtypes   new com kenai jffi type
for  int i   0  i < jffiparamtypes length    i
if   jffiparamtypes   ffiutil getffitype parametertypes      null
throw runtime newargumenterror     parametertypes
function   new com kenai jffi function address getaddress    jffireturntype  jffiparamtypes
this parametertypes    type  parametertypes clone
this returntype   returntype
this convention   convention
this enums   enums
// wire up function#call(*args) to use the super-fast native invokers
getsingletonclass   addmethod    createdynamicmethod getsingletonclass
@jrubymethod name          meta   true  required   2  optional   2
public static irubyobject newinstance threadcontext context  irubyobject recv  irubyobject args  block block
directmemoryio fptr   null
rubyhash options   null
object proc   null
int optionsindex   2
type returntype   ffiutil resolvetype context  args
if    args instanceof rubyarray
throw context getruntime   newtypeerror
args getmetaclass   getname
rubyarray paramtypes    rubyarray  args
type parametertypes   new type
for  int i   0  i < parametertypes length    i
parametertypes   ffiutil resolvetype context  paramtypes entry i
if  args length > 2    args instanceof pointer
fptr   new codememoryio context getruntime     pointer  args
optionsindex   3
else if  args length > 2     args instanceof rubyproc    args respondsto
proc   args
optionsindex   3
else if  block isgiven
proc   block
optionsindex   2
else
throw context getruntime   newtypeerror
args getmetaclass   getname
// get the convention from the options hash
string convention
irubyobject enums   null
if  args length > optionsindex    args instanceof rubyhash
options    rubyhash  args
convention   options fastaref context getruntime   newsymbol     asjavastring
enums   options fastaref context getruntime   newsymbol
if  enums    null     enums isnil        enums instanceof rubyhash
throw context getruntime   newtypeerror
enums getmetaclass   getname
callingconvention callconvention     equals convention
? callingconvention stdcall   callingconvention default
if  fptr    null    proc    null
fptr   callbackmanager getinstance   newclosure context getruntime
returntype  parametertypes  proc  callconvention
return new function context getruntime     rubyclass  recv  fptr
returntype  parametertypes  callconvention  enums
@jrubymethod name
public final irubyobject free threadcontext context
if  getmemoryio   instanceof allocateddirectmemoryio
allocateddirectmemoryio  getmemoryio    free
else
throw context getruntime   newruntimeerror
// replace memory object with one that throws an exception on any access
setmemoryio new freedmemoryio context getruntime
return context getruntime   getnil
@jrubymethod name      required   1
public final irubyobject autorelease threadcontext context  irubyobject release
if  autorelease    release istrue      getmemoryio   instanceof allocateddirectmemoryio
allocateddirectmemoryio  getmemoryio    setautorelease autorelease   release istrue
return context getruntime   getnil
@jrubymethod name
public final irubyobject autorelease_p threadcontext context
return context getruntime   newboolean autorelease
@override
public dynamicmethod createdynamicmethod rubymodule module
if  enums    null    enums isnil
return methodfactory createdynamicmethod getruntime    module  function
returntype  parametertypes  convention
else
return defaultmethodfactory getfactory   createmethod module
function  returntype  parametertypes  convention  enums