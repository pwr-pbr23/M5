/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2001 chad fowler <chadfowler@chadfowler.com>
* copyright (c) 2001 alan moore <alan_moore@gmx.net>
* copyright (c) 2001-2004 jan arne petersen <jpetersen@uni-bonn.de>
* copyright (c) 2002-2004 anders bengtsson <ndrsbngtssn@yahoo.se>
* copyright (c) 2002-2005 thomas e enebo <enebo@acm.org>
* copyright (c) 2004 stefan matthias aust <sma@3plus4.de>
* copyright (c) 2005 charles o nutter <headius@headius.com>
* copyright (c) 2007 miguel covarrubias <mlcovarrubias@gmail.com>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby
import java lang reflect invocationhandler
import java lang reflect method
import java lang reflect proxy
import org jruby anno jrubymethod
import org jruby anno jrubyclass
import org jruby exceptions jumpexception
import org jruby internal runtime jumptarget
import org jruby java minijava
import org jruby parser blockstaticscope
import org jruby parser staticscope
import org jruby runtime block
import org jruby runtime objectallocator
import org jruby runtime threadcontext
import org jruby runtime visibility
import org jruby runtime builtin irubyobject
import org jruby runtime marshal datatype
/**
* @author  jpetersen
*/
@jrubyclass name
public class rubyproc extends rubyobject implements jumptarget  datatype
private block block   block null_block
private block type type
private string file
private int line
public rubyproc ruby runtime  rubyclass rubyclass  block type type
super runtime  rubyclass
this type   type
private static objectallocator proc_allocator   new objectallocator
public irubyobject allocate ruby runtime  rubyclass klass
rubyproc instance   rubyproc newproc runtime  block type proc
instance setmetaclass klass
return instance
public static rubyclass createprocclass ruby runtime
rubyclass procclass   runtime defineclass    runtime getobject    proc_allocator
runtime setproc procclass
procclass defineannotatedmethods rubyproc class
return procclass
public block getblock
return block
// proc class
public static rubyproc newproc ruby runtime  block type type
return new rubyproc runtime  runtime getproc    type
public static rubyproc newproc ruby runtime  block block  block type type
rubyproc proc   new rubyproc runtime  runtime getproc    type
proc callinit null_array  block
return proc
/**
* create a new instance of a proc object.  we override this method (from rubyclass)
* since we need to deal with special case of proc.new with no arguments or block arg.  in
* this case, we need to check previous frame for a block to consume.
*/
@jrubymethod name      rest   true  frame   true  meta   true
public static irubyobject newinstance threadcontext context  irubyobject recv  irubyobject args  block block
// no passed in block, lets check next outer frame for one ('proc.new')
if   block isgiven
block   context getpreviousframe   getblock
if  block isgiven      block getprocobject      null
return block getprocobject
irubyobject obj     rubyclass  recv  allocate
obj callmethod context     args  block
return obj
@jrubymethod name      frame   true  visibility   visibility private
public irubyobject initialize threadcontext context  block procblock
if   procblock isgiven
throw getruntime   newargumenterror
if  type    block type lambda    procblock    null
// todo: warn "tried to create proc object without a block"
block   procblock cloneblock
if  type    block type thread
// modify the block with a new backref/lastline-grabbing scope
staticscope oldscope   block getbody   getstaticscope
staticscope newscope   new blockstaticscope oldscope getenclosingscope    oldscope getvariables
newscope setbackreflastlinescope true
newscope setpreviouscrefscope oldscope getpreviouscrefscope
newscope setmodule oldscope getmodule
block getbody   setstaticscope newscope
block type   type
block setprocobject this
file   context getfile
line   context getline
return this
@jrubymethod name
@override
public irubyobject rbclone
rubyproc newproc   new rubyproc getruntime    getruntime   getproc    type
newproc block   getblock
newproc file   file
newproc line   line
// todo: clone_setup here
return newproc
@jrubymethod name
@override
public irubyobject dup
rubyproc newproc   new rubyproc getruntime    getruntime   getproc    type
newproc block   getblock
newproc file   file
newproc line   line
return newproc
@jrubymethod name      required   1
public irubyobject op_equal irubyobject other
if    other instanceof rubyproc   return getruntime   getfalse
if  this    other    this block equals   rubyproc other  block
return getruntime   gettrue
return getruntime   getfalse
@jrubymethod name
@override
public irubyobject to_s
return rubystring newstring getruntime
integer tostring block hashcode    16
file        line   1
@jrubymethod name
public irubyobject binding
return getruntime   newbinding block getbinding
@jrubymethod name           rest   true  frame   true  compat   compatversion ruby1_8
public irubyobject call threadcontext context  irubyobject args
return call context  args  null  block null_block
@jrubymethod name           rest   true  frame   true  compat   compatversion ruby1_9
public irubyobject call19 threadcontext context  irubyobject args  block block
return call context  args  null  block
public irubyobject call threadcontext context  irubyobject args  irubyobject self  block passedblock
assert args    null
block newblock   block cloneblock
jumptarget jumptarget   newblock getbinding   getframe   getjumptarget
try
if  self    null  newblock getbinding   setself self
return newblock call context  args  passedblock
catch  jumpexception breakjump bj
return handlebreakjump getruntime    newblock  bj  jumptarget
catch  jumpexception returnjump rj
return handlereturnjump getruntime    rj  jumptarget
catch  jumpexception retryjump rj
return handleretryjump getruntime    rj
private irubyobject handlebreakjump ruby runtime  block newblock  jumpexception breakjump bj  jumptarget jumptarget
switch newblock type
case lambda  if  bj gettarget      jumptarget
return  irubyobject  bj getvalue
else
throw runtime newlocaljumperror rubylocaljumperror reason break   irubyobject bj getvalue
case proc
if  newblock isescaped
throw runtime newlocaljumperror rubylocaljumperror reason break   irubyobject bj getvalue
else
throw bj
default  throw bj
private irubyobject handlereturnjump ruby runtime  jumpexception returnjump rj  jumptarget jumptarget
object target   rj gettarget
if  target    jumptarget    block type    block type lambda  return  irubyobject  rj getvalue
if  type    block type thread
throw runtime newthreaderror
throw rj
private irubyobject handleretryjump ruby runtime  jumpexception retryjump rj
throw runtime newlocaljumperror rubylocaljumperror reason retry   irubyobject rj getvalue
@jrubymethod name
public rubyfixnum arity
return getruntime   newfixnum block arity   getvalue
@jrubymethod name
public rubyproc to_proc
return this
@override
public irubyobject as class asclass
final ruby ruby   getruntime
if   asclass isinterface
throw ruby newtypeerror asclass getcanonicalname
return minijava javatoruby ruby  proxy newproxyinstance ruby getclassloader    new class  asclass   new invocationhandler
public object invoke object proxy  method method  object args  throws throwable
irubyobject rubyargs   new irubyobject
rubyargs   rubysymbol newsymbol ruby  method getname
for  int i   1  i < rubyargs length  i
rubyargs   minijava javatoruby ruby  args
return minijava rubytojava call ruby getcurrentcontext    rubyargs