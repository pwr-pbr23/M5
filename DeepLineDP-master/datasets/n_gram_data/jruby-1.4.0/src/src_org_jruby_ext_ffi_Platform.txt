/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2008 jruby project
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby ext ffi
import java nio byteorder
import java util regex pattern
import org jruby ruby
import org jruby rubymodule
import org jruby anno jrubymethod
import org jruby runtime threadcontext
import org jruby runtime builtin irubyobject
/**
*
*/
public class platform
public static final cpu cpu   determinecpu
public static final os os   determineos
public static final string name   cpu       os
public static final string libc   determinelibc
public static final string libprefix   os    os windows ?
public static final string libsuffix   determinelibext
public static final int big_endian   4321
public static final int little_endian   1234
public static final int byte_order   byteorder nativeorder   equals byteorder big_endian  ? big_endian   little_endian
protected final int addresssize  longsize
private final long addressmask
protected final pattern libpattern
private final int javaversionmajor
public enum os
darwin
freebsd
netbsd
openbsd
linux
solaris
aix
windows
unknown
@override
public string tostring     return name   tolowercase
public enum cpu
i386
x86_64
powerpc
powerpc64
sparc
sparcv9
s390x
unknown
@override
public string tostring     return name   tolowercase
private static final class singletonholder
private static final platform platform   determineplatform determineos
private static final os determineos
string osname   system getproperty    split    tolowercase
if  osname startswith       osname startswith
return os darwin
else if  osname startswith       osname startswith
return os solaris
for  os os   os values
if  osname startswith os tostring   tolowercase
return os
return os unknown
private static final platform determineplatform os os
switch  os
case darwin
return new darwin
case linux
return new linux
case aix
return new aix
case windows
return new windows
case unknown
return new unsupported os
default
return new default os
private static final cpu determinecpu
string archstring   system getproperty    tolowercase
if    equals archstring       equals archstring       equals archstring
return cpu i386
else if    equals archstring       equals archstring
return cpu x86_64
else if    equals archstring       equals archstring
return cpu powerpc
else if    equals archstring
return cpu powerpc64
else if    equals archstring
return cpu sparc
else if    equals archstring
return cpu sparcv9
else if    equals archstring
return cpu s390x
else
return cpu unknown
private static final string determinelibc
switch  os
case windows
return
case linux
return
case aix
if  integer getinteger       32
return
else
return
default
return
private static final string determinelibext
switch  os
case windows
return
case aix
return
case darwin
return
default
return
protected platform os os
int datamodel   integer getinteger
if  datamodel    32    datamodel    64
switch  cpu
case i386
case powerpc
case sparc
datamodel   32
break
case x86_64
case powerpc64
case sparcv9
case s390x
datamodel   64
break
default
datamodel   0
addresssize   datamodel
addressmask   addresssize    32 ? 0xffffffffl   0xffffffffffffffffl
longsize   os    os windows ? 32   addresssize     windows is llp64
string libpattern   null
switch  os
case windows
libpattern
break
case darwin
libpattern
break
case aix
libpattern
break
default
libpattern
break
libpattern   pattern compile libpattern
int version   5
try
string versionstring   system getproperty
if  versionstring    null
string v   versionstring split
version   integer valueof v
catch  exception ex
version   0
javaversionmajor   version
/**
* gets the current <tt>platform</tt>
*
* @return the current platform.
*/
public static final platform getplatform
return singletonholder platform
/**
* gets the current operating system.
*
* @return a <tt>os</tt> value representing the current operating system.
*/
public final os getos
return os
/**
* gets the current processor architecture the jvm is running on.
*
* @return a <tt>cpu</tt> value representing the current processor architecture.
*/
public final cpu getcpu
return cpu
/**
* gets the version of the java virtual machine (jvm) jffi is running on.
*
* @return a number representing the java version.  e.g. 5 for java 1.5, 6 for java 1.6
*/
public final int getjavamajorversion
return javaversionmajor
public final boolean isbsd
return os    os freebsd    os    os openbsd    os    os netbsd    os    os darwin
public final boolean isunix
return os    os windows
public final boolean issupported
return os    os unknown
cpu    cpu unknown
addresssize    32    addresssize    64
javaversionmajor >  5
public static void createplatformmodule ruby runtime  rubymodule ffi
rubymodule module   ffi definemoduleunder
platform platform   platform getplatform
os os   platform getos
module defineconstant    runtime newfixnum platform addresssize
module defineconstant    runtime newfixnum platform longsize
module defineconstant    runtime newstring os tostring
module defineconstant    runtime newstring platform getcpu   tostring
module defineconstant    runtime newstring platform getname
module defineconstant    runtime newboolean os    os windows
module defineconstant    runtime newboolean platform isbsd
module defineconstant    runtime newboolean os    os freebsd
module defineconstant    runtime newboolean os    os openbsd
module defineconstant    runtime newboolean os    os solaris
module defineconstant    runtime newboolean os    os linux
module defineconstant    runtime newboolean os    os darwin
module defineconstant    runtime newstring libc
module defineconstant    runtime newstring libprefix
module defineconstant    runtime newstring libsuffix
module defineconstant    runtime newfixnum byte_order
module defineconstant    runtime newfixnum big_endian
module defineconstant    runtime newfixnum little_endian
module defineannotatedmethods platform class
@jrubymethod name      module true
public static irubyobject windows_p threadcontext context  irubyobject recv
return context getruntime   newboolean os    os windows
@jrubymethod name      module true
public static irubyobject mac_p threadcontext context  irubyobject recv
return context getruntime   newboolean os    os darwin
@jrubymethod name      module true
public static irubyobject unix_p threadcontext context  irubyobject recv
return context getruntime   newboolean platform getplatform   isunix
@jrubymethod name      module true
public static irubyobject bsd_p threadcontext context  irubyobject recv
return context getruntime   newboolean platform getplatform   isbsd
@jrubymethod name      module true
public static irubyobject linux_p threadcontext context  irubyobject recv
return context getruntime   newboolean os    os linux
@jrubymethod name      module true
public static irubyobject solaris_p threadcontext context  irubyobject recv
return context getruntime   newboolean os    os solaris
/**
* an extension over <code>system.getproperty</code> method.
* handles security restrictions, and returns the default
* value if the access to the property is restricted.
* @param property the system property name.
* @param defvalue the default value.
* @return the value of the system property,
*         or the default value.
*/
public static string getproperty string property  string defvalue
try
return system getproperty property  defvalue
catch  securityexception se
return defvalue
/**
* gets the size of a c 'long' on the native platform.
*
* @return the size of a long in bits
*/
public final int longsize
return addresssize
/**
* gets the size of a c address/pointer on the native platform.
*
* @return the size of a pointer in bits
*/
public final int addresssize
return addresssize
/**
* gets the 32/64bit mask of a c address/pointer on the native platform.
*
* @return the size of a pointer in bits
*/
public final long addressmask
return addressmask
/**
* gets the name of this <tt>platform</tt>.
*
* @return the name of this platform.
*/
public string getname
return cpu       os
public string maplibraryname string libname
//
// a specific version was requested - use as is for search
//
if  libpattern matcher libname  find
return libname
return system maplibraryname libname
private static class supported extends platform
public supported os os
super os
private static class unsupported extends platform
public unsupported os os
super os
private static final class default extends platform
public default os os
super os
/**
* a {@link platform} subclass representing the macos system.
*/
private static final class darwin extends supported
public darwin
super os darwin
@override
public string maplibraryname string libname
//
// a specific version was requested - use as is for search
//
if  libpattern matcher libname  find
return libname
return     libname
/**
* a {@link platform} subclass representing the linux operating system.
*/
private static final class linux extends supported
public linux
super os linux
@override
public string maplibraryname string libname
// older jdk on linux map 'c' to 'libc.so' which doesn't work
return   equals libname       equals libname
?     super maplibraryname libname
/**
* a {@link platform} subclass representing the linux operating system.
*/
private static final class aix extends supported
public aix
super os aix
@override
public string maplibraryname string libname
return   equals libname       equals libname
? libc   super maplibraryname libname
/**
* a {@link platform} subclass representing the windows system.
*/
private static class windows extends supported
public windows
super os windows