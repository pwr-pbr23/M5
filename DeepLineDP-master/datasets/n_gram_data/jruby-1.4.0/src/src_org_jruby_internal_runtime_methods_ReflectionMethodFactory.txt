/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2006 ola bini <ola@ologix.com>
* copyright (c) 2007 peter brant <peter.brant@gmail.com>
* copyright (c) 2008 the jruby community <www.headius.com>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby internal runtime methods
import java lang reflect invocationtargetexception
import java lang reflect method
import java lang reflect modifier
import java util arraylist
import java util list
import org jruby rubymodule
import org jruby anno jrubymethod
import org jruby anno javamethoddescriptor
import org jruby compiler impl standardasmcompiler
import org jruby parser staticscope
import org jruby runtime arity
import org jruby runtime block
import org jruby runtime compiledblockcallback
import org jruby runtime compiledblockcallback19
import org jruby runtime methodfactory
import org jruby runtime threadcontext
import org jruby runtime visibility
import org jruby runtime builtin irubyobject
/**
* this methodfactory uses reflection to provide method handles. reflection is
* typically slower than code-generated handles, but it does provide a simple
* mechanism for binding in environments where code-generation isn't supported.
*
* @see org.jruby.internal.runtime.methods.methodfactory
*/
public class reflectionmethodfactory extends methodfactory
/**
* use reflection to provide a method handle for a compiled ruby method.
*
* @see org.jruby.internal.runtime.methods.methodfactory#getcompiledmethod
*/
public dynamicmethod getcompiledmethodlazily rubymodule implementationclass
string methodname  arity arity  visibility visibility
staticscope scope  object scriptobject  callconfiguration callconfig
return getcompiledmethod implementationclass  methodname  arity  visibility  scope  scriptobject  callconfig
/**
* use reflection to provide a method handle for a compiled ruby method.
*
* @see org.jruby.internal.runtime.methods.methodfactory#getcompiledmethod
*/
public dynamicmethod getcompiledmethod rubymodule implementationclass
string methodname  arity arity  visibility visibility
staticscope scope  object scriptobject  callconfiguration callconfig
try
class scriptclass   scriptobject getclass
method method   scriptclass getmethod methodname  scriptclass  threadcontext class  irubyobject class  irubyobject class  block class
return new reflectedcompiledmethod implementationclass  arity  visibility  scope  scriptobject  method  callconfig
catch  nosuchmethodexception nsme
throw new runtimeexception     methodname       scriptobject getclass
/**
* use reflection to provide a method handle based on an annotated java
* method.
*
* @see org.jruby.internal.runtime.methods.methodfactory#getannotatedmethod
*/
public dynamicmethod getannotatedmethod rubymodule implementationclass  javamethoddescriptor desc
try
if   modifier ispublic desc getdeclaringclass   getmodifiers
system err println     desc declaringclassname
method method   desc getdeclaringclass   getdeclaredmethod desc name  desc getparameterclasses
javamethod ic   new reflectedjavamethod implementationclass  method  desc anno
ic setjavaname method getname
ic setsingleton modifier isstatic method getmodifiers
ic setcallconfig callconfiguration getcallconfigbyanno desc anno
return ic
catch  exception e
throw new runtimeexception e
/**
* use reflection to provide a method handle based on an annotated java
* method.
*
* @see org.jruby.internal.runtime.methods.methodfactory#getannotatedmethod
*/
public dynamicmethod getannotatedmethod rubymodule implementationclass  list<javamethoddescriptor> descs
try
if   modifier ispublic descs get 0  getdeclaringclass   getmodifiers
system err println     descs get 0  declaringclassname
list<method> methods   new arraylist
list<jrubymethod> annotations   new arraylist
for  javamethoddescriptor desc  descs
methods add desc getdeclaringclass   getdeclaredmethod desc name  desc getparameterclasses
annotations add desc anno
method method0   methods get 0
jrubymethod anno0   annotations get 0
javamethod ic   new reflectedjavamultimethod implementationclass  methods  annotations
ic setjavaname method0 getname
ic setsingleton modifier isstatic method0 getmodifiers
ic setcallconfig callconfiguration getcallconfigbyanno anno0
return ic
catch  exception e
throw new runtimeexception e
public compiledblockcallback getblockcallback string method  final object scriptobject
try
class scriptclass   scriptobject getclass
final method blockmethod   scriptclass getmethod method  scriptclass  threadcontext class  irubyobject class  irubyobject class
return new compiledblockcallback
public irubyobject call threadcontext context  irubyobject self  irubyobject args
try
return  irubyobject blockmethod invoke null  scriptobject  context  self  args
catch  illegalaccessexception ex
throw new runtimeexception ex
catch  illegalargumentexception ex
throw new runtimeexception ex
catch  invocationtargetexception ex
throwable cause   ex getcause
if  cause instanceof runtimeexception
throw  runtimeexception  cause
else if  cause instanceof error
throw  error  cause
else
throw new runtimeexception ex
catch  nosuchmethodexception nsme
throw new runtimeexception nsme
public compiledblockcallback19 getblockcallback19 string method  final object scriptobject
try
class scriptclass   scriptobject getclass
final method blockmethod   scriptclass getmethod method  scriptclass  threadcontext class  irubyobject class  irubyobject class  block class
return new compiledblockcallback19
public irubyobject call threadcontext context  irubyobject self  irubyobject args  block block
try
return  irubyobject blockmethod invoke null  scriptobject  context  self  args  block
catch  illegalaccessexception ex
throw new runtimeexception ex
catch  illegalargumentexception ex
throw new runtimeexception ex
catch  invocationtargetexception ex
throwable cause   ex getcause
if  cause instanceof runtimeexception
throw  runtimeexception  cause
else if  cause instanceof error
throw  error  cause
else
throw new runtimeexception ex
catch  nosuchmethodexception nsme
throw new runtimeexception nsme