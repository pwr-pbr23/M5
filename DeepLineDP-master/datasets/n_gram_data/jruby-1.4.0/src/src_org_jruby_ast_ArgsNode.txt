/*
***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2001 chad fowler <chadfowler@chadfowler.com>
* copyright (c) 2001-2002 benoit cerrina <b.cerrina@wanadoo.fr>
* copyright (c) 2001-2002 jan arne petersen <jpetersen@uni-bonn.de>
* copyright (c) 2002 anders bengtsson <ndrsbngtssn@yahoo.se>
* copyright (c) 2004 thomas e enebo <enebo@acm.org>
* copyright (c) 2007 mirko stocker <me@misto.ch>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
////////////////////////////////////////////////////////////////////////////////
// note: this file is generated! do not edit this file!
// generated from: src/org/jruby/ast/argsnode.erb
// using arities: src/org/jruby/ast/argsnode.arities.erb
////////////////////////////////////////////////////////////////////////////////
package org jruby ast
import java util list
import org jruby ruby
import org jruby rubyarray
import org jruby ast visitor nodevisitor
import org jruby javasupport util runtimehelpers
import org jruby lexer yacc isourceposition
import org jruby runtime arity
import org jruby runtime block
import org jruby runtime dynamicscope
import org jruby runtime threadcontext
import org jruby runtime builtin irubyobject
/**
* represents the argument declarations of a method.  the fields:
* foo(p1, ..., pn, o1 = v1, ..., on = v2, *r, q1, ..., qn)
*
* p1...pn = pre arguments
* o1...on = optional arguments
* r       = rest argument
* q1...qn = post arguments (only in 1.9)
*/
public class argsnode extends node
private final listnode pre
private final int precount
private final listnode optargs
protected final argumentnode restargnode
protected final int restarg
private final blockargnode blockargnode
protected arity arity
private final int requiredargscount
protected final boolean hasoptargs
protected final boolean hasmasgnargs
protected int maxargscount
protected final boolean issimple
// only in ruby 1.9 methods
private final listnode post
private final int postcount
private final int postindex
/**
*
* @param optionalarguments  node describing the optional arguments
* 				this block will contain assignments to locals (lasgnnode)
* @param restarguments  index of the rest argument in the local table
* 				(the array argument prefixed by a * which collects
* 				all additional params)
* 				or -1 if there is none.
* @param argscount number of regular arguments
* @param restargnode the rest argument (*args).
* @param blockargnode an optional block argument (&amp;arg).
**/
public argsnode isourceposition position  listnode pre  listnode optionalarguments
restargnode rest  listnode post  blockargnode blockargnode
super position
this pre   pre
this precount   pre    null ? 0   pre size
this post   post
this postcount   post    null ? 0   post size
this postindex   rest    null ? 0   rest getindex     1
this optargs   optionalarguments
this restarg   rest    null ?  1   rest getindex
this restargnode   rest
this blockargnode   blockargnode
this requiredargscount   precount   postcount
this hasoptargs   getoptargs      null
this hasmasgnargs   hasmasgnargs
this maxargscount   getrestarg   >  0 ?  1   getrequiredargscount     getoptionalargscount
this arity   calculatearity
this issimple     hasmasgnargs    hasoptargs    restarg >  0    postcount > 0
public nodetype getnodetype
return nodetype argsnode
protected arity calculatearity
if  restargnode instanceof unnamedrestargnode  return arity optional
if  getoptargs      null    getrestarg   >  0  return arity required getrequiredargscount
return arity createarity getrequiredargscount
protected boolean hasmasgnargs
if  precount > 0  for  node node   pre childnodes
if  node instanceof assignablenode  return true
if  postcount > 0  for  node node   post childnodes
if  node instanceof assignablenode  return true
return false
/**
* accept for the visitor pattern.
* @param ivisitor the visitor
**/
public object accept nodevisitor ivisitor
return ivisitor visitargsnode this
/**
* gets the required arguments at the beginning of the argument definition
*/
public listnode getpre
return pre
@deprecated
public listnode getargs
return pre
public arity getarity
return arity
public int getrequiredargscount
return requiredargscount
public int getoptionalargscount
return optargs    null ? 0   optargs size
public listnode getpost
return post
public int getmaxargumentscount
return maxargscount
/**
* gets the optargs.
* @return returns a listnode
*/
public listnode getoptargs
return optargs
/**
* gets the restarg.
* @return returns a int
*/
public int getrestarg
return restarg
/**
* gets the restargnode.
* @return returns an argumentnode
*/
public argumentnode getrestargnode
return restargnode
@deprecated
public blockargnode getblockargnode
return blockargnode
/**
* gets the explicit block argument of the parameter list (&block).
*
* @return returns a blockargnode
*/
public blockargnode getblock
return blockargnode
public int getpostcount
return postcount
public int getpostindex
return postindex
public int getprecount
return precount
public void prepare threadcontext context  ruby runtime  irubyobject self  irubyobject args  block block
dynamicscope scope   context getcurrentscope
// bind 'normal' parameter values to the local scope for this method.
if   hasmasgnargs
// no arg grouping, just use bulk assignment methods
if  precount > 0  scope setargvalues args  math min args length  precount
if  postcount > 0  scope setendargvalues args  postindex  postcount
else
masgnawareargassign context  runtime  self  args  block  scope
// optargs and restargs require more work, so isolate them and arraylist creation here
if  hasoptargs    restarg     1  prepareoptorrestargs context  runtime  scope  self  args
if  getblock      null  processblockarg scope  runtime  block
private void masgnawareargassign threadcontext context  ruby runtime  irubyobject self  irubyobject args  block block  dynamicscope scope
// arg grouping, use slower arg walking logic
if  precount > 0
int size   pre size
for  int i   0  i < size  i
node next   pre get i
if  next instanceof assignablenode
assignablenode next  assign runtime  context  self  args  block  false
else
scope setvalue i  args  0
if  postcount > 0
int size   post size
int argslength   args length
for  int i   0  i < size  i
node next   post get i
if  next instanceof assignablenode
assignablenode next  assign runtime  context  self  args  block  false
else
scope setvalue i   postindex  args  0
public void prepare threadcontext context  ruby runtime  irubyobject self  block block
dynamicscope scope   context getcurrentscope
if  issimple
scope setargvalues
else
prepare context  runtime  self  irubyobject null_array  block
if  getblock      null  processblockarg scope  runtime  block
public void prepare threadcontext context  ruby runtime  irubyobject self  irubyobject arg0  block block
dynamicscope scope   context getcurrentscope
if  issimple
scope setargvalues arg0
else
prepare context  runtime  self  new irubyobject  arg0   block
if  getblock      null  processblockarg scope  runtime  block
public void prepare threadcontext context  ruby runtime  irubyobject self  irubyobject arg0  irubyobject arg1  block block
dynamicscope scope   context getcurrentscope
if  issimple
scope setargvalues arg0  arg1
else
prepare context  runtime  self  new irubyobject  arg0  arg1   block
if  getblock      null  processblockarg scope  runtime  block
public void prepare threadcontext context  ruby runtime  irubyobject self  irubyobject arg0  irubyobject arg1  irubyobject arg2  block block
dynamicscope scope   context getcurrentscope
if  issimple
scope setargvalues arg0  arg1  arg2
else
prepare context  runtime  self  new irubyobject  arg0  arg1  arg2   block
if  getblock      null  processblockarg scope  runtime  block
public void prepare threadcontext context  ruby runtime  irubyobject self  irubyobject arg0  irubyobject arg1  irubyobject arg2  irubyobject arg3  block block
dynamicscope scope   context getcurrentscope
if  issimple
scope setargvalues arg0  arg1  arg2  arg3
else
prepare context  runtime  self  new irubyobject  arg0  arg1  arg2  arg3   block
if  getblock      null  processblockarg scope  runtime  block
public void prepare threadcontext context  ruby runtime  irubyobject self  irubyobject arg0  irubyobject arg1  irubyobject arg2  irubyobject arg3  irubyobject arg4  block block
dynamicscope scope   context getcurrentscope
if  issimple
scope setargvalues arg0  arg1  arg2  arg3  arg4
else
prepare context  runtime  self  new irubyobject  arg0  arg1  arg2  arg3  arg4   block
if  getblock      null  processblockarg scope  runtime  block
public void prepare threadcontext context  ruby runtime  irubyobject self  irubyobject arg0  irubyobject arg1  irubyobject arg2  irubyobject arg3  irubyobject arg4  irubyobject arg5  block block
dynamicscope scope   context getcurrentscope
if  issimple
scope setargvalues arg0  arg1  arg2  arg3  arg4  arg5
else
prepare context  runtime  self  new irubyobject  arg0  arg1  arg2  arg3  arg4  arg5   block
if  getblock      null  processblockarg scope  runtime  block
public void prepare threadcontext context  ruby runtime  irubyobject self  irubyobject arg0  irubyobject arg1  irubyobject arg2  irubyobject arg3  irubyobject arg4  irubyobject arg5  irubyobject arg6  block block
dynamicscope scope   context getcurrentscope
if  issimple
scope setargvalues arg0  arg1  arg2  arg3  arg4  arg5  arg6
else
prepare context  runtime  self  new irubyobject  arg0  arg1  arg2  arg3  arg4  arg5  arg6   block
if  getblock      null  processblockarg scope  runtime  block
public void prepare threadcontext context  ruby runtime  irubyobject self  irubyobject arg0  irubyobject arg1  irubyobject arg2  irubyobject arg3  irubyobject arg4  irubyobject arg5  irubyobject arg6  irubyobject arg7  block block
dynamicscope scope   context getcurrentscope
if  issimple
scope setargvalues arg0  arg1  arg2  arg3  arg4  arg5  arg6  arg7
else
prepare context  runtime  self  new irubyobject  arg0  arg1  arg2  arg3  arg4  arg5  arg6  arg7   block
if  getblock      null  processblockarg scope  runtime  block
public void prepare threadcontext context  ruby runtime  irubyobject self  irubyobject arg0  irubyobject arg1  irubyobject arg2  irubyobject arg3  irubyobject arg4  irubyobject arg5  irubyobject arg6  irubyobject arg7  irubyobject arg8  block block
dynamicscope scope   context getcurrentscope
if  issimple
scope setargvalues arg0  arg1  arg2  arg3  arg4  arg5  arg6  arg7  arg8
else
prepare context  runtime  self  new irubyobject  arg0  arg1  arg2  arg3  arg4  arg5  arg6  arg7  arg8   block
if  getblock      null  processblockarg scope  runtime  block
public void prepare threadcontext context  ruby runtime  irubyobject self  irubyobject arg0  irubyobject arg1  irubyobject arg2  irubyobject arg3  irubyobject arg4  irubyobject arg5  irubyobject arg6  irubyobject arg7  irubyobject arg8  irubyobject arg9  block block
dynamicscope scope   context getcurrentscope
if  issimple
scope setargvalues arg0  arg1  arg2  arg3  arg4  arg5  arg6  arg7  arg8  arg9
else
prepare context  runtime  self  new irubyobject  arg0  arg1  arg2  arg3  arg4  arg5  arg6  arg7  arg8  arg9   block
if  getblock      null  processblockarg scope  runtime  block
public void checkargcount ruby runtime  int argslength
//        arity.checkarity(runtime, argslength);
arity checkargumentcount runtime  argslength  requiredargscount  maxargscount
protected void prepareoptorrestargs threadcontext context  ruby runtime  dynamicscope scope
irubyobject self  irubyobject args
preparerestarg context  runtime  scope  args  prepareoptionalarguments context  runtime  self  args
protected int prepareoptionalarguments threadcontext context  ruby runtime  irubyobject self  irubyobject args
return hasoptargs ? assignoptargs args  runtime  context  self  precount    precount
protected void preparerestarg threadcontext context  ruby runtime  dynamicscope scope
irubyobject args  int givenargscount
if  restarg >  0
int sizeofrestarg   args length   postcount   givenargscount
if  sizeofrestarg <  0       no more values to stick in rest arg
scope setvalue restarg  rubyarray newarray runtime   0
else
scope setvalue restarg  rubyarray newarraynocopy runtime  args  givenargscount  sizeofrestarg   0
protected int assignoptargs irubyobject args  ruby runtime  threadcontext context  irubyobject self  int givenargscount
// assign given optional arguments to their variables
int j   0
for  int i   precount  i < args length   postcount    j < optargs size    i    j
// in-frame evalstate should already have receiver set as self, continue to use it
optargs get j  assign runtime  context  self  args  block null_block  true
givenargscount
// assign the default values, adding to the end of allargs
for  int i   0  j < optargs size    i    j
optargs get j  interpret runtime  context  self  block null_block
return givenargscount
protected void processblockarg dynamicscope scope  ruby runtime  block block
scope setvalue getblock   getcount    runtimehelpers processblockargument runtime  block   0
public list<node> childnodes
if  post    null  return node createlist pre  optargs  restargnode  post  blockargnode
return node createlist pre  optargs  restargnode  blockargnode