/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2008 jruby project
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby ext ffi io
import org jruby ruby
import org jruby rubyclass
import org jruby rubyio
import org jruby rubymodule
import org jruby rubynumeric
import org jruby anno jrubyclass
import org jruby anno jrubymethod
import org jruby ext ffi factory
import org jruby runtime objectallocator
import org jruby runtime threadcontext
import org jruby runtime builtin irubyobject
import org jruby util io channeldescriptor
import org jruby util io channelstream
import org jruby util io invalidvalueexception
import org jruby util io modeflags
/**
* an io implementation that reads/writes to a native file descriptor.
*/
@jrubyclass name     filedescriptorio class_name  parent
public class filedescriptorio extends rubyio
public static final string class_name
private static final class allocator implements objectallocator
public final irubyobject allocate ruby runtime  rubyclass klass
return new filedescriptorio runtime  klass
private static final objectallocator instance   new allocator
public filedescriptorio ruby runtime  rubyclass klass
super runtime  klass
public filedescriptorio ruby runtime  irubyobject fd
super runtime  runtime fastgetmodule    fastgetclass class_name
modeflags modes
try
modes   new modeflags modeflags rdwr
catch  invalidvalueexception ex
throw new runtimeexception ex
openfile setmainstream new channelstream getruntime
new channeldescriptor new filedescriptorbytechannel rubynumeric fix2int fd
getnewfileno    modes  new java io filedescriptor
openfile setpipestream openfile getmainstream
openfile setmode modes getopenfileflags
openfile getmainstream   setsync true
public static rubyclass createfiledescriptorioclass ruby runtime  rubymodule module
rubyclass result   runtime defineclassunder class_name  runtime fastgetclass
allocator instance  module
result defineannotatedmethods filedescriptorio class
result defineannotatedconstants filedescriptorio class
return result
@jrubymethod name      meta   true
public static filedescriptorio newinstance threadcontext context  irubyobject recv  irubyobject fd
return new filedescriptorio context getruntime    fd
@jrubymethod name      required   1  meta   true
public static rubyio wrap threadcontext context  irubyobject recv  irubyobject fd
return new filedescriptorio context getruntime    fd