package org jruby ext ffi jffi
import com kenai jffi callingconvention
import com kenai jffi closure
import com kenai jffi closuremanager
import java lang ref weakreference
import java util collections
import java util map
import java util weakhashmap
import java util concurrent atomic atomicboolean
import org jruby ruby
import org jruby rubyclass
import org jruby rubymodule
import org jruby rubynumeric
import org jruby rubyobject
import org jruby rubyproc
import org jruby anno jrubyclass
import org jruby ext ffi allocateddirectmemoryio
import org jruby ext ffi callbackinfo
import org jruby ext ffi invalidmemoryio
import org jruby ext ffi memoryio
import org jruby ext ffi platform
import org jruby ext ffi pointer
import org jruby ext ffi type
import org jruby ext ffi util
import org jruby runtime block
import org jruby runtime objectallocator
import org jruby runtime builtin irubyobject
/**
* manages callback instances for the low level ffi backend.
*/
public class callbackmanager extends org jruby ext ffi callbackmanager
private static final int long_size   platform getplatform   longsize
private static final string callback_id
/** holder for the single instance of callbackmanager */
private static final class singletonholder
static final callbackmanager instance   new callbackmanager
/**
* gets the singleton instance of callbackmanager
*/
public static final callbackmanager getinstance
return singletonholder instance
/**
* creates a callback class for a ruby runtime
*
* @param runtime the runtime to create the class for
* @param module the module to place the class in
*
* @return the newly created ruby class
*/
public static rubyclass createcallbackclass ruby runtime  rubymodule module
rubyclass cbclass   module defineclassunder    module fastgetclass
objectallocator not_allocatable_allocator
cbclass defineannotatedmethods callback class
cbclass defineannotatedconstants callback class
return cbclass
public final org jruby ext ffi pointer getcallback ruby runtime  callbackinfo cbinfo  object proc
return proc instanceof rubyobject
? getcallback runtime  cbinfo   rubyobject  proc
newcallback runtime  cbinfo  proc
/**
* gets a callback object conforming to the signature contained in the
* <tt>callbackinfo</tt> for the ruby <tt>proc</tt> or <tt>block</tt> instance.
*
* @param runtime the ruby runtime the callback is attached to
* @param cbinfo the signature of the native callback
* @param proc the ruby object to call when the callback is invoked.
* @return a native value returned to the native caller.
*/
public final org jruby ext ffi pointer getcallback ruby runtime  callbackinfo cbinfo  rubyobject proc
if  proc instanceof function
return  function  proc
synchronized  proc
object existing   proc fastgetinternalvariable callback_id
if  existing instanceof callback      callback  existing  cbinfo    cbinfo
return  callback  existing
else if  existing instanceof map
map m    map  existing
callback cb    callback  m get proc
if  cb    null
return cb
callback cb   newcallback runtime  cbinfo  proc
if  existing    null
rubyobject  proc  fastsetinternalvariable callback_id  cb
else
map<callbackinfo  callback> m   existing instanceof map
?  map<callbackinfo  callback>  existing
collections synchronizedmap new weakhashmap<callbackinfo  callback>
m put cbinfo  cb
m put   callback  existing  cbinfo   callback  existing
rubyobject  proc  fastsetinternalvariable callback_id  m
return cb
/**
* gets a callback object conforming to the signature contained in the
* <tt>callbackinfo</tt> for the ruby <tt>proc</tt> or <tt>block</tt> instance.
*
* @param runtime the ruby runtime the callback is attached to
* @param cbinfo the signature of the native callback
* @param proc the ruby <tt>block</tt> object to call when the callback is invoked.
* @return a native value returned to the native caller.
*/
final callback getcallback ruby runtime  callbackinfo cbinfo  block proc
return newcallback runtime  cbinfo  proc
private final callback newcallback ruby runtime  callbackinfo cbinfo  object proc
closureinfo info   getclosureinfo runtime  cbinfo
weakrefcallbackproxy cbproxy   new weakrefcallbackproxy runtime  info  proc
closure handle handle   closuremanager getinstance   newclosure cbproxy
info ffireturntype  info ffiparametertypes  info convention
return new callback runtime  handle  cbinfo
private final closureinfo getclosureinfo ruby runtime  callbackinfo cbinfo
object info   cbinfo getprovidercallbackinfo
if  info    null    info instanceof closureinfo
return  closureinfo  info
cbinfo setprovidercallbackinfo info   newclosureinfo runtime  cbinfo
return  closureinfo  info
private final closureinfo newclosureinfo ruby runtime  callbackinfo cbinfo
return new closureinfo runtime  cbinfo getreturntype    cbinfo getparametertypes    callingconvention default
/**
*/
final callbackmemoryio newclosure ruby runtime  type returntype  type parametertypes
object proc  callingconvention convention
closureinfo info   new closureinfo runtime  returntype  parametertypes  convention
final callbackproxy cbproxy   new callbackproxy runtime  info  proc
final closure handle handle   closuremanager getinstance   newclosure cbproxy
info ffireturntype  info ffiparametertypes  info convention
return new callbackmemoryio runtime  handle
/**
* holds the jffi return type and parameter types to avoid
*/
private static class closureinfo
final callingconvention convention
final type returntype
final type parametertypes
final com kenai jffi type ffiparametertypes
final com kenai jffi type ffireturntype
public closureinfo ruby runtime  type returntype  type paramtypes  callingconvention convention
this convention   convention
ffiparametertypes   new com kenai jffi type
for  int i   0  i < paramtypes length    i
if   isparametertypevalid paramtypes
throw runtime newargumenterror     paramtypes
ffiparametertypes   ffiutil getffitype paramtypes getnativetype
if   isreturntypevalid returntype
runtime newargumenterror     returntype
this returntype   returntype
this parametertypes    type  paramtypes clone
this ffireturntype   ffiutil getffitype returntype getnativetype
/**
* wrapper around the native callback, to represent it as a ruby object
*/
@jrubyclass name      parent
static class callback extends pointer
private final callbackinfo cbinfo
callback ruby runtime  closure handle handle  callbackinfo cbinfo
super runtime  runtime fastgetmodule    fastgetclass
new callbackmemoryio runtime  handle   long max_value
this cbinfo   cbinfo
void dispose
memoryio mem   getmemoryio
if  mem instanceof callbackmemoryio
callbackmemoryio  mem  free
/**
* wraps a ruby proc in a jffi closure
*/
private static abstract class abstractcallbackproxy implements closure
protected final ruby runtime
protected final closureinfo closureinfo
abstractcallbackproxy ruby runtime  closureinfo closureinfo
this runtime   runtime
this closureinfo   closureinfo
protected final void invoke closure buffer buffer  object recv
irubyobject params   new irubyobject
for  int i   0  i < params length    i
params   fromnative runtime  closureinfo parametertypes  buffer  i
irubyobject retval
if  recv instanceof rubyproc
retval     rubyproc  recv  call runtime getcurrentcontext    params
else if  recv instanceof block
retval     block  recv  call runtime getcurrentcontext    params
else
retval     irubyobject  recv  callmethod runtime getcurrentcontext       params
setreturnvalue runtime  closureinfo returntype  buffer  retval
/**
* wraps a ruby proc in a jffi closure
*/
private static final class weakrefcallbackproxy extends abstractcallbackproxy implements closure
private final weakreference<object> proc
weakrefcallbackproxy ruby runtime  closureinfo closureinfo  object proc
super runtime  closureinfo
this proc   new weakreference<object> proc
public void invoke closure buffer buffer
object recv   proc get
if  recv    null
buffer setintreturn 0
return
invoke buffer  recv
/**
* wraps a ruby proc in a jffi closure
*/
private static final class callbackproxy extends abstractcallbackproxy implements closure
private final object proc
callbackproxy ruby runtime  closureinfo closureinfo  object proc
super runtime  closureinfo
this proc   proc
public void invoke closure buffer buffer
invoke buffer  proc
/**
* an implementation of memoryio that throws exceptions on any attempt to read/write
* the callback memory area (which is code).
*
* this also keeps the callback alive via the handle member, as long as this
* callbackmemoryio instance is contained in a valid callback pointer.
*/
static final class callbackmemoryio extends invalidmemoryio implements allocateddirectmemoryio
private final closure handle handle
private final atomicboolean released   new atomicboolean false
public callbackmemoryio ruby runtime   closure handle handle
super runtime
this handle   handle
public final long getaddress
return handle getaddress
public final boolean isnull
return false
public final boolean isdirect
return true
public void free
if  released getandset true
throw runtime newruntimeerror
handle free
public void setautorelease boolean autorelease
handle setautorelease autorelease
/**
* extracts the primitive value from a ruby object.
* this is similar to util.longvalue(), except it won't throw exceptions for
* invalid values.
*
* @param value the ruby object to convert
* @return a java long value.
*/
private static final long longvalue irubyobject value
if  value instanceof rubynumeric
return   rubynumeric  value  getlongvalue
else if  value isnil
return 0l
return 0
/**
* extracts the primitive value from a ruby object.
* this is similar to util.longvalue(), except it won't throw exceptions for
* invalid values.
*
* @param value the ruby object to convert
* @return a java long value.
*/
private static final long addressvalue irubyobject value
if  value instanceof rubynumeric
return   rubynumeric  value  getlongvalue
else if  value instanceof pointer
return   pointer  value  getaddress
else if  value isnil
return 0l
return 0
/**
* converts a ruby return value into a native callback return value.
*
* @param runtime the ruby runtime the callback is attached to
* @param type the ruby type of the return value
* @param buffer the native parameter buffer
* @param value the ruby value
*/
private static final void setreturnvalue ruby runtime  type type
closure buffer buffer  irubyobject value
if  type instanceof type builtin
switch  type getnativetype
case void
break
case char
buffer setbytereturn  byte  longvalue value    break
case uchar
buffer setbytereturn  byte  longvalue value    break
case short
buffer setshortreturn  short  longvalue value    break
case ushort
buffer setshortreturn  short  longvalue value    break
case int
buffer setintreturn  int  longvalue value    break
case uint
buffer setintreturn  int  longvalue value    break
case long_long
buffer setlongreturn util int64value value    break
case ulong_long
buffer setlongreturn util uint64value value    break
case long
if  long_size    32
buffer setintreturn  int  longvalue value
else
buffer setlongreturn util int64value value
break
case ulong
if  long_size    32
buffer setintreturn  int  longvalue value
else
buffer setlongreturn util uint64value value
break
case float
buffer setfloatreturn  float  rubynumeric num2dbl value    break
case double
buffer setdoublereturn rubynumeric num2dbl value    break
case pointer
buffer setaddressreturn addressvalue value    break
case bool
buffer setintreturn value istrue   ? 1   0   break
default
else if  type instanceof callbackinfo
if  value instanceof rubyproc    value respondsto
pointer cb   factory getinstance   getcallbackmanager   getcallback runtime   callbackinfo  type  value
buffer setaddressreturn addressvalue cb
else
buffer setaddressreturn 0l
else
buffer setlongreturn 0l
/**
* converts a native value into a ruby object.
*
* @param runtime the ruby runtime to create the ruby object in
* @param type the type of the native parameter
* @param buffer the jffi closure parameter buffer.
* @param index the index of the parameter in the buffer.
* @return a new ruby object.
*/
private static final irubyobject fromnative ruby runtime  type type
closure buffer buffer  int index
switch  type getnativetype
case void
return runtime getnil
case char
return util newsigned8 runtime  buffer getbyte index
case uchar
return util newunsigned8 runtime  buffer getbyte index
case short
return util newsigned16 runtime  buffer getshort index
case ushort
return util newunsigned16 runtime  buffer getshort index
case int
return util newsigned32 runtime  buffer getint index
case uint
return util newunsigned32 runtime  buffer getint index
case long_long
return util newsigned64 runtime  buffer getlong index
case ulong_long
return util newunsigned64 runtime  buffer getlong index
case long
return long_size    32
? util newsigned32 runtime  buffer getint index
util newsigned64 runtime  buffer getlong index
case ulong
return long_size    32
? util newunsigned32 runtime  buffer getint index
util newunsigned64 runtime  buffer getlong index
case float
return runtime newfloat buffer getfloat index
case double
return runtime newfloat buffer getdouble index
case pointer
final long address   buffer getaddress index
if  type instanceof callbackinfo
callbackinfo cbinfo    callbackinfo  type
if  address    0
return new jffiinvoker runtime  address
cbinfo getreturntype    cbinfo getparametertypes
else
return runtime getnil
else
return new pointer runtime  nativememoryio wrap runtime  address
case string
return getstringparameter runtime  buffer  index
case bool
return runtime newboolean buffer getint index     0
default
throw new illegalargumentexception     type
/**
* converts a native string value into a ruby string object.
*
* @param runtime the ruby runtime to create the ruby string in
* @param buffer the jffi closure parameter buffer.
* @param index the index of the parameter in the buffer.
* @return a new ruby string object or nil if string is null.
*/
private static final irubyobject getstringparameter ruby runtime  closure buffer buffer  int index
return ffiutil getstring runtime  buffer getaddress index
/**
* checks if a type is a valid callback return type
*
* @param type the type to examine
* @return <tt>true</tt> if <tt>type</tt> is a valid return type for a callback.
*/
private static final boolean isreturntypevalid type type
if  type instanceof type builtin
switch  type getnativetype
case char
case uchar
case short
case ushort
case int
case uint
case long
case ulong
case long_long
case ulong_long
case float
case double
case pointer
case void
case bool
return true
else if  type instanceof callbackinfo
return true
return false
/**
* checks if a type is a valid parameter type for a callback
*
* @param type the type to examine
* @return <tt>true</tt> if <tt>type</tt> is a valid parameter type for a callback.
*/
private static final boolean isparametertypevalid type type
if  type instanceof type builtin
switch  type getnativetype
case char
case uchar
case short
case ushort
case int
case uint
case long
case ulong
case long_long
case ulong_long
case float
case double
case pointer
case string
case bool
return true
else if  type instanceof callbackinfo
return true
return false