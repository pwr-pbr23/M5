/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2006 ola bini <ola.bini@ki.se>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby util
import java io outputstream
import java io ioexception
import org jruby rubystring
import org jruby runtime callsite
import org jruby runtime builtin irubyobject
import org jruby runtime methodindex
/**
* this class wraps a irubyobject in an outputstream. depending on which messages
* the irubyobject answers to, it will have different functionality.
*
* the point is that the irubyobject could exhibit duck typing, in the style of io versus stringio, for example.
*
* at the moment, the only functionality supported is writing, and the only requirement on the io-object is
* that it responds to write() and close() like io.
*
* @author <a href="mailto:ola.bini@ki.se">ola bini</a>
*/
public class iooutputstream extends outputstream
private final irubyobject io
private final callsite writeadapter
private final callsite closeadapter   methodindex getfunctionalcallsite
/**
* creates a new outputstream with the object provided.
*
* @param io the ruby object
*/
public iooutputstream final irubyobject io  boolean checkappend  boolean verifycanwrite
this io   io
callsite writesite   methodindex getfunctionalcallsite
if  io respondsto
writeadapter   writesite
else if  checkappend    io respondsto
writeadapter   methodindex getfunctionalcallsite
else if  verifycanwrite
throw new illegalargumentexception
io
write
else
writeadapter   writesite
/**
* creates a new outputstream with the object provided.
*
* @param io the ruby object
*/
public iooutputstream final irubyobject io
this io  true  true
public void write final int bite  throws ioexception
writeadapter call io getruntime   getcurrentcontext    io  io  rubystring newstringlight io getruntime    new bytelist new byte  byte bite  false
@override
public void write final byte b  throws ioexception
write b 0 b length
@override
public void write final byte b final int off  final int len  throws ioexception
writeadapter call io getruntime   getcurrentcontext    io  io  rubystring newstringlight io getruntime    new bytelist b  off  len  false
@override
public void close   throws ioexception
if  io respondsto     closeadapter call io getruntime   getcurrentcontext    io  io