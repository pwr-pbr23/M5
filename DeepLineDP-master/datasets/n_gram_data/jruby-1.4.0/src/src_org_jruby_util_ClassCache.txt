package org jruby util
import java lang ref referencequeue
import java lang ref weakreference
import java security protectiondomain
import java util map
import java util concurrent concurrenthashmap
import java util concurrent atomic atomicinteger
/**
* a simple cache which maintains a collection of classes that can potentially be shared among
* multiple runtimes (or whole jvm).
*/
public class classcache<t>
private final atomicinteger classloadcount   new atomicinteger 0
private final atomicinteger classreusecount   new atomicinteger 0
private final referencequeue referencequeue   new referencequeue
private final map<object  keyedclassreference> cache
new concurrenthashmap<object  keyedclassreference>
private final classloader classloader
private final int max
/**
* the classloader this class cache will use for any classes generated through it.  it is
* assumed that the classloader provided will be a parent loader of any runtime using it.
* @param classloader to use to generate shared classes
*/
public classcache classloader classloader  int max
assert classloader    null
this classloader   classloader
this max   max
public classcache classloader classloader
this classloader   1
public interface classgenerator
byte bytecode
string name
private static class keyedclassreference<t> extends weakreference<class<t>>
private final object key
public keyedclassreference object key  class<t> referent  referencequeue<class<t>> referencequeue
super referent  referencequeue
this key   key
public object getkey
return key
public static class oneshotclassloader extends classloader
private final static protectiondomain default_domain
jrubyclassloader class getprotectiondomain
public oneshotclassloader classloader parent
super parent
public class<?> defineclass string name  byte bytes
return super defineclass name  bytes  0  bytes length  default_domain
public classloader getclassloader
return classloader
public int getmax
return max
public class<t> cacheclassbykey object key  classgenerator classgenerator
throws classnotfoundexception
weakreference<class<t>> weakref   cache get key
class<t> contents   null
if  weakref    null  contents   weakref get
if  weakref    null    contents    null
if  isfull    return null
oneshotclassloader oneshotcl   new oneshotclassloader getclassloader
contents    class<t> oneshotcl defineclass classgenerator name    classgenerator bytecode
classloadcount incrementandget
cleanup
cache put key  new keyedclassreference key  contents  referencequeue
else
classreusecount incrementandget
return contents
public void flush
cache clear
public boolean isfull
cleanup
return max > 0    cache size   >  max
public int getclassloadcount
return classloadcount get
public int getliveclasscount
cleanup
return cache size
public int getclassreusecount
return classreusecount get
private void cleanup
keyedclassreference reference
while   reference    keyedclassreference referencequeue poll       null
cache remove reference getkey