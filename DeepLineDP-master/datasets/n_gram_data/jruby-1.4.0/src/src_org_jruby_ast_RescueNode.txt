/*
***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2001-2002 benoit cerrina <b.cerrina@wanadoo.fr>
* copyright (c) 2001-2002 jan arne petersen <jpetersen@uni-bonn.de>
* copyright (c) 2002-2004 anders bengtsson <ndrsbngtssn@yahoo.se>
* copyright (c) 2004 thomas e enebo <enebo@acm.org>
* copyright (c) 2004 stefan matthias aust <sma@3plus4.de>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby ast
import java util list
import org jruby ruby
import org jruby rubyexception
import org jruby ast visitor nodevisitor
import org jruby common irubywarnings id
import org jruby evaluator astinterpreter
import org jruby exceptions jumpexception
import org jruby exceptions raiseexception
import org jruby javasupport javautil
import org jruby javasupport util runtimehelpers
import org jruby lexer yacc isourceposition
import org jruby runtime block
import org jruby runtime threadcontext
import org jruby runtime builtin irubyobject
import org jruby util unsafe unsafefactory
/**
* represents a rescue statement
*/
public class rescuenode extends node
private final node bodynode
private final rescuebodynode rescuenode
private final node elsenode
public rescuenode isourceposition position  node bodynode  rescuebodynode rescuenode  node elsenode
super position
this bodynode   bodynode
this rescuenode   rescuenode
this elsenode   elsenode
public nodetype getnodetype
return nodetype rescuenode
/**
* accept for the visitor pattern.
* @param ivisitor the visitor
**/
public object accept nodevisitor ivisitor
return ivisitor visitrescuenode this
/**
* gets the bodynode.
* @return returns a node
*/
public node getbodynode
return bodynode
/**
* gets the elsenode.
* @return returns a node
*/
public node getelsenode
return elsenode
/**
* gets the first rescuenode.
* @return returns a node
*/
public rescuebodynode getrescuenode
return rescuenode
public list<node> childnodes
return node createlist rescuenode  bodynode  elsenode
@override
public irubyobject interpret ruby runtime  threadcontext context  irubyobject self  block ablock
if  runtime getjavasupport   isactive      unsafefactory getunsafe      null
return interpretwithjavaexceptions runtime  context  self  ablock
else
return interpretwithoutjavaexceptions runtime  context  self  ablock
private irubyobject interpretwithoutjavaexceptions ruby runtime  threadcontext context  irubyobject self  block ablock
rescuedblock   while  true
irubyobject globalexceptionstate   runtime getglobalvariables   get
boolean anotherexceptionraised   false
try
return executebody runtime  context  self  ablock
catch  raiseexception raisejump
try
return handleexception runtime  context  self  ablock  raisejump
catch  jumpexception retryjump rj
// let rescuedblock continue
catch  raiseexception je
anotherexceptionraised   true
throw je
catch  jumpexception flowcontrolexception flow
// just rethrow
throw flow
finally
// clear exception when handled or retried
if   anotherexceptionraised
runtime getglobalvariables   set    globalexceptionstate
private irubyobject interpretwithjavaexceptions ruby runtime  threadcontext context  irubyobject self  block ablock
rescuedblock   while  true
irubyobject globalexceptionstate   runtime getglobalvariables   get
boolean anotherexceptionraised   false
try
return executebody runtime  context  self  ablock
catch  raiseexception raisejump
try
return handleexception runtime  context  self  ablock  raisejump
catch  jumpexception retryjump rj
// let rescuedblock continue
catch  raiseexception je
anotherexceptionraised   true
throw je
catch  jumpexception flowcontrolexception flow
// just rethrow
throw flow
catch  throwable t
try
return handlejavaexception runtime  context  self  ablock  t
catch  jumpexception retryjump rj
// let rescuedblock continue
catch  raiseexception je
anotherexceptionraised   true
throw je
finally
// clear exception when handled or retried
if   anotherexceptionraised
runtime getglobalvariables   set    globalexceptionstate
private irubyobject handleexception ruby runtime  threadcontext context  irubyobject self  block ablock  raiseexception raisejump
rubyexception raisedexception   raisejump getexception
// todo: rubicon testkernel dies without this line.  a cursory glance implies we
// falsely set $! to nil and this sets it back to something valid.  this should
// get fixed at the same time we address bug #1296484.
runtime getglobalvariables   set    raisedexception
rescuebodynode crescuenode   rescuenode
while  crescuenode    null
irubyobject exceptions   getexceptions crescuenode  runtime  context  self  ablock
if  runtimehelpers isexceptionhandled raisedexception  exceptions  context  istrue
return crescuenode interpret runtime context  self  ablock
crescuenode   crescuenode getoptrescuenode
// no takers; bubble up
throw raisejump
private irubyobject handlejavaexception ruby runtime  threadcontext context  irubyobject self  block ablock  throwable throwable
rescuebodynode crescuenode   rescuenode
while  crescuenode    null
irubyobject exceptions   getexceptions crescuenode  runtime  context  self  ablock
if  runtimehelpers isjavaexceptionhandled throwable  exceptions  context  istrue
runtime getglobalvariables   set    javautil convertjavatousablerubyobject runtime  throwable
return crescuenode interpret runtime  context  self  ablock
crescuenode   crescuenode getoptrescuenode
// no takers; bubble up
unsafefactory getunsafe   throwexception throwable
throw new runtimeexception
private irubyobject executebody ruby runtime  threadcontext context  irubyobject self  block ablock
// fixme: make bodynode non-null in parser
if  bodynode    null
return runtime getnil
// execute rescue block
irubyobject result   bodynode interpret runtime  context  self  ablock
// if no exception is thrown execute else block
if  elsenode    null
if  rescuenode    null
runtime getwarnings   warn id else_without_rescue  elsenode getposition
result   elsenode interpret runtime  context  self  ablock
return result
private irubyobject getexceptions rescuebodynode crescuenode  ruby runtime  threadcontext context  irubyobject self  block ablock
node exceptionnodes   crescuenode getexceptionnodes
irubyobject exceptions
if  exceptionnodes    null
exceptions   new irubyobject runtime getstandarderror
else
exceptions   astinterpreter setupargs runtime  context  exceptionnodes  self  ablock
return exceptions