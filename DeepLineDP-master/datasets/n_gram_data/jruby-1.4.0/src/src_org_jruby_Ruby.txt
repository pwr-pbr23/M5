/*
**** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2001 chad fowler <chadfowler@chadfowler.com>
* copyright (c) 2001 alan moore <alan_moore@gmx.net>
* copyright (c) 2001-2002 benoit cerrina <b.cerrina@wanadoo.fr>
* copyright (c) 2001-2004 jan arne petersen <jpetersen@uni-bonn.de>
* copyright (c) 2002-2004 anders bengtsson <ndrsbngtssn@yahoo.se>
* copyright (c) 2004 thomas e enebo <enebo@acm.org>
* copyright (c) 2004-2005 charles o nutter <headius@headius.com>
* copyright (c) 2004 stefan matthias aust <sma@3plus4.de>
* copyright (c) 2006 miguel covarrubias <mlcovarrubias@gmail.com>
* copyright (c) 2006 michael studman <codehaus@michaelstudman.com>
* copyright (c) 2006 ola bini <ola@ologix.com>
* copyright (c) 2007 nick sieger <nicksieger@gmail.com>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby
import java io bytearrayinputstream
import java io filedescriptor
import java io ioexception
import java io inputstream
import java io printstream
import java io unsupportedencodingexception
import java lang ref reference
import java lang ref referencequeue
import java lang ref weakreference
import java util arraylist
import java util collections
import java util hashmap
import java util identityhashmap
import java util iterator
import java util list
import java util map
import java util random
import java util set
import java util stack
import java util vector
import java util weakhashmap
import java util concurrent concurrenthashmap
import java util concurrent executorservice
import java util concurrent executors
import java util concurrent synchronousqueue
import java util concurrent threadpoolexecutor
import java util concurrent timeunit
import java util concurrent atomic atomicinteger
import org jcodings encoding
import org joda time datetimezone
import org jruby ast node
import org jruby ast executable script
import org jruby common rubywarnings
import org jruby common irubywarnings id
import org jruby compiler astcompiler
import org jruby compiler astinspector
import org jruby compiler jitcompiler
import org jruby compiler impl standardasmcompiler
import org jruby compiler notcompilableexception
import org jruby exceptions jumpexception
import org jruby exceptions mainexitexception
import org jruby exceptions raiseexception
import org jruby ext jrubyposixhandler
import org jruby ext lateloadinglibrary
import org jruby ext posix posix
import org jruby ext posix posixfactory
import org jruby internal runtime globalvariables
import org jruby internal runtime threadservice
import org jruby internal runtime valueaccessor
import org jruby javasupport javasupport
import org jruby management classcache
import org jruby management config
import org jruby management parserstats
import org jruby parser evalstaticscope
import org jruby parser parser
import org jruby parser parserconfiguration
import org jruby runtime binding
import org jruby runtime block
import org jruby runtime callsite
import org jruby runtime callbackfactory
import org jruby runtime dynamicscope
import org jruby runtime eventhook
import org jruby runtime globalvariable
import org jruby runtime iaccessor
import org jruby runtime objectallocator
import org jruby runtime objectspace
import org jruby runtime rubyevent
import org jruby runtime threadcontext
import org jruby runtime builtin irubyobject
import org jruby runtime encoding encodingservice
import org jruby runtime load compiledscriptloader
import org jruby runtime load library
import org jruby runtime load loadservice
import org jruby runtime scope manyvarsdynamicscope
import org jruby util builtinscript
import org jruby util bytelist
import org jruby util ioinputstream
import org jruby util iooutputstream
import org jruby util jrubyclassloader
import org jruby util javanamemangler
import org jruby util kcode
import org jruby util safepropertyaccessor
import org jruby util collections weakhashset
import org jruby util io channeldescriptor
import com kenai constantine constant
import com kenai constantine constantset
import com kenai constantine platform errno
import java util enumset
import java util concurrent atomic atomiclong
import org jruby ast rootnode
import org jruby internal runtime methods dynamicmethod
import org jruby javasupport util runtimehelpers
import org jruby management beanmanager
import org jruby management beanmanagerfactory
import org jruby threading daemonthreadfactory
/**
* the ruby object represents the top-level of a jruby "instance" in a given vm.
* jruby supports spawning multiple instances in the same jvm. generally, objects
* created under these instances are tied to a given runtime, for such details
* as identity and type, because multiple ruby instances means there are
* multiple instances of each class. this means that in multi-runtime mode
* (or really, multi-vm mode, where each jruby instance is a ruby "vm"), objects
* generally can't be transported across runtimes without marshaling.
*
* this class roots everything that makes the jruby runtime function, and
* provides a number of utility methods for constructing global types and
* accessing global runtime structures.
*/
public final class ruby
/**
* returns a new instance of the jruby runtime configured with defaults.
*
* @return the jruby runtime
* @see org.jruby.rubyinstanceconfig
*/
public static ruby newinstance
return newinstance new rubyinstanceconfig
/**
* returns a new instance of the jruby runtime configured as specified.
*
* @param config the instance configuration
* @return the jruby runtime
* @see org.jruby.rubyinstanceconfig
*/
public static ruby newinstance rubyinstanceconfig config
ruby ruby   new ruby config
ruby init
setglobalruntimefirsttimeonly ruby
return ruby
/**
* returns a new instance of the jruby runtime configured with the given
* input, output and error streams and otherwise default configuration
* (except where specified system properties alter defaults).
*
* @param in the custom input stream
* @param out the custom output stream
* @param err the custom error stream
* @return the jruby runtime
* @see org.jruby.rubyinstanceconfig
*/
public static ruby newinstance inputstream in  printstream out  printstream err
rubyinstanceconfig config   new rubyinstanceconfig
config setinput in
config setoutput out
config seterror err
return newinstance config
private static ruby globalruntime
private static synchronized void setglobalruntimefirsttimeonly ruby runtime
if  globalruntime    null
globalruntime   runtime
public static synchronized ruby getglobalruntime
if  globalruntime    null
newinstance
return globalruntime
/**
* convenience method for java integrators who may need to switch the notion
* of "global" runtime. use <tt>jruby.runtime.use_as_global_runtime</tt>
* from ruby code to activate the current runtime as the global one.
*/
public void useasglobalruntime
synchronized ruby class
globalruntime   null
setglobalruntimefirsttimeonly this
/**
* create and initialize a new jruby runtime. the properties of the
* specified rubyinstanceconfig will be used to determine various jruby
* runtime characteristics.
*
* @param config the configuration to use for the new instance
* @see org.jruby.rubyinstanceconfig
*/
private ruby rubyinstanceconfig config
this config               config
this is1_9                 config getcompatversion      compatversion ruby1_9
this threadservice        new threadservice this
if config issamplingenabled
org jruby util simplesampler registerthreadcontext threadservice getcurrentcontext
this in                   config getinput
this out                  config getoutput
this err                  config geterror
this objectspaceenabled   config isobjectspaceenabled
this profile              config getprofile
this currentdirectory     config getcurrentdirectory
this kcode                config getkcode
this beanmanager          beanmanagerfactory create this  config ismanagementenabled
this jitcompiler          new jitcompiler this
this parserstats          new parserstats this
this beanmanager register new config this
this beanmanager register parserstats
this beanmanager register new classcache this
/**
* evaluates a script under the current scope (perhaps the top-level
* scope) and returns the result (generally the last value calculated).
* this version goes straight into the interpreter, bypassing compilation
* and runtime preparation typical to normal script runs.
*
* @param script the scriptlet to run
* @returns the result of the eval
*/
public irubyobject evalscriptlet string script
threadcontext context   getcurrentcontext
dynamicscope currentscope   context getcurrentscope
manyvarsdynamicscope newscope   new manyvarsdynamicscope new evalstaticscope currentscope getstaticscope     currentscope
return evalscriptlet script  newscope
/**
* evaluates a script under the current scope (perhaps the top-level
* scope) and returns the result (generally the last value calculated).
* this version goes straight into the interpreter, bypassing compilation
* and runtime preparation typical to normal script runs.
*
* this version accepts a scope to use, so you can eval many times against
* the same scope.
*
* @param script the scriptlet to run
* @param scope the scope to execute against (manyvarsdynamicscope is
* recommended, so it can grow as needed)
* @returns the result of the eval
*/
public irubyobject evalscriptlet string script  dynamicscope scope
threadcontext context   getcurrentcontext
node node   parseeval script     scope  0
try
context preevalscriptlet scope
return node interpret this  context  context getframeself    block null_block
catch  jumpexception returnjump rj
throw newlocaljumperror rubylocaljumperror reason return   irubyobject rj getvalue
catch  jumpexception breakjump bj
throw newlocaljumperror rubylocaljumperror reason break   irubyobject bj getvalue
catch  jumpexception redojump rj
throw newlocaljumperror rubylocaljumperror reason redo   irubyobject rj getvalue
finally
context postevalscriptlet
/**
* parse and execute the specified script
* this differs from the other methods in that it accepts a string-based script and
* parses and runs it as though it were loaded at a command-line. this is the preferred
* way to start up a new script when calling directly into the ruby object (which is
* generally *dis*couraged.
*
* @param script the contents of the script to run as a normal, root script
* @return the last value of the script
*/
public irubyobject executescript string script  string filename
byte bytes
try
bytes   script getbytes kcode none getkcode
catch  unsupportedencodingexception e
bytes   script getbytes
node node   parseinline new bytearrayinputstream bytes   filename  null
threadcontext context   getcurrentcontext
string oldfile   context getfile
int oldline   context getline
try
context setfileandline node getposition
return runnormally node
finally
context setfileandline oldfile  oldline
/**
* run the script contained in the specified input stream, using the
* specified filename as the name of the script being executed. the stream
* will be read fully before being parsed and executed. the given filename
* will be used for the ruby $program_name and $0 global variables in this
* runtime.
*
* this method is intended to be called once per runtime, generally from
* main or from main-like top-level entry points.
*
* as part of executing the script loaded from the input stream, various
* rubyinstanceconfig properties will be used to determine whether to
* compile the script before execution or run with various wrappers (for
* looping, printing, and so on, see jruby -help).
*
* @param inputstream the inputstream from which to read the script contents
* @param filename the filename to use when parsing, and for $program_name
* and $0 ruby global variables.
*/
public void runfrommain inputstream inputstream  string filename
iaccessor d   new valueaccessor newstring filename
getglobalvariables   define    d
getglobalvariables   define    d
for  iterator i   config getoptionglobals   entryset   iterator    i hasnext
map entry entry    map entry  i next
object value   entry getvalue
irubyobject varvalue
if  value    null
varvalue   newstring value tostring
} else {
varvalue   gettrue
getglobalvariables   set     entry getkey   tostring    varvalue
if  filename endswith
// we are presumably running a precompiled class; load directly
script script   compiledscriptloader loadscriptfromfile this  inputstream  filename
if  script    null
throw new mainexitexception 1
script setfilename filename
runscript script
return
node scriptnode   parsefrommain inputstream  filename
threadcontext context   getcurrentcontext
string oldfile   context getfile
int oldline   context getline
try
context setfileandline scriptnode getposition
if  config isassumeprinting      config isassumeloop
runwithgetsloop scriptnode  config isassumeprinting    config isprocesslineends
config issplit
} else {
runnormally scriptnode
finally
context setfileandline oldfile  oldline
/**
* parse the script contained in the given input stream, using the given
* filename as the name of the script, and return the root node. this
* is used to verify that the script syntax is valid, for jruby -c. the
* current scope (generally the top-level scope) is used as the parent
* scope for parsing.
*
* @param inputstream the input stream from which to read the script
* @param filename the filename to use for parsing
* @returns the root node of the parsed script
*/
public node parsefrommain inputstream inputstream  string filename
if  config isinlinescript
return parseinline inputstream  filename  getcurrentcontext   getcurrentscope
} else {
return parsefile inputstream  filename  getcurrentcontext   getcurrentscope
/**
* run the given script with a "while gets; end" loop wrapped around it.
* this is primarily used for the -n command-line flag, to allow writing
* a short script that processes input lines using the specified code.
*
* @param scriptnode the root node of the script to execute
* @param printing whether $_ should be printed after each loop (as in the
* -p command-line flag)
* @param processlineends whether line endings should be processed by
* setting $\ to $/ and <code>chop!</code>ing every line read
* @param split whether to split each line read using <code>string#split</code>
* bytecode before executing.
* @return the result of executing the specified script
*/
@deprecated
public irubyobject runwithgetsloop node scriptnode  boolean printing  boolean processlineends  boolean split  boolean unused
return runwithgetsloop scriptnode  printing  processlineends  split
/**
* run the given script with a "while gets; end" loop wrapped around it.
* this is primarily used for the -n command-line flag, to allow writing
* a short script that processes input lines using the specified code.
*
* @param scriptnode the root node of the script to execute
* @param printing whether $_ should be printed after each loop (as in the
* -p command-line flag)
* @param processlineends whether line endings should be processed by
* setting $\ to $/ and <code>chop!</code>ing every line read
* @param split whether to split each line read using <code>string#split</code>
* bytecode before executing.
* @return the result of executing the specified script
*/
public irubyobject runwithgetsloop node scriptnode  boolean printing  boolean processlineends  boolean split
threadcontext context   getcurrentcontext
script script   null
boolean compile   getinstanceconfig   getcompilemode   shouldprecompilecli
if  compile
script   trycompile scriptnode
if  compile    script    null
// terminate; trycompile will have printed out an error and we're done
return getnil
if  processlineends
getglobalvariables   set    getglobalvariables   get
// we do preand post load outside the "body" versions to pre-prepare
// and pre-push the dynamic scope we need for lastline
runtimehelpers preload context    rootnode scriptnode  getstaticscope   getvariables
try
while  rubykernel gets context  gettopself    irubyobject null_array  istrue
loop  while  true       used for the   command
try
if  processlineends
getglobalvariables   get    callmethod context
if  split
getglobalvariables   set    getglobalvariables   get    callmethod context
if  script    null
runscriptbody script
} else {
runinterpreterbody scriptnode
if  printing  rubykernel print context  getkernel    new irubyobject  getglobalvariables   get
break loop
catch  jumpexception redojump rj
// do nothing, this iteration restarts
catch  jumpexception nextjump nj
// recheck condition
break loop
catch  jumpexception breakjump bj
// end loop
return  irubyobject  bj getvalue
finally
runtimehelpers postload context
return getnil
/**
* run the specified script without any of the loop-processing wrapper
* code.
*
* @param scriptnode the root node of the script to be executed
* bytecode before execution
* @return the result of executing the script
*/
@deprecated
public irubyobject runnormally node scriptnode  boolean unused
return runnormally scriptnode
/**
* run the specified script without any of the loop-processing wrapper
* code.
*
* @param scriptnode the root node of the script to be executed
* bytecode before execution
* @return the result of executing the script
*/
public irubyobject runnormally node scriptnode
script script   null
boolean compile   getinstanceconfig   getcompilemode   shouldprecompilecli
boolean forcecompile   getinstanceconfig   getcompilemode   shouldprecompileall
if  compile
script   trycompile scriptnode
if  forcecompile    script    null
return getnil
if  script    null
if  config isshowbytecode
return nilobject
} else {
return runscript script
} else {
if  config isshowbytecode    system err print
return runinterpreter scriptnode
public script trycompile node node
return trycompile node  new jrubyclassloader getjrubyclassloader
private script trycompile node node  jrubyclassloader classloader
script script   null
try
string filename   node getposition   getfile
string classname   javanamemangler mangledfilenameforstartupclasspath filename
astinspector inspector   new astinspector
inspector inspect node
standardasmcompiler asmcompiler   new standardasmcompiler classname  filename
astcompiler compiler   config newcompiler
if  config isshowbytecode
compiler compileroot node  asmcompiler  inspector  false  false
asmcompiler dumpclass system out
} else {
compiler compileroot node  asmcompiler  inspector  true  false
script    script asmcompiler loadclass classloader  newinstance
if  config isjitlogging
system err println     node getposition   getfile
catch  notcompilableexception nce
if  config isjitloggingverbose      config isdebug
system err println     nce getmessage
nce printstacktrace
} else {
system err println
catch  classnotfoundexception e
if  config isjitloggingverbose      config isdebug
system err println     e getmessage
e printstacktrace
} else {
system err println
catch  instantiationexception e
if  config isjitloggingverbose      config isdebug
system err println     e getmessage
e printstacktrace
} else {
system err println
catch  illegalaccessexception e
if  config isjitloggingverbose      config isdebug
system err println     e getmessage
e printstacktrace
} else {
system err println
catch  throwable t
if  config isjitloggingverbose      config isdebug
system err println     node getposition   getfile
t printstacktrace
} else {
system err println
return script
public irubyobject runscript script script
threadcontext context   getcurrentcontext
try
return script load context  context getframeself    irubyobject null_array  block null_block
catch  jumpexception returnjump rj
return  irubyobject  rj getvalue
/**
* this is used for the "gets" loop, and we bypass 'load' to use an
* already-prepared, already-pushed scope for the script body.
*/
private irubyobject runscriptbody script script
threadcontext context   getcurrentcontext
try
return script __file__ context  context getframeself    block null_block
catch  jumpexception returnjump rj
return  irubyobject  rj getvalue
public irubyobject runinterpreter node scriptnode
threadcontext context   getcurrentcontext
assert scriptnode    null
try
return scriptnode interpret this  context  gettopself    block null_block
catch  jumpexception returnjump rj
return  irubyobject  rj getvalue
/**
* this is used for the "gets" loop, and we bypass 'load' to use an
* already-prepared, already-pushed scope for the script body.
*/
public irubyobject runinterpreterbody node scriptnode
threadcontext context   getcurrentcontext
assert scriptnode    null
assert scriptnode instanceof rootnode
try
return   rootnode scriptnode  interpret this  context  gettopself    block null_block
catch  jumpexception returnjump rj
return  irubyobject  rj getvalue
public parser getparser
return parser
public beanmanager getbeanmanager
return beanmanager
public jitcompiler getjitcompiler
return jitcompiler
/**
* @deprecated use #newinstance()
*/
public static ruby getdefaultinstance
return newinstance
@deprecated
public static ruby getcurrentinstance
return null
@deprecated
public static void setcurrentinstance ruby runtime
public int allocsymbolid
return symbollastid incrementandget
public int allocmoduleid
return modulelastid incrementandget
/**
* retrieve the module with the given name from the object namespace.
*
* @param name the name of the module
* @return the module or null if not found
*/
public rubymodule getmodule string name
return  rubymodule  objectclass getconstantat name
/**
* retrieve the module with the given name from the object namespace. the
* module name must be an interned string, but this method will be faster
* than the non-interned version.
*
* @param internedname the name of the module; <em>must</em> be an interned string
* @return the module or null if not found
*/
public rubymodule fastgetmodule string internedname
return  rubymodule  objectclass fastgetconstantat internedname
/**
* retrieve the class with the given name from the object namespace.
*
* @param name the name of the class
* @return the class
*/
public rubyclass getclass string name
return objectclass getclass name
/**
* retrieve the class with the given name from the object namespace. the
* module name must be an interned string, but this method will be faster
* than the non-interned version.
*
* @param internedname the name of the class; <em>must</em> be an interned string!
* @return
*/
public rubyclass fastgetclass string internedname
return objectclass fastgetclass internedname
/**
* define a new class under the object namespace. roughly equivalent to
* rb_define_class in mri.
*
* @param name the name for the new class
* @param superclass the super class for the new class
* @param allocator an objectallocator instance that can construct
* instances of the new class.
* @return the new class
*/
public rubyclass defineclass string name  rubyclass superclass  objectallocator allocator
return defineclassunder name  superclass  allocator  objectclass
/**
* a variation of defineclass that allows passing in an array of subplementary
* call sites for improving dynamic invocation performance.
*
* @param name the name for the new class
* @param superclass the super class for the new class
* @param allocator an objectallocator instance that can construct
* instances of the new class.
* @return the new class
*/
public rubyclass defineclass string name  rubyclass superclass  objectallocator allocator  callsite callsites
return defineclassunder name  superclass  allocator  objectclass  callsites
/**
* define a new class with the given name under the given module or class
* namespace. roughly equivalent to rb_define_class_under in mri.
*
* if the name specified is already bound, its value will be returned if:
* * it is a class
* * no new superclass is being defined
*
* @param name the name for the new class
* @param superclass the super class for the new class
* @param allocator an objectallocator instance that can construct
* instances of the new class.
* @param parent the namespace under which to define the new class
* @return the new class
*/
public rubyclass defineclassunder string name  rubyclass superclass  objectallocator allocator  rubymodule parent
return defineclassunder name  superclass  allocator  parent  null
/**
* a variation of defineclassunder that allows passing in an array of
* supplementary call sites to improve dynamic invocation.
*
* @param name the name for the new class
* @param superclass the super class for the new class
* @param allocator an objectallocator instance that can construct
* instances of the new class.
* @param parent the namespace under which to define the new class
* @param callsites the array of call sites to add
* @return the new class
*/
public rubyclass defineclassunder string name  rubyclass superclass  objectallocator allocator  rubymodule parent  callsite callsites
irubyobject classobj   parent getconstantat name
if  classobj    null
if    classobj instanceof rubyclass   throw newtypeerror name
rubyclass klazz    rubyclass classobj
if  klazz getsuperclass   getrealclass      superclass
throw newnameerror name      name
// if we define a class in ruby, but later want to allow it to be defined in java,
// the allocator needs to be updated
if  klazz getallocator      allocator
klazz setallocator allocator
return klazz
boolean parentisobject   parent    objectclass
if  superclass    null
string classname   parentisobject ? name   parent getname         name
warnings warn id no_super_class      classname      classname
superclass   objectclass
return rubyclass newclass this  superclass  name  allocator  parent   parentisobject  callsites
/**
* define a new module under the object namespace. roughly equivalent to
* rb_define_module in mri.
*
* @param name the name of the new module
* @returns the new module
*/
public rubymodule definemodule string name
return definemoduleunder name  objectclass
/**
* define a new module with the given name under the given module or
* class namespace. roughly equivalent to rb_define_module_under in mri.
*
* @param name the name of the new module
* @param parent the class or module namespace under which to define the
* module
* @returns the new module
*/
public rubymodule definemoduleunder string name  rubymodule parent
irubyobject moduleobj   parent getconstantat name
boolean parentisobject   parent    objectclass
if  moduleobj    null
if  moduleobj ismodule    return  rubymodule moduleobj
if  parentisobject
throw newtypeerror moduleobj getmetaclass   getname
} else {
throw newtypeerror parent getname         moduleobj getmetaclass   getname
return rubymodule newmodule this  name  parent   parentisobject
/**
* from object, retrieve the named module. if it doesn't exist a
* new module is created.
*
* @param name the name of the module
* @returns the existing or new module
*/
public rubymodule getorcreatemodule string name
irubyobject module   objectclass getconstantat name
if  module    null
module   definemodule name
else if  getsafelevel   >  4
throw newsecurityerror
else if   module ismodule
throw newtypeerror name
return  rubymodule  module
/**
* retrieve the current safe level.
*
* @see org.jruby.ruby#setsavelevel
*/
public int getsafelevel
return this safelevel
/**
* set the current safe level:
*
* 0 - strings from streams/environment/argv are tainted (default)
* 1 - no dangerous operation by tainted value
* 2 - process/file operations prohibited
* 3 - all generated objects are tainted
* 4 - no global (non-tainted) variable modification/no direct output
*
* the safe level is set using $safe in ruby code. it is not particularly
* well supported in jruby.
*/
public void setsafelevel int safelevel
this safelevel   safelevel
public kcode getkcode
return kcode
public void setkcode kcode kcode
this kcode   kcode
public void secure int level
if  level <  safelevel
throw newsecurityerror     getcurrentcontext   getframename         safelevel
// fixme moved this here to get what's obviously a utility method out of irubyobject.
// perhaps security methods should find their own centralized home at some point.
public void checksafestring irubyobject object
if  getsafelevel   > 0    object istaint
threadcontext tc   getcurrentcontext
if  tc getframename      null
throw newsecurityerror     tc getframename
throw newsecurityerror
secure 4
if    object instanceof rubystring
throw newtypeerror
object getmetaclass   getname
/** rb_define_global_const
*
*/
public void defineglobalconstant string name  irubyobject value
objectclass defineconstant name  value
public boolean isclassdefined string name
return getmodule name     null
/**
* this method is called immediately after constructing the ruby instance.
* the main thread is prepared for execution, all core classes and libraries
* are initialized, and any libraries required on the command line are
* loaded.
*/
private void init
// get the main threadcontext (gets constructed for us)
threadcontext tc   getcurrentcontext
safelevel   config getsafelevel
// construct key services
loadservice   config createloadservice this
posix   posixfactory getposix new jrubyposixhandler this   rubyinstanceconfig nativeenabled
javasupport   new javasupport this
if  rubyinstanceconfig pooling_enabled
executor   new threadpoolexecutor
rubyinstanceconfig pool_min
rubyinstanceconfig pool_max
rubyinstanceconfig pool_ttl
timeunit seconds
new synchronousqueue<runnable>
new daemonthreadfactory
// initialize the root of the class hierarchy completely
initroot
// construct the top-level execution frame and scope for the main thread
tc preparetoplevel objectclass  topself
// initialize all the core classes
bootstrap
// initialize the "dummy" class used as a marker
dummyclass   new rubyclass this  classclass
dummyclass freeze tc
// create global constants and variables
rubyglobal createglobals tc  this
// prepare loadservice and load path
getloadservice   init config loadpaths
// initialize builtin libraries
initbuiltins
// require in all libraries specified on command line
for  string scriptname   config requiredlibraries
rubykernel require gettopself    newstring scriptname   block null_block
private void bootstrap
initcore
initexceptions
private void initroot
boolean onenine   is1_9
// bootstrap the top of the hierarchy
if  onenine
basicobjectclass   rubyclass createbootstrapclass this     null  rubybasicobject object_allocator
objectclass   rubyclass createbootstrapclass this     basicobjectclass  rubyobject object_allocator
} else {
objectclass   rubyclass createbootstrapclass this     null  rubyobject object_allocator
moduleclass   rubyclass createbootstrapclass this     objectclass  rubymodule module_allocator
classclass   rubyclass createbootstrapclass this     moduleclass  rubyclass class_allocator
if  onenine  basicobjectclass setmetaclass classclass
objectclass setmetaclass classclass
moduleclass setmetaclass classclass
classclass setmetaclass classclass
rubyclass metaclass
if  onenine  metaclass   basicobjectclass makemetaclass classclass
metaclass   objectclass makemetaclass classclass
metaclass   moduleclass makemetaclass metaclass
metaclass   classclass makemetaclass metaclass
if  onenine  rubybasicobject createbasicobjectclass this  basicobjectclass
rubyobject createobjectclass this  objectclass
rubymodule createmoduleclass this  moduleclass
rubyclass createclassclass this  classclass
// set constants now that they're initialized
if  onenine  objectclass setconstant    basicobjectclass
objectclass setconstant    objectclass
objectclass setconstant    classclass
objectclass setconstant    moduleclass
// initialize kernel and include into object
rubykernel createkernelmodule this
objectclass includemodule kernelmodule
// object is ready, create top self
topself   topselffactory createtopself this
private void initcore
// pre-create all the core classes potentially referenced during startup
rubynil createnilclass this
rubyboolean createfalseclass this
rubyboolean createtrueclass this
nilobject   new rubynil this
for  int i 0  i<nil_prefilled_array_size  i    nilprefilledarray   nilobject
singlenilarray   new irubyobject  nilobject
falseobject   new rubyboolean this  false
trueobject   new rubyboolean this  true
if  profile allowclass
defineclass    objectclass  objectallocator not_allocatable_allocator
rubycomparable createcomparable this
rubyenumerable createenumerablemodule this
rubystring createstringclass this
if  is1_9
rubyencoding createencodingclass this
rubyconverter createconverterclass this
encodingservice   new encodingservice this
rubysymbol createsymbolclass this
if  profile allowclass
rubythreadgroup createthreadgroupclass this
if  profile allowclass
rubythread createthreadclass this
if  profile allowclass
rubyexception createexceptionclass this
if   is1_9
if  profile allowmodule
rubyprecision createprecisionmodule this
if  profile allowclass
rubynumeric createnumericclass this
if  profile allowclass
rubyinteger createintegerclass this
if  profile allowclass
rubyfixnum createfixnumclass this
if  is1_9
if  profile allowclass
rubycomplex createcomplexclass this
if  profile allowclass
rubyrational createrationalclass this
if  profile allowclass
rubyhash createhashclass this
if  profile allowclass
rubyarray createarrayclass this
if  profile allowclass
rubyfloat createfloatclass this
if  profile allowclass
rubybignum createbignumclass this
ioclass   rubyio createioclass this
if  profile allowclass
rubystruct createstructclass this
if  profile allowclass
tmsstruct   rubystruct newinstance structclass  new irubyobject newstring     newsymbol     newsymbol     newsymbol     newsymbol      block null_block
if  profile allowclass
rubybinding createbindingclass this
// math depends on all numeric types
if  profile allowmodule
rubymath createmathmodule this
if  profile allowclass
rubyregexp createregexpclass this
if  profile allowclass
rubyrange createrangeclass this
if  profile allowmodule
rubyobjectspace createobjectspacemodule this
if  profile allowmodule
rubygc creategcmodule this
if  profile allowclass
rubyproc createprocclass this
if  profile allowclass
rubymethod createmethodclass this
if  profile allowclass
rubymatchdata creatematchdataclass this
if  profile allowmodule
rubymarshal createmarshalmodule this
if  profile allowclass
rubydir createdirclass this
if  profile allowmodule
rubyfiletest createfiletestmodule this
// depends on io, filetest
if  profile allowclass
rubyfile createfileclass this
if  profile allowclass
rubyfilestat createfilestatclass this
if  profile allowmodule
rubyprocess createprocessmodule this
if  profile allowclass
rubytime createtimeclass this
if  profile allowclass
rubyunboundmethod defineunboundmethodclass this
if   issecurityrestricted
// signal uses sun.misc.* classes, this is not allowed
// in the security-sensitive environments
if  profile allowmodule
rubysignal createsignal this
if  profile allowclass
rubycontinuation createcontinuation this
public static final int nil_prefilled_array_size   rubyarray array_default_size   8
private final irubyobject nilprefilledarray   new irubyobject
public irubyobject getnilprefilledarray
return nilprefilledarray
private void initexceptions
standarderror   defineclassifallowed    exceptionclass
runtimeerror   defineclassifallowed    standarderror
ioerror   defineclassifallowed    standarderror
scripterror   defineclassifallowed    exceptionclass
rangeerror   defineclassifallowed    standarderror
signalexception   defineclassifallowed    exceptionclass
if  profile allowclass
nameerror   rubynameerror createnameerrorclass this  standarderror
nameerrormessage   rubynameerror createnameerrormessageclass this  nameerror
if  profile allowclass
nomethoderror   rubynomethoderror createnomethoderrorclass this  nameerror
if  profile allowclass
systemexit   rubysystemexit createsystemexitclass this  exceptionclass
if  profile allowclass
localjumperror   rubylocaljumperror createlocaljumperrorclass this  standarderror
if  profile allowclass
nativeexception   nativeexception createclass this  runtimeerror
if  profile allowclass
systemcallerror   rubysystemcallerror createsystemcallerrorclass this  standarderror
fatal   defineclassifallowed    exceptionclass
interrupt   defineclassifallowed    signalexception
typeerror   defineclassifallowed    standarderror
argumenterror   defineclassifallowed    standarderror
indexerror   defineclassifallowed    standarderror
stopiteration   defineclassifallowed    indexerror
syntaxerror   defineclassifallowed    scripterror
loaderror   defineclassifallowed    scripterror
notimplementederror   defineclassifallowed    scripterror
securityerror   defineclassifallowed    standarderror
nomemoryerror   defineclassifallowed    exceptionclass
regexperror   defineclassifallowed    standarderror
eoferror   defineclassifallowed    ioerror
threaderror   defineclassifallowed    standarderror
concurrencyerror   defineclassifallowed    threaderror
systemstackerror   defineclassifallowed    standarderror
zerodivisionerror   defineclassifallowed    standarderror
floatdomainerror    defineclassifallowed    rangeerror
if  is1_9
if  profile allowclass
encodingerror   defineclass    standarderror  standarderror getallocator
encodingcompatibilityerror   defineclassunder    encodingerror  encodingerror getallocator    encodingclass
initerrno
private rubyclass defineclassifallowed string name  rubyclass superclass
// todo: should probably apply the null object pattern for a
// non-allowed class, rather than null
if  superclass    null    profile allowclass name
return defineclass name  superclass  superclass getallocator
return null
private map<integer  rubyclass> errnos   new hashmap<integer  rubyclass>
public rubyclass geterrno int n
return errnos get n
/**
* create module errno's variables.  we have this method since errno does not have it's
* own java class.
*/
private void initerrno
if  profile allowmodule
errnomodule   definemodule
try
for  errno e   errno values
constant c    constant  e
if  character isuppercase c name   charat 0
createsyserr c value    c name
catch  exception e
// dump the trace and continue
// this is currently only here for android, which seems to have
// bugs in its enumeration logic
// http://code.google.com/p/android/issues/detail?id=2812
e printstacktrace
/**
* creates a system error.
* @param i the error code (will probably use a java exception instead)
* @param name of the error to define.
**/
private void createsyserr int i  string name
if profile allowclass name
rubyclass errno   geterrno   defineclassunder name  systemcallerror  systemcallerror getallocator
errnos put i  errno
errno defineconstant    newfixnum i
private void initbuiltins
addlazybuiltin
addlazybuiltin
addlazybuiltin
addlazybuiltin
addlazybuiltin
addlazybuiltin
addlazybuiltin
addlazybuiltin
addlazybuiltin
addlazybuiltin
addlazybuiltin
addlazybuiltin
addlazybuiltin
addlazybuiltin
addlazybuiltin
addlazybuiltin
addlazybuiltin
addlazybuiltin
addlazybuiltin
addlazybuiltin
addlazybuiltin
addlazybuiltin
addlazybuiltin
addlazybuiltin
addlazybuiltin
addlazybuiltin
addlazybuiltin
addlazybuiltin
addlazybuiltin
addlazybuiltin
addlazybuiltin
addlazybuiltin
if rubyinstanceconfig native_net_protocol
addlazybuiltin
if  is1_9
loadservice reflectedload this        getjrubyclassloader    false
addbuiltinifallowed    new library
public void load ruby runtime  boolean wrap  throws ioexception
runtime getloadservice   require
string builtins
for  string library   builtins
addbuiltinifallowed library      new builtinscript library
rubykernel autoload topself  newsymbol     newstring
if is1_9
getloadservice   require
getloadservice   require
getloadservice   require
private void addlazybuiltin string name  string shortname  string classname
addbuiltinifallowed name  new lateloadinglibrary shortname  classname  getjrubyclassloader
private void addbuiltinifallowed string name  library lib
if profile allowbuiltin name
loadservice addbuiltinlibrary name lib
public object getrespondtomethod
return respondtomethod
public void setrespondtomethod object rtm
this respondtomethod   rtm
/** getter for property rubytopself.
* @return value of property rubytopself.
*/
public irubyobject gettopself
return topself
public void setcurrentdirectory string dir
currentdirectory   dir
public string getcurrentdirectory
return currentdirectory
public rubymodule getetc
return etcmodule
public void setetc rubymodule etcmodule
this etcmodule   etcmodule
public rubyclass getobject
return objectclass
public rubyclass getbasicobject
return basicobjectclass
public rubyclass getmodule
return moduleclass
public rubyclass getclassclass
return classclass
public rubymodule getkernel
return kernelmodule
void setkernel rubymodule kernelmodule
this kernelmodule   kernelmodule
public dynamicmethod getprivatemethodmissing
return privatemethodmissing
public void setprivatemethodmissing dynamicmethod method
privatemethodmissing   method
public dynamicmethod getprotectedmethodmissing
return protectedmethodmissing
public void setprotectedmethodmissing dynamicmethod method
protectedmethodmissing   method
public dynamicmethod getvariablemethodmissing
return variablemethodmissing
public void setvariablemethodmissing dynamicmethod method
variablemethodmissing   method
public dynamicmethod getsupermethodmissing
return supermethodmissing
public void setsupermethodmissing dynamicmethod method
supermethodmissing   method
public dynamicmethod getnormalmethodmissing
return normalmethodmissing
public void setnormalmethodmissing dynamicmethod method
normalmethodmissing   method
public dynamicmethod getdefaultmethodmissing
return defaultmethodmissing
public void setdefaultmethodmissing dynamicmethod method
defaultmethodmissing   method
public rubyclass getdummy
return dummyclass
public rubymodule getcomparable
return comparablemodule
void setcomparable rubymodule comparablemodule
this comparablemodule   comparablemodule
public rubyclass getnumeric
return numericclass
void setnumeric rubyclass numericclass
this numericclass   numericclass
public rubyclass getfloat
return floatclass
void setfloat rubyclass floatclass
this floatclass   floatclass
public rubyclass getinteger
return integerclass
void setinteger rubyclass integerclass
this integerclass   integerclass
public rubyclass getfixnum
return fixnumclass
void setfixnum rubyclass fixnumclass
this fixnumclass   fixnumclass
public rubyclass getcomplex
return complexclass
void setcomplex rubyclass complexclass
this complexclass   complexclass
public rubyclass getrational
return rationalclass
void setrational rubyclass rationalclass
this rationalclass   rationalclass
public rubymodule getenumerable
return enumerablemodule
void setenumerable rubymodule enumerablemodule
this enumerablemodule   enumerablemodule
public rubyclass getenumerator
return enumeratorclass
void setenumerator rubyclass enumeratorclass
this enumeratorclass   enumeratorclass
public rubyclass getyielder
return yielderclass
void setyielder rubyclass yielderclass
this yielderclass   yielderclass
public rubyclass getstring
return stringclass
void setstring rubyclass stringclass
this stringclass   stringclass
public rubyclass getencoding
return encodingclass
void setencoding rubyclass encodingclass
this encodingclass   encodingclass
public rubyclass getconverter
return converterclass
void setconverter rubyclass converterclass
this converterclass   converterclass
public rubyclass getsymbol
return symbolclass
void setsymbol rubyclass symbolclass
this symbolclass   symbolclass
public rubyclass getarray
return arrayclass
void setarray rubyclass arrayclass
this arrayclass   arrayclass
public rubyclass gethash
return hashclass
void sethash rubyclass hashclass
this hashclass   hashclass
public rubyclass getrange
return rangeclass
void setrange rubyclass rangeclass
this rangeclass   rangeclass
/** returns the "true" instance from the instance pool.
* @return the "true" instance.
*/
public rubyboolean gettrue
return trueobject
/** returns the "false" instance from the instance pool.
* @return the "false" instance.
*/
public rubyboolean getfalse
return falseobject
/** returns the "nil" singleton instance.
* @return "nil"
*/
public irubyobject getnil
return nilobject
public irubyobject getsinglenilarray
return singlenilarray
public rubyclass getnilclass
return nilclass
void setnilclass rubyclass nilclass
this nilclass   nilclass
public rubyclass gettrueclass
return trueclass
void settrueclass rubyclass trueclass
this trueclass   trueclass
public rubyclass getfalseclass
return falseclass
void setfalseclass rubyclass falseclass
this falseclass   falseclass
public rubyclass getproc
return procclass
void setproc rubyclass procclass
this procclass   procclass
public rubyclass getbinding
return bindingclass
void setbinding rubyclass bindingclass
this bindingclass   bindingclass
public rubyclass getmethod
return methodclass
void setmethod rubyclass methodclass
this methodclass   methodclass
public rubyclass getunboundmethod
return unboundmethodclass
void setunboundmethod rubyclass unboundmethodclass
this unboundmethodclass   unboundmethodclass
public rubyclass getmatchdata
return matchdataclass
void setmatchdata rubyclass matchdataclass
this matchdataclass   matchdataclass
public rubyclass getregexp
return regexpclass
void setregexp rubyclass regexpclass
this regexpclass   regexpclass
public rubyclass gettime
return timeclass
void settime rubyclass timeclass
this timeclass   timeclass
public rubymodule getmath
return mathmodule
void setmath rubymodule mathmodule
this mathmodule   mathmodule
public rubymodule getmarshal
return marshalmodule
void setmarshal rubymodule marshalmodule
this marshalmodule   marshalmodule
public rubyclass getbignum
return bignumclass
void setbignum rubyclass bignumclass
this bignumclass   bignumclass
public rubyclass getdir
return dirclass
void setdir rubyclass dirclass
this dirclass   dirclass
public rubyclass getfile
return fileclass
void setfile rubyclass fileclass
this fileclass   fileclass
public rubyclass getfilestat
return filestatclass
void setfilestat rubyclass filestatclass
this filestatclass   filestatclass
public rubymodule getfiletest
return filetestmodule
void setfiletest rubymodule filetestmodule
this filetestmodule   filetestmodule
public rubyclass getio
return ioclass
void setio rubyclass ioclass
this ioclass   ioclass
public rubyclass getthread
return threadclass
void setthread rubyclass threadclass
this threadclass   threadclass
public rubyclass getthreadgroup
return threadgroupclass
void setthreadgroup rubyclass threadgroupclass
this threadgroupclass   threadgroupclass
public rubythreadgroup getdefaultthreadgroup
return defaultthreadgroup
void setdefaultthreadgroup rubythreadgroup defaultthreadgroup
this defaultthreadgroup   defaultthreadgroup
public rubyclass getcontinuation
return continuationclass
void setcontinuation rubyclass continuationclass
this continuationclass   continuationclass
public rubyclass getstructclass
return structclass
void setstructclass rubyclass structclass
this structclass   structclass
public irubyobject gettmsstruct
return tmsstruct
void settmsstruct rubyclass tmsstruct
this tmsstruct   tmsstruct
public irubyobject getpasswdstruct
return passwdstruct
void setpasswdstruct rubyclass passwdstruct
this passwdstruct   passwdstruct
public irubyobject getgroupstruct
return groupstruct
void setgroupstruct rubyclass groupstruct
this groupstruct   groupstruct
public rubymodule getgc
return gcmodule
void setgc rubymodule gcmodule
this gcmodule   gcmodule
public rubymodule getobjectspacemodule
return objectspacemodule
void setobjectspacemodule rubymodule objectspacemodule
this objectspacemodule   objectspacemodule
public rubymodule getprocess
return processmodule
void setprocess rubymodule processmodule
this processmodule   processmodule
public rubyclass getprocstatus
return procstatusclass
void setprocstatus rubyclass procstatusclass
this procstatusclass   procstatusclass
public rubymodule getprocuid
return procuidmodule
void setprocuid rubymodule procuidmodule
this procuidmodule   procuidmodule
public rubymodule getprocgid
return procgidmodule
void setprocgid rubymodule procgidmodule
this procgidmodule   procgidmodule
public rubymodule getprocsysmodule
return procsysmodule
void setprocsys rubymodule procsysmodule
this procsysmodule   procsysmodule
public rubymodule getprecision
return precisionmodule
void setprecision rubymodule precisionmodule
this precisionmodule   precisionmodule
public rubymodule geterrno
return errnomodule
public rubyclass getexception
return exceptionclass
void setexception rubyclass exceptionclass
this exceptionclass   exceptionclass
public rubyclass getnameerror
return nameerror
public rubyclass getnameerrormessage
return nameerrormessage
public rubyclass getnomethoderror
return nomethoderror
public rubyclass getsignalexception
return signalexception
public rubyclass getrangeerror
return rangeerror
public rubyclass getsystemexit
return systemexit
public rubyclass getlocaljumperror
return localjumperror
public rubyclass getnativeexception
return nativeexception
public rubyclass getsystemcallerror
return systemcallerror
public rubyclass getfatal
return fatal
public rubyclass getinterrupt
return interrupt
public rubyclass gettypeerror
return typeerror
public rubyclass getargumenterror
return argumenterror
public rubyclass getindexerror
return indexerror
public rubyclass getstopiteration
return stopiteration
public rubyclass getsyntaxerror
return syntaxerror
public rubyclass getstandarderror
return standarderror
public rubyclass getruntimeerror
return runtimeerror
public rubyclass getioerror
return ioerror
public rubyclass getloaderror
return loaderror
public rubyclass getnotimplementederror
return notimplementederror
public rubyclass getsecurityerror
return securityerror
public rubyclass getnomemoryerror
return nomemoryerror
public rubyclass getregexperror
return regexperror
public rubyclass geteoferror
return eoferror
public rubyclass getthreaderror
return threaderror
public rubyclass getconcurrencyerror
return concurrencyerror
public rubyclass getsystemstackerror
return systemstackerror
public rubyclass getzerodivisionerror
return zerodivisionerror
public rubyclass getfloatdomainerror
return floatdomainerror
public rubyclass getencodingerror
return encodingerror
public rubyclass getencodingcompatibilityerror
return encodingcompatibilityerror
private rubyhash charsetmap
public rubyhash getcharsetmap
if  charsetmap    null  charsetmap   new rubyhash this
return charsetmap
/** getter for property isverbose.
* @return value of property isverbose.
*/
public irubyobject getverbose
return verbose
public boolean isverbose
return isverbose
public boolean warningsenabled
return warningsenabled
/** setter for property isverbose.
* @param verbose new value of property isverbose.
*/
public void setverbose irubyobject verbose
this verbose   verbose
isverbose   verbose istrue
warningsenabled    verbose isnil
/** getter for property isdebug.
* @return value of property isdebug.
*/
public irubyobject getdebug
return debug
/** setter for property isdebug.
* @param debug new value of property isdebug.
*/
public void setdebug irubyobject debug
this debug   debug
public javasupport getjavasupport
return javasupport
public static classloader getclassloader
// we try to get the classloader that loaded jruby, falling back on system
classloader loader   ruby class getclassloader
if  loader    null
loader   classloader getsystemclassloader
return loader
public synchronized jrubyclassloader getjrubyclassloader
// fixme: get rid of laziness and handle restricted access elsewhere
if   ruby issecurityrestricted      jrubyclassloader    null
jrubyclassloader   new jrubyclassloader config getloader
return jrubyclassloader
/** defines a global variable
*/
public void definevariable final globalvariable variable
globalvariables define variable name    new iaccessor
public irubyobject getvalue
return variable get
public irubyobject setvalue irubyobject newvalue
return variable set newvalue
/** defines a readonly global variable
*
*/
public void definereadonlyvariable string name  irubyobject value
globalvariables definereadonly name  new valueaccessor value
public node parsefile inputstream in  string file  dynamicscope scope  int linenumber
if  parserstats    null  parserstats addloadparse
return parser parse file  in  scope  new parserconfiguration getkcode    linenumber  false  false  true  config
public node parsefile inputstream in  string file  dynamicscope scope
return parsefile in  file  scope  0
public node parseinline inputstream in  string file  dynamicscope scope
if  parserstats    null  parserstats addevalparse
return parser parse file  in  scope  new parserconfiguration getkcode    0  false  true  false  config
public node parseeval string content  string file  dynamicscope scope  int linenumber
byte bytes
try
bytes   content getbytes kcode none getkcode
catch  unsupportedencodingexception e
bytes   content getbytes
if  parserstats    null  parserstats addevalparse
return parser parse file  new bytearrayinputstream bytes   scope
new parserconfiguration getkcode    linenumber  false  false  true  config
@deprecated
public node parse string content  string file  dynamicscope scope  int linenumber
boolean extrapositioninformation
byte bytes
try
bytes   content getbytes kcode none getkcode
catch  unsupportedencodingexception e
bytes   content getbytes
return parser parse file  new bytearrayinputstream bytes   scope
new parserconfiguration getkcode    linenumber  extrapositioninformation  false  true  config
public node parseeval bytelist content  string file  dynamicscope scope  int linenumber
if  parserstats    null  parserstats addevalparse
return parser parse file  content  scope  new parserconfiguration getkcode    linenumber  false  false  true  config
public node parse bytelist content  string file  dynamicscope scope  int linenumber
boolean extrapositioninformation
if  parserstats    null  parserstats addjrubymoduleparse
return parser parse file  content  scope
new parserconfiguration getkcode    linenumber  extrapositioninformation  false  true  config
public threadservice getthreadservice
return threadservice
public threadcontext getcurrentcontext
return threadservice getcurrentcontext
/**
* returns the loadservice.
* @return iloadservice
*/
public loadservice getloadservice
return loadservice
public encoding getdefaultinternalencoding
return defaultinternalencoding
public void setdefaultinternalencoding encoding defaultinternalencoding
this defaultinternalencoding   defaultinternalencoding
public encoding getdefaultexternalencoding
return defaultexternalencoding
public void setdefaultexternalencoding encoding defaultexternalencoding
this defaultexternalencoding   defaultexternalencoding
public encodingservice getencodingservice
return encodingservice
public rubywarnings getwarnings
return warnings
public printstream geterrorstream
// fixme: we can't guarantee this will always be a rubyio...so the old code here is not safe
/*java.io.outputstream os = ((rubyio) getglobalvariables().get("$stderr")).getoutstream();
if(null != os) {
return new printstream(os);
} else {
return new printstream(new org.jruby.util.swallowingoutputstream());
}*/
return new printstream new iooutputstream getglobalvariables   get
public inputstream getinputstream
return new ioinputstream getglobalvariables   get
public printstream getoutputstream
return new printstream new iooutputstream getglobalvariables   get
public rubymodule getclassfrompath string path
rubymodule c   getobject
if  path length      0    path charat 0
throw newtypeerror     path
int pbeg   0  p   0
for int l path length    p<l
while p<l    path charat p
p
string str   path substring pbeg  p
if p<l    path charat p
if p 1 < l    path charat p 1
throw newtypeerror     path substring pbeg p
p    2
pbeg   p
irubyobject cc   c getconstant str
if   cc instanceof rubymodule
throw newtypeerror     path
c    rubymodule cc
return c
/** prints an error with backtrace to the error stream.
*
* mri: eval.c - error_print()
*
*/
public void printerror rubyexception excp
if  excp    null    excp isnil
return
if  rubyexception trace_type    rubyexception rubinius
printrubiniustrace excp
return
threadcontext context   getcurrentcontext
irubyobject backtrace   excp callmethod context
printstream errorstream   geterrorstream
if  backtrace isnil        backtrace instanceof rubyarray
if  context getfile      null
errorstream print context getfile         context getline
} else {
errorstream print context getline
else if    rubyarray  backtrace  getlength      0
printerrorpos context  errorstream
} else {
irubyobject mesg     rubyarray  backtrace  first
if  mesg isnil
printerrorpos context  errorstream
} else {
errorstream print mesg
rubyclass type   excp getmetaclass
string info   excp tostring
if  type    getruntimeerror       info    null    info length      0
errorstream print
} else {
string path   type getname
if  info length      0
errorstream print     path
} else {
if  path startswith
path   null
string tail   null
if  info indexof        1
tail   info substring info indexof      1
info   info substring 0  info indexof
errorstream print     info
if  path    null
errorstream print     path
if  tail    null
errorstream print tail
excp printbacktrace errorstream
private void printrubiniustrace rubyexception exception
threadcontext rubystacktraceelement frames   exception getbacktraceframes
arraylist firstparts   new arraylist
int longestfirstpart   0
for  threadcontext rubystacktraceelement frame   frames
string firstpart   frame getclassname         frame getmethodname
if  firstpart length   > longestfirstpart  longestfirstpart   firstpart length
firstparts add firstpart
// determine spacing
int center   longestfirstpart
2    initial spaces
1     spaces before
stringbuffer buffer   new stringbuffer
buffer
append
append
if  exception getmetaclass      getruntimeerror      exception message getcurrentcontext    tostring   length      0
buffer append
} else {
buffer append exception message getcurrentcontext    tostring
buffer
append
append
append
int i   0
for  threadcontext rubystacktraceelement frame   frames
string firstpart    string firstparts get i
string secondpart   frame getfilename         frame getlinenumber
buffer append
for  int j   0  j < center   firstpart length    j
buffer append
buffer append firstpart
buffer append
buffer append secondpart
buffer append
i
printstream errorstream   geterrorstream
errorstream print buffer tostring
private void printerrorpos threadcontext context  printstream errorstream
if  context getfile      null
if  context getframename      null
errorstream print context getfile         context getline
errorstream print     context getframename
else if  context getline      0
errorstream print context getfile         context getline
} else {
errorstream print context getfile
public void loadfile string scriptname  inputstream in  boolean wrap
irubyobject self   wrap ? topselffactory createtopself this    gettopself
threadcontext context   getcurrentcontext
string file   context getfile
try
secure 4      should alter global state
context setfile scriptname
context prenodeeval objectclass  self  scriptname
parsefile in  scriptname  null  interpret this  context  self  block null_block
catch  jumpexception returnjump rj
return
finally
context postnodeeval
context setfile file
public void compileandloadfile string filename  inputstream in  boolean wrap
irubyobject self   wrap ? topselffactory createtopself this    gettopself
threadcontext context   getcurrentcontext
string file   context getfile
try
secure 4      should alter global state
context setfile filename
context prenodeeval objectclass  self  filename
node scriptnode   parsefile in  filename  null
script script   trycompile scriptnode  new jrubyclassloader jrubyclassloader
if  script    null
system err println
runscript script
catch  jumpexception returnjump rj
return
finally
context postnodeeval
context setfile file
public void loadscript script script
irubyobject self   gettopself
threadcontext context   getcurrentcontext
try
secure 4      should alter global state
context prenodeeval objectclass  self
script load context  self  irubyobject null_array  block null_block
catch  jumpexception returnjump rj
return
finally
context postnodeeval
public class calltracefunchook extends eventhook
private rubyproc tracefunc
public void settracefunc rubyproc tracefunc
this tracefunc   tracefunc
public void eventhandler threadcontext context  string eventname  string file  int line  string name  irubyobject type
if   context iswithintrace
if  file    null  file
if  type    null  type   getfalse
rubybinding binding   rubybinding newbinding ruby this  context currentbinding
context pretrace
try
tracefunc call context  new irubyobject
newstring eventname      event name
newstring file      filename
newfixnum line      line numbers should be 1 based
name    null ? newsymbol name    getnil
binding
type
finally
context posttrace
public boolean isinterestedinevent rubyevent event
return true
private final calltracefunchook calltracefunchook   new calltracefunchook
public void addeventhook eventhook hook
eventhooks add hook
haseventhooks   true
public void removeeventhook eventhook hook
eventhooks remove hook
haseventhooks    eventhooks isempty
public void settracefunction rubyproc tracefunction
removeeventhook calltracefunchook
if  tracefunction    null
return
calltracefunchook settracefunc tracefunction
addeventhook calltracefunchook
public void calleventhooks threadcontext context  rubyevent event  string file  int line  string name  irubyobject type
for  eventhook eventhook   eventhooks
if  eventhook isinterestedinevent event
eventhook event context  event  file  line  name  type
public boolean haseventhooks
return haseventhooks
public globalvariables getglobalvariables
return globalvariables
// for jsr 223 support: see http://scripting.java.net/
public void setglobalvariables globalvariables globalvariables
this globalvariables   globalvariables
public callbackfactory callbackfactory class<?> type
return callbackfactory createfactory this  type
/**
* push block onto exit stack.  when runtime environment exits
* these blocks will be evaluated.
*
* @return the element that was pushed onto stack
*/
public irubyobject pushexitblock rubyproc proc
atexitblocks push proc
return proc
// use this for jruby-internal finalizers
public void addinternalfinalizer finalizable finalizer
synchronized  internalfinalizersmutex
if  internalfinalizers    null
internalfinalizers   new weakhashmap<finalizable  object>
internalfinalizers put finalizer  null
// this method is for finalizers registered via objectspace
public void addfinalizer finalizable finalizer
synchronized  finalizersmutex
if  finalizers    null
finalizers   new weakhashmap<finalizable  object>
finalizers put finalizer  null
public void removeinternalfinalizer finalizable finalizer
synchronized  internalfinalizersmutex
if  internalfinalizers    null
internalfinalizers remove finalizer
public void removefinalizer finalizable finalizer
synchronized  finalizersmutex
if  finalizers    null
finalizers remove finalizer
/**
* make sure kernel#at_exit procs get invoked on runtime shutdown.
* this method needs to be explicitly called to work properly.
* i thought about using finalize(), but that did not work and i
* am not sure the runtime will be at a state to run procs by the
* time ruby is going away.  this method can contain any other
* things that need to be cleaned up at shutdown.
*/
public void teardown
int status   0
while   atexitblocks empty
rubyproc proc   atexitblocks pop
try
proc call getcurrentcontext    irubyobject null_array
catch  raiseexception rj
rubyexception raisedexception   rj getexception
if   getsystemexit   isinstance raisedexception
status   1
printerror raisedexception
} else {
irubyobject statusobj   raisedexception callmethod
getcurrentcontext
if  statusobj    null     statusobj isnil
status   rubynumeric fix2int statusobj
if  finalizers    null
synchronized  finalizers
for  iterator<finalizable> finaliter   new arraylist<finalizable> finalizers keyset    iterator    finaliter hasnext
finalizable f   finaliter next
if  f    null
f finalize
finaliter remove
synchronized  internalfinalizersmutex
if  internalfinalizers    null
for  iterator<finalizable> finaliter   new arraylist<finalizable>
internalfinalizers keyset    iterator    finaliter hasnext
finalizable f   finaliter next
if  f    null
f finalize
finaliter remove
getthreadservice   disposecurrentthread
getbeanmanager   unregistercompiler
getbeanmanager   unregisterconfig
getbeanmanager   unregisterparserstats
getbeanmanager   unregisterclasscache
getbeanmanager   unregistermethodcache
if  status    0
throw newsystemexit status
// new factory methods ------------------------------------------------------------------------
public rubyarray newemptyarray
return rubyarray newemptyarray this
public rubyarray newarray
return rubyarray newarray this
public rubyarray newarraylight
return rubyarray newarraylight this
public rubyarray newarray irubyobject object
return rubyarray newarray this  object
public rubyarray newarray irubyobject car  irubyobject cdr
return rubyarray newarray this  car  cdr
public rubyarray newarray irubyobject    objects
return rubyarray newarray this  objects
public rubyarray newarraynocopy irubyobject    objects
return rubyarray newarraynocopy this  objects
public rubyarray newarraynocopylight irubyobject    objects
return rubyarray newarraynocopylight this  objects
public rubyarray newarray list<irubyobject> list
return rubyarray newarray this  list
public rubyarray newarray int size
return rubyarray newarray this  size
public rubyboolean newboolean boolean value
return value ? trueobject   falseobject
public rubyfilestat newfilestat string filename  boolean lstat
return rubyfilestat newfilestat this  filename  lstat
public rubyfilestat newfilestat filedescriptor descriptor
return rubyfilestat newfilestat this  descriptor
public rubyfixnum newfixnum long value
return rubyfixnum newfixnum this  value
public rubyfixnum newfixnum int value
return rubyfixnum newfixnum this  value
public rubyfixnum newfixnum constant value
return rubyfixnum newfixnum this  value value
public rubyfloat newfloat double value
return rubyfloat newfloat this  value
public rubynumeric newnumeric
return rubynumeric newnumeric this
public rubyproc newproc block type type  block block
if  type    block type lambda    block getprocobject      null  return block getprocobject
rubyproc proc    rubyproc newproc this  type
proc callinit irubyobject null_array  block
return proc
public rubyproc newblockpassproc block type type  block block
if  type    block type lambda    block getprocobject      null  return block getprocobject
rubyproc proc    rubyproc newproc this  type
proc initialize getcurrentcontext    block
return proc
public rubybinding newbinding
return rubybinding newbinding this  getcurrentcontext   currentbinding
public rubybinding newbinding binding binding
return rubybinding newbinding this  binding
public rubystring newstring
return rubystring newstring this  new bytelist
public rubystring newstring string string
return rubystring newstring this  string
public rubystring newstring bytelist bytelist
return rubystring newstring this  bytelist
@deprecated
public rubystring newstringshared bytelist bytelist
return rubystring newstringshared this  bytelist
public rubysymbol newsymbol string name
return symboltable getsymbol name
/**
* faster than {@link #newsymbol(string)} if you already have an interned
* name string. don't intern your string just to call this version - the
* overhead of interning will more than wipe out any benefit from the faster
* lookup.
*
* @param internedname the symbol name, <em>must</em> be interned! if in
*                     doubt, call {@link #newsymbol(string)} instead.
* @return the symbol for name
*/
public rubysymbol fastnewsymbol string internedname
//        assert internedname == internedname.intern() : internedname + " is not interned";
return symboltable fastgetsymbol internedname
public rubytime newtime long milliseconds
return rubytime newtime this  milliseconds
public raiseexception newruntimeerror string message
return newraiseexception getruntimeerror    message
public raiseexception newargumenterror string message
return newraiseexception getargumenterror    message
public raiseexception newargumenterror int got  int expected
return newraiseexception getargumenterror        got       expected
public raiseexception newerrnoebadferror
return newraiseexception geterrno   fastgetclass
public raiseexception newerrnoenoprotoopterror
return newraiseexception geterrno   fastgetclass
public raiseexception newerrnoepipeerror
return newraiseexception geterrno   fastgetclass
public raiseexception newerrnoeconnrefusederror
return newraiseexception geterrno   fastgetclass
public raiseexception newerrnoeconnreseterror
return newraiseexception geterrno   fastgetclass
public raiseexception newerrnoeaddrinuseerror
return newraiseexception geterrno   fastgetclass
public raiseexception newerrnoeinvalerror
return newraiseexception geterrno   fastgetclass
public raiseexception newerrnoenoenterror
return newraiseexception geterrno   fastgetclass
public raiseexception newerrnoeacceserror string message
return newraiseexception geterrno   fastgetclass     message
public raiseexception newerrnoeagainerror string message
return newraiseexception geterrno   fastgetclass     message
public raiseexception newerrnoeisdirerror string message
return newraiseexception geterrno   fastgetclass     message
public raiseexception newerrnoeisdirerror
return newerrnoeisdirerror
public raiseexception newerrnoespipeerror
return newraiseexception geterrno   fastgetclass
public raiseexception newerrnoebadferror string message
return newraiseexception geterrno   fastgetclass     message
public raiseexception newerrnoeinvalerror string message
return newraiseexception geterrno   fastgetclass     message
public raiseexception newerrnoenotdirerror string message
return newraiseexception geterrno   fastgetclass     message
public raiseexception newerrnoenotsockerror string message
return newraiseexception geterrno   fastgetclass     message
public raiseexception newerrnoenoenterror string message
return newraiseexception geterrno   fastgetclass     message
public raiseexception newerrnoespipeerror string message
return newraiseexception geterrno   fastgetclass     message
public raiseexception newerrnoeexisterror string message
return newraiseexception geterrno   fastgetclass     message
public raiseexception newerrnoedomerror string message
return newraiseexception geterrno   fastgetclass         message
public raiseexception newerrnoechilderror
return newraiseexception geterrno   fastgetclass
public raiseexception newindexerror string message
return newraiseexception getindexerror    message
public raiseexception newsecurityerror string message
return newraiseexception getsecurityerror    message
public raiseexception newsystemcallerror string message
return newraiseexception getsystemcallerror    message
public raiseexception newerrnofromlastposixerrno
return newraiseexception geterrno getposix   errno     null
public raiseexception newtypeerror string message
return newraiseexception gettypeerror    message
public raiseexception newthreaderror string message
return newraiseexception getthreaderror    message
public raiseexception newconcurrencyerror string message
return newraiseexception getconcurrencyerror    message
public raiseexception newsyntaxerror string message
return newraiseexception getsyntaxerror    message
public raiseexception newregexperror string message
return newraiseexception getregexperror    message
public raiseexception newrangeerror string message
return newraiseexception getrangeerror    message
public raiseexception newnotimplementederror string message
return newraiseexception getnotimplementederror    message
public raiseexception newinvalidencoding string message
return newraiseexception fastgetclass    fastgetclass     message
public raiseexception newnomethoderror string message  string name  irubyobject args
return new raiseexception new rubynomethoderror this  getnomethoderror    message  name  args   true
public raiseexception newnameerror string message  string name
return newnameerror message  name  null
public raiseexception newnameerror string message  string name  throwable origexception
return newnameerror message  name  origexception  true
public raiseexception newnameerror string message  string name  throwable origexception  boolean printwhenverbose
if  printwhenverbose    origexception    null    this isverbose
origexception printstacktrace geterrorstream
return new raiseexception new rubynameerror
this  getnameerror    message  name   true
public raiseexception newlocaljumperror rubylocaljumperror reason reason  irubyobject exitvalue  string message
return new raiseexception new rubylocaljumperror this  getlocaljumperror    message  reason  exitvalue   true
public raiseexception newlocaljumperrornoblock
return newlocaljumperror rubylocaljumperror reason noreason  getnil
public raiseexception newredolocaljumperror
return new raiseexception new rubylocaljumperror this  getlocaljumperror       rubylocaljumperror reason redo  getnil     true
public raiseexception newloaderror string message
return newraiseexception getloaderror    message
public raiseexception newfrozenerror string objecttype
// todo: should frozen error have its own distinct class?  if not should more share?
return newraiseexception is1_9   ? getruntimeerror     gettypeerror        objecttype
public raiseexception newsystemstackerror string message
return newraiseexception getsystemstackerror    message
public raiseexception newsystemstackerror string message  stackoverflowerror soe
if  getdebug   istrue
soe printstacktrace getinstanceconfig   geterror
return newraiseexception getsystemstackerror    message
public raiseexception newsystemexit int status
return new raiseexception rubysystemexit newinstance this  status
public raiseexception newioerror string message
return newraiseexception getioerror    message
public raiseexception newstandarderror string message
return newraiseexception getstandarderror    message
public raiseexception newioerrorfromexception ioexception ioe
// todo: this is kinda gross
if ioe getmessage      null
if  ioe getmessage   equals
throw newerrnoepipeerror
else if  ioe getmessage   equals
throw newerrnoeconnreseterror
return newraiseexception getioerror    ioe getmessage
} else {
return newraiseexception getioerror
public raiseexception newtypeerror irubyobject receivedobject  rubyclass expectedtype
return newraiseexception gettypeerror
receivedobject getmetaclass   getrealclass         expectedtype
public raiseexception neweoferror
return newraiseexception geteoferror
public raiseexception neweoferror string message
return newraiseexception geteoferror    message
public raiseexception newzerodivisionerror
return newraiseexception getzerodivisionerror
public raiseexception newfloatdomainerror string message
return newraiseexception getfloatdomainerror    message
public raiseexception newencodingerror string message
return newraiseexception getencodingerror    message
public raiseexception newencodingcompatibilityerror string message
return newraiseexception getencodingcompatibilityerror    message
/**
* @param exceptionclass
* @param message
* @return
*/
private raiseexception newraiseexception rubyclass exceptionclass  string message
raiseexception re   new raiseexception this  exceptionclass  message  true
return re
// equivalent of data_wrap_struct
public rubyobject data newdata rubyclass objectclass  object sval
return new rubyobject data this  objectclass  sval
public rubysymbol symboltable getsymboltable
return symboltable
public void setstacktraces int stacktraces
this stacktraces   stacktraces
public int getstacktraces
return stacktraces
public void setrandomseed long randomseed
this randomseed   randomseed
public long getrandomseed
return randomseed
public random getrandom
return random
public objectspace getobjectspace
return objectspace
private class weakdescriptorreference extends weakreference
private int fileno
public weakdescriptorreference channeldescriptor descriptor  referencequeue queue
super descriptor  queue
this fileno   descriptor getfileno
public int getfileno
return fileno
public map<integer  weakdescriptorreference> getdescriptors
return descriptors
private void cleandescriptors
reference reference
while   reference   descriptorqueue poll       null
int fileno     weakdescriptorreference reference  getfileno
descriptors remove fileno
public void registerdescriptor channeldescriptor descriptor  boolean isretained
cleandescriptors
integer filenokey   descriptor getfileno
descriptors put filenokey  new weakdescriptorreference descriptor  descriptorqueue
if  isretained
retaineddescriptors put filenokey  descriptor
public void registerdescriptor channeldescriptor descriptor
registerdescriptor descriptor false      default  don't retain
public void unregisterdescriptor int afileno
cleandescriptors
integer afilenokey   afileno
descriptors remove afilenokey
retaineddescriptors remove afilenokey
public channeldescriptor getdescriptorbyfileno int afileno
cleandescriptors
reference reference   descriptors get afileno
if  reference    null
return null
return  channeldescriptor reference get
public long incrementrandomseedsequence
return randomseedsequence
public inputstream getin
return in
public printstream getout
return out
public printstream geterr
return err
public boolean isglobalabortonexceptionenabled
return globalabortonexceptionenabled
public void setglobalabortonexceptionenabled boolean enable
globalabortonexceptionenabled   enable
public boolean isdonotreverselookupenabled
return donotreverselookupenabled
public void setdonotreverselookupenabled boolean b
donotreverselookupenabled   b
private threadlocal<map<object  object>> inspect   new threadlocal<map<object  object>>
public void registerinspecting object obj
map<object  object> val   inspect get
if  val    null  inspect set val   new identityhashmap<object  object>
val put obj  null
public boolean isinspecting object obj
map<object  object> val   inspect get
return val    null ? false   val containskey obj
public void unregisterinspecting object obj
map<object  object> val   inspect get
if  val    null   val remove obj
public boolean isobjectspaceenabled
return objectspaceenabled
// the method is intentionally not public, since it typically should
// not be used outside of the core.
package private    void setobjectspaceenabled boolean objectspaceenabled
this objectspaceenabled   objectspaceenabled
public long getstarttime
return starttime
public profile getprofile
return profile
public string getjrubyhome
return config getjrubyhome
public void setjrubyhome string home
config setjrubyhome home
public rubyinstanceconfig getinstanceconfig
return config
public boolean is1_9
return is1_9
/** get_vm_state_version */
public long getglobalstate
synchronized this
return globalstate
/** inc_vm_state_version */
public void incglobalstate
synchronized this
globalstate    globalstate 1    0x8fffffff
public static boolean issecurityrestricted
return securityrestricted
public static void setsecurityrestricted boolean restricted
securityrestricted   restricted
public posix getposix
return posix
public void setrecordseparatorvar globalvariable recordseparatorvar
this recordseparatorvar   recordseparatorvar
public globalvariable getrecordseparatorvar
return recordseparatorvar
public set<script> getjittedmethods
return jittedmethods
public executorservice getexecutor
return executor
public map<string  datetimezone> gettimezonecache
return timezonecache
public int getconstantgeneration
return constantgeneration
public synchronized void incrementconstantgeneration
constantgeneration
public <e extends enum<e>> void loadconstantset rubymodule module  class<e> enumclass
for  e e   enumset allof enumclass
constant c    constant  e
if  character isuppercase c name   charat 0
module fastsetconstant c name    newfixnum c value
public void loadconstantset rubymodule module  string constantsetname
for  constant c   constantset getconstantset constantsetname
if  character isuppercase c name   charat 0
module fastsetconstant c name    newfixnum c value
/**
* get a new serial number for a new dynamicmethod instance
* @return a new serial number
*/
public long getnextdynamicmethodserial
return dynamicmethodserial getandincrement
/**
* get the global object used to synchronize class-hierarchy modifications like
* cache invalidation, subclass sets, and included hierarchy sets.
*
* @return the object to use for locking when modifying the hierarchy
*/
public object gethierarchylock
return hierarchylock
private volatile int constantgeneration   1
private final threadservice threadservice
private posix posix
private int stacktraces   0
private objectspace objectspace   new objectspace
private final rubysymbol symboltable symboltable   new rubysymbol symboltable this
private map<integer  weakdescriptorreference> descriptors   new concurrenthashmap<integer  weakdescriptorreference>
private referencequeue<channeldescriptor> descriptorqueue   new referencequeue<channeldescriptor>
// channeldescriptors opened by sysopen are cached to avoid collection
private map<integer  channeldescriptor> retaineddescriptors   new concurrenthashmap<integer  channeldescriptor>
private long randomseed   0
private long randomseedsequence   0
private random random   new random
private list<eventhook> eventhooks   new vector<eventhook>
private boolean haseventhooks
private boolean globalabortonexceptionenabled   false
private boolean donotreverselookupenabled   false
private volatile boolean objectspaceenabled
private final set<script> jittedmethods   collections synchronizedset new weakhashset<script>
private static threadlocal<ruby> currentruntime   new threadlocal<ruby>
private long globalstate   1
private int safelevel    1
// default objects
private irubyobject topself
private rubynil nilobject
private irubyobject singlenilarray
private rubyboolean trueobject
private rubyboolean falseobject
public final rubyfixnum fixnumcache   new rubyfixnum
private irubyobject verbose
private boolean isverbose  warningsenabled
private irubyobject debug
private rubythreadgroup defaultthreadgroup
/**
* all the core classes we keep hard references to. these are here largely
* so that if someone redefines string or array we won't start blowing up
* creating strings and arrays internally. they also provide much faster
* access than going through normal hash lookup on the object class.
*/
private rubyclass
basicobjectclass  objectclass  moduleclass  classclass  nilclass  trueclass
falseclass  numericclass  floatclass  integerclass  fixnumclass
complexclass  rationalclass  enumeratorclass  yielderclass
arrayclass  hashclass  rangeclass  stringclass  encodingclass  converterclass  symbolclass
procclass  bindingclass  methodclass  unboundmethodclass
matchdataclass  regexpclass  timeclass  bignumclass  dirclass
fileclass  filestatclass  ioclass  threadclass  threadgroupclass
continuationclass  structclass  tmsstruct  passwdstruct
groupstruct  procstatusclass  exceptionclass  runtimeerror  ioerror
scripterror  nameerror  nameerrormessage  nomethoderror  signalexception
rangeerror  dummyclass  systemexit  localjumperror  nativeexception
systemcallerror  fatal  interrupt  typeerror  argumenterror  indexerror  stopiteration
syntaxerror  standarderror  loaderror  notimplementederror  securityerror  nomemoryerror
regexperror  eoferror  threaderror  concurrencyerror  systemstackerror  zerodivisionerror  floatdomainerror
encodingerror  encodingcompatibilityerror
/**
* all the core modules we keep direct references to, for quick access and
* to ensure they remain available.
*/
private rubymodule
kernelmodule  comparablemodule  enumerablemodule  mathmodule
marshalmodule  etcmodule  filetestmodule  gcmodule
objectspacemodule  processmodule  procuidmodule  procgidmodule
procsysmodule  precisionmodule  errnomodule
private dynamicmethod privatemethodmissing  protectedmethodmissing  variablemethodmissing
supermethodmissing  normalmethodmissing  defaultmethodmissing
// record separator var, to speed up io ops that use it
private globalvariable recordseparatorvar
// former java.lang.system concepts now internalized for mvm
private string currentdirectory
private long starttime   system currenttimemillis
private final rubyinstanceconfig config
private final boolean is1_9
private final inputstream in
private final printstream out
private final printstream err
// java support
private javasupport javasupport
private jrubyclassloader jrubyclassloader
// management/monitoring
private beanmanager beanmanager
// parser stats
private parserstats parserstats
// compilation
private final jitcompiler jitcompiler
// note: this field and the following static initializer
// must be located be in this order!
private volatile static boolean securityrestricted   false
static
if  safepropertyaccessor issecurityprotected
// can't read non-standard properties
securityrestricted   true
} else {
securitymanager sm   system getsecuritymanager
if  sm    null
try
sm checkcreateclassloader
catch  securityexception se
// can't create custom classloaders
securityrestricted   true
private parser parser   new parser this
private loadservice loadservice
private encoding defaultinternalencoding  defaultexternalencoding
private encodingservice encodingservice
private globalvariables globalvariables   new globalvariables this
private rubywarnings warnings   new rubywarnings this
// contains a list of all blocks (as procs) that should be called when
// the runtime environment exits.
private stack<rubyproc> atexitblocks   new stack<rubyproc>
private profile profile
private kcode kcode   kcode none
// atomic integers for symbol and method ids
private atomicinteger symbollastid   new atomicinteger 128
private atomicinteger modulelastid   new atomicinteger 0
private object respondtomethod
private map<string  datetimezone> timezonecache   new hashmap<string datetimezone>
/**
* a list of "external" finalizers (the ones, registered via objectspace),
* weakly referenced, to be executed on teardown.
*/
private map<finalizable  object> finalizers
/**
* a list of jruby-internal finalizers,  weakly referenced,
* to be executed on teardown.
*/
private map<finalizable  object> internalfinalizers
// mutex that controls modifications of user-defined finalizers
private final object finalizersmutex   new object
// mutex that controls modifications of internal finalizers
private final object internalfinalizersmutex   new object
// a thread pool to use for executing this runtime's ruby threads
private executorservice executor
// a global object lock for class hierarchy mutations
private object hierarchylock   new object
// an atomic long for generating dynamicmethod serial numbers
private atomiclong dynamicmethodserial   new atomiclong 0