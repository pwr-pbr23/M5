/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2006 the jruby community <www.jruby.org>
* copyright (c) 2006 ola bini <ola@ologix.com>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby internal runtime methods
import java io printwriter
import java lang reflect modifier
import java util list
import org jruby ruby
import org jruby rubyinstanceconfig
import org jruby rubykernel
import org jruby parser staticscope
import org objectweb asm classwriter
import org objectweb asm methodvisitor
import org objectweb asm opcodes
import org jruby rubymodule
import org jruby rubystring
import org jruby anno jrubymethod
import org jruby anno javamethoddescriptor
import org jruby compiler impl skinnymethodadapter
import org jruby compiler impl standardasmcompiler
import org jruby exceptions jumpexception
import org jruby exceptions raiseexception
import org jruby runtime arity
import org jruby runtime block
import org jruby runtime compiledblockcallback
import org jruby runtime compiledblockcallback19
import org jruby runtime methodfactory
import org jruby runtime threadcontext
import org jruby runtime visibility
import org jruby runtime builtin irubyobject
import org jruby util codegenutils
import static org jruby util codegenutils
import static java lang system
import org jruby util jrubyclassloader
import org objectweb asm classreader
import org objectweb asm label
import org objectweb asm util checkclassadapter
/**
* in order to avoid the overhead with reflection-based method handles, this
* methodfactory uses asm to generate tiny invoker classes. this allows for
* better performance and more specialization per-handle than can be supported
* via reflection. it also allows optimizing away many conditionals that can
* be determined once ahead of time.
*
* when running in secured environments, this factory may not function. when
* this can be detected, methodfactory will fall back on the reflection-based
* factory instead.
*
* @see org.jruby.internal.runtime.methods.methodfactory
*/
public class invocationmethodfactory extends methodfactory implements opcodes
private static final boolean debug   false
/** the pathname of the super class for compiled ruby method handles. */
private final static string compiled_super_class   p compiledmethod class
/** the outward call signature for compiled ruby method handles. */
private final static string compiled_call_sig   sig irubyobject class
params threadcontext class  irubyobject class  rubymodule class  string class  irubyobject class
/** the outward call signature for compiled ruby method handles. */
private final static string compiled_call_sig_block   sig irubyobject class
params threadcontext class  irubyobject class  rubymodule class  string class  irubyobject class  block class
/** the outward arity-zero call-with-block signature for compiled ruby method handles. */
private final static string compiled_call_sig_zero_block   sig irubyobject class
params threadcontext class  irubyobject class  rubymodule class  string class  block class
/** the outward arity-zero call-with-block signature for compiled ruby method handles. */
private final static string compiled_call_sig_zero   sig irubyobject class
params threadcontext class  irubyobject class  rubymodule class  string class
/** the outward arity-zero call-with-block signature for compiled ruby method handles. */
private final static string compiled_call_sig_one_block   sig irubyobject class
params threadcontext class  irubyobject class  rubymodule class  string class  irubyobject class  block class
/** the outward arity-zero call-with-block signature for compiled ruby method handles. */
private final static string compiled_call_sig_one   sig irubyobject class
params threadcontext class  irubyobject class  rubymodule class  string class  irubyobject class
/** the outward arity-zero call-with-block signature for compiled ruby method handles. */
private final static string compiled_call_sig_two_block   sig irubyobject class
params threadcontext class  irubyobject class  rubymodule class  string class  irubyobject class  irubyobject class  block class
/** the outward arity-zero call-with-block signature for compiled ruby method handles. */
private final static string compiled_call_sig_two   sig irubyobject class
params threadcontext class  irubyobject class  rubymodule class  string class  irubyobject class  irubyobject class
/** the outward arity-zero call-with-block signature for compiled ruby method handles. */
private final static string compiled_call_sig_three_block   sig irubyobject class
params threadcontext class  irubyobject class  rubymodule class  string class  irubyobject class  irubyobject class  irubyobject class  block class
/** the outward arity-zero call-with-block signature for compiled ruby method handles. */
private final static string compiled_call_sig_three   sig irubyobject class
params threadcontext class  irubyobject class  rubymodule class  string class  irubyobject class  irubyobject class  irubyobject class
private final static string block_call_sig   sig rubykernel iruby_object  params
threadcontext class  rubykernel iruby_object  irubyobject class
private final static string block_call_sig19   sig rubykernel iruby_object  params
threadcontext class  irubyobject class  irubyobject class  block class
/** the super constructor signature for java-based method handles. */
private final static string java_super_sig   sig void type  params rubymodule class  visibility class
/** the lvar index of "this" */
public static final int this_index   0
/** the lvar index of the passed-in threadcontext */
public static final int threadcontext_index   1
/** the lvar index of the method-receiving object */
public static final int receiver_index   2
/** the lvar index of the rubyclass being invoked against */
public static final int class_index   3
/** the lvar index method name being invoked */
public static final int name_index   4
/** the lvar index of the method args on the call */
public static final int args_index   5
/** the lvar index of the passed-in block on the call */
public static final int block_index   6
/** the classloader to use for code loading */
protected final jrubyclassloader classloader
/**
* whether this factory has seen undefined methods already. this is used to
* detect likely method handle collisions when we expect to create a new
* handle for each call.
*/
private boolean seenundefinedclasses   false
/**
* whether we've informed the user that we've seen undefined methods; this
* is to avoid a flood of repetitive information.
*/
private boolean havewarneduser   false
/**
* construct a new invocationmethodfactory using the specified classloader
* to load code. if the target classloader is not an instance of
* jrubyclassloader, it will be wrapped with one.
*
* @param classloader the classloader to use, or to wrap if it is not a
* jrubyclassloader instance.
*/
public invocationmethodfactory classloader classloader
if  classloader instanceof jrubyclassloader
this classloader    jrubyclassloader classloader
else
this classloader   new jrubyclassloader classloader
/**
* use code generation to provide a method handle for a compiled ruby method.
*
* @see org.jruby.internal.runtime.methods.methodfactory#getcompiledmethod
*/
public dynamicmethod getcompiledmethodlazily
rubymodule implementationclass  string method  arity arity
visibility visibility  staticscope scope  object scriptobject  callconfiguration callconfig
return new compiledmethod lazycompiledmethod implementationclass  method  arity  visibility  scope  scriptobject  callconfig
new invocationmethodfactory classloader
/**
* use code generation to provide a method handle for a compiled ruby method.
*
* @see org.jruby.internal.runtime.methods.methodfactory#getcompiledmethod
*/
public dynamicmethod getcompiledmethod
rubymodule implementationclass  string method  arity arity
visibility visibility  staticscope scope  object scriptobject  callconfiguration callconfig
string sup   compiled_super_class
class scriptclass   scriptobject getclass
string mname   scriptclass getname         method   arity
synchronized  classloader
class generatedclass   tryclass mname  scriptclass
try
if  generatedclass    null
string typepath   p scriptclass
string mnamepath   typepath       method   arity
classwriter cw
int dotindex   typepath lastindexof
cw   createcompiledctor mnamepath  typepath substring dotindex   1        method substring method lastindexof      1   sup
skinnymethodadapter mv   null
string signature   null
boolean specificarity   false
if  scope getrestarg   >  0    scope getoptionalargs   > 0    scope getrequiredargs   > 3
signature   compiled_call_sig_block
mv   new skinnymethodadapter cw visitmethod acc_public     signature  null  null
else
specificarity   true
mv   new skinnymethodadapter cw visitmethod acc_public     compiled_call_sig_block  null  null
mv start
// check arity
mv aload 0
mv aload 1
mv aload 4
mv aload 5
mv pushint scope getrequiredargs
mv invokestatic p javamethod class      sig void class  javamethod class  threadcontext class  string class  irubyobject class  int class
mv aload 0
mv aload 1
mv aload 2
mv aload 3
mv aload 4
for  int i   0  i < scope getrequiredargs    i
mv aload 5
mv ldc i
mv arrayload
mv aload 6
switch  scope getrequiredargs
case 0
signature   compiled_call_sig_zero_block
break
case 1
signature   compiled_call_sig_one_block
break
case 2
signature   compiled_call_sig_two_block
break
case 3
signature   compiled_call_sig_three_block
break
mv invokevirtual mnamepath     signature
mv areturn
mv end
// define a second version that doesn't take a block, so we have unique code paths for both cases.
switch  scope getrequiredargs
case 0
signature   compiled_call_sig_zero
break
case 1
signature   compiled_call_sig_one
break
case 2
signature   compiled_call_sig_two
break
case 3
signature   compiled_call_sig_three
break
mv   new skinnymethodadapter cw visitmethod acc_public     signature  null  null
mv start
mv aload 0
mv aload 1
mv aload 2
mv aload 3
mv aload 4
for  int i   1  i <  scope getrequiredargs    i
mv aload 4   i
mv getstatic p block class      ci block class
switch  scope getrequiredargs
case 0
signature   compiled_call_sig_zero_block
break
case 1
signature   compiled_call_sig_one_block
break
case 2
signature   compiled_call_sig_two_block
break
case 3
signature   compiled_call_sig_three_block
break
mv invokevirtual mnamepath     signature
mv areturn
mv end
mv   new skinnymethodadapter cw visitmethod acc_public     signature  null  null
mv visitcode
label line   new label
mv visitlinenumber 0  line
//                    // check arity
//                    checkarity(mv, scope);
// invoke pre method stuff
if   callconfig isnoop
if  specificarity
invokecallconfigpre mv  compiled_super_class  scope getrequiredargs    true  callconfig
else
invokecallconfigpre mv  compiled_super_class   1  true  callconfig
label trybegin   new label
label tryend   new label
label dofinally   new label
label doreturnfinally   new label
label doredofinally   new label
label catchreturnjump   new label
label catchredojump   new label
boolean heapscoped   callconfig scoping      scoping full
boolean framed   callconfig framing      framing full
if  heapscoped              mv trycatch trybegin  tryend  catchreturnjump  p jumpexception returnjump class
if  framed                  mv trycatch trybegin  tryend  catchredojump  p jumpexception redojump class
if  framed    heapscoped    mv trycatch trybegin  tryend  dofinally  null
if  heapscoped              mv trycatch catchreturnjump  doreturnfinally  dofinally  null
if  framed                  mv trycatch catchredojump  doredofinally  dofinally  null
if  framed    heapscoped    mv label trybegin
// main body
mv aload 0
// fixme we want to eliminate these type casts when possible
mv getfield mnamepath     ci object class
mv checkcast typepath
mv aload threadcontext_index
mv aload receiver_index
if  specificarity
for  int i   0  i < scope getrequiredargs    i
mv aload args_index   i
mv aload args_index   scope getrequiredargs
mv invokestatic typepath  method  standardasmcompiler getstaticmethodsignature typepath  scope getrequiredargs
else
mv aload args_index
mv aload block_index
mv invokestatic typepath  method  standardasmcompiler getstaticmethodsignature typepath  4
if  framed    heapscoped
mv label tryend
// normal exit, perform finally and return
if   callconfig isnoop
invokecallconfigpost mv  compiled_super_class  callconfig
mv visitinsn areturn
// return jump handling
if  heapscoped
mv label catchreturnjump
mv aload 0
mv swap
mv aload 1
mv swap
mv invokevirtual compiled_super_class     sig irubyobject class  threadcontext class  jumpexception returnjump class
mv label doreturnfinally
// finally
if   callconfig isnoop
invokecallconfigpost mv  compiled_super_class  callconfig
// return result if we're still good
mv areturn
if  framed
// redo jump handling
mv label catchredojump
// clear the redo
mv pop
// get runtime, create jump error, and throw it
mv aload 1
mv invokevirtual p threadcontext class      sig ruby class
mv invokevirtual p ruby class      sig raiseexception class
mv label doredofinally
// finally
if   callconfig isnoop
invokecallconfigpost mv  compiled_super_class  callconfig
// throw redo error if we're still good
mv athrow
// finally handling for abnormal exit
if  framed    heapscoped
mv label dofinally
//call post method stuff (exception raised)
if   callconfig isnoop
invokecallconfigpost mv  compiled_super_class  callconfig
// rethrow exception
mv athrow       rethrow it
generatedclass   endcall cw mv mname
compiledmethod compiledmethod    compiledmethod generatedclass newinstance
compiledmethod init implementationclass  arity  visibility  scope  scriptobject  callconfig
return compiledmethod
catch exception e
e printstacktrace
throw implementationclass getruntime   newloaderror e getmessage
private class descriptorinfo
private int min
private int max
private boolean frame
private boolean scope
private boolean backtrace
private boolean rest
private boolean block
public descriptorinfo list<javamethoddescriptor> descs
min   integer max_value
max   0
frame   false
scope   false
backtrace   false
rest   false
block   false
for  javamethoddescriptor desc  descs
int specificarity    1
if  desc hasvarargs
if  desc optional    0     desc rest
throw new runtimeexception     desc declaringclassname       desc name
rest   true
else
if  desc optional    0     desc rest
if  desc required    0
// no required specified, check actual number of required args
if  desc actualrequired <  3
// actual required is less than 3, so we use specific arity
specificarity   desc actualrequired
else
// actual required is greater than 3, raise error (we don't support actual required > 3)
throw new runtimeexception     desc actualrequired       desc declaringclassname       desc name
else if  desc required >  0    desc required <  3
if  desc actualrequired    desc required
throw new runtimeexception     desc declaringclassname       desc name
specificarity   desc required
if  specificarity < min
min   specificarity
if  specificarity > max
max   specificarity
frame    desc anno frame
scope    desc anno scope
backtrace    desc anno backtrace
block    desc hasblock
public boolean isbacktrace
return backtrace
public boolean isframe
return frame
public int getmax
return max
public int getmin
return min
public boolean isscope
return scope
public boolean isrest
return rest
public boolean isblock
return block
/**
* use code generation to provide a method handle based on an annotated java
* method.
*
* @see org.jruby.internal.runtime.methods.methodfactory#getannotatedmethod
*/
public dynamicmethod getannotatedmethod rubymodule implementationclass  list<javamethoddescriptor> descs
javamethoddescriptor desc1   descs get 0
string javamethodname   desc1 name
if  debug  out println     desc1 declaringclassname       javamethodname
synchronized  classloader
try
class c   getannotatedmethodclass descs
descriptorinfo info   new descriptorinfo descs
if  debug  out println     info getmin         info getmax
javamethod ic    javamethod c getconstructor new class rubymodule class  visibility class   newinstance new object implementationclass  desc1 anno visibility
ic setarity arity optional
ic setjavaname javamethodname
ic setsingleton desc1 isstatic
ic setcallconfig callconfiguration getcallconfig info isframe    info isscope    info isbacktrace
return ic
catch exception e
e printstacktrace
throw implementationclass getruntime   newloaderror e getmessage
/**
* use code generation to provide a method handle based on an annotated java
* method. return the resulting generated or loaded class.
*
* @see org.jruby.internal.runtime.methods.methodfactory#getannotatedmethod
*/
public class getannotatedmethodclass list<javamethoddescriptor> descs  throws exception
javamethoddescriptor desc1   descs get 0
if  descs size      1
// simple path, no multimethod
return getannotatedmethodclass desc1
if   modifier ispublic desc1 getdeclaringclass   getmodifiers
system err println     desc1 declaringclassname
string javamethodname   desc1 name
if  debug  out println     desc1 declaringclassname       javamethodname
string generatedclassname   codegenutils getannotatedbindingclassname javamethodname  desc1 declaringclassname  desc1 isstatic  desc1 actualrequired  desc1 optional  true  desc1 anno frame
if  rubyinstanceconfig full_trace_enabled
// in debug mode we append _dbg to class name to force it to regenerate (or use pre-generated debug version)
generatedclassname
string generatedclasspath   generatedclassname replace
synchronized  classloader
class c   tryclass generatedclassname  desc1 getdeclaringclass
descriptorinfo info   new descriptorinfo descs
if  debug  out println     info getmin         info getmax         info isblock         info isrest
if  c    null
class superclass   null
if  info getmin       1
// normal all-rest method
superclass   javamethod javamethodn class
else
if  info isrest
if  info isblock
superclass   javamethod block_rest_methods
else
superclass   javamethod rest_methods
else
if  info isblock
superclass   javamethod block_methods
else
superclass   javamethod methods
if  superclass    null  throw new runtimeexception
string superclassstring   p superclass
int dotindex   desc1 declaringclassname lastindexof
classwriter cw   createjavamethodctor generatedclasspath  desc1 declaringclassname substring dotindex   1        desc1 name  superclassstring
for  javamethoddescriptor desc  descs
int specificarity    1
if  desc optional    0     desc rest
if  desc required    0
if  desc actualrequired <  3
specificarity   desc actualrequired
else
specificarity    1
else if  desc required >  0    desc required <  3
specificarity   desc required
boolean hasblock   desc hasblock
skinnymethodadapter mv   null
mv   beginmethod cw     specificarity  hasblock
mv visitcode
label line   new label
mv visitlinenumber 0  line
createannotatedmethodinvocation desc  mv  superclassstring  specificarity  hasblock
endmethod mv
c   endclass cw  generatedclassname
return c
/**
* use code generation to provide a method handle based on an annotated java
* method.
*
* @see org.jruby.internal.runtime.methods.methodfactory#getannotatedmethod
*/
public dynamicmethod getannotatedmethod rubymodule implementationclass  javamethoddescriptor desc
string javamethodname   desc name
synchronized  classloader
try
class c   getannotatedmethodclass desc
javamethod ic    javamethod c getconstructor new class rubymodule class  visibility class   newinstance new object implementationclass  desc anno visibility
ic setarity arity fromannotation desc anno  desc actualrequired
ic setjavaname javamethodname
ic setsingleton desc isstatic
ic setcallconfig callconfiguration getcallconfigbyanno desc anno
return ic
catch exception e
e printstacktrace
throw implementationclass getruntime   newloaderror e getmessage
/**
* use code generation to provide a method handle based on an annotated java
* method.
*
* @see org.jruby.internal.runtime.methods.methodfactory#getannotatedmethod
*/
public class getannotatedmethodclass javamethoddescriptor desc  throws exception
string javamethodname   desc name
if   modifier ispublic desc getdeclaringclass   getmodifiers
system err println     desc declaringclassname
string generatedclassname   codegenutils getannotatedbindingclassname javamethodname  desc declaringclassname  desc isstatic  desc actualrequired  desc optional  false  desc anno frame
if  rubyinstanceconfig full_trace_enabled
// in debug mode we append _dbg to class name to force it to regenerate (or use pre-generated debug version)
generatedclassname
string generatedclasspath   generatedclassname replace
synchronized  classloader
class c   tryclass generatedclassname  desc getdeclaringclass
if  c    null
int specificarity    1
if  desc optional    0     desc rest
if  desc required    0
if  desc actualrequired <  3
specificarity   desc actualrequired
else
specificarity    1
else if  desc required >  0    desc required <  3
specificarity   desc required
boolean block   desc hasblock
string superclass   p selectsuperclass specificarity  block
int dotindex   desc declaringclassname lastindexof
classwriter cw   createjavamethodctor generatedclasspath  desc declaringclassname substring dotindex   1        desc name  superclass
skinnymethodadapter mv   null
mv   beginmethod cw     specificarity  block
mv visitcode
label line   new label
mv visitlinenumber 0  line
createannotatedmethodinvocation desc  mv  superclass  specificarity  block
endmethod mv
c   endclass cw  generatedclassname
return c
public compiledblockcallback getblockcallback string method  object scriptobject
class typeclass   scriptobject getclass
string typepathstring   p typeclass
string mname   typeclass getname         method
string mnamepath   typepathstring       method
synchronized  classloader
class c   tryclass mname
try
if  c    null
classwriter cw   createblockctor mnamepath  typeclass
skinnymethodadapter mv   startblockcall cw
mv aload 0
mv getfield mnamepath     ci typeclass
mv aload 1
mv aload 2
mv aload 3
mv invokestatic typepathstring  method  sig
rubykernel iruby_object      typepathstring      threadcontext class
rubykernel iruby_object  irubyobject class
mv areturn
mv visitmaxs 2  3
c   endcall cw  mv  mname
compiledblockcallback ic    compiledblockcallback  c getconstructor object class  newinstance scriptobject
return ic
catch  illegalargumentexception e
throw e
catch  exception e
e printstacktrace
throw new illegalargumentexception e getmessage
public compiledblockcallback19 getblockcallback19 string method  object scriptobject
class typeclass   scriptobject getclass
string typepathstring   p typeclass
string mname   typeclass getname         method
string mnamepath   typepathstring       method
synchronized  classloader
class c   tryclass mname
try
if  c    null
classwriter cw   createblockctor19 mnamepath  typeclass
skinnymethodadapter mv   startblockcall19 cw
mv aload 0
mv getfield mnamepath     ci typeclass
mv aload 1
mv aload 2
mv aload 3
mv aload 4
mv invokestatic typepathstring  method  sig
irubyobject class      typepathstring      threadcontext class
irubyobject class  irubyobject class  block class
mv areturn
mv visitmaxs 2  3
c   endcall cw  mv  mname
compiledblockcallback19 ic    compiledblockcallback19  c getconstructor object class  newinstance scriptobject
return ic
catch  illegalargumentexception e
throw e
catch  exception e
e printstacktrace
throw new illegalargumentexception e getmessage
private skinnymethodadapter startblockcall classwriter cw
skinnymethodadapter mv   new skinnymethodadapter cw visitmethod acc_public   acc_synthetic   acc_final     block_call_sig  null  null
mv visitcode
label line   new label
mv visitlinenumber 0  line
return mv
private skinnymethodadapter startblockcall19 classwriter cw
skinnymethodadapter mv   new skinnymethodadapter cw visitmethod acc_public   acc_synthetic   acc_final     block_call_sig19  null  null
mv visitcode
label line   new label
mv visitlinenumber 0  line
return mv
private classwriter createblockctor string namepath  class fieldclass  throws exception
classwriter cw   new classwriter classwriter compute_maxs   classwriter compute_frames
cw visit rubyinstanceconfig java_version  acc_public   acc_super  namepath  null  p compiledblockcallback class   null
cw visitfield acc_private   acc_final     ci fieldclass   null  null
skinnymethodadapter mv   new skinnymethodadapter cw visitmethod acc_public     sig void type  params object class    null  null
mv start
mv aload 0
mv invokespecial p compiledblockcallback class      sig void class
mv aload 0
mv aload 1
mv checkcast p fieldclass
mv putfield namepath     ci fieldclass
mv voidreturn
mv end
return cw
private classwriter createblockctor19 string namepath  class fieldclass  throws exception
classwriter cw   new classwriter classwriter compute_maxs   classwriter compute_frames
cw visit rubyinstanceconfig java_version  acc_public   acc_super  namepath  null  p object class   new string  p compiledblockcallback19 class
cw visitfield acc_private   acc_final     ci fieldclass   null  null
skinnymethodadapter mv   new skinnymethodadapter cw visitmethod acc_public     sig void type  params object class    null  null
mv start
mv aload 0
mv invokespecial p object class      sig void class
mv aload 0
mv aload 1
mv checkcast p fieldclass
mv putfield namepath     ci fieldclass
mv voidreturn
mv end
return cw
/**
* use code generation to provide a method handle based on an annotated java
* method.
*
* @see org.jruby.internal.runtime.methods.methodfactory#getannotatedmethod
*/
public void prepareannotatedmethod rubymodule implementationclass  javamethod javamethod  javamethoddescriptor desc
string javamethodname   desc name
javamethod setarity arity fromannotation desc anno  desc actualrequired
javamethod setjavaname javamethodname
javamethod setsingleton desc isstatic
javamethod setcallconfig callconfiguration getcallconfigbyanno desc anno
/**
* emit code to check the arity of a call to a java-based method.
*
* @param jrubymethod the annotation of the called method
* @param method the code generator for the handle being created
*/
private void checkarity jrubymethod jrubymethod  skinnymethodadapter method  int specificarity
label arityerror   new label
label noarityerror   new label
switch  specificarity
case 0
case 1
case 2
case 3
// for zero, one, two, three arities, javamethod.javamethod*.call(...irubyobject[] args...) will check
return
default
boolean checkarity   false
if  jrubymethod rest
if  jrubymethod required   > 0
// just confirm minimum args provided
method aload args_index
method arraylength
method ldc jrubymethod required
method if_icmplt arityerror
checkarity   true
else if  jrubymethod optional   > 0
if  jrubymethod required   > 0
// confirm minimum args provided
method aload args_index
method arraylength
method ldc jrubymethod required
method if_icmplt arityerror
// confirm maximum not greater than optional
method aload args_index
method arraylength
method ldc jrubymethod required     jrubymethod optional
method if_icmpgt arityerror
checkarity   true
else
// just confirm args length == required
method aload args_index
method arraylength
method ldc jrubymethod required
method if_icmpne arityerror
checkarity   true
if  checkarity
method go_to noarityerror
// raise an error if arity does not match requirements
method label arityerror
method aload threadcontext_index
method invokevirtual p threadcontext class      sig ruby class
method aload args_index
method ldc jrubymethod required
method ldc jrubymethod required     jrubymethod optional
method invokestatic p arity class      sig int class  ruby class  irubyobject class  int class  int class
method pop
method label noarityerror
private classwriter createcompiledctor string namepath  string shortpath  string sup  throws exception
classwriter cw   new classwriter classwriter compute_maxs   classwriter compute_frames
cw visit rubyinstanceconfig java_version  acc_public   acc_super  namepath  null  sup  null
cw visitsource shortpath  null
methodvisitor mv   cw visitmethod acc_public        null  null
mv visitcode
mv visitvarinsn aload  0
mv visitmethodinsn invokespecial  sup
label line   new label
mv visitlinenumber 0  line
mv visitinsn return
mv visitmaxs 0 0
mv visitend
return cw
private classwriter createjavamethodctor string namepath  string shortpath  string sup  throws exception
classwriter cw   new classwriter classwriter compute_maxs   classwriter compute_frames
cw visit rubyinstanceconfig java_version  acc_public   acc_super  namepath  null  sup  null
cw visitsource namepath replace            null
methodvisitor mv   cw visitmethod acc_public     java_super_sig  null  null
mv visitcode
mv visitvarinsn aload  0
mv visitvarinsn aload  1
mv visitvarinsn aload  2
mv visitmethodinsn invokespecial  sup     java_super_sig
label line   new label
mv visitlinenumber 0  line
mv visitinsn return
mv visitmaxs 0 0
mv visitend
return cw
private void invokecallconfigpre skinnymethodadapter mv  string superclass  int specificarity  boolean block  callconfiguration callconfig
// invoke pre method stuff
if  callconfig isnoop    return
prepareforpre mv  specificarity  block  callconfig
mv invokevirtual superclass  getpremethod callconfig   getpresignature callconfig
private void invokecallconfigpost skinnymethodadapter mv  string superclass  callconfiguration callconfig
if  callconfig isnoop    return
mv aload 1
mv invokestatic superclass  getpostmethod callconfig   sig void class  params threadcontext class
private void prepareforpre skinnymethodadapter mv  int specificarity  boolean block  callconfiguration callconfig
if  callconfig isnoop    return
mv aload 0
mv aload threadcontext_index      tc
switch  callconfig framing
case full
mv aload receiver_index      self
mv aload name_index      name
loadblockforpre mv  specificarity  block
break
case backtrace
mv aload name_index      name
break
case none
break
default  throw new runtimeexception
private string getpremethod callconfiguration callconfig
switch  callconfig
case framefullscopefull  return
case framefullscopedummy  return
case framefullscopenone  return
case framebacktracescopefull  return
case framebacktracescopedummy  return
case framebacktracescopenone   return
case framenonescopefull  return
case framenonescopedummy  return
case framenonescopenone  return
default  throw new runtimeexception
private string getpresignature callconfiguration callconfig
switch  callconfig
case framefullscopefull  return sig void class  params threadcontext class  irubyobject class  string class  block class
case framefullscopedummy  return sig void class  params threadcontext class  irubyobject class  string class  block class
case framefullscopenone  return sig void class  params threadcontext class  irubyobject class  string class  block class
case framebacktracescopefull  return sig void class  params threadcontext class  string class
case framebacktracescopedummy  return sig void class  params threadcontext class  string class
case framebacktracescopenone   return sig void class  params threadcontext class  string class
case framenonescopefull  return sig void class  params threadcontext class
case framenonescopedummy  return sig void class  params threadcontext class
case framenonescopenone  return sig void class
default  throw new runtimeexception
public static string getpostmethod callconfiguration callconfig
switch  callconfig
case framefullscopefull  return
case framefullscopedummy  return
case framefullscopenone  return
case framebacktracescopefull  return
case framebacktracescopedummy  return
case framebacktracescopenone   return
case framenonescopefull  return
case framenonescopedummy  return
case framenonescopenone  return
default  throw new runtimeexception
private void loadarguments skinnymethodadapter mv  javamethoddescriptor desc  int specificarity
switch  specificarity
default
case  1
mv aload args_index
break
case 0
// no args
break
case 1
loadargumentwithcast mv  1  desc argumenttypes
break
case 2
loadargumentwithcast mv  1  desc argumenttypes
loadargumentwithcast mv  2  desc argumenttypes
break
case 3
loadargumentwithcast mv  1  desc argumenttypes
loadargumentwithcast mv  2  desc argumenttypes
loadargumentwithcast mv  3  desc argumenttypes
break
private void loadargumentwithcast skinnymethodadapter mv  int argnumber  class coercetype
mv aload args_index    argnumber   1
if  coercetype    irubyobject class    coercetype    irubyobject class
if  coercetype    rubystring class
mv invokeinterface p irubyobject class      sig rubystring class
else
throw new runtimeexception     coercetype
private void loadblockforpre skinnymethodadapter mv  int specificarity  boolean getsblock
switch  specificarity
default
case  1
if  getsblock
// variable args with block
mv visitvarinsn aload  block_index
else
// variable args no block, load null block
mv getstatic p block class      ci block class
break
case 0
if  getsblock
// zero args with block
// fixme: omit args index; subtract one from normal block index
mv visitvarinsn aload  block_index   1
else
// zero args, no block; load null_block
mv getstatic p block class      ci block class
break
case 1
if  getsblock
// one arg with block
mv visitvarinsn aload  block_index
else
// one arg, no block; load null_block
mv getstatic p block class      ci block class
break
case 2
if  getsblock
// two args with block
mv visitvarinsn aload  block_index   1
else
// two args, no block; load null_block
mv getstatic p block class      ci block class
break
case 3
if  getsblock
// three args with block
mv visitvarinsn aload  block_index   2
else
// three args, no block; load null_block
mv getstatic p block class      ci block class
break
private void loadblock skinnymethodadapter mv  int specificarity  boolean getsblock
// load block if it accepts block
switch  specificarity
default
case  1
if  getsblock
// all other arg cases with block
mv visitvarinsn aload  block_index
else
// all other arg cases without block
break
case 0
if  getsblock
mv visitvarinsn aload  block_index   1
else
// zero args, no block; do nothing
break
case 1
if  getsblock
mv visitvarinsn aload  block_index
else
// one arg, no block; do nothing
break
case 2
if  getsblock
mv visitvarinsn aload  block_index   1
else
// two args, no block; do nothing
break
case 3
if  getsblock
mv visitvarinsn aload  block_index   2
else
// three args, no block; do nothing
break
private void loadreceiver string typepath  javamethoddescriptor desc  skinnymethodadapter mv
// load target for invocations
if  modifier isstatic desc modifiers
if  desc hascontext
mv aload threadcontext_index
// load self object as irubyobject, for recv param
mv aload receiver_index
else
// load receiver as original type for virtual invocation
mv aload receiver_index
mv checkcast typepath
if  desc hascontext
mv aload threadcontext_index
private class tryclass string name  class targetclass
try
class c   null
if  classloader    null
c   class forname name  true  classloader
else
c   classloader loadclass name
if  c    null    seenundefinedclasses     havewarneduser
havewarneduser   true
system err println     targetclass
return c
catch exception e
seenundefinedclasses   true
return null
private class tryclass string name
try
return classloader loadclass name
catch  exception e
return null
protected class endcall classwriter cw  methodvisitor mv  string name
endmethod mv
return endclass cw  name
protected void endmethod methodvisitor mv
mv visitmaxs 0 0
mv visitend
protected class endclass classwriter cw  string name
cw visitend
byte code   cw tobytearray
if  debug  checkclassadapter verify new classreader code   false  new printwriter system err
return classloader defineclass name  code
private skinnymethodadapter beginmethod classwriter cw  string methodname  int specificarity  boolean block
switch  specificarity
default
case  1
if  block
return new skinnymethodadapter cw visitmethod acc_public  methodname  compiled_call_sig_block  null  null
else
return new skinnymethodadapter cw visitmethod acc_public  methodname  compiled_call_sig  null  null
case 0
if  block
return new skinnymethodadapter cw visitmethod acc_public  methodname  compiled_call_sig_zero_block  null  null
else
return new skinnymethodadapter cw visitmethod acc_public  methodname  compiled_call_sig_zero  null  null
case 1
if  block
return new skinnymethodadapter cw visitmethod acc_public  methodname  compiled_call_sig_one_block  null  null
else
return new skinnymethodadapter cw visitmethod acc_public  methodname  compiled_call_sig_one  null  null
case 2
if  block
return new skinnymethodadapter cw visitmethod acc_public  methodname  compiled_call_sig_two_block  null  null
else
return new skinnymethodadapter cw visitmethod acc_public  methodname  compiled_call_sig_two  null  null
case 3
if  block
return new skinnymethodadapter cw visitmethod acc_public  methodname  compiled_call_sig_three_block  null  null
else
return new skinnymethodadapter cw visitmethod acc_public  methodname  compiled_call_sig_three  null  null
private class selectsuperclass int specificarity  boolean block
switch  specificarity
default
case  1
if  block
return javamethod class
else
return javamethod javamethodn class
case 0
if  block
return javamethod javamethodzeroblock class
else
return javamethod javamethodzero class
case 1
if  block
return javamethod javamethodoneblock class
else
return javamethod javamethodone class
case 2
if  block
return javamethod javamethodtwoblock class
else
return javamethod javamethodtwo class
case 3
if  block
return javamethod javamethodthreeblock class
else
return javamethod javamethodthree class
private void createannotatedmethodinvocation javamethoddescriptor desc  skinnymethodadapter method  string superclass  int specificarity  boolean block
string typepath   desc declaringclasspath
string javamethodname   desc name
checkarity desc anno  method  specificarity
callconfiguration callconfig   callconfiguration getcallconfigbyanno desc anno
if   callconfig isnoop
invokecallconfigpre method  superclass  specificarity  block  callconfig
if  rubyinstanceconfig full_trace_enabled
invokeccalltrace method
label trybegin   new label
label tryend   new label
label dofinally   new label
if   callconfig isnoop
method trycatch trybegin  tryend  dofinally  null
method label trybegin
loadreceiver typepath  desc  method
loadarguments method  desc  specificarity
loadblock method  specificarity  block
if  modifier isstatic desc modifiers
// static invocation
method invokestatic typepath  javamethodname  desc signature
else
// virtual invocation
method invokevirtual typepath  javamethodname  desc signature
if  desc getreturnclass      void class
// void return type, so we need to load a nil for returning below
method aload threadcontext_index
method invokevirtual p threadcontext class      sig ruby class
method invokevirtual p ruby class      sig irubyobject class
method label tryend
// normal finally and exit
if  rubyinstanceconfig full_trace_enabled
invokecreturntrace method
if   callconfig isnoop
invokecallconfigpost method  superclass  callconfig
// return
method visitinsn areturn
// these are only needed if we have a non-noop call config
if   callconfig isnoop
// finally handling for abnormal exit
method label dofinally
if  rubyinstanceconfig full_trace_enabled
invokecreturntrace method
//call post method stuff (exception raised)
if   callconfig isnoop
invokecallconfigpost method  superclass  callconfig
// rethrow exception
method athrow       rethrow it
private void invokeccalltrace skinnymethodadapter method
method aload 0      method itself
method aload 1      threadcontext
method aload 4      invoked name
method invokevirtual p javamethod class      sig void class  threadcontext class  string class
private void invokecreturntrace skinnymethodadapter method
method aload 0      method itself
method aload 1      threadcontext
method aload 4      invoked name
method invokevirtual p javamethod class      sig void class  threadcontext class  string class