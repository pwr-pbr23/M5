/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2001-2004 jan arne petersen <jpetersen@uni-bonn.de>
* copyright (c) 2002-2004 anders bengtsson <ndrsbngtssn@yahoo.se>
* copyright (c) 2004-2005 thomas e enebo <enebo@acm.org>
* copyright (c) 2004 stefan matthias aust <sma@3plus4.de>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby
import java io ioexception
import java lang reflect constructor
import java lang reflect invocationtargetexception
import java util arraylist
import java util collection
import java util collections
import java util hashmap
import java util hashtable
import java util iterator
import java util list
import java util map
import java util set
import org jruby anno jrubymethod
import org jruby anno jrubyclass
import org jruby compiler impl skinnymethodadapter
import org jruby internal runtime methods dynamicmethod
import org jruby internal runtime methods javamethod
import org jruby java minijava
import org jruby javasupport util runtimehelpers
import org jruby runtime block
import org jruby runtime callsite
import org jruby runtime calltype
import org jruby runtime classindex
import org jruby runtime methodindex
import org jruby runtime objectallocator
import org jruby runtime objectmarshal
import org jruby runtime threadcontext
import org jruby runtime visibility
import org jruby runtime builtin irubyobject
import org jruby runtime marshal marshalstream
import org jruby runtime marshal unmarshalstream
import org jruby util codegenutils
import org jruby util jrubyclassloader
import static org jruby util codegenutils
import org jruby util javanamemangler
import org jruby util safepropertyaccessor
import org jruby util collections weakhashset
import org objectweb asm annotationvisitor
import org objectweb asm classwriter
import org objectweb asm methodvisitor
import static org objectweb asm opcodes
/**
*
* @author  jpetersen
*/
@jrubyclass name    parent
public class rubyclass extends rubymodule
public static void createclassclass ruby runtime  rubyclass classclass
classclass index   classindex class
classclass kindof   new rubymodule kindof
@override
public boolean iskindof irubyobject obj  rubymodule type
return obj instanceof rubyclass
classclass undefinemethod
classclass undefinemethod
classclass undefinemethod
classclass defineannotatedmethods rubyclass class
classclass addmethod    new specificaritynew classclass  visibility public
// this is a non-standard method; have we decided to start extending ruby?
//classclass.definefastmethod("subclasses", callbackfactory.getfastoptmethod("subclasses"));
// fixme: for some reason this dispatcher causes a verifyerror...
//classclass.dispatcher = callbackfactory.createdispatcher(classclass);
public static final objectallocator class_allocator   new objectallocator
public irubyobject allocate ruby runtime  rubyclass klass
rubyclass clazz   new rubyclass runtime
clazz allocator   objectallocator not_allocatable_allocator     class allocate object is not allocatable before it is initialized
return clazz
public objectallocator getallocator
return allocator
public void setallocator objectallocator allocator
this allocator   allocator
/**
* set an allocator that calls the default constructor for a given class.
*
* @param cls the class on which to call the default constructor to allocate
*/
public void setclassallocator final class cls
this allocator   new objectallocator
public irubyobject allocate ruby runtime  rubyclass klazz
try
return  irubyobject cls newinstance
catch  instantiationexception ie
throw runtime newtypeerror     cls       ie
catch  illegalaccessexception iae
throw runtime newsecurityerror     cls       iae
public void setrubyclassallocator final class cls
try
final constructor constructor   cls getconstructor ruby class  rubyclass class
this allocator   new objectallocator
public irubyobject allocate ruby runtime  rubyclass klazz
try
return  irubyobject constructor newinstance runtime  klazz
catch  invocationtargetexception ite
throw runtime newtypeerror     cls       ite
catch  instantiationexception ie
throw runtime newtypeerror     cls       ie
catch  illegalaccessexception iae
throw runtime newsecurityerror     cls       iae
catch  nosuchmethodexception nsme
throw new runtimeexception nsme
@jrubymethod name
public irubyobject allocate
if  superclass    null  throw runtime newtypeerror
irubyobject obj   allocator allocate runtime  this
if  obj getmetaclass   getrealclass      getrealclass    throw runtime newtypeerror
return obj
public callsite getbasecallsites
return basecallsites
public callsite getextracallsites
return extracallsites
public static class variableaccessor
private int index
private final int classid
public variableaccessor int index  int classid
this index   index
this classid   classid
public int getclassid
return classid
public int getindex
return index
public object get object object
return   irubyobject object  getvariable index
public void set object object  object value
irubyobject object  setvariable index  value
public static final variableaccessor dummy_accessor   new variableaccessor  1   1
@suppresswarnings
private map<string  variableaccessor> variableaccessors    map<string  variableaccessor> collections empty_map
public map<string  variableaccessor> getvariableaccessorsforread
return variableaccessors
public synchronized map<string  variableaccessor> getvariableaccessorsforwrite
if  variableaccessors    collections empty_map  variableaccessors   new hashtable<string  variableaccessor> 1
return variableaccessors
public synchronized variableaccessor getvariableaccessorforwrite string name
map<string  variableaccessor> myvariableaccessors   getvariableaccessorsforwrite
variableaccessor ivaraccessor   myvariableaccessors get name
if  ivaraccessor    null
ivaraccessor   new variableaccessor myvariableaccessors size    this id
myvariableaccessors put name  ivaraccessor
return ivaraccessor
public variableaccessor getvariableaccessorforread string name
variableaccessor accessor   getvariableaccessorsforread   get name
if  accessor    null  accessor   variableaccessor dummy_accessor
return accessor
public int getvariabletablesize
return variableaccessors size
public map<string  variableaccessor> getvariabletablecopy
return new hashmap<string  variableaccessor> getvariableaccessorsforread
@override
public int getnativetypeindex
return classindex class
@override
public boolean ismodule
return false
@override
public boolean isclass
return true
@override
public boolean issingleton
return false
/** boot_defclass
* create an initial object meta class before module and kernel dependencies have
* squirreled themselves together.
*
* @param runtime we need it
* @return a half-baked meta class for object
*/
public static rubyclass createbootstrapclass ruby runtime  string name  rubyclass superclass  objectallocator allocator
rubyclass obj
if  superclass    null         boot the object class
obj   new rubyclass runtime
obj marshal   default_object_marshal
else                         boot the module and class classes
obj   new rubyclass runtime  superclass
obj setallocator allocator
obj setbasename name
return obj
/** separate path for metaclass and includedmodulewrapper construction
*  (rb_class_boot version for metaclasses)
*  no marshal, allocator initialization and addsubclass(this) here!
*/
protected rubyclass ruby runtime  rubyclass superclass  boolean objectspace
super runtime  runtime getclassclass    objectspace
this runtime   runtime
this superclass   superclass     this is the only case it might be null here  in metaclass construction
/** separate path for metaclass and includedmodulewrapper construction
*  (rb_class_boot version for metaclasses)
*  no marshal, allocator initialization and addsubclass(this) here!
*/
protected rubyclass ruby runtime  rubyclass superclass  generation generation  boolean objectspace
super runtime  runtime getclassclass    generation  objectspace
this runtime   runtime
this superclass   superclass     this is the only case it might be null here  in metaclass construction
/** used by class_allocator (any class' class will be a class!)
*  also used to bootstrap object class
*/
protected rubyclass ruby runtime
super runtime  runtime getclassclass
this runtime   runtime
index   classindex class
/** rb_class_boot (for plain classes)
*  also used to bootstrap module and class classes
*/
protected rubyclass ruby runtime  rubyclass superclazz
this runtime
superclass   superclazz
marshal   superclazz marshal     use parent's marshal
superclazz addsubclass this
infectby superclass
/**
* a constructor which allows passing in an array of supplementary call sites.
*/
protected rubyclass ruby runtime  rubyclass superclazz  callsite extracallsites
this runtime
this superclass   superclazz
this marshal   superclazz marshal     use parent's marshal
superclazz addsubclass this
this extracallsites   extracallsites
infectby superclass
/**
* construct a new class with the given name scoped under object (global)
* and with object as its immediate superclass.
* corresponds to rb_class_new in mri.
*/
public static rubyclass newclass ruby runtime  rubyclass superclass
if  superclass    runtime getclassclass    throw runtime newtypeerror
if  superclass issingleton    throw runtime newtypeerror
return new rubyclass runtime  superclass
/**
* a variation on newclass that allow passing in an array of supplementary
* call sites to improve dynamic invocation.
*/
public static rubyclass newclass ruby runtime  rubyclass superclass  callsite extracallsites
if  superclass    runtime getclassclass    throw runtime newtypeerror
if  superclass issingleton    throw runtime newtypeerror
return new rubyclass runtime  superclass  extracallsites
/**
* construct a new class with the given name, allocator, parent class,
* and containing class. if setparent is true, the class's parent will be
* explicitly set to the provided parent (rather than the new class just
* being assigned to a constant in that parent).
* corresponds to rb_class_new/rb_define_class_id/rb_name_class/rb_set_class_path
* in mri.
*/
public static rubyclass newclass ruby runtime  rubyclass superclass  string name  objectallocator allocator  rubymodule parent  boolean setparent
rubyclass clazz   newclass runtime  superclass
clazz setbasename name
clazz setallocator allocator
clazz makemetaclass superclass getmetaclass
if  setparent  clazz setparent parent
parent setconstant name  clazz
clazz inherit superclass
return clazz
/**
* a variation on newclass that allows passing in an array of supplementary
* call sites to improve dynamic invocation performance.
*/
public static rubyclass newclass ruby runtime  rubyclass superclass  string name  objectallocator allocator  rubymodule parent  boolean setparent  callsite extracallsites
rubyclass clazz   newclass runtime  superclass  extracallsites
clazz setbasename name
clazz setallocator allocator
clazz makemetaclass superclass getmetaclass
if  setparent  clazz setparent parent
parent setconstant name  clazz
clazz inherit superclass
return clazz
/** rb_make_metaclass
*
*/
@override
public rubyclass makemetaclass rubyclass superclass
if  issingleton         could be pulled down to rubyclass in future
metaclass klass   new metaclass runtime  superclass      rb_class_boot
setmetaclass klass
klass setattached this
klass setmetaclass klass
klass setsuperclass getsuperclass   getrealclass   getmetaclass
return klass
else
return super makemetaclass superclass
@deprecated
public irubyobject invoke threadcontext context  irubyobject self  int methodindex  string name  irubyobject args  calltype calltype  block block
return invoke context  self  name  args  calltype  block
public boolean notvisibleandnotmethodmissing dynamicmethod method  string name  irubyobject caller  calltype calltype
return  method iscallablefrom caller  calltype      name equals
public irubyobject invoke threadcontext context  irubyobject self  string name
calltype calltype  block block
dynamicmethod method   searchmethod name
irubyobject caller   context getframeself
if  shouldcallmethodmissing method  name  caller  calltype
return runtimehelpers callmethodmissing context  self  method getvisibility    name  calltype  block
return method call context  self  this  name  block
public irubyobject finvoke threadcontext context  irubyobject self  string name  block block
dynamicmethod method   searchmethod name
if  shouldcallmethodmissing method
return runtimehelpers callmethodmissing context  self  method getvisibility    name  calltype functional  block
return method call context  self  this  name  block
public irubyobject invoke threadcontext context  irubyobject self  string name
irubyobject args  calltype calltype  block block
assert args    null
dynamicmethod method   searchmethod name
irubyobject caller   context getframeself
if  shouldcallmethodmissing method  name  caller  calltype
return runtimehelpers callmethodmissing context  self  method getvisibility    name  calltype  args  block
return method call context  self  this  name  args  block
public irubyobject finvoke threadcontext context  irubyobject self  string name
irubyobject args  block block
assert args    null
dynamicmethod method   searchmethod name
if  shouldcallmethodmissing method
return runtimehelpers callmethodmissing context  self  method getvisibility    name  calltype functional  args  block
return method call context  self  this  name  args  block
public irubyobject invoke threadcontext context  irubyobject self  string name
irubyobject arg  calltype calltype  block block
dynamicmethod method   searchmethod name
irubyobject caller   context getframeself
if  shouldcallmethodmissing method  name  caller  calltype
return runtimehelpers callmethodmissing context  self  method getvisibility    name  calltype  arg  block
return method call context  self  this  name  arg  block
public irubyobject finvoke threadcontext context  irubyobject self  string name
irubyobject arg  block block
dynamicmethod method   searchmethod name
if  shouldcallmethodmissing method
return runtimehelpers callmethodmissing context  self  method getvisibility    name  calltype functional  arg  block
return method call context  self  this  name  arg  block
public irubyobject invoke threadcontext context  irubyobject self  string name
irubyobject arg0  irubyobject arg1  calltype calltype  block block
dynamicmethod method   searchmethod name
irubyobject caller   context getframeself
if  shouldcallmethodmissing method  name  caller  calltype
return runtimehelpers callmethodmissing context  self  method getvisibility    name  calltype  arg0  arg1  block
return method call context  self  this  name  arg0  arg1  block
public irubyobject finvoke threadcontext context  irubyobject self  string name
irubyobject arg0  irubyobject arg1  block block
dynamicmethod method   searchmethod name
if  shouldcallmethodmissing method
return runtimehelpers callmethodmissing context  self  method getvisibility    name  calltype functional  arg0  arg1  block
return method call context  self  this  name  arg0  arg1  block
public irubyobject invoke threadcontext context  irubyobject self  string name
irubyobject arg0  irubyobject arg1  irubyobject arg2  calltype calltype  block block
dynamicmethod method   searchmethod name
irubyobject caller   context getframeself
if  shouldcallmethodmissing method  name  caller  calltype
return runtimehelpers callmethodmissing context  self  method getvisibility    name  calltype  arg0  arg1  arg2  block
return method call context  self  this  name  arg0  arg1  arg2  block
public irubyobject finvoke threadcontext context  irubyobject self  string name
irubyobject arg0  irubyobject arg1  irubyobject arg2  block block
dynamicmethod method   searchmethod name
if  shouldcallmethodmissing method
return runtimehelpers callmethodmissing context  self  method getvisibility    name  calltype functional  arg0  arg1  arg2  block
return method call context  self  this  name  arg0  arg1  arg2  block
public irubyobject invoke threadcontext context  irubyobject self  string name
calltype calltype
dynamicmethod method   searchmethod name
irubyobject caller   context getframeself
if  shouldcallmethodmissing method  name  caller  calltype
return runtimehelpers callmethodmissing context  self  method getvisibility    name  calltype  block null_block
return method call context  self  this  name
public irubyobject finvoke threadcontext context  irubyobject self  string name
dynamicmethod method   searchmethod name
if  shouldcallmethodmissing method
return runtimehelpers callmethodmissing context  self  method getvisibility    name  calltype functional  block null_block
return method call context  self  this  name
public irubyobject invoke threadcontext context  irubyobject self  string name
irubyobject args  calltype calltype
assert args    null
dynamicmethod method   searchmethod name
irubyobject caller   context getframeself
if  shouldcallmethodmissing method  name  caller  calltype
return runtimehelpers callmethodmissing context  self  method getvisibility    name  calltype  args  block null_block
return method call context  self  this  name  args
public irubyobject finvoke threadcontext context  irubyobject self  string name
irubyobject args
assert args    null
dynamicmethod method   searchmethod name
if  shouldcallmethodmissing method
return runtimehelpers callmethodmissing context  self  method getvisibility    name  calltype functional  args  block null_block
return method call context  self  this  name  args
public irubyobject invoke threadcontext context  irubyobject self  string name
irubyobject arg  calltype calltype
dynamicmethod method   searchmethod name
irubyobject caller   context getframeself
if  shouldcallmethodmissing method  name  caller  calltype
return runtimehelpers callmethodmissing context  self  method getvisibility    name  calltype  arg  block null_block
return method call context  self  this  name  arg
public irubyobject finvoke threadcontext context  irubyobject self  string name
irubyobject arg
dynamicmethod method   searchmethod name
if  shouldcallmethodmissing method
return runtimehelpers callmethodmissing context  self  method getvisibility    name  calltype functional  arg  block null_block
return method call context  self  this  name  arg
public irubyobject invoke threadcontext context  irubyobject self  string name
irubyobject arg0  irubyobject arg1  calltype calltype
dynamicmethod method   searchmethod name
irubyobject caller   context getframeself
if  shouldcallmethodmissing method  name  caller  calltype
return runtimehelpers callmethodmissing context  self  method getvisibility    name  calltype  arg0  arg1  block null_block
return method call context  self  this  name  arg0  arg1
public irubyobject finvoke threadcontext context  irubyobject self  string name
irubyobject arg0  irubyobject arg1
dynamicmethod method   searchmethod name
if  shouldcallmethodmissing method
return runtimehelpers callmethodmissing context  self  method getvisibility    name  calltype functional  arg0  arg1  block null_block
return method call context  self  this  name  arg0  arg1
public irubyobject invoke threadcontext context  irubyobject self  string name
irubyobject arg0  irubyobject arg1  irubyobject arg2  calltype calltype
dynamicmethod method   searchmethod name
irubyobject caller   context getframeself
if  shouldcallmethodmissing method  name  caller  calltype
return runtimehelpers callmethodmissing context  self  method getvisibility    name  calltype  arg0  arg1  arg2  block null_block
return method call context  self  this  name  arg0  arg1  arg2
public irubyobject finvoke threadcontext context  irubyobject self  string name
irubyobject arg0  irubyobject arg1  irubyobject arg2
dynamicmethod method   searchmethod name
if  shouldcallmethodmissing method
return runtimehelpers callmethodmissing context  self  method getvisibility    name  calltype functional  arg0  arg1  arg2  block null_block
return method call context  self  this  name  arg0  arg1  arg2
private void dumpreifiedclass string dumpdir  string javapath  byte classbytes
if  dumpdir    null
if  dumpdir equals
dumpdir
java io fileoutputstream classstream   null
try
java io file classfile   new java io file dumpdir  javapath
classfile getparentfile   mkdirs
classstream   new java io fileoutputstream classfile
classstream write classbytes
catch  ioexception io
getruntime   getwarnings   warn     io getmessage
finally
if  classstream    null
try
classstream close
catch  ioexception ignored
private void generatemethodannotations map<class  map<string  object>> methodannos  skinnymethodadapter m  list<map<class  map<string  object>>> parameterannos
if  methodannos    null    methodannos size      0
for  map entry<class  map<string  object>> entry   methodannos entryset
m visitannotationwithfields ci entry getkey     true  entry getvalue
if  parameterannos    null    parameterannos size      0
for  int i   0  i < parameterannos size    i
map<class  map<string  object>> annos   parameterannos get i
if  annos    null    annos size      0
for  iterator<map entry<class  map<string  object>>> it   annos entryset   iterator    it hasnext
map entry<class  map<string  object>> entry   it next
m visitparameterannotationwithfields i  ci entry getkey     true  entry getvalue
private boolean shouldcallmethodmissing dynamicmethod method
return method isundefined
private boolean shouldcallmethodmissing dynamicmethod method  string name  irubyobject caller  calltype calltype
return method isundefined      notvisibleandnotmethodmissing method  name  caller  calltype
public irubyobject invokeinherited threadcontext context  irubyobject self  irubyobject subclass
dynamicmethod method   getmetaclass   searchmethod
if  method isundefined
return runtimehelpers callmethodmissing context  self  method getvisibility       calltype functional  block null_block
return method call context  self  getmetaclass       subclass  block null_block
/** rb_class_new_instance
*
*/
public irubyobject newinstance threadcontext context  irubyobject args  block block
irubyobject obj   allocate
basecallsites call context  this  obj  args  block
return obj
public static class specificaritynew extends javamethod
public specificaritynew rubymodule implclass  visibility visibility
super implclass  visibility
public irubyobject call threadcontext context  irubyobject self  rubymodule clazz  string name  irubyobject args  block block
prebacktraceonly context  name
try
rubyclass cls    rubyclass self
irubyobject obj   cls allocate
cls basecallsites call context  self  obj  args  block
return obj
finally
postbacktraceonly context
public irubyobject call threadcontext context  irubyobject self  rubymodule clazz  string name  block block
prebacktraceonly context  name
try
rubyclass cls    rubyclass self
irubyobject obj   cls allocate
cls basecallsites call context  self  obj  block
return obj
finally
postbacktraceonly context
public irubyobject call threadcontext context  irubyobject self  rubymodule clazz  string name  irubyobject arg0  block block
prebacktraceonly context  name
try
rubyclass cls    rubyclass self
irubyobject obj   cls allocate
cls basecallsites call context  self  obj  arg0  block
return obj
finally
postbacktraceonly context
public irubyobject call threadcontext context  irubyobject self  rubymodule clazz  string name  irubyobject arg0  irubyobject arg1  block block
prebacktraceonly context  name
try
rubyclass cls    rubyclass self
irubyobject obj   cls allocate
cls basecallsites call context  self  obj  arg0  arg1  block
return obj
finally
postbacktraceonly context
public irubyobject call threadcontext context  irubyobject self  rubymodule clazz  string name  irubyobject arg0  irubyobject arg1  irubyobject arg2  block block
prebacktraceonly context  name
try
rubyclass cls    rubyclass self
irubyobject obj   cls allocate
cls basecallsites call context  self  obj  arg0  arg1  arg2  block
return obj
finally
postbacktraceonly context
/** rb_class_initialize
*
*/
@jrubymethod name      compat   compatversion ruby1_8  frame   true  visibility   visibility private
public irubyobject initialize threadcontext context  block block
checknotinitialized
return initializecommon runtime getobject    block  false
@jrubymethod name      compat   compatversion ruby1_8  frame   true  visibility   visibility private
public irubyobject initialize threadcontext context  irubyobject superobject  block block
checknotinitialized
checkinheritable superobject
return initializecommon  rubyclass superobject  block  false
@jrubymethod name      compat   compatversion ruby1_9  frame   true  visibility   visibility private
public irubyobject initialize19 threadcontext context  block block
checknotinitialized
return initializecommon runtime getobject    block  true
@jrubymethod name      compat   compatversion ruby1_9  frame   true  visibility   visibility private
public irubyobject initialize19 threadcontext context  irubyobject superobject  block block
checknotinitialized
checkinheritable superobject
return initializecommon  rubyclass superobject  block  true
private irubyobject initializecommon rubyclass superclazz  block block  boolean callinheritbeforesuper
superclass   superclazz
allocator   superclazz allocator
makemetaclass superclazz getmetaclass
marshal   superclazz marshal
superclazz addsubclass this
if  callinheritbeforesuper
inherit superclazz
super initialize block
else
super initialize block
inherit superclazz
return this
/** rb_class_init_copy
*
*/
@jrubymethod name      required   1  visibility   visibility private
@override
public irubyobject initialize_copy irubyobject original
if  superclass    null  throw runtime newtypeerror
if  original instanceof metaclass  throw runtime newtypeerror
super initialize_copy original
allocator     rubyclass original  allocator
return this
protected void setmodulesuperclass rubyclass superclass
// remove us from old superclass's child classes
if  this superclass    null  this superclass removesubclass this
// add us to new superclass's child classes
superclass addsubclass this
// update superclass reference
this superclass   superclass
public collection subclasses boolean includedescendants
set<rubyclass> mysubclasses   subclasses
if  mysubclasses    null
collection<rubyclass> mine   new arraylist<rubyclass> mysubclasses
if  includedescendants
for  rubyclass i  mysubclasses
mine addall i subclasses includedescendants
return mine
else
return collections empty_list
/**
* add a new subclass to the weak set of subclasses.
*
* this version always constructs a new set to avoid having to synchronize
* against the set when iterating it for invalidation in
* invalidatecachedescendants.
*
* @param subclass the subclass to add
*/
public synchronized void addsubclass rubyclass subclass
synchronized  runtime gethierarchylock
set<rubyclass> oldsubclasses   subclasses
if  oldsubclasses    null  subclasses   oldsubclasses   new weakhashset<rubyclass> 4
oldsubclasses add subclass
/**
* remove a subclass from the weak set of subclasses.
*
* this version always constructs a new set to avoid having to synchronize
* against the set when iterating it for invalidation in
* invalidatecachedescendants.
*
* @param subclass the subclass to remove
*/
public synchronized void removesubclass rubyclass subclass
synchronized  runtime gethierarchylock
set<rubyclass> oldsubclasses   subclasses
if  oldsubclasses    null  return
oldsubclasses remove subclass
/**
* replace an existing subclass with a new one.
*
* this version always constructs a new set to avoid having to synchronize
* against the set when iterating it for invalidation in
* invalidatecachedescendants.
*
* @param subclass the subclass to remove
* @param newsubclass the subclass to replace it with
*/
public synchronized void replacesubclass rubyclass subclass  rubyclass newsubclass
synchronized  runtime gethierarchylock
set<rubyclass> oldsubclasses   subclasses
if  oldsubclasses    null  return
oldsubclasses remove subclass
oldsubclasses add newsubclass
/**
* invalidate all subclasses of this class by walking the set of all
* subclasses and asking them to invalidate themselves.
*
* note that this version works against a reference to the current set of
* subclasses, which could be replaced by the time this iteration is
* complete. in theory, there may be a path by which invalidation would
* miss a class added during the invalidation process, but the exposure is
* minimal if it exists at all. the only way to prevent it would be to
* synchronize both invalidation and subclass set modification against a
* global lock, which we would like to avoid.
*/
@override
public void invalidatecachedescendants
super invalidatecachedescendants
// update all subclasses
synchronized  runtime gethierarchylock
set<rubyclass> mysubclasses   subclasses
if  mysubclasses    null  for  rubyclass subclass   mysubclasses
subclass invalidatecachedescendants
public ruby getclassruntime
return runtime
public rubyclass getrealclass
return this
@jrubymethod name      required   1  visibility   visibility private
public irubyobject inherited threadcontext context  irubyobject arg
return runtime getnil
/** rb_class_inherited (reversed semantics!)
*
*/
public void inherit rubyclass superclazz
if  superclazz    null  superclazz   runtime getobject
superclazz invokeinherited runtime getcurrentcontext    superclazz  this
/** return the real super class of this class.
*
* rb_class_superclass
*
*/
@jrubymethod name      compat   compatversion ruby1_8
public irubyobject superclass threadcontext context
rubyclass superclazz   superclass
if  superclazz    null  throw runtime newtypeerror
if  issingleton    superclazz   metaclass
while  superclazz    null    superclazz isincluded    superclazz   superclazz superclass
return superclazz    null ? superclazz   runtime getnil
@jrubymethod name      compat   compatversion ruby1_9
public irubyobject superclass19 threadcontext context
rubyclass superclazz   superclass
if  superclazz    null
if  metaclass    runtime getbasicobject    return runtime getnil
throw runtime newtypeerror
while  superclazz    null    superclazz isincluded    superclazz   superclazz superclass
return superclazz    null ? superclazz   runtime getnil
private void checknotinitialized
if  superclass    null  throw runtime newtypeerror
/** rb_check_inheritable
*
*/
public static void checkinheritable irubyobject superclass
if    superclass instanceof rubyclass
throw superclass getruntime   newtypeerror     superclass getmetaclass
if    rubyclass superclass  issingleton
throw superclass getruntime   newtypeerror
public final objectmarshal getmarshal
return marshal
public final void setmarshal objectmarshal marshal
this marshal   marshal
public final void marshal object obj  marshalstream marshalstream  throws ioexception
getmarshal   marshalto runtime  obj  this  marshalstream
public final object unmarshal unmarshalstream unmarshalstream  throws ioexception
return getmarshal   unmarshalfrom runtime  this  unmarshalstream
public static void marshalto rubyclass clazz  marshalstream output  throws java io ioexception
output registerlinktarget clazz
output writestring marshalstream getpathfromclass clazz
public static rubyclass unmarshalfrom unmarshalstream input  throws java io ioexception
string name   rubystring bytelisttostring input unmarshalstring
rubyclass result   unmarshalstream getclassfrompath input getruntime    name
input registerlinktarget result
return result
protected static final objectmarshal default_object_marshal   new objectmarshal
public void marshalto ruby runtime  object obj  rubyclass type
marshalstream marshalstream  throws ioexception
irubyobject object    irubyobject obj
marshalstream registerlinktarget object
marshalstream dumpvariables object getvariablelist
public object unmarshalfrom ruby runtime  rubyclass type
unmarshalstream unmarshalstream  throws ioexception
irubyobject result   type allocate
unmarshalstream registerlinktarget result
unmarshalstream defaultvariablesunmarshal result
return result
public synchronized void reify
reify null
/**
* stand up a real java class for the backing store of this object
* @param classdumpdir directory to save reified java class
*/
public synchronized void reify string classdumpdir
class reifiedparent   rubyobject class
string javaname       getbasename
string javapath       getbasename
jrubyclassloader parentcl   runtime getjrubyclassloader
if  superclass reifiedclass    null
reifiedparent   superclass reifiedclass
classwriter cw   new classwriter classwriter compute_frames   classwriter compute_maxs
cw visit rubyinstanceconfig java_version  acc_public   acc_super  javapath  null  p reifiedparent   null
if  classannotations    null    classannotations size      0
for  map entry<class map<string object>> entry   classannotations entryset
class annotype   entry getkey
map<string object> fields   entry getvalue
annotationvisitor av   cw visitannotation ci annotype   true
codegenutils visitannotationfields av  entry getvalue
av visitend
// fields to hold ruby and rubyclass references
cw visitfield acc_static   acc_private     ci ruby class   null  null
cw visitfield acc_static   acc_private     ci rubyclass class   null  null
// static initializing method
skinnymethodadapter m   new skinnymethodadapter cw visitmethod acc_public   acc_static     sig void class  ruby class  rubyclass class   null  null
m start
m aload 0
m putstatic javapath     ci ruby class
m aload 1
m putstatic javapath     ci rubyclass class
m voidreturn
m end
// standard constructor that accepts ruby, rubyclass
methodvisitor mv   cw visitmethod acc_public     sig void class  ruby class  rubyclass class   null  null
m   new skinnymethodadapter mv
m aload 0
m aload 1
m aload 2
m invokespecial p reifiedparent      sig void class  ruby class  rubyclass class
m voidreturn
m end
// no-arg constructor using static references to ruby and rubyclass
mv   cw visitmethod acc_public     codegenutils sig void class   null  null
m   new skinnymethodadapter mv
m aload 0
m getstatic javapath     ci ruby class
m getstatic javapath     ci rubyclass class
m invokespecial p reifiedparent      sig void class  ruby class  rubyclass class
m voidreturn
m end
for  map entry<string dynamicmethod> methodentry   getmethods   entryset
string methodname   methodentry getkey
string javamethodname   javanamemangler manglestringforcleanjavaidentifier methodname
map<class map<string object>> methodannos   getmethodannotations   get methodname
list<map<class map<string object>>> parameterannos   getparameterannotations   get methodname
class methodsignature   getmethodsignatures   get methodname
if  methodsignature    null
// non-signature signature with just irubyobject
switch  methodentry getvalue   getarity   getvalue
case 0
mv   cw visitmethod acc_public   acc_varargs  javamethodname  sig irubyobject class   null  null
m   new skinnymethodadapter mv
generatemethodannotations methodannos  m  parameterannos
m aload 0
m ldc methodname
m invokevirtual javapath     sig irubyobject class  string class
break
default
mv   cw visitmethod acc_public   acc_varargs  javamethodname  sig irubyobject class  irubyobject class   null  null
m   new skinnymethodadapter mv
generatemethodannotations methodannos  m  parameterannos
m aload 0
m ldc methodname
m aload 1
m invokevirtual javapath     sig irubyobject class  string class  irubyobject class
m areturn
else
// generate a real method signature for the method, with to/from coercions
// indices for temp values
class params   new class
system arraycopy methodsignature  1  params  0  params length
int baseindex   1
for  class paramtype   params
if  paramtype    double class    paramtype    long class
baseindex    2
else
baseindex    1
int rubyindex   baseindex
mv   cw visitmethod acc_public   acc_varargs  javamethodname  sig methodsignature  params   null  null
m   new skinnymethodadapter mv
generatemethodannotations methodannos  m  parameterannos
m getstatic javapath     ci ruby class
m astore rubyindex
m aload 0      self
m ldc methodname      method name
minijava coerceargumentstoruby m  params  rubyindex
m invokevirtual javapath     sig irubyobject class  string class  irubyobject class
minijava coerceresultandreturn m  methodsignature
m end
cw visitend
byte classbytes   cw tobytearray
dumpreifiedclass classdumpdir  javapath  classbytes
class result   parentcl defineclass javaname  classbytes
try
java lang reflect method clinit   result getdeclaredmethod    ruby class  rubyclass class
clinit invoke null  runtime  this
catch  exception e
throw new runtimeexception e
setclassallocator result
reifiedclass   result
public class getreifiedclass
return reifiedclass
private map<string  list<map<class  map<string object>>>> parameterannotations
public map<string  list<map<class  map<string object>>>> getparameterannotations
if  parameterannotations    null  return collections empty_map
return parameterannotations
public void addparameterannotation string method  int i  class annoclass  map<string object> value
if  parameterannotations    null  parameterannotations   new hashtable<string list<map<class map<string object>>>>
list<map<class map<string object>>> paramlist   parameterannotations get method
if  paramlist    null
paramlist   new arraylist<map<class map<string object>>> i   1
parameterannotations put method  paramlist
if  paramlist size   < i   1
for  int j   paramlist size    j < i   1  j
paramlist add null
if  annoclass    null    value    null
map<class  map<string  object>> annos   paramlist get i
if  annos    null
annos   new hashmap<class  map<string  object>>
paramlist set i  annos
annos put annoclass  value
else
paramlist set i  null
private map<string  map<class  map<string object>>> methodannotations
public map<string map<class map<string object>>> getmethodannotations
if  methodannotations    null  return collections empty_map
return methodannotations
public void addmethodannotation string methodname  class annotation  map fields
if  methodannotations    null  methodannotations   new hashtable<string map<class map<string object>>>
map<class map<string object>> annos   methodannotations get methodname
if  annos    null
annos   new hashtable<class map<string object>>
methodannotations put methodname  annos
annos put annotation  fields
private map<string  class> methodsignatures
public map<string class> getmethodsignatures
if  methodsignatures    null  return collections empty_map
return methodsignatures
public void addmethodsignature string methodname  class types
if  methodsignatures    null  methodsignatures   new hashtable<string class>
methodsignatures put methodname  types
private map<class  map<string object>> classannotations
public map<class map<string object>> getclassannotations
if  classannotations    null  return collections empty_map
return classannotations
public void addclassannotation class annotation  map fields
if  classannotations    null  classannotations   new hashtable<class map<string object>>
classannotations put annotation  fields
protected final ruby runtime
private objectallocator allocator     the default allocator
protected objectmarshal marshal
private set<rubyclass> subclasses
public static final int cs_idx_initialize   0
public static final string cs_names
private final callsite basecallsites   new callsite
for int i   0  i < cs_names length  i
basecallsites   methodindex getfunctionalcallsite cs_names
private callsite extracallsites
private class reifiedclass