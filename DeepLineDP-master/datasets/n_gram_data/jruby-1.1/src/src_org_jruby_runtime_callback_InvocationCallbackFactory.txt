/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2006 ola bini <ola@ologix.com>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby runtime callback
import java security accesscontroller
import java security privilegedaction
import java security protectiondomain
import java util arraylist
import java util collections
import java util hashmap
import java util iterator
import java util list
import java util map
import org jruby ruby
import org jruby rubyclass
import org jruby rubykernel
import org jruby rubymodule
import org objectweb asm classwriter
import org objectweb asm label
import org objectweb asm methodvisitor
import org objectweb asm opcodes
import org jruby compiler impl skinnymethodadapter
import org jruby exceptions raiseexception
import org jruby internal runtime methods callconfiguration
import org jruby internal runtime methods dynamicmethod
import org jruby internal runtime methods javamethod
import org jruby javasupport util runtimehelpers
import org jruby runtime arity
import org jruby runtime block
import org jruby runtime calltype
import org jruby runtime callbackfactory
import org jruby runtime compiledblockcallback
import org jruby runtime dispatcher
import org jruby runtime methodindex
import org jruby runtime threadcontext
import org jruby runtime visibility
import org jruby runtime builtin irubyobject
import static org jruby util codegenutils
import org jruby util jrubyclassloader
public class invocationcallbackfactory extends callbackfactory implements opcodes
private final class type
final protectiondomain protectiondomain
protected final jrubyclassloader classloader
private final string typepath
protected final ruby runtime
private final static string super_class   p invocationcallback class
private final static string fast_super_class   p fastinvocationcallback class
private final static string call_sig   sig rubykernel iruby_object  params object class
object class  block class
private final static string fast_call_sig   sig rubykernel iruby_object  params
object class  object class
private final static string block_call_sig   sig rubykernel iruby_object  params
threadcontext class  rubykernel iruby_object  irubyobject class
private final static string irub   p rubykernel iruby_object
public static final int dispatcher_threadcontext_index   1
public static final int dispatcher_self_index   2
public static final int dispatcher_rubymodule_index   3
public static final int dispatcher_method_index   4
public static final int dispatcher_name_index   5
public static final int dispatcher_args_index   6
public static final int dispatcher_calltype_index   7
public static final int dispatcher_block_index   8
public static final int dispatcher_runtime_index   9
private static final int method_args_index   2
public invocationcallbackfactory ruby runtime  final class type  classloader classloader
this type   type
if  classloader instanceof jrubyclassloader
this classloader    jrubyclassloader classloader
else
this classloader   new jrubyclassloader classloader
this typepath   p type
this runtime   runtime
securitymanager sm   system getsecuritymanager
if  sm    null
this protectiondomain   type getprotectiondomain
else
this protectiondomain   accesscontroller doprivileged
new privilegedaction<protectiondomain>
public protectiondomain run
return type getprotectiondomain
private class getreturnclass string method  class args  throws exception
return type getmethod method  args  getreturntype
private classwriter creatector string namepath  throws exception
classwriter cw   new classwriter classwriter compute_maxs
cw visit v1_4  acc_public   acc_super  namepath  null  super_class  null
methodvisitor mv   cw visitmethod acc_public        null  null
mv visitcode
mv visitvarinsn aload  0
mv visitmethodinsn invokespecial  super_class
label line   new label
mv visitlinenumber 0  line
mv visitinsn return
mv visitmaxs 1  1
mv visitend
return cw
private classwriter createctordispatcher string namepath  map switchmap  throws exception
classwriter cw   new classwriter classwriter compute_maxs
cw visit v1_4  acc_public   acc_super  namepath  null  p dispatcher class   null
skinnymethodadapter mv   new skinnymethodadapter cw visitmethod acc_public     sig void type  params ruby class    null  null
mv visitcode
mv visitvarinsn aload  0
mv visitmethodinsn invokespecial  p dispatcher class
label line   new label
mv visitlinenumber 0  line
// create our array
mv aload 0
mv ldc new integer methodindex names size
mv newarray t_byte
mv putfield p dispatcher class      ci byte class
// for each switch value, set it into the table
mv aload 0
mv getfield p dispatcher class      ci byte class
for  iterator switchiter   switchmap keyset   iterator    switchiter hasnext
integer switchvalue    integer switchiter next
mv dup
// method index
mv ldc new integer methodindex getindex  string switchmap get switchvalue
// switch value is one-based, add one
mv ldc switchvalue
// store
mv barraystore
// clear the extra table on stack
mv pop
mv visitinsn return
mv visitmaxs 1  1
mv visitend
return cw
private classwriter createctorfast string namepath  throws exception
classwriter cw   new classwriter classwriter compute_maxs
cw visit v1_4  acc_public   acc_super  namepath  null  fast_super_class  null
methodvisitor mv   cw visitmethod acc_public        null  null
mv visitcode
mv visitvarinsn aload  0
mv visitmethodinsn invokespecial  fast_super_class
label line   new label
mv visitlinenumber 0  line
mv visitinsn return
mv visitmaxs 1  1
mv visitend
return cw
private classwriter createblockctor string namepath  throws exception
classwriter cw   new classwriter classwriter compute_maxs
cw visit v1_4  acc_public   acc_super  namepath  null  p object class
new string   p compiledblockcallback class
cw visitfield acc_private   acc_final     ci object class   null  null
methodvisitor mv   cw visitmethod acc_public     sig void type  params object class    null  null
mv visitcode
mv visitvarinsn aload  0
mv visitmethodinsn invokespecial  p object class
label line   new label
mv visitlinenumber 0  line
mv visitvarinsn aload  0
mv visitvarinsn aload  1
mv visitfieldinsn putfield  namepath     ci object class
mv visitinsn return
mv visitmaxs 1  1
mv visitend
return cw
private class tryclass string name
try
return classloader loadclass name
catch  exception e
return null
private methodvisitor startcall classwriter cw
methodvisitor mv   cw visitmethod acc_public     call_sig  null  null
mv visitcode
label line   new label
mv visitlinenumber 0  line
mv visitvarinsn aload  1
mv visittypeinsn checkcast  typepath
return mv
private methodvisitor startcalls classwriter cw
methodvisitor mv   cw visitmethod acc_public     call_sig  null  null
mv visitcode
label line   new label
mv visitlinenumber 0  line
mv visitvarinsn aload  1
checkcast mv  irubyobject class
return mv
private methodvisitor startcallfast classwriter cw
methodvisitor mv   cw visitmethod acc_public     fast_call_sig  null  null
mv visitcode
label line   new label
mv visitlinenumber 0  line
mv visitvarinsn aload  1
mv visittypeinsn checkcast  typepath
return mv
private methodvisitor startdispatcher classwriter cw
methodvisitor mv   cw visitmethod acc_public     sig irubyobject class  params threadcontext class  irubyobject class  rubyclass class  integer type  string class
irubyobject class  calltype class  block class    null  null
mv visitcode
label line   new label
mv visitlinenumber 0  line
mv visitvarinsn aload  2
mv visittypeinsn checkcast  typepath
return mv
private methodvisitor startcallsfast classwriter cw
methodvisitor mv   cw visitmethod acc_public     fast_call_sig  null  null
mv visitcode
label line   new label
mv visitlinenumber 0  line
mv visitvarinsn aload  1
mv visittypeinsn checkcast  irub
return mv
private methodvisitor startblockcall classwriter cw
methodvisitor mv   cw visitmethod acc_public     block_call_sig  null  null
mv visitcode
label line   new label
mv visitlinenumber 0  line
return mv
protected class endcall classwriter cw  methodvisitor mv  string name
mv visitend
cw visitend
byte code   cw tobytearray
return classloader defineclass name  code  protectiondomain
public callback getmethod string method
string mname   type getname         method
string mnamepath   typepath       method
synchronized  runtime getjrubyclassloader
class c   tryclass mname
try
if  c    null
class signature   new class   block class
class ret   getreturnclass method  signature
classwriter cw   creatector mnamepath
methodvisitor mv   startcall cw
mv visitvarinsn aload  3
mv visitmethodinsn invokevirtual  typepath  method  sig ret  signature
mv visitinsn areturn
mv visitmaxs 1  3
c   endcall cw  mv  mname
invocationcallback ic    invocationcallback  c newinstance
ic setarity arity noarguments
ic setjavaname method
return ic
catch  illegalargumentexception e
throw e
catch  exception e
throw new illegalargumentexception e getmessage
public callback getmethod string method  class arg1
string mname   type getname         method
string mnamepath   typepath       method
synchronized  runtime getjrubyclassloader
class c   tryclass mname
try
class descriptor   new class  arg1
if  c    null
class signature   new class   arg1  block class
class ret   getreturnclass method  signature
classwriter cw   creatector mnamepath
methodvisitor mv   startcall cw
loadarguments mv  method_args_index  1  descriptor
mv visitvarinsn aload  3
mv visitmethodinsn invokevirtual  typepath  method  sig ret  signature
mv visitinsn areturn
mv visitmaxs 3  3
c   endcall cw  mv  mname
invocationcallback ic    invocationcallback  c newinstance
ic setarity arity singleargument
ic setargumenttypes descriptor
ic setjavaname method
return ic
catch  illegalargumentexception e
throw e
catch  exception e
throw new illegalargumentexception e getmessage
public callback getmethod string method  class arg1  class arg2
string mname   type getname         method
string mnamepath   typepath       method
synchronized  runtime getjrubyclassloader
class c   tryclass mname
try
class descriptor   new class   arg1  arg2
if  c    null
class signature   new class   arg1  arg2  block class
class ret   getreturnclass method  signature
classwriter cw   creatector mnamepath
methodvisitor mv   startcall cw
loadarguments mv  method_args_index  2  descriptor
mv visitvarinsn aload  3
mv visitmethodinsn invokevirtual  typepath  method  sig ret  signature
mv visitinsn areturn
mv visitmaxs 4  3
c   endcall cw  mv  mname
invocationcallback ic    invocationcallback  c newinstance
ic setarity arity twoarguments
ic setargumenttypes descriptor
ic setjavaname method
return ic
catch  illegalargumentexception e
throw e
catch  exception e
throw new illegalargumentexception e getmessage
public callback getmethod string method  class arg1  class arg2  class arg3
string mname   type getname         method
string mnamepath   typepath       method
synchronized  runtime getjrubyclassloader
class c   tryclass mname
try
class descriptor   new class   arg1  arg2  arg3
if  c    null
class signature   new class   arg1  arg2  arg3  block class
class ret   getreturnclass method
descriptor
classwriter cw   creatector mnamepath
methodvisitor mv   startcall cw
loadarguments mv  method_args_index  3  descriptor
mv visitvarinsn aload  3
mv visitmethodinsn invokevirtual  typepath  method  sig ret  signature
mv visitinsn areturn
mv visitmaxs 5  3
c   endcall cw  mv  mname
invocationcallback ic    invocationcallback  c newinstance
ic setarity arity fixed 3
ic setargumenttypes descriptor
ic setjavaname method
return ic
catch  illegalargumentexception e
throw e
catch  exception e
throw new illegalargumentexception e getmessage
public callback getsingletonmethod string method
string mname   type getname         method
string mnamepath   typepath       method
synchronized  runtime getjrubyclassloader
class c   tryclass mname
try
if  c    null
class signature   new class   rubykernel iruby_object  block class
class ret   getreturnclass method  signature
classwriter cw   creatector mnamepath
methodvisitor mv   startcalls cw
mv visitvarinsn aload  3
mv visitmethodinsn invokestatic  typepath  method  sig ret  signature
mv visitinsn areturn
mv visitmaxs 1  3
c   endcall cw  mv  mname
invocationcallback ic    invocationcallback  c newinstance
ic setarity arity noarguments
ic setjavaname method
ic setsingleton true
return ic
catch  illegalargumentexception e
throw e
catch  exception e
throw new illegalargumentexception e getmessage
public callback getsingletonmethod string method  class arg1
string mname   type getname         method
string mnamepath   typepath       method
synchronized  runtime getjrubyclassloader
class c   tryclass mname
try
class descriptor   new class  arg1
if  c    null
class signature   new class   rubykernel iruby_object  arg1  block class
class ret   getreturnclass method  signature
classwriter cw   creatector mnamepath
methodvisitor mv   startcalls cw
loadarguments mv  method_args_index  1  descriptor
mv visitvarinsn aload  3
mv visitmethodinsn invokestatic  typepath  method  sig ret  signature
mv visitinsn areturn
mv visitmaxs 3  3
c   endcall cw  mv  mname
invocationcallback ic    invocationcallback  c newinstance
ic setarity arity singleargument
ic setargumenttypes descriptor
ic setjavaname method
ic setsingleton true
return ic
catch  illegalargumentexception e
throw e
catch  exception e
throw new illegalargumentexception e getmessage
public callback getsingletonmethod string method  class arg1  class arg2
string mname   type getname         method
string mnamepath   typepath       method
synchronized  runtime getjrubyclassloader
class c   tryclass mname
try
class descriptor   new class  arg1  arg2
if  c    null
class signature   new class   rubykernel iruby_object  arg1  arg2  block class
class ret   getreturnclass method  signature
classwriter cw   creatector mnamepath
methodvisitor mv   startcalls cw
loadarguments mv  method_args_index  2  descriptor
mv visitvarinsn aload  3
mv visitmethodinsn invokestatic  typepath  method  sig ret  signature
mv visitinsn areturn
mv visitmaxs 4  4
c   endcall cw  mv  mname
invocationcallback ic    invocationcallback  c newinstance
ic setarity arity twoarguments
ic setargumenttypes descriptor
ic setjavaname method
ic setsingleton true
return ic
catch  illegalargumentexception e
throw e
catch  exception e
throw new illegalargumentexception e getmessage
public callback getsingletonmethod string method  class arg1  class arg2  class arg3
string mname   type getname         method
string mnamepath   typepath       method
synchronized  runtime getjrubyclassloader
class c   tryclass mname
try
class descriptor   new class  arg1  arg2  arg3
if  c    null
class signature   new class   rubykernel iruby_object  arg1  arg2  arg3  block class
class ret   getreturnclass method  signature
classwriter cw   creatector mnamepath
methodvisitor mv   startcalls cw
loadarguments mv  method_args_index  3  descriptor
mv visitvarinsn aload  3
mv visitmethodinsn invokestatic  typepath  method  sig ret  signature
mv visitinsn areturn
mv visitmaxs 5  3
c   endcall cw  mv  mname
invocationcallback ic    invocationcallback  c newinstance
ic setarity arity fixed 3
ic setargumenttypes descriptor
ic setjavaname method
ic setsingleton true
return ic
catch  illegalargumentexception e
throw e
catch  exception e
throw new illegalargumentexception e getmessage
public callback getblockmethod string method
// todo: this is probably bad...
return new reflectioncallback type  method  new class   rubykernel iruby_object
rubykernel iruby_object    false  true  arity fixed 2   false
public compiledblockcallback getblockcallback string method  object scriptobject
class typeclass   scriptobject getclass
string typepathstring   p typeclass
string mname   typeclass getname         method
string mnamepath   typepathstring       method
synchronized  classloader
class c   tryclass mname
try
if  c    null
classwriter cw   createblockctor mnamepath
methodvisitor mv   startblockcall cw
mv visitvarinsn aload  0
mv visitfieldinsn getfield  mnamepath     ci object class
mv visittypeinsn checkcast  p typeclass
mv visitvarinsn aload  1
mv visitvarinsn aload  2
mv visitvarinsn aload  3
mv visitmethodinsn invokevirtual  typepathstring  method  sig
rubykernel iruby_object  params threadcontext class
rubykernel iruby_object  irubyobject class
mv visitinsn areturn
mv visitmaxs 2  3
c   endcall cw  mv  mname
compiledblockcallback ic    compiledblockcallback  c getconstructor object class  newinstance scriptobject
return ic
catch  illegalargumentexception e
throw e
catch  exception e
e printstacktrace
throw new illegalargumentexception e getmessage
public callback getoptsingletonmethod string method
string mname   type getname         method
string mnamepath   typepath       method
synchronized  runtime getjrubyclassloader
class c   tryclass mname
try
if  c    null
class signature   new class   rubykernel iruby_object  irubyobject class  block class
class ret   getreturnclass method  signature
classwriter cw   creatector mnamepath
methodvisitor mv   startcalls cw
mv visitvarinsn aload  method_args_index
checkcast mv  irubyobject class
mv visitvarinsn aload  3
mv visitmethodinsn invokestatic  typepath  method  sig ret  signature
mv visitinsn areturn
mv visitmaxs 2  3
c   endcall cw  mv  mname
invocationcallback ic    invocationcallback  c newinstance
ic setarity arity optional
ic setargumenttypes invocationcallback optional_args
ic setjavaname method
ic setsingleton true
return ic
catch  illegalargumentexception e
throw e
catch  exception e
throw new illegalargumentexception e getmessage
public callback getoptmethod string method
string mname   type getname         method
string mnamepath   typepath       method
synchronized  runtime getjrubyclassloader
class c   tryclass mname
try
if  c    null
class signature   new class   irubyobject class  block class
class ret   getreturnclass method  signature
classwriter cw   creatector mnamepath
methodvisitor mv   startcall cw
mv visitvarinsn aload  method_args_index
checkcast mv  irubyobject class
mv visitvarinsn aload  3
mv visitmethodinsn invokevirtual  typepath  method  sig ret  signature
mv visitinsn areturn
mv visitmaxs 2  3
c   endcall cw  mv  mname
invocationcallback ic    invocationcallback  c newinstance
ic setarity arity optional
ic setargumenttypes invocationcallback optional_args
ic setjavaname method
return ic
catch  illegalargumentexception e
throw e
catch  exception e
throw new illegalargumentexception e getmessage
public callback getfastmethod string method
string mname   type getname         method
string mnamepath   typepath       method
synchronized  runtime getjrubyclassloader
class c   tryclass mname
try
if  c    null
class ret   getreturnclass method  new class
classwriter cw   createctorfast mnamepath
methodvisitor mv   startcallfast cw
mv visitmethodinsn invokevirtual  typepath  method  sig ret
mv visitinsn areturn
mv visitmaxs 1  3
c   endcall cw  mv  mname
fastinvocationcallback ic    fastinvocationcallback  c newinstance
ic setarity arity noarguments
ic setjavaname method
return ic
catch  illegalargumentexception e
throw e
catch  exception e
throw new illegalargumentexception e getmessage
public callback getfastmethod string method  class arg1
string mname   type getname         method
string mnamepath   typepath       method
synchronized  runtime getjrubyclassloader
class c   tryclass mname
try
class descriptor   new class   arg1
if  c    null
class signature   descriptor
class ret   getreturnclass method  signature
classwriter cw   createctorfast mnamepath
methodvisitor mv   startcallfast cw
loadarguments mv  method_args_index  1  descriptor
mv visitmethodinsn invokevirtual  typepath  method  sig ret  signature
mv visitinsn areturn
mv visitmaxs 3  3
c   endcall cw  mv  mname
fastinvocationcallback ic    fastinvocationcallback  c newinstance
ic setarity arity singleargument
ic setargumenttypes descriptor
ic setjavaname method
return ic
catch  illegalargumentexception e
throw e
catch  exception e
throw new illegalargumentexception e getmessage
public callback getfastmethod string method  class arg1  class arg2
string mname   type getname         method
string mnamepath   typepath       method
synchronized  runtime getjrubyclassloader
class c   tryclass mname
try
class descriptor   new class   arg1  arg2
if  c    null
class signature   descriptor
class ret   getreturnclass method  signature
classwriter cw   createctorfast mnamepath
methodvisitor mv   startcallfast cw
loadarguments mv  method_args_index  2  descriptor
mv visitmethodinsn invokevirtual  typepath  method  sig ret  signature
mv visitinsn areturn
mv visitmaxs 4  3
c   endcall cw  mv  mname
fastinvocationcallback ic    fastinvocationcallback  c newinstance
ic setarity arity twoarguments
ic setargumenttypes descriptor
ic setjavaname method
return ic
catch  illegalargumentexception e
throw e
catch  exception e
throw new illegalargumentexception e getmessage
public callback getfastmethod string method  class arg1  class arg2  class arg3
string mname   type getname         method
string mnamepath   typepath       method
synchronized  runtime getjrubyclassloader
class c   tryclass mname
try
class descriptor   new class   arg1  arg2  arg3
if  c    null
class signature   descriptor
class ret   getreturnclass method  signature
classwriter cw   createctorfast mnamepath
methodvisitor mv   startcallfast cw
loadarguments mv  method_args_index  3  descriptor
mv visitmethodinsn invokevirtual  typepath  method  sig ret  signature
mv visitinsn areturn
mv visitmaxs 5  3
c   endcall cw  mv  mname
fastinvocationcallback ic    fastinvocationcallback  c newinstance
ic setarity arity fixed 3
ic setargumenttypes descriptor
ic setjavaname method
return ic
catch  illegalargumentexception e
throw e
catch  exception e
throw new illegalargumentexception e getmessage
public callback getfastsingletonmethod string method
string mname   type getname         method
string mnamepath   typepath       method
synchronized  runtime getjrubyclassloader
class c   tryclass mname
try
if  c    null
class signature   new class   rubykernel iruby_object
class ret   getreturnclass method  signature
classwriter cw   createctorfast mnamepath
methodvisitor mv   startcallsfast cw
mv visitmethodinsn invokestatic  typepath  method  sig ret  signature
mv visitinsn areturn
mv visitmaxs 1  3
c   endcall cw  mv  mname
fastinvocationcallback ic    fastinvocationcallback  c newinstance
ic setarity arity noarguments
ic setjavaname method
ic setsingleton true
return ic
catch  illegalargumentexception e
throw e
catch  exception e
throw new illegalargumentexception e getmessage
public callback getfastsingletonmethod string method  class arg1
string mname   type getname         method
string mnamepath   typepath       method
synchronized  runtime getjrubyclassloader
class c   tryclass mname
try
class descriptor   new class  arg1
if  c    null
class signature   new class   rubykernel iruby_object  arg1
class ret   getreturnclass method  signature
classwriter cw   createctorfast mnamepath
methodvisitor mv   startcallsfast cw
loadarguments mv  method_args_index  1  descriptor
mv visitmethodinsn invokestatic  typepath  method  sig ret  signature
mv visitinsn areturn
mv visitmaxs 3  3
c   endcall cw  mv  mname
fastinvocationcallback ic    fastinvocationcallback  c newinstance
ic setarity arity singleargument
ic setargumenttypes descriptor
ic setjavaname method
ic setsingleton true
return ic
catch  illegalargumentexception e
throw e
catch  exception e
throw new illegalargumentexception e getmessage
public callback getfastsingletonmethod string method  class arg1  class arg2
string mname   type getname         method
string mnamepath   typepath       method
synchronized  runtime getjrubyclassloader
class c   tryclass mname
try
class descriptor   new class  arg1  arg2
if  c    null
class signature   new class   rubykernel iruby_object  arg1  arg2
class ret   getreturnclass method  signature
classwriter cw   createctorfast mnamepath
methodvisitor mv   startcallsfast cw
loadarguments mv  method_args_index  2  descriptor
mv visitmethodinsn invokestatic  typepath  method  sig ret  signature
mv visitinsn areturn
mv visitmaxs 4  4
c   endcall cw  mv  mname
fastinvocationcallback ic    fastinvocationcallback  c newinstance
ic setarity arity twoarguments
ic setargumenttypes descriptor
ic setjavaname method
ic setsingleton true
return ic
catch  illegalargumentexception e
throw e
catch  exception e
throw new illegalargumentexception e getmessage
public callback getfastsingletonmethod string method  class arg1  class arg2  class arg3
string mname   type getname         method
string mnamepath   typepath       method
synchronized  runtime getjrubyclassloader
class c   tryclass mname
try
class descriptor   new class  arg1  arg2  arg3
if  c    null
class signature   new class   rubykernel iruby_object  arg1  arg2  arg3
class ret   getreturnclass method  signature
classwriter cw   createctorfast mnamepath
methodvisitor mv   startcallsfast cw
loadarguments mv  method_args_index  3  descriptor
mv visitmethodinsn invokestatic  typepath  method  sig ret  signature
mv visitinsn areturn
mv visitmaxs 5  3
c   endcall cw  mv  mname
fastinvocationcallback ic    fastinvocationcallback  c newinstance
ic setarity arity fixed 3
ic setargumenttypes descriptor
ic setjavaname method
ic setsingleton true
return ic
catch  illegalargumentexception e
throw e
catch  exception e
throw new illegalargumentexception e getmessage
public callback getfastoptmethod string method
string mname   type getname         method
string mnamepath   typepath       method
synchronized  runtime getjrubyclassloader
class c   tryclass mname
try
if  c    null
class signature   new class   irubyobject class
class ret   getreturnclass method  signature
classwriter cw   createctorfast mnamepath
methodvisitor mv   startcallfast cw
mv visitvarinsn aload  method_args_index
checkcast mv  irubyobject class
mv visitmethodinsn invokevirtual  typepath  method  sig ret  signature
mv visitinsn areturn
mv visitmaxs 2  3
c   endcall cw  mv  mname
fastinvocationcallback ic    fastinvocationcallback  c newinstance
ic setarity arity optional
ic setargumenttypes invocationcallback optional_args
ic setjavaname method
return ic
catch  illegalargumentexception e
throw e
catch  exception e
throw new illegalargumentexception e getmessage
public callback getfastoptsingletonmethod string method
string mname   type getname         method
string mnamepath   typepath       method
synchronized  runtime getjrubyclassloader
class c   tryclass mname
try
if  c    null
class signature   new class   rubykernel iruby_object  irubyobject class
class ret   getreturnclass method  signature
classwriter cw   createctorfast mnamepath
methodvisitor mv   startcallsfast cw
mv visitvarinsn aload  method_args_index
checkcast mv  irubyobject class
mv visitmethodinsn invokestatic  typepath  method  sig ret  signature
mv visitinsn areturn
mv visitmaxs 2  3
c   endcall cw  mv  mname
fastinvocationcallback ic    fastinvocationcallback  c newinstance
ic setarity arity optional
ic setargumenttypes invocationcallback optional_args
ic setjavaname method
ic setsingleton true
return ic
catch  illegalargumentexception e
throw e
catch  exception e
throw new illegalargumentexception e getmessage
public dispatcher createdispatcher rubyclass metaclass
string classname   type getname         metaclass getbasename
string classpath   typepath       metaclass getbasename
synchronized  runtime getjrubyclassloader
class c   tryclass classname
try
if  c    null
// build a map of all methods from the module and all its parents
map allmethods   new hashmap
rubymodule current   metaclass
while  current    null
for  iterator methoditer   current getmethods   entryset   iterator    methoditer hasnext
map entry entry    map entry methoditer next
if  allmethods containskey entry getkey     continue
dynamicmethod dynamicmethod    dynamicmethod entry getvalue
if    dynamicmethod instanceof javamethod
// method is not a simple/fast method, don't add to our big switch
// fixme: eventually, we'll probably want to add it to the switch for fast non-hash dispatching
continue
else
// todo: skip singleton methods for now; we'll figure out fast dispatching for them in a future patch
javamethod javamethod    javamethod dynamicmethod
// singleton methods require doing a static invocation, etc...disabling again for now
if  javamethod issingleton      javamethod getcallconfig      callconfiguration no_frame_no_scope  continue
// skipping non-public methods for now, to avoid visibility checks in sti
if  dynamicmethod getvisibility      visibility public  continue
allmethods put entry getkey    entry getvalue
current   current getsuperclass
while  current    null    current isincluded    current   current getsuperclass
// switches are 1-based, so add one
label labels   new label
label defaultlabel   new label
int switchvalue   0
map switchmap   new hashmap
// note: we sort the list of keys here to ensure they're encountered in the same order from run to run
// this will aid aot compilation, since a given revision of jruby should always generate the same
// sequence of method indices, and code compiled for that revision should continue to work.
// fixme: this will not aid compiling once and running across jruby versions, since method indices
// could be generated in a different order on a different revision (adds, removes, etc over time)
list methodkeys   new arraylist allmethods keyset
collections sort methodkeys
for  iterator methoditer   methodkeys iterator    methoditer hasnext
string indexkey    string methoditer next
switchvalue
switchmap put new integer switchvalue   indexkey
// switches are one-based, so subtract one
labels   new label
classwriter cw   createctordispatcher classpath  switchmap
skinnymethodadapter mv   new skinnymethodadapter startdispatcher cw
// store runtime
mv aload dispatcher_threadcontext_index
mv invokevirtual p threadcontext class      sig ruby class
mv astore dispatcher_runtime_index
label trybegin   new label
label tryend   new label
label trycatch   new label
mv trycatch trybegin  tryend  trycatch  p stackoverflowerror class
mv label trybegin
// invoke directly
// receiver is already loaded by startdispatcher
// check if tracing is on
mv aload dispatcher_runtime_index
mv invokevirtual p ruby class      sig boolean class
mv ifne defaultlabel
// if no switch values, go straight to default
if  switchvalue    0
mv go_to defaultlabel
else
// load switch value
mv aload 0
mv getfield p dispatcher class      ci byte class
// ensure size isn't too large
mv dup
mv arraylength
mv iload dispatcher_method_index
label ok   new label
mv if_icmpgt ok
// size is too large, remove extra table and go to default
mv pop
mv go_to defaultlabel
// size is ok, retrieve from table and switch on the result
mv label ok
mv iload dispatcher_method_index
mv barrayload
// perform switch
mv tableswitch 1  switchvalue  defaultlabel  labels
for  int i   0  i < labels length  i
string rubyname    string switchmap get new integer i   1
dynamicmethod dynamicmethod    dynamicmethod allmethods get rubyname
mv label labels
// based on the check above, it's a fast method, we can fast dispatch
javamethod javamethod    javamethod dynamicmethod
string method   javamethod getjavaname
arity arity   javamethod getarity
class descriptor   javamethod getargumenttypes
// arity check
checkarity mv  arity
// if singleton load self/recv
if  javamethod issingleton
mv aload dispatcher_self_index
boolean contextprovided   descriptor length > 0    descriptor    threadcontext class
if  contextprovided
mv aload dispatcher_threadcontext_index
int argcount   arity getvalue
switch  argcount
case 3  case 2  case 1
loadarguments mv  dispatcher_args_index  argcount  descriptor  contextprovided
break
case 0
break
default     this should catch all opt rest cases
mv aload dispatcher_args_index
checkcast mv  irubyobject class
break
class ret   getreturnclass method  descriptor
string callsig   sig ret  descriptor
//                            if (method.equals("op_equal")) system.out.println("name: " + type.getname() + "method: " + sig(ret,descriptor) + ", arity: " + arity.getvalue());
// if block, pass it
if  descriptor length > 0    descriptor    block class
mv aload dispatcher_block_index
mv invokevirtual typepath  method  callsig
mv areturn
// done with cases, handle default case by getting method object and invoking it
mv label defaultlabel
label aftercall   new label
dispatchwithoutsti mv  aftercall
mv label tryend
mv go_to aftercall
mv label trycatch
mv aload dispatcher_runtime_index
mv ldc
mv invokevirtual p ruby class      sig raiseexception class  params string class
mv athrow
// calls done, return
mv label aftercall
mv areturn
mv visitmaxs 1  1
c   endcall cw  mv  classname
dispatcher dispatcher    dispatcher c getconstructor new class  ruby class   newinstance new object  runtime
return dispatcher
catch  illegalargumentexception e
throw e
catch  exception e
e printstacktrace
throw new illegalargumentexception e getmessage
private void dispatchwithoutsti skinnymethodadapter mv  label aftercall
// retrieve method
mv aload dispatcher_rubymodule_index      module
mv aload dispatcher_name_index      name
mv invokevirtual p rubymodule class      sig dynamicmethod class  params string class
label okcall   new label
callmethodmissingifnecessary mv  aftercall  okcall
// call is ok, punch it!
mv label okcall
// method object already present, push various args
mv aload dispatcher_threadcontext_index      tc
mv aload dispatcher_self_index      self
mv aload dispatcher_rubymodule_index      klazz
mv aload dispatcher_name_index      name
mv aload dispatcher_args_index
mv aload dispatcher_block_index
mv invokevirtual p dynamicmethod class
sig irubyobject class
params threadcontext class  irubyobject class  rubymodule class  string class  irubyobject class  block class
public void callmethodmissingifnecessary skinnymethodadapter mv  label aftercall  label okcall
label methodmissing   new label
// if undefined, branch to method_missing
mv dup
mv invokevirtual p dynamicmethod class      sig boolean class
mv ifne methodmissing
// if we're not attempting to invoke method_missing and method is not visible, branch to method_missing
mv aload dispatcher_name_index
mv ldc
// if it's method_missing, just invoke it
mv invokevirtual p string class      sig boolean class  params object class
mv ifne okcall
// check visibility
mv dup       dup method
mv aload dispatcher_threadcontext_index
mv invokevirtual p threadcontext class      sig irubyobject class
mv aload dispatcher_calltype_index
mv invokevirtual p dynamicmethod class      sig boolean class  params irubyobject class  calltype class
mv ifne okcall
// invoke callmethodmissing
mv label methodmissing
mv aload dispatcher_threadcontext_index      tc
mv swap       under method
mv aload dispatcher_self_index      self
mv swap       under method
mv aload dispatcher_name_index      name
mv aload dispatcher_args_index      args
// caller
mv aload dispatcher_threadcontext_index
mv invokevirtual p threadcontext class      sig irubyobject class
mv aload dispatcher_calltype_index      calltype
mv aload dispatcher_block_index      block
// invoke callmethodmissing method directly
// todo: this could be further optimized, since some dsls hit method_missing pretty hard...
mv invokestatic p runtimehelpers class      sig irubyobject class
params threadcontext class  irubyobject class  dynamicmethod class  string class
irubyobject class  irubyobject class  calltype class  block class
// if no exception raised, jump to end to leave result on stack for return
mv go_to aftercall
private void loadarguments methodvisitor mv  int argsindex  int count  class types
loadarguments mv  argsindex  count  types  false
private void loadarguments methodvisitor mv  int argsindex  int count  class types  boolean contextprovided
for  int i   0  i < count  i
loadargument mv  argsindex  i  types
private void loadargument methodvisitor mv  int argsindex  int argindex  class type1
mv visitvarinsn aload  argsindex
mv visitldcinsn new integer argindex
mv visitinsn aaload
checkcast mv  type1
private void checkcast methodvisitor mv  class clazz
mv visittypeinsn checkcast  p clazz
private void checkarity skinnymethodadapter mv  arity arity
if  arity getvalue   >  0
label arityok   new label
// check arity
mv aload 6
mv arraylength
// load arity for check
switch  arity getvalue
case 3  mv iconst_3    break
case 2  mv iconst_2    break
case 1  mv iconst_1    break
case 0  mv iconst_0    break
default  mv ldc new integer arity getvalue
mv if_icmpeq arityok
// throw
mv aload 9
mv aload 6
mv arraylength
// load arity for error
switch  arity getvalue
case 3  mv iconst_3    break
case 2  mv iconst_2    break
case 1  mv iconst_1    break
case 0  mv iconst_0    break
default  mv ldc new integer arity getvalue
mv invokevirtual p ruby class      sig raiseexception class  params int class  int class
mv athrow
// arity ok, continue
mv label arityok
invocationcallbackfactory