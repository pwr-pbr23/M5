/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2001-2002 jan arne petersen <jpetersen@uni-bonn.de>
* copyright (c) 2002 benoit cerrina <b.cerrina@wanadoo.fr>
* copyright (c) 2002-2004 anders bengtsson <ndrsbngtssn@yahoo.se>
* copyright (c) 2004 charles o nutter <headius@headius.com>
* copyright (c) 2004 stefan matthias aust <sma@3plus4.de>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby runtime
import org jruby ruby
import org jruby rubyclass
import org jruby runtime callback callback
import org jruby runtime callback reflectioncallbackfactory
import org jruby runtime callback invocationcallbackfactory
import org jruby runtime callback dumpinginvocationcallbackfactory
import org jruby util safepropertyaccessor
/**
* helper class to build callback method.
* this impements method corresponding to the signature of method most often found in
* the ruby library, for methods with other signature the appropriate callback object
* will need to be explicitly created.
**/
public abstract class callbackfactory
public static final class null_class_array   new class
/**
* gets an instance method with no arguments.
* @param method name of the method
* @return a callback object corresponding to the appropriate method
**/
public abstract callback getmethod string method
public abstract callback getfastmethod string method
/**
* gets an instance method with 1 argument.
* @param method name of the method
* @param arg1 the class of the only argument for this method
* @return a callback object corresponding to the appropriate method
**/
public abstract callback getmethod string method  class arg1
public abstract callback getfastmethod string method  class arg1
/**
* gets an instance method with two arguments.
* @param method name of the method
* @param arg1 the java class of the first argument for this method
* @param arg2 the java class of the second argument for this method
* @return a callback object corresponding to the appropriate method
**/
public abstract callback getmethod string method  class arg1  class arg2
public abstract callback getfastmethod string method  class arg1  class arg2
/**
* gets an instance method with two arguments.
* @param method name of the method
* @param arg1 the java class of the first argument for this method
* @param arg2 the java class of the second argument for this method
* @param arg3 the java class of the second argument for this method
* @return a callback object corresponding to the appropriate method
**/
public abstract callback getmethod string method  class arg1  class arg2  class arg3
public abstract callback getfastmethod string method  class arg1  class arg2  class arg3
/**
* gets a singleton (class) method without arguments.
* @param method name of the method
* @return a callback object corresponding to the appropriate method
**/
public abstract callback getsingletonmethod string method
public abstract callback getfastsingletonmethod string method
/**
* gets a singleton (class) method with 1 argument.
* @param method name of the method
* @param arg1 the class of the only argument for this method
* @return a callback object corresponding to the appropriate method
**/
public abstract callback getsingletonmethod string method  class arg1
public abstract callback getfastsingletonmethod string method  class arg1
/**
* gets a singleton (class) method with 2 arguments.
* @param method name of the method
* @return a callback object corresponding to the appropriate method
**/
public abstract callback getsingletonmethod string method  class arg1  class arg2
public abstract callback getfastsingletonmethod string method  class arg1  class arg2
/**
* gets a singleton (class) method with 3 arguments.
* @param method name of the method
* @return a callback object corresponding to the appropriate method
**/
public abstract callback getsingletonmethod string method  class arg1  class arg2  class arg3
public abstract callback getfastsingletonmethod string method  class arg1  class arg2  class arg3
public abstract callback getblockmethod string method
public abstract compiledblockcallback getblockcallback string method  object scriptobject
/**
* gets a singleton (class) method with no mandatory argument and some optional arguments.
* @param method name of the method
* @return a callback object corresponding to the appropriate method
**/
public abstract callback getoptsingletonmethod string method
public abstract callback getfastoptsingletonmethod string method
/**
* gets an instance method with no mandatory argument and some optional arguments.
* @param method name of the method
* @return a callback object corresponding to the appropriate method
**/
public abstract callback getoptmethod string method
public abstract callback getfastoptmethod string method
public abstract dispatcher createdispatcher rubyclass metaclass
private static boolean reflection   false
private static boolean dumping   false
static
if  ruby issecurityrestricted
reflection   true
else
if safepropertyaccessor getproperty       null    safepropertyaccessor getboolean
reflection   true
if safepropertyaccessor getproperty       null
dumping   true
public static callbackfactory createfactory ruby runtime  class type
return createfactory runtime  type  runtime getjrubyclassloader
// used by compiler
public static callbackfactory createfactory ruby runtime  class type  classloader classloader
if reflection
return new reflectioncallbackfactory type
else if dumping
return new dumpinginvocationcallbackfactory runtime  type  classloader
else
// fixme: no, i don't like it.
return new invocationcallbackfactory runtime  type  classloader