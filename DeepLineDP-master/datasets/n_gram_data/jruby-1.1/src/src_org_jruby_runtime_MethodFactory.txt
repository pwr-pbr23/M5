/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2008 the jruby community <www.jruby.org>
* copyright (c) 2006 ola bini <ola@ologix.com>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby runtime
import java lang reflect method
import org jruby ruby
import org jruby rubymodule
import org jruby internal runtime methods callconfiguration
import org jruby internal runtime methods dynamicmethod
import org jruby internal runtime methods reflectionmethodfactory
import org jruby internal runtime methods invocationmethodfactory
import org jruby internal runtime methods dumpinginvocationmethodfactory
import org jruby parser staticscope
import org jruby runtime builtin irubyobject
import org jruby util safepropertyaccessor
/**
* methodfactory is used to generate "invokers" or "method handles" given a target
* class, method name, and other characteristics. in order to bind methods into
* ruby's reified class hierarchy, we need a way to treat individual methods as
* objects. implementers of this class provide that functionality.
*/
public abstract class methodfactory
/**
* a class[] representing the signature of compiled ruby method.
*/
public final static class compiled_method_params   new class  threadcontext class  irubyobject class  irubyobject class  block class
/**
* for batched method construction, the logic necessary to bind resulting
* method objects into a target module/class must be provided as a callback.
* this interface should be implemented by code calling any batched methods
* on this methodfactory.
*/
public interface methoddefiningcallback
public void define rubymodule targetmetaclass  method method  dynamicmethod dynamicmethod
/**
* based on optional properties, create a new methodfactory. by default,
* this will create a code-generation-based invocationmethodfactory. if
* security restricts code generation, reflectionmethodfactory will be used.
* if we are dumping class definitions, dumpinginvocationmethodfactory will
* be used. see methodfactory's static initializer for more details.
*
* @param classloader the classloader to use for searching for and
* dynamically loading code.
* @return a new methodfactory.
*/
public static methodfactory createfactory classloader classloader
if  reflection  return new reflectionmethodfactory
if  dumping  return new dumpinginvocationmethodfactory dumpingpath  classloader
return new invocationmethodfactory classloader
/**
* get a new method handle based on the target jruby-compiled method.
* because compiled ruby methods have additional requirements and
* characteristics not typically found in java-based methods, this is
* provided as a separate way to define such method handles.
*
* @param implementationclass the class to which the method will be bound.
* @param method the name of the method
* @param arity the arity of the method
* @param visibility the method's visibility on the target type.
* @param scope the methods static scoping information.
* @param scriptobject an instace of the target compiled method class.
* @param callconfig the call configuration to use for this method.
* @return a new method handle for the target compiled method.
*/
public abstract dynamicmethod getcompiledmethod
rubymodule implementationclass  string method
arity arity  visibility visibility  staticscope scope
object scriptobject  callconfiguration callconfig
/**
* based on an annotated java method object, generate a method handle using
* the annotation and the target signature. the annotation and signature
* will be used to dynamically generate the appropriate call logic for the
* handle.
*
* @param implementationclass the target class or module on which the method
* will be bound.
* @param method the java.lang.method object for the target method.
* @return a method handle for the target object.
*/
public abstract dynamicmethod getannotatedmethod rubymodule implementationclass  method method
/**
* add all annotated methods on the target java class to the specified
* ruby class using the semantics of getannotatedmethod, calling back to
* the specified callback for each method to allow the caller to bind
* each method.
*
* @param implementationclass the target class or module on which the method
* will be bound.
* @param containingclass the java class containined annotated methods to
* be bound.
* @param callback a callback provided by the caller which handles binding
* each method.
*/
public abstract void defineindexedannotatedmethods rubymodule implementationclass  class containingclass  methoddefiningcallback callback
/**
* use the reflection-based factory.
*/
private static boolean reflection   false
/**
* user the dumping-based factory, which generates .class files as it runs.
*/
private static boolean dumping   false
/**
* the target path for the dumping factory to save the .class files.
*/
private static string dumpingpath   null
static
// initialize the static settings to determine which factory to use
if  ruby issecurityrestricted
reflection   true
else
if  safepropertyaccessor getproperty       null    safepropertyaccessor getboolean
reflection   true
if  safepropertyaccessor getproperty       null
dumping   true
dumpingpath   safepropertyaccessor getproperty