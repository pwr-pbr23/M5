/*
***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2001-2002 benoit cerrina <b.cerrina@wanadoo.fr>
* copyright (c) 2001-2002 jan arne petersen <jpetersen@uni-bonn.de>
* copyright (c) 2002-2004 anders bengtsson <ndrsbngtssn@yahoo.se>
* copyright (c) 2004 thomas e enebo <enebo@acm.org>
* copyright (c) 2004 stefan matthias aust <sma@3plus4.de>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby ast
import java util list
import org jruby ast types inamenode
import org jruby ast visitor nodevisitor
import org jruby evaluator instruction
import org jruby lexer yacc isourceposition
import org jruby runtime callsite
import org jruby runtime calltype
/**
* represents a method call with self as an implicit receiver.
*/
public class fcallnode extends node implements inamenode  iargumentnode  blockacceptingnode
private node argsnode
private node iternode
public callsite calladapter
public fcallnode isourceposition position  string name  node argsnode
this position  name  argsnode  null
public fcallnode isourceposition position  string name  node argsnode  node iternode
super position  nodetype fcallnode
setargsnode argsnode
this iternode   iternode
this calladapter   new callsite inlinecachingcallsite name  calltype functional
/**
* accept for the visitor pattern.
* @param ivisitor the visitor
**/
public instruction accept nodevisitor ivisitor
return ivisitor visitfcallnode this
/**
* get the node that represents a block or a block variable.
*/
public node getiternode
return iternode
public void setiternode node iternode
this iternode   iternode
calladapter   new callsite inlinecachingcallsite calladapter methodname  calltype functional
/**
* gets the argsnode.
* @return returns a node
*/
public node getargsnode
return argsnode
/**
* set the argsnode
*
* @param argsnode set the arguments for this node.
*/
public void setargsnode node argsnode
this argsnode   argsnode
// if we have more than one arg, make sure the array created to contain them is not objectspaced
if  argsnode instanceof arraynode
arraynode argsnode  setlightweight true
/**
* gets the name.
* @return returns a string
*/
public string getname
return calladapter methodname
public list<node> childnodes
return createlist argsnode  iternode
public string tostring
return     getname