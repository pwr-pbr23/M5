/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2006 the jruby community <www.jruby.org>
* copyright (c) 2006 ola bini <ola@ologix.com>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby internal runtime methods
import java io printwriter
import java lang reflect method
import java lang reflect modifier
import java util arraylist
import java util collections
import java util comparator
import java util hashmap
import org jruby ruby
import org jruby parser staticscope
import org objectweb asm classwriter
import org objectweb asm methodvisitor
import org objectweb asm opcodes
import org jruby rubymodule
import org jruby anno jrubymethod
import org jruby anno javamethoddescriptor
import org jruby compiler astinspector
import org jruby compiler impl skinnymethodadapter
import org jruby exceptions jumpexception
import org jruby exceptions raiseexception
import org jruby javasupport util runtimehelpers
import org jruby runtime arity
import org jruby runtime block
import org jruby runtime methodfactory
import org jruby runtime threadcontext
import org jruby runtime visibility
import org jruby runtime builtin irubyobject
import static org jruby util codegenutils
import org jruby util jrubyclassloader
import org objectweb asm classreader
import org objectweb asm label
import org objectweb asm util checkclassadapter
/**
* in order to avoid the overhead with reflection-based method handles, this
* methodfactory uses asm to generate tiny invoker classes. this allows for
* better performance and more specialization per-handle than can be supported
* via reflection. it also allows optimizing away many conditionals that can
* be determined once ahead of time.
*
* when running in secured environments, this factory may not function. when
* this can be detected, methodfactory will fall back on the reflection-based
* factory instead.
*
* @see org.jruby.internal.runtime.methods.methodfactory
*/
public class invocationmethodfactory extends methodfactory implements opcodes
/** the pathname of the super class for compiled ruby method handles. */
private final static string compiled_super_class   p compiledmethod class
/** the outward call signature for compiled ruby method handles. */
private final static string compiled_call_sig   sig irubyobject class
params threadcontext class  irubyobject class  rubymodule class  string class  irubyobject class
/** the outward call signature for compiled ruby method handles. */
private final static string compiled_call_sig_block   sig irubyobject class
params threadcontext class  irubyobject class  rubymodule class  string class  irubyobject class  block class
/** the outward arity-zero call-with-block signature for compiled ruby method handles. */
private final static string compiled_call_sig_zero_block   sig irubyobject class
params threadcontext class  irubyobject class  rubymodule class  string class  block class
/** the outward arity-zero call-with-block signature for compiled ruby method handles. */
private final static string compiled_call_sig_zero   sig irubyobject class
params threadcontext class  irubyobject class  rubymodule class  string class
/** the outward arity-zero call-with-block signature for compiled ruby method handles. */
private final static string compiled_call_sig_one_block   sig irubyobject class
params threadcontext class  irubyobject class  rubymodule class  string class  irubyobject class  block class
/** the outward arity-zero call-with-block signature for compiled ruby method handles. */
private final static string compiled_call_sig_one   sig irubyobject class
params threadcontext class  irubyobject class  rubymodule class  string class  irubyobject class
/** the outward arity-zero call-with-block signature for compiled ruby method handles. */
private final static string compiled_call_sig_two_block   sig irubyobject class
params threadcontext class  irubyobject class  rubymodule class  string class  irubyobject class  irubyobject class  block class
/** the outward arity-zero call-with-block signature for compiled ruby method handles. */
private final static string compiled_call_sig_two   sig irubyobject class
params threadcontext class  irubyobject class  rubymodule class  string class  irubyobject class  irubyobject class
/** the outward arity-zero call-with-block signature for compiled ruby method handles. */
private final static string compiled_call_sig_three_block   sig irubyobject class
params threadcontext class  irubyobject class  rubymodule class  string class  irubyobject class  irubyobject class  irubyobject class  block class
/** the outward arity-zero call-with-block signature for compiled ruby method handles. */
private final static string compiled_call_sig_three   sig irubyobject class
params threadcontext class  irubyobject class  rubymodule class  string class  irubyobject class  irubyobject class  irubyobject class
/** the super constructor signature for compile ruby method handles. */
private final static string compiled_super_sig
sig void type  rubymodule class  arity class  visibility class  staticscope class  object class  callconfiguration class
/** the super constructor signature for java-based method handles. */
private final static string java_super_sig   sig void type  params rubymodule class  visibility class
/** the super constructor signature for indexed java-based method handles. */
private final static string java_indexed_super_sig   sig void type  params rubymodule class  visibility class  int class
/** the lvar index of "this" */
public static final int this_index   0
/** the lvar index of the passed-in threadcontext */
public static final int threadcontext_index   1
/** the lvar index of the method-receiving object */
public static final int receiver_index   2
/** the lvar index of the rubyclass being invoked against */
public static final int class_index   3
/** the lvar index method name being invoked */
public static final int name_index   4
/** the lvar index of the method args on the call */
public static final int args_index   5
/** the lvar index of the passed-in block on the call */
public static final int block_index   6
/** the classloader to use for code loading */
private jrubyclassloader classloader
/**
* construct a new invocationmethodfactory using the specified classloader
* to load code. if the target classloader is not an instance of
* jrubyclassloader, it will be wrapped with one.
*
* @param classloader the classloader to use, or to wrap if it is not a
* jrubyclassloader instance.
*/
public invocationmethodfactory classloader classloader
if  classloader instanceof jrubyclassloader
this classloader    jrubyclassloader classloader
else
this classloader   new jrubyclassloader classloader
/**
* use code generation to provide a method handle for a compiled ruby method.
*
* @see org.jruby.internal.runtime.methods.methodfactory#getcompiledmethod
*/
public dynamicmethod getcompiledmethod
rubymodule implementationclass  string method  arity arity
visibility visibility  staticscope scope  object scriptobject  callconfiguration callconfig
string sup   compiled_super_class
class scriptclass   scriptobject getclass
string mname   scriptclass getname         method   arity
synchronized  classloader
class generatedclass   tryclass implementationclass getruntime    mname
try
if  generatedclass    null
string typepath   p scriptclass
string mnamepath   typepath       method   arity
classwriter cw   createcompiledctor mnamepath sup
skinnymethodadapter mv   new skinnymethodadapter cw visitmethod acc_public     compiled_call_sig_block  null  null
mv visitcode
label line   new label
mv visitlinenumber 0  line
// invoke pre method stuff
if   callconfig isnoop
invokecallconfigpre mv  compiled_super_class   1  true
// store null for result var
mv aconst_null
mv astore 8
label trybegin   new label
label tryend   new label
label dofinally   new label
label catchreturnjump   new label
label catchredojump   new label
label normalexit   new label
mv trycatch trybegin  tryend  catchreturnjump  p jumpexception returnjump class
mv trycatch trybegin  tryend  catchredojump  p jumpexception redojump class
mv trycatch trybegin  tryend  dofinally  null
mv trycatch catchreturnjump  dofinally  dofinally  null
mv label trybegin
mv aload 0
// fixme we want to eliminate these type casts when possible
mv getfield mnamepath     ci object class
mv checkcast typepath
mv aload threadcontext_index
mv aload receiver_index
mv aload args_index
mv aload block_index
mv invokevirtual typepath  method  sig irubyobject class  params threadcontext class  irubyobject class  irubyobject class  block class
// store result in temporary variable 8
mv astore 8
mv label tryend
//call post method stuff (non-finally)
mv label normalexit
if   callconfig isnoop
invokecallconfigpost mv  compiled_super_class
// reload and return result
mv aload 8
mv visitinsn areturn
handlereturn catchreturnjump mv  dofinally  normalexit  compiled_super_class
handleredo catchredojump  mv  dofinally
// finally handling for abnormal exit
mv label dofinally
//call post method stuff (exception raised)
if   callconfig isnoop
invokecallconfigpost mv  compiled_super_class
// rethrow exception
mv athrow       rethrow it
generatedclass   endcall implementationclass getruntime    cw mv mname
return  dynamicmethod generatedclass
getconstructor rubymodule class  arity class  visibility class  staticscope class  object class  callconfiguration class
newinstance implementationclass  arity  visibility  scope  scriptobject  callconfig
catch exception e
e printstacktrace
throw implementationclass getruntime   newloaderror e getmessage
/**
* use code generation to provide a method handle based on an annotated java
* method.
*
* @see org.jruby.internal.runtime.methods.methodfactory#getannotatedmethod
*/
public dynamicmethod getannotatedmethod rubymodule implementationclass  method method
javamethoddescriptor desc   new javamethoddescriptor method
class type   method getdeclaringclass
string typepath   p type
string javamethodname   method getname
string commonclasssuffix       javamethodname    desc isstatic ?                desc required       desc optional
string generatedclassname   type getname     commonclasssuffix
string generatedclasspath   typepath   commonclasssuffix
synchronized  classloader
class c   tryclass implementationclass getruntime    generatedclassname
try
if  c    null
int specificarity    1
if  desc optional    0     desc rest
if  desc required    0
if  desc actualrequired <  3
specificarity   desc actualrequired
else
specificarity    1
else if  desc required >  0    desc required <  3
specificarity   desc required
boolean block
if  desc parameters length    0
block   false
else
if  desc parameters    block class
block   true
else
block   false
string superclass   p selectsuperclass specificarity  block
classwriter cw   createjavamethodctor generatedclasspath  superclass
skinnymethodadapter mv   null
mv   beginmethod cw     specificarity  block
mv visitcode
label line   new label
mv visitlinenumber 0  line
createannotatedmethodinvocation desc  mv  superclass  specificarity  block
endmethod mv
c   endclass implementationclass getruntime    cw  generatedclassname
javamethod ic    javamethod c getconstructor new class rubymodule class  visibility class   newinstance new object implementationclass  desc anno visibility
ic setarity arity fromannotation desc anno  desc parameters  desc isstatic
ic setjavaname javamethodname
ic setargumenttypes desc parameters
ic setsingleton desc isstatic
ic setcallconfig callconfiguration getcallconfigbyanno desc anno
return ic
catch exception e
e printstacktrace
throw implementationclass getruntime   newloaderror e getmessage
/**
* use code generation to generate a set of method handles based on all
* annotated methods in the target class.
*
* @see org.jruby.internal.runtime.methods.methodfactory#defineindexedannotatedmethods
*/
public void defineindexedannotatedmethods rubymodule implementationclass  class type  methoddefiningcallback callback
string typepath   p type
string superclass   p javamethod class
string generatedclassname   type getname
string generatedclasspath   typepath
synchronized  classloader
class c   tryclass implementationclass getruntime    generatedclassname
try
arraylist<method> annotatedmethods   new arraylist
method methods   type getdeclaredmethods
for  method method   methods
jrubymethod jrubymethod   method getannotation jrubymethod class
if  jrubymethod    null  continue
annotatedmethods add method
// to ensure the method cases are generated the same way every time, we make a second sorted list
arraylist<method> sortedmethods   new arraylist annotatedmethods
collections sort sortedmethods  new comparator<method>
public int compare method a  method b
return a getname   compareto b getname
// but when binding the methods, we want to use the order from the original class, so we save the indices
hashmap<method integer> indexmap   new hashmap
for  int index   0  index < sortedmethods size    index
indexmap put sortedmethods get index   index
if  c    null
classwriter cw   createindexedjavamethodctor generatedclasspath  superclass
skinnymethodadapter mv   null
mv   new skinnymethodadapter cw visitmethod acc_public     compiled_call_sig_block  null  null
mv visitcode
label line   new label
mv visitlinenumber 0  line
label defaultcase   new label
label cases   new label
for  int i   0  i < cases length  i    cases   new label
// load method index
mv aload this_index
mv getfield generatedclasspath     ci int class
mv tableswitch 0  cases length   1  defaultcase  cases
for  int i   0  i < sortedmethods size    i
mv label cases
string callname   getannotatedmethodforindex cw  sortedmethods get i   i  superclass
// invoke call#_method for method
mv aload this_index
mv aload threadcontext_index
mv aload receiver_index
mv aload class_index
mv aload name_index
mv aload args_index
mv aload block_index
mv invokevirtual generatedclasspath  callname  compiled_call_sig_block
mv areturn
// if we fall off the switch, error.
mv label defaultcase
mv aload threadcontext_index
mv invokevirtual p threadcontext class      sig ruby class
mv ldc     implementationclass getbasename
mv invokevirtual p ruby class      sig raiseexception class  string class
mv athrow
c   endcall implementationclass getruntime    cw  mv  generatedclassname
for  int i   0  i < annotatedmethods size    i
method method   annotatedmethods get i
jrubymethod jrubymethod   method getannotation jrubymethod class
if  jrubymethod frame
for  string name   jrubymethod name
astinspector frame_aware_methods add name
int index   indexmap get method
javamethod ic    javamethod c getconstructor new class rubymodule class  visibility class  int class   newinstance new object implementationclass  jrubymethod visibility    index
ic setarity arity fromannotation jrubymethod
ic setjavaname method getname
ic setargumenttypes method getparametertypes
ic setsingleton modifier isstatic method getmodifiers
ic setcallconfig callconfiguration getcallconfigbyanno jrubymethod
callback define implementationclass  method  ic
catch exception e
e printstacktrace
throw implementationclass getruntime   newloaderror e getmessage
/**
* emit code to check the arity of a call to a java-based method.
*
* @param jrubymethod the annotation of the called method
* @param method the code generator for the handle being created
*/
private void checkarity jrubymethod jrubymethod  skinnymethodadapter method  int specificarity
label arityerror   new label
label noarityerror   new label
switch  specificarity
case 0
case 1
case 2
case 3
// for zero, one, two, three arities, javamethod.javamethod*.call(...irubyobject[] args...) will check
return
default
if  jrubymethod rest
if  jrubymethod required   > 0
// just confirm minimum args provided
method aload args_index
method arraylength
method ldc jrubymethod required
method if_icmplt arityerror
else if  jrubymethod optional   > 0
if  jrubymethod required   > 0
// confirm minimum args provided
method aload args_index
method arraylength
method ldc jrubymethod required
method if_icmplt arityerror
// confirm maximum not greater than optional
method aload args_index
method arraylength
method ldc jrubymethod required     jrubymethod optional
method if_icmpgt arityerror
else
// just confirm args length == required
method aload args_index
method arraylength
method ldc jrubymethod required
method if_icmpne arityerror
method go_to noarityerror
// raise an error if arity does not match requirements
method label arityerror
method aload threadcontext_index
method invokevirtual p threadcontext class      sig ruby class
method aload args_index
method ldc jrubymethod required
method ldc jrubymethod required     jrubymethod optional
method invokestatic p arity class      sig int class  ruby class  irubyobject class  int class  int class
method pop
method label noarityerror
private classwriter createcompiledctor string namepath  string sup  throws exception
classwriter cw   new classwriter classwriter compute_maxs
cw visit v1_4  acc_public   acc_super  namepath  null  sup  null
methodvisitor mv   cw visitmethod acc_public     compiled_super_sig  null  null
mv visitcode
mv visitvarinsn aload  0
mv visitvarinsn aload  1
mv visitvarinsn aload  2
mv visitvarinsn aload  3
mv visitvarinsn aload  4
mv visitvarinsn aload  5
mv visitvarinsn aload  6
mv visitmethodinsn invokespecial  sup     compiled_super_sig
label line   new label
mv visitlinenumber 0  line
mv visitinsn return
mv visitmaxs 0 0
mv visitend
return cw
private classwriter createjavamethodctor string namepath  string sup  throws exception
classwriter cw   new classwriter classwriter compute_maxs
cw visit v1_4  acc_public   acc_super  namepath  null  sup  null
methodvisitor mv   cw visitmethod acc_public     java_super_sig  null  null
mv visitcode
mv visitvarinsn aload  0
mv visitvarinsn aload  1
mv visitvarinsn aload  2
mv visitmethodinsn invokespecial  sup     java_super_sig
label line   new label
mv visitlinenumber 0  line
mv visitinsn return
mv visitmaxs 0 0
mv visitend
return cw
private classwriter createindexedjavamethodctor string namepath  string sup  throws exception
classwriter cw   new classwriter classwriter compute_maxs
cw visit v1_4  acc_public   acc_super  namepath  null  sup  null
methodvisitor mv   cw visitmethod acc_public     java_indexed_super_sig  null  null
mv visitcode
mv visitvarinsn aload  0
mv visitvarinsn aload  1
mv visitvarinsn aload  2
mv visitvarinsn iload  3
mv visitmethodinsn invokespecial  sup     java_indexed_super_sig
label line   new label
mv visitlinenumber 0  line
mv visitinsn return
mv visitmaxs 0 0
mv visitend
return cw
private void handleredo label tryredojump  skinnymethodadapter mv  label tryfinally
mv label tryredojump
// clear the redo
mv pop
// get runtime, dup it
mv aload 1
mv invokevirtual p threadcontext class      sig ruby class
mv invokevirtual p ruby class      sig raiseexception class
mv go_to tryfinally
private void handlereturn label catchreturnjump  skinnymethodadapter mv  label dofinally  label normalexit  string typepath
mv label catchreturnjump
mv aload 0
mv swap
mv invokevirtual typepath     sig irubyobject class  jumpexception returnjump class
mv astore 8
mv go_to normalexit
private void invokecallconfigpost skinnymethodadapter mv  string superclass
//call post method stuff (non-finally)
mv aload 0
mv aload 1
mv invokevirtual superclass     sig void class  params threadcontext class
private void invokecallconfigpre skinnymethodadapter mv  string superclass  int specificarity  boolean block
// invoke pre method stuff
mv aload 0
mv aload threadcontext_index      tc
mv aload receiver_index      self
mv aload name_index      name
loadargumentsforpre mv  specificarity
loadblockforpre mv  specificarity  block
mv invokevirtual superclass     sig void class  params threadcontext class  irubyobject class  string class  irubyobject class  block class
private void loadargumentsforpre skinnymethodadapter mv  int specificarity
switch  specificarity
default
case  1
mv aload args_index      args
break
case 0
// zero arity but we have pre/post; use null_array
mv getstatic p irubyobject class      ci irubyobject class
break
case 1
mv aload args_index
mv invokestatic p runtimehelpers class      sig irubyobject class  irubyobject class
break
case 2
mv aload args_index
mv aload args_index   1
mv invokestatic p runtimehelpers class      sig irubyobject class  irubyobject class  irubyobject class
break
case 3
mv aload args_index
mv aload args_index   1
mv aload args_index   2
mv invokestatic p runtimehelpers class      sig irubyobject class  irubyobject class  irubyobject class  irubyobject class
break
private void loadarguments skinnymethodadapter mv  jrubymethod jrubymethod  int specificarity
switch  specificarity
default
case  1
mv aload args_index
break
case 0
// no args
break
case 1
mv aload args_index
break
case 2
mv aload args_index
mv aload args_index   1
break
case 3
mv aload args_index
mv aload args_index   1
mv aload args_index   2
break
private void loadblockforpre skinnymethodadapter mv  int specificarity  boolean getsblock
switch  specificarity
default
case  1
if  getsblock
// variable args with block
mv visitvarinsn aload  block_index
else
// variable args no block, load null block
mv getstatic p block class      ci block class
break
case 0
if  getsblock
// zero args with block
// fixme: omit args index; subtract one from normal block index
mv visitvarinsn aload  block_index   1
else
// zero args, no block; load null_block
mv getstatic p block class      ci block class
break
case 1
if  getsblock
// one arg with block
mv visitvarinsn aload  block_index
else
// one arg, no block; load null_block
mv getstatic p block class      ci block class
break
case 2
if  getsblock
// two args with block
mv visitvarinsn aload  block_index   1
else
// two args, no block; load null_block
mv getstatic p block class      ci block class
break
case 3
if  getsblock
// three args with block
mv visitvarinsn aload  block_index   2
else
// three args, no block; load null_block
mv getstatic p block class      ci block class
break
private void loadblock skinnymethodadapter mv  int specificarity  boolean getsblock
// load block if it accepts block
switch  specificarity
default
case  1
if  getsblock
// all other arg cases with block
mv visitvarinsn aload  block_index
else
// all other arg cases without block
break
case 0
if  getsblock
mv visitvarinsn aload  block_index   1
else
// zero args, no block; do nothing
break
case 1
if  getsblock
mv visitvarinsn aload  block_index
else
// one arg, no block; do nothing
break
case 2
if  getsblock
mv visitvarinsn aload  block_index   1
else
// two args, no block; do nothing
break
case 3
if  getsblock
mv visitvarinsn aload  block_index   2
else
// three args, no block; do nothing
break
private void loadreceiver string typepath  class signature  method method  skinnymethodadapter mv
// load target for invocations
if  modifier isstatic method getmodifiers
if  signature length > 1    signature    threadcontext class
mv aload threadcontext_index
// load self object as irubyobject, for recv param
mv aload receiver_index
else
// load receiver as original type for virtual invocation
mv aload receiver_index
mv checkcast typepath
if  signature length > 0    signature    threadcontext class
mv aload threadcontext_index
private class tryclass ruby runtime  string name
try
if  classloader    null
return class forname name  true  runtime getjrubyclassloader
return classloader loadclass name
catch exception e
return null
protected class endcall ruby runtime  classwriter cw  methodvisitor mv  string name
endmethod mv
return endclass runtime  cw  name
protected void endmethod methodvisitor mv
mv visitmaxs 0 0
mv visitend
protected class endclass ruby runtime  classwriter cw  string name
cw visitend
byte code   cw tobytearray
checkclassadapter verify new classreader code   false  new printwriter system err
if  classloader    null  classloader   runtime getjrubyclassloader
return classloader defineclass name  code
private void loadarguments methodvisitor mv  int argsindex  int count
for  int i   0  i < count  i
loadargument mv  argsindex  i
private void loadargument methodvisitor mv  int argsindex  int argindex
mv visitvarinsn aload  argsindex
mv visitldcinsn new integer argindex
mv visitinsn aaload
private skinnymethodadapter beginmethod classwriter cw  string methodname  int specificarity  boolean block
switch  specificarity
default
case  1
if  block
return new skinnymethodadapter cw visitmethod acc_public  methodname  compiled_call_sig_block  null  null
else
return new skinnymethodadapter cw visitmethod acc_public  methodname  compiled_call_sig  null  null
case 0
if  block
return new skinnymethodadapter cw visitmethod acc_public  methodname  compiled_call_sig_zero_block  null  null
else
return new skinnymethodadapter cw visitmethod acc_public  methodname  compiled_call_sig_zero  null  null
case 1
if  block
return new skinnymethodadapter cw visitmethod acc_public  methodname  compiled_call_sig_one_block  null  null
else
return new skinnymethodadapter cw visitmethod acc_public  methodname  compiled_call_sig_one  null  null
case 2
if  block
return new skinnymethodadapter cw visitmethod acc_public  methodname  compiled_call_sig_two_block  null  null
else
return new skinnymethodadapter cw visitmethod acc_public  methodname  compiled_call_sig_two  null  null
case 3
if  block
return new skinnymethodadapter cw visitmethod acc_public  methodname  compiled_call_sig_three_block  null  null
else
return new skinnymethodadapter cw visitmethod acc_public  methodname  compiled_call_sig_three  null  null
private class selectsuperclass int specificarity  boolean block
switch  specificarity
default
case  1
if  block
return javamethod class
else
return javamethod javamethodnoblock class
case 0
if  block
return javamethod javamethodzeroblock class
else
return javamethod javamethodzero class
case 1
if  block
return javamethod javamethodoneblock class
else
return javamethod javamethodone class
case 2
if  block
return javamethod javamethodtwoblock class
else
return javamethod javamethodtwo class
case 3
if  block
return javamethod javamethodthreeblock class
else
return javamethod javamethodthree class
private string getannotatedmethodforindex classwriter cw  method method  int index  string superclass
string methodname       index       method getname
skinnymethodadapter mv   new skinnymethodadapter cw visitmethod acc_public  methodname  compiled_call_sig_block  null  null
mv visitcode
label line   new label
mv visitlinenumber 0  line
// todo: indexed methods do not use specific arity yet
createannotatedmethodinvocation new javamethoddescriptor method   mv  superclass   1  true
endmethod mv
return methodname
private void createannotatedmethodinvocation javamethoddescriptor desc  skinnymethodadapter method  string superclass  int specificarity  boolean block
string typepath   p desc method getdeclaringclass
string javamethodname   desc method getname
class ret   desc method getreturntype
checkarity desc anno  method  specificarity
callconfiguration callconfig   callconfiguration getcallconfigbyanno desc anno
if   callconfig isnoop
invokecallconfigpre method  superclass  specificarity  block
label trybegin   new label
label tryend   new label
label dofinally   new label
label catchreturnjump   new label
label catchredojump   new label
label normalexit   new label
if   callconfig isnoop      block
method trycatch trybegin  tryend  catchreturnjump  p jumpexception returnjump class
method trycatch trybegin  tryend  catchredojump  p jumpexception redojump class
method trycatch trybegin  tryend  dofinally  null
method trycatch catchreturnjump  dofinally  dofinally  null
method label trybegin
loadreceiver typepath  desc parameters  desc method  method
loadarguments method  desc anno  specificarity
loadblock method  specificarity  block
if  modifier isstatic desc method getmodifiers
// static invocation
method invokestatic typepath  javamethodname  sig ret  desc parameters
else
// virtual invocation
method invokevirtual typepath  javamethodname  sig ret  desc parameters
// store result in temporary variable 8
if   callconfig isnoop      block
method astore 8
method label tryend
method label normalexit
if   callconfig isnoop
invokecallconfigpost method  superclass
// reload and return result
method aload 8
method visitinsn areturn
if   callconfig isnoop      block
handlereturn catchreturnjump method  dofinally  normalexit  superclass
handleredo catchredojump  method  dofinally
// finally handling for abnormal exit
method label dofinally
if   callconfig isnoop
invokecallconfigpost method  superclass
// rethrow exception
method athrow       rethrow it