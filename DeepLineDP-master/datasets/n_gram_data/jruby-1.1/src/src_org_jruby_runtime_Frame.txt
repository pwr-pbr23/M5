/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2001-2004 jan arne petersen <jpetersen@uni-bonn.de>
* copyright (c) 2002 benoit cerrina <b.cerrina@wanadoo.fr>
* copyright (c) 2002-2004 anders bengtsson <ndrsbngtssn@yahoo.se>
* copyright (c) 2004-2007 thomas e enebo <enebo@acm.org>
* copyright (c) 2006 charles o nutter <headius@headius.com>
* copyright (c) 2006 miguel covarrubias <mlcovarrubias@gmail.com>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby runtime
import org jruby rubymodule
import org jruby internal runtime jumptarget
import org jruby runtime builtin irubyobject
/**
* <p>frame for a full (read: not 'fast') ruby method invocation.  any ruby method which calls
* another ruby method (or yields to a block) will get a frame.  a fast method by contrast does
* not get a frame because we know that we will not be calling/yielding.</p>
*
* a frame is also needed for a few special cases:
* <ul>
* <li>proc.new must check previous frame to get the block it is getting constructed for
* <li>block_given? must check the previous frame to see if a block is active
* </li>
*
*/
public final class frame implements jumptarget
/**
* the class for the method we are invoking for this frame.  note: this may not be the
* class where the implementation of the method lives.
*/
private rubymodule klazz
/**
* the 'self' for this frame.
*/
private irubyobject self
/**
* the name of the method being invoked in this frame.  note: blocks are backed by frames
* and do not have a name.
*/
private string name
/**
* the block that was passed in for this frame (as either a block or a &amp;block argument).
* the frame captures the block for super/zsuper, but also for proc.new (with no arguments)
* and also for block_given?.  both of those methods needs access to the block of the
* previous frame to work.
*/
private block block
/**
* does this delimit a frame where an eval with binding occurred.  used for stack traces.
*/
private boolean isbindingframe   false
/**
* the current visibility for anything defined under this frame
*/
private visibility visibility   visibility public
private jumptarget jumptarget
private irubyobject backref
private irubyobject lastline
public jumptarget getjumptarget
return jumptarget
public void setjumptarget jumptarget jumptarget
this jumptarget   jumptarget
public frame
/**
* the location in source where this block/method invocation is happening
*/
private string filename
private int line
public void updateframe string filename  int line
updateframe null  null  null  block null_block  filename  line  null
public void updateframe frame frame
assert frame block    null
this self   frame self
this name   frame name
this klazz   frame klazz
this filename   frame filename
this line   frame line
this block   frame block
this jumptarget   frame jumptarget
this visibility   frame visibility
this isbindingframe   frame isbindingframe
this backref   frame backref
this lastline   frame lastline
public void updateframe rubymodule klazz  irubyobject self  string name
block block  string filename  int line  jumptarget jumptarget
assert block    null
this self   self
this name   name
this klazz   klazz
this filename   filename
this line   line
this block   block
this jumptarget   jumptarget
this visibility   visibility public
this isbindingframe   false
this backref   null
this lastline   null
public void updateframe string name  string filename  int line
this name   name
this filename   filename
this line   line
public frame duplicate
frame newframe   new frame
newframe updateframe this
return newframe
public irubyobject getbackref
return backref    null ? self getruntime   getnil     backref
public void setbackref irubyobject backref
this backref   backref
public irubyobject getlastline
return lastline    null ? self getruntime   getnil     lastline
public void setlastline irubyobject lastline
this lastline   lastline
public string getfile
return filename
public int getline
return line
public void setfile string filename
this filename   filename
public void setline int line
this line   line
/**
* return class that we are supposedly calling for this invocation
*
* @return the current class
*/
public rubymodule getklazz
return klazz
/**
* set class that this method is supposedly calling on.  note: this is different than
* a native method's implementation class.
*
* @param klazz the new class
*/
public void setklazz rubymodule klazz
this klazz   klazz
/**
* set the method name associated with this frame
*
* @param name the new name
*/
public void setname string name
this name   name
/**
* get the method name associated with this frame
*
* @return the method name
*/
public string getname
return name
/**
* get the self associated with this frame
*
* @return the self
*/
irubyobject getself
return self
/**
* set the self associated with this frame
*
* @param self is the new value of self
*/
public void setself irubyobject self
this self   self
/**
* get the visibility at the time of this frame
*
* @return the visibility
*/
public visibility getvisibility
return visibility
/**
* change the visibility associated with this frame
*
* @param visibility the new visibility
*/
public void setvisibility visibility visibility
this visibility   visibility
/**
* is this frame the frame which started a binding eval?
*
* @return true if it is a binding frame
*/
public boolean isbindingframe
return isbindingframe
/**
* set whether this is a binding frame or not
*
* @param isbindingframe true if it is
*/
public void setisbindingframe boolean isbindingframe
this isbindingframe   isbindingframe
/**
* what block is associated with this frame?
*
* @return the block of this frame or null_block if no block given
*/
public block getblock
return block
/* (non-javadoc)
* @see java.lang.object#tostring()
*/
public string tostring
stringbuffer sb   new stringbuffer 50
sb append filename  append    append line 1  append    append klazz
if  name    null  sb append    append name
return sb tostring