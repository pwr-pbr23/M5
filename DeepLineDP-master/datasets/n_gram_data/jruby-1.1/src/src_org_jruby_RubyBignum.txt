/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2001 alan moore <alan_moore@gmx.net>
* copyright (c) 2001-2004 jan arne petersen <jpetersen@uni-bonn.de>
* copyright (c) 2002 benoit cerrina <b.cerrina@wanadoo.fr>
* copyright (c) 2002-2004 anders bengtsson <ndrsbngtssn@yahoo.se>
* copyright (c) 2002-2004 thomas e enebo <enebo@acm.org>
* copyright (c) 2004-2005 charles o nutter <headius@headius.com>
* copyright (c) 2004 stefan matthias aust <sma@3plus4.de>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby
import java io ioexception
import java math bigdecimal
import java math biginteger
import org jruby anno jrubymethod
import org jruby common irubywarnings id
import org jruby runtime callbackfactory
import org jruby runtime classindex
import org jruby runtime objectallocator
import org jruby runtime threadcontext
import org jruby runtime builtin irubyobject
import org jruby runtime marshal marshalstream
import org jruby runtime marshal unmarshalstream
/**
*
* @author  jpetersen
*/
public class rubybignum extends rubyinteger
public static rubyclass createbignumclass ruby runtime
rubyclass bignum   runtime defineclass    runtime getinteger
objectallocator not_allocatable_allocator
runtime setbignum bignum
bignum index   classindex bignum
callbackfactory callbackfactory   runtime callbackfactory rubybignum class
bignum defineannotatedmethods rubybignum class
bignum dispatcher   callbackfactory createdispatcher bignum
return bignum
private static final int bit_size   64
private static final long max    1l <<  bit_size   1     1
private static final biginteger long_max   biginteger valueof max
private static final biginteger long_min   biginteger valueof  max   1
private final biginteger value
public rubybignum ruby runtime  biginteger value
super runtime  runtime getbignum
this value   value
public int getnativetypeindex
return classindex bignum
public static rubybignum newbignum ruby runtime  long value
return newbignum runtime  biginteger valueof value
public static rubybignum newbignum ruby runtime  double value
return newbignum runtime  new bigdecimal value  tobiginteger
public static rubybignum newbignum ruby runtime  biginteger value
return new rubybignum runtime  value
public static rubybignum newbignum ruby runtime  string value
return new rubybignum runtime  new biginteger value
public double getdoublevalue
return big2dbl this
public long getlongvalue
return big2long this
/** getter for property value.
* @return value of property value.
*/
public biginteger getvalue
return value
/*  ================
*  utility methods
*  ================
*/
/* if the value will fit in a fixnum, return one of those. */
/** rb_big_norm
*
*/
public static rubyinteger bignorm ruby runtime  biginteger bi
if  bi compareto long_min  < 0    bi compareto long_max  > 0
return newbignum runtime  bi
return runtime newfixnum bi longvalue
/** rb_big2long
*
*/
public static long big2long rubybignum value
biginteger big   value getvalue
if  big compareto long_min  < 0    big compareto long_max  > 0
throw value getruntime   newrangeerror
return big longvalue
/** rb_big2dbl
*
*/
public static double big2dbl rubybignum value
biginteger big   value getvalue
double dbl   converttodouble big
if  dbl    double negative_infinity    dbl    double positive_infinity
value getruntime   getwarnings   warn id bignum_from_float_range
return dbl
/**
* biginteger#doublevalue is _really_ slow currently.
* this is faster, and mostly correct (?)
*/
static double converttodouble biginteger bigint
byte arr   bigint tobytearray
double res   0
double acc   1
for  int i   arr length   1  i > 0   i
res     double   arr   0xff    acc
acc    256
res     double  arr   acc     final byte sign is significant
return res
/** rb_int2big
*
*/
public static biginteger fix2big rubyfixnum arg
return biginteger valueof arg getlongvalue
/*  ================
*  instance methods
*  ================
*/
/** rb_big_to_s
*
*/
@jrubymethod name      optional   1
public irubyobject to_s irubyobject args
int base   args length    0 ? 10   num2int args
if  base < 2    base > 36
throw getruntime   newargumenterror     base
return getruntime   newstring getvalue   tostring base
/** rb_big_coerce
*
*/
@jrubymethod name      required   1
public irubyobject coerce irubyobject other
if  other instanceof rubyfixnum
return getruntime   newarray newbignum getruntime      rubyfixnum  other  getlongvalue     this
else if  other instanceof rubybignum
return getruntime   newarray newbignum getruntime      rubybignum  other  getvalue     this
throw getruntime   newtypeerror     other getmetaclass   getname
/** rb_big_uminus
*
*/
@jrubymethod name
public irubyobject op_uminus
return bignorm getruntime    value negate
/** rb_big_plus
*
*/
@jrubymethod name      required   1
public irubyobject op_plus threadcontext context  irubyobject other
if  other instanceof rubyfixnum
return bignorm getruntime    value add fix2big   rubyfixnum  other
if  other instanceof rubybignum
return bignorm getruntime    value add   rubybignum  other  value
else if  other instanceof rubyfloat
return rubyfloat newfloat getruntime    big2dbl this      rubyfloat  other  getdoublevalue
return coercebin context     other
/** rb_big_minus
*
*/
@jrubymethod name      required   1
public irubyobject op_minus threadcontext context  irubyobject other
if  other instanceof rubyfixnum
return bignorm getruntime    value subtract fix2big   rubyfixnum  other
if  other instanceof rubybignum
return bignorm getruntime    value subtract   rubybignum  other  value
else if  other instanceof rubyfloat
return rubyfloat newfloat getruntime    big2dbl this      rubyfloat  other  getdoublevalue
return coercebin context     other
/** rb_big_mul
*
*/
@jrubymethod name      required   1
public irubyobject op_mul threadcontext context  irubyobject other
if  other instanceof rubyfixnum
return bignorm getruntime    value multiply fix2big   rubyfixnum  other
if  other instanceof rubybignum
return bignorm getruntime    value multiply   rubybignum  other  value
else if  other instanceof rubyfloat
return rubyfloat newfloat getruntime    big2dbl this      rubyfloat  other  getdoublevalue
return coercebin context     other
/** rb_big_div
*
*/
@jrubymethod name              required   1
public irubyobject op_div threadcontext context  irubyobject other
final biginteger othervalue
if  other instanceof rubyfixnum
othervalue   fix2big  rubyfixnum  other
else if  other instanceof rubybignum
othervalue     rubybignum  other  value
else if  other instanceof rubyfloat
return rubyfloat newfloat getruntime    big2dbl this      rubyfloat  other  getdoublevalue
else
return coercebin context     other
if  othervalue equals biginteger zero
throw getruntime   newzerodivisionerror
biginteger results   value divideandremainder othervalue
if   value signum     othervalue signum        1    results signum      0
return bignorm getruntime    results subtract biginteger one
return bignorm getruntime    results
/** rb_big_divmod
*
*/
@jrubymethod name      required   1
public irubyobject divmod threadcontext context  irubyobject other
final biginteger othervalue
if  other instanceof rubyfixnum
othervalue   fix2big  rubyfixnum  other
else if  other instanceof rubybignum
othervalue     rubybignum  other  value
else
return coercebin context     other
if  othervalue equals biginteger zero
throw getruntime   newzerodivisionerror
biginteger results   value divideandremainder othervalue
if   value signum     othervalue signum        1    results signum      0
results   results subtract biginteger one
results   othervalue add results
final ruby runtime   getruntime
return rubyarray newarray getruntime    bignorm runtime  results   bignorm runtime  results
/** rb_big_modulo
*
*/
@jrubymethod name           required   1
public irubyobject op_mod threadcontext context  irubyobject other
final biginteger othervalue
if  other instanceof rubyfixnum
othervalue   fix2big  rubyfixnum  other
else if  other instanceof rubybignum
othervalue     rubybignum  other  value
else
return coercebin context     other
if  othervalue equals biginteger zero
throw getruntime   newzerodivisionerror
biginteger result   value mod othervalue abs
if  othervalue signum       1    result signum      0
result   othervalue add result
return bignorm getruntime    result
/** rb_big_remainder
*
*/
@jrubymethod name      required   1
public irubyobject remainder threadcontext context  irubyobject other
final biginteger othervalue
if  other instanceof rubyfixnum
othervalue   fix2big   rubyfixnum  other
else if  other instanceof rubybignum
othervalue     rubybignum  other  value
else
return coercebin context     other
if  othervalue equals biginteger zero
throw getruntime   newzerodivisionerror
return bignorm getruntime    value remainder othervalue
/** rb_big_quo
*
*/
@jrubymethod name      required   1
public irubyobject quo threadcontext context  irubyobject other
if  other instanceof rubynumeric
return rubyfloat newfloat getruntime    big2dbl this      rubynumeric  other  getdoublevalue
else
return coercebin context     other
/** rb_big_pow
*
*/
@jrubymethod name           required   1
public irubyobject op_pow threadcontext context  irubyobject other
double d
if  other instanceof rubyfixnum
rubyfixnum fix    rubyfixnum  other
long fixvalue   fix getlongvalue
// mri issuses warning here on (rbignum(x)->len * sizeof_bdigits * yy > 1024*1024)
if    value bitlength     7    8    4   math abs fixvalue  > 1024   1024
getruntime   getwarnings   warn id may_be_too_big     fixvalue
if  fixvalue >  0
return bignorm getruntime    value pow  int  fixvalue       num2int is also implemented
else
return rubyfloat newfloat getruntime    math pow big2dbl this    double fixvalue
else if  other instanceof rubybignum
d     rubybignum  other  getdoublevalue
getruntime   getwarnings   warn id may_be_too_big     d
else if  other instanceof rubyfloat
d     rubyfloat  other  getdoublevalue
else
return coercebin context     other
return rubyfloat newfloat getruntime    math pow big2dbl this   d
/** rb_big_and
*
*/
@jrubymethod name      required   1
public irubyobject op_and threadcontext context  irubyobject other
other   other converttointeger
if  other instanceof rubybignum
return bignorm getruntime    value and   rubybignum  other  value
else if other instanceof rubyfixnum
return bignorm getruntime    value and fix2big  rubyfixnum other
return coercebin context     other
/** rb_big_or
*
*/
@jrubymethod name      required   1
public irubyobject op_or threadcontext context  irubyobject other
other   other converttointeger
if  other instanceof rubybignum
return bignorm getruntime    value or   rubybignum  other  value
if  other instanceof rubyfixnum       no bignorm here needed
return bignorm getruntime    value or fix2big  rubyfixnum other
return coercebin context     other
/** rb_big_xor
*
*/
@jrubymethod name      required   1
public irubyobject op_xor threadcontext context  irubyobject other
other   other converttointeger
if  other instanceof rubybignum
return bignorm getruntime    value xor   rubybignum  other  value
if  other instanceof rubyfixnum
return bignorm getruntime    value xor biginteger valueof   rubyfixnum  other  getlongvalue
return coercebin context     other
/** rb_big_neg
*
*/
@jrubymethod name
public irubyobject op_neg
return rubybignum newbignum getruntime    value not
/** rb_big_lshift
*
*/
@jrubymethod name      required   1
public irubyobject op_lshift irubyobject other
int width   num2int other
if  width < 0
return op_rshift rubyfixnum newfixnum getruntime     width
return bignorm getruntime    value shiftleft width
/** rb_big_rshift
*
*/
@jrubymethod name      required   1
public irubyobject op_rshift irubyobject other
int width   num2int other
if  width < 0
return op_lshift rubyfixnum newfixnum getruntime     width
return bignorm getruntime    value shiftright width
/** rb_big_aref
*
*/
@jrubymethod name      required   1
public rubyfixnum op_aref irubyobject other
if  other instanceof rubybignum
if    rubybignum  other  value signum   >  0    value signum       1
return rubyfixnum zero getruntime
return rubyfixnum one getruntime
long position   num2long other
if  position < 0    position > integer max_value
return rubyfixnum zero getruntime
return value testbit  int position  ? rubyfixnum one getruntime      rubyfixnum zero getruntime
/** rb_big_cmp
*
*/
@jrubymethod name      required   1
public irubyobject op_cmp threadcontext context  irubyobject other
final biginteger othervalue
if  other instanceof rubyfixnum
othervalue   fix2big  rubyfixnum  other
else if  other instanceof rubybignum
othervalue     rubybignum  other  value
else if  other instanceof rubyfloat
return dbl_cmp getruntime    big2dbl this     rubyfloat  other  getdoublevalue
else
return coercecmp context     other
// wow, the only time we can use the java protocol ;)
return rubyfixnum newfixnum getruntime    value compareto othervalue
/** rb_big_eq
*
*/
@jrubymethod name      required   1
public irubyobject op_equal irubyobject other
final biginteger othervalue
if  other instanceof rubyfixnum
othervalue   fix2big  rubyfixnum  other
else if  other instanceof rubybignum
othervalue     rubybignum  other  value
else if  other instanceof rubyfloat
double a     rubyfloat  other  getdoublevalue
if  double isnan a
return getruntime   getfalse
return rubyboolean newboolean getruntime    a    big2dbl this
else
return other op_eqq getruntime   getcurrentcontext    this
return rubyboolean newboolean getruntime    value compareto othervalue     0
/** rb_big_eql
*
*/
@jrubymethod name           required   1
public irubyobject eql_p irubyobject other
if  other instanceof rubybignum
return value compareto   rubybignum other  value     0 ? getruntime   gettrue     getruntime   getfalse
return getruntime   getfalse
/** rb_big_hash
*
*/
@jrubymethod name
public rubyfixnum hash
return getruntime   newfixnum value hashcode
/** rb_big_to_f
*
*/
@jrubymethod name
public irubyobject to_f
return rubyfloat newfloat getruntime    getdoublevalue
/** rb_big_abs
*
*/
@jrubymethod name
public irubyobject abs
return rubybignum newbignum getruntime    value abs
/** rb_big_size
*
*/
@jrubymethod name
public irubyobject size
return getruntime   newfixnum  value bitlength     7    8
public static void marshalto rubybignum bignum  marshalstream output  throws ioexception
output registerlinktarget bignum
output write bignum value signum   >  0 ?
biginteger absvalue   bignum value abs
byte digits   absvalue tobytearray
boolean oddlengthnonzerostart    digits length % 2    0    digits    0
int shortlength   digits length   2
if  oddlengthnonzerostart
shortlength
output writeint shortlength
for  int i   1  i <  shortlength   2    i <  digits length  i
output write digits
if  oddlengthnonzerostart
// pad with a 0
output write 0
public static rubynumeric unmarshalfrom unmarshalstream input  throws ioexception
boolean positive   input readunsignedbyte
int shortlength   input unmarshalint
// biginteger required a sign byte in incoming array
byte digits   new byte
for  int i   digits length   1  i >  1  i
digits   input readsignedbyte
biginteger value   new biginteger digits
if   positive
value   value negate
rubynumeric result   bignorm input getruntime    value
input registerlinktarget result
return result