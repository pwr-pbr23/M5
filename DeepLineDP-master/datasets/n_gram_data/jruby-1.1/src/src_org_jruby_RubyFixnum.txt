/*
***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2001 alan moore <alan_moore@gmx.net>
* copyright (c) 2001-2004 jan arne petersen <jpetersen@uni-bonn.de>
* copyright (c) 2002 benoit cerrina <b.cerrina@wanadoo.fr>
* copyright (c) 2002-2004 anders bengtsson <ndrsbngtssn@yahoo.se>
* copyright (c) 2002-2006 thomas e enebo <enebo@acm.org>
* copyright (c) 2004 stefan matthias aust <sma@3plus4.de>
* copyright (c) 2005 david corbin <dcorbin@users.sourceforge.net>
* copyright (c) 2006 antti karanta <antti.karanta@napa.fi>
* copyright (c) 2007 miguel covarrubias <mlcovarrubias@gmail.com>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby
import java math biginteger
import org jruby anno jrubymethod
import org jruby common irubywarnings id
import org jruby runtime callbackfactory
import org jruby runtime classindex
import org jruby runtime objectallocator
import org jruby runtime threadcontext
import org jruby runtime builtin irubyobject
import org jruby runtime marshal unmarshalstream
import org jruby util convert
/**
* implementation of the fixnum class.
*/
public class rubyfixnum extends rubyinteger
public static rubyclass createfixnumclass ruby runtime
rubyclass fixnum   runtime defineclass    runtime getinteger
objectallocator not_allocatable_allocator
runtime setfixnum fixnum
fixnum index   classindex fixnum
fixnum kindof   new rubymodule kindof
public boolean iskindof irubyobject obj  rubymodule type
return obj instanceof rubyfixnum
callbackfactory callbackfactory   runtime callbackfactory rubyfixnum class
fixnum includemodule runtime getprecision
fixnum defineannotatedmethods rubyfixnum class
fixnum dispatcher   callbackfactory createdispatcher fixnum
for  int i   0  i < runtime fixnumcache length  i
runtime fixnumcache   new rubyfixnum runtime  fixnum  i   128
return fixnum
private final long value
private static final int bit_size   64
public static final long sign_bit    1l <<  bit_size   1
public static final long max    1l<< bit_size   1     1
public static final long min    1   max   1
public static final long max_marshal_fixnum    1l << 30    1     0x3fff_ffff
public static final long min_marshal_fixnum      1l << 30         0x4000_0000
public rubyfixnum ruby runtime
this runtime  0
public rubyfixnum ruby runtime  long value
super runtime  runtime getfixnum    false
this value   value
private rubyfixnum ruby runtime  rubyclass klazz  long value
super runtime  klazz  false
this value   value
public int getnativetypeindex
return classindex fixnum
/**
* short circuit for fixnum key comparison
*/
public final boolean eql irubyobject other
return other instanceof rubyfixnum    value      rubyfixnum other  value
public boolean isimmediate
return true
public rubyclass getsingletonclass
throw getruntime   newtypeerror
public class<?> getjavaclass
return long type
public double getdoublevalue
return value
public long getlongvalue
return value
public static rubyfixnum newfixnum ruby runtime  long value
final int offset   128
if  value <  127    value >   128
return runtime fixnumcache
return new rubyfixnum runtime  value
public rubyfixnum newfixnum long newvalue
return newfixnum getruntime    newvalue
public static rubyfixnum zero ruby runtime
return newfixnum runtime  0
public static rubyfixnum one ruby runtime
return newfixnum runtime  1
public static rubyfixnum minus_one ruby runtime
return newfixnum runtime   1
public rubyfixnum hash
return newfixnum hashcode
public final int hashcode
return  int  value ^ value >>> 32
public boolean equals object other
if  other    this
return true
if  other instanceof rubyfixnum
rubyfixnum num    rubyfixnum other
if  num value    value
return true
return false
/*  ================
*  instance methods
*  ================
*/
/** fix_to_s
*
*/
@jrubymethod optional   1
public rubystring to_s irubyobject args
int base   args length    0 ? 10   num2int args
if  base < 2    base > 36
throw getruntime   newargumenterror     base
return getruntime   newstring convert longtobytelist value  base
/** fix_id2name
*
*/
@jrubymethod
public irubyobject id2name
rubysymbol symbol   rubysymbol getsymbollong getruntime    value
if  symbol    null  return getruntime   newstring symbol asjavastring
return getruntime   getnil
/** fix_to_sym
*
*/
@jrubymethod
public irubyobject to_sym
rubysymbol symbol   rubysymbol getsymbollong getruntime    value
return symbol    null ? symbol   getruntime   getnil
/** fix_uminus
*
*/
@jrubymethod name
public irubyobject op_uminus
if  value    min       a gotcha
return rubybignum newbignum getruntime    biginteger valueof value  negate
return rubyfixnum newfixnum getruntime     value
/** fix_plus
*
*/
@jrubymethod name
public irubyobject op_plus threadcontext context  irubyobject other
if  other instanceof rubyfixnum
long othervalue     rubyfixnum  other  value
long result   value   othervalue
if   ~ value ^ othervalue     value ^ result    sign_bit     0
return rubybignum newbignum getruntime    value  op_plus context  other
return newfixnum result
if  other instanceof rubybignum
return   rubybignum  other  op_plus context  this
if  other instanceof rubyfloat
return getruntime   newfloat  double  value     rubyfloat  other  getdoublevalue
return coercebin context     other
/** fix_minus
*
*/
@jrubymethod name
public irubyobject op_minus threadcontext context  irubyobject other
if  other instanceof rubyfixnum
long othervalue     rubyfixnum  other  value
long result   value   othervalue
if   ~ value ^ ~othervalue     value ^ result    sign_bit     0
return rubybignum newbignum getruntime    value  op_minus context  other
return newfixnum result
else if  other instanceof rubybignum
return rubybignum newbignum getruntime    value  op_minus context  other
else if  other instanceof rubyfloat
return getruntime   newfloat  double  value     rubyfloat  other  getdoublevalue
return coercebin context     other
/** fix_mul
*
*/
@jrubymethod name
public irubyobject op_mul threadcontext context  irubyobject other
if  other instanceof rubyfixnum
long othervalue     rubyfixnum  other  value
if  value    0
return rubyfixnum zero getruntime
long result   value   othervalue
irubyobject r   newfixnum getruntime   result
if rubynumeric fix2long r     result    result value    othervalue
return  rubynumeric  rubybignum newbignum getruntime    value  op_mul context  other
return r
else if  other instanceof rubybignum
return   rubybignum  other  op_mul context  this
else if  other instanceof rubyfloat
return getruntime   newfloat  double  value     rubyfloat  other  getdoublevalue
return coercebin context     other
/** fix_div
* here is terrible mri gotcha:
* 1.div 3.0 -> 0
* 1 / 3.0   -> 0.3333333333333333
*
* mri is also able to do it in one place by looking at current frame in rb_num_coerce_bin:
* rb_funcall(x, ruby_frame->orig_func, 1, y);
*
* also note that rubyfloat doesn't override numeric.div
*/
@jrubymethod name
public irubyobject div_div threadcontext context  irubyobject other
return idiv context  other
@jrubymethod name
public irubyobject op_div threadcontext context  irubyobject other
return idiv context  other
public irubyobject idiv threadcontext context  irubyobject other  string method
if  other instanceof rubyfixnum
long x   value
long y     rubyfixnum  other  value
if  y    0
throw getruntime   newzerodivisionerror
long div   x   y
long mod   x % y
if  mod < 0    y > 0    mod > 0    y < 0
div    1
return getruntime   newfixnum div
return coercebin context  method  other
/** fix_mod
*
*/
@jrubymethod name
public irubyobject op_mod threadcontext context  irubyobject other
if  other instanceof rubyfixnum
// java / and % are not the same as ruby
long x   value
long y     rubyfixnum  other  value
if  y    0
throw getruntime   newzerodivisionerror
long mod   x % y
if  mod < 0    y > 0    mod > 0    y < 0
mod    y
return getruntime   newfixnum mod
return coercebin context     other
/** fix_divmod
*
*/
@jrubymethod
public irubyobject divmod threadcontext context  irubyobject other
if  other instanceof rubyfixnum
long x   value
long y     rubyfixnum  other  value
final ruby runtime   getruntime
if  y    0
throw runtime newzerodivisionerror
long div   x   y
long mod   x % y
if  mod < 0    y > 0    mod > 0    y < 0
div    1
mod    y
irubyobject fixdiv   rubyfixnum newfixnum getruntime    div
irubyobject fixmod   rubyfixnum newfixnum getruntime    mod
return rubyarray newarray runtime  fixdiv  fixmod
return coercebin context     other
/** fix_quo
*
*/
@jrubymethod
public irubyobject quo threadcontext context  irubyobject other
if  other instanceof rubyfixnum
return rubyfloat newfloat getruntime     double  value
double    rubyfixnum  other  value
return coercebin context     other
/** fix_pow
*
*/
@jrubymethod name
public irubyobject op_pow threadcontext context  irubyobject other
if other instanceof rubyfixnum
long b     rubyfixnum  other  value
if  b    0
return rubyfixnum one getruntime
if  b    1
return this
if  b > 0
return rubybignum newbignum getruntime    value  op_pow context  other
return rubyfloat newfloat getruntime    math pow value  b
else if  other instanceof rubyfloat
return rubyfloat newfloat getruntime    math pow value    rubyfloat  other
getdoublevalue
return coercebin context     other
/** fix_abs
*
*/
@jrubymethod
public irubyobject abs
if  value < 0
// a gotcha for long.min_value: value = -value
if  value    long min_value
return rubybignum newbignum
getruntime    biginteger valueof value  negate
return rubyfixnum newfixnum getruntime     value
return this
/** fix_equal
*
*/
@jrubymethod name
public irubyobject op_equal threadcontext context  irubyobject other
if  other instanceof rubyfixnum
return rubyboolean newboolean getruntime    value      rubyfixnum  other  value
return super op_num_equal context  other
/** fix_cmp
*
*/
@jrubymethod name
public irubyobject op_cmp threadcontext context  irubyobject other
if  other instanceof rubyfixnum
long othervalue     rubyfixnum  other  value
if  value    othervalue
return rubyfixnum zero getruntime
if  value > othervalue
return rubyfixnum one getruntime
return rubyfixnum minus_one getruntime
return coercecmp context     other
/** fix_gt
*
*/
@jrubymethod name
public irubyobject op_gt threadcontext context  irubyobject other
if  other instanceof rubyfixnum
return rubyboolean newboolean getruntime    value >   rubyfixnum  other  value
return coercerelop context     other
/** fix_ge
*
*/
@jrubymethod name
public irubyobject op_ge threadcontext context  irubyobject other
if  other instanceof rubyfixnum
return rubyboolean newboolean getruntime    value >    rubyfixnum  other  value
return coercerelop context     other
/** fix_lt
*
*/
@jrubymethod name
public irubyobject op_lt threadcontext context  irubyobject other
if  other instanceof rubyfixnum
return rubyboolean newboolean getruntime    value <   rubyfixnum  other  value
return coercerelop context     other
/** fix_le
*
*/
@jrubymethod name
public irubyobject op_le threadcontext context  irubyobject other
if  other instanceof rubyfixnum
return rubyboolean newboolean getruntime    value <    rubyfixnum  other  value
return coercerelop context     other
/** fix_rev
*
*/
@jrubymethod name
public irubyobject op_neg
return newfixnum ~value
/** fix_and
*
*/
@jrubymethod name
public irubyobject op_and threadcontext context  irubyobject other
if  other instanceof rubyfixnum
return newfixnum value     rubyfixnum  other  value
if  other instanceof rubybignum
return   rubybignum  other  op_and context  this
return newfixnum value   num2long other
/** fix_or
*
*/
@jrubymethod name
public irubyobject op_or threadcontext context  irubyobject other
if  other instanceof rubyfixnum
return newfixnum value     rubyfixnum  other  value
if  other instanceof rubybignum
return   rubybignum  other  op_or context  this
return newfixnum value   num2long other
/** fix_xor
*
*/
@jrubymethod name
public irubyobject op_xor threadcontext context  irubyobject other
if other instanceof rubyfixnum
return newfixnum value ^   rubyfixnum  other  value
if  other instanceof rubybignum
return   rubybignum  other  op_xor context  this
return newfixnum value ^ num2long other
/** fix_aref
*
*/
@jrubymethod name
public irubyobject op_aref irubyobject other
if other instanceof rubybignum
rubybignum big    rubybignum  other
rubyobject tryfix   rubybignum bignorm getruntime    big getvalue
if    tryfix instanceof rubyfixnum
if  big getvalue   signum      0    value >  0
return rubyfixnum zero getruntime
return rubyfixnum one getruntime
long othervalue   num2long other
if  othervalue < 0
return rubyfixnum zero getruntime
if  bit_size   1 < othervalue
if  value < 0
return rubyfixnum one getruntime
return rubyfixnum zero getruntime
return  value    1l << othervalue      0 ? rubyfixnum zero getruntime      rubyfixnum one getruntime
/** fix_lshift
*
*/
@jrubymethod name
public irubyobject op_lshift irubyobject other
long width   num2long other
if  width < 0
return op_rshift rubyfixnum newfixnum getruntime     width
if  width    0
return this
if  width > bit_size   1      ~0l << bit_size   width   1    value     0
return rubybignum newbignum getruntime    value  op_lshift other
return newfixnum value << width
/** fix_rshift
*
*/
@jrubymethod name
public irubyobject op_rshift irubyobject other
long width   num2long other
if  width < 0
return op_lshift rubyfixnum newfixnum getruntime     width
if  width    0
return this
if  width >  bit_size   1
if  value < 0
return rubyfixnum minus_one getruntime
return rubyfixnum zero getruntime
return newfixnum value >> width
/** fix_to_f
*
*/
@jrubymethod
public irubyobject to_f
return rubyfloat newfloat getruntime     double  value
/** fix_size
*
*/
@jrubymethod
public irubyobject size
return newfixnum  long    bit_size   7    8
/** fix_zero_p
*
*/
@jrubymethod name
public irubyobject zero_p
return rubyboolean newboolean getruntime    value    0
@jrubymethod
public irubyobject id
if  value <  long max_value   2    value >  long min_value   2
return newfixnum 2   value   1
return super id
public irubyobject taint
return this
public irubyobject freeze
return this
// piece of mri rb_to_id
public string asjavastring
getruntime   getwarnings   warn id fixnums_not_symbols
// fixme: i think this chunk is equivalent to mri id2name (and not our public method
// id2name).  make into method if used more than once.
rubysymbol symbol   rubysymbol getsymbollong getruntime    value
if  symbol    null
throw getruntime   newargumenterror     value
return symbol asjavastring
public static rubyfixnum unmarshalfrom unmarshalstream input  throws java io ioexception
return input getruntime   newfixnum input unmarshalint
/*  ================
*  singleton methods
*  ================
*/
/** rb_fix_induced_from
*
*/
@jrubymethod meta   true
public static irubyobject induced_from irubyobject recv  irubyobject other
return rubynumeric num2fix other