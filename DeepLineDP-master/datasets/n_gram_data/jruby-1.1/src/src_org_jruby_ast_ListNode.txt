/*
***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2004-2005 thomas e enebo <enebo@acm.org>
* copyright (c) 2004 stefan matthias aust <sma@3plus4.de>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby ast
import java util arraylist
import java util arrays
import java util list
import org jruby ast visitor nodevisitor
import org jruby evaluator instruction
import org jruby lexer yacc isourceposition
/**
* all nodes which have a list representation inherit this.  this is also used
* as generic container for additional information that is not directly evaluated.
* in particular, f_arg production rule uses this to capture arg information for
* the editor projects who want position info saved.
*/
public class listnode extends node
private list<node> list
/**
* create a new listnode.
*
* @param id type of listnode
* @param firstnode first element of the list
*/
public listnode isourceposition position  nodetype id  node firstnode
this position  id
list   new arraylist<node> 4
list add firstnode
public listnode isourceposition position  nodetype id
super position  id
list   new arraylist<node> 0
public listnode isourceposition position
this position  nodetype listnode
public listnode add node node
// ruby grammar productions return plenty of nulls.
if  node    null  return this
list add node
if  getposition      null
setposition node getposition
else
setposition getposition   union node getposition
return this
public listnode prepend node node
// ruby grammar productions return plenty of nulls.
if  node    null  return this
list add 0  node
setposition getposition   union node getposition
return this
public int size
return list size
/**
* add all elements in other list to this list node.
*
* @param other list which has elements
* @return this instance for method chaining
*/
public listnode addall listnode other
if  other    null    other size   > 0
list addall other list
setposition getposition   union getlast   getposition
return this
/**
* add other element to this list
*
* @param other list which has elements
* @return this instance for method chaining
*/
public listnode addall node other
return add other
public node getlast
return list size      0 ? null   list get list size     1
public string tostring
string string   super tostring
stringbuffer b   new stringbuffer
for  int i   0  i < list size    i
b append list get i
if  i   1 < list size
b append
return string       b tostring
public list<node> childnodes
return list
public instruction accept nodevisitor visitor
throw new runtimeexception
public node get int idx
return list get idx