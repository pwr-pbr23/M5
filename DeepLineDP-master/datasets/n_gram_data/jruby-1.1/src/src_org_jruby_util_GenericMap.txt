/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2006 kresten krab thorup <krab@gnu.org>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby util
import java util abstractcollection
import java util abstractset
import java util collection
import java util iterator
import java util map
import java util set
/**
* a <code>genericmap</code> is simply an abstract <code>java.util.map</code>
* implementation for which subclasses really only need to implement
* the method entryiterator.
*
* @author kresten krab thorup (krab@trifork.com)
*/
abstract class genericmap implements map
protected int size
public int size
return size
public boolean isempty
return size      0
protected int keyhash object key
if  key    null
return 0
else
return key hashcode
protected boolean keyequals object containedkey  object givenkey
if  containedkey    null
return givenkey    null
else
return containedkey equals givenkey
protected int valuehash object value
if  value    null
return 0
else
return value hashcode
protected boolean valueequals object value1  object value2
if  value1    null
return value2    null
else
return value1 equals value2
abstract class entry implements map entry
public int hashcode
return keyhash getkey    ^ valuehash getvalue
public boolean equals object other
if  other instanceof map entry
map entry ent    map entry  other
return keyequals getkey    ent getkey
valueequals getvalue    ent getvalue
else
return false
public void putall map other
if  other    this
return
iterator it   other entryset   iterator
while  it hasnext
map entry entry    map entry  it next
put entry getkey    entry getvalue
protected abstract iterator entryiterator
protected iterator keyiterator
return new keyiterator
protected iterator valueiterator
return new valueiterator
abstract class keyorvalueiterator implements iterator
iterator iter   entryiterator
public boolean hasnext
return iter hasnext
protected map entry nextentry
return  map entry  iter next
public void remove
throw new unsupportedoperationexception
class keyiterator extends keyorvalueiterator
public object next
return nextentry   getkey
class valueiterator extends keyorvalueiterator
public object next
return nextentry   getvalue
/**
* i don't quite understand why we need to replace this method from
* abstractcollection, but it has been observed that toarray returns the
* *reverse* order of elements. --kresten
*/
private static object toarray object arr  int size  iterator it
object out
if  arr    null    arr length >  size
out   arr
else if  arr    null
out   new object
else
out    object  java lang reflect array newinstance arr getclass
getcomponenttype    size
for  int i   0  i < size  i
out   it next
if  out length > size
out   null
return out
public collection values
return new abstractcollection
public iterator iterator
return valueiterator
public int size
return genericmap this size
public object toarray object arr
return genericmap toarray arr  size    iterator
public set keyset
return new abstractset
public iterator iterator
return keyiterator
public int size
return genericmap this size
public object toarray object arr
return genericmap toarray arr  size    iterator
public int hashcode
int code   0
iterator it   entryiterator
while  it hasnext
code    it next   hashcode
return code
public boolean equals object other
if  other instanceof map
map map    map  other
if  map size      size
return false
iterator it   entryiterator
while  it hasnext
entry ent    entry  it next
object key   ent getkey
object val   ent getvalue
if  map containskey key
object otherval   map get key
if   valueequals val  otherval
return false
return true
return false
public set entryset
return new abstractset
public iterator iterator
return entryiterator
public int size
return size
public object toarray object arr
return genericmap toarray arr  size    iterator
/** return the element with the given key */
public boolean containsvalue object value
iterator it   valueiterator
while  it hasnext
if  valueequals value  it next
return true
return false
public boolean containskey object key
return get key     null