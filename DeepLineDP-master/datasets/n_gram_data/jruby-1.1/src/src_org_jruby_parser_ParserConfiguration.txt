/*
***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2002 jan arne petersen <jpetersen@uni-bonn.de>
* copyright (c) 2004 thomas e enebo <enebo@acm.org>
* copyright (c) 2004 anders bengtsson <ndrsbngtssn@yahoo.se>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby parser
import org jruby runtime dynamicscope
import org jruby runtime scope manyvarsdynamicscope
public class parserconfiguration
private dynamicscope existingscope   null
private boolean asblock   false
// what linenumber will the source think it starts from?
private int linenumber   0
// is this inline source (aka -e "...source...")
private boolean inlinesource   false
// we parse evals more often in source so assume an eval parse.
private boolean isevalparse   true
// should positions added extra ide-friendly information and leave in all newline nodes
private boolean extrapositioninformation   false
public parserconfiguration int linenumber  boolean inlinesource
this linenumber  false  inlinesource
public parserconfiguration int linenumber  boolean extrapositioninformation  boolean inlinesource
this inlinesource   inlinesource
this linenumber   linenumber
this extrapositioninformation   extrapositioninformation
public parserconfiguration int linenumber  boolean extrapositioninformation  boolean inlinesource  boolean isfileparse
this inlinesource   inlinesource
this linenumber   linenumber
this extrapositioninformation   extrapositioninformation
this isevalparse    isfileparse
/**
* set whether this is an parsing of an eval() or not.
*
* @param isevalparse says how we should look at it
*/
public void setevalparse boolean isevalparse
this isevalparse   isevalparse
/**
* should positions of nodes provide additional information in them (like character offsets).
* @param extrapositioninformation
*/
public void setextrapositioninformation boolean extrapositioninformation
this extrapositioninformation   extrapositioninformation
/**
* should positions of nodes provide addition information?
* @return true if they should
*/
public boolean hasextrapositioninformation
return extrapositioninformation
/**
* is the requested parse for an eval()?
*
* @return true if for eval
*/
public boolean isevalparse
return isevalparse
public int getlinenumber
return linenumber
/**
* if we are performing an eval we should pass existing scope in.
* calling this lets the parser know we need to do this.
*
* @param existingscope is the scope that captures new vars, etc...
*/
public void parseasblock dynamicscope existingscope
this asblock   true
this existingscope   existingscope
/**
* this method returns the appropriate first scope for the parser.
*
* @return correct top scope for source to be parsed
*/
public dynamicscope getscope
if  asblock  return existingscope
// fixme: we should really not be creating the dynamic scope for the root
// of the ast before parsing.  this makes us end up needing to readjust
// this dynamic scope coming out of parse (and for local static scopes it
// will always happen because of $~ and $_).
// fixme: because we end up adjusting this after-the-fact, we can't use
// any of the specific-size scopes.
return new manyvarsdynamicscope new localstaticscope null   existingscope
/**
* are we parsing source provided as part of the '-e' option to ruby.
*
* @return true if source is from -e option
*/
public boolean isinlinesource
return inlinesource