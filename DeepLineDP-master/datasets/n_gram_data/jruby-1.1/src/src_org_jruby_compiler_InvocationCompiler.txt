/*
***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby compiler
import org jruby runtime calltype
import org jruby compiler impl skinnymethodadapter
/**
*
* @author headius
*/
public interface invocationcompiler
public skinnymethodadapter getmethodadapter
public void setmethodadapter skinnymethodadapter sma
/**
* invoke the named method as a "function", i.e. as a method on the current "self"
* object, using the specified argument count. it is expected that previous calls
* to the compiler has prepared the exact number of argument values necessary for this
* call. those values will be consumed, and the result of the call will be generated.
*/
public void invokedynamic string name  compilercallback receivercallback  argumentscallback argscallback  calltype calltype  compilercallback closurearg
public void invokeopasgnwithor string attrname  string attrasgnname  compilercallback receivercallback  argumentscallback argscallback
public void invokeopasgnwithand string attrname  string attrasgnname  compilercallback receivercallback  argumentscallback argscallback
public void invokeopasgnwithmethod string opname  string attrname  string attrasgnname  compilercallback receivercallback  argumentscallback argscallback
public void invokesuper compilercallback argscallback  compilercallback closurecallback
/**
* attr assign calls have slightly different semantics that normal calls, so this method handles those additional semantics.
*/
public void invokeattrassign string name
public void invokeattrassign string name  compilercallback receivercallback  argumentscallback argscallback
public void opelementasgn compilercallback valuecallback  string operator
public void opelementasgnwithor compilercallback receivercallback  argumentscallback argscallback  compilercallback valuecallback
public void opelementasgnwithand compilercallback receivercallback  argumentscallback argscallback  compilercallback valuecallback
public void opelementasgnwithmethod compilercallback receivercallback  argumentscallback argscallback  compilercallback valuecallback  string operator
/**
* invoke the block passed into this method, or throw an error if no block is present.
* if arguments have been prepared for the block, specify true. otherwise the default
* empty args will be used.
*/
public void yield boolean hasargs  boolean unwrap
/**
* used for when nodes with a case; assumes stack is ..., case_value, when_cond_array
*/
public void invokeeqq