/*
***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2002 jan arne petersen <jpetersen@uni-bonn.de>
* copyright (c) 2004 anders bengtsson <ndrsbngtssn@yahoo.se>
* copyright (c) 2004 thomas e enebo <enebo@acm.org>
* copyright (c) 2004 stefan matthias aust <sma@3plus4.de>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby parser
import java util arraylist
import java util list
import org jruby ast commentnode
import org jruby ast node
import org jruby ast preexenode
import org jruby runtime dynamicscope
/**
*/
public class rubyparserresult
final public static list<node> empty_begin_list   new arraylist<node>
final public static list<commentnode> empty_comment_list   new arraylist<commentnode>
private list<node> beginnodes
private node ast
// __end__ marker offset (-1 means none present)
private int endoffset    1
private list<commentnode> commentnodes
private dynamicscope scope
public list<commentnode> getcommentnodes
return commentnodes    null ? empty_comment_list   commentnodes
public node getast
return ast
public dynamicscope getscope
return scope
public void setscope dynamicscope scope
this scope   scope
/**
* sets the ast.
* @param ast the ast to set
*/
public void setast node ast
this ast   ast
public void addcomment commentnode node
if  commentnodes    null  commentnodes   new arraylist<commentnode>
commentnodes add node
public void addbeginnode preexenode node
if  beginnodes    null  beginnodes   new arraylist<node>
beginnodes add node
public list<node> getbeginnodes
return beginnodes    null ? empty_begin_list   beginnodes
public int getendoffset
return endoffset
public void setendoffset int endoffset
this endoffset   endoffset