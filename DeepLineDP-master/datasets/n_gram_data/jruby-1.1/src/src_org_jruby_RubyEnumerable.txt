/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2006 ola bini <ola@ologix.com>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby
import java util comparator
import java util arrays
import org jruby anno jrubymethod
import org jruby exceptions jumpexception
import org jruby runtime arity
import org jruby runtime block
import org jruby runtime callblock
import org jruby runtime blockcallback
import org jruby runtime methodindex
import org jruby runtime threadcontext
import org jruby runtime builtin irubyobject
import org jruby util typeconverter
/**
* the implementation of ruby's enumerable module.
*/
public class rubyenumerable
public static rubymodule createenumerablemodule ruby runtime
rubymodule enummodule   runtime definemodule
runtime setenumerable enummodule
enummodule defineannotatedmethods rubyenumerable class
return enummodule
public static irubyobject calleach ruby runtime  threadcontext context  irubyobject self
blockcallback callback
return self callmethod context     irubyobject null_array  callblock newcallclosure self  runtime getenumerable
arity noarguments    callback  context
@jrubymethod name
public static irubyobject to_a threadcontext context  irubyobject self
ruby runtime   self getruntime
rubyarray result   runtime newarray
calleach runtime  context  self  new appendblockcallback runtime  result
return result
@jrubymethod name      frame   true
public static irubyobject sort threadcontext context  irubyobject self  final block block
ruby runtime   self getruntime
rubyarray result   runtime newarray
calleach runtime  context  self  new appendblockcallback runtime  result
result sort_bang block
return result
@jrubymethod name      frame   true
public static irubyobject sort_by final threadcontext context  irubyobject self  final block block
final ruby runtime   self getruntime
if  self instanceof rubyarray
rubyarray selfarray    rubyarray  self
final irubyobject valuesandcriteria   new irubyobject
calleach runtime  context  self  new blockcallback
int i   0
public irubyobject call threadcontext ctx  irubyobject largs  block blk
valuesandcriteria   largs
valuesandcriteria   block yield context  largs
return runtime getnil
arrays sort valuesandcriteria  new comparator<irubyobject>
public int compare irubyobject o1  irubyobject o2
return rubyfixnum fix2int o1 callmethod context  methodindex op_spaceship     o2
irubyobject dstarray   new irubyobject
for  int i   0  i < dstarray length  i
dstarray   valuesandcriteria
return runtime newarraynocopy dstarray
else
final rubyarray result   runtime newarray
calleach runtime  context  self  new appendblockcallback runtime  result
final irubyobject valuesandcriteria   new irubyobject
for  int i   0  i < valuesandcriteria length  i
irubyobject val   result eltinternal i
valuesandcriteria   val
valuesandcriteria   block yield context  val
arrays sort valuesandcriteria  new comparator<irubyobject>
public int compare irubyobject o1  irubyobject o2
return rubyfixnum fix2int o1 callmethod context  methodindex op_spaceship     o2
for  int i   0  i < valuesandcriteria length  i
result eltinternalset i  valuesandcriteria
return result
@jrubymethod name      required   1  frame   true
public static irubyobject grep final threadcontext context  irubyobject self  final irubyobject pattern  final block block
final ruby runtime   self getruntime
final rubyarray result   runtime newarray
if  block isgiven
calleach runtime  context  self  new blockcallback
public irubyobject call threadcontext ctx  irubyobject largs  block blk
if  pattern callmethod context  methodindex op_eqq     largs  istrue
result append block yield context  largs
return runtime getnil
else
calleach runtime  context  self  new blockcallback
public irubyobject call threadcontext ctx  irubyobject largs  block blk
if  pattern callmethod context  methodindex op_eqq     largs  istrue
result append largs
return runtime getnil
return result
@jrubymethod name           optional   1  frame   true
public static irubyobject detect final threadcontext context  irubyobject self  irubyobject args  final block block
final ruby runtime   self getruntime
final irubyobject result   new irubyobject   null
irubyobject ifnone   null
if  args length    1  ifnone   args
try
calleach runtime  context  self  new blockcallback
public irubyobject call threadcontext ctx  irubyobject largs  block blk
if  block yield context  largs  istrue
result   largs
throw jumpexception special_jump
return runtime getnil
catch  jumpexception specialjump sj
return result
return ifnone    null ? ifnone callmethod context       runtime getnil
@jrubymethod name           frame   true
public static irubyobject select final threadcontext context  irubyobject self  final block block
final ruby runtime   self getruntime
final rubyarray result   runtime newarray
calleach runtime  context  self  new blockcallback
public irubyobject call threadcontext ctx  irubyobject largs  block blk
if  block yield context  largs  istrue    result append largs
return runtime getnil
return result
@jrubymethod name      frame   true
public static irubyobject reject final threadcontext context  irubyobject self  final block block
final ruby runtime   self getruntime
final rubyarray result   runtime newarray
calleach runtime  context  self  new blockcallback
public irubyobject call threadcontext ctx  irubyobject largs  block blk
if   block yield context  largs  istrue    result append largs
return runtime getnil
return result
@jrubymethod name           frame   true
public static irubyobject collect final threadcontext context  irubyobject self  final block block
final ruby runtime   self getruntime
final rubyarray result   runtime newarray
if  block isgiven
calleach runtime  context  self  new blockcallback
public irubyobject call threadcontext ctx  irubyobject largs  block blk
result append block yield context  largs
return runtime getnil
else
calleach runtime  context  self  new appendblockcallback runtime  result
return result
@jrubymethod name      optional   1  frame   true
public static irubyobject inject final threadcontext context  irubyobject self  irubyobject args  final block block
final ruby runtime   self getruntime
final irubyobject result   new irubyobject   null
if  args length    1  result   args
calleach runtime  context  self  new blockcallback
public irubyobject call threadcontext ctx  irubyobject largs  block blk
result   result    null ?
largs   block yield context  runtime newarray result  largs   null  null  true
return runtime getnil
return result    null ? runtime getnil     result
@jrubymethod name      frame   true
public static irubyobject partition final threadcontext context  irubyobject self  final block block
final ruby runtime   self getruntime
final rubyarray arr_true   runtime newarray
final rubyarray arr_false   runtime newarray
calleach runtime  context  self  new blockcallback
public irubyobject call threadcontext ctx  irubyobject largs  block blk
if  block yield context  largs  istrue
arr_true append largs
else
arr_false append largs
return runtime getnil
return runtime newarray arr_true  arr_false
private static class eachwithindex implements blockcallback
private int index   0
private final block block
private final ruby runtime
public eachwithindex threadcontext ctx  block block
this block   block
this runtime   ctx getruntime
public irubyobject call threadcontext context  irubyobject iargs  block block
this block yield context  runtime newarray iargs  runtime newfixnum index
return runtime getnil
@jrubymethod name      frame   true
public static irubyobject each_with_index threadcontext context  irubyobject self  block block
self callmethod context     irubyobject null_array  callblock newcallclosure self  self getruntime   getenumerable
arity noarguments    new eachwithindex context  block   context
return self
@jrubymethod name           required   1  frame   true
public static irubyobject include_p final threadcontext context  irubyobject self  final irubyobject arg
final ruby runtime   self getruntime
try
calleach runtime  context  self  new blockcallback
public irubyobject call threadcontext ctx  irubyobject largs  block blk
if  rubyobject equalinternal context  arg  largs  istrue
throw jumpexception special_jump
return runtime getnil
catch  jumpexception specialjump sj
return runtime gettrue
return runtime getfalse
@jrubymethod name      frame   true
public static irubyobject max threadcontext context  irubyobject self  final block block
final ruby runtime   self getruntime
final irubyobject result   new irubyobject   null
if  block isgiven
calleach runtime  context  self  new blockcallback
public irubyobject call threadcontext ctx  irubyobject largs  block blk
if  result    null    rubycomparable cmpint ctx  block yield ctx
runtime newarray largs  result    largs  result  > 0
result   largs
return runtime getnil
else
calleach runtime  context  self  new blockcallback
public irubyobject call threadcontext ctx  irubyobject largs  block blk
if  result    null    rubycomparable cmpint ctx  largs callmethod ctx
methodindex op_spaceship     result   largs  result  > 0
result   largs
return runtime getnil
return result    null ? runtime getnil     result
@jrubymethod name      frame   true
public static irubyobject min threadcontext context  irubyobject self  final block block
final ruby runtime   self getruntime
final irubyobject result   new irubyobject   null
if  block isgiven
calleach runtime  context  self  new blockcallback
public irubyobject call threadcontext ctx  irubyobject largs  block blk
if  result    null    rubycomparable cmpint ctx  block yield ctx
runtime newarray largs  result    largs  result  < 0
result   largs
return runtime getnil
else
calleach runtime  context  self  new blockcallback
public irubyobject call threadcontext ctx  irubyobject largs  block blk
if  result    null    rubycomparable cmpint ctx  largs callmethod ctx
methodindex op_spaceship     result   largs  result  < 0
result   largs
return runtime getnil
return result    null ? runtime getnil     result
@jrubymethod name      frame   true
public static irubyobject all_p threadcontext context  irubyobject self  final block block
final ruby runtime   self getruntime
try
if  block isgiven
calleach runtime  context  self  new blockcallback
public irubyobject call threadcontext ctx  irubyobject largs  block blk
if   block yield ctx  largs  istrue
throw jumpexception special_jump
return runtime getnil
else
calleach runtime  context  self  new blockcallback
public irubyobject call threadcontext ctx  irubyobject largs  block blk
if   largs istrue
throw jumpexception special_jump
return runtime getnil
catch  jumpexception specialjump sj
return runtime getfalse
return runtime gettrue
@jrubymethod name      frame   true
public static irubyobject any_p threadcontext context  irubyobject self  final block block
final ruby runtime   self getruntime
try
if  block isgiven
calleach runtime  context  self  new blockcallback
public irubyobject call threadcontext ctx  irubyobject largs  block blk
if  block yield ctx  largs  istrue
throw jumpexception special_jump
return runtime getnil
else
calleach runtime  context  self  new blockcallback
public irubyobject call threadcontext ctx  irubyobject largs  block blk
if  largs istrue
throw jumpexception special_jump
return runtime getnil
catch  jumpexception specialjump sj
return runtime gettrue
return runtime getfalse
@jrubymethod name      rest   true  frame   true
public static irubyobject zip threadcontext context  irubyobject self  final irubyobject args  final block block
final ruby runtime   self getruntime
for  int i   0  i < args length  i
args   typeconverter converttotype args  runtime getarray    methodindex to_a
final int alen   args length   1
if  block isgiven
calleach runtime  context  self  new blockcallback
int ix   0
public irubyobject call threadcontext ctx  irubyobject largs  block blk
rubyarray array   runtime newarray alen
array append largs
for  int i   0  j   args length  i < j  i
array append   rubyarray  args  entry ix
block yield ctx  array
ix
return runtime getnil
return runtime getnil
else
final rubyarray zip   runtime newarray
calleach runtime  context  self  new blockcallback
int ix   0
public irubyobject call threadcontext ctx  irubyobject largs  block blk
rubyarray array   runtime newarray alen
array append largs
for  int i   0  j   args length  i < j  i
array append   rubyarray  args  entry ix
zip append array
ix
return runtime getnil
return zip
@jrubymethod name      frame   true  compat   compatversion ruby1_9
public static irubyobject group_by threadcontext context  irubyobject self  final block block
final ruby runtime   self getruntime
final rubyhash result   new rubyhash runtime
calleach runtime  context  self  new blockcallback
public irubyobject call threadcontext ctx  irubyobject largs  block blk
irubyobject key   block yield ctx  largs
irubyobject curr   result fastaref key
if  curr    null
curr   runtime newarray
result fastaset key  curr
curr callmethod ctx  methodindex op_lshift     largs
return runtime getnil
return result
public static final class appendblockcallback implements blockcallback
private ruby runtime
private rubyarray result
public appendblockcallback ruby runtime  rubyarray result
this runtime   runtime
this result   result
public irubyobject call threadcontext context  irubyobject largs  block blk
result append largs
return runtime getnil