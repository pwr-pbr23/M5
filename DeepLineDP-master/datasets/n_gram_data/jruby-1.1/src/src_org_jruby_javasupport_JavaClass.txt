/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2002-2004 anders bengtsson <ndrsbngtssn@yahoo.se>
* copyright (c) 2002-2004 jan arne petersen <jpetersen@uni-bonn.de>
* copyright (c) 2004-2005 thomas e enebo <enebo@acm.org>
* copyright (c) 2004 stefan matthias aust <sma@3plus4.de>
* copyright (c) 2004 david corbin <dcorbin@users.sourceforge.net>
* copyright (c) 2005 charles o nutter <headius@headius.com>
* copyright (c) 2006 kresten krab thorup <krab@gnu.org>
* copyright (c) 2007 miguel covarrubias <mlcovarrubias@gmail.com>
* copyright (c) 2007 william n dortch <bill.dortch@gmail.com>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby javasupport
import java io bytearrayoutputstream
import java io inputstream
import java io ioexception
import java lang reflect array
import java lang reflect constructor
import java lang reflect field
import java lang reflect method
import java lang reflect modifier
import java util arraylist
import java util hashmap
import java util iterator
import java util list
import java util map
import java util concurrent locks reentrantlock
import java util regex matcher
import java util regex pattern
import org jruby ruby
import org jruby rubyarray
import org jruby rubyboolean
import org jruby rubyclass
import org jruby rubyfixnum
import org jruby rubyinteger
import org jruby rubymodule
import org jruby rubyproc
import org jruby rubystring
import org jruby anno jrubymethod
import org jruby common irubywarnings id
import org jruby exceptions raiseexception
import org jruby internal runtime methods dynamicmethod
import org jruby javasupport util runtimehelpers
import org jruby runtime arity
import org jruby runtime block
import org jruby runtime calltype
import org jruby runtime objectallocator
import org jruby runtime visibility
import org jruby runtime builtin irubyobject
import org jruby runtime callback callback
import org jruby util bytelist
import org jruby util idutil
import org jruby util collections inthashmap
public class javaclass extends javaobject
// some null objects to simplify later code
private static final class<?> empty_class_array   new class<?>
private static final method empty_method_array   new method
private static final field empty_field_array   new field
private static class assignedname
// to override an assigned name, the type must be less than
// or equal to the assigned type. so a field name in a subclass
// will override an alias in a superclass, but not a method.
static final int reserved   0
static final int method   1
static final int field   2
static final int protected_method   3
static final int weakly_reserved   4     we'll be peeved  but not devastated  if you override
static final int alias   5
// yes, protected fields are weaker than aliases. many conflicts
// in the old awt code, for example, where you really want 'size'
// to mean the public method getsize, not the protected field 'size'.
static final int protected_field   6
string name
int type
assignedname
assignedname string name  int type
this name   name
this type   type
// todo: other reserved names?
private static final map<string  assignedname> reserved_names   new hashmap<string  assignedname>
static
reserved_names put    new assignedname    assignedname reserved
reserved_names put    new assignedname    assignedname reserved
reserved_names put    new assignedname    assignedname reserved
reserved_names put    new assignedname    assignedname reserved
reserved_names put    new assignedname    assignedname reserved
reserved_names put    new assignedname    assignedname reserved
reserved_names put    new assignedname    assignedname reserved
reserved_names put    new assignedname    assignedname reserved
// weakly reserved names
reserved_names put    new assignedname    assignedname weakly_reserved
private static final map<string  assignedname> static_reserved_names   new hashmap<string  assignedname> reserved_names
static
static_reserved_names put    new assignedname    assignedname reserved
private static final map<string  assignedname> instance_reserved_names   new hashmap<string  assignedname> reserved_names
private static abstract class namedcallback implements callback
static final int static_field   1
static final int static_method   2
static final int instance_field   3
static final int instance_method   4
string name
int type
visibility visibility   visibility public
boolean isprotected
namedcallback
namedcallback  string name  int type
this name   name
this type   type
abstract void install rubyclass proxy
// small hack to save a cast later on
boolean haslocalmethod
return true
boolean ispublic
return visibility    visibility public
boolean isprotected
return visibility    visibility protected
private static abstract class fieldcallback extends namedcallback
field field
javafield javafield
fieldcallback
fieldcallback string name  int type  field field
super name type
this field   field
private class staticfieldgetter extends fieldcallback
staticfieldgetter
staticfieldgetter string name  field field
super name static_field field
void install rubyclass proxy
proxy getsingletonclass   definefastmethod this name this this visibility
public irubyobject execute irubyobject self  irubyobject args  block block
if  javafield    null
javafield   new javafield getruntime   field
return java java_to_ruby self javafield static_value   block null_block
public arity getarity
return arity no_arguments
private class staticfieldsetter extends fieldcallback
staticfieldsetter
staticfieldsetter string name  field field
super name static_field field
void install rubyclass proxy
proxy getsingletonclass   definefastmethod this name this this visibility
public irubyobject execute irubyobject self  irubyobject args  block block
if  javafield    null
javafield   new javafield getruntime   field
return java java_to_ruby self
javafield set_static_value java ruby_to_java self args block null_block
block null_block
public arity getarity
return arity one_argument
private class instancefieldgetter extends fieldcallback
instancefieldgetter
instancefieldgetter string name  field field
super name instance_field field
void install rubyclass proxy
proxy definefastmethod this name this this visibility
public irubyobject execute irubyobject self  irubyobject args  block block
if  javafield    null
javafield   new javafield getruntime   field
return java java_to_ruby self
javafield value self getinstancevariables   fastgetinstancevariable
block null_block
public arity getarity
return arity no_arguments
private class instancefieldsetter extends fieldcallback
instancefieldsetter
instancefieldsetter string name  field field
super name instance_field field
void install rubyclass proxy
proxy definefastmethod this name this this visibility
public irubyobject execute irubyobject self  irubyobject args  block block
if  javafield    null
javafield   new javafield getruntime   field
return java java_to_ruby self
javafield set_value self getinstancevariables   fastgetinstancevariable
java ruby_to_java self args block null_block
block null_block
public arity getarity
return arity one_argument
private static abstract class methodcallback extends namedcallback
private boolean havelocalmethod
private list<method> methods
protected list<string> aliases
protected javamethod javamethod
protected inthashmap javamethods
protected inthashmap matchingmethods
methodcallback
methodcallback string name  int type
super name type
// called only by initializing thread; no synchronization required
void addmethod method method  class<?> javaclass
if  methods    null
methods   new arraylist<method>
methods add method
havelocalmethod    javaclass    method getdeclaringclass
// called only by initializing thread; no synchronization required
void addalias string alias
if  aliases    null
aliases   new arraylist<string>
if   aliases contains alias
aliases add alias
// modified only by addmethod; no synchronization required
boolean haslocalmethod
return havelocalmethod
// todo: varargs?
// todo: rework java.matching_methods_internal and
// proxydata.method_cache, since we really don't need to be passing
// around rubyarray objects anymore.
synchronized void createjavamethods ruby runtime
if  methods    null
if  methods size      1
javamethod   javamethod create runtime  methods get 0
else
javamethods   new inthashmap
matchingmethods   new inthashmap
for  method method  methods
// todo: deal with varargs
int arity   method getparametertypes   length
rubyarray methodsforarity    rubyarray javamethods get arity
if  methodsforarity    null
methodsforarity   rubyarray newarraylight runtime
javamethods put arity methodsforarity
methodsforarity append javamethod create runtime method
methods   null
void raisenomatchingmethoderror irubyobject proxy  irubyobject args  int start
int len   args length
list<object> argtypes   new arraylist<object> len   start
for  int i   start   i < len  i
argtypes add   javaclass   javaobject args  java_class    getvalue
throw proxy getruntime   newnameerror     this name       argtypes       proxy callmethod proxy getruntime   getcurrentcontext       null
private class staticmethodinvoker extends methodcallback
staticmethodinvoker
staticmethodinvoker string name
super name static_method
void install rubyclass proxy
if  haslocalmethod
rubyclass singleton   proxy getsingletonclass
singleton definefastmethod this name this this visibility
if  aliases    null    ispublic
singleton definealiases aliases  this name
aliases   null
// synchronized due to modification of matchingmethods
synchronized public irubyobject execute irubyobject self  irubyobject args  block block
createjavamethods self getruntime
// todo: ok to convert args in place, rather than new array?
int len   args length
irubyobject convertedargs   new irubyobject
for  int i   len    i >  0
convertedargs   java ruby_to_java self args block null_block
if  javamethods    null
return java java_to_ruby self javamethod invoke_static convertedargs  block null_block
else
int argstypehash   0
for  int i   len    i >  0
argstypehash    3 args getmetaclass   id
irubyobject match    irubyobject matchingmethods get argstypehash
if  match    null
// todo: varargs?
rubyarray methods    rubyarray javamethods get len
if  methods    null
raisenomatchingmethoderror self convertedargs 0
match   java matching_method_internal java_utilities  methods  convertedargs  0  len
return java java_to_ruby self    javamethod match  invoke_static convertedargs   block null_block
public arity getarity
return arity optional
private class instancemethodinvoker extends methodcallback
instancemethodinvoker
instancemethodinvoker string name
super name instance_method
void install rubyclass proxy
if  haslocalmethod
proxy definefastmethod this name this this visibility
if  aliases    null    ispublic
proxy definealiases aliases  this name
aliases   null
// synchronized due to modification of matchingmethods
synchronized public irubyobject execute irubyobject self  irubyobject args  block block
createjavamethods self getruntime
// todo: ok to convert args in place, rather than new array?
int len   args length
if  block isgiven         convert block to argument
len    1
irubyobject newargs   new irubyobject
system arraycopy args  0  newargs  0  args length
newargs   rubyproc newproc self getruntime    block  block type lambda
args   newargs
irubyobject convertedargs   new irubyobject
convertedargs   self getinstancevariables   fastgetinstancevariable
int i   len
if  block isgiven
convertedargs   args
i    1
for      i >  0
convertedargs   java ruby_to_java self args block null_block
if  javamethods    null
return java java_to_ruby self javamethod invoke convertedargs  block null_block
else
int argstypehash   0
for  i   len    i >  0
argstypehash    3 args getmetaclass   id
irubyobject match    irubyobject matchingmethods get argstypehash
if  match    null
// todo: varargs?
rubyarray methods    rubyarray javamethods get len
if  methods    null
raisenomatchingmethoderror self convertedargs 1
match   java matching_method_internal java_utilities  methods  convertedargs  1  len
matchingmethods put argstypehash  match
return java java_to_ruby self   javamethod match  invoke convertedargs  block null_block
public arity getarity
return arity optional
private static class constantfield
static final int constant   modifier final   modifier public   modifier static
final field field
constantfield field field
this field   field
void install final rubymodule proxy
if  proxy fastgetconstantat field getname       null
javafield javafield   new javafield proxy getruntime   field
// todo: catch exception if constant is already set by other
// thread
proxy const_set javafield name   java java_to_ruby proxy javafield static_value   block null_block
static boolean isconstant final field field
return  field getmodifiers     constant     constant
character isuppercase field getname   charat 0
private final rubymodule java_utilities   getruntime   getjavasupport   getjavautilitiesmodule
private map<string  assignedname> staticassignednames
private map<string  assignedname> instanceassignednames
private map<string  namedcallback> staticcallbacks
private map<string  namedcallback> instancecallbacks
private list<constantfield> constantfields
// caching constructors, as they're accessed for each new instance
private volatile rubyarray constructors
private volatile arraylist<irubyobject> proxyextenders
// proxy module for interfaces
private volatile rubymodule proxymodule
// proxy class for concrete classes.  also used for
// "concrete" interfaces, which is why we have two fields
private volatile rubyclass proxyclass
// readable only by thread building proxy, so don't need to be
// volatile. used to handle recursive calls to getproxyclass/module
// while proxy is being constructed (usually when a constant
// defined by a class is of the same type as that class).
private rubymodule unfinishedproxymodule
private rubyclass unfinishedproxyclass
private final reentrantlock proxylock   new reentrantlock
public rubymodule getproxymodule
// allow proxy to be read without synchronization. if proxy
// is under construction, only the building thread can see it.
rubymodule proxy
if   proxy   proxymodule     null
// proxy is complete, return it
return proxy
else if  proxylock isheldbycurrentthread
// proxy is under construction, building thread can
// safely read non-volatile value
return unfinishedproxymodule
return null
public rubyclass getproxyclass
// allow proxy to be read without synchronization. if proxy
// is under construction, only the building thread can see it.
rubyclass proxy
if   proxy   proxyclass     null
// proxy is complete, return it
return proxy
else if  proxylock isheldbycurrentthread
// proxy is under construction, building thread can
// safely read non-volatile value
return unfinishedproxyclass
return null
public void lockproxy
proxylock lock
public void unlockproxy
proxylock unlock
protected map<string  assignedname> getstaticassignednames
return staticassignednames
protected map<string  assignedname> getinstanceassignednames
return instanceassignednames
private javaclass ruby runtime  class<?> javaclass
super runtime   rubyclass  runtime getjavasupport   getjavaclassclass    javaclass
if  javaclass isinterface
initializeinterface javaclass
else if    javaclass isarray      javaclass isprimitive
// todo: public only?
initializeclass javaclass
public boolean equals object other
return other instanceof javaclass
this getvalue        javaclass other  getvalue
private void initializeinterface class<?> javaclass
map<string  assignedname> staticnames    new hashmap<string  assignedname> static_reserved_names
list<constantfield> constantfields   new arraylist<constantfield>
field fields   empty_field_array
try
fields   javaclass getdeclaredfields
catch  securityexception e
try
fields   javaclass getfields
catch  securityexception e2
for  int i   fields length    i >  0
field field   fields
if  javaclass    field getdeclaringclass    continue
if  constantfield isconstant field
constantfields add new constantfield field
this staticassignednames   staticnames
this constantfields   constantfields
private void initializeclass class<?> javaclass
class<?> superclass   javaclass getsuperclass
map<string  assignedname> staticnames
map<string  assignedname> instancenames
if  superclass    null
staticnames   new hashmap<string  assignedname>
instancenames   new hashmap<string  assignedname>
else
javaclass superjavaclass   get getruntime   superclass
staticnames   new hashmap<string  assignedname> superjavaclass getstaticassignednames
instancenames   new hashmap<string  assignedname> superjavaclass getinstanceassignednames
staticnames putall static_reserved_names
instancenames putall instance_reserved_names
map<string  namedcallback> staticcallbacks   new hashmap<string  namedcallback>
map<string  namedcallback> instancecallbacks   new hashmap<string  namedcallback>
list<constantfield> constantfields   new arraylist<constantfield>
field fields   empty_field_array
try
fields   javaclass getfields
catch  securityexception e
for  int i   fields length    i >  0
field field   fields
if  javaclass    field getdeclaringclass    continue
if  constantfield isconstant field
constantfields add new constantfield field
continue
string name   field getname
int modifiers   field getmodifiers
if  modifier isstatic modifiers
assignedname assignedname   staticnames get name
if  assignedname    null    assignedname type < assignedname field
continue
staticnames put name new assignedname name assignedname field
staticcallbacks put name new staticfieldgetter name field
if   modifier isfinal modifiers
string setname   name
staticcallbacks put setname new staticfieldsetter setname field
else
assignedname assignedname   instancenames get name
if  assignedname    null    assignedname type < assignedname field
continue
instancenames put name  new assignedname name assignedname field
instancecallbacks put name  new instancefieldgetter name field
if   modifier isfinal modifiers
string setname   name
instancecallbacks put setname  new instancefieldsetter setname field
// todo: protected methods.  this is going to require a rework
// of some of the mechanism.
method methods   empty_method_array
for  class c   javaclass  c    null  c   c getsuperclass
try
methods   javaclass getmethods
break
catch  securityexception e
for  int i   methods length    i >  0
// we need to collect all methods, though we'll only
// install the ones that are named in this class
method method   methods
string name   method getname
if  modifier isstatic method getmodifiers
assignedname assignedname   staticnames get name
if  assignedname    null
staticnames put name new assignedname name assignedname method
else
if  assignedname type < assignedname method
continue
if  assignedname type    assignedname method
staticcallbacks remove name
staticcallbacks remove name
staticnames put name new assignedname name assignedname method
staticmethodinvoker invoker    staticmethodinvoker staticcallbacks get name
if  invoker    null
invoker   new staticmethodinvoker name
staticcallbacks put name invoker
invoker addmethod method javaclass
else
assignedname assignedname   instancenames get name
if  assignedname    null
instancenames put name new assignedname name assignedname method
else
if  assignedname type < assignedname method
continue
if  assignedname type    assignedname method
instancecallbacks remove name
instancecallbacks remove name
instancenames put name new assignedname name assignedname method
instancemethodinvoker invoker    instancemethodinvoker instancecallbacks get name
if  invoker    null
invoker   new instancemethodinvoker name
instancecallbacks put name invoker
invoker addmethod method javaclass
this staticassignednames   staticnames
this instanceassignednames   instancenames
this staticcallbacks   staticcallbacks
this instancecallbacks   instancecallbacks
this constantfields   constantfields
public void setupproxy final rubyclass proxy
assert proxylock isheldbycurrentthread
proxy definefastmethod    __jsend_method
final class<?> javaclass   javaclass
if  javaclass isinterface
setupinterfaceproxy proxy
return
assert this proxyclass    null
this unfinishedproxyclass   proxy
if  javaclass isarray      javaclass isprimitive
// see note below re: 2-field kludge
this proxyclass   proxy
this proxymodule   proxy
return
for  constantfield field  constantfields
field install proxy
for  iterator<namedcallback> iter   staticcallbacks values   iterator    iter hasnext
namedcallback callback   iter next
if  callback type    namedcallback static_method    callback haslocalmethod
assignaliases  methodcallback callback staticassignednames
callback install proxy
for  iterator<namedcallback> iter   instancecallbacks values   iterator    iter hasnext
namedcallback callback   iter next
if  callback type    namedcallback instance_method    callback haslocalmethod
assignaliases  methodcallback callback instanceassignednames
callback install proxy
// setup constants for public inner classes
class<?> classes   empty_class_array
try
classes   javaclass getclasses
catch  securityexception e
for  int i   classes length    i >  0
if  javaclass    classes getdeclaringclass
class<?> clazz   classes
string simplename   getsimplename clazz
if  simplename length      0  continue
// ignore bad constant named inner classes pending jruby-697
if  idutil isconstant simplename     proxy getconstantat simplename     null
proxy setconstant simplename
java get_proxy_class java_utilities get getruntime   clazz
// fixme: bit of a kludge here (non-interface classes assigned to both
// class and module fields). simplifies proxy extender code, will go away
// when ji is overhauled (and proxy extenders are deprecated).
this proxyclass   proxy
this proxymodule   proxy
applyproxyextenders
// todo: we can probably release our references to the constantfields
// array and static/instance callback hashes at this point.
private static void assignaliases methodcallback callback  map<string  assignedname> assignednames
string name   callback name
addunassignedalias getrubycasedname name  assignednames callback
// logic adapted from java.beans.introspector
if    name length   > 3    name startswith
return
string javapropertyname   getjavapropertyname name
if  javapropertyname    null
return     not a java property name  done with this method
for  method method  callback methods
class<?> argtypes   method getparametertypes
class<?> resulttype   method getreturntype
int argcount   argtypes length
if  argcount    0
if  name startswith
addunassignedalias getrubycasedname name  substring 4  assignednames callback
addunassignedalias javapropertyname assignednames callback
else if  resulttype    boolean class    name startswith
string rubyname   getrubycasedname name  substring 3
if  rubyname    null
addunassignedalias rubyname assignednames callback
addunassignedalias rubyname   assignednames callback
if   javapropertyname equals rubyname
addunassignedalias javapropertyname assignednames callback
addunassignedalias javapropertyname   assignednames callback
else if  argcount    1
// indexed get
if  argtypes    int class    name startswith
addunassignedalias getrubycasedname name  substring 4  assignednames callback
addunassignedalias javapropertyname assignednames callback
else if  resulttype    void class    name startswith
string rubyname   getrubycasedname name  substring 4
if  rubyname    null
addunassignedalias rubyname     assignednames callback
if   javapropertyname equals rubyname
addunassignedalias javapropertyname     assignednames callback
private static void addunassignedalias string name  map<string  assignedname> assignednames
methodcallback callback
if  name    null
assignedname assignedname    assignedname assignednames get name
if  assignedname    null
callback addalias name
assignednames put name new assignedname name assignedname alias
else if  assignedname type    assignedname alias
callback addalias name
else if  assignedname type > assignedname alias
// todo: there will be some additional logic in this branch
// dealing with conflicting protected fields.
callback addalias name
assignednames put name new assignedname name assignedname alias
private static final pattern java_property_chopper   pattern compile
public static string getjavapropertyname string beanmethodname
matcher m   java_property_chopper matcher beanmethodname
if   m find    return null
string javapropertyname   m group 2  tolowercase     m group 3
return javapropertyname
private static final pattern camel_case_splitter   pattern compile
public static string getrubycasedname string javacasedname
matcher m   camel_case_splitter matcher javacasedname
string rubycasedname   m replaceall    tolowercase
if  rubycasedname equals javacasedname
return null
return rubycasedname
// old (quasi-deprecated) interface class
private void setupinterfaceproxy final rubyclass proxy
assert javaclass   isinterface
assert proxylock isheldbycurrentthread
assert this proxyclass    null
this proxyclass   proxy
// nothing else to here - the module version will be
// included in the class.
public void setupinterfacemodule final rubymodule module
assert javaclass   isinterface
assert proxylock isheldbycurrentthread
assert this proxymodule    null
this unfinishedproxymodule   module
class<?> javaclass   javaclass
for  constantfield field  constantfields
field install module
// setup constants for public inner classes
class<?> classes   empty_class_array
try
classes   javaclass getclasses
catch  securityexception e
for  int i   classes length    i >  0
if  javaclass    classes getdeclaringclass
class<?> clazz   classes
string simplename   getsimplename clazz
if  simplename length      0  continue
// ignore bad constant named inner classes pending jruby-697
if  idutil isconstant simplename     module getconstantat simplename     null
module const_set getruntime   newstring simplename
java get_proxy_class java_utilities get getruntime   clazz
this proxymodule   module
applyproxyextenders
public void addproxyextender final irubyobject extender
lockproxy
try
if   extender respondsto
throw getruntime   newtypeerror
if  proxymodule    null
if  proxyextenders    null
proxyextenders   new arraylist<irubyobject>
proxyextenders add extender
else
getruntime   getwarnings   warn id proxy_extended_late      this
extendproxy extender
finally
unlockproxy
private void applyproxyextenders
arraylist<irubyobject> extenders
if   extenders   proxyextenders     null
for  irubyobject extender   extenders
extendproxy extender
proxyextenders   null
private void extendproxy irubyobject extender
extender callmethod getruntime   getcurrentcontext       proxymodule
@jrubymethod required   1
public irubyobject extend_proxy irubyobject extender
addproxyextender extender
return getruntime   getnil
public static javaclass get ruby runtime  class<?> klass
javaclass javaclass   runtime getjavasupport   getjavaclassfromcache klass
if  javaclass    null
javaclass   createjavaclass runtime klass
return javaclass
public static rubyarray getrubyarray ruby runtime  class<?> classes
irubyobject javaclasses   new irubyobject
for  int i   classes length    i >  0
javaclasses   get runtime  classes
return runtime newarraynocopy javaclasses
private static synchronized javaclass createjavaclass ruby runtime  class<?> klass
// double-check the cache now that we're synchronized
javaclass javaclass   runtime getjavasupport   getjavaclassfromcache klass
if  javaclass    null
javaclass   new javaclass runtime  klass
runtime getjavasupport   putjavaclassintocache javaclass
return javaclass
public static rubyclass createjavaclassclass ruby runtime  rubymodule javamodule
// fixme: determine if a real allocator is needed here. do people want to extend
// javaclass? do we want them to do that? can you class.new(javaclass)? should
// you be able to?
// todo: not_allocatable_allocator is probably ok here, since we don't intend for people to monkey with
// this type and it can't be marshalled. confirm. jruby-415
rubyclass result   javamodule defineclassunder    javamodule fastgetclass     objectallocator not_allocatable_allocator
result includemodule runtime fastgetmodule
result defineannotatedmethods javaclass class
result getmetaclass   undefinemethod
result getmetaclass   undefinemethod
return result
public static synchronized javaclass fornameverbose ruby runtime  string classname
class<?> klass   runtime getjavasupport   loadjavaclassverbose classname
return javaclass get runtime  klass
public static synchronized javaclass fornamequiet ruby runtime  string classname
class klass   runtime getjavasupport   loadjavaclassquiet classname
return javaclass get runtime  klass
@jrubymethod name      required   1  meta   true
public static javaclass for_name irubyobject recv  irubyobject name
return fornameverbose recv getruntime    name asjavastring
private static final callback __jsend_method   new callback
public irubyobject execute irubyobject self  irubyobject args  block block
string name   args asjavastring
dynamicmethod method   self getmetaclass   searchmethod name
int v   method getarity   getvalue
irubyobject newargs   new irubyobject
system arraycopy args  1  newargs  0  newargs length
if v < 0    v     newargs length
return runtimehelpers invoke self getruntime   getcurrentcontext    self  name  newargs  calltype functional  block
else
rubyclass superclass   self getmetaclass   getsuperclass
return runtimehelpers invokeas self getruntime   getcurrentcontext    superclass  self  name  newargs  calltype super  block
public arity getarity
return arity optional
@jrubymethod
public rubymodule ruby_class
// java.getproxyclass deals with sync issues, so we won't duplicate the logic here
return java getproxyclass getruntime    this
@jrubymethod name
public rubyboolean public_p
return getruntime   newboolean modifier ispublic javaclass   getmodifiers
@jrubymethod name
public rubyboolean protected_p
return getruntime   newboolean modifier isprotected javaclass   getmodifiers
@jrubymethod name
public rubyboolean private_p
return getruntime   newboolean modifier isprivate javaclass   getmodifiers
public class javaclass
return  class  getvalue
@jrubymethod name
public rubyboolean final_p
return getruntime   newboolean modifier isfinal javaclass   getmodifiers
@jrubymethod name
public rubyboolean interface_p
return getruntime   newboolean javaclass   isinterface
@jrubymethod name
public rubyboolean array_p
return getruntime   newboolean javaclass   isarray
@jrubymethod name
public rubyboolean enum_p
return getruntime   newboolean javaclass   isenum
@jrubymethod name
public rubyboolean annotation_p
return getruntime   newboolean javaclass   isannotation
@jrubymethod name
public rubyboolean anonymous_class_p
return getruntime   newboolean javaclass   isanonymousclass
@jrubymethod name
public rubyboolean local_class_p
return getruntime   newboolean javaclass   islocalclass
@jrubymethod name
public rubyboolean member_class_p
return getruntime   newboolean javaclass   ismemberclass
@jrubymethod name
public irubyobject synthetic_p
return getruntime   newboolean javaclass   issynthetic
@jrubymethod name
public rubystring name
return getruntime   newstring javaclass   getname
@jrubymethod
public irubyobject canonical_name
string canonicalname   javaclass   getcanonicalname
if  canonicalname    null
return getruntime   newstring canonicalname
return getruntime   getnil
@jrubymethod name
public irubyobject get_package
return java getinstance getruntime    javaclass   getpackage
@jrubymethod
public irubyobject class_loader
return java getinstance getruntime    javaclass   getclassloader
@jrubymethod
public irubyobject protection_domain
return java getinstance getruntime    javaclass   getprotectiondomain
@jrubymethod required   1
public irubyobject resource irubyobject name
return java getinstance getruntime    javaclass   getresource name asjavastring
@jrubymethod required   1
public irubyobject resource_as_stream irubyobject name
return java getinstance getruntime    javaclass   getresourceasstream name asjavastring
@jrubymethod required   1
public irubyobject resource_as_string irubyobject name
inputstream in   javaclass   getresourceasstream name asjavastring
if  in    null  return getruntime   getnil
bytearrayoutputstream out   new bytearrayoutputstream
try
int len
byte buf   new byte
while   len   in read buf   >  0
out write buf  0  len
catch  ioexception e
throw getruntime   newioerrorfromexception e
return getruntime   newstring new bytelist out tobytearray    false
@suppresswarnings
@jrubymethod required   1
public irubyobject annotation irubyobject annoclass
if    annoclass instanceof javaclass
throw getruntime   newtypeerror annoclass  getruntime   getjavasupport   getjavaclassclass
return java getinstance getruntime    javaclass   getannotation   javaclass annoclass  javaclass
@jrubymethod
public irubyobject annotations
// note: intentionally returning the actual array returned from java, rather
// than wrapping it in a rubyarray. wave of the future, when java_class will
// return the actual class, rather than a javaclass wrapper.
return java getinstance getruntime    javaclass   getannotations
@jrubymethod name
public rubyboolean annotations_p
return getruntime   newboolean javaclass   getannotations   length > 0
@jrubymethod
public irubyobject declared_annotations
// see note above re: return type
return java getinstance getruntime    javaclass   getdeclaredannotations
@jrubymethod name
public rubyboolean declared_annotations_p
return getruntime   newboolean javaclass   getdeclaredannotations   length > 0
@suppresswarnings
@jrubymethod name      required   1
public irubyobject annotation_present_p irubyobject annoclass
if    annoclass instanceof javaclass
throw getruntime   newtypeerror annoclass  getruntime   getjavasupport   getjavaclassclass
return getruntime   newboolean javaclass   isannotationpresent   javaclass annoclass  javaclass
@jrubymethod
public irubyobject modifiers
return getruntime   newfixnum javaclass   getmodifiers
@jrubymethod
public irubyobject declaring_class
class<?> clazz   javaclass   getdeclaringclass
if  clazz    null
return javaclass get getruntime    clazz
return getruntime   getnil
@jrubymethod
public irubyobject enclosing_class
return java getinstance getruntime    javaclass   getenclosingclass
@jrubymethod
public irubyobject enclosing_constructor
constructor<?> ctor   javaclass   getenclosingconstructor
if  ctor    null
return new javaconstructor getruntime    ctor
return getruntime   getnil
@jrubymethod
public irubyobject enclosing_method
method meth   javaclass   getenclosingmethod
if  meth    null
return new javamethod getruntime    meth
return getruntime   getnil
@jrubymethod
public irubyobject enum_constants
return java getinstance getruntime    javaclass   getenumconstants
@jrubymethod
public irubyobject generic_interfaces
return java getinstance getruntime    javaclass   getgenericinterfaces
@jrubymethod
public irubyobject generic_superclass
return java getinstance getruntime    javaclass   getgenericsuperclass
@jrubymethod
public irubyobject type_parameters
return java getinstance getruntime    javaclass   gettypeparameters
@jrubymethod
public irubyobject signers
return java getinstance getruntime    javaclass   getsigners
private static string getsimplename class<?> clazz
if  clazz isarray
return getsimplename clazz getcomponenttype
string classname   clazz getname
int len   classname length
int i   classname lastindexof
if  i     1
do
i
while  i < len    character isdigit classname charat i
return classname substring i
return classname substring classname lastindexof      1
@jrubymethod
public rubystring simple_name
return getruntime   newstring getsimplename javaclass
@jrubymethod
public irubyobject superclass
class<?> superclass   javaclass   getsuperclass
if  superclass    null
return getruntime   getnil
return javaclass get getruntime    superclass
@jrubymethod name      required   1
public rubyfixnum op_cmp irubyobject other
if     other instanceof javaclass
throw getruntime   newtypeerror     other gettype
javaclass otherclass    javaclass  other
if  this javaclass      otherclass javaclass
return getruntime   newfixnum 0
if  otherclass javaclass   isassignablefrom this javaclass
return getruntime   newfixnum  1
return getruntime   newfixnum 1
@jrubymethod
public rubyarray java_instance_methods
return java_methods javaclass   getmethods    false
@jrubymethod
public rubyarray declared_instance_methods
return java_methods javaclass   getdeclaredmethods    false
private rubyarray java_methods method methods  boolean isstatic
rubyarray result   getruntime   newarray methods length
for  int i   0  i < methods length  i
method method   methods
if  isstatic    modifier isstatic method getmodifiers
result append javamethod create getruntime    method
return result
@jrubymethod
public rubyarray java_class_methods
return java_methods javaclass   getmethods    true
@jrubymethod
public rubyarray declared_class_methods
return java_methods javaclass   getdeclaredmethods    true
@jrubymethod required   1  rest   true
public javamethod java_method irubyobject args  throws classnotfoundexception
string methodname   args asjavastring
class<?> argumenttypes   buildargumenttypes args
return javamethod create getruntime    javaclass    methodname  argumenttypes
@jrubymethod required   1  rest   true
public javamethod declared_method irubyobject args  throws classnotfoundexception
string methodname   args asjavastring
class<?> argumenttypes   buildargumenttypes args
return javamethod createdeclared getruntime    javaclass    methodname  argumenttypes
@jrubymethod required   1  rest   true
public javacallable declared_method_smart irubyobject args  throws classnotfoundexception
string methodname   args asjavastring
class<?> argumenttypes   buildargumenttypes args
javacallable callable   getmatchingcallable getruntime    javaclass    methodname  argumenttypes
if  callable    null  return callable
throw getruntime   newnameerror     methodname       javaclass   getname
methodname
public static javacallable getmatchingcallable ruby runtime  class<?> javaclass  string methodname  class<?> argumenttypes
if    equals methodname
return javaconstructor getmatchingconstructor runtime  javaclass  argumenttypes
else
// fixme: do we really want 'declared' methods?  includes private/protected, and does _not_
// include superclass methods
return javamethod getmatchingdeclaredmethod runtime  javaclass  methodname  argumenttypes
private class<?> buildargumenttypes irubyobject args  throws classnotfoundexception
if  args length < 1
throw getruntime   newargumenterror args length  1
class<?> argumenttypes   new class
for  int i   1  i < args length  i
javaclass type
if  args instanceof javaclass
type    javaclass args
else if  args respondsto
type    javaclass args callmethod getruntime   getcurrentcontext
else
type   for_name this  args
argumenttypes   type javaclass
return argumenttypes
@jrubymethod
public rubyarray constructors
rubyarray ctors
if   ctors   constructors     null  return ctors
return constructors   buildconstructors javaclass   getconstructors
@jrubymethod
public rubyarray classes
return javaclass getrubyarray getruntime    javaclass   getclasses
@jrubymethod
public rubyarray declared_classes
ruby runtime   getruntime
rubyarray result   runtime newarray
class<?> javaclass   javaclass
try
class<?> classes   javaclass getdeclaredclasses
for  int i   0  i < classes length  i
if  modifier ispublic classes getmodifiers
result append get runtime  classes
catch  securityexception e
// restrictive security policy; no matter, we only want public
// classes anyway
try
class<?> classes   javaclass getclasses
for  int i   0  i < classes length  i
if  javaclass    classes getdeclaringclass
result append get runtime  classes
catch  securityexception e2
// very restrictive policy (disallows member.public)
// we'd never actually get this far in that case
return result
@jrubymethod
public rubyarray declared_constructors
return buildconstructors javaclass   getdeclaredconstructors
private rubyarray buildconstructors constructor<?> constructors
rubyarray result   getruntime   newarray constructors length
for  int i   0  i < constructors length  i
result append new javaconstructor getruntime    constructors
return result
@jrubymethod rest   true
public javaconstructor constructor irubyobject args
try
class<?> parametertypes   buildclassargs args
constructor<?> constructor   javaclass   getconstructor parametertypes
return new javaconstructor getruntime    constructor
catch  nosuchmethodexception nsme
throw getruntime   newnameerror    null
@jrubymethod rest   true
public javaconstructor declared_constructor irubyobject args
try
class<?> parametertypes   buildclassargs args
constructor<?> constructor   javaclass   getdeclaredconstructor  parametertypes
return new javaconstructor getruntime    constructor
catch  nosuchmethodexception nsme
throw getruntime   newnameerror    null
private class<?> buildclassargs irubyobject args
javasupport javasupport   getruntime   getjavasupport
class<?> parametertypes   new class<?>
for  int i   args length    i >  0
string name   args asjavastring
parametertypes   javasupport loadjavaclassverbose name
return parametertypes
@jrubymethod
public javaclass array_class
return javaclass get getruntime    array newinstance javaclass    0  getclass
@jrubymethod required   1
public javaobject new_array irubyobject lengthargument
if  lengthargument instanceof rubyinteger
// one-dimensional array
int length    int    rubyinteger  lengthargument  getlongvalue
return new javaarray getruntime    array newinstance javaclass    length
else if  lengthargument instanceof rubyarray
// n-dimensional array
list list     rubyarray lengthargument  getlist
int length   list size
if  length    0
throw getruntime   newargumenterror
int dimensions   new int
for  int i   length    i >  0
irubyobject dimensionlength    irubyobject list get i
if     dimensionlength instanceof rubyinteger
throw getruntime
newtypeerror dimensionlength  getruntime   getinteger
dimensions    int    rubyinteger  dimensionlength  getlongvalue
return new javaarray getruntime    array newinstance javaclass    dimensions
else
throw getruntime   newargumenterror
@jrubymethod
public rubyarray fields
return buildfieldresults javaclass   getfields
@jrubymethod
public rubyarray declared_fields
return buildfieldresults javaclass   getdeclaredfields
private rubyarray buildfieldresults field fields
rubyarray result   getruntime   newarray fields length
for  int i   0  i < fields length  i
result append new javafield getruntime    fields
return result
@jrubymethod required   1
public javafield field irubyobject name
string stringname   name asjavastring
try
field field   javaclass   getfield stringname
return new javafield getruntime    field
catch  nosuchfieldexception nsfe
throw undefinedfielderror stringname
@jrubymethod required   1
public javafield declared_field irubyobject name
string stringname   name asjavastring
try
field field   javaclass   getdeclaredfield stringname
return new javafield getruntime    field
catch  nosuchfieldexception nsfe
throw undefinedfielderror stringname
private raiseexception undefinedfielderror string name
return getruntime   newnameerror     name       javaclass   getname        name
@jrubymethod
public rubyarray interfaces
return javaclass getrubyarray getruntime    javaclass   getinterfaces
@jrubymethod name
public rubyboolean primitive_p
return getruntime   newboolean isprimitive
@jrubymethod name      required   1
public rubyboolean assignable_from_p irubyobject other
if     other instanceof javaclass
throw getruntime   newtypeerror     other gettype
class<?> otherclass     javaclass  other  javaclass
return assignable javaclass    otherclass  ? getruntime   gettrue     getruntime   getfalse
static boolean assignable class<?> thisclass  class<?> otherclass
if  thisclass isprimitive      otherclass    void type
thisclass isassignablefrom otherclass
return true
otherclass   javautil primitivetowrapper otherclass
thisclass   javautil primitivetowrapper thisclass
if thisclass isassignablefrom otherclass
return true
if number class isassignablefrom thisclass
if number class isassignablefrom otherclass
return true
if otherclass equals character class
return true
if thisclass equals character class
if number class isassignablefrom otherclass
return true
return false
private boolean isprimitive
return javaclass   isprimitive
@jrubymethod
public javaclass component_type
if    javaclass   isarray
throw getruntime   newtypeerror
return javaclass get getruntime    javaclass   getcomponenttype