/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2006 tim azzopardi <tim@tigerfive.com>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby environment
import java io bufferedreader
import java io ioexception
import java util hashmap
import java util iterator
import java util map
import java util set
import org jruby ruby
import org jruby common irubywarnings id
public class osenvironment
/**
* handles exceptions from implementors of {@link iosenvironmentreader},
* converting the exception to a {@link osenvironmentreaderexcepton}
* @param e
*/
void handleexception exception e
throw  osenvironmentreaderexcepton
new osenvironmentreaderexcepton   initcause e
/**
* returns the os environment variables as a map<rubystring,rubystring>.
* if the java system  property "jruby.env.method" is set then
*   the value is used as the classname of a class than implements the iosenvironmentreader
*   interface and the environment is obtained via this class.
* if the "jruby.env.method" is "org.jruby.environment.osenvironmentreaderfromfile" then
*   the java system property "jruby.envfile" should give the location of a file from which
*   the environment variables can be loaded.
* otherwise, other default implementations of  iosenvironmentreader are tried
* to obtain the os environment variables.
* @param runtime
* @param system.getproperty("jruby.env.method")
* @throws osenvironmentreaderexcepton
*/
public map getenvironmentvariablemap ruby runtime
map envs   null
if  runtime getinstanceconfig   getenvironment      null
return getasmapofrubystrings runtime  runtime getinstanceconfig   getenvironment   entryset
// fall back on empty env when security disallows environment var access (like in an applet)
if  ruby issecurityrestricted
envs   new hashmap
else
string jrubyenvmethod   system getproperty
iosenvironmentreader reader
if  jrubyenvmethod    null    jrubyenvmethod length   < 1
// try to get environment from java5 system.getenv()
reader   getaccessibleosenvironment runtime  osenvironmentreaderfromjava5systemgetenv class getname
// not java5 so try getting environment using runtime exec
if  reader    null
reader   getaccessibleosenvironment runtime  osenvironmentreaderfromruntimeexec class getname
//runtime.getwarnings().warn("getting environment variables using runtime exec");
else
//runtime.getwarnings().warn("getting environment variables using java5 system.getenv()");
else
// get environment from jruby command line property supplied class
runtime getwarnings   warn id env_vars_from_cli_method      jrubyenvmethod  jrubyenvmethod
reader   getaccessibleosenvironment runtime  jrubyenvmethod
envs   null
if  reader    null
map variables   null
variables   reader getvariables runtime
envs   getasmapofrubystrings runtime   variables entryset
return envs
/**
* returns java system properties as a map<rubystring,rubystring>.
* @param runtime
* @return the java system properties as a map<rubystring,rubystring>.
*/
public map getsystempropertiesmap ruby runtime
if  ruby issecurityrestricted
return new hashmap
else
return getasmapofrubystrings runtime  system getproperties   entryset
private static iosenvironmentreader getaccessibleosenvironment ruby runtime  string classname
iosenvironmentreader osenvironment   null
try
osenvironment    iosenvironmentreader class forname classname  newinstance
catch  exception e
// this should only happen for a command line supplied iosenvironmentreader implementation
runtime getwarnings   warn id miscellaneous  e getmessage
if  osenvironment    null    osenvironment isaccessible runtime
return osenvironment
return null
private static map getasmapofrubystrings ruby runtime  set entryset
map envs   new hashmap
for  iterator iter   entryset iterator    iter hasnext
map entry entry     map entry  iter next
envs put runtime newstring entry getkey   tostring    runtime newstring entry getvalue   tostring
return envs
/**
* returns a map of the variables found in the reader of form var=value
* @param reader
* @return map<string,string> of variables found by reading lines from reader.
*/
map getvariablesfrom bufferedreader reader
map envs   new hashmap
try
string line  envvarname  envvarvalue
int equalspos
while   line   reader readline       null
equalspos   line indexof
if  equalspos >  1
envvarname   line substring 0  equalspos
envvarvalue   line substring equalspos   1
envs put envvarname  envvarvalue
catch  ioexception e
envs   null
handleexception e
finally
try
reader close
catch  ioexception e
envs   null
handleexception e
return envs