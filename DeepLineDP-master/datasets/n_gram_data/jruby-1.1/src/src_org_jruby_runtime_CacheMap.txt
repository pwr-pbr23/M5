/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2005 thomas e. enebo <enebo@acm.org>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby runtime
import java util weakhashmap
import java util iterator
import java util map
import java util set
import org jruby util collections weakhashset
import org jruby internal runtime methods dynamicmethod
import org jruby rubymodule
/**
* this class represents mappings between methods that have been cached and the classes which
* have cached them.  methods within rubymodule will update this cachemap as needed.  here is
* a list of scenarios when cached methods will become invalid:
*
*  1. redefine a method in a base class
*  2. add an alias in a superclass that is the same name as a cached method in a base class
*  3. include a module that has a same-named method as one already caches in a base class
*  4. remove a method definition
*  5. add a same-named method in super class that has been cached in a super class
*
* concurrency is another concern with managing this structure.  rather than synchronize this
* we are going to rely on synchronization further upstream.  rubymodule methods that directly
* call this is responsible for synchronization.
*/
public class cachemap
public interface cachesite
public void removecachedmethod
private final map<dynamicmethod  set<cachesite>> mappings   new weakhashmap<dynamicmethod  set<cachesite>>
/**
* add another class to the list of classes which are caching the method.
*
* @param method which is cached
* @param module which is caching method
*/
public synchronized void add dynamicmethod method  cachesite site
set<cachesite> sitelist   mappings get method
if  sitelist    null
sitelist   new weakhashset<cachesite>
mappings put method  sitelist
sitelist add site
/**
* remove all method caches associated with the provided method.
*
* @param method to remove all caches of
*/
public synchronized void remove dynamicmethod method
set<cachesite> sitelist   mappings remove method
// removed method has never been used so it has not been cached
if  sitelist    null
return
for iterator<cachesite> iter   sitelist iterator    iter hasnext
cachesite site   iter next
if  site    null
site removecachedmethod
/**
* remove method caches for all methods in a module
*/
public synchronized void moduleincluded rubymodule targetmodule  rubymodule includedmodule
for  string methodname   includedmodule getmethods   keyset
for rubymodule current   targetmodule  current    null  current   current getsuperclass
if  current    includedmodule  continue
dynamicmethod method   current getmethods   get methodname
if  method    null
set<cachesite> adapters   mappings remove method
if  adapters    null
for cachesite adapter   adapters
adapter removecachedmethod