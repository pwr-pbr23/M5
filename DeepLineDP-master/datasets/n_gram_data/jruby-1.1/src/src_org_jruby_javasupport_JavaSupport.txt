/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2001-2004 jan arne petersen <jpetersen@uni-bonn.de>
* copyright (c) 2002 benoit cerrina <b.cerrina@wanadoo.fr>
* copyright (c) 2002-2004 anders bengtsson <ndrsbngtssn@yahoo.se>
* copyright (c) 2004 thomas e enebo <enebo@acm.org>
* copyright (c) 2004 stefan matthias aust <sma@3plus4.de>
* copyright (c) 2005 charles o nutter <headius@headius.com>
* copyright (c) 2007 william n dortch <bill.dortch@gmail.com>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby javasupport
import java util collections
import java util hashmap
import java util map
import java util concurrent concurrenthashmap
import org jruby ruby
import org jruby rubyclass
import org jruby rubymodule
import org jruby rubyproc
import org jruby exceptions raiseexception
import org jruby javasupport util objectproxycache
import org jruby runtime builtin irubyobject
import org jruby runtime callback callback
public class javasupport
private static final map<string class> primitive_classes   new hashmap<string class>
static
primitive_classes put    boolean type
primitive_classes put    byte type
primitive_classes put    character type
primitive_classes put    short type
primitive_classes put    integer type
primitive_classes put    long type
primitive_classes put    float type
primitive_classes put    double type
public static class getprimitiveclass string primitivetype
return primitive_classes get primitivetype
private final ruby runtime
private final map<string  rubyproc> exceptionhandlers   new hashmap<string  rubyproc>
private final objectproxycache<irubyobject rubyclass> objectproxycache
// todo: specifying soft refs, may want to compare memory consumption,
// behavior with weak refs (specify weak in place of soft below)
new objectproxycache<irubyobject rubyclass> objectproxycache referencetype weak
public irubyobject allocateproxy object javaobject  rubyclass clazz
irubyobject proxy   clazz allocate
proxy getinstancevariables   fastsetinstancevariable
javaobject wrap clazz getruntime    javaobject
return proxy
// there's not a compelling reason to keep javaclass instances in a weak map
// (any proxies created are [were] kept in a non-weak map, so in most cases they will
// stick around anyway), and some good reasons not to (javaclass creation is
// expensive, for one; many lookups are performed when passing parameters to/from
// methods; etc.).
// todo: faster custom concurrent map
private final concurrenthashmap<class javaclass> javaclasscache
new concurrenthashmap<class  javaclass> 128
// fixme: needs to be rethought
private final map matchcache   collections synchronizedmap new hashmap 128
private callback concreteproxycallback
private rubymodule javamodule
private rubymodule javautilitiesmodule
private rubyclass javaobjectclass
private rubyclass javaclassclass
private rubyclass javaarrayclass
private rubyclass javaproxyclass
private rubymodule javainterfacetemplate
private rubymodule packagemoduletemplate
private rubyclass arrayproxyclass
private rubyclass concreteproxyclass
public javasupport ruby ruby
this runtime   ruby
final synchronized void setconcreteproxycallback callback concreteproxycallback
if  this concreteproxycallback    null
this concreteproxycallback   concreteproxycallback
final callback getconcreteproxycallback
return concreteproxycallback
final map getmatchcache
return matchcache
private class loadjavaclass string classname  throws classnotfoundexception
class primitiveclass
if   primitiveclass   primitive_classes get classname      null
if   ruby issecurityrestricted
return class forname classname  true  runtime getjrubyclassloader
return class forname classname
return primitiveclass
public class loadjavaclassverbose string classname
try
return loadjavaclass classname
catch  classnotfoundexception cnfexcptn
throw runtime newnameerror     classname  classname  cnfexcptn
catch  exceptionininitializererror eiie
throw runtime newnameerror     classname  classname  eiie
catch  linkageerror le
throw runtime newnameerror     classname  classname  le
catch  securityexception se
throw runtime newnameerror     classname  classname  se
public class loadjavaclassquiet string classname
try
return loadjavaclass classname
catch  classnotfoundexception cnfexcptn
throw runtime newnameerror     classname  classname  cnfexcptn  false
catch  exceptionininitializererror eiie
throw runtime newnameerror     classname  classname  eiie  false
catch  linkageerror le
throw runtime newnameerror     classname  classname  le  false
catch  securityexception se
throw runtime newnameerror     classname  classname  se  false
public javaclass getjavaclassfromcache class clazz
return javaclasscache get clazz
public void putjavaclassintocache javaclass clazz
javaclasscache put clazz javaclass    clazz
public void defineexceptionhandler string exceptionclass  rubyproc handler
exceptionhandlers put exceptionclass  handler
public void handlenativeexception throwable exception
if  exception instanceof raiseexception
throw  raiseexception  exception
class excptnclass   exception getclass
rubyproc handler   exceptionhandlers get excptnclass getname
while  handler    null
excptnclass    throwable class
excptnclass   excptnclass getsuperclass
if  handler    null
handler call runtime getcurrentcontext    new irubyobject javautil convertjavatoruby runtime  exception
else
throw createraiseexception exception
private raiseexception createraiseexception throwable exception
raiseexception re   raiseexception createnativeraiseexception runtime  exception
return re
public objectproxycache<irubyobject rubyclass> getobjectproxycache
return objectproxycache
// not synchronizing these methods, no harm if these values get set twice...
public rubymodule getjavamodule
if  javamodule    null
javamodule   runtime fastgetmodule
return javamodule
public rubymodule getjavautilitiesmodule
if  javautilitiesmodule    null
javautilitiesmodule   runtime fastgetmodule
return javautilitiesmodule
public rubyclass getjavaobjectclass
if  javaobjectclass    null
javaobjectclass   getjavamodule   fastgetclass
return javaobjectclass
public rubyclass getjavaarrayclass
if  javaarrayclass    null
javaarrayclass   getjavamodule   fastgetclass
return javaarrayclass
public rubyclass getjavaclassclass
if javaclassclass    null
javaclassclass   getjavamodule   fastgetclass
return javaclassclass
public rubymodule getjavainterfacetemplate
if  javainterfacetemplate    null
javainterfacetemplate   runtime fastgetmodule
return javainterfacetemplate
public rubymodule getpackagemoduletemplate
if  packagemoduletemplate    null
packagemoduletemplate   runtime fastgetmodule
return packagemoduletemplate
public rubyclass getjavaproxyclass
if  javaproxyclass    null
javaproxyclass   runtime fastgetclass
return javaproxyclass
public rubyclass getconcreteproxyclass
if  concreteproxyclass    null
concreteproxyclass   runtime fastgetclass
return concreteproxyclass
public rubyclass getarrayproxyclass
if  arrayproxyclass    null
arrayproxyclass   runtime fastgetclass
return arrayproxyclass