/*
***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2002 anders bengtsson <ndrsbngtssn@yahoo.se>
* copyright (c) 2002 jan arne petersen <jpetersen@uni-bonn.de>
* copyright (c) 2002 benoit cerrina <b.cerrina@wanadoo.fr>
* copyright (c) 2004-2006 thomas e enebo <enebo@acm.org>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby ast
import java util list
import org jruby ast types inamenode
import org jruby ast visitor nodevisitor
import org jruby evaluator instruction
import org jruby lexer yacc isourceposition
/**
* access a local variable
*/
public class localvarnode extends node implements inamenode
// the name of the variable
private string name
// a scoped location of this variable (high 16 bits is how many scopes down and low 16 bits
// is what index in the right scope to set the value.
private final int location
public localvarnode isourceposition position  int location  string name
super position  nodetype localvarnode
this location   location
this name   name
/**
* accept for the visitor pattern.
* @param ivisitor the visitor
**/
public instruction accept nodevisitor ivisitor
return ivisitor visitlocalvarnode this
/**
* how many scopes should we burrow down to until we need to set the block variable value.
*
* @return 0 for current scope, 1 for one down, ...
*/
public int getdepth
return location >> 16
/**
* gets the index within the scope construct that actually holds the eval'd value
* of this local variable
*
* @return returns an int offset into storage structure
*/
public int getindex
return location   0xffff
/**
* what is the name of this variable
*
* @return the name of the variable
*/
public string getname
return name
/**
* set the name of this variable (for refactoring support)
* @param name the new name
*/
public void setname string name
this name   name
public list<node> childnodes
return empty_list