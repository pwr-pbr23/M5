package org jruby javasupport
/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2006 thomas e enebo <enebo@acm.org>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
import java util list
import org jruby ruby
import org jruby rubyarray
import org jruby rubyinstanceconfig
import org jruby rubyinteger
import org jruby rubymodule
import org jruby rubyobjectadapter
import org jruby rubyruntimeadapter
import org jruby rubystring
import org jruby runtime block
import org jruby runtime threadcontext
import org jruby runtime builtin irubyobject
import org jruby util classcache
/**
* utility functions to help embedders out.   these function consolidate logic that is
* used between bsf and jsr 223.  people who are embedding jruby 'raw' should use these
* as well.  if at a later date, we discover a flaw or change how we do things, this
* utility class should provide some insulation.
*/
public class javaembedutils
/**
* get an instance of a jruby runtime.  provide any loadpaths you want used at startup.
*
* @param loadpaths to specify where to look for ruby modules.
* @return an instance
*/
public static ruby initialize list loadpaths
return initialize loadpaths  new rubyinstanceconfig
/**
* get an instance of a jruby runtime.  provide any loadpaths you want used at startup.
*
* @param loadpaths to specify where to look for ruby modules.
* @param classcache to use as a common repository for cached classes
* @return an instance
*/
public static ruby initialize list loadpaths  classcache classcache
rubyinstanceconfig config   new rubyinstanceconfig
if  classcache    null
config setclasscache classcache
return initialize loadpaths  config
/**
* get an instance of a jruby runtime.
* @param loadpaths additional load paths you wish to add
* @param config a runtime configuration instance
* @return an instance
*/
public static ruby initialize list loadpaths  rubyinstanceconfig config
ruby runtime   ruby newinstance config
runtime getloadservice   init loadpaths
runtime getloadservice   require
return runtime
/**
* generate a class cache.  this will end up setting max cache size per jruby preferences
* (e.g. jruby.jit.max).
*
* @param loader use the provided classloader to create the cache
* @return
*/
public static classcache createclasscache classloader loader
return new classcache loader  new rubyinstanceconfig   getjitmax
public static rubyobjectadapter newobjectadapter
return new rubyobjectadapter
public boolean iskindof irubyobject value  rubymodule rubymodule
return rubymodule isinstance value
public irubyobject setinstancevariable irubyobject obj  string variablename  irubyobject value
return obj getinstancevariables   setinstancevariable variablename  value
public irubyobject converttojavaarray irubyobject array
return   rubyarray  array  tojavaarray
public rubyinteger converttorubyinteger irubyobject obj
return obj converttointeger
public irubyobject getinstancevariable irubyobject obj  string variablename
return obj getinstancevariables   getinstancevariable variablename
public rubystring converttorubystring irubyobject obj
return obj converttostring
public irubyobject callmethod irubyobject receiver  string methodname
return receiver callmethod receiver getruntime   getcurrentcontext    methodname
public irubyobject callmethod irubyobject receiver  string methodname  irubyobject singlearg
return receiver callmethod receiver getruntime   getcurrentcontext    methodname  singlearg
public irubyobject callmethod irubyobject receiver  string methodname  irubyobject args
return receiver callmethod receiver getruntime   getcurrentcontext    methodname  args
public irubyobject callmethod irubyobject receiver  string methodname  irubyobject args  block block
return receiver callmethod receiver getruntime   getcurrentcontext    methodname  args  block
public irubyobject callsuper irubyobject receiver  irubyobject args
return receiver callsuper receiver getruntime   getcurrentcontext    args  block null_block
public irubyobject callsuper irubyobject receiver  irubyobject args  block block
return receiver callsuper receiver getruntime   getcurrentcontext    args  block
public static rubyruntimeadapter newruntimeadapter
return new rubyruntimeadapter
public irubyobject eval ruby runtime  string script
return runtime evalscriptlet script
/**
* dispose of the runtime you initialized.
*
* @param runtime to be disposed of
*/
public static void terminate ruby runtime
runtime teardown
/**
* convenience function for embedders
*
* @param runtime environment where the invoke will occur
* @param receiver is the instance that will receive the method call
* @param method is method to be called
* @param args are the arguments to the method
* @param returntype is the type we want it to conform to
* @return the result of the invocation.
*/
public static object invokemethod ruby runtime  object receiver  string method  object args
class returntype
irubyobject rubyreceiver   receiver    null ? javautil convertjavatoruby runtime  receiver    runtime gettopself
irubyobject rubyargs   javautil convertjavaarraytoruby runtime  args
// create ruby proxies for any input arguments that are not primitives.
for  int i   0  i < rubyargs length  i
irubyobject obj   rubyargs
if  obj instanceof javaobject  rubyargs   java wrap runtime  obj
irubyobject result   rubyreceiver callmethod runtime getcurrentcontext    method  rubyargs
return rubytojava runtime  result  returntype
/**
* convert a ruby object to a java object.
*
*/
public static object rubytojava ruby runtime  irubyobject value  class type
return javautil convertargument runtime  java ruby_to_java runtime getobject    value  block null_block   type
/**
*  convert a java object to a ruby object.
*/
public static irubyobject javatoruby ruby runtime  object value
if  value instanceof irubyobject  return  irubyobject  value
irubyobject result   javautil convertjavatoruby runtime  value
return result instanceof javaobject ? java wrap runtime  result    result
public static irubyobject javatoruby ruby runtime  boolean value
return javatoruby runtime  value ? boolean true   boolean false
public static irubyobject javatoruby ruby runtime  byte value
return javatoruby runtime  new byte value
public static irubyobject javatoruby ruby runtime  char value
return javatoruby runtime  new character value
public static irubyobject javatoruby ruby runtime  double value
return javatoruby runtime  new double value
public static irubyobject javatoruby ruby runtime  float value
return javatoruby runtime  new float value
public static irubyobject javatoruby ruby runtime  int value
return javatoruby runtime  new integer value
public static irubyobject javatoruby ruby runtime  long value
return javatoruby runtime  new long value
public static irubyobject javatoruby ruby runtime  short value
return javatoruby runtime  new short value