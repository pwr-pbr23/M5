/*
***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2002-2004 anders bengtsson <ndrsbngtssn@yahoo.se>
* copyright (c) 2001-2004 jan arne petersen <jpetersen@uni-bonn.de>
* copyright (c) 2002 benoit cerrina <b.cerrina@wanadoo.fr>
* copyright (c) 2004-2007 thomas e enebo <enebo@acm.org>
* copyright (c) 2004 stefan matthias aust <sma@3plus4.de>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby runtime
import org jruby ruby
import org jruby rubyarray
import org jruby rubymodule
import org jruby ast iternode
import org jruby ast multipleasgnnode
import org jruby ast node
import org jruby ast nodetype
import org jruby ast util argsutil
import org jruby common irubywarnings id
import org jruby evaluator assignmentvisitor
import org jruby evaluator astinterpreter
import org jruby exceptions jumpexception
import org jruby parser staticscope
import org jruby runtime builtin irubyobject
/**
*  internal live representation of a block ({...} or do ... end).
*/
public class interpretedblock extends blockbody
/**
* ast node representing the parameter (variable) list to the block.
*/
private final iternode iternode
protected final arity arity
public static block newinterpretedclosure threadcontext context  iternode iternode  irubyobject self
frame f   context getcurrentframe
return newinterpretedclosure iternode
self
arity procarityof iternode getvarnode
f
f getvisibility
context getrubyclass
context getcurrentscope
public static block newinterpretedclosure threadcontext context  interpretedblock body  irubyobject self
frame f   context getcurrentframe
binding binding   new binding self
f
f getvisibility
context getrubyclass
context getcurrentscope
return new block body  binding
public static block newinterpretedclosure iternode iternode  irubyobject self  arity arity  frame frame
visibility visibility  rubymodule klass  dynamicscope dynamicscope
nodetype argsnodeid   getargumenttypewackyhack iternode
return new block new interpretedblock iternode  arity  asargumenttype argsnodeid    new binding self  frame  visibility  klass  dynamicscope
public interpretedblock iternode iternode  int argumenttype
this iternode  arity procarityof iternode    null ? null   iternode getvarnode     argumenttype
public interpretedblock iternode iternode  arity arity  int argumenttype
super argumenttype
this iternode   iternode
this arity   arity
public irubyobject call threadcontext context  irubyobject args  binding binding  block type type
args   prepareargumentsforcall context  args  type
return yield context  context getruntime   newarraynocopy args   null  null  true  binding  type
protected void pre threadcontext context  rubymodule klass  binding binding
context preyieldspecificblock binding  iternode getscope    klass
protected void post threadcontext context  binding binding
context postyield binding
public irubyobject yield threadcontext context  irubyobject value  binding binding  block type type
return yield context  value  null  null  false  binding  type
/**
* yield to this block, usually passed to the current call.
*
* @param context represents the current thread-specific data
* @param value the value to yield, either a single value or an array of values
* @param self the current self
* @param klass
* @param avalue should value be arrayified or not?
* @return
*/
public irubyobject yield threadcontext context  irubyobject value  irubyobject self
rubymodule klass  boolean avalue  binding binding  block type type
if  klass    null
self   binding getself
binding getframe   setself self
visibility oldvis   binding getframe   getvisibility
pre context  klass  binding
try
if  iternode getvarnode      null
if  avalue
setupblockargs context  iternode getvarnode    value  self
else
setupblockarg context  iternode getvarnode    value  self
// this while loop is for restarting the block call in case a 'redo' fires.
while  true
try
return astinterpreter eval context getruntime    context  iternode getbodynode    self  block null_block
catch  jumpexception redojump rj
context pollthreadevents
// do nothing, allow loop to redo
catch  jumpexception breakjump bj
if  bj gettarget      null
bj settarget this
throw bj
catch  jumpexception nextjump nj
// a 'next' is like a local return from the block, ending this call or yield.
return type    block type lambda ? context getruntime   getnil      irubyobject nj getvalue
finally
binding getframe   setvisibility oldvis
post context  binding
private void setupblockargs threadcontext context  node varnode  irubyobject value  irubyobject self
ruby runtime   self getruntime
switch  varnode nodeid
case zeroargnode
break
case multipleasgnnode
value   assignmentvisitor multiassign runtime  context  self   multipleasgnnode varnode   rubyarray value  false
break
default
int length   arraylength value
switch  length
case 0
value   runtime getnil
break
case 1
value     rubyarray value  eltinternal 0
break
default
runtime getwarnings   warn id multiple_values_for_block      length
assignmentvisitor assign runtime  context  self  varnode  value  block null_block  false
private void setupblockarg threadcontext context  node varnode  irubyobject value  irubyobject self
ruby runtime   self getruntime
switch  varnode nodeid
case zeroargnode
return
case multipleasgnnode
value   assignmentvisitor multiassign runtime  context  self   multipleasgnnode varnode
argsutil converttorubyarray runtime  value    multipleasgnnode varnode  getheadnode      null   false
break
default
if  value    null
runtime getwarnings   warn id multiple_values_for_block
assignmentvisitor assign runtime  context  self  varnode  value  block null_block  false
protected int arraylength irubyobject node
return node instanceof rubyarray ?   rubyarray node  getlength     0
public staticscope getstaticscope
return iternode getscope
public block cloneblock binding binding
// we clone dynamic scope because this will be a new instance of a block.  any previously
// captured instances of this block may still be around and we do not want to start
// overwriting those values when we create a new one.
// enebo: once we make self, lastclass, and lastmethod immutable we can remove duplicate
binding   new binding binding getself    binding getframe   duplicate    binding getvisibility    binding getklass
binding getdynamicscope
return new block this  binding
public iternode getiternode
return iternode
/**
* what is the arity of this block?
*
* @return the arity
*/
public arity arity
return arity
/**
* is the current block a real yield'able block instead a null one
*
* @return true if this is a valid block or false otherwise
*/
public boolean isgiven
return true