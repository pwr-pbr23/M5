/*
***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2006 charles o nutter <headius@headius.com>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby compiler impl
import java io file
import java io fileoutputstream
import java io ioexception
import java io printstream
import java io printwriter
import java io unsupportedencodingexception
import java math biginteger
import java util arrays
import org jruby metaclass
import org jruby ruby
import org jruby rubyarray
import org jruby rubybignum
import org jruby rubyboolean
import org jruby rubyclass
import org jruby rubyexception
import org jruby rubyfixnum
import org jruby rubyfloat
import org jruby rubyhash
import org jruby rubyinstanceconfig
import org jruby rubymatchdata
import org jruby rubymodule
import org jruby rubyrange
import org jruby rubyregexp
import org jruby rubystring
import org jruby rubysymbol
import org jruby ast nodetype
import org jruby ast executable abstractscript
import org jruby ast util argsutil
import org jruby compiler astinspector
import org jruby compiler arraycallback
import org jruby compiler branchcallback
import org jruby compiler cachecompiler
import org jruby compiler compilercallback
import org jruby compiler invocationcompiler
import org jruby compiler methodcompiler
import org jruby compiler notcompilableexception
import org jruby compiler scriptcompiler
import org jruby compiler variablecompiler
import org jruby evaluator astinterpreter
import org jruby exceptions jumpexception
import org jruby exceptions raiseexception
import org jruby internal runtime globalvariables
import org jruby internal runtime methods callconfiguration
import org jruby internal runtime methods dynamicmethod
import org jruby javasupport util runtimehelpers
import org jruby lexer yacc isourceposition
import org jruby parser reoptions
import org jruby parser staticscope
import org jruby runtime arity
import org jruby runtime block
import org jruby runtime blockbody
import org jruby runtime callbackfactory
import org jruby runtime compiledblockcallback
import org jruby runtime dynamicscope
import org jruby runtime frame
import org jruby runtime threadcontext
import org jruby runtime visibility
import org jruby runtime builtin irubyobject
import org jruby runtime builtin instancevariables
import org jruby util bytelist
import static org jruby util codegenutils
import org jruby util jrubyclassloader
import org jruby util javanamemangler
import org objectweb asm classreader
import org objectweb asm classvisitor
import org objectweb asm classwriter
import org objectweb asm label
import org objectweb asm opcodes
import org objectweb asm util checkclassadapter
/**
*
* @author headius
*/
public class standardasmcompiler implements scriptcompiler  opcodes
private static final string threadcontext   p threadcontext class
private static final string ruby   p ruby class
private static final string irubyobject   p irubyobject class
private static final string method_signature   sig irubyobject class  new class threadcontext class  irubyobject class  irubyobject class  block class
private static final string closure_signature   sig irubyobject class  new class threadcontext class  irubyobject class  irubyobject class
public static final int this   0
public static final int threadcontext_index   1
public static final int self_index   2
public static final int args_index   3
public static final int closure_index   4
public static final int dynamic_scope_index   5
public static final int runtime_index   6
public static final int vars_array_index   7
public static final int nil_index   8
public static final int exception_index   9
public static final int previous_exception_index   10
public static final int first_temp_index   11
private string classname
private string sourcename
private classwriter classwriter
private skinnymethodadapter initmethod
private skinnymethodadapter clinitmethod
int methodindex    1
int innerindex    1
int fieldindex   0
int rescuenumber   1
int ensurenumber   1
staticscope toplevelscope
cachecompiler cachecompiler
/** creates a new instance of standardcompilercontext */
public standardasmcompiler string classname  string sourcename
this classname   classname
this sourcename   sourcename
public byte getclassbytearray
return classwriter tobytearray
public class<?> loadclass jrubyclassloader classloader  throws classnotfoundexception
classloader defineclass c classname   classwriter tobytearray
return classloader loadclass c classname
public void writeclass file destination  throws ioexception
writeclass classname  destination  classwriter
private void writeclass string classname  file destination  classwriter writer  throws ioexception
string fullname   classname
string filename   null
string path   null
// verify the class
byte bytecode   writer tobytearray
checkclassadapter verify new classreader bytecode   false  new printwriter system err
if  fullname lastindexof        1
filename   fullname
path
else
filename   fullname substring fullname lastindexof      1
path   fullname substring 0  fullname lastindexof
// create dir if necessary
file pathfile   new file destination  path
pathfile mkdirs
fileoutputstream out   new fileoutputstream new file pathfile  filename
out write bytecode
out close
public string getclassname
return classname
public string getsourcename
return sourcename
public classvisitor getclassvisitor
return classwriter
static boolean use_inherited_cache_fields   true
public void startscript staticscope scope
classwriter   new classwriter classwriter compute_maxs
// create the class with the appropriate class name and source file
classwriter visit v1_4  acc_public   acc_super  classname  null  p abstractscript class   null
classwriter visitsource sourcename  null
toplevelscope   scope
begininit
beginclassinit
cachecompiler   new inheritedcachecompiler this
public void endscript boolean generaterun  boolean generateload  boolean generatemain
// add script#run impl, used for running this script with a specified threadcontext and self
// root method of a script is always in __file__ method
string methodname
if  generaterun
skinnymethodadapter method   new skinnymethodadapter getclassvisitor   visitmethod acc_public     method_signature  null  null
method start
// invoke __file__ with threadcontext, self, args (null), and block (null)
method aload this
method aload threadcontext_index
method aload self_index
method aload args_index
method aload closure_index
method invokevirtual classname  methodname  method_signature
method areturn
method end
if  generateload    generatemain
// the load method is used for loading as a top-level script, and prepares appropriate scoping around the code
skinnymethodadapter method   new skinnymethodadapter getclassvisitor   visitmethod acc_public     method_signature  null  null
method start
// invoke __file__ with threadcontext, self, args (null), and block (null)
label trybegin   new label
label tryfinally   new label
method label trybegin
method aload threadcontext_index
buildstaticscopenames method  toplevelscope
method invokestatic p runtimehelpers class      sig void class  threadcontext class  string class
method aload this
method aload threadcontext_index
method aload self_index
method aload args_index
method aload closure_index
method invokevirtual classname  methodname  method_signature
method aload threadcontext_index
method invokestatic p runtimehelpers class      sig void class  threadcontext class
method areturn
method label tryfinally
method aload threadcontext_index
method invokestatic p runtimehelpers class      sig void class  threadcontext class
method athrow
method trycatch trybegin  tryfinally  tryfinally  null
method end
if  generatemain
// add main impl, used for detached or command-line execution of this script with a new runtime
// root method of a script is always in stub0, method0
skinnymethodadapter method   new skinnymethodadapter getclassvisitor   visitmethod acc_public   acc_static     sig void type  params string class    null  null
method start
// new instance to invoke run against
method newobj classname
method dup
method invokespecial classname     sig void type
// instance config for the script run
method newobj p rubyinstanceconfig class
method dup
method invokespecial p rubyinstanceconfig class
// set argv from main's args
method dup
method aload 0
method invokevirtual p rubyinstanceconfig class      sig void class  string class
// invoke run with threadcontext and topself
method invokestatic p ruby class      sig ruby class  rubyinstanceconfig class
method dup
method invokevirtual ruby     sig threadcontext class
method swap
method invokevirtual ruby     sig irubyobject class
method getstatic p irubyobject class      ci irubyobject class
method getstatic p block class      ci block class
method invokevirtual classname     method_signature
method voidreturn
method end
endinit
endclassinit
public void buildstaticscopenames skinnymethodadapter method  staticscope scope
// construct static scope list of names
method ldc new integer scope getnumberofvariables
method anewarray p string class
for  int i   0  i < scope getnumberofvariables    i
method dup
method ldc new integer i
method ldc scope getvariables
method arraystore
private void begininit
classvisitor cv   getclassvisitor
initmethod   new skinnymethodadapter cv visitmethod acc_public     sig void type   null  null
initmethod start
initmethod aload this
if  use_inherited_cache_fields
initmethod invokespecial p abstractscript class      sig void type
else
initmethod invokespecial p object class      sig void type
cv visitfield acc_private   acc_final     ci class class   null  null
// fixme: this really ought to be in clinit, but it doesn't matter much
initmethod aload this
initmethod ldc c classname
initmethod invokestatic p class class      sig class class  params string class
initmethod putfield classname     ci class class
private void endinit
initmethod voidreturn
initmethod end
private void beginclassinit
classvisitor cv   getclassvisitor
clinitmethod   new skinnymethodadapter cv visitmethod acc_public   acc_static     sig void type   null  null
clinitmethod start
private void endclassinit
clinitmethod voidreturn
clinitmethod end
public skinnymethodadapter getinitmethod
return initmethod
public skinnymethodadapter getclassinitmethod
return clinitmethod
public cachecompiler getcachecompiler
return cachecompiler
public methodcompiler startmethod string friendlyname  compilercallback args  staticscope scope  astinspector inspector
asmmethodcompiler methodcompiler   new asmmethodcompiler friendlyname  inspector
methodcompiler beginmethod args  scope
return methodcompiler
public abstract class abstractmethodcompiler implements methodcompiler
protected skinnymethodadapter method
protected variablecompiler variablecompiler
protected invocationcompiler invocationcompiler
protected label currentlooplabels
protected label scopestart
protected label scopeend
protected label redojump
protected boolean withinprotection   false
private int lastline    1
public abstract void beginmethod compilercallback args  staticscope scope
public abstract void endmethod
public methodcompiler chaintomethod string methodname  astinspector inspector
// chain to the next segment of this giant method
method aload this
loadthreadcontext
loadself
method aload args_index
if this instanceof asmclosurecompiler
pushnull
else
loadblock
method invokevirtual classname  methodname  sig irubyobject class  new class threadcontext class  irubyobject class  irubyobject class  block class
endmethod
asmmethodcompiler methodcompiler   new asmmethodcompiler methodname  inspector
methodcompiler beginchainedmethod
return methodcompiler
public standardasmcompiler getscriptcompiler
return standardasmcompiler this
public void linenumber isourceposition position
int thisline   position getstartline
// no point in updating number if last number was same value.
if  thisline    lastline
lastline   thisline
else
return
label line   new label
method label line
method visitlinenumber thisline   1  line
public void loadthreadcontext
method aload threadcontext_index
public void loadself
method aload self_index
public void loadruntime
method aload runtime_index
public void loadblock
method aload closure_index
public void loadnil
method aload nil_index
public void loadnull
method aconst_null
public void loadsymbol string symbol
loadruntime
method ldc symbol
invokeiruby    sig rubysymbol class  params string class
public void loadobject
loadruntime
invokeiruby    sig rubyclass class  params
/**
* this is for utility methods used by the compiler, to reduce the amount of code generation
* necessary.  all of these live in compilerhelpers.
*/
public void invokeutilitymethod string methodname  string signature
method invokestatic p runtimehelpers class   methodname  signature
public void invokethreadcontext string methodname  string signature
method invokevirtual threadcontext  methodname  signature
public void invokeiruby string methodname  string signature
method invokevirtual ruby  methodname  signature
public void invokeirubyobject string methodname  string signature
method invokeinterface irubyobject  methodname  signature
public void consumecurrentvalue
method pop
public void duplicatecurrentvalue
method dup
public void swapvalues
method swap
public void retrieveself
loadself
public void retrieveselfclass
loadself
metaclass
public variablecompiler getvariablecompiler
return variablecompiler
public invocationcompiler getinvocationcompiler
return invocationcompiler
public void assignconstantincurrent string name
loadthreadcontext
method ldc name
method dup2_x1
method pop2
invokethreadcontext    sig irubyobject class  params string class  irubyobject class
public void assignconstantinmodule string name
method ldc name
loadthreadcontext
invokeutilitymethod    sig irubyobject class  irubyobject class  irubyobject class  string class  threadcontext class
public void assignconstantinobject string name
// load object under value
loadruntime
invokeiruby    sig rubyclass class  params
method swap
assignconstantinmodule name
public void retrieveconstant string name
loadthreadcontext
method ldc name
invokethreadcontext    sig irubyobject class  params string class
public void retrieveconstantfrommodule string name
method visittypeinsn checkcast  p rubymodule class
method ldc name
method invokevirtual p rubymodule class      sig irubyobject class  params string class
public void retrieveclassvariable string name
loadthreadcontext
loadruntime
loadself
method ldc name
invokeutilitymethod    sig irubyobject class  params threadcontext class  ruby class  irubyobject class  string class
public void assignclassvariable string name
loadthreadcontext
method swap
loadruntime
method swap
loadself
method swap
method ldc name
method swap
invokeutilitymethod    sig irubyobject class  params threadcontext class  ruby class  irubyobject class  string class  irubyobject class
public void declareclassvariable string name
loadthreadcontext
method swap
loadruntime
method swap
loadself
method swap
method ldc name
method swap
invokeutilitymethod    sig irubyobject class  params threadcontext class  ruby class  irubyobject class  string class  irubyobject class
public void createnewfloat double value
loadruntime
method ldc new double value
invokeiruby    sig rubyfloat class  params double type
public void createnewfixnum long value
loadruntime
method ldc new long value
invokeiruby    sig rubyfixnum class  params long type
public void createnewbignum biginteger value
loadruntime
getcachecompiler   cachebiginteger method  value
method invokestatic p rubybignum class      sig rubybignum class  params ruby class  biginteger class
public void createnewstring arraycallback callback  int count
loadruntime
invokeiruby    sig rubystring class  params
for  int i   0  i < count  i
callback nextvalue this  null  i
method invokevirtual p rubystring class      sig rubystring class  params irubyobject class
public void createnewsymbol arraycallback callback  int count
loadruntime
invokeiruby    sig rubystring class  params
for  int i   0  i < count  i
callback nextvalue this  null  i
method invokevirtual p rubystring class      sig rubystring class  params irubyobject class
tojavastring
loadruntime
method swap
invokeiruby    sig rubysymbol class  params string class
public void createnewstring bytelist value
// fixme: this is sub-optimal, storing string value in a java.lang.string again
loadruntime
getcachecompiler   cachebytelist method  value tostring
invokeiruby    sig rubystring class  params bytelist class
public void createnewsymbol string name
getcachecompiler   cachesymbol method  name
public void createnewarray boolean lightweight
loadruntime
// put under object array already present
method swap
if  lightweight
invokeiruby    sig rubyarray class  params irubyobject class
else
invokeiruby    sig rubyarray class  params irubyobject class
public void createemptyarray
loadruntime
invokeiruby    sig rubyarray class  params
public void createobjectarray object sourcearray  arraycallback callback
buildobjectarray irubyobject  sourcearray  callback
public void createobjectarray int elementcount
// if element count is less than 6, use helper methods
if  elementcount < 6
class params   new class
arrays fill params  irubyobject class
invokeutilitymethod    sig irubyobject class  params
else
// this is pretty inefficient for building an array, so just raise an error if someone's using it for a lot of elements
throw new notcompilableexception
private void buildobjectarray string type  object sourcearray  arraycallback callback
if  sourcearray length    0
method getstatic p irubyobject class      ci irubyobject class
else if  sourcearray length <  runtimehelpers max_specific_arity_object_array
// if we have a specific-arity helper to construct an array for us, use that
for  int i   0  i < sourcearray length  i
callback nextvalue this  sourcearray  i
invokeutilitymethod    sig irubyobject class  params irubyobject class  sourcearray length
else
// brute force construction inline
method ldc new integer sourcearray length
method anewarray type
for  int i   0  i < sourcearray length  i
method dup
method ldc new integer i
callback nextvalue this  sourcearray  i
method arraystore
public void createemptyhash
loadruntime
method invokestatic p rubyhash class      sig rubyhash class  params ruby class
public void createnewhash object elements  arraycallback callback  int keycount
loadruntime
if  keycount <  runtimehelpers max_specific_arity_hash
// we have a specific-arity method we can use to construct, so use that
for  int i   0  i < keycount  i
callback nextvalue this  elements  i
invokeutilitymethod    sig rubyhash class  params ruby class  irubyobject class  keycount   2
else
method invokestatic p rubyhash class      sig rubyhash class  params ruby class
for  int i   0  i < keycount  i
method dup
callback nextvalue this  elements  i
method invokevirtual p rubyhash class      sig void class  params irubyobject class  irubyobject class
public void createnewrange boolean isexclusive
loadruntime
loadthreadcontext
// could be more efficient with a callback
method dup2_x2
method pop2
method ldc boolean valueof isexclusive
method invokestatic p rubyrange class      sig rubyrange class  params ruby class  threadcontext class  irubyobject class  irubyobject class  boolean type
/**
* invoke irubyobject.istrue
*/
private void istrue
invokeirubyobject    sig boolean type
public void performbooleanbranch branchcallback truebranch  branchcallback falsebranch
label afterjmp   new label
label falsejmp   new label
// call istrue on the result
istrue
method ifeq falsejmp      eq    0  i e  false
truebranch branch this
method go_to afterjmp
// fixme: optimize for cases where we have no false branch
method label falsejmp
falsebranch branch this
method label afterjmp
public void performlogicaland branchcallback longbranch
label falsejmp   new label
// dup it since we need to return appropriately if it's false
method dup
// call istrue on the result
istrue
method ifeq falsejmp      eq    0  i e  false
// pop the extra result and replace with the send part of the and
method pop
longbranch branch this
method label falsejmp
public void performlogicalor branchcallback longbranch
// fixme: after jump is not in here.  will if ever be?
//label afterjmp = new label();
label falsejmp   new label
// dup it since we need to return appropriately if it's false
method dup
// call istrue on the result
istrue
method ifne falsejmp      eq    0  i e  false
// pop the extra result and replace with the send part of the and
method pop
longbranch branch this
method label falsejmp
public void performbooleanloop branchcallback condition  branchcallback body  boolean checkfirst
// fixme: handle next/continue, break, etc
label trybegin   new label
label tryend   new label
label catchredo   new label
label catchnext   new label
label catchbreak   new label
label catchraised   new label
label endofbody   new label
label conditioncheck   new label
label topofbody   new label
label done   new label
label normalloopend   new label
method trycatch trybegin  tryend  catchredo  p jumpexception redojump class
method trycatch trybegin  tryend  catchnext  p jumpexception nextjump class
method trycatch trybegin  tryend  catchbreak  p jumpexception breakjump class
if  checkfirst
// only while loops seem to have this raiseexception magic
method trycatch trybegin  tryend  catchraised  p raiseexception class
method label trybegin
label oldlooplabels   currentlooplabels
currentlooplabels   new label  endofbody  topofbody  done
// fixme: if we terminate immediately, this appears to break while in method arguments
// we need to push a nil for the cases where we will never enter the body
if  checkfirst
method go_to conditioncheck
method label topofbody
body branch this
method label endofbody
// clear body or next result after each successful loop
method pop
method label conditioncheck
// check the condition
condition branch this
istrue
method ifne topofbody      ne    nonzero  i e  true
currentlooplabels   oldlooplabels
method label tryend
// skip catch block
method go_to normalloopend
// catch logic for flow-control exceptions
// redo jump
method label catchredo
method pop
method go_to topofbody
// next jump
method label catchnext
method pop
// exceptionnext target is for a next that doesn't push a new value, like this one
method go_to conditioncheck
// break jump
method label catchbreak
loadblock
invokeutilitymethod    sig irubyobject class  jumpexception breakjump class  block class
method go_to done
// fixme: this generates a crapload of extra code that is frequently *never* needed
// raised exception
if  checkfirst
// only while loops seem to have this raiseexception magic
method label catchraised
label raisenext   new label
label raiseredo   new label
label raiserethrow   new label
method dup
invokeutilitymethod    sig string class  params raiseexception class
// if we get here we have a raiseexception we know is a local jump error and an error type
// is it break?
method dup       dup string
method ldc
method invokevirtual p string class      sig boolean class  params object class
method ifeq raisenext
// pop the extra string, get the break value, and end the loop
method pop
invokeutilitymethod    sig irubyobject class  params raiseexception class
method go_to done
// is it next?
method label raisenext
method dup
method ldc
method invokevirtual p string class      sig boolean class  params object class
method ifeq raiseredo
// pop the extra string and the exception, jump to the condition
method pop2
method go_to conditioncheck
// is it redo?
method label raiseredo
method dup
method ldc
method invokevirtual p string class      sig boolean class  params object class
method ifeq raiserethrow
// pop the extra string and the exception, jump to the condition
method pop2
method go_to topofbody
// just rethrow it
method label raiserethrow
method pop       pop extra string
method athrow
method label normalloopend
loadnil
method label done
public void createnewclosure
int line
staticscope scope
int arity
compilercallback body
compilercallback args
boolean hasmultipleargshead
nodetype argsnodeid
astinspector inspector
string closuremethodname       line         innerindex
string closurefieldname       closuremethodname
asmclosurecompiler closurecompiler   new asmclosurecompiler closuremethodname  closurefieldname  inspector
closurecompiler beginmethod args  scope
body call closurecompiler
closurecompiler endmethod
// done with closure compilation
/////////////////////////////////////////////////////////////////////////////
// now, store a compiled block object somewhere we can access it in the future
// in current method, load the field to see if we've created a blockcallback yet
method aload this
method getfield classname  closurefieldname  ci compiledblockcallback class
label alreadycreated   new label
method ifnonnull alreadycreated
// no callback, construct and cache it
method aload this
getcallbackfactory
method ldc closuremethodname
method aload this
method invokevirtual p callbackfactory class      sig compiledblockcallback class  params string class  object class
method putfield classname  closurefieldname  ci compiledblockcallback class
method label alreadycreated
// construct the block for passing to the target method
loadthreadcontext
loadself
method ldc new integer arity
buildstaticscopenames method  scope
method aload this
method getfield classname  closurefieldname  ci compiledblockcallback class
method ldc boolean valueof hasmultipleargshead
method ldc blockbody asargumenttype argsnodeid
// if there's a sub-closure or there's scope-aware methods, it can't be "light"
method ldc   inspector hasclosure      inspector hasscopeawaremethods
invokeutilitymethod    sig block class
params threadcontext class  irubyobject class  integer type  string class  compiledblockcallback class  boolean type  integer type  boolean class
public void runbeginblock staticscope scope  compilercallback body
string closuremethodname         innerindex
string closurefieldname       closuremethodname
asmclosurecompiler closurecompiler   new asmclosurecompiler closuremethodname  closurefieldname  null
closurecompiler beginmethod null  scope
body call closurecompiler
closurecompiler endmethod
// done with closure compilation
/////////////////////////////////////////////////////////////////////////////
// now, store a compiled block object somewhere we can access it in the future
// in current method, load the field to see if we've created a blockcallback yet
method aload this
method getfield classname  closurefieldname  ci compiledblockcallback class
label alreadycreated   new label
method ifnonnull alreadycreated
// no callback, construct and cache it
method aload this
getcallbackfactory
method ldc closuremethodname
method aload this
method invokevirtual p callbackfactory class      sig compiledblockcallback class  params string class  object class
method putfield classname  closurefieldname  ci compiledblockcallback class
method label alreadycreated
// construct the block for passing to the target method
loadthreadcontext
loadself
buildstaticscopenames method  scope
method aload this
method getfield classname  closurefieldname  ci compiledblockcallback class
invokeutilitymethod    sig irubyobject class
params threadcontext class  irubyobject class  string class  compiledblockcallback class
public void createnewforloop int arity  compilercallback body  compilercallback args  boolean hasmultipleargshead  nodetype argsnodeid
string closuremethodname         innerindex
string closurefieldname       closuremethodname
asmclosurecompiler closurecompiler   new asmclosurecompiler closuremethodname  closurefieldname  null
closurecompiler beginmethod args  null
body call closurecompiler
closurecompiler endmethod
// done with closure compilation
/////////////////////////////////////////////////////////////////////////////
// now, store a compiled block object somewhere we can access it in the future
// in current method, load the field to see if we've created a blockcallback yet
method aload this
method getfield classname  closurefieldname  ci compiledblockcallback class
label alreadycreated   new label
method ifnonnull alreadycreated
// no callback, construct and cache it
method aload this
getcallbackfactory
method ldc closuremethodname
method aload this
method invokevirtual p callbackfactory class      sig compiledblockcallback class  params string class  object class
method putfield classname  closurefieldname  ci compiledblockcallback class
method label alreadycreated
// construct the block for passing to the target method
loadthreadcontext
loadself
method ldc new integer arity
method aload this
method getfield classname  closurefieldname  ci compiledblockcallback class
method ldc boolean valueof hasmultipleargshead
method ldc blockbody asargumenttype argsnodeid
invokeutilitymethod    sig block class
params threadcontext class  irubyobject class  integer type  compiledblockcallback class  boolean type  integer type
public void createnewendblock compilercallback body
string closuremethodname         innerindex
string closurefieldname       closuremethodname
asmclosurecompiler closurecompiler   new asmclosurecompiler closuremethodname  closurefieldname  null
closurecompiler beginmethod null  null
body call closurecompiler
closurecompiler endmethod
// done with closure compilation
/////////////////////////////////////////////////////////////////////////////
// now, store a compiled block object somewhere we can access it in the future
// in current method, load the field to see if we've created a blockcallback yet
method aload this
method getfield classname  closurefieldname  ci compiledblockcallback class
label alreadycreated   new label
method ifnonnull alreadycreated
// no callback, construct and cache it
method aload this
getcallbackfactory
method ldc closuremethodname
method aload this
method invokevirtual p callbackfactory class      sig compiledblockcallback class  params string class  object class
method putfield classname  closurefieldname  ci compiledblockcallback class
method label alreadycreated
// construct the block for passing to the target method
loadthreadcontext
loadself
method ldc new integer 0
method aload this
method getfield classname  closurefieldname  ci compiledblockcallback class
method ldc false
method ldc block zero_args
invokeutilitymethod    sig block class
params threadcontext class  irubyobject class  integer type  compiledblockcallback class  boolean type  integer type
loadruntime
invokeutilitymethod    sig void class  block class  ruby class
loadnil
private void getcallbackfactory
// fixme: perhaps a bit extra code, but only for defn/s; examine
loadruntime
getcompiledclass
method dup
method invokevirtual p class class      sig classloader class
method invokestatic p callbackfactory class      sig callbackfactory class  params ruby class  class class  classloader class
public void getcompiledclass
method aload this
method getfield classname     ci class class
private void getrubyclass
loadthreadcontext
invokethreadcontext    sig rubymodule class
public void println
method dup
method getstatic p system class      ci printstream class
method swap
method invokevirtual p printstream class      sig void type  params object class
public void definealias string newname  string oldname
loadthreadcontext
method ldc newname
method ldc oldname
invokeutilitymethod    sig irubyobject class  threadcontext class  string class  string class
public void loadfalse
// todo: cache?
loadruntime
invokeiruby    sig rubyboolean class
public void loadtrue
// todo: cache?
loadruntime
invokeiruby    sig rubyboolean class
public void loadcurrentmodule
loadthreadcontext
invokethreadcontext    sig dynamicscope class
method invokevirtual p dynamicscope class      sig staticscope class
method invokevirtual p staticscope class      sig rubymodule class
public void retrieveinstancevariable string name
loadruntime
loadself
method ldc name
invokeutilitymethod    sig irubyobject class  ruby class  irubyobject class  string class
public void assigninstancevariable string name
// fixme: more efficient with a callback
loadself
invokeirubyobject    sig instancevariables class
method swap
method ldc name
method swap
method invokeinterface p instancevariables class      sig irubyobject class  params string class  irubyobject class
public void retrieveglobalvariable string name
loadruntime
invokeiruby    sig globalvariables class
method ldc name
method invokevirtual p globalvariables class      sig irubyobject class  params string class
public void assignglobalvariable string name
// fixme: more efficient with a callback
loadruntime
invokeiruby    sig globalvariables class
method swap
method ldc name
method swap
method invokevirtual p globalvariables class      sig irubyobject class  params string class  irubyobject class
public void negatecurrentvalue
loadruntime
invokeutilitymethod    sig irubyobject class  irubyobject class  ruby class
public void splatcurrentvalue
loadruntime
method invokestatic p astinterpreter class      sig rubyarray class  params irubyobject class  ruby class
public void singlifysplattedvalue
loadruntime
method invokestatic p astinterpreter class      sig irubyobject class  params irubyobject class  ruby class
public void arytoary
loadruntime
method invokestatic p astinterpreter class      sig irubyobject class  params irubyobject class  ruby class
public void ensurerubyarray
invokeutilitymethod    sig rubyarray class  params irubyobject class
public void ensuremultipleassignablerubyarray boolean masgnhashead
loadruntime
method swap
method ldc new boolean masgnhashead
invokeutilitymethod    sig rubyarray class  params ruby class  irubyobject class  boolean class
public void foreachinvaluearray int start  int count  object source  arraycallback callback  arraycallback nilcallback  compilercallback argscallback
// fixme: this could probably be made more efficient
for    start < count  start
label nomorearrayelements   new label
label donewithelement   new label
// confirm we're not past the end of the array
method dup       dup the original array object
method invokevirtual p rubyarray class      sig integer type
method ldc new integer start
method if_icmple nomorearrayelements      if length <  start  end loop
// extract item from array
method dup       dup the original array object
method ldc new integer start       index for the item
method invokevirtual p rubyarray class      sig irubyobject class  params integer type        extract item
callback nextvalue this  source  start
method go_to donewithelement
// otherwise no items left available, use the code from nilcallback
method label nomorearrayelements
nilcallback nextvalue this  source  start
// end of this element
method label donewithelement
// normal assignment leaves the value; pop it.
method pop
if  argscallback    null
label emptyarray   new label
label readyforargs   new label
// confirm we're not past the end of the array
method dup       dup the original array object
method invokevirtual p rubyarray class      sig integer type
method ldc new integer start
method if_icmple emptyarray      if length <  start  end loop
// assign remaining elements as an array for rest args
method dup       dup the original array object
method ldc start
invokeutilitymethod    sig rubyarray class  rubyarray class  int class
method go_to readyforargs
// create empty array
method label emptyarray
createemptyarray
// assign rest args
method label readyforargs
argscallback call this
//consume leftover assigned value
method pop
public void asstring
method invokeinterface p irubyobject class      sig rubystring class  params
public void tojavastring
method invokevirtual p object class      sig string class
public void nthref int match
method ldc new integer match
backref
method invokestatic p rubyregexp class      sig irubyobject class  params integer type  irubyobject class
public void match
loadthreadcontext
method invokevirtual p rubyregexp class      sig irubyobject class  params threadcontext class
public void match2
loadthreadcontext
method swap
method invokevirtual p rubyregexp class      sig irubyobject class  params threadcontext class  irubyobject class
public void match3
loadthreadcontext
invokeutilitymethod    sig irubyobject class  rubyregexp class  irubyobject class  threadcontext class
public void createnewregexp final bytelist value  final int options
string regexpfield   getnewconstant ci rubyregexp class
// in current method, load the field to see if we've created a pattern yet
method aload this
method getfield classname  regexpfield  ci rubyregexp class
label alreadycreated   new label
method ifnonnull alreadycreated
// load string, for regexp#source and regexp#inspect
string regexpstring   value tostring
loadruntime
method ldc regexpstring
method ldc new integer options
method invokestatic p rubyregexp class      sig rubyregexp class  params ruby class  string class  integer type
method aload this
method swap
method putfield classname  regexpfield  ci rubyregexp class
method label alreadycreated
method aload this
method getfield classname  regexpfield  ci rubyregexp class
public void createnewregexp compilercallback createstringcallback  final int options
boolean onceonly    options   reoptions re_option_once     0       for regular expressions with the  o flag
label alreadycreated   null
string regexpfield   null
// only alter the code if the /o flag was present
if  onceonly
regexpfield   getnewconstant ci rubyregexp class
// in current method, load the field to see if we've created a pattern yet
method aload this
method getfield classname  regexpfield  ci rubyregexp class
alreadycreated   new label
method ifnonnull alreadycreated
loadruntime
createstringcallback call this
method invokevirtual p rubystring class      sig bytelist class
method ldc new integer options
method invokestatic p rubyregexp class      sig rubyregexp class  params ruby class  bytelist class  integer type
// only alter the code if the /o flag was present
if  onceonly
method aload this
method swap
method putfield classname  regexpfield  ci rubyregexp class
method label alreadycreated
method aload this
method getfield classname  regexpfield  ci rubyregexp class
public void pollthreadevents
if   rubyinstanceconfig threadless_compile_enabled
loadthreadcontext
invokethreadcontext    sig void type
public void nulltonil
label notnull   new label
method dup
method ifnonnull notnull
method pop
method aload nil_index
method label notnull
public void isinstanceof class clazz  branchcallback truebranch  branchcallback falsebranch
method instance_of p clazz
label falsejmp   new label
label afterjmp   new label
method ifeq falsejmp      eq    0  i e  false
truebranch branch this
method go_to afterjmp
method label falsejmp
falsebranch branch this
method label afterjmp
public void iscaptured final int number  final branchcallback truebranch  final branchcallback falsebranch
backref
method dup
isinstanceof rubymatchdata class  new branchcallback
public void branch methodcompiler context
method visittypeinsn checkcast  p rubymatchdata class
method dup
method invokevirtual p rubymatchdata class      sig void class
method ldc new long number
method invokevirtual p rubymatchdata class      sig irubyobject class  params long class
method invokeinterface p irubyobject class      sig boolean class
label isnil   new label
label after   new label
method ifne isnil
truebranch branch context
method go_to after
method label isnil
falsebranch branch context
method label after
new branchcallback
public void branch methodcompiler context
method pop
falsebranch branch context
public void branchifmodule compilercallback receivercallback  branchcallback modulecallback  branchcallback notmodulecallback
receivercallback call this
isinstanceof rubymodule class  modulecallback  notmodulecallback
public void backref
loadthreadcontext
invokethreadcontext    sig frame class
method invokevirtual p frame class      sig irubyobject class
public void backrefmethod string methodname
backref
method invokestatic p rubyregexp class   methodname  sig irubyobject class  params irubyobject class
public void issueloopbreak
// inside a loop, break out of it
// go to end of loop, leaving break value on stack
method go_to currentlooplabels
public void issueloopnext
// inside a loop, jump to conditional
method go_to currentlooplabels
public void issueloopredo
// inside a loop, jump to body
method go_to currentlooplabels
protected string getnewensurename
return      ensurenumber
public void protect branchcallback regularcode  branchcallback protectedcode  class ret
string mname   getnewensurename
skinnymethodadapter mv   new skinnymethodadapter getclassvisitor   visitmethod acc_public   acc_synthetic  mname  sig ret  new class threadcontext class  irubyobject class  irubyobject class  block class    null  null
skinnymethodadapter old_method   null
skinnymethodadapter var_old_method   null
skinnymethodadapter inv_old_method   null
boolean oldwithinprotection   withinprotection
withinprotection   true
try
old_method   this method
var_old_method   getvariablecompiler   getmethodadapter
inv_old_method   getinvocationcompiler   getmethodadapter
this method   mv
getvariablecompiler   setmethodadapter mv
getinvocationcompiler   setmethodadapter mv
mv visitcode
// set up a local iruby variable
mv aload threadcontext_index
mv dup
mv invokevirtual p threadcontext class      sig ruby class
mv dup
mv astore runtime_index
// grab nil for local variables
mv invokevirtual p ruby class      sig irubyobject class
mv astore nil_index
mv invokevirtual p threadcontext class      sig dynamicscope class
mv dup
mv astore dynamic_scope_index
mv invokevirtual p dynamicscope class      sig irubyobject class
mv astore vars_array_index
label codebegin   new label
label codeend   new label
label ensurebegin   new label
label ensureend   new label
method label codebegin
regularcode branch this
method label codeend
protectedcode branch this
mv areturn
method label ensurebegin
method astore exception_index
method label ensureend
protectedcode branch this
method aload exception_index
method athrow
method trycatch codebegin  codeend  ensurebegin  null
method trycatch ensurebegin  ensureend  ensurebegin  null
mv visitmaxs 1  1
mv visitend
finally
this method   old_method
getvariablecompiler   setmethodadapter var_old_method
getinvocationcompiler   setmethodadapter inv_old_method
withinprotection   oldwithinprotection
method aload this
loadthreadcontext
loadself
method aload args_index
if this instanceof asmclosurecompiler
pushnull
else
loadblock
method invokevirtual classname  mname  sig ret  new class threadcontext class  irubyobject class  irubyobject class  block class
protected string getnewrescuename
return      rescuenumber
public void rescue branchcallback regularcode  class exception  branchcallback catchcode  class ret
string mname   getnewrescuename
skinnymethodadapter mv   new skinnymethodadapter getclassvisitor   visitmethod acc_public   acc_synthetic  mname  sig ret  new class threadcontext class  irubyobject class  irubyobject class  block class    null  null
skinnymethodadapter old_method   null
skinnymethodadapter var_old_method   null
skinnymethodadapter inv_old_method   null
label aftermethodbody   new label
label catchretry   new label
label catchraised   new label
label catchjumps   new label
label exitrescue   new label
boolean oldwithinprotection   withinprotection
withinprotection   true
try
old_method   this method
var_old_method   getvariablecompiler   getmethodadapter
inv_old_method   getinvocationcompiler   getmethodadapter
this method   mv
getvariablecompiler   setmethodadapter mv
getinvocationcompiler   setmethodadapter mv
mv visitcode
// set up a local iruby variable
mv aload threadcontext_index
mv dup
mv invokevirtual p threadcontext class      sig ruby class
mv dup
mv astore runtime_index
// store previous exception for restoration if we rescue something
loadruntime
invokeutilitymethod    sig irubyobject class  ruby class
mv astore previous_exception_index
// grab nil for local variables
mv invokevirtual p ruby class      sig irubyobject class
mv astore nil_index
mv invokevirtual p threadcontext class      sig dynamicscope class
mv dup
mv astore dynamic_scope_index
mv invokevirtual p dynamicscope class      sig irubyobject class
mv astore vars_array_index
label beforebody   new label
label afterbody   new label
label catchblock   new label
mv visittrycatchblock beforebody  afterbody  catchblock  p exception
mv visitlabel beforebody
regularcode branch this
mv label afterbody
mv go_to exitrescue
mv label catchblock
mv astore exception_index
catchcode branch this
mv label aftermethodbody
mv go_to exitrescue
// retry handling in the rescue block
mv trycatch catchblock  aftermethodbody  catchretry  p jumpexception retryjump class
mv label catchretry
mv pop
mv go_to beforebody
// any exceptions raised must continue to be raised, skipping $! restoration
mv trycatch beforebody  aftermethodbody  catchraised  p raiseexception class
mv label catchraised
mv athrow
// and remaining jump exceptions should restore $!
mv trycatch beforebody  aftermethodbody  catchjumps  p jumpexception class
mv label catchjumps
loadruntime
mv aload previous_exception_index
invokeutilitymethod    sig void class  ruby class  irubyobject class
mv athrow
mv label exitrescue
// restore the original exception
loadruntime
mv aload previous_exception_index
invokeutilitymethod    sig void class  ruby class  irubyobject class
mv areturn
mv visitmaxs 1  1
mv visitend
finally
withinprotection   oldwithinprotection
this method   old_method
getvariablecompiler   setmethodadapter var_old_method
getinvocationcompiler   setmethodadapter inv_old_method
method aload this
loadthreadcontext
loadself
method aload args_index
if this instanceof asmclosurecompiler
pushnull
else
loadblock
method invokevirtual classname  mname  sig ret  new class threadcontext class  irubyobject class  irubyobject class  block class
public void indefined
method aload threadcontext_index
method iconst_1
invokethreadcontext    sig void class  params boolean class
public void outdefined
method aload threadcontext_index
method iconst_0
invokethreadcontext    sig void class  params boolean class
public void stringornil
loadruntime
loadnil
invokeutilitymethod    sig irubyobject class  string class  ruby class  irubyobject class
public void pushnull
method aconst_null
public void pushstring string str
method ldc str
public void ismethodbound string name  branchcallback truebranch  branchcallback falsebranch
metaclass
method ldc name
method iconst_0       push false
method invokevirtual p rubyclass class      sig boolean class  params string class  boolean class
label falselabel   new label
label exitlabel   new label
method ifeq falselabel      eq    0  i e  false
truebranch branch this
method go_to exitlabel
method label falselabel
falsebranch branch this
method label exitlabel
public void hasblock branchcallback truebranch  branchcallback falsebranch
loadblock
method invokevirtual p block class      sig boolean class
label falselabel   new label
label exitlabel   new label
method ifeq falselabel      eq    0  i e  false
truebranch branch this
method go_to exitlabel
method label falselabel
falsebranch branch this
method label exitlabel
public void isglobaldefined string name  branchcallback truebranch  branchcallback falsebranch
loadruntime
invokeiruby    sig globalvariables class
method ldc name
method invokevirtual p globalvariables class      sig boolean class  params string class
label falselabel   new label
label exitlabel   new label
method ifeq falselabel      eq    0  i e  false
truebranch branch this
method go_to exitlabel
method label falselabel
falsebranch branch this
method label exitlabel
public void isconstantdefined string name  branchcallback truebranch  branchcallback falsebranch
loadthreadcontext
method ldc name
invokethreadcontext    sig boolean class  params string class
label falselabel   new label
label exitlabel   new label
method ifeq falselabel      eq    0  i e  false
truebranch branch this
method go_to exitlabel
method label falselabel
falsebranch branch this
method label exitlabel
public void isinstancevariabledefined string name  branchcallback truebranch  branchcallback falsebranch
loadself
invokeirubyobject    sig instancevariables class
method ldc name
//method.invokeinterface(p(irubyobject.class), "getinstancevariable", sig(irubyobject.class, params(string.class)));
method invokeinterface p instancevariables class      sig boolean class  params string class
label truelabel   new label
label exitlabel   new label
//method.ifnonnull(truelabel);
method ifne truelabel
falsebranch branch this
method go_to exitlabel
method label truelabel
truebranch branch this
method label exitlabel
public void isclassvardefined string name  branchcallback truebranch  branchcallback falsebranch
method ldc name
method invokevirtual p rubymodule class      sig boolean class  params string class
label truelabel   new label
label exitlabel   new label
method ifne truelabel
falsebranch branch this
method go_to exitlabel
method label truelabel
truebranch branch this
method label exitlabel
public object getnewending
return new label
public void isnil branchcallback truebranch  branchcallback falsebranch
method invokeinterface p irubyobject class      sig boolean class
label falselabel   new label
label exitlabel   new label
method ifeq falselabel      eq    0  i e  false
truebranch branch this
method go_to exitlabel
method label falselabel
falsebranch branch this
method label exitlabel
public void isnull branchcallback truebranch  branchcallback falsebranch
label falselabel   new label
label exitlabel   new label
method ifnonnull falselabel
truebranch branch this
method go_to exitlabel
method label falselabel
falsebranch branch this
method label exitlabel
public void ifnull object gototoken
method ifnull  label gototoken
public void ifnotnull object gototoken
method ifnonnull  label gototoken
public void setending object endingtoken
method label  label endingtoken
public void go object gototoken
method go_to  label gototoken
public void isconstantbranch final branchcallback setup  final branchcallback isconstant  final branchcallback ismethod  final branchcallback none  final string name
rescue new branchcallback
public void branch methodcompiler context
setup branch abstractmethodcompiler this
method dup
method instance_of p rubymodule class
label falsejmp   new label
label afterjmp   new label
label nextjmp   new label
label nextjmppop   new label
method ifeq nextjmp      eq    0  i e  false
method visittypeinsn checkcast  p rubymodule class
method dup
method ldc name
method invokevirtual p rubymodule class      sig irubyobject class  params string class
method dup
method ifnull nextjmppop
method pop    method pop
isconstant branch abstractmethodcompiler this
method go_to afterjmp
method label nextjmppop
method pop
method label nextjmp
metaclass
method ldc name
method iconst_1       push true
method invokevirtual p rubyclass class      sig boolean class  params string class  boolean class
method ifeq falsejmp      eq    0  i e  false
ismethod branch abstractmethodcompiler this
method go_to afterjmp
method label falsejmp
none branch abstractmethodcompiler this
method label afterjmp
jumpexception class  none  string class
public void metaclass
invokeirubyobject    sig rubyclass class
public void getvisibilityfor string name
method ldc name
method invokevirtual p rubyclass class      sig dynamicmethod class  params string class
method invokevirtual p dynamicmethod class      sig visibility class
public void isprivate object gototoken  int toconsume
method invokevirtual p visibility class      sig boolean class
label temp   new label
method ifeq temp      eq    0  i e  false
while  toconsume    > 0
method pop
method go_to  label gototoken
method label temp
public void isnotprotected object gototoken  int toconsume
method invokevirtual p visibility class      sig boolean class
label temp   new label
method ifne temp
while  toconsume    > 0
method pop
method go_to  label gototoken
method label temp
public void selfiskindof object gototoken
method invokevirtual p rubyclass class      sig rubyclass class
loadself
method invokevirtual p rubymodule class      sig boolean class  params irubyobject class
method ifne  label gototoken      eq    0  i e  true
public void notismoduleandclassvardefined string name  object gototoken
method dup
method instance_of p rubymodule class
label falsepopjmp   new label
label successjmp   new label
method ifeq falsepopjmp
method visittypeinsn checkcast  p rubymodule class
method ldc name
method invokevirtual p rubymodule class      sig boolean class  params string class
method ifeq  label gototoken
method go_to successjmp
method label falsepopjmp
method pop
method go_to  label gototoken
method label successjmp
public void ifsingleton object gototoken
method invokevirtual p rubymodule class      sig boolean class
method ifne  label gototoken      eq    0  i e  false
public void getinstancevariable string name
method ldc name
invokeirubyobject    sig instancevariables class
method invokeinterface p instancevariables class      sig irubyobject class  params string class
public void getframename
loadthreadcontext
invokethreadcontext    sig string class
public void getframeklazz
loadthreadcontext
invokethreadcontext    sig rubymodule class
public void superclass
method invokevirtual p rubymodule class      sig rubyclass class
public void attached
method visittypeinsn checkcast  p metaclass class
method invokevirtual p metaclass class      sig irubyobject class
public void ifnotsupermethodbound object token
method swap
method iconst_0
method invokevirtual p rubymodule class      sig boolean class  params string class  boolean class
method ifeq  label token
public void concatarrays
method invokevirtual p rubyarray class      sig rubyarray class  params irubyobject class
public void concatobjectarrays
invokeutilitymethod    sig irubyobject class  params irubyobject class  irubyobject class
public void appendtoarray
method invokevirtual p rubyarray class      sig rubyarray class  params irubyobject class
public void appendtoobjectarray
invokeutilitymethod    sig irubyobject class  params irubyobject class  irubyobject class
public void converttojavaarray
method invokestatic p argsutil class      sig irubyobject class  params irubyobject class
public void aliasglobal string newname  string oldname
loadruntime
invokeiruby    sig globalvariables class
method ldc newname
method ldc oldname
method invokevirtual p globalvariables class      sig void type  params string class  string class
loadnil
public void undefmethod string name
loadthreadcontext
invokethreadcontext    sig rubymodule class
label notnull   new label
method dup
method ifnonnull notnull
method pop
loadruntime
method ldc     name
invokeiruby    sig raiseexception class  params string class
method athrow
method label notnull
loadthreadcontext
method ldc name
method invokevirtual p rubymodule class      sig void type  params threadcontext class  string class
loadnil
public void defineclass
final string name
final staticscope staticscope
final compilercallback supercallback
final compilercallback pathcallback
final compilercallback bodycallback
final compilercallback receivercallback
string methodname       javanamemangler manglestringforcleanjavaidentifier name          methodindex
final asmmethodcompiler methodcompiler   new asmmethodcompiler methodname  null
compilercallback bodyprep   new compilercallback
public void call methodcompiler context
if  receivercallback    null
if  supercallback    null
methodcompiler loadruntime
supercallback call methodcompiler
methodcompiler invokeutilitymethod    sig rubyclass class  params ruby class  irubyobject class
else
methodcompiler method aconst_null
methodcompiler loadthreadcontext
pathcallback call methodcompiler
methodcompiler invokeutilitymethod    sig rubymodule class  params threadcontext class  irubyobject class
methodcompiler method swap
methodcompiler method ldc name
methodcompiler method swap
methodcompiler method invokevirtual p rubymodule class      sig rubyclass class  params string class  rubyclass class
else
methodcompiler loadruntime
methodcompiler method aload args_index
methodcompiler method iconst_0
methodcompiler method arrayload
methodcompiler invokeutilitymethod    sig rubyclass class  params ruby class  irubyobject class
// set self to the class
methodcompiler method dup
methodcompiler method astore self_index
// class body
methodcompiler loadthreadcontext
methodcompiler method swap
// static scope
buildstaticscopenames methodcompiler method  staticscope
methodcompiler invokethreadcontext    sig void type  params rubymodule class  string class
// here starts the logic for the class definition
label start   new label
label end   new label
label after   new label
label noexception   new label
methodcompiler method trycatch start  end  after  null
methodcompiler beginclass bodyprep  staticscope
methodcompiler method label start
bodycallback call methodcompiler
methodcompiler method label end
// finally with no exception
methodcompiler loadthreadcontext
methodcompiler invokethreadcontext    sig void type  params
methodcompiler method go_to noexception
methodcompiler method label after
// finally with exception
methodcompiler loadthreadcontext
methodcompiler invokethreadcontext    sig void type  params
methodcompiler method athrow
methodcompiler method label noexception
methodcompiler endmethod
// prepare to call class definition method
method aload this
loadthreadcontext
loadself
if  receivercallback    null
method getstatic p irubyobject class      ci irubyobject class
else
// store the receiver in args array, to maintain a live reference until method returns
receivercallback call this
createobjectarray 1
method getstatic p block class      ci block class
method invokevirtual classname  methodname  method_signature
public void definemodule final string name  final staticscope staticscope  final compilercallback pathcallback  final compilercallback bodycallback
string methodname       javanamemangler manglestringforcleanjavaidentifier name          methodindex
final asmmethodcompiler methodcompiler   new asmmethodcompiler methodname  null
compilercallback bodyprep   new compilercallback
public void call methodcompiler context
methodcompiler loadthreadcontext
pathcallback call methodcompiler
methodcompiler invokeutilitymethod    sig rubymodule class  params threadcontext class  irubyobject class
methodcompiler method ldc name
methodcompiler method invokevirtual p rubymodule class      sig rubymodule class  params string class
// set self to the class
methodcompiler method dup
methodcompiler method astore self_index
// class body
methodcompiler loadthreadcontext
methodcompiler method swap
// static scope
buildstaticscopenames methodcompiler method  staticscope
methodcompiler invokethreadcontext    sig void type  params rubymodule class  string class
// here starts the logic for the class definition
label start   new label
label end   new label
label after   new label
label noexception   new label
methodcompiler method trycatch start  end  after  null
methodcompiler beginclass bodyprep  staticscope
methodcompiler method label start
bodycallback call methodcompiler
methodcompiler method label end
methodcompiler method go_to noexception
methodcompiler method label after
methodcompiler loadthreadcontext
methodcompiler invokethreadcontext    sig void type  params
methodcompiler method athrow
methodcompiler method label noexception
methodcompiler loadthreadcontext
methodcompiler invokethreadcontext    sig void type  params
methodcompiler endmethod
// prepare to call class definition method
method aload this
loadthreadcontext
loadself
method getstatic p irubyobject class      ci irubyobject class
method getstatic p block class      ci block class
method invokevirtual classname  methodname  method_signature
public void unwrappassedblock
loadblock
invokeutilitymethod    sig block class  params irubyobject class  block class
public void performbackref char type
loadthreadcontext
switch  type
case
invokeutilitymethod    sig irubyobject class  params threadcontext class
break
case
invokeutilitymethod    sig irubyobject class  params threadcontext class
break
case
invokeutilitymethod    sig irubyobject class  params threadcontext class
break
case
invokeutilitymethod    sig irubyobject class  params threadcontext class
break
case
invokeutilitymethod    sig irubyobject class  params threadcontext class
break
default
throw new notcompilableexception
public void callzsuper compilercallback closure
loadruntime
loadthreadcontext
if  closure    null
closure call this
else
method getstatic p block class      ci block class
loadself
invokeutilitymethod    sig irubyobject class  params ruby class  threadcontext class  block class  irubyobject class
public void checkisexceptionhandled
// ruby exception and list of exception types is on the stack
loadruntime
loadthreadcontext
loadself
invokeutilitymethod    sig irubyobject class  rubyexception class  irubyobject class  ruby class  threadcontext class  irubyobject class
public void rethrowexception
loadexception
method athrow
public void loadclass string name
loadruntime
method ldc name
invokeiruby    sig rubyclass class  string class
public void unwrapraiseexception
// raiseexception is on stack, get rubyexception out
method invokevirtual p raiseexception class      sig rubyexception class
public void loadexception
method aload exception_index
public void setfileposition isourceposition position
if   rubyinstanceconfig positionless_compile_enabled
loadthreadcontext
method ldc position getfile
invokethreadcontext    sig void class  params string class
public void setlineposition isourceposition position
if   rubyinstanceconfig positionless_compile_enabled
// todo: put these in appropriate places to reduce the number of file sets
setfileposition position
loadthreadcontext
method ldc position getstartline
invokethreadcontext    sig void class  params int class
public void checkwhenwithsplat
loadthreadcontext
invokeutilitymethod    sig rubyboolean class  irubyobject class  irubyobject class  threadcontext class
public void issueretryevent
invokeutilitymethod    sig irubyobject class
public void definenewmethod string name  int methodarity  staticscope scope
compilercallback body  compilercallback args
compilercallback receiver  astinspector inspector  boolean root
// todo: build arg list based on number of args, optionals, etc
methodindex
string methodname
if  root    boolean getboolean
methodname   name
else
methodname   javanamemangler manglestringforcleanjavaidentifier name        methodindex
methodcompiler methodcompiler   startmethod methodname  args  scope  inspector
// callbacks to fill in method body
body call methodcompiler
methodcompiler endmethod
// prepare to call "def" utility method to handle def logic
loadthreadcontext
loadself
if  receiver    null  receiver call this
// script object
method aload this
method ldc name
method ldc methodname
buildstaticscopenames method  scope
method ldc methodarity
// arities
method ldc scope getrequiredargs
method ldc scope getoptionalargs
method ldc scope getrestarg
// if method has frame aware methods or frameless compilation is not enabled
if  inspector hasframeawaremethods       rubyinstanceconfig frameless_compile_enabled
if  inspector hasclosure      inspector hasscopeawaremethods
method getstatic p callconfiguration class   callconfiguration frame_and_scope name    ci callconfiguration class
else
method getstatic p callconfiguration class   callconfiguration frame_only name    ci callconfiguration class
else
if  inspector hasclosure      inspector hasscopeawaremethods
// todo: call config with scope but no frame
if  rubyinstanceconfig fastest_compile_enabled
method getstatic p callconfiguration class   callconfiguration scope_only name    ci callconfiguration class
else
method getstatic p callconfiguration class   callconfiguration backtrace_and_scope name    ci callconfiguration class
else
if  rubyinstanceconfig fastest_compile_enabled
method getstatic p callconfiguration class   callconfiguration no_frame_no_scope name    ci callconfiguration class
else
method getstatic p callconfiguration class   callconfiguration backtrace_only name    ci callconfiguration class
if  receiver    null
invokeutilitymethod    sig irubyobject class
params threadcontext class  irubyobject class  irubyobject class  object class  string class  string class  string class  int class  int class  int class  int class  callconfiguration class
else
invokeutilitymethod    sig irubyobject class
params threadcontext class  irubyobject class  object class  string class  string class  string class  int class  int class  int class  int class  callconfiguration class
public void rethrowifsystemexit
loadruntime
method ldc
method invokevirtual p ruby class      sig rubyclass class  string class
method swap
method invokevirtual p rubymodule class      sig boolean class  params irubyobject class
method iconst_0
label ifend   new label
method if_icmpeq ifend
loadexception
method athrow
method label ifend
public class asmclosurecompiler extends abstractmethodcompiler
private string closuremethodname
public asmclosurecompiler string closuremethodname  string closurefieldname  astinspector inspector
this closuremethodname   closuremethodname
// declare the field
getclassvisitor   visitfield acc_private  closurefieldname  ci compiledblockcallback class   null  null
method   new skinnymethodadapter getclassvisitor   visitmethod acc_public   acc_synthetic  closuremethodname  closure_signature  null  null
if  inspector    null
variablecompiler   new heapbasedvariablecompiler this  method  dynamic_scope_index  vars_array_index  args_index  closure_index  first_temp_index
else if  inspector hasclosure      inspector hasscopeawaremethods
// enable "boxed" variable compilation when only a closure present
// this breaks using a proc as a binding
if  rubyinstanceconfig boxed_compile_enabled     inspector hasscopeawaremethods
variablecompiler   new boxedvariablecompiler this  method  dynamic_scope_index  vars_array_index  args_index  closure_index  first_temp_index
else
variablecompiler   new heapbasedvariablecompiler this  method  dynamic_scope_index  vars_array_index  args_index  closure_index  first_temp_index
else
variablecompiler   new stackbasedvariablecompiler this  method  dynamic_scope_index  args_index  closure_index  first_temp_index
invocationcompiler   new standardinvocationcompiler this  method
public void beginmethod compilercallback args  staticscope scope
method start
// set up a local iruby variable
method aload threadcontext_index
invokethreadcontext    sig ruby class
method dup
method astore runtime_index
// grab nil for local variables
invokeiruby    sig irubyobject class
method astore nil_index
variablecompiler beginclosure args  scope
// start of scoping for closure's vars
scopestart   new label
scopeend   new label
redojump   new label
method label scopestart
public void beginclass compilercallback bodyprep  staticscope scope
throw new notcompilableexception
public void endmethod
// end of scoping for closure's vars
scopeend   new label
method areturn
method label scopeend
// handle redos by restarting the block
method pop
method go_to scopestart
method trycatch scopestart  scopeend  scopeend  p jumpexception redojump class
method end
@override
public void loadblock
loadthreadcontext
invokethreadcontext    sig block class
@override
protected string getnewrescuename
return closuremethodname       super getnewrescuename
@override
protected string getnewensurename
return closuremethodname       super getnewensurename
public void performreturn
loadthreadcontext
invokeutilitymethod    sig irubyobject class  irubyobject class  threadcontext class
public void processrequiredargs arity arity  int requiredargs  int optargs  int restarg
throw new notcompilableexception
public void assignoptionalargs object object  int expectedargscount  int size  arraycallback opteval
throw new notcompilableexception
public void processrestarg int startindex  int restarg
throw new notcompilableexception
public void processblockargument int index
loadruntime
loadthreadcontext
loadblock
method ldc new integer index
invokeutilitymethod    sig void class  params ruby class  threadcontext class  block class  int class
public void issuebreakevent compilercallback value
if  withinprotection    currentlooplabels    null
value call this
invokeutilitymethod    sig irubyobject class  irubyobject class
else
value call this
issueloopbreak
public void issuenextevent compilercallback value
if  withinprotection    currentlooplabels    null
value call this
invokeutilitymethod    sig irubyobject class  irubyobject class
else
value call this
issueloopnext
public void issueredoevent
// fixme: this isn't right for within ensured/rescued code
if  withinprotection
invokeutilitymethod    sig irubyobject class
else if  currentlooplabels    null
issueloopredo
else
// jump back to the top of the main body of this closure
method go_to scopestart
public class asmmethodcompiler extends abstractmethodcompiler
private string friendlyname
public asmmethodcompiler string friendlyname  astinspector inspector
this friendlyname   friendlyname
method   new skinnymethodadapter getclassvisitor   visitmethod acc_public  friendlyname  method_signature  null  null
if  inspector    null
variablecompiler   new heapbasedvariablecompiler this  method  dynamic_scope_index  vars_array_index  args_index  closure_index  first_temp_index
else if  inspector hasclosure      inspector hasscopeawaremethods
// enable "boxed" variable compilation when only a closure present
// this breaks using a proc as a binding
if  rubyinstanceconfig boxed_compile_enabled     inspector hasscopeawaremethods
variablecompiler   new boxedvariablecompiler this  method  dynamic_scope_index  vars_array_index  args_index  closure_index  first_temp_index
else
variablecompiler   new heapbasedvariablecompiler this  method  dynamic_scope_index  vars_array_index  args_index  closure_index  first_temp_index
else
variablecompiler   new stackbasedvariablecompiler this  method  dynamic_scope_index  args_index  closure_index  first_temp_index
invocationcompiler   new standardinvocationcompiler this  method
public void beginchainedmethod
method start
method aload threadcontext_index
method dup
method invokevirtual p threadcontext class      sig ruby class
method dup
method astore runtime_index
// grab nil for local variables
method invokevirtual p ruby class      sig irubyobject class
method astore nil_index
method invokevirtual p threadcontext class      sig dynamicscope class
method dup
method astore dynamic_scope_index
method invokevirtual p dynamicscope class      sig irubyobject class
method astore vars_array_index
public void beginmethod compilercallback args  staticscope scope
method start
// set up a local iruby variable
method aload threadcontext_index
invokethreadcontext    sig ruby class
method dup
method astore runtime_index
// grab nil for local variables
invokeiruby    sig irubyobject class
method astore nil_index
variablecompiler beginmethod args  scope
// visit a label to start scoping for local vars in this method
label start   new label
method label start
scopestart   start
public void beginclass compilercallback bodyprep  staticscope scope
method start
// set up a local iruby variable
method aload threadcontext_index
invokethreadcontext    sig ruby class
method dup
method astore runtime_index
// grab nil for local variables
invokeiruby    sig irubyobject class
method astore nil_index
variablecompiler beginclass bodyprep  scope
// visit a label to start scoping for local vars in this method
label start   new label
method label start
scopestart   start
public void endmethod
// return last value from execution
method areturn
// end of variable scope
label end   new label
method label end
method end
public void performreturn
// normal return for method body. return jump for within a begin/rescue/ensure
if  withinprotection
loadthreadcontext
invokeutilitymethod    sig irubyobject class  irubyobject class  threadcontext class
else
method areturn
public void issuebreakevent compilercallback value
if  withinprotection
value call this
invokeutilitymethod    sig irubyobject class  irubyobject class
else if  currentlooplabels    null
value call this
issueloopbreak
else
// in method body with no containing loop, issue jump error
// load runtime and value, issue jump error
loadruntime
value call this
invokeutilitymethod    sig irubyobject class  ruby class  irubyobject class
public void issuenextevent compilercallback value
if  withinprotection
value call this
invokeutilitymethod    sig irubyobject class  irubyobject class
else if  currentlooplabels    null
value call this
issueloopnext
else
// in method body with no containing loop, issue jump error
// load runtime and value, issue jump error
loadruntime
value call this
invokeutilitymethod    sig irubyobject class  ruby class  irubyobject class
public void issueredoevent
if  withinprotection
invokeutilitymethod    sig irubyobject class
else if  currentlooplabels    null
issueloopredo
else
// in method body with no containing loop, issue jump error
// load runtime and value, issue jump error
loadruntime
invokeutilitymethod    sig irubyobject class  ruby class
private int constants   0
public string getnewconstant string type  string name_prefix
return getnewconstant type  name_prefix  null
public string getnewconstant string type  string name_prefix  object init
classvisitor cv   getclassvisitor
string realname
synchronized  this
realname       constants
// declare the field
cv visitfield acc_private  realname  type  null  null  visitend
if init    null
initmethod aload this
initmethod ldc init
initmethod putfield classname  realname  type
return realname
public string getnewfield string type  string name  object init
classvisitor cv   getclassvisitor
// declare the field
cv visitfield acc_private  name  type  null  null  visitend
if init    null
initmethod aload this
initmethod ldc init
initmethod putfield classname  name  type
return name
public string getnewstaticconstant string type  string name_prefix
classvisitor cv   getclassvisitor
string realname
synchronized  this
realname       constants
// declare the field
cv visitfield acc_private   acc_static  realname  type  null  null  visitend
return realname