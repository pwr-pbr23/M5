/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2001 alan moore <alan_moore@gmx.net>
* copyright (c) 2001-2002 benoit cerrina <b.cerrina@wanadoo.fr>
* copyright (c) 2001-2004 jan arne petersen <jpetersen@uni-bonn.de>
* copyright (c) 2002-2004 anders bengtsson <ndrsbngtssn@yahoo.se>
* copyright (c) 2004-2005 thomas e enebo <enebo@acm.org>
* copyright (c) 2004 stefan matthias aust <sma@3plus4.de>
* copyright (c) 2005 david corbin <dcorbin@users.sourceforge.net>
* copyright (c) 2006 nick sieger <nicksieger@gmail.com>
* copyright (c) 2006 miguel covarrubias <mlcovarrubias@gmail.com>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby
import java lang ref softreference
import java util hashmap
import org joni matcher
import org joni option
import org joni regex
import org joni region
import org joni syntax
import org joni warncallback
import org joni encoding encoding
import org jruby anno jrubymethod
import org jruby common irubywarnings id
import org jruby parser reoptions
import org jruby runtime block
import org jruby runtime callbackfactory
import org jruby runtime classindex
import org jruby runtime frame
import org jruby runtime objectallocator
import org jruby runtime threadcontext
import org jruby runtime visibility
import org jruby runtime builtin irubyobject
import org jruby runtime marshal marshalstream
import org jruby runtime marshal unmarshalstream
import org jruby util bytelist
import org jruby util kcode
import org jruby util typeconverter
/**
*
*/
public class rubyregexp extends rubyobject implements reoptions  warncallback
private kcode kcode
private regex pattern
private bytelist str
private final static byte pipe   new byte
private final static byte dash   new byte
private final static byte r_paren   new byte
private final static byte colon   new byte
private final static byte m_char   new byte
private final static byte i_char   new byte
private final static byte x_char   new byte
private static final int regexp_literal_f       1 << 11
private static final int regexp_kcode_default   1 << 12
public void setliteral
flags    regexp_literal_f
public void clearliteral
flags    ~regexp_literal_f
public boolean isliteral
return  flags   regexp_literal_f     0
public void setkcodedefault
flags    regexp_kcode_default
public void clearkcodedefault
flags    ~regexp_kcode_default
public boolean iskcodedefault
return  flags   regexp_kcode_default     0
public kcode getkcode
return kcode
private static synchronized hashmap<bytelist  regex> getpatterncache
hashmap<bytelist  regex> cache   patterncache get
if  cache    null
cache   new hashmap<bytelist  regex> 5
patterncache   new softreference<hashmap<bytelist  regex>> cache
return cache
static softreference<hashmap<bytelist  regex>> patterncache   new softreference<hashmap<bytelist  regex>> null
public static rubyclass createregexpclass ruby runtime
rubyclass regexpclass   runtime defineclass    runtime getobject    regexp_allocator
runtime setregexp regexpclass
regexpclass index   classindex regexp
regexpclass kindof   new rubymodule kindof
public boolean iskindof irubyobject obj  rubymodule type
return obj instanceof rubyregexp
callbackfactory callbackfactory   runtime callbackfactory rubyregexp class
regexpclass defineconstant    runtime newfixnum re_option_ignorecase
regexpclass defineconstant    runtime newfixnum re_option_extended
regexpclass defineconstant    runtime newfixnum re_option_multiline
regexpclass defineannotatedmethods rubyregexp class
regexpclass dispatcher   callbackfactory createdispatcher regexpclass
return regexpclass
private static objectallocator regexp_allocator   new objectallocator
public irubyobject allocate ruby runtime  rubyclass klass
rubyregexp instance   new rubyregexp runtime  klass
return instance
/** used by allocator
*
*/
private rubyregexp ruby runtime  rubyclass klass
super runtime  klass
/** default constructor
*
*/
private rubyregexp ruby runtime
super runtime  runtime getregexp
// used only by the compiler/interpreter (will set the literal flag)
public static rubyregexp newregexp ruby runtime  string pattern  int options
return newregexp runtime  bytelist create pattern   options
// used only by the compiler/interpreter (will set the literal flag)
public static rubyregexp newregexp ruby runtime  bytelist pattern  int options
rubyregexp regexp   newregexp runtime  pattern  options  false
regexp setliteral
return regexp
public static rubyregexp newregexp ruby runtime  bytelist pattern  int options  boolean quote
rubyregexp regexp   new rubyregexp runtime
regexp initialize pattern  options  quote
return regexp
public void warn string message
getruntime   getwarnings   warn id miscellaneous  message
@jrubymethod name
public irubyobject kcode
return   iskcodedefault      kcode    null  ? getruntime   newstring kcode name      getruntime   getnil
public int getnativetypeindex
return classindex regexp
public regex getpattern
return pattern
private void check
if  pattern    null    str    null  throw getruntime   newtypeerror
@jrubymethod name
public rubyfixnum hash
check
int hashval    int pattern getoptions
int len   this str realsize
int p   this str begin
while  len  >0
hashval   hashval   33   str bytes
hashval   hashval    hashval>>5
return getruntime   newfixnum hashval
@jrubymethod name           required   1
public irubyobject op_equal irubyobject other
if this    other  return getruntime   gettrue
if   other instanceof rubyregexp   return getruntime   getfalse
rubyregexp otherregex    rubyregexp other
check
otherregex check
if str equal otherregex str     kcode    otherregex kcode
pattern getoptions      otherregex pattern getoptions
return getruntime   gettrue
return getruntime   getfalse
@jrubymethod name
public irubyobject op_match2 threadcontext context
irubyobject line   context getcurrentframe   getlastline
if   line instanceof rubystring
context getcurrentframe   setbackref getruntime   getnil
return getruntime   getnil
int start   search context   rubystring line  0  false
if start < 0
return getruntime   getnil
else
return getruntime   newfixnum start
/** rb_reg_eqq
*
*/
@jrubymethod name      required   1
public irubyobject eqq threadcontext context  irubyobject str
if   str instanceof rubystring   str   str checkstringtype
if  str isnil
context getcurrentframe   setbackref getruntime   getnil
return getruntime   getfalse
int start   search context   rubystring str  0  false
return  start < 0  ? getruntime   getfalse     getruntime   gettrue
private static final int regex_quoted   1
private void initialize bytelist bytes  int options  boolean quote
if   istaint      getruntime   getsafelevel   >  4  throw getruntime   newsecurityerror
checkfrozen
if  isliteral    throw getruntime   newsecurityerror
setkcode options
hashmap<bytelist  regex> cache   getpatterncache
regex pat   cache get bytes
if  pat    null
pat getencoding      kcode getencoding
pat getoptions       options   0xf
pat getuseroptions     regex_quoted     0     quote       cache hit
pattern   pat
else
if  quote  bytes   quote bytes  getruntime   getkcode
makeregexp bytes  bytes begin  bytes realsize  options   0xf  kcode getencoding
if  quote  pattern setuseroptions regex_quoted
cache put bytes  pattern
str   bytes
private void makeregexp bytelist bytes  int start  int len  int flags  encoding enc
try
pattern   new regex bytes bytes  start  start   len  flags  enc  syntax default  this
catch exception e
rb_reg_raise bytes bytes  start  len  e getmessage    flags
private final void rb_reg_raise byte s  int start  int len  string err int flags
throw getruntime   newregexperror err       rb_reg_desc s start  len flags
private final stringbuffer rb_reg_desc byte s  int start  int len  int flags
stringbuffer sb   new stringbuffer
rb_reg_expr_str sb  s  start  len
sb append
if  flags   reoptions re_option_multiline     0  sb append
if  flags   reoptions re_option_ignorecase     0  sb append
if  flags   reoptions re_option_extended     0  sb append
if  kcode    null     iskcodedefault
sb append kcode name   charat 0
return sb
private final void rb_reg_expr_str stringbuffer sb  byte s  int start  int len
int p pend
boolean need_escape   false
p   start
pend   start len
encoding enc   kcode getencoding
while p<pend
if s                 s      character iswhitespace s
character isisocontrol s
enc length s   1
need_escape   true
break
p    enc length s
if  need_escape
sb append new bytelist s start len false  tostring
else
p   0
while p < pend
if s
int n   enc length s    1
sb append new bytelist s p n false  tostring
p    n
continue
else if s
sb append
else if enc length s   1
sb append new bytelist s p enc length s  false  tostring
p    enc length s
continue
else if       s      character iswhitespace s
character isisocontrol s
sb append  char  s 0xff
else if  character iswhitespace  char  s 0xff
sb append
sb append integer tostring  int  s 0377  8
else
sb append  char  s 0xff
p
/** rb_reg_init_copy
*/
@jrubymethod name      required   1
public irubyobject initialize_copy irubyobject re
if this    re  return this
checkfrozen
if  getmetaclass   getrealclass      re getmetaclass   getrealclass
throw getruntime   newtypeerror
rubyregexp regexp    rubyregexp re
regexp check
initialize regexp str  regexp getoptions    false
return this
/** rb_set_kcode
*/
private int getkcode
if kcode    kcode none
return 16
else if kcode    kcode euc
return 32
else if kcode    kcode sjis
return 48
else if kcode    kcode utf8
return 64
return 0
/**
*/
private void setkcode int options
clearkcodedefault
switch options   ~0xf
case 0
default
setkcodedefault
kcode   getruntime   getkcode
break
case 16
kcode   kcode none
break
case 32
kcode   kcode euc
break
case 48
kcode   kcode sjis
break
case 64
kcode   kcode utf8
break
/** rb_reg_options
*/
private int getoptions
check
int options    int  pattern getoptions      re_option_ignorecase re_option_multiline re_option_extended
if  iskcodedefault
options    getkcode
return options
/** rb_reg_initialize_m
*/
@jrubymethod name      optional   3  visibility   visibility private
public irubyobject initialize_m irubyobject args
bytelist bytes
int regexflags   0
if args instanceof rubyregexp
if args length > 1
getruntime   getwarnings   warn id regexp_ignored_flags       args length    3 ?
rubyregexp regexp    rubyregexp args
regexp check
regexflags    int regexp pattern getoptions     0xf
if   regexp iskcodedefault      regexp kcode    null    regexp kcode    kcode nil
if  regexp kcode    kcode none
regexflags    16
else if  regexp kcode    kcode euc
regexflags    32
else if  regexp kcode    kcode sjis
regexflags    48
else if  regexp kcode    kcode utf8
regexflags    64
bytes   regexp str
else
if  args length >  2
if  args instanceof rubyfixnum
regexflags   rubynumeric fix2int args
else if  args istrue
regexflags   re_option_ignorecase
if  args length    3     args isnil
bytelist kcodebytes   args converttostring   getbytelist
char first   kcodebytes length   > 0 ? kcodebytes charat 0    0
regexflags    ~0x70
switch  first
case    case
regexflags    16
break
case    case
regexflags    32
break
case    case
regexflags    48
break
case    case
regexflags    64
break
default
break
bytes   args converttostring   getbytelist
initialize bytes  regexflags  false
return this
@jrubymethod name           required   1  optional   2  meta   true
public static rubyregexp newinstance irubyobject recv  irubyobject args
rubyclass klass    rubyclass recv
rubyregexp re    rubyregexp  klass allocate
re callinit args  block null_block
return re
@jrubymethod name
public irubyobject options
return getruntime   newfixnum getoptions
/** rb_reg_search
*/
public int search threadcontext context  rubystring str  int pos  boolean reverse
ruby runtime   getruntime
frame frame   context getcurrentframe
bytelist value   str getbytelist
if  pos > value realsize    pos < 0
frame setbackref runtime getnil
return  1
check
int range   reverse ?  pos   value realsize   pos
matcher matcher   pattern matcher value bytes  value begin  value begin   value realsize
int result   matcher search value begin   pos
value begin   pos   range
option none
if  result < 0
frame setbackref runtime getnil
return result
updatebackref str  frame  matcher
return result
final rubymatchdata updatebackref rubystring str  frame frame  matcher matcher
irubyobject backref   frame getbackref
final rubymatchdata match
if  backref    null    backref isnil        rubymatchdata backref  used
match   new rubymatchdata getruntime
else
match    rubymatchdata backref
if getruntime   getsafelevel   >  3
match settaint true
else
match settaint false
match regs   matcher getregion       lazy  null when no groups defined
match begin   matcher getbegin
match end   matcher getend
match str    rubystring str strdup   freeze
match pattern   pattern
frame setbackref match
match infectby this
match infectby str
return match
/** rb_reg_match
*
*/
@jrubymethod name      required   1
public irubyobject op_match threadcontext context  irubyobject str
int start
if str isnil
context getcurrentframe   setbackref getruntime   getnil
return str
start   search context  str converttostring    0  false
if start < 0  return getruntime   getnil
return rubyfixnum newfixnum getruntime    start
/** rb_reg_match_m
*
*/
@jrubymethod name      required   1
public irubyobject match_m threadcontext context  irubyobject str
if op_match context  str  isnil
return getruntime   getnil
irubyobject result    context getcurrentframe   getbackref
if result instanceof rubymatchdata
rubymatchdata result  use
return result
public rubystring regsub rubystring str  rubystring src  matcher matcher
region regs   matcher getregion
int mbeg   matcher getbegin
int mend   matcher getend
int p s e
p   s   0
int no    1
bytelist bs   str getbytelist
bytelist srcbs   src getbytelist
e   bs length
rubystring val   null
encoding enc   kcode getencoding
int beg  end
while s < e
int ss   s
char c   bs charat s
if enc length  byte c     1
s    enc length  byte c    1
continue
if  c         s    e  continue
if  val    null  val   rubystring newstring getruntime    new bytelist ss   p
val cat bs bytes  bs begin   p  ss   p
c   bs charat s
p   s
switch c
case    case    case    case    case
case    case    case    case    case
no   c
break
case
no   0
break
case
beg   regs    null ? mbeg   regs beg
val cat srcbs bytes  srcbs begin  beg
continue
case
end   regs    null ? mend   regs end
val cat srcbs bytes  srcbs begin   end  src getbytelist   realsize   end
continue
case
if  regs    null
if  mbeg     1
no   0
continue
else
no   regs numregs 1
while regs beg     1    no > 0  no
if  no    0  continue
break
case
val cat bs bytes  s   1  1
continue
default
val cat bs bytes  s   2  2
continue
if  regs    null
if  no >  0
if  no >  regs numregs    regs beg     1  continue
val cat srcbs bytes  srcbs begin   regs beg  regs end   regs beg
else
if  no    0    mbeg     1  continue
val cat srcbs bytes  srcbs begin   mbeg  mend   mbeg
if p < e
if val    null
val   rubystring newstring getruntime    bs makeshared p  e p
else
val cat bs bytes  bs begin   p  e   p
if  val    null  return str
return val
final int adjuststartpos rubystring str  int pos  boolean reverse
check
bytelist value   str getbytelist
return pattern adjuststartposition value bytes  value begin  value realsize  pos  reverse
@jrubymethod name
public irubyobject casefold_p
check
if   pattern getoptions     re_option_ignorecase     0
return getruntime   gettrue
return getruntime   getfalse
/** rb_reg_source
*
*/
@jrubymethod name
public irubyobject source
check
rubystring str   rubystring newstringshared getruntime    this str
if istaint
str taint
return str
final int length
return str realsize
/** rb_reg_inspect
*
*/
@jrubymethod name
public irubyobject inspect
check
return getruntime   newstring bytelist create rb_reg_desc str bytes  str begin  str realsize  pattern getoptions    tostring
private final static int embeddable   re_option_multiline re_option_ignorecase re_option_extended
@jrubymethod name
public irubyobject to_s
rubystring ss   getruntime   newstring
check
int options   pattern getoptions
int p   str begin
int l   str realsize
byte _str   str bytes
again  do
if l >  4    _str         _str
boolean err   true
p    2
if  l    2  > 0
do
if _str
options    re_option_multiline
else if _str
options    re_option_ignorecase
else if _str
options    re_option_extended
else
break
p
while   l > 0
if l > 1    _str
p
l
do
if _str
options    ~re_option_multiline
else if _str
options    ~re_option_ignorecase
else if _str
options    ~re_option_extended
else
break
p
while   l > 0
if _str
l
p
continue again
if _str         _str
try
new regex _str   p l  2 option default kcode getencoding   syntax default
err   false
catch exception e
err   true
if err
options    int pattern getoptions
p   str begin
l   str realsize
if  options   re_option_multiline   0  ss cat m_char
if  options   re_option_ignorecase   0  ss cat i_char
if  options   re_option_extended   0  ss cat x_char
if  options embeddable     embeddable
ss cat dash
if  options   re_option_multiline   0  ss cat m_char
if  options   re_option_ignorecase   0  ss cat i_char
if  options   re_option_extended   0  ss cat x_char
ss cat colon
rb_reg_expr_str ss p l
ss cat r_paren
ss infectby this
return ss
while true
private final boolean isprint byte c
return isprint  char  c 0xff
private final boolean isprint char c
return       c      character iswhitespace c      character isisocontrol c
private final void rb_reg_expr_str rubystring ss  int s  int l
int p   s
int pend   l
boolean need_escape   false
while p<pend
if str bytes           isprint str bytes     kcode getencoding   length str bytes     1
need_escape   true
break
p    kcode getencoding   length str bytes
if  need_escape
ss cat str bytes s l
else
p   s
while p<pend
if str bytes
int n   kcode getencoding   length str bytes    1
ss cat str bytes p n
p    n
continue
else if str bytes
char c
ss cat  byte c
ss cat str bytes p 1
else if kcode getencoding   length str bytes     1
ss cat str bytes p kcode getencoding   length str bytes
p    kcode getencoding   length str bytes
continue
else if isprint str bytes
ss cat str bytes p 1
else if  character iswhitespace str bytes
ss cat bytelist create integer tostring str bytes 0377 8
else
ss cat str bytes p 1
p
/** rb_reg_s_quote
*
*/
@jrubymethod name           required   1  optional   1  meta   true
public static rubystring quote irubyobject recv  irubyobject args
irubyobject kcode   args length    2 ? args   null
irubyobject str   args
kcode code   recv getruntime   getkcode
if  kcode    null     kcode isnil
code   kcode create recv getruntime    kcode tostring
rubystring src   str converttostring
rubystring dst   rubystring newstring recv getruntime    quote src getbytelist    code
dst infectby src
return dst
/** rb_reg_quote
*
*/
public static bytelist quote bytelist str  kcode kcode
bytelist bs   str
int tix   0
int s   bs begin
char c
int send   s bs length
encoding enc   kcode getencoding
meta_found  do
for   s<send  s
c    char  bs bytes 0xff
if enc length  byte c     1
int n   enc length  byte c
while n   > 0    s < send
s
s
continue
switch  c
case    case    case    case
case    case    case    case
case    case    case
case    case    case    case
case    case
case    case    case    case
break meta_found
return bs
while false
bytelist b1   new bytelist send 2
system arraycopy bs bytes bs begin b1 bytes b1 begin s bs begin
tix     s bs begin
for   s<send  s
c    char  bs bytes 0xff
if enc length  byte c     1
int n   enc length  byte c
while n   > 0    s < send
b1 bytes   bs bytes
s
continue
switch c
case    case    case    case
case    case    case    case
case    case    case
case    case    case    case
case
b1 bytes
break
case
b1 bytes
b1 bytes
continue
case
b1 bytes
b1 bytes
continue
case
b1 bytes
b1 bytes
continue
case
b1 bytes
b1 bytes
continue
case
b1 bytes
b1 bytes
continue
b1 bytes    byte c
b1 realsize   tix
return b1
/** rb_reg_nth_match
*
*/
public static irubyobject nth_match int nth  irubyobject match
if  match isnil    return match
rubymatchdata m    rubymatchdata match
int start  end
if  m regs    null
if  nth >  1  return match getruntime   getnil
if  nth < 0      nth <  0  return match getruntime   getnil
start   m begin
end   m end
else
if  nth >  m regs numregs  return match getruntime   getnil
if  nth < 0     nth  m regs numregs  <  0  return match getruntime   getnil
start   m regs beg
end   m regs end
if start     1  return match getruntime   getnil
rubystring str   m str makeshared start  end   start
str infectby match
return str
/** rb_reg_last_match
*
*/
public static irubyobject last_match irubyobject match
return nth_match 0  match
/** rb_reg_s_last_match
*
*/
@jrubymethod name      optional   1  meta   true
public static irubyobject last_match_s threadcontext context  irubyobject recv  irubyobject args
if  args length    1
return nth_match rubynumeric fix2int args   context getcurrentframe   getbackref
irubyobject result   context getcurrentframe   getbackref
if  result instanceof rubymatchdata    rubymatchdata result  use
return result
/** rb_reg_match_pre
*
*/
public static irubyobject match_pre irubyobject match
if  match isnil    return match
rubymatchdata m    rubymatchdata match
int beg   m regs    null ? m begin   m regs beg
if beg     1  match getruntime   getnil
rubystring str   m str makeshared 0  beg
str infectby match
return str
/** rb_reg_match_post
*
*/
public static irubyobject match_post irubyobject match
if  match isnil    return match
rubymatchdata m    rubymatchdata match
int end
if  m regs    null
if  m begin     1  return match getruntime   getnil
end   m end
else
if  m regs beg     1  return match getruntime   getnil
end   m regs end
rubystring str   m str makeshared end  m str getbytelist   realsize   end
str infectby match
return str
/** rb_reg_match_last
*
*/
public static irubyobject match_last irubyobject match
if  match isnil    return match
rubymatchdata m    rubymatchdata match
if  m regs    null    m regs beg     1  return match getruntime   getnil
int i
for  i m regs numregs 1  m regs beg   1    i>0  i
if  i    0  return match getruntime   getnil
return nth_match i match
/** rb_reg_s_union
*
*/
@jrubymethod name      rest   true  meta   true
public static irubyobject union threadcontext context  irubyobject recv  irubyobject args
if  args length    0
return newregexp recv getruntime    bytelist create     0  false
else if  args length    1
irubyobject v   typeconverter converttotypewithcheck args  recv getruntime   getregexp    0
if  v isnil
return v
else
// newinstance here
return newregexp recv getruntime    quote recv args  getbytelist    0  false
else
kcode kcode   null
irubyobject kcode_re   recv getruntime   getnil
rubystring source   recv getruntime   newstring
irubyobject _args   new irubyobject
for int i   0  i < args length  i
if 0 < i
source cat pipe
irubyobject v   typeconverter converttotypewithcheck args  recv getruntime   getregexp    0
if   v isnil
if     rubyregexp v  iskcodedefault
if  kcode    null
kcode_re   v
kcode     rubyregexp v  kcode
else if    rubyregexp v  kcode    kcode
irubyobject str1   kcode_re inspect
irubyobject str2   v inspect
throw recv getruntime   newargumenterror     str1       str2
v     rubyregexp v  to_s
else
v   quote recv  new irubyobject args
source append v
_args   source
_args   recv getruntime   getnil
if  kcode    null
_args   recv getruntime   getnil
else if  kcode    kcode none
_args   recv getruntime   newstring
else if  kcode    kcode euc
_args   recv getruntime   newstring
else if  kcode    kcode sjis
_args   recv getruntime   newstring
else if  kcode    kcode utf8
_args   recv getruntime   newstring
return recv callmethod context     _args
public static rubyregexp unmarshalfrom unmarshalstream input  throws java io ioexception
rubyregexp result   newregexp input getruntime    input unmarshalstring    input unmarshalint    false
input registerlinktarget result
return result
public static void marshalto rubyregexp regexp  marshalstream output  throws java io ioexception
output registerlinktarget regexp
output writestring new string regexp str bytes regexp str begin regexp str realsize
output writeint regexp pattern getoptions     embeddable