package org jruby util
import java lang ref referencequeue
import java lang ref weakreference
import java net url
import java net urlclassloader
import java security protectiondomain
import java util map
import java util concurrent concurrenthashmap
/**
* a simple cache which maintains a collection of classes that can potentially be shared among
* multiple runtimes (or whole jvm).
*/
public class classcache<t>
/**
* the classloader this class cache will use for any classes generated through it.  it is
* assumed that the classloader provided will be a parent loader of any runtime using it.
* @param classloader to use to generate shared classes
*/
public classcache classloader classloader  int max
this classloader   classloader
this max   max
public classcache classloader classloader
this classloader   1
public interface classgenerator
byte bytecode
string name
private static class keyedclassreference<t> extends weakreference<class<t>>
private object key
public keyedclassreference object key  class<t> referent  referencequeue<class<t>> referencequeue
super referent  referencequeue
this key   key
public object getkey
return key
private static class oneshotclassloader extends urlclassloader
private final static protectiondomain default_domain
jrubyclassloader class getprotectiondomain
public oneshotclassloader classloader parent
super new url  parent
// change visibility so others can see it
public void addurl url url
super addurl url
public class<?> defineclass string name  byte bytes
return super defineclass name  bytes  0  bytes length  default_domain
public class<?> defineclass string name  byte bytes  protectiondomain domain
return super defineclass name  bytes  0  bytes length  domain
private referencequeue referencequeue   new referencequeue
private map<object  keyedclassreference> cache
new concurrenthashmap<object  keyedclassreference>
private classloader classloader
private int max
public classloader getclassloader
return classloader
public int getmax
return max
public class<t> cacheclassbykey object key  classgenerator classgenerator
throws classnotfoundexception
weakreference<class<t>> weakref   cache get key
class<t> contents   null
if  weakref    null  contents   weakref get
if  weakref    null    contents    null
if  isfull    return null
oneshotclassloader oneshotcl   new oneshotclassloader getclassloader
contents    class<t> oneshotcl defineclass classgenerator name    classgenerator bytecode
cache put key  new keyedclassreference key  contents  referencequeue
return contents
public boolean isfull
cleanup
return max > 0    cache size   >  max
private void cleanup
keyedclassreference reference
while   reference    keyedclassreference referencequeue poll       null
cache remove reference getkey