/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2004 charles o nutter <headius@headius.com>
* copyright (c) 2004 jan arne petersen <jpetersen@uni-bonn.de>
* copyright (c) 2004 stefan matthias aust <sma@3plus4.de>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby
import java util hashmap
import java util map
import org jruby anno jrubymethod
import org jruby runtime block
import org jruby runtime objectallocator
import org jruby runtime builtin irubyobject
/**
* implementation of ruby's <code>threadgroup</code> class. this is currently
* just a stub.
* <p>
*
* @author charles o nutter (headius@headius.com)
*/
public class rubythreadgroup extends rubyobject
private map<integer  irubyobject> rubythreadlist   new hashmap<integer  irubyobject>
private boolean enclosed   false
// enebo: can these be fast?
public static rubyclass createthreadgroupclass ruby runtime
rubyclass threadgroupclass   runtime defineclass    runtime getobject    objectallocator not_allocatable_allocator
runtime setthreadgroup threadgroupclass
threadgroupclass defineannotatedmethods rubythreadgroup class
// create the default thread group
rubythreadgroup defaultthreadgroup   new rubythreadgroup runtime  threadgroupclass
threadgroupclass defineconstant    defaultthreadgroup
return threadgroupclass
@jrubymethod name      frame   true  meta   true
public static irubyobject newinstance irubyobject recv  block block
return new rubythreadgroup recv getruntime     rubyclass recv
@jrubymethod name      required   1  frame   true
public synchronized irubyobject add irubyobject rubythread  block block
if    rubythread instanceof rubythread   throw getruntime   newtypeerror rubythread  getruntime   getthread
if  isfrozen
throw getruntime   newtypeerror
rubythread thread    rubythread rubythread
if  thread group      getruntime   getnil
rubythreadgroup threadgroup    rubythreadgroup  thread group
threadgroup rubythreadlist remove new integer system identityhashcode rubythread
thread setthreadgroup this
rubythreadlist put new integer system identityhashcode rubythread    rubythread
return this
public synchronized void remove rubythread rubythread
rubythread setthreadgroup null
rubythreadlist remove new integer system identityhashcode rubythread
@jrubymethod name      frame   true
public irubyobject enclose block block
enclosed   true
return this
@jrubymethod name      frame   true
public irubyobject enclosed_p block block
return new rubyboolean getruntime    enclosed
@jrubymethod name      frame   true
public synchronized irubyobject list block block
return getruntime   newarraynocopy  irubyobject  rubythreadlist values   toarray new irubyobject
private rubythreadgroup ruby runtime  rubyclass type
super runtime  type