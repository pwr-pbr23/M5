/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2006 ola bini <ola@ologix.com>
* copyright (c) 2007 peter brant <peter.brant@gmail.com>
* copyright (c) 2008 the jruby community <www.headius.com>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby internal runtime methods
import java lang reflect method
import java lang reflect modifier
import org jruby rubymodule
import org jruby anno jrubymethod
import org jruby parser staticscope
import org jruby runtime arity
import org jruby runtime methodfactory
import org jruby runtime visibility
/**
* this methodfactory uses reflection to provide method handles. reflection is
* typically slower than code-generated handles, but it does provide a simple
* mechanism for binding in environments where code-generation isn't supported.
*
* @see org.jruby.internal.runtime.methods.methodfactory
*/
public class reflectionmethodfactory extends methodfactory
/**
* use reflection to provide a method handle for a compiled ruby method.
*
* @see org.jruby.internal.runtime.methods.methodfactory#getcompiledmethod
*/
public dynamicmethod getcompiledmethod rubymodule implementationclass
string methodname  arity arity  visibility visibility
staticscope scope  object scriptobject  callconfiguration callconfig
try
method method   scriptobject getclass   getmethod methodname  compiled_method_params
return new reflectedcompiledmethod implementationclass  arity  visibility  scope  scriptobject  method  callconfig
catch  nosuchmethodexception nsme
throw new runtimeexception     methodname       scriptobject getclass
/**
* use reflection to provide a method handle based on an annotated java
* method.
*
* @see org.jruby.internal.runtime.methods.methodfactory#getannotatedmethod
*/
public dynamicmethod getannotatedmethod rubymodule implementationclass  method method
jrubymethod jrubymethod   method getannotation jrubymethod class
javamethod ic   new reflectedjavamethod implementationclass  method  jrubymethod
ic setjavaname method getname
ic setargumenttypes method getparametertypes
ic setsingleton modifier isstatic method getmodifiers
ic setcallconfig callconfiguration getcallconfigbyanno jrubymethod
return ic
/**
* use reflection to generate a set of method handles based on all annotated
* methods in the target class.
*
* @see org.jruby.internal.runtime.methods.methodfactory#defineindexedannotatedmethods
*/
@override
public void defineindexedannotatedmethods rubymodule implementationclass  class type  methoddefiningcallback callback
method methods   type getdeclaredmethods
for  method method   methods
jrubymethod jrubymethod   method getannotation jrubymethod class
if  jrubymethod    null  continue
callback define implementationclass  method  getannotatedmethod implementationclass  method