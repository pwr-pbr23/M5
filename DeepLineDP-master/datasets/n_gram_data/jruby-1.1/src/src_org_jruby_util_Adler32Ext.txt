/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby util
import java lang reflect field
import java util zip adler32
import java util zip checksum
/**
* this class is a wrapper around adler32 which provides the capability to
* update the running total. this functionality is provided by quite risky
* reflection and should be fixed in a better way later on.
*/
public class adler32ext implements checksum
private int adler
private final adler32 intern
private static final field intern_adler
static
try
intern_adler   adler32 class getdeclaredfield
intern_adler setaccessible true
catch final nosuchfieldexception nsfe
throw new runtimeexception
/**
* creates the basic object with default initial adler.
*/
public adler32ext
this 1
/**
* creates the basic object with the adler provided.
*
* @param adler the number to use as starting point for the adler-32 algorithm
*/
public adler32ext final int adler
super
this adler adler
this intern   new adler32
setadlerref this adler
/**
* sets the adler running total to the specified value.
*
* @param adler the number to use as current value for the adler-32 algorithm
*/
public void setadler final int adler
this adler   adler
setadlerref this adler
/**
* @see java.util.zip.checksum#update
*/
public void update final int b
this intern update b
/**
* @see java.util.zip.checksum#update
*/
public void update final byte b  final int off  final int len
this intern update b off len
/**
* @see java.util.zip.checksum#update
*/
public void update final byte b
this intern update b
/**
* @see java.util.zip.checksum#reset
*/
public void reset
this intern reset
this adler   1
/**
* @see java.util.zip.checksum#getvalue
*/
public long getvalue
return this intern getvalue
/**
* helper method to set the reference through reflection.
*
* @param val the value to set.
*/
private void setadlerref final int val
try
intern_adler setint intern val
catch final illegalaccessexception e
throw new illegalstateexception e tostring