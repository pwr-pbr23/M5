/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2004 charles o nutter <headius@headius.com>
* copyright (c) 2004 stefan matthias aust <sma@3plus4.de>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby
import org jruby anno jrubymethod
import org jruby internal runtime methods dynamicmethod
import org jruby runtime block
import org jruby runtime objectallocator
import org jruby runtime builtin irubyobject
/**
*
* note: this was renamed from unboundmethod.java
*
* @author jpetersen
*/
public class rubyunboundmethod extends rubymethod
protected rubyunboundmethod ruby runtime
super runtime  runtime getunboundmethod
public static rubyunboundmethod newunboundmethod
rubymodule implementationmodule
string methodname
rubymodule originmodule
string originname
dynamicmethod method
rubyunboundmethod newmethod   new rubyunboundmethod implementationmodule getruntime
newmethod implementationmodule   implementationmodule
newmethod methodname   methodname
newmethod originmodule   originmodule
newmethod originname   originname
newmethod method   method
return newmethod
public static rubyclass defineunboundmethodclass ruby runtime
// todo: not_allocatable_allocator is probably ok here. confirm. jruby-415
rubyclass newclass
runtime defineclass    runtime getmethod    objectallocator not_allocatable_allocator
runtime setunboundmethod newclass
newclass defineannotatedmethods rubyunboundmethod class
return newclass
/**
* @see org.jruby.rubymethod#call(irubyobject[])
*/
@jrubymethod name           rest   true  frame   true
public irubyobject call irubyobject args  block block
throw getruntime   newtypeerror
/**
* @see org.jruby.rubymethod#unbind()
*/
@jrubymethod name      frame   true
public rubyunboundmethod unbind block block
return this
@jrubymethod name      required   1  frame   true
public rubymethod bind irubyobject areceiver  block block
rubyclass receiverclass   areceiver getmetaclass
if   originmodule isinstance areceiver
if  originmodule instanceof metaclass
throw getruntime   newtypeerror
else if  receiverclass instanceof metaclass    receiverclass getmethods   containskey originname
throw getruntime   newtypeerror     originname
else if
originmodule ismodule   ? originmodule isinstance areceiver    areceiver gettype      originmodule
// fix replace type() == ... with isinstanceof(...)
throw getruntime   newtypeerror     originmodule getname
return rubymethod newmethod implementationmodule  methodname  receiverclass  originname  method  areceiver
@jrubymethod name
public rubymethod rbclone
return newunboundmethod implementationmodule  methodname  originmodule  originname  method
@jrubymethod name      frame   true
public irubyobject to_proc block unusedblock
return super to_proc unusedblock