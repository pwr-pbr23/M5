package org jruby util collections
import java util abstractcollection
import java util abstractset
import java util collection
import java util iterator
import java util nosuchelementexception
import java util set
public class inthashmap
private transient entry table
private transient int count
transient volatile set keyset   null
transient volatile collection values   null
private int threshold
private float loadfactor
private static class entry
int hash
int key
object value
entry next
protected entry int hash  int key  object value  entry next
this hash   hash
this key   key
this value   value
this next   next
public inthashmap
this 20  0 75f
public inthashmap int initialcapacity
this initialcapacity  0 75f
public inthashmap int initialcapacity  float loadfactor
super
if  initialcapacity < 0
throw new illegalargumentexception     initialcapacity
if  loadfactor <  0
throw new illegalargumentexception     loadfactor
if  initialcapacity    0
initialcapacity   1
this loadfactor   loadfactor
table   new entry
threshold    int   initialcapacity   loadfactor
public int size
return count
public boolean isempty
return count    0
public boolean contains object value
if  value    null
throw new nullpointerexception
entry tab   table
for  int i   tab length  i   > 0
for  entry e   tab  e    null  e   e next
if  e value equals value
return true
return false
public boolean containsvalue object value
return contains value
public boolean containskey int key
entry tab   table
int hash   key
int index    hash   0x7fffffff  % tab length
for  entry e   tab  e    null  e   e next
if  e hash    hash
return true
return false
public object get int key
entry tab   table
int hash   key
int index    hash   0x7fffffff  % tab length
for  entry e   tab  e    null  e   e next
if  e hash    hash
return e value
return null
protected void rehash
int oldcapacity   table length
entry oldmap   table
int newcapacity   oldcapacity   2   1
entry newmap   new entry
threshold    int   newcapacity   loadfactor
table   newmap
for  int i   oldcapacity  i   > 0
for  entry old   oldmap  old    null
entry e   old
old   old next
int index    e hash   0x7fffffff  % newcapacity
e next   newmap
newmap   e
entry getentry int key
entry tab   table
int hash   key
int index    hash   0x7fffffff  % tab length
for entry e   tab  e    null  e   e next
if  e hash    hash
return e
return null
public object put int key  object value
// makes sure the key is not already in the hashtable.
entry tab   table
int hash   key
int index    hash   0x7fffffff  % tab length
for  entry e   tab  e    null  e   e next
if  e hash    hash
object old   e value
e value   value
return old
if  count >  threshold
// rehash the table if the threshold is exceeded
rehash
tab   table
index    hash   0x7fffffff  % tab length
// creates the new entry.
entry e   new entry hash  key  value  tab
tab   e
count
return null
public object remove int key
entry tab   table
int hash   key
int index    hash   0x7fffffff  % tab length
for  entry e   tab  prev   null  e    null  prev   e  e   e next
if  e hash    hash
if  prev    null
prev next   e next
else
tab   e next
count
object oldvalue   e value
e value   null
return oldvalue
return null
public synchronized void clear
entry tab   table
for  int index   tab length    index >  0
tab   null
count   0
private abstract class hashiterator implements iterator
entry next     next entry to return
int index     current slot
entry current     current entry
hashiterator
entry t   table
int i   t length
entry n   null
if count    0       advance to first entry
while  i > 0     n   t     null
next   n
index   i
public boolean hasnext
return next    null
entry nextentry
entry e   next
if e    null
throw new nosuchelementexception
entry n   e next
entry t   table
int i   index
while n    null    i > 0
n   t
index   i
next   n
return current   e
public void remove
throw new unsupportedoperationexception
private class valueiterator extends hashiterator
public object next
return nextentry   value
private class keyiterator extends hashiterator
public object next
return new integer nextentry   key
private class entryiterator extends hashiterator
public object next
return nextentry
iterator newkeyiterator
return new keyiterator
iterator newvalueiterator
return new valueiterator
iterator newentryiterator
return new entryiterator
private transient set entryset   null
public set keyset
set ks   keyset
return  ks    null ? ks    keyset   new keyset
private class keyset extends abstractset
public iterator iterator
return newkeyiterator
public int size
return count
public boolean contains object o
if o instanceof number
return containskey   number o  intvalue
return false
public boolean remove object o
throw new unsupportedoperationexception
public void clear
inthashmap this clear
public collection values
collection vs   values
return  vs    null ? vs    values   new values
private class values extends abstractcollection
public iterator iterator
return newvalueiterator
public int size
return count
public boolean contains object o
return containsvalue o
public void clear
inthashmap this clear
public set entryset
set es   entryset
return  es    null ? es    entryset   new entryset
private class entryset extends abstractset
public iterator iterator
return newentryiterator
public boolean contains object o
if    o instanceof entry
return false
entry e    entry o
entry candidate   getentry e key
return candidate    null    candidate equals e
public boolean remove object o
throw new unsupportedoperationexception
public int size
return count
public void clear
inthashmap this clear