/*
***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2001 chad fowler <chadfowler@chadfowler.com>
* copyright (c) 2001-2002 benoit cerrina <b.cerrina@wanadoo.fr>
* copyright (c) 2001-2002 jan arne petersen <jpetersen@uni-bonn.de>
* copyright (c) 2002 anders bengtsson <ndrsbngtssn@yahoo.se>
* copyright (c) 2004 thomas e enebo <enebo@acm.org>
* copyright (c) 2007 mirko stocker <me@misto.ch>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby ast
import java util list
import org jruby ast visitor nodevisitor
import org jruby evaluator instruction
import org jruby lexer yacc isourceposition
import org jruby runtime arity
/**
* arguments for a function definition.
* <ul>
* <li>u1 ==&gt; optnode (blocknode) optional argument description</li>
* <li>u2 ==&gt; rest (int) index of the rest argument (the array arg with a * in front</li>
* <li>u3 ==&gt; count (int) number of arguments</li>
* </ul>
*/
public class argsnode extends node
private final listnode arguments
private final listnode optargs
private final argumentnode restargnode
private final int restarg
private final blockargnode blockargnode
private final arity arity
/**
*
* @param optionalarguments  node describing the optional arguments
* 				this block will contain assignments to locals (lasgnnode)
* @param restarguments  index of the rest argument in the local table
* 				(the array argument prefixed by a * which collects
* 				all additional params)
* 				or -1 if there is none.
* @param argscount number of regular arguments
* @param restargnode the rest argument (*args).
* @param blockargnode an optional block argument (&amp;arg).
**/
public argsnode isourceposition position  listnode arguments  listnode optionalarguments
int restarguments  argumentnode restargnode  blockargnode blockargnode
super position  nodetype argsnode
this arguments   arguments
this optargs   optionalarguments
this restarg   restarguments
this restargnode   restargnode
this blockargnode   blockargnode
if  getrestarg       2
arity   arity optional
else if  getoptargs      null    getrestarg   >  0
arity   arity required getrequiredargscount
else
arity   arity createarity getrequiredargscount
/**
* accept for the visitor pattern.
* @param ivisitor the visitor
**/
public instruction accept nodevisitor ivisitor
return ivisitor visitargsnode this
/**
* gets main arguments (as tokens)
*/
public listnode getargs
return arguments
public arity getarity
return arity
public int getrequiredargscount
return arguments    null ? 0   arguments size
public int getoptionalargscount
return optargs    null ? 0   optargs size
/**
* gets the optargs.
* @return returns a listnode
*/
public listnode getoptargs
return optargs
/**
* gets the restarg.
* @return returns a int
*/
public int getrestarg
return restarg
/**
* gets the restargnode.
* @return returns an argumentnode
*/
public argumentnode getrestargnode
return restargnode
/**
* gets the blockargnode.
* @return returns a blockargnode
*/
public blockargnode getblockargnode
return blockargnode
public list<node> childnodes
return node createlist arguments  optargs  restargnode  blockargnode