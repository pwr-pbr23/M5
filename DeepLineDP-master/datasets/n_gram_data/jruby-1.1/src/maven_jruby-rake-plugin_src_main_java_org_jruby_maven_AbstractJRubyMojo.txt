package org jruby maven
import org apache maven plugin abstractmojo
import java io file
import java util arraylist
import java util iterator
import java util list
import org apache maven artifact artifact
import org apache maven artifact dependencyresolutionrequiredexception
import org apache maven plugin mojoexecutionexception
import org apache maven plugin logging log
import org apache maven project mavenproject
import org apache tools ant buildevent
import org apache tools ant buildlistener
import org apache tools ant project
import org apache tools ant taskdefs java
import org apache tools ant types commandline argument
import org apache tools ant types environment variable
import org apache tools ant types path
import org codehaus plexus util stringutils
/**
* base for all jruby mojos.
*
* @requiresdependencyresolution compile
*/
public abstract class abstractjrubymojo extends abstractmojo
protected boolean shouldfork   true
/**
* @parameter expression="${project}"
*/
protected mavenproject mavenproject
/**
* @parameter expression="${project.basedir}"
* @required
*/
protected file launchdirectory
/**
* @parameter expression="${jruby.home}"
*/
protected string jrubyhome
/**
* the amount of memory to use when forking jruby. default is "384m".
*
* @parameter expression="${jruby.launch.memory}"
*/
protected string jrubylaunchmemory
/**
* the project compile classpath.
*
* @parameter default-value="${project.compileclasspathelements}"
* @required
* @readonly
*/
private list compileclasspathelements
/**
* the plugin dependencies.
*
* @parameter expression="${plugin.artifacts}"
* @required
* @readonly
*/
private list pluginartifacts
protected java jruby string args  throws mojoexecutionexception
launchdirectory mkdirs
project project   null
try
project   getproject
catch  dependencyresolutionrequiredexception e
throw new mojoexecutionexception    e
java java   new java
java setproject project
java setclassname
java setfailonerror true
argument arg
if  shouldfork
java setfork true
java setdir launchdirectory
arg   java createjvmarg
arg setvalue     jrubylaunchmemory
variable classpath   new variable
path p   new path java getproject
p add  path  project getreference
p add  path  project getreference
classpath setkey
classpath setvalue p tostring
java addenv classpath
if  jrubyhome    null
variable v   new variable
v setkey
v setvalue jrubyhome
java addsysproperty v
path p   java createclasspath
p add  path  project getreference
p add  path  project getreference
getlog   debug     p tostring
for  int i   0  i < args length  i
arg   java createarg
arg setvalue args
return java
protected void ensuregems string gemnames  throws mojoexecutionexception
list args   new arraylist
args add
args add
for  int i   0  i < gemnames length  i
args add gemnames
java jruby   jruby  string  args toarray new string
jruby execute
protected void ensuregem string gemname  throws mojoexecutionexception
ensuregems new string  gemname
protected project getproject   throws dependencyresolutionrequiredexception
project project   new project
project setbasedir mavenproject getbasedir
project addbuildlistener new logadapter
addreference project     compileclasspathelements
addreference project     pluginartifacts
return project
protected void addreference project project  string reference  list artifacts  throws dependencyresolutionrequiredexception
list list   new arraylist artifacts size
for  iterator i   artifacts iterator    i hasnext
object elem   i next
string path
if  elem instanceof artifact
artifact a    artifact  elem
file file   a getfile
if  file    null
throw new dependencyresolutionrequiredexception a
path   file getpath
else
path   elem tostring
list add path
path p   new path project
p setpath stringutils join list iterator    file pathseparator
project addreference reference  p
public class logadapter implements buildlistener
public void buildstarted buildevent event
log event
public void buildfinished buildevent event
log event
public void targetstarted buildevent event
log event
public void targetfinished buildevent event
log event
public void taskstarted buildevent event
log event
public void taskfinished buildevent event
log event
public void messagelogged buildevent event
log event
private void log buildevent event
int priority   event getpriority
log log   getlog
switch  priority
case project msg_err
log error event getmessage
break
case project msg_warn
log warn event getmessage
break
case project msg_info
log info event getmessage
break
case project msg_verbose
log debug event getmessage
break
case project msg_debug
log debug event getmessage
break
default
log info event getmessage
break