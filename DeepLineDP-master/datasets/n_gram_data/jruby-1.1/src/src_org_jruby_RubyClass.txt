/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2001-2004 jan arne petersen <jpetersen@uni-bonn.de>
* copyright (c) 2002-2004 anders bengtsson <ndrsbngtssn@yahoo.se>
* copyright (c) 2004-2005 thomas e enebo <enebo@acm.org>
* copyright (c) 2004 stefan matthias aust <sma@3plus4.de>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby
import java io ioexception
import java util arraylist
import java util collection
import java util collections
import java util set
import org jruby anno jrubymethod
import org jruby internal runtime methods dynamicmethod
import org jruby javasupport util runtimehelpers
import org jruby runtime block
import org jruby runtime calltype
import org jruby runtime classindex
import org jruby runtime objectallocator
import org jruby runtime objectmarshal
import org jruby runtime threadcontext
import org jruby runtime visibility
import org jruby runtime builtin irubyobject
import org jruby runtime marshal marshalstream
import org jruby runtime marshal unmarshalstream
import org jruby util collections weakhashset
/**
*
* @author  jpetersen
*/
public class rubyclass extends rubymodule
public static void createclassclass ruby runtime  rubyclass classclass
classclass index   classindex class
classclass kindof   new rubymodule kindof
public boolean iskindof irubyobject obj  rubymodule type
return obj instanceof rubyclass
classclass undefinemethod
classclass undefinemethod
classclass undefinemethod
classclass defineannotatedmethods rubyclass class
// this is a non-standard method; have we decided to start extending ruby?
//classclass.definefastmethod("subclasses", callbackfactory.getfastoptmethod("subclasses"));
// fixme: for some reason this dispatcher causes a verifyerror...
//classclass.dispatcher = callbackfactory.createdispatcher(classclass);
public static final objectallocator class_allocator   new objectallocator
public irubyobject allocate ruby runtime  rubyclass klass
rubyclass clazz   new rubyclass runtime
clazz allocator   objectallocator not_allocatable_allocator     class allocate object is not allocatable before it is initialized
return clazz
public objectallocator getallocator
return allocator
public void setallocator objectallocator allocator
this allocator   allocator
@jrubymethod name
public irubyobject allocate
if  superclass    null  throw runtime newtypeerror
irubyobject obj   allocator allocate runtime  this
if  obj getmetaclass   getrealclass      getrealclass    throw runtime newtypeerror
return obj
public int getnativetypeindex
return classindex class
public boolean ismodule
return false
public boolean isclass
return true
public boolean issingleton
return false
/** boot_defclass
* create an initial object meta class before module and kernel dependencies have
* squirreled themselves together.
*
* @param runtime we need it
* @return a half-baked meta class for object
*/
public static rubyclass createbootstrapclass ruby runtime  string name  rubyclass superclass  objectallocator allocator
rubyclass obj
if  superclass    null         boot the object class
obj   new rubyclass runtime
obj marshal   default_object_marshal
else                         boot the module and class classes
obj   new rubyclass runtime  superclass
obj setallocator allocator
obj setbasename name
return obj
private final ruby runtime
private objectallocator allocator     the default allocator
protected objectmarshal marshal
private set<rubyclass> subclasses
/** separate path for metaclass and includedmodulewrapper construction
*  (rb_class_boot version for metaclasses)
*  no marshal, allocator initialization and addsubclass(this) here!
*/
protected rubyclass ruby runtime  rubyclass superclass  boolean objectspace
super runtime  runtime getclassclass    objectspace
this runtime   runtime
this superclass   superclass     this is the only case it might be null here  in metaclass construction
/** used by class_allocator (any class' class will be a class!)
*  also used to bootstrap object class
*/
protected rubyclass ruby runtime
super runtime  runtime getclassclass
this runtime   runtime
index   classindex class
/** rb_class_boot (for plain classes)
*  also used to bootstrap module and class classes
*/
protected rubyclass ruby runtime  rubyclass superclazz
this runtime
superclass   superclazz
marshal   superclazz marshal     use parent's marshal
superclazz addsubclass this
infectby superclass
/** rb_class_new
*
*/
public static rubyclass newclass ruby runtime  rubyclass superclass
if  superclass    runtime getclassclass    throw runtime newtypeerror
if  superclass issingleton    throw runtime newtypeerror
return new rubyclass runtime  superclass
/** rb_class_new/rb_define_class_id/rb_name_class/rb_set_class_path
*
*/
public static rubyclass newclass ruby runtime  rubyclass superclass  string name  objectallocator allocator  rubymodule parent  boolean setparent
rubyclass clazz   newclass runtime  superclass
clazz setbasename name
clazz setallocator allocator
clazz makemetaclass superclass getmetaclass
if  setparent  clazz setparent parent
parent setconstant name  clazz
clazz inherit superclass
return clazz
/** rb_make_metaclass
*
*/
public rubyclass makemetaclass rubyclass superclass
if  issingleton         could be pulled down to rubyclass in future
metaclass klass   new metaclass getruntime    superclass      rb_class_boot
setmetaclass klass
klass setattached this
klass setmetaclass klass
klass setsuperclass getsuperclass   getrealclass   getmetaclass
return klass
else
return super makemetaclass superclass
public irubyobject invoke threadcontext context  irubyobject self  int methodindex  string name  irubyobject args  calltype calltype  block block
if  context getruntime   haseventhooks    return invoke context  self  name  args  calltype  block
return dispatcher callmethod context  self  this  methodindex  name  args  calltype  block
public irubyobject invoke threadcontext context  irubyobject self  string name
irubyobject args  calltype calltype  block block
assert args    null
dynamicmethod method   null
method   searchmethod name
if  method isundefined        name equals        method iscallablefrom context getframeself    calltype
return runtimehelpers callmethodmissing context  self  method  name  args  context getframeself    calltype  block
return method call context  self  this  name  args  block
public irubyobject invoke threadcontext context  irubyobject self  string name
irubyobject arg  calltype calltype  block block
dynamicmethod method   null
method   searchmethod name
if  method isundefined        name equals        method iscallablefrom context getframeself    calltype
return runtimehelpers callmethodmissing context  self  method  name  new irubyobject  arg   context getframeself    calltype  block
return method call context  self  this  name  arg  block
public irubyobject invokeinherited threadcontext context  irubyobject self
irubyobject subclass
string name
dynamicmethod method   getmetaclass   searchmethod name
irubyobject args   new irubyobject  subclass
if  method isundefined
return runtimehelpers callmethodmissing context  self  method  name  args  context getframeself    calltype functional  block null_block
return method call context  self  getmetaclass    name  args  block null_block
/** rb_class_new_instance
*
*/
@jrubymethod name      rest   true  frame   true
public irubyobject newinstance threadcontext context  irubyobject args  block block
irubyobject obj   allocate
obj callmethod context     args  block
return obj
/** rb_class_initialize
*
*/
@jrubymethod name      optional   1  frame   true  visibility   visibility private
public irubyobject initialize irubyobject args  block block
if  superclass    null
system out println classid
throw getruntime   newtypeerror
irubyobject superobject
if  args length    0
superobject   getruntime   getobject
else
superobject   args
checkinheritable superobject
rubyclass superclazz    rubyclass  superobject
superclass   superclazz
allocator   superclazz allocator
makemetaclass superclazz getmetaclass
marshal   superclazz marshal
superclazz addsubclass this
super initialize block
inherit superclazz
return this
/** rb_class_init_copy
*
*/
@jrubymethod name      required   1
public irubyobject initialize_copy irubyobject original
if  superclass    null  throw runtime newtypeerror
if  original instanceof metaclass  throw getruntime   newtypeerror
super initialize_copy original
allocator     rubyclass original  allocator
return this
// todo: someday, enable.
// @jrubymethod(name = "subclasses", optional = 1)
public irubyobject subclasses irubyobject args
boolean recursive   false
if  args length    1
if  args instanceof rubyboolean
recursive   args istrue
else
getruntime   newtypeerror args  getruntime   fastgetclass
return rubyarray newarray getruntime    subclasses recursive   freeze
public collection subclasses boolean includedescendants
if  subclasses    null
collection<rubyclass> mine   new arraylist<rubyclass> subclasses
if  includedescendants
for  rubyclass i  subclasses
mine addall i subclasses includedescendants
return mine
else
return collections empty_list
public synchronized void addsubclass rubyclass subclass
if  subclasses    null  subclasses   new weakhashset<rubyclass>
subclasses add subclass
public ruby getclassruntime
return runtime
public rubyclass getrealclass
return this
@jrubymethod name      required   1
public irubyobject inherited irubyobject arg
return getruntime   getnil
/** rb_class_inherited (reversed semantics!)
*
*/
public void inherit rubyclass superclazz
if  superclazz    null  superclazz   getruntime   getobject
superclazz invokeinherited
getruntime   getcurrentcontext    superclazz
this
/** return the real super class of this class.
*
* rb_class_superclass
*
*/
@jrubymethod name
public irubyobject superclass
rubyclass superclazz   superclass
if  superclazz    null  throw runtime newtypeerror
if issingleton    superclazz   metaclass
while  superclazz    null    superclazz isincluded    superclazz   superclazz superclass
return superclazz    null ? superclazz   getruntime   getnil
/** rb_check_inheritable
*
*/
public static void checkinheritable irubyobject superclass
if    superclass instanceof rubyclass
throw superclass getruntime   newtypeerror     superclass getmetaclass
if    rubyclass superclass  issingleton
throw superclass getruntime   newtypeerror
public final objectmarshal getmarshal
return marshal
public final void setmarshal objectmarshal marshal
this marshal   marshal
public final void marshal object obj  marshalstream marshalstream  throws ioexception
getmarshal   marshalto getruntime    obj  this  marshalstream
public final object unmarshal unmarshalstream unmarshalstream  throws ioexception
return getmarshal   unmarshalfrom getruntime    this  unmarshalstream
public static void marshalto rubyclass clazz  marshalstream output  throws java io ioexception
output registerlinktarget clazz
output writestring marshalstream getpathfromclass clazz
public static rubyclass unmarshalfrom unmarshalstream input  throws java io ioexception
string name   rubystring bytelisttostring input unmarshalstring
rubyclass result   unmarshalstream getclassfrompath input getruntime    name
input registerlinktarget result
return result
protected static final objectmarshal default_object_marshal   new objectmarshal
public void marshalto ruby runtime  object obj  rubyclass type
marshalstream marshalstream  throws ioexception
irubyobject object    irubyobject obj
marshalstream registerlinktarget object
marshalstream dumpvariables object getvariablelist
public object unmarshalfrom ruby runtime  rubyclass type
unmarshalstream unmarshalstream  throws ioexception
irubyobject result   type allocate
unmarshalstream registerlinktarget result
unmarshalstream defaultvariablesunmarshal result
return result