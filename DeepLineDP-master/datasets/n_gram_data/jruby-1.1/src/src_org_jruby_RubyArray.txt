/*
**** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2001 alan moore <alan_moore@gmx.net>
* copyright (c) 2001 chad fowler <chadfowler@chadfowler.com>
* copyright (c) 2001-2002 benoit cerrina <b.cerrina@wanadoo.fr>
* copyright (c) 2001-2004 jan arne petersen <jpetersen@uni-bonn.de>
* copyright (c) 2002-2004 anders bengtsson <ndrsbngtssn@yahoo.se>
* copyright (c) 2002-2005 thomas e enebo <enebo@acm.org>
* copyright (c) 2004-2005 charles o nutter <headius@headius.com>
* copyright (c) 2004 stefan matthias aust <sma@3plus4.de>
* copyright (c) 2006 ola bini <ola.bini@ki.se>
* copyright (c) 2006 daniel steer <damian.steer@hp.com>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby
import java lang reflect array
import java io ioexception
import java util arrays
import java util collection
import java util comparator
import java util iterator
import java util list
import java util listiterator
import org jruby anno jrubymethod
import org jruby common irubywarnings id
import org jruby javasupport javautil
import org jruby runtime arity
import org jruby runtime block
import org jruby runtime callbackfactory
import org jruby runtime classindex
import org jruby runtime methodindex
import org jruby runtime objectallocator
import org jruby runtime threadcontext
import org jruby runtime visibility
import org jruby runtime builtin irubyobject
import org jruby runtime marshal marshalstream
import org jruby runtime marshal unmarshalstream
import org jruby util bytelist
import org jruby util pack
/**
* the implementation of the built-in class array in ruby.
*
* concurrency: no synchronization is required among readers, but
* all users must synchronize externally with writers.
*
*/
public class rubyarray extends rubyobject implements list
public static rubyclass createarrayclass ruby runtime
rubyclass arrayc   runtime defineclass    runtime getobject    array_allocator
runtime setarray arrayc
arrayc index   classindex array
arrayc kindof   new rubymodule kindof
public boolean iskindof irubyobject obj  rubymodule type
return obj instanceof rubyarray
callbackfactory callbackfactory   runtime callbackfactory rubyarray class
arrayc includemodule runtime getenumerable
arrayc defineannotatedmethods rubyarray class
arrayc dispatcher   callbackfactory createdispatcher arrayc
return arrayc
private static objectallocator array_allocator   new objectallocator
public irubyobject allocate ruby runtime  rubyclass klass
return new rubyarray runtime  klass
public int getnativetypeindex
return classindex array
/** rb_ary_s_create
*
*/
@jrubymethod name      rest   true  frame   true  meta   true
public static irubyobject create irubyobject klass  irubyobject args  block block
rubyarray arr    rubyarray    rubyclass  klass  allocate
arr callinit irubyobject null_array  block
if  args length > 0
arr alloc args length
system arraycopy args  0  arr values  0  args length
arr reallength   args length
return arr
/** rb_ary_new2
*
*/
public static final rubyarray newarray final ruby runtime  final long len
return new rubyarray runtime  len
public static final rubyarray newarraylight final ruby runtime  final long len
return new rubyarray runtime  len  false
/** rb_ary_new
*
*/
public static final rubyarray newarray final ruby runtime
return new rubyarray runtime  array_default_size
/** rb_ary_new
*
*/
public static final rubyarray newarraylight final ruby runtime
/* ruby arrays default to holding 16 elements, so we create an
* arraylist of the same size if we're not told otherwise
*/
rubyarray arr   new rubyarray runtime  false
arr alloc array_default_size
return arr
public static rubyarray newarray ruby runtime  irubyobject obj
return new rubyarray runtime  new irubyobject   obj
/** rb_assoc_new
*
*/
public static rubyarray newarray ruby runtime  irubyobject car  irubyobject cdr
return new rubyarray runtime  new irubyobject   car  cdr
public static rubyarray newemptyarray ruby runtime
return new rubyarray runtime  null_array
/** rb_ary_new4, rb_ary_new3
*
*/
public static rubyarray newarray ruby runtime  irubyobject args
rubyarray arr   new rubyarray runtime  args length
system arraycopy args  0  arr values  0  args length
arr reallength   args length
return arr
public static rubyarray newarraynocopy ruby runtime  irubyobject args
return new rubyarray runtime  args
public static rubyarray newarraynocopy ruby runtime  irubyobject args  int begin
return new rubyarray runtime  args  begin
public static rubyarray newarraynocopylight ruby runtime  irubyobject args
rubyarray arr   new rubyarray runtime  false
arr values   args
arr reallength   args length
return arr
public static rubyarray newarray ruby runtime  collection collection
rubyarray arr   new rubyarray runtime  collection size
collection toarray arr values
arr reallength   arr values length
return arr
public static final int array_default_size   16
private irubyobject values
private static final int tmplock_arr_f   1 << 9
private static final int tmplock_or_frozen_arr_f   tmplock_arr_f   frozen_f
private volatile boolean isshared   false
private int begin   0
private int reallength   0
/*
* plain internal array assignment
*/
private rubyarray ruby runtime  irubyobject vals
super runtime  runtime getarray
values   vals
reallength   vals length
/*
* plain internal array assignment
*/
private rubyarray ruby runtime  irubyobject vals  int begin
super runtime  runtime getarray
this values   vals
this begin   begin
this reallength   vals length   begin
this isshared   true
/* rb_ary_new2
* just allocates the internal array
*/
private rubyarray ruby runtime  long length
super runtime  runtime getarray
checklength length
alloc  int  length
private rubyarray ruby runtime  long length  boolean objectspace
super runtime  runtime getarray    objectspace
checklength length
alloc  int length
/* rb_ary_new3, rb_ary_new4
* allocates the internal array of size length and copies the 'length' elements
*/
public rubyarray ruby runtime  long length  irubyobject vals
super runtime  runtime getarray
checklength length
int ilength    int  length
alloc ilength
if  ilength > 0    vals length > 0  system arraycopy vals  0  values  0  ilength
reallength   ilength
/* newobj and objsetup equivalent
* fastest one, for shared arrays, optional objectspace
*/
private rubyarray ruby runtime  boolean objectspace
super runtime  runtime getarray    objectspace
private rubyarray ruby runtime
super runtime  runtime getarray
alloc array_default_size
public rubyarray ruby runtime  rubyclass klass
super runtime  klass
alloc array_default_size
/* array constructors taking the metaclass to fulfil mri array subclass behaviour
*
*/
private rubyarray ruby runtime  rubyclass klass  int length
super runtime  klass
alloc length
private rubyarray ruby runtime  rubyclass klass  long length
super runtime  klass
checklength length
alloc  int length
private rubyarray ruby runtime  rubyclass klass  long length  boolean objectspace
super runtime  klass  objectspace
checklength length
alloc  int length
private rubyarray ruby runtime  rubyclass klass  boolean objectspace
super runtime  klass  objectspace
private rubyarray ruby runtime  rubyclass klass  rubyarray original
super runtime  klass
reallength   original reallength
alloc reallength
system arraycopy original values  original begin  values  0  reallength
private final irubyobject reserve int length
return new irubyobject
private final void alloc int length
values   new irubyobject
private final void realloc int newlength
irubyobject reallocated   new irubyobject
system arraycopy values  0  reallocated  0  newlength > reallength ? reallength   newlength
values   reallocated
private final void checklength long length
if  length < 0
throw getruntime   newargumenterror
if  length >  integer max_value
throw getruntime   newargumenterror
/** getter for property list.
* @return value of property list.
*/
public list getlist
return arrays aslist tojavaarray
public int getlength
return reallength
public irubyobject tojavaarray
irubyobject copy   reserve reallength
system arraycopy values  begin  copy  0  reallength
return copy
public irubyobject tojavaarrayunsafe
return  isshared ? values   tojavaarray
public irubyobject tojavaarraymaybeunsafe
return   isshared    begin    0    values length    reallength  ? values   tojavaarray
/** rb_ary_make_shared
*
*/
private final rubyarray makeshared int beg  int len  rubyclass klass
return makeshared beg  len  klass  klass getruntime   isobjectspaceenabled
/** rb_ary_make_shared
*
*/
private final rubyarray makeshared int beg  int len  rubyclass klass  boolean objectspace
rubyarray sharedarray   new rubyarray getruntime    klass  objectspace
isshared   true
sharedarray values   values
sharedarray isshared   true
sharedarray begin   beg
sharedarray reallength   len
return sharedarray
/** rb_ary_modify_check
*
*/
private final void modifycheck
if   flags   tmplock_or_frozen_arr_f     0
if   flags   frozen_f     0  throw getruntime   newfrozenerror
if   flags   tmplock_arr_f     0  throw getruntime   newtypeerror
if   istaint      getruntime   getsafelevel   >  4
throw getruntime   newsecurityerror
/** rb_ary_modify
*
*/
private final void modify
modifycheck
if  isshared
irubyobject vals   reserve reallength
isshared   false
system arraycopy values  begin  vals  0  reallength
begin   0
values   vals
/*  ================
*  instance methods
*  ================
*/
/** rb_ary_initialize
*
*/
@jrubymethod name      required   0  optional   2  frame   true  visibility   visibility private
public irubyobject initialize threadcontext context  irubyobject args  block block
int argc   args length
ruby runtime   getruntime
if  argc    0
modifycheck
reallength   0
if  block isgiven    runtime getwarnings   warn id block_unused
return this
if  argc    1      args instanceof rubyfixnum
irubyobject val   args checkarraytype
if   val isnil
replace val
return this
long len   rubynumeric num2long args
if  len < 0  throw runtime newargumenterror
if  len >  integer max_value  throw runtime newargumenterror
int ilen    int  len
modify
if  ilen > values length  values   reserve ilen
if  block isgiven
if  argc    2
runtime getwarnings   warn id block_beats_default_value
for  int i   0  i < ilen  i
store i  block yield context  new rubyfixnum runtime  i
reallength   i   1
else
arrays fill values  0  ilen   argc    2  ? args   runtime getnil
reallength   ilen
return this
/** rb_ary_initialize_copy
*
*/
@jrubymethod name        required   1  visibility visibility private
public irubyobject initialize_copy irubyobject orig
return this replace orig
/** rb_ary_replace
*
*/
@jrubymethod name        required   1
public irubyobject replace irubyobject orig
modifycheck
rubyarray origarr   orig converttoarray
if  this    orig  return this
origarr isshared   true
isshared   true
values   origarr values
reallength   origarr reallength
begin   origarr begin
return this
/** rb_ary_to_s
*
*/
@jrubymethod name
public irubyobject to_s
if  reallength    0  return getruntime   newstring
return join getruntime   getcurrentcontext    getruntime   getglobalvariables   get
public boolean includes threadcontext context  irubyobject item
int begin   this begin
for  int i   begin  i < begin   reallength  i
if  equalinternal context  values  item  istrue    return true
return false
/** rb_ary_hash
*
*/
@jrubymethod name
public rubyfixnum hash threadcontext context
int h   reallength
ruby runtime   getruntime
int begin   this begin
for  int i   begin  i < begin   reallength  i
h    h << 1     h < 0 ? 1   0
h ^  rubynumeric num2long values callmethod context  methodindex hash
return runtime newfixnum h
/** rb_ary_store
*
*/
public final irubyobject store long index  irubyobject value
if  index < 0
index    reallength
if  index < 0
throw getruntime   newindexerror      index   reallength
modify
if  index >  reallength
if  index >  values length
long newlength   values length >> 1
if  newlength < array_default_size  newlength   array_default_size
newlength    index
if  newlength >  integer max_value
throw getruntime   newargumenterror
realloc  int  newlength
if index    reallength  arrays fill values  reallength   int  index   1  getruntime   getnil
reallength    int  index   1
values   value
return value
/** rb_ary_elt - faster
*
*/
private final irubyobject elt long offset
if  reallength    0    offset < 0    offset >  reallength  return getruntime   getnil
return values
/** rb_ary_elt - faster
*
*/
private final irubyobject elt int offset
if  reallength    0    offset < 0    offset >  reallength  return getruntime   getnil
return values
/** rb_ary_elt - faster
*
*/
private final irubyobject elt_f long offset
if  reallength    0    offset >  reallength  return getruntime   getnil
return values
/** rb_ary_elt - faster
*
*/
private final irubyobject elt_f int offset
if  reallength    0    offset >  reallength  return getruntime   getnil
return values
/** rb_ary_entry
*
*/
public final irubyobject entry long offset
return  offset < 0   ? elt offset   reallength    elt_f offset
/** rb_ary_entry
*
*/
public final irubyobject entry int offset
return  offset < 0   ? elt offset   reallength    elt_f offset
public final irubyobject eltinternal int offset
return values
public final irubyobject eltinternalset int offset  irubyobject item
return values   item
/** rb_ary_fetch
*
*/
@jrubymethod name      required   1  optional   1  frame   true
public irubyobject fetch threadcontext context  irubyobject args  block block
if  args length    2    block isgiven
getruntime   getwarnings   warn id block_beats_default_value
long index   rubynumeric num2long args
if  index < 0  index    reallength
if  index < 0    index >  reallength
if  block isgiven    return block yield context  args
if  args length    1
throw getruntime   newindexerror     index
return args
return values
/** rb_ary_to_ary
*
*/
private static rubyarray arytoary irubyobject obj
if  obj instanceof rubyarray  return  rubyarray  obj
if  obj respondsto     return obj converttoarray
rubyarray arr   new rubyarray obj getruntime    false      possibly should not in object space
arr alloc 1
arr values   obj
arr reallength   1
return arr
/** rb_ary_splice
*
*/
private final void splice long beg  long len  irubyobject rpl
int rlen
if  len < 0  throw getruntime   newindexerror     len
if  beg < 0
beg    reallength
if  beg < 0
beg    reallength
throw getruntime   newindexerror     beg
if  beg   len > reallength  len   reallength   beg
rubyarray rplarr
if  rpl    null    rpl isnil
rplarr   null
rlen   0
else
rplarr   arytoary rpl
rlen   rplarr reallength
modify
if  beg >  reallength
len   beg   rlen
if  len >  values length
int trynewlength   values length    values length >> 1
realloc len > trynewlength ?  int len   trynewlength
arrays fill values  reallength   int  beg  getruntime   getnil
if  rlen > 0
system arraycopy rplarr values  rplarr begin  values   int  beg  rlen
reallength    int  len
else
long alen
if  beg   len > reallength  len   reallength   beg
alen   reallength   rlen   len
if  alen >  values length
int trynewlength   values length    values length >> 1
realloc alen > trynewlength ?  int alen   trynewlength
if  len    rlen
system arraycopy values   int   beg   len   values   int  beg   rlen  reallength    int   beg   len
reallength    int  alen
if  rlen > 0
system arraycopy rplarr values  rplarr begin  values   int  beg  rlen
/** rb_ary_insert
*
*/
@jrubymethod name      required   1  rest   true
public irubyobject insert irubyobject args
if  args length    1  return this
if  args length < 1
throw getruntime   newargumenterror
long pos   rubynumeric num2long args
if  pos     1  pos   reallength
if  pos < 0  pos
rubyarray inserted   new rubyarray getruntime    false
inserted values   args
inserted begin   1
inserted reallength   args length   1
splice pos  0  inserted      rb_ary_new4
return this
/** rb_ary_dup
*
*/
public final rubyarray arydup
rubyarray dup   new rubyarray getruntime    getmetaclass    this
dup flags    flags   tainted_f     from dup_setup
// rb_copy_generic_ivar from dup_setup here ...unlikely..
return dup
/** rb_ary_transpose
*
*/
@jrubymethod name
public rubyarray transpose
rubyarray tmp  result   null
int alen   reallength
if  alen    0  return arydup
ruby runtime   getruntime
int elen    1
int end   begin   alen
for  int i   begin  i < end  i
tmp   elt i  converttoarray
if  elen < 0
elen   tmp reallength
result   new rubyarray runtime  elen
for  int j   0  j < elen  j
result store j  new rubyarray runtime  alen
else if  elen    tmp reallength
throw runtime newindexerror     tmp reallength
elen
for  int j   0  j < elen  j
rubyarray  result elt j   store i   begin  tmp elt j
return result
/** rb_values_at (internal)
*
*/
private final irubyobject values_at long olen  irubyobject args
rubyarray result   new rubyarray getruntime    args length
for  int i   0  i < args length  i
if  args instanceof rubyfixnum
result append entry   rubyfixnum args  getlongvalue
continue
long beglen
if    args instanceof rubyrange
else if   beglen     rubyrange  args  beglen olen  0      null
continue
else
int beg    int  beglen
int len    int  beglen
int end   begin   len
for  int j   begin  j < end  j
result append entry j   beg
continue
result append entry rubynumeric num2long args
return result
/** rb_values_at
*
*/
@jrubymethod name      rest   true
public irubyobject values_at irubyobject args
return values_at reallength  args
/** rb_ary_subseq
*
*/
public irubyobject subseq long beg  long len
if  beg > reallength    beg < 0    len < 0  return getruntime   getnil
if  beg   len > reallength
len   reallength   beg
if  len < 0  len   0
if  len    0  return new rubyarray getruntime    getmetaclass    0
return makeshared begin    int  beg   int  len  getmetaclass
/** rb_ary_subseq
*
*/
public irubyobject subseqlight long beg  long len
if  beg > reallength    beg < 0    len < 0  return getruntime   getnil
if  beg   len > reallength
len   reallength   beg
if  len < 0  len   0
if  len    0  return new rubyarray getruntime    getmetaclass    0  false
return makeshared begin    int  beg   int  len  getmetaclass    false
/** rb_ary_length
*
*/
@jrubymethod name      alias
public rubyfixnum length
return getruntime   newfixnum reallength
/** rb_ary_push - specialized rb_ary_store
*
*/
@jrubymethod name      required   1
public rubyarray append irubyobject item
modify
if  reallength    values length
if  reallength    integer max_value  throw getruntime   newargumenterror
long newlength   values length    values length >> 1
if   newlength > integer max_value
newlength   integer max_value
else if   newlength < array_default_size
newlength   array_default_size
realloc  int  newlength
values   item
return this
/** rb_ary_push_m
* fixme: whis is this named "push_m"?
*/
@jrubymethod name      rest   true
public rubyarray push_m irubyobject items
for  int i   0  i < items length  i
append items
return this
/** rb_ary_pop
*
*/
@jrubymethod name
public irubyobject pop
modifycheck
if  reallength    0  return getruntime   getnil
if   isshared
int index   begin     reallength
irubyobject obj   values
values   null
return obj
return values
/** rb_ary_shift
*
*/
@jrubymethod name
public irubyobject shift
modify
if  reallength    0  return getruntime   getnil
irubyobject obj   values
values   null
isshared   true
begin
reallength
return obj
/** rb_ary_unshift
*
*/
public rubyarray unshift irubyobject item
modify
if  reallength    values length
int newlength   values length >> 1
if  newlength < array_default_size  newlength   array_default_size
newlength    values length
realloc newlength
system arraycopy values  0  values  1  reallength
reallength
values   item
return this
/** rb_ary_unshift_m
*
*/
@jrubymethod name      rest   true
public rubyarray unshift_m irubyobject items
long len   reallength
if  items length    0  return this
store len   items length   1  getruntime   getnil
// it's safe to use zeroes here since modified by store()
system arraycopy values  0  values  items length   int  len
system arraycopy items  0  values  0  items length
return this
/** rb_ary_includes
*
*/
@jrubymethod name      required   1
public rubyboolean include_p threadcontext context  irubyobject item
return getruntime   newboolean includes context  item
/** rb_ary_frozen_p
*
*/
@jrubymethod name
public rubyboolean frozen_p
return getruntime   newboolean isfrozen       flags   tmplock_arr_f     0
/** rb_ary_aref
*/
@jrubymethod name           required   1  optional   1
public irubyobject aref irubyobject args
long beg  len
if args length    1
if  args instanceof rubyfixnum  return entry   rubyfixnum args  getlongvalue
if  args instanceof rubysymbol  throw getruntime   newtypeerror
long beglen
if    args instanceof rubyrange
else if   beglen     rubyrange  args  beglen reallength  0      null
return getruntime   getnil
else
beg   beglen
len   beglen
return subseq beg  len
return entry rubynumeric num2long args
if  args length    2
if  args instanceof rubysymbol
throw getruntime   newtypeerror
beg   rubynumeric num2long args
len   rubynumeric num2long args
if  beg < 0  beg    reallength
return subseq beg  len
return null
/** rb_ary_aset
*
*/
@jrubymethod name      required   2  optional   1
public irubyobject aset irubyobject args
if  args length    2
if  args instanceof rubyfixnum
store   rubyfixnum args  getlongvalue    args
return args
if  args instanceof rubyrange
long beglen     rubyrange  args  beglen reallength  1
splice beglen  beglen  args
return args
if  args instanceof rubysymbol  throw getruntime   newtypeerror
store rubynumeric num2long args   args
return args
if  args length    3
if  args instanceof rubysymbol  throw getruntime   newtypeerror
if  args instanceof rubysymbol  throw getruntime   newtypeerror
splice rubynumeric num2long args   rubynumeric num2long args   args
return args
throw getruntime   newargumenterror     args length
/** rb_ary_at
*
*/
@jrubymethod name      required   1
public irubyobject at irubyobject pos
return entry rubynumeric num2long pos
/** rb_ary_concat
*
*/
@jrubymethod name      required   1
public rubyarray concat irubyobject obj
rubyarray ary   obj converttoarray
if  ary reallength > 0  splice reallength  0  ary
return this
/** inspect_ary
*
*/
private irubyobject inspectary threadcontext context
stringbuffer buffer   new stringbuffer
ruby runtime   getruntime
boolean tainted   istaint
for  int i   0  i < reallength  i
rubystring s   rubystring objasstring context  values callmethod context
if  s istaint    tainted   true
if  i > 0  buffer append
buffer append s tostring
buffer append
rubystring str   runtime newstring buffer tostring
if  tainted  str settaint true
return str
/** rb_ary_inspect
*
*/
@jrubymethod name
public irubyobject inspect
if  reallength    0  return getruntime   newstring
if  getruntime   isinspecting this   return  getruntime   newstring
try
getruntime   registerinspecting this
return inspectary getruntime   getcurrentcontext
finally
getruntime   unregisterinspecting this
/** rb_ary_first
*
*/
@jrubymethod name      optional   1
public irubyobject first irubyobject args
if  args length    0
if  reallength    0  return getruntime   getnil
return values
long n   rubynumeric num2long args
if  n > reallength
n   reallength
else if  n < 0
throw getruntime   newargumenterror
return makeshared begin   int  n  getruntime   getarray
/** rb_ary_last
*
*/
@jrubymethod name      optional   1
public irubyobject last irubyobject args
if  args length    0
if  reallength    0  return getruntime   getnil
return values
long n   rubynumeric num2long args
if  n > reallength
n   reallength
else if  n < 0
throw getruntime   newargumenterror
return makeshared begin   reallength    int  n   int  n  getruntime   getarray
/** rb_ary_each
*
*/
@jrubymethod name      frame   true
public irubyobject each threadcontext context  block block
for  int i   0  i < reallength  i
block yield context  values
return this
/** rb_ary_each_index
*
*/
@jrubymethod name      frame   true
public irubyobject each_index threadcontext context  block block
ruby runtime   getruntime
for  int i   0  i < reallength  i
block yield context  runtime newfixnum i
return this
/** rb_ary_reverse_each
*
*/
@jrubymethod name      frame   true
public irubyobject reverse_each threadcontext context  block block
int len   reallength
while len   > 0
block yield context  values
if  reallength < len  len   reallength
return this
private irubyobject inspectjoin threadcontext context  rubyarray tmp  irubyobject sep
ruby runtime   getruntime
// if already inspecting, there is no need to register/unregister again.
if  runtime isinspecting this
return tmp join context  sep
try
runtime registerinspecting this
return tmp join context  sep
finally
runtime unregisterinspecting this
/** rb_ary_join
*
*/
public rubystring join threadcontext context  irubyobject sep
if  reallength    0  return getruntime   newstring
boolean taint   istaint      sep istaint
long len   1
for  int i   begin  i < begin   reallength  i
irubyobject tmp   values checkstringtype
len    tmp isnil   ? 10     rubystring  tmp  getbytelist   length
rubystring strsep   null
if   sep isnil
sep   strsep   sep converttostring
len    strsep getbytelist   length      reallength   1
bytelist buf   new bytelist  int len
ruby runtime   getruntime
for  int i   begin  i < begin   reallength  i
irubyobject tmp   values
if  tmp instanceof rubystring
// do nothing
else if  tmp instanceof rubyarray
if  runtime isinspecting tmp
tmp   runtime newstring
else
tmp   inspectjoin context   rubyarray tmp  sep
else
tmp   rubystring objasstring context  tmp
if  i > begin     sep isnil    buf append strsep getbytelist
buf append tmp asstring   getbytelist
if  tmp istaint    taint   true
rubystring result   runtime newstring buf
if  taint  result settaint true
return result
/** rb_ary_join_m
*
*/
@jrubymethod name      optional   1
public rubystring join_m threadcontext context  irubyobject args
int argc   args length
irubyobject sep    argc    1  ? args   getruntime   getglobalvariables   get
return join context  sep
/** rb_ary_to_a
*
*/
@jrubymethod name
public rubyarray to_a
if getmetaclass      getruntime   getarray
rubyarray dup   new rubyarray getruntime    getruntime   isobjectspaceenabled
isshared   true
dup isshared   true
dup values   values
dup reallength   reallength
dup begin   begin
return dup
return this
@jrubymethod name
public irubyobject to_ary
return this
public rubyarray converttoarray
return this
public irubyobject checkarraytype
return this
/** rb_ary_equal
*
*/
@jrubymethod name      required   1
public irubyobject op_equal threadcontext context  irubyobject obj
if  this    obj  return getruntime   gettrue
if    obj instanceof rubyarray
if   obj respondsto
return getruntime   getfalse
else
return equalinternal context  obj callmethod context      this
rubyarray ary    rubyarray  obj
if  reallength    ary reallength  return getruntime   getfalse
ruby runtime   getruntime
for  long i   0  i < reallength  i
if   equalinternal context  elt i   ary elt i   istrue    return runtime getfalse
return runtime gettrue
/** rb_ary_eql
*
*/
@jrubymethod name      required   1
public rubyboolean eql_p threadcontext context  irubyobject obj
if  this    obj  return getruntime   gettrue
if    obj instanceof rubyarray   return getruntime   getfalse
rubyarray ary    rubyarray  obj
if  reallength    ary reallength  return getruntime   getfalse
ruby runtime   getruntime
for  int i   0  i < reallength  i
if   eqlinternal context  elt i   ary elt i    return runtime getfalse
return runtime gettrue
/** rb_ary_compact_bang
*
*/
@jrubymethod name
public irubyobject compact_bang
modify
int p   0
int t   0
int end   p   reallength
while  t < end
if  values isnil
t
else
values   values
if  reallength    p  return getruntime   getnil
realloc p
reallength   p
return this
/** rb_ary_compact
*
*/
@jrubymethod name
public irubyobject compact
rubyarray ary   arydup
ary compact_bang
return ary
/** rb_ary_empty_p
*
*/
@jrubymethod name
public irubyobject empty_p
return reallength    0 ? getruntime   gettrue     getruntime   getfalse
/** rb_ary_clear
*
*/
@jrubymethod name
public irubyobject rb_clear
modifycheck
if isshared
alloc array_default_size
isshared   true
else if  values length > array_default_size << 1
alloc array_default_size << 1
begin   0
reallength   0
return this
/** rb_ary_fill
*
*/
@jrubymethod name      optional   3  frame   true
public irubyobject fill threadcontext context  irubyobject args  block block
irubyobject item   null
irubyobject begobj   null
irubyobject lenobj   null
int argc   args length
if  block isgiven
arity checkargumentcount getruntime    args  0  2
item   null
begobj   argc > 0 ? args   null
lenobj   argc > 1 ? args   null
argc
else
arity checkargumentcount getruntime    args  1  3
item   args
begobj   argc > 1 ? args   null
lenobj   argc > 2 ? args   null
int beg   0  end   0  len   0
switch  argc
case 1
beg   0
len   reallength
break
case 2
if  begobj instanceof rubyrange
long beglen     rubyrange  begobj  beglen reallength  1
beg    int  beglen
len    int  beglen
break
/* fall through */
case 3
beg   begobj isnil   ? 0   rubynumeric num2int begobj
if  beg < 0
beg   reallength   beg
if  beg < 0  beg   0
len    lenobj    null    lenobj isnil    ? reallength   beg   rubynumeric num2int lenobj
// todo: in mri 1.9, an explicit check for negative length is
// added here. indexerror is raised when length is negative.
// see [ruby-core:12953] for more details.
break
modify
end   beg   len
// apparently, that's how mri does overflow check
if  end < 0
throw getruntime   newargumenterror
if  end > reallength
if  end >  values length  realloc end
arrays fill values  reallength  end  getruntime   getnil
reallength   end
if  block isgiven
ruby runtime   getruntime
for  int i   beg  i < end  i
irubyobject v   block yield context  runtime newfixnum i
if  i >  reallength  break
values   v
else
if len > 0  arrays fill values  beg  beg   len  item
return this
/** rb_ary_index
*
*/
@jrubymethod name      required   1
public irubyobject index threadcontext context  irubyobject obj
ruby runtime   getruntime
for  int i   begin  i < begin   reallength  i
if  equalinternal context  values  obj  istrue    return runtime newfixnum i   begin
return runtime getnil
/** rb_ary_rindex
*
*/
@jrubymethod name      required   1
public irubyobject rindex threadcontext context  irubyobject obj
ruby runtime   getruntime
int i   reallength
while  i   > 0
if  i > reallength
i   reallength
continue
if  equalinternal context  values  obj  istrue    return getruntime   newfixnum i
return runtime getnil
/** rb_ary_indexes
*
*/
@jrubymethod name           required   1  rest   true
public irubyobject indexes irubyobject args
getruntime   getwarnings   warn id deprecated_method
rubyarray ary   new rubyarray getruntime    args length
irubyobject arefargs   new irubyobject
for  int i   0  i < args length  i
arefargs   args
ary append aref arefargs
return ary
/** rb_ary_reverse_bang
*
*/
@jrubymethod name
public irubyobject reverse_bang
modify
irubyobject tmp
if  reallength > 1
int p1   0
int p2   p1   reallength   1
while  p1 < p2
tmp   values
values   values
values   tmp
return this
/** rb_ary_reverse_m
*
*/
@jrubymethod name
public irubyobject reverse
return arydup   reverse_bang
/** rb_ary_collect
*
*/
@jrubymethod name           frame   true
public rubyarray collect threadcontext context  block block
ruby runtime   getruntime
if   block isgiven    return new rubyarray getruntime    runtime getarray    this
rubyarray collect   new rubyarray runtime  reallength
for  int i   begin  i < begin   reallength  i
collect append block yield context  values
return collect
/** rb_ary_collect_bang
*
*/
@jrubymethod name           frame   true
public rubyarray collect_bang threadcontext context  block block
modify
for  int i   0  len   reallength  i < len  i
store i  block yield context  values
return this
/** rb_ary_select
*
*/
@jrubymethod name      frame   true
public rubyarray select threadcontext context  block block
ruby runtime   getruntime
rubyarray result   new rubyarray runtime  reallength
if  isshared
for  int i   begin  i < begin   reallength  i
if  block yield context  values  istrue    result append elt i   begin
else
for  int i   0  i < reallength  i
if  block yield context  values  istrue    result append elt i
return result
/** rb_ary_delete
*
*/
@jrubymethod name      required   1  frame   true
public irubyobject delete threadcontext context  irubyobject item  block block
int i2   0
ruby runtime   getruntime
for  int i1   0  i1 < reallength  i1
irubyobject e   values
if  equalinternal context  e  item  istrue    continue
if  i1    i2  store i2  e
i2
if  reallength    i2
if  block isgiven    return block yield context  item
return runtime getnil
modify
if  reallength > i2
reallength   i2
if  i2 << 1 < values length    values length > array_default_size  realloc i2 << 1
return item
/** rb_ary_delete_at
*
*/
private final irubyobject delete_at int pos
int len   reallength
if  pos >  len  return getruntime   getnil
if  pos < 0  pos    len
if  pos < 0  return getruntime   getnil
modify
irubyobject obj   values
system arraycopy values  pos   1  values  pos  len    pos   1
reallength
return obj
/** rb_ary_delete_at_m
*
*/
@jrubymethod name      required   1
public irubyobject delete_at irubyobject obj
return delete_at  int  rubynumeric num2long obj
/** rb_ary_reject_bang
*
*/
@jrubymethod name      frame   true
public irubyobject reject threadcontext context  block block
rubyarray ary   arydup
ary reject_bang context  block
return ary
/** rb_ary_reject_bang
*
*/
@jrubymethod name      frame   true
public irubyobject reject_bang threadcontext context  block block
int i2   0
modify
for  int i1   0  i1 < reallength  i1
irubyobject v   values
if  block yield context  v  istrue    continue
if  i1    i2  store i2  v
i2
if  reallength    i2  return getruntime   getnil
if  i2 < reallength  reallength   i2
return this
/** rb_ary_delete_if
*
*/
@jrubymethod name      frame   true
public irubyobject delete_if threadcontext context  block block
reject_bang context  block
return this
/** rb_ary_zip
*
*/
@jrubymethod name      optional   1  rest   true  frame   true
public irubyobject zip threadcontext context  irubyobject args  block block
for  int i   0  i < args length  i
args   args converttoarray
ruby runtime   getruntime
if  block isgiven
for  int i   0  i < reallength  i
rubyarray tmp   new rubyarray runtime  args length   1
tmp append elt i
for  int j   0  j < args length  j
tmp append   rubyarray  args  elt i
block yield context  tmp
return runtime getnil
int len   reallength
rubyarray result   new rubyarray runtime  len
for  int i   0  i < len  i
rubyarray tmp   new rubyarray runtime  args length   1
tmp append elt i
for  int j   0  j < args length  j
tmp append   rubyarray  args  elt i
result append tmp
return result
/** rb_ary_cmp
*
*/
@jrubymethod name      required   1
public irubyobject op_cmp threadcontext context  irubyobject obj
rubyarray ary2   obj converttoarray
int len   reallength
if  len > ary2 reallength  len   ary2 reallength
ruby runtime   getruntime
for  int i   0  i < len  i
irubyobject v   elt i  callmethod context  methodindex op_spaceship     ary2 elt i
if    v instanceof rubyfixnum       rubyfixnum  v  getlongvalue      0  return v
len   reallength   ary2 reallength
if  len    0  return rubyfixnum zero runtime
if  len > 0  return rubyfixnum one runtime
return rubyfixnum minus_one runtime
/** rb_ary_slice_bang
*
*/
@jrubymethod name      required   1  optional   2
public irubyobject slice_bang irubyobject args
if  args length    2
long pos   rubynumeric num2long args
long len   rubynumeric num2long args
if  pos < 0  pos   reallength   pos
args   subseq pos  len
splice pos  len  null
return args
irubyobject arg   args
if  arg instanceof rubyrange
long beglen     rubyrange  arg  beglen reallength  1
long pos   beglen
long len   beglen
if  pos < 0
pos   reallength   pos
arg   subseq pos  len
splice pos  len  null
return arg
return delete_at  int  rubynumeric num2long args
/** rb_ary_assoc
*
*/
@jrubymethod name      required   1
public irubyobject assoc threadcontext context  irubyobject key
ruby runtime   getruntime
for  int i   begin  i < begin   reallength  i
irubyobject v   values
if  v instanceof rubyarray
rubyarray arr    rubyarray v
if  arr reallength > 0    equalinternal context  arr values  key  istrue    return arr
return runtime getnil
/** rb_ary_rassoc
*
*/
@jrubymethod name      required   1
public irubyobject rassoc threadcontext context  irubyobject value
ruby runtime   getruntime
for  int i   begin  i < begin   reallength  i
irubyobject v   values
if  v instanceof rubyarray
rubyarray arr    rubyarray v
if  arr reallength > 1    equalinternal context  arr values  value  istrue    return arr
return runtime getnil
/** flatten
*
*/
private final int flatten threadcontext context  int index  rubyarray ary2  rubyarray memo
int i   index
int n
int lim   index   ary2 reallength
irubyobject id   ary2 id
if  memo includes context  id   throw getruntime   newargumenterror
memo append id
splice index  1  ary2
while  i < lim
irubyobject tmp   elt i  checkarraytype
if   tmp isnil
n   flatten context  i   rubyarray  tmp  memo
i    n
lim    n
i
memo pop
return lim   index   1     returns number of increased items
/** rb_ary_flatten_bang
*
*/
@jrubymethod name
public irubyobject flatten_bang threadcontext context
int i   0
rubyarray memo   null
while  i < reallength
irubyobject ary2   values
irubyobject tmp   ary2 checkarraytype
if   tmp isnil
if  memo    null
memo   new rubyarray getruntime    false
memo values   reserve array_default_size
i    flatten context  i   rubyarray  tmp  memo
i
if  memo    null  return getruntime   getnil
return this
/** rb_ary_flatten
*
*/
@jrubymethod name
public irubyobject flatten threadcontext context
rubyarray ary   arydup
ary flatten_bang context
return ary
/** rb_ary_nitems
*
*/
@jrubymethod name
public irubyobject nitems
int n   0
for  int i   begin  i < begin   reallength  i
if   values isnil    n
return getruntime   newfixnum n
/** rb_ary_plus
*
*/
@jrubymethod name      required   1
public irubyobject op_plus irubyobject obj
rubyarray y   obj converttoarray
int len   reallength   y reallength
rubyarray z   new rubyarray getruntime    len
system arraycopy values  begin  z values  0  reallength
system arraycopy y values  y begin  z values  reallength  y reallength
z reallength   len
return z
/** rb_ary_times
*
*/
@jrubymethod name      required   1
public irubyobject op_times threadcontext context  irubyobject times
irubyobject tmp   times checkstringtype
if   tmp isnil    return join context  tmp
long len   rubynumeric num2long times
if  len    0  return new rubyarray getruntime    getmetaclass    0
if  len < 0  throw getruntime   newargumenterror
if  long max_value   len < reallength
throw getruntime   newargumenterror
len    reallength
rubyarray ary2   new rubyarray getruntime    getmetaclass    len
ary2 reallength    int  len
for  int i   0  i < len  i    reallength
system arraycopy values  begin  ary2 values  i  reallength
ary2 infectby this
return ary2
/** ary_make_hash
*
*/
private final rubyhash makehash rubyarray ary2
rubyhash hash   new rubyhash getruntime    false
int begin   this begin
for  int i   begin  i < begin   reallength  i
hash fastaset values  never
if  ary2    null
begin   ary2 begin
for  int i   begin  i < begin   ary2 reallength  i
hash fastaset ary2 values  never
return hash
/** rb_ary_uniq_bang
*
*/
@jrubymethod name
public irubyobject uniq_bang
rubyhash hash   makehash null
if  reallength    hash size    return getruntime   getnil
int j   0
for  int i   0  i < reallength  i
irubyobject v   elt i
if  hash fastdelete v   store j    v
reallength   j
return this
/** rb_ary_uniq
*
*/
@jrubymethod name
public irubyobject uniq
rubyarray ary   arydup
ary uniq_bang
return ary
/** rb_ary_diff
*
*/
@jrubymethod name      required   1
public irubyobject op_diff irubyobject other
rubyhash hash   other converttoarray   makehash null
rubyarray ary3   new rubyarray getruntime
int begin   this begin
for  int i   begin  i < begin   reallength  i
if  hash fastaref values     null  continue
ary3 append elt i   begin
return ary3
/** rb_ary_and
*
*/
@jrubymethod name      required   1
public irubyobject op_and irubyobject other
rubyarray ary2   other converttoarray
rubyhash hash   ary2 makehash null
rubyarray ary3   new rubyarray getruntime
reallength < ary2 reallength ? reallength   ary2 reallength
for  int i   0  i < reallength  i
irubyobject v   elt i
if  hash fastdelete v   ary3 append v
return ary3
/** rb_ary_or
*
*/
@jrubymethod name      required   1
public irubyobject op_or irubyobject other
rubyarray ary2   other converttoarray
rubyhash set   makehash ary2
rubyarray ary3   new rubyarray getruntime    reallength   ary2 reallength
for  int i   0  i < reallength  i
irubyobject v   elt i
if  set fastdelete v   ary3 append v
for  int i   0  i < ary2 reallength  i
irubyobject v   ary2 elt i
if  set fastdelete v   ary3 append v
return ary3
/** rb_ary_sort
*
*/
@jrubymethod name      frame   true
public rubyarray sort block block
rubyarray ary   arydup
ary sort_bang block
return ary
/** rb_ary_sort_bang
*
*/
@jrubymethod name      frame   true
public rubyarray sort_bang block block
modify
if  reallength > 1
flags    tmplock_arr_f
try
if  block isgiven
arrays sort values  0  reallength  new blockcomparator block
else
arrays sort values  0  reallength  new defaultcomparator
finally
flags    ~tmplock_arr_f
return this
final class blockcomparator implements comparator
private block block
public blockcomparator block block
this block   block
public int compare object o1  object o2
threadcontext context   getruntime   getcurrentcontext
irubyobject obj1    irubyobject  o1
irubyobject obj2    irubyobject  o2
irubyobject ret   block yield context  getruntime   newarray obj1  obj2   null  null  true
int n   rubycomparable cmpint context  ret  obj1  obj2
//todo: ary_sort_check should be done here
return n
static final class defaultcomparator implements comparator
public int compare object o1  object o2
if  o1 instanceof rubyfixnum    o2 instanceof rubyfixnum
long a     rubyfixnum  o1  getlongvalue
long b     rubyfixnum  o2  getlongvalue
if  a > b  return 1
if  a < b  return  1
return 0
if  o1 instanceof rubystring    o2 instanceof rubystring
return   rubystring  o1  op_cmp  rubystring  o2
irubyobject obj1    irubyobject  o1
irubyobject obj2    irubyobject  o2
threadcontext context   obj1 getruntime   getcurrentcontext
irubyobject ret   obj1 callmethod context  methodindex op_spaceship     obj2
int n   rubycomparable cmpint context  ret  obj1  obj2
//todo: ary_sort_check should be done here
return n
public static void marshalto rubyarray array  marshalstream output  throws ioexception
output registerlinktarget array
output writeint array getlist   size
for  iterator iter   array getlist   iterator    iter hasnext
output dumpobject  irubyobject  iter next
public static rubyarray unmarshalfrom unmarshalstream input  throws ioexception
rubyarray result   input getruntime   newarray
input registerlinktarget result
int size   input unmarshalint
for  int i   0  i < size  i
result append input unmarshalobject
return result
/**
* @see org.jruby.util.pack#pack
*/
@jrubymethod name      required   1
public rubystring pack threadcontext context  irubyobject obj
rubystring ifmt   rubystring objasstring context  obj
return pack pack getruntime    this  ifmt getbytelist
public class getjavaclass
return list class
// satisfy java.util.list interface (for java integration)
public int size
return reallength
public boolean isempty
return reallength    0
public boolean contains object element
return indexof element      1
public object toarray
object array   new object
for  int i   begin  i < reallength  i
array   javautil convertrubytojava values
return array
public object toarray final object arg
object array   arg
if  array length < reallength
class type   array getclass   getcomponenttype
array    object  array newinstance type  reallength
int length   reallength   begin
for  int i   0  i < length  i
array   javautil convertrubytojava values
return array
public boolean add object element
append javautil convertjavatoruby getruntime    element
return true
public boolean remove object element
irubyobject deleted   delete getruntime   getcurrentcontext    javautil convertjavatoruby getruntime    element   block null_block
return deleted isnil   ? false   true     todo  is this correct ?
public boolean containsall collection c
for  iterator iter   c iterator    iter hasnext
if  indexof iter next        1
return false
return true
public boolean addall collection c
for  iterator iter   c iterator    iter hasnext
add iter next
return  c isempty
public boolean addall int index  collection c
iterator iter   c iterator
for  int i   index  iter hasnext    i
add i  iter next
return  c isempty
public boolean removeall collection c
boolean listchanged   false
for  iterator iter   c iterator    iter hasnext
if  remove iter next
listchanged   true
return listchanged
public boolean retainall collection c
boolean listchanged   false
for  iterator iter   iterator    iter hasnext
object element   iter next
if   c contains element
remove element
listchanged   true
return listchanged
public object get int index
return javautil convertrubytojava  irubyobject  elt index   object class
public object set int index  object element
return store index  javautil convertjavatoruby getruntime    element
// todo: make more efficient by not creating irubyarray[]
public void add int index  object element
insert new irubyobject rubyfixnum newfixnum getruntime    index   javautil convertjavatoruby getruntime    element
public object remove int index
return javautil convertrubytojava delete_at index   object class
public int indexof object element
int begin   this begin
if  element    null
for  int i   begin  i < begin   reallength  i
if  values    null
return i
else
irubyobject convertedelement   javautil convertjavatoruby getruntime    element
for  int i   begin  i < begin   reallength  i
if  convertedelement equals values
return i
return  1
public int lastindexof object element
int begin   this begin
if  element    null
for  int i   begin   reallength   1  i >  begin  i
if  values    null
return i
else
irubyobject convertedelement   javautil convertjavatoruby getruntime    element
for  int i   begin   reallength   1  i >  begin  i
if  convertedelement equals values
return i
return  1
public class rubyarrayconversioniterator implements iterator
protected int index   0
protected int last    1
public boolean hasnext
return index < reallength
public object next
irubyobject element   elt index
last   index
return javautil convertrubytojava element  object class
public void remove
if  last     1  throw new illegalstateexception
delete_at last
if  last < index  index
last    1
public iterator iterator
return new rubyarrayconversioniterator
final class rubyarrayconversionlistiterator extends rubyarrayconversioniterator implements listiterator
public rubyarrayconversionlistiterator
public rubyarrayconversionlistiterator int index
this index   index
public boolean hasprevious
return index >  0
public object previous
return javautil convertrubytojava  irubyobject  elt last     index   object class
public int nextindex
return index
public int previousindex
return index   1
public void set object obj
if  last     1  throw new illegalstateexception
store last  javautil convertjavatoruby getruntime    obj
public void add object obj
insert new irubyobject   rubyfixnum newfixnum getruntime    index     javautil convertjavatoruby getruntime    obj
last    1
public listiterator listiterator
return new rubyarrayconversionlistiterator
public listiterator listiterator int index
return new rubyarrayconversionlistiterator index
// todo: list.sublist(from, to).clear() is supposed to clear the sublist from the list.
// how can we support this operation?
public list sublist int fromindex  int toindex
if  fromindex < 0    toindex > size      fromindex > toindex
throw new indexoutofboundsexception
irubyobject sublist   subseq fromindex  toindex   fromindex   1
return sublist isnil   ? null    list  sublist
public void clear
rb_clear