/*
***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2001-2002 jan arne petersen <jpetersen@uni-bonn.de>
* copyright (c) 2001-2002 benoit cerrina <b.cerrina@wanadoo.fr>
* copyright (c) 2002 anders bengtsson <ndrsbngtssn@yahoo.se>
* copyright (c) 2004-2006 thomas e enebo <enebo@acm.org>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby ast
import java util list
import org jruby ast visitor nodevisitor
import org jruby evaluator instruction
import org jruby lexer yacc isourceposition
import org jruby runtime callsite
import org jruby runtime calltype
/**
* a 'for' statement.  this is implemented using iter and that is how mri does things,
* but 'for's do not have their own stack, so doing this way is mildly painful.
*
* @see iternode
*/
public class fornode extends iternode
public final callsite calladapter   new callsite inlinecachingcallsite    calltype normal
private node iternode
public fornode isourceposition position  node varnode  node bodynode  node iternode
// for nodes do not have their own scope so we pass null to indicate this.
// 'for's are implemented as blocks in evaluation, but they have no scope so we
// just deal with this lack of scope throughout its lifespan.  we should probably
// change the way this works to get rid of multiple null checks.
super position  varnode  null  bodynode  nodetype fornode
this iternode   iternode
public node getiternode
return iternode
/**
* accept for the visitor pattern.
* @param ivisitor the visitor
**/
public instruction accept nodevisitor ivisitor
return ivisitor visitfornode this
public list<node> childnodes
return node createlist getvarnode    getbodynode    iternode