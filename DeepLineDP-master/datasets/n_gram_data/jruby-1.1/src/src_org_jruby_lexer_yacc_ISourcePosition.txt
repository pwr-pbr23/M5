/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2005 thomas e enebo <enebo@acm.org>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby lexer yacc
import java util collection
import org jruby ast commentnode
/**
* this interface is the combination of two needs:  1) a ruby interpreter position (for warnings
* and errors).  the interpreter only cares about filename and endline.  2) a ide position (offsets
* for showing ranges of grammatical elements).
*
* the offsets represent positions 'between' characters.  so a variable 'abc' has a startoffset
* of 0 and an endoffset of 3 ( 0a1b2c3 ).
*
*/
public interface isourceposition
/**
* which file does this source position live in?
*
* @return name of the source file.
*/
public string getfile
/**
* which is the first(start) line that this source position occurs on (zero-based)
* @return
*/
public int getstartline
/**
* which is the last(end) line that this source position occurs on (zero-based)
*
* @return the line
*/
public int getendline
/**
* modify startoffset by a relativevalue.  at times our grammar and lexer do not give us
* the exact positions we need so we need to manually tweak position.  the bummer of this
* is this requires isourceposition implementations are mutable.
*
* @param relativevalue to nudge startoffset up or down
*/
public void adjuststartoffset int relativevalue
/**
* get offset (relative to beginning of source file) immediately before first character
* represented by this source position.
*
* @return the offset
*/
public int getstartoffset
/**
* get offset (relative to beginning of source file) immediately after the last character
* represented by this source position
*
* @return the offset
*/
public int getendoffset
/**
* calculates the logical union of the two positions and creates a new resulting position
*
* @param position to be unioned against this position
* @return a new position
*/
public isourceposition union isourceposition position
/**
* get comments associated with this position (really we get this from node, but this is
* a hack to save some space when using the interpreter).
* @return a collection of comments
*/
public collection<commentnode> getcomments
public void setcomments collection<commentnode> comments