/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2002 jan arne petersen <jpetersen@uni-bonn.de>
* copyright (c) 2002-2004 anders bengtsson <ndrsbngtssn@yahoo.se>
* copyright (c) 2004 stefan matthias aust <sma@3plus4.de>
* copyright (c) 2004 david corbin <dcorbin@users.sourceforge.net>
* copyright (c) 2004-2005 thomas e enebo <enebo@acm.org>
* copyright (c) 2006 kresten krab thorup <krab@gnu.org>
* copyright (c) 2007 william n dortch <bill.dortch@gmail.com>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby javasupport
import java io ioexception
import java io unsupportedencodingexception
import java util arraylist
import java util arrays
import java util list
import java util hashmap
import java util map
import java util regex matcher
import java util regex pattern
import java lang reflect invocationhandler
import java lang reflect method
import java lang reflect modifier
import java lang reflect proxy
import java util concurrent concurrenthashmap
import org jruby metaclass
import org jruby ruby
import org jruby rubyarray
import org jruby rubybignum
import org jruby rubyclass
import org jruby rubyclasspathvariable
import org jruby rubyexception
import org jruby rubyfixnum
import org jruby rubyfloat
import org jruby rubymodule
import org jruby rubyproc
import org jruby rubystring
import org jruby rubytime
import org jruby common irubywarnings id
import org jruby exceptions raiseexception
import org jruby javasupport proxy javaproxyclass
import org jruby javasupport proxy javaproxyconstructor
import org jruby javasupport util runtimehelpers
import org jruby runtime arity
import org jruby runtime block
import org jruby runtime callbackfactory
import org jruby runtime classindex
import org jruby runtime threadcontext
import org jruby runtime visibility
import org jruby runtime builtin irubyobject
import org jruby runtime load library
import org jruby util bytelist
import org jruby util classprovider
public class java implements library
public void load ruby runtime  boolean wrap  throws ioexception
createjavamodule runtime
runtime getloadservice   smartload
rubyclasspathvariable createclasspathvariable runtime
public static rubymodule createjavamodule ruby runtime
rubymodule javamodule   runtime definemodule
callbackfactory callbackfactory   runtime callbackfactory java class
javamodule definemodulefunction    callbackfactory getoptsingletonmethod
javamodule definemodulefunction    callbackfactory getsingletonmethod    irubyobject class
javamodule definemodulefunction    callbackfactory getsingletonmethod    irubyobject class
javamodule definemodulefunction    callbackfactory getsingletonmethod    irubyobject class
javamodule definemodulefunction    callbackfactory getsingletonmethod    irubyobject class
javamodule definemodulefunction    callbackfactory getoptsingletonmethod
javaobject createjavaobjectclass runtime  javamodule
javaarray createjavaarrayclass runtime  javamodule
javaclass createjavaclassclass runtime  javamodule
javamethod createjavamethodclass runtime  javamodule
javaconstructor createjavaconstructorclass runtime  javamodule
javafield createjavafieldclass runtime  javamodule
// also create the javaproxy* classes
javaproxyclass createjavaproxymodule runtime
rubymodule javautils   runtime definemodule
javautils definefastmodulefunction    callbackfactory getfastsingletonmethod   irubyobject class
javautils definefastmodulefunction    callbackfactory getfastsingletonmethod   irubyobject class
javautils definefastmodulefunction    callbackfactory getfastsingletonmethod   irubyobject class irubyobject class
javautils definefastmodulefunction    callbackfactory getfastsingletonmethod   irubyobject class
javautils definefastmodulefunction    callbackfactory getfastsingletonmethod    irubyobject class  irubyobject class
javautils definefastmodulefunction    callbackfactory getfastsingletonmethod    irubyobject class
javautils definefastmodulefunction    callbackfactory getfastsingletonmethod    irubyobject class
javautils definefastmodulefunction    callbackfactory getfastsingletonmethod    irubyobject class
javautils definefastmodulefunction    callbackfactory getfastsingletonmethod    irubyobject class
javautils definefastmodulefunction    callbackfactory getfastsingletonmethod    irubyobject class
javautils definefastmodulefunction    callbackfactory getfastsingletonmethod   irubyobject class
javautils definefastmodulefunction    callbackfactory getfastsingletonmethod   irubyobject class irubyobject class irubyobject class
javautils definefastmodulefunction    callbackfactory getfastsingletonmethod   irubyobject class
javautils definefastmodulefunction    callbackfactory getfastsingletonmethod   irubyobject class
javautils definefastmodulefunction    callbackfactory getfastsingletonmethod    irubyobject class  irubyobject class
// note: deprecated
javautils definefastmodulefunction    callbackfactory getfastsingletonmethod    irubyobject class
runtime getjavasupport   setconcreteproxycallback
callbackfactory getfastsingletonmethod    irubyobject class
javaarrayutilities createjavaarrayutilitiesmodule runtime
rubyclass javaproxy   runtime defineclass    runtime getobject    runtime getobject   getallocator
javaproxy getmetaclass   definefastmethod    callbackfactory getfastsingletonmethod    irubyobject class
javaproxy getmetaclass   definefastmethod    callbackfactory getfastsingletonmethod
return javamodule
private static final classprovider java_package_class_provider   new classprovider
public rubyclass defineclassunder rubymodule pkg  string name  rubyclass superclazz
// shouldn't happen, but if a superclass is specified, it's not ours
if  superclazz    null
return null
irubyobject packagename
// again, shouldn't happen. todo: might want to throw exception instead.
if   packagename   pkg getinstancevariables   fastgetinstancevariable        null  return null
ruby runtime   pkg getruntime
return  rubyclass get_proxy_class
runtime getjavasupport   getjavautilitiesmodule
javaclass fornameverbose runtime  packagename asjavastring     name
public rubymodule definemoduleunder rubymodule pkg  string name
irubyobject packagename
// again, shouldn't happen. todo: might want to throw exception instead.
if   packagename   pkg getinstancevariables   fastgetinstancevariable        null  return null
ruby runtime   pkg getruntime
return  rubymodule get_interface_module
runtime getjavasupport   getjavautilitiesmodule
javaclass fornameverbose runtime  packagename asjavastring     name
private static final map<string boolean> java_primitives   new hashmap<string boolean>
static
string primitives
for  string primitive   primitives  java_primitives put primitive  boolean true
public static irubyobject is_primitive_type irubyobject recv  irubyobject sym
return recv getruntime   newboolean java_primitives containskey sym asjavastring
public static irubyobject create_proxy_class
irubyobject recv
irubyobject constant
irubyobject javaclass
irubyobject module
if    module instanceof rubymodule   throw recv getruntime   newtypeerror module  recv getruntime   getmodule
return   rubymodule module  const_set constant  get_proxy_class recv  javaclass
public static irubyobject get_java_class irubyobject recv  irubyobject name
try
return javaclass for_name recv  name
catch  exception e
return recv getruntime   getnil
/**
* returns a new proxy instance of type (rubyclass)recv for the wrapped java_object,
* or the cached proxy if we've already seen this object.
*
* @param recv the class for this object
* @param java_object the java object wrapped in a javaobject wrapper
* @return the new or cached proxy for the specified java object
*/
public static irubyobject new_instance_for irubyobject recv  irubyobject java_object
// fixme: note temporary double-allocation of javaobject as we move to cleaner interface
if  java_object instanceof javaobject
return getinstance   javaobject java_object  getvalue     rubyclass recv
// in theory we should never get here, keeping around temporarily
irubyobject new_instance     rubyclass recv  allocate
new_instance getinstancevariables   fastsetinstancevariable   java_object
return new_instance
/**
* returns a new proxy instance of type clazz for rawjavaobject, or the cached
* proxy if we've already seen this object.
*
* @param rawjavaobject
* @param clazz
* @return the new or cached proxy for the specified java object
*/
public static irubyobject getinstance object rawjavaobject  rubyclass clazz
return clazz getruntime   getjavasupport   getobjectproxycache
getorcreate rawjavaobject  clazz
/**
* returns a new proxy instance of a type corresponding to rawjavaobject's class,
* or the cached proxy if we've already seen this object.  note that primitives
* and strings are <em>not</em> coerced to corresponding ruby types; use
* javautil.convertjavatousablerubyobject to get coerced types or proxies as
* appropriate.
*
* @param runtime
* @param rawjavaobject
* @return the new or cached proxy for the specified java object
* @see javautil.convertjavatousablerubyobject
*/
public static irubyobject getinstance ruby runtime  object rawjavaobject
if  rawjavaobject    null
return runtime getjavasupport   getobjectproxycache   getorcreate rawjavaobject
rubyclass  getproxyclass runtime  javaclass get runtime  rawjavaobject getclass
return runtime getnil
// if the proxy class itself is passed as a parameter this will be called by java#ruby_to_java
public static irubyobject to_java_object irubyobject recv
return recv getinstancevariables   fastgetinstancevariable
// javautilities
/**
* add a new proxy extender. this is used by javautilities to allow adding methods
* to a given type's proxy and all types descending from that proxy's java class.
*/
@deprecated
public static irubyobject add_proxy_extender irubyobject recv  irubyobject extender
// hacky workaround in case any users call this directly.
// most will have called javautilities.extend_proxy instead.
recv getruntime   getwarnings   warn id deprecated_method
irubyobject javaclassvar   extender getinstancevariables   fastgetinstancevariable
if    javaclassvar instanceof javaclass
throw recv getruntime   newargumenterror
javaclass javaclassvar  addproxyextender extender
return recv getruntime   getnil
public static rubymodule getinterfacemodule ruby runtime  javaclass javaclass
if   javaclass javaclass   isinterface
throw runtime newargumenterror javaclass tostring
rubymodule interfacemodule
if   interfacemodule   javaclass getproxymodule       null
return interfacemodule
javaclass lockproxy
try
if   interfacemodule   javaclass getproxymodule       null
interfacemodule    rubymodule runtime getjavasupport   getjavainterfacetemplate   dup
interfacemodule fastsetinstancevariable   javaclass
addtojavapackagemodule interfacemodule javaclass
javaclass setupinterfacemodule interfacemodule
// include any interfaces we extend
class extended   javaclass javaclass   getinterfaces
for  int i   extended length    i >  0
javaclass extendedclass   javaclass get runtime  extended
rubymodule extmodule   getinterfacemodule runtime  extendedclass
interfacemodule includemodule extmodule
finally
javaclass unlockproxy
return interfacemodule
public static irubyobject get_interface_module irubyobject recv  irubyobject javaclassobject
ruby runtime   recv getruntime
javaclass javaclass
if  javaclassobject instanceof rubystring
javaclass   javaclass for_name recv  javaclassobject
else if  javaclassobject instanceof javaclass
javaclass    javaclass javaclassobject
else
throw runtime newargumenterror     javaclassobject
return getinterfacemodule runtime  javaclass
// note: this isn't really all that deprecated, as it is used for
// internal purposes, at least for now. but users should be discouraged
// from calling this directly; eventually it will go away.
public static irubyobject get_deprecated_interface_proxy irubyobject recv  irubyobject javaclassobject
ruby runtime   recv getruntime
javaclass javaclass
if  javaclassobject instanceof rubystring
javaclass   javaclass for_name recv  javaclassobject
else if  javaclassobject instanceof javaclass
javaclass    javaclass javaclassobject
else
throw runtime newargumenterror     javaclassobject
if   javaclass javaclass   isinterface
throw runtime newargumenterror     javaclassobject
rubyclass proxyclass
if   proxyclass   javaclass getproxyclass       null
return proxyclass
javaclass lockproxy
try
if  proxyclass   javaclass getproxyclass       null
rubymodule interfacemodule   getinterfacemodule runtime  javaclass
rubyclass interfacejavaproxy   runtime fastgetclass
proxyclass   rubyclass newclass runtime  interfacejavaproxy
proxyclass setallocator interfacejavaproxy getallocator
proxyclass makemetaclass interfacejavaproxy getmetaclass
// parent.setconstant(name, proxyclass); // where the name should come from ?
proxyclass inherit interfacejavaproxy
proxyclass callmethod recv getruntime   getcurrentcontext       javaclass
// including interface module so old-style interface "subclasses" will
// respond correctly to #kind_of?, etc.
proxyclass includemodule interfacemodule
javaclass setupproxy proxyclass
// add reference to interface module
if  proxyclass fastgetconstantat       null
proxyclass fastsetconstant    interfacemodule
finally
javaclass unlockproxy
return proxyclass
public static rubymodule getproxyclass ruby runtime  javaclass javaclass
rubyclass proxyclass
class c
if   c   javaclass javaclass    isinterface
return getinterfacemodule runtime  javaclass
if   proxyclass   javaclass getproxyclass       null
return proxyclass
javaclass lockproxy
try
if  proxyclass   javaclass getproxyclass       null
if c isarray
proxyclass   createproxyclass runtime
runtime getjavasupport   getarrayproxyclass
javaclass  true
else if  c isprimitive
proxyclass   createproxyclass runtime
runtime getjavasupport   getconcreteproxyclass
javaclass  true
else if  c    object class
// java.lang.object is added at root of java proxy classes
proxyclass   createproxyclass runtime
runtime getjavasupport   getconcreteproxyclass
javaclass  true
proxyclass getmetaclass   definefastmethod
runtime getjavasupport   getconcreteproxycallback
addtojavapackagemodule proxyclass  javaclass
else
// other java proxy classes added under their superclass' java proxy
proxyclass   createproxyclass runtime
rubyclass getproxyclass runtime  javaclass get runtime  c getsuperclass
javaclass  false
// include interface modules into the proxy class
class interfaces   c getinterfaces
for  int i   interfaces length    i >  0
javaclass ifc   javaclass get runtime  interfaces
proxyclass includemodule getinterfacemodule runtime  ifc
if  modifier ispublic c getmodifiers
addtojavapackagemodule proxyclass  javaclass
finally
javaclass unlockproxy
return proxyclass
public static irubyobject get_proxy_class irubyobject recv  irubyobject java_class_object
ruby runtime   recv getruntime
javaclass javaclass
if  java_class_object instanceof rubystring
javaclass   javaclass for_name recv  java_class_object
else if  java_class_object instanceof javaclass
javaclass    javaclass java_class_object
else
throw runtime newtypeerror java_class_object  runtime getjavasupport   getjavaclassclass
return getproxyclass runtime  javaclass
private static rubyclass createproxyclass ruby runtime  rubyclass basetype
javaclass javaclass  boolean invokeinherited
// this needs to be split, since conditional calling #inherited doesn't fit standard ruby semantics
rubyclass checkinheritable basetype
rubyclass superclass    rubyclass basetype
rubyclass proxyclass   rubyclass newclass runtime  superclass
proxyclass makemetaclass superclass getmetaclass
proxyclass setallocator superclass getallocator
if  invokeinherited  proxyclass inherit superclass
proxyclass callmethod runtime getcurrentcontext       javaclass
javaclass setupproxy proxyclass
return proxyclass
public static irubyobject concrete_proxy_inherited irubyobject recv  irubyobject subclass
ruby runtime   recv getruntime
threadcontext tc   runtime getcurrentcontext
javasupport javasupport   runtime getjavasupport
rubyclass javaproxyclass   javasupport getjavaproxyclass   getmetaclass
runtimehelpers invokeas tc  javaproxyclass  recv     new irubyobject subclass
org jruby runtime calltype super  block null_block
// todo: move to java
return javasupport getjavautilitiesmodule   callmethod tc
new irubyobject subclass  recv callmethod tc
// package scheme 2: separate module for each full package name, constructed
// from the camel-cased package segments: java::javalang::object,
private static void addtojavapackagemodule rubymodule proxyclass  javaclass javaclass
class clazz   javaclass javaclass
string fullname
if   fullname   clazz getname       null  return
int endpackage   fullname lastindexof
// we'll only map conventional class names to modules
if  fullname indexof        1     character isuppercase fullname charat endpackage   1
return
ruby runtime   proxyclass getruntime
string packagestring   endpackage < 0 ?     fullname substring 0 endpackage
rubymodule packagemodule   getjavapackagemodule runtime  packagestring
if  packagemodule    null
string classname   fullname substring endpackage   1
if  packagemodule getconstantat classname     null
packagemodule const_set runtime newsymbol classname  proxyclass
private static rubymodule getjavapackagemodule ruby runtime  string packagestring
string packagename
int length   packagestring length
if  length    0
packagename
else
stringbuffer buf   new stringbuffer
for  int start   0  offset   0  start < length  start   offset   1
if   offset   packagestring indexof    start       1
offset   length
buf append character touppercase packagestring charat start
append packagestring substring start 1  offset
packagename   buf tostring
rubymodule javamodule   runtime getjavasupport   getjavamodule
irubyobject packagemodule   javamodule getconstantat packagename
if  packagemodule    null
return createpackagemodule javamodule  packagename  packagestring
else if  packagemodule instanceof rubymodule
return  rubymodule packagemodule
else
return null
private static rubymodule createpackagemodule rubymodule parent  string name  string packagestring
ruby runtime   parent getruntime
rubymodule packagemodule    rubymodule runtime getjavasupport
getpackagemoduletemplate   dup
packagemodule fastsetinstancevariable   runtime newstring
packagestring length   > 0 ? packagestring       packagestring
// this is where we'll get connected when classes are opened using
// package module syntax.
packagemodule addclassprovider java_package_class_provider
parent const_set runtime newsymbol name   packagemodule
metaclass metaclass    metaclass packagemodule getmetaclass
metaclass setattached packagemodule
return packagemodule
private static final pattern camel_case_package_splitter   pattern compile
public static rubymodule getpackagemodule ruby runtime  string name
rubymodule javamodule   runtime getjavasupport   getjavamodule
irubyobject value
if   value   javamodule getconstantat name   instanceof rubymodule
return  rubymodule value
string packagename
if    equals name
packagename
else
matcher m   camel_case_package_splitter matcher name
packagename   m replaceall    tolowercase
return createpackagemodule javamodule  name  packagename
public static irubyobject get_package_module irubyobject recv  irubyobject symobject
return getpackagemodule recv getruntime    symobject asjavastring
public static irubyobject get_package_module_dot_format irubyobject recv  irubyobject dottedname
ruby runtime   recv getruntime
rubymodule module   getjavapackagemodule runtime  dottedname asjavastring
return module    null ? runtime getnil     module
public static rubymodule getproxyorpackageunderpackage final ruby runtime  rubymodule parentpackage  string sym
irubyobject packagenameobj   parentpackage fastgetinstancevariable
if  packagenameobj    null  throw runtime newargumenterror
string packagename   packagenameobj asjavastring
final string name   sym trim   intern
if  name length      0  throw runtime newargumenterror
string fullname   packagename   name
if  character islowercase name charat 0
// todo: should check against all java reserved names here, not just primitives
if  java_primitives containskey name   throw runtime newargumenterror     name
// this covers the rare case of lower-case class names (and thus will
// fail 99.999% of the time). fortunately, we'll only do this once per
// package name. (and seriously, folks, look into best practices...)
try
return getproxyclass runtime  javaclass fornamequiet runtime  fullname
catch  raiseexception re       expected
rubyexception rubyex   re getexception
if  rubyex kind_of_p runtime getstandarderror    istrue
runtimehelpers seterrorinfo runtime  runtime getnil
catch  exception e       expected
rubymodule packagemodule
// todo: decompose getjavapackagemodule so we don't parse fullname
if   packagemodule   getjavapackagemodule runtime  fullname      null  return null
// save package module as ivar in parent, and add method to parent so
// we don't have to come back here.
final string ivarname        name  intern
parentpackage fastsetinstancevariable ivarname  packagemodule
rubyclass singleton   parentpackage getsingletonclass
singleton addmethod name  new org jruby internal runtime methods javamethod singleton  visibility public
public irubyobject call threadcontext context  irubyobject self  rubymodule clazz  string name  irubyobject args  block block
if  args length    0  arity raiseargumenterror runtime  args length  0  0
irubyobject variable
if   variable     rubymodule self  fastgetinstancevariable ivarname      null
return variable
return runtime getnil
public arity getarity
return arity noarguments
return packagemodule
else
// upper case name, so most likely a class
return getproxyclass runtime  javaclass fornameverbose runtime  fullname
// fixme: we should also support orgs that use capitalized package
// names (including, embarrassingly, the one i work for), but this
// should be enabled by a system property, as the expected default
// behavior for an upper-case value should be (and is) to treat it
// as a class name, and raise an exception if it's not found
//            try {
//                return getproxyclass(runtime, javaclass.forname(runtime, fullname));
//            } catch (exception e) {
//                // but for those not hip to conventions and best practices,
//                // we'll try as a package
//                return getjavapackagemodule(runtime, fullname);
//            }
public static irubyobject get_proxy_or_package_under_package
irubyobject recv
irubyobject parentpackage
irubyobject sym
ruby runtime   recv getruntime
if    parentpackage instanceof rubymodule   throw runtime newtypeerror parentpackage  runtime getmodule
rubymodule result
if   result   getproxyorpackageunderpackage runtime
rubymodule parentpackage  sym asjavastring        null
return result
return runtime getnil
public static rubymodule gettoplevelproxyorpackage final ruby runtime  string sym
final string name   sym trim   intern
if  name length      0  throw runtime newargumenterror
if  character islowercase name charat 0
// this covers primitives and (unlikely) lower-case class names
try
return getproxyclass runtime  javaclass fornamequiet runtime  name
catch  raiseexception re       not primitive or lc class
rubyexception rubyex   re getexception
if  rubyex kind_of_p runtime getstandarderror    istrue
runtimehelpers seterrorinfo runtime  runtime getnil
catch  exception e       not primitive or lc class
// todo: check for java reserved names and raise exception if encountered
rubymodule packagemodule
// todo: decompose getjavapackagemodule so we don't parse fullname
if   packagemodule   getjavapackagemodule runtime  name      null  return null
rubymodule javamodule   runtime getjavasupport   getjavamodule
if  javamodule getmetaclass   ismethodbound name  false   return packagemodule
// save package module as ivar in parent, and add method to parent so
// we don't have to come back here.
final string ivarname        name  intern
javamodule fastsetinstancevariable ivarname  packagemodule
rubyclass singleton   javamodule getsingletonclass
singleton addmethod name  new org jruby internal runtime methods javamethod singleton  visibility public
public irubyobject call threadcontext context  irubyobject self  rubymodule clazz  string name  irubyobject args  block block
if  args length    0  arity raiseargumenterror runtime  args length  0  0
irubyobject variable
if   variable     rubymodule self  fastgetinstancevariable ivarname      null
return variable
return runtime getnil
public arity getarity
return arity noarguments
return packagemodule
else
try
return getproxyclass runtime  javaclass fornamequiet runtime  name
catch  raiseexception re       not a class
rubyexception rubyex   re getexception
if  rubyex kind_of_p runtime getstandarderror    istrue
runtimehelpers seterrorinfo runtime  runtime getnil
catch  exception e       not a class
// upper-case package name
// todo: top-level upper-case package was supported in the previous (ruby-based)
// implementation, so leaving as is.  see note at #getproxyorpackageunderpackage
// re: future approach below the top-level.
return getpackagemodule runtime  name
public static irubyobject get_top_level_proxy_or_package irubyobject recv  irubyobject sym
ruby runtime   recv getruntime
rubymodule result
if   result   gettoplevelproxyorpackage runtime  sym asjavastring        null
return result
return runtime getnil
public static irubyobject matching_method irubyobject recv  irubyobject methods  irubyobject args
map matchcache   recv getruntime   getjavasupport   getmatchcache
list<class<?>> arg_types   new arraylist<class<?>>
int alen     rubyarray args  getlength
irubyobject aargs     rubyarray args  tojavaarraymaybeunsafe
for int i 0 i<alen i
if  aargs instanceof javaobject
arg_types add   javaclass   javaobject aargs  java_class    javaclass
else
arg_types add aargs getclass
map ms    map matchcache get methods
if ms    null
ms   new hashmap
matchcache put methods  ms
else
irubyobject method    irubyobject ms get arg_types
if method    null
return method
int mlen     rubyarray methods  getlength
irubyobject margs     rubyarray methods  tojavaarraymaybeunsafe
for int i 0 i<2 i
for int k 0 k<mlen k
irubyobject method   margs
list<class<?>> types   arrays aslist   parametertypes method  getparametertypes
// compatible (by inheritance)
if arg_types size      types size
// exact match
if types equals arg_types
ms put arg_types  method
return method
boolean match   true
for int j 0  j<types size    j
if   javaclass assignable types get j   arg_types get j
i > 0    primitive_match types get j  arg_types get j
javautil isducktypeconvertable arg_types get j   types get j
match   false
break
if match
ms put arg_types  method
return method
could check for varargs here?
object o1   margs
if o1 instanceof javaconstructor    o1 instanceof javaproxyconstructor
throw recv getruntime   newnameerror     arg_types       recv callmethod recv getruntime   getcurrentcontext       null
else
throw recv getruntime   newnameerror       javamethod o1  name         arg_types       recv callmethod recv getruntime   getcurrentcontext       null
public static irubyobject matching_method_internal irubyobject recv  irubyobject methods  irubyobject args  int start  int len
map matchcache   recv getruntime   getjavasupport   getmatchcache
list<class<?>> arg_types   new arraylist<class<?>>
int aend   start len
for int i start i<aend i
if  args instanceof javaobject
arg_types add   javaclass   javaobject args  java_class    javaclass
else
arg_types add args getclass
map ms    map matchcache get methods
if ms    null
ms   new hashmap
matchcache put methods  ms
else
irubyobject method    irubyobject ms get arg_types
if method    null
return method
int mlen     rubyarray methods  getlength
irubyobject margs     rubyarray methods  tojavaarraymaybeunsafe
mfor  for int k 0 k<mlen k
irubyobject method   margs
class<?> types     parametertypes method  getparametertypes
// compatible (by inheritance)
if len    types length
// exact match
boolean same   true
for int x 0 y len x<y x
if  types equals arg_types get x
same   false
break
if same
ms put arg_types  method
return method
for int j 0 m len  j<m  j
if
javaclass assignable types  arg_types get j
primitive_match types arg_types get j
continue mfor
ms put arg_types  method
return method
mfor  for int k 0 k<mlen k
irubyobject method   margs
class<?> types     parametertypes method  getparametertypes
// compatible (by inheritance)
if len    types length
for int j 0 m len  j<m  j
if  javaclass assignable types  arg_types get j
javautil isducktypeconvertable arg_types get j   types
continue mfor
ms put arg_types  method
return method
object o1   margs
if o1 instanceof javaconstructor    o1 instanceof javaproxyconstructor
throw recv getruntime   newnameerror     arg_types       recv callmethod recv getruntime   getcurrentcontext       null
else
throw recv getruntime   newnameerror       javamethod o1  name         arg_types       recv callmethod recv getruntime   getcurrentcontext       null
public static irubyobject access irubyobject recv  irubyobject java_type
int modifiers     javaclass java_type  javaclass   getmodifiers
return recv getruntime   newstring modifier ispublic modifiers  ?      modifier isprotected modifiers  ?
public static irubyobject valid_constant_name_p irubyobject recv  irubyobject name
rubystring sname   name converttostring
if sname getbytelist   length      0
return recv getruntime   getfalse
return character isuppercase sname getbytelist   charat 0   ? recv getruntime   gettrue     recv getruntime   getfalse
public static boolean primitive_match object v1  object v2
if   class v1  isprimitive
if v1    integer type    v1    long type    v1    short type    v1    character type
return v2    integer class
v2    long class
v2    short class
v2    character class
else if v1    float type    v1    double type
return v2    float class
v2    double class
else if v1    boolean type
return v2    boolean class
return false
return true
public static irubyobject primitive_match irubyobject recv  irubyobject t1  irubyobject t2
if   javaclass t1  primitive_p   istrue
object v1     javaobject t1  getvalue
object v2     javaobject t2  getvalue
return primitive_match v1 v2  ? recv getruntime   gettrue     recv getruntime   getfalse
return recv getruntime   gettrue
public static irubyobject wrap irubyobject recv  irubyobject java_object
return getinstance recv getruntime      javaobject java_object  getvalue
public static irubyobject wrap ruby runtime  irubyobject java_object
return getinstance runtime    javaobject java_object  getvalue
// java methods
public static irubyobject define_exception_handler irubyobject recv  irubyobject args  block block
string name   args tostring
rubyproc handler   null
if  args length > 1
handler    rubyproc args
else
handler   recv getruntime   newproc block type proc  block
recv getruntime   getjavasupport   defineexceptionhandler name  handler
return recv
public static irubyobject primitive_to_java irubyobject recv  irubyobject object  block unusedblock
if  object instanceof javaobject
return object
ruby runtime   recv getruntime
object javaobject
switch  object getmetaclass   index
case classindex nil
javaobject   null
break
case classindex fixnum
javaobject   new long   rubyfixnum  object  getlongvalue
break
case classindex bignum
javaobject     rubybignum  object  getvalue
break
case classindex float
javaobject   new double   rubyfloat  object  getvalue
break
case classindex string
try
bytelist bytes     rubystring  object  getbytelist
javaobject   new string bytes unsafebytes    bytes begin    bytes length
catch  unsupportedencodingexception uee
javaobject   object tostring
break
case classindex true
javaobject   boolean true
break
case classindex false
javaobject   boolean false
break
default
if  object instanceof rubytime
javaobject     rubytime object  getjavadate
else
javaobject   object
return javaobject wrap runtime  javaobject
/**
* high-level object conversion utility function 'java_to_primitive' is the low-level version
*/
public static irubyobject java_to_ruby irubyobject recv  irubyobject object  block unusedblock
if object instanceof javaobject
return javautil convertjavatousablerubyobject recv getruntime      javaobject object  getvalue
return object
// todo: formalize conversion mechanisms between java and ruby
/**
* high-level object conversion utility.
*/
public static irubyobject ruby_to_java final irubyobject recv  irubyobject object  block unusedblock
if object respondsto
irubyobject result   object getinstancevariables   fastgetinstancevariable
if result    null
result   object callmethod recv getruntime   getcurrentcontext
if  result instanceof javaobject
recv getruntime   getjavasupport   getobjectproxycache
put   javaobject result  getvalue    object
return result
return primitive_to_java recv  object  unusedblock
public static irubyobject java_to_primitive irubyobject recv  irubyobject object  block unusedblock
if  object instanceof javaobject
return javautil convertjavatoruby recv getruntime      javaobject  object  getvalue
return object
public static irubyobject new_proxy_instance final irubyobject recv  irubyobject args  block block
int size   arity checkargumentcount recv getruntime    args  1   1    1
final rubyproc proc
// is there a supplied proc argument or do we assume a block was supplied
if  args instanceof rubyproc
proc    rubyproc  args
else
proc   recv getruntime   newproc block type proc  block
size
// create list of interfaces to proxy (and make sure they really are interfaces)
class interfaces   new class
for  int i   0  i < size  i
if    args instanceof javaclass        javaclass args  interface_p   istrue
throw recv getruntime   newargumenterror     args
interfaces     javaclass  args  javaclass
return javaobject wrap recv getruntime    proxy newproxyinstance recv getruntime   getjrubyclassloader    interfaces  new invocationhandler
private map parametertypecache   new concurrenthashmap
public object invoke object proxy  method method  object nargs  throws throwable
class parametertypes    class parametertypecache get method
if  parametertypes    null
parametertypes   method getparametertypes
parametertypecache put method  parametertypes
int methodargslength   parametertypes length
string methodname   method getname
if  methodname equals       methodargslength    0
return proxy getclass   getname
else if  methodname equals       methodargslength    0
return new integer proxy getclass   hashcode
else if  methodname equals       methodargslength    1    parametertypes equals object class
return boolean valueof proxy    nargs
ruby runtime   recv getruntime
int length   nargs    null ? 0   nargs length
irubyobject rubyargs   new irubyobject
rubyargs   javaobject wrap runtime  proxy
rubyargs   new javamethod runtime  method
for  int i   0  i < length  i
rubyargs   javaobject wrap runtime  nargs
return javautil convertargument runtime  proc call runtime getcurrentcontext    rubyargs   method getreturntype