/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2006 mentalguy <mental@rydia.net>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
/* portions loosely based on public-domain jsr-166 code by doug lea et al. */
package org jruby libraries
import java io ioexception
import java util linkedlist
import org jruby ruby
import org jruby rubyobject
import org jruby rubyclass
import org jruby rubyboolean
import org jruby rubythread
import org jruby rubyinteger
import org jruby rubyfloat
import org jruby rubynumeric
import org jruby exceptions raiseexception
import org jruby runtime arity
import org jruby runtime block
import org jruby runtime callbackfactory
import org jruby runtime objectallocator
import org jruby runtime load library
import org jruby runtime builtin irubyobject
/**
* @author <a href="mailto:mental@rydia.net">mentalguy</a>
*/
public class threadlibrary implements library
public void load final ruby runtime  boolean wrap  throws ioexception
mutex setup runtime
conditionvariable setup runtime
queue setup runtime
sizedqueue setup runtime
static boolean wait_timeout irubyobject o  double timeout  throws interruptedexception
if   timeout    null
long delay_ns    long  timeout   1000000000 0
long start_ns   system nanotime
if  delay_ns > 0
long delay_ms   delay_ns   1000000
int delay_ns_remainder    int   delay_ns % 1000000
o wait delay_ms  delay_ns_remainder
long end_ns   system nanotime
return   end_ns   start_ns   <  delay_ns
else
o wait
return true
public static class mutex extends rubyobject
private rubythread owner   null
public static mutex newinstance irubyobject recv  irubyobject args  block block
mutex result   new mutex recv getruntime     rubyclass recv
result callinit args  block
return result
public mutex ruby runtime  rubyclass type
super runtime  type
public static void setup ruby runtime
rubyclass cmutex   runtime defineclass    runtime getobject    new objectallocator
public irubyobject allocate ruby runtime  rubyclass klass
return new mutex runtime  klass
callbackfactory cb   runtime callbackfactory mutex class
cmutex getmetaclass   definemethod    cb getoptsingletonmethod
cmutex definefastmethod    cb getfastmethod
cmutex definefastmethod    cb getfastmethod
cmutex definefastmethod    cb getfastmethod
cmutex definefastmethod    cb getfastmethod
cmutex definemethod    cb getmethod
public synchronized rubyboolean locked_p
return   owner    null ? getruntime   gettrue     getruntime   getfalse
public rubyboolean try_lock   throws interruptedexception
//if (thread.interrupted()) {
//    throw new interruptedexception();
//}
synchronized  this
if   owner    null
return getruntime   getfalse
lock
return getruntime   gettrue
public irubyobject lock   throws interruptedexception
//if (thread.interrupted()) {
//    throw new interruptedexception();
//}
synchronized  this
try
while   owner    null
wait
owner   getruntime   getcurrentcontext   getthread
catch  interruptedexception ex
if   owner    null
notify
throw ex
return this
public synchronized rubyboolean unlock
if   owner    null
owner   null
notify
return getruntime   gettrue
else
return getruntime   getfalse
public irubyobject synchronize block block  throws interruptedexception
try
lock
return block yield getruntime   getcurrentcontext    null
finally
unlock
public static class conditionvariable extends rubyobject
public static conditionvariable newinstance irubyobject recv  irubyobject args  block block
conditionvariable result   new conditionvariable recv getruntime     rubyclass recv
result callinit args  block
return result
public conditionvariable ruby runtime  rubyclass type
super runtime  type
public static void setup ruby runtime
rubyclass cconditionvariable   runtime defineclass    runtime getobject    new objectallocator
public irubyobject allocate ruby runtime  rubyclass klass
return new conditionvariable runtime  klass
callbackfactory cb   runtime callbackfactory conditionvariable class
cconditionvariable getmetaclass   definemethod    cb getoptsingletonmethod
cconditionvariable definefastmethod    cb getfastoptmethod
cconditionvariable definefastmethod    cb getfastmethod
cconditionvariable definefastmethod    cb getfastmethod
public irubyobject wait_ruby irubyobject args  throws interruptedexception
if   args length < 1
throw getruntime   newargumenterror args length  1
if   args length > 2
throw getruntime   newargumenterror args length  2
if     args instanceof mutex
throw getruntime   newtypeerror args  getruntime   fastgetclass
mutex mutex    mutex args
double timeout   null
if   args length > 1     args isnil
timeout   args converttofloat   getdoublevalue
if  thread interrupted
throw new interruptedexception
boolean success   false
try
synchronized  this
mutex unlock
try
success   threadlibrary wait_timeout this  timeout
finally
// an interrupt or timeout may have caused us to miss
// a notify that we consumed, so do another notify in
// case someone else is available to pick it up.
if   success
this notify
finally
mutex lock
if  timeout    null
return getruntime   newboolean success
else
// backwards-compatibility
return getruntime   getnil
public synchronized irubyobject broadcast
notifyall
return getruntime   getnil
public synchronized irubyobject signal
notify
return getruntime   getnil
public static class queue extends rubyobject
private linkedlist entries
public static irubyobject newinstance irubyobject recv  irubyobject args  block block
queue result   new queue recv getruntime     rubyclass recv
result callinit args  block
return result
public queue ruby runtime  rubyclass type
super runtime  type
entries   new linkedlist
public static void setup ruby runtime
rubyclass cqueue   runtime defineclass    runtime getobject    new objectallocator
public irubyobject allocate ruby runtime  rubyclass klass
return new queue runtime  klass
callbackfactory cb   runtime callbackfactory queue class
cqueue getmetaclass   definemethod    cb getoptsingletonmethod
cqueue definefastmethod    cb getfastmethod
cqueue definefastmethod    cb getfastmethod
cqueue definefastmethod    cb getfastmethod
cqueue definefastmethod    cb getfastmethod
cqueue definefastmethod    cb getfastoptmethod
cqueue definefastmethod    cb getfastmethod    irubyobject class
cqueue definealias
cqueue definealias
cqueue definealias
cqueue definealias
cqueue definealias
public synchronized irubyobject clear
entries clear
return getruntime   getnil
public synchronized rubyboolean empty_p
return   entries size      0 ? getruntime   gettrue     getruntime   getfalse
public synchronized rubynumeric length
return rubynumeric int2fix getruntime    entries size
public rubynumeric num_waiting     return getruntime   newfixnum 0
public synchronized irubyobject pop irubyobject args
boolean should_block   true
if   arity checkargumentcount getruntime    args  0  1     1
should_block    args istrue
if    should_block    entries size      0
throw new raiseexception getruntime    getruntime   fastgetclass        false
while   entries size      0
try
wait
catch  interruptedexception e
return  irubyobject entries removefirst
public synchronized irubyobject push irubyobject value
entries addlast value
notify
return getruntime   getnil
public static class sizedqueue extends queue
private int capacity
public static irubyobject newinstance irubyobject recv  irubyobject args  block block
sizedqueue result   new sizedqueue recv getruntime     rubyclass recv
result callinit args  block
return result
public sizedqueue ruby runtime  rubyclass type
super runtime  type
capacity   1
public static void setup ruby runtime
rubyclass csizedqueue   runtime defineclass    runtime fastgetclass     new objectallocator
public irubyobject allocate ruby runtime  rubyclass klass
return new sizedqueue runtime  klass
callbackfactory cb   runtime callbackfactory sizedqueue class
csizedqueue getmetaclass   definemethod    cb getoptsingletonmethod
csizedqueue definefastmethod    cb getfastmethod    rubyinteger class
csizedqueue definefastmethod    cb getfastmethod
csizedqueue definefastmethod    cb getfastmethod
csizedqueue definefastmethod    cb getfastmethod    rubyinteger class
csizedqueue definefastmethod    cb getfastoptmethod
csizedqueue definefastmethod    cb getfastmethod    irubyobject class
csizedqueue definealias
csizedqueue definealias
csizedqueue definealias
public synchronized irubyobject clear
super clear
notifyall
return getruntime   getnil
public synchronized rubynumeric max
return rubynumeric int2fix getruntime    capacity
public synchronized irubyobject max_set rubyinteger arg
int new_capacity   rubynumeric fix2int arg
if   new_capacity <  0
getruntime   newargumenterror
int difference
if   new_capacity > capacity
difference   new_capacity   capacity
else
difference   0
capacity   new_capacity
if   difference > 0
notifyall
return getruntime   getnil
public synchronized irubyobject pop irubyobject args
irubyobject result   super pop args
notifyall
return result
public synchronized irubyobject push irubyobject value
while   rubynumeric fix2int length    >  capacity
try
wait
catch  interruptedexception e
super push value
notifyall
return getruntime   getnil