/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2007 charles o nutter <headius@headius.com>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby libraries
import java io ioexception
import org jruby ruby
import org jruby rubyobject
import org jruby rubyclass
import org jruby runtime block
import org jruby runtime callbackfactory
import org jruby runtime objectallocator
import org jruby runtime threadcontext
import org jruby runtime load library
import org jruby runtime builtin irubyobject
/**
* a basic implementation of ruby 1.9 fiber library.
*/
public class fiberlibrary implements library
public void load final ruby runtime  boolean wrap  throws ioexception
fiber setup runtime
public static class fiber extends rubyobject
private block block
private object yieldlock   new object
private irubyobject result
private thread thread
private boolean alive   false
public static fiber newinstance irubyobject recv  irubyobject args  block block
fiber result   new fiber recv getruntime     rubyclass recv
result initialize args  block
return result
public irubyobject initialize final irubyobject args  block block
this block   block
final ruby runtime   getruntime
this result   runtime getnil
this thread   new thread
public void run
synchronized  yieldlock
alive   true
threadcontext context   runtime getcurrentcontext
context setfiber fiber this
try
result   fiber this block yield runtime getcurrentcontext    result  null  null  true
finally
yieldlock notify
// fixme: is this appropriate? should still-running fibers just die on exit?
this thread setdaemon true
return this
public fiber ruby runtime  rubyclass type
super runtime  type
public static void setup ruby runtime
rubyclass cfiber   runtime defineclass    runtime getobject    objectallocator not_allocatable_allocator
callbackfactory cb   runtime callbackfactory fiber class
cfiber getmetaclass   definemethod    cb getoptsingletonmethod
cfiber definefastmethod    cb getfastoptmethod
// fixme: not sure what the semantics of transfer are
//cfiber.definefastmethod("transfer", cb.getfastoptmethod("transfer"));
cfiber definefastmethod    cb getfastmethod
cfiber getmetaclass   definefastmethod    cb getfastsingletonmethod    irubyobject class
cfiber getmetaclass   definefastmethod    cb getfastsingletonmethod
public irubyobject resume irubyobject args  throws interruptedexception
synchronized  yieldlock
result   getruntime   newarraynocopylight args
if   alive
thread start
yieldlock wait
else
yieldlock notify
yieldlock wait
return result
public irubyobject transfer irubyobject args  throws interruptedexception
synchronized  yieldlock
yieldlock notify
yieldlock wait
return result
public irubyobject alive_p
return getruntime   newboolean alive
public static irubyobject yield irubyobject recv  irubyobject value  throws interruptedexception
fiber fiber   recv getruntime   getcurrentcontext   getfiber
fiber result   value
synchronized  fiber yieldlock
fiber yieldlock notify
fiber yieldlock wait
return recv getruntime   getnil
public static irubyobject current irubyobject recv
return recv getruntime   getcurrentcontext   getfiber