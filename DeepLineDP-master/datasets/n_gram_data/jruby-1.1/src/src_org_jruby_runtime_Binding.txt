/*
***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2002-2004 anders bengtsson <ndrsbngtssn@yahoo.se>
* copyright (c) 2001-2004 jan arne petersen <jpetersen@uni-bonn.de>
* copyright (c) 2002 benoit cerrina <b.cerrina@wanadoo.fr>
* copyright (c) 2004-2007 thomas e enebo <enebo@acm.org>
* copyright (c) 2004 stefan matthias aust <sma@3plus4.de>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby runtime
import org jruby rubymodule
import org jruby parser blockstaticscope
import org jruby runtime builtin irubyobject
/**
*  internal live representation of a block ({...} or do ... end).
*/
public class binding
/**
* 'self' at point when the block is defined
*/
private irubyobject self
/**
* frame of method which defined this block
*/
private final frame frame
private visibility visibility
private rubymodule klass
/**
* a reference to all variable values (and names) that are in-scope for this block.
*/
private final dynamicscope dynamicscope
public binding irubyobject self  frame frame
visibility visibility  rubymodule klass  dynamicscope dynamicscope
this self   self
this frame   frame
this visibility   visibility
this klass   klass
this dynamicscope   dynamicscope
public binding frame frame  rubymodule bindingclass  dynamicscope dynamicscope
this self   frame getself
this frame   frame
this visibility   frame getvisibility
this klass   bindingclass
this dynamicscope   dynamicscope
public binding clonebinding
// we clone dynamic scope because this will be a new instance of a block.  any previously
// captured instances of this block may still be around and we do not want to start
// overwriting those values when we create a new one.
// enebo: once we make self, lastclass, and lastmethod immutable we can remove duplicate
binding newblock   new binding self  frame duplicate    visibility  klass
dynamicscope clonescope
return newblock
public visibility getvisibility
return visibility
public void setvisibility visibility visibility
this visibility   visibility
public irubyobject getself
return self
public void setself irubyobject self
this self   self
/**
* gets the dynamicvariables that are local to this block.   parent dynamic scopes are also
* accessible via the current dynamic scope.
*
* @return returns all relevent variable scoping information
*/
public dynamicscope getdynamicscope
return dynamicscope
/**
* gets the frame.
*
* @return returns a rubyframe
*/
public frame getframe
return frame
/**
* gets the klass.
* @return returns a rubymodule
*/
public rubymodule getklass
return klass
/**
* is the current block a real yield'able block instead a null one
*
* @return true if this is a valid block or false otherwise
*/
public boolean isgiven
return true