/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2006 ola bini <ola@ologix.com>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby runtime
import org jruby rubymodule
import org jruby parser staticscope
import org jruby runtime builtin irubyobject
/**
* a block implemented using a java-based blockcallback implementation
* rather than with an icallable. for lightweight block logic within
* java code.
*/
public class callblock extends blockbody
private arity arity
private blockcallback callback
private rubymodule imclass
private threadcontext context
public static block newcallclosure irubyobject self  rubymodule imclass  arity arity  blockcallback callback  threadcontext context
binding binding   new binding self
context getcurrentframe
visibility public
context getrubyclass
context getcurrentscope
blockbody body   new callblock imclass  arity  callback  context
return new block body  binding
private callblock rubymodule imclass  arity arity  blockcallback callback  threadcontext context
super blockbody single_restarg
this arity   arity
this callback   callback
this imclass   imclass
this context   context
public irubyobject call threadcontext context  irubyobject args  binding binding  block type type
return callback call context  args  block null_block
public irubyobject yield threadcontext context  irubyobject value  binding binding  block type type
return yield context  value  null  null  false  binding  type
/**
* yield to this block, usually passed to the current call.
*
* @param context represents the current thread-specific data
* @param value the value to yield, either a single value or an array of values
* @param self the current self
* @param klass
* @param avalue should value be arrayified or not?
* @return
*/
public irubyobject yield threadcontext context  irubyobject value  irubyobject self
rubymodule klass  boolean avalue  binding binding  block type type
if  klass    null
self   binding getself
// fixme: we never set this back!
binding getframe   setself self
return callback call context  new irubyobject  value   block null_block
public staticscope getstaticscope
throw new runtimeexception
public block cloneblock binding binding
binding   new binding binding getself    context getcurrentframe   duplicate
visibility public
context getrubyclass
context getcurrentscope
return new block this  binding
public arity arity
return arity