/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2006 ola bini <ola@ologix.com>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby ext
import java io ioexception
import org jruby ruby
import org jruby rubyclass
import org jruby rubyobject
import org jruby rubyproc
import org jruby javasupport util runtimehelpers
import org jruby runtime arity
import org jruby runtime block
import org jruby runtime callblock
import org jruby runtime callbackfactory
import org jruby runtime blockcallback
import org jruby runtime threadcontext
import org jruby runtime load library
import org jruby runtime builtin irubyobject
import org jruby runtime methodindex
/**
* @author <a href="mailto:ola.bini@ki.se">ola bini</a>
*/
public class generator
public static class service implements library
public void load final ruby runtime  boolean wrap  throws ioexception
creategenerator runtime
public static void creategenerator ruby runtime  throws ioexception
rubyclass cgen   runtime defineclass   runtime getobject    runtime getobject   getallocator
cgen includemodule runtime getenumerable
callbackfactory callbackfactory   runtime callbackfactory generator class
cgen getmetaclass   definemethod   callbackfactory getoptsingletonmethod
cgen definemethod   callbackfactory getoptsingletonmethod
cgen definemethod   callbackfactory getsingletonmethod   irubyobject class
cgen definefastmethod   callbackfactory getfastsingletonmethod
cgen definefastmethod   callbackfactory getfastsingletonmethod
cgen definefastmethod   callbackfactory getfastsingletonmethod
cgen definealias
cgen definemethod   callbackfactory getsingletonmethod
cgen definemethod   callbackfactory getsingletonmethod
cgen definemethod   callbackfactory getsingletonmethod
cgen definemethod   callbackfactory getsingletonmethod
static class generatordata implements runnable
private irubyobject gen
private object mutex   new object
private irubyobject enm
private rubyproc proc
private thread t
private volatile boolean end
private iterblockcallback ibc
public generatordata irubyobject gen
this gen   gen
public void setenum irubyobject enm
this proc   null
this enm   enm
start
public void setproc rubyproc proc
this proc   proc
this enm   null
start
public void start
if  t    null
// deal with previously started thread first
t interrupt
try
t join
catch  interruptedexception e
// do nothing
end   false
ibc   new iterblockcallback
t   new thread this
t setdaemon true
t start
generate
public boolean isend
return end
private boolean available   false
public void dowait
available   true
if proc    null
boolean inter   true
synchronized mutex
mutex notifyall
while inter
try
mutex wait
inter   false
catch interruptedexception e
public void generate
if proc    null
boolean inter   true
synchronized mutex
while  ibc havevalue       end
mutex notifyall
inter   true
while inter
try
mutex wait
inter   false
catch interruptedexception e
if ibc havevalue      proc    null
gen callmethod gen getruntime   getcurrentcontext     ibc pop
else
synchronized mutex
while  available     end
boolean inter   true
mutex notifyall
while inter
try
mutex wait 20
inter   false
catch interruptedexception e
available   false
private class iterblockcallback implements blockcallback
private irubyobject obj
private boolean shouldskip   false
public irubyobject call threadcontext context  irubyobject iargs  block block
if  shouldskip
// the thread was interrupted, this is a signal
// that we should not do any work, and exit the thread.
return gen getruntime   getnil
boolean inter   true
synchronized mutex
mutex notifyall
while inter
try
mutex wait
inter   false
catch interruptedexception e
shouldskip   true
return gen getruntime   getnil
if iargs length > 1
obj   gen getruntime   newarraynocopy iargs
else
obj   iargs
mutex notifyall
return gen getruntime   getnil
public boolean havevalue
return obj    null
public irubyobject pop
irubyobject a   obj
obj   null
return a
public void run
threadcontext context   gen getruntime   getcurrentcontext
if enm    null
enm callmethod context     irubyobject null_array
callblock newcallclosure enm enm getmetaclass   getrealclass   arity noarguments   ibc context
else
proc call context  new irubyobject gen
end   true
synchronized mutex
mutex notifyall
public static irubyobject new_instance irubyobject self  irubyobject args  block block
// generator#new
irubyobject result   new rubyobject self getruntime    rubyclass self
result datawrapstruct new generatordata result
result callmethod self getruntime   getcurrentcontext       args  block
return result
public static irubyobject initialize irubyobject self  irubyobject args  block block
// generator#initialize
generatordata d    generatordata self datagetstruct
self getinstancevariables   setinstancevariable   self getruntime   newarray
self getinstancevariables   setinstancevariable   self getruntime   newfixnum 0
if arity checkargumentcount self getruntime    args 0 1     1
d setenum args
else
d setproc self getruntime   newproc block type proc  block
return self
public static irubyobject yield irubyobject self  irubyobject value  block block
// generator#yield
self getinstancevariables   getinstancevariable    callmethod self getruntime   getcurrentcontext     value
generatordata d    generatordata self datagetstruct
d dowait
return self
public static irubyobject end_p irubyobject self
// generator#end_p
generatordata d    generatordata self datagetstruct
boolean emptyqueue   self getinstancevariables   getinstancevariable    callmethod
self getruntime   getcurrentcontext    methodindex empty_p     istrue
return  d isend      emptyqueue  ? self getruntime   gettrue     self getruntime   getfalse
public static irubyobject next_p irubyobject self
// generator#next_p
return runtimehelpers negate
runtimehelpers invoke self getruntime   getcurrentcontext    self
self getruntime
public static irubyobject index irubyobject self
// generator#index
return self getinstancevariables   getinstancevariable
public static irubyobject next irubyobject self  block block
// generator#next
generatordata d    generatordata self datagetstruct
if runtimehelpers invoke self getruntime   getcurrentcontext    self     istrue
throw self getruntime   neweoferror
d generate
self getinstancevariables   setinstancevariable   self getinstancevariables   getinstancevariable    callmethod self getruntime   getcurrentcontext   methodindex op_plus    self getruntime   newfixnum 1
return self getinstancevariables   getinstancevariable    callmethod self getruntime   getcurrentcontext
public static irubyobject current irubyobject self  block block
// generator#current
if self getinstancevariables   getinstancevariable    callmethod self getruntime   getcurrentcontext   methodindex empty_p     istrue
throw self getruntime   neweoferror
return self getinstancevariables   getinstancevariable    callmethod self getruntime   getcurrentcontext
public static irubyobject rewind irubyobject self  block block
// generator#rewind
if self getinstancevariables   getinstancevariable    callmethod self getruntime   getcurrentcontext      istrue
generatordata d    generatordata self datagetstruct
self getinstancevariables   setinstancevariable   self getruntime   newarray
self getinstancevariables   setinstancevariable   self getruntime   newfixnum 0
d start
return self
public static irubyobject each irubyobject self  block block
// generator#each
rewind self block null_block
threadcontext ctx   self getruntime   getcurrentcontext
while next_p self  istrue
block yield ctx  next self  block null_block
return self
generator