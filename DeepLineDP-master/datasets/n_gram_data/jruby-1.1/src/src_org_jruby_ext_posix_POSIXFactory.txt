package org jruby ext posix
import java util hashmap
import org jruby ext posix util platform
import com sun jna native
public class posixfactory
static final string libc
static libc libc   null
public static posix getposix posixhandler handler  boolean usenativeposix
posix posix   null
// no 64 bit structures defined yet.
if  usenativeposix    platform is_32_bit
try
if  platform is_mac
posix   loadmacosposix handler
else if  platform is_linux
posix   loadlinuxposix handler
else if  platform is_windows
posix   loadwindowsposix handler
else if  platform is_solaris
posix   loadsolarisposix handler
// enebo: should printing be done through a handler+log method?
if  handler isverbose
if  posix    null
system err println
else
system err println
catch  throwable t
if  handler isverbose
system err println
t printstacktrace
if  posix    null
posix   getjavaposix handler
return posix
public static posix getjavaposix posixhandler handler
return new javaposix handler
public static posix loadlinuxposix posixhandler handler
return new linuxposix libc  loadlibc libc  linuxlibc class  new hashmap<object  object>     handler
public static posix loadmacosposix posixhandler handler
return new macosposix libc  loadlibc libc  libc class  new hashmap<object  object>     handler
public static posix loadsolarisposix posixhandler handler
return new solarisposix libc  loadlibc libc  libc class  new hashmap<object  object>     handler
public static posix loadwindowsposix posixhandler handler
string name
hashmap<object  object> options   new hashmap<object  object>
options put com sun jna library option_function_mapper  new windowslibcfunctionmapper
return new windowsposix name  loadlibc name  libc class  options   handler
public static libc loadlibc string libraryname  class<?> libcclass  hashmap<object  object> options
if  libc    null  return libc
libc    libc  native loadlibrary libraryname  libcclass  options
return libc