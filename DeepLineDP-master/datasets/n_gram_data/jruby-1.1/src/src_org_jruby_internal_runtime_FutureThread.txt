/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2007 charles o nutter <headius@headius.com>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby internal runtime
import java util concurrent cancellationexception
import org jruby rubythread
import java util concurrent executionexception
import java util concurrent executorservice
import java util concurrent executors
import java util concurrent future
import java util concurrent threadfactory
import java util concurrent timeunit
import java util concurrent timeoutexception
/**
* @author cnutter
*/
public class futurethread implements threadlike
private future future
private rubyrunnable runnable
public rubythread rubythread
public futurethread rubythread rubythread  rubyrunnable runnable
this rubythread   rubythread
this runnable   runnable
/**
* starting a new thread in terms of a thread pool is just submitting it as
* a job to the pool.
*/
public void start
future   rubythread getruntime   getexecutor   submit runnable
/**
* in order to do a thread interrupt, we need to get the actual thread, stored
* in the rubyrunnable instance and tell it to interrupt. future does not
* provide a mechanism for passing an interrupt to the thread running it.
*
* if the runnable is not being executed by a thread (not yet, or already
* done) do nothing.
*/
public void interrupt
if  runnable getjavathread      null
runnable getjavathread   interrupt
/**
* if the future has not yet run and or is running and not yet complete.
*
* @return
*/
public boolean isalive
return future    null     future isdone
public void join   throws interruptedexception  executionexception
try
future get
catch  cancellationexception ce
// ignore; job was cancelled
// fixme: is this ok?
/**
* we check for zero millis here because future appears to wait for zero if
* you pass it zero, where thread behavior is to wait forever.
*
* we also catch and swallow cancellationexception because it means the future
* was cancelled before it ran, and is therefore as done as it will ever be.
*
* @param millis the number of millis to wait; 0 waits forever.
*
* @throws java.lang.interruptedexception if the blocking join is interrupted
* by another thread.
* @throws java.util.concurrent.executionexception if an execution error is
* raised by the underlying future.
*/
public void join long millis  throws interruptedexception  executionexception
if  millis    0
join
else
try
future get millis  timeunit milliseconds
catch  cancellationexception ce
// ignore; job was cancelled
// fixme: is this ok?
catch  timeoutexception te
// do nothing, just exit
/**
* jobs from the thread pool do not support setting priorities.
*
* @return
*/
public int getpriority
return 1
public void setpriority int priority
//nativethread.setpriority(priority);
public boolean iscurrent
return rubythread    rubythread getruntime   getcurrentcontext   getthread
public boolean isinterrupted
return future iscancelled