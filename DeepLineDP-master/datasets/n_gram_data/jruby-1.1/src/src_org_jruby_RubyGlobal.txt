/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2002 benoit cerrina <b.cerrina@wanadoo.fr>
* copyright (c) 2002-2004 anders bengtsson <ndrsbngtssn@yahoo.se>
* copyright (c) 2002-2004 jan arne petersen <jpetersen@uni-bonn.de>
* copyright (c) 2004 charles o nutter <headius@headius.com>
* copyright (c) 2004 thomas e enebo <enebo@acm.org>
* copyright (c) 2004 stefan matthias aust <sma@3plus4.de>
* copyright (c) 2006 tim azzopardi <tim@tigerfive.com>
* copyright (c) 2006 miguel covarrubias <mlcovarrubias@gmail.com>
* copyright (c) 2006 michael studman <codehaus@michaelstudman.com>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby
import org jruby util io stdio
import java util hashmap
import java util map
import org jruby common irubywarnings id
import org jruby environment osenvironmentreaderexcepton
import org jruby environment osenvironment
import org jruby internal runtime valueaccessor
import org jruby javasupport util runtimehelpers
import org jruby runtime constants
import org jruby runtime globalvariable
import org jruby runtime methodindex
import org jruby runtime readonlyglobalvariable
import org jruby runtime threadcontext
import org jruby runtime builtin irubyobject
import org jruby util kcode
/** this class initializes global variables and constants.
*
* @author jpetersen
*/
public class rubyglobal
/**
* obligate string-keyed and string-valued hash, used for env and env_java
*
*/
public static class stringonlyrubyhash extends rubyhash
public stringonlyrubyhash ruby runtime  map valuemap  irubyobject defaultvalue
super runtime  valuemap  defaultvalue
public irubyobject op_aref threadcontext context  irubyobject key
if   key respondsto
throw getruntime   newtypeerror     key getmetaclass
return super op_aref context  runtimehelpers invoke context  key  methodindex to_str     irubyobject null_array
public irubyobject op_aset threadcontext context  irubyobject key  irubyobject value
if   key respondsto
throw getruntime   newtypeerror     key getmetaclass
if   value respondsto        value isnil
throw getruntime   newtypeerror     value getmetaclass
if  value isnil
return super delete context  key  org jruby runtime block null_block
//return super.aset(getruntime().newstring("sadfasdf"), getruntime().newstring("sadfasdf"));
return super op_aset context  runtimehelpers invoke context  key  methodindex to_str     irubyobject null_array
value isnil   ? getruntime   getnil     runtimehelpers invoke context  value  methodindex to_str     irubyobject null_array
public irubyobject to_s
return getruntime   newstring
public static void createglobals ruby runtime
runtime defineglobalconstant    runtime newbinding
runtime defineglobalconstant    runtime gettrue
runtime defineglobalconstant    runtime getfalse
runtime defineglobalconstant    runtime getnil
// define argv and $* for this runtime
rubyarray argvarray   runtime newarray
string argv   runtime getinstanceconfig   getargv
for  int i   0  i < argv length  i
argvarray add runtime newstring argv
runtime defineglobalconstant    argvarray
runtime getglobalvariables   definereadonly    new valueaccessor argvarray
// version information:
irubyobject version   runtime newstring constants ruby_version  freeze
irubyobject release   runtime newstring constants compile_date  freeze
irubyobject platform   runtime newstring constants platform  freeze
runtime defineglobalconstant    version
runtime defineglobalconstant    runtime newstring constants ruby_patchlevel  freeze
runtime defineglobalconstant    release
runtime defineglobalconstant    platform
runtime defineglobalconstant    version
runtime defineglobalconstant    release
runtime defineglobalconstant    platform
irubyobject jrubyversion   runtime newstring constants version  freeze
runtime defineglobalconstant    jrubyversion
globalvariable kcodegv   new kcodeglobalvariable runtime     runtime newstring
runtime definevariable kcodegv
runtime definevariable new globalvariable copy runtime     kcodegv
irubyobject defaultrs   runtime newstring runtime getinstanceconfig   getrecordseparator    freeze
globalvariable rs   new stringglobalvariable runtime     defaultrs
runtime definevariable rs
runtime setrecordseparatorvar rs
runtime getglobalvariables   setdefaultseparator defaultrs
runtime definevariable new stringglobalvariable runtime     runtime getnil
runtime definevariable new stringglobalvariable runtime     runtime getnil
runtime definevariable new linenumberglobalvariable runtime     rubyfixnum one runtime
runtime definevariable new lastlineglobalvariable runtime
runtime definevariable new lastexitstatusvariable runtime
runtime definevariable new errorinfoglobalvariable runtime     runtime getnil
runtime definevariable new noneffectiveglobalvariable runtime     runtime getfalse
if runtime getinstanceconfig   getinputfieldseparator      null
runtime definevariable new globalvariable runtime     runtime getnil
else
runtime definevariable new globalvariable runtime     rubyregexp newregexp runtime  runtime getinstanceconfig   getinputfieldseparator    0
boolean verbose   runtime getinstanceconfig   getverbose
irubyobject verbosevalue   null
if  verbose    null
verbosevalue   runtime getnil
else if verbose    boolean true
verbosevalue   runtime gettrue
else
verbosevalue   runtime getfalse
runtime definevariable new verboseglobalvariable runtime     verbosevalue
irubyobject debug   runtime newboolean runtime getinstanceconfig   isdebug
runtime definevariable new debugglobalvariable runtime     debug
runtime definevariable new debugglobalvariable runtime     debug
runtime definevariable new safeglobalvariable runtime
runtime definevariable new backtraceglobalvariable runtime
irubyobject stdin   new rubyio runtime  stdio in
irubyobject stdout   new rubyio runtime  stdio out
irubyobject stderr   new rubyio runtime  stdio err
runtime definevariable new inputglobalvariable runtime     stdin
runtime definevariable new outputglobalvariable runtime     stdout
runtime definevariable new outputglobalvariable runtime     stderr
runtime definevariable new outputglobalvariable runtime     stdout
runtime definevariable new outputglobalvariable runtime     stdout
runtime definevariable new outputglobalvariable runtime     stderr
runtime defineglobalconstant    stdin
runtime defineglobalconstant    stdout
runtime defineglobalconstant    stderr
runtime definevariable new loadedfeatures runtime   "
runtime definevariable new loadedfeatures runtime
runtime definevariable new loadpath runtime
runtime definevariable new loadpath runtime
runtime definevariable new loadpath runtime
runtime definevariable new matchmatchglobalvariable runtime
runtime definevariable new prematchglobalvariable runtime
runtime definevariable new postmatchglobalvariable runtime
runtime definevariable new lastmatchglobalvariable runtime
runtime definevariable new backrefglobalvariable runtime
// on platforms without a c-library accessable through jna, getpid will return hashcode
// as $$ used to. using $$ to kill processes could take down many runtimes, but by basing
// $$ on getpid() where available, we have the same semantics as mri.
runtime getglobalvariables   definereadonly    new valueaccessor runtime newfixnum runtime getposix   getpid
// after defn of $stderr as the call may produce warnings
defineglobalenvconstants runtime
// fixme: do we need the check or does main.java not call this...they should consolidate
if  runtime getglobalvariables   get    isnil
runtime getglobalvariables   definereadonly    new valueaccessor runtime newarray
runtime getglobalvariables   definereadonly
new valueaccessor runtime getinstanceconfig   isassumeprinting   ? runtime gettrue     runtime getnil
runtime getglobalvariables   definereadonly
new valueaccessor runtime getinstanceconfig   isassumeloop   ? runtime gettrue     runtime getnil
runtime getglobalvariables   definereadonly
new valueaccessor runtime getinstanceconfig   issplit   ? runtime gettrue     runtime getnil
runtime getglobalvariables   definereadonly
new valueaccessor runtime getinstanceconfig   isprocesslineends   ? runtime gettrue     runtime getnil
// argf, $< object
rubyargsfile initargsfile runtime
private static void defineglobalenvconstants ruby runtime
map environmentvariablemap   null
osenvironment environment   new osenvironment
try
environmentvariablemap   environment getenvironmentvariablemap runtime
catch  osenvironmentreaderexcepton e
// if the environment variables are not accessible shouldn't terminate
runtime getwarnings   warn id miscellaneous  e getmessage
if  environmentvariablemap    null
// if the environment variables can't be obtained, define an empty env
environmentvariablemap   new hashmap
stringonlyrubyhash h1   new stringonlyrubyhash runtime
environmentvariablemap  runtime getnil
org jruby runtime callbackfactory cf   org jruby runtime callbackfactory createfactory runtime  stringonlyrubyhash class
h1 getsingletonclass   definefastmethod    cf getfastmethod
runtime defineglobalconstant    h1
// define system.getproperties() in env_java
map systemprops   environment getsystempropertiesmap runtime
runtime defineglobalconstant    new stringonlyrubyhash
runtime  systemprops  runtime getnil
private static class noneffectiveglobalvariable extends globalvariable
public noneffectiveglobalvariable ruby runtime  string name  irubyobject value
super runtime  name  value
public irubyobject set irubyobject value
runtime getwarnings   warn id ineffective_global      name      name
return value
public irubyobject get
runtime getwarnings   warn id ineffective_global      name      name
return runtime getfalse
private static class lastexitstatusvariable extends globalvariable
public lastexitstatusvariable ruby runtime  string name
super runtime  name  runtime getnil
public irubyobject get
irubyobject lastexitstatus   runtime getcurrentcontext   getlastexitstatus
return lastexitstatus    null ? runtime getnil     lastexitstatus
public irubyobject set irubyobject lastexitstatus
runtime getcurrentcontext   setlastexitstatus lastexitstatus
return lastexitstatus
private static class matchmatchglobalvariable extends globalvariable
public matchmatchglobalvariable ruby runtime  string name
super runtime  name  runtime getnil
public irubyobject get
return rubyregexp last_match runtime getcurrentcontext   getcurrentframe   getbackref
private static class prematchglobalvariable extends globalvariable
public prematchglobalvariable ruby runtime  string name
super runtime  name  runtime getnil
public irubyobject get
return rubyregexp match_pre runtime getcurrentcontext   getcurrentframe   getbackref
private static class postmatchglobalvariable extends globalvariable
public postmatchglobalvariable ruby runtime  string name
super runtime  name  runtime getnil
public irubyobject get
return rubyregexp match_post runtime getcurrentcontext   getcurrentframe   getbackref
private static class lastmatchglobalvariable extends globalvariable
public lastmatchglobalvariable ruby runtime  string name
super runtime  name  runtime getnil
public irubyobject get
return rubyregexp match_last runtime getcurrentcontext   getcurrentframe   getbackref
private static class backrefglobalvariable extends globalvariable
public backrefglobalvariable ruby runtime  string name
super runtime  name  runtime getnil
public irubyobject get
return runtimehelpers getbackref runtime  runtime getcurrentcontext
public irubyobject set irubyobject value
runtimehelpers setbackref runtime  runtime getcurrentcontext    value
return value
// accessor methods.
private static class linenumberglobalvariable extends globalvariable
public linenumberglobalvariable ruby runtime  string name  rubyfixnum value
super runtime  name  value
public irubyobject set irubyobject value
rubyargsfile setcurrentlinenumber runtime getglobalvariables   get    rubynumeric fix2int value
return super set value
private static class errorinfoglobalvariable extends globalvariable
public errorinfoglobalvariable ruby runtime  string name  irubyobject value
super runtime  name  null
set value
public irubyobject set irubyobject value
if   value isnil        runtime getexception   isinstance value
throw runtime newtypeerror
return runtime getcurrentcontext   seterrorinfo value
public irubyobject get
return runtime getcurrentcontext   geterrorinfo
// fixme: move out of this class!
public static class stringglobalvariable extends globalvariable
public stringglobalvariable ruby runtime  string name  irubyobject value
super runtime  name  value
public irubyobject set irubyobject value
if   value isnil         value instanceof rubystring
throw runtime newtypeerror     name
return super set value
public static class kcodeglobalvariable extends globalvariable
public kcodeglobalvariable ruby runtime  string name  irubyobject value
super runtime  name  value
public irubyobject get
return runtime getkcode   kcode runtime
public irubyobject set irubyobject value
runtime setkcode kcode create runtime  value converttostring   tostring
return value
private static class safeglobalvariable extends globalvariable
public safeglobalvariable ruby runtime  string name
super runtime  name  null
public irubyobject get
return runtime newfixnum runtime getsafelevel
public irubyobject set irubyobject value
//            int level = rubynumeric.fix2int(value);
//            if (level < runtime.getsafelevel()) {
//            	throw runtime.newsecurityerror("tried to downgrade safe level from " +
//            			runtime.getsafelevel() + " to " + level);
//            }
//            runtime.setsafelevel(level);
// thread.setsafelevel(level);
runtime getwarnings   warn id safe_not_supported
return rubyfixnum newfixnum runtime  runtime getsafelevel
private static class verboseglobalvariable extends globalvariable
public verboseglobalvariable ruby runtime  string name  irubyobject initialvalue
super runtime  name  initialvalue
set initialvalue
public irubyobject get
return runtime getverbose
public irubyobject set irubyobject newvalue
if  newvalue isnil
runtime setverbose newvalue
else
runtime setverbose runtime newboolean newvalue istrue
return newvalue
private static class debugglobalvariable extends globalvariable
public debugglobalvariable ruby runtime  string name  irubyobject initialvalue
super runtime  name  initialvalue
set initialvalue
public irubyobject get
return runtime getdebug
public irubyobject set irubyobject newvalue
if  newvalue isnil
runtime setdebug newvalue
else
runtime setdebug runtime newboolean newvalue istrue
return newvalue
private static class backtraceglobalvariable extends globalvariable
public backtraceglobalvariable ruby runtime  string name
super runtime  name  null
public irubyobject get
irubyobject errorinfo   runtime getglobalvariables   get
irubyobject backtrace   errorinfo isnil   ? runtime getnil     errorinfo callmethod errorinfo getruntime   getcurrentcontext
//$@ returns nil if $!.backtrace is not an array
if    backtrace instanceof rubyarray
backtrace   runtime getnil
return backtrace
public irubyobject set irubyobject value
if  runtime getglobalvariables   get    isnil
throw runtime newargumenterror
runtime getglobalvariables   get    callmethod value getruntime   getcurrentcontext       value
return value
private static class lastlineglobalvariable extends globalvariable
public lastlineglobalvariable ruby runtime  string name
super runtime  name  null
public irubyobject get
return runtimehelpers getlastline runtime  runtime getcurrentcontext
public irubyobject set irubyobject value
runtimehelpers setlastline runtime  runtime getcurrentcontext    value
return value
private static class inputglobalvariable extends globalvariable
public inputglobalvariable ruby runtime  string name  irubyobject value
super runtime  name  value
public irubyobject set irubyobject value
if  value    get
return value
return super set value
private static class outputglobalvariable extends globalvariable
public outputglobalvariable ruby runtime  string name  irubyobject value
super runtime  name  value
public irubyobject set irubyobject value
if  value    get
return value
if  value instanceof rubyio
rubyio io    rubyio value
// hack: in order to have stdout/err act like ttys and flush always,
// we set anything assigned to stdout/stderr to sync
io gethandler   setsync true
if    value respondsto
throw runtime newtypeerror name
value gettype   getname
if    equals name
runtime definevariable new outputglobalvariable runtime     value
if    equals name
runtime definevariable new outputglobalvariable runtime     value
runtime definevariable new outputglobalvariable runtime     value
return super set value
private static class loadpath extends readonlyglobalvariable
public loadpath ruby runtime  string name
super runtime  name  null
/**
* @see org.jruby.runtime.globalvariable#get()
*/
public irubyobject get
return runtime getloadservice   getloadpath
private static class loadedfeatures extends readonlyglobalvariable
public loadedfeatures ruby runtime  string name
super runtime  name  null
/**
* @see org.jruby.runtime.globalvariable#get()
*/
public irubyobject get
return runtime getloadservice   getloadedfeatures