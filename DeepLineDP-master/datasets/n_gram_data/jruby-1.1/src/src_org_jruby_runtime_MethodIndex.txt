/*
***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2006-2007 thomas e enebo <enebo@acm.org>
* copyright (c) 2006-2007 charles nutter <headius@headius.com>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby runtime
import java util arraylist
import java util hashmap
import java util list
import java util map
import org jruby rubyinstanceconfig
/**
*
* @author headius
*/
public class methodindex
public static final list<string> names   new arraylist<string>
private static final map<string  integer> numbers   new hashmap<string  integer>
private static final map<integer  callsite> call_sites   new hashmap<integer  callsite>
private static final map<integer  callsite> functional_call_sites   new hashmap<integer  callsite>
private static final map<integer  callsite> variable_call_sites   new hashmap<integer  callsite>
// ensure zero is devoted to no method name
public static final int no_index   getindex
// predefine a few other methods we invoke directly elsewhere
public static final int op_plus   getindex
public static final int op_minus   getindex
public static final int op_lt   getindex
public static final int aref   getindex
public static final int aset   getindex
public static final int equalequal   getindex
public static final int op_lshift   getindex
public static final int empty_p   getindex
public static final int to_s   getindex
public static final int to_i   getindex
public static final int to_str   getindex
public static final int to_ary   getindex
public static final int to_int   getindex
public static final int to_f   getindex
public static final int to_a   getindex
public static final int to_io   getindex
public static final int hash   getindex
public static final int op_gt   getindex
public static final int op_times   getindex
public static final int op_le   getindex
public static final int op_spaceship   getindex
public static final int op_eqq   getindex
public static final int eql_p   getindex
public static final int to_hash   getindex
public static final int method_missing   getindex
public static final int default   getindex
public synchronized static int getindex string methodname
integer index   numbers get methodname
if  index    null
index   new integer names size
numbers put methodname  index
names add methodname
return index
public synchronized static callsite getcallsite string name
if   rubyinstanceconfig fastops_compile_enabled
return new callsite inlinecachingcallsite name  calltype normal
else
if  name equals
return new callsite pluscallsite
else if  name equals
return new callsite minuscallsite
else if  name equals
return new callsite mulcallsite
else if  name equals
return new callsite divcallsite
else if  name equals
return new callsite ltcallsite
else if  name equals
return new callsite lecallsite
else if  name equals
return new callsite gtcallsite
else if  name equals
return new callsite gecallsite
else
return new callsite inlinecachingcallsite name  calltype normal
public synchronized static callsite getfunctionalcallsite string name
return new callsite inlinecachingcallsite name  calltype functional
public synchronized static callsite getvariablecallsite string name
return new callsite inlinecachingcallsite name  calltype variable