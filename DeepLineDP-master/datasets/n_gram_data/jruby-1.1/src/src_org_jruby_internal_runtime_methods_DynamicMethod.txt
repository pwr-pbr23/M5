/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2002 jan arne petersen <jpetersen@uni-bonn.de>
* copyright (c) 2002-2004 anders bengtsson <ndrsbngtssn@yahoo.se>
* copyright (c) 2005 thomas e enebo <enebo@acm.org>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby internal runtime methods
import org jruby metaclass
import org jruby rubymodule
import org jruby runtime arity
import org jruby runtime block
import org jruby runtime calltype
import org jruby runtime threadcontext
import org jruby runtime visibility
import org jruby runtime builtin irubyobject
/**
*
* @author  jpetersen
*/
public abstract class dynamicmethod
protected rubymodule implementationclass
protected visibility visibility
protected callconfiguration callconfig
protected dynamicmethod rubymodule implementationclass  visibility visibility  callconfiguration callconfig
this visibility   visibility
this implementationclass   implementationclass
this callconfig   callconfig
/**
* call the method
* @param context is the thread-specific information that this method is being invoked on
* @param receiver
*/
public abstract irubyobject call threadcontext context  irubyobject self  rubymodule clazz
string name  irubyobject args  block block
public irubyobject call threadcontext context  irubyobject self  rubymodule clazz
string name  irubyobject args
return call context  self  clazz  name  args  block null_block
public irubyobject call threadcontext context  irubyobject self  rubymodule klazz  string name
return call context  self  klazz  name  irubyobject null_array  block null_block
public irubyobject call threadcontext context  irubyobject self  rubymodule klazz  string name  block block
return call context  self  klazz  name  irubyobject null_array  block
public irubyobject call threadcontext context  irubyobject self  rubymodule klazz  string name  irubyobject arg
return call context  self  klazz  name  new irubyobject  arg   block null_block
public irubyobject call threadcontext context  irubyobject self  rubymodule klazz  string name  irubyobject arg  block block
return call context  self  klazz  name  new irubyobject  arg   block
public irubyobject call threadcontext context  irubyobject self  rubymodule klazz  string name  irubyobject arg1  irubyobject arg2
return call context  self  klazz  name  new irubyobject  arg1 arg2   block null_block
public irubyobject call threadcontext context  irubyobject self  rubymodule klazz  string name  irubyobject arg1  irubyobject arg2  block block
return call context  self  klazz  name  new irubyobject  arg1 arg2   block
public irubyobject call threadcontext context  irubyobject self  rubymodule klazz  string name  irubyobject arg1  irubyobject arg2  irubyobject arg3
return call context  self  klazz  name  new irubyobject  arg1 arg2 arg3   block null_block
public irubyobject call threadcontext context  irubyobject self  rubymodule klazz  string name  irubyobject arg1  irubyobject arg2  irubyobject arg3  block block
return call context  self  klazz  name  new irubyobject  arg1 arg2 arg3   block
public abstract dynamicmethod dup
public boolean iscallablefrom irubyobject caller  calltype calltype
switch  visibility
case public
return true
case private
return calltype    calltype normal
case protected
// todo: determine whether we should perhaps store non-singleton class instead
rubymodule defined   getimplementationclass
// singleton classes don't get their own visibility domain
if  defined issingleton    defined   defined getsuperclass
while  defined isincluded    defined   defined getmetaclass
// for visibility we need real meta class and not anonymous one from class << self
if  defined instanceof metaclass  defined     metaclass  defined  getrealclass
return defined isinstance caller
return true
public rubymodule getimplementationclass
return implementationclass
public void setimplementationclass rubymodule implclass
implementationclass   implclass
public visibility getvisibility
return visibility
public void setvisibility visibility visibility
this visibility   visibility
public boolean isundefined
return false
public arity getarity
return arity optional
public dynamicmethod getrealmethod
return this
public callconfiguration getcallconfig
return callconfig
public void setcallconfig callconfiguration callconfig
this callconfig   callconfig
/**
* returns true if this method is backed by native (i.e. java) code
*/
public boolean isnative
return false