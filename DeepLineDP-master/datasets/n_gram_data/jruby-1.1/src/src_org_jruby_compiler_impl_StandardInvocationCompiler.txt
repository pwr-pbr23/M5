/*
***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby compiler impl
import org jruby rubymodule
import org jruby compiler argumentscallback
import org jruby compiler compilercallback
import org jruby compiler invocationcompiler
import org jruby compiler notcompilableexception
import org jruby exceptions jumpexception
import org jruby runtime block
import org jruby runtime callsite
import org jruby runtime calltype
import org jruby runtime methodindex
import org jruby runtime threadcontext
import org jruby runtime builtin irubyobject
import static org jruby util codegenutils
import org objectweb asm label
/**
*
* @author headius
*/
public class standardinvocationcompiler implements invocationcompiler
private standardasmcompiler abstractmethodcompiler methodcompiler
private skinnymethodadapter method
private static final int this   0
public standardinvocationcompiler standardasmcompiler abstractmethodcompiler methodcompiler  skinnymethodadapter method
this methodcompiler   methodcompiler
this method   method
public skinnymethodadapter getmethodadapter
return this method
public void setmethodadapter skinnymethodadapter sma
this method   sma
public void invokeattrassign string name
// start with [recv, args]
// get args[length - 1] and stuff it under the receiver
// dup args * 2
method dup
method dup
method arraylength
method iconst_1
method isub
// load from array
method arrayload
method dup_x2
method pop
invokedynamic name  true  true  calltype normal  null  true
// pop result, use args[length - 1] captured above
method pop
public void invokeattrassign string name  compilercallback receivercallback  argumentscallback argscallback
label variablecalltype   new label
label readyforcall   new label
// receiver first, so we know which call site to use
receivercallback call methodcompiler
// select appropriate call site
method dup       dup receiver
methodcompiler loadself       load self
method if_acmpeq variablecalltype      compare
methodcompiler getscriptcompiler   getcachecompiler   cachecallsite method  name  calltype normal
method go_to readyforcall
method label variablecalltype
methodcompiler getscriptcompiler   getcachecompiler   cachecallsite method  name  calltype variable
method label readyforcall
// call site under receiver
method swap
// load thread context under receiver
methodcompiler loadthreadcontext
method swap
string signature   null
switch  argscallback getarity
case 1
signature   sig irubyobject class  params threadcontext class  irubyobject class  irubyobject class
break
case 2
signature   sig irubyobject class  params threadcontext class  irubyobject class  irubyobject class  irubyobject class
break
case 3
signature   sig irubyobject class  params threadcontext class  irubyobject class  irubyobject class  irubyobject class  irubyobject class
break
default
signature   sig irubyobject class  params threadcontext class  irubyobject class  irubyobject class
argscallback call methodcompiler
// store in temp variable
int templocal   methodcompiler variablecompiler grabtemplocal
switch  argscallback getarity
case 1
case 2
case 3
// specific-arity args, just save off top of stack
method dup
break
default
// variable-arity args, peel off and save the last argument in the array
method dup
method dup
method arraylength
method iconst_1
method isub
// load from array
method arrayload
methodcompiler variablecompiler settemplocal templocal
// invoke call site
method invokevirtual p callsite class      signature
// pop the return value and restore the dup'ed arg on the stack
method pop
methodcompiler variablecompiler gettemplocal templocal
methodcompiler variablecompiler releasetemplocal
public void opelementasgn compilercallback valuecallback  string operator
// fixme: op element asgn is not yet using calladapter. boo hoo.
// receiver and args are already on the stack
methodcompiler method dup2
// invoke the [] operator and dup the result
invokedynamic    true  true  calltype functional  null  false
methodcompiler method dup
// stack is now: .. receiver, args, result, result
label end   new label
if  operator
label falseresult   new label
methodcompiler invokeirubyobject    sig boolean class       receiver  args  result  istrue
methodcompiler method ifeq falseresult      receiver  args  result
// it's true, clear everything but the result
methodcompiler method dup_x2       result  receiver  args  result
methodcompiler method pop       result  receiver  args
methodcompiler method pop2       result
methodcompiler method go_to end
// it's false, stuff the element in
methodcompiler method label falseresult
// start: .. receiver, args, result
methodcompiler method pop       receiver  args
valuecallback call methodcompiler      receiver  args  value
// save the value rather than using the result of the []= call
methodcompiler method dup_x2       value  receiver  args  value
methodcompiler appendtoobjectarray       value  receiver  combinedargs
invokedynamic    true  true  calltype functional  null  false      value  assignmentresult
// pop result
methodcompiler method pop
methodcompiler method label end
else if  operator
// todo: this is the reverse of the above logic, and could probably be abstracted better
label falseresult   new label
methodcompiler invokeirubyobject    sig boolean class
methodcompiler method ifeq falseresult
// it's true, stuff the element in
// start: .. receiver, args, result
methodcompiler method pop       receiver  args
valuecallback call methodcompiler      receiver  args  value
methodcompiler appendtoobjectarray       receiver  combinedargs
invokedynamic    true  true  calltype functional  null  false      assignmentresult
methodcompiler method go_to end
// it's false, clear everything but the result
methodcompiler method label falseresult
methodcompiler method dup_x2
methodcompiler method pop
methodcompiler method pop2
methodcompiler method label end
else
// remove extra result, operate on it, and reassign with original args
methodcompiler method pop
// start: .. receiver, args, result
valuecallback call methodcompiler      receiver  args  result  value
methodcompiler createobjectarray 1
invokedynamic operator  true  true  calltype functional  null  false      receiver  args  newresult
methodcompiler appendtoobjectarray       receiver  newargs
invokedynamic    true  true  calltype functional  null  false      assignmentresult
public void opelementasgnwithor compilercallback receiver  argumentscallback args  compilercallback valuecallback
// get call site and thread context
methodcompiler getscriptcompiler   getcachecompiler   cachecallsite method     calltype functional
methodcompiler loadthreadcontext
// evaluate and save receiver and args
receiver call methodcompiler
args call methodcompiler
method dup2
int argslocal   methodcompiler getvariablecompiler   grabtemplocal
methodcompiler getvariablecompiler   settemplocal argslocal
int receiverlocal   methodcompiler getvariablecompiler   grabtemplocal
methodcompiler getvariablecompiler   settemplocal receiverlocal
// invoke
switch  args getarity
case 1
method invokevirtual p callsite class      sig irubyobject class  threadcontext class  irubyobject class  irubyobject class
break
default
method invokevirtual p callsite class      sig irubyobject class  threadcontext class  irubyobject class  irubyobject class
// check if it's true, ending if so
method dup
methodcompiler invokeirubyobject    sig boolean class
label done   new label
method ifne done
// not true, eval value and assign
method pop
// thread context, receiver and original args
methodcompiler loadthreadcontext
methodcompiler getvariablecompiler   gettemplocal receiverlocal
methodcompiler getvariablecompiler   gettemplocal argslocal
// eval value and save it
valuecallback call methodcompiler
// call site
methodcompiler getscriptcompiler   getcachecompiler   cachecallsite method     calltype functional
// depending on size of original args, call appropriate utility method
switch  args getarity
case 0
throw new notcompilableexception
case 1
methodcompiler invokeutilitymethod
sig irubyobject class  threadcontext class  irubyobject class  irubyobject class  irubyobject class  callsite class
break
case 2
methodcompiler invokeutilitymethod
sig irubyobject class  threadcontext class  irubyobject class  irubyobject class  irubyobject class  callsite class
break
case 3
methodcompiler invokeutilitymethod
sig irubyobject class  threadcontext class  irubyobject class  irubyobject class  irubyobject class  callsite class
break
default
methodcompiler invokeutilitymethod
sig irubyobject class  threadcontext class  irubyobject class  irubyobject class  irubyobject class  callsite class
break
method label done
methodcompiler getvariablecompiler   releasetemplocal
methodcompiler getvariablecompiler   releasetemplocal
public void opelementasgnwithand compilercallback receiver  argumentscallback args  compilercallback valuecallback
// get call site and thread context
methodcompiler getscriptcompiler   getcachecompiler   cachecallsite method     calltype functional
methodcompiler loadthreadcontext
// evaluate and save receiver and args
receiver call methodcompiler
args call methodcompiler
method dup2
int argslocal   methodcompiler getvariablecompiler   grabtemplocal
methodcompiler getvariablecompiler   settemplocal argslocal
int receiverlocal   methodcompiler getvariablecompiler   grabtemplocal
methodcompiler getvariablecompiler   settemplocal receiverlocal
// invoke
switch  args getarity
case 1
method invokevirtual p callsite class      sig irubyobject class  threadcontext class  irubyobject class  irubyobject class
break
default
method invokevirtual p callsite class      sig irubyobject class  threadcontext class  irubyobject class  irubyobject class
// check if it's true, ending if not
method dup
methodcompiler invokeirubyobject    sig boolean class
label done   new label
method ifeq done
// not true, eval value and assign
method pop
// thread context, receiver and original args
methodcompiler loadthreadcontext
methodcompiler getvariablecompiler   gettemplocal receiverlocal
methodcompiler getvariablecompiler   gettemplocal argslocal
// eval value and save it
valuecallback call methodcompiler
// call site
methodcompiler getscriptcompiler   getcachecompiler   cachecallsite method     calltype functional
// depending on size of original args, call appropriate utility method
switch  args getarity
case 0
throw new notcompilableexception
case 1
methodcompiler invokeutilitymethod
sig irubyobject class  threadcontext class  irubyobject class  irubyobject class  irubyobject class  callsite class
break
case 2
methodcompiler invokeutilitymethod
sig irubyobject class  threadcontext class  irubyobject class  irubyobject class  irubyobject class  callsite class
break
case 3
methodcompiler invokeutilitymethod
sig irubyobject class  threadcontext class  irubyobject class  irubyobject class  irubyobject class  callsite class
break
default
methodcompiler invokeutilitymethod
sig irubyobject class  threadcontext class  irubyobject class  irubyobject class  irubyobject class  callsite class
break
method label done
methodcompiler getvariablecompiler   releasetemplocal
methodcompiler getvariablecompiler   releasetemplocal
public void opelementasgnwithmethod compilercallback receiver  argumentscallback args  compilercallback valuecallback  string operator
methodcompiler loadthreadcontext
receiver call methodcompiler
args call methodcompiler
valuecallback call methodcompiler      receiver  args  result  value
methodcompiler getscriptcompiler   getcachecompiler   cachecallsite method     calltype functional
methodcompiler getscriptcompiler   getcachecompiler   cachecallsite method  operator  calltype normal
methodcompiler getscriptcompiler   getcachecompiler   cachecallsite method     calltype functional
switch  args getarity
case 0
methodcompiler invokeutilitymethod
sig irubyobject class  threadcontext class  irubyobject class  irubyobject class  callsite class  callsite class  callsite class
break
case 1
methodcompiler invokeutilitymethod
sig irubyobject class  threadcontext class  irubyobject class  irubyobject class  irubyobject class  callsite class  callsite class  callsite class
break
case 2
methodcompiler invokeutilitymethod
sig irubyobject class  threadcontext class  irubyobject class  irubyobject class  irubyobject class  irubyobject class  callsite class  callsite class  callsite class
break
case 3
methodcompiler invokeutilitymethod
sig irubyobject class  threadcontext class  irubyobject class  irubyobject class  irubyobject class  irubyobject class  irubyobject class  callsite class  callsite class  callsite class
break
default
methodcompiler invokeutilitymethod
sig irubyobject class  threadcontext class  irubyobject class  irubyobject class  irubyobject class  callsite class  callsite class  callsite class
break
public void invokesuper compilercallback argscallback  compilercallback closurearg
methodcompiler loadthreadcontext
methodcompiler invokeutilitymethod    sig void class  threadcontext class
methodcompiler loadself
methodcompiler loadthreadcontext
// args
if  argscallback    null
method getstatic p irubyobject class      ci irubyobject class
// block
if  closurearg    null
// no args, no block
methodcompiler loadblock
else
// no args, with block
closurearg call methodcompiler
else
argscallback call methodcompiler
// block
if  closurearg    null
// with args, no block
methodcompiler loadblock
else
// with args, with block
closurearg call methodcompiler
method invokeinterface p irubyobject class      sig irubyobject class  threadcontext class  irubyobject class  block class
public void invokedynamic string name  compilercallback receivercallback  argumentscallback argscallback  calltype calltype  compilercallback closurearg
methodcompiler getscriptcompiler   getcachecompiler   cachecallsite method  name  calltype
methodcompiler loadthreadcontext
if  receivercallback    null
receivercallback call methodcompiler
else
methodcompiler loadself
string signature
// args
if  argscallback    null
// block
if  closurearg    null
// no args, no block
signature   sig irubyobject class  params threadcontext class  irubyobject class
else
// no args, with block
closurearg call methodcompiler
signature   sig irubyobject class  params threadcontext class  irubyobject class  block class
else
argscallback call methodcompiler
// block
if  closurearg    null
// with args, no block
switch  argscallback getarity
case 1
signature   sig irubyobject class  params threadcontext class  irubyobject class  irubyobject class
break
case 2
signature   sig irubyobject class  params threadcontext class  irubyobject class  irubyobject class  irubyobject class
break
case 3
signature   sig irubyobject class  params threadcontext class  irubyobject class  irubyobject class  irubyobject class  irubyobject class
break
default
signature   sig irubyobject class  params threadcontext class  irubyobject class  irubyobject class
else
// with args, with block
closurearg call methodcompiler
switch  argscallback getarity
case 1
signature   sig irubyobject class  params threadcontext class  irubyobject class  irubyobject class  block class
break
case 2
signature   sig irubyobject class  params threadcontext class  irubyobject class  irubyobject class  irubyobject class  block class
break
case 3
signature   sig irubyobject class  params threadcontext class  irubyobject class  irubyobject class  irubyobject class  irubyobject class  block class
break
default
signature   sig irubyobject class  params threadcontext class  irubyobject class  irubyobject class  block class
// adapter, tc, recv, args{0,1}, block{0,1}]
method invokevirtual p callsite class      signature
public void invokeopasgnwithor string attrname  string attrasgnname  compilercallback receivercallback  argumentscallback argscallback
receivercallback call methodcompiler
method dup
methodcompiler loadthreadcontext
methodcompiler getscriptcompiler   getcachecompiler   cachecallsite method  attrname  calltype functional
methodcompiler invokeutilitymethod    sig irubyobject class  irubyobject class  threadcontext class  callsite class
label done   new label
label istrue   new label
method dup
methodcompiler invokeirubyobject    sig boolean class
method ifne istrue
method pop       pop extra attr value
argscallback call methodcompiler
methodcompiler loadthreadcontext
methodcompiler getscriptcompiler   getcachecompiler   cachecallsite method  attrasgnname  calltype normal
methodcompiler invokeutilitymethod
sig irubyobject class  irubyobject class  irubyobject class  threadcontext class  callsite class
method go_to done
method label istrue
method swap
method pop
method label done
public void invokeopasgnwithand string attrname  string attrasgnname  compilercallback receivercallback  argumentscallback argscallback
receivercallback call methodcompiler
method dup
methodcompiler loadthreadcontext
methodcompiler getscriptcompiler   getcachecompiler   cachecallsite method  attrname  calltype functional
methodcompiler invokeutilitymethod    sig irubyobject class  irubyobject class  threadcontext class  callsite class
label done   new label
label isfalse   new label
method dup
methodcompiler invokeirubyobject    sig boolean class
method ifeq isfalse
method pop       pop extra attr value
argscallback call methodcompiler
methodcompiler loadthreadcontext
methodcompiler getscriptcompiler   getcachecompiler   cachecallsite method  attrasgnname  calltype normal
methodcompiler invokeutilitymethod
sig irubyobject class  irubyobject class  irubyobject class  threadcontext class  callsite class
method go_to done
method label isfalse
method swap
method pop
method label done
public void invokeopasgnwithmethod string operatorname  string attrname  string attrasgnname  compilercallback receivercallback  argumentscallback argscallback
methodcompiler loadthreadcontext
receivercallback call methodcompiler
argscallback call methodcompiler
methodcompiler getscriptcompiler   getcachecompiler   cachecallsite method  attrname  calltype functional
methodcompiler getscriptcompiler   getcachecompiler   cachecallsite method  operatorname  calltype functional
methodcompiler getscriptcompiler   getcachecompiler   cachecallsite method  attrasgnname  calltype normal
methodcompiler invokeutilitymethod
sig irubyobject class  threadcontext class  irubyobject class  irubyobject class  callsite class  callsite class  callsite class
public void invokeopelementasgnwithmethod string operatorname  compilercallback receivercallback  argumentscallback argscallback
methodcompiler loadthreadcontext
receivercallback call methodcompiler
argscallback call methodcompiler
methodcompiler getscriptcompiler   getcachecompiler   cachecallsite method     calltype functional
methodcompiler getscriptcompiler   getcachecompiler   cachecallsite method  operatorname  calltype functional
methodcompiler getscriptcompiler   getcachecompiler   cachecallsite method     calltype normal
methodcompiler invokeutilitymethod
sig irubyobject class  threadcontext class  irubyobject class  irubyobject class  callsite class  callsite class  callsite class
private void invokedynamic string name  boolean hasreceiver  boolean hasargs  calltype calltype  compilercallback closurearg  boolean attrassign
string callsig   sig irubyobject class  params irubyobject class  irubyobject class  threadcontext class  string class  irubyobject class  calltype class  block class
string callsigindexed   sig irubyobject class  params irubyobject class  irubyobject class  threadcontext class  byte type  string class  irubyobject class  calltype class  block class
int index   methodindex getindex name
if  hasargs
if  hasreceiver
// call with args
// receiver already present
else
// fcall
// no receiver present, use self
methodcompiler loadself
// put self under args
method swap
else
if  hasreceiver
// receiver already present
// empty args list
method getstatic p irubyobject class      ci irubyobject class
else
// vcall
// no receiver present, use self
methodcompiler loadself
// empty args list
method getstatic p irubyobject class      ci irubyobject class
methodcompiler loadthreadcontext
if  index    0
// load method index
method ldc new integer index
method ldc name
// load self for visibility checks
methodcompiler loadself
method getstatic p calltype class   calltype tostring    ci calltype class
if  closurearg    null
method getstatic p block class      ci block class
else
closurearg call methodcompiler
label trybegin   new label
label tryend   new label
label trycatch   new label
if  closurearg    null
// wrap with try/catch for block flow-control exceptions
// fixme: for flow-control from containing blocks, but it's not working right;
// stack is not as expected for invoke calls below...
//method.trycatch(trybegin, tryend, trycatch, p(jumpexception.class));
method label trybegin
if  attrassign
if  index    0
methodcompiler invokeutilitymethod    callsigindexed
else
methodcompiler invokeutilitymethod    callsig
else
if  index    0
methodcompiler invokeutilitymethod    callsigindexed
else
methodcompiler invokeutilitymethod    callsig
if  closurearg    null
method label tryend
// no physical break, terminate loop and skip catch block
label normalend   new label
method go_to normalend
method label trycatch
methodcompiler loadblock
methodcompiler invokeutilitymethod    sig irubyobject class  params jumpexception class  block class
method label normalend
public void yield boolean hasargs  boolean unwrap
methodcompiler loadblock
if  hasargs
method swap
methodcompiler loadthreadcontext
method swap
// args now here
else
methodcompiler loadthreadcontext
// empty args
method aconst_null
method aconst_null
method aconst_null
method ldc new boolean unwrap
method invokevirtual p block class      sig irubyobject class  params threadcontext class  irubyobject class  irubyobject class  rubymodule class  boolean type
public void invokeeqq
// receiver and args already present on the stack
// load call adapter under receiver
methodcompiler getscriptcompiler   getcachecompiler   cachecallsite method     calltype normal
method dup_x2
method pop
methodcompiler loadthreadcontext
method dup_x2
method pop
string signature   sig irubyobject class  params threadcontext class  irubyobject class  irubyobject class
method invokevirtual p callsite class      signature