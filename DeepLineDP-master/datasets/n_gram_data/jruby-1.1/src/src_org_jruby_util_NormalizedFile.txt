/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2006 charles o nutter <headius@headius.com>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby util
import java io file
import java io filefilter
import java io filenamefilter
import java io ioexception
import java net uri
/**
* this class provides a file implementation that normalizes all path separators to forward slashes.
* this mimics the behavior of c ruby, where all paths are internally made unix-style, even on windows.
*/
public class normalizedfile extends file
private static final long serialversionuid   7630618150344842227l
public normalizedfile string pathname
super pathname
public normalizedfile uri uri
super uri
public normalizedfile file parent  string child
super parent  child
public normalizedfile string parent  string child
super parent  child
public string getabsolutepath
return new file super getpath    getabsolutepath   replace file separatorchar
public string getcanonicalpath   throws ioexception
return super getcanonicalpath   replace file separatorchar
public string getpath
return super getpath   replace file separatorchar
public string tostring
return super tostring   replace file separatorchar
public file getabsolutefile
return new normalizedfile getabsolutepath
public file getcanonicalfile   throws ioexception
return new normalizedfile getcanonicalpath
public string getparent
return super getparent   replace file separatorchar
public file getparentfile
return new normalizedfile getparent
public static file listroots
file roots   file listroots
normalizedfile smartroots   new normalizedfile
for  int i   0  i < roots length  i
smartroots   new normalizedfile roots getpath
return smartroots
public static file createtempfile string prefix  string suffix  file directory  throws ioexception
file file   file createtempfile prefix  suffix  directory
return new normalizedfile file getpath
public static file createtempfile string prefix  string suffix  throws ioexception
file file   file createtempfile prefix  suffix
return new normalizedfile file getpath
public string list
return super list
public string list filenamefilter filter
string files   super list filter
if  files    null
return null
else
string smartfiles   new string
for  int i   0  i < files length  i
smartfiles   files replace file separatorchar
return smartfiles
public file listfiles
file files   super listfiles
if  files    null
return null
else
normalizedfile smartfiles   new normalizedfile
for  int i   0  i < files length  i
smartfiles   new normalizedfile files getpath
return smartfiles
public file listfiles filefilter filter
file files   super listfiles filter
if  files    null
return null
else
normalizedfile smartfiles   new normalizedfile
for  int i   0  i < files length  i
smartfiles   new normalizedfile files getpath
return smartfiles
public file listfiles filenamefilter filter
file files   super listfiles filter
if  files    null
return null
else
normalizedfile smartfiles   new normalizedfile
for  int i   0  i < files length  i
smartfiles   new normalizedfile files getpath
return smartfiles
public static string getfileproperty string property
string value   system getproperty property
return value replace file separatorchar