/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2001 alan moore <alan_moore@gmx.net>
* copyright (c) 2001-2004 jan arne petersen <jpetersen@uni-bonn.de>
* copyright (c) 2002 benoit cerrina <b.cerrina@wanadoo.fr>
* copyright (c) 2002-2004 anders bengtsson <ndrsbngtssn@yahoo.se>
* copyright (c) 2002-2006 thomas e enebo <enebo@acm.org>
* copyright (c) 2004 joey gibson <joey@joeygibson.com>
* copyright (c) 2004-2005 charles o nutter <headius@headius.com>
* copyright (c) 2004 stefan matthias aust <sma@3plus4.de>
* copyright (c) 2005 david corbin <dcorbin@users.sf.net>
* copyright (c) 2006 michael studman <codehaus@michaelstudman.com>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby
import java io ioexception
import java io printstream
import java util list
import org jruby anno jrubymethod
import org jruby runtime block
import org jruby runtime callbackfactory
import org jruby runtime frame
import org jruby runtime methodindex
import org jruby runtime objectallocator
import org jruby runtime objectmarshal
import org jruby runtime threadcontext
import org jruby runtime visibility
import org jruby runtime builtin irubyobject
import org jruby runtime builtin variable
import org jruby runtime component variableentry
import org jruby runtime marshal marshalstream
import org jruby runtime marshal unmarshalstream
/**
*
* @author  jpetersen
*/
public class rubyexception extends rubyobject
private frame backtraceframes
private irubyobject backtrace
public irubyobject message
public static final int trace_head   8
public static final int trace_tail   4
public static final int trace_max   trace_head   trace_tail   6
protected rubyexception ruby runtime  rubyclass rubyclass
this runtime  rubyclass  null
public rubyexception ruby runtime  rubyclass rubyclass  string message
super runtime  rubyclass
this message   message    null ? runtime getnil     runtime newstring message
private static objectallocator exception_allocator   new objectallocator
public irubyobject allocate ruby runtime  rubyclass klass
rubyexception instance   new rubyexception runtime  klass
// for future compatibility as constructors move toward not accepting metaclass?
instance setmetaclass klass
return instance
private static final objectmarshal exception_marshal   new objectmarshal
public void marshalto ruby runtime  object obj  rubyclass type
marshalstream marshalstream  throws ioexception
rubyexception exc    rubyexception obj
marshalstream registerlinktarget exc
list<variable<irubyobject>> attrs   exc getvariablelist
attrs add new variableentry<irubyobject>
exc message    null ? runtime getnil     exc message
attrs add new variableentry<irubyobject>    exc getbacktrace
marshalstream dumpvariables attrs
public object unmarshalfrom ruby runtime  rubyclass type
unmarshalstream unmarshalstream  throws ioexception
rubyexception exc    rubyexception type allocate
unmarshalstream registerlinktarget exc
unmarshalstream defaultvariablesunmarshal exc
exc message   exc removeinternalvariable
exc set_backtrace exc removeinternalvariable
return exc
public static rubyclass createexceptionclass ruby runtime
rubyclass exceptionclass   runtime defineclass    runtime getobject    exception_allocator
runtime setexception exceptionclass
exceptionclass setmarshal exception_marshal
exceptionclass defineannotatedmethods rubyexception class
return exceptionclass
public static rubyexception newexception ruby runtime  rubyclass excptnclass  string msg
return new rubyexception runtime  excptnclass  msg
public void setbacktraceframes frame backtraceframes
this backtraceframes   backtraceframes
public irubyobject getbacktrace
if  backtrace    null
backtrace   backtraceframes    null ? getruntime   getnil     threadcontext createbacktracefromframes getruntime    backtraceframes
return backtrace
@jrubymethod optional   2  frame   true  visibility   visibility private
public irubyobject initialize irubyobject args  block block
if  args length    1  message   args
return this
@jrubymethod
public irubyobject backtrace
return getbacktrace
@jrubymethod required   1
public irubyobject set_backtrace irubyobject obj
if  obj isnil
backtrace   null
else if   isarrayofstrings obj
throw getruntime   newtypeerror
else
backtrace    rubyarray  obj
return backtrace
@jrubymethod name      optional   1  rest   true  meta   true
public static irubyobject exception threadcontext context  irubyobject recv  irubyobject args  block block
return   rubyclass  recv  newinstance context  args  block
@jrubymethod optional   1
public rubyexception exception irubyobject args
switch  args length
case 0
return this
case 1
if args    this
return this
rubyexception ret    rubyexception rbclone
ret initialize args  block null_block      this looks wrong  but it's the way mri does it
return ret
default
throw getruntime   newargumenterror
@jrubymethod
public irubyobject to_s
if  message isnil    return getruntime   newstring getmetaclass   getname
message settaint istaint
return message
@jrubymethod name
public irubyobject to_str threadcontext context
return callmethod context  methodindex to_s
/** inspects an object and return a kind of debug information
*
*@return a rubystring containing the debug information.
*/
@jrubymethod
public irubyobject inspect threadcontext context
rubymodule rubyclass   getmetaclass
rubystring exception   rubystring objasstring context  this
if  exception getbytelist   realsize    0  return getruntime   newstring rubyclass getname
stringbuffer sb   new stringbuffer
sb append rubyclass getname    append    append exception getbytelist    append
return getruntime   newstring sb tostring
public void printbacktrace printstream errorstream
irubyobject backtrace   callmethod getruntime   getcurrentcontext
if   backtrace isnil      backtrace instanceof rubyarray
irubyobject elements     rubyarray backtrace converttoarray    tojavaarray
for  int i   1  i < elements length  i
irubyobject stacktraceline   elements
if  stacktraceline instanceof rubystring
printstacktraceline errorstream  stacktraceline
if  i    rubyexception trace_head    elements length > rubyexception trace_max
int hiddenlevels   elements length   rubyexception trace_head   rubyexception trace_tail
errorstream print     hiddenlevels
i   elements length   rubyexception trace_tail
private void printstacktraceline printstream errorstream  irubyobject stacktraceline
errorstream print     stacktraceline
private boolean isarrayofstrings irubyobject backtrace
if    backtrace instanceof rubyarray   return false
irubyobject elements     rubyarray  backtrace  tojavaarray
for  int i   0   i < elements length   i
if    elements instanceof rubystring   return false
return true