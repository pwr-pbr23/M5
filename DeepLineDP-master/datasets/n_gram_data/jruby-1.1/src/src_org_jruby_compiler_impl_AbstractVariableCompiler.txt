/*
***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby compiler impl
import org jruby ruby
import org jruby rubyarray
import org jruby compiler arraycallback
import org jruby compiler compilercallback
import org jruby compiler variablecompiler
import org jruby javasupport util runtimehelpers
import org jruby runtime arity
import org jruby runtime block
import org jruby runtime frame
import org jruby runtime threadcontext
import org jruby runtime builtin irubyobject
import static org jruby util codegenutils
import org objectweb asm label
/**
*
* @author headius
*/
public abstract class abstractvariablecompiler implements variablecompiler
protected skinnymethodadapter method
protected standardasmcompiler abstractmethodcompiler methodcompiler
protected int argsindex
protected int closureindex
protected int tempvariableindex
protected arity arity
public abstractvariablecompiler
standardasmcompiler abstractmethodcompiler methodcompiler
skinnymethodadapter method
int argsindex
int closureindex
int firsttempindex
this methodcompiler   methodcompiler
this method   method
this argsindex   argsindex
this closureindex   closureindex
this tempvariableindex   firsttempindex
public skinnymethodadapter getmethodadapter
return this method
public void setmethodadapter skinnymethodadapter sma
this method   sma
public void assignlastline
method dup
methodcompiler loadruntime
method swap
methodcompiler loadthreadcontext
method swap
method invokestatic p runtimehelpers class      sig void class  ruby class  threadcontext class  irubyobject class
public void retrievelastline
methodcompiler loadruntime
methodcompiler loadthreadcontext
method invokestatic p runtimehelpers class      sig irubyobject class  ruby class  threadcontext class
public void assignbackref
method dup
methodcompiler loadruntime
method swap
methodcompiler loadthreadcontext
method swap
method invokestatic p runtimehelpers class      sig void class  ruby class  threadcontext class  irubyobject class
public void retrievebackref
methodcompiler loadruntime
methodcompiler loadthreadcontext
method invokestatic p runtimehelpers class      sig irubyobject class  ruby class  threadcontext class
public void checkmethodarity int requiredargs  int optargs  int restarg
// check arity
label arityerror   new label
label noarityerror   new label
if  restarg     1
if  requiredargs > 0
// just confirm minimum args provided
method aload argsindex
method arraylength
method ldc requiredargs
method if_icmplt arityerror
else if  optargs > 0
if  requiredargs > 0
// confirm minimum args provided
method aload argsindex
method arraylength
method ldc requiredargs
method if_icmplt arityerror
// confirm maximum not greater than optional
method aload argsindex
method arraylength
method ldc requiredargs   optargs
method if_icmpgt arityerror
else
// just confirm args length == required
method aload argsindex
method arraylength
method ldc requiredargs
method if_icmpne arityerror
method go_to noarityerror
method label arityerror
methodcompiler loadruntime
method aload argsindex
method ldc requiredargs
method ldc requiredargs   optargs
method invokestatic p arity class      sig int class  ruby class  irubyobject class  int class  int class
method pop
method label noarityerror
public void assignmethodarguments
object requiredargs
int requiredargscount
object optargs
int optargscount
arraycallback requiredassignment
arraycallback optgivenassignment
arraycallback optnotgivenassignment
compilercallback restassignment
compilercallback blockassignment
if  requiredargscount > 0    optargscount > 0    restassignment    null
// load arguments array
method aload argsindex
// note: this assumes arity has already been confirmed, and does not re-check
// first, iterate over all required args
int currentargelement   0
for    currentargelement < requiredargscount  currentargelement
// extract item from array
method dup       dup the original array
method ldc new integer currentargelement       index for the item
method arrayload
requiredassignment nextvalue methodcompiler  requiredargs  currentargelement
// normal assignment leaves the value; pop it.
method pop
// next, iterate over all optional args, until no more arguments
for  int optargelement   0  optargelement < optargscount  currentargelement    optargelement
label nomorearrayelements   new label
label donewithelement   new label
// confirm we're not past the end of the array
method dup       dup the original array
method arraylength
method ldc new integer currentargelement
method if_icmple nomorearrayelements      if length <  start  end loop
// extract item from array
method dup       dup the original array
method ldc new integer currentargelement       index for the item
method arrayload
optgivenassignment nextvalue methodcompiler  optargs  optargelement
method go_to donewithelement
// otherwise no items left available, use the code from nilcallback
method label nomorearrayelements
optnotgivenassignment nextvalue methodcompiler  optargs  optargelement
// end of this element
method label donewithelement
// normal assignment leaves the value; pop it.
method pop
// if there's args left and we want them, assign to rest arg
if  restassignment    null
label emptyarray   new label
label readyforargs   new label
// confirm we're not past the end of the array
method dup       dup the original array
method arraylength
method ldc new integer currentargelement
method if_icmple emptyarray      if length <  start  end loop
// assign remaining elements as an array for rest args
method dup       dup the original array object
methodcompiler loadruntime
method ldc currentargelement
methodcompiler invokeutilitymethod    sig rubyarray class  irubyobject class  ruby class  int class
method go_to readyforargs
// create empty array
method label emptyarray
methodcompiler createemptyarray
// assign rest args
method label readyforargs
restassignment call methodcompiler
//consume leftover assigned value
method pop
// done with arguments array
method pop
// block argument assignment, if there's a block arg
if  blockassignment    null
methodcompiler loadruntime
method aload closureindex
methodcompiler invokeutilitymethod    sig irubyobject class  params ruby class  block class
blockassignment call methodcompiler
method pop
public int grabtemplocal
return tempvariableindex
public void settemplocal int index
method astore index
public void gettemplocal int index
method aload index
public void releasetemplocal
tempvariableindex