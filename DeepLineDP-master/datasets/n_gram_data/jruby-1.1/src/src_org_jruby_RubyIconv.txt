/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2006 thomas e enebo <enebo@acm.org>
* copyright (c) 2007 koichiro ohba <koichiro@meadowy.org>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby
import java nio bytebuffer
import java nio charbuffer
import java nio charset charactercodingexception
import java nio charset charset
import java nio charset charsetdecoder
import java nio charset charsetencoder
import java nio charset codingerroraction
import java nio charset illegalcharsetnameexception
import java nio charset malformedinputexception
import java nio charset unmappablecharacterexception
import java nio charset unsupportedcharsetexception
import org jruby anno jrubymethod
import org jruby runtime arity
import org jruby runtime block
import org jruby runtime objectallocator
import org jruby runtime threadcontext
import org jruby runtime builtin irubyobject
import org jruby util bytelist
public class rubyiconv extends rubyobject
//static private final string translit = "//translit";
static private final string ignore
private charsetdecoder fromencoding
private charsetencoder toencoding
public rubyiconv ruby runtime  rubyclass type
super runtime  type
}
private static final objectallocator iconv_allocator   new objectallocator
public irubyobject allocate ruby runtime  rubyclass klass
return new rubyiconv runtime  klass
}
public static void createiconv ruby runtime
rubyclass iconvclass   runtime defineclass    runtime getobject    iconv_allocator
iconvclass defineannotatedmethods rubyiconv class
rubymodule failure   iconvclass definemoduleunder
rubyclass argumenterror   runtime fastgetclass
string iconverrors
for  int i   0  i < iconverrors length  i
rubyclass subclass   iconvclass defineclassunder iconverrors  argumenterror  rubyfailure iconv_failure_allocator
subclass defineannotatedmethods rubyfailure class
subclass includemodule failure
}
}
public static class rubyfailure extends rubyexception
private irubyobject success
private irubyobject failed
public static rubyfailure newinstance ruby runtime  rubyclass excptnclass  string msg
return new rubyfailure runtime  excptnclass  msg
}
protected static final objectallocator iconv_failure_allocator   new objectallocator
public irubyobject allocate ruby runtime  rubyclass klass
return new rubyfailure runtime  klass
}
protected rubyfailure ruby runtime  rubyclass rubyclass
this runtime  rubyclass  null
}
public rubyfailure ruby runtime  rubyclass rubyclass  string message
super runtime  rubyclass  message
}
@jrubymethod name      required   1  optional   2  frame   true
public irubyobject initialize irubyobject args  block block
super initialize args  block
success   args length >  2 ? args   getruntime   getnil
failed   args length    3 ? args   getruntime   getnil
return this
}
@jrubymethod name
public irubyobject success
return success
}
@jrubymethod name
public irubyobject failed
return failed
}
@jrubymethod name
public irubyobject inspect
rubymodule rubyclass   getmetaclass
stringbuffer buffer   new stringbuffer
buffer append rubyclass getname    append    append success inspect   tostring
buffer append    append failed inspect   tostring    append
return getruntime   newstring buffer tostring
}
}
private static string getcharset string encoding
int index   encoding indexof
if  index     1  return encoding
return encoding substring 0  index
}
/* currently dead code, but useful when we figure out how to actually perform translit.
private static boolean istranslit(string encoding) {
return encoding.tolowercase().indexof(translit) != -1 ? true : false;
}*/
private static boolean isignore string encoding
return encoding tolowercase   indexof ignore      1 ? true   false
}
@jrubymethod name      required   2  frame   true  meta   true
public static irubyobject open threadcontext context  irubyobject recv  irubyobject to  irubyobject from  block block
ruby runtime   recv getruntime
rubyiconv iconv
rubyiconv  runtime fastgetclass    newinstance context
new irubyobject   to  from    block null_block
if   block isgiven    return iconv
irubyobject result   runtime getnil
try
result   block yield context  iconv
finally
iconv close
}
return result
}
@jrubymethod name      required   2  frame   true
public irubyobject initialize irubyobject arg1  irubyobject arg2  block unusedblock
ruby runtime   getruntime
if   arg1 respondsto
throw runtime newtypeerror     arg1 getmetaclass
}
if   arg2 respondsto
throw runtime newtypeerror     arg2 getmetaclass
}
string to   arg1 converttostring   tostring
string from   arg2 converttostring   tostring
try
fromencoding   charset forname getcharset from   newdecoder
toencoding   charset forname getcharset to   newencoder
if   isignore from   fromencoding onunmappablecharacter codingerroraction report
if   isignore to   toencoding onunmappablecharacter codingerroraction report
catch  illegalcharsetnameexception e
throw runtime newargumenterror
catch  unsupportedcharsetexception e
throw runtime newargumenterror
catch  exception e
throw runtime newsystemcallerror e tostring
}
return this
}
@jrubymethod name
public irubyobject close
toencoding   null
fromencoding   null
return getruntime   newstring
}
@jrubymethod name      required   1  optional   2
public irubyobject iconv irubyobject args
ruby runtime   getruntime
args   arity scanargs runtime  args  1  2
int start   0
int end    1
if  args isnil
fromencoding reset
toencoding reset
return runtime newstring
}
if   args respondsto
throw runtime newtypeerror     args getmetaclass
}
if   args isnil    start   rubynumeric fix2int args
if   args isnil    end   rubynumeric fix2int args
irubyobject result   _iconv args converttostring    start  end
return result
}
// fixme: we are assuming that original string will be raw bytes.  if -ku is provided
// this will not be true, but that is ok for now.  deal with that when someone needs it.
private irubyobject _iconv rubystring str  int start  int end
bytelist bytes   str getbytelist
// treat start and end as start...end for end >= 0, start..end for end < 0
if  start < 0
start    bytes length
}
if  end < 0
end    1   bytes length
else if  end > bytes length
end   bytes length
}
if  start < 0    end < start       invalid ranges result in an empty string
return getruntime   newstring
}
bytebuffer buf   bytebuffer wrap bytes unsafebytes    bytes begin     start  end   start
try
charbuffer cbuf   fromencoding decode buf
buf   toencoding encode cbuf
catch  malformedinputexception e
catch  unmappablecharacterexception e
catch  charactercodingexception e
throw getruntime   newinvalidencoding
catch  illegalstateexception e
}
byte arr   buf array
return getruntime   newstring new bytelist arr  0  buf limit
}
@jrubymethod name      required   2  optional   1  meta   true
public static irubyobject iconv irubyobject recv  irubyobject args  block unusedblock
return convertwithargs recv  args
}
@jrubymethod name      required   3  rest   true  meta   true
public static irubyobject conv threadcontext context  irubyobject recv  irubyobject args  block unusedblock
return convertwithargs recv  args     join context  recv getruntime   newstring
}
public static rubyarray convertwithargs irubyobject recv  irubyobject args  string function
string fromencoding   args converttostring   tostring
string toencoding   args converttostring   tostring
rubyarray array   recv getruntime   newarray
for  int i   2  i < args length  i
array append convert2 fromencoding  toencoding  args converttostring
}
return array
}
/*
private static irubyobject convert(string fromencoding, string toencoding, rubystring original)
throws unsupportedencodingexception {
// get all bytes from plain string pretend they are not encoded in any way.
byte[] string = original.getbytes();
// now create a string pretending it is from fromencoding
string = new string(string, fromencoding).getbytes(toencoding);
// finally recode back to plain
return rubystring.newstring(original.getruntime(), string);
}
*/
// fixme: we are assuming that original string will be raw bytes.  if -ku is provided
// this will not be true, but that is ok for now.  deal with that when someone needs it.
private static irubyobject convert2 string fromencoding  string toencoding  rubystring original
// don't bother to convert if it is already in toencoding
if  fromencoding equals toencoding   return original
try
// get all bytes from string and pretend they are not encoded in any way.
bytelist bytes   original getbytelist
bytebuffer buf   bytebuffer wrap bytes unsafebytes    bytes begin    bytes length
charsetdecoder decoder   charset forname getcharset fromencoding   newdecoder
if   isignore fromencoding   decoder onunmappablecharacter codingerroraction report
charbuffer cbuf   decoder decode buf
charsetencoder encoder   charset forname getcharset toencoding   newencoder
if   isignore toencoding   encoder onunmappablecharacter codingerroraction report
buf   encoder encode cbuf
byte arr   buf array
return rubystring newstring original getruntime    new bytelist arr 0 buf limit
catch  unsupportedcharsetexception e
throw original getruntime   newinvalidencoding
catch  unmappablecharacterexception e
catch  charactercodingexception e
}
return original getruntime   getnil
}
}