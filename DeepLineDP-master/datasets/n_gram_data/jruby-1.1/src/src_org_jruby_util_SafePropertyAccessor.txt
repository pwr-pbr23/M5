/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2007 vladimir sizikov <vsizikov@gmail.com>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby util
/**
* utility class to safely access system properties in security-sensitive
* environments.
*/
public class safepropertyaccessor
/**
* an extension over <code>boolean.getboolean</code> method.
* returns true if and only if the system property
* named by the argument exists and is equal to the string "true".
* if there is no property with the specified name, or if the specified
* name is empty or null, or if the access to the property is
* restricted, then false is returned.
* @param property the system property name.
* @return the boolean value of the system property.
*/
public static boolean getboolean string property
try
return boolean getboolean property
catch  securityexception se
return false
/**
* an extension over <code>boolean.getboolean</code> method.
* handles security restrictions, and provides default value
* in case when access to the property is restricted,
* of when the property does not exist.
* @param property the system property name.
* @param defvalue the default value.
* @return the boolean value of the system property,
*         or the default value.
*/
public static boolean getboolean string property  boolean defvalue
try
if  system getproperty property     null
return boolean getboolean property
else
return defvalue
catch  securityexception se
return defvalue
/**
* an extension over <code>system.getproperty</code> method.
* handles security restrictions, and returns <code>null</code>
* if the access to the property is restricted.
* @param property the system property name.
* @return the value of the system property,
*         or the default value.
*/
public static string getproperty string property
return getproperty property  null
/**
* an extension over <code>system.getproperty</code> method.
* handles security restrictions, and returns the default
* value if the access to the property is restricted.
* @param property the system property name.
* @param defvalue the default value.
* @return the value of the system property,
*         or the default value.
*/
public static string getproperty string property  string defvalue
try
return system getproperty property  defvalue
catch  securityexception se
return defvalue
/**
* an extension over <code>system.getproperty</code> method
* that additionally produces an int value.
* handles security restrictions, and returns <code>0</code>
* if the access to the property is restricted.
* @param property the system property name.
* @return the value of the system property,
*         or the default value.
*/
public static int getint string property
return getint property  0
/**
* an extension over <code>system.getproperty</code> method
* that additionally produces an int value.
* handles security restrictions, and returns the default
* value if the access to the property is restricted.
* @param property the system property name.
* @param defvalue the default value.
* @return the value of the system property,
*         or the default value.
*/
public static int getint string property  int defvalue
try
return integer parseint system getproperty property  string valueof defvalue
catch  securityexception se
return defvalue
/**
* returns <code>true</code> if the access to the system property
* is restricted (i.e., when system.getproperty()
* throws securityexception).
* @param property the system property name.
* @return <code>true</code> if the access is restricted,
*         <code>false</code> otherwise.
*/
public static boolean issecurityprotected string property
try
system getproperty property
return false
catch  securityexception se
return true