/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2001-2004 jan arne petersen <jpetersen@uni-bonn.de>
* copyright (c) 2002 benoit cerrina <b.cerrina@wanadoo.fr>
* copyright (c) 2002-2004 anders bengtsson <ndrsbngtssn@yahoo.se>
* copyright (c) 2004-2006 thomas e enebo <enebo@acm.org>
* copyright (c) 2004 stefan matthias aust <sma@3plus4.de>
* copyright (c) 2005 charles o nutter <headius@headius.com>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby javasupport bsf
import java util arrays
import java util list
import java util vector
import org apache bsf bsfdeclaredbean
import org apache bsf bsfexception
import org apache bsf bsfmanager
import org apache bsf util bsfengineimpl
import org apache bsf util bsffunctions
import org jruby ruby
import org jruby ast node
import org jruby evaluator astinterpreter
import org jruby exceptions jumpexception
import org jruby exceptions raiseexception
import org jruby javasupport java
import org jruby javasupport javaembedutils
import org jruby javasupport javaobject
import org jruby javasupport javautil
import org jruby runtime block
import org jruby runtime dynamicscope
import org jruby runtime globalvariable
import org jruby runtime iaccessor
import org jruby runtime threadcontext
import org jruby runtime builtin irubyobject
/** an implementation of a jruby bsf implementation.
*
* @author  jpetersen
*/
public class jrubyengine extends bsfengineimpl
private ruby runtime
public object apply string file  int line  int col  object funcbody  vector paramnames  vector args
threadcontext context   runtime getcurrentcontext
try
// add a new method conext
string names   new string
paramnames toarray names
context prebsfapply names
// fixme: this is broken.  we are assigning bsf globals as local vars in the top-level
// scope.  this may be ok, but we are overwriting $~ and $_.  leaving for now.
dynamicscope scope   context getcurrentscope
// set global variables
for  int i   0  size   args size    i < size  i
scope setvalue i  javaembedutils javatoruby runtime  args get i    0
// see eval todo about why this is commented out
//runtime.setposition(file, line);
node node   runtime parseeval file  funcbody tostring    null  0
irubyobject result   astinterpreter eval runtime  context  node  runtime gettopself    block null_block
return javaembedutils rubytojava runtime  result  object class
finally
context postbsfapply
public object eval string file  int line  int col  object expr  throws bsfexception
try
// todo: [jruby-24] this next line never would have worked correctly as a lexersource
// would have thrown a parsing error with a name of "<script>" and a line
// value of whatever line in the string it is in.  find real way of returning
// what is expected.
//runtime.setposition(file, line);
irubyobject result   runtime evalscriptlet expr tostring
return javaembedutils rubytojava runtime  result  object class
catch  exception excptn
excptn printstacktrace
throw new bsfexception bsfexception reason_execution_error     excptn
public void exec string file  int line  int col  object expr  throws bsfexception
try
// see eval todo about why this is commented out
//runtime.setposition(file, line);
runtime evalscriptlet expr tostring
catch  exception excptn
excptn printstacktrace
throw new bsfexception bsfexception reason_execution_error     excptn
public object call object recv  string method  object args  throws bsfexception
try
return javaembedutils invokemethod runtime  recv  method  args  object class
catch  exception excptn
excptn printstacktrace
printexception runtime  excptn
throw new bsfexception bsfexception reason_execution_error  excptn getmessage    excptn
public void initialize bsfmanager manager  string language  vector somedeclaredbeans  throws bsfexception
super initialize manager  language  somedeclaredbeans
runtime   javaembedutils initialize getclasspath manager
for  int i   0  size   somedeclaredbeans size    i < size  i
bsfdeclaredbean bean    bsfdeclaredbean  somedeclaredbeans elementat i
runtime getglobalvariables   define
globalvariable variablename bean name
new beanglobalvariable runtime  bean
runtime getglobalvariables   definereadonly    new functionsglobalvariable runtime  new bsffunctions manager  this
private list getclasspath bsfmanager manager
return arrays aslist manager getclasspath   split system getproperty
public void declarebean bsfdeclaredbean bean  throws bsfexception
runtime getglobalvariables   define
globalvariable variablename bean name
new beanglobalvariable runtime  bean
public void undeclarebean bsfdeclaredbean bean  throws bsfexception
runtime getglobalvariables   set globalvariable variablename bean name   runtime getnil
public void handleexception bsfexception bsfexcptn
printexception runtime   exception  bsfexcptn gettargetexception
/**
*
* prints out an error message.
*
* @param exception an exception thrown by jruby
*/
private static void printexception ruby runtime  exception exception
if  exception instanceof raiseexception
jumpexception je    jumpexception exception
if  je instanceof raiseexception
runtime printerror   raiseexception je  getexception
else if  je instanceof jumpexception throwjump
runtime geterrorstream   println
else if  je instanceof jumpexception breakjump
runtime geterrorstream   println
else if  je instanceof jumpexception returnjump
runtime geterrorstream   println
private static class beanglobalvariable implements iaccessor
private ruby runtime
private bsfdeclaredbean bean
public beanglobalvariable ruby runtime  bsfdeclaredbean bean
this runtime   runtime
this bean   bean
public irubyobject getvalue
irubyobject result   javautil convertjavatoruby runtime  bean bean  bean type
return result instanceof javaobject ? java wrap runtime  result    result
public irubyobject setvalue irubyobject value
bean bean   javautil convertargument runtime  java ruby_to_java runtime getobject    value  block null_block   bean type
return value
private static class functionsglobalvariable implements iaccessor
private ruby runtime
private bsffunctions functions
public functionsglobalvariable ruby runtime  bsffunctions functions
this runtime   runtime
this functions   functions
public irubyobject getvalue
irubyobject result   javautil convertjavatoruby runtime  functions  bsffunctions class
return result instanceof javaobject ? java wrap runtime  result    result
public irubyobject setvalue irubyobject value
return value
/**
* @see org.apache.bsf.bsfengine#terminate()
*/
public void terminate
javaembedutils terminate runtime
runtime   null
super terminate