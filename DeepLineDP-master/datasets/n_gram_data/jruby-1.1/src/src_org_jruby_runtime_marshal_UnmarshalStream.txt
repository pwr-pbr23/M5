/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2002-2004 anders bengtsson <ndrsbngtssn@yahoo.se>
* copyright (c) 2002-2004 jan arne petersen <jpetersen@uni-bonn.de>
* copyright (c) 2004 thomas e enebo <enebo@acm.org>
* copyright (c) 2004 charles o nutter <headius@headius.com>
* copyright (c) 2004 stefan matthias aust <sma@3plus4.de>
* copyright (c) 2006 ola bini <ola.bini@ki.se>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby runtime marshal
import java io bufferedinputstream
import java io ioexception
import java io inputstream
import java util arraylist
import java util list
import org jruby ruby
import org jruby rubyarray
import org jruby rubybignum
import org jruby rubyclass
import org jruby rubyfixnum
import org jruby rubyfloat
import org jruby rubyhash
import org jruby rubymodule
import org jruby rubyobject
import org jruby rubyregexp
import org jruby rubystring
import org jruby rubystruct
import org jruby rubysymbol
import org jruby exceptions raiseexception
import org jruby runtime builtin irubyobject
import org jruby runtime builtin variable
import org jruby runtime component variableentry
import org jruby util bytelist
/**
* unmarshals objects from strings or streams in ruby's marsal format.
*
* @author anders
*/
public class unmarshalstream extends bufferedinputstream
protected final ruby runtime
private unmarshalcache cache
private irubyobject proc
public unmarshalstream ruby runtime  inputstream in  irubyobject proc  throws ioexception
super in
this runtime   runtime
this cache   new unmarshalcache runtime
this proc   proc
in read       major
in read       minor
public irubyobject unmarshalobject   throws ioexception
int type   readunsignedbyte
irubyobject result
if  cache islinktype type
result   cache readlink this  type
else
result   unmarshalobjectdirectly type
return result
public void registerlinktarget irubyobject newobject
if  marshalstream shouldberegistered newobject
cache register newobject
public static rubymodule getmodulefrompath ruby runtime  string path
rubymodule value   runtime getclassfrompath path
if   value ismodule    throw runtime newargumenterror path
return value
public static rubyclass getclassfrompath ruby runtime  string path
rubymodule value   runtime getclassfrompath path
if   value isclass    throw runtime newargumenterror path
return  rubyclass value
private irubyobject unmarshalobjectdirectly int type  throws ioexception
irubyobject rubyobj   null
switch  type
case
rubyobj   unmarshalobject
defaultvariablesunmarshal rubyobj
break
case
rubyobj   runtime getnil
break
case
rubyobj   runtime gettrue
break
case
rubyobj   runtime getfalse
break
case
rubyobj   rubystring unmarshalfrom this
break
case
rubyobj   rubyfixnum unmarshalfrom this
break
case
rubyobj   rubyfloat unmarshalfrom this
break
case
rubyobj   rubyregexp unmarshalfrom this
break
case
rubyobj   rubysymbol unmarshalfrom this
break
case
rubyobj   rubyarray unmarshalfrom this
break
case
rubyobj   rubyhash unmarshalfrom this  false
break
case
// "hashdef" object, a hash with a default
rubyobj   rubyhash unmarshalfrom this  true
break
case
rubyobj   rubyclass unmarshalfrom this
break
case
rubyobj   rubymodule unmarshalfrom this
break
case
rubysymbol modulename    rubysymbol  unmarshalobject
rubymodule tp   null
try
tp   runtime getclassfrompath modulename asjavastring
catch  raiseexception e
if  runtime fastgetmodule    isinstance e getexception
throw runtime newargumenterror     modulename asjavastring
throw e
rubyobj   unmarshalobject
tp extend_object rubyobj
tp callmethod runtime getcurrentcontext      rubyobj
break
case
rubyobj   rubybignum unmarshalfrom this
break
case
rubyobj   rubystruct unmarshalfrom this
break
case
rubyobj   defaultobjectunmarshal
break
case
rubyobj   userunmarshal
break
case
rubyobj   usernewunmarshal
break
case
rubyobj   uclassunmarshall
break
default
throw getruntime   newargumenterror      char type
if  proc    null    type
// call the proc, but not for symbols
proc callmethod getruntime   getcurrentcontext       new irubyobject  rubyobj
return rubyobj
public ruby getruntime
return runtime
public int readunsignedbyte   throws ioexception
int result   read
if  result     1
throw new ioexception
return result
public byte readsignedbyte   throws ioexception
int b   readunsignedbyte
if  b > 127
return  byte   b   256
return  byte  b
public bytelist unmarshalstring   throws ioexception
int length   unmarshalint
byte buffer   new byte
// fixme: sooper inefficient, but it's working better...
int b   0
int i   0
while  i < length     b   read        1
buffer    byte b
if  i < length
throw new ioexception
return new bytelist buffer false
public int unmarshalint   throws ioexception
int c   readsignedbyte
if  c    0
return 0
else if  5 < c    c < 128
return c   5
else if   129 < c    c <  5
return c   5
long result
if  c > 0
result   0
for  int i   0  i < c  i
result     long  readunsignedbyte   <<  8   i
else
c    c
result    1
for  int i   0  i < c  i
result    ~  long  0xff <<  8   i
result     long  readunsignedbyte   <<  8   i
return  int  result
private irubyobject defaultobjectunmarshal   throws ioexception
rubysymbol classname    rubysymbol  unmarshalobject
rubyclass type   null
try
type   getclassfrompath runtime  classname tostring
catch  raiseexception e
if  runtime fastgetmodule    isinstance e getexception
throw runtime newargumenterror     classname asjavastring
throw e
assert type    null
irubyobject result    irubyobject type unmarshal this
return result
public void defaultvariablesunmarshal irubyobject object  throws ioexception
int count   unmarshalint
list<variable<irubyobject>> attrs   new arraylist<variable<irubyobject>> count
for  int i   count    i >  0
string name   unmarshalobject   asjavastring
irubyobject value   unmarshalobject
attrs add new variableentry<irubyobject> name  value
object syncvariables attrs
private irubyobject uclassunmarshall   throws ioexception
rubysymbol classname    rubysymbol unmarshalobject
rubyclass type    rubyclass runtime getclassfrompath classname asjavastring
// all "c" marshalled objects descend from core classes, which are all rubyobject
rubyobject result    rubyobject unmarshalobject
result setmetaclass type
return result
private irubyobject userunmarshal   throws ioexception
string classname   unmarshalobject   asjavastring
bytelist marshaled   unmarshalstring
rubymodule classinstance   findclass classname
if   classinstance respondsto
throw runtime newtypeerror     classinstance getname
irubyobject result   classinstance callmethod getruntime   getcurrentcontext
rubystring newstring getruntime    marshaled
registerlinktarget result
return result
private irubyobject usernewunmarshal   throws ioexception
string classname   unmarshalobject   asjavastring
rubyclass classinstance   findclass classname
irubyobject result   classinstance allocate
registerlinktarget result
irubyobject marshaled   unmarshalobject
result callmethod getruntime   getcurrentcontext      marshaled
return result
private rubyclass findclass string classname
rubymodule classinstance
try
classinstance   runtime getclassfrompath classname
catch  raiseexception e
if  runtime getmodule    isinstance e getexception
throw runtime newargumenterror     classname
throw e
if     classinstance instanceof rubyclass
throw runtime newargumenterror classname          sic
return  rubyclass  classinstance