/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2007 ola bini <ola@ologix.com>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jvyamlb
import java io fileinputstream
import java io inputstream
import java util hashmap
import java util iterator
import java util list
import java util arraylist
import java util map
import org jvyamlb events aliasevent
import org jvyamlb events event
import org jvyamlb events nodeevent
import org jvyamlb events mappingendevent
import org jvyamlb events mappingstartevent
import org jvyamlb events scalarevent
import org jvyamlb events sequencestartevent
import org jvyamlb events sequenceendevent
import org jvyamlb events streamstartevent
import org jvyamlb events streamendevent
import org jvyamlb nodes node
import org jvyamlb nodes scalarnode
import org jvyamlb nodes sequencenode
import org jvyamlb nodes mappingnode
import org jruby util bytelist
/**
* @author <a href="mailto:ola.bini@ki.se">ola bini</a>
*/
public class composerimpl implements composer
private parser parser
private resolver resolver
private map anchors
public composerimpl final parser parser  final resolver resolver
this parser   parser
this resolver   resolver
this anchors   new hashmap
public boolean checknode
return   parser peekevent   instanceof streamendevent
public node getnode
return checknode   ? composedocument      node null
private class nodeiterator implements iterator
public boolean hasnext    return checknode
public object next    return getnode
public void remove
public iterator eachnode
return new nodeiterator
public iterator iterator
return eachnode
public node composedocument
if parser peekevent   instanceof streamstartevent
//drop stream-start event
parser getevent
//drop document-start event
parser getevent
final node node   composenode null null
//drop document-end event
parser getevent
this anchors clear
return node
private final static boolean fals   new boolean false
private final static boolean tru   new boolean true
public node composenode final node parent  final object index
if parser peekevent   instanceof aliasevent
final aliasevent event    aliasevent parser getevent
final string anchor   event getanchor
if  anchors containskey anchor
throw new composerexception null     anchor null
return  node anchors get anchor
final event event   parser peekevent
string anchor   null
if event instanceof nodeevent
anchor     nodeevent event  getanchor
resolver descendresolver parent index
node node   null
if event instanceof scalarevent
final scalarevent ev    scalarevent parser getevent
string tag   ev gettag
if tag    null    tag equals
tag   resolver resolve scalarnode class ev getvalue   ev getimplicit
node   new scalarnode tag ev getvalue   ev getstyle
if null    anchor
anchors put anchor node
else if event instanceof sequencestartevent
final sequencestartevent start    sequencestartevent parser getevent
string tag   start gettag
if tag    null    tag equals
tag   resolver resolve sequencenode class null start getimplicit    ? tru   fals
node   new sequencenode tag new arraylist   start getflowstyle
if null    anchor
anchors put anchor node
int ix   0
while   parser peekevent   instanceof sequenceendevent
list node getvalue    add composenode node new integer ix
parser getevent
else if event instanceof mappingstartevent
final mappingstartevent start    mappingstartevent parser getevent
string tag   start gettag
if tag    null    tag equals
tag   resolver resolve mappingnode class null  start getimplicit   ? tru   fals
node   new mappingnode tag  new hashmap    start getflowstyle
if null    anchor
anchors put anchor node
while   parser peekevent   instanceof mappingendevent
final event key   parser peekevent
final node itemkey   composenode node null
if   map node getvalue    containskey itemkey
composenode node itemkey
else
map node getvalue    put itemkey composenode node itemkey
parser getevent
resolver ascendresolver
return node
public static void main final string args  throws exception
final string filename   args
system out println
final bytelist input   new bytelist 1024
final inputstream reader   new fileinputstream filename
byte buff   new byte
int read   0
while true
read   reader read buff
input append buff 0 read
if read < 1024
break
reader close
final long before   system currenttimemillis
for int i 0 i<1 i
final composer cmp   new composerimpl new parserimpl new scannerimpl input   new resolverimpl
for final iterator iter   cmp eachnode   iter hasnext
iter next
//                system.out.println(iter.next());
final long after   system currenttimemillis
final long time   after before
final double times    after before  1000 0
system out println     filename       time       times
composerimpl