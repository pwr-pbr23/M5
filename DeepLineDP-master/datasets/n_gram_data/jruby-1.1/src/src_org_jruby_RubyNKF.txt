/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2007 koichiro ohba <koichiro@meadowy.org>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby
import java nio bytebuffer
import java nio charbuffer
import java nio charset charactercodingexception
import java nio charset charset
import java nio charset charsetdecoder
import java nio charset charsetencoder
import java nio charset unsupportedcharsetexception
import java util hashmap
import java util map
import org jruby anno jrubymethod
import org jruby runtime builtin irubyobject
import org jruby util bytelist
import org jruby util kcode
public class rubynkf
public static final nkfcharset auto   new nkfcharset 0
public static final nkfcharset jis   new nkfcharset 1
public static final nkfcharset euc   new nkfcharset 2
public static final nkfcharset sjis   new nkfcharset 3
public static final nkfcharset binary   new nkfcharset 4  null
public static final nkfcharset noconv   new nkfcharset 4  null
public static final nkfcharset unknown   new nkfcharset 0  null
public static final nkfcharset ascii   new nkfcharset 5
public static final nkfcharset utf8   new nkfcharset 6
public static final nkfcharset utf16   new nkfcharset 8
public static final nkfcharset utf32   new nkfcharset 12
public static final nkfcharset other   new nkfcharset 16  null
public static class nkfcharset
private final int value
private final string charset
public nkfcharset int v  string c
value   v
charset   c
public int getvalue
return value
public string getcharset
return charset
public static void createnkf ruby runtime
rubymodule nkfmodule   runtime definemodule
nkfmodule defineconstant    rubyfixnum newfixnum runtime  auto getvalue
nkfmodule defineconstant    rubyfixnum newfixnum runtime  jis getvalue
nkfmodule defineconstant    rubyfixnum newfixnum runtime  euc getvalue
nkfmodule defineconstant    rubyfixnum newfixnum runtime  sjis getvalue
nkfmodule defineconstant    rubyfixnum newfixnum runtime  binary getvalue
nkfmodule defineconstant    rubyfixnum newfixnum runtime  noconv getvalue
nkfmodule defineconstant    rubyfixnum newfixnum runtime  unknown getvalue
nkfmodule defineconstant    rubyfixnum newfixnum runtime  ascii getvalue
nkfmodule defineconstant    rubyfixnum newfixnum runtime  utf8 getvalue
nkfmodule defineconstant    rubyfixnum newfixnum runtime  utf16 getvalue
nkfmodule defineconstant    rubyfixnum newfixnum runtime  utf32 getvalue
nkfmodule defineconstant    rubyfixnum newfixnum runtime  other getvalue
rubystring version   runtime newstring
rubystring nkfversion   runtime newstring
rubystring nkfdate   runtime newstring
version freeze
nkfversion freeze
nkfdate freeze
nkfmodule defineannotatedmethods rubynkf class
@jrubymethod name      required   1  module   true
public static irubyobject guess irubyobject recv  irubyobject s
ruby runtime   recv getruntime
if   s respondsto
throw runtime newtypeerror     s getmetaclass
bytelist bytes   s converttostring   getbytelist
bytebuffer buf   bytebuffer wrap bytes unsafebytes    bytes begin    bytes length
charsetdecoder decoder   charset forname    newdecoder
try
decoder decode buf
catch  charactercodingexception e
return runtime newfixnum unknown getvalue
if   decoder ischarsetdetected
return runtime newfixnum unknown getvalue
charset charset   decoder detectedcharset
string name   charset name
//        system.out.println("detect: " + name + "\n");
if    equals name
return runtime newfixnum sjis getvalue
if    equals name
return runtime newfixnum sjis getvalue
else if    equals name
return runtime newfixnum euc getvalue
else if    equals name
return runtime newfixnum jis getvalue
else
return runtime newfixnum unknown getvalue
@jrubymethod name      required   1  module   true
public static irubyobject guess1 irubyobject recv  irubyobject str
return guess recv  str
@jrubymethod name      required   1  module   true
public static irubyobject guess2 irubyobject recv  irubyobject str
return guess recv  str
@jrubymethod name      required   2  module   true
public static irubyobject nkf irubyobject recv  irubyobject opt  irubyobject str
ruby runtime   recv getruntime
if   opt respondsto
throw runtime newtypeerror     opt getmetaclass
if   str respondsto
throw runtime newtypeerror     str getmetaclass
map<string  nkfcharset> options   parseopt opt converttostring   tostring
nkfcharset nc   options get
if  nc getvalue      auto getvalue
kcode kcode   runtime getkcode
if  kcode    kcode sjis
nc   sjis
else if  kcode    kcode euc
nc   euc
else if  kcode    kcode utf8
nc   utf8
string decodecharset   nc getcharset
string encodecharset   options get    getcharset
return convert decodecharset  encodecharset  str
private static irubyobject convert string decodecharset  string encodecharset  irubyobject str
ruby runtime   str getruntime
charsetdecoder decoder
charsetencoder encoder
try
decoder   charset forname decodecharset  newdecoder
encoder   charset forname encodecharset  newencoder
catch  unsupportedcharsetexception e
throw runtime newargumenterror
bytelist bytes   str converttostring   getbytelist
bytebuffer buf   bytebuffer wrap bytes unsafebytes    bytes begin    bytes length
try
charbuffer cbuf   decoder decode buf
buf   encoder encode cbuf
catch  charactercodingexception e
throw runtime newargumenterror
byte arr   buf array
return runtime newstring new bytelist arr  0  buf limit
private static int optionutf string s  int i
int n   8
if  i 1 < s length      character isdigit s charat i 1
n   character digit s charat i 1   10
if  i 2 < s length      character isdigit s charat i 2
n    10
n    character digit s charat i 2   10
return n
private static map<string  nkfcharset> parseopt string s
map<string  nkfcharset> options   new hashmap<string  nkfcharset>
// default options
options put    auto
options put    jis
for  int i   0  i < s length    i
switch  s charat i
case
break
case
break
case       iso 2022 jp
options put    jis
break
case       shift_jis
options put    sjis
break
case       euc jp
options put    euc
break
case       utf 8
int n   optionutf s  i
if  n    32
options put    utf32
else if  n    16
options put    utf16
else
options put    utf8
break
case       iso 2022 jp
options put    jis
break
case       shift_jis
options put    sjis
break
case       euc jp
options put    euc
break
case       utf 8
int n   optionutf s  i
if  n    32
options put    utf32
else if  n    16
options put    utf16
else
options put    utf8
break
case
break
case
break
case
break
case
break
case
break
case
break
case
break
case
break
case
break
case
break
case
break
case
break
case
break
case
break
case
break
case
break
case
break
case
if  s charat i 1
// long name option
default
return options