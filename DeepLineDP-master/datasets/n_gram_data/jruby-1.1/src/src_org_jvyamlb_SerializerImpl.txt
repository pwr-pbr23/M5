/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2007 ola bini <ola@ologix.com>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jvyamlb
import java io ioexception
import java text messageformat
import java util iterator
import java util list
import java util map
import java util identityhashmap
import java util hashmap
import java util set
import java util hashset
import org jvyamlb events aliasevent
import org jvyamlb events documentendevent
import org jvyamlb events documentstartevent
import org jvyamlb events scalarevent
import org jvyamlb events mappingendevent
import org jvyamlb events mappingstartevent
import org jvyamlb events sequenceendevent
import org jvyamlb events sequencestartevent
import org jvyamlb events streamendevent
import org jvyamlb events streamstartevent
import org jvyamlb nodes node
import org jvyamlb nodes linknode
import org jvyamlb nodes collectionnode
import org jvyamlb nodes mappingnode
import org jvyamlb nodes scalarnode
import org jvyamlb nodes sequencenode
import org jruby util bytelist
/**
* @author <a href="mailto:ola.bini@ki.se">ola bini</a>
*/
public class serializerimpl implements serializer
private emitter emitter
private resolver resolver
private yamlconfig options
private boolean useexplicitstart
private boolean useexplicitend
private int useversion
private boolean usetags
private string anchortemplate
private map serializednodes
private map anchors
private int lastanchorid
private boolean closed
private boolean opened
public serializerimpl final emitter emitter  final resolver resolver  final yamlconfig opts
this emitter   emitter
this resolver   resolver
this options   opts
this useexplicitstart   opts explicitstart
this useexplicitend   opts explicitend
int version   new int
if opts useversion
final string v1   opts version
final int index   v1 indexof
version   integer parseint v1 substring 0 index
version   integer parseint v1 substring index 1
else
version   null
this useversion   version
this usetags   opts useheader
this anchortemplate   opts anchorformat      null ?     opts anchorformat
this serializednodes   new identityhashmap
this anchors   new identityhashmap
this lastanchorid   0
this closed   false
this opened   false
protected boolean ignoreanchor final node node
return false
public void open   throws ioexception
if  closed     opened
this emitter emit new streamstartevent
this opened   true
else if closed
throw new serializerexception
else
throw new serializerexception
public void close   throws ioexception
if  opened
throw new serializerexception
else if  closed
this emitter emit new streamendevent
this closed   true
this opened   false
public void serialize final node node  throws ioexception
if  this closed     this opened
throw new serializerexception
else if this closed
throw new serializerexception
this emitter emit new documentstartevent this useexplicitstart this useversion null
anchornode node
serializenode node null null
this emitter emit new documentendevent this useexplicitend
this serializednodes   new identityhashmap
this anchors   new identityhashmap
this lastanchorid   0
private void anchornode node node
while node instanceof linknode
node     linknode node  getanchor
if  ignoreanchor node
if this anchors containskey node
string anchor    string this anchors get node
if null    anchor
anchor   generateanchor node
this anchors put node anchor
else
this anchors put node null
if node instanceof sequencenode
for final iterator iter     list node getvalue    iterator   iter hasnext
anchornode  node iter next
else if node instanceof mappingnode
final map value    map node getvalue
for final iterator iter   value entryset   iterator   iter hasnext
final map entry me    map entry iter next
anchornode  node me getkey
anchornode  node me getvalue
private string generateanchor final node node
this lastanchorid
return new messageformat this anchortemplate  format new object new integer this lastanchorid
private void serializenode node node  final node parent  final object index  throws ioexception
while node instanceof linknode
node     linknode node  getanchor
string talias    string this anchors get node
if this serializednodes containskey node     talias    null
this emitter emit new aliasevent talias
else
this serializednodes put node null
this resolver descendresolver parent index
if node instanceof scalarnode
final string detectedtag   this resolver resolve scalarnode class  bytelist node getvalue   new boolean true false
final string defaulttag   this resolver resolve scalarnode class  bytelist node getvalue   new boolean false true
final boolean implicit   new boolean  false false
if  options explicittypes
implicit   node gettag   equals detectedtag
implicit   node gettag   equals defaulttag
this emitter emit new scalarevent talias node gettag   implicit  bytelist node getvalue     scalarnode node  getstyle
else if node instanceof sequencenode
final boolean implicit    options explicittypes       node gettag   equals this resolver resolve sequencenode class null new boolean true true
this emitter emit new sequencestartevent talias node gettag   implicit   collectionnode node  getflowstyle
int ix   0
for final iterator iter     list node getvalue    iterator   iter hasnext
serializenode  node iter next   node new integer ix
this emitter emit new sequenceendevent
else if node instanceof mappingnode
final boolean implicit    options explicittypes       node gettag   equals this resolver resolve mappingnode class null new boolean true true
this emitter emit new mappingstartevent talias node gettag   implicit   collectionnode node  getflowstyle
final map value    map node getvalue
for final iterator iter   value entryset   iterator   iter hasnext
final map entry entry    map entry iter next
final node key    node entry getkey
final node val    node entry getvalue
serializenode key node null
serializenode val node key
this emitter emit new mappingendevent
serializerimpl