/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2007 nick sieger <nicksieger@gmail.com>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby
import java io bufferedinputstream
import java io bytearrayinputstream
import java io file
import java io fileinputstream
import java io ioexception
import java io inputstream
import java io printstream
import java io unsupportedencodingexception
import java util arraylist
import java util hashmap
import java util list
import java util map
import org jruby ast executable script
import org jruby exceptions mainexitexception
import org jruby runtime constants
import org jruby runtime load loadservice
import org jruby util classcache
import org jruby util jrubyfile
import org jruby util kcode
import org jruby util normalizedfile
import org jruby util safepropertyaccessor
public class rubyinstanceconfig
public enum compilemode
jit  force  off
public boolean shouldprecompilecli
switch  this
case jit  case force
return true
return false
public boolean shouldjit
switch  this
case jit  case force
return true
return false
public boolean shouldprecompileall
return this    force
private inputstream input            system in
private printstream output           system out
private printstream error            system err
private profile profile              profile default
private boolean objectspaceenabled
safepropertyaccessor getboolean    false
private compilemode compilemode   compilemode jit
private boolean runrubyinprocess     true
private string currentdirectory
private map environment
private string argv
private final boolean jitlogging
private final boolean jitloggingverbose
private final int jitlogevery
private final int jitthreshold
private final int jitmax
private final boolean samplingenabled
private compatversion compatversion
private classloader loader   thread currentthread   getcontextclassloader
private classcache<script> classcache
// from commandlineparser
private list<string> loadpaths   new arraylist<string>
private stringbuffer inlinescript   new stringbuffer
private boolean hasinlinescript   false
private string scriptfilename   null
private list<string> requiredlibraries   new arraylist<string>
private boolean benchmarking   false
private boolean argvglobalson   false
private boolean assumeloop   false
private boolean assumeprinting   false
private map optionglobals   new hashmap
private boolean processlineends   false
private boolean split   false
// this property is a boolean, to allow three values, so it can match mri's nil, false and true
private boolean verbose   boolean false
private boolean debug   false
private boolean showversion   false
private boolean showcopyright   false
private boolean endofarguments   false
private boolean shouldruninterpreter   true
private boolean shouldprintusage   false
private boolean shouldprintproperties false
private boolean yarv   false
private boolean rubinius   false
private boolean yarvcompile   false
private kcode kcode   kcode none
private string recordseparator
private boolean shouldchecksyntax   false
private string inputfieldseparator   null
private int safelevel   0
private string jrubyhome
public static final boolean fastest_compile_enabled
safepropertyaccessor getboolean
public static final boolean boxed_compile_enabled
fastest_compile_enabled
safepropertyaccessor getboolean
public static final boolean fastops_compile_enabled
fastest_compile_enabled
safepropertyaccessor getboolean
public static final boolean frameless_compile_enabled
fastest_compile_enabled
safepropertyaccessor getboolean
public static final boolean positionless_compile_enabled
fastest_compile_enabled
safepropertyaccessor getboolean
public static final boolean threadless_compile_enabled
fastest_compile_enabled
safepropertyaccessor getboolean
public static final boolean indexed_methods
safepropertyaccessor getboolean
public static final boolean fork_enabled
safepropertyaccessor getboolean
public static final boolean pooling_enabled
safepropertyaccessor getboolean
public static final int pool_max
safepropertyaccessor getint    integer max_value
public static final int pool_min
safepropertyaccessor getint    0
public static final int pool_ttl
safepropertyaccessor getint    60
public static boolean nativeenabled   true
public static interface loadservicecreator
loadservice create ruby runtime
loadservicecreator default   new loadservicecreator
public loadservice create ruby runtime
return new loadservice runtime
private loadservicecreator creator   loadservicecreator default
static
try
if  system getproperty       null
nativeenabled   boolean getboolean
catch  securityexception se
nativeenabled   false
public int characterindex   0
public rubyinstanceconfig
if  ruby issecurityrestricted
currentdirectory
else
currentdirectory   jrubyfile getfileproperty
samplingenabled   safepropertyaccessor getboolean    false
string compatstring   safepropertyaccessor getproperty
if  compatstring equalsignorecase
compatversion   compatversion ruby1_8
else if  compatstring equalsignorecase
compatversion   compatversion ruby1_9
else
system err println     compatstring
compatversion   compatversion ruby1_8
if  ruby issecurityrestricted
compilemode   compilemode off
jitlogging   false
jitloggingverbose   false
jitlogevery   0
jitthreshold    1
jitmax   0
else
string threshold   safepropertyaccessor getproperty
string max   safepropertyaccessor getproperty
runrubyinprocess   safepropertyaccessor getboolean    true
boolean jitproperty   safepropertyaccessor getproperty       null
if  jitproperty
error print
compilemode   safepropertyaccessor getboolean    ? compilemode jit   compilemode off
else
string jitmodeproperty   safepropertyaccessor getproperty
if  jitmodeproperty equals
compilemode   compilemode off
else if  jitmodeproperty equals
compilemode   compilemode jit
else if  jitmodeproperty equals
compilemode   compilemode force
else
error print
compilemode   compilemode jit
jitlogging   safepropertyaccessor getboolean
jitloggingverbose   safepropertyaccessor getboolean
string logevery   safepropertyaccessor getproperty
jitlogevery   logevery    null ? 0   integer parseint logevery
jitthreshold   threshold    null ? 20   integer parseint threshold
jitmax   max    null ? 2048   integer parseint max
// default classcache using jitmax as a soft upper bound
classcache   new classcache<script> loader  jitmax
if  fork_enabled
error print
public loadservicecreator getloadservicecreator
return creator
public void setloadservicecreator loadservicecreator creator
this creator   creator
public loadservice createloadservice ruby runtime
return this creator create runtime
public string getbasicusagehelp
stringbuffer sb   new stringbuffer
sb
append
append
append
append
append
append
append
append
append
//.append("  -i[extension]   edit argv files in place (make backup if extension supplied)\n")
append
append
append
append
append
append
append
append
append
append
append
append
append
append
//.append("  -x[directory]   strip off text before #!ruby line and perhaps cd to directory\n")
append
append
append
append
return sb tostring
public string getextendedhelp
stringbuffer sb   new stringbuffer
sb
append
append
append
append
append
append
append
append
append
return sb tostring
public string getpropertyhelp
stringbuffer sb   new stringbuffer
sb
append
append
append
append
append
append
append
append
append
append
append
append
append
append
append  unsafe
append
append
append
append
append
append
append
append
append
append
append
append
append
append
append
append
append
append
append
append
append
append
append
append
append
append
append
append
append
append
append
append
append
append
append
append  invokers
append
append
append
append
return sb tostring
public string getversionstring
stringbuffer buf   new stringbuffer
switch  compatversion
case ruby1_8
buf append constants ruby_version
break
case ruby1_9
buf append constants ruby1_9_version
break
buf
append
append constants compile_date       constants revision
append
append safepropertyaccessor getproperty             constants version
append
append
return buf tostring
public string getcopyrightstring
return
public void processarguments string arguments
new argumentprocessor arguments  processarguments
public compilemode getcompilemode
return compilemode
public void setcompilemode compilemode compilemode
this compilemode   compilemode
public boolean isjitlogging
return jitlogging
public boolean isjitloggingverbose
return jitloggingverbose
public int getjitlogevery
return jitlogevery
public boolean issamplingenabled
return samplingenabled
public int getjitthreshold
return jitthreshold
public int getjitmax
return jitmax
public boolean isrunrubyinprocess
return runrubyinprocess
public void setrunrubyinprocess boolean flag
this runrubyinprocess   flag
public void setinput inputstream newinput
input   newinput
public inputstream getinput
return input
public compatversion getcompatversion
return compatversion
public void setoutput printstream newoutput
output   newoutput
public printstream getoutput
return output
public void seterror printstream newerror
error   newerror
public printstream geterror
return error
public void setcurrentdirectory string newcurrentdirectory
currentdirectory   newcurrentdirectory
public string getcurrentdirectory
return currentdirectory
public void setprofile profile newprofile
profile   newprofile
public profile getprofile
return profile
public void setobjectspaceenabled boolean newobjectspaceenabled
objectspaceenabled   newobjectspaceenabled
public boolean isobjectspaceenabled
return objectspaceenabled
public void setenvironment map newenvironment
environment   newenvironment
public map getenvironment
return environment
public classloader getloader
return loader
public void setloader classloader loader
// setting the loader needs to reset the class cache
if this loader    loader
this classcache   new classcache<script> loader  this classcache getmax
this loader   loader
public string getargv
return argv
public void setargv string argv
this argv   argv
public string getjrubyhome
if  jrubyhome    null
if  ruby issecurityrestricted
return
jrubyhome   verifyhome safepropertyaccessor getproperty
safepropertyaccessor getproperty
try
// this comment also in rbconfiglibrary
// our shell scripts pass in non-canonicalized paths, but even if we didn't
// anyone who did would become unhappy because ruby apps expect no relative
// operators in the pathname (rubygems, for example).
jrubyhome   new normalizedfile jrubyhome  getcanonicalpath
catch  ioexception e
jrubyhome   new normalizedfile jrubyhome  getabsolutepath
return jrubyhome
public void setjrubyhome string home
jrubyhome   verifyhome home
// we require the home directory to be absolute
private string verifyhome string home
if  home equals
home   system getproperty
if   home startswith
normalizedfile f   new normalizedfile home
if   f isabsolute
home   f getabsolutepath
f mkdirs
return home
private class argumentprocessor
private string arguments
private int argumentindex   0
public argumentprocessor string arguments
this arguments   arguments
public void processarguments
while  argumentindex < arguments length    isinterpreterargument arguments
processargument
argumentindex
if   hasinlinescript    scriptfilename    null
if  argumentindex < arguments length
setscriptfilename arguments     consume the file name
argumentindex
processargv
private void processargv
list<string> arglist   new arraylist<string>
for    argumentindex < arguments length  argumentindex
string arg   arguments
if  argvglobalson    arg startswith
arg   arg substring 1
if  arg indexof    > 0
string keyvalue   arg split    2
optionglobals put keyvalue  keyvalue
else
optionglobals put arg  null
else
argvglobalson   false
arglist add arg
// remaining arguments are for the script itself
argv   arglist toarray new string
private boolean isinterpreterargument string argument
return  argument charat 0          argument charat 0            endofarguments
private string getargumenterror string additionalerror
return     additionalerror
private void processargument
string argument   arguments
for   for  characterindex   1  characterindex < argument length    characterindex
switch  argument charat characterindex
case
string temp   graboptionalvalue
if  null    temp
recordseparator
else if  temp equals
recordseparator
else if  temp equals
recordseparator         specify something that can't separate
else
try
int val   integer parseint temp  8
recordseparator        char  val
catch  exception e
mainexitexception mee   new mainexitexception 1  getargumenterror
mee setusageerror true
throw mee
break for
case
split   true
break
case
benchmarking   true
break
case
shouldchecksyntax   true
break
case
try
string saved   grabvalue getargumenterror
file base   new file currentdirectory
file newdir   new file saved
if  newdir isabsolute
currentdirectory   newdir getcanonicalpath
else
currentdirectory   new file base  newdir getpath    getcanonicalpath
if    new file currentdirectory  isdirectory
mainexitexception mee   new mainexitexception 1      saved
mee setusageerror true
throw mee
catch  ioexception e
mainexitexception mee   new mainexitexception 1  getargumenterror
mee setusageerror true
throw mee
break
case
debug   true
verbose   boolean true
break
case
inlinescript append grabvalue getargumenterror
inlinescript append
hasinlinescript   true
break for
case
inputfieldseparator   grabvalue getargumenterror
break
case
shouldprintusage   true
shouldruninterpreter   false
break
// fixme: -i flag not supported
//                    case 'i' :
//                        break;
case
string s   grabvalue getargumenterror
string ls   s split java io file pathseparator
for  int i   0  i < ls length  i
loadpaths add ls
break for
case
// fixme: no argument seems to work for -k in mri plus this should not
// siphon off additional args 'jruby -k ~/scripts/foo'.  also better error
// processing.
string earg   grabvalue getargumenterror
kcode   kcode create null  earg
break
case
processlineends   true
break
case
assumeloop   true
break
case
assumeprinting   true
assumeloop   true
break
case
requiredlibraries add grabvalue getargumenterror
break for
case
argvglobalson   true
break
case
runbinscript
break for
case
string temp   graboptionalvalue
int value   1
if temp  null
try
value   integer parseint temp  8
catch exception e
value   1
safelevel   value
break for
case
verbose   boolean true
setshowversion true
break
case
verbose   boolean true
break
case
string temp   graboptionalvalue
int value   2
if  null    temp
if  temp equals
value   2
else if  temp equals
value   1
else if  temp equals
value   0
else
mainexitexception mee   new mainexitexception 1  getargumenterror
mee setusageerror true
throw mee
switch  value
case 0
verbose   null
break
case 1
verbose   boolean false
break
case 2
verbose   boolean true
break
break for
// fixme: -x flag not supported
//                    case 'x' :
//                        break;
case
string extendedoption   grabvalue     getextendedhelp
if  extendedoption equals
objectspaceenabled   false
else if  extendedoption equals
objectspaceenabled   true
else if  extendedoption equals
compilemode   compilemode off
else if  extendedoption equals
compilemode   compilemode force
else if  extendedoption equals
yarv   true
else if  extendedoption equals
yarvcompile   true
else if  extendedoption equals
rubinius   true
else
mainexitexception mee
new mainexitexception 1      extendedoption
mee setusageerror true
throw mee
break for
case
if  argument equals       argument equals
characterindex   argument length
runbinscript
break
else if  argument equals
characterindex   argument length
compatversion   compatversion getversionfromstring grabvalue getargumenterror
if  compatversion    null
compatversion   compatversion ruby1_8
break for
else if  argument equals
setshowcopyright true
shouldruninterpreter   false
break for
else if  argument equals
debug   true
verbose   boolean true
break
else if  argument equals
shouldprintusage   true
shouldruninterpreter   false
break
else if  argument equals
shouldprintproperties   true
shouldruninterpreter   false
break
else if  argument equals
setshowversion true
break for
else
if  argument equals
// ruby interpreter compatibilty
// usage: ruby [switches] [--] [programfile] [arguments])
endofarguments   true
break
default
throw new mainexitexception 1      argument
private void runbinscript
string scriptname   grabvalue
if  scriptname equals
scriptname
try
string jrubyhome   jrubyfile create system getproperty     jrubyfile getfileproperty     getcanonicalpath
scriptfilename   jrubyfile create jrubyhome   jrubyfile separator      scriptname  getcanonicalpath
catch  ioexception io
mainexitexception mee   new mainexitexception 1
mee setusageerror true
throw mee
// route 'gem' through ruby code in case we're running out of the complete jar
if  scriptname equals        new file scriptfilename  exists
requiredlibraries add
inlinescript append     scriptname
inlinescript append
hasinlinescript   true
endofarguments   true
private string grabvalue string errormessage
characterindex
if  characterindex < arguments length
return arguments substring characterindex
argumentindex
if  argumentindex < arguments length
return arguments
mainexitexception mee   new mainexitexception 1  errormessage
mee setusageerror true
throw mee
private string graboptionalvalue
characterindex
if  characterindex < arguments length
return arguments substring characterindex
return null
public byte inlinescript
try
return inlinescript tostring   getbytes
catch  unsupportedencodingexception e
return inlinescript tostring   getbytes
public list<string> requiredlibraries
return requiredlibraries
public list<string> loadpaths
return loadpaths
public boolean shouldruninterpreter
if isshowversion       hasinlinescript    scriptfilename    null
return true
return isshouldruninterpreter
public boolean shouldprintusage
return shouldprintusage
public boolean shouldprintproperties
return shouldprintproperties
private boolean issourcefromstdin
return getscriptfilename      null
public boolean isinlinescript
return hasinlinescript
public inputstream getscriptsource
try
// kcode.none is used because kcode does not affect parse in ruby 1.8
// if ruby 2.0 encoding pragmas are implemented, this will need to change
if  hasinlinescript
return new bytearrayinputstream inlinescript
else if  issourcefromstdin
// can't use -v and stdin
if  isshowversion
return null
return getinput
else
file file   jrubyfile create getcurrentdirectory    getscriptfilename
return new bufferedinputstream new fileinputstream file
catch  ioexception e
throw new mainexitexception 1      e getmessage
public string displayedfilename
if  hasinlinescript
if  scriptfilename    null
return scriptfilename
else
return
else if  issourcefromstdin
return
else
return getscriptfilename
private void setscriptfilename string scriptfilename
this scriptfilename   scriptfilename
public string getscriptfilename
return scriptfilename
public boolean isbenchmarking
return benchmarking
public boolean isassumeloop
return assumeloop
public boolean isassumeprinting
return assumeprinting
public boolean isprocesslineends
return processlineends
public boolean issplit
return split
public boolean isverbose
return verbose    boolean true
public boolean getverbose
return verbose
public boolean isdebug
return debug
public boolean isshowversion
return showversion
public boolean isshowcopyright
return showcopyright
protected void setshowversion boolean showversion
this showversion   showversion
protected void setshowcopyright boolean showcopyright
this showcopyright   showcopyright
public boolean isshouldruninterpreter
return shouldruninterpreter
public boolean isshouldchecksyntax
return shouldchecksyntax
public boolean isyarvenabled
return yarv
public string getinputfieldseparator
return inputfieldseparator
public boolean isrubiniusenabled
return rubinius
public boolean isyarvcompileenabled
return yarvcompile
public kcode getkcode
return kcode
public string getrecordseparator
return recordseparator
public int getsafelevel
return safelevel
public void setrecordseparator string recordseparator
this recordseparator   recordseparator
public classcache getclasscache
return classcache
public void setclasscache classcache classcache
this classcache   classcache
public map getoptionglobals
return optionglobals