/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2006 michael studman <me@michaelstudman.com>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby
import org jruby anno jrubymethod
import org jruby runtime arity
import org jruby runtime block
import org jruby runtime blockcallback
import org jruby runtime objectallocator
import org jruby runtime threadcontext
import org jruby runtime visibility
import org jruby runtime builtin irubyobject
/**
* implementation of ruby's enumerator module.
*/
public class rubyenumerator extends rubyobject
/** target for each operation */
private irubyobject object
/** method to invoke for each operation */
private irubyobject method
/** args to each method */
private irubyobject methodargs
private static objectallocator enumerator_allocator   new objectallocator
public irubyobject allocate ruby runtime  rubyclass klass
return new rubyenumerator runtime  klass
public static void defineenumerator ruby runtime
rubymodule kernel   runtime getkernel
kernel defineannotatedmethod rubyenumerator class
rubymodule enm   runtime getclassfrompath
enm defineannotatedmethod rubyenumerator class
enm defineannotatedmethod rubyenumerator class
enm defineannotatedmethod rubyenumerator class
enm defineannotatedmethod rubyenumerator class
enm defineannotatedmethod rubyenumerator class
rubyclass enmr   enm defineclassunder    runtime getobject    enumerator_allocator
enmr includemodule enm
enmr defineannotatedmethod rubyenumerator class
enmr defineannotatedmethod rubyenumerator class
@jrubymethod name           optional   1  rest   true  frame   true
public static irubyobject obj_to_enum threadcontext context  irubyobject self  irubyobject args  block block
irubyobject newargs   new irubyobject
newargs   self
system arraycopy args  0  newargs  1  args length
return self getruntime   getenumerable   fastgetconstant    callmethod context     newargs
private rubyenumerator ruby runtime  rubyclass type
super runtime  type
object   method   runtime getnil
@jrubymethod name      required   1  rest   true  visibility   visibility private
public irubyobject initialize irubyobject args
object   args
method   args length > 1 ? args   getruntime   fastnewsymbol
if  args length > 2
methodargs   new irubyobject
system arraycopy args  2  methodargs  0  args length   2
else
methodargs   new irubyobject
return this
/**
* send current block and supplied args to method on target. according to mri
* block may not be given and "each" should just ignore it and call on through to
* underlying method.
*/
@jrubymethod name      frame   true
public irubyobject each threadcontext context  block block
return object callmethod context  method asjavastring    methodargs  block
@jrubymethod name
public static irubyobject each_with_index threadcontext context  irubyobject self
return self getruntime   getenumerable   fastgetconstant    callmethod context
new irubyobject   self  self getruntime   fastnewsymbol
@jrubymethod name      required   1  frame   true
public static irubyobject each_slice threadcontext context  irubyobject self  irubyobject arg  final block block
final int size    int rubynumeric num2long arg
if  size <  0  throw self getruntime   newargumenterror
final ruby runtime   self getruntime
final rubyarray result   new rubyarray runtime newarray size
rubyenumerable calleach runtime  context  self  new blockcallback
public irubyobject call threadcontext ctx  irubyobject largs  block blk
result append largs
if  result size      size
block yield ctx  result
result   runtime newarray size
return runtime getnil
if  result size   > 0  block yield context  result
return self getruntime   getnil
@jrubymethod name      required   1  frame   true
public static irubyobject each_cons threadcontext context  irubyobject self  irubyobject arg  final block block
final int size    int rubynumeric num2long arg
if  size <  0  throw self getruntime   newargumenterror
final ruby runtime   self getruntime
final rubyarray result   runtime newarray size
rubyenumerable calleach runtime  context  self  new blockcallback
public irubyobject call threadcontext ctx  irubyobject largs  block blk
if  result size      size  result shift
result append largs
if  result size      size  block yield ctx  result arydup
return runtime getnil
return runtime getnil
@jrubymethod name      required   1
public static irubyobject enum_slice threadcontext context  irubyobject self  irubyobject arg
return self getruntime   getenumerable   fastgetconstant    callmethod context
new irubyobject   self  self getruntime   fastnewsymbol     arg
@jrubymethod name      required   1
public static irubyobject enum_cons threadcontext context  irubyobject self  irubyobject arg
return self getruntime   getenumerable   fastgetconstant    callmethod context
new irubyobject   self  self getruntime   fastnewsymbol     arg