/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2001 chad fowler <chadfowler@chadfowler.com>
* copyright (c) 2001 alan moore <alan_moore@gmx.net>
* copyright (c) 2001-2002 benoit cerrina <b.cerrina@wanadoo.fr>
* copyright (c) 2001-2004 jan arne petersen <jpetersen@uni-bonn.de>
* copyright (c) 2002-2004 anders bengtsson <ndrsbngtssn@yahoo.se>
* copyright (c) 2004-2006 thomas e enebo <enebo@acm.org>
* copyright (c) 2004 stefan matthias aust <sma@3plus4.de>
* copyright (c) 2005 charles o nutter <headius@headius.com>
* copyright (c) 2006 ola bini <ola.bini@ki.se>
* copyright (c) 2006 tim azzopardi <tim@tigerfive.com>
* copyright (c) 2006 miguel covarrubias <mlcovarrubias@gmail.com>
* copyright (c) 2007 mentalguy <mental@rydia.net>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby
import java io ioexception
import java util abstractcollection
import java util abstractset
import java util collection
import java util iterator
import java util map
import java util nosuchelementexception
import java util set
import org jruby anno jrubymethod
import org jruby anno rdoc
import org jruby common irubywarnings id
import org jruby javasupport javautil
import org jruby runtime arity
import org jruby runtime block
import org jruby runtime callbackfactory
import org jruby runtime classindex
import org jruby runtime methodindex
import org jruby runtime objectallocator
import org jruby runtime threadcontext
import org jruby runtime visibility
import org jruby runtime builtin irubyobject
import org jruby runtime marshal marshalstream
import org jruby runtime marshal unmarshalstream
// design overview:
//
// rubyhash is implemented as hash table with a singly-linked list of
// rubyhash.rubyhashentry objects for each bucket.  rubyhashentry objects
// are also kept in a doubly-linked list which reflects their insertion
// order and is used for iteration.  for simplicity, this latter list is
// circular; a dummy rubyhashentry, rubyhash.head, is used to mark the
// ends of the list.
//
// when an entry is removed from the table, it is also removed from the
// doubly-linked list.  however, while the reference to the previous
// rubyhashentry is cleared (to mark the entry as dead), the reference
// to the next rubyhashentry is preserved so that iterators are not
// invalidated: any iterator with a reference to a dead entry can climb
// back up into the list of live entries by chasing next references until
// it finds a live entry (or head).
//
// ordinarily, this scheme would require o(n) time to clear a hash (since
// each rubyhashentry would need to be visited and unlinked from the
// iteration list), but rubyhash also maintains a generation count.  every
// time the hash is cleared, the doubly-linked list is simply discarded and
// the generation count incremented.  iterators check to see whether the
// generation count has changed; if it has, they reset themselves back to
// the new start of the list.
//
// this design means that iterators are never invalidated by changes to the
// hashtable, and they do not need to modify the structure during their
// lifecycle.
//
/** implementation of the hash class.
*
*  concurrency: no synchronization is required among readers, but
*  all users must synchronize externally with writers.
*
*/
@rdoc doc
some string
some string
name
public class rubyhash extends rubyobject implements map
public static rubyclass createhashclass ruby runtime
rubyclass hashc   runtime defineclass    runtime getobject    hash_allocator
runtime sethash hashc
hashc index   classindex hash
hashc kindof   new rubymodule kindof
public boolean iskindof irubyobject obj  rubymodule type
return obj instanceof rubyhash
callbackfactory callbackfactory   runtime callbackfactory rubyhash class
hashc includemodule runtime getenumerable
hashc defineannotatedmethods rubyhash class
hashc dispatcher   callbackfactory createdispatcher hashc
return hashc
private final static objectallocator hash_allocator   new objectallocator
public irubyobject allocate ruby runtime  rubyclass klass
return new rubyhash runtime  klass
public int getnativetypeindex
return classindex hash
/** rb_hash_s_create
*
*/
@jrubymethod name      rest   true  frame   true  meta   true
public static irubyobject create threadcontext context  irubyobject recv  irubyobject args  block block
rubyclass klass    rubyclass  recv
rubyhash hash
if  args length    1    args instanceof rubyhash
rubyhash otherhash    rubyhash args
return new rubyhash recv getruntime    klass  otherhash
if   args length   1     0  throw recv getruntime   newargumenterror
hash    rubyhash klass allocate
for  int i 0  i < args length  i  2  hash op_aset context  args  args
return hash
/** rb_hash_new
*
*/
public static final rubyhash newhash ruby runtime
return new rubyhash runtime
/** rb_hash_new
*
*/
public static final rubyhash newhash ruby runtime  map valuemap  irubyobject defaultvalue
assert defaultvalue    null
return new rubyhash runtime  valuemap  defaultvalue
private rubyhashentry table
private int size   0
private int threshold
private static final int procdefault_hash_f   1 << 10
private irubyobject ifnone
private rubyhash ruby runtime  rubyclass klass  rubyhash other
super runtime  klass
this ifnone   runtime getnil
threshold   initial_threshold
table   other internalcopytable head
size   other size
public rubyhash ruby runtime  rubyclass klass
super runtime  klass
this ifnone   runtime getnil
alloc
public rubyhash ruby runtime
this runtime  runtime getnil
public rubyhash ruby runtime  irubyobject defaultvalue
super runtime  runtime gethash
this ifnone   defaultvalue
alloc
/*
*  constructor for internal usage (mainly for array#|, array#&, array#- and array#uniq)
*  it doesn't initialize ifnone field
*/
rubyhash ruby runtime  boolean objectspace
super runtime  runtime gethash    objectspace
alloc
// todo should this be deprecated ? (to be efficient, internals should deal with rubyhash directly)
public rubyhash ruby runtime  map valuemap  irubyobject defaultvalue
super runtime  runtime gethash
this ifnone   defaultvalue
alloc
for  iterator iter   valuemap entryset   iterator   iter hasnext
map entry e    map entry iter next
internalput  irubyobject e getkey     irubyobject e getvalue
private final void alloc
threshold   initial_threshold
generation
head nextadded   head prevadded   head
table   new rubyhashentry
/* ============================
* here are hash internals
* (this could be extracted to a separate class but it's not too large though)
* ============================
*/
private static final int mri_primes
8   3  16   3  32   5  64   3  128   3  256   27  512   9  1024   9  2048   5  4096   3
8192   27  16384   43  32768   3  65536   45  131072   29  262144   3  524288   21  1048576   7
2097152   17  4194304   15  8388608   9  16777216   43  33554432   35  67108864   15
134217728   29  268435456   3  536870912   11  1073741824   85  0
private static final int javasoft_initial_capacity   8     16 ?
private static final int mri_initial_capacity   mri_primes
private static final int initial_threshold   javasoft_initial_capacity    javasoft_initial_capacity >> 2
private static final int maximum_capacity   1 << 30
private static final rubyhashentry no_entry   new rubyhashentry
private int generation   0     generation count for o 1  clears
private final rubyhashentry head   new rubyhashentry
head prevadded   head nextadded   head
static final class rubyhashentry implements map entry
private irubyobject key
private irubyobject value
private rubyhashentry next
private rubyhashentry prevadded
private rubyhashentry nextadded
private int hash
rubyhashentry
key   never
rubyhashentry int h  irubyobject k  irubyobject v  rubyhashentry e  rubyhashentry head
key   k  value   v  next   e  hash   h
prevadded   head prevadded
nextadded   head
nextadded prevadded   this
prevadded nextadded   this
public void detach
if  prevadded    null
prevadded nextadded   nextadded
nextadded prevadded   prevadded
prevadded   null
public boolean islive
return prevadded    null
public object getkey
return key
public object getjavaifiedkey
return javautil convertrubytojava key
public object getvalue
return value
public object getjavaifiedvalue
return javautil convertrubytojava value
public object setvalue object value
irubyobject oldvalue   this value
if  value instanceof irubyobject
this value    irubyobject value
else
throw new unsupportedoperationexception
return oldvalue
public boolean equals object other
if   other instanceof rubyhashentry   return false
rubyhashentry otherentry    rubyhashentry other
if key    otherentry key    key eql otherentry key
if value    otherentry value    value equals otherentry value   return true
return false
public int hashcode
return key hashcode   ^ value hashcode
private static int javasofthashvalue int h
h ^   h >>> 20  ^  h >>> 12
return h ^  h >>> 7  ^  h >>> 4
private static int javasoftbucketindex final int h  final int length
return h    length   1
private static int mrihashvalue int h
return h   hash_sign_bit_mask
private static final int hash_sign_bit_mask   ~ 1 << 31
private static int mribucketindex final int h  final int length
return  h % length
private final void resize int newcapacity
final rubyhashentry oldtable   table
final rubyhashentry newtable   new rubyhashentry
for  int j   0  j < oldtable length  j
rubyhashentry entry   oldtable
oldtable   null
while  entry    null
rubyhashentry next   entry next
int i   bucketindex entry hash  newcapacity
entry next   newtable
newtable   entry
entry   next
table   newtable
private final void javasoftcheckresize
if  size > threshold
int oldcapacity   table length
if  oldcapacity    maximum_capacity
threshold   integer max_value
return
int newcapacity   table length << 1
resize newcapacity
threshold   newcapacity    newcapacity >> 2
private static final int min_capa   8
private static final int st_default_max_density   5
private final void mricheckresize
if  size   table length > st_default_max_density
int forsize   table length   1     size   1
for  int i 0  newcapacity   min_capa  i < mri_primes length  i    newcapacity <<  1
if  newcapacity > forsize
resize mri_primes
return
return     suboptimal for large hashes  > 1073741824   85 entries  not very likely to happen
// ------------------------------
private static boolean mri_hash   true
private static boolean mri_hash_resize   true
private static int hashvalue final int h
return mri_hash ? mrihashvalue h    javasofthashvalue h
private static int bucketindex final int h  final int length
return mri_hash ? mribucketindex h  length    javasoftbucketindex h  length
private void checkresize
if  mri_hash_resize  mricheckresize    else javasoftcheckresize
// ------------------------------
public static long collisions   0
// put implementation
private final void internalput final irubyobject key  final irubyobject value
internalput key  value  true
private final void internalput final irubyobject key  final irubyobject value  final boolean checkforexisting
checkresize
final int hash   hashvalue key hashcode
final int i   bucketindex hash  table length
// if (table[i] != null) collisions++;
if  checkforexisting
for  rubyhashentry entry   table  entry    null  entry   entry next
irubyobject k
if  entry hash    hash      k   entry key     key    key eql k
entry value   value
return
table   new rubyhashentry hash  key  value  table  head
size
// get implementation
private final irubyobject internalget irubyobject key       specialized for value
return internalgetentry key  value
private final rubyhashentry internalgetentry irubyobject key
final int hash   hashvalue key hashcode
for  rubyhashentry entry   table  entry    null  entry   entry next
irubyobject k
if  entry hash    hash      k   entry key     key    key eql k    return entry
return no_entry
// delete implementation
private final rubyhashentry internaldelete final irubyobject key
return internaldelete hashvalue key hashcode     match_key  key
private final rubyhashentry internaldeleteentry final rubyhashentry entry
// n.b. we need to recompute the hash in case the key object was modified
return internaldelete hashvalue entry key hashcode     match_entry  entry
private final rubyhashentry internaldelete final int hash  final entrymatchtype matchtype  final object obj
final int i   bucketindex hash  table length
rubyhashentry entry   table
if  entry    null
rubyhashentry prior   null
for    entry    null  prior   entry  entry   entry next
if  entry hash    hash    matchtype matches entry  obj
if  prior    null
prior next   entry next
else
table   entry next
entry detach
size
return entry
return no_entry
private static abstract class entrymatchtype
public abstract boolean matches final rubyhashentry entry  final object obj
private static final entrymatchtype match_key   new entrymatchtype
public boolean matches final rubyhashentry entry  final object obj
final irubyobject key   entry key
return obj    key       irubyobject obj  eql key
private static final entrymatchtype match_entry   new entrymatchtype
public boolean matches final rubyhashentry entry  final object obj
return entry equals obj
private final rubyhashentry internalcopytable rubyhashentry desthead
rubyhashentrynewtable   new rubyhashentry
for  rubyhashentry entry   head nextadded  entry    head  entry   entry nextadded
int i   bucketindex entry hash  table length
newtable   new rubyhashentry entry hash  entry key  entry value  newtable  desthead
return newtable
public static abstract class visitor
public abstract void visit irubyobject key  irubyobject value
public void visitall visitor visitor
int startgeneration   generation
for  rubyhashentry entry   head nextadded  entry    head  entry   entry nextadded
if  startgeneration    generation
startgeneration   generation
entry   head nextadded
if  entry    head  break
if  entry islive    visitor visit entry key  entry value
/* ============================
* end of hash internals
* ============================
*/
/*  ================
*  instance methods
*  ================
*/
/** rb_hash_initialize
*
*/
@jrubymethod name      optional   1  frame   true  visibility   visibility private
public irubyobject initialize irubyobject args  final block block
modify
if  block isgiven
if  args length > 0  throw getruntime   newargumenterror
ifnone   getruntime   newproc block type proc  block
flags    procdefault_hash_f
else
arity checkargumentcount getruntime    args  0  1
if  args length    1  ifnone   args
return this
/** rb_hash_default
*
*/
@jrubymethod name      optional   1  frame   true
public irubyobject default_value_get threadcontext context  irubyobject args
if   flags   procdefault_hash_f     0
if  args length    0  return getruntime   getnil
return ifnone callmethod context     new irubyobject this  args
return ifnone
/** rb_hash_set_default
*
*/
@jrubymethod name      required   1
public irubyobject default_value_set final irubyobject defaultvalue
modify
ifnone   defaultvalue
flags    ~procdefault_hash_f
return ifnone
/** rb_hash_default_proc
*
*/
@jrubymethod name      frame   true
public irubyobject default_proc
return  flags   procdefault_hash_f     0 ? ifnone   getruntime   getnil
/** rb_hash_modify
*
*/
public void modify
testfrozen
if  istaint      getruntime   getsafelevel   >  4
throw getruntime   newsecurityerror
/** inspect_hash
*
*/
public irubyobject inspecthash final threadcontext context
ruby runtime   getruntime
final stringbuffer sb   new stringbuffer
final boolean firstentry   new boolean
firstentry   true
visitall new visitor
public void visit irubyobject key  irubyobject value
if   firstentry  sb append
sb append key callmethod context      append
sb append value callmethod context
firstentry   false
sb append
return runtime newstring sb tostring
/** rb_hash_inspect
*
*/
@jrubymethod name
public irubyobject inspect threadcontext context
if  size    0  return getruntime   newstring
if  getruntime   isinspecting this   return getruntime   newstring
try
getruntime   registerinspecting this
return inspecthash context
finally   getruntime   unregisterinspecting this
/** rb_hash_size
*
*/
@jrubymethod name
public rubyfixnum rb_size
return getruntime   newfixnum size
/** rb_hash_empty_p
*
*/
@jrubymethod name
public rubyboolean empty_p
return size    0 ? getruntime   gettrue     getruntime   getfalse
/** rb_hash_to_a
*
*/
@jrubymethod name
public rubyarray to_a
final ruby runtime   getruntime
final rubyarray result   rubyarray newarray runtime  size
visitall new visitor
public void visit irubyobject key  irubyobject value
result append rubyarray newarray runtime  key  value
result settaint istaint
return result
/** rb_hash_to_s & to_s_hash
*
*/
@jrubymethod name
public irubyobject to_s
if  getruntime   isinspecting this   return getruntime   newstring
try
getruntime   registerinspecting this
return to_a   to_s
finally
getruntime   unregisterinspecting this
/** rb_hash_rehash
*
*/
@jrubymethod name
public rubyhash rehash
modify
final rubyhashentry oldtable   table
final rubyhashentry newtable   new rubyhashentry
for  int j   0  j < oldtable length  j
rubyhashentry entry   oldtable
oldtable   null
while  entry    null
rubyhashentry next   entry next
entry hash   entry key hashcode       update the hash value
int i   bucketindex entry hash  newtable length
entry next   newtable
newtable   entry
entry   next
table   newtable
return this
/** rb_hash_to_hash
*
*/
@jrubymethod name
public rubyhash to_hash
return this
public rubyhash converttohash
return this
public final void fastaset irubyobject key  irubyobject value
internalput key  value
@deprecated
public irubyobject op_aset irubyobject key  irubyobject value
return op_aset getruntime   getcurrentcontext    key  value
/** rb_hash_aset
*
*/
@jrubymethod name           required   2
public irubyobject op_aset threadcontext context  irubyobject key  irubyobject value
modify
if    key instanceof rubystring
internalput key  value
else
final rubyhashentry entry   internalgetentry key
if  entry    no_entry
entry value   value
else
rubystring realkey    rubystring key
if   realkey isfrozen
realkey   realkey strdup realkey getmetaclass   getrealclass
realkey setfrozen true
internalput realkey  value  false
return value
/**
* note: this is included as a compatibility measure for ar-jdbc
* @deprecated use rubyhash.op_aset instead
*/
public irubyobject aset irubyobject key  irubyobject value
return op_aset getruntime   getcurrentcontext    key  value
/**
* note: this is included as a compatibility measure for mongrel+jruby
* @deprecated use rubyhash.op_aref instead
*/
public irubyobject aref irubyobject key
return op_aref getruntime   getcurrentcontext    key
public final irubyobject fastaref irubyobject key       retuns null when not found to avoid unnecessary getruntime   getnil   call
return internalget key
/** rb_hash_aref
*
*/
@jrubymethod name      required   1
public irubyobject op_aref threadcontext context  irubyobject key
irubyobject value
return   value   internalget key      null  ? callmethod context  methodindex default     key    value
/** rb_hash_fetch
*
*/
@jrubymethod name      required   1  optional   1  frame   true
public irubyobject fetch threadcontext context  irubyobject args  block block
if  args length    2    block isgiven
getruntime   getwarnings   warn id block_beats_default_value
irubyobject value
if   value   internalget args      null
if  block isgiven    return block yield context  args
if  args length    1  throw getruntime   newindexerror
return args
return value
/** rb_hash_has_key
*
*/
@jrubymethod name                 required   1
public rubyboolean has_key_p irubyobject key
return internalgetentry key     no_entry ? getruntime   getfalse     getruntime   gettrue
private class found extends runtimeexception
private boolean hasvalue final threadcontext context  final irubyobject expected
try
visitall new visitor
public void visit irubyobject key  irubyobject value
if  equalinternal context  value  expected  istrue
throw new found
return false
catch  found found
return true
/** rb_hash_has_value
*
*/
@jrubymethod name           required   1
public rubyboolean has_value_p threadcontext context  irubyobject expected
return getruntime   newboolean hasvalue context  expected
/** rb_hash_each
*
*/
@jrubymethod name      frame   true
public rubyhash each final threadcontext context  final block block
final ruby runtime   getruntime
visitall new visitor
public void visit irubyobject key  irubyobject value
// rb_assoc_new equivalent
block yield context  rubyarray newarray runtime  key  value   null  null  false
return this
/** rb_hash_each_pair
*
*/
@jrubymethod name      frame   true
public rubyhash each_pair final threadcontext context  final block block
final ruby runtime   getruntime
visitall new visitor
public void visit irubyobject key  irubyobject value
// rb_yield_values(2,...) equivalent
block yield context  rubyarray newarray runtime  key  value   null  null  true
return this
/** rb_hash_each_value
*
*/
@jrubymethod name      frame   true
public rubyhash each_value final threadcontext context  final block block
visitall new visitor
public void visit irubyobject key  irubyobject value
block yield context  value
return this
/** rb_hash_each_key
*
*/
@jrubymethod name      frame   true
public rubyhash each_key final threadcontext context  final block block
visitall new visitor
public void visit irubyobject key  irubyobject value
block yield context  key
return this
/** rb_hash_sort
*
*/
@jrubymethod name      frame   true
public rubyarray sort block block
return to_a   sort_bang block
private static class foundkey extends runtimeexception
public irubyobject key
foundkey irubyobject key
super
this key   key
/** rb_hash_index
*
*/
@jrubymethod name      required   1
public irubyobject index threadcontext context  irubyobject expected
irubyobject key   internalindex context  expected
if  key    null
return key
else
return getruntime   getnil
private irubyobject internalindex final threadcontext context  final irubyobject expected
try
visitall new visitor
public void visit irubyobject key  irubyobject value
if  equalinternal context  value  expected  istrue
throw new foundkey key
return null
catch  foundkey found
return found key
/** rb_hash_indexes
*
*/
@jrubymethod name           rest   true
public rubyarray indices threadcontext context  irubyobject indices
return values_at context  indices
/** rb_hash_keys
*
*/
@jrubymethod name
public rubyarray keys
final ruby runtime   getruntime
final rubyarray keys   rubyarray newarray runtime  size
visitall new visitor
public void visit irubyobject key  irubyobject value
keys append key
return keys
/** rb_hash_values
*
*/
@jrubymethod name
@rdoc callseq
doc
a  b  c
public rubyarray rb_values
final rubyarray values   rubyarray newarray getruntime    size
visitall new visitor
public void visit irubyobject key  irubyobject value
values append value
return values
/** rb_hash_equal
*
*/
private static final boolean equal_check_default_value   false
private static class mismatch extends runtimeexception
@override
@jrubymethod name      required   1
public irubyobject op_equal final threadcontext context  final irubyobject other
if  this    other  return getruntime   gettrue
if    other instanceof rubyhash
if   other respondsto     return getruntime   getfalse
return equalinternal context  other  this
final rubyhash otherhash    rubyhash other
if  size    otherhash size  return getruntime   getfalse
final ruby runtime   getruntime
if  equal_check_default_value
if   equalinternal context  ifnone  otherhash ifnone  istrue
flags   procdefault_hash_f      otherhash flags   procdefault_hash_f   return runtime getfalse
try
visitall new visitor
public void visit irubyobject key  irubyobject value
irubyobject othervalue   otherhash internalget key
if  othervalue    null     equalinternal context  value  othervalue  istrue    throw new mismatch
return runtime gettrue
catch  mismatch e
return runtime getfalse
/** rb_hash_shift
*
*/
@jrubymethod name
public irubyobject shift threadcontext context
modify
rubyhashentry entry   head nextadded
if  entry    head
rubyarray result   rubyarray newarray getruntime    entry key  entry value
internaldeleteentry entry
return result
if   flags   procdefault_hash_f     0
return ifnone callmethod context     new irubyobject this  getruntime   getnil
else
return ifnone
public final boolean fastdelete irubyobject key
return internaldelete key     no_entry
/** rb_hash_delete
*
*/
@jrubymethod name      required   1  frame   true
public irubyobject delete threadcontext context  irubyobject key  block block
modify
final rubyhashentry entry   internaldelete key
if  entry    no_entry  return entry value
if  block isgiven    return block yield context  key
return getruntime   getnil
/** rb_hash_select
*
*/
@jrubymethod name      frame   true
public irubyobject select final threadcontext context  final block block
final rubyarray result   getruntime   newarray
final ruby runtime   getruntime
visitall new visitor
public void visit irubyobject key  irubyobject value
if  block yield context  runtime newarray key  value   null  null  true  istrue
result append runtime newarray key  value
return result
/** rb_hash_delete_if
*
*/
@jrubymethod name      frame   true
public rubyhash delete_if final threadcontext context  final block block
modify
final ruby runtime   getruntime
final rubyhash self   this
visitall new visitor
public void visit irubyobject key  irubyobject value
if  block yield context  rubyarray newarray runtime  key  value   null  null  true  istrue
self delete context  key  block
return this
/** rb_hash_reject
*
*/
@jrubymethod name      frame   true
public rubyhash reject threadcontext context  block block
return   rubyhash dup    delete_if context  block
/** rb_hash_reject_bang
*
*/
@jrubymethod name      frame   true
public irubyobject reject_bang threadcontext context  block block
int n   size
delete_if context  block
if  n    size  return getruntime   getnil
return this
/** rb_hash_clear
*
*/
@jrubymethod name
public rubyhash rb_clear
modify
if  size > 0
alloc
size   0
return this
/** rb_hash_invert
*
*/
@jrubymethod name
public rubyhash invert final threadcontext context
final rubyhash result   newhash getruntime
visitall new visitor
public void visit irubyobject key  irubyobject value
result op_aset context  value  key
return result
/** rb_hash_update
*
*/
@jrubymethod name           required   1  frame   true
public rubyhash merge_bang final threadcontext context  final irubyobject other  final block block
modify
final ruby runtime   getruntime
final rubyhash otherhash   other converttohash
final rubyhash self   this
otherhash visitall new visitor
public void visit irubyobject key  irubyobject value
if  block isgiven
irubyobject existing   self internalget key
if  existing    null
value   block yield context  rubyarray newarraynocopy runtime  new irubyobject key  existing  value
self op_aset context  key  value
return this
/** rb_hash_merge
*
*/
@jrubymethod name      required   1  frame   true
public rubyhash merge threadcontext context  irubyobject other  block block
return   rubyhash dup    merge_bang context  other  block
/** rb_hash_replace
*
*/
@jrubymethod name      required   1  visibility   visibility private
public rubyhash initialize_copy threadcontext context  irubyobject other
return replace context  other
/** rb_hash_replace
*
*/
@jrubymethod name      required   1
public rubyhash replace final threadcontext context  irubyobject other
final rubyhash otherhash   other converttohash
if  this    otherhash  return this
rb_clear
final rubyhash self   this
otherhash visitall new visitor
public void visit irubyobject key  irubyobject value
self op_aset context  key  value
ifnone   otherhash ifnone
if   otherhash flags   procdefault_hash_f     0
flags    procdefault_hash_f
else
flags    ~procdefault_hash_f
return this
/** rb_hash_values_at
*
*/
@jrubymethod name      rest   true
public rubyarray values_at threadcontext context  irubyobject args
rubyarray result   rubyarray newarray getruntime    args length
for  int i   0  i < args length  i
result append op_aref context  args
return result
public boolean hasdefaultproc
return  flags   procdefault_hash_f     0
public irubyobject getifnone
return ifnone
private static class visitorioexception extends runtimeexception
visitorioexception throwable cause
super cause
// fixme:  total hack to get flash in rails marshalling/unmarshalling in session ok...we need
// to totally change marshalling to work with overridden core classes.
public static void marshalto final rubyhash hash  final marshalstream output  throws ioexception
output registerlinktarget hash
output writeint hash size
try
hash visitall new visitor
public void visit irubyobject key  irubyobject value
try
output dumpobject key
output dumpobject value
catch  ioexception e
throw new visitorioexception e
catch  visitorioexception e
throw  ioexception e getcause
if   hash ifnone isnil    output dumpobject hash ifnone
public static rubyhash unmarshalfrom unmarshalstream input  boolean defaultvalue  throws ioexception
rubyhash result   newhash input getruntime
input registerlinktarget result
int size   input unmarshalint
threadcontext context   input getruntime   getcurrentcontext
for  int i   0  i < size  i
result op_aset context  input unmarshalobject    input unmarshalobject
if  defaultvalue  result default_value_set input unmarshalobject
return result
public class getjavaclass
return map class
// satisfy java.util.set interface (for java integration)
public int size
return size
public boolean isempty
return size    0
public boolean containskey object key
return internalget javautil convertjavatoruby getruntime    key      null
public boolean containsvalue object value
return hasvalue getruntime   getcurrentcontext    javautil convertjavatoruby getruntime    value
public object get object key
return javautil convertrubytojava internalget javautil convertjavatoruby getruntime    key
public object put object key  object value
internalput javautil convertjavatoruby getruntime    key   javautil convertjavatoruby getruntime    value
return value
public object remove object key
irubyobject rubykey   javautil convertjavatoruby getruntime    key
return internaldelete rubykey  value
public void putall map map
ruby runtime   getruntime
for  iterator iter   map keyset   iterator    iter hasnext
object key   iter next
internalput javautil convertjavatoruby runtime  key   javautil convertjavatoruby runtime  map get key
public void clear
rb_clear
public boolean equals object other
if    other instanceof rubyhash   return false
if  this    other  return true
return op_equal getruntime   getcurrentcontext     rubyhash other  istrue   ? true   false
public set keyset
return new baseset key_view
public set directkeyset
return new baseset direct_key_view
public collection values
return new basecollection value_view
public collection directvalues
return new basecollection direct_value_view
public set entryset
return new baseset entry_view
public set directentryset
return new baseset direct_entry_view
private class baseset extends abstractset
final entryview view
public baseset entryview view
this view   view
public iterator iterator
return new baseiterator view
public boolean contains object o
return view contains rubyhash this  o
public void clear
rubyhash this clear
public int size
return rubyhash this size
public boolean remove object o
return view remove rubyhash this  o
private class basecollection extends abstractcollection
final entryview view
public basecollection entryview view
this view   view
public iterator iterator
return new baseiterator view
public boolean contains object o
return view contains rubyhash this  o
public void clear
rubyhash this clear
public int size
return rubyhash this size
public boolean remove object o
return view remove rubyhash this  o
private class baseiterator implements iterator
final private entryview view
private rubyhashentry entry
private boolean peeking
private int startgeneration
public baseiterator entryview view
this view   view
this entry   head
this startgeneration   generation
private void advance boolean consume
if   peeking
do
if  startgeneration    generation
startgeneration   generation
entry   head
entry   entry nextadded
while  entry    head     entry islive
peeking    consume
public object next
advance true
if  entry    head
peeking   true     remain where we are
throw new nosuchelementexception
return view convertentry getruntime    entry
// once hasnext has been called, we commit to next() returning
// the entry it found, even if it were subsequently deleted
public boolean hasnext
advance false
return entry    head
public void remove
if  entry    head
throw new illegalstateexception
internaldeleteentry entry
private static abstract class entryview
public abstract object convertentry ruby runtime  rubyhashentry value
public abstract boolean contains rubyhash hash  object o
public abstract boolean remove rubyhash hash  object o
private static final entryview direct_key_view   new entryview
public object convertentry ruby runtime  rubyhashentry entry
return entry key
public boolean contains rubyhash hash  object o
if    o instanceof irubyobject   return false
return hash internalget  irubyobject o     null
public boolean remove rubyhash hash  object o
if    o instanceof irubyobject   return false
return hash internaldelete  irubyobject o     no_entry
private static final entryview key_view   new entryview
public object convertentry ruby runtime  rubyhashentry entry
return javautil convertrubytojava entry key  object class
public boolean contains rubyhash hash  object o
return hash containskey o
public boolean remove rubyhash hash  object o
return hash remove o     null
private static final entryview direct_value_view   new entryview
public object convertentry ruby runtime  rubyhashentry entry
return entry value
public boolean contains rubyhash hash  object o
if    o instanceof irubyobject   return false
irubyobject obj    irubyobject o
return hash hasvalue obj getruntime   getcurrentcontext    obj
public boolean remove rubyhash hash  object o
if    o instanceof irubyobject   return false
irubyobject obj    irubyobject  o
irubyobject key   hash internalindex obj getruntime   getcurrentcontext    obj
if  key    null  return false
return hash internaldelete key     no_entry
private final entryview value_view   new entryview
public object convertentry ruby runtime  rubyhashentry entry
return javautil convertrubytojava entry value  object class
public boolean contains rubyhash hash  object o
return hash containsvalue o
public boolean remove rubyhash hash  object o
irubyobject value   javautil convertjavatoruby hash getruntime    o
irubyobject key   hash internalindex hash getruntime   getcurrentcontext    value
if  key    null  return false
return hash internaldelete key     no_entry
private final entryview direct_entry_view   new entryview
public object convertentry ruby runtime  rubyhashentry entry
return entry
public boolean contains rubyhash hash  object o
if    o instanceof rubyhashentry   return false
rubyhashentry entry    rubyhashentry o
rubyhashentry candidate   internalgetentry entry key
return candidate    no_entry    entry equals candidate
public boolean remove rubyhash hash  object o
if    o instanceof rubyhashentry   return false
return hash internaldeleteentry  rubyhashentry o     no_entry
private final entryview entry_view   new entryview
public object convertentry ruby runtime  rubyhashentry entry
return new convertingentry runtime  entry
public boolean contains rubyhash hash  object o
if    o instanceof convertingentry   return false
convertingentry entry    convertingentry o
rubyhashentry candidate   hash internalgetentry entry entry key
return candidate    no_entry    entry entry equals candidate
public boolean remove rubyhash hash  object o
if    o instanceof convertingentry   return false
convertingentry entry    convertingentry o
return hash internaldeleteentry entry entry     no_entry
private static class convertingentry implements map entry
private final rubyhashentry entry
private final ruby runtime
public convertingentry ruby runtime  rubyhashentry entry
this entry   entry
this runtime   runtime
public object getkey
return javautil convertrubytojava entry key  object class
public object getvalue
return javautil convertrubytojava entry value  object class
public object setvalue object o
return entry setvalue javautil convertjavatoruby runtime  o
public boolean equals object o
if    o instanceof convertingentry
return false
convertingentry other    convertingentry o
return entry equals other entry
public int hashcode
return entry hashcode