/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2002-2004 anders bengtsson <ndrsbngtssn@yahoo.se>
* copyright (c) 2002-2004 jan arne petersen <jpetersen@uni-bonn.de>
* copyright (c) 2004 thomas e enebo <enebo@acm.org>
* copyright (c) 2004 stefan matthias aust <sma@3plus4.de>
* copyright (c) 2005 charles o nutter <headius@headius.com>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby internal runtime
import java util concurrent concurrenthashmap
import java util map
import java util set
import org jruby ruby
import org jruby rubyproc
import org jruby common irubywarnings id
import org jruby exceptions raiseexception
import org jruby runtime iaccessor
import org jruby runtime builtin irubyobject
/**
*
* @author jpetersen
*/
public class globalvariables
private ruby runtime
private map<string  globalvariable> globalvariables   new concurrenthashmap<string  globalvariable>
public globalvariables ruby runtime
this runtime   runtime
public void define string name  iaccessor accessor
assert name    null
assert accessor    null
assert name startswith
globalvariables put name  new globalvariable accessor
public void definereadonly string name  iaccessor accessor
assert name    null
assert accessor    null
assert name startswith
globalvariables put name  new globalvariable new readonlyaccessor name  accessor
public boolean isdefined string name
assert name    null
assert name startswith
globalvariable variable    globalvariable globalvariables get name
return variable    null      variable getaccessor   instanceof undefinedaccessor
/** creates a new global variable which links to
* the oldname global variable.
*
* <b>wanring</b> we are already using the 1.7.1 behaviour.
*/
public void alias string name  string oldname
assert name    null
assert oldname    null
assert name startswith
assert oldname startswith
if  runtime getsafelevel   >  4
throw runtime newsecurityerror
globalvariable oldvariable   createifnotdefined oldname
globalvariable variable    globalvariable globalvariables get name
if  variable    null    oldvariable    variable    variable istracing
throw new raiseexception runtime  runtime fastgetclass        false
globalvariables put name  oldvariable
public irubyobject get string name
assert name    null
assert name startswith
globalvariable variable    globalvariable globalvariables get name
if  variable    null
return variable getaccessor   getvalue
runtime getwarnings   warning id global_not_initialized      name      name
return runtime getnil
public irubyobject set string name  irubyobject value
assert name    null
assert name startswith
if  runtime getsafelevel   >  4
throw runtime newsecurityerror
globalvariable variable   createifnotdefined name
irubyobject result   variable getaccessor   setvalue value
variable trace value
return result
public void settracevar string name  rubyproc proc
assert name    null
assert name startswith
globalvariable variable   createifnotdefined name
variable addtrace proc
public boolean untracevar string name  irubyobject command
assert name    null
assert name startswith
if  isdefined name
globalvariable variable    globalvariable globalvariables get name
return variable removetrace command
return false
public void untracevar string name
assert name    null
assert name startswith
if  isdefined name
globalvariable variable    globalvariable globalvariables get name
variable removetraces
public set<string> getnames
return globalvariables keyset
private globalvariable createifnotdefined string name
globalvariable variable    globalvariable globalvariables get name
if  variable    null
variable   globalvariable newundefined runtime  name
globalvariables put name  variable
return variable
private irubyobject defaultseparator
public irubyobject getdefaultseparator
return defaultseparator
public void setdefaultseparator irubyobject defaultseparator
this defaultseparator   defaultseparator