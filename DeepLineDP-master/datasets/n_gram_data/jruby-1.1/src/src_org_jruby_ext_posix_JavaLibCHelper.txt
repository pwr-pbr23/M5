/*
**** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2007
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby ext posix
import java io bytearrayoutputstream
import java io file
import java io filedescriptor
import java io ioexception
import java lang reflect field
import java nio bytebuffer
import org jruby ext posix posix errors
import org jruby ext posix util chmod
import org jruby ext posix util execit
import org jruby ext posix util fieldaccess
/**
* this libc implementation is created one per runtime instance versus the others which
* are expected to be one static instance for whole jvm.  because of this it is no big
* deal to make reference to a posixhandler directly.
*/
// fixme: we ignore all exceptions with shell launcher...should we do something better
public class javalibchelper
public static final int stdin   0
public static final int stdout   1
public static final int stderr   2
posixhandler handler
field field
public javalibchelper posixhandler handler
this handler   handler
this field   fieldaccess getprotectedfield filedescriptor class
public int chmod string filename  int mode
return chmod chmod new file filename   integer tooctalstring mode
public int chown string filename  int user  int group
execit launcher   new execit handler
int chownresult    1
int chgrpresult    1
try
if  user     1  chownresult   launcher runandwait      user  filename
if  group     1  chgrpresult   launcher runandwait      user  filename
catch  exception e
return chownresult     1    chgrpresult     1 ? 0   1
public int getfd filedescriptor descriptor
if  descriptor    null    field    null  return  1
try
return field getint descriptor
catch  securityexception e
catch  illegalargumentexception e
catch  illegalaccessexception e
return  1
public string getlogin
return system getproperty
public int getpid
return handler getpid
public passwd getpwent
return new javapasswd handler
public int setpwent
return 0
public int endpwent
return 0
public int isatty int fd
return  fd    stdout    fd    stdin    fd    stderr  ? 1   0
public int link string oldpath  string newpath
try
return new execit handler  runandwait    oldpath  newpath
catch  exception e
return  1      we tried and failed for some reason  indicate error
public int lstat string path  filestat stat
file file   new file path
if   file exists    handler error errors enoent  path
// fixme: bulletproof this or no?
javafilestat jstat    javafilestat  stat
jstat setup path
// todo: add error reporting for cases we can calculate: enotdir, enametoolong, enoent
// eacces, eloop, efault, eio
return 0
public int mkdir string path  int mode
file dir   new file path
if   dir mkdir    return  1
chmod path  mode
return 0
public int stat string path  filestat stat
// fixme: bulletproof this or no?
javafilestat jstat    javafilestat  stat
try
file file   new file path
if   file exists    handler error errors enoent  path
jstat setup file getcanonicalpath
catch  ioexception e
// todo: throw error when we have problems stat'ing canonicalizing
// todo: add error reporting for cases we can calculate: enotdir, enametoolong, enoent
// eacces, eloop, efault, eio
return 0
public int symlink string oldpath  string newpath
try
return new execit handler  runandwait       oldpath  newpath
catch  exception e
return  1      we tried and failed for some reason  indicate error
public int readlink string oldpath  bytebuffer buffer  int length  throws ioexception
try
bytearrayoutputstream baos   new bytearrayoutputstream
new execit handler  runandwait baos     oldpath
byte bytes   baos tobytearray
if  bytes length > length    bytes length    0  return  1
buffer put bytes  0  bytes length   1      trim off  n
return buffer position
catch  interruptedexception e
return  1     we tried and failed for some reason  indicate error