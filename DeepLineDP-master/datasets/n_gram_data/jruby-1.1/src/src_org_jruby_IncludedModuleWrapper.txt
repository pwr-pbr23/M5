/*
***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2002-2004 jan arne petersen <jpetersen@uni-bonn.de>
* copyright (c) 2004-2006 thomas e enebo <enebo@acm.org>
* copyright (c) 2005 charles o nutter <headius@headius.com>
* copyright (c) 2006 miguel covarrubias <mlcovarrubias@gmail.com>
* copyright (c) 2007 william n dortch <bill.dortch@gmail.com>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby
import java util list
import java util map
import org jruby internal runtime methods dynamicmethod
import org jruby runtime builtin irubyobject
import org jruby runtime builtin variable
/**
* this class is used to provide an intermediate superclass for modules and classes that include
* other modules. it inserts itself as the immediate superclass of the includer, but defers all
* module methods to the actual superclass. multiple of these intermediate superclasses can be
* added for multiple included modules.
*
* this allows the normal superclass-based searches (searchmethod, getconstant, etc) to traverse
* the superclass ancestors as normal while the included modules do not actually show up in
* direct inheritance traversal.
*
* @see org.jruby.rubymodule
*/
public final class includedmodulewrapper extends rubyclass
private rubymodule delegate
public includedmodulewrapper ruby runtime  rubyclass superclass  rubymodule delegate
super runtime  superclass  false
this delegate   delegate
this metaclass   delegate metaclass
/**
* overridden newincludeclass implementation to allow attaching future includes to the correct module
* (i.e. the one to which this is attached)
*
* @see org.jruby.rubymodule#newincludeclass(rubyclass)
*/
public includedmodulewrapper newincludeclass rubyclass superclass
includedmodulewrapper includedmodule   new includedmodulewrapper getruntime    superclass  getnonincludedclass
// include its parent (and in turn that module's parents)
if  getsuperclass      null
includedmodule includemodule getsuperclass
return includedmodule
public boolean ismodule
return false
public boolean isclass
return false
public boolean isincluded
return true
public boolean isimmediate
return true
//    public rubyclass getmetaclass() {
//		return delegate.getmetaclass();
//    }
public void setmetaclass rubyclass newrubyclass
throw new unsupportedoperationexception
@override
public map<string  dynamicmethod> getmethods
return delegate getmethods
@override
public void addmethod string name  dynamicmethod method
throw new unsupportedoperationexception
public void setmethods map newmethods
throw new unsupportedoperationexception
public string getname
return delegate getname
public rubymodule getnonincludedclass
return delegate
public rubyclass getrealclass
return getsuperclass   getrealclass
protected boolean issame rubymodule module
return delegate issame module
/**
* we don't want to reveal ourselves to ruby code, so delegate this
* operation.
*/
public irubyobject id
return delegate id
//
// variable table methods - pass to delegate
//
@override
protected boolean variabletablecontains string name
return delegate variabletablecontains name
@override
protected boolean variabletablefastcontains string internedname
return delegate variabletablefastcontains internedname
@override
protected irubyobject variabletablefetch string name
return delegate variabletablefetch name
@override
protected irubyobject variabletablefastfetch string internedname
return delegate variabletablefastfetch internedname
@override
protected irubyobject variabletablestore string name  irubyobject value
return delegate variabletablestore name  value
@override
protected irubyobject variabletablefaststore string internedname  irubyobject value
return delegate variabletablefaststore internedname  value
@override
protected irubyobject variabletableremove string name
return delegate variabletableremove name
@override
protected variabletableentry variabletablegettable
return delegate variabletablegettable
@override
protected int variabletablegetsize
return delegate variabletablegetsize
@override
protected void variabletablesync list<variable<irubyobject>> vars
delegate variabletablesync vars
@override
protected irubyobject variabletablereadlocked variabletableentry entry
return delegate variabletablereadlocked entry
/**
* method to help ease transition to new variables implementation.
* will likely be deprecated in the near future.
*/
@suppresswarnings
@override
@deprecated    born deprecated
protected map variabletablegetmap
return delegate variabletablegetmap
/**
* method to help ease transition to new variables implementation.
* will likely be deprecated in the near future.
*/
@suppresswarnings
@override
@deprecated    born deprecated
protected map variabletablegetmap map map
return delegate variabletablegetmap map
//
// constant table methods - pass to delegate
//
@override
protected boolean constanttablecontains string name
return delegate constanttablecontains name
@override
protected boolean constanttablefastcontains string internedname
return delegate constanttablefastcontains internedname
@override
protected irubyobject constanttablefetch string name
return delegate constanttablefetch name
@override
protected irubyobject constanttablefastfetch string internedname
return delegate constanttablefastfetch internedname
@override
protected irubyobject constanttablestore string name  irubyobject value
// fixme: legal here? may want unsupportedoperationexception
return delegate constanttablestore name  value
@override
protected irubyobject constanttablefaststore string internedname  irubyobject value
// fixme: legal here? may want unsupportedoperationexception
return delegate constanttablefaststore internedname  value
@override
protected irubyobject constanttableremove string name
// this _is_ legal (when removing an undef)
return delegate constanttableremove name
@override
protected constanttableentry constanttablegettable
return delegate constanttablegettable
@override
protected int constanttablegetsize
return delegate constanttablegetsize
@override
protected void constanttablesync list<variable<irubyobject>> vars
// fixme: legal here? may want unsupportedoperationexception
delegate constanttablesync vars
/**
* method to help ease transition to new variables implementation.
* will likely be deprecated in the near future.
*/
@suppresswarnings
@override
@deprecated    born deprecated
protected map constanttablegetmap
return delegate constanttablegetmap
/**
* method to help ease transition to new variables implementation.
* will likely be deprecated in the near future.
*/
@suppresswarnings
@override
@deprecated    born deprecated
protected map constanttablegetmap map map
return delegate constanttablegetmap map