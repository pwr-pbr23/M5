/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2007 ola bini <ola@ologix.com>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jvyamlb util
/**
* @author <a href="mailto:ola.bini@ki.se">ola bini</a>
*/
public class base64coder
// mapping table from 6-bit nibbles to base64 characters.
private final static char map1   new char
static
int i 0
for char c    c<    c    map1   c
for char c    c<    c    map1   c
for char c    c<    c    map1   c
map1      map1
// mapping table from base64 characters to 6-bit nibbles.
private final static byte map2   new byte
static
for int i 0  i<map2 length  i    map2    1
for int i 0  i<64  i    map2]    byte i
/**
* encodes a string into base64 format.
* no blanks or line breaks are inserted.
* @param s  a string to be encoded.
* @return   a string with the base64 encoded data.
*/
public static string encode final string s
try
return new string encode s getbytes
catch exception e
// theoritically shouldn't happen
return null
/**
* encodes a byte array into base64 format.
* no blanks or line breaks are inserted.
* @param in  an array containing the data bytes to be encoded.
* @return    a character array with the base64 encoded data.
*/
public static char encode final byte in
int ilen   in length
int odatalen    ilen 4 2  3           output length without padding
int olen     ilen 2  3  4             output length including padding
char out   new char
int ip   0
int op   0
while  ip < ilen
int i0   in   0xff
int i1   ip < ilen ? in   0xff   0
int i2   ip < ilen ? in   0xff   0
int o0   i0 >>> 2
int o1     i0     3  << 4     i1 >>> 4
int o2     i1   0xf  << 2     i2 >>> 6
int o3   i2   0x3f
out   map1
out   map1
out   op < odatalen ? map1      op
out   op < odatalen ? map1      op
return out
/**
* decodes base64 data.
* no blanks or line breaks are allowed within the base64 encoded data.
* @param in  a character array containing the base64 encoded data.
* @return    an array containing the decoded data bytes.
* @throws    illegalargumentexception if the input is not valid base64 encoded data.
*/
public static byte decode final byte in
int ilen   in length
if  ilen%4    0  throw new illegalargumentexception
while  ilen > 0    in       ilen
int olen    ilen 3    4
byte out   new byte
int ip   0
int op   0
while  ip < ilen
int i0   in
int i1   in
int i2   ip < ilen ? in
int i3   ip < ilen ? in
if  i0 > 127    i1 > 127    i2 > 127    i3 > 127
throw new illegalargumentexception
int b0   map2
int b1   map2
int b2   map2
int b3   map2
if  b0 < 0    b1 < 0    b2 < 0    b3 < 0
throw new illegalargumentexception
int o0     b0       <<2     b1>>>4
int o1     b1   0xf <<4     b2>>>2
int o2     b2     3 <<6     b3
out    byte o0
if  op<olen  out    byte o1
if  op<olen  out    byte o2
return out