/*
***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2002-2004 anders bengtsson <ndrsbngtssn@yahoo.se>
* copyright (c) 2002-2004 jan arne petersen <jpetersen@uni-bonn.de>
* copyright (c) 2004 stefan matthias aust <sma@3plus4.de>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby runtime
import java io serializable
import java lang reflect method
import java lang reflect modifier
import java util hashmap
import java util map
import org jruby ruby
import org jruby anno jrubymethod
import org jruby ast arraynode
import org jruby ast attrassignnode
import org jruby ast callnode
import org jruby ast node
import org jruby ast types iaritynode
import org jruby runtime builtin irubyobject
/**
* the arity of a method is the number of arguments it takes.
*/
public final class arity implements serializable
private static final long serialversionuid   1l
private static final map<integer  arity> arities   new hashmap<integer  arity>
private final int value
public final static arity no_arguments   newarity 0
public final static arity one_argument   newarity 1
public final static arity two_arguments   newarity 2
public final static arity three_arguments   newarity 3
public final static arity optional   newarity  1
public final static arity one_required   newarity  2
public final static arity two_required   newarity  3
public final static arity three_required   newarity  3
private arity int value
this value   value
public static arity createarity int value
switch  value
case  4
return three_required
case  3
return two_required
case  2
return one_required
case  1
return optional
case 0
return no_arguments
case 1
return one_argument
case 2
return two_arguments
case 3
return three_arguments
return newarity value
public static arity fromannotation jrubymethod anno
if  anno optional   > 0    anno rest
return createarity   anno required     1
return createarity anno required
public static arity fromannotation jrubymethod anno  class parametertypes  boolean isstatic
int required   0
if  anno optional      0     anno rest      anno required      0
// try count specific args to determine required
int i   parametertypes length
if  isstatic  i
if  parametertypes length > 0
if  parametertypes    threadcontext class  i
if  parametertypes    block class  i
required   i
else
required   anno required
if  anno optional   > 0    anno rest
return createarity   required   1
return createarity required
private static arity newarity int value
integer integervalue   new integer value
arity result
synchronized  arities
result   arities get integervalue
if  result    null
result   new arity value
arities put integervalue  result
return result
public static arity fixed int arity
assert arity >  0
return createarity arity
public static arity optional
return optional
public static arity required int minimum
assert minimum >  0
return createarity   1   minimum
public static arity noarguments
return no_arguments
public static arity singleargument
return one_argument
public static arity twoarguments
return two_arguments
public static arity procarityof node node
if  node instanceof attrassignnode    node    null
node     attrassignnode  node  getargsnode
if  node    null
return arity optional
else if  node instanceof iaritynode
return   iaritynode  node  getarity
else if  node instanceof callnode
return arity singleargument
else if  node instanceof arraynode
return arity singleargument
throw new error     node getclass         node getposition
public int getvalue
return value
public void checkarity ruby runtime  irubyobject args
if  isfixed
if  args length    required
throw runtime newargumenterror     args length       required
else
if  args length < required
throw runtime newargumenterror     args length       required
public boolean isfixed
return value >  0
public int required
if  value < 0
return   1   value
return value
public boolean equals object other
return this    other
public int hashcode
return value
public string tostring
if isfixed
return     required
else
return
// some helper functions:
public static int checkargumentcount ruby runtime  irubyobject args  int min  int max
if  args length < min
throw runtime newargumenterror     args length       min
if  max >  1    args length > max
throw runtime newargumenterror     args length       max
return args length
public static void raiseargumenterror ruby runtime  int length  int min  int max
if  length < min
throw runtime newargumenterror     length       min
if  max >  1    length > max
throw runtime newargumenterror     length       max
/**
* @see org.jruby.runtime.builtin.irubyobject#scanargs()
*/
public static irubyobject scanargs ruby runtime  irubyobject args  int required  int optional
int total   required optional
int real   checkargumentcount runtime  args required total
irubyobject narr   new irubyobject
system arraycopy args 0 narr 0 real
for int i real  i<total  i
narr   runtime getnil
return narr