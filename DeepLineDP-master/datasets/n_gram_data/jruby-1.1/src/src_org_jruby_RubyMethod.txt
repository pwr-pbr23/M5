/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2001 alan moore <alan_moore@gmx.net>
* copyright (c) 2001-2002 jan arne petersen <jpetersen@uni-bonn.de>
* copyright (c) 2002 anders bengtsson <ndrsbngtssn@yahoo.se>
* copyright (c) 2004 charles o nutter <headius@headius.com>
* copyright (c) 2004 stefan matthias aust <sma@3plus4.de>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby
import org jruby anno jrubymethod
import org jruby exceptions jumpexception
import org jruby internal runtime methods dynamicmethod
import org jruby runtime block
import org jruby runtime callbackfactory
import org jruby runtime methodblock
import org jruby runtime objectallocator
import org jruby runtime threadcontext
import org jruby runtime builtin irubyobject
/**
* the rubymethod class represents a rubymethod object.
*
* you can get such a method by calling the "method" method of an object.
*
* note: this was renamed from method.java
*
* @author  jpetersen
* @since 0.2.3
*/
public class rubymethod extends rubyobject
protected rubymodule implementationmodule
protected string methodname
protected rubymodule originmodule
protected string originname
protected dynamicmethod method
protected irubyobject receiver
protected rubymethod ruby runtime  rubyclass rubyclass
super runtime  rubyclass
/** create the rubymethod class and add it to the ruby runtime.
*
*/
public static rubyclass createmethodclass ruby runtime
// todo: not_allocatable_allocator is probably ok here. confirm. jruby-415
rubyclass methodclass   runtime defineclass    runtime getobject    objectallocator not_allocatable_allocator
runtime setmethod methodclass
methodclass defineannotatedmethods rubymethod class
return methodclass
public static rubymethod newmethod
rubymodule implementationmodule
string methodname
rubymodule originmodule
string originname
dynamicmethod method
irubyobject receiver
ruby runtime   implementationmodule getruntime
rubymethod newmethod   new rubymethod runtime  runtime getmethod
newmethod implementationmodule   implementationmodule
newmethod methodname   methodname
newmethod originmodule   originmodule
newmethod originname   originname
newmethod method   method getrealmethod
newmethod receiver   receiver
return newmethod
/** call the method.
*
*/
@jrubymethod name           rest   true  frame   true
public irubyobject call irubyobject args  block block
assert args    null
threadcontext tc   getruntime   getcurrentcontext
method getarity   checkarity getruntime    args
// fixme: should lastclass be implementation module for a method?
return method call tc  receiver  implementationmodule  methodname  args  block
/** returns the number of arguments a method accepted.
*
* @return the number of arguments of a method.
*/
@jrubymethod name
public rubyfixnum arity
return getruntime   newfixnum method getarity   getvalue
@jrubymethod name      required   1
public rubyboolean op_equal irubyobject other
if    other instanceof rubymethod   return getruntime   getfalse
rubymethod othermethod    rubymethod other
return getruntime   newboolean implementationmodule    othermethod implementationmodule
originmodule    othermethod originmodule
receiver    othermethod receiver
method getrealmethod      othermethod method getrealmethod
@jrubymethod name
public rubymethod rbclone
return newmethod implementationmodule  methodname  originmodule  originname  method  receiver
/** create a proc object.
*
*/
@jrubymethod name      frame   true
public irubyobject to_proc block unusedblock
callbackfactory f   getruntime   callbackfactory rubymethod class
ruby r   getruntime
threadcontext tc   r getcurrentcontext
block block   methodblock createmethodblock tc  tc getcurrentscope    f getblockmethod     this  r gettopself
while  true
try
// fixme: we should not be regenerating this over and over
return f getsingletonmethod    execute getruntime   getnil
irubyobject null_array  block
catch  jumpexception breakjump bj
return  irubyobject  bj getvalue
catch  jumpexception returnjump rj
return  irubyobject  rj getvalue
catch  jumpexception retryjump rj
// execute iteratemethod again.
/** create a proc object which is called like a ruby method.
*
* used by the rubymethod#to_proc method.
*
*/
public static irubyobject mproc irubyobject recv  block block
ruby runtime   recv getruntime
threadcontext tc   runtime getcurrentcontext
tc premproc
try
return rubykernel proc recv  block
finally
tc postmproc
/** delegate a block call to a bound method call.
*
* used by the rubymethod#to_proc method.
*
*/
public static irubyobject bmcall irubyobject blockarg  irubyobject arg1  irubyobject self  block unusedblock
if  blockarg instanceof rubyarray
// enebo: very wrong
return   rubymethod  arg1  call   rubyarray  blockarg  tojavaarray    block null_block
// enebo: very wrong
return   rubymethod  arg1  call new irubyobject   blockarg    block null_block
@jrubymethod name      frame   true
public rubyunboundmethod unbind block unusedblock
rubyunboundmethod unboundmethod
rubyunboundmethod newunboundmethod implementationmodule  methodname  originmodule  originname  method
unboundmethod infectby this
return unboundmethod
@jrubymethod name
public irubyobject inspect
stringbuilder buf   new stringbuilder
char delimeter
buf append getmetaclass   getrealclass   getname    append
if  implementationmodule issingleton
irubyobject attached     metaclass  originmodule  getattached
if  receiver    null
buf append implementationmodule inspect   tostring
else if  receiver    attached
buf append attached inspect   tostring
delimeter
else
buf append receiver inspect   tostring
buf append    append attached inspect   tostring    append
delimeter
else
buf append originmodule getname
if  implementationmodule    originmodule
buf append    append implementationmodule getname    append
buf append delimeter  append methodname  append
rubystring str   getruntime   newstring buf tostring
str settaint istaint
return str