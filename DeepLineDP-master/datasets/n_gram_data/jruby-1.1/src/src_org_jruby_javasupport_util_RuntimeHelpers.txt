package org jruby javasupport util
import org jruby metaclass
import org jruby ruby
import org jruby rubyarray
import org jruby rubyboolean
import org jruby rubyclass
import org jruby rubyexception
import org jruby rubyfixnum
import org jruby rubyhash
import org jruby rubykernel
import org jruby rubylocaljumperror
import org jruby rubymatchdata
import org jruby rubymodule
import org jruby rubyproc
import org jruby rubyregexp
import org jruby rubystring
import org jruby rubysymbol
import org jruby ast util argsutil
import org jruby common irubywarnings id
import org jruby evaluator astinterpreter
import org jruby exceptions jumpexception
import org jruby exceptions raiseexception
import org jruby internal runtime methods callconfiguration
import org jruby internal runtime methods dynamicmethod
import org jruby internal runtime methods wrappermethod
import org jruby parser blockstaticscope
import org jruby parser localstaticscope
import org jruby parser staticscope
import org jruby runtime arity
import org jruby runtime block
import org jruby runtime callsite
import org jruby runtime calltype
import org jruby runtime compiledblock
import org jruby runtime compiledblockcallback
import org jruby runtime compiledblocklight
import org jruby runtime compiledsharedscopeblock
import org jruby runtime dynamicscope
import org jruby runtime methodfactory
import org jruby runtime methodindex
import org jruby runtime threadcontext
import org jruby runtime visibility
import org jruby runtime builtin irubyobject
import org jruby util typeconverter
/**
* helper methods which are called by the compiler.  note: these will show no consumers, but
* generated code does call these so don't remove them thinking they are dead code.
*
*/
public class runtimehelpers
public static block createblock threadcontext context  irubyobject self  int arity
string staticscopenames  compiledblockcallback callback  boolean hasmultipleargshead  int argsnodetype  boolean light
staticscope staticscope
new blockstaticscope context getcurrentscope   getstaticscope    staticscopenames
staticscope determinemodule
if  light
return compiledblocklight newcompiledclosurelight
context
self
arity createarity arity
staticscope
callback
hasmultipleargshead
argsnodetype
else
return compiledblock newcompiledclosure
context
self
arity createarity arity
staticscope
callback
hasmultipleargshead
argsnodetype
public static irubyobject runbeginblock threadcontext context  irubyobject self  string staticscopenames  compiledblockcallback callback
staticscope staticscope
new blockstaticscope context getcurrentscope   getstaticscope    staticscopenames
staticscope determinemodule
context prescopedbody dynamicscope newdynamicscope staticscope  context getcurrentscope
block block   compiledblock newcompiledclosure context  self  arity createarity 0   staticscope  callback  false  block zero_args
block yield context  null
context postscopedbody
return context getruntime   getnil
public static block createsharedscopeblock threadcontext context  irubyobject self  int arity
compiledblockcallback callback  boolean hasmultipleargshead  int argsnodetype
return compiledsharedscopeblock newcompiledsharedscopeclosure context  self  arity createarity arity
context getcurrentscope    callback  hasmultipleargshead  argsnodetype
public static irubyobject def threadcontext context  irubyobject self  object scriptobject  string name  string javaname  string scopenames
int arity  int required  int optional  int rest  callconfiguration callconfig
class compiledclass   scriptobject getclass
ruby runtime   context getruntime
rubymodule containingclass   context getrubyclass
visibility visibility   context getcurrentvisibility
if  containingclass    null
throw runtime newtypeerror
if  containingclass    runtime getobject      name equals
runtime getwarnings   warn id redefining_dangerous
if  name equals       name equals
runtime getwarnings   warn id redefining_dangerous      name      name
staticscope scope   new localstaticscope context getcurrentscope   getstaticscope    scopenames
scope determinemodule
scope setarities required  optional  rest
methodfactory factory   methodfactory createfactory compiledclass getclassloader
dynamicmethod method
if  name equals       visibility    visibility module_function
method   factory getcompiledmethod containingclass  javaname
arity createarity arity   visibility private  scope  scriptobject  callconfig
else
method   factory getcompiledmethod containingclass  javaname
arity createarity arity   visibility  scope  scriptobject  callconfig
containingclass addmethod name  method
if  visibility    visibility module_function
containingclass getsingletonclass   addmethod name
new wrappermethod containingclass getsingletonclass    method
visibility public
containingclass callmethod context     runtime fastnewsymbol name
// 'class << state.self' and 'class << obj' uses defn as opposed to defs
if  containingclass issingleton
metaclass  containingclass  getattached   callmethod
context     runtime fastnewsymbol name
else
containingclass callmethod context     runtime fastnewsymbol name
return runtime getnil
public static irubyobject defs threadcontext context  irubyobject self  irubyobject receiver  object scriptobject  string name  string javaname  string scopenames
int arity  int required  int optional  int rest  callconfiguration callconfig
class compiledclass   scriptobject getclass
ruby runtime   context getruntime
if  runtime getsafelevel   >  4     receiver istaint
throw runtime newsecurityerror
if  receiver instanceof rubyfixnum    receiver instanceof rubysymbol
throw runtime newtypeerror  "   name
for "   receiver getmetaclass   getbasename
if  receiver isfrozen    throw runtime newfrozenerror
rubyclass rubyclass   receiver getsingletonclass
if  runtime getsafelevel   >  4    rubyclass getmethods   get name     null
throw runtime newsecurityerror
staticscope scope   new localstaticscope context getcurrentscope   getstaticscope    scopenames
scope determinemodule
scope setarities required  optional  rest
methodfactory factory   methodfactory createfactory compiledclass getclassloader
dynamicmethod method
method   factory getcompiledmethod rubyclass  javaname
arity createarity arity   visibility public  scope  scriptobject  callconfig
rubyclass addmethod name  method
receiver callmethod context     runtime fastnewsymbol name
return runtime getnil
public static rubyclass getsingletonclass ruby runtime  irubyobject receiver
if  receiver instanceof rubyfixnum    receiver instanceof rubysymbol
throw runtime newtypeerror     receiver getmetaclass   getbasename
else
if  runtime getsafelevel   >  4     receiver istaint
throw runtime newsecurityerror
return receiver getsingletonclass
public static irubyobject doattrassign irubyobject receiver  irubyobject args
threadcontext context  string name  irubyobject caller  calltype calltype  block block
if  receiver    caller  calltype   calltype variable
return compilercallmethod context  receiver  name  args  caller  calltype  block
public static irubyobject doattrassignindexed irubyobject receiver  irubyobject args
threadcontext context  byte methodindex  string name  irubyobject caller
calltype calltype  block block
if  receiver    caller  calltype   calltype variable
return compilercallmethodwithindex context  receiver  methodindex  name  args  caller
calltype  block
public static irubyobject doinvokedynamic irubyobject receiver  irubyobject args
threadcontext context  string name  irubyobject caller  calltype calltype  block block
return compilercallmethod context  receiver  name  args  caller  calltype  block
public static irubyobject doinvokedynamicindexed irubyobject receiver  irubyobject args
threadcontext context  byte methodindex  string name  irubyobject caller
calltype calltype  block block
return compilercallmethodwithindex context  receiver  methodindex  name  args  caller
calltype  block
/**
* used by the compiler to ease calling indexed methods, also to handle visibility.
* note: this is not the same as the switchvalue versions.
*/
public static irubyobject compilercallmethodwithindex threadcontext context  irubyobject receiver  int methodindex  string name  irubyobject args  irubyobject caller  calltype calltype  block block
rubyclass clazz   receiver getmetaclass
if  clazz index    0
return clazz invoke context  receiver  methodindex  name  args  calltype  block
return compilercallmethod context  receiver  name  args  caller  calltype  block
/**
* used by the compiler to handle visibility
*/
public static irubyobject compilercallmethod threadcontext context  irubyobject receiver  string name
irubyobject args  irubyobject caller  calltype calltype  block block
assert args    null
dynamicmethod method   null
rubymodule rubyclass   receiver getmetaclass
method   rubyclass searchmethod name
if  method isundefined        name equals        method iscallablefrom caller  calltype
return callmethodmissing context  receiver  method  name  args  caller  calltype  block
return method call context  receiver  rubyclass  name  args  block
public static irubyobject callmethodmissing threadcontext context  irubyobject receiver  dynamicmethod method  string name  int methodindex
irubyobject args  irubyobject self  calltype calltype  block block
// store call information so method_missing impl can use it
context setlastcallstatus calltype
context setlastvisibility method getvisibility
if  methodindex    methodindex method_missing
return rubykernel method_missing context  self  args  block
irubyobject newargs   new irubyobject
system arraycopy args  0  newargs  1  args length
newargs   context getruntime   newsymbol name
return receiver callmethod context     newargs  block
public static irubyobject callmethodmissing threadcontext context  irubyobject receiver  dynamicmethod method  string name
irubyobject args  irubyobject self  calltype calltype  block block
// store call information so method_missing impl can use it
context setlastcallstatus calltype
context setlastvisibility method getvisibility
if  name equals
return rubykernel method_missing context  self  args  block
irubyobject newargs   new irubyobject
system arraycopy args  0  newargs  1  args length
newargs   context getruntime   newsymbol name
return receiver callmethod context     newargs  block
public static irubyobject invoke threadcontext context  irubyobject self  string name
return runtimehelpers invoke context  self  name  irubyobject null_array  null  block null_block
public static irubyobject invoke threadcontext context  irubyobject self  string name  irubyobject arg
return runtimehelpers invoke context  self  name  arg  calltype functional  block null_block
public static irubyobject invoke threadcontext context  irubyobject self  string name  irubyobject args
return runtimehelpers invoke context  self  name  args  calltype functional  block null_block
public static irubyobject invoke threadcontext context  irubyobject self  string name  irubyobject args  block block
return runtimehelpers invoke context  self  name  args  calltype functional  block
public static irubyobject invoke threadcontext context  irubyobject self  string name  irubyobject args  calltype calltype  block block
return self getmetaclass   invoke context  self  name  args  calltype  block
public static irubyobject invoke threadcontext context  irubyobject self  string name  irubyobject arg  calltype calltype  block block
return self getmetaclass   invoke context  self  name  arg  calltype  block
public static irubyobject invokeas threadcontext context  rubyclass asclass  irubyobject self  string name  irubyobject args  calltype calltype  block block
return asclass invoke context  self  name  args  calltype  block
// indexed versions are for sti, which has become more and more irrelevant
public static irubyobject invoke threadcontext context  irubyobject self  int methodindex  string name  irubyobject args
return runtimehelpers invoke context  self  methodindex name args calltype functional  block null_block
public static irubyobject invoke threadcontext context  irubyobject self  int methodindex  string name  irubyobject args  calltype calltype  block block
return self getmetaclass   invoke context  self  methodindex  name  args  calltype  block
public static rubyarray ensurerubyarray irubyobject value
if    value instanceof rubyarray
value   rubyarray newarray value getruntime    value
return  rubyarray  value
public static rubyarray ensuremultipleassignablerubyarray ruby runtime  irubyobject value  boolean masgnhashead
if    value instanceof rubyarray
value   argsutil converttorubyarray runtime  value  masgnhashead
return  rubyarray  value
public static irubyobject fetchclassvariable threadcontext context  ruby runtime
irubyobject self  string name
rubymodule rubyclass   astinterpreter getclassvariablebase context  runtime
if  rubyclass    null  rubyclass   self getmetaclass
return rubyclass getclassvar name
public static irubyobject fastfetchclassvariable threadcontext context  ruby runtime
irubyobject self  string internedname
rubymodule rubyclass   astinterpreter getclassvariablebase context  runtime
if  rubyclass    null  rubyclass   self getmetaclass
return rubyclass fastgetclassvar internedname
public static irubyobject nulltonil irubyobject value  ruby runtime
return value    null ? value   runtime getnil
public static rubyclass preparesuperclass ruby runtime  irubyobject rubyclass
rubyclass checkinheritable rubyclass      use the same logic as in evaluationstate
return  rubyclass rubyclass
public static rubymodule prepareclassnamespace threadcontext context  irubyobject rubymodule
if  rubymodule    null    rubymodule isnil
rubymodule   context getcurrentscope   getstaticscope   getmodule
if  rubymodule    null
throw context getruntime   newtypeerror
return  rubymodule rubymodule
public static irubyobject setclassvariable threadcontext context  ruby runtime
irubyobject self  string name  irubyobject value
rubymodule rubyclass   astinterpreter getclassvariablebase context  runtime
if  rubyclass    null  rubyclass   self getmetaclass
rubyclass setclassvar name  value
return value
public static irubyobject fastsetclassvariable threadcontext context  ruby runtime
irubyobject self  string internedname  irubyobject value
rubymodule rubyclass   astinterpreter getclassvariablebase context  runtime
if  rubyclass    null  rubyclass   self getmetaclass
rubyclass fastsetclassvar internedname  value
return value
public static irubyobject declareclassvariable threadcontext context  ruby runtime  irubyobject self  string name  irubyobject value
// fixme: this isn't quite right; it shouldn't evaluate the value if it's going to throw the error
rubymodule rubyclass   astinterpreter getclassvariablebase context  runtime
if  rubyclass    null  throw runtime newtypeerror
rubyclass setclassvar name  value
return value
public static irubyobject fastdeclareclassvariable threadcontext context  ruby runtime  irubyobject self  string internedname  irubyobject value
// fixme: this isn't quite right; it shouldn't evaluate the value if it's going to throw the error
rubymodule rubyclass   astinterpreter getclassvariablebase context  runtime
if  rubyclass    null  throw runtime newtypeerror
rubyclass fastsetclassvar internedname  value
return value
public static void handleargumentsizes threadcontext context  ruby runtime  int given  int required  int opt  int rest
if  opt    0
if  rest < 0
// no opt, no rest, exact match
if  given    required
throw runtime newargumenterror     given       required
else
// only rest, must be at least required
if  given < required
throw runtime newargumenterror     given       required
else
if  rest < 0
// opt but no rest, must be at least required and no more than required + opt
if  given < required
throw runtime newargumenterror     given       required
else if  given >  required   opt
throw runtime newargumenterror     given        required   opt
else
// opt and rest, must be at least required
if  given < required
throw runtime newargumenterror     given       required
public static string getlocaljumptypeorrethrow raiseexception re
rubyexception exception   re getexception
ruby runtime   exception getruntime
if  runtime fastgetclass    isinstance exception
rubylocaljumperror jumperror    rubylocaljumperror re getexception
irubyobject reason   jumperror reason
return reason asjavastring
throw re
public static irubyobject unwraplocaljumperrorvalue raiseexception re
return   rubylocaljumperror re getexception    exit_value
public static irubyobject processblockargument ruby runtime  block block
if   block isgiven
return runtime getnil
rubyproc blockarg
if  block getprocobject      null
blockarg   block getprocobject
else
blockarg   runtime newproc block type proc  block
blockarg getblock   type   block type proc
return blockarg
public static block getblockfromblockpassbody irubyobject proc  block currentblock
ruby runtime   proc getruntime
// no block from a nil proc
if  proc isnil    return block null_block
// if not already a proc then we should try and make it one.
if    proc instanceof rubyproc
proc   typeconverter converttotype proc  runtime getproc    0     false
if    proc instanceof rubyproc
throw runtime newtypeerror
proc getmetaclass   getname
// todo: add safety check for taintedness
if  currentblock    null    currentblock isgiven
rubyproc procobject   currentblock getprocobject
// the current block is already associated with proc.  no need to create a new one
if  procobject    null    procobject    proc  return currentblock
return   rubyproc  proc  getblock
public static irubyobject backref threadcontext context
irubyobject backref   context getcurrentframe   getbackref
if backref instanceof rubymatchdata
rubymatchdata backref  use
return backref
public static irubyobject backreflastmatch threadcontext context
irubyobject backref   context getcurrentframe   getbackref
return rubyregexp last_match backref
public static irubyobject backrefmatchpre threadcontext context
irubyobject backref   context getcurrentframe   getbackref
return rubyregexp match_pre backref
public static irubyobject backrefmatchpost threadcontext context
irubyobject backref   context getcurrentframe   getbackref
return rubyregexp match_post backref
public static irubyobject backrefmatchlast threadcontext context
irubyobject backref   context getcurrentframe   getbackref
return rubyregexp match_last backref
public static irubyobject callzsuper ruby runtime  threadcontext context  block block  irubyobject self
if  context getframeklazz      null
string name   context getframename
throw runtime newnameerror     name
name
// has the method that is calling super received a block argument
if   block isgiven    block   context getcurrentframe   getblock
return self callsuper context  context getcurrentscope   getargvalues    block
public static irubyobject appendtoobjectarray irubyobject array  irubyobject add
irubyobject newarray   new irubyobject
system arraycopy array  0  newarray  0  array length
newarray   add
return newarray
public static irubyobject returnjump irubyobject result  threadcontext context
throw new jumpexception returnjump context getframejumptarget    result
public static irubyobject breakjumpinwhile jumpexception breakjump bj  block ablock
// jruby-530, while case
if  bj gettarget      ablock getbody
bj settarget null
throw bj
return  irubyobject  bj getvalue
public static irubyobject breakjump irubyobject value
throw new jumpexception breakjump null  value
public static irubyobject breaklocaljumperror ruby runtime  irubyobject value
throw runtime newlocaljumperror    value
public static irubyobject concatobjectarrays irubyobject array  irubyobject add
irubyobject newarray   new irubyobject
system arraycopy array  0  newarray  0  array length
system arraycopy add  0  newarray  array length  add length
return newarray
public static irubyobject isexceptionhandled rubyexception currentexception  irubyobject exceptions  ruby runtime  threadcontext context  irubyobject self
for  int i   0  i < exceptions length  i
if   runtime getmodule   isinstance exceptions
throw runtime newtypeerror
irubyobject result   exceptions callmethod context     currentexception
if  result istrue    return result
return runtime getfalse
public static void checksuperdisabled threadcontext context
rubymodule klazz   context getframeklazz
if  klazz    null
string name   context getframename
throw context getruntime   newnameerror     name
name
public static block ensuresuperblock block given  block parent
if   given isgiven
return parent
return given
public static rubymodule findimplementerifnecessary rubymodule clazz  rubymodule implementationclass
if  implementationclass    null    implementationclass needsimplementer
// modules are included with a shim class; we must find that shim to handle super() appropriately
return clazz findimplementer implementationclass
else
// classes are directly in the hierarchy, so no special logic is necessary for implementer
return implementationclass
public static rubyarray createsubarray rubyarray input  int start
return  rubyarray input subseqlight start  input size     start
public static rubyarray createsubarray irubyobject input  ruby runtime  int start
return rubyarray newarraynocopy runtime  input  start
public static rubyboolean iswhentriggered irubyobject expression  irubyobject expressionsobject  threadcontext context
rubyarray expressions   astinterpreter splatvalue context getruntime    expressionsobject
for  int j   0 k   expressions getlength    j < k  j
irubyobject condition   expressions eltinternal j
if   expression    null    condition callmethod context  methodindex op_eqq     expression
istrue
expression    null    condition istrue
return context getruntime   gettrue
return context getruntime   getfalse
public static irubyobject setconstantinmodule irubyobject module  irubyobject value  string name  threadcontext context
return context setconstantinmodule name  module  value
public static irubyobject retryjump
throw jumpexception retry_jump
public static irubyobject redojump
throw jumpexception redo_jump
public static irubyobject redolocaljumperror ruby runtime
throw runtime newlocaljumperror    runtime getnil
public static irubyobject nextjump irubyobject value
throw new jumpexception nextjump value
public static irubyobject nextlocaljumperror ruby runtime  irubyobject value
throw runtime newlocaljumperror    value
public static final int max_specific_arity_object_array   5
public static irubyobject constructobjectarray irubyobject one
return new irubyobject  one
public static irubyobject constructobjectarray irubyobject one  irubyobject two
return new irubyobject  one  two
public static irubyobject constructobjectarray irubyobject one  irubyobject two  irubyobject three
return new irubyobject  one  two  three
public static irubyobject constructobjectarray irubyobject one  irubyobject two  irubyobject three  irubyobject four
return new irubyobject  one  two  three  four
public static irubyobject constructobjectarray irubyobject one  irubyobject two  irubyobject three  irubyobject four  irubyobject five
return new irubyobject  one  two  three  four  five
public static final int max_specific_arity_hash   3
public static rubyhash constructhash ruby runtime  irubyobject key1  irubyobject value1
rubyhash hash   rubyhash newhash runtime
hash fastaset key1  value1
return hash
public static rubyhash constructhash ruby runtime  irubyobject key1  irubyobject value1  irubyobject key2  irubyobject value2
rubyhash hash   rubyhash newhash runtime
hash fastaset key1  value1
hash fastaset key2  value2
return hash
public static rubyhash constructhash ruby runtime  irubyobject key1  irubyobject value1  irubyobject key2  irubyobject value2  irubyobject key3  irubyobject value3
rubyhash hash   rubyhash newhash runtime
hash fastaset key1  value1
hash fastaset key2  value2
hash fastaset key3  value3
return hash
public static irubyobject definealias threadcontext context  string newname  string oldname
ruby runtime   context getruntime
rubymodule module   context getrubyclass
if  module    null  throw runtime newtypeerror
module definealias newname  oldname
module callmethod context     runtime newsymbol newname
return runtime getnil
public static irubyobject getinstancevariable ruby runtime  irubyobject self  string name
irubyobject result   self getinstancevariables   getinstancevariable name
if  result    null  return result
runtime getwarnings   warning id ivar_not_initialized      name
return runtime getnil
public static irubyobject fastgetinstancevariable ruby runtime  irubyobject self  string internedname
irubyobject result
if   result   self getinstancevariables   fastgetinstancevariable internedname      null  return result
runtime getwarnings   warning id ivar_not_initialized      internedname
return runtime getnil
public static irubyobject negate irubyobject value  ruby runtime
if  value istrue    return runtime getfalse
return runtime gettrue
public static irubyobject stringornil string value  ruby runtime  irubyobject nil
if  value    null  return nil
return rubystring newstring runtime  value
public static void preload threadcontext context  string varnames
staticscope staticscope   new localstaticscope null  varnames
staticscope setmodule context getruntime   getobject
dynamicscope scope   dynamicscope newdynamicscope staticscope
// each root node has a top-level scope that we need to push
context prescopedbody scope
public static void postload threadcontext context
context postscopedbody
public static void registerendblock block block  ruby runtime
runtime pushexitblock runtime newproc block type lambda  block
public static irubyobject match3 rubyregexp regexp  irubyobject value  threadcontext context
if  value instanceof rubystring
return regexp op_match context  value
else
return value callmethod context     regexp
public static irubyobject geterrorinfo ruby runtime
return runtime getglobalvariables   get
public static void seterrorinfo ruby runtime  irubyobject error
runtime getglobalvariables   set    error
public static void setlastline ruby runtime  threadcontext context  irubyobject value
context getcurrentframe   setlastline value
public static irubyobject getlastline ruby runtime  threadcontext context
return context getcurrentframe   getlastline
public static void setbackref ruby runtime  threadcontext context  irubyobject value
if   value isnil        value instanceof rubymatchdata   throw runtime newtypeerror value  runtime getmatchdata
context getcurrentframe   setbackref value
public static irubyobject getbackref ruby runtime  threadcontext context
irubyobject backref   context getcurrentframe   getbackref
if  backref instanceof rubymatchdata    rubymatchdata backref  use
return backref
public static irubyobject preopasgnwithorand irubyobject receiver  threadcontext context  callsite varsite
return varsite call context  receiver
public static irubyobject postopasgnwithorand irubyobject receiver  irubyobject value  threadcontext context  callsite varasgnsite
return varasgnsite call context  receiver  value
public static irubyobject opasgnwithmethod threadcontext context  irubyobject receiver  irubyobject arg  callsite varsite  callsite opsite  callsite opasgnsite
irubyobject var   varsite call context  receiver
irubyobject result   opsite call context  var  arg
opasgnsite call context  receiver  result
return result
public static irubyobject opelementasgnwithmethod threadcontext context  irubyobject receiver  irubyobject value  callsite elementsite  callsite opsite  callsite elementasgnsite
irubyobject var   elementsite call context  receiver
irubyobject result   opsite call context  var  value
elementasgnsite call context  receiver  result
return result
public static irubyobject opelementasgnwithmethod threadcontext context  irubyobject receiver  irubyobject arg  irubyobject value  callsite elementsite  callsite opsite  callsite elementasgnsite
irubyobject var   elementsite call context  receiver  arg
irubyobject result   opsite call context  var  value
elementasgnsite call context  receiver  arg  result
return result
public static irubyobject opelementasgnwithmethod threadcontext context  irubyobject receiver  irubyobject arg1  irubyobject arg2  irubyobject value  callsite elementsite  callsite opsite  callsite elementasgnsite
irubyobject var   elementsite call context  receiver  arg1  arg2
irubyobject result   opsite call context  var  value
elementasgnsite call context  receiver  arg1  arg2  result
return result
public static irubyobject opelementasgnwithmethod threadcontext context  irubyobject receiver  irubyobject arg1  irubyobject arg2  irubyobject arg3  irubyobject value  callsite elementsite  callsite opsite  callsite elementasgnsite
irubyobject var   elementsite call context  receiver  arg1  arg2  arg3
irubyobject result   opsite call context  var  value
elementasgnsite call context  receiver  new irubyobject  arg1  arg2  arg3  result
return result
public static irubyobject opelementasgnwithmethod threadcontext context  irubyobject receiver  irubyobject args  irubyobject value  callsite elementsite  callsite opsite  callsite elementasgnsite
irubyobject var   elementsite call context  receiver
irubyobject result   opsite call context  var  value
elementasgnsite call context  receiver  appendtoobjectarray args  result
return result
public static irubyobject opelementasgnwithorparttwoonearg threadcontext context  irubyobject receiver  irubyobject arg  irubyobject value  callsite asetsite
asetsite call context  receiver  arg  value
return value
public static irubyobject opelementasgnwithorparttwotwoargs threadcontext context  irubyobject receiver  irubyobject args  irubyobject value  callsite asetsite
asetsite call context  receiver  args  args  value
return value
public static irubyobject opelementasgnwithorparttwothreeargs threadcontext context  irubyobject receiver  irubyobject args  irubyobject value  callsite asetsite
asetsite call context  receiver  new irubyobject  args  args  args  value
return value
public static irubyobject opelementasgnwithorparttwonargs threadcontext context  irubyobject receiver  irubyobject args  irubyobject value  callsite asetsite
irubyobject newargs   new irubyobject
system arraycopy args  0  newargs  0  args length
newargs   value
asetsite call context  receiver  newargs
return value