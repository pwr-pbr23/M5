/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2006-2007 mirko stocker <me@misto.ch>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby ast visitor rewriter
import java io outputstream
import java io printwriter
import java io stringwriter
import java io writer
import java math biginteger
import java util arraylist
import java util iterator
import java util regex matcher
import java util regex pattern
import org jruby ast
import org jruby ast types inamenode
import org jruby ast visitor nodevisitor
import org jruby ast visitor rewriter utils operators
import org jruby ast visitor rewriter utils rewritercontext
import org jruby evaluator instruction
import org jruby lexer yacc isourceposition
import org jruby parser staticscope
/**
* visits each node and outputs the corresponding ruby sourcecode for the nodes.
*
* @author mirko stocker
*
*/
public class rewritevisitor implements nodevisitor
protected final rewritercontext config
protected final rewriterfactory factory
public rewritevisitor writer out  string source
this new rewritercontext new printwriter out   source  new defaultformathelper
public rewritevisitor outputstream out  string source
this new rewritercontext new printwriter out  true   source  new defaultformathelper
public rewritevisitor rewritercontext config
this config   config
factory   new rewriterfactory config
public void flushstream
config getoutput   flush
protected void print string s
config getoutput   print s
protected void print char c
config getoutput   print c
protected void print biginteger i
config getoutput   print i
protected void print int i
config getoutput   print i
protected void print long l
config getoutput   print l
protected void print double d
config getoutput   print d
private void entercall
config getcalldepth   entercall
private void leavecall
config getcalldepth   leavecall
private boolean incall
return config getcalldepth   incall
protected void printnewlineandindentation
if  config hasheredocument    config fetchheredocument   print
print config getformathelper   getlinedelimiter
config getindentor   printindentation config getoutput
private static boolean isreceiveracallnode callnode n
return  n getreceivernode   instanceof callnode    n getreceivernode   instanceof fcallnode
private void printcommentsbefore node ivisited
for  commentnode n  ivisited getcomments
if  getstartline n  < getstartline ivisited
visitnode n
print n getcontent
printnewlineandindentation
protected boolean printcommentsafter node ivisited
boolean hascomment   false
for  commentnode n  ivisited getcomments
if getstartline n  >  getendline ivisited
print
visitnode n
print n getcontent
hascomment   true
return hascomment
public void visitnode node ivisited
if  ivisited    null  return
printcommentsbefore ivisited
if  ivisited instanceof argumentnode
print   argumentnode  ivisited  getname
else
ivisited accept this
printcommentsafter ivisited
config setlastposition ivisited getposition
public void visititer iterator iterator
while  iterator hasnext
visitnode  node  iterator next
private void visititerandskipfirst iterator iterator
iterator next
visititer iterator
private static boolean isstartonnewline node first  node second
if  first    null    second    null  return false
return  getstartline first  < getstartline second
private boolean needsparentheses node n
return  n    null     n childnodes   size   > 1    incall      firstchild n  instanceof hashnode
firstchild n  instanceof newlinenode    firstchild n  instanceof ifnode
private void printcallarguments node argsnode  node iternode
if  argsnode    null    argsnode childnodes   size   < 1    iternode    null  return
if  argsnode    null    argsnode childnodes   size      1
firstchild argsnode  instanceof hashnode    iternode    null
hashnode hashnode    hashnode  firstchild argsnode
if hashnode getlistnode   childnodes   size   < 1
print
else
print
printhashnodecontent hashnode
return
boolean paranthesesprinted   needsparentheses argsnode
argsnode    null    iternode    null    iternode instanceof blockpassnode
argsnode    null    argsnode childnodes   size   > 0    iternode    null
if  paranthesesprinted
print
else if  argsnode    null
print config getformathelper   beforecallarguments
if  firstchild argsnode  instanceof newlinenode
config setskipnextnewline true
entercall
if  argsnode instanceof splatnode
visitnode argsnode
else if  argsnode    null
visitandprintwithseparator argsnode childnodes   iterator
if  iternode instanceof blockpassnode
if  argsnode    null  print config getformathelper   getlistseparator
print
visitnode   blockpassnode  iternode  getbodynode
if  paranthesesprinted
print
else
print config getformathelper   aftercallarguments
leavecall
public void visitandprintwithseparator iterator<node> it
while  it hasnext
node n   it next
factory createignorecommentsrewritevisitor   visitnode n
if  it hasnext
print config getformathelper   getlistseparator
if n hascomments
factory createrewritevisitor   visititer n getcomments   iterator
printnewlineandindentation
public instruction visitaliasnode aliasnode ivisited
print
print ivisited getnewname
print
print ivisited getoldname
printcommentsatend ivisited
return null
private boolean sourcerangeequals int start  int stop  string compare
return  stop <  config getsource   length      sourcesubstringequals start  stop   start  compare
private boolean sourcerangecontains isourceposition pos  string searched
return pos getstartoffset   < config getsource   length
pos getendoffset   < config getsource   length     1
config getsource   substring pos getstartoffset    pos getendoffset    indexof searched  >  1
public instruction visitandnode andnode ivisited
entercall
visitnode ivisited getfirstnode
if  sourcerangecontains ivisited getposition
print
else
print
visitnode ivisited getsecondnode
leavecall
return null
private arraylist<node> collectallarguments argsnode ivisited
arraylist<node> arguments   new arraylist<node>
if  ivisited getargs      null  arguments addall ivisited getargs   childnodes
if  ivisited getoptargs      null  arguments addall ivisited getoptargs   childnodes
if  ivisited getrestargnode      null
arguments add new constnode ivisited getrestargnode   getposition        ivisited getrestargnode   getname
if  ivisited getblockargnode      null  arguments add ivisited getblockargnode
return arguments
private boolean hasnodecommentsatend node n
for  node comment  n getcomments
if  getstartline comment     getstartline n   return true
return false
private void printcommentsinargs node n  boolean hasnext
if  hasnodecommentsatend n     hasnext  print
if  printcommentsafter n     hasnext
printnewlineandindentation
else if  hasnext
print config getformathelper   getlistseparator
public instruction visitargsnode argsnode ivisited
for  iterator<node> it   collectallarguments ivisited  iterator    it hasnext
node n   it next
if  n instanceof argumentnode
print   argumentnode  n  getname
printcommentsinargs n  it hasnext
else
visitnode n
if  it hasnext    print config getformathelper   getlistseparator
if   it hasnext    print config getformathelper   aftermethodarguments
return null
public instruction visitargscatnode argscatnode ivisited
print
visitandprintwithseparator ivisited getfirstnode   childnodes   iterator
print config getformathelper   getlistseparator
print
visitnode ivisited getsecondnode
print
return null
public instruction visitarraynode arraynode ivisited
print
entercall
visitandprintwithseparator ivisited childnodes   iterator
leavecall
print
return null
public instruction visitbackrefnode backrefnode ivisited
print
print ivisited gettype
return null
public instruction visitbeginnode beginnode ivisited
print
visitnodeinindentation ivisited getbodynode
printnewlineandindentation
print
return null
public instruction visitbignumnode bignumnode ivisited
print ivisited getvalue
return null
public instruction visitblockargnode blockargnode ivisited
print
print ivisited getname
return null
public instruction visitblocknode blocknode ivisited
visititer ivisited childnodes   iterator
return null
public static int getlocalvarindex node n
return n instanceof localvarnode ?   localvarnode  n  getindex      1
public instruction visitblockpassnode blockpassnode ivisited
visitnode ivisited getbodynode
return null
public instruction visitbreaknode breaknode ivisited
print
return null
public instruction visitconstdeclnode constdeclnode ivisited
printasgnnode ivisited
return null
public instruction visitclassvarasgnnode classvarasgnnode ivisited
printasgnnode ivisited
return null
public instruction visitclassvardeclnode classvardeclnode ivisited
printasgnnode ivisited
return null
public instruction visitclassvarnode classvarnode ivisited
print ivisited getname
return null
private boolean isnumericnode node n
return  n    null     n instanceof fixnumnode    n instanceof bignumnode
private boolean isnameanoperator string name
return operators contain name
private boolean printspaceinsteadofdot callnode n
return  isnameanoperator n getname         n getargsnode   childnodes   size   > 1
protected void printassignmentoperator
print config getformathelper   beforeassignment
print
print config getformathelper   afterassignment
private instruction printindexassignment attrassignnode ivisited
entercall
visitnode ivisited getreceivernode
leavecall
print
visitnode firstchild ivisited getargsnode
print
printassignmentoperator
if  ivisited getargsnode   childnodes   size   > 1
visitnode  node  ivisited getargsnode   childnodes   get 1
return null
private instruction printindexaccess callnode visited
entercall
visitnode visited getreceivernode
leavecall
print
if  visited getargsnode      null
visitandprintwithseparator visited getargsnode   childnodes   iterator
print
return null
private instruction printnegativnumericnode callnode visited
print
visitnode visited getreceivernode
return null
private boolean isnegativenumericnode callnode visited
return isnumericnode visited getreceivernode       visited getname   equals
private void printcallreceivernode callnode ivisited
if  ivisited getreceivernode   instanceof hashnode  print
if  isreceiveracallnode ivisited      printspaceinsteadofdot ivisited
entercall
visitnewlineinparentheses ivisited getreceivernode
leavecall
else
visitnewlineinparentheses ivisited getreceivernode
if  ivisited getreceivernode   instanceof hashnode  print
protected boolean inmultipleassignment
return false
public instruction visitcallnode callnode ivisited
if  isnegativenumericnode ivisited   return printnegativnumericnode ivisited
if  ivisited getname   equals     return printindexaccess ivisited
printcallreceivernode ivisited
print printspaceinsteadofdot ivisited  ?
if  inmultipleassignment      ivisited getname   endswith
print ivisited getname   substring 0  ivisited getname   length     1
else
print ivisited getname
if  isnameanoperator ivisited getname
if  firstchild ivisited getargsnode    instanceof newlinenode  print
config getcalldepth   disablecalldepth
printcallarguments ivisited getargsnode    ivisited getiternode
if  isnameanoperator ivisited getname     config getcalldepth   enablecalldepth
if    ivisited getiternode   instanceof blockpassnode   visitnode ivisited getiternode
return null
public instruction visitcasenode casenode ivisited
print
visitnode ivisited getcasenode
visitnode ivisited getfirstwhennode
printnewlineandindentation
print
return null
private boolean printcommentsin node ivisited
boolean hadcomment   false
for  commentnode n  ivisited getcomments
if getstartline n  > getstartline ivisited     getendline n  < getendline ivisited
hadcomment   true
visitnode n
print n getcontent
printnewlineandindentation
return hadcomment
public instruction visitclassnode classnode ivisited
print
visitnode ivisited getcpath
if  ivisited getsupernode      null
print
visitnode ivisited getsupernode
new classbodywriter this  ivisited getbodynode    write
printnewlineandindentation
printcommentsin ivisited
print
return null
public instruction visitcolon2node colon2node ivisited
if  ivisited getleftnode      null
visitnode ivisited getleftnode
print
print ivisited getname
return null
public instruction visitcolon3node colon3node ivisited
print
print ivisited getname
return null
public instruction visitconstnode constnode ivisited
print ivisited getname
return null
public instruction visitdasgnnode dasgnnode ivisited
printasgnnode ivisited
return null
public instruction visitdregxnode dregexpnode ivisited
config getprintquotesinstring   set false
print getfirstregexpenclosure ivisited
factory createdregxrewritevisitor   visititer ivisited childnodes   iterator
print getsecondregexpenclosure ivisited
printregexpoptions ivisited getoptions
config getprintquotesinstring   revert
return null
private instruction createheredocument dstrnode ivisited
config getprintquotesinstring   set false
print
stringwriter writer   new stringwriter
printwriter oldout   config getoutput
config setoutput new printwriter writer
for  iterator it   ivisited childnodes   iterator    it hasnext
factory createheredocrewritevisitor   visitnode  node  it next
if  it hasnext    config setskipnextnewline true
config setoutput oldout
config depositheredocument writer getbuffer   tostring
config getprintquotesinstring   revert
return null
public instruction visitdstrnode dstrnode ivisited
if  firstchild ivisited  instanceof strnode    stringisheredocument  strnode  firstchild ivisited
return createheredocument ivisited
if  config getprintquotesinstring   istrue    print getseparatorforstr ivisited
config getprintquotesinstring   set false
leavecall
for  node child  ivisited childnodes
visitnode child
entercall
config getprintquotesinstring   revert
if  config getprintquotesinstring   istrue    print getseparatorforstr ivisited
return null
public instruction visitdsymbolnode dsymbolnode ivisited
print
if  config getprintquotesinstring   istrue    print getseparatorforsym ivisited
config getprintquotesinstring   set false
leavecall
for  node child  ivisited childnodes
visitnode child
entercall
config getprintquotesinstring   revert
if  config getprintquotesinstring   istrue    print getseparatorforsym ivisited
return null
public instruction visitdvarnode dvarnode ivisited
print ivisited getname
return null
public instruction visitdxstrnode dxstrnode ivisited
config getprintquotesinstring   set false
print
visititer ivisited childnodes   iterator
print
config getprintquotesinstring   revert
return null
public instruction visitdefinednode definednode ivisited
print
entercall
visitnode ivisited getexpressionnode
leavecall
return null
private boolean hasarguments node n
if  n instanceof argsnode
argsnode args    argsnode  n
return  args getargs      null    args getoptargs      null
args getblockargnode      null    args getrestargnode      null
else if  n instanceof arraynode    n childnodes   isempty
return false
return true
protected void printcommentsatend node n
for  commentnode comment  n getcomments
if  getstartline n     getstartline comment
print
visitnode comment
print comment getcontent
private void printdefnode node parent  string name  node args  staticscope scope  node bodynode
print name
config getlocalvariables   addlocalvariable scope
if  hasarguments args
print config getformathelper   beforemethodarguments
visitnode args
printcommentsatend parent
visitnode bodynode
config getindentor   outdent
printnewlineandindentation
printcommentsin parent
print
public instruction visitdefnnode defnnode ivisited
config getindentor   indent
print
printdefnode ivisited  ivisited getname    ivisited getargsnode    ivisited getscope    ivisited getbodynode
return null
public instruction visitdefsnode defsnode ivisited
config getindentor   indent
print
visitnode ivisited getreceivernode
print
printdefnode ivisited  ivisited getname    ivisited getargsnode    ivisited getscope    ivisited getbodynode
return null
public instruction visitdotnode dotnode ivisited
entercall
visitnode ivisited getbeginnode
print
if  ivisited isexclusive    print
visitnode ivisited getendnode
leavecall
return null
public instruction visitensurenode ensurenode ivisited
visitnode ivisited getbodynode
config getindentor   outdent
printnewlineandindentation
print
visitnodeinindentation ivisited getensurenode
config getindentor   indent
return null
public instruction visitevstrnode evstrnode ivisited
print
if    ivisited getbody   instanceof nthrefnode   print
config getprintquotesinstring   set true
visitnode unwrapnewlinenode ivisited getbody
config getprintquotesinstring   revert
if    ivisited getbody   instanceof nthrefnode   print
return null
private node unwrapnewlinenode node node
return node instanceof newlinenode ?   newlinenode  node  getnextnode     node
public instruction visitfcallnode fcallnode ivisited
print ivisited getname
if  ivisited getiternode      null  config getcalldepth   entercall
printcallarguments ivisited getargsnode    ivisited getiternode
if  ivisited getiternode      null  config getcalldepth   leavecall
if    ivisited getiternode   instanceof blockpassnode   visitnode ivisited getiternode
return null
public instruction visitfalsenode falsenode ivisited
print
return null
public instruction visitfixnumnode fixnumnode ivisited
print ivisited getvalue
return null
public instruction visitflipnode flipnode ivisited
entercall
visitnode ivisited getbeginnode
print
if  ivisited isexclusive   	print
print
visitnode ivisited getendnode
leavecall
return null
public instruction visitfloatnode floatnode ivisited
print ivisited getvalue
return null
public instruction visitfornode fornode ivisited
print
visitnode ivisited getvarnode
print
visitnode ivisited getiternode
visitnodeinindentation ivisited getbodynode
printnewlineandindentation
print
return null
public instruction visitglobalasgnnode globalasgnnode ivisited
printasgnnode ivisited
return null
public instruction visitglobalvarnode globalvarnode ivisited
print ivisited getname
return null
private void printhashnodecontent hashnode ivisited
print config getformathelper   beforehashcontent
if  ivisited getlistnode      null
for  iterator it   ivisited getlistnode   childnodes   iterator    it hasnext
visitnode  node  it next
print config getformathelper   hashassignment
visitnode  node  it next
if  it hasnext    print config getformathelper   getlistseparator
print config getformathelper   afterhashcontent
public instruction visithashnode hashnode ivisited
print
printhashnodecontent ivisited
print
return null
private void printasgnnode assignablenode n
print   inamenode  n  getname
if  n getvaluenode      null  return
printassignmentoperator
visitnewlineinparentheses n getvaluenode
public instruction visitinstasgnnode instasgnnode ivisited
printasgnnode ivisited
return null
public instruction visitinstvarnode instvarnode ivisited
print ivisited getname
return null
/**
* elsif-conditions in the ast are represented by multiple nested if / else
* combinations. this method takes a node and checks if the node is an
* elsif-statement or a normal else node.
*
* @param ivisited
* @return returns the last elsenode or null.
*/
private node printelsifnodes node ivisited
if  ivisited    null    ivisited instanceof ifnode
ifnode n    ifnode  ivisited
printnewlineandindentation
print
visitnode n getcondition
visitnodeinindentation n getthenbody
return printelsifnodes n getelsebody
return ivisited    null ? ivisited   null
private instruction printshortifstatement ifnode n
if  n getthenbody      null
visitnode n getelsebody
print
visitnode n getcondition
else
entercall
factory createshortifnoderewritevisitor   visitnode n getcondition
print
factory createshortifnoderewritevisitor   visitnode n getthenbody
print
factory createshortifnoderewritevisitor   visitnewlineinparentheses n getelsebody
leavecall
return null
private boolean isassignment node n
return  n instanceof dasgnnode    n instanceof globalasgnnode
n instanceof instasgnnode    n instanceof localasgnnode    n instanceof classvarasgnnode
private boolean sourcesubstringequals int offset  int length  string str
return config getsource   length   >  offset   length
config getsource   substring offset  offset   length  equals str
private boolean isshortifstatement ifnode ivisited
return  isonsingleline ivisited getcondition    ivisited getelsebody
ivisited getelsebody   instanceof ifnode
sourcesubstringequals getstartoffset ivisited   2
public instruction visitifnode ifnode ivisited
if  isshortifstatement ivisited   return printshortifstatement ivisited
print
if  isassignment ivisited getcondition     entercall
// we have to skip a possible newline here:
visitnewlineinparentheses ivisited getcondition
if  isassignment ivisited getcondition     leavecall
config getindentor   indent
// we have to check this to generate valid code for this style: "return
// if true", because there is no newline
if   isstartonnewline ivisited getcondition    ivisited getthenbody       ivisited getthenbody      null
printnewlineandindentation
visitnode ivisited getthenbody
config getindentor   outdent
node elsenode   printelsifnodes ivisited getelsebody
if  elsenode    null
printnewlineandindentation
print
config getindentor   indent
visitnode elsenode
config getindentor   outdent
printnewlineandindentation
print
return null
private boolean isonsingleline node n
return isonsingleline n  n
private boolean isonsingleline node n1  node n2
if  n1    null    n2    null  return false
return  getstartline n1     getendline n2
private boolean printitervarnode iternode n
if  n getvarnode      null  return false
print
visitnode n getvarnode
print
return true
public instruction visititernode iternode ivisited
if  isonsingleline ivisited
print config getformathelper   beforeiterbrackets
print
print config getformathelper   beforeitervars
if printitervarnode ivisited   print config getformathelper   afteritervars
config setskipnextnewline true
visitnode ivisited getbodynode
print config getformathelper   beforeclosingiterbrackets
print
else
print
printitervarnode ivisited
visitnodeinindentation ivisited getbodynode
printnewlineandindentation
print
return null
public instruction visitlocalasgnnode localasgnnode ivisited
config getlocalvariables   addlocalvariable ivisited getindex    ivisited getname
printasgnnode ivisited
return null
public instruction visitlocalvarnode localvarnode ivisited
print ivisited getname
return null
public instruction visitmultipleasgnnode multipleasgnnode ivisited
if  ivisited getheadnode      null
factory createmultipleassignmentrewritevisitor   visitandprintwithseparator ivisited getheadnode   childnodes   iterator
if  ivisited getvaluenode      null
visitnode ivisited getargsnode
return null
print config getformathelper   beforeassignment
print
print config getformathelper   afterassignment
entercall
if  ivisited getvaluenode   instanceof arraynode
visitandprintwithseparator ivisited getvaluenode   childnodes   iterator
else
visitnode ivisited getvaluenode
leavecall
return null
public instruction visitmatch2node match2node ivisited
visitnode ivisited getreceivernode
print config getformathelper   matchoperator
entercall
visitnode ivisited getvaluenode
leavecall
return null
public instruction visitmatch3node match3node ivisited
visitnode ivisited getvaluenode
print config getformathelper   matchoperator
visitnode ivisited getreceivernode
return null
public instruction visitmatchnode matchnode ivisited
visitnode ivisited getregexpnode
return null
public instruction visitmodulenode modulenode ivisited
print
config getindentor   indent
visitnode ivisited getcpath
visitnode ivisited getbodynode
config getindentor   outdent
printnewlineandindentation
print
return null
public instruction visitnewlinenode newlinenode ivisited
if  config isskipnextnewline
config setskipnextnewline false
else
printnewlineandindentation
visitnode ivisited getnextnode
return null
public instruction visitnextnode nextnode ivisited
print
return null
public instruction visitnilnode nilnode ivisited
print
return null
public instruction visitnotnode notnode ivisited
if  ivisited getconditionnode   instanceof callnode  entercall
print sourcerangecontains ivisited getposition       ?
visitnewlineinparentheses ivisited getconditionnode
if  ivisited getconditionnode   instanceof callnode  leavecall
return null
public instruction visitnthrefnode nthrefnode ivisited
print
print ivisited getmatchnumber
return null
private boolean issimplenode node n
return  n instanceof localvarnode    n instanceof assignablenode
n instanceof instvarnode    n instanceof classvarnode
n instanceof globalvarnode    n instanceof constdeclnode
n instanceof vcallnode    isnumericnode n
public instruction visitopelementasgnnode opelementasgnnode ivisited
if   issimplenode ivisited getreceivernode
visitnewlineinparentheses ivisited getreceivernode
else
visitnode ivisited getreceivernode
visitnode ivisited getargsnode
print
print ivisited getoperatorname
print
print config getformathelper   afterassignment
visitnode ivisited getvaluenode
return null
public instruction visitopasgnnode opasgnnode ivisited
visitnode ivisited getreceivernode
print
print ivisited getvariablename
print
print ivisited getoperatorname
print
print config getformathelper   afterassignment
visitnode ivisited getvaluenode
return null
private void printopasgnnode node n  string operator
entercall
print   inamenode  n  getname
print config getformathelper   beforeassignment
print operator
print config getformathelper   afterassignment
visitnode   assignablenode  n  getvaluenode
leavecall
public instruction visitopasgnandnode opasgnandnode ivisited
printopasgnnode ivisited getsecondnode
return null
public instruction visitopasgnornode opasgnornode ivisited
printopasgnnode ivisited getsecondnode
return null
public instruction visitornode ornode ivisited
entercall
visitnode ivisited getfirstnode
leavecall
print sourcerangecontains ivisited getposition       ?
entercall
visitnewlineinparentheses ivisited getsecondnode
leavecall
return null
public instruction visitpostexenode postexenode ivisited
// this node contains nothing but an empty list, so we don't have to
// process anything
return null
public instruction visitpreexenode preexenode ivisited
// this node contains nothing but an empty list, so we don't have to
// process anything
return null
public instruction visitredonode redonode ivisited
print
return null
private string getfirstregexpenclosure node n
return isspecialregexnotation n  ?
private string getsecondregexpenclosure node n
return isspecialregexnotation n  ?
private boolean isspecialregexnotation node n
return getstartoffset n  >  2
config getsource   length   < getstartoffset n
config getsource   charat getstartoffset n    3
private void printregexpoptions int option
if   option   1     1  print
if   option   2     2  print
if   option   4     4  print
public instruction visitregexpnode regexpnode ivisited
print getfirstregexpenclosure ivisited
print ivisited getvalue   tostring
print getsecondregexpenclosure ivisited
printregexpoptions ivisited getoptions
return null
public static node firstchild node n
if  n    null    n childnodes   size   <  0  return null
return  node  n childnodes   get 0
public instruction visitrescuebodynode rescuebodynode ivisited
if  config getlastposition   getstartline      getendline ivisited getbodynode
print
else
print
if  ivisited getexceptionnodes      null
printexceptionnode ivisited
else
visitnodeinindentation ivisited getbodynode
if  ivisited getoptrescuenode      null  printnewlineandindentation
visitnode ivisited getoptrescuenode
return null
private void printexceptionnode rescuebodynode n
if  n getexceptionnodes      null  return
print
visitnode firstchild n getexceptionnodes
node firstbodynode   n getbodynode
if  n getbodynode   instanceof blocknode  firstbodynode   firstchild n getbodynode
// if the exception is assigned to a variable, we have to skip the first
// node in the body
if  firstbodynode instanceof assignablenode
print config getformathelper   beforeassignment
print
print config getformathelper   afterassignment
print   inamenode  firstbodynode  getname
if  firstbodynode instanceof localasgnnode
config getlocalvariables   addlocalvariable   localasgnnode  firstbodynode  getindex
localasgnnode  firstbodynode  getname
config getindentor   indent
visititerandskipfirst n getbodynode   childnodes   iterator
config getindentor   outdent
else
visitnodeinindentation n getbodynode
public instruction visitrescuenode rescuenode ivisited
visitnode ivisited getbodynode
config getindentor   outdent
if  ivisited getrescuenode   getbodynode      null
getstartline ivisited     getendline ivisited getrescuenode   getbodynode
printnewlineandindentation
if  ivisited getrescuenode   getbodynode      null
printnewlineandindentation
print
printexceptionnode ivisited getrescuenode
else
visitnode ivisited getrescuenode
if  ivisited getelsenode      null
printnewlineandindentation
print
visitnodeinindentation ivisited getelsenode
config getindentor   indent
return null
public instruction visitretrynode retrynode ivisited
print
return null
public static node unwrapsinglearraynode node n
if    n instanceof arraynode   return n
if    arraynode  n  childnodes   size   > 1  return n
return firstchild  arraynode  n
public instruction visitreturnnode returnnode ivisited
print
entercall
if  ivisited getvaluenode      null
print
visitnode unwrapsinglearraynode ivisited getvaluenode
leavecall
return null
public instruction visitsclassnode sclassnode ivisited
print
config getindentor   indent
visitnode ivisited getreceivernode
visitnode ivisited getbodynode
config getindentor   outdent
printnewlineandindentation
print
return null
public instruction visitselfnode selfnode ivisited
print
return null
public instruction visitsplatnode splatnode ivisited
print
visitnode ivisited getvalue
return null
private boolean stringisheredocument strnode n
return sourcerangeequals getstartoffset n    1  getstartoffset n    3
sourcerangeequals getstartoffset n   getstartoffset n    3
protected char getseparatorforsym node n
// enebo: i added one since a sym will start with ':'...this seems like an incomplete assumption
if  config getsource   length   >   getstartoffset n  1
config getsource   charat getstartoffset n  1
return
return
protected char getseparatorforstr node n
if  config getsource   length   >  getstartoffset n
config getsource   charat getstartoffset n
return
return
protected boolean indregxnode
return false
public instruction visitstrnode strnode ivisited
// look for a here-document:
if  stringisheredocument ivisited
print
config depositheredocument ivisited getvalue   tostring
return null
if ivisited getvalue   equals
if config getprintquotesinstring   istrue    print
return null
// don't print quotes if we are a subpart of an other here-document
if  config getprintquotesinstring   istrue    print getseparatorforstr ivisited
if  indregxnode
print ivisited getvalue   tostring
else
matcher matcher   pattern compile     '] "  matcher ivisited getvalue   tostring
if  matcher find
string unescchar   unescapechar matcher group 1  charat 0
print matcher replaceall     unescchar
else
print ivisited getvalue   tostring
if  config getprintquotesinstring   istrue    print getseparatorforstr ivisited
return null
public static string unescapechar char escapedchar
switch  escapedchar
case
return
case
return
case
return
case
return
case
return  "
case
return
case
return
default
return null
private boolean needssupernodeparentheses supernode n
return n getargsnode   childnodes   isempty
config getsource   charat getendoffset n
public instruction visitsupernode supernode ivisited
print
if  needssupernodeparentheses ivisited   print
printcallarguments ivisited getargsnode    ivisited getiternode
if  needssupernodeparentheses ivisited   print
return null
public instruction visitsvaluenode svaluenode ivisited
visitnode ivisited getvalue
return null
public instruction visitsymbolnode symbolnode ivisited
print
print ivisited getname
return null
public instruction visittoarynode toarynode ivisited
visitnode ivisited getvalue
return null
public instruction visittruenode truenode ivisited
print
return null
public instruction visitundefnode undefnode ivisited
print
print ivisited getname
return null
public instruction visituntilnode untilnode ivisited
print
visitnode ivisited getconditionnode
visitnodeinindentation ivisited getbodynode
printnewlineandindentation
print
return null
public instruction visitvaliasnode valiasnode ivisited
print
print ivisited getnewname
print
print ivisited getoldname
return null
public instruction visitvcallnode vcallnode ivisited
print ivisited getname
return null
public void visitnodeinindentation node n
config getindentor   indent
visitnode n
config getindentor   outdent
public instruction visitwhennode whennode ivisited
printnewlineandindentation
print
entercall
visitandprintwithseparator ivisited getexpressionnodes   childnodes   iterator
leavecall
visitnodeinindentation ivisited getbodynode
if   ivisited getnextcase   instanceof whennode    ivisited getnextcase      null
visitnode ivisited getnextcase
else
printnewlineandindentation
print
visitnodeinindentation ivisited getnextcase
return null
protected void visitnewlineinparentheses node n
if  n instanceof newlinenode
if    newlinenode  n  getnextnode   instanceof splatnode
print
visitnode   newlinenode  n  getnextnode
print
else
print
visitnode   newlinenode  n  getnextnode
print
else
visitnode n
private void printwhilestatement whilenode ivisited
print
if  isassignment ivisited getconditionnode     entercall
visitnewlineinparentheses ivisited getconditionnode
if  isassignment ivisited getconditionnode     leavecall
visitnodeinindentation ivisited getbodynode
printnewlineandindentation
print
private void printdowhilestatement whilenode ivisited
print
visitnodeinindentation ivisited getbodynode
printnewlineandindentation
print
visitnode ivisited getconditionnode
public instruction visitwhilenode whilenode ivisited
if  ivisited evaluateatstart
printwhilestatement ivisited
else
printdowhilestatement ivisited
return null
public instruction visitxstrnode xstrnode ivisited
print
print ivisited getvalue   tostring
print
return null
public instruction visityieldnode yieldnode ivisited
print
if  ivisited getargsnode      null
print needsparentheses ivisited getargsnode    ?
entercall
if  ivisited getargsnode   instanceof arraynode
visitandprintwithseparator ivisited getargsnode   childnodes   iterator
else
visitnode ivisited getargsnode
leavecall
if  needsparentheses ivisited getargsnode     print
return null
public instruction visitzarraynode zarraynode ivisited
print
return null
public instruction visitzsupernode zsupernode ivisited
print
return null
private static int getstartline node n
return n getposition   getstartline
private static int getstartoffset node n
return n getposition   getstartoffset
private static int getendline node n
return n getposition   getendline
protected static int getendoffset node n
return n getposition   getendoffset
public rewritercontext getconfig
return config
public static string createcodefromnode node node  string document
return createcodefromnode node  document  new defaultformathelper
public static string createcodefromnode node node  string document  formathelper helper
stringwriter writer   new stringwriter
rewritercontext ctx   new rewritercontext writer  document  helper
rewritevisitor rewriter   new rewritevisitor ctx
rewriter visitnode node
return writer tostring
public instruction visitargspushnode argspushnode node
assert false
return null
public instruction visitattrassignnode attrassignnode ivisited
if  ivisited getname   equals     return printindexassignment ivisited
if  ivisited getname   endswith
visitnode ivisited getreceivernode
print
printnamewithoutequalsign ivisited
printassignmentoperator
if  ivisited getargsnode      null
visitandprintwithseparator ivisited getargsnode   childnodes   iterator
else
assert false
return null
private void printnamewithoutequalsign inamenode ivisited
print ivisited getname   substring 0  ivisited getname   length     1
public instruction visitrootnode rootnode ivisited
config getlocalvariables   addlocalvariable ivisited getstaticscope
visitnode ivisited getbodynode
if  config hasheredocument    config fetchheredocument   print
return null