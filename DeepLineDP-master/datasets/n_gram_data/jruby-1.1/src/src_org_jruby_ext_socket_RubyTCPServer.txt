/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2007 ola bini <ola@ologix.com>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby ext socket
import java io filedescriptor
import java io ioexception
import java net bindexception
import java net inetaddress
import java net inetsocketaddress
import java net unknownhostexception
import java nio channels selectionkey
import java nio channels selector
import java nio channels serversocketchannel
import org jruby ruby
import org jruby rubyclass
import org jruby rubyfixnum
import org jruby rubyio
import org jruby rubyinteger
import org jruby rubynumeric
import org jruby anno jrubymethod
import org jruby runtime block
import org jruby runtime methodindex
import org jruby runtime objectallocator
import org jruby runtime threadcontext
import org jruby runtime visibility
import org jruby runtime builtin irubyobject
import org jruby util io modeflags
import org jruby util io channeldescriptor
import org jruby util io invalidvalueexception
/**
* @author <a href="mailto:ola.bini@ki.se">ola bini</a>
*/
public class rubytcpserver extends rubytcpsocket
static void createtcpserver ruby runtime
rubyclass rb_ctcpserver   runtime defineclass    runtime fastgetclass     tcpserver_allocator
rb_ctcpserver defineannotatedmethods rubytcpserver class
runtime getobject   fastsetconstant   rb_ctcpserver
private static objectallocator tcpserver_allocator   new objectallocator
public irubyobject allocate ruby runtime  rubyclass klass
return new rubytcpserver runtime  klass
public rubytcpserver ruby runtime  rubyclass type
super runtime  type
private serversocketchannel ssc
private inetsocketaddress socket_address
@jrubymethod name      required   1  optional   1  visibility   visibility private
public irubyobject initialize irubyobject args
irubyobject hostname   args
irubyobject port   args length > 1 ? args   getruntime   getnil
if hostname isnil
hostname   getruntime   newstring
else if  hostname instanceof rubyfixnum
// numeric host, use it for port
port   hostname
hostname   getruntime   newstring
string shost   hostname converttostring   tostring
try
inetaddress addr   inetaddress getbyname shost
ssc   serversocketchannel open
int portint
if  port instanceof rubyinteger
portint   rubynumeric fix2int port
else
irubyobject portstring   port converttostring
irubyobject portinteger   portstring converttointeger methodindex to_i
portint   rubynumeric fix2int portinteger
if  portint <  0
portint   rubynumeric fix2int rubysocket getservbyname getruntime   getobject    new irubyobject  portstring
socket_address   new inetsocketaddress addr  portint
ssc socket   bind socket_address
initsocket new channeldescriptor ssc  rubyio getnewfileno    new modeflags modeflags rdwr   new filedescriptor
catch  invalidvalueexception ex
throw getruntime   newerrnoeinvalerror
catch unknownhostexception e
throw sockerr this
catch bindexception e
//            e.printstacktrace();
throw getruntime   newerrnoeaddrinuseerror
catch ioexception e
throw sockerr this
return this
@jrubymethod name
public irubyobject accept
rubytcpsocket socket   new rubytcpsocket getruntime   getruntime   fastgetclass
threadcontext context   getruntime   getcurrentcontext
try
ssc configureblocking false
while  true
boolean ready   context getthread   selectforaccept this
if   ready
// we were woken up without being selected...poll for thread events and go back to sleep
getruntime   getcurrentcontext   pollthreadevents
else
try
// otherwise one key has been selected (ours) so we get the channel and hand it off
socket initsocket new channeldescriptor ssc accept    rubyio getnewfileno    new modeflags modeflags rdwr   new filedescriptor
catch  invalidvalueexception ex
throw getruntime   newerrnoeinvalerror
return socket
catch ioexception e
throw sockerr this
@jrubymethod name
public irubyobject accept_nonblock
rubytcpsocket socket   new rubytcpsocket getruntime   getruntime   fastgetclass
selector selector   null
try
ssc configureblocking false
selector   selector open
selectionkey key   ssc register selector  selectionkey op_accept
int selected   selector selectnow
if  selected    0
// no connection immediately accepted, let them try again
throw getruntime   newerrnoeagainerror
else
try
// otherwise one key has been selected (ours) so we get the channel and hand it off
socket initsocket new channeldescriptor ssc accept    rubyio getnewfileno    new modeflags modeflags rdwr   new filedescriptor
catch  invalidvalueexception ex
throw getruntime   newerrnoeinvalerror
return socket
catch ioexception e
throw sockerr this
finally
try
if  selector    null  selector close
catch  ioexception ioe
@jrubymethod name      required   1
public irubyobject listen irubyobject backlog
return rubyfixnum zero getruntime
@jrubymethod name      rest   true
public irubyobject peeraddr irubyobject args
throw getruntime   newnotimplementederror
@jrubymethod name      rest   true
public irubyobject getpeername irubyobject args
throw getruntime   newnotimplementederror
@jrubymethod name      rest   true  frame   true  meta   true
public static irubyobject open irubyobject recv  irubyobject args  block block
threadcontext context   recv getruntime   getcurrentcontext
irubyobject tcpserver   recv callmethod context     args
if   block isgiven    return tcpserver
try
return block yield context  tcpserver
finally
tcpserver callmethod context