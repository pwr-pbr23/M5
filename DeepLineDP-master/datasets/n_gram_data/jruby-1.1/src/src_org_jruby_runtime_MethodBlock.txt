/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2002-2004 anders bengtsson <ndrsbngtssn@yahoo.se>
* copyright (c) 2001-2004 jan arne petersen <jpetersen@uni-bonn.de>
* copyright (c) 2002 benoit cerrina <b.cerrina@wanadoo.fr>
* copyright (c) 2004-2007 thomas e enebo <enebo@acm.org>
* copyright (c) 2004 stefan matthias aust <sma@3plus4.de>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby runtime
import org jruby rubymethod
import org jruby rubymodule
import org jruby exceptions jumpexception
import org jruby parser staticscope
import org jruby runtime builtin irubyobject
import org jruby runtime callback callback
/**
*  internal live representation of a block ({...} or do ... end).
*/
public class methodblock extends blockbody
private final rubymethod method
private final callback callback
private final arity arity
// this is a dummy scope; we should find a way to make that more explicit
private final staticscope staticscope
public static block createmethodblock threadcontext context  dynamicscope dynamicscope  callback callback  rubymethod method  irubyobject self
binding binding   new binding self
context getcurrentframe   duplicate
context getcurrentframe   getvisibility
context getrubyclass
dynamicscope
blockbody body   new methodblock callback  method  dynamicscope getstaticscope
return new block body  binding
public methodblock callback callback  rubymethod method  staticscope staticscope
super blockbody single_restarg
this callback   callback
this method   method
this arity   arity createarity  int  method arity   getlongvalue
this staticscope   staticscope
public irubyobject call threadcontext context  irubyobject args  binding binding  block type type
return yield context  context getruntime   newarraynocopy args   null  null  true  binding  type
protected void pre threadcontext context  rubymodule klass  binding binding
context preyieldnoscope binding  klass
protected void post threadcontext context  binding binding
context postyieldnoscope
public irubyobject yield threadcontext context  irubyobject value  binding binding  block type type
return yield context  value  null  null  false  binding  type
/**
* yield to this block, usually passed to the current call.
*
* @param context represents the current thread-specific data
* @param value the value to yield, either a single value or an array of values
* @param self the current self
* @param klass
* @param avalue should value be arrayified or not?
* @return
*/
public irubyobject yield threadcontext context  irubyobject value  irubyobject self
rubymodule klass  boolean avalue  binding binding  block type type
if  klass    null
self   binding getself
binding getframe   setself self
pre context  klass  binding
try
// this while loop is for restarting the block call in case a 'redo' fires.
while  true
try
return callback execute value  new irubyobject   method  self    block null_block
catch  jumpexception redojump rj
context pollthreadevents
// do nothing, allow loop to redo
catch  jumpexception breakjump bj
if  bj gettarget      null
bj settarget this
throw bj
catch  jumpexception nextjump nj
// a 'next' is like a local return from the block, ending this call or yield.
return  irubyobject nj getvalue
finally
post context  binding
public staticscope getstaticscope
// todo: this is actually now returning the scope of whoever called method#to_proc
// which is obviously wrong; but there's no scope to provide for many methods.
// it fixes jruby-2237, but needs a better solution.
return staticscope
public block cloneblock binding binding
// we clone dynamic scope because this will be a new instance of a block.  any previously
// captured instances of this block may still be around and we do not want to start
// overwriting those values when we create a new one.
// enebo: once we make self, lastclass, and lastmethod immutable we can remove duplicate
binding   new binding binding getself    binding getframe   duplicate    binding getvisibility    binding getklass
binding getdynamicscope   clonescope
return new block this  binding
/**
* what is the arity of this block?
*
* @return the arity
*/
public arity arity
return arity