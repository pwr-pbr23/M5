/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2006 kresten krab thorup <krab@gnu.org>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby util
import java lang ref referencequeue
import java lang ref weakreference
import java util iterator
import java util map
import java util nosuchelementexception
/**
* class <code>weakidentityhashmap</code> is a hash map that hashes
* objects based on system.identityhashmap, and holds weakly onto the
* key.  this fails if values make reference to the keys!
*
* @author <a href="mailto:krab@trifork.com">kresten krab thorup </a>
* @version 2.0
* @since 1.0
*/
public class weakidentityhashmap extends genericmap implements map
private static final float default_ratio   0 75f
private static final object null_key   new object
private referencequeue queue   new referencequeue
private static object unmaskkey object key
if  key    null_key
return null
else
return key
private object maskkey object key
if  key    null
return null_key
else
return key
class entry extends weakreference implements map entry
entry next
int key_hash
object value
public int hashcode
return key_hash ^ valuehash getvalue
public boolean equals object other
if  other instanceof map entry
map entry ent    map entry  other
return getkey      ent getkey
valueequals getvalue    ent getvalue
else
return false
entry int key_hash  object masked_key  object value  entry next  referencequeue q
super masked_key  q
this key_hash   key_hash
this value   value
this next   next
object getmaskedkey
return super get
public object getkey
return unmaskkey getmaskedkey
public object getvalue
return value
public object setvalue object value
object result   this value
this value   value
return result
boolean samekey int hash  object masked_key
return getmaskedkey      masked_key
/** the hash index */
private entry table
/** the current range for table. */
private int range
private float ratio
/** translate hash code bucket to index */
private int index int hash
return  hash   0x7ffffff  % range
/** the default and only constructor */
public weakidentityhashmap
clear
public weakidentityhashmap int size
clear math max 3  math round size default_ratio
public void clear
clear 3
void clear int size
range   size
this size   0
ratio   default_ratio
table   new entry
private void expunge
entry e
while   e    entry  queue poll       null
removeentry e
/** return the element with the given key */
public object get object key
object masked_key   maskkey key
int hash   keyhash masked_key
return get hash  masked_key
private object get int hash  object masked_key
int idx   index hash
expunge
for  entry ent   table  ent    null  ent   ent next
if  ent samekey hash  masked_key
return ent value
return null
/** return the element with the given key */
public boolean containskey object key
object masked_key   maskkey key
int hash   keyhash masked_key
return containskey hash  masked_key
private boolean containskey int hash  object masked_key
int idx   index hash
expunge
for  entry ent   table  ent    null  ent   ent next
if  ent samekey hash  masked_key
return true
return false
public object put object key  object value
object masked_key   maskkey key
int hash   keyhash masked_key
return put hash  masked_key  value
private object put int hash  object masked_key  object value
int idx   index hash
for  entry ent   table  ent    null  ent   ent next
if  ent samekey hash  masked_key
return ent setvalue value
expunge
if  1 0f   size   range > ratio
grow
idx   index hash
table   new entry hash  masked_key  value  table  queue
size    1
return null
public object remove object key
key   maskkey key
int hash   keyhash key
return remove hash  key
public object remove int hash  object key
key   maskkey key
int idx   index hash
entry entry   table
if  entry    null
if  entry samekey hash  key
table   entry next
size    1
return entry getvalue
else
entry ahead   entry next
while  ahead    null
if  ahead samekey hash  key
entry next   ahead next
size    1
return ahead getvalue
entry   ahead
ahead   ahead next
// it was not found at all!
return null
private void removeentry entry ent
int idx   index ent key_hash
entry entry   table
if  entry    null
if  entry    ent
table   entry next
size    1
return
else
entry ahead   entry next
while  ahead    null
if  ahead    ent
entry next   ahead next
size    1
return
entry   ahead
ahead   ahead next
valueremoved ent value
// can be overridden to be informed when objects are removed
protected void valueremoved object value
private void grow
int old_range   range
entry old_table   table
range   old_range   2   1
table   new entry
for  int i   0  i < old_range  i
entry entry   old_table
while  entry    null
entry ahead   entry next
int idx   index entry key_hash
entry next   table
table   entry
entry   ahead
final class entryiterator implements iterator
int idx
entry entry
entryiterator
idx   0
expunge
entry   table
locatenext
private void locatenext
// we reached the end of a list
while  entry    null
// goto next bucket
idx    1
if  idx    range
// we reached the end
return
// entry is the first element of this bucket
entry   table
public boolean hasnext
return  entry    null
public object next
object result   entry
if  result    null
throw new nosuchelementexception
else
entry   entry next
locatenext
return result
public void remove
entry remove   entry
expunge
entry   entry next
locatenext
weakidentityhashmap this removeentry remove
protected iterator entryiterator
return new entryiterator
protected final int keyhash object key
return system identityhashcode key
protected final boolean keyequals object key1  object key2
return key1    key2
public int size
expunge
return super size
public boolean isempty
return size      0