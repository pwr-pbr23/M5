/*
***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby compiler impl
import org jruby compiler compilercallback
import org jruby parser staticscope
/**
*
* @author headius
*/
public class boxedvariablecompiler extends heapbasedvariablecompiler
private staticscope scope     the static scope for the currently compiling method
private int basevariableindex
public boxedvariablecompiler
standardasmcompiler abstractmethodcompiler methodcompiler
skinnymethodadapter method
int scopeindex
int varsindex
int argsindex
int closureindex
int firsttempindex
super methodcompiler  method scopeindex  varsindex  argsindex  closureindex  firsttempindex
this basevariableindex   firsttempindex
this scopeindex   scopeindex
this varsindex   varsindex
public void beginmethod compilercallback argscallback  staticscope scope
this scope   scope
// fill non-captured java local vars with nil as well
if  scope    null
if  scope getnumberofvariables   > 0
methodcompiler loadnil
for  int i   0  i < scope getnumberofvariables    i
if  scope iscaptured i   continue
assignlocalvariable i
// move the first temp index up for each stack-based var
tempvariableindex
method pop
super beginmethod argscallback  scope
public void beginclass compilercallback bodyprep  staticscope scope
assert false
public void beginclosure compilercallback argscallback  staticscope scope
this scope   scope
// fill non-captured java local vars with nil as well
if  scope    null
methodcompiler loadnil
for  int i   0  i < scope getnumberofvariables    i
if  scope iscaptured i   continue
assignlocalvariable i
// move the first temp index up for each stack-based var
tempvariableindex
method pop
super beginclosure argscallback  scope
public void assignlocalvariable int index
if  scope iscaptured index
super assignlocalvariable index
else
// non-captured var, just use locals
method dup
method astore basevariableindex   index
public void retrievelocalvariable int index
if  scope iscaptured index
super retrievelocalvariable index
else
// non-captured, use java local vars
method aload basevariableindex   index