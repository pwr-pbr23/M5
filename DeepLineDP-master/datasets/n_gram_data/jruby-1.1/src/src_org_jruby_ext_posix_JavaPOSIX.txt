package org jruby ext posix
import java io filedescriptor
import java io ioexception
import java nio bytebuffer
import java nio charset charset
public class javaposix implements posix
posixhandler handler
javalibchelper helper
public javaposix posixhandler handler
this handler   handler
helper   new javalibchelper handler
public filestat allocatestat
return new javafilestat this  handler
public int chmod string filename  int mode
return helper chmod filename  mode
public int chown string filename  int user  int group
return helper chown filename  user  group
public filestat fstat filedescriptor descriptor
handler unimplementederror
return null
public int getegid
return unimplementedint
public int geteuid
return unimplementedint
public int getgid
return unimplementedint
public string getlogin
return helper getlogin
public int getpgid
return unimplementedint
public int getpgrp
return unimplementedint
public int getpid
return helper getpid
public int getppid
return unimplementedint
public passwd getpwent
return helper getpwent
public passwd getpwuid int which
handler unimplementederror
return null
public group getgrgid int which
handler unimplementederror
return null
public passwd getpwnam string which
handler unimplementederror
return null
public group getgrnam string which
handler unimplementederror
return null
public group getgrent
handler unimplementederror
return null
public int setpwent
return helper setpwent
public int endpwent
return helper endpwent
public int setgrent
return unimplementedint
public int endgrent
return unimplementedint
public int getuid
return unimplementedint
public int fork
return  1
public boolean isatty filedescriptor fd
return  fd    filedescriptor in
fd    filedescriptor out
fd    filedescriptor err
public int kill int pid  int signal
return unimplementedint           fixme  can be implemented
public int lchmod string filename  int mode
return unimplementedint           fixme  can be implemented
public int lchown string filename  int user  int group
return unimplementedint            fixme  can be implemented
public int link string oldpath  string newpath
return helper link oldpath  newpath
public filestat lstat string path
filestat stat   allocatestat
if  helper lstat path  stat  < 0  handler error errors enoent  path
return stat
public int mkdir string path  int mode
return helper mkdir path  mode
public string readlink string path  throws ioexception
// todo: this should not be hardcoded to 256 bytes
bytebuffer buffer   bytebuffer allocatedirect 256
int result   helper readlink path  buffer  buffer capacity
if  result     1  return null
buffer position 0
buffer limit result
return charset forname    decode buffer  tostring
public filestat stat string path
filestat stat   allocatestat
if  helper stat path  stat  < 0  handler error errors enoent  path
return stat
public int symlink string oldpath  string newpath
return helper symlink oldpath  newpath
public int setegid int egid
return unimplementedint
public int seteuid int euid
return unimplementedint
public int setgid int gid
return unimplementedint
public int getpgid int pid
return unimplementedint
public int setpgid int pid  int pgid
return unimplementedint
public int setpgrp int pid  int pgrp
return unimplementedint
public int setsid
return unimplementedint
public int setuid int uid
return unimplementedint
public int umask int mask
// todo: we can possibly maintain an internal mask and try and apply it to individual
// libc methods.
return 0
public int wait int status
return unimplementedint
public int waitpid int pid  int status  int flags
return unimplementedint
public int getpriority int which  int who
return unimplementedint
public int setpriority int which  int who  int prio
return unimplementedint
private int unimplementedint string message
handler unimplementederror message
return  1