/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2001 chad fowler <chadfowler@chadfowler.com>
* copyright (c) 2001 alan moore <alan_moore@gmx.net>
* copyright (c) 2001-2004 jan arne petersen <jpetersen@uni-bonn.de>
* copyright (c) 2002 benoit cerrina <b.cerrina@wanadoo.fr>
* copyright (c) 2002-2004 anders bengtsson <ndrsbngtssn@yahoo.se>
* copyright (c) 2004 stefan matthias aust <sma@3plus4.de>
* copyright (c) 2004 thomas e enebo <enebo@acm.org>
* copyright (c) 2004 david corbin <dcorbin@users.sourceforge.net>
* copyright (c) 2005 charles o nutter <headius@headius.com>
* copyright (c) 2006 kresten krab thorup <krab@gnu.org>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby javasupport
import java lang annotation annotation
import java lang reflect accessibleobject
import java lang reflect constructor
import java lang reflect invocationtargetexception
import java lang reflect method
import java lang reflect modifier
import java lang reflect type
import org jruby ruby
import org jruby rubyarray
import org jruby rubyboolean
import org jruby rubyclass
import org jruby rubymodule
import org jruby rubystring
import org jruby javasupport proxy internaljavaproxy
import org jruby javasupport proxy javaproxyclass
import org jruby javasupport proxy javaproxymethod
import org jruby runtime callbackfactory
import org jruby runtime objectallocator
import org jruby runtime builtin irubyobject
public class javamethod extends javacallable
private final method method
private final class<?> parametertypes
private final javautil javaconverter returnconverter
public static rubyclass createjavamethodclass ruby runtime  rubymodule javamodule
// todo: not_allocatable_allocator is probably ok here, since we don't intend for people to monkey with
// this type and it can't be marshalled. confirm. jruby-415
rubyclass result
javamodule defineclassunder    runtime getobject    objectallocator not_allocatable_allocator
callbackfactory callbackfactory   runtime callbackfactory javamethod class
javaaccessibleobject registerrubymethods runtime  result
javacallable registerrubymethods runtime  result
result definefastmethod    callbackfactory getfastmethod
result definefastmethod    callbackfactory getfastmethod
result definefastmethod    callbackfactory getfastmethod
result definefastmethod    callbackfactory getfastmethod
result definefastmethod    callbackfactory getfastoptmethod
result definefastmethod    callbackfactory getfastoptmethod
result definefastmethod    callbackfactory getfastmethod
result definefastmethod    callbackfactory getfastmethod
return result
public javamethod ruby runtime  method method
super runtime   rubyclass  runtime getjavasupport   getjavamodule   fastgetclass
this method   method
this parametertypes   method getparametertypes
// special classes like collections.empty_list are inner classes that are private but
// implement public interfaces.  their methods are all public methods for the public
// interface.  let these public methods execute via setaccessible(true).
if  modifier ispublic method getmodifiers
modifier ispublic method getclass   getmodifiers
modifier ispublic method getdeclaringclass   getmodifiers
accessibleobject   setaccessible true
returnconverter   javautil getjavaconverter method getreturntype
public static javamethod create ruby runtime  method method
return new javamethod runtime  method
public static javamethod create ruby runtime  class<?> javaclass  string methodname  class<?> argumenttypes
try
method method   javaclass getmethod methodname  argumenttypes
return create runtime  method
catch  nosuchmethodexception e
throw runtime newnameerror     methodname       javaclass getname
methodname
public static javamethod createdeclared ruby runtime  class<?> javaclass  string methodname  class<?> argumenttypes
try
return create runtime  javaclass getdeclaredmethod methodname  argumenttypes
catch  nosuchmethodexception e
throw runtime newnameerror     methodname       javaclass getname
methodname
public static javamethod getmatchingdeclaredmethod ruby runtime  class<?> javaclass  string methodname  class<?> argumenttypes
// fixme: do we really want 'declared' methods?  includes private/protected, and does _not_
// include superclass methods.  also, the getdeclared calls may throw securityexception if
// we're running under a restrictive security policy.
try
return create runtime  javaclass getdeclaredmethod methodname  argumenttypes
catch  nosuchmethodexception e
// search through all declared methods to find a closest match
methodsearch  for  method method   javaclass getdeclaredmethods
if  method getname   equals methodname
class<?> targettypes   method getparametertypes
// for zero args case we can stop searching
if  targettypes length    0    argumenttypes length    0
return create runtime  method
typescan  for  int i   0  i < argumenttypes length  i
if  i >  targettypes length  continue methodsearch
if  targettypes isassignablefrom argumenttypes
continue typescan
else
continue methodsearch
// if we get here, we found a matching method, use it
// todo: choose narrowest method by continuing to search
return create runtime  method
// no matching method found
return null
public boolean equals object other
return other instanceof javamethod
this method      javamethod other  method
public int hashcode
return method hashcode
public rubystring name
return getruntime   newstring method getname
public int getarity
return parametertypes length
public rubyboolean public_p
return getruntime   newboolean modifier ispublic method getmodifiers
public rubyboolean final_p
return getruntime   newboolean modifier isfinal method getmodifiers
public irubyobject invoke irubyobject args
if  args length    1   getarity
throw getruntime   newargumenterror args length  1   getarity
irubyobject invokee   args
if     invokee instanceof javaobject
throw getruntime   newtypeerror
object javainvokee     javaobject  invokee  getvalue
object arguments   new object
convertarguments getruntime    arguments  args  1
if    method getdeclaringclass   isinstance javainvokee
throw getruntime   newtypeerror
javainvokee getclass   getname
method getdeclaringclass   getname
//
// this test really means, that this is a ruby-defined subclass of a java class
//
if  javainvokee instanceof internaljavaproxy
// don't bother to check if final method, it won't
// be there (not generated, can't be!)
modifier isfinal method getmodifiers
javaproxyclass jpc     internaljavaproxy  javainvokee
___getproxyclass
javaproxymethod jpm
if   jpm   jpc getmethod method getname    parametertypes      null
jpm hassuperimplementation
return invokewithexceptionhandling jpm getsupermethod    javainvokee  arguments
return invokewithexceptionhandling method  javainvokee  arguments
public irubyobject invoke_static irubyobject args
if  args length    getarity
throw getruntime   newargumenterror args length  getarity
object arguments   new object
system arraycopy args  0  arguments  0  arguments length
convertarguments getruntime    arguments  args  0
return invokewithexceptionhandling method  null  arguments
public irubyobject return_type
class<?> klass   method getreturntype
if  klass equals void class
return getruntime   getnil
return javaclass get getruntime    klass
public irubyobject type_parameters
return java getinstance getruntime    method gettypeparameters
private irubyobject invokewithexceptionhandling method method  object javainvokee  object arguments
try
object result   method invoke javainvokee  arguments
return returnconverter convert getruntime    result
catch  illegalargumentexception iae
throw getruntime   newtypeerror     argument_types   inspect
dumpargtypes arguments
iae getmessage
catch  illegalaccessexception iae
throw getruntime   newtypeerror     method getname         iae getmessage
catch  invocationtargetexception ite
getruntime   getjavasupport   handlenativeexception ite gettargetexception
// this point is only reached if there was an exception handler installed.
return getruntime   getnil
private string dumpargtypes object arguments
stringbuffer str   new stringbuffer
for  int i   0  i < arguments length  i
if  i > 0
str append
if  arguments    null
str append
else
str append arguments getclass   getname
str append
return str tostring
private void convertarguments ruby runtime  object arguments  object args  int from
class<?> types   parametertypes
for  int i   arguments length    i >  0
arguments   javautil convertargument runtime  args  types
public class<?> getparametertypes
return parametertypes
public class<?> getexceptiontypes
return method getexceptiontypes
public type getgenericparametertypes
return method getgenericparametertypes
public type getgenericexceptiontypes
return method getgenericexceptiontypes
public annotation getparameterannotations
return method getparameterannotations
public boolean isvarargs
return method isvarargs
protected string nameoninspection
return     gettype   tostring         method getname
public rubyboolean static_p
return getruntime   newboolean isstatic
public rubyboolean bridge_p
return getruntime   newboolean method isbridge
private boolean isstatic
return modifier isstatic method getmodifiers
public int getmodifiers
return method getmodifiers
public string togenericstring
return method togenericstring
protected accessibleobject accessibleobject
return method