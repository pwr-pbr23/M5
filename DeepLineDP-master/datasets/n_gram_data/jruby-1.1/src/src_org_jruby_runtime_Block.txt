/*
***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2002-2004 anders bengtsson <ndrsbngtssn@yahoo.se>
* copyright (c) 2001-2004 jan arne petersen <jpetersen@uni-bonn.de>
* copyright (c) 2002 benoit cerrina <b.cerrina@wanadoo.fr>
* copyright (c) 2004-2007 thomas e enebo <enebo@acm.org>
* copyright (c) 2004 stefan matthias aust <sma@3plus4.de>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby runtime
import org jruby rubyarray
import org jruby rubymodule
import org jruby rubyproc
import org jruby runtime builtin irubyobject
/**
*  internal live representation of a block ({...} or do ... end).
*/
public class block
// fixme: maybe not best place, but move it to a good home
public static final int zero_args   0
public static final int multiple_assignment   1
public static final int array   2
public static final int single_restarg   3
public enum type   normal  proc  lambda  thread
/**
* the proc that this block is associated with.  when we reference blocks via variable
* reference they are converted to proc objects.  we store a reference of the associated
* proc object for easy conversion.
*/
private rubyproc proc   null
public type type   type normal
private final binding binding
private final blockbody body
/**
* all block variables should either refer to a real block or this null_block.
*/
public static final block null_block   new block
public boolean isgiven
return false
public irubyobject yield threadcontext context  irubyobject value  irubyobject self
rubymodule klass  boolean avalue
throw context getruntime   newlocaljumperror     irubyobject value
public irubyobject call threadcontext context  irubyobject args
throw context getruntime   newlocaljumperror    context getruntime   newarraynocopy args
public irubyobject yield threadcontext context  irubyobject value
throw context getruntime   newlocaljumperror     irubyobject value
public block cloneblock
return this
public blockbody getbody
return blockbody null_body
protected block
this null  null
public block blockbody body  binding binding
this body   body
this binding   binding
public irubyobject call threadcontext context  irubyobject args
return body call context  args  binding  type
public irubyobject yield threadcontext context  irubyobject value
return body yield context  value  binding  type
public irubyobject yield threadcontext context  irubyobject value  irubyobject self
rubymodule klass  boolean avalue
return body yield context  value  self  klass  avalue  binding  type
protected int arraylength irubyobject node
return node instanceof rubyarray ?   rubyarray node  getlength     0
public block cloneblock
// we clone dynamic scope because this will be a new instance of a block.  any previously
// captured instances of this block may still be around and we do not want to start
// overwriting those values when we create a new one.
// enebo: once we make self, lastclass, and lastmethod immutable we can remove duplicate
block newblock   body cloneblock binding
newblock type   type
return newblock
/**
* what is the arity of this block?
*
* @return the arity
*/
public arity arity
return body arity
/**
* retrieve the proc object associated with this block
*
* @return the proc or null if this has no proc associated with it
*/
public rubyproc getprocobject
return proc
/**
* set the proc object associated with this block
*
* @param procobject
*/
public void setprocobject rubyproc procobject
this proc   procobject
/**
* is the current block a real yield'able block instead a null one
*
* @return true if this is a valid block or false otherwise
*/
public boolean isgiven
return true
public binding getbinding
return binding
public blockbody getbody
return body
/**
* gets the frame.
*
* @return returns a rubyframe
*/
public frame getframe
return binding getframe