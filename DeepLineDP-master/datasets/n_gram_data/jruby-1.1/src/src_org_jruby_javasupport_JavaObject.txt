/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2001 alan moore <alan_moore@gmx.net>
* copyright (c) 2001-2004 jan arne petersen <jpetersen@uni-bonn.de>
* copyright (c) 2002 benoit cerrina <b.cerrina@wanadoo.fr>
* copyright (c) 2002-2004 anders bengtsson <ndrsbngtssn@yahoo.se>
* copyright (c) 2004 thomas e enebo <enebo@acm.org>
* copyright (c) 2004 stefan matthias aust <sma@3plus4.de>
* copyright (c) 2004 david corbin <dcorbin@users.sourceforge.net>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby javasupport
import org jruby ruby
import org jruby rubyclass
import org jruby rubyfixnum
import org jruby rubymodule
import org jruby rubyobject
import org jruby rubystring
import org jruby anno jrubymethod
import org jruby runtime block
import org jruby runtime callbackfactory
import org jruby runtime objectallocator
import org jruby runtime objectmarshal
import org jruby runtime threadcontext
import org jruby runtime builtin irubyobject
/**
*
* @author  jpetersen
*/
public class javaobject extends rubyobject
private static object null_lock   new object
private final object value
protected javaobject ruby runtime  rubyclass rubyclass  object value
super runtime  rubyclass
this value   value
protected javaobject ruby runtime  object value
this runtime  runtime getjavasupport   getjavaobjectclass    value
public static javaobject wrap ruby runtime  object value
if  value    null
if  value instanceof class
return javaclass get runtime   class<?>  value
else if  value getclass   isarray
return new javaarray runtime  value
return new javaobject runtime  value
public class<?> getjavaclass
return value    null ? value getclass     void type
public object getvalue
return value
public static rubyclass createjavaobjectclass ruby runtime  rubymodule javamodule
// fixme: ideally javaobject instances should be marshallable, which means that
// the javaobject metaclass should have an appropriate allocator. jruby-414
rubyclass result   javamodule defineclassunder    runtime getobject    objectallocator not_allocatable_allocator
registerrubymethods runtime  result
result getmetaclass   undefinemethod
result getmetaclass   undefinemethod
result setmarshal objectmarshal not_marshalable_marshal
return result
protected static void registerrubymethods ruby runtime  rubyclass result
result defineannotatedmethods javaobject class
public boolean equals object other
return other instanceof javaobject
this value      javaobject  other  value
public int hashcode
if  value    null
return value hashcode
return 0
@jrubymethod
public rubyfixnum hash
return getruntime   newfixnum hashcode
@jrubymethod
public irubyobject to_s
if  value    null
string stringvalue   value tostring
if  stringvalue    null
return rubystring newunicodestring getruntime    value tostring
return getruntime   getnil
return getruntime   newstring
@jrubymethod name           required   1
public irubyobject op_equal irubyobject other
if    other instanceof javaobject
other   other getinstancevariables   fastgetinstancevariable
if    other instanceof javaobject
return getruntime   getfalse
if  getvalue      null      javaobject  other  getvalue      null
return getruntime   gettrue
boolean isequal   getvalue   equals   javaobject  other  getvalue
return isequal ? getruntime   gettrue     getruntime   getfalse
@jrubymethod name      required   1
public irubyobject same irubyobject other
if    other instanceof javaobject
other   other getinstancevariables   fastgetinstancevariable
if    other instanceof javaobject
return getruntime   getfalse
if  getvalue      null      javaobject  other  getvalue      null
return getruntime   gettrue
boolean issame   getvalue        javaobject  other  getvalue
return issame ? getruntime   gettrue     getruntime   getfalse
@jrubymethod
public rubystring java_type
return getruntime   newstring getjavaclass   getname
@jrubymethod
public irubyobject java_class
return javaclass get getruntime    getjavaclass
@jrubymethod
public rubyfixnum length
throw getruntime   newtypeerror
@jrubymethod name      required   1
public irubyobject aref irubyobject index
throw getruntime   newtypeerror
@jrubymethod name      required   2
public irubyobject aset irubyobject index  irubyobject somevalue
throw getruntime   newtypeerror
@jrubymethod name      required   3
public irubyobject afill irubyobject beginindex  irubyobject endindex  irubyobject somevalue
throw getruntime   newtypeerror
@jrubymethod name
public irubyobject is_java_proxy
return getruntime   gettrue
@jrubymethod name
public irubyobject ruby_synchronized threadcontext context  block block
object lock   getvalue
synchronized  lock    null ? lock   null_lock
return block yield context  null