package org jruby util io
import java io ioexception
import org jruby ruby
public class openfile
public static final int readable   1
public static final int writable   2
public static final int readwrite   3
public static final int append   64
public static final int create   128
public static final int binmode   4
public static final int sync   8
public static final int wbuf   16
public static final int rbuf   32
public static final int wsplit   512
public static final int wsplit_initialized   1024
public static final int syncwrite   sync   writable
public static interface finalizer
public void finalize ruby runtime  boolean raise
private stream mainstream
private stream pipestream
private int mode
private process process
private int linenumber   0
private string path
private finalizer finalizer
public stream getmainstream
return mainstream
public void setmainstream stream mainstream
this mainstream   mainstream
public stream getpipestream
return pipestream
public void setpipestream stream pipestream
this pipestream   pipestream
public stream getwritestream
return pipestream    null ? mainstream   pipestream
public int getmode
return mode
public string getmodeasstring ruby runtime
string modestring   getstringfrommode mode
if  modestring    null
throw runtime newargumenterror     integer tooctalstring mode
return modestring
public static string getstringfrommode int mode
if   mode   append     0
if   mode   readwrite     0
return
return
switch  mode   readwrite
case readable
return
case writable
return
case readwrite
if   mode   create     0
return
return
return null
public void checkreadable ruby runtime  throws ioexception  baddescriptorexception  pipeexception  invalidvalueexception
checkclosed runtime
if   mode   readable     0
throw runtime newioerror
if    mode   wbuf     0     mode    syncwrite   rbuf      syncwrite      mainstream feof      pipestream    null
seek 0  stream seek_cur
mode    rbuf
public void seek long offset  int whence  throws ioexception  invalidvalueexception  pipeexception  baddescriptorexception
flushbeforeseek
getwritestream   lseek offset  whence
private void flushbeforeseek   throws baddescriptorexception  ioexception
if   mode   wbuf     0
fflush getwritestream
public void fflush stream stream  throws ioexception  baddescriptorexception
while  true
int n   stream fflush
if  n     1
break
mode    ~wbuf
public void checkwritable ruby runtime  throws ioexception  baddescriptorexception  invalidvalueexception  pipeexception
checkclosed runtime
if   mode   writable     0
throw runtime newioerror
if   mode   rbuf     0     mainstream feof      pipestream    null
seek 0  stream seek_cur
if  pipestream    null
mode    ~rbuf
public void checkclosed ruby runtime
if  mainstream    null    pipestream    null
throw runtime newioerror
public boolean isopen
return mainstream    null    pipestream    null
public boolean isreadable
return  mode   readable     0
public boolean iswritable
return  mode   writable     0
public boolean isreadbuffered
return  mode   rbuf     0
public void setreadbuffered
mode    rbuf
public boolean iswritebuffered
return  mode   wbuf     0
public void setwritebuffered
mode    wbuf
public void setsync boolean sync
if sync
mode   mode   sync
else
mode   mode   ~sync
public boolean issync
return  mode   sync     0
public boolean arebotheof   throws ioexception  baddescriptorexception
return mainstream feof       pipestream    null ? pipestream feof     true
public void setmode int modes
this mode   modes
public process getprocess
return process
public void setprocess process process
this process   process
public int getlinenumber
return linenumber
public void setlinenumber int linenumber
this linenumber   linenumber
public string getpath
return path
public void setpath string path
this path   path
public finalizer getfinalizer
return finalizer
public void setfinalizer finalizer finalizer
this finalizer   finalizer
public void cleanup ruby runtime  boolean raise
if  finalizer    null
finalizer finalize runtime  raise
else
finalize runtime  raise
public void finalize ruby runtime  boolean raise
try
channeldescriptor main   null
channeldescriptor pipe   null
if  pipestream    null
pipe   pipestream getdescriptor
// todo: ruby logic is somewhat more complicated here, see comments after
try
pipestream fflush
pipestream fclose
finally
// make sure the pipe stream is set to null
pipestream   null
if  mainstream    null
// todo: ruby logic is somewhat more complicated here, see comments after
main   mainstream getdescriptor
try
if  pipe    null    iswritebuffered
mainstream fflush
mainstream fclose
catch  baddescriptorexception bde
if  main    pipe
else
throw bde
finally
// make sure the main stream is set to null
mainstream   null
catch  ioexception ex
if  raise
throw runtime newioerrorfromexception ex
catch  baddescriptorexception ex
if  raise
throw runtime newerrnoebadferror
catch  throwable t
t printstacktrace