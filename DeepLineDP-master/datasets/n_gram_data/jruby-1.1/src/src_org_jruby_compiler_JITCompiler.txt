/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2006-2008 charles o nutter <headius@headius.com>
* copyright (c) 2008 thomas e enebo <enebo@acm.org>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby compiler
import java util set
import org jruby ruby
import org jruby rubyinstanceconfig
import org jruby ast argsnode
import org jruby ast node
import org jruby ast executable script
import org jruby ast util sexpmaker
import org jruby compiler impl standardasmcompiler
import org jruby internal runtime methods callconfiguration
import org jruby internal runtime methods defaultmethod
import org jruby parser staticscope
import org jruby runtime threadcontext
import org jruby util classcache
import org jruby util codegenutils
import org jruby util javanamemangler
public class jitcompiler
public static final boolean use_cache   true
public static void runjit final defaultmethod method  final ruby runtime  final threadcontext context  final string name
set<script> jittedmethods   runtime getjittedmethods
final rubyinstanceconfig instanceconfig   runtime getinstanceconfig
classcache classcache   instanceconfig getclasscache
// this method has jited already or has been abandoned. bail out.
if  method getcallcount   < 0  return
try
method setcallcount method getcallcount     1
if  method getcallcount   >  instanceconfig getjitthreshold
// the cache is full. abandon jit for this method and bail out.
if  classcache isfull
method setcallcount  1
return
jitclassgenerator generator   new jitclassgenerator name  method  context
string key   sexpmaker create name  method getargsnode    method getbodynode
class<script> sourceclass   instanceconfig getclasscache   cacheclassbykey key  generator
if  sourceclass    null
// class could not be found nor generated; give up on jit and bail out
method setcallcount  1
return
// finally, grab the script
script jitcompiledscript    script  sourceclass newinstance
// add to the jitted methods set
jittedmethods add jitcompiledscript
// logevery n methods based on configuration
if  instanceconfig getjitlogevery   > 0
int methodcount   jittedmethods size
if  methodcount % instanceconfig getjitlogevery      0
log method  name      methodcount
if  instanceconfig isjitlogging    log method  name
method setjitcallconfig generator callconfig
method setjitcompiledscript jitcompiledscript
method setcallcount  1
catch  throwable t
if  instanceconfig isjitloggingverbose    log method  name     t getmessage
method setcallcount  1
public static class jitclassgenerator implements classcache classgenerator
private standardasmcompiler asmcompiler
private defaultmethod method
private staticscope staticscope
private node bodynode
private argsnode argsnode
private callconfiguration jitcallconfig
private byte bytecode
private string name
public jitclassgenerator string name  defaultmethod method  threadcontext context
this method   method
string packagename       javanamemangler manglefilenameforclasspath method getposition   getfile
string cleanname   packagename       javanamemangler manglestringforcleanjavaidentifier name
this bodynode   method getbodynode
this argsnode   method getargsnode
final string filename   calculatefilename argsnode  bodynode
staticscope   method getstaticscope
asmcompiler   new standardasmcompiler cleanname
method hashcode         context hashcode    filename
@suppresswarnings
protected void compile
if  bytecode    null  return
asmcompiler startscript staticscope
final astcompiler compiler   new astcompiler
compilercallback args   new compilercallback
public void call methodcompiler context
compiler compileargs argsnode  context
astinspector inspector   new astinspector
inspector inspect bodynode
inspector inspect argsnode
methodcompiler methodcompiler
if  bodynode    null
// we have a body, do a full-on method
methodcompiler   asmcompiler startmethod    args  staticscope  inspector
compiler compile bodynode  methodcompiler
else
// if we don't have a body, check for required or opt args
// if opt args, they could have side effects
// if required args, need to raise errors if too few args passed
// otherwise, method does nothing, make it a nop
if  argsnode    null     argsnode getrequiredargscount   > 0    argsnode getoptionalargscount   > 0
methodcompiler   asmcompiler startmethod    args  staticscope  inspector
methodcompiler loadnil
else
methodcompiler   asmcompiler startmethod    null  staticscope  inspector
methodcompiler loadnil
jitcallconfig   callconfiguration no_frame_no_scope
methodcompiler endmethod
asmcompiler endscript false  false  false
// if we haven't already decided on a do-nothing call
if  jitcallconfig    null
// if we're not doing any of the operations that still need
// a scope, use the scopeless config
if  inspector hasclosure      inspector hasscopeawaremethods
jitcallconfig   callconfiguration frame_and_scope
else
// switch to a slightly faster call config
jitcallconfig   callconfiguration frame_only
bytecode   asmcompiler getclassbytearray
name   codegenutils c asmcompiler getclassname
public byte bytecode
compile
return bytecode
public string name
compile
return name
public callconfiguration callconfig
compile
return jitcallconfig
private static string calculatefilename argsnode argsnode  node bodynode
if  bodynode    null  return bodynode getposition   getfile
if  argsnode    null  return argsnode getposition   getfile
return
static void log defaultmethod method  string name  string message  string    reason
string classname   method getimplementationclass   getbasename
if  classname    null  classname
system err print message       classname       name
if  reason length > 0
system err print  "
for  int i   0  i < reason length  i
system err print reason
system err print
system err println