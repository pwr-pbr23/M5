/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2006 kresten krab thorup <krab@gnu.org>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby javasupport proxy
import java lang reflect constructor
import java lang reflect field
import java lang reflect invocationtargetexception
import java lang reflect method
import java lang reflect modifier
import java lang reflect undeclaredthrowableexception
import java security accesscontroller
import java security privilegedaction
import java security protectiondomain
import java util arrays
import java util collections
import java util hashmap
import java util hashset
import java util iterator
import java util map
import java util set
import org objectweb asm classvisitor
import org objectweb asm classwriter
import org objectweb asm fieldvisitor
import org objectweb asm label
import org objectweb asm opcodes
import org objectweb asm type
import org objectweb asm commons generatoradapter
public class javaproxyclassfactory
private static final type java_lang_class_type   type gettype class class
private static final type empty_type_arr   new type
private static final org objectweb asm commons method helper_get_proxy_class_method   org objectweb asm commons method
getmethod javaproxyclass class getname
private static final org objectweb asm commons method class_forname_method   org objectweb asm commons method
getmethod
private static final string invocation_handler_field_name
private static final string proxy_class_field_name
private static final class empty_class_arr   new class
private static final type invocation_handler_type   type
gettype javaproxyinvocationhandler class
private static final type proxy_method_type   type
gettype javaproxymethod class
private static final type proxy_class_type   type
gettype javaproxyclass class
private static final org objectweb asm commons method invocation_handler_invoke_method   org objectweb asm commons method
getmethod
proxy_method_type getclassname
private static final type proxy_helper_type   type
gettype internaljavaproxyhelper class
private static final org objectweb asm commons method proxy_helper_get_method   org objectweb asm commons method
getmethod proxy_method_type getclassname
javaproxyclass class getname
private static final type java_proxy_type   type
gettype internaljavaproxy class
private static int counter
private static map proxies   collections synchronizedmap new hashmap
private static method defineclass_method     statically initialized below
private static synchronized int nextid
return counter
// todo: we should be able to optimize this quite a bit post-1.0.  javaclass already
// has all the methods organized by method name; the next version (supporting protected
// methods/fields) will have them organized even further. so collectmethods here can
// just lookup the overridden methods in the javaclass map, should be much faster.
static javaproxyclass newproxyclass classloader loader
string targetclassname  class superclass  class interfaces  set names
throws invocationtargetexception
if  loader    null
loader   javaproxyclassfactory class getclassloader
if  superclass    null
superclass   object class
if  interfaces    null
interfaces   empty_class_arr
set key   new hashset
key add superclass
for  int i   0  i < interfaces length  i
key add interfaces
// add (potentially) overridden names to the key.
// todo: see note above re: optimizations
if  names    null
key addall names
javaproxyclass proxyclass    javaproxyclass  proxies get key
if  proxyclass    null
if  targetclassname    null
string pkg   packagename superclass
string fullname   superclass getname
int ix   fullname lastindexof
string cname   fullname
if ix     1
cname   fullname substring ix 1
if  pkg startswith       pkg startswith
pkg   packagename javaproxyclassfactory class
if ix     1
targetclassname   cname       nextid
else
targetclassname   pkg       cname
nextid
validateargs targetclassname  superclass
map methods   new hashmap
collectmethods superclass  interfaces  methods  names
type selftype   type gettype
tointernalclassname targetclassname
proxyclass   generate loader  targetclassname  superclass
interfaces  methods  selftype
proxies put key  proxyclass
return proxyclass
static javaproxyclass newproxyclass classloader loader
string targetclassname  class superclass  class interfaces
throws invocationtargetexception
return newproxyclass loader targetclassname superclass interfaces null
private static javaproxyclass generate final classloader loader
final string targetclassname  final class superclass
final class interfaces  final map methods  final type selftype
classwriter cw   beginproxyclass targetclassname  superclass
interfaces
generatoradapter clazzinit   createclassinitializer selftype  cw
generateconstructors superclass  selftype  cw
generategetproxyclass selftype  cw
generategetinvocationhandler selftype  cw
generateproxymethods superclass  methods  selftype  cw  clazzinit
// finish class initializer
clazzinit returnvalue
clazzinit endmethod
// end class
cw visitend
byte data   cw tobytearray
/*
* try { fileoutputstream o = new
* fileoutputstream(targetclassname.replace( '/', '.') + ".class");
* o.write(data); o.close(); } catch (ioexception ex) {
* ex.printstacktrace(); }
*/
class clazz   invokedefineclass loader  selftype getclassname    data
// trigger class initialization for the class
try
field proxy_class   clazz getdeclaredfield proxy_class_field_name
proxy_class setaccessible true
return  javaproxyclass  proxy_class get clazz
catch  exception ex
internalerror ie   new internalerror
ie initcause ex
throw ie
static
accesscontroller doprivileged new privilegedaction
public object run
try
defineclass_method   classloader class getdeclaredmethod
new class   string class
byte class  int class  int class  protectiondomain class
catch  exception e
// should not happen!
e printstacktrace
return null
defineclass_method setaccessible true
return null
private static class invokedefineclass classloader loader
string classname  byte data
try
return  class  defineclass_method
invoke loader  new object   classname  data
new integer 0   new integer data length   javaproxyclassfactory class getprotectiondomain
catch  illegalargumentexception e
// todo auto-generated catch block
e printstacktrace
return null
catch  illegalaccessexception e
// todo auto-generated catch block
e printstacktrace
return null
catch  invocationtargetexception e
// todo auto-generated catch block
e printstacktrace
return null
private static classwriter beginproxyclass final string targetclassname
final class superclass  final class interfaces
classwriter cw   new classwriter classwriter compute_maxs
int access   opcodes acc_public   opcodes acc_final   opcodes acc_static
string name   tointernalclassname targetclassname
string signature   null
string supername   tointernalclassname superclass
string interfacenames   new string
for  int i   0  i < interfaces length  i
interfacenames   tointernalclassname interfaces
interfacenames   tointernalclassname internaljavaproxy class
// start class
cw visit opcodes v1_3  access  name  signature  supername
interfacenames
cw visitfield opcodes acc_private  invocation_handler_field_name
invocation_handler_type getdescriptor    null  null  visitend
cw visitfield opcodes acc_private   opcodes acc_static
proxy_class_field_name  proxy_class_type getdescriptor    null
null  visitend
return cw
private static void generateproxymethods class superclass  map methods
type selftype  classvisitor cw  generatoradapter clazzinit
iterator it   methods values   iterator
while  it hasnext
methoddata md    methoddata  it next
type superclasstype   type gettype superclass
generateproxymethod selftype  superclasstype  cw  clazzinit  md
private static void generategetinvocationhandler type selftype
classvisitor cw
// make getter for handler
generatoradapter gh   new generatoradapter opcodes acc_public
new org objectweb asm commons method
invocation_handler_type  empty_type_arr   null
empty_type_arr  cw
gh loadthis
gh getfield selftype  invocation_handler_field_name
invocation_handler_type
gh returnvalue
gh endmethod
private static void generategetproxyclass type selftype  classvisitor cw
// make getter for proxy class
generatoradapter gpc   new generatoradapter opcodes acc_public
new org objectweb asm commons method
proxy_class_type  empty_type_arr   null
empty_type_arr  cw
gpc getstatic selftype  proxy_class_field_name  proxy_class_type
gpc returnvalue
gpc endmethod
private static void generateconstructors class superclass  type selftype
classvisitor cw
constructor cons   superclass getconstructors
for  int i   0  i < cons length  i
constructor constructor   cons
int acc   constructor getmodifiers
if  modifier isprotected acc     modifier ispublic acc
// ok, it's publix or protected
else if   modifier isprivate acc
packagename constructor getdeclaringclass    equals
packagename selftype getclassname
// ok, it's package scoped and we're in the same package
else
// it's unaccessible
continue
generateconstructor selftype  constructor  cw
private static generatoradapter createclassinitializer type selftype
classvisitor cw
generatoradapter clazzinit
clazzinit   new generatoradapter opcodes acc_private
opcodes acc_static  new org objectweb asm commons method
type void_type  empty_type_arr   null
empty_type_arr  cw
clazzinit visitldcinsn selftype getclassname
clazzinit invokestatic java_lang_class_type  class_forname_method
clazzinit
invokestatic proxy_helper_type  helper_get_proxy_class_method
clazzinit dup
clazzinit putstatic selftype  proxy_class_field_name  proxy_class_type
return clazzinit
private static void generateproxymethod type selftype  type supertype
classvisitor cw  generatoradapter clazzinit  methoddata md
if   md generateproxymethod
return
org objectweb asm commons method m   md getmethod
type ex   totype md getexceptions
string field_name       md getname     md scrambledsignature
// create static private method field
fieldvisitor fv   cw visitfield opcodes acc_private
opcodes acc_static  field_name  proxy_method_type
getdescriptor    null  null
fv visitend
clazzinit dup
clazzinit push m getname
clazzinit push m getdescriptor
clazzinit push md isimplemented
clazzinit invokestatic proxy_helper_type  proxy_helper_get_method
clazzinit putstatic selftype  field_name  proxy_method_type
org objectweb asm commons method sm   new org objectweb asm commons method
m getname    m getreturntype    m
getargumenttypes
//
// construct the proxy method
//
generatoradapter ga   new generatoradapter opcodes acc_public  m  null
ex  cw
ga loadthis
ga getfield selftype  invocation_handler_field_name
invocation_handler_type
// if the method is extending something, then we have
// to test if the handler is initialized...
if  md isimplemented
ga dup
label ok   ga newlabel
ga ifnonnull ok
ga loadthis
ga loadargs
ga invokeconstructor supertype  m
ga returnvalue
ga mark ok
ga loadthis
ga getstatic selftype  field_name  proxy_method_type
if  m getargumenttypes   length    0
// load static empty array
ga getstatic java_proxy_type     type
gettype object class
else
// box arguments
ga loadargarray
label before   ga mark
ga invokeinterface invocation_handler_type
invocation_handler_invoke_method
label after   ga mark
ga unbox m getreturntype
ga returnvalue
// this is a simple rethrow handler
label rethrow   ga mark
ga visitinsn opcodes athrow
for  int i   0  i < ex length  i
ga visittrycatchblock before  after  rethrow  ex
getinternalname
ga visittrycatchblock before  after  rethrow
ga visittrycatchblock before  after  rethrow
type thr   type gettype throwable class
label handler   ga mark
type udt   type gettype undeclaredthrowableexception class
int loc   ga newlocal thr
ga storelocal loc  thr
ga newinstance udt
ga dup
ga loadlocal loc  thr
ga invokeconstructor udt  org objectweb asm commons method
getmethod
ga throwexception
ga visittrycatchblock before  after  handler
ga endmethod
//
// construct the super-proxy method
//
if  md isimplemented
generatoradapter ga2   new generatoradapter opcodes acc_public  sm
null  ex  cw
ga2 loadthis
ga2 loadargs
ga2 invokeconstructor supertype  m
ga2 returnvalue
ga2 endmethod
private static class generateconstructor type selftype
constructor constructor  classvisitor cw
class superconstructorparametertypes   constructor
getparametertypes
class newconstructorparametertypes   new class
system arraycopy superconstructorparametertypes  0
newconstructorparametertypes  0
superconstructorparametertypes length
newconstructorparametertypes   javaproxyinvocationhandler class
int access   opcodes acc_public
string name1
string signature   null
class superconstructorexceptions   constructor getexceptiontypes
org objectweb asm commons method super_m   new org objectweb asm commons method
name1  type void_type  totype superconstructorparametertypes
org objectweb asm commons method m   new org objectweb asm commons method
name1  type void_type  totype newconstructorparametertypes
generatoradapter ga   new generatoradapter access  m  signature
totype superconstructorexceptions   cw
ga loadthis
ga loadargs 0  superconstructorparametertypes length
ga invokeconstructor type gettype constructor getdeclaringclass
super_m
ga loadthis
ga loadarg superconstructorparametertypes length
ga putfield selftype  invocation_handler_field_name
invocation_handler_type
// do a void return
ga returnvalue
ga endmethod
return newconstructorparametertypes
private static string tointernalclassname class clazz
return tointernalclassname clazz getname
private static string tointernalclassname string name
return name replace
private static type totype class parametertypes
type result   new type
for  int i   0  i < result length  i
result   type gettype parametertypes
return result
private static void collectmethods class superclass  class interfaces
map methods  set names
hashset allclasses   new hashset
addclass allclasses  methods  superclass  names
addinterfaces allclasses  methods  interfaces  names
static class methoddata
set methods   new hashset
final method mostspecificmethod
final class mostspecificparametertypes
boolean haspublicdecl   false
methoddata method method
this mostspecificmethod   method
this mostspecificparametertypes   mostspecificmethod getparametertypes
haspublicdecl   method getdeclaringclass   isinterface
modifier ispublic method getmodifiers
public string scrambledsignature
stringbuffer sb   new stringbuffer
class parms   getparametertypes
for  int i   0  i < parms length  i
sb append
string name   parms getname
name   name replace
name   name replace
name   name replace
sb append name
return sb tostring
public class getdeclaringclass
return mostspecificmethod getdeclaringclass
public org objectweb asm commons method getmethod
return new org objectweb asm commons method getname    type
gettype getreturntype     gettype getparametertypes
private type gettype class parametertypes
type result   new type
for  int i   0  i < parametertypes length  i
result   type gettype parametertypes
return result
private string getname
return mostspecificmethod getname
private class getparametertypes
return mostspecificparametertypes
public class getexceptions
set all   new hashset
iterator it   methods iterator
while  it hasnext
method m    method  it next
class ex   m getexceptiontypes
for  int i   0  i < ex length  i
class exx   ex
if  all contains exx
continue
boolean add   true
iterator it2   all iterator
while  it2 hasnext
class de    class  it2 next
if  de isassignablefrom exx
add   false
break
else if  exx isassignablefrom de
it2 remove
add   true
if  add
all add exx
return  class  all toarray new class
public boolean generateproxymethod
return  isfinal       isprivate
public void add method method
methods add method
haspublicdecl    modifier ispublic method getmodifiers
class getreturntype
return mostspecificmethod getreturntype
boolean isfinal
if  mostspecificmethod getdeclaringclass   isinterface
return false
int mod   mostspecificmethod getmodifiers
return modifier isfinal mod
boolean isprivate
if  mostspecificmethod getdeclaringclass   isinterface
return false
int mod   mostspecificmethod getmodifiers
return modifier isprivate mod
boolean isimplemented
if  mostspecificmethod getdeclaringclass   isinterface
return false
int mod   mostspecificmethod getmodifiers
return  modifier isabstract mod
static class methodkey
private string name
private class arguments
methodkey method m
this name   m getname
this arguments   m getparametertypes
public boolean equals object obj
if  obj instanceof methodkey
methodkey key    methodkey  obj
return name equals key name
arrays equals arguments  key arguments
return false
public int hashcode
return name hashcode
private static void addinterfaces set allclasses  map methods
class interfaces  set names
for  int i   0  i < interfaces length  i
addinterface allclasses  methods  interfaces  names
private static void addinterface set allclasses  map methods
class interfaze  set names
if  allclasses add interfaze
addmethods methods  interfaze  names
addinterfaces allclasses  methods  interfaze getinterfaces    names
private static void addmethods map methods  class classorinterface  set names
method mths   classorinterface getdeclaredmethods
for  int i   0  i < mths length  i
if  names    null    names contains mths getname
addmethod methods  mths
private static void addmethod map methods  method method
int acc   method getmodifiers
if  modifier isstatic acc     modifier isprivate acc
return
methodkey mk   new methodkey method
methoddata md    methoddata  methods get mk
if  md    null
md   new methoddata method
methods put mk  md
md add method
private static void addclass set allclasses  map methods  class clazz  set names
if  allclasses add clazz
addmethods methods  clazz  names
class superclass   clazz getsuperclass
if  superclass    null
addclass allclasses  methods  superclass  names
addinterfaces allclasses  methods  clazz getinterfaces    names
private static void validateargs string targetclassname  class superclass
if  modifier isfinal superclass getmodifiers
throw new illegalargumentexception
string targetpackage   packagename targetclassname
string pkg   targetpackage replace
if  pkg startswith
throw new illegalargumentexception
pkg
package p   package getpackage pkg
if  p    null
if  p issealed
throw new illegalargumentexception     p
private static string packagename class clazz
string clazzname   clazz getname
return packagename clazzname
private static string packagename string clazzname
int idx   clazzname lastindexof
if  idx     1
return
else
return clazzname substring 0  idx