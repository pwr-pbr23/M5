/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2001 chad fowler <chadfowler@chadfowler.com>
* copyright (c) 2001 alan moore <alan_moore@gmx.net>
* copyright (c) 2001 ed sinjiashvili <slorcim@users.sourceforge.net>
* copyright (c) 2001-2004 jan arne petersen <jpetersen@uni-bonn.de>
* copyright (c) 2002 benoit cerrina <b.cerrina@wanadoo.fr>
* copyright (c) 2002-2006 thomas e enebo <enebo@acm.org>
* copyright (c) 2002-2004 anders bengtsson <ndrsbngtssn@yahoo.se>
* copyright (c) 2004 stefan matthias aust <sma@3plus4.de>
* copyright (c) 2005 charles o nutter <headius@headius.com>
* copyright (c) 2006 miguel covarrubias <mlcovarrubias@gmail.com>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby
import java io ioexception
import java util list
import org jruby anno jrubymethod
import org jruby exceptions raiseexception
import org jruby runtime block
import org jruby runtime callbackfactory
import org jruby runtime methodindex
import org jruby runtime objectallocator
import org jruby runtime objectmarshal
import org jruby runtime threadcontext
import org jruby runtime builtin irubyobject
import org jruby runtime builtin variable
import org jruby runtime component variableentry
import org jruby runtime marshal marshalstream
import org jruby runtime marshal unmarshalstream
/**
* @author jpetersen
*/
public class rubyrange extends rubyobject
private irubyobject begin
private irubyobject end
private boolean isexclusive
public rubyrange ruby runtime  rubyclass impl
super runtime  impl
begin   end   runtime getnil
public void init threadcontext context  irubyobject abegin  irubyobject aend  rubyboolean aisexclusive
if    abegin instanceof rubyfixnum    aend instanceof rubyfixnum
try
irubyobject result   abegin callmethod context  methodindex op_spaceship     aend
if  result isnil    throw getruntime   newargumenterror
catch  raiseexception rexcptn
throw getruntime   newargumenterror
this begin   abegin
this end   aend
this isexclusive   aisexclusive istrue
private static objectallocator range_allocator   new objectallocator
public irubyobject allocate ruby runtime  rubyclass klass
return new rubyrange runtime  klass
protected void copyspecialinstancevariables irubyobject clone
rubyrange range    rubyrange clone
range begin   begin
range end   end
range isexclusive   isexclusive
private static final objectmarshal range_marshal   new objectmarshal
public void marshalto ruby runtime  object obj  rubyclass type
marshalstream marshalstream  throws ioexception
rubyrange range    rubyrange obj
marshalstream registerlinktarget range
list<variable<irubyobject>> attrs   range getvariablelist
attrs add new variableentry<irubyobject>    range begin
attrs add new variableentry<irubyobject>    range end
attrs add new variableentry<irubyobject>
range isexclusive ? runtime gettrue     runtime getfalse
marshalstream dumpvariables attrs
public object unmarshalfrom ruby runtime  rubyclass type
unmarshalstream unmarshalstream  throws ioexception
rubyrange range    rubyrange type allocate
unmarshalstream registerlinktarget range
unmarshalstream defaultvariablesunmarshal range
range begin   range removeinternalvariable
range end   range removeinternalvariable
range isexclusive   range removeinternalvariable    istrue
return range
public static rubyclass createrangeclass ruby runtime
rubyclass result   runtime defineclass    runtime getobject    range_allocator
runtime setrange result
result kindof   new rubymodule kindof
public boolean iskindof irubyobject obj  rubymodule type
return obj instanceof rubyrange
result setmarshal range_marshal
callbackfactory callbackfactory   runtime callbackfactory rubyrange class
result includemodule runtime getenumerable
// we override enumerable#member? since ranges in 1.8.1 are continuous.
//        result.definemethod("member?", callbackfactory.getmethod("include_p", rubykernel.iruby_object));
//        result.definemethod("===", callbackfactory.getmethod("include_p", rubykernel.iruby_object));
result defineannotatedmethods rubyrange class
//        callbackfactory classcb = runtime.callbackfactory(rubyclass.class);
//        result.getmetaclass().definemethod("new", classcb.getoptmethod("newinstance"));
result dispatcher   callbackfactory createdispatcher result
return result
/**
* converts this range to a pair of integers representing a start position
* and length.  if either of the range's endpoints is negative, it is added to
* the <code>limit</code> parameter in an attempt to arrive at a position
* <i>p</i> such that <i>0&nbsp;&lt;=&nbsp;p&nbsp;&lt;=&nbsp;limit</i>. if
* <code>truncate</code> is true, the result will be adjusted, if possible, so
* that <i>begin&nbsp;+&nbsp;length&nbsp;&lt;=&nbsp;limit</i>.  if <code>strict</code>
* is true, an exception will be raised if the range can't be converted as
* described above; otherwise it just returns <b>null</b>.
*
* @param limit    the size of the object (e.g., a string or array) that
*                 this range is being evaluated against.
* @param truncate if true, result must fit within the range <i>(0..limit)</i>.
* @param isstrict   if true, raises an exception if the range can't be converted.
* @return         a two-element array representing a start value and a length,
*                 or <b>null</b> if the conversion failed.
*/
public long getbeginlength long limit  boolean truncate  boolean isstrict
long beginlong   rubynumeric num2long begin
long endlong   rubynumeric num2long end
// apparent legend for mri 'err' param to jruby 'truncate' and 'isstrict':
// 0 =>  truncate && !strict
// 1 => !truncate &&  strict
// 2 =>  truncate &&  strict
if   isexclusive
endlong
if  beginlong < 0
beginlong    limit
if  beginlong < 0
if  isstrict
throw getruntime   newrangeerror inspect   tostring
return null
if  truncate    beginlong > limit
if  isstrict
throw getruntime   newrangeerror inspect   tostring
return null
if  truncate    endlong > limit
endlong   limit
if  endlong < 0      isexclusive    endlong    0
endlong    limit
// don't check against negative endlong,
// that's how mri behaves.
return new long beginlong  math max endlong   beginlong  0l
public long beglen long len  int err
long beg   rubynumeric num2long this begin
long end   rubynumeric num2long this end
if beg < 0
beg    len
if beg < 0
if err    0
throw getruntime   newrangeerror beg        isexclusive ?          end
return null
if err    0    err    2
if beg > len
if err    0
throw getruntime   newrangeerror beg        isexclusive ?          end
return null
if end > len
end   len
if end < 0
end    len
if  isexclusive
end
len   end   beg
if len < 0
len   0
return new long beg  len
public static rubyrange newrange ruby runtime  threadcontext context  irubyobject begin  irubyobject end  boolean isexclusive
rubyrange range   new rubyrange runtime  runtime getrange
range init context  begin  end  isexclusive ? runtime gettrue     runtime getfalse
return range
@jrubymethod name      required   2  optional   1  frame   true
public irubyobject initialize threadcontext context  irubyobject args  block unusedblock
if  args length    3
init context  args  args  args istrue   ? getruntime   gettrue     getruntime   getfalse
else if  args length    2
init context  args  args  getruntime   getfalse
else
throw getruntime   newargumenterror
return getruntime   getnil
@jrubymethod name
public irubyobject first
return begin
@jrubymethod name
public irubyobject last
return end
@jrubymethod name
public rubyfixnum hash threadcontext context
long basehash    isexclusive ? 1   0
long beginhash     rubyfixnum  begin callmethod context  methodindex hash      getlongvalue
long endhash     rubyfixnum  end callmethod context  methodindex hash      getlongvalue
long hash   basehash
hash   hash ^  beginhash << 1
hash   hash ^  endhash << 9
hash   hash ^  basehash << 24
return getruntime   newfixnum hash
private static byte dotdotdot     getbytes
private static byte dotdot     getbytes
@jrubymethod name      frame   true
public irubyobject inspect threadcontext context  block block
rubystring str   rubystring objasstring context  begin callmethod context      strdup
rubystring str2   rubystring objasstring context  end callmethod context
str cat isexclusive ? dotdotdot   dotdot
str concat str2
str infectby str2
return str
@jrubymethod name      frame   true
public irubyobject to_s threadcontext context  block block
rubystring str   rubystring objasstring context  begin  strdup
rubystring str2   rubystring objasstring context  end
str cat isexclusive ? dotdotdot   dotdot
str concat str2
str infectby str2
return str
@jrubymethod name
public rubyboolean exclude_end_p
return getruntime   newboolean isexclusive
@jrubymethod name      frame   true
public rubyfixnum length threadcontext context  block block
long size   0
if  begin callmethod context  methodindex op_gt     end  istrue
return getruntime   newfixnum 0
if  begin instanceof rubyfixnum    end instanceof rubyfixnum
size     rubynumeric  end  getlongvalue       rubynumeric  begin  getlongvalue
if   isexclusive
size
else      support length for arbitrary classes
irubyobject currentobject   begin
int comparemethod   isexclusive ? methodindex op_lt   methodindex op_le
while  currentobject callmethod context  comparemethod   string methodindex names get comparemethod   end  istrue
size
if  currentobject equals end
break
currentobject   currentobject callmethod context
return getruntime   newfixnum size
@jrubymethod name      required   1  frame   true
public irubyobject op_equal threadcontext context  irubyobject other  block block
if  this    other  return getruntime   gettrue
if    other instanceof rubyrange   return getruntime   getfalse
rubyrange otherrange    rubyrange  other
boolean result
begin op_equal context  otherrange begin  istrue
end op_equal context  otherrange end  istrue
isexclusive    otherrange isexclusive
return getruntime   newboolean result
@jrubymethod name      required   1
public irubyobject eql_p irubyobject other
if  this    other  return getruntime   gettrue
if    other instanceof rubyrange   return getruntime   getfalse
rubyrange otherrange    rubyrange other
if   begin equals otherrange begin      end equals otherrange end     isexclusive    otherrange isexclusive  return getruntime   getfalse
return getruntime   gettrue
@jrubymethod name      frame   true
public irubyobject each threadcontext context  block block
if   begin respondsto     throw getruntime   newtypeerror     begin getmetaclass   getname
if  begin instanceof rubyfixnum    end instanceof rubyfixnum
long endlong     rubynumeric  end  getlongvalue
long i     rubynumeric  begin  getlongvalue
if   isexclusive
endlong    1
for    i < endlong  i
block yield context  getruntime   newfixnum i
else if  begin instanceof rubystring
rubystring  begin  upto context  end  isexclusive  block
else if  getruntime   getnumeric   isinstance begin
if   isexclusive
end   end callmethod context  methodindex op_plus     rubyfixnum one getruntime
while  begin callmethod context  methodindex op_spaceship     end  converttointeger   getlongvalue   < 0
block yield context  begin
begin   begin callmethod context  methodindex op_plus     rubyfixnum one getruntime
else
irubyobject v   begin
if  isexclusive
while  v callmethod context  methodindex op_spaceship     end  converttointeger   getlongvalue   < 0
if  v equals end
break
block yield context  v
v   v callmethod context
else
while  v callmethod context  methodindex op_spaceship     end  converttointeger   getlongvalue   <  0
block yield context  v
if  v equals end
break
v   v callmethod context
return this
@jrubymethod name      optional   1  frame   true
public irubyobject step threadcontext context  irubyobject args  block block
irubyobject currentobject   begin
int comparemethod   isexclusive ? methodindex op_lt   methodindex op_le
// int stepsize = (int) (args.length == 0 ? 1 : args[0].converttointeger().getlongvalue());
double stepsize   1 0
if  args length    0
stepsize   double parsedouble args tostring
if  stepsize    0
throw getruntime   newargumenterror
else if  stepsize < 0
throw getruntime   newargumenterror
if  begin instanceof rubyfloat    end instanceof rubyfloat
rubyfloat stepnum   getruntime   newfloat stepsize
while  currentobject callmethod context  comparemethod  methodindex names get comparemethod   end  istrue
block yield context  currentobject
currentobject   currentobject callmethod context  methodindex op_plus     stepnum
else if  begin instanceof rubynumeric    end instanceof rubynumeric
stepsize   math floor stepsize
if  stepsize    0
throw getruntime   newargumenterror
rubyfixnum stepnum   getruntime   newfixnum double valueof stepsize  longvalue
while  currentobject callmethod context  comparemethod  methodindex names get comparemethod   end  istrue
block yield context  currentobject
currentobject   currentobject callmethod context  methodindex op_plus     stepnum
else if begin instanceof rubystring    end instanceof rubystring
rubystring afterend   isexclusive ?  rubystring  end    rubystring  end callmethod context
boolean pastend   isexclusive    currentobject callmethod context  methodindex equalequal     end  istrue
while pastend    false
block yield context  currentobject
for  int i   0  i < stepsize  i
currentobject   currentobject callmethod context
if currentobject callmethod context  methodindex equalequal     afterend  istrue
pastend   true
break
else
if   begin respondsto     throw getruntime   newtypeerror     begin getmetaclass   getname
while  currentobject callmethod context  comparemethod  methodindex names get comparemethod   end  istrue
block yield context  currentobject
for  int i   0  i < stepsize  i
currentobject   currentobject callmethod context
return this
private boolean r_lt threadcontext context  irubyobject a  irubyobject b
irubyobject r   a callmethod context  methodindex op_spaceship    b
if r isnil    return false
return rubycomparable cmpint context  r  a  b  < 0
private boolean r_le threadcontext context  irubyobject a  irubyobject b
irubyobject r   a callmethod context  methodindex op_spaceship    b
if r isnil    return false
return rubycomparable cmpint context  r  a  b  <  0
@jrubymethod name              required   1  frame   true
public rubyboolean include_p threadcontext context  irubyobject obj  block block
rubyboolean val   getruntime   getfalse
if r_le context  begin obj
if isexclusive
if r_lt context  obj end
val   getruntime   gettrue
else
if r_le context  obj end
val   getruntime   gettrue
return val