/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2001 chad fowler <chadfowler@chadfowler.com>
* copyright (c) 2001 alan moore <alan_moore@gmx.net>
* copyright (c) 2001-2004 jan arne petersen <jpetersen@uni-bonn.de>
* copyright (c) 2002 benoit cerrina <b.cerrina@wanadoo.fr>
* copyright (c) 2002-2004 anders bengtsson <ndrsbngtssn@yahoo.se>
* copyright (c) 2004 stefan matthias aust <sma@3plus4.de>
* copyright (c) 2004 thomas e enebo <enebo@acm.org>
* copyright (c) 2004 david corbin <dcorbin@users.sourceforge.net>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby javasupport
import java lang annotation annotation
import java lang reflect accessibleobject
import java lang reflect constructor
import java lang reflect invocationtargetexception
import java lang reflect type
import org jruby ruby
import org jruby rubyclass
import org jruby rubymodule
import org jruby runtime callbackfactory
import org jruby runtime objectallocator
import org jruby runtime builtin irubyobject
public class javaconstructor extends javacallable
private final constructor<?> constructor
private final class<?> parametertypes
public static rubyclass createjavaconstructorclass ruby runtime  rubymodule javamodule
// todo: not_allocatable_allocator is probably ok here, since we don't intend for people to monkey with
// this type and it can't be marshalled. confirm. jruby-415
rubyclass result
javamodule defineclassunder    runtime getobject    objectallocator not_allocatable_allocator
callbackfactory callbackfactory   runtime callbackfactory javaconstructor class
javaaccessibleobject registerrubymethods runtime  result
javacallable registerrubymethods runtime  result
result definefastmethod    callbackfactory getfastoptmethod
result definefastmethod    callbackfactory getfastmethod
result definefastmethod    callbackfactory getfastmethod
return result
public javaconstructor ruby runtime  constructor<?> constructor
super runtime  runtime getjavasupport   getjavamodule   fastgetclass
this constructor   constructor
this parametertypes   constructor getparametertypes
public static javaconstructor create ruby runtime  constructor<?> constructor
return new javaconstructor runtime  constructor
public static javaconstructor getmatchingconstructor ruby runtime  class<?> javaclass  class<?> argumenttypes
try
return create runtime  javaclass getconstructor argumenttypes
catch  nosuchmethodexception e
// java reflection does not allow retrieving constructors like methods
ctorsearch  for  constructor<?> ctor   javaclass getconstructors
class<?> targettypes   ctor getparametertypes
// for zero args case we can stop searching
if  targettypes length    argumenttypes length
continue ctorsearch
else if  targettypes length    0    argumenttypes length    0
return create runtime  ctor
else
boolean found   true
typescan  for  int i   0  i < argumenttypes length  i
if  i >  targettypes length  found   false
if  targettypes isassignablefrom argumenttypes
found   true
continue typescan
else
found   false
continue ctorsearch
// if we get here, we found a matching method, use it
// todo: choose narrowest method by continuing to search
if  found
return create runtime  ctor
// no matching ctor found
return null
public boolean equals object other
return other instanceof javaconstructor
this constructor      javaconstructor other  constructor
public int hashcode
return constructor hashcode
public int getarity
return parametertypes length
protected string nameoninspection
return gettype   tostring
public class<?> getparametertypes
return parametertypes
public class<?> getexceptiontypes
return constructor getexceptiontypes
public type getgenericparametertypes
return constructor getgenericparametertypes
public type getgenericexceptiontypes
return constructor getgenericexceptiontypes
public annotation getparameterannotations
return constructor getparameterannotations
public boolean isvarargs
return constructor isvarargs
public int getmodifiers
return constructor getmodifiers
public string togenericstring
return constructor togenericstring
protected accessibleobject accessibleobject
return constructor
public irubyobject type_parameters
return java getinstance getruntime    constructor gettypeparameters
public irubyobject return_type
return getruntime   getnil
public irubyobject new_instance irubyobject args
int length   args length
class<?> types   parametertypes
if  length    types length
throw getruntime   newargumenterror length  types length
object constructorarguments   new object
for  int i   length    i >  0
constructorarguments   javautil convertargument getruntime    args  types
try
object result   constructor newinstance constructorarguments
return javaobject wrap getruntime    result
catch  illegalargumentexception iae
throw getruntime   newtypeerror     argument_types   inspect
constructorarguments getclass   getname
catch  illegalaccessexception iae
throw getruntime   newtypeerror
catch  invocationtargetexception ite
getruntime   getjavasupport   handlenativeexception ite gettargetexception
// not reached
assert false
return null
catch  instantiationexception ie
throw getruntime   newtypeerror     constructor getdeclaringclass   getname