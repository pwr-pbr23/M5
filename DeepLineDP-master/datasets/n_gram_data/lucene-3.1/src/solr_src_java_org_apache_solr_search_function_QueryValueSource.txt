/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache solr search function
import org apache lucene index indexreader
import org apache lucene search
import org apache solr common solrexception
import java io ioexception
import java util map
/**
* <code>queryvaluesource</code> returns the relevance score of the query
*/
public class queryvaluesource extends valuesource
final query q
final float defval
public queryvaluesource query q  float defval
this q   q
this defval   defval
public query getquery     return q
public float getdefaultvalue     return defval
@override
public string description
return     q       defval
@override
public docvalues getvalues map context  indexreader reader  throws ioexception
return new querydocvalues reader  q  defval  context  null ? null    weight context get this
@override
public int hashcode
return q hashcode     29
@override
public boolean equals object o
if  queryvaluesource class    o getclass    return false
queryvaluesource other    queryvaluesource o
return this q equals other q     this defval  other defval
@override
public void createweight map context  searcher searcher  throws ioexception
weight w   q weight searcher
context put this  w
class querydocvalues extends docvalues
final query q
final indexreader reader
final weight weight
final float defval
scorer scorer
int scorerdoc     the document the scorer is on
// the last document requested... start off with high value
// to trigger a scorer reset on first access.
int lastdocrequested integer max_value
public querydocvalues indexreader reader  query q  float defval  weight w  throws ioexception
this reader   reader
this q   q
this defval   defval
weight   w  null ? w   q weight new indexsearcher reader
@override
public float floatval int doc
try
if  doc < lastdocrequested
// out-of-order access.... reset scorer.
scorer   weight scorer reader  true  false
if  scorer  null  return defval
scorerdoc    1
lastdocrequested   doc
if  scorerdoc < doc
scorerdoc   scorer advance doc
if  scorerdoc > doc
// query doesn't match this document... either because we hit the
// end, or because the next doc is after this doc.
return defval
// a match!
return scorer score
catch  ioexception e
throw new solrexception solrexception errorcode server_error    q   doc  e
@override
public int intval int doc
return  int floatval doc
@override
public long longval int doc
return  long floatval doc
@override
public double doubleval int doc
return  double floatval doc
@override
public string strval int doc
return float tostring floatval doc
@override
public string tostring int doc
return     q       defval       floatval doc