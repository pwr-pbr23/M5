/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache solr schema
import java io ioexception
import java util map
import org apache lucene document fieldable
import org apache lucene index indexreader
import org apache lucene search
import org apache solr response textresponsewriter
import org apache solr response xmlwriter
import org apache solr search function docvalues
import org apache solr search function valuesource
import org apache solr search solrindexreader
/**
* utility field used for random sorting.  it should not be passed a value.
* <p>
* this random sorting implementation uses the dynamic field name to set the
* random 'seed'.  to get random sorting order, you need to use a random
* dynamic field name.  for example, you will need to configure schema.xml:
* <pre>
* &lt;types&gt;
*  ...
*  &lt;fieldtype name="random" class="solr.randomsortfield" /&gt;
*  ...
* &lt;/types&gt;
* &lt;fields&gt;
*  ...
*  &lt;dynamicfield name="random*" type="random" indexed="true" stored="false"/&gt;
*  ...
* &lt;/fields&gt;
* </pre>
*
* examples of queries:
* <ul>
* <li>http://localhost:8983/solr/select/?q=*:*&fl=name&sort=rand_1234%20desc</li>
* <li>http://localhost:8983/solr/select/?q=*:*&fl=name&sort=rand_2345%20desc</li>
* <li>http://localhost:8983/solr/select/?q=*:*&fl=name&sort=rand_abdc%20desc</li>
* <li>http://localhost:8983/solr/select/?q=*:*&fl=name&sort=rand_21%20desc</li>
* </ul>
* note that multiple calls to the same url will return the same sorting order.
*
* @version $id$
* @since solr 1.3
*/
public class randomsortfield extends fieldtype
// thomas wang's hash32shift function, from http://www.cris.com/~ttwang/tech/inthash.htm
// slightly modified to return only positive integers.
private static int hash int key
key   ~key    key << 15      key    key << 15    key   1
key   key ^  key >>> 12
key   key    key << 2
key   key ^  key >>> 4
key   key   2057     key    key    key << 3      key << 11
key   key ^  key >>> 16
return key >>> 1
/**
* given a field name and an indexreader, get a random hash seed.
* using dynamic fields, you can force the random order to change
*/
private static int getseed string fieldname  indexreader r
solrindexreader top    solrindexreader r
int base 0
while  top getparent      null
base    top getbase
top   top getparent
// calling getversion() on a segment will currently give you a null pointer exception, so
// we use the top-level reader.
return fieldname hashcode     base    int top getversion
@override
public sortfield getsortfield schemafield field  boolean reverse
return new sortfield field getname    randomcomparatorsource  reverse
@override
public valuesource getvaluesource schemafield field
return new randomvaluesource field getname
@override
public void write xmlwriter xmlwriter  string name  fieldable f  throws ioexception
@override
public void write textresponsewriter writer  string name  fieldable f  throws ioexception
private static fieldcomparatorsource randomcomparatorsource   new fieldcomparatorsource
@override
public fieldcomparator newcomparator final string fieldname  final int numhits  int sortpos  boolean reversed  throws ioexception
return new fieldcomparator
int seed
private final int values   new int
int bottomval
@override
public int compare int slot1  int slot2
return values   values      values will be positive    no overflow possible
@override
public void setbottom int slot
bottomval   values
@override
public int comparebottom int doc  throws ioexception
return bottomval   hash doc seed
@override
public void copy int slot  int doc  throws ioexception
values   hash doc seed
@override
public void setnextreader indexreader reader  int docbase  throws ioexception
seed   getseed fieldname  reader
@override
public comparable value int slot
return values
public class randomvaluesource extends valuesource
private final string field
public randomvaluesource string field
this field field
@override
public string description
return field
@override
public docvalues getvalues map context  final indexreader reader  throws ioexception
return new docvalues
private final int seed   getseed field  reader
@override
public float floatval int doc
return  float hash doc seed
@override
public int intval int doc
return hash doc seed
@override
public long longval int doc
return  long hash doc seed
@override
public double doubleval int doc
return  double hash doc seed
@override
public string strval int doc
return integer tostring hash doc seed
@override
public string tostring int doc
return description         intval doc
@override
public boolean equals object o
if    o instanceof randomvaluesource   return false
randomvaluesource other    randomvaluesource o
return this field equals other field
@override
public int hashcode
return field hashcode