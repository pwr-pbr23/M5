package org apache solr search function distance
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import org apache lucene index indexreader
import org apache lucene search searcher
import org apache lucene spatial distanceutils
import org apache solr common solrexception
import org apache solr search function docvalues
import org apache solr search function multivaluesource
import org apache solr search function valuesource
import java io ioexception
import java util map
/**
* calculate the p-norm for a vector.  see http://en.wikipedia.org/wiki/lp_space
* <p/>
* common cases:
* <ul>
* <li>0 = sparseness calculation</li>
* <li>1 = manhattan distance</li>
* <li>2 = euclidean distance</li>
* <li>integer.max_value = infinite norm</li>
* </ul>
*
* @see squaredeuclideanfunction for the special case
*/
public class vectordistancefunction extends valuesource
protected multivaluesource source1  source2
protected float power
protected float oneoverpower
public vectordistancefunction float power  multivaluesource source1  multivaluesource source2
if   source1 dimension      source2 dimension
throw new solrexception solrexception errorcode bad_request
this power   power
this oneoverpower   1   power
this source1   source1
this source2   source2
protected string name
return
/**
* calculate the distance
*
* @param doc the current doc
* @param dv1 the values from the first multivaluesource
* @param dv2 the values from the second multivaluesource
* @return the distance
*/
protected double distance int doc  docvalues dv1  docvalues dv2
//handle some special cases:
double vals1   new double
double vals2   new double
dv1 doubleval doc  vals1
dv2 doubleval doc  vals2
return distanceutils vectordistance vals1  vals2  power  oneoverpower
@override
public docvalues getvalues map context  indexreader reader  throws ioexception
final docvalues vals1   source1 getvalues context  reader
final docvalues vals2   source2 getvalues context  reader
return new docvalues
@override
public byte byteval int doc
return  byte  doubleval doc
@override
public short shortval int doc
return  short  doubleval doc
@override
public float floatval int doc
return  float  doubleval doc
@override
public int intval int doc
return  int  doubleval doc
@override
public long longval int doc
return  long  doubleval doc
@override
public double doubleval int doc
return distance doc  vals1  vals2
@override
public string strval int doc
return double tostring doubleval doc
@override
public string tostring int doc
stringbuilder sb   new stringbuilder
sb append name    append    append power  append
boolean firsttime   true
sb append vals1 tostring doc   append
sb append vals2 tostring doc
sb append
return sb tostring
@override
public void createweight map context  searcher searcher  throws ioexception
source1 createweight context  searcher
source2 createweight context  searcher
@override
public boolean equals object o
if  this    o  return true
if    o instanceof vectordistancefunction   return false
vectordistancefunction that    vectordistancefunction  o
if  float compare that power  power     0  return false
if   source1 equals that source1   return false
if   source2 equals that source2   return false
return true
@override
public int hashcode
int result   source1 hashcode
result   31   result   source2 hashcode
result   31   result   float floattorawintbits power
return result
@override
public string description
stringbuilder sb   new stringbuilder
sb append name    append    append power  append
sb append source1  append
sb append source2
sb append
return sb tostring