package org apache solr search function distance
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import org apache lucene spatial distanceutils
import org apache solr search function valuesource
import org apache solr search function docvalues
import org apache lucene index indexreader
import org apache lucene search searcher
import org apache lucene spatial geohash geohashutils
import java util map
import java io ioexception
/**
*  calculate the haversine distance between two geo hash codes.
*
* <p/>
* ex: ghhsin(valuesource, valuesource, radius)
* <p/>
*
* @see org.apache.solr.search.function.distance.haversinefunction for more details on the implementation
*
**/
public class geohashhaversinefunction extends valuesource
private valuesource geohash1  geohash2
private double radius
public geohashhaversinefunction valuesource geohash1  valuesource geohash2  double radius
this geohash1   geohash1
this geohash2   geohash2
this radius   radius
protected string name
return
@override
public docvalues getvalues map context  indexreader reader  throws ioexception
final docvalues gh1dv   geohash1 getvalues context  reader
final docvalues gh2dv   geohash2 getvalues context  reader
return new docvalues
@override
public float floatval int doc
return  float  doubleval doc
@override
public int intval int doc
return  int  doubleval doc
@override
public long longval int doc
return  long  doubleval doc
@override
public double doubleval int doc
return distance doc  gh1dv  gh2dv
@override
public string strval int doc
return double tostring doubleval doc
@override
public string tostring int doc
stringbuilder sb   new stringbuilder
sb append name    append
sb append gh1dv tostring doc   append    append gh2dv tostring doc
sb append
return sb tostring
protected double distance int doc  docvalues gh1dv  docvalues gh2dv
double result   0
string h1   gh1dv strval doc
string h2   gh2dv strval doc
if  h1    null    h2    null    h1 equals h2     false
//todo: if one of the hashes is a literal value source, seems like we could cache it
//and avoid decoding every time
double h1pair   geohashutils decode h1
double h2pair   geohashutils decode h2
result   distanceutils haversine math toradians h1pair   math toradians h1pair
math toradians h2pair   math toradians h2pair   radius
else if  h1    null    h2    null
result   double max_value
return result
@override
public void createweight map context  searcher searcher  throws ioexception
geohash1 createweight context  searcher
geohash2 createweight context  searcher
@override
public boolean equals object o
if  this getclass      o getclass    return false
geohashhaversinefunction other    geohashhaversinefunction  o
return this name   equals other name
geohash1 equals other geohash1
geohash2 equals other geohash2
radius    other radius
@override
public int hashcode
int result
result   geohash1 hashcode
result   31   result   geohash2 hashcode
result   31   result   name   hashcode
long temp  double doubletorawlongbits radius
result   31   result    int   temp ^  temp >>> 32
return result
@override
public string description
stringbuilder sb   new stringbuilder
sb append name    append
sb append geohash1  append    append geohash2
sb append
return sb tostring