/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache solr search function
import org apache lucene index indexreader
import org apache lucene search fieldcache
import java io ioexception
import java util map
/**
* obtains float field values from the {@link org.apache.lucene.search.fieldcache}
* using <code>getfloats()</code>
* and makes those values available as other numeric types, casting as needed.
*
* @version $id: floatfieldsource.java 555343 2007-07-11 17:46:25z hossman $
*/
public class longfieldsource extends fieldcachesource
protected fieldcache longparser parser
public longfieldsource string field
this field  null
public longfieldsource string field  fieldcache longparser parser
super field
this parser   parser
@override
public string description
return     field
public long externaltolong string extval
return long parselong extval
@override
public docvalues getvalues map context  indexreader reader  throws ioexception
final long arr    parser    null  ?
cache getlongs reader  field
cache getlongs reader  field  parser
return new docvalues
@override
public float floatval int doc
return  float  arr
@override
public int intval int doc
return  int  arr
@override
public long longval int doc
return arr
@override
public double doubleval int doc
return arr
@override
public string strval int doc
return long tostring arr
@override
public string tostring int doc
return description         longval doc
@override
public valuesourcescorer getrangescorer indexreader reader  string lowerval  string upperval  boolean includelower  boolean includeupper
long lower upper
// instead of using separate comparison functions, adjust the endpoints.
if  lowerval  null
lower   long min_value
else
lower   externaltolong lowerval
if   includelower    lower < long max_value  lower
if  upperval  null
upper   long max_value
else
upper   externaltolong upperval
if   includeupper    upper > long min_value  upper
final long ll   lower
final long uu   upper
return new valuesourcescorer reader  this
@override
public boolean matchesvalue int doc
long val   arr
// only check for deleted if it's the default value
// if (val==0 && reader.isdeleted(doc)) return false;
return val >  ll    val <  uu
@override
public boolean equals object o
if  o getclass      this getclass    return false
longfieldsource other    longfieldsource  o
return super equals other
this parser    null ? other parser    null
this parser getclass      other parser getclass
@override
public int hashcode
int h   parser    null ? this getclass   hashcode     parser getclass   hashcode
h    super hashcode
return h