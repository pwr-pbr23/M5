/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache solr search
import org apache lucene index indexreader
import org apache lucene queryparser parseexception
import org apache lucene search query
import org apache lucene search searcher
import org apache lucene search spell jarowinklerdistance
import org apache lucene search spell levensteindistance
import org apache lucene search spell ngramdistance
import org apache lucene search spell stringdistance
import org apache lucene spatial distanceutils
import org apache solr common solrexception
import org apache solr common util namedlist
import org apache solr schema datefield
import org apache solr schema legacydatefield
import org apache solr schema schemafield
import org apache solr schema triedatefield
import org apache solr search function boostedquery
import org apache solr search function constnumbersource
import org apache solr search function divfloatfunction
import org apache solr search function docvalues
import org apache solr search function doubleconstvaluesource
import org apache solr search function dualfloatfunction
import org apache solr search function linearfloatfunction
import org apache solr search function literalvaluesource
import org apache solr search function maxfloatfunction
import org apache solr search function multivaluesource
import org apache solr search function ordfieldsource
import org apache solr search function productfloatfunction
import org apache solr search function queryvaluesource
import org apache solr search function rangemapfloatfunction
import org apache solr search function reciprocalfloatfunction
import org apache solr search function reverseordfieldsource
import org apache solr search function scalefloatfunction
import org apache solr search function simplefloatfunction
import org apache solr search function singlefunction
import org apache solr search function sumfloatfunction
import org apache solr search function topvaluesource
import org apache solr search function valuesource
import org apache solr search function vectorvaluesource
import org apache solr search function distance geohashfunction
import org apache solr search function distance geohashhaversinefunction
import org apache solr search function distance haversineconstfunction
import org apache solr search function distance haversinefunction
import org apache solr search function distance squaredeuclideanfunction
import org apache solr search function distance stringdistancefunction
import org apache solr search function distance vectordistancefunction
import org apache solr util plugin namedlistinitializedplugin
import java io ioexception
import java util arraylist
import java util collections
import java util date
import java util hashmap
import java util list
import java util map
/**
* a factory that parses user queries to generate valuesource instances.
* intended usage is to create pluggable, named functions for use in function queries.
*/
public abstract class valuesourceparser implements namedlistinitializedplugin
/**
* initialize the plugin.
*/
public void init namedlist args
/**
* parse the user input into a valuesource.
*
* @param fp
* @throws parseexception
*/
public abstract valuesource parse functionqparser fp  throws parseexception
/* standard functions */
public static map<string  valuesourceparser> standardvaluesourceparsers   new hashmap<string  valuesourceparser>
/**
* adds a new parser for the name and returns any existing one that was overriden.
* this is not thread safe.
*/
public static valuesourceparser addparser string name  valuesourceparser p
return standardvaluesourceparsers put name  p
/**
* adds a new parser for the name and returns any existing one that was overriden.
* this is not thread safe.
*/
public static valuesourceparser addparser namedparser p
return standardvaluesourceparsers put p name    p
private static void alias string source  string dest
standardvaluesourceparsers put dest  standardvaluesourceparsers get source
static
addparser    new valuesourceparser
@override
public valuesource parse functionqparser fp  throws parseexception
string field   fp parseid
return new topvaluesource new ordfieldsource field
addparser    new valuesourceparser
@override
public valuesource parse functionqparser fp  throws parseexception
return new literalvaluesource fp getstring
addparser    new valuesourceparser
@override
public valuesource parse functionqparser fp  throws parseexception
string field   fp parseid
return new topvaluesource new reverseordfieldsource field
addparser    new valuesourceparser
@override
public valuesource parse functionqparser fp  throws parseexception
valuesource source   fp parsevaluesource
// nested top is redundant, and ord and rord get automatically wrapped
if  source instanceof topvaluesource  return source
return new topvaluesource source
addparser    new valuesourceparser
@override
public valuesource parse functionqparser fp  throws parseexception
valuesource source   fp parsevaluesource
float slope   fp parsefloat
float intercept   fp parsefloat
return new linearfloatfunction source  slope  intercept
addparser    new valuesourceparser
@override
public valuesource parse functionqparser fp  throws parseexception
valuesource source   fp parsevaluesource
float val   fp parsefloat
return new maxfloatfunction source  val
addparser    new valuesourceparser
@override
public valuesource parse functionqparser fp  throws parseexception
valuesource source   fp parsevaluesource
float m   fp parsefloat
float a   fp parsefloat
float b   fp parsefloat
return new reciprocalfloatfunction source  m  a  b
addparser    new valuesourceparser
@override
public valuesource parse functionqparser fp  throws parseexception
valuesource source   fp parsevaluesource
float min   fp parsefloat
float max   fp parsefloat
return new topvaluesource new scalefloatfunction source  min  max
addparser    new valuesourceparser
@override
public valuesource parse functionqparser fp  throws parseexception
valuesource a   fp parsevaluesource
valuesource b   fp parsevaluesource
return new divfloatfunction a  b
addparser    new valuesourceparser
@override
public valuesource parse functionqparser fp  throws parseexception
valuesource source   fp parsevaluesource
float min   fp parsefloat
float max   fp parsefloat
float target   fp parsefloat
float def   fp hasmorearguments   ? fp parsefloat     null
return new rangemapfloatfunction source  min  max  target  def
addparser    new valuesourceparser
@override
public valuesource parse functionqparser fp  throws parseexception
valuesource source   fp parsevaluesource
return new simplefloatfunction source
@override
protected string name
return
@override
protected float func int doc  docvalues vals
return math abs vals floatval doc
addparser    new valuesourceparser
@override
public valuesource parse functionqparser fp  throws parseexception
list<valuesource> sources   fp parsevaluesourcelist
return new sumfloatfunction sources toarray new valuesource
alias
addparser    new valuesourceparser
@override
public valuesource parse functionqparser fp  throws parseexception
list<valuesource> sources   fp parsevaluesourcelist
return new productfloatfunction sources toarray new valuesource
alias
addparser    new valuesourceparser
@override
public valuesource parse functionqparser fp  throws parseexception
valuesource a   fp parsevaluesource
valuesource b   fp parsevaluesource
return new dualfloatfunction a  b
@override
protected string name
return
@override
protected float func int doc  docvalues avals  docvalues bvals
return avals floatval doc    bvals floatval doc
addparser    new valuesourceparser
@override
public valuesource parse functionqparser fp  throws parseexception
return new vectorvaluesource fp parsevaluesourcelist
addparser    new valuesourceparser
// boost(query($q),rating)
@override
public valuesource parse functionqparser fp  throws parseexception
query q   fp parsenestedquery
float defval   0 0f
if  fp hasmorearguments
defval   fp parsefloat
return new queryvaluesource q  defval
addparser    new valuesourceparser
@override
public valuesource parse functionqparser fp  throws parseexception
query q   fp parsenestedquery
valuesource vs   fp parsevaluesource
boostedquery bq   new boostedquery q  vs
return new queryvaluesource bq  0 0f
addparser    haversineconstfunction parser
addparser    new valuesourceparser
@override
public valuesource parse functionqparser fp  throws parseexception
double radius   fp parsedouble
//solr-2114, make the convert flag required, since the parser doesn't support much in the way of lookahead or the ability to convert a string into a valuesource
boolean convert   boolean parseboolean fp parsearg
multivaluesource pv1
multivaluesource pv2
valuesource one   fp parsevaluesource
valuesource two   fp parsevaluesource
if  fp hasmorearguments
list<valuesource> s1   new arraylist<valuesource>
s1 add one
s1 add two
pv1   new vectorvaluesource s1
valuesource x2   fp parsevaluesource
valuesource y2   fp parsevaluesource
list<valuesource> s2   new arraylist<valuesource>
s2 add x2
s2 add y2
pv2   new vectorvaluesource s2
else
//check to see if we have multivalue source
if  one instanceof multivaluesource    two instanceof multivaluesource
pv1    multivaluesource  one
pv2    multivaluesource  two
else
throw new solrexception solrexception errorcode bad_request
return new haversinefunction pv1  pv2  radius  convert
addparser    new valuesourceparser
@override
public valuesource parse functionqparser fp  throws parseexception
double radius   fp parsedouble
valuesource gh1   fp parsevaluesource
valuesource gh2   fp parsevaluesource
return new geohashhaversinefunction gh1  gh2  radius
addparser    new valuesourceparser
@override
public valuesource parse functionqparser fp  throws parseexception
valuesource lat   fp parsevaluesource
valuesource lon   fp parsevaluesource
return new geohashfunction lat  lon
addparser    new valuesourceparser
@override
public valuesource parse functionqparser fp  throws parseexception
valuesource str1   fp parsevaluesource
valuesource str2   fp parsevaluesource
string distclass   fp parsearg
stringdistance dist   null
if  distclass equalsignorecase
dist   new jarowinklerdistance
else if  distclass equalsignorecase
dist   new levensteindistance
else if  distclass equalsignorecase
int ngram   2
if  fp hasmorearguments
ngram   fp parseint
dist   new ngramdistance ngram
else
dist    stringdistance  fp req getcore   getresourceloader   newinstance distclass
return new stringdistancefunction str1  str2  dist
addparser new doubleparser
@override
public double func int doc  docvalues vals
return vals doubleval doc    distanceutils degrees_to_radians
addparser new doubleparser
@override
public double func int doc  docvalues vals
return vals doubleval doc    distanceutils radians_to_degrees
addparser new doubleparser
@override
public double func int doc  docvalues vals
return math sqrt vals doubleval doc
addparser new doubleparser
@override
public double func int doc  docvalues vals
return math cbrt vals doubleval doc
addparser new doubleparser
@override
public double func int doc  docvalues vals
return math log10 vals doubleval doc
addparser new doubleparser
@override
public double func int doc  docvalues vals
return math log vals doubleval doc
addparser new doubleparser
@override
public double func int doc  docvalues vals
return math exp vals doubleval doc
addparser new doubleparser
@override
public double func int doc  docvalues vals
return math sin vals doubleval doc
addparser new doubleparser
@override
public double func int doc  docvalues vals
return math cos vals doubleval doc
addparser new doubleparser
@override
public double func int doc  docvalues vals
return math tan vals doubleval doc
addparser new doubleparser
@override
public double func int doc  docvalues vals
return math asin vals doubleval doc
addparser new doubleparser
@override
public double func int doc  docvalues vals
return math acos vals doubleval doc
addparser new doubleparser
@override
public double func int doc  docvalues vals
return math atan vals doubleval doc
addparser new doubleparser
@override
public double func int doc  docvalues vals
return math sinh vals doubleval doc
addparser new doubleparser
@override
public double func int doc  docvalues vals
return math cosh vals doubleval doc
addparser new doubleparser
@override
public double func int doc  docvalues vals
return math tanh vals doubleval doc
addparser new doubleparser
@override
public double func int doc  docvalues vals
return math ceil vals doubleval doc
addparser new doubleparser
@override
public double func int doc  docvalues vals
return math floor vals doubleval doc
addparser new doubleparser
@override
public double func int doc  docvalues vals
return math rint vals doubleval doc
addparser new double2parser
@override
public double func int doc  docvalues a  docvalues b
return math pow a doubleval doc   b doubleval doc
addparser new double2parser
@override
public double func int doc  docvalues a  docvalues b
return math hypot a doubleval doc   b doubleval doc
addparser new double2parser
@override
public double func int doc  docvalues a  docvalues b
return math atan2 a doubleval doc   b doubleval doc
addparser    new valuesourceparser
@override
public valuesource parse functionqparser fp  throws parseexception
list<valuesource> sources   fp parsevaluesourcelist
mvresult mvr   getmultivaluesources sources
return new squaredeuclideanfunction mvr mv1  mvr mv2
addparser    new valuesourceparser
@override
public valuesource parse functionqparser fp  throws parseexception
float power   fp parsefloat
list<valuesource> sources   fp parsevaluesourcelist
mvresult mvr   getmultivaluesources sources
return new vectordistancefunction power  mvr mv1  mvr mv2
addparser    new datevaluesourceparser
addparser    new valuesourceparser
@override
public valuesource parse functionqparser fp  throws parseexception
return new doubleconstvaluesource math pi
addparser    new valuesourceparser
@override
public valuesource parse functionqparser fp  throws parseexception
return new doubleconstvaluesource math e
private static void splitsources int dim  list<valuesource> sources  list<valuesource> dest1  list<valuesource> dest2
//get dim value sources for the first vector
for  int i   0  i < dim  i
dest1 add sources get i
//get dim value sources for the second vector
for  int i   dim  i < sources size    i
dest2 add sources get i
private static mvresult getmultivaluesources list<valuesource> sources
mvresult mvr   new mvresult
if  sources size   % 2    0
throw new solrexception solrexception errorcode bad_request
if  sources size      2
//check to see if these are multivaluesource
boolean s1mv   sources get 0  instanceof multivaluesource
boolean s2mv   sources get 1  instanceof multivaluesource
if  s1mv    s2mv
mvr mv1    multivaluesource  sources get 0
mvr mv2    multivaluesource  sources get 1
else if  s1mv
s2mv
//if one is a multivaluesource, than the other one needs to be too.
throw new solrexception solrexception errorcode bad_request
else
mvr mv1   new vectorvaluesource collections singletonlist sources get 0
mvr mv2   new vectorvaluesource collections singletonlist sources get 1
else
int dim   sources size     2
list<valuesource> sources1   new arraylist<valuesource> dim
list<valuesource> sources2   new arraylist<valuesource> dim
//get dim value sources for the first vector
splitsources dim  sources  sources1  sources2
mvr mv1   new vectorvaluesource sources1
mvr mv2   new vectorvaluesource sources2
return mvr
private static class mvresult
multivaluesource mv1
multivaluesource mv2
class datevaluesourceparser extends valuesourceparser
datefield df   new triedatefield
@override
public void init namedlist args
public date getdate functionqparser fp  string arg
if  arg    null  return null
if  arg startswith        arg length   > 0    character isdigit arg charat 0
return df parsemathlenient null  arg  fp req
return null
public valuesource getvaluesource functionqparser fp  string arg
if  arg    null  return null
schemafield f   fp req getschema   getfield arg
if  f gettype   getclass      datefield class    f gettype   getclass      legacydatefield class
throw new solrexception solrexception errorcode bad_request      arg
return f gettype   getvaluesource f  fp
@override
public valuesource parse functionqparser fp  throws parseexception
string first   fp parsearg
string second   fp parsearg
if  first    null  first
date d1   getdate fp  first
valuesource v1   d1    null ? getvaluesource fp  first    null
date d2   getdate fp  second
valuesource v2   d2    null ? getvaluesource fp  second    null
// d     constant
// v     field
// dd    constant
// dv    subtract field from constant
// vd    subtract constant from field
// vv    subtract fields
final long ms1    d1    null  ? 0   d1 gettime
final long ms2    d2    null  ? 0   d2 gettime
// "d,dd" handle both constant cases
if  d1    null    v2    null
return new longconstvaluesource ms1   ms2
// "v" just the date field
if  v1    null    v2    null    d2    null
return v1
// "dv"
if  d1    null    v2    null
return new dualfloatfunction new longconstvaluesource ms1   v2
@override
protected string name
return
@override
protected float func int doc  docvalues avals  docvalues bvals
return ms1   bvals longval doc
// "vd"
if  v1    null    d2    null
return new dualfloatfunction v1  new longconstvaluesource ms2
@override
protected string name
return
@override
protected float func int doc  docvalues avals  docvalues bvals
return avals longval doc    ms2
// "vv"
if  v1    null    v2    null
return new dualfloatfunction v1  v2
@override
protected string name
return
@override
protected float func int doc  docvalues avals  docvalues bvals
return avals longval doc    bvals longval doc
return null     shouldn't happen
// private for now - we need to revisit how to handle typing in function queries
class longconstvaluesource extends constnumbersource
final long constant
final double dv
final float fv
public longconstvaluesource long constant
this constant   constant
this dv   constant
this fv   constant
@override
public string description
return     constant
@override
public docvalues getvalues map context  indexreader reader  throws ioexception
return new docvalues
@override
public float floatval int doc
return fv
@override
public int intval int doc
return  int  constant
@override
public long longval int doc
return constant
@override
public double doubleval int doc
return dv
@override
public string strval int doc
return long tostring constant
@override
public string tostring int doc
return description
@override
public int hashcode
return  int  constant    int   constant >>> 32
@override
public boolean equals object o
if  longconstvaluesource class    o getclass    return false
longconstvaluesource other    longconstvaluesource  o
return this constant    other constant
@override
public int getint
return  int  constant
@override
public long getlong
return constant
@override
public float getfloat
return fv
@override
public double getdouble
return dv
@override
public number getnumber
return constant
abstract class namedparser extends valuesourceparser
private final string name
public namedparser string name
this name   name
public string name
return name
abstract class doubleparser extends namedparser
public doubleparser string name
super name
public abstract double func int doc  docvalues vals
@override
public valuesource parse functionqparser fp  throws parseexception
return new function fp parsevaluesource
class function extends singlefunction
public function valuesource source
super source
@override
public string name
return doubleparser this name
@override
public docvalues getvalues map context  indexreader reader  throws ioexception
final docvalues vals   source getvalues context  reader
return new docvalues
@override
public float floatval int doc
return  float  doubleval doc
@override
public int intval int doc
return  int  doubleval doc
@override
public long longval int doc
return  long  doubleval doc
@override
public double doubleval int doc
return func doc  vals
@override
public string strval int doc
return double tostring doubleval doc
@override
public string tostring int doc
return name         vals tostring doc
abstract class double2parser extends namedparser
public double2parser string name
super name
public abstract double func int doc  docvalues a  docvalues b
@override
public valuesource parse functionqparser fp  throws parseexception
return new function fp parsevaluesource    fp parsevaluesource
class function extends valuesource
private final valuesource a
private final valuesource b
/**
* @param a the base.
* @param b the exponent.
*/
public function valuesource a  valuesource b
this a   a
this b   b
@override
public string description
return name         a description         b description
@override
public docvalues getvalues map context  indexreader reader  throws ioexception
final docvalues avals   a getvalues context  reader
final docvalues bvals   b getvalues context  reader
return new docvalues
@override
public float floatval int doc
return  float  doubleval doc
@override
public int intval int doc
return  int  doubleval doc
@override
public long longval int doc
return  long  doubleval doc
@override
public double doubleval int doc
return func doc  avals  bvals
@override
public string strval int doc
return double tostring doubleval doc
@override
public string tostring int doc
return name         avals tostring doc        bvals tostring doc
@override
public void createweight map context  searcher searcher  throws ioexception
a createweight context  searcher
b createweight context  searcher
@override
public int hashcode
int h   a hashcode
h ^   h << 13     h >>> 20
h    b hashcode
h ^   h << 23     h >>> 10
h    name   hashcode
return h
@override
public boolean equals object o
if  this getclass      o getclass    return false
function other    function  o
return this a equals other a
this b equals other b