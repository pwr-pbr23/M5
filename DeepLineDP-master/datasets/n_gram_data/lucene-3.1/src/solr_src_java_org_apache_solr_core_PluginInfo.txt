/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache solr core
import org apache solr common util namedlist
import org apache solr common util domutil
import org w3c dom node
import org w3c dom nodelist
import java util
import static java util collections unmodifiablelist
import static java util collections unmodifiablemap
/**
* an object which represents a plugin of any type
* @version $id$
*/
public class plugininfo
public final string name  classname  type
public final namedlist initargs
public final map<string  string> attributes
public final list<plugininfo> children
public plugininfo string type  map<string  string> attrs  namedlist initargs  list<plugininfo> children
this type   type
this name   attrs get
this classname   attrs get
this initargs   initargs
attributes   unmodifiablemap attrs
this children   children    null ? collections <plugininfo>emptylist    unmodifiablelist children
public plugininfo node node  string err  boolean requirename  boolean requireclass
type   node getnodename
name   domutil getattr node     requirename ? err   null
classname   domutil getattr node     requireclass ? err   null
initargs   domutil childnodestonamedlist node
attributes   unmodifiablemap domutil tomap node getattributes
children   loadsubplugins node
private list<plugininfo> loadsubplugins node node
list<plugininfo> children   new arraylist<plugininfo>
//if there is another sub tag with a non namedlist tag that has to be another plugin
nodelist nlst   node getchildnodes
for  int i   0  i < nlst getlength    i
node nd   nlst item i
if  nd getnodetype      node element_node  continue
if  nl_tags contains nd getnodename     continue
plugininfo plugininfo   new plugininfo nd  null  false  false
if  plugininfo isenabled    children add plugininfo
return children isempty   ? collections <plugininfo>emptylist     unmodifiablelist children
@override
public string tostring
stringbuilder sb   new stringbuilder
if  type    null  sb append     type
if  name    null  sb append     name
if  classname    null  sb append     classname
if  initargs size   > 0  sb append     initargs
sb append
return sb tostring
public boolean isenabled
string enable   attributes get
return enable    null    boolean parseboolean enable
public boolean isdefault
return boolean parseboolean attributes get
public plugininfo getchild string type
list<plugininfo> l   getchildren type
return  l isempty   ? null l get 0
/**filter children by type
* @param type the type name. must not be null
* @return the mathcing children
*/
public list<plugininfo> getchildren string type
if children isempty    return children
list<plugininfo> result   new arraylist<plugininfo>
for  plugininfo child   children  if type equals child type   result add child
return result
public static final plugininfo empty_info   new plugininfo   collections <string string>emptymap    new namedlist   collections <plugininfo>emptylist
private static final hashset<string> nl_tags   new hashset<string> arrays aslist