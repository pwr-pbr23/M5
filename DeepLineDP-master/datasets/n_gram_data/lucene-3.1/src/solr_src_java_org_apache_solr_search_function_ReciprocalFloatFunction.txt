/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache solr search function
import org apache lucene index indexreader
import org apache lucene search searcher
import java io ioexception
import java util map
/**
* <code>reciprocalfloatfunction</code> implements a reciprocal function f(x) = a/(mx+b), based on
* the float value of a field or function as exported by {@link org.apache.solr.search.function.valuesource}.
* <br>
*
* when a and b are equal, and x>=0, this function has a maximum value of 1 that drops as x increases.
* increasing the value of a and b together results in a movement of the entire function to a flatter part of the curve.
* <p>these properties make this an idea function for boosting more recent documents.
* <p>example:<code>  recip(ms(now,mydatefield),3.16e-11,1,1)</code>
* <p>a multiplier of 3.16e-11 changes the units from milliseconds to years (since there are about 3.16e10 milliseconds
* per year).  thus, a very recent date will yield a value close to 1/(0+1) or 1,
* a date a year in the past will get a multiplier of about 1/(1+1) or 1/2,
* and date two years old will yield 1/(2+1) or 1/3.
*
* @see functionquery
*
* @version $id$
*/
public class reciprocalfloatfunction extends valuesource
protected final valuesource source
protected final float m
protected final float a
protected final float b
/**
*  f(source) = a/(m*float(source)+b)
*/
public reciprocalfloatfunction valuesource source  float m  float a  float b
this source source
this m m
this a a
this b b
@override
public docvalues getvalues map context  indexreader reader  throws ioexception
final docvalues vals   source getvalues context  reader
return new docvalues
@override
public float floatval int doc
return a  m vals floatval doc    b
@override
public int intval int doc
return  int floatval doc
@override
public long longval int doc
return  long floatval doc
@override
public double doubleval int doc
return  double floatval doc
@override
public string strval int doc
return float tostring floatval doc
@override
public string tostring int doc
return float tostring a
m       vals tostring doc
b
@override
public void createweight map context  searcher searcher  throws ioexception
source createweight context  searcher
@override
public string description
return float tostring a
m       source description
b
@override
public int hashcode
int h   float floattointbits a    float floattointbits m
h ^   h << 13     h >>> 20
return h    float floattointbits b     source hashcode
@override
public boolean equals object o
if  reciprocalfloatfunction class    o getclass    return false
reciprocalfloatfunction other    reciprocalfloatfunction o
return this m    other m
this a    other a
this b    other b
this source equals other source