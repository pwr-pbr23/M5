/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache solr client solrj impl
import java io ioexception
import java io inputstream
import java io outputstream
import java net malformedurlexception
import java net url
import java util
import java util zip gzipinputstream
import java util zip inflaterinputstream
import org apache commons httpclient header
import org apache commons httpclient httpclient
import org apache commons httpclient httpconnectionmanager
import org apache commons httpclient httpexception
import org apache commons httpclient httpmethod
import org apache commons httpclient httpmethodbase
import org apache commons httpclient httpstatus
import org apache commons httpclient multithreadedhttpconnectionmanager
import org apache commons httpclient nohttpresponseexception
import org apache commons httpclient methods getmethod
import org apache commons httpclient methods inputstreamrequestentity
import org apache commons httpclient methods postmethod
import org apache commons httpclient methods requestentity
import org apache commons httpclient methods multipart multipartrequestentity
import org apache commons httpclient methods multipart part
import org apache commons httpclient methods multipart partbase
import org apache commons httpclient methods multipart stringpart
import org apache commons io ioutils
import org apache solr client solrj responseparser
import org apache solr client solrj solrrequest
import org apache solr client solrj solrserver
import org apache solr client solrj solrserverexception
import org apache solr client solrj response updateresponse
import org apache solr client solrj request requestwriter
import org apache solr client solrj request updaterequest
import org apache solr client solrj util clientutils
import org apache solr common solrexception
import org apache solr common solrinputdocument
import org apache solr common params
import org apache solr common util contentstream
import org apache solr common util namedlist
import org slf4j logger
import org slf4j loggerfactory
/**
* the {@link commonshttpsolrserver} uses the apache commons http client to connect to solr.
* <pre class="prettyprint" >solrserver server = new commonshttpsolrserver( url );</pre>
*
* @version $id$
* @since solr 1.3
*/
public class commonshttpsolrserver extends solrserver
/**
* user-agent string as identified by the http request by the {@link
* org.apache.commons.httpclient.httpclient httpclient} to the solr
* server from the client.
*/
public static final string agent     commonshttpsolrserver class getname
private static logger log   loggerfactory getlogger commonshttpsolrserver class
/**
* the url of the solr server.
*/
protected string _baseurl
/**
* default value: null / empty. <p/>
* parameters that are added to every request regardless.  this may be a place to add
* something like an authentication token.
*/
protected modifiablesolrparams _invariantparams
/**
* default response parser is binaryresponseparser <p/>
* this parser represents the default response parser chosen to
* parse the response if the parser were not specified as part of
* the request.
* @see org.apache.solr.client.solrj.impl.binaryresponseparser
*/
protected responseparser _parser
/**
* the requestwriter used to write all requests to solr
* @see org.apache.solr.client.solrj.request.requestwriter
*/
protected requestwriter requestwriter   new requestwriter
private final httpclient _httpclient
/**
* this defaults to false under the
* assumption that if you are following a redirect to get to a solr
* installation, something is misconfigured somewhere.
*/
private boolean _followredirects   false
/**
* if compression is enabled, both gzip and deflate compression will
* be accepted in the http response.
*/
private boolean _allowcompression   false
/**
* maximum number of retries to attempt in the event of transient
* errors.  default: 0 (no) retries. no more than 1 recommended.
*/
private int _maxretries   0
/**
* default value: <b> false </b>
* <p>
* if set to false, add the query parameters as url-encoded parameters to the
* post request in a single part. if set to true, create a new part of a
* multi-part request for each parameter.
*
* the reason for adding all parameters as parts of a multi-part request is
* that this allows us to specify the charset -- standards for single-part
* requests specify that non-ascii characters should be url-encoded, but don't
* specify the charset of the characters to be url-encoded (cf.
* http://www.w3.org/tr/html401/interact/forms.html#form-content-type).
* therefore you have to rely on your servlet container doing the right thing
* with single-part requests.
*/
private boolean usemultipartpost
/**
* @param solrserverurl the url of the solr server.  for
* example, "<code>http://localhost:8983/solr/</code>"
* if you are using the standard distribution solr webapp
* on your local machine.
*/
public commonshttpsolrserver string solrserverurl  throws malformedurlexception
this new url solrserverurl
/**
* talk to the solr server via the given httpclient.  the connection manager
* for the client should be a multithreadedhttpconnectionmanager if this
* client is being reused across solrserver instances, or of multiple threads
* will use this solrserver.
*/
public commonshttpsolrserver string solrserverurl  httpclient httpclient  throws malformedurlexception
this new url solrserverurl   httpclient  new binaryresponseparser    false
public commonshttpsolrserver string solrserverurl  httpclient httpclient  boolean usemultipartpost  throws malformedurlexception
this new url solrserverurl   httpclient  new binaryresponseparser    usemultipartpost
public commonshttpsolrserver string solrserverurl  httpclient httpclient  responseparser parser  throws malformedurlexception
this new url solrserverurl   httpclient  parser  false
/**
* @param baseurl the url of the solr server.  for example,
* "<code>http://localhost:8983/solr/</code>" if you are using the
* standard distribution solr webapp on your local machine.
*/
public commonshttpsolrserver url baseurl
this baseurl  null  new binaryresponseparser    false
public commonshttpsolrserver url baseurl  httpclient client
this baseurl  client  new binaryresponseparser    false
/**
*
* @see #usemultipartpost
*/
public commonshttpsolrserver url baseurl  httpclient client  boolean usemultipartpost
this baseurl  client  new binaryresponseparser    usemultipartpost
/**
* @see #usemultipartpost
* @see #_parser
*/
public commonshttpsolrserver url baseurl  httpclient client  responseparser parser  boolean usemultipartpost
_baseurl   baseurl toexternalform
if  _baseurl endswith
_baseurl   _baseurl substring  0  _baseurl length   1
if  _baseurl indexof      > 0
throw new runtimeexception    _baseurl
_httpclient    client    null  ? new httpclient new multithreadedhttpconnectionmanager      client
if  client    null
// set some better defaults if we created a new connection manager and client
// increase the default connections
this setdefaultmaxconnectionsperhost  32        2
this setmaxtotalconnections  128       20
_parser   parser
this usemultipartpost   usemultipartpost
//------------------------------------------------------------------------
//------------------------------------------------------------------------
/**
* process the request.  if {@link org.apache.solr.client.solrj.solrrequest#getresponseparser()} is null, then use
* {@link #getparser()}
* @param request the {@link org.apache.solr.client.solrj.solrrequest} to process
* @return the {@link org.apache.solr.common.util.namedlist} result
* @throws solrserverexception
* @throws ioexception
*
* @see #request(org.apache.solr.client.solrj.solrrequest, org.apache.solr.client.solrj.responseparser)
*/
@override
public namedlist<object> request  final solrrequest request   throws solrserverexception  ioexception
responseparser responseparser   request getresponseparser
if  responseparser    null
responseparser   _parser
return request request  responseparser
public namedlist<object> request final solrrequest request  responseparser processor  throws solrserverexception  ioexception
httpmethod method   null
inputstream is   null
solrparams params   request getparams
collection<contentstream> streams   requestwriter getcontentstreams request
string path   requestwriter getpath request
if  path    null     path startswith
path
responseparser parser   request getresponseparser
if  parser    null
parser   _parser
// the parser 'wt=' and 'version=' params are used instead of the original params
modifiablesolrparams wparams   new modifiablesolrparams
wparams set  commonparams wt  parser getwritertype
wparams set  commonparams version  parser getversion
if  params    null
params   wparams
else
params   new defaultsolrparams  wparams  params
if  _invariantparams    null
params   new defaultsolrparams  _invariantparams  params
int tries   _maxretries   1
try
while  tries   > 0
// note: since we aren't do intermittent time keeping
// ourselves, the potential non-timeout latency could be as
// much as tries-times (plus scheduling effects) the given
// timeallowed.
try
if  solrrequest method get    request getmethod
if  streams    null
throw new solrexception  solrexception errorcode bad_request
method   new getmethod  _baseurl   path   clientutils toquerystring  params  false
else if  solrrequest method post    request getmethod
string url   _baseurl   path
boolean ismultipart     streams    null    streams size   > 1
if  streams    null    ismultipart
postmethod post   new postmethod url
post getparams   setcontentcharset
if   this usemultipartpost     ismultipart
post addrequestheader
list<part> parts   new linkedlist<part>
iterator<string> iter   params getparameternamesiterator
while  iter hasnext
string p   iter next
string vals   params getparams p
if  vals    null
for  string v   vals
if  this usemultipartpost    ismultipart
parts add new stringpart p  v
else
post addparameter p  v
if  ismultipart
int i   0
for  contentstream content   streams
final contentstream c   content
string charset   null
string transferencoding   null
parts add new partbase c getname    c getcontenttype
charset  transferencoding
@override
protected long lengthofdata   throws ioexception
return c getsize
@override
protected void senddata outputstream out
throws ioexception
inputstream in   c getstream
try
ioutils copy in  out
finally
in close
if  parts size   > 0
post setrequestentity new multipartrequestentity parts
toarray new part   post getparams
method   post
// it is has one stream, it is the post body, put the params in the url
else
string pstr   clientutils toquerystring params  false
postmethod post   new postmethod url   pstr
// single stream as body
// using a loop just to get the first one
final contentstream contentstream   new contentstream
for  contentstream content   streams
contentstream   content
break
if  contentstream instanceof requestwriter lazycontentstream
post setrequestentity new requestentity
public long getcontentlength
return  1
public string getcontenttype
return contentstream getcontenttype
public boolean isrepeatable
return false
public void writerequest outputstream outputstream  throws ioexception
requestwriter lazycontentstream  contentstream  writeto outputstream
else
is   contentstream getstream
post setrequestentity new inputstreamrequestentity is  contentstream getcontenttype
method   post
else
throw new solrserverexception   request getmethod
catch  nohttpresponseexception r
// this is generally safe to retry on
method releaseconnection
method   null
if is    null
is close
// if out of tries then just rethrow (as normal error).
if    tries < 1
throw r
//log.warn( "caught: " + r + ". retrying..." );
catch  ioexception ex
throw new solrserverexception    ex
method setfollowredirects  _followredirects
method addrequestheader     agent
if  _allowcompression
method setrequestheader  new header
try
// execute the method.
//system.out.println( "execute:"+method.geturi() );
int statuscode   _httpclient executemethod method
if  statuscode    httpstatus sc_ok
stringbuilder msg   new stringbuilder
msg append  method getstatusline   getreasonphrase
msg append
msg append  method getstatustext
msg append
msg append    method geturi
throw new solrexception statuscode  java net urldecoder decode msg tostring
// read the contents
string charset
if  method instanceof httpmethodbase
charset     httpmethodbase method  getresponsecharset
inputstream respbody   method getresponsebodyasstream
// jakarta commons httpclient doesn't handle any
// compression natively.  handle gzip or deflate
// here if applicable.
if  _allowcompression
header contentencodingheader   method getresponseheader
if  contentencodingheader    null
string contentencoding   contentencodingheader getvalue
if  contentencoding contains
//log.debug( "wrapping response in gzipinputstream" );
respbody   new gzipinputstream  respbody
else if  contentencoding contains
//log.debug( "wrapping response in inflaterinputstream" );
respbody   new inflaterinputstream respbody
else
header contenttypeheader   method getresponseheader
if  contenttypeheader    null
string contenttype   contenttypeheader getvalue
if  contenttype    null
if  contenttype startswith
//log.debug( "wrapping response in gzipinputstream" );
respbody   new gzipinputstream  respbody
else if   contenttype startswith
//log.debug( "wrapping response in inflaterinputstream" );
respbody   new inflaterinputstream respbody
return processor processresponse respbody  charset
catch  httpexception e
throw new solrserverexception  e
catch  ioexception e
throw new solrserverexception  e
finally
method releaseconnection
if is    null
is close
//-------------------------------------------------------------------
//-------------------------------------------------------------------
/**
* retrieve the default list of parameters are added to every request regardless.
*
* @see #_invariantparams
*/
public modifiablesolrparams getinvariantparams
return _invariantparams
public string getbaseurl
return _baseurl
public void setbaseurl string baseurl
this _baseurl   baseurl
public responseparser getparser
return _parser
/**
* note: this setter method is <b>not thread-safe</b>.
* @param processor default response parser chosen to parse the response if the parser were not specified as part of the request.
* @see  org.apache.solr.client.solrj.solrrequest#getresponseparser()
*/
public void setparser responseparser processor
_parser   processor
public httpclient gethttpclient
return _httpclient
private httpconnectionmanager getconnectionmanager
return _httpclient gethttpconnectionmanager
/** set connectiontimeout on the underlying httpconnectionmanager
* @param timeout timeout in milliseconds
**/
public void setconnectiontimeout int timeout
getconnectionmanager   getparams   setconnectiontimeout timeout
/** set connectionmanagertimeout on the httpclient.
* @param timeout timeout in milliseconds
* @deprecated use {@link #setconnectionmanagertimeout(long)} **/
@deprecated
public void setconnectionmanagertimeout int timeout
_httpclient getparams   setconnectionmanagertimeout timeout
/**
* sets sotimeout (read timeout) on the underlying
* httpconnectionmanager.  this is desirable for queries, but
* probably not for indexing.
*
* @param timeout timeout in milliseconds
*/
public void setconnectionmanagertimeout long timeout
_httpclient getparams   setconnectionmanagertimeout timeout
/**
* sets sotimeout (read timeout) on the underlying
* httpconnectionmanager.  this is desirable for queries, but
* probably not for indexing.
* @param timeout timeout in milliseconds
**/
public void setsotimeout int timeout
getconnectionmanager   getparams   setsotimeout timeout
/** set maxconnectionsperhost on the underlying httpconnectionmanager */
public void setdefaultmaxconnectionsperhost int connections
getconnectionmanager   getparams   setdefaultmaxconnectionsperhost connections
/** set maxtotalconnection on the underlying httpconnectionmanager */
public void setmaxtotalconnections int connections
getconnectionmanager   getparams   setmaxtotalconnections connections
/**
* set followredirects.
* @see #_followredirects
*/
public void setfollowredirects  boolean followredirects
_followredirects   followredirects
/**
* set allowcompression.
* @see #_allowcompression
*/
public void setallowcompression  boolean allowcompression
_allowcompression   allowcompression
/**
* set maximum number of retries to attempt in the event of
* transient errors.
* @param maxretries no more than 1 recommended
* @see #_maxretries
*/
public void setmaxretries  int maxretries
if  maxretries > 1
log warn     maxretries
_maxretries   maxretries
public void setrequestwriter requestwriter requestwriter
this requestwriter   requestwriter
/**
* adds the documents supplied by the given iterator.
*
* @param dociterator  the iterator which returns solrinputdocument instances
*
* @return the response from the solrserver
*/
public updateresponse add iterator<solrinputdocument> dociterator
throws solrserverexception  ioexception
updaterequest req   new updaterequest
req setdociterator dociterator
return req process this
/**
* adds the beans supplied by the given iterator.
*
* @param beaniterator  the iterator which returns beans
*
* @return the response from the solrserver
*/
public updateresponse addbeans final iterator<?> beaniterator
throws solrserverexception  ioexception
updaterequest req   new updaterequest
req setdociterator new iterator<solrinputdocument>
public boolean hasnext
return beaniterator hasnext
public solrinputdocument next
object o   beaniterator next
if  o    null  return null
return getbinder   tosolrinputdocument o
public void remove
beaniterator remove
return req process this