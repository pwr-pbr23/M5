/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket request mapper
import java util list
import org apache wicket application
import org apache wicket request irequesthandler
import org apache wicket request irequestmapper
import org apache wicket request request
import org apache wicket request url
import org apache wicket util iprovider
import org apache wicket util crypt icrypt
import org apache wicket util string strings
import org slf4j logger
import org slf4j loggerfactory
/**
* request mapper that encrypts urls generated by another mapper. the original url (both segments
* and parameters) is encrypted and is represented as url segment. to be able to handle relative
* urls for images in .css file the same amount of url segments that the original url had are
* appended to the encrypted url. each segment has a precise 5 character value, calculated using a
* checksum. this helps in calculating the relative distance from the original url. when a url is
* returned by the browser, we iterate through these checksummed placeholder url segments. if the
* segment matches the expected checksum, then the segment it deemed to be the corresponding segment
* in the encrypted url. if the segment does not match the expected checksum, then the segment is
* deemed a plain text sibling of the corresponding segment in the encrypted url, and all subsequent
* segments are considered plain text children of the current segment.
*
*
* @author igor.vaynberg
* @author jesse long
* @author svenmeier
*/
public class cryptomapper implements irequestmapper
private static final logger log   loggerfactory getlogger cryptomapper class
private final irequestmapper wrappedmapper
private final iprovider<icrypt> cryptprovider
/**
* construct.
*
* @param wrappedmapper
*            the non-crypted request mapper
* @param application
*            the current application
*/
public cryptomapper final irequestmapper wrappedmapper  final application application
this wrappedmapper  new applicationcryptprovider application
/**
* construct.
*
* @param wrappedmapper
*            the non-crypted request mapper
* @param cryptprovider
*            the custom crypt provider
*/
public cryptomapper final irequestmapper wrappedmapper  final iprovider<icrypt> cryptprovider
this wrappedmapper   wrappedmapper
this cryptprovider   cryptprovider
public int getcompatibilityscore final request request
return 0
public url maphandler final irequesthandler requesthandler
final url url   wrappedmapper maphandler requesthandler
if  url    null
return null
return encrypturl url
public irequesthandler maprequest final request request
url url   decrypturl request  request geturl
if  url    null
return null
return wrappedmapper maprequest request clonewithurl url
private icrypt getcrypt
return cryptprovider get
private url encrypturl final url url
if  url getsegments   isempty      url getqueryparameters   isempty
return url
string encryptedurlstring   getcrypt   encrypturlsafe url tostring
url encryptedurl   new url url getcharset
encryptedurl getsegments   add encryptedurlstring
int numberofsegments   url getsegments   size
hashedsegmentgenerator generator   new hashedsegmentgenerator encryptedurlstring
for  int segno   0  segno < numberofsegments  segno
encryptedurl getsegments   add generator next
return encryptedurl
private url decrypturl final request request  final url encryptedurl
if  encryptedurl getsegments   isempty      encryptedurl getqueryparameters   isempty
return encryptedurl
list<string> encryptedsegments   encryptedurl getsegments
if  encryptedsegments size   < 1
return null
url url   new url request getcharset
try
string encryptedurlstring   encryptedsegments get 0
if  strings isempty encryptedurlstring
return null
string decryptedurl   getcrypt   decrypturlsafe encryptedurlstring
url originalurl   url parse decryptedurl  request getcharset
int originalnumberofsegments   originalurl getsegments   size
int encryptednumberofsegments   encryptedurl getsegments   size
hashedsegmentgenerator generator   new hashedsegmentgenerator encryptedurlstring
int segno   1
for    segno < encryptednumberofsegments  segno
if  segno > originalnumberofsegments
generator next   equals encryptedsegments get segno
break
// unmodified segment
url getsegments   add originalurl getsegments   get segno   1
for    segno < encryptednumberofsegments  segno
// modified or additional segment
url getsegments   add encryptedurl getsegments   get segno
url getqueryparameters   addall originalurl getqueryparameters
catch  exception e
log error    e
url   null
return url
private static class applicationcryptprovider implements iprovider<icrypt>
private final application application
public applicationcryptprovider final application application
this application   application
public icrypt get
return application getsecuritysettings   getcryptfactory   newcrypt
/**
* a generator of hashed segments.
*/
private static class hashedsegmentgenerator
private char characters
private int hash   0
public hashedsegmentgenerator string string
characters   string tochararray
/**
* generate the next segment
*
* @return segment
*/
public string next
char a   characters
hash
char b   characters
hash
char c   characters
string segment       a   b   c
hash   hashstring segment
segment    string format    math abs hash % 256
hash   hashstring segment
return segment
private int hashstring final string str
int hash   97
for  char c   str tochararray
int i   c
hash   47   hash   i
return hash