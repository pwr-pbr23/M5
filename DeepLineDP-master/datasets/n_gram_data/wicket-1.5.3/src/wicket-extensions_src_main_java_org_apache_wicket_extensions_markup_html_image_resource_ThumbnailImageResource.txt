/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket extensions markup html image resource
import java awt graphics2d
import java awt renderinghints
import java awt image bufferedimage
import java io bytearrayinputstream
import java io ioexception
import java io inputstream
import javax imageio imageio
import org apache wicket wicketruntimeexception
import org apache wicket request resource dynamicimageresource
import org apache wicket request resource iresource
import org apache wicket response bytearrayresponse
import org apache wicket util io ioutils
import org apache wicket util time time
import org slf4j logger
import org slf4j loggerfactory
/**
* image resource that dynamically scales the given original resource to a thumbnail. it is scaled
* either using the given maxsize as width or height, depending on its shape. if both the width and
* height are less than maxsize, no scaling is performed.
*
* @author eelco hillenius
* @author eugene kamenev
*/
public class thumbnailimageresource extends dynamicimageresource
private static final long serialversionuid   1l
/** log. */
private static final logger log   loggerfactory getlogger thumbnailimageresource class
/** the unscaled, original image resource. */
private final iresource unscaledimageresource
/** maximum size (width or height) for resize operation. */
private final int maxsize
/** the cached byte array of the thumbnail. */
private transient byte thumbnail
/**
* construct.
*
* @param unscaledimageresource
*            the unscaled, original image resource. must be not null
* @param maxsize
*            maximum size (width or height) for resize operation
*/
public thumbnailimageresource final iresource unscaledimageresource  final int maxsize
super
if  unscaledimageresource    null
throw new illegalargumentexception
this unscaledimageresource   unscaledimageresource
this maxsize   maxsize
/**
* @return the image data for this dynamic image
*/
@override
protected byte getimagedata final attributes attributes
if  thumbnail    null
final bufferedimage image   getscaledimageinstance attributes
thumbnail   toimagedata image
setlastmodifiedtime time now
return thumbnail
/**
* get resized image instance.
*
* @param attributes
*
* @return bufferedimage
*/
protected final bufferedimage getscaledimageinstance final attributes attributes
inputstream is   null
bufferedimage originalimage   null
try
// read original image
bytearrayresponse byteresponse   new bytearrayresponse
attributes dispatchattributes   new attributes attributes getrequest    byteresponse
unscaledimageresource respond dispatchattributes
is   new bytearrayinputstream byteresponse getbytes
originalimage   imageio read is
if  originalimage    null
throw new ioexception
catch  ioexception e
throw new wicketruntimeexception e
finally
try
ioutils close is
catch  ioexception e
log error e getmessage    e
int originalwidth   originalimage getwidth
int originalheight   originalimage getheight
if   originalwidth > maxsize      originalheight > maxsize
final int newwidth
final int newheight
if  originalwidth > originalheight
newwidth   maxsize
newheight    maxsize   originalheight    originalwidth
else
newwidth    maxsize   originalwidth    originalheight
newheight   maxsize
// http://today.java.net/pub/a/today/2007/04/03/perils-of-image-getscaledinstance.html
bufferedimage dimg   new bufferedimage newwidth  newheight  originalimage gettype
graphics2d g   dimg creategraphics
g setrenderinghint renderinghints key_interpolation
renderinghints value_interpolation_bilinear
g drawimage originalimage  0  0  newwidth  newheight  0  0  originalwidth
originalheight  null
g dispose
return dimg
// no need for resizing
return originalimage