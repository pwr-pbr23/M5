/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket extensions captcha kittens
import java awt dimension
import java awt graphics2d
import java awt point
import java awt image bufferedimage
import java awt image rescaleop
import java io ioexception
import java io serializable
import java lang ref softreference
import java util arraylist
import java util collections
import java util list
import java util random
import javax imageio imageio
import javax imageio stream memorycacheimageinputstream
import org apache wicket iresourcelistener
import org apache wicket ajax ajaxeventbehavior
import org apache wicket ajax ajaxrequesttarget
import org apache wicket markup html basic label
import org apache wicket markup html image image
import org apache wicket markup html image noncachingimage
import org apache wicket markup html panel panel
import org apache wicket model abstractreadonlymodel
import org apache wicket request request
import org apache wicket request cycle requestcycle
import org apache wicket request http webresponse
import org apache wicket request resource dynamicimageresource
import org apache wicket util time time
/**
* a unique and fun-to-use captcha technique i developed at thoof.
*
* @author jonathan locke
*/
public class kittencaptchapanel extends panel
private static final long serialversionuid   2711167040323855070l
// the background grass area
private static bufferedimage grass   load
// the kittens and other animals
private static final list<animal> kittens   new arraylist<animal>
private static final list<animal> nonkittens   new arraylist<animal>
// random number generator
private static random random   new random  1
// load animals
static
kittens add new animal    true
kittens add new animal    true
kittens add new animal    true
kittens add new animal    true
nonkittens add new animal    false
nonkittens add new animal    false
nonkittens add new animal    false
nonkittens add new animal    false
nonkittens add new animal    false
/**
* @param filename
*            the name of the file to load
* @return the image read form the file
*/
private static bufferedimage load final string filename
try
return imageio read new memorycacheimageinputstream
kittencaptchapanel class getresourceasstream filename
catch  ioexception e
e printstacktrace
return null
/**
* the various animals as placed animals
*/
private final placedanimallist animals
/**
* label that shows request status
*/
private final label animalselectionlabel
/**
* the image component
*/
private final image image
/**
* the image resource referenced by the image component
*/
private final captchaimageresource imageresource
/**
* size of this kitten panel's image
*/
private final dimension imagesize
/**
* @param id
*            component id
* @param imagesize
*            size of kitten captcha image
*/
public kittencaptchapanel final string id  final dimension imagesize
super id
// save image size
this imagesize   imagesize
// create animal list
animals   new placedanimallist
// need to ajax refresh
setoutputmarkupid true
// show how many animals have been selected
animalselectionlabel   new label
new abstractreadonlymodel<string>
private static final long serialversionuid   6792322972316712326l
@override
public string getobject
return imageresource selectstring
animalselectionlabel setoutputmarkupid true
add animalselectionlabel
// image referencing captcha image resource
image   new noncachingimage    imageresource   new captchaimageresource animals
image add new ajaxeventbehavior
private static final long serialversionuid   7480352029955897654l
@override
protected charsequence getcallbackscript
// call-back script shows loading indicator and makes wicket
// ajax request passing in mouse co-ordinates
return generatecallbackscript
getcallbackurl
@override
protected void onevent final ajaxrequesttarget target
// get clicked cursor position
final request request   requestcycle get   getrequest
final int x   request getrequestparameters   getparametervalue    toint 0
final int y   request getrequestparameters   getparametervalue    toint 0
// force refresh
imageresource cleardata
// find any animal at the clicked location
final placedanimal animal   animals atlocation new point x  y
// if the user clicked on an animal
if  animal    null
// toggle the animal's highlighting
animal ishighlighted    animal ishighlighted
// instead of reload entire image just change the src
// attribute, this reduces the flicker
final stringbuilder javascript   new stringbuilder
javascript append
append image getmarkupid
append
charsequence url   image urlfor iresourcelistener interface
javascript append url
javascript append url tostring   indexof    >  1 ?
append
append math random
javascript append
target appendjavascript javascript tostring
else
// the user didn't click on an animal, so hide the loading
// indicator
target appendjavascript
// update the selection label
target add animalselectionlabel
add image
/**
* @return true if all (three) kittens have been selected
*/
public boolean allkittensselected
return imageresource allkittensselected
/**
* resets for another go-around
*/
public void reset
imageresource reset
/**
* @param animals
*            list of animals
* @param newanimal
*            new animal to place
* @return the placed animal
*/
private placedanimal placeanimal final list<placedanimal> animals  final animal newanimal
// try 100 times
for  int iter   0  iter < 100  iter
// get the new animal's width and height
final int width   newanimal image getwidth
final int height   newanimal image getheight
// pick a random position
final int x   random imagesize width   width
final int y   random imagesize height   height
final point point   new point x  y
// determine if there is too much overlap with other animals
final double tooclose   new point width  height  distance new point 0  0     2 0
boolean toomuchoverlap   false
for  final placedanimal animal   animals
if  point distance animal location  < tooclose
toomuchoverlap   true
break
// if there was not too much overlap
if   toomuchoverlap
// the animal is now placed at x, y
return new placedanimal newanimal  new point x  y
// could not place animal
return null
/**
* @param max
*            maximum size of random value
* @return a random number between 0 and max - 1
*/
private int random final int max
return math abs random nextint max
/**
* @return a random kitten
*/
private animal randomkitten
return kittens get random kittens size
/**
* @return a random other animal
*/
private animal randomnonkitten
return nonkittens get random nonkittens size
/**
* animal, whether kitten or non-kitten
*/
private static class animal
/**
* the highlighted image
*/
private final bufferedimage highlightedimage
/**
* the normal image
*/
private final bufferedimage image
/**
* true if the animal is a kitten
*/
private final boolean iskitten
/**
* the visible region of the animal
*/
private final opaqueregion visibleregion
/**
* @param filename
*            the filename
* @param iskitten
*            true if the animal is a kitten
*/
private animal final string filename  final boolean iskitten
this iskitten   iskitten
image   load     filename
highlightedimage   load     filename
visibleregion   new opaqueregion image
/**
* @param filename
*            the file to load
* @return the image in the file
*/
private bufferedimage load final string filename
try
final bufferedimage loadedimage   imageio read new memorycacheimageinputstream
kittencaptchapanel class getresourceasstream filename
final bufferedimage image   new bufferedimage loadedimage getwidth
loadedimage getheight    bufferedimage type_int_argb
final graphics2d graphics   image creategraphics
graphics drawimage loadedimage  0  0  null
graphics dispose
return image
catch  ioexception e
e printstacktrace
return null
/**
* resource which renders the actual captcha image
*/
private static class captchaimageresource extends dynamicimageresource
private static final long serialversionuid    1560784998742404278l
/**
* the placed animals
*/
private final placedanimallist animals
/**
* image data array
*/
private transient softreference<byte> data   null
@override
protected void configureresponse final resourceresponse response
final attributes attributes
super configureresponse response  attributes
response disablecaching
/**
* @param animals
*            the positioned animals
*/
private captchaimageresource final placedanimallist animals
this animals   animals
setformat
/**
* @return rendered image data
*/
@override
protected byte getimagedata final attributes attributes
// handle caching
setlastmodifiedtime time now
final webresponse response    webresponse requestcycle get   getresponse
response setheader
// if we don't have data
if   data    null      data get      null
// create the image and turn it into data
final bufferedimage composedimage   animals createimage
data   new softreference<byte> toimagedata composedimage
// return image data
return data get
/**
* invalidates the image data
*/
protected void invalidate
data   null
/**
* @return true if all kittens have been selected
*/
private boolean allkittensselected
return animals allkittensselected
/**
* clears out image data
*/
private void cleardata
invalidate
setlastmodifiedtime time now
/**
* resets animals to default states
*/
private void reset
animals reset
/**
* @return selection state string for animals
*/
private string selectstring
return animals selectstring
/**
* an animal that has a location
*/
private static class placedanimal implements serializable
private static final long serialversionuid    6703909440564862486l
/**
* the animal
*/
private transient animal animal
/**
* index in kitten or nonkitten list
*/
private final int index
/**
* true if the animal is highlighted
*/
private boolean ishighlighted
/**
* true if this animal is a kitten
*/
private final boolean iskitten
/**
* the location of the animal
*/
private final point location
/**
* scaling values
*/
private final float scales     1f  1f  1f  1f
/**
* @param animal
*            the animal
* @param location
*            where to put it
*/
public placedanimal final animal animal  final point location
this animal   animal
this location   location
iskitten   animal iskitten
if  iskitten
index   kittens indexof animal
else
index   nonkittens indexof animal
for  int i   0  i < 3  i
scales   random 0 9f  1 0f
scales   random 0 7f  1 0f
/**
* {@inheritdoc}
*/
@override
public string tostring
return  iskitten ?          location x       location y
/**
* @param point
*            the point
* @return true if this placed animal contains the given point
*/
private boolean contains final point point
final point relativepoint   new point point x   location x  point y   location y
return getanimal   visibleregion contains relativepoint
/**
* @param graphics
*            the graphics to draw on
*/
private void draw final graphics2d graphics
final float offsets   new float
final rescaleop rop   new rescaleop scales  offsets  null
if  ishighlighted
graphics drawimage getanimal   highlightedimage  rop  location x  location y
else
graphics drawimage getanimal   image  rop  location x  location y
/**
* @return the animal that is placed
*/
private animal getanimal
if  animal    null
if  iskitten
animal   kittens get index
else
animal   nonkittens get index
return animal
/**
* @param min
*            minimum random value
* @param max
*            maximum random value
* @return a random value in the given range
*/
private float random final float min  final float max
return min   math abs random nextfloat      max   min
/**
* holds a list of placed animals
*/
private class placedanimallist implements serializable
private static final long serialversionuid   6335852594326213439l
/**
* list of placed animals
*/
private final list<placedanimal> animals   new arraylist<placedanimal>
/**
* arrange random animals and kittens
*/
private placedanimallist
// place the three kittens
animals add placeanimal animals  randomkitten
animals add placeanimal animals  randomkitten
animals add placeanimal animals  randomkitten
// try a few times
for  int iter   0  iter < 500  iter
// place a non kitten
final placedanimal animal   placeanimal animals  randomnonkitten
// if we were able to place the animal
if  animal    null
// add it to the list
animals add animal
// 15 non-kittens is enough
if  animals size   > 15
break
// shuffle the animal order
collections shuffle animals
// ensure kittens are visible enough
list<placedanimal> straykittens   new arraylist<placedanimal>
for  final placedanimal animal   animals
// if it's a kitten
if  animal iskitten
// compute the area of the visible region in pixels
final int kittenarea   animal getanimal   visibleregion areainpixels
// if at least 4/5ths of the given kitten is not visible
// (because it is obscured by other animal(s))
if  visibleregion animal  areainpixels   < kittenarea   4   5
// the user probably can't identify it, so add to the
// stray kittens list
straykittens add animal
// remove any the stray kittens and then re-add them so they move to
// the top of the z-order
animals removeall straykittens
animals addall straykittens
/**
* @return true if all kittens are selected
*/
private boolean allkittensselected
for  final placedanimal animal   animals
if  animal iskitten    animal ishighlighted
return false
return true
/**
* @param location
*            the cursor location that was clicked
* @return any animal that might be at the given location or null if none found (the user
*         clicked on grass)
*/
private placedanimal atlocation final point location
// reverse list for z-ordered hit-testing
final list<placedanimal> reversedanimals   new arraylist<placedanimal> animals
collections reverse reversedanimals
// return any animal at the given location
for  final placedanimal animal   reversedanimals
if  animal contains location
return animal
// no animal found
return null
/**
* @return the kitten captcha image
*/
private bufferedimage createimage
// create image of the right size
final bufferedimage newimage   new bufferedimage imagesize width  imagesize height
bufferedimage type_int_rgb
// draw the grass
final graphics2d graphics   newimage creategraphics
graphics drawimage grass  0  0  null
// draw each animal in order
for  final placedanimal animal   animals
animal draw graphics
// clean up graphics resource
graphics dispose
// return the rendered animals
return newimage
/**
* undo highlight states of animals
*/
private void reset
for  final placedanimal animal   animals
animal ishighlighted   false
/**
* @return selection string to show
*/
private string selectstring
int selected   0
for  final placedanimal animal   animals
if  animal ishighlighted
selected
if  selected    0
return getstring
else
return selected       getstring
/**
* @param animal
*            the animal
* @return the visible region of the animal
*/
private opaqueregion visibleregion final placedanimal animal
// the index of the animal in the animal list
int index   animals indexof animal
// check sanity
if  index     1
// invalid animal somehow
throw new illegalargumentexception
else
// get the animal's visible region
opaqueregion visible   animal getanimal   visibleregion
// go through the animals above the given animal
for  index    index < animals size    index
// remove the higher animal's visible region
final placedanimal remove   animals get index
visible   visible subtract remove getanimal   visibleregion  new point
remove location x   animal location x  remove location y
animal location y
return visible