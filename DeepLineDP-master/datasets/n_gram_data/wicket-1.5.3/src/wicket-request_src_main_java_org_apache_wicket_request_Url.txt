/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket request
import java io serializable
import java nio charset charset
import java util arraylist
import java util collections
import java util iterator
import java util list
import java util locale
import org apache wicket util lang args
import org apache wicket util lang generics
import org apache wicket util lang objects
import org apache wicket util string stringvalue
import org apache wicket util string strings
/**
* represents the url part <b>after wicket filter</b>. for example if wicket filter is mapped to
* <code>/app/*</code> then with url <code>/app/my/url</code> the {@link url} object would represent
* part <code>my/url</code>. if wicket filter is mapped to <code>/*</code> then with url
* <code>/my/url</code> the {@link url} object would represent <code>my/url</code> (without leading
* the slash).
* <p>
* url consists of segments and query parameters.
* <p>
* example urls:
*
* <pre>
* foo/bar/baz?a=1&amp;b=5    - segments: [&quot;foo&quot;,&quot;bar,&quot;baz], query parameters: [&quot;a&quot;=&quot;1&quot;, &quot;b&quot;=&quot;5&quot;]
* foo/bar//baz?=4&amp;6      - segments: [&quot;foo&quot;, &quot;bar&quot;, &quot;&quot;, &quot;baz&quot;], query parameters: [&quot;&quot;=&quot;4&quot;, &quot;6&quot;=&quot;&quot;]
* /foo/bar/              - segments: [&quot;&quot;, &quot;foo&quot;, &quot;bar&quot;, &quot;&quot;]
* foo/bar//              - segments: [&quot;foo&quot;, &quot;bar&quot;, &quot;&quot;, &quot;&quot;]
* ?a=b                   - segments: [ ], query parameters: [&quot;a&quot;=&quot;b&quot;]
* /                      - segments: [&quot;&quot;, &quot;&quot;]   (note that url represents part after wicket filter
*                                                - so if wicket filter is mapped to /* this would be
*                                                an additional slash, i.e. //
* </pre>
*
* the url class takes care of encoding and decoding of the segments and parameters.
*
* @author matej knopp
* @author igor vaynberg
*/
public final class url implements serializable
private static final long serialversionuid   1l
private static final string default_charset_name
private final list<string> segments   generics newarraylist
private final list<queryparameter> parameters   generics newarraylist
private string charsetname
private transient charset _charset
private string protocol
private integer port
private string host
/**
*
* @param qp
* @param charset
* @return query parameters
*/
private static queryparameter parsequeryparameter final string qp  final charset charset
if  qp indexof        1
return new queryparameter decodeparameter qp  charset
string parts   strings split qp
if  parts length    0
return new queryparameter
else if  parts length    1
return new queryparameter    decodeparameter parts  charset
else
return new queryparameter decodeparameter parts  charset   decodeparameter parts
charset
/**
* parses the given url string.
*
* @param url
*            absolute or relative url with query string
* @return url object
*/
public static url parse final string url
return parse url  null
/**
* parses the given url string.
*
* @param url
*            absolute or relative url with query string
* @param charset
* @return url object
*/
public static url parse string url  charset charset
args notnull url
final url result   new url charset
// the url object resolved the charset, use that
charset   result getcharset
// extract query string part
final string querystring
final string absoluteurl
final int queryat   url indexof
if  queryat     1
querystring
absoluteurl   url
else
absoluteurl   url substring 0  queryat
querystring   url substring queryat   1
// get absolute / relative part of url
string relativeurl
// absolute urls contain a scheme://
final int protocolat   absoluteurl indexof
if  protocolat     1
result protocol   absoluteurl substring 0  protocolat  tolowercase locale us
final string afterproto   absoluteurl substring protocolat   3
final string hostandport
final int relativeat   afterproto indexof
if  relativeat     1
relativeurl
hostandport   afterproto
else
relativeurl   afterproto substring relativeat
hostandport   afterproto substring 0  relativeat
final int portat   hostandport lastindexof
if  portat     1
result host   hostandport
result port   getdefaultportforprotocol result protocol
else
result host   hostandport substring 0  portat
result port   integer parseint hostandport substring portat   1
else
relativeurl   absoluteurl
if  relativeurl length   > 0
boolean removelast   false
if  relativeurl endswith
// we need to append something and remove it after splitting
// because otherwise the
// trailing slashes will be lost
relativeurl
removelast   true
string segmentarray   strings split relativeurl
if  removelast
segmentarray   null
for  string s   segmentarray
if  s    null
result segments add decodesegment s  charset
if  querystring length   > 0
string queryarray   strings split querystring
for  string s   queryarray
result parameters add parsequeryparameter s  charset
return result
/**
* get default port number for protocol
*
* @param protocol
*            name of protocol
* @return default port for protocol or <code>null</code> if unknown
*/
private static integer getdefaultportforprotocol string protocol
if    equals protocol
return 80
else if    equals protocol
return 443
else if    equals protocol
return 21
else
return null
/**
* construct.
*/
public url
/**
* construct.
*
* @param charset
*/
public url final charset charset
setcharset charset
/**
* construct.
*
* @param url
*            url being copied
*/
public url final url url
args notnull url
segments addall url getsegments
parameters addall url getqueryparameters
setcharset url getcharset
/**
* construct.
*
* @param segments
* @param parameters
*/
public url final list<string> segments  final list<queryparameter> parameters
this segments  parameters  null
/**
* construct.
*
* @param segments
* @param charset
*/
public url final list<string> segments  final charset charset
this segments  collections <queryparameter> emptylist    charset
/**
* construct.
*
* @param segments
* @param parameters
* @param charset
*/
public url final list<string> segments  final list<queryparameter> parameters
final charset charset
args notnull segments
args notnull parameters
this segments addall segments
this parameters addall parameters
setcharset charset
/**
*
* @return charset
*/
public charset getcharset
if  strings isempty charsetname
charsetname   default_charset_name
if  _charset    null
_charset   charset forname charsetname
return _charset
/**
*
* @param charset
*/
private void setcharset final charset charset
if  charset    null
charsetname
_charset   null
else
charsetname   charset name
_charset   charset
/**
* returns segments of the url. segments form the part before query string.
*
* @return mutable list of segments
*/
public list<string> getsegments
return segments
/**
* returns query parameters of the url.
*
* @return mutable list of query parameters
*/
public list<queryparameter> getqueryparameters
return parameters
/**
* returns whether the url is absolute.
*
* @return <code>true</code> if url is absolute, <code>false</code> otherwise.
*/
public boolean isabsolute
return  getsegments   isempty      strings isempty getsegments   get 0
/**
* convenience method that removes all query parameters with given name.
*
* @param name
*            query parameter name
*/
public void removequeryparameters final string name
for  iterator<queryparameter> i   getqueryparameters   iterator    i hasnext
queryparameter param   i next
if  objects equal name  param getname
i remove
/**
* convenience method that removes <code>count</code> leading segments
*
* @param count
*/
public void removeleadingsegments final int count
args withinrange 0  segments size    count
for  int i   0  i < count  i
segments remove 0
/**
* convenience method that prepends <code>segments</code> to the segments collection
*
* @param newsegments
*/
public void prependleadingsegments final list<string> newsegments
args notnull newsegments
segments addall 0  newsegments
/**
* convenience method that removes all query parameters with given name and adds new query
* parameter with specified name and value
*
* @param name
* @param value
*/
public void setqueryparameter final string name  final object value
removequeryparameters name
addqueryparameter name  value
/**
* convenience method that removes adds a query parameter with given name
*
* @param name
* @param value
*/
public void addqueryparameter final string name  final object value
if  value    null
queryparameter parameter   new queryparameter name  value tostring
getqueryparameters   add parameter
/**
* returns first query parameter with specified name or null if such query parameter doesn't
* exist.
*
* @param name
* @return query parameter or <code>null</code>
*/
public queryparameter getqueryparameter final string name
for  queryparameter parameter   parameters
if  objects equal name  parameter getname
return parameter
return null
/**
* returns the value of first query parameter with specified name. note that this method never
* returns <code>null</code>. not even if the parameter does not exist.
*
* @see stringvalue#isnull()
*
* @param name
* @return {@link stringvalue} instance wrapping the parameter value
*/
public stringvalue getqueryparametervalue final string name
queryparameter parameter   getqueryparameter name
if  parameter    null
return stringvalue valueof  string null
else
return stringvalue valueof parameter getvalue
/**
* {@inheritdoc}
*/
@override
public boolean equals final object obj
if  this    obj
return true
if   obj instanceof url     false
return false
url rhs    url obj
return getsegments   equals rhs getsegments
getqueryparameters   equals rhs getqueryparameters
/**
* {@inheritdoc}
*/
@override
public int hashcode
return objects hashcode getsegments    getqueryparameters
/**
*
* @param string
* @param charset
* @return encoded segment
*/
private static string encodesegment final string string  final charset charset
return urlencoder path_instance encode string  charset
/**
*
* @param string
* @param charset
* @return decoded segment
*/
private static string decodesegment final string string  final charset charset
return urldecoder path_instance decode string  charset
/**
*
* @param string
* @param charset
* @return encoded parameter
*/
private static string encodeparameter final string string  final charset charset
return urlencoder query_instance encode string  charset
/**
*
* @param string
* @param charset
* @return decoded parameter
*/
private static string decodeparameter final string string  final charset charset
return urldecoder query_instance decode string  charset
/**
* {@inheritdoc}
*/
@override
public string tostring
return tostring getcharset
/**
* render full representation of url (including protocol, host and port) into string
* representation
*
* @return absolute representation of the url
*/
public string toabsolutestring
return toabsolutestring getcharset
/**
* render full representation of url (including protocol, host and port) into string
* representation
*
* @param charset
*
* @return see tostringrepresentation
*/
public string toabsolutestring final charset charset
stringbuilder result   new stringbuilder
// output scheme://host:port if specified
if  protocol    null    strings isempty host     false
result append protocol
result append
result append host
if  port    null    port equals getdefaultportforprotocol protocol      false
result append
result append port
// append relative part
return strings join    result tostring    this tostring
/**
* @param charset
* @return see tostring()
*/
public string tostring final charset charset
stringbuilder result   new stringbuilder
result append getpath charset
result append getquerystring charset
return result tostring
/**
*
* @return true if last segment contains a name and not something like "." or "..".
*/
private boolean islastsegmentreal
if  segments isempty
return false
string last   segments get segments size     1
return  last length   > 0        equals last        equals last
/**
* @param segments
* @return true if last segment is empty
*/
private boolean islastsegmentempty final list<string> segments
if  segments isempty
return false
string last   segments get segments size     1
return last length      0
/**
*
* @return true, if last segement is empty
*/
private boolean islastsegmentempty
return islastsegmentempty segments
/**
*
* @param segments
* @return true if at least one segement is real
*/
private boolean isatleastonsegmentreal final list<string> segments
for  string s   segments
if   s length   > 0        equals s        equals s
return true
return false
/**
* concatenate the specified segments; the segments can be relative - begin with "." or "..".
*
* @param segments
*/
public void concatsegments list<string> segments
boolean checkedlastsegment   false
if   isatleastonsegmentreal segments      islastsegmentempty segments
segments   new arraylist<string> segments
segments add
for  string s   segments
if    equals s
continue
else if    equals s      this segments isempty
this segments remove this segments size     1
else
if   checkedlastsegment
if  islastsegmentreal      islastsegmentempty
this segments remove this segments size     1
checkedlastsegment   true
this segments add s
if   this segments size      1      this segments get 0  length      0
this segments clear
/**
* represents a single query parameter
*
* @author matej knopp
*/
public final static class queryparameter implements serializable
private static final long serialversionuid   1l
private final string name
private final string value
/**
* creates new {@link queryparameter} instance. the <code>name</code> and <code>value</code>
* parameters must not be <code>null</code>, though they can be empty strings.
*
* @param name
*            parameter name
* @param value
*            parameter value
*/
public queryparameter final string name  final string value
args notnull name
args notnull value
this name   name
this value   value
/**
* returns query parameter name.
*
* @return query parameter name
*/
public string getname
return name
/**
* returns query parameter value.
*
* @return query parameter value
*/
public string getvalue
return value
/**
* {@inheritdoc}
*/
@override
public boolean equals final object obj
if  this    obj
return true
if   obj instanceof queryparameter     false
return false
queryparameter rhs    queryparameter obj
return objects equal getname    rhs getname
objects equal getvalue    rhs getvalue
/**
* {@inheritdoc}
*/
@override
public int hashcode
return objects hashcode getname    getvalue
/**
* {@inheritdoc}
*/
@override
public string tostring
return tostring charset forname default_charset_name
/**
*
* @param charset
* @return see tostring()
*/
public string tostring final charset charset
stringbuilder result   new stringbuilder
result append encodeparameter getname    charset
if   strings isempty getvalue
result append
result append encodeparameter getvalue    charset
return result tostring
/**
* makes this url the result of resolving the {@code relative} url against this url.
* <p>
* segments will be properly resolved, handling any {@code ..} references, while the query
* parameters will be completely replaced with {@code relative}'s query parameters.
* </p>
* <p>
* for example:
*
* <pre>
* wicket/page/render?foo=bar
* </pre>
*
* resolved with
*
* <pre>
* ../component/render?a=b
* </pre>
*
* will become
*
* <pre>
* wicket/component/render?a=b
* </pre>
*
* </p>
*
* @param relative
*            relative url
*/
public void resolverelative final url relative
if  getsegments   size   > 0
// strip the first non-folder segment
getsegments   remove getsegments   size     1
// remove all './' (current folder) from the relative url
if   relative getsegments   isempty        equals relative getsegments   get 0
relative getsegments   remove 0
// process any ../ segments in the relative url
while   relative getsegments   isempty        equals relative getsegments   get 0
relative getsegments   remove 0
getsegments   remove getsegments   size     1
// append the remaining relative segments
getsegments   addall relative getsegments
// replace query params with the ones from relative
parameters clear
parameters addall relative getqueryparameters
/**
* gets the protocol of this url (http/https/etc)
*
* @return protocol or {@code null} if none has been set
*/
public string getprotocol
return protocol
/**
* sets the protocol of this url (http/https/etc)
*
* @param protocol
*/
public void setprotocol final string protocol
this protocol   protocol
/**
* gets the port of this url
*
* @return port or {@code null} if none has been set
*/
public integer getport
return port
/**
* sets the port of this url
*
* @param port
*/
public void setport final integer port
this port   port
/**
* gets the host name of this url
*
* @return host name or {@code null} if none is seto
*/
public string gethost
return host
/**
* sets the host name of this url
*
* @param host
*/
public void sethost final string host
this host   host
/**
* return path for current url in given encoding
*
* @param charset
*            character set for encoding
*
* @return path string
*/
public string getpath charset charset
args notnull charset
stringbuilder path   new stringbuilder
boolean slash   false
for  string segment   getsegments
if  slash
path append
path append encodesegment segment  charset
slash   true
return path tostring
/**
* return path for current url in original encoding
*
* @return path string
*/
public string getpath
return getpath getcharset
/**
* return query string part of url in given encoding
*
* @param charset
*            character set for encoding
*
* @return query string
*/
public string getquerystring charset charset
args notnull charset
stringbuilder query   new stringbuilder
for  queryparameter parameter   getqueryparameters
query append query length      0 ?
query append parameter tostring charset
return query tostring
/**
* return query string part of url in original encoding
*
* @return query string
*/
public string getquerystring
return getquerystring getcharset