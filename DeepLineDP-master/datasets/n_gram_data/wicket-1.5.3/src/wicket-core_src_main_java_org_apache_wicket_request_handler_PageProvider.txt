/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket request handler
import org apache wicket application
import org apache wicket page ipagemanager
import org apache wicket pagestore ipagestore
import org apache wicket protocol http pageexpiredexception
import org apache wicket request irequesthandler
import org apache wicket request irequestmapper
import org apache wicket request component irequestablepage
import org apache wicket request mapper ipagesource
import org apache wicket request mapper stalepageexception
import org apache wicket request mapper parameter pageparameters
import org apache wicket util lang args
/**
* provides page instance for request handlers. each of the constructors has just enough information
* to get existing or create new page instance. requesting or creating page instance is deferred
* until {@link #getpageinstance()} is called.
* <p>
* purpose of this class is to reduce complexity of both {@link irequestmapper}s and
* {@link irequesthandler}s. {@link irequestmapper} examines the url, gathers all relevant
* information about the page in the url (combination of page id, page class, page parameters and
* render count), creates {@link pageprovider} object and creates a {@link irequesthandler} instance
* that can use the {@link pageprovider} to access the page.
* <p>
* apart from simplifying {@link irequestmapper}s and {@link irequesthandler}s {@link pageprovider}
* also helps performance because creating or obtaining page from {@link ipagemanager} is delayed
* until the {@link irequesthandler} actually requires the page.
*
* @author matej knopp
*/
public class pageprovider implements ipageprovider  iintrospectablepageprovider
private final integer rendercount
private final integer pageid
private ipagesource pagesource
private irequestablepage pageinstance
private boolean pageinstanceisfresh
private class<? extends irequestablepage> pageclass
private pageparameters pageparameters
/**
* creates a new page provider object. upon calling of {@link #getpageinstance()} this provider
* will return page instance with specified id.
*
* @param pageid
* @param rendercount
*            optional argument
*/
public pageprovider final int pageid  final integer rendercount
this pageid   pageid
this rendercount   rendercount
/**
* creates a new page provider object. upon calling of {@link #getpageinstance()} this provider
* will return page instance with specified id if it exists and it's class matches pageclass. if
* none of these is true new page instance will be created.
*
* @param pageid
* @param pageclass
* @param rendercount
*            optional argument
*/
public pageprovider final int pageid  final class<? extends irequestablepage> pageclass
integer rendercount
this pageid  pageclass  new pageparameters    rendercount
/**
* creates a new page provider object. upon calling of {@link #getpageinstance()} this provider
* will return page instance with specified id if it exists and it's class matches pageclass. if
* none of these is true new page instance will be created.
*
* @param pageid
* @param pageclass
* @param pageparameters
* @param rendercount
*            optional argument
*/
public pageprovider final int pageid  final class<? extends irequestablepage> pageclass
final pageparameters pageparameters  final integer rendercount
this pageid   pageid
setpageclass pageclass
setpageparameters pageparameters
this rendercount   rendercount
/**
* creates a new page provider object. upon calling of {@link #getpageinstance()} this provider
* will return new instance of page with specified class.
*
* @param pageclass
* @param pageparameters
*/
public pageprovider final class<? extends irequestablepage> pageclass
final pageparameters pageparameters
setpageclass pageclass
if  pageparameters    null
setpageparameters pageparameters
pageid   null
rendercount   null
/**
* creates a new page provider object. upon calling of {@link #getpageinstance()} this provider
* will return new instance of page with specified class.
*
* @param pageclass
*/
public pageprovider class<? extends irequestablepage> pageclass
this pageclass  null
/**
* creates a new page provider object. upon calling of {@link #getpageinstance()} this provider
* will return the given page instance.
*
* @param page
*/
public pageprovider irequestablepage page
args notnull page
pageinstance   page
pageid   page getpageid
rendercount   page getrendercount
/**
* @see org.apache.wicket.request.handler.ipageprovider#getpageinstance()
*/
public irequestablepage getpageinstance
if  pageinstance    null
resolvepageinstance pageid  pageclass  pageparameters  rendercount
if  pageinstance    null
throw new pageexpiredexception     pageid
return pageinstance
/**
* @see org.apache.wicket.request.handler.ipageprovider#getpageparameters()
*/
public pageparameters getpageparameters
if  pageparameters    null
return pageparameters
else if  isnewpageinstance      false
return pageinstance getpageparameters
else
return null
/**
* the page instance is new only if there is no cached instance or the data stores doesn't have
* a page with that id with the same {@linkplain #pageclass}.
*
* @see org.apache.wicket.request.handler.ipageprovider#isnewpageinstance()
*/
public boolean isnewpageinstance
boolean isnew   pageinstance    null
if  isnew    pageid    null
irequestablepage storedpageinstance   getstoredpage pageid
if  storedpageinstance    null
pageinstance   storedpageinstance
isnew   false
return isnew
/**
* @see org.apache.wicket.request.handler.ipageprovider#getpageclass()
*/
public class<? extends irequestablepage> getpageclass
if  pageclass    null
return pageclass
else
return getpageinstance   getclass
protected ipagesource getpagesource
if  pagesource    null
return pagesource
if  application exists
return application get   getmappercontext
else
throw new illegalstateexception
private void resolvepageinstance integer pageid  class<? extends irequestablepage> pageclass
pageparameters pageparameters  integer rendercount
irequestablepage page   null
boolean freshcreated   false
if  pageid    null
page   getstoredpage pageid
if  page    null
if  pageclass    null
page   getpagesource   newpageinstance pageclass  pageparameters
freshcreated   true
if  page    null     freshcreated
if  rendercount    null    page getrendercount      rendercount
throw new stalepageexception page
pageinstanceisfresh   freshcreated
pageinstance   page
/**
* looks up a page by id from the {@link ipagestore}. <br/>
* if {@linkplain #pageclass} is specified then compares it against the stored instance class
* and returns the found instance only if they match.
*
* @param pageid
*            the id of the page to look for.
* @return the found page instance by id.
*/
private irequestablepage getstoredpage final int pageid
irequestablepage storedpageinstance   getpagesource   getpageinstance pageid
if  storedpageinstance    null
pageclass    null    pageclass equals storedpageinstance getclass
pageinstance   storedpageinstance
pageinstanceisfresh   false
if  pageinstance    null
if  rendercount    null    pageinstance getrendercount      rendercount
throw new stalepageexception pageinstance
return storedpageinstance
/**
* detaches the page if it has been loaded (that means either
* {@link #pageprovider(irequestablepage)} constructor has been used or
* {@link #getpageinstance()} has been called).
*/
public void detach
if  pageinstance    null
pageinstance detach
/**
* if the {@link pageprovider} is used outside request thread (thread that does not have
* application instance assigned) it is necessary to specify a {@link ipagesource} instance so
* that {@link pageprovider} knows how to get a page instance.
*
* @param pagesource
*/
public void setpagesource ipagesource pagesource
this pagesource   pagesource
/**
*
* @param pageclass
*/
private void setpageclass class<? extends irequestablepage> pageclass
args notnull pageclass
this pageclass   pageclass
/**
*
* @param pageparameters
*/
private void setpageparameters pageparameters pageparameters
this pageparameters   pageparameters
/**
*
* @return page id
*/
public integer getpageid
return pageid
public integer getrendercount
return rendercount
/**
* checks whether or not the provider has a page instance. this page instance might have been
* passed to this page provider directly or it may have been instantiated or retrieved from the
* page store.
*
* @return {@code true} iff page instance has been created or retrieved
*/
public final boolean haspageinstance
if  pageinstance    null    pageid    null
// attempt to load a stored page instance from the page store
getstoredpage pageid
return pageinstance    null
/**
* returns whether or not the page instance held by this provider has been instantiated by the
* provider.
*
* @throws illegalstateexception
*             if this method is called and the provider does not yet have a page instance, ie
*             if {@link #getpageinstance()} has never been called on this provider
* @return {@code true} iff the page instance held by this provider was instantiated by the
*         provider
*/
public final boolean ispageinstancefresh
if   haspageinstance
throw new illegalstateexception
return pageinstanceisfresh