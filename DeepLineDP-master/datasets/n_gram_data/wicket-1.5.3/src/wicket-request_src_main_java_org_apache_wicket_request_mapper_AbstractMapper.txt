/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket request mapper
import org apache wicket request irequestmapper
import org apache wicket request request
import org apache wicket request url
import org apache wicket request url queryparameter
import org apache wicket request mapper parameter ipageparametersencoder
import org apache wicket request mapper parameter pageparameters
import org apache wicket util lang args
import org apache wicket util string strings
/**
*
*/
public abstract class abstractmapper implements irequestmapper
/**
* if the string is in a placeholder format ${key} this method returns the key.
*
* @param s
* @return placeholder key or <code>null</code> if string is not in right format
*/
protected string getplaceholder final string s
return getplaceholder s
/**
* if the string is in an optional parameter placeholder format #{key} this method returns the
* key.
*
* @param s
* @return placeholder key or <code>null</code> if string is not in right format
*/
protected string getoptionalplaceholder final string s
return getplaceholder s
/**
* if the string is in a placeholder format x{key}, where 'x' can be specified, this method
* returns the key.
*
* @param s
* @param startchar
*            the character used to indicate the start of the placeholder
* @return placeholder key or <code>null</code> if string is not in right format
*/
protected string getplaceholder final string s  char startchar
if   s    null      s length   < 4      s startswith startchar          s endswith
return null
else
return s substring 2  s length     1
/**
* construct.
*/
public abstractmapper
super
/**
* returns true if the given url starts with specified segments. segments that contain
* placelhoders are not compared.
*
* @param url
* @param segments
* @return <code>true</code> if the url starts with the specified segments, <code>false</code>
*         otherwise
*/
protected boolean urlstartswith final url url  final string    segments
if  url    null
return false
else
if  url getsegments   size   < segments length
return false
else
for  int i   0  i < segments length    i
if   segments equals url getsegments   get i      false
getplaceholder segments     null
return false
return true
/**
* extracts {@link pageparameters} from the url using the given {@link ipageparametersencoder} .
*
* @param request
* @param segmentstoskip
*            how many url segments should be skipped because they "belong" to the
*            {@link irequestmapper}
* @param encoder
* @return pageparameters instance
*/
protected pageparameters extractpageparameters final request request  int segmentstoskip
final ipageparametersencoder encoder
args notnull request
args notnull encoder
// strip the segments and first query parameter from url
url urlcopy   new url request geturl
while   segmentstoskip > 0      urlcopy getsegments   isempty      false
urlcopy getsegments   remove 0
segmentstoskip
if   urlcopy getqueryparameters   isempty
strings isempty urlcopy getqueryparameters   get 0  getvalue
removemetaparameter urlcopy
return encoder decodepageparameters request clonewithurl urlcopy
/**
* the new {@link irequestmapper}s use the first query parameter to hold meta information about
* the request like page version, component version, locale, ... the actual
* {@link irequestmapper} implementation can decide whether the this parameter should be removed
* before creating {@link pageparameters} from the current {@link url#getqueryparameters() query
* parameters}
*
* @param urlcopy
*            the {@link url} that first query parameter has no value
*/
protected void removemetaparameter final url urlcopy
/**
* encodes the given {@link pageparameters} to the url using the given
* {@link ipageparametersencoder}. the original url object is unchanged.
*
* @param url
* @param pageparameters
* @param encoder
* @return url with encoded parameters
*/
protected url encodepageparameters url url  pageparameters pageparameters
final ipageparametersencoder encoder
args notnull url
args notnull encoder
if  pageparameters    null
pageparameters   new pageparameters
url parametersurl   encoder encodepageparameters pageparameters
if  parametersurl    null
// copy the url
url   new url url
for  string s   parametersurl getsegments
url getsegments   add s
for  queryparameter p   parametersurl getqueryparameters
url getqueryparameters   add p
return url
/**
* convenience method for representing mountpath as array of segments
*
* @param mountpath
* @return array of path segments
*/
protected string getmountsegments string mountpath
if  mountpath startswith
mountpath   mountpath substring 1
url url   url parse mountpath
string res   new string
for  int i   0  i < res length    i
res   url getsegments   get i
return res