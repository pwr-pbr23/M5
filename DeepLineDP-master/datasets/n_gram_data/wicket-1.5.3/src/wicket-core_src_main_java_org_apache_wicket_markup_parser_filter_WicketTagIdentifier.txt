/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket markup parser filter
import java text parseexception
import java util arraylist
import java util list
import org apache wicket markup componenttag
import org apache wicket markup markupelement
import org apache wicket markup markupresourcestream
import org apache wicket markup wicketparseexception
import org apache wicket markup wickettag
import org apache wicket markup parser abstractmarkupfilter
import org apache wicket util string strings
/**
* this is a markup inline filter. it identifies xml tags which have a special meaning for wicket.
* there are two type of tags which have a special meaning for wicket.
* <p>
* <ul>
* <li>all tags with wicket namespace, e.g. &lt;wicket:remove&gt;</li>
* <li>all tags with an attribute like wicket:id="mylabel"</li>
* </ul>
*
* @author juergen donnerstag
*/
public final class wickettagidentifier extends abstractmarkupfilter
/** list of well known wicket tag names */
private static list<string> wellknowntagnames
/** the current markup needed to get the markups namespace */
private final markupresourcestream markup
/**
* construct.
*
* @param markup
*            the markup as known by now
*/
public wickettagidentifier final markupresourcestream markup
this markup   markup
/**
* get the next tag from the next markupfilter in the chain and search for wicket specific tags.
* <p>
* note: the xml parser - the next markupfilter in the chain - returns xmltags which are a
* subclass of markupelement. the implementation of this filter will return either componenttags
* or componentwickettags. both are subclasses of markupelement as well and both maintain a
* reference to the xmltag. but no xmltag is returned.
*
* @see org.apache.wicket.markup.parser.imarkupfilter#nextelement()
* @return the next tag from markup to be processed. if null, no more tags are available
*/
@override
protected markupelement oncomponenttag componenttag tag  throws parseexception
final string namespace   markup getwicketnamespace
// if the form <tag wicket:id = "value"> is used
final string wicketidvalue   tag getattributes   getstring namespace
// identify tags with wicket namespace
if  namespace equalsignorecase tag getnamespace
// it is <wicket:...>
tag   new wickettag tag getxmltag
if  strings isempty wicketidvalue
// make it a wicket component. otherwise it would be rawmarkup
tag setid     tag getname
tag setautocomponenttag true
tag setmodified true
// if the tag is not a well-known wicket namespace tag
if   iswellknown tag
// give up
throw new wicketparseexception
tag getname
tag
if  wicketidvalue    null
if  wicketidvalue trim   length      0
throw new wicketparseexception
tag
// make it a wicket component. otherwise it would be rawmarkup
tag setid wicketidvalue
return tag
/**
* register a new well known wicket tag name (e.g. panel)
*
* @param name
*/
public final static void registerwellknowntagname final string name
if  wellknowntagnames    null
wellknowntagnames   new arraylist<string>
if  wellknowntagnames contains name     false
wellknowntagnames add name
/**
*
* @param tag
* @return true, if name is known
*/
private boolean iswellknown final componenttag tag
for  string name   wellknowntagnames
if  tag getname   equalsignorecase name
return true
return false