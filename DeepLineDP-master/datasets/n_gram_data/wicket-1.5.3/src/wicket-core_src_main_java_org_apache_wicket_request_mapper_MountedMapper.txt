/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket request mapper
import java util arraylist
import java util list
import org apache wicket requestlistenerinterface
import org apache wicket request irequesthandler
import org apache wicket request request
import org apache wicket request url
import org apache wicket request component irequestablepage
import org apache wicket request handler listenerinterfacerequesthandler
import org apache wicket request mapper info componentinfo
import org apache wicket request mapper info pagecomponentinfo
import org apache wicket request mapper info pageinfo
import org apache wicket request mapper parameter ipageparametersencoder
import org apache wicket request mapper parameter pageparameters
import org apache wicket request mapper parameter pageparametersencoder
import org apache wicket util classprovider
import org apache wicket util lang args
import org apache wicket util string strings
/**
* encoder for mounted url. the mount path can contain parameter placeholders, i.e.
* <code>/mount/${foo}/path</code>. in that case the appropriate segment from the url will be
* accessible as named parameter "foo" in the {@link pageparameters}. similarly when the url is
* constructed, the second segment will contain the value of the "foo" named page parameter.
* optional parameters are denoted by using a # instead of $: <code>/mount/#{foo}/path/${bar}</code>
* has an optional {@code foo} parameter, a fixed {@code /path/} part and a required {@code bar}
* parameter. when in doubt, parameters are matched from left to right, where required parameters
* are matched before optional parameters, and optional parameters eager (from left to right).
* <p>
* decodes and encodes the following urls:
*
* <pre>
*  page class - render (bookmarkablepagerequesthandler for mounted pages)
*  /mount/point
*  (these will redirect to hybrid alternative if page is not stateless)
*
*  ipage instance - render hybrid (renderpagerequesthandler for mounted pages)
*  /mount/point?2
*
*  ipage instance - bookmarkable listener (bookmarkablelistenerinterfacerequesthandler for mounted pages)
*  /mount/point?2-click-foo-bar-baz
*  /mount/point?2-5.click.1-foo-bar-baz (1 is behavior index, 5 is render count)
*  (these will redirect to hybrid if page is not stateless)
* </pre>
*
* @author matej knopp
*/
public class mountedmapper extends abstractbookmarkablemapper
private final ipageparametersencoder pageparametersencoder
private static class mountpathsegment
private int segmentindex
private string fixedpart
private int minparameters
private int optionalparameters
public mountpathsegment int segmentindex
this segmentindex   segmentindex
public void setfixedpart string fixedpart
this fixedpart   fixedpart
public void addrequiredparameter
minparameters
public void addoptionalparameter
optionalparameters
public int getsegmentindex
return segmentindex
public string getfixedpart
return fixedpart
public int getminparameters
return minparameters
public int getoptionalparameters
return optionalparameters
public int getmaxparameters
return getoptionalparameters     getminparameters
public int getfixedpartsize
return getfixedpart      null ? 0   1
@override
public string tostring
return     getsegmentindex         getminparameters         getmaxparameters
getfixedpart      null ?     getfixedpart
private final list<mountpathsegment> pathsegments
private final string mountsegments
/** bookmarkable page class. */
private final classprovider<? extends irequestablepage> pageclassprovider
/**
* construct.
*
* @param mountpath
* @param pageclass
*/
public mountedmapper string mountpath  class<? extends irequestablepage> pageclass
this mountpath  pageclass  new pageparametersencoder
/**
* construct.
*
* @param mountpath
* @param pageclassprovider
*/
public mountedmapper string mountpath
classprovider<? extends irequestablepage> pageclassprovider
this mountpath  pageclassprovider  new pageparametersencoder
/**
* construct.
*
* @param mountpath
* @param pageclass
* @param pageparametersencoder
*/
public mountedmapper string mountpath  class<? extends irequestablepage> pageclass
ipageparametersencoder pageparametersencoder
this mountpath  classprovider of pageclass   pageparametersencoder
/**
* construct.
*
* @param mountpath
* @param pageclassprovider
* @param pageparametersencoder
*/
public mountedmapper string mountpath
classprovider<? extends irequestablepage> pageclassprovider
ipageparametersencoder pageparametersencoder
args notempty mountpath
args notnull pageclassprovider
args notnull pageparametersencoder
this pageparametersencoder   pageparametersencoder
this pageclassprovider   pageclassprovider
mountsegments   getmountsegments mountpath
pathsegments   getpathsegments mountsegments
private list<mountpathsegment> getpathsegments string segments
list<mountpathsegment> ret   new arraylist<mountpathsegment>
int segmentindex   0
mountpathsegment curpathsegment   new mountpathsegment segmentindex
ret add curpathsegment
for  string cursegment   segments
if  isfixedsegment cursegment
curpathsegment setfixedpart cursegment
curpathsegment   new mountpathsegment segmentindex   1
ret add curpathsegment
else if  getplaceholder cursegment     null
curpathsegment addrequiredparameter
else
curpathsegment addoptionalparameter
segmentindex
return ret
private boolean isfixedsegment string segment
return getoptionalplaceholder segment     null    getplaceholder segment     null
/**
* @see org.apache.wicket.request.mapper.abstractbookmarkablemapper#parserequest(org.apache.wicket.request.request)
*/
@override
protected urlinfo parserequest request request
url url   request geturl
// when redirect to buffer/render is active and redirectfromhomepage returns true
// check mounted class against the home page class. if it matches let wicket redirect
// to the mounted url
if  redirectfromhomepage      checkhomepage url
return new urlinfo null  getcontext   gethomepageclass    newpageparameters
// check if the url starts with the proper segments
else if  urlstartswith url  mountsegments
// try to extract page and component information from url
pagecomponentinfo info   getpagecomponentinfo url
class<? extends irequestablepage> pageclass   getpageclass
pageparameters pageparameters   extractpageparameters request  url
return new urlinfo info  pageclass  pageparameters
else
return null
/*
* extract the pageparameters from url if there are any
*/
private pageparameters extractpageparameters request request  url url
int matchedparameters   getmatchedsegmentsizes url
int total   0
for  int curmatchsize   matchedparameters
total    curmatchsize
pageparameters pageparameters   extractpageparameters request  total  pageparametersencoder
int skippedparameters   0
for  int pathsegmentindex   0  pathsegmentindex < pathsegments size    pathsegmentindex
mountpathsegment curpathsegment   pathsegments get pathsegmentindex
int matchsize   matchedparameters   curpathsegment getfixedpartsize
int optionalparametermatch   matchsize   curpathsegment getminparameters
for  int matchsegment   0  matchsegment < matchsize  matchsegment
if  pageparameters    null
pageparameters   new pageparameters
int cursegmentindex   matchsegment   curpathsegment getsegmentindex
string cursegment   mountsegments
string placeholder   getplaceholder cursegment
string optionalplaceholder   getoptionalplaceholder cursegment
// extract the parameter from url
if  placeholder    null
pageparameters add placeholder
url getsegments   get cursegmentindex   skippedparameters
else if  optionalplaceholder    null    optionalparametermatch > 0
pageparameters add optionalplaceholder
url getsegments   get cursegmentindex   skippedparameters
optionalparametermatch
skippedparameters    curpathsegment getmaxparameters     matchsize
return pageparameters
@override
protected boolean urlstartswith url url  string    segments
if  url    null
return false
else
return getmatchedsegmentsizes url     null
private int getmatchedsegmentsizes url url
int ret   new int
int segmentindex   0
int pathsegmentindex   0
for  mountpathsegment curpathsegment   pathsegments sublist 0  pathsegments size     1
boolean foundfixedpart   false
segmentindex    curpathsegment getminparameters
int max   math min curpathsegment getoptionalparameters     1
url getsegments   size     segmentindex
for  int count   max   1  count >  0  count
if  url getsegments
get segmentindex   count
equals curpathsegment getfixedpart
foundfixedpart   true
segmentindex    count   1
ret   count   curpathsegment getminparameters     1
break
if   foundfixedpart
return null
pathsegmentindex
mountpathsegment lastsegment   pathsegments get pathsegments size     1
segmentindex    lastsegment getminparameters
if  segmentindex > url getsegments   size
return null
ret   math min lastsegment getmaxparameters    url getsegments   size
segmentindex   lastsegment getminparameters
return ret
protected pageparameters newpageparameters
return new pageparameters
@override
public url maphandler irequesthandler requesthandler
url url   super maphandler requesthandler
if  url    null    requesthandler instanceof listenerinterfacerequesthandler
listenerinterfacerequesthandler handler    listenerinterfacerequesthandler requesthandler
irequestablepage page   handler getpage
class<? extends irequestablepage> pageclass   page getclass
if  checkpageclass pageclass
string componentpath   handler getcomponentpath
requestlistenerinterface listenerinterface   handler getlistenerinterface
integer rendercount   null
if  listenerinterface isincluderendercount
rendercount   page getrendercount
pageinfo pageinfo   new pageinfo page getpageid
componentinfo componentinfo   new componentinfo rendercount
requestlistenerinterfacetostring listenerinterface   componentpath
handler getbehaviorindex
pagecomponentinfo pagecomponentinfo   new pagecomponentinfo pageinfo  componentinfo
urlinfo urlinfo   new urlinfo pagecomponentinfo  page getclass
handler getpageparameters
url   buildurl urlinfo
return url
/**
* @see org.apache.wicket.request.mapper.abstractbookmarkablemapper#buildurl(org.apache.wicket.request.mapper.abstractbookmarkablemapper.urlinfo)
*/
@override
protected url buildurl urlinfo info
url url   new url
for  string s   mountsegments
url getsegments   add s
encodepagecomponentinfo url  info getpagecomponentinfo
pageparameters copy   new pageparameters info getpageparameters
int dropped   0
for  int i   0  i < mountsegments length    i
string placeholder   getplaceholder mountsegments
string optionalplaceholder   getoptionalplaceholder mountsegments
if  placeholder    null
url getsegments   set i   dropped  copy get placeholder  tostring
copy remove placeholder
else if  optionalplaceholder    null
if  copy getnamedkeys   contains optionalplaceholder
url getsegments   set i   dropped  copy get optionalplaceholder  tostring
copy remove optionalplaceholder
else
url getsegments   remove i   dropped
dropped
return encodepageparameters url  copy  pageparametersencoder
/**
* check if the url is for home page and the home page class match mounted class. if so,
* redirect to mounted url.
*
* @param url
* @return request handler or <code>null</code>
*/
private boolean checkhomepage url url
if  url getsegments   isempty      url getqueryparameters   isempty
// this is home page
if  getpageclass   equals getcontext   gethomepageclass       redirectfromhomepage
return true
return false
/**
* if this method returns <code>true</code> and application home page class is same as the class
* mounted with this encoder, request to home page will result in a redirect to the mounted
* path.
*
* @return whether this encode should respond to home page request when home page class is same
*         as mounted class.
*/
protected boolean redirectfromhomepage
return true
/**
* @see org.apache.wicket.request.mapper.abstractbookmarkablemapper#pagemusthavebeencreatedbookmarkable()
*/
@override
protected boolean pagemusthavebeencreatedbookmarkable
return false
/**
* @see org.apache.wicket.request.mapper.abstractbookmarkablemapper#getcompatibilityscore(org.apache.wicket.request.request)
*/
@override
public int getcompatibilityscore request request
if  urlstartswith request geturl    mountsegments
return mountsegments length
else
return 0
/**
* @see org.apache.wicket.request.mapper.abstractbookmarkablemapper#checkpageclass(java.lang.class)
*/
@override
protected boolean checkpageclass class<? extends irequestablepage> pageclass
return pageclass equals this getpageclass
private class<? extends irequestablepage> getpageclass
return pageclassprovider get
@override
public string tostring
return     strings join    mountsegments