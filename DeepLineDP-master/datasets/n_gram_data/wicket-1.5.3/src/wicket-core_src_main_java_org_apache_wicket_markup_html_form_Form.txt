/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket markup html form
import java util arraylist
import java util collection
import java util collections
import java util hashmap
import java util list
import java util locale
import java util map
import javax servlet http httpservletrequest
import org apache wicket component
import org apache wicket page
import org apache wicket wicketruntimeexception
import org apache wicket behavior behavior
import org apache wicket markup componenttag
import org apache wicket markup markupstream
import org apache wicket markup html iheaderresponse
import org apache wicket markup html webmarkupcontainer
import org apache wicket markup html form upload fileuploadfield
import org apache wicket markup html form validation formvalidatoradapter
import org apache wicket markup html form validation iformvalidator
import org apache wicket model imodel
import org apache wicket model model
import org apache wicket protocol http servlet servletwebrequest
import org apache wicket request irequesthandler
import org apache wicket request irequestmapper
import org apache wicket request irequestparameters
import org apache wicket request request
import org apache wicket request response
import org apache wicket request url
import org apache wicket request urldecoder
import org apache wicket request urlrenderer
import org apache wicket request http webrequest
import org apache wicket request mapper parameter pageparameters
import org apache wicket settings iapplicationsettings
import org apache wicket util lang args
import org apache wicket util lang bytes
import org apache wicket util string appendingstringbuffer
import org apache wicket util string prependingstringbuffer
import org apache wicket util string strings
import org apache wicket util string interpolator mapvariableinterpolator
import org apache wicket util upload fileuploadbase sizelimitexceededexception
import org apache wicket util upload fileuploadexception
import org apache wicket util value longvalue
import org apache wicket util visit classvisitfilter
import org apache wicket util visit ivisit
import org apache wicket util visit ivisitor
import org apache wicket util visit visits
import org slf4j logger
import org slf4j loggerfactory
/**
* base class for forms. to implement a form, subclass this class, add {@link formcomponent}s (such
* as {@link checkbox}es, {@link listchoice}s or {@link textfield}s) to the form. you can nest
* multiple {@link iformsubmittingcomponent}s if you want to vary submit behavior. however, it is
* not necessary to use any of wicket's classes (such as {@link button} or {@link submitlink}), just
* putting e.g. &lt;input type="submit" value="go"/&gt; suffices.
* <p>
* by default, the processing of a form works like this:
* <li>the submitting component is looked up. an submitting {@link iformsubmittingcomponent} (such
* as a button) is nested in this form (is a child component) and was clicked by the user. if an
* {@link iformsubmittingcomponent} was found, and it has the defaultformprocessing field set to
* false (default is true), it's onsubmit method will be called right away, thus no validation is
* done, and things like updating form component models that would normally be done are skipped. in
* that respect, nesting an {@link iformsubmittingcomponent} with the defaultformprocessing field
* set to false has the same effect as nesting a normal link. if you want you can call
* {@link #validate()} to execute form validation, {@link #haserror()} to find out whether
* validate() resulted in validation errors, and {@link #updateformcomponentmodels()} to update the
* models of nested form components.</li>
* <li>when no submitting {@link iformsubmittingcomponent} with defaultformprocessing set to false
* was found, this form is processed (method {@link #process(iformsubmitter)}. now, two possible
* paths exist:
* <ul>
* <li>form validation failed. all nested form components will be marked invalid, and
* {@link #onerror()} is called to allow clients to provide custom error handling code.</li>
* <li>form validation succeeded. the nested components will be asked to update their models and
* persist their data is applicable. after that, method delegatesubmit with optionally the
* submitting {@link iformsubmittingcomponent} is called. the default when there is a submitting
* {@link iformsubmittingcomponent} is to first call onsubmit on that component, and after that call
* {@link #onsubmit()} on this form. clients may override {@link #delegatesubmit(iformsubmitter)} if
* they want different behavior.</li>
* </ul>
* </li>
* </li>
* </p>
*
* form for handling (file) uploads with multipart requests is supported by calling
* {@link #setmultipart(boolean)}(true) ( although wicket will try to automatically detect this for
* you ). use this with {@link fileuploadfield} components. you can attach multiple
* {@link fileuploadfield} components for multiple file uploads.
* <p>
* in case of an upload error two resource keys are available to specify error messages:
* uploadtoolarge and uploadfailed
*
* i.e. in [page].properties
*
* [form-id].uploadtoolarge=you have uploaded a file that is over the allowed limit of 2mb
*
* <p>
* if you want to have multiple {@link iformsubmittingcomponent}s which submit the same form, simply
* put two or more {@link iformsubmittingcomponent}s somewhere in the hierarchy of components that
* are children of the form.
* </p>
* <p>
* forms can be nested. you can put a form in another form. since html doesn't allow nested
* &lt;form&gt; tags, the inner forms will be rendered using the &lt;div&gt; tag. you have to submit
* the inner forms using explicit components (like {@link button} or {@link submitlink}), you can't
* rely on implicit submit behavior (by using just &lt;input type="submit"&gt; that is not attached
* to a component).
* </p>
* <p>
* when a nested form is submitted, the user entered values in outer (parent) forms are preserved
* and only the fields in the submitted form are validated. </b>
*
* @author jonathan locke
* @author juergen donnerstag
* @author eelco hillenius
* @author cameron braid
* @author johan compagner
* @author igor vaynberg (ivaynberg)
* @author david leangen
*
* @param <t>
*            the model object type
*/
public class form<t> extends webmarkupcontainer implements iformsubmitlistener
private static final string hidden_div_start    width 0px height 0px position absolute left  100px top  100px overflow hidden
/**
* visitor used for validation
*
* @author igor vaynberg (ivaynberg)
*/
public abstract static class validationvisitor implements ivisitor<formcomponent<?>  void>
public void component final formcomponent<?> formcomponent  final ivisit<void> visit
form<?> form   formcomponent getform
if   form isvisibleinhierarchy       form isenabledinhierarchy
// do not validate formcomponent or any of formcomponent's children
visit dontgodeeper
return
if  formcomponent isvisibleinhierarchy      formcomponent isvalid
formcomponent isenabledinhierarchy
validate formcomponent
if  formcomponent processchildren      false
visit dontgodeeper
/**
* callback that should be used to validate form component
*
* @param formcomponent
*/
public abstract void validate formcomponent<?> formcomponent
/**
* visitor used to update component models
*
* @author igor vaynberg (ivaynberg)
*/
private static class formmodelupdatevisitor implements ivisitor<component  void>
private final form<?> formfilter
/**
* constructor
*
* @param formfilter
*/
public formmodelupdatevisitor form<?> formfilter
this formfilter   formfilter
/** {@inheritdoc} */
public void component final component component  final ivisit<void> visit
if  component instanceof iformmodelupdatelistener
final form<?> form   form findform component
if  form    null
if  this formfilter    null    this formfilter    form
if  form isenabledinhierarchy
if  component isvisibleinhierarchy
component isenabledinhierarchy
iformmodelupdatelistener component  updatemodel
/**
* constant for specifying how a form is submitted, in this case using get.
*/
public static final string method_get
/**
* constant for specifying how a form is submitted, in this case using post.
*/
public static final string method_post
/** flag that indicates this form has been submitted during this request */
private static final short flag_submitted   flag_reserved1
/** log. */
private static final logger log   loggerfactory getlogger form class
private static final long serialversionuid   1l
private static final string upload_failed_resource_key
private static final string upload_too_large_resource_key
/**
* any default iformsubmittingcomponent. if set, a hidden submit component will be rendered
* right after the form tag, so that when users press enter in a textfield, this submit
* component's action will be selected. if no default iformsubmittingcomponent is set, nothing
* additional is rendered.
* <p>
* warning: note that this is a best effort only. unfortunately having a 'default'
* iformsubmittingcomponent in a form is ill defined in the standards, and of course ie has it's
* own way of doing things.
* </p>
*/
private iformsubmittingcomponent defaultsubmittingcomponent
/**
* maximum size of an upload in bytes. if null, the setting
* {@link iapplicationsettings#getdefaultmaximumuploadsize()} is used.
*/
private bytes maxsize   null
/** true if the form has enctype of multipart/form-data */
private short multipart   0
/**
* a user has explicitly called {@link #setmultipart(boolean)} with value {@code true} forcing
* it to be true
*/
private static final short multipart_hard   0x01
/**
* the form has discovered a multipart component before rendering and is marking itself as
* multipart until next render
*/
private static final short multipart_hint   0x02
/**
* constructs a form with no validation.
*
* @param id
*            see component
*/
public form final string id
this id  null
/**
* @param id
*            see component
* @param model
*            see component
* @see org.apache.wicket.component#component(string, imodel)
*/
public form final string id  final imodel<t> model
super id  model
setoutputmarkupid true
/**
* adds a form validator to the form.
*
* @param validator
*            validator
* @throws illegalargumentexception
*             if validator is null
* @see iformvalidator
*/
public void add final iformvalidator validator
args notnull validator
if  validator instanceof behavior
add  behavior validator
else
add new formvalidatoradapter validator
/**
* removes a form validator from the form.
*
* @param validator
*            validator
* @throws illegalargumentexception
*             if validator is null
* @see iformvalidator
*/
public void remove final iformvalidator validator
args notnull validator
behavior match   null
for  behavior behavior   getbehaviors
if  behavior equals validator
match   behavior
break
else if  behavior instanceof formvalidatoradapter
if    formvalidatoradapter behavior  getvalidator   equals validator
match   behavior
break
if  match    null
remove match
else
throw new illegalstateexception
/**
* clears the input from the form's nested children of type {@link formcomponent}. this method
* is typically called when a form needs to be reset.
*/
public final void clearinput
// visit all the (visible) form components and clear the input on each.
visitformcomponentspostorder new ivisitor<formcomponent<?>  void>
public void component final formcomponent<?> formcomponent  ivisit<void> visit
if  formcomponent isvisibleinhierarchy
// clear input from form component
formcomponent clearinput
/**
* registers an error feedback message for this component
*
* @param error
*            error message
* @param args
*            argument replacement map for ${key} variables
*/
public final void error string error  map<string  object> args
error new mapvariableinterpolator error  args  tostring
/**
* gets the iformsubmittingcomponent which submitted this form.
*
* @return the component which submitted this form, or null if the processing was not triggered
*         by a registered iformsubmittingcomponent
*/
public final iformsubmitter findsubmittingbutton
iformsubmittingcomponent submittingcomponent   getpage   visitchildren
iformsubmittingcomponent class  new ivisitor<component  iformsubmittingcomponent>
public void component final component component
final ivisit<iformsubmittingcomponent> visit
// get submitting component
final iformsubmittingcomponent submittingcomponent    iformsubmittingcomponent component
final form<?> form   submittingcomponent getform
// check for component-name or component-name.x request string
if   form    null      form getrootform      form this
string name   submittingcomponent getinputname
irequestparameters parameters   getrequest   getrequestparameters
if    parameters getparametervalue name  isnull
parameters getparametervalue name      isnull
if   component isvisibleinhierarchy
throw new wicketruntimeexception
submittingcomponent getinputname
component getpagerelativepath
if   component isenabledinhierarchy
throw new wicketruntimeexception
submittingcomponent getinputname
component getpagerelativepath
visit stop submittingcomponent
return submittingcomponent
/**
* gets the default iformsubmittingcomponent. if set (not null), a hidden submit component will
* be rendered right after the form tag, so that when users press enter in a textfield, this
* submit component's action will be selected. if no default component is set (it is null),
* nothing additional is rendered.
* <p>
* warning: note that this is a best effort only. unfortunately having a 'default' button in a
* form is ill defined in the standards, and of course ie has it's own way of doing things.
* </p>
* there can be only one default submit component per form hierarchy. so if you want to get the
* default component on a nested form, it will actually delegate the call to root form. </b>
*
* @return the submit component to set as the default iformsubmittingcomponent, or null when you
*         want to 'unset' any previously set default iformsubmittingcomponent
*/
public final iformsubmittingcomponent getdefaultbutton
if  isrootform
return defaultsubmittingcomponent
else
return getrootform   getdefaultbutton
/**
* gets all {@link iformvalidator}s added to this form
*
* @return unmodifiable collection of {@link iformvalidator}s
*/
public final collection<iformvalidator> getformvalidators
list<iformvalidator> validators   new arraylist<iformvalidator>
for  behavior behavior   getbehaviors
if  behavior instanceof iformvalidator
validators add  iformvalidator behavior
return collections unmodifiablecollection validators
/**
* this generates a piece of javascript code that sets the url in the special hidden field and
* submits the form.
*
* warning: this code should only be called in the rendering phase for form components inside
* the form because it uses the css/javascript id of the form which can be stored in the markup.
*
* @param url
*            the interface url that has to be stored in the hidden field and submitted
* @return the javascript code that submits the form.
*/
public final charsequence getjsforinterfaceurl charsequence url
/*
* since the passed in url is handled when the current url is form's action url and not the
* current request's url we rerender the passed in url to be relative to the form's action
* url
*/
urlrenderer renderer   getrequestcycle   geturlrenderer
url oldbase   renderer getbaseurl
try
url action   url parse getactionurl   tostring
renderer setbaseurl action
url   renderer renderurl url parse url tostring
finally
renderer setbaseurl oldbase
form<?> root   getrootform
return new appendingstringbuffer    append
root gethiddenfieldid
append
append url
append
append root getmarkupid
append
/**
* gets the maximum size for uploads. if null, the setting
* {@link iapplicationsettings#getdefaultmaximumuploadsize()} is used.
*
*
* @return the maximum size
*/
public final bytes getmaxsize
/*
* note: this method should remain final otherwise it will be impossible to set a default
* max size smaller then the one specified in applications settings because the inner form
* will return the default unless it is specifically set in the traversal. with this method
* remaining final we can tell when the value is explicitly set by the user.
*
* if the value needs to be dynamic it can be set in oncofigure() instead of overriding this
* method.
*/
final bytes maxsize     this maxsize
if  maxsize    null
visitchildren form class  new ivisitor<form<?>  bytes>
public void component form<?> component  ivisit<bytes> visit
maxsize   longvalue maxnullsafe maxsize  component maxsize
if  maxsize    null
return getapplication   getapplicationsettings   getdefaultmaximumuploadsize
return maxsize
/**
* returns the root form or this, if this is the root form.
*
* @return root form or this form
*/
public form<?> getrootform
form<?> form
form<?> parent   this
do
form   parent
parent   form findparent form class
while  parent    null
return form
/**
* returns the prefix used when building validator keys. this allows a form to use a separate
* "set" of keys. for example if prefix "short" is returned, validator key short.required will
* be tried instead of required key.
* <p>
* this can be useful when different designs are used for a form. in a form where error messages
* are displayed next to their respective form components as opposed to at the top of the form,
* the ${label} attribute is of little use and only causes redundant information to appear in
* the message. forms like these can return the "short" (or any other string) validator prefix
* and declare key: short.required=required to override the longer message which is usually
* declared like this: required=${label} is a required field
* <p>
* returned prefix will be used for all form components. the prefix can also be overridden on
* form component level by overriding {@link formcomponent#getvalidatorkeyprefix()}
*
* @return prefix prepended to validator keys
*/
public string getvalidatorkeyprefix
return null
/**
* gets whether the current form has any error registered.
*
* @return true if this form has at least one error.
*/
public final boolean haserror
// if this form itself has an error message
if  haserrormessage
return true
// the form doesn't have any errors, now check any nested form
// components
return anyformcomponenterror
/**
* returns whether the form is a root form, which means that there's no other form in it's
* parent hierarchy.
*
* @return true if form is a root form, false otherwise
*/
public boolean isrootform
return findparent form class     null
/**
* checks if this form has been submitted during the current request
*
* @return true if the form has been submitted during this request, false otherwise
*/
public final boolean issubmitted
return getflag flag_submitted
/**
* this method is not part of the wicket api. do not attempt to override or call it.
*
* handles form submissions.
*
* @see #onformsubmitted(iformsubmitter)
*/
public final void onformsubmitted
// check methods match
if  getrequest   getcontainerrequest   instanceof httpservletrequest
string desiredmethod   getmethod
string actualmethod     httpservletrequest getrequest   getcontainerrequest    getmethod
if   actualmethod equalsignorecase getmethod
methodmismatchresponse response   onmethodmismatch
switch  response
case abort
return
case continue
break
default
throw new illegalstateexception
methodmismatchresponse class getname         response
onformsubmitted null
/**
* called when a form has been submitted using a method differing from return value of
* {@link #getmethod()}. for example, someone can copy and paste the action url and invoke the
* form using a {@code get} instead of the desired {@code post}. this method allows the user to
* react to this situation.
*
* @return response that can either abort or continue the processing of the form
*/
protected methodmismatchresponse onmethodmismatch
return methodmismatchresponse continue
/**
* this method is not part of the wicket api. do not attempt to override or call it.
*
* handles form submissions.
*
* @param submitter
*            listener that will receive form processing events, if {@code null} the form will
*            attempt to locate one
*
* @see form#validate()
*/
public final void onformsubmitted iformsubmitter submitter
markformssubmitted
if  handlemultipart
// tells formcomponents that a new user input has come
inputchanged
string url   getrequest   getrequestparameters
getparametervalue gethiddenfieldid
tostring
if   strings isempty url
dispatchevent getpage    url
else
// first, see if the processing was triggered by a wicket iformsubmittingcomponent
if  submitter    null
submitter   findsubmittingbutton
// when processing was triggered by a wicket iformsubmittingcomponent and that
// component indicates it wants to be called immediately
// (without processing), call iformsubmittingcomponent.onsubmit() right away.
if  submitter    null     submitter getdefaultformprocessing
submitter onsubmit
else
// this is the root form
form<?> formtoprocess   this
// find out whether it was a nested form that was submitted
if  submitter    null
formtoprocess   submitter getform
// process the form for this request
formtoprocess process submitter
// if multi part did fail check if an error is registered and call
// onerror
else if  haserror
callonerror submitter
/**
* process the form. though you can override this method to provide your own algorithm, it is
* not recommended to do so.
*
* <p>
* see the class documentation for further details on the form processing
* </p>
*
* @param submittingcomponent
*            component responsible for submitting the form, or <code>null</code> if none (eg
*            the form has been submitted via the enter key or javascript calling
*            form.onsubmit())
*
* @see #delegatesubmit(iformsubmitter) for an easy way to process submitting component in the
*      default manner
*/
public void process iformsubmitter submittingcomponent
// save the page in case the component is removed during submit
final page page   getpage
string hiddenfieldid   gethiddenfieldid
if   isenabledinhierarchy       isvisibleinhierarchy
// since process() can be called outside of the default form workflow, an additional
// check is needed
// fixme throw listener exception
return
// run validation
validate
// if a validation error occurred
if  haserror
// mark all children as invalid
markformcomponentsinvalid
// let subclass handle error
callonerror submittingcomponent
else
// mark all children as valid
markformcomponentsvalid
// before updating, call the interception method for clients
beforeupdateformcomponentmodels
// update model using form data
updateformcomponentmodels
// validate model objects after input values have been bound
onvalidatemodelobjects
if  haserror
callonerror submittingcomponent
return
// form has no error
delegatesubmit submittingcomponent
// if the form is stateless page parameters contain all form component
// values. we need to remove those otherwise they get appended to action url
final pageparameters parameters   page getpageparameters
if  parameters    null
visitformcomponents new ivisitor<formcomponent<?>  void>
public void component final formcomponent<?> formcomponent  final ivisit<void> visit
parameters remove formcomponent getinputname
parameters remove hiddenfieldid
if  submittingcomponent instanceof abstractsubmitlink
abstractsubmitlink submitlink    abstractsubmitlink submittingcomponent
parameters remove submitlink getinputname
/**
* calls onerror on this {@link form} and any enabled and visible nested form, if the respective
* {@link form} actually has errors.
*
* @param submitter
*/
protected void callonerror iformsubmitter submitter
if  submitter    null
submitter onerror
onerror
// call onerror on nested forms
visitchildren form class  new ivisitor<component  void>
public void component final component component  final ivisit<void> visit
final form<?> form    form<?> component
if   form isenabledinhierarchy       form isvisibleinhierarchy
visit dontgodeeper
return
if  form haserror
form onerror
/**
* sets flag_submitted to true on this form and every enabled nested form.
*/
private void markformssubmitted
setflag flag_submitted  true
visitchildren form class  new ivisitor<component  void>
public void component final component component  final ivisit<void> visit
form<?> form    form<?> component
if  form isenabledinhierarchy      isvisibleinhierarchy
form setflag flag_submitted  true
return
visit dontgodeeper
/**
* sets the default iformsubmittingcomponent. if set (not null), a hidden submit component will
* be rendered right after the form tag, so that when users press enter in a textfield, this
* submit component's action will be selected. if no default component is set (so unset by
* calling this method with null), nothing additional is rendered.
* <p>
* warning: note that this is a best effort only. unfortunately having a 'default' button in a
* form is ill defined in the standards, and of course ie has it's own way of doing things.
* </p>
* there can be only one default button per form hierarchy. so if you set default button on a
* nested form, it will actually delegate the call to root form. </b>
*
* @param submittingcomponent
*            the component to set as the default submitting component, or null when you want to
*            'unset' any previously set default component
*/
public final void setdefaultbutton iformsubmittingcomponent submittingcomponent
if  isrootform
defaultsubmittingcomponent   submittingcomponent
else
getrootform   setdefaultbutton submittingcomponent
/**
* sets the maximum size for uploads. if null, the setting
* {@link iapplicationsettings#getdefaultmaximumuploadsize()} is used.
*
* @param maxsize
*            the maximum size
*/
public final void setmaxsize final bytes maxsize
this maxsize   maxsize
/**
* set to true to use enctype='multipart/form-data', and to process file uploads by default
* multipart = false
*
* @param multipart
*            whether this form should behave as a multipart form
*/
public void setmultipart boolean multipart
if  multipart
this multipart    multipart_hard
else
this multipart    ~multipart_hard
/**
* @see org.apache.wicket.component#setversioned(boolean)
*/
@override
public final component setversioned final boolean isversioned
super setversioned isversioned
// search for formcomponents like textfield etc.
visitformcomponents new ivisitor<formcomponent<?>  void>
public void component final formcomponent<?> formcomponent  ivisit<void> visit
formcomponent setversioned isversioned
return this
/**
* convenient and typesafe way to visit all the form components on a form.
*
* @param <r>
*            return object type
* @param visitor
*            the visitor interface to call
* @return user provided in callback
*/
public final <r> r visitformcomponents final ivisitor<? extends formcomponent<?>  r> visitor
return visitchildren formcomponent class  visitor
/**
* convenient and typesafe way to visit all the form components on a form postorder (deepest
* first)
*
* @param <r>
*            return object type
* @param visitor
*            the visitor interface to call
* @return whatever you provided
*/
public final <r> r visitformcomponentspostorder
final ivisitor<? extends formcomponent<?>  r> visitor
return formcomponent visitformcomponentspostorder this  visitor
/**
* find out whether there is any registered error for a form component.
*
* @return whether there is any registered error for a form component
*/
private boolean anyformcomponenterror
// check all children for error messages irrespective of formcomponents or not
boolean error   visitchildren component class  new ivisitor<component  boolean>
public void component final component component  final ivisit<boolean> visit
if  component haserrormessage
visit stop true
return  error    null     error
/**
* method for dispatching/calling a interface on a page from the given url. used by
* {@link org.apache.wicket.markup.html.form.form#onformsubmitted()} for dispatching events
*
* @param page
*            the page where the event should be called on.
* @param url
*            the url which describes the component path and the interface to be called.
*/
private void dispatchevent final page page  final string url
// the current requst's url is most likely wicket/page?x-y.iformsubmitlistener-path-to-form
// while the passed in url is most likely page?x.y.ionchangelistener-path-to-component
// we transform the passed in url into wicket/page?x-y.ionchangelistener-path-to-component
// so the system mapper can interpret it
url resolved   new url getrequest   geturl
resolved resolverelative url parse url
irequestmapper mapper   getapplication   getrootrequestmapper
request request   getrequest   clonewithurl resolved
irequesthandler handler   mapper maprequest request
if  handler    null
getrequestcycle   schedulerequesthandleraftercurrent handler
/**
* visits the form's children formcomponents and inform them that a new user input is available
* in the request
*/
private void inputchanged
visitformcomponentspostorder new ivisitor<formcomponent<?>  void>
public void component final formcomponent<?> formcomponent  ivisit<void> visit
formcomponent inputchanged
/**
* if a default iformsubmittingcomponent was set on this form, this method will be called to
* render an extra field with an invisible style so that pressing enter in one of the textfields
* will do a form submit using this component. this method is overridable as what we do is best
* effort only, and may not what you want in specific situations. so if you have specific
* usability concerns, or want to follow another strategy, you may override this method.
*
* @param markupstream
*            the markup stream
* @param opentag
*            the open tag for the body
*/
protected void appenddefaultbuttonfield final markupstream markupstream
final componenttag opentag
appendingstringbuffer buffer   new appendingstringbuffer
// div that is not visible (but not display:none either)
buffer append hidden_div_start
// add an empty textfield (otherwise ie doesn't work)
buffer append  text  off
// add the submitting component
final component submittingcomponent    component defaultsubmittingcomponent
buffer append  submit  "
buffer append defaultsubmittingcomponent getinputname
buffer append   onclick
buffer append submittingcomponent getmarkupid
buffer append   "
buffer append
// close div
buffer append
getresponse   write buffer
/**
* template method to allow clients to do any processing (like recording the current model so
* that, in case onsubmit does further validation, the model can be rolled back) before the
* actual updating of form component models is done.
*/
protected void beforeupdateformcomponentmodels
/**
* called (by the default implementation of 'process') when all fields validated, the form was
* updated and it's data was allowed to be persisted. it is meant for delegating further
* processing to clients.
* <p>
* this implementation first finds out whether the form processing was triggered by a nested
* iformsubmittingcomponent of this form. if that is the case, that component's onsubmit is
* called first.
* </p>
* <p>
* regardless of whether a submitting component was found, the form's onsubmit method is called
* next.
* </p>
*
* @param submittingcomponent
*            the component that triggered this form processing, or null if the processing was
*            triggered by something else (like a non-wicket submit button or a javascript
*            execution)
*/
protected void delegatesubmit iformsubmitter submittingcomponent
final form<?> processingform
// process submitting component (if specified)
if  submittingcomponent    null
// use form of submitting component for processing
processingform   submittingcomponent getform
if  processingform    null
throw new illegalstateexception
// invoke submit on component
submittingcomponent onsubmit
else
processingform   this
// invoke form#onsubmit(..) going from innermost to outermost
visits visitpostorder processingform  new ivisitor<form<?>  void>
public void component form<?> form  ivisit<void> visit
if  form isenabledinhierarchy      form isvisibleinhierarchy
form onsubmit
new classvisitfilter form class
/**
* returns the hiddenfieldid which will be used as the name and id property of the hiddenfield
* that is generated for event dispatches.
*
* @return the name and id of the hidden field.
*/
public final string gethiddenfieldid
return getinputnameprefix     getmarkupid
/**
* gets the http submit method that will appear in form markup. if no method is specified in the
* template, "post" is the default. note that the markup-declared http method may not correspond
* to the one actually used to submit the form; in an ajax submit, for example, javascript event
* handlers may submit the form with a "get" even when the form method is declared as "post."
* therefore this method should not be considered a guarantee of the http method used, but a
* value for the markup only. override if you have a requirement to alter this behavior.
*
* @return the submit method specified in markup.
*/
protected string getmethod
string method   getmarkupattributes   getstring
return  method    null  ? method   method_post
/**
*
* @see org.apache.wicket.component#getstatelesshint()
*/
@override
protected boolean getstatelesshint
return false
/**
* @return true if is multipart
*/
public boolean ismultipart
if  multipart    0
return true
boolean anyembeddedmultipart   visitchildren component class
new ivisitor<component  boolean>
public void component final component component  final ivisit<boolean> visit
boolean ismultipart   false
if  component instanceof form<?>
form<?> form    form<?> component
if  form isvisibleinhierarchy      form isenabledinhierarchy
ismultipart    form multipart    0
else if  component instanceof formcomponent<?>
formcomponent<?> fc    formcomponent<?> component
if  fc isvisibleinhierarchy      fc isenabledinhierarchy
ismultipart   fc ismultipart
if  ismultipart
visit stop true
boolean mp   boolean true equals anyembeddedmultipart
if  mp
multipart    multipart_hint
return mp
/**
* handles multi-part processing of the submitted data. <h3>
* warning</h3> if this method is overridden it can break {@link fileuploadfield}s on this form
*
* @return false if form is multipart and upload failed
*/
protected boolean handlemultipart
if  ismultipart
// change the request to a multipart web request so parameters are
// parsed out correctly
try
servletwebrequest request    servletwebrequest getrequest
final webrequest multipartwebrequest   request newmultipartwebrequest getmaxsize
getpage   getid
// todo: can't this be detected from header?
getrequestcycle   setrequest multipartwebrequest
catch  final fileuploadexception fux
// create model with exception and maximum size values
final map<string  object> model   new hashmap<string  object>
model put    fux
model put    getmaxsize
onfileuploadexception fux  model
// don't process the form if there is a fileuploadexception
return false
return true
/**
* the default message may look like ".. may not exceed 10240 bytes..". which is ok, but
* sometimes you may want something like "10kb". by subclassing this method you may replace
* maxsize in the model or add you own property and use that in your error message.
* <p>
* don't forget to call super.onfileuploadexception(e, model) at the end of your method.
*
* @param e
* @param model
*/
protected void onfileuploadexception final fileuploadexception e
final map<string  object> model
if  e instanceof sizelimitexceededexception
// resource key should be <form-id>.uploadtoolarge to
// override default message
final string defaultvalue       getmaxsize
string msg   getstring getid         upload_too_large_resource_key
model ofmap model   defaultvalue
error msg
else
// resource key should be <form-id>.uploadfailed to override
// default message
final string defaultvalue       e getlocalizedmessage
string msg   getstring getid         upload_failed_resource_key  model ofmap model
defaultvalue
error msg
log warn msg  e
/**
* @see org.apache.wicket.component#internalonmodelchanged()
*/
@override
protected void internalonmodelchanged
// visit all the form components and validate each
visitformcomponentspostorder new ivisitor<formcomponent<?>  void>
public void component final formcomponent<?> formcomponent  ivisit<void> visit
// if form component is using form model
if  formcomponent sameinnermostmodel form this
formcomponent modelchanged
/**
* mark each form component on this form invalid.
*/
protected final void markformcomponentsinvalid
// call invalidate methods of all nested form components
visitformcomponentspostorder new ivisitor<formcomponent<?>  void>
public void component final formcomponent<?> formcomponent  ivisit<void> visit
if  formcomponent isvisibleinhierarchy
formcomponent invalid
/**
* mark each form component on this form and on nested forms valid.
*/
protected final void markformcomponentsvalid
internalmarkformcomponentsvalid
marknestedformcomponentsvalid
/**
* mark each form component on nested form valid.
*/
private void marknestedformcomponentsvalid
visitchildren form class  new ivisitor<form<?>  void>
public void component final form<?> form  final ivisit<void> visit
if  form isenabledinhierarchy      form isvisibleinhierarchy
form internalmarkformcomponentsvalid
else
visit dontgodeeper
/**
* mark each form component on this form valid.
*/
private void internalmarkformcomponentsvalid
// call valid methods of all nested form components
visitformcomponentspostorder new ivisitor<formcomponent<?>  void>
public void component final formcomponent<?> formcomponent  ivisit<void> visit
if  formcomponent getform      form this    formcomponent isvisibleinhierarchy
formcomponent valid
/**
* @see org.apache.wicket.component#oncomponenttag(componenttag)
*/
@override
protected void oncomponenttag final componenttag tag
super oncomponenttag tag
checkcomponenttag tag
if  isrootform
string method   getmethod   tolowercase locale english
tag put    method
string url   getactionurl   tostring
if  encodeurlinhiddenfields
int i   url indexof
string action    i >  1  ? url substring 0  i
tag put    action
// alternatively, we could just put an empty string here, so
// that mounted paths stay in good order. i decided against this
// as i'm not sure whether that could have side effects with
// other encoders
else
tag put    url
if  ismultipart
if  method_get equalsignorecase method
log warn
getid
tag put    method_post tolowercase locale english
tag put
//
// require the application-encoding for multipart/form-data to be sure to
// get multipart-uploaded characters with the proper encoding on the following
// request.
//
// for details see: http://stackoverflow.com/questions/546365
//
tag put    getapplication   getrequestcyclesettings
getresponserequestencoding
else
// sanity check
string enctype    string tag getattributes   get
if    equalsignorecase enctype
// though not set explicitly in java, this is a multipart
// form
setmultipart true
else
tag setname
tag remove
tag remove
tag remove
/**
* generates the action url for the form
*
* @return action url
*/
protected charsequence getactionurl
return urlfor iformsubmitlistener interface
/**
* @see org.apache.wicket.component#renderplaceholdertag(org.apache.wicket.markup.componenttag,
*      org.apache.wicket.request.response)
*/
@override
protected void renderplaceholdertag componenttag tag  response response
if  isrootform
super renderplaceholdertag tag  response
else
// rewrite inner form tag as div
response write  display none
if  getoutputmarkupid
response write  "
response write getmarkupid
response write  "
response write
/**
*
* @return true if form's method is 'get'
*/
protected boolean encodeurlinhiddenfields
return method_get equalsignorecase getmethod
/**
* append an additional hidden input tag to support anchor tags that can submit a form.
*
* @param markupstream
*            the markup stream
* @param opentag
*            the open tag for the body
*/
@override
public void oncomponenttagbody final markupstream markupstream  final componenttag opentag
if  isrootform
// get the hidden field id
string nameandid   gethiddenfieldid
// render the hidden field
appendingstringbuffer buffer   new appendingstringbuffer hidden_div_start  append
hidden  "
append nameandid
append   id
append nameandid
append    >"
// if it's a get, did put the parameters in the action attribute,
// and have to write the url parameters as hidden fields
if  encodeurlinhiddenfields
string url   getactionurl   tostring
int i   url indexof
string params     i >  1  ? url substring i   1    url  split
writeparamsashiddenfields params  buffer
buffer append
getresponse   write buffer
// if a default submitting component was set, handle the rendering of that
if  defaultsubmittingcomponent instanceof component
final component submittingcomponent    component defaultsubmittingcomponent
if  submittingcomponent isvisibleinhierarchy
submittingcomponent isenabledinhierarchy
appenddefaultbuttonfield markupstream  opentag
// do the rest of the processing
super oncomponenttagbody markupstream  opentag
/**
*
* @param params
* @param buffer
*/
protected void writeparamsashiddenfields string params  appendingstringbuffer buffer
for  string param   params
string pair   strings split param
buffer append  hidden  "
append recode pair
append   value
append pair length > 1 ? recode pair
append    >"
/**
* take url-encoded query string value, unencode it and return html-escaped version
*
* @param s
*            value to reencode
* @return reencoded value
*/
private string recode string s
string un   urldecoder query_instance decode s  getrequest   getcharset
return strings escapemarkup un  tostring
/**
* @see org.apache.wicket.component#ondetach()
*/
@override
protected void ondetach
setflag flag_submitted  false
super ondetach
/**
* method to override if you want to do something special when an error occurs (other than
* simply displaying validation errors).
*/
protected void onerror
@override
protected void onbeforerender
// clear multipart hint, it will be set if necessary by the visitor
this multipart    ~multipart_hint
super onbeforerender
/**
* implemented by subclasses to deal with form submits.
*/
protected void onsubmit
/**
* update the model of all components on this form and nested forms using the fields that were
* sent with the current request. this method only updates models when the form.validate() is
* called first that takes care of the conversion for the formcomponents.
*
* normally this method will not be called when a validation error occurs in one of the form
* components.
*
* @see org.apache.wicket.markup.html.form.formcomponent#updatemodel()
*/
protected final void updateformcomponentmodels
internalupdateformcomponentmodels
updatenestedformcomponentmodels
/**
* update the model of all components on nested forms.
*
* @see #updateformcomponentmodels()
*/
private final void updatenestedformcomponentmodels
visitchildren form class  new ivisitor<form<?>  void>
public void component final form<?> form  final ivisit<void> visit
if  form isenabledinhierarchy      form isvisibleinhierarchy
form internalupdateformcomponentmodels
else
visit dontgodeeper
/**
* update the model of all components on this form.
*
* @see #updateformcomponentmodels()
*/
private void internalupdateformcomponentmodels
formcomponent visitcomponentspostorder this  new formmodelupdatevisitor this
/**
* validates the form by checking required fields, converting raw input and running validators
* for every form component, and last running global form validators. this method is typically
* called before updating any models.
* <p>
* note: in most cases, custom validations on the form can be achieved using an iformvalidator
* that can be added using addvalidator().
* </p>
*/
protected final void validate
// since this method can be called directly by users, this additional check is needed
if  isenabledinhierarchy      isvisibleinhierarchy
validatenestedforms
validatecomponents
validateformvalidators
onvalidate
/**
* callback during the validation stage of the form
*/
protected void onvalidate
/**
* called after form components have updated their models. this is a late-stage validation that
* allows outside frameworks to validate any beans that the form is updating.
*
* this validation method is not preferred because at this point any errors will not unroll any
* changes to the model object, so the model object is in a modified state potentially
* containing illegal values. however, with external frameworks there may not be an alternate
* way to validate the model object. a good example of this is a jsr303 bean validator
* validating the model object to check any class-level constraints, in order to check such
* constaints the model object must contain the values set by the user.
*/
protected void onvalidatemodelobjects
/**
* triggers type conversion on form components
*/
protected final void validatecomponents
visitformcomponentspostorder new validationvisitor
@override
public void validate final formcomponent<?> formcomponent
final form<?> form   formcomponent getform
if  form    form this    form isenabledinhierarchy      form isvisibleinhierarchy
formcomponent validate
/**
* checks if the specified form component visible and is attached to a page
*
* @param fc
*            form component
*
* @return true if the form component and all its parents are visible and there component is in
*         page's hierarchy
*/
private boolean isformcomponentvisibleinpage formcomponent<?> fc
if  fc    null
throw new illegalargumentexception
return fc isvisibleinhierarchy
/**
* validates form with the given form validator
*
* @param validator
*/
protected final void validateformvalidator final iformvalidator validator
args notnull validator
final formcomponent<?> dependents   validator getdependentformcomponents
boolean validate   true
if  dependents    null
for  final formcomponent<?> dependent   dependents
// check if the dependent component is valid
if   dependent isvalid
validate   false
break
// check if the dependent component is visible and is attached to
// the page
else if   isformcomponentvisibleinpage dependent
if  log iswarnenabled
log warn
getpagerelativepath
dependent getid
validate   false
break
if  validate
validator validate this
/**
* triggers any added {@link iformvalidator}s.
*/
protected final void validateformvalidators
for  behavior behavior   getbehaviors
if  behavior instanceof iformvalidator
validateformvalidator  iformvalidator behavior
/**
* validates {@link formcomponent}s as well as {@link iformvalidator}s in nested {@link form}s.
*
* @see #validate()
*/
private void validatenestedforms
visits visitpostorder this  new ivisitor<form<?>  void>
public void component final form<?> form  final ivisit<void> visit
if  form    form this
// skip self, only process children
visit stop
return
if  form isenabledinhierarchy      form isvisibleinhierarchy
form validatecomponents
form validateformvalidators
form onvalidate
new classvisitfilter form class
/**
* allows to customize input names of form components inside this form.
*
* @return string that well be used as prefix to form component input names
*/
protected string getinputnameprefix
return
/**
* gets model
*
* @return model
*/
@suppresswarnings
public final imodel<t> getmodel
return  imodel<t> getdefaultmodel
/**
* sets model
*
* @param model
*/
public final void setmodel imodel<t> model
setdefaultmodel model
/**
* gets model object
*
* @return model object
*/
@suppresswarnings
public final t getmodelobject
return  t getdefaultmodelobject
/**
* sets model object
*
* @param object
*/
public final void setmodelobject t object
setdefaultmodelobject object
/**
* @param component
* @return the parent form for component
*/
public static form<?> findform component component
return component findparent form class
/** {@inheritdoc} */
@override
public void renderhead iheaderresponse response
if   isrootform      ismultipart
// register some metadata so we can later properly handle multipart ajax posts for
// embedded forms
registerjavascriptnamespaces response
response renderjavascript
form class getname         getmarkupid
/**
* produces javascript that registereds wicket.forms namespaces
*
* @param response
*/
protected void registerjavascriptnamespaces iheaderresponse response
response renderjavascript
form class getname
/**
* utility method to assemble an id to distinct form components from different nesting levels.
* useful to generate input names attributes.
*
* @param component
* @return form relative identification string
*/
public static string getrootformrelativeid component component
string id   component getid
final prependingstringbuffer inputname   new prependingstringbuffer id length
component c   component
while  true
inputname prepend id
c   c getparent
if  c    null     c instanceof form<?>      form<?> c  isrootform
c instanceof page
break
inputname prepend component path_separator
id   c getid
/*
* having input name "submit" causes problems with javascript, so we create a unique string
* to replace it by prepending a path separator, as this identification can be assigned to
* an submit form component name
*/
if    equals inputname tostring
inputname prepend component path_separator
return inputname tostring
/**
* response when a submission method mismatch is detected
*
* @see form#getmethod()
*
* @author igor
*/
public static enum methodmismatchresponse
continue  abort