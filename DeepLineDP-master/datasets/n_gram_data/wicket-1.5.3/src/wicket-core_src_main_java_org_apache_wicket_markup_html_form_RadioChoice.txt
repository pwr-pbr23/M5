/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket markup html form
import java util list
import java util map
import org apache wicket markup componenttag
import org apache wicket markup markupstream
import org apache wicket model imodel
import org apache wicket util convert iconverter
import org apache wicket util string appendingstringbuffer
import org apache wicket util string strings
import org apache wicket util value ivaluemap
/**
* a choice subclass that shows choices in radio style.
* <p>
* java:
*
* <pre>
* list sites = arrays.aslist(new string[] { &quot;the server side&quot;, &quot;java lobby&quot;, &quot;java.net&quot; });
* // add a radio choice component that uses input's 'site' property to designate the
* // current selection, and that uses the sites list for the available options.
* form.add(new radiochoice(&quot;site&quot;, sites));
* </pre>
*
* html:
*
* <pre>
*    &lt;span valign=&quot;top&quot; wicket:id=&quot;site&quot;&gt;
*   	&lt;input type=&quot;radio&quot;&gt;site 1&lt;/input&gt;
*   	&lt;input type=&quot;radio&quot;&gt;site 2&lt;/input&gt;
*    &lt;/span&gt;
* </pre>
*
* </p>
*
* <p>
* you can can extend this class and override method wantonselectionchangednotifications() to force
* server roundtrips on each selection change.
* </p>
*
* @author jonathan locke
* @author igor vaynberg (ivaynberg)
*
* @param <t>
*            the model object type
*/
public class radiochoice<t> extends abstractsingleselectchoice<t> implements ionchangelistener
private static final long serialversionuid   1l
private string prefix
private string suffix
/**
* constructor
*
* @param id
*            see component
* @see org.apache.wicket.component#component(string)
* @see org.apache.wicket.markup.html.form.abstractchoice#abstractchoice(string)
*/
public radiochoice final string id
super id
/**
* constructor
*
* @param id
*            see component
* @param choices
*            the list of choices in the radio choice
* @see org.apache.wicket.component#component(string)
* @see org.apache.wicket.markup.html.form.abstractchoice#abstractchoice(string, list)
*/
public radiochoice final string id  final list<? extends t> choices
super id  choices
/**
* constructor
*
* @param id
*            see component
* @param renderer
*            the rendering engine
* @param choices
*            the list of choices in the radio choice
* @see org.apache.wicket.component#component(string)
* @see org.apache.wicket.markup.html.form.abstractchoice#abstractchoice(string,
*      list,ichoicerenderer)
*/
public radiochoice final string id  final list<? extends t> choices
final ichoicerenderer<? super t> renderer
super id  choices  renderer
/**
* constructor
*
* @param id
*            see component
* @param model
*            see component
* @param choices
*            the list of choices in the radio choice
* @see org.apache.wicket.component#component(string, imodel)
* @see org.apache.wicket.markup.html.form.abstractchoice#abstractchoice(string, imodel, list)
*/
public radiochoice final string id  imodel<t> model  final list<? extends t> choices
super id  model  choices
/**
* constructor
*
* @param id
*            see component
* @param model
*            see component
* @param choices
*            the list of choices in the radio choice
* @param renderer
*            the rendering engine
* @see org.apache.wicket.component#component(string, imodel)
* @see org.apache.wicket.markup.html.form.abstractchoice#abstractchoice(string, imodel,
*      list,ichoicerenderer)
*/
public radiochoice final string id  imodel<t> model  final list<? extends t> choices
final ichoicerenderer<? super t> renderer
super id  model  choices  renderer
/**
* constructor
*
* @param id
*            see component
* @param choices
*            the list of choices in the radio choice
* @see org.apache.wicket.component#component(string)
* @see org.apache.wicket.markup.html.form.abstractchoice#abstractchoice(string, imodel)
*/
public radiochoice string id  imodel<? extends list<? extends t>> choices
super id  choices
/**
* constructor
*
* @param id
*            see component
* @param model
*            the model that is updated with changes in this component. see component
* @param choices
*            the list of choices in the radio choice
* @see org.apache.wicket.markup.html.form.abstractchoice#abstractchoice(string, imodel,imodel)
* @see org.apache.wicket.component#component(string, imodel)
*/
public radiochoice string id  imodel<t> model  imodel<? extends list<? extends t>> choices
super id  model  choices
/**
* constructor
*
* @param id
*            see component
* @param choices
*            the list of choices in the radio choice
* @param renderer
*            the rendering engine
* @see org.apache.wicket.markup.html.form.abstractchoice#abstractchoice(string,
*      imodel,ichoicerenderer)
* @see org.apache.wicket.component#component(string)
*/
public radiochoice string id  imodel<? extends list<? extends t>> choices
ichoicerenderer<? super t> renderer
super id  choices  renderer
/**
* constructor
*
* @param id
*            see component
* @param model
*            the model that is updated with changes in this component. see component
* @param choices
*            the list of choices in the radio choice
* @param renderer
*            the rendering engine
* @see org.apache.wicket.component#component(string, imodel)
* @see org.apache.wicket.markup.html.form.abstractchoice#abstractchoice(string, imodel,
*      imodel,ichoicerenderer)
*/
public radiochoice string id  imodel<t> model  imodel<? extends list<? extends t>> choices
ichoicerenderer<? super t> renderer
super id  model  choices  renderer
/**
* @see org.apache.wicket.markup.html.form.formcomponent#oncomponenttag(org.apache.wicket.markup.componenttag)
*/
@override
protected void oncomponenttag componenttag tag
super oncomponenttag tag
// since this component cannot be attached to input tag the name
// variable is illegal
tag remove
/**
* @see org.apache.wicket.markup.html.form.ionchangelistener#onselectionchanged()
*/
public void onselectionchanged
convertinput
updatemodel
onselectionchanged getdefaultmodelobject
/**
* template method that can be overridden by clients that implement ionchangelistener to be
* notified by onchange events of a select element. this method does nothing by default.
* <p>
* called when a option is selected of a dropdown list that wants to be notified of this event.
* this method is to be implemented by clients that want to be notified of selection events.
*
* @param newselection
*            the newly selected object of the backing model note this is the same as you would
*            get by calling getmodelobject() if the new selection were current
*/
protected void onselectionchanged object newselection
/**
* whether this component's onselectionchanged event handler should called using javascript if
* the selection changes. if true, a roundtrip will be generated with each selection change,
* resulting in the model being updated (of just this component) and onselectionchanged being
* called. this method returns false by default.
*
* @return true if this component's onselectionchanged event handler should called using
*         javascript if the selection changes
*/
protected boolean wantonselectionchangednotifications
return false
/**
* @see org.apache.wicket.markupcontainer#getstatelesshint()
*/
@override
protected boolean getstatelesshint
if  wantonselectionchangednotifications
return false
return super getstatelesshint
/**
* @return prefix to use before choice
*/
public string getprefix
return prefix
/**
* @param prefix
*            prefix to use before choice
* @return this
*/
public final radiochoice<t> setprefix string prefix
// tell the page that this component's prefix was changed
addstatechange
this prefix   prefix
return this
/**
* @return separator to use between radio options
*/
public string getsuffix
return suffix
/**
* @param suffix
*            separator to use between radio options
* @return this
*/
public final radiochoice<t> setsuffix string suffix
// tell the page that this component's suffix was changed
addstatechange
this suffix   suffix
return this
/**
* @see org.apache.wicket.component#oncomponenttagbody(markupstream, componenttag)
*/
@suppresswarnings
@override
public final void oncomponenttagbody final markupstream markupstream  final componenttag opentag
// iterate through choices
final list<? extends t> choices   getchoices
// buffer to hold generated body
final appendingstringbuffer buffer   new appendingstringbuffer  choices size     1    70
// the selected value
final string selected   getvalue
// loop through choices
for  int index   0  index < choices size    index
// get next choice
final t choice   choices get index
object displayvalue   getchoicerenderer   getdisplayvalue choice
class<?> objectclass    displayvalue    null ? null   displayvalue getclass
// get label for choice
string label
if  objectclass    null    objectclass    string class
@suppresswarnings
final iconverter converter   getconverter objectclass
label   converter converttostring displayvalue  getlocale
else if  displayvalue    null
label   displayvalue tostring
// if there is a display value for the choice, then we know that the
// choice is automatic in some way. if label is /null/ then we know
// that the choice is a manually created radio tag at some random
// location in the page markup!
if  label    null
// append option suffix
buffer append getprefix
string id   getchoicerenderer   getidvalue choice  index
final string idattr   getmarkupid         id
boolean enabled   isenabledinhierarchy       isdisabled choice  index  selected
// add radio tag
buffer append  "
append getinputname
append  "
append  radio
append  isselected choice  index  selected  ?  checked
append  enabled ?      disabled
append  "
append id
append   id
append idattr
append  "
// should a roundtrip be made (have onselectionchanged called)
// when the option is clicked?
if  wantonselectionchangednotifications
charsequence url   urlfor ionchangelistener interface
form<?> form   findparent form class
if  form    null
buffer append  "
append form getjsforinterfaceurl url
append  "
else
// note: do not encode the url as that would give
// invalid javascript
buffer append  window location href '"
append url
append  url tostring   indexof    >  1 ?          getinputname
append
append id
append  "
// allows user to add attributes to the <input..> tag
ivaluemap attrs   getadditionalattributes index  choice
if  attrs    null
for  map entry<string  object> attr   attrs entryset
buffer append
append attr getkey
append  "
append attr getvalue
append  "
if  getapplication   getdebugsettings   isoutputcomponentpath
string path   getpagerelativepath
path   path replace
path   path replace
buffer append  "
append path
append
append index
append  "
buffer append
// add label for radio button
string display   label
if  localizedisplayvalues
display   getlocalizer   getstring label  this  label
charsequence escaped   display
if  getescapemodelstrings
escaped   strings escapemarkup display
buffer append  "
append idattr
append  >"
append escaped
append
// append option suffix
buffer append getsuffix
// replace body
replacecomponenttagbody markupstream  opentag  buffer
/**
* you may subclass this method to provide additional attributes to the &lt;input ..&gt; tag.
*
* @param index
* @param choice
* @return tag attribute name/value pairs.
*/
protected ivaluemap getadditionalattributes final int index  final t choice
return null