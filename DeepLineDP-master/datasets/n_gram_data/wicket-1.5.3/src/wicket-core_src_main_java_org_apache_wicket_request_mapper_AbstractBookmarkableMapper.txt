/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket request mapper
import org apache wicket requestlistenerinterface
import org apache wicket request irequesthandler
import org apache wicket request irequesthandlerdelegate
import org apache wicket request irequestmapper
import org apache wicket request request
import org apache wicket request url
import org apache wicket request component irequestablepage
import org apache wicket request handler bookmarkablelistenerinterfacerequesthandler
import org apache wicket request handler bookmarkablepagerequesthandler
import org apache wicket request handler listenerinterfacerequesthandler
import org apache wicket request handler pageandcomponentprovider
import org apache wicket request handler pageprovider
import org apache wicket request handler renderpagerequesthandler
import org apache wicket request http webrequest
import org apache wicket request mapper info componentinfo
import org apache wicket request mapper info pagecomponentinfo
import org apache wicket request mapper info pageinfo
import org apache wicket request mapper parameter pageparameters
import org apache wicket util lang args
import org slf4j logger
import org slf4j loggerfactory
/**
* abstract encoder for bookmarkable, hybrid and bookmarkablelistenerinterface urls.
*
* @author matej knopp
*/
public abstract class abstractbookmarkablemapper extends abstractcomponentmapper
private static logger logger   loggerfactory getlogger abstractbookmarkablemapper class
/**
* represents information stored in url.
*
* @author matej knopp
*/
protected static final class urlinfo
private final pagecomponentinfo pagecomponentinfo
private final pageparameters pageparameters
private final class<? extends irequestablepage> pageclass
/**
* construct.
*
* @param pagecomponentinfo
*            optional parameter providing the page instance and component information
* @param pageclass
*            mandatory parameter
* @param pageparameters
*            optional parameter providing pageparameters
*/
public urlinfo pagecomponentinfo pagecomponentinfo
class<? extends irequestablepage> pageclass  pageparameters pageparameters
args notnull pageclass
this pagecomponentinfo   pagecomponentinfo
this pageparameters   cleanpageparameters pageparameters
this pageclass   pageclass
/**
* cleans the original parameters from entries used by wicket internals.
*
* @param originalparameters
*            the current request's non-modified parameters
* @return all parameters but wicket internal ones
*/
private pageparameters cleanpageparameters final pageparameters originalparameters
pageparameters cleanparameters   null
if  originalparameters    null
cleanparameters   new pageparameters originalparameters
// wicket-4038: ajax related parameters are set by wicket-ajax.js when needed.
// they shouldn't be propagated to the next requests
cleanparameters remove webrequest param_ajax
cleanparameters remove webrequest param_ajax_base_url
cleanparameters remove webrequest param_ajax_request_anti_cache
return cleanparameters
/**
* @return pagecomponentinfo instance or <code>null</code>
*/
public pagecomponentinfo getpagecomponentinfo
return pagecomponentinfo
/**
* @return page class
*/
public class<? extends irequestablepage> getpageclass
return pageclass
/**
* @return pageparameters instance (never <code>null</code>)
*/
public pageparameters getpageparameters
return pageparameters
/**
* construct.
*/
public abstractbookmarkablemapper
/**
* parse the given request to an {@link urlinfo} instance.
*
* @param request
* @return urlinfo instance or <code>null</code> if this encoder can not handle the request
*/
protected abstract urlinfo parserequest request request
/**
* builds url for the given {@link urlinfo} instance. the url this method produces must be
* parseable by the {@link #parserequest(request)} method.
*
* @param info
* @return url result url
*/
protected abstract url buildurl urlinfo info
/**
* indicates whether hybrid {@link renderpagerequesthandler} url for page will be generated only
* if page has been created with bookmarkable url.
* <p>
* for generic bookmarkable encoders this method should return <code>true</code>. for explicit
* (mounted) encoders this method should return <code>false</code>
*
* @return <code>true</code> if hybrid url requires page created bookmarkable,
*         <code>false</code> otherwise.
*/
protected abstract boolean pagemusthavebeencreatedbookmarkable
/**
* @see irequestmapper#getcompatibilityscore(request)
*/
public abstract int getcompatibilityscore request request
/**
* creates a {@code irequesthandler} that processes a bookmarkable request.
*
* @param pageclass
* @param pageparameters
* @return a {@code irequesthandler} capable of processing the bookmarkable request.
*/
protected irequesthandler processbookmarkable class<? extends irequestablepage> pageclass
pageparameters pageparameters
pageprovider provider   new pageprovider pageclass  pageparameters
provider setpagesource getcontext
return new renderpagerequesthandler provider
/**
* creates a {@code irequesthandler} that processes a hybrid request. when the page identified
* by {@code pageinfo} was not available, the request should be treated as a bookmarkable
* request.
*
* @param pageinfo
* @param pageclass
* @param pageparameters
* @param rendercount
* @return a {@code irequesthandler} capable of processing the hybrid request.
*/
protected irequesthandler processhybrid pageinfo pageinfo
class<? extends irequestablepage> pageclass  pageparameters pageparameters
integer rendercount
pageprovider provider   new pageprovider pageinfo getpageid    pageclass  pageparameters
rendercount
provider setpagesource getcontext
return new renderpagerequesthandler provider
/**
* creates a {@code irequesthandler} that processes a listener request.
*
* @param pagecomponentinfo
* @param pageclass
* @param pageparameters
* @return a {@code irequesthandler} that invokes the listener interface
*/
protected irequesthandler processlistener pagecomponentinfo pagecomponentinfo
class<? extends irequestablepage> pageclass  pageparameters pageparameters
pageinfo pageinfo   pagecomponentinfo getpageinfo
componentinfo componentinfo   pagecomponentinfo getcomponentinfo
integer rendercount   null
requestlistenerinterface listenerinterface   null
if  componentinfo    null
rendercount   componentinfo getrendercount
listenerinterface   requestlistenerinterfacefromstring componentinfo getlistenerinterface
if  listenerinterface    null
pageandcomponentprovider provider   new pageandcomponentprovider pageinfo getpageid
pageclass  pageparameters  rendercount  componentinfo getcomponentpath
provider setpagesource getcontext
return new listenerinterfacerequesthandler provider  listenerinterface
componentinfo getbehaviorid
else
if  logger iswarnenabled
if  componentinfo    null
logger warn
componentinfo getlistenerinterface
else
logger warn
pagecomponentinfo
return null
/**
* @see org.apache.wicket.request.irequestmapper#maprequest(org.apache.wicket.request.request)
*/
public irequesthandler maprequest request request
urlinfo urlinfo   parserequest request
// check if the url is long enough and starts with the proper segments
if  urlinfo    null
pagecomponentinfo info   urlinfo getpagecomponentinfo
class<? extends irequestablepage> pageclass   urlinfo getpageclass
pageparameters pageparameters   urlinfo getpageparameters
if  info    null    info getpageinfo   getpageid      null
// if there are is no page instance information (only page map name - optionally)
// then this is a simple bookmarkable url
return processbookmarkable pageclass  pageparameters
else if  info getpageinfo   getpageid      null    info getcomponentinfo      null
// if there is page instance information in the url but no component and listener
// interface then this is a hybrid url - we need to try to reuse existing page
// instance
return processhybrid info getpageinfo    pageclass  pageparameters  null
else if  info getcomponentinfo      null
// with both page instance and component+listener this is a listener interface url
return processlistener info  pageclass  pageparameters
return null
protected boolean checkpageclass class<? extends irequestablepage> pageclass
return true
/**
* {@inheritdoc}
*/
public url maphandler irequesthandler requesthandler
// todo see if we can refactor this to remove dependency on instanceof checks below and
// eliminate the need for irequesthandlerdelegate
while  requesthandler instanceof irequesthandlerdelegate
requesthandler     irequesthandlerdelegate requesthandler  getdelegatehandler
if  requesthandler instanceof bookmarkablepagerequesthandler
// simple bookmarkable url with no page instance information
bookmarkablepagerequesthandler handler    bookmarkablepagerequesthandler requesthandler
if   checkpageclass handler getpageclass
return null
pageinfo info   new pageinfo
urlinfo urlinfo   new urlinfo new pagecomponentinfo info  null
handler getpageclass    handler getpageparameters
return buildurl urlinfo
else if  requesthandler instanceof renderpagerequesthandler
// possibly hybrid url - bookmarkable url with page instance information
// but only allowed if the page was created by bookmarkable url
renderpagerequesthandler handler    renderpagerequesthandler requesthandler
if   checkpageclass handler getpageclass
return null
if  handler getpageprovider   isnewpageinstance
// no existing page instance available, don't bother creating new page instance
pageinfo info   new pageinfo
urlinfo urlinfo   new urlinfo new pagecomponentinfo info  null
handler getpageclass    handler getpageparameters
return buildurl urlinfo
irequestablepage page   handler getpage
if   pagemusthavebeencreatedbookmarkable      page wascreatedbookmarkable
pageinfo info   null
if   page ispagestateless
info   new pageinfo page getpageid
pagecomponentinfo pagecomponentinfo   info    null ? new pagecomponentinfo info
null    null
urlinfo urlinfo   new urlinfo pagecomponentinfo  page getclass
handler getpageparameters
return buildurl urlinfo
else
return null
else if  requesthandler instanceof bookmarkablelistenerinterfacerequesthandler
// listener interface url with page class information
bookmarkablelistenerinterfacerequesthandler handler    bookmarkablelistenerinterfacerequesthandler requesthandler
class<? extends irequestablepage> pageclass   handler getpageclass
if   checkpageclass pageclass
return null
integer rendercount   null
if  handler getlistenerinterface   isincluderendercount
rendercount   handler getrendercount
pageinfo pageinfo   new pageinfo handler getpageid
componentinfo componentinfo   new componentinfo rendercount
requestlistenerinterfacetostring handler getlistenerinterface
handler getcomponentpath    handler getbehaviorindex
urlinfo urlinfo   new urlinfo new pagecomponentinfo pageinfo  componentinfo
pageclass  handler getpageparameters
return buildurl urlinfo
return null