/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket resource aggregation
import java util arraylist
import java util comparator
import java util linkedhashset
import java util list
import java util map entry
import java util set
import java util sortedmap
import java util treemap
import org apache wicket markup html decoratingheaderresponse
import org apache wicket markup html iheaderresponse
import org apache wicket request mapper parameter pageparameters
import org apache wicket request resource iresource
import org apache wicket request resource resourcereference
import org apache wicket resource resourceutil
import org apache wicket resource dependencies abstractresourcedependentresourcereference resourcetype
/**
* a header response that can be used to aggregate resources (primarily resource references) into
* groups that can be rendered after the entire hierarchy of iheadercontributors have been
* traversed. a subclass of this could use that group to render a single url to some aggregating
* servlet (for example) that could cut down on the number of http requests the client must make.
*
* resource references are aggregated according to the key that your subclass creates in the
* {@link #newgroupingkey(resourcereferenceandstringdata)}. this key is used in a map, so it needs
* to properly implement hashcode and equals.
*
* if your key does not implement comparable&lt;keyclass&gt;, you need to also return a comparator
* for it from the {@link #getgroupingkeycomparator()} method.
*
* @author jeremy thomerson
* @param <r>
*            the type of resourcereferencecollection returned by
*            {@link #newresourcereferencecollection(object)} and passed to all the methods that
*            take a resourcereferencecollection. you will typically just use
*            resourcereferencecollection for this param, unless you are returning a specific type
*            of resourcereferencecollection from your subclass.
* @param <k>
*            the class of the key that you will create from
*            {@link #newgroupingkey(resourcereferenceandstringdata)}
*/
public abstract class abstractresourceaggregatingheaderresponse<r extends resourcereferencecollection  k>
extends decoratingheaderresponse
private final list<resourcereferenceandstringdata> toplevelreferences   new arraylist<resourcereferenceandstringdata>
/**
* construct.
*
* @param real
*            the wrapped header response
*/
public abstractresourceaggregatingheaderresponse iheaderresponse real
super real
@override
public void renderjavascriptreference resourcereference reference
toplevelreferences add new resourcereferenceandstringdata reference  null  null  null
resourcetype js  false  null  null
@override
public void renderjavascriptreference resourcereference reference  string id
toplevelreferences add new resourcereferenceandstringdata reference  null  null  id
resourcetype js  false  null  null
@override
public void rendercssreference resourcereference reference
toplevelreferences add new resourcereferenceandstringdata reference  null  null  null
resourcetype css  false  null  null
@override
public void rendercssreference resourcereference reference  string media
toplevelreferences add new resourcereferenceandstringdata reference  null  null  media
resourcetype css  false  null  null
@override
public void close
// up until now, no resourcereference objects have been passed to the real response. we need
// to group them into top-level groups and then render those groups
sortedmap<k  r> map   new treemap<k  r> getgroupingkeycomparator
for  resourcereferenceandstringdata ref   toplevelreferences
k key   newgroupingkey ref
r coll   map get key
if  coll    null
map put key  coll   newresourcereferencecollection key
coll add ref
// now, render our groups to the real response
set<resourcereferenceandstringdata> alreadyrendered   new linkedhashset<resourcereferenceandstringdata>
for  entry<k  r> entry   map entryset
rendercollection alreadyrendered  entry getkey    entry getvalue
onallcollectionsrendered toplevelreferences
// finally, we close the real response
super close
/* methods designed to be overridden if needed */
/**
* creates a resourcereferencecollection. if you want a specific type of
* resourcereferencecollection for your subclass of
* {@link abstractresourceaggregatingheaderresponse}, override this method.
*
* note that because of the generics definition, you will probably have to cast to r. r is the
* parameter used when creating your subclass defining the type of resourcereferencecollection
* this returns and is passed into all methods that take a resourcereferencecollection
*
* @param key
*            the grouping key that will be used for this collection. all references added to it
*            will have the same key
* @return a newly created collection to contain resource references
*/
@suppresswarnings
protected r newresourcereferencecollection k key
return  r new resourcereferencecollection
/**
* this key is what is used to determine how to group (or aggregate) your resources. it must
* implement equals and hashcode correctly so that it can be used as a key in a hashmap. these
* methods must be implemented so that if two references are given over the course of the
* hierarchy traversal, and those two references should be grouped (or aggregated), the keys
* returned for each should equal each other and their hash codes should be equal as well.
*
* typical implementations should use whether or not the resource reference is css as their
* first grouping parameter, since you don't want to render js and css in the same tag (one
* needs to be in a link tag and one in a script tag).
*
* note that if your grouping key class (k) does not implement comparable&lt;k&gt;, you must
* also override {@link #getgroupingkeycomparator()} and return a valid comparator that sorts
* keys in the order you want references rendered.
*
* @param ref
*            the resource reference with associated data that came from the render*reference
*            methods
* @return a new key used to group the references.
*/
protected abstract k newgroupingkey resourcereferenceandstringdata ref
/**
* this comparator is used to sort the grouping keys that you return from
* {@link #newgroupingkey(resourcereferenceandstringdata)}.
*
* note that if your grouping key class (k) implements comparable&lt;k&gt;, you do not need to
* override this method.
*
* @return a comparator for k
*/
protected comparator<k> getgroupingkeycomparator
return null
/**
* when the entire hierarchy has been traversed and {@link #close()} is called, we loop through
* the grouped collections and render them in this method. this method is typically overridden
* to render your collection how you want to render them.
*
* for instance, if you want to aggregate your groups into a single http request, you can
* override this method, create the url to your aggregation servlet (or {@link iresource}), and
* then call <tt>getrealresponse().renderjavascriptreference(yoururl)</tt>, or the appropriate
* method to render the url for a group of css references.
*
* @param alreadyrendered
*            a set of resource references that have already been rendered in other groups
* @param key
*            they grouping key for this group
* @param coll
*            the collection of resource references to render
*/
protected void rendercollection set<resourcereferenceandstringdata> alreadyrendered  k key
r coll
for  resourcereferenceandstringdata data   coll
renderifnotalreadyrendered alreadyrendered  data
/**
* renders a single resource reference, only if it has not already been rendered. note that you
* will typically not need to override this method. you should typically override
* {@link #render(resourcereferenceandstringdata)} directly, which is called from this method if
* the resource reference has not been rendered elsewhere.
*
* @param alreadyrendered
*            the set of references that have already been rendered in other groups
* @param data
*            the reference (and associated data) to conditionally render.
*/
protected void renderifnotalreadyrendered set<resourcereferenceandstringdata> alreadyrendered
resourcereferenceandstringdata data
if   alreadyrendered contains data
render data
alreadyrendered add data
/**
* renders a single resource reference. this is called from
* {@link #renderifnotalreadyrendered(set, resourcereferenceandstringdata)} for references that
* had not been rendered elsewhere.
*
* @param data
*            the reference (and associated data) to conditionally render.
*/
protected void render resourcereferenceandstringdata data
resourceutil renderto getrealresponse    data
/**
* after all the collections have been rendered, we call this callback so your subclass can add
* any other logic as needed. for instance, if you are aggregating yui resources, your
* {@link #rendercollection(set, object, resourcereferencecollection)} method might have
* rendered only a yui constructor that loaded all the js files for each group. then, you need
* to loop through the references again, and render any js inside a sandboxed yui.use()
* statement. you would render those here by creating the yui.use statement, and call
* <tt>getheaderresponse().renderjavascript(yourjs, null)</tt>
*
* @param alltoplevelreferences
*            all the references that were rendered by the developers
*/
protected void onallcollectionsrendered
list<resourcereferenceandstringdata> alltoplevelreferences
/* other interface methods: */
@override
public void renderjavascriptreference string url
toplevelreferences add new resourcereferenceandstringdata null  null  url  null
resourcetype js  false  null  null
@override
public void renderjavascriptreference string url  string id
toplevelreferences add new resourcereferenceandstringdata null  null  url  id
resourcetype js  false  null  null
@override
public void rendercssreference string url
toplevelreferences add new resourcereferenceandstringdata null  null  url  null
resourcetype css  false  null  null
@override
public void rendercssreference string url  string media
toplevelreferences add new resourcereferenceandstringdata null  null  url  media
resourcetype css  false  null  null
@override
public void renderjavascriptreference resourcereference reference  pageparameters parameters
string id
toplevelreferences add new resourcereferenceandstringdata reference  parameters  null  id
resourcetype js  false  null  null
@override
public void renderjavascriptreference resourcereference reference  pageparameters parameters
string id  boolean defer
toplevelreferences add new resourcereferenceandstringdata reference  parameters  null  id
resourcetype js  defer  null  null
@override
public void renderjavascriptreference resourcereference reference  pageparameters parameters
string id  boolean defer  string charset
toplevelreferences add new resourcereferenceandstringdata reference  parameters  null  id
resourcetype js  defer  charset  null
@override
public void renderjavascriptreference string url  string id  boolean defer
toplevelreferences add new resourcereferenceandstringdata null  null  url  null
resourcetype js  defer  null  null
@override
public void renderjavascriptreference string url  string id  boolean defer  string charset
toplevelreferences add new resourcereferenceandstringdata null  null  url  id
resourcetype js  defer  charset  null
@override
public void renderjavascript charsequence javascript  string id
toplevelreferences add new resourcereferenceandstringdata javascript  resourcetype js  id
@override
public void rendercss charsequence css  string media
toplevelreferences add new resourcereferenceandstringdata css  resourcetype css  media
@override
public void rendercssreference resourcereference reference  pageparameters pageparameters
string media
toplevelreferences add new resourcereferenceandstringdata reference  pageparameters  null
media  resourcetype css  false  null  null
@override
public void rendercssreference resourcereference reference  pageparameters pageparameters
string media  string condition
toplevelreferences add new resourcereferenceandstringdata reference  null  null  media
resourcetype css  false  null  condition
@override
public void rendercssreference string url  string media  string condition
toplevelreferences add new resourcereferenceandstringdata null  null  url  media
resourcetype css  false  null  condition
@override
public void renderstring charsequence string
toplevelreferences add new resourcereferenceandstringdata string  resourcetype plain  null
@override
public void renderondomreadyjavascript string javascript
super renderondomreadyjavascript javascript
@override
public void renderonloadjavascript string javascript
super renderonloadjavascript javascript
@override
public void renderoneventjavascript string target  string event  string javascript
super renderoneventjavascript target  event  javascript