/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket protocol http mock
import java io bytearrayoutputstream
import java io ioexception
import java io printwriter
import java io stringwriter
import java text dateformat
import java util arraylist
import java util calendar
import java util collection
import java util collections
import java util date
import java util gregoriancalendar
import java util list
import java util locale
import java util set
import java util timezone
import javax servlet servletoutputstream
import javax servlet http cookie
import javax servlet http httpservletresponse
import org apache wicket protocol http imetadatabufferingwebresponse
import org apache wicket request http webresponse
import org apache wicket util value valuemap
/**
* mock servlet response. implements all of the methods from the standard httpservletresponse class
* plus helper methods to aid viewing the generated response.
*
* @author chris turner
*/
public class mockhttpservletresponse implements httpservletresponse  imetadatabufferingwebresponse
private static final int mode_binary   1
private static final int mode_none   0
private static final int mode_text   2
private bytearrayoutputstream bytestream
private string characterencoding
private final list<cookie> cookies   new arraylist<cookie>
private string errormessage   null
private final valuemap headers   new valuemap
private locale locale   null
private int mode   mode_none
private printwriter printwriter
private string redirectlocation   null
private servletoutputstream servletstream
private int status   httpservletresponse sc_ok
private stringwriter stringwriter
private final mockhttpservletrequest servletrequest
/**
* create the response object.
*
* @param servletrequest
*/
public mockhttpservletresponse mockhttpservletrequest servletrequest
this servletrequest   servletrequest
initialize
/**
* add a cookie to the response.
*
* @param cookie
*            the cookie to add
*/
public void addcookie final cookie cookie
// remove any potential duplicates
cookies remove cookie
cookies add cookie
/**
* add a date header.
*
* @param name
*            the header value
* @param l
*            the long value
*/
public void adddateheader string name  long l
dateformat df   dateformat getdateinstance dateformat full
addheader name  df format new date l
/**
* add the given header value, including an additional entry if one already exists.
*
* @param name
*            the name for the header
* @param value
*            the value for the header
*/
@suppresswarnings
public void addheader final string name  final string value
list<string> list    list<string> headers get name
if  list    null
list   new arraylist<string> 1
headers put name  list
list add value
/**
* add an int header value.
*
* @param name
*            the header name
* @param i
*            the value
*/
public void addintheader final string name  final int i
addheader name      i
/**
* check if the response contains the given header name.
*
* @param name
*            the name to check
* @return whether header in response or not
*/
public boolean containsheader final string name
return headers containskey name
/**
* encode the redirectlocation url. does no changes as this test implementation uses cookie
* based url tracking.
*
* @param url
*            the url to encode
* @return the encoded url
*/
public string encoderedirecturl final string url
return url
/**
* encode the redirectlocation url. does no changes as this test implementation uses cookie
* based url tracking.
*
* @param url
*            the url to encode
* @return the encoded url
*/
public string encoderedirecturl final string url
return url
/**
* encode the url. does no changes as this test implementation uses cookie based url tracking.
*
* @param url
*            the url to encode
* @return the encoded url
*/
public string encodeurl final string url
return url
/**
* encode the url. does no changes as this test implementation uses cookie based url tracking.
*
* @param url
*            the url to encode
* @return the encoded url
*/
public string encodeurl final string url
return url
/**
* flush the buffer.
*
* @throws ioexception
*/
public void flushbuffer   throws ioexception
/**
* get the binary content that was written to the servlet stream.
*
* @return the binary content
*/
public byte getbinarycontent
return bytestream tobytearray
/**
* return the current buffer size
*
* @return the buffer size
*/
public int getbuffersize
if  mode    mode_none
return 0
else if  mode    mode_binary
return bytestream size
else
return stringwriter getbuffer   length
/**
* get the character encoding of the response.
*
* @return the character encoding
*/
public string getcharacterencoding
return characterencoding
/**
* get all of the cookies that have been added to the response.
*
* @return the collection of cookies
*/
public list<cookie> getcookies
return cookies
/**
* get the text document that was written as part of this response.
*
* @return the document
*/
public string getdocument
if  mode    mode_binary
return new string bytestream tobytearray
else
return stringwriter getbuffer   tostring
/**
* get the error message.
*
* @return the error message, or null if no message
*/
public string geterrormessage
return errormessage
/**
* return the value of the given named header.
*
* @param name
*            the header name
* @return the value, or null
*/
@suppresswarnings
public string getheader final string name
list<string> l    list<string> headers get name
if  l    null    l size   < 1
return null
else
return l get 0
/**
* get the names of all of the headers.
*
* @return the header names
*/
public set<string> getheadernames
return headers keyset
/**
* get the encoded locale
*
* @return the locale
*/
public locale getlocale
return locale
/**
* get the output stream for writing binary data from the servlet.
*
* @return the binary output stream.
*/
public servletoutputstream getoutputstream
if  mode    mode_text
throw new illegalargumentexception
mode   mode_binary
return servletstream
/**
* get the location that was redirected to.
*
* @return the redirect location, or null if not a redirect
*/
public string getredirectlocation
return redirectlocation
/**
* get the status code.
*
* @return the status code
*/
public int getstatus
return status
/**
* get the print writer for writing text output for this response.
*
* @return the writer
* @throws ioexception
*             not used
*/
public printwriter getwriter   throws ioexception
if  mode    mode_binary
throw new illegalargumentexception
mode   mode_text
return printwriter
/**
* reset the response ready for reuse.
*/
public void initialize
cookies clear
headers clear
errormessage   null
redirectlocation   null
status   httpservletresponse sc_ok
characterencoding
locale   null
bytestream   new bytearrayoutputstream
servletstream   new servletoutputstream
@override
public void write int b
bytestream write b
stringwriter   new stringwriter
printwriter   new printwriter stringwriter
@override
public void close
// do nothing
@override
public void flush
// do nothing
mode   mode_none
/**
* always returns false.
*
* @return always false
*/
public boolean iscommitted
return false
/**
* return whether the servlet returned an error code or not.
*
* @return whether an error occurred or not
*/
public boolean iserror
return  status    httpservletresponse sc_ok
/**
* check whether the response was redirected or not.
*
* @return whether the state was redirected or not
*/
public boolean isredirect
return  redirectlocation    null
/**
* delegate to initialize method.
*/
public void reset
initialize
/**
* clears the buffer.
*/
public void resetbuffer
if  mode    mode_binary
bytestream reset
else if  mode    mode_text
stringwriter getbuffer   delete 0  stringwriter getbuffer   length
/**
* send an error code. this implementation just sets the internal error state information.
*
* @param code
*            the code
* @throws ioexception
*             not used
*/
public void senderror final int code  throws ioexception
status   code
errormessage   null
/**
* send an error code. this implementation just sets the internal error state information.
*
* @param code
*            the error code
* @param msg
*            the error message
* @throws ioexception
*             not used
*/
public void senderror final int code  final string msg  throws ioexception
status   code
errormessage   msg
/**
* @return url
* @see org.apache.wicket.request.request#geturl()
*/
private string geturl
/*
* servlet 2.3 specification :
*
* servlet path: the path section that directly corresponds to the mapping which activated
* this request. this path starts with a "/" character except in the case where the request
* is matched with the "/*" pattern, in which case it is the empty string.
*
* pathinfo: the part of the request path that is not part of the context path or the
* servlet path. it is either null if there is no extra path, or is a string with a leading
* "/".
*/
string url   servletrequest getservletpath
final string pathinfo   servletrequest getpathinfo
if  pathinfo    null
url    pathinfo
final string querystring   servletrequest getquerystring
if  querystring    null
url         querystring
// if url is non-empty it will start with '/', which we should lose
if  url length   > 0    url charat 0
// remove leading '/'
url   url substring 1
return url
/**
* indicate sending of a redirectlocation to a particular named resource. this implementation
* just keeps hold of the redirectlocation info and makes it available for query.
*
* @param location
*            the location to redirectlocation to
* @throws ioexception
*             not used
*/
public void sendredirect string location  throws ioexception
redirectlocation   location
/**
* method ignored.
*
* @param size
*            the size
*/
public void setbuffersize final int size
/**
* set the character encoding.
*
* @param characterencoding
*            the character encoding
*/
public void setcharacterencoding final string characterencoding
this characterencoding   characterencoding
/**
* set the content length.
*
* @param length
*            the length
*/
public void setcontentlength final int length
setintheader    length
/**
* set the content type.
*
* @param type
*            the content type
*/
public void setcontenttype final string type
setheader    type
/**
* @return value of content-type header
*/
public string getcontenttype
return getheader
/**
* set a date header.
*
* @param name
*            the header name
* @param l
*            the long value
*/
public void setdateheader final string name  final long l
setheader name  formatdate l
/**
* @param l
* @return formatted date
*/
public static string formatdate long l
stringbuilder _datebuffer   new stringbuilder 32
calendar _calendar   new gregoriancalendar timezone gettimezone
_calendar settimeinmillis l
formatdate _datebuffer  _calendar  false
return _datebuffer tostring
/* begin: this code comes from jetty 6.1.1 */
private static string days
private static string months
/**
* format http date "eee, dd mmm yyyy hh:mm:ss 'gmt'" or "eee, dd-mmm-yy hh:mm:ss 'gmt'"for
* cookies
*
* @param buf
* @param calendar
* @param cookie
*/
public static void formatdate stringbuilder buf  calendar calendar  boolean cookie
// "eee, dd mmm yyyy hh:mm:ss 'gmt'"
// "eee, dd-mmm-yy hh:mm:ss 'gmt'", cookie
int day_of_week   calendar get calendar day_of_week
int day_of_month   calendar get calendar day_of_month
int month   calendar get calendar month
int year   calendar get calendar year
int century   year   100
year   year % 100
int epoch    int   calendar gettimeinmillis     1000  %  60   60   24
int seconds   epoch % 60
epoch   epoch   60
int minutes   epoch % 60
int hours   epoch   60
buf append days
buf append
buf append
append2digits buf  day_of_month
if  cookie
buf append
buf append months
buf append
append2digits buf  year
else
buf append
buf append months
buf append
append2digits buf  century
append2digits buf  year
buf append
append2digits buf  hours
buf append
append2digits buf  minutes
buf append
append2digits buf  seconds
buf append
/**
* @param buf
* @param i
*/
public static void append2digits stringbuilder buf  int i
if  i < 100
buf append  char  i   10
buf append  char  i % 10
/* end: this code comes from jetty 6.1.1 */
/**
* set the given header value.
*
* @param name
*            the name for the header
* @param value
*            the value for the header
*/
public void setheader final string name  final string value
list<string> l   new arraylist<string> 1
l add value
headers put name  l
/**
* set an int header value.
*
* @param name
*            the header name
* @param i
*            the value
*/
public void setintheader final string name  final int i
setheader name      i
/**
* set the locale in the response header.
*
* @param locale
*            the locale
*/
public void setlocale final locale locale
this locale   locale
/**
* set the status for this response.
*
* @param status
*            the status
*/
public void setstatus final int status
this status   status
/**
* set the status for this response.
*
* @param status
*            the status
* @param msg
*            the message
* @deprecated
*/
@deprecated
public void setstatus final int status  final string msg
setstatus status
/**
* @deprecated use {@link #getdocument()}
* @return response as string
*/
@deprecated
public string gettextresponse
return getdocument
/**
* @return binary response
*/
public string getbinaryresponse
string ctheader   getheader
if  ctheader    null
return getdocument
else
return getdocument   substring 0  integer valueof ctheader
/**
* @param name
* @return headers with given name
*/
public collection<string> getheaders string name
return collections singletonlist headers get name  tostring
public void writemetadata webresponse webresponse
for  cookie cookie   cookies
webresponse addcookie cookie
for  string name   headers keyset
webresponse setheader name  headers get name  tostring
webresponse setstatus status