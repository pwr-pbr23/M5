/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket serialize java
import java io bytearrayinputstream
import java io bytearrayoutputstream
import java io ioexception
import java io inputstream
import java io notserializableexception
import java io objectinputstream
import java io objectoutputstream
import java io objectstreamclass
import java io outputstream
import org apache wicket application
import org apache wicket threadcontext
import org apache wicket wicketruntimeexception
import org apache wicket application iclassresolver
import org apache wicket serialize iserializer
import org apache wicket settings iapplicationsettings
import org apache wicket util io ioutils
import org apache wicket util io serializablechecker
import org slf4j logger
import org slf4j loggerfactory
/**
* an implementation of {@link iserializer} based on java serialization (objectoutputstream,
* objectinputstream)
*
* requires the application key to enable serialization and deserialisation outside thread in which
* application thread local is set
*
* @see iobjectstreamfactory
*/
public class javaserializer implements iserializer
private static final logger log   loggerfactory getlogger javaserializer class
/**
* the key of the application which can be used later to find the proper {@link iclassresolver}
*/
private final string applicationkey
/**
* construct.
*
* @param applicationkey
*/
public javaserializer final string applicationkey
this applicationkey   applicationkey
public byte serialize final object object
try
final bytearrayoutputstream out   new bytearrayoutputstream
objectoutputstream oos   null
try
oos   newobjectoutputstream out
oos writeobject applicationkey
oos writeobject object
finally
try
ioutils close oos
finally
out close
return out tobytearray
catch  exception e
log error     object getclass         object
e
return null
public object deserialize final byte data
threadcontext old   threadcontext get false
final bytearrayinputstream in   new bytearrayinputstream data
objectinputstream ois   null
try
application oldapplication   threadcontext getapplication
try
ois   newobjectinputstream in
string applicationname    string ois readobject
if  applicationname    null
application app   application get applicationname
if  app    null
threadcontext setapplication app
return ois readobject
finally
try
threadcontext setapplication oldapplication
ioutils close ois
finally
in close
catch  classnotfoundexception e
throw new runtimeexception     ois getclass    e
catch  ioexception e
throw new runtimeexception     ois getclass    e
finally
threadcontext restore old
/**
* gets a new instance of an {@link objectinputstream} with the provided {@link inputstream}.
*
* @param in
*            the input stream that should be used for the reading
* @return a new object input stream instance
* @throws ioexception
*             if an i/o error occurs while reading stream header
*/
protected objectinputstream newobjectinputstream inputstream in  throws ioexception
return new classresolverobjectinputstream in
/**
* gets a new instance of an {@link objectoutputstream} with the provided {@link outputstream}.
*
* @param out
*            the output stream that should be used for the writing
* @return a new object output stream instance
* @throws ioexception
*             if an i/o error occurs while writing stream header
*/
protected objectoutputstream newobjectoutputstream outputstream out  throws ioexception
return new checkerobjectoutputstream out
/**
* extend {@link objectinputstream} to add framework class resolution logic.
*/
private static class classresolverobjectinputstream extends objectinputstream
public classresolverobjectinputstream inputstream in  throws ioexception
super in
// this override is required to resolve classes inside in different bundle, i.e.
// the classes can be resolved by osgi classresolver implementation
@override
protected class<?> resolveclass objectstreamclass desc  throws ioexception
classnotfoundexception
string classname   desc getname
try
return super resolveclass desc
catch  classnotfoundexception ex1
// ignore this exception.
log debug
class<?> candidate   null
try
// can the application always be taken??
// should be if serialization happened in thread with application set
// (wicket-2195)
application application   application get
iapplicationsettings applicationsettings   application getapplicationsettings
iclassresolver classresolver   applicationsettings getclassresolver
candidate   classresolver resolveclass classname
if  candidate    null
candidate   super resolveclass desc
catch  wicketruntimeexception ex
if  ex getcause   instanceof classnotfoundexception
throw  classnotfoundexception ex getcause
return candidate
/**
* write objects to the wrapped output stream and log a meaningful message for serialization
* problems
*/
private static class checkerobjectoutputstream extends objectoutputstream
public checkerobjectoutputstream outputstream out  throws ioexception
super out
@override
protected final void writeobjectoverride final object obj  throws ioexception
try
super writeobject obj
catch  notserializableexception nsx
if  serializablechecker isavailable
// trigger serialization again, but this time gather
// some more info
new serializablechecker nsx  writeobject obj
// if we get here, we didn't fail, while we
// should;
throw nsx
throw nsx
catch  exception e
log error     obj       e getmessage    e
throw new wicketruntimeexception e
@override
public void flush   throws ioexception
super flush
@override
public void close   throws ioexception
super close