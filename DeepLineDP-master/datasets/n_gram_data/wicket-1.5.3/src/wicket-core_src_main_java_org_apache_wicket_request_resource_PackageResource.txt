/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket request resource
import java io ioexception
import java io serializable
import java util locale
import javax servlet http httpservletresponse
import org apache wicket application
import org apache wicket session
import org apache wicket threadcontext
import org apache wicket wicketruntimeexception
import org apache wicket markup html ipackageresourceguard
import org apache wicket request resource caching istaticcacheableresource
import org apache wicket settings iresourcesettings
import org apache wicket util io ioutils
import org apache wicket util lang packages
import org apache wicket util lang wicketobjects
import org apache wicket util resource iresourcestream
import org apache wicket util resource resourcestreamnotfoundexception
import org apache wicket util resource locator iresourcestreamlocator
import org apache wicket util string strings
import org apache wicket util time time
import org slf4j logger
import org slf4j loggerfactory
/**
* represents a localizable static resource.
* <p>
* use like eg:
*
* <pre>
* mypackageresource img_unknown = new mypackageresource(editpage.class, &quot;questionmark.gif&quot;);
* </pre>
*
* where the static resource references image 'questionmark.gif' from the the package that editpage
* is in to get a package resource.
* </p>
*
* access to resources can be granted or denied via a {@link ipackageresourceguard}. please see
* {@link iresourcesettings#getpackageresourceguard()} as well.
*
* @author jonathan locke
* @author eelco hillenius
* @author juergen donnerstag
* @author matej knopp
*/
public class packageresource extends abstractresource implements istaticcacheableresource
private static final logger log   loggerfactory getlogger packageresource class
private static final long serialversionuid   1l
/**
* exception thrown when the creation of a package resource is not allowed.
*/
public static final class packageresourceblockedexception extends wicketruntimeexception
private static final long serialversionuid   1l
/**
* construct.
*
* @param message
*            error message
*/
public packageresourceblockedexception string message
super message
/**
* the path to the resource
*/
private final string absolutepath
/**
* the resource's locale
*/
private final locale locale
/**
* the path this resource was created with.
*/
private final string path
/**
* the scoping class, used for class loading and to determine the package.
*/
private final string scopename
/**
* the resource's style
*/
private final string style
/**
* the component's variation (of the style)
*/
private final string variation
/**
* hidden constructor.
*
* @param scope
*            this argument will be used to get the class loader for loading the package
*            resource, and to determine what package it is in
* @param name
*            the relative path to the resource
* @param locale
*            the locale of the resource
* @param style
*            the style of the resource
* @param variation
*            the component's variation (of the style)
*/
protected packageresource final class<?> scope  final string name  final locale locale
final string style  final string variation
// convert resource path to absolute path relative to base package
absolutepath   packages absolutepath scope  name
final string parentescape   application get
getresourcesettings
getparentfolderplaceholder
if  strings isempty parentescape     false
path   strings replaceall name     parentescape      tostring
else
path   name
if   accept scope  path
throw new packageresourceblockedexception
absolutepath
scopename   scope getname
this locale   locale
this style   style
this variation   variation
private locale getcurrentlocale
return locale    null ? locale   session get   getlocale
private string getcurrentstyle
return style    null ? style   session get   getstyle
/**
* be aware that method takes the current wicket session's locale and style into account when
* locating the stream.
*
* @return resource stream
*
* @see org.apache.wicket.request.resource.caching.istaticcacheableresource#getcacheableresourcestream()
* @see #getresourcestream()
*/
public iresourcestream getcacheableresourcestream
// get resource locator
iresourcestreamlocator locator   threadcontext getapplication
getresourcesettings
getresourcestreamlocator
// determine current resource stream
// taking client locale and style into account
return locator locate getscope    absolutepath  getcurrentstyle    variation
getcurrentlocale    null  false
public serializable getcachekey
iresourcestream stream   getcacheableresourcestream
// if resource stream can not be found do not cache
if  stream    null
return null
return new cachekey scopename  absolutepath  stream getlocale    stream getstyle
stream getvariation
/**
* gets the scoping class, used for class loading and to determine the package.
*
* @return the scoping class
*/
public final class<?> getscope
return wicketobjects resolveclass scopename
/**
* gets the style.
*
* @return the style
*/
public final string getstyle
return style
/**
* creates a new resource response based on the request attributes
*
* @param attributes
*            current request attributes from client
* @return resource response for answering request
*/
@override
protected resourceresponse newresourceresponse attributes attributes
final resourceresponse resourceresponse   new resourceresponse
if  resourceresponse dataneedstobewritten attributes
// get resource stream
final iresourcestream resourcestream   getresourcestream
// bail out if resource stream could not be found
if  resourcestream    null
return sendresourceerror resourceresponse  httpservletresponse sc_not_found
final string contenttype
if  application exists
contenttype   application get   getmimetype path
else
contenttype   resourcestream getcontenttype
// set content-type (may be null)
resourceresponse setcontenttype contenttype
// add last-modified header (to support head requests and if-modified-since)
final time lastmodified   resourcestream lastmodifiedtime
if  lastmodified    null
resourceresponse setlastmodified lastmodified
try
// read resource data
final byte bytes
try
bytes   ioutils tobytearray resourcestream getinputstream
finally
resourcestream close
final byte processed   processresponse attributes  bytes
// send content-length header
resourceresponse setcontentlength processed length
// send response body with resource data
resourceresponse setwritecallback new writecallback
@override
public void writedata attributes attributes
attributes getresponse   write processed
catch  ioexception e
log debug e getmessage    e
return sendresourceerror resourceresponse  500
catch  resourcestreamnotfoundexception e
log debug e getmessage    e
return sendresourceerror resourceresponse  500
return resourceresponse
/**
* gives a chance to modify the resource going to be written in the response
*
* @param attributes
*            current request attributes from client
* @param original
*            the original response
* @return the processed response
*/
protected byte processresponse final attributes attributes  final byte original
return original
/**
* send resource specific error message and write log entry
*
* @param resourceresponse
*            resource response
* @param errorcode
*            error code (=http status)
* @param errormessage
*            error message (=http error message)
* @return resource response for method chaining
*/
private resourceresponse sendresourceerror resourceresponse resourceresponse  int errorcode
string errormessage
string msg   string format
absolutepath  style  variation  locale  errormessage  errorcode
log warn msg
resourceresponse seterror errorcode  errormessage
return resourceresponse
/**
* locate resource stream for current resource
* <p/>
* unfortunately this method has changed from scope 'public' in wicket 1.4 to scope 'protected'
* in wicket 1.5. we realized this too late and now changing it would break the api. so in case
* you need access to this method you have the following options:
*
* <ul>
* <li>
* copy-paste the code in the method body of {@link #getresourcestream()} and wait for wicket
* 1.6</li>
* <li>
* extend packageresource, passing the package resources attributes and make
* {@link #getresourcestream()} public again:
*
* <pre>
* public class mypackageresource extends packageresource
* {
* 	public mypackageresource(class&lt;?&gt; scope, string name, locale locale, string style,
* 		string variation)
* 	{
* 		super(scope, name, locale, style, variation);
* 	}
*
* 	// change access to public here
* 	public iresourcestream getresourcestream()
* 	{
* 		return super.getresourcestream();
* 	}
* }
* </pre>
*
* </li>
* </ul>
*
*
* @return resource stream or <code>null</code> if not found
*/
protected iresourcestream getresourcestream
// locate resource
return threadcontext getapplication
getresourcesettings
getresourcestreamlocator
locate getscope    absolutepath  style  variation  locale  null  false
/**
* @param scope
*            resource scope
* @param path
*            resource path
* @return <code>true<code> if resource access is granted
*/
private boolean accept class<?> scope  string path
ipackageresourceguard guard   threadcontext getapplication
getresourcesettings
getpackageresourceguard
return guard accept scope  path
/**
* gets whether a resource for a given set of criteria exists.
*
* @param scope
*            this argument will be used to get the class loader for loading the package
*            resource, and to determine what package it is in. typically this is the class in
*            which you call this method
* @param path
*            the path to the resource
* @param locale
*            the locale of the resource
* @param style
*            the style of the resource (see {@link org.apache.wicket.session})
* @param variation
*            the component's variation (of the style)
* @return true if a resource could be loaded, false otherwise
*/
public static boolean exists final class<?> scope  final string path  final locale locale
final string style  final string variation
string absolutepath   packages absolutepath scope  path
return threadcontext getapplication
getresourcesettings
getresourcestreamlocator
locate scope  absolutepath  style  variation  locale  null  false     null
@override
public string tostring
final stringbuilder result   new stringbuilder
result append
append getclass   getsimplename
append
append
append path
append
append scopename
append
append locale
append
append style
append
append variation
append
return result tostring
@override
public int hashcode
final int prime   31
int result   1
result   prime   result     absolutepath    null  ? 0   absolutepath hashcode
result   prime   result     locale    null  ? 0   locale hashcode
result   prime   result     path    null  ? 0   path hashcode
result   prime   result     scopename    null  ? 0   scopename hashcode
result   prime   result     style    null  ? 0   style hashcode
result   prime   result     variation    null  ? 0   variation hashcode
return result
@override
public boolean equals object obj
if  this    obj
return true
if  obj    null
return false
if  getclass      obj getclass
return false
packageresource other    packageresource obj
if  absolutepath    null
if  other absolutepath    null
return false
else if   absolutepath equals other absolutepath
return false
if  locale    null
if  other locale    null
return false
else if   locale equals other locale
return false
if  path    null
if  other path    null
return false
else if   path equals other path
return false
if  scopename    null
if  other scopename    null
return false
else if   scopename equals other scopename
return false
if  style    null
if  other style    null
return false
else if   style equals other style
return false
if  variation    null
if  other variation    null
return false
else if   variation equals other variation
return false
return true
private static class cachekey implements serializable
private final string scopename
private final string path
private final locale locale
private final string style
private final string variation
public cachekey string scopename  string path  locale locale  string style  string variation
this scopename   scopename
this path   path
this locale   locale
this style   style
this variation   variation
@override
public boolean equals object o
if  this    o
return true
if    o instanceof cachekey
return false
cachekey cachekey    cachekey o
if  locale    null ?  locale equals cachekey locale    cachekey locale    null
return false
if   path equals cachekey path
return false
if   scopename equals cachekey scopename
return false
if  style    null ?  style equals cachekey style    cachekey style    null
return false
if  variation    null ?  variation equals cachekey variation
cachekey variation    null
return false
return true
@override
public int hashcode
int result   scopename hashcode
result   31   result   path hashcode
result   31   result    locale    null ? locale hashcode     0
result   31   result    style    null ? style hashcode     0
result   31   result    variation    null ? variation hashcode     0
return result
@override
public string tostring
final stringbuilder sb   new stringbuilder
sb append
sb append    append scopename  append
sb append    append path  append
sb append    append locale
sb append    append style  append
sb append    append variation  append
sb append
return sb tostring