/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket request mapper
import java nio charset charset
import java util arraylist
import java util collections
import java util iterator
import java util list
import java util locale
import java util concurrent copyonwritearraylist
import org apache wicket request irequesthandler
import org apache wicket request irequestmapper
import org apache wicket request request
import org apache wicket request url
/**
* thread safe compound {@link irequestmapper}. the mappers are searched depending on their
* compatibility score and the orders they were registered. if two or more {@link irequestmapper}s
* have the same compatibility score, the last registered mapper has highest priority.
*
* @author igor.vaynberg
* @author matej knopp
*/
public class compoundrequestmapper implements icompoundrequestmapper
/**
*
*/
private static class mapperwithscore implements comparable<mapperwithscore>
private final irequestmapper mapper
private final int compatibilityscore
public mapperwithscore final irequestmapper mapper  final int compatibilityscore
this mapper   mapper
this compatibilityscore   compatibilityscore
public int compareto final mapperwithscore o
return o compatibilityscore   compatibilityscore
public irequestmapper getmapper
return mapper
/**
* @see java.lang.object#tostring()
*/
@override
public string tostring
return     mapper getclass   getname         compatibilityscore
private final list<irequestmapper> mappers   new copyonwritearraylist<irequestmapper>
/**
* construct.
*/
public compoundrequestmapper
/**
* @see org.apache.wicket.request.mapper.icompoundrequestmapper#add(org.apache.wicket.request.irequestmapper)
*/
public compoundrequestmapper add final irequestmapper mapper
mappers add 0  mapper
return this
/**
* @see org.apache.wicket.request.mapper.icompoundrequestmapper#remove(org.apache.wicket.request.irequestmapper)
*/
public compoundrequestmapper remove final irequestmapper mapper
mappers remove mapper
return this
/**
* searches the registered {@link irequestmapper}s to find one that can map the {@link request}.
* each registered {@link irequestmapper} is asked to provide its compatibility score. then the
* mappers are asked to map the request in order depending on the provided compatibility
* score.
* <p>
* the mapper with highest compatibility score which can map the request is returned.
*
* @param request
* @return requesthandler for the request or <code>null</code> if no mapper for the request is
*         found.
*/
public irequesthandler maprequest final request request
list<mapperwithscore> list   new arraylist<mapperwithscore> mappers size
for  irequestmapper mapper   mappers
int score   mapper getcompatibilityscore request
list add new mapperwithscore mapper  score
collections sort list
for  mapperwithscore mapperwithscore   list
irequesthandler handler   mapperwithscore getmapper   maprequest request
if  handler    null
return handler
return null
/**
* searches the registered {@link irequestmapper}s to find one that can map the
* {@link irequesthandler}. each registered {@link irequestmapper} is asked to map the
* {@link irequesthandler} until a mapper which can map the {@link irequesthandler} is found or
* no more mappers are left.
* <p>
* the mappers are searched in reverse order as they have been registered. more recently
* registered mappers have bigger priority.
*
* @param handler
* @return url for the handler or <code>null</code> if no mapper for the handler is found.
*/
public url maphandler final irequesthandler handler
for  irequestmapper mapper   mappers
url url   mapper maphandler handler
if  url    null
return url
return null
/**
* the scope of the compound mapper is the highest score of the registered mappers.
*
* {@inheritdoc}
*/
public int getcompatibilityscore final request request
int score   integer min_value
for  irequestmapper mapper   mappers
score   math max score  mapper getcompatibilityscore request
return score
public iterator<irequestmapper> iterator
return mappers iterator
public void unmount string path
final url url   url parse path
final request request   createrequest url
for  iterator<irequestmapper> itor   iterator    itor hasnext
irequestmapper mapper   itor next
if  mapper maprequest request     null
remove mapper
int size
return mappers size
request createrequest final url url
request request   new request
@override
public url geturl
return url
@override
public locale getlocale
return null
@override
public object getcontainerrequest
return null
@override
public url getclienturl
return null
@override
public charset getcharset
return null
return request