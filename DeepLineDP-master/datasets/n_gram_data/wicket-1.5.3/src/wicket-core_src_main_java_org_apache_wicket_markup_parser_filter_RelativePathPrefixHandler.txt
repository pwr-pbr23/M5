/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket markup parser filter
import java text parseexception
import org apache wicket component
import org apache wicket markupcontainer
import org apache wicket behavior behavior
import org apache wicket markup componenttag
import org apache wicket markup markupelement
import org apache wicket markup markupstream
import org apache wicket markup wickettag
import org apache wicket markup html transparentwebmarkupcontainer
import org apache wicket markup parser abstractmarkupfilter
import org apache wicket markup resolver icomponentresolver
import org apache wicket request cycle requestcycle
import org apache wicket util string urlutils
import org slf4j logger
import org slf4j loggerfactory
/**
* the purpose of this filter is to make all "href", "src" and "background" attributes found in the
* markup which contain a relative url like "mydir/mypage.gif" actually resolve in the output html,
* by prefixing them with with an appropriate path to make the link work properly, even if the
* current page is being displayed at a mounted url or whatever. it is applied to all non wicket
* component tags, except for auto-linked tags.
*
* it achieves this by being both an imarkupfilter and icomponentresolver, and works similarly to
* the &lt;wicket:message&gt; code. for each tag, we look to see if the path in "href", "src" and
* "background" attributes is relative. if it is, we assume it's relative to the context path and we
* should prefix it appropriately so that it resolves correctly for the current request, even if
* that's for something that's not at the context root. this is done for servletwebrequests by
* prepending with "../" tokens, for example.
*
*
* @author al maw
*/
public final class relativepathprefixhandler extends abstractmarkupfilter
implements
icomponentresolver
private static final long serialversionuid   1l
/** logging */
private static final logger log   loggerfactory getlogger relativepathprefixhandler class
/**
* the id automatically assigned to tags without an id which we need to prepend a relative path
* to.
*/
public static final string wicket_relative_path_prefix_container_id
/** list of attribute names considered */
private static final string attributenames   new string
/**
* behavior that adds a prefix to src, href and background attributes to make them
* context-relative
*/
public static final behavior relative_path_behavior   new behavior
private static final long serialversionuid   1l
@override
public void oncomponenttag component component  componenttag tag
// modify all relevant attributes
for  string attrname   attributenames
string attrvalue   tag getattributes   getstring attrname
if   attrvalue    null      attrvalue startswith       false
attrvalue contains          attrvalue startswith
tag getattributes   put attrname
urlutils rewritetocontextrelative attrvalue  requestcycle get
@override
protected final markupelement oncomponenttag componenttag tag  throws parseexception
if  tag isclose
return tag
// don't touch any wicket:id component and any auto-components
if   tag instanceof wickettag      tag isautolinkenabled      true
tag getattributes   get       null
return tag
// work out whether we have any attributes that require us to add a
// behavior that prepends the relative path.
for  string attrname   attributenames
string attrvalue   tag getattributes   getstring attrname
if   attrvalue    null      attrvalue startswith       false
attrvalue contains          attrvalue startswith
if  tag getid      null
tag setid wicket_relative_path_prefix_container_id
tag setautocomponenttag true
tag addbehavior relative_path_behavior
tag setmodified true
break
return tag
public component resolve final markupcontainer container  final markupstream markupstream
final componenttag tag
if   tag    null      tag getid   startswith wicket_relative_path_prefix_container_id
string id   wicket_relative_path_prefix_container_id
container getpage   getautoindex
// we do not want to mess with the hierarchy, so the container has to be
// transparent as it may have wicket components inside. for example a raw anchor tag
// that contains a label.
return new transparentwebmarkupcontainer id
return null