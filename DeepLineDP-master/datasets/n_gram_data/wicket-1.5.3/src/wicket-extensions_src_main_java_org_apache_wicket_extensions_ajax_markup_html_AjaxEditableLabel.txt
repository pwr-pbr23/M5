/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket extensions ajax markup html
import java io serializable
import org apache wicket component
import org apache wicket markupcontainer
import org apache wicket ajax abstractdefaultajaxbehavior
import org apache wicket ajax ajaxeventbehavior
import org apache wicket ajax ajaxrequesttarget
import org apache wicket markup componenttag
import org apache wicket markup markupstream
import org apache wicket markup html basic label
import org apache wicket markup html form formcomponent
import org apache wicket markup html form textfield
import org apache wicket markup html panel panel
import org apache wicket model imodel
import org apache wicket request cycle requestcycle
import org apache wicket util convert iconverter
import org apache wicket util string javascriptutils
import org apache wicket validation ivalidator
/**
* an implementation of ajaxified edit-in-place component using a {@link textfield} as it's editor.
* <p>
* there are several methods that can be overridden for customization.
* <ul>
* <li>{@link #onedit(ajaxrequesttarget)} is called when the label is clicked and the editor is to
* be displayed. the default implementation switches the label for the editor and places the caret
* at the end of the text.</li>
* <li>{@link #onsubmit(ajaxrequesttarget)} is called when in edit mode, the user submitted new
* content, that content validated well, and the model value successfully updated. this
* implementation also clears any <code>window.status</code> set.</li>
* <li>{@link #onerror(ajaxrequesttarget)} is called when in edit mode, the user submitted new
* content, but that content did not validate. get the current input by calling
* {@link formcomponent#getinput()} on {@link #geteditor()}, and the error message by calling:
*
* <pre>
* string errormessage = editor.getfeedbackmessage().getmessage();
* </pre>
*
* the default implementation of this method displays the error message in
* <code>window.status</code>, redisplays the editor, selects the editor's content and sets the
* focus on it.
* <li>{@link #oncancel(ajaxrequesttarget)} is called when in edit mode, the user choose not to
* submit the contents (he/she pressed escape). the default implementation displays the label again
* without any further action.</li>
* </ul>
* </p>
*
* @author igor vaynberg (ivaynberg)
* @author eelco hillenius
* @param <t>
*/
// todo wonder if it makes sense to refactor this into a formcomponentpanel
public class ajaxeditablelabel<t> extends panel
private static final long serialversionuid   1l
/** editor component. */
private formcomponent<t> editor
/** label component. */
private component label
protected class editorajaxbehavior extends abstractdefaultajaxbehavior
private static final long serialversionuid   1l
/**
* constructor.
*/
public editorajaxbehavior
/**
* {@inheritdoc}
*/
@override
protected void oncomponenttag final componenttag tag
super oncomponenttag tag
final string savecall
generatecallbackscript     getcallbackurl
final string cancelcall
generatecallbackscript     getcallbackurl
final string keypress       cancelcall
savecall
tag put    savecall
tag put        keypress
tag put        keypress
/**
* {@inheritdoc}
*/
@override
protected void respond final ajaxrequesttarget target
requestcycle requestcycle   requestcycle get
boolean save   requestcycle getrequest
getrequestparameters
getparametervalue
toboolean false
if  save
editor processinput
if  editor isvalid
onsubmit target
else
onerror target
else
oncancel target
protected class labelajaxbehavior extends ajaxeventbehavior
private static final long serialversionuid   1l
/**
* construct.
*
* @param event
*/
public labelajaxbehavior final string event
super event
/**
* {@inheritdoc}
*/
@override
protected void onevent final ajaxrequesttarget target
onedit target
/**
* constructor
*
* @param id
*/
public ajaxeditablelabel final string id
super id
setoutputmarkupid true
/**
* constructor
*
* @param id
* @param model
*/
public ajaxeditablelabel final string id  final imodel<t> model
super id  model
setoutputmarkupid true
/**
* adds a validator to this form component. a model must be available for this component before
* validators can be added. either add this component to its parent (already having a model), or
* provide one before this call via constructor {@link #ajaxeditablelabel(string,imodel)} or
* {@link #setdefaultmodel(imodel)}.
*
* @param validator
*            the validator
* @return this
*/
public final ajaxeditablelabel<t> add final ivalidator<t> validator
geteditor   add validator
return this
/**
* implementation that returns null by default (panels don't typically need converters anyway).
* this is used by the embedded default instances of label and form field to determine whether
* they should use a converter like they normally would (when this method returns null), or
* whether they should use a custom converter (when this method is overridden and returns not
* null).
*/
@override
public <c> iconverter<c> getconverter final class<c> type
return null
/**
* the value will be made available to the validator property by means of ${label}. it does not
* have any specific meaning to formcomponent itself.
*
* @param labelmodel
* @return this for chaining
*/
public final ajaxeditablelabel<t> setlabel final imodel<string> labelmodel
geteditor   setlabel labelmodel
return this
/**
* {@inheritdoc}
*/
@override
public final ajaxeditablelabel<t> setdefaultmodel final imodel<?> model
super setdefaultmodel model
getlabel   setdefaultmodel model
geteditor   setdefaultmodel model
return this
/**
* sets the required flag
*
* @param required
* @return this for chaining
*/
public final ajaxeditablelabel<t> setrequired final boolean required
geteditor   setrequired required
return this
/**
* sets the type that will be used when updating the model for this component. if no type is
* specified string type is assumed.
*
* @param type
* @return this for chaining
*/
public final ajaxeditablelabel<t> settype final class<?> type
geteditor   settype type
return this
/**
* create a new form component instance to serve as editor.
*
* @param parent
*            the parent component
* @param componentid
*            id that should be used by the component
* @param model
*            the model
* @return the editor
*/
protected formcomponent<t> neweditor final markupcontainer parent  final string componentid
final imodel<t> model
textfield<t> editor   new textfield<t> componentid  model
private static final long serialversionuid   1l
@override
public <c> iconverter<c> getconverter final class<c> type
iconverter<c> c   ajaxeditablelabel this getconverter type
return c    null ? c   super getconverter type
@override
protected void onmodelchanged
super onmodelchanged
ajaxeditablelabel this onmodelchanged
@override
protected void onmodelchanging
super onmodelchanging
ajaxeditablelabel this onmodelchanging
editor setoutputmarkupid true
editor setvisible false
editor add new editorajaxbehavior
return editor
/**
* create a new form component instance to serve as label.
*
* @param parent
*            the parent component
* @param componentid
*            id that should be used by the component
* @param model
*            the model
* @return the editor
*/
protected component newlabel final markupcontainer parent  final string componentid
final imodel<t> model
label label   new label componentid  model
private static final long serialversionuid   1l
@override
public <c> iconverter<c> getconverter final class<c> type
iconverter<c> c   ajaxeditablelabel this getconverter type
return c    null ? c   super getconverter type
/**
* {@inheritdoc}
*/
@override
public void oncomponenttagbody final markupstream markupstream
final componenttag opentag
object modelobject   getdefaultmodelobject
if   modelobject    null       equals modelobject
replacecomponenttagbody markupstream  opentag  defaultnulllabel
else
super oncomponenttagbody markupstream  opentag
label setoutputmarkupid true
label add new labelajaxbehavior getlabelajaxevent
return label
/**
* by default this returns "onclick" uses can overwrite this on which event the label behavior
* should be triggered
*
* @return the event name
*/
protected string getlabelajaxevent
return
/**
* gets the editor component.
*
* @return the editor component
*/
protected final formcomponent<t> geteditor
if  editor    null
initlabelandeditor getdelegatingparentmodel
return editor
/**
* gets the label component.
*
* @return the label component
*/
protected final component getlabel
if  label    null
initlabelandeditor getdelegatingparentmodel
return label
/**
* {@inheritdoc}
*/
@override
protected void onbeforerender
super onbeforerender
// lazily add label and editor
if  editor    null
initlabelandeditor getdelegatingparentmodel
// obsolete with wicket-1919
// label.setenabled(isenabledinhierarchy());
/**
* invoked when the label is in edit mode, and received a cancel event. typically, nothing
* should be done here.
*
* @param target
*            the ajax request target
*/
protected void oncancel final ajaxrequesttarget target
label setvisible true
editor setvisible false
target add ajaxeditablelabel this
/**
* called when the label is clicked and the component is put in edit mode.
*
* @param target
*            ajax target
*/
public void onedit final ajaxrequesttarget target
label setvisible false
editor setvisible true
target add ajaxeditablelabel this
// put focus on the textfield and stupid explorer hack to move the
// caret to the end
target appendjavascript     editor getmarkupid
target focuscomponent editor
/**
* invoked when the label is in edit mode, received a new input, but that input didn't validate
*
* @param target
*            the ajax request target
*/
protected void onerror final ajaxrequesttarget target
serializable errormessage   editor getfeedbackmessage   getmessage
if  errormessage    null
target appendjavascript
javascriptutils escapequotes errormessage tostring
target appendjavascript     editor getmarkupid
/**
* invoked when the editor was successfully updated. use this method e.g. to persist the changed
* value. this implementation displays the label and clears any window status that might have
* been set in onerror.
*
* @param target
*            the ajax request target
*/
protected void onsubmit final ajaxrequesttarget target
label setvisible true
editor setvisible false
target add ajaxeditablelabel this
target appendjavascript
/**
* lazy initialization of the label and editor components and set tempmodel to null.
*
* @param model
*            the model for the label and editor
*/
private void initlabelandeditor final imodel<t> model
editor   neweditor this     model
label   newlabel this     model
add label
add editor
/**
* get a model that accesses the parent model lazily. this is required since we eventually
* request the parents model before the component is added to the parent.
*
* @return model
*/
private imodel<t> getdelegatingparentmodel
return new imodel<t>
private static final long serialversionuid   1l
public t getobject
return getparentmodel   getobject
public void setobject final t object
getparentmodel   setobject object
public void detach
getparentmodel   detach
/**
* @return gets the parent model in case no explicit model was specified.
*/
@suppresswarnings
private imodel<t> getparentmodel
// the #getmodel() call below will resolve and assign any inheritable
// model this component can use. set that directly to the label and
// editor so that those components work like this enclosing panel
// does not exist (must have that e.g. with compoundpropertymodels)
imodel<t> m    imodel<t> getdefaultmodel
// check that a model was found
if  m    null
component parent   getparent
string msg
if  parent    null
msg
throw new illegalstateexception msg
return m
/**
* override this to display a different value when the model object is null. default is
* <code>...</code>
*
* @return the string which should be displayed when the model object is null.
*/
protected string defaultnulllabel
return
/**
* dummy override to fix wicket-1239
*/
@override
protected void onmodelchanged
super onmodelchanged
/**
* dummy override to fix wicket-1239
*/
@override
protected void onmodelchanging
super onmodelchanging