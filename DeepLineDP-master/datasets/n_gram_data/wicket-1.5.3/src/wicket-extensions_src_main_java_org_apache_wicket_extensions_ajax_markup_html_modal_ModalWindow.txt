/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket extensions ajax markup html modal
import org apache wicket component
import org apache wicket iclusterable
import org apache wicket page
import org apache wicket wicketruntimeexception
import org apache wicket ajax abstractdefaultajaxbehavior
import org apache wicket ajax ajaxrequesttarget
import org apache wicket ajax iajaxcalldecorator
import org apache wicket ajax calldecorator canceleventifnoajaxdecorator
import org apache wicket markup componenttag
import org apache wicket markup html iheaderresponse
import org apache wicket markup html webmarkupcontainer
import org apache wicket markup html panel panel
import org apache wicket markup repeater abstractrepeater
import org apache wicket model imodel
import org apache wicket model model
import org apache wicket request irequesthandler
import org apache wicket request cycle requestcycle
import org apache wicket request handler pageprovider
import org apache wicket request handler renderpagerequesthandler
import org apache wicket request resource javascriptresourcereference
import org apache wicket request resource packageresourcereference
import org apache wicket request resource resourcereference
import org apache wicket util lang enumeratedtype
import org apache wicket util string appendingstringbuffer
import org apache wicket util string strings
/**
* modal window component.
* <p>
* modal window is a draggable window (with either div or iframe content) that prevent user from
* interacting the rest of page (using a mask) until the window is closed.
* <p>
* if you want this to work under ie, don't attach this component to a &lt;span&gt; tag, make sure
* you use a &lt;div&gt;.
* <p>
* the window is draggable and optionally resizable. the content can be either
* <ul>
* <li><b>a component</b> - you need to add the component to modal window (with id obtained using
* <code>{@link #getcontentid()}</code>, or
* <li><b>a page</b> - you need to pass a <code>{@link pagecreator}</code> instance to a
* <code>{@link #setpagecreator(modalwindow.pagecreator)}</code> method.
* </ul>
* in case the content is a component, it is not rendered until the window is shown (method
* <code>{@link #show(ajaxrequesttarget)})</code>. the window can be made visible from an ajax
* handler using <code>{@link #show(ajaxrequesttarget)}</code>.
* <p>
* to close the window there are multiple options. static method
* <code>{@link #close(ajaxrequesttarget)}</code> can be used to close the window from a handler of
* ajax link inside the window. by default the close button in the upper right corner of the window
* closes it. this behavior can be altered using
* <code>{@link #setclosebuttoncallback(modalwindow.closebuttoncallback)}</code>. if you want to be
* notified when the window is closed (either using the close button or calling
* <code>{@link #close(ajaxrequesttarget)})</code>, you can use
* <code>{@link #setwindowclosedcallback(modalwindow.windowclosedcallback)}</code>.
* <p>
* title is specified using {@link #settitle(string)}. if the content is a page (iframe), the title
* can remain unset, in that case title from the page inside window will be shown.
* <p>
* there are several options to specify the visual properties of the window. in all methods where
* size is expected, width refers to width of entire window (including frame), height refers to the
* height of window content (without frame).
* <p>
* <ul>
* <li><code>{@link #setresizable(boolean)}</code> specifies, whether the window can be resized.
* <li><code>{@link #setinitialwidth(int)}</code> and <code>{@link #setinitialheight(int)}</code>
* specify the initial width and height of window. if the window is resizable, the unit of these
* dimensions is always "px". if the window is not resizable, the unit can be specified using
* <code>{@link #setwidthunit(string)}</code> and <code>{@link #setheightunit(string)}</code>. if
* the window is not resizable and the content is a component (not a page), the initial height value
* can be ignored and the actual height can be determined from the height of the content. to enable
* this behavior use <code>{@link #setuseinitialheight(boolean)}</code>.
* <li>the window position (and size if the window is resizable) can be stored in a cookie, so that
* it is preserved when window is close. the name of the cookie is specified via
* <code>{@link #setcookiename(string)}</code>. if the name is <code>null</code>, position is not
* stored (initial width and height are always used). default cookie name is null (position is not
* stored).
* <li><code>{@link #setminimalwidth(int)}</code> and <code>{@link #setminimalheight(int)}</code>
* set the minimal dimensions of resizable window.
* <li><code>{@link #setautosize(boolean)}</code> sets whether window size will be automatically
* adjusted on opening to fit content's width and height. default is false.<span
* style="text-decoration: underline"> doesn't work on ie 6.</span></li>
* <li>modal window can chose between two colors of frame.
* <code>{@link #setcssclassname(string)}</code> sets the dialog css class, possible values are
* <code>{@link #css_class_blue}</code> for blue frame and <code>{@link #css_class_gray}</code> for
* gray frame.
* <li>mask (element that prevents user from interacting the rest of the page) can be either
* transparent or semitransparent. <code>{@link #setmasktype(modalwindow.masktype)}</code> alters
* this.
* </ul>
* also it is recommended to put the modal window component in markup before any component (i.e.
* ajaxlink or ajaxbutton) that shows it.
* <p>
* if you want to use form in modal window component make sure that you put the modal window itself
* in another form (nesting forms is legal in wicket) and that the form on modal window is submitted
* before the window get closed.
*
* @author matej knopp
*/
public class modalwindow extends panel
private static final long serialversionuid   1l
/** css class for window with blue border. */
public final static string css_class_blue
/** css class for window with gray border. */
public final static string css_class_gray
private static final resourcereference javascript   new javascriptresourcereference
modalwindow class
private static final resourcereference css   new packageresourcereference modalwindow class
/** the default id of the content component */
public static final string content_id
/** true while the modalwindows is showing */
private boolean shown   false
/** empty container - used when no component is added */
private webmarkupcontainer empty
private int minimalwidth   200
private int minimalheight   200
private string cssclassname   css_class_blue
private int initialwidth   600
private int initialheight   400
private boolean useinitialheight   true
private boolean resizable   true
private string widthunit
private string heightunit
private string cookiename
private imodel<string> title   null
private masktype masktype   masktype semi_transparent
private boolean autosize   false
private pagecreator pagecreator   null
private closebuttoncallback closebuttoncallback   null
private windowclosedcallback windowclosedcallback   null
/**
* interface for lazy page creation. the advantage of creating page using this interface over
* just passing a page instance is that page created in <code>{@link #createpage()}</code> will
* have the pagemap automatically set to the pagemap specified for
* <code>{@link modalwindow}</code>.
*
* @author matej knopp
*/
public static interface pagecreator extends iclusterable
/**
* creates a new instance of content page.
*
* @return new page instance
*/
public page createpage
/**
* callback for close button that contains a method that is invoked after the button has been
* clicked. if no callback instance is specified using
* <code>{@link modalwindow#setclosebuttoncallback(modalwindow.closebuttoncallback)}</code>, no
* ajax request will be fired. clicking the button will just close the window.
*
* @author matej knopp
*/
public static interface closebuttoncallback extends iclusterable
/**
* methods invoked after the button has been clicked. the invocation is done using an ajax
* call, so <code>{@link ajaxrequesttarget}</code> instance is available.
*
* @param target
*            <code>{@link ajaxrequesttarget}</code> instance bound with the ajax request.
*
* @return true if the window can be closed (will close the window), false otherwise
*/
public boolean onclosebuttonclicked ajaxrequesttarget target
/**
* callback called after the window has been closed. if no callback instance is specified using
* {@link modalwindow#setwindowclosedcallback(modalwindow.windowclosedcallback)}, no ajax
* request will be fired.
*
* @author matej knopp
*/
public static interface windowclosedcallback extends iclusterable
/**
* called after the window has been closed.
*
* @param target
*            <code>{@link ajaxrequesttarget}</code> instance bound with the ajax request.
*/
public void onclose ajaxrequesttarget target
/**
* creates a new modal window component.
*
* @param id
*            id of component
*/
public modalwindow final string id
super id
init
/**
* creates a new modal window component.
*
* @param id
*            id of component
* @param model
*            model
*/
public modalwindow final string id  final imodel<?> model
super id  model
init
/**
* initialize
*/
private void init
setversioned false
cookiename   null
add empty   new webmarkupcontainer getcontentid
add newclosebuttonbehavior
add new windowclosedbehavior
@override
public void renderhead final iheaderresponse response
super renderhead response
response renderjavascriptreference javascript
resourcereference cssresource   newcssresource
if  cssresource    null
response rendercssreference cssresource
/**
* allows to override css contribution. returning null means the css will be contributed via
* other sources, e.g. a global css resource.
*
* @return the css resource reference or null if css is contributed via other means.
*/
protected resourcereference newcssresource
return css
/**
* is this window currently showing.
*
* @return the shown
*/
public boolean isshown
return shown
/**
* sets the <code>{@link pagecreator}</code> instance. the instance is only used when no custom
* component has been added to the dialog.
*
* @param creator
*            <code>{@link pagecreator}</code> instance
* @return this
*/
public modalwindow setpagecreator final pagecreator creator
setcontent empty
pagecreator   creator
return this
/**
* sets the <code>{@link closebuttoncallback}</code> instance.
*
* @param callback
*            callback instance
* @return this
*/
public modalwindow setclosebuttoncallback final closebuttoncallback callback
closebuttoncallback   callback
return this
/**
* sets the <code>@{link {@link windowclosedcallback}</code> instance.
*
* @param callback
*            callback instance
* @return this
*/
public modalwindow setwindowclosedcallback final windowclosedcallback callback
windowclosedcallback   callback
return this
/**
* shows the modal window.
*
* @param target
*            request target associated with current ajax request.
*/
public void show final ajaxrequesttarget target
if  shown    false
getcontent   setvisible true
target add this
target appendjavascript getwindowopenjavascript
shown   true
/**
* hides the modal window. this can be called from within the modal window, however, the modal
* window must have configured windowclosedcallback. otherwise use the
* {@link #close(ajaxrequesttarget)} method.
*
* @param target
*            request target associated with current ajax request.
*/
public static final void closecurrent final ajaxrequesttarget target
target appendjavascript getclosejavacriptinternal
/**
* closes the modal window.
*
* @param target
*            request target associated with current ajax request.
*/
public void close final ajaxrequesttarget target
getcontent   setvisible false
if  iscustomcomponent
target add getcontent
target appendjavascript getclosejavacript
shown   false
/**
* method that allows alternate script for showing the window.
*
* @return the script that actually shows the window.
*/
protected charsequence getshowjavascript
return
private static string getclosejavacriptinternal
return
undefined  undefined
undefined  undefined
/**
* method that allows alternate script for closing the window.
*
* @return the script that actually closes the window.
*/
protected string getclosejavacript
return getclosejavacriptinternal
/**
* returns the id of content component.
*
* <pre>
* modalwindow window = new modalwindow(parent, &quot;window&quot;);
* new mypanel(window, window.getcontentid());
* </pre>
*
* @return id of content component.
*/
public string getcontentid
return content_id
/**
* sets the minimal width of window. this value is only used if the window is resizable. the
* width is specified in pixels and it is the width of entire window (including frame).
*
* @param minimalwidth
*            minimal window width.
* @return this
*/
public modalwindow setminimalwidth final int minimalwidth
this minimalwidth   minimalwidth
return this
/**
* returns the minimal width of window (in pixels).
*
* @return minimal width of window
*/
public int getminimalwidth
return minimalwidth
/**
* sets the minimal height of window. this value is only used if window is resizable. the height
* is specified in pixels and it is the height of window content (without frame).
*
* @param minimalheight
*            minimal height
* @return this
*/
public modalwindow setminimalheight final int minimalheight
this minimalheight   minimalheight
return this
/**
* returns the minimal height of window (in pixels).
*
* @return minimal height of window
*/
public int getminimalheight
return minimalheight
/**
* sets the css class name for this window. this class affects the look of window frame.
* possible values (if you don't make your style sheet) are <code>{@link #css_class_blue}</code>
* and <code>{@link #css_class_gray}</code>.
*
* @param cssclassname
* @return this
*/
public modalwindow setcssclassname final string cssclassname
this cssclassname   cssclassname
return this
/**
* returns the css class name for this window.
*
* @return css class name
*/
public string getcssclassname
return cssclassname
/**
* sets the initial width of the window. the width refers to the width of entire window
* (including frame). if the window is resizable, the width unit is always "px". if the window
* is not resizable, the unit can be specified using {@link #setwidthunit(string)}. if cookie
* name is set and window is resizable, the initial width may be ignored in favor of width
* stored in cookie.
*
* @param initialwidth
*            initial width of the window
* @return this
*/
public modalwindow setinitialwidth final int initialwidth
this initialwidth   initialwidth
return this
/**
* returns the initial width of the window.
*
* @return initial height of the window
*/
public int getinitialwidth
return initialwidth
/**
* sets the initial height of the window. the height refers to the height of window content
* (without frame). if the window is resizable, the height unit is always "px". if the window is
* not resizable, the unit can be specified using {@link #setheightunit(string)}. if cookie name
* is set and window is resizable, the initial height may be ignored in favor of height stored
* in cookie.
*
* @param initialheight
*            initial height of the window
* @return this
*/
public modalwindow setinitialheight final int initialheight
this initialheight   initialheight
return this
/**
* returns the initial height of the window.
*
* @return initial height of the window
*/
public int getinitialheight
return initialheight
/**
* sets whether to use initial height or preserve the real content height. this can only be used
* if the content is a component (not a page) and the window is not resizable.
*
* @param useinitialheight
*            whether to use initial height instead of preserving content height instead of
*            using initial height
* @return this
*/
public modalwindow setuseinitialheight final boolean useinitialheight
this useinitialheight   useinitialheight
return this
/**
* returns true if the initial height should be used (in favor of preserving real content
* height).
*
* @return true if initial height should be used, false is real content height should be
*         preserved (valid only if the window is not resizable and the content is a component
*         (not a page)
*/
public boolean isuseinitialheight
return useinitialheight
/**
* sets whether the user will be able to resize the window.
*
* @param resizable
*            whether the window is resizable
* @return this
*/
public modalwindow setresizable final boolean resizable
this resizable   resizable
return this
/**
* returns whether the window is resizable.
*
* @return true if the window is resizable, false otherwise
*/
public boolean isresizable
return resizable
/**
* sets the css unit used for initial window width. this is only applicable when the window is
* not resizable.
*
* @param widthunit
*            css unit for initial window width.
* @return this
*/
public modalwindow setwidthunit final string widthunit
this widthunit   widthunit
return this
/**
* returns the css unit for initial window width.
*
* @return css unit for initial window width.
*/
public string getwidthunit
return widthunit
/**
* sets the css unit used for initial window height. this is only applicable when the window is
* not resizable.
*
* @param heightunit
*            css unit for initial window height.
* @return this
*/
public modalwindow setheightunit final string heightunit
this heightunit   heightunit
return this
/**
* retrns the css unit for initial window height.
*
* @return css unit for initial window height.
*/
public string getheightunit
return heightunit
/**
* sets the name of the cookie that is used to remember window position (and size if the window
* is resizable).
*
* @param cookiename
*            name of the cookie
* @return this
*/
public modalwindow setcookiename final string cookiename
if   cookiename    null     cookiename contains       cookiename contains
throw new illegalargumentexception
this cookiename   cookiename
return this
/**
* returns the name of cookie that is used to remember window position (and size if the window
* is resizable).
*
* @return name of the cookie
*/
public string getcookiename
return cookiename
/**
* sets the title of window. if the window is a page, title can be <code>null</code>. in that
* case it will display the title document inside the window.
*
* @param title
*            title of the window
* @return this
*/
public modalwindow settitle final string title
this title   new model<string> title
return this
/**
* sets the title of window. if the window is a page, title can be <code>null</code>. in that
* case it will display the title document inside the window.
*
* @param title
*            title of the window
* @return this
*/
public modalwindow settitle imodel<string> title
title   wrap title
this title   title
return this
/**
* returns the title of the window.
*
* @return title of the window
*/
public imodel<string> gettitle
return title
/**
* mask is the element behind the window, that prevents user from interacting the rest of page.
* mask can be either
* <ul>
* <li><code>{@link #transparent}</code> - the mask is invisible
* <li><code>{@link #semi_transparent}</code> - the mask is black with small opacity (10%)
* </ul>
*
* @author matej knopp
*/
public static final class masktype extends enumeratedtype
private static final long serialversionuid   1l
/** transparent mask (not visible). */
public static final masktype transparent   new masktype
/** visible mask (black with low opacity). */
public static final masktype semi_transparent   new masktype
/**
* constructor.
*
* @param name
*/
public masktype final string name
super name
/**
* sets the mask type of the window.
*
* @param mask
*            the mask type
* @return this
*/
public modalwindow setmasktype final masktype mask
masktype   mask
return this
/**
* returns the mask type of the window
*
* @return the mask type
*/
public masktype getmasktype
return masktype
/**
* creates the page.
*
* @return page instance or null if page couldn't be created.
*/
private page createpage
if  pagecreator    null
return null
else
return pagecreator createpage
/**
* @see org.apache.wicket.component#onbeforerender()
*/
@override
protected void onbeforerender
shown   makecontentvisible
getcontent   setoutputmarkupid true
getcontent   setvisible shown
super onbeforerender
/**
* you may subclass this method in case you don't want to show up the window on normal page
* refresh.
*
* @return true, if the window shall be shown
*/
protected boolean makecontentvisible
// if user is refreshing whole page, the window will not be shown
if  getwebrequest   isajax      false
return false
else
return shown
/**
* @see org.apache.wicket.markup.html.panel.panel#oncomponenttag(org.apache.wicket.markup.componenttag)
*/
@override
protected void oncomponenttag final componenttag tag
super oncomponenttag tag
tag put
/**
* returns a content component. in case user haven't specified any content component, it returns
* an empty webmarkupcontainer.
*
* @return content component
*/
protected final component getcontent
return get getcontentid
/**
* returns true if user has added own component to the window.
*
* @return true if user has added own component to the window, false otherwise.
*/
protected boolean iscustomcomponent
return getcontent      empty
/**
* @see org.apache.wicket.markupcontainer#remove(org.apache.wicket.component)
*/
@override
public modalwindow remove final component component
super remove component
if  component getid   equals getcontentid
add empty   new webmarkupcontainer getcontentid
return this
/**
* sets the content of the modal window.
*
* @param component
* @return this;
*/
public modalwindow setcontent final component component
if  component getid   equals getcontentid       false
throw new wicketruntimeexception
component getid         getcontentid
else if  component instanceof abstractrepeater
throw new wicketruntimeexception
component setoutputmarkupplaceholdertag true
component setvisible false
replace component
shown   false
pagecreator   null
return this
/**
* @author matej knopp
*/
private class windowclosedbehavior extends abstractdefaultajaxbehavior
private static final long serialversionuid   1l
@override
protected void respond final ajaxrequesttarget target
shown   false
if  windowclosedcallback    null
windowclosedcallback onclose target
@override
protected charsequence getcallbackscript
return super getcallbackscript
/**
* @author matej knopp
*/
protected class closebuttonbehavior extends abstractdefaultajaxbehavior
private static final long serialversionuid   1l
public closebuttonbehavior
@override
protected final void respond final ajaxrequesttarget target
if   closebuttoncallback    null
closebuttoncallback onclosebuttonclicked target     true
close target
/**
* @see org.apache.wicket.ajax.abstractdefaultajaxbehavior#getajaxcalldecorator()
*/
@override
protected iajaxcalldecorator getajaxcalldecorator
return new canceleventifnoajaxdecorator super getajaxcalldecorator
/**
* @see org.apache.wicket.ajax.abstractdefaultajaxbehavior#getcallbackscript()
*/
@override
protected final charsequence getcallbackscript
return super getcallbackscript
/**
* returns the markup id of the component.
*
* @return component id
*/
private string getcontentmarkupid
return getcontent   getmarkupid
/**
* replaces all occurrences of " in string with \".
*
* @param string
*            string to be escaped.
*
* @return escaped string
*/
private string escapequotes string string
if  string indexof        1
string   strings replaceall string          tostring
return string
/**
* returns the javascript used to open the window. subclass
* {@link #postprocesssettings(appendingstringbuffer)} to modify the javascript if needed.
*
* see wicket-12
*
* @return javascript that opens the window
*/
protected final string getwindowopenjavascript
appendingstringbuffer buffer   new appendingstringbuffer 500
if  iscustomcomponent      true
buffer append  "
buffer append getcontentmarkupid
buffer append     n"
buffer append
appendassignment buffer     getminimalwidth
appendassignment buffer     getminimalheight
appendassignment buffer     getcssclassname
appendassignment buffer     getinitialwidth
if   isuseinitialheight      true      iscustomcomponent      false
appendassignment buffer     getinitialheight
else
buffer append
appendassignment buffer     isresizable
if  isresizable      false
appendassignment buffer     getwidthunit
appendassignment buffer     getheightunit
if  iscustomcomponent      false
page page   createpage
if  page    null
throw new wicketruntimeexception
charsequence pageurl   null
if  page ispagestateless
pageurl   requestcycle get   urlfor page getclass    page getpageparameters
else
irequesthandler handler   new renderpagerequesthandler new pageprovider page
pageurl   requestcycle get   urlfor handler
string ie8_pageurl   requestcycle get   mapurlfor handler  tostring
appendassignment buffer     ie8_pageurl
appendassignment buffer     pageurl
else
buffer append
if  getcookiename      null
appendassignment buffer     getcookiename
object title   gettitle      null ? gettitle   getobject     null
if  title    null
appendassignment buffer     escapequotes title tostring
if  getmasktype      masktype transparent
buffer append  transparent
else if  getmasktype      masktype semi_transparent
buffer append  semi transparent
appendassignment buffer     autosize
// set true if we set a windowclosedcallback
boolean haveclosecallback   false
// in case user is interested in window close callback or we have a pagemap to clean attach
// notification request
if  windowclosedcallback    null
windowclosedbehavior behavior   getbehaviors windowclosedbehavior class  get 0
buffer append
buffer append behavior getcallbackscript
buffer append
haveclosecallback   true
// in case we didn't set windowclosecallback, we need at least callback on close button, to
// close window property (thus cleaning the shown flag)
if   closebuttoncallback    null      haveclosecallback    false
closebuttonbehavior behavior   getbehaviors closebuttonbehavior class  get 0
buffer append
buffer append behavior getcallbackscript
buffer append
postprocesssettings buffer
buffer append getshowjavascript
return buffer tostring
/**
*
* @param buffer
* @param key
* @param value
*/
private void appendassignment final appendingstringbuffer buffer  final charsequence key
final int value
buffer append key  append
buffer append value
buffer append
/**
*
* @param buffer
* @param key
* @param value
*/
private void appendassignment final appendingstringbuffer buffer  final charsequence key
final boolean value
buffer append key  append
buffer append boolean tostring value
buffer append
/**
*
* @param buffer
* @param key
* @param value
*/
private void appendassignment final appendingstringbuffer buffer  final charsequence key
final charsequence value
buffer append key  append  "
buffer append value
buffer append    n"
/**
* method that allows tweaking the settings
*
* @param settings
* @return settings javascript
*/
protected appendingstringbuffer postprocesssettings final appendingstringbuffer settings
return settings
/**
* detach the 'title' model
*
* @see org.apache.wicket.component#ondetach()
*/
@override
protected void ondetach
super ondetach
if  title    null
title detach
/**
* sets whether window size will be automatically adjusted on opening to fit content's width and
* height. <span style="text-decoration: underline">doesn't work on ie 6.</span>
*
* @param autosize
*            whether window size will be automatically adjusted
* @return this
*/
public modalwindow setautosize final boolean autosize
this autosize   autosize
return this
/**
* returns whether window will be opened in autosize mode.
*
* @return true if the window will be opened open in autosize mode, false otherwise
*/
public boolean isautosize
return autosize
/**
* gives the possibility to provide custom {@link iajaxcalldecorator}
*
* @return the behavior that should be used for the window close button
*/
protected closebuttonbehavior newclosebuttonbehavior
return new closebuttonbehavior