/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket markup html form
import java util collection
import org apache wicket component
import org apache wicket wicketruntimeexception
import org apache wicket markup componenttag
import org apache wicket markup html webmarkupcontainer
import org apache wicket model imodel
import org apache wicket util string strings
/**
* component representing a single checkbox choice in a
* org.apache.wicket.markup.html.form.checkgroup.
*
* must be attached to an &lt;input type=&quot;checkbox&quot; ... &gt; markup.
* <p>
* stateless notes: by default this component cannot be used inside a stateless form. if it is
* desirable to use this inside a stateless form then
* <ul>
* <li>
* override #getvalue() and return some stateless value to uniquely identify this radio (eg relative
* component path from group to this radio)</li>
* <li>
* override {@link #getstatelesshint()} and return <code>true</code></li>
* </ul>
* </p>
*
* @see org.apache.wicket.markup.html.form.checkgroup
*
* @author igor vaynberg
*
* @param <t>
*            the model object type
*/
public class check<t> extends labeledwebmarkupcontainer
private static final long serialversionuid   1l
private static final string attr_disabled
/**
* page-scoped uuid of this check. this property must not be accessed directly, instead
* {@link #getvalue()} must be used
*/
private int uuid    1
private final checkgroup<t> group
/**
* @see webmarkupcontainer#webmarkupcontainer(string)
*/
public check string id
this id  null  null
/**
* @param id
* @param model
* @see webmarkupcontainer#webmarkupcontainer(string, imodel)
*/
public check string id  imodel<t> model
this id  model  null
/**
* @param id
* @param group
*            parent {@link checkgroup} of this check
* @see webmarkupcontainer#webmarkupcontainer(string)
*/
public check string id  checkgroup<t> group
this id  null  group
/**
* @param id
* @param model
* @param group
*            parent {@link checkgroup} of this check
* @see webmarkupcontainer#webmarkupcontainer(string, imodel)
*/
public check string id  imodel<t> model  checkgroup<t> group
super id  model
this group   group
setoutputmarkupid true
/**
* form submission value used for this radio component. this string will appear as the value of
* the <code>value</code> html attribute for the <code>input</code> tag.
*
* @return form submission value
*/
public string getvalue
if  uuid < 0
uuid   getpage   getautoindex
return     uuid
@suppresswarnings
protected checkgroup<t> getgroup
checkgroup<t> group   this group
if  group    null
group   findparent checkgroup class
if  group    null
throw new wicketruntimeexception     getpath
return group
/**
* @see component#oncomponenttag(componenttag)
* @param tag
*            the abstraction representing html tag of this component
*/
@override
protected void oncomponenttag final componenttag tag
// default handling for component tag
super oncomponenttag tag
// must be attached to <input type="checkbox" .../> tag
checkcomponenttag tag
checkcomponenttagattribute tag
checkgroup<?> group   getgroup
final string uuid   getvalue
// assign name and value
tag put    group getinputname
tag put    uuid
// check if the model collection of the group contains the model object.
// if it does check the check box.
collection<?> collection    collection<?> group getdefaultmodelobject
// check for npe in group's model object
if  collection    null
throw new wicketruntimeexception     group getpath
if  group hasrawinput
final string inputarray   group getinputasarray
if  inputarray    null
for  string input   inputarray
if  uuid equals input
tag put
else if  collection contains getdefaultmodelobject
tag put
if  group wantonselectionchangednotifications
// url that points to this components ionchangelistener method
charsequence url   group urlfor ionchangelistener interface
form<?> form   group findparent form class
if  form    null
tag put    form getjsforinterfaceurl url
else
// note: do not encode the url as that would give invalid javascript
tag put        url
url tostring   indexof    >  1 ?          group getinputname
if   isactionauthorized enable      isenabledinhierarchy       group isenabledinhierarchy
tag put attr_disabled  attr_disabled
// put group id into the class so we can easily identify all radios belonging to the group
final string marker       getgroup   getmarkupid
string clazz   tag getattribute
if  strings isempty clazz
clazz   marker
else
clazz   clazz       marker
tag put    clazz
/**
* the value will be made available to the validator property by means of ${label}. it does not
* have any specific meaning to check itself.
*
* @param labelmodel
* @return this for chaining
*/
public check<t> setlabel imodel<string> labelmodel
setlabelinternal labelmodel
return this
/**
* gets model
*
* @return model
*/
@suppresswarnings
public final imodel<t> getmodel
return  imodel<t> getdefaultmodel
/**
* sets model
*
* @param model
*/
public final void setmodel imodel<t> model
setdefaultmodel model
/**
* gets model object
*
* @return model object
*/
@suppresswarnings
public final t getmodelobject
return  t getdefaultmodelobject
/**
* sets model object
*
* @param object
*/
public final void setmodelobject t object
setdefaultmodelobject object
/** {@inheritdoc} */
@override
protected boolean getstatelesshint
// because this component uses uuid field it cannot be stateless
return false