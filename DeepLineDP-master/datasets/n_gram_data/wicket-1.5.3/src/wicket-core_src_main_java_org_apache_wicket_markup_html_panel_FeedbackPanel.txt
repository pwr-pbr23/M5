/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket markup html panel
import java io serializable
import java util collections
import java util comparator
import java util list
import org apache wicket attributemodifier
import org apache wicket component
import org apache wicket feedback feedbackmessage
import org apache wicket feedback feedbackmessagesmodel
import org apache wicket feedback ifeedback
import org apache wicket feedback ifeedbackmessagefilter
import org apache wicket markup html webmarkupcontainer
import org apache wicket markup html basic label
import org apache wicket markup html list listitem
import org apache wicket markup html list listview
import org apache wicket model imodel
import org apache wicket model model
/**
* a panel that displays {@link org.apache.wicket.feedback.feedbackmessage}s in a list view. the
* maximum number of messages to show can be set with setmaxmessages().
*
* @see org.apache.wicket.feedback.feedbackmessage
* @see org.apache.wicket.feedback.feedbackmessages
* @author jonathan locke
* @author eelco hillenius
*/
public class feedbackpanel extends panel implements ifeedback
/**
* list for messages.
*/
private final class messagelistview extends listview<feedbackmessage>
private static final long serialversionuid   1l
/**
* @see org.apache.wicket.component#component(string)
*/
public messagelistview final string id
super id
setdefaultmodel newfeedbackmessagesmodel
@override
protected void populateitem final listitem<feedbackmessage> listitem
final feedbackmessage message   listitem getmodelobject
message markrendered
final imodel<string> replacementmodel   new model<string>
private static final long serialversionuid   1l
/**
* returns feedbackpanel + the message level, eg 'feedbackpanelerror'. this is used
* as the class of the li / span elements.
*
* @see org.apache.wicket.model.imodel#getobject()
*/
@override
public string getobject
return getcssclass message
final component label   newmessagedisplaycomponent    message
final attributemodifier levelmodifier   new attributemodifier    replacementmodel
label add levelmodifier
listitem add levelmodifier
listitem add label
private static final long serialversionuid   1l
/** message view */
private final messagelistview messagelistview
/**
* @see org.apache.wicket.component#component(string)
*/
public feedbackpanel final string id
this id  null
/**
* @see org.apache.wicket.component#component(string)
*
* @param id
* @param filter
*/
public feedbackpanel final string id  ifeedbackmessagefilter filter
super id
webmarkupcontainer messagescontainer   new webmarkupcontainer
private static final long serialversionuid   1l
@override
public boolean isvisible
return anymessage
add messagescontainer
messagelistview   new messagelistview
messagelistview setversioned false
messagescontainer add messagelistview
if  filter    null
setfilter filter
/**
* search messages that this panel will render, and see if there is any message of level error
* or up. this is a convenience method; same as calling 'anymessage(feedbackmessage.error)'.
*
* @return whether there is any message for this panel of level error or up
*/
public final boolean anyerrormessage
return anymessage feedbackmessage error
/**
* search messages that this panel will render, and see if there is any message.
*
* @return whether there is any message for this panel
*/
public final boolean anymessage
return anymessage feedbackmessage undefined
/**
* search messages that this panel will render, and see if there is any message of the given
* level.
*
* @param level
*            the level, see feedbackmessage
* @return whether there is any message for this panel of the given level
*/
public final boolean anymessage int level
list<feedbackmessage> msgs   getcurrentmessages
for  feedbackmessage msg   msgs
if  msg islevel level
return true
return false
/**
* @return model for feedback messages on which you can install filters and other properties
*/
public final feedbackmessagesmodel getfeedbackmessagesmodel
return  feedbackmessagesmodel messagelistview getdefaultmodel
/**
* @return the current message filter
*/
public final ifeedbackmessagefilter getfilter
return getfeedbackmessagesmodel   getfilter
/**
* @return the current sorting comparator
*/
public final comparator<feedbackmessage> getsortingcomparator
return getfeedbackmessagesmodel   getsortingcomparator
/**
* @see org.apache.wicket.component#isversioned()
*/
@override
public boolean isversioned
return false
/**
* sets a filter to use on the feedback messages model
*
* @param filter
*            the message filter to install on the feedback messages model
*
* @return feedbackpanel this.
*/
public final feedbackpanel setfilter ifeedbackmessagefilter filter
getfeedbackmessagesmodel   setfilter filter
return this
/**
* @param maxmessages
*            the maximum number of feedback messages that this feedback panel should show at
*            one time
*
* @return feedbackpanel this.
*/
public final feedbackpanel setmaxmessages int maxmessages
messagelistview setviewsize maxmessages
return this
/**
* sets the comparator used for sorting the messages.
*
* @param sortingcomparator
*            comparator used for sorting the messages.
*
* @return feedbackpanel this.
*/
public final feedbackpanel setsortingcomparator comparator<feedbackmessage> sortingcomparator
getfeedbackmessagesmodel   setsortingcomparator sortingcomparator
return this
/**
* gets the css class for the given message.
*
* @param message
*            the message
* @return the css class; by default, this returns feedbackpanel + the message level, eg
*         'feedbackpanelerror', but you can override this method to provide your own
*/
protected string getcssclass final feedbackmessage message
return     message getlevelasstring
/**
* gets the currently collected messages for this panel.
*
* @return the currently collected messages for this panel, possibly empty
*/
protected final list<feedbackmessage> getcurrentmessages
final list<feedbackmessage> messages   messagelistview getmodelobject
return collections unmodifiablelist messages
/**
* gets a new instance of feedbackmessagesmodel to use.
*
* @return instance of feedbackmessagesmodel to use
*/
protected feedbackmessagesmodel newfeedbackmessagesmodel
return new feedbackmessagesmodel this
/**
* generates a component that is used to display the message inside the feedback panel. this
* component must handle being attached to <code>span</code> tags.
*
* by default a {@link label} is used.
*
* note that the created component is expected to respect feedback panel's
* {@link #getescapemodelstrings()} value
*
* @param id
*            parent id
* @param message
*            feedback message
* @return component used to display the message
*/
protected component newmessagedisplaycomponent string id  feedbackmessage message
serializable serializable   message getmessage
label label   new label id   serializable    null  ?     serializable tostring
label setescapemodelstrings feedbackpanel this getescapemodelstrings
return label