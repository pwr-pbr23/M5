package org apache lucene analysis cjk
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import org apache lucene analysis analyzer
import org apache lucene analysis stopfilter
import org apache lucene analysis tokenstream
import org apache lucene analysis tokenizer
import java io ioexception
import java io reader
import java util set
/**
* an {@link analyzer} that tokenizes text with {@link cjktokenizer} and
* filters with {@link stopfilter}
*
*/
public class cjkanalyzer extends analyzer
//~ static fields/initializers ---------------------------------------------
/**
* an array containing some common english words that are not usually
* useful for searching and some double-byte interpunctions.
*/
public final static string stop_words
//~ instance fields --------------------------------------------------------
/**
* stop word list
*/
private set stoptable
//~ constructors -----------------------------------------------------------
/**
* builds an analyzer which removes words in {@link #stop_words}.
*/
public cjkanalyzer
stoptable   stopfilter makestopset stop_words
/**
* builds an analyzer which removes words in the provided array.
*
* @param stopwords stop word array
*/
public cjkanalyzer string stopwords
stoptable   stopfilter makestopset stopwords
//~ methods ----------------------------------------------------------------
/**
* creates a {@link tokenstream} which tokenizes all the text in the provided {@link reader}.
*
* @param fieldname lucene field name
* @param reader    input {@link reader}
* @return a {@link tokenstream} built from {@link cjktokenizer}, filtered with
*    {@link stopfilter}
*/
public final tokenstream tokenstream string fieldname  reader reader
return new stopfilter new cjktokenizer reader   stoptable
private class savedstreams
tokenizer source
tokenstream result
/**
* returns a (possibly reused) {@link tokenstream} which tokenizes all the text
* in the provided {@link reader}.
*
* @param fieldname lucene field name
* @param reader    input {@link reader}
* @return a {@link tokenstream} built from {@link cjktokenizer}, filtered with
*    {@link stopfilter}
*/
public final tokenstream reusabletokenstream string fieldname  reader reader  throws ioexception
/* tokenstream() is final, no back compat issue */
savedstreams streams    savedstreams  getprevioustokenstream
if  streams    null
streams   new savedstreams
streams source   new cjktokenizer reader
streams result   new stopfilter streams source  stoptable
setprevioustokenstream streams
else
streams source reset reader
return streams result