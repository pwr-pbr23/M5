package org apache lucene analysis
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java io file
import java io ioexception
import java io reader
import java util arrays
import java util set
/** filters {@link lettertokenizer} with {@link lowercasefilter} and {@link stopfilter}. */
public final class stopanalyzer extends analyzer
private final set  <string>   stopwords
// @deprecated
private final boolean usedefaultstoppositionincrement
private final boolean enablepositionincrements
/** an array containing some common english words that are not usually useful
for searching.
@deprecated use {@link #english_stop_words_set} instead */
public static final string english_stop_words
/** an unmodifiable set containing some common english words that are not usually useful
for searching.*/
public static final set  <string>   english_stop_words_set
static
final string stopwords   new string
final chararrayset stopset   new chararrayset stopwords length  false
stopset addall arrays aslist stopwords
english_stop_words_set   chararrayset unmodifiableset stopset
/** builds an analyzer which removes words in
* english_stop_words.
* @deprecated use {@link #stopanalyzer(boolean)} instead */
public stopanalyzer
stopwords   english_stop_words_set
usedefaultstoppositionincrement   true
enablepositionincrements   false
/** builds an analyzer which removes words in
*  english_stop_words.
* @param enablepositionincrements see {@link
* stopfilter#setenablepositionincrements} */
public stopanalyzer boolean enablepositionincrements
stopwords   english_stop_words_set
this enablepositionincrements   enablepositionincrements
usedefaultstoppositionincrement   false
/** builds an analyzer with the stop words from the given set.
* @deprecated use {@link #stopanalyzer(set, boolean)} instead */
public stopanalyzer set stopwords
this stopwords   stopwords
usedefaultstoppositionincrement   true
enablepositionincrements   false
/** builds an analyzer with the stop words from the given set.
* @param stopwords set of stop words
* @param enablepositionincrements see {@link
* stopfilter#setenablepositionincrements} */
public stopanalyzer set stopwords  boolean enablepositionincrements
this stopwords   stopwords
this enablepositionincrements   enablepositionincrements
usedefaultstoppositionincrement   false
/** builds an analyzer which removes words in the provided array.
* @deprecated use {@link #stopanalyzer(set, boolean)} instead */
public stopanalyzer string stopwords
this stopwords   stopfilter makestopset stopwords
usedefaultstoppositionincrement   true
enablepositionincrements   false
/** builds an analyzer which removes words in the provided array.
* @param stopwords array of stop words
* @param enablepositionincrements see {@link
* stopfilter#setenablepositionincrements}
* @deprecated use {@link #stopanalyzer(set, boolean)} instead*/
public stopanalyzer string stopwords  boolean enablepositionincrements
this stopwords   stopfilter makestopset stopwords
this enablepositionincrements   enablepositionincrements
usedefaultstoppositionincrement   false
/** builds an analyzer with the stop words from the given file.
* @see wordlistloader#getwordset(file)
* @deprecated use {@link #stopanalyzer(file, boolean)} instead */
public stopanalyzer file stopwordsfile  throws ioexception
stopwords   wordlistloader getwordset stopwordsfile
usedefaultstoppositionincrement   true
enablepositionincrements   false
/** builds an analyzer with the stop words from the given file.
* @see wordlistloader#getwordset(file)
* @param stopwordsfile file to load stop words from
* @param enablepositionincrements see {@link
* stopfilter#setenablepositionincrements} */
public stopanalyzer file stopwordsfile  boolean enablepositionincrements  throws ioexception
stopwords   wordlistloader getwordset stopwordsfile
this enablepositionincrements   enablepositionincrements
usedefaultstoppositionincrement   false
/** builds an analyzer with the stop words from the given reader.
* @see wordlistloader#getwordset(reader)
* @deprecated use {@link #stopanalyzer(reader, boolean)} instead
*/
public stopanalyzer reader stopwords  throws ioexception
stopwords   wordlistloader getwordset stopwords
usedefaultstoppositionincrement   true
enablepositionincrements   false
/** builds an analyzer with the stop words from the given reader.
* @see wordlistloader#getwordset(reader)
* @param stopwords reader to load stop words from
* @param enablepositionincrements see {@link
* stopfilter#setenablepositionincrements} */
public stopanalyzer reader stopwords  boolean enablepositionincrements  throws ioexception
stopwords   wordlistloader getwordset stopwords
this enablepositionincrements   enablepositionincrements
usedefaultstoppositionincrement   false
/** filters lowercasetokenizer with stopfilter. */
public tokenstream tokenstream string fieldname  reader reader
if  usedefaultstoppositionincrement
return new stopfilter new lowercasetokenizer reader   stopwords
else
return new stopfilter enablepositionincrements  new lowercasetokenizer reader   stopwords
/** filters lowercasetokenizer with stopfilter. */
private class savedstreams
tokenizer source
tokenstream result
public tokenstream reusabletokenstream string fieldname  reader reader  throws ioexception
savedstreams streams    savedstreams  getprevioustokenstream
if  streams    null
streams   new savedstreams
streams source   new lowercasetokenizer reader
if  usedefaultstoppositionincrement
streams result   new stopfilter streams source  stopwords
else
streams result   new stopfilter enablepositionincrements  streams source  stopwords
setprevioustokenstream streams
else
streams source reset reader
return streams result