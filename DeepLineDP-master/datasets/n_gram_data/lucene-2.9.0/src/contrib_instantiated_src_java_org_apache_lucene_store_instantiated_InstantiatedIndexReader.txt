package org apache lucene store instantiated
/**
* copyright 2006 the apache software foundation
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java io ioexception
import java util arrays
import java util collection
import java util hashmap
import java util hashset
import java util iterator
import java util linkedlist
import java util list
import java util map
import java util set
import org apache lucene document document
import org apache lucene document fieldselector
import org apache lucene index corruptindexexception
import org apache lucene index indexreader
import org apache lucene index indexwriter
import org apache lucene index term
import org apache lucene index termdocs
import org apache lucene index termenum
import org apache lucene index termfreqvector
import org apache lucene index termpositions
import org apache lucene index termvectormapper
import org apache lucene store directory
/**
* an instantiatedindexreader is not a snapshot in time, it is completely in
* sync with the latest commit to the store!
* <p>
* consider using instantiatedindex as if it was immutable.
*/
public class instantiatedindexreader extends indexreader
private final instantiatedindex index
public instantiatedindexreader instantiatedindex index
super
this index   index
/**
* @return always true.
*/
public boolean isoptimized
return true
/**
* an instantiatedindexreader is not a snapshot in time, it is completely in
* sync with the latest commit to the store!
*
* @return output from {@link instantiatedindex#getversion()} in associated instantiated index.
*/
public long getversion
return index getversion
public directory directory
throw new unsupportedoperationexception
/**
* an instantiatedindexreader is always current!
*
* check whether this indexreader is still using the current (i.e., most
* recently committed) version of the index. if a writer has committed any
* changes to the index since this reader was opened, this will return
* <code>false</code>, in which case you must open a new indexreader in
* order to see the changes. see the description of the <a
* href="indexwriter.html#autocommit"><code>autocommit</code></a> flag
* which controls when the {@link indexwriter} actually commits changes to the
* index.
*
* @return always true
* @throws corruptindexexception if the index is corrupt
* @throws ioexception if there is a low-level io error
* @throws unsupportedoperationexception unless overridden in subclass
*/
public boolean iscurrent   throws ioexception
return true
public instantiatedindex getindex
return index
private set<instantiateddocument> deleteddocuments   new hashset<instantiateddocument>
private set<integer> deleteddocumentnumbers   new hashset<integer>
private map<string list<normupdate>> updatednormsbyfieldnameanddocumentnumber   null
private class normupdate
private int doc
private byte value
public normupdate int doc  byte value
this doc   doc
this value   value
public int numdocs
return getindex   getdocumentsbynumber   length   index getdeleteddocuments   size     deleteddocuments size
public int maxdoc
return getindex   getdocumentsbynumber   length
public boolean isdeleted int n
return getindex   getdeleteddocuments   contains n     deleteddocumentnumbers contains n
public boolean hasdeletions
return getindex   getdeleteddocuments   size   > 0    deleteddocumentnumbers size   > 0
protected void dodelete int docnum  throws ioexception
if   getindex   getdeleteddocuments   contains docnum
if  deleteddocumentnumbers add docnum
deleteddocuments add getindex   getdocumentsbynumber
protected void doundeleteall   throws ioexception
deleteddocumentnumbers clear
deleteddocuments clear
protected void docommit   throws ioexception
// todo: read/write lock
boolean updated   false
// 1. update norms
if  updatednormsbyfieldnameanddocumentnumber    null
for  map entry<string list<normupdate>> e   updatednormsbyfieldnameanddocumentnumber entryset
byte norms   getindex   getnormsbyfieldnameanddocumentnumber   get e getkey
for  normupdate normupdate   e getvalue
norms   normupdate value
updatednormsbyfieldnameanddocumentnumber   null
updated   true
// 2. remove deleted documents
if  deleteddocumentnumbers size   > 0
for  integer doc   deleteddocumentnumbers
getindex   getdeleteddocuments   add doc
deleteddocumentnumbers clear
deleteddocuments clear
updated   true
// todo unlock read/writelock
protected void doclose   throws ioexception
// ignored
// todo perhaps release all associated instances?
public collection getfieldnames fieldoption fieldoption
set<string> fieldset   new hashset<string>
for  fieldsetting fi   index getfieldsettings   values
if  fieldoption    indexreader fieldoption all
fieldset add fi fieldname
else if   fi indexed    fieldoption    indexreader fieldoption unindexed
fieldset add fi fieldname
else if  fi storepayloads    fieldoption    indexreader fieldoption stores_payloads
fieldset add fi fieldname
else if  fi indexed    fieldoption    indexreader fieldoption indexed
fieldset add fi fieldname
else if  fi indexed    fi storetermvector    false    fieldoption    indexreader fieldoption indexed_no_termvector
fieldset add fi fieldname
else if  fi storetermvector    true    fi storepositionwithtermvector    false    fi storeoffsetwithtermvector    false
fieldoption    indexreader fieldoption termvector
fieldset add fi fieldname
else if  fi indexed    fi storetermvector    fieldoption    indexreader fieldoption indexed_with_termvector
fieldset add fi fieldname
else if  fi storepositionwithtermvector    fi storeoffsetwithtermvector    false
fieldoption    indexreader fieldoption termvector_with_position
fieldset add fi fieldname
else if  fi storeoffsetwithtermvector    fi storepositionwithtermvector    false
fieldoption    indexreader fieldoption termvector_with_offset
fieldset add fi fieldname
else if   fi storeoffsetwithtermvector    fi storepositionwithtermvector
fieldoption    indexreader fieldoption termvector_with_position_offset
fieldset add fi fieldname
return fieldset
/**
* return the {@link org.apache.lucene.document.document} at the <code>n</code><sup>th</sup>
* position.
<p>
* <b>warning!</b>
* the resulting document is the actual stored document instance
* and not a deserialized clone as retuned by an indexreader
* over a {@link org.apache.lucene.store.directory}.
* i.e., if you need to touch the document, clone it first!
* <p>
* this can also be seen as a feature for live changes of stored values,
* but be careful! adding a field with an name unknown to the index
* or to a field with previously no stored values will make
* {@link org.apache.lucene.store.instantiated.instantiatedindexreader#getfieldnames(org.apache.lucene.index.indexreader.fieldoption)}
* out of sync, causing problems for instance when merging the
* instantiated index to another index.
<p>
* this implementation ignores the field selector! all stored fields are always returned!
* <p>
*
* @param n document number
* @param fieldselector ignored
* @return the stored fields of the {@link org.apache.lucene.document.document} at the nth position
* @throws corruptindexexception if the index is corrupt
* @throws ioexception if there is a low-level io error
*
* @see org.apache.lucene.document.fieldable
* @see org.apache.lucene.document.fieldselector
* @see org.apache.lucene.document.setbasedfieldselector
* @see org.apache.lucene.document.loadfirstfieldselector
*/
public document document int n  fieldselector fieldselector  throws corruptindexexception  ioexception
return document n
/**
* returns the stored fields of the <code>n</code><sup>th</sup>
* <code>document</code> in this index.
* <p>
* <b>warning!</b>
* the resulting document is the actual stored document instance
* and not a deserialized clone as retuned by an indexreader
* over a {@link org.apache.lucene.store.directory}.
* i.e., if you need to touch the document, clone it first!
* <p>
* this can also be seen as a feature for live changes of stored values,
* but be careful! adding a field with an name unknown to the index
* or to a field with previously no stored values will make
* {@link org.apache.lucene.store.instantiated.instantiatedindexreader#getfieldnames(org.apache.lucene.index.indexreader.fieldoption)}
* out of sync, causing problems for instance when merging the
* instantiated index to another index.
*
* @throws corruptindexexception if the index is corrupt
* @throws ioexception if there is a low-level io error
*/
public document document int n  throws ioexception
return isdeleted n  ? null   getindex   getdocumentsbynumber   getdocument
/**
* never ever touch these values. it is the true values, unless norms have
* been touched.
*/
public byte norms string field  throws ioexception
byte norms   getindex   getnormsbyfieldnameanddocumentnumber   get field
if  norms    null
return new byte     todo a static final zero length attribute?
if  updatednormsbyfieldnameanddocumentnumber    null
norms   norms clone
list<normupdate> updated   updatednormsbyfieldnameanddocumentnumber get field
if  updated    null
for  normupdate normupdate   updated
norms   normupdate value
return norms
public void norms string field  byte bytes  int offset  throws ioexception
byte norms   getindex   getnormsbyfieldnameanddocumentnumber   get field
if  norms    null
return
system arraycopy norms  0  bytes  offset  norms length
protected void dosetnorm int doc  string field  byte value  throws ioexception
if  updatednormsbyfieldnameanddocumentnumber    null
updatednormsbyfieldnameanddocumentnumber   new hashmap<string list<normupdate>> getindex   getnormsbyfieldnameanddocumentnumber   size
list<normupdate> list   updatednormsbyfieldnameanddocumentnumber get field
if  list    null
list   new linkedlist<normupdate>
updatednormsbyfieldnameanddocumentnumber put field  list
list add new normupdate doc  value
public int docfreq term t  throws ioexception
instantiatedterm term   getindex   findterm t
if  term    null
return 0
else
return term getassociateddocuments   length
public termenum terms   throws ioexception
return new instantiatedtermenum this
public termenum terms term t  throws ioexception
instantiatedterm it   getindex   findterm t
if  it    null
return new instantiatedtermenum this  it gettermindex
else
int startpos   arrays binarysearch index getorderedterms    t  instantiatedterm termcomparator
if  startpos < 0
startpos    1   startpos
return new instantiatedtermenum this  startpos
public termdocs termdocs   throws ioexception
return new instantiatedtermdocs this
public termpositions termpositions   throws ioexception
return new instantiatedtermpositions this
public termfreqvector gettermfreqvectors int docnumber  throws ioexception
instantiateddocument doc   getindex   getdocumentsbynumber
if  doc getvectorspace      null
return null
termfreqvector ret   new termfreqvector
iterator<string> it   doc getvectorspace   keyset   iterator
for  int i   0  i < ret length  i
ret   new instantiatedtermpositionvector getindex   getdocumentsbynumber    it next
return ret
public termfreqvector gettermfreqvector int docnumber  string field  throws ioexception
instantiateddocument doc   getindex   getdocumentsbynumber
if  doc getvectorspace      null    doc getvectorspace   get field     null
return null
else
return new instantiatedtermpositionvector doc  field
public void gettermfreqvector int docnumber  string field  termvectormapper mapper  throws ioexception
instantiateddocument doc   getindex   getdocumentsbynumber
if  doc getvectorspace      null    doc getvectorspace   get field     null
list<instantiatedtermdocumentinformation> tv   doc getvectorspace   get field
mapper setexpectations field  tv size    true  true
for  instantiatedtermdocumentinformation tdi   tv
mapper map tdi getterm   text    tdi gettermpositions   length  tdi gettermoffsets    tdi gettermpositions
public void gettermfreqvector int docnumber  termvectormapper mapper  throws ioexception
instantiateddocument doc   getindex   getdocumentsbynumber
for  map entry<string list<instantiatedtermdocumentinformation>> e   doc getvectorspace   entryset
mapper setexpectations e getkey    e getvalue   size    true  true
for  instantiatedtermdocumentinformation tdi   e getvalue
mapper map tdi getterm   text    tdi gettermpositions   length  tdi gettermoffsets    tdi gettermpositions