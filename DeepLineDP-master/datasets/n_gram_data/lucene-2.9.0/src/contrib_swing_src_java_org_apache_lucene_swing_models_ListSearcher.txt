package org apache lucene swing models
/**
* copyright 2005 the apache software foundation
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import org apache lucene store ramdirectory
import org apache lucene analysis analyzer
import org apache lucene analysis whitespaceanalyzer
import org apache lucene index indexwriter
import org apache lucene document document
import org apache lucene document field
import org apache lucene document fieldable
import org apache lucene search indexsearcher
import org apache lucene search query
import org apache lucene search hits
import org apache lucene queryparser multifieldqueryparser
import javax swing
import javax swing event listdatalistener
import javax swing event listdataevent
import java util arraylist
/**
* see table searcher explanation.
*
*/
public class listsearcher extends abstractlistmodel
private listmodel listmodel
/**
* the reference links between the decorated listmodel
* and this list model based on search criteria
*/
private arraylist rowtomodelindex   new arraylist
/**
* in memory lucene index
*/
private ramdirectory directory
/**
* cached lucene analyzer
*/
private analyzer analyzer
/**
* links between this list model and the decorated list model
* are maintained through links based on row number. this is a
* key constant to denote "row number" for indexing
*/
private static final string row_number
/**
* since we only have one field, unlike lists with multiple
* fields -- we are just using a constant to denote field name.
* this is most likely unnecessary and should be removed at
* a later date
*/
private static final string field_name
/**
* cache the current search string. also used internally to
* key whether there is an active search running or not. i.e. if
* searchstring is null, there is no active search.
*/
private string searchstring   null
private listdatalistener listmodellistener
public listsearcher listmodel newmodel
analyzer   new whitespaceanalyzer
setlistmodel newmodel
listmodellistener   new listmodelhandler
newmodel addlistdatalistener listmodellistener
clearsearchingstate
private void setlistmodel listmodel newmodel
//remove listeners if there...
if  newmodel    null
newmodel removelistdatalistener listmodellistener
listmodel   newmodel
if  listmodel    null
listmodel addlistdatalistener listmodellistener
//recalculate the links between this list model and
//the inner list model since the decorated model just changed
reindex
// let all listeners know the list has changed
firecontentschanged this  0  getsize
private void reindex
try
// recreate the ramdirectory
directory   new ramdirectory
indexwriter writer   new indexwriter directory  analyzer  true  indexwriter maxfieldlength limited
// iterate through all rows
for  int row 0  row < listmodel getsize    row
//for each row make a new document
document document   new document
//add the row number of this row in the decorated list model
//this will allow us to retrieve the results later
//and map this list model's row to a row in the decorated
//list model
document add new field row_number      row  field store yes  field index analyzed
//add the string representation of the row to the index
document add new field field_name  string valueof listmodel getelementat row   tolowercase    field store yes  field index analyzed
writer adddocument document
writer optimize
writer close
catch  exception e
e printstacktrace
/**
* run a new search.
*
* @param searchstring any valid lucene search string
*/
public void search string searchstring
//if search string is null or empty, clear the search == search all
if  searchstring    null    searchstring equals
clearsearchingstate
firecontentschanged this  0  getsize
return
try
//cache search string
this searchstring   searchstring
//make a new index searcher with the in memory (ram) index.
indexsearcher is   new indexsearcher directory
//make an array of fields - one for each column
string fields    field_name
//build a query based on the fields, searchstring and cached analyzer
//note: this is an area for improvement since the multifieldqueryparser
// has some weirdness.
multifieldqueryparser parser   new multifieldqueryparser fields  analyzer
query query  parser parse searchstring
//run the search
hits hits   is search query
//reset this list model with the new results
resetsearchresults hits
catch  exception e
e printstacktrace
//notify all listeners that the list has been changed
firecontentschanged this  0  getsize
/**
*
* @param hits the new result set to set this list to.
*/
private void resetsearchresults hits hits
try
//clear our index mapping this list model rows to
//the decorated inner list model
rowtomodelindex clear
//iterate through the hits
//get the row number stored at the index
//that number is the row number of the decorated
//table model row that we are mapping to
for  int t 0  t<hits length    t
document document   hits doc t
fieldable field   document getfield row_number
rowtomodelindex add new integer field stringvalue
catch  exception e
e printstacktrace
/**
* @return the current lucene analyzer
*/
public analyzer getanalyzer
return analyzer
/**
* @param analyzer the new analyzer to use
*/
public void setanalyzer analyzer analyzer
this analyzer   analyzer
//reindex from the model with the new analyzer
reindex
//rerun the search if there is an active search
if  issearching
search searchstring
private boolean issearching
return searchstring    null
private void clearsearchingstate
searchstring   null
rowtomodelindex clear
for  int t 0  t<listmodel getsize    t
rowtomodelindex add new integer t
private int getmodelrow int row
return   integer  rowtomodelindex get row   intvalue
public int getsize
return  listmodel    null  ? 0   rowtomodelindex size
public object getelementat int index
return listmodel getelementat getmodelrow index
class listmodelhandler implements listdatalistener
public void contentschanged listdataevent e
somethingchanged
public void intervaladded listdataevent e
somethingchanged
public void intervalremoved listdataevent e
somethingchanged
private void somethingchanged
// if we're not searching, just pass the event along.
if   issearching
clearsearchingstate
reindex
firecontentschanged listsearcher this  0  getsize
return
// something has happened to the data that may have invalidated the search.
reindex
search searchstring
firecontentschanged listsearcher this  0  getsize
return