package org apache lucene swing models
/**
* copyright 2005 the apache software foundation
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import org apache lucene analysis analyzer
import org apache lucene analysis whitespaceanalyzer
import org apache lucene document document
import org apache lucene document field
import org apache lucene document fieldable
import org apache lucene index indexwriter
import org apache lucene queryparser multifieldqueryparser
import org apache lucene search hits
import org apache lucene search indexsearcher
import org apache lucene search query
import org apache lucene store ramdirectory
import javax swing event tablemodelevent
import javax swing event tablemodellistener
import javax swing table abstracttablemodel
import javax swing table tablemodel
import java util arraylist
/**
* this is a tablemodel that encapsulates lucene
* search logic within a tablemodel implementation.
* it is implemented as a tablemodel decorator,
* similar to the tablesorter demo from sun that decorates
* a tablemodel and provides sorting functionality. the benefit
* of this architecture is that you can decorate any tablemodel
* implementation with this searching table model -- making it
* easy to add searching functionality to existing jtables -- or
* making new search capable table lucene.
*
* <p>this decorator works by holding a reference to a decorated ot inner
* tablemodel. all data is stored within that table model, not this
* table model. rather, this table model simply manages links to
* data in the inner table model according to the search. all methods on
* tablesearcher forward to the inner table model with subtle filtering
* or alteration according to the search criteria.
*
* <p>using the table model:
*
* pass the tablemodel you want to decorate in at the constructor. when
* the tablemodel initializes, it displays all search results. call
* the search method with any valid lucene search string and the data
* will be filtered by the search string. users can always clear the search
* at any time by searching with an empty string. additionally, you can
* add a button calling the clearsearch() method.
*
*/
public class tablesearcher extends abstracttablemodel
/**
* the inner table model we are decorating
*/
protected tablemodel tablemodel
/**
* this listener is used to register this class as a listener to
* the decorated table model for update events
*/
private tablemodellistener tablemodellistener
/**
* these keeps reference to the decorated table model for data
* only rows that match the search criteria are linked
*/
private arraylist rowtomodelindex   new arraylist
//lucene stuff.
/**
* in memory lucene index
*/
private ramdirectory directory
/**
* cached lucene analyzer
*/
private analyzer analyzer
/**
* links between this table model and the decorated table model
* are maintained through links based on row number. this is a
* key constant to denote "row number" for indexing
*/
private static final string row_number
/**
* cache the current search string. also used internally to
* key whether there is an active search running or not. i.e. if
* searchstring is null, there is no active search.
*/
private string searchstring   null
/**
* @param tablemodel the table model to decorate
*/
public tablesearcher tablemodel tablemodel
analyzer   new whitespaceanalyzer
tablemodellistener   new tablemodelhandler
settablemodel tablemodel
tablemodel addtablemodellistener tablemodellistener
clearsearchingstate
/**
*
* @return the inner table model this table model is decorating
*/
public tablemodel gettablemodel
return tablemodel
/**
* set the table model used by this table model
* @param tablemodel the new table model to decorate
*/
public void settablemodel tablemodel tablemodel
//remove listeners if there...
if  this tablemodel    null
this tablemodel removetablemodellistener tablemodellistener
this tablemodel   tablemodel
if  this tablemodel    null
this tablemodel addtablemodellistener tablemodellistener
//recalculate the links between this table model and
//the inner table model since the decorated model just changed
reindex
// let all listeners know the table has changed
firetablestructurechanged
/**
* reset the search results and links to the decorated (inner) table
* model from this table model.
*/
private void reindex
try
// recreate the ramdirectory
directory   new ramdirectory
indexwriter writer   new indexwriter directory  analyzer  true
// iterate through all rows
for  int row 0  row < tablemodel getrowcount    row
//for each row make a new document
document document   new document
//add the row number of this row in the decorated table model
//this will allow us to retrieve the results later
//and map this table model's row to a row in the decorated
//table model
document add new field row_number      row  field store yes  field index analyzed
//iterate through all columns
//index the value keyed by the column name
//note: there could be a problem with using column names with spaces
for  int column 0  column < tablemodel getcolumncount    column
string columnname   tablemodel getcolumnname column
string columnvalue   string valueof tablemodel getvalueat row  column   tolowercase
document add new field columnname  columnvalue  field store yes  field index analyzed
writer adddocument document
writer optimize
writer close
catch  exception e
e printstacktrace
/**
* @return the current lucene analyzer
*/
public analyzer getanalyzer
return analyzer
/**
* @param analyzer the new analyzer to use
*/
public void setanalyzer analyzer analyzer
this analyzer   analyzer
//reindex from the model with the new analyzer
reindex
//rerun the search if there is an active search
if  issearching
search searchstring
/**
* run a new search.
*
* @param searchstring any valid lucene search string
*/
public void search string searchstring
//if search string is null or empty, clear the search == search all
if  searchstring    null    searchstring equals
clearsearchingstate
firetabledatachanged
return
try
//cache search string
this searchstring   searchstring
//make a new index searcher with the in memory (ram) index.
indexsearcher is   new indexsearcher directory
//make an array of fields - one for each column
string fields   new string
for  int t 0  t<tablemodel getcolumncount    t
fields tablemodel getcolumnname t
//build a query based on the fields, searchstring and cached analyzer
//note: this is an area for improvement since the multifieldqueryparser
// has some weirdness.
multifieldqueryparser parser   new multifieldqueryparser fields  analyzer
query query   parser parse searchstring
//run the search
hits hits   is search query
//reset this table model with the new results
resetsearchresults hits
catch  exception e
e printstacktrace
//notify all listeners that the table has been changed
firetablestructurechanged
/**
*
* @param hits the new result set to set this table to.
*/
private void resetsearchresults hits hits
try
//clear our index mapping this table model rows to
//the decorated inner table model
rowtomodelindex clear
//iterate through the hits
//get the row number stored at the index
//that number is the row number of the decorated
//table model row that we are mapping to
for  int t 0  t<hits length    t
document document   hits doc t
fieldable field   document getfield row_number
rowtomodelindex add new integer field stringvalue
catch  exception e
e printstacktrace
private int getmodelrow int row
return   integer  rowtomodelindex get row   intvalue
/**
* clear the currently active search
* resets the complete dataset of the decorated
* table model.
*/
private void clearsearchingstate
searchstring   null
rowtomodelindex clear
for  int t 0  t<tablemodel getrowcount    t
rowtomodelindex add new integer t
// tablemodel interface methods
public int getrowcount
return  tablemodel    null  ? 0   rowtomodelindex size
public int getcolumncount
return  tablemodel    null  ? 0   tablemodel getcolumncount
public string getcolumnname int column
return tablemodel getcolumnname column
public class getcolumnclass int column
return tablemodel getcolumnclass column
public boolean iscelleditable int row  int column
return tablemodel iscelleditable getmodelrow row   column
public object getvalueat int row  int column
return tablemodel getvalueat getmodelrow row   column
public void setvalueat object avalue  int row  int column
tablemodel setvalueat avalue  getmodelrow row   column
private boolean issearching
return searchstring    null
private class tablemodelhandler implements tablemodellistener
public void tablechanged tablemodelevent e
// if we're not searching, just pass the event along.
if   issearching
clearsearchingstate
reindex
firetablechanged e
return
// something has happened to the data that may have invalidated the search.
reindex
search searchstring
firetabledatachanged
return