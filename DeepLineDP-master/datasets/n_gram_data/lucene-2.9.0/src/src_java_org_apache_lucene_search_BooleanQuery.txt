package org apache lucene search
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import org apache lucene index indexreader
import org apache lucene util tostringutils
import org apache lucene search booleanclause occur
import java io ioexception
import java util
/** a query that matches documents matching boolean combinations of other
* queries, e.g. {@link termquery}s, {@link phrasequery}s or other
* booleanquerys.
*/
public class booleanquery extends query
private static int maxclausecount   1024
/** thrown when an attempt is made to add more than {@link
* #getmaxclausecount()} clauses. this typically happens if
* a prefixquery, fuzzyquery, wildcardquery, or termrangequery
* is expanded to many terms during search.
*/
public static class toomanyclauses extends runtimeexception
public toomanyclauses
public string getmessage
return     maxclausecount
/** return the maximum number of clauses permitted, 1024 by default.
* attempts to add more than the permitted number of clauses cause {@link
* toomanyclauses} to be thrown.
* @see #setmaxclausecount(int)
*/
public static int getmaxclausecount     return maxclausecount
/**
* set the maximum number of clauses permitted per booleanquery.
* default value is 1024.
*/
public static void setmaxclausecount int maxclausecount
if  maxclausecount < 1
throw new illegalargumentexception
booleanquery maxclausecount   maxclausecount
private arraylist clauses   new arraylist
private boolean disablecoord
/** constructs an empty boolean query. */
public booleanquery
/** constructs an empty boolean query.
*
* {@link similarity#coord(int,int)} may be disabled in scoring, as
* appropriate. for example, this score factor does not make sense for most
* automatically generated queries, like {@link wildcardquery} and {@link
* fuzzyquery}.
*
* @param disablecoord disables {@link similarity#coord(int,int)} in scoring.
*/
public booleanquery boolean disablecoord
this disablecoord   disablecoord
/** returns true iff {@link similarity#coord(int,int)} is disabled in
* scoring for this query instance.
* @see #booleanquery(boolean)
*/
public boolean iscoorddisabled     return disablecoord
// implement coord disabling.
// inherit javadoc.
public similarity getsimilarity searcher searcher
similarity result   super getsimilarity searcher
if  disablecoord                                 disable coord as requested
result   new similaritydelegator result
public float coord int overlap  int maxoverlap
return 1 0f
return result
/**
* specifies a minimum number of the optional booleanclauses
* which must be satisfied.
*
* <p>
* by default no optional clauses are necessary for a match
* (unless there are no required clauses).  if this method is used,
* then the specified number of clauses is required.
* </p>
* <p>
* use of this method is totally independent of specifying that
* any specific clauses are required (or prohibited).  this number will
* only be compared against the number of matching optional clauses.
* </p>
* <p>
* expert note: using this method may force collecting docs in order,
* regardless of whether setallowdocsoutoforder(true) has been called.
* </p>
*
* @param min the number of optional clauses that must match
* @see #setallowdocsoutoforder
*/
public void setminimumnumbershouldmatch int min
this minnrshouldmatch   min
protected int minnrshouldmatch   0
/**
* gets the minimum number of the optional booleanclauses
* which must be satisfied.
*/
public int getminimumnumbershouldmatch
return minnrshouldmatch
/** adds a clause to a boolean query.
*
* @throws toomanyclauses if the new number of clauses exceeds the maximum clause number
* @see #getmaxclausecount()
*/
public void add query query  booleanclause occur occur
add new booleanclause query  occur
/** adds a clause to a boolean query.
* @throws toomanyclauses if the new number of clauses exceeds the maximum clause number
* @see #getmaxclausecount()
*/
public void add booleanclause clause
if  clauses size   >  maxclausecount
throw new toomanyclauses
clauses add clause
/** returns the set of clauses in this query. */
public booleanclause getclauses
return  booleanclause clauses toarray new booleanclause
/** returns the list of clauses in this query. */
public list clauses     return clauses
/**
* expert: the weight for booleanquery, used to
* normalize, score and explain these queries.
*
* <p>note: this api and implementation is subject to
* change suddenly in the next release.</p>
*/
protected class booleanweight extends weight
/** the similarity implementation. */
protected similarity similarity
protected arraylist weights
public booleanweight searcher searcher
throws ioexception
this similarity   getsimilarity searcher
weights   new arraylist clauses size
for  int i   0   i < clauses size    i
booleanclause c    booleanclause clauses get i
weights add c getquery   createweight searcher
public query getquery     return booleanquery this
public float getvalue     return getboost
public float sumofsquaredweights   throws ioexception
float sum   0 0f
for  int i   0   i < weights size    i
booleanclause c    booleanclause clauses get i
weight w    weight weights get i
// call sumofsquaredweights for all clauses in case of side effects
float s   w sumofsquaredweights               sum sub weights
if   c isprohibited
// only add to sum for non-prohibited clauses
sum    s
sum    getboost     getboost                   boost each sub weight
return sum
public void normalize float norm
norm    getboost                               incorporate boost
for  iterator iter   weights iterator    iter hasnext
weight w    weight  iter next
// normalize all clauses, (even if prohibited in case of side affects)
w normalize norm
public explanation explain indexreader reader  int doc
throws ioexception
final int minshouldmatch
booleanquery this getminimumnumbershouldmatch
complexexplanation sumexpl   new complexexplanation
sumexpl setdescription
int coord   0
int maxcoord   0
float sum   0 0f
boolean fail   false
int shouldmatchcount   0
for  iterator witer   weights iterator    citer   clauses iterator    witer hasnext
weight w    weight  witer next
booleanclause c    booleanclause  citer next
if  w scorer reader  true  true     null
continue
explanation e   w explain reader  doc
if   c isprohibited    maxcoord
if  e ismatch
if   c isprohibited
sumexpl adddetail e
sum    e getvalue
coord
else
explanation r
new explanation 0 0f      c getquery   tostring
r adddetail e
sumexpl adddetail r
fail   true
if  c getoccur      occur should
shouldmatchcount
else if  c isrequired
explanation r   new explanation 0 0f      c getquery   tostring
r adddetail e
sumexpl adddetail r
fail   true
if  fail
sumexpl setmatch boolean false
sumexpl setvalue 0 0f
sumexpl setdescription
return sumexpl
else if  shouldmatchcount < minshouldmatch
sumexpl setmatch boolean false
sumexpl setvalue 0 0f
sumexpl setdescription
minshouldmatch
return sumexpl
sumexpl setmatch 0 < coord ? boolean true   boolean false
sumexpl setvalue sum
float coordfactor   similarity coord coord  maxcoord
if  coordfactor    1 0f                          coord is no op
return sumexpl                                 eliminate wrapper
else
complexexplanation result   new complexexplanation sumexpl ismatch
sum coordfactor
result adddetail sumexpl
result adddetail new explanation coordfactor
coord   maxcoord
return result
public scorer scorer indexreader reader  boolean scoredocsinorder  boolean topscorer
throws ioexception
list required   new arraylist
list prohibited   new arraylist
list optional   new arraylist
for  iterator witer   weights iterator    citer   clauses iterator    witer hasnext
weight w    weight  witer next
booleanclause c    booleanclause  citer next
scorer subscorer   w scorer reader  true  false
if  subscorer    null
if  c isrequired
return null
else if  c isrequired
required add subscorer
else if  c isprohibited
prohibited add subscorer
else
optional add subscorer
// check if we can return a booleanscorer
scoredocsinorder     allowdocsoutoforder     until it is removed  factor in the static setting
if   scoredocsinorder    topscorer    required size      0    prohibited size   < 32
return new booleanscorer similarity  minnrshouldmatch  optional  prohibited
if  required size      0    optional size      0
// no required and optional clauses.
return null
else if  optional size   < minnrshouldmatch
// either >1 req scorer, or there are 0 req scorers and at least 1
// optional scorer. therefore if there are not enough optional scorers
// no documents will be matched by the query
return null
// return a booleanscorer2
return new booleanscorer2 similarity  minnrshouldmatch  required  prohibited  optional
public boolean scoresdocsoutoforder
int numprohibited   0
for  iterator citer   clauses iterator    citer hasnext
booleanclause c    booleanclause  citer next
if  c isrequired
return false     bs2  in order  will be used by scorer
else if  c isprohibited
numprohibited
if  numprohibited > 32       cannot use bs
return false
// scorer() will return an out-of-order scorer if requested.
return true
/**
* whether hit docs may be collected out of docid order.
*
* @deprecated this will not be needed anymore, as
*             {@link weight#scoresdocsoutoforder()} is used.
*/
private static boolean allowdocsoutoforder   true
/**
* expert: indicates whether hit docs may be collected out of docid order.
*
* <p>
* background: although the contract of the scorer class requires that
* documents be iterated in order of doc id, this was not true in early
* versions of lucene. many pieces of functionality in the current lucene code
* base have undefined behavior if this contract is not upheld, but in some
* specific simple cases may be faster. (for example: disjunction queries with
* less than 32 prohibited clauses; this setting has no effect for other
* queries.)
* </p>
*
* <p>
* specifics: by setting this option to true, docid n might be scored for a
* single segment before docid n-1. across multiple segments, docs may be
* scored out of order regardless of this setting - it only applies to scoring
* a single segment.
*
* being static, this setting is system wide.
* </p>
*
* @deprecated this is not needed anymore, as
*             {@link weight#scoresdocsoutoforder()} is used.
*/
public static void setallowdocsoutoforder boolean allow
allowdocsoutoforder   allow
/**
* whether hit docs may be collected out of docid order.
*
* @see #setallowdocsoutoforder(boolean)
* @deprecated this is not needed anymore, as
*             {@link weight#scoresdocsoutoforder()} is used.
*/
public static boolean getallowdocsoutoforder
return allowdocsoutoforder
/**
* @deprecated use {@link #setallowdocsoutoforder(boolean)} instead.
*/
public static void setusescorer14 boolean use14
setallowdocsoutoforder use14
/**
* @deprecated use {@link #getallowdocsoutoforder()} instead.
*/
public static boolean getusescorer14
return getallowdocsoutoforder
public weight createweight searcher searcher  throws ioexception
return new booleanweight searcher
public query rewrite indexreader reader  throws ioexception
if  minnrshouldmatch    0    clauses size      1                          optimize 1 clause queries
booleanclause c    booleanclause clauses get 0
if   c isprohibited     			     just return clause
query query   c getquery   rewrite reader         rewrite first
if  getboost      1 0f                       incorporate boost
if  query    c getquery                         if rewrite was no op
query    query query clone               then clone before boost
query setboost getboost     query getboost
return query
booleanquery clone   null                        recursively rewrite
for  int i   0   i < clauses size    i
booleanclause c    booleanclause clauses get i
query query   c getquery   rewrite reader
if  query    c getquery                             clause rewrote  must clone
if  clone    null
clone    booleanquery this clone
clone clauses set i  new booleanclause query  c getoccur
if  clone    null
return clone                                   some clauses rewrote
else
return this                                    no clauses rewrote
// inherit javadoc
public void extractterms set terms
for  iterator i   clauses iterator    i hasnext
booleanclause clause    booleanclause  i next
clause getquery   extractterms terms
public object clone
booleanquery clone    booleanquery super clone
clone clauses    arraylist this clauses clone
return clone
/** prints a user-readable version of this query. */
public string tostring string field
stringbuffer buffer   new stringbuffer
boolean needparens  getboost      1 0      getminimumnumbershouldmatch  >0
if  needparens
buffer append
for  int i   0   i < clauses size    i
booleanclause c    booleanclause clauses get i
if  c isprohibited
buffer append
else if  c isrequired
buffer append
query subquery   c getquery
if  subquery    null
if  subquery instanceof booleanquery   	     wrap sub bools in parens
buffer append
buffer append subquery tostring field
buffer append
else
buffer append subquery tostring field
else
buffer append
if  i    clauses size   1
buffer append
if  needparens
buffer append
if  getminimumnumbershouldmatch  >0
buffer append
buffer append getminimumnumbershouldmatch
if  getboost      1 0f
buffer append tostringutils boost getboost
return buffer tostring
/** returns true iff <code>o</code> is equal to this. */
public boolean equals object o
if    o instanceof booleanquery
return false
booleanquery other    booleanquery o
return  this getboost      other getboost
this clauses equals other clauses
this getminimumnumbershouldmatch      other getminimumnumbershouldmatch
/** returns a hash code value for this object.*/
public int hashcode
return float floattointbits getboost    ^ clauses hashcode
getminimumnumbershouldmatch