package org apache lucene search highlight
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java io ioexception
import java util arraylist
import java util collection
import java util hashmap
import java util hashset
import java util iterator
import java util list
import java util map
import java util set
import org apache lucene analysis cachingtokenfilter
import org apache lucene analysis tokenstream
import org apache lucene index indexreader
import org apache lucene index term
import org apache lucene index memory memoryindex
import org apache lucene search booleanclause
import org apache lucene search booleanquery
import org apache lucene search disjunctionmaxquery
import org apache lucene search filteredquery
import org apache lucene search fuzzyquery
import org apache lucene search indexsearcher
import org apache lucene search multiphrasequery
import org apache lucene search multitermquery
import org apache lucene search phrasequery
import org apache lucene search prefixquery
import org apache lucene search query
import org apache lucene search termquery
import org apache lucene search termrangequery
import org apache lucene search wildcardquery
import org apache lucene search spans spannearquery
import org apache lucene search spans spanorquery
import org apache lucene search spans spanquery
import org apache lucene search spans spantermquery
import org apache lucene search spans spans
import org apache lucene util stringhelper
/**
* class used to extract {@link weightedspanterm}s from a {@link query} based on whether
* {@link term}s from the {@link query} are contained in a supplied {@link tokenstream}.
*/
public class weightedspantermextractor
private string fieldname
private tokenstream tokenstream
private map readers   new hashmap 10      map<string  indexreader>
private string defaultfield
private boolean expandmultitermquery
private boolean cachedtokenstream
private boolean wraptocaching   true
public weightedspantermextractor
public weightedspantermextractor string defaultfield
if  defaultfield    null
this defaultfield   stringhelper intern defaultfield
private void closereaders
collection readerset   readers values
iterator it   readerset iterator
while  it hasnext
indexreader reader    indexreader  it next
try
reader close
catch  ioexception e
// alert?
/**
* fills a <code>map</code> with <@link weightedspanterm>s using the terms from the supplied <code>query</code>.
*
* @param query
*          query to extract terms from
* @param terms
*          map to place created weightedspanterms in
* @throws ioexception
*/
private void extract query query  map terms  throws ioexception
if  query instanceof booleanquery
booleanclause queryclauses     booleanquery  query  getclauses
for  int i   0  i < queryclauses length  i
if   queryclauses isprohibited
extract queryclauses getquery    terms
else if  query instanceof phrasequery
term phrasequeryterms     phrasequery  query  getterms
spanquery clauses   new spanquery
for  int i   0  i < phrasequeryterms length  i
clauses   new spantermquery phrasequeryterms
int slop     phrasequery  query  getslop
boolean inorder   false
if  slop    0
inorder   true
spannearquery sp   new spannearquery clauses  slop  inorder
sp setboost query getboost
extractweightedspanterms terms  sp
else if  query instanceof termquery
extractweightedterms terms  query
else if  query instanceof spanquery
extractweightedspanterms terms   spanquery  query
else if  query instanceof filteredquery
extract   filteredquery  query  getquery    terms
else if  query instanceof disjunctionmaxquery
for  iterator iterator     disjunctionmaxquery  query  iterator    iterator hasnext
extract  query  iterator next    terms
else if  query instanceof multitermquery    expandmultitermquery
multitermquery mtq     multitermquery query
if mtq getrewritemethod      multitermquery scoring_boolean_query_rewrite
mtq   copymultitermquery mtq
mtq setrewritemethod multitermquery scoring_boolean_query_rewrite
query   mtq
string field
if mtq instanceof termrangequery
field     termrangequery mtq  getfield
else
field   mtq getterm   field
indexreader ir   getreaderforfield field
extract query rewrite ir   terms
else if  query instanceof multiphrasequery
final multiphrasequery mpq    multiphrasequery  query
final list termarrays   mpq gettermarrays
final int positions   mpq getpositions
if  positions length > 0
int maxposition   positions
for  int i   0  i < positions length   1    i
if  positions > maxposition
maxposition   positions
final list disjunctlists   new list
int distinctpositions   0
for  int i   0  i < termarrays size      i
final term termarray    term  termarrays get i
list disjuncts   disjunctlists]
if  disjuncts    null
disjuncts    disjunctlists]   new arraylist termarray length
distinctpositions
for  int j   0  j < termarray length    j
disjuncts add new spantermquery termarray
int positiongaps   0
int position   0
final spanquery clauses   new spanquery
for  int i   0  i < disjunctlists length    i
list disjuncts   disjunctlists
if  disjuncts    null
clauses   new spanorquery  spanquery  disjuncts
toarray new spanquery
else
positiongaps
final int slop   mpq getslop
final boolean inorder    slop    0
spannearquery sp   new spannearquery clauses  slop   positiongaps  inorder
sp setboost query getboost
extractweightedspanterms terms  sp
/**
* fills a <code>map</code> with <@link weightedspanterm>s using the terms from the supplied <code>spanquery</code>.
*
* @param terms
*          map to place created weightedspanterms in
* @param spanquery
*          spanquery to extract terms from
* @throws ioexception
*/
private void extractweightedspanterms map terms  spanquery spanquery  throws ioexception
set nonweightedterms   new hashset
spanquery extractterms nonweightedterms
set fieldnames
if  fieldname    null
fieldnames   new hashset
for  iterator iter   nonweightedterms iterator    iter hasnext
term queryterm    term  iter next
fieldnames add queryterm field
else
fieldnames   new hashset 1
fieldnames add fieldname
// to support the use of the default field name
if  defaultfield    null
fieldnames add defaultfield
iterator it   fieldnames iterator
list spanpositions   new arraylist
while  it hasnext
string field    string  it next
indexreader reader   getreaderforfield field
spans spans   spanquery getspans reader
// collect span positions
while  spans next
spanpositions add new positionspan spans start    spans end     1
if  spanpositions size      0
// no spans found
return
for  iterator iter   nonweightedterms iterator    iter hasnext
term queryterm    term  iter next
if  fieldnamecomparator queryterm field
weightedspanterm weightedspanterm    weightedspanterm  terms get queryterm text
if  weightedspanterm    null
weightedspanterm   new weightedspanterm spanquery getboost    queryterm text
weightedspanterm addpositionspans spanpositions
weightedspanterm positionsensitive   true
terms put queryterm text    weightedspanterm
else
if  spanpositions size   > 0
weightedspanterm addpositionspans spanpositions
/**
* fills a <code>map</code> with <@link weightedspanterm>s using the terms from the supplied <code>query</code>.
*
* @param terms
*          map to place created weightedspanterms in
* @param query
*          query to extract terms from
* @throws ioexception
*/
private void extractweightedterms map terms  query query  throws ioexception
set nonweightedterms   new hashset
query extractterms nonweightedterms
for  iterator iter   nonweightedterms iterator    iter hasnext
term queryterm    term  iter next
if  fieldnamecomparator queryterm field
weightedspanterm weightedspanterm   new weightedspanterm query getboost    queryterm text
terms put queryterm text    weightedspanterm
/**
* necessary to implement matches for queries against <code>defaultfield</code>
*/
private boolean fieldnamecomparator string fieldnametocheck
boolean rv   fieldname    null    fieldnametocheck    fieldname
fieldnametocheck    defaultfield
return rv
private indexreader getreaderforfield string field  throws ioexception
if wraptocaching     cachedtokenstream      tokenstream instanceof cachingtokenfilter
tokenstream   new cachingtokenfilter tokenstream
cachedtokenstream   true
indexreader reader    indexreader  readers get field
if  reader    null
memoryindex indexer   new memoryindex
indexer addfield field  tokenstream
tokenstream reset
indexsearcher searcher   indexer createsearcher
reader   searcher getindexreader
readers put field  reader
return reader
/**
* creates a map of <code>weightedspanterms</code> from the given <code>query</code> and <code>tokenstream</code>.
*
* <p>
*
* @param query
*          that caused hit
* @param tokenstream
*          of text to be highlighted
* @return map containing weightedspanterms
* @throws ioexception
*/
public map getweightedspanterms query query  tokenstream tokenstream
throws ioexception
return getweightedspanterms query  tokenstream  null
/**
* creates a map of <code>weightedspanterms</code> from the given <code>query</code> and <code>tokenstream</code>.
*
* <p>
*
* @param query
*          that caused hit
* @param tokenstream
*          of text to be highlighted
* @param fieldname
*          restricts term's used based on field name
* @return map containing weightedspanterms
* @throws ioexception
*/
public map getweightedspanterms query query  tokenstream tokenstream
string fieldname  throws ioexception
if  fieldname    null
this fieldname   stringhelper intern fieldname
else
this fieldname   null
map terms   new positioncheckingmap
this tokenstream   tokenstream
try
extract query  terms
finally
closereaders
return terms
/**
* creates a map of <code>weightedspanterms</code> from the given <code>query</code> and <code>tokenstream</code>. uses a supplied
* <code>indexreader</code> to properly weight terms (for gradient highlighting).
*
* <p>
*
* @param query
*          that caused hit
* @param tokenstream
*          of text to be highlighted
* @param fieldname
*          restricts term's used based on field name
* @param reader
*          to use for scoring
* @return map of weightedspanterms with quasi tf/idf scores
* @throws ioexception
*/
public map getweightedspantermswithscores query query  tokenstream tokenstream  string fieldname
indexreader reader  throws ioexception
if  fieldname    null
this fieldname   stringhelper intern fieldname
else
this fieldname   null
this tokenstream   tokenstream
map terms   new positioncheckingmap
extract query  terms
int totalnumdocs   reader numdocs
set weightedterms   terms keyset
iterator it   weightedterms iterator
try
while  it hasnext
weightedspanterm weightedspanterm    weightedspanterm  terms get it next
int docfreq   reader docfreq new term fieldname  weightedspanterm term
// docfreq counts deletes
if totalnumdocs < docfreq
docfreq   totalnumdocs
// idf algorithm taken from defaultsimilarity class
float idf    float   math log  float  totalnumdocs    double   docfreq   1     1 0
weightedspanterm weight    idf
finally
closereaders
return terms
/**
* this class makes sure that if both position sensitive and insensitive
* versions of the same term are added, the position insensitive one wins.
*/
static private class positioncheckingmap extends hashmap
public void putall map m
iterator it   m entryset   iterator
while  it hasnext
map entry entry    java util map entry  it next
this put entry getkey    entry getvalue
public object put object key  object value
object prev   super put key  value
if  prev    null  return prev
weightedspanterm prevterm    weightedspanterm prev
weightedspanterm newterm    weightedspanterm value
if   prevterm positionsensitive
newterm positionsensitive   false
return prev
private multitermquery copymultitermquery multitermquery query
if query instanceof termrangequery
termrangequery q    termrangequery query
q setboost query getboost
return new termrangequery q getfield    q getlowerterm    q getupperterm    q includeslower    q includesupper
else if query instanceof wildcardquery
multitermquery q   new wildcardquery query getterm
q setboost query getboost
return q
else if query instanceof prefixquery
multitermquery q   new prefixquery query getterm
q setboost q getboost
return q
else if query instanceof fuzzyquery
fuzzyquery q    fuzzyquery query
q setboost q getboost
return new fuzzyquery q getterm    q getminsimilarity    q getprefixlength
return query
public boolean getexpandmultitermquery
return expandmultitermquery
public void setexpandmultitermquery boolean expandmultitermquery
this expandmultitermquery   expandmultitermquery
public boolean iscachedtokenstream
return cachedtokenstream
public tokenstream gettokenstream
return tokenstream
/**
* by default, {@link tokenstream}s that are not of the type
* {@link cachingtokenfilter} are wrapped in a {@link cachingtokenfilter} to
* ensure an efficient reset - if you are already using a different caching
* {@link tokenstream} impl and you don't want it to be wrapped, set this to
* false.
*
* @param wrap
*/
public void setwrapifnotcachingtokenfilter boolean wrap
this wraptocaching   wrap