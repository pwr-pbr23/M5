package org apache lucene demo
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java io bufferedreader
import java io file
import java io filereader
import java io ioexception
import java io inputstreamreader
import java util date
import org apache lucene analysis analyzer
import org apache lucene analysis standard standardanalyzer
import org apache lucene document document
import org apache lucene index filterindexreader
import org apache lucene index indexreader
import org apache lucene queryparser queryparser
import org apache lucene search collector
import org apache lucene search indexsearcher
import org apache lucene search query
import org apache lucene search scoredoc
import org apache lucene search scorer
import org apache lucene search searcher
import org apache lucene search topscoredoccollector
import org apache lucene store fsdirectory
import org apache lucene util version
/** simple command-line based search demo. */
public class searchfiles
/** use the norms from one field for all fields.  norms are read into memory,
* using a byte of memory per document per searched field.  this can cause
* search of large collections with a large number of fields to run out of
* memory.  if all of the fields contain only a single token, then the norms
* are all identical, then single norm vector may be shared. */
private static class onenormsreader extends filterindexreader
private string field
public onenormsreader indexreader in  string field
super in
this field   field
public byte norms string field  throws ioexception
return in norms this field
private searchfiles
/** simple command-line based search demo. */
public static void main string args  throws exception
string usage
usage
if  args length > 0       equals args       equals args
system out println usage
system exit 0
string index
string field
string queries   null
int repeat   0
boolean raw   false
string normsfield   null
boolean paging   true
int hitsperpage   10
for  int i   0  i < args length  i
if    equals args
index   args
i
else if    equals args
field   args
i
else if    equals args
queries   args
i
else if    equals args
repeat   integer parseint args
i
else if    equals args
raw   true
else if    equals args
normsfield   args
i
else if    equals args
if  args equals
paging   false
else
hitsperpage   integer parseint args
if  hitsperpage    0
paging   false
i
indexreader reader   indexreader open fsdirectory open new file index    true      only searching  so read only true
if  normsfield    null
reader   new onenormsreader reader  normsfield
searcher searcher   new indexsearcher reader
analyzer analyzer   new standardanalyzer version lucene_current
bufferedreader in   null
if  queries    null
in   new bufferedreader new filereader queries
else
in   new bufferedreader new inputstreamreader system in
queryparser parser   new queryparser field  analyzer
while  true
if  queries    null                            prompt the user
system out println
string line   in readline
if  line    null    line length       1
break
line   line trim
if  line length      0
break
query query   parser parse line
system out println     query tostring field
if  repeat > 0                                 repeat   time as benchmark
date start   new date
for  int i   0  i < repeat  i
searcher search query  null  100
date end   new date
system out println    end gettime   start gettime
if  paging
dopagingsearch in  searcher  query  hitsperpage  raw  queries    null
else
dostreamingsearch searcher  query
reader close
/**
* this method uses a custom hitcollector implementation which simply prints out
* the docid and score of every matching document.
*
*  this simulates the streaming search use case, where all hits are supposed to
*  be processed, regardless of their relevance.
*/
public static void dostreamingsearch final searcher searcher  query query  throws ioexception
collector streaminghitcollector   new collector
private scorer scorer
private int docbase
// simply print docid and score of every matching document
public void collect int doc  throws ioexception
system out println     doc   docbase       scorer score
public boolean acceptsdocsoutoforder
return true
public void setnextreader indexreader reader  int docbase
throws ioexception
this docbase   docbase
public void setscorer scorer scorer  throws ioexception
this scorer   scorer
searcher search query  streaminghitcollector
/**
* this demonstrates a typical paging search scenario, where the search engine presents
* pages of size n to the user. the user can then go to the next page if interested in
* the next hits.
*
* when the query is executed for the first time, then only enough results are collected
* to fill 5 result pages. if the user wants to page beyond this limit, then the query
* is executed another time and all hits are collected.
*
*/
public static void dopagingsearch bufferedreader in  searcher searcher  query query
int hitsperpage  boolean raw  boolean interactive  throws ioexception
// collect enough docs to show 5 pages
topscoredoccollector collector   topscoredoccollector create
5   hitsperpage  false
searcher search query  collector
scoredoc hits   collector topdocs   scoredocs
int numtotalhits   collector gettotalhits
system out println numtotalhits
int start   0
int end   math min numtotalhits  hitsperpage
while  true
if  end > hits length
system out println     hits length      numtotalhits
system out println
string line   in readline
if  line length      0    line charat 0
break
collector   topscoredoccollector create numtotalhits  false
searcher search query  collector
hits   collector topdocs   scoredocs
end   math min hits length  start   hitsperpage
for  int i   start  i < end  i
if  raw                                    output raw format
system out println   hits doc   hits score
continue
document doc   searcher doc hits doc
string path   doc get
if  path    null
system out println  i 1        path
string title   doc get
if  title    null
system out println     doc get
else
system out println  i 1
if   interactive
break
if  numtotalhits >  end
boolean quit   false
while  true
system out print
if  start   hitsperpage >  0
system out print
if  start   hitsperpage < numtotalhits
system out print
system out println
string line   in readline
if  line length      0    line charat 0
quit   true
break
if  line charat 0
start   math max 0  start   hitsperpage
break
else if  line charat 0
if  start   hitsperpage < numtotalhits
start  hitsperpage
break
else
int page   integer parseint line
if   page   1    hitsperpage < numtotalhits
start    page   1    hitsperpage
break
else
system out println
if  quit  break
end   math min numtotalhits  start   hitsperpage