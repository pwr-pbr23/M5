package org apache lucene search
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java io ioexception
/**
* expert: common scoring functionality for different types of queries.
*
* <p>
* a <code>scorer</code> iterates over documents matching a
* query in increasing order of doc id.
* </p>
* <p>
* document scores are computed using a given <code>similarity</code>
* implementation.
* </p>
*
* <p><b>note</b>: the values float.nan,
* float.negative_infinity and float.positive_infinity are
* not valid scores.  certain collectors (eg {@link
* topscoredoccollector}) will not properly collect hits
* with these scores.
*
* @see booleanquery#setallowdocsoutoforder
*/
public abstract class scorer extends docidsetiterator
private similarity similarity
/** constructs a scorer.
* @param similarity the <code>similarity</code> implementation used by this scorer.
*/
protected scorer similarity similarity
this similarity   similarity
/** returns the similarity implementation used by this scorer. */
public similarity getsimilarity
return this similarity
/** scores and collects all matching documents.
* @param hc the collector to which all matching documents are passed through
* {@link hitcollector#collect(int, float)}.
* <br>when this method is used the {@link #explain(int)} method should not be used.
* @deprecated use {@link #score(collector)} instead.
*/
public void score hitcollector hc  throws ioexception
score new hitcollectorwrapper hc
/** scores and collects all matching documents.
* @param collector the collector to which all matching documents are passed.
* <br>when this method is used the {@link #explain(int)} method should not be used.
*/
public void score collector collector  throws ioexception
collector setscorer this
int doc
while   doc   nextdoc       no_more_docs
collector collect doc
/** expert: collects matching documents in a range.  hook for optimization.
* note that {@link #next()} must be called once before this method is called
* for the first time.
* @param hc the collector to which all matching documents are passed through
* {@link hitcollector#collect(int, float)}.
* @param max do not score documents past this.
* @return true if more matching documents may remain.
* @deprecated use {@link #score(collector, int, int)} instead.
*/
protected boolean score hitcollector hc  int max  throws ioexception
return score new hitcollectorwrapper hc   max  docid
/**
* expert: collects matching documents in a range. hook for optimization.
* note, <code>firstdocid</code> is added to ensure that {@link #nextdoc()}
* was called before this method.
*
* @param collector
*          the collector to which all matching documents are passed.
* @param max
*          do not score documents past this.
* @param firstdocid
*          the first document id (ensures {@link #nextdoc()} is called before
*          this method.
* @return true if more matching documents may remain.
*/
protected boolean score collector collector  int max  int firstdocid  throws ioexception
collector setscorer this
int doc   firstdocid
while  doc < max
collector collect doc
doc   nextdoc
return doc    no_more_docs
/** returns the score of the current document matching the query.
* initially invalid, until {@link #next()} or {@link #skipto(int)}
* is called the first time, or when called from within
* {@link collector#collect}.
*/
public abstract float score   throws ioexception
/** returns an explanation of the score for a document.
* <br>when this method is used, the {@link #next()}, {@link #skipto(int)} and
* {@link #score(hitcollector)} methods should not be used.
* @param doc the document number for the explanation.
*
* @deprecated please use {@link indexsearcher#explain}
* or {@link weight#explain} instead.
*/
public explanation explain int doc  throws ioexception
throw new unsupportedoperationexception