/** licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache lucene spatial tier
import java util map
import java util weakhashmap
import java util hashmap
import org apache lucene search filter
import org apache lucene spatial tier distancehandler precision
/**
* <p><font color="red"><b>note:</b> this api is still in
* flux and might change in incompatible ways in the next
* release.</font>
*/
public abstract class distancefilter extends filter
final protected filter startingfilter
protected precision precise
protected map<integer double> distances
protected double distance
protected int nextdocbase
protected final weakhashmap<string double> distancelookupcache
/** filters the startingfilter by precise distance
*  checking filter */
public distancefilter filter startingfilter  double distance
if  startingfilter    null
throw new illegalargumentexception
}
this startingfilter   startingfilter
this distance   distance
// note: neither of the distance filters use precision
// now - if we turn that on, we'll need to pass top
// reader into here
// setprecision(reader.maxdoc());
/* store calculated distances for reuse by other components */
distances   new hashmap<integer double>
// create an intermediate cache to avoid recomputing
//   distances for the same point
//   todo: why is this a weakhashmap?
distancelookupcache   new weakhashmap<string double>
}
public map<integer double> getdistances
return distances
}
public double getdistance int docid
return distances get docid
}
public void setdistances map<integer  double> distances
this distances   distances
}
/** you must call this before re-using this distancefilter
*  across searches */
public void reset
nextdocbase   0
}
/** returns true if <code>o</code> is equal to this. */
public abstract boolean equals object o
/** returns a hash code value for this object.*/
public abstract int hashcode
/*
private void setprecision(int maxdocs) {
precise = precision.exact;
if (maxdocs > 1000 && distance > 10) {
precise = precision.twentyfeet;
}
if (maxdocs > 10000 && distance > 10){
precise = precision.twohundredfeet;
}
}
*/
}