package org apache lucene analysis snowball
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import org apache lucene analysis
import org apache lucene analysis standard
import java io ioexception
import java io reader
import java util set
/** filters {@link standardtokenizer} with {@link standardfilter}, {@link
* lowercasefilter}, {@link stopfilter} and {@link snowballfilter}.
*
* available stemmers are listed in org.tartarus.snowball.ext.  the name of a
* stemmer is the part of the class name before "stemmer", e.g., the stemmer in
* {@link org.tartarus.snowball.ext.englishstemmer} is named "english".
*/
public class snowballanalyzer extends analyzer
private string name
private set stopset
/** builds the named analyzer with no stop words. */
public snowballanalyzer string name
this name   name
setoverridestokenstreammethod snowballanalyzer class
/** builds the named analyzer with the given stop words. */
public snowballanalyzer string name  string stopwords
this name
stopset   stopfilter makestopset stopwords
/** constructs a {@link standardtokenizer} filtered by a {@link
standardfilter}, a {@link lowercasefilter}, a {@link stopfilter},
and a {@link snowballfilter} */
public tokenstream tokenstream string fieldname  reader reader
tokenstream result   new standardtokenizer reader
result   new standardfilter result
result   new lowercasefilter result
if  stopset    null
result   new stopfilter result  stopset
result   new snowballfilter result  name
return result
private class savedstreams
tokenizer source
tokenstream result
/** returns a (possibly reused) {@link standardtokenizer} filtered by a
* {@link standardfilter}, a {@link lowercasefilter},
* a {@link stopfilter}, and a {@link snowballfilter} */
public tokenstream reusabletokenstream string fieldname  reader reader
throws ioexception
if  overridestokenstreammethod
// lucene-1678: force fallback to tokenstream() if we
// have been subclassed and that subclass overrides
// tokenstream but not reusabletokenstream
return tokenstream fieldname  reader
savedstreams streams    savedstreams  getprevioustokenstream
if  streams    null
streams   new savedstreams
streams source   new standardtokenizer reader
streams result   new standardfilter streams source
streams result   new lowercasefilter streams result
if  stopset    null
streams result   new stopfilter streams result  stopset
streams result   new snowballfilter streams result  name
setprevioustokenstream streams
else
streams source reset reader
return streams result