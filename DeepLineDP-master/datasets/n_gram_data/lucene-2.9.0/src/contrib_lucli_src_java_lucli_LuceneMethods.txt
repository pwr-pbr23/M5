package lucli
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java io ioexception
import java io reader
import java io stringreader
import java util arraylist
import java util arrays
import java util comparator
import java util enumeration
import java util hashmap
import java util iterator
import java util list
import java util map
import java util set
import java util treemap
import java util map entry
import jline consolereader
import org apache lucene analysis analyzer
import org apache lucene analysis token
import org apache lucene analysis tokenstream
import org apache lucene analysis standard standardanalyzer
import org apache lucene analysis tokenattributes positionincrementattribute
import org apache lucene analysis tokenattributes termattribute
import org apache lucene document document
import org apache lucene document field
import org apache lucene index indexreader
import org apache lucene index indexwriter
import org apache lucene index term
import org apache lucene index termenum
import org apache lucene index indexreader fieldoption
import org apache lucene queryparser multifieldqueryparser
import org apache lucene queryparser parseexception
import org apache lucene search explanation
import org apache lucene search hits
import org apache lucene search indexsearcher
import org apache lucene search query
import org apache lucene search searcher
/**
* various methods that interact with lucene and provide info about the
* index, search, etc. parts adapted from lucene demo.
*/
class lucenemethods
private int numdocs
private string indexname    directory of this index
private java util iterator fielditerator
private list fields    fields as a vector
private list indexedfields    fields as a vector
private string fieldsarray    fields as an array
private searcher searcher
private query query    current query string
private string analyzerclassfqn   null     analyzer class  if null  use default analyzer
public lucenemethods string index
indexname   index
message     indexname
private analyzer createanalyzer
if  analyzerclassfqn    null  return new standardanalyzer
try
class aclass   class forname analyzerclassfqn
object obj   aclass newinstance
if    obj instanceof analyzer
message     analyzerclassfqn
return new standardanalyzer
return  analyzer obj
catch  exception e
message     analyzerclassfqn
return new standardanalyzer
public void info   throws java io ioexception
indexreader indexreader   indexreader open indexname
getfieldinfo
numdocs   indexreader numdocs
message     numdocs
message     fields tostring
message     indexedfields tostring
if  indexreader islocked indexname
message
//indexreader.getcurrentversion(indexname);
//system.out.println("version:" + version);
indexreader close
public void search string querystring  boolean explain  boolean showtokens  consolereader cr
throws java io ioexception  org apache lucene queryparser parseexception
hits hits   initsearch querystring
system out println hits length
if  explain
query   explainquery querystring
final int hits_per_page   10
message
for  int start   0  start < hits length    start    hits_per_page
int end   math min hits length    start   hits_per_page
for  int ii   start  ii < end  ii
document doc   hits doc ii
message      ii   1        hits score ii
printhit doc
if  showtokens
invertdocument doc
if  explain
explanation exp   searcher explain query  hits id ii
message     exp tostring
message
if  hits length   > end
// todo: don't let the input end up in the command line history
querystring   cr readline
if  querystring length      0    querystring charat 0
break
searcher close
/**
* todo: allow user to specify what field(s) to display
*/
private void printhit document doc
for  int ii   0  ii < fieldsarray length  ii
string currfield   fieldsarray
string result   doc getvalues currfield
if  result    null
for  int i   0  i < result length  i
message currfield       result
else
message currfield
//another option is to just do message(doc);
public void optimize   throws ioexception
//open the index writer. false: don't create a new one
indexwriter indexwriter   new indexwriter indexname  createanalyzer    false
message
long start   system currenttimemillis
indexwriter optimize
message      system currenttimemillis     start
indexwriter close
private query explainquery string querystring  throws ioexception  parseexception
searcher   new indexsearcher indexname
analyzer analyzer   createanalyzer
getfieldinfo
int arraysize   indexedfields size
string indexedarray   new string
for  int ii   0  ii < arraysize  ii
indexedarray    string  indexedfields get ii
multifieldqueryparser parser   new multifieldqueryparser indexedarray  analyzer
query   parser parse querystring
system out println     query tostring
return  query
/**
* todo: allow user to specify analyzer
*/
private hits initsearch string querystring  throws ioexception  parseexception
searcher   new indexsearcher indexname
analyzer analyzer   createanalyzer
getfieldinfo
int arraysize   fields size
fieldsarray   new string
for  int ii   0  ii < arraysize  ii
fieldsarray    string  fields get ii
multifieldqueryparser parser   new multifieldqueryparser fieldsarray  analyzer
query   parser parse querystring
system out println     query tostring
hits hits   searcher search query
return  hits
public void count string querystring  throws java io ioexception  parseexception
hits hits   initsearch querystring
system out println hits length
searcher close
static public void message string s
system out println s
private void getfieldinfo   throws ioexception
indexreader indexreader   indexreader open indexname
fields   new arraylist
indexedfields   new arraylist
//get the list of all field names
fielditerator   indexreader getfieldnames fieldoption all  iterator
while  fielditerator hasnext
object field   fielditerator next
if  field    null     field equals
fields add field tostring
//
//get the list of indexed field names
fielditerator   indexreader getfieldnames fieldoption indexed  iterator
while  fielditerator hasnext
object field   fielditerator next
if  field    null     field equals
indexedfields add field tostring
indexreader close
// copied from documentwriter
// tokenizes the fields of a document into postings.
private void invertdocument document doc
throws ioexception
map tokenmap   new hashmap
final int maxfieldlength   10000
analyzer analyzer   createanalyzer
iterator fields   doc getfields   iterator
final token reusabletoken   new token
while  fields hasnext
field field    field  fields next
string fieldname   field name
if  field isindexed
if  field istokenized             un tokenized field
reader reader            find or make reader
if  field readervalue      null
reader   field readervalue
else if  field stringvalue      null
reader   new stringreader field stringvalue
else
throw new illegalargumentexception
int position   0
// tokenize field and add to postingtable
tokenstream stream   analyzer tokenstream fieldname  reader
termattribute termatt    termattribute  stream addattribute termattribute class
positionincrementattribute posincratt    positionincrementattribute  stream addattribute positionincrementattribute class
try
while  stream incrementtoken
position     posincratt getpositionincrement     1
position
string name   termatt term
integer count    integer  tokenmap get name
if  count    null       not in there yet
tokenmap put name  new integer 1      first one
else
int count   count intvalue
tokenmap put name  new integer count   1
if  position > maxfieldlength  break
finally
stream close
entry sortedhash   getsortedmapentries tokenmap
for  int ii   0  ii < sortedhash length    ii < 10  ii
entry currententry   sortedhash
message  ii   1        currententry getkey         currententry getvalue
/** provides a list of the top terms of the index.
*
* @param field  - the name of the command or null for all of them.
*/
public void terms string field  throws ioexception
treemap termmap   new treemap
indexreader indexreader   indexreader open indexname
termenum terms   indexreader terms
while  terms next
term term   terms term
//message(term.field() + ":" + term.text() + " freq:" + terms.docfreq());
//if we're either not looking by field or we're matching the specific field
if   field    null     field equals term field
termmap put term field         term text    new integer  terms docfreq
iterator termiterator   termmap keyset   iterator
for  int ii   0  termiterator hasnext      ii < 100  ii
string termdetails    string  termiterator next
integer termfreq    integer  termmap get termdetails
message termdetails       termfreq
indexreader close
/** sort map values
* @param m the map we're sorting
* from http://developer.java.sun.com/developer/qow/archive/170/index.jsp
*/
public static entry
getsortedmapentries map m
set set   m entryset
entry entries
entry  set toarray
new entry
arrays sort entries  new comparator
public int compare object o1  object o2
object v1     entry  o1  getvalue
object v2     entry  o2  getvalue
return   comparable  v2  compareto v1     descending order
return entries
public void analyzer string word
if    equals word
string current   analyzerclassfqn    null ?     analyzerclassfqn
message     current
return
analyzerclassfqn   word
message     analyzerclassfqn