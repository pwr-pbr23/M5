package org apache lucene search vectorhighlight
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java io ioexception
import java util collections
import java util linkedlist
import java util set
import org apache lucene analysis analyzer
import org apache lucene analysis whitespaceanalyzer
import org apache lucene document document
import org apache lucene document field
import org apache lucene document field index
import org apache lucene document field store
import org apache lucene document field termvector
import org apache lucene index indexreader
import org apache lucene index indexwriter
import org apache lucene index termfreqvector
import org apache lucene index termpositionvector
import org apache lucene index termvectoroffsetinfo
import org apache lucene index indexwriter maxfieldlength
import org apache lucene queryparser queryparser
import org apache lucene search query
import org apache lucene store directory
import org apache lucene store ramdirectory
/**
* <code>fieldtermstack</code> is a stack that keeps query terms in the specified field
* of the document to be highlighted.
*/
public class fieldtermstack
private final string fieldname
linkedlist<terminfo> termlist   new linkedlist<terminfo>
public static void main  string args   throws exception
analyzer analyzer   new whitespaceanalyzer
queryparser parser   new queryparser     analyzer
query query   parser parse
fieldquery fieldquery   new fieldquery  query  true  false
directory dir   new ramdirectory
indexwriter writer   new indexwriter  dir  analyzer  maxfieldlength limited
document doc   new document
doc add  new field        store yes  index analyzed  termvector with_positions_offsets
doc add  new field        store yes  index analyzed  termvector with_positions_offsets
writer adddocument  doc
writer close
indexreader reader   indexreader open  dir
fieldtermstack ftl   new fieldtermstack  reader  0     fieldquery
reader close
/**
* a constructor.
*
* @param reader indexreader of the index
* @param docid document id to be highlighted
* @param fieldname field of the document to be highlighted
* @param fieldquery fieldquery object
* @throws ioexception
*/
public fieldtermstack  indexreader reader  int docid  string fieldname  final fieldquery fieldquery   throws ioexception
this fieldname   fieldname
termfreqvector tfv   reader gettermfreqvector  docid  fieldname
if  tfv    null   return     just return to make null snippets
termpositionvector tpv   null
try
tpv    termpositionvector tfv
catch  classcastexception e
return     just return to make null snippets
set<string> termset   fieldquery gettermset  fieldname
// just return to make null snippet if un-matched fieldname specified when fieldmatch == true
if  termset    null   return
for  string term   tpv getterms
if   termset contains  term     continue
int index   tpv indexof  term
termvectoroffsetinfo tvois   tpv getoffsets  index
if  tvois    null   return     just return to make null snippets
int poss   tpv gettermpositions  index
if  poss    null   return     just return to make null snippets
for  int i   0  i < tvois length  i
termlist add  new terminfo  term  tvois getstartoffset    tvois getendoffset    poss
// sort by position
collections sort  termlist
/**
* @return field name
*/
public string getfieldname
return fieldname
/**
* @return the top terminfo object of the stack
*/
public terminfo pop
return termlist poll
/**
* @param terminfo the terminfo object to be put on the top of the stack
*/
public void push  terminfo terminfo
// termlist.push( terminfo );  // avoid java 1.6 feature
termlist addfirst  terminfo
/**
* to know whether the stack is empty
*
* @return true if the stack is empty, false if not
*/
public boolean isempty
return termlist    null    termlist size      0
public static class terminfo implements comparable<terminfo>
final string text
final int startoffset
final int endoffset
final int position
terminfo  string text  int startoffset  int endoffset  int position
this text   text
this startoffset   startoffset
this endoffset   endoffset
this position   position
public string gettext    return text
public int getstartoffset    return startoffset
public int getendoffset    return endoffset
public int getposition    return position
public string tostring
stringbuilder sb   new stringbuilder
sb append  text   append      append startoffset  append      append  endoffset   append      append  position   append
return sb tostring
public int compareto  terminfo o
return   this position   o position