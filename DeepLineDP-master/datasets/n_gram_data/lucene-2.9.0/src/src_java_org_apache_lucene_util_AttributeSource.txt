package org apache lucene util
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java util collections
import java util nosuchelementexception
import java util iterator
import java util linkedhashmap
import java util identityhashmap
import java util linkedlist
import java util map
import java util map entry
import org apache lucene analysis tokenstream     for javadocs
/**
* an attributesource contains a list of different {@link attributeimpl}s,
* and methods to add and get them. there can only be a single instance
* of an attribute in the same attributesource instance. this is ensured
* by passing in the actual type of the attribute (class&lt;attribute&gt;) to
* the {@link #addattribute(class)}, which then checks if an instance of
* that type is already present. if yes, it returns the instance, otherwise
* it creates a new instance and returns it.
*/
public class attributesource
/**
* an attributefactory creates instances of {@link attributeimpl}s.
*/
public static abstract class attributefactory
/**
* returns an {@link attributeimpl} for the supplied {@link attribute} interface class.
* <p>signature for java 1.5: <code>public attributeimpl createattributeinstance(class%lt;? extends attribute&gt; attclass)</code>
*/
public abstract attributeimpl createattributeinstance class attclass
/**
* this is the default factory that creates {@link attributeimpl}s using the
* class name of the supplied {@link attribute} interface class by appending <code>impl</code> to it.
*/
public static final attributefactory default_attribute_factory   new defaultattributefactory
private static final class defaultattributefactory extends attributefactory
private static final identityhashmap  <class<? extends attribute> class<? extends attributeimpl>>   attclassimplmap   new identityhashmap
private defaultattributefactory
public attributeimpl createattributeinstance class attclass
try
return  attributeimpl  getclassforinterface attclass  newinstance
catch  instantiationexception e
throw new illegalargumentexception     attclass getname
catch  illegalaccessexception e
throw new illegalargumentexception     attclass getname
private static class getclassforinterface class attclass
synchronized attclassimplmap
class clazz    class  attclassimplmap get attclass
if  clazz    null
try
attclassimplmap put attclass  clazz   class forname attclass getname
catch  classnotfoundexception e
throw new illegalargumentexception     attclass getname
return clazz
// these two maps must always be in sync!!!
// so they are private, final and read-only from the outside (read-only iterators)
private final map  <class<attribute> attributeimpl>   attributes
private final map  <class<attributeimpl> attributeimpl>   attributeimpls
private attributefactory factory
/**
* an attributesource using the default attribute factory {@link attributesource.attributefactory#default_attribute_factory}.
*/
public attributesource
this attributefactory default_attribute_factory
/**
* an attributesource that uses the same attributes as the supplied one.
*/
public attributesource attributesource input
if  input    null
throw new illegalargumentexception
this attributes   input attributes
this attributeimpls   input attributeimpls
this factory   input factory
/**
* an attributesource using the supplied {@link attributefactory} for creating new {@link attribute} instances.
*/
public attributesource attributefactory factory
this attributes   new linkedhashmap
this attributeimpls   new linkedhashmap
this factory   factory
/**
* returns the used attributefactory.
*/
public attributefactory getattributefactory
return this factory
/** returns a new iterator that iterates the attribute classes
* in the same order they were added in.
* <p>signature for java 1.5: <code>public iterator&lt;class&lt;? extends attribute&gt;&gt; getattributeclassesiterator()</code>
*/
public iterator getattributeclassesiterator
return collections unmodifiableset attributes keyset    iterator
/** returns a new iterator that iterates all unique attribute implementations.
* this iterator may contain less entries that {@link #getattributeclassesiterator},
* if one instance implements more than one attribute interface.
* <p>signature for java 1.5: <code>public iterator&lt;attributeimpl&gt; getattributeimplsiterator()</code>
*/
public iterator getattributeimplsiterator
if  hasattributes
if  currentstate    null
computecurrentstate
final state initstate   currentstate
return new iterator
private state state   initstate
public void remove
throw new unsupportedoperationexception
public object next
if  state    null
throw new nosuchelementexception
final attributeimpl att   state attribute
state   state next
return att
public boolean hasnext
return state    null
else
return collections empty_set iterator
/** a cache that stores all interfaces for known implementation classes for performance (slow reflection) */
private static final identityhashmap  <class<? extends attributeimpl> linkedlist<class<? extends attribute>>>   knownimplclasses   new identityhashmap
/** adds a custom attributeimpl instance with one or more attribute interfaces. */
public void addattributeimpl final attributeimpl att
final class clazz   att getclass
if  attributeimpls containskey clazz   return
linkedlist foundinterfaces
synchronized knownimplclasses
foundinterfaces    linkedlist  knownimplclasses get clazz
if  foundinterfaces    null
knownimplclasses put clazz  foundinterfaces new linkedlist
// find all interfaces that this attribute instance implements
// and that extend the attribute interface
class actclazz   clazz
do
class interfaces   actclazz getinterfaces
for  int i   0  i < interfaces length  i
final class curinterface   interfaces
if  curinterface    attribute class    attribute class isassignablefrom curinterface
foundinterfaces add curinterface
actclazz   actclazz getsuperclass
while  actclazz    null
// add all interfaces of this attributeimpl to the maps
for  iterator it   foundinterfaces iterator    it hasnext
final class curinterface    class  it next
// attribute is a superclass of this interface
if   attributes containskey curinterface
// invalidate state to force recomputation in capturestate()
this currentstate   null
attributes put curinterface  att
attributeimpls put clazz  att
/**
* the caller must pass in a class&lt;? extends attribute&gt; value.
* this method first checks if an instance of that class is
* already in this attributesource and returns it. otherwise a
* new instance is created, added to this attributesource and returned.
* <p>signature for java 1.5: <code>public &lt;t extends attribute&gt; t addattribute(class&lt;t&gt;)</code>
*/
public attribute addattribute class attclass
final attribute att    attribute  attributes get attclass
if  att    null
final attributeimpl attimpl   this factory createattributeinstance attclass
addattributeimpl attimpl
return attimpl
else
return att
/** returns true, iff this attributesource has any attributes */
public boolean hasattributes
return  this attributes isempty
/**
* the caller must pass in a class&lt;? extends attribute&gt; value.
* returns true, iff this attributesource contains the passed-in attribute.
* <p>signature for java 1.5: <code>public boolean hasattribute(class&lt;? extends attribute&gt;)</code>
*/
public boolean hasattribute class attclass
return this attributes containskey attclass
/**
* the caller must pass in a class&lt;? extends attribute&gt; value.
* returns the instance of the passed in attribute contained in this attributesource
* <p>signature for java 1.5: <code>public &lt;t extends attribute&gt; t getattribute(class&lt;t&gt;)</code>
*
* @throws illegalargumentexception if this attributesource does not contain the
*         attribute. it is recommended to always use {@link #addattribute} even in consumers
*         of tokenstreams, because you cannot know if a specific tokenstream really uses
*         a specific attribute. {@link #addattribute} will automatically make the attribute
*         available. if you want to only use the attribute, if it is available (to optimize
*         consuming), use {@link #hasattribute}.
*/
public attribute getattribute class attclass
final attribute att    attribute  this attributes get attclass
if  att    null
throw new illegalargumentexception     attclass getname
return att
/**
* this class holds the state of an attributesource.
* @see #capturestate
* @see #restorestate
*/
public static final class state implements cloneable
private attributeimpl attribute
private state next
public object clone
state clone   new state
clone attribute    attributeimpl  attribute clone
if  next    null
clone next    state  next clone
return clone
private state currentstate   null
private void computecurrentstate
currentstate   new state
state c   currentstate
iterator it   attributeimpls values   iterator
c attribute    attributeimpl  it next
while  it hasnext
c next   new state
c   c next
c attribute    attributeimpl  it next
/**
* resets all attributes in this attributesource by calling
* {@link attributeimpl#clear()} on each attribute implementation.
*/
public void clearattributes
if  hasattributes
if  currentstate    null
computecurrentstate
for  state state   currentstate  state    null  state   state next
state attribute clear
/**
* captures the state of all attributes. the return value can be passed to
* {@link #restorestate} to restore the state of this or another attributesource.
*/
public state capturestate
if   hasattributes
return null
if  currentstate    null
computecurrentstate
return  state  this currentstate clone
/**
* restores this state by copying the values of all attribute implementations
* that this state contains into the attributes implementations of the targetstream.
* the targetstream must contain a corresponding instance for each argument
* contained in this state (e.g. it is not possible to restore the state of
* an attributesource containing a termattribute into a attributesource using
* a token instance as implementation).
* <p>
* note that this method does not affect attributes of the targetstream
* that are not contained in this state. in other words, if for example
* the targetstream contains an offsetattribute, but this state doesn't, then
* the value of the offsetattribute remains unchanged. it might be desirable to
* reset its value to the default, in which case the caller should first
* call {@link tokenstream#clearattributes()} on the targetstream.
*/
public void restorestate state state
if  state    null   return
do
attributeimpl targetimpl    attributeimpl  attributeimpls get state attribute getclass
if  targetimpl    null
throw new illegalargumentexception
state attribute copyto targetimpl
state   state next
while  state    null
public int hashcode
int code   0
if  hasattributes
if  currentstate    null
computecurrentstate
for  state state   currentstate  state    null  state   state next
code   code   31   state attribute hashcode
return code
public boolean equals object obj
if  obj    this
return true
if  obj instanceof attributesource
attributesource other    attributesource  obj
if  hasattributes
if   other hasattributes
return false
if  this attributeimpls size      other attributeimpls size
return false
// it is only equal if all attribute impls are the same in the same order
if  this currentstate    null
this computecurrentstate
state thisstate   this currentstate
if  other currentstate    null
other computecurrentstate
state otherstate   other currentstate
while  thisstate    null    otherstate    null
if  otherstate attribute getclass      thisstate attribute getclass       otherstate attribute equals thisstate attribute
return false
thisstate   thisstate next
otherstate   otherstate next
return true
else
return  other hasattributes
else
return false
public string tostring
stringbuffer sb   new stringbuffer
sb append
if  hasattributes
if  currentstate    null
computecurrentstate
for  state state   currentstate  state    null  state   state next
if  state    currentstate  sb append
sb append state attribute tostring
sb append
return sb tostring
/**
* performs a clone of all {@link attributeimpl} instances returned in a new
* attributesource instance. this method can be used to e.g. create another tokenstream
* with exactly the same attributes (using {@link #attributesource(attributesource)})
*/
public attributesource cloneattributes
attributesource clone   new attributesource this factory
// first clone the impls
if  hasattributes
if  currentstate    null
computecurrentstate
for  state state   currentstate  state    null  state   state next
clone attributeimpls put state attribute getclass    state attribute clone
// now the interfaces
iterator  <entry<class<attribute>  attributeimpl>>   attit   this attributes entryset   iterator
while  attit hasnext
entry  <class<attribute>  attributeimpl>   entry    entry  <class<attribute>  attributeimpl>    attit next
clone attributes put entry getkey    clone attributeimpls get entry getvalue   getclass
return clone