/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq transport stomp
import java io datainput
import java io datainputstream
import java io dataoutput
import java io dataoutputstream
import java io ioexception
import java util hashmap
import java util iterator
import java util map
import org apache activemq util bytearrayinputstream
import org apache activemq util bytearrayoutputstream
import org apache activemq util bytesequence
import org apache activemq wireformat wireformat
/**
* implements marshalling and unmarsalling the <a
* href="http://stomp.codehaus.org/">stomp</a> protocol.
*/
public class stompwireformat implements wireformat
private static final byte no_data   new byte
private static final byte end_of_frame   new byte  0
private static final int max_command_length   1024
private static final int max_header_length   1024   10
private static final int max_headers   1000
private static final int max_data_length   1024   1024   100
private int version   1
public bytesequence marshal object command  throws ioexception
bytearrayoutputstream baos   new bytearrayoutputstream
dataoutputstream dos   new dataoutputstream baos
marshal command  dos
dos close
return baos tobytesequence
public object unmarshal bytesequence packet  throws ioexception
bytearrayinputstream stream   new bytearrayinputstream packet
datainputstream dis   new datainputstream stream
return unmarshal dis
public void marshal object command  dataoutput os  throws ioexception
stompframe stomp    org apache activemq transport stomp stompframe command
stringbuffer buffer   new stringbuffer
buffer append stomp getaction
buffer append stomp newline
// output the headers.
for  iterator iter   stomp getheaders   entryset   iterator    iter hasnext
map entry entry    map entry iter next
buffer append entry getkey
buffer append stomp headers seperator
buffer append entry getvalue
buffer append stomp newline
// add a newline to seperate the headers from the content.
buffer append stomp newline
os write buffer tostring   getbytes
os write stomp getcontent
os write end_of_frame
public object unmarshal datainput in  throws ioexception
try
string action   null
// skip white space to next real action line
while  true
action   readline in  max_command_length
if  action    null
throw new ioexception
else
action   action trim
if  action length   > 0
break
// parse the headers
hashmap<string  string> headers   new hashmap<string  string> 25
while  true
string line   readline in  max_header_length
if  line    null    line trim   length   > 0
if  headers size   > max_headers
throw new protocolexception    true
try
int seperatorindex   line indexof stomp headers seperator
string name   line substring 0  seperatorindex  trim
string value   line substring seperatorindex   1  line length    trim
headers put name  value
catch  exception e
throw new protocolexception     line      true
else
break
// read in the data part.
byte data   no_data
string contentlength   headers get stomp headers content_length
if  contentlength    null
// bless the client, he's telling us how much data to read in.
int length
try
length   integer parseint contentlength trim
catch  numberformatexception e
throw new protocolexception    true
if  length > max_data_length
throw new protocolexception    true
data   new byte
in readfully data
if  in readbyte      0
throw new protocolexception stomp headers content_length          true
else
// we don't know how much to read.. data ends when we hit a 0
byte b
bytearrayoutputstream baos   null
while   b   in readbyte       0
if  baos    null
baos   new bytearrayoutputstream
else if  baos size   > max_data_length
throw new protocolexception    true
baos write b
if  baos    null
baos close
data   baos tobytearray
return new stompframe action  headers  data
catch  protocolexception e
return new stompframeerror e
private string readline datainput in  int maxlength  string errormessage  throws ioexception
byte b
bytearrayoutputstream baos   new bytearrayoutputstream maxlength
while   b   in readbyte
if  baos size   > maxlength
throw new protocolexception errormessage  true
baos write b
baos close
bytesequence sequence   baos tobytesequence
return new string sequence getdata    sequence getoffset    sequence getlength
public int getversion
return version
public void setversion int version
this version   version
public boolean inreceive
//todo implement the inactivity monitor
return false