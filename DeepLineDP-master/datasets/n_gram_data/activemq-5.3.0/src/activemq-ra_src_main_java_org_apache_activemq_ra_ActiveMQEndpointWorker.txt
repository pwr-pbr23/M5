/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq ra
import java lang reflect method
import java util concurrent atomic atomicboolean
import javax jms connection
import javax jms connectionconsumer
import javax jms exceptionlistener
import javax jms jmsexception
import javax jms message
import javax jms messagelistener
import javax jms session
import javax jms topic
import javax resource resourceexception
import javax resource spi endpoint messageendpointfactory
import javax resource spi work work
import javax resource spi work workexception
import javax resource spi work workmanager
import org apache activemq activemqconnection
import org apache activemq command activemqdestination
import org apache activemq command activemqqueue
import org apache activemq command activemqtopic
import org apache commons logging log
import org apache commons logging logfactory
/**
* @version $revision$ $date$
*/
public class activemqendpointworker
public static final method on_message_method
private static final log log   logfactory getlog activemqendpointworker class
private static final long initial_reconnect_delay   1000     1 second
private static final long max_reconnect_delay   1000   30     30 seconds
private static final threadlocal<session> thread_local   new threadlocal<session>
static
try
on_message_method   messagelistener class getmethod    new class
message class
catch  exception e
throw new exceptionininitializererror e
protected final activemqendpointactivationkey endpointactivationkey
protected final messageendpointfactory endpointfactory
protected final workmanager workmanager
protected final boolean transacted
private final activemqdestination dest
private final work connectwork
private final atomicboolean connecting   new atomicboolean false
private final string shutdownmutex
private activemqconnection connection
private connectionconsumer consumer
private serversessionpoolimpl serversessionpool
private boolean running
protected activemqendpointworker final messageresourceadapter adapter  activemqendpointactivationkey key  throws resourceexception
this endpointactivationkey   key
this endpointfactory   endpointactivationkey getmessageendpointfactory
this workmanager   adapter getbootstrapcontext   getworkmanager
try
this transacted   endpointfactory isdeliverytransacted on_message_method
catch  nosuchmethodexception e
throw new resourceexception
connectwork   new work
long currentreconnectdelay   initial_reconnect_delay
public void release
//
public synchronized void run
currentreconnectdelay   initial_reconnect_delay
messageactivationspec activationspec   endpointactivationkey getactivationspec
if   log isinfoenabled
log info     adapter getinfo   getserverurl
while   connecting get      running
try
connection   adapter makeconnection activationspec
connection setexceptionlistener new exceptionlistener
public void onexception jmsexception error
if   serversessionpool isclosing
// initiate reconnection only once, i.e. on initial exception
// and only if not already trying to connect
log error     error getmessage    error
if   connecting compareandset false  true
synchronized   connectwork
disconnect
serversessionpool closeidlesessions
connect
else
// connection attempt has already been initiated
log info
connection start
int prefetchsize   activationspec getmaxmessagespersessionsintvalue     activationspec getmaxsessionsintvalue
if  activationspec isdurablesubscription
consumer   connection createdurableconnectionconsumer
topic  dest
activationspec getsubscriptionname
emptytonull activationspec getmessageselector
serversessionpool
prefetchsize
activationspec getnolocalbooleanvalue
else
consumer   connection createconnectionconsumer
dest
emptytonull activationspec getmessageselector
serversessionpool
prefetchsize
activationspec getnolocalbooleanvalue
if   connecting compareandset true  false
if   log isinfoenabled
log info     adapter getinfo   getserverurl
else
log error
catch  jmsexception error
if   log isdebugenabled
log debug     error getmessage    error
disconnect
pause error
private void pause jmsexception error
if  currentreconnectdelay    max_reconnect_delay
log error     adapter getinfo   getserverurl
error getmessage    error
log error      max_reconnect_delay   1000
try
synchronized   shutdownmutex
// shutdownmutex will be notified by stop() method in
// order to accelerate shutdown of endpoint
shutdownmutex wait currentreconnectdelay
catch   interruptedexception e
thread interrupted
currentreconnectdelay    2
if  currentreconnectdelay > max_reconnect_delay
currentreconnectdelay   max_reconnect_delay
messageactivationspec activationspec   endpointactivationkey getactivationspec
if    equals activationspec getdestinationtype
dest   new activemqqueue activationspec getdestination
else if    equals activationspec getdestinationtype
dest   new activemqtopic activationspec getdestination
else
throw new resourceexception     activationspec getdestinationtype
/**
* @param c
*/
public static void safeclose connection c
try
if  c    null
log debug
c close
catch  jmsexception e
//
/**
* @param cc
*/
public static void safeclose connectionconsumer cc
try
if  cc    null
log debug
cc close
catch  jmsexception e
//
/**
*
*/
public void start   throws resourceexception
synchronized  connectwork
if  running
return
running   true
if   connecting compareandset false  true
log info
serversessionpool   new serversessionpoolimpl this  endpointactivationkey getactivationspec   getmaxsessionsintvalue
connect
else
log warn
/**
*
*/
public void stop   throws interruptedexception
synchronized  shutdownmutex
if   running
return
running   false
log info
// wake up pausing reconnect attempt
shutdownmutex notifyall
serversessionpool close
disconnect
private boolean isrunning
return running
private void connect
synchronized   connectwork
if   running
return
try
workmanager schedulework connectwork  workmanager indefinite  null  null
catch  workexception e
running   false
log error    e
/**
*
*/
private void disconnect
synchronized   connectwork
safeclose consumer
consumer   null
safeclose connection
connection   null
protected void registerthreadsession session session
thread_local set session
protected void unregisterthreadsession session session
thread_local set null
protected activemqconnection getconnection
// make sure we only return a working connection
// in particular make sure that we do not return null
// after the resource adapter got disconnected from
// the broker via the disconnect() method
synchronized   connectwork
return connection
private string emptytonull string value
if  value    null    value length      0
return null
return value