/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq transport tcp
import java io filterinputstream
import java io ioexception
import java io inputstream
/**
* an optimized buffered input stream for tcp
*
* @version $revision: 1.1.1.1 $
*/
public class tcpbufferedinputstream extends filterinputstream
private static final int default_buffer_size   8192
protected byte internalbuffer
protected int count
protected int position
public tcpbufferedinputstream inputstream in
this in  default_buffer_size
public tcpbufferedinputstream inputstream in  int size
super in
if  size <  0
throw new illegalargumentexception
internalbuffer   new byte
private void fill   throws ioexception
byte buffer   internalbuffer
count   0
position   0
int n   in read buffer  position  buffer length   position
if  n > 0
count   n   position
public int read   throws ioexception
if  position >  count
fill
if  position >  count
return  1
return internalbuffer   0xff
private int readstream byte b  int off  int len  throws ioexception
int avail   count   position
if  avail <  0
if  len >  internalbuffer length
return in read b  off  len
fill
avail   count   position
if  avail <  0
return  1
int cnt    avail < len  ? avail   len
system arraycopy internalbuffer  position  b  off  cnt
position    cnt
return cnt
public int read byte b  int off  int len  throws ioexception
if   off   len    off   len     b length    off   len    < 0
throw new indexoutofboundsexception
else if  len    0
return 0
int n   0
for
int nread   readstream b  off   n  len   n
if  nread <  0
return  n    0  ? nread   n
n    nread
if  n >  len
return n
// if not closed but no bytes available, return
inputstream input   in
if  input    null    input available   <  0
return n
public long skip long n  throws ioexception
if  n <  0
return 0
long avail   count   position
if  avail <  0
return in skip n
long skipped    avail < n  ? avail   n
position    skipped
return skipped
public int available   throws ioexception
return in available      count   position
public boolean marksupported
return false
public void close   throws ioexception
if  in    null
in close