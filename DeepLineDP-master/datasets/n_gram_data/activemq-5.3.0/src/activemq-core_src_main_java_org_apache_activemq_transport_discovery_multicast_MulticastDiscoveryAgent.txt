/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq transport discovery multicast
import java io ioexception
import java net datagrampacket
import java net inetaddress
import java net inetsocketaddress
import java net multicastsocket
import java net networkinterface
import java net socketaddress
import java net sockettimeoutexception
import java net uri
import java util iterator
import java util map
import java util concurrent concurrenthashmap
import java util concurrent executorservice
import java util concurrent linkedblockingqueue
import java util concurrent threadfactory
import java util concurrent threadpoolexecutor
import java util concurrent timeunit
import java util concurrent atomic atomicboolean
import org apache activemq command discoveryevent
import org apache activemq transport discovery discoveryagent
import org apache activemq transport discovery discoverylistener
import org apache commons logging log
import org apache commons logging logfactory
/**
* a {@link discoveryagent} using a multicast address and heartbeat packets
* encoded using any wireformat, but openwire by default.
*
* @version $revision$
*/
public class multicastdiscoveryagent implements discoveryagent  runnable
public static final string default_discovery_uri_string
public static final string default_host_str
public static final string default_host_ip    system getproperty
public static final int    default_port    6155
private static final log log   logfactory getlog multicastdiscoveryagent class
private static final string type_suffix
private static final string alive
private static final string dead
private static final string delimiter
private static final int buff_size   8192
private static final int default_idle_time   500
private static final int heartbeat_miss_before_death   10
private long initialreconnectdelay   1000   5
private long maxreconnectdelay   1000   30
private long backoffmultiplier   2
private boolean useexponentialbackoff
private int maxreconnectattempts
private int timetolive   1
private boolean loopbackmode
private map<string  remotebrokerdata> brokersbyservice   new concurrenthashmap<string  remotebrokerdata>
private string group
private uri discoveryuri
private inetaddress inetaddress
private socketaddress sockaddress
private discoverylistener discoverylistener
private string selfservice
private multicastsocket mcast
private thread runner
private long keepaliveinterval   default_idle_time
private string mcinterface
private string mcnetworkinterface
private long lastadvertizetime
private atomicboolean started   new atomicboolean false
private boolean reportadvertizefailed   true
private executorservice executor   null
class remotebrokerdata
final string brokername
final string service
long lastheartbeat
long recoverytime
int failurecount
boolean failed
public remotebrokerdata string brokername  string service
this brokername   brokername
this service   service
this lastheartbeat   system currenttimemillis
public synchronized void updateheartbeat
lastheartbeat   system currenttimemillis
// consider that the broker recovery has succeeded if it has not
// failed in 60 seconds.
if   failed    failurecount > 0     lastheartbeat   recoverytime  > 1000   60
if  log isdebugenabled
log debug     service
failurecount   0
recoverytime   0
public synchronized long getlastheartbeat
return lastheartbeat
public synchronized boolean markfailed
if   failed
failed   true
failurecount
long reconnectdelay
if   useexponentialbackoff
reconnectdelay   initialreconnectdelay
else
reconnectdelay    long math pow backoffmultiplier  failurecount
if  reconnectdelay > maxreconnectdelay
reconnectdelay   maxreconnectdelay
if  log isdebugenabled
log debug     service       reconnectdelay
failurecount
recoverytime   system currenttimemillis     reconnectdelay
return true
return false
/**
* @return true if this broker is marked failed and it is now the right
*         time to start recovery.
*/
public synchronized boolean dorecovery
if   failed
return false
// are we done trying to recover this guy?
if  maxreconnectattempts > 0    failurecount > maxreconnectattempts
if  log isdebugenabled
log debug     service
return false
// is it not yet time?
if  system currenttimemillis   < recoverytime
return false
if  log isdebugenabled
log debug     service
failed   false
return true
public boolean isfailed
return failed
/**
* set the discovery listener
*
* @param listener
*/
public void setdiscoverylistener discoverylistener listener
this discoverylistener   listener
/**
* register a service
*/
public void registerservice string name  throws ioexception
this selfservice   name
if  started get
doadvertizeself
/**
* @return returns the loopbackmode.
*/
public boolean isloopbackmode
return loopbackmode
/**
* @param loopbackmode the loopbackmode to set.
*/
public void setloopbackmode boolean loopbackmode
this loopbackmode   loopbackmode
/**
* @return returns the timetolive.
*/
public int gettimetolive
return timetolive
/**
* @param timetolive the timetolive to set.
*/
public void settimetolive int timetolive
this timetolive   timetolive
/**
* @return the discoveryuri
*/
public uri getdiscoveryuri
return discoveryuri
/**
* set the discoveryuri
*
* @param discoveryuri
*/
public void setdiscoveryuri uri discoveryuri
this discoveryuri   discoveryuri
public long getkeepaliveinterval
return keepaliveinterval
public void setkeepaliveinterval long keepaliveinterval
this keepaliveinterval   keepaliveinterval
public void setinterface string mcinterface
this mcinterface   mcinterface
public void setnetworkinterface string mcnetworkinterface
this mcnetworkinterface   mcnetworkinterface
/**
* start the discovery agent
*
* @throws exception
*/
public void start   throws exception
if  started compareandset false  true
if  group    null    group length      0
throw new ioexception
string type   gettype
if   type endswith
log warn     type
type
if  discoveryuri    null
discoveryuri   new uri default_discovery_uri_string
if  log istraceenabled
log trace     discoveryuri
string myhost   discoveryuri gethost
int    myport   discoveryuri getport
if  default_host_str equals myhost
myhost   default_host_ip
if myport < 0
myport   default_port
if  log istraceenabled
log trace     myhost
log trace     myport
log trace     group
log trace     mcinterface
log trace     mcnetworkinterface
this inetaddress   inetaddress getbyname myhost
this sockaddress   new inetsocketaddress this inetaddress  myport
mcast   new multicastsocket myport
mcast setloopbackmode loopbackmode
mcast settimetolive gettimetolive
mcast joingroup inetaddress
mcast setsotimeout  int keepaliveinterval
if  mcinterface    null
mcast setinterface inetaddress getbyname mcinterface
if  mcnetworkinterface    null
mcast setnetworkinterface networkinterface getbyname mcnetworkinterface
runner   new thread this
runner setname this tostring         runner getname
runner setdaemon true
runner start
doadvertizeself
/**
* stop the channel
*
* @throws exception
*/
public void stop   throws exception
if  started compareandset true  false
doadvertizeself
if  mcast    null
mcast close
runner interrupt
getexecutor   shutdownnow
public string gettype
return group       type_suffix
public void run
byte buf   new byte
datagrampacket packet   new datagrampacket buf  0  buf length
while  started get
dotimekeepingservices
try
mcast receive packet
if  packet getlength   > 0
string str   new string packet getdata    packet getoffset    packet getlength
processdata str
catch  sockettimeoutexception se
// ignore
catch  ioexception e
if  started get
log error     e
private void processdata string str
if  discoverylistener    null
if  str startswith gettype
string payload   str substring gettype   length
if  payload startswith alive
string brokername   getbrokername payload substring alive length
string service   payload substring alive length     brokername length     2
processalive brokername  service
else
string brokername   getbrokername payload substring dead length
string service   payload substring dead length     brokername length     2
processdead service
private void dotimekeepingservices
if  started get
long currenttime   system currenttimemillis
if  currenttime < lastadvertizetime      currenttime   keepaliveinterval  > lastadvertizetime
doadvertizeself
lastadvertizetime   currenttime
doexpireoldservices
private void doadvertizeself
if  selfservice    null
string payload   gettype
payload    started get   ? alive   dead
payload    delimiter       delimiter
payload    selfservice
try
byte data   payload getbytes
datagrampacket packet   new datagrampacket data  0  data length  sockaddress
mcast send packet
catch  ioexception e
// if a send fails, chances are all subsequent sends will fail
// too.. no need to keep reporting the
// same error over and over.
if  reportadvertizefailed
reportadvertizefailed   false
log error     payload  e
if    equals e getmessage
log error
mcast getlocaladdress
private void processalive string brokername  string service
if  selfservice    null     service equals selfservice
remotebrokerdata data   brokersbyservice get service
if  data    null
data   new remotebrokerdata brokername  service
brokersbyservice put service  data
fireserviceaddevent data
doadvertizeself
else
data updateheartbeat
if  data dorecovery
fireserviceaddevent data
private void processdead string service
if   service equals selfservice
remotebrokerdata data   brokersbyservice remove service
if  data    null     data isfailed
fireserviceremovedevent data
private void doexpireoldservices
long expiretime   system currenttimemillis      keepaliveinterval   heartbeat_miss_before_death
for  iterator<remotebrokerdata> i   brokersbyservice values   iterator    i hasnext
remotebrokerdata data   i next
if  data getlastheartbeat   < expiretime
processdead data service
private string getbrokername string str
string result   null
int start   str indexof delimiter
if  start >  0
int end   str indexof delimiter  start   1
result   str substring start   1  end
return result
public void servicefailed discoveryevent event  throws ioexception
remotebrokerdata data   brokersbyservice get event getservicename
if  data    null    data markfailed
fireserviceremovedevent data
private void fireserviceremovedevent remotebrokerdata data
if  discoverylistener    null
final discoveryevent event   new discoveryevent data service
event setbrokername data brokername
// have the listener process the event async so that
// he does not block this thread since we are doing time sensitive
// processing of events.
getexecutor   execute new runnable
public void run
discoverylistener discoverylistener   multicastdiscoveryagent this discoverylistener
if  discoverylistener    null
discoverylistener onserviceremove event
private void fireserviceaddevent remotebrokerdata data
if  discoverylistener    null
final discoveryevent event   new discoveryevent data service
event setbrokername data brokername
// have the listener process the event async so that
// he does not block this thread since we are doing time sensitive
// processing of events.
getexecutor   execute new runnable
public void run
discoverylistener discoverylistener   multicastdiscoveryagent this discoverylistener
if  discoverylistener    null
discoverylistener onserviceadd event
private executorservice getexecutor
if  executor    null
final string threadname       this tostring
executor   new threadpoolexecutor 1  1  30  timeunit seconds  new linkedblockingqueue<runnable>    new threadfactory
public thread newthread runnable runable
thread t   new thread runable   threadname
t setdaemon true
return t
return executor
public long getbackoffmultiplier
return backoffmultiplier
public void setbackoffmultiplier long backoffmultiplier
this backoffmultiplier   backoffmultiplier
public long getinitialreconnectdelay
return initialreconnectdelay
public void setinitialreconnectdelay long initialreconnectdelay
this initialreconnectdelay   initialreconnectdelay
public int getmaxreconnectattempts
return maxreconnectattempts
public void setmaxreconnectattempts int maxreconnectattempts
this maxreconnectattempts   maxreconnectattempts
public long getmaxreconnectdelay
return maxreconnectdelay
public void setmaxreconnectdelay long maxreconnectdelay
this maxreconnectdelay   maxreconnectdelay
public boolean isuseexponentialbackoff
return useexponentialbackoff
public void setuseexponentialbackoff boolean useexponentialbackoff
this useexponentialbackoff   useexponentialbackoff
public void setgroup string group
this group   group
@override
public string tostring
return
selfservice    null ?     selfservice       this discoverylistener