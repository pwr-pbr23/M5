/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq broker
import java io file
import java io ioexception
import java net uri
import java net urisyntaxexception
import java net unknownhostexception
import java util arraylist
import java util hashmap
import java util iterator
import java util list
import java util map
import java util set
import java util concurrent copyonwritearraylist
import java util concurrent countdownlatch
import java util concurrent timeunit
import java util concurrent atomic atomicboolean
import javax management malformedobjectnameexception
import javax management objectname
import org apache activemq activemqconnectionmetadata
import org apache activemq service
import org apache activemq advisory advisorybroker
import org apache activemq broker cluster connectionsplitbroker
import org apache activemq broker ft masterconnector
import org apache activemq broker jmx annotatedmbean
import org apache activemq broker jmx brokerview
import org apache activemq broker jmx connectorview
import org apache activemq broker jmx connectorviewmbean
import org apache activemq broker jmx ftconnectorview
import org apache activemq broker jmx jmsconnectorview
import org apache activemq broker jmx managedregionbroker
import org apache activemq broker jmx managementcontext
import org apache activemq broker jmx networkconnectorview
import org apache activemq broker jmx networkconnectorviewmbean
import org apache activemq broker jmx proxyconnectorview
import org apache activemq broker region compositedestinationinterceptor
import org apache activemq broker region destination
import org apache activemq broker region destinationfactory
import org apache activemq broker region destinationfactoryimpl
import org apache activemq broker region destinationinterceptor
import org apache activemq broker region regionbroker
import org apache activemq broker region policy policymap
import org apache activemq broker region virtual mirroredqueue
import org apache activemq broker region virtual virtualdestination
import org apache activemq broker region virtual virtualdestinationinterceptor
import org apache activemq broker region virtual virtualtopic
import org apache activemq command activemqdestination
import org apache activemq command brokerid
import org apache activemq kaha store
import org apache activemq kaha storefactory
import org apache activemq network connectionfilter
import org apache activemq network discoverynetworkconnector
import org apache activemq network networkconnector
import org apache activemq network jms jmsconnector
import org apache activemq proxy proxyconnector
import org apache activemq security messageauthorizationpolicy
import org apache activemq security securitycontext
import org apache activemq selector selectorparser
import org apache activemq store persistenceadapter
import org apache activemq store persistenceadapterfactory
import org apache activemq store amq amqpersistenceadapterfactory
import org apache activemq store memory memorypersistenceadapter
import org apache activemq thread taskrunnerfactory
import org apache activemq transport transportfactory
import org apache activemq transport transportserver
import org apache activemq transport vm vmtransportfactory
import org apache activemq usage systemusage
import org apache activemq util ioexceptionsupport
import org apache activemq util iohelper
import org apache activemq util jmxsupport
import org apache activemq util servicestopper
import org apache activemq util urisupport
import org apache commons logging log
import org apache commons logging logfactory
/**
* manages the lifecycle of an activemq broker. a brokerservice consists of a
* number of transport connectors, network connectors and a bunch of properties
* which can be used to configure the broker as its lazily created.
*
* @version $revision: 1.1 $
*/
public class brokerservice implements service
protected countdownlatch slavestartsignal   new countdownlatch 1
public static final string default_port
public static final string local_host_name
public static final string default_broker_name
private static final log log   logfactory getlog brokerservice class
private static final long serialversionuid   7353129142305630237l
private boolean usejmx   true
private boolean enablestatistics   true
private boolean persistent   true
private boolean populatejmsxuserid
private boolean useshutdownhook   true
private boolean useloggingforshutdownerrors
private boolean shutdownonmasterfailure
private boolean shutdownonslavefailure
private boolean waitforslave
private boolean passiveslave
private string brokername   default_broker_name
private file datadirectoryfile
private file tmpdatadirectory
private broker broker
private brokerview adminview
private managementcontext managementcontext
private objectname brokerobjectname
private taskrunnerfactory taskrunnerfactory
private taskrunnerfactory persistencetaskrunnerfactory
private systemusage systemusage
private systemusage producersystemusage
private systemusage consumersystemusaage
private persistenceadapter persistenceadapter
private persistenceadapterfactory persistencefactory
protected destinationfactory destinationfactory
private messageauthorizationpolicy messageauthorizationpolicy
private list<transportconnector> transportconnectors   new copyonwritearraylist<transportconnector>
private list<networkconnector> networkconnectors   new copyonwritearraylist<networkconnector>
private list<proxyconnector> proxyconnectors   new copyonwritearraylist<proxyconnector>
private list<jmsconnector> jmsconnectors   new copyonwritearraylist<jmsconnector>
private list<service> services   new arraylist<service>
private masterconnector masterconnector
private string masterconnectoruri
private transient thread shutdownhook
private string transportconnectoruris
private string networkconnectoruris
private jmsconnector jmsbridgeconnectors     these are jms to jms bridges
// to other jms messaging
// systems
private boolean deleteallmessagesonstartup
private boolean advisorysupport   true
private uri vmconnectoruri
private policymap destinationpolicy
private atomicboolean started   new atomicboolean false
private atomicboolean stopped   new atomicboolean false
private brokerplugin plugins
private boolean keepdurablesubsactive   true
private boolean usevirtualtopics   true
private boolean usemirroredqueues   false
private boolean usetempmirroredqueues   true
private brokerid brokerid
private destinationinterceptor destinationinterceptors
private activemqdestination destinations
private store tempdatastore
private int persistencethreadpriority   thread max_priority
private boolean uselocalhostbrokername
private countdownlatch stoppedlatch   new countdownlatch 1
private countdownlatch startedlatch   new countdownlatch 1
private boolean supportfailover
private broker regionbroker
private int producersystemusageportion   60
private int consumersystemusageportion   40
private boolean splitsystemusageforproducersconsumers
private boolean monitorconnectionsplits   false
private int taskrunnerpriority   thread norm_priority
private boolean dedicatedtaskrunner
private boolean cachetempdestinations   false    useful for failover
private int timebeforepurgetempdestinations   5000
private list<runnable> shutdownhooks   new arraylist<runnable>
private boolean systemexitonshutdown
private int systemexitonshutdownexitcode
private sslcontext sslcontext
private boolean forcestart   false
static
string localhostname
try
localhostname   java net inetaddress getlocalhost   gethostname
catch  unknownhostexception e
log error
local_host_name   localhostname
@override
public string tostring
return     getbrokername
/**
* adds a new transport connector for the given bind address
*
* @return the newly created and added transport connector
* @throws exception
*/
public transportconnector addconnector string bindaddress  throws exception
return addconnector new uri bindaddress
/**
* adds a new transport connector for the given bind address
*
* @return the newly created and added transport connector
* @throws exception
*/
public transportconnector addconnector uri bindaddress  throws exception
return addconnector createtransportconnector bindaddress
/**
* adds a new transport connector for the given transportserver transport
*
* @return the newly created and added transport connector
* @throws exception
*/
public transportconnector addconnector transportserver transport  throws exception
return addconnector new transportconnector transport
/**
* adds a new transport connector
*
* @return the transport connector
* @throws exception
*/
public transportconnector addconnector transportconnector connector  throws exception
transportconnectors add connector
return connector
/**
* stops and removes a transport connector from the broker.
*
* @param connector
* @return true if the connector has been previously added to the broker
* @throws exception
*/
public boolean removeconnector transportconnector connector  throws exception
boolean rc   transportconnectors remove connector
if  rc
unregisterconnectormbean connector
return rc
/**
* adds a new network connector using the given discovery address
*
* @return the newly created and added network connector
* @throws exception
*/
public networkconnector addnetworkconnector string discoveryaddress  throws exception
return addnetworkconnector new uri discoveryaddress
/**
* adds a new proxy connector using the given bind address
*
* @return the newly created and added network connector
* @throws exception
*/
public proxyconnector addproxyconnector string bindaddress  throws exception
return addproxyconnector new uri bindaddress
/**
* adds a new network connector using the given discovery address
*
* @return the newly created and added network connector
* @throws exception
*/
public networkconnector addnetworkconnector uri discoveryaddress  throws exception
if   isadvisorysupport
throw new javax jms illegalstateexception
networkconnector connector   new discoverynetworkconnector discoveryaddress
return addnetworkconnector connector
/**
* adds a new proxy connector using the given bind address
*
* @return the newly created and added network connector
* @throws exception
*/
public proxyconnector addproxyconnector uri bindaddress  throws exception
proxyconnector connector   new proxyconnector
connector setbind bindaddress
connector setremote new uri
return addproxyconnector connector
/**
* adds a new network connector to connect this broker to a federated
* network
*/
public networkconnector addnetworkconnector networkconnector connector  throws exception
connector setbrokerservice this
uri uri   getvmconnectoruri
map<string  string> map   new hashmap<string  string> urisupport parseparamters uri
map put
uri   urisupport createuriwithquery uri  urisupport createquerystring map
connector setlocaluri uri
// set a connection filter so that the connector does not establish loop
// back connections.
connector setconnectionfilter new connectionfilter
public boolean connectto uri location
list<transportconnector> transportconnectors   gettransportconnectors
for  iterator<transportconnector> iter   transportconnectors iterator    iter hasnext
try
transportconnector tc   iter next
if  location equals tc getconnecturi
return false
catch  throwable e
return true
networkconnectors add connector
if  isusejmx
registernetworkconnectormbean connector
return connector
/**
* removes the given network connector without stopping it. the caller
* should call {@link networkconnector#stop()} to close the connector
*/
public boolean removenetworkconnector networkconnector connector
boolean answer   networkconnectors remove connector
if  answer
unregisternetworkconnectormbean connector
return answer
public proxyconnector addproxyconnector proxyconnector connector  throws exception
uri uri   getvmconnectoruri
connector setlocaluri uri
proxyconnectors add connector
if  isusejmx
registerproxyconnectormbean connector
return connector
public jmsconnector addjmsconnector jmsconnector connector  throws exception
connector setbrokerservice this
jmsconnectors add connector
if  isusejmx
registerjmsconnectormbean connector
return connector
public jmsconnector removejmsconnector jmsconnector connector
if  jmsconnectors remove connector
return connector
return null
/**
* @return returns the masterconnectoruri.
*/
public string getmasterconnectoruri
return masterconnectoruri
/**
* @param masterconnectoruri
*            the masterconnectoruri to set.
*/
public void setmasterconnectoruri string masterconnectoruri
this masterconnectoruri   masterconnectoruri
/**
* @return true if this broker is a slave to a master
*/
public boolean isslave
return  masterconnector    null    masterconnector isslave
masterconnector    null    masterconnector isstoppedbeforestart
public void masterfailed
if  shutdownonmasterfailure
log fatal
try
stop
catch  exception e
log error    e
else
log warn
try
startallconnectors
broker nowmasterbroker
catch  exception e
log error    e
public boolean isstarted
return started get
public void start boolean force  throws exception
forcestart   force
stopped set false
started set false
start
// service interface
// -------------------------------------------------------------------------
public void start   throws exception
if  stopped get       started compareandset false  true
// lets just ignore redundant start() calls
// as its way too easy to not be completely sure if start() has been
// called or not with the gazillion of different configuration
// mechanisms
// throw new illegalstateexception("allready started.");
return
try
if  systemexitonshutdown
addshutdownhook new runnable
public void run
system exit systemexitonshutdownexitcode
processhelperproperties
getpersistenceadapter   setusagemanager getproducersystemusage
getpersistenceadapter   setbrokername getbrokername
log info     getpersistenceadapter
if  deleteallmessagesonstartup
deleteallmessages
getpersistenceadapter   start
startdestinations
addshutdownhook
getbroker   start
if  isusejmx
getmanagementcontext   start
managedregionbroker managedbroker    managedregionbroker  regionbroker
managedbroker setcontextbroker broker
adminview   new brokerview this  managedbroker
objectname objectname   getbrokerobjectname
annotatedmbean registermbean getmanagementcontext    adminview  objectname
brokerregistry getinstance   bind getbrokername    this
// see if there is a masterbroker service and if so, configure
// it and start it.
for  service service   services
if  service instanceof masterconnector
configureservice service
service start
if   isslave       this masterconnector    null    isshutdownonmasterfailure      false
startallconnectors
if   stopped get
if  isusejmx      masterconnector    null
registerftconnectormbean masterconnector
brokerid   broker getbrokerid
log info     getbrokername         brokerid
getbroker   brokerservicestarted
startedlatch countdown
catch  exception e
log error     e  e
try
if   stopped get
stop
catch  exception ex
log warn    ex
throw e
public void stop   throws exception
if   started compareandset true  false
return
log info     getbrokername         brokerid
removeshutdownhook
servicestopper stopper   new servicestopper
if  services    null
for  service service   services
stopper stop service
stopallconnectors stopper
// remove any vmtransports connected
// this has to be done after services are stopped,
// to avoid timimg issue with discovery (spinning up a new instance)
brokerregistry getinstance   unbind getbrokername
vmtransportfactory stopped getbrokername
if  broker    null
stopper stop broker
if  tempdatastore    null
tempdatastore close
stopper stop persistenceadapter
if  isusejmx
stopper stop getmanagementcontext
// clear selectorparser cache to free memory
selectorparser clearcache
stopped set true
stoppedlatch countdown
if  masterconnectoruri    null
// master start has not finished yet
if  slavestartsignal getcount      1
started set false
slavestartsignal countdown
else
for  service service   services
if  service instanceof masterconnector
masterconnector mconnector    masterconnector  service
if   mconnector isslave
// means should be slave but not connected to master yet
started set false
mconnector stopbeforeconnected
log info     getbrokername         brokerid
synchronized  shutdownhooks
for  runnable hook   shutdownhooks
try
hook run
catch  throwable e
stopper onexception hook  e
stopper throwfirstexception
public boolean checkqueuesize string queuename
long count   0
long queuesize   0
map<activemqdestination  destination> destinationmap   regionbroker getdestinationmap
for  map entry<activemqdestination  destination> entry   destinationmap entryset
if  entry getkey   isqueue
if  entry getvalue   getname   matches queuename
queuesize   entry getvalue   getdestinationstatistics   getmessages   getcount
count   queuesize
if  queuesize > 0
log info     entry getvalue   getname
queuesize
return count    0
/**
* this method (both connectorname and queuename are using regex to match)
* 1. stop the connector (supposed the user input the connector which the
* clients connect to) 2. to check whether there is any pending message on
* the queues defined by queuename 3. supposedly, after stop the connector,
* client should failover to other broker and pending messages should be
* forwarded. if no pending messages, the method finally call stop to stop
* the broker.
*
* @param connectorname
* @param queuename
* @param timeout
* @param pollinterval
* @throws exception
*/
public void stopgracefully string connectorname  string queuename  long timeout  long pollinterval
throws exception
if  isusejmx
if  connectorname    null    queuename    null    timeout <  0
throw new exception
if  pollinterval <  0
pollinterval   30
log info     connectorname       queuename
timeout       pollinterval
transportconnector connector
for  int i   0  i < transportconnectors size    i
connector   transportconnectors get i
if  connector    null    connector getname      null    connector getname   matches connectorname
connector stop
long start   system currenttimemillis
while  system currenttimemillis     start < timeout   1000
// check quesize until it gets zero
if  checkqueuesize queuename
stop
break
else
thread sleep pollinterval   1000
if  stopped get
log info
else
log info
/**
* a helper method to block the caller thread until the broker has been
* stopped
*/
public void waituntilstopped
while  isstarted       stopped get
try
stoppedlatch await
catch  interruptedexception e
// ignore
/**
* a helper method to block the caller thread until the broker has been
* started
*/
public void waituntilstarted
boolean waitsucceeded   false
while  isstarted       stopped get       waitsucceeded
try
waitsucceeded   startedlatch await 100l  timeunit milliseconds
catch  interruptedexception ignore
// properties
// -------------------------------------------------------------------------
/**
* returns the message broker
*/
public broker getbroker   throws exception
if  broker    null
log info     activemqconnectionmetadata provider_version
getbrokername
log info
broker   createbroker
return broker
/**
* returns the administration view of the broker; used to create and destroy
* resources such as queues and topics. note this method returns null if jmx
* is disabled.
*/
public brokerview getadminview   throws exception
if  adminview    null
// force lazy creation
getbroker
return adminview
public void setadminview brokerview adminview
this adminview   adminview
public string getbrokername
return brokername
/**
* sets the name of this broker; which must be unique in the network
*
* @param brokername
*/
public void setbrokername string brokername
if  brokername    null
throw new nullpointerexception
string str   brokername replaceall
if   str equals brokername
log error     brokername       str
this brokername   str trim
public persistenceadapterfactory getpersistencefactory
if  persistencefactory    null
persistencefactory   createpersistencefactory
return persistencefactory
public file getdatadirectoryfile
if  datadirectoryfile    null
datadirectoryfile   new file iohelper getdefaultdatadirectory
return datadirectoryfile
public file getbrokerdatadirectory
string brokerdir   getbrokername
return new file getdatadirectoryfile    brokerdir
/**
* sets the directory in which the data files will be stored by default for
* the jdbc and journal persistence adaptors.
*
* @param datadirectory
*            the directory to store data files
*/
public void setdatadirectory string datadirectory
setdatadirectoryfile new file datadirectory
/**
* sets the directory in which the data files will be stored by default for
* the jdbc and journal persistence adaptors.
*
* @param datadirectoryfile
*            the directory to store data files
*/
public void setdatadirectoryfile file datadirectoryfile
this datadirectoryfile   datadirectoryfile
/**
* @return the tmpdatadirectory
*/
public file gettmpdatadirectory
if  tmpdatadirectory    null
tmpdatadirectory   new file getbrokerdatadirectory
return tmpdatadirectory
/**
* @param tmpdatadirectory
*            the tmpdatadirectory to set
*/
public void settmpdatadirectory file tmpdatadirectory
this tmpdatadirectory   tmpdatadirectory
public void setpersistencefactory persistenceadapterfactory persistencefactory
this persistencefactory   persistencefactory
public void setdestinationfactory destinationfactory destinationfactory
this destinationfactory   destinationfactory
public boolean ispersistent
return persistent
/**
* sets whether or not persistence is enabled or disabled.
*/
public void setpersistent boolean persistent
this persistent   persistent
public boolean ispopulatejmsxuserid
return populatejmsxuserid
/**
* sets whether or not the broker should populate the jmsxuserid header.
*/
public void setpopulatejmsxuserid boolean populatejmsxuserid
this populatejmsxuserid   populatejmsxuserid
public systemusage getsystemusage
try
if  systemusage    null
systemusage   new systemusage    getpersistenceadapter    gettempdatastore
systemusage getmemoryusage   setlimit 1024   1024   64      default
// 64
// meg
systemusage gettempusage   setlimit 1024l   1024   1024   100      10
// gb
systemusage getstoreusage   setlimit 1024l   1024   1024   100      100
// gb
addservice this systemusage
return systemusage
catch  ioexception e
log fatal    e
throw new runtimeexception     e getmessage
public void setsystemusage systemusage memorymanager
if  this systemusage    null
removeservice this systemusage
this systemusage   memorymanager
addservice this systemusage
/**
* @return the consumerusagemanager
* @throws ioexception
*/
public systemusage getconsumersystemusage   throws ioexception
if  this consumersystemusaage    null
if  splitsystemusageforproducersconsumers
this consumersystemusaage   new systemusage getsystemusage
float portion   consumersystemusageportion   100f
this consumersystemusaage getmemoryusage   setusageportion portion
addservice this consumersystemusaage
else
consumersystemusaage   getsystemusage
return this consumersystemusaage
/**
* @param consumersystemusaage
*            the storesystemusage to set
*/
public void setconsumersystemusage systemusage consumersystemusaage
if  this consumersystemusaage    null
removeservice this consumersystemusaage
this consumersystemusaage   consumersystemusaage
addservice this consumersystemusaage
/**
* @return the producerusagemanager
* @throws ioexception
*/
public systemusage getproducersystemusage   throws ioexception
if  producersystemusage    null
if  splitsystemusageforproducersconsumers
producersystemusage   new systemusage getsystemusage
float portion   producersystemusageportion   100f
producersystemusage getmemoryusage   setusageportion portion
addservice producersystemusage
else
producersystemusage   getsystemusage
return producersystemusage
/**
* @param producerusagemanager
*            the producerusagemanager to set
*/
public void setproducersystemusage systemusage producerusagemanager
if  this producersystemusage    null
removeservice this producersystemusage
this producersystemusage   producerusagemanager
addservice this producersystemusage
public persistenceadapter getpersistenceadapter   throws ioexception
if  persistenceadapter    null
persistenceadapter   createpersistenceadapter
configureservice persistenceadapter
this persistenceadapter   registerpersistenceadaptermbean persistenceadapter
return persistenceadapter
/**
* sets the persistence adaptor implementation to use for this broker
*
* @throws ioexception
*/
public void setpersistenceadapter persistenceadapter persistenceadapter  throws ioexception
this persistenceadapter   persistenceadapter
configureservice this persistenceadapter
this persistenceadapter   registerpersistenceadaptermbean persistenceadapter
public taskrunnerfactory gettaskrunnerfactory
if  taskrunnerfactory    null
taskrunnerfactory   new taskrunnerfactory    gettaskrunnerpriority    true  1000
isdedicatedtaskrunner
return taskrunnerfactory
public void settaskrunnerfactory taskrunnerfactory taskrunnerfactory
this taskrunnerfactory   taskrunnerfactory
public taskrunnerfactory getpersistencetaskrunnerfactory
if  taskrunnerfactory    null
persistencetaskrunnerfactory   new taskrunnerfactory    persistencethreadpriority
true  1000
return persistencetaskrunnerfactory
public void setpersistencetaskrunnerfactory taskrunnerfactory persistencetaskrunnerfactory
this persistencetaskrunnerfactory   persistencetaskrunnerfactory
public boolean isusejmx
return usejmx
public boolean isenablestatistics
return enablestatistics
/**
* sets whether or not the broker's services enable statistics or not.
*/
public void setenablestatistics boolean enablestatistics
this enablestatistics   enablestatistics
/**
* sets whether or not the broker's services should be exposed into jmx or
* not.
*/
public void setusejmx boolean usejmx
this usejmx   usejmx
public objectname getbrokerobjectname   throws ioexception
if  brokerobjectname    null
brokerobjectname   createbrokerobjectname
return brokerobjectname
/**
* sets the jmx objectname for this broker
*/
public void setbrokerobjectname objectname brokerobjectname
this brokerobjectname   brokerobjectname
public managementcontext getmanagementcontext
if  managementcontext    null
managementcontext   new managementcontext
return managementcontext
public void setmanagementcontext managementcontext managementcontext
this managementcontext   managementcontext
public networkconnector getnetworkconnectorbyname string connectorname
for  networkconnector connector   networkconnectors
if  connector getname   equals connectorname
return connector
return null
public string getnetworkconnectoruris
return networkconnectoruris
public void setnetworkconnectoruris string networkconnectoruris
this networkconnectoruris   networkconnectoruris
public transportconnector getconnectorbyname string connectorname
for  transportconnector connector   transportconnectors
if  connector getname   equals connectorname
return connector
return null
public map<string  string> gettransportconnectorurisasmap
map<string  string> answer   new hashmap<string  string>
for  transportconnector connector   transportconnectors
try
uri uri   connector getconnecturi
string scheme   uri getscheme
if  scheme    null
answer put scheme tolowercase    uri tostring
catch  exception e
log debug    e
return answer
public string gettransportconnectoruris
return transportconnectoruris
public void settransportconnectoruris string transportconnectoruris
this transportconnectoruris   transportconnectoruris
/**
* @return returns the jmsbridgeconnectors.
*/
public jmsconnector getjmsbridgeconnectors
return jmsbridgeconnectors
/**
* @param jmsconnectors
*            the jmsbridgeconnectors to set.
*/
public void setjmsbridgeconnectors jmsconnector jmsconnectors
this jmsbridgeconnectors   jmsconnectors
public service getservices
return  service  services toarray new service
/**
* sets the services associated with this broker such as a
* {@link masterconnector}
*/
public void setservices service services
this services clear
if  services    null
for  int i   0  i < services length  i
this services add services
/**
* adds a new service so that it will be started as part of the broker
* lifecycle
*/
public void addservice service service
services add service
public void removeservice service service
services remove service
public boolean isuseloggingforshutdownerrors
return useloggingforshutdownerrors
/**
* sets whether or not we should use commons-logging when reporting errors
* when shutting down the broker
*/
public void setuseloggingforshutdownerrors boolean useloggingforshutdownerrors
this useloggingforshutdownerrors   useloggingforshutdownerrors
public boolean isuseshutdownhook
return useshutdownhook
/**
* sets whether or not we should use a shutdown handler to close down the
* broker cleanly if the jvm is terminated. it is recommended you leave this
* enabled.
*/
public void setuseshutdownhook boolean useshutdownhook
this useshutdownhook   useshutdownhook
public boolean isadvisorysupport
return advisorysupport
/**
* allows the support of advisory messages to be disabled for performance
* reasons.
*/
public void setadvisorysupport boolean advisorysupport
this advisorysupport   advisorysupport
public list<transportconnector> gettransportconnectors
return new arraylist<transportconnector> transportconnectors
/**
* sets the transport connectors which this broker will listen on for new
* clients
*
* @org.apache.xbean.property
*                            nestedtype="org.apache.activemq.broker.transportconnector"
*/
public void settransportconnectors list<transportconnector> transportconnectors  throws exception
for  iterator<transportconnector> iter   transportconnectors iterator    iter hasnext
transportconnector connector   iter next
addconnector connector
public list<networkconnector> getnetworkconnectors
return new arraylist<networkconnector> networkconnectors
public list<proxyconnector> getproxyconnectors
return new arraylist<proxyconnector> proxyconnectors
/**
* sets the network connectors which this broker will use to connect to
* other brokers in a federated network
*
* @org.apache.xbean.property
*                            nestedtype="org.apache.activemq.network.networkconnector"
*/
public void setnetworkconnectors list networkconnectors  throws exception
for  iterator iter   networkconnectors iterator    iter hasnext
networkconnector connector    networkconnector  iter next
addnetworkconnector connector
/**
* sets the network connectors which this broker will use to connect to
* other brokers in a federated network
*/
public void setproxyconnectors list proxyconnectors  throws exception
for  iterator iter   proxyconnectors iterator    iter hasnext
proxyconnector connector    proxyconnector  iter next
addproxyconnector connector
public policymap getdestinationpolicy
return destinationpolicy
/**
* sets the destination specific policies available either for exact
* destinations or for wildcard areas of destinations.
*/
public void setdestinationpolicy policymap policymap
this destinationpolicy   policymap
public brokerplugin getplugins
return plugins
/**
* sets a number of broker plugins to install such as for security
* authentication or authorization
*/
public void setplugins brokerplugin plugins
this plugins   plugins
public messageauthorizationpolicy getmessageauthorizationpolicy
return messageauthorizationpolicy
/**
* sets the policy used to decide if the current connection is authorized to
* consume a given message
*/
public void setmessageauthorizationpolicy messageauthorizationpolicy messageauthorizationpolicy
this messageauthorizationpolicy   messageauthorizationpolicy
/**
* delete all messages from the persistent store
*
* @throws ioexception
*/
public void deleteallmessages   throws ioexception
getpersistenceadapter   deleteallmessages
public boolean isdeleteallmessagesonstartup
return deleteallmessagesonstartup
/**
* sets whether or not all messages are deleted on startup - mostly only
* useful for testing.
*/
public void setdeleteallmessagesonstartup boolean deletepersistentmessagesonstartup
this deleteallmessagesonstartup   deletepersistentmessagesonstartup
public uri getvmconnectoruri
if  vmconnectoruri    null
try
vmconnectoruri   new uri     getbrokername   replaceall
catch  urisyntaxexception e
log error     getbrokername    e
return vmconnectoruri
public void setvmconnectoruri uri vmconnectoruri
this vmconnectoruri   vmconnectoruri
/**
* @return returns the shutdownonmasterfailure.
*/
public boolean isshutdownonmasterfailure
return shutdownonmasterfailure
/**
* @param shutdownonmasterfailure
*            the shutdownonmasterfailure to set.
*/
public void setshutdownonmasterfailure boolean shutdownonmasterfailure
this shutdownonmasterfailure   shutdownonmasterfailure
public boolean iskeepdurablesubsactive
return keepdurablesubsactive
public void setkeepdurablesubsactive boolean keepdurablesubsactive
this keepdurablesubsactive   keepdurablesubsactive
public boolean isusevirtualtopics
return usevirtualtopics
/**
* sets whether or not <a
* href="http://activemq.apache.org/virtual-destinations.html">virtual
* topics</a> should be supported by default if they have not been
* explicitly configured.
*/
public void setusevirtualtopics boolean usevirtualtopics
this usevirtualtopics   usevirtualtopics
public destinationinterceptor getdestinationinterceptors
return destinationinterceptors
public boolean isusemirroredqueues
return usemirroredqueues
/**
* sets whether or not <a
* href="http://activemq.apache.org/mirrored-queues.html">mirrored
* queues</a> should be supported by default if they have not been
* explicitly configured.
*/
public void setusemirroredqueues boolean usemirroredqueues
this usemirroredqueues   usemirroredqueues
/**
* sets the destination interceptors to use
*/
public void setdestinationinterceptors destinationinterceptor destinationinterceptors
this destinationinterceptors   destinationinterceptors
public activemqdestination getdestinations
return destinations
/**
* sets the destinations which should be loaded/created on startup
*/
public void setdestinations activemqdestination destinations
this destinations   destinations
/**
* @return the tempdatastore
*/
public synchronized store gettempdatastore
if  tempdatastore    null
if   ispersistent
return null
boolean result   true
boolean empty   true
try
file directory   gettmpdatadirectory
if  directory exists      directory isdirectory
file files   directory listfiles
if  files    null    files length > 0
empty   false
for  int i   0  i < files length  i
file file   files
if   file isdirectory
result    file delete
if   empty
string str   result ?
log info str
tempdatastore   storefactory open gettmpdatadirectory
catch  ioexception e
throw new runtimeexception e
return tempdatastore
/**
* @param tempdatastore
*            the tempdatastore to set
*/
public void settempdatastore store tempdatastore
this tempdatastore   tempdatastore
public int getpersistencethreadpriority
return persistencethreadpriority
public void setpersistencethreadpriority int persistencethreadpriority
this persistencethreadpriority   persistencethreadpriority
/**
* @return the uselocalhostbrokername
*/
public boolean isuselocalhostbrokername
return this uselocalhostbrokername
/**
* @param uselocalhostbrokername
*            the uselocalhostbrokername to set
*/
public void setuselocalhostbrokername boolean uselocalhostbrokername
this uselocalhostbrokername   uselocalhostbrokername
if  uselocalhostbrokername     started get      brokername    null    brokername    default_broker_name
brokername   local_host_name
/**
* @return the supportfailover
*/
public boolean issupportfailover
return this supportfailover
/**
* @param supportfailover
*            the supportfailover to set
*/
public void setsupportfailover boolean supportfailover
this supportfailover   supportfailover
/**
* looks up and lazily creates if necessary the destination for the given
* jms name
*/
public destination getdestination activemqdestination destination  throws exception
return getbroker   adddestination getadminconnectioncontext    destination
public void removedestination activemqdestination destination  throws exception
getbroker   removedestination getadminconnectioncontext    destination  0
public int getproducersystemusageportion
return producersystemusageportion
public void setproducersystemusageportion int producersystemusageportion
this producersystemusageportion   producersystemusageportion
public int getconsumersystemusageportion
return consumersystemusageportion
public void setconsumersystemusageportion int consumersystemusageportion
this consumersystemusageportion   consumersystemusageportion
public boolean issplitsystemusageforproducersconsumers
return splitsystemusageforproducersconsumers
public void setsplitsystemusageforproducersconsumers boolean splitsystemusageforproducersconsumers
this splitsystemusageforproducersconsumers   splitsystemusageforproducersconsumers
public boolean ismonitorconnectionsplits
return monitorconnectionsplits
public void setmonitorconnectionsplits boolean monitorconnectionsplits
this monitorconnectionsplits   monitorconnectionsplits
public int gettaskrunnerpriority
return taskrunnerpriority
public void settaskrunnerpriority int taskrunnerpriority
this taskrunnerpriority   taskrunnerpriority
public boolean isdedicatedtaskrunner
return dedicatedtaskrunner
public void setdedicatedtaskrunner boolean dedicatedtaskrunner
this dedicatedtaskrunner   dedicatedtaskrunner
public boolean iscachetempdestinations
return cachetempdestinations
public void setcachetempdestinations boolean cachetempdestinations
this cachetempdestinations   cachetempdestinations
public int gettimebeforepurgetempdestinations
return timebeforepurgetempdestinations
public void settimebeforepurgetempdestinations int timebeforepurgetempdestinations
this timebeforepurgetempdestinations   timebeforepurgetempdestinations
public boolean isusetempmirroredqueues
return usetempmirroredqueues
public void setusetempmirroredqueues boolean usetempmirroredqueues
this usetempmirroredqueues   usetempmirroredqueues
//
// implementation methods
// -------------------------------------------------------------------------
/**
* handles any lazy-creation helper properties which are added to make
* things easier to configure inside environments such as spring
*
* @throws exception
*/
protected void processhelperproperties   throws exception
boolean masterserviceexists   false
if  transportconnectoruris    null
for  int i   0  i < transportconnectoruris length  i
string uri   transportconnectoruris
addconnector uri
if  networkconnectoruris    null
for  int i   0  i < networkconnectoruris length  i
string uri   networkconnectoruris
addnetworkconnector uri
if  jmsbridgeconnectors    null
for  int i   0  i < jmsbridgeconnectors length  i
addjmsconnector jmsbridgeconnectors
for  service service   services
if  service instanceof masterconnector
masterserviceexists   true
break
if  masterconnectoruri    null
if  masterserviceexists
throw new illegalstateexception
else
addservice new masterconnector masterconnectoruri
protected void stopallconnectors servicestopper stopper
for  iterator<networkconnector> iter   getnetworkconnectors   iterator    iter hasnext
networkconnector connector   iter next
unregisternetworkconnectormbean connector
stopper stop connector
for  iterator<proxyconnector> iter   getproxyconnectors   iterator    iter hasnext
proxyconnector connector   iter next
stopper stop connector
for  iterator<jmsconnector> iter   jmsconnectors iterator    iter hasnext
jmsconnector connector   iter next
stopper stop connector
for  iterator<transportconnector> iter   gettransportconnectors   iterator    iter hasnext
transportconnector connector   iter next
stopper stop connector
protected transportconnector registerconnectormbean transportconnector connector  throws ioexception
try
objectname objectname   createconnectorobjectname connector
connector   connector asmanagedconnector getmanagementcontext    objectname
connectorviewmbean view   new connectorview connector
annotatedmbean registermbean getmanagementcontext    view  objectname
return connector
catch  throwable e
throw ioexceptionsupport create     e getmessage    e
protected void unregisterconnectormbean transportconnector connector  throws ioexception
if  isusejmx
try
objectname objectname   createconnectorobjectname connector
getmanagementcontext   unregistermbean objectname
catch  throwable e
throw ioexceptionsupport create
e getmessage    e
protected persistenceadapter registerpersistenceadaptermbean persistenceadapter adaptor  throws ioexception
return adaptor
protected void unregisterpersistenceadaptermbean persistenceadapter adaptor  throws ioexception
if  isusejmx
private objectname createconnectorobjectname transportconnector connector  throws malformedobjectnameexception
return new objectname getmanagementcontext   getjmxdomainname
jmxsupport encodeobjectnamepart getbrokername
jmxsupport encodeobjectnamepart connector getname
protected void registernetworkconnectormbean networkconnector connector  throws ioexception
networkconnectorviewmbean view   new networkconnectorview connector
try
objectname objectname   createnetworkconnectorobjectname connector
connector setobjectname objectname
annotatedmbean registermbean getmanagementcontext    view  objectname
catch  throwable e
throw ioexceptionsupport create     e getmessage    e
protected objectname createnetworkconnectorobjectname networkconnector connector
throws malformedobjectnameexception
return new objectname getmanagementcontext   getjmxdomainname
jmxsupport encodeobjectnamepart getbrokername
jmxsupport encodeobjectnamepart connector getname
protected void unregisternetworkconnectormbean networkconnector connector
if  isusejmx
try
objectname objectname   createnetworkconnectorobjectname connector
getmanagementcontext   unregistermbean objectname
catch  exception e
log error     e  e
protected void registerproxyconnectormbean proxyconnector connector  throws ioexception
proxyconnectorview view   new proxyconnectorview connector
try
objectname objectname   new objectname getmanagementcontext   getjmxdomainname
jmxsupport encodeobjectnamepart getbrokername
jmxsupport encodeobjectnamepart connector getname
annotatedmbean registermbean getmanagementcontext    view  objectname
catch  throwable e
throw ioexceptionsupport create     e getmessage    e
protected void registerftconnectormbean masterconnector connector  throws ioexception
ftconnectorview view   new ftconnectorview connector
try
objectname objectname   new objectname getmanagementcontext   getjmxdomainname
jmxsupport encodeobjectnamepart getbrokername
annotatedmbean registermbean getmanagementcontext    view  objectname
catch  throwable e
throw ioexceptionsupport create     e getmessage    e
protected void registerjmsconnectormbean jmsconnector connector  throws ioexception
jmsconnectorview view   new jmsconnectorview connector
try
objectname objectname   new objectname getmanagementcontext   getjmxdomainname
jmxsupport encodeobjectnamepart getbrokername
jmxsupport encodeobjectnamepart connector getname
annotatedmbean registermbean getmanagementcontext    view  objectname
catch  throwable e
throw ioexceptionsupport create     e getmessage    e
/**
* factory method to create a new broker
*
* @throws exception
* @throws
* @throws
*/
protected broker createbroker   throws exception
regionbroker   createregionbroker
broker broker   addinterceptors regionbroker
// add a filter that will stop access to the broker once stopped
broker   new mutablebrokerfilter broker
broker old
public void stop   throws exception
old   this next getandset new errorbroker     this
// just ignore additional stop actions.
public void stop   throws exception
old stop
public void start   throws exception
if  forcestart    old    null
this next set old
getnext   start
return broker
/**
* factory method to create the core region broker onto which interceptors
* are added
*
* @throws exception
*/
protected broker createregionbroker   throws exception
if  destinationinterceptors    null
destinationinterceptors   createdefaultdestinationinterceptor
configureservices destinationinterceptors
destinationinterceptor destinationinterceptor   new compositedestinationinterceptor destinationinterceptors
if  destinationfactory    null
destinationfactory   new destinationfactoryimpl this  gettaskrunnerfactory    getpersistenceadapter
return createregionbroker destinationinterceptor
protected broker createregionbroker destinationinterceptor destinationinterceptor  throws ioexception
regionbroker regionbroker
if  isusejmx
regionbroker   new managedregionbroker this  getmanagementcontext    getbrokerobjectname
gettaskrunnerfactory    getconsumersystemusage    destinationfactory  destinationinterceptor
else
regionbroker   new regionbroker this  gettaskrunnerfactory    getconsumersystemusage    destinationfactory
destinationinterceptor
destinationfactory setregionbroker regionbroker
regionbroker setkeepdurablesubsactive keepdurablesubsactive
regionbroker setbrokername getbrokername
regionbroker getdestinationstatistics   setenabled enablestatistics
return regionbroker
/**
* create the default destination interceptor
*/
protected destinationinterceptor createdefaultdestinationinterceptor
list<destinationinterceptor> answer   new arraylist<destinationinterceptor>
if  isusevirtualtopics
virtualdestinationinterceptor interceptor   new virtualdestinationinterceptor
virtualtopic virtualtopic   new virtualtopic
virtualtopic setname
virtualdestination virtualdestinations     virtualtopic
interceptor setvirtualdestinations virtualdestinations
answer add interceptor
if  isusemirroredqueues
mirroredqueue interceptor   new mirroredqueue
answer add interceptor
destinationinterceptor array   new destinationinterceptor
answer toarray array
return array
/**
* strategy method to add interceptors to the broker
*
* @throws ioexception
*/
protected broker addinterceptors broker broker  throws exception
broker   new transactionbroker broker  getpersistenceadapter   createtransactionstore
if  isadvisorysupport
broker   new advisorybroker broker
broker   new compositedestinationbroker broker
if  ispopulatejmsxuserid
broker   new useridbroker broker
if  ismonitorconnectionsplits
broker   new connectionsplitbroker broker
if  plugins    null
for  int i   0  i < plugins length  i
brokerplugin plugin   plugins
broker   plugin installplugin broker
return broker
protected persistenceadapter createpersistenceadapter   throws ioexception
if  ispersistent
return getpersistencefactory   createpersistenceadapter
else
return new memorypersistenceadapter
protected amqpersistenceadapterfactory createpersistencefactory
amqpersistenceadapterfactory factory   new amqpersistenceadapterfactory
factory setdatadirectory getbrokerdatadirectory
factory settaskrunnerfactory getpersistencetaskrunnerfactory
factory setbrokername getbrokername
return factory
protected objectname createbrokerobjectname   throws ioexception
try
return new objectname getmanagementcontext   getjmxdomainname
jmxsupport encodeobjectnamepart getbrokername
catch  throwable e
throw ioexceptionsupport create     brokername  e
protected transportconnector createtransportconnector uri brokeruri  throws exception
transportserver transport   transportfactory bind this  brokeruri
return new transportconnector transport
/**
* extracts the port from the options
*/
protected object getport map options
object port   options get
if  port    null
port   default_port
log warn     port
return port
protected void addshutdownhook
if  useshutdownhook
shutdownhook   new thread
public void run
containershutdown
runtime getruntime   addshutdownhook shutdownhook
protected void removeshutdownhook
if  shutdownhook    null
try
runtime getruntime   removeshutdownhook shutdownhook
catch  exception e
log debug     e
/**
* causes a clean shutdown of the container when the vm is being shut down
*/
protected void containershutdown
try
stop
catch  ioexception e
throwable linkedexception   e getcause
if  linkedexception    null
logerror     e       linkedexception  linkedexception
else
logerror     e  e
if   useloggingforshutdownerrors
e printstacktrace system err
catch  exception e
logerror     e  e
protected void logerror string message  throwable e
if  useloggingforshutdownerrors
log error     e
else
system err println     e
/**
* starts any configured destinations on startup
*/
protected void startdestinations   throws exception
if  destinations    null
connectioncontext adminconnectioncontext   getadminconnectioncontext
for  int i   0  i < destinations length  i
activemqdestination destination   destinations
getbroker   adddestination adminconnectioncontext  destination
/**
* returns the broker's administration connection context used for
* configuring the broker at startup
*/
public connectioncontext getadminconnectioncontext   throws exception
connectioncontext adminconnectioncontext   getbroker   getadminconnectioncontext
if  adminconnectioncontext    null
adminconnectioncontext   createadminconnectioncontext
getbroker   setadminconnectioncontext adminconnectioncontext
return adminconnectioncontext
/**
* factory method to create the new administration connection context
* object. note this method is here rather than inside a default broker
* implementation to ensure that the broker reference inside it is the outer
* most interceptor
*/
protected connectioncontext createadminconnectioncontext   throws exception
connectioncontext context   new connectioncontext
context setbroker getbroker
context setsecuritycontext securitycontext broker_security_context
return context
protected void waitforslave
try
slavestartsignal await
catch  interruptedexception e
log error     e
protected void slaveconnectionestablished
slavestartsignal countdown
/**
* start all transport and network connections, proxies and bridges
*
* @throws exception
*/
protected void startallconnectors   throws exception
if   isslave
set<activemqdestination> durabledestinations   getbroker   getdurabledestinations
list<transportconnector> al   new arraylist<transportconnector>
for  iterator<transportconnector> iter   gettransportconnectors   iterator    iter hasnext
transportconnector connector   iter next
connector setbrokerservice this
al add starttransportconnector connector
if  al size   > 0
// let's clear the transportconnectors list and replace it with
// the started transportconnector instances
this transportconnectors clear
settransportconnectors al
uri uri   getvmconnectoruri
map<string  string> map   new hashmap<string  string> urisupport parseparamters uri
map put
map put
uri   urisupport createuriwithquery uri  urisupport createquerystring map
if  iswaitforslave
waitforslave
if   stopped get
for  iterator<networkconnector> iter   getnetworkconnectors   iterator    iter hasnext
networkconnector connector   iter next
connector setlocaluri uri
connector setbrokername getbrokername
connector setdurabledestinations durabledestinations
connector start
for  iterator<proxyconnector> iter   getproxyconnectors   iterator    iter hasnext
proxyconnector connector   iter next
connector start
for  iterator<jmsconnector> iter   jmsconnectors iterator    iter hasnext
jmsconnector connector   iter next
connector start
for  service service   services
configureservice service
service start
protected transportconnector starttransportconnector transportconnector connector  throws exception
connector settaskrunnerfactory gettaskrunnerfactory
messageauthorizationpolicy policy   getmessageauthorizationpolicy
if  policy    null
connector setmessageauthorizationpolicy policy
if  isusejmx
connector   registerconnectormbean connector
connector getstatistics   setenabled enablestatistics
connector start
return connector
/**
* perform any custom dependency injection
*/
protected void configureservices object services
for  object service   services
configureservice service
/**
* perform any custom dependency injection
*/
protected void configureservice object service
if  service instanceof brokerserviceaware
brokerserviceaware serviceaware    brokerserviceaware  service
serviceaware setbrokerservice this
if  masterconnector    null
if  service instanceof masterconnector
masterconnector    masterconnector  service
supportfailover   true
/**
* starts all destiantions in persistence store. this includes all inactive
* destinations
*/
protected void startdestinationsinpersistencestore broker broker  throws exception
set destinations   destinationfactory getdestinations
if  destinations    null
iterator iter   destinations iterator
connectioncontext adminconnectioncontext   broker getadminconnectioncontext
if  adminconnectioncontext    null
connectioncontext context   new connectioncontext
context setbroker broker
adminconnectioncontext   context
broker setadminconnectioncontext adminconnectioncontext
while  iter hasnext
activemqdestination destination    activemqdestination  iter next
broker adddestination adminconnectioncontext  destination
public broker getregionbroker
return regionbroker
public void setregionbroker broker regionbroker
this regionbroker   regionbroker
public void addshutdownhook runnable hook
synchronized  shutdownhooks
shutdownhooks add hook
public void removeshutdownhook runnable hook
synchronized  shutdownhooks
shutdownhooks remove hook
public boolean issystemexitonshutdown
return systemexitonshutdown
public void setsystemexitonshutdown boolean systemexitonshutdown
this systemexitonshutdown   systemexitonshutdown
public int getsystemexitonshutdownexitcode
return systemexitonshutdownexitcode
public void setsystemexitonshutdownexitcode int systemexitonshutdownexitcode
this systemexitonshutdownexitcode   systemexitonshutdownexitcode
public sslcontext getsslcontext
return sslcontext
public void setsslcontext sslcontext sslcontext
this sslcontext   sslcontext
public boolean isshutdownonslavefailure
return shutdownonslavefailure
public void setshutdownonslavefailure boolean shutdownonslavefailure
this shutdownonslavefailure   shutdownonslavefailure
public boolean iswaitforslave
return waitforslave
public void setwaitforslave boolean waitforslave
this waitforslave   waitforslave
public countdownlatch getslavestartsignal
return slavestartsignal
/**
* get the passiveslave
* @return the passiveslave
*/
public boolean ispassiveslave
return this passiveslave
/**
* set the passiveslave
* @param passiveslave the passiveslave to set
*/
public void setpassiveslave boolean passiveslave
this passiveslave   passiveslave