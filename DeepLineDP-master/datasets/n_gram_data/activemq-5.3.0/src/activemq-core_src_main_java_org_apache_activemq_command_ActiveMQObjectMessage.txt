/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq command
import java io datainputstream
import java io dataoutputstream
import java io ioexception
import java io inputstream
import java io objectoutputstream
import java io outputstream
import java io serializable
import java util zip deflateroutputstream
import java util zip inflaterinputstream
import javax jms jmsexception
import javax jms objectmessage
import org apache activemq activemqconnection
import org apache activemq util bytearrayinputstream
import org apache activemq util bytearrayoutputstream
import org apache activemq util bytesequence
import org apache activemq util classloadingawareobjectinputstream
import org apache activemq util jmsexceptionsupport
/**
* an <code>objectmessage</code> object is used to send a message that
* contains a serializable object in the java programming language ("java
* object"). it inherits from the <code>message</code> interface and adds a
* body containing a single reference to an object. only
* <code>serializable</code> java objects can be used. <p/>
* <p>
* if a collection of java objects must be sent, one of the
* <code>collection</code> classes provided since jdk 1.2 can be used. <p/>
* <p>
* when a client receives an <code>objectmessage</code>, it is in read-only
* mode. if a client attempts to write to the message at this point, a
* <code>messagenotwriteableexception</code> is thrown. if
* <code>clearbody</code> is called, the message can now be both read from and
* written to.
*
* @openwire:marshaller code="26"
* @see javax.jms.session#createobjectmessage()
* @see javax.jms.session#createobjectmessage(serializable)
* @see javax.jms.bytesmessage
* @see javax.jms.mapmessage
* @see javax.jms.message
* @see javax.jms.streammessage
* @see javax.jms.textmessage
*/
public class activemqobjectmessage extends activemqmessage implements objectmessage
// todo: verify classloader
public static final byte data_structure_type   commandtypes activemq_object_message
static final classloader activemq_classloader   activemqobjectmessage class getclassloader
protected transient serializable object
public message copy
activemqobjectmessage copy   new activemqobjectmessage
copy copy
return copy
private void copy activemqobjectmessage copy
storecontent
super copy copy
copy object   null
public void storecontent
bytesequence bodyasbytes   getcontent
if  bodyasbytes    null    object    null
try
bytearrayoutputstream bytesout   new bytearrayoutputstream
outputstream os   bytesout
activemqconnection connection   getconnection
if  connection    null    connection isusecompression
compressed   true
os   new deflateroutputstream os
dataoutputstream dataout   new dataoutputstream os
objectoutputstream objout   new objectoutputstream dataout
objout writeobject object
objout flush
objout reset
objout close
setcontent bytesout tobytesequence
catch  ioexception ioe
throw new runtimeexception ioe getmessage    ioe
public byte getdatastructuretype
return data_structure_type
public string getjmsxmimetype
return
/**
* clears out the message body. clearing a message's body does not clear its
* header values or property entries. <p/>
* <p>
* if this message body was read-only, calling this method leaves the
* message body in the same state as an empty body in a newly created
* message.
*
* @throws jmsexception if the jms provider fails to clear the message body
*                 due to some internal error.
*/
public void clearbody   throws jmsexception
super clearbody
this object   null
/**
* sets the serializable object containing this message's data. it is
* important to note that an <code>objectmessage</code> contains a
* snapshot of the object at the time <code>setobject()</code> is called;
* subsequent modifications of the object will have no effect on the
* <code>objectmessage</code> body.
*
* @param newobject the message's data
* @throws jmsexception if the jms provider fails to set the object due to
*                 some internal error.
* @throws javax.jms.messageformatexception if object serialization fails.
* @throws javax.jms.messagenotwriteableexception if the message is in
*                 read-only mode.
*/
public void setobject serializable newobject  throws jmsexception
checkreadonlybody
this object   newobject
setcontent null
activemqconnection connection   getconnection
if  connection    null     connection isobjectmessageserializationdefered
storecontent
/**
* gets the serializable object containing this message's data. the default
* value is null.
*
* @return the serializable object containing this message's data
* @throws jmsexception
*/
public serializable getobject   throws jmsexception
if  object    null    getcontent      null
try
bytesequence content   getcontent
inputstream is   new bytearrayinputstream content
if  iscompressed
is   new inflaterinputstream is
datainputstream datain   new datainputstream is
classloadingawareobjectinputstream objin   new classloadingawareobjectinputstream datain
try
object    serializable objin readobject
catch  classnotfoundexception ce
throw jmsexceptionsupport create     ce  ce
finally
datain close
catch  ioexception e
throw jmsexceptionsupport create     e  e
return this object
public void onmessagerolledback
super onmessagerolledback
// lets force the object to be deserialized again - as we could have
// changed the object
object   null
public string tostring
try
getobject
catch  jmsexception e
return super tostring