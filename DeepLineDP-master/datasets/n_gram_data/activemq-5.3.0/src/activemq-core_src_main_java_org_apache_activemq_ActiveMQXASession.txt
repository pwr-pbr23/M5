/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq
import javax jms jmsexception
import javax jms queuesession
import javax jms session
import javax jms topicsession
import javax jms transactioninprogressexception
import javax jms xaqueuesession
import javax jms xatopicsession
import javax transaction xa xaresource
import org apache activemq command sessionid
/**
* the xasession interface extends the capability of session by adding access
* to a jms provider's support for the  java transaction api (jta) (optional).
* this support takes the form of a javax.transaction.xa.xaresource object.
* the functionality of this object closely resembles that defined by the
* standard x/open xa resource interface.
* <p/>
* an application server controls the transactional assignment of an xasession
* by obtaining its xaresource. it uses the xaresource to assign the session
* to a transaction, prepare and commit work on the transaction, and so on.
* <p/>
* an xaresource provides some fairly sophisticated facilities for
* interleaving work on multiple transactions, recovering a list of
* transactions in progress, and so on. a jta aware jms provider must fully
* implement this functionality. this could be done by using the services of a
* database that supports xa, or a jms provider may choose to implement this
* functionality from scratch.
* <p/>
* a client of the application server is given what it thinks is a regular
* jms session. behind the scenes, the application server controls the
* transaction management of the underlying xasession.
* <p/>
* the xasession interface is optional. jms providers are not required to
* support this interface. this interface is for use by jms providers to
* support transactional environments. client programs are strongly encouraged
* to use the transactional support  available in their environment, rather
* than use these xa  interfaces directly.
*
* @version $revision: 1.5 $
* @see javax.jms.session
* @see javax.jms.queuesession
* @see javax.jms.topicsession
* @see javax.jms.xasession
*/
public class activemqxasession extends activemqsession implements queuesession  topicsession  xaqueuesession  xatopicsession
public activemqxasession activemqxaconnection connection  sessionid sessionid  int theacknowlegemode  boolean dispatchasync  throws jmsexception
super connection  sessionid  theacknowlegemode  dispatchasync
public boolean gettransacted   throws jmsexception
return true
public void rollback   throws jmsexception
throw new transactioninprogressexception
public void commit   throws jmsexception
throw new transactioninprogressexception
public session getsession   throws jmsexception
return this
public xaresource getxaresource
return gettransactioncontext
public queuesession getqueuesession   throws jmsexception
return new activemqqueuesession this
public topicsession gettopicsession   throws jmsexception
return new activemqtopicsession this
/**
* this is called before transacted work is done by
* the session.  xa work can only be done when this
* xa resource is associated with an xid.
*
* @throws jmsexception not associated with an xid
*/
protected void dostarttransaction   throws jmsexception
if   gettransactioncontext   isinxatransaction
throw new jmsexception