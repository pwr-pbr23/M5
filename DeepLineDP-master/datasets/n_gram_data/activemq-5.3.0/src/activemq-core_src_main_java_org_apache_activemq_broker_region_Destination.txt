/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq broker region
import java io ioexception
import java util list
import org apache activemq service
import org apache activemq broker connectioncontext
import org apache activemq broker producerbrokerexchange
import org apache activemq broker region policy deadletterstrategy
import org apache activemq broker region policy shareddeadletterstrategy
import org apache activemq command activemqdestination
import org apache activemq command consumerinfo
import org apache activemq command message
import org apache activemq command messageack
import org apache activemq command messagedispatchnotification
import org apache activemq command producerinfo
import org apache activemq store messagestore
import org apache activemq thread task
import org apache activemq usage memoryusage
import org apache activemq usage usage
/**
* @version $revision: 1.12 $
*/
public interface destination extends service  task
public static final deadletterstrategy default_dead_letter_strategy   new shareddeadletterstrategy
void addsubscription connectioncontext context  subscription sub  throws exception
void removesubscription connectioncontext context  subscription sub  long lastdeliveredsequenceid  throws exception
void addproducer connectioncontext context  producerinfo info  throws exception
void removeproducer connectioncontext context  producerinfo info  throws exception
void send producerbrokerexchange producerexchange  message messagesend  throws exception
void acknowledge connectioncontext context  subscription sub  final messageack ack  final messagereference node  throws ioexception
void gc
activemqdestination getactivemqdestination
memoryusage getmemoryusage
void dispose connectioncontext context  throws ioexception
destinationstatistics getdestinationstatistics
deadletterstrategy getdeadletterstrategy
message browse
string getname
messagestore getmessagestore
boolean isproducerflowcontrol
void setproducerflowcontrol boolean value
int getmaxproducerstoaudit
void setmaxproducerstoaudit int maxproducerstoaudit
int getmaxauditdepth
void setmaxauditdepth int maxauditdepth
boolean isenableaudit
void setenableaudit boolean enableaudit
boolean isactive
int getmaxpagesize
public void setmaxpagesize int maxpagesize
public int getmaxbrowsepagesize
public void setmaxbrowsepagesize int maxpagesize
public boolean isusecache
public void setusecache boolean usecache
public int getminimummessagesize
public void setminimummessagesize int minimummessagesize
public int getcursormemoryhighwatermark
public void setcursormemoryhighwatermark int cursormemoryhighwatermark
/**
* optionally called by a subscriber - to inform the destination its
* ready for more messages
*/
public void wakeup
/**
* @return true if lazydispatch is enabled
*/
public boolean islazydispatch
/**
* set the lazy dispatch - default is false
* @param value
*/
public void setlazydispatch boolean value
/**
* inform the destination a message has expired
* @param context
* @param subs
* @param node
*/
void messageexpired connectioncontext context  subscription subs messagereference node
/**
* called when message is consumed
* @param context
* @param messagereference
*/
void messageconsumed connectioncontext context  messagereference messagereference
/**
* called when message is delivered to the broker
* @param context
* @param messagereference
*/
void messagedelivered connectioncontext context  messagereference messagereference
/**
* called when a message is discarded - e.g. running low on memory
* this will happen only if the policy is enabled - e.g. non durable topics
* @param context
* @param messagereference
*/
void messagediscarded connectioncontext context  messagereference messagereference
/**
* called when there is a slow consumer
* @param context
* @param subs
*/
void slowconsumer connectioncontext context  subscription subs
/**
* called to notify a producer is too fast
* @param context
* @param producerinfo
*/
void fastproducer connectioncontext context producerinfo producerinfo
/**
* called when a usage reaches a limit
* @param context
* @param usage
*/
void isfull connectioncontext context usage usage
list<subscription> getconsumers
/**
* called on queues in slave mode to allow dispatch to follow subscription choice of master
* @param messagedispatchnotification
* @throws exception
*/
void processdispatchnotification
messagedispatchnotification messagedispatchnotification  throws exception