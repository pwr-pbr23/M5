/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq broker region cursors
import java util collections
import java util linkedlist
import java util list
import org apache activemq activemqmessageaudit
import org apache activemq broker connectioncontext
import org apache activemq broker region basedestination
import org apache activemq broker region destination
import org apache activemq broker region messagereference
import org apache activemq command messageid
import org apache activemq usage systemusage
/**
* abstract method holder for pending message (messages awaiting disptach to a
* consumer) cursor
*
* @version $revision$
*/
public class abstractpendingmessagecursor implements pendingmessagecursor
protected int memoryusagehighwatermark   70
protected int maxbatchsize   basedestination max_page_size
protected systemusage systemusage
protected int maxproducerstoaudit 1024
protected int maxauditdepth 1000
protected boolean enableaudit true
protected activemqmessageaudit audit
protected boolean usecache true
private boolean started false
public synchronized void start   throws exception
if   started    enableaudit    audit  null
audit  new activemqmessageaudit maxauditdepth maxproducerstoaudit
started true
public synchronized void stop   throws exception
started false
audit null
gc
public void add connectioncontext context  destination destination  throws exception
@suppresswarnings
public list<messagereference> remove connectioncontext context  destination destination  throws exception
return collections empty_list
public boolean isrecoveryrequired
return true
public void addmessagefirst messagereference node  throws exception
public void addmessagelast messagereference node  throws exception
public void addrecoveredmessage messagereference node  throws exception
addmessagelast node
public void clear
public boolean hasnext
return false
public boolean isempty
return false
public boolean isempty destination destination
return isempty
public messagereference next
return null
public void remove
public void reset
public int size
return 0
public int getmaxbatchsize
return maxbatchsize
public void setmaxbatchsize int maxbatchsize
this maxbatchsize   maxbatchsize
protected void fillbatch   throws exception
public void resetforgc
reset
public void remove messagereference node
public void gc
public void setsystemusage systemusage usagemanager
this systemusage   usagemanager
public boolean hasspace
return systemusage    null ?  systemusage getmemoryusage   getpercentusage   < memoryusagehighwatermark    true
public boolean isfull
return systemusage    null ? systemusage getmemoryusage   isfull     false
public void release
public boolean hasmessagesbufferedtodeliver
return false
/**
* @return the memoryusagehighwatermark
*/
public int getmemoryusagehighwatermark
return memoryusagehighwatermark
/**
* @param memoryusagehighwatermark the memoryusagehighwatermark to set
*/
public void setmemoryusagehighwatermark int memoryusagehighwatermark
this memoryusagehighwatermark   memoryusagehighwatermark
/**
* @return the usagemanager
*/
public systemusage getsystemusage
return this systemusage
/**
* destroy the cursor
*
* @throws exception
*/
public void destroy   throws exception
stop
/**
* page in a restricted number of messages
*
* @param maxitems maximum number of messages to return
* @return a list of paged in messages
*/
public linkedlist<messagereference> pageinlist int maxitems
throw new runtimeexception
/**
* @return the maxproducerstoaudit
*/
public int getmaxproducerstoaudit
return maxproducerstoaudit
/**
* @param maxproducerstoaudit the maxproducerstoaudit to set
*/
public synchronized void setmaxproducerstoaudit int maxproducerstoaudit
this maxproducerstoaudit   maxproducerstoaudit
if  audit    null
audit setmaximumnumberofproducerstotrack maxproducerstoaudit
/**
* @return the maxauditdepth
*/
public int getmaxauditdepth
return maxauditdepth
/**
* @param maxauditdepth the maxauditdepth to set
*/
public synchronized void setmaxauditdepth int maxauditdepth
this maxauditdepth   maxauditdepth
if  audit    null
audit setauditdepth maxauditdepth
/**
* @return the enableaudit
*/
public boolean isenableaudit
return enableaudit
/**
* @param enableaudit the enableaudit to set
*/
public synchronized void setenableaudit boolean enableaudit
this enableaudit   enableaudit
if  enableaudit    started    audit  null
audit  new activemqmessageaudit maxauditdepth maxproducerstoaudit
public boolean istransient
return false
/**
* set the audit
* @param audit new audit component
*/
public void setmessageaudit activemqmessageaudit audit
this audit audit
/**
* @return the audit
*/
public activemqmessageaudit getmessageaudit
return audit
public boolean isusecache
return usecache
public void setusecache boolean usecache
this usecache   usecache
public synchronized boolean isduplicate messageid messageid
boolean unique   recorduniqueid messageid
rollback messageid
return  unique
/**
* records a message id and checks if it is a duplicate
* @param messageid
* @return true if id is unique, false otherwise.
*/
public synchronized boolean recorduniqueid messageid messageid
if   enableaudit    audit  null
return true
return  audit isduplicate messageid
public synchronized void rollback messageid id
if  audit    null
audit rollback id
protected synchronized boolean isstarted
return started