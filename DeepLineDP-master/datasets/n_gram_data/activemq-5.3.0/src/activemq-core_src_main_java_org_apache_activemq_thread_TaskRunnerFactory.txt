/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq thread
import java util concurrent executorservice
import java util concurrent synchronousqueue
import java util concurrent threadfactory
import java util concurrent threadpoolexecutor
import java util concurrent timeunit
/**
* manages the thread pool for long running tasks. long running tasks are not
* always active but when they are active, they may need a few iterations of
* processing for them to become idle. the manager ensures that each task is
* processes but that no one task overtakes the system. this is kina like
* cooperative multitasking.
*
* @version $revision: 1.5 $
*/
public class taskrunnerfactory
private executorservice executor
private int maxiterationsperrun
private string name
private int priority
private boolean daemon
public taskrunnerfactory
this    thread norm_priority  true  1000
public taskrunnerfactory string name  int priority  boolean daemon  int maxiterationsperrun
this name priority daemon maxiterationsperrun false
public taskrunnerfactory string name  int priority  boolean daemon  int maxiterationsperrun  boolean dedicatedtaskrunner
this name   name
this priority   priority
this daemon   daemon
this maxiterationsperrun   maxiterationsperrun
// if your os/jvm combination has a good thread model, you may want to
// avoid
// using a thread pool to run tasks and use a dedicatedtaskrunner
// instead.
if  dedicatedtaskrunner      equalsignorecase system getproperty
executor   null
else
executor   createdefaultexecutor
public void shutdown
if  executor    null
executor shutdownnow
public taskrunner createtaskrunner task task  string name
if  executor    null
return new pooledtaskrunner executor  task  maxiterationsperrun
else
return new dedicatedtaskrunner task  name  priority  daemon
protected executorservice createdefaultexecutor
threadpoolexecutor rc   new threadpoolexecutor 0  integer max_value  10  timeunit seconds  new synchronousqueue<runnable>    new threadfactory
public thread newthread runnable runnable
thread thread   new thread runnable  name
thread setdaemon daemon
thread setpriority priority
return thread
// rc.allowcorethreadtimeout(true);
return rc