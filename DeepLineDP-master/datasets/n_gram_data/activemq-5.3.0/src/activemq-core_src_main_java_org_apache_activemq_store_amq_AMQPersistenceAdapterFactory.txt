/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq store amq
import java io file
import org apache activemq kaha impl async asyncdatamanager
import org apache activemq kaha impl index hash hashindex
import org apache activemq store persistenceadapter
import org apache activemq store persistenceadapterfactory
import org apache activemq store referencestoreadapter
import org apache activemq thread taskrunnerfactory
import org apache activemq util iohelper
/**
* an implementation of {@link persistenceadapterfactory}
*
* @org.apache.xbean.xbean element="amqpersistenceadapterfactory"
*
* @version $revision: 1.17 $
*/
public class amqpersistenceadapterfactory implements persistenceadapterfactory
static final int default_max_refernce_file_length 2 1024 1024
private taskrunnerfactory taskrunnerfactory
private file datadirectory
private int journalthreadpriority   thread max_priority
private string brokername
private referencestoreadapter referencestoreadapter
private boolean synconwrite
private boolean syncontransaction true
private boolean persistentindex true
private boolean usenio   true
private int maxfilelength   asyncdatamanager default_max_file_length
private long cleanupinterval   asyncdatamanager default_cleanup_interval
private int indexbinsize   hashindex default_bin_size
private int indexkeysize   hashindex default_key_size
private int indexpagesize   hashindex default_page_size
private int indexmaxbinsize   hashindex maximum_capacity
private int indexloadfactor   hashindex default_load_factor
private int maxreferencefilelength default_max_refernce_file_length
private boolean recoverreferencestore true
private boolean forcerecoverreferencestore false
private long checkpointinterval   1000   20
/**
* @return a amqpersistenceadapter
* @see org.apache.activemq.store.persistenceadapterfactory#createpersistenceadapter()
*/
public persistenceadapter createpersistenceadapter
amqpersistenceadapter result   new amqpersistenceadapter
result setdirectory getdatadirectory
result settaskrunnerfactory gettaskrunnerfactory
result setbrokername getbrokername
result setsynconwrite issynconwrite
result setpersistentindex ispersistentindex
result setreferencestoreadapter getreferencestoreadapter
result setusenio isusenio
result setmaxfilelength getmaxfilelength
result setcleanupinterval getcleanupinterval
result setcheckpointinterval getcheckpointinterval
result setindexbinsize getindexbinsize
result setindexkeysize getindexkeysize
result setindexpagesize getindexpagesize
result setindexmaxbinsize getindexmaxbinsize
result setindexloadfactor getindexloadfactor
result setmaxreferencefilelength getmaxreferencefilelength
result setforcerecoverreferencestore isforcerecoverreferencestore
result setrecoverreferencestore isrecoverreferencestore
return result
public long getcleanupinterval
return cleanupinterval
public void setcleanupinterval long val
cleanupinterval   val
/**
* @return the datadirectory
*/
public file getdatadirectory
if  this datadirectory    null
this datadirectory   new file iohelper getdefaultdatadirectory    iohelper tofilesystemsafename brokername
return this datadirectory
/**
* @param datadirectory the datadirectory to set
*/
public void setdatadirectory file datadirectory
this datadirectory   datadirectory
/**
* @return the taskrunnerfactory
*/
public taskrunnerfactory gettaskrunnerfactory
if  taskrunnerfactory    null
taskrunnerfactory   new taskrunnerfactory    journalthreadpriority
true  1000
return taskrunnerfactory
/**
* @param taskrunnerfactory the taskrunnerfactory to set
*/
public void settaskrunnerfactory taskrunnerfactory taskrunnerfactory
this taskrunnerfactory   taskrunnerfactory
/**
* @return the journalthreadpriority
*/
public int getjournalthreadpriority
return this journalthreadpriority
/**
* @param journalthreadpriority the journalthreadpriority to set
*/
public void setjournalthreadpriority int journalthreadpriority
this journalthreadpriority   journalthreadpriority
/**
* @return the brokername
*/
public string getbrokername
return this brokername
/**
* @param brokername the brokername to set
*/
public void setbrokername string brokername
this brokername   brokername
/**
* @return the referencestoreadapter
*/
public referencestoreadapter getreferencestoreadapter
return this referencestoreadapter
/**
* @param referencestoreadapter the referencestoreadapter to set
*/
public void setreferencestoreadapter referencestoreadapter referencestoreadapter
this referencestoreadapter   referencestoreadapter
public boolean ispersistentindex
return persistentindex
public void setpersistentindex boolean persistentindex
this persistentindex   persistentindex
public boolean issynconwrite
return synconwrite
public void setsynconwrite boolean synconwrite
this synconwrite   synconwrite
public boolean issyncontransaction
return syncontransaction
public void setsyncontransaction boolean syncontransaction
this syncontransaction   syncontransaction
public boolean isusenio
return usenio
public void setusenio boolean usenio
this usenio   usenio
public int getmaxfilelength
return maxfilelength
public void setmaxfilelength int maxfilelength
this maxfilelength   maxfilelength
/**
* @return the indexbinsize
*/
public int getindexbinsize
return indexbinsize
/**
* @param indexbinsize the indexbinsize to set
*/
public void setindexbinsize int indexbinsize
this indexbinsize   indexbinsize
/**
* @return the indexkeysize
*/
public int getindexkeysize
return indexkeysize
/**
* @param indexkeysize the indexkeysize to set
*/
public void setindexkeysize int indexkeysize
this indexkeysize   indexkeysize
/**
* @return the indexpagesize
*/
public int getindexpagesize
return indexpagesize
/**
* @param indexpagesize the indexpagesize to set
*/
public void setindexpagesize int indexpagesize
this indexpagesize   indexpagesize
/**
* @return the indexmaxbinsize
*/
public int getindexmaxbinsize
return indexmaxbinsize
/**
* @param indexmaxbinsize the indexmaxbinsize to set
*/
public void setindexmaxbinsize int indexmaxbinsize
this indexmaxbinsize   indexmaxbinsize
/**
* @return the indexloadfactor
*/
public int getindexloadfactor
return indexloadfactor
/**
* @param indexloadfactor the indexloadfactor to set
*/
public void setindexloadfactor int indexloadfactor
this indexloadfactor   indexloadfactor
/**
* @return the maxreferencefilelength
*/
public int getmaxreferencefilelength
return maxreferencefilelength
/**
* @param maxreferencefilelength the maxreferencefilelength to set
*/
public void setmaxreferencefilelength int maxreferencefilelength
this maxreferencefilelength   maxreferencefilelength
/**
* @return the recoverreferencestore
*/
public boolean isrecoverreferencestore
return recoverreferencestore
/**
* @param recoverreferencestore the recoverreferencestore to set
*/
public void setrecoverreferencestore boolean recoverreferencestore
this recoverreferencestore   recoverreferencestore
/**
* @return the forcerecoverreferencestore
*/
public boolean isforcerecoverreferencestore
return forcerecoverreferencestore
/**
* @param forcerecoverreferencestore the forcerecoverreferencestore to set
*/
public void setforcerecoverreferencestore boolean forcerecoverreferencestore
this forcerecoverreferencestore   forcerecoverreferencestore
/**
* @return the checkpointinterval
*/
public long getcheckpointinterval
return checkpointinterval
/**
* @param checkpointinterval the checkpointinterval to set
*/
public void setcheckpointinterval long checkpointinterval
this checkpointinterval   checkpointinterval