/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq broker region policy
import org apache activemq activemqprefetchpolicy
import org apache activemq broker broker
import org apache activemq broker region basedestination
import org apache activemq broker region destination
import org apache activemq broker region durabletopicsubscription
import org apache activemq broker region queue
import org apache activemq broker region queuebrowsersubscription
import org apache activemq broker region queuesubscription
import org apache activemq broker region topic
import org apache activemq broker region topicsubscription
import org apache activemq broker region cursors pendingmessagecursor
import org apache activemq broker region group messagegrouphashbucketfactory
import org apache activemq broker region group messagegroupmapfactory
import org apache activemq filter destinationmapentry
import org apache activemq usage systemusage
import org apache commons logging log
import org apache commons logging logfactory
/**
* represents an entry in a {@link policymap} for assigning policies to a
* specific destination or a hierarchical wildcard area of destinations.
*
* @org.apache.xbean.xbean
* @version $revision: 1.1 $
*/
public class policyentry extends destinationmapentry
private static final log log   logfactory getlog policyentry class
private dispatchpolicy dispatchpolicy
private subscriptionrecoverypolicy subscriptionrecoverypolicy
private boolean sendadvisoryifnoconsumers
private deadletterstrategy deadletterstrategy   destination default_dead_letter_strategy
private pendingmessagelimitstrategy pendingmessagelimitstrategy
private messageevictionstrategy messageevictionstrategy
private long memorylimit
private messagegroupmapfactory messagegroupmapfactory
private pendingqueuemessagestoragepolicy pendingqueuepolicy
private pendingdurablesubscribermessagestoragepolicy pendingdurablesubscriberpolicy
private pendingsubscribermessagestoragepolicy pendingsubscriberpolicy
private int maxproducerstoaudit 32
private int maxauditdepth 2048
private int maxqueueauditdepth 2048
private boolean enableaudit true
private boolean producerflowcontrol   true
private boolean optimizeddispatch false
private int maxpagesize basedestination max_page_size
private int maxbrowsepagesize basedestination max_browse_page_size
private boolean usecache true
private long minimummessagesize 1024
private boolean useconsumerpriority true
private boolean strictorderdispatch false
private boolean lazydispatch false
private int timebeforedispatchstarts   0
private int consumersbeforedispatchstarts   0
private boolean advisoryforslowconsumers
private boolean advisdoryforfastproducers
private boolean advisoryfordiscardingmessages
private boolean advisorywhenfull
private boolean advisoryfordelivery
private boolean advisoryforconsumed
private long expiremessagesperiod   basedestination expire_message_period
private int maxexpirepagesize   basedestination max_browse_page_size
private int queueprefetch activemqprefetchpolicy default_queue_prefetch
private int queuebrowserprefetch activemqprefetchpolicy default_queue_browser_prefetch
private int topicprefetch activemqprefetchpolicy default_topic_prefetch
private int durabletopicprefetch activemqprefetchpolicy default_durable_topic_prefetch
private int cursormemoryhighwatermark 70
public void configure broker broker queue queue
baseconfiguration queue
if  dispatchpolicy    null
queue setdispatchpolicy dispatchpolicy
queue setdeadletterstrategy getdeadletterstrategy
queue setmessagegroupmapfactory getmessagegroupmapfactory
if  memorylimit > 0
queue getmemoryusage   setlimit memorylimit
if  pendingqueuepolicy    null
pendingmessagecursor messages   pendingqueuepolicy getqueuependingmessagecursor broker queue
queue setmessages messages
queue setuseconsumerpriority isuseconsumerpriority
queue setstrictorderdispatch isstrictorderdispatch
queue setoptimizeddispatch isoptimizeddispatch
queue setlazydispatch islazydispatch
queue settimebeforedispatchstarts gettimebeforedispatchstarts
queue setconsumersbeforedispatchstarts getconsumersbeforedispatchstarts
public void configure topic topic
baseconfiguration topic
if  dispatchpolicy    null
topic setdispatchpolicy dispatchpolicy
topic setdeadletterstrategy getdeadletterstrategy
if  subscriptionrecoverypolicy    null
topic setsubscriptionrecoverypolicy subscriptionrecoverypolicy copy
if  memorylimit > 0
topic getmemoryusage   setlimit memorylimit
topic setlazydispatch islazydispatch
public void baseconfiguration basedestination destination
destination setproducerflowcontrol isproducerflowcontrol
destination setenableaudit isenableaudit
destination setmaxauditdepth getmaxqueueauditdepth
destination setmaxproducerstoaudit getmaxproducerstoaudit
destination setmaxpagesize getmaxpagesize
destination setmaxbrowsepagesize getmaxbrowsepagesize
destination setusecache isusecache
destination setminimummessagesize  int  getminimummessagesize
destination setadvisoryforconsumed isadvisoryforconsumed
destination setadvisoryfordelivery isadvisoryfordelivery
destination setadvisoryfordiscardingmessages isadvisoryfordiscardingmessages
destination setadvisoryforslowconsumers isadvisoryforslowconsumers
destination setadvisdoryforfastproducers isadvisdoryforfastproducers
destination setadvisorywhenfull isadvisorywhenfull
destination setsendadvisoryifnoconsumers sendadvisoryifnoconsumers
destination setexpiremessagesperiod getexpiremessagesperiod
destination setmaxexpirepagesize getmaxexpirepagesize
destination setcursormemoryhighwatermark getcursormemoryhighwatermark
public void configure broker broker  systemusage memorymanager  topicsubscription subscription
if  pendingmessagelimitstrategy    null
int value   pendingmessagelimitstrategy getmaximumpendingmessagelimit subscription
int consumerlimit   subscription getinfo   getmaximumpendingmessagelimit
if  consumerlimit > 0
if  value < 0    consumerlimit < value
value   consumerlimit
if  value >  0
if  log isdebugenabled
log debug     value       subscription getinfo   getconsumerid
subscription setmaximumpendingmessages value
if  messageevictionstrategy    null
subscription setmessageevictionstrategy messageevictionstrategy
if  pendingsubscriberpolicy    null
string name   subscription getcontext   getclientid         subscription getconsumerinfo   getconsumerid
//override prefetch size if not set by the consumer
int prefetch subscription getconsumerinfo   getprefetchsize
if  prefetch    activemqprefetchpolicy default_topic_prefetch
subscription getconsumerinfo   setprefetchsize gettopicprefetch
int maxbatchsize   subscription getconsumerinfo   getprefetchsize
subscription setmatched pendingsubscriberpolicy getsubscriberpendingmessagecursor broker name  maxbatchsize
public void configure broker broker  systemusage memorymanager  durabletopicsubscription sub
string clientid   sub getsubscriptionkey   getclientid
string subname   sub getsubscriptionkey   getsubscriptionname
int prefetch   sub getprefetchsize
sub setcursormemoryhighwatermark getcursormemoryhighwatermark
//override prefetch size if not set by the consumer
if  prefetch    activemqprefetchpolicy default_durable_topic_prefetch
sub setprefetchsize getdurabletopicprefetch
if  pendingdurablesubscriberpolicy    null
pendingmessagecursor cursor   pendingdurablesubscriberpolicy getsubscriberpendingmessagecursor broker clientid  subname prefetch sub
cursor setsystemusage memorymanager
sub setpending cursor
sub setmaxauditdepth getmaxauditdepth
sub setmaxproducerstoaudit getmaxproducerstoaudit
public void configure broker broker  systemusage memorymanager  queuebrowsersubscription sub
int prefetch   sub getprefetchsize
//override prefetch size if not set by the consumer
if  prefetch    activemqprefetchpolicy default_queue_browser_prefetch
sub setprefetchsize getqueuebrowserprefetch
sub setcursormemoryhighwatermark getcursormemoryhighwatermark
public void configure broker broker  systemusage memorymanager  queuesubscription sub
int prefetch   sub getprefetchsize
//override prefetch size if not set by the consumer
if  prefetch    activemqprefetchpolicy default_queue_prefetch
sub setprefetchsize getqueueprefetch
sub setcursormemoryhighwatermark getcursormemoryhighwatermark
// properties
// -------------------------------------------------------------------------
public dispatchpolicy getdispatchpolicy
return dispatchpolicy
public void setdispatchpolicy dispatchpolicy policy
this dispatchpolicy   policy
public subscriptionrecoverypolicy getsubscriptionrecoverypolicy
return subscriptionrecoverypolicy
public void setsubscriptionrecoverypolicy subscriptionrecoverypolicy subscriptionrecoverypolicy
this subscriptionrecoverypolicy   subscriptionrecoverypolicy
public boolean issendadvisoryifnoconsumers
return sendadvisoryifnoconsumers
/**
* sends an advisory message if a non-persistent message is sent and there
* are no active consumers
*/
public void setsendadvisoryifnoconsumers boolean sendadvisoryifnoconsumers
this sendadvisoryifnoconsumers   sendadvisoryifnoconsumers
public deadletterstrategy getdeadletterstrategy
return deadletterstrategy
/**
* sets the policy used to determine which dead letter queue destination
* should be used
*/
public void setdeadletterstrategy deadletterstrategy deadletterstrategy
this deadletterstrategy   deadletterstrategy
public pendingmessagelimitstrategy getpendingmessagelimitstrategy
return pendingmessagelimitstrategy
/**
* sets the strategy to calculate the maximum number of messages that are
* allowed to be pending on consumers (in addition to their prefetch sizes).
* once the limit is reached, non-durable topics can then start discarding
* old messages. this allows us to keep dispatching messages to slow
* consumers while not blocking fast consumers and discarding the messages
* oldest first.
*/
public void setpendingmessagelimitstrategy pendingmessagelimitstrategy pendingmessagelimitstrategy
this pendingmessagelimitstrategy   pendingmessagelimitstrategy
public messageevictionstrategy getmessageevictionstrategy
return messageevictionstrategy
/**
* sets the eviction strategy used to decide which message to evict when the
* slow consumer needs to discard messages
*/
public void setmessageevictionstrategy messageevictionstrategy messageevictionstrategy
this messageevictionstrategy   messageevictionstrategy
public long getmemorylimit
return memorylimit
/**
* when set using xbean, values of the form "20 mb", "1024kb", and "1g" can be used
* @org.apache.xbean.property propertyeditor="org.apache.activemq.util.memorypropertyeditor"
*/
public void setmemorylimit long memorylimit
this memorylimit   memorylimit
public messagegroupmapfactory getmessagegroupmapfactory
if  messagegroupmapfactory    null
messagegroupmapfactory   new messagegrouphashbucketfactory
return messagegroupmapfactory
/**
* sets the factory used to create new instances of {messagegroupmap} used
* to implement the <a
* href="http://activemq.apache.org/message-groups.html">message groups</a>
* functionality.
*/
public void setmessagegroupmapfactory messagegroupmapfactory messagegroupmapfactory
this messagegroupmapfactory   messagegroupmapfactory
/**
* @return the pendingdurablesubscriberpolicy
*/
public pendingdurablesubscribermessagestoragepolicy getpendingdurablesubscriberpolicy
return this pendingdurablesubscriberpolicy
/**
* @param pendingdurablesubscriberpolicy the pendingdurablesubscriberpolicy
*                to set
*/
public void setpendingdurablesubscriberpolicy pendingdurablesubscribermessagestoragepolicy pendingdurablesubscriberpolicy
this pendingdurablesubscriberpolicy   pendingdurablesubscriberpolicy
/**
* @return the pendingqueuepolicy
*/
public pendingqueuemessagestoragepolicy getpendingqueuepolicy
return this pendingqueuepolicy
/**
* @param pendingqueuepolicy the pendingqueuepolicy to set
*/
public void setpendingqueuepolicy pendingqueuemessagestoragepolicy pendingqueuepolicy
this pendingqueuepolicy   pendingqueuepolicy
/**
* @return the pendingsubscriberpolicy
*/
public pendingsubscribermessagestoragepolicy getpendingsubscriberpolicy
return this pendingsubscriberpolicy
/**
* @param pendingsubscriberpolicy the pendingsubscriberpolicy to set
*/
public void setpendingsubscriberpolicy pendingsubscribermessagestoragepolicy pendingsubscriberpolicy
this pendingsubscriberpolicy   pendingsubscriberpolicy
/**
* @return true if producer flow control enabled
*/
public boolean isproducerflowcontrol
return producerflowcontrol
/**
* @param producerflowcontrol
*/
public void setproducerflowcontrol boolean producerflowcontrol
this producerflowcontrol   producerflowcontrol
/**
* @return the maxproducerstoaudit
*/
public int getmaxproducerstoaudit
return maxproducerstoaudit
/**
* @param maxproducerstoaudit the maxproducerstoaudit to set
*/
public void setmaxproducerstoaudit int maxproducerstoaudit
this maxproducerstoaudit   maxproducerstoaudit
/**
* @return the maxauditdepth
*/
public int getmaxauditdepth
return maxauditdepth
/**
* @param maxauditdepth the maxauditdepth to set
*/
public void setmaxauditdepth int maxauditdepth
this maxauditdepth   maxauditdepth
/**
* @return the enableaudit
*/
public boolean isenableaudit
return enableaudit
/**
* @param enableaudit the enableaudit to set
*/
public void setenableaudit boolean enableaudit
this enableaudit   enableaudit
public int getmaxqueueauditdepth
return maxqueueauditdepth
public void setmaxqueueauditdepth int maxqueueauditdepth
this maxqueueauditdepth   maxqueueauditdepth
public boolean isoptimizeddispatch
return optimizeddispatch
public void setoptimizeddispatch boolean optimizeddispatch
this optimizeddispatch   optimizeddispatch
public int getmaxpagesize
return maxpagesize
public void setmaxpagesize int maxpagesize
this maxpagesize   maxpagesize
public int getmaxbrowsepagesize
return maxbrowsepagesize
public void setmaxbrowsepagesize int maxpagesize
this maxbrowsepagesize   maxpagesize
public boolean isusecache
return usecache
public void setusecache boolean usecache
this usecache   usecache
public long getminimummessagesize
return minimummessagesize
public void setminimummessagesize long minimummessagesize
this minimummessagesize   minimummessagesize
public boolean isuseconsumerpriority
return useconsumerpriority
public void setuseconsumerpriority boolean useconsumerpriority
this useconsumerpriority   useconsumerpriority
public boolean isstrictorderdispatch
return strictorderdispatch
public void setstrictorderdispatch boolean strictorderdispatch
this strictorderdispatch   strictorderdispatch
public boolean islazydispatch
return lazydispatch
public void setlazydispatch boolean lazydispatch
this lazydispatch   lazydispatch
public int gettimebeforedispatchstarts
return timebeforedispatchstarts
public void settimebeforedispatchstarts int timebeforedispatchstarts
this timebeforedispatchstarts   timebeforedispatchstarts
public int getconsumersbeforedispatchstarts
return consumersbeforedispatchstarts
public void setconsumersbeforedispatchstarts int consumersbeforedispatchstarts
this consumersbeforedispatchstarts   consumersbeforedispatchstarts
/**
* @return the advisoryforslowconsumers
*/
public boolean isadvisoryforslowconsumers
return advisoryforslowconsumers
/**
* @param advisoryforslowconsumers the advisoryforslowconsumers to set
*/
public void setadvisoryforslowconsumers boolean advisoryforslowconsumers
this advisoryforslowconsumers   advisoryforslowconsumers
/**
* @return the advisoryfordiscardingmessages
*/
public boolean isadvisoryfordiscardingmessages
return advisoryfordiscardingmessages
/**
* @param advisoryfordiscardingmessages the advisoryfordiscardingmessages to set
*/
public void setadvisoryfordiscardingmessages
boolean advisoryfordiscardingmessages
this advisoryfordiscardingmessages   advisoryfordiscardingmessages
/**
* @return the advisorywhenfull
*/
public boolean isadvisorywhenfull
return advisorywhenfull
/**
* @param advisorywhenfull the advisorywhenfull to set
*/
public void setadvisorywhenfull boolean advisorywhenfull
this advisorywhenfull   advisorywhenfull
/**
* @return the advisoryfordelivery
*/
public boolean isadvisoryfordelivery
return advisoryfordelivery
/**
* @param advisoryfordelivery the advisoryfordelivery to set
*/
public void setadvisoryfordelivery boolean advisoryfordelivery
this advisoryfordelivery   advisoryfordelivery
/**
* @return the advisoryforconsumed
*/
public boolean isadvisoryforconsumed
return advisoryforconsumed
/**
* @param advisoryforconsumed the advisoryforconsumed to set
*/
public void setadvisoryforconsumed boolean advisoryforconsumed
this advisoryforconsumed   advisoryforconsumed
/**
* @return the advisdoryforfastproducers
*/
public boolean isadvisdoryforfastproducers
return advisdoryforfastproducers
/**
* @param advisdoryforfastproducers the advisdoryforfastproducers to set
*/
public void setadvisdoryforfastproducers boolean advisdoryforfastproducers
this advisdoryforfastproducers   advisdoryforfastproducers
public void setmaxexpirepagesize int maxexpirepagesize
this maxexpirepagesize   maxexpirepagesize
public int getmaxexpirepagesize
return maxexpirepagesize
public void setexpiremessagesperiod long expiremessagesperiod
this expiremessagesperiod   expiremessagesperiod
public long getexpiremessagesperiod
return expiremessagesperiod
/**
* get the queueprefetch
* @return the queueprefetch
*/
public int getqueueprefetch
return this queueprefetch
/**
* set the queueprefetch
* @param queueprefetch the queueprefetch to set
*/
public void setqueueprefetch int queueprefetch
this queueprefetch   queueprefetch
/**
* get the queuebrowserprefetch
* @return the queuebrowserprefetch
*/
public int getqueuebrowserprefetch
return this queuebrowserprefetch
/**
* set the queuebrowserprefetch
* @param queuebrowserprefetch the queuebrowserprefetch to set
*/
public void setqueuebrowserprefetch int queuebrowserprefetch
this queuebrowserprefetch   queuebrowserprefetch
/**
* get the topicprefetch
* @return the topicprefetch
*/
public int gettopicprefetch
return this topicprefetch
/**
* set the topicprefetch
* @param topicprefetch the topicprefetch to set
*/
public void settopicprefetch int topicprefetch
this topicprefetch   topicprefetch
/**
* get the durabletopicprefetch
* @return the durabletopicprefetch
*/
public int getdurabletopicprefetch
return this durabletopicprefetch
/**
* set the durabletopicprefetch
* @param durabletopicprefetch the durabletopicprefetch to set
*/
public void setdurabletopicprefetch int durabletopicprefetch
this durabletopicprefetch   durabletopicprefetch
public int getcursormemoryhighwatermark
return this cursormemoryhighwatermark
public void setcursormemoryhighwatermark int cursormemoryhighwatermark
this cursormemoryhighwatermark   cursormemoryhighwatermark