/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq broker region cursors
import java util arraylist
import java util iterator
import java util linkedlist
import java util list
import org apache activemq broker connectioncontext
import org apache activemq broker region destination
import org apache activemq broker region messagereference
import org apache activemq broker region queuemessagereference
/**
* hold pending messages in a linked list (messages awaiting disptach to a
* consumer) cursor
*
* @version $revision$
*/
public class vmpendingmessagecursor extends abstractpendingmessagecursor
private linkedlist<messagereference> list   new linkedlist<messagereference>
private iterator<messagereference> iter
private messagereference last
public vmpendingmessagecursor
this usecache false
@override
public synchronized list<messagereference> remove connectioncontext context  destination destination  throws exception
list<messagereference> rc   new arraylist<messagereference>
for  iterator<messagereference> iterator   list iterator    iterator hasnext
messagereference r   iterator next
if  r getregiondestination    destination
r decrementreferencecount
rc add r
iterator remove
return rc
/**
* @return true if there are no pending messages
*/
public synchronized boolean isempty
if  list isempty
return true
else
for  iterator<messagereference> iterator   list iterator    iterator hasnext
messagereference node   iterator next
if  node   queuemessagereference null_message
continue
if   node isdropped
return false
// we can remove dropped references.
iterator remove
return true
/**
* reset the cursor
*/
public synchronized void reset
iter   list listiterator
last   null
/**
* add message to await dispatch
*
* @param node
*/
public synchronized void addmessagelast messagereference node
node incrementreferencecount
list addlast node
/**
* add message to await dispatch
*
* @param position
* @param node
*/
public synchronized void addmessagefirst messagereference node
node incrementreferencecount
list addfirst node
/**
* @return true if there pending messages to dispatch
*/
public synchronized boolean hasnext
return iter hasnext
/**
* @return the next pending message
*/
public synchronized messagereference next
last    messagereference iter next
return last
/**
* remove the message at the cursor position
*/
public synchronized void remove
if  last    null
last decrementreferencecount
iter remove
/**
* @return the number of pending messages
*/
public synchronized int size
return list size
/**
* clear all pending messages
*/
public synchronized void clear
list clear
public synchronized void remove messagereference node
for  iterator<messagereference> i   list iterator    i hasnext
messagereference ref   i next
if  node getmessageid   equals ref getmessageid
ref decrementreferencecount
i remove
break
/**
* page in a restricted number of messages
*
* @param maxitems
* @return a list of paged in messages
*/
public linkedlist<messagereference> pageinlist int maxitems
return list
public boolean istransient
return true