/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq broker region cursors
import java util iterator
import java util linkedhashmap
import java util map entry
import org apache activemq broker region destination
import org apache activemq broker region messagereference
import org apache activemq command message
import org apache activemq command messageid
import org apache activemq store messagerecoverylistener
import org apache commons logging log
import org apache commons logging logfactory
/**
*  store based cursor
*
*/
public abstract class abstractstorecursor extends abstractpendingmessagecursor implements messagerecoverylistener
private static final log log   logfactory getlog abstractstorecursor class
protected final destination regiondestination
private final linkedhashmap<messageid message> batchlist   new linkedhashmap<messageid message>
private iterator<entry<messageid  message>> iterator   null
private boolean cacheenabled false
protected boolean batchresetneeded   true
protected boolean storehasmessages   false
protected int size
private messageid lastcachedid
protected abstractstorecursor destination destination
this regiondestination destination
public final synchronized void start   throws exception
if   isstarted
super start
clear
resetbatch
this size   getstoresize
this storehasmessages this size > 0
if   this storehasmessages  usecache
cacheenabled true
public final synchronized void stop   throws exception
resetbatch
super stop
gc
public final boolean recovermessage message message  throws exception
return recovermessage message false
public synchronized boolean recovermessage message message  boolean cached  throws exception
boolean recovered   false
if  recorduniqueid message getmessageid
if   cached
message setregiondestination regiondestination
if  message getmemoryusage    null
message setmemoryusage this getsystemusage   getmemoryusage
message incrementreferencecount
batchlist put message getmessageid    message
cleariterator true
recovered   true
else
if  log isdebugenabled
log debug regiondestination getactivemqdestination   getphysicalname         message
storehasmessages   true
return recovered
public final void reset
if  batchlist isempty
try
fillbatch
catch  exception e
log error    e
throw new runtimeexception e
cleariterator true
size
public synchronized void release
cleariterator false
private synchronized void cleariterator boolean ensureiterator
boolean haveiterator   this iterator    null
this iterator null
if haveiterator  ensureiterator
ensureiterator
private synchronized void ensureiterator
if this iterator  null
this iterator this batchlist entryset   iterator
public final void finished
public final synchronized boolean hasnext
if  batchlist isempty
try
fillbatch
catch  exception e
log error    e
throw new runtimeexception e
ensureiterator
return this iterator hasnext
public final synchronized messagereference next
message result   null
if   this batchlist isempty    this iterator hasnext
result   this iterator next   getvalue
result decrementreferencecount
return result
public final synchronized void addmessagelast messagereference node  throws exception
if  cacheenabled    hasspace
recovermessage node getmessage   true
lastcachedid   node getmessageid
else
if  cacheenabled
cacheenabled false
if  log isdebugenabled
log debug regiondestination getactivemqdestination   getphysicalname         size
// sync with store on disabling the cache
if  lastcachedid    null
setbatch lastcachedid
size
protected void setbatch messageid messageid  throws exception
public final synchronized void addmessagefirst messagereference node  throws exception
cacheenabled false
size
public final synchronized void remove
size
if  iterator  null
iterator remove
if  size  0    isstarted      usecache    hasspace      getstoresize      0
if  log isdebugenabled
log debug regiondestination getactivemqdestination   getphysicalname
cacheenabled true
public final synchronized void remove messagereference node
size
cacheenabled false
batchlist remove node getmessageid
public final synchronized void clear
gc
public final synchronized void gc
for  message msg   batchlist values
rollback msg getmessageid
msg decrementreferencecount
batchlist clear
cleariterator false
batchresetneeded   true
this cacheenabled false
if  isstarted
size   getstoresize
else
size   0
protected final synchronized void fillbatch
if  batchresetneeded
resetbatch
this batchresetneeded   false
if  this batchlist isempty       this storehasmessages   this size >0
this storehasmessages   false
try
dofillbatch
catch  exception e
log error    e
throw new runtimeexception e
if   this batchlist isempty
this storehasmessages true
public final synchronized boolean isempty
// negative means more messages added to store through queue.send since last reset
return size    0
public final synchronized boolean hasmessagesbufferedtodeliver
return  batchlist isempty
public final synchronized int size
if  size < 0
this size   getstoresize
return size
protected abstract void dofillbatch   throws exception
protected abstract void resetbatch
protected abstract int getstoresize