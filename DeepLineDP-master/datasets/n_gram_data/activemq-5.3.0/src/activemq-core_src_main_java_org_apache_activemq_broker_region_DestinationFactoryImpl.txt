/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq broker region
import java io ioexception
import java util set
import org apache activemq advisory advisorysupport
import org apache activemq broker brokerservice
import org apache activemq broker connectioncontext
import org apache activemq broker region policy policyentry
import org apache activemq command activemqdestination
import org apache activemq command activemqqueue
import org apache activemq command activemqtempdestination
import org apache activemq command activemqtopic
import org apache activemq command subscriptioninfo
import org apache activemq store messagestore
import org apache activemq store persistenceadapter
import org apache activemq store topicmessagestore
import org apache activemq thread taskrunnerfactory
/**
* creates standard activemq implementations of
* {@link org.apache.activemq.broker.region.destination}.
*
* @author fateev@amazon.com
* @version $revision$
*/
public class destinationfactoryimpl extends destinationfactory
protected final taskrunnerfactory taskrunnerfactory
protected final persistenceadapter persistenceadapter
protected regionbroker broker
private final brokerservice brokerservice
public destinationfactoryimpl brokerservice brokerservice  taskrunnerfactory taskrunnerfactory  persistenceadapter persistenceadapter
this brokerservice   brokerservice
this taskrunnerfactory   taskrunnerfactory
if  persistenceadapter    null
throw new illegalargumentexception
this persistenceadapter   persistenceadapter
public void setregionbroker regionbroker broker
if  broker    null
throw new illegalargumentexception
this broker   broker
public set<activemqdestination> getdestinations
return persistenceadapter getdestinations
/**
* @return instance of {@link queue} or {@link topic}
*/
public destination createdestination connectioncontext context  activemqdestination destination  destinationstatistics destinationstatistics  throws exception
if  destination isqueue
if  destination istemporary
final activemqtempdestination tempdest    activemqtempdestination destination
queue queue   new tempqueue brokerservice  destination  null  destinationstatistics  taskrunnerfactory
queue initialize
return queue
else
messagestore store   persistenceadapter createqueuemessagestore  activemqqueue destination
queue queue   new queue brokerservice  destination  store  destinationstatistics  taskrunnerfactory
configurequeue queue  destination
queue initialize
return queue
else if  destination istemporary
topic topic   new topic brokerservice  destination  null  destinationstatistics  taskrunnerfactory
topic initialize
return topic
else
topicmessagestore store   null
if   advisorysupport isadvisorytopic destination
store   persistenceadapter createtopicmessagestore  activemqtopic destination
topic topic   new topic brokerservice  destination  store  destinationstatistics  taskrunnerfactory
configuretopic topic  destination
topic initialize
return topic
public void removedestination destination dest
activemqdestination destination   dest getactivemqdestination
if   destination istemporary
if  destination isqueue
persistenceadapter removequeuemessagestore  activemqqueue  destination
else if   advisorysupport isadvisorytopic destination
persistenceadapter removetopicmessagestore  activemqtopic  destination
protected void configurequeue queue queue  activemqdestination destination
if  broker    null
throw new illegalstateexception
if  broker getdestinationpolicy      null
policyentry entry   broker getdestinationpolicy   getentryfor destination
if  entry    null
entry configure broker queue
protected void configuretopic topic topic  activemqdestination destination
if  broker    null
throw new illegalstateexception
if  broker getdestinationpolicy      null
policyentry entry   broker getdestinationpolicy   getentryfor destination
if  entry    null
entry configure topic
public long getlastmessagebrokersequenceid   throws ioexception
return persistenceadapter getlastmessagebrokersequenceid
public persistenceadapter getpersistenceadapter
return persistenceadapter
public subscriptioninfo getalldurablesubscriptions activemqtopic topic  throws ioexception
return persistenceadapter createtopicmessagestore topic  getallsubscriptions