/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq util
import java beans propertyeditor
import java beans propertyeditormanager
import java lang reflect array
import java lang reflect field
import java lang reflect method
import java lang reflect modifier
import java util arrays
import java util hashmap
import java util iterator
import java util linkedhashmap
import java util map
import java util set
import java util map entry
import org apache activemq command activemqdestination
public final class introspectionsupport
static
// add spring and activemq specific property editors
string additionalpath   new string
synchronized  propertyeditormanager class
string existingsearchpath   propertyeditormanager geteditorsearchpath
string newsearchpath    string  array newinstance string class
existingsearchpath length   additionalpath length
system arraycopy existingsearchpath  0
newsearchpath  0
existingsearchpath length
system arraycopy additionalpath  0
newsearchpath  existingsearchpath length
additionalpath length
propertyeditormanager seteditorsearchpath newsearchpath
private introspectionsupport
public static boolean getproperties object target  map props  string optionprefix
boolean rc   false
if  target    null
throw new illegalargumentexception
if  props    null
throw new illegalargumentexception
if  optionprefix    null
optionprefix
class clazz   target getclass
method methods   clazz getmethods
for  int i   0  i < methods length  i
method method   methods
string name   method getname
class type   method getreturntype
class params   method getparametertypes
if   name startswith       name startswith        params length    0    type    null    issettabletype type
try
object value   method invoke target  new object
if  value    null
continue
string strvalue   converttostring value  type
if  strvalue    null
continue
if  name startswith
name   name substring 3  4  tolowercase
name substring 4
else
name   name substring 2  3  tolowercase
name substring 3
props put optionprefix   name  strvalue
rc   true
catch  throwable ignore
return rc
public static boolean setproperties object target  map<string  ?> props  string optionprefix
boolean rc   false
if  target    null
throw new illegalargumentexception
if  props    null
throw new illegalargumentexception
for  iterator<string> iter   props keyset   iterator    iter hasnext
string name   iter next
if  name startswith optionprefix
object value   props get name
name   name substring optionprefix length
if  setproperty target  name  value
iter remove
rc   true
return rc
public static map<string  object> extractproperties map props  string optionprefix
if  props    null
throw new illegalargumentexception
hashmap<string  object> rc   new hashmap<string  object> props size
for  iterator iter   props keyset   iterator    iter hasnext
string name    string iter next
if  name startswith optionprefix
object value   props get name
name   name substring optionprefix length
rc put name  value
iter remove
return rc
public static boolean setproperties object target  map props
boolean rc   false
if  target    null
throw new illegalargumentexception
if  props    null
throw new illegalargumentexception
for  iterator iter   props entryset   iterator    iter hasnext
map entry entry    entry iter next
if  setproperty target   string entry getkey    entry getvalue
iter remove
rc   true
return rc
public static boolean setproperty object target  string name  object value
try
class clazz   target getclass
method setter   findsettermethod clazz  name
if  setter    null
return false
// if the type is null or it matches the needed type, just use the
// value directly
if  value    null    value getclass      setter getparametertypes
setter invoke target  new object  value
else
// we need to convert it
setter invoke target  new object  convert value  setter getparametertypes
return true
catch  throwable ignore
return false
private static object convert object value  class type
propertyeditor editor   propertyeditormanager findeditor type
if  editor    null
editor setastext value tostring
return editor getvalue
return null
public static string converttostring object value  class type
propertyeditor editor   propertyeditormanager findeditor type
if  editor    null
editor setvalue value
return editor getastext
return null
private static method findsettermethod class clazz  string name
// build the method name.
name       name substring 0  1  touppercase     name substring 1
method methods   clazz getmethods
for  int i   0  i < methods length  i
method method   methods
class params   method getparametertypes
if  method getname   equals name     params length    1
return method
return null
private static boolean issettabletype class clazz
if  propertyeditormanager findeditor clazz     null
return true
return false
public static string tostring object target
return tostring target  object class  null
public static string tostring object target  class stopclass
return tostring target  stopclass  null
public static string tostring object target  class stopclass  map<string  object> overridefields
linkedhashmap<string  object> map   new linkedhashmap<string  object>
addfields target  target getclass    stopclass  map
if  overridefields    null
for string key   overridefields keyset
object value   overridefields get key
map put key  value
stringbuffer buffer   new stringbuffer simplename target getclass
buffer append
set entryset   map entryset
boolean first   true
for  iterator iter   entryset iterator    iter hasnext
map entry entry    map entry iter next
if  first
first   false
else
buffer append
buffer append entry getkey
buffer append
appendtostring buffer  entry getvalue
buffer append
return buffer tostring
protected static void appendtostring stringbuffer buffer  object value
if  value instanceof activemqdestination
activemqdestination destination    activemqdestination value
buffer append destination getqualifiedname
else
buffer append value
public static string simplename class clazz
string name   clazz getname
int p   name lastindexof
if  p >  0
name   name substring p   1
return name
private static void addfields object target  class startclass  class<object> stopclass  linkedhashmap<string  object> map
if  startclass    stopclass
addfields target  startclass getsuperclass    stopclass  map
field fields   startclass getdeclaredfields
for  int i   0  i < fields length  i
field field   fields
if  modifier isstatic field getmodifiers       modifier istransient field getmodifiers
modifier isprivate field getmodifiers
continue
try
field setaccessible true
object o   field get target
if  o    null    o getclass   isarray
try
o   arrays aslist  object o
catch  throwable e
map put field getname    o
catch  throwable e
e printstacktrace