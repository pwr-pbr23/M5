/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq
import java util hashmap
import java util map
import java util concurrent atomic atomiclong
import javax jms destination
import javax jms illegalstateexception
import javax jms invaliddestinationexception
import javax jms jmsexception
import javax jms message
import org apache activemq command activemqdestination
import org apache activemq command producerack
import org apache activemq command producerid
import org apache activemq command producerinfo
import org apache activemq management jmsproducerstatsimpl
import org apache activemq management statscapable
import org apache activemq management statsimpl
import org apache activemq usage memoryusage
import org apache activemq util introspectionsupport
/**
* a client uses a <code>messageproducer</code> object to send messages to a
* destination. a <code>messageproducer</code> object is created by passing a
* <code>destination</code> object to a message-producer creation method
* supplied by a session.
* <p>
* <code>messageproducer</code> is the parent interface for all message
* producers.
* <p>
* a client also has the option of creating a message producer without supplying
* a destination. in this case, a destination must be provided with every send
* operation. a typical use for this kind of message producer is to send replies
* to requests using the request's <code>jmsreplyto</code> destination.
* <p>
* a client can specify a default delivery mode, priority, and time to live for
* messages sent by a message producer. it can also specify the delivery mode,
* priority, and time to live for an individual message.
* <p>
* a client can specify a time-to-live value in milliseconds for each message it
* sends. this value defines a message expiration time that is the sum of the
* message's time-to-live and the gmt when it is sent (for transacted sends,
* this is the time the client sends the message, not the time the transaction
* is committed).
* <p>
* a jms provider should do its best to expire messages accurately; however, the
* jms api does not define the accuracy provided.
*
* @version $revision: 1.14 $
* @see javax.jms.topicpublisher
* @see javax.jms.queuesender
* @see javax.jms.session#createproducer
*/
public class activemqmessageproducer extends activemqmessageproducersupport implements statscapable  disposable
protected producerinfo info
protected boolean closed
private jmsproducerstatsimpl stats
private atomiclong messagesequence
private long starttime
private messagetransformer transformer
private memoryusage producerwindow
protected activemqmessageproducer activemqsession session  producerid producerid  activemqdestination destination  int sendtimeout  throws jmsexception
super session
this info   new producerinfo producerid
this info setwindowsize session connection getproducerwindowsize
if  destination    null    destination getoptions      null
map<string  string> options   new hashmap<string  string> destination getoptions
introspectionsupport setproperties this info  options
this info setdestination destination
// enable producer window flow control if protocol > 3 and the window
// size > 0
if  session connection getprotocolversion   >  3    this info getwindowsize   > 0
producerwindow   new memoryusage     producerid
producerwindow setlimit this info getwindowsize
producerwindow start
this defaultdeliverymode   message default_delivery_mode
this defaultpriority   message default_priority
this defaulttimetolive   message default_time_to_live
this starttime   system currenttimemillis
this messagesequence   new atomiclong 0
this stats   new jmsproducerstatsimpl session getsessionstats    destination
this session addproducer this
this session asyncsendpacket info
this setsendtimeout sendtimeout
settransformer session gettransformer
public statsimpl getstats
return stats
public jmsproducerstatsimpl getproducerstats
return stats
/**
* gets the destination associated with this <code>messageproducer</code>.
*
* @return this producer's <code>destination/ <code>
* @throws jmsexception if the jms provider fails to close the producer due to
*                      some internal error.
* @since 1.1
*/
public destination getdestination   throws jmsexception
checkclosed
return this info getdestination
/**
* closes the message producer.
* <p>
* since a provider may allocate some resources on behalf of a <code>
* messageproducer</code>
* outside the java virtual machine, clients should close them when they are
* not needed. relying on garbage collection to eventually reclaim these
* resources may not be timely enough.
*
* @throws jmsexception if the jms provider fails to close the producer due
*                 to some internal error.
*/
public void close   throws jmsexception
if   closed
dispose
this session asyncsendpacket info createremovecommand
public void dispose
if   closed
this session removeproducer this
if  producerwindow    null
producerwindow stop
closed   true
/**
* check if the instance of this producer has been closed.
*
* @throws illegalstateexception
*/
protected void checkclosed   throws illegalstateexception
if  closed
throw new illegalstateexception
/**
* sends a message to a destination for an unidentified message producer,
* specifying delivery mode, priority and time to live.
* <p>
* typically, a message producer is assigned a destination at creation time;
* however, the jms api also supports unidentified message producers, which
* require that the destination be supplied every time a message is sent.
*
* @param destination the destination to send this message to
* @param message the message to send
* @param deliverymode the delivery mode to use
* @param priority the priority for this message
* @param timetolive the message's lifetime (in milliseconds)
* @throws jmsexception if the jms provider fails to send the message due to
*                 some internal error.
* @throws unsupportedoperationexception if an invalid destination is
*                 specified.
* @throws invaliddestinationexception if a client uses this method with an
*                 invalid destination.
* @see javax.jms.session#createproducer
* @since 1.1
*/
public void send destination destination  message message  int deliverymode  int priority  long timetolive  throws jmsexception
checkclosed
if  destination    null
if  info getdestination      null
throw new unsupportedoperationexception
throw new invaliddestinationexception
activemqdestination dest
if  destination    info getdestination
dest    activemqdestination destination
else if  info getdestination      null
dest   activemqdestination transform destination
else
throw new unsupportedoperationexception     this info getdestination   getphysicalname
if  dest    null
throw new jmsexception
if  transformer    null
message transformedmessage   transformer producertransform session  this  message
if  transformedmessage    null
message   transformedmessage
if  producerwindow    null
try
producerwindow waitforspace
catch  interruptedexception e
throw new jmsexception
this session send this  dest  message  deliverymode  priority  timetolive  producerwindow sendtimeout
stats onmessage
public messagetransformer gettransformer
return transformer
/**
* sets the transformer used to transform messages before they are sent on
* to the jms bus
*/
public void settransformer messagetransformer transformer
this transformer   transformer
/**
* @return the time in milli second when this object was created.
*/
protected long getstarttime
return this starttime
/**
* @return returns the messagesequence.
*/
protected long getmessagesequence
return messagesequence incrementandget
/**
* @param messagesequence the messagesequence to set.
*/
protected void setmessagesequence atomiclong messagesequence
this messagesequence   messagesequence
/**
* @return returns the info.
*/
protected producerinfo getproducerinfo
return this info    null ? this info   null
/**
* @param info the info to set
*/
protected void setproducerinfo producerinfo info
this info   info
public string tostring
return     info getproducerid
public void onproducerack producerack pa
if  this producerwindow    null
this producerwindow decreaseusage pa getsize