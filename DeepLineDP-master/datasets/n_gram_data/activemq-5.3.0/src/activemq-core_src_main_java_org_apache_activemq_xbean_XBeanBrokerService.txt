/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq xbean
import java io ioexception
import org apache activemq broker brokerservice
import org apache activemq usage systemusage
import org springframework beans beansexception
import org springframework beans factory disposablebean
import org springframework beans factory initializingbean
import org springframework context applicationcontext
import org springframework context applicationcontextaware
import org springframework context configurableapplicationcontext
/**
* an activemq message broker. it consists of a number of transport
* connectors, network connectors and a bunch of properties which can be used to
* configure the broker as its lazily created.
*
* @org.apache.xbean.xbean element="broker" rootelement="true"
* @org.apache.xbean.defaults {code:xml}
* <broker test="foo.bar">
*   lets.
*   see what it includes.
* </broker>
* {code}
* @version $revision: 1.1 $
*/
public class xbeanbrokerservice extends brokerservice implements initializingbean  disposablebean  applicationcontextaware
private boolean start   true
private applicationcontext applicationcontext   null
private boolean destroyapplicationcontextonshutdown   false
public xbeanbrokerservice
public void afterpropertiesset   throws exception
ensuresystemusagehasstore
if  start
start
if  destroyapplicationcontextonshutdown
addshutdownhook new runnable
public void run
if  applicationcontext instanceof configurableapplicationcontext
configurableapplicationcontext  applicationcontext  close
private void ensuresystemusagehasstore   throws ioexception
systemusage usage   getsystemusage
if  usage getstoreusage   getstore      null
usage getstoreusage   setstore getpersistenceadapter
if  usage gettempusage   getstore      null
usage gettempusage   setstore gettempdatastore
public void destroy   throws exception
stop
public boolean isstart
return start
/**
* sets whether or not the broker is started along with the applicationcontext it is defined within.
* normally you would want the broker to start up along with the applicationcontext but sometimes when working
* with junit tests you may wish to start and stop the broker explicitly yourself.
*/
public void setstart boolean start
this start   start
/**
* sets whether the broker should shutdown the applicationcontext when the broker is stopped.
* the broker can be stopped because the underlying jdbc store is unavailable for example.
*/
public void setdestroyapplicationcontextonshutdown boolean destroy
this destroyapplicationcontextonshutdown   destroy
public void setapplicationcontext applicationcontext applicationcontext
throws beansexception
this applicationcontext   applicationcontext
public applicationcontext getapplicationcontext
return applicationcontext