/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq camel component
import java lang reflect constructor
import javax jms connectionfactory
import org apache activemq spring activemqconnectionfactory
import org apache camel component jms jmsconfiguration
import org springframework jms connection singleconnectionfactory
import org springframework jms connection jmstransactionmanager
import org springframework jms core jmstemplate
import org springframework transaction platformtransactionmanager
/**
* @version $revision$
*/
public class activemqconfiguration extends jmsconfiguration
private string brokerurl   activemqconnectionfactory default_broker_url
private boolean usesingleconnection   false
private boolean usepooledconnection   true
private string username
private string password
public activemqconfiguration
public string getbrokerurl
return brokerurl
/**
* sets the broker url to use to connect to activemq using the
* <a href="http://activemq.apache.org/configuring-transports.html">activemq uri format</a>
*
* @param brokerurl the url of the broker.
*/
public void setbrokerurl string brokerurl
this brokerurl   brokerurl
public boolean isusesingleconnection
return usesingleconnection
public string getusername
return username
/**
* sets the username to be used to login to activemq
* @param username
*/
public void setusername string username
this username   username
public string getpassword
return password
/**
* sets the password/passcode used to login to activemq
*
* @param password
*/
public void setpassword string password
this password   password
/**
* enables or disables whether a spring {@link singleconnectionfactory} will be used so that when
* messages are sent to activemq from outside of a message consuming thread, pooling will be used rather
* than the default with the spring {@link jmstemplate} which will create a new connection, session, producer
* for each message then close them all down again.
* <p/>
* the default value is true so that a single connection is used by default.
*
* @param usesingleconnection
*/
public void setusesingleconnection boolean usesingleconnection
this usesingleconnection   usesingleconnection
public boolean isusepooledconnection
return usepooledconnection
/**
* enables or disables whether a pooledconnectionfactory will be used so that when
* messages are sent to activemq from outside of a message consuming thread, pooling will be used rather
* than the default with the spring {@link jmstemplate} which will create a new connection, session, producer
* for each message then close them all down again.
* <p/>
* the default value is false by default as it requires an extra dependency on commons-pool.
*/
public void setusepooledconnection boolean usepooledconnection
this usepooledconnection   usepooledconnection
@override
public platformtransactionmanager gettransactionmanager
platformtransactionmanager answer   super gettransactionmanager
if  istransacted      answer    null
// lets auto-default the transaction manager if its not specified
answer   createtransactionmanager
settransactionmanager answer
answer   gettransactionmanager
return answer
/**
* factory method to create a default transaction manager if one is not specified
*/
protected platformtransactionmanager createtransactionmanager
jmstransactionmanager answer   new jmstransactionmanager getconnectionfactory
answer afterpropertiesset
return answer
@override
protected connectionfactory createconnectionfactory
activemqconnectionfactory answer   new activemqconnectionfactory
if  username    null
answer setusername username
if  password    null
answer setpassword password
if  answer getbeanname      null
answer setbeanname
answer setbrokerurl getbrokerurl
if  isusesingleconnection
return new singleconnectionfactory answer
else if  isusepooledconnection
return createpooledconnectionfactory answer
else
return answer
protected connectionfactory createpooledconnectionfactory activemqconnectionfactory connectionfactory
// lets not use classes directly to avoid a runtime dependency on commons-pool
// for folks not using this option
try
class type   loadclass    getclass   getclassloader
constructor constructor   type getconstructor org apache activemq activemqconnectionfactory class
return  connectionfactory  constructor newinstance connectionfactory
catch  exception e
throw new runtimeexception     e  e
public static class<?> loadclass string name  classloader loader  throws classnotfoundexception
classloader contextclassloader   thread currentthread   getcontextclassloader
if  contextclassloader    null
try
return contextclassloader loadclass name
catch  classnotfoundexception e
try
return loader loadclass name
catch  classnotfoundexception e1
throw e1
else
return loader loadclass name