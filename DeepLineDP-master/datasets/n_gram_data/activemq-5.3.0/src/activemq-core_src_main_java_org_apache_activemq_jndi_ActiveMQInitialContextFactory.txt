/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq jndi
import java net urisyntaxexception
import java util arraylist
import java util hashtable
import java util iterator
import java util list
import java util map
import java util properties
import java util stringtokenizer
import java util concurrent concurrenthashmap
import javax jms queue
import javax jms topic
import javax naming context
import javax naming namingexception
import javax naming spi initialcontextfactory
import org apache activemq activemqconnectionfactory
import org apache activemq command activemqqueue
import org apache activemq command activemqtopic
/**
* a factory of the activemq initialcontext which contains
* {@link connectionfactory} instances as well as a child context called
* <i>destinations</i> which contain all of the current active destinations, in
* child context depending on the qos such as transient or durable and queue or
* topic.
*
* @version $revision: 1.2 $
*/
public class activemqinitialcontextfactory implements initialcontextfactory
private static final string default_connection_factory_names
private string connectionprefix
private string queueprefix
private string topicprefix
public context getinitialcontext hashtable environment  throws namingexception
// lets create a factory
map<string  object> data   new concurrenthashmap<string  object>
string names   getconnectionfactorynames environment
for  int i   0  i < names length  i
activemqconnectionfactory factory   null
string name   names
try
factory   createconnectionfactory name  environment
catch  exception e
throw new namingexception
/*
* if( broker==null ) { try { broker = factory.getembeddedbroker(); }
* catch (jmsexception e) { log.warn("failed to get embedded
* broker", e); } }
*/
data put name  factory
createqueues data  environment
createtopics data  environment
/*
* if (broker != null) { data.put("destinations",
* broker.getdestinationcontext(environment)); }
*/
data put    new lazycreatecontext
private static final long serialversionuid   6503881346214855588l
protected object createentry string name
return new activemqqueue name
data put    new lazycreatecontext
private static final long serialversionuid   2019166796234979615l
protected object createentry string name
return new activemqtopic name
return createcontext environment  data
// properties
// -------------------------------------------------------------------------
public string gettopicprefix
return topicprefix
public void settopicprefix string topicprefix
this topicprefix   topicprefix
public string getqueueprefix
return queueprefix
public void setqueueprefix string queueprefix
this queueprefix   queueprefix
// implementation methods
// -------------------------------------------------------------------------
protected readonlycontext createcontext hashtable environment  map<string  object> data
return new readonlycontext environment  data
protected activemqconnectionfactory createconnectionfactory string name  hashtable environment  throws urisyntaxexception
hashtable temp   new hashtable environment
string prefix   connectionprefix   name
for  iterator iter   environment entryset   iterator    iter hasnext
map entry entry    map entry iter next
string key    string entry getkey
if  key startswith prefix
// rename the key...
temp remove key
key   key substring prefix length
temp put key  entry getvalue
return createconnectionfactory temp
protected string getconnectionfactorynames map environment
string factorynames    string environment get
if  factorynames    null
list<string> list   new arraylist<string>
for  stringtokenizer enumeration   new stringtokenizer factorynames      enumeration hasmoretokens
list add enumeration nexttoken   trim
int size   list size
if  size > 0
string answer   new string
list toarray answer
return answer
return default_connection_factory_names
protected void createqueues map<string  object> data  hashtable environment
for  iterator iter   environment entryset   iterator    iter hasnext
map entry entry    map entry iter next
string key   entry getkey   tostring
if  key startswith queueprefix
string jndiname   key substring queueprefix length
data put jndiname  createqueue entry getvalue   tostring
protected void createtopics map<string  object> data  hashtable environment
for  iterator iter   environment entryset   iterator    iter hasnext
map entry entry    map entry iter next
string key   entry getkey   tostring
if  key startswith topicprefix
string jndiname   key substring topicprefix length
data put jndiname  createtopic entry getvalue   tostring
/**
* factory method to create new queue instances
*/
protected queue createqueue string name
return new activemqqueue name
/**
* factory method to create new topic instances
*/
protected topic createtopic string name
return new activemqtopic name
/**
* factory method to create a new connection factory from the given
* environment
*/
protected activemqconnectionfactory createconnectionfactory hashtable environment  throws urisyntaxexception
activemqconnectionfactory answer   new activemqconnectionfactory
properties properties   new properties
properties putall environment
answer setproperties properties
return answer
public string getconnectionprefix
return connectionprefix
public void setconnectionprefix string connectionprefix
this connectionprefix   connectionprefix