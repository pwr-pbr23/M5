/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq transport udp
import java io datainputstream
import java io dataoutputstream
import java io ioexception
import java net datagrampacket
import java net datagramsocket
import java net socketaddress
import org apache activemq command command
import org apache activemq command endpoint
import org apache activemq command lastpartialcommand
import org apache activemq command partialcommand
import org apache activemq openwire booleanstream
import org apache activemq openwire openwireformat
import org apache activemq transport reliable replaybuffer
import org apache activemq util bytearrayinputstream
import org apache activemq util bytearrayoutputstream
import org apache commons logging log
import org apache commons logging logfactory
/**
* a strategy for reading datagrams and de-fragmenting them together.
*
* @version $revision$
*/
public class commanddatagramsocket extends commandchannelsupport
private static final log log   logfactory getlog commanddatagramsocket class
private datagramsocket channel
private object readlock   new object
private object writelock   new object
public commanddatagramsocket udptransport transport  openwireformat wireformat  int datagramsize  socketaddress targetaddress  datagramheadermarshaller headermarshaller
datagramsocket channel
super transport  wireformat  datagramsize  targetaddress  headermarshaller
this channel   channel
public void start   throws exception
public void stop   throws exception
public command read   throws ioexception
command answer   null
endpoint from   null
synchronized  readlock
while  true
datagrampacket datagram   createdatagrampacket
channel receive datagram
// todo could use a datainput implementation that talks direct
// to the byte[] to avoid object allocation
datainputstream datain   new datainputstream new bytearrayinputstream datagram getdata
from   headermarshaller createendpoint datagram  datain
answer    command wireformat unmarshal datain
break
if  answer    null
answer setfrom from
if  log isdebugenabled
log debug     name       answer
return answer
public void write command command  socketaddress address  throws ioexception
synchronized  writelock
bytearrayoutputstream writebuffer   createbytearrayoutputstream
dataoutputstream dataout   new dataoutputstream writebuffer
headermarshaller writeheader command  dataout
int offset   writebuffer size
wireformat marshal command  dataout
if  remaining writebuffer  >  0
sendwritebuffer address  writebuffer  command getcommandid
else
// lets split the command up into chunks
byte data   writebuffer tobytearray
boolean lastfragment   false
int length   data length
for  int fragment   0   lastfragment  fragment
writebuffer   createbytearrayoutputstream
headermarshaller writeheader command  dataout
int chunksize   remaining writebuffer
// we need to remove the amount of overhead to write the
// partial command
// lets write the flags in there
booleanstream bs   null
if  wireformat istightencodingenabled
bs   new booleanstream
bs writeboolean true      the partial data byte is
// never null
// lets remove the header of the partial command
// which is the byte for the type and an int for the size of
// the byte[]
// data type + the command id + size of the partial data
chunksize    1   4   4
// the boolean flags
if  bs    null
chunksize    bs marshalledsize
else
chunksize    1
if   wireformat issizeprefixdisabled
// lets write the size of the command buffer
dataout writeint chunksize
chunksize    4
lastfragment   offset   chunksize >  length
if  chunksize   offset > length
chunksize   length   offset
if  lastfragment
dataout write lastpartialcommand data_structure_type
else
dataout write partialcommand data_structure_type
if  bs    null
bs marshal dataout
int commandid   command getcommandid
if  fragment > 0
commandid   sequencegenerator getnextsequenceid
dataout writeint commandid
if  bs    null
dataout write  byte 1
// size of byte array
dataout writeint chunksize
// now the data
dataout write data  offset  chunksize
offset    chunksize
sendwritebuffer address  writebuffer  commandid
public int getdatagramsize
return datagramsize
public void setdatagramsize int datagramsize
this datagramsize   datagramsize
// implementation methods
// -------------------------------------------------------------------------
protected void sendwritebuffer socketaddress address  bytearrayoutputstream writebuffer  int commandid  throws ioexception
byte data   writebuffer tobytearray
sendwritebuffer commandid  address  data  false
protected void sendwritebuffer int commandid  socketaddress address  byte data  boolean redelivery  throws ioexception
// lets put the datagram into the replay buffer first to prevent timing
// issues
replaybuffer buffercache   getreplaybuffer
if  buffercache    null     redelivery
buffercache addbuffer commandid  data
if  log isdebugenabled
string text   redelivery ?
log debug     name       text       commandid       address
datagrampacket packet   new datagrampacket data  0  data length  address
channel send packet
public void sendbuffer int commandid  object buffer  throws ioexception
if  buffer    null
byte data    byte buffer
sendwritebuffer commandid  replayaddress  data  true
else
if  log iswarnenabled
log warn     commandid
protected datagrampacket createdatagrampacket
return new datagrampacket new byte  datagramsize
protected int remaining bytearrayoutputstream buffer
return datagramsize   buffer size
protected bytearrayoutputstream createbytearrayoutputstream
return new bytearrayoutputstream datagramsize