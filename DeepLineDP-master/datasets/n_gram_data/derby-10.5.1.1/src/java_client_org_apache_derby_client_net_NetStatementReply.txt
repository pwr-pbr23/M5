/*
derby - class org.apache.derby.client.net.netstatementreply
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby client net
import java sql resultset
import org apache derby client am columnmetadata
import org apache derby client am disconnectexception
import org apache derby client am preparedstatementcallbackinterface
import org apache derby client am resultsetcallbackinterface
import org apache derby client am section
import org apache derby client am sqlstate
import org apache derby client am sqlexception
import org apache derby client am statement
import org apache derby client am statementcallbackinterface
import org apache derby client am types
import org apache derby client am utils
import org apache derby jdbc clientdriver
import org apache derby client am clientjdbcobjectfactory
import org apache derby shared common i18n messageutil
import org apache derby client am clientmessageid
import org apache derby shared common reference sqlstate
import org apache derby shared common reference messageid
public class netstatementreply extends netpackagereply implements statementreplyinterface
netstatementreply netagent netagent  int buffersize
super netagent  buffersize
//----------------------------- entry points ---------------------------------
public void readpreparedescribeoutput statementcallbackinterface statement  throws disconnectexception
startsameidchainparse
parseprpsqlsttreply statement
endofsameidchaindata
public void readexecuteimmediate statementcallbackinterface statement  throws disconnectexception
startsameidchainparse
parseexcsqlimmreply statement
endofsameidchaindata
public void readopenquery statementcallbackinterface statement  throws disconnectexception
startsameidchainparse
parseopnqryreply statement
endofsameidchaindata
public void readexecute preparedstatementcallbackinterface preparedstatement  throws disconnectexception
startsameidchainparse
parseexcsqlsttreply preparedstatement
endofsameidchaindata
public void readprepare statementcallbackinterface statement  throws disconnectexception
startsameidchainparse
parseprpsqlsttreply statement
endofsameidchaindata
public void readdescribeinput preparedstatementcallbackinterface preparedstatement  throws disconnectexception
if  longbufferfordecryption_    null
buffer_   longbufferfordecryption_
pos_   longposfordecryption_
count_   longcountfordecryption_
if  longbufferfordecryption_    null    count_ > longbufferfordecryption_ length
count_   longbufferfordecryption_ length
dsslength_   0
longbufferfordecryption_   null
startsameidchainparse
parsedscsqlsttreply preparedstatement  1      anything other than 0 for input
endofsameidchaindata
public void readdescribeoutput preparedstatementcallbackinterface preparedstatement  throws disconnectexception
startsameidchainparse
parsedscsqlsttreply preparedstatement  0       0 for output
endofsameidchaindata
public void readexecutecall statementcallbackinterface statement  throws disconnectexception
startsameidchainparse
parseexcsqlsttreply statement
endofsameidchaindata
//----------------------helper methods----------------------------------------
//------------------parse reply for specific command--------------------------
// these methods are "private protected", which is not a recognized java privilege,
// but means that these methods are private to this class and to subclasses,
// and should not be used as package-wide friendly methods.
private void parseprpsqlsttreply statementcallbackinterface statement  throws disconnectexception
int peekcp   parsetypdefsormgrlvlovrs
if  peekcp    codepoint sqldard
// the sqlcagrp is most likely null for insert/update/deletes.  if it is null, then we can
// peek ahead for the column number which most likely will be 0.  if it is 0, then we will
// not new up a columnmetadata, and we can skip the rest of the bytes in sqldard.
// if sqlcargrp is not null, (most likely for select's) then we will not peek ahead for the
// column number since it will never be 0 in a select case.
columnmetadata columnmetadata   null
netsqlca netsqlca   null
boolean nullsqlca   peekfornullsqlcagrp
if  nullsqlca    peeknumofcolumns      0
netsqlca   parsesqldard columnmetadata  true      true means to skip the rest of sqldard bytes
else
columnmetadata   clientdriver getfactory   newcolumnmetadata netagent_ logwriter_
netsqlca   parsesqldard columnmetadata  false      false means do not skip sqldard bytes
statement completepreparedescribeoutput columnmetadata
netsqlca
else if  peekcp    codepoint sqlcard
netsqlca netsqlca   parsesqlcard null
statement completeprepare netsqlca
else
parseprepareerror statement
// parse the reply for the describe sql statement command.
// this method handles the parsing of all command replies and reply data
// for the dscsqlstt command.
private void parsedscsqlsttreply preparedstatementcallbackinterface ps
int metadatatype     0 is output  else input
throws disconnectexception
int peekcp   parsetypdefsormgrlvlovrs
if  peekcp    codepoint sqldard
columnmetadata columnmetadata   null
if  columnmetadata    null
columnmetadata   clientdriver getfactory   newcolumnmetadata netagent_ logwriter_
netsqlca netsqlca   parsesqldard columnmetadata  false       false means do not skip sqldard bytes
if  columnmetadata columns_    0
columnmetadata   null
if  metadatatype    0     describe output
ps completedescribeoutput columnmetadata  netsqlca
else
ps completedescribeinput columnmetadata  netsqlca
else if  peekcp    codepoint sqlcard
netsqlca netsqlca   parsesqlcard null
if  metadatatype    0     describe output
ps completedescribeoutput null  netsqlca
else
ps completedescribeinput null  netsqlca
else
parsedescribeerror ps
// parse the reply for the execute immediate sql statement command.
// this method handles the parsing of all command replies and reply data
// for the excsqlimm command.
private void parseexcsqlimmreply statementcallbackinterface statement  throws disconnectexception
int peekcp   parsetypdefsormgrlvlovrs
if  peekcp    codepoint rdbupdrm
parserdbupdrm
peekcp   parsetypdefsormgrlvlovrs
switch  peekcp
case codepoint enduowrm
parseenduowrm statement getconnectioncallbackinterface
parsetypdefsormgrlvlovrs
case codepoint sqlcard
netsqlca netsqlca   parsesqlcard null
statement completeexecuteimmediate netsqlca
break
default
parseexecuteimmediateerror statement
break
peekcp   peekcodepoint
if  peekcp    codepoint pbsd
parsepbsd
/**
* parse the reply for the open query command. this method handles the
* parsing of all command replies and reply data for the opnqry command.
* will be replaced by parseopnqryreply (see parseopnqryreplyproto)
* @param statementi statement to invoke callbacks on
* @throws org.apache.derby.client.am.disconnectexception
*/
private void parseopnqryreply statementcallbackinterface statementi
throws disconnectexception
int peekcp   peekcodepoint
if  peekcp    codepoint opnqryrm
parseopenquery statementi
peekcp   peekcodepoint
if  peekcp    codepoint rdbupdrm
parserdbupdrm
peekcp   peekcodepoint
else if  peekcp    codepoint rdbupdrm
parserdbupdrm
parseopenquery statementi
peekcp   peekcodepoint
else if  peekcp    codepoint opnqflrm
parseopenqueryfailure statementi
peekcp   peekcodepoint
else
parseopenqueryerror statementi
peekcp   peekcodepoint
if  peekcp    codepoint pbsd
parsepbsd
// called by netsetclientpiggybackcommand.read()
private void parseexcsqlsetreply statementcallbackinterface statement  throws disconnectexception
int peekcp   parsetypdefsormgrlvlovrs
if  peekcp    codepoint rdbupdrm
parserdbupdrm
parsetypdefsormgrlvlovrs
else if  peekcp    codepoint enduowrm
parseenduowrm statement getconnectioncallbackinterface
parsetypdefsormgrlvlovrs
if  peekcp    codepoint sqlcard
netsqlca netsqlca   parsesqlcard null
statement completeexecutesetstatement netsqlca
else
parseexecutesetstatementerror statement
// parse the reply for the execute sql statement command.
// this method handles the parsing of all command replies and reply data
// for the excsqlstt command.
// also called by callablestatement.readexecutecall()
private void parseexcsqlsttreply statementcallbackinterface statementi  throws disconnectexception
// first handle the transaction component, which consists of one or more
// reply messages indicating the transaction state.
// these are enduowrm, cmmrqsrm, or rdbupdrm.  if rdbupdrm is returned,
// it may be followed by enduowrm or cmmrqsrm
int peekcp   peekcodepoint
if  peekcp    codepoint rdbupdrm
parserdbupdrm
peekcp   peekcodepoint
if  peekcp    codepoint enduowrm
parseenduowrm statementi getconnectioncallbackinterface
peekcp   peekcodepoint
// check for a rslsetrm, this is first rm of the result set summary component
// which would be returned if a stored procedure was called which returned result sets.
if  peekcp    codepoint rslsetrm
parseresultsetprocedure statementi
peekcp   peekcodepoint
if  peekcp    codepoint rdbupdrm
parserdbupdrm
peekcp   peekcodepoint
if  peekcp    codepoint pbsd
parsepbsd
return
// check for a possible typdefnam or typdefovr which may be present
// before the sqlcard or sqldtard.
peekcp   parsetypdefsormgrlvlovrs
// an sqlcard may be retunred if there was no output data, result sets or parameters,
// or in the case of an error.
if  peekcp    codepoint sqlcard
netsqlca netsqlca   parsesqlcard null
statementi completeexecute netsqlca
peekcp   peekcodepoint
else if  peekcp    codepoint sqldtard
// in the case of singleton select or if a stored procedure was called which had
// parameters but no result sets, an sqlstard may be returned
// keep the preparedstatementcallbackinterface, since only preparedstatement and callablestatement
// has parameters or singleton select which translates to sqldtard.
netsqldta netsqldta   null
boolean usecachedsingletonrowdata   false
if    statement  statementi  cachedsingletonrowdata_    null
netsqldta   new netsqldta netagent_
else
netsqldta    netsqldta    statement  statementi  cachedsingletonrowdata_
netsqldta resetdatabuffer
netsqldta extdtadata_ clear
usecachedsingletonrowdata   true
netsqlca netsqlca
parsesqldtard netsqldta
// there may be externalized lob data which also gets returned.
peekcp   peekcodepoint
while  peekcp    codepoint extdta
copyextdta netsqldta
peekcp   peekcodepoint
statementi completeexecutecall netsqlca  netsqldta
else
// if here, then assume an error reply message was returned.
parseexecuteerror statementi
if  peekcp    codepoint pbsd
parsepbsd
peekcp   peekcodepoint
protected void parseresultsetprocedure statementcallbackinterface statementi  throws disconnectexception
// when a stored procedure is called which returns result sets,
// the next thing to be returned after the optional transaction component
// is the summary component.
//
// parse the result set summary component which consists of a
// result set reply message, sqlcard or sqldtard, and an sql result set
// reply data object.  also check for possible typdef overrides before the
// objdsss.
// this method returns an arraylist of generated sections which contain the
// package and section information for the result sets which were opened on the
// server.
// the result set summary component consists of a result set reply message.
java util arraylist sectional   parserslsetrm
// following the rslsetrm is an sqlcard or an sqldtard.  check for a
// typdefnam or typdefovr before looking for these objects.
int peekcp   parsetypdefsormgrlvlovrs
// the sqlcard and the sqldtard are mutually exclusive.
// the sqldtard is returned if the stored procedure had parameters.
// (note: the sqldtard contains an sqlca also.  this is the sqlca for the
// stored procedure call.
netsqldta netsqldta   null
netsqlca netsqlca   null
if  peekcp    codepoint sqlcard
netsqlca   parsesqlcard null
else
// keep the preparedstatementcallbackinterface, since only preparedstatement and callablestatement
// has parameters or singleton select which translates to sqldtard.
netsqldta   new netsqldta netagent_
netsqlca   parsesqldtard netsqldta
// check for a possible typdefnam or typdefovr
// before the sql result set reply data object
peekcp   parsetypdefsormgrlvlovrs
int numberofresultsets   parsesqlrslrd sectional
// the result set summary component parsed above indicated how many result sets were opened
// by the stored pocedure call.  it contained section information for
// each of these result sets.  loop through the section array and
// parse the result set component for each of the retunred result sets.
netresultset resultsets   new netresultset
for  int i   0  i < numberofresultsets  i
// parse the result set component of the stored procedure reply.
netresultset netresultset   parseresultsetcursor statementi   section  sectional get i
resultsets   netresultset
// lobs may have been returned for one of the stored procedure parameters so
// check for any externalized data.
peekcp   peekcodepoint
while  peekcp    codepoint extdta
copyextdta netsqldta
peekcp   peekcodepoint
statementi completeexecutecall netsqlca  netsqldta  resultsets
// parse the result set component of the reply for a stored procedure
// call which returns result sets.
// the result set component consists of an open query reply message
// followed by an optional sqlcard, followed by an optional
// sql column information reply data object, followed by a query descriptor.
// there may also be query data or an end of query reply message.
protected netresultset parseresultsetcursor statementcallbackinterface statementi
section section  throws disconnectexception
// the first item returne is an opnqryrm.
netresultset netresultset   parseopnqryrm statementi  false
// the next to be returned is an objdss so check for any typdef overrides.
int peekcp   parsetypdefsormgrlvlovrs
// an sqlcard may be returned if there were any warnings on the open.
netsqlca netsqlca   null
if  peekcp    codepoint sqlcard
netsqlca   parsesqlcard null
peekcp   parsetypdefsormgrlvlovrs
// the sqlcinrd contains sqlda like information for the result set.
columnmetadata resultsetmetadata   null
if  peekcp    codepoint sqlcinrd
resultsetmetadata   parsesqlcinrd
peekcp   parsetypdefsormgrlvlovrs
// a query descriptor must be present.
// we cannot cache the cursor if result set is returned from a stored procedure, so
// there is no cached cursor to use here.
parseqrydsc netresultset netcursor_
peekcp   peekcodepoint
statementi completeexecutecallopenquery netsqlca  netresultset  resultsetmetadata  section
// depending on the blocking rules, qrydta may have been returned on the open.
while  peekcp    codepoint qrydta
parseqrydta netresultset
peekcp   peekcodepoint
// under some circumstances, the server may have closed the cursor.
// this will be indicated by an endqryrm.
if  peekcp    codepoint endqryrm
parseendquery  resultsetcallbackinterface  netresultset
return netresultset
protected void parseopenquery statementcallbackinterface statementi  throws disconnectexception
netresultset netresultset   parseopnqryrm statementi  true
netsqlca sqlca   null
int peekcp   peekcodepoint
if  peekcp    codepoint qrydsc
peekcp   parsetypdefsormgrlvlovrs
if  peekcp    codepoint sqldard
columnmetadata columnmetadata   clientdriver getfactory   newcolumnmetadata netagent_ logwriter_
netsqlca netsqlca   parsesqldard columnmetadata  false       false means do not skip sqldard bytes
//for java stored procedure, we got the resultsetmetadata from server,
//do we need to save the resultsetmetadata and propagate netsqlca?
//the following statement are doing the both, but it do more than
//we want. it also mark the completion of prepare statement.
//
// this will override the same call made from parsepreparedescribe
//  this will not work, this is not the da for the stored proc params
statementi completepreparedescribeoutput columnmetadata  netsqlca
peekcp   parsetypdefsormgrlvlovrs
// check if the dard is mutually exclusive with card, if so, then the following if should be an elese
if  peekcp    codepoint sqlcard
sqlca   parsesqlcard null
peekcp   parsetypdefsormgrlvlovrs
parseqrydsc netresultset netcursor_
peekcp   peekcodepoint
while  peekcp    codepoint qrydta
parseqrydta netresultset
peekcp   peekcodepoint
if  peekcp    codepoint sqlcard
netsqlca netsqlca   parsesqlcard null
statementi completesqlca netsqlca
peekcp   peekcodepoint
if  peekcp    codepoint endqryrm
parseendquery netresultset
statementi completeopenquery sqlca  netresultset
protected void parseendquery resultsetcallbackinterface resultseti  throws disconnectexception
parseendqryrm resultseti
parsetypdefsormgrlvlovrs
netsqlca netsqlca   parsesqlcard null
resultseti earlyclosecomplete netsqlca
void parseopenqueryfailure statementcallbackinterface statementi  throws disconnectexception
parseopnqflrm statementi
parsetypdefsormgrlvlovrs
netsqlca netsqlca   parsesqlcard null
statementi completeopenquery netsqlca  null
void parseprepareerror statementcallbackinterface statement  throws disconnectexception
int peekcp   peekcodepoint
switch  peekcp
case codepoint abnuowrm
//passing the statementcallbackinterface implementation will
//help in retrieving the the unitofworklistener that needs to
//be rolled back
netsqlca sqlca   parseabnormalenduow statement
statement completesqlca sqlca
break
case codepoint cmdchkrm
parsecmdchkrm
break
case codepoint dtamchrm
parsedtamchrm
break
case codepoint objnsprm
parseobjnsprm
break
case codepoint rdbnacrm
parserdbnacrm
break
case codepoint sqlerrrm
netsqlca sqlca   parsesqlerrorcondition
statement completesqlca sqlca
break
default
parsecommonerror peekcp
void parseexecuteimmediateerror statementcallbackinterface statement  throws disconnectexception
int peekcp   peekcodepoint
switch  peekcp
case codepoint abnuowrm
//passing the statementcallbackinterface implementation will
//help in retrieving the the unitofworklistener that needs to
//be rolled back
netsqlca sqlca   parseabnormalenduow statement
statement completesqlca sqlca
break
case codepoint cmdchkrm
parsecmdchkrm
break
case codepoint dtamchrm
parsedtamchrm
break
case codepoint objnsprm
parseobjnsprm
break
case codepoint rdbnacrm
parserdbnacrm
break
case codepoint sqlerrrm
netsqlca sqlca   parsesqlerrorcondition
statement completesqlca sqlca
break
default
parsecommonerror peekcp
break
void parsedescribeerror statementcallbackinterface statement  throws disconnectexception
int peekcp   peekcodepoint
switch  peekcp
case codepoint abnuowrm
//passing the statementcallbackinterface implementation will
//help in retrieving the the unitofworklistener that needs to
//be rolled back
netsqlca sqlca   parseabnormalenduow statement
statement completesqlca sqlca
break
case codepoint cmdchkrm
parsecmdchkrm
break
case codepoint rdbnacrm
parserdbnacrm
break
case codepoint sqlerrrm
netsqlca sqlca   parsesqlerrorcondition
statement completesqlca sqlca
break
default
parsecommonerror peekcp
void parseopenqueryerror statementcallbackinterface statementi  throws disconnectexception
int peekcp   peekcodepoint
switch  peekcp
case codepoint abnuowrm
//passing the statementcallbackinterface implementation will
//help in retrieving the the unitofworklistener that needs to
//be rolled back
netsqlca sqlca   parseabnormalenduow statementi
statementi completesqlca sqlca
break
case codepoint cmdchkrm
parsecmdchkrm
break
case codepoint dtamchrm
parsedtamchrm
break
case codepoint objnsprm
parseobjnsprm
break
case codepoint qrypoprm
parseqrypoprm
break
case codepoint rdbnacrm
parserdbnacrm
break
default
parsecommonerror peekcp
void parseexecuteerror statementcallbackinterface statementi  throws disconnectexception
int peekcp   peekcodepoint
switch  peekcp
case codepoint abnuowrm
//passing the statementcallbackinterface implementation will
//help in retrieving the the unitofworklistener that needs to
//be rolled back
netsqlca sqlca   parseabnormalenduow statementi
statementi completesqlca sqlca
break
case codepoint cmdchkrm
parsecmdchkrm
break
case codepoint dtamchrm
parsedtamchrm
break
case codepoint objnsprm
parseobjnsprm
break
case codepoint rdbnacrm
parserdbnacrm
break
case codepoint sqlerrrm
netsqlca sqlca   parsesqlerrorcondition
statementi completesqlca sqlca
break
default
parsecommonerror peekcp
break
void parseexecutesetstatementerror statementcallbackinterface statement  throws disconnectexception
int peekcp   peekcodepoint
switch  peekcp
case codepoint abnuowrm
//passing the statementcallbackinterface implementation will
//help in retrieving the the unitofworklistener that needs to
//be rolled back
netsqlca sqlca   parseabnormalenduow statement
statement completesqlca sqlca
break
case codepoint cmdchkrm
parsecmdchkrm
break
case codepoint dtamchrm
parsedtamchrm
break
case codepoint objnsprm
parseobjnsprm
break
case codepoint rdbnacrm
parserdbnacrm
break
case codepoint sqlerrrm
netsqlca sqlca   parsesqlerrorcondition
statement completesqlca sqlca
break
default
parsecommonerror peekcp
break
//-----------------------------parse ddm reply messages-----------------------
/**
* open query complete reply message indicates to the requester
* that an opnqry or excsqlstt command completed normally and that
* the query process has been initiated.  it also indicates the
* type of query protocol and cursor used for the query.
* <p>
* when an excsqlstt contains an sql statement that invokes a
* stored procedure, and the procedure completes, an opnqryrm is
* returned for each answer set.
*
* @param statementi statement callback interface
* @param isopnqryreply if true, parse a reply to an opnqry
* command. otherwise, parse a reply to an excsqlstt command.
* @return a <code>netresultset</code> value
* @exception disconnectexception
*/
protected netresultset parseopnqryrm statementcallbackinterface statementi
boolean isopnqryreply
throws disconnectexception
// these need to be initialized to the correct default values.
int svrcod   codepoint svrcod_info
boolean svrcodreceived   false
int qryprctyp   0
boolean qryprctypreceived   false
int sqlcsrhld   0xf0        0xf0 is false  default   0xf1 is true
boolean sqlcsrhldreceived   false
int qryattscr   0xf0       0xf0 is false  default   0xf1 is true
boolean qryattscrreceived   false
int qryattsns   codepoint qryunk
boolean qryattsnsreceived   false
int qryattupd   codepoint qryunk
boolean qryattupdreceived   false
long qryinsid   0
boolean qryinsidreceived   false
int qryattset   0xf0        0xf0 is false  default   0xf1 is true
boolean qryattsetreceived   false
parselengthandmatchcodepoint codepoint opnqryrm
//pushlengthoncollectionstack();
int ddmlength   getddmlength
ensureblayerdatainbuffer ddmlength
int peekcp   peekcodepoint
int length   0
//while (peekcp != reply.end_of_collection) {
while  ddmlength > 0
boolean foundinpass   false
if  peekcp    codepoint svrcod
foundinpass   true
svrcodreceived   checkandgetreceivedflag svrcodreceived
length   peekedlength_
svrcod   parsefastsvrcod codepoint svrcod_info  codepoint svrcod_sesdmg
ddmlength   adjustddmlength ddmlength  length
peekcp   peekcodepoint
if  peekcp    codepoint qryprctyp
foundinpass   true
qryprctypreceived   checkandgetreceivedflag qryprctypreceived
length   peekedlength_
qryprctyp   parsefastqryprctyp
ddmlength   adjustddmlength ddmlength  length
peekcp   peekcodepoint
if  peekcp    codepoint sqlcsrhld
// indicates whether the requester specified the hold option.
// when specified, the cursor is not closed upon execution of a commit operation.
foundinpass   true
sqlcsrhldreceived   checkandgetreceivedflag sqlcsrhldreceived
length   peekedlength_
sqlcsrhld   parsefastsqlcsrhld
ddmlength   adjustddmlength ddmlength  length
peekcp   peekcodepoint
if  peekcp    codepoint qryattscr
foundinpass   true
qryattscrreceived   checkandgetreceivedflag qryattscrreceived
length   peekedlength_
qryattscr   parsefastqryattscr
ddmlength   adjustddmlength ddmlength  length
peekcp   peekcodepoint
if  peekcp    codepoint qryattsns
foundinpass   true
qryattsnsreceived   checkandgetreceivedflag qryattsnsreceived
length   peekedlength_
qryattsns   parsefastqryattsns
ddmlength   adjustddmlength ddmlength  length
peekcp   peekcodepoint
if  peekcp    codepoint qryattupd
foundinpass   true
qryattupdreceived   checkandgetreceivedflag qryattupdreceived
length   peekedlength_
qryattupd   parsefastqryattupd
ddmlength   adjustddmlength ddmlength  length
peekcp   peekcodepoint
if  peekcp    codepoint qryinsid
foundinpass   true
qryinsidreceived   checkandgetreceivedflag qryinsidreceived
length   peekedlength_
qryinsid   parsefastqryinsid
ddmlength   adjustddmlength ddmlength  length
peekcp   peekcodepoint
if  peekcp    codepoint qryattset
foundinpass   true
qryattsetreceived   checkandgetreceivedflag qryattsetreceived
length   peekedlength_
qryattset   parsefastqryattset
ddmlength   adjustddmlength ddmlength  length
peekcp   peekcodepoint
if   foundinpass
doprmnsprmsemantics peekcp
checkrequiredobjects svrcodreceived  qryprctypreceived  qryinsidreceived
netagent_ setsvrcod svrcod
// hack for now until event methods are used below
statement statement    statement  statementi
// if there is a cached cursor object, then use the cached cursor object.
netresultset rs   null
if  statement cachedcursor_    null
statement cachedcursor_ resetdatabuffer
netcursor  statement cachedcursor_  extdtadata_ clear
try
rs    netresultset clientdriver getfactory   newnetresultset
netagent_
netstatement  statement materialstatement_
statement cachedcursor_
qryprctyp    protocoltype  codepoint fixrowprc
//              codepoint.lmtblkprc
sqlcsrhld    holdoption  0xf0 for false  default    0xf1 for true
qryattscr    scrolloption  0xf0 for false  default    0xf1 for true
qryattsns    sensitivity  codepoint qryunk
//             codepoint.qryins |
//             codepoint.qrysnsstc
qryattset
qryinsid    instanceidentifier  0  if not returned  check default  or number
calculateresultsettype qryattscr  qryattsns  statement resultsettype_
calculateresultsetconcurrency qryattupd  statement resultsetconcurrency_
calculateresultsetholdability sqlcsrhld
catch sqlexception sqle
throw new disconnectexception netagent_ sqle
else
try
rs    netresultset clientdriver getfactory   newnetresultset
netagent_
netstatement  statement materialstatement_
new netcursor netagent_  qryprctyp
qryprctyp    protocoltype  codepoint fixrowprc
//              codepoint.lmtblkprc
sqlcsrhld    holdoption  0xf0 for false  default    0xf1 for true
qryattscr    scrolloption  0xf0 for false  default    0xf1 for true
qryattsns    sensitivity  codepoint qryunk   codepoint qryins
qryattset
qryinsid    instanceidentifier  0  if not returned  check default  or number
calculateresultsettype qryattscr  qryattsns  statement resultsettype_
calculateresultsetconcurrency qryattupd  statement resultsetconcurrency_
calculateresultsetholdability sqlcsrhld
catch sqlexception sqle
throw new disconnectexception netagent_ sqle
// qryclsimp only applies to opnqry, not excsqlstt
final boolean qryclsimp
isopnqryreply
rs resultsettype_    java sql resultset type_forward_only
netagent_ netconnection_ serversupportsqryclsimp
rs netcursor_ setqryclsimpenabled qryclsimp
return rs
// also called by netresultsetreply subclass.
// the end of query reply message indicates that the query process has
// terminated in such a manner that the query or result set is now closed.
// it cannot be resumed with the cntqry command or closed with the clsqry command.
// the endqryrm is always followed by an sqlcard.
protected void parseendqryrm resultsetcallbackinterface resultseti  throws disconnectexception
boolean svrcodreceived   false
int svrcod   codepoint svrcod_info
boolean rdbnamreceived   false
string rdbnam   null
parselengthandmatchcodepoint codepoint endqryrm
pushlengthoncollectionstack
int peekcp   peekcodepoint
while  peekcp    reply end_of_collection
boolean foundinpass   false
if  peekcp    codepoint svrcod
foundinpass   true
svrcodreceived   checkandgetreceivedflag svrcodreceived
svrcod   parsesvrcod codepoint svrcod_warning  codepoint svrcod_error
peekcp   peekcodepoint
if  peekcp    codepoint rdbnam
foundinpass   true
rdbnamreceived   checkandgetreceivedflag rdbnamreceived
rdbnam   parserdbnam true
peekcp   peekcodepoint
if   foundinpass
doprmnsprmsemantics peekcp
popcollectionstack
checkrequiredobjects svrcodreceived
netagent_ setsvrcod svrcod
// query previously opened reply message is issued when an
// opnqry command is issued for a query that is already open.
// a previous opnqry command might have opened the query
// which may not be closed.
// protocol architects an sqlstate of 58008 or 58009.
//
// messages
// sqlstate : 58009
//     execution failed due to a distribution protocol error that caused deallocation of the conversation.
//     sqlcode : -30020
//     execution failed because of a distributed protocol
//         error that will affect the successful execution of subsequent
//         commands and sql statements: reason code <reason-code>.
//      some possible reason codes include:
//      121c indicates that the user is not authorized to perform the requested command.
//      1232 the command could not be completed because of a permanent error.
//          in most cases, the server will be in the process of an abend.
//      220a the target server has received an invalid data description.
//          if a user sqlda is specified, ensure that the fields are
//          initialized correctly. also, ensure that the length does not
//          exceed the maximum allowed length for the data type being used.
//
//      the command or statement cannot be processed.  the current
//      transaction is rolled back and the application is disconnected
//      from the remote database.
//
//
// returned from server:
// svrcod - required  (8 - error)
// rdbnam - required
// pkgnamcsn - required
// srvdgn - optional
//
private void parseqrypoprm   throws disconnectexception
boolean svrcodreceived   false
int svrcod   codepoint svrcod_info
boolean rdbnamreceived   false
string rdbnam   null
boolean pkgnamcsnreceived   false
object pkgnamcsn   null
parselengthandmatchcodepoint codepoint qrypoprm
pushlengthoncollectionstack
int peekcp   peekcodepoint
while  peekcp    reply end_of_collection
boolean foundinpass   false
if  peekcp    codepoint svrcod
foundinpass   true
svrcodreceived   checkandgetreceivedflag svrcodreceived
svrcod   parsesvrcod codepoint svrcod_error  codepoint svrcod_error
peekcp   peekcodepoint
if  peekcp    codepoint rdbnam
foundinpass   true
rdbnamreceived   checkandgetreceivedflag rdbnamreceived
rdbnam   parserdbnam true
peekcp   peekcodepoint
if  peekcp    codepoint pkgnamcsn
foundinpass   true
pkgnamcsnreceived   checkandgetreceivedflag pkgnamcsnreceived
pkgnamcsn   parsepkgnamcsn true
peekcp   peekcodepoint
if   foundinpass
doprmnsprmsemantics peekcp
popcollectionstack
checkrequiredobjects svrcodreceived
rdbnamreceived
pkgnamcsnreceived
netagent_ setsvrcod svrcod
agent_ accumulatechainbreakingreadexceptionandthrow new disconnectexception agent_
new clientmessageid sqlstate drda_connection_terminated
messageutil getcompletemessage messageid conn_drda_qryopen
sqlexception client_message_resource_name
object  null
// open query failure (opnqflrm) reply message indicates that the
// opnqry command failed to open the query.  the reason that the
// target relational database was unable to open the query is reported in an
// sqlcard reply data object.
// whenever an opnqflrm is returned, an sqlcard object must also be returned
// following the opnqflrm.
//
// returned from server:
//   svrcod - required (8 - error)
//   rdbnam - required
//   srvdgn - optional
private void parseopnqflrm statementcallbackinterface statement  throws disconnectexception
boolean svrcodreceived   false
int svrcod   codepoint svrcod_info
boolean rdbnamreceived   false
string rdbnam   null
parselengthandmatchcodepoint codepoint opnqflrm
pushlengthoncollectionstack
int peekcp   peekcodepoint
while  peekcp    reply end_of_collection
boolean foundinpass   false
if  peekcp    codepoint svrcod
foundinpass   true
svrcodreceived   checkandgetreceivedflag svrcodreceived
svrcod   parsesvrcod codepoint svrcod_error  codepoint svrcod_error
peekcp   peekcodepoint
if  peekcp    codepoint rdbnam
// skip the rdbnam since it doesn't tell us anything new.
// there is no way to return it to the application anyway.
// not having to convert this to a string is a time saver also.
foundinpass   true
rdbnamreceived   checkandgetreceivedflag rdbnamreceived
rdbnam   parserdbnam true
peekcp   peekcodepoint
if   foundinpass
doprmnsprmsemantics peekcp
popcollectionstack
checkrequiredobjects svrcodreceived  rdbnamreceived
netagent_ setsvrcod svrcod
// get sqlstate from sqlcard...
// rdb result set reply message (rslsetrm) indicates that an
// excsqlstt command invoked a stored procedure, that the execution
// of the stored procedure generated one or more result sets, and
// additional information aobut these result sets follows the sqlcard and
// sqldtard in the reply data of the response
//
// returned from server:
//   svrcod - required  (0 info)
//   pkgsnlst - required
//   srvdgn - optional
protected java util arraylist parserslsetrm   throws disconnectexception
boolean svrcodreceived   false
int svrcod   codepoint svrcod_info
boolean pkgsnlstreceived   false
java util arraylist pkgsnlst   null
parselengthandmatchcodepoint codepoint rslsetrm
pushlengthoncollectionstack
int peekcp   peekcodepoint
while  peekcp    reply end_of_collection
boolean foundinpass   false
if  peekcp    codepoint svrcod
foundinpass   true
svrcodreceived   checkandgetreceivedflag svrcodreceived
svrcod   parsesvrcod codepoint svrcod_info  codepoint svrcod_info
peekcp   peekcodepoint
if  peekcp    codepoint pkgsnlst
// contain repeatable pkgnamcsn
foundinpass   true
pkgsnlstreceived   checkandgetreceivedflag pkgsnlstreceived
pkgsnlst   parsepkgsnlst
peekcp   peekcodepoint
if   foundinpass
doprmnsprmsemantics peekcp
popcollectionstack
checkrequiredobjects svrcodreceived  pkgsnlstreceived
netagent_ setsvrcod svrcod
return pkgsnlst
//--------------------- parse ddm reply data--------------------------------------
// sql data reply data consists of output data from the relational database (rdb)
// processing of an sql statement.  it also includes a description of the data.
//
// returned from server:
//   fdodsc - required
//   fdodta - required
protected netsqlca parsesqldtard netsqldta netsqldta  throws disconnectexception
boolean fdodscreceived   false
boolean fdodtareceived   false
parselengthandmatchcodepoint codepoint sqldtard
pushlengthoncollectionstack
netsqlca netsqlca   null
int peekcp   peekcodepoint
while  peekcp    reply end_of_collection
boolean foundinpass   false
if  peekcp    codepoint fdodsc
foundinpass   true
fdodscreceived   checkandgetreceivedflag fdodscreceived
parsefdodsc netsqldta
peekcp   peekcodepoint
if  peekcp    codepoint fdodta
foundinpass   true
fdodtareceived   checkandgetreceivedflag fdodtareceived
netsqlca   parsefdodta netsqldta
peekcp   peekcodepoint
if   foundinpass
doprmnsprmsemantics peekcp
popcollectionstack
checkrequiredobjects fdodscreceived  fdodtareceived
netsqldta calculatecolumnoffsetsforrow
return netsqlca
protected void parseqrydsc netcursor cursor  throws disconnectexception
parselengthandmatchcodepoint codepoint qrydsc
parsesqldtardarray cursor  false      false means don't just skip the bytes
private void parsefdodsc netcursor cursor  throws disconnectexception
parselengthandmatchcodepoint codepoint fdodsc
parsesqldtardarray cursor  false      false means don't just skip the bytes
private void parsesqldtardarray netcursor cursor  boolean skipbytes  throws disconnectexception
if  skipbytes
skipbytes
int previoustriplettype   fdocaconstants sqldtard_triplet_type_start
int previoustripletid   fdocaconstants sqldtard_triplet_id_start
int mddprotocoltype   0
int columncount   0
netagent_ targettypdef_ clearmddoverrides
int ddmlength   getddmlength
ensureblayerdatainbuffer ddmlength
while  ddmlength > 0
int tripletlength   readfastunsignedbyte
int triplettype   readfastunsignedbyte
int tripletid   readfastunsignedbyte
switch  triplettype
case fdocaconstants mdd_triplet_type
if   tripletlength    fdocaconstants mdd_triplet_size
tripletid    fdocaconstants null_lid
descriptorerrordetected
checkprevioussqldtardtriplet previoustriplettype
fdocaconstants sqldtard_triplet_type_mdd
previoustripletid
fdocaconstants sqldtard_triplet_id_0
previoustriplettype   fdocaconstants sqldtard_triplet_type_mdd
previoustripletid   fdocaconstants sqldtard_triplet_id_0
// read in remaining mdd bytes
int mddclass   readfastunsignedbyte
int mddtype   readfastunsignedbyte
int mddreftype   readfastunsignedbyte
mddprotocoltype   readfastunsignedbyte
break
case fdocaconstants ngda_triplet_type     rename to ngda_triplet_codepoint
if  tripletid    fdocaconstants sqldtagrp_lid
descriptorerrordetected
checkprevioussqldtardtriplet previoustriplettype
fdocaconstants sqldtard_triplet_type_gda
previoustripletid
fdocaconstants sqldtard_triplet_id_d0
previoustriplettype   fdocaconstants sqldtard_triplet_type_gda
previoustripletid   fdocaconstants sqldtard_triplet_id_0
// add a quick check to see if the table is altered (columns are added or deleted)
// before reusing the cached cursor.  note: this check does not catch the case
// where the number of columns stay the same, but the column type or length changes,
// i.e. from integer to char.
int columns   peektotalcolumncount tripletlength
// peek ahead to get the total number of columns.
cursor initializecolumninfoarrays netagent_ targettypdef_  columns  netagent_ targetsqlam_
columncount    parsesqldtagrpdatalabelsandupdatecolumn cursor  columncount  tripletlength
break
case fdocaconstants rlo_triplet_type      rename to rlo_triplet_codepoint
switch  tripletid
case fdocaconstants sqlcadta_lid
if  tripletlength    fdocaconstants sqlcadta_rlo_size
descriptorerrordetected       dscerrcd_06
checkprevioussqldtardtriplet previoustriplettype
fdocaconstants sqldtard_triplet_type_rlo
previoustripletid
fdocaconstants sqldtard_triplet_id_e0
previoustriplettype   fdocaconstants sqldtard_triplet_type_rlo
previoustripletid   fdocaconstants sqldtard_triplet_id_e0
checkfastrlo fdocaconstants rlo_sqlcadta
break
case fdocaconstants sqldtard_lid
if  tripletlength    fdocaconstants sqldtard_rlo_size
descriptorerrordetected       dscerrcd_06
checkprevioussqldtardtriplet previoustriplettype
fdocaconstants sqldtard_triplet_type_rlo
previoustripletid
fdocaconstants sqldtard_triplet_id_f0
previoustriplettype   fdocaconstants sqldtard_triplet_type_rlo
previoustripletid   fdocaconstants sqldtard_triplet_id_f0
checkfastrlo fdocaconstants rlo_sqldtard
break
default
descriptorerrordetected       dscerrcd_07
break
break
case fdocaconstants cpt_triplet_type      rename to cpt_triplet_codepoint
if  tripletid    fdocaconstants null_lid
descriptorerrordetected
checkprevioussqldtardtriplet previoustriplettype
fdocaconstants sqldtard_triplet_type_cpt
previoustripletid
fdocaconstants sqldtard_triplet_id_0
previoustriplettype   fdocaconstants sqldtard_triplet_type_cpt
previoustripletid   fdocaconstants sqldtard_triplet_id_0
columncount    parsesqldtagrpdatalabelsandupdatecolumn cursor  columncount  tripletlength
break
case fdocaconstants sda_triplet_type      rename to sda_triplet_codepoint
if  tripletlength    fdocaconstants sda_triplet_size
descriptorerrordetected        dscerrcd_06
checkprevioussqldtardtriplet previoustriplettype
fdocaconstants sqldtard_triplet_type_sda
previoustripletid
fdocaconstants sqldtard_triplet_id_sda
previoustriplettype   fdocaconstants sqldtard_triplet_type_sda
previoustripletid   fdocaconstants sqldtard_triplet_id_sda
netagent_ targettypdef_ setmddoverride mddprotocoltype     mdd protocol type
tripletid     fdocatripletlid
readfastunsignedbyte       fdocafieldtype
readfastint       ccsid
readfastunsignedbyte       charactersize
readfastunsignedbyte       mode
readfastshort
break
default
descriptorerrordetected       dscerrcd_01
break
ddmlength    tripletlength
adjustlengths getddmlength
// allocate a char buffer after all of the descriptors have been parsed out.
cursor allocatecharbuffer
checkprevioussqldtardtriplet previoustriplettype
fdocaconstants sqldtard_triplet_type_end
previoustripletid
fdocaconstants sqldtard_triplet_id_end
private void checkprevioussqldtardtriplet int previoustriplettype
int triplettype
int previoustripletid
int tripletid  throws disconnectexception
if  fdocaconstants sqldtard_triplet_types    false
descriptorerrordetected       dscerrcd_02 move error identity into array
if  fdocaconstants sqldtard_triplet_ids    false
descriptorerrordetected       dscerrcd_02 move error identity into array
private void checkfastrlo int rlo  throws disconnectexception
for  int i   0  i < rlo length  i
int lid   readfastunsignedbyte
if  lid    rlo
descriptorerrordetected       dscerrcd_42
int elementtaken   readfastunsignedbyte
if  elementtaken    rlo
descriptorerrordetected        dscerrcd_07
int repfactor   readfastunsignedbyte
if  repfactor    rlo
descriptorerrordetected        dscerrcd_07
// possible errors to detect include:
// dscerrcd_01 - fdoca triplet is not used in protocol descriptors or type code is invalid
// dscerrcd_02 - fdoca triplet sequence error
// dscerrcd_03 - an array description is required and this is not one
//               (too many or too few rlo triplets)
// dscerrcd_04 - a row description is required and this is not one
//               (too many or too few rlo triplets)
// dscerrcd_05 - late environmental descriptor just received not supported
// dscerrcd_06 - malformed triplet, required parameter is missing
// dscerrcd_07 - parameter value is not acceptable
// dscerrcd_11 - mdd present is not recognized as an sql descriptor
// dscerrcd_12 - mdd class is not recognized as a valid sql class
// dscerrcd_13 - mdd type not recognized as a valid sql type
// dscerrcd_21 - representation is incompatible with sql type (in prior mdd)
// dscerrcd_22 - ccsid is not supported
// dscerrcd_32 - gda references a local identifier which is not an sda or gda
// dscerrcd_33 - gda length override exceeds limits
// dscerrcd_34 - gda precision exceeds limits
// dscerrcd_35 - gda scale greater than precision or scale negative
// dscerrcd_36 - gda length override missing or incompatible with data type
// dscerrcd_41 - rlo references a lid which is not an rlo or gda.
// dscerrcd_42 - rlo fails to reference a required gda or rlo.
private void descriptorerrordetected   throws disconnectexception
agent_ accumulatechainbreakingreadexceptionandthrow new disconnectexception agent_
new clientmessageid sqlstate drda_connection_terminated
messageutil getcompletemessage messageid conn_drda_invalidfdoca
sqlexception client_message_resource_name
object  null
protected void parseqrydta netresultset netresultset  throws disconnectexception
parselengthandmatchcodepoint codepoint qrydta
if  longvaluefordecryption_    null
int ddmlength   getddmlength
ensureblayerdatainbuffer ddmlength
parsesqldtarddata netresultset netcursor_
if  longvaluefordecryption_    null
adjustlengths getddmlength
else
longvaluefordecryption_   null
if  longbufferfordecryption_    null
buffer_   longbufferfordecryption_
pos_   longposfordecryption_
if  count_ > longbufferfordecryption_ length
count_   longbufferfordecryption_ length
else if  longcountfordecryption_    0
count_   longcountfordecryption_
longcountfordecryption_   0
dsslength_   0
longbufferfordecryption_   null
netsqlca parsefdodta netcursor netcursor  throws disconnectexception
parselengthandmatchcodepoint codepoint fdodta
int ddmlength   getddmlength
ensureblayerdatainbuffer ddmlength
mark
netsqlca netsqlca   parsesqlcardrow null
int length   getfastskipsqlcardrowlength
adjustlengths length
parsefastsqldtarddata netcursor
return netsqlca
void parsefastsqldtarddata netcursor netcursor  throws disconnectexception
netcursor databufferstream_   getfastdata netcursor databufferstream_
netcursor databuffer_   netcursor databufferstream_ tobytearray
netcursor lastvalidbyteposition_   netcursor databuffer_ length
void parsesqldtarddata netcursor netcursor  throws disconnectexception
if  longvaluefordecryption_    null
netcursor databufferstream_   getdata netcursor databufferstream_
netcursor databuffer_   netcursor databufferstream_ tobytearray
else
int size   netcursor databufferstream_ size
if  size    0
netcursor databuffer_   longvaluefordecryption_
//longvalue_ = null;
else
byte newarray   new byte
system arraycopy netcursor databuffer_  0  newarray  0  size
system arraycopy longvaluefordecryption_  0  newarray  size  longvaluefordecryption_ length
netcursor databuffer_   newarray
//longvalue_ = null;
netcursor lastvalidbyteposition_   netcursor databuffer_ length
protected void copyextdta netcursor netcursor  throws disconnectexception
try
parselengthandmatchcodepoint codepoint extdta
byte data   null
if  longvaluefordecryption_    null
data    getdata null   tobytearray
else
data   longvaluefordecryption_
dsslength_   0
longvaluefordecryption_   null
netcursor extdtadata_ add data
catch  java lang outofmemoryerror e
agent_ accumulatechainbreakingreadexceptionandthrow new disconnectexception agent_
new clientmessageid sqlstate net_lob_data_too_large_for_jvm   null  e
//------------------------parse ddm scalars-----------------------------
// rdb package name, consistency token, and section number
// specifies the fully qualified name of a relational
// database package, its consistency token, and a specific
// section within a package.
//
// only called for generated secctions from a callable statement.
//
protected object parsepkgnamcsn boolean skip  throws disconnectexception
parselengthandmatchcodepoint codepoint pkgnamcsn
if  skip
skipbytes
return null
// still need to populate the logical members in case of an "set current packageset"
string rdbnam   null
string rdbcolid   null
string pkgid   null
byte pkgcnstkn   null
int pkgsn   0
byte pkgnamcsnbytes   null
int pkgnamcsnlength   0
int ddmlength   getddmlength
int offset   0
ensureblayerdatainbuffer ddmlength
if  ddmlength    64
// read all the bytes except the section number into the byte[] for caching
pkgnamcsnlength   ddmlength   2
//pkgnamcsnbytes = readbytes (pkgnamcsnlength);
pkgnamcsnbytes   new byte
// readfast() does a read without moving the read head.
offset   peekfastbytes pkgnamcsnbytes  offset  pkgnamcsnlength
// populate the logical members
rdbnam   readfaststring 18        rdb name
rdbcolid   readfaststring 18      rdb collection id
pkgid   readfaststring 18         rdb package id
pkgcnstkn   readfastbytes 8       package consistency token
else if   ddmlength >  71      ddmlength <  781
// this is the new scldta format.
// new up a byte[] to cache all the bytes except the 2-byte section number
pkgnamcsnbytes   new byte
// get rdbnam
int scldtalen   peekfastlength
if  scldtalen < 18    scldtalen > 255
agent_ accumulatechainbreakingreadexceptionandthrow
new disconnectexception agent_
new clientmessageid
sqlstate net_sqlcdta_invalid_for_rdbnam
new integer scldtalen
return null
// read 2+scldtalen number of bytes from the reply buffer into the pkgnamcsnbytes
//offset = readbytes (pkgnamcsnbytes, offset, 2+scldtalen);
offset   peekfastbytes pkgnamcsnbytes  offset  2   scldtalen
skipfastbytes 2
rdbnam   readfaststring scldtalen
// get rdbcolid
scldtalen   peekfastlength
if  scldtalen < 18    scldtalen > 255
agent_ accumulatechainbreakingreadexceptionandthrow new disconnectexception agent_
new clientmessageid sqlstate net_sqlcdta_invalid_for_rdbcolid
new integer scldtalen
return null
// read 2+scldtalen number of bytes from the reply buffer into the pkgnamcsnbytes
offset   peekfastbytes pkgnamcsnbytes  offset  2   scldtalen
skipfastbytes 2
rdbcolid   readfaststring scldtalen
// get pkgid
scldtalen   peekfastlength
if  scldtalen < 18    scldtalen > 255
agent_ accumulatechainbreakingreadexceptionandthrow new disconnectexception agent_
new clientmessageid sqlstate net_sqlcdta_invalid_for_pkgid
new integer scldtalen
return null     to make compiler happy
// read 2+scldtalen number of bytes from the reply buffer into the pkgnamcsnbytes
offset   peekfastbytes pkgnamcsnbytes  offset  2   scldtalen
skipfastbytes 2
pkgid   readfaststring scldtalen
// get consistency token
offset   peekfastbytes pkgnamcsnbytes  offset  8
pkgcnstkn   readfastbytes 8
else
agent_ accumulatechainbreakingreadexceptionandthrow new disconnectexception agent_
new clientmessageid sqlstate net_pgnamcsn_invalid_at_sqlam
new integer ddmlength   new integer netagent_ targetsqlam_
return null      to make compiler happy
pkgsn   readfastunsignedshort        package section number
adjustlengths ddmlength
// this is a server generated section
// the -1 is set for holdability and it is not used for generated sections
section section   new section this agent_  pkgid  pkgsn  null   1  true
section setpkgnamcbytes pkgnamcsnbytes
return section
// query protocol type specifies the type of query protocol
// the target sqlam uses.
protected int parseqryprctyp   throws disconnectexception
parselengthandmatchcodepoint codepoint qryprctyp
int qryprctyp   parsecodpntdr
if   qryprctyp    codepoint fixrowprc      qryprctyp    codepoint lmtblkprc
dovalnsprmsemantics codepoint qryprctyp  qryprctyp
return qryprctyp
protected int parsefastqryprctyp   throws disconnectexception
matchcodepoint codepoint qryprctyp
int qryprctyp   readfastunsignedshort
if   qryprctyp    codepoint fixrowprc      qryprctyp    codepoint lmtblkprc
dovalnsprmsemantics codepoint qryprctyp  qryprctyp
return qryprctyp
// hold cursor position state indicates whether the requester specified
// the hold option on the sql declare cursor statement.  when the hold
// option is specified, the cursor is not closed upon execution of a
// commit operation.
// the value true indicates that the requester specifies the hold
// operation.  the value falsse indicates that the requeter is not
// specifying the hold option.
protected int parsesqlcsrhld   throws disconnectexception
parselengthandmatchcodepoint codepoint sqlcsrhld
int sqlcsrhld   readunsignedbyte
// 0xf0 is false (default), 0xf1 is true  // use constants in if
if   sqlcsrhld    0xf0      sqlcsrhld    0xf1
dovalnsprmsemantics codepoint sqlcsrhld  sqlcsrhld
return sqlcsrhld
protected int parsefastsqlcsrhld   throws disconnectexception
matchcodepoint codepoint sqlcsrhld
int sqlcsrhld   readfastunsignedbyte
// 0xf0 is false (default), 0xf1 is true  // use constants in if
if   sqlcsrhld    0xf0      sqlcsrhld    0xf1
dovalnsprmsemantics codepoint sqlcsrhld  sqlcsrhld
return sqlcsrhld
// query attribute for scrollability indicates whether
// a cursor is scrollable or non-scrollable
protected int parseqryattscr   throws disconnectexception
parselengthandmatchcodepoint codepoint qryattscr
int qryattscr   readunsignedbyte        use constants in if
if   qryattscr    0xf0      qryattscr    0xf1
dovalnsprmsemantics codepoint qryattscr  qryattscr
return qryattscr
protected int parsefastqryattscr   throws disconnectexception
matchcodepoint codepoint qryattscr
int qryattscr   readfastunsignedbyte        use constants in if
if   qryattscr    0xf0      qryattscr    0xf1
dovalnsprmsemantics codepoint qryattscr  qryattscr
return qryattscr
// enabled for rowset positioning.
protected int parseqryattset   throws disconnectexception
parselengthandmatchcodepoint codepoint qryattset
int qryattset   readunsignedbyte        use constants in if
if   qryattset    0xf0      qryattset    0xf1
dovalnsprmsemantics codepoint qryattset  qryattset
return qryattset
protected int parsefastqryattset   throws disconnectexception
matchcodepoint codepoint qryattset
int qryattset   readfastunsignedbyte        use constants in if
if   qryattset    0xf0      qryattset    0xf1
dovalnsprmsemantics codepoint qryattset  qryattset
return qryattset
// query attribute for sensitivity indicats the sensitivity
// of an opened cursor to changes made to the underlying
// base table.
protected int parseqryattsns   throws disconnectexception
parselengthandmatchcodepoint codepoint qryattsns
int qryattsns   readunsignedbyte
switch  qryattsns
case codepoint qryunk
case codepoint qryins
break
default
dovalnsprmsemantics codepoint qryattsns  qryattsns
break
return qryattsns
protected int parsefastqryattsns   throws disconnectexception
matchcodepoint codepoint qryattsns
int qryattsns   readfastunsignedbyte
switch  qryattsns
case codepoint qryunk
case codepoint qrysnsstc
case codepoint qryins
break
default
dovalnsprmsemantics codepoint qryattsns  qryattsns
break
return qryattsns
// query attribute for updatability indicates the updatability
// of an opened cursor.
protected int parseqryattupd   throws disconnectexception
parselengthandmatchcodepoint codepoint qryattupd
int qryattupd   readunsignedbyte
switch  qryattupd
case codepoint qryunk
case codepoint qryrdo
case codepoint qryupd
break
default
dovalnsprmsemantics codepoint qryattupd  qryattupd
break
return qryattupd
protected int parsefastqryattupd   throws disconnectexception
matchcodepoint codepoint qryattupd
int qryattupd   readfastunsignedbyte
switch  qryattupd
case codepoint qryunk
case codepoint qryrdo
case codepoint qryupd
break
default
dovalnsprmsemantics codepoint qryattupd  qryattupd
break
return qryattupd
private long parsefastqryinsid   throws disconnectexception
matchcodepoint codepoint qryinsid
return readfastlong
// rdb package namce, consistency token, and section number list
// specifies a list of fully qualified names of specific sections
// within one or more packages.
protected java util arraylist parsepkgsnlst   throws disconnectexception
object pkgnamcsn   null
java util arraylist pkgsnlst   new java util arraylist       what default size should we use
parselengthandmatchcodepoint codepoint pkgsnlst
pushlengthoncollectionstack
while  peekcodepoint      reply end_of_collection
pkgnamcsn   parsepkgnamcsn false
pkgsnlst add pkgnamcsn
popcollectionstack
return pkgsnlst
protected netsqlca parsesqldard columnmetadata columnmetadata
boolean skipbytes  throws disconnectexception
parselengthandmatchcodepoint codepoint sqldard
return parsesqldardarray columnmetadata  skipbytes
protected int parsesqlrslrd java util arraylist sectional  throws disconnectexception
parselengthandmatchcodepoint codepoint sqlrslrd
return parsesqlrslrdarray sectional
protected columnmetadata parsesqlcinrd   throws disconnectexception
parselengthandmatchcodepoint codepoint sqlcinrd
int ddmlength   getddmlength
ensureblayerdatainbuffer ddmlength
columnmetadata cm   parsesqlcinrdarray
adjustlengths getddmlength
return cm
//--------------------------parse fdoca objects------------------------
// sqldard : fdoca early array
// sql descriptor area row description with sql communications area
//
// format for sqlam <= 6
//   sqlcard; row lid 0x64; element taken 0(all); rep factor 1
//   sqlnumrow; row lid 0x68; element taken 0(all); rep factor 1
//   sqldarow; row lid 0x60; element taken 0(all); rep factor 0(all)
//
// format for sqlam >= 7
//   sqlcard; row lid 0x64; element taken 0(all); rep factor 1
//   sqldhrow; row lid 0xe0; element taken 0(all); rep factor 1
//   sqlnumrow; row lid 0x68; element taken 0(all); rep factor 1
//   sqldarow; row lid 0x60; element taken 0(all); rep factor 0(all)
netsqlca parsesqldardarray columnmetadata columnmetadata
boolean skipbytes  throws disconnectexception
int ddmlength   0
if   ensuredlengthfordecryption_    longvaluefordecryption_    null       if ensuredlength   true  means we already ensured length in decryptdata  so don't need to do it again
ddmlength   getddmlength
ensureblayerdatainbuffer ddmlength
if  longvaluefordecryption_    null
buffer_   longvaluefordecryption_
pos_   0
count_   longvaluefordecryption_ length
//dsslength_ = 0;
netsqlca netsqlca   null
if  skipbytes
mark
netsqlca   parsesqlcardrow null
skipfastbytes ddmlength   getfastskipsqlcardrowlength
adjustlengths getddmlength
return netsqlca
else
netsqlca   parsesqlcardrow null
parsesqldhrow columnmetadata
int columns   parsesqlnumrow
if  columns > columnmetadata columns_      this will only be true when columnmetadata columns_   0 under deferred prepare
// under deferred prepare the cmd arrays are not allocated until now, no guesses were made
columnmetadata initializecache columns
else    column count was guessed  don't bother reallocating arrays  just truncate their lengths
columnmetadata columns_   columns
// is this correct for 0 sqlnumrow
// does rest of code expect a null columnmetadata object
// or does rest of code expect an non null object
// with columns_ set to 0
for  int i   0  i < columnmetadata columns_  i
parsesqldarow columnmetadata  i
if  longvaluefordecryption_    null
adjustlengths getddmlength
else
dsslength_   0
longvaluefordecryption_   null
return netsqlca
// sqlrslrd : fdoca early array
// data array of a result set
//
// format for all sqlam levels
//   sqlnumrow; row lid 0x68; element taken 0(all); rep factor 1
//   sqlrsrow; row lid 0x6f; element taken 0(all); rep factor 0(all)
//
// sql result set reply data (sqlrslrd) is a byte string that specifies
// information about result sets returned as reply data in the response to
// an excsqlstt command that invokes a stored procedure
int parsesqlrslrdarray java util arraylist sectional  throws disconnectexception
int numofresultsets   parsesqlnumrow
for  int i   0  i < numofresultsets  i
parsesqlrsrow  section  sectional get i
return numofresultsets
// sqlcinrd : fdoca early array
// sql result set column array description
//
// format for sqlam <= 6
//   sqlnumrow; row lid 0x68; element taken 0(all); rep factor 1
//   sqlcirow; row lid 0x6b; element taken 0(all); rep factor 0(all)
//
// format for sqlam >= 7
//   sqldhrow; row lid 0xe0; element taken 0(all); rep factor 1
//   sqlnumrow; row lid 0x68; element taken 0(all); rep factor 1
//   sqldarow; row lid 0x60; element taken 0(all); rep factor 0(all)
//
// sql result set column information reply data (sqlcinrd) is a byte string
// that specifies information about columns for a result set returned as
// reply data in the response to an excsqlstt command that invodes a stored
// procedure
columnmetadata parsesqlcinrdarray   throws disconnectexception
columnmetadata columnmetadata   clientdriver getfactory   newcolumnmetadata netagent_ logwriter_
parsesqldhrow columnmetadata
// possibly change initializecache to not new up arrays if
// parsesqlnumrow returns 0
columnmetadata initializecache parsefastsqlnumrow
// is this correct for 0 sqlnumrow,
// does rest of code expect a null columnmetadata object
// or does rest of code expect an non null object
// with columns_ set to 0
for  int i   0  i < columnmetadata columns_  i
parsesqldarow columnmetadata  i
return columnmetadata
// sqldarow : fdoca early row
// sql data area row description
//
// format for all sqlam levels
//   sqldagrp; group lid 0x50; element taken 0(all); rep factor 1
private void parsesqldarow columnmetadata columnmetadata
int columnnumber  throws disconnectexception
parsesqldagrp columnmetadata  columnnumber
// sqldhrow : fdoca early row
// sql descriptor header row description
//
// format for sqlam >= 7
//   sqldhgrp;  group lid 0xd0; element taken 0(all); rep factor 1
private void parsesqldhrow columnmetadata columnmetadata  throws disconnectexception
parsesqldhgrp columnmetadata
// sqlrsrow : fdoca early row
// sql row description for one result set row
//
// format for all sqlam levels
//   sqlrsgrp; group lid 0x5f; element taken 0(all); rep factor 1
private void parsesqlrsrow section section  throws disconnectexception
parsesqlrsgrp section
// these methods are "private protected", which is not a recognized java privilege,
// but means that these methods are private to this class and to subclasses,
// and should not be used as package-wide friendly methods.
// sqldagrp : early fdoca group
// sql data area group description
//
// format for sqlam <= 6
//   sqlprecision; protocol type i2; envlid 0x04; length override 2
//   sqlscale; protocol type i2; envlid 0x04; length override 2
//   sqllength; protocol type i4; envlid 0x02; length override 4
//   sqltype; protocol type i2; envlid 0x04; length override 2
//   sqlccsid; protocol type fb; envlid 0x26; length override 2
//   sqlname_m; protocol type vcm; envlid 0x3e; length override 30
//   sqlname_s; protocol type vcs; envlid 0x32; length override 30
//   sqllabel_m; protocol type vcm; envlid 0x3e; length override 30
//   sqllabel_s; protocol type vcs; envlid 0x32; length override 30
//   sqlcomments_m; protocol type vcm; envlid 0x3e; length override 254
//   sqlcomments_m; protocol type vcs; envlid 0x32; length override 254
//
// format for sqlam == 6
//   sqlprecision; protocol type i2; envlid 0x04; length override 2
//   sqlscale; protocol type i2; envlid 0x04; length override 2
//   sqllength; protocol type i8; envlid 0x16; length override 8
//   sqltype; protocol type i2; envlid 0x04; length override 2
//   sqlccsid; protocol type fb; envlid 0x26; length override 2
//   sqlname_m; protocol type vcm; envlid 0x3e; length override 30
//   sqlname_s; protocol type vcs; envlid 0x32; length override 30
//   sqllabel_m; protocol type vcm; envlid 0x3e; length override 30
//   sqllabel_s; protocol type vcs; envlid 0x32; length override 30
//   sqlcomments_m; protocol type vcm; envlid 0x3e; length override 254
//   sqlcomments_m; protocol type vcs; envlid 0x32; length override 254
//   sqludtgrp; protocol type n-gda; envlid 0x51; length override 0
//
// format for sqlam >= 7
//   sqlprecision; protocol type i2; envlid 0x04; length override 2
//   sqlscale; protocol type i2; envlid 0x04; length override 2
//   sqllength; protocol type i8; envlid 0x16; length override 8
//   sqltype; protocol type i2; envlid 0x04; length override 2
//   sqlccsid; protocol type fb; envlid 0x26; length override 2
//   sqldoptgrp; protocol type n-gda; envlid 0xd2; length override 0
private void parsesqldagrp columnmetadata columnmetadata
int columnnumber  throws disconnectexception
long columnlength   0
// 2-byte precision
int precision   readfastshort
// 2-byte scale
int scale   readfastshort
// 8 byte sqllength
columnlength   readfastlong
// create a set method after sqltype and ccsid is read
// possibly have it set the nullable
int sqltype   readfastshort
// 2-byte sqlccsid
// (note: sqlccsid is always flown as big endian, not as data!)
// the c-common client also does the following:
// 1. determine which type of code page is to be used for this variable:
// 2. map the ccsid to the correct codepage:
// 3. "split" the ccsid to see whether it is for sbcs or mbcs:
int ccsid   readfastunsignedshort
columnmetadata sqlprecision_   precision
columnmetadata sqlscale_   scale
columnmetadata sqllength_   columnlength
columnmetadata sqltype_   sqltype
// set the nullables
columnmetadata nullable_   utils issqltypenullable sqltype
columnmetadata sqlccsid_   ccsid
columnmetadata types_
types mapderbytypetodrivertype true  sqltype  columnlength  ccsid      true means isdescribed
parsesqldoptgrp columnmetadata  columnnumber
// sqludtgrp : early fdoca group
// sql user-defined data group description
//
// format for sqlam >= 7
//   sqludtxtype; protocol type i4; envlid 0x02; length override 4
//   sqludtrdb; protocol type vcs; envlid 0x32; length override 255
//   sqludtschema_m; protocol type vcm; envlid 0x3e; length override 255
//   sqludtschema_s; protocol type vcs; envlid 0x32; length override 255
//   sqludtname_m; protocol type vcm; envlid 0x3e; length override 255
//   sqludtname_s; protocol type vcs; envlid 0x32; length override 255
private void parsesqludtgrp columnmetadata columnmetadata
int columnnumber  throws disconnectexception
if  readfastunsignedbyte      codepoint nulldata
return
// sqldoptgrp : early fdoca group
// sql descriptor optional group description
//
// format for sqlam >= 7
//   sqlunnamed; protocol type i2; envlid 0x04; length override 2
//   sqlname_m; protocol type vcm; envlid 0x3e; length override 255
//   sqlname_s; protocol type vcs; envlid 0x32; length override 255
//   sqllabel_m; protocol type vcm; envlid 0x3e; length override 255
//   sqllabel_s; protocol type vcs; envlid 0x32; length override 255
//   sqlcomments_m; protocol type vcm; envlid 0x3e; length override 255
//   sqlcomments_s; protocol type vcs; envlid 0x32; length override 255
//   sqludtgrp; protocol type n-gda; envlid 0x5b; length override 0
//   sqldxgrp; protocol type n-gda; envlid 0xd4; length override 0
private void parsesqldoptgrp columnmetadata columnmetadata
int columnnumber  throws disconnectexception
if  readfastunsignedbyte      codepoint nulldata
return
//   sqlunnamed; protocol type i2; envlid 0x04; length override 2
short sqlunnamed   readfastshort
//   sqlname_m; protocol type vcm; envlid 0x3e; length override 255
//   sqlname_s; protocol type vcs; envlid 0x32; length override 255
string name   parsefastvcmorvcs
//   sqllabel_m; protocol type vcm; envlid 0x3e; length override 255
//   sqllabel_s; protocol type vcs; envlid 0x32; length override 255
string label   parsefastvcmorvcs
//   sqlcomments_m; protocol type vcm; envlid 0x3e; length override 255
//   sqlcomments_s; protocol type vcs; envlid 0x32; length override 255
string colcomments   parsefastvcmorvcs
if  columnmetadata sqlname_    null
columnmetadata sqlname_   new string
if  columnmetadata sqllabel_    null
columnmetadata sqllabel_   new string
if  columnmetadata sqlunnamed_    null
columnmetadata sqlunnamed_   new short
if  columnmetadata sqlcomment_    null
columnmetadata sqlcomment_   new string
columnmetadata sqlname_   name
columnmetadata sqllabel_   label
columnmetadata sqlunnamed_   sqlunnamed
columnmetadata sqlcomment_   colcomments
// possibly move all the assignments into a single method on the columnmetadata object
parsesqludtgrp columnmetadata  columnnumber
parsesqldxgrp columnmetadata  columnnumber
// sqldxgrp : early fdoca group
// sql descriptor extended group description
//
// format for sqlam >=7
//   sqlxkeymem; protocol type i2; envlid 0x04; length override 2
//   sqlxupdateable; protocol type i2; envlid 0x04; length override 2
//   sqlxgenerated; protocol type i2; envlid 0x04; length override 2
//   sqlxparmmode; protocol type i2; envlid 0x04; length override 2
//   sqlxrdbnam; protocol type vcs; envlid 0x32; length override 255
//   sqlxcorname_m; protocol type vcm; envlid 0x3e; length override 255
//   sqlxcorname_s; protocol type vcs; envlid 0x32; length override 255
//   sqlxbasename_m; protocol type vcm; envlid 0x3e; length override 255
//   sqlxbasename_s; protocol type vcs; envlid 0x32; length override 255
//   sqlxschema_m; protocol type vcm; envlid 0x3e; length override 255
//   sqlxschema_s; protocol type vcs; envlid 0x32; length override 255
//   sqlxname_m; protocol type vcm; envlid 0x3e; length override 255
//   sqlxname_s; protocol type vcs; envlid 0x32; length override 255
private void parsesqldxgrp columnmetadata columnmetadata
int column  throws disconnectexception
if  readfastunsignedbyte      codepoint nulldata
return
//   sqlxkeymem; protocol type i2; envlid 0x04; length override 2
short sqlxkeymem   readfastshort
//   sqlxupdateable; protocol type i2; envlid 0x04; length override 2
short sqlxupdateable   readfastshort
//   sqlxgenerated; protocol type i2; envlid 0x04; length override 2
short sqlxgenerated   readfastshort
//   sqlxparmmode; protocol type i2; envlid 0x04; length override 2
short sqlxparmmode   readfastshort
//   sqlxrdbnam; protocol type vcs; envlid 0x32; length override 255
string sqlxrdbnam   parsefastvcs
//   sqlxcorname_m; protocol type vcm; envlid 0x3e; length override 255
//   sqlxcorname_s; protocol type vcs; envlid 0x32; length override 255
string sqlxcorname   parsefastvcmorvcs
//   sqlxbasename_m; protocol type vcm; envlid 0x3e; length override 255
//   sqlxbasename_s; protocol type vcs; envlid 0x32; length override 255
string sqlxbasename   parsefastvcmorvcs
//   sqlxschema_m; protocol type vcm; envlid 0x3e; length override 255
//   sqlxschema_s; protocol type vcs; envlid 0x32; length override 255
string sqlxschema   parsefastvcmorvcs
//   sqlxname_m; protocol type vcm; envlid 0x3e; length override 255
//   sqlxname_s; protocol type vcs; envlid 0x32; length override 255
string sqlxname   parsefastvcmorvcs
if  columnmetadata sqlxkeymem_    null
columnmetadata sqlxkeymem_   new short
if  columnmetadata sqlxgenerated_    null
columnmetadata sqlxgenerated_   new short
if  columnmetadata sqlxparmmode_    null
columnmetadata sqlxparmmode_   new short
if  columnmetadata sqlxcorname_    null
columnmetadata sqlxcorname_   new string
if  columnmetadata sqlxname_    null
columnmetadata sqlxname_   new string
if  columnmetadata sqlxbasename_    null
columnmetadata sqlxbasename_   new string
if  columnmetadata sqlxupdatable_    null
columnmetadata sqlxupdatable_   new int
if  columnmetadata sqlxschema_    null
columnmetadata sqlxschema_   new string
if  columnmetadata sqlxrdbnam_    null
columnmetadata sqlxrdbnam_   new string
columnmetadata sqlxkeymem_   sqlxkeymem
columnmetadata sqlxgenerated_   sqlxgenerated
columnmetadata sqlxparmmode_   sqlxparmmode
columnmetadata sqlxcorname_   sqlxcorname
columnmetadata sqlxname_   sqlxname
columnmetadata sqlxbasename_   sqlxbasename
columnmetadata sqlxupdatable_   sqlxupdateable
columnmetadata sqlxschema_    sqlxschema    null  ? columnmetadata sqldschema_   sqlxschema
columnmetadata sqlxrdbnam_    sqlxrdbnam    null  ? columnmetadata sqldrdbnam_   sqlxrdbnam
// sqldhgrp : early fdoca group
// sql descriptor header group description
//
// format for sqlam >= 7
//   sqldhold; protocol type i2; envlid 0x04; length override 2
//   sqldreturn; protocol type i2; envlid 0x04; length override 2
//   sqldscroll; protocol type i2; envlid 0x04; length override 2
//   sqldsensitive; protocol type i2; envlid 0x04; length override 2
//   sqldfcode; protocol type i2; envlid 0x04; length override 2
//   sqldkeytype; protocol type i2; envlid 0x04; length override 2
//   sqldrdbnam; protocol type vcs; envlid 0x32; length override 255
//   sqldschema_m; protocol type vcm; envlid 0x3e; length override 255
//   sqldschema_s; protocol type vcs; envlid 0x32; length override 255
private void parsesqldhgrp columnmetadata columnmetadata  throws disconnectexception
if  readfastunsignedbyte      codepoint nulldata
return
//   sqldhold; protocol type i2; envlid 0x04; length override 2
short sqldhold   readfastshort
//   sqldreturn; protocol type i2; envlid 0x04; length override 2
short sqldreturn   readfastshort
//   sqldscroll; protocol type i2; envlid 0x04; length override 2
short sqldscroll   readfastshort
//   sqldsensitive; protocol type i2; envlid 0x04; length override 2
short sqldsensitive   readfastshort
//   sqldfcode; protocol type i2; envlid 0x04; length override 2
short sqldfcode   readfastshort
//   sqldkeytype; protocol type i2; envlid 0x04; length override 2
short sqldkeytype   readfastshort
//   sqldrdbnam; protocol type vcs; envlid 0x32; length override 255
string sqldrdbnam   parsefastvcs
//   sqldschema_m; protocol type vcm; envlid 0x3e; length override 255
//   sqldschema_s; protocol type vcs; envlid 0x32; length override 255
string sqldschema   parsefastvcmorvcs
columnmetadata sqldhold_   sqldhold
columnmetadata sqldreturn_   sqldreturn
columnmetadata sqldscroll_   sqldscroll
columnmetadata sqldsensitive_   sqldsensitive
columnmetadata sqldfcode_   sqldfcode
columnmetadata sqldkeytype_   sqldkeytype
columnmetadata sqldrdbnam_   sqldrdbnam
columnmetadata sqldschema_   sqldschema
// sqlrsgrp : early fdoca group
// sql result set group description
//
// format for sqlam >= 7
//   sqlrslocator; protocol type rsl; envlid 0x14; length override 4
//   sqlrsname_m; protocol type vcm; envlid 0x3e; length override 255
//   sqlrsname_s; protocol type vcs; envlid 0x32; length override 255
//   sqlrsnumrows; protocol type i4; envlid 0x02; length override 4
private void parsesqlrsgrp section section  throws disconnectexception
int rslocator   readint
string rsname   parsevcmorvcs        ignore length change bt sqlam 6 and 7
int rsnumrows   readint
// currently rslocator and rsnumrows are not being used.
section setcursorname rsname
// this is duplicated in parsecolumnmetadata, but different
// dagroup under netcolumnmetadata requires a lot more stuffs including
// precsion, scale and other stuffs
private string parsefastvcmorvcs   throws disconnectexception
string stringtobeset   null
int vcm_length   readfastunsignedshort
if  vcm_length > 0
stringtobeset   readfaststring vcm_length  netagent_ targettypdef_ getccsidmbcencoding
int vcs_length   readfastunsignedshort
if  vcm_length > 0    vcs_length > 0
agent_ accumulatechainbreakingreadexceptionandthrow new disconnectexception agent_
new clientmessageid sqlstate net_vcm_vcs_lengths_invalid
else if  vcs_length > 0
stringtobeset   readfaststring vcs_length  netagent_ targettypdef_ getccsidsbcencoding
return stringtobeset
private string parsevcmorvcs   throws disconnectexception
string stringtobeset   null
int vcm_length   readunsignedshort
if  vcm_length > 0
stringtobeset   readstring vcm_length  netagent_ targettypdef_ getccsidmbcencoding
int vcs_length   readunsignedshort
if  vcm_length > 0    vcs_length > 0
agent_ accumulatechainbreakingreadexceptionandthrow new disconnectexception agent_
new clientmessageid sqlstate net_vcm_vcs_lengths_invalid
else if  vcs_length > 0
stringtobeset   readstring vcs_length  netagent_ targettypdef_ getccsidsbcencoding
return stringtobeset
//----------------------non-parsing computational helper methods--------------
private int calculateresultsettype int qryattscr  int qryattsns  int defaulttype
// we are passing in defaulttype "foward_only", in case desired type
// cannot be obtained,we don't want to set the type to statement's type,
// but we will set it to the default.
if  qryattscr    0xf0
return java sql resultset type_forward_only
switch  qryattsns
case codepoint qryins
return java sql resultset type_scroll_insensitive
default
return defaulttype
private int calculateresultsetconcurrency int qryattupd  int defaultconcurrency
// qryattupd does come back for forward-only cursors if the desired concurrency cannot be
// obtained, in which case we don't want to set the concurrency to the default, but
// we want to set it to the actual concurrency.
switch  qryattupd
case codepoint qryrdo
return java sql resultset concur_read_only
case codepoint qryupd
return java sql resultset concur_updatable
default
return defaultconcurrency
private int calculateresultsetholdability int sqlcsrhld
if  sqlcsrhld    0xf0
return resultset close_cursors_at_commit
else
return resultset hold_cursors_over_commit
private int parsesqldtagrpdatalabelsandupdatecolumn netcursor cursor  int columnindex  int tripletlength
throws disconnectexception
int numcolumns    tripletlength   3    3
for  int i   columnindex  i < columnindex   numcolumns  i
cursor qrydsctypdef_ updatecolumn cursor  i  readfastunsignedbyte    readfastunsignedshort
return numcolumns
private string parsesqlstt   throws disconnectexception
parselengthandmatchcodepoint codepoint sqlstt
return parsesqlsttgrp
private string parsesqlsttgrp   throws disconnectexception
int mixednullind   readunsignedbyte
int singlenullind   0
string sqlsttstring   null
int stringlength   0
if  mixednullind    codepoint nulldata
singlenullind   readunsignedbyte
if  singlenullind    codepoint nulldata
// throw dtamchrm
dodtamchrmsemantics
// read 4-byte length
stringlength   readint
// read sqlstt string
sqlsttstring   readstring stringlength  netagent_ targettypdef_ getccsidsbcencoding
else
// read 4-byte length
stringlength   readint
// read sqlstt string
sqlsttstring   readstring stringlength  netagent_ targettypdef_ getccsidmbcencoding
// read null indicator
singlenullind   readunsignedbyte
return sqlsttstring
public void readsetspecialregister statementcallbackinterface statement  throws disconnectexception
startsameidchainparse
parseexcsqlsetreply statement
endofsameidchaindata