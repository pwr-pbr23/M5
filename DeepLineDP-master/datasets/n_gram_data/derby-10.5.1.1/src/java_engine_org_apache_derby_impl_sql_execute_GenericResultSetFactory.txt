/*
derby - class org.apache.derby.impl.sql.execute.genericresultsetfactory
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl sql execute
import org apache derby catalog typedescriptor
import org apache derby iapi error standardexception
import org apache derby iapi services loader generatedmethod
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi sql activation
import org apache derby iapi sql resultset
import org apache derby iapi sql conn authorizer
import org apache derby iapi sql conn languageconnectioncontext
import org apache derby iapi sql execute noputresultset
import org apache derby iapi sql execute resultsetfactory
import org apache derby iapi store access qualifier
import org apache derby iapi store access staticcompiledopenconglominfo
import org apache derby iapi types datavaluedescriptor
/**
* resultsetfactory provides a wrapper around all of
* the result sets used in this execution implementation.
* this removes the need of generated classes to do a new
* and of the generator to know about all of the result
* sets.  both simply know about this interface to getting
* them.
* <p>
* in terms of modularizing, we can create just an interface
* to this class and invoke the interface.  different implementations
* would get the same information provided but could potentially
* massage/ignore it in different ways to satisfy their
* implementations.  the practicality of this is to be seen.
* <p>
* the cost of this type of factory is that once you touch it,
* you touch *all* of the possible result sets, not just
* the ones you need.  so the first time you touch it could
* be painful ... that might be a problem for execution.
*
*/
public class genericresultsetfactory implements resultsetfactory
//
// resultsetfactory interface
//
public genericresultsetfactory
/**
@see resultsetfactory#getinsertresultset
@exception standardexception thrown on error
*/
public resultset getinsertresultset noputresultset source  generatedmethod generationclauses
generatedmethod checkgm
throws standardexception
activation activation   source getactivation
getauthorizer activation  authorize activation  authorizer sql_write_op
return new insertresultset source  generationclauses  checkgm  activation
/**
@see resultsetfactory#getinsertvtiresultset
@exception standardexception thrown on error
*/
public resultset getinsertvtiresultset noputresultset source
noputresultset vtirs
throws standardexception
activation activation   source getactivation
getauthorizer activation  authorize activation  authorizer sql_write_op
return new insertvtiresultset source  vtirs  activation
/**
@see resultsetfactory#getdeletevtiresultset
@exception standardexception thrown on error
*/
public resultset getdeletevtiresultset noputresultset source
throws standardexception
activation activation   source getactivation
getauthorizer activation  authorize activation  authorizer sql_write_op
return new deletevtiresultset source  activation
/**
@see resultsetfactory#getdeleteresultset
@exception standardexception thrown on error
*/
public resultset getdeleteresultset noputresultset source
throws standardexception
activation activation   source getactivation
getauthorizer activation  authorize activation  authorizer sql_write_op
return new deleteresultset source  activation
/**
@see resultsetfactory#getdeletecascaderesultset
@exception standardexception thrown on error
*/
public resultset getdeletecascaderesultset noputresultset source
int constantactionitem
resultset dependentresultsets
string resultsetid
throws standardexception
activation activation   source getactivation
getauthorizer activation  authorize activation  authorizer sql_write_op
return new deletecascaderesultset source  activation
constantactionitem
dependentresultsets
resultsetid
/**
@see resultsetfactory#getupdateresultset
@exception standardexception thrown on error
*/
public resultset getupdateresultset noputresultset source  generatedmethod generationclauses
generatedmethod checkgm
throws standardexception
activation activation   source getactivation
//the stress test failed with null pointer exception in here once and then
//it didn't happen again. it can be a jit problem because after this null
//pointer exception, the cleanup code in updateresultset got a null
//pointer exception too which can't happen since the cleanup code checks
//for null value before doing anything.
//in any case, if this ever happens again, hopefully the following
//assertion code will catch it.
if  sanitymanager debug
sanitymanager assert getauthorizer activation     null
getauthorizer activation  authorize activation  authorizer sql_write_op
return new updateresultset source  generationclauses  checkgm  activation
/**
@see resultsetfactory#getupdatevtiresultset
@exception standardexception thrown on error
*/
public resultset getupdatevtiresultset noputresultset source
throws standardexception
activation activation   source getactivation
getauthorizer activation  authorize activation  authorizer sql_write_op
return new updatevtiresultset source  activation
/**
@see resultsetfactory#getdeletecascadeupdateresultset
@exception standardexception thrown on error
*/
public resultset getdeletecascadeupdateresultset noputresultset source
generatedmethod generationclauses
generatedmethod checkgm
int constantactionitem
int rsditem
throws standardexception
activation activation   source getactivation
getauthorizer activation  authorize activation  authorizer sql_write_op
return new updateresultset source  generationclauses  checkgm  activation
constantactionitem  rsditem
/**
@see resultsetfactory#getcallstatementresultset
@exception standardexception thrown on error
*/
public resultset getcallstatementresultset generatedmethod methodcall
activation activation
throws standardexception
getauthorizer activation  authorize activation  authorizer sql_call_op
return new callstatementresultset methodcall  activation
/**
@see resultsetfactory#getprojectrestrictresultset
@exception standardexception thrown on error
*/
public noputresultset getprojectrestrictresultset noputresultset source
generatedmethod restriction
generatedmethod projection  int resultsetnumber
generatedmethod constantrestriction
int maprefitem
boolean reuseresult
boolean doesprojection
double optimizerestimatedrowcount
double optimizerestimatedcost
throws standardexception
return new projectrestrictresultset source  source getactivation
restriction  projection  resultsetnumber
constantrestriction  maprefitem
reuseresult
doesprojection
optimizerestimatedrowcount
optimizerestimatedcost
/**
@see resultsetfactory#gethashtableresultset
@exception standardexception thrown on error
*/
public noputresultset gethashtableresultset noputresultset source
generatedmethod singletablerestriction
qualifier equijoinqualifiers
generatedmethod projection  int resultsetnumber
int maprefitem
boolean reuseresult
int keycolitem
boolean removeduplicates
long maxinmemoryrowcount
int	initialcapacity
float loadfactor
double optimizerestimatedrowcount
double optimizerestimatedcost
throws standardexception
return new hashtableresultset source  source getactivation
singletablerestriction
equijoinqualifiers
projection  resultsetnumber
maprefitem
reuseresult
keycolitem  removeduplicates
maxinmemoryrowcount
initialcapacity
loadfactor
true 		   skip rows with 1 or more null key columns
optimizerestimatedrowcount
optimizerestimatedcost
/**
@see resultsetfactory#getsortresultset
@exception standardexception thrown on error
*/
public noputresultset getsortresultset noputresultset source
boolean distinct
boolean isinsortedorder
int orderitem
generatedmethod rowallocator
int maxrowsize
int resultsetnumber
double optimizerestimatedrowcount
double optimizerestimatedcost
throws standardexception
return new sortresultset source
distinct
isinsortedorder
orderitem
source getactivation
rowallocator
maxrowsize
resultsetnumber
optimizerestimatedrowcount
optimizerestimatedcost
/**
@see resultsetfactory#getscalaraggregateresultset
@exception standardexception thrown on error
*/
public noputresultset getscalaraggregateresultset noputresultset source
boolean isinsortedorder
int aggregateitem
int orderitem
generatedmethod rowallocator
int maxrowsize
int resultsetnumber
boolean singleinputrow
double optimizerestimatedrowcount
double optimizerestimatedcost
throws standardexception
return new scalaraggregateresultset
source  isinsortedorder  aggregateitem  source getactivation
rowallocator  resultsetnumber  singleinputrow
optimizerestimatedrowcount
optimizerestimatedcost
/**
@see resultsetfactory#getdistinctscalaraggregateresultset
@exception standardexception thrown on error
*/
public noputresultset getdistinctscalaraggregateresultset noputresultset source
boolean isinsortedorder
int aggregateitem
int orderitem
generatedmethod rowallocator
int maxrowsize
int resultsetnumber
boolean singleinputrow
double optimizerestimatedrowcount
double optimizerestimatedcost
throws standardexception
return new distinctscalaraggregateresultset
source  isinsortedorder  aggregateitem  orderitem  source getactivation
rowallocator  maxrowsize  resultsetnumber  singleinputrow
optimizerestimatedrowcount
optimizerestimatedcost
/**
@see resultsetfactory#getgroupedaggregateresultset
@exception standardexception thrown on error
*/
public noputresultset getgroupedaggregateresultset noputresultset source
boolean isinsortedorder
int aggregateitem
int orderitem
generatedmethod rowallocator
int maxrowsize
int resultsetnumber
double optimizerestimatedrowcount
double optimizerestimatedcost
throws standardexception
return new groupedaggregateresultset
source  isinsortedorder  aggregateitem  orderitem  source getactivation
rowallocator  maxrowsize  resultsetnumber  optimizerestimatedrowcount
optimizerestimatedcost
/**
@see resultsetfactory#getdistinctgroupedaggregateresultset
@exception standardexception thrown on error
*/
public noputresultset getdistinctgroupedaggregateresultset noputresultset source
boolean isinsortedorder
int aggregateitem
int orderitem
generatedmethod rowallocator
int maxrowsize
int resultsetnumber
double optimizerestimatedrowcount
double optimizerestimatedcost
throws standardexception
return new distinctgroupedaggregateresultset
source  isinsortedorder  aggregateitem  orderitem  source getactivation
rowallocator  maxrowsize  resultsetnumber  optimizerestimatedrowcount
optimizerestimatedcost
/**
@see resultsetfactory#getanyresultset
@exception standardexception thrown on error
*/
public noputresultset getanyresultset noputresultset source
generatedmethod emptyrowfun  int resultsetnumber
int subquerynumber  int pointofattachment
double optimizerestimatedrowcount
double optimizerestimatedcost
throws standardexception
return new anyresultset source
source getactivation    emptyrowfun  resultsetnumber
subquerynumber  pointofattachment
optimizerestimatedrowcount
optimizerestimatedcost
/**
@see resultsetfactory#getonceresultset
@exception standardexception thrown on error
*/
public noputresultset getonceresultset noputresultset source
generatedmethod emptyrowfun
int cardinalitycheck  int resultsetnumber
int subquerynumber  int pointofattachment
double optimizerestimatedrowcount
double optimizerestimatedcost
throws standardexception
return new onceresultset source
source getactivation    emptyrowfun
cardinalitycheck  resultsetnumber
subquerynumber  pointofattachment
optimizerestimatedrowcount
optimizerestimatedcost
/**
@see resultsetfactory#getrowresultset
*/
public noputresultset getrowresultset activation activation  generatedmethod row
boolean cancacherow
int resultsetnumber
double optimizerestimatedrowcount
double optimizerestimatedcost
return new rowresultset activation  row  cancacherow  resultsetnumber
optimizerestimatedrowcount
optimizerestimatedcost
/**
@see resultsetfactory#getvtiresultset
@exception standardexception thrown on error
*/
public noputresultset getvtiresultset activation activation  generatedmethod row
int resultsetnumber
generatedmethod constructor
string javaclassname
qualifier pushedqualifiers
int erdnumber
boolean version2
boolean reuseableps
int ctcnumber
boolean istarget
int scanisolationlevel
double optimizerestimatedrowcount
double optimizerestimatedcost
boolean isderbystyletablefunction
int returntypenumber
throws standardexception
return new vtiresultset activation  row  resultsetnumber
constructor
javaclassname
pushedqualifiers
erdnumber
version2  reuseableps
ctcnumber
istarget
scanisolationlevel
optimizerestimatedrowcount
optimizerestimatedcost
isderbystyletablefunction
returntypenumber
/**
a hash scan generator, for ease of use at present.
@see resultsetfactory#gethashscanresultset
@exception standardexception thrown on error
*/
public noputresultset gethashscanresultset
activation activation
long conglomid
int scociitem
generatedmethod resultrowallocator
int resultsetnumber
generatedmethod startkeygetter
int startsearchoperator
generatedmethod stopkeygetter
int stopsearchoperator
boolean samestartstopposition
qualifier scanqualifiers
qualifier nextqualifiers
int initialcapacity
float loadfactor
int maxcapacity
int hashkeycolumn
string tablename
string usersuppliedoptimizeroverrides
string indexname
boolean isconstraint
boolean forupdate
int colrefitem
int indexcolitem
int lockmode
boolean tablelocked
int isolationlevel
double optimizerestimatedrowcount
double optimizerestimatedcost
throws standardexception
staticcompiledopenconglominfo scoci    staticcompiledopenconglominfo  activation getpreparedstatement
getsavedobject scociitem
return new hashscanresultset
conglomid
scoci
activation
resultrowallocator
resultsetnumber
startkeygetter
startsearchoperator
stopkeygetter
stopsearchoperator
samestartstopposition
scanqualifiers
nextqualifiers
initialcapacity
loadfactor
maxcapacity
hashkeycolumn
tablename
usersuppliedoptimizeroverrides
indexname
isconstraint
forupdate
colrefitem
lockmode
tablelocked
isolationlevel
true 		   skip rows with 1 or more null key columns
optimizerestimatedrowcount
optimizerestimatedcost
/**
a distinct scan generator, for ease of use at present.
@see resultsetfactory#gethashscanresultset
@exception standardexception thrown on error
*/
public noputresultset getdistinctscanresultset
activation activation
long conglomid
int scociitem
generatedmethod resultrowallocator
int resultsetnumber
int hashkeycolumn
string tablename
string usersuppliedoptimizeroverrides
string indexname
boolean isconstraint
int colrefitem
int lockmode
boolean tablelocked
int isolationlevel
double optimizerestimatedrowcount
double optimizerestimatedcost
throws standardexception
staticcompiledopenconglominfo scoci    staticcompiledopenconglominfo  activation getpreparedstatement
getsavedobject scociitem
return new distinctscanresultset
conglomid
scoci
activation
resultrowallocator
resultsetnumber
hashkeycolumn
tablename
usersuppliedoptimizeroverrides
indexname
isconstraint
colrefitem
lockmode
tablelocked
isolationlevel
optimizerestimatedrowcount
optimizerestimatedcost
/**
a minimal table scan generator, for ease of use at present.
@see resultsetfactory#gettablescanresultset
@exception standardexception thrown on error
*/
public noputresultset gettablescanresultset
activation activation
long conglomid
int scociitem
generatedmethod resultrowallocator
int resultsetnumber
generatedmethod startkeygetter
int startsearchoperator
generatedmethod stopkeygetter
int stopsearchoperator
boolean samestartstopposition
qualifier qualifiers
string tablename
string usersuppliedoptimizeroverrides
string indexname
boolean isconstraint
boolean forupdate
int colrefitem
int indexcolitem
int lockmode
boolean tablelocked
int isolationlevel
boolean onerowscan
double optimizerestimatedrowcount
double optimizerestimatedcost
throws standardexception
staticcompiledopenconglominfo scoci    staticcompiledopenconglominfo  activation getpreparedstatement
getsavedobject scociitem
return new tablescanresultset
conglomid
scoci
activation
resultrowallocator
resultsetnumber
startkeygetter
startsearchoperator
stopkeygetter
stopsearchoperator
samestartstopposition
qualifiers
tablename
usersuppliedoptimizeroverrides
indexname
isconstraint
forupdate
colrefitem
indexcolitem
lockmode
tablelocked
isolationlevel
1 	   rowsperread is 1 if not a bulktablescan
onerowscan
optimizerestimatedrowcount
optimizerestimatedcost
/**
table/index scan where rows are read in bulk
@see resultsetfactory#getbulktablescanresultset
@exception standardexception thrown on error
*/
public noputresultset getbulktablescanresultset
activation activation
long conglomid
int scociitem
generatedmethod resultrowallocator
int resultsetnumber
generatedmethod startkeygetter
int startsearchoperator
generatedmethod stopkeygetter
int stopsearchoperator
boolean samestartstopposition
qualifier qualifiers
string tablename
string usersuppliedoptimizeroverrides
string indexname
boolean isconstraint
boolean forupdate
int colrefitem
int indexcolitem
int lockmode
boolean tablelocked
int isolationlevel
int rowsperread
boolean onerowscan
double optimizerestimatedrowcount
double optimizerestimatedcost
throws standardexception
//prior to cloudscape 10.0 release, holdability was false by default. programmers had to explicitly
//set the holdability to true using jdbc apis. since holdability was not true by default, we chose to disable the
//prefetching for rr and serializable when holdability was explicitly set to true.
//but starting cloudscape 10.0 release, in order to be db2 compatible, holdability is set to true by default.
//because of that, we can not continue to disable the prefetching for rr and serializable, since it causes
//severe performance degradation - bug 5953.
staticcompiledopenconglominfo scoci    staticcompiledopenconglominfo  activation getpreparedstatement
getsavedobject scociitem
return new bulktablescanresultset
conglomid
scoci
activation
resultrowallocator
resultsetnumber
startkeygetter
startsearchoperator
stopkeygetter
stopsearchoperator
samestartstopposition
qualifiers
tablename
usersuppliedoptimizeroverrides
indexname
isconstraint
forupdate
colrefitem
indexcolitem
lockmode
tablelocked
isolationlevel
rowsperread
onerowscan
optimizerestimatedrowcount
optimizerestimatedcost
/**
multi-probing scan that probes an index for specific values contained
in the received probe list.
all index rows for which the first column equals probevals[0] will
be returned, followed by all rows for which the first column equals
probevals[1], and so on.  assumption is that we only get here if
probevals has at least one value.
@see resultsetfactory#getmultiprobetablescanresultset
@exception standardexception thrown on error
*/
public noputresultset getmultiprobetablescanresultset
activation activation
long conglomid
int scociitem
generatedmethod resultrowallocator
int resultsetnumber
generatedmethod startkeygetter
int startsearchoperator
generatedmethod stopkeygetter
int stopsearchoperator
boolean samestartstopposition
qualifier qualifiers
datavaluedescriptor  probevals
int sortrequired
string tablename
string usersuppliedoptimizeroverrides
string indexname
boolean isconstraint
boolean forupdate
int colrefitem
int indexcolitem
int lockmode
boolean tablelocked
int isolationlevel
boolean onerowscan
double optimizerestimatedrowcount
double optimizerestimatedcost
throws standardexception
staticcompiledopenconglominfo scoci    staticcompiledopenconglominfo
activation getpreparedstatement   getsavedobject scociitem
return new multiprobetablescanresultset
conglomid
scoci
activation
resultrowallocator
resultsetnumber
startkeygetter
startsearchoperator
stopkeygetter
stopsearchoperator
samestartstopposition
qualifiers
probevals
sortrequired
tablename
usersuppliedoptimizeroverrides
indexname
isconstraint
forupdate
colrefitem
indexcolitem
lockmode
tablelocked
isolationlevel
onerowscan
optimizerestimatedrowcount
optimizerestimatedcost
/**
@see resultsetfactory#getindexrowtobaserowresultset
@exception standardexception	thrown on error
*/
public noputresultset getindexrowtobaserowresultset
long conglomid
int scociitem
noputresultset source
generatedmethod resultrowallocator
int resultsetnumber
string indexname
int heapcolrefitem
int allcolrefitem
int heaponlycolrefitem
int indexcolmapitem
generatedmethod restriction
boolean forupdate
double optimizerestimatedrowcount
double optimizerestimatedcost
throws standardexception
return new indexrowtobaserowresultset
conglomid
scociitem
source getactivation
source
resultrowallocator
resultsetnumber
indexname
heapcolrefitem
allcolrefitem
heaponlycolrefitem
indexcolmapitem
restriction
forupdate
optimizerestimatedrowcount
optimizerestimatedcost
/**
@see resultsetfactory#getwindowresultset
@exception standardexception	thrown on error
*/
public noputresultset getwindowresultset
activation activation
noputresultset source
generatedmethod rowallocator
int resultsetnumber
int level
int erdnumber
generatedmethod restriction
double optimizerestimatedrowcount
double optimizerestimatedcost
throws standardexception
return new windowresultset
activation
source
rowallocator
resultsetnumber
level
erdnumber
restriction
optimizerestimatedrowcount
optimizerestimatedcost
/**
@see resultsetfactory#getnestedloopjoinresultset
@exception standardexception thrown on error
*/
public noputresultset getnestedloopjoinresultset noputresultset leftresultset
int leftnumcols
noputresultset rightresultset
int rightnumcols
generatedmethod joinclause
int resultsetnumber
boolean onerowrightside
boolean notexistsrightside
double optimizerestimatedrowcount
double optimizerestimatedcost
string usersuppliedoptimizeroverrides
throws standardexception
return new nestedloopjoinresultset leftresultset  leftnumcols
rightresultset  rightnumcols
leftresultset getactivation    joinclause
resultsetnumber
onerowrightside
notexistsrightside
optimizerestimatedrowcount
optimizerestimatedcost
usersuppliedoptimizeroverrides
/**
@see resultsetfactory#gethashjoinresultset
@exception standardexception thrown on error
*/
public noputresultset gethashjoinresultset noputresultset leftresultset
int leftnumcols
noputresultset rightresultset
int rightnumcols
generatedmethod joinclause
int resultsetnumber
boolean onerowrightside
boolean notexistsrightside
double optimizerestimatedrowcount
double optimizerestimatedcost
string usersuppliedoptimizeroverrides
throws standardexception
return new hashjoinresultset leftresultset  leftnumcols
rightresultset  rightnumcols
leftresultset getactivation    joinclause
resultsetnumber
onerowrightside
notexistsrightside
optimizerestimatedrowcount
optimizerestimatedcost
usersuppliedoptimizeroverrides
/**
@see resultsetfactory#getnestedloopleftouterjoinresultset
@exception standardexception thrown on error
*/
public noputresultset getnestedloopleftouterjoinresultset noputresultset leftresultset
int leftnumcols
noputresultset rightresultset
int rightnumcols
generatedmethod joinclause
int resultsetnumber
generatedmethod emptyrowfun
boolean wasrightouterjoin
boolean onerowrightside
boolean notexistsrightside
double optimizerestimatedrowcount
double optimizerestimatedcost
string usersuppliedoptimizeroverrides
throws standardexception
return new nestedloopleftouterjoinresultset leftresultset  leftnumcols
rightresultset  rightnumcols
leftresultset getactivation    joinclause
resultsetnumber
emptyrowfun
wasrightouterjoin
onerowrightside
notexistsrightside
optimizerestimatedrowcount
optimizerestimatedcost
usersuppliedoptimizeroverrides
/**
@see resultsetfactory#gethashleftouterjoinresultset
@exception standardexception thrown on error
*/
public noputresultset gethashleftouterjoinresultset noputresultset leftresultset
int leftnumcols
noputresultset rightresultset
int rightnumcols
generatedmethod joinclause
int resultsetnumber
generatedmethod emptyrowfun
boolean wasrightouterjoin
boolean onerowrightside
boolean notexistsrightside
double optimizerestimatedrowcount
double optimizerestimatedcost
string usersuppliedoptimizeroverrides
throws standardexception
return new hashleftouterjoinresultset leftresultset  leftnumcols
rightresultset  rightnumcols
leftresultset getactivation    joinclause
resultsetnumber
emptyrowfun
wasrightouterjoin
onerowrightside
notexistsrightside
optimizerestimatedrowcount
optimizerestimatedcost
usersuppliedoptimizeroverrides
/**
@see resultsetfactory#getsettransactionresultset
@exception standardexception thrown when unable to create the
result set
*/
public resultset getsettransactionresultset activation activation
throws standardexception
getauthorizer activation  authorize activation  authorizer sql_arbitary_op
return new settransactionresultset activation
/**
@see resultsetfactory#getmaterializedresultset
@exception standardexception thrown on error
*/
public noputresultset getmaterializedresultset noputresultset source
int resultsetnumber
double optimizerestimatedrowcount
double optimizerestimatedcost
throws standardexception
return new materializedresultset source  source getactivation
resultsetnumber
optimizerestimatedrowcount
optimizerestimatedcost
/**
@see resultsetfactory#getscrollinsensitiveresultset
@exception standardexception thrown on error
*/
public noputresultset getscrollinsensitiveresultset noputresultset source
activation activation  int resultsetnumber
int sourcerowwidth
boolean scrollable
double optimizerestimatedrowcount
double optimizerestimatedcost
throws standardexception
/* resultset tree is dependent on whether or not this is
* for a scroll insensitive cursor.
*/
if  scrollable
return new scrollinsensitiveresultset source  activation
resultsetnumber
sourcerowwidth
optimizerestimatedrowcount
optimizerestimatedcost
else
return source
/**
@see resultsetfactory#getnormalizeresultset
@exception standardexception thrown on error
*/
public noputresultset getnormalizeresultset noputresultset source
int resultsetnumber
int erdnumber
double optimizerestimatedrowcount
double optimizerestimatedcost
boolean forupdate
throws standardexception
return new normalizeresultset source  source getactivation
resultsetnumber  erdnumber
optimizerestimatedrowcount
optimizerestimatedcost  forupdate
/**
@see resultsetfactory#getcurrentofresultset
*/
public noputresultset getcurrentofresultset string cursorname
activation activation  int resultsetnumber
return new currentofresultset cursorname  activation  resultsetnumber
/**
@see resultsetfactory#getddlresultset
@exception standardexception thrown on error
*/
public resultset getddlresultset activation activation
throws standardexception
getauthorizer activation  authorize activation  authorizer sql_ddl_op
return getmiscresultset  activation
/**
@see resultsetfactory#getmiscresultset
@exception standardexception thrown on error
*/
public resultset getmiscresultset activation activation
throws standardexception
getauthorizer activation  authorize activation  authorizer sql_arbitary_op
return new miscresultset activation
/**
a minimal union scan generator, for ease of use at present.
@see resultsetfactory#getunionresultset
@exception standardexception thrown on error
*/
public noputresultset getunionresultset noputresultset leftresultset
noputresultset rightresultset
int resultsetnumber
double optimizerestimatedrowcount
double optimizerestimatedcost
throws standardexception
return new unionresultset leftresultset  rightresultset
leftresultset getactivation
resultsetnumber
optimizerestimatedrowcount
optimizerestimatedcost
public noputresultset getsetopresultset  noputresultset leftsource
noputresultset rightsource
activation activation
int resultsetnumber
long optimizerestimatedrowcount
double optimizerestimatedcost
int optype
boolean all
int intermediateorderbycolumnssavedobject
int intermediateorderbydirectionsavedobject
int intermediateorderbynullslowsavedobject
throws standardexception
return new setopresultset  leftsource
rightsource
activation
resultsetnumber
optimizerestimatedrowcount
optimizerestimatedcost
optype
all
intermediateorderbycolumnssavedobject
intermediateorderbydirectionsavedobject
intermediateorderbynullslowsavedobject
/**
* a last index key sresult set returns the last row from
* the index in question.  it is used as an ajunct to max().
*
* @param activation 		the activation for this result set,
*		which provides the context for the row allocation operation.
* @param resultsetnumber	the resultsetnumber for the resultset
* @param resultrowallocator a reference to a method in the activation
* 						that creates a holder for the result row of the scan.  may
*						be a partial row.  <verbatim>
*		execrow rowallocator() throws standardexception; </verbatim>
* @param conglomid 		the conglomerate of the table to be scanned.
* @param tablename			the full name of the table
* @param usersuppliedoptimizeroverrides		overrides specified by the user on the sql
* @param indexname			the name of the index, if one used to access table.
* @param colrefitem		an saved item for a bitset of columns that
*							are referenced in the underlying table.  -1 if
*							no item.
* @param lockmode			the lock granularity to use (see
*							transactioncontroller in access)
* @param tablelocked		whether or not the table is marked as using table locking
*							(in sys.systables)
* @param isolationlevel	isolation level (specified or not) to use on scans
* @param optimizerestimatedrowcount	estimated total # of rows by
* 										optimizer
* @param optimizerestimatedcost		estimated total cost by optimizer
*
* @return the scan operation as a result set.
*
* @exception standardexception thrown when unable to create the
* 				result set
*/
public noputresultset getlastindexkeyresultset
activation 			activation
int 				resultsetnumber
generatedmethod 	resultrowallocator
long 				conglomid
string 				tablename
string 				usersuppliedoptimizeroverrides
string 				indexname
int 				colrefitem
int 				lockmode
boolean				tablelocked
int					isolationlevel
double				optimizerestimatedrowcount
double 				optimizerestimatedcost
throws standardexception
return new lastindexkeyresultset
activation
resultsetnumber
resultrowallocator
conglomid
tablename
usersuppliedoptimizeroverrides
indexname
colrefitem
lockmode
tablelocked
isolationlevel
optimizerestimatedrowcount
optimizerestimatedcost
/**
*	a referential action dependent table scan generator.
*  @see resultsetfactory#gettablescanresultset
*	@exception standardexception thrown on error
*/
public noputresultset getradependenttablescanresultset
activation activation
long conglomid
int scociitem
generatedmethod resultrowallocator
int resultsetnumber
generatedmethod startkeygetter
int startsearchoperator
generatedmethod stopkeygetter
int stopsearchoperator
boolean samestartstopposition
qualifier qualifiers
string tablename
string usersuppliedoptimizeroverrides
string indexname
boolean isconstraint
boolean forupdate
int colrefitem
int indexcolitem
int lockmode
boolean tablelocked
int isolationlevel
boolean onerowscan
double optimizerestimatedrowcount
double optimizerestimatedcost
string parentresultsetid
long fkindexconglomid
int fkcolarrayitem
int rltitem
throws standardexception
staticcompiledopenconglominfo scoci    staticcompiledopenconglominfo  activation getpreparedstatement
getsavedobject scociitem
return new dependentresultset
conglomid
scoci
activation
resultrowallocator
resultsetnumber
startkeygetter
startsearchoperator
stopkeygetter
stopsearchoperator
samestartstopposition
qualifiers
tablename
usersuppliedoptimizeroverrides
indexname
isconstraint
forupdate
colrefitem
lockmode
tablelocked
isolationlevel
1
onerowscan
optimizerestimatedrowcount
optimizerestimatedcost
parentresultsetid
fkindexconglomid
fkcolarrayitem
rltitem
/**
* @see resultsetfactory#getrowcountresultset
*/
public noputresultset getrowcountresultset
noputresultset source
activation activation
int resultsetnumber
long offset
long fetchfirst
double optimizerestimatedrowcount
double optimizerestimatedcost
throws standardexception
return new rowcountresultset source
activation
resultsetnumber
offset
fetchfirst
optimizerestimatedrowcount
optimizerestimatedcost
static private authorizer getauthorizer activation activation
languageconnectioncontext lcc   activation getlanguageconnectioncontext
return lcc getauthorizer
/////////////////////////////////////////////////////////////////
//
//	public minions
//
/////////////////////////////////////////////////////////////////