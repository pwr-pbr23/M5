/*
derby - class org.apache.derby.impl.services.timer.singletontimerfactory
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl services timer
import org apache derby iapi services timer timerfactory
import org apache derby iapi services monitor modulecontrol
import org apache derby iapi error standardexception
import java security accesscontroller
import java security privilegedaction
import java util timer
import java util properties
/**
* this class implements the timerfactory interface.
* it creates a singleton timer instance.
*
* the class implements the modulecontrol interface,
* because it needs to cancel the timer at system shutdown.
*
* @see timerfactory
* @see modulecontrol
*/
public class singletontimerfactory
implements
timerfactory
modulecontrol
/**
* singleton timer instance.
*/
private timer singletontimer
/**
* initializes this timerfactory with a singleton timer instance.
*/
public singletontimerfactory
/**
* even though we implement the modulecontrol interface,
* we initialize the object here rather than in boot, since
* a) we avoid synchronizing access to singletontimer later
* b) we don't need any properties
*/
// derby-3745 we want to avoid leaking class loaders, so
// we make sure the context class loader is null before
// creating the thread
classloader savecl   null
boolean hasgetclassloaderperms   false
try
savecl    classloader accesscontroller doprivileged
new privilegedaction
public object run
return thread currentthread   getcontextclassloader
hasgetclassloaderperms   true
catch  securityexception se
// ignore security exception. versions of derby before
// the derby-3745 fix did not require getclassloader
// privs.  we may leak class loaders if we are not
// able to do this but we can't just fail.
if  hasgetclassloaderperms
try
accesscontroller doprivileged
new privilegedaction
public object run
thread currentthread   setcontextclassloader null
return null
catch  securityexception se
// ignore security exception.  earlier versions of derby, before the
// derby-3745 fix did not require setcontextclassloader permissions.
// we may leak class loaders if we are not able to set this, but
// cannot just fail.
singletontimer   new timer true      run as daemon
if  hasgetclassloaderperms
try
final classloader tmpsavecl   savecl
accesscontroller doprivileged
new privilegedaction
public object run
thread currentthread   setcontextclassloader tmpsavecl
return null
catch  securityexception se
// ignore security exception.  earlier versions of derby, before the
// derby-3745 fix did not require setcontextclassloader permissions.
// we may leak class loaders if we are not able to set this, but
// cannot just fail.
/**
* returns a timer object that can be used for adding timertasks
* that cancel executing statements.
*
* implements the timerfactory interface.
*
* @return a timer object for cancelling statements.
*
* @see timerfactory
*/
public timer getcancellationtimer
return singletontimer
/**
* currently does nothing, singleton timer instance is initialized
* in the constructor.
*
* implements the modulecontrol interface.
*
* @see modulecontrol
*/
public void boot boolean create  properties properties
throws
standardexception
// do nothing, instance already initialized in constructor
/**
* cancels the singleton timer instance.
*
* implements the modulecontrol interface.
*
* @see modulecontrol
*/
public void stop
singletontimer cancel