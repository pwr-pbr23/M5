/*
derby - class org.apache.derby.client.am.lob
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby client am
import java io inputstream
import java io ioexception
import java util arraylist
import java sql sqlexception
import org apache derby client net netconfiguration
import org apache derby client net netconnection
import org apache derby shared common reference sqlstate
public abstract class lob implements unitofworklistener
// the following flags specify the data type(s) a lob instance currently contains
public static final int string   2
public static final int ascii_stream   4
public static final int unicode_stream   8
public static final int character_stream   16
public static final int binary_stream   32
public static final int binary_string   64
public static final int locator   128
public static final int invalid_locator    1
//---------------------navigational members-----------------------------------
protected agent agent_
//-----------------------------state------------------------------------------
protected int datatype_   0          data type s  the lob instance currently contains
protected int locator_   invalid_locator     locator id for this lob
private long sqllength_    length of the lob value  as defined by the server
private boolean lengthobtained_
/**
* this boolean variable indicates whether the lob object has been
* invalidated by calling free() on it
*/
protected boolean isvalid_   true
final private boolean willbelayerbstreamed_
//a running counter that keeps track
//of whether a update has been done
//on this lob value. we do not need
//to bother about the limit imposed
//by this counter because we just check
//whether its latest value matches hence
//for all practical purposes there is no
//limit imposed.
private long updatecount
/**
* this integer identifies which transaction the lob is associated with
*/
private int transactionid_
//-----------------------------messageid------------------------------------------
final static protected clientmessageid lob_object_length_unknown_yet
new clientmessageid  sqlstate lob_object_length_unknown_yet
//---------------------constructors/finalizer---------------------------------
protected lob agent agent
boolean willbelayerbstreamed
agent_   agent
lengthobtained_   false
willbelayerbstreamed_   willbelayerbstreamed
transactionid_   agent_ connection_ gettransactionid
protected void finalize   throws java lang throwable
super finalize
// ---------------------------jdbc 2------------------------------------------
/**
* return the length of the lob value represented by this lob
* object.  if length is not already known, and lob is locator
* based, length will be retrieved from the server.  if not,
* locator based, lob will first be materialized.  note: the
* caller needs to deal with synchronization.
*
* @throws sqlexception on execution errors while materializing the stream,
*         or if layer b streaming is used and length not yet obtained.
* @return length of lob value
*/
long sqllength   throws sqlexception
if  lengthobtained_  return sqllength_
if  islocator
sqllength_   getlocatorlength
lengthobtained_   true
else if  willbelayerbstreamed
throw new sqlexception agent_ logwriter_
lob_object_length_unknown_yet
else
materializestream        will set sqllength_
return sqllength_
/**
* update the registered length of the lob value.  to be called by
* methods that make changes to the length of the lob.
* note: the caller needs to deal with synchronization.
*
* @param length the new length of the lob value
*/
void setsqllength long length
sqllength_   length
lengthobtained_   true
/**
* get the length of locator based lob from the server.  this is a
* dummy implementation that is supposed to be overridden by
* subclasses.  a stored procedure call will be made to get the
* length from the server.
*
* @throws org.apache.derby.client.am.sqlexception
* @return length of lob
*/
long getlocatorlength   throws sqlexception
return  1
//-----------------------event callback methods-------------------------------
public void listentounitofwork
agent_ connection_ commitandrollbacklisteners_ put this null
public void completelocalcommit java util iterator listeneriterator
listeneriterator remove
public void completelocalrollback java util iterator listeneriterator
listeneriterator remove
//----------------------------helper methods----------------------------------
public agent getagent
return agent_
void checkforclosedconnection   throws sqlexception
if  agent_ connection_ isclosedx
agent_ checkfordeferredexceptions
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate lob_method_on_closed_connection
else
agent_ checkfordeferredexceptions
void completelocalrollback
void completelocalcommit
/**
* method to be implemented by subclasses, so that
* #materializedstream(inputstream, string) can be called with subclass
* specific parameters and the result assigned to the right stream.
*
* @throws sqlexception
*/
protected abstract void materializestream   throws sqlexception
/**
* materialize the given stream into memory and update the internal
* length variable.
*
* @param is stream to use for input
* @param typedesc description of the data type we are inserting,
*      for instance <code>java.sql.clob</code>
* @return a stream whose source is the materialized data
* @throws sqlexception if the stream exceeds 2 gb, or an error happens
*      while reading from the stream
*/
protected inputstream materializestream inputstream is  string typedesc
throws sqlexception
final int growby   32   1024     32 kb
arraylist bytearrays   new arraylist
byte curbytes   new byte
int totallength   0
int partlength   0
// read all data from the stream, storing it in a number of arrays.
try
do
partlength   is read curbytes  0  curbytes length
if  partlength    curbytes length
bytearrays add curbytes
// make sure we don't exceed 2 gb by checking for overflow.
int newlength   totallength   growby
if  newlength < 0    newlength    integer max_value
curbytes   new byte
else
curbytes   new byte
if  partlength > 0
totallength    partlength
while  partlength    growby
// make sure stream is exhausted.
if  is read       1
// we have exceeded 2 gb.
throw new sqlexception

new clientmessageid
sqlstate lang_outside_range_for_datatype
typedesc
if  partlength > 0
bytearrays add curbytes
// cleanup and set state.
curbytes   null
sqllength_   totallength
lengthobtained_   true
// return a stream whose source is a list of byte arrays.
// this avoids having to copy all the data into a single big array.
return new bytearraycombinerstream bytearrays  totallength
catch  ioexception ioe
throw new sqlexception null
new clientmessageid
sqlstate lang_streaming_column_i_o_exception
typedesc
ioe
public abstract long length   throws sqlexception
protected static boolean islayerbstreamingpossible  agent agent
final netconnection netconn
netconnection    agent connection_
final int securitymechanism
netconn getsecuritymechanism
return
netconn serversupportslayerbstreaming
securitymechanism    netconfiguration secmec_eusriddta
securitymechanism    netconfiguration secmec_eusrpwddta
public boolean willbelayerbstreamed
return willbelayerbstreamed_
/**
* check whether this lob is based on a locator
* @return true if lob is based on locator, false otherwise
*/
public boolean islocator
return   datatype_   locator     locator
/**
* get locator for this lob
* @return locator for this lob, invalid_locator if lob is not
*         based on locator
*/
public int getlocator
return locator_
/**
* checks the <code>pos</code> and <code>length</code>.
*
* @param pos a long that contains the position that needs to be checked
* @param length a long that contains the length that needs to be checked
* @throws sqlexception if
*         a) pos <= 0
*         b) pos > (length of lob)
*         c) length < 0
*         d) (pos -1) + length > (length of lob)
*/
protected void checkposandlength long pos  long length
throws sqlexception
if  pos <  0
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate blob_bad_position
new long pos   getsqlexception
if  length < 0
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate blob_nonpositive_length
new integer  int length   getsqlexception
if  length >  this length      pos  1
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate pos_and_length_greater_than_lob
new long pos   new long length   getsqlexception
/**
* increments and returns the new updatecount
* of this <code>lob</code>. the method needs to be
* synchronized since multiple updates can
* happen on this <code>lob</code> simultaneously.
* it will be called from the
* 1) locator writers
* 2) locator outputstreams
* 3) from the update methods
*    within the lobs like setstring, truncate.
* since all of the above acesses are inside
* the am package, this method will have
* default access. we do not need to worry
* about the non-locator streams since
* non-locator inputstreams would not
* depend on updatecount for invalidation
*/
protected synchronized void incrementupdatecount
updatecount
/**
* returns the current updatecount of the clob.
*/
long getupdatecount
return updatecount
/**
* calls sqllength() to check if the locator associated
* with the underlying lob is valid. if it is not
* it throws an exception.
*
* @throws sqlexception
*
*/
void checkforlocatorvalidity   throws sqlexception
// as of now there is no other way of determining that
//the locator associated with the underlying lob is not
//valid
sqllength
/**
* checks if isvalid is true and whether the transaction that
* created the lob is still active. if any of which is not true throws
* a sqlexception stating that a method has been called on
* an invalid lob object.
*
* @throws sqlexception if isvalid is not true or the transaction that
* created the lob is not active
*/
protected void checkvalidity   throws sqlexception
// if there isn't an open connection, the lob is invalid.
try
agent_ connection_ checkforclosedconnection
catch  sqlexception se
throw se getsqlexception
if  isvalid_    transactionid_    agent_ connection_ gettransactionid
throw new sqlexception null new clientmessageid sqlstate lob_object_invalid
getsqlexception