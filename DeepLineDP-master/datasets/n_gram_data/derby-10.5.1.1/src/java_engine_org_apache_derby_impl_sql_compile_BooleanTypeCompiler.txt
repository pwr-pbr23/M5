/*
derby - class org.apache.derby.impl.sql.compile.booleantypecompiler
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl sql compile
import org apache derby iapi services loader classfactory
import org apache derby iapi error standardexception
import org apache derby iapi reference sqlstate
import org apache derby iapi types datatypedescriptor
import org apache derby iapi types booleandatavalue
import org apache derby iapi types typeid
import org apache derby iapi sql compile typecompiler
import org apache derby catalog types basetypeidimpl
import org apache derby iapi reference classname
import java sql types
/**
* this class implements typecompiler for the sql boolean datatype.
*
*/
public class booleantypecompiler extends basetypecompiler
/**
* tell whether this type (boolean) can be converted to the given type.
*
* @see typecompiler#convertible
*/
public boolean convertible typeid othertype  boolean fordatatypefunction
int otherjdbctypeid   othertype getjdbctypeid
if   otherjdbctypeid    types date
otherjdbctypeid    types time
otherjdbctypeid    types timestamp
return false
return true
/**
* tell whether this type (boolean) is compatible with the given type.
*
* @param othertype     the typeid of the other type.
*/
public boolean compatible typeid othertype
return convertible othertype false
/** @see typecompiler#storable */
public boolean storable typeid othertype  classfactory cf
/* are the types the same or is other type a string or number type? */
if  othertype isbooleantypeid
othertype isstringtypeid
othertype isnumerictypeid
return true
/*
** if the other type is user-defined, use the java types to determine
** assignability.
*/
return usertypestorable gettypeid    othertype  cf
/** @see typecompiler#interfacename */
public string interfacename
return classname booleandatavalue
/**
* @see typecompiler#getcorrespondingprimitivetypename
*/
public string getcorrespondingprimitivetypename
/* only numerics and booleans get mapped to java primitives */
return
/**
* get the method name for getting out the corresponding primitive
* java type.
*
* @return string		the method call name for getting the
*						corresponding primitive java type.
*/
public string getprimitivemethodname
return
/**
* @see typecompiler#getcasttocharwidth
*/
public int getcasttocharwidth datatypedescriptor dts
return typecompiler boolean_maxwidth_as_char
string nullmethodname
return