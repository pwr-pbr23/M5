/*
derby - class org.apache.derby.catalog.types.basetypeidimpl
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby catalog types
import org apache derby catalog typedescriptor
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi services io formatable
import org apache derby iapi services io storedformatids
import org apache derby iapi types datavaluedescriptor
import org apache derby iapi types typeid
import org apache derby iapi services io streamstorable
import org apache derby iapi services i18n messageservice
import org apache derby iapi services i18n messageservice
import org apache derby iapi reference jdbc40translation
import org apache derby iapi reference sqlstate
import org apache derby iapi services info jvminfo
import java sql types
import java io inputstream
import java io bytearrayinputstream
import java io objectoutput
import java io objectinput
import java io ioexception
import java io eofexception
/**
* this class is the base class for all type ids that are written to the
* system tables.
*/
public class basetypeidimpl implements formatable
/********************************************************
**
**      this class implements formatable. that means that it
**      can write itself to and from a formatted stream. if
**      you add more fields to this class, make sure that you
**      also write/read them with the writeexternal()/readexternal()
**      methods.
**
**      if, inbetween releases, you add more fields to this class,
**      then you should bump the version number emitted by the
**      gettypeformatid() method.
**
********************************************************/
private int   formatid
string        sqltypename
/**
* jdbc type - derived from the format identifier.
*/
transient int           jdbctypeid
/**
* niladic constructor. needed for formatable interface to work.
*
*/
public basetypeidimpl
/**
* 1 argument constructor. needed for formatable interface to work.
*
* @param formatid      format id of specific type id.
*/
public basetypeidimpl int formatid
this formatid   formatid
settypeidspecificinstancevariables
/**
* constructor for an basetypeidimpl
*
* @param sqltypename   the sql name of the type
*/
basetypeidimpl string sqltypename
this sqltypename   sqltypename
/**
* returns the sql name of the datatype. if it is a user-defined type,
* it returns the full java path name for the datatype, meaning the
* dot-separated path including the package names.
*
* @return      a string containing the sql name of this type.
*/
public string   getsqltypename
return sqltypename
/**
* get the jdbc type id for this type.  jdbc type can be
* found in java.sql.types.
*
* @return      a jdbc type, e.g. java.sql.types.decimal
*
* @see types
*/
public int getjdbctypeid
return jdbctypeid
/**
* converts this typeid, given a data type descriptor
* (including length/precision), to a string. e.g.
*
*                      varchar(30)
*
*
*      for most data types, we just return the sql type name.
*
*      @param  td      data type descriptor that holds the
*                      length/precision etc. as necessary
*
*       @return        string version of datatype, suitable for running
*                      through the parser.
*/
public string   toparsablestring typedescriptor td
string retval   getsqltypename
switch  formatid
case storedformatids bit_type_id_impl
case storedformatids varbit_type_id_impl
int rparen   retval indexof
string lead   retval substring 0  rparen
retval   lead   td getmaximumwidth     retval substring rparen
break
case storedformatids char_type_id_impl
case storedformatids varchar_type_id_impl
case storedformatids blob_type_id_impl
case storedformatids clob_type_id_impl
retval        td getmaximumwidth
break
case storedformatids decimal_type_id_impl
retval        td getprecision         td getscale
break
return retval
/** does this type id represent a user type? */
public boolean usertype
return false
/**
* format this basetypeidimpl as a string
*
* @return      this basetypeidimpl formatted as a string
*/
public string   tostring
return messageservice gettextmessage sqlstate ti_sql_type_name
getsqltypename
/**
* we want equals to say if these are the same type id or not.
*/
public boolean equals object that
if  that instanceof basetypeidimpl
return this getsqltypename   equals   basetypeidimpl that  getsqltypename
else
return false
/**
hashcode which works with equals.
*/
public int hashcode
return this getsqltypename   hashcode
/**
* get the formatid which corresponds to this class.
*
* @return      the formatid of this class
*/
public int gettypeformatid
return formatid
/**
* read this object from a stream of stored objects.
*
* @param in read this.
*
* @exception ioexception                       thrown on error
* @exception classnotfoundexception            thrown on error
*/
public void readexternal  objectinput in
throws ioexception  classnotfoundexception
sqltypename   in readutf
/**
* write this object to a stream of stored objects.
*
* @param out write bytes here.
*
* @exception ioexception               thrown on error
*/
public void writeexternal  objectoutput out
throws ioexception
out writeutf  sqltypename
private void settypeidspecificinstancevariables
switch  formatid
case storedformatids boolean_type_id_impl
sqltypename   typeid boolean_name
jdbctypeid   jvminfo java_sql_types_boolean
break
case storedformatids int_type_id_impl
sqltypename   typeid integer_name
jdbctypeid   types integer
break
case storedformatids smallint_type_id_impl
sqltypename   typeid smallint_name
jdbctypeid   types smallint
break
case storedformatids tinyint_type_id_impl
sqltypename   typeid tinyint_name
jdbctypeid   types tinyint
break
case storedformatids longint_type_id_impl
sqltypename   typeid longint_name
jdbctypeid   types bigint
break
case storedformatids decimal_type_id_impl
sqltypename   typeid decimal_name
jdbctypeid   types decimal
break
case storedformatids double_type_id_impl
sqltypename   typeid double_name
jdbctypeid   types double
break
case storedformatids real_type_id_impl
sqltypename   typeid real_name
jdbctypeid   types real
break
case storedformatids ref_type_id_impl
sqltypename   typeid ref_name
jdbctypeid   types other
break
case storedformatids char_type_id_impl
sqltypename   typeid char_name
jdbctypeid   types char
break
case storedformatids varchar_type_id_impl
sqltypename   typeid varchar_name
jdbctypeid   types varchar
break
case storedformatids longvarchar_type_id_impl
sqltypename   typeid longvarchar_name
jdbctypeid   types longvarchar
break
case storedformatids clob_type_id_impl
sqltypename   typeid clob_name
jdbctypeid   types clob
break
case storedformatids bit_type_id_impl
sqltypename   typeid bit_name
jdbctypeid   types binary
break
case storedformatids varbit_type_id_impl
sqltypename   typeid varbit_name
jdbctypeid   types varbinary
break
case storedformatids longvarbit_type_id_impl
sqltypename   typeid longvarbit_name
jdbctypeid   types longvarbinary
break
case storedformatids blob_type_id_impl
sqltypename   typeid blob_name
jdbctypeid   types blob
break
case storedformatids date_type_id_impl
sqltypename   typeid date_name
jdbctypeid   types date
break
case storedformatids time_type_id_impl
sqltypename   typeid time_name
jdbctypeid   types time
break
case storedformatids timestamp_type_id_impl
sqltypename   typeid timestamp_name
jdbctypeid   types timestamp
break
case storedformatids xml_type_id_impl
sqltypename   typeid xml_name
jdbctypeid   jdbc40translation sqlxml
break
default
if  sanitymanager debug
sanitymanager throwassert     formatid
break