/*
derby - class org.apache.derby.impl.sql.execute.setopresultset
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl sql execute
import org apache derby iapi error standardexception
import org apache derby iapi services loader generatedmethod
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi sql activation
import org apache derby iapi sql resultdescription
import org apache derby iapi sql execute cursorresultset
import org apache derby iapi sql execute execpreparedstatement
import org apache derby iapi sql execute execrow
import org apache derby iapi sql execute noputresultset
import org apache derby iapi types datavaluedescriptor
import org apache derby iapi types orderable
import org apache derby iapi types rowlocation
import org apache derby impl sql compile intersectorexceptnode
/**
* takes the result set produced by an ordered union all of two tagged result sets and produces
* the intersect or except of the two input result sets. this also projects out the tag, the last column
* of the input rows.
*/
class setopresultset extends noputresultsetimpl
implements cursorresultset
private final noputresultset leftsource
private final noputresultset rightsource
private final activation activation
private final int optype
private final boolean all
private final int resultsetnumber
private datavaluedescriptor prevcols     used to remove duplicates in the except distinct case
* it is equal to the previously output columns.
*/
private int rightduplicatecount     number of duplicates of the current row from the right input
private execrow leftinputrow
private execrow rightinputrow
private final int intermediateorderbycolumns
private final int intermediateorderbydirection
private final boolean intermediateorderbynullslow
/* run time statistics variables */
private int rowsseenleft
private int rowsseenright
private int rowsreturned
setopresultset  noputresultset leftsource
noputresultset rightsource
activation activation
int resultsetnumber
long optimizerestimatedrowcount
double optimizerestimatedcost
int optype
boolean all
int intermediateorderbycolumnssavedobject
int intermediateorderbydirectionsavedobject
int intermediateorderbynullslowsavedobject
super activation  resultsetnumber
optimizerestimatedrowcount  optimizerestimatedcost
this leftsource   leftsource
this rightsource   rightsource
this activation   activation
this resultsetnumber   resultsetnumber
this optype   optype
this all   all
execpreparedstatement eps   activation getpreparedstatement
intermediateorderbycolumns    int  eps getsavedobject intermediateorderbycolumnssavedobject
intermediateorderbydirection    int  eps getsavedobject intermediateorderbydirectionsavedobject
intermediateorderbynullslow    boolean  eps getsavedobject intermediateorderbynullslowsavedobject
recordconstructortime
/**
* open the first source.
*	@exception standardexception thrown on failure
*/
public void	opencore   throws standardexception
begintime   getcurrenttimemillis
if  sanitymanager debug
sanitymanager assert    isopen
isopen   true
leftsource opencore
rightsource opencore
rightinputrow   rightsource getnextrowcore
if  rightinputrow    null
rowsseenright
numopens
opentime    getelapsedmillis begintime
end of opencore
/**
* @return the next row of the intersect or except, null if there is none
*	@exception standardexception thrown on failure
*/
public execrow	getnextrowcore   throws standardexception
begintime   getcurrenttimemillis
if   isopen
while   leftinputrow   leftsource getnextrowcore       null
rowsseenleft
datavaluedescriptor leftcolumns   leftinputrow getrowarray
if   all
if  isduplicate  leftcolumns
continue     get the next left row
prevcols   leftinputrow getrowarrayclone
int compare   0
// advance the right until there are no more right rows or leftrow <= rightrow
while   rightinputrow    null     compare   compare leftcolumns  rightinputrow getrowarray     > 0
rightinputrow   rightsource getnextrowcore
if  rightinputrow    null
rowsseenright
if  rightinputrow    null    compare < 0
// the left row is not in the right source.
if  optype    intersectorexceptnode except_op
// output this row
break
else
// the left and right rows are the same
if  sanitymanager debug
sanitymanager assert  rightinputrow    null    compare    0
if   all
// just advance the right input by one row.
rightinputrow   rightsource getnextrowcore
if  rightinputrow    null
rowsseenright
// if !all then we will skip past duplicates on the left at the top of this loop,
// which will then force us to skip past any right duplicates.
if  optype    intersectorexceptnode intersect_op
break     output this row
// optype == intersectorexceptnode.except_op
// this row should not be ouput
setcurrentrow leftinputrow
if  currentrow    null
rowsreturned
nexttime    getelapsedmillis begintime
return currentrow
end of getnextrowcore
private void advancerightpastduplicates  datavaluedescriptor leftcolumns
throws standardexception
while   rightinputrow   rightsource getnextrowcore       null
rowsseenright
if  compare leftcolumns  rightinputrow getrowarray       0
continue
end of advancerightpastduplicates
private int compare  datavaluedescriptor leftcols  datavaluedescriptor rightcols
throws standardexception
for  int i   0  i < intermediateorderbycolumns length  i
int colidx   intermediateorderbycolumns
if  leftcols compare  orderable order_op_lessthan
rightcols
true     nulls should be ordered
intermediateorderbynullslow
false
return  1   intermediateorderbydirection
if    leftcols compare  orderable order_op_equals
rightcols
true     nulls should be ordered
intermediateorderbynullslow
false
return intermediateorderbydirection
return 0
end of compare
private boolean isduplicate  datavaluedescriptor curcolumns
throws standardexception
if  prevcols    null
return false
/* note that intermediateorderbycolumns.length can be less than prevcols.length if we know that a
* subset of the columns is a unique key. in that case we only need to look at the unique key.
*/
for  int i   0  i < intermediateorderbycolumns length  i
int colidx   intermediateorderbycolumns
if    curcolumns compare  orderable order_op_equals  prevcols  true  false
return false
return true
public execrow getcurrentrow
return currentrow
/**
* if the result set has been opened,
* close the currently open source.
*
* @exception standardexception thrown on error
*/
public void	close   throws standardexception
begintime   getcurrenttimemillis
if   isopen
clearcurrentrow
prevcols   null
leftsource close
rightsource close
super close
else
if  sanitymanager debug
sanitymanager debug
closetime    getelapsedmillis begintime
end of close
public void	finish   throws standardexception
leftsource finish
rightsource finish
finishandrts
/**
* return the total amount of time spent in this resultset
*
* @param type	current_resultset_only - time spent only in this resultset
*				entire_resultset_tree  - time spent in this resultset and below.
*
* @return long		the total amount of time spent (in milliseconds).
*/
public long gettimespent int type
long tottime   constructortime   opentime   nexttime   closetime
if  type    noputresultset current_resultset_only
return	tottime   leftsource gettimespent entire_resultset_tree
rightsource gettimespent entire_resultset_tree
else
return tottime
end of gettimespent
/**
* @see cursorresultset
*
* @return the row location of the current cursor row.
* @exception standardexception thrown on failure
*/
public rowlocation getrowlocation   throws standardexception
// resolve: what is the row location of an intersect supposed to be: the location from the
// left side, the right side, or null?
return   cursorresultset leftsource  getrowlocation
/**
* return the set operation of this <code>setopresultset</code>
*
* @return the set operation of this resultset, the value is either
*         <code>intersectorexceptnode.intersect_op</code> for
*         intersect operation or <code>intersectorexceptnode.except_op
*         </code> for except operation
*
* @see    org.apache.derby.impl.sql.compile.intersectorexceptnode
*/
public int getoptype
return optype
/**
* return the result set number
*
* @return the result set number
*/
public int getresultsetnumber
return resultsetnumber
/**
* return the left source input of this <code>setopresultset</code>
*
* @return the left source input of this <code>setopresultset</code>
* @see org.apache.derby.iapi.sql.execute.noputresultset
*/
public noputresultset getleftsourceinput
return leftsource
/**
* return the right source input of this <code>setopresultset</code>
*
* @return the right source input of this <code>setopresultset</code>
* @see org.apache.derby.iapi.sql.execute.noputresultset
*/
public noputresultset getrightsourceinput
return rightsource
/**
* return the number of rows seen on the left source input
*
* @return the number of rows seen on the left source input
*/
public int getrowsseenleft
return rowsseenleft
/**
* return the number of rows seen on the right source input
*
* @return the number of rows seen on the right source input
*/
public int getrowsseenright
return rowsseenright
/**
* return the number of rows returned from the result set
*
* @return the number of rows returned from the result set
*/
public int getrowsreturned
return rowsreturned