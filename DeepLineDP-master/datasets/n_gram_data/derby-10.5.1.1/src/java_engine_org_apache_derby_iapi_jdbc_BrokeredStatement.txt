/*
derby - class org.apache.derby.iapi.jdbc.brokeredstatement
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi jdbc
import org apache derby iapi reference jdbc30translation
import org apache derby iapi reference sqlstate
import org apache derby iapi error standardexception
import org apache derby iapi error publicapi
import org apache derby iapi services info jvminfo
import org apache derby impl jdbc util
import java sql connection
import java sql resultset
import java sql sqlexception
import java sql sqlwarning
import java sql statement
import java lang reflect
/**
a statement implementation that forwards all of its requests to an underlying statement.
*/
public class brokeredstatement implements enginestatement
/**
my control. use the controlcheck() method to obtain the control
when calling a check method. this will result in the correct exception
being thrown if the statement is already closed.
*/
final brokeredstatementcontrol control
final int resultsettype
final int resultsetconcurrency
final int resultsetholdability
/**
my state
*/
private string cursorname
private boolean escapeprocessing
brokeredstatement brokeredstatementcontrol control  throws sqlexception
this control   control
// save the state of the statement while we are pretty much guaranteed the
// underlying statement is open.
resultsettype   getresultsettype
resultsetconcurrency   getresultsetconcurrency
resultsetholdability   getresultsetholdability
public final void addbatch string sql
throws sqlexception
getstatement   addbatch  sql
public final void clearbatch
throws sqlexception
getstatement   clearbatch
public final int executebatch
throws sqlexception
return getstatement   executebatch
public final void cancel
throws sqlexception
getstatement   cancel
public final boolean execute string sql  throws sqlexception
return getstatement   execute sql
public final resultset executequery string sql  throws sqlexception
return wrapresultset getstatement   executequery sql
public final int executeupdate string sql  throws sqlexception
return getstatement   executeupdate sql
/**
* in many cases, it is desirable to immediately release a
* statements's database and jdbc resources instead of waiting for
* this to happen when it is automatically closed; the close
* method provides this immediate release.
*
* <p><b>note:</b> a statement is automatically closed when it is
* garbage collected. when a statement is closed its current
* resultset, if one exists, is also closed.
* @exception sqlexception thrown on failure.
*/
public final void close   throws sqlexception
getstatement   close
public final connection getconnection
throws sqlexception
return getstatement   getconnection
public final int getfetchdirection
throws sqlexception
return getstatement   getfetchdirection
public final int getfetchsize
throws sqlexception
return getstatement   getfetchsize
public final int getmaxfieldsize
throws sqlexception
return getstatement   getmaxfieldsize
public final int getmaxrows
throws sqlexception
return getstatement   getmaxrows
public final int getresultsetconcurrency
throws sqlexception
return getstatement   getresultsetconcurrency
/**
* the maxfieldsize limit (in bytes) is set to limit the size of
* data that can be returned for any column value; it only applies
* to binary, varbinary, longvarbinary, char, varchar, and
* longvarchar fields.  if the limit is exceeded, the excess data
* is silently discarded.
*
* @param max the new max column size limit; zero means unlimited
* @exception sqlexception thrown on failure.
*/
public final void setmaxfieldsize int max  throws sqlexception
getstatement   setmaxfieldsize max
/**
* the maxrows limit is set to limit the number of rows that any
* resultset can contain.  if the limit is exceeded, the excess
* rows are silently dropped.
*
* @param max the new max rows limit; zero means unlimited
* @exception sqlexception thrown on failure.
*/
public final void setmaxrows int max  throws sqlexception
getstatement   setmaxrows  max
/**
* if escape scanning is on (the default) the driver will do
* escape substitution before sending the sql to the database.
*
* @param enable true to enable; false to disable
* @exception sqlexception thrown on failure.
*/
public final void setescapeprocessing boolean enable  throws sqlexception
getstatement   setescapeprocessing  enable
escapeprocessing   enable ? boolean true   boolean false
/**
* the first warning reported by calls on this statement is
* returned.  a statment's execute methods clear its sqlwarning
* chain. subsequent statement warnings will be chained to this
* sqlwarning.
*
* <p>the warning chain is automatically cleared each time
* a statement is (re)executed.
*
* <p><b>note:</b> if you are processing a resultset then any
* warnings associated with resultset reads will be chained on the
* resultset object.
*
* @return the first sqlwarning or null
* @exception sqlexception thrown on failure.
*/
public final sqlwarning getwarnings   throws sqlexception
return getstatement   getwarnings
/**
* after this call getwarnings returns null until a new warning is
* reported for this statement.
* @exception sqlexception thrown on failure.
*/
public final void clearwarnings   throws sqlexception
getstatement   clearwarnings
/**
* setcursorname defines the sql cursor name that will be used by
* subsequent statement execute methods. this name can then be
* used in sql positioned update/delete statements to identify the
* current row in the resultset generated by this getstatement().  if
* the database doesn't support positioned update/delete, this
* method is a noop.
*
* <p><b>note:</b> by definition, positioned update/delete
* execution must be done by a different statement than the one
* which generated the resultset being used for positioning. also,
* cursor names must be unique within a connection.
*
* @param name the new cursor name.
*/
public final void setcursorname string name  throws sqlexception
getstatement   setcursorname  name
cursorname   name
/**
*  getresultset returns the current result as a resultset.  it
*  should only be called once per result.
*
* @return the current result as a resultset; null if the result
* is an update count or there are no more results or the statement
* was closed.
* @see #execute
*/
public final resultset getresultset   throws sqlexception
return wrapresultset getstatement   getresultset
/**
*  getupdatecount returns the current result as an update count;
*  if the result is a resultset or there are no more results -1
*  is returned.  it should only be called once per result.
*
* <p>the only way to tell for sure that the result is an update
*  count is to first test to see if it is a resultset. if it is
*  not a resultset it is either an update count or there are no
*  more results.
*
* @return the current result as an update count; -1 if it is a
* resultset or there are no more results
* @see #execute
*/
public final int getupdatecount  	throws sqlexception
return getstatement   getupdatecount
/**
* getmoreresults moves to a statement's next result.  it returns true if
* this result is a resultset.  getmoreresults also implicitly
* closes any current resultset obtained with getresultset.
*
* there are no more results when (!getmoreresults() &&
* (getupdatecount() == -1)
*
* @return true if the next result is a resultset; false if it is
* an update count or there are no more results
* @see #execute
* @exception sqlexception thrown on failure.
*/
public final boolean getmoreresults   throws sqlexception
return getstatement   getmoreresults
/**
* jdbc 2.0
*
* determine the result set type.
*
* @exception sqlexception feature not implemented for now.
*/
public final int getresultsettype
throws sqlexception
return getstatement   getresultsettype
/**
* jdbc 2.0
*
* give a hint as to the direction in which the rows in a result set
* will be processed. the hint applies only to result sets created
* using this statement object.  the default value is
* resultset.fetch_forward.
*
* @param direction the initial direction for processing rows
* @exception sqlexception if a database-access error occurs or direction
* is not one of resultset.fetch_forward, resultset.fetch_reverse, or
* resultset.fetch_unknown
*/
public final void setfetchdirection int direction  throws sqlexception
getstatement   setfetchdirection  direction
/**
* jdbc 2.0
*
* give the jdbc driver a hint as to the number of rows that should
* be fetched from the database when more rows are needed.  the number
* of rows specified only affects result sets created using this
* getstatement(). if the value specified is zero, then the hint is ignored.
* the default value is zero.
*
* @param rows the number of rows to fetch
* @exception sqlexception if a database-access error occurs, or the
* condition 0 <= rows <= this.getmaxrows() is not satisfied.
*/
public final void setfetchsize int rows  throws sqlexception
getstatement   setfetchsize  rows
public final int getquerytimeout
throws sqlexception
return getstatement   getquerytimeout
public final void setquerytimeout int seconds
throws sqlexception
getstatement   setquerytimeout  seconds
/*
** jdbc 3.0 methods
*/
public final boolean execute string sql
int autogeneratedkeys
throws sqlexception
return  getstatement   execute  sql  autogeneratedkeys
public final boolean execute string sql
int columnindexes
throws sqlexception
return getstatement   execute  sql  columnindexes
public final boolean execute string sql
string columnnames
throws sqlexception
return getstatement   execute  sql  columnnames
public final int executeupdate string sql
int autogeneratedkeys
throws sqlexception
int retval    getstatement   executeupdate  sql  autogeneratedkeys
return retval
public final int executeupdate string sql
int columnindexes
throws sqlexception
return  getstatement   executeupdate  sql  columnindexes
public final int executeupdate string sql
string columnnames
throws sqlexception
return getstatement   executeupdate  sql  columnnames
/**
* jdbc 3.0
*
* moves to this statement obect's next result, deals with any current resultset
* object(s) according to the instructions specified by the given flag, and
* returns true if the next result is a resultset object
*
* @param current - one of the following statement constants indicating what
* should happen to current resultset objects obtained using the method
* getresultsetclose_current_result, keep_current_result, or close_all_results
* @return true if the next result is a resultset; false if it is
* an update count or there are no more results
* @see #execute
* @exception sqlexception thrown on failure.
*/
public final boolean getmoreresults int current  throws sqlexception
return   enginestatement  getstatement    getmoreresults  current
/**
* jdbc 3.0
*
* retrieves any auto-generated keys created as a result of executing this
* statement object. if this statement object did not generate any keys, an empty
* resultset object is returned. if this statement is a non-insert statement,
* an exception will be thrown.
*
* @return a resultset object containing the auto-generated key(s) generated by
* the execution of this statement object
* @exception sqlexception if a database access error occurs
*/
public final resultset getgeneratedkeys   throws sqlexception
return wrapresultset getstatement   getgeneratedkeys
/**
* return the holdability of resultsets created by this statement.
* if this statement is active in a global transaction the
* close_cursors_on_commit will be returned regardless of
* the holdability it was created with. in a local transaction
* the original create holdabilty will be returned.
*/
public final int getresultsetholdability
throws sqlexception
int holdability
enginestatement  getstatement    getresultsetholdability
// holdability might be downgraded.
return controlcheck   checkholdcursors holdability
/*
** control methods
*/
public statement createduplicatestatement connection conn  statement oldstatement  throws sqlexception
statement newstatement
newstatement   conn createstatement resultsettype  resultsetconcurrency
resultsetholdability
setstatementstate oldstatement  newstatement
return newstatement
void setstatementstate statement oldstatement  statement newstatement  throws sqlexception
if  cursorname    null
newstatement setcursorname cursorname
if  escapeprocessing    null
newstatement setescapeprocessing escapeprocessing booleanvalue
newstatement setfetchdirection oldstatement getfetchdirection
newstatement setfetchsize oldstatement getfetchsize
newstatement setmaxfieldsize oldstatement getmaxfieldsize
newstatement setmaxrows oldstatement getmaxrows
newstatement setquerytimeout oldstatement getquerytimeout
public statement getstatement   throws sqlexception
return control getrealstatement
/**
* provide the control access to every resultset we return.
* if required the control can wrap the resultset, but
* it (the control) must ensure a underlying resultset is
* only wrapped once, if say java.sql.statement.getresultset
* is returned twice.
*
* @param rs resultset being returned, can be null.
*/
final resultset wrapresultset resultset rs
return control wrapresultset this  rs
/**
get the brokeredstatementcontrol in order to perform a check.
obtained indirectly to ensure that the correct exception is
thrown if the statement has been closed.
*/
final brokeredstatementcontrol controlcheck   throws sqlexception
// simplest method that will throw an exception if the statement is closed
getstatement   getconnection
return control
/**
* returns false unless <code>iface</code> is implemented
*
* @param  iface                  a class defining an interface.
* @return true                   if this implements the interface or
*                                directly or indirectly wraps an object
*                                that does.
* @throws java.sql.sqlexception  if an error occurs while determining
*                                whether this is a wrapper for an object
*                                with the given interface.
*/
public boolean iswrapperfor class iface  throws sqlexception
checkifclosed
return iface isinstance this
/**
* checks if the statement is closed. not implemented for this
* class since <code>isclosed()</code> is a new method in jdbc
* 4.0. the jdbc 4.0 sub-classes should override this method.
*
* @return <code>true</code> if the statement is closed,
* <code>false</code> otherwise
* @exception sqlexception not-implemented exception
*/
protected boolean isclosed   throws sqlexception
// not implemented since we cannot forward the call to a jdbc
// 4.0 method from this class. this dummy implementation is
// provided here so that checkifclosed() can be implemented
// once in this class instead of once in each of the
// brokered*statement40 classes.
throw util notimplemented
/**
* checks if the statement is closed and throws an exception if it
* is. this method relies on the <code>isclosed()</code> method
* and therefore only works with jdbc 4.0.
*
* @exception sqlexception if the statement is closed
*/
protected final void checkifclosed
throws sqlexception
if  isclosed
throw util generatecssqlexception sqlstate already_closed