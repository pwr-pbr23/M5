/*
derby - class org.apache.derby.iapi.services.io.inputstreamutil
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi services io
import java io
/**
utility methods for inputstream that are stand-ins for
a small subset of datainput methods. this avoids pushing
a datainputstream just to get this functionality.
*/
public final class inputstreamutil
private static final int skip_fragment_size   integer max_value
/**
read an unsigned byte from an inputstream, throwing an eofexception
if the end of the input is reached.
@exception ioexception if an i/o error occurs.
@exception eofexception if the end of the stream is reached
@see datainput#readunsignedbyte
*/
public static int readunsignedbyte inputstream in  throws ioexception
int b   in read
if  b < 0
throw new eofexception
return b
/**
read a number of bytes into an array.
@exception ioexception if an i/o error occurs.
@exception eofexception if the end of the stream is reached
@see datainput#readfully
*/
public static void readfully inputstream in  byte b
int offset
int len  throws ioexception
do
int bytesread   in read b  offset  len
if  bytesread < 0
throw new eofexception
len    bytesread
offset    bytesread
while  len    0
/**
read a number of bytes into an array.
keep reading in a loop until len bytes are read or eof is reached or
an exception is thrown. return the number of bytes read.
(inputstream.read(byte[],int,int) does not guarantee to read len bytes
even if it can do so without reaching eof or raising an exception.)
@exception ioexception if an i/o error occurs.
*/
public static int readloop inputstream in
byte b
int offset
int len
throws ioexception
int firstoffset   offset
do
int bytesread   in read b  offset  len
if  bytesread <  0
break
len    bytesread
offset    bytesread
while  len    0
return offset   firstoffset
/**
* skips until eof, returns number of bytes skipped.
* @param is
*      inputstream to be skipped.
* @return
*      number of bytes skipped in fact.
* @throws ioexception
*      if ioexception occurs. it doesn't contain eofexception.
* @throws nullpointerexception
*      if the param 'is' equals null.
*/
public static long skipuntileof inputstream is  throws ioexception
if is    null
throw new nullpointerexception
long bytes   0
while true
long r   skippersistent is  skip_fragment_size
bytes    r
if r < skip_fragment_size
return bytes
/**
* skips requested number of bytes,
* throws eofexception if there is too few bytes in the stream.
* @param is
*      inputstream to be skipped.
* @param skippedbytes
*      number of bytes to skip. if skippedbytes <= zero, do nothing.
* @throws eofexception
*      if eof meets before requested number of bytes are skipped.
* @throws ioexception
*      if ioexception occurs. it doesn't contain eofexception.
* @throws nullpointerexception
*      if the param 'is' equals null.
*/
public static void skipfully inputstream is  long skippedbytes
throws ioexception
if is    null
throw new nullpointerexception
if skippedbytes <  0
return
long bytes   skippersistent is  skippedbytes
if bytes < skippedbytes
throw new eofexception
/**
* tries harder to skip the requested number of bytes.
* <p>
* note that even if the method fails to skip the requested number of bytes,
* it will not throw an exception. if this happens, the caller can be sure
* that end-of-stream has been reached.
*
* @param in byte stream
* @param bytestoskip the number of bytes to skip
* @return the number of bytes skipped.
* @throws ioexception if reading from the stream fails
*/
public static final long skippersistent inputstream in  long bytestoskip
throws ioexception
long skipped   0
while  skipped < bytestoskip
long skippednow   in skip bytestoskip   skipped
if  skippednow    0
if  in read       1
// eof, return what we have and leave it up to caller to
// decide what to do about it.
break
else
skippednow   1     added to count below
skipped    skippednow
return skipped