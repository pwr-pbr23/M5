/*
derby - class org.apache.derby.impl.drda.fdocaconstants
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl drda
import java sql types
import org apache derby iapi reference drdaconstants
import java sql sqlexception
import org apache derby iapi reference limits
class fdocaconstants
//
// this is where drda fd:oca constants used to live. they were removed
// because they were not referenced anywhere.
//
static final int cpt_triplet_type   0x7f          cpt triplet type
static final int mdd_triplet_type   0x78          mdd triplet type
static final int ngda_triplet_type   0x76         n gda triplet type
static final int rlo_triplet_type   0x71          rlo triplet type
static final int sda_triplet_type   0x70          sda triplet type
static final int sda_md_type   1                  sda md type
static final int gda_md_type   2                  gda md type
static final int row_md_type   3                  row md type
static final int sqlcadta_lid   0xe0
static final int sqldtagrp_lid   0xd0             sqldtagrp lid
static final int null_lid   0x00
static final int indicator_nullable   0x00
static final int null_data   0xff
static final int typ_nullind   1
static final int max_env_lid   0x49               largest possible n gda cpt repeating
static final int max_vars_in_ngda   84            number of sqlvars in full sqldtagrp
// n-gda or cpt
static final int full_ngda_size   255             size of full sqldtagrp n gda or cpt
static final int mdd_triplet_size   7             size of mdd triplet
static final int sda_triplet_size   12            size of sda triplet
static final int sqldta_rlo_size   6              size of sqldta rlo triplet
static final int rlo_rpt_grp_size   3             size of rlo repeating group
static final int sqldtagrp_size   3               size of sqldtagrp descriptor
static final int cpt_size   3                     size of cpt descriptor
static final int fdodsc_footer_size   6           size of regular fdodsc    rlo
static final int sqldtagrp_col_dsc_size   3       env  lid   len  bytes
static final int max_overrides   250              max nbr of overrides via pairs of mdd   sda
static final int mdd_rest_size   5                size of the mdd group minus length and type
// hard-coded sqlcadta mdd
static final byte sqlcadta_mdd
byte 0x07   byte 0x78   byte 0x00
byte 0x05   byte 0x03   byte 0x01
byte 0xe0
// hard-coded sqldta mdd
static final byte sqldta_mdd
byte 0x07   byte 0x78   byte 0x00
byte 0x05   byte 0x04   byte 0x01
byte 0xf0
// hard-coded sqldta mdd
static final byte sqldtagrp_mdd
byte 0x07   byte 0x78   byte 0x00
byte 0x05   byte 0x02   byte 0x01
byte 0xd0
// hard-coded sqlcadta+sqldtard footer bytes
static final byte sqlcadta_sqldtard_rlo
byte 0x09   byte 0x71   byte 0xe0       sqlcadta
byte 0x54   byte 0x00   byte 0x01
byte 0xd0   byte 0x00   byte 0x01
byte 0x06   byte 0x71   byte 0xf0       sqldtard
byte 0xe0   byte 0x00   byte 0x00
// hard-coded sqldta rlo
static final byte sqldta_rlo
byte 0x06   byte 0x71   byte 0xe4
byte 0xd0   byte 0x00   byte 0x01
static final int sqlcadta_sqldtard_rlo_size   sqlcadta_sqldtard_rlo length
protected static boolean isnullable int fdocatype
return    fdocatype   1     1
// the maxumum length for long varchar return results is
// 64k, since we send an unsigned short.  we should be
// able to send the number of bytes in which we encode the
// length as 4 (or more) , but jcc does not support this yet.
// java_objects are returned as long varchar values by calling
// their tostring() method and their limit is 64k as well.
// but, that said, we ultimately have to match db2's limit,
// so just use that...
protected static int longvarchar_max_len   limits db2_longvarchar_maxwidth
protected static int longvarbinary_max_len   limits db2_longvarchar_maxwidth
protected static int longvarchar_len_numbytes   2
// jcc  only supports a max precision of 31 like db2
protected static int numeric_max_precision 31
protected static int numeric_default_precision numeric_max_precision
protected static int numeric_default_scale 15
/***
* map jdbctype to fdoca drda type
* @param jdbctype - jdbc type for mappingy
* @param nullable - true if type is nullable
* @param outlen - output parameter with length of type.
* @return standard drdatypelength. -1 if we don't know.
**/
protected static int mapjdbctypetodrdatype int jdbctype  boolean nullable
int outlen
throws sqlexception
int drdatype   0
switch  jdbctype
case types boolean
case java sql types bit
case java sql types tinyint
case java sql types smallint
drdatype   drdaconstants drda_type_nsmall
outlen   2
break
case java sql types integer
drdatype   drdaconstants drda_type_ninteger
outlen   4
break
case java sql types bigint
drdatype   drdaconstants drda_type_ninteger8
outlen   8
break
case java sql types real
drdatype   drdaconstants drda_type_nfloat4
outlen   4
break
case java sql types double
case java sql types float
drdatype   drdaconstants drda_type_nfloat8
outlen   8
break
case java sql types numeric
case java sql types decimal
drdatype   drdaconstants drda_type_ndecimal
//needs to be adjusted for actual value
outlen    1
break
case java sql types date
drdatype   drdaconstants drda_type_ndate
outlen   10
break
case java sql types time
drdatype   drdaconstants drda_type_ntime
outlen   8
break
case java sql types timestamp
drdatype   drdaconstants drda_type_ntimestamp
outlen   26
break
case java sql types char
//				drdatype = drdaconstants.drda_type_nchar;
//making this nvarmix for now to handle different byte length
//characters - checking with paul to see if this is the
//correct way to handle it.
drdatype   drdaconstants drda_type_nvarmix
outlen    1
break
case java sql types varchar
drdatype   drdaconstants drda_type_nvarchar
outlen    1
break
// we will just convert a java object to a string
// since jcc doesn't support it.
case java sql types java_object
drdatype   drdaconstants drda_type_nlong
outlen   longvarchar_max_len
break
case java sql types longvarchar
drdatype   drdaconstants drda_type_nlong
outlen   longvarchar_max_len
break
case java sql types binary
case java sql types varbinary
drdatype   drdaconstants drda_type_nvarbyte
outlen    1
break
case java sql types longvarbinary
drdatype   drdaconstants drda_type_nlongvarbyte
outlen   longvarbinary_max_len
break
// blob begin
// merge blob and blob_locator ????
case java sql types blob
drdatype   drdaconstants drda_type_nlobbytes
// indicates fdocadata is a place holder with 4 byte length
outlen   0x8004
break
case java sql types clob
drdatype   drdaconstants drda_type_nlobcmixed
outlen   0x8004
break
// blob end
case java sql types array
case java sql types distinct
case java sql types null
case java sql types other
case java sql types ref
case java sql types struct
throw new sqlexception     jdbctype
default
throw new sqlexception      jdbctype
if   nullable
drdatype
return drdatype