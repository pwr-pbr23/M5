/*
derby - class org.apache.derby.impl.jdbc.embedresultset
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl jdbc
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi error standardexception
import org apache derby iapi jdbc engineresultset
import org apache derby iapi sql conn languageconnectioncontext
import org apache derby iapi sql conn statementcontext
import org apache derby iapi sql resultset
import org apache derby iapi sql parametervalueset
import org apache derby iapi sql execute executionfactory
import org apache derby iapi sql execute execcursortablereference
import org apache derby iapi sql execute execrow
import org apache derby iapi sql execute noputresultset
import org apache derby impl sql execute scrollinsensitiveresultset
import org apache derby iapi sql activation
import org apache derby iapi sql execute cursoractivation
import org apache derby iapi types datatypedescriptor
import org apache derby iapi types datavaluedescriptor
import org apache derby iapi types rawtobinaryformatstream
import org apache derby iapi types readertoutf8stream
import org apache derby iapi types userdatavalue
import org apache derby iapi types variablesizedatavalue
import org apache derby iapi sql resultdescription
import org apache derby iapi services io streamstorable
import org apache derby iapi services io limitinputstream
import org apache derby iapi services io newbytearrayinputstream
import org apache derby iapi error exceptionseverity
import org apache derby iapi reference sqlstate
/* can't import these due to name overlap:
import java.sql.resultset;
*/
import java sql blob
import java sql clob
import java sql statement
import java sql sqlexception
import java sql sqlwarning
import java sql resultsetmetadata
import java sql date
import java sql time
import java sql timestamp
import java sql types
import java io reader
import java io inputstream
import java io ioexception
import java net url
import java util arrays
import java util calendar
import org apache derby iapi jdbc characterstreamdescriptor
import org apache derby iapi sql dictionary datadictionary
import org apache derby iapi types stringdatavalue
/**
* a embedresultset for results from the embedstatement family.
<p><b>supports</b>
<ul>
<li> jsr 169
</ul>
*/
public abstract class embedresultset extends connectionchild
implements engineresultset  comparable
// cursor movement
protected static final int first   1
protected static final int next   2
protected static final int last   3
protected static final int previous   4
protected static final int beforefirst   5
protected static final int afterlast   6
protected static final int absolute   7
protected static final int relative   8
/**
* the currentrow contains the data of the current row of the resultset.
* if currentrow is null, the cursor is not postioned on a row
*/
private execrow currentrow
protected boolean wasnull
/**
* set if this resultset is definitely closed.
* if the connection has been closed, or the database
*  or system shutdown but the resultset has not been
*  closed explictly then this may be false. once
*  this object detects the connection is closed
*  isclosed will be set to true.
*/
boolean isclosed
private boolean isoninsertrow
private object	currentstream
// immutable state
private resultset theresults
private boolean formetadata
private sqlwarning topwarning
/**
this activation is set by embedstatement
for a single execution activation. ie.
a resultset from a statement.executequery() or
a resultset that is now a dynamic result set.
in this case the closing of this resultset will close
the activation or the finalization of the parent embedstatement
without it being closed will mark the activation as unused.
@see embedstatement#finalize()
@see embedpreparedstatement#finalize()
*/
activation singleuseactivation
// order of creation
final int order
private final resultdescription resultdescription
// max rows limit for this result set
private int maxrows
// the maximum field size limt set for this result set
private final int maxfieldsize
/*
* incase of forward only cursors we limit the number of rows
* returned if the maxrows is set. the following varible is used
* to keep the count of number of rows returned to the user.
*/
private int numberoffetchedrows
/**
* the statement object that originally created us.
we hang on to the statement to prevent gc from
closing it under us
*/
private final embedstatement stmt
/**
* the statement that currently owns this resultset.
* statements created in procedures are passed off
* to the statement that called the procedure.
* this is to avoid the resultset being closed
* due to the statement within the procedure
* or the nested connection being closed.
*/
private embedstatement owningstmt
/**
* statement object the application used to
* create this resultset.
*/
private statement applicationstmt
private final long timeoutmillis
private final boolean isatomic
private final int concurrencyofthisresultset
/* updaterow is used to keep the values which are updated with updatexxx()
* calls. it is used by both insertrow() and updaterow().
* it is initialized to null if the resultset is not updatable.
*/
private final execrow updaterow
/* these are the columns which have been updated so far.
*/
private boolean columngotupdated
private boolean currentrowhasbeenupdated    gets set to true after first updatexxx on a row  gets reset to false when the cursor moves off the row
private int fetchdirection
private int fetchsize
/**
* indicates which columns have already been fetched
* as a stream for a row. created on-demand by a getxxxstream call.
*/
private boolean streamusedflags
/**
* this class provides the glue between the derby
* resultset and the jdbc resultset, mapping calls-to-calls.
*/
public embedresultset embedconnection conn  resultset resultstowrap
boolean formetadata  embedstatement stmt  boolean isatomic
throws sqlexception
super conn
if  sanitymanager debug
sanitymanager assert resultstowrap  null
theresults   resultstowrap
// resultset's for metadata are single use, they are created
// with a preparedstatement internally, but that statement is
// never returned to the application.
if  this formetadata   formetadata
singleuseactivation   resultstowrap getactivation
this applicationstmt   this stmt   owningstmt   stmt
this timeoutmillis   stmt    null
? 0l
stmt timeoutmillis
this isatomic   isatomic
//if the statement object has concur_read_only set on it then the concurrency on the resultset object will be concur_read_only also.
//but, if the statement object has concur_updatable set on it, then the concurrency on the resultset object can be
//concur_read_only or concur_updatable depending on whether the underlying language resultset is updateable or not.
//if the underlying language resultset is not updateable, then the concurrency of the resultset object will be concur_read_only
//and a warning will be issued on the resultset object.
if  stmt    null
concurrencyofthisresultset   java sql resultset concur_read_only
else if  stmt resultsetconcurrency    java sql resultset concur_read_only
concurrencyofthisresultset   java sql resultset concur_read_only
else
if   isforupdate        language resultset not updatable
concurrencyofthisresultset   java sql resultset concur_read_only
sqlwarning w   standardexception newwarning sqlstate query_not_qualified_for_updatable_resultset
addwarning w
else
concurrencyofthisresultset   java sql resultset concur_updatable
// fill in the column types
resultdescription   theresults getactivation   getresultdescription
// only incur the cost of allocating and maintaining
// updated column information if the columns can be updated.
if  concurrencyofthisresultset    java sql resultset concur_updatable
final int columncount   resultdescription getcolumncount
final executionfactory factory   conn getlanguageconnection
getlanguageconnectionfactory   getexecutionfactory
try
//initialize arrays related to updaterow implementation
columngotupdated   new boolean
updaterow   factory getvaluerow columncount
for  int i   1  i <  columncount  i
updaterow setcolumn i  resultdescription getcolumndescriptor i
gettype   getnull
initializeupdaterowmodifiers
catch  standardexception t
throw nostatechangeexception t
else
updaterow   null
// assign the max rows and maxfiled size limit for this result set
if  stmt    null
// at connectivity level we handle only for forward only cursor
if  stmt resultsettype    java sql resultset type_forward_only
maxrows   stmt maxrows
maxfieldsize   stmt maxfieldsize
else
maxfieldsize   0
order   conn getresultsetorderid
private void checknotoninsertrow   throws sqlexception
if  isoninsertrow
throw newsqlexception sqlstate no_current_row
// checkonrow protects us from making requests of
// resultset that would fail with nullpointerexceptions
// or milder problems due to not having a row.
protected final void checkonrow   throws sqlexception
if  currentrow    null
throw newsqlexception sqlstate no_current_row
/**
* initializes the currentrowhasbeenupdated and columngotupdated fields
*/
private void initializeupdaterowmodifiers
currentrowhasbeenupdated   false
arrays fill columngotupdated  false
/**
check the column is in range *and* return the jdbc type of the column.
@exception sqlexception resultset is not on a row or columnindex is out of range.
*/
final int getcolumntype int columnindex  throws sqlexception
if   isoninsertrow  checkonrow       first make sure there's a row
if  columnindex < 1
columnindex > resultdescription getcolumncount
throw newsqlexception sqlstate column_not_found
new integer columnindex
return resultdescription getcolumndescriptor columnindex  gettype   getjdbctypeid
/*
* java.sql.resultset interface
*/
/**
* a resultset is initially positioned before its first row; the
* first call to next makes the first row the current row; the
* second call makes the second row the current row, etc.
*
* <p>if an input stream from the previous row is open, it is
* implicitly closed. the resultset's warning chain is cleared
* when a new row is read.
*
* @return true if the new current row is valid; false if there
* are no more rows
* @exception sqlexception thrown on failure.
*/
public boolean next   throws sqlexception
// we seem to have some trigger paths which don't have
// statement initialized, may not need this check in those cases
if  maxrows   0
numberoffetchedrows
// check whether we hit the maxrows limit
if  numberoffetchedrows > maxrows
//we return false for the next call when maxrows is hit
closecurrentstream
return false
return moveposition next  0
protected boolean moveposition int position  string positiontext
throws sqlexception
return moveposition position  0  positiontext
protected boolean moveposition int position  int row  string positiontext
throws sqlexception
closecurrentstream   	   closing currentstream does not depend on the
// underlying connection.  do this outside of
// the connection synchronization.
checkexecifclosed positiontext  	   checking result set closure does not depend
// on the underlying connection.  do this
// outside of the connection synchronization.
if  isoninsertrow
movetocurrentrow
synchronized  getconnectionsynchronization
setupcontextstack
try
languageconnectioncontext lcc   getembedconnection   getlanguageconnection
final execrow newrow
try
/* push and pop a statementcontext around a next call
* so that the resultset will get correctly closed down
* on an error.
* (cache the languageconnectioncontext)
*/
statementcontext statementcontext
lcc pushstatementcontext isatomic
concurrencyofthisresultset  java sql resultset concur_read_only
getsqltext
getparametervalueset
false  timeoutmillis
switch  position
case beforefirst
newrow   theresults setbeforefirstrow
break
case first
newrow   theresults getfirstrow
break
case next
newrow   theresults getnextrow
break
case last
newrow   theresults getlastrow
break
case afterlast
newrow   theresults setafterlastrow
break
case previous
newrow   theresults getpreviousrow
break
case absolute
newrow   theresults getabsoluterow row
break
case relative
newrow   theresults getrelativerow row
break
default
newrow   null
if  sanitymanager debug
sanitymanager throwassert
position
lcc popstatementcontext statementcontext  null
catch  throwable t
/*
* need to close the result set here because the error might
* cause us to lose the current connection if this is an xa
* connection and we won't be able to do the close later
*/
throw closeontransactionerror t
sqlwarning w   theresults getwarnings
if  w    null
if  topwarning    null
topwarning   w
else
topwarning setnextwarning w
boolean onrow    currentrow   newrow     null
//if (onrow && !(currentrow instanceof org.apache.derby.impl.sql.execute.valuerow))
//	system.out.println(currentrow.getclass());
// the resultset may implicitly close when when the resultset type
// is type_forward_only and the next method of resultset returns
// false. this will cause a commit if autocommit = true.
if   onrow     position    next
// in case of resultset for metadata, we will only commit
// if we are the only statement currently opened for this
// connection; otherwise we don't want to affect other
// resultset's by committing the metadata one.
// there is no internal xact (xact isolation) for metadata type
// of resultset; therefore committing (to release locks) would end
// up committing all the other resultset for this connection.
//
// we do synchronize on the connection, therefore activation count
// should be valid and protected.
//
//languageconnectioncontext lcc = getembedconnection().getlanguageconnection();
if  formetadata     lcc getactivationcount   > 1
// we do not want to commit here as there seems to be other
// statements/resultsets currently opened for this connection.
else if  owningstmt    null
owningstmt getresultsettype      type_forward_only
// allow the satement to commit if required.
owningstmt resultsetclosing this
// clear the indication of which columns were fetched as streams.
if  streamusedflags    null
arrays fill streamusedflags  false
if  columngotupdated    null    currentrowhasbeenupdated
initializeupdaterowmodifiers
return onrow
finally
restorecontextstack
/**
* in some cases, it is desirable to immediately release a
* resultset's database and jdbc resources instead of waiting for
* this to happen when it is automatically closed; the close
* method provides this immediate release.
*
* <p><b>note:</b> a resultset is automatically closed by the
* statement that generated it when that statement is closed,
* re-executed, or is used to retrieve the next result from a
* sequence of multiple results. a resultset is also automatically
* closed when it is garbage collected.
* @exception sqlexception thrown on failure.
*/
public void close   throws sqlexception
/* if this result is already closed, don't try to close again
* we may have closed it earlier because of an error and trying
* to close again will cause a different problem if the connection
* has been closed as in xa error handling
*/
if  isclosed
return
closecurrentstream   	   closing currentstream does not depend on the
// underlying connection.  do this outside of
// the connection synchronization.
// would like to throw an exception if already closed, but
// some code assumes you can close a java.sql.resultset more than once.
// checkifclosed("close");
// synchronize out here so the close and the autocommit are
// both in the same sync block.
synchronized  getconnectionsynchronization
try
setupcontextstack       make sure there's context
catch  sqlexception se
// we may get an exception here if this is part of an xa transaction
// and the transaction has been committed
// just give up and return
return
try
try
theresults close
if  this singleuseactivation    null
this singleuseactivation close
this singleuseactivation   null
catch  throwable t
throw handleexception t
// in case of resultset for metadata, we will only commit
// if we are the only statement currently opened for this
// connection; otherwise we don't want to affect other
// resultset's by committing the metadata one.
// there is no internal xact (xact isolation) for metadata type
// of resultset; therefore committing (to release locks) would end
// up committing all the other resultset for this connection.
//
// we do synchronize on the connection, therefore activation count
// should be valid and protected.
//
if  formetadata
languageconnectioncontext lcc   getembedconnection   getlanguageconnection
if  lcc getactivationcount   > 1
// we do not want to commit here as there seems to be other
// statements/resultsets currently opened for this connection.
else if  owningstmt    null
// allow the satement to commit if required.
owningstmt resultsetclosing this
else if  owningstmt    null
// allow the satement to commit if required.
owningstmt resultsetclosing this
finally
isclosed   true
restorecontextstack
// the idea is to release resources, so:
currentrow   null
// we hang on to theresults and messenger
// in case more calls come in on this resultset
/**
* a column may have the value of sql null; wasnull reports whether
* the last column read had this special value.
* note that you must first call getxxx on a column to try to read
* its value and then call wasnull() to find if the value was
* the sql null.
*
* <p> we take the least exception approach and simply return false
* if no column has been read yet.
*
* @return true if last column read was sql null
*
* @exception sqlexception		thrown if this resultset is closed
*/
public final boolean wasnull   throws sqlexception
checkifclosed
return wasnull
//======================================================================
// methods for accessing results by column index
//======================================================================
/**
* get the value of a column in the current row as a java string.
*
* @param columnindex the first column is 1, the second is 2, ...
* @return the column value; if the value is sql null, the result is null
* @exception sqlexception thrown on failure.
*/
public final string getstring int columnindex  throws sqlexception
checkifclosed
try
datavaluedescriptor dvd   getcolumn columnindex
if  wasnull   dvd isnull
return null
string value   dvd getstring
// check for the max field size limit
if  maxfieldsize > 0    ismaxfieldsizetype getcolumntype columnindex
if  value length   > maxfieldsize
value   value substring 0  maxfieldsize
return value
catch  throwable t
throw nostatechangeexception t
/**
* get the value of a column in the current row as a java boolean.
*
* @param columnindex the first column is 1, the second is 2, ...
* @return the column value; if the value is sql null, the result is false
* @exception sqlexception thrown on failure.
*/
public final boolean getboolean int columnindex  throws sqlexception
checkifclosed
try
datavaluedescriptor dvd   getcolumn columnindex
if  wasnull   dvd isnull
return false
return dvd getboolean
catch  standardexception t
throw nostatechangeexception t
/**
* get the value of a column in the current row as a java byte.
*
* @param columnindex the first column is 1, the second is 2, ...
* @return the column value; if the value is sql null, the result is 0
* @exception sqlexception thrown on failure.
*/
public final byte getbyte int columnindex  throws sqlexception
checkifclosed
try
datavaluedescriptor dvd   getcolumn columnindex
if  wasnull   dvd isnull
return 0
return dvd getbyte
catch  standardexception t
throw nostatechangeexception t
/**
* get the value of a column in the current row as a java short.
*
* @param columnindex the first column is 1, the second is 2, ...
* @return the column value; if the value is sql null, the result is 0
* @exception sqlexception thrown on failure.
*/
public final short getshort int columnindex  throws sqlexception
checkifclosed
try
datavaluedescriptor dvd   getcolumn columnindex
if  wasnull   dvd isnull
return 0
return dvd getshort
catch  standardexception t
throw nostatechangeexception t
/**
* get the value of a column in the current row as a java int.
*
* @param columnindex the first column is 1, the second is 2, ...
* @return the column value; if the value is sql null, the result is 0
* @exception sqlexception thrown on failure.
*/
public final int getint int columnindex  throws sqlexception
checkifclosed
try
datavaluedescriptor dvd   getcolumn columnindex
if  wasnull   dvd isnull
return 0
return dvd getint
catch  standardexception t
throw nostatechangeexception t
/**
* get the value of a column in the current row as a java long.
*
* @param columnindex the first column is 1, the second is 2, ...
* @return the column value; if the value is sql null, the result is 0
* @exception sqlexception thrown on failure.
*/
public final long getlong int columnindex  throws sqlexception
checkifclosed
try
datavaluedescriptor dvd   getcolumn columnindex
if  wasnull   dvd isnull
return 0
return dvd getlong
catch  standardexception t
throw nostatechangeexception t
/**
* get the value of a column in the current row as a java float.
*
* @param columnindex the first column is 1, the second is 2, ...
* @return the column value; if the value is sql null, the result is 0
* @exception sqlexception thrown on failure.
*/
public final float getfloat int columnindex  throws sqlexception
checkifclosed
try
datavaluedescriptor dvd   getcolumn columnindex
if  wasnull   dvd isnull
return 0 0f
return dvd getfloat
catch  standardexception t
throw nostatechangeexception t
/**
* get the value of a column in the current row as a java double.
*
* @param columnindex the first column is 1, the second is 2, ...
* @return the column value; if the value is sql null, the result is 0
* @exception sqlexception thrown on failure.
*/
public final double getdouble int columnindex  throws sqlexception
checkifclosed
try
datavaluedescriptor dvd   getcolumn columnindex
if  wasnull   dvd isnull
return 0 0
return dvd getdouble
catch  standardexception t
throw nostatechangeexception t
/**
* get the value of a column in the current row as a java byte array.
* the bytes represent the raw values returned by the driver.
*
* @param columnindex the first column is 1, the second is 2, ...
* @return the column value; if the value is sql null, the result is null
* @exception sqlexception thrown on failure.
*/
public final byte getbytes int columnindex  throws sqlexception
checkifclosed
try
datavaluedescriptor dvd   getcolumn columnindex
if  wasnull   dvd isnull
return null
byte value   dvd getbytes
// check for the max field size limit
if  maxfieldsize > 0    ismaxfieldsizetype getcolumntype columnindex
if  value length > maxfieldsize
byte  limited_value   new byte
system arraycopy value  0  limited_value
0   maxfieldsize
value   limited_value
return value
catch  standardexception t
throw nostatechangeexception t
/**
* get the value of a column in the current row as a java.sql.date object.
*
* @param columnindex the first column is 1, the second is 2, ...
* @return the column value; if the value is sql null, the result is null
* @exception sqlexception thrown on failure.
*/
public final date getdate int columnindex  throws sqlexception
return getdate  columnindex   calendar  null
/**
* get the value of a column in the current row as a java.sql.time object.
*
* @param columnindex the first column is 1, the second is 2, ...
* @return the column value; if the value is sql null, the result is null
* @exception sqlexception thrown on failure.
*/
public final time gettime int columnindex  throws sqlexception
return gettime  columnindex   calendar  null
/**
* get the value of a column in the current row as a java.sql.timestamp object.
*
* @param columnindex the first column is 1, the second is 2, ...
* @return the column value; if the value is sql null, the result is null
* @exception sqlexception thrown on failure.
*/
public final timestamp gettimestamp int columnindex  throws sqlexception
return gettimestamp  columnindex   calendar  null
/**
* jdbc 2.0
*
* get the value of a column in the current row as a java.sql.date
* object.  use the calendar to construct an appropriate millisecond
* value for the date, if the underlying database doesn't store
* timezone information.
*
* @param columnindex the first column is 1, the second is 2, ...
* @param cal the calendar to use in constructing the date
* @return the column value; if the value is sql null, the result is null
* @exception sqlexception if a database-access error occurs.
*/
public java sql date getdate int columnindex  calendar cal
throws sqlexception
checkifclosed
try
datavaluedescriptor dvd   getcolumn columnindex
if  wasnull   dvd isnull
return null
if  cal    null
cal   getcal
return dvd getdate  cal
catch  standardexception t
throw nostatechangeexception t
/**
* jdbc 2.0
*
* get the value of a column in the current row as a java.sql.date
* object. use the calendar to construct an appropriate millisecond
* value for the date, if the underlying database doesn't store
* timezone information.
*
* @param columnname is the sql name of the column
* @param cal the calendar to use in constructing the date
* @return the column value; if the value is sql null, the result is null
* @exception sqlexception if a database-access error occurs.
*/
public java sql date getdate string columnname  calendar cal
throws sqlexception
checkifclosed
return getdate  findcolumnname columnname   cal
/**
* jdbc 2.0
*
* get the value of a column in the current row as a java.sql.time
* object. use the calendar to construct an appropriate millisecond
* value for the time, if the underlying database doesn't store
* timezone information.
*
* @param columnindex the first column is 1, the second is 2, ...
* @param cal the calendar to use in constructing the time
* @return the column value; if the value is sql null, the result is null
* @exception sqlexception if a database-access error occurs.
*/
public java sql time gettime int columnindex  calendar cal
throws sqlexception
checkifclosed
try
datavaluedescriptor dvd   getcolumn columnindex
if  wasnull   dvd isnull
return null
if  cal    null
cal   getcal
return dvd gettime  cal
catch  standardexception t
throw nostatechangeexception t
/**
* jdbc 2.0
*
* get the value of a column in the current row as a java.sql.time
* object. use the calendar to construct an appropriate millisecond
* value for the time, if the underlying database doesn't store
* timezone information.
*
* @param columnname is the sql name of the column
* @param cal the calendar to use in constructing the time
* @return the column value; if the value is sql null, the result is null
* @exception sqlexception if a database-access error occurs.
*/
public java sql time gettime string columnname  calendar cal
throws sqlexception
checkifclosed
return gettime  findcolumnname  columnname   cal
/**
* jdbc 2.0
*
* get the value of a column in the current row as a java.sql.timestamp
* object. use the calendar to construct an appropriate millisecond
* value for the timestamp, if the underlying database doesn't store
* timezone information.
*
* @param columnname is the sql name of the column
* @param cal the calendar to use in constructing the timestamp
* @return the column value; if the value is sql null, the result is null
* @exception sqlexception if a database-access error occurs.
*/
public java sql timestamp gettimestamp string columnname  calendar cal
throws sqlexception
checkifclosed
return gettimestamp findcolumnname columnname   cal
/**
* jdbc 2.0
*
* get the value of a column in the current row as a java.sql.timestamp
* object. use the calendar to construct an appropriate millisecond
* value for the timestamp, if the underlying database doesn't store
* timezone information.
*
* @param columnindex the first column is 1, the second is 2, ...
* @param cal the calendar to use in constructing the timestamp
* @return the column value; if the value is sql null, the result is null
* @exception sqlexception if a database-access error occurs.
*/
public java sql timestamp gettimestamp int columnindex  calendar cal
throws sqlexception
checkifclosed
try
datavaluedescriptor dvd   getcolumn columnindex
if  wasnull   dvd isnull
return null
if  cal    null
cal   getcal
return dvd gettimestamp  cal
catch  standardexception t
throw nostatechangeexception t
/**
* jdbc 2.0
*
* <p>get the value of a column in the current row as a java.io.reader.
*
* @exception sqlexception database error.
*/
public final java io reader getcharacterstream int columnindex
throws sqlexception
checkifclosed
int lmfs
int coltype   getcolumntype columnindex
switch  coltype
case types char
case types varchar
case types longvarchar
lmfs   maxfieldsize
break
case types clob     embedded and jcc extension   clob is not subject to max field size
lmfs   0
break
// jdbc says to support these, but no defintion exists for the output.
// match jcc which treats the bytes as a utf16-be stream
case types binary
case types varbinary
case types longvarbinary
case types blob
try
java io inputstream is   getbinarystream columnindex
if  is    null
return null
java io reader r   new java io inputstreamreader is
currentstream   r
return r
catch  java io unsupportedencodingexception uee
throw new sqlexception uee getmessage
default
throw datatypeconversion    columnindex
object synclock   getconnectionsynchronization
synchronized  synclock
boolean pushstack   false
try
usestream columnindex
stringdatavalue dvd    stringdatavalue getcolumn columnindex
if  wasnull   dvd isnull      return null
pushstack   true
setupcontextstack
characterstreamdescriptor csd   dvd getstreamwithdescriptor
if  csd    null
string val   dvd getstring
if  lmfs > 0
if  val length   > lmfs
val   val substring 0  lmfs
java io reader ret   new java io stringreader val
currentstream   ret
return ret
// see if we have to enforce a max field size.
if  lmfs > 0
csd   new characterstreamdescriptor builder   copystate csd
maxcharlength lmfs  build
java io reader ret   new utf8reader csd  this  synclock
currentstream   ret
return ret
catch  throwable t
throw nostatechangeexception t
finally
if  pushstack    restorecontextstack
/**
pushes a converter on top of getcharacterstream().
*
* @param columnindex the first column is 1, the second is 2, ...
* @return a java input stream that delivers the database column value
* as a stream of one byte ascii characters.  if the value is sql null
* then the result is null.
* @exception sqlexception thrown on failure.
*/
public final inputstream getasciistream int columnindex  throws sqlexception
checkifclosed
int coltype   getcolumntype columnindex
switch  coltype
case types char
case types varchar
case types longvarchar
case types clob     embedded and jcc extension
break
// jdbc says to support these, we match jcc by returning the raw bytes.
case types binary
case types varbinary
case types longvarbinary
case types blob
return getbinarystream columnindex
default
throw datatypeconversion    columnindex
java io reader reader   getcharacterstream columnindex
if  reader    null
return null
return new readertoascii reader
/**
* get the column as an inputstream. if the column is already of type
inputstream then just return it, otherwise convert the column to a set
of bytes and create a stream out of the bytes.
*
* @param columnindex the first column is 1, the second is 2, ...
* @return a java input stream that delivers the database column value
* as a stream of uninterpreted bytes.  if the value is sql null
* then the result is null.
* @exception sqlexception thrown on failure.
*/
public final inputstream getbinarystream int columnindex  throws sqlexception
checkifclosed
int lmfs
int coltype   getcolumntype columnindex
switch  coltype
case types binary
case types varbinary
case types longvarbinary
lmfs   maxfieldsize
break
case types blob
lmfs   0
break
default
throw datatypeconversion    columnindex
object synclock   getconnectionsynchronization
synchronized  synclock
boolean pushstack   false
try
usestream columnindex
datavaluedescriptor dvd   getcolumn columnindex
if  wasnull   dvd isnull      return null
pushstack   true
setupcontextstack
streamstorable ss    streamstorable  dvd
inputstream stream   ss returnstream
if  stream    null
stream   new newbytearrayinputstream dvd getbytes
else
stream   new binarytorawstream stream  dvd
if  lmfs > 0
// just wrap the inputstream with a limitinputstream class
limitinputstream  limitresultin   new  limitinputstream stream
limitresultin setlimit lmfs
stream   limitresultin
currentstream   stream
return stream
catch  throwable t
throw nostatechangeexception t
finally
if  pushstack    restorecontextstack
//======================================================================
// methods for accessing results by column name
//======================================================================
/**
* get the value of a column in the current row as a java string.
*
* @param columnname is the sql name of the column
* @return the column value; if the value is sql null, the result is null
* @exception sqlexception thrown on failure.
*/
public final string getstring string columnname  throws sqlexception
checkifclosed
return  getstring findcolumnname columnname
/**
* get the value of a column in the current row as a java boolean.
*
* @param columnname is the sql name of the column
* @return the column value; if the value is sql null, the result is false
* @exception sqlexception thrown on failure.
*/
public final boolean getboolean string columnname  throws sqlexception
checkifclosed
return  getboolean findcolumnname columnname
/**
* get the value of a column in the current row as a java byte.
*
* @param columnname is the sql name of the column
* @return the column value; if the value is sql null, the result is 0
* @exception sqlexception thrown on failure.
*/
public final byte getbyte string columnname  throws sqlexception
checkifclosed
return  getbyte findcolumnname columnname
/**
* get the value of a column in the current row as a java short.
*
* @param columnname is the sql name of the column
* @return the column value; if the value is sql null, the result is 0
* @exception sqlexception thrown on failure.
*/
public final short getshort string columnname  throws sqlexception
checkifclosed
return  getshort findcolumnname columnname
/**
* get the value of a column in the current row as a java int.
*
* @param columnname is the sql name of the column
* @return the column value; if the value is sql null, the result is 0
* @exception sqlexception thrown on failure.
*/
public final int getint string columnname  throws sqlexception
checkifclosed
return  getint findcolumnname columnname
/**
* get the value of a column in the current row as a java long.
*
* @param columnname is the sql name of the column
* @return the column value; if the value is sql null, the result is 0
* @exception sqlexception thrown on failure.
*/
public final long getlong string columnname  throws sqlexception
checkifclosed
return  getlong findcolumnname columnname
/**
* get the value of a column in the current row as a java float.
*
* @param columnname is the sql name of the column
* @return the column value; if the value is sql null, the result is 0
* @exception sqlexception thrown on failure.
*/
public final float getfloat string columnname  throws sqlexception
checkifclosed
return  getfloat findcolumnname columnname
/**
* get the value of a column in the current row as a java double.
*
* @param columnname is the sql name of the column
* @return the column value; if the value is sql null, the result is 0
* @exception sqlexception thrown on failure.
*/
public final double getdouble string columnname  throws sqlexception
checkifclosed
return  getdouble findcolumnname columnname
/**
* get the value of a column in the current row as a java byte array.
* the bytes represent the raw values returned by the driver.
*
* @param columnname is the sql name of the column
* @return the column value; if the value is sql null, the result is null
* @exception sqlexception thrown on failure.
*/
public final byte getbytes string columnname  throws sqlexception
checkifclosed
return  getbytes findcolumnname columnname
/**
* get the value of a column in the current row as a java.sql.date object.
*
* @param columnname is the sql name of the column
* @return the column value; if the value is sql null, the result is null
* @exception sqlexception thrown on failure.
*/
public final date getdate string columnname  throws sqlexception
checkifclosed
return  getdate findcolumnname columnname
/**
* get the value of a column in the current row as a java.sql.time object.
*
* @param columnname is the sql name of the column
* @return the column value; if the value is sql null, the result is null
* @exception sqlexception thrown on failure.
*/
public final time gettime string columnname  throws sqlexception
checkifclosed
return  gettime findcolumnname columnname
/**
* get the value of a column in the current row as a java.sql.timestamp object.
*
* @param columnname is the sql name of the column
* @return the column value; if the value is sql null, the result is null
* @exception sqlexception thrown on failure.
*/
public final timestamp gettimestamp string columnname  throws sqlexception
checkifclosed
return  gettimestamp findcolumnname columnname
/**
* jdbc 2.0
*
* <p>get the value of a column in the current row as a java.io.reader.
*
* @exception sqlexception feature not implemented for now.
*/
public final java io reader getcharacterstream string columnname
throws sqlexception
checkifclosed
return  getcharacterstream findcolumnname columnname
/**
* a column value can be retrieved as a stream of ascii characters
* and then read in chunks from the stream.  this method is particularly
* suitable for retrieving large longvarchar values.  the jdbc driver will
* do any necessary conversion from the database format into ascii.
*
* <p><b>note:</b> all the data in the returned stream must
* be read prior to getting the value of any other column. the
* next call to a get method implicitly closes the stream.
*
* @param columnname is the sql name of the column
* @return a java input stream that delivers the database column value
* as a stream of one byte ascii characters.  if the value is sql null
* then the result is null.
* @exception sqlexception thrown on failure.
*/
public final inputstream getasciistream string columnname  throws sqlexception
checkifclosed
return  getasciistream findcolumnname columnname
/**
* a column value can be retrieved as a stream of uninterpreted bytes
* and then read in chunks from the stream.  this method is particularly
* suitable for retrieving large longvarbinary values.
*
* <p><b>note:</b> all the data in the returned stream must
* be read prior to getting the value of any other column. the
* next call to a get method implicitly closes the stream.
*
* @param columnname is the sql name of the column
* @return a java input stream that delivers the database column value
* as a stream of uninterpreted bytes.  if the value is sql null
* then the result is null.
* @exception sqlexception thrown on failure.
*/
public final inputstream getbinarystream string columnname  throws sqlexception
checkifclosed
return  getbinarystream findcolumnname columnname
/**
* jdbc 3.0
*
* retrieves the value of the designated column in the current row of this
* resultset object as a java.net.url object in the java programming
* language.
*
* @param columnindex -
*            the first column is 1, the second is 2
* @return the column value as a java.net.url object, if the value is sql
*         null, the value returned is null in the java programming language
* @exception sqlexception
*                feature not implemented for now.
*/
public url geturl int columnindex  throws sqlexception
throw util notimplemented
/**
* jdbc 3.0
*
* retrieves the value of the designated column in the current row of this
* resultset object as a java.net.url object in the java programming
* language.
*
* @param columnname -
*            the sql name of the column
* @return the column value as a java.net.url object, if the value is sql
*         null, the value returned is null in the java programming language
* @exception sqlexception
*                feature not implemented for now.
*/
public url geturl string columnname  throws sqlexception
throw util notimplemented
//=====================================================================
// advanced features:
//=====================================================================
/**
* <p>the first warning reported by calls on this resultset is
* returned. subsequent resultset warnings will be chained to this
* sqlwarning.
*
* <p>the warning chain is automatically cleared each time a new
* row is read.
*
* <p><b>note:</b> this warning chain only covers warnings caused
* by resultset methods.  any warning caused by statement methods
* (such as reading out parameters) will be chained on the
* statement object.
*
* @return the first sqlwarning or null
*
* @exception sqlexception 	thrown if this resultset is closed
*/
public final sqlwarning getwarnings   throws sqlexception
checkifclosed
return topwarning
/**
* after this call getwarnings returns null until a new warning is
* reported for this resultset.
*
* @exception sqlexception	thrown if this resultset is closed
*/
public final void clearwarnings   throws sqlexception
checkifclosed
topwarning   null
/**
* get the name of the sql cursor used by this resultset.
*
* <p>in sql, a result table is retrieved through a cursor that is
* named. the current row of a result can be updated or deleted
* using a positioned update/delete statement that references the
* cursor name.
*
* <p>jdbc supports this sql feature by providing the name of the
* sql cursor used by a resultset. the current row of a resultset
* is also the current row of this sql cursor.
*
* <p><b>note:</b> if positioned update is not supported a
* sqlexception is thrown
*
* @return the resultset's sql cursor name
* @exception sqlexception thrown on failure.
*/
public final string getcursorname   throws sqlexception
checkifclosed    	   checking result set closure does not depend
// on the underlying connection.  do this
// outside of the connection synchronization.
return theresults getcursorname
/**
* the number, types and properties of a resultset's columns
* are provided by the getmetadata method.
*
* @return the description of a resultset's columns
* @exception sqlexception thrown on failure.
*/
public final resultsetmetadata getmetadata   throws sqlexception
checkifclosed    	   checking result set closure does not depend
// on the underlying connection.
resultsetmetadata rmetadata
resultdescription getmetadata
if  rmetadata    null
// save this object at the plan level
rmetadata   factory newembedresultsetmetadata
resultdescription getcolumninfo
resultdescription setmetadata rmetadata
return rmetadata
/**
* jdbc 4.0
*
* <p>
* retrieves the holdability for this <code>resultset</code>
* object.
*
* @return either <code>resultset.hold_cursors_over_commit</code>
*         or <code>resultset.close_cursors_at_commit</code>
* @exception sqlexception
*                if a database error occurs
*/
public final int getholdability   throws sqlexception
checkifclosed
if  theresults getactivation   getresultsetholdability
return java sql resultset hold_cursors_over_commit
return java sql resultset close_cursors_at_commit
/**
* <p>get the value of a column in the current row as a java object.
*
* <p>this method will return the value of the given column as a
* java object.  the type of the java object will be the default
* java object type corresponding to the column's sql type,
* following the mapping specified in the jdbc spec.
*
* <p>this method may also be used to read datatabase specific abstract
* data types.
*
* jdbc 2.0
*
* new behavior for getobject().
* the behavior of method getobject() is extended to materialize
* data of sql user-defined types.  when the column @columnindex is
* a structured or distinct value, the behavior of this method is as
* if it were a call to: getobject(columnindex,
* this.getstatement().getconnection().gettypemap()).
*
* @param columnindex the first column is 1, the second is 2, ...
* @return a java.lang.object holding the column value.
* @exception sqlexception thrown on failure.
*/
public final object getobject int columnindex  throws sqlexception
checkifclosed
// need special handling for some types.
int coltype   getcolumntype columnindex
switch  coltype
case types char
case types varchar
case types longvarchar
// handles maxfield size correctly
return getstring columnindex
case types clob
return getclob columnindex
case types binary
case types varbinary
case types longvarbinary
// handles maxfield size correctly
return getbytes columnindex
case types blob
return getblob columnindex
default
break
try
datavaluedescriptor dvd   getcolumn columnindex
if  wasnull   dvd isnull
return null
return dvd getobject
catch  standardexception t
throw nostatechangeexception t
/**
* <p>get the value of a column in the current row as a java object.
*
* <p>this method will return the value of the given column as a
* java object.  the type of the java object will be the default
* java object type corresponding to the column's sql type,
* following the mapping specified in the jdbc spec.
*
* <p>this method may also be used to read datatabase specific abstract
* data types.
*
* jdbc 2.0
*
* new behavior for getobject().
* the behavior of method getobject() is extended to materialize
* data of sql user-defined types.  when the column @columnname is
* a structured or distinct value, the behavior of this method is as
* if it were a call to: getobject(columnname,
* this.getstatement().getconnection().gettypemap()).
*
* @param columnname is the sql name of the column
* @return a java.lang.object holding the column value.
* @exception sqlexception thrown on failure.
*/
public final object getobject string columnname  throws sqlexception
checkifclosed
return  getobject findcolumnname columnname
//----------------------------------------------------------------
/**
* map a resultset column name to a resultset column index.
*
* @param columnname the name of the column
* @return the column index
* @exception sqlexception thrown on failure.
*/
public final int findcolumn string columnname  throws sqlexception
checkifclosed
return findcolumnname columnname
/////////////////////////////////////////////////////////////////////////
//
//      jdbc 2.0        -       new public methods
//
/////////////////////////////////////////////////////////////////////////
//---------------------------------------------------------------------
// getter's and setter's
//---------------------------------------------------------------------
/**
* jdbc 2.0
*
* return the statement that produced the resultset.
*
* @return the statment that produced the result set, or null if the result
*         was produced some other way.
* @exception sqlexception if a database error occurs or the
* result set is closed
*/
public final statement getstatement   throws sqlexception
checkifclosed
return applicationstmt
/**
* set the application statement object that created this resultset.
* used when the statement objects returned to the application
* are wrapped for xa.
*/
public final void setapplicationstatement statement applicationstmt
this applicationstmt   applicationstmt
//---------------------------------------------------------------------
// traversal/positioning
//---------------------------------------------------------------------
/**
* jdbc 2.0
*
* <p>
* determine if the cursor is before the first row in the result set.
*
* @return true if before the first row, false otherwise. returns false when
*         the result set contains no rows.
* @exception sqlexception
*                thrown on error.
*/
public boolean isbeforefirst   throws sqlexception
return checkrowposition resultset isbeforefirst
/**
* jdbc 2.0
*
* <p>
* determine if the cursor is after the last row in the result set.
*
* @return true if after the last row, false otherwise. returns false when
*         the result set contains no rows.
* @exception sqlexception
*                thrown on error.
*/
public boolean isafterlast   throws sqlexception
return checkrowposition resultset isafterlast
/**
* jdbc 2.0
*
* <p>
* determine if the cursor is on the first row of the result set.
*
* @return true if on the first row, false otherwise.
* @exception sqlexception
*                thrown on error.
*/
public boolean isfirst   throws sqlexception
return checkrowposition resultset isfirst
/**
* jdbc 2.0
*
* <p>
* determine if the cursor is on the last row of the result set. note:
* calling islast() may be expensive since the jdbc driver might need to
* fetch ahead one row in order to determine whether the current row is the
* last row in the result set.
*
* @return true if on the last row, false otherwise.
* @exception sqlexception
*                thrown on error.
*/
public boolean islast   throws sqlexception
return checkrowposition resultset islast
/**
* jdbc 2.0
*
* <p>
* moves to the front of the result set, just before the first row. has no
* effect if the result set contains no rows.
*
* @exception sqlexception
*                if a database-access error occurs, or result set type is
*                type_forward_only
*/
public void beforefirst   throws sqlexception
// beforefirst is only allowed on scroll cursors
checkscrollcursor
moveposition beforefirst
/**
* jdbc 2.0
*
* <p>
* moves to the end of the result set, just after the last row. has no
* effect if the result set contains no rows.
*
* @exception sqlexception
*                if a database-access error occurs, or result set type is
*                type_forward_only.
*/
public void afterlast   throws sqlexception
// afterlast is only allowed on scroll cursors
checkscrollcursor
moveposition afterlast
/**
* jdbc 2.0
*
* <p>
* moves to the first row in the result set.
*
* @return true if on a valid row, false if no rows in the result set.
* @exception sqlexception
*                if a database-access error occurs, or result set type is
*                type_forward_only.
*/
public boolean first   throws sqlexception
// first is only allowed on scroll cursors
checkscrollcursor
return moveposition first
/**
* jdbc 2.0
*
* <p>
* moves to the last row in the result set.
*
* @return true if on a valid row, false if no rows in the result set.
* @exception sqlexception
*                if a database-access error occurs, or result set type is
*                type_forward_only.
*/
public boolean last   throws sqlexception
// last is only allowed on scroll cursors
checkscrollcursor
return moveposition last
/**
* jdbc 2.0
*
* <p>
* determine the current row number. the first row is number 1, the second
* number 2, etc.
*
* @return the current row number, else return 0 if there is no current row
* @exception sqlexception
*                if a database-access error occurs.
*/
public int getrow   throws sqlexception
// getrow() is only allowed on scroll cursors
checkscrollcursor
/*
* * we probably needn't bother getting the text of * the underlying
* statement but it is better to be * consistent and we aren't
* particularly worried * about performance of getrow().
*/
return theresults getrownumber
/**
* jdbc 2.0
*
* <p>
* move to an absolute row number in the result set.
*
* <p>
* if row is positive, moves to an absolute row with respect to the
* beginning of the result set. the first row is row 1, the second is row 2,
* etc.
*
* <p>
* if row is negative, moves to an absolute row position with respect to the
* end of result set. for example, calling absolute(-1) positions the cursor
* on the last row, absolute(-2) indicates the next-to-last row, etc.
*
* <p>
* an attempt to position the cursor beyond the first/last row in the result
* set, leaves the cursor before/after the first/last row, respectively.
*
* <p>
* note: calling absolute(1) is the same as calling first(). calling
* absolute(-1) is the same as calling last().
*
* @return true if on the result set, false if off.
* @exception sqlexception
*                if a database-access error occurs, or row is 0, or result
*                set type is type_forward_only.
*/
public boolean absolute int row  throws sqlexception
// absolute is only allowed on scroll cursors
checkscrollcursor
return moveposition absolute  row
/**
* jdbc 2.0
*
* <p>
* moves a relative number of rows, either positive or negative. attempting
* to move beyond the first/last row in the result set positions the cursor
* before/after the the first/last row. calling relative(0) is valid, but
* does not change the cursor position.
*
* <p>
* note: calling relative(1) is different than calling next() since is makes
* sense to call next() when there is no current row, for example, when the
* cursor is positioned before the first row or after the last row of the
* result set.
*
* @return true if on a row, false otherwise.
* @exception sqlexception
*                if a database-access error occurs, or there is no current
*                row, or result set type is type_forward_only.
*/
public boolean relative int row  throws sqlexception
// absolute is only allowed on scroll cursors
checkscrollcursor
return moveposition relative  row
/**
* jdbc 2.0
*
* <p>
* moves to the previous row in the result set.
*
* <p>
* note: previous() is not the same as relative(-1) since it makes sense to
* call previous() when there is no current row.
*
* @return true if on a valid row, false if off the result set.
* @exception sqlexception
*                if a database-access error occurs, or result set type is
*                type_forwar_donly.
*/
public boolean previous   throws sqlexception
// previous is only allowed on scroll cursors
checkscrollcursor
return moveposition previous
//---------------------------------------------------------------------
// properties
//---------------------------------------------------------------------
/**
* jdbc 2.0
*
* give a hint as to the direction in which the rows in this result set will
* be processed. the initial value is determined by the statement that
* produced the result set. the fetch direction may be changed at any time.
*
* @exception sqlexception
*                if a database-access error occurs, or the result set type
*                is type_forward_only and direction is not fetch_forward.
*/
public void setfetchdirection int direction  throws sqlexception
checkscrollcursor
/*
* fetchdirection is meaningless to us. we just save it off and return
* the current value if asked.
*/
fetchdirection   direction
/**
* jdbc 2.0
*
* return the fetch direction for this result set.
*
* @exception sqlexception
*                if a database-access error occurs
*/
public int getfetchdirection   throws sqlexception
checkifclosed
if  fetchdirection    0
// value is not set at the result set level
// get it from the statement level
return stmt getfetchdirection
else
return fetchdirection
/**
* jdbc 2.0
*
* give the jdbc driver a hint as to the number of rows that should be
* fetched from the database when more rows are needed for this result set.
* if the fetch size specified is zero, then the jdbc driver ignores the
* value, and is free to make its own best guess as to what the fetch size
* should be. the default value is set by the statement that creates the
* result set. the fetch size may be changed at any time.
*
* @param rows
*            the number of rows to fetch
* @exception sqlexception
*                if a database-access error occurs, or the condition 0 <=
*                rows <= this.getmaxrows() is not satisfied.
*/
public void setfetchsize int rows  throws sqlexception
checkifclosed
if  rows < 0     stmt getmaxrows      0    rows > stmt getmaxrows
throw util generatecssqlexception sqlstate invalid_fetch_size
new integer rows
else if  rows > 0     if it is zero ignore the call
fetchsize   rows
/**
* jdbc 2.0
*
* return the fetch size for this result set.
*
* @exception sqlexception
*                if a database-access error occurs
*/
public int getfetchsize   throws sqlexception
checkifclosed
if  fetchsize    0
// value is not set at the result set level
//  get the default value from the statement
return stmt getfetchsize
else
return fetchsize
/**
* jdbc 2.0
*
* return the type of this result set. the type is determined based on the
* statement that created the result set.
*
* @return type_forward_only, type_scroll_insensitive, or
*         type_scroll_sensitive
* @exception sqlexception
*                if a database-access error occurs
*/
public int gettype   throws sqlexception
checkifclosed
return stmt getresultsettype
/**
* jdbc 2.0
*
* return the concurrency of this result set. the concurrency is determined
* as follows if statement object has concur_read_only concurrency, then
* resultset object will also have the concur_read_only concurrency. but if
* statement object has concur_updatable concurrency, then the concurrency
* of resultset object depends on whether the underlying language resultset
* is updatable or not. if the language resultset is updatable, then jdbc
* resultset object will also have the concur_updatable concurrency. if
* lanugage resultset is not updatable, then jdbc resultset object
* concurrency will be set to concur_read_only.
*
* @return the concurrency type, concur_read_only, etc.
* @exception sqlexception
*                if a database-access error occurs
*/
public int getconcurrency   throws sqlexception
checkifclosed
return concurrencyofthisresultset
//---------------------------------------------------------------------
// updates
//---------------------------------------------------------------------
/**
* jdbc 2.0
*
* determine if the current row has been updated. the value returned depends
* on whether or not the result set can detect updates.
*
* @return true if the row has been visibly updated by the owner or another,
*         and updates are detected
* @exception sqlexception
*                if a database-access error occurs
*
* @see embeddatabasemetadata#updatesaredetected
*/
public boolean rowupdated   throws sqlexception
checkifclosed
checknotoninsertrow
checkonrow
boolean rvalue   false
try
if  isforupdate
gettype      java sql resultset type_scroll_insensitive
rvalue     scrollinsensitiveresultset theresults  isupdated
catch  throwable t
handleexception t
return rvalue
/**
* jdbc 2.0
*
* determine if the current row has been inserted. the value returned
* depends on whether or not the result set can detect visible inserts.
*
* @return true if inserted and inserts are detected
* @exception sqlexception
*                if a database-access error occurs
*
* @see embeddatabasemetadata#insertsaredetected
*/
public boolean rowinserted   throws sqlexception
checkifclosed
checknotoninsertrow
checkonrow
return false
/**
* jdbc 2.0
*
* determine if this row has been deleted. a deleted row may leave a visible
* "hole" in a result set. this method can be used to detect holes in a
* result set. the value returned depends on whether or not the result set
* can detect deletions.
*
* @return true if deleted and deletes are detected
* @exception sqlexception
*                if a database-access error occurs
*
* @see embeddatabasemetadata#deletesaredetected
*/
public boolean rowdeleted   throws sqlexception
checkifclosed
checknotoninsertrow
checkonrow
boolean rvalue   false
try
if  isforupdate
gettype      java sql resultset type_scroll_insensitive
rvalue     scrollinsensitiveresultset theresults  isdeleted
catch  throwable t
handleexception t
return rvalue
//do following few checks before accepting updatexxx resultset api
protected void checksbeforeupdatexxx string methodname  int columnindex  throws sqlexception
checksbeforeupdateordelete methodname  columnindex
//1)make sure for updatexxx methods, the column position is not out of range
if  columnindex < 1    columnindex > resultdescription getcolumncount
throw util generatecssqlexception sqlstate lang_invalid_column_position
new integer columnindex   string valueof resultdescription getcolumncount
//2)make sure the column corresponds to a column in the base table and it is not a derived column
if  resultdescription getcolumndescriptor columnindex  getsourcetablename      null
throw util generatecssqlexception sqlstate column_not_from_base_table
methodname
//3)if column not updatable then throw an exception
if   getmetadata   iswritable columnindex
throw util generatecssqlexception sqlstate lang_column_not_updatable_in_cursor
resultdescription getcolumndescriptor columnindex  getname
getcursorname
//do following few checks before accepting updaterow or deleterow
//1)make sure jdbc resultset is not closed
//2)make sure this is an updatable resultset
//3)make sure jdbc resultset is positioned on a row
protected void checksbeforeupdateordelete string methodname  int columnindex  throws sqlexception
//1)make sure jdbc resultset is not closed
checkifclosed methodname
//2)make sure this is an updatable resultset
checkupdatablecursor methodname
//3)make sure jdbc resultset is positioned on a row
if   isoninsertrow  checkonrow       make sure there's a current row
//mark the column as updated and return datavaluedescriptor for it. it will be used by updatexxx methods to put new values
protected datavaluedescriptor getdvdforcolumntobeupdated int columnindex  string updatemethodname  throws standardexception  sqlexception
checksbeforeupdatexxx updatemethodname  columnindex
columngotupdated   true
currentrowhasbeenupdated   true
return updaterow getcolumn columnindex
/* do following few checks before accepting insertrow
* 1) make sure jdbc resultset is not closed
* 2) make sure this is an updatable resultset
* 3) make sure jdbc resultset is positioned on insertrow
*/
protected void checksbeforeinsert   throws sqlexception
// 1)make sure jdbc resultset is not closed
checkifclosed
// 2)make sure this is an updatable resultset
// if not updatable resultset, then throw exception
checkupdatablecursor
// 3)make sure jdbc resultset is positioned on insertrow
if   isoninsertrow
throw newsqlexception sqlstate cursor_not_positioned_on_insert_row
/**
* check whether it is ok to update a column using
* <code>updateasciistream()</code>.
*
* @param columnindex the column index (first column is 1)
* @exception sqlexception if the column could not be updated with
* <code>updateasciistream()</code>
*/
private void checksbeforeupdateasciistream int columnindex
throws sqlexception
checksbeforeupdatexxx    columnindex
int coltype   getcolumntype columnindex
if   datatypedescriptor isasciistreamassignable coltype
throw datatypeconversion columnindex
/**
* check whether it is ok to update a column using
* <code>updatebinarystream()</code>.
*
* @param columnindex the column index (first column is 1)
* @exception sqlexception if the column could not be updated with
* <code>updatebinarystream()</code>
*/
private void checksbeforeupdatebinarystream int columnindex
throws sqlexception
checksbeforeupdatexxx    columnindex
int coltype   getcolumntype columnindex
if   datatypedescriptor isbinarystreamassignable coltype
throw datatypeconversion columnindex
/**
* check whether it is ok to update a column using
* <code>updatecharacterstream()</code>.
*
* @param columnindex the column index (first column is 1)
* @exception sqlexception if the column could not be updated with
* <code>updatecharacterstream()</code>
*/
private void checksbeforeupdatecharacterstream int columnindex
throws sqlexception
checksbeforeupdatexxx    columnindex
int coltype   getcolumntype columnindex
if   datatypedescriptor ischaracterstreamassignable coltype
throw datatypeconversion columnindex
/**
* jdbc 2.0
*
* give a nullable column a null value.
*
* the updatexxx() methods are used to update column values in the current
* row, or the insert row. the updatexxx() methods do not update the
* underlying database, instead the updaterow() or insertrow() methods are
* called to update the database.
*
* @param columnindex
*            the first column is 1, the second is 2, ...
* @exception sqlexception
*                if a database-access error occurs
*/
public void updatenull int columnindex  throws sqlexception
try
getdvdforcolumntobeupdated columnindex     settonull
catch  standardexception t
throw nostatechangeexception t
/**
* jdbc 2.0
*
* update a column with a boolean value.
*
* the updatexxx() methods are used to update column values in the current
* row, or the insert row. the updatexxx() methods do not update the
* underlying database, instead the updaterow() or insertrow() methods are
* called to update the database.
*
* @param columnindex
*            the first column is 1, the second is 2, ...
* @param x
*            the new column value
* @exception sqlexception
*                if a database-access error occurs
*/
public void updateboolean int columnindex  boolean x  throws sqlexception
try
getdvdforcolumntobeupdated columnindex     setvalue x
catch  standardexception t
throw nostatechangeexception t
/**
* jdbc 2.0
*
* update a column with a byte value.
*
* the updatexxx() methods are used to update column values in the current
* row, or the insert row. the updatexxx() methods do not update the
* underlying database, instead the updaterow() or insertrow() methods are
* called to update the database.
*
* @param columnindex
*            the first column is 1, the second is 2, ...
* @param x
*            the new column value
* @exception sqlexception
*                if a database-access error occurs
*/
public void updatebyte int columnindex  byte x  throws sqlexception
try
getdvdforcolumntobeupdated columnindex     setvalue x
catch  standardexception t
throw nostatechangeexception t
/**
* jdbc 2.0
*
* update a column with a short value.
*
* the updatexxx() methods are used to update column values in the current
* row, or the insert row. the updatexxx() methods do not update the
* underlying database, instead the updaterow() or insertrow() methods are
* called to update the database.
*
* @param columnindex
*            the first column is 1, the second is 2, ...
* @param x
*            the new column value
* @exception sqlexception
*                if a database-access error occurs
*/
public void updateshort int columnindex  short x  throws sqlexception
try
getdvdforcolumntobeupdated columnindex     setvalue x
catch  standardexception t
throw nostatechangeexception t
/**
* jdbc 2.0
*
* update a column with an integer value.
*
* the updatexxx() methods are used to update column values in the current
* row, or the insert row. the updatexxx() methods do not update the
* underlying database, instead the updaterow() or insertrow() methods are
* called to update the database.
*
* @param columnindex
*            the first column is 1, the second is 2, ...
* @param x
*            the new column value
* @exception sqlexception
*                if a database-access error occurs
*/
public void updateint int columnindex  int x  throws sqlexception
try
getdvdforcolumntobeupdated columnindex     setvalue x
catch  standardexception t
throw nostatechangeexception t
/**
* jdbc 2.0
*
* update a column with a long value.
*
* the updatexxx() methods are used to update column values in the current
* row, or the insert row. the updatexxx() methods do not update the
* underlying database, instead the updaterow() or insertrow() methods are
* called to update the database.
*
* @param columnindex
*            the first column is 1, the second is 2, ...
* @param x
*            the new column value
* @exception sqlexception
*                if a database-access error occurs
*/
public void updatelong int columnindex  long x  throws sqlexception
try
getdvdforcolumntobeupdated columnindex     setvalue x
catch  standardexception t
throw nostatechangeexception t
/**
* jdbc 2.0
*
* update a column with a float value.
*
* the updatexxx() methods are used to update column values in the current
* row, or the insert row. the updatexxx() methods do not update the
* underlying database, instead the updaterow() or insertrow() methods are
* called to update the database.
*
* @param columnindex
*            the first column is 1, the second is 2, ...
* @param x
*            the new column value
* @exception sqlexception
*                if a database-access error occurs
*/
public void updatefloat int columnindex  float x  throws sqlexception
try
getdvdforcolumntobeupdated columnindex     setvalue x
catch  standardexception t
throw nostatechangeexception t
/**
* jdbc 2.0
*
* update a column with a double value.
*
* the updatexxx() methods are used to update column values in the current
* row, or the insert row. the updatexxx() methods do not update the
* underlying database, instead the updaterow() or insertrow() methods are
* called to update the database.
*
* @param columnindex
*            the first column is 1, the second is 2, ...
* @param x
*            the new column value
* @exception sqlexception
*                if a database-access error occurs
*/
public void updatedouble int columnindex  double x  throws sqlexception
try
getdvdforcolumntobeupdated columnindex     setvalue x
catch  standardexception t
throw nostatechangeexception t
/**
* jdbc 2.0
*
* update a column with a string value.
*
* the updatexxx() methods are used to update column values in the current
* row, or the insert row. the updatexxx() methods do not update the
* underlying database, instead the updaterow() or insertrow() methods are
* called to update the database.
*
* @param columnindex
*            the first column is 1, the second is 2, ...
* @param x
*            the new column value
* @exception sqlexception
*                if a database-access error occurs
*/
public void updatestring int columnindex  string x  throws sqlexception
try
getdvdforcolumntobeupdated columnindex     setvalue x
catch  standardexception t
throw nostatechangeexception t
/**
* jdbc 2.0
*
* update a column with a byte array value.
*
* the updatexxx() methods are used to update column values in the current
* row, or the insert row. the updatexxx() methods do not update the
* underlying database, instead the updaterow() or insertrow() methods are
* called to update the database.
*
* @param columnindex
*            the first column is 1, the second is 2, ...
* @param x
*            the new column value
* @exception sqlexception
*                if a database-access error occurs
*/
public void updatebytes int columnindex  byte x  throws sqlexception
try
getdvdforcolumntobeupdated columnindex     setvalue x
catch  standardexception t
throw nostatechangeexception t
/**
* jdbc 2.0
*
* update a column with a date value.
*
* the updatexxx() methods are used to update column values in the current
* row, or the insert row. the updatexxx() methods do not update the
* underlying database, instead the updaterow() or insertrow() methods are
* called to update the database.
*
* @param columnindex
*            the first column is 1, the second is 2, ...
* @param x
*            the new column value
* @exception sqlexception
*                if a database-access error occurs
*/
public void updatedate int columnindex  java sql date x
throws sqlexception
try
getdvdforcolumntobeupdated columnindex     setvalue x
catch  standardexception t
throw nostatechangeexception t
/**
* jdbc 2.0
*
* update a column with a time value.
*
* the updatexxx() methods are used to update column values in the current
* row, or the insert row. the updatexxx() methods do not update the
* underlying database, instead the updaterow() or insertrow() methods are
* called to update the database.
*
* @param columnindex
*            the first column is 1, the second is 2, ...
* @param x
*            the new column value
* @exception sqlexception
*                if a database-access error occurs
*/
public void updatetime int columnindex  java sql time x
throws sqlexception
try
getdvdforcolumntobeupdated columnindex     setvalue x
catch  standardexception t
throw nostatechangeexception t
/**
* jdbc 2.0
*
* update a column with a timestamp value.
*
* the updatexxx() methods are used to update column values in the current
* row, or the insert row. the updatexxx() methods do not update the
* underlying database, instead the updaterow() or insertrow() methods are
* called to update the database.
*
* @param columnindex
*            the first column is 1, the second is 2, ...
* @param x
*            the new column value
* @exception sqlexception
*                if a database-access error occurs
*/
public void updatetimestamp int columnindex  java sql timestamp x
throws sqlexception
try
getdvdforcolumntobeupdated columnindex     setvalue x
catch  standardexception t
throw nostatechangeexception t
/**
*
* update a column with an ascii stream value.
*
* the updatexxx() methods are used to update column values in the current
* row, or the insert row. the updatexxx() methods do not update the
* underlying database, instead the updaterow() or insertrow() methods are
* called to update the database.
*
* @param columnindex
*            the first column is 1, the second is 2, ...
* @param x
*            the new column value
* @param length
*            the length of the stream
* @exception sqlexception
*                if a database-access error occurs
*/
public void updateasciistream int columnindex  java io inputstream x
long length  throws sqlexception
checksbeforeupdateasciistream columnindex
java io reader r   null
if  x    null
try
r   new java io inputstreamreader x
catch  java io unsupportedencodingexception uee
throw new sqlexception uee getmessage
updatecharacterstreaminternal columnindex  r  false  length
/**
* updates the designated column with a character stream value.
* the data will be read from the stream as needed until end-of-stream is
* reached.
*
* the updater methods are used to update column values in the current row
* or the insert row. the updater methods do not update the underlying
* database; instead the <code>updaterow</code> or </code>insertrow</code>
* methods are called to update the database.
*
* @param columnindex the first column is 1, the second is 2, ...
* @param x the new column value
* @throws sqlexception if the columnindex is not valid; if a database
*      access error occurs; the result set concurrency is
*      <code>concur_read_only</code> or this method is called on a closed
*      result set
*/
public void updateasciistream int columnindex  inputstream x
throws sqlexception
checksbeforeupdateasciistream columnindex
java io reader r   null
if  x    null
try
r   new java io inputstreamreader x
catch  java io unsupportedencodingexception uee
throw new sqlexception uee getmessage
updatecharacterstreaminternal columnindex  r  true   1
/**
*
* update a column with a binary stream value.
*
* the updatexxx() methods are used to update column values in the current
* row, or the insert row. the updatexxx() methods do not update the
* underlying database, instead the updaterow() or insertrow() methods are
* called to update the database.
*
* @param columnindex
*            the first column is 1, the second is 2, ...
* @param x
*            the new column value
* @param length
*            the length of the stream
* @exception sqlexception
*                if a database-access error occurs
*/
public void updatebinarystream int columnindex  java io inputstream x
long length  throws sqlexception
checksbeforeupdatebinarystream columnindex
if  x    null
updatenull columnindex
return
updatebinarystreaminternal columnindex  x  false  length
/**
* updates the designated column with a binary stream value.
* the data will be read from the stream as needed until end-of-stream is
* reached.
*
* the updater methods are used to update column values in the current row
* or the insert row. the updater methods do not update the underlying
* database; instead the <code>updaterow</code> or <code>insertrow</code>
* methods are called to update the database.
*
* @param columnindex the first column is 1, the second is 2, ...
* @param x the new column value
* @throws sqlexception if the columnlabel is not valid; if a database
*      access error occurs; the result set concurrency is
*      <code>concur_read_only</code> or this method is called on a closed
*      result set
*/
public void updatebinarystream int columnindex  inputstream x
throws sqlexception
checksbeforeupdatebinarystream columnindex
updatebinarystreaminternal columnindex  x  true   1
/**
* set the given binary stream for the specified parameter.
*
* if <code>lengthless</code> is <code>true</code>, the following
* conditions are either not checked or verified at the execution time
* of <code>updaterow</code>/<code>insertrow</code>:
* <ol><li>if the stream length is negative.
*     <li>if the stream's actual length equals the specified length.</ol>
* the <code>lengthless</code> variable was added to differentiate between
* streams with invalid lengths and streams without known lengths.
*
* @param columnindex the 1-based index of the parameter to set.
* @param x the data.
* @param lengthless tells whether we know the length of the data or not.
* @param length the length of the data. ignored if <code>lengthless</code>
*          is <code>true</code>.
* @param updatemethodname the name of the method calling us. used in
*      error messages.
* @throws sqlexception if reading the data fails, or one of the data
*      checks fails.
*/
private void updatebinarystreaminternal int columnindex  inputstream x
final boolean lengthless  long length  string updatemethodname
throws sqlexception
rawtobinaryformatstream rawstream
if   lengthless
if  length < 0
throw newsqlexception sqlstate negative_stream_length
// max number of bytes that can be set to be inserted
// in derby is 2gb-1 (ie integer.max_value).
// (e.g into a blob column).
if  length > integer max_value
throw newsqlexception sqlstate lang_outside_range_for_datatype
getcolumnsqltype columnindex
rawstream   new rawtobinaryformatstream x   int length
else
// force length to -1 if stream is length less.
length    1
rawstream   new rawtobinaryformatstream x
getmaxcolumnwidth columnindex
getcolumnsqltype columnindex
try
getdvdforcolumntobeupdated columnindex  updatemethodname  setvalue
rawstream   int  length
catch  standardexception t
throw nostatechangeexception t
/**
* jdbc 4.0
*
* update a column with a character stream value.
*
* the updatexxx() methods are used to update column values in the current
* row, or the insert row. the updatexxx() methods do not update the
* underlying database, instead the updaterow() or insertrow() methods are
* called to update the database.
*
* @param columnindex
*            the first column is 1, the second is 2, ...
* @param x
*            the new column value
* @param length
*            the length of the stream
* @exception sqlexception
*                if a database-access error occurs
*/
public void updatecharacterstream int columnindex  java io reader x
long length  throws sqlexception
checksbeforeupdatecharacterstream columnindex
updatecharacterstreaminternal columnindex  x  false  length
/**
* updates the designated column with a character stream value.
* the data will be read from the stream as needed until end-of-stream is
* reached.
*
* the updater methods are used to update column values in the current row
* or the insert row. the updater methods do not update the underlying
* database; instead the <code>updaterow</code> or </code>insertrow</code>
* methods are called to update the database.
*
* @param columnindex the first column is 1, the second is 2, ...
* @param x the new column value
* @throws sqlexception if the columnindex is not valid; if a database
*      access error occurs; the result set concurrency is
*      <code>concur_read_only</code> or this method is called on a closed
*      result set
*/
public void updatecharacterstream int columnindex  reader x
throws sqlexception
checksbeforeupdatecharacterstream columnindex
updatecharacterstreaminternal columnindex  x  true   1
/**
* set the given character stream for the specified parameter.
*
* if <code>lengthless</code> is <code>true</code>, the following
* conditions are either not checked or verified at the execution time
* of the prepared statement:
* <ol><li>if the stream length is negative.
*     <li>if the stream's actual length equals the specified length.</ol>
* the <code>lengthless</code> variable was added to differentiate between
* streams with invalid lengths and streams without known lengths.
*
* @param columnindex the 1-based index of the parameter to set.
* @param reader the data.
* @param lengthless tells whether we know the length of the data or not.
* @param length the length of the data. ignored if <code>lengthless</code>
*          is <code>true</code>.
* @throws sqlexception if reading the data fails, or one of the data
*      checks fails.
*/
private void updatecharacterstreaminternal int columnindex  reader reader
final boolean lengthless
long length
string updatemethodname
throws sqlexception
try
if  reader    null
updatenull columnindex
return
final stringdatavalue dvd    stringdatavalue
getdvdforcolumntobeupdated columnindex  updatemethodname
// in the case of updatable result sets, we cannot guarantee that a
// context is pushed when the header needs to be generated. to fix
// this, tell the dvd/generator whether we are running in soft
// upgrade mode or not.
dvd setsoftupgrademode boolean valueof
getembedconnection   getdatabase   getdatadictionary
checkversion datadictionary dd_version_current  null
readertoutf8stream utfin
int usablelength    1
if   lengthless
// check for -ve length here
if  length < 0
throw newsqlexception sqlstate negative_stream_length
// max number of characters that can be set to be inserted
// in derby is 2gb-1 (ie integer.max_value).
// (e.g into a clob column).
if  length > integer max_value
throw newsqlexception
sqlstate lang_outside_range_for_datatype
getcolumnsqltype columnindex
// length is +ve. at this point, all checks for negative
// length has already been done
usablelength    int  length
int truncationlength   0
// currently long varchar does not allow for truncation of
// trailing blanks.  for char and varchar types, current
// mechanism of materializing when using streams seems fine
// given their max limits. this change is fix for derby-352:
// insert of clobs using streams should not materialize the
// entire stream into memory
// in case of clobs, the truncation of trailing blanks is
// factored in when reading from the stream without
// materializing the entire stream, and so the special casing
// for clob below.
if  getcolumntype columnindex     types clob
// need column width to figure out if truncation is
// needed
int colwidth   getmaxcolumnwidth columnindex
// it is possible that the length of the stream passed in
// is greater than the column width, in which case the data
// from the stream needs to be truncated.
// usablelength is the length of the data from stream
// that can be used which is min(colwidth,length) provided
// length - colwidth has trailing blanks only
if  usablelength > colwidth
truncationlength   usablelength   colwidth
usablelength   colwidth
utfin   new readertoutf8stream reader  usablelength
truncationlength  getcolumnsqltype columnindex
dvd getstreamheadergenerator
else
int colwidth   getmaxcolumnwidth columnindex
utfin   new readertoutf8stream reader  colwidth
getcolumnsqltype columnindex
dvd getstreamheadergenerator
// note: the length argument to setvalue is not used. if that
//       changes, the value might also have to change.
dvd setvalue utfin  usablelength
catch  standardexception t
throw nostatechangeexception t
/**
* jdbc 2.0
*
* update a column with an object value.
*
* the updatexxx() methods are used to update column values in the current
* row, or the insert row. the updatexxx() methods do not update the
* underlying database, instead the updaterow() or insertrow() methods are
* called to update the database.
*
* @param columnindex
*            the first column is 1, the second is 2, ...
* @param x
*            the new column value
* @param scale
*            for java.sql.types.decimal or java.sql.types.numeric types
*            this is the number of digits after the decimal. for all other
*            types this value will be ignored.
* @exception sqlexception
*                if a database-access error occurs
*/
public void updateobject int columnindex  object x  int scale
throws sqlexception
updateobject columnindex  x
/*
* if the parameter type is decimal or numeric, then
* we need to set them to the passed scale.
*/
int coltype   getcolumntype columnindex
if   coltype    types decimal      coltype    types numeric
if  scale < 0
throw newsqlexception sqlstate bad_scale_value  new integer scale
try
datavaluedescriptor value   updaterow getcolumn columnindex
int origvaluelen   value getlength
variablesizedatavalue
value  setwidth variablesizedatavalue ignore_precision
scale
false
catch  standardexception t
throw embedresultset nostatechangeexception t
/**
* jdbc 2.0
*
* update a column with an object value.
*
* the updatexxx() methods are used to update column values in the current
* row, or the insert row. the updatexxx() methods do not update the
* underlying database, instead the updaterow() or insertrow() methods are
* called to update the database.
*
* @param columnindex
*            the first column is 1, the second is 2, ...
* @param x
*            the new column value
* @exception sqlexception
*                if a database-access error occurs
*/
public void updateobject int columnindex  object x  throws sqlexception
checksbeforeupdatexxx    columnindex
int coltype   getcolumntype columnindex
if  coltype    types java_object
try
userdatavalue  getdvdforcolumntobeupdated columnindex      setvalue x
return
catch  standardexception t
throw nostatechangeexception t
if  x    null
updatenull columnindex
return
if  x instanceof string
updatestring columnindex   string  x
return
if  x instanceof boolean
updateboolean columnindex    boolean  x  booleanvalue
return
if  x instanceof short
updateshort columnindex    short  x  shortvalue
return
if  x instanceof integer
updateint columnindex    integer  x  intvalue
return
if  x instanceof long
updatelong columnindex    long  x  longvalue
return
if  x instanceof float
updatefloat columnindex    float  x  floatvalue
return
if  x instanceof double
updatedouble columnindex    double  x  doublevalue
return
if  x instanceof byte
updatebytes columnindex   byte  x
return
if  x instanceof date
updatedate columnindex   date  x
return
if  x instanceof time
updatetime columnindex   time  x
return
if  x instanceof timestamp
updatetimestamp columnindex   timestamp  x
return
if  x instanceof blob
updateblob columnindex   blob  x
return
if  x instanceof clob
updateclob columnindex   clob  x
return
throw datatypeconversion columnindex  x getclass   getname
/**
* jdbc 2.0
*
* update a column with a null value.
*
* the updatexxx() methods are used to update column values in the current
* row, or the insert row. the updatexxx() methods do not update the
* underlying database, instead the updaterow() or insertrow() methods are
* called to update the database.
*
* @param columnname
*            the name of the column
* @exception sqlexception
*                if a database-access error occurs
*/
public void updatenull string columnname  throws sqlexception
checkifclosed
updatenull findcolumnname columnname
/**
* jdbc 2.0
*
* update a column with a boolean value.
*
* the updatexxx() methods are used to update column values in the current
* row, or the insert row. the updatexxx() methods do not update the
* underlying database, instead the updaterow() or insertrow() methods are
* called to update the database.
*
* @param columnname
*            the name of the column
* @param x
*            the new column value
* @exception sqlexception
*                if a database-access error occurs
*/
public void updateboolean string columnname  boolean x  throws sqlexception
checkifclosed
updateboolean findcolumnname columnname   x
/**
* jdbc 2.0
*
* update a column with a byte value.
*
* the updatexxx() methods are used to update column values in the current
* row, or the insert row. the updatexxx() methods do not update the
* underlying database, instead the updaterow() or insertrow() methods are
* called to update the database.
*
* @param columnname
*            the name of the column
* @param x
*            the new column value
* @exception sqlexception
*                if a database-access error occurs
*/
public void updatebyte string columnname  byte x  throws sqlexception
checkifclosed
updatebyte findcolumnname columnname   x
/**
* jdbc 2.0
*
* update a column with a short value.
*
* the updatexxx() methods are used to update column values in the current
* row, or the insert row. the updatexxx() methods do not update the
* underlying database, instead the updaterow() or insertrow() methods are
* called to update the database.
*
* @param columnname
*            the name of the column
* @param x
*            the new column value
* @exception sqlexception
*                if a database-access error occurs
*/
public void updateshort string columnname  short x  throws sqlexception
checkifclosed
updateshort findcolumnname columnname   x
/**
* jdbc 2.0
*
* update a column with an integer value.
*
* the updatexxx() methods are used to update column values in the current
* row, or the insert row. the updatexxx() methods do not update the
* underlying database, instead the updaterow() or insertrow() methods are
* called to update the database.
*
* @param columnname
*            the name of the column
* @param x
*            the new column value
* @exception sqlexception
*                if a database-access error occurs
*/
public void updateint string columnname  int x  throws sqlexception
checkifclosed
updateint findcolumnname columnname   x
/**
* jdbc 2.0
*
* update a column with a long value.
*
* the updatexxx() methods are used to update column values in the current
* row, or the insert row. the updatexxx() methods do not update the
* underlying database, instead the updaterow() or insertrow() methods are
* called to update the database.
*
* @param columnname
*            the name of the column
* @param x
*            the new column value
* @exception sqlexception
*                if a database-access error occurs
*/
public void updatelong string columnname  long x  throws sqlexception
checkifclosed
updatelong findcolumnname columnname   x
/**
* jdbc 2.0
*
* update a column with a float value.
*
* the updatexxx() methods are used to update column values in the current
* row, or the insert row. the updatexxx() methods do not update the
* underlying database, instead the updaterow() or insertrow() methods are
* called to update the database.
*
* @param columnname
*            the name of the column
* @param x
*            the new column value
* @exception sqlexception
*                if a database-access error occurs
*/
public void updatefloat string columnname  float x  throws sqlexception
checkifclosed
updatefloat findcolumnname columnname   x
/**
* jdbc 2.0
*
* update a column with a double value.
*
* the updatexxx() methods are used to update column values in the current
* row, or the insert row. the updatexxx() methods do not update the
* underlying database, instead the updaterow() or insertrow() methods are
* called to update the database.
*
* @param columnname
*            the name of the column
* @param x
*            the new column value
* @exception sqlexception
*                if a database-access error occurs
*/
public void updatedouble string columnname  double x  throws sqlexception
checkifclosed
updatedouble findcolumnname columnname   x
/**
* jdbc 2.0
*
* update a column with a string value.
*
* the updatexxx() methods are used to update column values in the current
* row, or the insert row. the updatexxx() methods do not update the
* underlying database, instead the updaterow() or insertrow() methods are
* called to update the database.
*
* @param columnname
*            the name of the column
* @param x
*            the new column value
* @exception sqlexception
*                if a database-access error occurs
*/
public void updatestring string columnname  string x  throws sqlexception
checkifclosed
updatestring findcolumnname columnname   x
/**
* jdbc 2.0
*
* update a column with a byte array value.
*
* the updatexxx() methods are used to update column values in the current
* row, or the insert row. the updatexxx() methods do not update the
* underlying database, instead the updaterow() or insertrow() methods are
* called to update the database.
*
* @param columnname
*            the name of the column
* @param x
*            the new column value
* @exception sqlexception
*                if a database-access error occurs
*/
public void updatebytes string columnname  byte x  throws sqlexception
checkifclosed
updatebytes findcolumnname columnname   x
/**
* jdbc 2.0
*
* update a column with a date value.
*
* the updatexxx() methods are used to update column values in the current
* row, or the insert row. the updatexxx() methods do not update the
* underlying database, instead the updaterow() or insertrow() methods are
* called to update the database.
*
* @param columnname
*            the name of the column
* @param x
*            the new column value
* @exception sqlexception
*                if a database-access error occurs
*/
public void updatedate string columnname  java sql date x
throws sqlexception
checkifclosed
updatedate findcolumnname columnname   x
/**
* jdbc 2.0
*
* update a column with a time value.
*
* the updatexxx() methods are used to update column values in the current
* row, or the insert row. the updatexxx() methods do not update the
* underlying database, instead the updaterow() or insertrow() methods are
* called to update the database.
*
* @param columnname
*            the name of the column
* @param x
*            the new column value
* @exception sqlexception
*                if a database-access error occurs
*/
public void updatetime string columnname  java sql time x
throws sqlexception
checkifclosed
updatetime findcolumnname columnname   x
/**
* jdbc 2.0
*
* update a column with a timestamp value.
*
* the updatexxx() methods are used to update column values in the current
* row, or the insert row. the updatexxx() methods do not update the
* underlying database, instead the updaterow() or insertrow() methods are
* called to update the database.
*
* @param columnname
*            the name of the column
* @param x
*            the new column value
* @exception sqlexception
*                if a database-access error occurs
*/
public void updatetimestamp string columnname  java sql timestamp x
throws sqlexception
checkifclosed
updatetimestamp findcolumnname columnname   x
/**
* jdbc 2.0
*
* update a column with an ascii stream value.
*
* the updatexxx() methods are used to update column values in the current
* row, or the insert row. the updatexxx() methods do not update the
* underlying database, instead the updaterow() or insertrow() methods are
* called to update the database.
*
* @param columnname
*            the name of the column
* @param x
*            the new column value
* @param length
*            of the stream
* @exception sqlexception
*                if a database-access error occurs
*/
public void updateasciistream string columnname  java io inputstream x
int length  throws sqlexception
checkifclosed
updateasciistream findcolumnname columnname   x  length
/**
* jdbc 2.0
*
* update a column with a binary stream value.
*
* the updatexxx() methods are used to update column values in the current
* row, or the insert row. the updatexxx() methods do not update the
* underlying database, instead the updaterow() or insertrow() methods are
* called to update the database.
*
* @param columnname
*            the name of the column
* @param x
*            the new column value
* @param length
*            of the stream
* @exception sqlexception
*                if a database-access error occurs
*/
public void updatebinarystream string columnname  java io inputstream x
int length  throws sqlexception
checkifclosed
updatebinarystream findcolumnname columnname   x  length
/**
* jdbc 2.0
*
* update a column with a character stream value.
*
* the updatexxx() methods are used to update column values in the current
* row, or the insert row. the updatexxx() methods do not update the
* underlying database, instead the updaterow() or insertrow() methods are
* called to update the database.
*
* @param columnname
*            the name of the column
* @param reader
*            the new column value
* @param length
*            length of the stream
* @exception sqlexception
*                if a database-access error occurs
*/
public void updatecharacterstream string columnname  java io reader reader
int length  throws sqlexception
checkifclosed
updatecharacterstream findcolumnname columnname   reader  length
/**
* jdbc 2.0
*
* update a column with an object value.
*
* the updatexxx() methods are used to update column values in the
* current row, or the insert row.  the updatexxx() methods do not
* update the underlying database, instead the updaterow() or insertrow()
* methods are called to update the database.
*
* @param columnname the name of the column
* @param x the new column value
* @param scale for java.sql.types.decimal or java.sql.types.numeric types
*  this is the number of digits after the decimal.  for all other
*  types this value will be ignored.
* @exception sqlexception if a database-access error occurs
*/
public void updateobject string columnname  object x  int scale
throws sqlexception
checkifclosed
updateobject findcolumnname columnname   x  scale
/**
* jdbc 2.0
*
* update a column with an object value.
*
* the updatexxx() methods are used to update column values in the current
* row, or the insert row. the updatexxx() methods do not update the
* underlying database, instead the updaterow() or insertrow() methods are
* called to update the database.
*
* @param columnname
*            the name of the column
* @param x
*            the new column value
* @exception sqlexception
*                if a database-access error occurs
*/
public void updateobject string columnname  object x  throws sqlexception
checkifclosed
updateobject findcolumnname columnname   x
/**
* jdbc 2.0
*
* insert the contents of the insert row into the result set and the
* database. must be on the insert row when this method is called.
*
* @exception sqlexception
*                if a database-access error occurs, if called when not on
*                the insert row, or if all non-nullable columns in the
*                insert row have not been given a value
*/
public void insertrow   throws sqlexception
synchronized  getconnectionsynchronization
checksbeforeinsert
setupcontextstack
languageconnectioncontext lcc   getembedconnection   getlanguageconnection
statementcontext statementcontext   null
try
/*
* construct the insert statement
*
* if no values have been supplied for a column, it will be set
* to the column's default value, if any.
* if no default value had been defined, the default value of a
* nullable column is set to null.
*/
boolean foundonecolumnalready   false
stringbuffer insertsql   new stringbuffer
stringbuffer valuessql   new stringbuffer
cursoractivation activation   lcc lookupcursoractivation getcursorname
execcursortablereference targettable
activation getpreparedstatement   gettargettable
// got the underlying (schema.)table name
insertsql append getfullbasetablename targettable
insertsql append
// in this for loop we are constructing list of column-names
// and values (?) ,... part of the insert sql
for  int i 1  i< resultdescription getcolumncount    i
if  foundonecolumnalready
insertsql append
valuessql append
// using quotes around the column name
// to preserve case sensitivity
insertsql append quotesqlidentifier
resultdescription getcolumndescriptor i  getname
if  columngotupdated
valuessql append
else
valuessql append
foundonecolumnalready   true
insertsql append
valuessql append
insertsql append valuessql
// context used for preparing, don't set any timeout (use 0)
statementcontext   lcc pushstatementcontext
isatomic
false
insertsql tostring

false
0l
org apache derby iapi sql preparedstatement ps
lcc prepareinternalstatement insertsql tostring
activation act   ps getactivation lcc  false
statementcontext setactivation act
// in this for loop we are assigning values for parameters
//in sql constructed earlier values (?, ..)
for  int i 1  paramposition 0  i< resultdescription getcolumncount    i
// if the column got updated, do following
if  columngotupdated
act getparametervalueset
getparameterforset paramposition
setvalue updaterow getcolumn i
// don't see any timeout when inserting rows (use 0)
//execute the insert
org apache derby iapi sql resultset rs
ps executesubstatement activation  act  true  0l
act close
lcc popstatementcontext statementcontext  null
catch  standardexception t
throw closeontransactionerror t
finally
if  statementcontext    null
lcc popstatementcontext statementcontext  null
restorecontextstack
/**
* jdbc 2.0
*
* update the underlying database with the new contents of the
* current row.  cannot be called when on the insert row.
*
* @exception sqlexception if a database-access error occurs, or
* if called when on the insert row
*/
public void updaterow   throws sqlexception
synchronized  getconnectionsynchronization
checksbeforeupdateordelete     1
// check that the cursor is not positioned on insertrow
checknotoninsertrow
setupcontextstack
languageconnectioncontext lcc   getembedconnection   getlanguageconnection
statementcontext statementcontext   null
try
if  currentrowhasbeenupdated    false    nothing got updated on this row
return    nothing to do since no updates were made to this row
//now construct the update where current of sql
boolean foundonecolumnalready   false
stringbuffer updatewherecurrentofsql   new stringbuffer
cursoractivation activation   lcc lookupcursoractivation getcursorname
execcursortablereference targettable   activation getpreparedstatement   gettargettable
updatewherecurrentofsql append getfullbasetablename targettable     got the underlying  schema  table name
updatewherecurrentofsql append
for  int i 1  i< resultdescription getcolumncount    i        in this for loop we are constructing columnname ?     part of the update sql
if  columngotupdated      if the column got updated  do following
if  foundonecolumnalready
updatewherecurrentofsql append
//using quotes around the column name to preserve case sensitivity
updatewherecurrentofsql append quotesqlidentifier
resultdescription getcolumndescriptor i  getname
foundonecolumnalready   true
//using quotes around the cursor name to preserve case sensitivity
updatewherecurrentofsql append
quotesqlidentifier getcursorname
// context used for preparing, don't set any timeout (use 0)
statementcontext   lcc pushstatementcontext isatomic  false  updatewherecurrentofsql tostring    null  false  0l
org apache derby iapi sql preparedstatement ps   lcc prepareinternalstatement updatewherecurrentofsql tostring
activation act   ps getactivation lcc  false
statementcontext setactivation act
//in this for loop we are assigning values for parameters in sql constructed earlier with columnname=?,...
for  int i 1  paramposition 0  i< resultdescription getcolumncount    i
if  columngotupdated     if the column got updated  do following
act getparametervalueset   getparameterforset paramposition    setvalue updaterow getcolumn i
// don't set any timeout when updating rows (use 0)
// execute the update where current of sql.
org apache derby iapi sql resultset rs
ps executesubstatement activation  act  true  0l
sqlwarning w   act getwarnings
if  w    null
addwarning w
act close
//for forward only resultsets, after a update, the resultset will be positioned right before the next row.
if  gettype      type_forward_only
currentrow   null
else
moveposition relative  0
lcc popstatementcontext statementcontext  null
catch  standardexception t
throw closeontransactionerror t
finally
if  statementcontext    null
lcc popstatementcontext statementcontext  null
restorecontextstack
initializeupdaterowmodifiers
/**
* jdbc 2.0
*
* delete the current row from the result set and the underlying
* database.  cannot be called when on the insert row.
*
* @exception sqlexception if a database-access error occurs, or if
* called when on the insert row.
*/
public void deleterow   throws sqlexception
synchronized  getconnectionsynchronization
checksbeforeupdateordelete     1
// check that the cursor is not positioned on insertrow
checknotoninsertrow
setupcontextstack
languageconnectioncontext lcc   getembedconnection   getlanguageconnection
statementcontext statementcontext   null
//now construct the delete where current of sql
try
stringbuffer deletewherecurrentofsql   new stringbuffer
cursoractivation activation   lcc lookupcursoractivation getcursorname
deletewherecurrentofsql append getfullbasetablename activation getpreparedstatement   gettargettable       get the underlying  schema  table name
//using quotes around the cursor name to preserve case sensitivity
deletewherecurrentofsql append
quotesqlidentifier getcursorname
// context used for preparing, don't set any timeout (use 0)
statementcontext   lcc pushstatementcontext isatomic  false  deletewherecurrentofsql tostring    null  false  0l
org apache derby iapi sql preparedstatement ps   lcc prepareinternalstatement deletewherecurrentofsql tostring
// get activation, so that we can get the warning from it
activation act   ps getactivation lcc  false
statementcontext setactivation act
// don't set any timeout when deleting rows (use 0)
//execute delete where current of sql
org apache derby iapi sql resultset rs
ps executesubstatement activation  act  true  0l
sqlwarning w   act getwarnings
if  w    null
addwarning w
act close
//after a delete, the resultset will be positioned right before
//the next row.
currentrow   null
lcc popstatementcontext statementcontext  null
catch  standardexception t
throw closeontransactionerror t
finally
if  statementcontext    null
lcc popstatementcontext statementcontext  null
restorecontextstack
initializeupdaterowmodifiers
private string getfullbasetablename execcursortablereference targettable
//using quotes to preserve case sensitivity
if  targettable getschemaname      null
return quotesqlidentifier targettable getschemaname
quotesqlidentifier targettable getbasename
else
return quotesqlidentifier targettable getbasename
private string quotesqlidentifier string orgvalue
int i   0  start   0
string retvalue
while   i   orgvalue indexof  "  start    1  > 0
retvalue    orgvalue substring start  i     "
start   i
retvalue    orgvalue substring start  orgvalue length
return
/**
* jdbc 2.0
*
* refresh the value of the current row with its current value in the
* database. cannot be called when on the insert row.
*
* the refreshrow() method provides a way for an application to explicitly
* tell the jdbc driver to refetch a row(s) from the database. an
* application may want to call refreshrow() when caching or prefetching is
* being done by the jdbc driver to fetch the latest value of a row from the
* database. the jdbc driver may actually refresh multiple rows at once if
* the fetch size is greater than one.
*
* all values are refetched subject to the transaction isolation level and
* cursor sensitivity. if refreshrow() is called after calling updatexxx(),
* but before calling updaterow() then the updates made to the row are lost.
* calling refreshrow() frequently will likely slow performance.
*
* @exception sqlexception
*                if a database-access error occurs, or if called when on
*                the insert row.
*/
public void refreshrow   throws sqlexception
throw util notimplemented
/**
* jdbc 2.0
*
* the cancelrowupdates() method may be called after calling an
* updatexxx() method(s) and before calling updaterow() to rollback
* the updates made to a row.  if no updates have been made or
* updaterow() has already been called, then this method has no
* effect.
*
* @exception sqlexception if a database-access error occurs, or if
* called when on the insert row.
*
*/
public void cancelrowupdates    throws sqlexception
checksbeforeupdateordelete     1
checknotoninsertrow
initializeupdaterowmodifiers
/**
* jdbc 2.0
*
* move to the insert row. the current cursor position is remembered while
* the cursor is positioned on the insert row.
*
* the insert row is a special row associated with an updatable result set.
* it is essentially a buffer where a new row may be constructed by calling
* the updatexxx() methods prior to inserting the row into the result set.
*
* only the updatexxx(), getxxx(), and insertrow() methods may be called
* when the cursor is on the insert row. all of the columns in a result set
* must be given a value each time this method is called before calling
* insertrow(). updatexxx()must be called before getxxx() on a column.
*
* @exception sqlexception
*                if a database-access error occurs, or the result set is
*                not updatable
*/
public void movetoinsertrow   throws sqlexception
checkexecifclosed
// if not updatable resultset, then throw exception
checkupdatablecursor
synchronized  getconnectionsynchronization
try
//we need to set the context because the getnull call below
//(if dealing with territory based database) might need to
//look up the current context to get the correct
//rulebasedcollator. this rulebasedcollator will be used to
//construct a collatorsql... type rather than sql...char type
//when dealing with character string datatypes.
setupcontextstack
// initialize state corresponding to insertrow/updaterow impl.
initializeupdaterowmodifiers
isoninsertrow   true
for  int i 1  i <  columngotupdated length  i
updaterow setcolumn i
resultdescription getcolumndescriptor i  gettype   getnull
catch  throwable ex
handleexception ex
finally
restorecontextstack
/**
* jdbc 2.0
*
* move the cursor to the remembered cursor position, usually the current
* row. has no effect unless the cursor is on the insert row.
*
* @exception sqlexception
*                if a database-access error occurs, or the result set is
*                not updatable
*/
public void movetocurrentrow   throws sqlexception
checkexecifclosed
// if not updatable resultset, then throw exception
checkupdatablecursor
synchronized  getconnectionsynchronization
try
if  isoninsertrow
// initialize state corresponding to insertrow/updaterow impl.
initializeupdaterowmodifiers
isoninsertrow   false
catch  throwable ex
handleexception ex
/**
* jdbc 2.0
*
* get a blob column.
*
* @param columnindex the first column is 1, the second is 2, ...
* @return an object representing a blob
*/
public blob getblob int columnindex  throws sqlexception
closecurrentstream       closing currentstream does not depend on the
// underlying connection. do this outside of
// the connection synchronization.
checkifclosed        checking result set closure does not depend
// on the underlying connection. do this
// outside of the connection synchronization.
synchronized  getconnectionsynchronization
int coltype   getcolumntype columnindex
// db2, only allow getblob on a blob column.
if  coltype    types blob
throw datatypeconversion    columnindex
boolean pushstack   false
try
datavaluedescriptor dvd   getcolumn columnindex
if  wasnull   dvd isnull
return null
// should set up a context stack if we have a long column,
// since a blob may keep a pointer to a long column in the
// database
if  dvd getstream      null
pushstack   true
if  pushstack
setupcontextstack
return new embedblob dvd  getembedconnection
catch  throwable t
throw handleexception t
finally
if  pushstack
restorecontextstack
/**
* jdbc 2.0
*
* get a clob column.
*
* @param columnindex the first column is 1, the second is 2, ...
* @return an object representing a clob
*/
public final clob getclob int columnindex  throws sqlexception
closecurrentstream       closing currentstream does not depend on the
// underlying connection. do this outside of
// the connection synchronization.
checkifclosed        checking result set closure does not depend
// on the underlying connection. do this
// outside of the connection synchronization.
synchronized  getconnectionsynchronization
int coltype   getcolumntype columnindex
// db2:, only allow getclob on a clob column.
if  coltype    types clob
throw datatypeconversion    columnindex
boolean pushstack   false
try
stringdatavalue dvd    stringdatavalue getcolumn columnindex
if  wasnull   dvd isnull
return null
// should set up a context stack if we have a long column,
// since a clob may keep a pointer to a long column in the
// database
if  dvd getstream      null
pushstack   true
if  pushstack
setupcontextstack
return new embedclob getembedconnection    dvd
catch  throwable t
throw handleexception t
finally
if  pushstack
restorecontextstack
/**
* jdbc 2.0
*
* get a blob column.
*
* @param columnname the column name
* @return an object representing a blob
*/
public final blob getblob string columnname  throws sqlexception
checkifclosed
return  getblob findcolumnname columnname
/**
* jdbc 2.0
*
* get a clob column.
*
* @param columnname the column name
* @return an object representing a clob
* @exception sqlexception
*                feature not implemented for now.
*/
public final clob getclob string columnname  throws sqlexception
checkifclosed
return  getclob findcolumnname columnname
/**
* jdbc 3.0
*
* updates the designated column with a java.sql.blob value. the updater
* methods are used to update column values in the current row or the insert
* row. the updater methods do not update the underlying database; instead
* the updaterow or insertrow methods are called to update the database.
*
* @param columnindex -
*            the first column is 1, the second is 2
* @param x -
*            the new column value
* @exception sqlexception
*                feature not implemented for now.
*/
public void updateblob int columnindex  blob x  throws sqlexception
checksbeforeupdatexxx    columnindex
int coltype   getcolumntype columnindex
if  coltype    types blob
throw datatypeconversion columnindex
if  x    null
updatenull columnindex
else
long length   x length
updatebinarystreaminternal columnindex  x getbinarystream    false
length
/**
* jdbc 3.0
*
* updates the designated column with a java.sql.blob value. the updater
* methods are used to update column values in the current row or the insert
* row. the updater methods do not update the underlying database; instead
* the updaterow or insertrow methods are called to update the database.
*
* @param columnname -
*            the sql name of the column
* @param x -
*            the new column value
* @exception sqlexception
*                feature not implemented for now.
*/
public void updateblob string columnname  blob x  throws sqlexception
checkifclosed
updateblob findcolumnname columnname   x
/**
* jdbc 3.0
*
* updates the designated column with a java.sql.clob value. the updater
* methods are used to update column values in the current row or the insert
* row. the updater methods do not update the underlying database; instead
* the updaterow or insertrow methods are called to update the database.
*
* @param columnindex -
*            the first column is 1, the second is 2
* @param x -
*            the new column value
* @exception sqlexception
*                feature not implemented for now.
*/
public void updateclob int columnindex  clob x  throws sqlexception
checksbeforeupdatexxx    columnindex
int coltype   getcolumntype columnindex
if  coltype    types clob
throw datatypeconversion columnindex
if  x    null
updatenull columnindex
else
long length   x length
updatecharacterstreaminternal
columnindex  x getcharacterstream    false  length
/**
* jdbc 3.0
*
* updates the designated column with a java.sql.clob value. the updater
* methods are used to update column values in the current row or the insert
* row. the updater methods do not update the underlying database; instead
* the updaterow or insertrow methods are called to update the database.
*
* @param columnname -
*            the sql name of the column
* @param x -
*            the new column value
* @exception sqlexception
*                feature not implemented for now.
*/
public void updateclob string columnname  clob x  throws sqlexception
checkifclosed
updateclob findcolumnname columnname   x
/*
* * end of jdbc public methods.
*/
/**
* map a resultset column name to a resultset column index.
*
* @param columnname
*            the name of the column
* @return the column index
* @exception sqlexception
*                thrown on failure.
*/
protected int findcolumnname string columnname
throws sqlexception
// n.b. if we went through the jdbc interface,
// there is a caching implementation in the jdbc doc
// (appendix c). but we go through our own info, for now.
if  columnname    null
throw newsqlexception sqlstate null_column_name
int position   resultdescription findcolumninsenstive columnname
if  position     1
throw newsqlexception sqlstate column_not_found  columnname
else
return position
/**
* documented behaviour for streams is that they are implicitly closed on
* the next get*() method call.
*/
private final void closecurrentstream
if  currentstream    null
try
// 99% of the time, the stream is already closed.
synchronized this
if  currentstream    null
if  currentstream instanceof java io reader
java io reader  currentstream  close
else
java io inputstream  currentstream  close
catch  ioexception ioe
// just ignore, caller has already read the data they require
finally
currentstream   null
/**
* throw an exception if this resultset is closed.
*
* @param operation		the operation the caller is trying to perform
*
* @exception sqlexception		thrown if this resultset is closed.
*/
final void checkifclosed string operation  throws sqlexception
// if the jdbc resultset has been explicitly closed, isclosed is
// true. in some cases, the underlying language resultset can be closed
// without setting isclosed in the jdbc resultset. this happens if the
// resultset is non-holdable and the transaction has been committed, or
// if an error in auto-commit mode causes a rollback of the
// transaction.
if  isclosed    theresults isclosed
// the jdbc resultset hasn't been explicitly closed. perform some
// basic cleanup and mark it as closed.
if   isclosed
closecurrentstream
isclosed   true
throw newsqlexception sqlstate lang_result_set_not_open  operation
/**
* throw an exception if this resultset is closed or its
* connection has been closed. if the resultset has not
* been explictly closed but the connection is closed,
* then this resultset will be marked as closed.
*/
final void checkexecifclosed string operation  throws sqlexception
checkifclosed operation
java sql connection appconn   getembedconnection   getapplicationconnection
// currently disconnected, i.e. a detached gobal transaction
if  appconn    null
throw util nocurrentconnection
if  appconn isclosed
closecurrentstream
isclosed   true
throw util nocurrentconnection
/**
* try to see if we can fish the sql statement out of the local statement.
* @return null if we cannot figure out what sql statement is currently
*  executing
*/
protected string getsqltext
if  stmt    null
return null
return stmt getsqltext
/**
* try to see if we can fish the pvs out of the local statement.
* @return null if we cannot figure out what parameter value set is currently
*  using
*/
protected parametervalueset getparametervalueset
if  stmt    null
return null
return stmt getparametervalueset
private static boolean ismaxfieldsizetype int coltype
return  coltype    types binary    coltype    types varbinary
coltype    types longvarbinary    coltype    types char
coltype    types varchar    coltype    types longvarchar
/*
* close result set if we have a transaction level error
*/
final sqlexception closeontransactionerror throwable thrownexception  throws sqlexception
sqlexception sqle   handleexception thrownexception
if  thrownexception instanceof standardexception
standardexception se    standardexception  thrownexception
int severity   se getseverity
if  severity    exceptionseverity transaction_severity
try
close
catch  throwable t
sqle setnextexception handleexception t
return sqle
/**
get the column value for a getxxx() call.
this method:
<ul>
<li> closes the current stream (as per jdbc)
<li> throws a sqlexception if the result set is closed
<li> throws a sqlexception if the resultset is not on a row
<li> throws a sqlexception if the columnindex is out of range
<li> returns the datavaluedescriptor for the column.
</ul>
*/
protected final datavaluedescriptor getcolumn int columnindex
throws sqlexception  standardexception
closecurrentstream
if  columnindex < 1    columnindex > resultdescription getcolumncount
throw newsqlexception sqlstate column_not_found
new integer columnindex
if  isoninsertrow    currentrowhasbeenupdated    columngotupdated
return updaterow getcolumn columnindex
else
checkonrow       make sure there's a row
return currentrow getcolumn columnindex
/**
an exception on many method calls to jdbc objects does not change the state
of the transaction or statement, or even the underlying object. this method
simply wraps the excecption in a sqlexception. examples are:
<ul>
<li> getxxx() calls on resultset - resultset is not closed.
<li> setxxx() calls on preparedstatement - resultset is not closed.
</ul>
in addition these exceptions must not call higher level objects to
be closed (e.g. when executing a server side java procedure). see bug 4397
*/
static final sqlexception nostatechangeexception throwable thrownexception
// any exception on a setxxx/getxxx method does not close
// the resultset or the statement. so we only need
// to convert the exception to a sqlexception.
return transactionresourceimpl wrapinsqlexception thrownexception
/**
a dynamic result was created in a procedure by a nested connection.
once the procedure returns, there is a good chance that connection is closed,
so we re-attach the result set to the connection of the statement the called
the procedure, which will be still open.
<br>
in the case where the dynamic result will not be accessible
then owningstmt will be null, the resultset will be linked to
the root connection to allow its close method to work. it
will remain attached to its original statement.
*/
void setdynamicresultset embedstatement owningstmt
if  owningstmt    null
this owningstmt   owningstmt
this applicationstmt   owningstmt applicationstatement
this localconn   owningstmt getembedconnection
else
this localconn   this localconn rootconnection
// the activation that created these results now becomes
// a single use activation so it will be closed when this
// object is closed. otherwise the activation would
// only be closed on garbage collection for any
// dynamic result set created by a preparedstatement
// or callablestatement. dynamic result sets created
// by statement objects will already be marked as
// single use.
this singleuseactivation   theresults getactivation
/*
** comparable (for ordering dynamic result sets from procedures)
*/
public final int compareto object other
embedresultset olrs    embedresultset  other
return order   olrs order
/**
* checks if the result set has a scrollable cursor.
*
* @param methodname name of the method which requests the check
* @exception sqlexception if the result set is closed or its type
* is <code>type_forward_only</code>
*/
private void checkscrollcursor string methodname  throws sqlexception
checkifclosed methodname
if  stmt getresultsettype      java sql resultset type_forward_only
throw util
newembedsqlexception
sqlstate not_on_forward_only_cursor
new object   methodname
standardexception
getseverityfromidentifier sqlstate not_on_forward_only_cursor
private void checkupdatablecursor string operation  throws sqlexception
if  getconcurrency      java sql resultset concur_updatable
throw util generatecssqlexception
sqlstate updatable_resultset_api_disallowed
operation
private boolean checkrowposition int position  string positiontext
throws sqlexception
// beforefirst is only allowed on scroll cursors
checkscrollcursor positiontext
synchronized  getconnectionsynchronization
setupcontextstack
try
try
/*
* push and pop a statementcontext around a next call so
* that the resultset will get correctly closed down on an
* error. (cache the languageconnectioncontext)
*/
languageconnectioncontext lcc   getembedconnection
getlanguageconnection
// no timeout for this operation (use 0)
statementcontext statementcontext
lcc pushstatementcontext isatomic
concurrencyofthisresultset  java sql resultset concur_read_only
getsqltext
getparametervalueset
false  0l
boolean result   theresults checkrowposition position
lcc popstatementcontext statementcontext  null
return result
catch  throwable t
/*
* need to close the result set here because the error might
* cause us to lose the current connection if this is an xa
* connection and we won't be able to do the close later
*/
throw closeontransactionerror t
finally
restorecontextstack
/**
* * is this result set from a select for update statement?
*/
public final boolean isforupdate
if  theresults instanceof noputresultset
return   noputresultset  theresults  isforupdate
return false
final string getcolumnsqltype int column
return resultdescription getcolumndescriptor column
gettype   gettypeid   getsqltypename
/**
* return the user-defined maximum size of the column.
*
* note that this may be different from the maximum column size derby is
* able, or allowed, to handle (called 'maximum maximum length').
*
* @param columnindex the 1-based index of the column
* @return the maximum length of the column
*/
private final int getmaxcolumnwidth int columnindex
return resultdescription getcolumndescriptor columnindex
gettype   getmaximumwidth
private final sqlexception datatypeconversion string targettype  int column
return newsqlexception sqlstate lang_data_type_get_mismatch  targettype
getcolumnsqltype column
private final sqlexception datatypeconversion int column  string targettype
return newsqlexception sqlstate lang_data_type_get_mismatch
getcolumnsqltype column   targettype
/**
* mark a column as already having a stream accessed from it.
* if the stream was already accessed, then throw an exception.
* @param columnindex
* @throws sqlexception
*/
final void usestream int columnindex  throws sqlexception
if  streamusedflags    null
streamusedflags   new boolean
else if  streamusedflags
throw newsqlexception sqlstate lang_stream_retrieved_already
streamusedflags   true
/**
* jdbc 4.0
*
* <p>
* checks whether this <code>resultset</code> object has been
* closed, either automatically or because <code>close()</code>
* has been called.
*
* @return <code>true</code> if the <code>resultset</code> is
* closed, <code>false</code> otherwise
* @exception sqlexception if a database error occurs
*/
public final boolean isclosed   throws sqlexception
if  isclosed  return true
try
// isclosed is not updated when embedconnection.close() is
// called, so we need to check the status of the
// connection
checkexecifclosed
return false
catch  sqlexception sqle
return isclosed
/**
* adds a warning to the end of the warning chain.
*
* @param w the warning to add to the warning chain.
*/
private void addwarning sqlwarning w
if  topwarning    null
topwarning   w
else
topwarning setnextwarning w
/**
*
* jdbc 2.0
*
* update a column with an ascii stream value.
*
* the updatexxx() methods are used to update column values in the current
* row, or the insert row. the updatexxx() methods do not update the
* underlying database, instead the updaterow() or insertrow() methods are
* called to update the database.
*
* @param columnindex
*            the first column is 1, the second is 2, ...
* @param x
*            the new column value
* @param length
*            the length of the stream
* @exception sqlexception
*                if a database-access error occurs
*/
public void updateasciistream int columnindex  java io inputstream x
int length  throws sqlexception
checkifclosed
updateasciistream columnindex x  long length
/**
*
* jdbc 2.0
*
* update a column with a binary stream value.
*
* the updatexxx() methods are used to update column values in the current
* row, or the insert row. the updatexxx() methods do not update the
* underlying database, instead the updaterow() or insertrow() methods are
* called to update the database.
*
* @param columnindex
*            the first column is 1, the second is 2, ...
* @param x
*            the new column value
* @param length
*            the length of the stream
* @exception sqlexception
*                if a database-access error occurs
*/
public void updatebinarystream int columnindex  java io inputstream x
int length  throws sqlexception
checkifclosed
updatebinarystream columnindex x  long length
/**
*
* jdbc 2.0
*
* update a column with a character stream value.
*
* the updatexxx() methods are used to update column values in the current
* row, or the insert row. the updatexxx() methods do not update the
* underlying database, instead the updaterow() or insertrow() methods are
* called to update the database.
*
* @param columnindex
*            the first column is 1, the second is 2, ...
* @param x
*            the new column value
* @param length
*            the length of the stream
* @exception sqlexception
*                if a database-access error occurs
*/
public void updatecharacterstream int columnindex  java io reader x
int length  throws sqlexception
checkifclosed
updatecharacterstream columnindex x  long length
/**
*
* jdbc 4.0
*
* update a column with an ascii stream value.
*
* the updatexxx() methods are used to update column values in the current
* row, or the insert row. the updatexxx() methods do not update the
* underlying database, instead the updaterow() or insertrow() methods are
* called to update the database.
*
* @param columnname
*            the name of the column
* @param x
*            the new column value
* @param length
*            of the stream
* @exception sqlexception
*                if a database-access error occurs
*/
public void updateasciistream string columnname  java io inputstream x
long length  throws sqlexception
checkifclosed
updateasciistream findcolumnname columnname  x length
/**
* updates the designated column with a character stream value.
* the data will be read from the stream as needed until end-of-stream is
* reached.
*
* the updater methods are used to update column values in the current row
* or the insert row. the updater methods do not update the underlying
* database; instead the <code>updaterow</code> or </code>insertrow</code>
* methods are called to update the database.
*
* @param columnname the label for the column specified with the sql as
*      clause. if the sql as clause was not specified, then the label is
*      the name of the column
* @param x the new column value
* @throws sqlexception if the columnindex is not valid; if a database
*      access error occurs; the result set concurrency is
*      <code>concur_read_only</code> or this method is called on a closed
*      result set
*/
public void updateasciistream string columnname  inputstream x
throws sqlexception
checkifclosed
updateasciistream findcolumnname columnname   x
/**
*
* jdbc 4.0
*
* update a column with a binary stream value.
*
* the updatexxx() methods are used to update column values in the current
* row, or the insert row. the updatexxx() methods do not update the
* underlying database, instead the updaterow() or insertrow() methods are
* called to update the database.
*
* @param columnname
*            the name of the column
* @param x
*            the new column value
* @param length
*            of the stream
* @exception sqlexception
*                if a database-access error occurs
*/
public void updatebinarystream string columnname  java io inputstream x
long length  throws sqlexception
checkifclosed
updatebinarystream findcolumnname columnname  x length
/**
* updates the designated column with a binary stream value.
* the data will be read from the stream as needed until end-of-stream is
* reached.
*
* the updater methods are used to update column values in the current row
* or the insert row. the updater methods do not update the underlying
* database; instead the <code>updaterow</code> or <code>insertrow</code>
* methods are called to update the database.
*
* @param columnname the label for the column specified with the sql as
*      clause. if the sql as clause was not specified, then the label is
*      the name of the column
* @param x the new column value
* @throws sqlexception if the columnlabel is not valid; if a database
*      access error occurs; the result set concurrency is
*      <code>concur_read_only</code> or this method is called on a closed
*      result set
*/
public void updatebinarystream string columnname  inputstream x
throws sqlexception
checkifclosed
updatebinarystream findcolumnname columnname   x
/**
* jdbc 4.0
*
* update a column with a character stream value.
*
* the updatexxx() methods are used to update column values in the current
* row, or the insert row. the updatexxx() methods do not update the
* underlying database, instead the updaterow() or insertrow() methods are
* called to update the database.
*
* @param columnname
*            the name of the column
* @param reader
*            the new column value
* @param length
*            length of the stream
* @exception sqlexception
*                if a database-access error occurs
*/
public void updatecharacterstream string columnname  java io reader reader
long length  throws sqlexception
checkifclosed
updatecharacterstream findcolumnname columnname  reader length
/**
* updates the designated column with a character stream value.
* the data will be read from the stream as needed until end-of-stream is
* reached.
*
* the updater methods are used to update column values in the current row
* or the insert row. the updater methods do not update the underlying
* database; instead the <code>updaterow</code> or </code>insertrow</code>
* methods are called to update the database.
*
* @param columnname the label for the column specified with the sql as
*      clause. if the sql as clause was not specified, then the label is
*      the name of the column
* @param reader the new column value
* @throws sqlexception if the columnindex is not valid; if a database
*      access error occurs; the result set concurrency is
*      <code>concur_read_only</code> or this method is called on a closed
*      result set
*/
public void updatecharacterstream string columnname  reader reader
throws sqlexception
checkifclosed
updatecharacterstream findcolumnname columnname   reader
/**
*
* jdbc 4.0
*
* updates the designated column with a java.sql.blob value. the updater
* methods are used to update column values in the current row or the insert
* row. the updater methods do not update the underlying database; instead
* the updaterow or insertrow methods are called to update the database.
*
* @param columnindex -
*            the first column is 1, the second is 2
* @param x -
*            the new column value
* @param length -
*            the length of the blob datatype
* @exception sqlexception
*
*/
public void updateblob int columnindex  inputstream x  long length
throws sqlexception
checksbeforeupdatexxx    columnindex
int coltype   getcolumntype columnindex
if  coltype    types blob
throw datatypeconversion columnindex
if  x    null
updatenull columnindex
else
updatebinarystreaminternal columnindex  x  false  length
/**
* updates the designated column using the given input stream.
* the data will be read from the stream as needed until end-of-stream is reached.
*
* the updater methods are used to update column values in the current row
* or the insert row. the updater methods do not update the underlying
* database; instead the updaterow or insertrow methods are called to
* update the database.
*
* @param columnindex the first column is 1, the second is 2, ...
* @param x an object that contains the data to set the
*     parameter value to.
* @throws sqlexception if the columnindex is not valid; if a database
*     access error occurs; the result set concurrency is
*     <code>concur_read_only</code> or this method is called on a closed
*     result set
*/
public void updateblob int columnindex  inputstream x
throws sqlexception
checksbeforeupdatexxx    columnindex
int coltype   getcolumntype columnindex
if  coltype    types blob
throw datatypeconversion columnindex
updatebinarystreaminternal columnindex  x  true   1
/**
*
* jdbc 4.0
*
* updates the designated column with a java.sql.blob value. the updater
* methods are used to update column values in the current row or the insert
* row. the updater methods do not update the underlying database; instead
* the updaterow or insertrow methods are called to update the database.
*
* @param columnname -
*            the name of the column to be updated
* @param x -
*            the new column value
* @param length -
*            the length of the blob datatype
* @exception sqlexception
*
*/
public void updateblob string columnname  inputstream x  long length
throws sqlexception
checkifclosed
updateblob findcolumnname columnname  x length
/**
* updates the designated column using the given input stream.
* the data will be read from the stream as needed until end-of-stream is reached.
*
* the updater methods are used to update column values in the current row
* or the insert row. the updater methods do not update the underlying
* database; instead the updaterow or insertrow methods are called to
* update the database.
*
* @param columnname the label for the column specified with the sql as
*     clause. if the sql as clause was not specified, then the label is
*     the name of the column
* @param x an object that contains the data to set the
*     parameter value to.
* @throws sqlexception if the columnindex is not valid; if a database
*     access error occurs; the result set concurrency is
*     <code>concur_read_only</code> or this method is called on a closed
*     result set
*/
public void updateblob string columnname  inputstream x
throws sqlexception
checkifclosed
updateblob findcolumnname columnname   x
/**
*
* jdbc 4.0
*
* updates the designated column with a java.sql.clob value. the updater
* methods are used to update column values in the current row or the insert
* row. the updater methods do not update the underlying database; instead
* the updaterow or insertrow methods are called to update the database.
*
* @param columnindex -
*            the first column is 1, the second is 2
* @param x -
*            the new column value
* @exception sqlexception
*                feature not implemented for now.
*/
public void updateclob int columnindex  reader x  long length
throws sqlexception
checksbeforeupdatexxx    columnindex
int coltype   getcolumntype columnindex
if  coltype    types clob
throw datatypeconversion columnindex
if  x    null
updatenull columnindex
else
updatecharacterstreaminternal
columnindex  x  false  length
/**
* updates the designated column using the given <code>reader</code>
* object.
*
* the data will be read from the stream as needed until end-of-stream is
* reached. the jdbc driver will do any necessary conversion from
* <code>unicode</code> to the database char format.
*
* the updater methods are used to update column values in the current row
* or the insert row. the updater methods do not update the underlying
* database; instead the <code>updaterow</code> or <code>insertrow</code>
* methods are called to update the database.
*
* @param columnindex the first column is 1, the second is 2, ...
* @param x an object that contains the data to set the parameter
*     value to
* @throws sqlexception if the columnindex is not valid; if a database
*     access error occurs; the result set concurrency is
*     <code>concur_read_only</code> or this method is called on a closed
*     result set
*/
public void updateclob int columnindex  reader x
throws sqlexception
checksbeforeupdatexxx    columnindex
int coltype   getcolumntype columnindex
if  coltype    types clob
throw datatypeconversion columnindex
updatecharacterstreaminternal columnindex  x  true   1
/**
*
* jdbc 4.0
*
* updates the designated column with a java.sql.clob value. the updater
* methods are used to update column values in the current row or the insert
* row. the updater methods do not update the underlying database; instead
* the updaterow or insertrow methods are called to update the database.
*
* @param columnname -
*            the name of the clob column
* @param x -
*            the new column value
* @exception sqlexception
*                feature not implemented for now.
*/
public void updateclob string columnname  reader x  long length
throws sqlexception
checkifclosed
updateclob findcolumnname columnname  x length
/**
* updates the designated column using the given <code>reader</code>
* object.
*
* the data will be read from the stream as needed until end-of-stream is
* reached. the jdbc driver will do any necessary conversion from
* <code>unicode</code> to the database char format.
*
* the updater methods are used to update column values in the current row
* or the insert row. the updater methods do not update the underlying
* database; instead the <code>updaterow</code> or <code>insertrow</code>
* methods are called to update the database.
*
* @param columnname the label for the column specified with the sql as
*     clause. if the sql as clause was not specified, then the label is
*     the name of the column
* @param x an object that contains the data to set the parameter
*     value to
* @throws sqlexception if the columnindex is not valid; if a database
*     access error occurs; the result set concurrency is
*     <code>concur_read_only</code> or this method is called on a closed
*     result set
*/
public void updateclob string columnname  reader x
throws sqlexception
checkifclosed
updateclob findcolumnname columnname   x
/*
* @see org.apache.derby.iapi.jdbc.engineresultset#isnull(int)
*/
public boolean isnull int columnindex  throws sqlexception
try
datavaluedescriptor dvd   getcolumn columnindex
return dvd isnull
catch  standardexception t
throw nostatechangeexception t
public int getlength int columnindex  throws sqlexception
try
datavaluedescriptor dvd   getcolumn columnindex
return dvd getlength
catch  standardexception t
throw nostatechangeexception t