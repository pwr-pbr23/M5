/*
derby - class org.apache.derby.impl.drda.networkservercontrolimpl
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl drda
import java io bytearrayinputstream
import java io bytearrayoutputstream
import java io dataoutputstream
import java io filteroutputstream
import java io ioexception
import java io inputstream
import java io outputstream
import java io printstream
import java io printwriter
import java net inetaddress
import java net serversocket
import java net socket
import javax net socketfactory
import javax net serversocketfactory
import javax net ssl sslserversocket
import javax net ssl sslsocket
import javax net ssl sslsocketfactory
import javax net ssl sslserversocketfactory
import java net unknownhostexception
import java nio charset charset
import java security permission
import java security accesscontroller
import java security accesscontrolexception
import java security privilegedaction
import java security privilegedactionexception
import java security privilegedexceptionaction
import java sql connection
import java sql driver
import java sql drivermanager
import java sql sqlexception
import java sql sqlwarning
import java util arraylist
import java util enumeration
import java util hashtable
import java util properties
import java util stringtokenizer
import java util vector
import org apache derby drda networkservercontrol
import org apache derby security systempermission
import org apache derby iapi error standardexception
import org apache derby iapi jdbc drdaserverstarter
import org apache derby iapi reference attribute
import org apache derby iapi reference drdaconstants
import org apache derby iapi reference module
import org apache derby iapi reference property
import org apache derby iapi reference sqlstate
import org apache derby iapi services i18n messageservice
import org apache derby iapi services info productgenusnames
import org apache derby iapi services info productversionholder
import org apache derby iapi services info version
import org apache derby iapi services jmx managementservice
import org apache derby iapi services monitor monitor
import org apache derby iapi services property propertyutil
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi tools i18n localizedoutput
import org apache derby iapi tools i18n localizedresource
import org apache derby iapi util cheapdateformatter
import org apache derby iapi util stringutil
import org apache derby impl jdbc embedsqlexception
import org apache derby impl jdbc util
import org apache derby iapi jdbc authenticationservice
import org apache derby iapi reference messageid
import org apache derby iapi security securityutil
import org apache derby mbeans versionmbean
import org apache derby mbeans drda networkservermbean
/**
networkservercontrolimpl does all the work for networkservercontrol
@see networkservercontrol for description
*/
public final class networkservercontrolimpl
private final static int no_usage_msgs  12
private final static string  commands
// number of required arguments for each command
private final static int  command_args
0  0  1  1  0  1  0  0  1  1  0
public final static int command_start   0
public final static int command_shutdown   1
public final static int command_trace   2
public final static int command_tracedirectory   3
public final static int command_testconnection   4
public final static int command_logconnections   5
public final static int command_sysinfo   6
public final static int command_runtime_info   7
public final static int command_maxthreads   8
public final static int command_timeslice   9
public final static int command_properties   10
public final static int command_unknown    1
public final static string  dashargs
public final static int dasharg_port   0
public final static int dasharg_database   1
public final static int dasharg_user   2
public final static int dasharg_password   3
public final static int dasharg_loadsysibm   4
public final static int dasharg_encalg   5
public final static int dasharg_encprv   6
public final static int dasharg_bootpassword   7
public final static int dasharg_host   8
public final static int dasharg_session   9
public final static int dasharg_unsecure   10
private final static int dasharg_ssl   11
// command protocol version - you need to increase this number each time
// the command protocol changes
// derby-2109: shutdown command now transmits user credentials
private final static int protocol_version   2
private final static string command_header
private final static string reply_header
private final static int reply_header_length   reply_header length
private final static int ok   0
private final static int warning   1
private final static int error   2
private final static int sqlerror   3
private final static int sqlwarning   4
private final static string drda_prop_messages
private final static string drda_prop_debug
private final static string cloudscape_driver
public final static string unexpected_err
private final static int min_maxthreads    1
private final static int min_timeslice    1
private final static int use_default    1
private final static int default_maxthreads   0    for now create whenever needed
private final static int default_timeslice   0 	  for now never yield
private final static string default_host
private final static string drda_msg_prefix
private final static string default_locale
private final static string default_locale_country
// check up to 10 seconds to see if shutdown occurred
private final static int shutdown_check_attempts   100
private final static int shutdown_check_interval  100
// maximum reply size
private final static int maxreply   32767
// application server attributes.
protected static string att_srvclsnm
protected final static string att_srvnam
protected static string att_extnam
protected static string att_srvrlslv
protected static string prdid
protected static byte prdidbytes_
private static string buildnumber
private static string versionstring
// we will use single or mixed, not double byte to reduce traffic on the
// wire, this is in keeping with jcc
// note we specify utf8 for the single byte encoding even though it can
// be multi-byte.
protected final static int ccsidsbc   1208    use utf8
protected final static int ccsidmbc   1208    use utf8
protected final static string default_encoding         use utf8 for writing
final static charset default_charset   charset forname default_encoding
protected final static int default_ccsid   1208
protected final static byte space_char   32
// application server manager levels - this needs to be in sync
// with codepoint.mgr_codepoints
protected final static int  mgr_levels     7     agent
4 	   ccsid manager
0     cnmappc not implemented
0     cmnsyncpt not implemented
5     cmntcpip
0     dictionary
7     rdb
0     rsyncmgr
7     secmgr
7     sqlam
0     supervisor
0     syncptmgr
7     xamgr
protected printwriter logwriter                            console
protected printwriter cloudscapelogwriter                  derby log
private static driver cloudscapedriver
// error types
private final static int errtype_severe   1
private final static int errtype_user   2
private final static int errtype_info   3
private final static int errtype_unknown    1
// command argument information
private vector commandargs   new vector
private string databasearg
// derby-2109: note that derby jdbc clients have a default user name
// "app" (= property.default_user_name) assigned if they don't provide
// credentials.  we could do the same for networkservercontrol clients
// here, but this class is robust enough to allow for null as default.
private string userarg   null
private string passwordarg   null
private string bootpasswordarg
private string encalgarg
private string encprvarg
private string hostarg   default_host
private inetaddress hostaddress
private int sessionarg
private boolean unsecurearg
// used to debug memory in sanitymanager.debug mode
private memcheck mc
// reply buffer
private byte  replybuffer
private int replybuffercount 	  length of reply
private int replybufferpos 		  current position in reply
//
// server configuration
//
// static values - set at start can't be changed once server has started
private int	portnumber   networkservercontrol default_portnumber 	   port server listens to
// configurable values
private string tracedirectory 		   directory to place trace files in
private object tracedirectorysync   new object      object to use for syncing
private boolean traceall 			   trace all sessions
private object traceallsync   new object   	   object to use for syncing reading
// and changing trace all
private object serverstartsync   new object   	   for syncing start of server
private boolean logconnections 		   log connects
private object logconnectionssync   new object       object to use for syncing
// logconnections value
private int minthreads 				   default minimum number of connection threads
private int maxthreads 				   default maximum number of connection threads
private object threadssync   new object       object to use for syncing reading
// and changing default min and max threads
private int timeslice 				   default time slice of a session to a thread
private object timeslicesync   new object      object to use for syncing reading
// and changing timeslice
private boolean keepalive   true       keepalive value for client socket
private int minpoolsize 			  minimum pool size for pooled connections
private int maxpoolsize 			  maximum pool size for pooled connections
private object poolsync   new object   	   object to use for syning reading
protected boolean debugoutput   false
private boolean cleanuponstart   false 	   should we clean up when starting the server?
private boolean restartflag   false
protected final static int invalid_or_notset_securitymechanism    1
// variable to store value set to derby.drda.securitymechanism
// default value is -1 which indicates that this property isnt set or
// the value is invalid
private int allowonlysecuritymechanism   invalid_or_notset_securitymechanism
//
// variables for a client command session
//
private socket clientsocket   null
private inputstream clientis   null
private outputstream clientos   null
private bytearrayoutputstream bytearrayos   new bytearrayoutputstream
private dataoutputstream commandos   new dataoutputstream bytearrayos
private object shutdownsync   new object
private boolean shutdown
private int connnum 		   number of connections since server started
private serversocket serversocket
private networkservercontrolimpl serverinstance
private localizedresource langutil
public string clientlocale
arraylist  localaddresses     list of local addresses for checking admin
// commands.
// open sessions
private hashtable sessiontable   new hashtable
// current session
private session currentsession
// drdaconnthreads
private vector threadlist   new vector
// queue of sessions waiting for a free thread - the queue is managed
// in a simple first come, first serve manner - no priorities
private vector runqueue   new vector
// number of drdaconnthreads waiting for something to do
private int freethreads
// known application requesters
private hashtable apprequestertable   new hashtable
// accessed by inner classes for privileged action
private string propertyfilename
private networkservercontrolimpl thiscontrol   this
// if the server is started from the command line, it should shutdown the
// databases it has booted.
private boolean shutdowndatabasesonshutdown   false
// ssl related stuff
private static final int ssl_off   0
private static final int ssl_basic   1
private static final int ssl_peer_authentication   2
private int sslmode   ssl_off
/**
* can eusridpwd security mechanism be used with
* the current jvm
*/
private static boolean supports_eusridpwd   false
/*
* drda specification for the eusridpwd security mechanism
* requires dh algorithm support with a 32-byte prime to be
* used. not all jce implementations have support for this.
* hence here we need to find out if eusridpwd can be used
* with the current jvm.
*/
static
try
// the decryptionmanager class will instantiate objects of the required
// security algorithms that are needed for eusridpwd
// an exception will be thrown if support is not available
// in the jce implementation in the jvm in which the server
// is started.
new decryptionmanager
supports_eusridpwd   true
catch exception e
// if an exception is thrown, ignore exception.
// set supports_eusridpwd to false indicating that the server
// does not have support for eusridpwd security mechanism
supports_eusridpwd   false
/**
* get the host where we listen for connections.
*/
public  string  gethost     return hostarg
/**
* return true if the customer forcibly overrode our decision to install a
* default securitymanager.
*/
public  boolean runningunsecure     return unsecurearg
// constructor
public networkservercontrolimpl   throws exception
init
getpropertyinfo
/**
* internal constructor for networkservercontrol api.
* @param address inetaddress to listen on, throws npe if null
* @param portnumber portnumber to listen on, -1 use property or default
* @throws exception on error
* @see networkservercontrol
*/
public networkservercontrolimpl inetaddress address  int portnumber  throws exception
this
this hostaddress   address
this portnumber    portnumber <  0  ?
this portnumber  portnumber
this hostarg   address gethostaddress
/**
* internal constructor for networkservercontrol api.
* @param username the user name for actions requiring authorization
* @param password the password for actions requiring authorization
* @throws exception on error
* @see networkservercontrol
*/
public networkservercontrolimpl string username  string password
throws exception
this
this userarg   username
this passwordarg   password
/**
* internal constructor for networkservercontrol api.
* @param address inetaddress to listen on, throws npe if null
* @param portnumber portnumber to listen on, -1 use property or default
* @param username the user name for actions requiring authorization
* @param password the password for actions requiring authorization
* @throws exception on error
* @see networkservercontrol
*/
public networkservercontrolimpl inetaddress address  int portnumber
string username  string password
throws exception
this address  portnumber
this userarg   username
this passwordarg   password
private void init   throws exception
// adjust the application in accordance with derby.ui.locale and derby.ui.codeset
langutil   new localizedresource null null drda_prop_messages
serverinstance   this
//set server attributes to be used in excsat
productversionholder mypvh   getnetproductversionholder
att_extnam   att_srvnam       java lang thread currentthread   getname
att_srvclsnm   mypvh getproductname
versionstring   mypvh getversionbuildstring true
string majorstr   string valueof mypvh getmajorversion
string minorstr   string valueof mypvh getminorversion
// maintenance version. server protocol version.
// only changed if client needs to recognize a new server version.
string drdamaintstr   string valueof mypvh getdrdamaintversion
// prdid format as jcc expects it: cssmmmx
// mm = major version
// mm = minor version
// x = drda maintenanceversion
prdid   drdaconstants derby_drda_server_id
if  majorstr length      1
prdid
prdid    majorstr
if  minorstr length      1
prdid
prdid    minorstr
prdid    drdamaintstr
att_srvrlslv   prdid       mypvh getversionbuildstring true
// precompute this to save some cycles
prdidbytes_   prdid getbytes default_encoding
if  sanitymanager debug
if  majorstr length   > 2
minorstr length   > 2
drdamaintstr length   > 1
sanitymanager throwassert
buildnumber   mypvh getbuildnumber
private printwriter makeprintwriter  outputstream out
if  out    null
return new printwriter out  true    flush the buffer at the end of each line
else
return null
protected static driver getdriver
return cloudscapedriver
/********************************************************************************
* implementation of networkservercontrol api
* the server commands throw exceptions for errors, so that users can handle
* them themselves in addition to having the errors written to the console
* and possibly derby.log.  to turn off logging the errors to the console,
* set the output writer to null.
********************************************************************************/
/**
* set the output stream for console messages
* if this is set to null, no messages will be written to the console
*
* @param outwriter	output stream for console messages
*/
public void setlogwriter printwriter outwriter
// wrap the user-set outwriter with, autoflush to true.
// this will ensure that messages to console will be
// written out to the outwriter on a println.
// derby-1466
if   outwriter    null
logwriter   new printwriter outwriter true
else
logwriter   outwriter
/**
* write an error message to console output stream
* and throw an exception for this error
*
* @param msg	error message
* @exception exception
*/
public void consoleerror string msg
throws exception
consolemessage msg  true
throw new exception msg
/**
* write an exception to console output stream,
* but only if debugoutput is true.
*
* @param e	exception
*/
public void consoleexceptionprint exception e
if  debugoutput    true
consoleexceptionprinttrace e
return
/**
* write an exception (with trace) to console
* output stream.
*
* @param e	exception
*/
public void consoleexceptionprinttrace throwable e
consolemessage e getmessage    true
printwriter lw   logwriter
if  lw    null
synchronized  lw
e printstacktrace lw
else
e printstacktrace
lw   cloudscapelogwriter
if  lw    null
synchronized lw
e printstacktrace lw
/**
* write a message to console output stream
*
* @param msg	message
* @param printtimestamp whether to prepend a timestamp to the message or not
*/
public void consolemessage string msg  boolean printtimestamp
// print to console if we have one
printwriter lw   logwriter
if  lw    null
synchronized lw
if  printtimestamp
lw println getformattedtimestamp         msg
else
lw println msg
// always print to derby.log
lw   cloudscapelogwriter
if  lw    null
synchronized lw
if  printtimestamp
monitor logmessage getformattedtimestamp         msg
else
monitor logmessage msg
/**
* start a network server.  launches a separate thread with
* drdaserverstarter.  want to use monitor.startmodule,
* so it can all get shutdown when derby shuts down, but
* can't get it working right now.
*
* @param consolewriter   printwriter to which server console will be
*                        output. null will disable console output.
*
*
* @exception exception	throws an exception if an error occurs
*/
public void start printwriter consolewriter
throws exception
drdaserverstarter starter   new drdaserverstarter
starter setstartinfo hostaddress portnumber consolewriter
this setlogwriter consolewriter
startnetworkserver
starter boot false null
/**
* create the right kind of server socket
*/
private serversocket createserversocket
throws ioexception
if  hostaddress    null
hostaddress   inetaddress getbyname hostarg
// make a list of valid
// inetaddresses for networkservercontrol
// admin commands.
buildlocaladdresslist hostaddress
// create the right kind of socket
switch  getsslmode
case ssl_off
default
serversocketfactory sf
serversocketfactory getdefault
return sf createserversocket portnumber
0
hostaddress
case ssl_basic
sslserversocketfactory ssf
sslserversocketfactory sslserversocketfactory getdefault
return  sslserversocket ssf createserversocket portnumber
0
hostaddress
case ssl_peer_authentication
sslserversocketfactory ssf2
sslserversocketfactory sslserversocketfactory getdefault
sslserversocket sss2
sslserversocket ssf2 createserversocket portnumber
0
hostaddress
sss2 setneedclientauth true
return sss2
/**
* start a network server
*
* @param consolewriter   printwriter to which server console will be
*                        output. null will disable console output.
*
*
* @exception exception	throws an exception if an error occurs
*/
public void blockingstart printwriter consolewriter
throws exception
startnetworkserver
setlogwriter consolewriter
cloudscapelogwriter   monitor getstream   getprintwriter
if  sanitymanager debug    debugoutput
memcheck showmem
mc   new memcheck 200000
mc start
// open a server socket listener
try
serversocket
serversocket
accesscontroller doprivileged new privilegedexceptionaction
public object run   throws ioexception
return createserversocket
catch  privilegedactionexception e
exception e1   e getexception
// test for unknownhostexception first since it's a
// subbclass of ioexception (and consolepropertymessage
// throws an exception when the severity is s (or u).
if  e1 instanceof unknownhostexception
consolepropertymessage    hostarg
else if  e1 instanceof ioexception
consolepropertymessage
new string
integer tostring portnumber
hostarg
// since socketexception
// is used for a phletora
// of situations, we need
// to communicate the
// underlying exception
// string to the user.
e1 tostring
else
throw e1
catch  exception e
// if we find other (unexpected) errors, we ultimately exit--so make
// sure we print the error message before doing so (beetle 5033).
throwunexpectedexception e
switch  getsslmode
default
case ssl_off
consolepropertymessage    new string
integer tostring portnumber   att_srvclsnm  versionstring
break
case ssl_basic
consolepropertymessage    new string
integer tostring portnumber   att_srvclsnm  versionstring
break
case ssl_peer_authentication
consolepropertymessage    new string
integer tostring portnumber   att_srvclsnm  versionstring
break
// we accept clients on a separate thread so we don't run into a problem
// blocking on the accept when trying to process a shutdown
final clientthread clientthread
clientthread  accesscontroller doprivileged
new privilegedexceptionaction
public object run   throws exception
return new clientthread thiscontrol
serversocket
clientthread start
// now that we are up and running, register any mbeans
managementservice mgmtservice     managementservice
monitor getsystemmodule module jmx
final object versionmbean   mgmtservice registermbean
new version
getnetproductversionholder
systempermission server
versionmbean class
final object networkservermbean   mgmtservice registermbean
new networkservermbeanimpl this
networkservermbean class
// wait until we are told to shutdown or someone sends an interruptedexception
synchronized shutdownsync
try
shutdownsync wait
catch  interruptedexception e
shutdown   true
accesscontroller doprivileged
new privilegedaction
public object run
// need to interrupt the memcheck thread if it is sleeping.
if  mc    null
mc interrupt
//interrupt client thread
clientthread interrupt
return null
// close out the sessions
synchronized sessiontable
for  enumeration e   sessiontable elements    e hasmoreelements
session session    session  e nextelement
session close
synchronized  threadlist
//interupt any connection threads still active
for  int i   0  i < threadlist size    i
final drdaconnthread threadi    drdaconnthread threadlist get i
threadi close
accesscontroller doprivileged
new privilegedaction
public object run
threadi interrupt
return null
threadlist clear
// close the listener socket
try
serversocket close
catch ioexception e
consolepropertymessage    true
// wake up those waiting on sessions, so
// they can close down
synchronized  runqueue
runqueue notifyall
// and now unregister any mbeans.
mgmtservice unregistermbean versionmbean
mgmtservice unregistermbean networkservermbean
if  shutdowndatabasesonshutdown
// shutdown derby
try
// tell driver to shutdown the engine
if  cloudscapedriver    null
// derby-2109: pass user credentials for driver shutdown
final properties p   new properties
if  userarg    null
p setproperty    userarg
if  passwordarg    null
p setproperty    passwordarg
cloudscapedriver connect    p
catch  sqlexception sqle
// if we can't shutdown derby, perhaps, authentication has
// failed or system privileges weren't granted. we will just
// print a message to the console and proceed.
string expectedstate
standardexception getsqlstatefromidentifier
sqlstate cloudscape_system_shutdown
if   expectedstate equals sqle getsqlstate
consolepropertymessage
sqle getmessage
consolepropertymessage    new string
att_srvclsnm  versionstring
/**
* load derby and save driver for future use.
* we can't call driver manager when the client connects,
* because they might be holding the drivermanager lock.
*
*
*/
protected void startnetworkserver   throws exception
// we start the derby server here.
boolean restartcheck   this restartflag
synchronized  serverstartsync
if  restartcheck    this restartflag
// then we can go ahead and restart the server (odds
// that some else has just done so are very slim (but not
// impossible--however, even if it does happen, things
// should still work correctly, just not as efficiently...))
try
if  cleanuponstart
// we're restarting the server (probably after a shutdown
// exception), so we need to clean up first.
// close and remove sessions on runqueue.
synchronized  runqueue
for  int i   0  i < runqueue size    i
session s    session  runqueue get i
s close
removefromsessiontable s getconnnum
runqueue clear
// derby-1326: there could be active threads that
// contain old/invalid sessions. these sessions won't
// be cleaned up until there is some activity on
// them. we could optimize this by going through
// sessiontable and closing the sessions' socket
// streams.
// unload driver, then restart the server.
cloudscapedriver   null 	   so it gets collected
system gc
// start the server.
class forname cloudscape_driver  newinstance
cloudscapedriver   drivermanager getdriver attribute protocol
catch  exception e
this consoleexceptionprinttrace e
consolepropertymessage    e getmessage
cleanuponstart   true
this restartflag    this restartflag
// else, multiple threads hit this synchronize block at the same
// time, but one of them already executed it--so all others just
// return and do nothing (no need to restart the server multiple
// times in a row).
/**
* shutdown a network server
*
* @exception exception	throws an exception if an error occurs
*/
public void shutdown
throws exception
// wait up to 10 seconds for things to really shut down
// need a quiet ping so temporarily disable the logwriter
printwriter savwriter
int ntry
try
setupsocket
writecommandheader command_shutdown
// derby-2109: transmit user credentials for system privileges check
writeldstring userarg
writeldstring passwordarg
send
readresult
savwriter   logwriter
// derby-1571: if logwriter is null, stack traces are printed to
// system.err. set logwriter to a silent stream to suppress stack
// traces too.
filteroutputstream silentstream   new filteroutputstream null
public void write int b
public void flush
public void close
setlogwriter new printwriter silentstream
for  ntry   0  ntry < shutdown_check_attempts  ntry
thread sleep shutdown_check_interval
try
pingwithnoopen
catch  exception e
// as soon as we can't ping return
break
finally
closesocket
if  ntry    shutdown_check_attempts
consolepropertymessage    new string
integer tostring portnumber
hostarg
logwriter  savwriter
return
/**
* authenticates the user and checks for shutdown system privileges.
* no network communication needed.
*
* to perform this check the following policy grant is required
* <ul>
* <li> to run the encapsulated test:
*      permission javax.security.auth.authpermission "doasprivileged";
* </ul>
* or a sqlexception will be raised detailing the cause.
* <p>
* in addition, for the test to succeed
* <ul>
* <li> the given user needs to be covered by a grant:
*      principal org.apache.derby.authentication.systemprincipal "..." {}
* <li> that lists a shutdown permission:
*      permission org.apache.derby.security.systempermission "shutdown";
* </ul>
* or it will fail with a sqlexception detailing the cause.
*
* @param user the user to be checked for shutdown privileges
* @throws sqlexception if the privileges check fails
*/
/**
* @throws sqlexception if authentication or privileges check fails
*/
public void checkshutdownprivileges   throws sqlexception
// get the system's authentication service
final authenticationservice auth
authenticationservice
monitor findservice authenticationservice module
// authenticate user
if  auth    null
final properties finfo   new properties
if  userarg    null
finfo setproperty    userarg
if  passwordarg    null
finfo setproperty    passwordarg
if   auth authenticate  string null  finfo
// not a valid user
throw util generatecssqlexception
sqlstate net_connect_auth_failed
messageservice gettextmessage messageid auth_invalid
// approve action if not running under a security manager
if  system getsecuritymanager      null
return
// the check
try
final permission sp    new systempermission
systempermission server  systempermission shutdown
// for porting the network server to j2me/cdc, consider calling
// abstract method internaldriver.checkshutdownprivileges(user)
// instead of static securityutil.checkuserhaspermission().
// securityutil.checkuserhaspermission(userarg, sp);
catch  accesscontrolexception ace
throw util generatecssqlexception
sqlstate auth_shutdown_missing_permission
userarg   object ace      overloaded method
/*
shutdown the server directly (if you have the original object)
no network communication needed.
*/
public void directshutdown   throws sqlexception
// derby-2109: the public shutdown method now checks privileges
checkshutdownprivileges
directshutdowninternal
/*
shutdown the server directly (if you have the original object)
no network communication needed.
*/
void directshutdowninternal
// derby-2109: the direct, unchecked shutdown is made private
shutdown   true
synchronized shutdownsync
// wake up the server thread
shutdownsync notifyall
/**
*/
public boolean isserverstarted   throws exception
try
ping
catch  exception e
return false
return true
/**
* ping opening an new socket and close it.
* @throws exception
*/
public void ping   throws exception
try
setupsocket
pingwithnoopen
finally
closesocket
/**
* ping the server using the client socket that is already open.
*/
private void pingwithnoopen   throws exception
// database no longer used, but don't change the protocol
// in case we add
// authorization  later.
string database   null     no longer used but don't change the protocol
string user   null
string password   null
writecommandheader command_testconnection
writeldstring database
writeldstring user
writeldstring password
send
readresult
/**
* turn tracing on or off for all sessions
*
* @param on			true to turn tracing on, false to turn tracing off
*
* @exception exception	throws an exception if an error occurs
*/
public void trace boolean on
throws exception
trace 0  on
/**
* turn tracing on or off for one session or all sessions
*
* @param connnum	the connnum of the session, 0 if all sessions
* @param on			true to turn tracing on, false to turn tracing off
*
* @exception exception	throws an exception if an error occurs
*/
public void trace int connnum  boolean on
throws exception
try
setupsocket
writecommandheader command_trace
commandos writeint connnum
writebyte on ? 1   0
send
readresult
consoletracemessage connnum  on
finally
closesocket
/**
* print trace change message to console
*
* @param on			true to print tracing on, false to print tracing off
*
* @exception exception	throws an exception if an error occurs
*/
private void consoletracemessage int connnum  boolean on
throws exception
if  connnum    0
consolepropertymessage    on ?
else
string args   new string
args   on ?
args   new integer connnum  tostring
consolepropertymessage    args
/**
* turn logging connections on or off. when logging is turned on a message is
* written to derby.log each time a connection is made.
*
* @param on			true to turn on, false to turn  off
*
* @exception exception	throws an exception if an error occurs
*/
public void logconnections boolean on
throws exception
try
setupsocket
writecommandheader command_logconnections
writebyte on ? 1   0
send
readresult
finally
closesocket
/**
*@see networkservercontrol#settracedirectory
*/
public void sendsettracedirectory string tracedirectory
throws exception
try
setupsocket
writecommandheader command_tracedirectory
writeldstring tracedirectory
send
readresult
finally
closesocket
/**
*@see networkservercontrol#getsysinfo
*/
public string sysinfo
throws exception
try
setupsocket
writecommandheader command_sysinfo
send
return readstringreply
finally
closesocket
/**
*@see networkservercontrol#getruntimeinfo
*/
public string runtimeinfo
throws exception
try
setupsocket
writecommandheader command_runtime_info
send
return readstringreply
finally
closesocket
/**
* display usage information
*
*/
public void usage
try
for  int i   1  i <  no_usage_msgs  i
consolepropertymessage   i    false
catch  exception e    	   ignore exceptions   there shouldn't be any
/**
* connect to  network server and set connection maxthread parameter
*
* @param max		maximum number of connections, if 0, connections
*						created when no free connection available
*						if -1, use default
*
* @exception exception	throws an exception if an error occurs
*/
public void netsetmaxthreads int max  throws exception
try
setupsocket
writecommandheader command_maxthreads
commandos writeint max
send
readresult
int newval   readint
consolepropertymessage    new integer
newval  tostring
finally
closesocket
/**
* set network server connection timeslice parameter
*
* @param timeslice	amount of time given to each session before yielding to
*						another session, if 0, never yield. if -1, use default.
*
* @exception exception	throws an exception if an error occurs
*/
public void netsettimeslice int timeslice
throws exception
try
setupsocket
writecommandheader command_timeslice
commandos writeint timeslice
send
readresult
int newval   readint
consolepropertymessage
new integer newval  tostring
finally
closesocket
/**
* get current properties
*
* @return properties object containing properties
* @exception exception	throws an exception if an error occurs
*/
public properties getcurrentproperties
throws exception
try
setupsocket
writecommandheader command_properties
send
byte val   readbytesreply
properties p   new properties
try
bytearrayinputstream bs   new bytearrayinputstream val
p load bs
catch  ioexception io
consolepropertymessage    io getmessage
return p
finally
closesocket
/**
* set a thread name to be something that is both meaningful and unique (primarily
* for debugging purposes).
*
* the received thread's name is set to a new string of the form
*  [newname + "_n"], where 'n' is a unique thread id originally generated
*  by the jvm thread constructor.  if the default name of the thread has
*  been changed before getting here, then nothing is done.
*
* @param thrd an instance of a thread object that still has its default
*  thread name (as generated by the jvm thread constructor).  this should
*  always be of the form "thread-n", where n is a unique thread id
*  generated by the jvm.  ex. "thread-0", "thread-1", etc.
*
**/
public static void setuniquethreadname thread thrd  string newname
// first, pull off the unique thread id already found in thrd's default name;
// we do so by searching for the '-' character, and then counting everything
// after it as a n.
if  thrd getname   indexof        1
// default name has been changed; don't do anything.
return
else
string oldname   thrd getname
thrd setname newname
oldname substring oldname indexof    1  oldname length
end else
return
/*******************************************************************************/
/*        protected methods                                                    */
/*******************************************************************************/
/**
* remove session from session table
*
* @param sessionid 	id of session to be removed
*/
protected void removefromsessiontable int sessionid
sessiontable remove new integer sessionid
/**
* 	processcommands reads and processes networkservercontrolimpl commands sent
* 	to the network server over the socket.  the protocol used is
* 		4 bytes 	- string cmd:
* 		2 bytes		- protocol version
*		1 byte		- length of locale (0 for default)
*			n bytes - locale
*		1 byte		- length of codeset (0 for default)
*			n bytes - codeset
* 		1 byte		- command
* 		n bytes		- parameters for the command
* 	the server returns
*		4 bytes		- string rpy:
*	for most commands
*		1 byte		- command result, 0 - ok, 1 - warning, 2 - error
*	 if warning or error
*		1 bytes		- length of message key
*		n bytes		- message key
*		1 byte		- number of parameters to message
*		{2 bytes		- length of parameter
*		n bytes		- parameter} for each parameter
*  for sysinfo
*		1 byte		- command result, 0 - ok, 1 - warning, 2 - error
*   if ok
*		2 bytes		- length of sysinfo
*		n bytes		- sysinfo
*
*
* 	note, the 3rd byte of the command must not be 'd0' to distinquish it
*	from dss structures.
* 	the protocol for the parameters for each command follows:
*
* 	command: trace <connection id> {on | off}
* 	protocol:
* 		4 bytes		- connection id - connection id of 0 means all sessions
* 		1 byte		- 0 off, 1 on
*
* 	command: logconnections {on | off}
* 	protocol:
* 		1 byte		- 0 off, 1 on
*
*	command: shutdown
*		// derby-2109: transmit user credentials for system privileges check
*		2 bytes		- length of user name
*		n bytes		- user name
*		2 bytes		- length of password
*		n bytes		- password
*
* 	command: sysinfo
* 	no parameters
*
* 	command: dbstart
* 	protocol:
* 		2 bytes		- length of database name
* 		n bytes		- database name
* 		2 bytes		- length of boot password
* 		n bytes		- boot password
* 		2 bytes		- length of encryption algorithm
* 		n bytes		- encryption algorithm
* 		2 bytes		- length of encryption provider
* 		n bytes		- encryption provider
* 		2 bytes		- length of user name
* 		n bytes		- user name
* 		2 bytes		- length of password
* 		n bytes		- password
*
* 	command: dbshutdown
* 	protocol:
* 		2 bytes		- length of database name
* 		n bytes		- database name
* 		2 bytes		- length of user name
* 		n bytes		- user name
* 		2 bytes		- length of password
* 		n bytes		- password
*
* 	command: connpool
* 	protocol:
* 		2 bytes		- length of database name, if 0, default for all databases
*						is set
* 		n bytes		- database name
*		2 bytes		- minimum number of connections, if 0, connection pool not used
*						if value is -1 use default
*		2 bytes		- maximum number of connections, if 0, connections are created
*						as needed, if value is -1 use default
*
* 	command: maxthreads
* 	protocol:
*		2 bytes		- maximum number of threads
*
* 	command: timeslice
* 	protocol:
*		4 bytes		- timeslice value
*
* 	command: tracedirectory
* 	protocol:
* 		2 bytes		- length of directory name
* 		n bytes		- directory name
*
*	command: test connection
* 	protocol:
* 		2 bytes		- length of database name if 0, just the connection
*						to the network server is tested and user name and
*						password aren't sent
* 		n bytes		- database name
* 		2 bytes		- length of user name (optional)
* 		n bytes		- user name
* 		2 bytes		- length of password  (optional)
* 		n bytes		- password
*
*	the calling routine is synchronized so that multiple threads don't clobber each
* 	other. this means that configuration commands will be serialized.
* 	this shouldn't be a problem since they should be fairly rare.
*
* @param reader	input reader for command
* @param writer output writer for command
* @param session	session information
*
* @exception throwable	throws an exception if an error occurs
*/
protected synchronized void processcommands ddmreader reader  ddmwriter writer
session session  throws throwable
try
string protocolstr   reader readcmdstring 4
string locale   default_locale
string codeset   null
// get the version
int version   reader readnetworkshort
if  version <  0    version > protocol_version
throw new throwable langutil gettextmessage     new integer version  tostring
int localelen   reader readbyte
if  localelen > 0
currentsession   session
locale   reader readcmdstring localelen
session langutil   new localizedresource codeset locale drda_prop_messages
string notlocalmessage   null
// for now codesetlen is always 0
int codesetlen   reader readbyte
int command   reader readbyte
if  command     command_testconnection
try
checkaddressislocal session clientsocket getinetaddress
catch  exception e
notlocalmessage   e getmessage
if  notlocalmessage    null
sendmessage writer  error notlocalmessage
session langutil   null
currentsession   null
return
switch command
case command_shutdown
// derby-2109: receive user credentials for shutdown
// system privileges check
userarg   reader readcmdstring
passwordarg   reader readcmdstring
try
checkshutdownprivileges
sendok writer
directshutdowninternal
catch  sqlexception sqle
sendsqlmessage writer  sqle  sqlerror
// also print a message to the console
consolepropertymessage
sqle getmessage
break
case command_trace
sessionarg   reader readnetworkint
boolean on    reader readbyte      1
if  settrace on
sendok writer
else
if  sessionarg    0
sendmessage writer  error
localizemessage
session langutil    null  ? langutil   session langutil
new string   new integer sessionarg  tostring
else
sendmessage writer  error
localizemessage   null
break
case command_tracedirectory
settracedirectory reader readcmdstring
sendok writer
consolepropertymessage    tracedirectory
break
case command_testconnection
databasearg   reader readcmdstring
userarg   reader readcmdstring
passwordarg   reader readcmdstring
if  databasearg    null
connecttodatabase writer  databasearg  userarg  passwordarg
else
sendok writer
break
case command_logconnections
boolean log    reader readbyte      1
setlogconnections log
sendok writer
consolepropertymessage
log ?
break
case command_sysinfo
sendsysinfo writer
break
case command_properties
sendpropinfo writer
break
case command_runtime_info
sendruntimeinfo writer
break
case command_maxthreads
int max   reader readnetworkint
try
setmaxthreads max
catch  exception e
sendmessage writer  error  e getmessage
return
int newval   getmaxthreads
sendokint writer  newval
consolepropertymessage
new integer newval  tostring
break
case command_timeslice
int timeslice   reader readnetworkint
try
settimeslice timeslice
catch  exception e
sendmessage writer  error  e getmessage
return
newval   gettimeslice
sendokint writer  newval
consolepropertymessage
new integer newval  tostring
break
catch  drdaprotocolexception e
//we need to handle this since we aren't in drda land here
consoleexceptionprinttrace e
catch  exception e
consoleexceptionprinttrace e
finally
session langutil   null
currentsession   null
/**
* get the next session for the thread to work on
* called from drdaconnthread after session completes or timeslice
* exceeded.
*
* if there is a waiting session, pick it up and put currentsession
* at the back of the queue if there is one.
* @param currentsession	session thread is currently working on
*
* @return  next session to work on, could be same as current session
*/
protected session getnextsession session currentsession
session retval   null
if  shutdown    true
return retval
synchronized  runqueue
try
// nobody waiting - go on with current session
if  runqueue size      0
// no current session - wait for some work
if  currentsession    null
while  runqueue size      0
// this thread has nothing to do now so
// we will add it to freethreads
freethreads
runqueue wait
if  shutdown    true
return null
freethreads
else
return currentsession
retval    session  runqueue elementat 0
runqueue removeelementat 0
if  currentsession    null
runqueueadd currentsession
catch  interruptedexception e
// if for whatever reason (ex. database shutdown) a waiting thread is
// interrupted while in this method, that thread is going to be
// closed down, so we need to decrement the number of threads
// that will be available for use.
freethreads
return retval
/**
* get the stored application requester or store if we haven't seen it yet
*
* @param apprequester application requester to look for
*
* @return  stored application requester
*/
protected apprequester getapprequester apprequester apprequester
apprequester s   null
if  sanitymanager debug
if  apprequester    null
sanitymanager throwassert
if   apprequestertable isempty
s    apprequester apprequestertable get apprequester prdid
if  s    null
apprequestertable put apprequester prdid  apprequester
return apprequester
else
//compare just in case there are some differences
//if they are different use the one we just read in
if  s equals apprequester
return s
else
return apprequester
/**
* get the server manager level for a given manager
*
* @param manager codepoint for manager
* @return manager level
*/
protected int getmanagerlevel int manager
int mindex   codepoint getmanagerindex manager
if  sanitymanager debug
if  mindex    codepoint unknown_manager
sanitymanager throwassert
return mgr_levels
/**
* check whether a ccsid code page is supported
*
* @param ccsid	ccsid to check
* @return true if supported; false otherwise
*/
protected boolean supportsccsid int ccsid
try
characterencodings getjavaencoding ccsid
catch  exception e
return false
return true
/**
* put property message on console
*
* @param msgprop		message property key
* @param printtimestamp whether to prepend a timestamp to the message
*
* @throws exception if an error occurs
*/
protected void consolepropertymessage string msgprop  boolean printtimestamp
throws exception
consolepropertymessagework msgprop  null  printtimestamp
/**
* put property message on console
*
* @param msgprop		message property key
* @param arg			argument for message
*
* @throws exception if an error occurs
*/
protected void consolepropertymessage string msgprop  string arg
throws exception
consolepropertymessagework msgprop  new string   arg   true
/**
* put property message on console
*
* @param msgprop		message property key
* @param args			argument array for message
*
* @throws exception if an error occurs
*/
protected void consolepropertymessage string msgprop  string  args
throws exception
consolepropertymessagework msgprop  args  true
/**
* is this the command protocol
*
* @param  val
*/
protected static boolean iscmd string val
if  val equals command_header
return true
else
return false
/*******************************************************************************/
/*        private methods                                                      */
/*******************************************************************************/
/**
* write command reply
*
* @param writer	writer to use
*
* @throws exception if a problem occurs sending ok
*/
private void writecommandreplyheader ddmwriter writer  throws exception
writer setcmdprotocol
writer writestring reply_header
/**
* send ok from server to client after processing a command
*
* @param writer	writer to use for sending ok
*
* @throws exception if a problem occurs sending ok
*/
private void sendok ddmwriter writer  throws exception
writecommandreplyheader writer
writer writebyte ok
writer flush
/**
* send ok and int value
*
* @param writer writer to use for sending
* @param val 	int val to send
*
* @throws exception if a problem occurs
*/
private void sendokint ddmwriter writer  int val  throws exception
writecommandreplyheader writer
writer writebyte ok
writer writenetworkint val
writer flush
/**
* send error or warning from server to client after processing a command
*
* @param writer	writer to use for sending message
* @param messagetype	1 for warning, 2 for error 3 for sqlerror
* @param message 	message
*
* @throws exception if a problem occurs sending message
*/
private void sendmessage ddmwriter writer  int messagetype  string message
throws exception
writecommandreplyheader writer
writer writebyte messagetype
writer writeldstring message
writer flush
/**
* send sql exception from server to client after processing a command
*
* @param writer	writer to use for sending message
* @param se		derby exception
* @param type		type of exception, sqlerror or sqlwarning
*
* @throws exception if a problem occurs sending message
*/
private void sendsqlmessage ddmwriter writer  sqlexception se  int type
throws exception
stringbuffer locmsg   new stringbuffer
//localize message if necessary
while  se    null
if  currentsession    null    currentsession langutil    null
se instanceof embedsqlexception
locmsg append se getsqlstate
messageservice getlocalizedmessage
currentsession langutil getlocale      embedsqlexception se  getmessageid
embedsqlexception se  getarguments
else
locmsg append se getsqlstate     se getmessage
se   se getnextexception
if  se    null
locmsg append
sendmessage writer  type  locmsg tostring
/**
* send sysinfo information from server to client
*
* @param writer 	writer to use for sending sysinfo
*
* @throws exception if a problem occurs sending value
*/
private void sendsysinfo ddmwriter writer  throws exception
stringbuffer sysinfo   new stringbuffer
sysinfo append getnetsysinfo
sysinfo append getclssysinfo
try
writecommandreplyheader writer
writer writebyte 0  	  o k
writer writeldstring sysinfo tostring
catch  drdaprotocolexception e
consolepropertymessage    e getmessage
writer flush
/**
* send runtimeinfo information from server to client
*
* @param writer 	writer to use for sending sysinfo
*
* @throws exception if a problem occurs sending value
*/
private void sendruntimeinfo ddmwriter writer  throws exception
try
writecommandreplyheader writer
writer writebyte 0  	  o k
writer writeldstring getruntimeinfo
catch  drdaprotocolexception e
consolepropertymessage    e getmessage
writer flush
/**
* send property information from server to client
*
* @param writer 	writer to use for sending sysinfo
*
* @throws exception if a problem occurs sending value
*/
private void sendpropinfo ddmwriter writer  throws exception
try
bytearrayoutputstream out   new bytearrayoutputstream
properties p   getpropertyvalues
p store out
try
writecommandreplyheader writer
writer writebyte 0  		  o k
writer writeldbytes out tobytearray
catch  drdaprotocolexception e
consolepropertymessage    e getmessage
writer flush
catch  exception e
consoleexceptionprinttrace e
/**
* get net server information
*
* @return system information for the network server
*/
private string getnetsysinfo
stringbuffer sysinfo   new stringbuffer
localizedresource locallangutil   langutil
if  currentsession    null    currentsession langutil    null
locallangutil   currentsession langutil
sysinfo append locallangutil gettextmessage
sysinfo append locallangutil gettextmessage         att_srvrlslv
sysinfo append
sysinfo append locallangutil gettextmessage         buildnumber
sysinfo append
sysinfo append locallangutil gettextmessage         prdid
if  sanitymanager debug
sysinfo append
sysinfo append
// add property information
properties p   getpropertyvalues
bytearrayoutputstream bos   new bytearrayoutputstream
printstream ps    new printstream bos
p list ps
sysinfo append bos tostring
return sysinfo tostring
/**
* @see networkservercontrol#getruntimeinfo
*/
private string getruntimeinfo
return buildruntimeinfo langutil
/**
* get derby information
*
* @return system information for derby
*
* @throws ioexception if a problem occurs encoding string
*/
private string getclssysinfo   throws ioexception
bytearrayoutputstream bos   new bytearrayoutputstream
localizedresource locallangutil   langutil
if  currentsession    null    currentsession langutil    null
locallangutil   currentsession langutil
localizedoutput aw   locallangutil getnewoutput bos
org apache derby impl tools sysinfo main getmaininfo aw  false
return bos tostring
/**
* parse the command-line arguments. as a side-effect, fills in various instance
* fields. this method was carved out of executework() so that
* networkservercontrol can figure out whether to install a security manager
* before the server actually comes up. this is part of the work for derby-2196.
*
* @param args	array of arguments indicating command to be executed
*
* @return the command to be executed
*/
public int parseargs string args  throws exception
// for convenience just use networkservercontrolimpls log writer for user messages
logwriter   makeprintwriter system out
int command   findcommand args
if  command    command_unknown
consolepropertymessage    true
return command
/**
* execute the command given on the command line
*
* @param command   the command to execute. the command itself was determined by an earlier call to parseargs().
*
* @exception exception	throws an exception if an error occurs
* see class comments for more information
*/
public void executework int command  throws exception
// if we didn't have a valid command just return - error already generated
if  command    command_unknown
return
// check that we have the right number of required arguments
if  commandargs size      command_args
consolepropertymessage    commands
int min
int max
switch  command
case command_start
// the server was started from the command line, shutdown the
// databases when the server is shutdown
shutdowndatabasesonshutdown   true
blockingstart makeprintwriter system out
break
case command_shutdown
shutdown
consolepropertymessage    new string
att_srvclsnm  versionstring
break
case command_trace
boolean on   ison  string commandargs elementat 0
trace sessionarg  on
consoletracemessage sessionarg  on
break
case command_tracedirectory
string directory    string  commandargs elementat 0
sendsettracedirectory directory
consolepropertymessage    directory
break
case command_testconnection
ping
consolepropertymessage    new string
hostarg   new integer portnumber   tostring
break
case command_logconnections
boolean on   ison  string commandargs elementat 0
logconnections on
consolepropertymessage    on ?
break
case command_sysinfo
string info   sysinfo
consolemessage info  false
break
case command_maxthreads
max   0
try
max   integer parseint  string commandargs elementat 0
catch numberformatexception e
consolepropertymessage    new string
string commandargs elementat 0
if  max < min_maxthreads
consolepropertymessage    new string
new integer max  tostring
netsetmaxthreads max
break
case command_runtime_info
string reply   runtimeinfo
consolemessage reply  false
break
case command_timeslice
int timeslice   0
string timeslicearg    string commandargs elementat 0
try
timeslice   integer parseint timeslicearg
catch numberformatexception e
consolepropertymessage    new string
string commandargs elementat 0
if  timeslice < min_timeslice
consolepropertymessage    new string
new integer timeslice  tostring
netsettimeslice timeslice
break
default
//shouldn't get here
if  sanitymanager debug
sanitymanager throwassert    command
/**
* add session to the run queue
*
* @param clientsession	session needing work
*/
private void runqueueadd session clientsession
synchronized runqueue
runqueue addelement clientsession
runqueue notify
/**
* go through the arguments and find the command and save the dash arguments
*	and arguments to the command.  only one command is allowed in the argument
*	list.
*
* @param args	arguments to search
*
* @return  command
*/
private int findcommand string  args  throws exception
try
// process the dashargs and pull out the command args
int i   0
int newpos   0
while  i < args length
if  args startswith
newpos   processdasharg i  args
if  newpos    i
commandargs addelement args
else
i   newpos
else
commandargs addelement args
// look up command
if  commandargs size   > 0
for  i   0  i < commands length  i
if  stringutil sqlequalsignorecase commands
string commandargs firstelement
commandargs removeelementat 0
return i
// didn't find command
consolepropertymessage
string  commandargs firstelement
catch  exception e
if  e getmessage   equals networkservercontrolimpl unexpected_err
throw e
//ignore expected exceptions, they will have been
//handled by the consolepropertymessage routine
return command_unknown
/**
* get the dash argument. optional arguments are formated as -x value.
*
* @param pos	starting point
* @param args	arguments to search
*
* @return  command
*
* @exception exception	thrown if an error occurs
*/
private int processdasharg int pos  string args
throws exception
//check for a negative number
char c   args charat 1
if  c >       c <
return pos
int dasharg    1
for  int i   0  i < dashargs length  i
if  dashargs equals args substring 1
dasharg   i
if   dasharg    dasharg_unsecure     pos
break
if  dasharg     1
consolepropertymessage    args
switch  dasharg
case dasharg_port
if  pos < args length
try
portnumber   integer parseint args
catch numberformatexception e
consolepropertymessage
new string   args
else
consolepropertymessage
break
case dasharg_host
if  pos < args length
hostarg   args
else
consolepropertymessage
break
case dasharg_database
if  pos < args length
databasearg   args
else
consolepropertymessage
break
case dasharg_user
if  pos < args length
userarg   args
else
consolepropertymessage
break
case dasharg_password
if  pos < args length
passwordarg   args
else
consolepropertymessage
break
case dasharg_encalg
if  pos < args length
encalgarg   args
else
consolepropertymessage
break
case dasharg_encprv
if  pos < args length
encprvarg   args
else
consolepropertymessage
break
case dasharg_loadsysibm
break
case dasharg_session
if  pos < args length
try
sessionarg   integer parseint args
catch numberformatexception e
consolepropertymessage
new string   args
else
consolepropertymessage
break
case dasharg_unsecure
unsecurearg   true
break
case dasharg_ssl
if  pos < args length
setsslmode getsslmodevalue args
else
setsslmode ssl_off
break
default
//shouldn't get here
return pos 1
/**
* is string "on" or "off"
*
* @param arg	string to check
*
* @return  true if string is "on", false if string is "off"
*
* @exception exception	thrown if string is not one of "on" or "off"
*/
private boolean ison string arg
throws exception
if  stringutil sqlequalsignorecase arg
return true
else if   stringutil sqlequalsignorecase arg
consolepropertymessage    arg
return false
/**
* close the resources associated with the opened socket.
* @throws ioexception
*/
private void closesocket   throws ioexception
try
if  clientis    null
clientis close
if  clientos    null
clientos close
if  clientsocket    null
clientsocket close
finally
clientis   null
clientos   null
clientsocket   null
/**
* set up client socket to send a command to the network server
*
* @exception exception	thrown if exception encountered
*/
private void setupsocket   throws exception
try
clientsocket    socket  accesscontroller doprivileged
new privilegedexceptionaction
public object run
throws unknownhostexception
ioexception
java security nosuchalgorithmexception
java security keymanagementexception
java security nosuchproviderexception
java security keystoreexception
java security unrecoverablekeyexception
java security cert certificateexception
if  hostaddress    null
hostaddress   inetaddress getbyname hostarg
switch getsslmode
case ssl_basic
sslsocket s1    sslsocket naivetrustmanager getsocketfactory
createsocket hostaddress  portnumber
// need to handshake now to get proper error reporting.
s1 starthandshake
return s1
case ssl_peer_authentication
sslsocket s2    sslsocket sslsocketfactory getdefault
createsocket hostaddress  portnumber
// need to handshake now to get proper error reporting.
s2 starthandshake
return s2
case ssl_off
default
return socketfactory getdefault
createsocket hostaddress  portnumber
catch  privilegedactionexception pae
exception e1   pae getexception
if  e1 instanceof unknownhostexception
consolepropertymessage    hostarg
else if  e1 instanceof ioexception
consolepropertymessage
new string   hostarg
new integer portnumber   tostring
e1 getmessage
catch  exception e
// if we find other (unexpected) errors, we ultimately exit--so make
// sure we print the error message before doing so (beetle 5033).
throwunexpectedexception e
try
clientis   clientsocket getinputstream
clientos   clientsocket getoutputstream
catch  ioexception e
consolepropertymessage    true
throw e
private void checkaddressislocal inetaddress inetaddr  throws unknownhostexception exception
for int i   0  i < localaddresses size    i
if  inetaddr equals  inetaddress localaddresses get i
return
consolepropertymessage    new string  inetaddr gethostname   serversocket getinetaddress   gethostname
/**
* build local address list to allow admin commands.
*
* @param bindaddr address on which server was started
*
* note: some systems may not support localhost.
* in that case a console message will print for the localhost entries,
* but the server will continue to start.
**/
private void buildlocaladdresslist inetaddress bindaddr
localaddresses   new arraylist 3
localaddresses add bindaddr
try
localaddresses add inetaddress getlocalhost
localaddresses add inetaddress getbyname
catch unknownhostexception uhe
try
consolepropertymessage   uhe getmessage
catch  exception e
just a warning shouldn't actually throw an exception
/**
* routines for writing commands for networkservercontrolimpl being used as a client
* to a server
*/
/**
* write command header consisting of command header string and protocol
* version and command
*
* @param command	command to be written
*
* @exception exception	throws an exception if an error occurs
*/
private void writecommandheader int command  throws exception
try
writestring command_header
commandos writebyte  byte   protocol_version   0xf0  >> 8
commandos writebyte  byte  protocol_version   0x0f
if  clientlocale    null    clientlocale    default_locale
commandos writebyte clientlocale length
commandos writebytes clientlocale
else
commandos writebyte  byte  0
commandos writebyte  byte  0
commandos writebyte  byte  command
catch  ioexception e
clientsocketerror e
/**
* write length delimited string string
*
* @param msg	string to be written
*
* @exception exception	throws an exception if an error occurs
*/
private void writeldstring string msg  throws exception
try
if  msg    null
commandos writeshort 0
else
commandos writeshort msg length
writestring msg
catch  ioexception e
clientsocketerror e
/** write string
*
* @param msg string to write
*/
protected void writestring string msg  throws exception
byte msgbytes   msg getbytes default_encoding
commandos write msgbytes 0 msgbytes length
/**
* write short
*
* @param value	value to be written
*
* @exception exception	throws an exception if an error occurs
*/
private void writeshort int value  throws exception
try
commandos writebyte  byte   value   0xf0  >> 8
commandos writebyte  byte  value   0x0f
catch  ioexception e
clientsocketerror e
/**
* write byte
*
* @param value	value to be written
*
* @exception exception	throws an exception if an error occurs
*/
private void writebyte int value  throws exception
try
commandos writebyte  byte  value   0x0f
catch  ioexception e
clientsocketerror e
/**
* send client message to server
*
*
* @exception exception	throws an exception if an error occurs
*/
private void send   throws exception
try
bytearrayos writeto clientos
commandos flush
bytearrayos reset   	  discard anything currently in the byte array
catch  ioexception e
clientsocketerror e
/**
* stream error writing to client socket
*/
private void clientsocketerror ioexception e  throws ioexception
try
consolepropertymessage    e getmessage
catch  exception ce        catch the exception consolepropertymessage will
// throw since we also want to print a stack trace
consoleexceptionprinttrace e
throw e
/**
* read result from sending client message to server
*
* @exception exception	throws an exception if an error occurs
*/
private void readresult   throws exception
fillreplybuffer
readcommandreplyheader
if  replybufferpos >  replybuffercount
consolepropertymessage    true
int messagetype   replybuffer   0xff
if  messagetype    ok 		   o k
return
// get error and display and throw exception
string message    readldstring
if  messagetype    sqlerror
wrapsqlerror message
else if  messagetype    sqlwarning
wrapsqlwarning message
else
consolepropertymessage message  true
/**
* ensure the reply buffer is at large enought to hold all the data;
* don't just rely on os level defaults
*
*
* @param minimumbytesneeded	size of buffer required
* @exception exception throws an exception if a problem reading the reply
*/
private void ensuredatainbuffer int minimumbytesneeded  throws exception
// make sure the buffer is large enough
while   replybuffercount   replybufferpos  < minimumbytesneeded
try
int bytesread   clientis read replybuffer  replybuffercount  replybuffer length   replybuffercount
replybuffercount    bytesread
catch  ioexception e
clientsocketerror e
/**
* fill the reply buffer with the reply allocates a reply buffer if one doesn't
* exist
*
*
* @exception exception throws an exception if a problem reading the reply
*/
private void fillreplybuffer   throws exception
if  replybuffer    null
replybuffer   new byte
try
replybuffercount   clientis read replybuffer
catch  ioexception e
clientsocketerror e
if  replybuffercount     1
consolepropertymessage    true
replybufferpos   0
/**
* read the command reply header from the server
*
* @exception exception throws an exception if an error occurs
*/
private void readcommandreplyheader   throws exception
ensuredatainbuffer reply_header_length
if  replybuffercount < reply_header_length
consolepropertymessage    integer tostring replybuffercount
string header    new string replybuffer  0  reply_header_length  default_encoding
if   header equals reply_header
consolepropertymessage    header
replybufferpos    reply_header_length
/**
* read short from buffer
* @exception exception	throws an exception if an error occurs
*/
private int readshort   throws exception
ensuredatainbuffer 2
if  replybufferpos   2 > replybuffercount
consolepropertymessage    true
return   replybuffer   0xff  << 8
replybuffer   0xff
/**
* read int from buffer
* @exception exception	throws an exception if an error occurs
*/
private int readint   throws exception
ensuredatainbuffer 4
if  replybufferpos   4 > replybuffercount
consolepropertymessage    true
return   replybuffer   0xff  << 24
replybuffer   0xff  << 16
replybuffer   0xff  << 8
replybuffer   0xff
/**
* read string reply
*
* @param msgkey	error message key
* @return string value or null
* @exception exception throws an error if problems reading reply
*/
private string readstringreply string msgkey  throws exception
fillreplybuffer
readcommandreplyheader
if  replybuffer    0 		   o k
return readldstring
else
consolepropertymessage msgkey  true
return null
/**
* read length delimited string from a buffer
*
* @return string value from buffer
* @exception exception throws an error if problems reading reply
*/
private string readldstring   throws exception
int strlen   readshort
ensuredatainbuffer strlen
if  replybufferpos   strlen > replybuffercount
consolepropertymessage    true
string retval  new string replybuffer  replybufferpos  strlen  default_encoding
replybufferpos    strlen
return retval
/**
* read bytes reply
*
* @param msgkey	error message key
* @return string value or null
* @exception exception throws an error if problems reading reply
*/
private byte  readbytesreply string msgkey  throws exception
fillreplybuffer
readcommandreplyheader
if  replybuffer    0 		   o k
return readldbytes
else
consolepropertymessage msgkey  true
return null
/**
* read length delimited bytes from a buffer
*
* @return byte array from buffer
* @exception exception throws an error if problems reading reply
*/
private byte readldbytes   throws exception
int len   readshort
ensuredatainbuffer len
if  replybufferpos   len > replybuffercount
consolepropertymessage    true
byte  retval    new byte
for  int i   0  i < len  i
retval   replybuffer
return retval
/**
* initialize fields from system properties
*
*/
private void  getpropertyinfo   throws exception
//set values according to properties
string directory   propertyutil getsystemproperty property system_home_property
string propval   propertyutil getsystemproperty
property drda_prop_logconnections
if  propval    null    stringutil sqlequalsignorecase propval
setlogconnections true
propval   propertyutil getsystemproperty property drda_prop_traceall
if  propval    null    stringutil sqlequalsignorecase propval
settraceall true
//if the derby.system.home property has been set, it is the default.
//otherwise, the default is the current directory.
//if derby.system.home is not set, directory will be null and trace files will get
//created in current directory.
propval   propertyutil getsystemproperty property drda_prop_tracedirectory directory
if propval    null
if propval equals
propval   directory
settracedirectory propval
//derby-375 if a system property is specified without any value, getproperty returns
//an empty string. use default values in such cases.
propval   propertyutil getsystemproperty
property drda_prop_minthreads
if  propval    null
if propval equals
propval
setminthreads getintpropval property drda_prop_minthreads  propval
propval   propertyutil getsystemproperty
property drda_prop_maxthreads
if  propval    null
if propval equals
propval
setmaxthreads getintpropval property drda_prop_maxthreads  propval
propval   propertyutil getsystemproperty
property drda_prop_timeslice
if  propval    null
if propval equals
propval
settimeslice getintpropval property drda_prop_timeslice  propval
propval   propertyutil getsystemproperty
property drda_prop_portnumber
if  propval    null
if propval equals
propval   string valueof networkservercontrol default_portnumber
portnumber   getintpropval property drda_prop_portnumber  propval
propval   propertyutil getsystemproperty
property drda_prop_ssl_mode
setsslmode getsslmodevalue propval
propval   propertyutil getsystemproperty
property drda_prop_keepalive
if  propval    null
stringutil sqlequalsignorecase propval
keepalive   false
propval   propertyutil getsystemproperty
property drda_prop_hostname
if  propval    null
if propval equals
hostarg   default_host
else
hostarg   propval
propval   propertyutil getsystemproperty
networkservercontrolimpl drda_prop_debug
if  propval    null	    stringutil sqlequalsignorecase propval
debugoutput   true
propval   propertyutil getsystemproperty
property drda_prop_securitymechanism
if  propval    null
setsecuritymechanism propval
/**
* retrieve the secmec integer value from the
* user friendly security mechanism name
* @param s  security mechanism name
* @return integer value , return the secmec value for
* the security mechanism as defined by drda spec
* or invalid_or_notset_securitymechanism if 's'
* passed is invalid  or not supported security
* mechanism
*/
private int getsecmecvalue string s
int secmec   invalid_or_notset_securitymechanism
if  stringutil sqlequalsignorecase s
secmec   codepoint secmec_usridonl
else if  stringutil sqlequalsignorecase s
secmec   codepoint secmec_usridpwd
else if  stringutil sqlequalsignorecase s
secmec   codepoint secmec_eusridpwd
else if  stringutil sqlequalsignorecase s
secmec   codepoint secmec_usrssbpwd
return secmec
/**
* retrieve the string name for the integer
* secmec value
* @param secmecval   secmec value
* @return string - return the string name corresponding
* to the secmec value if recognized else returns null
*/
private string getstringvalueforsecmec int secmecval
switch secmecval
case codepoint secmec_usridonl
return
case codepoint secmec_usridpwd
return
case codepoint secmec_eusridpwd
return
case codepoint secmec_usrssbpwd
return
return null
/**
* this method returns whether eusridpwd security mechanism
* is supported or not. see class static block for more
* info.
* @return true if eusridpwd is supported, false otherwise
*/
boolean supportseusridpwd
return supports_eusridpwd
/**
* get the ssl-mode from a string.
* @param s the ssl-mode string ("off"/"false", "on"/"true" or
* "authenticate"/"auth"
* @return ssl_off, ssl_basic or ssl_peer_authentication. will default to
* ssl_off if the input does not match one of the four listed
* above.
**/
private int getsslmodevalue string s
throws exception
if  s    null
if  stringutil sqlequalsignorecase s
return ssl_off
else if  stringutil sqlequalsignorecase s
return ssl_basic
else if  stringutil sqlequalsignorecase s
return ssl_peer_authentication
else
// unknown value
consolepropertymessage
new string   s  property drda_prop_ssl_mode
return ssl_off
else
// default
return ssl_off
/**
* get the string value of the ssl-mode. this is the inverse of
* getsslmodevalue.
* @param i the ssl-mode value (ssl_off, ssl_basic or
* ssl_peer_authentication)
* @return the string representation ("off","on" or
* "autneticate"). will default to ssl_off for other values than
* those listed above.
*/
private string getsslmodestring int i
switch i
case ssl_off
return
case ssl_basic
return
case ssl_peer_authentication
return
default
// assumes no ssl encryption for faulty values anyway,
// this should not happen thince the input values are
// strings...
return
/**
* get integer property values
*
* @param propname 	property name
* @param propval	string property value
* @return integer value
*
* @exception exception if not a valid integer
*/
private int getintpropval string propname  string propval
throws exception
int val   0
try
val    new integer propval   intvalue
catch  exception e
consolepropertymessage    new string
propname  propval
return val
/**
* handle console error message
* 	- display on console and if it is a user error, display usage
*  - if user error or severe error, throw exception with message key and message
*
* @param messagekey	message key
* @param args			arguments to message
* @param printtimestamp whether to prepend a timestamp to the message
*
* @throws exception if an error occurs
*/
private void consolepropertymessagework string messagekey  string  args  boolean printtimestamp
throws exception
string locmsg   null
int type   getmessagetype messagekey
if  type    errtype_unknown
locmsg   messagekey
else
locmsg   localizemessage messagekey  langutil  args
//display on the console
consolemessage locmsg  printtimestamp
//if it is a user error display usage
if  type    errtype_user
usage
//we may want to use a different locale for throwing the exception
//since this can be sent to a browser with a different locale
if  currentsession    null
currentsession langutil    null
type    errtype_unknown
locmsg   localizemessage messagekey  currentsession langutil  args
// throw an exception for severe and user errors
if  type    errtype_severe    type    errtype_user
if  messagekey equals
throwsqlexception args
else if  messagekey equals
throwsqlwarning args
else
throw new exception messagekey   locmsg
// throw an exception with just the message if the error type is
// unknown
if  type    errtype_unknown
throw new exception locmsg
return
/**
* throw a sql exception which was sent over by a server
* format of the msg is sqlstate:localized message\nsqlstate:next localized message
*
* @param msg		msg containing sql exception
*
* @throws sqlexception
*/
private void throwsqlexception string msg  throws sqlexception
sqlexception se   null
sqlexception ne
sqlexception ce   null
stringbuffer strbuf   new stringbuffer
stringtokenizer tokenizer   new stringtokenizer msg
string sqlstate   null
string str
while  tokenizer hasmoretokens
str   tokenizer nexttoken
//start of the next message
if  str charat 5
if  strbuf length   > 0
if  se    null
se   new sqlexception strbuf tostring    sqlstate
ce   se
else
ne   new sqlexception strbuf tostring    sqlstate
ce setnextexception ne
ce   ne
strbuf   new stringbuffer
strbuf append str substring 6
sqlstate   str substring 0 5
else
strbuf append str
if  strbuf length   > 0
if  se    null
se   new sqlexception strbuf tostring    sqlstate
ce   se
else
ne   new sqlexception strbuf tostring    sqlstate
ce setnextexception ne
ce   ne
throw se
/**
* throw a sql warning which was sent over by a server
* format of the msg is sqlstate:localized message\nsqlstate:next localized message
*
* @param msg		msg containing sql warning
*
* @throws sqlwarning
*/
private void throwsqlwarning string msg  throws sqlwarning
sqlwarning se   null
sqlwarning ne
sqlwarning ce   null
stringbuffer strbuf   new stringbuffer
stringtokenizer tokenizer   new stringtokenizer msg
string sqlstate   null
string str
while  tokenizer hasmoretokens
str   tokenizer nexttoken
//start of the next message
if  str charat 5
if  strbuf length   > 0
if  se    null
se   new sqlwarning strbuf tostring    sqlstate
ce   se
else
ne   new sqlwarning strbuf tostring    sqlstate
ce setnextexception ne
ce   ne
strbuf   new stringbuffer
strbuf append str substring 6
sqlstate   str substring 0 5
else
strbuf append str
if  strbuf length   > 0
if  se    null
se   new sqlwarning strbuf tostring    sqlstate
ce   se
else
ne   new sqlwarning strbuf tostring    sqlstate
ce setnextexception ne
ce   ne
throw se
/**
* print a trace for the (unexpected) exception received, then
* throw a generic exception indicating that 1) an unexpected
* exception was thrown, and 2) we've already printed the trace
* (so don't do it again).
*
* @param e an unexpected exception.
* @throws exception with message unexpected_err.
*/
private void throwunexpectedexception exception e
throws exception
consoleexceptionprinttrace e
throw new exception unexpected_err
/**
* convenience routine so that networkservercontrol can localize messages.
*
* @param msgprop	message key
* @param args		arguments to message
*
*/
public string localizemessage  string msgprop  string args
return localizemessage  msgprop  langutil  args
/**
* localize a message given a particular appui
*
* @param msgprop	message key
* @param locallangutil localizedresource to use to localize message
* @param args		arguments to message
*
*/
private string localizemessage string msgprop  localizedresource locallangutil  string  args
string locmsg   null
//check if the argument is a property
if  args    null
string  argmsg   new string
for  int i   0  i < args length  i
if  ismsgproperty args
argmsg   locallangutil gettextmessage args
else
argmsg   args
switch  args length
case 1
locmsg   locallangutil gettextmessage msgprop  argmsg
break
case 2
locmsg   locallangutil gettextmessage msgprop  argmsg  argmsg
break
case 3
locmsg   locallangutil gettextmessage msgprop  argmsg  argmsg  argmsg
break
case 4
locmsg   locallangutil gettextmessage msgprop  argmsg  argmsg  argmsg  argmsg
break
default
//shouldn't get here
else
locmsg   locallangutil gettextmessage msgprop
return locmsg
/**
* determine type of message
*
* @param msg		message
*
* @return message type
*/
private int getmessagetype string msg
//all property messages should start with drda_
if   msg startswith drda_msg_prefix
return errtype_unknown
int startpos   msg indexof    1
if  startpos >  msg length
return errtype_unknown
if  msg length   >  startpos   1
return errtype_unknown
char type   msg charat startpos
if  type
return errtype_severe
if  type
return errtype_user
if  type
return errtype_info
return errtype_unknown
/**
* determine whether string is a property key or not
* 	property keys start with drda_msg_prefix
*
* @param msg		message
*
* @return true if it is a property key; false otherwise
*/
private boolean ismsgproperty string msg
if  msg startswith drda_msg_prefix
return true
else
return false
/**
* get the current value of logging connections
*
* @return true if logging connections is on; false otherwise
*/
public boolean getlogconnections
synchronized logconnectionssync
return logconnections
/**
* set the current value of logging connections
*
* @param value	true to turn logging connections on; false to turn it off
*/
private void setlogconnections boolean value
synchronized logconnectionssync
logconnections   value
// update the value in all the threads
synchronized threadlist
for  enumeration e   threadlist elements    e hasmoreelements
drdaconnthread thread    drdaconnthread e nextelement
thread setlogconnections value
/**
* set the security mechanism for derby.drda.securitymechanism
* if this property is set, server will only allow connections
* from client with this security mechanism.
* this method will map the user friendly string representing
* the security mechanism to the corresponding drda secmec value
* @param s security mechanism string value
* @throws exception if  value to set is invalid
* @see property#drda_prop_securitymechanism
*/
private void setsecuritymechanism string s
throws exception
allowonlysecuritymechanism   getsecmecvalue s
// if server vm cannot support eusridpwd, then do not allow
// derby.drda.securitymechanism to be set to eusridpwd security
// mechanism
if   allowonlysecuritymechanism    invalid_or_notset_securitymechanism
allowonlysecuritymechanism    codepoint secmec_eusridpwd
supports_eusridpwd
consolepropertymessage    new string
s  property drda_prop_securitymechanism
/**
* get the security mechanism (secmec value) that the server
* will accept connections from.
* @return the securitymechanism value. it is value that
* the derby.drda.securitymechanism was set to, if it is not set, then
* it is equal to invalid_or_notset_securitymechanism
* @see property#drda_prop_securitymechanism
*/
protected int getsecuritymechanism
return allowonlysecuritymechanism
/**
* set the trace on/off for all sessions, or one session, depending on
* whether we got -s argument.
*
* @param on	true to turn trace on; false to turn it off
* @return true if set false if an error occurred
*/
private boolean settrace boolean on
boolean settracesuccessful   true
if  sessionarg    0
synchronized sessiontable
for  enumeration e   sessiontable elements    e hasmoreelements
session session    session  e nextelement
if  on
try
session settraceon tracedirectory true
catch  exception te
consoleexceptionprinttrace te
settracesuccessful   false
session settraceoff
else
session settraceoff
if  settracesuccessful
settraceall on
else
session session    session  sessiontable get new integer sessionarg
if  session    null
if  on
try
session settraceon tracedirectory true
catch  exception te
consoleexceptionprinttrace te
settracesuccessful   false
session settraceoff
else
session settraceoff
else
return false
return settracesuccessful
/**
* get the current value of the time slice
*
* @return time slice value
*/
protected int gettimeslice
return timeslice
/**
* set the current value of  time slice
*
* @param value time slice value
* @exception exception if value is < 0
*/
private void settimeslice int value
throws exception
if  value < min_timeslice
consolepropertymessage    new string
new integer value  tostring
if  value    use_default
value   default_timeslice
synchronized timeslicesync
timeslice   value
/**
* get the current value of keepalive to configure how long the server
* should keep the socket alive for a disconnected client
*/
protected boolean getkeepalive
return keepalive
/**
* get the current value of minimum number of threads to create at start
*
* @return value of minimum number of threads
*/
private int getminthreads
synchronized threadssync
return minthreads
/**
* set the current value of minimum number of threads to create at start
*
* @param value	 value of minimum number of threads
*/
private void setminthreads int value
synchronized threadssync
minthreads   value
/**
* get the current value of maximum number of threads to create
*
* @return value of maximum number of threads
*/
private int getmaxthreads
synchronized threadssync
return maxthreads
/**
* set the current value of maximum number of threads to create
*
* @param value	value of maximum number of threads
* @exception exception if value is less than 0
*/
private void setmaxthreads int value  throws exception
if  value < min_maxthreads
consolepropertymessage    new string
new integer value  tostring
if  value    use_default
value   default_maxthreads
synchronized threadssync
maxthreads   value
protected void setsslmode int mode
sslmode   mode
protected int getsslmode
return sslmode
/**
* get the current value of whether to trace all the sessions
*
* @return true if tracing is on for all sessions; false otherwise
*/
protected boolean gettraceall
synchronized traceallsync
return traceall
/**
* set the current value of whether to trace all the sessions
*
* @param value	true if tracing is on for all sessions; false otherwise
*/
private void settraceall boolean value
synchronized traceallsync
traceall   value
/**
* get the current value of trace directory
*
* @return trace directory
*/
protected string gettracedirectory
synchronized tracedirectorysync
return tracedirectory
/**
* set the current value of trace directory
*
* @param value	trace directory
*/
private void settracedirectory string value
synchronized tracedirectorysync
tracedirectory   value
/**
* connect to a database to test whether a connection can be made
*
* @param writer	connection to send message to
* @param database 	database directory to connect to
* @param user		user to use
* @param password	password to use
*/
private void connecttodatabase ddmwriter writer  string database  string user
string password  throws exception
properties p   new properties
if  user    null
p put    user
if  password    null
p put    password
try
class forname cloudscape_driver
catch  exception e
sendmessage writer  error  e getmessage
return
try
//note, we add database to the url so that we can allow additional
//url attributes
connection conn   drivermanager getconnection attribute protocol database  p
// send warnings
sqlwarning warn   conn getwarnings
if  warn    null
sendsqlmessage writer  warn  sqlwarning
else
sendok writer
conn close
return
catch  sqlexception se
sendsqlmessage writer  se  sqlerror
/**
* wrap sql error - display to console and raise exception
*
* @param messagekey	derby sql exception message id
*
* @exception exception raises exception for message
*/
private void wrapsqlerror string messagekey
throws exception
consolepropertymessage    messagekey
/**
* wrap sql warning - display to console and raise exception
*
* @param messagekey	derby sql exception message id
*
* @exception exception raises exception for message
*/
private void wrapsqlwarning string messagekey
throws exception
consolepropertymessage    messagekey
/**
* <p>
* constructs an object containing network server related properties
* and their values. some properties are only included if set. some
* other properties are included with a default value if not set.</p>
* <p>
* this method is accessing the local jvm in which the network server
* instance is actually running (i.e. no networking).</p>
* <p>
* this method is package private to allow access from relevant mbean
* implementations in the same package.</p>
*
* @return a collection of network server properties and their current
*         values
*/
properties getpropertyvalues
properties retval   new properties
retval put property drda_prop_portnumber  new integer portnumber  tostring
retval put property drda_prop_hostname  hostarg
retval put property drda_prop_keepalive  new boolean keepalive  tostring
string tracedir   gettracedirectory
if  tracedir    null
retval put property drda_prop_tracedirectory  tracedir
retval put property drda_prop_traceall  new boolean gettraceall    tostring
retval put property drda_prop_minthreads  new integer getminthreads    tostring
retval put property drda_prop_maxthreads  new integer getmaxthreads    tostring
retval put property drda_prop_timeslice  new integer gettimeslice    tostring
retval put property drda_prop_timeslice  new  integer gettimeslice    tostring
retval put property drda_prop_logconnections  new boolean getlogconnections    tostring
string startdrda   propertyutil getsystemproperty property start_drda
//derby-375 if a system property is specified without any value, getproperty returns
//an empty string. use default values in such cases.
if startdrda  null    startdrda equals
startdrda
retval put property start_drda   startdrda    null ?     startdrda
// derby-2108 ssl
retval put property drda_prop_ssl_mode  getsslmodestring getsslmode
// if property.drda_prop_securitymechanism has been set on server
// then put it in retval else the default behavior is as though
// it is not set
if   getsecuritymechanism      invalid_or_notset_securitymechanism
retval put  property drda_prop_securitymechanism  getstringvalueforsecmec getsecuritymechanism
//get the trace value for each session if tracing for all is not set
if   gettraceall
synchronized sessiontable
for  enumeration e   sessiontable elements    e hasmoreelements
session session    session  e nextelement
if  session istraceon
retval put property drda_prop_trace   session getconnnum
return retval
/**
* add a session - for use by <code>clientthread</code>. put the session
* into the session table and the run queue. start a new
* <code>drdaconnthread</code> if there are more sessions waiting than
* there are free threads, and the maximum number of threads is not
* exceeded.
*
* <p><code>addsession()</code> should only be called from one thread at a
* time.
*
* @param clientsocket the socket to read from and write to
*/
void addsession socket clientsocket  throws exception
int connectionnumber     connnum
if  getlogconnections
consolepropertymessage
integer tostring connectionnumber
// note that we always re-fetch the tracing configuration because it
// may have changed (there are administrative commands which allow
// dynamic tracing reconfiguration).
session session   new session this connectionnumber  clientsocket
gettracedirectory    gettraceall
sessiontable put new integer connectionnumber   session
// check whether there are enough free threads to service all the
// threads in the run queue in addition to the newly added session.
boolean enoughthreads
synchronized  runqueue
enoughthreads    runqueue size   < freethreads
// no need to hold the synchronization on runqueue any longer than
// this. since no other threads can make runqueue grow, and no other
// threads will reduce the number of free threads without removing
// sessions from runqueue, (runqueue.size() < freethreads) cannot go
// from true to false until addsession() returns.
drdaconnthread thread   null
// try to start a new thread if we don't have enough free threads
if   enoughthreads
// synchronize on threadssync to ensure that the value of
// maxthreads doesn't change until the new thread is added to
// threadlist.
synchronized  threadssync
// only start a new thread if we have no maximum number of
// threads or the maximum number of threads is not exceeded
if   maxthreads    0      threadlist size   < maxthreads
thread   new drdaconnthread session  this  gettimeslice
getlogconnections
threadlist add thread
thread start
// add the session to the run queue if we didn't start a new thread
if  thread    null
runqueueadd session
/**
* remove a thread from the thread list. should be called when a
* <code>drdaconnthread</code> has been closed.
*
* @param thread the closed thread
*/
void removethread drdaconnthread thread
threadlist remove thread
protected object getshutdownsync     return shutdownsync
protected boolean getshutdown     return shutdown
public string buildruntimeinfo localizedresource locallangutil
string s   locallangutil gettextmessage
int sessioncount   0
s    locallangutil gettextmessage
for  int i   0  i < threadlist size    i
string sessioninfo      drdaconnthread
threadlist get i   buildruntimeinfo   locallangutil
if   sessioninfo equals
sessioncount
s    sessioninfo
int waitingsessions   0
for  int i   0  i < runqueue size    i
s      session runqueue get i   buildruntimeinfo    locallangutil
waitingsessions
s
s    locallangutil gettextmessage
threadlist size
s    locallangutil gettextmessage
sessioncount
s   locallangutil gettextmessage
waitingsessions
runtime rt   runtime getruntime
rt gc
long totalmem   rt totalmemory
long freemem   rt freememory
s    locallangutil gettextmessage
totalmem
s    locallangutil gettextmessage
freemem
return s
long getbytesread
long count 0
for  int i   0  i < threadlist size    i
count      drdaconnthread threadlist get i   getbytesread
return count
long getbyteswritten
long count 0
for  int i   0  i < threadlist size    i
count      drdaconnthread threadlist get i   getbyteswritten
return count
int getactivesessions
int count 0
for  int i   0  i < threadlist size    i
if    drdaconnthread threadlist get i   hassession
count
return count
int getrunqueuesize
return runqueue size
int getthreadlistsize
return threadlist size
int getconnectionnumber
return connnum
protected void setclientlocale string locale
clientlocale   locale
/**
* retrieve product version information
* we need to make sure that this method gets the stream and passes it to
* productversionholder, because it lives in the network server jar
* and won't be readily available to productversionholder when running
* under security manager.
*/
private productversionholder getnetproductversionholder   throws exception
productversionholder mypvh  null
try
mypvh    productversionholder  accesscontroller doprivileged
new privilegedexceptionaction
public object run   throws unknownhostexception ioexception
inputstream versionstream   getclass   getresourceasstream productgenusnames net_info
return productversionholder getproductversionholderfrommyenv versionstream
catch privilegedactionexception e
exception e1   e getexception
consolepropertymessage    e1 getmessage
return mypvh
/**
* this method returns a timestamp to be used in the messages.
* cheapdateformatter class, which uses gmt, is used to format timestamps.
* this is to keep the formatting consistent with derby boot message since
* network server messages and the boot message get written to derby.log.
*
* @return current timestamp formatted in gmt
*/
private string getformattedtimestamp
long currenttime   system currenttimemillis
return cheapdateformatter formatdate currenttime