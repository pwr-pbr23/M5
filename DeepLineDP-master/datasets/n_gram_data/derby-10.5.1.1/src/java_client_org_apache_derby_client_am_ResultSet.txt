/*
derby - class org.apache.derby.client.am.resultset
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby client am
import java io ioexception
import java io inputstream
import java io reader
import java sql sqlexception
import org apache derby client am sqlexceptionfactory
import org apache derby shared common reference sqlstate
import org apache derby shared common i18n messageutil
import org apache derby shared common sanity sanitymanager
public abstract class resultset implements java sql resultset
resultsetcallbackinterface
//---------------------navigational members-----------------------------------
public statement statement_
public columnmetadata resultsetmetadata_     as obtained from the sqlda
private sqlwarning warnings_
public cursor cursor_
/** tracker object for lob state, used to free locators on the server. */
private lobstatetracker lobstate   null
protected agent agent_
public section generatedsection_   null
private closefilterinputstream is_
//---------------------navigational cheat-links-------------------------------
// cheat-links are for convenience only, and are not part of the conceptual model.
// warning:
//   cheat-links should only be defined for invariant state data.
//   that is, the state data is set by the constructor and never changes.
// alias for statement_.connection
public final connection connection_
//----------------------------- constants ------------------------------------
public final static int scrollorientation_relative__   1
public final static int scrollorientation_absolute__   2
public final static int scrollorientation_after__   3
public final static int scrollorientation_before__   4
public final static int scrollorientation_prior__   5
public final static int scrollorientation_first__   6
public final static int scrollorientation_last__   7
public final static int scrollorientation_current__   8
public final static int scrollorientation_next__   0
public final static int updatability_unknown__   0
public final static int updatability_readonly__   1
public final static int updatability_delete__   2
public final static int updatability_update__   4
public final static int sensitivity_unknown__   0
public final static int sensitivity_insensitive__   1
public final static int sensitivity_sensitive_static__   2
public final static int sensitivity_sensitive_dynamic__   3
static final private int was_null   1
static final private int was_not_null   2
static final private int was_null_unset   0
static final public int next_rowset   1
static final public int previous_rowset   2
static final public int absolute_rowset   3
static final public int first_rowset   4
static final public int last_rowset   5
static final public int relative_rowset   6
static final public int refresh_rowset   7
//  determines if a cursor is a:
//    return to client - not to be read by the stored procedure only by client
//    return to caller
public static final byte ddm_return_caller   0x01
public static final byte ddm_return_client   0x02
//-----------------------------state------------------------------------------
// note:
//   result set meta data as described by the sqlda is described in columnmetadata.
private int wasnull_   was_null_unset
// resultset returnability for stored procedure cursors
//  determines if a cursor is a:
//    return to client - not to be read by the stored procedure only by client
//    return to caller - only calling jsp can read it, not the client
protected byte rsreturnability_   ddm_return_client
// this means the client-side jdbc result set object is open.
boolean openonclient_   true
// this means a server-side derby query section (cursor) for this result set is in the open state.
// a jdbc result set may remain open even after the server has closed its cursor
// (openonclient=true, openonserver=false); this is known as the "close-only" state.
public boolean openonserver_   true
// there is a query terminating sqlca returned from the server when the server closes
// it's cursor and the client moves to the close-only state.
public sqlca queryterminatingsqlca_
// only true for forward cursors after next() returns false (+100).
// used to prevent multiple commits for subsequent next() calls.
boolean autocommitted_   false
// before the first call to next() or any cursor positioning method, the cursor position is invalid
// and getter methods cannot be called.
// also, if a cursor is exhausted (+100), the cursor position is invalid.
public boolean isvalidcursorposition_   false
public boolean cursorhold_
// query instance identifier returned on open by uplevel servers.
// this value plus the package information uniquely identifies a query.
// it is 64 bits long and it's value is unarchitected.
public long queryinstanceidentifier_   0
public int resultsettype_
public int resultsetconcurrency_
public int resultsetholdability_
public boolean scrollable_   false
public int sensitivity_
public boolean isrowsetcursor_   false
public boolean isbeforefirst_   true
public boolean isafterlast_   false
public boolean isfirst_   false
public boolean islast_   false
public boolean rowsetcontainslastrow_   false
public sqlca rowsetsqlca_
// gets its initial value from the statement when the result set is created.
// it can be modified by setfetchsize and retrieved via getfetchsize.
protected int suggestedfetchsize_
// set by the net layer based on suggestedfetchsize_, protocol
// type, scrollability and presence of lobs.
public int fetchsize_
public int fetchdirection_
public long rowcount_    1
protected long absoluteposition_   0           absolute position of the current row
protected long firstrowinrowset_   0           absolute position of the first row in the current rowset
protected long lastrowinrowset_   0            absolute position of the last row in the current rowset
protected long currentrowinrowset_    1         relative position to the first row in the current rowsetwel
protected long absoluterownumberfortheintendedrow_
private boolean isoninsertrow_   false      reserved for later
protected boolean isoncurrentrow_   true
public int rowsreceivedincurrentrowset_   0      keep track of the number of rows received in the
// current rowset so far
// maybe be able to consolidate with rowsreceivedincurrentrowset_
// could use the rowsreceivedincurrentrowset_ flag. but since we are going to set it to the
// fetchsize and decrement it each time we successfully receiveds a row, the name will be confusing.
// fetch size can be changed in the middle of a rowset, and since we don't pre-parse all the rows \
// for forward-only cursors like we do for scrollable cursors, we will lose the original fetchsize
// when it's reset.  by decrementing rowsyettobereceivedinrowset_, when we come across a fetch
// request, if rowsyettobereceivedinrowset_ is 0, then we can fetch using the "new" fetchsize,
// otherwise, we will use rowsyettobereceivedinrowset_ to complete the rowset.
public int rowsyettobereceivedforrowset_   0     keep track of the number of rows still need to
// be received to complete the rowset
private object updatedcolumns_
// keeps track of whether a column has been updated.  if a column is updated to null,
// the object array updatedcolumns_ entry is null, and we will use this array to distinguish
// between column not updated and column updated to null.
private boolean columnupdated_
private preparedstatement preparedstatementforupdate_
private preparedstatement preparedstatementfordelete_
private preparedstatement preparedstatementforinsert_
// nesting level of the result set in a stored procedure
public int nestinglevel_    1
// whenever a commit occurs, it unpositions the cursor on the server.  we need to
// reposition the cursor before updating/deleting again.  this flag will be set to true
// whenever a commit happens, and reset to false again after we repositoin the cursor.
public boolean cursorunpositionedonserver_   false
// keep maxrows in the resultset, so that changes to maxrow in the statement
// do not affect the resultset after it has been created
private int maxrows_
private boolean streamusedflags_
//---------------------constructors/finalizer---------------------------------
protected resultset agent agent
statement statement
cursor cursor
int resultsettype
int resultsetconcurrency
int resultsetholdability
agent_   agent
statement_   statement
connection_   statement_ connection_
cursor_   cursor
if  cursor_    null
cursor_ maxfieldsize_   statement_ maxfieldsize_
resultsettype_   resultsettype
resultsetconcurrency_   resultsetconcurrency
resultsetholdability_   resultsetholdability
fetchdirection_   statement_ fetchdirection_
suggestedfetchsize_   statement_ fetchsize_
maxrows_   statement_ maxrows_
// only set the warning if actual resultsettype returned by the server is less
// than the application requested resultsettype.
// type_forward_only = 1003
// type_scroll_insensitive = 1004
// type_scroll_sensitive = 1005
if  resultsettype_ < statement_ resultsettype_
statement_ accumulatewarning
new sqlwarning
agent_ logwriter_
new clientmessageid sqlstate invalid_resultset_type
new integer statement_ resultsettype_
new integer resultsettype_
// only set the warning if actual resultsetconcurrency returned by the server is
// less than the application requested resultsetconcurrency.
// concur_read_only = 1007
// concur_updatable = 1008
if  resultsetconcurrency_ < statement_ resultsetconcurrency_
accumulatewarning
new sqlwarning
agent_ logwriter_
new clientmessageid
sqlstate query_not_qualified_for_updatable_resultset
listentounitofwork
// ---------------------------jdbc 1------------------------------------------
public final boolean next   throws sqlexception
try
synchronized  connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this
boolean isvalidcursorposition   nextx
if  agent_ loggingenabled
agent_ logwriter_ traceexit this     isvalidcursorposition
return isvalidcursorposition
catch   sqlexception se
throw se getsqlexception
// used by dbmd
boolean nextx   throws sqlexception
checkforclosedresultset
clearwarningsx
movetocurrentrowx
wasnull_   resultset was_null_unset
// discard all previous updates when moving the cursor
resetupdatedcolumns
unusestreams
// for type_forward_only resultset, just call cursor.next()
if  resultsettype_    java sql resultset type_forward_only
// cursor is null for singleton selects that do not return data.
isvalidcursorposition_    cursor_    null  ? false   cursor_ next
// for forward-only cursors, if qryrowset was specificed on opnqry or excsqlstt,
// then we must count the rows returned in the rowset to make sure we received a
// complete rowset.  if not, we need to complete the rowset on the next fetch.
if  fetchsize_    0
if  rowsyettobereceivedforrowset_    0
rowsyettobereceivedforrowset_   fetchsize_
if  isvalidcursorposition_
rowsyettobereceivedforrowset_
// auto-commit semantics for exhausted cursors follows.
// from connection.setautocommit() javadoc:
//   the commit occurs when the statement completes or the next execute occurs, whichever comes first.
//   in the case of statements returning a resultset object, the statement completes when the
//   last row of the resultset object has been retrieved or the resultset object has been closed.
//   in advanced cases, a single statement may return multiple results as well as output parameter values.
//   in these cases, the commit occurs when all results and output parameter values have been retrieved.
// we will check to see if the forward only result set has gone past the end,
// we will close the result set, the autocommit logic is in the closex() method
//
//aug 24, 2005: auto-commit logic is no longer in the closex() method. insted it has been
//moved to statement and is handled in a manner similar to the embedded driver.
//    if (!isvalidcursorposition_ && // we've gone past the end (+100)
//        cursor_ != null) {
if    isvalidcursorposition_    cursor_    null
maxrows_ > 0    cursor_ rowsread_ > maxrows_
isvalidcursorposition_   false
// if not on a valid row and the query is closed at the server.
// check for an error which may have caused the cursor to terminate.
// if there were no more rows because of an error, then this method
// should throw an sqlexception rather than just returning false.
// depending on how this works with scrollable cursors, there may be
// a better way/more common place for this logic.
sqlexception sqlexception   null
if   openonserver_
int sqlcode   utils getsqlcodefromsqlca queryterminatingsqlca_
if  sqlcode > 0    sqlcode    100
accumulatewarning new sqlwarning agent_ logwriter_  queryterminatingsqlca_
else if  sqlcode < 0
sqlexception   new sqlexception agent_ logwriter_  queryterminatingsqlca_
try
statement_ resultsetcommitting this
catch  sqlexception sqle
sqlexception   utils accumulatesqlexception sqle  sqlexception
if  sqlexception    null
throw sqlexception
// for scrollable resultset's,
// if the "next" request is still fetching within the current rowset,
//   update column info from cache and increment the current row index
// else
//   fetch the next rowset from the server
else
// these flags will only be used for dynamic cursors where we don't know the row count
// and can't keep track of the absolute position of the cursor.
isafterlast_   false
islast_   false
// if the next row is still within the current rowset
if  rowisincurrentrowset firstrowinrowset_   currentrowinrowset_   1  scrollorientation_next__
isvalidcursorposition_   true
currentrowinrowset_
else
checkandthrowreceivedqueryterminatingexception
isvalidcursorposition_   getnextrowset
if  isvalidcursorposition_
updatecolumninfofromcache
// check if there is a non-null sqlca for the current row for rowset cursors
checkrowsetsqlca
if  isbeforefirst_
isfirst_   true
isbeforefirst_   false
else
isfirst_   false
return isvalidcursorposition_
// for forward-only cursors, check if rowsread_ > maxrows_.
// for scrollable cursors, check if absolute row number > maxrows_.
// maxrows_ will be ignored by sensitive dynamic cursors since we don't know the rowcount
if   openonclient_
isvalidcursorposition_   false
else if  sensitivity_    sensitivity_sensitive_dynamic__    maxrows_ > 0
firstrowinrowset_   currentrowinrowset_ > maxrows_
isvalidcursorposition_   false
return isvalidcursorposition_
public void close   throws sqlexception
try
synchronized  connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this
closex
catch   sqlexception se
throw se getsqlexception
// to do: when parseendqryrm() notifies common w/ endquerycloseonlyevent() we need to mark something
// that we later check to drive a commit.
// an untraced version of close()
public final void closex   throws sqlexception
if   openonclient_
return
closeclosefilterinputstream
// see if there are open locators on the current row, if valid.
if  isvalidcursorposition_     isoninsertrow_
lobstate checkcurrentrow cursor_
// note: the preclose_ method must also check for locators if
//       prefetching of data is enabled for result sets containing lobs.
preclose_
try
if  openonserver_
flowcloseandautocommitifnotautocommitted
else
statement_ resultsetcommitting this
finally
markclosed true
if  statement_ openonclient_    statement_ iscatalogquery_
statement_ closex
nulldataforgc
public void nulldataforgc
// this method is called by closex().  we cannot call this if cursor is cached,
// otherwise it will cause nullpointerexception's when cursor is reused.
// cursor is only cached for preparedstatement's.
if  cursor_    null     statement_ ispreparedstatement_
cursor_ nulldataforgc
cursor_   null
resultsetmetadata_   null
void flowcloseandautocommitifnotautocommitted   throws sqlexception
agent_ beginwritechain statement_
boolean performedautocommit   writecloseandautocommit
agent_ flow statement_
readcloseandautocommit performedautocommit
agent_ endreadchain
private boolean writecloseandautocommit   throws sqlexception
// set autocommitted_ to false so commit will flow following
// close cursor if autocommit is true.
autocommitted_   false
if  generatedsection_    null       none call statement result set case
writecursorclose_ statement_ section_
else      call statement result set s  case
writecursorclose_ generatedsection_
return statement_ resultsetcommitting this  true
private void readcloseandautocommit boolean readautocommit  throws sqlexception
readcursorclose_
if  readautocommit
readautocommitifnotautocommitted
void writeclose   throws sqlexception
// set autocommitted_ to false so commit will flow following
// close cursor if autocommit is true.
autocommitted_   false
if  generatedsection_    null       none call statement result set case
writecursorclose_ statement_ section_
else      call statement result set s  case
writecursorclose_ generatedsection_
void readclose   throws sqlexception
try
if  generatedsection_    null       none call statement result set case
readcursorclose_
else      call statement result set s  case
readcursorclose_
finally
markclosed
// precondition: transaction state allows for auto commit to generate flow
private void writeautocommitifnotautocommitted   throws sqlexception
if  connection_ autocommit_     autocommitted_
connection_ writeautocommit
private void readautocommitifnotautocommitted   throws sqlexception
if  connection_ autocommit_     autocommitted_
connection_ readautocommit
markautocommitted
public boolean wasnull   throws sqlexception
try
if  agent_ loggingenabled
agent_ logwriter_ traceentry this
checkforclosedresultset
if  wasnull_    resultset was_null_unset
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate wasnull_invalid
if  agent_ loggingenabled
agent_ logwriter_ traceexit this     wasnull_    resultset was_null
return wasnull_    resultset was_null
catch   sqlexception se
throw se getsqlexception
//------------------- getters on column index --------------------------------
// live life on the edge and run unsynchronized
public boolean getboolean int column  throws sqlexception
try
closeclosefilterinputstream
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     column
checkgetterpreconditions column
boolean result   false
if  wasnonnullsensitiveupdate column     isoninsertrow_
if  isoninsertrow_    updatedcolumns_    null
result   false
else
result   agent_ crossconverters_ setbooleanfromobject
updatedcolumns_
resultsetmetadata_ types_
else
result   isnull column  ? false   cursor_ getboolean column
if  agent_ loggingenabled
agent_ logwriter_ traceexit this     result
setwasnull column       placed close to the return to minimize risk of thread interference
return result
catch   sqlexception se
throw se getsqlexception
// live life on the edge and run unsynchronized
public byte getbyte int column  throws sqlexception
try
closeclosefilterinputstream
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     column
checkgetterpreconditions column
byte result   0
if  wasnonnullsensitiveupdate column     isoninsertrow_
if   isoninsertrow_      updatedcolumns_    null
result   0
else
result   agent_ crossconverters_ setbytefromobject
updatedcolumns_
resultsetmetadata_ types_
else
result   isnull column  ? 0   cursor_ getbyte column
if  agent_ loggingenabled
agent_ logwriter_ traceexit this     result
setwasnull column       placed close to the return to minimize risk of thread interference
return result
catch   sqlexception se
throw se getsqlexception
// live life on the edge and run unsynchronized
public short getshort int column  throws sqlexception
try
closeclosefilterinputstream
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     column
checkgetterpreconditions column
short result   0
if  wasnonnullsensitiveupdate column     isoninsertrow_
if  isoninsertrow_    updatedcolumns_    null
result   0
else
result     short  agent_ crossconverters_ setobject
java sql types smallint
updatedcolumns_   shortvalue
else
result   isnull column  ? 0   cursor_ getshort column
if  agent_ loggingenabled
agent_ logwriter_ traceexit this     result
setwasnull column       placed close to the return to minimize risk of thread interference
return result
catch   sqlexception se
throw se getsqlexception
// live life on the edge and run unsynchronized
public int getint int column  throws sqlexception
try
closeclosefilterinputstream
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     column
checkgetterpreconditions column
int result   0
if  wasnonnullsensitiveupdate column     isoninsertrow_
if  isoninsertrow_    updatedcolumns_    null
result   0
else
result     integer  agent_ crossconverters_ setobject
java sql types integer
updatedcolumns_   intvalue
else
result   isnull column  ? 0   cursor_ getint column
if  agent_ loggingenabled
agent_ logwriter_ traceexit this     result
setwasnull column      this is placed here close to the return to minimize risk of race condition
return result
catch   sqlexception se
throw se getsqlexception
// live life on the edge and run unsynchronized
public long getlong int column  throws sqlexception
try
closeclosefilterinputstream
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     column
checkgetterpreconditions column
long result   0
if  wasnonnullsensitiveupdate column     isoninsertrow_
if  isoninsertrow_    updatedcolumns_    null
result   0
else
result     long  agent_ crossconverters_ setobject
java sql types bigint
updatedcolumns_   longvalue
else
result   isnull column  ? 0   cursor_ getlong column
if  agent_ loggingenabled
agent_ logwriter_ traceexit this     result
setwasnull column       placed close to the return to minimize risk of thread interference
return result
catch   sqlexception se
throw se getsqlexception
// live life on the edge and run unsynchronized
public float getfloat int column  throws sqlexception
try
closeclosefilterinputstream
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     column
checkgetterpreconditions column
float result   0
if  wasnonnullsensitiveupdate column     isoninsertrow_
if   isoninsertrow_    updatedcolumns_    null
result   0
else
result     float  agent_ crossconverters_ setobject
java sql types real
updatedcolumns_   floatvalue
else
result   isnull column  ? 0   cursor_ getfloat column
if  agent_ loggingenabled
agent_ logwriter_ traceexit this     result
setwasnull column       placed close to the return to minimize risk of thread interference
return result
catch   sqlexception se
throw se getsqlexception
// live life on the edge and run unsynchronized
public double getdouble int column  throws sqlexception
try
closeclosefilterinputstream
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     column
checkgetterpreconditions column
double result   0
if  wasnonnullsensitiveupdate column     isoninsertrow_
if  isoninsertrow_    updatedcolumns_    null
result   0
else
result     double  agent_ crossconverters_ setobject
java sql types double
updatedcolumns_   doublevalue
else
result   isnull column  ? 0   cursor_ getdouble column
if  agent_ loggingenabled
agent_ logwriter_ traceexit this     result
setwasnull column       placed close to the return to minimize risk of thread interference
return result
catch   sqlexception se
throw se getsqlexception
// live life on the edge and run unsynchronized
/** @deprecated */
public java math bigdecimal getbigdecimal int column  int scale  throws sqlexception
try
closeclosefilterinputstream
if  agent_ loggingenabled
agent_ logwriter_ tracedeprecatedentry this     column  scale
checkgetterpreconditions column
java math bigdecimal result   null
if  wasnonnullsensitiveupdate column
result
java math bigdecimal  agent_ crossconverters_ setobject java sql types decimal
updatedcolumns_   setscale scale  java math bigdecimal round_down
else
result
isnull column  ? null   cursor_ getbigdecimal column  setscale scale  java math bigdecimal round_down
if  agent_ loggingenabled
agent_ logwriter_ tracedeprecatedexit this     result
setwasnull column       placed close to the return to minimize risk of thread interference
return result
catch   sqlexception se
throw se getsqlexception
// live life on the edge and run unsynchronized
public java math bigdecimal getbigdecimal int column  throws sqlexception
try
closeclosefilterinputstream
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     column
checkgetterpreconditions column
java math bigdecimal result   null
if  wasnonnullsensitiveupdate column
result
java math bigdecimal  agent_ crossconverters_ setobject java sql types decimal
updatedcolumns_
else
result   isnull column  ? null   cursor_ getbigdecimal column
if  agent_ loggingenabled
agent_ logwriter_ traceexit this     result
setwasnull column       placed close to the return to minimize risk of thread interference
return result
catch   sqlexception se
throw se getsqlexception
// live life on the edge and run unsynchronized
public java sql date getdate int column  throws sqlexception
try
closeclosefilterinputstream
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     column
checkgetterpreconditions column
java sql date result   null
if  wasnonnullsensitiveupdate column
result    java sql date  agent_ crossconverters_ setobject java sql types date  updatedcolumns_
else
result   isnull column  ? null   cursor_ getdate column
if  agent_ loggingenabled
agent_ logwriter_ traceexit this     result
setwasnull column       placed close to the return to minimize risk of thread interference
return result
catch   sqlexception se
throw se getsqlexception
// live life on the edge and run unsynchronized
public java sql date getdate int column  java util calendar calendar  throws sqlexception
try
closeclosefilterinputstream
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     column  calendar
java sql date date   getdate column
if  calendar    null
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate calendar_is_null
if  date    null
java util calendar targetcalendar   java util calendar getinstance calendar gettimezone
targetcalendar clear
targetcalendar settime date
java util calendar defaultcalendar   java util calendar getinstance
defaultcalendar clear
defaultcalendar settime date
long timezoneoffset
targetcalendar get java util calendar zone_offset    defaultcalendar get java util calendar zone_offset
targetcalendar get java util calendar dst_offset    defaultcalendar get java util calendar dst_offset
date settime date gettime     timezoneoffset
if  agent_ loggingenabled
agent_ logwriter_ traceexit this     date
return date
catch   sqlexception se
throw se getsqlexception
// live life on the edge and run unsynchronized
public java sql time gettime int column  throws sqlexception
try
closeclosefilterinputstream
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     column
checkgetterpreconditions column
java sql time result   null
if  wasnonnullsensitiveupdate column
result    java sql time  agent_ crossconverters_ setobject java sql types time  updatedcolumns_
else
result   isnull column  ? null   cursor_ gettime column
if  agent_ loggingenabled
agent_ logwriter_ traceexit this     result
setwasnull column       placed close to the return to minimize risk of thread interference
return result
catch   sqlexception se
throw se getsqlexception
// live life on the edge and run unsynchronized
public java sql time gettime int column  java util calendar calendar  throws sqlexception
try
closeclosefilterinputstream
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     column  calendar
java sql time time   gettime column
if  calendar    null
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate calendar_is_null
if  time    null
java util calendar targetcalendar   java util calendar getinstance calendar gettimezone
targetcalendar clear
targetcalendar settime time
java util calendar defaultcalendar   java util calendar getinstance
defaultcalendar clear
defaultcalendar settime time
long timezoneoffset
targetcalendar get java util calendar zone_offset    defaultcalendar get java util calendar zone_offset
targetcalendar get java util calendar dst_offset    defaultcalendar get java util calendar dst_offset
time settime time gettime     timezoneoffset
if  agent_ loggingenabled
agent_ logwriter_ traceexit this     time
return time
catch   sqlexception se
throw se getsqlexception
// live life on the edge and run unsynchronized
public java sql timestamp gettimestamp int column  throws sqlexception
try
closeclosefilterinputstream
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     column
checkgetterpreconditions column
java sql timestamp result   null
if  wasnonnullsensitiveupdate column
result    java sql timestamp  agent_ crossconverters_ setobject java sql types timestamp  updatedcolumns_
else
result   isnull column  ? null   cursor_ gettimestamp column
if  agent_ loggingenabled
agent_ logwriter_ traceexit this     result
setwasnull column       placed close to the return to minimize risk of thread interference
return result
catch   sqlexception se
throw se getsqlexception
// live life on the edge and run unsynchronized
public java sql timestamp gettimestamp int column  java util calendar calendar  throws sqlexception
try
closeclosefilterinputstream
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     column  calendar
java sql timestamp timestamp   gettimestamp column
if  calendar    null
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate calendar_is_null
if  timestamp    null
int nano   timestamp getnanos
java util calendar targetcalendar   java util calendar getinstance calendar gettimezone
targetcalendar clear
targetcalendar settime timestamp
java util calendar defaultcalendar   java util calendar getinstance
defaultcalendar clear
defaultcalendar settime timestamp
long timezoneoffset
targetcalendar get java util calendar zone_offset    defaultcalendar get java util calendar zone_offset
targetcalendar get java util calendar dst_offset    defaultcalendar get java util calendar dst_offset
timestamp settime timestamp gettime     timezoneoffset
timestamp setnanos nano
if  agent_ loggingenabled
agent_ logwriter_ traceexit this     timestamp
return timestamp
catch   sqlexception se
throw se getsqlexception
// live life on the edge and run unsynchronized
public string getstring int column  throws sqlexception
try
closeclosefilterinputstream
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     column
checkgetterpreconditions column
string result   null
if  wasnonnullsensitiveupdate column
result    string  agent_ crossconverters_ setobject java sql types char  updatedcolumns_
else
result   isnull column  ? null   cursor_ getstring column
if  agent_ loggingenabled
agent_ logwriter_ traceexit this     result
setwasnull column       placed close to the return to minimize risk of thread interference
return result
catch   sqlexception se
throw se getsqlexception
// live life on the edge and run unsynchronized
public byte getbytes int column  throws sqlexception
try
closeclosefilterinputstream
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     column
checkgetterpreconditions column
byte result   null
if  wasnonnullsensitiveupdate column
result    byte  agent_ crossconverters_ setobject java sql types binary  updatedcolumns_
else
result   isnull column  ? null   cursor_ getbytes column
if  agent_ loggingenabled
agent_ logwriter_ traceexit this     result
setwasnull column       placed close to the return to minimize risk of thread interference
return result
catch   sqlexception se
throw se getsqlexception
// live life on the edge and run unsynchronized
public java io inputstream getbinarystream int column  throws sqlexception
try
closeclosefilterinputstream
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     column
checkgetterpreconditions column
usestream column
java io inputstream result   null
if  wasnonnullsensitiveupdate column
result   new java io bytearrayinputstream  byte  agent_ crossconverters_ setobject java sql types binary  updatedcolumns_
else
result   isnull column  ? null   cursor_ getbinarystream column
if  agent_ loggingenabled
agent_ logwriter_ traceexit this     result
setwasnull column       placed close to the return to minimize risk of thread interference
return createclosefilterinputstream result
catch   sqlexception se
throw se getsqlexception
// live life on the edge and run unsynchronized
public java io inputstream getasciistream int column  throws sqlexception
try
closeclosefilterinputstream
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     column
checkgetterpreconditions column
usestream column
java io inputstream result   null
if  wasnonnullsensitiveupdate column
result   new asciistream  string  agent_ crossconverters_ setobject java sql types char
updatedcolumns_
else
result   isnull column  ? null   cursor_ getasciistream column
if  agent_ loggingenabled
agent_ logwriter_ traceexit this     result
setwasnull column       placed close to the return to minimize risk of thread interference
return createclosefilterinputstream result
catch   sqlexception se
throw se getsqlexception
/**
* retrieve the value of the specified column as a stream of two-byte
* unicode characters. deprecated in jdbc 2.0 and this method will just
* throw a feature not implemented exception.
*
* @param column the column to retrieve as a unicode stream
* @exception sqlexception throws feature not implemented
* @deprecated
*/
public java io inputstream getunicodestream int column  throws sqlexception
if  agent_ loggingenabled
agent_ logwriter_ tracedeprecatedentry this
column
throw sqlexceptionfactory notimplemented
// live life on the edge and run unsynchronized
public java io reader getcharacterstream int column  throws sqlexception
try
closeclosefilterinputstream
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     column
checkgetterpreconditions column
usestream column
java io reader result   null
if  wasnonnullsensitiveupdate column
result   new java io stringreader
string  agent_ crossconverters_ setobject java sql types char  updatedcolumns_
else
result   isnull column  ? null   cursor_ getcharacterstream column
if  agent_ loggingenabled
agent_ logwriter_ traceexit this     result
setwasnull column       placed close to the return to minimize risk of thread interference
return result
catch   sqlexception se
throw se getsqlexception
// live life on the edge and run unsynchronized
public java sql blob getblob int column  throws sqlexception
try
closeclosefilterinputstream
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     column
checkgetterpreconditions column
java sql blob result   null
if  wasnonnullsensitiveupdate column
result    java sql blob  agent_ crossconverters_ setobject java sql types blob
updatedcolumns_
else
result   isnull column  ? null   cursor_ getblob column
if  agent_ loggingenabled
agent_ logwriter_ traceexit this     result
setwasnull column       placed close to the return to minimize risk of thread interference
return result
catch   sqlexception se
throw se getsqlexception
// live life on the edge and run unsynchronized
public java sql clob getclob int column  throws sqlexception
try
closeclosefilterinputstream
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     column
checkgetterpreconditions column
java sql clob result   null
if  wasnonnullsensitiveupdate column
result    java sql clob  agent_ crossconverters_ setobject java sql types clob
updatedcolumns_
else
result   isnull column  ? null   cursor_ getclob column
if  agent_ loggingenabled
agent_ logwriter_ traceexit this     result
setwasnull column       placed close to the return to minimize risk of thread interference
return result
catch   sqlexception se
throw se getsqlexception
// live life on the edge and run unsynchronized
public java sql ref getref int column  throws sqlexception
try
closeclosefilterinputstream
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     column
checkgetterpreconditions column
java sql ref result   isnull column  ? null   cursor_ getref column
if  true
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate jdbc_method_not_implemented
if  agent_ loggingenabled
agent_ logwriter_ traceexit this     result
setwasnull column       placed close to the return to minimize risk of thread interference
return result
catch   sqlexception se
throw se getsqlexception
// live life on the edge and run unsynchronized
public java sql array getarray int column  throws sqlexception
try
closeclosefilterinputstream
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     column
checkgetterpreconditions column
java sql array result   isnull column  ? null   cursor_ getarray column
if  true
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate jdbc_method_not_implemented
if  agent_ loggingenabled
agent_ logwriter_ traceexit this     result
setwasnull column       placed close to the return to minimize risk of thread interference
return result
catch   sqlexception se
throw se getsqlexception
// live life on the edge and run unsynchronized
public object getobject int column  throws sqlexception
try
closeclosefilterinputstream
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     column
object result   getobjectx column
if  agent_ loggingenabled
agent_ logwriter_ traceexit this     result
return result
catch   sqlexception se
throw se getsqlexception
// used by dbmd
object getobjectx int column  throws sqlexception
checkgetterpreconditions column
object result   null
if  wasnonnullsensitiveupdate column
result   updatedcolumns_
else
result   isnull column  ? null   cursor_ getobject column
setwasnull column       placed close to the return to minimize risk of thread interference
return result
// live life on the edge and run unsynchronized
public object getobject int column  java util map map  throws sqlexception
try
closeclosefilterinputstream
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     column  map
checkgetterpreconditions column
object result   null
if  wasnonnullsensitiveupdate column
result   updatedcolumns_
else
result   isnull column  ? null   cursor_ getobject column
if  true
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate jdbc_method_not_implemented
if  agent_ loggingenabled
agent_ logwriter_ traceexit this     result
setwasnull column       placed close to the return to minimize risk of thread interference
return result
catch   sqlexception se
throw se getsqlexception
//----------------------------------------------------------------------------
// this method only returns true if there is a new non-null updated value.
// if the resultset is updatable, sensitive, and updated, return the new non-null updated value.
// otherwise this method will return false.
// if the column is updated to null, or if the column has not been update but is null,
// a null will be returned by isnull(), which first calls wasnullsensitiveupdate() to check for a column
// that is updated to null, and columnupdated_ is checked there.
private boolean wasnonnullsensitiveupdate int column
return
updatedcolumns_    null
updatedcolumns_    null
// if updatedcolumns_ entry is null, but columnupdated_ entry
// indicates column has been updated, then column is updated to null.
private boolean wasnullsensitiveupdate int column
return
updatedcolumns_    null
updatedcolumns_    null
columnupdated_
private void setwasnull int column
if  wasnullsensitiveupdate column      isoninsertrow_    updatedcolumns_    null
wasnull_   was_null
else
wasnull_    cursor_ isnull_    null    cursor_ isnull_  ? was_null   was_not_null
private boolean isnull int column
if  wasnullsensitiveupdate column
return true
else
return  cursor_ isupdatedeletehole_    true    cursor_ isnull_
// ------------- methods for accessing results by column name ----------------
public final boolean getboolean string columnname  throws sqlexception
try
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     columnname
return getboolean findcolumnx columnname
catch   sqlexception se
throw se getsqlexception
public final byte getbyte string columnname  throws sqlexception
try
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     columnname
return getbyte findcolumnx columnname
catch   sqlexception se
throw se getsqlexception
public final short getshort string columnname  throws sqlexception
try
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     columnname
return getshort findcolumnx columnname
catch   sqlexception se
throw se getsqlexception
public final int getint string columnname  throws sqlexception
try
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     columnname
return getint findcolumnx columnname
catch   sqlexception se
throw se getsqlexception
public final long getlong string columnname  throws sqlexception
try
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     columnname
return getlong findcolumnx columnname
catch   sqlexception se
throw se getsqlexception
public final float getfloat string columnname  throws sqlexception
try
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     columnname
return getfloat findcolumnx columnname
catch   sqlexception se
throw se getsqlexception
public final double getdouble string columnname  throws sqlexception
try
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     columnname
return getdouble findcolumnx columnname
catch   sqlexception se
throw se getsqlexception
/** @deprecated */
public final java math bigdecimal getbigdecimal string columnname  int scale  throws sqlexception
try
if  agent_ loggingenabled
agent_ logwriter_ tracedeprecatedentry this     columnname  scale
return getbigdecimal findcolumnx columnname   scale
catch   sqlexception se
throw se getsqlexception
public final java math bigdecimal getbigdecimal string columnname  throws sqlexception
try
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     columnname
return getbigdecimal findcolumnx columnname
catch   sqlexception se
throw se getsqlexception
public final java sql date getdate string columnname  throws sqlexception
try
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     columnname
return getdate findcolumnx columnname
catch   sqlexception se
throw se getsqlexception
public final java sql date getdate string columnname  java util calendar cal  throws sqlexception
try
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     columnname  cal
return getdate findcolumnx columnname   cal
catch   sqlexception se
throw se getsqlexception
public final java sql time gettime string columnname  throws sqlexception
try
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     columnname
return gettime findcolumnx columnname
catch   sqlexception se
throw se getsqlexception
public final java sql time gettime string columnname  java util calendar cal  throws sqlexception
try
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     columnname  cal
return gettime findcolumnx columnname   cal
catch   sqlexception se
throw se getsqlexception
public final java sql timestamp gettimestamp string columnname  throws sqlexception
try
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     columnname
return gettimestamp findcolumnx columnname
catch   sqlexception se
throw se getsqlexception
public final java sql timestamp gettimestamp string columnname  java util calendar cal  throws sqlexception
try
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     columnname  cal
return gettimestamp findcolumnx columnname   cal
catch   sqlexception se
throw se getsqlexception
public final string getstring string columnname  throws sqlexception
try
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     columnname
return getstring findcolumnx columnname
catch   sqlexception se
throw se getsqlexception
public final byte getbytes string columnname  throws sqlexception
try
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     columnname
return getbytes findcolumnx columnname
catch   sqlexception se
throw se getsqlexception
public final java io inputstream getbinarystream string columnname  throws sqlexception
try
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     columnname
return getbinarystream findcolumnx columnname
catch   sqlexception se
throw se getsqlexception
public final java io inputstream getasciistream string columnname  throws sqlexception
try
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     columnname
return getasciistream findcolumnx columnname
catch   sqlexception se
throw se getsqlexception
/** @deprecated */
public final java io inputstream getunicodestream string columnname  throws sqlexception
try
if  agent_ loggingenabled
agent_ logwriter_ tracedeprecatedentry this     columnname
return getunicodestream findcolumnx columnname
catch   sqlexception se
throw se getsqlexception
public final java io reader getcharacterstream string columnname  throws sqlexception
try
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     columnname
return getcharacterstream findcolumnx columnname
catch   sqlexception se
throw se getsqlexception
public final java sql blob getblob string columnname  throws sqlexception
try
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     columnname
return getblob findcolumnx columnname
catch   sqlexception se
throw se getsqlexception
public final java sql clob getclob string columnname  throws sqlexception
try
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     columnname
return getclob findcolumnx columnname
catch   sqlexception se
throw se getsqlexception
public final java sql array getarray string columnname  throws sqlexception
try
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     columnname
return getarray findcolumnx columnname
catch   sqlexception se
throw se getsqlexception
public final java sql ref getref string columnname  throws sqlexception
try
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     columnname
return getref findcolumnx columnname
catch   sqlexception se
throw se getsqlexception
public final object getobject string columnname  throws sqlexception
try
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     columnname
return getobject findcolumnx columnname
catch   sqlexception se
throw se getsqlexception
public final object getobject string columnname  java util map map  throws sqlexception
try
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     columnname  map
return getobject findcolumnx columnname   map
catch   sqlexception se
throw se getsqlexception
// ----------------advanced features -----------------------------------------
/**
* returns the first <code>sqlwarning</code> reported on this
* <code>resultset</code> object, or <code>null</code> if there
* are no warnings. subsequent warnings are chained on the
* returned object.
*
* @return the first <code>sqlwarning</code> in the chain, or
* <code>null</code> if no warnings are reported
* @exception sqlexception if a database error occurs or the
* result set is closed
*/
public final java sql sqlwarning getwarnings   throws sqlexception
try
checkforclosedresultset
catch  sqlexception se
throw se getsqlexception
if  agent_ loggingenabled
agent_ logwriter_ traceexit this     warnings_
return warnings_    null ? null   warnings_ getsqlwarning
/**
* clear all warnings on this <code>resultset</code> and make
* subsequent calls to <code>getwarnings()</code> return
* <code>null</code> until a new warning is reported.
*
* @exception sqlexception if a database error occurs or the
* result set is closed
*/
public final void clearwarnings   throws sqlexception
synchronized  connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this
try
checkforclosedresultset
catch  sqlexception se
throw se getsqlexception
clearwarningsx
// an untraced version of clearwarnings()
public final void clearwarningsx
warnings_   null
public string getcursorname   throws sqlexception
try
synchronized  connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this
checkforclosedresultset
if  generatedsection_    null
return     generatedsection_ getservercursorname
if  statement_ cursorname_    null      cursor name is not assigned yet
statement_ cursorname_   statement_ section_ getservercursorname
if  agent_ loggingenabled
agent_ logwriter_ traceexit this     statement_ cursorname_
return statement_ cursorname_
catch   sqlexception se
throw se getsqlexception
public java sql resultsetmetadata getmetadata   throws sqlexception
try
if  agent_ loggingenabled
agent_ logwriter_ traceentry this
java sql resultsetmetadata resultsetmetadata   getmetadatax
if  agent_ loggingenabled
agent_ logwriter_ traceexit this     resultsetmetadata
return resultsetmetadata
catch   sqlexception se
throw se getsqlexception
// used by dbmd
columnmetadata getmetadatax   throws sqlexception
checkforclosedresultset
return resultsetmetadata_
public final int findcolumn string columnname  throws sqlexception
try
synchronized  connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     columnname
int column   findcolumnx columnname
if  agent_ loggingenabled
agent_ logwriter_ traceexit this     column
return column
catch   sqlexception se
throw se getsqlexception
// an untraced version of findcolumn()
private final int findcolumnx string columnname  throws sqlexception
checkforclosedresultset
return resultsetmetadata_ findcolumnx columnname
//-------------------------- traversal/positioning ---------------------------
public boolean isbeforefirst   throws sqlexception
try
if  agent_ loggingenabled
agent_ logwriter_ traceentry this
checkforclosedresultset
checkthatresultsettypeisscrollable
// returns false if the resultset contains no rows.
boolean isbeforefirst   isbeforefirstx
if  agent_ loggingenabled
agent_ logwriter_ traceexit this     isbeforefirst
return isbeforefirst
catch   sqlexception se
throw se getsqlexception
private boolean isbeforefirstx   throws sqlexception
if  sensitivity_    sensitivity_sensitive_dynamic__
return isbeforefirst_
else
//return ((resultsetcontainsnorows()) ? false : (currentrowinrowset_ == -1));
return   currentrowinrowset_     1      resultsetcontainsnorows
public boolean isafterlast   throws sqlexception
try
if  agent_ loggingenabled
agent_ logwriter_ traceentry this
checkforclosedresultset
checkthatresultsettypeisscrollable
// returns false if the resultset contains no rows.
boolean isafterlast   isafterlastx
if  agent_ loggingenabled
agent_ logwriter_ traceexit this     isafterlast
return isafterlast
catch   sqlexception se
throw se getsqlexception
private boolean isafterlastx   throws sqlexception
if  sensitivity_    sensitivity_sensitive_dynamic__
return isafterlast_
else
return  resultsetcontainsnorows   ? false
firstrowinrowset_    currentrowinrowset_
currentrowinrowset_    lastrowinrowset_
lastrowinrowset_    0
absoluteposition_     maxrows_    0 ? rowcount_   1   maxrows_   1
public boolean isfirst   throws sqlexception
try
if  agent_ loggingenabled
agent_ logwriter_ traceentry this
checkforclosedresultset
checkthatresultsettypeisscrollable
// not necessary to get the rowcount_ since currentrowinrowset_ is initialized to -1,
// and it will not be changed if there is no rows in the resultset.
boolean isfirst   isfirstx
if  agent_ loggingenabled
agent_ logwriter_ traceexit this     isfirst
return isfirst
catch   sqlexception se
throw se getsqlexception
private boolean isfirstx
if  sensitivity_    sensitivity_sensitive_dynamic__
return isfirst_
return  firstrowinrowset_    1    currentrowinrowset_    0
public boolean islast   throws sqlexception
try
if  agent_ loggingenabled
agent_ logwriter_ traceentry this
checkforclosedresultset
checkthatresultsettypeisscrollable
// returns false if the resultset contains no rows.
boolean islast   islastx
if  agent_ loggingenabled
agent_ logwriter_ traceexit this     islast
return islast
catch   sqlexception se
throw se getsqlexception
private boolean islastx   throws sqlexception
if  sensitivity_    sensitivity_sensitive_dynamic__
return islast_
else
return  resultsetcontainsnorows   ? false
firstrowinrowset_   currentrowinrowset_     rowcount_
public void beforefirst   throws sqlexception
try
synchronized  connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this
checkforclosedresultset
checkthatresultsettypeisscrollable
clearwarningsx
beforefirstx
catch   sqlexception se
throw se getsqlexception
private void beforefirstx   throws sqlexception
resetrowsetflags
unusestreams
movetocurrentrowx
// this method has no effect if the result set has no rows.
// only send cntqry to position the cursor before first if
// resultset contains rows and it is not already before first, or
// if the cursor is a dynamic cursor.
if  sensitivity_    sensitivity_sensitive_dynamic__
resultsetcontainsnorows       isserverscursorpositionbeforefirst
movetobeforefirst
isbeforefirst_   true
setrowsetbeforefirstevent
cursor_ resetdatabuffer
resetrowsetsqlca
isvalidcursorposition_   false
public void afterlast   throws sqlexception
try
synchronized  connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this
checkforclosedresultset
checkthatresultsettypeisscrollable
clearwarningsx
afterlastx
catch   sqlexception se
throw se getsqlexception
private void afterlastx   throws sqlexception
resetrowsetflags
unusestreams
movetocurrentrowx
// this method has no effect if the result set has no rows.
// only send cntqry to position the cursor after last if
// resultset contains rows and it is not already after last, or
// if the cursor is a dynamic cursor.
if  sensitivity_    sensitivity_sensitive_dynamic__
resultsetcontainsnorows       isservercursorpositionafterlast
movetoafterlast
isafterlast_   true
setrowsetafterlastevent
cursor_ resetdatabuffer
resetrowsetsqlca
isvalidcursorposition_   false
public boolean first   throws sqlexception
try
synchronized  connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this
boolean isvalidcursorposition   firstx
if  agent_ loggingenabled
agent_ logwriter_ traceexit this     isvalidcursorposition
return isvalidcursorposition
catch   sqlexception se
throw se getsqlexception
private boolean firstx   throws sqlexception
checkforclosedresultset
checkthatresultsettypeisscrollable
clearwarningsx
movetocurrentrowx
wasnull_   resultset was_null_unset
// discard all previous updates when moving the cursor
resetupdatedcolumns
resetrowsetflags
unusestreams
// if first row is not in the current rowset, fetch the first rowset from the server.
// rowisincurrentrowset with orientation first will always return false for dynamic cursors.
if  rowisincurrentrowset 1  scrollorientation_first__
isvalidcursorposition_   true
currentrowinrowset_   0
else
checkandthrowreceivedqueryterminatingexception
isvalidcursorposition_   getfirstrowset
if  isvalidcursorposition_
updatecolumninfofromcache
isfirst_   true
// check if there is a non-null sqlca for the row for rowset cursors
checkrowsetsqlca
return isvalidcursorposition_
public boolean last   throws sqlexception
try
synchronized  connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this
boolean isvalidcursorposition   lastx
if  agent_ loggingenabled
agent_ logwriter_ traceexit this     isvalidcursorposition
return isvalidcursorposition
catch   sqlexception se
throw se getsqlexception
private boolean lastx   throws sqlexception
checkforclosedresultset
checkthatresultsettypeisscrollable
clearwarningsx
movetocurrentrowx
wasnull_   resultset was_null_unset
// discard all previous updates when moving the cursor
resetupdatedcolumns
resetrowsetflags
unusestreams
// only get the rowcount for static cursors.
if  rowcountisunknown
getrowcount
long row   rowcount_
if  sensitivity_    sensitivity_sensitive_dynamic__    maxrows_ > 0
if  rowcount_ > maxrows_
row   maxrows_
// rowisincurrentrowset with orientation last will always return false for dynamic cursors.
if  rowisincurrentrowset row  scrollorientation_last__
isvalidcursorposition_   true
currentrowinrowset_   row   firstrowinrowset_
else
checkandthrowreceivedqueryterminatingexception
isvalidcursorposition_   getlastrowset row
if  isvalidcursorposition_
updatecolumninfofromcache
islast_   true
// check if there is a non-null sqlca for the current row for rowset cursors
checkrowsetsqlca
return isvalidcursorposition_
public int getrow   throws sqlexception
try
synchronized  connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this
int row   getrowx
if  agent_ loggingenabled
agent_ logwriter_ traceexit this     row
return row
catch   sqlexception se
throw se getsqlexception
private int getrowx   throws sqlexception
checkforclosedresultset
long row
checkthatresultsetisnotdynamic
if  resultsettype_    java sql resultset type_forward_only
// for forward-only cursors, getrow() should return 0 if cursor is not on a valid row,
// i.e. afterlast.
row    cursor_ allrowsreceivedfromserver
cursor_ currentrowpositionisequaltonextrowposition    ? 0   cursor_ rowsread_
else
if  rowcountisunknown
// commented out here because the following method is called the first thing
// inside getrowcount();
//checkandthrowreceivedqueryterminatingexception();
getrowcount
if  rowcount_    0    currentrowinrowset_ < 0        currentrowinrowset_ > rowcount_
row   0
else
row   firstrowinrowset_   currentrowinrowset_
if  row > integer max_value
this accumulatewarning new sqlwarning agent_ logwriter_
new clientmessageid sqlstate number_of_rows_too_large_for_int
new long row
return  int  row
public boolean absolute int row  throws sqlexception
try
synchronized  connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     row
boolean isvalidcursorposition   absolutex row
if  agent_ loggingenabled
agent_ logwriter_ traceexit this     isvalidcursorposition
return isvalidcursorposition
catch   sqlexception se
throw se getsqlexception
public boolean absolutex int row  throws sqlexception
checkforclosedresultset
checkthatresultsettypeisscrollable
clearwarningsx
movetocurrentrowx
wasnull_   resultset was_null_unset
// discard all previous updates when moving the cursor.
resetupdatedcolumns
resetrowsetflags
unusestreams
if  maxrows_ > 0
// if "row" is positive and > maxrows, fetch afterlast
// else if "row" is negative, and abs(row) > maxrows, fetch beforefirst
if  row > 0    row > maxrows_
afterlastx
isvalidcursorposition_   false
return isvalidcursorposition_
else if  row <  0    java lang math abs row  > maxrows_
beforefirstx
isvalidcursorposition_   false
return isvalidcursorposition_
int fetchabsoluterow   0
if  rowcountisunknown
getrowcount
if  sensitivity_    sensitivity_sensitive_dynamic__
fetchabsoluterow   row
else
// calculate the positive absolute row number based on rowcount for static or insensitive cursors.
fetchabsoluterow    row >  0  ? row    int   rowcount_   row   1
// rowisincurrentrowset with orientation absolute will always return false for dynamic cursors.
if  rowisincurrentrowset fetchabsoluterow  scrollorientation_absolute__
isvalidcursorposition_   true
currentrowinrowset_   fetchabsoluterow   firstrowinrowset_
else
checkandthrowreceivedqueryterminatingexception
isvalidcursorposition_   getabsoluterowset fetchabsoluterow
if  isvalidcursorposition_
updatecolumninfofromcache
if  row    1
isfirst_   true
if  row     1
islast_   true
// check if there is a non-null sqlca for the row for rowset cursors
checkrowsetsqlca
return isvalidcursorposition_
public boolean relative int rows  throws sqlexception
try
synchronized  connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     rows
boolean isvalidcursorposition   relativex rows
if  agent_ loggingenabled
agent_ logwriter_ traceexit this     isvalidcursorposition
return isvalidcursorposition
catch   sqlexception se
throw se getsqlexception
private boolean relativex int rows  throws sqlexception
checkforclosedresultset
checkthatresultsettypeisscrollable
clearwarningsx
movetocurrentrowx
wasnull_   resultset was_null_unset
// discard all previous updates when moving the cursor.
resetupdatedcolumns
unusestreams
// if the resultset is empty, relative(n) is a null operation
if  resultsetcontainsnorows
isvalidcursorposition_   false
return isvalidcursorposition_
// relative(0) is a null-operation, but the retruned result is
// dependent on wether the cursorposition is on a row or not.
// scroll insensitive updatable should see own changes, so relative(0)
// has to refetch the row.
if  rows    0
if  resultsetconcurrency_    resultset concur_updatable
resultsettype_    resultset type_scroll_insensitive
// re-fetch currentrow
isvalidcursorposition_   getabsoluterowset absoluteposition_
else
if  isbeforefirstx      isafterlastx
isvalidcursorposition_   false
else
isvalidcursorposition_   true
return isvalidcursorposition_
// handle special cases when the cursor is before first or
// after last, since the following code assumes we ar on a
// valid cursor
if  isbeforefirstx
if  rows > 0
nextx
return relativex rows 1
else
isvalidcursorposition_   false
return isvalidcursorposition_
if  isafterlastx
if  rows < 0
previousx
return relativex rows 1
else
isvalidcursorposition_   false
return isvalidcursorposition_
// ok, now we are on a row and ready to do some real positioning.....
resetrowsetflags
// currentabsoluterownumber is used for static cursors only.
long currentabsoluterownumber   firstrowinrowset_   currentrowinrowset_
// if "rows" is positive, and currentrow+rows > maxrows, fetch afterlast.
// if "rows" is negative, and if the absolute value of "rows" is greater than
// the currentrow number, will fetch beforefirst anyways.  do not need to check
// for maxrows.
if  sensitivity_    sensitivity_sensitive_dynamic__
maxrows_ > 0    rows > 0    currentabsoluterownumber   rows > maxrows_
afterlastx
isvalidcursorposition_   false
return isvalidcursorposition_
if  rowisincurrentrowset currentabsoluterownumber   rows  scrollorientation_relative__
currentrowinrowset_    rows
isvalidcursorposition_   true
else
checkandthrowreceivedqueryterminatingexception
long rownumber
sensitivity_    sensitivity_sensitive_dynamic__  ? currentrowinrowset_   rows
currentabsoluterownumber   rows   absoluteposition_
if  maxrows_ < math abs rownumber     maxrows_    0
if  rownumber > 0
afterlastx
else
beforefirstx
isvalidcursorposition_   false
return isvalidcursorposition_
isvalidcursorposition_   getrelativerowset rownumber
if  isvalidcursorposition_
updatecolumninfofromcache
// check if there is a non-null sqlca for the row for rowset cursors
checkrowsetsqlca
return isvalidcursorposition_
public boolean previous   throws sqlexception
try
synchronized  connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this
boolean isvalidcursorposition   previousx
if  agent_ loggingenabled
agent_ logwriter_ traceexit this     isvalidcursorposition
return isvalidcursorposition
catch   sqlexception se
throw se getsqlexception
private boolean previousx   throws sqlexception
checkforclosedresultset
checkthatresultsettypeisscrollable
clearwarningsx
movetocurrentrowx
wasnull_   resultset was_null_unset
// discard all previous updates when moving the cursor.
resetupdatedcolumns
unusestreams
isbeforefirst_   false
isfirst_   false
if  rowisincurrentrowset firstrowinrowset_   currentrowinrowset_   1  scrollorientation_prior__
isvalidcursorposition_   true
currentrowinrowset_
else
checkandthrowreceivedqueryterminatingexception
isvalidcursorposition_   getpreviousrowset
if  isvalidcursorposition_
updatecolumninfofromcache
// check if there is a non-null sqlca for the row for rowset cursors
checkrowsetsqlca
if  isafterlast_
islast_   true
isafterlast_   false
else
return isvalidcursorposition_
if  sensitivity_    sensitivity_sensitive_dynamic__    maxrows_ > 0
firstrowinrowset_   currentrowinrowset_ > maxrows_
isvalidcursorposition_   false
// auto-close result set if this is the last row from server and return false
return isvalidcursorposition_
public void setfetchdirection int direction  throws sqlexception
try
synchronized  connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     direction
checkforclosedresultset
checkthatresultsettypeisscrollable
switch  direction
case java sql resultset fetch_forward
case java sql resultset fetch_reverse
case java sql resultset fetch_unknown
fetchdirection_   direction
break
default
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate invalid_fetch_direction
new integer direction
catch   sqlexception se
throw se getsqlexception
public int getfetchdirection   throws sqlexception
try
checkforclosedresultset
if  agent_ loggingenabled
agent_ logwriter_ traceexit this     fetchdirection_
return fetchdirection_
catch   sqlexception se
throw se getsqlexception
public void setfetchsize int rows  throws sqlexception
try
synchronized  connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     rows
checkforclosedresultset
if  rows < 0     maxrows_    0    rows > maxrows_
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate invalid_fetch_size
new integer rows   getsqlexception
setfetchsize_ rows
catch   sqlexception se
throw se getsqlexception
public int getfetchsize   throws sqlexception
try
if  agent_ loggingenabled
agent_ logwriter_ traceexit this     fetchsize_
checkforclosedresultset
return suggestedfetchsize_
catch   sqlexception se
throw se getsqlexception
public int gettype   throws sqlexception
try
if  agent_ loggingenabled
agent_ logwriter_ traceexit this     resultsettype_
checkforclosedresultset
return resultsettype_
catch   sqlexception se
throw se getsqlexception
public int getconcurrency   throws sqlexception
try
if  agent_ loggingenabled
agent_ logwriter_ traceexit this     resultsetconcurrency_
checkforclosedresultset
return resultsetconcurrency_
catch   sqlexception se
throw se getsqlexception
//----------------------------- updates --------------------------------------
public boolean rowupdated   throws sqlexception
try
checkforclosedresultset
checkpositionedonplainrow
boolean rowupdated   cursor_ getisrowupdated
if  agent_ loggingenabled
agent_ logwriter_ traceexit this     rowupdated
return rowupdated
catch   sqlexception se
throw se getsqlexception
public boolean rowinserted   throws sqlexception
try
checkforclosedresultset
checkpositionedonplainrow
boolean rowinserted   false
// not implemented for any result set type,
// so it always returns false.
if  agent_ loggingenabled
agent_ logwriter_ traceexit this     rowinserted
return rowinserted
catch   sqlexception se
throw se getsqlexception
public boolean rowdeleted   throws sqlexception
try
checkforclosedresultset
checkpositionedonplainrow
boolean rowdeleted
resultsettype_    resultset type_scroll_insensitive  ?
cursor_ getisupdatedeletehole     false
if  agent_ loggingenabled
agent_ logwriter_ traceexit this     rowdeleted
return rowdeleted
catch   sqlexception se
throw se getsqlexception
// --------------------------- update column methods -------------------------
public void updatenull int column  throws sqlexception
try
synchronized  connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     column
checkupdatepreconditions column
if   resultsetmetadata_ nullable_
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate lang_null_into_non_null
new integer column
updatecolumn column  null
catch   sqlexception se
throw se getsqlexception
public void updateboolean int column  boolean x  throws sqlexception
try
synchronized  connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     column  x
checkupdatepreconditions column
updatecolumn column  agent_ crossconverters_ setobject resultsetmetadata_ types_  x
catch   sqlexception se
throw se getsqlexception
public void updatebyte int column  byte x  throws sqlexception
try
synchronized  connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     column  x
checkupdatepreconditions column
updatecolumn column  agent_ crossconverters_ setobject resultsetmetadata_ types_  x
catch   sqlexception se
throw se getsqlexception
public void updateshort int column  short x  throws sqlexception
try
synchronized  connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     column  x
checkupdatepreconditions column
updatecolumn column  agent_ crossconverters_ setobject resultsetmetadata_ types_  x
catch   sqlexception se
throw se getsqlexception
public void updateint int column  int x  throws sqlexception
try
synchronized  connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     column  x
checkupdatepreconditions column
updatecolumn column  agent_ crossconverters_ setobject resultsetmetadata_ types_  x
catch   sqlexception se
throw se getsqlexception
public void updatelong int column  long x  throws sqlexception
try
synchronized  connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     column  x
checkupdatepreconditions column
updatecolumn column  agent_ crossconverters_ setobject resultsetmetadata_ types_  x
catch   sqlexception se
throw se getsqlexception
public void updatefloat int column  float x  throws sqlexception
try
synchronized  connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     column  x
checkupdatepreconditions column
updatecolumn column  agent_ crossconverters_ setobject resultsetmetadata_ types_  x
catch   sqlexception se
throw se getsqlexception
public void updatedouble int column  double x  throws sqlexception
try
synchronized  connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     column  x
checkupdatepreconditions column
updatecolumn column  agent_ crossconverters_ setobject resultsetmetadata_ types_  x
catch   sqlexception se
throw se getsqlexception
public void updatebigdecimal int column  java math bigdecimal x  throws sqlexception
try
synchronized  connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     column  x
checkupdatepreconditions column
updatecolumn column  agent_ crossconverters_ setobject resultsetmetadata_ types_  x
catch   sqlexception se
throw se getsqlexception
public void updatedate int column  java sql date x  throws sqlexception
try
synchronized  connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     column  x
checkupdatepreconditions column
updatecolumn column  agent_ crossconverters_ setobject resultsetmetadata_ types_  x
catch   sqlexception se
throw se getsqlexception
public void updatetime int column  java sql time x  throws sqlexception
try
synchronized  connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     column  x
checkupdatepreconditions column
updatecolumn column  agent_ crossconverters_ setobject resultsetmetadata_ types_  x
catch   sqlexception se
throw se getsqlexception
public void updatetimestamp int column  java sql timestamp x  throws sqlexception
try
synchronized  connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     column  x
checkupdatepreconditions column
updatecolumn column  agent_ crossconverters_ setobject resultsetmetadata_ types_  x
catch   sqlexception se
throw se getsqlexception
public void updatestring int column  string x  throws sqlexception
try
synchronized  connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     column  x
checkupdatepreconditions column
updatecolumn column  agent_ crossconverters_ setobject resultsetmetadata_ types_  x
catch   sqlexception se
throw se getsqlexception
public void updatebytes int column  byte x  throws sqlexception
try
synchronized  connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     column  x
checkupdatepreconditions column
updatecolumn column  agent_ crossconverters_ setobject resultsetmetadata_ types_  x
catch   sqlexception se
throw se getsqlexception
public void updatebinarystream int column
java io inputstream x
int length  throws sqlexception
try
synchronized  connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     column  x  length
checkupdatepreconditions column
updatecolumn column  agent_ crossconverters_ setobjectfrombinarystream resultsetmetadata_ types_  x  length
catch   sqlexception se
throw se getsqlexception
public void updateasciistream int column
java io inputstream x
int length  throws sqlexception
try
synchronized  connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     column  x  length
checkupdatepreconditions column
updatecolumn column  agent_ crossconverters_ setobjectfromcharacterstream resultsetmetadata_ types_  x     length
catch   sqlexception se
throw se getsqlexception
public void updatecharacterstream int column
java io reader x
int length  throws sqlexception
try
synchronized  connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     column  x  length
checkupdatepreconditions column
updatecolumn column  agent_ crossconverters_ setobject resultsetmetadata_ types_  x  length
catch   sqlexception se
throw se getsqlexception
public void updateobject int column  object x  int scale  throws sqlexception
try
synchronized  connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     column  x  scale
checkupdatepreconditions column
updatecolumn column  agent_ crossconverters_ setobject resultsetmetadata_ types_  x
catch   sqlexception se
throw se getsqlexception
public void updateobject int column  object x  throws sqlexception
try
synchronized  connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     column  x
checkupdatepreconditions column
updatecolumn column  agent_ crossconverters_ setobject resultsetmetadata_ types_  x
catch   sqlexception se
throw se getsqlexception
public void updatencharacterstream int columnindex  reader x
throws sqlexception
throw jdbc3methodnotsupported
public void updatenclob int columnindex  reader reader
throws sqlexception
throw jdbc3methodnotsupported
// ---------------------- update on column name methods ----------------------
public void updatenull string columnname  throws sqlexception
try
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     columnname
updatenull findcolumnx columnname
catch   sqlexception se
throw se getsqlexception
public void updateboolean string columnname  boolean x  throws sqlexception
try
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     columnname  x
updateboolean findcolumnx columnname   x
catch   sqlexception se
throw se getsqlexception
public void updatebyte string columnname  byte x  throws sqlexception
try
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     columnname  x
updatebyte findcolumnx columnname   x
catch   sqlexception se
throw se getsqlexception
public void updateshort string columnname  short x  throws sqlexception
try
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     columnname  x
updateshort findcolumnx columnname   x
catch   sqlexception se
throw se getsqlexception
public void updateint string columnname  int x  throws sqlexception
try
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     columnname  x
updateint findcolumnx columnname   x
catch   sqlexception se
throw se getsqlexception
public void updatelong string columnname  long x  throws sqlexception
try
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     columnname  x
updatelong findcolumnx columnname   x
catch   sqlexception se
throw se getsqlexception
public void updatefloat string columnname  float x  throws sqlexception
try
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     columnname  x
updatefloat findcolumnx columnname   x
catch   sqlexception se
throw se getsqlexception
public void updatedouble string columnname  double x  throws sqlexception
try
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     columnname  x
updatedouble findcolumnx columnname   x
catch   sqlexception se
throw se getsqlexception
public void updatebigdecimal string columnname  java math bigdecimal x  throws sqlexception
try
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     columnname  x
updatebigdecimal findcolumnx columnname   x
catch   sqlexception se
throw se getsqlexception
public void updatedate string columnname  java sql date x  throws sqlexception
try
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     columnname  x
updatedate findcolumnx columnname   x
catch   sqlexception se
throw se getsqlexception
public void updatetime string columnname  java sql time x  throws sqlexception
try
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     columnname  x
updatetime findcolumnx columnname   x
catch   sqlexception se
throw se getsqlexception
public void updatetimestamp string columnname  java sql timestamp x  throws sqlexception
try
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     columnname  x
updatetimestamp findcolumnx columnname   x
catch   sqlexception se
throw se getsqlexception
public void updatestring string columnname  string x  throws sqlexception
try
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     columnname  x
updatestring findcolumnx columnname   x
catch   sqlexception se
throw se getsqlexception
public void updatebytes string columnname  byte x  throws sqlexception
try
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     columnname  x
updatebytes findcolumnx columnname   x
catch   sqlexception se
throw se getsqlexception
public void updatebinarystream string columnname
java io inputstream x
int length  throws sqlexception
try
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     columnname  x  length
updatebinarystream findcolumnx columnname   x  length
catch   sqlexception se
throw se getsqlexception
public void updateasciistream string columnname
java io inputstream x
int length  throws sqlexception
try
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     columnname  x  length
updateasciistream findcolumnx columnname   x  length
catch   sqlexception se
throw se getsqlexception
public void updatecharacterstream string columnname
java io reader x
int length  throws sqlexception
try
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     columnname  x  length
updatecharacterstream findcolumnx columnname   x  length
catch   sqlexception se
throw se getsqlexception
public void updateobject string columnname  object x  int scale  throws sqlexception
try
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     columnname  x  scale
updateobject findcolumnx columnname   x  scale
catch   sqlexception se
throw se getsqlexception
public void updateobject string columnname  object x  throws sqlexception
try
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     columnname  x
updateobject findcolumnx columnname   x
catch   sqlexception se
throw se getsqlexception
public void updatencharacterstream string columnname  reader x
throws sqlexception
throw jdbc3methodnotsupported
public void updatenclob string columnname  reader reader
throws sqlexception
throw jdbc3methodnotsupported
// ---------------------------------------------------------------------------
public void insertrow   throws sqlexception
try
synchronized  connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this
insertrowx
catch   sqlexception se
throw se getsqlexception
private void insertrowx   throws sqlexception
checkforclosedresultset
checkforupdatableresultset
if  isoncurrentrow_
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate cursor_not_positioned_on_insert_row
// if not on a valid row, then do not accept updatexxx calls
if   isvalidcursorposition_
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate cursor_invalid_operation_at_current_position
// user might not be updating all the updatable columns selected in the
// select sql and hence every insertrow on the same resultset can be
// potentially different than the previous one. because of that, we
// should get a new prepared statement to do inserts every time
getpreparedstatementforinsert
// build the inputs array for the prepared statement for insert
int paramnumber   0
for  int i   0  i < updatedcolumns_ length  i
if  resultsetmetadata_ sqlxupdatable_    1
// since user may choose not to update all the columns in the
// select list, check first if the column has been updated
if  columnupdated_    true
paramnumber
// column is updated either if the updatedcolumns_ entry is not null,
// or if the updatedcolumns_ entry is null, but columnupdated is
// set to true, which means columns is updated to a null.
if  updatedcolumns_    null
updatedcolumns_    null    columnupdated_
preparedstatementforinsert_ setinput
paramnumber
updatedcolumns_
try
insert
catch  sqlexception e
throw e
public void updaterow   throws java sql sqlexception
try
synchronized  connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this
// if updatexxx were issued on the row before updaterow and
// the result set if forward only, then position the resultset
// to right before the next row after updaterow.
if  updaterowx       gettype
resultset type_forward_only
isvalidcursorposition_   false
catch   sqlexception se
throw se getsqlexception
//if no updatexxx were issued before this updaterow, then return false
private boolean updaterowx   throws sqlexception
checkforclosedresultset
checkforupdatableresultset
if  isoninsertrow_
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate no_current_row
//if not on a valid row, then do not accept updatexxx calls
if   isvalidcursorposition_
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate cursor_invalid_operation_at_current_position
// if no updatexxx has been called on this resultset object, then
// updatedcolumns_ will be null and hence no action required
if  updatedcolumns_    null
return false
// updatexxx has been called on this resultset object, but check if it
// has been called on the current row. if no column got updated on this
// current row, then just return.
boolean didanycolumngetupdated   false
for  int i 0  i < updatedcolumns_ length  i
if  columnupdated_
didanycolumngetupdated   true
break
if  didanycolumngetupdated    false
return false
// user might not be updating all the updatable columns selected in the
// select sql and hence every updaterow on the same resultset can be
// potentially different than the previous one. because of that, we
// should get a new prepared statement to do updates every time
getpreparedstatementforupdate
// build the inputs array for the prepared statement for update
int paramnumber   0
for  int i   0  i < updatedcolumns_ length  i
if  resultsetmetadata_ sqlxupdatable_    1
// since user may choose not to update all the columns in the
// select list, check first if the column has been updated
if  columnupdated_    false
continue
paramnumber
// column is updated either if the updatedcolumns_ entry is not null,
// or if the updatedcolumns_ entry is null, but columnupdated_ boolean is
// set to true, which means columns is updated to a null.
if  updatedcolumns_    null
updatedcolumns_    null    columnupdated_
preparedstatementforupdate_ setinput paramnumber  updatedcolumns_
else
// check if the original column is null.  calling crossconverters.setobject on a null
// column causes "data conversion" exception.
object originalobj
try
originalobj   getobject i   1
catch   sqlexception se
throw new sqlexception se
if  originalobj    null
preparedstatementforupdate_ setinput paramnumber  null
else
preparedstatementforupdate_ setinput paramnumber  agent_ crossconverters_ setobject resultsetmetadata_ types_  originalobj
// need to cancel updates if the actual update was not successful at the server.
// alternative is to check for updatecount_ in "positiontocurrentrowandupdate".
// cancelrowupdates if updatecount_ != 1
try
if  isrowsetcursor_
sensitivity_    sensitivity_sensitive_dynamic__
sensitivity_    sensitivity_sensitive_static__
update
else
positiontocurrentrowandupdate
finally
resetupdatedcolumns
// ensure the data is reset
if  resultsettype_    resultset type_scroll_insensitive
if  preparedstatementforupdate_ updatecount_ > 0
// this causes a round-trip
getabsoluterowset absoluteposition_
return true
public void deleterow   throws java sql sqlexception
try
synchronized  connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this
deleterowx
//the cursor is not positioned on the deleted row after deleterow.
//user needs to issue resultset.next to reposition the resultset
//on a valid row
isvalidcursorposition_   false
catch   sqlexception se
throw se getsqlexception
private void deleterowx   throws sqlexception
checkforclosedresultset
checkforupdatableresultset
// discard all previous updates
resetupdatedcolumns
if  isoninsertrow_
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate no_current_row
if  preparedstatementfordelete_    null
getpreparedstatementfordelete
if  isrowsetcursor_
sensitivity_    sensitivity_sensitive_dynamic__
sensitivity_    sensitivity_sensitive_static__
delete
else
positiontocurrentrowanddelete
if  resultsettype_    java sql resultset type_forward_only
cursor_ isupdatedeletehole_   true
else
if  preparedstatementfordelete_ updatecount_ > 0
cursor_ isupdatedeleteholecache_ set  int  currentrowinrowset_
cursor row_is_null
cursor_ isupdatedeletehole_
boolean  cursor_ isupdatedeleteholecache_
get  int  currentrowinrowset_   booleanvalue
public void refreshrow   throws sqlexception
try
synchronized  connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this
refreshrowx
catch   sqlexception se
throw se getsqlexception
private void refreshrowx   throws sqlexception
checkforclosedresultset
checkthatresultsettypeisscrollable
checkforupdatableresultset
if  isbeforefirstx      isafterlastx      isoninsertrow_
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate no_current_row
// this method does nothing if resultset is type_scroll_insensitive
if  resultsettype_    java sql resultset type_scroll_sensitive
isvalidcursorposition_   getrefreshrowset
try
cancelrowupdates
catch   sqlexception sqle
throw new sqlexception sqle
unusestreams
public void cancelrowupdates   throws sqlexception
try
synchronized  connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this
checkforclosedresultset
checkforupdatableresultset
if  isoninsertrow_
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate cursor_not_positioned_on_insert_row
// if not on a valid row, then do not accept cancelrowupdates call
if   isvalidcursorposition_
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate cursor_invalid_operation_at_current_position
// reset updated columns
resetupdatedcolumns
catch   sqlexception se
throw se getsqlexception
public void movetoinsertrow   throws sqlexception
try
synchronized  connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this
checkforclosedresultset
checkforupdatableresultset
resetupdatedcolumnsforinsert
isoninsertrow_   true
isoncurrentrow_   false
isvalidcursorposition_   true
catch   sqlexception se
throw se getsqlexception
public void movetocurrentrow   throws sqlexception
try
synchronized  connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this
checkforclosedresultset
checkforupdatableresultset
movetocurrentrowx
catch   sqlexception se
throw se getsqlexception
/**
* moves off the insert row if positioned there, and checks the current row
* for releasable lob locators if positioned on a valid data row.
*
* @throws sqlexception if releasing a lob locator fails
*/
private void movetocurrentrowx   throws sqlexception
if  isoninsertrow_
resetupdatedcolumns
isoninsertrow_   false
isoncurrentrow_   true
if  currentrowinrowset_ > 0
updatecolumninfofromcache
isvalidcursorposition_   true
if  isvalidcursorposition_
// isoninsertrow must be false here.
if  sanitymanager debug
sanitymanager assert  isoninsertrow_
lobstate checkcurrentrow cursor_
/**
* retrieves the <code>statement</code> object that produced this
* object, or <code>null</code> if the <code>resultset</code> was
* not produced by a <code>statement</code> object.
*
* @return the <code>statement</code> that produced this object or
* <code>null</code>
* @exception sqlexception if a database error occurs or the
* result set is closed
*/
public java sql statement getstatement   throws sqlexception
try
checkforclosedresultset
catch  sqlexception se
throw se getsqlexception
if  agent_ loggingenabled
agent_ logwriter_ traceexit this     statement_
if  statement_ getowner      null
return statement_ getowner
else
return statement_
//-------------------------- jdbc 3.0 ----------------------------------------
public java net url geturl int columnindex  throws sqlexception
throw jdbc3methodnotsupported
public java net url geturl string columnname  throws sqlexception
throw jdbc3methodnotsupported
public void updateref int columnindex  java sql ref x  throws sqlexception
throw jdbc3methodnotsupported
public void updateref string columnname  java sql ref x  throws sqlexception
throw jdbc3methodnotsupported
/**
* updates the designated column with a <code>java.sql.blob</code> value.
* the updater methods are used to update column values in the
* current row or the insert row.  the updater methods do not
* update the underlying database; instead the <code>updaterow</code> or
* <code>insertrow</code> methods are called to update the database.
*
* @param columnindex the first column is 1, the second is 2, ...
* @param x the new column value
* @throws sqlexception if the columnindex is not valid;
* if a database access error occurs;
* the result set concurrency is <code>concur_read_only</code>
* or this method is called on a closed result set
*/
public void updateblob int columnindex  java sql blob x  throws sqlexception
synchronized  connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this
columnindex  x
try
checkupdatepreconditions columnindex
updatecolumn columnindex
agent_ crossconverters_ setobject
resultsetmetadata_ types_
x
catch  sqlexception se
throw se getsqlexception
/**
* updates the designated column with a <code>java.sql.blob</code> value.
* the updater methods are used to update column values in the
* current row or the insert row.  the updater methods do not
* update the underlying database; instead the <code>updaterow</code> or
* <code>insertrow</code> methods are called to update the database.
*
* @param columnname the label for the column specified with the sql as
* clause. if the sql as clause was not specified, then the label is the
* name of the column
* @param x the new column value
* @throws sqlexception if the columnlabel is not valid;
* if a database access error occurs;
* the result set concurrency is <code>concur_read_only</code>
* or this method is called on a closed result set
*/
public void updateblob string columnname  java sql blob x  throws sqlexception
try
updateblob findcolumnx columnname   x
catch  sqlexception se
throw se getsqlexception
/**
* updates the designated column using the given input stream, which
* will have the specified number of bytes.
* the updater methods are used to update column values in the
* current row or the insert row.  the updater methods do not
* update the underlying database; instead the <code>updaterow</code> or
* <code>insertrow</code> methods are called to update the database.
*
* @param columnindex the first column is 1, the second is 2, ...
* @param x an object that contains the data to set the parameter
* value to.
* @param length the number of bytes in the parameter data.
* @exception sqlexception if the columnindex is not valid;
* if a database access error occurs;
* the result set concurrency is <code>concur_read_only</code>
* or this method is called on a closed result set
*/
public void updateblob int columnindex  inputstream x  long length
throws sqlexception
synchronized  connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this
columnindex  x   int length
try
checkupdatepreconditions columnindex
updatecolumn columnindex
agent_ crossconverters_ setobject
resultsetmetadata_ types_
new blob agent_  x   int length
catch  sqlexception se
throw se getsqlexception
/**
* updates the designated column using the given input stream, which
* will have the specified number of bytes.
* the updater methods are used to update column values in the
* current row or the insert row.  the updater methods do not
* update the underlying database; instead the <code>updaterow</code> or
* <code>insertrow</code> methods are called to update the database.
*
* @param columnname the label for the column specified with the
* sql as clause.  if the sql as clause was not specified, then the
* label is the name of the column
* @param x an object that contains the data to set the parameter
* value to.
* @param length the number of bytes in the parameter data.
* @exception sqlexception if the columnlabel is not valid;
* if a database access error occurs;
* the result set concurrency is <code>concur_read_only</code>
* or this method is called on a closed result set
*/
public void updateblob string columnname  inputstream x  long length
throws sqlexception
try
updateblob findcolumnx columnname   x  length
catch  sqlexception se
throw se getsqlexception
public void updatearray int columnindex  java sql array x  throws sqlexception
throw jdbc3methodnotsupported
public void updatearray string columnname  java sql array x  throws sqlexception
throw jdbc3methodnotsupported
public boolean repositionscrollableresultsetbeforejdbc1positionedupdatedelete   throws sqlexception
boolean repositionedcursor   false
// calculate the absoluteposition of the current row directly.
long rowtofetch   getrowuncast     absoluteposition_
// if rowtofetch is zero, already positioned on the current row
if  rowtofetch    0
writepositioningfetch_  generatedsection_    null  ? statement_ section_   generatedsection_
scrollorientation_relative__
rowtofetch
// adjust the absolute position on the client
absoluteposition_    rowtofetch
repositionedcursor   true
return repositionedcursor
//--------------------categorize the methods below -----------------
public void flowpositioningfetch int scrollorientation
int rowtofetch  throws disconnectexception
// need the try-catch block here because agent_.beginwritechain throws
// an sqlexception
try
agent_ beginwritechain statement_
writepositioningfetch_  generatedsection_    null  ? statement_ section_   generatedsection_
scrollorientation
rowtofetch
agent_ flow statement_
readpositioningfetch_
agent_ endreadchain
catch  sqlexception e
throw new disconnectexception agent_  e
protected void positiontocurrentrowandupdate   throws sqlexception
agent_ beginwritechain statement_
// calculate the position of the current row relative to the absolute position on server
long currentrowposrelativetoabsoluterowpos   getrowuncast     absoluteposition_
// if currentrowposrelativetoabsoluterowpos is zero, already on the current row
// reposition only if a commit has been sent
// do not reposition forward-only cursors
if  resultsettype_    java sql resultset type_forward_only
currentrowposrelativetoabsoluterowpos    0
currentrowposrelativetoabsoluterowpos    0    cursorunpositionedonserver_
writepositioningfetch_  generatedsection_    null  ? statement_ section_   generatedsection_
scrollorientation_relative__
currentrowposrelativetoabsoluterowpos
// re-prepare the update statement if repreparing is needed after a commit.
if   preparedstatementforupdate_ openonserver_
preparedstatementforupdate_ materialpreparedstatement_ writeprepare_ preparedstatementforupdate_ sql_
preparedstatementforupdate_ section_
try
writeupdaterow false
catch   sqlexception se
throw new sqlexception se
agent_ flow statement_
// adjust the absolute position on the client
absoluteposition_    currentrowposrelativetoabsoluterowpos
if  resultsettype_    java sql resultset type_forward_only
currentrowposrelativetoabsoluterowpos    0
currentrowposrelativetoabsoluterowpos    0    cursorunpositionedonserver_
readpositioningfetch_
cursorunpositionedonserver_   false
listentounitofwork
// read prepare replies if the update statement is re-prepared after a commit.
if   preparedstatementforupdate_ openonserver_
preparedstatementforupdate_ materialpreparedstatement_ readprepare_
readupdaterow
agent_ endreadchain
protected void insert   throws sqlexception
agent_ beginwritechain statement_
// re-prepare the insert statement if repreparing is needed after a commit.
if   preparedstatementforinsert_ openonserver_
preparedstatementforinsert_ materialpreparedstatement_ writeprepare_
preparedstatementforinsert_ sql_
preparedstatementforinsert_ section_
try
writeinsertrow false
catch  sqlexception se
throw new sqlexception se
agent_ flow statement_
// read prepare replies if the update statement is re-prepared after a commit.
if   preparedstatementforinsert_ openonserver_
preparedstatementforinsert_ materialpreparedstatement_ readprepare_
readinsertrow
agent_ endreadchain
protected void update   throws sqlexception
agent_ beginwritechain statement_
// re-prepare the update statement if repreparing is needed after a commit.
if   preparedstatementforupdate_ openonserver_
preparedstatementforupdate_ materialpreparedstatement_ writeprepare_ preparedstatementforupdate_ sql_
preparedstatementforupdate_ section_
if  isrowsetcursor_
try
preparedstatementforupdate_ setint updatedcolumns_ length   1   int   currentrowinrowset_   1
catch   sqlexception se
throw new sqlexception se
boolean chainautocommit   connection_ willautocommitgenerateflow
try
writeupdaterow chainautocommit
catch  sqlexception se
throw new sqlexception se
if  chainautocommit
connection_ writecommit
agent_ flow statement_
// read prepare replies if the update statement is re-prepared after a commit.
if   preparedstatementforupdate_ openonserver_
preparedstatementforupdate_ materialpreparedstatement_ readprepare_
readupdaterow
if  chainautocommit
connection_ readcommit
agent_ endreadchain
protected void positiontocurrentrowanddelete   throws sqlexception
agent_ beginwritechain statement_
// calculate the position of the current row relative to the absolute position on server
long currentrowposrelativetoabsoluterowpos   getrowuncast     absoluteposition_
// if rowtofetch is zero, already positioned on the current row
// do not reposition forward-only cursors.
if  resultsettype_    java sql resultset type_forward_only
currentrowposrelativetoabsoluterowpos    0
currentrowposrelativetoabsoluterowpos    0    cursorunpositionedonserver_
writepositioningfetch_  generatedsection_    null  ? statement_ section_   generatedsection_
scrollorientation_relative__
currentrowposrelativetoabsoluterowpos
// re-prepare the update statement if repreparing is needed after a commit.
if   preparedstatementfordelete_ openonserver_
preparedstatementfordelete_ materialpreparedstatement_ writeprepare_ preparedstatementfordelete_ sql_
preparedstatementfordelete_ section_
try
writedeleterow
catch   sqlexception sqle
throw new sqlexception sqle
agent_ flow statement_
// adjust the absolute position on the client.
absoluteposition_    currentrowposrelativetoabsoluterowpos
if  resultsettype_    java sql resultset type_forward_only
currentrowposrelativetoabsoluterowpos    0
currentrowposrelativetoabsoluterowpos    0    cursorunpositionedonserver_
readpositioningfetch_
cursorunpositionedonserver_   false
listentounitofwork
// read prepare replies if the update statement is re-prepared after a commit.
if   preparedstatementfordelete_ openonserver_
preparedstatementfordelete_ materialpreparedstatement_ readprepare_
readdeleterow
agent_ endreadchain
protected void delete   throws sqlexception
try
agent_ beginwritechain statement_
// re-prepare the update statement if repreparing is needed after a commit.
if   preparedstatementfordelete_ openonserver_
preparedstatementfordelete_ materialpreparedstatement_ writeprepare_ preparedstatementfordelete_ sql_
preparedstatementfordelete_ section_
if  isrowsetcursor_
preparedstatementfordelete_ setint 1   int   currentrowinrowset_   1
writedeleterow
if  connection_ autocommit_
connection_ writeautocommit
agent_ flow statement_
// read prepare replies if the update statement is re-prepared after a commit.
if   preparedstatementfordelete_ openonserver_
preparedstatementfordelete_ materialpreparedstatement_ readprepare_
readdeleterow
if  connection_ autocommit_
connection_ readautocommit
agent_ endreadchain
catch   sqlexception se
throw new sqlexception se
// resets all rowset related flags.
// called by getrowset() from material layer.
public void setrowsetafterlastevent   throws sqlexception
firstrowinrowset_   0
lastrowinrowset_   0
absoluteposition_    maxrows_    0  ? rowcount_   1   maxrows_   1
currentrowinrowset_   0
rowsreceivedincurrentrowset_   0
public void setrowsetbeforefirstevent   throws sqlexception
firstrowinrowset_   0
lastrowinrowset_   0
absoluteposition_   0
currentrowinrowset_    1
rowsreceivedincurrentrowset_   0
public void setrowsetnorowsevent
rowcount_   0
firstrowinrowset_   0
lastrowinrowset_   0
absoluteposition_   0
currentrowinrowset_    1
rowsreceivedincurrentrowset_   0
private boolean isserverscursorpositionbeforefirst   throws sqlexception
return  isbeforefirstx      firstrowinrowset_    0    lastrowinrowset_    0    absoluteposition_    0
private boolean isservercursorpositionafterlast   throws sqlexception
return  absoluteposition_     rowcount_   1
public void setvalidcursorposition boolean isvalidcursorposition
isvalidcursorposition_   isvalidcursorposition
protected void movetoafterlast   throws disconnectexception
flowpositioningfetch resultset scrollorientation_after__  0
// positions the cursor at before the first row.
protected void movetobeforefirst   throws disconnectexception
flowpositioningfetch resultset scrollorientation_before__  0
// analyze the error handling here, and whether or not can be pushed to common
// can we make this the common layer fetch method
// called by the read/skip fdoca bytes methods in the net
// whenever data reads exhaust the internal buffer used by this reply
public void flowfetch   throws disconnectexception  sqlexception
agent_ beginwritechain statement_
writefetch_  generatedsection_    null  ? statement_ section_   generatedsection_
agent_ flow statement_
readfetch_
agent_ endreadchain
public void writeinsertrow boolean chainedwritesfollowingsetlob  throws sqlexception
try
preparedstatementforinsert_ materialpreparedstatement_ writeexecute_
preparedstatementforinsert_ section_
preparedstatementforinsert_ parametermetadata_
preparedstatementforinsert_ parameters_
preparedstatementforinsert_ parametermetadata_    null ? 0
preparedstatementforinsert_ parametermetadata_ getcolumncount
false     false means we're not expecting output
chainedwritesfollowingsetlob       chaining after the execute
catch   sqlexception se
throw se getsqlexception
public void writeupdaterow boolean chainedwritesfollowingsetlob  throws sqlexception
try
preparedstatementforupdate_ materialpreparedstatement_ writeexecute_ preparedstatementforupdate_ section_
preparedstatementforupdate_ parametermetadata_
preparedstatementforupdate_ parameters_
preparedstatementforupdate_ parametermetadata_ getcolumncount
false     false means we're not expecting output
chainedwritesfollowingsetlob       chaining after the execute
catch   sqlexception se
throw se getsqlexception
public void writedeleterow   throws sqlexception
try
if  isrowsetcursor_
preparedstatementfordelete_ materialpreparedstatement_ writeexecute_ preparedstatementfordelete_ section_
preparedstatementfordelete_ parametermetadata_
preparedstatementfordelete_ parameters_
preparedstatementfordelete_ parametermetadata_ getcolumncount
false     false means we're not expecting output
false       false means we don't chain anything after the execute
else
preparedstatementfordelete_ materialpreparedstatement_ writeexecute_ preparedstatementfordelete_ section_
null     do not need parametermetadata since there is no input
null     no inputs
0     number of input columns is 0 for positioned delete
false     false means we're not expecting output
false       false means we don't chain anything after the execute
catch   sqlexception se
throw se getsqlexception
public void readinsertrow   throws disconnectexception  sqlexception
preparedstatementforinsert_ materialpreparedstatement_ readexecute_
public void readupdaterow   throws disconnectexception  sqlexception
preparedstatementforupdate_ materialpreparedstatement_ readexecute_
accumulatewarning preparedstatementforupdate_ getsqlwarnings
public void readdeleterow   throws disconnectexception  sqlexception
preparedstatementfordelete_ materialpreparedstatement_ readexecute_
accumulatewarning preparedstatementfordelete_ getsqlwarnings
//------------------material layer event callback methods-----------------------
boolean listentounitofwork_   false
public void listentounitofwork
if   listentounitofwork_
listentounitofwork_   true
connection_ commitandrollbacklisteners_ put this  null
public void completelocalcommit java util iterator listeneriterator
cursorunpositionedonserver_   true
lobstate discardstate       locators released on server side
markautocommitted
if   cursorhold_
// only non-held cursors need to be closed at commit
markclosed
nulloutreferenceinstatement
// remove from listener list
listeneriterator remove
listentounitofwork_   false
public void completelocalrollback java util iterator listeneriterator
lobstate discardstate       locators released on server side
markautocommitted
// all cursors need to be closed at rollback
markclosed
nulloutreferenceinstatement
// remove from listener list
listeneriterator remove
listentounitofwork_   false
private void nulloutreferenceinstatement
if  statement_ resultset_    this
statement_ resultset_   null
/*
* aug 10, 2005: do we really only want to only null out the one resultset?
* the only time this method is called is from completelocalcommit or
* completelocalrollback, both of which affect *all* resultsets
*/
if  statement_ resultsetlist_    null
for  int i   0  i < statement_ resultsetlist_ length  i
if  statement_ resultsetlist_    this
statement_ resultsetlist_   null
/**
* mark this resultset as closed. the resultset will not be
* removed from the commit and rollback listeners list in
* <code>org.apache.derby.client.am.connection</code>.
*/
void markclosed
markclosed false
/**
* mark this resultset as closed.
*
* @param removelistener if true the resultset will be removed
* from the commit and rollback listeners list in
* <code>org.apache.derby.client.am.connection</code>.
*/
void markclosed boolean removelistener
openonclient_   false
openonserver_   false
statement_ resetcursornameandremovefromwherecurrentofmappings       for select   for update queries
statement_ removeclientcursornamefromcache
markpositionedupdatedeletepreparedstatementsclosed
if  removelistener
connection_ commitandrollbacklisteners_ remove this
/**
* mark this resultset as closed on the server.
*/
public void markclosedonserver
openonserver_   false
void markautocommitted
autocommitted_   true
// the query was ended at the server because all rows have been retrieved.
public void earlyclosecomplete sqlca sqlca
markclosedonserver
queryterminatingsqlca_   sqlca
cursor_ setallrowsreceivedfromserver true
public int completesqlca sqlca sqlca
if  sqlca    null
return 0
int sqlcode   sqlca getsqlcode
if  sqlcode    100    sqlcode    20237
cursor_ setallrowsreceivedfromserver true
else if  sqlcode < 0
connection_ agent_ accumulatereadexception new sqlexception agent_ logwriter_  sqlca
else if  sqlcode > 0
accumulatewarning new sqlwarning agent_ logwriter_  sqlca
return sqlcode
// set rowcount.
public void setrowcountevent long rowcount  throws disconnectexception
// only set the row count if it's unknown, to prevent clobbering of a valid value.
if  rowcount_     1
rowcount_   rowcount
// this method will not work if e is chained.
// it is assumed that e is a single warning and is not chained.
public void accumulatewarning sqlwarning e
if  warnings_    null
warnings_   e
else
warnings_ setnextexception e
//-------------------------------helper methods-------------------------------
protected boolean rowcountisunknown
if  sensitivity_    sensitivity_sensitive_dynamic__
return false
else
return rowcount_     1
protected boolean rowcountisknown
return rowcount_     1
private void updatecolumn int column  object value
if  updatedcolumns_    null
updatedcolumns_   new object
if  columnupdated_    null
columnupdated_   new boolean
updatedcolumns_   value
columnupdated_   true
/*
* builds the insert statement that will be used well calling insertrow
*
* if no values have been supplied for a column, it will be set
* to the column's default value, if any.
* if no default value had been defined, the default value of a
* nullable column is set to null.
*/
private string buildinsertstring   throws sqlexception
int column
boolean foundoneupdatedcolumnalready   false
stringbuffer insertsql   new stringbuffer
stringbuffer valuessql   new stringbuffer
insertsql append gettablename
insertsql append
for  column   1  column <  resultsetmetadata_ columns_  column
if  foundoneupdatedcolumnalready
insertsql append
valuessql append
//using quotes around the column name to preserve case sensitivity
try
insertsql append quotesqlidentifier
resultsetmetadata_ getcolumnname column
catch   sqlexception sqle
throw new sqlexception sqle
if  columnupdated_
valuessql append
else
valuessql append
foundoneupdatedcolumnalready   true
insertsql append
valuessql append
insertsql append valuessql tostring
return insertsql tostring
private string buildupdatestring   throws sqlexception
int column
int numcolumns   0
// for derby, eg update t1 set c1=?, c2=? where current of cursorname
boolean foundoneupdatedcolumnalready   false
string updatestring       gettablename
for  column   1  column <  resultsetmetadata_ columns_  column
if  columnupdated_
if  foundoneupdatedcolumnalready
updatestring
try
updatestring    quotesqlidentifier
resultsetmetadata_ getcolumnname column
catch   sqlexception sqle
throw new sqlexception sqle
numcolumns
foundoneupdatedcolumnalready   true
if  foundoneupdatedcolumnalready    false    no columns updated on this row
return null
updatestring   updatestring       getservercursorname
if  isrowsetcursor_
updatestring
return updatestring
private string builddeletestring   throws sqlexception
string deletestring
// build the delete string using the server's cursor name
deletestring     gettablename
if  isrowsetcursor_
deletestring
return deletestring
//go through all the columns in the select list to see if we can find a
//base table column and use that column's metadata to get the table name
//but, it is possible to have a sql of the form
//select 1,2 from t1 for update
//this sql will not be a good candidate for updatexxx calls(both in embedded
//and network server mode) since there is no updatable column in the select
//list. but a user can use a sql like that to issue deleterow. in network
//server mode though, this sql will fail for deleterow because none of the
//columns are from base table and w/o a base table column, there is no way
//to find the table name for delete
private string gettablename   throws sqlexception
string tablename
int basetablecolumn   0
int totalcolumns
try
totalcolumns   resultsetmetadata_ getcolumncount
catch   sqlexception sqle
throw new sqlexception sqle
for    basetablecolumn < totalcolumns  basetablecolumn
if  resultsetmetadata_ sqlxbasename_    null
break
//if following true, then there are no base table columns in select list
if  basetablecolumn    totalcolumns
basetablecolumn   0
//dervied column like select 2 from t1, has null schema and table name
if  resultsetmetadata_ sqlxschema_    null     resultsetmetadata_ sqlxschema_ equals
tablename    quotesqlidentifier
resultsetmetadata_ sqlxschema_
if  resultsetmetadata_ sqlxbasename_    null
tablename    quotesqlidentifier
resultsetmetadata_ sqlxbasename_
return tablename
private string quotesqlidentifier string orgvalue
int i   0  start   0
string retvalue
while   i   orgvalue indexof  "  start    1  > 0
retvalue    orgvalue substring start  i     "
start   i
retvalue    orgvalue substring start  orgvalue length
return
private string getservercursorname   throws sqlexception
return statement_ section_ getservercursorname
private void getpreparedstatementforinsert   throws sqlexception
// each column is associated with a tablename in the extended describe info.
string insertstring   buildinsertstring
try
preparedstatementforinsert_    preparedstatement statement_ connection_
preparestatement insertstring
catch   sqlexception sqle
throw new sqlexception sqle
private void getpreparedstatementforupdate   throws sqlexception
// each column is associated with a tablename in the extended describe info.
string updatestring   buildupdatestring
if  updatestring    null
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate cursor_no_update_calls_on_current_row
preparedstatementforupdate_
statement_ connection_ preparepositionedupdatestatement updatestring
statement_ section_ getpositionedupdatesection
private void getpreparedstatementfordelete   throws sqlexception
// each column is associated with a tablename in the extended describe info.
string deletestring   builddeletestring
preparedstatementfordelete_
statement_ connection_ preparepositionedupdatestatement deletestring
statement_ section_ getpositionedupdatesection        update section
private final void resetupdatedcolumnsforinsert
// initialize updatecolumns with nulls for all columns
if  updatedcolumns_    null
updatedcolumns_   new object
if  columnupdated_    null
columnupdated_   new boolean
for  int i   0  i < updatedcolumns_ length  i
updatecolumn i 1  null
for  int i   0  i < columnupdated_ length  i
columnupdated_   false
private final void resetupdatedcolumns
if  updatedcolumns_    null
for  int i   0  i < updatedcolumns_ length  i
updatedcolumns_   null
if  columnupdated_    null
for  int i   0  i < columnupdated_ length  i
columnupdated_   false
private final long getrowuncast
return firstrowinrowset_   currentrowinrowset_
private final void checkgetterpreconditions int column  throws sqlexception
checkforclosedresultset
checkforvalidcolumnindex column
checkforvalidcursorposition
private final void checkupdatepreconditions int column
string operation
throws sqlexception
checkforclosedresultset
checkforvalidcolumnindex column
checkforupdatableresultset operation
if   isoncurrentrow_     isoninsertrow_
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate cursor_not_on_current_or_insert_row
if  resultsetmetadata_ sqlxupdatable_    null    resultsetmetadata_ sqlxupdatable_    1
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate cursor_column_not_updatable
//if not on a valid row, then do not accept updatexxx calls
if   isvalidcursorposition_
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate cursor_invalid_operation_at_current_position
final void checkforvalidcolumnindex int column  throws sqlexception
if  column < 1    column > resultsetmetadata_ columns_
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate lang_invalid_column_position
new integer column   new integer resultsetmetadata_ columns_
protected final void checkforclosedresultset   throws sqlexception
if   openonclient_
agent_ checkfordeferredexceptions
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate client_result_set_not_open
else
agent_ checkfordeferredexceptions
private final void checkforupdatableresultset string operation
throws sqlexception
if  resultsetconcurrency_    java sql resultset concur_read_only
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate updatable_resultset_api_disallowed
operation
private final void checkforvalidcursorposition   throws sqlexception
if   isvalidcursorposition_
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate cursor_invalid_operation_at_current_position
private final void checkpositionedonplainrow   throws sqlexception
if  isoninsertrow_     isvalidcursorposition_
throw new sqlexception
agent_ logwriter_
new clientmessageid sqlstate no_current_row
private final void checkthatresultsettypeisscrollable   throws sqlexception
if  resultsettype_    java sql resultset type_forward_only
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate cursor_must_be_scrollable
private final void checkthatresultsetisnotdynamic   throws sqlexception
if  sensitivity_    sensitivity_sensitive_dynamic__
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate cursor_invalid_for_sensitive_dynamic
private boolean resultsetcontainsnorows   throws sqlexception
if  rowcountisunknown
getrowcount
return  rowcount_    0
private boolean rowisincurrentrowset long rownumber  int orientation  throws sqlexception
if  sensitivity_    sensitivity_sensitive_dynamic__
switch  orientation
case scrollorientation_next__
if  isafterlast_
return false
else
return  currentrowinrowset_   1 < rowsreceivedincurrentrowset_
case scrollorientation_prior__
if  isbeforefirst_
return false
else
return  currentrowinrowset_   1 >  0
case scrollorientation_relative__
return  rownumber < rowsreceivedincurrentrowset_    rownumber >  0
// for dynamic cursors, we will not be able to check whether a row is in the cache for
// first, absolute, and last
case scrollorientation_first__
case scrollorientation_absolute__
case scrollorientation_last__
return false
default
return false
else
return rowisincurrentrowset rownumber
private boolean rowisincurrentrowset long rownumber  throws sqlexception
// firstrowinrowset_ is equal to lastrowinrowset_ if there is only one row
// in the rowset or if fetchsize_ is 1.  however, return false if firstrowinrowset_
// is equal to lastrowinrowset_ and also equal to zero which means there is no
// valid row in the current rowset.
if  firstrowinrowset_    lastrowinrowset_    firstrowinrowset_    0
return false
if  rownumber >  firstrowinrowset_
rownumber <  lastrowinrowset_
return true
else
return false
private void markpositionedupdatedeletepreparedstatementsclosed
if  preparedstatementforupdate_    null
preparedstatementforupdate_ markclosed
preparedstatementforupdate_   null
if  preparedstatementfordelete_    null
preparedstatementfordelete_ markclosed
preparedstatementfordelete_   null
protected void updatecolumninfofromcache
// currentrowinrowset_ should never be bigger than the max value of an int,
// because we have a driver imposed limit of fetch size 1000.
cursor_ columndataposition_
int  cursor_ columndatapositioncache_ get  int  currentrowinrowset_
cursor_ columndatacomputedlength_
int  cursor_ columndatalengthcache_ get  int  currentrowinrowset_
cursor_ isnull_
boolean  cursor_ columndataisnullcache_ get  int  currentrowinrowset_
cursor_ isupdatedeletehole_     boolean  cursor_ isupdatedeleteholecache_ get  int  currentrowinrowset_   booleanvalue
protected final void checkandthrowreceivedqueryterminatingexception   throws sqlexception
// if we are in a split row, and before sending cntqry, check whether an endqryrm
// has been received.
if   openonserver_
sqlexception sqlexception   null
int sqlcode   org apache derby client am utils getsqlcodefromsqlca queryterminatingsqlca_
if  sqlcode < 0
sqlexception   new sqlexception agent_ logwriter_  queryterminatingsqlca_
else if  sqlcode > 0    sqlcode    100
accumulatewarning new sqlwarning agent_ logwriter_  queryterminatingsqlca_
try
closex       the auto commit logic is in closex
catch  sqlexception e
sqlexception setnextexception e
if  sqlexception    null
throw sqlexception
public void parsescrollablerowset   throws sqlexception
// modified check from qrydtareturned to cursor.databufferhasunprocessedata()
if  cursor_ databufferhasunprocesseddata      scrollable_
parserowset_
adjustfirstrowset
// this method is only called after open query to parse out the very first rowset
// received.
if  cursor_ allrowsreceivedfromserver
rowsreceivedincurrentrowset_    0
setrowsetnorowsevent
//  determines if a cursor is a:
//    return to client - not to be read by the stored procedure only by client
//    return to caller - only calling jsp can read it, not the client
public byte getrsreturnability
return rsreturnability_
public void setrsreturnability byte rsreturnability       valid return type set it
if   rsreturnability    ddm_return_caller
rsreturnability    ddm_return_client
rsreturnability_   rsreturnability
else      unknown return type  set ddm_return_caller
rsreturnability_   ddm_return_caller
//------------------------------------------------------------------------------
// push the getxxxrowset_() methods up from the material layers
//------------------------------------------------------------------------------
// this method is called to retrieve the total number of rows in the result set
// and then reposition the cursor to where it was before.
// the rowcount_ comes back in the sqlca in fields sqlerrd1 and sqlerrd2 when
// sqlcode is +100.
protected void getrowcount   throws sqlexception
// if already received an endqryrm at open, check sqlcode and throw an exception
checkandthrowreceivedqueryterminatingexception
agent_ beginwritechain statement_
section section    generatedsection_    null  ? statement_ section_   generatedsection_
// send the first cntqry to place cursor after last to retrieve the rowcount_.
writepositioningfetch_ section  scrollorientation_after__  0
// if this is a non-dynamic rowset cursor, reposition the cursor to the first row in rowset
// after the fetch after.  cache info and cursor positions on the client should not change.
if  isrowsetcursor_    sensitivity_    sensitivity_sensitive_dynamic__    firstrowinrowset_    0
writepositioningfetch_ section  scrollorientation_absolute__  firstrowinrowset_
agent_ flow statement_
readpositioningfetch_
if  isrowsetcursor_    sensitivity_    sensitivity_sensitive_dynamic__    firstrowinrowset_    0
readpositioningfetch_
agent_ endreadchain
// if rowcount_ is not updated, check for exceptions
if  rowcount_     1
checkandthrowreceivedqueryterminatingexception
if  isrowsetcursor_    sensitivity_    sensitivity_sensitive_dynamic__    firstrowinrowset_    0
absoluteposition_   firstrowinrowset_
else
absoluteposition_    maxrows_    0  ? rowcount_   1   maxrows_   1
private void flowgetrowset int orientation  long rownumber  throws sqlexception
// clear lobs before fetching rows
cursor_ clearlobdata_
cursor_ resetdatabuffer
agent_ beginwritechain statement_
writescrollablefetch_  generatedsection_    null  ? statement_ section_   generatedsection_
fetchsize_
orientation
rownumber
true       true means to discard any pending partial
// row and pending query blocks
// reset the number of rows received to 0.
// cannot use rowsread_ here because this is reset every time a new rowset is fetched
rowsreceivedincurrentrowset_   0
agent_ flow statement_
readscrollablefetch_
agent_ endreadchain
private boolean getnextrowset   throws sqlexception
// for rowset cursors or dynamic, non-rowset cursors
if  isrowsetcursor_    sensitivity_    sensitivity_sensitive_dynamic__
// check if the next row contains a +100 before fetching from the server.
// since index starts from 0, the actual row number for the current row is (currentrowinrowset_+1)
// and the actual row number for the next row is (currentrowinrowset_+2)
int sqlcode   checkrowsetsqlca  int  currentrowinrowset_   2
if  sqlcode    100
isafterlast_   true
return false
flowgetrowset scrollorientation_next__  0
else
// for all other cursors:
//   sensitive static, insensitive, non-rowset cursors
// if already afterlast, return false
// if already on the last row and have received a +100, do not fetch again, return false
if  resultsetcontainsnorows      isafterlastx
return false
else if  firstrowinrowset_   currentrowinrowset_    lastrowinrowset_
cursor_ allrowsreceivedfromserver
isafterlast_   true
setrowsetafterlastevent
return false
// rownumber to fetch is 1 if absolute position is equal to the last row
// in the rowset
long rownumber   1
int orientation   scrollorientation_relative__
// normally absolute position is equal to last row in the rowset, but in cases
// of previous "update where current of"s, absolute position may be somewhere
// else in the current rowset, thus rownumber needs to be recalculated based on
// where in the rowset the absolute position is.
if  absoluteposition_ < lastrowinrowset_
rownumber   lastrowinrowset_   absoluteposition_   1
absoluteposition_   lastrowinrowset_
// the following case happens when a getrowcount() is called and we flow a fetch after
// to get the rowcount.
else if  absoluteposition_ > lastrowinrowset_
rownumber   lastrowinrowset_   1
orientation   scrollorientation_absolute__
flowgetrowset orientation  rownumber
parserowset_
// if no row was received but received sqlcode +100, then the cursor is
// positioned after last.
if  rowsreceivedincurrentrowset_    0
cursor_ allrowsreceivedfromserver
isafterlast_   true
setrowsetafterlastevent
return false
// adjust the cursor positions for sensitive static or insensitive cursors only
if  sensitivity_    sensitivity_sensitive_dynamic__
adjustnextrowset
currentrowinrowset_   0
return true
private void adjustnextrowset
firstrowinrowset_   lastrowinrowset_   1
lastrowinrowset_   lastrowinrowset_   rowsreceivedincurrentrowset_
setabsolutepositionbasedonallrowsreceived
//currentrowinrowset_ = 0;
private boolean getpreviousrowset   throws sqlexception
int orientation   scrollorientation_relative__
long rownumber   0
boolean isafterlast   false
// for rowset cursors or dynamic, non-rowset cursors
if  isrowsetcursor_    sensitivity_    sensitivity_sensitive_dynamic__
// check if we already received a +20237 before fetching from the server.
if  currentrowinrowset_    0    rowsetsqlca_    null    rowsetsqlca_    null
rowsetsqlca_ getsqlcode      20237
isbeforefirst_   true
setrowsetbeforefirstevent
return false
flowgetrowset scrollorientation_prior__  0
else
// for all other cursors:
//   sensitive static, insensitive, non-rowset cursors
if  resultsetcontainsnorows      isbeforefirstx
return false
rownumber   firstrowinrowset_   absoluteposition_   fetchsize_
isafterlast   isafterlastx
if  isfirstx
rownumber   0
orientation   scrollorientation_absolute__
// if the cursor is after last, fetch the last rowset which includes the last row.
else if  isafterlast
rownumber     1    fetchsize_
// if the distance from the absolute position is less than fetch size, fetch from row 1
if  rownumber     1  >  absoluteposition_
rownumber   1
orientation   scrollorientation_absolute__
// if afterlast and maxrows > 0, go backward from maxrows and not
// from last row in the resultset
if  maxrows_ > 0    orientation    scrollorientation_relative__    isafterlast
rownumber    maxrows_   1
orientation   scrollorientation_absolute__
flowgetrowset orientation  rownumber
parserowset_
// if no row was received but received sqlcode +100, then the cursor is
// positioned before first.
if  rowsreceivedincurrentrowset_    0
cursor_ allrowsreceivedfromserver
isbeforefirst_   true
setrowsetbeforefirstevent
return false
// adjust the cursor positions for sensitive static or insensitive cursors only
if  sensitivity_    sensitivity_sensitive_dynamic__
adjustpreviousrowset orientation  rownumber  isafterlast
else
currentrowinrowset_   rowsreceivedincurrentrowset_   1
return true
private void adjustpreviousrowset int orientation  long rownumber  boolean isafterlastrow  throws sqlexception
if  orientation    scrollorientation_absolute__    rownumber    1
// subtracting 2 because the currentrowinrowset_ index starts at 0, and all
// the other indexes starts at 1.
currentrowinrowset_    isafterlastrow  ? absoluteposition_   2   firstrowinrowset_   2
firstrowinrowset_   1
lastrowinrowset_   rowsreceivedincurrentrowset_
absoluteposition_    isafterlastrow  ? lastrowinrowset_   1   lastrowinrowset_
else
if  maxrows_    0
lastrowinrowset_    isafterlastrow  ? rowcount_   firstrowinrowset_   1
else
lastrowinrowset_    isafterlastrow  ? maxrows_   firstrowinrowset_   1
firstrowinrowset_   lastrowinrowset_   rowsreceivedincurrentrowset_   1
absoluteposition_   lastrowinrowset_
currentrowinrowset_   lastrowinrowset_   firstrowinrowset_
private boolean getabsoluterowset long row  throws sqlexception
int orientation   scrollorientation_absolute__
// absolute(0) is not allowed on a rowset cursor, will get -644 from the server
// remap to fetch before.
if  isrowsetcursor_    row    0
orientation   scrollorientation_before__
else if  sensitivity_    sensitivity_sensitive_dynamic__    row < 0
row   0
flowgetrowset orientation  row
parserowset_
// if no row was received but received sqlcode +100, then the cursor is
// positioned after last or before first.
if   rowsreceivedincurrentrowset_    0
cursor_ allrowsreceivedfromserver
orientation    scrollorientation_before__
if  row > 0
setrowsetafterlastevent
isafterlast_   true
else
setrowsetbeforefirstevent
isbeforefirst_   true
return false
// adjust the cursor positions for sensitive static or insensitive cursors only
if  sensitivity_    sensitivity_sensitive_dynamic__
adjustabsoluterowset row
currentrowinrowset_   0
return true
private void adjustabsoluterowset long rownumber
firstrowinrowset_   rownumber
lastrowinrowset_   firstrowinrowset_   rowsreceivedincurrentrowset_   1
setabsolutepositionbasedonallrowsreceived
//currentrowinrowset_ = 0;
private boolean getrelativerowset long rows  throws sqlexception
if  rows    0
cursor_ allrowsreceivedfromserver
absoluteposition_ > rowcount_
setrowsetafterlastevent
isafterlast_   true
return false
flowgetrowset scrollorientation_relative__  rows
parserowset_
if  rowsreceivedincurrentrowset_    0
cursor_ allrowsreceivedfromserver
if  rows > 0
setrowsetafterlastevent
isafterlast_   true
else
setrowsetbeforefirstevent
isbeforefirst_   true
return false
// adjust the cursor positions for sensitive static or insensitive cursors only
if  sensitivity_    sensitivity_sensitive_dynamic__
adjustrelativerowset rows
currentrowinrowset_   0
return true
private void adjustrelativerowset long rownumber
firstrowinrowset_   absoluteposition_   rownumber
lastrowinrowset_   firstrowinrowset_   rowsreceivedincurrentrowset_   1
setabsolutepositionbasedonallrowsreceived
private boolean getfirstrowset   throws sqlexception
flowgetrowset scrollorientation_absolute__  1
parserowset_
// if no row was received but received sqlcode +100, then no row in the result set
if  rowsreceivedincurrentrowset_    0
cursor_ allrowsreceivedfromserver
resetrowsetflags
this setrowsetnorowsevent
return false
// adjust the cursor positions for sensitive static or insensitive cursors only
if  sensitivity_    sensitivity_sensitive_dynamic__
adjustfirstrowset
currentrowinrowset_   0
return true
private void adjustfirstrowset
firstrowinrowset_   1
lastrowinrowset_   rowsreceivedincurrentrowset_
setabsolutepositionbasedonallrowsreceived
//currentrowinrowset_ = 0;
private boolean getlastrowset long row  throws sqlexception
if  sensitivity_    sensitivity_sensitive_dynamic__    rowcount_    0
isafterlast_   false
isbeforefirst_   false
setrowsetnorowsevent
return false
else if  isrowsetcursor_    sensitivity_    sensitivity_sensitive_dynamic__
flowgetrowset scrollorientation_last__  0
else
// if fetchsize_ is smaller than the total number of rows in the resultset,
// then fetch one rowset of fetchsize_ number of rows.  otherwise, we will
// fetch all rows in the resultset, so start fetching from row 1.
long rownumber
if  maxrows_    0
rownumber    fetchsize_ < row  ?    1    fetchsize_    1
else
rownumber    fetchsize_ < row  ?  maxrows_   fetchsize_    1   1
flowgetrowset scrollorientation_absolute__  rownumber
parserowset_
if  rowsreceivedincurrentrowset_    0
cursor_ allrowsreceivedfromserver
isafterlast_   true
setrowsetafterlastevent
return false
// adjust the cursor positions for sensitive static or insensitive cursors only
if  sensitivity_    sensitivity_sensitive_dynamic__
adjustlastrowset row
else
currentrowinrowset_   rowsreceivedincurrentrowset_   1
return true
private void adjustlastrowset long row
lastrowinrowset_   row
firstrowinrowset_   lastrowinrowset_   rowsreceivedincurrentrowset_   1
if  firstrowinrowset_ <  0
firstrowinrowset_   1
setabsolutepositionbasedonallrowsreceived
currentrowinrowset_   lastrowinrowset_   firstrowinrowset_
private boolean getrefreshrowset   throws sqlexception
if  isrowsetcursor_
flowgetrowset scrollorientation_current__  0
else
flowgetrowset scrollorientation_relative__    1     absoluteposition_   firstrowinrowset_
parserowset_
// rowset indexes do not change when rowset is refreshed.
// the only exception is absoluteposition_.  it may be different after the refresh.
if  sensitivity_    sensitivity_sensitive_dynamic__
adjustrefreshrowset
return true
private void adjustrefreshrowset
setabsolutepositionbasedonallrowsreceived
updatecolumninfofromcache
private void setabsolutepositionbasedonallrowsreceived
absoluteposition_    cursor_ allrowsreceivedfromserver    ?
lastrowinrowset_   1   lastrowinrowset_
// ------------------------------- abstract box car methods --------------------------------------
public abstract void writefetch_ section section  throws sqlexception
public abstract void readfetch_   throws sqlexception
public abstract void writescrollablefetch_ section section
int fetchsize     need to send fetchsize in case when we get an
// incomplete rowset, the fetchsize is the remaining
// number of the rows in the rowset.
int orientation
long rowtofetch
boolean resetqueryblocks  throws sqlexception
public abstract void readscrollablefetch_   throws sqlexception
public abstract void writepositioningfetch_ section section
int orientation
long rowtofetch  throws sqlexception
public abstract void readpositioningfetch_   throws sqlexception
public abstract void writecursorclose_ section section  throws sqlexception
public abstract void readcursorclose_   throws sqlexception
protected abstract void parserowset_   throws sqlexception
public abstract void setfetchsize_ int rows
/**
* method that is invoked by <code>closex()</code> before the
* result set is actually being closed. subclasses may override
* this method if work needs to be done before closing.
*
* @exception sqlexception
*/
protected abstract void preclose_   throws sqlexception
public connectioncallbackinterface getconnectioncallbackinterface
return connection_
public statementcallbackinterface getstatementcallbackinterface
return statement_
public void expandrowsetsqlca
// rowsetsqlca_ index starts from 1.  entry 0 is reserved for warning +20237
// if rowset size is n, then the (n+1)th entry is reserved for the +100 if one is received.
// thus the size of the rowsetsqlca_ needs to be fetchsize_+2
if  isrowsetcursor_
rowsetsqlca_    null    rowsetsqlca_ length < fetchsize_   2
rowsetsqlca_   new sqlca
private final int checkrowsetsqlca   throws sqlexception
return checkrowsetsqlca  int  currentrowinrowset_   1
private final int checkrowsetsqlca int row  throws sqlexception
int sqlcode   0
if   isrowsetcursor_    rowsetsqlca_    null    rowsetsqlca_    null
warnings_   null        clear any previous warnings
return sqlcode
sqlca sqlca   rowsetsqlca_
if  sqlca    null
sqlcode   sqlca getsqlcode
if  sqlcode < 0
throw new sqlexception agent_ logwriter_  sqlca
else if  sqlcode > 0     sqlcode    100    sqlcode     20237
accumulatewarning new sqlwarning agent_ logwriter_  sqlca
return sqlcode
private void resetrowsetflags
isbeforefirst_   false
isafterlast_   false
isfirst_   false
islast_   false
private void resetrowsetsqlca
if  rowsetsqlca_    null
for  int i   0  i < rowsetsqlca_ length  i
rowsetsqlca_   null
private closefilterinputstream createclosefilterinputstream java io inputstream is  throws sqlexception
if is    null
return null
if  is_    is
return is_
closeclosefilterinputstream
is_   new closefilterinputstream is
return is_
private void closeclosefilterinputstream   throws sqlexception
if is_    null
try
is_ close
catch ioexception e
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate java_exception
e getmessage    e
is_   null
void usestream int columnindex  throws sqlexception
if streamusedflags_
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate lang_stream_retrieved_already
streamusedflags_   true
private void unusestreams
if streamusedflags_    null
streamusedflags_   new boolean
return
for int i   0
i < streamusedflags_ length
i
streamusedflags_   false
private sqlexception jdbc3methodnotsupported
return new sqlexception agent_ logwriter_
new clientmessageid sqlstate jdbc_method_not_implemented
getsqlexception
// -------------------------- jdbc 4.0 --------------------------
/**
* retrieves the holdability for this <code>resultset</code>
* object.
*
* @return either <code>resultset.hold_cursors_over_commit</code>
* or <code>resultset.close_cursors_at_commit</code>
* @exception sqlexception if a database error occurs
*/
public final int getholdability   throws sqlexception
if  agent_ loggingenabled
agent_ logwriter_ traceentry this
try
checkforclosedresultset
catch  sqlexception se
throw se getsqlexception
if  agent_ loggingenabled
agent_ logwriter_ traceexit this
resultsetholdability_
return resultsetholdability_
/**
* checks whether this <code>resultset</code> object has been
* closed, either automatically or because <code>close()</code>
* has been called.
*
* @return <code>true</code> if the <code>resultset</code> is
* closed, <code>false</code> otherwise
* @exception sqlexception if a database error occurs
*/
public final boolean isclosed   throws sqlexception
if  agent_ loggingenabled
agent_ logwriter_ traceentry this
final boolean isclosed    openonclient_
if  agent_ loggingenabled
agent_ logwriter_ traceexit this     isclosed
return isclosed
/**
* updates the designated column with an ascii stream value.
* the data will be read from the stream as needed until end-of-stream is
* reached.
*
* the updater methods are used to update column values in the current row
* or the insert row. the updater methods do not update the underlying
* database; instead the <code>updaterow</code> or <code>insertrow</code>
* methods are called to update the database.
*
* @param columnindex the first column is 1, the second is 2, ...
* @param x the new column value
* @throws sqlexception if the columnindex is not valid; if a database
*      access error occurs; the result set concurrency is
*      <code>concur_read_only</code> or this method is called on a closed
*      result set
*/
public void updateasciistream int columnindex  inputstream x
throws sqlexception
synchronized  connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this
columnindex  x
try
checkupdatepreconditions columnindex
updatecolumn columnindex
agent_ crossconverters_ setobjectfromcharacterstream
resultsetmetadata_ types_
x
crossconverters unknown_length
catch  sqlexception se
throw se getsqlexception
/**
* update a column with an ascii stream value.
*
* the updatexxx() methods are used to update column values in the current
* row, or the insert row. the updatexxx() methods do not update the
* underlying database, instead the updaterow() or insertrow() methods are
* called to update the database.
*
* @param columnindex
*            the first column is 1, the second is 2, ...
* @param x
*            the new column value
* @param length
*            the length of the stream
* @exception sqlexception
*                if a database-access error occurs
*/
public void updateasciistream int columnindex  inputstream x
long length  throws sqlexception
if length > integer max_value
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate client_length_outside_range_for_datatype
new long length   new integer integer max_value   getsqlexception
else
updateasciistream columnindex x  int length
/**
* updates the designated column with a binary stream value.
* the data will be read from the stream as needed until end-of-stream is
* reached.
*
* the updater methods are used to update column values in the current row
* or the insert row. the updater methods do not update the underlying
* database; instead the <code>updaterow</code> or <code>insertrow</code>
* methods are called to update the database.
*
* @param columnindex the first column is 1, the second is 2, ...
* @param x the new column value
* @throws sqlexception if the columnindex is not valid; if a database
*      access error occurs; the result set concurrency is
*      <code>concur_read_only</code> or this method is called on a closed
*      result set
*/
public void updatebinarystream int columnindex  inputstream x
throws sqlexception
synchronized  connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this
columnindex  x
try
checkupdatepreconditions columnindex
updatecolumn columnindex
agent_ crossconverters_ setobjectfrombinarystream
resultsetmetadata_ types_
x
crossconverters unknown_length
catch  sqlexception se
throw se getsqlexception
/**
* update a column with a binary stream value.
*
* the updatexxx() methods are used to update column values in the current
* row, or the insert row. the updatexxx() methods do not update the
* underlying database, instead the updaterow() or insertrow() methods are
* called to update the database.
*
* @param columnindex
*            the first column is 1, the second is 2, ...
* @param x
*            the new column value
* @param length
*            the length of the stream
* @exception sqlexception
*                if a database-access error occurs
*/
public void updatebinarystream int columnindex  inputstream x
long length  throws sqlexception
if length > integer max_value
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate client_length_outside_range_for_datatype
new long length   new integer integer max_value   getsqlexception
else
updatebinarystream columnindex x  int length
/**
* updates the designated column using the given input stream.
* the data will be read from the stream as needed until end-of-stream is
* reached.
*
* the updater methods are used to update column values in the current row
* or the insert row. the updater methods do not update the underlying
* database; instead the <code>updaterow</code> or <code>insertrow</code>
* methods are called to update the database.
*
* @param columnindex the first column is 1, the second is 2, ...
* @param x the new column value
* @throws sqlexception if the columnindex is not valid; if a database
*      access error occurs; the result set concurrency is
*      <code>concur_read_only</code> or this method is called on a closed
*      result set
*/
public void updateblob int columnindex  inputstream x
throws sqlexception
synchronized  connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this
columnindex  x
try
checkupdatepreconditions columnindex
updatecolumn columnindex
agent_ crossconverters_ setobject
resultsetmetadata_ types_
new blob agent_  x
catch  sqlexception se
throw se getsqlexception
/**
* updates the designated column with a character stream value.
* the data will be read from the stream as needed until end-of-stream is
* reached.
*
* the updater methods are used to update column values in the current row
* or the insert row. the updater methods do not update the underlying
* database; instead the <code>updaterow</code> or <code>insertrow</code>
* methods are called to update the database.
*
* @param columnindex the first column is 1, the second is 2, ...
* @param reader the new column value
* @throws sqlexception if the columnlabel is not valid; if a database
*      access error occurs; the result set concurrency is
*      <code>concur_read_only</code> or this method is called on a closed
*      result set
*/
public void updatecharacterstream int columnindex  reader reader
throws sqlexception
synchronized  connection_
try
if  agent_ loggingenabled
agent_ logwriter_ traceentry this
columnindex  reader
checkupdatepreconditions columnindex
updatecolumn columnindex
agent_ crossconverters_ setobject
resultsetmetadata_ types_
reader
crossconverters unknown_length
catch  sqlexception se
throw se getsqlexception
/**
* update a column with a character stream value.
*
* the updatexxx() methods are used to update column values in the current
* row, or the insert row. the updatexxx() methods do not update the
* underlying database, instead the updaterow() or insertrow() methods are
* called to update the database.
*
* @param columnindex
*            the first column is 1, the second is 2, ...
* @param x
*            the new column value
* @param length
*            the length of the stream
* @exception sqlexception
*                if a database-access error occurs
*/
public void updatecharacterstream int columnindex  reader x
long length  throws sqlexception
if length > integer max_value
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate client_length_outside_range_for_datatype
new long length   new integer integer max_value   getsqlexception
else
updatecharacterstream columnindex x  int length
/**
* updates the designated column using the given <code>reader</code>
* object.
* the data will be read from the stream as needed until end-of-stream is
* reached. the jdbc driver will do any necessary conversion from unicode
* to the database char format.
*
* the updater methods are used to update column values in the current row
* or the insert row. the updater methods do not update the underlying
* database; instead the <code>updaterow</code> or <code>insertrow</code>
* methods are called to update the database.
*
* @param columnindex the first column is 1, the second is 2, ...
* @param reader an object that contains the data to set the parameter
*      value to.
* @throws sqlexception if the columnindex is not valid; if a database
*      access error occurs; the result set concurrency is
*      <code>concur_read_only</code> or this method is called on a closed
*      result set
*/
public void updateclob int columnindex  reader reader
throws sqlexception
synchronized  connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this
columnindex  reader
try
checkupdatepreconditions columnindex
updatecolumn columnindex
agent_ crossconverters_ setobject
resultsetmetadata_ types_
new clob agent_  reader
catch  sqlexception se
throw se getsqlexception
/**
* updates the designated column with an ascii stream value.
* the data will be read from the stream as needed until end-of-stream is
* reached.
*
* the updater methods are used to update column values in the current row
* or the insert row. the updater methods do not update the underlying
* database; instead the <code>updaterow</code> or <code>insertrow</code>
* methods are called to update the database.
*
* @param columnname the label for the column specified with the sql as
*      clause. if the sql as clause was not specified, then the label is
*      the name of the column
* @param x the new column value
* @throws sqlexception if the columnlabel is not valid; if a database
*      access error occurs; the result set concurrency is
*      <code>concur_read_only</code> or this method is called on a closed
*      result set
*/
public void updateasciistream string columnname  inputstream x
throws sqlexception
try
updateasciistream findcolumnx columnname   x
catch  sqlexception se
throw se getsqlexception
/**
* update a column with an ascii stream value.
*
* the updatexxx() methods are used to update column values in the current
* row, or the insert row. the updatexxx() methods do not update the
* underlying database, instead the updaterow() or insertrow() methods are
* called to update the database.
*
* @param columnname
*            the name of the column
* @param x
*            the new column value
* @param length
*            of the stream
* @exception sqlexception
*                if a database-access error occurs
*/
public void updateasciistream string columnname  inputstream x
long length  throws sqlexception
try
updateasciistream findcolumnx columnname   x  length
catch sqlexception sqle
throw sqle getsqlexception
/**
* updates the designated column with a binary stream value.
* the data will be read from the stream as needed until end-of-stream is
* reached.
*
* the updater methods are used to update column values in the current row
* or the insert row. the updater methods do not update the underlying
* database; instead the <code>updaterow</code> or <code>insertrow</code>
* methods are called to update the database.
*
* @param columnlabel the label for the column specified with the sql as
*      clause. if the sql as clause was not specified, then the label is
*      the name of the column
* @param x the new column value
* @throws sqlexception if the columnlabel is not valid; if a database
*      access error occurs; the result set concurrency is
*      <code>concur_read_only</code> or this method is called on a closed
*      result set
*/
public void updatebinarystream string columnlabel  inputstream x
throws sqlexception
try
updatebinarystream findcolumnx columnlabel   x
catch  sqlexception se
throw se getsqlexception
/**
* update a column with a binary stream value.
*
* the updatexxx() methods are used to update column values in the current
* row, or the insert row. the updatexxx() methods do not update the
* underlying database, instead the updaterow() or insertrow() methods are
* called to update the database.
*
* @param columnname
*            the name of the column
* @param x
*            the new column value
* @param length
*            of the stream
* @exception sqlexception
*                if a database-access error occurs
*/
public void updatebinarystream string columnname  inputstream x
long length  throws sqlexception
try
updatebinarystream findcolumnx columnname   x  length
catch sqlexception sqle
throw sqle getsqlexception
/**
* updates the designated column using the given input stream.
* the data will be read from the stream as needed until end-of-stream is
* reached.
*
* the updater methods are used to update column values in the current row
* or the insert row. the updater methods do not update the underlying
* database; instead the <code>updaterow</code> or <code>insertrow</code>
* methods are called to update the database.
*
* @param columnlabel the label for the column specified with the sql as
*      clause. if the sql as clause was not specified, then the label is
*      the name of the column
* @param x the new column value
* @throws sqlexception if the columnlabel is not valid; if a database
*      access error occurs; the result set concurrency is
*      <code>concur_read_only</code> or this method is called on a closed
*      result set
*/
public void updateblob string columnlabel  inputstream x
throws sqlexception
try
updateblob findcolumnx columnlabel   x
catch  sqlexception se
throw se getsqlexception
/**
* updates the designated column with a character stream value.
* the data will be read from the stream as needed until end-of-stream is
* reached.
*
* the updater methods are used to update column values in the current row
* or the insert row. the updater methods do not update the underlying
* database; instead the <code>updaterow</code> or <code>insertrow</code>
* methods are called to update the database.
*
* @param columnlabel the label for the column specified with the sql as
*      clause. if the sql as clause was not specified, then the label is
*      the name of the column
* @param reader the new column value
* @throws sqlexception if the columnlabel is not valid; if a database
*      access error occurs; the result set concurrency is
*      <code>concur_read_only</code> or this method is called on a closed
*      result set
*/
public void updatecharacterstream string columnlabel  reader reader
throws sqlexception
try
updatecharacterstream findcolumnx columnlabel   reader
catch  sqlexception se
throw se getsqlexception
/**
* update a column with a character stream value.
*
* the updatexxx() methods are used to update column values in the current
* row, or the insert row. the updatexxx() methods do not update the
* underlying database, instead the updaterow() or insertrow() methods are
* called to update the database.
*
* @param columnname
*            the name of the column
* @param reader
*            the new column value
* @param length
*            length of the stream
* @exception sqlexception
*                if a database-access error occurs
*/
public void updatecharacterstream string columnname  reader reader
long length  throws sqlexception
try
updatecharacterstream findcolumnx columnname   reader  length
catch sqlexception sqle
throw sqle getsqlexception
/**
* updates the designated column using the given <code>reader</code>
* object.
* the data will be read from the stream as needed until end-of-stream is
* reached. the jdbc driver will do any necessary conversion from unicode
* to the database char format.
*
* the updater methods are used to update column values in the current row
* or the insert row. the updater methods do not update the underlying
* database; instead the <code>updaterow</code> or <code>insertrow</code>
* methods are called to update the database.
*
* @param columnlabel the label for the column specified with the sql as
*      clause. if the sql as clause was not specified, then the label is
*      the name of the column
* @param reader an object that contains the data to set the parameter
*      value to.
* @throws sqlexception if the columnindex is not valid; if a database
*      access error occurs; the result set concurrency is
*      <code>concur_read_only</code> or this method is called on a closed
*      result set
*/
public void updateclob string columnlabel  reader reader
throws sqlexception
try
updateclob findcolumnx columnlabel   reader
catch  sqlexception se
throw se getsqlexception
/**
* updates the designated column using the given <code>reader</code>
* object, which is the given number of characters long.
* when a very large unicode value is input to a <code>longvarchar</code>
* parameter, it may be more practical to send it via a
* <code>java.io.reader</code> object. the jdbc driver will
* do any necessary conversion from unicode to the database char format.
*
* <p>
* the updater methods are used to update column values in the
* current row or the insert row.  the updater methods do not
* update the underlying database; instead the <code>updaterow</code> or
* <code>insertrow</code> methods are called to update the database.
*
* @param columnindex the first column is 1, the second is 2, ...
* @param x an object that contains the data to set the parameter value to.
* @param length the number of characters in the parameter data.
* @exception sqlexception if the columnindex is not valid;
* if a database access error occurs;
* the result set concurrency is <code>concur_read_only</code>
* or this method is called on a closed result set
* @throws sqlfeaturenotsupportedexception if the jdbc driver does not
* support this method
*/
public void updateclob int columnindex  reader x  long length
throws sqlexception
synchronized  connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this
columnindex  x   int length
try
checkupdatepreconditions columnindex
updatecolumn columnindex
agent_ crossconverters_ setobject
resultsetmetadata_ types_
new clob agent_  x   int length
catch  sqlexception se
throw se getsqlexception
/**
* updates the designated column using the given <code>reader</code>
* object, which is the given number of characters long.
* when a very large unicode value is input to a <code>longvarchar</code>
* parameter, it may be more practical to send it via a
* <code>java.io.reader</code> object.  the jdbc driver will
* do any necessary conversion from unicode to the database char format.
*
* <p>
* the updater methods are used to update column values in the
* current row or the insert row.  the updater methods do not
* update the underlying database; instead the <code>updaterow</code> or
* <code>insertrow</code> methods are called to update the database.
*
* @param columnname the label for the column specified with the
* sql as clause.  if the sql as clause was not specified,
* then the label is the name of the column
* @param x an object that contains the data to set the parameter value to.
* @param length the number of characters in the parameter data.
* @exception sqlexception if the columnlabel is not valid;
* if a database access error occurs;
* the result set concurrency is <code>concur_read_only</code>
* or this method is called on a closed result set
* @throws sqlfeaturenotsupportedexception if the jdbc driver does not
* support this method
*/
public void updateclob string columnname  reader x  long length
throws sqlexception
try
updateclob findcolumnx columnname   x
catch  sqlexception se
throw se getsqlexception
/**
* updates the designated column with a <code>java.sql.clob</code> value.
* the updater methods are used to update column values in the
* current row or the insert row.  the updater methods do not
* update the underlying database; instead the <code>updaterow</code> or
* <code>insertrow</code> methods are called to update the database.
*
* @param columnindex the label for the column specified with the sql as
*                    clause. if the sql as clause was not specified, then
*                    the label is the name of the column
* @param x the new column value
* @throws sqlexception if the columnlabel is not valid;
* if a database access error occurs;
* the result set concurrency is <code>concur_read_only</code>
* or this method is called on a closed result set
*/
public void updateclob int columnindex  java sql clob x
throws sqlexception
synchronized  connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this
columnindex  x
try
checkupdatepreconditions columnindex
updatecolumn columnindex
agent_ crossconverters_ setobject
resultsetmetadata_ types_
x
catch  sqlexception se
throw se getsqlexception
/**
* updates the designated column with a <code>java.sql.clob</code> value.
* the updater methods are used to update column values in the
* current row or the insert row.  the updater methods do not
* update the underlying database; instead the <code>updaterow</code> or
* <code>insertrow</code> methods are called to update the database.
*
* @param columnlabel the label for the column specified with the sql as
*                    clause. if the sql as clause was not specified, then
*                    the label is the name of the column
* @param x the new column value
* @throws sqlexception if the columnlabel is not valid;
* if a database access error occurs;
* the result set concurrency is <code>concur_read_only</code>
* or this method is called on a closed result set
*/
public void updateclob string columnlabel  java sql clob x
throws sqlexception
try
updateclob findcolumnx columnlabel   x
catch  sqlexception se
throw se getsqlexception
/**
* marks the lob at the specified column as published.
* <p>
* when a lob is marked as published, the release mechanism will not be
* invoked by the result set. it is expected that the code accessing the
* lob releases the locator when it is done with the lob, or that the
* commit/rollback handles the release.
*
* @param index 1-based column index
*/
public final void marklobaspublished int index
this lobstate markaspublished index
/**
* initializes the lob state tracker.
* <p>
* the state tracker is used to free lob locators on the server. if the
* server doesn't support locators, or there are no lobs in the result set,
* a no-op tracker will be used.
*/
final void createlobcolumntracker
if  sanitymanager debug
sanitymanager assert this lobstate    null
if  this connection_ supportssessiondatacaching
this resultsetmetadata_ haslobcolumns
final int columncount   this resultsetmetadata_ columns_
int lobcount   0
int tmpindexes   new int
boolean tmpisblob   new boolean
for  int i 0  i < columncount  i
int type   this resultsetmetadata_ types_
if  type    types blob    type    types clob
tmpindexes   i  1     convert to 1 based index
tmpisblob    type    types blob
// create a tracker for the lob columns found.
int lobindexes   new int
boolean isblob   new boolean
system arraycopy tmpindexes  0  lobindexes  0  lobcount
system arraycopy tmpisblob  0  isblob  0  lobcount
this lobstate   new lobstatetracker lobindexes  isblob  true
else
// use a no-op state tracker to simplify code expecting a tracker.
this lobstate   lobstatetracker no_op_tracker