/*
derby - class org.apache.derby.impl.services.bytecode.gclass
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl services bytecode
import org apache derby iapi services compiler classbuilder
import org apache derby iapi services loader classfactory
import org apache derby iapi services loader generatedclass
import org apache derby iapi error standardexception
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi services stream headerprintwriter
import org apache derby iapi services monitor monitor
import org apache derby iapi util bytearray
import java io file
import java io fileoutputstream
import java io ioexception
/**
* this is a common superclass for the various impls.
* saving class files is a common thing to do.
*
*/
public abstract class gclass implements classbuilder
protected bytearray bytecode
protected final classfactory cf
protected final string qualifiedname
public gclass classfactory cf  string qualifiedname
this cf   cf
this qualifiedname   qualifiedname
public string getfullname
return qualifiedname
public generatedclass getgeneratedclass   throws standardexception
return cf loadgeneratedclass qualifiedname  getclassbytecode
protected void writeclassfile string dir  boolean logmessage  throwable t
throws standardexception
if  sanitymanager debug
if  bytecode     null  getclassbytecode       not recursing
if  dir    null  dir
string filename   getname       leave off package
filename   filename
file classfile   new file dir filename
// find the error stream
headerprintwriter errorstream   monitor getstream
try
fileoutputstream fis   new fileoutputstream classfile
fis write bytecode getarray
bytecode getoffset    bytecode getlength
fis flush
if  logmessage
errorstream printlnwithheader   getfullname     classfile tostring     t
fis close
catch  ioexception e
if  sanitymanager debug
sanitymanager throwassert    e
final void validatetype string typename1
if  sanitymanager debug
sanitymanager assert typename1    null
string typename   typename1 trim
if    equals typename   return
// first remove all array-ness
while  typename endswith     typename   typename substring 0 typename length   2
sanitymanager assert typename length   > 0
// then check for primitive types
if    equals typename   return
if    equals typename   return
if    equals typename   return
if    equals typename   return
if    equals typename   return
if    equals typename   return
if    equals typename   return
if    equals typename   return
// then see if it can be found
// revisit: this will fail if assert is on and the
// implementation at hand is missing the target type.
// we do plan to generate classes against
// different implementations from the compiler's implementation
// at some point...
try
if  cf    null
class forname typename
else
cf loadapplicationclass typename
catch  classnotfoundexception cnfe
sanitymanager throwassert   typename    cnfe
// all the checks succeeded, it must be okay.
return