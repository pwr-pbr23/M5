/*
derby - class org.apache.derby.impl.jdbc.util
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl jdbc
import org apache derby iapi error standardexception
import org apache derby iapi services i18n messageservice
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi services io storedformatids
import org apache derby iapi types typeid
import org apache derby iapi error exceptionseverity
import org apache derby iapi reference sqlstate
import org apache derby iapi reference messageid
import org apache derby iapi reference jdbc40translation
import java sql sqlexception
import java sql types
import java io ioexception
import java io printstream
import java io printwriter
/**
this class understands the message protocol and looks up
sqlexceptions based on keys, so that the local jdbc driver's
messages can be localized.
remind: may want to investigate putting some of this in the protocol
side, for the errors that any derby jdbc driver might return.
the assert mechanism is a wrapper of the basic services,
to ensure that failed asserts at this level will behave
well in a jdbc environment.
*/
//in the past, this class was sent on the wire to the client and because it
//has the message protcol stuff and also the detailed stack trace as one
//of it's member variable, the client.jar files was really big. to get
//around this problem, now we have added embedsqlexception which is
//just a java sql exception with the stack trace information variable
//transient so it doesn't get transported to the client side and thus
//reducing the size of client.jar the bug for this fix was 1850. the
//p4 number for it will have the details of all the files impacted and
//the actual changes made.
public abstract class util
private static sqlexceptionfactory exceptionfactory
new sqlexceptionfactory
/*
** methods of throwable
*/
// class implementation
/**
* this looks up the message and sqlstate values and calls
* the sqlexceptionfactory method to generate
* the appropriate exception off of them.
*/
private static sqlexception newembedsqlexception string messageid
object args  sqlexception next  int severity  throwable t
string message   messageservice getcompletemessage
messageid  args
return exceptionfactory getsqlexception
message  messageid  next  severity  t  args
public static sqlexception newembedsqlexception string messageid
object args  int severity
return newembedsqlexception messageid  args   sqlexception  null  severity   throwable  null
private static sqlexception newembedsqlexception string messageid
object args  int severity  throwable t
return newembedsqlexception messageid args   sqlexception   null  severity  t
private static sqlexception newembedsqlexception
string messageid  int severity
return newembedsqlexception messageid   object  null   sqlexception  null  severity   throwable  null
// class interface
/**
mimic sanitymanager.assert in a jdbc-friendly way,
and providing system cleanup for jdbc failures.
we need the connection to do cleanup...
@exception sqlexception the exception
*/
public static void assert embedconnection conn  boolean mustbetrue  string msg  throws sqlexception
if  sanitymanager debug
try
sanitymanager assert mustbetrue  msg
catch  throwable t
sqlexception se   conn handleexception t
// get around typing constraints.
// it must be a util, we wrapped it.
sanitymanager assert se instanceof embedsqlexception
throw  embedsqlexception se
/**
mimic sanitymanager.throwassert in a jdbc-friendly way,
and providing system cleanup for jdbc failures.
we need the connection to do cleanup...
*/
static void throwassert embedconnection conn  string msg  throws sqlexception
if  sanitymanager debug
try
sanitymanager throwassert msg
catch  throwable t
sqlexception se   conn handleexception t
// get around typing constraints.
// it must be a util, we wrapped it.
sanitymanager assert se instanceof embedsqlexception
throw  embedsqlexception se
/*
** there is at least one static method for each message id.
** its parameters are specific to its message.
** these will throw sqlexception when the message repository
** cannot be located.
** note that these methods call the static method newembedsqlexception,
** they don't directly do a new util.
*/
/* 3 arguments */
static sqlexception newexception string messageid  object a1
object a2  object a3
return newembedsqlexception messageid  new object  a1  a2  a3
standardexception getseverityfromidentifier messageid
public static sqlexception generatecssqlexception string error
return newembedsqlexception error
standardexception getseverityfromidentifier error
public static sqlexception generatecssqlexception string error  object arg1
return newembedsqlexception error
new object  arg1
standardexception getseverityfromidentifier error
public static sqlexception generatecssqlexception
string error  object arg1  object arg2
return newembedsqlexception error
new object  arg1  arg2
standardexception getseverityfromidentifier error
public static sqlexception generatecssqlexception
string error  object arg1  object arg2  object arg3
return newembedsqlexception error
new object  arg1  arg2  arg3
standardexception getseverityfromidentifier error
static sqlexception generatecssqlexception
string error  object arg1  throwable t
return newembedsqlexception error
new object  arg1
standardexception getseverityfromidentifier error   t
public static sqlexception generatecssqlexception standardexception se
return exceptionfactory getsqlexception
se getmessage    se getmessageid     sqlexception  null
se getseverity    se  se getarguments
public static sqlexception nocurrentconnection
return newembedsqlexception sqlstate no_current_connection
standardexception getseverityfromidentifier sqlstate no_current_connection
/**
* generate an <code>sqlexception</code> which points to another
* <code>sqlexception</code> nested within it with
* <code>setnextexception()</code>.
*
* @param messageid message id
* @param args the arguments to the message creation
* @param next the next sqlexception
* @return an sqlexception wrapping another sqlexception
*/
static sqlexception seenextexception string messageid  object args
sqlexception next
return newembedsqlexception messageid  args  next
standardexception getseverityfromidentifier messageid   null
public static sqlexception javaexception throwable t
string name  msg
msg   t getmessage
if  msg    null  msg
name   t getclass   getname
sqlexception next   null
throwable cause   t getcause
if  cause    null
if  cause instanceof sqlexception
next    sqlexception  cause
else if  cause instanceof standardexception
next   generatecssqlexception  standardexception  cause
else
next   javaexception cause
return newembedsqlexception sqlstate java_exception
new object  name  msg   next
exceptionseverity no_applicable_severity  t
public static sqlexception policynotreloaded  throwable t
return newembedsqlexception sqlstate policy_not_reloaded  new object   t getmessage
standardexception getseverityfromidentifier sqlstate policy_not_reloaded   t
public static sqlexception notimplemented
return notimplemented  messageservice gettextmessage messageid conn_no_details
public static sqlexception notimplemented string feature
return newembedsqlexception sqlstate not_implemented
new object  feature
standardexception getseverityfromidentifier sqlstate not_implemented
static sqlexception setstreamfailure ioexception e
string msg
msg   e getmessage
if  msg    null
msg   e getclass   getname
return newembedsqlexception sqlstate set_stream_failure
new object  msg
standardexception getseverityfromidentifier sqlstate set_stream_failure
static sqlexception typemismatch int targetsqltype
return newembedsqlexception sqlstate type_mismatch
new object  typename targetsqltype
standardexception getseverityfromidentifier sqlstate type_mismatch
/**
* create an {@code ioexception} that wraps another {@code throwable}.
*
* @param cause the underlying cause of the error
* @return an {@code ioexception} linked to {@code cause}
*/
static ioexception newioexception throwable cause
ioexception ioe   new ioexception cause getmessage
ioe initcause cause
return ioe
/**
* this method is called to replace the exception factory to be
* used to generate the sqlexception or the subclass
*/
public static void setexceptionfactory  sqlexceptionfactory factory
exceptionfactory   factory
/**
* get the exception factory specific to the version of jdbc which
* we are running.
*/
public	static	sqlexceptionfactory	getexceptionfactory     return exceptionfactory
public static string typename int jdbctype
switch  jdbctype
case types array  return typeid array_name
case types bit 		   return typeid bit_name
case types boolean    return typeid boolean_name
case types datalink  return typeid datalink_name
case types tinyint 	   return typeid tinyint_name
case types smallint	   return typeid smallint_name
case types integer 	   return typeid integer_name
case types bigint 	   return typeid longint_name
case types float 	   return typeid float_name
case types real 	   return typeid real_name
case types double 	   return typeid double_name
case types numeric 	   return typeid numeric_name
case types decimal	   return typeid decimal_name
case types char		   return typeid char_name
case types varchar 	   return typeid varchar_name
case types longvarchar 	   return
case types clob        return typeid clob_name
case types date 		   return typeid date_name
case types time 		   return typeid time_name
case types timestamp 	   return typeid timestamp_name
case types binary			   return typeid binary_name
case types varbinary	 	   return typeid varbinary_name
case types longvarbinary 	   return typeid longvarbinary_name
case types blob                return typeid blob_name
case types other		   return
case types java_object	   return
case types ref   return typeid ref_name
case jdbc40translation rowid  return typeid rowid_name
case types struct  return typeid struct_name
case storedformatids xml_type_id    return typeid xml_name
case jdbc40translation sqlxml  return typeid sqlxml_name
default   return string valueof jdbctype