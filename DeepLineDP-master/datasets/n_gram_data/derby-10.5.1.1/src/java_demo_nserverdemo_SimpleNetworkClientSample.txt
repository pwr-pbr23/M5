/*
derby - class simplenetworkclientsample
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
import java lang reflect invocationtargetexception
import java lang reflect method
import java sql connection
import java sql drivermanager
import java sql resultset
import java sql sqlexception
import java sql statement
import java util properties
import javax sql datasource
/**
* the primary purpose of this program is to demonstrate how to obtain
* client connections using drivermanager or a datasource
* and interact with derby network server
*
* in particular,this sample program
* 1)   loads the db2 universal jdbc driver or the derby network client driver
(default is the derby network client driver)
* 2)	obtains a client connection using the driver manager
* 3)	obtains a client connection using a datasource
* 4)	tests the database connections by executing a sample query
* and then exits the program
*
* before running this program, please make sure that clouscape network server is up
* and running.
*  <p>
*  usage: java simplenetworkclientsample
*
*/
public class simplenetworkclientsample
/*
* the database is located in the same directory where this program is being
* run. alternately one can specify the absolute path of the database location
*/
private static string dbname
/**
* derby network server port ; default is 1527
*/
private static int networkserver_port 1527
/**
* db2 jdbc universal driver class names
*/
private static final string db2_jdbc_universal_driver
private static final string db2_jcc_ds
/**
* derby network client driver class names
*/
public static final string derby_client_driver
private static final string derby_client_ds
/**
* this url is used to connect to derby network server using the drivermanager.
* this url is for the db2 jdbc universal driver
* notice that the properties may be established via the url syntax
*/
private static final string cs_ns_dburl    networkserver_port   dbname
// url for the derby client jdbc driver.
private static final string derby_client_url     networkserver_port   dbname
// default to using the derby client jdbc driver for database connections
string url   derby_client_url
string jdbcdriver   derby_client_driver
string jdbcdatasource   derby_client_ds
public static void main  string args  throws exception
new simplenetworkclientsample   startsample args
public void startsample  string args  throws exception
datasource clientdatasource   null
connection clientconn1   null
connection clientconn2   null
try
system out println
// determine which jdbc driver to use
parsearguments args
// load  the appropriate jdbc driver
loaddriver
// get a client connection using drivermanager
clientconn1   getclientdrivermanagerconnection
system out println
// create a datasource with the necessary information
javax sql datasource mydatasource   getclientdatasource dbname  null  null
// get a client connection using datasource
clientconn2   getclientdatasourceconn mydatasource
system out println
// test connections by doing some work
system out println
test clientconn1
system out println
test clientconn2
system out println
catch  sqlexception sqle
system out println     sqle
sqle printstacktrace
finally
if clientconn1    null
clientconn1 close
if clientconn2    null
clientconn2 close
/**
* get a database connection from datasource
* @pre derby network server is started
* @param	ds	data source
* @return	returns database connection
* @throws exception if there is any error
*/
public connection getclientdatasourceconn javax sql datasource ds
throws exception
connection conn   ds getconnection
system out print
system out println conn getmetadata   getdrivername
return conn
/**
* creates a client data source and sets all the necessary properties in order to
* connect to derby network server
* the server is assumed to be running on 1527 and on the localhost
* @param	database	database name; can include derby url attributes
* @param	user		database user
* @param	password
* @return	returns datasource
* @throws exception if there is any error
*/
public javax sql datasource getclientdatasource string database  string user  string
password  throws sqlexception  classnotfoundexception  instantiationexception  illegalaccessexception  nosuchmethodexception  invocationtargetexception
class nsdatasource   class forname jdbcdatasource
datasource ds    datasource  nsdatasource newinstance
// can also include derby url attributes along with the database name
class methodparams   new class  string class
method dbname   nsdatasource getmethod    methodparams
object args   new object  database
dbname invoke ds  args
if  user    null
method setuser   nsdatasource getmethod    methodparams
args   new object  user
setuser invoke ds  args
if  password    null
method setpw   nsdatasource getmethod    methodparams
args   new object  password
setpw invoke ds  args
// host on which network server is running
method servername   nsdatasource getmethod    methodparams
args   new object
servername invoke ds  args
// port on which network server is listening
methodparams   new class  int class
method portnumber   nsdatasource getmethod    methodparams
args   new object  new integer 1527
portnumber invoke ds  args
// the following is only applicable to the db2 jdbc driver
if jdbcdatasource equals  db2_jcc_ds
// driver type must be 4 to access derby network server
method drivertype   nsdatasource getmethod    methodparams
args   new object  new integer 4
drivertype invoke ds  args
return ds
/**
* load the appropriate jdbc driver
*/
public void loaddriver
throws exception
// load the  driver
class forname jdbcdriver  newinstance
/**
* get a client connection using the drivermanager
* @pre the jdbc driver must have been loaded before calling this method
* @return connection	client database connection
*/
public connection getclientdrivermanagerconnection
throws exception
// see derby documentation for description of properties that may be set
//  in the context of the network server.
properties properties   new java util properties
// the user and password properties are a must, required by jcc
properties setproperty
properties setproperty
// get database connection  via drivermanager api
connection conn   drivermanager getconnection url properties
return conn
/**
* test a connection by executing a sample query
* @param	conn 	database connection
* @throws exception if there is any error
*/
public void test connection conn
throws exception
statement stmt   null
resultset rs   null
try
// to test our connection, we will try to do a select from the system catalog tables
stmt   conn createstatement
rs   stmt executequery
while rs next
system out println    rs getint 1
catch sqlexception sqle
system out println    sqle
throw sqle
finally
if rs    null
rs close
if stmt    null
stmt close
/**
* determine which jdbc driver to use by parsing the command line args.
*  accepted values:
*  jccjdbclient   - the db2 type 4 universal driver
*  derbyclient    - the derby network driver (default).
*  note: because this is just a sample, we only care about whether
*  the above values are specified.  if they are not, then we default
*  to the derby network driver.
*/
private void parsearguments string args
int length   args length
for  int index   0  index < length  index
if  args equalsignorecase
jdbcdriver   db2_jdbc_universal_driver
jdbcdatasource   db2_jcc_ds
url   cs_ns_dburl
break
else if  args equalsignorecase
jdbcdriver   derby_client_driver
jdbcdatasource   derby_client_ds
url   derby_client_url
break