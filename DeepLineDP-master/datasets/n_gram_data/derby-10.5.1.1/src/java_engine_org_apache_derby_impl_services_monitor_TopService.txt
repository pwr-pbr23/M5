/*
derby - class org.apache.derby.impl.services.monitor.topservice
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl services monitor
import org apache derby iapi services monitor modulecontrol
import org apache derby iapi services monitor monitor
import org apache derby iapi services monitor persistentservice
import org apache derby iapi error standardexception
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi reference sqlstate
import org apache derby iapi reference enginetype
import java util hashtable
import java util vector
import java util properties
import java util locale
/**
a description of an instance of a module.
*/
final class topservice
/*
** fields.
*/
/**
the idenity of this service, note that it may not be active yet.
*/
protocolkey key
/**
the top module instance
*/
moduleinstance topmodule
/**
list of protocols.
*/
hashtable		protocoltable
/**
*/
vector		moduleinstances
/**
*/
basemonitor	monitor
boolean inshutdown
/**
the type of service this was created by. if null then this is a non-persistent service.
*/
persistentservice servicetype
locale servicelocale
/*
** constructor
*/
topservice basemonitor monitor
super
this monitor   monitor
protocoltable   new hashtable
moduleinstances   new vector 0  5
topservice basemonitor monitor  protocolkey key  persistentservice servicetype  locale servicelocale
this monitor
this key   key
this servicetype   servicetype
this servicelocale   servicelocale
void settopmodule object instance
synchronized  this
for  int i   0  i < moduleinstances size    i
moduleinstance module    moduleinstance  moduleinstances elementat i
if  module getinstance      instance
topmodule   module
notifyall
break
// now add an additional entry into the hashtable
// that maps the server name as seen by the user
// onto the top module. this allows modules to find their
// top most service moduel using the monitor.getservicename() call,
// e.g. monitor.findmodule(ref, inferface, monitor.getservicename(ref));
if  getservicetype      null
protocolkey userkey   new protocolkey key getfactoryinterface
monitor getservicename instance
addtoprotocol userkey  topmodule
object getservice
return topmodule getinstance
boolean ispotentialservice protocolkey otherkey
string othercanonicalname
if  servicetype    null
othercanonicalname   otherkey getidentifier
else
try
othercanonicalname   servicetype getcanonicalservicename otherkey getidentifier
catch  standardexception se
return false
// if the service name cannot be converted into a canonical name then it is not a service.
if  othercanonicalname    null
return false
if  topmodule    null
return topmodule istypeandname servicetype  key getfactoryinterface    othercanonicalname
if   otherkey getfactoryinterface   isassignablefrom key getfactoryinterface
return false
return servicetype issameservice key getidentifier    othercanonicalname
boolean isactiveservice
synchronized  this
return  topmodule    null
boolean isactiveservice protocolkey otherkey
synchronized  this
if  inshutdown
return false
if   ispotentialservice otherkey
return false
if  topmodule    null
if  sanitymanager debug
sanitymanager assert topmodule istypeandname servicetype
key getfactoryinterface    key getidentifier
return true
// now wait for topmodule to be set
while   inshutdown     topmodule    null
try
wait
catch  interruptedexception ioe
return false
if  inshutdown
return false
return true
/**
find an module in the protocol table that supports the required protocol
name combination and can handle the properties.
returns the instance of the module or null if one does not exist in
the protocol table.
*/
synchronized object findmodule protocolkey key  boolean findonly  properties properties
moduleinstance module    moduleinstance  protocoltable get key
if  module    null
return null
object instance   module getinstance
if  findonly    basemonitor cansupport instance  properties
return instance
return null
/**
boot a module, performs three steps.
<ol>
<li> look for an existing module in the protocol table
<li> look for a module in the implementation table that handles this protocol
<li> create an instance that handles this protocol.
</ol>
*/
object bootmodule boolean create  object service  protocolkey key  properties properties
throws standardexception
synchronized  this
if  inshutdown
throw standardexception newexception sqlstate shutdown_database  getkey   getidentifier
//  see if this system already has a module that will work.
object instance   findmodule key  false  properties
if  instance    null
return instance
if  monitor reporton
monitor report     key tostring         create
// see if a running implementation will handle this protocol
synchronized  this
for  int i   0  i < moduleinstances size    i
moduleinstance module    moduleinstance  moduleinstances elementat i
if   module istypeandname  persistentservice  null  key getfactoryinterface    key getidentifier
continue
instance   module getinstance
if   basemonitor cansupport instance  properties
continue
// add it to the protocol table, if this returns false then we can't use
// this module, continue looking.
if   addtoprotocol key  module
continue
if  monitor reporton
monitor report     key tostring
monitor report     instance getclass   getname
return instance
// try and load an instance that will support this protocol
instance   monitor loadinstance key getfactoryinterface    properties
if  instance    null
throw monitor missingimplementation key getfactoryinterface   getname
moduleinstance module   new moduleinstance instance  key getidentifier    service
topmodule    null ?  object  null   topmodule getinstance
moduleinstances addelement module
try
basemonitor boot instance  create  properties
catch  standardexception se
moduleinstances removeelement module
throw se
synchronized  this
// add it to the protocol table, if this returns false then we can't use
// this module, shut it down.
if  addtoprotocol key  module
if  monitor reporton
monitor report     key tostring
monitor report     module getinstance   getclass   getname
return module getinstance
topservice stop instance
moduleinstances removeelement module
// if we reached here it's because someone else beat us adding the module, so use theirs.
return findmodule key  true  properties
/**
if the service is already beign shutdown we return false.
*/
boolean shutdown
synchronized  this
if  inshutdown
return false
inshutdown   true
notifyall
for
moduleinstance module
synchronized  this
if  moduleinstances isempty
return true
module    moduleinstance  moduleinstances elementat 0
object instance   module getinstance
topservice stop instance
synchronized  this
moduleinstances removeelementat 0
/**
add a running module into the protocol hash table. return true
if the module was added successfully, false if it couldn't
be added. in the latter case the module should be shutdown
if its reference count is 0.
*/
private boolean addtoprotocol protocolkey key  moduleinstance module
string identifier   module getidentifier
synchronized  this
object value   protocoltable get key
if  value    null
protocoltable put key  module
return true
if  value    module
return true
return false
boolean inservice object instance
for  int i   0  i < moduleinstances size    i
moduleinstance mi    moduleinstance  moduleinstances elementat i
if  mi getinstance      instance
return true
return false
public protocolkey getkey
return key
persistentservice getservicetype
return servicetype
private static void stop object instance
if  instance instanceof modulecontrol
modulecontrol  instance  stop