/*
derby - class org.apache.derby.impl.sql.execute.rowcountresultset
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl sql execute
import org apache derby iapi sql conn statementcontext
import org apache derby iapi sql execute cursorresultset
import org apache derby iapi sql execute execrow
import org apache derby iapi sql execute noputresultset
import org apache derby iapi sql activation
import org apache derby iapi error standardexception
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi types rowlocation
/**
* this result set implements the filtering of rows needed for the <result
* offset clause> and the <fetch first clause>.  it sits on top of the normal
* select's top result set, but under any scrollinsensitiveresultset needed for
* cursors. the latter positioning is needed for the correct functioning of
* <result offset clause> and <fetch first clause> in the presence of
* scrollable and/or updatable result sets and current of cursors.
*
* it is only ever generated if at least one of the two clauses is present.
*/
class rowcountresultset extends noputresultsetimpl
implements cursorresultset
// set in constructor and not altered during
// life of object.
final noputresultset source
final private boolean runtimestatson
private long offset
private long fetchfirst
/**
* rowcountresultset constructor
*
* @param s               the source result set being filtered
* @param a               the activation for this result set,
*                        which provides the context for the row
*                        allocation operation
* @param resultsetnumber the resultsetnumber for the resultset
* @param offset          the offset value (0 by default)
* @param fetchfirst      the fetch first value (-1 if not in use)
* @param optimizerestimatedrowcount
*                        estimated total # of rows by optimizer
* @param optimizerestimatedcost
*                        estimated total cost by optimizer
* @exception standardexception standard error policy
*/
rowcountresultset
noputresultset s
activation a
int resultsetnumber
long offset
long fetchfirst
double optimizerestimatedrowcount
double optimizerestimatedcost
throws standardexception
super a
resultsetnumber
optimizerestimatedrowcount
optimizerestimatedcost
source   s
this offset   offset
this fetchfirst   fetchfirst
/* remember whether or not runtimestatistics is on */
runtimestatson
getlanguageconnectioncontext   getruntimestatisticsmode
recordconstructortime
//
// noputresultset interface
//
/**
* open a scan on the table. scan parameters are evaluated
* at each open, so there is probably some way of altering
* their values...
*
* @exception standardexception thrown if cursor finished.
*/
public void opencore   throws standardexception
boolean constanteval   true
begintime   getcurrenttimemillis
source opencore
isopen   true
numopens
opentime    getelapsedmillis begintime
/**
* reopen a scan on the table. scan parameters are evaluated
* at each open, so there is probably some way of altering
* their values...
*
* @exception standardexception thrown if cursor finished.
*/
public void reopencore   throws standardexception
boolean constanteval   true
begintime   getcurrenttimemillis
if  sanitymanager debug
sanitymanager assert isopen
source reopencore
isopen   true
numopens
opentime    getelapsedmillis begintime
/**
* return the requested values computed from the next row (if any)
* <p>
* @exception standardexception thrown on failure.
* @exception standardexception resultsetnotopen thrown if not yet open.
*
* @return the next row in the result
*/
public execrow  getnextrowcore   throws standardexception
execrow result   null
begintime   getcurrenttimemillis
if  offset > 0
do
result   source getnextrowcore
offset
if  result    null    offset >  0
rowsfiltered
else
break
while  true
// only skip row first time
offset   0
else
if  fetchfirst     1    rowsseen >  fetchfirst
result   null
else
result   source getnextrowcore
if  result    null
rowsseen
setcurrentrow result
if  runtimestatson
if    istopresultset
// this is simply for runtimestats.  we first need to get the
// subquery tracking array via the statementcontext
statementcontext sc   activation getlanguageconnectioncontext
getstatementcontext
subquerytrackingarray   sc getsubquerytrackingarray
nexttime    getelapsedmillis begintime
return result
/**
* return the total amount of time spent in this resultset
*
* @param type
*    current_resultset_only - time spent only in this resultset
*    entire_resultset_tree  - time spent in this resultset and below.
*
* @return long     the total amount of time spent (in milliseconds).
*/
public long gettimespent int type
long tottime   constructortime   opentime   nexttime   closetime
if  type    current_resultset_only
return  tottime   source gettimespent entire_resultset_tree
else
return tottime
// resultset interface
/**
* @see org.apache.derby.iapi.sql.resultset#close
*/
public void close   throws standardexception
begintime   getcurrenttimemillis
if   isopen
// we don't want to keep around a pointer to the
// row ... so it can be thrown away.
// revisit: does this need to be in a finally
// block, to ensure that it is executed?
clearcurrentrow
source close
super close
else
if  sanitymanager debug
sanitymanager debug
closetime    getelapsedmillis begintime
/**
* @see org.apache.derby.iapi.sql.resultset#finish
*/
public void finish   throws standardexception
source finish
finishandrts
/**
* @see org.apache.derby.iapi.sql.resultset#clearcurrentrow
*/
public final void clearcurrentrow
currentrow   null
activation clearcurrentrow resultsetnumber
// added this since we need it to keep in synch for updatable result
// sets/cursors; this result set needs to be "transparent" in such
// cases, cf. getcurrentrow which gets the current row from the source
// as well.
source clearcurrentrow
//
// cursorresultset interface
//
/**
* gets information from its source.
*
* @see org.apache.derby.iapi.sql.execute.cursorresultset#getrowlocation
*/
public rowlocation getrowlocation   throws standardexception
return    cursorresultset source   getrowlocation
/**
* gets information from source
*
* @see org.apache.derby.iapi.sql.execute.cursorresultset#getcurrentrow
* @return the last row returned.
*/
/* resolve - this should return activation.getcurrentrow(resultsetnumber),
* once there is such a method.  (currentrow is redundant)
*/
public execrow getcurrentrow   throws standardexception
return    cursorresultset source   getcurrentrow
// return currentrow;
/**
* override of noputresultsetimpl method. ask the source.
*/
public boolean isforupdate
return source isforupdate
/**
* return underlying result set (the source og this result set) if it is a
* projectrestrictresultset, else null.
*/
public projectrestrictresultset getunderlyingprojectrestrictrs
if  source instanceof projectrestrictresultset
return  projectrestrictresultset source
else
return null