/*
derby - class org.apache.derby.impl.services.bytecode.bcclass
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl services bytecode
import org apache derby iapi services compiler classbuilder
import org apache derby iapi services compiler methodbuilder
import org apache derby iapi services compiler localfield
import org apache derby iapi services classfile classholder
import org apache derby iapi services classfile classmember
import org apache derby iapi services classfile classformatoutput
import org apache derby iapi services loader classfactory
import org apache derby iapi services monitor monitor
import org apache derby iapi error standardexception
import org apache derby iapi reference property
import org apache derby iapi reference sqlstate
import org apache derby iapi util bytearray
import org apache derby iapi services classfile vmopcode
import java lang reflect modifier
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi services classfile vmdescriptor
import org apache derby impl services bytecode gclass
import java io ioexception
/**
* classbuilder is used to construct a java class's byte array
* representation.
*
* limitations:
*   no checking for language use violations such as invalid modifiers
*	or duplicate field names.
*   all classes must have a superclass; java.lang.object must be
*      supplied if there is no superclass.
*
* <p>
* when a class is first created, it has:
* <ul>
* <li> a superclass
* <li> modifiers
* <li> a name
* <li> a package
* <li> no superinterfaces, methods, fields, or constructors
* <li> an empty static initializer
* <li> an empty initializer
* </ul>
* <p>
* methodbuilder implementations are required to supply a way for
* generators to give them code.  most typically, they may have
* a stream to which the generator writes the code that is of
* the type to satisfy what the generator is writing.
* <p>
* bcclass is a classbuilder implementation for generating java bytecode
* directly.
*
*/
class bcclass extends gclass
/**
* simple text indicating any limits execeeded while generating
* the class file.
*/
string limitmsg
//
// classbuilder interface
//
/**
* add a field to this class. fields cannot
* be initialized here, they must be initialized
* in the static initializer code (static fields)
* or in the constructors.
* <p>
* static fields also added to this list,
* with the modifier set appropriately.
*/
public localfield addfield string javatype  string name  int modifiers
type type   factory type javatype
// put it into the class holder right away.
classmember field   classhold addmember name  type vmname    modifiers
int cpi   classhold addfieldreference field
return new bclocalfield type  cpi
/**
* at the time the class is completed and bytecode
* generated, if there are no constructors then
* the default no-arg constructor will be defined.
*/
public bytearray getclassbytecode   throws standardexception
// return if already done
if  bytecode    null  return bytecode
try
if  sanitymanager debug
if  sanitymanager debug_on
classformatoutput sout   new classformatoutput 2
int cpiutf   classhold addutf8
sout putu2 cpiutf
classhold addattribute    sout
// the class is now complete, get its bytecode.
bytecode   classhold getfileformat
catch  ioexception ioe
throw standardexception newexception
sqlstate generated_class_linkage_error  ioe  getfullname
// release resources, we have the code now.
// name is not released, it may still be accessed.
classhold   null
if  sanitymanager debug
if  sanitymanager debug_on
/* dump the file in derby.system.home */
string systemhome   system getproperty property system_home_property
writeclassfile systemhome false null
if  sanitymanager debug
if  sanitymanager debug_on
sanitymanager debug
name
if  limitmsg    null
throw standardexception newexception
sqlstate generated_class_limit_exceeded  getfullname    limitmsg
return bytecode
/**
* the class's unqualified name
*/
public string getname
return name
/**
* a method. once it is created, thrown
* exceptions, statements, and local variable declarations
* must be added to it. it is put into its defining class
* when it is created.
* <verbatim>
java: #modifiers #returntype #methodname() {}
// modifiers is the | of the jvm constants for
// the modifiers such as static, public, etc.
</verbatim>
* <p>
* this is used to start a constructor as well; pass in
* null for the returntype when used in that manner.
*
* see java.lang.reflect.modifiers
* @param modifiers the | of the modifiers
*	constants representing the visibility and control of this
*	method.
* @param returntype the return type of the method as its
*	java language type name.
* @param methodname the name of the method.
*
* @return the method builder.
*/
public methodbuilder newmethodbuilder int modifiers  string returntype
string methodname
return newmethodbuilder modifiers  returntype
methodname   string  null
/**
* a method with parameters. once it is created, thrown
* exceptions, statements, and local variable declarations
* must be added to it. it is put into its defining class
* when it is created.
* <verbatim>
java: #modifiers #returntype #methodname() {}
// modifiers is the | of the jvm constants for
// the modifiers such as static, public, etc.
</verbatim>
* <p>
* this is used to start a constructor as well; pass in
* null for the returntype when used in that manner.
*
* see java.lang.reflect.modifiers
* @param modifiers the | of the modifiers
*	constants representing the visibility and control of this
*	method.
* @param returntype the return type of the method as its
*	java language type name.
* @param methodname the name of the method.
* @param parms an array of parameterdeclarations representing the
*				method's parameters
*
* @return the method builder.
*/
public methodbuilder newmethodbuilder int modifiers  string returntype
string methodname  string parms
if  sanitymanager debug
sanitymanager assert returntype  null
bcmethod m   new bcmethod this
returntype
methodname
modifiers
parms
factory
return m
/**
* a constructor. once it is created, thrown
* exceptions, statements, and local variable declarations
* must be added to it. it is put into its defining class
* when it is created.
* <verbatim>
java: #modifiers #classname() {}
// modifiers is the | of the jvm constants for
// the modifiers such as static, public, etc.
// classname is taken from definingclass.getname()
</verbatim>
* <p>
* this is used to start a constructor as well; pass in
* null for the returntype when used in that manner.
*
* see modifiers
* @param modifiers the | of the modifiers
*	constants representing the visibility and control of this
*	method.
*
* @return the method builder for the constructor.
*/
public methodbuilder newconstructorbuilder int modifiers
bcmethod m   new bcmethod this
modifiers
string   null
factory
return m
//
// class interface
//
string getsuperclassname
return superclassname
/**
* let those that need to get to the
* classmodify tool to alter the class definition.
*/
classholder modify
return classhold
/*
** method descriptor caching
*/
bcclass classfactory cf  string packagename  int classmodifiers
string classname  string superclassname
bcjava factory
super cf  packagename concat classname
if  sanitymanager debug
if  sanitymanager debug_on
sanitymanager debug
classname
// by the time the constructor is done, we have:
//
// package #packagename;
// #classmodifiers class #classname extends #superclassname
// { }
//
name   classname
if  superclassname    null
superclassname
this superclassname   superclassname
classtype   factory type getfullname
classhold   new classholder qualifiedname  factory type superclassname  vmnamesimple  classmodifiers
this factory   factory
protected classholder classhold
protected string superclassname
protected string name
bcjava factory
final type classtype
classfactory getclassfactory
return cf
public void newfieldwithaccessors string getter  string setter
int methodmodifers
boolean staticfield  string type
string vmtype   factory type type  vmname
methodmodifers    modifier final
// add a field, field has same name as get method
int fieldmodifiers   modifier private
if  staticfield
fieldmodifiers    modifier static
classmember field   classhold addmember getter  vmtype  fieldmodifiers
int cpi   classhold addfieldreference field
/*
** add the get method
*/
string sig   bcmethoddescriptor get bcmethoddescriptor empty  vmtype  factory
classmember method   classhold addmember getter  sig  methodmodifers
codechunk chunk   new codechunk this
// load 'this' if required
if   staticfield
chunk addinstr vmopcode aload_0      this
// get the field value
chunk addinstru2  staticfield ? vmopcode getstatic   vmopcode getfield   cpi
// and return it
short vmtypeid   bcjava vmtypeid vmtype
chunk addinstr codechunk return_opcode
int typewidth   type width vmtypeid
chunk complete null  classhold  method  typewidth  1
/*
** add the set method
*/
string pda   new string
pda   vmtype
sig   new bcmethoddescriptor pda  vmdescriptor void  factory  tostring
method   classhold addmember setter  sig  methodmodifers
chunk   new codechunk this
// load 'this' if required
if   staticfield
chunk addinstr vmopcode aload_0      this
// push the only parameter
chunk addinstr  short   codechunk load_variable_fast   1
// and set the field
chunk addinstru2  staticfield ? vmopcode putstatic   vmopcode putfield   cpi
chunk addinstr vmopcode return
chunk complete null  classhold  method  typewidth    staticfield ? 0   1   1   typewidth
/**
* add the fact that some class limit was exceeded while generating
* the class. we create a set of them and report at the end, this
* allows the generated class file to still be dumped.
* @param mb
* @param limitname
* @param limit
* @param value
*/
void addlimitexceeded bcmethod mb  string limitname  int limit  int value
stringbuffer sb   new stringbuffer
if  limitmsg    null
sb append limitmsg
sb append
sb append
sb append mb getname
sb append
sb append limitname
sb append
sb append value
sb append
sb append limit
sb append
limitmsg   sb tostring
/**
* add the fact that some class limit was exceeded while generating
* the class. text is the simple string passed in.
* @param rawtext text to be reported.
*
* @see bcclass#addlimitexceeded(bcmethod, string, int, int)
*/
void addlimitexceeded string rawtext
if  limitmsg    null
limitmsg   limitmsg       rawtext
else
limitmsg   rawtext