/*
derby - class org.apache.derby.impl.sql.genericcolumndescriptor
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl sql
import org apache derby iapi sql resultcolumndescriptor
import org apache derby iapi types datatypedescriptor
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi services io storedformatids
import org apache derby iapi services io formatidutil
import org apache derby iapi services io formatable
import org apache derby iapi services io formatablehashtable
import org apache derby iapi services io formatableintholder
import java io objectoutput
import java io objectinput
import java io ioexception
/**
* this is a stripped down implementation of a column
* descriptor that is intended for generic use.  it
* can be seralized and attached to plans.
*
*/
public final class genericcolumndescriptor
implements resultcolumndescriptor  formatable
/********************************************************
**
**	this class implements formatable. that means that it
**	can write itself to and from a formatted stream. if
**	you add more fields to this class, make sure that you
**	also write/read them with the writeexternal()/readexternal()
**	methods.
**
**	if, inbetween releases, you add more fields to this class,
**	then you should bump the version number emitted by the gettypeformatid()
**	method.
**
********************************************************/
private string				name
private string				schemaname
private string				tablename
private int					columnpos
private datatypedescriptor	type
private boolean 			isautoincrement
private boolean 			updatablebycursor
private boolean             hasgenerationclause
/**
* niladic constructor for formatable
*/
public genericcolumndescriptor
public genericcolumndescriptor string name  datatypedescriptor	type
this name   name
this type   type
/**
* this constructor is used to build a generic (and
* formatable) columndescriptor.  the idea is that
* it can be passed a columndescriptor from a query
* tree and convert it to something that can be used
* anywhere.
*
* @param rcd the resultcolumndescriptor
*/
public genericcolumndescriptor resultcolumndescriptor rcd
name   rcd getname
tablename   rcd getsourcetablename
schemaname   rcd getsourceschemaname
columnpos   rcd getcolumnposition
type   rcd gettype
isautoincrement   rcd isautoincrement
updatablebycursor   rcd updatablebycursor
hasgenerationclause   rcd hasgenerationclause
/**
* returns a datatypedescriptor for the column. this datatypedescriptor
* will not represent an actual value, it will only represent the type
* that all values in the column will have.
*
* @return	a datatypedescriptor describing the type of the column.
*/
public datatypedescriptor	gettype
return type
/**
* returns the name of the column.
*
* @return	a string containing the name of the column.
*/
public string	getname
return name
/**
* get the name of the schema for the column's base table, if any.
* following example queries will all return app (assuming user is in schema app)
* select t.a from t
* select b.a from t as b
* select app.t.a from t
*
* @return	a string containing the name of the schema of the column's table.
*		if the column is not in a schema (i.e. is a derived column), it returns null.
*/
public string	getsourceschemaname
return schemaname
/**
* get the name of the underlying(base) table this column comes from, if any.
* following example queries will all return t
* select a from t
* select b.a from t as b
* select t.a from t
*
* @return	a string containing the name of the column's base table.
*		if the column is not in a table (i.e. is a derived column), it returns null.
*/
public string	getsourcetablename
return tablename
/**
* get the position of the column.
* note - position is 1-based.
*
* @return	an int containing the position of the column
*		within the table.
*/
public int	getcolumnposition
return columnpos
public boolean isautoincrement
return isautoincrement
public boolean updatablebycursor
return updatablebycursor
public boolean hasgenerationclause     return hasgenerationclause
//////////////////////////////////////////////
//
// formatable
//
//////////////////////////////////////////////
/**
* write this object out
*
* @param out write bytes here
*
* @exception ioexception thrown on error
*/
public void writeexternal objectoutput out  throws ioexception
formatablehashtable fh   new formatablehashtable
fh put    name
fh put    tablename
fh put    schemaname
fh putint    columnpos
fh put    type
fh putboolean    isautoincrement
fh putboolean    updatablebycursor
out writeobject fh
return
/**
* read this object from a stream of stored objects.
*
* @param in read this.
*
* @exception ioexception					thrown on error
* @exception classnotfoundexception		thrown on error
*/
public void readexternal objectinput in
throws ioexception  classnotfoundexception
formatablehashtable fh    formatablehashtable in readobject
name    string fh get
tablename    string fh get
schemaname    string fh get
columnpos   fh getint
type    datatypedescriptor fh get
isautoincrement   fh getboolean
updatablebycursor   fh getboolean
/**
* get the formatid which corresponds to this class.
*
*	@return	the formatid of this class
*/
public	int gettypeformatid  	  return storedformatids generic_column_descriptor_v02_id
public string tostring
if  sanitymanager debug
return   name
schemaname   tablename
columnpos
type
else
return