/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase codec
import java io ioexception
import java io inputstream
import java io outputstream
import org apache hadoop hbase cell
import org apache hadoop hbase keyvalue
import org apache hadoop hbase keyvalueutil
/**
* codec that does keyvalue version 1 serialization.
*
* <p>encodes by casting cell to keyvalue and writing out the backing array with a length prefix.
* this is how kvs were serialized in puts, deletes and results pre-0.96.  its what would
* happen if you called the writable#write keyvalue implementation.  this encoder will fail
* if the passed cell is not an old-school pre-0.96 keyvalue.  does not copy bytes writing.
* it just writes them direct to the passed stream.
*
* <p>if you wrote two keyvalues to this encoder, it would look like this in the stream:
* <pre>
* length-of-keyvalue1 // a java int with the length of keyvalue1 backing array
* keyvalue1 backing array filled with a keyvalue serialized in its particular format
* length-of-keyvalue2
* keyvalue2 backing array
* </pre>
*/
public class keyvaluecodec implements codec
static class keyvalueencoder extends baseencoder
keyvalueencoder final outputstream out
super out
@override
public void write cell cell  throws ioexception
checkflushed
// this is crass and will not work when kv changes. also if passed a non-kv cell, it will
// make expensive copy.
try
keyvalue oswrite  keyvalue keyvalueutil ensurekeyvalue cell   this out
catch  ioexception e
throw new codecexception e
static class keyvaluedecoder extends basedecoder
keyvaluedecoder final inputstream in
super in
protected cell parsecell   throws ioexception
return keyvalue iscreate in
/**
* implementation depends on {@link inputstream#available()}
*/
@override
public decoder getdecoder final inputstream is
return new keyvaluedecoder is
@override
public encoder getencoder outputstream os
return new keyvalueencoder os