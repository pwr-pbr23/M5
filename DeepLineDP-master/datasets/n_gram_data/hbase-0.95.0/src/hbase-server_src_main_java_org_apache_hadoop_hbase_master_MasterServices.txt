/**
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase master
import java io ioexception
import org apache hadoop classification interfaceaudience
import org apache hadoop hbase hcolumndescriptor
import org apache hadoop hbase hregioninfo
import org apache hadoop hbase htabledescriptor
import org apache hadoop hbase server
import org apache hadoop hbase tabledescriptors
import org apache hadoop hbase exceptions tablenotdisabledexception
import org apache hadoop hbase exceptions tablenotfoundexception
import org apache hadoop hbase executor executorservice
import com google protobuf service
/**
* services master supplies
*/
@interfaceaudience private
public interface masterservices extends server
/**
* @return master's instance of the {@link assignmentmanager}
*/
public assignmentmanager getassignmentmanager
/**
* @return master's filesystem {@link masterfilesystem} utility class.
*/
public masterfilesystem getmasterfilesystem
/**
* @return master's {@link servermanager} instance.
*/
public servermanager getservermanager
/**
* @return master's instance of {@link executorservice}
*/
public executorservice getexecutorservice
/**
* @return master's instance of {@link tablelockmanager}
*/
public tablelockmanager gettablelockmanager
/**
* @return master's instance of {@link mastercoprocessorhost}
*/
public mastercoprocessorhost getcoprocessorhost
/**
* check table is modifiable; i.e. exists and is offline.
* @param tablename name of table to check.
* @throws tablenotdisabledexception
* @throws tablenotfoundexception
* @throws ioexception
*/
// we actually throw the exceptions mentioned in the
public void checktablemodifiable final byte  tablename
throws ioexception  tablenotfoundexception  tablenotdisabledexception
/**
* create a table using the given table definition.
* @param desc the table definition
* @param splitkeys starting row keys for the initial table regions.  if null
*     a single region is created.
*/
public void createtable htabledescriptor desc  byte  splitkeys
throws ioexception
/**
* delete a table
* @param tablename the table name
* @throws ioexception
*/
public void deletetable final byte tablename  throws ioexception
/**
* modify the descriptor of an existing table
* @param tablename the table name
* @param descriptor the updated table descriptor
* @throws ioexception
*/
public void modifytable final byte tablename  final htabledescriptor descriptor
throws ioexception
/**
* enable an existing table
* @param tablename the table name
* @throws ioexception
*/
public void enabletable final byte tablename  throws ioexception
/**
* disable an existing table
* @param tablename the table name
* @throws ioexception
*/
public void disabletable final byte tablename  throws ioexception
/**
* add a new column to an existing table
* @param tablename the table name
* @param column the column definition
* @throws ioexception
*/
public void addcolumn final byte tablename  final hcolumndescriptor column
throws ioexception
/**
* modify the column descriptor of an existing column in an existing table
* @param tablename the table name
* @param descriptor the updated column definition
* @throws ioexception
*/
public void modifycolumn byte tablename  hcolumndescriptor descriptor
throws ioexception
/**
* delete a column from an existing table
* @param tablename the table name
* @param columnname the column name
* @throws ioexception
*/
public void deletecolumn final byte tablename  final byte columnname
throws ioexception
/**
* @return return table descriptors implementation.
*/
public tabledescriptors gettabledescriptors
/**
* @return true if master enables servershutdownhandler;
*/
public boolean isservershutdownhandlerenabled
/**
* registers a new protocol buffer {@link service} subclass as a master coprocessor endpoint to
* be available for handling
* {@link org.apache.hadoop.hbase.masteradminprotocol#execmasterservice(com.google.protobuf.rpccontroller,
* org.apache.hadoop.hbase.protobuf.generated.clientprotos.coprocessorservicerequest)} calls.
*
* <p>
* only a single instance may be registered for a given {@link service} subclass (the
* instances are keyed on {@link com.google.protobuf.descriptors.servicedescriptor#getfullname()}.
* after the first registration, subsequent calls with the same service name will fail with
* a return value of {@code false}.
* </p>
* @param instance the {@code service} subclass instance to expose as a coprocessor endpoint
* @return {@code true} if the registration was successful, {@code false}
* otherwise
*/
public boolean registerservice service instance
/**
* merge two regions. the real implementation is on the regionserver, master
* just move the regions together and send merge rpc to regionserver
* @param region_a region to merge
* @param region_b region to merge
* @param forcible true if do a compulsory merge, otherwise we will only merge
*          two adjacent regions
* @throws ioexception
*/
public void dispatchmergingregions final hregioninfo region_a
final hregioninfo region_b  final boolean forcible  throws ioexception