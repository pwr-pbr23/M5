/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase replication regionserver
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop classification interfaceaudience
import org apache hadoop conf configuration
import org apache hadoop fs filesystem
import org apache hadoop fs path
import org apache hadoop hbase regionserver wal hlog
import org apache hadoop hbase regionserver wal hlogfactory
import java io ioexception
/**
* wrapper class around hlog to help manage the implementation details
* such as compression.
*/
@interfaceaudience private
public class replicationhlogreadermanager
private static final log log   logfactory getlog replicationhlogreadermanager class
private final filesystem fs
private final configuration conf
private long position   0
private hlog reader reader
private path lastpath
/**
* creates the helper but doesn't open any file
* use setinitialposition after using the constructor if some content needs to be skipped
* @param fs
* @param conf
*/
public replicationhlogreadermanager filesystem fs  configuration conf
this fs   fs
this conf   conf
/**
* opens the file at the current position
* @param path
* @return an hlog reader.
* @throws ioexception
*/
public hlog reader openreader path path  throws ioexception
// detect if this is a new file, if so get a new reader else
// reset the current reader so that we see the new data
if  this reader    null     this lastpath equals path
this closereader
this reader   hlogfactory createreader this fs  path  this conf
this lastpath   path
else
this reader reset
return this reader
/**
* get the next entry, returned and also added in the array
* @param entriesarray
* @param currentnbentries
* @return a new entry or null
* @throws ioexception
*/
public hlog entry readnextandsetposition hlog entry entriesarray
int currentnbentries  throws ioexception
hlog entry entry   this reader next entriesarray
// store the position so that in the future the reader can start
// reading from here. if the above call to next() throws an
// exception, the position won't be changed and retry will happen
// from the last known good position
this position   this reader getposition
// we need to set the cc to null else it will be compressed when sent to the sink
if  entry    null
entry setcompressioncontext null
return entry
/**
* advance the reader to the current position
* @throws ioexception
*/
public void seek   throws ioexception
if  this position    0
this reader seek this position
/**
* get the position that we stopped reading at
* @return current position, cannot be negative
*/
public long getposition
return this position
public void setposition long pos
this position   pos
/**
* close the current reader
* @throws ioexception
*/
public void closereader   throws ioexception
if  this reader    null
this reader close
this reader   null
/**
* tell the helper to reset internal state
*/
void finishcurrentfile
this position   0
try
this closereader
catch  ioexception e
log warn    e