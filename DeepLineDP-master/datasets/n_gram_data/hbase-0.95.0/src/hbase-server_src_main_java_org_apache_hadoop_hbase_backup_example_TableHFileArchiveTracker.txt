/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase backup example
import java io ioexception
import java util list
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop classification interfaceaudience
import org apache hadoop conf configuration
import org apache hadoop hbase exceptions zookeeperconnectionexception
import org apache hadoop hbase zookeeper zkutil
import org apache hadoop hbase zookeeper zookeeperlistener
import org apache hadoop hbase zookeeper zookeeperwatcher
import org apache zookeeper keeperexception
/**
* track hfile archiving state changes in zookeeper. keeps track of the tables whose hfiles should
* be kept in the archive.
* <p>
* {@link tablehfilearchivetracker#start()} needs to be called to start monitoring for tables to
* archive.
*/
@interfaceaudience private
public class tablehfilearchivetracker extends zookeeperlistener
private static final log log   logfactory getlog tablehfilearchivetracker class
public static final string hfile_archive_znode_parent
private hfilearchivetablemonitor monitor
private string archivehfileznode
private boolean stopped   false
private tablehfilearchivetracker zookeeperwatcher watcher  hfilearchivetablemonitor monitor
super watcher
watcher registerlistener this
this monitor   monitor
this archivehfileznode   zktablearchiveclient getarchiveznode watcher getconfiguration
watcher
/**
* start monitoring for archive updates
* @throws keeperexception on failure to find/create nodes
*/
public void start   throws keeperexception
// if archiving is enabled, then read in the list of tables to archive
log debug
this checkenabledandupdate
log debug
@override
public void nodecreated string path
// if it is the archive path
if   path startswith archivehfileznode   return
log debug     path
// since we are already enabled, just update a single table
string table   path substring archivehfileznode length
// the top level node has come up, so read in all the tables
if  table length      0
checkenabledandupdate
return
// find the table that needs to be archived
try
addandrewatchtable path
catch  keeperexception e
log warn     path
e
@override
public void nodechildrenchanged string path
if   path startswith archivehfileznode   return
log debug     path
// a table was added to the archive
try
updatewatchedtables
catch  keeperexception e
log error    e
/**
* add this table to the tracker and then read a watch on that node.
* <p>
* handles situation where table is deleted in the time between the update and resetting the watch
* by deleting the table via {@link #safestoptrackingtable(string)}
* @param tableznode full zookeeper path to the table to be added
* @throws keeperexception if an unexpected zk exception occurs
*/
private void addandrewatchtable string tableznode  throws keeperexception
getmonitor   addtable zkutil getnodename tableznode
// re-add a watch to the table created
// and check to make sure it wasn't deleted
if   zkutil watchandcheckexists watcher  tableznode
safestoptrackingtable tableznode
/**
* stop tracking a table. ensures that the table doesn't exist, but if it does, it attempts to add
* the table back via {@link #addandrewatchtable(string)} - its a 'safe' removal.
* @param tableznode full zookeeper path to the table to be added
* @throws keeperexception if an unexpected zk exception occurs
*/
private void safestoptrackingtable string tableznode  throws keeperexception
getmonitor   removetable zkutil getnodename tableznode
// if the table exists, then add and rewatch it
if  zkutil checkexists watcher  tableznode  >  0
addandrewatchtable tableznode
@override
public void nodedeleted string path
if   path startswith archivehfileznode   return
log debug     path
string table   path substring archivehfileznode length
// if we stop archiving all tables
if  table length      0
// make sure we have the tracker before deleting the archive
// but if we don't, we don't care about delete
cleartables
// watches are one-time events, so we need to renew our subscription to
// the archive node and might as well check to make sure archiving
// didn't come back on at the same time
checkenabledandupdate
return
// just stop archiving one table
// note that we don't attempt to add another watch for that table into zk.
// we have no assurances that the table will be archived again (or even
// exists for that matter), so its better not to add unnecessary load to
// zk for watches. if the table is created again, then we will get the
// notification in childrenchanaged.
getmonitor   removetable zkutil getnodename path
/**
* sets the watch on the top-level archive znode, and then updates the monitor with the current
* tables that should be archived (and ensures that those nodes are watched as well).
*/
private void checkenabledandupdate
try
if  zkutil watchandcheckexists watcher  archivehfileznode
log debug archivehfileznode
// update the tables we should backup, to get the most recent state.
// this is safer than also watching for children and then hoping we get
// all the updates as it makes sure we get and watch all the children
updatewatchedtables
else
log debug
catch  keeperexception e
log warn    e
/**
* read the list of children under the archive znode as table names and then sets those tables to
* the list of tables that we should archive
* @throws keeperexception if there is an unexpected zk exception
*/
private void updatewatchedtables   throws keeperexception
// get the children and watch for new children
log debug
// get the children and add watches for each of the children
list<string> tables   zkutil listchildrenandwatchthem watcher  archivehfileznode
log debug     tables
// if archiving is still enabled
if  tables    null    tables size   > 0
getmonitor   setarchivetables tables
else
log debug
// only if we currently have a tracker, then clear the archive
cleartables
/**
* remove the currently archived tables.
* <p>
* does some intelligent checking to make sure we don't prematurely create an archive tracker.
*/
private void cleartables
getmonitor   cleararchive
/**
* determine if the given table should or should not allow its hfiles to be deleted
* @param tablename name of the table to check
* @return <tt>true</tt> if its store files should be retained, <tt>false</tt> otherwise
*/
public boolean keephfiles string tablename
return getmonitor   shouldarchivetable tablename
/**
* @return the tracker for which tables should be archived.
*/
public final hfilearchivetablemonitor getmonitor
return this monitor
/**
* create an archive tracker for the passed in server
* @param conf to read for zookeeper connection information
* @return zookeeper tracker to monitor for this server if this server should archive hfiles for a
*         given table
* @throws ioexception if a unexpected exception occurs
* @throws zookeeperconnectionexception if we can't reach zookeeper
*/
public static tablehfilearchivetracker create configuration conf
throws zookeeperconnectionexception  ioexception
zookeeperwatcher zkw   new zookeeperwatcher conf     null
return create zkw  new hfilearchivetablemonitor
/**
* create an archive tracker with the special passed in table monitor. should only be used in
* special cases (e.g. testing)
* @param zkw watcher for the zookeeper cluster that we should track
* @param monitor monitor for which tables need hfile archiving
* @return zookeeper tracker to monitor for this server if this server should archive hfiles for a
*         given table
*/
private static tablehfilearchivetracker create zookeeperwatcher zkw
hfilearchivetablemonitor monitor
return new tablehfilearchivetracker zkw  monitor
public zookeeperwatcher getzookeeperwatcher
return this watcher
/**
* stop this tracker and the passed zookeeper
*/
public void stop
if  this stopped  return
this stopped   true
this watcher close