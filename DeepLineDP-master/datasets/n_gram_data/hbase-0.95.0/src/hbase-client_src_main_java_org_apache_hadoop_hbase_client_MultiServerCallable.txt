/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase client
import java io ioexception
import java util arraylist
import java util list
import java util map
import java util concurrent callable
import org apache hadoop hbase cellscannable
import org apache hadoop hbase hregionlocation
import org apache hadoop hbase ipc payloadcarryingrpccontroller
import org apache hadoop hbase protobuf protobufutil
import org apache hadoop hbase protobuf requestconverter
import org apache hadoop hbase protobuf responseconverter
import org apache hadoop hbase protobuf generated clientprotos
import org apache hadoop hbase protobuf generated clientprotos multirequest
import com google protobuf serviceexception
/**
* callable that handles the <code>multi</code> method call going against a single
* regionserver; i.e. a {@link servercallable} for the multi call (it is not a
* {@link callable} that goes against multiple regions.
* @param <r>
*/
class multiservercallable<r> extends servercallable<multiresponse>
private final multiaction<r> multi
private final hregionlocation loc
multiservercallable final hconnection connection  final byte  tablename
final hregionlocation loc  final multiaction<r> multi
super connection  tablename  null
this multi   multi
this loc   loc
@override
public multiresponse call   throws ioexception
multiresponse response   new multiresponse
// the multi object is a list of actions by region.
for  map entry<byte  list<action<r>>> e  this multi actions entryset
byte regionname   e getkey
int rowmutations   0
list<action<r>> actions   e getvalue
for  action<r> action   actions
row row   action getaction
// row mutations are a set of puts and/or deletes all to be applied atomically
// on the one row.  we do these a row at a time.
if  row instanceof rowmutations
try
rowmutations rms    rowmutations row
// stick all cells for all rowmutations in here into 'cells'.  populated when we call
// buildnodatamultirequest in the below.
list<cellscannable> cells   new arraylist<cellscannable> rms getmutations   size
// build a multi request absent its cell payload (this is the 'nodata' in the below).
multirequest multirequest
requestconverter buildnodatamultirequest regionname  rms  cells
// carry the cells over the proxy/pb service interface using the payload carrying
// rpc controller.
server multi new payloadcarryingrpccontroller cells   multirequest
// this multi call does not return results.
response add regionname  action getoriginalindex    result empty_result
catch  serviceexception se
response add regionname  action getoriginalindex
protobufutil getremoteexception se
rowmutations
// are there any non-rowmutation actions to send for this region?
if  actions size   > rowmutations
exception ex   null
list<object> results   null
// stick all cells for the multirequest in here into 'cells'.  gets filled in when we
// call buildnodatamultirequest
list<cellscannable> cells   new arraylist<cellscannable> actions size     rowmutations
try
// the call to buildnodatamultirequest will skip rowmutations.  they have
// already been handled above.
multirequest multirequest
requestconverter buildnodatamultirequest regionname  actions  cells
// controller optionally carries cell data over the proxy/service boundary and also
// optionally ferries cell response data back out again.
payloadcarryingrpccontroller controller   new payloadcarryingrpccontroller cells
clientprotos multiresponse responseproto   server multi controller  multirequest
results   responseconverter getresults responseproto  controller cellscanner
catch  serviceexception se
ex   protobufutil getremoteexception se
for  int i   0  n   actions size    i < n  i
int originalindex   actions get i  getoriginalindex
response add regionname  originalindex  results    null ? ex   results get i
return response
@override
public void connect boolean reload  throws ioexception
server   connection getclient loc getservername