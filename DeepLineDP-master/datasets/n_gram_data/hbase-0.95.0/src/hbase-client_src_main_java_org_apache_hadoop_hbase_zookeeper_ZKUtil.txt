/**
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase zookeeper
import org apache commons lang stringutils
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop classification interfaceaudience
import org apache hadoop classification interfacestability
import org apache hadoop conf configuration
import org apache hadoop hbase hconstants
import org apache hadoop hbase servername
import org apache hadoop hbase exceptions deserializationexception
import org apache hadoop hbase util bytes
import org apache hadoop hbase util threads
import org apache hadoop hbase zookeeper zkutil zkutilop createandfailsilent
import org apache hadoop hbase zookeeper zkutil zkutilop deletenodefailsilent
import org apache hadoop hbase zookeeper zkutil zkutilop setdata
import org apache hadoop security securityutil
import org apache hadoop security authentication util kerberosutil
import org apache zookeeper asynccallback
import org apache zookeeper createmode
import org apache zookeeper keeperexception
import org apache zookeeper keeperexception nonodeexception
import org apache zookeeper op
import org apache zookeeper watcher
import org apache zookeeper zoodefs ids
import org apache zookeeper zookeeper
import org apache zookeeper client zookeepersaslclient
import org apache zookeeper data acl
import org apache zookeeper data stat
import org apache zookeeper proto createrequest
import org apache zookeeper proto deleterequest
import org apache zookeeper proto setdatarequest
import org apache zookeeper server zookeepersaslserver
import javax security auth login appconfigurationentry
import javax security auth login appconfigurationentry loginmodulecontrolflag
import java io bufferedreader
import java io ioexception
import java io inputstreamreader
import java io printwriter
import java net inetsocketaddress
import java net socket
import java util arraylist
import java util arrays
import java util hashmap
import java util linkedlist
import java util list
import java util map
import java util properties
/**
* internal hbase utility class for zookeeper.
*
* <p>contains only static methods and constants.
*
* <p>methods all throw {@link keeperexception} if there is an unexpected
* zookeeper exception, so callers of these methods must handle appropriately.
* if zk is required for the operation, the server will need to be aborted.
*/
@interfaceaudience public
@interfacestability evolving
public class zkutil
private static final log log   logfactory getlog zkutil class
// todo: replace this with zookeeper constant when zookeeper-277 is resolved.
public static final char znode_path_separator
private static int zkdumpconnectiontimeout
/**
* creates a new connection to zookeeper, pulling settings and ensemble config
* from the specified configuration object using methods from {@link zkconfig}.
*
* sets the connection status monitoring watcher to the specified watcher.
*
* @param conf configuration to pull ensemble and other settings from
* @param watcher watcher to monitor connection changes
* @return connection to zookeeper
* @throws ioexception if unable to connect to zk or config problem
*/
public static recoverablezookeeper connect configuration conf  watcher watcher
throws ioexception
properties properties   zkconfig makezkprops conf
string ensemble   zkconfig getzkquorumserversstring properties
return connect conf  ensemble  watcher
public static recoverablezookeeper connect configuration conf  string ensemble
watcher watcher
throws ioexception
return connect conf  ensemble  watcher  null
public static recoverablezookeeper connect configuration conf  string ensemble
watcher watcher  final string identifier
throws ioexception
if ensemble    null
throw new ioexception
int timeout   conf getint hconstants zk_session_timeout
hconstants default_zk_session_timeout
log debug identifier
ensemble
int retry   conf getint    3
int retryintervalmillis
conf getint    1000
zkdumpconnectiontimeout   conf getint
1000
return new recoverablezookeeper ensemble  timeout  watcher
retry  retryintervalmillis  identifier
/**
* log in the current zookeeper server process using the given configuration
* keys for the credential file and login principal.
*
* <p><strong>this is only applicable when running on secure hbase</strong>
* on regular hbase (without security features), this will safely be ignored.
* </p>
*
* @param conf the configuration data to use
* @param keytabfilekey property key used to configure the path to the credential file
* @param usernamekey property key used to configure the login principal
* @param hostname current hostname to use in any credentials
* @throws ioexception underlying exception from securityutil.login() call
*/
public static void loginserver configuration conf  string keytabfilekey
string usernamekey  string hostname  throws ioexception
login conf  keytabfilekey  usernamekey  hostname
zookeepersaslserver login_context_name_key
jaasconfiguration server_keytab_kerberos_config_name
/**
* log in the current zookeeper client using the given configuration
* keys for the credential file and login principal.
*
* <p><strong>this is only applicable when running on secure hbase</strong>
* on regular hbase (without security features), this will safely be ignored.
* </p>
*
* @param conf the configuration data to use
* @param keytabfilekey property key used to configure the path to the credential file
* @param usernamekey property key used to configure the login principal
* @param hostname current hostname to use in any credentials
* @throws ioexception underlying exception from securityutil.login() call
*/
public static void loginclient configuration conf  string keytabfilekey
string usernamekey  string hostname  throws ioexception
login conf  keytabfilekey  usernamekey  hostname
zookeepersaslclient login_context_name_key
jaasconfiguration client_keytab_kerberos_config_name
/**
* log in the current process using the given configuration keys for the
* credential file and login principal.
*
* <p><strong>this is only applicable when running on secure hbase</strong>
* on regular hbase (without security features), this will safely be ignored.
* </p>
*
* @param conf the configuration data to use
* @param keytabfilekey property key used to configure the path to the credential file
* @param usernamekey property key used to configure the login principal
* @param hostname current hostname to use in any credentials
* @param logincontextproperty property name to expose the entry name
* @param logincontextname jaas entry name
* @throws ioexception underlying exception from securityutil.login() call
*/
private static void login configuration conf  string keytabfilekey
string usernamekey  string hostname
string logincontextproperty  string logincontextname
throws ioexception
if   issecurezookeeper conf
return
// user has specified a jaas.conf, keep this one as the good one.
// hbase_opts="-djava.security.auth.login.config=jaas.conf"
if  system getproperty       null
return
// no keytab specified, no auth
string keytabfilename   conf get keytabfilekey
if  keytabfilename    null
log warn     keytabfilekey
return
string principalconfig   conf get usernamekey  system getproperty
string principalname   securityutil getserverprincipal principalconfig  hostname
// initialize the "jaas.conf" for keytab/principal,
// if keytab is not specified use the ticket cache.
// and set the zookeeper login context name.
jaasconfiguration jaasconf   new jaasconfiguration logincontextname
principalname  keytabfilename
javax security auth login configuration setconfiguration jaasconf
system setproperty logincontextproperty  logincontextname
/**
* a jaas configuration that defines the login modules that we want to use for login.
*/
private static class jaasconfiguration extends javax security auth login configuration
private static final string server_keytab_kerberos_config_name
private static final string client_keytab_kerberos_config_name
private static final map<string  string> basic_jaas_options
new hashmap<string string>
static
string jaasenvvar   system getenv
if  jaasenvvar    null      equalsignorecase jaasenvvar
basic_jaas_options put
private static final map<string string> keytab_kerberos_options
new hashmap<string string>
static
keytab_kerberos_options put
keytab_kerberos_options put
keytab_kerberos_options put
keytab_kerberos_options putall basic_jaas_options
private static final appconfigurationentry keytab_kerberos_login
new appconfigurationentry kerberosutil getkrb5loginmodulename
loginmodulecontrolflag required
keytab_kerberos_options
private static final appconfigurationentry keytab_kerberos_conf
new appconfigurationentry keytab_kerberos_login
private javax security auth login configuration baseconfig
private final string logincontextname
private final boolean useticketcache
private final string keytabfile
private final string principal
public jaasconfiguration string logincontextname  string principal
this logincontextname  principal  null  true
public jaasconfiguration string logincontextname  string principal  string keytabfile
this logincontextname  principal  keytabfile  keytabfile    null    keytabfile length      0
private jaasconfiguration string logincontextname  string principal
string keytabfile  boolean useticketcache
try
this baseconfig   javax security auth login configuration getconfiguration
catch  securityexception e
this baseconfig   null
this logincontextname   logincontextname
this useticketcache   useticketcache
this keytabfile   keytabfile
this principal   principal
log info     logincontextname
principal       useticketcache
keytabfile
@override
public appconfigurationentry getappconfigurationentry string appname
if  logincontextname equals appname
if   useticketcache
keytab_kerberos_options put    keytabfile
keytab_kerberos_options put
keytab_kerberos_options put    principal
keytab_kerberos_options put    useticketcache ?
return keytab_kerberos_conf
if  baseconfig    null  return baseconfig getappconfigurationentry appname
return null
//
// helper methods
//
/**
* join the prefix znode name with the suffix znode name to generate a proper
* full znode name.
*
* assumes prefix does not end with slash and suffix does not begin with it.
*
* @param prefix beginning of znode name
* @param suffix ending of znode name
* @return result of properly joining prefix with suffix
*/
public static string joinznode string prefix  string suffix
return prefix   znode_path_separator   suffix
/**
* returns the full path of the immediate parent of the specified node.
* @param node path to get parent of
* @return parent of path, null if passed the root node or an invalid node
*/
public static string getparent string node
int idx   node lastindexof znode_path_separator
return idx <  0 ? null   node substring 0  idx
/**
* get the name of the current node from the specified fully-qualified path.
* @param path fully-qualified path
* @return name of the current node
*/
public static string getnodename string path
return path substring path lastindexof    1
/**
* get the key to the zk ensemble for this configuration without
* adding a name at the end
* @param conf configuration to use to build the key
* @return ensemble key without a name
*/
public static string getzookeeperclusterkey configuration conf
return getzookeeperclusterkey conf  null
/**
* get the key to the zk ensemble for this configuration and append
* a name at the end
* @param conf configuration to use to build the key
* @param name name that should be appended at the end if not empty or null
* @return ensemble key with a name (if any)
*/
public static string getzookeeperclusterkey configuration conf  string name
string ensemble   conf get hconstants zookeeper_quorum replaceall
stringbuilder builder   new stringbuilder ensemble
builder append
builder append conf get hconstants zookeeper_client_port
builder append
builder append conf get hconstants zookeeper_znode_parent
if  name    null     name isempty
builder append
builder append name
return builder tostring
/**
* apply the settings in the given key to the given configuration, this is
* used to communicate with distant clusters
* @param conf configuration object to configure
* @param key string that contains the 3 required configuratins
* @throws ioexception
*/
public static void applyclusterkeytoconf configuration conf  string key
throws ioexception
string parts   transformclusterkey key
conf set hconstants zookeeper_quorum  parts
conf set hconstants zookeeper_client_port  parts
conf set hconstants zookeeper_znode_parent  parts
/**
* separate the given key into the three configurations it should contain:
* hbase.zookeeper.quorum, hbase.zookeeper.client.port
* and zookeeper.znode.parent
* @param key
* @return the three configuration in the described order
* @throws ioexception
*/
public static string transformclusterkey string key  throws ioexception
string parts   key split
if  parts length    3
throw new ioexception
hconstants zookeeper_quorum
hconstants zookeeper_znode_parent
return parts
//
// existence checks and watches
//
/**
* watch the specified znode for delete/create/change events.  the watcher is
* set whether or not the node exists.  if the node already exists, the method
* returns true.  if the node does not exist, the method returns false.
*
* @param zkw zk reference
* @param znode path of node to watch
* @return true if znode exists, false if does not exist or error
* @throws keeperexception if unexpected zookeeper exception
*/
public static boolean watchandcheckexists zookeeperwatcher zkw  string znode
throws keeperexception
try
stat s   zkw getrecoverablezookeeper   exists znode  zkw
boolean exists   s    null ? true   false
if  exists
log debug zkw prefix     znode
else
log debug zkw prefix znode
return exists
catch  keeperexception e
log warn zkw prefix     znode   e
zkw keeperexception e
return false
catch  interruptedexception e
log warn zkw prefix     znode   e
zkw interruptedexception e
return false
/**
* watch the specified znode, but only if exists. useful when watching
* for deletions. uses .getdata() (and handles nonodeexception) instead
* of .exists() to accomplish this, as .getdata() will only set a watch if
* the znode exists.
* @param zkw zk reference
* @param znode path of node to watch
* @return true if the watch is set, false if node does not exists
* @throws keeperexception if unexpected zookeeper exception
*/
public static boolean setwatchifnodeexists zookeeperwatcher zkw  string znode
throws keeperexception
try
zkw getrecoverablezookeeper   getdata znode  true  null
return true
catch  nonodeexception e
return false
catch  interruptedexception e
log warn zkw prefix     znode   e
zkw interruptedexception e
return false
/**
* check if the specified node exists.  sets no watches.
*
* @param zkw zk reference
* @param znode path of node to watch
* @return version of the node if it exists, -1 if does not exist
* @throws keeperexception if unexpected zookeeper exception
*/
public static int checkexists zookeeperwatcher zkw  string znode
throws keeperexception
try
stat s   zkw getrecoverablezookeeper   exists znode  null
return s    null ? s getversion      1
catch  keeperexception e
log warn zkw prefix     znode       e
zkw keeperexception e
return  1
catch  interruptedexception e
log warn zkw prefix     znode       e
zkw interruptedexception e
return  1
//
// znode listings
//
/**
* lists the children znodes of the specified znode.  also sets a watch on
* the specified znode which will capture a nodedeleted event on the specified
* znode as well as nodechildrenchanged if any children of the specified znode
* are created or deleted.
*
* returns null if the specified node does not exist.  otherwise returns a
* list of children of the specified node.  if the node exists but it has no
* children, an empty list will be returned.
*
* @param zkw zk reference
* @param znode path of node to list and watch children of
* @return list of children of the specified node, an empty list if the node
*          exists but has no children, and null if the node does not exist
* @throws keeperexception if unexpected zookeeper exception
*/
public static list<string> listchildrenandwatchfornewchildren
zookeeperwatcher zkw  string znode
throws keeperexception
try
list<string> children   zkw getrecoverablezookeeper   getchildren znode  zkw
return children
catch keeperexception nonodeexception ke
log debug zkw prefix     znode
return null
catch  keeperexception e
log warn zkw prefix     znode       e
zkw keeperexception e
return null
catch  interruptedexception e
log warn zkw prefix     znode       e
zkw interruptedexception e
return null
/**
* list all the children of the specified znode, setting a watch for children
* changes and also setting a watch on every individual child in order to get
* the nodecreated and nodedeleted events.
* @param zkw zookeeper reference
* @param znode node to get children of and watch
* @return list of znode names, null if the node doesn't exist
* @throws keeperexception
*/
public static list<string> listchildrenandwatchthem zookeeperwatcher zkw
string znode  throws keeperexception
list<string> children   listchildrenandwatchfornewchildren zkw  znode
if  children    null
return null
for  string child   children
watchandcheckexists zkw  joinznode znode  child
return children
/**
* lists the children of the specified znode without setting any watches.
*
* sets no watches at all, this method is best effort.
*
* returns an empty list if the node has no children.  returns null if the
* parent node itself does not exist.
*
* @param zkw zookeeper reference
* @param znode node to get children
* @return list of data of children of specified znode, empty if no children,
*         null if parent does not exist
* @throws keeperexception if unexpected zookeeper exception
*/
public static list<string> listchildrennowatch zookeeperwatcher zkw  string znode
throws keeperexception
list<string> children   null
try
// list the children without watching
children   zkw getrecoverablezookeeper   getchildren znode  null
catch keeperexception nonodeexception nne
return null
catch interruptedexception ie
zkw interruptedexception ie
return children
/**
* simple class to hold a node path and node data.
* @deprecated unused
*/
@deprecated
public static class nodeanddata
private string node
private byte  data
public nodeanddata string node  byte  data
this node   node
this data   data
public string getnode
return node
public byte  getdata
return data
@override
public string tostring
return node
public boolean isempty
return  data length    0
/**
* checks if the specified znode has any children.  sets no watches.
*
* returns true if the node exists and has children.  returns false if the
* node does not exist or if the node does not have any children.
*
* used during master initialization to determine if the master is a
* failed-over-to master or the first master during initial cluster startup.
* if the directory for regionserver ephemeral nodes is empty then this is
* a cluster startup, if not then it is not cluster startup.
*
* @param zkw zk reference
* @param znode path of node to check for children of
* @return true if node has children, false if not or node does not exist
* @throws keeperexception if unexpected zookeeper exception
*/
public static boolean nodehaschildren zookeeperwatcher zkw  string znode
throws keeperexception
try
return  zkw getrecoverablezookeeper   getchildren znode  null  isempty
catch keeperexception nonodeexception ke
log debug zkw prefix     znode
return false
catch  keeperexception e
log warn zkw prefix     znode   e
zkw keeperexception e
return false
catch  interruptedexception e
log warn zkw prefix     znode   e
zkw interruptedexception e
return false
/**
* get the number of children of the specified node.
*
* if the node does not exist or has no children, returns 0.
*
* sets no watches at all.
*
* @param zkw zk reference
* @param znode path of node to count children of
* @return number of children of specified node, 0 if none or parent does not
*         exist
* @throws keeperexception if unexpected zookeeper exception
*/
public static int getnumberofchildren zookeeperwatcher zkw  string znode
throws keeperexception
try
stat stat   zkw getrecoverablezookeeper   exists znode  null
return stat    null ? 0   stat getnumchildren
catch keeperexception e
log warn zkw prefix     znode
zkw keeperexception e
catch interruptedexception e
zkw interruptedexception e
return 0
//
// data retrieval
//
/**
* get znode data. does not set a watcher.
* @return znode data, null if the node does not exist or if there is an
*  error.
*/
public static byte  getdata zookeeperwatcher zkw  string znode
throws keeperexception
try
byte  data   zkw getrecoverablezookeeper   getdata znode  null  null
logretrievedmsg zkw  znode  data  false
return data
catch  keeperexception nonodeexception e
log debug zkw prefix     znode
return null
catch  keeperexception e
log warn zkw prefix     znode   e
zkw keeperexception e
return null
catch  interruptedexception e
log warn zkw prefix     znode   e
zkw interruptedexception e
return null
/**
* get the data at the specified znode and set a watch.
*
* returns the data and sets a watch if the node exists.  returns null and no
* watch is set if the node does not exist or there is an exception.
*
* @param zkw zk reference
* @param znode path of node
* @return data of the specified znode, or null
* @throws keeperexception if unexpected zookeeper exception
*/
public static byte  getdataandwatch zookeeperwatcher zkw  string znode
throws keeperexception
return getdatainternal zkw  znode  null  true
/**
* get the data at the specified znode and set a watch.
*
* returns the data and sets a watch if the node exists.  returns null and no
* watch is set if the node does not exist or there is an exception.
*
* @param zkw zk reference
* @param znode path of node
* @param stat object to populate the version of the znode
* @return data of the specified znode, or null
* @throws keeperexception if unexpected zookeeper exception
*/
public static byte getdataandwatch zookeeperwatcher zkw  string znode
stat stat  throws keeperexception
return getdatainternal zkw  znode  stat  true
private static byte getdatainternal zookeeperwatcher zkw  string znode  stat stat
boolean watcherset
throws keeperexception
try
byte  data   zkw getrecoverablezookeeper   getdata znode  zkw  stat
logretrievedmsg zkw  znode  data  watcherset
return data
catch  keeperexception nonodeexception e
// this log can get pretty annoying when we cycle on 100ms waits.
// enable trace if you really want to see it.
log trace zkw prefix     znode
return null
catch  keeperexception e
log warn zkw prefix     znode   e
zkw keeperexception e
return null
catch  interruptedexception e
log warn zkw prefix     znode   e
zkw interruptedexception e
return null
/**
* get the data at the specified znode without setting a watch.
*
* returns the data if the node exists.  returns null if the node does not
* exist.
*
* sets the stats of the node in the passed stat object.  pass a null stat if
* not interested.
*
* @param zkw zk reference
* @param znode path of node
* @param stat node status to get if node exists
* @return data of the specified znode, or null if node does not exist
* @throws keeperexception if unexpected zookeeper exception
*/
public static byte  getdatanowatch zookeeperwatcher zkw  string znode
stat stat
throws keeperexception
try
byte  data   zkw getrecoverablezookeeper   getdata znode  null  stat
logretrievedmsg zkw  znode  data  false
return data
catch  keeperexception nonodeexception e
log debug zkw prefix     znode
return null
catch  keeperexception e
log warn zkw prefix     znode   e
zkw keeperexception e
return null
catch  interruptedexception e
log warn zkw prefix     znode   e
zkw interruptedexception e
return null
/**
* returns the date of child znodes of the specified znode.  also sets a watch on
* the specified znode which will capture a nodedeleted event on the specified
* znode as well as nodechildrenchanged if any children of the specified znode
* are created or deleted.
*
* returns null if the specified node does not exist.  otherwise returns a
* list of children of the specified node.  if the node exists but it has no
* children, an empty list will be returned.
*
* @param zkw zk reference
* @param basenode path of node to list and watch children of
* @return list of data of children of the specified node, an empty list if the node
*          exists but has no children, and null if the node does not exist
* @throws keeperexception if unexpected zookeeper exception
* @deprecated unused
*/
public static list<nodeanddata> getchilddataandwatchfornewchildren
zookeeperwatcher zkw  string basenode  throws keeperexception
list<string> nodes
zkutil listchildrenandwatchfornewchildren zkw  basenode
list<nodeanddata> newnodes   new arraylist<nodeanddata>
if  nodes    null
for  string node   nodes
string nodepath   zkutil joinznode basenode  node
byte data   zkutil getdataandwatch zkw  nodepath
newnodes add new nodeanddata nodepath  data
return newnodes
/**
* update the data of an existing node with the expected version to have the
* specified data.
*
* throws an exception if there is a version mismatch or some other problem.
*
* sets no watches under any conditions.
*
* @param zkw zk reference
* @param znode
* @param data
* @param expectedversion
* @throws keeperexception if unexpected zookeeper exception
* @throws keeperexception.badversionexception if version mismatch
* @deprecated unused
*/
public static void updateexistingnodedata zookeeperwatcher zkw  string znode
byte  data  int expectedversion
throws keeperexception
try
zkw getrecoverablezookeeper   setdata znode  data  expectedversion
catch interruptedexception ie
zkw interruptedexception ie
//
// data setting
//
/**
* sets the data of the existing znode to be the specified data.  ensures that
* the current data has the specified expected version.
*
* <p>if the node does not exist, a {@link nonodeexception} will be thrown.
*
* <p>if their is a version mismatch, method returns null.
*
* <p>no watches are set but setting data will trigger other watchers of this
* node.
*
* <p>if there is another problem, a keeperexception will be thrown.
*
* @param zkw zk reference
* @param znode path of node
* @param data data to set for node
* @param expectedversion version expected when setting data
* @return true if data set, false if version mismatch
* @throws keeperexception if unexpected zookeeper exception
*/
public static boolean setdata zookeeperwatcher zkw  string znode
byte  data  int expectedversion
throws keeperexception  keeperexception nonodeexception
try
return zkw getrecoverablezookeeper   setdata znode  data  expectedversion     null
catch  interruptedexception e
zkw interruptedexception e
return false
/**
* set data into node creating node if it doesn't yet exist.
* does not set watch.
*
* @param zkw zk reference
* @param znode path of node
* @param data data to set for node
* @throws keeperexception
*/
public static void createsetdata final zookeeperwatcher zkw  final string znode
final byte  data
throws keeperexception
if  checkexists zkw  znode      1
zkutil createwithparents zkw  znode  data
else
zkutil setdata zkw  znode  data
/**
* sets the data of the existing znode to be the specified data.  the node
* must exist but no checks are done on the existing data or version.
*
* <p>if the node does not exist, a {@link nonodeexception} will be thrown.
*
* <p>no watches are set but setting data will trigger other watchers of this
* node.
*
* <p>if there is another problem, a keeperexception will be thrown.
*
* @param zkw zk reference
* @param znode path of node
* @param data data to set for node
* @throws keeperexception if unexpected zookeeper exception
*/
public static void setdata zookeeperwatcher zkw  string znode  byte  data
throws keeperexception  keeperexception nonodeexception
setdata zkw   setdata zkutilop setdata znode  data
private static void setdata zookeeperwatcher zkw  setdata setdata
throws keeperexception  keeperexception nonodeexception
setdatarequest sd    setdatarequest tozookeeperop zkw  setdata  torequestrecord
setdata zkw  sd getpath    sd getdata    sd getversion
/**
* returns whether or not secure authentication is enabled
* (whether <code>hbase.security.authentication</code> is set to
* <code>kerberos</code>.
*/
public static boolean issecurezookeeper configuration conf
// hbase shell need to use:
//    -djava.security.auth.login.config=user-jaas.conf
// since each user has a different jaas.conf
if  system getproperty       null
return true
// master & rss uses hbase.zookeeper.client.*
return   equalsignorecase conf get
conf get       null
private static arraylist<acl> createacl zookeeperwatcher zkw  string node
if  issecurezookeeper zkw getconfiguration
// certain znodes are accessed directly by the client,
// so they must be readable by non-authenticated clients
if   node equals zkw baseznode     true
node equals zkw metaserverznode     true
node equals zkw getmasteraddressznode       true
node equals zkw clusteridznode     true
node equals zkw rsznode     true
node equals zkw backupmasteraddressesznode     true
node startswith zkw assignmentznode     true
node startswith zkw tableznode     true
return zookeeperwatcher creator_all_and_world_readable
return ids creator_all_acl
else
return ids open_acl_unsafe
//
// node creation
//
/**
*
* set the specified znode to be an ephemeral node carrying the specified
* data.
*
* if the node is created successfully, a watcher is also set on the node.
*
* if the node is not created successfully because it already exists, this
* method will also set a watcher on the node.
*
* if there is another problem, a keeperexception will be thrown.
*
* @param zkw zk reference
* @param znode path of node
* @param data data of node
* @return true if node created, false if not, watch set in both cases
* @throws keeperexception if unexpected zookeeper exception
*/
public static boolean createephemeralnodeandwatch zookeeperwatcher zkw
string znode  byte  data
throws keeperexception
try
zkw getrecoverablezookeeper   create znode  data  createacl zkw  znode
createmode ephemeral
catch  keeperexception nodeexistsexception nee
if  watchandcheckexists zkw  znode
// it did exist but now it doesn't, try again
return createephemeralnodeandwatch zkw  znode  data
return false
catch  interruptedexception e
log info    e
thread currentthread   interrupt
return true
/**
* creates the specified znode to be a persistent node carrying the specified
* data.
*
* returns true if the node was successfully created, false if the node
* already existed.
*
* if the node is created successfully, a watcher is also set on the node.
*
* if the node is not created successfully because it already exists, this
* method will also set a watcher on the node but return false.
*
* if there is another problem, a keeperexception will be thrown.
*
* @param zkw zk reference
* @param znode path of node
* @param data data of node
* @return true if node created, false if not, watch set in both cases
* @throws keeperexception if unexpected zookeeper exception
*/
public static boolean createnodeifnotexistsandwatch
zookeeperwatcher zkw  string znode  byte  data
throws keeperexception
try
zkw getrecoverablezookeeper   create znode  data  createacl zkw  znode
createmode persistent
catch  keeperexception nodeexistsexception nee
try
zkw getrecoverablezookeeper   exists znode  zkw
catch  interruptedexception e
zkw interruptedexception e
return false
return false
catch  interruptedexception e
zkw interruptedexception e
return false
return true
/**
* creates the specified znode with the specified data but does not watch it.
*
* returns the znode of the newly created node
*
* if there is another problem, a keeperexception will be thrown.
*
* @param zkw zk reference
* @param znode path of node
* @param data data of node
* @param createmode specifying whether the node to be created is ephemeral and/or sequential
* @return true name of the newly created znode or null
* @throws keeperexception if unexpected zookeeper exception
*/
public static string createnodeifnotexistsnowatch zookeeperwatcher zkw  string znode
byte data  createmode createmode  throws keeperexception
string createdznode   null
try
createdznode   zkw getrecoverablezookeeper   create znode  data
createacl zkw  znode   createmode
catch  keeperexception nodeexistsexception nee
return znode
catch  interruptedexception e
zkw interruptedexception e
return null
return createdznode
/**
* creates the specified node with the specified data and watches it.
*
* <p>throws an exception if the node already exists.
*
* <p>the node created is persistent and open access.
*
* <p>returns the version number of the created node if successful.
*
* @param zkw zk reference
* @param znode path of node to create
* @param data data of node to create
* @return version of node created
* @throws keeperexception if unexpected zookeeper exception
* @throws keeperexception.nodeexistsexception if node already exists
*/
public static int createandwatch zookeeperwatcher zkw
string znode  byte  data
throws keeperexception  keeperexception nodeexistsexception
try
zkw getrecoverablezookeeper   create znode  data  createacl zkw  znode
createmode persistent
stat stat   zkw getrecoverablezookeeper   exists znode  zkw
if  stat    null
// likely a race condition. someone deleted the znode.
throw keeperexception create keeperexception code systemerror
znode
return stat getversion
catch  interruptedexception e
zkw interruptedexception e
return  1
/**
* async creates the specified node with the specified data.
*
* <p>throws an exception if the node already exists.
*
* <p>the node created is persistent and open access.
*
* @param zkw zk reference
* @param znode path of node to create
* @param data data of node to create
* @param cb
* @param ctx
* @throws keeperexception if unexpected zookeeper exception
* @throws keeperexception.nodeexistsexception if node already exists
*/
public static void asynccreate zookeeperwatcher zkw
string znode  byte  data  final asynccallback stringcallback cb
final object ctx
zkw getrecoverablezookeeper   getzookeeper   create znode  data
createacl zkw  znode   createmode persistent  cb  ctx
/**
* creates the specified node, iff the node does not exist.  does not set a
* watch and fails silently if the node already exists.
*
* the node created is persistent and open access.
*
* @param zkw zk reference
* @param znode path of node
* @throws keeperexception if unexpected zookeeper exception
*/
public static void createandfailsilent zookeeperwatcher zkw
string znode  throws keeperexception
createandfailsilent zkw  znode  new byte
/**
* creates the specified node containing specified data, iff the node does not exist.  does
* not set a watch and fails silently if the node already exists.
*
* the node created is persistent and open access.
*
* @param zkw zk reference
* @param znode path of node
* @param data a byte array data to store in the znode
* @throws keeperexception if unexpected zookeeper exception
*/
public static void createandfailsilent zookeeperwatcher zkw
string znode  byte data
throws keeperexception
createandfailsilent zkw
createandfailsilent zkutilop createandfailsilent znode  data
private static void createandfailsilent zookeeperwatcher zkw  createandfailsilent cafs
throws keeperexception
createrequest create    createrequest tozookeeperop zkw  cafs  torequestrecord
string znode   create getpath
try
recoverablezookeeper zk   zkw getrecoverablezookeeper
if  zk exists znode  false     null
zk create znode  create getdata    create getacl    createmode fromflag create getflags
catch keeperexception nodeexistsexception nee
catch keeperexception noauthexception nee
try
if  null    zkw getrecoverablezookeeper   exists znode  false
// if we failed to create the file and it does not already exist.
throw nee
catch  interruptedexception ie
zkw interruptedexception ie
catch interruptedexception ie
zkw interruptedexception ie
/**
* creates the specified node and all parent nodes required for it to exist.
*
* no watches are set and no errors are thrown if the node already exists.
*
* the nodes created are persistent and open access.
*
* @param zkw zk reference
* @param znode path of node
* @throws keeperexception if unexpected zookeeper exception
*/
public static void createwithparents zookeeperwatcher zkw  string znode
throws keeperexception
createwithparents zkw  znode  new byte
/**
* creates the specified node and all parent nodes required for it to exist.  the creation of
* parent znodes is not atomic with the leafe znode creation but the data is written atomically
* when the leaf node is created.
*
* no watches are set and no errors are thrown if the node already exists.
*
* the nodes created are persistent and open access.
*
* @param zkw zk reference
* @param znode path of node
* @throws keeperexception if unexpected zookeeper exception
*/
public static void createwithparents zookeeperwatcher zkw  string znode  byte data
throws keeperexception
try
if znode    null
return
zkw getrecoverablezookeeper   create znode  data  createacl zkw  znode
createmode persistent
catch keeperexception nodeexistsexception nee
return
catch keeperexception nonodeexception nne
createwithparents zkw  getparent znode
createwithparents zkw  znode
catch interruptedexception ie
zkw interruptedexception ie
//
// deletes
//
/**
* delete the specified node.  sets no watches.  throws all exceptions.
*/
public static void deletenode zookeeperwatcher zkw  string node
throws keeperexception
deletenode zkw  node   1
/**
* delete the specified node with the specified version.  sets no watches.
* throws all exceptions.
*/
public static boolean deletenode zookeeperwatcher zkw  string node
int version
throws keeperexception
try
zkw getrecoverablezookeeper   delete node  version
return true
catch keeperexception badversionexception bve
return false
catch interruptedexception ie
zkw interruptedexception ie
return false
/**
* deletes the specified node.  fails silent if the node does not exist.
* @param zkw
* @param node
* @throws keeperexception
*/
public static void deletenodefailsilent zookeeperwatcher zkw  string node
throws keeperexception
deletenodefailsilent zkw
deletenodefailsilent zkutilop deletenodefailsilent node
private static void deletenodefailsilent zookeeperwatcher zkw
deletenodefailsilent dnfs  throws keeperexception
deleterequest delete    deleterequest tozookeeperop zkw  dnfs  torequestrecord
try
zkw getrecoverablezookeeper   delete delete getpath    delete getversion
catch keeperexception nonodeexception nne
catch interruptedexception ie
zkw interruptedexception ie
/**
* delete the specified node and all of it's children.
* <p>
* if the node does not exist, just returns.
* <p>
* sets no watches. throws all exceptions besides dealing with deletion of
* children.
*/
public static void deletenoderecursively zookeeperwatcher zkw  string node
throws keeperexception
try
list<string> children   zkutil listchildrennowatch zkw  node
// the node is already deleted, so we just finish
if  children    null  return
if  children isempty
for string child   children
deletenoderecursively zkw  joinznode node  child
zkw getrecoverablezookeeper   delete node   1
catch interruptedexception ie
zkw interruptedexception ie
/**
* delete all the children of the specified node but not the node itself.
*
* sets no watches.  throws all exceptions besides dealing with deletion of
* children.
*/
public static void deletechildrenrecursively zookeeperwatcher zkw  string node
throws keeperexception
list<string> children   zkutil listchildrennowatch zkw  node
if  children    null    children isempty    return
for string child   children
deletenoderecursively zkw  joinznode node  child
/**
* represents an action taken by zkutil, e.g. createandfailsilent.
* these actions are higher-level than zkop actions, which represent
* individual actions in the zookeeper api, like create.
*/
public abstract static class zkutilop
private string path
private zkutilop string path
this path   path
/**
* @return a createandfailsilent zkutilop
*/
public static zkutilop createandfailsilent string path  byte data
return new createandfailsilent path  data
/**
* @return a deletenodefailsilent zkutilop
*/
public static zkutilop deletenodefailsilent string path
return new deletenodefailsilent path
/**
* @return a setdata zkutilop
*/
public static zkutilop setdata string path  byte  data
return new setdata path  data
/**
* @return path to znode where the zkop will occur
*/
public string getpath
return path
/**
* zkutilop representing createandfailsilent in zookeeper
* (attempt to create node, ignore error if already exists)
*/
public static class createandfailsilent extends zkutilop
private byte  data
private createandfailsilent string path  byte  data
super path
this data   data
public byte getdata
return data
@override
public boolean equals object o
if  this    o  return true
if    o instanceof createandfailsilent   return false
createandfailsilent op    createandfailsilent  o
return getpath   equals op getpath       arrays equals data  op data
@override
public int hashcode
int ret   17   getpath   hashcode     31
return ret   31   bytes hashcode data
/**
* zkutilop representing deletenodefailsilent in zookeeper
* (attempt to delete node, ignore error if node doesn't exist)
*/
public static class deletenodefailsilent extends zkutilop
private deletenodefailsilent string path
super path
@override
public boolean equals object o
if  this    o  return true
if    o instanceof deletenodefailsilent   return false
return super equals o
@override
public int hashcode
return getpath   hashcode
/**
* zkutilop representing setdata in zookeeper
*/
public static class setdata extends zkutilop
private byte  data
private setdata string path  byte  data
super path
this data   data
public byte getdata
return data
@override
public boolean equals object o
if  this    o  return true
if    o instanceof setdata   return false
setdata op    setdata  o
return getpath   equals op getpath       arrays equals data  op data
@override
public int hashcode
int ret   getpath   hashcode
return ret   31   bytes hashcode data
/**
* convert from zkutilop to zkop
*/
private static op tozookeeperop zookeeperwatcher zkw  zkutilop op
throws unsupportedoperationexception
if op    null  return null
if  op instanceof createandfailsilent
createandfailsilent cafs    createandfailsilent op
return op create cafs getpath    cafs getdata    createacl zkw  cafs getpath
createmode persistent
else if  op instanceof deletenodefailsilent
deletenodefailsilent dnfs    deletenodefailsilent op
return op delete dnfs getpath     1
else if  op instanceof setdata
setdata sd    setdata op
return op setdata sd getpath    sd getdata     1
else
throw new unsupportedoperationexception
op getclass   getname
/**
* if hbase.zookeeper.usemulti is true, use zookeeper's multi-update functionality.
* otherwise, run the list of operations sequentially.
*
* if all of the following are true:
* - runsequentialonmultifailure is true
* - hbase.zookeeper.usemulti is true
* - on calling multi, we get a zookeeper exception that can be handled by a sequential call(*)
* then:
* - we retry the operations one-by-one (sequentially)
*
* note *: an example is receiving a nodeexistsexception from a "create" call.  without multi,
* a user could call "createandfailsilent" to ensure that a node exists if they don't care who
* actually created the node (i.e. the nodeexistsexception from zookeeper is caught).
* this will cause all operations in the multi to fail, however, because
* the nodeexistsexception that zk.create throws will fail the multi transaction.
* in this case, if the previous conditions hold, the commands are run sequentially, which should
* result in the correct final state, but means that the operations will not run atomically.
*
* @throws keeperexception
*/
public static void multiorsequential zookeeperwatcher zkw  list<zkutilop> ops
boolean runsequentialonmultifailure  throws keeperexception
if  ops    null  return
boolean usemulti   zkw getconfiguration   getboolean hconstants zookeeper_usemulti  false
if  usemulti
list<op> zkops   new linkedlist<op>
for  zkutilop op   ops
zkops add tozookeeperop zkw  op
try
zkw getrecoverablezookeeper   multi zkops
catch  keeperexception ke
switch  ke code
case nodeexists
case nonode
case badversion
case noauth
// if we get an exception that could be solved by running sequentially
// (and the client asked us to), then break out and run sequentially
if  runsequentialonmultifailure
log info     ke tostring
runsequentialonmultifailure
processsequentially zkw  ops
break
default
throw ke
catch  interruptedexception ie
zkw interruptedexception ie
else
// run sequentially
processsequentially zkw  ops
private static void processsequentially zookeeperwatcher zkw  list<zkutilop> ops
throws keeperexception  nonodeexception
for  zkutilop op   ops
if  op instanceof createandfailsilent
createandfailsilent zkw   createandfailsilent  op
else if  op instanceof deletenodefailsilent
deletenodefailsilent zkw   deletenodefailsilent  op
else if  op instanceof setdata
setdata zkw   setdata  op
else
throw new unsupportedoperationexception
op getclass   getname
//
// zookeeper cluster information
//
/** @return string dump of everything in zookeeper. */
public static string dump zookeeperwatcher zkw
stringbuilder sb   new stringbuilder
try
sb append    append zkw baseznode
sb append
try
sb append masteraddresstracker getmasteraddress zkw
catch  ioexception e
sb append     e getmessage
sb append
for  string child   listchildrennowatch zkw
zkw backupmasteraddressesznode
sb append    append child
sb append     metaregiontracker getmetaregionlocation zkw
sb append
for  string child   listchildrennowatch zkw  zkw rsznode
sb append    append child
try
getreplicationznodesdump zkw  sb
catch  keeperexception ke
log warn    ke
sb append
string servers   zkw getquorum   split
for  string server   servers
sb append    append server
try
string stat   getserverstats server  zkutil zkdumpconnectiontimeout
if  stat    null
sb append     server
break
for  string s   stat
sb append    append s
catch  exception e
sb append    append e getmessage
catch  keeperexception ke
sb append
sb append     ke getmessage
return sb tostring
private static void getreplicationznodesdump zookeeperwatcher zkw  stringbuilder sb
throws keeperexception
string replicationznodename   zkw getconfiguration   get
string replicationznode   joinznode zkw baseznode  replicationznodename
if  zkutil checkexists zkw  replicationznode      1  return
// do a ls -r on this znode
list<string> stack   new linkedlist<string>
stack add replicationznode
do
string znodetoprocess   stack remove stack size     1
sb append    append znodetoprocess  append
append bytes tostring zkutil getdata zkw  znodetoprocess
for  string znodechild   zkutil listchildrennowatch zkw  znodetoprocess
stack add zkutil joinznode znodetoprocess  znodechild
while  stack size   > 0
/**
* gets the statistics from the given server.
*
* @param server  the server to get the statistics from.
* @param timeout  the socket timeout to use.
* @return the array of response strings.
* @throws ioexception when the socket communication fails.
*/
public static string getserverstats string server  int timeout
throws ioexception
string sp   server split
if  sp    null    sp length    0
return null
string host   sp
int port   sp length > 1 ? integer parseint sp
hconstants default_zookeper_client_port
socket socket   new socket
inetsocketaddress sockaddr   new inetsocketaddress host  port
socket connect sockaddr  timeout
socket setsotimeout timeout
printwriter out   new printwriter socket getoutputstream    true
bufferedreader in   new bufferedreader new inputstreamreader
socket getinputstream
out println
out flush
arraylist<string> res   new arraylist<string>
while  true
string line   in readline
if  line    null
res add line
else
break
socket close
return res toarray new string
private static void logretrievedmsg final zookeeperwatcher zkw
final string znode  final byte  data  final boolean watcherset
if   log isdebugenabled    return
log debug zkw prefix       data    null ? 0  data length
znode
watcherset?
data    null?    data length    0?
znode startswith zkw assignmentznode ?
zkassign tostring data      we should not be doing this reaching into another class
znode startswith zkw metaserverznode ?
getservernameoremptystring data
znode startswith zkw backupmasteraddressesznode ?
getservernameoremptystring data
stringutils abbreviate bytes tostringbinary data   32
private static string getservernameoremptystring final byte  data
try
return servername parsefrom data  tostring
catch  deserializationexception e
return
/**
* waits for hbase installation's base (parent) znode to become available.
* @throws ioexception on zk errors
*/
public static void waitforbaseznode configuration conf  throws ioexception
log info
string parentznode   conf get hconstants zookeeper_znode_parent
hconstants default_zookeeper_znode_parent
zookeeper zk   new zookeeper zkconfig getzkquorumserversstring conf
conf getint hconstants zk_session_timeout
hconstants default_zk_session_timeout   emptywatcher instance
final int maxtimems   10000
final int maxnumattempts   maxtimems   hconstants socket_retry_wait_ms
keeperexception keeperex   null
try
try
for  int attempt   0  attempt < maxnumattempts    attempt
try
if  zk exists parentznode  false     null
log info     parentznode
keeperex   null
break
catch  keeperexception e
keeperex   e
threads sleepwithoutinterrupt hconstants socket_retry_wait_ms
finally
zk close
catch  interruptedexception ex
thread currentthread   interrupt
if  keeperex    null
throw new ioexception keeperex
public static byte blockuntilavailable
final zookeeperwatcher zkw  final string znode  final long timeout
throws interruptedexception
if  timeout < 0  throw new illegalargumentexception
if  zkw    null  throw new illegalargumentexception
if  znode    null  throw new illegalargumentexception
byte data   null
boolean finished   false
final long endtime   system currenttimemillis     timeout
while   finished
try
data   zkutil getdata zkw  znode
catch keeperexception e
log warn    e
if  data    null     system currenttimemillis
hconstants socket_retry_wait_ms < endtime
thread sleep hconstants socket_retry_wait_ms
else
finished   true
return data
/**
* convert a {@link deserializationexception} to a more palatable {@link keeperexception}.
* used when can't let a {@link deserializationexception} out w/o changing public api.
* @param e exception to convert
* @return converted exception
*/
public static keeperexception convert final deserializationexception e
keeperexception ke   new keeperexception datainconsistencyexception
ke initcause e
return ke
/**
* recursively print the current state of zk (non-transactional)
* @param root name of the root directory in zk to print
* @throws keeperexception
*/
public static void logzktree zookeeperwatcher zkw  string root
if   log isdebugenabled    return
log debug
string prefix
log debug prefix   root
try
logzktree zkw  root  prefix
catch  keeperexception e
throw new runtimeexception e
/**
* helper method to print the current state of the zk tree.
* @see #logzktree(zookeeperwatcher, string)
* @throws keeperexception if an unexpected exception occurs
*/
protected static void logzktree zookeeperwatcher zkw  string root  string prefix  throws keeperexception
list<string> children   zkutil listchildrennowatch zkw  root
if  children    null  return
for  string child   children
log debug prefix   child
string node   zkutil joinznode root equals    ?     root  child
logzktree zkw  node  prefix