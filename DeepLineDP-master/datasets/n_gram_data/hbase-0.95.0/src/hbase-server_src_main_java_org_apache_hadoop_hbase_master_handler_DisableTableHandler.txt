/**
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase master handler
import java io ioexception
import java util list
import java util concurrent executorservice
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop classification interfaceaudience
import org apache hadoop hbase hregioninfo
import org apache hadoop hbase server
import org apache hadoop hbase exceptions tablenotenabledexception
import org apache hadoop hbase exceptions tablenotfoundexception
import org apache hadoop hbase catalog catalogtracker
import org apache hadoop hbase catalog metareader
import org apache hadoop hbase executor eventhandler
import org apache hadoop hbase executor eventtype
import org apache hadoop hbase master assignmentmanager
import org apache hadoop hbase master bulkassigner
import org apache hadoop hbase master hmaster
import org apache hadoop hbase master mastercoprocessorhost
import org apache hadoop hbase master regionstates
import org apache hadoop hbase master tablelockmanager
import org apache hadoop hbase master tablelockmanager tablelock
import org apache hadoop hbase util bytes
import org apache zookeeper keeperexception
import org cloudera htrace trace
/**
* handler to run disable of a table.
*/
@interfaceaudience private
public class disabletablehandler extends eventhandler
private static final log log   logfactory getlog disabletablehandler class
private final byte  tablename
private final string tablenamestr
private final assignmentmanager assignmentmanager
private final tablelockmanager tablelockmanager
private final catalogtracker catalogtracker
private final boolean skiptablestatecheck
private tablelock tablelock
public disabletablehandler server server  byte  tablename
catalogtracker catalogtracker  assignmentmanager assignmentmanager
tablelockmanager tablelockmanager  boolean skiptablestatecheck
super server  eventtype c_m_disable_table
this tablename   tablename
this tablenamestr   bytes tostring this tablename
this assignmentmanager   assignmentmanager
this catalogtracker   catalogtracker
this tablelockmanager   tablelockmanager
this skiptablestatecheck   skiptablestatecheck
public disabletablehandler prepare
throws tablenotfoundexception  tablenotenabledexception  ioexception
//acquire the table write lock, blocking
this tablelock   this tablelockmanager writelock tablename
eventtype c_m_disable_table tostring
this tablelock acquire
boolean success   false
try
// check if table exists
if   metareader tableexists catalogtracker  this tablenamestr
throw new tablenotfoundexception this tablenamestr
// there could be multiple client requests trying to disable or enable
// the table at the same time. ensure only the first request is honored
// after that, no other requests can be accepted until the table reaches
// disabled or enabled.
//todo: reevaluate this since we have table locks now
if   skiptablestatecheck
try
if   this assignmentmanager getzktable   checkenabledandsetdisablingtable
this tablenamestr
log info     tablenamestr
throw new tablenotenabledexception this tablenamestr
catch  keeperexception e
throw new ioexception
e
success   true
finally
if   success
releasetablelock
return this
@override
public string tostring
string name
if server    null    server getservername      null
name   server getservername   tostring
return getclass   getsimplename         name       getseqid
tablenamestr
@override
public void process
try
log info     this tablenamestr
mastercoprocessorhost cphost     hmaster  this server
getcoprocessorhost
if  cphost    null
cphost predisabletablehandler this tablename
handledisabletable
if  cphost    null
cphost postdisabletablehandler this tablename
catch  ioexception e
log error     this tablenamestr  e
catch  keeperexception e
log error     this tablenamestr  e
finally
releasetablelock
private void releasetablelock
if  this tablelock    null
try
this tablelock release
catch  ioexception ex
log warn    ex
private void handledisabletable   throws ioexception  keeperexception
// set table disabling flag up in zk.
this assignmentmanager getzktable   setdisablingtable this tablenamestr
boolean done   false
while  true
// get list of online regions that are of this table.  regions that are
// already closed will not be included in this list; i.e. the returned
// list is not all regions in a table, its all online regions according
// to the in-memory state on this master.
final list<hregioninfo> regions   this assignmentmanager
getregionstates   getregionsoftable tablename
if  regions size      0
done   true
break
log info     regions size
bulkdisabler bd   new bulkdisabler this server  regions
try
if  bd bulkassign
done   true
break
catch  interruptedexception e
log warn
// preserve the interrupt.
thread currentthread   interrupt
break
// flip the table to disabled if success.
if  done  this assignmentmanager getzktable   setdisabledtable this tablenamestr
log info     done
/**
* run bulk disable.
*/
class bulkdisabler extends bulkassigner
private final list<hregioninfo> regions
bulkdisabler final server server  final list<hregioninfo> regions
super server
this regions   regions
@override
protected void populatepool executorservice pool
regionstates regionstates   assignmentmanager getregionstates
for  hregioninfo region  regions
if  regionstates isregionintransition region
regionstates isregionfailedtoclose region   continue
final hregioninfo hri   region
pool execute trace wrap new runnable
public void run
assignmentmanager unassign hri  true
@override
protected boolean waituntildone long timeout
throws interruptedexception
long starttime   system currenttimemillis
long remaining   timeout
list<hregioninfo> regions   null
while   server isstopped      remaining > 0
thread sleep waitingtimeforevents
regions   assignmentmanager getregionstates   getregionsoftable tablename
log debug     remaining       regions
if  regions isempty    break
remaining   timeout    system currenttimemillis     starttime
return regions    null    regions isempty