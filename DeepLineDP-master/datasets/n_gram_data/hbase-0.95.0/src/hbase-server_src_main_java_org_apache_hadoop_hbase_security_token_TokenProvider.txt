/*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase security token
import java io ioexception
import com google protobuf rpccallback
import com google protobuf rpccontroller
import com google protobuf service
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop hbase coprocessor
import org apache hadoop hbase coprocessorenvironment
import org apache hadoop hbase coprocessor coprocessorservice
import org apache hadoop hbase coprocessor regioncoprocessorenvironment
import org apache hadoop hbase ipc hbaseserver
import org apache hadoop hbase ipc requestcontext
import org apache hadoop hbase ipc rpcserver
import org apache hadoop hbase protobuf protobufutil
import org apache hadoop hbase protobuf responseconverter
import org apache hadoop hbase protobuf generated authenticationprotos
import org apache hadoop hbase exceptions accessdeniedexception
import org apache hadoop hbase security user
import org apache hadoop security usergroupinformation
import org apache hadoop security usergroupinformation authenticationmethod
import org apache hadoop security token secretmanager
import org apache hadoop security token token
/**
* provides a service for obtaining authentication tokens via the
* {@link authenticationprotos} authenticationservice coprocessor service.
*/
public class tokenprovider implements authenticationprotos authenticationservice interface
coprocessor  coprocessorservice
private static log log   logfactory getlog tokenprovider class
private authenticationtokensecretmanager secretmanager
@override
public void start coprocessorenvironment env
// if running at region
if  env instanceof regioncoprocessorenvironment
regioncoprocessorenvironment regionenv
regioncoprocessorenvironment env
rpcserver server   regionenv getregionserverservices   getrpcserver
secretmanager<?> mgr     hbaseserver server  getsecretmanager
if  mgr instanceof authenticationtokensecretmanager
secretmanager    authenticationtokensecretmanager mgr
@override
public void stop coprocessorenvironment env  throws ioexception
/**
* @param ugi a user group information.
* @return true if delegation token operation is allowed
*/
private boolean isalloweddelegationtokenop usergroupinformation ugi  throws ioexception
authenticationmethod authmethod   ugi getauthenticationmethod
if  authmethod    authenticationmethod proxy
authmethod   ugi getrealuser   getauthenticationmethod
if  authmethod    authenticationmethod kerberos
authmethod    authenticationmethod kerberos_ssl
authmethod    authenticationmethod certificate
return false
return true
// authenticationservice implementation
@override
public service getservice
return authenticationprotos authenticationservice newreflectiveservice this
@override
public void getauthenticationtoken rpccontroller controller
authenticationprotos tokenrequest request
rpccallback<authenticationprotos tokenresponse> done
authenticationprotos tokenresponse builder response
authenticationprotos tokenresponse newbuilder
try
if  secretmanager    null
throw new ioexception
user currentuser   requestcontext getrequestuser
usergroupinformation ugi   null
if  currentuser    null
ugi   currentuser getugi
if  currentuser    null
throw new accessdeniedexception
else if   isalloweddelegationtokenop ugi
log warn   currentuser getname
ugi getauthenticationmethod
throw new accessdeniedexception
token<authenticationtokenidentifier> token
secretmanager generatetoken currentuser getname
response settoken protobufutil totoken token   build
catch  ioexception ioe
responseconverter setcontrollerexception controller  ioe
done run response build
@override
public void whoami rpccontroller controller  authenticationprotos whoamirequest request
rpccallback<authenticationprotos whoamiresponse> done
user requestuser   requestcontext getrequestuser
authenticationprotos whoamiresponse builder response
authenticationprotos whoamiresponse newbuilder
if  requestuser    null
response setusername requestuser getshortname
authenticationmethod method   requestuser getugi   getauthenticationmethod
if  method    null
response setauthmethod method name
done run response build