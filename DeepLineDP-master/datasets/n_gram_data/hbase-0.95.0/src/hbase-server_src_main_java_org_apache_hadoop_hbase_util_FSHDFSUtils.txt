/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase util
import java io filenotfoundexception
import java io ioexception
import java io interruptedioexception
import java lang reflect invocationtargetexception
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop classification interfaceaudience
import org apache hadoop classification interfacestability
import org apache hadoop conf configuration
import org apache hadoop fs fsdataoutputstream
import org apache hadoop fs filesystem
import org apache hadoop fs path
import org apache hadoop hbase remoteexceptionhandler
import org apache hadoop hdfs distributedfilesystem
import org apache hadoop hdfs protocol alreadybeingcreatedexception
import org apache hadoop hdfs server namenode leaseexpiredexception
/**
* implementation for hdfs
*/
@interfaceaudience public
@interfacestability evolving
public class fshdfsutils extends fsutils
private static final log log   logfactory getlog fshdfsutils class
/**
* lease timeout constant, sourced from hdfs upstream.
* the upstream constant is defined in a private interface, so we
* can't reuse for compatibility reasons.
* note: on versions earlier than hadoop 0.23, the constant is in
* o.a.h.hdfs.protocol.fsconstants, while for 0.23 and above it is
* in o.a.h.hdfs.protocol.hdfsconstants cause of hdfs-1620.
*/
public static final long lease_softlimit_period   60   1000
public static final string test_trigger_dfs_append
@override
public void recoverfilelease final filesystem fs  final path p  configuration conf
throws ioexception
if   isappendsupported conf
log warn
return
// lease recovery not needed for local file system case.
// currently, local file system doesn't implement append either.
if    fs instanceof distributedfilesystem
return
log info     p
long startwaiting   system currenttimemillis
// trying recovery
boolean recovered   false
long recoverytimeout   conf getint    300000
// conf parameter passed from unit test, indicating whether fs.append() should be triggered
boolean triggerappend   conf getboolean test_trigger_dfs_append  false
exception ex   null
while   recovered
try
try
distributedfilesystem dfs    distributedfilesystem  fs
if  triggerappend  throw new ioexception
try
recovered    boolean  distributedfilesystem class getmethod
new class   path class    invoke dfs  p
if   recovered  log debug
catch  invocationtargetexception ite
// function was properly called, but threw it's own exception
throw  ioexception  ite getcause
catch  exception e
log debug     e tostring
ex   e
if  ex    null    system currenttimemillis     startwaiting > recoverytimeout
log debug     p       ex
ex   null     assume the following append   call would succeed
fsdataoutputstream out   fs append p
out close
recovered   true
log debug
if  recovered  break
catch  ioexception e
e   remoteexceptionhandler checkioexception e
if  e instanceof alreadybeingcreatedexception
// we expect that we'll get this message while the lease is still
// within its soft limit, but if we get it past that, it means
// that the rs is holding onto the file even though it lost its
// znode. we could potentially abort after some time here.
long waitedfor   system currenttimemillis     startwaiting
if  waitedfor > lease_softlimit_period
log warn     waitedfor       p
e getmessage
else if  e instanceof leaseexpiredexception
e getmessage   contains
// this exception comes out instead of fnfe, fix it
throw new filenotfoundexception
p tostring
else
throw new ioexception     p      e
try
thread sleep 1000
catch  interruptedexception ie
interruptedioexception iioe   new interruptedioexception
iioe initcause ie
throw iioe
log info     p