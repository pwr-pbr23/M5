/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase io
import java util collection
import java io ioexception
import java io inputstream
import java io filenotfoundexception
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop classification interfaceaudience
import org apache hadoop fs fsdatainputstream
import org apache hadoop fs filesystem
import org apache hadoop fs filestatus
import org apache hadoop fs path
import org apache hadoop fs positionedreadable
import org apache hadoop fs seekable
/**
* the filelink is a sort of hardlink, that allows access to a file given a set of locations.
*
* <p><b>the problem:</b>
* <ul>
*  <li>
*    hdfs doesn't have support for hardlinks, and this make impossible to referencing
*    the same data blocks using different names.
*  </li>
*  <li>
*    hbase store files in one location (e.g. table/region/family/) and when the file is not
*    needed anymore (e.g. compaction, region deletion, ...) moves it to an archive directory.
*  </li>
* </ul>
* if we want to create a reference to a file, we need to remember that it can be in its
* original location or in the archive folder.
* the filelink class tries to abstract this concept and given a set of locations
* it is able to switch between them making this operation transparent for the user.
* {@link hfilelink} is a more concrete implementation of the {@code filelink}.
*
* <p><b>back-references:</b>
* to help the {@link org.apache.hadoop.hbase.master.cleaner.cleanerchore} to keep track of
* the links to a particular file, during the {@code filelink} creation, a new file is placed
* inside a back-reference directory. there's one back-reference directory for each file that
* has links, and in the directory there's one file per link.
*
* <p>hfilelink example
* <ul>
*  <li>
*      /hbase/table/region-x/cf/file-k
*      (original file)
*  </li>
*  <li>
*      /hbase/table-cloned/region-y/cf/file-k.region-x.table
*     (hfilelink to the original file)
*  </li>
*  <li>
*      /hbase/table-2nd-cloned/region-z/cf/file-k.region-x.table
*      (hfilelink to the original file)
*  </li>
*  <li>
*      /hbase/.archive/table/region-x/.links-file-k/region-y.table-cloned
*      (back-reference to the link in table-cloned)
*  </li>
*  <li>
*      /hbase/.archive/table/region-x/.links-file-k/region-z.table-2nd-cloned
*      (back-reference to the link in table-2nd-cloned)
*  </li>
* </ul>
*/
@interfaceaudience private
public class filelink
private static final log log   logfactory getlog filelink class
/** define the back-reference directory name prefix: .links-<hfile>/ */
public static final string back_references_directory_prefix
/**
* filelink inputstream that handles the switch between the original path
* and the alternative locations, when the file is moved.
*/
private static class filelinkinputstream extends inputstream
implements seekable  positionedreadable
private fsdatainputstream in   null
private path currentpath   null
private long pos   0
private final filelink filelink
private final int buffersize
private final filesystem fs
public filelinkinputstream final filesystem fs  final filelink filelink
throws ioexception
this fs  filelink  fs getconf   getint    4096
public filelinkinputstream final filesystem fs  final filelink filelink  int buffersize
throws ioexception
this buffersize   buffersize
this filelink   filelink
this fs   fs
this in   tryopen
@override
public int read   throws ioexception
int res
try
res   in read
catch  filenotfoundexception e
res   tryopen   read
catch  nullpointerexception e       hdfs 1 x   dfsinputstream getblockat
res   tryopen   read
catch  assertionerror e       assert in hdfs 1 x   dfsinputstream getblockat
res   tryopen   read
if  res > 0  pos    1
return res
@override
public int read byte b  throws ioexception
return read b  0  b length
@override
public int read byte b  int off  int len  throws ioexception
int n
try
n   in read b  off  len
catch  filenotfoundexception e
n   tryopen   read b  off  len
catch  nullpointerexception e       hdfs 1 x   dfsinputstream getblockat
n   tryopen   read b  off  len
catch  assertionerror e       assert in hdfs 1 x   dfsinputstream getblockat
n   tryopen   read b  off  len
if  n > 0  pos    n
assert in getpos      pos
return n
@override
public int read long position  byte buffer  int offset  int length  throws ioexception
int n
try
n   in read position  buffer  offset  length
catch  filenotfoundexception e
n   tryopen   read position  buffer  offset  length
catch  nullpointerexception e       hdfs 1 x   dfsinputstream getblockat
n   tryopen   read position  buffer  offset  length
catch  assertionerror e       assert in hdfs 1 x   dfsinputstream getblockat
n   tryopen   read position  buffer  offset  length
return n
@override
public void readfully long position  byte buffer  throws ioexception
readfully position  buffer  0  buffer length
@override
public void readfully long position  byte buffer  int offset  int length  throws ioexception
try
in readfully position  buffer  offset  length
catch  filenotfoundexception e
tryopen   readfully position  buffer  offset  length
catch  nullpointerexception e       hdfs 1 x   dfsinputstream getblockat
tryopen   readfully position  buffer  offset  length
catch  assertionerror e       assert in hdfs 1 x   dfsinputstream getblockat
tryopen   readfully position  buffer  offset  length
@override
public long skip long n  throws ioexception
long skipped
try
skipped   in skip n
catch  filenotfoundexception e
skipped   tryopen   skip n
catch  nullpointerexception e       hdfs 1 x   dfsinputstream getblockat
skipped   tryopen   skip n
catch  assertionerror e       assert in hdfs 1 x   dfsinputstream getblockat
skipped   tryopen   skip n
if  skipped > 0  pos    skipped
return skipped
@override
public int available   throws ioexception
try
return in available
catch  filenotfoundexception e
return tryopen   available
catch  nullpointerexception e       hdfs 1 x   dfsinputstream getblockat
return tryopen   available
catch  assertionerror e       assert in hdfs 1 x   dfsinputstream getblockat
return tryopen   available
@override
public void seek long pos  throws ioexception
try
in seek pos
catch  filenotfoundexception e
tryopen   seek pos
catch  nullpointerexception e       hdfs 1 x   dfsinputstream getblockat
tryopen   seek pos
catch  assertionerror e       assert in hdfs 1 x   dfsinputstream getblockat
tryopen   seek pos
this pos   pos
@override
public long getpos   throws ioexception
return pos
@override
public boolean seektonewsource long targetpos  throws ioexception
boolean res
try
res   in seektonewsource targetpos
catch  filenotfoundexception e
res   tryopen   seektonewsource targetpos
catch  nullpointerexception e       hdfs 1 x   dfsinputstream getblockat
res   tryopen   seektonewsource targetpos
catch  assertionerror e       assert in hdfs 1 x   dfsinputstream getblockat
res   tryopen   seektonewsource targetpos
if  res  pos   targetpos
return res
@override
public void close   throws ioexception
in close
@override
public synchronized void mark int readlimit
@override
public synchronized void reset   throws ioexception
throw new ioexception
@override
public boolean marksupported
return false
/**
* try to open the file from one of the available locations.
*
* @return fsdatainputstream stream of the opened file link
* @throws ioexception on unexpected error, or file not found.
*/
private fsdatainputstream tryopen   throws ioexception
for  path path  filelink getlocations
if  path equals currentpath   continue
try
in   fs open path  buffersize
in seek pos
assert in getpos      pos        pos
if  log istraceenabled
if  currentpath    null
log debug     path
else
log trace     currentpath       path
currentpath   path
return in
catch  filenotfoundexception e
// try another file location
throw new filenotfoundexception     filelink
private path locations   null
protected filelink
this locations   null
/**
* @param originpath original location of the file to link
* @param alternativepaths alternative locations to look for the linked file
*/
public filelink path originpath  path    alternativepaths
setlocations originpath  alternativepaths
/**
* @param locations locations to look for the linked file
*/
public filelink final collection<path> locations
this locations   locations toarray new path
/**
* @return the locations to look for the linked file.
*/
public path getlocations
return locations
public string tostring
stringbuilder str   new stringbuilder getclass   getname
str append
int i   0
for  path location  locations
if  i   > 0  str append
str append location tostring
str append
return str tostring
/**
* @return the path of the first available link.
*/
public path getavailablepath filesystem fs  throws ioexception
for  path path  locations
if  fs exists path
return path
throw new filenotfoundexception     this
/**
* get the filestatus of the referenced file.
*
* @param fs {@link filesystem} on which to get the file status
* @return inputstream for the hfile link.
* @throws ioexception on unexpected error.
*/
public filestatus getfilestatus filesystem fs  throws ioexception
for  path path  locations
try
return fs getfilestatus path
catch  filenotfoundexception e
// try another file location
throw new filenotfoundexception     this
/**
* open the filelink for read.
* <p>
* it uses a wrapper of fsdatainputstream that is agnostic to the location
* of the file, even if the file switches between locations.
*
* @param fs {@link filesystem} on which to open the filelink
* @return inputstream for reading the file link.
* @throws ioexception on unexpected error.
*/
public fsdatainputstream open final filesystem fs  throws ioexception
return new fsdatainputstream new filelinkinputstream fs  this
/**
* open the filelink for read.
* <p>
* it uses a wrapper of fsdatainputstream that is agnostic to the location
* of the file, even if the file switches between locations.
*
* @param fs {@link filesystem} on which to open the filelink
* @param buffersize the size of the buffer to be used.
* @return inputstream for reading the file link.
* @throws ioexception on unexpected error.
*/
public fsdatainputstream open final filesystem fs  int buffersize  throws ioexception
return new fsdatainputstream new filelinkinputstream fs  this  buffersize
/**
* note: this method must be used only in the constructor!
* it creates a list with the specified locations for the link.
*/
protected void setlocations path originpath  path    alternativepaths
assert this locations    null
this locations   new path
this locations   originpath
for  int i   0  i < alternativepaths length  i
this locations   alternativepaths
/**
* get the directory to store the link back references
*
* <p>to simplify the reference count process, during the filelink creation
* a back-reference is added to the back-reference directory of the specified file.
*
* @param storedir root directory for the link reference folder
* @param filename file name with links
* @return path for the link back references.
*/
public static path getbackreferencesdir final path storedir  final string filename
return new path storedir  back_references_directory_prefix   filename
/**
* get the referenced file name from the reference link directory path.
*
* @param dirpath link references directory path
* @return name of the file referenced
*/
public static string getbackreferencefilename final path dirpath
return dirpath getname   substring back_references_directory_prefix length
/**
* checks if the specified directory path is a back reference links folder.
*
* @param dirpath directory path to verify
* @return true if the specified directory is a link references folder
*/
public static boolean isbackreferencesdir final path dirpath
if  dirpath    null  return false
return dirpath getname   startswith back_references_directory_prefix