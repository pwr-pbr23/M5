/**
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase mapreduce
import java io ioexception
import java util treemap
import java util map
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop classification interfaceaudience
import org apache hadoop classification interfacestability
import org apache hadoop hbase client put
import org apache hadoop hbase util bytes
import org apache hadoop mapreduce reducer
/**
* combine puts. merges put instances grouped by <code>k</code> into a single
* instance.
* @see tablemapreduceutil
*/
@interfaceaudience public
@interfacestability evolving
public class putcombiner<k> extends reducer<k  put  k  put>
private static final log log   logfactory getlog putcombiner class
@override
protected void reduce k row  iterable<put> vals  context context
throws ioexception  interruptedexception
int cnt   0
// there's nothing to say <code>k row</code> is the same as the rowkey
// used to construct puts (value) instances. thus the map of put.getrow()
// to combined put is necessary.
// todo: would be better if we knew <code>k row</code> and put rowkey were
// identical. then this whole put buffering business goes away.
// todo: could use heapsize to create an upper bound on the memory size of
// the puts map and flush some portion of the content while looping. this
// flush could result in multiple puts for a single rowkey. that is
// acceptable because combiner is run as an optimization and it's not
// critical that all puts are grouped perfectly.
map<byte  put> puts   new treemap<byte  put> bytes bytes_comparator
for  put p   vals
cnt
if   puts containskey p getrow
puts put p getrow    p
else
puts get p getrow    getfamilymap   putall p getfamilymap
for  put p   puts values
context write row  p
log info string format    cnt  puts size