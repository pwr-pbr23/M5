/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase backup example
import java io ioexception
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop classification interfaceaudience
import org apache hadoop conf configuration
import org apache hadoop hbase exceptions zookeeperconnectionexception
import org apache hadoop hbase client hconnection
import org apache hadoop hbase master cleaner hfilecleaner
import org apache hadoop hbase util bytes
import org apache hadoop hbase zookeeper zkutil
import org apache hadoop hbase zookeeper zookeeperwatcher
import org apache zookeeper keeperexception
/**
* client-side manager for which table's hfiles should be preserved for long-term archive.
* @see zktablearchiveclient
* @see hfilearchivetablemonitor
* @see longtermarchivinghfilecleaner
*/
@interfaceaudience private
class hfilearchivemanager
private final string archiveznode
private static final log log   logfactory getlog hfilearchivemanager class
private final zookeeperwatcher zookeeper
private volatile boolean stopped   false
public hfilearchivemanager hconnection connection  configuration conf
throws zookeeperconnectionexception  ioexception
this zookeeper   new zookeeperwatcher conf      connection tostring
connection
this archiveznode   zktablearchiveclient getarchiveznode this zookeeper getconfiguration
this zookeeper
/**
* turn on auto-backups of hfiles on the specified table.
* <p>
* when hfiles would be deleted from the hfile archive, they are instead preserved.
* @param table name of the table for which to preserve hfiles.
* @return <tt>this</tt> for chaining.
* @throws keeperexception if we can't reach zookeeper to update the hfile cleaner.
*/
public hfilearchivemanager enablehfilebackup byte table  throws keeperexception
enable this zookeeper  table
return this
/**
* stop retaining hfiles for the given table in the archive. hfiles will be cleaned up on the next
* pass of the {@link hfilecleaner}, if the hfiles are retained by another cleaner.
* @param table name of the table for which to disable hfile retention.
* @return <tt>this</tt> for chaining.
* @throws keeperexception if if we can't reach zookeeper to update the hfile cleaner.
*/
public hfilearchivemanager disablehfilebackup byte table  throws keeperexception
disable this zookeeper  table
return this
/**
* disable long-term archival of all hfiles for all tables in the cluster.
* @return <tt>this</tt> for chaining.
* @throws ioexception if the number of attempts is exceeded
*/
public hfilearchivemanager disablehfilebackup   throws ioexception
log debug
try
zkutil deletenoderecursively this zookeeper  archiveznode
return this
catch  keeperexception e
throw new ioexception    e
/**
* perform a best effort enable of hfile retention, which relies on zookeeper communicating the //
* * change back to the hfile cleaner.
* <p>
* no attempt is made to make sure that backups are successfully created - it is inherently an
* <b>asynchronous operation</b>.
* @param zookeeper watcher connection to zk cluster
* @param table table name on which to enable archiving
* @throws keeperexception
*/
private void enable zookeeperwatcher zookeeper  byte table
throws keeperexception
log debug
zkutil createandfailsilent zookeeper  archiveznode
// then add the table to the list of znodes to archive
string tablenode   this gettablenode table
log debug     tablenode
zkutil createsetdata zookeeper  tablenode  new byte
/**
* disable all archiving of files for a given table
* <p>
* inherently an <b>asynchronous operation</b>.
* @param zookeeper watcher for the zk cluster
* @param table name of the table to disable
* @throws keeperexception if an unexpected zk connection issues occurs
*/
private void disable zookeeperwatcher zookeeper  byte table  throws keeperexception
// ensure the latest state of the archive node is found
zookeeper sync archiveznode
// if the top-level archive node is gone, then we are done
if  zkutil checkexists zookeeper  archiveznode  < 0
return
// delete the table node, from the archive
string tablenode   this gettablenode table
// make sure the table is the latest version so the delete takes
zookeeper sync tablenode
log debug     tablenode
zkutil deletenoderecursively zookeeper  tablenode
public void stop
if   this stopped
this stopped   true
log debug
this zookeeper close
/**
* check to see if the table is currently marked for archiving
* @param table name of the table to check
* @return <tt>true</tt> if the archive znode for that table exists, <tt>false</tt> if not
* @throws keeperexception if an unexpected zookeeper error occurs
*/
public boolean isarchivingenabled byte table  throws keeperexception
string tablenode   this gettablenode table
return zkutil checkexists zookeeper  tablenode  >  0
/**
* get the zookeeper node associated with archiving the given table
* @param table name of the table to check
* @return znode for the table's archive status
*/
private string gettablenode byte table
return zkutil joinznode archiveznode  bytes tostring table