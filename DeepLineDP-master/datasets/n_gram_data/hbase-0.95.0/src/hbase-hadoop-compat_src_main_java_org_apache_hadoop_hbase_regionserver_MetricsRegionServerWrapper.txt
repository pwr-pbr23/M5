/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase regionserver
/**
* this is the interface that will expose regionserver information to hadoop1/hadoop2
* implementations of the metricsregionserversource.
*/
public interface metricsregionserverwrapper
/**
* get servername
*/
public string getservername
/**
* get the cluster id
*
* @return cluster id
*/
public string getclusterid
/**
* get the zookeeper quorum info
*
* @return zookeeper quorum info
*/
public string getzookeeperquorum
/**
* get the co-processors
*
* @return co-processors
*/
public string getcoprocessors
/**
* get hregionserver start time
*
* @return start time of regionserver in milliseconds
*/
public long getstartcode
/**
* the number of online regions
*/
long getnumonlineregions
/**
* get the number of stores hosted on this region server.
*/
long getnumstores
/**
* get the number of store files hosted on this region server.
*/
long getnumstorefiles
/**
* get the size of the memstore on this region server.
*/
long getmemstoresize
/**
* get the total size of the store files this region server is serving from.
*/
long getstorefilesize
/**
* get the number of requests per second.
*/
double getrequestspersecond
/**
* get the total number of requests per second.
*/
long gettotalrequestcount
/**
* get the number of read requests to regions hosted on this region server.
*/
long getreadrequestscount
/**
* get the number of write requests to regions hosted on this region server.
*/
long getwriterequestscount
/**
* get the number of cas operations that failed.
*/
long getcheckandmutatechecksfailed
/**
* get the number of cas operations that passed.
*/
long getcheckandmutatecheckspassed
/**
* get the size of indexes in storefiles on disk.
*/
long getstorefileindexsize
/**
* get the size of of the static indexes including the roots.
*/
long gettotalstaticindexsize
/**
* get the size of the static bloom filters.
*/
long gettotalstaticbloomsize
/**
* number of mutations received with wal explicitly turned off.
*/
long getnumputswithoutwal
/**
* ammount of data in the memstore but not in the wal because mutations explicitly had their
* wal turned off.
*/
long getdatainmemorywithoutwal
/**
* get the percent of hfiles' that are local.
*/
int getpercentfilelocal
/**
* get the size of the compaction queue
*/
int getcompactionqueuesize
/**
* get the size of the flush queue.
*/
int getflushqueuesize
/**
* get the size of the block cache that is free.
*/
long getblockcachefreesize
/**
* get the number of items in the block cache.
*/
long getblockcachecount
/**
* get the total size of the block cache.
*/
long getblockcachesize
/**
* get the count of hits to the block cache
*/
long getblockcachehitcount
/**
* get the count of misses to the block cache.
*/
long getblockcachemisscount
/**
* get the number of items evicted from the block cache.
*/
long getblockcacheevictedcount
/**
* get the percent of all requests that hit the block cache.
*/
int getblockcachehitpercent
/**
* get the percent of requests with the block cache turned on that hit the block cache.
*/
int getblockcachehitcachingpercent
/**
* force a re-computation of the metrics.
*/
void forcerecompute
/**
* get the amount of time that updates were blocked.
*/
long getupdatesblockedtime