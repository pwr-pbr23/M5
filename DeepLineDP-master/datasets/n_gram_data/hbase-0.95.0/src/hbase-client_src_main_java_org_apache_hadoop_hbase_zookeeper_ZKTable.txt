/**
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase zookeeper
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop classification interfaceaudience
import org apache hadoop hbase protobuf protobufutil
import org apache hadoop hbase protobuf generated zookeeperprotos
import org apache zookeeper keeperexception
import java util hashmap
import java util hashset
import java util list
import java util map
import java util set
/**
* helper class for table state tracking for use by assignmentmanager.
* reads, caches and sets state up in zookeeper.  if multiple read/write
* clients, will make for confusion.  read-only clients other than
* assignmentmanager interested in learning table state can use the
* read-only utility methods in {@link zktablereadonly}.
*
* <p>to save on trips to the zookeeper ensemble, internally we cache table
* state.
*/
@interfaceaudience private
public class zktable
// a znode will exist under the table directory if it is in any of the
// following states: {@link tablestate#enabling} , {@link tablestate#disabling},
// or {@link tablestate#disabled}.  if {@link tablestate#enabled}, there will
// be no entry for a table in zk.  thats how it currently works.
private static final log log   logfactory getlog zktable class
private final zookeeperwatcher watcher
/**
* cache of what we found in zookeeper so we don't have to go to zk ensemble
* for every query.  synchronize access rather than use concurrent map because
* synchronization needs to span query of zk.
*/
private final map<string  zookeeperprotos table state> cache
new hashmap<string  zookeeperprotos table state>
// todo: make it so always a table znode. put table schema here as well as table state.
// have watcher on table znode so all are notified of state or schema change.
public zktable final zookeeperwatcher zkw  throws keeperexception
super
this watcher   zkw
populatetablestates
/**
* gets a list of all the tables set as disabled in zookeeper.
* @throws keeperexception
*/
private void populatetablestates
throws keeperexception
synchronized  this cache
list<string> children   zkutil listchildrennowatch this watcher  this watcher tableznode
if  children    null  return
for  string child  children
zookeeperprotos table state state   zktablereadonly gettablestate this watcher  child
if  state    null  this cache put child  state
/**
* sets the specified table as disabled in zookeeper.  fails silently if the
* table is already disabled in zookeeper.  sets no watches.
* @param tablename
* @throws keeperexception unexpected zookeeper exception
*/
public void setdisabledtable string tablename
throws keeperexception
synchronized  this cache
if   isdisablingordisabledtable tablename
log warn     tablename
this cache get tablename
settablestate tablename  zookeeperprotos table state disabled
/**
* sets the specified table as disabling in zookeeper.  fails silently if the
* table is already disabled in zookeeper.  sets no watches.
* @param tablename
* @throws keeperexception unexpected zookeeper exception
*/
public void setdisablingtable final string tablename
throws keeperexception
synchronized  this cache
if   isenabledordisablingtable tablename
log warn     tablename
this cache get tablename
settablestate tablename  zookeeperprotos table state disabling
/**
* sets the specified table as enabling in zookeeper.  fails silently if the
* table is already disabled in zookeeper.  sets no watches.
* @param tablename
* @throws keeperexception unexpected zookeeper exception
*/
public void setenablingtable final string tablename
throws keeperexception
synchronized  this cache
if   isdisabledorenablingtable tablename
log warn     tablename
this cache get tablename
settablestate tablename  zookeeperprotos table state enabling
/**
* sets the specified table as enabling in zookeeper atomically
* if the table is already in enabling state, no operation is performed
* @param tablename
* @return if the operation succeeds or not
* @throws keeperexception unexpected zookeeper exception
*/
public boolean checkandsetenablingtable final string tablename
throws keeperexception
synchronized  this cache
if  isenablingtable tablename
return false
settablestate tablename  zookeeperprotos table state enabling
return true
/**
* sets the specified table as enabling in zookeeper atomically
* if the table isn't in disabled state, no operation is performed
* @param tablename
* @return if the operation succeeds or not
* @throws keeperexception unexpected zookeeper exception
*/
public boolean checkdisabledandsetenablingtable final string tablename
throws keeperexception
synchronized  this cache
if   isdisabledtable tablename
return false
settablestate tablename  zookeeperprotos table state enabling
return true
/**
* sets the specified table as disabling in zookeeper atomically
* if the table isn't in enabled state, no operation is performed
* @param tablename
* @return if the operation succeeds or not
* @throws keeperexception unexpected zookeeper exception
*/
public boolean checkenabledandsetdisablingtable final string tablename
throws keeperexception
synchronized  this cache
if  this cache get tablename     null     isenabledtable tablename
return false
settablestate tablename  zookeeperprotos table state disabling
return true
private void settablestate final string tablename  final zookeeperprotos table state state
throws keeperexception
string znode   zkutil joinznode this watcher tableznode  tablename
if  zkutil checkexists this watcher  znode      1
zkutil createandfailsilent this watcher  znode
synchronized  this cache
zookeeperprotos table builder builder   zookeeperprotos table newbuilder
builder setstate state
byte  data   protobufutil prependpbmagic builder build   tobytearray
zkutil setdata this watcher  znode  data
this cache put tablename  state
public boolean isdisabledtable final string tablename
return istablestate tablename  zookeeperprotos table state disabled
public boolean isdisablingtable final string tablename
return istablestate tablename  zookeeperprotos table state disabling
public boolean isenablingtable final string tablename
return istablestate tablename  zookeeperprotos table state enabling
public boolean isenabledtable string tablename
return istablestate tablename  zookeeperprotos table state enabled
public boolean isdisablingordisabledtable final string tablename
synchronized  this cache
return isdisablingtable tablename     isdisabledtable tablename
public boolean isenabledordisablingtable final string tablename
synchronized  this cache
return isenabledtable tablename     isdisablingtable tablename
public boolean isdisabledorenablingtable final string tablename
synchronized  this cache
return isdisabledtable tablename     isenablingtable tablename
private boolean istablestate final string tablename  final zookeeperprotos table state state
synchronized  this cache
zookeeperprotos table state currentstate   this cache get tablename
return zktablereadonly istablestate currentstate  state
/**
* deletes the table in zookeeper.  fails silently if the
* table is not currently disabled in zookeeper.  sets no watches.
* @param tablename
* @throws keeperexception unexpected zookeeper exception
*/
public void setdeletedtable final string tablename
throws keeperexception
synchronized  this cache
if  this cache remove tablename     null
log warn     tablename
zkutil deletenodefailsilent this watcher
zkutil joinznode this watcher tableznode  tablename
/**
* sets the enabled state in the cache and creates or force updates a node to
* enabled state for the specified table
*
* @param tablename
* @throws keeperexception
*/
public void setenabledtable final string tablename  throws keeperexception
settablestate tablename  zookeeperprotos table state enabled
/**
* check if table is present .
*
* @param tablename
* @return true if the table is present
*/
public boolean istablepresent final string tablename
synchronized  this cache
zookeeperprotos table state state   this cache get tablename
return   state    null
/**
* gets a list of all the tables set as disabled in zookeeper.
* @return set of disabled tables, empty set if none
*/
public set<string> getdisabledtables
set<string> disabledtables   new hashset<string>
synchronized  this cache
set<string> tables   this cache keyset
for  string table  tables
if  isdisabledtable table   disabledtables add table
return disabledtables
/**
* gets a list of all the tables set as disabled in zookeeper.
* @return set of disabled tables, empty set if none
* @throws keeperexception
*/
public static set<string> getdisabledtables zookeeperwatcher zkw
throws keeperexception
return getalltables zkw  zookeeperprotos table state disabled
/**
* gets a list of all the tables set as disabling in zookeeper.
* @return set of disabling tables, empty set if none
* @throws keeperexception
*/
public static set<string> getdisablingtables zookeeperwatcher zkw
throws keeperexception
return getalltables zkw  zookeeperprotos table state disabling
/**
* gets a list of all the tables set as enabling in zookeeper.
* @return set of enabling tables, empty set if none
* @throws keeperexception
*/
public static set<string> getenablingtables zookeeperwatcher zkw
throws keeperexception
return getalltables zkw  zookeeperprotos table state enabling
/**
* gets a list of all the tables set as disabled in zookeeper.
* @return set of disabled tables, empty set if none
* @throws keeperexception
*/
public static set<string> getdisabledordisablingtables zookeeperwatcher zkw
throws keeperexception
return getalltables zkw  zookeeperprotos table state disabled
zookeeperprotos table state disabling
/**
* if the table is found in enabling state the inmemory state is removed. this
* helps in cases where createtable is to be retried by the client incase of
* failures
*
* @param tablename
*/
public void removeenablingtable final string tablename
synchronized  this cache
if  isenablingtable tablename
this cache remove tablename
/**
* gets a list of all the tables of specified states in zookeeper.
* @return set of tables of specified states, empty set if none
* @throws keeperexception
*/
static set<string> getalltables final zookeeperwatcher zkw
final zookeeperprotos table state    states  throws keeperexception
set<string> alltables   new hashset<string>
list<string> children
zkutil listchildrennowatch zkw  zkw tableznode
for  string child  children
zookeeperprotos table state state   zktablereadonly gettablestate zkw  child
for  zookeeperprotos table state expectedstate  states
if  state    expectedstate
alltables add child
break
return alltables