/**
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase mapreduce
import java util iterator
import java util list
import java util treeset
import org apache hadoop classification interfaceaudience
import org apache hadoop classification interfacestability
import org apache hadoop hbase cell
import org apache hadoop hbase keyvalue
import org apache hadoop hbase keyvalueutil
import org apache hadoop hbase client put
import org apache hadoop hbase io immutablebyteswritable
import org apache hadoop mapreduce reducer
import org apache hadoop util stringutils
/**
* emits sorted puts.
* reads in all puts from passed iterator, sorts them, then emits
* puts in sorted order.  if lots of columns per row, it will use lots of
* memory sorting.
* @see hfileoutputformat
* @see keyvaluesortreducer
*/
@interfaceaudience public
@interfacestability stable
public class putsortreducer extends
reducer<immutablebyteswritable  put  immutablebyteswritable  keyvalue>
@override
protected void reduce
immutablebyteswritable row
java lang iterable<put> puts
reducer<immutablebyteswritable  put
immutablebyteswritable  keyvalue> context context
throws java io ioexception  interruptedexception
// although reduce() is called per-row, handle pathological case
long threshold   context getconfiguration   getlong
2l    1<<30
iterator<put> iter   puts iterator
while  iter hasnext
treeset<keyvalue> map   new treeset<keyvalue> keyvalue comparator
long cursize   0
// stop at the end or the ram threshold
while  iter hasnext      cursize < threshold
put p   iter next
for  list<? extends cell> cells  p getfamilymap   values
for  cell cell  cells
keyvalue kv   keyvalueutil ensurekeyvalue cell
map add kv
cursize    kv getlength
context setstatus     map size         map getclass
stringutils humanreadableint cursize
int index   0
for  keyvalue kv   map
context write row  kv
if  index > 0    index % 100    0
context setstatus     index
// if we have more entries to process
if  iter hasnext
// force flush because we cannot guarantee intra-row sorted order
context write null  null