/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase regionserver
import org apache commons lang stringutils
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop classification interfaceaudience
import org apache hadoop hbase compatibilitysingletonfactory
import org apache hadoop hbase hdfsblocksdistribution
import org apache hadoop hbase servername
import org apache hadoop hbase io hfile blockcache
import org apache hadoop hbase io hfile cacheconfig
import org apache hadoop hbase io hfile cachestats
import org apache hadoop hbase util environmentedgemanager
import org apache hadoop hbase zookeeper zookeeperwatcher
import org apache hadoop metrics2 metricsexecutor
import java util collection
import java util concurrent scheduledexecutorservice
import java util concurrent timeunit
/**
* impl for exposing hregionserver information through hadoop's metrics 2 system.
*/
@interfaceaudience private
class metricsregionserverwrapperimpl
implements metricsregionserverwrapper
public static final log log   logfactory getlog metricsregionserverwrapperimpl class
public static final int period   15
private final hregionserver regionserver
private blockcache blockcache
private volatile long numstores   0
private volatile long numstorefiles   0
private volatile long memstoresize   0
private volatile long storefilesize   0
private volatile double requestspersecond   0 0
private volatile long readrequestscount   0
private volatile long writerequestscount   0
private volatile long checkandmutatechecksfailed   0
private volatile long checkandmutatecheckspassed   0
private volatile long storefileindexsize   0
private volatile long totalstaticindexsize   0
private volatile long totalstaticbloomsize   0
private volatile long numputswithoutwal   0
private volatile long datainmemorywithoutwal   0
private volatile int percentfilelocal   0
private cachestats cachestats
private scheduledexecutorservice executor
private runnable runnable
public metricsregionserverwrapperimpl final hregionserver regionserver
this regionserver   regionserver
initblockcache
this executor   compatibilitysingletonfactory getinstance metricsexecutor class  getexecutor
this runnable   new regionservermetricswrapperrunnable
this executor schedulewithfixeddelay this runnable  period  period  timeunit seconds
/**
* it's possible that due to threading the block cache could not be initialized
* yet (testing multiple region servers in one jvm).  so we need to try and initialize
* the blockcache and cachestats reference multiple times until we succeed.
*/
private synchronized  void initblockcache
cacheconfig cacheconfig   this regionserver cacheconfig
if  cacheconfig    null    this blockcache    null
this blockcache   cacheconfig getblockcache
if  this blockcache    null    this cachestats    null
this cachestats   blockcache getstats
@override
public string getclusterid
return regionserver getclusterid
@override
public long getstartcode
return regionserver getstartcode
@override
public string getzookeeperquorum
zookeeperwatcher zk   regionserver getzookeeperwatcher
if  zk    null
return
return zk getquorum
@override
public string getcoprocessors
string coprocessors   regionserver getcoprocessors
if  coprocessors    null    coprocessors length    0
return
return stringutils join coprocessors
@override
public string getservername
servername servername   regionserver getservername
if  servername    null
return
return servername getservername
@override
public long getnumonlineregions
collection<hregion> onlineregionslocalcontext   regionserver getonlineregionslocalcontext
if  onlineregionslocalcontext    null
return 0
return onlineregionslocalcontext size
@override
public long gettotalrequestcount
return regionserver requestcount get
@override
public int getcompactionqueuesize
//the thread could be zero.  if so assume there is no queue.
if  this regionserver compactsplitthread    null
return 0
return this regionserver compactsplitthread getcompactionqueuesize
@override
public int getflushqueuesize
//if there is no flusher there should be no queue.
if  this regionserver cacheflusher    null
return 0
return this regionserver cacheflusher getflushqueuesize
@override
public long getblockcachecount
if  this blockcache    null
return 0
return this blockcache size
@override
public long getblockcachesize
if  this blockcache    null
return 0
return this blockcache getcurrentsize
@override
public long getblockcachefreesize
if  this blockcache    null
return 0
return this blockcache getfreesize
@override
public long getblockcachehitcount
if  this cachestats    null
return 0
return this cachestats gethitcount
@override
public long getblockcachemisscount
if  this cachestats    null
return 0
return this cachestats getmisscount
@override
public long getblockcacheevictedcount
if  this cachestats    null
return 0
return this cachestats getevictedcount
@override
public int getblockcachehitpercent
if  this cachestats    null
return 0
return  int   this cachestats gethitratio     100
@override
public int getblockcachehitcachingpercent
if  this cachestats    null
return 0
return  int   this cachestats gethitcachingratio     100
@override public void forcerecompute
this runnable run
@override
public long getnumstores
return numstores
@override
public long getnumstorefiles
return numstorefiles
@override
public long getmemstoresize
return memstoresize
@override
public long getstorefilesize
return storefilesize
@override public double getrequestspersecond
return requestspersecond
@override
public long getreadrequestscount
return readrequestscount
@override
public long getwriterequestscount
return writerequestscount
@override
public long getcheckandmutatechecksfailed
return checkandmutatechecksfailed
@override
public long getcheckandmutatecheckspassed
return checkandmutatecheckspassed
@override
public long getstorefileindexsize
return storefileindexsize
@override
public long gettotalstaticindexsize
return totalstaticindexsize
@override
public long gettotalstaticbloomsize
return totalstaticbloomsize
@override
public long getnumputswithoutwal
return numputswithoutwal
@override
public long getdatainmemorywithoutwal
return datainmemorywithoutwal
@override
public int getpercentfilelocal
return percentfilelocal
@override
public long getupdatesblockedtime
if  this regionserver cacheflusher    null
return 0
return this regionserver cacheflusher getupdatesblockedmshighwater   get
/**
* this is the runnable that will be executed on the executor every period number of seconds
* it will take metrics/numbers from all of the regions and use them to compute point in
* time metrics.
*/
public class regionservermetricswrapperrunnable implements runnable
private long lastran   0
private long lastrequestcount   0
@override
synchronized public void run
initblockcache
cachestats   blockcache getstats
hdfsblocksdistribution hdfsblocksdistribution
new hdfsblocksdistribution
long tempnumstores   0
long tempnumstorefiles   0
long tempmemstoresize   0
long tempstorefilesize   0
long tempreadrequestscount   0
long tempwriterequestscount   0
long tempcheckandmutatechecksfailed   0
long tempcheckandmutatecheckspassed   0
long tempstorefileindexsize   0
long temptotalstaticindexsize   0
long temptotalstaticbloomsize   0
long tempnumputswithoutwal   0
long tempdatainmemorywithoutwal   0
int temppercentfilelocal   0
for  hregion r   regionserver getonlineregionslocalcontext
tempnumputswithoutwal    r numputswithoutwal get
tempdatainmemorywithoutwal    r datainmemorywithoutwal get
tempreadrequestscount    r readrequestscount get
tempwriterequestscount    r writerequestscount get
tempcheckandmutatechecksfailed    r checkandmutatechecksfailed get
tempcheckandmutatecheckspassed    r checkandmutatecheckspassed get
tempnumstores    r stores size
for  store store   r stores values
tempnumstorefiles    store getstorefilescount
tempmemstoresize    store getmemstoresize
tempstorefilesize    store getstorefilessize
tempstorefileindexsize    store getstorefilesindexsize
temptotalstaticbloomsize    store gettotalstaticbloomsize
temptotalstaticindexsize    store gettotalstaticindexsize
hdfsblocksdistribution add r gethdfsblocksdistribution
float localityindex   hdfsblocksdistribution getblocklocalityindex
regionserver getservername   gethostname
temppercentfilelocal    int   localityindex   100
//compute the number of requests per second
long currenttime   environmentedgemanager currenttimemillis
// assume that it took period seconds to start the executor.
// this is a guess but it's a pretty good one.
if  lastran    0
lastran   currenttime    period 1000
//if we've time traveled keep the last requests per second.
if   currenttime   lastran  > 10
long currentrequestcount   gettotalrequestcount
requestspersecond    currentrequestcount   lastrequestcount      currenttime   lastran    1000 0
lastrequestcount   currentrequestcount
lastran   currenttime
//copy over computed values so that no thread sees half computed values.
numstores   tempnumstores
numstorefiles   tempnumstorefiles
memstoresize   tempmemstoresize
storefilesize   tempstorefilesize
readrequestscount   tempreadrequestscount
writerequestscount   tempwriterequestscount
checkandmutatechecksfailed   tempcheckandmutatechecksfailed
checkandmutatecheckspassed   tempcheckandmutatecheckspassed
storefileindexsize   tempstorefileindexsize
totalstaticindexsize   temptotalstaticindexsize
totalstaticbloomsize   temptotalstaticbloomsize
numputswithoutwal   tempnumputswithoutwal
datainmemorywithoutwal   tempdatainmemorywithoutwal
percentfilelocal   temppercentfilelocal