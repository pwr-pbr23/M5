/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase codec
import java io ioexception
import java io inputstream
import java io outputstream
import org apache commons io ioutils
import org apache hadoop hbase cell
import org apache hadoop hbase cellutil
import org apache hadoop hbase util bytes
/**
* basic cell codec that just writes out all the individual elements of a cell.  uses ints
* delimiting all lengths. profligate. needs tune up.  does not write the mvcc stamp.
* use a different codec if you want that in the stream.
*/
public class cellcodec implements codec
static class cellencoder extends baseencoder
cellencoder final outputstream out
super out
@override
public void write cell cell  throws ioexception
checkflushed
try
// row
write cell getrowarray    cell getrowoffset    cell getrowlength
// column family
write cell getfamilyarray    cell getfamilyoffset    cell getfamilylength
// qualifier
write cell getqualifierarray    cell getqualifieroffset    cell getqualifierlength
// version
this out write bytes tobytes cell gettimestamp
// type
this out write cell gettypebyte
// value
write cell getvaluearray    cell getvalueoffset    cell getvaluelength
catch  ioexception e
throw new codecexception e
/**
* write int length followed by array bytes.
* @param bytes
* @param offset
* @param length
* @throws ioexception
*/
private void write final byte  bytes  final int offset  final int length
throws ioexception
this out write bytes tobytes length
this out write bytes  offset  length
static class celldecoder extends basedecoder
public celldecoder final inputstream in
super in
protected cell parsecell   throws ioexception
byte  row   readbytearray this in
byte  family   readbytearray in
byte  qualifier   readbytearray in
byte  longarray   new byte
ioutils readfully this in  longarray
long timestamp   bytes tolong longarray
byte type    byte  this in read
byte  value   readbytearray in
return cellutil createcell row  family  qualifier  timestamp  type  value
/**
* @return byte array read from the stream.
* @throws ioexception
*/
private byte  readbytearray final inputstream in  throws ioexception
byte  intarray   new byte
ioutils readfully in  intarray
int length   bytes toint intarray
byte  bytes   new byte
ioutils readfully in  bytes
return bytes
@override
public decoder getdecoder inputstream is
return new celldecoder is
@override
public encoder getencoder outputstream os
return new cellencoder os