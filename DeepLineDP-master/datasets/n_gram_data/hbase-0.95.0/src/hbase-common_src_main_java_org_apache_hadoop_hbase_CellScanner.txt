/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase
import org apache hadoop classification interfaceaudience
import org apache hadoop classification interfacestability
import org apache hadoop hbase cell
/**
* an interface for iterating through a sequence of cells. similar to java's iterator, but without
* the hasnext() or remove() methods. the hasnext() method is problematic because it may require
* actually loading the next object, which in turn requires storing the previous object somewhere.
*
* <p>the core data block decoder should be as fast as possible, so we push the complexity and
* performance expense of concurrently tracking multiple cells to layers above the cellscanner.
* <p>
* the {@link #current()} method will return a reference to a cell implementation. this reference
* may or may not point to a reusable cell implementation, so users of the cellscanner should not,
* for example, accumulate a list of cells. all of the references may point to the same object,
* which would be the latest state of the underlying cell. in short, the cell is mutable.
* <p/>
* typical usage:
*
* <pre>
* while (scanner.next()) {
*   cell cell = scanner.get();
*   // do something
* }
* </pre>
* <p>often used reading {@link org.apache.hadoop.hbase.cell}s written by
* {@link org.apache.hadoop.hbase.io.celloutputstream}.
*/
@interfaceaudience private
@interfacestability unstable
public interface cellscanner
/**
* @return the current cell which may be mutable
*/
cell current
/**
* advance the scanner 1 cell.
* @return true if the next cell is found and {@link #current()} will return a valid cell
*/
boolean advance