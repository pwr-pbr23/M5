/*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
* http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase coprocessor example
import com google protobuf rpccallback
import com google protobuf rpccontroller
import com google protobuf service
import org apache hadoop hbase coprocessor
import org apache hadoop hbase coprocessorenvironment
import org apache hadoop hbase keyvalue
import org apache hadoop hbase client scan
import org apache hadoop hbase exceptions coprocessorexception
import org apache hadoop hbase coprocessor coprocessorservice
import org apache hadoop hbase coprocessor regioncoprocessorenvironment
import org apache hadoop hbase coprocessor example generated exampleprotos
import org apache hadoop hbase filter firstkeyonlyfilter
import org apache hadoop hbase protobuf responseconverter
import org apache hadoop hbase regionserver internalscanner
import org apache hadoop hbase util bytes
import java io ioexception
import java util arraylist
import java util list
/**
* sample coprocessor endpoint exposing a service interface for counting rows and key values.
*
* <p>
* for the protocol buffer definition of the rowcountservice, see the source file located under
* hbase-server/src/main/protobuf/examples.proto.
* </p>
*/
public class rowcountendpoint extends exampleprotos rowcountservice
implements coprocessor  coprocessorservice
private regioncoprocessorenvironment env
public rowcountendpoint
/**
* just returns a reference to this object, which implements the rowcounterservice interface.
*/
@override
public service getservice
return this
/**
* returns a count of the rows in the region where this coprocessor is loaded.
*/
@override
public void getrowcount rpccontroller controller  exampleprotos countrequest request
rpccallback<exampleprotos countresponse> done
scan scan   new scan
scan setfilter new firstkeyonlyfilter
exampleprotos countresponse response   null
internalscanner scanner   null
try
scanner   env getregion   getscanner scan
list<keyvalue> results   new arraylist<keyvalue>
boolean hasmore   false
byte lastrow   null
long count   0
do
hasmore   scanner next results
for  keyvalue kv   results
byte currentrow   kv getrow
if  lastrow    null     bytes equals lastrow  currentrow
lastrow   currentrow
count
results clear
while  hasmore
response   exampleprotos countresponse newbuilder
setcount count  build
catch  ioexception ioe
responseconverter setcontrollerexception controller  ioe
finally
if  scanner    null
try
scanner close
catch  ioexception ignored
done run response
/**
* returns a count of all keyvalues in the region where this coprocessor is loaded.
*/
@override
public void getkeyvaluecount rpccontroller controller  exampleprotos countrequest request
rpccallback<exampleprotos countresponse> done
exampleprotos countresponse response   null
internalscanner scanner   null
try
scanner   env getregion   getscanner new scan
list<keyvalue> results   new arraylist<keyvalue>
boolean hasmore   false
long count   0
do
hasmore   scanner next results
for  keyvalue kv   results
count
results clear
while  hasmore
response   exampleprotos countresponse newbuilder
setcount count  build
catch  ioexception ioe
responseconverter setcontrollerexception controller  ioe
finally
if  scanner    null
try
scanner close
catch  ioexception ignored
done run response
/**
* stores a reference to the coprocessor environment provided by the
* {@link org.apache.hadoop.hbase.regionserver.regioncoprocessorhost} from the region where this
* coprocessor is loaded.  since this is a coprocessor endpoint, it always expects to be loaded
* on a table region, so always expects this to be an instance of
* {@link regioncoprocessorenvironment}.
* @param env the environment provided by the coprocessor host
* @throws ioexception if the provided environment is not an instance of
* {@code regioncoprocessorenvironment}
*/
@override
public void start coprocessorenvironment env  throws ioexception
if  env instanceof regioncoprocessorenvironment
this env    regioncoprocessorenvironment env
else
throw new coprocessorexception
@override
public void stop coprocessorenvironment env  throws ioexception
// nothing to do