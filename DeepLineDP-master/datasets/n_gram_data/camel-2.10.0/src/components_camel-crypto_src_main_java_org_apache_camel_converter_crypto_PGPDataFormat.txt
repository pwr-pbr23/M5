/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel converter crypto
import java io bytearrayinputstream
import java io inputstream
import java io outputstream
import java security securerandom
import java security security
import org apache camel exchange
import org apache camel spi dataformat
import org apache camel util exchangehelper
import org apache camel util iohelper
import org apache commons io ioutils
import org bouncycastle bcpg armoredoutputstream
import org bouncycastle bcpg compressionalgorithmtags
import org bouncycastle jce provider bouncycastleprovider
import org bouncycastle openpgp pgpcompresseddata
import org bouncycastle openpgp pgpencrypteddata
import org bouncycastle openpgp pgpencrypteddatagenerator
import org bouncycastle openpgp pgpencrypteddatalist
import org bouncycastle openpgp pgpliteraldata
import org bouncycastle openpgp pgpobjectfactory
import org bouncycastle openpgp pgpprivatekey
import org bouncycastle openpgp pgppublickey
import org bouncycastle openpgp pgppublickeyencrypteddata
import org bouncycastle openpgp pgputil
import org bouncycastle util io streams
/**
* <code>pgpdataformat</code> uses the <a href="http://www.bouncycastle.org/java.htm">bouncy castle</a>
* libraries to enable encryption and decryption in the pgp format.
*/
public class pgpdataformat implements dataformat
private string keyuserid
private string password
private string keyfilename
private boolean armored
private boolean integrity   true
public pgpdataformat
if  security getprovider       null
security addprovider new bouncycastleprovider
public void marshal exchange exchange  object graph  outputstream outputstream  throws exception
pgppublickey key   pgpdataformatutil findpublickey exchange getcontext    this keyfilename  this keyuserid
if  key    null
throw new illegalargumentexception
inputstream plaintextstream   exchangehelper converttomandatorytype exchange  inputstream class  graph
byte compresseddata   pgpdataformatutil compress ioutils tobytearray plaintextstream
pgpliteraldata console  compressionalgorithmtags zip
if  armored
outputstream   new armoredoutputstream outputstream
pgpencrypteddatagenerator encgen   new pgpencrypteddatagenerator pgpencrypteddata cast5  integrity  new securerandom
encgen addmethod key
outputstream encout   encgen open outputstream  compresseddata length
try
encout write compresseddata
finally
iohelper close encout  outputstream
public object unmarshal exchange exchange  inputstream encryptedstream  throws exception
if  encryptedstream    null
return null
pgpprivatekey key   pgpdataformatutil findprivatekey exchange getcontext    keyfilename  keyuserid  password
if  key    null
throw new illegalargumentexception
inputstream in   new bytearrayinputstream ioutils tobytearray encryptedstream
in   pgputil getdecoderstream in
pgpobjectfactory pgpf   new pgpobjectfactory in
pgpencrypteddatalist enc
object o   pgpf nextobject
// the first object might be a pgp marker packet.
if  o instanceof pgpencrypteddatalist
enc    pgpencrypteddatalist  o
else
enc    pgpencrypteddatalist  pgpf nextobject
pgppublickeyencrypteddata pbe    pgppublickeyencrypteddata  enc get 0
inputstream clear   pbe getdatastream key
pgpobjectfactory pgpfact   new pgpobjectfactory clear
pgpcompresseddata cdata    pgpcompresseddata  pgpfact nextobject
pgpfact   new pgpobjectfactory cdata getdatastream
pgpliteraldata ld    pgpliteraldata  pgpfact nextobject
return streams readall ld getinputstream
/**
* sets if the encrypted file should be written in ascii visible text
*/
public void setarmored boolean armored
this armored   armored
public boolean getarmored
return this armored
/**
* whether or not to add a integrity check/sign to the encrypted file
*/
public void setintegrity boolean integrity
this integrity   integrity
public boolean getintegrity
return this integrity
/**
* userid of the key used to encrypt/decrypt
*/
public void setkeyuserid string keyuserid
this keyuserid   keyuserid
public string getkeyuserid
return keyuserid
/**
* filename of the keyring that will be used, classpathresource
*/
public void setkeyfilename string keyfilename
this keyfilename   keyfilename
public string getkeyfilename
return keyfilename
/**
* password used to open the private keyring
*/
public void setpassword string password
this password   password
public string getpassword
return password