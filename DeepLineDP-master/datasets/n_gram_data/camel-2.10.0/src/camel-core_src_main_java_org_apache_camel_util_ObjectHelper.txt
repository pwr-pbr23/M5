/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel util
import java io closeable
import java io file
import java io filenotfoundexception
import java io ioexception
import java io inputstream
import java lang annotation annotation
import java lang reflect annotatedelement
import java lang reflect constructor
import java lang reflect field
import java lang reflect invocationtargetexception
import java lang reflect method
import java net url
import java nio channels readablebytechannel
import java nio charset charset
import java util arraylist
import java util arrays
import java util collection
import java util collections
import java util enumeration
import java util iterator
import java util list
import java util locale
import java util map
import java util properties
import java util scanner
import org w3c dom node
import org w3c dom nodelist
import org apache camel camelcontext
import org apache camel camelexecutionexception
import org apache camel exchange
import org apache camel message
import org apache camel ordered
import org apache camel runtimecamelexception
import org apache camel typeconverter
import org apache camel wrappedfile
import org slf4j logger
import org slf4j loggerfactory
/**
* a number of useful helper methods for working with objects
*
* @version
*/
public final class objecthelper
private static final transient logger log   loggerfactory getlogger objecthelper class
private static final string default_delimiter
/**
* utility classes should not have a public constructor.
*/
private objecthelper
/**
* a helper method for comparing objects for equality in which it uses type coercion to coerce
* types between the left and right values. this allows you test for equality for example with
* a string and integer type as camel will be able to coerce the types.
*/
public static boolean typecoerceequals typeconverter converter  object leftvalue  object rightvalue
// sanity check
if  leftvalue    null    rightvalue    null
// they are equal
return true
else if  leftvalue    null    rightvalue    null
// only one of them is null so they are not equal
return false
// try without type coerce
boolean answer   equal leftvalue  rightvalue
if  answer
return true
// are they same type, if so return false as the equals returned false
if  leftvalue getclass   isinstance rightvalue
return false
// convert left to right
object value   converter tryconvertto rightvalue getclass    leftvalue
answer   equal value  rightvalue
if  answer
return true
// convert right to left
value   converter tryconvertto leftvalue getclass    rightvalue
answer   equal leftvalue  value
return answer
/**
* a helper method for comparing objects for inequality in which it uses type coercion to coerce
* types between the left and right values.  this allows you test for inequality for example with
* a string and integer type as camel will be able to coerce the types.
*/
public static boolean typecoercenotequals typeconverter converter  object leftvalue  object rightvalue
return  typecoerceequals converter  leftvalue  rightvalue
/**
* a helper method for comparing objects ordering in which it uses type coercion to coerce
* types between the left and right values.  this allows you test for ordering for example with
* a string and integer type as camel will be able to coerce the types.
*/
@suppresswarnings
public static int typecoercecompare typeconverter converter  object leftvalue  object rightvalue
// if both values is numeric then compare using numeric
long leftnum   converter tryconvertto long class  leftvalue
long rightnum   converter tryconvertto long class  rightvalue
if  leftnum    null    rightnum    null
return leftnum compareto rightnum
// also try with floating point numbers
double leftdouble   converter tryconvertto double class  leftvalue
double rightdouble   converter tryconvertto double class  rightvalue
if  leftdouble    null    rightdouble    null
return leftdouble compareto rightdouble
// prefer to not coerce to string so use the type which is not string
// for example if we are comparing string vs integer then prefer to coerce to integer
// as all types can be converted to string which does not work well for comparison
// as eg "10" < 6 would return true, where as 10 < 6 will return false.
// if they are both string then it doesn't matter
if  rightvalue instanceof string       leftvalue instanceof string
// if right is string and left is not then flip order (remember to * -1 the result then)
return typecoercecompare converter  rightvalue  leftvalue     1
// prefer to coerce to the right hand side at first
if  rightvalue instanceof comparable
object value   converter tryconvertto rightvalue getclass    leftvalue
if  value    null
return   comparable  rightvalue  compareto value     1
// then fallback to the left hand side
if  leftvalue instanceof comparable
object value   converter tryconvertto leftvalue getclass    rightvalue
if  value    null
return   comparable  leftvalue  compareto value
// use regular compare
return compare leftvalue  rightvalue
/**
* a helper method for comparing objects for equality while handling nulls
*/
public static boolean equal object a  object b
if  a    b
return true
if  a instanceof byte    b instanceof byte
return equalbytearray  byte a   byte b
return a    null    b    null    a equals b
/**
* a helper method for comparing byte arrays for equality while handling
* nulls
*/
public static boolean equalbytearray byte a  byte b
if  a    b
return true
// loop and compare each byte
if  a    null    b    null    a length    b length
for  int i   0  i < a length  i
if  a    b
return false
// all bytes are equal
return true
return false
/**
* returns true if the given object is equal to any of the expected value
*/
public static boolean isequaltoany object object  object    values
for  object value   values
if  equal object  value
return true
return false
/**
* a helper method for performing an ordered comparison on the objects
* handling nulls and objects which do not handle sorting gracefully
*/
public static int compare object a  object b
return compare a  b  false
/**
* a helper method for performing an ordered comparison on the objects
* handling nulls and objects which do not handle sorting gracefully
*
* @param a  the first object
* @param b  the second object
* @param ignorecase  ignore case for string comparison
*/
@suppresswarnings
public static int compare object a  object b  boolean ignorecase
if  a    b
return 0
if  a    null
return  1
if  b    null
return 1
if  a instanceof ordered    b instanceof ordered
return   ordered  a  getorder       ordered  b  getorder
if  ignorecase    a instanceof string    b instanceof string
return   string  a  comparetoignorecase  string  b
if  a instanceof comparable
comparable comparable    comparable a
return comparable compareto b
int answer   a getclass   getname   compareto b getclass   getname
if  answer    0
answer   a hashcode     b hashcode
return answer
public static boolean toboolean object value
if  value instanceof boolean
return  boolean value
if  value instanceof string
return   equalsignorecase value tostring    ? boolean true   boolean false
if  value instanceof integer
return  integer value > 0 ? boolean true   boolean false
return null
/**
* asserts whether the value is <b>not</b> <tt>null</tt>
*
* @param value  the value to test
* @param name   the key that resolved the value
* @throws illegalargumentexception is thrown if assertion fails
*/
public static void notnull object value  string name
if  value    null
throw new illegalargumentexception name
/**
* asserts whether the value is <b>not</b> <tt>null</tt>
*
* @param value  the value to test
* @param on     additional description to indicate where this problem occurred (appended as tostring())
* @param name   the key that resolved the value
* @throws illegalargumentexception is thrown if assertion fails
*/
public static void notnull object value  string name  object on
if  on    null
notnull value  name
else if  value    null
throw new illegalargumentexception name       on
/**
* asserts whether the string is <b>not</b> empty.
*
* @param value  the string to test
* @param name   the key that resolved the value
* @throws illegalargumentexception is thrown if assertion fails
*/
public static void notempty string value  string name
if  isempty value
throw new illegalargumentexception name
/**
* asserts whether the string is <b>not</b> empty.
*
* @param value  the string to test
* @param on     additional description to indicate where this problem occurred (appended as tostring())
* @param name   the key that resolved the value
* @throws illegalargumentexception is thrown if assertion fails
*/
public static void notempty string value  string name  object on
if  on    null
notnull value  name
else if  isempty value
throw new illegalargumentexception name       on
/**
* tests whether the value is <tt>null</tt> or an empty string.
*
* @param value  the value, if its a string it will be tested for text length as well
* @return true if empty
*/
public static boolean isempty object value
return  isnotempty value
/**
* tests whether the value is <b>not</b> <tt>null</tt> or an empty string.
*
* @param value  the value, if its a string it will be tested for text length as well
* @return true if <b>not</b> empty
*/
public static boolean isnotempty object value
if  value    null
return false
else if  value instanceof string
string text    string  value
return text trim   length   > 0
else
return true
public static string splitoncharacter string value  string needle  int count
string rc   new string
rc   value
for  int i   1  i < count  i
string v   rc
int p   v indexof needle
if  p < 0
return rc
rc   v substring 0  p
rc   v substring p   1
return rc
/**
* removes any starting characters on the given text which match the given
* character
*
* @param text the string
* @param ch the initial characters to remove
* @return either the original string or the new substring
*/
public static string removestartingcharacters string text  char ch
int idx   0
while  text charat idx     ch
idx
if  idx > 0
return text substring idx
return text
public static string capitalize string text
if  text    null
return null
int length   text length
if  length    0
return text
string answer   text substring 0  1  touppercase locale english
if  length > 1
answer    text substring 1  length
return answer
public static string after string text  string after
if   text contains after
return null
return text substring text indexof after    after length
public static string before string text  string before
if   text contains before
return null
return text substring 0  text indexof before
public static string between string text  string after  string before
text   after text  after
if  text    null
return null
return before text  before
/**
* returns true if the collection contains the specified value
*/
public static boolean contains object collectionorarray  object value
if  collectionorarray instanceof collection
collection<?> collection    collection<?> collectionorarray
return collection contains value
else if  collectionorarray instanceof string    value instanceof string
string str    string collectionorarray
string substr    string value
return str contains substr
else
iterator<object> iter   createiterator collectionorarray
while  iter hasnext
if  equal value  iter next
return true
return false
/**
* creates an iterator over the value if the value is a collection, an
* object[], a string with values separated by comma,
* or a primitive type array; otherwise to simplify the caller's code,
* we just create a singleton collection iterator over a single value
* <p/>
* will default use comma for string separating string values.
* this method does <b>not</b> allow empty values
*
* @param value  the value
* @return the iterator
*/
public static iterator<object> createiterator object value
return createiterator value  default_delimiter
/**
* creates an iterator over the value if the value is a collection, an
* object[], a string with values separated by the given delimiter,
* or a primitive type array; otherwise to simplify the caller's
* code, we just create a singleton collection iterator over a single value
* <p/>
* this method does <b>not</b> allow empty values
*
* @param value      the value
* @param delimiter  delimiter for separating string values
* @return the iterator
*/
public static iterator<object> createiterator object value  string delimiter
return createiterator value  delimiter  false
/**
* creates an iterator over the value if the value is a collection, an
* object[], a string with values separated by the given delimiter,
* or a primitive type array; otherwise to simplify the caller's
* code, we just create a singleton collection iterator over a single value
*
* @param value             the value
* @param delimiter         delimiter for separating string values
* @param allowemptyvalues  whether to allow empty values
* @return the iterator
*/
@suppresswarnings
public static iterator<object> createiterator object value  string delimiter  final boolean allowemptyvalues
// if its a message than we want to iterate its body
if  value instanceof message
value     message  value  getbody
if  value    null
return collections emptylist   iterator
else if  value instanceof iterator
return  iterator<object> value
else if  value instanceof iterable
return   iterable<object> value  iterator
else if  value getclass   isarray
// todo we should handle primitive array types?
list<object> list   arrays aslist  object value
return list iterator
else if  value instanceof nodelist
// lets iterate through dom results after performing xpaths
final nodelist nodelist    nodelist  value
return castutils cast new iterator<node>
int idx    1
public boolean hasnext
return  idx   1  < nodelist getlength
public node next
idx
return nodelist item idx
public void remove
throw new unsupportedoperationexception
else if  value instanceof string
final string s    string  value
// this code is optimized to only use a scanner if needed, eg there is a delimiter
if  delimiter    null    s contains delimiter
// use a scanner if it contains the delimiter
scanner scanner   new scanner  string value
if  default_delimiter equals delimiter
// we use the default delimiter which is a comma, then cater for bean expressions with ognl
// which may have balanced parentheses pairs as well.
// if the value contains parentheses we need to balance those, to avoid iterating
// in the middle of parentheses pair, so use this regular expression (a bit hard to read)
// the regexp will split by comma, but honor parentheses pair that may include commas
// as well, eg if value = "bean=foo?method=killer(a,b),bean=bar?method=great(a,b)"
// then the regexp will split that into two:
// -> bean=foo?method=killer(a,b)
// -> bean=bar?method=great(a,b)
// http://stackoverflow.com/questions/1516090/splitting-a-title-into-separate-parts
delimiter
scanner usedelimiter delimiter
return castutils cast scanner
else
// use a plain iterator that returns the value as is as there are only a single value
return castutils cast new iterator<string>
int idx    1
public boolean hasnext
return idx   1    0     allowemptyvalues    objecthelper isnotempty s
public string next
idx
return s
public void remove
throw new unsupportedoperationexception
else
return collections singletonlist value  iterator
/**
* returns the predicate matching boolean on a {@link list} result set where
* if the first element is a boolean its value is used otherwise this method
* returns true if the collection is not empty
*
* @return <tt>true</tt> if the first element is a boolean and its value
*         is true or if the list is non empty
*/
public static boolean matches list<?> list
if   list isempty
object value   list get 0
if  value instanceof boolean
return  boolean value
else
// lets assume non-empty results are true
return true
return false
/**
* a helper method to access a system property, catching any security exceptions
*
* @param name         the name of the system property required
* @param defaultvalue the default value to use if the property is not
*                     available or a security exception prevents access
* @return the system property value or the default value if the property is
*         not available or security does not allow its access
*/
public static string getsystemproperty string name  string defaultvalue
try
return system getproperty name  defaultvalue
catch  exception e
if  log isdebugenabled
log debug     name       defaultvalue  e
return defaultvalue
/**
* a helper method to access a boolean system property, catching any
* security exceptions
*
* @param name         the name of the system property required
* @param defaultvalue the default value to use if the property is not
*                     available or a security exception prevents access
* @return the boolean representation of the system property value or the
*         default value if the property is not available or security does
*         not allow its access
*/
public static boolean getsystemproperty string name  boolean defaultvalue
string result   getsystemproperty name  defaultvalue tostring
return boolean parseboolean result
/**
* a helper method to access a camel context properties with a prefix
*
* @param prefix       the prefix
* @param camelcontext the camel context
* @return the properties which holds the camel context properties with the prefix,
*         and the key omit the prefix part
*/
public static properties getcamelpropertieswithprefix string prefix  camelcontext camelcontext
properties answer   new properties
map<string  string> camelproperties   camelcontext getproperties
if  camelproperties    null
for  map entry<string  string> entry   camelproperties entryset
string key   entry getkey
if  key startswith prefix
answer put key substring prefix length     entry getvalue
return answer
/**
* returns the type name of the given type or null if the type variable is
* null
*/
public static string name class<?> type
return type    null ? type getname     null
/**
* returns the type name of the given value
*/
public static string classname object value
return name value    null ? value getclass     null
/**
* returns the canonical type name of the given value
*/
public static string classcanonicalname object value
if  value    null
return value getclass   getcanonicalname
else
return null
/**
* attempts to load the given class name using the thread context class
* loader or the class loader used to load this class
*
* @param name the name of the class to load
* @return the class or <tt>null</tt> if it could not be loaded
*/
public static class<?> loadclass string name
return loadclass name  objecthelper class getclassloader
/**
* attempts to load the given class name using the thread context class
* loader or the given class loader
*
* @param name the name of the class to load
* @param loader the class loader to use after the thread context class loader
* @return the class or <tt>null</tt> if it could not be loaded
*/
public static class<?> loadclass string name  classloader loader
return loadclass name  loader  true
/**
* attempts to load the given class name using the thread context class
* loader or the given class loader
*
* @param name the name of the class to load
* @param loader the class loader to use after the thread context class loader
* @param needtowarn when <tt>true</tt> logs a warning when a class with the given name could not be loaded
* @return the class or <tt>null</tt> if it could not be loaded
*/
public static class<?> loadclass string name  classloader loader  boolean needtowarn
// must clean the name so its pure java name, eg removing \n or whatever people can do in the spring xml
name   normalizeclassname name
// try simple type first
class<?> clazz   loadsimpletype name
if  clazz    null
// try context class loader
clazz   doloadclass name  thread currentthread   getcontextclassloader
if  clazz    null
// then the provided loader
clazz   doloadclass name  loader
if  clazz    null
// and fallback to the loader the loaded the objecthelper class
clazz   doloadclass name  objecthelper class getclassloader
if  clazz    null
if  needtowarn
log warn     name
return clazz
/**
* load a simple type
*
* @param name the name of the class to load
* @return the class or <tt>null</tt> if it could not be loaded
*/
public static class<?> loadsimpletype string name
// special for byte[] as its common to use
if    equals name       equals name
return byte class
// and these is common as well
else if    equals name       equals name
return string class
else if    equals name       equals name
return boolean class
else if    equals name
return boolean class
else if    equals name       equals name
return integer class
else if    equals name
return int class
else if    equals name       equals name
return long class
else if    equals name
return long class
else if    equals name       equals name
return short class
else if    equals name
return short class
else if    equals name       equals name
return byte class
else if    equals name
return byte class
else if    equals name       equals name
return float class
else if    equals name
return float class
else if    equals name       equals name
return double class
else if    equals name
return double class
return null
/**
* loads the given class with the provided classloader (may be null).
* will ignore any class not found and return null.
*
* @param name    the name of the class to load
* @param loader  a provided loader (may be null)
* @return the class, or null if it could not be loaded
*/
private static class<?> doloadclass string name  classloader loader
objecthelper notempty name
if  loader    null
return null
try
log trace    name  loader
return loader loadclass name
catch  classnotfoundexception e
if  log istraceenabled
log trace     name       loader  e
return null
/**
* attempts to load the given resource as a stream using the thread context
* class loader or the class loader used to load this class
*
* @param name the name of the resource to load
* @return the stream or null if it could not be loaded
*/
public static inputstream loadresourceasstream string name
inputstream in   null
string resolvedname   resolveuripath name
classloader contextclassloader   thread currentthread   getcontextclassloader
if  contextclassloader    null
in   contextclassloader getresourceasstream resolvedname
if  in    null
in   objecthelper class getclassloader   getresourceasstream resolvedname
return in
/**
* attempts to load the given resource as a stream using the thread context
* class loader or the class loader used to load this class
*
* @param name the name of the resource to load
* @return the stream or null if it could not be loaded
*/
public static url loadresourceasurl string name
url url   null
string resolvedname   resolveuripath name
classloader contextclassloader   thread currentthread   getcontextclassloader
if  contextclassloader    null
url   contextclassloader getresource resolvedname
if  url    null
url   objecthelper class getclassloader   getresource resolvedname
return url
/**
* attempts to load the given resources from the given package name using the thread context
* class loader or the class loader used to load this class
*
* @param packagename the name of the package to load its resources
* @return the urls for the resources or null if it could not be loaded
*/
public static enumeration<url> loadresourcesasurl string packagename
enumeration<url> url   null
classloader contextclassloader   thread currentthread   getcontextclassloader
if  contextclassloader    null
try
url   contextclassloader getresources packagename
catch  ioexception e
// ignore
if  url    null
try
url   objecthelper class getclassloader   getresources packagename
catch  ioexception e
// ignore
return url
/**
* helper operation used to remove relative path notation from
* resources.  most critical for resources on the classpath
* as resource loaders will not resolve the relative paths correctly.
*
* @param name the name of the resource to load
* @return the modified or unmodified string if there were no changes
*/
private static string resolveuripath string name
string answer   name
if  answer indexof    >  1
answer   answer replaceall
if  answer indexof    >  1
answer   answer replaceall
if  answer indexof    >  1
answer   answer replaceall
return answer
/**
* a helper method to invoke a method via reflection and wrap any exceptions
* as {@link runtimecamelexception} instances
*
* @param method the method to invoke
* @param instance the object instance (or null for static methods)
* @param parameters the parameters to the method
* @return the result of the method invocation
*/
public static object invokemethod method method  object instance  object    parameters
try
return method invoke instance  parameters
catch  illegalaccessexception e
throw new runtimecamelexception e
catch  invocationtargetexception e
throw objecthelper wrapruntimecamelexception e getcause
/**
* tests whether the target method overrides the source method.
* <p/>
* tests whether they have the same name, return type, and parameter list.
*
* @param source  the source method
* @param target  the target method
* @return <tt>true</tt> if it override, <tt>false</tt> otherwise
*/
public static boolean isoverridingmethod method source  method target
if  source getname   equals target getname
source getreturntype   equals target getreturntype
source getparametertypes   length    target getparametertypes   length
// test if parameter types is the same as well
for  int i   0  i < source getparametertypes   length  i
if    source getparametertypes   equals target getparametertypes
return false
// the have same name, return type and parameter list, so its overriding
return true
return false
/**
* returns a list of methods which are annotated with the given annotation
*
* @param type the type to reflect on
* @param annotationtype the annotation type
* @return a list of the methods found
*/
public static list<method> findmethodswithannotation class<?> type
class<? extends annotation> annotationtype
return findmethodswithannotation type  annotationtype  false
/**
* returns a list of methods which are annotated with the given annotation
*
* @param type the type to reflect on
* @param annotationtype the annotation type
* @param checkmetaannotations check for meta annotations
* @return a list of the methods found
*/
public static list<method> findmethodswithannotation class<?> type
class<? extends annotation> annotationtype
boolean checkmetaannotations
list<method> answer   new arraylist<method>
do
method methods   type getdeclaredmethods
for  method method   methods
if  hasannotation method  annotationtype  checkmetaannotations
answer add method
type   type getsuperclass
while  type    null
return answer
/**
* checks if a class or method are annotated with the given annotation
*
* @param elem the class or method to reflect on
* @param annotationtype the annotation type
* @param checkmetaannotations check for meta annotations
* @return true if annotations is present
*/
public static boolean hasannotation annotatedelement elem  class<? extends annotation> annotationtype
boolean checkmetaannotations
if  elem isannotationpresent annotationtype
return true
if  checkmetaannotations
for  annotation a   elem getannotations
for  annotation meta   a annotationtype   getannotations
if  meta annotationtype   getname   equals annotationtype getname
return true
return false
/**
* turns the given object arrays into a meaningful string
*
* @param objects an array of objects or null
* @return a meaningful string
*/
public static string asstring object objects
if  objects    null
return
else
stringbuilder buffer   new stringbuilder
int counter   0
for  object object   objects
if  counter   > 0
buffer append
string text    object    null  ?     object tostring
buffer append text
buffer append
return buffer tostring
/**
* returns true if a class is assignable from another class like the
* {@link class#isassignablefrom(class)} method but which also includes
* coercion between primitive types to deal with java 5 primitive type
* wrapping
*/
public static boolean isassignablefrom class<?> a  class<?> b
a   convertprimitivetypetowrappertype a
b   convertprimitivetypetowrappertype b
return a isassignablefrom b
/**
* converts primitive types such as int to its wrapper type like
* {@link integer}
*/
public static class<?> convertprimitivetypetowrappertype class<?> type
class<?> rc   type
if  type isprimitive
if  type    int class
rc   integer class
else if  type    long class
rc   long class
else if  type    double class
rc   double class
else if  type    float class
rc   float class
else if  type    short class
rc   short class
else if  type    byte class
rc   byte class
else if  type    boolean class
rc   boolean class
return rc
/**
* helper method to return the default character set name
*/
public static string getdefaultcharacterset
return charset defaultcharset   name
/**
* returns the java bean property name of the given method, if it is a
* setter
*/
public static string getpropertyname method method
string propertyname   method getname
if  propertyname startswith       method getparametertypes   length    1
propertyname   propertyname substring 3  4  tolowercase locale english    propertyname substring 4
return propertyname
/**
* returns true if the given collection of annotations matches the given type
*/
public static boolean hasannotation annotation annotations  class<?> type
for  annotation annotation   annotations
if  type isinstance annotation
return true
return false
/**
* gets the annotation from the given instance.
*
* @param instance the instance
* @param type  the annotation
* @return the annotation, or <tt>null</tt> if the instance does not have the given annotation
*/
public static <a extends java lang annotation annotation> a getannotation object instance  class<a> type
return instance getclass   getannotation type
/**
* closes the given resource if it is available, logging any closing
* exceptions to the given log
*
* @param closeable the object to close
* @param name the name of the resource
* @param log the log to use when reporting closure warnings
* @deprecated will be removed in camel 3.0. instead use {@link org.apache.camel.util.iohelper#close(java.io.closeable, string, org.slf4j.logger)} instead
*/
@deprecated
public static void close closeable closeable  string name  logger log
iohelper close closeable  name  log
/**
* converts the given value to the required type or throw a meaningful exception
*/
@suppresswarnings
public static <t> t cast class<t> totype  object value
if  totype    boolean class
return  t cast boolean class  value
else if  totype isprimitive
class<?> newtype   convertprimitivetypetowrappertype totype
if  newtype    totype
return  t cast newtype  value
try
return totype cast value
catch  classcastexception e
throw new illegalargumentexception
value       totype getname         e  e
/**
* a helper method to create a new instance of a type using the default
* constructor arguments.
*/
public static <t> t newinstance class<t> type
try
return type newinstance
catch  instantiationexception e
throw new runtimecamelexception e
catch  illegalaccessexception e
throw new runtimecamelexception e
/**
* a helper method to create a new instance of a type using the default
* constructor arguments.
*/
public static <t> t newinstance class<?> actualtype  class<t> expectedtype
try
object value   actualtype newinstance
return cast expectedtype  value
catch  instantiationexception e
throw new runtimecamelexception e
catch  illegalaccessexception e
throw new runtimecamelexception e
/**
* does the given class have a default public no-arg constructor.
*/
public static boolean hasdefaultpublicnoargconstructor class<?> type
// getconstructors() returns only public constructors
for  constructor<?> ctr   type getconstructors
if  ctr getparametertypes   length    0
return true
return false
/**
* returns true if the given name is a valid java identifier
*/
public static boolean isjavaidentifier string name
if  name    null
return false
int size   name length
if  size < 1
return false
if  character isjavaidentifierstart name charat 0
for  int i   1  i < size  i
if   character isjavaidentifierpart name charat i
return false
return true
return false
/**
* returns the type of the given object or null if the value is null
*/
public static object type object bean
return bean    null ? bean getclass     null
/**
* evaluate the value as a predicate which attempts to convert the value to
* a boolean otherwise true is returned if the value is not null
*/
public static boolean evaluatevaluepredicate object value
if  value instanceof boolean
return  boolean value
else if  value instanceof string
if    equalsignorecase  string value
return true
else if    equalsignorecase  string value
return false
else if  value instanceof nodelist
// is it an empty dom with empty attributes
if  value instanceof node      node value  hasattributes
return true
nodelist list    nodelist  value
return list getlength   > 0
else if  value instanceof collection
// is it an empty collection
collection<?> col    collection<?>  value
return col size   > 0
return value    null
/**
* wraps the caused exception in a {@link runtimecamelexception} if its not
* already such an exception.
*
* @param e the caused exception
* @return the wrapper exception
*/
public static runtimecamelexception wrapruntimecamelexception throwable e
if  e instanceof runtimecamelexception
// don't double wrap
return  runtimecamelexception e
else
return new runtimecamelexception e
/**
* wraps the caused exception in a {@link camelexecutionexception} if its not
* already such an exception.
*
* @param e the caused exception
* @return the wrapper exception
*/
public static camelexecutionexception wrapcamelexecutionexception exchange exchange  throwable e
if  e instanceof camelexecutionexception
// don't double wrap
return  camelexecutionexception e
else
return new camelexecutionexception    exchange  e
/**
* cleans the string to a pure java identifier so we can use it for loading class names.
* <p/>
* especially from spring dsl people can have \n \t or other characters that otherwise
* would result in classnotfoundexception
*
* @param name the class name
* @return normalized classname that can be load by a class loader.
*/
public static string normalizeclassname string name
stringbuilder sb   new stringbuilder name length
for  char ch   name tochararray
if  ch         ch         ch         ch         character isjavaidentifierpart ch
sb append ch
return sb tostring
/**
* creates an iterator to walk the exception from the bottom up
* (the last caused by going upwards to the root exception).
*
* @param exception  the exception
* @return the iterator
*/
public static iterator<throwable> createexceptioniterator throwable exception
return new exceptioniterator exception
/**
* retrieves the given exception type from the exception.
* <p/>
* is used to get the caused exception that typically have been wrapped in some sort
* of camel wrapper exception
* <p/>
* the strategy is to look in the exception hierarchy to find the first given cause that matches the type.
* will start from the bottom (the real cause) and walk upwards.
*
* @param type the exception type wanted to retrieve
* @param exception the caused exception
* @return the exception found (or <tt>null</tt> if not found in the exception hierarchy)
*/
public static <t> t getexception class<t> type  throwable exception
if  exception    null
return null
// walk the hierarchy and look for it
iterator<throwable> it   createexceptioniterator exception
while  it hasnext
throwable e   it next
if  type isinstance e
return type cast e
// not found
return null
/**
* creates a {@link scanner} for scanning the given value.
*
* @param exchange  the current exchange
* @param value     the value, typically the message in body
* @return the scanner, is newer <tt>null</tt>
*/
public static scanner getscanner exchange exchange  object value
if  value instanceof wrappedfile
// generic file is just a wrapper for the real file so call again with the real file
wrappedfile<?> gf    wrappedfile<?>  value
return getscanner exchange  gf getfile
string charset   exchange getproperty exchange charset_name  string class
scanner scanner   null
if  value instanceof readable
scanner   new scanner  readable value
else if  value instanceof inputstream
scanner   charset    null ? new scanner  inputstream value    new scanner  inputstream value  charset
else if  value instanceof file
try
scanner   charset    null ? new scanner  file value    new scanner  file value  charset
catch  filenotfoundexception e
throw new runtimecamelexception e
else if  value instanceof string
scanner   new scanner  string value
else if  value instanceof readablebytechannel
scanner   charset    null ? new scanner  readablebytechannel value    new scanner  readablebytechannel value  charset
if  scanner    null
// value is not a suitable type, try to convert value to a string
string text   exchange getcontext   gettypeconverter   convertto string class  exchange  value
if  text    null
scanner   new scanner text
if  scanner    null
scanner   new scanner
return scanner
public static string getidentityhashcode object object
return     integer tohexstring system identityhashcode object
/**
* lookup the constant field on the given class with the given name
*
* @param clazz  the class
* @param name   the name of the field to lookup
* @return the value of the constant field, or <tt>null</tt> if not found
*/
public static string lookupconstantfieldvalue class<?> clazz  string name
if  clazz    null
return null
for  field field   clazz getfields
if  field getname   equals name
try
return  string  field get null
catch  illegalaccessexception e
// ignore
return null
return null
/**
* is the given value a numeric nan type
*
* @param value the value
* @return <tt>true</tt> if its a {@link float#nan} or {@link double#nan}.
*/
public static boolean isnan object value
if  value    null      value instanceof number
return false
// value must be a number
return value equals float nan     value equals double nan
private static final class exceptioniterator implements iterator<throwable>
private list<throwable> tree   new arraylist<throwable>
private iterator<throwable> it
public exceptioniterator throwable exception
throwable current   exception
// spool to the bottom of the caused by tree
while  current    null
tree add current
current   current getcause
// reverse tree so we go from bottom to top
collections reverse tree
it   tree iterator
public boolean hasnext
return it hasnext
public throwable next
return it next
public void remove
it remove