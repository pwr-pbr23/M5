/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel model
import java util arraylist
import java util collection
import java util hashmap
import java util list
import java util map
import javax xml bind annotation xmlaccesstype
import javax xml bind annotation xmlaccessortype
import javax xml bind annotation xmlattribute
import javax xml bind annotation xmlelement
import javax xml bind annotation xmlelementref
import javax xml bind annotation xmlrootelement
import javax xml bind annotation xmltransient
import org apache camel camelcontext
import org apache camel expression
import org apache camel logginglevel
import org apache camel predicate
import org apache camel processor
import org apache camel route
import org apache camel builder errorhandlerbuilder
import org apache camel builder expressionbuilder
import org apache camel processor catchprocessor
import org apache camel processor fatalfallbackerrorhandler
import org apache camel processor redeliverypolicy
import org apache camel spi classresolver
import org apache camel spi routecontext
import org apache camel util camelcontexthelper
import org apache camel util expressiontopredicateadapter
import org apache camel util objecthelper
/**
* represents an xml &lt;onexception/&gt; element
*
* @version
*/
@xmlrootelement name
@xmlaccessortype xmlaccesstype field
public class onexceptiondefinition extends processordefinition<onexceptiondefinition>
@xmlelement name      required   true
private list<string> exceptions   new arraylist<string>
@xmlelement name
private whendefinition onwhen
@xmlelement name
private expressionsubelementdefinition retrywhile
@xmlelement name
private redeliverypolicydefinition redeliverypolicy
@xmlattribute name
private string redeliverypolicyref
@xmlelement name
private expressionsubelementdefinition handled
@xmlelement name
private expressionsubelementdefinition continued
@xmlattribute name
private string onredeliveryref
@xmlattribute name
private boolean useoriginalmessagepolicy
@xmlelementref
private list<processordefinition<?>> outputs   new arraylist<processordefinition<?>>
@xmltransient
private list<class<? extends throwable>> exceptionclasses
@xmltransient
private predicate handledpolicy
@xmltransient
private predicate continuedpolicy
@xmltransient
private predicate retrywhilepolicy
@xmltransient
private processor onredelivery
@xmltransient
private boolean routescoped
// todo: in camel 3.0 the onexceptiondefinition should not contain state and errorhandler processors
@xmltransient
private final map<string  processor> errorhandlers   new hashmap<string  processor>
public onexceptiondefinition
public onexceptiondefinition list<class<? extends throwable>> exceptionclasses
this exceptionclasses   exceptionclasses
public onexceptiondefinition class<? extends throwable> exceptiontype
exceptionclasses   new arraylist<class<? extends throwable>>
exceptionclasses add exceptiontype
public boolean isroutescoped
// is context scoped by default
return routescoped    null ? routescoped   false
@override
public string getshortname
return
@override
public string tostring
return     description         getoutputs
protected string description
return getexceptionclasses      onwhen    null ?     onwhen
@override
public string getlabel
return     description
@override
public boolean isabstract
return true
/**
* allows an exception handler to create a new redelivery policy for this exception type
*
* @param context      the camel context
* @param parentpolicy the current redelivery policy, is newer <tt>null</tt>
* @return a newly created redelivery policy, or return the original policy if no customization is required
*         for this exception handler.
*/
public redeliverypolicy createredeliverypolicy camelcontext context  redeliverypolicy parentpolicy
if  redeliverypolicyref    null
return camelcontexthelper mandatorylookup context  redeliverypolicyref  redeliverypolicy class
else if  redeliverypolicy    null
return redeliverypolicy createredeliverypolicy context  parentpolicy
else if   outputs isempty      parentpolicy getmaximumredeliveries   > 0
// if we have outputs, then do not inherit parent maximumredeliveries
// as you would have to explicit configure maximumredeliveries on this onexception to use it
// this is the behavior camel has always had
redeliverypolicy answer   parentpolicy copy
answer setmaximumredeliveries 0
return answer
else
return parentpolicy
public void addroutes routecontext routecontext  collection<route> routes  throws exception
// assign whether this was a route scoped onexception or not
// we need to know this later when setting the parent, as only route scoped should have parent
// note: this logic can possible be removed when the camel routing engine decides at runtime
// to apply onexception in a more dynamic fashion than current code base
// and therefore is in a better position to decide among context/route scoped onexception at runtime
if  routescoped    null
routescoped   super getparent      null
sethandledfromexpressiontype routecontext
setcontinuedfromexpressiontype routecontext
setretrywhilefromexpressiontype routecontext
setonredeliveryfromredeliveryref routecontext
// load exception classes
if  exceptions    null     exceptions isempty
exceptionclasses   createexceptionclasses routecontext getcamelcontext   getclassresolver
// must validate configuration before creating processor
validateconfiguration
// lets attach this on exception to the route error handler
processor child   createoutputsprocessor routecontext
if  child    null
// wrap in our special safe fallback error handler if onexception have child output
processor errorhandler   new fatalfallbackerrorhandler child
string id   routecontext getroute   getid
errorhandlers put id  errorhandler
// lookup the error handler builder
errorhandlerbuilder builder    errorhandlerbuilder routecontext getroute   geterrorhandlerbuilder
// and add this as error handlers
builder adderrorhandlers this
@override
public catchprocessor createprocessor routecontext routecontext  throws exception
// load exception classes
if  exceptions    null     exceptions isempty
exceptionclasses   createexceptionclasses routecontext getcamelcontext   getclassresolver
// must validate configuration before creating processor
validateconfiguration
processor childprocessor   this createchildprocessor routecontext  false
predicate when   null
if  onwhen    null
when   onwhen getexpression   createpredicate routecontext
predicate handle   null
if  handled    null
handle   handled createpredicate routecontext
return new catchprocessor getexceptionclasses    childprocessor  when  handle
protected void validateconfiguration
if  isinheriterrorhandler      null    isinheriterrorhandler
throw new illegalargumentexception this
list<class<? extends throwable>> exceptions   getexceptionclasses
if  exceptions    null    exceptions isempty
throw new illegalargumentexception     this
// only one of handled or continued is allowed
if  gethandledpolicy      null    getcontinuedpolicy      null
throw new illegalargumentexception     this
// validate that at least some option is set as you cannot just have onexception(exception.class);
if  outputs    null    getoutputs   isempty
// no outputs so there should be some sort of configuration
if  handledpolicy    null    continuedpolicy    null    retrywhilepolicy    null
redeliverypolicy    null    useoriginalmessagepolicy    null    onredelivery    null
throw new illegalargumentexception this
// fluent api
//-------------------------------------------------------------------------
@override
public onexceptiondefinition onexception class<? extends throwable> exceptiontype
getexceptionclasses   add exceptiontype
return this
/**
* sets whether the exchange should be marked as handled or not.
*
* @param handled handled or not
* @return the builder
*/
public onexceptiondefinition handled boolean handled
expression expression   expressionbuilder constantexpression boolean tostring handled
return handled expression
/**
* sets whether the exchange should be marked as handled or not.
*
* @param handled predicate that determines true or false
* @return the builder
*/
public onexceptiondefinition handled predicate handled
sethandledpolicy handled
return this
/**
* sets whether the exchange should be marked as handled or not.
*
* @param handled expression that determines true or false
* @return the builder
*/
public onexceptiondefinition handled expression handled
sethandledpolicy expressiontopredicateadapter topredicate handled
return this
/**
* sets whether the exchange should handle and continue routing from the point of failure.
* <p/>
* if this option is enabled then its considered handled as well.
*
* @param continued continued or not
* @return the builder
*/
public onexceptiondefinition continued boolean continued
expression expression   expressionbuilder constantexpression boolean tostring continued
return continued expression
/**
* sets whether the exchange should be marked as handled or not.
* <p/>
* if this option is enabled then its considered handled as well.
*
* @param continued predicate that determines true or false
* @return the builder
*/
public onexceptiondefinition continued predicate continued
setcontinuedpolicy continued
return this
/**
* sets whether the exchange should be marked as handled or not.
* <p/>
* if this option is enabled then its considered handled as well.
*
* @param continued expression that determines true or false
* @return the builder
*/
public onexceptiondefinition continued expression continued
setcontinuedpolicy expressiontopredicateadapter topredicate continued
return this
/**
* sets an additional predicate that should be true before the onexception is triggered.
* <p/>
* to be used for fine grained controlling whether a thrown exception should be intercepted
* by this exception type or not.
*
* @param predicate predicate that determines true or false
* @return the builder
*/
public onexceptiondefinition onwhen predicate predicate
setonwhen new whendefinition predicate
return this
/**
* sets the retry while predicate.
* <p/>
* will continue retrying until predicate returns <tt>false</tt>.
*
* @param retrywhile predicate that determines when to stop retrying
* @return the builder
*/
public onexceptiondefinition retrywhile predicate retrywhile
setretrywhilepolicy retrywhile
return this
/**
* sets the initial redelivery delay
*
* @param delay the initial redelivery delay
* @return the builder
* @deprecated will be removed in the near future. instead use {@link #redeliverydelay(string)}
*/
@deprecated
public onexceptiondefinition redeliverdelay long delay
getorcreateredeliverypolicy   redeliverydelay delay
return this
/**
* sets the back off multiplier
*
* @param backoffmultiplier the back off multiplier
* @return the builder
*/
public onexceptiondefinition backoffmultiplier double backoffmultiplier
getorcreateredeliverypolicy   backoffmultiplier backoffmultiplier
return this
/**
* sets the back off multiplier (supports property placeholders)
*
* @param backoffmultiplier the back off multiplier
* @return the builder
*/
public onexceptiondefinition backoffmultiplier string backoffmultiplier
getorcreateredeliverypolicy   backoffmultiplier backoffmultiplier
return this
/**
* sets the collision avoidance factor
*
* @param collisionavoidancefactor the factor
* @return the builder
*/
public onexceptiondefinition collisionavoidancefactor double collisionavoidancefactor
getorcreateredeliverypolicy   collisionavoidancefactor collisionavoidancefactor
return this
/**
* sets the collision avoidance factor (supports property placeholders)
*
* @param collisionavoidancefactor the factor
* @return the builder
*/
public onexceptiondefinition collisionavoidancefactor string collisionavoidancefactor
getorcreateredeliverypolicy   collisionavoidancefactor collisionavoidancefactor
return this
/**
* sets the collision avoidance percentage
*
* @param collisionavoidancepercent the percentage
* @return the builder
*/
public onexceptiondefinition collisionavoidancepercent double collisionavoidancepercent
getorcreateredeliverypolicy   collisionavoidancepercent collisionavoidancepercent
return this
/**
* sets the initial redelivery delay
*
* @param delay delay in millis
* @return the builder
*/
public onexceptiondefinition redeliverydelay long delay
getorcreateredeliverypolicy   redeliverydelay delay
return this
/**
* sets the initial redelivery delay (supports property placeholders)
*
* @param delay delay in millis
* @return the builder
*/
public onexceptiondefinition redeliverydelay string delay
getorcreateredeliverypolicy   redeliverydelay delay
return this
/**
* allow synchronous delayed redelivery.
*
* @see org.apache.camel.processor.redeliverypolicy#setasyncdelayedredelivery(boolean)
* @return the builder
*/
public onexceptiondefinition asyncdelayedredelivery
getorcreateredeliverypolicy   asyncdelayedredelivery
return this
/**
* sets the logging level to use when retries has exhausted
*
* @param retriesexhaustedloglevel the logging level
* @return the builder
*/
public onexceptiondefinition retriesexhaustedloglevel logginglevel retriesexhaustedloglevel
getorcreateredeliverypolicy   retriesexhaustedloglevel retriesexhaustedloglevel
return this
/**
* sets the logging level to use for logging retry attempts
*
* @param retryattemptedloglevel the logging level
* @return the builder
*/
public onexceptiondefinition retryattemptedloglevel logginglevel retryattemptedloglevel
getorcreateredeliverypolicy   retryattemptedloglevel retryattemptedloglevel
return this
/**
* sets whether to log stacktrace for failed messages.
*/
public onexceptiondefinition logstacktrace boolean logstacktrace
getorcreateredeliverypolicy   logstacktrace logstacktrace
return this
/**
* sets whether to log stacktrace for failed messages (supports property placeholders)
*/
public onexceptiondefinition logstacktrace string logstacktrace
getorcreateredeliverypolicy   logstacktrace logstacktrace
return this
/**
* sets whether to log stacktrace for failed redelivery attempts
*/
public onexceptiondefinition logretrystacktrace boolean logretrystacktrace
getorcreateredeliverypolicy   logretrystacktrace logretrystacktrace
return this
/**
* sets whether to log stacktrace for failed redelivery attempts (supports property placeholders)
*/
public onexceptiondefinition logretrystacktrace string logretrystacktrace
getorcreateredeliverypolicy   logretrystacktrace logretrystacktrace
return this
/**
* sets whether to log errors even if its handled
*/
public onexceptiondefinition loghandled boolean loghandled
getorcreateredeliverypolicy   loghandled loghandled
return this
/**
* sets whether to log errors even if its handled (supports property placeholders)
*/
public onexceptiondefinition loghandled string loghandled
getorcreateredeliverypolicy   loghandled loghandled
return this
/**
* sets whether to log errors even if its continued
*/
public onexceptiondefinition logcontinued boolean logcontinued
getorcreateredeliverypolicy   logcontinued logcontinued
return this
/**
* sets whether to log errors even if its continued (supports property placeholders)
*/
public onexceptiondefinition logcontinued string logcontinued
getorcreateredeliverypolicy   logcontinued logcontinued
return this
/**
* sets whether to log retry attempts
*/
public onexceptiondefinition logretryattempted boolean logretryattempted
getorcreateredeliverypolicy   logretryattempted logretryattempted
return this
/**
* sets whether to log retry attempts (supports property placeholders)
*/
public onexceptiondefinition logretryattempted string logretryattempted
getorcreateredeliverypolicy   logretryattempted logretryattempted
return this
/**
* sets whether to log exhausted exceptions
*/
public onexceptiondefinition logexhausted boolean logexhausted
getorcreateredeliverypolicy   logexhausted logexhausted
return this
/**
* sets whether to log exhausted exceptions (supports property placeholders)
*/
public onexceptiondefinition logexhausted string logexhausted
getorcreateredeliverypolicy   logexhausted logexhausted
return this
/**
* sets the maximum redeliveries
* <ul>
* <li>5 = default value</li>
* <li>0 = no redeliveries</li>
* <li>-1 = redeliver forever</li>
* </ul>
*
* @param maximumredeliveries the value
* @return the builder
*/
public onexceptiondefinition maximumredeliveries int maximumredeliveries
getorcreateredeliverypolicy   maximumredeliveries maximumredeliveries
return this
/**
* sets the maximum redeliveries (supports property placeholders)
* <ul>
* <li>5 = default value</li>
* <li>0 = no redeliveries</li>
* <li>-1 = redeliver forever</li>
* </ul>
*
* @param maximumredeliveries the value
* @return the builder
*/
public onexceptiondefinition maximumredeliveries string maximumredeliveries
getorcreateredeliverypolicy   maximumredeliveries maximumredeliveries
return this
/**
* turn on collision avoidance.
*
* @return the builder
*/
public onexceptiondefinition usecollisionavoidance
getorcreateredeliverypolicy   usecollisionavoidance
return this
/**
* turn on exponential backk off
*
* @return the builder
*/
public onexceptiondefinition useexponentialbackoff
getorcreateredeliverypolicy   useexponentialbackoff
return this
/**
* sets the maximum delay between redelivery
*
* @param maximumredeliverydelay the delay in millis
* @return the builder
*/
public onexceptiondefinition maximumredeliverydelay long maximumredeliverydelay
getorcreateredeliverypolicy   maximumredeliverydelay maximumredeliverydelay
return this
/**
* sets the maximum delay between redelivery (supports property placeholders)
*
* @param maximumredeliverydelay the delay in millis
* @return the builder
*/
public onexceptiondefinition maximumredeliverydelay string maximumredeliverydelay
getorcreateredeliverypolicy   maximumredeliverydelay maximumredeliverydelay
return this
/**
* sets a reference to a {@link redeliverypolicy} to lookup in the {@link org.apache.camel.spi.registry} to be used.
*
* @param redeliverypolicyref reference to use for lookup
* @return the builder
*/
public onexceptiondefinition redeliverypolicyref string redeliverypolicyref
setredeliverypolicyref redeliverypolicyref
return this
/**
* sets the delay pattern with delay intervals.
*
* @param delaypattern the delay pattern
* @return the builder
*/
public onexceptiondefinition delaypattern string delaypattern
getorcreateredeliverypolicy   setdelaypattern delaypattern
return this
/**
* @deprecated this method will be removed in camel 3.0, please use {@link #useoriginalmessage()}
* @see #useoriginalmessage()
*/
@deprecated
public onexceptiondefinition useoriginalbody
setuseoriginalmessagepolicy boolean true
return this
/**
* will use the original input message when an {@link org.apache.camel.exchange} is moved to the dead letter queue.
* <p/>
* <b>notice:</b> this only applies when all redeliveries attempt have failed and the {@link org.apache.camel.exchange} is doomed for failure.
* <br/>
* instead of using the current inprogress {@link org.apache.camel.exchange} in body we use the original in body instead. this allows
* you to store the original input in the dead letter queue instead of the inprogress snapshot of the in body.
* for instance if you route transform the in body during routing and then failed. with the original exchange
* store in the dead letter queue it might be easier to manually re submit the {@link org.apache.camel.exchange} again as the in body
* is the same as when camel received it. so you should be able to send the {@link org.apache.camel.exchange} to the same input.
* <p/>
* by default this feature is off.
*
* @return the builder
*/
public onexceptiondefinition useoriginalmessage
setuseoriginalmessagepolicy boolean true
return this
/**
* sets a processor that should be processed <b>before</b> a redelivery attempt.
* <p/>
* can be used to change the {@link org.apache.camel.exchange} <b>before</b> its being redelivered.
*/
public onexceptiondefinition onredelivery processor processor
setonredelivery processor
return this
// properties
//-------------------------------------------------------------------------
@override
public list<processordefinition<?>> getoutputs
return outputs
public void setoutputs list<processordefinition<?>> outputs
this outputs   outputs
public boolean isoutputsupported
return true
public list<class<? extends throwable>> getexceptionclasses
return exceptionclasses
public void setexceptionclasses list<class<? extends throwable>> exceptionclasses
this exceptionclasses   exceptionclasses
public list<string> getexceptions
return exceptions
public void setexceptions list<string> exceptions
this exceptions   exceptions
public processor geterrorhandler string routeid
return errorhandlers get routeid
public collection<processor> geterrorhandlers
return errorhandlers values
public redeliverypolicydefinition getredeliverypolicy
return redeliverypolicy
public void setredeliverypolicy redeliverypolicydefinition redeliverypolicy
this redeliverypolicy   redeliverypolicy
public string getredeliverypolicyref
return redeliverypolicyref
public void setredeliverypolicyref string redeliverypolicyref
this redeliverypolicyref   redeliverypolicyref
public predicate gethandledpolicy
return handledpolicy
public void sethandled expressionsubelementdefinition handled
this handled   handled
public expressionsubelementdefinition getcontinued
return continued
public void setcontinued expressionsubelementdefinition continued
this continued   continued
public expressionsubelementdefinition gethandled
return handled
public void sethandledpolicy predicate handledpolicy
this handledpolicy   handledpolicy
public predicate getcontinuedpolicy
return continuedpolicy
public void setcontinuedpolicy predicate continuedpolicy
this continuedpolicy   continuedpolicy
public whendefinition getonwhen
return onwhen
public void setonwhen whendefinition onwhen
this onwhen   onwhen
public expressionsubelementdefinition getretrywhile
return retrywhile
public void setretrywhile expressionsubelementdefinition retrywhile
this retrywhile   retrywhile
public predicate getretrywhilepolicy
return retrywhilepolicy
public void setretrywhilepolicy predicate retrywhilepolicy
this retrywhilepolicy   retrywhilepolicy
public processor getonredelivery
return onredelivery
public void setonredelivery processor onredelivery
this onredelivery   onredelivery
public string getonredeliveryref
return onredeliveryref
public void setonredeliveryref string onredeliveryref
this onredeliveryref   onredeliveryref
public boolean getuseoriginalmessagepolicy
return useoriginalmessagepolicy
public void setuseoriginalmessagepolicy boolean useoriginalmessagepolicy
this useoriginalmessagepolicy   useoriginalmessagepolicy
public boolean isuseoriginalmessage
return useoriginalmessagepolicy    null    useoriginalmessagepolicy
public boolean isasyncdelayedredelivery camelcontext context
if  getredeliverypolicy      null
return getredeliverypolicy   isasyncdelayedredelivery context
return false
// implementation methods
//-------------------------------------------------------------------------
protected redeliverypolicydefinition getorcreateredeliverypolicy
if  redeliverypolicy    null
redeliverypolicy   new redeliverypolicydefinition
return redeliverypolicy
protected list<class<? extends throwable>> createexceptionclasses classresolver resolver  throws classnotfoundexception
list<string> list   getexceptions
list<class<? extends throwable>> answer   new arraylist<class<? extends throwable>> list size
for  string name   list
class<? extends throwable> type   resolver resolvemandatoryclass name  throwable class
answer add type
return answer
private void sethandledfromexpressiontype routecontext routecontext
if  gethandled      null    handledpolicy    null    routecontext    null
handled gethandled   createpredicate routecontext
private void setcontinuedfromexpressiontype routecontext routecontext
if  getcontinued      null    continuedpolicy    null    routecontext    null
continued getcontinued   createpredicate routecontext
private void setretrywhilefromexpressiontype routecontext routecontext
if  getretrywhile      null    retrywhilepolicy    null    routecontext    null
retrywhile getretrywhile   createpredicate routecontext
private void setonredeliveryfromredeliveryref routecontext routecontext
// lookup onredelivery if ref is provided
if  objecthelper isnotempty onredeliveryref
// if ref is provided then use mandatory lookup to fail if not found
processor onredelivery   camelcontexthelper mandatorylookup routecontext getcamelcontext    onredeliveryref  processor class
setonredelivery onredelivery