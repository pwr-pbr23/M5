/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel model
import java util arraylist
import java util list
import java util concurrent executorservice
import javax xml bind annotation xmlaccesstype
import javax xml bind annotation xmlaccessortype
import javax xml bind annotation xmlattribute
import javax xml bind annotation xmlelement
import javax xml bind annotation xmlelementref
import javax xml bind annotation xmlrootelement
import javax xml bind annotation xmltransient
import org apache camel endpoint
import org apache camel exchangepattern
import org apache camel expression
import org apache camel processor
import org apache camel producer
import org apache camel processor unitofworkprocessor
import org apache camel processor wiretapprocessor
import org apache camel spi routecontext
import org apache camel util camelcontexthelper
/**
* represents an xml &lt;wiretap/&gt; element
*/
@xmlrootelement name
@xmlaccessortype xmlaccesstype field
public class wiretapdefinition<type extends processordefinition<type>> extends nooutputdefinition<wiretapdefinition<type>> implements executorserviceawaredefinition<wiretapdefinition<type>>
@xmlattribute
protected string uri
@xmlattribute
protected string ref
@xmltransient
protected endpoint endpoint
@xmltransient
private processor newexchangeprocessor
@xmlattribute name
private string newexchangeprocessorref
@xmlelement name
private expressionsubelementdefinition newexchangeexpression
@xmlelementref
private list<setheaderdefinition> headers   new arraylist<setheaderdefinition>
@xmltransient
private executorservice executorservice
@xmlattribute
private string executorserviceref
@xmlattribute
private boolean copy
@xmlattribute
private string onprepareref
@xmltransient
private processor onprepare
public wiretapdefinition
public wiretapdefinition string uri
seturi uri
public wiretapdefinition endpoint endpoint
setendpoint endpoint
@override
public processor createprocessor routecontext routecontext  throws exception
// executor service is mandatory for wire tap
boolean shutdownthreadpool   processordefinitionhelper willcreatenewthreadpool routecontext  this  true
executorservice threadpool   processordefinitionhelper getconfiguredexecutorservice routecontext     this  true
// create the producer to send to the wire tapped endpoint
endpoint endpoint   resolveendpoint routecontext
producer producer   endpoint createproducer
// create error handler we need to use for processing the wire tapped
processor target   wrapinerrorhandler routecontext  producer
// and wrap in uow, which is needed for error handler as well
target   new unitofworkprocessor routecontext  target
wiretapprocessor answer   new wiretapprocessor endpoint  target  getpattern    threadpool  shutdownthreadpool
answer setcopy iscopy
if  newexchangeprocessorref    null
newexchangeprocessor   routecontext lookup newexchangeprocessorref  processor class
if  newexchangeprocessor    null
answer addnewexchangeprocessor newexchangeprocessor
if  newexchangeexpression    null
answer setnewexchangeexpression newexchangeexpression createexpression routecontext
if  headers    null     headers isempty
for  setheaderdefinition header   headers
processor processor   header createprocessor routecontext
answer addnewexchangeprocessor processor
if  onprepareref    null
onprepare   camelcontexthelper mandatorylookup routecontext getcamelcontext    onprepareref  processor class
if  onprepare    null
answer setonprepare onprepare
return answer
public exchangepattern getpattern
return exchangepattern inonly
@override
public string tostring
return     description
protected string description
return fromdefinition description geturi    getref    getendpoint
@override
public string getshortname
return
@override
public string getlabel
return     description
@override
@suppresswarnings
public type end
// allow end() to return to previous type so you can continue in the dsl
return  type  super end
@override
public void addoutput processordefinition<?> output
// add outputs on parent as this wiretap does not support outputs
getparent   addoutput output
public endpoint resolveendpoint routecontext context
if  endpoint    null
return context resolveendpoint geturi    getref
else
return endpoint
// fluent api
// -------------------------------------------------------------------------
/**
* uses a custom thread pool
*
* @param executorservice a custom {@link executorservice} to use as thread pool
*                        for sending tapped exchanges
* @return the builder
*/
public wiretapdefinition<type> executorservice executorservice executorservice
setexecutorservice executorservice
return this
/**
* uses a custom thread pool
*
* @param executorserviceref reference to lookup a custom {@link executorservice}
*                           to use as thread pool for sending tapped exchanges
* @return the builder
*/
public wiretapdefinition<type> executorserviceref string executorserviceref
setexecutorserviceref executorserviceref
return this
/**
* uses a copy of the original exchange
*
* @return the builder
*/
public wiretapdefinition<type> copy
setcopy true
return this
/**
* @deprecated will be removed in camel 3.0 instead use {@link #newexchangebody(org.apache.camel.expression)}
*/
@deprecated
public wiretapdefinition<type> newexchange expression expression
return newexchangebody expression
/**
* sends a <i>new</i> exchange, instead of tapping an existing, using {@link exchangepattern#inonly}
*
* @param expression expression that creates the new body to send
* @return the builder
* @see #newexchangeheader(string, org.apache.camel.expression)
*/
public wiretapdefinition<type> newexchangebody expression expression
setnewexchangeexpression expression
return this
/**
* sends a <i>new</i> exchange, instead of tapping an existing, using {@link exchangepattern#inonly}
*
* @param ref reference to the {@link processor} to lookup in the {@link org.apache.camel.spi.registry} to
*            be used for preparing the new exchange to send
* @return the builder
*/
public wiretapdefinition<type> newexchangeref string ref
setnewexchangeprocessorref ref
return this
/**
* sends a <i>new</i> exchange, instead of tapping an existing, using {@link exchangepattern#inonly}
*
* @param processor  processor preparing the new exchange to send
* @return the builder
* @see #newexchangeheader(string, org.apache.camel.expression)
*/
public wiretapdefinition<type> newexchange processor processor
setnewexchangeprocessor processor
return this
/**
* sets a header on the <i>new</i> exchange, instead of tapping an existing, using {@link exchangepattern#inonly}.
* <p/>
* use this together with the {@link #newexchange(org.apache.camel.expression)} or {@link #newexchange(org.apache.camel.processor)}
* methods.
*
* @param headername  the header name
* @param expression  the expression setting the header value
* @return the builder
*/
public wiretapdefinition<type> newexchangeheader string headername  expression expression
headers add new setheaderdefinition headername  expression
return this
/**
* uses the {@link processor} when preparing the {@link org.apache.camel.exchange} to be send.
* this can be used to deep-clone messages that should be send, or any custom logic needed before
* the exchange is send.
*
* @param onprepare the processor
* @return the builder
*/
public wiretapdefinition<type> onprepare processor onprepare
setonprepare onprepare
return this
/**
* uses the {@link processor} when preparing the {@link org.apache.camel.exchange} to be send.
* this can be used to deep-clone messages that should be send, or any custom logic needed before
* the exchange is send.
*
* @param onprepareref reference to the processor to lookup in the {@link org.apache.camel.spi.registry}
* @return the builder
*/
public wiretapdefinition<type> onprepareref string onprepareref
setonprepareref onprepareref
return this
public string geturi
return uri
public void seturi string uri
this uri   uri
public string getref
return ref
public void setref string ref
this ref   ref
public endpoint getendpoint
return endpoint
public void setendpoint endpoint endpoint
this endpoint   endpoint
public processor getnewexchangeprocessor
return newexchangeprocessor
public void setnewexchangeprocessor processor processor
this newexchangeprocessor   processor
public string getnewexchangeprocessorref
return newexchangeprocessorref
public void setnewexchangeprocessorref string ref
this newexchangeprocessorref   ref
public expressionsubelementdefinition getnewexchangeexpression
return newexchangeexpression
public void setnewexchangeexpression expressionsubelementdefinition expression
this newexchangeexpression   expression
public void setnewexchangeexpression expression expression
this newexchangeexpression   new expressionsubelementdefinition expression
public executorservice getexecutorservice
return executorservice
public void setexecutorservice executorservice executorservice
this executorservice   executorservice
public string getexecutorserviceref
return executorserviceref
public void setexecutorserviceref string executorserviceref
this executorserviceref   executorserviceref
public boolean getcopy
return copy
public void setcopy boolean copy
this copy   copy
public boolean iscopy
// should default to true if not configured
return copy    null ? copy   true
public string getonprepareref
return onprepareref
public void setonprepareref string onprepareref
this onprepareref   onprepareref
public processor getonprepare
return onprepare
public void setonprepare processor onprepare
this onprepare   onprepare
public list<setheaderdefinition> getheaders
return headers
public void setheaders list<setheaderdefinition> headers
this headers   headers