/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel component http4
import java io file
import java io ioexception
import java io inputstream
import java io printwriter
import java io serializable
import java net urldecoder
import java util enumeration
import java util iterator
import java util map
import javax activation datahandler
import javax servlet servletoutputstream
import javax servlet http httpservletrequest
import javax servlet http httpservletresponse
import org apache camel endpoint
import org apache camel exchange
import org apache camel invalidpayloadexception
import org apache camel message
import org apache camel runtimecamelexception
import org apache camel streamcache
import org apache camel component http4 helper camelfiledatasource
import org apache camel component http4 helper httphelper
import org apache camel spi headerfilterstrategy
import org apache camel util gziphelper
import org apache camel util iohelper
import org apache camel util messagehelper
import org apache camel util objecthelper
import org slf4j logger
import org slf4j loggerfactory
/**
* binding between {@link httpmessage} and {@link httpservletresponse}.
*
* @version
*/
public class defaulthttpbinding implements httpbinding
private static final transient logger log   loggerfactory getlogger defaulthttpbinding class
private boolean usereaderforpayload
private headerfilterstrategy headerfilterstrategy   new httpheaderfilterstrategy
private httpendpoint endpoint
@deprecated
public defaulthttpbinding
@deprecated
public defaulthttpbinding headerfilterstrategy headerfilterstrategy
this headerfilterstrategy   headerfilterstrategy
public defaulthttpbinding httpendpoint endpoint
this endpoint   endpoint
this headerfilterstrategy   endpoint getheaderfilterstrategy
public void readrequest httpservletrequest request  httpmessage message
// lets force a parse of the body and headers
message getbody
// populate the headers from the request
map<string  object> headers   message getheaders
//apply the headerfilterstrategy
enumeration<?> names   request getheadernames
while  names hasmoreelements
string name    string  names nextelement
object value   request getheader name
// mapping the content-type
if  name tolowercase   equals
name   exchange content_type
if  headerfilterstrategy    null
headerfilterstrategy applyfiltertoexternalheaders name  value  message getexchange
httphelper appendheader headers  name  value
if  request getcharacterencoding      null
headers put exchange http_character_encoding  request getcharacterencoding
message getexchange   setproperty exchange charset_name  request getcharacterencoding
try
populaterequestparameters request  message
catch  exception e
throw new runtimecamelexception     e getmessage    e
object body   message getbody
// reset the stream cache if the body is the instance of streamcache
if  body instanceof streamcache
streamcache  body  reset
// store the method and query and other info in headers
headers put exchange http_method  request getmethod
headers put exchange http_query  request getquerystring
headers put exchange http_url  request getrequesturl
headers put exchange http_uri  request getrequesturi
headers put exchange http_path  request getpathinfo
headers put exchange content_type  request getcontenttype
// if content type is serialized java object, then de-serialize it to a java object
if  request getcontenttype      null    httpconstants content_type_java_serialized_object equals request getcontenttype
try
inputstream is   endpoint getcamelcontext   gettypeconverter   mandatoryconvertto inputstream class  body
object object   httphelper deserializejavaobjectfromstream is
if  object    null
message setbody object
catch  exception e
throw new runtimecamelexception    e
populateattachments request  message
protected void populaterequestparameters httpservletrequest request  httpmessage message  throws exception
//we populate the http request parameters without checking the request method
map<string  object> headers   message getheaders
enumeration<?> names   request getparameternames
while  names hasmoreelements
string name    string  names nextelement
// there may be multiple values for the same name
string values   request getparametervalues name
log trace    name  values
if  values    null
for  string value   values
if  headerfilterstrategy    null
headerfilterstrategy applyfiltertoexternalheaders name  value  message getexchange
httphelper appendheader headers  name  value
if  request getmethod   equals       request getcontenttype      null
request getcontenttype   startswith httpconstants content_type_www_form_urlencoded
string charset   request getcharacterencoding
if  charset    null
charset
// push post form params into the headers to retain compatibility with defaulthttpbinding
string body   message getbody string class
if  objecthelper isnotempty body
for  string param   body split
string pair   param split    2
if  pair length    2
string name   urldecoder decode pair  charset
string value   urldecoder decode pair  charset
if  headerfilterstrategy    null
headerfilterstrategy applyfiltertoexternalheaders name  value  message getexchange
headers put name  value
else
throw new illegalargumentexception     param
protected void populateattachments httpservletrequest request  httpmessage message
// check if there is multipart files, if so will put it into datahandler
enumeration<?> names   request getattributenames
while  names hasmoreelements
string name    string  names nextelement
object object   request getattribute name
if  object instanceof file
string filename   request getparameter name
message addattachment filename  new datahandler new camelfiledatasource  file  object  filename
public void writeresponse exchange exchange  httpservletresponse response  throws ioexception
if  exchange isfailed
if  exchange getexception      null
dowriteexceptionresponse exchange getexception    response
else
// it must be a fault, no need to check for the fault flag on the message
dowritefaultresponse exchange getout    response  exchange
else
// just copy the protocol relates header
copyprotocolheaders exchange getin    exchange getout
message out   exchange getout
if  out    null
dowriteresponse out  response  exchange
private void copyprotocolheaders message request  message response
if  request getheader exchange content_encoding     null
string contentencoding   request getheader exchange content_encoding  string class
response setheader exchange content_encoding  contentencoding
if  checkchunked response  response getexchange
response setheader exchange transfer_encoding
public void dowriteexceptionresponse throwable exception  httpservletresponse response  throws ioexception
// 500 for internal server error
response setstatus 500
if  endpoint    null    endpoint istransferexception
// transfer the exception as a serialized java object
httphelper writeobjecttoservletresponse response  exception
else
// write stacktrace as plain text
response setcontenttype
printwriter pw   response getwriter
exception printstacktrace pw
pw flush
public void dowritefaultresponse message message  httpservletresponse response  exchange exchange  throws ioexception
dowriteresponse message  response  exchange
public void dowriteresponse message message  httpservletresponse response  exchange exchange  throws ioexception
// set the status code in the response. default is 200.
if  message getheader exchange http_response_code     null
int code   message getheader exchange http_response_code  integer class
response setstatus code
// set the content type in the response.
string contenttype   messagehelper getcontenttype message
if  messagehelper getcontenttype message     null
response setcontenttype contenttype
// append headers
// must use entryset to ensure case of keys is preserved
for  map entry<string  object> entry   message getheaders   entryset
string key   entry getkey
object value   entry getvalue
// use an iterator as there can be multiple values. (must not use a delimiter)
final iterator<?> it   objecthelper createiterator value  null
while  it hasnext
string headervalue   exchange getcontext   gettypeconverter   convertto string class  it next
if  headervalue    null    headerfilterstrategy    null
headerfilterstrategy applyfiltertocamelheaders key  headervalue  exchange
response addheader key  headervalue
// write the body.
if  message getbody      null
if  gziphelper isgzip message
dowritegzipresponse message  response  exchange
else
dowritedirectresponse message  response  exchange
protected void dowritedirectresponse message message  httpservletresponse response  exchange exchange  throws ioexception
// if content type is serialized java object, then serialize and write it to the response
string contenttype   message getheader exchange content_type  string class
if  contenttype    null    httpconstants content_type_java_serialized_object equals contenttype
try
object object   message getmandatorybody serializable class
httphelper writeobjecttoservletresponse response  object
// object is written so return
return
catch  invalidpayloadexception e
throw new ioexception e
// prefer streaming
inputstream is
if  checkchunked message  exchange
is   message getbody inputstream class
else
// try to use input stream first, so we can copy directly
is   exchange getcontext   gettypeconverter   tryconvertto inputstream class  message getbody
if  is    null
servletoutputstream os   response getoutputstream
try
log trace
// copy directly from input stream to output stream
iohelper copy is  os
finally
iohelper close os  is
else
// not convertable as a stream so try as a string
string data   message getbody string class
if  data    null
log debug
// set content length before we write data
string charset   iohelper getcharsetname exchange  true
final int databytelength   data getbytes charset  length
response setcharacterencoding charset
response setcontentlength databytelength
try
response getwriter   print data
finally
response getwriter   flush
protected boolean checkchunked message message  exchange exchange
boolean answer   true
if  message getheader exchange http_chunked     null
// check the endpoint option
endpoint endpoint   exchange getfromendpoint
if  endpoint instanceof httpendpoint
answer     httpendpoint  endpoint  ischunked
else
answer   message getheader exchange http_chunked  boolean class
return answer
protected void dowritegzipresponse message message  httpservletresponse response  exchange exchange  throws ioexception
byte bytes
try
bytes   message getmandatorybody byte class
catch  invalidpayloadexception e
throw objecthelper wrapruntimecamelexception e
byte data   gziphelper compressgzip bytes
servletoutputstream os   response getoutputstream
try
response setcontentlength data length
os write data
os flush
finally
iohelper close os
public object parsebody httpmessage httpmessage  throws ioexception
// lets assume the body is a reader
httpservletrequest request   httpmessage getrequest
// need to handle the get method which has no inputstream
if    equals request getmethod
return null
if  isusereaderforpayload
// use reader to read the response body
return request getreader
else
// reade the response body from servlet request
return httphelper readresponsebodyfromservletrequest request  httpmessage getexchange
public boolean isusereaderforpayload
return usereaderforpayload
public void setusereaderforpayload boolean usereaderforpayload
this usereaderforpayload   usereaderforpayload
public headerfilterstrategy getheaderfilterstrategy
return headerfilterstrategy
public void setheaderfilterstrategy headerfilterstrategy headerfilterstrategy
this headerfilterstrategy   headerfilterstrategy