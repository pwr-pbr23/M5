/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel processor
import org apache camel asynccallback
import org apache camel asyncprocessor
import org apache camel asyncproducercallback
import org apache camel camelcontext
import org apache camel endpoint
import org apache camel exchange
import org apache camel exchangepattern
import org apache camel producer
import org apache camel producercallback
import org apache camel traceable
import org apache camel impl interceptsendtoendpoint
import org apache camel impl producercache
import org apache camel support servicesupport
import org apache camel util asyncprocessorhelper
import org apache camel util objecthelper
import org apache camel util servicehelper
import org apache camel util urisupport
import org slf4j logger
import org slf4j loggerfactory
/**
* processor for forwarding exchanges to an endpoint destination.
*
* @version
*/
public class sendprocessor extends servicesupport implements asyncprocessor  traceable
protected final transient logger log   loggerfactory getlogger getclass
protected final camelcontext camelcontext
protected producercache producercache
protected endpoint destination
protected exchangepattern pattern
public sendprocessor endpoint destination
objecthelper notnull destination
this destination   destination
this camelcontext   destination getcamelcontext
objecthelper notnull this camelcontext
public sendprocessor endpoint destination  exchangepattern pattern
this destination
this pattern   pattern
@override
public string tostring
return     destination    pattern    null ?     pattern
public void setdestination endpoint destination
this destination   destination
// destination changed so purge the cache
if  producercache    null
producercache purge
public string gettracelabel
return urisupport sanitizeuri destination getendpointuri
public void process final exchange exchange  throws exception
if   isstarted
throw new illegalstateexception     this
// we should preserve existing mep so remember old mep
// if you want to permanently to change the mep then use .setexchangepattern in the dsl
final exchangepattern existingpattern   exchange getpattern
// send the exchange to the destination using a producer
producercache doinproducer destination  exchange  pattern  new producercallback<exchange>
public exchange doinproducer producer producer  exchange exchange  exchangepattern pattern  throws exception
exchange   configureexchange exchange  pattern
log debug    destination  exchange
try
producer process exchange
finally
// restore previous mep
exchange setpattern existingpattern
return exchange
public boolean process exchange exchange  final asynccallback callback
if   isstarted
throw new illegalstateexception     this
// we should preserve existing mep so remember old mep
// if you want to permanently to change the mep then use .setexchangepattern in the dsl
final exchangepattern existingpattern   exchange getpattern
// send the exchange to the destination using a producer
return producercache doinasyncproducer destination  exchange  pattern  callback  new asyncproducercallback
public boolean doinasyncproducer producer producer  asyncprocessor asyncproducer  final exchange exchange
exchangepattern pattern  final asynccallback callback
final exchange target   configureexchange exchange  pattern
log debug    destination  exchange
return asyncprocessorhelper process asyncproducer  target  new asynccallback
public void done boolean donesync
// restore previous mep
target setpattern existingpattern
// signal we are done
callback done donesync
public endpoint getdestination
return destination
public exchangepattern getpattern
return pattern
protected exchange configureexchange exchange exchange  exchangepattern pattern
if  pattern    null
exchange setpattern pattern
// set property which endpoint we send to
exchange setproperty exchange to_endpoint  destination getendpointuri
return exchange
protected void dostart   throws exception
if  producercache    null
// use a single producer cache as we need to only hold reference for one destination
producercache   new producercache this  camelcontext  1
// do not add as service as we do not want to manage the producer cache
servicehelper startservice producercache
// the destination could since have been intercepted by a interceptsendtoendpoint so we got to
// lookup this before we can use the destination
endpoint lookup   camelcontext hasendpoint destination getendpointkey
if  lookup instanceof interceptsendtoendpoint
if  log isdebugenabled
log debug
urisupport sanitizeuri destination getendpointuri     urisupport sanitizeuri lookup getendpointuri
destination   lookup
// warm up the producer by starting it so we can fail fast if there was a problem
// however must start endpoint first
servicehelper startservice destination
producercache startproducer destination
protected void dostop   throws exception
servicehelper stopservice producercache
protected void doshutdown   throws exception
servicehelper stopandshutdownservice producercache