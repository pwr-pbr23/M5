/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel component seda
import java util concurrent blockingqueue
import java util concurrent countdownlatch
import java util concurrent timeunit
import org apache camel asynccallback
import org apache camel exchange
import org apache camel exchangetimedoutexception
import org apache camel waitfortasktocomplete
import org apache camel impl defaultasyncproducer
import org apache camel support synchronizationadapter
import org apache camel util exchangehelper
/**
* @version
*/
public class sedaproducer extends defaultasyncproducer
protected final blockingqueue<exchange> queue
private final sedaendpoint endpoint
private final waitfortasktocomplete waitfortasktocomplete
private final long timeout
private final boolean blockwhenfull
/**
* @deprecated use the other constructor
*/
@deprecated
public sedaproducer sedaendpoint endpoint  blockingqueue<exchange> queue  waitfortasktocomplete waitfortasktocomplete  long timeout
this endpoint  queue  waitfortasktocomplete  timeout  false
public sedaproducer sedaendpoint endpoint  blockingqueue<exchange> queue  waitfortasktocomplete waitfortasktocomplete
long timeout  boolean blockwhenfull
super endpoint
this queue   queue
this endpoint   endpoint
this waitfortasktocomplete   waitfortasktocomplete
this timeout   timeout
this blockwhenfull   blockwhenfull
@override
public boolean process final exchange exchange  final asynccallback callback
waitfortasktocomplete wait   waitfortasktocomplete
if  exchange getproperty exchange async_wait     null
wait   exchange getproperty exchange async_wait  waitfortasktocomplete class
if  wait    waitfortasktocomplete always
wait    waitfortasktocomplete ifreplyexpected    exchangehelper isoutcapable exchange
// do not handover the completion as we wait for the copy to complete, and copy its result back when it done
exchange copy   preparecopy exchange  false
// latch that waits until we are complete
final countdownlatch latch   new countdownlatch 1
// we should wait for the reply so install a on completion so we know when its complete
copy addoncompletion new synchronizationadapter
@override
public void ondone exchange response
// check for timeout, which then already would have invoked the latch
if  latch getcount      0
if  log istraceenabled
log trace    this  response hasout   ? response getout     response getin
return
else
if  log istraceenabled
log trace    this  response hasout   ? response getout     response getin
try
exchangehelper copyresults exchange  response
finally
// always ensure latch is triggered
latch countdown
@override
public boolean allowhandover
// do not allow handover as we want to seda producer to have its completion triggered
// at this point in the routing (at this leg), instead of at the very last (this ensure timeout is honored)
return false
@override
public string tostring
return     endpoint
log trace    copy
addtoqueue copy
if  timeout > 0
if  log istraceenabled
log trace    timeout  endpoint getendpointuri
// lets see if we can get the task done before the timeout
boolean done   false
try
done   latch await timeout  timeunit milliseconds
catch  interruptedexception e
// ignore
if   done
exchange setexception new exchangetimedoutexception exchange  timeout
// remove timed out exchange from queue
queue remove copy
// count down to indicate timeout
latch countdown
else
if  log istraceenabled
log trace    endpoint getendpointuri
// no timeout then wait until its done
try
latch await
catch  interruptedexception e
// ignore
else
// no wait, eg its a inonly then just add to queue and return
// handover the completion so its the copy which performs that, as we do not wait
exchange copy   preparecopy exchange  true
log trace    copy
addtoqueue copy
// we use oncompletion on the exchange to callback and wait for the exchange to be done
// so we should just signal the callback we are done synchronously
callback done true
return true
protected exchange preparecopy exchange exchange  boolean handover
// use a new copy of the exchange to route async
exchange copy   exchangehelper createcorrelatedcopy exchange  handover
// set a new from endpoint to be the seda queue
copy setfromendpoint endpoint
return copy
@override
protected void dostart   throws exception
super dostart
endpoint onstarted this
@override
protected void dostop   throws exception
endpoint onstopped this
super dostop
/**
* strategy method for adding the exchange to the queue.
* <p>
* will perform a blocking "put" if blockwhenfull is true, otherwise it will
* simply add which will throw exception if the queue is full
*
* @param exchange the exchange to add to the queue
*/
protected void addtoqueue exchange exchange
if  blockwhenfull
try
queue put exchange
catch  interruptedexception e
// ignore
log debug    isstopping      isstopped
else
queue add exchange