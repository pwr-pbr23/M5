/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel component file remote
import java io file
import java io fileinputstream
import java security keystore
import java util map
import javax net ssl keymanagerfactory
import javax net ssl sslcontext
import javax net ssl sslsocket
import javax net ssl trustmanagerfactory
import org apache camel util iohelper
import org apache camel util introspectionsupport
import org apache camel util jsse sslcontextparameters
import org apache commons net ftp ftpclient
import org apache commons net ftp ftpclientconfig
import org apache commons net ftp ftpfile
import org apache commons net ftp ftpsclient
/**
* ftp secure (ftp over ssl/tls) endpoint
*
* @version
*/
public class ftpsendpoint extends ftpendpoint<ftpfile>
protected map<string  object> ftpclientkeystoreparameters
protected map<string  object> ftpclienttruststoreparameters
protected sslcontextparameters sslcontextparameters
public ftpsendpoint
public ftpsendpoint string uri  remotefilecomponent<ftpfile> remotefilecomponent  remotefileconfiguration configuration
super uri  remotefilecomponent  configuration
@override
public string getscheme
return getftpsconfiguration   getprotocol
/**
* create the ftps client.
*/
protected ftpclient createftpclient   throws exception
ftpsclient client   null
if  sslcontextparameters    null
sslcontext context   sslcontextparameters createsslcontext
client   new ftpsclient getftpsconfiguration   isimplicit    context
// the ftpsclient tries to manage the following sslsocket related configuration options
// on its own based on internal configuration options.  ftpsclient does not lend itself
// to subclassing for the purpose of overriding this behavior (private methods, fields, etc.).
// as such, we create a socket (preconfigured by sslcontextparameters) from the context
// we gave to ftpsclient and then setup ftpsclient to reuse the already configured configuration
// from the socket for all future sockets it creates.  not sexy and a little brittle, but it works.
sslsocket socket    sslsocket context getsocketfactory   createsocket
client setenabledciphersuites socket getenabledciphersuites
client setenabledprotocols socket getenabledprotocols
client setneedclientauth socket getneedclientauth
client setwantclientauth socket getwantclientauth
client setenabledsessioncreation socket getenablesessioncreation
else
client   new ftpsclient getftpsconfiguration   getsecurityprotocol
getftpsconfiguration   isimplicit
if  ftpclientkeystoreparameters    null
string type    ftpclientkeystoreparameters containskey
?  string  ftpclientkeystoreparameters get      keystore getdefaulttype
string file    string  ftpclientkeystoreparameters get
string password    string  ftpclientkeystoreparameters get
string algorithm    ftpclientkeystoreparameters containskey
?  string  ftpclientkeystoreparameters get
keymanagerfactory getdefaultalgorithm
string keypassword    string  ftpclientkeystoreparameters get
keystore keystore   keystore getinstance type
fileinputstream keystorefileinputstream   new fileinputstream new file file
try
keystore load keystorefileinputstream  password tochararray
finally
iohelper close keystorefileinputstream     log
keymanagerfactory keymgrfactory   keymanagerfactory getinstance algorithm
keymgrfactory init keystore  keypassword tochararray
client setneedclientauth true
client setkeymanager keymgrfactory getkeymanagers
if  ftpclienttruststoreparameters    null
string type    ftpclienttruststoreparameters containskey
?  string  ftpclienttruststoreparameters get      keystore getdefaulttype
string file    string  ftpclienttruststoreparameters get
string password    string  ftpclienttruststoreparameters get
string algorithm    ftpclienttruststoreparameters containskey
?  string  ftpclienttruststoreparameters get
trustmanagerfactory getdefaultalgorithm
keystore truststore   keystore getinstance type
fileinputstream truststorefileinputstream   new fileinputstream new file file
try
truststore load truststorefileinputstream  password tochararray
finally
iohelper close truststorefileinputstream     log
trustmanagerfactory trustmgrfactory   trustmanagerfactory getinstance algorithm
trustmgrfactory init truststore
client settrustmanager trustmgrfactory gettrustmanagers
return client
@override
public remotefileoperations<ftpfile> createremotefileoperations   throws exception
// configure ftp client
ftpsclient client   getftpsclient
if  client    null
// must use a new client if not explicit configured to use a custom client
client    ftpsclient  createftpclient
// set any endpoint configured timeouts
if  getconfiguration   getconnecttimeout   >  1
client setconnecttimeout getconfiguration   getconnecttimeout
if  getconfiguration   getsotimeout   >  1
sotimeout   getconfiguration   getsotimeout
datatimeout   getconfiguration   gettimeout
if  ftpclientparameters    null
// setting sotimeout has to be done later on ftpclient (after it has connected)
object timeout   ftpclientparameters remove
if  timeout    null
sotimeout   getcamelcontext   gettypeconverter   convertto int class  timeout
// and we want to keep data timeout so we can log it later
timeout   ftpclientparameters remove
if  timeout    null
datatimeout   getcamelcontext   gettypeconverter   convertto int class  datatimeout
introspectionsupport setproperties client  ftpclientparameters
if  ftpclientconfigparameters    null
// client config is optional so create a new one if we have parameter for it
if  ftpclientconfig    null
ftpclientconfig   new ftpclientconfig
introspectionsupport setproperties ftpclientconfig  ftpclientconfigparameters
if  datatimeout > 0
client setdatatimeout datatimeout
if  log isdebugenabled
log debug
new object client getconnecttimeout    getsotimeout    datatimeout  client
ftpsoperations operations   new ftpsoperations client  getftpclientconfig
operations setendpoint this
return operations
/**
* returns the ftpsclient. this method exists only for convenient.
*
* @return ftpsclient
*/
public ftpsclient getftpsclient
return  ftpsclient  getftpclient
/**
* returns the ftpsconfiguration. this method exists only for convenient.
*
* @return ftpsconfiguration
*/
public ftpsconfiguration getftpsconfiguration
return  ftpsconfiguration  getconfiguration
/**
* set the key store parameters
*/
public void setftpclientkeystoreparameters map<string  object> param
this ftpclientkeystoreparameters   param
/**
* set the trust store parameters
*/
public void setftpclienttruststoreparameters map<string  object> param
this ftpclienttruststoreparameters   param
/**
* gets the jsse configuration that overrides any settings in {@link ftpsendpoint#ftpclientkeystoreparameters},
* {@link #ftpclienttruststoreparameters}, and {@link ftpsconfiguration#getsecurityprotocol()}.
*/
public sslcontextparameters getsslcontextparameters
return sslcontextparameters
/**
* gets the jsse configuration that overrides any settings in {@link ftpsendpoint#ftpclientkeystoreparameters},
* {@link #ftpclienttruststoreparameters}, and {@link ftpsconfiguration#getsecurityprotocol()}.
*/
public void setsslcontextparameters sslcontextparameters sslcontextparameters
this sslcontextparameters   sslcontextparameters