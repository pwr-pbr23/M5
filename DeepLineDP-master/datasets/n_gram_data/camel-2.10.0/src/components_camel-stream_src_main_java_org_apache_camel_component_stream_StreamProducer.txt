/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel component stream
import java io bufferedwriter
import java io file
import java io fileoutputstream
import java io ioexception
import java io outputstream
import java io outputstreamwriter
import java io writer
import java net url
import java net urlconnection
import java nio charset charset
import java util arrays
import java util list
import java util concurrent atomic atomicinteger
import org apache camel camelexchangeexception
import org apache camel exchange
import org apache camel impl defaultproducer
import org apache camel util iohelper
import org apache camel util objecthelper
import org slf4j logger
import org slf4j loggerfactory
/**
* producer that can write to streams
*/
public class streamproducer extends defaultproducer
private static final transient logger log   loggerfactory getlogger streamproducer class
private static final string types
private static final string invalid_uri       types
private static final list<string> types_list   arrays aslist types split
private streamendpoint endpoint
private string uri
private outputstream outputstream
private atomicinteger count   new atomicinteger
public streamproducer streamendpoint endpoint  string uri  throws exception
super endpoint
this endpoint   endpoint
validateuri uri
@override
protected void dostart   throws exception
super dostart
@override
protected void dostop   throws exception
super dostop
closestream true
public void process exchange exchange  throws exception
delay endpoint getdelay
synchronized  this
openstream exchange
writetostream outputstream  exchange
closestream false
private outputstream resolvestreamfromurl   throws ioexception
string u   endpoint geturl
objecthelper notempty u
log debug    u
url url   new url u
urlconnection c   url openconnection
return c getoutputstream
private outputstream resolvestreamfromfile   throws ioexception
string filename   endpoint getfilename
objecthelper notempty filename
log debug    filename
file f   new file filename
// will create a new file if missing or append to existing
f createnewfile
return new fileoutputstream f  true
private outputstream resolvestreamfromheader object o  exchange exchange  throws camelexchangeexception
return exchange getcontext   gettypeconverter   convertto outputstream class  o
private void delay long ms  throws interruptedexception
if  ms    0
return
log trace    ms
thread sleep ms
private synchronized void writetostream outputstream outputstream  exchange exchange  throws ioexception  camelexchangeexception
object body   exchange getin   getbody
if  body    null
log debug
return
// if not a string then try as byte array first
if    body instanceof string
byte bytes   exchange getin   getbody byte class
if  bytes    null
log debug    bytes  outputstream
outputstream write bytes
return
// okay now fallback to mandatory converterable to string
string s   exchange getin   getmandatorybody string class
charset charset   endpoint getcharset
writer writer   new outputstreamwriter outputstream  charset
bufferedwriter bw   iohelper buffered writer
if  log isdebugenabled
log debug    new object body  outputstream  charset
bw write s
bw write
bw flush
private synchronized void openstream   throws exception
if  outputstream    null
return
if    equals uri
outputstream   system out
else if    equals uri
outputstream   system err
else if    equals uri
outputstream   resolvestreamfromfile
else if    equals uri
outputstream   resolvestreamfromurl
count set outputstream    null ? 0   endpoint getautoclosecount
log debug    endpoint getendpointkey
private synchronized void openstream final exchange exchange  throws exception
if  outputstream    null
return
if    equals uri
outputstream   resolvestreamfromheader exchange getin   getheader     exchange
log debug    endpoint getendpointkey
else
openstream
private synchronized void closestream boolean force  throws exception
if  outputstream    null
return
// never close a standard stream (system.out or system.err)
// always close a 'header' stream (unless it's a system stream)
boolean systemstream   outputstream    system out    outputstream    system err
boolean headerstream     equals uri      systemstream
boolean reachedlimit   endpoint getautoclosecount   > 0    count decrementandget   <  0
boolean expiredstream   force    headerstream    reachedlimit      evaluation order is important
if  expiredstream
outputstream close
outputstream   null
log debug    endpoint getendpointkey
private void validateuri string uri  throws exception
string s   uri split
if  s length < 2
throw new illegalargumentexception invalid_uri
string t   s split
if  t length < 1
throw new illegalargumentexception invalid_uri
this uri   t trim
if  this uri startswith
this uri   this uri substring 2
if   types_list contains this uri
throw new illegalargumentexception invalid_uri