/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel model
import java util arraylist
import java util list
import org apache camel camelcontext
import org apache camel util camelcontexthelper
import org apache camel util endpointhelper
import org apache camel util objecthelper
/**
* helper for {@link routedefinition}
* <p/>
* utility methods to help preparing {@link routedefinition} before they are added to
* {@link org.apache.camel.camelcontext}.
*/
@suppresswarnings
public final class routedefinitionhelper
private routedefinitionhelper
public static void initparent processordefinition parent
list<processordefinition> children   parent getoutputs
for  processordefinition child   children
child setparent parent
if  child getoutputs      null     child getoutputs   isempty
// recursive the children
initparent child
private static void initparentanderrorhandlerbuilder processordefinition parent
list<processordefinition> children   parent getoutputs
for  processordefinition child   children
child setparent parent
if  child getoutputs      null     child getoutputs   isempty
// recursive the children
initparentanderrorhandlerbuilder child
public static void preparerouteforinit routedefinition route  list<processordefinition<?>> abstracts
list<processordefinition<?>> lower
// filter the route into abstracts and lower
for  processordefinition output   route getoutputs
if  output isabstract
abstracts add output
else
lower add output
/**
* prepares the route.
* <p/>
* this method does <b>not</b> mark the route as prepared afterwards.
*
* @param context the camel context
* @param route   the route
*/
public static void prepareroute modelcamelcontext context  routedefinition route
prepareroute context  route  null  null  null  null  null
/**
* prepares the route which supports context scoped features such as onexception, interceptors and oncompletions
* <p/>
* this method does <b>not</b> mark the route as prepared afterwards.
*
* @param context                            the camel context
* @param route                              the route
* @param onexceptions                       optional list of onexceptions
* @param intercepts                         optional list of interceptors
* @param interceptfromdefinitions           optional list of interceptfroms
* @param interceptsendtoendpointdefinitions optional list of interceptsendtoendpoints
* @param oncompletions                      optional list oncompletions
*/
public static void prepareroute modelcamelcontext context  routedefinition route
list<onexceptiondefinition> onexceptions
list<interceptdefinition> intercepts
list<interceptfromdefinition> interceptfromdefinitions
list<interceptsendtoendpointdefinition> interceptsendtoendpointdefinitions
list<oncompletiondefinition> oncompletions
// abstracts is the cross cutting concerns
list<processordefinition<?>> abstracts   new arraylist<processordefinition<?>>
// upper is the cross cutting concerns such as interceptors, error handlers etc
list<processordefinition<?>> upper   new arraylist<processordefinition<?>>
// lower is the regular route
list<processordefinition<?>> lower   new arraylist<processordefinition<?>>
routedefinitionhelper preparerouteforinit route  abstracts  lower
// parent and error handler builder should be initialized first
initparentanderrorhandlerbuilder context  route  abstracts  onexceptions
// then interceptors
initinterceptors context  route  abstracts  upper  intercepts  interceptfromdefinitions  interceptsendtoendpointdefinitions
// then on completion
initoncompletions abstracts  upper  oncompletions
// then transactions
inittransacted abstracts  lower
// then on exception
initonexceptions abstracts  upper  onexceptions
// rebuild route as upper + lower
route clearoutput
route getoutputs   addall lower
route getoutputs   addall 0  upper
/**
* sanity check the route, that it has input(s) and outputs.
*
* @param route the route
* @throws illegalargumentexception is thrown if the route is invalid
*/
public static void sanitycheckroute routedefinition route
objecthelper notnull route
if  route getinputs      null    route getinputs   isempty
string msg       route
if  route getid      null
msg       route getid         route
throw new illegalargumentexception msg
if  route getoutputs      null    route getoutputs   isempty
string msg       route
if  route getid      null
msg       route getid         route
throw new illegalargumentexception msg
private static void initparentanderrorhandlerbuilder modelcamelcontext context  routedefinition route
list<processordefinition<?>> abstracts  list<onexceptiondefinition> onexceptions
if  context    null
// let the route inherit the error handler builder from camel context if none already set
route seterrorhandlerbuilderifnull context geterrorhandlerbuilder
// init parent and error handler builder on the route
initparentanderrorhandlerbuilder route
// set the parent and error handler builder on the global on exceptions
if  onexceptions    null
for  onexceptiondefinition global   onexceptions
//global.seterrorhandlerbuilder(context.geterrorhandlerbuilder());
initparentanderrorhandlerbuilder global
private static void initonexceptions list<processordefinition<?>> abstracts  list<processordefinition<?>> upper
list<onexceptiondefinition> onexceptions
// add global on exceptions if any
if  onexceptions    null     onexceptions isempty
abstracts addall onexceptions
// now add onexceptions to the route
for  processordefinition output   abstracts
if  output instanceof onexceptiondefinition
// on exceptions must be added at top, so the route flow is correct as
// on exceptions should be the first outputs
// find the index to add the on exception, it should be in the top
// but it should add itself after any existing onexception
int index   0
for  int i   0  i < upper size    i
processordefinition up   upper get i
if    up instanceof onexceptiondefinition
index   i
break
else
index
upper add index  output
private static void initinterceptors camelcontext context  routedefinition route
list<processordefinition<?>> abstracts  list<processordefinition<?>> upper
list<interceptdefinition> intercepts
list<interceptfromdefinition> interceptfromdefinitions
list<interceptsendtoendpointdefinition> interceptsendtoendpointdefinitions
// move the abstracts interceptors into the dedicated list
for  processordefinition processor   abstracts
if  processor instanceof interceptsendtoendpointdefinition
if  interceptsendtoendpointdefinitions    null
interceptsendtoendpointdefinitions   new arraylist<interceptsendtoendpointdefinition>
interceptsendtoendpointdefinitions add  interceptsendtoendpointdefinition  processor
else if  processor instanceof interceptfromdefinition
if  interceptfromdefinitions    null
interceptfromdefinitions   new arraylist<interceptfromdefinition>
interceptfromdefinitions add  interceptfromdefinition  processor
else if  processor instanceof interceptdefinition
if  intercepts    null
intercepts   new arraylist<interceptdefinition>
intercepts add  interceptdefinition  processor
doinitinterceptors context  route  upper  intercepts  interceptfromdefinitions  interceptsendtoendpointdefinitions
private static void doinitinterceptors camelcontext context  routedefinition route  list<processordefinition<?>> upper
list<interceptdefinition> intercepts
list<interceptfromdefinition> interceptfromdefinitions
list<interceptsendtoendpointdefinition> interceptsendtoendpointdefinitions
// configure intercept
if  intercepts    null     intercepts isempty
for  interceptdefinition intercept   intercepts
intercept afterpropertiesset
// init the parent
initparent intercept
// add as first output so intercept is handled before the actual route and that gives
// us the needed head start to init and be able to intercept all the remaining processing steps
upper add 0  intercept
// configure intercept from
if  interceptfromdefinitions    null     interceptfromdefinitions isempty
for  interceptfromdefinition intercept   interceptfromdefinitions
// should we only apply interceptor for a given endpoint uri
boolean match   true
if  intercept geturi      null
match   false
for  fromdefinition input   route getinputs
// a bit more logic to lookup the endpoint as it can be uri/ref based
string uri   input geturi
if  uri    null    uri startswith
// its a ref: so lookup the endpoint to get its url
uri   camelcontexthelper getmandatoryendpoint context  uri  getendpointuri
else if  input getref      null
// lookup the endpoint to get its url
uri   camelcontexthelper getmandatoryendpoint context      input getref    getendpointuri
if  endpointhelper matchendpoint context  uri  intercept geturi
match   true
break
if  match
intercept afterpropertiesset
// init the parent
initparent intercept
// add as first output so intercept is handled before the actual route and that gives
// us the needed head start to init and be able to intercept all the remaining processing steps
upper add 0  intercept
// configure intercept send to endpoint
if  interceptsendtoendpointdefinitions    null     interceptsendtoendpointdefinitions isempty
for  interceptsendtoendpointdefinition intercept   interceptsendtoendpointdefinitions
intercept afterpropertiesset
// init the parent
initparent intercept
// add as first output so intercept is handled before the actual route and that gives
// us the needed head start to init and be able to intercept all the remaining processing steps
upper add 0  intercept
private static void initoncompletions list<processordefinition<?>> abstracts  list<processordefinition<?>> upper
list<oncompletiondefinition> oncompletions
list<oncompletiondefinition> completions   new arraylist<oncompletiondefinition>
// find the route scoped oncompletions
for  processordefinition out   abstracts
if  out instanceof oncompletiondefinition
completions add  oncompletiondefinition  out
// only add global oncompletion if there are no route already
if  completions isempty      oncompletions    null
completions   oncompletions
// init the parent
for  oncompletiondefinition global   completions
initparent global
// are there any completions to init at all?
if  completions isempty
return
upper addall completions
private static void inittransacted list<processordefinition<?>> abstracts  list<processordefinition<?>> lower
transacteddefinition transacted   null
// add to correct type
for  processordefinition<?> type   abstracts
if  type instanceof transacteddefinition
if  transacted    null
transacted    transacteddefinition  type
else
throw new illegalargumentexception
if  transacted    null
// the outputs should be moved to the transacted policy
transacted getoutputs   addall lower
// and add it as the single output
lower clear
lower add transacted
/**
* force assigning ids to the give node and all its children (recursively).
* <p/>
* this is needed when doing tracing or the likes, where each node should have its id assigned
* so the tracing can pin point exactly.
*
* @param context the camel context
* @param processor the node
*/
public static void forceassignids camelcontext context  processordefinition processor
// force id on the child
processor idorcreate context getnodeidfactory
list<processordefinition> children   processor getoutputs
if  children    null     children isempty
for  processordefinition child   children
forceassignids context  child