/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel component mail
import java util enumeration
import java util linkedlist
import java util queue
import java util uuid
import javax mail flags
import javax mail folder
import javax mail foldernotfoundexception
import javax mail header
import javax mail message
import javax mail messagingexception
import javax mail store
import javax mail search flagterm
import org apache camel exchange
import org apache camel processor
import org apache camel impl scheduledbatchpollingconsumer
import org apache camel spi synchronization
import org apache camel util castutils
import org apache camel util objecthelper
import org slf4j logger
import org slf4j loggerfactory
/**
* a {@link org.apache.camel.consumer consumer} which consumes messages from javamail using a
* {@link javax.mail.transport transport} and dispatches them to the {@link processor}
*/
public class mailconsumer extends scheduledbatchpollingconsumer
public static final string pop3_uid
public static final long default_consumer_delay   60   1000l
private static final transient logger log   loggerfactory getlogger mailconsumer class
private final javamailsender sender
private folder folder
private store store
public mailconsumer mailendpoint endpoint  processor processor  javamailsender sender
super endpoint  processor
this sender   sender
@override
protected void dostart   throws exception
super dostart
@override
protected void dostop   throws exception
if  folder    null    folder isopen
folder close true
if  store    null    store isconnected
store close
super dostop
protected int poll   throws exception
// must reset for each poll
shutdownrunningtask   null
pendingexchanges   0
int polledmessages   0
ensureisconnected
if  store    null    folder    null
throw new illegalstateexception
getendpoint   getconfiguration   getmailstoreloginformation
if  log isdebugenabled
log debug     getendpoint   getconfiguration   getmailstoreloginformation
if  getendpoint   getconfiguration   getfetchsize      0
log warn
return 0
// ensure folder is open
if   folder isopen
folder open folder read_write
try
int count   folder getmessagecount
if  count > 0
message messages
// should we process all messages or only unseen messages
if  getendpoint   getconfiguration   isunseen
messages   folder search new flagterm new flags flags flag seen   false
else
messages   folder getmessages
polledmessages   processbatch castutils cast createexchanges messages
else if  count     1
throw new messagingexception     folder getfullname
catch  exception e
handleexception e
finally
// need to ensure we release resources
try
if  folder isopen
folder close true
catch  exception e
// some mail servers will lock the folder so we ignore in this case (camel-1263)
log debug     folder getname    e
// should we disconnect, the header can override the configuration
boolean disconnect   getendpoint   getconfiguration   isdisconnect
if  disconnect
log debug    getendpoint   getconfiguration   getmailstoreloginformation
try
store close
catch  exception e
log debug     getendpoint   getconfiguration   getmailstoreloginformation    e
store   null
folder   null
return polledmessages
public int processbatch queue<object> exchanges  throws exception
int total   exchanges size
// limit if needed
if  maxmessagesperpoll > 0    total > maxmessagesperpoll
log debug    maxmessagesperpoll  total
total   maxmessagesperpoll
for  int index   0  index < total    isbatchallowed    index
// only loop if we are started (allowed to run)
exchange exchange   objecthelper cast exchange class  exchanges poll
// add current index and total as properties
exchange setproperty exchange batch_index  index
exchange setproperty exchange batch_size  total
exchange setproperty exchange batch_complete  index    total   1
// update pending number of exchanges
pendingexchanges   total   index   1
// must use the original message in case we need to workaround a charset issue when extracting mail content
final message mail   exchange getin mailmessage class  getoriginalmessage
// add on completion to handle after work when the exchange is done
exchange addoncompletion new synchronization
public void oncomplete exchange exchange
processcommit mail  exchange
public void onfailure exchange exchange
processrollback mail  exchange
@override
public string tostring
return
// process the exchange
processexchange exchange
return total
protected queue<exchange> createexchanges message messages  throws messagingexception
queue<exchange> answer   new linkedlist<exchange>
int fetchsize   getendpoint   getconfiguration   getfetchsize
int count   fetchsize     1 ? messages length   math min fetchsize  messages length
if  log isdebugenabled
log debug    count  messages length
for  int i   0  i < count  i
message message   messages
if   message getflags   contains flags flag deleted
exchange exchange   getendpoint   createexchange message
// if the protocol is pop3 we need to remember the uid on the exchange
// so we can find the mail message again later to be able to delete it
if  getendpoint   getconfiguration   getprotocol   startswith
string uid   generatepop3uid message
if  uid    null
exchange setproperty pop3_uid  uid
log trace    uid
answer add exchange
else
if  log isdebugenabled
log debug    mailutils dumpmessage message
return answer
/**
* strategy to process the mail message.
*/
protected void processexchange exchange exchange  throws exception
if  log isdebugenabled
mailmessage msg    mailmessage  exchange getin
log debug    mailutils dumpmessage msg getmessage
getprocessor   process exchange
/**
* strategy to flag the message after being processed.
*
* @param mail     the mail message
* @param exchange the exchange
*/
protected void processcommit message mail  exchange exchange
try
// ensure folder is open
if   folder isopen
folder open folder read_write
// if the protocol is pop3, the message needs to be synced with the folder via the uid.
// otherwise setting the delete/seen flag won't delete the message.
string uid    string  exchange removeproperty pop3_uid
if  uid    null
int count   folder getmessagecount
message found   null
log trace    uid  count
for  int i   1  i <  count    i
message msg   folder getmessage i
if  uid equals generatepop3uid msg
log debug    uid  count
found   msg
break
if  found    null
boolean delete   getendpoint   getconfiguration   isdelete
log warn      delete ?
else
mail   found
org apache camel message in   exchange getin
mailconfiguration config   getendpoint   getconfiguration
// header values override configuration values
string copyto   in getheader    config getcopyto    string class
boolean delete   in getheader    config isdelete    boolean class
// copy message into different imap folder if asked
if  config getprotocol   equals mailutils protocol_imap     config getprotocol   equals mailutils protocol_imaps
if  copyto    null
log trace    copyto
folder destfolder   store getfolder copyto
if   destfolder exists
destfolder create folder holds_messages
folder copymessages new message mail   destfolder
log trace    mail  copyto
if  delete
log trace
mail setflag flags flag deleted  true
else
log trace
mail setflag flags flag seen  true
catch  messagingexception e
getexceptionhandler   handleexception     mail  exchange  e
/**
* strategy when processing the exchange failed.
*
* @param mail     the mail message
* @param exchange the exchange
*/
protected void processrollback message mail  exchange exchange
exception cause   exchange getexception
if  cause    null
log warn     exchange  cause
else
log warn     exchange
/**
* generates an uid of the pop3message
*
* @param message the pop3message
* @return the generated uid
*/
protected string generatepop3uid message message
string uid   null
// create an uid based on message headers on the pop3message, that ought
// to be unique
stringbuilder buffer   new stringbuilder
try
enumeration<?> it   message getallheaders
while  it hasmoreelements
header header    header it nextelement
buffer append header getname    append    append header getvalue    append
if  buffer length   > 0
log trace    buffer
uid   uuid nameuuidfrombytes buffer tostring   getbytes    tostring
catch  messagingexception e
log warn    e
return uid
private void ensureisconnected   throws messagingexception
mailconfiguration config   getendpoint   getconfiguration
boolean connected   false
try
if  store    null    store isconnected
connected   true
catch  exception e
log debug
getendpoint   getconfiguration   getmailstoreloginformation
e getmessage    e
if   connected
// ensure resources get recreated on reconnection
store   null
folder   null
if  log isdebugenabled
log debug    getendpoint   getconfiguration   getmailstoreloginformation
store   sender getsession   getstore config getprotocol
store connect config gethost    config getport    config getusername    config getpassword
if  folder    null
if  log isdebugenabled
log debug    config getfoldername
folder   store getfolder config getfoldername
if  folder    null     folder exists
throw new foldernotfoundexception folder      config getfoldername
@override
public mailendpoint getendpoint
return  mailendpoint  super getendpoint