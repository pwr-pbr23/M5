/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel component file
import java io file
import java util list
import org apache camel processor
import org apache camel util fileutil
import org apache camel util objecthelper
/**
* file consumer.
*/
public class fileconsumer extends genericfileconsumer<file>
private string endpointpath
public fileconsumer genericfileendpoint<file> endpoint  processor processor  genericfileoperations<file> operations
super endpoint  processor  operations
this endpointpath   endpoint getconfiguration   getdirectory
@override
protected boolean polldirectory string filename  list<genericfile<file>> filelist  int depth
log trace    filename
depth
file directory   new file filename
if   directory exists       directory isdirectory
log debug    directory
if  getendpoint   isdirectorymustexist
throw new genericfileoperationfailedexception     directory
return true
log trace    directory getpath
file files   directory listfiles
if  files    null    files length    0
// no files in this directory to poll
if  log istraceenabled
log trace    directory getpath
return true
else
// we found some files
if  log istraceenabled
log trace    files length  directory getpath
for  file file   files
// check if we can continue polling in files
if   canpollmorefiles filelist
return false
// trace log as windows/unix can have different views what the file is?
if  log istraceenabled
log trace
new object file  file isabsolute    file isdirectory    file isfile    file ishidden
// creates a generic file
genericfile<file> gf   asgenericfile endpointpath  file  getendpoint   getcharset
if  file isdirectory
if  endpoint isrecursive      isvalidfile gf  true     depth < endpoint getmaxdepth
// recursive scan and add the sub files and folders
string subdirectory   filename   file separator   file getname
boolean canpollmore   polldirectory subdirectory  filelist  depth
if   canpollmore
return false
else
// windows can report false to a file on a share so regard it always as a file (if its not a directory)
if  isvalidfile gf  false     depth >  endpoint mindepth
if  isinprogress gf
if  log istraceenabled
log trace    gf getfilename
else
log trace    file
// matched file so add
filelist add gf
return true
/**
* creates a new genericfile<file> based on the given file.
*
* @param endpointpath the starting directory the endpoint was configured with
* @param file the source file
* @return wrapped as a genericfile
*/
public static genericfile<file> asgenericfile string endpointpath  file file  string charset
genericfile<file> answer   new genericfile<file>
// use file specific binding
answer setbinding new filebinding
answer setcharset charset
answer setendpointpath endpointpath
answer setfile file
answer setfilenameonly file getname
answer setfilelength file length
answer setdirectory file isdirectory
// must use fileutil.isabsolute to have consistent check for whether the file is
// absolute or not. as windows do not consider \ paths as absolute where as all
// other os platforms will consider \ as absolute. the logic in camel mandates
// that we align this for all os. that is why we must use fileutil.isabsolute
// to return a consistent answer for all os platforms.
answer setabsolute fileutil isabsolute file
answer setabsolutefilepath file getabsolutepath
answer setlastmodified file lastmodified
// compute the file path as relative to the starting directory
file path
string endpointnormalized   fileutil normalizepath endpointpath
if  file getpath   startswith endpointnormalized
// skip duplicate endpoint path
path   new file objecthelper after file getpath    endpointnormalized   file separator
else
path   new file file getpath
if  path getparent      null
answer setrelativefilepath path getparent     file separator   file getname
else
answer setrelativefilepath path getname
// the file name should be the relative path
answer setfilename answer getrelativefilepath
// use file as body as we have converters if needed as stream
answer setbody file
return answer
@override
public fileendpoint getendpoint
return  fileendpoint  super getendpoint