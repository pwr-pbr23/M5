/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel dataformat soap
import java io ioexception
import java io inputstream
import java io outputstream
import java lang annotation annotation
import java lang reflect constructor
import java lang reflect method
import java util arraylist
import java util list
import javax jws webmethod
import javax jws webparam
import javax xml bind jaxbcontext
import javax xml bind jaxbelement
import javax xml bind jaxbexception
import javax xml bind jaxbintrospector
import javax xml namespace qname
import javax xml ws webfault
import org apache camel exchange
import org apache camel message
import org apache camel runtimecamelexception
import org apache camel component bean beaninvocation
import org apache camel converter jaxb jaxbdataformat
import org apache camel dataformat soap name elementnamestrategy
import org apache camel dataformat soap name serviceinterfacestrategy
import org apache camel dataformat soap name typenamestrategy
import org slf4j logger
import org slf4j loggerfactory
import org xmlsoap schemas soap envelope body
import org xmlsoap schemas soap envelope detail
import org xmlsoap schemas soap envelope envelope
import org xmlsoap schemas soap envelope fault
import org xmlsoap schemas soap envelope header
import org xmlsoap schemas soap envelope objectfactory
/**
* marshaling from objects to soap and back by using jaxb. the classes to be
* processed need to have jaxb annotations. for marshaling a elementnamestrategy
* is used to determine how the top level elements in soap are named as this can
* not be extracted from jaxb.
*/
public class soapjaxbdataformat extends jaxbdataformat
public static final string soap_unmarshalled_header_list
private static final string soap_package_name   envelope class getpackage   getname
private static final qname fault_code_server   new qname
protected final transient logger log   loggerfactory getlogger getclass
private elementnamestrategy elementnamestrategy
private string elementnamestrategyref
private boolean ignoreunmarshalledheaders
/**
* remember to set the context path when using this constructor
*/
public soapjaxbdataformat
/**
* initialize with jaxb context path
*
* @param contexpath
*/
public soapjaxbdataformat string contextpath
super contextpath
/**
* initialize the data format. the serviceinterface is necessary to
* determine the element name and namespace of the element inside the soap
* body when marshalling
*
* @param contextpath
*            package for jaxb context
* @param serviceinterface
*            webservice interface
*/
public soapjaxbdataformat string contextpath  elementnamestrategy elementnamestrategy
this contextpath
this elementnamestrategy   elementnamestrategy
/**
* initialize the data format. the serviceinterface is necessary to
* determine the element name and namespace of the element inside the soap
* body when marshalling
*
* @param contextpath
*            package for jaxb context
* @param elementnamestrategyref
*            webservice interface referenced bean name
*/
public soapjaxbdataformat string contextpath  string elementnamestrategyref
this contextpath
this elementnamestrategyref   elementnamestrategyref
public void setelementnamestrategy object namestrategy
if  namestrategy instanceof elementnamestrategy
this elementnamestrategy    elementnamestrategy  namestrategy
else
throw new illegalargumentexception
elementnamestrategy class getname
public void setignoreunmarshalledheaders boolean ignoreheaders
this ignoreunmarshalledheaders   ignoreheaders
/**
* indicates whether header content that has been unmarshalled should be placed into a message
* header on the exchange
*/
private boolean isignoreunmarshalledheaders
return ignoreunmarshalledheaders
protected void checkelementnamestrategy exchange exchange
if  elementnamestrategy    null
synchronized  this
if  elementnamestrategy    null
return
else
if  elementnamestrategyref    null
elementnamestrategy   exchange getcontext   getregistry   lookup elementnamestrategyref
elementnamestrategy class
else
elementnamestrategy   new typenamestrategy
/**
* marshal inputobjects to soap xml. if the exchange or message has an
* exception_caugth property or header then instead of the object the
* exception is marshaled.
*
* to determine the name of the top level xml elements the elementnamestrategy
* is used.
*/
public void marshal exchange exchange  final object inputobject  outputstream stream  throws ioexception
checkelementnamestrategy exchange
string soapaction   getsoapactionfromexchange exchange
if  soapaction    null    inputobject instanceof beaninvocation
beaninvocation beaninvocation    beaninvocation  inputobject
webmethod webmethod   beaninvocation getmethod   getannotation webmethod class
if  webmethod    null    webmethod action      null
soapaction   webmethod action
body body   new body
header header   new header
throwable exception   exchange getproperty exchange exception_caught  throwable class
if  exception    null
exception   exchange getin   getheader exchange exception_caught  throwable class
final list<jaxbelement<?>> bodycontent
list<jaxbelement<?>> headercontent   new arraylist<jaxbelement<?>>
if  exception    null
bodycontent   new arraylist<jaxbelement<?>>
bodycontent add createfaultfromexception exception
else
bodycontent   createcontentfromobject inputobject  soapaction  headercontent
for  jaxbelement<?> elem   bodycontent
body getany   add elem
for  jaxbelement<?> elem   headercontent
header getany   add elem
envelope envelope   new envelope
if  headercontent size   > 0
envelope setheader header
envelope setbody body
jaxbelement<envelope> envelopeel   new objectfactory   createenvelope envelope
super marshal exchange  envelopeel  stream
/**
* create body content from a non exception object. if the inputobject is a
* beaninvocation the following should be considered: the first parameter
* will be used for the soap body. beaninvocations with more than one
* parameter are not supported. so the interface should be in doc lit bare
* style.
*
* @param inputobject
*            object to be put into the soap body
* @param soapaction
*            for name resolution
* @param classresolver
*            for name resolution
* @param headerelements
*            in/out parameter used to capture header content if present
*
* @return jaxbelement for the body content
*/
private list<jaxbelement<?>> createcontentfromobject final object inputobject  string soapaction
list<jaxbelement<?>> headerelements
list<object> bodyparts   new arraylist<object>
list<object> headerparts   new arraylist<object>
if  inputobject instanceof beaninvocation
beaninvocation bi    beaninvocation inputobject
annotation annotations   bi getmethod   getparameterannotations
list<webparam> webparams   new arraylist<webparam>
for  annotation singleparameterannotations   annotations
for  annotation annotation   singleparameterannotations
if  annotation instanceof webparam
webparams add  webparam annotation
if  webparams size   > 0
if  webparams size      bi getargs   length
int index    1
for  object o   bi getargs
if  webparams get   index  header
headerparts add o
else
bodyparts add o
else
throw new runtimecamelexception
bi getmethod   getname
else
// try to map all objects for the body
for  object o   bi getargs
bodyparts add o
else
bodyparts add inputobject
list<jaxbelement<?>> bodyelements   new arraylist<jaxbelement<?>>
for  object bodyobj   bodyparts
qname name   elementnamestrategy findqnameforsoapactionortype soapaction  bodyobj getclass
if  name    null
log warn     bodyobj getclass   getname
continue
else
bodyelements add getelement bodyobj  name
for  object headerobj   headerparts
qname name   elementnamestrategy findqnameforsoapactionortype soapaction  headerobj getclass
if  name    null
log warn     headerobj getclass   getname
continue
else
jaxbelement<?> headerelem   getelement headerobj  name
if  null    headerelem
headerelements add headerelem
return bodyelements
@suppresswarnings
private jaxbelement<?> getelement object fromobj  qname name
object value   null
// in the case of a parameter, the class of the value of the holder class
// is used for the mapping rather than the holder class itself.
if  fromobj instanceof javax xml ws holder
javax xml ws holder holder    javax xml ws holder  fromobj
value   holder value
if  null    value
return null
else
value   fromobj
return new jaxbelement name  value getclass    value
/**
* creates a soap fault from the exception and populates the message as well
* as the detail. the detail object is read from the method getfaultinfo of
* the throwable if present
*
* @param exception
* @return soap fault from given throwable
*/
@suppresswarnings
private jaxbelement<fault> createfaultfromexception final throwable exception
webfault webfault   exception getclass   getannotation webfault class
if  webfault    null    webfault targetnamespace      null
throw new runtimeexception     exception getclass   getname
exception
qname name   new qname webfault targetnamespace    webfault name
object faultobject   null
try
method method   exception getclass   getmethod
faultobject   method invoke exception
catch  exception e
throw new runtimecamelexception    e
fault fault   new fault
fault setfaultcode fault_code_server
fault setfaultstring exception getmessage
detail detailel   new objectfactory   createdetail
@suppresswarnings
jaxbelement<?> faultdetailcontent   new jaxbelement name  faultobject getclass    faultobject
detailel getany   add faultdetailcontent
fault setdetail detailel
return new objectfactory   createfault fault
/**
* unmarshal a given soap xml stream and return the content of the soap body
*/
public object unmarshal exchange exchange  inputstream stream  throws ioexception
checkelementnamestrategy exchange
string soapaction   getsoapactionfromexchange exchange
// determine the method name for an eventual beanprocessor in the route
if  soapaction    null    elementnamestrategy instanceof serviceinterfacestrategy
serviceinterfacestrategy strategy    serviceinterfacestrategy  elementnamestrategy
string methodname   strategy getmethodforsoapaction soapaction
exchange getout   setheader exchange bean_method_name  methodname
// store soap action for an eventual later marshal step.
// this is necessary as the soap action in the message may get lost on the way
if  soapaction    null
exchange setproperty exchange soap_action  soapaction
object unmarshalledobject   super unmarshal exchange  stream
object rootobject   jaxbintrospector getvalue unmarshalledobject
if  rootobject getclass      envelope class
throw new runtimecamelexception     rootobject getclass
envelope envelope    envelope  rootobject
header header   envelope getheader
if  header    null
list<object> returnheaders
list<object> anyheaderelements   envelope getheader   getany
if  null    anyheaderelements      isignoreunmarshalledheaders
if  isignorejaxbelement
returnheaders   new arraylist<object>
for  object headerel   anyheaderelements
returnheaders add jaxbintrospector getvalue headerel
else
returnheaders   anyheaderelements
exchange getout   setheader soapjaxbdataformat soap_unmarshalled_header_list  returnheaders
list<object> anyelement   envelope getbody   getany
if  anyelement size      0
// no parameter so return null
return null
object payloadel   anyelement get 0
object payload   jaxbintrospector getvalue payloadel
if  payload instanceof fault
exception exception   createexceptionfromfault  fault  payload
exchange setexception exception
return null
else
return isignorejaxbelement   ? payload   payloadel
private string getsoapactionfromexchange exchange exchange
message inmessage   exchange getin
string soapaction   inmessage  getheader exchange soap_action  string class
if  soapaction    null
soapaction   inmessage getheader    string class
if  soapaction    null    soapaction startswith  "
soapaction   soapaction substring 1  soapaction length     1
if  soapaction    null
soapaction   exchange getproperty exchange soap_action  string class
return soapaction
/**
* creates an exception and eventually an embedded bean that contains the
* fault detail. the exception class is determined by using the
* elementnamestrategy. the qname of the fault detail should match the
* webfault annotation of the exception class. if no fault detail is set the
* a runtimecamelexception is created.
*
* @param fault
*            soap fault
* @return created exception
*/
private exception createexceptionfromfault fault fault
list<object> detaillist   fault getdetail   getany
string message   fault getfaultstring
if  detaillist size      0
return new runtimecamelexception message
jaxbelement<?> detailel    jaxbelement<?>  detaillist get 0
class<? extends exception> exceptionclass   elementnamestrategy findexceptionforfaultname detailel getname
constructor<? extends exception> messagecontructor
constructor<? extends exception> constructor
try
messagecontructor   exceptionclass getconstructor string class
object detail   jaxbintrospector getvalue detailel
try
constructor   exceptionclass getconstructor string class  detail getclass
return constructor newinstance message  detail
catch  nosuchmethodexception e
return messagecontructor newinstance message
catch  exception e
throw new runtimecamelexception e
/**
* added the generated soap package to the jaxb context so soap datatypes
* are available
*/
@override
protected jaxbcontext createcontext   throws jaxbexception
if  getcontextpath      null
return jaxbcontext newinstance soap_package_name       getcontextpath
else
return jaxbcontext newinstance
public void setelementnamestrategy elementnamestrategy elementnamestrategy
this elementnamestrategy   elementnamestrategy
public void setelementnamestrategyref string namestrategyref
this elementnamestrategyref   namestrategyref