/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel impl
import java util map
import org apache camel camelcontext
import org apache camel consumer
import org apache camel endpoint
import org apache camel endpointconfiguration
import org apache camel exchange
import org apache camel exchangepattern
import org apache camel pollingconsumer
import org apache camel processor
import org apache camel producer
import org apache camel util servicehelper
import org slf4j logger
import org slf4j loggerfactory
import static org apache camel processor pipelinehelper continueprocessing
/**
* this is an endpoint when sending to it, is intercepted and is routed in a detour
*
* @version
*/
public class interceptsendtoendpoint implements endpoint
private static final transient logger log   loggerfactory getlogger interceptsendtoendpoint class
private final endpoint delegate
private producer producer
private processor detour
private boolean skip
/**
* intercepts sending to the given endpoint
*
* @param destination  the original endpoint
* @param skip <tt>true</tt> to skip sending after the detour to the original endpoint
*/
public interceptsendtoendpoint final endpoint destination  boolean skip
this delegate   destination
this skip   skip
public void setdetour processor detour
this detour   detour
public endpoint getdelegate
return delegate
public string getendpointuri
return delegate getendpointuri
public endpointconfiguration getendpointconfiguration
return delegate getendpointconfiguration
public string getendpointkey
return delegate getendpointkey
public exchange createexchange
return delegate createexchange
public exchange createexchange exchangepattern pattern
return delegate createexchange pattern
public exchange createexchange exchange exchange
return delegate createexchange exchange
public camelcontext getcamelcontext
return delegate getcamelcontext
public producer createproducer   throws exception
producer   delegate createproducer
return new producer
public endpoint getendpoint
return producer getendpoint
public exchange createexchange
return producer createexchange
public exchange createexchange exchangepattern pattern
return producer createexchange pattern
public exchange createexchange exchange exchange
return producer createexchange exchange
public void process exchange exchange  throws exception
// process the detour so we do the detour routing
if  log isdebugenabled
log debug    new object getendpoint    detour  exchange
// add header with the real endpoint uri
exchange getin   setheader exchange intercepted_endpoint  delegate getendpointuri
try
detour process exchange
catch  exception e
exchange setexception e
// decide whether to continue or not; similar logic to the pipeline
// check for error if so we should break out
if   continueprocessing exchange      getendpoint    log
return
// determine if we should skip or not
boolean shouldskip   skip
// if then interceptor had a when predicate, then we should only skip if it matched
boolean whenmatches    boolean  exchange removeproperty exchange intercept_send_to_endpoint_when_matched
if  whenmatches    null
shouldskip   skip    whenmatches
if   shouldskip
if  exchange hasout
// replace out with in as detour changed something
exchange setin exchange getout
exchange setout null
// route to original destination
producer process exchange
else
log debug    getendpoint    exchange
public boolean issingleton
return producer issingleton
public void start   throws exception
servicehelper startservice detour
// here we also need to start the producer
servicehelper startservice producer
public void stop   throws exception
// do not stop detour as it should only be stopped when the interceptor stops
// we should stop the producer here
servicehelper stopservice producer
public consumer createconsumer processor processor  throws exception
return delegate createconsumer processor
public pollingconsumer createpollingconsumer   throws exception
return delegate createpollingconsumer
public void configureproperties map<string  object> options
delegate configureproperties options
public void setcamelcontext camelcontext context
delegate setcamelcontext context
public boolean islenientproperties
return delegate islenientproperties
public boolean issingleton
return delegate issingleton
public void start   throws exception
servicehelper startservices detour  delegate
public void stop   throws exception
servicehelper stopservices delegate  detour
@override
public string tostring
return delegate tostring