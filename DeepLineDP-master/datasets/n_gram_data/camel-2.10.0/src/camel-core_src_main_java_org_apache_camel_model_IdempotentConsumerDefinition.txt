/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel model
import javax xml bind annotation xmlaccesstype
import javax xml bind annotation xmlaccessortype
import javax xml bind annotation xmlattribute
import javax xml bind annotation xmlrootelement
import javax xml bind annotation xmltransient
import org apache camel expression
import org apache camel processor
import org apache camel processor idempotent idempotentconsumer
import org apache camel spi idempotentrepository
import org apache camel spi routecontext
import org apache camel util objecthelper
/**
* represents an xml &lt;idempotentconsumer/&gt; element
*/
@xmlrootelement name
@xmlaccessortype xmlaccesstype field
public class idempotentconsumerdefinition extends expressionnode
@xmlattribute
private string messageidrepositoryref
@xmlattribute
private boolean eager
@xmlattribute
private boolean skipduplicate
@xmlattribute
private boolean removeonfailure
@xmltransient
private idempotentrepository<?> idempotentrepository
public idempotentconsumerdefinition
public idempotentconsumerdefinition expression messageidexpression  idempotentrepository<?> idempotentrepository
super messageidexpression
this idempotentrepository   idempotentrepository
@override
public string tostring
return     getexpression         getoutputs
@override
public string getlabel
return     getexpression
@override
public string getshortname
return
// fluent api
//-------------------------------------------------------------------------
/**
* sets the reference name of the message id repository
*
* @param messageidrepositoryref the reference name of message id repository
* @return builder
*/
public idempotentconsumerdefinition messageidrepositoryref string messageidrepositoryref
setmessageidrepositoryref messageidrepositoryref
return this
/**
* sets the the message id repository for the idempotent consumer
*
* @param idempotentrepository the repository instance of idempotent
* @return builder
*/
public idempotentconsumerdefinition messageidrepository idempotentrepository<?> idempotentrepository
setmessageidrepository idempotentrepository
return this
/**
* sets whether to eagerly add the key to the idempotent repository or wait until the exchange
* is complete. eager is default enabled.
*
* @param eager <tt>true</tt> to add the key before processing, <tt>false</tt> to wait until
*              the exchange is complete.
* @return builder
*/
public idempotentconsumerdefinition eager boolean eager
seteager eager
return this
/**
* sets whether to remove or keep the key on failure.
* <p/>
* the default behavior is to remove the key on failure.
*
* @param removeonfailure <tt>true</tt> to remove the key, <tt>false</tt> to keep the key
*                        if the exchange fails.
* @return builder
*/
public idempotentconsumerdefinition removeonfailure boolean removeonfailure
setremoveonfailure removeonfailure
return this
/**
* sets whether to skip duplicates or not.
* <p/>
* the default behavior is to skip duplicates.
* <p/>
* a duplicate message would have the exchange property {@link org.apache.camel.exchange#duplicate_message} set
* to a {@link boolean#true} value. a none duplicate message will not have this property set.
*
* @param skipduplicate <tt>true</tt> to skip duplicates, <tt>false</tt> to allow duplicates.
* @return builder
*/
public idempotentconsumerdefinition skipduplicate boolean skipduplicate
setskipduplicate skipduplicate
return this
public string getmessageidrepositoryref
return messageidrepositoryref
public void setmessageidrepositoryref string messageidrepositoryref
this messageidrepositoryref   messageidrepositoryref
public idempotentrepository<?> getmessageidrepository
return idempotentrepository
public void setmessageidrepository idempotentrepository<?> idempotentrepository
this idempotentrepository   idempotentrepository
public boolean geteager
return eager
public void seteager boolean eager
this eager   eager
public boolean iseager
// defaults to true if not configured
return eager    null ? eager   true
public boolean getskipduplicate
return skipduplicate
public void setskipduplicate boolean skipduplicate
this skipduplicate   skipduplicate
public boolean isskipduplicate
// defaults to true if not configured
return skipduplicate    null ? skipduplicate   true
public boolean getremoveonfailure
return removeonfailure
public void setremoveonfailure boolean removeonfailure
this removeonfailure   removeonfailure
public boolean isremoveonfailure
// defaults to true if not configured
return removeonfailure    null ? removeonfailure   true
@override
@suppresswarnings
public processor createprocessor routecontext routecontext  throws exception
processor childprocessor   this createchildprocessor routecontext  true
idempotentrepository<string> idempotentrepository
idempotentrepository<string>  resolvemessageidrepository routecontext
objecthelper notnull idempotentrepository     this
// add as service to camelcontext so we can managed it and it ensures it will be shutdown when camel shutdowns
routecontext getcamelcontext   addservice idempotentrepository
expression expression   getexpression   createexpression routecontext
return new idempotentconsumer expression  idempotentrepository  iseager    isskipduplicate    isremoveonfailure    childprocessor
/**
* strategy method to resolve the {@link org.apache.camel.spi.idempotentrepository} to use
*
* @param routecontext route context
* @return the repository
*/
protected idempotentrepository<?> resolvemessageidrepository routecontext routecontext
if  messageidrepositoryref    null
idempotentrepository   routecontext lookup messageidrepositoryref  idempotentrepository class
return idempotentrepository