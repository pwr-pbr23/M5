/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel blueprint
import org apache camel typeconverter
import org apache camel core osgi osgicamelcontexthelper
import org apache camel core osgi osgifactoryfinderresolver
import org apache camel core osgi osgitypeconverter
import org apache camel core osgi utils bundlecontextutils
import org apache camel core osgi utils bundledelegatingclassloader
import org apache camel impl defaultcamelcontext
import org apache camel spi factoryfinder
import org apache camel spi registry
import org osgi framework bundlecontext
import org osgi service blueprint container blueprintcontainer
import org slf4j logger
import org slf4j loggerfactory
public class blueprintcamelcontext extends defaultcamelcontext
private static final transient logger log   loggerfactory getlogger blueprintcamelcontext class
private bundlecontext bundlecontext
private blueprintcontainer blueprintcontainer
public blueprintcamelcontext
public blueprintcamelcontext bundlecontext bundlecontext  blueprintcontainer blueprintcontainer
this bundlecontext   bundlecontext
this blueprintcontainer   blueprintcontainer
// inject common osgi
osgicamelcontexthelper osgiupdate this  bundlecontext
// and these are blueprint specific
setcomponentresolver new blueprintcomponentresolver bundlecontext
setlanguageresolver new blueprintlanguageresolver bundlecontext
setdataformatresolver new blueprintdataformatresolver bundlecontext
setapplicationcontextclassloader new bundledelegatingclassloader bundlecontext getbundle
public bundlecontext getbundlecontext
return bundlecontext
public void setbundlecontext bundlecontext bundlecontext
this bundlecontext   bundlecontext
public blueprintcontainer getblueprintcontainer
return blueprintcontainer
public void setblueprintcontainer blueprintcontainer blueprintcontainer
this blueprintcontainer   blueprintcontainer
public void init   throws exception
final classloader original   thread currentthread   getcontextclassloader
try
// let's set a more suitable tccl while starting the context
thread currentthread   setcontextclassloader getapplicationcontextclassloader
maybestart
finally
thread currentthread   setcontextclassloader original
private void maybestart   throws exception
if   isstarted       isstarting
start
else
// ignore as camel is already started
log trace
public void destroy   throws exception
stop
@override
protected typeconverter createtypeconverter
// camel-3614: make sure we use a bundle context which imports org.apache.camel.impl.converter package
bundlecontext ctx   bundlecontextutils getbundlecontext getclass
if  ctx    null
ctx   bundlecontext
factoryfinder finder   new osgifactoryfinderresolver bundlecontext  resolvedefaultfactoryfinder getclassresolver
return new osgitypeconverter ctx  getinjector    finder
@override
protected registry createregistry
registry reg   new blueprintcontainerregistry getblueprintcontainer
return osgicamelcontexthelper wrapregistry this  reg  bundlecontext