/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel spring spi
import org apache camel processor
import org apache camel builder errorhandlerbuilder
import org apache camel builder errorhandlerbuilderref
import org apache camel model processordefinition
import org apache camel spi routecontext
import org apache camel spi transactedpolicy
import org apache camel util objecthelper
import org slf4j logger
import org slf4j loggerfactory
import org springframework transaction platformtransactionmanager
import org springframework transaction support transactiontemplate
/**
* wraps the processor in a spring transaction
*
* @version
*/
public class springtransactionpolicy implements transactedpolicy
private static final transient logger log   loggerfactory getlogger springtransactionpolicy class
private transactiontemplate template
private string propagationbehaviorname
private platformtransactionmanager transactionmanager
/**
* default constructor for easy spring configuration.
*/
public springtransactionpolicy
public springtransactionpolicy transactiontemplate template
this template   template
public springtransactionpolicy platformtransactionmanager transactionmanager
this transactionmanager   transactionmanager
public void beforewrap routecontext routecontext  processordefinition<?> definition
public processor wrap routecontext routecontext  processor processor
transactionerrorhandler answer
// the goal is to configure the error handler builder on the route as a transacted error handler,
// either its already a transacted or if not we replace it with a transacted one that we configure here
// and wrap the processor in the transacted error handler as we can have transacted routes that change
// propagation behavior, eg: from a required -> b -> requiresnew c (advanced use-case)
// if we should not support this we do not need to wrap the processor as we only need one transacted error handler
// find the existing error handler builder
errorhandlerbuilder builder    errorhandlerbuilder routecontext getroute   geterrorhandlerbuilder
// check if its a ref if so then do a lookup
if  builder instanceof errorhandlerbuilderref
// its a reference to a error handler so lookup the reference
errorhandlerbuilderref builderref    errorhandlerbuilderref  builder
string ref   builderref getref
// only lookup if there was explicit an error handler builder configured
// otherwise its just the "default" that has not explicit been configured
// and if so then we can safely replace that with our transacted error handler
if  errorhandlerbuilderref iserrorhandlerbuilderconfigured ref
log debug    ref
builder    errorhandlerbuilder errorhandlerbuilderref lookuperrorhandlerbuilder routecontext  ref
if  builder    null    builder supporttransacted
// already a tx error handler then we are good to go
log debug    builder
answer   createtransactionerrorhandler routecontext  processor  builder
answer setexceptionpolicy builder getexceptionpolicystrategy
// configure our answer based on the existing error handler
builder configure routecontext  answer
else
// no transaction error handler builder configure so create a temporary one as we got all
// the needed information form the configured builder anyway this allow us to use transacted
// routes anyway even though the error handler is not transactional, eg ease of configuration
if  builder    null
log debug    builder
else
log debug
transactionerrorhandlerbuilder txbuilder   new transactionerrorhandlerbuilder
txbuilder settransactiontemplate gettransactiontemplate
txbuilder setspringtransactionpolicy this
if  builder    null
// use error handlers from the configured builder
txbuilder seterrorhandlers builder geterrorhandlers
answer   createtransactionerrorhandler routecontext  processor  txbuilder
answer setexceptionpolicy txbuilder getexceptionpolicystrategy
// configure our answer based on the existing error handler
txbuilder configure routecontext  answer
// set the route to use our transacted error handler builder
routecontext getroute   seterrorhandlerbuilder txbuilder
// return with wrapped transacted error handler
return answer
protected transactionerrorhandler createtransactionerrorhandler routecontext routecontext  processor processor  errorhandlerbuilder builder
transactionerrorhandler answer
try
answer    transactionerrorhandler  builder createerrorhandler routecontext  processor
catch  exception e
throw objecthelper wrapruntimecamelexception e
return answer
public transactiontemplate gettransactiontemplate
if  template    null
objecthelper notnull transactionmanager
template   new transactiontemplate transactionmanager
if  propagationbehaviorname    null
template setpropagationbehaviorname propagationbehaviorname
return template
public void settransactiontemplate transactiontemplate template
this template   template
public void settransactionmanager platformtransactionmanager transactionmanager
this transactionmanager   transactionmanager
public platformtransactionmanager gettransactionmanager
return transactionmanager
public void setpropagationbehaviorname string propagationbehaviorname
this propagationbehaviorname   propagationbehaviorname
public string getpropagationbehaviorname
return propagationbehaviorname