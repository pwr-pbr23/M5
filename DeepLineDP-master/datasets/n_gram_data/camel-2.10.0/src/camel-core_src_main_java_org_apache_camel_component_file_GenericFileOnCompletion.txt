/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel component file
import org apache camel exchange
import org apache camel impl loggingexceptionhandler
import org apache camel spi exceptionhandler
import org apache camel spi synchronization
import org apache camel util objecthelper
import org slf4j logger
import org slf4j loggerfactory
/**
* on completion strategy that performs the required work after the {@link exchange} has been processed.
* <p/>
* the work is for example to move the processed file into a backup folder, delete the file or
* in case of processing failure do a rollback.
*
* @version
*/
public class genericfileoncompletion<t> implements synchronization
private final transient logger log   loggerfactory getlogger genericfileoncompletion class
private genericfileendpoint<t> endpoint
private genericfileoperations<t> operations
private exceptionhandler exceptionhandler
private genericfile<t> file
private string absolutefilename
public genericfileoncompletion genericfileendpoint<t> endpoint  genericfileoperations<t> operations
genericfile<t> file  string absolutefilename
this endpoint   endpoint
this operations   operations
this file   file
this absolutefilename   absolutefilename
public void oncomplete exchange exchange
oncompletion exchange
public void onfailure exchange exchange
oncompletion exchange
public exceptionhandler getexceptionhandler
if  exceptionhandler    null
exceptionhandler   new loggingexceptionhandler getclass
return exceptionhandler
public void setexceptionhandler exceptionhandler exceptionhandler
this exceptionhandler   exceptionhandler
protected void oncompletion exchange exchange
genericfileprocessstrategy<t> processstrategy   endpoint getgenericfileprocessstrategy
log debug    file  exchange
// commit or rollback
boolean committed   false
try
boolean failed   exchange isfailed
if   failed
// commit the file strategy if there was no failure or already handled by the deadletterchannel
processstrategycommit processstrategy  exchange  file
committed   true
// if we failed, then it will be handled by the rollback in the finally block below
finally
if   committed
processstrategyrollback processstrategy  exchange  file
// remove file from the in progress list as its no longer in progress
// use the original file name that was used to add it to the repository
// as the name can be different when using premove option
endpoint getinprogressrepository   remove absolutefilename
/**
* strategy when the file was processed and a commit should be executed.
*
* @param processstrategy the strategy to perform the commit
* @param exchange        the exchange
* @param file            the file processed
*/
protected void processstrategycommit genericfileprocessstrategy<t> processstrategy
exchange exchange  genericfile<t> file
if  endpoint isidempotent
// only add to idempotent repository if we could process the file
endpoint getidempotentrepository   add absolutefilename
// delete done file if used (and not noop=true)
if  endpoint getdonefilename      null     endpoint isnoop
// done file must be in same path as the original input file
string donefilename   endpoint createdonefilename absolutefilename
objecthelper notempty donefilename     endpoint
try
// delete done file
boolean deleted   operations deletefile donefilename
log trace    donefilename  deleted
if   deleted
log warn     donefilename
catch  exception e
handleexception e
try
log trace    processstrategy  file
processstrategy commit operations  endpoint  exchange  file
catch  exception e
handleexception e
/**
* strategy when the file was not processed and a rollback should be executed.
*
* @param processstrategy the strategy to perform the commit
* @param exchange        the exchange
* @param file            the file processed
*/
protected void processstrategyrollback genericfileprocessstrategy<t> processstrategy
exchange exchange  genericfile<t> file
if  log iswarnenabled
log warn     processstrategy       file
try
processstrategy rollback operations  endpoint  exchange  file
catch  exception e
handleexception e
protected void handleexception throwable t
throwable newt    t    null  ? new illegalargumentexception      t
getexceptionhandler   handleexception newt
@override
public string tostring
return