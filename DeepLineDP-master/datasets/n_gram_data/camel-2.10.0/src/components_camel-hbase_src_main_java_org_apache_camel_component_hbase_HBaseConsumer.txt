/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel component hbase
import java io ioexception
import java util linkedlist
import java util list
import java util queue
import java util set
import org apache camel exchange
import org apache camel processor
import org apache camel component hbase mapping cellmappingstrategy
import org apache camel component hbase mapping cellmappingstrategyfactory
import org apache camel component hbase model hbasecell
import org apache camel component hbase model hbasedata
import org apache camel component hbase model hbaserow
import org apache camel impl scheduledbatchpollingconsumer
import org apache camel util castutils
import org apache camel util objecthelper
import org apache hadoop hbase keyvalue
import org apache hadoop hbase client htableinterface
import org apache hadoop hbase client htablepool
import org apache hadoop hbase client result
import org apache hadoop hbase client resultscanner
import org apache hadoop hbase client scan
import org apache hadoop hbase filter filter
import org apache hadoop hbase filter filterlist
import org apache hadoop hbase filter pagefilter
import org slf4j logger
import org slf4j loggerfactory
/**
* the hbase consumer.
*/
public class hbaseconsumer extends scheduledbatchpollingconsumer
private static final logger log   loggerfactory getlogger hbaseconsumer class
private string tablename
private final hbaseendpoint endpoint
private htablepool tablepool
private hbaserow rowmodel
public hbaseconsumer hbaseendpoint endpoint  processor processor  htablepool tablepool  string tablename
super endpoint  processor
this endpoint   endpoint
this tablename   tablename
this tablepool   tablepool
this rowmodel   endpoint getrowmodel
@override
protected int poll   throws exception
htableinterface table   null
try
table   tablepool gettable tablename
shutdownrunningtask   null
pendingexchanges   0
queue<exchange> queue   new linkedlist<exchange>
scan scan   new scan
list<filter> filters   new linkedlist<filter>
if  endpoint getfilters      null
filters addall endpoint getfilters
if  maxmessagesperpoll > 0
filters add new pagefilter maxmessagesperpoll
filter compoundfilter   new filterlist filters
scan setfilter compoundfilter
if  rowmodel    null    rowmodel getcells      null
set<hbasecell> cellmodels   rowmodel getcells
for  hbasecell cellmodel   cellmodels
scan addcolumn hbasehelper gethbasefieldasbytes cellmodel getfamily     hbasehelper gethbasefieldasbytes cellmodel getqualifier
resultscanner scanner   table getscanner scan
int exchangecount   0
for  result result   scanner next     exchangecount < maxmessagesperpoll    maxmessagesperpoll <  0     result    null  result   scanner next
hbasedata data   new hbasedata
hbaserow resultrow   new hbaserow
resultrow apply rowmodel
byte row   result getrow
resultrow setid endpoint getcamelcontext   gettypeconverter   convertto rowmodel getrowtype    row
list<keyvalue> keyvalues   result list
if  keyvalues    null
for  keyvalue keyvalue   keyvalues
string qualifier   new string keyvalue getqualifier
string family   new string keyvalue getfamily
hbasecell resultcell   new hbasecell
resultcell setfamily family
resultcell setqualifier qualifier
resultcell setvalue endpoint getcamelcontext   gettypeconverter   convertto string class  keyvalue getvalue
resultrow getcells   add resultcell
data getrows   add resultrow
exchange exchange   endpoint createexchange
exchange getin   setheader cellmappingstrategyfactory strategy  cellmappingstrategyfactory body
cellmappingstrategy mappingstrategy   endpoint getcellmappingstrategyfactory   getstrategy exchange getin
mappingstrategy applyscanresults exchange getin    data
//make sure that there is a header containing the marked row ids, so that they can be deleted.
exchange getin   setheader hbaseattribute hbase_marked_row_id asheader    result getrow
queue add exchange
exchangecount
scanner close
return queue isempty   ? 0   processbatch castutils cast queue
finally
table close
@override
public int processbatch queue<object> exchanges  throws exception
int total   exchanges size
// limit if needed
if  maxmessagesperpoll > 0    total > maxmessagesperpoll
log debug    maxmessagesperpoll  total
total   maxmessagesperpoll
for  int index   0  index < total    isbatchallowed    index
// only loop if we are started (allowed to run)
exchange exchange   objecthelper cast exchange class  exchanges poll
// add current index and total as properties
exchange setproperty exchange batch_index  index
exchange setproperty exchange batch_size  total
exchange setproperty exchange batch_complete  index    total   1
// update pending number of exchanges
pendingexchanges   total   index   1
log trace    exchange
getprocessor   process exchange
if  exchange getexception      null
// if we failed then throw exception
throw exchange getexception
if  endpoint isremove
remove  byte  exchange getin   getheader hbaseattribute hbase_marked_row_id asheader
return total
/**
* delegates to the {@link hbaseremovehandler }.
*
* @param row
*/
private void remove byte row  throws ioexception
htableinterface table   null
try
table   tablepool gettable tablename
endpoint getremovehandler   remove table  row
finally
table close
public hbaserow getrowmodel
return rowmodel
public void setrowmodel hbaserow rowmodel
this rowmodel   rowmodel