/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel component websocket
import java lang reflect invocationtargetexception
import java lang reflect method
import java util enumset
import java util hashmap
import java util list
import java util map
import javax management mbeanserver
import org apache camel endpoint
import org apache camel runtimecamelexception
import org apache camel impl defaultcomponent
import org apache camel spi managementagent
import org apache camel spi managementstrategy
import org apache camel util objecthelper
import org apache camel util jsse sslcontextparameters
import org eclipse jetty http ssl sslcontextfactory
import org eclipse jetty jmx mbeancontainer
import org eclipse jetty server connector
import org eclipse jetty server dispatchertype
import org eclipse jetty server handler
import org eclipse jetty server server
import org eclipse jetty server sessionmanager
import org eclipse jetty server handler contexthandlercollection
import org eclipse jetty server handler handlercollection
import org eclipse jetty server handler handlerwrapper
import org eclipse jetty server nio selectchannelconnector
import org eclipse jetty server session hashsessionmanager
import org eclipse jetty server session sessionhandler
import org eclipse jetty server ssl sslconnector
import org eclipse jetty server ssl sslselectchannelconnector
import org eclipse jetty servlet defaultservlet
import org eclipse jetty servlet filterholder
import org eclipse jetty servlet servletcontexthandler
import org eclipse jetty servlet servletholder
import org eclipse jetty servlets crossoriginfilter
import org eclipse jetty util resource resource
import org eclipse jetty util thread queuedthreadpool
import org eclipse jetty util thread threadpool
import org slf4j logger
import org slf4j loggerfactory
public class websocketcomponent extends defaultcomponent
protected static final logger log   loggerfactory getlogger websocketcomponent class
protected static final hashmap<string  connectorref> connectors   new hashmap<string  connectorref>
protected sslcontextparameters sslcontextparameters
protected mbeancontainer mbcontainer
protected threadpool threadpool
protected integer port   9292
protected integer minthreads
protected integer maxthreads
protected boolean enablejmx
protected string host
protected string staticresources
protected server staticresourcesserver
protected string sslkeypassword
protected string sslpassword
protected string sslkeystore
/**
* map for storing servlets. {@link websocketcomponentservlet} is identified by pathspec {@link string}.
*/
private map<string  websocketcomponentservlet> servlets   new hashmap<string  websocketcomponentservlet>
class connectorref
server server
connector connector
websocketcomponentservlet servlet
int refcount
public connectorref server server  connector connector  websocketcomponentservlet servlet
this server   server
this connector   connector
this servlet   servlet
increment
}
public int increment
return   refcount
}
public int decrement
return   refcount
}
public int getrefcount
return refcount
}
}
public websocketcomponent
}
/**
* connects the url specified on the endpoint to the specified processor.
*/
public void connect websocketproducerconsumer prodcon  throws exception
server server   null
websocketendpoint endpoint   prodcon getendpoint
string connectorkey   getconnectorkey endpoint
synchronized  connectors
connectorref connectorref   connectors get connectorkey
if  connectorref    null
connector connector
if  endpoint getsslcontextparameters      null
connector   getsslsocketconnector endpoint getsslcontextparameters
} else {
connector   new selectchannelconnector
}
log trace    connector getname
if  endpoint getport      null
connector setport endpoint getport
} else {
connector setport port
}
if  endpoint gethost      null
connector sethost endpoint gethost
} else {
connector sethost host
}
// create server and add connector
server   createserver
if  endpoint isenablejmx
enablejmx server
}
server addconnector connector
// create servletcontexthandler
servletcontexthandler context   createcontext server  connector  endpoint gethandlers
server sethandler context
// apply cors (http://www.w3.org/tr/cors/)
applycrossoriginfiltering endpoint  context
// create static resources
if  endpoint getstaticresources      null
server   createstaticresourcesserver server  context  endpoint getstaticresources
}
// don't provide a servlet object as producer/consumer will create them later on
connectorref   new connectorref server  connector  null
// must enable session before we start
if  endpoint issessionsupport
enablesessionsupport connectorref server  connectorkey
}
log info    connector gethost    connector getport
connectorref server start
connectors put connectorkey  connectorref
} else {
connectorref increment
}
// check the session support
if  endpoint issessionsupport
enablesessionsupport connectorref server  connectorkey
}
if  prodcon instanceof websocketconsumer
// connect websocket consumer, to servlet
connectorref servlet connect  websocketconsumer  prodcon
}
}
}
/**
* disconnects the url specified on the endpoint from the specified
* processor.
*/
public void disconnect websocketproducerconsumer prodcon  throws exception
// if the connector is not needed anymore then stop it
websocketendpoint endpoint   prodcon getendpoint
string connectorkey   getconnectorkey endpoint
synchronized  connectors
connectorref connectorref   connectors get connectorkey
if  connectorref    null
if  connectorref decrement      0
connectorref server removeconnector connectorref connector
if  connectorref connector    null
// static server may not have set a connector
connectorref connector stop
}
connectorref server stop
connectors remove connectorkey
// camel controls the lifecycle of these entities so remove the
// registered mbeans when camel is done with the managed objects.
if  mbcontainer    null
mbcontainer removebean connectorref server
mbcontainer removebean connectorref connector
}
}
if  prodcon instanceof websocketconsumer
connectorref servlet disconnect  websocketconsumer  prodcon
}
}
}
}
public synchronized mbeancontainer getmbcontainer
// if null, provide the default implementation.
if  mbcontainer    null
mbeanserver mbs   null
final managementstrategy mstrategy   this getcamelcontext   getmanagementstrategy
final managementagent magent   mstrategy getmanagementagent
if  magent    null
mbs   magent getmbeanserver
}
if  mbs    null
mbcontainer   new mbeancontainer mbs
startmbcontainer
} else {
log warn
}
}
return this mbcontainer
}
@override
protected endpoint createendpoint string uri  string remaining  map<string  object> parameters  throws exception
sslcontextparameters sslcontextparameters   resolveandremovereferenceparameter parameters     sslcontextparameters class
boolean enablejmx   getandremoveparameter parameters     boolean class
string staticresources   getandremoveparameter parameters     string class
int port   extractportnumber remaining
string host   extracthostname remaining
websocketendpoint endpoint   new websocketendpoint this  uri  remaining  parameters
if  enablejmx    null
endpoint setenablejmx enablejmx
} else {
endpoint setenablejmx isenablejmx
}
/*
if (sslcontextparameters == null) {
sslcontextparameters = this.sslcontextparameters;
} */
// prefer to use endpoint configured over component configured
if (sslcontextparameters == null) {
// fallback to component configured
sslcontextparameters   getsslcontextparameters
}
if  sslcontextparameters    null
endpoint setsslcontextparameters sslcontextparameters
}
// prefer to use endpoint configured over component configured
if  staticresources    null
// fallback to component configured
staticresources   getstaticresources
}
if  staticresources    null
endpoint setstaticresources staticresources
}
endpoint setsslcontextparameters sslcontextparameters
endpoint setport port
endpoint sethost host
setproperties endpoint  parameters
return endpoint
}
protected server createserver   throws exception
server server   new server
contexthandlercollection collection   new contexthandlercollection
server sethandler collection
// configure thread pool if min/max given
if  minthreads    null    maxthreads    null
if  getthreadpool      null
throw new illegalargumentexception     this
}
queuedthreadpool qtp   new queuedthreadpool
if  minthreads    null
qtp setminthreads minthreads intvalue
}
if  maxthreads    null
qtp setmaxthreads maxthreads intvalue
}
// let the thread names indicate they are from the server
qtp setname     objecthelper getidentityhashcode server
try
qtp start
catch  exception e
throw new runtimecamelexception     qtp  e
}
server setthreadpool qtp
}
if  getthreadpool      null
server setthreadpool getthreadpool
}
return server
}
protected server createstaticresourcesserver server server  servletcontexthandler context  string home  throws exception
context setcontextpath
sessionmanager sm   new hashsessionmanager
sessionhandler sh   new sessionhandler sm
context setsessionhandler sh
if  home    null
string resources   home split
if  log isdebugenabled
log debug     resources       resources
}
if  resources equals
context setbaseresource new jettyclasspathresource getcamelcontext   getclassresolver    resources
else if  resources equals
context setbaseresource resource newresource resources
}
defaultservlet defaultservlet   new defaultservlet
servletholder holder   new servletholder defaultservlet
// avoid file locking on windows
// http://stackoverflow.com/questions/184312/how-to-make-jetty-dynamically-load-static-pages
holder setinitparameter
context addservlet holder
}
server sethandler context
return server
}
protected server createstaticresourcesserver servletcontexthandler context  string host  int port  string home  throws exception
server server   new server
connector connector   new selectchannelconnector
connector sethost host
connector setport port
server addconnector connector
return createstaticresourcesserver server  context  home
}
protected websocketcomponentservlet addservlet nodesynchronization sync  websocketproducer producer  string remaining  throws exception
// get connector from one of the jetty instances to add websocket servlet
websocketendpoint endpoint   producer getendpoint
string key   getconnectorkey endpoint
connectorref connectorref   getconnectors   get key
websocketcomponentservlet servlet
if  connectorref    null
string pathspec   createpathspec remaining
servlet   servlets get pathspec
if  servlet    null
// retrieve context
servletcontexthandler context    servletcontexthandler  connectorref server gethandler
servlet   createservlet sync  pathspec  servlets  context
connectorref servlet   servlet
log debug     pathspec       key
}
return servlet
} else {
throw new exception     key
}
}
protected websocketcomponentservlet addservlet nodesynchronization sync  websocketconsumer consumer  string remaining  throws exception
// get connector from one of the jetty instances to add websocket servlet
websocketendpoint endpoint   consumer getendpoint
string key   getconnectorkey endpoint
connectorref connectorref   getconnectors   get key
websocketcomponentservlet servlet
if  connectorref    null
string pathspec   createpathspec remaining
servlet   servlets get pathspec
if  servlet    null
// retrieve context
servletcontexthandler context    servletcontexthandler  connectorref server gethandler
servlet   createservlet sync  pathspec  servlets  context
connectorref servlet   servlet
servlets put pathspec  servlet
log debug     pathspec       key
}
if  servlet getconsumer      null
servlet setconsumer consumer
}
return servlet
} else {
throw new exception     key
}
}
protected websocketcomponentservlet createservlet nodesynchronization sync  string pathspec  map<string  websocketcomponentservlet> servlets  servletcontexthandler handler
websocketcomponentservlet servlet   new websocketcomponentservlet sync
servlets put pathspec  servlet
handler addservlet new servletholder servlet   pathspec
return servlet
}
protected servletcontexthandler createcontext server server  connector connector  list<handler> handlers  throws exception
servletcontexthandler context   new servletcontexthandler server     servletcontexthandler no_security   servletcontexthandler no_sessions
context setconnectornames new string connector getname
if  handlers    null     handlers isempty
for  handler handler   handlers
if  handler instanceof handlerwrapper
handlerwrapper  handler  sethandler server gethandler
server sethandler handler
} else {
handlercollection handlercollection   new handlercollection
handlercollection addhandler server gethandler
handlercollection addhandler handler
server sethandler handlercollection
}
}
}
return context
}
/**
* starts {@link #mbcontainer} and registers the container with itself as a managed bean
* logging an error if there is a problem starting the container.
* does nothing if {@link #mbcontainer} is {@code null}.
*/
protected void startmbcontainer
if  mbcontainer    null     mbcontainer isstarted
try
mbcontainer start
// publish the container itself for consistency with
// traditional embedded jetty configurations.
mbcontainer addbean mbcontainer
catch  throwable e
log warn    e
}
}
}
private void enablesessionsupport server server  string connectorkey  throws exception
servletcontexthandler context   server getchildhandlerbyclass servletcontexthandler class
if  context getsessionhandler      null
sessionhandler sessionhandler   new sessionhandler
if  context isstarted
throw new illegalstateexception     connectorkey
} else {
context setsessionhandler sessionhandler
}
}
}
private sslconnector getsslsocketconnector sslcontextparameters sslcontextparameters  throws exception
sslselectchannelconnector sslsocketconnector   null
if  sslcontextparameters    null
sslcontextfactory sslcontextfactory   new websocketcomponentsslcontextfactory
sslcontextfactory setsslcontext sslcontextparameters createsslcontext
sslsocketconnector   new sslselectchannelconnector sslcontextfactory
} else {
sslsocketconnector   new sslselectchannelconnector
// with default null values, jetty ssl system properties
// and console will be read by jetty implementation
sslsocketconnector getsslcontextfactory   setkeymanagerpassword sslpassword
sslsocketconnector getsslcontextfactory   setkeystorepassword sslkeypassword
if  sslkeystore    null
sslsocketconnector getsslcontextfactory   setkeystorepath sslkeystore
}
}
return sslsocketconnector
}
/**
* override the key/trust store check method as it does not account for a factory that has
* a pre-configured {@link javax.net.ssl.sslcontext}.
*/
private static final class websocketcomponentsslcontextfactory extends sslcontextfactory
// this method is for jetty 7.0.x ~ 7.4.x
@suppresswarnings
public boolean checkconfig
if  getsslcontext      null
return checksslcontextfactoryconfig this
} else {
return true
}
}
// this method is for jetty 7.5.x
@override
public void checkkeystore
// here we don't check the sslcontext as it is already created
}
}
private static boolean checksslcontextfactoryconfig object instance
try
method method   instance getclass   getmethod
return  boolean  method invoke instance
catch  nosuchmethodexception ex
// ignore
catch  illegalargumentexception e
// ignore
catch  illegalaccessexception e
// ignore
catch  invocationtargetexception e
// ignore
}
return false
}
private static string createpathspec string remaining
// is not correct as it does not support to add port in the uri
//return string.format("/%s/*", remaining);
int index = remaining.indexof("/");
if (index != -1) {
return remaining.substring(index, remaining.length());
} else {
return "/" + remaining;
}
}
private int extractportnumber(string remaining) {
int index1 = remaining.indexof(":");
int index2 = remaining.indexof("/");
if ((index1 != -1) && (index2 != -1)) {
string result = remaining.substring(index1 + 1, index2);
return integer.parseint(result);
} else {
return port;
}
}
private string extracthostname(string remaining) {
int index = remaining.indexof(":");
if (index != -1) {
return remaining.substring(0, index);
} else {
return host;
}
}
private static string getconnectorkey(websocketendpoint endpoint) {
return endpoint.getprotocol() + ":" + endpoint.gethost() + ":" + endpoint.getport();
}
private void enablejmx(server server) {
mbeancontainer containertoregister = getmbcontainer();
if (containertoregister != null) {
log.info("jetty jmx extensions is enabled");
server.getcontainer().addeventlistener(containertoregister);
// since we may have many servers running, don't tie the mbeancontainer
// to a server lifecycle or we end up closing it while it is still in use.
//server.addbean(mbcontainer);
}
}
private void applycrossoriginfiltering(websocketendpoint endpoint, servletcontexthandler context) {
if (endpoint.iscrossoriginfilteron()) {
filterholder filterholder = new filterholder();
crossoriginfilter filter = new crossoriginfilter();
filterholder.setfilter(filter);
filterholder.setinitparameter("allowedorigins", endpoint.getallowedorigins());
context.addfilter(filterholder, endpoint.getfilterpath(), enumset.allof(dispatchertype.class));
}
}
// properties
// -------------------------------------------------------------------------
public string getstaticresources() {
return staticresources;
}
/**
* set a resource path for static resources (such as .html files etc).
* <p/>
* the resources can be loaded from classpath, if you prefix with <tt>classpath:</tt>,
* otherwise the resources is loaded from file system or from jar files.
* <p/>
* for example to load from root classpath use <tt>classpath:.</tt>, or
* <tt>classpath:web-inf/static</tt>
* <p/>
* if not configured (eg <tt>null</tt>) then no static resource is in use.
*
* @param staticresources the base path
*/
public void setstaticresources string staticresources
this staticresources   staticresources
}
public string gethost
return host;
}
public void sethost string host
this host   host
}
public integer getport
return port;
}
public void setport integer port
this port   port
}
public string getsslkeypassword
return sslkeypassword
}
public string getsslpassword
return sslpassword
}
public string getsslkeystore
return sslkeystore
}
public void setsslkeypassword string sslkeypassword
this sslkeypassword   sslkeypassword
}
public void setsslpassword string sslpassword
this sslpassword   sslpassword
}
public void setsslkeystore string sslkeystore
this sslkeystore   sslkeystore
}
public void setenablejmx boolean enablejmx
this enablejmx   enablejmx
}
public boolean isenablejmx
return enablejmx
}
public integer getminthreads
return minthreads
}
public void setminthreads integer minthreads
this minthreads   minthreads
}
public integer getmaxthreads
return maxthreads
}
public void setmaxthreads integer maxthreads
this maxthreads   maxthreads
}
public threadpool getthreadpool
return threadpool
}
public void setthreadpool threadpool threadpool
this threadpool   threadpool
}
public sslcontextparameters getsslcontextparameters
return sslcontextparameters
}
public void setsslcontextparameters sslcontextparameters sslcontextparameters
this sslcontextparameters   sslcontextparameters
}
public static hashmap<string  connectorref> getconnectors
return connectors
}
@override
protected void dostart   throws exception
super dostart
if  staticresources    null
// host and port must be configured
objecthelper notempty host     this
objecthelper notnull port     this
log info    new object host  port  staticresources
servletcontexthandler context   new servletcontexthandler servletcontexthandler sessions
staticresourcesserver   createstaticresourcesserver context  host  port  staticresources
staticresourcesserver start
connector connector   staticresourcesserver getconnectors
// must add static resource server to connectors in case the websocket producers/consumers
// uses the same port number, and therefore we must be part of this
connectorref ref   new connectorref staticresourcesserver  connector  null
string key       host       port
connectors put key  ref
}
}
@override
public void dostop   throws exception
super dostop
if  connectors size   > 0
for  string connectorkey   connectors keyset
connectorref connectorref   connectors get connectorkey
if  connectorref    null    connectorref getrefcount      0
connectorref server removeconnector connectorref connector
connectorref connector stop
connectorref server stop
connectorref servlet   null
}
connectors remove connectorkey
}
}
connectors clear
if  staticresourcesserver    null
log info    new object host  port  staticresources
staticresourcesserver stop
staticresourcesserver destroy
staticresourcesserver   null
}
servlets clear
}
}