/*
derby - class org.apache.derby.impl.tools.ij.util
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl tools ij
import org apache derby tools jdbcdisplayutil
import org apache derby iapi tools i18n
import java io bufferedinputstream
import java io fileinputstream
import java io filenotfoundexception
import java io inputstream
import java io ioexception
import java lang reflect invocationtargetexception
import java security accesscontroller
import java security privilegedaction
import java sql connection
import java sql drivermanager
import java sql sqlexception
import java sql sqlwarning
import java sql statement
import java sql preparedstatement
import java sql resultset
import java sql resultsetmetadata
import java sql types
import java util properties
import java util vector
import java util locale
/**
methods used to control setup for apps as
well as display some internal ij structures.
@see org.apache.derby.tools.jdbcdisplayutil
*/
public final class util implements java security privilegedaction
private static boolean is_at_least_jdbc2
boolean isatleastjdbc2
try
// need to test to see if this is
// currently jdbc 2 or jsr169.
// checking for bigdecimal doesn't work because
// bigdecimal exists in j2me/cdc/foundation 1.1
class forname
isatleastjdbc2   true
catch  throwable t
isatleastjdbc2   false
}
is_at_least_jdbc2   isatleastjdbc2
}
private static final class ds_get_conn_types      getclass      getclass
private util
//-----------------------------------------------------------------
// methods for starting up jbms
/**
* find the argument that follows the specified parameter.
*
*	@param param the parameter (e.g. "-p")
*	@param args	the argument list to consider.
*
*	@return the argument that follows the parameter, or null if not found
*/
static public string getarg string param  string args
int plocn
properties p
if  args    null  return null
for  plocn 0  plocn<args length  plocn
if  param equals args   break
}
if  plocn >   args length 1       not found or no file
return null
return args
}
/**
ij is started with "-p[r] file otherargs";
the file contains properties to control the driver and database
used to run ij, and can provide additional system properties.
<p>
getpropertyarg will look at the args and take out a "-p <file>" pair,
reading the file into the system properties.
<p>
if there was a -p without a following <file>, no action is taken.
@exception ioexception thrown if file not found
@param args	the argument list to consider.
@return true if a property item was found and loaded.
*/
static public boolean getpropertyarg string args  throws ioexception
string n
inputstream in1
properties p
if   n   getarg    args     null
in1   new fileinputstream n
in1   new bufferedinputstream in1
}
else if   n   getarg    args      null
in1   getresourceasstream n
if  in1    null  throw ijexception resourcenotfound
}
else
return false
p   system getproperties
// trim off excess whitespace in property file, if any, and
// then load those properties into 'p'.
util loadwithtrimmedvalues in1  p
return true
}
/**
ij is started with "-ca[r] file otherargs";
the file contains connection attibute properties
to pass to getconnection
<p>
getconnattributearg will look at the args and take out a
"-ca[r] <file>" pair and returning the properties
<p>
@exception ioexception thrown if file not found
@param args	the argument list to consider.
@return  properties in the file
*/
static public properties getconnattributearg string args
throws ioexception
string n
inputstream in1
properties p   new properties
if   n   getarg    args     null
in1   new fileinputstream n
in1   new bufferedinputstream in1
}
else if   n   getarg    args      null
in1   getresourceasstream n
if  in1    null  throw ijexception resourcenotfound
}
else
return null
// trim off excess whitespace in property file, if any, and
// then load those properties into 'p'.
util loadwithtrimmedvalues in1  p
return p
}
/**
convenience routine to qualify a resource name with "ij.defaultpackagename"
if it is not qualified (does not begin with a "/").
@param absolute true means return null if the name is not absolute and false
means return partial names.
*/
static string qualifyresourcename string resourcename  boolean absolute
resourcename resourcename trim
if  resourcename startswith
return resourcename
}
else
string pname   util getsystemproperty    trim
if  pname    null  return null
if   pname  endswith
resourcename   pname resourcename
else
resourcename   pname   resourcename
if  absolute     resourcename startswith
return null
else
return resourcename
}
}
/**
convenience routine to get a resource as a bufferedinputstream. if the
resourcename is not absolute (does not begin with a "/") this qualifies
the name with the "ij.defaultresourcepackage" name.
@param resourcename the name of the resource
@return a buffered stream for the resource if it exists and null otherwise.
*/
static public inputstream getresourceasstream string resourcename
final class c   util class
final string resource   qualifyresourcename resourcename true
if  resource    null
return null
inputstream is    inputstream  accesscontroller doprivileged new privilegedaction
public object run
inputstream locis
c getresourceasstream resource
return locis
}
}
if  is    null
is   new bufferedinputstream is  utilmain bufferedfilesize
return is
}
/**
return the name of the ij command file or null if none is
specified. the command file may be proceeded with -f flag on
the command line. alternatively, the command file may be
specified without a -f flag. in this case we assume the first
unknown argument is the command file.
<p>
this should only be called after calling invalidargs.
<p>
if there is no such argument, a null is returned.
@param args	the argument list to consider.
@return the name of the first argument not preceded by "-p",
null if none found.
@exception ioexception thrown if file not found
*/
static public string getfilearg string args  throws ioexception
string filename
int flocn
boolean foundp   false
if  args    null  return null
if   filename getarg   args    null  return filename
//
//the first unknown arg is the file
for  int ix 0  ix < args length  ix
if args equals
args equals
args equals
args equals
args equals
args equals
ix      skip the parameter to these args
else
return args
return null
}
/**
return the name of a resource containing input commands or
null iff none has been specified.
*/
static public string getinputresourcenamearg string args
return getarg    args
}
/**
verify the ij line arguments command arguments. also used to detect --help.
@return true if the args are invalid
<ul>
<li>only legal argument provided.
<li>only specify a quantity once.
</ul>
*/
static public boolean invalidargs string args
int countsupported   0
boolean haveinput   false
for  int ix 0  ix < args length  ix
//
//if the arguemnt is a supported flag skip the flags argument
if  haveinput     args equals       args equals
haveinput   true
ix
if  ix >  args length  return true
}
else if   args equals       args equals
args equals       args equals
// next arg is the file/resource name
ix
if  ix >  args length  return true
else if  args equals       return true
//
//assume the first unknown arg is a file name.
else if   haveinput
haveinput   true
}
else
return true
}
}
return false
}
/**
* print a usage message for invocations of main().
*/
static void usage localizedoutput out
out println
localizedresource getmessage
out flush
}
private static final class string_p       getclass
private static final class int_p     integer type
/**
* sets up a data source with values specified in ij.datasource.* properties or
* passed as parameters of this method
*
* @param ds datasource object
* @param dbname database name
* @param firsttime if firsttime is false, ij.datasource.createdatabase and ij.datasource.databasename
* properties will not be used. the value in parameter dbname will be used instead of
* ij.datasource.databasename.
*
* @throws exception
*/
static public void setupdatasource object ds string dbname boolean firsttime  throws exception
// loop over set methods on datasource object, if there is a property
// then call the method with corresponding value. call setcreatedatabase based on
//parameter create.
java lang reflect method methods   ds getclass   getmethods
for  int i   0  i < methods length  i
java lang reflect method m   methods
string name   m getname
if  name startswith        name length   >   length
//check if setcreatedatabase has to be called based on create parameter
if name equals        firsttime
continue
string property   name substring   length        setxyyyzwww
property     property substring 0 1  tolowercase java util locale english   property substring 1      xyyyzwww
string value   util getsystemproperty property
if name equals        firsttime
value   dbname
if  value    null
try
// call string method
m invoke ds  new object  value
catch  throwable ignore
// failed, assume it's an integer parameter
m invoke ds  new object  integer valueof value
}
}
}
}
}
/**
* returns a connection obtained using the datasource. this method will be called when ij.datasource
* property is set. it uses ij.datasource.* properties to get details for the connection.
*
* @param dsname data source name
* @param user user name
* @param password password
* @param dbname database name
* @param firsttime indicates if the method is called first time. this is passed to setupdatasource
* method.
*
* @throws sqlexception
*/
public static connection getdatasourceconnection string dsname string user string password
string dbname boolean firsttime  throws sqlexception
// get a new proxied connection through datasource
object ds   null     really javax sql datasource
try
class dc   class forname dsname
ds   dc newinstance
// set datasource properties
setupdatasource ds dbname firsttime
// java method call "by hand" {  con = ds.getconnection(); }
// or con = ds.getconnection(user, password)
java lang reflect method m
user    null ? dc getmethod    null
dc getmethod    ds_get_conn_types
return  java sql connection  m invoke ds
user    null ? null   new string  user  password
catch  invocationtargetexception ite
if  ite gettargetexception   instanceof sqlexception
throw  sqlexception  ite gettargetexception
ite printstacktrace system out
catch  exception e
e printstacktrace system out
}
return null
}
/**
this will look for the system properties "ij.driver" and "ij.database"
and return a java.sql.connection if it successfully connects.
the deprecated driver and database properties are examined first.
<p>
if no connection was possible, it will return a null.
<p>
failure to load the driver class is quietly ignored.
@param defaultdriver the driver to use if no property value found
@param defaulturl the database url to use if no property value found
@param conninfo connection attributes to pass to getconnection
@return a connection to the defaulturl if possible; null if not.
@exception sqlexception on failure to connect.
@exception classnotfoundexception on failure to load driver.
@exception instantiationexception on failure to load driver.
@exception illegalaccessexception on failure to load driver.
*/
static public connection startjbms string defaultdriver  string defaulturl
properties conninfo
throws sqlexception  classnotfoundexception  instantiationexception  illegalaccessexception
connection con   null
string drivername
string databaseurl
// deprecate the non-ij prefix.  actually, we should defer to jdbc.drivers...
drivername   util getsystemproperty
if  drivername    null  drivername   util getsystemproperty
if  drivername    null    drivername length    0  drivername   defaultdriver
if  drivername    null
util loaddriver drivername
}
string jdbcprotocol   util getsystemproperty
if  jdbcprotocol    null
util loaddriverifknown jdbcprotocol
string user   util getsystemproperty
string password   util getsystemproperty
// deprecate the non-ij prefix name
databaseurl   util getsystemproperty
if  databaseurl    null  databaseurl   util getsystemproperty
if  databaseurl    null    databaseurl length    0  databaseurl   defaulturl
if  databaseurl    null
// add protocol if might help find driver.
// if have full url, load driver for it
if  databaseurl startswith
util loaddriverifknown databaseurl
if   databaseurl startswith       jdbcprotocol    null
databaseurl   jdbcprotocol databaseurl
// update conninfo for ij system properties and
// framework network server
conninfo   updateconninfo user  password conninfo
// jdbc driver
string driver   util getsystemproperty
if  driver    null
driver
}
loaddriver driver
con   drivermanager getconnection databaseurl conninfo
return con
}
// handle datasource property
string dsname   util getsystemproperty
if  dsname    null
return null
//first connection - pass firsttime=true, dbname=null. for database name,
//value in ij.datasource.databasename will be used.
con   getdatasourceconnection dsname user password null true
return con
}
public static properties updateconninfo string user  string password  properties conninfo
string ijgetmessages   util getsystemproperty
boolean retrievemessages   false
// for jcc make sure we set it to retrieve messages
if  isjccframework
retrievemessages   true
if  ijgetmessages    null
if  ijgetmessages equals
retrievemessages   false
else
retrievemessages   true
}
if  conninfo    null
conninfo   new properties
if  retrievemessages    true
conninfo put
}
if  user    null
conninfo put   user
if  password    null
conninfo put    password
return conninfo
}
/**
utility interface that defaults driver and database to null.
@return a connection to the defaulturl if possible; null if not.
@exception sqlexception on failure to connect.
@exception classnotfoundexception on failure to load driver.
@exception instantiationexception on failure to load driver.
@exception illegalaccessexception on failure to load driver.
*/
static public connection startjbms   throws sqlexception  classnotfoundexception  instantiationexception  illegalaccessexception
return startjbms null null
}
/**
utility interface that defaults conninfo to null
<p>
@param defaultdriver the driver to use if no property value found
@param defaulturl the database url to use if no property value found
@return a connection to the defaulturl if possible; null if not.
@exception sqlexception on failure to connect.
@exception classnotfoundexception on failure to load driver.
@exception instantiationexception on failure to load driver.
@exception illegalaccessexception on failure to load driver.
*/
static public connection startjbms string defaultdriver  string defaulturl
throws sqlexception  classnotfoundexception  instantiationexception
illegalaccessexception
return startjbms defaultdriver defaulturl null
}
//-----------------------------------------------------------------
// methods for displaying and checking results
// see org.apache.derby.tools.jdbcdisplayutil for more general displays.
/**
display a vector of strings to the out stream.
*/
public static void displayvector localizedoutput out  vector v
int l = v.size();
for  int i 0 i<l i
out println v elementat i
}
/**
display a vector of statements to the out stream.
public static void displayvector(appstreamwriter out, vector v, connection conn) throws sqlexception {
int l = v.size();
appui.out.println("size="+l);
for (int i=0;i<l;i++) {
object o = v.elementat(i);
if (o instanceof integer) { // update count
jdbcdisplayutil.displayupdatecount(out,((integer)o).intvalue());
} else { // o instanceof resultset
jdbcdisplayutil.displayresults(out,(resultset)o,conn);
((resultset)o).close(); // release the result set
}
}
}
*/
/**
display a statement that takes parameters by
stuffing it with rows from the result set and
displaying each result each time through.
deal with autocommit behavior along the way.
@exception sqlexception thrown on db error
@exception ijexception thrown on ij error
*/
public static void displaymulti localizedoutput out  preparedstatement ps
resultset rs  connection conn  throws sqlexception  ijexception
boolean autocommited   false     mark if autocommit in place
boolean exec   false     mark the first time through
boolean anotherusingrow   false 	   remember if there's another row
// from using.
resultsetmetadata rsmd   rs getmetadata
int numcols   rsmd getcolumncount
/* note: we need to close the using rs first
* so that runtimestatistic gets info from
* the user query.
*/
anotherusingrow   rs next
while    autocommited    anotherusingrow
// note the first time through
if   exec
exec   true
// send a warning if additional results may be lost
if  conn getautocommit
out println localizedresource getmessage
autocommited   true
}
}
// we need to make sure we pass along the scale, because
// setobject assumes a scale of zero (beetle 4365)
for  int c 1  c< numcols  c
int sqltype   rsmd getcolumntype c
if  sqltype    types decimal
if  util is_at_least_jdbc2
ps setobject c rs getobject c
sqltype
rsmd getscale c
}
else
// in j2me there is no object that represents
// a decimal value. by default use string to
// pass values around, but for integral types
// first convert to a integral type from the decimal
// because strings like 3.4 are not convertible to
// an integral type. of course in jsr169 we have
// no way to determine the parameter types,
// parametermetadata is not supported.
// so convert as string, and on a conversion error
// try as a long.
try
ps setstring c  rs getstring c
catch  sqlexception e
// 22018 - invalid format
if    equals e getsqlstate
ps setlong c  rs getlong c
else
throw e
}
}
}
else
ps setobject c rs getobject c
sqltype
}
}
// advance in the using rs
anotherusingrow   rs next
// close the using rs when exhausted and appropriate
// note: close before the user query
if    anotherusingrow    conn getautocommit      if no more rows or if auto commit is on  close the resultset
rs close
}
/*
4. execute the statement against those parameters
*/
ps execute
jdbcdisplayutil displayresults out ps conn
/*
5. clear the parameters
*/
ps clearparameters
}
if   exec
rs close      this means  using clause didn't qualify any rows  just close the resultset associated with using clause
throw ijexception nousingresults
}
// remind: any way to look for more rsusing rows if autocommit?
// perhaps just document the behavior...
}
static final string getsystemproperty string propertyname
try
if  propertyname startswith       propertyname startswith
util u   new util
u key   propertyname
return  string  java security accesscontroller doprivileged u
}
else
return system getproperty propertyname
}
catch  securityexception se
return null
}
}
private string key
public final object run
return system getproperty key
}
/**
* read a set of properties from the received input stream, strip
* off any excess white space that exists in those property values,
* and then add those newly-read properties to the received
* properties object; not explicitly removing the whitespace here can
* lead to problems.
*
* this method exists because of the manner in which the jvm reads
* properties from file--extra spaces are ignored after a _key_, but
* if they exist at the _end_ of a property decl line (i.e. as part
* of a _value_), they are preserved, as outlined in the java api:
*
* "any whitespace after the key is skipped; if the first non-
* whitespace character after the key is = or :, then it is ignored
* and any whitespace characters after it are also skipped. all
* remaining characters on the line become part of the associated
* element string."
*
* creates final properties set consisting of 'prop' plus all
* properties loaded from 'istr' (with the extra whitespace (if any)
*  removed from all values), will be returned via the parameter.
*
* @param istr an input stream from which the new properties are to be
*  loaded (should already be initialized).
* @param prop a set of properties to which the properties from
*  istr will be added (should already be initialized).
*
* copied here to avoid dependency on an engine class.
**/
private static void loadwithtrimmedvalues inputstream istr
properties prop  throws ioexception
// load the properties from the received input stream.
properties p   new properties
p load istr
// now, trim off any excess whitespace, if any, and then
// add the properties from file to the received properties
// set.
for  java util enumeration propkeys   p propertynames
propkeys hasmoreelements
// get the value, trim off the whitespace, then store it
// in the received properties object.
string tmpkey    string propkeys nextelement
string tmpvalue   p getproperty tmpkey
tmpvalue   tmpvalue trim
prop put tmpkey  tmpvalue
}
return
}
private static final string protocoldrivers
/**
find the appropriate driver and load it, given a jdbc url.
no action if no driver known for a given url.
@param jdbcprotocol the protocol to try.
@exception classnotfoundexception if unable to
locate class for driver.
@exception instantiationexception if unable to
create an instance.
@exception illegalaccessexception if driver class constructor not visible.
*/
public static void loaddriverifknown string jdbcprotocol  throws classnotfoundexception  instantiationexception  illegalaccessexception
for  int i 0  i < protocoldrivers length  i
if  jdbcprotocol startswith protocoldrivers
loaddriver protocoldrivers
break     only want the first one
}
}
}
/**
load a driver given a class name.
@exception classnotfoundexception if unable to
locate class for driver.
@exception instantiationexception if unable to
create an instance.
@exception illegalaccessexception if driver class constructor not visible.
*/
public static void loaddriver string driverclass  throws classnotfoundexception  instantiationexception  illegalaccessexception
class forname driverclass  newinstance
}
/**
* used to determine if this is a jcc testing framework
* so that retrievemessages can be sent.  the plan is to have
* ij will retrieve messages by default and not look at the testing
* frameworks. so, ulitmately  this function will look at the driver
* rather than the framework.
*
* @return true if the framework contains net or jcc.
*/
private static boolean isjccframework
string framework   util getsystemproperty
return   framework    null
framework touppercase locale english  equals
framework touppercase locale english  indexof        1
}
/**
* selects the current schema from the given connection.
*
* as there are no way of getting current schema supported by
* all major dbms-es, this method may return null.
*
* @param theconnection  connection to get current schema for
* @return the current schema of the connection, or null if error.
*/
public static string getselectedschema connection theconnection  throws sqlexception
string schema   null
if  theconnection    null
return null
statement st   theconnection createstatement
try
if  st execute
return null
resultset rs   st getresultset
if rs  null     rs next
return null
schema   rs getstring 1
catch sqlexception e
// there are no standard way of getting schema.
// getting default schema may fail.
finally
st close
}
return schema
}
}