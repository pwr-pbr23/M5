/*
derby - class org.apache.derbybuild.splitmessages
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derbybuild
import java io
import java util
import org apache derby iapi services i18n messageservice
import org apache derby shared common reference sqlstate
public class splitmessages
/**
arg[0] is the destination directory
arg[1] is the source file.
*/
/**
*  this is the list of message ids that are shared between
*  the network client and the engine.  this is used to generate
*  a set of 'shared' messages.  this avoids us having to maintain
*  two separate message files.
*
*  note: we already assume all message ids starting with xj are shared.
*  this covers 90% of the cases.  only add ids here if you have a
*  message id that is not in the xj class.
*/
private static treeset clientmessageids   new treeset
/**
* initialize the set of message ids that the network client will use.
* <p>
* note that all message ids that start with "xj" are automatically added,
* these are just for message ids that have a different prefix.
*/
static void initclientmessageids
// add message ids that don't start with xj here
clientmessageids add sqlstate no_current_connection
clientmessageids add sqlstate not_implemented
clientmessageids add sqlstate cannot_close_active_connection
clientmessageids add sqlstate xact_savepoint_release_rollback_fail
clientmessageids add sqlstate unsupported_encoding
clientmessageids add sqlstate lang_format_exception
clientmessageids add sqlstate lang_data_type_get_mismatch
clientmessageids add sqlstate lang_data_type_set_mismatch
clientmessageids add sqlstate lang_date_syntax_exception
clientmessageids add sqlstate character_converter_not_available
clientmessageids add sqlstate lang_outside_range_for_datatype
clientmessageids add sqlstate lang_statement_closed_no_reason
clientmessageids add sqlstate lang_invalid_column_position
clientmessageids add sqlstate invalid_column_name
clientmessageids add sqlstate holdable_result_set_not_available
clientmessageids add sqlstate lang_null_into_non_null
clientmessageids add sqlstate jdbc_method_not_implemented
clientmessageids add sqlstate jdbc_method_not_supported_by_server
clientmessageids add sqlstate drda_no_autocommit_under_xa
clientmessageids add sqlstate drda_invalid_xa_state_on_commit_or_rollback
clientmessageids add sqlstate holdable_result_set_not_available
clientmessageids add sqlstate invalid_resultset_type
clientmessageids add sqlstate scroll_sensitive_not_supported
clientmessageids add sqlstate unable_to_obtain_message_text_from_server
clientmessageids add sqlstate number_of_rows_too_large_for_int
clientmessageids add sqlstate nogetconn_on_closed_pooled_connection
clientmessageids add sqlstate lob_method_on_closed_connection
clientmessageids add sqlstate query_not_qualified_for_updatable_resultset
clientmessageids add sqlstate multiple_results_on_execute_query
clientmessageids add sqlstate use_execute_update_with_no_results
clientmessageids add sqlstate lang_invalid_call_to_execute_update
clientmessageids add sqlstate lang_cant_invalidate_open_result_set
clientmessageids add sqlstate year_exceeds_maximum
clientmessageids add sqlstate lang_invalid_param_position
clientmessageids add sqlstate lang_missing_parms
clientmessageids add sqlstate lang_no_current_row
clientmessageids add sqlstate lang_stream_retrieved_already
clientmessageids add sqlstate connection_failed_on_reset
clientmessageids add sqlstate decimal_too_many_digits
clientmessageids add sqlstate numeric_overflow
clientmessageids add sqlstate unsupported_holdability_property
clientmessageids add sqlstate cancel_not_supported_by_server
clientmessageids add sqlstate lang_invalid_call_statement
clientmessageids add sqlstate loss_of_precision_exception
clientmessageids add sqlstate lang_invalid_sql_in_batch
clientmessageids add sqlstate client_result_set_not_open
clientmessageids add sqlstate cant_convert_unicode_to_ebcdic
clientmessageids add sqlstate secmech_not_supported
clientmessageids add sqlstate drda_command_not_implemented
clientmessageids add sqlstate data_type_not_supported
clientmessageids add sqlstate jdbc_driver_register
clientmessageids add sqlstate no_current_row
clientmessageids add sqlstate lang_identifier_too_long
clientmessageids add sqlstate drda_cursor_not_open
clientmessageids add sqlstate property_unsupported_change
clientmessageids add sqlstate net_invalid_jdbc_type_for_param
clientmessageids add sqlstate unrecognized_java_sql_type
clientmessageids add sqlstate net_unrecognized_jdbc_type
clientmessageids add sqlstate net_sqlcdta_invalid_for_rdbcolid
clientmessageids add sqlstate net_sqlcdta_invalid_for_pkgid
clientmessageids add sqlstate net_pgnamcsn_invalid_at_sqlam
clientmessageids add sqlstate net_vcm_vcs_lengths_invalid
clientmessageids add sqlstate lang_string_too_long
public static void main string args  throws exception
initclientmessageids
properties p   new properties
file dir   new file args
file source   new file args
file clientdir   new file args
string s   source getname
// loose the suffix
s   s substring 0  s lastindexof
// now get the locale
string locale   s substring s indexof
boolean addbase     equals locale
inputstream is   new bufferedinputstream new fileinputstream source   64   1024
p load is
is close
properties c   new properties
for  int i   0  i < 50  i
c   new properties
properties clientprops   new properties
string clientpropsfilename       locale
for  enumeration e   p keys    e hasmoreelements
string key    string  e nextelement
c put key  p getproperty key
// if we have a match, add it to the list of client messages
if   isclientmessage key
clientprops put key  p getproperty key
for  int i   0  i < 50  i
if  c size      0
continue
outputstream fos   new bufferedoutputstream
new fileoutputstream new file dir    i locale      16   1024
c save fos   string  null
fos flush
fos close
if  addbase
// add duplicate english file as the base
fos   new bufferedoutputstream
new fileoutputstream new file dir    i      16   1024
c save fos   string  null
fos flush
fos close
system out println     locale
// save the client messages (the combination of what was already
// there and what we added from the engine properties file) into
// the derby locales directory
outputstream clientoutstream   new bufferedoutputstream
new fileoutputstream new file dir  clientpropsfilename
16   1024
clientprops save clientoutstream   string null
clientoutstream flush
clientoutstream close
if   addbase
// save the english messages as the base
clientoutstream   new bufferedoutputstream
new fileoutputstream new file dir
16   1024
clientprops save clientoutstream   string null
clientoutstream flush
clientoutstream close
system out println     locale
/**
* determine if this is a message that the client is using
*
* there are some classes of ids that we assume are client messages
* (see code below for the definitive list).
*
* all other shared message ids should be added to the static array
* clientmessageids, defined at the top of this class
*/
static boolean isclientmessage string messageid
// look for message ids that we assume are likely to be used
// on the client.  these ones don't need to be explicitly added
// to clientmessageids
if   messageid startswith       messageid startswith
messageid startswith       messageid startswith
messageid startswith       messageid startswith
return true
if   clientmessageids contains messageid
return true
return false