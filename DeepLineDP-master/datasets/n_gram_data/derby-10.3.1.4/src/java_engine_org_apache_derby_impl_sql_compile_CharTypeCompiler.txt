/*
derby - class org.apache.derby.impl.sql.compile.chartypecompiler
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl sql compile
import org apache derby iapi services loader classfactory
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi services compiler localfield
import org apache derby iapi services compiler methodbuilder
import org apache derby iapi services io storedformatids
import org apache derby iapi types stringdatavalue
import org apache derby iapi types typeid
import org apache derby iapi types datatypedescriptor
import org apache derby iapi sql compile typecompiler
import org apache derby iapi reference classname
/**
* this class implements typecompiler for the sql char datatypes.
*
*/
public final class chartypecompiler extends basetypecompiler
/**
* tell whether this type (char) can be converted to the given type.
*
* @see typecompiler#convertible
*/
public boolean convertible typeid othertype  boolean fordatatypefunction
// longvarchar can only be converted from  character types
// or clob.
if  gettypeid   islongvarchartypeid
return  othertype isstringtypeid
// the double function can convert char and varchar
if  fordatatypefunction    othertype isdoubletypeid
return  gettypeid   isstringtypeid
// can't cast to char and varchar from real or double
// or binary types or xml
// all other types are ok.
if  othertype isfloatingpointtypeid      othertype isbittypeid
othertype isblobtypeid      othertype isxmltypeid
return false
return true
/**
* tell whether this type (char) is compatible with the given type.
*
* @param othertype     the typeid of the other type.
*/
public boolean compatible typeid othertype
return  othertype isstringtypeid       othertype isdatetimetimestamptypeid       gettypeid   islongvarchartypeid
/**
* tell whether this type (char) can be stored into from the given type.
*
* @param othertype     the typeid of the other type.
* @param cf            a classfactory
*/
public boolean storable typeid othertype  classfactory cf
// same rules as cast except we can't assign from numbers
if  convertible othertype false
othertype isblobtypeid
othertype isnumerictypeid
return true
/*
** if the other type is user-defined, use the java types to determine
** assignability.
*/
return usertypestorable gettypeid    othertype  cf
/** @see typecompiler#interfacename */
public string interfacename
return classname stringdatavalue
/**
* @see typecompiler#getcorrespondingprimitivetypename
*/
public string getcorrespondingprimitivetypename
/* only numerics and booleans get mapped to java primitives */
return
/**
* @see typecompiler#getcasttocharwidth
*/
public int getcasttocharwidth datatypedescriptor dts
return dts getmaximumwidth
/** @see typecompiler#getmatchingnationalchartypename */
public string getmatchingnationalchartypename
int formatid   getstoredformatidfromtypeid
switch  formatid
case storedformatids char_type_id
case storedformatids national_char_type_id
return typeid national_char_name
case storedformatids longvarchar_type_id
case storedformatids national_longvarchar_type_id
return typeid national_longvarchar_name
case storedformatids varchar_type_id
case storedformatids national_varchar_type_id
return typeid national_varchar_name
default
if  sanitymanager debug
sanitymanager throwassert
formatid
return null
string nullmethodname
int formatid   getstoredformatidfromtypeid
switch  formatid
case storedformatids char_type_id
return
case storedformatids longvarchar_type_id
return
case storedformatids national_char_type_id
return
case storedformatids national_longvarchar_type_id
return
case storedformatids national_varchar_type_id
return
case storedformatids varchar_type_id
return
default
if  sanitymanager debug
sanitymanager throwassert
formatid
return null
/**
* push the collation type if it is not collation_type_ucs_basic.
*
* @param collationtype collation type of character values.
* @return true collationtype will be pushed, false collationtype will be ignored.
*/
boolean pushcollationfordatavalue int collationtype
return collationtype    stringdatavalue collation_type_ucs_basic
string datavaluemethodname
int formatid   getstoredformatidfromtypeid
switch  formatid
case storedformatids char_type_id
return
case storedformatids longvarchar_type_id
return
case storedformatids national_char_type_id
return
case storedformatids national_longvarchar_type_id
return
case storedformatids national_varchar_type_id
return
case storedformatids varchar_type_id
return
default
if  sanitymanager debug
sanitymanager throwassert
formatid
return null