/*
derby - class org.apache.derby.jdbc.embeddedconnectionpooldatasource
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby jdbc
import java sql sqlexception
/* -- new jdbc 20 extension types --- */
import javax sql connectionpooldatasource
import javax sql pooledconnection
/**
embeddedconnectionpooldatasource is derby's connectionpooldatasource
implementation for the jdbc3.0 environment.
<p>a connectionpooldatasource is a factory for pooledconnection
objects. an object that implements this interface will typically be
registered with a jndi service.
<p>
embeddedconnectionpooldatasource automatically supports the correct jdbc specification version
for the java virtual machine's environment.
<ul>
<li> jdbc 3.0 - java 2 - jdk 1.4, j2se 5.0
</ul>
<p>embeddedconnectionpooldatasource is serializable and referenceable.
<p>see embeddeddatasource for datasource properties.
*/
public class embeddedconnectionpooldatasource extends embeddeddatasource
implements	javax sql connectionpooldatasource
private static final long serialversionuid   7852784308039674160l
/**
no-arg constructor.
*/
public embeddedconnectionpooldatasource
super
/*
* connectionpooldatasource methods
*/
/**
attempt to establish a database connection.
@return a connection to the database
@exception sqlexception if a database-access error occurs.
*/
public final pooledconnection getpooledconnection   throws sqlexception
return createpooledconnection  getuser    getpassword    false
/**
attempt to establish a database connection.
@param username the database user on whose behalf the connection is being made
@param password the user's password
@return a connection to the database
@exception sqlexception if a database-access error occurs.
*/
public final pooledconnection getpooledconnection string username
string password
throws sqlexception
return createpooledconnection  username  password  true
/**
* create and return an embedpooledconnection from this instance
* of embeddedconnectionpooldatasource.
*/
protected pooledconnection createpooledconnection  string user
string password  boolean requestpassword  throws sqlexception
/* this object (embeddedconnectionpooldatasource) is a jdbc 2
* and jdbc 3 implementation of connectionpooldatsource.  however,
* it's possible that we are running with a newer driver (esp.
* jdbc 4) in which case we should return a pooledconnection that
* implements the newer jdbc interfaces--even if "this" object
* does not itself satisfy those interfaces.  as an example, if
* we have a jdk 6 application then even though this specific
* object doesn't implement jdbc 4 (it only implements jdbc 2
* and 3), we should still return a pooledconnection object that
* *does* implement jdbc 4 because that's what a jdk 6 app
* expects.
*
* by calling "finddriver()" here we will get the appropriate
* driver for the jdk in use (ex. if using jdk 6 then finddriver()
* will return the jdbc 4 driver).  if we then ask the driver to
* give us a pooled connection, we will get a connection that
* corresponds to whatever driver/jdbc implementation is being
* used--which is what we want.  so for a jdk 6 application we
* will correctly return a jdbc 4 pooledconnection. derby-2488.
*
* this type of scenario can occur if an application that was
* previously running with an older jvm (ex. jdk 1.4/1.5) starts
* running with a newer jvm (ex. jdk 6), in which case the app
* is probably still using the "old" data source (ex. is still
* instantiating embeddedconnectionpooldatasource) instead of
* the newer one (embeddedconnectionpooldatasource40).
*/
return   driver30  finddriver    getnewpooledconnection
this  user  password  requestpassword