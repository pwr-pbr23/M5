/*
derby - class org.apache.derby.jdbc.embeddedconnectionpooldatasource40
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby jdbc
import java sql sqlexception
import javax sql connectionpooldatasource
import javax sql datasource
import javax sql pooledconnection
import org apache derby impl jdbc util
import org apache derby iapi reference sqlstate
/**
embeddedconnectionpooldatasource40 is derby's connectionpooldatasource
implementation for the jdbc4.0 environment.
<p>a connectionpooldatasource is a factory for pooledconnection
objects. an object that implements this interface will typically be
registered with a jndi service.
<p>
embeddedconnectionpooldatasource40 supports the jdbc 4.0 specification
for the j2se 6.0 java virtual machine environment. use
embeddedconnectionpooldatasource if your application runs in the
following environments:
<ul>
<li> jdbc 3.0 - java 2 - jdk 1.4, j2se 5.0
</ul>
<p>embeddedconnectionpooldatasource40 is serializable and referenceable.
<p>see embeddeddatasource40 for datasource properties.
*/
public class embeddedconnectionpooldatasource40
extends embeddedconnectionpooldatasource
implements connectionpooldatasource
/**
* returns false unless <code>interfaces</code> is implemented
*
* @param  interfaces             a class defining an interface.
* @return true                   if this implements the interface or
*                                directly or indirectly wraps an object
*                                that does.
* @throws java.sql.sqlexception  if an error occurs while determining
*                                whether this is a wrapper for an object
*                                with the given interface.
*/
public boolean iswrapperfor class<?> interfaces  throws sqlexception
return interfaces isinstance this
/**
* returns <code>this</code> if this class implements the interface
*
* @param  interfaces a class defining an interface
* @return an object that implements the interface
* @throws java.sql.sqlexption if no object if found that implements the
* interface
*/
public <t> t unwrap java lang class<t> interfaces
throws sqlexception
//derby does not implement non-standard methods on
//jdbc objects
//hence return this if this class implements the interface
//or throw an sqlexception
try
return interfaces cast this
catch  classcastexception cce
throw util generatecssqlexception sqlstate unable_to_unwrap
interfaces