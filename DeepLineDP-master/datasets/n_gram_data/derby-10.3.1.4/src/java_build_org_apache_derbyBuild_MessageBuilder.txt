/*
derby - class org.apache.derbybuild.messagebuilder
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derbybuild
import java io file
import java io filewriter
import java io ioexception
import java io printwriter
import java text messageformat
import java util arraylist
import javax xml parsers
import org w3c dom
import org apache tools ant buildexception
import org apache tools ant project
import org apache tools ant task
import org apache tools ant taskdefs echo
/**
* <p>
* this tool generates the engine's message strings (message_en.properties) as well
* the dita source for the sqlstate documentation in the derby reference guide.
* </p>
*/
public class messagebuilder extends task
/////////////////////////////////////////////////////////////////////////
//
//  constants
//
/////////////////////////////////////////////////////////////////////////
private static  final   string  tab_stop
private static  final   string  properties_boilerplate
license
as is
private static  final   string  ref_guide_boilerplate
1 0  utf 8
oasis  dtd dita reference  en
dtd reference dtd
private static  final   string  ref_guide_notes
license
as is
/////////////////////////////////////////////////////////////////////////
//
//  state
//
/////////////////////////////////////////////////////////////////////////
private string  _xmlsourcefile
private string  _propertiestargetfile
private string  _ditatargetfile
/////////////////////////////////////////////////////////////////////////
//
//  inner classes
//
/////////////////////////////////////////////////////////////////////////
/**
* <p>
* xml-wrigint wrapper around a printwriter.
* </p>
*/
public  static  final   class   xmlwriter
// if this boolean is set, then all operations are nops.
private         boolean       _vacuous
private         filewriter   _fw
private         printwriter _pw
private         arraylist    _tagstack
/**
* <p>
* special constructor for making a vacuous writer which doesn't do
* anything. this allows us to write easy-to-read dita-generating code
* that is not cluttered with "if ( documented )" conditionals.
* </p>
*/
public  xmlwriter
_vacuous   true
/**
* <p>
* create a productive writer which actually flushes text to disk.
* </p>
*/
public  xmlwriter  file file
throws ioexception
_vacuous   false
_fw   new filewriter  file
_pw   new printwriter  _fw
_tagstack   new arraylist
public  void    flush   throws ioexception
if   _vacuous     return
_pw flush
_fw flush
public  void    close   throws ioexception
if   _vacuous     return
_pw close
_fw close
/**
* <p>
* indent and write an empty tag.
* </p>
*/
public void    writeemptytag  string tag
throws ioexception
if   _vacuous     return
writeemptytag  tag
/**
* <p>
* indent and write an empty tag with attributes.
* </p>
*/
public void    writeemptytag  string tag  string attributes
throws ioexception
if   _vacuous     return
indent
if   attributes length   >0
_pw println      tag       attributes
else
_pw println      tag
/**
* <p>
* indent and write an opening tag.
* </p>
*/
public void    begintag  string tag
throws ioexception
if   _vacuous     return
begintag  tag
/**
* <p>
* indent and write an opening tag.
* </p>
*/
public void    begintag  string tag  string attributes
throws ioexception
if   _vacuous     return
indent
if  attributes length   > 0
_pw println      tag       attributes
else
_pw println      tag
_tagstack add  tag
/**
* <p>
* indent and write a closing tag.
* </p>
*/
public void    endtag
throws ioexception
if   _vacuous     return
string  tag    string  _tagstack remove  _tagstack size    1
indent
_pw println      tag
/**
* <p>
* indent and write a whole element
* </p>
*/
public void    writetextelement  string tag  string text
throws ioexception
if   _vacuous     return
writetextelement  tag     text
/**
* <p>
* indent and write a whole element
* </p>
*/
public void    writetextelement  string tag  string attributes  string text
throws ioexception
if   _vacuous     return
indent
if   attributes length   > 0
_pw print      tag       attributes
else
_pw print      tag
_pw print  text
_pw println      tag
/**
* <p>
* indent based on the depth of our tag nesting level.
* </p>
*/
public void    indent
throws ioexception
if   _vacuous     return
int     tabcount   _tagstack size
for   int i   0  i < tabcount  i       _pw write  tab_stop
/**
* <p>
* print text.
* </p>
*/
public void    println  string text
throws ioexception
if   _vacuous     return
_pw println  text
/////////////////////////////////////////////////////////////////////////
//
//  constructors
//
/////////////////////////////////////////////////////////////////////////
/**
* <p>
* let ant conjure us out of thin air.
* </p>
*/
public messagebuilder
/////////////////////////////////////////////////////////////////////////
//
//  task behavior
//
/////////////////////////////////////////////////////////////////////////
/** <p>let ant set the input file name.</p>*/
public void setxmlsourcefile  string filename     _xmlsourcefile   filename
/** <p>let ant set the file name for the message property file we will write.</p>*/
public void setpropertiestargetfile  string filename     _propertiestargetfile   filename
/** <p>let ant set the file name for the sqlstate dita file we will write.</p>*/
public void setditatargetfile  string filename     _ditatargetfile   filename
/**
* <p>
* read the xml message descriptors and output messages_en.properties
* and the dita source for the sqlstate table in the derby reference guide.
* after setting up arguments using the above setter methods, ant
* calls this method in order to run this custom task.
* </p>
*/
public  void    execute
throws buildexception
file                 source   new file  _xmlsourcefile
file                 targetproperties   new file  _propertiestargetfile
file                 targetdita   new file  _ditatargetfile
filewriter      propertiesfw   null
printwriter    propertiespw   null
xmlwriter    ditawriter   null
try
propertiesfw   new filewriter  targetproperties
propertiespw   new printwriter  propertiesfw
ditawriter   new xmlwriter  targetdita
processmessages  source  propertiespw  ditawriter
catch  exception e
throw new buildexception     e
finally
try
finishwriting  propertiesfw  propertiespw
if   ditawriter    null
ditawriter flush
ditawriter close
catch  exception ex
throw new buildexception     ex
/////////////////////////////////////////////////////////////////////////
//
//  minions to process message descriptors
//
/////////////////////////////////////////////////////////////////////////
/**
* <p>
* loop through descriptors and write appropriate output to the properties
* and dita files.
* </p>
*/
private void    processmessages  file input  printwriter propertiespw  xmlwriter ditawriter
throws exception
documentbuilderfactory  factory   documentbuilderfactory newinstance
documentbuilder              builder   factory newdocumentbuilder
document                          doc   builder parse  input
element                             root   doc getdocumentelement          framing   element
nodelist                            sections   root getelementsbytagname
propertiespw println  properties_boilerplate
ditawriter println  ref_guide_boilerplate
ditawriter begintag      rrefexcept71493  en us
ditawriter println  ref_guide_notes
ditawriter writetextelement
ditawriter begintag
ditawriter begintag
ditawriter writetextelement
conrefs dita#prod productshortname
ditawriter endtag
ditawriter begintag
processsections  propertiespw  ditawriter  sections
ditawriter endtag
ditawriter endtag
ditawriter endtag
/**
* <p>
* loop through sections in the message descriptor file..
* </p>
*/
private void    processsections  printwriter propertiespw  xmlwriter ditawriter  nodelist nodes
throws exception
int     nodecount   nodes getlength
for   int i   0  i < nodecount  i
element     node    element  nodes item  i
processsection  propertiespw  ditawriter  node
/**
* <p>
* read a section from the message descriptor file.
* </p>
*/
private void    processsection  printwriter propertiespw  xmlwriter ditawriter  element section
throws exception
boolean     documented     getfirstchild  section         null
nodelist   families   section getelementsbytagname
int             familycount   families getlength
//
// if we don't need to document this section, then we use a vacuous xmlwriter
// which nops all writes.
//
if    documented     ditawriter   new xmlwriter
for   int i   0  i < familycount  i
element     family    element  families item  i
processfamily  propertiespw  ditawriter  family
/**
* <p>
* read a family of message descriptors
* </p>
*/
private void    processfamily  printwriter propertiespw  xmlwriter ditawriter  element family
throws exception
string        title   squeezetext  getfirstchild  family
nodelist   messages   family getelementsbytagname
int              messagecount   messages getlength
ditawriter begintag
ditawriter writetextelement     title
ditawriter begintag      2
ditawriter writeemptytag      col1  1
ditawriter writeemptytag      col2  7 5
ditawriter begintag
ditawriter begintag      bottom
ditawriter writetextelement      col1
ditawriter writetextelement      col2
ditawriter endtag
ditawriter endtag
ditawriter begintag
for   int i   0  i < messagecount  i
element     message    element  messages item  i
processmessage  propertiespw  ditawriter  message
ditawriter endtag
ditawriter endtag
ditawriter endtag
/**
* <p>
* read and process a message.
* </p>
*/
private void    processmessage  printwriter propertiespw  xmlwriter ditawriter  element message
throws exception
string        name   squeezetext  getfirstchild  message
string        sqlstate   getsqlstate  name
string        rawtext   squeezetext  getfirstchild  message
string        propertytext   escapepropertiestext  rawtext
int             parametercount   countparameters  rawtext
string     args   getargs  message
if   parametercount    args length
throw new exception  name       parametercount       args length
string displaytext
if  rawtext indexof   > 0
displaytext   replacespecialchars  escapetextwithaquote  rawtext
displaytext   pluginargs  displaytext   args
else
displaytext   pluginargs  replacespecialchars  rawtext   args
ditawriter begintag
ditawriter writetextelement      col1    sqlstate
ditawriter writetextelement      col2    displaytext
ditawriter endtag
propertiespw println  name       propertytext
/**
* <p>
* convert a message handle into a sqlstate, stripping off trailing
* encodings as necessary.
* </p>
*/
private string  getsqlstate  string name
if   name length   <  5     return name
else   return name substring  0  5
/**
* <p>
* get all of the human-readable parameter names out of the message element.
* </p>
*/
private string    getargs  element message
throws exception
nodelist   args   message getelementsbytagname
int             argcount   args getlength
string    retval   new string
for   int i   0  i < argcount  i
element     arg    element  args item  i
retval   squeezetext  arg
return retval
/**
* <p>
* count the substitutable arguments in an internationalized message string.
* these arguments have the form {n} where n is a number.
* </p>
*/
private int countparameters  string text
int     argcount   0
int     argidx   0
while  true
argidx   text indexof     argidx
if   argidx >  0
argcount
argidx
else   break
return argcount
/**
* <p>
* plug arg values into parameter slots in an internationalizable message
* string.
* </p>
*/
private string  pluginargs  string message  string rawargs
int             count   rawargs length
string    cookedargs   new string
// add xml angle brackets around the args
for   int i   0  i < count  i
cookedargs       rawargs
return messageformat format  message  cookedargs
/////////////////////////////////////////////////////////////////////////
//
//  generally useful minions
//
/////////////////////////////////////////////////////////////////////////
/**
* <p>
* echo a message to the console.
* </p>
*/
private void    echo  string text
log  text  project msg_warn
/**
* <p>
* flush and close file writers.
* </p>
*/
private void    finishwriting  filewriter fw  printwriter pw
throws ioexception
if    fw    null      pw    null      return
pw flush
fw flush
pw close
fw close
////////////////////////////////////////////////////////
//
// xml minions
//
////////////////////////////////////////////////////////
private element getfirstchild  element node  string childname
throws exception
return  element  node getelementsbytagname  childname   item  0
/**
* <p>
* squeeze the text out of an element.
* </p>
*/
private string squeezetext  element node
throws exception
node        textchild   node getfirstchild
string      text   textchild getnodevalue
return text
/**
* replace a substring with some equivalent. for example, we would
* like to replace "<" with "&lt;" in the error messages.
* add any substrings you would like to replace in the code below.
* be aware that the first paramter to the replaceall() method is
* interpreted as a regular expression.
*
* @param input
*      a string that may contain substrings that we want to replace
* @return
*      output string where substrings selected for replacement have been
*      replaced.
* @see java.util.regex.pattern
*/
private static string replacespecialchars java lang string input
string output   input replaceall
output   output replaceall
return output
/**
* <p>
* replace newlines with the escape sequence needed by properties files.
* also, replace single quotes with two single quotes.
* </p>
*/
private static string escapepropertiestext  java lang string input
string output   input replaceall
output   output replaceall
return output
/**
* <p>
* replace single quotes with two single quotes.
* only needed when there are parameters with quotes.
* </p>
*/
private static string escapetextwithaquote  java lang string input
string output   input replaceall
return output