/*
derby - class org.apache.derby.iapi.sql.dictionary.routinepermsdescriptor
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi sql dictionary
import org apache derby catalog dependable
import org apache derby catalog dependablefinder
import org apache derby catalog uuid
import org apache derby iapi error standardexception
import org apache derby iapi services io storedformatids
import org apache derby iapi sql dictionary datadictionary
import org apache derby impl sql catalog dddependablefinder
/**
* this class describes rows in the sys.sysroutineperms system table, which keeps track of the routine
* (procedure and function) permissions that have been granted but not revoked.
*/
public class routinepermsdescriptor extends permissionsdescriptor
private uuid routineuuid
private string routinename
private boolean hasexecutepermission
public routinepermsdescriptor  datadictionary dd
string grantee
string grantor
uuid routineuuid
boolean hasexecutepermission  throws standardexception
super  dd  grantee  grantor
this routineuuid   routineuuid
this hasexecutepermission   hasexecutepermission
//routineuuid can be null only if the constructor with routineepermsuuid
//has been invoked.
if  routineuuid    null
routinename   dd getaliasdescriptor routineuuid  getobjectname
public routinepermsdescriptor  datadictionary dd
string grantee
string grantor
uuid routineuuid  throws standardexception
this  dd  grantee  grantor  routineuuid  true
/**
* this constructor just sets up the key fields of a routinepermsdescriptor.
*/
public routinepermsdescriptor  datadictionary dd
string grantee
string grantor  throws standardexception
this  dd  grantee  grantor   uuid  null
public routinepermsdescriptor  datadictionary dd  uuid routineepermsuuid
throws standardexception
this  dd  null  null  null  true
this oid   routineepermsuuid
public int getcatalognumber
return datadictionary sysroutineperms_catalog_num
/*----- getter functions for rowfactory ------*/
public uuid getroutineuuid     return routineuuid
public boolean gethasexecutepermission     return hasexecutepermission
public string tostring
return     getgrantee
getuuid
getgrantor
getroutineuuid
/**
* @return true iff the key part of this permissions descriptor equals the key part of another permissions
*         descriptor.
*/
public boolean equals  object other
if     other instanceof routinepermsdescriptor
return false
routinepermsdescriptor otherroutineperms    routinepermsdescriptor  other
return super keyequals  otherroutineperms
routineuuid equals  otherroutineperms routineuuid
/**
* @return the hashcode for the key part of this permissions descriptor
*/
public int hashcode
return super keyhashcode     routineuuid hashcode
/**
* @see permissionsdescriptor#checkowner
*/
public boolean checkowner string authorizationid  throws standardexception
uuid sd   getdatadictionary   getaliasdescriptor routineuuid  getschemauuid
if  getdatadictionary   getschemadescriptor sd  null  getauthorizationid   equals authorizationid
return true
else
return false
//////////////////////////////////////////////
//
// provider interface
//
//////////////////////////////////////////////
/**
* return the name of this provider.  (useful for errors.)
*
* @return string	the name of this provider.
*/
public string getobjectname
return     routinename
/**
* get the provider's type.
*
* @return char		the provider's type.
*/
public string getclasstype
return dependable routine_permission
/**
@return the stored form of this provider
@see dependable#getdependablefinder
*/
public dependablefinder getdependablefinder
return	new dddependablefinder storedformatids routine_permission_finder_v01_id