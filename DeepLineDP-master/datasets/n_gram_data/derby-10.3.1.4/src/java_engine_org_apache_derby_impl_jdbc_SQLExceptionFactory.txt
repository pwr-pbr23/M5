/*
derby - class org.apache.derby.impl.jdbc.sqlexceptionfactory
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl jdbc
import java io ioexception
import org apache derby iapi error exceptionseverity
import org apache derby iapi reference sqlstate
import org apache derby iapi error standardexception
import org apache derby iapi services i18n messageservice
import org apache derby iapi reference messageid
import java sql sqlexception
/**
*class to create sqlexception
*
*/
public class sqlexceptionfactory
/**
* method to construct sqlexception
* version specific drivers can overload this method to create
* version specific exceptions
*/
public sqlexception getsqlexception string message  string messageid
sqlexception next  int severity  throwable t  object args
return new embedsqlexception message  messageid  next  severity
t  args
/**
* unpack a sql exception, looking for an embedsqlexception which carries
* the derby messageid and args which we will serialize across drda so
* that the client can reconstitute a sqlexception with appropriate text.
* if we are running jdbc3 or jdbc2, then we hope that the passed-in
* exception is already an embedsqlexception, which carries all the
* information we need.
*/
public	sqlexception	getargumentferry sqlexception se
return se