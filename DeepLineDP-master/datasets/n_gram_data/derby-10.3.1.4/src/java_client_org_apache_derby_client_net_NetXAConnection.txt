/*
derby - class org.apache.derby.client.net.netxaconnection
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby client net
import java sql sqlexception
import javax transaction xa xaexception
import javax transaction xa xaresource
import javax transaction xa xid
import org apache derby client am sqlexception
import org apache derby client am statement
import org apache derby client clientpooledconnection
import org apache derby client am clientmessageid
import org apache derby shared common reference sqlstate
import org apache derby jdbc clientdriver
public class netxaconnection
private netconnection netcon
//---------------------constructors/finalizer---------------------------------
// for xa connections
/**
*
* the construcor for the netxaconnection. the parameter
* is set to <code>this</code> from clientxaconnection when
* it creates an instance of netxaconnection. this is then
* passed on the underlying netconnection constructor and is
* used to raise statementevents from any preparedstatement that
* would be created from that netconnection.
*
* @param netlogwriter netlogwriter object associated with this connection
* @param user         user id for this connection
* @param password     password for this connection
* @param datasource   the datasource object passed from the clientxaconnection
*                     object from which this constructor was called
* @param rmid         the resource manager id for xa connections
* @param isxaconn     true if this is a xa connection
* @param cpc          the clientpooledconnection object from which this
*                     netconnection constructor was called. this is used
*                     to pass statementevents back to the pooledconnection
*                     object
* @throws sqlexception
*
*/
public netxaconnection netlogwriter netlogwriter
string user
string password
org apache derby jdbc clientbasedatasource datasource
int rmid
boolean isxaconn
clientpooledconnection cpc  throws sqlexception
netcon   createnetconnection  netlogwriter  user  password
datasource  rmid  isxaconn cpc
checkplatformversion
}
protected void finalize   throws java lang throwable
netcon finalize
}
public void setcorrelatortoken byte crttoken
netcon crrtkn_   crttoken
}
public byte getcorrelatortoken
return netcon crrtkn_
}
void setnetxaresource netxaresource xares
netcon xares_   xares
}
public void writelocalxastart_   throws sqlexception
netcon netagent_ netconnectionrequest_ writelocalxastart netcon
}
public void readlocalxastart_   throws sqlexception
netcon netagent_ netconnectionreply_ readlocalxastart netcon
}
public void writelocalxacommit_   throws sqlexception
netcon netagent_ netconnectionrequest_ writelocalxacommit netcon
}
public void readlocalxacommit_   throws sqlexception
netcon netagent_ netconnectionreply_ readlocalxacommit netcon
}
public void writelocalxarollback_   throws sqlexception
netcon netagent_ netconnectionrequest_ writelocalxarollback netcon
}
public void readlocalxarollback_   throws sqlexception
netcon netagent_ netconnectionreply_ readlocalxarollback netcon
}
public void writetransactionstart statement statement  throws sqlexception
//kathey  remove below after checking that we don't need it.
if   netcon isxaconnection
return     not a xa connection
}
// this is a xa connection
int xastate   netcon getxastate
netcon xares_ exceptionsonxa   null
//todo: looks like this can go and also the whole client indoubttransaction code.
/*
if (xastate == xa_recover) { // in recover, clean up and go to open-idle
if (indoubttransactions_ != null) {
indoubttransactions_.clear();
indoubttransactions_ = null;
setxastate(xa_open_idle);
xastate = xa_open_idle;
}
}*/
// for derby we don't need to write transaction start for a local
//transaction.  if autocommit is off we are good to go.
return
}
public byte getuowid xid xid
netindoubttransaction indoubttxn
netindoubttransaction  netcon indoubttransactions_ get xid
if  indoubttxn    null
return null
}
byte uowid   indoubttxn getuowid
return uowid
}
public int getport xid xid
netindoubttransaction indoubttxn    netindoubttransaction  netcon indoubttransactions_ get xid
if  indoubttxn    null
return  1
}
return indoubttxn getport
}
public void writecommit   throws sqlexception
// this logic must be in sync with willautocommitgenerateflow() logic
int xastate   netcon getxastate
if  xastate    netcon xa_t0_not_associated
netcon xares_ callinfoarray_[
netcon xares_ conn_ currxacallinfooffset_
] xid_   netxaresource nullxid
writelocalxacommit_
}
}
public void readcommit   throws sqlexception
int xastate   netcon getxastate
netxacallinfo callinfo   netcon xares_ callinfoarray_
callinfo xaretval_   xaresource xa_ok     initialize xaretval
if  xastate    netcon xa_t0_not_associated
readlocalxacommit_
//todo: remove
//setxastate(xa_local);
}
if  callinfo xaretval_    xaresource xa_ok       xaretval has possible error  format it
callinfo xafunction_   netxaresource xafunc_commit
netcon xares_ xaretvalerroraccumsql callinfo  0
callinfo xaretval_   xaresource xa_ok     re initialize xaretval
throw netcon xares_ exceptionsonxa
}
}
public void writerollback   throws sqlexception
netcon xares_ callinfoarray_[
netcon xares_ conn_ currxacallinfooffset_
] xid_   netcon xares_ nullxid
writelocalxarollback_
}
public void readrollback   throws sqlexception
netxacallinfo callinfo   netcon xares_ callinfoarray_
callinfo xaretval_   xaresource xa_ok     initialize xaretval
readlocalxarollback_
if  callinfo xaretval_    xaresource xa_ok       xaretval has possible error  format it
callinfo xafunction_   netxaresource xafunc_rollback
netcon xares_ xaretvalerroraccumsql callinfo  0
callinfo xaretval_   xaresource xa_ok     re initialize xaretval
throw netcon xares_ exceptionsonxa
}
// for all xa connectiions
// todo:kathey - do we need this?
netcon setxastate netcon xa_t0_not_associated
}
/**
* returns underlying net connection
* @return netconnection
*/
public netconnection getnetconnection
return netcon
}
private void checkplatformversion   throws sqlexception
int supportedversion
supportedversion   8
if  netcon xahostversion_ >  supportedversion
// supported version, return
return
}
// unsupported version for platform
string platform   null
platform
throw new sqlexception netcon agent_ logwriter_
new clientmessageid sqlstate net_wrong_xa_version
platform  new integer supportedversion
new integer netcon xahostversion_
}
/**
*
* creates netconnection for the supported version of jdbc.
* this method can be overwritten to return netconnection
* of the supported jdbc version.
* @param netlogwriter netlogwriter object associated with this connection
* @param user         user id for this connection
* @param password     password for this connection
* @param datasource   the datasource object passed from the clientxaconnection
*                     object from which this constructor was called
* @param rmid         the resource manager id for xa connections
* @param isxaconn     true if this is a xa connection
* @param cpc          the clientpooledconnection object from which this
*                     netconnection constructor was called. this is used
*                     to pass statementevents back to the pooledconnection
*                     object
* @return netconnection
*
*/
protected netconnection createnetconnection  netlogwriter netlogwriter
string user
string password
org apache derby jdbc clientbasedatasource datasource
int rmid
boolean isxaconn
clientpooledconnection cpc  throws sqlexception
return  netconnection clientdriver getfactory   newnetconnection
netlogwriter  user  password datasource  rmid  isxaconn cpc
}
}