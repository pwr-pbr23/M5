/*
derby - class org.apache.derby.impl.sql.execute.realresultsetstatisticsfactory
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl sql execute
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi services io formatidutil
import org apache derby iapi error standardexception
import org apache derby iapi services i18n messageservice
import org apache derby iapi sql activation
import org apache derby iapi sql resultset
import org apache derby iapi sql preparedstatement
import org apache derby iapi sql execute noputresultset
import org apache derby iapi sql execute resultsetfactory
import org apache derby iapi sql execute resultsetstatisticsfactory
import org apache derby iapi store access transactioncontroller
import org apache derby impl sql execute anyresultset
import org apache derby impl sql execute currentofresultset
import org apache derby impl sql execute deleteresultset
import org apache derby impl sql execute deletecascaderesultset
import org apache derby impl sql execute deletevtiresultset
import org apache derby impl sql execute distinctscalaraggregateresultset
import org apache derby impl sql execute distinctscanresultset
import org apache derby impl sql execute groupedaggregateresultset
import org apache derby impl sql execute hashjoinresultset
import org apache derby impl sql execute hashleftouterjoinresultset
import org apache derby impl sql execute hashscanresultset
import org apache derby impl sql execute hashtableresultset
import org apache derby impl sql execute indexrowtobaserowresultset
import org apache derby impl sql execute insertresultset
import org apache derby impl sql execute insertvtiresultset
import org apache derby impl sql execute lastindexkeyresultset
import org apache derby impl sql execute materializedresultset
import org apache derby impl sql execute nestedloopjoinresultset
import org apache derby impl sql execute nestedloopleftouterjoinresultset
import org apache derby impl sql execute normalizeresultset
import org apache derby impl sql execute onceresultset
import org apache derby impl sql execute projectrestrictresultset
import org apache derby impl sql execute rowresultset
import org apache derby impl sql execute scalaraggregateresultset
import org apache derby impl sql execute scrollinsensitiveresultset
import org apache derby impl sql execute setopresultset
import org apache derby impl sql execute sortresultset
import org apache derby impl sql execute tablescanresultset
import org apache derby impl sql execute unionresultset
import org apache derby impl sql execute updateresultset
import org apache derby impl sql execute vtiresultset
import org apache derby impl sql execute dependentresultset
import org apache derby iapi sql execute runtimestatistics
import org apache derby impl sql execute rts realanyresultsetstatistics
import org apache derby impl sql execute rts realcurrentofstatistics
import org apache derby impl sql execute rts realdeleteresultsetstatistics
import org apache derby impl sql execute rts realdeletecascaderesultsetstatistics
import org apache derby impl sql execute rts realdeletevtiresultsetstatistics
import org apache derby impl sql execute rts realdistinctscalaraggregatestatistics
import org apache derby impl sql execute rts realdistinctscanstatistics
import org apache derby impl sql execute rts realgroupedaggregatestatistics
import org apache derby impl sql execute rts realhashjoinstatistics
import org apache derby impl sql execute rts realhashleftouterjoinstatistics
import org apache derby impl sql execute rts realhashscanstatistics
import org apache derby impl sql execute rts realhashtablestatistics
import org apache derby impl sql execute rts realindexrowtobaserowstatistics
import org apache derby impl sql execute rts realinsertresultsetstatistics
import org apache derby impl sql execute rts realinsertvtiresultsetstatistics
import org apache derby impl sql execute rts realjoinresultsetstatistics
import org apache derby impl sql execute rts reallastindexkeyscanstatistics
import org apache derby impl sql execute rts realmaterializedresultsetstatistics
import org apache derby impl sql execute rts realnestedloopjoinstatistics
import org apache derby impl sql execute rts realnestedloopleftouterjoinstatistics
import org apache derby impl sql execute rts realnormalizeresultsetstatistics
import org apache derby impl sql execute rts realonceresultsetstatistics
import org apache derby impl sql execute rts realprojectrestrictstatistics
import org apache derby impl sql execute rts realrowresultsetstatistics
import org apache derby impl sql execute rts realscalaraggregatestatistics
import org apache derby impl sql execute rts realscrollinsensitiveresultsetstatistics
import org apache derby impl sql execute rts realsetopresultsetstatistics
import org apache derby impl sql execute rts realsortstatistics
import org apache derby impl sql execute rts realtablescanstatistics
import org apache derby impl sql execute rts realunionresultsetstatistics
import org apache derby impl sql execute rts realupdateresultsetstatistics
import org apache derby impl sql execute rts realvtistatistics
import org apache derby impl sql execute rts resultsetstatistics
import org apache derby impl sql execute rts runtimestatisticsimpl
import org apache derby iapi reference sqlstate
import java util properties
/**
* resultsetstatisticsfactory provides a wrapper around all of
* objects associated with run time statistics.
* <p>
* this implementation of the protocol is for returning the "real"
* run time statistics.  we have modularized this so that we could
* have an implementation that just returns null for each of the
* objects should we decided to provide a configuration without
* the run time statistics feature.
*
*/
public class realresultsetstatisticsfactory
implements resultsetstatisticsfactory
//
// executionfactory interface
//
//
// resultsetstatisticsfactory interface
//
/**
@see resultsetstatisticsfactory#getruntimestatistics
*/
public runtimestatistics getruntimestatistics
activation activation
resultset rs
noputresultset subquerytrackingarray
throws standardexception
preparedstatement prestmt   activation getpreparedstatement
// if the prepared statement is null then the result set is being
// finished as a result of a activation being closed during a recompile.
// in this case statistics should not be generated.
if  prestmt    null
return null
resultsetstatistics topresultsetstatistics
if  rs instanceof noputresultset
topresultsetstatistics
getresultsetstatistics  noputresultset  rs
else
topresultsetstatistics   getresultsetstatistics rs
/* build up the info on the materialized subqueries */
int subquerytrackingarraylength
subquerytrackingarray    null  ? 0
subquerytrackingarray length
resultsetstatistics subqueryrss
new resultsetstatistics
boolean anyattached   false
for  int index   0  index < subquerytrackingarraylength  index
if  subquerytrackingarray    null
subquerytrackingarray getpointofattachment       1
subqueryrss
getresultsetstatistics subquerytrackingarray
anyattached   true
if  anyattached    false
subqueryrss   null
// get the info on all of the materialized subqueries (attachment point = -1)
return new runtimestatisticsimpl
prestmt getspsname
activation getcursorname
prestmt getsource
prestmt getcompiletimeinmillis
prestmt getparsetimeinmillis
prestmt getbindtimeinmillis
prestmt getoptimizetimeinmillis
prestmt getgeneratetimeinmillis
rs getexecutetime
prestmt getbegincompiletimestamp
prestmt getendcompiletimestamp
rs getbeginexecutiontimestamp
rs getendexecutiontimestamp
subqueryrss
topresultsetstatistics
/**
@see resultsetstatisticsfactory#getresultsetstatistics
*/
public resultsetstatistics getresultsetstatistics resultset rs
if   rs returnsrows
return getnorowsresultsetstatistics rs
else if  rs instanceof noputresultset
return getresultsetstatistics  noputresultset  rs
else
return null
public resultsetstatistics getnorowsresultsetstatistics resultset rs
resultsetstatistics retval   null
/* we need to differentiate based on instanceof in order
* to find the right constructor to call.  this is ugly,
* but if we don't do instanceof then rs is always seen as an
* interface instead of a class when we try to overload
* a method with both.
*/
if  rs instanceof insertresultset
insertresultset irs    insertresultset  rs
retval   new realinsertresultsetstatistics
irs rowcount
irs constants deferred
irs constants irgs length
irs userspecifiedbulkinsert
irs bulkinsertperformed
irs constants lockmode
transactioncontroller mode_table
irs getexecutetime
getresultsetstatistics irs savedsource
irs savedsource   null
else if  rs instanceof insertvtiresultset
insertvtiresultset ivtirs    insertvtiresultset  rs
retval   new realinsertvtiresultsetstatistics
ivtirs rowcount
ivtirs constants deferred
ivtirs getexecutetime
getresultsetstatistics ivtirs savedsource
ivtirs savedsource   null
else if  rs instanceof updateresultset
updateresultset urs    updateresultset  rs
retval   new realupdateresultsetstatistics
urs rowcount
urs constants deferred
urs constants irgs length
urs constants lockmode
transactioncontroller mode_table
urs getexecutetime
getresultsetstatistics urs savedsource
urs savedsource   null
else if  rs instanceof deletecascaderesultset
deletecascaderesultset dcrs    deletecascaderesultset  rs
int dependenttrackingarraylength
dcrs dependentresultsets    null  ? 0
dcrs dependentresultsets length
resultsetstatistics dependenttrackingarray
new resultsetstatistics
boolean anyattached   false
for  int index   0  index < dependenttrackingarraylength  index
if  dcrs dependentresultsets    null
dependenttrackingarray
getresultsetstatistics
dcrs dependentresultsets
anyattached   true
if    anyattached
dependenttrackingarray   null
retval   new realdeletecascaderesultsetstatistics
dcrs rowcount
dcrs constants deferred
dcrs constants irgs length
dcrs constants lockmode
transactioncontroller mode_table
dcrs getexecutetime
getresultsetstatistics dcrs savedsource
dependenttrackingarray
dcrs savedsource   null
else if  rs instanceof deleteresultset
deleteresultset drs    deleteresultset  rs
retval   new realdeleteresultsetstatistics
drs rowcount
drs constants deferred
drs constants irgs length
drs constants lockmode
transactioncontroller mode_table
drs getexecutetime
getresultsetstatistics drs savedsource
drs savedsource   null
else if  rs instanceof deletevtiresultset
deletevtiresultset dvtirs    deletevtiresultset  rs
retval   new realdeletevtiresultsetstatistics
dvtirs rowcount
dvtirs getexecutetime
getresultsetstatistics dvtirs savedsource
dvtirs savedsource   null
return retval
public resultsetstatistics getresultsetstatistics noputresultset rs
/* we need to differentiate based on instanceof in order
* to find the right constructor to call.  this is ugly,
* but if we don't do instanceof then rs is always seen as an
* interface instead of a class when we try to overload
* a method with both.
*/
if  rs instanceof projectrestrictresultset
projectrestrictresultset prrs    projectrestrictresultset  rs
int subquerytrackingarraylength
prrs subquerytrackingarray    null  ? 0
prrs subquerytrackingarray length
resultsetstatistics subquerytrackingarray
new resultsetstatistics
boolean anyattached   false
for  int index   0  index < subquerytrackingarraylength  index
if  prrs subquerytrackingarray    null
prrs subquerytrackingarray getpointofattachment
prrs resultsetnumber
subquerytrackingarray
getresultsetstatistics
prrs subquerytrackingarray
anyattached   true
if    anyattached
subquerytrackingarray   null
return new realprojectrestrictstatistics
prrs numopens
prrs rowsseen
prrs rowsfiltered
prrs constructortime
prrs opentime
prrs nexttime
prrs closetime
prrs resultsetnumber
prrs restrictiontime
prrs projectiontime
subquerytrackingarray
prrs restriction    null
prrs doesprojection
prrs optimizerestimatedrowcount
prrs optimizerestimatedcost
getresultsetstatistics prrs source
else if  rs instanceof sortresultset
sortresultset srs    sortresultset  rs
return new realsortstatistics
srs numopens
srs rowsseen
srs rowsfiltered
srs constructortime
srs opentime
srs nexttime
srs closetime
srs resultsetnumber
srs rowsinput
srs rowsreturned
srs distinct
srs isinsortedorder
srs sortproperties
srs optimizerestimatedrowcount
srs optimizerestimatedcost
getresultsetstatistics srs source
else if  rs instanceof distinctscalaraggregateresultset
distinctscalaraggregateresultset dsars    distinctscalaraggregateresultset  rs
return new realdistinctscalaraggregatestatistics
dsars numopens
dsars rowsseen
dsars rowsfiltered
dsars constructortime
dsars opentime
dsars nexttime
dsars closetime
dsars resultsetnumber
dsars rowsinput
dsars optimizerestimatedrowcount
dsars optimizerestimatedcost
getresultsetstatistics dsars source
else if  rs instanceof scalaraggregateresultset
scalaraggregateresultset sars    scalaraggregateresultset  rs
return new realscalaraggregatestatistics
sars numopens
sars rowsseen
sars rowsfiltered
sars constructortime
sars opentime
sars nexttime
sars closetime
sars resultsetnumber
sars singleinputrow
sars rowsinput
sars optimizerestimatedrowcount
sars optimizerestimatedcost
getresultsetstatistics sars source
else if  rs instanceof groupedaggregateresultset
groupedaggregateresultset gars    groupedaggregateresultset  rs
return new realgroupedaggregatestatistics
gars numopens
gars rowsseen
gars rowsfiltered
gars constructortime
gars opentime
gars nexttime
gars closetime
gars resultsetnumber
gars rowsinput
gars hasdistinctaggregate
gars isinsortedorder
gars sortproperties
gars optimizerestimatedrowcount
gars optimizerestimatedcost
getresultsetstatistics gars source
else if  rs instanceof tablescanresultset
boolean instantaneouslocks   false
tablescanresultset tsrs    tablescanresultset  rs
string startposition   null
string stopposition   null
string isolationlevel    null
string lockstring   null
string lockrequeststring   null
switch  tsrs isolationlevel
case transactioncontroller isolation_serializable
isolationlevel
messageservice gettextmessage
sqlstate lang_serializable
break
case transactioncontroller isolation_repeatable_read
isolationlevel
messageservice gettextmessage
sqlstate lang_repeatable_read
break
case transactioncontroller isolation_read_committed_noholdlock
instantaneouslocks   true
//fall through
case transactioncontroller isolation_read_committed
isolationlevel   messageservice gettextmessage
sqlstate lang_read_committed
break
case transactioncontroller isolation_read_uncommitted
isolationlevel
messageservice gettextmessage
sqlstate lang_read_uncommitted
break
if  tsrs forupdate
lockstring   messageservice gettextmessage
sqlstate lang_exclusive
else
if  instantaneouslocks
lockstring   messageservice gettextmessage
sqlstate lang_instantaneous_share
else
lockstring   messageservice gettextmessage
sqlstate lang_share
switch  tsrs lockmode
case transactioncontroller mode_table
// resolve: not sure this will really work, as we
// are tacking together english words to make a phrase.
// will this work in other languages?
lockrequeststring   lockstring
messageservice gettextmessage
sqlstate lang_table
break
case transactioncontroller mode_record
// resolve: not sure this will really work, as we
// are tacking together english words to make a phrase.
// will this work in other languages?
lockrequeststring   lockstring
messageservice gettextmessage
sqlstate lang_row
break
if  tsrs indexname    null
/* start and stop position strings will be non-null
* if the tsrs has been closed.  otherwise, we go off
* and build the strings now.
*/
startposition   tsrs startpositionstring
if  startposition    null
startposition   tsrs printstartposition
stopposition   tsrs stoppositionstring
if  stopposition    null
stopposition   tsrs printstopposition
return new
realtablescanstatistics
tsrs numopens
tsrs rowsseen
tsrs rowsfiltered
tsrs constructortime
tsrs opentime
tsrs nexttime
tsrs closetime
tsrs resultsetnumber
tsrs tablename
tsrs usersuppliedoptimizeroverrides
tsrs indexname
tsrs isconstraint
tsrs printqualifiers tsrs qualifiers
tsrs getscanproperties
startposition
stopposition
isolationlevel
lockrequeststring
tsrs rowsperread
tsrs coarserlock
tsrs optimizerestimatedrowcount
tsrs optimizerestimatedcost
else if  rs instanceof lastindexkeyresultset
lastindexkeyresultset lrs    lastindexkeyresultset  rs
string isolationlevel    null
string lockrequeststring   null
switch  lrs isolationlevel
case transactioncontroller isolation_serializable
isolationlevel
messageservice gettextmessage
sqlstate lang_serializable
break
case transactioncontroller isolation_repeatable_read
isolationlevel
messageservice gettextmessage
sqlstate lang_repeatable_read
break
case transactioncontroller isolation_read_committed_noholdlock
case transactioncontroller isolation_read_committed
isolationlevel   messageservice gettextmessage
sqlstate lang_read_committed
break
case transactioncontroller isolation_read_uncommitted
isolationlevel   messageservice gettextmessage
sqlstate lang_read_uncommitted
break
switch  lrs lockmode
case transactioncontroller mode_table
lockrequeststring   messageservice gettextmessage
sqlstate lang_share_table
break
case transactioncontroller mode_record
lockrequeststring   messageservice gettextmessage
sqlstate lang_share_row
break
return new reallastindexkeyscanstatistics
lrs numopens
lrs constructortime
lrs opentime
lrs nexttime
lrs closetime
lrs resultsetnumber
lrs tablename
lrs indexname
isolationlevel
lockrequeststring
lrs optimizerestimatedrowcount
lrs optimizerestimatedcost
else if  rs instanceof hashleftouterjoinresultset
hashleftouterjoinresultset hlojrs
hashleftouterjoinresultset  rs
return new realhashleftouterjoinstatistics
hlojrs numopens
hlojrs rowsseen
hlojrs rowsfiltered
hlojrs constructortime
hlojrs opentime
hlojrs nexttime
hlojrs closetime
hlojrs resultsetnumber
hlojrs rowsseenleft
hlojrs rowsseenright
hlojrs rowsreturned
hlojrs restrictiontime
hlojrs optimizerestimatedrowcount
hlojrs optimizerestimatedcost
hlojrs usersuppliedoptimizeroverrides
getresultsetstatistics
hlojrs leftresultset
getresultsetstatistics
hlojrs rightresultset
hlojrs emptyrightrowsreturned
else if  rs instanceof nestedloopleftouterjoinresultset
nestedloopleftouterjoinresultset nllojrs
nestedloopleftouterjoinresultset  rs
return new realnestedloopleftouterjoinstatistics
nllojrs numopens
nllojrs rowsseen
nllojrs rowsfiltered
nllojrs constructortime
nllojrs opentime
nllojrs nexttime
nllojrs closetime
nllojrs resultsetnumber
nllojrs rowsseenleft
nllojrs rowsseenright
nllojrs rowsreturned
nllojrs restrictiontime
nllojrs optimizerestimatedrowcount
nllojrs optimizerestimatedcost
nllojrs usersuppliedoptimizeroverrides
getresultsetstatistics
nllojrs leftresultset
getresultsetstatistics
nllojrs rightresultset
nllojrs emptyrightrowsreturned
else if  rs instanceof hashjoinresultset
hashjoinresultset hjrs    hashjoinresultset  rs
return new realhashjoinstatistics
hjrs numopens
hjrs rowsseen
hjrs rowsfiltered
hjrs constructortime
hjrs opentime
hjrs nexttime
hjrs closetime
hjrs resultsetnumber
hjrs rowsseenleft
hjrs rowsseenright
hjrs rowsreturned
hjrs restrictiontime
hjrs onerowrightside
hjrs optimizerestimatedrowcount
hjrs optimizerestimatedcost
hjrs usersuppliedoptimizeroverrides
getresultsetstatistics
hjrs leftresultset
getresultsetstatistics
hjrs rightresultset
else if  rs instanceof nestedloopjoinresultset
nestedloopjoinresultset nljrs    nestedloopjoinresultset  rs
return new realnestedloopjoinstatistics
nljrs numopens
nljrs rowsseen
nljrs rowsfiltered
nljrs constructortime
nljrs opentime
nljrs nexttime
nljrs closetime
nljrs resultsetnumber
nljrs rowsseenleft
nljrs rowsseenright
nljrs rowsreturned
nljrs restrictiontime
nljrs onerowrightside
nljrs optimizerestimatedrowcount
nljrs optimizerestimatedcost
nljrs usersuppliedoptimizeroverrides
getresultsetstatistics
nljrs leftresultset
getresultsetstatistics
nljrs rightresultset
else if  rs instanceof indexrowtobaserowresultset
indexrowtobaserowresultset irtbrrs
indexrowtobaserowresultset  rs
return new realindexrowtobaserowstatistics
irtbrrs numopens
irtbrrs rowsseen
irtbrrs rowsfiltered
irtbrrs constructortime
irtbrrs opentime
irtbrrs nexttime
irtbrrs closetime
irtbrrs resultsetnumber
irtbrrs indexname
irtbrrs accessedheapcols
irtbrrs optimizerestimatedrowcount
irtbrrs optimizerestimatedcost
getresultsetstatistics
irtbrrs source
else if  rs instanceof rowresultset
rowresultset rrs    rowresultset  rs
return new realrowresultsetstatistics
rrs numopens
rrs rowsseen
rrs rowsfiltered
rrs constructortime
rrs opentime
rrs nexttime
rrs closetime
rrs resultsetnumber
rrs rowsreturned
rrs optimizerestimatedrowcount
rrs optimizerestimatedcost
else if  rs instanceof setopresultset
setopresultset srs    setopresultset  rs
return new realsetopresultsetstatistics
srs getoptype
srs numopens
srs rowsseen
srs rowsfiltered
srs constructortime
srs opentime
srs nexttime
srs closetime
srs getresultsetnumber
srs getrowsseenleft
srs getrowsseenright
srs getrowsreturned
srs optimizerestimatedrowcount
srs optimizerestimatedcost
getresultsetstatistics srs getleftsourceinput
getresultsetstatistics srs getrightsourceinput
else if  rs instanceof unionresultset
unionresultset urs    unionresultset rs
return new realunionresultsetstatistics
urs numopens
urs rowsseen
urs rowsfiltered
urs constructortime
urs opentime
urs nexttime
urs closetime
urs resultsetnumber
urs rowsseenleft
urs rowsseenright
urs rowsreturned
urs optimizerestimatedrowcount
urs optimizerestimatedcost
getresultsetstatistics urs source1
getresultsetstatistics urs source2
else if  rs instanceof anyresultset
anyresultset ars    anyresultset  rs
return new realanyresultsetstatistics
ars numopens
ars rowsseen
ars rowsfiltered
ars constructortime
ars opentime
ars nexttime
ars closetime
ars resultsetnumber
ars subquerynumber
ars pointofattachment
ars optimizerestimatedrowcount
ars optimizerestimatedcost
getresultsetstatistics ars source
else if  rs instanceof onceresultset
onceresultset ors    onceresultset  rs
return new realonceresultsetstatistics
ors numopens
ors rowsseen
ors rowsfiltered
ors constructortime
ors opentime
ors nexttime
ors closetime
ors resultsetnumber
ors subquerynumber
ors pointofattachment
ors optimizerestimatedrowcount
ors optimizerestimatedcost
getresultsetstatistics ors source
else if  rs instanceof normalizeresultset
normalizeresultset nrs    normalizeresultset  rs
return new realnormalizeresultsetstatistics
nrs numopens
nrs rowsseen
nrs rowsfiltered
nrs constructortime
nrs opentime
nrs nexttime
nrs closetime
nrs resultsetnumber
nrs optimizerestimatedrowcount
nrs optimizerestimatedcost
getresultsetstatistics nrs source
else if  rs instanceof materializedresultset
materializedresultset mrs    materializedresultset  rs
return new realmaterializedresultsetstatistics
mrs numopens
mrs rowsseen
mrs rowsfiltered
mrs constructortime
mrs opentime
mrs nexttime
mrs closetime
mrs createtctime
mrs fetchtctime
mrs resultsetnumber
mrs optimizerestimatedrowcount
mrs optimizerestimatedcost
getresultsetstatistics mrs source
else if  rs instanceof scrollinsensitiveresultset
scrollinsensitiveresultset sirs    scrollinsensitiveresultset  rs
return new realscrollinsensitiveresultsetstatistics
sirs numopens
sirs rowsseen
sirs rowsfiltered
sirs constructortime
sirs opentime
sirs nexttime
sirs closetime
sirs numfromhashtable
sirs numtohashtable
sirs resultsetnumber
sirs optimizerestimatedrowcount
sirs optimizerestimatedcost
getresultsetstatistics sirs source
else if  rs instanceof currentofresultset
currentofresultset cors    currentofresultset  rs
return new realcurrentofstatistics
cors numopens
cors rowsseen
cors rowsfiltered
cors constructortime
cors opentime
cors nexttime
cors closetime
cors resultsetnumber
else if  rs instanceof hashscanresultset
boolean instantaneouslocks   false
hashscanresultset hsrs    hashscanresultset  rs
string startposition   null
string stopposition   null
string isolationlevel    null
string lockstring   null
switch  hsrs isolationlevel
case transactioncontroller isolation_serializable
isolationlevel
messageservice gettextmessage
sqlstate lang_serializable
break
case transactioncontroller isolation_repeatable_read
isolationlevel
messageservice gettextmessage
sqlstate lang_repeatable_read
break
case transactioncontroller isolation_read_committed_noholdlock
instantaneouslocks   true
//fall through
case transactioncontroller isolation_read_committed
isolationlevel   messageservice gettextmessage
sqlstate lang_read_committed
break
if  hsrs forupdate
lockstring   messageservice gettextmessage
sqlstate lang_exclusive
else
if  instantaneouslocks
lockstring   messageservice gettextmessage
sqlstate lang_instantaneous_share
else
lockstring   messageservice gettextmessage
sqlstate lang_share
switch  hsrs lockmode
case transactioncontroller mode_table
// resolve: not sure this will really work, as we
// are tacking together english words to make a phrase.
// will this work in other languages?
lockstring   lockstring
messageservice gettextmessage
sqlstate lang_table
break
case transactioncontroller mode_record
// resolve: not sure this will really work, as we
// are tacking together english words to make a phrase.
// will this work in other languages?
lockstring   lockstring
messageservice gettextmessage
sqlstate lang_row
break
if  hsrs indexname    null
/* start and stop position strings will be non-null
* if the hsrs has been closed.  otherwise, we go off
* and build the strings now.
*/
startposition   hsrs startpositionstring
if  startposition    null
startposition   hsrs printstartposition
stopposition   hsrs stoppositionstring
if  stopposition    null
stopposition   hsrs printstopposition
// distinctscanresultset is simple sub-class of
// hashscanresultset
if  rs instanceof distinctscanresultset
return new realdistinctscanstatistics
hsrs numopens
hsrs rowsseen
hsrs rowsfiltered
hsrs constructortime
hsrs opentime
hsrs nexttime
hsrs closetime
hsrs resultsetnumber
hsrs tablename
hsrs indexname
hsrs isconstraint
hsrs hashtablesize
hsrs keycolumns
hsrs printqualifiers
hsrs scanqualifiers
hsrs printqualifiers
hsrs nextqualifiers
hsrs getscanproperties
startposition
stopposition
isolationlevel
lockstring
hsrs optimizerestimatedrowcount
hsrs optimizerestimatedcost
else
return new realhashscanstatistics
hsrs numopens
hsrs rowsseen
hsrs rowsfiltered
hsrs constructortime
hsrs opentime
hsrs nexttime
hsrs closetime
hsrs resultsetnumber
hsrs tablename
hsrs indexname
hsrs isconstraint
hsrs hashtablesize
hsrs keycolumns
hsrs printqualifiers
hsrs scanqualifiers
hsrs printqualifiers
hsrs nextqualifiers
hsrs getscanproperties
startposition
stopposition
isolationlevel
lockstring
hsrs optimizerestimatedrowcount
hsrs optimizerestimatedcost
else if  rs instanceof hashtableresultset
hashtableresultset htrs    hashtableresultset  rs
int subquerytrackingarraylength
htrs subquerytrackingarray    null  ? 0
htrs subquerytrackingarray length
resultsetstatistics subquerytrackingarray
new resultsetstatistics
boolean anyattached   false
for  int index   0  index < subquerytrackingarraylength  index
if  htrs subquerytrackingarray    null
htrs subquerytrackingarray getpointofattachment
htrs resultsetnumber
subquerytrackingarray
getresultsetstatistics
htrs subquerytrackingarray
anyattached   true
if    anyattached
subquerytrackingarray   null
return new
realhashtablestatistics
htrs numopens
htrs rowsseen
htrs rowsfiltered
htrs constructortime
htrs opentime
htrs nexttime
htrs closetime
htrs resultsetnumber
htrs hashtablesize
htrs keycolumns
hashscanresultset printqualifiers
htrs nextqualifiers
htrs scanproperties
htrs optimizerestimatedrowcount
htrs optimizerestimatedcost
subquerytrackingarray
getresultsetstatistics htrs source
else if  rs instanceof vtiresultset
vtiresultset vtirs    vtiresultset  rs
return new realvtistatistics
vtirs numopens
vtirs rowsseen
vtirs rowsfiltered
vtirs constructortime
vtirs opentime
vtirs nexttime
vtirs closetime
vtirs resultsetnumber
vtirs javaclassname
vtirs optimizerestimatedrowcount
vtirs optimizerestimatedcost
else if  rs instanceof dependentresultset
boolean instantaneouslocks   false
dependentresultset dsrs    dependentresultset  rs
string startposition   null
string stopposition   null
string isolationlevel    null
string lockstring   null
string lockrequeststring   null
switch  dsrs isolationlevel
case transactioncontroller isolation_serializable
isolationlevel
messageservice gettextmessage
sqlstate lang_serializable
break
case transactioncontroller isolation_repeatable_read
isolationlevel
messageservice gettextmessage
sqlstate lang_repeatable_read
break
case transactioncontroller isolation_read_committed_noholdlock
instantaneouslocks   true
//fall through
case transactioncontroller isolation_read_committed
isolationlevel   messageservice gettextmessage
sqlstate lang_read_committed
break
case transactioncontroller isolation_read_uncommitted
isolationlevel
messageservice gettextmessage
sqlstate lang_read_uncommitted
break
if  dsrs forupdate
lockstring   messageservice gettextmessage
sqlstate lang_exclusive
else
if  instantaneouslocks
lockstring   messageservice gettextmessage
sqlstate lang_instantaneous_share
else
lockstring   messageservice gettextmessage
sqlstate lang_share
switch  dsrs lockmode
case transactioncontroller mode_table
// resolve: not sure this will really work, as we
// are tacking together english words to make a phrase.
// will this work in other languages?
lockrequeststring   lockstring
messageservice gettextmessage
sqlstate lang_table
break
case transactioncontroller mode_record
// resolve: not sure this will really work, as we
// are tacking together english words to make a phrase.
// will this work in other languages?
lockrequeststring   lockstring
messageservice gettextmessage
sqlstate lang_row
break
/* start and stop position strings will be non-null
* if the dsrs has been closed.  otherwise, we go off
* and build the strings now.
*/
startposition   dsrs startpositionstring
if  startposition    null
startposition   dsrs printstartposition
stopposition   dsrs stoppositionstring
if  stopposition    null
stopposition   dsrs printstopposition
return new
realtablescanstatistics
dsrs numopens
dsrs rowsseen
dsrs rowsfiltered
dsrs constructortime
dsrs opentime
dsrs nexttime
dsrs closetime
dsrs resultsetnumber
dsrs tablename

dsrs indexname
dsrs isconstraint
dsrs printqualifiers
dsrs getscanproperties
startposition
stopposition
isolationlevel
lockrequeststring
dsrs rowsperread
dsrs coarserlock
dsrs optimizerestimatedrowcount
dsrs optimizerestimatedcost
else
return null
//
// class interface
//
public realresultsetstatisticsfactory