/*
derby - class org.apache.derby.impl.jdbc.embedconnection40
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl jdbc
import java sql array
import java sql blob
import java sql sqlclientinfoexception
import java sql clob
import java sql connection
import java sql nclob
import java sql sqlexception
import java sql sqlxml
import java sql struct
import java util hashmap
import java util map
import java util properties
import java util enumeration
import org apache derby jdbc internaldriver
import org apache derby iapi reference sqlstate
import org apache derby iapi error standardexception
import org apache derby iapi jdbc failedproperties40
public class embedconnection40 extends embedconnection30
/** creates a new instance of embedconnection40 */
public embedconnection40 embedconnection inputconnection
super inputconnection
public embedconnection40
internaldriver driver
string url
properties info
throws sqlexception
super driver  url  info
/*
*-------------------------------------------------------
* jdbc 4.0
*-------------------------------------------------------
*/
public array createarrayof string typename  object elements
throws sqlexception
throw util notimplemented
public nclob createnclob   throws sqlexception
throw util notimplemented
public sqlxml createsqlxml   throws sqlexception
throw util notimplemented
public struct createstruct string typename  object attributes
throws sqlexception
throw util notimplemented
/**
* checks if the connection has not been closed and is still valid.
* the validity is checked by checking that the connection is not closed.
*
* @param timeout this should be the time in seconds to wait for the
* database operation used to validate the connection to complete
* (according to the jdbc4 javadoc). this is currently not supported/used.
*
* @return true if the connection is valid, false otherwise
* @exception sqlexception if the parameter value is illegal or if a
* database error has occured
*/
public boolean isvalid int timeout  throws sqlexception
// validate that the timeout has a legal value
if  timeout < 0
throw util generatecssqlexception sqlstate invalid_api_parameter
new integer timeout
// use the closed status for the connection to determine if the
// connection is valid or not
return  isclosed
/**
* <code>setclientinfo</code> will always throw a
* <code>sqlclientinfoexception</code> since derby does not support
* any properties.
*
* @param name a property key <code>string</code>
* @param value a property value <code>string</code>
* @exception sqlclientinfoexception unless both name and value are null
*/
public void setclientinfo string name  string value
throws sqlclientinfoexception
properties p   failedproperties40 makeproperties name value
try   checkifclosed
catch  sqlexception se
failedproperties40 fp   new failedproperties40 p
throw new sqlclientinfoexception se getmessage
se getsqlstate
fp getproperties
// allow null to simplify compliance testing through
// reflection, (test all methods in an interface with null
// arguments)
if  name    null    value    null
return
setclientinfo p
/**
* <code>setclientinfo</code> will throw a
* <code>sqlclientinfoexception</code> uless the <code>properties</code>
* paramenter is empty, since derby does not support any
* properties. all the property keys in the
* <code>properties</code> parameter are added to failedproperties
* of the exception thrown, with reason_unknown_property as the
* value.
*
* @param properties a <code>properties</code> object with the
* properties to set
* @exception sqlclientinfoexception unless properties parameter
* is null or empty
*/
public void setclientinfo properties properties
throws sqlclientinfoexception
failedproperties40 fp   new failedproperties40 properties
try   checkifclosed
catch  sqlexception se
throw new sqlclientinfoexception se getmessage    se getsqlstate
fp getproperties
// allow null to simplify compliance testing through
// reflection, (test all methods in an interface with null
// arguments)
// an empty properties object is meaningless, but allowed
if  properties    null    properties isempty
return
standardexception se
standardexception newexception
sqlstate property_unsupported_change
fp getfirstkey
fp getfirstvalue
throw new sqlclientinfoexception se getmessage
se getsqlstate    fp getproperties
/**
* <code>getclientinfo</code> always returns a
* <code>null string</code> since derby doesn't support
* clientinfoproperties.
*
* @param name a <code>string</code> value
* @return a <code>null string</code> value
* @exception sqlexception if the connection is closed.
*/
public string getclientinfo string name
throws sqlexception
checkifclosed
return null
/**
* <code>getclientinfo</code> always returns an empty
* <code>properties</code> object since derby doesn't support
* clientinfoproperties.
*
* @return an empty <code>properties</code> object
* @exception sqlexception if the connection is closed.
*/
public properties getclientinfo
throws sqlexception
checkifclosed
return new properties
/**
* returns the type map for this connection.
*
* @return type map for this connection
* @exception sqlexception if a database access error occurs
*/
public final map<string  class<?>> gettypemap   throws sqlexception
// this method is already implemented with a non-generic
// signature in embedconnection. we could just use that method
// directly, but then we get a compiler warning (unchecked
// cast/conversion). copy the map to avoid the compiler
// warning.
map typemap   super gettypemap
if  typemap    null  return null
map<string  class<?>> generictypemap   new hashmap<string  class<?>>
for  object key   typemap keyset
generictypemap put  string  key   class  typemap get key
return generictypemap
/**
* returns false unless <code>interfaces</code> is implemented
*
* @param  interfaces             a class defining an interface.
* @return true                   if this implements the interface or
*                                directly or indirectly wraps an object
*                                that does.
* @throws java.sql.sqlexception  if an error occurs while determining
*                                whether this is a wrapper for an object
*                                with the given interface.
*/
public boolean iswrapperfor class<?> interfaces  throws sqlexception
checkifclosed
return interfaces isinstance this
/**
* returns <code>this</code> if this class implements the interface
*
* @param  interfaces a class defining an interface
* @return an object that implements the interface
* @throws java.sql.sqlexption if no object if found that implements the
* interface
*/
public <t> t unwrap java lang class<t> interfaces
throws sqlexception
checkifclosed
//derby does not implement non-standard methods on
//jdbc objects
//hence return this if this class implements the interface
//or throw an sqlexception
try
return interfaces cast this
catch  classcastexception cce
throw newsqlexception sqlstate unable_to_unwrap interfaces