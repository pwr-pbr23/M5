/*
derby - class org.apache.derby.iapi.services.cache.classsizecrawler
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derbybuild
import org apache derby iapi services cache classsize
import java io file
import java io filewriter
import java io printwriter
import java io ioexception
import java io fileoutputstream
import java io objectoutput
import java io objectoutputstream
import java lang securityexception
import java lang classnotfoundexception
import java util hashtable
import java util enumeration
import java util calendar
import java util date
/**
* this class implements a program that catalogs the size estimate coefficients of various classes.
* @see classsize#getsizecoefficients.
*<p>
* the program is invoked as:
*<p>
* java -dws=<i>work-space</i> [-dclassdir=<i>class-dir</i>] [-dout=<i>out-file</i> [-dprefix[.<i>x</i>=<i>package-prefix</i>]] [-dverbose=true] org.apache.derby.iapi.services.cache.classsizecrawler <i>class-or-interface</i> ...<br>
*<p>
* this program gets the size coefficients for each class in the <i>class-or-interface</i> list,
* and for each class that implements an interface in the list. if there is an interface in the list
* this program crawls through the classes hierarcy, starting at points specified by the prefix
* properties, looking for classes that implement the interfaces.
*<p>
* if the <i>class-or-interface</i> list is empty then this program searches for implementations
* of org.apache.derby.iapi.types.datavaluedescriptor, and at least one prefix property
* must be specified
*<p>
* the catalog is written as a java source file
* into <i>out-file</i>, by default
* <i>work-space</i>/java/org.apache.derby.iapi.services.cache.classsizecatalog.java.
*<p>
* <i>work-space</i> is the directory containing the java and classes directories. $ws in the
* standard development environment. this property is required.
*<p>
* <i>class-dir</i> is the directory containing the compiled classes. by default it is <i>work-space</i>/classes.
*<p>
* <i>package-prefix</i> is the first part of a package name. e.g. "com.ibm.db2j.impl". at least
* one prefix property must be specified if there is an interface in the list.
*<p>
* for example:<br>
* <pre>
* <code>
* java -dws=$ws \
*      -dprefix.1=org.apache.derby.iapi.types \
*      org.apache.derby.iapi.services.cache.classsizecrawler \
*        org.apache.derby.iapi.types.datavaluedescriptor \
*        java.math.bigdecimal \
*        org.apache.derby.impl.services.cache.generic.cacheditem
*</code>
*</pre>
*/
public class classsizecrawler
public static void main  string arg
string classandinterfacelist
if arg length > 0
classandinterfacelist   arg
class interfacelist   new class
int interfacecount   0
class classlist   new class
int classcount   0
class classsizeclass   classsize class     make sure that the garbage collector does not unload it
classsize setdummycatalog
/* most of the classes we will catalog invoke classsize.estimatebasefromcatalog in
* their static initializer. this dummy the catalog out so that this will not generate
* errors. we will not actually use the classes, just examine their fields.
*/
for  int i   0  i < classandinterfacelist length  i
class cls   null
try
cls   class forname  classandinterfacelist
catch  classnotfoundexception cnfe
system err println      classandinterfacelist
system exit 1
if  cls isinterface
interfacelist   cls
else
classlist   cls
string ws   system getproperty
if  ws    null
system err println
system exit 1
stringbuffer basedir   new stringbuffer  system getproperty
if  basedir length      0
basedir append  ws
basedir append
basedir append
int basedirlength   basedir length
stringbuffer packageprefix   new stringbuffer
hashtable classsizes   new hashtable
classsizecrawler crawler   new classsizecrawler interfacelist  interfacecount  classsizes
if  interfacecount > 0
boolean gotprefix   false
// crawl through the class hierarchies for classes implementing the interfaces
for  enumeration e   system getproperties   propertynames
e hasmoreelements
string propertyname    string  e nextelement
if  propertyname equals        propertyname startswith
gotprefix   true
packageprefix setlength  0
packageprefix append  system getproperty  propertyname
basedir setlength  basedirlength
if  packageprefix length   > 0
basedir append
for  int offset   0  offset < packageprefix length    offset
char c   packageprefix charat  offset
if  c
basedir append
else
basedir append  c
crawler crawl  new file  basedir tostring     packageprefix
if    gotprefix
system err println
system err println
system exit 1
for  int i   0  i < classcount  i
crawler addclass  classlist
basedir setlength  basedirlength
string outputfilename
system getproperty     ws
try
printwriter out   new printwriter  new filewriter  outputfilename
out print
"   licensed to the apache software foundation (asf) under one or more\n" +
"   contributor license agreements.  see the notice file distributed with\n" +
"   this work for additional information regarding copyright ownership.\n" +
"   the asf licenses this file to you under the apache license, version 2.0\n" +
"   (the \"license\"); you may not use this file except in compliance with\n" +
"   the license.  you may obtain a copy of the license at\n" +
"\n" +
"      http://www.apache.org/licenses/license-2.0\n" +
"\n" +
"   unless required by applicable law or agreed to in writing, software\n" +
"   distributed under the license is distributed on an \"as is\" basis,\n" +
"   without warranties or conditions of any kind, either express or implied.\n" +
"   see the license for the specific language governing permissions and\n" +
"   limitations under the license.\n" +
out print
for  enumeration e   classsizes keys
e hasmoreelements
string classname    string  e nextelement
int coeff    int  classsizes get  classname
out print         coeff       coeff
out print
out flush
out close
catch  ioexception ioe
system err println      outputfilename
system err println      ioe getmessage
system exit 1
end of main
private class interfacelist     search for classes that implement these interfaces
private int interfacecount
private hashtable classsizes
private boolean verbose   false
private classsizecrawler  class interfacelist
int interfacecount
hashtable classsizes
this interfacelist   interfacelist
this classsizes   classsizes
this interfacecount   interfacecount
verbose   new boolean  system getproperty         booleanvalue
private void crawl  file curdir  stringbuffer classname
if  verbose
system out println      curdir getpath
try
if    curdir isdirectory
system err println      curdir getpath
system exit 1
catch  securityexception se
system err println      curdir getpath
system exit 1
string filenames   curdir list
if  classname length      0
classname append
int classnamelength   classname length
for  int fileidx   0  fileidx < filenames length  fileidx
if  filenames endswith
// strip off the ".class" suffix
string s   filenames substring  0  filenames length     6
classname append  s
class targetclass   null
string targetclassname   classname tostring
try
targetclass   class forname  targetclassname
if   targetclass isinterface
for  int interfaceidx   0  interfaceidx < interfacecount  interfaceidx
if  interfacelist isassignablefrom  targetclass
addclass  targetclass
catch  classnotfoundexception cnfe
system err println      targetclassname
system exit 1
catch  throwable t
classname setlength  classnamelength
else
file nextdir   new file  curdir  filenames
if  nextdir isdirectory
classname append  filenames
crawl  nextdir  classname
classname setlength  classnamelength
end of crawl
private void addclass  class targetclass
int coefficients   classsize getsizecoefficients  targetclass
if  verbose
system out println  targetclass getname         coefficients       coefficients
classsizes put  targetclass getname    coefficients
end of addclass
end of classsizecrawler