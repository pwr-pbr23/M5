/*
derby - class org.apache.derby.client.am.datetime
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby client am
import org apache derby shared common i18n messageutil
import org apache derby shared common reference sqlstate
import java io unsupportedencodingexception
import java util calendar
import org apache derby client net typdef
/**
* high performance converters from date/time byte encodings to jdbc date, time and timestamp objects.
* <p/>
* using this class for direct date/time conversions from bytes offers superior performance over the alternative method
* of first constructing a java string from the encoded bytes, and then using {@link java.sql.date#valueof
* java.sql.date.valueof()}, {@link java.sql.time#valueof java.sql.time.valueof()} or {@link java.sql.timestamp#valueof
* java.sql.timestamp.valueof()}.
* <p/>
*/
public class datetime
// hide the default constructor
private datetime
private static final int daterepresentationlength   10
private static final int timerepresentationlength   8
private static final int timestamprepresentationlength   26
// *********************************************************
// ********** output converters (byte[] -> class) **********
// *********************************************************
/**
* expected character representation is derby string representation of a date,
* which is in jis format: <code> yyyy-mm-dd </code>
*
* @param buffer
* @param offset
* @param recyclablecal
* @param encoding            encoding of buffer data
* @return  date translated from  buffer with specified encoding
* @throws unsupportedencodingexception
*/
public static final java sql date datebytestodate byte buffer
int offset
calendar recyclablecal
string encoding
throws unsupportedencodingexception
int year  month  day
string date   new string buffer  offset
datetime daterepresentationlength encoding
int yearindx  monthindx  dayindx
if  date charat 4
// jis format: yyyy-mm-dd.
yearindx   0
monthindx   5
dayindx   8
else
throw new java lang illegalargumentexception
sqlexception getmessageutil   gettextmessage
sqlstate lang_format_exception
int zerobase     int
// character arithmetic is used rather than
// the less efficient integer.parseint (date.substring()).
year
1000      int  date charat yearindx     zerobase
100      int  date charat yearindx   1     zerobase
10      int  date charat yearindx   2     zerobase
int  date charat yearindx   3     zerobase
month
10      int  date charat monthindx     zerobase
int  date charat monthindx   1     zerobase
1
day
10      int  date charat dayindx     zerobase
int  date charat dayindx   1     zerobase
calendar cal   getcleancalendar recyclablecal
cal set year  month  day
return new java sql date cal gettimeinmillis
/**
* expected character representation is derby string representation of time,
* which is in the format: <code> hh.mm.ss </code>
* @param buffer
* @param offset
* @param recyclablecal
* @param encoding           encoding of buffer
* @return  time translated from buffer with specified encoding
* @throws unsupportedencodingexception
*/
public static final java sql time timebytestotime byte buffer
int offset
calendar recyclablecal
string encoding
throws unsupportedencodingexception
int hour  minute  second
string time   new string buffer  offset
datetime timerepresentationlength  encoding
int zerobase     int
// compute hour.
hour
10      int  time charat 0     zerobase
int  time charat 1     zerobase
// compute minute.
minute
10      int  time charat 3     zerobase
int  time charat 4     zerobase
// compute second.
second
10      int  time charat 6     zerobase
int  time charat 7     zerobase
calendar cal   getcleancalendar recyclablecal
cal set 1970  calendar january  1  hour  minute  second
return new java sql time cal gettimeinmillis
/**
* expected character representation is derby string representation of a timestamp:
* <code>yyyy-mm-dd-hh.mm.ss.ffffff</code>.
*
* @param buffer
* @param offset
* @param recyclablecal
* @param encoding                encoding of buffer
* @return timestamp translated from buffer with specified encoding
* @throws unsupportedencodingexception
*/
public static final java sql timestamp timestampbytestotimestamp byte buffer
int offset
calendar recyclablecal
string encoding
throws unsupportedencodingexception
int year  month  day  hour  minute  second  fraction
string timestamp   new string buffer  offset
datetime timestamprepresentationlength encoding
calendar cal   getcleancalendar recyclablecal
/* java.sql.timestamp has nanosecond precision, so we have to keep
* the parsed microseconds value and use that to set nanos.
*/
int micros   parsetimestampstring timestamp  cal
java sql timestamp ts   new java sql timestamp cal gettimeinmillis
ts setnanos micros   1000
return ts
/**
* parse a string of the form <code>yyyy-mm-dd-hh.mm.ss.ffffff</code>
* and store the various fields into the received calendar object.
*
* @param timestamp timestamp value to parse, as a string.
* @param cal calendar into which to store the parsed fields.  should
*  not be null.
*
* @return the microseconds field as parsed from the timestamp string.
*  this cannot be set in the calendar object but we still want to
*  preserve the value, in case the caller needs it (for example, to
*  create a java.sql.timestamp with microsecond precision).
*/
private static int parsetimestampstring string timestamp
calendar cal
int zerobase     int
cal set calendar year
1000      int  timestamp charat 0     zerobase
100      int  timestamp charat 1     zerobase
10      int  timestamp charat 2     zerobase
int  timestamp charat 3     zerobase
cal set calendar month
10      int  timestamp charat 5     zerobase
int  timestamp charat 6     zerobase    1
cal set calendar day_of_month
10      int  timestamp charat 8     zerobase
int  timestamp charat 9     zerobase
cal set calendar hour
10      int  timestamp charat 11     zerobase
int  timestamp charat 12     zerobase
cal set calendar minute
10      int  timestamp charat 14     zerobase
int  timestamp charat 15     zerobase
cal set calendar second
10      int  timestamp charat 17     zerobase
int  timestamp charat 18     zerobase
int micros
100000      int  timestamp charat 20     zerobase
10000      int  timestamp charat 21     zerobase
1000      int  timestamp charat 22     zerobase
100      int  timestamp charat 23     zerobase
10      int  timestamp charat 24     zerobase
int  timestamp charat 25     zerobase
/* the "ffffff" that we parsed is microseconds.  in order to
* capture that information inside of the millisecond field
* we have to divide by 1000.
*/
cal set calendar millisecond  micros   1000
return micros
// ********************************************************
// ********** input converters (class -> byte[]) **********
// ********************************************************
/**
* date is converted to a char representation in jdbc date format: <code>yyyy-mm-dd</code> date format
* and then converted to bytes using utf8 encoding
* @param buffer  bytes in utf8 encoding of the date
* @param offset  write into the buffer from this offset
* @param date    date value
* @return datetime.daterepresentationlength. this is the fixed length in
* bytes taken to represent the date value
* @throws sqlexception
* @throws unsupportedencodingexception if utf8 encoding is not supported
*/
public static final int datetodatebytes byte buffer
int offset
java sql date date
throws sqlexception unsupportedencodingexception
int year   date getyear     1900
if  year > 9999
throw new sqlexception null
new clientmessageid sqlstate year_exceeds_maximum
new integer year
int month   date getmonth     1
int day   date getdate
char datechars   new char
int zerobase    int
datechars    char   year   1000   zerobase
datechars    char    year % 1000    100   zerobase
datechars    char    year % 100    10   zerobase
datechars    char   year % 10    zerobase
datechars
datechars    char   month   10   zerobase
datechars    char   month % 10   zerobase
datechars
datechars    char   day   10   zerobase
datechars    char   day % 10   zerobase
// network server expects to read the date parameter value bytes with
// utf-8 encoding.  reference - derby-1127
// see drdaconnthread.readandsetparams
byte datebytes    new string datechars   getbytes typdef utf8encoding
system arraycopy datebytes  0  buffer  offset  datetime daterepresentationlength
return datetime daterepresentationlength
/**
* java.sql.time is converted to character representation which is in jdbc time escape
* format: <code>hh:mm:ss</code>, which is the same as jis time format in derby string
* representation of a time.  the char representation is converted to bytes using utf8
* encoding.
* @param buffer  bytes in utf8 encoding of the time
* @param offset  write into the buffer from this offset
* @param time  java.sql.time value
* @return datetime.timerepresentationlength. this is the fixed length in
* bytes taken to represent the time value
* @throws unsupportedencodingexception
*/
public static final int timetotimebytes byte buffer
int offset
java sql time time
throws unsupportedencodingexception
int hour   time gethours
int minute   time getminutes
int second   time getseconds
char timechars   new char
int zerobase    int
timechars    char   hour   10   zerobase
timechars    char   hour % 10    zerobase
timechars
timechars    char   minute   10   zerobase
timechars    char   minute % 10   zerobase
timechars
timechars    char   second   10   zerobase
timechars    char   second % 10   zerobase
// network server expects to read the time parameter value bytes with
// utf-8 encoding.  reference - derby-1127
// see drdaconnthread.readandsetparams
byte timebytes    new string timechars   getbytes typdef utf8encoding
system arraycopy timebytes  0  buffer  offset  datetime timerepresentationlength
return datetime timerepresentationlength
/**
* java.sql.timestamp is converted to a character representation which is in derby string
* representation of a timestamp: <code>yyyy-mm-dd-hh.mm.ss.ffffff</code>.
* and then converted to bytes using utf8 encoding
* @param buffer  bytes in utf8 encoding of the timestamp
* @param offset  write into the buffer from this offset
* @param timestamp  timestamp value
* @return datetime.timestamprepresentationlength. this is the fixed
* length in bytes, taken to represent the timestamp value
* @throws sqlexception
* @throws unsupportedencodingexception
*/
public static final int timestamptotimestampbytes byte buffer
int offset
java sql timestamp timestamp
throws sqlexception unsupportedencodingexception
int year   timestamp getyear     1900
if  year > 9999
throw new sqlexception null
new clientmessageid sqlstate year_exceeds_maximum
new integer year
int month   timestamp getmonth     1
int day   timestamp getdate
int hour   timestamp gethours
int minute   timestamp getminutes
int second   timestamp getseconds
int microsecond   timestamp getnanos     1000
char timestampchars   new char
int zerobase    int
timestampchars    char   year   1000   zerobase
timestampchars    char    year % 1000    100   zerobase
timestampchars    char    year % 100    10   zerobase
timestampchars    char   year % 10    zerobase
timestampchars
timestampchars    char   month   10   zerobase
timestampchars    char   month % 10   zerobase
timestampchars
timestampchars    char   day   10   zerobase
timestampchars    char   day % 10   zerobase
timestampchars
timestampchars    char   hour   10   zerobase
timestampchars    char   hour % 10   zerobase
timestampchars
timestampchars    char   minute   10   zerobase
timestampchars    char   minute % 10   zerobase
timestampchars
timestampchars    char   second   10   zerobase
timestampchars    char   second % 10   zerobase
timestampchars
timestampchars    char   microsecond   100000   zerobase
timestampchars    char    microsecond % 100000    10000   zerobase
timestampchars    char    microsecond % 10000    1000   zerobase
timestampchars    char    microsecond % 1000    100   zerobase
timestampchars    char    microsecond % 100    10   zerobase
timestampchars    char   microsecond % 10   zerobase
// network server expects to read the timestamp parameter value bytes with
// utf-8 encoding.  reference - derby-1127
// see drdaconnthread.readandsetparams
byte timestampbytes    new string timestampchars   getbytes typdef utf8encoding
system arraycopy timestampbytes  0  buffer  offset  datetime timestamprepresentationlength
return datetime timestamprepresentationlength
// *********************************************************
// ******* cross output converters (byte[] -> class) *******
// *********************************************************
/**
* expected character representation is derby string representation of a date
* which is in jis format: <code> yyyy-mm-dd </code>
*
* @param buffer
* @param offset
* @param recyclablecal
* @param encoding                encoding of buffer
* @return timestamp translated from buffer with specified encoding
* @throws unsupportedencodingexception
*/
public static final java sql timestamp datebytestotimestamp byte buffer
int offset
calendar recyclablecal
string encoding
throws unsupportedencodingexception
int year  month  day
string date   new string buffer  offset  datetime daterepresentationlength
encoding
int yearindx  monthindx  dayindx
yearindx   0
monthindx   5
dayindx   8
int zerobase     int
// character arithmetic is used rather than
// the less efficient integer.parseint (date.substring()).
year
1000      int  date charat yearindx     zerobase
100      int  date charat yearindx   1     zerobase
10      int  date charat yearindx   2     zerobase
int  date charat yearindx   3     zerobase
month
10      int  date charat monthindx     zerobase
int  date charat monthindx   1     zerobase
1
day
10      int  date charat dayindx     zerobase
int  date charat dayindx   1     zerobase
calendar cal   getcleancalendar recyclablecal
cal set year  month  day  0  0  0
java sql timestamp ts   new java sql timestamp cal gettimeinmillis
ts setnanos 0
return ts
/**
*  expected character representation is derby string representation of time
* which is in the format: <code> hh.mm.ss </code>
*
* @param buffer
* @param offset
* @param recyclablecal
* @param encoding                 encoding of buffer
* @return timestamp translated from buffer with specified encoding
* @throws unsupportedencodingexception
*
*/
public static final java sql timestamp timebytestotimestamp byte buffer
int offset
calendar recyclablecal
string encoding
throws unsupportedencodingexception
int hour  minute  second
string time   new string buffer  offset
datetime timerepresentationlength  encoding
int zerobase     int
// compute hour.
hour
10      int  time charat 0     zerobase
int  time charat 1     zerobase
// compute minute.
minute
10      int  time charat 3     zerobase
int  time charat 4     zerobase
// compute second   jis format: hh:mm:ss.
second
10      int  time charat 6     zerobase
int  time charat 7     zerobase
// the sql standard specifies that the date portion of the returned
// timestamp should be set to the current date. see derby-889 for
// more details.
calendar cal   getcleancalendar recyclablecal
cal settime new java util date
// now override the time fields with the values we parsed.
cal set calendar hour_of_day  hour
cal set calendar minute  minute
cal set calendar second  second
// derby's resolution for the time type is only seconds.
cal set calendar millisecond  0
return new java sql timestamp cal gettimeinmillis
/**
* expected character representation is derby string representation of a timestamp:
* <code>yyyy-mm-dd-hh.mm.ss.ffffff</code>.
*
* @param buffer
* @param offset
* @param recyclablecal
* @param encoding             encoding of buffer
* @return date translated from buffer with specified encoding
* @throws unsupportedencodingexception
*/
public static final java sql date timestampbytestodate byte buffer
int offset
calendar recyclablecal
string encoding
throws unsupportedencodingexception
int year  month  day
string timestamp   new string buffer  offset
datetime timestamprepresentationlength  encoding
int zerobase     int
year
1000      int  timestamp charat 0     zerobase
100      int  timestamp charat 1     zerobase
10      int  timestamp charat 2     zerobase
int  timestamp charat 3     zerobase
month
10      int  timestamp charat 5     zerobase
int  timestamp charat 6     zerobase
1
day
10      int  timestamp charat 8     zerobase
int  timestamp charat 9     zerobase
calendar cal   getcleancalendar recyclablecal
cal set year  month  day
return new java sql date cal gettimeinmillis
/**
* expected character representation is derby string representation of a timestamp:
* <code>yyyy-mm-dd-hh.mm.ss.ffffff</code>.
*
* @param buffer
* @param offset
* @param recyclablecal
* @param encoding            encoding of buffer
* @return  time translated from buffer with specified encoding
* @throws unsupportedencodingexception
*/
public static final java sql time timestampbytestotime byte buffer
int offset
calendar recyclablecal
string encoding
throws  unsupportedencodingexception
/* when getting a java.sql.time object from a timestamp value we
* need to preserve the milliseconds from the timestamp.
*
* note: a derby sql time value has by definition resolution of only
* a second so its millisecond value is always zero.  however,
* java.sql.time is not a direct mapping to the sql type; rather, it's
* a jdbc type, and the jdbc java.sql.time class has a precision of
* milliseconds.  so when converting from a sql timestamp we should
* retain the millisecond precision.  derby-1816.
*
* in order to accomplish this we parse *all* fields of the timestamp
* into a calendar object, then create the java.sql.time object from
* that calendar. this allows us to preserve the sub-second resolution
* that is parsed from the timestamp.
*/
string timestamp   new string buffer  offset
datetime timestamprepresentationlength  encoding
calendar cal   getcleancalendar recyclablecal
/* note that "parsetimestampstring()" returns microseconds but we
* ignore micros because java.sql.time only has millisecond precision.
*/
parsetimestampstring timestamp  cal
/* java api indicates that the date components of a time value
* must be set to january 1, 1970. so override those values now.
*/
cal set 1970  calendar january  1
return new java sql time cal gettimeinmillis
/**
* return a clean (i.e. all values cleared out) calendar object
* that can be used for creating time, timestamp, and date objects.
* if the received calendar object is non-null, then just clear
* that and return it.
*
* @param recyclablecal calendar object to use if non-null.
*/
private static calendar getcleancalendar calendar recyclablecal
if  recyclablecal    null
recyclablecal clear
return recyclablecal
/* default gregoriancalendar initializes to current time.
* make sure we clear that out before returning, per the
* contract of this method.
*/
calendar result   new java util gregoriancalendar
result clear
return result
// *********************************************************
// ******* cross input converters (class -> byte[]) ********
// *********************************************************
/**
* java.sql.timestamp is converted to character representation that is in jdbc date escape
* format: <code>yyyy-mm-dd</code>, which is the same as jis date format in derby string representation of a date.
* and then converted to bytes using utf8 encoding.
* @param buffer
* @param offset  write into the buffer from this offset
* @param timestamp  timestamp value
* @return datetime.daterepresentationlength. this is the fixed length
* in bytes, that is taken to represent the timestamp value as a date.
* @throws sqlexception
* @throws unsupportedencodingexception
*/
public static final int timestamptodatebytes byte buffer
int offset
java sql timestamp timestamp
throws sqlexception unsupportedencodingexception
int year   timestamp getyear     1900
if  year > 9999
throw new sqlexception null
new clientmessageid sqlstate year_exceeds_maximum
new integer year
int month   timestamp getmonth     1
int day   timestamp getdate
char datechars   new char
int zerobase    int
datechars    char   year   1000   zerobase
datechars    char    year % 1000    100   zerobase
datechars    char    year % 100    10   zerobase
datechars    char   year % 10    zerobase
datechars
datechars    char   month   10   zerobase
datechars    char   month % 10   zerobase
datechars
datechars    char   day   10   zerobase
datechars    char   day % 10   zerobase
// network server expects to read the date parameter value bytes with
// utf-8 encoding.  reference - derby-1127
// see drdaconnthread.readandsetparams
byte datebytes    new string datechars   getbytes typdef utf8encoding
system arraycopy datebytes  0  buffer  offset  datetime daterepresentationlength
return datetime daterepresentationlength
/**
* java.sql.timestamp is converted to character representation in jdbc time escape format:
*  <code>hh:mm:ss</code>, which is the same as
* jis time format in derby string representation of a time. the char representation is
* then converted to bytes using utf8 encoding and written out into the buffer
* @param buffer
* @param offset  write into the buffer from this offset
* @param timestamp timestamp value
* @return datetime.timerepresentationlength. this is the fixed length
* in bytes taken to represent the timestamp value as time.
* @throws unsupportedencodingexception
*/
public static final int timestamptotimebytes byte buffer
int offset
java sql timestamp timestamp
throws unsupportedencodingexception
int hour   timestamp gethours
int minute   timestamp getminutes
int second   timestamp getseconds
char timechars   new char
int zerobase    int
timechars    char   hour   10   zerobase
timechars    char   hour % 10    zerobase
timechars
timechars    char   minute   10   zerobase
timechars    char   minute % 10   zerobase
timechars
timechars    char   second   10   zerobase
timechars    char   second % 10   zerobase
// network server expects to read the time parameter value bytes with
// utf-8 encoding.  reference - derby-1127
// see drdaconnthread.readandsetparams
byte timebytes    new string timechars   getbytes typdef utf8encoding
system arraycopy timebytes  0  buffer  offset  datetime timerepresentationlength
return datetime timerepresentationlength
/**
* java.sql.date is converted to character representation that is in derby string
* representation of a timestamp:<code>yyyy-mm-dd-hh.mm.ss.ffffff</code> and then
* converted to bytes using utf8 encoding and written out to the buffer
* @param buffer
* @param offset offset in buffer to start writing to
* @param date date value
* @return datetime.timestamprepresentationlength. this is the fixed length
* in bytes, taken to represent the timestamp value.
* @throws sqlexception
* @throws unsupportedencodingexception
*/
public static final int datetotimestampbytes byte buffer
int offset
java sql date date
throws sqlexception  unsupportedencodingexception
int year   date getyear     1900
if  year > 9999
throw new sqlexception null
new clientmessageid sqlstate year_exceeds_maximum
new integer year
int month   date getmonth     1
int day   date getdate
char timestampchars   new char
int zerobase    int
timestampchars    char   year   1000   zerobase
timestampchars    char    year % 1000    100   zerobase
timestampchars    char    year % 100    10   zerobase
timestampchars    char   year % 10    zerobase
timestampchars
timestampchars    char   month   10   zerobase
timestampchars    char   month % 10   zerobase
timestampchars
timestampchars    char   day   10   zerobase
timestampchars    char   day % 10   zerobase
timestampchars
timestampchars
timestampchars
timestampchars
timestampchars
timestampchars
timestampchars
timestampchars
timestampchars
timestampchars
timestampchars
timestampchars
timestampchars
timestampchars
timestampchars
timestampchars
// network server expects to read the timestamp parameter value bytes with
// utf-8 encoding.  reference - derby-1127
// see drdaconnthread.readandsetparams
byte timestampbytes    new string timestampchars   getbytes typdef utf8encoding
system arraycopy timestampbytes  0  buffer  offset  datetime timestamprepresentationlength
return datetime timestamprepresentationlength
/**
* java.sql.time is converted to a character representation that is in derby string representation of a timestamp:
* <code>yyyy-mm-dd-hh.mm.ss.ffffff</code> and converted to bytes using utf8 encoding
* @param buffer
* @param offset offset in buffer to start writing to
* @param time time value
* @return datetime.timestamprepresentationlength which is the fixed length
* taken up by the conversion of time to timestamp in bytes
* @throws unsupportedencodingexception
*/
public static final int timetotimestampbytes byte buffer
int offset
java sql time time
throws unsupportedencodingexception
int hour   time gethours
int minute   time getminutes
int second   time getseconds
char timestampchars   new char
int zerobase    int
timestampchars
timestampchars
timestampchars
timestampchars
timestampchars
timestampchars
timestampchars
timestampchars
timestampchars
timestampchars
timestampchars
timestampchars    char   hour   10   zerobase
timestampchars    char   hour % 10   zerobase
timestampchars
timestampchars    char   minute   10   zerobase
timestampchars    char   minute % 10   zerobase
timestampchars
timestampchars    char   second   10   zerobase
timestampchars    char   second % 10   zerobase
timestampchars
timestampchars
timestampchars
timestampchars
timestampchars
timestampchars
timestampchars
// network server expects to read the timestamp parameter value bytes with
// utf-8 encoding.  reference - derby-1127
// see drdaconnthread.readandsetparams for timestamp
byte timestampbytes    new string timestampchars   getbytes typdef utf8encoding
system arraycopy timestampbytes  0  buffer  offset  datetime timestamprepresentationlength
return datetime timestamprepresentationlength