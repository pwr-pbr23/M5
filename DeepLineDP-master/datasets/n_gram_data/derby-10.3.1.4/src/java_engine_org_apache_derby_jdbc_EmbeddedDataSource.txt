/*
derby - class org.apache.derby.jdbc.embeddeddatasource
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby jdbc
import org apache derby iapi reference attribute
import java sql connection
import java sql drivermanager
import java sql sqlexception
import java io printwriter
import java util properties
/* -- new jdbc 20 extension types --- */
import javax sql datasource
import org apache derby iapi reference attribute
import org apache derby iapi reference messageid
import org apache derby iapi reference sqlstate
import org apache derby iapi error exceptionseverity
import org apache derby iapi services i18n messageservice
import org apache derby impl jdbc util
/**
embeddeddatasource is derby's datasource implementation for jdbc3.0.
<p>a datasource  is a factory for connection objects. an object that
implements the datasource interface will typically be registered with a
jndi service provider.
<p>
embeddeddatasource automatically supports the correct jdbc specification version
for the java virtual machine's environment.
<ul>
<li> jdbc 3.0 - java 2 - jdk 1.4, j2se 5.0
</ul>
<p>the following is a list of properties that can be set on a derby
datasource object:
<p><b>standard datasource properties</b> (from jdbc 3.0 specification).
<ul><li><b><code>databasename</code></b> (string): <i>mandatory</i>
<br>this property must be set and it
identifies which database to access.  if a database named wombat located at
g:/db/wombat is to be accessed, then one should call
<code>setdatabasename("g:/db/wombat")</code> on the data source object.</li>
<li><b><code>datasourcename</code></b> (string): <i>optional</i>
<br> name for datasource.  not used by the data source object.  used for
informational purpose only.</li>
<li><b><code>description</code></b> (string): <i>optional</i>
<br>description of the data source.  not
used by the data source object.  used for informational purpose only.</li>
<li><b><code>password</code></b> (string): <i>optional</i>
<br>database password for the no argument <code>datasource.getconnection()</code>,
<code>connectionpooldatasource.getpooledconnection()</code>
and <code>xadatasource.getxaconnection()</code> methods.
<li><b><code>user</code></b> (string): <i>optional</i>
<br>database user for the no argument <code>datasource.getconnection()</code>,
<code>connectionpooldatasource.getpooledconnection()</code>
and <code>xadatasource.getxaconnection()</code> methods.
</ul>
<br><b>derby specific datasource properties.</b>
<ul>
<li><b><code>attributesaspassword</code></b> (boolean): <i>optional</i>
<br>if true, treat the password value in a
<code>datasource.getconnection(string user, string password)</code>,
<code>connectionpooldatasource.getpooledconnection(string user, string password)</code>
or <code>xadatasource.getxaconnection(string user, string password)</code> as a set
of connection attributes. the format of the attributes is the same as the format
of the attributes in the property connectionattributes. if false the password value
is treated normally as the password for the given user.
setting this property to true allows a connection request from an application to
provide more authentication information that just a password, for example the request
can include the user's password and an encrypted database's boot password.</li>
<li><b><code>connectionattributes</code></b> (string): <i>optional</i>
<br>defines a set of derby connection attributes for use in all connection requests.
the format of the string matches the format of the connection attributes in a derby jdbc url.
that is a list of attributes in the form <code><i>attribute</i>=<i>value</i></code>, each separated by semi-colon (';').
e.g. <code>setconnectionattributes("bootpassword=erd3234dggd3kazkj3000");</code>.
<br>the database name must be set by the datasource property <code>databasename</code> and not by setting the <code>databasename</code>
connection attribute in the <code>connectionattributes</code> property.
<br>
any attributes that can be set using a property of this datasource implementation
(e.g user, password) should not be set in connectionattributes. conflicting
settings in connectionattributes and properties of the datasource will lead to
unexpected behaviour.
<br>please see the derby documentation for a complete list of connection attributes. </li>
<li><b><code>createdatabase</code></b> (string): <i>optional</i>
<br>if set to the string "create", this will
cause a new database of <code>databasename</code> if that database does not already
exist.  the database is created when a connection object is obtained from
the data source. </li>
<li><b><code>shutdowndatabase</code></b> (string): <i>optional</i>
<br>if set to the string "shutdown",
this will cause the database to shutdown when a java.sql.connection object
is obtained from the data source.  e.g., if the data source is an
xadatasource, a getxaconnection().getconnection() is necessary to cause the
database to shutdown.
</ul>
<p><b>examples.</b>
<p>this is an example of setting a property directly using derby's
embeddeddatasource object.  this code is typically written by a system integrator :
<pre>
*
* import org.apache.derby.jdbc.*;
*
* // dbname is the database name
* // if create is true, create the database if necessary
* javax.sql.datasource makedatasource (string dbname, boolean create)
*	throws throwable
* {
*	embeddeddatasource ds = new embeddeddatasource();
*	ds.setdatabasename(dbname);
*
*	if (create)
*		ds.setcreatedatabase("create");
*
*	return ds;
* }
</pre>
<p>example of setting properties thru reflection.  this code is typically
generated by tools or written by a system integrator: <pre>
*
* javax.sql.datasource makedatasource(string dbname)
*	throws throwable
* {
*	class[] parameter = new class[1];
*	parameter[0] = dbname.getclass();
*	datasource ds =  new embeddeddatasource();
*	class cl = ds.getclass();
*
*	method setname = cl.getmethod("setdatabasename", parameter);
*	object[] arg = new object[1];
*	arg[0] = dbname;
*	setname.invoke(ds, arg);
*
*	return ds;
* }
</pre>
<p>example on how to register a data source object with a jndi naming
service.
<pre>
* datasource ds = makedatasource("mydb");
* context ctx = new initialcontext();
* ctx.bind("jdbc/mydb", ds);
</pre>
<p>example on how to retrieve a data source object from a jndi naming
service.
<pre>
* context ctx = new initialcontext();
* datasource ds = (datasource)ctx.lookup("jdbc/mydb");
</pre>
*/
public class embeddeddatasource extends referenceabledatasource implements
javax sql datasource
private static final long serialversionuid    4945135214995641181l
/** instance variables that will be serialized */
/**
* the database name.
* @serial
*/
private string databasename
/**
* the data source name.
* @serial
*/
private string datasourcename
/**
* description of the database.
* @serial
*/
private string description
/**
* set to "create" if the database should be created.
* @serial
*/
private string createdatabase
/**
* set to "shutdown" if the database should be shutdown.
* @serial
*/
private string shutdowndatabase
/**
* derby specific connection attributes.
* @serial
*/
private string connectionattributes
/**
set password to be a set of connection attributes.
*/
private boolean attributesaspassword
/** instance variables that will not be serialized */
transient private printwriter printer
transient private int logintimeout
// unlike a datasource, localdriver is shared by all
// derby databases in the same jvm.
transient internaldriver driver
transient private string jdbcurl
/**
no-arg constructor.
*/
public embeddeddatasource
// needed by object factory
// don't put anything in here or in any of the set method because this
// object may be materialized in a remote machine and then sent thru
// the net to the machine where it will be used.
//most of our customers would be using jndi to get the data
//sources. since we don't have a jndi to test this, we are
//adding this method to fake it. this is getting used in
//xajndi test so we can compare the 2 data sources.
public boolean equals object p0
if  p0 instanceof embeddeddatasource
embeddeddatasource ds    embeddeddatasource p0
boolean match   true
if  databasename    null
if     databasename equals ds databasename
match   false
else if  ds databasename    null
match   false
if  datasourcename    null
if     datasourcename equals ds datasourcename
match   false
else if  ds datasourcename    null
match   false
if  description    null
if     description equals ds description
match   false
else if  ds description    null
match   false
if  createdatabase    null
if     createdatabase equals ds createdatabase
match   false
else if  ds createdatabase    null
match   false
if  shutdowndatabase    null
if     shutdowndatabase equals ds shutdowndatabase
match   false
else if  ds shutdowndatabase    null
match   false
if  connectionattributes    null
if     connectionattributes equals ds connectionattributes
match   false
else if  ds connectionattributes    null
match   false
if  logintimeout    ds logintimeout
match   false
return match
return false
/*
* properties to be seen by bean - access thru reflection.
*/
/**
set this property to create a new database.  if this
property is not set, the database (identified by databasename) is
assumed to be already existing.
@param create if set to the string "create", this data source will try
to create a new database of databasename, or boot the database if one
by that name already exists.
*/
public final void setcreatedatabase string create
if  create    null    create tolowercase java util locale english  equals
createdatabase   create
else
createdatabase   null
/** @return "create" if create is set, or null if not */
public final string getcreatedatabase
return createdatabase
/**
set this property if one wishes to shutdown the database identified by
databasename.
@param shutdown if set to the string "shutdown", this data source will
shutdown the database if it is running.
*/
public final void setshutdowndatabase string shutdown
if  shutdown    null    shutdown equalsignorecase
shutdowndatabase   shutdown
else
shutdowndatabase   null
/** @return "shutdown" if shutdown is set, or null if not */
public final string getshutdowndatabase
return shutdowndatabase
/**
set this property to pass in more derby specific
connection url attributes.
<br>
any attributes that can be set using a property of this datasource implementation
(e.g user, password) should not be set in connectionattributes. conflicting
settings in connectionattributes and properties of the datasource will lead to
unexpected behaviour.
@param prop set to the list of derby connection
attributes separated by semi-colons.   e.g., to specify an encryption
bootpassword of "x8hhk2adf", and set upgrade to true, do the following:
<pre>
ds.setconnectionattributes("bootpassword=x8hhk2adf;upgrade=true");
</pre>
see the derby documentation for complete list.
*/
public final void setconnectionattributes string prop
connectionattributes   prop
update
/** @return derby specific connection url attributes */
public final string getconnectionattributes
return connectionattributes
/**
set attributeaspassword property to enable passing connection request attributes in the password argument of getconnection.
if the property is set to true then the password argument of the datasource.getconnection(string user, string password)
method call is taken to be a list of connection attributes with the same format as the connectionattributes property.
@param attributesaspassword true to encode password argument as a set of connection attributes in a connection request.
*/
public final void setattributesaspassword boolean attributesaspassword
this attributesaspassword   attributesaspassword
update
/**
return the value of the attributesaspassword property.
*/
public final boolean getattributesaspassword
return attributesaspassword
/*
* datasource methods
*/
/**
* attempt to establish a database connection.
*
* @return  a connection to the database
* @exception sqlexception if a database-access error occurs.
*/
public final connection getconnection   throws sqlexception
return this getconnection getuser    getpassword    false
/**
* attempt to establish a database connection with the given username and password.
if the attributeaspassword property is set to true then the password argument is taken to be a list of
connection attributes with the same format as the connectionattributes property.
*
* @param username the database user on whose behalf the connection is
*  being made
* @param password the user's password
* @return  a connection to the database
* @exception sqlexception if a database-access error occurs.
*/
public final connection getconnection string username  string password
throws sqlexception
return this getconnection username  password  true
/**
@param	requestpassword true if the password came from the getconnection() call.
*/
final connection getconnection string username  string password  boolean requestpassword
throws sqlexception
properties info   new properties
if  username    null
info put attribute username_attr  username
if   requestpassword     attributesaspassword
if  password    null
info put attribute password_attr  password
if  createdatabase    null
info put attribute create_attr
if  shutdowndatabase    null
info put attribute shutdown_attr
string url   jdbcurl
if  attributesaspassword    requestpassword    password    null
stringbuffer sb   new stringbuffer url length     password length     1
sb append url
sb append
sb append password      these are now request attributes on the url
url   sb tostring
connection conn    finddriver   connect url  info
// jdbc driver's getconnection method returns null if
// the driver does not handle the request's url.
if  conn    null
throw util generatecssqlexception sqlstate property_invalid_value attribute dbname_attr getdatabasename
return conn
internaldriver finddriver   throws sqlexception
string url   jdbcurl
if  driver    null     driver acceptsurl url
synchronized this
// the driver has either never been booted, or it has been
// shutdown by a 'jdbc:derby:;shutdown=true'
if  driver    null     driver acceptsurl url
new org apache derby jdbc embeddeddriver
// if we know the driver, we loaded it.   otherwise only
// work if drivermanager has already loaded it.
autoloadeddriver	autoloadeddriver
autoloadeddriver  drivermanager getdriver url
driver    internaldriver  autoloadeddriver getdrivermodule
// drivermanager will throw an exception if it cannot find the driver
return driver
// else driver != null and driver can accept url
void update
stringbuffer sb   new stringbuffer 64
sb append attribute protocol
// set the database name from the databasename property
string dbname   getdatabasename
if  dbname    null
dbname   dbname trim
if  dbname    null    dbname length      0
// need to put something in so that we do not allow the
// database name to be set from the request or from the
// connection attributes.
// this space will selected as the database name (and trimmed to an empty string)
// see the getdatabasename() code in internaldriver. since this is a non-null
// value, it will be selected over any databasename connection attribute.
dbname
sb append dbname
string connattrs   getconnectionattributes
if  connattrs    null
connattrs   connattrs trim
if  connattrs length      0
sb append
sb append connectionattributes
jdbcurl   sb tostring