/*
derby - class org.apache.derby.client.am.clob
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby client am
import java io bufferedinputstream
import java io bufferedreader
import java io inputstream
import java io ioexception
import java io reader
import java sql sqlexception
import org apache derby shared common reference sqlstate
import org apache derby client net encodedinputstream
public class clob extends lob implements java sql clob
//---------------------navigational members-----------------------------------
//-----------------------------state------------------------------------------
protected string string_   null
// only used for input purposes.  for output, each getxxxstream call
// must generate an independent stream.
protected java io inputstream asciistream_   null
protected java io inputstream unicodestream_   null
protected java io reader characterstream_   null
// used for input
// therefore, we always convert a string to utf-8 before we flow it for input
protected byte utf8string_
private preparedstatement internallengthstmt_   null
protected string encoding_
//this boolean variable indicates whether the clob object has
//been invalidated by calling free() on it
private boolean isvalid   true
//---------------------constructors/finalizer---------------------------------
public clob agent agent  string string
this agent
false
string_   string
setsqllength string_ length
datatype_    string
// ctor for output, when a btc isn't available; the encoding is
public clob agent agent
byte unconvertedbytes
string charsetname
int dataoffset  throws sqlexception
this agent
false
try
// check for null encoding is needed because the net layer
// will no longer throw an exception if the server didn't specify
// a mixed or double byte ccsid (ccsid = 0).  this check for null in the
// cursor is only required for types which can have mixed or double
// byte ccsids.
if  charsetname    null
throw new sqlexception agent logwriter_
new clientmessageid sqlstate character_converter_not_available
string_   new string unconvertedbytes
dataoffset
unconvertedbytes length   dataoffset
charsetname
setsqllength string_ length
datatype_    string
catch  java io unsupportedencodingexception e
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate unsupported_encoding
charsetname      e
// ctor for ascii/unicode stream input
//"iso-8859-1", "utf-8", or "unicodebigunmarked"
public clob agent agent
java io inputstream inputstream
string encoding
int length  throws sqlexception
this agent
false
setsqllength length
if  encoding equals
asciistream_   inputstream
datatype_    ascii_stream
else if  encoding equals
unicodestream_   inputstream
datatype_    unicode_stream
else if  encoding equals
try
characterstream_
new java io inputstreamreader inputstream
catch  java io unsupportedencodingexception e
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate unsupported_encoding
e
datatype_    character_stream
setsqllength length   2
/**
* create a <code>clob</code> of unknown length with the specified
* encoding.
*
* this constructor was added to support the jdbc 4 length less overloads.
* note that a <code>clob</code> created with this constructor is made for
* input to the database only. do not pass it out to the user!
*
* @param agent
* @param inputstream the data to insert
* @param encoding encoding to use for characters. only "iso-8859-1" is
*      allowed.
*/
public clob agent agent  java io inputstream inputstream  string encoding
throws sqlexception
this agent
islayerbstreamingpossible  agent
if  encoding equals
asciistream_   inputstream
datatype_    ascii_stream
else
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate unsupported_encoding
encoding
// ctor for character stream input
// the encoding is assumed to be "utf-16be"
public clob agent agent  java io reader reader  int length
this agent
false
setsqllength length
characterstream_   reader
datatype_    character_stream
/**
* create a <code>clob</code> object for a clob value stored
* on the server and indentified by <code>locator</code>.
* @param agent context for this <code>clob</code>
*              object (incl. connection).
* @param locator reference id to <code>clob</code> value on server.
*/
public clob agent agent  int locator
super agent  false
locator_   locator
datatype_    locator
/**
* create a <code>clob</code> of unknown length.
*
* this constructor was added to support the jdbc 4 length less overloads.
* note that a <code>clob</code> created with this constructor is made for
* input to the database only. do not pass it out to the user!
*
* @param agent
* @param reader the data to insert
*/
public clob agent agent  reader reader
this agent
islayerbstreamingpossible  agent
// wrap reader in stream to share code.
unicodestream_   encodedinputstream createutf8stream reader
// override type to share logic with the other stream types.
datatype_    unicode_stream
private clob agent agent
boolean willbelayerbstreamed
super agent
willbelayerbstreamed
protected void finalize   throws java lang throwable
super finalize
if  internallengthstmt_    null
internallengthstmt_ closex
// ---------------------------jdbc 2------------------------------------------
// create another method lengthx for internal calls
public long length   throws sqlexception
//call checkvalidity to exit by throwing a sqlexception if
//the clob object has been freed by calling free() on it
checkvalidity
try
synchronized  agent_ connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this
long length   super sqllength
if  agent_ loggingenabled
agent_ logwriter_ traceexit this     length
return length
catch   sqlexception se
throw se getsqlexception
/**
* returns a copy of the specified substring
* in the <code>clob</code> value
* designated by this <code>clob</code> object.
* the substring begins at position
* <code>pos</code> and has up to <code>length</code> consecutive
* characters. the starting position must be between 1 and the length
* of the clob plus 1. this allows for zero-length clob values, from
* which only zero-length substrings can be returned.
* if a larger length is requested than there are characters available,
* characters to the end of the clob are returned.
* @param pos the first character of the substring to be extracted.
*            the first character is at position 1.
* @param length the number of consecutive characters to be copied
* @return a <code>string</code> that is the specified substring in
*         the <code>clob</code> value designated by this <code>clob</code> object
* @exception sqlexception if there is an error accessing the
* <code>clob</code>
* note: if the starting position is the length of the clob plus 1,
* zero characters are returned regardless of the length requested.
*/
public string getsubstring long pos  int length  throws sqlexception
//call checkvalidity to exit by throwing a sqlexception if
//the clob object has been freed by calling free() on it
checkvalidity
try
synchronized  agent_ connection_
string retval   null
if  agent_ loggingenabled
agent_ logwriter_ traceentry this      int  pos  length
if   pos <  0
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate blob_bad_position
new long pos
if   length < 0
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate blob_nonpositive_length
new integer length
if  pos > sqllength     1
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate blob_position_too_large
new long pos
retval   getsubstringx pos  length
if  agent_ loggingenabled
agent_ logwriter_ traceexit this     retval
return retval
catch   sqlexception se
throw se getsqlexception
private string getsubstringx long pos  int length  throws sqlexception
checkforclosedconnection
// actual length is the lesser of the length requested
// and the number of characters available from pos to the end
long actuallength   math min this sqllength     pos   1   long  length
//check to see if the clob object is locator enabled.
if  islocator
//the clob object is locator enabled. hence call the stored
//procedure clobgetlength to determine the length of the clob.
return agent_ connection_ locatorprocedurecall
clobgetsubstring locator_  pos   int actuallength
else
//the clob object is not locator enabled.
return string_ substring
int  pos   1   int   pos   1   actuallength
public java io reader getcharacterstream   throws sqlexception
//call checkvalidity to exit by throwing a sqlexception if
//the clob object has been freed by calling free() on it
checkvalidity
try
synchronized  agent_ connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this
java io reader retval   getcharacterstreamx
if  agent_ loggingenabled
agent_ logwriter_ traceexit this     retval
return retval
catch   sqlexception se
throw se getsqlexception
private java io reader getcharacterstreamx   throws sqlexception
checkforclosedconnection
//check is this lob is locator enabled
if  islocator
//the lob is locator enabled. return an instance of the
//update sensitive reader that wraps inside it a
//buffered locator reader. the wrapper class
//watches out for updates.
return new updatesensitivecloblocatorreader
agent_ connection_  this
else if  ischaracterstream        this lob is used for input
return characterstream_
return new java io stringreader string_
public java io inputstream getasciistream   throws sqlexception
//call checkvalidity to exit by throwing a sqlexception if
//the clob object has been freed by calling free() on it
checkvalidity
try
synchronized  agent_ connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this
java io inputstream retval   getasciistreamx
if  agent_ loggingenabled
agent_ logwriter_ traceexit this     retval
return retval
catch   sqlexception se
throw se getsqlexception
private java io inputstream getasciistreamx   throws sqlexception
checkforclosedconnection
if  isasciistream        this lob is used for input
return asciistream_
else if islocator         check to see if this lob is locator enabled
//the lob is locator enabled. return an instance
//of the update sensitive wrappers that wrap inside
//it a buffered locator enabled inputstream. the
//wrapper watches out for updates to the underlying
//clob.
return new updatesensitivecloblocatorinputstream
agent_ connection_ this
else
return new asciistream string_  new java io stringreader string_
public long position string searchstr  long start  throws sqlexception
//call checkvalidity to exit by throwing a sqlexception if
//the clob object has been freed by calling free() on it
checkvalidity
try
synchronized  agent_ connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this
searchstr
start
if  searchstr    null
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate blob_null_pattern_or_search_str
if  start < 1
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate blob_bad_position
new long start
long pos   positionx searchstr  start
if  agent_ loggingenabled
agent_ logwriter_ traceexit this     pos
return pos
catch   sqlexception se
throw se getsqlexception
private long positionx string searchstr  long start  throws sqlexception
checkforclosedconnection
long index    1
if  start <  0
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate invalid_api_parameter
new long start
//check is locator support is available for this lob.
if  islocator
//locator support is available. hence call
//clobgetpositionfromstring to determine the position
//of the given substring inside the lob.
index   agent_ connection_ locatorprocedurecall
clobgetpositionfromstring locator_  searchstr  start
else
//locator support is not available.
index   string_ indexof searchstr   int  start   1
if  index     1
index       api index starts at 1
return index
public long position java sql clob searchstr  long start  throws sqlexception
//call checkvalidity to exit by throwing a sqlexception if
//the clob object has been freed by calling free() on it
checkvalidity
try
synchronized  agent_ connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this
searchstr
start
if  start < 1
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate blob_bad_position
new long start
if  searchstr    null
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate blob_null_pattern_or_search_str
long pos   positionx searchstr  start
if  agent_ loggingenabled
agent_ logwriter_ traceexit this     pos
return pos
catch   sqlexception se
throw se getsqlexception
private long positionx java sql clob searchstr  long start  throws sqlexception
checkforclosedconnection
if  start <  0
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate invalid_api_parameter
new long start
// if the searchstr is longer than the source, no match
long index
try
if  searchstr length   > sqllength
return  1
//check if locator support is available for this lob.
if  islocator
//locator support is available. hence call
//clobgetpositionfromlocator to determine the position
//of the given clob inside the lob.
index   agent_ connection_ locatorprocedurecall
clobgetpositionfromlocator locator_
clob searchstr  getlocator
start
else
//locator support is not available.
index   string_ indexof searchstr getsubstring 1l
int  searchstr length
int  start   1
//increase the index by one since string positions are
//0-based and clob positions are 1-based
if  index     1
index
catch  java sql sqlexception e
throw new sqlexception e
return index
//---------------------------- jdbc 3.0 -----------------------------------
public int setstring long pos  string str  throws sqlexception
//call checkvalidity to exit by throwing a sqlexception if
//the clob object has been freed by calling free() on it
checkvalidity
try
synchronized  agent_ connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this      int  pos  str
int length   setstringx pos  str  0  str length
if  agent_ loggingenabled
agent_ logwriter_ traceexit this     length
return length
catch   sqlexception se
throw se getsqlexception
public int setstring long pos  string str  int offset  int len  throws sqlexception
//call checkvalidity to exit by throwing a sqlexception if
//the clob object has been freed by calling free() on it
checkvalidity
try
synchronized  agent_ connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this      int  pos  str  offset  len
int length   setstringx pos  str  offset  len
if  agent_ loggingenabled
agent_ logwriter_ traceexit this     length
return length
catch   sqlexception se
throw se getsqlexception
public int setstringx long pos  string str  int offset  int len  throws sqlexception
if   int  pos <  0
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate blob_bad_position
new long pos
if   pos   1 > sqllength
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate blob_position_too_large
new long pos
if   offset < 0     offset > str length
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate blob_invalid_offset
new integer offset
if   len < 0
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate blob_nonpositive_length
new integer len
if  len    0
return 0
int length   0
length   math min  str length     offset   len
//check if the clob object is locator enabled
if  islocator
//the clob is locator enabled. call the clobsetstring
//stored procedure to set the given string in the clob.
agent_ connection_ locatorprocedurecall   clobsetstring
locator_  pos  length  str substring offset  offset   length
if  pos length 1 > sqllength         wrote beyond the old end
// update length
setsqllength pos   length   1
//the clob value has been
//updated. increment the
//update count.
incrementupdatecount
else
//the clob is not locator enabled.
string newstring   string_ substring 0   int  pos   1
string_   newstring concat str substring offset  offset   length
asciistream_   new java io stringbufferinputstream string_
unicodestream_   new java io stringbufferinputstream string_
characterstream_   new java io stringreader string_
setsqllength string_ length
return length
public java io outputstream setasciistream long pos  throws sqlexception
//call checkvalidity to exit by throwing a sqlexception if
//the clob object has been freed by calling free() on it
checkvalidity
try
synchronized  agent_ connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this      int  pos
java io outputstream outstream   null
if islocator         check to see if the lob is locator enabled
//the lob is locator enabled. return an instance of the
//locator enabled clob specific outputstream implementation.
outstream   new cloblocatoroutputstream
agent_ connection_  this  pos
else
//the lob is not locator enabled.
outstream   new
cloboutputstream this  pos
if  agent_ loggingenabled
agent_ logwriter_ traceexit this     outstream
return outstream
catch   sqlexception se
throw se getsqlexception
public java io writer setcharacterstream long pos  throws sqlexception
//call checkvalidity to exit by throwing a sqlexception if
//the clob object has been freed by calling free() on it
checkvalidity
try
synchronized  agent_ connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this      int  pos
java io writer writer   null
//check to see if this clob is locator enabled.
if  islocator
//return an instance of the locator enabled implementation
//of the writer interface
writer   new cloblocatorwriter agent_ connection_  this  pos
else    the lob is not locator enabled
writer   new clobwriter this  pos
if  agent_ loggingenabled
agent_ logwriter_ traceexit this     writer
return writer
catch   sqlexception se
throw se getsqlexception
public void truncate long len  throws sqlexception
//call checkvalidity to exit by throwing a sqlexception if
//the clob object has been freed by calling free() on it
checkvalidity
try
synchronized  agent_ connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this      int  len
if  len < 0
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate blob_nonpositive_length
new long len
if   len > sqllength
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate blob_length_too_long
new long len
if  len    sqllength
return
//check whether the lob is locator enabled.
if  islocator
//the lob is locator enabled then call the stored
//procedure clobtruncate to truncate this lob.
agent_ connection_ locatorprocedurecall
clobtruncate locator_  len
//the clob value has been
//modified. increment the
//update count.
incrementupdatecount
else
//the lob is not locator enabled.
string newstr   string_ substring 0   int  len
string_   newstr
asciistream_   new java io stringbufferinputstream string_
unicodestream_   new java io stringbufferinputstream string_
characterstream_   new java io stringreader string_
setsqllength string_ length
catch   sqlexception se
throw se getsqlexception
//---------------------------- jdbc 4.0 -------------------------------------
/**
* this method frees the <code>clob</code> object and releases the resources the resources
* that it holds.  the object is invalid once the <code>free</code> method
* is called. if <code>free</code> is called multiple times, the
* subsequent calls to <code>free</code> are treated as a no-op.
*
* @throws sqlexception if an error occurs releasing
* the clob's resources
*/
public void free
throws sqlexception
//calling free() on a already freed object is treated as a no-op
if   isvalid  return
//now that free has been called the blob object is no longer
//valid
isvalid   false
if isstring
string_   null
utf8string_   null
if isasciistream
try
asciistream_ close
catch ioexception ioe
throw new sqlexception null  new clientmessageid sqlstate io_error_upon_lob_free   getsqlexception
if isunicodestream
try
unicodestream_ close
catch ioexception ioe
throw new sqlexception null  new clientmessageid sqlstate io_error_upon_lob_free   getsqlexception
if ischaracterstream
try
characterstream_ close
catch ioexception ioe
throw new sqlexception null  new clientmessageid sqlstate io_error_upon_lob_free   getsqlexception
if  internallengthstmt_    null
try
internallengthstmt_ closex
catch sqlexception sqle
throw sqle getsqlexception
/**
* returns a <code>reader</code> object that contains a partial
* <code>clob</code> value, starting with the character specified by pos,
* which is length characters in length.
*
* @param pos the offset to the first character of the partial value to
* be retrieved.  the first character in the clob is at position 1.
* @param length the length in characters of the partial value to be
* retrieved.
* @return <code>reader</code> through which the partial <code>clob</code>
* value can be read.
* @throws sqlexception if pos is less than 1 or if pos is greater than the
* number of
* characters in the <code>clob</code> or if pos + length is greater than
* the number of
* characters in the <code>clob</code>
*
* @throws sqlexception.
*/
public reader getcharacterstream long pos  long length
throws sqlexception
//call checkvalidity to exit by throwing a sqlexception if
//the clob object has been freed by calling free() on it
checkvalidity
synchronized  agent_ connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this
int  pos  length
checkposandlength pos  length
reader retval   null
//check if the lob is locator enabled.
if islocator
//1) the lob is locator enabled. return the update
//   sensitive wrapper that wraps inside it a
//   locator enabled clob reader. the wrapper
//   watches out for updates to the underlying
//   clob.
//2) len is the number of characters in the
//   stream starting from pos.
//3) checkposandlength will ensure that pos and
//   length fall within the boundaries of the
//   clob object.
try
retval   new updatesensitivecloblocatorreader
agent_ connection_  this
pos  length
catch sqlexception sqle
throw sqle getsqlexception
else
//the lob is not locator enabled.
string retval_str   null
try
retval_str   getsubstringx pos   int length
catch sqlexception sqle
throw sqle getsqlexception
retval   new java io stringreader retval_str
if  agent_ loggingenabled
agent_ logwriter_ traceexit this     retval
return retval
//----------------------------helper methods----------------------------------
public boolean isstring
return   datatype_   string     string
public boolean isasciistream
return   datatype_   ascii_stream     ascii_stream
public boolean ischaracterstream
return   datatype_   character_stream     character_stream
public boolean isunicodestream
return   datatype_   unicode_stream     unicode_stream
public java io inputstream getunicodestream
return unicodestream_
public string getstring
return string_
public byte getutf8string
return utf8string_
// return the length of the equivalent utf-8 string
// precondition: string_ is not null and datatype_ includes string
public int getutf8length   throws sqlexception
if  utf8string_    null
return utf8string_ length
try
utf8string_   string_ getbytes
return utf8string_ length
catch  java io unsupportedencodingexception e
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate unsupported_encoding
e
// auxiliary method for position (clob, long)
protected clob createclobwrapper java sql clob clob  throws sqlexception
long length
java io reader rdr
try
length   clob length
catch  java sql sqlexception e
throw new sqlexception e
if  length > integer max_value
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate blob_too_large_for_client
new long length   new integer integer max_value
try
rdr   clob getcharacterstream
catch  java sql sqlexception e
throw sqlexception javaexception agent_ logwriter_  e
return new clob this agent_  rdr   int  length
public void convertfromasciitocharacterstream   throws sqlexception
try
characterstream_
new java io inputstreamreader asciistream_
datatype_   character_stream
catch  java io unsupportedencodingexception e
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate unsupported_encoding
e
/*
* checks is isvalid is true. if it is not true throws
* a sqlexception stating that a method has been called on
* an invalid lob object
*
* throws sqlexception if isvalid is not true.
*/
private void checkvalidity   throws sqlexception
if  isvalid
throw new sqlexception null new clientmessageid sqlstate lob_object_invalid
getsqlexception
/**
* materialize the stream used for input to the database.
*
* @throws sqlexception
*/
protected void materializestream
throws sqlexception
unicodestream_   super materializestream isasciistream   ?
asciistream_
unicodestream_
datatype_   unicode_stream
/*---------------------------------------------------------------------
methods used in the locator implementation.
----------------------------------------------------------------------*/
/**
* get the length in bytes of the <code>clob</code> value represented by
* this locator based <code>clob</code> object.
*
* a stored procedure call will be made to get it from the server.
* @throws org.apache.derby.client.am.sqlexception
* @return length of <code>clob</code> in bytes
*/
long getlocatorlength   throws sqlexception
return agent_ connection_ locatorprocedurecall
clobgetlength locator_