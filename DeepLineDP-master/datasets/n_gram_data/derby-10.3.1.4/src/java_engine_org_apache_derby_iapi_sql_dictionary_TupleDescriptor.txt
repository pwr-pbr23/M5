/*
derby - class org.apache.derby.iapi.sql.dictionary.tupledescriptor
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi sql dictionary
import org apache derby iapi sql conn languageconnectioncontext
import org apache derby iapi error standardexception
import	org apache derby catalog dependablefinder
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi reference sqlstate
// is it ok to do this?
import org apache derby impl sql catalog dddependablefinder
import org apache derby impl sql catalog ddcolumndependablefinder
/**
* this is the superclass of all descriptors. users of datadictionary should use
* the specific descriptor.
*
*/
public class tupledescriptor
//////////////////////////////////////////////////////////////////
//
//	constants
//
//////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////
//
//	state
//
//////////////////////////////////////////////////////////////////
private     datadictionary      datadictionary
//////////////////////////////////////////////////////////////////
//
//	constructor
//
//////////////////////////////////////////////////////////////////
public	tupledescriptor
public tupledescriptor datadictionary datadictionary
this datadictionary   datadictionary
protected datadictionary getdatadictionary
return datadictionary
protected void setdatadictionary datadictionary dd
datadictionary   dd
/**
* is this provider persistent?  a stored dependency will be required
* if both the dependent and provider are persistent.
*
* @return boolean              whether or not this provider is persistent.
*/
public boolean ispersistent
return true
//////////////////////////////////////////////////////////////////
//
//	behavior. these are only used by replication!!
//
//////////////////////////////////////////////////////////////////
public dependablefinder getdependablefinder int formatid
return	new dddependablefinder formatid
dependablefinder getcolumndependablefinder int formatid  byte
columnbitmap
return new ddcolumndependablefinder formatid  columnbitmap
/** each descriptor must identify itself with its type; i.e index, check
* constraint whatever.
*/
public string getdescriptortype
if  sanitymanager debug   sanitymanager notreached
return null
/* each descriptor has a name
*/
public string getdescriptorname
if  sanitymanager debug   sanitymanager notreached
return null