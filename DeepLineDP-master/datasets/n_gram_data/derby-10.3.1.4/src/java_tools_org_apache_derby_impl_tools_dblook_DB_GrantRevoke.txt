/*
derby - class org.apache.derby.impl.tools.dblook.db_alias
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl tools dblook
import java sql connection
import java sql statement
import java sql resultset
import java sql sqlexception
import java util stringtokenizer
import org apache derby tools dblook
public class db_grantrevoke
/** ************************************************
* generate grant & revoke statements if sqlauthorization is on
*
* @param conn connection to use
*/
public static void doauthorizations connection conn
throws sqlexception
// first generate table privilege statements
statement stmt   conn createstatement
resultset rs   stmt executequery
generatetableprivs rs
// generate column privilege statements
rs   stmt executequery
generatecolumnprivs rs  conn
// generate routine privilege statements
rs   stmt executequery
generateroutineprivs rs
rs close
stmt close
return
/** ************************************************
* generate table privilege statements
*
* @param rs result set holding required information
****/
private static void generatetableprivs resultset rs
throws sqlexception
boolean firsttime   true
while  rs next
if  firsttime
logs reportstring
logs reportmessage
logs reportstring
string authname   rs getstring 1
string schemaname   dblook addquotes dblook expanddoublequotes rs getstring 2
string tablename   dblook addquotes dblook expanddoublequotes rs getstring 3
string fullname   schemaname       tablename
if  dblook isignorableschema schemaname
continue
logs writetonewddl tableprivstatement rs  fullname  authname
logs writestmtendtonewddl
logs writenewlinetonewddl
firsttime   false
private static string separatorstr boolean addseparator
return  addseparator  ?
/** **************************************************
* generate table privilege statement for the current row
*
* @param rs 		resultset holding tableperm information
* @param fullname	table's qualified name
* @param authname	authorization id for grant statement
*/
private static string tableprivstatement resultset rs  string fullname  string authname
throws sqlexception
boolean addseparator   false
stringbuffer grantstmt   new stringbuffer
if  rs getstring 4  touppercase   equals
grantstmt append
addseparator   true
if  rs getstring 5  touppercase   equals
grantstmt append separatorstr addseparator
addseparator   true
if  rs getstring 6  touppercase   equals
grantstmt append separatorstr addseparator
addseparator   true
if  rs getstring 7  touppercase   equals
grantstmt append separatorstr addseparator
addseparator   true
if  rs getstring 8  touppercase   equals
grantstmt append separatorstr addseparator
addseparator   true
if  rs getstring 9  touppercase   equals
grantstmt append separatorstr addseparator
addseparator   true
grantstmt append     fullname       authname
return grantstmt tostring
/** ************************************************
* generate column privilege statements
*
* @param rs	resultset holding column privilege information
* @param conn	connection to use. used to get another resultset
****/
private static void generatecolumnprivs resultset rs  connection conn
throws sqlexception
boolean firsttime   true
while  rs next
if  firsttime
logs reportstring
logs reportmessage
logs reportstring
string authname   rs getstring 1
string schemaname   dblook expanddoublequotes rs getstring 2
string tablename   dblook expanddoublequotes rs getstring 3
if  dblook isignorableschema schemaname
continue
// create another resultset to get column names
statement stmtcols   conn createstatement
string querycols
tablename   schemaname
resultset rscols  stmtcols executequery querycols
string fullname   dblook addquotes schemaname        dblook addquotes tablename
logs writetonewddl columnprivstatement rs  fullname  authname  rscols
logs writestmtendtonewddl
logs writenewlinetonewddl
firsttime   false
private static string privtypetostring string privtype
if  privtype equals
return
else if  privtype equals
return
else if  privtype equals
return
// should throw an exception?
return
/** ************************************************
* generate one column grant statement
*
* @param columns	list of columns to grant required privs
* @param rscols	resultset for mapping column numbers to names
****/
private static string mapcolumnstonames string columns  resultset rscols
throws sqlexception
stringbuffer colnames   new stringbuffer
rscols next
int curcolumn   1
boolean addseparator   false
// strip out outer {} in addition to spaces and comma
stringtokenizer st   new stringtokenizer columns
while  st hasmoretokens
int colnum   integer parseint st nexttoken
while  colnum 1 > curcolumn
rscols next
curcolumn   rscols getint 1
colnames append separatorstr addseparator
colnames append rscols getstring 2
addseparator   true
return colnames tostring
/** ************************************************
*
* @param rs		resultset with info for this grant statement
* @param fullname	full qualified name of the table
* @param authname	authorization name for this grant
* @param rscols	resultset for mapping column numbers to names
****/
private static string columnprivstatement resultset rs  string fullname
string authname  resultset rscols  throws sqlexception
stringbuffer grantstmt   new stringbuffer
string privtype   rs getstring 4  touppercase
string columns   rs getstring 5
grantstmt append privtypetostring privtype
grantstmt append
grantstmt append mapcolumnstonames columns  rscols
grantstmt append
grantstmt append
grantstmt append authname
return grantstmt tostring
/** ************************************************
* generate routine privilege statements
*
* @param rs resultset holding required information
****/
public static void generateroutineprivs resultset rs  throws sqlexception
boolean firsttime   true
while  rs next
string authname   rs getstring 1
string schemaname   dblook addquotes dblook expanddoublequotes rs getstring 2
string aliasname   dblook addquotes dblook expanddoublequotes rs getstring 3
string fullname   schemaname       aliasname
string aliastype   rs getstring 4
if  dblook isignorableschema schemaname
continue
// ignore syscs_util privileges as all new databases automatically get them
if  schemaname equals  syscs_util
continue
if  firsttime
logs reportstring
logs reportmessage
logs reportstring
logs writetonewddl routineprivstatement fullname  authname  aliastype
logs writestmtendtonewddl
logs writenewlinetonewddl
firsttime   false
private static string routineprivstatement string fullname  string authname  string aliastype
throws sqlexception
boolean addseparator   false
stringbuffer grantstmt   new stringbuffer
grantstmt append  aliastype equals     ?
grantstmt append fullname
grantstmt append
grantstmt append authname
return grantstmt tostring