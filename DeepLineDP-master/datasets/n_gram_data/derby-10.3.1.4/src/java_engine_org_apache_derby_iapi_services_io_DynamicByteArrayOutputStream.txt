/*
derby - class org.apache.derby.iapi.services.io.dynamicbytearrayoutputstream
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi services io
import org apache derby iapi services sanity sanitymanager
import java io inputstream
import java io ioexception
import java io outputstream
/**
a dynamicbytearrayoutputstream allows writing to a dynamically resizable
array of bytes.   in addition to dynamic resizing, this extension allows
the user of this class to have more control over the position of the stream
and can get a direct reference of the array.
*/
public class dynamicbytearrayoutputstream extends outputstream
private static int initial_size   4096
private byte buf
private int		position
private int		used 		   how many bytes are used
private int		beginposition
public dynamicbytearrayoutputstream
this initial_size
public dynamicbytearrayoutputstream int size
super
buf   new byte
public dynamicbytearrayoutputstream byte data
super
buf   data
public dynamicbytearrayoutputstream dynamicbytearrayoutputstream tobecloned
byte cbuf   tobecloned getbytearray
buf   new byte
write cbuf  0  cbuf length
position   tobecloned getposition
used   tobecloned getused
beginposition   tobecloned getbeginposition
/*
*	outputstream methods
*/
public void write int b
if  position >  buf length
expandbuffer initial_size
buf    byte  b
if  position > used
used   position
public void write byte b  int off  int len
if   position len  > buf length
expandbuffer len
system arraycopy b  off  buf  position  len
position    len
if  position > used
used   position
void writecompletestream inputstream datain  int len  throws ioexception
if   position len  > buf length
expandbuffer len
org apache derby iapi services io inputstreamutil readfully datain  buf  position  len
position    len
if  position > used
used   position
public void close
buf   null
reset
/*
*	specific methods
*/
/**
reset the stream for reuse
*/
public void reset
position   0
beginposition   0
used   0
/**
get a reference to the byte array stored in the byte array output
stream. note that the byte array may be longer that getposition().
bytes beyond and including the current poistion are invalid.
*/
public byte getbytearray
return buf
/**
get the number of bytes that was used.
*/
public int getused
return used
/**
get the current position in the stream
*/
public int getposition
return position
/**
get the current position in the stream
*/
public int getbeginposition
return beginposition
/**
set the position of the stream pointer.
it is up to the caller to make sure the stream has no gap of garbage in
it or useful information is not left out at the end because the stream
does not remember anything about the previous position.
*/
public void setposition int newposition
if  newposition > position
if  newposition > buf length
expandbuffer newposition   buf length
position   newposition
if  position > used
used   position
return
/**
set the begin position of the stream pointer.
if the newbeginposition is larger than the stream itself,
then, the begin position is not set.
*/
public void setbeginposition int newbeginposition
if  newbeginposition > buf length
return
beginposition   newbeginposition
/**
shrink the buffer left by the amount given. ie.
bytes from 0 to amounttoshrinkby are thrown away
*/
public void discardleft int amounttoshrinkby
system arraycopy buf  amounttoshrinkby  buf  0
used   amounttoshrinkby
position    amounttoshrinkby
used    amounttoshrinkby
/**
expand the buffer by at least the number of bytes requested in minextension.
to optimize performance and reduce memory copies and allocation, we have a staged buffer
expansion.
<ul>
<li> buf.length < 128k - increase by 4k
<li> buf.length < 1mb - increase by 128k
<li> otherwise increase by 1mb.
</ul>
in all cases, if minexpansion is greater than the value about then the buffer will
be increased by minextension.
*/
private void expandbuffer int minextension
if  buf length <  128   1024
if  minextension < initial_size
minextension   initial_size
else if  buf length <  1024   1024
if  minextension <  128   1024
minextension    128   1024
else
if  minextension <  1024   1024
minextension   1024   1024
int newsize   buf length   minextension
byte newbuf   new byte
system arraycopy buf  0  newbuf  0  buf length
buf   newbuf