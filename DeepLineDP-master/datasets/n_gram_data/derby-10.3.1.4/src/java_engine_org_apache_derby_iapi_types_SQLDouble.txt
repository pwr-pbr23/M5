/*
derby - class org.apache.derby.iapi.types.sqldouble
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi types
import org apache derby iapi reference sqlstate
import org apache derby iapi services io arrayinputstream
import org apache derby iapi services io storedformatids
import org apache derby iapi services io storable
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi error standardexception
import org apache derby iapi types booleandatavalue
import org apache derby iapi types datavaluedescriptor
import org apache derby iapi types numberdatavalue
import org apache derby iapi types typeid
import org apache derby iapi services cache classsize
import org apache derby iapi types numberdatatype
import org apache derby iapi types sqlboolean
import java io objectoutput
import java io objectinput
import java io ioexception
import java sql resultset
import java sql preparedstatement
import java sql sqlexception
/**
* sqldouble satisfies the datavaluedescriptor
* interfaces (i.e., orderabledatatype). it implements a double column,
* e.g. for * storing a column value; it can be specified
* when constructed to not allow nulls. nullability cannot be changed
* after construction, as it affects the storage size and mechanism.
* <p>
* because orderabledatatype is a subtype of datatype,
* sqldouble can play a role in either a datatype/row
* or a orderabledatatype/row, interchangeably.
* <p>
* we assume the store has a flag for nullness of the value,
* and simply return a 0-length array for the stored form
* when the value is null.
* <p>
* performance: there are likely alot of performance improvements
* possible for this implementation -- it new's double
* more than it probably wants to.
* <p>
* this is modeled after sqlinteger.
* <p>
* we don't let doubles get constructed with nan or infinity values, and
* check for those values where they can occur on operations, so the
* set* operations do not check for them coming in.
*
*/
public final class sqldouble extends numberdatatype
/*
* datavaluedescriptor interface
* (mostly implemented in datatype)
*/
// jdbc is lax in what it permits and what it
// returns, so we are similarly lax
// @see datavaluedescriptor
/**
* @exception standardexception thrown on failure to convert
*/
public int	getint   throws standardexception
// remind: do we want to check for truncation?
if   value >    double  integer max_value    1 0d       value <    double  integer min_value    1 0d
throw standardexception newexception sqlstate lang_outside_range_for_datatype
return  int value
/**
* @exception standardexception thrown on failure to convert
*/
public byte	getbyte   throws standardexception
if   value >    double  byte max_value    1 0d       value <    double  byte min_value    1 0d
throw standardexception newexception sqlstate lang_outside_range_for_datatype
return  byte  value
/**
* @exception standardexception thrown on failure to convert
*/
public short	getshort   throws standardexception
if   value >    double  short max_value    1 0d       value <    double  short min_value    1 0d
throw standardexception newexception sqlstate lang_outside_range_for_datatype
return  short  value
/**
* @exception standardexception thrown on failure to convert
*/
public long	getlong   throws standardexception
if   value >    double  long max_value    1 0d       value <    double  long min_value    1 0d
throw standardexception newexception sqlstate lang_outside_range_for_datatype
return  long  value
/**
* @exception standardexception thrown on failure to convert
*/
public float	getfloat   throws standardexception
if  float isinfinite  float value
throw standardexception newexception sqlstate lang_outside_range_for_datatype  typeid real_name
return  float  value
public double	getdouble
/* this value is bogus if the sqldouble is null */
return value
/**
* double implementation. convert to a bigdecimal using getstring.
*/
public int typetobigdecimal
return java sql types char
// for lack of a specification: getdouble()==0 gives true
// independent of the null flag
public boolean	getboolean
return  value    0
public string	getstring
if  isnull
return null
else
return double tostring value
public object	getobject
// remind: could create one double and reuse it?
if  isnull
return null
else
return new double value
/**
* set the value from a correctly typed double object.
* @throws standardexception
*/
void setobject object thevalue  throws standardexception
setvalue   double  thevalue  doublevalue
protected void setfrom datavaluedescriptor thevalue  throws standardexception
setvalue thevalue getdouble
public int	getlength
return double_length
// this is for datatype's error generator
public string gettypename
return typeid double_name
/*
* storable interface, implies externalizable, typedformat
*/
/**
return my format identifier.
@see org.apache.derby.iapi.services.io.typedformat#gettypeformatid
*/
public int gettypeformatid
return storedformatids sql_double_id
/*
* see if the double value is null.
*/
/** @see storable#isnull */
public boolean isnull
return isnull
public void writeexternal objectoutput out  throws ioexception
// never called when value is null
if  sanitymanager debug
sanitymanager assert   isnull
out writedouble value
/** @see java.io.externalizable#readexternal */
public void readexternal objectinput in  throws ioexception
value   in readdouble
isnull   false
/** @see java.io.externalizable#readexternal */
public void readexternalfromarray arrayinputstream in  throws ioexception
value   in readdouble
isnull   false
/**
* @see storable#restoretonull
*
*/
public void restoretonull
value   0
isnull   true
/** @exception standardexception		thrown on error */
protected int typecompare datavaluedescriptor arg  throws standardexception
/* neither are null, get the value */
double thisvalue   this getdouble
double othervalue   arg getdouble
if  thisvalue    othervalue
return 0
else if  thisvalue > othervalue
return 1
else
return  1
/*
* datavaluedescriptor interface
*/
/** @see datavaluedescriptor#getclone */
public datavaluedescriptor getclone
try
return new sqldouble value  isnull
catch  standardexception se
if  sanitymanager debug
sanitymanager throwassert
value
isnull  se
return null
/**
* @see datavaluedescriptor#getnewnull
*/
public datavaluedescriptor getnewnull
return new sqldouble
/**
* @see datavaluedescriptor#setvaluefromresultset
*
* @exception standardexception		thrown on error
* @exception sqlexception		thrown on error
*/
public void setvaluefromresultset resultset resultset  int colnumber
boolean isnullable
throws standardexception  sqlexception
double dv   resultset getdouble colnumber
isnull    isnullable    resultset wasnull
if  isnull
value   0
else
value   numberdatatype normalizedouble dv
/**
set the value into a preparedstatement.
@exception sqlexception error setting value in preparedstatement
*/
public final void setinto preparedstatement ps  int position  throws sqlexception
if  isnull
ps setnull position  java sql types double
return
ps setdouble position  value
/**
set this value into a resultset for a subsequent resultset.insertrow
or resultset.updaterow. this method will only be called for non-null values.
@exception sqlexception thrown by the resultset object
@exception standardexception thrown by me accessing my value.
*/
public final void setinto resultset rs  int position  throws sqlexception  standardexception
rs updatedouble position  value
/*
* class interface
*/
/*
* constructors
*/
/** no-arg constructor, required by formattable */
// this constructor also gets used when we are
// allocating space for a double.
public sqldouble
isnull   true
public sqldouble double val  throws standardexception
value   numberdatatype normalizedouble val
public sqldouble double obj  throws standardexception
if  isnull    obj    null
else
value   numberdatatype normalizedouble obj doublevalue
private sqldouble double val  boolean startsnull  throws standardexception
value   numberdatatype normalizedouble val      maybe only do if  startsnull
isnull   startsnull
/**
@exception standardexception throws numberformatexception
when the string format is not recognized.
*/
public void setvalue string thevalue  throws standardexception
if  thevalue    null
value   0
isnull   true
else
double doublevalue   0
try
// ??? jsk: rounding???
doublevalue   double valueof thevalue trim    doublevalue
catch  numberformatexception nfe
throw invalidformat
value   numberdatatype normalizedouble doublevalue
isnull   false
/**
* @exception standardexception on nan or infinite double
*/
public void setvalue double thevalue  throws standardexception
value   numberdatatype normalizedouble thevalue
isnull   false
/**
* @exception standardexception on nan or infinite float
*/
public void setvalue float thevalue  throws standardexception
value   numberdatatype normalizedouble thevalue
isnull   false
public void setvalue long thevalue
value   thevalue     no check needed
isnull   false
public void setvalue int thevalue
value   thevalue     no check needed
isnull   false
public  void setvalue number thevalue  throws standardexception
if  objectnull thevalue
return
if  sanitymanager assert
if    thevalue instanceof java lang double
sanitymanager throwassert     thevalue getclass
setvalue thevalue doublevalue
/**
called for an application setting this value using a bigdecimal
*/
public  void setbigdecimal number bigdecimal  throws standardexception
if  objectnull bigdecimal
return
// note bigdecimal.doublevalue() handles the case where
// its value is outside the range of a double. it returns
// infinity values which should throw an exception in setvalue(double).
setvalue bigdecimal doublevalue
/**
* @see numberdatavalue#setvalue
*
*/
public void setvalue boolean thevalue
value   thevalue?1 0
isnull   false
/*
* datavaluedescriptor interface
*/
/** @see datavaluedescriptor#typeprecedence */
public int typeprecedence
return typeid double_precedence
/*
** sql operators
*/
/**
* the = operator as called from the language module, as opposed to
* the storage module.
*
* @param left			the value on the left side of the =
* @param right			the value on the right side of the =
*						is not.
*
* @return	a sql boolean value telling whether the two parameters are equal
*
* @exception standardexception		thrown on error
*/
public booleandatavalue equals datavaluedescriptor left
datavaluedescriptor right
throws standardexception
return sqlboolean truthvalue left
right
left getdouble      right getdouble
/**
* the <> operator as called from the language module, as opposed to
* the storage module.
*
* @param left			the value on the left side of the <>
* @param right			the value on the right side of the <>
*						is not.
*
* @return	a sql boolean value telling whether the two parameters
*			are not equal
*
* @exception standardexception		thrown on error
*/
public booleandatavalue notequals datavaluedescriptor left
datavaluedescriptor right
throws standardexception
return sqlboolean truthvalue left
right
left getdouble      right getdouble
/**
* the < operator as called from the language module, as opposed to
* the storage module.
*
* @param left			the value on the left side of the <
* @param right			the value on the right side of the <
*
* @return	a sql boolean value telling whether the first operand is less
*			than the second operand
*
* @exception standardexception		thrown on error
*/
public booleandatavalue lessthan datavaluedescriptor left
datavaluedescriptor right
throws standardexception
return sqlboolean truthvalue left
right
left getdouble   < right getdouble
/**
* the > operator as called from the language module, as opposed to
* the storage module.
*
* @param left			the value on the left side of the >
* @param right			the value on the right side of the >
*
* @return	a sql boolean value telling whether the first operand is greater
*			than the second operand
*
* @exception standardexception		thrown on error
*/
public booleandatavalue greaterthan datavaluedescriptor left
datavaluedescriptor right
throws standardexception
return sqlboolean truthvalue left
right
left getdouble   > right getdouble
/**
* the <= operator as called from the language module, as opposed to
* the storage module.
*
* @param left			the value on the left side of the <=
* @param right			the value on the right side of the <=
*
* @return	a sql boolean value telling whether the first operand is less
*			than or equal to the second operand
*
* @exception standardexception		thrown on error
*/
public booleandatavalue lessorequals datavaluedescriptor left
datavaluedescriptor right
throws standardexception
return sqlboolean truthvalue left
right
left getdouble   <  right getdouble
/**
* the >= operator as called from the language module, as opposed to
* the storage module.
*
* @param left			the value on the left side of the >=
* @param right			the value on the right side of the >=
*
* @return	a sql boolean value telling whether the first operand is greater
*			than or equal to the second operand
*
* @exception standardexception		thrown on error
*/
public booleandatavalue greaterorequals datavaluedescriptor left
datavaluedescriptor right
throws standardexception
return sqlboolean truthvalue left
right
left getdouble   >  right getdouble
/**
* this method implements the + operator for "double + double".
*
* @param addend1	one of the addends
* @param addend2	the other addend
* @param result	the result of a previous call to this method, null
*					if not called yet
*
* @return	a sqldouble containing the result of the addition
*
* @exception standardexception		thrown on error
*/
public numberdatavalue plus numberdatavalue addend1
numberdatavalue addend2
numberdatavalue result
throws standardexception
if  result    null
result   new sqldouble
if  addend1 isnull      addend2 isnull
result settonull
return result
double tmpresult   addend1 getdouble     addend2 getdouble
// no need to check underflow (result rounded to 0.0),
// since the difference between two non-equal valid db2 double values is always non-zero in java.lang.double precision.
result setvalue tmpresult
return result
/**
* this method implements the - operator for "double - double".
*
* @param left	the value to be subtracted from
* @param right	the value to be subtracted
* @param result	the result of a previous call to this method, null
*					if not called yet
*
* @return	a sqldouble containing the result of the subtraction
*
* @exception standardexception		thrown on error
*/
public numberdatavalue minus numberdatavalue left
numberdatavalue right
numberdatavalue result
throws standardexception
if  result    null
result   new sqldouble
if  left isnull      right isnull
result settonull
return result
double tmpresult   left getdouble     right getdouble
// no need to check underflow (result rounded to 0.0),
// since no difference between two valid db2 double values can be rounded off to 0.0 in java.lang.double
result setvalue tmpresult
return result
/**
* this method implements the * operator for "double * double".
*
* @param left	the first value to be multiplied
* @param right	the second value to be multiplied
* @param result	the result of a previous call to this method, null
*					if not called yet
*
* @return	a sqldouble containing the result of the multiplication
*
* @exception standardexception		thrown on error
*/
public numberdatavalue times numberdatavalue left
numberdatavalue right
numberdatavalue result
throws standardexception
if  result    null
result   new sqldouble
if  left isnull      right isnull
result settonull
return result
double leftvalue   left getdouble
double rightvalue   right getdouble
double tempresult   leftvalue   rightvalue
// check underflow (result rounded to 0.0)
if    tempresult    0 0        leftvalue    0 0      rightvalue    0 0
throw standardexception newexception sqlstate lang_outside_range_for_datatype  typeid double_name
result setvalue tempresult
return result
/**
* this method implements the / operator for "double / double".
*
* @param dividend	the numerator
* @param divisor	the denominator
* @param result	the result of a previous call to this method, null
*					if not called yet
*
* @return	a sqldouble containing the result of the division
*
* @exception standardexception		thrown on error
*/
public numberdatavalue divide numberdatavalue dividend
numberdatavalue divisor
numberdatavalue result
throws standardexception
if  result    null
result   new sqldouble
if  dividend isnull      divisor isnull
result settonull
return result
/*
** for double division, we can't catch divide by zero with double.nan;
** so we check the divisor before the division.
*/
double divisorvalue   divisor getdouble
if  divisorvalue    0 0e0d
throw standardexception newexception sqlstate lang_divide_by_zero
double dividendvalue   dividend getdouble
double divideresult    dividendvalue   divisorvalue
if  double isnan divideresult
throw standardexception newexception sqlstate lang_divide_by_zero
// check underflow (result rounded to 0.0d)
if   divideresult    0 0d      dividendvalue    0 0d
throw standardexception newexception sqlstate lang_outside_range_for_datatype  typeid double_name
result setvalue divideresult
return result
/**
* this method implements the unary minus operator for double.
*
* @param result	the result of a previous call to this method, null
*					if not called yet
*
* @return	a sqldouble containing the result of the division
*
* @exception standardexception		thrown on error
*/
public numberdatavalue minus numberdatavalue result
throws standardexception
double		minusresult
if  result    null
result   new sqldouble
if  this isnull
result settonull
return result
/*
** doubles are assumed to be symmetric -- that is, their
** smallest negative value is representable as a positive
** value, and vice-versa.
*/
minusresult     this getdouble
result setvalue minusresult
return result
/**
* this method implements the isnegative method.
*
* @return  a boolean.  if this.value is negative, return true.
*          for positive values or null, return false.
*/
protected boolean isnegative
return  isnull       value < 0 0d
/*
* string display of value
*/
public string tostring
if  isnull
return
else
return double tostring value
/*
* hash code
*/
public int hashcode
long longval    long  value
double doublelongval    double  longval
/*
** note: this is coded to work around a bug in visual cafe 3.0.
** if longval is compared directly to value on that platform
** with the jit enabled, the values will not always compare
** as equal even when they should be equal. this happens with
** the value long.max_value, for example.
**
** assigning the long value back to a double and then doing
** the comparison works around the bug.
**
** this fixes cloudscape bug number 1757.
**
**		-	jeff lichtman
*/
if  doublelongval    value
longval   double doubletolongbits value
return  int   longval ^  longval >> 32
/*
* useful constants...
*/
static final int double_length		  32     must match the number of bytes written by dataoutput writedouble
private static final int base_memory_usage   classsize estimatebasefromcatalog  sqldouble class
public int estimatememoryusage
return base_memory_usage
/*
* object state
*/
private double	value
private boolean	isnull