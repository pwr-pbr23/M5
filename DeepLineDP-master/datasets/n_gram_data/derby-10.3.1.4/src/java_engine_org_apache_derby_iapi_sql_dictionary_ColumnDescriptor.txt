/*
derby - class org.apache.derby.iapi.sql.dictionary.columndescriptor
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi sql dictionary
import org apache derby iapi types datatypedescriptor
import org apache derby iapi types datavaluedescriptor
import org apache derby iapi reference sqlstate
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi sql statementtype
import org apache derby catalog defaultinfo
import org apache derby catalog uuid
import org apache derby impl sql compile columndefinitionnode
/**
* this class represents a column descriptor.
*
* public methods in this class are:
* <ol>
* <li>long getautoincstart()</li>
* <li>java.lang.string getcolumnname()</li>
* <li>defaultdescriptor getdefaultdescriptor(datadictionary dd)</li>
* <li>defaultinfo getdefaultinfo</li>
* <li>uuid getdefaultuuid</li>
* <li>datavaluedescriptor getdefaultvalue</li>
* <li>int getposition()</li>
* <li>uuid getreferencinguuid()</li>
* <li>tabledescriptor gettabledescriptor</li>
* <li>dtd gettype()</li>
* <li>hasnonnulldefault</li>
* <li>isautoincrement</li>
* <li>setcolumnname</li>
* <li>setposition</li>
*</ol>
*/
public final class columndescriptor extends tupledescriptor
// implementation
private defaultinfo			columndefaultinfo
private tabledescriptor		table
private string			columnname
private int			columnposition
private datatypedescriptor	columntype
private datavaluedescriptor	columndefault
private uuid				uuid
private uuid				defaultuuid
private long				autoincstart
private long				autoincinc
//following variable is used to see if the user is adding an autoincrement
//column, or if user is altering the existing autoincrement column to change
//the increment value or to change the start value. if none of the above,
//then it will be set to -1
long				autoinc_create_or_modify_start_increment    1
/**
* constructor for a columndescriptor when the column involved
* is an autoincrement column. the last parameter to this method
* indicates if an autoincrement column is getting added or if
* the autoincrement column is being modified to change the
* increment value or to change the start value
*
* @param columnname		the name of the column
* @param columnposition	the ordinal position of the column
* @param columntype		a datatypedescriptor for the type of
*				the column
* @param columndefault		a datavaluedescriptor representing the
*							default value of the column, if any
*							(null if no default)
* @param columndefaultinfo		the default info for the column.
* @param table			a tabledescriptor for the table the
*						column is in
* @param defaultuuid			the uuid for the default, if any.
* @param autoincstart	start value for an autoincrement column.
* @param autoincinc	increment for autoincrement column
* @param userchangedwhat		adding an autoincrement column or
*						changing increment value or start value of
*						the autoincrement column.
*/
public columndescriptor string columnname  int columnposition
datatypedescriptor columntype  datavaluedescriptor columndefault
defaultinfo columndefaultinfo
tabledescriptor table
uuid defaultuuid  long autoincstart  long autoincinc
long userchangedwhat
this columnname  columnposition  columntype  columndefault
columndefaultinfo  table  defaultuuid  autoincstart
autoincinc
autoinc_create_or_modify_start_increment   userchangedwhat
/**
* constructor for a columndescriptor
*
* @param columnname		the name of the column
* @param columnposition	the ordinal position of the column
* @param columntype		a datatypedescriptor for the type of
*				the column
* @param columndefault		a datavaluedescriptor representing the
*							default value of the column, if any
*							(null if no default)
* @param columndefaultinfo		the default info for the column.
* @param table			a tabledescriptor for the table the
*						column is in
* @param defaultuuid			the uuid for the default, if any.
* @param autoincstart	start value for an autoincrement column.
* @param autoincinc	increment for autoincrement column
*/
public columndescriptor string columnname  int columnposition
datatypedescriptor columntype  datavaluedescriptor columndefault
defaultinfo columndefaultinfo
tabledescriptor table
uuid defaultuuid  long autoincstart  long autoincinc
this columnname   columnname
this columnposition   columnposition
this columntype   columntype
this columndefault   columndefault
this columndefaultinfo   columndefaultinfo
this defaultuuid   defaultuuid
if  table    null
this table   table
this uuid   table getuuid
assertautoinc autoincinc    0
autoincinc
columndefaultinfo
this autoincstart   autoincstart
this autoincinc   autoincinc
/**
* constructor for a columndescriptor.  used when
* columndescriptor doesn't know/care about a table
* descriptor.
*
* @param columnname		the name of the column
* @param columnposition	the ordinal position of the column
* @param columntype		a datatypedescriptor for the type of
*				the column
* @param columndefault		a datavaluedescriptor representing the
*							default value of the column, if any
*							(null if no default)
* @param columndefaultinfo		the default info for the column.
* @param uuid			a uuid for the object that this column
*						is in.
* @param defaultuuid			the uuid for the default, if any.
* @param autoincstart	start value for an autoincrement column.
* @param autoincinc	increment for autoincrement column
*/
public columndescriptor string columnname  int columnposition
datatypedescriptor columntype  datavaluedescriptor columndefault
defaultinfo columndefaultinfo
uuid uuid
uuid defaultuuid
long autoincstart  long autoincinc
this columnname   columnname
this columnposition   columnposition
this columntype   columntype
this columndefault   columndefault
this columndefaultinfo   columndefaultinfo
this uuid   uuid
this defaultuuid   defaultuuid
assertautoinc autoincinc  0
autoincinc
columndefaultinfo
this autoincstart   autoincstart
this autoincinc   autoincinc
/**
* get the uuid of the object the column is a part of.
*
* @return	the uuid of the table the column is a part of.
*/
public uuid	getreferencinguuid
return uuid
/**
* get the tabledescriptor of the column's table.
*
* @return	the tabledescriptor of the column's table.
*/
public tabledescriptor	gettabledescriptor
return table
/**
* get the name of the column.
*
* @return	a string containing the name of the column.
*/
public string	getcolumnname
return columnname
/**
* sets the column name in case of rename column.
*
* @param newcolumnname	the new column name.
*/
public void	setcolumnname string newcolumnname
this columnname   newcolumnname
/**
* sets the table descriptor for the column.
*
* @param tabledescriptor	the table descriptor for this column
*/
public void	settabledescriptor tabledescriptor tabledescriptor
this table   tabledescriptor
/**
* get the ordinal position of the column (1 based)
*
* @return	the ordinal position of the column.
*/
public int	getposition
return columnposition
/**
* get the typedescriptor of the column's datatype.
*
* @return	the typedescriptor of the column's datatype.
*/
public datatypedescriptor gettype
return columntype
/**
* return whether or not there is a non-null default on this column.
*
* @return whether or not there is a non-null default on this column.
*/
public boolean hasnonnulldefault
if  columndefault    null      columndefault isnull
return true
return columndefaultinfo    null
/**
* get the default value for the column. for columns with primitive
* types, the object returned will be of the corresponding object type.
* for example, for a float column, getdefaultvalue() will return
* a float.
*
* @return	an object with the value and type of the default value
*		for the column. returns null if there is no default.
*/
public datavaluedescriptor getdefaultvalue
return columndefault
/**
* get the defaultinfo for this columndescriptor.
*
* @return the defaultinfo for this columndescriptor.
*/
public defaultinfo getdefaultinfo
return columndefaultinfo
/**
* get the uuid for the column default, if any.
*
* @return the uuid for the column default, if any.
*/
public uuid getdefaultuuid
return defaultuuid
/**
* get a defaultdescriptor for the default, if any, associated with this column.
*
* @param	dd	the datadictionary.
*
* @return	a defaultdescriptor if this column has a column default.
*/
public defaultdescriptor getdefaultdescriptor datadictionary dd
defaultdescriptor defaultdescriptor   null
if  defaultuuid    null
defaultdescriptor   new defaultdescriptor dd  defaultuuid  uuid  columnposition
return defaultdescriptor
/**
* is this column an autoincrement column?
*
* @return whether or not this is an autoincrement column
*/
public boolean isautoincrement
return  autoincinc    0
public boolean updatablebycursor
return false
/**
* is this column to have autoincremented value always ?
*/
public boolean isautoincalways
return  columndefaultinfo    null     isautoincrement
/**
* get the start value of an autoincrement column
*
* @return get the start value of an autoincrement column
*/
public long getautoincstart
return autoincstart
/**
* get the increment value given by the user for an autoincrement column
*
* @return the increment value for an autoincrement column
*/
public long getautoincinc
return autoincinc
public long getautoinc_create_or_modify_start_increment
return autoinc_create_or_modify_start_increment
/**
* set the ordinal position of the column.
*/
public void	setposition int columnposition
this columnposition   columnposition
/**
* convert the columndescriptor to a string.
*
* @return	a string representation of this columndescriptor
*/
public string	tostring
if  sanitymanager debug
/*
** note: this does not format table, because table.tostring()
** formats columns, leading to infinite recursion.
*/
return     columnname
columnposition
columntype
columndefault
uuid
defaultuuid
else
return
/** @see tupledescriptor#getdescriptorname */
public string getdescriptorname
// try and get rid of getcolumnname!
return columnname
/** @see tupledescriptor#getdescriptortype */
public string getdescriptortype
return
private static void assertautoinc boolean autoinc
long autoincinc
defaultinfo defaultinfo
if  sanitymanager debug
if  autoinc
sanitymanager assert  autoincinc    0
sanitymanager assert  defaultinfo    null
defaultinfo isdefaultvalueautoinc
else
sanitymanager assert  autoincinc    0
sanitymanager assert  defaultinfo    null
defaultinfo isdefaultvalueautoinc