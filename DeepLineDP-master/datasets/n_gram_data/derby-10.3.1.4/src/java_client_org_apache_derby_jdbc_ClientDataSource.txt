/*
derby - class org.apache.derby.client.clientdatasource
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby jdbc
import java sql connection
import java sql sqlexception
import javax sql datasource
import org apache derby client am logwriter
import org apache derby client am sqlexception
import org apache derby client net netconnection
import org apache derby client net netlogwriter
/**
* clientdatasource is a simple data source implementation
* that can be used for establishing connections in a
* non-pooling, non-distributed environment.
* the class clientconnectionpooldatasource can be used in a connection pooling environment,
* and the class clientxadatasource can be used in a distributed, and pooling
* environment. use these datasources if your application runs under
* jdbc3.0 or jdbc2.0, that is, on the following java virtual machines:
* <p/>
* <ul>
* <li> jdbc 3.0 - java 2 - jdk 1.4, j2se 5.0
* <li> jdbc 2.0 - java 2 - jdk 1.2,1.3
* </ul>
*
* <p>the example below registers a dnc data source object with a jndi naming service.
* <pre>
* org.apache.derby.client.clientdatasource datasource = new org.apache.derby.client.clientdatasource ();
* datasource.setservername ("my_derby_database_server");
* datasource.setdatabasename ("my_derby_database_name");
* javax.naming.context context = new javax.naming.initialcontext();
* context.bind ("jdbc/my_datasource_name", datasource);
* </pre>
* the first line of code in the example creates a data source object.
* the next two lines initialize the data source's
* properties. then a java object that references the initial jndi naming
* context is created by calling the
* initialcontext() constructor, which is provided by jndi.
* system properties (not shown) are used to tell jndi the
* service provider to use. the jndi name space is hierarchical,
* similar to the directory structure of many file
* systems. the data source object is bound to a logical jndi name
* by calling context.bind(). in this case the jndi name
* identifies a subcontext, "jdbc", of the root naming context
* and a logical name, "my_datasource_name", within the jdbc
* subcontext. this is all of the code required to deploy
* a data source object within jndi. this example is provided
* mainly for illustrative purposes. we expect that developers
* or system administrators will normally use a gui tool to
* deploy a data source object.
* <p/>
* once a data source has been registered with jndi,
* it can then be used by a jdbc application, as is shown in the
* following example.
* <pre>
* javax.naming.context context = new javax.naming.initialcontext ();
* javax.sql.datasource datasource = (javax.sql.datasource) context.lookup ("jdbc/my_datasource_name");
* java.sql.connection connection = datasource.getconnection ("user", "password");
* </pre>
* the first line in the example creates a java object
* that references the initial jndi naming context. next, the
* initial naming context is used to do a lookup operation
* using the logical name of the data source. the
* context.lookup() method returns a reference to a java object,
* which is narrowed to a javax.sql.datasource object. in
* the last line, the datasource.getconnection() method
* is called to produce a database connection.
* <p/>
* this simple data source subclass of clientbasedatasource maintains
* it's own private <code>password</code> property.
* <p/>
* the specified password, along with the user, is validated by derby.
* this property can be overwritten by specifing
* the password parameter on the datasource.getconnection() method call.
* <p/>
* this password property is not declared transient, and therefore
* may be serialized to a file in clear-text, or stored
* to a jndi server in clear-text when the data source is saved.
* care must taken by the user to prevent security
* breaches.
* <p/>
*/
public class clientdatasource extends clientbasedatasource implements datasource
private final static long serialversionuid   1894299584216955553l
public static final string classname__
// if a newer version of a serialized object has to be compatible with an older version, it is important that the newer version abides
// by the rules for compatible and incompatible changes.
//
// a compatible change is one that can be made to a new version of the class, which still keeps the stream compatible with older
// versions of the class. examples of compatible changes are:
//
// addition of new fields or classes does not affect serialization, as any new data in the stream is simply ignored by older
// versions. when the instance of an older version of the class is deserialized, the newly added field will be set to its default
// value.
// you can field change access modifiers like private, public, protected or package as they are not reflected to the serial
// stream.
// you can change a transient or static field to a non-transient or non-static field, as it is similar to adding a field.
// you can change the access modifiers for constructors and methods of the class. for instance a previously private method
// can now be made public, an instance method can be changed to static, etc. the only exception is that you cannot change
// the default signatures for readobject() and writeobject() if you are implementing custom serialization. the serialization
// process looks at only instance data, and not the methods of a class.
//
// changes which would render the stream incompatible are:
//
// once a class implements the serializable interface, you cannot later make it implement the externalizable interface, since
// this will result in the creation of an incompatible stream.
// deleting fields can cause a problem. now, when the object is serialized, an earlier version of the class would set the old
// field to its default value since nothing was available within the stream. consequently, this default data may lead the newly
// created object to assume an invalid state.
// changing a non-static into static or non-transient into transient is not permitted as it is equivalent to deleting fields.
// you also cannot change the field types within a class, as this would cause a failure when attempting to read in the original
// field into the new field.
// you cannot alter the position of the class in the class hierarchy. since the fully-qualified class name is written as part of
// the bytestream, this change will result in the creation of an incompatible stream.
// you cannot change the name of the class or the package it belongs to, as that information is written to the stream during
// serialization.
/**
* creates a simple derby data source with default property values for a non-pooling, non-distributed environment.
* no particular databasename or other properties are associated with the data source.
* <p/>
* every java bean should provide a constructor with no arguments since many beanboxes attempt to instantiate a bean
* by invoking its no-argument constructor.
*/
public clientdatasource
super
// ---------------------------interface methods-------------------------------
/**
* attempt to establish a database connection in a non-pooling, non-distributed environment.
*
* @return a connection to the database
*
* @throws java.sql.sqlexception if a database-access error occurs.
*/
public connection getconnection   throws sqlexception
return getconnection getuser    getpassword
/**
* attempt to establish a database connection in a non-pooling, non-distributed environment.
*
* @param user     the database user on whose behalf the connection is being made
* @param password the user's password
*
* @return a connection to the database
*
* @throws java.sql.sqlexception if a database-access error occurs.
*/
public connection getconnection string user  string password  throws sqlexception
// jdbc 2 connections will write driver trace info on a
// datasource-wide basis using the jdbc 2 data source log writer.
// this log writer may be narrowed to the connection-level
// this log writer will be passed to the agent constructor.
try
logwriter dnclogwriter   super computednclogwriterfornewconnection
updatedatasourcevalues tokenizeattributes getconnectionattributes    null
return clientdriver getfactory   newnetconnection
netlogwriter  dnclogwriter  user
password  this   1  false
catch sqlexception se
throw se getsqlexception