/*
derby - class org.apache.derby.impl.sql.execute.normalizeresultset
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl sql execute
import org apache derby iapi error standardexception
import org apache derby iapi reference sqlstate
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi sql activation
import org apache derby iapi sql resultcolumndescriptor
import org apache derby iapi sql resultdescription
import org apache derby iapi sql execute cursorresultset
import org apache derby iapi sql execute execrow
import org apache derby iapi sql execute noputresultset
import org apache derby iapi types datatypedescriptor
import org apache derby iapi types datavaluedescriptor
import org apache derby iapi types rowlocation
/**
* cast the rows from the source result set to match the format of the
* result set for the entire statement.
*/
class normalizeresultset extends noputresultsetimpl
implements cursorresultset
/*
** set in constructor and not altered during life of object.
*/
public noputresultset	source
private	execrow			normalizedrow
private	int				numcols
private int				startcol
/* resolve - we need to pass the resultdescription for this resultset
* as a parameter to the constructor and use it instead of the one from
* the activation
*/
private resultdescription resultdescription
/* info for caching dtss */
private datatypedescriptor desiredtypes
/**
* constructor for a normalizeresultset
*
* @param source					the noputresultset from which to get rows
*									to be normalized
* @param activation				the activation for this execution
* @param resultsetnumber			the resultsetnumber
* @param erdnumber					the integer for the resultdescription
*
* @exception standardexception	on error
*/
public normalizeresultset noputresultset source
activation activation  int resultsetnumber
int erdnumber
double optimizerestimatedrowcount
double optimizerestimatedcost
boolean forupdate  throws standardexception
super activation  resultsetnumber  optimizerestimatedrowcount
optimizerestimatedcost
this source   source
if  sanitymanager debug
if     activation getpreparedstatement   getsavedobject erdnumber
instanceof resultdescription
sanitymanager throwassert
// source expected to be non-null, mystery stress test bug
// - sometimes get nullpointerexception in opencore().
sanitymanager assert source    null
this resultdescription
resultdescription  activation getpreparedstatement   getsavedobject erdnumber
numcols   resultdescription getcolumncount
/*
an update row, for an update statement which sets n columns; i.e
update tab set x,y,z=.... where ...;
has,
before values of x,y,z after values of x,y,z and rowlocation.
need only normalize after values of x,y,z.
i.e insead of starting at index = 1, i need to start at index = 4.
also i needn't normalize the last value in the row.
*/
startcol    forupdate  ?   numcols   1   2    1   1
normalizedrow   activation getexecutionfactory   getvaluerow numcols
constructortime    getelapsedmillis begintime
//
// resultset interface (leftover from noputresultset)
//
/**
* open a scan on the source. scan parameters are evaluated
* at each open, so there is probably some way of altering
* their values...
*
* @exception standardexception thrown on failure
*/
public void	opencore   throws standardexception
begintime   getcurrenttimemillis
if  sanitymanager debug
sanitymanager assert    isopen
// source expected to be non-null, mystery stress test bug
// - sometimes get nullpointerexception in opencore().
if  sanitymanager debug
sanitymanager assert source    null
source opencore
isopen   true
numopens
opentime    getelapsedmillis begintime
/**
* reopen a scan on the table. scan parameters are evaluated
* at each open, so there is probably some way of altering
* their values...
*
* @exception standardexception thrown if cursor finished.
*/
public void	reopencore   throws standardexception
begintime   getcurrenttimemillis
if  sanitymanager debug
sanitymanager assert isopen
source reopencore
numopens
opentime    getelapsedmillis begintime
/**
*
* @exception standardexception thrown on failure
*/
public execrow	getnextrowcore   throws standardexception
execrow		sourcerow   null
execrow		result   null
begintime   getcurrenttimemillis
if   isopen
throw standardexception newexception sqlstate lang_result_set_not_open
sourcerow   source getnextrowcore
if  sourcerow    null
result   normalizerow sourcerow
rowsseen
currentrow   result
setcurrentrow result
nexttime    getelapsedmillis begintime
return result
/**
* if the result set has been opened,
* close the open scan.
*
* @exception standardexception thrown on error
*/
public void	close   throws standardexception
begintime   getcurrenttimemillis
if   isopen
currentrow   null
source close
super close
else
if  sanitymanager debug
sanitymanager debug
closetime    getelapsedmillis begintime
/**
* return the total amount of time spent in this resultset
*
* @param type	current_resultset_only - time spent only in this resultset
*				entire_resultset_tree  - time spent in this resultset and below.
*
* @return long		the total amount of time spent (in milliseconds).
*/
public long gettimespent int type
long tottime   constructortime   opentime   nexttime   closetime
if  type    noputresultset current_resultset_only
return	tottime   source gettimespent entire_resultset_tree
else
return tottime
//
// cursorresultset interface
//
/**
* gets information from its source. we might want
* to have this take a cursorresultset in its constructor some day,
* instead of doing a cast here?
*
* @see cursorresultset
*
* @return the row location of the current cursor row.
*
* @exception standardexception thrown on failure
*/
public rowlocation getrowlocation   throws standardexception
if  sanitymanager debug
sanitymanager assert source instanceof cursorresultset
return    cursorresultset source   getrowlocation
/**
* gets information from last getnextrow call.
*
* @see cursorresultset
*
* @return the last row returned.
*/
/* resolve - this should return activation.getcurrentrow(resultsetnumber),
* once there is such a method.  (currentrow is redundant)
*/
public execrow getcurrentrow
return currentrow
//
// class implementation
//
/**
* normalize a row.  for now, this means calling constructors through
* the type services to normalize a type to itself.  for example,
* if you're putting a char(30) value into a char(15) column, it
* calls a sqlchar constructor with the char(30) value, and the
* constructor truncates the value and makes sure that no non-blank
* characters are truncated.
*
* in the future, this mechanism will be extended to do type conversions,
* as well.  i didn't implement type conversions yet because it looks
* like a lot of work, and we needed char and varchar right away.
*
* @param sourcerow		the row to normalize
*
* @return	the normalized row
*
* @exception standardexception thrown on failure
*/
private execrow normalizerow execrow sourcerow  throws standardexception
int					whichcol
if  desiredtypes    null
desiredtypes   new datatypedescriptor
for  whichcol   1  whichcol <  numcols  whichcol
datatypedescriptor dtd   resultdescription getcolumndescriptor whichcol  gettype
desiredtypes   dtd
for  whichcol   1  whichcol <  numcols  whichcol
datavaluedescriptor sourcecol   sourcerow getcolumn whichcol
if  sourcecol    null
datavaluedescriptor	normalizedcol
// skip the before values in case of update
if  whichcol < startcol
normalizedcol   sourcecol
else
try
normalizedcol
desiredtypes normalize sourcecol
normalizedrow getcolumn whichcol
catch  standardexception se
// catch illegal null insert and add column info
if  se getmessageid   startswith sqlstate lang_null_into_non_null
resultcolumndescriptor columndescriptor
resultdescription getcolumndescriptor whichcol
throw
standardexception newexception sqlstate lang_null_into_non_null
columndescriptor getname
//just rethrow if not lang_null_into_non_null
throw se
normalizedrow setcolumn whichcol  normalizedcol
return normalizedrow
/**
* @see noputresultset#updaterow
*/
public void updaterow  execrow row  throws standardexception
source updaterow row
/**
* @see noputresultset#markrowasdeleted
*/
public void markrowasdeleted   throws standardexception
source markrowasdeleted