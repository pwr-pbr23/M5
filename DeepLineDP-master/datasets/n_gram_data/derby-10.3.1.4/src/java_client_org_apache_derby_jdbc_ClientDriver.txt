/*
derby - class org.apache.derby.jdbc.clientdriver
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby jdbc
import java util enumeration
import java util properties
import java sql sqlexception
import org apache derby client am configuration
import org apache derby client am sqlexception
import org apache derby client am utils
import org apache derby client am version
import org apache derby client am clientjdbcobjectfactory
import org apache derby client am clientmessageid
import org apache derby client net clientjdbcobjectfactoryimpl
import org apache derby shared common reference attribute
import org apache derby shared common reference sqlstate
import org apache derby shared common reference messageid
public class clientdriver implements java sql driver
private transient int tracefilesuffixindex_   0
private final static int derby_remote_protocol   1
private static clientjdbcobjectfactory factoryobject   null
static private sqlexception exceptionsonloaddriver__   null
// keep track of the registere driver so that we can deregister it if we're a stored proc.
static private clientdriver registereddriver__   null
static
// this may possibly hit the race-condition bug of java 1.1.
// the configuration static clause should execute before the following line does.
if  configuration exceptionsonloadresources    null
exceptionsonloaddriver__
utils accumulatesqlexception
configuration exceptionsonloadresources getsqlexception
exceptionsonloaddriver__
try
registereddriver__   new clientdriver
java sql drivermanager registerdriver registereddriver__
catch  java sql sqlexception e
// a null log writer is passed, because jdbc 1 sql exceptions are automatically traced
exceptionsonloaddriver__
new sqlexception null
new clientmessageid sqlstate jdbc_driver_register   getsqlexception
exceptionsonloaddriver__ setnextexception e
public clientdriver
public java sql connection connect string url
java util properties properties  throws java sql sqlexception
org apache derby client net netconnection conn
try
if  exceptionsonloaddriver__    null
throw exceptionsonloaddriver__
if  properties    null
properties   new java util properties
java util stringtokenizer urltokenizer
new java util stringtokenizer url     true
int protocol   tokenizeprotocol url  urltokenizer
if  protocol    0
return null     unrecognized database url prefix
string slashornull   null
if  protocol    derby_remote_protocol
try
slashornull   urltokenizer nexttoken
catch  java util nosuchelementexception e
// a null log writer is passed, because jdbc 1 sqlexceptions are automatically traced
throw new sqlexception null
new clientmessageid sqlstate malformed_url
url  e
string server   tokenizeservername urltokenizer  url
int port   tokenizeoptionalportnumber urltokenizer  url
if  port    0
port   clientdatasource propertydefault_portnumber
// database is the database name and attributes.  this will be
// sent to network server as the databasename
string database   tokenizedatabase urltokenizer  url
java util properties augmentedproperties   tokenizeurlproperties url  properties
database   appenddatabaseattributes database augmentedproperties
int tracelevel
try
tracelevel   clientdatasource gettracelevel augmentedproperties
catch  java lang numberformatexception e
// a null log writer is passed, because jdbc 1 sqlexceptions are automatically traced
throw new sqlexception null
new clientmessageid sqlstate tracelevel_format_invalid   e
// jdbc 1 connections will write driver trace info on a
// driver-wide basis using the jdbc 1 driver manager log writer.
// this log writer may be narrowed to the connection-level
// this log writer will be passed to the agent constructor.
org apache derby client am logwriter dnclogwriter
clientdatasource computednclogwriterfornewconnection java sql drivermanager getlogwriter
clientdatasource gettracedirectory augmentedproperties
clientdatasource gettracefile augmentedproperties
clientdatasource gettracefileappend augmentedproperties
tracelevel
tracefilesuffixindex_
conn    org apache derby client net netconnection getfactory
newnetconnection  org apache derby client net netlogwriter
dnclogwriter
java sql drivermanager getlogintimeout
server
port
database
augmentedproperties
catch sqlexception se
throw se getsqlexception
if conn isconnectionnull
return null
return conn
/**
* append attributes to the database name except for user/password
* which are sent as part of the protocol, and ssl which is used
* locally in the client.
* other attributes will  be sent to the server with the database name
* assumes augmentedproperties is not null
*
* @param database - short database name
* @param augmentedproperties - set of properties to append as attributes
* @return databasename + attributes (e.g. mydb;create=true)
*/
private string appenddatabaseattributes string database  properties augmentedproperties
stringbuffer longdatabase   new stringbuffer database
for  enumeration keys   augmentedproperties keys    keys hasmoreelements
string key    string  keys nextelement
if  key equals attribute username_attr
key equals attribute password_attr
key equals attribute ssl_attr
continue
longdatabase append     key       augmentedproperties getproperty key
return longdatabase tostring
public boolean acceptsurl string url  throws java sql sqlexception
try
java util stringtokenizer urltokenizer
new java util stringtokenizer url     true
int protocol   tokenizeprotocol url  urltokenizer
return protocol    0
catch   sqlexception se
throw se getsqlexception
public java sql driverpropertyinfo getpropertyinfo string url
java util properties properties  throws java sql sqlexception
java sql driverpropertyinfo driverpropertyinfo   new java sql driverpropertyinfo
// if there are no properties set already,
// then create a dummy properties just to make the calls go thru.
if  properties    null
properties   new java util properties
driverpropertyinfo
new java sql driverpropertyinfo attribute username_attr
properties getproperty attribute username_attr  clientdatasource propertydefault_user
driverpropertyinfo
new java sql driverpropertyinfo attribute password_attr
properties getproperty attribute password_attr
driverpropertyinfo description
sqlexception getmessageutil   gettextmessage
messageid conn_username_description
driverpropertyinfo description
sqlexception getmessageutil   gettextmessage
messageid conn_password_description
driverpropertyinfo required   true
driverpropertyinfo required   false     depending on the security mechanism
return driverpropertyinfo
public int getmajorversion
return version getmajorversion
public int getminorversion
return version getminorversion
public boolean jdbccompliant
return configuration jdbccompliant
// ----------------helper methods---------------------------------------------
// tokenize one of the following:
//  "jdbc:derby:"
// and return 0 if the protcol is unrecognized
// return derby_protocol for "jdbc:derby"
private static int tokenizeprotocol string url  java util stringtokenizer urltokenizer  throws sqlexception
// is this condition necessary, stringtokenizer constructor may do this for us
if  url    null
return 0
if  urltokenizer    null
return 0
try
string jdbc   urltokenizer nexttoken
if   jdbc equals
return 0
if   urltokenizer nexttoken    equals
return 0     skip over the first colon in jdbc derby
string dbname   urltokenizer nexttoken
int protocol   0
if  dbname equals        url indexof        1
// for derby as need to check for // since jdbc:derby: is also the
// embedded prefix
protocol   derby_remote_protocol
else
return 0
if   urltokenizer nexttoken    equals
return 0     skip over the second colon in jdbc derby
return protocol
catch  java util nosuchelementexception e
return 0
// tokenize "/server" from url jdbc:derby://server:port/
// returns server name
private static string tokenizeservername java util stringtokenizer urltokenizer
string url  throws sqlexception
try
if   urltokenizer nexttoken    equals
// a null log writer is passed, because jdbc 1 sqlexceptions are automatically traced
throw new sqlexception null
new clientmessageid sqlstate malformed_url   url
return urltokenizer nexttoken
catch  java util nosuchelementexception e
// a null log writer is passed, because jdbc 1 sqlexceptions are automatically traced
throw new sqlexception null
new clientmessageid sqlstate malformed_url   url
// tokenize "[:portnumber]/" from url jdbc:derby://server[:port]/
// returns the portnumber or zero if portnumber is not specified.
private static int tokenizeoptionalportnumber java util stringtokenizer urltokenizer
string url  throws sqlexception
try
string firsttoken   urltokenizer nexttoken
if  firsttoken equals
string port   urltokenizer nexttoken
if   urltokenizer nexttoken    equals
// a null log writer is passed, because jdbc 1 sqlexceptions are automatically traced
throw new sqlexception null
new clientmessageid sqlstate malformed_url   url
return integer parseint port
else if  firsttoken equals
return 0
else
// a null log writer is passed, because jdbc 1 sqlexceptions are automatically traced
throw new sqlexception null
new clientmessageid sqlstate malformed_url   url
catch  java util nosuchelementexception e
// a null log writer is passed, because jdbc 1 sqlexceptions are automatically traced
throw new sqlexception null
new clientmessageid sqlstate malformed_url   url  e
//return database name
private static string tokenizedatabase java util stringtokenizer urltokenizer
string url  throws sqlexception
try
// derby-618 - database name can contain spaces in the path
string databasename   urltokenizer nexttoken
return databasename
catch  java util nosuchelementexception e
// a null log writer is passed, because jdbc 1 sqlexceptions are automatically traced
throw new sqlexception null
new clientmessageid sqlstate malformed_url   url  e
private static java util properties tokenizeurlproperties string url
java util properties properties
throws sqlexception
string attributestring   null
int attributeindex    1
if   url    null
attributeindex   url indexof         1
attributestring   url substring attributeindex
return clientdatasource tokenizeattributes attributestring  properties
/**
*this method returns an implementation
*of clientjdbcobjectfactory depending on
*vm under use
*currently it returns either
*clientjdbcobjectfactoryimpl
*(or)
*clientjdbcobjectfactoryimpl40
*/
public static clientjdbcobjectfactory getfactory
if factoryobject  null
return factoryobject
if configuration supportsjdbc40
factoryobject   createjdbc40factoryimpl
else
factoryobject   createdefaultfactoryimpl
return factoryobject
/**
*returns an instance of the clientjdbcobjectfactoryimpl class
*/
private static clientjdbcobjectfactory createdefaultfactoryimpl
return  new clientjdbcobjectfactoryimpl
/**
*returns an instance of the clientjdbcobjectfactoryimpl40 class
*if a classnotfoundexception occurs then it returns an
*instance of clientjdbcobjectfactoryimpl
*
*if a future version of jdbc comes then
*a similar method would be added say createjdbcxxfactoryimpl
*in which if  the class is not found then it would
*return the lower version thus having a sort of cascading effect
*until it gets a valid instance
*/
private static clientjdbcobjectfactory createjdbc40factoryimpl
final string factoryname
try
return  clientjdbcobjectfactory
class forname factoryname  newinstance
catch  classnotfoundexception cnfe
return createdefaultfactoryimpl
catch  instantiationexception ie
return createdefaultfactoryimpl
catch  illegalaccessexception iae
return createdefaultfactoryimpl