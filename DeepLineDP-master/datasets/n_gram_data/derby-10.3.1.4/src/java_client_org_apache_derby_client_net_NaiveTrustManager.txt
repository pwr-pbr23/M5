/*
derby - class org.apache.derby.client.net.naivetrustmanager
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby client net
import javax net socketfactory
import javax net ssl sslcontext
import javax net ssl trustmanager
import javax net ssl x509trustmanager
import java security cert x509certificate
import java security cert certificateexception
/**
* this is a naive trust manager we use when we don't want server
* authentication. any certificate will be accepted.
**/
public class naivetrustmanager
implements x509trustmanager
/**
* we don't want more than one instence of this trustmanager
*/
private naivetrustmanager
static private trustmanager thismanager   null
/**
* generate a socket factory with this trust manager. derby
* utility routine which is not part of the x509trustmanager
* interface.
**/
public static socketfactory getsocketfactory
throws java security nosuchalgorithmexception
java security keymanagementexception
if  thismanager    null
thismanager   new trustmanager   new naivetrustmanager
sslcontext ctx   sslcontext getinstance
ctx init null     use default key manager
thismanager
null      use default random source
return ctx getsocketfactory
/**
* checks wether the we trust the client. since this trust manager
* is just for the derby clients, this routine is actually never
* called, but need to be here when we implement x509trustmanager.
* @param chain the client's certificate chain
* @param authtype authorization type (e.g. "rsa" or "dhe_dss")
**/
public void checkclienttrusted x509certificate chain
string authtype
throws certificateexception
// reject all attemtpts to truts a client. we should never end
// up here.
throw new certificateexception
/**
* checks wether the we trust the server, which we allways will.
* @param chain the server's certificate chain
* @param authtype authorization type (e.g. "rsa" or "dhe_dss")
**/
public void checkservertrusted x509certificate chain
string authtype
throws certificateexception
// do nothing. we trust everyone.
/**
* return an array of certificate authority certificates which are
* trusted for authenticating peers. not relevant for this trust
* manager.
*/
public x509certificate getacceptedissuers
return new x509certificate