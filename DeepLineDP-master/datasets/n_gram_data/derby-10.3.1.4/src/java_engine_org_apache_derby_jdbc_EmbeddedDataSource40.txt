/*
derby - class org.apache.derby.jdbc.embeddeddatasource40
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby jdbc
import java sql sqlexception
import javax sql datasource
import org apache derby impl jdbc util
import org apache derby iapi reference sqlstate
/**
embeddeddatasource40 is derby's datasource implementation for jdbc4.0.
<p>a datasource  is a factory for connection objects. an object that
implements the datasource interface will typically be registered with a
jndi service provider.
<p>
embeddeddatasource40 supports the jdbc 4.0 specification
for the j2se 6.0 java virtual machine environment. use embeddeddatasource
if your application is running in one of the following older
environments:
<ul>
<li> jdbc 3.0 - java 2 - jdk 1.4, j2se 5.0
</ul>
<p>the following is a list of properties that can be set on a derby
datasource object:
<p><b>standard datasource properties</b> (from jdbc 3.0 specification).
<ul><li><b><code>databasename</code></b> (string): <i>mandatory</i>
<br>this property must be set and it
identifies which database to access.  if a database named wombat located at
g:/db/wombat is to be accessed, then one should call
<code>setdatabasename("g:/db/wombat")</code> on the data source object.</li>
<li><b><code>datasourcename</code></b> (string): <i>optional</i>
<br> name for datasource.  not used by the data source object.  used for
informational purpose only.</li>
<li><b><code>description</code></b> (string): <i>optional</i>
<br>description of the data source.  not
used by the data source object.  used for informational purpose only.</li>
<li><b><code>password</code></b> (string): <i>optional</i>
<br>database password for the no argument <code>datasource.getconnection()</code>,
<code>connectionpooldatasource.getpooledconnection()</code>
and <code>xadatasource.getxaconnection()</code> methods.
<li><b><code>user</code></b> (string): <i>optional</i>
<br>database user for the no argument <code>datasource.getconnection()</code>,
<code>connectionpooldatasource.getpooledconnection()</code>
and <code>xadatasource.getxaconnection()</code> methods.
</ul>
<br><b>derby specific datasource properties.</b>
<ul>
<li><b><code>attributesaspassword</code></b> (boolean): <i>optional</i>
<br>if true, treat the password value in a
<code>datasource.getconnection(string user, string password)</code>,
<code>connectionpooldatasource.getpooledconnection(string user, string password)</code>
or <code>xadatasource.getxaconnection(string user, string password)</code> as a set
of connection attributes. the format of the attributes is the same as the format
of the attributes in the property connectionattributes. if false the password value
is treated normally as the password for the given user.
setting this property to true allows a connection request from an application to
provide more authentication information that just a password, for example the request
can include the user's password and an encrypted database's boot password.</li>
<li><b><code>connectionattributes</code></b> (string): <i>optional</i>
<br>defines a set of derby connection attributes for use in all connection requests.
the format of the string matches the format of the connection attributes in a derby jdbc url.
that is a list of attributes in the form <code><i>attribute</i>=<i>value</i></code>, each separated by semi-colon (';').
e.g. <code>setconnectionattributes("bootpassword=erd3234dggd3kazkj3000");</code>.
<br>the database name must be set by the datasource property <code>databasename</code> and not by setting the <code>databasename</code>
connection attribute in the <code>connectionattributes</code> property.
<br>
any attributes that can be set using a property of this datasource implementation
(e.g user, password) should not be set in connectionattributes. conflicting
settings in connectionattributes and properties of the datasource will lead to
unexpected behaviour.
<br>please see the derby documentation for a complete list of connection attributes. </li>
<li><b><code>createdatabase</code></b> (string): <i>optional</i>
<br>if set to the string "create", this will
cause a new database of <code>databasename</code> if that database does not already
exist.  the database is created when a connection object is obtained from
the data source. </li>
<li><b><code>shutdowndatabase</code></b> (string): <i>optional</i>
<br>if set to the string "shutdown",
this will cause the database to shutdown when a java.sql.connection object
is obtained from the data source.  e.g., if the data source is an
xadatasource, a getxaconnection().getconnection() is necessary to cause the
database to shutdown.
</ul>
<p><b>examples.</b>
<p>this is an example of setting a property directly using derby's
embeddeddatasource40 object.  this code is typically written by a system integrator :
<pre>
*
* import org.apache.derby.jdbc.*;
*
* // dbname is the database name
* // if create is true, create the database if necessary
* javax.sql.datasource makedatasource (string dbname, boolean create)
*	throws throwable
* {
*	embeddeddatasource40 ds = new embeddeddatasource40();
*	ds.setdatabasename(dbname);
*
*	if (create)
*		ds.setcreatedatabase("create");
*
*	return ds;
* }
</pre>
<p>example of setting properties thru reflection.  this code is typically
generated by tools or written by a system integrator: <pre>
*
* javax.sql.datasource makedatasource(string dbname)
*	throws throwable
* {
*	class[] parameter = new class[1];
*	parameter[0] = dbname.getclass();
*	datasource ds =  new embeddeddatasource40();
*	class cl = ds.getclass();
*
*	method setname = cl.getmethod("setdatabasename", parameter);
*	object[] arg = new object[1];
*	arg[0] = dbname;
*	setname.invoke(ds, arg);
*
*	return ds;
* }
</pre>
<p>example on how to register a data source object with a jndi naming
service.
<pre>
* datasource ds = makedatasource("mydb");
* context ctx = new initialcontext();
* ctx.bind("jdbc/mydb", ds);
</pre>
<p>example on how to retrieve a data source object from a jndi naming
service.
<pre>
* context ctx = new initialcontext();
* datasource ds = (datasource)ctx.lookup("jdbc/mydb");
</pre>
*/
public class embeddeddatasource40 extends embeddeddatasource
public embeddeddatasource40
/**
* returns false unless <code>interfaces</code> is implemented
*
* @param  interfaces             a class defining an interface.
* @return true                   if this implements the interface or
*                                directly or indirectly wraps an object
*                                that does.
* @throws java.sql.sqlexception  if an error occurs while determining
*                                whether this is a wrapper for an object
*                                with the given interface.
*/
public boolean iswrapperfor class<?> interfaces  throws sqlexception
return interfaces isinstance this
/**
* returns <code>this</code> if this class implements the interface
*
* @param  interfaces a class defining an interface
* @return an object that implements the interface
* @throws java.sql.sqlexption if no object if found that implements the
* interface
*/
public <t> t unwrap java lang class<t> interfaces
throws sqlexception
//derby does not implement non-standard methods on
//jdbc objects
//hence return this if this class implements the interface
//or throw an sqlexception
try
return interfaces cast this
catch  classcastexception cce
throw util generatecssqlexception sqlstate unable_to_unwrap
interfaces