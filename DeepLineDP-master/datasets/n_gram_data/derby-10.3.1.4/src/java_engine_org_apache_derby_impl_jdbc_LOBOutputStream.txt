/*
derby - class org.apache.derby.impl.jdbc.loboutputstream
licensed to the apache software foundation (asf) under one
or more contributor license agreements.  see the notice file
distributed with this work for additional information
regarding copyright ownership.  the asf licenses this file
to you under the apache license, version 2.0 (the
"license"); you may not use this file except in compliance
with the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing,
software distributed under the license is distributed on an
"as is" basis, without warranties or conditions of any
kind, either express or implied.  see the license for the
specific language governing permissions and limitations
under the license.
*/
package org apache derby impl jdbc
import java io bytearrayinputstream
import java io ioexception
import java io outputstream
import java sql sqlexception
import org apache derby iapi error standardexception
import org apache derby iapi reference sqlstate
import org apache derby iapi services i18n messageservice
import org apache derby shared common error exceptionutil
/**
* this is an output stream built on top of lobstreamcontrol.
* all the write methods are routed to lobstreamcontrol.
*/
public class loboutputstream extends outputstream
private boolean closed
private final lobstreamcontrol control
private long pos
loboutputstream lobstreamcontrol control  long position
closed   false
this control   control
pos   position
/**
* writes the specified byte to this output stream. the general
* contract for <code>write</code> is that one byte is written
* to the output stream. the byte to be written is the eight
* low-order bits of the argument <code>b</code>. the 24
* high-order bits of <code>b</code> are ignored.
* <p>
* subclasses of <code>outputstream</code> must provide an
* implementation for this method.
*
* @param b   the <code>byte</code>.
* @exception ioexception  if an i/o error occurs. in particular,
*             an <code>ioexception</code> may be thrown if the
*             output stream has been closed.
*/
public void write int b  throws ioexception
if  closed
throw new ioexception
messageservice gettextmessage
sqlstate lang_stream_closed
try
pos   control write b  pos
catch  sqlexception e
throw  new ioexception e getmessage
catch  standardexception se
throw new ioexception  se getmessage
/**
* writes <code>len</code> bytes from the specified byte array
* starting at offset <code>off</code> to this output stream.
* the general contract for <code>write(b, off, len)</code> is that
* some of the bytes in the array <code>b</code> are written to the
* output stream in order; element <code>b[off]</code> is the first
* byte written and <code>b[off+len-1]</code> is the last byte written
* by this operation.
* <p>
* the <code>write</code> method of <code>outputstream</code> calls
* the write method of one argument on each of the bytes to be
* written out. subclasses are encouraged to override this method and
* provide a more efficient implementation.
* <p>
* if <code>b</code> is <code>null</code>, a
* <code>nullpointerexception</code> is thrown.
* <p>
* if <code>off</code> is negative, or <code>len</code> is negative, or
* <code>off+len</code> is greater than the length of the array
* <code>b</code>, then an <tt>indexoutofboundsexception</tt> is thrown.
*
* @param b     the data.
* @param off   the start offset in the data.
* @param len   the number of bytes to write.
* @exception ioexception  if an i/o error occurs. in particular,
*             an <code>ioexception</code> is thrown if the output
*             stream is closed.
*/
public void write byte b  int off  int len  throws ioexception
if  closed
throw new ioexception
messageservice gettextmessage
sqlstate lang_stream_closed
try
pos   control write b  off  len  pos
catch  sqlexception e
if  e getsqlstate   equals
exceptionutil getsqlstatefromidentifier
sqlstate blob_invalid_offset
throw new arrayindexoutofboundsexception  e getmessage
throw new ioexception e getmessage
catch  standardexception se
throw new ioexception  se getmessage
/**
* closes this output stream and releases any system resources
* associated with this stream. the general contract of <code>close</code>
* is that it closes the output stream. a closed stream cannot perform
* output operations and cannot be reopened.
* <p>
* the <code>close</code> method of <code>outputstream</code> does nothing.
*
* @exception ioexception  if an i/o error occurs.
*/
public void close   throws ioexception
closed   true