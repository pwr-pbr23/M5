/*
derby - class org.apache.derby.jdbc.referenceabledatasource
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby jdbc
import java sql sqlexception
import java lang reflect
import java io serializable
import java io printwriter
import java util properties
/* -- jndi -- */
import javax naming namingexception
import javax naming referenceable
import javax naming reference
import javax naming stringrefaddr
import javax naming spi objectfactory
import javax naming context
import javax naming name
import javax naming reference
import javax naming refaddr
import java util hashtable
import java util enumeration
/**
derby datasource implementation base class.
referenceabledatasource provides support for jdbc standard datasource attributes and acts
as the objectfactory to generate derby datasource implementations.
<p>
the standard attributes provided by this class are:
<ul>
<li>databasename
<li>datasourcename
<li>description
<li>password
<li>user
</ul>
<br>
see the specific derby datasource implementation for details on their meaning.
<br>
see the jdbc 3.0 specification for more details.
*/
public class referenceabledatasource implements
javax naming referenceable
java io serializable
objectfactory
private static final long serialversionuid   1872877359127597176l
private static final class string_arg       getclass
private static final class int_arg     integer type
private static final class boolean_arg     boolean type
private string description
private string datasourcename
private string databasename
private string password
private string user
private int logintimeout
/** instance variables that will not be serialized */
transient private printwriter printer
/**
no-arg constructor.
*/
public referenceabledatasource
update
/*
* properties to be seen by bean - access thru reflection.
*/
/**
set the database name.  setting this property is mandatory.  if a
database named wombat at g:/db needs to be accessed, database name
should be set to "g:/db/wombat".  the database will be booted if it
is not already running in the system.
@param databasename the name of the database
*/
public final synchronized void setdatabasename string databasename
this databasename   databasename
update
public string getdatabasename
return databasename
/**
set the data source name.  the property is not mandatory.  it is used
for informational purposes only.
@param dsn the name of the data source
*/
public final void setdatasourcename string dsn
datasourcename   dsn
/** @return data source name */
public final string getdatasourcename
return datasourcename
/**
set the data source descripton. this property is not mandatory.
it is used for informational purposes only.
@param desc the description of the data source
*/
public final void setdescription string desc
description   desc
/** @return description */
public final string getdescription
return description
/**
set the <code>user</code> property for the data source.
this is user name for any data source getconnection() call
that takes no arguments.
*/
public final void setuser string user
this user   user
/** @return user */
public final string getuser
return user
/**
set the <code>password</code> property for the data source.
this is user's password for any data source getconnection() call
that takes no arguments.
*/
public final void setpassword string password
this password   password
/** @return password */
public final string getpassword
return password
/*
* datasource methods
*/
/**
* gets the maximum time in seconds that this data source can wait
* while attempting to connect to a database.  a value of zero
* means that the timeout is the default system timeout
* if there is one; otherwise it means that there is no timeout.
* when a data source object is created, the login timeout is
* initially zero.
*
* @return the data source login time limit
* @exception sqlexception if a database access error occurs.
*/
public int getlogintimeout   throws sqlexception
return logintimeout
/**
* sets the maximum time in seconds that this data source will wait
* while attempting to connect to a database.  a value of zero
* specifies that the timeout is the default system timeout
* if there is one; otherwise it specifies that there is no timeout.
* when a data source object is created, the login timeout is
* initially zero.
<p>
derby ignores this property.
* @param seconds the data source login time limit
* @exception sqlexception if a database access error occurs.
*/
public void setlogintimeout int seconds  throws sqlexception
logintimeout   seconds
/**
* get the log writer for this data source.
*
* <p>the log writer is a character output stream to which all logging
* and tracing messages for this data source object instance will be
* printed.  this includes messages printed by the methods of this
* object, messages printed by methods of other objects manufactured
* by this object, and so on.  messages printed to a data source
* specific log writer are not printed to the log writer associated
* with the java.sql.drivermanager class.  when a data source object is
* created the log writer is initially null, in other words, logging
* is disabled.
*
* @return the log writer for this data source, null if disabled
* @exception sqlexception if a database-access error occurs.
*/
public printwriter getlogwriter   throws sqlexception
return printer
/**
* set the log writer for this data source.
*
* <p>the log writer is a character output stream to which all logging
* and tracing messages for this data source object instance will be
* printed.  this includes messages printed by the methods of this
* object, messages printed by methods of other objects manufactured
* by this object, and so on.  messages printed to a data source
* specific log writer are not printed to the log writer associated
* with the java.sql.drivermanager class. when a data source object is
* created the log writer is initially null, in other words, logging
* is disabled.
*
* @param out the new log writer; to disable, set to null
* @exception sqlexception if a database-access error occurs.
*/
public void setlogwriter printwriter out  throws sqlexception
printer   out
/*
** reference methods etc.
*/
/*
* object factory method
*/
/**
re-create derby datasource given a reference.
@param obj the possibly null object containing location or reference
information that can be used in creating an object.
@param name the name of this object relative to namectx, or null if no
name is specified.
@param namectx the context relative to which the name parameter is
specified, or null if name is relative to the default initial context.
@param environment the possibly null environment that is used in
creating the object.
@return one of the derby datasource object created; null if an
object cannot be created.
@exception exception  if this object factory encountered an exception
while attempting to create an object, and no other object factories are
to be tried.
*/
public object getobjectinstance object obj
name name
context namectx
hashtable environment
throws exception
reference ref    reference obj
string classname   ref getclassname
object ds   class forname classname  newinstance
for  enumeration e   ref getall    e hasmoreelements
refaddr attribute    refaddr  e nextelement
string propertyname   attribute gettype
string value    string  attribute getcontent
string methodname       propertyname substring 0 1  touppercase java util locale english    propertyname substring 1
method m
object argvalue
try
m   ds getclass   getmethod methodname  string_arg
argvalue   value
catch  nosuchmethodexception nsme
try
m   ds getclass   getmethod methodname  int_arg
argvalue   integer valueof value
catch  nosuchmethodexception nsme2
m   ds getclass   getmethod methodname  boolean_arg
argvalue   boolean valueof value
m invoke ds  new object   argvalue
return ds
/**
referenceable method.
@exception namingexception cannot find named object
*/
public final reference getreference   throws namingexception
// these fields will be set by the jndi server when it decides to
// materialize a data source.
reference ref   new reference this getclass   getname

// look for all the getxxx methods in the class that take no arguments.
method methods   this getclass   getmethods
for  int i   0  i < methods length  i
method m   methods
// only look for simple getter methods.
if  m getparametertypes   length    0
continue
// only non-static methods
if  modifier isstatic m getmodifiers
continue
// only getxxx methods
string methodname   m getname
if   methodname length   < 5      methodname startswith
continue
class returntype   m getreturntype
if  integer type equals returntype     string_arg equals returntype     boolean type equals returntype
// setsomeproperty
// 01234
string propertyname   methodname substring 3 4  tolowercase java util locale english  concat methodname substring 4
try
object ov   m invoke this  null
//need to check for nullability for all the properties, otherwise
//rather than null, "null" string gets stored in jndi.
if  ov    null
ref add new stringrefaddr propertyname  ov tostring
catch  illegalaccessexception iae
catch  invocationtargetexception ite
return ref
void update
/**
return a connection for the derby family of data source implementations.
*/
java sql connection getconnection string username  string password  boolean requestpassword  throws sqlexception
return null