/*
derby - class org.apache.derby.impl.sql.catalog.syscolumnsrowfactory
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl sql catalog
import org apache derby iapi reference property
import org apache derby iapi types datatypedescriptor
import org apache derby iapi types typeid
import org apache derby iapi types datavaluedescriptor
import org apache derby iapi store raw rawstorefactory
import org apache derby iapi types datavaluefactory
import org apache derby iapi sql dictionary systemcolumn
import org apache derby catalog typedescriptor
import org apache derby catalog types basetypeidimpl
import org apache derby iapi types datavaluedescriptor
import org apache derby iapi types sqlvarchar
import org apache derby iapi types typeid
import org apache derby iapi types datatypedescriptor
import org apache derby iapi types datavaluefactory
import org apache derby iapi types rowlocation
import org apache derby iapi sql dictionary catalogrowfactory
import org apache derby iapi sql dictionary columndescriptor
import org apache derby iapi sql dictionary datadescriptorgenerator
import org apache derby iapi sql dictionary datadictionary
import org apache derby iapi sql dictionary tabledescriptor
import org apache derby iapi sql dictionary tupledescriptor
import org apache derby iapi sql dictionary schemadescriptor
import org apache derby iapi sql dictionary uniquetupledescriptor
import org apache derby iapi sql execute executioncontext
import org apache derby iapi sql execute executionfactory
import org apache derby iapi sql execute execindexrow
import org apache derby iapi sql execute execrow
import org apache derby iapi error standardexception
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi services monitor monitor
import org apache derby catalog types typedescriptorimpl
import org apache derby catalog defaultinfo
import org apache derby iapi services uuid uuidfactory
import org apache derby catalog uuid
import org apache derby impl sql compile columndefinitionnode
import org apache derby catalog types defaultinfoimpl
import org apache derby iapi types
import java io serializable
import java util properties
/**
* factory for creating a syscolumns row.
*
*
* @version 0.1
*/
public class syscolumnsrowfactory extends catalogrowfactory
static final string		tablename_string
/**
* old name for referenceid, used by upgrade
*/
public static final string		old_referenceid_name
protected static final int		syscolumns_column_count   9
/* column #s for syscolumns (1 based) */
//tableid is an obsolete name, it is better to use
//referenceid, but to make life easier you can use either
protected static final int		syscolumns_tableid   1
protected static final int		syscolumns_referenceid   1
protected static final int		syscolumns_columnname   2
protected static final int		syscolumns_columnnumber   3
protected static final int		syscolumns_columndatatype   4
protected static final int		syscolumns_columndefault   5
protected static final int		syscolumns_columndefaultid   6
protected static final int 		syscolumns_autoincrementvalue   7
protected static final int 		syscolumns_autoincrementstart   8
protected static final int		syscolumns_autoincrementinc   9
//private static final string	syscolumns_index1_name = "syscolumns_index1";
protected static final int		syscolumns_index1_id   0
//private static final string	syscolumns_index2_name = "syscolumns_index2";
protected static final int		syscolumns_index2_id   1
protected	static	final	string	referencedid_string
protected	static	final	string	columnname_string
protected	static	final	string	columndefaultid_string
private	static	final	boolean	uniqueness
true
false
private	static	final	string	uuids
catalog uuid
heap uuid
syscolumns_index1 uuid
syscolumns_index2 uuid
private static final int indexcolumnpositions
syscolumns_referenceid  syscolumns_columnname
syscolumns_columndefaultid
/////////////////////////////////////////////////////////////////////////////
//
//	state
//
/////////////////////////////////////////////////////////////////////////////
private	systemcolumn		columnlist
/////////////////////////////////////////////////////////////////////////////
//
//	constructors
//
/////////////////////////////////////////////////////////////////////////////
public	syscolumnsrowfactory uuidfactory uuidf  executionfactory ef  datavaluefactory dvf
boolean convertidtolower
this uuidf  ef  dvf  convertidtolower  tablename_string
public	syscolumnsrowfactory uuidfactory uuidf  executionfactory ef  datavaluefactory dvf
boolean convertidtolower  string myname
super uuidf ef dvf convertidtolower
initinfo syscolumns_column_count  myname  indexcolumnpositions  uniqueness  uuids
/////////////////////////////////////////////////////////////////////////////
//
//	methods
//
/////////////////////////////////////////////////////////////////////////////
/**
* make a syscolumns row
*
* @return	row suitable for inserting into syscolumns.
*
* @exception   standardexception thrown on failure
*/
public execrow makerow tupledescriptor td  tupledescriptor parent
throws standardexception
execrow    				row
datavaluedescriptor		col
string					colname   null
string					defaultid   null
string					tabid   null
integer					colid   null
typedescriptorimpl		typedesc   null
object					defaultserializable   null
long					autoincstart   0
long					autoincinc   0
//the syscolumns table's autoinc related columns change with different
//values depending on what happened to the autoinc column, ie is the
//user adding an autoincrement column, or is user changing the existing
//autoincrement column to change it's increment value or to change it's
//start value? following variable is used to keep track of what happened
//to the autoincrement column.
long autoinc_create_or_modify_start_increment    1
if  td    null
columndescriptor  column    columndescriptor td
/* lots of info in the column's type descriptor */
typedesc   column gettype   getcatalogtype
tabid   column getreferencinguuid   tostring
colname   column getcolumnname
colid   new integer column getposition
autoincstart   column getautoincstart
autoincinc     column getautoincinc
autoinc_create_or_modify_start_increment   column getautoinc_create_or_modify_start_increment
if  column getdefaultinfo      null
defaultserializable   column getdefaultinfo
else
defaultserializable   column getdefaultvalue
if   column getdefaultuuid      null
defaultid   column getdefaultuuid   tostring
/* insert info into syscolumns */
/* resolve - it would be nice to require less knowledge about syscolumns
* and have this be more table driven.
* resolve - we'd like to store the datatypedescriptor in a column.
*/
/* build the row to insert  */
row   getexecutionfactory   getvaluerow syscolumns_column_count
/* 1st column is referenceid (uuid - char(36)) */
row setcolumn syscolumns_referenceid  new sqlchar tabid
/* 2nd column is columnname (varchar(128)) */
row setcolumn syscolumns_columnname  new sqlvarchar colname
/* 3rd column is columnnumber (int) */
row setcolumn syscolumns_columnnumber  new sqlinteger colid
/* 4th column is columndatatype */
row setcolumn syscolumns_columndatatype
dvf getdatavalue typedesc
/* 5th column is columndefault */
row setcolumn syscolumns_columndefault
dvf getdatavalue defaultserializable
/* 6th column is defaultid (uuid - char(36)) */
row setcolumn syscolumns_columndefaultid  new sqlchar defaultid
if  autoinc_create_or_modify_start_increment    columndefinitionnode create_autoincrement
autoinc_create_or_modify_start_increment    columndefinitionnode modify_autoincrement_inc_value
user is adding an autoinc column or is changing the increment value of autoinc column
row setcolumn syscolumns_autoincrementvalue
new sqllongint autoincstart
row setcolumn syscolumns_autoincrementstart
new sqllongint autoincstart
row setcolumn syscolumns_autoincrementinc
new sqllongint autoincinc
else if  autoinc_create_or_modify_start_increment    columndefinitionnode modify_autoincrement_restart_value
user asked for restart with a new value  so don't change increment by and original start
//with values in the syscolumns table. just record the restart with value as the
//next value to be generated in the syscolumns table
columndescriptor  column    columndescriptor td
row setcolumn syscolumns_autoincrementvalue  new sqllongint autoincstart
row setcolumn syscolumns_autoincrementstart  new sqllongint autoincstart
row setcolumn syscolumns_autoincrementinc  new sqllongint
column gettabledescriptor   getcolumndescriptor colname  getautoincinc
else
row setcolumn syscolumns_autoincrementvalue
new sqllongint
row setcolumn syscolumns_autoincrementstart
new sqllongint
row setcolumn syscolumns_autoincrementinc
new sqllongint
return row
/**
* get the properties associated with creating the heap.
*
* @return the properties associated with creating the heap.
*/
public properties getcreateheapproperties
properties properties   new properties
// keep page size at 4k since its a big table
properties put property page_size_parameter
// default properties for system tables:
properties put rawstorefactory page_reserved_space_parameter
properties put rawstorefactory minimum_record_size_parameter
return properties
/**
* get the properties associated with creating the specified index.
*
* @param indexnumber	the specified index number.
*
* @return the properties associated with creating the specified index.
*/
public properties getcreateindexproperties int indexnumber
properties properties   new properties
// keep page size for all indexes at 4k since its a big table
properties put property page_size_parameter
return properties
///////////////////////////////////////////////////////////////////////////
//
//	abstract methods to be implemented by children of catalogrowfactory
//
///////////////////////////////////////////////////////////////////////////
/**
* make a columndescriptor out of a syscolumns row
*
* @param row 					a syscolumns row
* @param parenttupledescriptor	the uniquetupledescriptor for the object that is tied
*								to this column
* @param dd 					datadictionary
*
* @return	a column descriptor equivalent to a syscolumns row
*
* @exception   standardexception thrown on failure
*/
public tupledescriptor builddescriptor
execrow					row
tupledescriptor			parenttupledescriptor
datadictionary 			dd
throws standardexception
if  sanitymanager debug
sanitymanager assert row ncolumns      syscolumns_column_count
int columnnumber
string columnname
string defaultid
defaultinfoimpl		defaultinfo   null
columndescriptor coldesc
basetypeidimpl		typeid
typeid	wrappertypeid
datavaluedescriptor	defaultvalue   null
uuid				defaultuuid   null
uuid				uuid   null
uuidfactory			uuidfactory   getuuidfactory
long autoincstart  autoincinc
datadescriptorgenerator	ddg   dd getdatadescriptorgenerator
/*
** we're going to be getting the uuid for this sucka
** so make sure it is a uniquetupledescriptor.
*/
if  parenttupledescriptor    null
if  sanitymanager debug
if    parenttupledescriptor instanceof uniquetupledescriptor
sanitymanager throwassert parenttupledescriptor getclass   getname
uuid     uniquetupledescriptor parenttupledescriptor  getuuid
else
/* 1st column is referenceid (char(36)) */
uuid   uuidfactory recreateuuid row getcolumn syscolumns_referenceid
getstring
/* note: we get columns 5 and 6 next in order to work around
* a 1.3.0 hotspot bug.  (#4361550)
*/
// 5th column is columndefault (serialiazable)
object object   row getcolumn syscolumns_columndefault  getobject
if  object instanceof datavaluedescriptor
defaultvalue    datavaluedescriptor  object
else if  object instanceof defaultinfoimpl
defaultinfo    defaultinfoimpl  object
defaultvalue   defaultinfo getdefaultvalue
/* 6th column is defaultid (char(36)) */
defaultid   row getcolumn syscolumns_columndefaultid  getstring
if  defaultid    null
defaultuuid   uuidfactory recreateuuid defaultid
/* 2nd column is columnname (varchar(128)) */
columnname   row getcolumn syscolumns_columnname  getstring
/* 3rd column is columnnumber (int) */
columnnumber   row getcolumn syscolumns_columnnumber  getint
/* 4th column is columndatatype */
/*
** what is stored in the column is a typedescriptorimpl, which
** points to a basetypeidimpl.  these are simple types that are
** intended to be movable to the client, so they don't have
** the entire implementation.  we need to wrap them in datatypeservices
** and typeid objects that contain the full implementations for
** language processing.
*/
typedescriptorimpl typedescriptor    typedescriptorimpl  row getcolumn syscolumns_columndatatype
getobject
typeid   typedescriptor gettypeid
/*
** the basetypeidimpl tells what type of typeid it is supposed to
** be wrapped in.
*/
wrappertypeid
typeid  monitor newinstancefromidentifier typeid wrappertypeformatid
/* wrap the basetypeidimpl in a full type id */
wrappertypeid setnestedtypeid typeid
/* wrap the typedescriptorimpl in a full datatypedescriptor */
datatypedescriptor datatypeservices   new datatypedescriptor typedescriptor
wrappertypeid
/* 7th column is autoincrementvalue, not cached in descriptor (long) */
/* 8th column is autoincrementstart (long) */
autoincstart   row getcolumn syscolumns_autoincrementstart  getlong
/* 9th column is autoincrementinc (long) */
autoincinc   row getcolumn syscolumns_autoincrementinc  getlong
datavaluedescriptor col   row getcolumn syscolumns_autoincrementstart
autoincstart   col getlong
col   row getcolumn syscolumns_autoincrementinc
autoincinc   col getlong
coldesc   new columndescriptor columnname  columnnumber
datatypeservices  defaultvalue  defaultinfo  uuid
defaultuuid  autoincstart  autoincinc
return coldesc
/**
*	get the index number for the primary key index on this catalog.
*
*	@return	a 0-based number
*
*/
public	int	getprimarykeyindexnumber
return syscolumns_index1_id
/**
* builds a list of columns suitable for creating this catalog.
*
*
* @return array of systemcolumn suitable for making this catalog.
*/
public systemcolumn	buildcolumnlist
if   columnlist    null     return columnlist
columnlist   new systemcolumn
// describe columns
columnlist
new systemcolumnimpl
convertidcase  referencedid_string  			   column name
syscolumns_referenceid    column number
0 					   precision
0 					   scale
false 				   nullability
datatype
true 				   built in type
36					   maxlength
columnlist
new systemcolumnimpl 			   sql identifier
convertidcase  columnname_string  		   column name
syscolumns_columnname 	   column number
false				   nullability
columnlist
new systemcolumnimpl
convertidcase     	   column name
syscolumns_columnnumber 	   column number
0 					   precision
0 					   scale
false 				   nullability
datatype
true 				   built in type
4					   maxlength
columnlist
new systemcolumnimpl
convertidcase     			   column name
syscolumns_columndatatype 	   column number
0 					   precision
0 					   scale
false 				   nullability
datatype
false 				   built in type
typedescriptor maximum_width_unknown    maxlength
columnlist
new systemcolumnimpl
convertidcase     			   column name
syscolumns_columndefault 	   column number
0 					   precision
0 					   scale
true 				   nullability
datatype
false 				   built in type
typedescriptor maximum_width_unknown    maxlength
columnlist
new systemcolumnimpl
convertidcase  columndefaultid_string  			   column name
syscolumns_columndefaultid    column number
0 					   precision
0 					   scale
true 				   nullability
datatype
true 				   built in type
36					   maxlength
// new columns for autoincrement.
columnlist
new systemcolumnimpl
convertidcase         column name
syscolumns_autoincrementvalue
0
0
true
true
typeid longint_maxwidth
columnlist
new systemcolumnimpl
convertidcase         column name
syscolumns_autoincrementstart
0
0
true
true
typeid longint_maxwidth
columnlist
new systemcolumnimpl
convertidcase         column name
syscolumns_autoincrementinc
0
0
true
true
typeid longint_maxwidth
return	columnlist