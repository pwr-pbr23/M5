/*
derby - class org.apache.derby.iapi.sql.compile.nodefactory
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi sql compile
import java util properties
import org apache derby iapi services context contextmanager
import org apache derby iapi sql dictionary datadictionary
import org apache derby iapi sql dictionary tabledescriptor
import org apache derby iapi error standardexception
/* strictly speaking we shouldn't import classes under the impl hierarchy here
* but this is work in progress.
* manish - wed mar 28 13:05:19 pst 2001
*/
import	org apache derby impl sql compile querytreenode
import org apache derby impl sql compile resultcolumnlist
import org apache derby impl sql compile resultsetnode
/**
this is an interface for nodefactories.
<p>
there is expected to be only one of these configured per database.
*/
public abstract class nodefactory
/**
module name for the monitor's module locating system.
*/
public static final string module
/**
* tell whether to do join order optimization.
*
* @return	boolean.true means do join order optimization, boolean.false
*			means don't do it.
*/
public abstract boolean	dojoinorderoptimization
/**
* get a node that takes no initializer arguments.
*
* @param nodetype		identifier for the type of node.
* @param cm			a contextmanager
*
* @return	a new querytree node.
*
* @exception standardexception		thrown on error.
*/
public abstract querytreenode getnode int nodetype
contextmanager cm  throws standardexception
/**
* get a node that takes one initializer argument.
*
* @param nodetype		identifier for the type of node.
* @param arg1	the initializer argument
* @param cm			a contextmanager
*
* @return	a new querytree node.
*
* @exception standardexception		thrown on error.
*/
public final querytreenode getnode int nodetype  object arg1  contextmanager cm
throws standardexception
querytreenode retval   getnode nodetype  cm
retval init arg1
return  retval
/**
* get a node that takes two initializer arguments.
*
* @param nodetype		identifier for the type of node.
* @param arg1	an initializer argument
* @param arg2	an initializer argument
* @param cm			a contextmanager
*
* @return	a new querytree node.
*
* @exception standardexception		thrown on error.
*/
public final querytreenode getnode int nodetype
object arg1
object arg2
contextmanager cm
throws standardexception
querytreenode retval    getnode nodetype  cm
retval init arg1  arg2
return  retval
/**
* get a node that takes three initializer arguments.
*
* @param nodetype		identifier for the type of node.
* @param arg1	an initializer argument
* @param arg2	an initializer argument
* @param arg3	an initializer argument
* @param cm			a contextmanager
*
* @return	a new querytree node.
*
* @exception standardexception		thrown on error.
*/
public final querytreenode getnode int nodetype
object arg1
object arg2
object arg3
contextmanager cm
throws standardexception
querytreenode retval    getnode nodetype  cm
retval init arg1  arg2  arg3
return  retval
/**
* get a node that takes four initializer arguments.
*
* @param nodetype		identifier for the type of node.
* @param arg1	an initializer argument
* @param arg2	an initializer argument
* @param arg3	an initializer argument
* @param arg4	an initializer argument
* @param cm			a contextmanager
*
* @return	a new querytree node.
*
* @exception standardexception		thrown on error.
*/
public querytreenode getnode int nodetype
object arg1
object arg2
object arg3
object arg4
contextmanager cm
throws standardexception
querytreenode retval    getnode nodetype  cm
retval init arg1  arg2  arg3  arg4
return  retval
/**
* get a node that takes five initializer arguments.
*
* @param nodetype		identifier for the type of node.
* @param arg1	an initializer argument
* @param arg2	an initializer argument
* @param arg3	an initializer argument
* @param arg4	an initializer argument
* @param arg5	an initializer argument
* @param cm			a contextmanager
*
* @return	a new querytree node.
*
* @exception standardexception		thrown on error.
*/
public querytreenode getnode int nodetype
object arg1
object arg2
object arg3
object arg4
object arg5
contextmanager cm
throws standardexception
querytreenode retval    getnode nodetype  cm
retval init arg1  arg2  arg3  arg4  arg5
return  retval
/**
* get a node that takes six initializer arguments.
*
* @param nodetype		identifier for the type of node.
* @param arg1	an initializer argument
* @param arg2	an initializer argument
* @param arg3	an initializer argument
* @param arg4	an initializer argument
* @param arg5	an initializer argument
* @param arg6	an initializer argument
* @param cm			a contextmanager
*
* @return	a new querytree node.
*
* @exception standardexception		thrown on error.
*/
public final querytreenode getnode int nodetype
object arg1
object arg2
object arg3
object arg4
object arg5
object arg6
contextmanager cm
throws standardexception
querytreenode retval    getnode nodetype  cm
retval init arg1  arg2  arg3  arg4  arg5  arg6
return  retval
/**
* get a node that takes seven initializer arguments.
*
* @param nodetype		identifier for the type of node.
* @param arg1	an initializer argument
* @param arg2	an initializer argument
* @param arg3	an initializer argument
* @param arg4	an initializer argument
* @param arg5	an initializer argument
* @param arg6	an initializer argument
* @param arg7	an initializer argument
* @param cm			a contextmanager
*
* @return	a new querytree node.
*
* @exception standardexception		thrown on error.
*/
public final querytreenode getnode int nodetype
object arg1
object arg2
object arg3
object arg4
object arg5
object arg6
object arg7
contextmanager cm
throws standardexception
querytreenode retval    getnode nodetype  cm
retval init arg1  arg2  arg3  arg4  arg5  arg6  arg7
return  retval
/**
* get a node that takes eight initializer arguments.
*
* @param nodetype		identifier for the type of node.
* @param arg1	an initializer argument
* @param arg2	an initializer argument
* @param arg3	an initializer argument
* @param arg4	an initializer argument
* @param arg5	an initializer argument
* @param arg6	an initializer argument
* @param arg7	an initializer argument
* @param arg8	an initializer argument
* @param cm			a contextmanager
*
* @return	a new querytree node.
*
* @exception standardexception		thrown on error.
*/
public final querytreenode getnode int nodetype
object arg1
object arg2
object arg3
object arg4
object arg5
object arg6
object arg7
object arg8
contextmanager cm
throws standardexception
querytreenode retval    getnode nodetype  cm
retval init arg1  arg2  arg3  arg4  arg5  arg6  arg7  arg8
return  retval
/**
* get a node that takes nine initializer arguments.
*
* @param nodetype		identifier for the type of node.
* @param arg1	an initializer argument
* @param arg2	an initializer argument
* @param arg3	an initializer argument
* @param arg4	an initializer argument
* @param arg5	an initializer argument
* @param arg6	an initializer argument
* @param arg7	an initializer argument
* @param arg8	an initializer argument
* @param arg9	an initializer argument
* @param cm			a contextmanager
*
* @return	a new querytree node.
*
* @exception standardexception		thrown on error.
*/
public final querytreenode getnode int nodetype
object arg1
object arg2
object arg3
object arg4
object arg5
object arg6
object arg7
object arg8
object arg9
contextmanager cm
throws standardexception
querytreenode retval    getnode nodetype  cm
retval init arg1  arg2  arg3  arg4  arg5  arg6  arg7  arg8  arg9
return  retval
/**
* get a node that takes ten initializer arguments.
*
* @param nodetype		identifier for the type of node.
* @param arg1	an initializer argument
* @param arg2	an initializer argument
* @param arg3	an initializer argument
* @param arg4	an initializer argument
* @param arg5	an initializer argument
* @param arg6	an initializer argument
* @param arg7	an initializer argument
* @param arg8	an initializer argument
* @param arg9	an initializer argument
* @param arg10	an initializer argument
* @param cm			a contextmanager
*
* @return	a new querytree node.
*
* @exception standardexception		thrown on error.
*/
public final querytreenode getnode int nodetype
object arg1
object arg2
object arg3
object arg4
object arg5
object arg6
object arg7
object arg8
object arg9
object arg10
contextmanager cm
throws standardexception
querytreenode retval    getnode nodetype  cm
retval init arg1  arg2  arg3  arg4  arg5  arg6  arg7  arg8  arg9
arg10
return  retval
/**
* get a node that takes eleven initializer arguments.
*
* @param nodetype		identifier for the type of node.
* @param arg1	an initializer argument
* @param arg2	an initializer argument
* @param arg3	an initializer argument
* @param arg4	an initializer argument
* @param arg5	an initializer argument
* @param arg6	an initializer argument
* @param arg7	an initializer argument
* @param arg8	an initializer argument
* @param arg9	an initializer argument
* @param arg10	an initializer argument
* @param arg11	an initializer argument
* @param cm			a contextmanager
*
* @return	a new querytree node.
*
* @exception standardexception		thrown on error.
*/
public final querytreenode getnode int nodetype
object arg1
object arg2
object arg3
object arg4
object arg5
object arg6
object arg7
object arg8
object arg9
object arg10
object arg11
contextmanager cm
throws standardexception
querytreenode retval    getnode nodetype  cm
retval init arg1  arg2  arg3  arg4  arg5  arg6  arg7  arg8  arg9
arg10  arg11
return  retval
/**
* get a node that takes twelve initializer arguments.
*
* @param nodetype		identifier for the type of node.
* @param arg1	an initializer argument
* @param arg2	an initializer argument
* @param arg3	an initializer argument
* @param arg4	an initializer argument
* @param arg5	an initializer argument
* @param arg6	an initializer argument
* @param arg7	an initializer argument
* @param arg8	an initializer argument
* @param arg9	an initializer argument
* @param arg10	an initializer argument
* @param arg11	an initializer argument
* @param arg12	an initializer argument
* @param cm			a contextmanager
*
* @return	a new querytree node.
*
* @exception standardexception		thrown on error.
*/
public final querytreenode getnode int nodetype
object arg1
object arg2
object arg3
object arg4
object arg5
object arg6
object arg7
object arg8
object arg9
object arg10
object arg11
object arg12
contextmanager cm
throws standardexception
querytreenode retval    getnode nodetype  cm
retval init arg1  arg2  arg3  arg4  arg5  arg6  arg7  arg8  arg9
arg10  arg11  arg12
return  retval
/**
* get a node that takes thirteen initializer arguments.
*
* @param nodetype		identifier for the type of node.
* @param arg1	an initializer argument
* @param arg2	an initializer argument
* @param arg3	an initializer argument
* @param arg4	an initializer argument
* @param arg5	an initializer argument
* @param arg6	an initializer argument
* @param arg7	an initializer argument
* @param arg8	an initializer argument
* @param arg9	an initializer argument
* @param arg10	an initializer argument
* @param arg11	an initializer argument
* @param arg12	an initializer argument
* @param arg13	an initializer argument
* @param cm			a contextmanager
*
* @return	a new querytree node.
*
* @exception standardexception		thrown on error.
*/
public final querytreenode getnode int nodetype
object arg1
object arg2
object arg3
object arg4
object arg5
object arg6
object arg7
object arg8
object arg9
object arg10
object arg11
object arg12
object arg13
contextmanager cm
throws standardexception
querytreenode retval    getnode nodetype  cm
retval init arg1  arg2  arg3  arg4  arg5  arg6  arg7  arg8  arg9
arg10  arg11  arg12  arg13
return  retval
/**
* get a node that takes fourteen initializer arguments.
*
* @param nodetype		identifier for the type of node.
* @param arg1	an initializer argument
* @param arg2	an initializer argument
* @param arg3	an initializer argument
* @param arg4	an initializer argument
* @param arg5	an initializer argument
* @param arg6	an initializer argument
* @param arg7	an initializer argument
* @param arg8	an initializer argument
* @param arg9	an initializer argument
* @param arg10	an initializer argument
* @param arg11	an initializer argument
* @param arg12	an initializer argument
* @param arg13	an initializer argument
* @param arg14	an initializer argument
* @param cm			a contextmanager
*
* @return	a new querytree node.
*
* @exception standardexception		thrown on error.
*/
public final querytreenode getnode int nodetype
object arg1
object arg2
object arg3
object arg4
object arg5
object arg6
object arg7
object arg8
object arg9
object arg10
object arg11
object arg12
object arg13
object arg14
contextmanager cm
throws standardexception
querytreenode retval    getnode nodetype  cm
retval init arg1  arg2  arg3  arg4  arg5  arg6  arg7  arg8  arg9
arg10  arg11  arg12  arg13  arg14
return  retval
/**
* get one of the several types of create alias nodes. carved out of parser
* so this could be used by alter publication.
*
* @param aliasname				the name of the alias
* @param targetname			the full path/method name
* @param aliasspecificinfo	the full path of the target method name,
*								if any
* @param aliastype	the type of alias to create
* @param delimitedidentifier	whether or not to treat the class name
*								as a delimited identifier if trying to
*								resolve it as a class alias.
* @param cm			a contextmanager
*
* @return	a createaliasnode matching the given parameters
*
* @exception standardexception		thrown on error
*/
public abstract querytreenode
getcreatealiasnode
object aliasname
object targetname
object aliasspecificinfo
char aliastype
boolean delimitedidentifier
contextmanager cm
throws standardexception
/**
* return a correctly configured node that represents
* a scan from a vti dervied from the tabledesciptor.
* used to convert from system diagnostic tables
* to vti scans.
* @param td table that is really a vti
* @param correlationname correlation name of table clause
* @param resultcolumns columns extracted from table.
* @param tableproperties properties being passed onto the table scan
* @param cm current context manager
*/
public abstract resultsetnode maptableasvti
tabledescriptor td
string correlationname
resultcolumnlist resultcolumns
properties tableproperties
contextmanager cm  throws standardexception