/*
derby - class org.apache.derby.drda.networkservercontrol
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby drda
import java io printwriter
import java net inetaddress
import java net inet6address
import java net url
import java util properties
import org apache derby iapi reference property
import org apache derby iapi services property propertyutil
import org apache derby impl drda networkservercontrolimpl
/**
networkservercontrol provides the ability to start a network server or
connect to a running network server to shutdown, configure or retreive
diagnostic information.  with the exception of ping, these commands
can  only be performed from the  machine on which the server is running.
commands can be performed from  the command line with the following
arguments:
<p>
<ul>
<li>start [-h &lt;host>] [-p &lt;portnumber>] [-ssl &lt;sslmode&gt;]:  this starts the network
server on the port/host specified or on localhost, port 1527 if no
host/port is specified and no properties are set to override the
defaults. by default network server will only listen for
connections from the machine on which it is running.
use -h 0.0.0.0 to listen on all interfaces or -h &lt;hostname> to listen
on a specific interface on a  multiple ip machine.
for documentation on &lt;sslmode&gt;, consult the server and administration guide.</li>
<li>shutdown [-h &lt;host>][-p &lt;portnumber>] [-ssl &lt;sslmode&gt;]: this shutdowns the network 	server on the host and port specified or on the local host and port
1527(default) if no host or port is specified.  </li>
<li>ping [-h &lt;host>] [-p &lt;portnumber>] [-ssl &lt;sslmode&gt;]
this will test whether the network server is up.
</li>
<li>sysinfo [-h &lt;host>] [-p &lt;portnumber>] [-ssl &lt;sslmode&gt;]:  this prints
classpath and version information about the network server,
the jvm and the derby engine.
<li>runtimeinfo [-h &lt;host] [-p &lt;portnumber] [-ssl &lt;sslmode&gt;]: this prints
extensive debbugging information about sessions, threads,
prepared statements, and memory usage for the running network server.
</li>
<li>logconnections {on | off} [-h &lt;host>] [-p &lt;portnumber>] [-ssl &lt;sslmode&gt;]:
this turns logging of connections on or off.
connections are logged to derby.log.
default is off.</li>
<li>maxthreads &lt;max> [-h &lt;host>][-p &lt;portnumber>] [-ssl &lt;sslmode&gt;]:
this sets the maximum number of threads that can be used for connections.
default 0 (unlimitted).
</li>
<li>timeslice &lt;milliseconds> [-h &lt;host>][-p &lt;portnumber>] [-ssl &lt;sslmode&gt;]:
this sets the time each session can have using a connection thread
before yielding to a waiting session. default is 0 (no yeild).
</li>
<li>trace {on | off} [-s &lt;session id>] [-h &lt;host>] [-p &lt;portnumber>]  [-ssl &lt;sslmode&gt;]:
this turns drda tracing on or off for the specified session or if no
session is  specified for all sessions. default is off</li>
<li>tracedirectory &lt;tracedirectory> [-h &lt;host>] [-p &lt;portnumber>]  [-ssl &lt;sslmode&gt;]:
this changes where new trace files will be placed.
for sessions with tracing already turned on,
trace files remain in the previous location.
default is derby.system.home, if it is set.
otherwise the default is the current directory.</li>
</ul>
<p>properties can be set in the derby.properties file or on the command line.
properties on the command line take precedence over properties in the
derby.properties file.  arguments on the command line take precedence
over properties.
the following is a list of properties that can be set for
networkservercontrol:
<ul><li>derby.drda.portnumber=&lt;port number>: this property
indicates which port should be used for the network server. </li>
<li>derby.drda.host=&lt;host name  or ip address >: this property
indicates the ip address to which networkservercontrol should connect
<li>derby.drda.tracedirectory=&lt;trace directory>: this property
indicates where to put trace files. </li>
<li>derby.drda.traceall=true:  this property turns on tracing for
all sessions. default is tracing is off.</li>
<li>derby.drda.logconnections=true:  this property turns on logging
of connections. default is connections are not logged.</li>
<li>derby.drda.minthreads=&lt;value>: if this property
is set, the &lt;value> number of threads will be created when the network server is
booted. </li>
<li>derby.drda.maxthreads=&lt;value>: if this property
is set, the &lt;value> is the maximum number of connection threads that will be
created.  if a session starts when there are no connection threads available
and the maximum number of threads has been reached, it will wait until a
conection thread becomes available. </li>
<li>derby.drda.timeslice=&lt;milliseconds>: if this property
is set, the connection threads will not check for waiting sessions until the
current session has been working for &lt;milliseconds>.
a value of 0 causes the thread to work on the current session until the
session exits. if this property is not set, the default value is 0. </li>
<li>derby.drda.sslmode=&lt;sslmode&gt: this property sets the ssl
mode of the server.
</li>
<p><b>examples.</b>
<p>this is an example of shutting down the server on port 1621.
<pre>
java org.apache.derby.drda.networkservercontrol shutdown -p 1621
</pre>
<p>this is an example of turning tracing on for session 3
<pre>
java org.apache.derby.drda.networkservercontrol  trace on -s 3
</pre>
<p>this is an example of starting and then shutting down the network
server on port 1621 on machine myhost
<pre>
java org.apache.derby.drda.networkservercontrol  start -h myhost -p 1621
java org.apache.derby.drda.networkservercontrol  shutdown -h myhost -p 1621
</pre>
<p> this is an example of starting and shutting down the network server in the example
above with the api.
<pre>
networkservercontrol servercontrol = new networkservercontrol(inetaddress.getbyname("myhost"),1621)
servercontrol.shutdown();
</pre>
*/
public class networkservercontrol
public final static int default_portnumber   1527
private final static string derbynet_jar
private final static string policy_filename
private final static string policy_file_property
private final static string derby_hostname_wildcard
private final static string ipv6_hostname_wildcard
private final static string socket_permission_hostname_wildcard
private networkservercontrolimpl serverimpl
// constructor
/**
*
* creates a networkservercontrol object that is configured to control
* a network server on a  specified port and inetaddress.
*<p>
* <b> examples: </b>
* <p>
* to configure for port 1621 and listen on the loopback address:
*<pre>
*  networkservercontrol  util = new
* networkservercontrol(inetaddress.getbyname("localhost"), 1621);
* </pre>
*
* @param address     the ip address of the network server host.
*                     address cannot be null.
* @param portnumber  port number server is to used. if <= 0,
*                    default port number is used
*
* @throws             exception on error
*/
public networkservercontrol inetaddress address int portnumber  throws exception
serverimpl   new networkservercontrolimpl address
portnumber
/**
*
* creates a networkservercontrol object that is configured to control
* a network server on the default host(localhost)
* and the default port(1527) unless derby.drda.portnumber and
* derby.drda.host are set.
* <p><pre>
* new networkservercontrol()
*
* is equivalent to calling
*
* new networkservercontrol(inetaddress.getbyname("localhost"),1527);
* </pre>
*
* @throws             exception on error
*/
public networkservercontrol   throws exception
serverimpl   new networkservercontrolimpl
/**
* main routine for networkservercontrol
*
* @param args	array of arguments indicating command to be executed.
* see class comments for more information
*/
public static void main string args
networkservercontrolimpl server   null
//
// the following variable lets us preserve the error printing behavior
// seen before we started installing a security manager. errors can be
// raised as we figure out whether we need to install a security manager
// and during the actual installation of the security manager. we need
// to print out these errors. the old error printing behavior assumed
// that all errors were generated inside networkservercontrolimpl and
// were reported there.
//
boolean                                 printerrors   true
try
server   new networkservercontrolimpl
int     command   server parseargs  args
//
// in order to run secure-by-default, we install a security manager
// if one isn't already installed. this feature is described by derby-2196.
//
if   needssecuritymanager  server  command
verifysecuritystate  server
installsecuritymanager  server
//
// from this point on, networkservercontrolimpl is responsible for
// printing errors.
//
printerrors   false
server executework  command
catch  exception e
//if there was an error, exit(1)
if   e getmessage      null
e getmessage   equals networkservercontrolimpl unexpected_err
printerrors
if  server    null
server consoleexceptionprint e
else
e printstacktrace        default output stream is system out
// else, we've already printed a trace, so just exit.
system exit 1
system exit 0
/**********************************************************************
* public networkservercontrol  commands
* the server commands throw exceptions for errors, so that users can handle
* them themselves.
************************************************************************
**/
/** start a network server
*  this method will launch a separate thread and start network server.
*  this method  may return before the server is ready to accept connections.
*  use the ping method to verify that the server has started.
*
* <p>
*  note: an alternate method to starting the network server with the api,
*  is to use the derby.drda.startnetworkserver property in
*  derby.properties.
*
*
* @param consolewriter   printwriter to which server console will be
*                        output. null will disable console output.
*
* @exception exception if there is an error starting the server.
*
* @see #shutdown
*/
public void start printwriter consolewriter  throws exception
serverimpl start consolewriter
/**
* shutdown a network server.
* shuts down the network server listening on the port and inetaddress
* specified in the constructor for this networkservercontrol object.
*
* @exception exception	throws an exception if an error occurs
*/
public void shutdown
throws exception
serverimpl shutdown
/**
* check if network server is started
* excecutes and returns without error if the server has started
*
* @exception exception	throws an exception if an error occurs
*/
public void  ping   throws exception
serverimpl ping
/**
* turn tracing on or off for the specified connection
* on the network server.
*
* @param on true to turn tracing on, false to turn tracing off.
*
* @exception exception	throws an exception if an error occurs
*/
public void trace boolean on
throws exception
serverimpl trace on
/**
* turn tracing on or off for all connections on the network server.
*
* @param connnum connection number. note: connection numbers will print
*                in the derby error log if logconnections is on
* @param on true to turn tracing on, false to turn tracing off.
*
* @exception exception	throws an exception if an error occurs
*/
public void trace int connnum  boolean on
throws exception
serverimpl trace connnum  on
/**
* turn logging connections on or off. when logging is turned on a message is
* written to the derby error log each time a connection
* is made.
*
* @param on			true to turn on, false to turn  off
*
* @exception exception	throws an exception if an error occurs
*/
public void logconnections boolean on
throws exception
serverimpl logconnections on
/**
* set directory for trace files. the directory must be on the machine
* where the server is running.
*
* @param tracedirectory	directory for trace files on machine
*                          where server is running
*
* @exception exception	throws an exception if an error occurs
*/
public void settracedirectory string tracedirectory
throws exception
serverimpl sendsettracedirectory tracedirectory
/**
* return classpath and version information about the running
* network server.
*
* @return sysinfo output
* @exception exception	throws an exception if an error occurs
*/
public string getsysinfo
throws exception
return serverimpl sysinfo
/**
* return detailed session runtime information about sessions,
* prepared statements, and memory usage for the running network server.
*
* @return run time information
* @exception exception	throws an exception if an error occurs
*/
public string getruntimeinfo
throws exception
return serverimpl runtimeinfo
/**
* set network server maxthread parameter.  this is the maximum number
* of threads that will be used for jdbc client connections.   settimeslice
* should also be set so that clients will yield appropriately.
*
* @param max		maximum number of connection threads.
*                  if <= 0, connection threads will be created when
*                  there are no free connection threads.
*
* @exception exception	throws an exception if an error occurs
* @see #settimeslice
*/
public void setmaxthreads int max  throws exception
serverimpl netsetmaxthreads max
/** returns the current maxthreads setting for the running network server
*
* @return maxthreads setting
* @exception exception	throws an exception if an error occurs
* @see #setmaxthreads
*/
public int getmaxthreads   throws exception
string val  serverimpl getcurrentproperties   getproperty property drda_prop_maxthreads
return integer parseint val
/**
* set network server connection time slice parameter.
* this should be set and is only relevant if setmaxthreads > 0.
*
* @param timeslice	number of milliseconds given to each session before yielding to
*						another session, if <=0, never yield.
*
* @exception exception	throws an exception if an error occurs
* @see #setmaxthreads
*/
public void settimeslice int timeslice  throws exception
serverimpl netsettimeslice timeslice
/** return the current timeslice setting for the running network server
*
* @return timeslice  setting
* @exception exception throws an exception if an error occurs
* @see #settimeslice
*/
public int gettimeslice   throws exception
string val
serverimpl getcurrentproperties   getproperty property drda_prop_timeslice
return integer parseint val
/**
* get current network server properties
*
* @return properties object containing network server properties
* @exception exception	throws an exception if an error occurs
*/
public properties getcurrentproperties   throws exception
return serverimpl getcurrentproperties
/** protected methods ***/
/***
* set the client locale. used by servlet for localization
* @param locale  locale to use
*
*/
protected void setclientlocale string locale
serverimpl clientlocale   locale
/**
* return true if we need to install a security manager. all of the
* following must apply. see derby-2196.
*
* <ul>
* <li>the vm was booted with networkservercontro.main() as the
* entry point. this is handled by the fact that this method is only called
* by main().</li>
* <li>the vm isn't already running a securitymanager.</li>
* <li>the command must be "start".</li>
* <li>the customer didn't specify the -nosecuritymanager flag on the startup command
* line.</li>
* </ul>
*/
private static  boolean needssecuritymanager  networkservercontrolimpl server  int command
throws exception
return
system getsecuritymanager      null
command    networkservercontrolimpl command_start
server runningunsecure
/**
* verify that all prerequisites are met before bringing up a security
* manager. see derby-2196. if prerequisites aren't met, raise an
* exception which explains how to get up and running. at one point, we were going to require
* that authentication be enabled before bringing up a security manager.
* this, however, gave rise to incompatibilities. see derby-2757.
*
* currently, this method is a nop.
*/
private static  void verifysecuritystate  networkservercontrolimpl server
throws exception
/**
* install a securitymanager governed by the basic startup policy. see derby-2196.
*/
private static  void installsecuritymanager  networkservercontrolimpl server
throws exception
//
// the basic policy refers to some properties. make sure they are set.
//
if   propertyutil getsystemproperty  property system_home_property      null
system setproperty  property system_home_property  propertyutil getsystemproperty
//
// forcibly set the following property so that it will be correctly
// substituted into the default policy file. this is the hostname for
// socketpermissions. this is an internal property which customers
// may not override.
//
system setproperty  property derby_security_host  gethostnameforsocketpermission  server
//
// forcibly set the following property. this is the parameter in
// the basic policy which points at the directory where the embedded and
// network codesources. do not let the customer
// override this
//
string      derbyinstallurl   getcodesourceprefix  server
system setproperty  property derby_install_url  derbyinstallurl
//
// now install a securitymanager, using the basic policy file.
//
string      policyfileurl   getpolicyfileurl
system setproperty  policy_file_property  policyfileurl
securitymanager     securitymanager   new securitymanager
system setsecuritymanager  securitymanager
//
// report success.
//
string  successmessage   server localizemessage     null
server consolemessage  successmessage
/**
* get the hostname as a value suitable for substituting into the
* default server policy file. the special
* wildcard valuse "0.0.0.0" and "::" are forced to be "*" since that is the wildcard
* hostname understood by socketpermission. socketpermission does
* not understand the "0.0.0.0" and "::" wildcards. ipv6 addresses are
* enclosed in square brackets. this logic arose from two jiras:
* derby-2811 and derby-2874.
*/
private static string  gethostnameforsocketpermission  networkservercontrolimpl server
throws exception
//
// by now, server.getpropertyinfo() has been called, followed by
// server.parseargs(). so the server knows its hostname.
//
string  hostname   server gethost
if
hostnamesequal  derby_hostname_wildcard  hostname
ipv6_hostname_wildcard equals  hostname
hostname   socket_permission_hostname_wildcard
else if   isipv6address  hostname
hostname       hostname
return hostname
// return true if the two hostnames are equivalent
private static  boolean hostnamesequal  string left  string right
try
inetaddress leftaddress   inetaddress getbyname  left
inetaddress rightaddress   inetaddress getbyname  right
return leftaddress equals  rightaddress
catch  exception e    return false
// return true if the host address is an ipv6 address
private static  boolean isipv6address  string hostname
if   hostname    null     return false
//
// first make sure that the address is composed entirely
// of hex digits and colons.
//
int         count   hostname length
for   int i   0  i < count  i
char    currentchar   hostname charat  i
if   currentchar          continue
if   character digit  currentchar  16   >  0     continue
return false
//
// ok, now see whether the address is parsed as an ipv6 address.
//
try
inetaddress address   inetaddress getbyname  hostname
return  address instanceof inet6address
catch  exception e    return false
/**
*<p>
* find the url of the library directory which holds derby.jar and
* derbynet.jar. the basic policy assumes that both jar files live in the
* same directory.
* </p>
*/
private static  string  getcodesourceprefix  networkservercontrolimpl server
throws exception
string  derbyneturl   networkservercontrol class getprotectiondomain   getcodesource   getlocation   toexternalform
int         idx   derbyneturl indexof  derbynet_jar
//
// if the customer isn't running against jar files, our basic policy
// won't work.
//
if   idx < 0
string  errormessage   server localizemessage     null
// this throws an exception and exits this method
server consoleerror  errormessage
//
// otherwise, we have the directory prefix for our url.
//
string  directoryprefix   derbyneturl substring  0  idx
return directoryprefix
/**
*<p>
* get the url of the policy file. typically, this will be some pointer into
* derbynet.jar.
* </p>
*/
private static  string getpolicyfileurl
throws exception
string      resourcename
networkservercontrol class getpackage   getname   replace
policy_filename
url         resourceurl   networkservercontrol class getclassloader   getresource  resourcename
string      stringform   resourceurl toexternalform
return stringform