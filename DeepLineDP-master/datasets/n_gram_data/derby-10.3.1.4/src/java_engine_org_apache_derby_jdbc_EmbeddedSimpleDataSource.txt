/*
derby - class org.apache.derby.jdbc.embeddedsimpledatasource
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby jdbc
import org apache derby iapi jdbc jdbcboot
import org apache derby iapi reference attribute
import org apache derby iapi reference messageid
import java sql connection
import java sql sqlexception
import java io printwriter
import java util properties
/* -- new jdbc 20 extension types --- */
import javax sql datasource
import org apache derby iapi reference sqlstate
import org apache derby iapi services i18n messageservice
import org apache derby impl jdbc util
/**
*
*
* embeddedsimpledatasource is derby's datasource implementation
* for j2me/cdc/foundation. it is also supports j2se platforms.
*
*
* supports the same properties as embeddeddatasource, see that class for details.
* <p>
embeddedsimpledatasource automatically supports the correct jdbc specification version
for the java virtual machine's environment.
<ul>
<li> jdbc optional package for cdc/foundation profile(jsr-169) - j2me - cdc/foundation
<li> jdbc 3.0 - java 2 - jdk 1.4, j2se 5.0
</ul>
* @see embeddeddatasource
*
*/
public final class embeddedsimpledatasource implements datasource
private string password
private string user
/**
* the database name.
*
* @serial
*/
private string databasename
/**
* the data source name.
*
* @serial
*/
private string datasourcename
/**
* description of the database.
*
* @serial
*/
private string description
/**
* set to "create" if the database should be created.
*
* @serial
*/
private string createdatabase
/**
* set to "shutdown" if the database should be shutdown.
*
* @serial
*/
private string shutdowndatabase
/**
* derby specific connection attributes.
*
* @serial
*/
private string connectionattributes
/** instance variables that will not be serialized */
transient private printwriter printer
transient private int logintimeout
// unlike a datasource, localdriver is shared by all
// derby databases in the same jvm.
transient private internaldriver driver
transient private string jdbcurl
/**
* no-arg constructor.
*/
public embeddedsimpledatasource
/*
* datasource methods
*/
/**
* gets the maximum time in seconds that this data source can wait while
* attempting to connect to a database. a value of zero means that the
* timeout is the default system timeout if there is one; otherwise it means
* that there is no timeout. when a data source object is created, the login
* timeout is initially zero.
*
* @return the data source login time limit
* @exception sqlexception
*                if a database access error occurs.
*/
public int getlogintimeout   throws sqlexception
return logintimeout
/**
* sets the maximum time in seconds that this data source will wait while
* attempting to connect to a database. a value of zero specifies that the
* timeout is the default system timeout if there is one; otherwise it
* specifies that there is no timeout. when a data source object is created,
* the login timeout is initially zero.
* <p>
* derby ignores this property.
*
* @param seconds
*            the data source login time limit
* @exception sqlexception
*                if a database access error occurs.
*/
public void setlogintimeout int seconds  throws sqlexception
logintimeout   seconds
/**
* get the log writer for this data source.
*
* <p>
* the log writer is a character output stream to which all logging and
* tracing messages for this data source object instance will be printed.
* this includes messages printed by the methods of this object, messages
* printed by methods of other objects manufactured by this object, and so
* on. messages printed to a data source specific log writer are not printed
* to the log writer associated with the java.sql.drivermanager class. when
* a data source object is created the log writer is initially null, in
* other words, logging is disabled.
*
* @return the log writer for this data source, null if disabled
* @exception sqlexception
*                if a database-access error occurs.
*/
public printwriter getlogwriter   throws sqlexception
return printer
/**
* set the log writer for this data source.
*
* <p>
* the log writer is a character output stream to which all logging and
* tracing messages for this data source object instance will be printed.
* this includes messages printed by the methods of this object, messages
* printed by methods of other objects manufactured by this object, and so
* on. messages printed to a data source specific log writer are not printed
* to the log writer associated with the java.sql.drivermanager class. when
* a data source object is created the log writer is initially null, in
* other words, logging is disabled.
*
* @param out
*            the new log writer; to disable, set to null
* @exception sqlexception
*                if a database-access error occurs.
*/
public void setlogwriter printwriter out  throws sqlexception
printer   out
/*
* properties to be seen by bean - access thru reflection.
*/
/**
* set the database name. setting this property is mandatory. if a database
* named wombat at g:/db needs to be accessed, database name should be set
* to "g:/db/wombat". the database will be booted if it is not already
* running in the system.
*
* @param databasename
*            the name of the database
*/
public final synchronized void setdatabasename string databasename
this databasename   databasename
update
public string getdatabasename
return databasename
/**
* set the data source name. the property is not mandatory. it is used for
* informational purposes only.
*
* @param dsn
*            the name of the data source
*/
public final void setdatasourcename string dsn
datasourcename   dsn
/** @return data source name */
public final string getdatasourcename
return datasourcename
/**
* set the data source descripton. this property is not mandatory. it is
* used for informational purposes only.
*
* @param desc
*            the description of the data source
*/
public final void setdescription string desc
description   desc
/** @return description */
public final string getdescription
return description
/**
* set the <code>user</code> property for the data source. this is user
* name for any data source getconnection() call that takes no arguments.
*/
public final void setuser string user
this user   user
/** @return user */
public final string getuser
return user
/**
* set the <code>password</code> property for the data source. this is
* user's password for any data source getconnection() call that takes no
* arguments.
*/
public final void setpassword string password
this password   password
/** @return password */
public final string getpassword
return password
/**
* set this property to create a new database. if this property is not set,
* the database (identified by databasename) is assumed to be already
* existing.
*
* @param create
*            if set to the string "create", this data source will try to
*            create a new database of databasename, or boot the database if
*            one by that name already exists.
*/
public final void setcreatedatabase string create
if  create    null
create tolowercase java util locale english
equals
createdatabase   create
else
createdatabase   null
/** @return "create" if create is set, or null if not */
public final string getcreatedatabase
return createdatabase
/**
* set this property if one wishes to shutdown the database identified by
* databasename.
*
* @param shutdown
*            if set to the string "shutdown", this data source will
*            shutdown the database if it is running.
*/
public final void setshutdowndatabase string shutdown
if  shutdown    null    shutdown equalsignorecase
shutdowndatabase   shutdown
else
shutdowndatabase   null
/** @return "shutdown" if shutdown is set, or null if not */
public final string getshutdowndatabase
return shutdowndatabase
/**
* set this property to pass in more derby specific connection url
* attributes.
<br>
any attributes that can be set using a property of this datasource implementation
(e.g user, password) should not be set in connectionattributes. conflicting
settings in connectionattributes and properties of the datasource will lead to
unexpected behaviour.
*
* @param prop
*            set to the list of derby connection attributes separated
*            by semi-colons. e.g., to specify an encryption bootpassword of
*            "x8hhk2adf", and set upgrade to true, do the following:
*
* <pre>
*
* ds.setconnectionattributes("bootpassword=x8hhk2adf;upgrade=true");
*
* </pre>
*
* see derby's documentation for complete list.
*/
public final void setconnectionattributes string prop
connectionattributes   prop
update
/** @return derby specific connection url attributes */
public final string getconnectionattributes
return connectionattributes
/*
* datasource methods
*/
/**
* attempt to establish a database connection.
*
* @return a connection to the database
* @exception sqlexception
*                if a database-access error occurs.
*/
public final connection getconnection   throws sqlexception
return this getconnection getuser    getpassword
/**
* attempt to establish a database connection with the given username and
* password. if the attributeaspassword property is set to true then the
* password argument is taken to be a list of connection attributes with the
* same format as the connectionattributes property.
*
*
* @param username
*            the database user on whose behalf the connection is being made
* @param password
*            the user's password
* @return a connection to the database
* @exception sqlexception
*                if a database-access error occurs.
*/
public final connection getconnection string username  string password
throws sqlexception
properties info   new properties
if  username    null
info put attribute username_attr  username
if  password    null
info put attribute password_attr  password
if  createdatabase    null
info put attribute create_attr
if  shutdowndatabase    null
info put attribute shutdown_attr
connection conn   finddriver   connect jdbcurl  info
// jdbc driver's getconnection method returns null if
// the driver does not handle the request's url.
if  conn    null
throw util generatecssqlexception sqlstate property_invalid_value
attribute dbname_attr  getdatabasename
return conn
private internaldriver finddriver   throws sqlexception
string url   jdbcurl
if  driver    null     driver acceptsurl url
synchronized  this
// the driver has either never been booted, or it has been
// shutdown by a 'jdbc:derby:;shutdown=true'
if  driver    null     driver acceptsurl url
new jdbcboot   boot attribute protocol  system err
// if we know the driver, we loaded it. otherwise only
// work if drivermanager has already loaded it.
driver   internaldriver activedriver
if  driver    null
throw new sqlexception messageservice gettextmessage messageid core_jdbc_driver_unregistered
return driver
// else driver != null and driver can accept url
private void update
stringbuffer sb   new stringbuffer 64
sb append attribute protocol
// set the database name from the databasename property
string dbname   getdatabasename
if  dbname    null
dbname   dbname trim
if  dbname    null    dbname length      0
// need to put something in so that we do not allow the
// database name to be set from the request or from the
// connection attributes.
// this space will selected as the database name (and trimmed to an
// empty string)
// see the getdatabasename() code in internaldriver. since this is a
// non-null
// value, it will be selected over any databasename connection
// attribute.
dbname
sb append dbname
string connattrs   getconnectionattributes
if  connattrs    null
connattrs   connattrs trim
if  connattrs length      0
sb append
sb append connectionattributes
jdbcurl   sb tostring