/*
derby - class org.apache.derby.impl.services.reflect.databaseclasses
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl services reflect
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi services loader classfactory
import org apache derby iapi services loader generatedclass
import org apache derby iapi services loader classinspector
import org apache derby iapi services monitor modulecontrol
import org apache derby iapi services monitor modulesupportable
import org apache derby iapi services monitor monitor
import org apache derby iapi error standardexception
import org apache derby iapi services property propertyutil
import org apache derby iapi services stream headerprintwriter
import org apache derby iapi services monitor monitor
import org apache derby iapi services compiler
import java lang reflect modifier
import org apache derby iapi sql compile codegeneration
import org apache derby iapi util bytearray
import org apache derby iapi services io fileutil
import org apache derby iapi services i18n messageservice
import org apache derby iapi reference property
import org apache derby iapi reference sqlstate
import org apache derby iapi reference messageid
import org apache derby iapi reference classname
import java util properties
import java util hashtable
import java io objectstreamclass
import java io file
import java io fileoutputstream
import java io ioexception
import java io serializable
/**
an abstract implementation of the classfactory. this package can
be extended to fully implement a classfactory. implementations can
differ in two areas, how they load a class and how they invoke methods
of the generated class.
<p>
this class manages a hash table of loaded generated classes and
their generatedclass objects.  a loaded class may be referenced
multiple times -- each class has a reference count associated
with it.  when a load request arrives, if the class has already
been loaded, its ref count is incremented.  for a remove request,
the ref count is decremented unless it is the last reference,
in which case the class is removed.  this is transparent to users.
@see org.apache.derby.iapi.services.loader.classfactory
*/
abstract class databaseclasses
implements classfactory  modulecontrol
/*
** fields
*/
private	classinspector	classinspector
private javafactory		javafactory
private updateloader		applicationloader
/*
** constructor
*/
databaseclasses
/*
** public methods of modulecontrol
*/
public void boot boolean create  properties startparams
throws standardexception
classinspector   new classinspector this
//
//the classfactory runs per service (database) mode (booted as a service module after accessfactory).
//if the code that booted
//us needs a per-database classpath then they pass in the classpath using
//the runtime property boot_db_classpath in startparams
string classpath   null
if  startparams    null
classpath   startparams getproperty property boot_db_classpath
if  classpath    null
applicationloader   new updateloader classpath  this  true
true
javafactory    javafactory  org apache derby iapi services monitor monitor startsystemmodule org apache derby iapi reference module javafactory
public void stop
if  applicationloader    null
applicationloader close
/*
**	public methods of classfactory
*/
/**
here we load the newly added class now, rather than waiting for the
findgeneratedclass(). thus we are assuming that the class is going
to be used sometime soon. delaying the load would mean storing the class
data in a file, this wastes cycles and compilcates the cleanup.
@see classfactory#loadgeneratedclass
@exception	standardexception class format is bad.
*/
public final generatedclass loadgeneratedclass string fullyqualifiedname  bytearray classdump
throws standardexception
try
return loadgeneratedclassfromdata fullyqualifiedname  classdump
catch  linkageerror le
writeclassfile fullyqualifiedname  classdump  le
throw standardexception newexception sqlstate generated_class_linkage_error
le  fullyqualifiedname
catch  virtualmachineerror vme       these may be beyond saving  but fwiw
writeclassfile fullyqualifiedname  classdump  vme
throw vme
private static void writeclassfile string fullyqualifiedname  bytearray bytecode  throwable t
// get the un-qualified name and add the extension
int lastdot   fullyqualifiedname lastindexof  int
string filename   fullyqualifiedname substring lastdot 1 fullyqualifiedname length    concat
object env   monitor getmonitor   getenvironment
file dir   env instanceof file ?  file  env   null
file classfile   fileutil newfile dir filename
// find the error stream
headerprintwriter errorstream   monitor getstream
try
fileoutputstream fis   new fileoutputstream classfile
fis write bytecode getarray
bytecode getoffset    bytecode getlength
fis flush
if  t  null
errorstream printlnwithheader messageservice gettextmessage messageid cm_wrote_class_file  fullyqualifiedname  classfile  t
fis close
catch  ioexception e
if  sanitymanager debug
sanitymanager throwassert
public classinspector getclassinspector
return classinspector
public final class loadapplicationclass string classname
throws classnotfoundexception
if  classname startswith
// assume this is an engine class, if so
// try to load from this class loader,
// this ensures in strange class loader
// environments we do not get classcastexceptions
// when an engine class is loaded through a different
// class loader to the rest of the engine.
try
return class forname classname
catch  classnotfoundexception cnfe
// fall through to the code below,
// could be client or tools class
// in a different loader.
throwable loaderror
try
try
return loadclassnotindatabasejar classname
catch  classnotfoundexception cnfe
if  applicationloader    null
throw cnfe
class c   applicationloader loadclass classname  true
if  c    null
throw cnfe
return c
catch  securityexception se
// thrown if the class has been comprimised in some
// way, e.g. modified in a signed jar.
loaderror   se
catch  linkageerror le
// some error linking the jar, again could
// be malicious code inserted into a jar.
loaderror   le
throw new classnotfoundexception classname       loaderror getmessage
abstract class loadclassnotindatabasejar string classname
throws classnotfoundexception
public final class loadapplicationclass objectstreamclass classdescriptor
throws classnotfoundexception
return loadapplicationclass classdescriptor getname
public boolean isapplicationclass class theclass
return theclass getclassloader
instanceof jarloader
public void notifymodifyjar boolean reload  throws standardexception
if  applicationloader    null
applicationloader modifyjar reload
/**
notify the class manager that the classpath has been modified.
@exception standardexception thrown on error
*/
public void notifymodifyclasspath string classpath  throws standardexception
if  applicationloader    null
applicationloader modifyclasspath classpath
public int getclassloaderversion
if  applicationloader    null
return applicationloader getclassloaderversion
return  1
public bytearray buildspecificfactory string classname  string factoryname
throws standardexception
classbuilder cb   javafactory newclassbuilder this  codegeneration generated_package_prefix
modifier public   modifier final  factoryname
methodbuilder constructor   cb newconstructorbuilder modifier public
constructor callsuper
constructor methodreturn
constructor complete
constructor   null
methodbuilder noarg   cb newmethodbuilder modifier public  classname generatedbytecode
noarg pushnewstart classname
noarg pushnewcomplete 0
noarg methodreturn
noarg complete
noarg   null
return cb getclassbytecode
/*
** class specific methods
*/
/*
** keep track of loaded generated classes and their generatedclass objects.
*/
abstract loadedgeneratedclass loadgeneratedclassfromdata string fullyqualifiedname  bytearray classdump