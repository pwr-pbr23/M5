/*
derby - class org.apache.derby.client.net.netconnection
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby client net
import java sql sqlexception
import org apache derby client am callablestatement
import org apache derby client am databasemetadata
import org apache derby client am disconnectexception
import org apache derby client am encryptionmanager
import org apache derby client am preparedstatement
import org apache derby client am productlevel
import org apache derby client am sqlexception
import org apache derby client am clientmessageid
import org apache derby shared common reference messageid
import org apache derby shared common i18n messageutil
import org apache derby client am statement
import org apache derby client am utils
import org apache derby jdbc clientbasedatasource
import org apache derby jdbc clientdatasource
import org apache derby jdbc clientdriver
import org apache derby client clientpooledconnection
import org apache derby shared common reference sqlstate
public class netconnection extends org apache derby client am connection
// use this to get internationalized strings...
protected static messageutil msgutil   sqlexception getmessageutil
protected netagent netagent_
//contains a reference to the pooledconnection from which this created
//it then passes this reference to the preparedstatement created from it
//the preparedstatement then uses this to pass the close and the error
//occurred conditions back to the pooledconnection which can then throw the
//appropriate events.
protected clientpooledconnection pooledconnection_   null
// for xa transaction
protected int pendingendxacallinfooffset_    1
// byte[] to save the connect flows for connection reset
protected byte cachedconnectbytes_   null
protected boolean wroteconnectfromcache_   false
//-----------------------------state------------------------------------------
// these variables store the manager levels for the connection.
// they are initialized to the highest value which this driver supports
// at the current time.  theses intial values should be increased when
// new manager level support is added to this driver.  these initial values
// are sent to the server in the excsat command.  the server will return a
// set of values and these will be parsed out by parseexcsatrd and parsemgrlvlls.
// during this parsing, these instance variable values will be reset to the negotiated
// levels for the connection.  these values may be less than the
// values origionally set here at constructor time.  it is these new values
// (following the parse) which are the levels for the connection.  after
// a successful excsat command, these values can be checked to see
// what protocol is supported by this particular connection.
// if support for a new manager class is added, the buildexcsat and parsemgrlvlls
// methods will need to be changed to accomodate sending and receiving the new class.
protected int targetagent_   netconfiguration mgrlvl_7     01292003jev monitoring
protected int targetcmntcpip_   netconfiguration mgrlvl_5
protected int targetrdb_   netconfiguration mgrlvl_7
public int targetsecmgr_   netconfiguration mgrlvl_7
protected int targetcmnappc_   netconfiguration mgrlvl_na     na since currently not used by net
protected int targetxamgr_   netconfiguration mgrlvl_7
protected int targetsyncptmgr_   netconfiguration mgrlvl_na
protected int targetrsyncmgr_   netconfiguration mgrlvl_na
// this is the external name of the target server.
// it is set by the parseexcsatrd method but not really used for much at this
// time.  one possible use is for logging purposes and in the future it
// may be placed in the trace.
string targetextnam_
string extnam_
// server class name of the target server returned in excsatrd.
// again this is something which the driver is not currently using
// to make any decions.  right now it is just stored for future logging.
// it does contain some useful information however and possibly
// the database meta data object will make use of this
// for example, the product id (prdid) would give this driver an idea of
// what type of sevrer it is connected to.
public string targetsrvclsnm_
// server name of the target server returned in excsatrd.
// again this is something which we don't currently use but
// keep it in case we want to log it in some problem determination
// trace/dump later.
protected string targetsrvnam_
// server product release level of the target server returned in excsatrd.
// specifies the procuct release level of a ddm server.
// again this is something which we don't currently use but
// keep it in case we want to log it in some problem determination
// trace/dump later.
public string targetsrvrlslv_
// keys used for encryption.
transient byte publickey_
transient byte targetpublickey_
// seeds used for strong password substitute generation (usrssbpwd)
transient byte sourceseed_       client seed
transient byte targetseed_       server seed
// product-specific data (prddta) sent to the server in the accrdb command.
// the prddta has a specified format.  it is saved in case it is needed again
// since it takes a little effort to compute.  saving this information is
// useful for when the connect flows need to be resent (right now the connect
// flow is resent when this driver disconnects and reconnects with
// non unicode ccsids.  this is done when the server doesn't recoginze the
// unicode ccsids).
//
byte prddta_
// correlation token of the source sent to the server in the accrdb.
// it is saved like the prddta in case it is needed for a connect reflow.
public byte crrtkn_
// the secmec used by the target.
// it contains the negotiated security mechanism for the connection.
// initially the value of this is 0.  it is set only when the server and
// the target successfully negotiate a security mechanism.
int targetsecmec_
// the security mechanism requested by the application
protected int securitymechanism_
// stored the password for deferred reset only.
private transient char deferredresetpassword_   null
//if network server gets null connection from the embedded driver,
//it sends rdbaflrm followed by sqlcard with null sqlexception.
//client will parse the sqlcard and set connectionnull to true if the
//sqlcard is empty. if connectionnull=true, connect method in
//clientdriver will in turn return null connection.
private boolean connectionnull   false
private void setdeferredresetpassword string password
deferredresetpassword_    password    null  ? null   flipbits password tochararray
private string getdeferredresetpassword
if  deferredresetpassword_    null
return null
string password   new string flipbits deferredresetpassword_
flipbits deferredresetpassword_      re encrypt password
return password
protected byte cnntkn_   null
// resource manager id for xa connections.
private int rmid_   0
protected netxaresource xares_   null
protected java util hashtable indoubttransactions_   null
protected int currxacallinfooffset_   0
private short seqno_   1
// flag to indicate a read only transaction
protected boolean readonlytransaction_   true
//---------------------constructors/finalizer---------------------------------
public netconnection netlogwriter netlogwriter
string databasename
java util properties properties  throws sqlexception
super netlogwriter  0      1  databasename  properties
public netconnection netlogwriter netlogwriter
org apache derby jdbc clientbasedatasource datasource
string user
string password  throws sqlexception
super netlogwriter  user  password  datasource
setdeferredresetpassword password
// for jdbc 1 connections
public netconnection netlogwriter netlogwriter
int drivermanagerlogintimeout
string servername
int portnumber
string databasename
java util properties properties  throws sqlexception
super netlogwriter  drivermanagerlogintimeout  servername  portnumber  databasename  properties
netagent_    netagent  super agent_
if  netagent_ exceptionopeningsocket_    null
throw netagent_ exceptionopeningsocket_
checkdatabasename
string password   clientbasedatasource getpassword properties
securitymechanism_   clientbasedatasource getsecuritymechanism properties
flowconnect password  securitymechanism_
if  isconnectionnull
completeconnect
// for jdbc 2 connections
public netconnection netlogwriter netlogwriter
string user
string password
org apache derby jdbc clientbasedatasource datasource
int rmid
boolean isxaconn  throws sqlexception
super netlogwriter  user  password  isxaconn  datasource
netagent_    netagent  super agent_
initialize user  password  datasource  rmid  isxaconn
public netconnection netlogwriter netlogwriter
string ipaddr
int portnumber
org apache derby jdbc clientbasedatasource datasource
boolean isxaconn  throws sqlexception
super netlogwriter  isxaconn  datasource
netagent_    netagent  super agent_
if  netagent_ exceptionopeningsocket_    null
throw netagent_ exceptionopeningsocket_
checkdatabasename
this isxaconnection_   isxaconn
flowsimpleconnect
productid_   targetsrvrlslv_
super completeconnect
// for jdbc 2 connections
/**
* this constructor is called from the clientpooledconnection object
* to enable the netconnection to pass <code>this</code> on to the associated
* prepared statement object thus enabling the prepared statement object
* to inturn  raise the statement events to the clientpooledconnection object
* @param netlogwriter netlogwriter object associated with this connection
* @param user         user id for this connection
* @param password     password for this connection
* @param datasource   the datasource object passed from the pooledconnection
*                     object from which this constructor was called
* @param rmid         the resource manager id for xa connections
* @param isxaconn     true if this is a xa connection
* @param cpc          the clientpooledconnection object from which this
*                     netconnection constructor was called. this is used
*                     to pass statementevents back to the pooledconnection
*                     object
* @throws             sqlexception
*/
public netconnection netlogwriter netlogwriter
string user
string password
org apache derby jdbc clientbasedatasource datasource
int rmid
boolean isxaconn
clientpooledconnection cpc  throws sqlexception
super netlogwriter  user  password  isxaconn  datasource
netagent_    netagent  super agent_
initialize user  password  datasource  rmid  isxaconn
this pooledconnection_ cpc
private void initialize string user
string password
org apache derby jdbc clientbasedatasource datasource
int rmid
boolean isxaconn  throws sqlexception
securitymechanism_   datasource getsecuritymechanism password
setdeferredresetpassword password
checkdatabasename
datasource_   datasource
this rmid_   rmid
this isxaconnection_   isxaconn
flowconnect password  securitymechanism_
completeconnect
// preferably without password in the method signature.
// we can probally get rid of flowreconnect method.
public void resetnetconnection org apache derby client am logwriter logwriter
string user
string password
org apache derby jdbc clientbasedatasource ds
boolean recomputefromdatasource  throws sqlexception
super resetconnection logwriter  user  ds  recomputefromdatasource
//----------------------------------------------------
if  recomputefromdatasource
// do not reset managers on a connection reset.  this information shouldn't
// change and can be used to check secmec support.
targetextnam_   null
targetsrvclsnm_   null
targetsrvnam_   null
targetsrvrlslv_   null
publickey_   null
targetpublickey_   null
sourceseed_   null
targetseed_   null
targetsecmec_   0
if  ds    null    securitymechanism_    0
securitymechanism_   ds getsecuritymechanism password
resetconnectionatfirstsql_   false
if  password    null
deferredresetpassword_   null
else
password   getdeferredresetpassword
// properties prddta_ and crrtkn_ will be initialized by
// calls to constructprddta() and constructcrrtkn()
//----------------------------------------------------------
boolean isdeferredreset   flowreconnect password  securitymechanism_
completereset isdeferredreset  recomputefromdatasource
protected void reset_ org apache derby client am logwriter logwriter
string user  string password
clientbasedatasource ds
boolean recomputefromdatasource  throws sqlexception
checkresetpreconditions logwriter  user  password  ds
resetnetconnection logwriter  user  password  ds  recomputefromdatasource
protected void reset_ org apache derby client am logwriter logwriter
clientbasedatasource ds
boolean recomputefromdatasource  throws sqlexception
checkresetpreconditions logwriter  null  null  ds
resetnetconnection logwriter  ds  recomputefromdatasource
private void resetnetconnection org apache derby client am logwriter logwriter
org apache derby jdbc clientbasedatasource ds
boolean recomputefromdatasource  throws sqlexception
super resetconnection logwriter  null  ds  recomputefromdatasource
//----------------------------------------------------
if  recomputefromdatasource
// do not reset managers on a connection reset.  this information shouldn't
// change and can be used to check secmec support.
targetextnam_   null
targetsrvclsnm_   null
targetsrvnam_   null
targetsrvrlslv_   null
publickey_   null
targetpublickey_   null
sourceseed_   null
targetseed_   null
targetsecmec_   0
if  ds    null    securitymechanism_    0
securitymechanism_   ds getsecuritymechanism
resetconnectionatfirstsql_   false
// properties prddta_ and crrtkn_ will be initialized by
// calls to constructprddta() and constructcrrtkn()
//----------------------------------------------------------
boolean isdeferredreset   flowreconnect null  securitymechanism_
completereset isdeferredreset  recomputefromdatasource
protected void checkresetpreconditions org apache derby client am logwriter logwriter
string user
string password
clientbasedatasource ds  throws sqlexception
if  inunitofwork_
throw new sqlexception logwriter
new clientmessageid sqlstate net_connection_reset_not_allowed_in_unit_of_work
java util list getspecialregisters
if  xares_    null
return xares_ getspecialregisters
else
return null
public void addspecialregisters string s
if  xares_    null
xares_ addspecialregisters s
public void completeconnect   throws sqlexception
super completeconnect
protected void completereset boolean isdeferredreset  boolean recomputefromdatasource  throws sqlexception
super completereset isdeferredreset  recomputefromdatasource
public void flowconnect string password
int securitymechanism  throws sqlexception
netagent_    netagent  super agent_
constructextnam
// these calls need to be after newing up the agent
// because they require the ccsid manager
constructprddta        construct product data
netagent_ typdef_   new typdef netagent_  1208  netconfiguration system_asc  1200  1208
netagent_ targettypdef_   new typdef netagent_
netagent_ originaltargettypdef_   netagent_ targettypdef_
setdeferredresetpassword password
try
switch  securitymechanism
case netconfiguration secmec_usridpwd     clear text user id and password
checkuserpassword user_  password
flowusridpwdconnect password
break
case netconfiguration secmec_usridonl     clear text user  no password sent to server
checkuser user_
flowusridonlconnect
break
case netconfiguration secmec_usrencpwd     clear text user  encrypted password
checkuserpassword user_  password
flowusrencpwdconnect password
break
case netconfiguration secmec_eusridpwd     encrypted user  encrypted password
checkuserpassword user_  password
floweusridpwdconnect password
break
case netconfiguration secmec_eusriddta
checkuserpassword user_  password
floweusriddtaconnect
break
case netconfiguration secmec_eusrpwddta
checkuserpassword user_  password
floweusrpwddtaconnect password
break
case netconfiguration secmec_usrssbpwd     clear text user  strong password substitute
checkuserpassword user_  password
flowusrssbpwdconnect password
break
default
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate secmech_not_supported
new integer securitymechanism
catch  java lang throwable e       if  anything  goes wrong  make sure the connection is destroyed
// always mark the connection closed in case of an error.
// this prevents attempts to use this closed connection
// to retrieve error message text if an error sqlca
// is returned in one of the connect flows.
open_   false
// logwriter may be closed in agent_.close(),
// so sqlexception needs to be created before that
// but to be thrown after.
sqlexception exceptiontobethrown
if  e instanceof sqlexception     rethrow original exception if it's an sqlexception
exceptiontobethrown    sqlexception  e
else    any other exceptions will be wrapped by an sqlexception first
exceptiontobethrown   new sqlexception agent_ logwriter_
new clientmessageid sqlstate java_exception
e getclass   getname    e getmessage    e
try
if  agent_    null
agent_ close
catch  sqlexception ignoreme
throw exceptiontobethrown
protected void flowsimpleconnect   throws sqlexception
netagent_    netagent  super agent_
constructextnam
// these calls need to be after newing up the agent
// because they require the ccsid manager
constructprddta        construct product data
netagent_ typdef_   new typdef netagent_  1208  netconfiguration system_asc  1200  1208
netagent_ targettypdef_   new typdef netagent_
netagent_ originaltargettypdef_   netagent_ targettypdef_
try
flowserverattributes
catch  java lang throwable e       if  anything  goes wrong  make sure the connection is destroyed
// always mark the connection closed in case of an error.
// this prevents attempts to use this closed connection
// to retrieve error message text if an error sqlca
// is returned in one of the connect flows.
open_   false
// logwriter may be closed in agent_.close(),
// so sqlexception needs to be created before that
// but to be thrown after.
sqlexception exceptiontobethrown
if  e instanceof sqlexception     rethrow original exception if it's an sqlexception
exceptiontobethrown    sqlexception  e
else    any other exceptions will be wrapped by an sqlexception first
exceptiontobethrown   new sqlexception agent_ logwriter_
new clientmessageid sqlstate java_exception
e getclass   getname    e getmessage    e
try
if  agent_    null
agent_ close
catch  sqlexception ignoreme
throw exceptiontobethrown
protected boolean flowreconnect string password  int securitymechanism  throws sqlexception
constructextnam
// these calls need to be after newing up the agent
// because they require the ccsid manager
constructprddta       modify this to not new up an array
checksecmgrforsecmecsupport securitymechanism
try
switch  securitymechanism
case netconfiguration secmec_usridpwd     clear text user id and password
checkuserpassword user_  password
resetconnectionatfirstsql_   true
setdeferredresetpassword password
return true
case netconfiguration secmec_usridonl     clear text user  no password sent to server
checkuser user_
resetconnectionatfirstsql_   true
return true
case netconfiguration secmec_usrencpwd     clear text user  encrypted password
checkuserpassword user_  password
resetconnectionatfirstsql_   true
setdeferredresetpassword password
return true
case netconfiguration secmec_eusridpwd     encrypted user  encrypted password
checkuserpassword user_  password
resetconnectionatfirstsql_   true
setdeferredresetpassword password
return true
case netconfiguration secmec_eusriddta
checkuserpassword user_  password
resetconnectionatfirstsql_   true
setdeferredresetpassword password
return true
case netconfiguration secmec_eusrpwddta
checkuserpassword user_  password
resetconnectionatfirstsql_   true
setdeferredresetpassword password
return true
case netconfiguration secmec_usrssbpwd     clear text user  strong password substitute
checkuserpassword user_  password
resetconnectionatfirstsql_   true
setdeferredresetpassword password
return true
default
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate secmech_not_supported
new integer securitymechanism
catch  sqlexception sqle                  this may not be needed because on method up the stack
open_   false                           all reset exceptions are caught and wrapped in disconnect exceptions
try
if  agent_    null
agent_ close
catch  sqlexception ignoreme
throw sqle
protected void finalize   throws java lang throwable
super finalize
protected byte getcnntoken
return cnntkn_
protected short getsequencenumber
return   seqno_
//--------------------------------flow methods--------------------------------
private void flowusridpwdconnect string password  throws sqlexception
flowserverattributesandkeyexchange netconfiguration secmec_usridpwd
null      publickey
flowsecuritycheckandaccessrdb targetsecmec_    securitymechanism
user_
password
null    encrypteduserid
null     encryptedpassword
private void flowusridonlconnect   throws sqlexception
flowserverattributesandkeyexchange netconfiguration secmec_usridonl
null     publickey
flowsecuritycheckandaccessrdb targetsecmec_    securitymechanism
user_
null    password
null    encrypteduserid
null     encryptedpassword
private void flowusrencpwdconnect string password  throws sqlexception
flowserverattributes
checksecmgrforsecmecsupport netconfiguration secmec_usrencpwd
initializepublickeyforencryption
flowkeyexchange netconfiguration secmec_usrencpwd  publickey_
flowsecuritycheckandaccessrdb targetsecmec_    securitymechanism
user_
null    password
null    encrypteduserid
encryptedpasswordforusrencpwd password
private void floweusridpwdconnect string password  throws sqlexception
flowserverattributes
checksecmgrforsecmecsupport netconfiguration secmec_eusridpwd
initializepublickeyforencryption
flowkeyexchange netconfiguration secmec_eusridpwd  publickey_
flowsecuritycheckandaccessrdb targetsecmec_    securitymechanism
null    user
null    password
encrypteduseridforeusridpwd
encryptedpasswordforeusridpwd password
private void floweusriddtaconnect   throws sqlexception
flowserverattributes
checksecmgrforsecmecsupport netconfiguration secmec_eusridpwd
initializepublickeyforencryption
flowkeyexchange netconfiguration secmec_eusriddta  publickey_
flowsecuritycheckandaccessrdb targetsecmec_    securitymechanism
null    user
null    password
encrypteduseridforeusridpwd
null    encryptedpasswordforeusridpwd  password
private void floweusrpwddtaconnect string password  throws sqlexception
flowserverattributes
checksecmgrforsecmecsupport netconfiguration secmec_eusrpwddta
initializepublickeyforencryption
flowkeyexchange netconfiguration secmec_eusrpwddta  publickey_
flowsecuritycheckandaccessrdb targetsecmec_    securitymechanism
null    user
null    password
encrypteduseridforeusridpwd
encryptedpasswordforeusridpwd password
/**
* the user id and strong password substitute mechanism (usrssbpwd)
* authenticates the user like the user id and password mechanism, but
* the password does not flow. a password substitute is generated instead
* using the sha-1 algorithm, and is sent to the application server.
*
* the application server generates a password substitute using the same
* algorithm and compares it with the application requester's password
* substitute. if equal, the user is authenticated.
*
* the sectkn parameter is used to flow the client and server encryption
* seeds on the accsec and accsecrd commands.
*
* more information in drda, v3, volume 3 standard - pwdssb (page 650)
*/
private void flowusrssbpwdconnect string password  throws sqlexception
flowserverattributes
checksecmgrforsecmecsupport netconfiguration secmec_usrssbpwd
// generate a random client seed to send to the target server - in
// response we will also get a generated seed from this last one.
// seeds are used on both sides to generate the password substitute.
initializeclientseed
flowseedexchange netconfiguration secmec_usrssbpwd  sourceseed_
flowsecuritycheckandaccessrdb targetsecmec_    securitymechanism
user_


passwordsubstituteforusrssbpwd password       pwd substitute
private void flowserverattributes   throws sqlexception
agent_ beginwritechainoutsideuow
netagent_ netconnectionrequest_ writeexchangeserverattributes extnam_    externalname
targetagent_
netagent_ targetsqlam_
targetrdb_
targetsecmgr_
targetcmntcpip_
targetcmnappc_
targetxamgr_
targetsyncptmgr_
targetrsyncmgr_
agent_ flowoutsideuow
netagent_ netconnectionreply_ readexchangeserverattributes this
agent_ endreadchain
private void flowkeyexchange int securitymechanism  byte publickey  throws sqlexception
agent_ beginwritechainoutsideuow
netagent_ netconnectionrequest_ writeaccesssecurity securitymechanism
databasename_
publickey
agent_ flowoutsideuow
netagent_ netconnectionreply_ readaccesssecurity this  securitymechanism
agent_ endreadchain
private void flowseedexchange int securitymechanism  byte sourceseed  throws sqlexception
agent_ beginwritechainoutsideuow
netagent_ netconnectionrequest_ writeaccesssecurity securitymechanism
databasename_
sourceseed
agent_ flowoutsideuow
netagent_ netconnectionreply_ readaccesssecurity this  securitymechanism
agent_ endreadchain
private void flowserverattributesandkeyexchange int securitymechanism
byte publickey  throws sqlexception
agent_ beginwritechainoutsideuow
writeserverattributesandkeyexchange securitymechanism  publickey
agent_ flowoutsideuow
readserverattributesandkeyexchange securitymechanism
agent_ endreadchain
private void flowserverattributesandseedexchange int securitymechanism
byte sourceseed  throws sqlexception
agent_ beginwritechainoutsideuow
writeserverattributesandseedexchange sourceseed
agent_ flowoutsideuow
readserverattributesandseedexchange
agent_ endreadchain
private void flowsecuritycheckandaccessrdb int securitymechanism
string user
string password
byte encrypteduserid
byte encryptedpassword  throws sqlexception
agent_ beginwritechainoutsideuow
writesecuritycheckandaccessrdb securitymechanism
user
password
encrypteduserid
encryptedpassword
agent_ flowoutsideuow
readsecuritycheckandaccessrdb
agent_ endreadchain
private void writeallconnectcommandschained int securitymechanism
string user
string password  throws sqlexception
writeserverattributesandkeyexchange securitymechanism
null      publickey
writesecuritycheckandaccessrdb securitymechanism
user
password
null    encrypteduserid
null     encryptedpassword
private void readallconnectcommandschained int securitymechanism  throws sqlexception
readserverattributesandkeyexchange securitymechanism
readsecuritycheckandaccessrdb
private void writeserverattributesandkeyexchange int securitymechanism
byte publickey  throws sqlexception
netagent_ netconnectionrequest_ writeexchangeserverattributes extnam_    externalname
targetagent_
netagent_ targetsqlam_
targetrdb_
targetsecmgr_
targetcmntcpip_
targetcmnappc_
targetxamgr_
targetsyncptmgr_
targetrsyncmgr_
netagent_ netconnectionrequest_ writeaccesssecurity securitymechanism
databasename_
publickey
private void writeserverattributesandseedexchange byte sourceseed
throws sqlexception
// for now, we're just calling our cousin method to do the job
writeserverattributesandkeyexchange netconfiguration secmec_usrssbpwd
sourceseed
private void readserverattributesandkeyexchange int securitymechanism  throws sqlexception
netagent_ netconnectionreply_ readexchangeserverattributes this
netagent_ netconnectionreply_ readaccesssecurity this  securitymechanism
private void readserverattributesandseedexchange   throws sqlexception
// for now, we're just calling our cousin method to do the job
readserverattributesandkeyexchange netconfiguration secmec_usrssbpwd
private void writesecuritycheckandaccessrdb int securitymechanism
string user
string password
byte encrypteduserid
byte encryptedpassword  throws sqlexception
netagent_ netconnectionrequest_ writesecuritycheck securitymechanism
databasename_
user
password
encrypteduserid
encryptedpassword
netagent_ netconnectionrequest_ writeaccessdatabase databasename_
false
crrtkn_
prddta_
netagent_ typdef_
private void cacheconnectbytes int beginoffset  int endoffset
int length   endoffset   beginoffset
cachedconnectbytes_   new byte
netagent_ netconnectionrequest_ finalizepreviouschaineddss false
system arraycopy netagent_ netconnectionrequest_ bytes_
beginoffset
cachedconnectbytes_
0
length
netagent_ netconnectionrequest_ setdsslengthlocation netagent_ netconnectionrequest_ offset_
private void readsecuritycheckandaccessrdb   throws sqlexception
netagent_ netconnectionreply_ readsecuritycheck this
netagent_ netconnectionreply_ readaccessdatabase this
void writedeferredreset   throws sqlexception
if  canusecachedconnectbytes_    cachedconnectbytes_    null
securitymechanism_    netconfiguration secmec_usridpwd
securitymechanism_    netconfiguration secmec_usridonl
writedeferredresetfromcache
wroteconnectfromcache_   true
else
int beginoffset   netagent_ netconnectionrequest_ offset_
int endoffset   0
// netconfiguration.secmec_usridpwd
if  securitymechanism_    netconfiguration secmec_usridpwd
writeallconnectcommandschained netconfiguration secmec_usridpwd
user_
getdeferredresetpassword
endoffset   netagent_ netconnectionrequest_ offset_
cacheconnectbytes beginoffset  endoffset
// netconfiguration.secmec_usridonl
else if  securitymechanism_    netconfiguration secmec_usridonl
writeallconnectcommandschained netconfiguration secmec_usridonl
user_
null      password
endoffset   netagent_ netconnectionrequest_ offset_
cacheconnectbytes beginoffset  endoffset
// either netconfiguration.secmec_usrencpwd,
// netconfiguration.secmec_eusridpwd or
// netconfiguration.secmec_usrssbpwd
else
if  securitymechanism_    netconfiguration secmec_usrssbpwd
initializeclientseed
else    secmec_usrencpwd  secmec_eusridpwd
initializepublickeyforencryption
// set the resetconnectionatfirstsql_ to false to avoid going in an
// infinite loop, since all the flow methods call beginwritechain which then
// calls writedeferredresetconnection where the check for resetconnectionatfirstsql_
// is done. by setting the resetconnectionatfirstsql_ to false will avoid calling the
// writedeferredreset method again.
resetconnectionatfirstsql_   false
if  securitymechanism_    netconfiguration secmec_usrssbpwd
flowseedexchange securitymechanism_  sourceseed_
else    secmec_usrencpwd  secmec_eusridpwd
flowserverattributesandkeyexchange securitymechanism_  publickey_
agent_ beginwritechainoutsideuow
// reset the resetconnectionatfirstsql_ to true since we are done
// with the flow method.
resetconnectionatfirstsql_   true
// netconfiguration.secmec_usrencpwd
if  securitymechanism_    netconfiguration secmec_usrencpwd
writesecuritycheckandaccessrdb netconfiguration secmec_usrencpwd
user_
null    password
null    encrypteduserid
encryptedpasswordforusrencpwd getdeferredresetpassword
// netconfiguration.secmec_usrssbpwd
else if  securitymechanism_    netconfiguration secmec_usrssbpwd
writesecuritycheckandaccessrdb netconfiguration secmec_usrssbpwd
user_


passwordsubstituteforusrssbpwd getdeferredresetpassword
else       netconfiguration secmec_eusridpwd
writesecuritycheckandaccessrdb netconfiguration secmec_eusridpwd
null    user
null    password
encrypteduseridforeusridpwd
encryptedpasswordforeusridpwd getdeferredresetpassword
void readdeferredreset   throws sqlexception
resetconnectionatfirstsql_   false
if  wroteconnectfromcache_
netagent_ netconnectionreply_ verifydeferredreset
return
// either netconfiguration.secmec_usridpwd or netconfiguration.secmec_usridonl
if  securitymechanism_    netconfiguration secmec_usridpwd
securitymechanism_    netconfiguration secmec_usridonl
readallconnectcommandschained securitymechanism_
// either netconfiguration.secmec_usrencpwd or netconfiguration.secmec_eusridpwd
else
// either netconfiguration.secmec_usrencpwd or netconfiguration.secmec_eusridpwd
readsecuritycheckandaccessrdb
if  agent_ loggingenabled
agent_ logwriter_ traceconnectresetexit this
//-------------------parse callback methods--------------------------------
void setserverattributedata string extnam
string srvclsnm
string srvnam
string srvrlslv
targetextnam_   extnam              any of these could be null
targetsrvclsnm_   srvclsnm          since then can be optionally returned from the
targetsrvnam_   srvnam              server
targetsrvrlslv_   srvrlslv
// secmeclist is always required and will not be null.
// secchkcd has an implied severity of error.
// it will be returned if an error is detected.
// if no errors and security mechanism requires a sectkn, then
void setaccesssecuritydata int secchkcd
int desiredsecmec
int secmeclist
boolean sectknreceived
byte sectkn  throws disconnectexception
// - if the secchkcd is not 0, then map to an exception.
if  secchkcd    codepoint secchkcd_00
// the implied severity code is error
netagent_ setsvrcod codepoint svrcod_error
agent_ accumulatereadexception mapsecchkcd secchkcd
else
// - verify that the secmec parameter reflects the value sent
// in the accsec command.
// should we check for null list
if   secmeclist length    1
secmeclist    desiredsecmec
// the security mechanism returned from the server matches
// the mechanism requested by the client.
targetsecmec_   secmeclist
if   targetsecmec_    netconfiguration secmec_usrencpwd
targetsecmec_    netconfiguration secmec_eusridpwd
targetsecmec_    netconfiguration secmec_usrssbpwd
targetsecmec_    netconfiguration secmec_eusriddta
targetsecmec_    netconfiguration secmec_eusrpwddta
// a security token is required for usrencpwd, or eusridpwd.
if   sectknreceived
agent_ accumulatechainbreakingreadexceptionandthrow
new disconnectexception agent_
new clientmessageid sqlstate net_sectkn_not_returned
else
if  targetsecmec_    netconfiguration secmec_usrssbpwd
targetseed_   sectkn
else
targetpublickey_   sectkn
if  encryptionmanager_    null
encryptionmanager_ resetsecuritykeys
else
// accumulate an sqlexception and don't disconnect yet
// if a secchk was chained after this it would receive a secchk code
// indicating the security mechanism wasn't supported and that would be a
// chain breaking exception.  if no secchk is chained this exception
// will be surfaced by endreadchain
// agent_.accumulatechainbreakingreadexceptionandthrow (
//   new disconnectexception (agent_,"secmec not supported ","0000", -999));
agent_ accumulatereadexception new sqlexception agent_ logwriter_
new clientmessageid sqlstate net_secktkn_not_returned
void securitycheckcomplete int svrcod  int secchkcd
netagent_ setsvrcod svrcod
if  secchkcd    codepoint secchkcd_00
return
agent_ accumulatereadexception mapsecchkcd secchkcd
void rdbaccessed int svrcod
string prdid
boolean crrtknreceived
byte crrtkn
if  crrtknreceived
crrtkn_   crrtkn
netagent_ setsvrcod svrcod
productid_   prdid
//-------------------abstract object factories--------------------------------
protected org apache derby client am agent newagent_ org apache derby client am logwriter logwriter  int logintimeout  string servername  int portnumber  int clientsslmode
throws sqlexception
return new netagent this
netlogwriter  logwriter
logintimeout
servername
portnumber
clientsslmode
protected statement newstatement_ int type  int concurrency  int holdability  throws sqlexception
return new netstatement netagent_  this  type  concurrency  holdability  statement_
protected void resetstatement_ statement statement  int type  int concurrency  int holdability  throws sqlexception
netstatement  statement materialstatement_  resetnetstatement netagent_  this  type  concurrency  holdability
protected preparedstatement newpositionedupdatepreparedstatement_ string sql
org apache derby client am section section  throws sqlexception
//passing the pooledconnection_ object which will be used to raise
//statementevents to the pooledconnection
return new netpreparedstatement netagent_  this  sql  section pooledconnection_  preparedstatement_
protected preparedstatement newpreparedstatement_ string sql  int type  int concurrency  int holdability  int autogeneratedkeys  string columnnames  throws sqlexception
//passing the pooledconnection_ object which will be used to raise
//statementevents to the pooledconnection
return new netpreparedstatement netagent_  this  sql  type  concurrency  holdability  autogeneratedkeys  columnnames pooledconnection_  preparedstatement_
protected void resetpreparedstatement_ preparedstatement ps
string sql
int resultsettype
int resultsetconcurrency
int resultsetholdability
int autogeneratedkeys
string columnnames  throws sqlexception
netpreparedstatement  ps materialpreparedstatement_  resetnetpreparedstatement netagent_  this  sql  resultsettype  resultsetconcurrency  resultsetholdability  autogeneratedkeys  columnnames
protected callablestatement newcallablestatement_ string sql  int type  int concurrency  int holdability  throws sqlexception
//passing the pooledconnection_ object which will be used to raise
//statementevents to the pooledconnection
return new netcallablestatement netagent_  this  sql  type  concurrency  holdability pooledconnection_  callablestatement_
protected void resetcallablestatement_ callablestatement cs
string sql
int resultsettype
int resultsetconcurrency
int resultsetholdability  throws sqlexception
netcallablestatement  cs materialcallablestatement_  resetnetcallablestatement netagent_  this  sql  resultsettype  resultsetconcurrency  resultsetholdability
protected databasemetadata newdatabasemetadata_
return clientdriver getfactory   newnetdatabasemetadata netagent_  this
//-------------------private helper methods--------------------------------
private void checkdatabasename   throws sqlexception
// netagent_.logwriter may not be initialized yet
if  databasename_    null
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate connect_required_property_not_set
private void checkuserlength string user  throws sqlexception
int usridlength   user length
if   usridlength    0      usridlength > netconfiguration usrid_maxsize
throw new sqlexception netagent_ logwriter_
new clientmessageid sqlstate connect_userid_length_out_of_range
new integer usridlength
new integer netconfiguration usrid_maxsize
private void checkpasswordlength string password  throws sqlexception
int passwordlength   password length
if   passwordlength    0      passwordlength > netconfiguration password_maxsize
throw new sqlexception netagent_ logwriter_
new clientmessageid sqlstate connect_password_length_out_of_range
new integer passwordlength
new integer netconfiguration password_maxsize
private void checkuser string user  throws sqlexception
if  user    null
throw new sqlexception netagent_ logwriter_
new clientmessageid sqlstate connect_userid_isnull
checkuserlength user
private void checkuserpassword string user  string password  throws sqlexception
checkuser user
if  password    null
throw new sqlexception netagent_ logwriter_
new clientmessageid sqlstate connect_password_isnull
checkpasswordlength password
// determine if a security mechanism is supported by
// the security manager used for the connection.
// an exception is thrown if the security mechanism is not supported
// by the secmgr.
private void checksecmgrforsecmecsupport int securitymechanism  throws sqlexception
boolean secmecsupported   false
int supportedsecmecs   null
// point to a list (array) of supported security mechanisms.
supportedsecmecs   netconfiguration secmgr_secmecs
// check to see if the security mechanism is on the supported list.
for  int i   0   i < supportedsecmecs length       secmecsupported   i
if  supportedsecmecs    securitymechanism
secmecsupported   true
// throw an exception if not supported (not on list).
if   secmecsupported
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate secmech_not_supported
new integer securitymechanism
// if secchkcd is not 0, map to sqlexception
// according to the secchkcd received.
private sqlexception mapsecchkcd int secchkcd
if  secchkcd    codepoint secchkcd_00
return null
// the net driver will not support new password at this time.
// here is the message for -30082 (state "08001"):
//    attempt to establish connection failed with security
//    reason {0} {1} +  reason-code + reason-string.
switch  secchkcd
case codepoint secchkcd_01      error svrcod
return new sqlexception agent_ logwriter_
new clientmessageid sqlstate net_connect_auth_failed
msgutil gettextmessage messageid conn_secmech_not_supported
case codepoint secchkcd_10      error svrcod
return new sqlexception agent_ logwriter_
new clientmessageid sqlstate net_connect_auth_failed
msgutil gettextmessage messageid conn_password_missing
case codepoint secchkcd_12      error svrcod
return new sqlexception agent_ logwriter_
new clientmessageid sqlstate net_connect_auth_failed
msgutil gettextmessage messageid conn_userid_missing
case codepoint secchkcd_13      error svrcod
return new sqlexception agent_ logwriter_
new clientmessageid sqlstate net_connect_auth_failed
msgutil gettextmessage messageid conn_userid_or_password_invalid
case codepoint secchkcd_14      error svrcod
return new sqlexception agent_ logwriter_
new clientmessageid sqlstate net_connect_auth_failed
msgutil gettextmessage messageid conn_userid_revoked
case codepoint secchkcd_15      error svrcod
return new sqlexception agent_ logwriter_
new clientmessageid sqlstate net_connect_auth_failed
msgutil gettextmessage messageid conn_new_password_invalid
case codepoint secchkcd_0a      error svrcod
return new sqlexception agent_ logwriter_
new clientmessageid sqlstate net_connect_auth_failed
msgutil gettextmessage messageid conn_secsvc_nonretryable_err
case codepoint secchkcd_0b      error svrcod
return new sqlexception agent_ logwriter_
new clientmessageid sqlstate net_connect_auth_failed
msgutil gettextmessage messageid conn_sectkn_missing_or_invalid
case codepoint secchkcd_0e      error svrcod
return new sqlexception agent_ logwriter_
new clientmessageid sqlstate net_connect_auth_failed
msgutil gettextmessage messageid conn_password_expired
case codepoint secchkcd_0f      error svrcod
return new sqlexception agent_ logwriter_
new clientmessageid sqlstate net_connect_auth_failed
msgutil gettextmessage messageid conn_userid_or_password_invalid
default      error svrcod
return new sqlexception agent_ logwriter_
new clientmessageid sqlstate net_connect_auth_failed
msgutil gettextmessage messageid conn_not_specified
// construct the correlation token.
// the crrtkn has the following format.
//
// <almost ip address>.<local port number><current time in millis>
// |                   | |               ||                  |
// +----+--------------+ +-----+---------++---------+--------+
//      |                      |                |
//    8 bytes               4 bytes         6 bytes
// total lengtho of 19 bytes.
//
// 1 char for each 1/2 byte in the ip address.
// if the first character of the <ip address> or <port number>
// starts with '0' thru '9', it will be mapped to 'g' thru 'p'.
// reason for mapping the ip address is in order to use the crrtkn as the luwid when using sna in a hop site.
protected void constructcrrtkn   throws sqlexception
byte localaddressbytes   null
long time   0
int num   0
int halfbyte   0
int i   0
int j   0
// allocate the crrtkn array.
if  crrtkn_    null
crrtkn_   new byte
else
java util arrays fill crrtkn_   byte  0
localaddressbytes   netagent_ socket_ getlocaladdress   getaddress
// ip addresses are returned in a 4 byte array.
// obtain the character representation of each half byte.
for  i   0  j   0  i < 4  i    j    2
// since a byte is signed in java, convert any negative
// numbers to positive before shifting.
num   localaddressbytes < 0 ? localaddressbytes   256   localaddressbytes
halfbyte    num >> 4    0x0f
// map 0 to g
// the first digit of the ip address is is replaced by
// the characters 'g' thro 'p'(in order to use the crrtkn as the luwid when using
// sna in a hop site). for example, 0 is mapped to g, 1 is mapped h,etc.
if  i    0
crrtkn_   netagent_ sourceccsidmanager_ numtosnarequiredcrrtknchar_
else
crrtkn_   netagent_ sourceccsidmanager_ numtocharrepresentation_
halfbyte    num    0x0f
crrtkn_   netagent_ sourceccsidmanager_ numtocharrepresentation_
// fill the '.' in between the ip address and the port number
crrtkn_   netagent_ sourceccsidmanager_ dot_
// port numbers have values which fit in 2 unsigned bytes.
// java returns port numbers in an int so the value is not negative.
// get the character representation by converting the
// 4 low order half bytes to the character representation.
num   netagent_ socket_ getlocalport
halfbyte    num >> 12    0x0f
crrtkn_   netagent_ sourceccsidmanager_ numtosnarequiredcrrtknchar_
halfbyte    num >> 8    0x0f
crrtkn_   netagent_ sourceccsidmanager_ numtocharrepresentation_
halfbyte    num >> 4    0x0f
crrtkn_   netagent_ sourceccsidmanager_ numtocharrepresentation_
halfbyte    num    0x0f
crrtkn_   netagent_ sourceccsidmanager_ numtocharrepresentation_
// the final part of crrtkn is a 6 byte binary number that makes the
// crrtkn unique, which is usually the time stamp/process id.
// if the new time stamp is the
// same as one of the already created ones, then recreate the time stamp.
time   system currenttimemillis
for  i   0  i < 6  i
// store 6 bytes of 8 byte time into crrtkn
crrtkn_    byte   time >>>  40    i   8
private void constructextnam   throws sqlexception
extnam_       java lang thread currentthread   getname
private void constructprddta   throws sqlexception
int prddtalen   1
if  prddta_    null
prddta_   new byte
else
java util arrays fill prddta_   byte  0
for  int i   0  i < netconfiguration prddta_acct_suffix_len_byte  i
prddta_   netagent_ sourceccsidmanager_ space_
prddtalen   netagent_ sourceccsidmanager_ convertfromucs2 netconfiguration prdid
prddta_
prddtalen
netagent_
prddtalen   netagent_ sourceccsidmanager_ convertfromucs2 netconfiguration prddta_platform_id
prddta_
prddtalen
netagent_
int extnamtruncatelength   utils min extnam_ length    netconfiguration prddta_appl_id_fixed_len
netagent_ sourceccsidmanager_ convertfromucs2 extnam_ substring 0  extnamtruncatelength
prddta_
prddtalen
netagent_
prddtalen    netconfiguration prddta_appl_id_fixed_len
if  user_    null
int usertruncatelength   utils min user_ length    netconfiguration prddta_user_id_fixed_len
netagent_ sourceccsidmanager_ convertfromucs2 user_ substring 0  usertruncatelength
prddta_
prddtalen
netagent_
prddtalen    netconfiguration prddta_user_id_fixed_len
prddta_   0
prddtalen
// the length byte value does not include itself.
prddta_    byte   prddtalen   1
private void initializepublickeyforencryption   throws sqlexception
if  encryptionmanager_    null
encryptionmanager_   new encryptionmanager agent_
publickey_   encryptionmanager_ obtainpublickey
// secmec_usrssbpwd security mechanism - generate a source (client) seed
// to send to the target (application) server.
private void initializeclientseed   throws sqlexception
if  encryptionmanager_    null
encryptionmanager_   new encryptionmanager
agent_
encryptionmanager sha_1_digest_algorithm
sourceseed_   encryptionmanager_ generateseed
private byte encryptedpasswordforusrencpwd string password  throws sqlexception
return encryptionmanager_ encryptdata netagent_ sourceccsidmanager_ convertfromucs2 password  netagent_
netconfiguration secmec_usrencpwd
netagent_ sourceccsidmanager_ convertfromucs2 user_  netagent_
targetpublickey_
private byte encrypteduseridforeusridpwd   throws sqlexception
return encryptionmanager_ encryptdata netagent_ sourceccsidmanager_ convertfromucs2 user_  netagent_
netconfiguration secmec_eusridpwd
targetpublickey_
targetpublickey_
private byte encryptedpasswordforeusridpwd string password  throws sqlexception
return encryptionmanager_ encryptdata netagent_ sourceccsidmanager_ convertfromucs2 password  netagent_
netconfiguration secmec_eusridpwd
targetpublickey_
targetpublickey_
private byte passwordsubstituteforusrssbpwd string password  throws sqlexception
string username   user_
// define which username takes precedence - if we have a datasource
// available here, it is posible that the username has been
// overriden by some defined as part of the connection attributes
// (see clientbasedatasource.updatedatasourcevalues().
// we need to use the right username as strong password
// substitution depends on the username when the substitute
// password is generated; if we were not using the right username
// then authentication would fail when regenerating the substitute
// password on the engine server side, where username as part of the
// connection attributes would get used to authenticate the user.
if  datasource_    null
string datasourceusername   datasource_ getuser
if   datasourceusername equals
username equalsignorecase
datasource_ propertydefault_user
datasourceusername equalsignorecase
datasource_ propertydefault_user
username   datasourceusername
return encryptionmanager_ substitutepassword
username  password  sourceseed_  targetseed_
// methods to get the manager levels for regression harness only.
public int getsqlam
return netagent_ targetsqlam_
public int getagent
return targetagent_
public int getcmntcpip
return targetcmntcpip_
public int getrdb
return targetrdb_
public int getsecmgr
return targetsecmgr_
public int getxamgr
return targetxamgr_
public int getsyncptmgr
return targetsyncptmgr_
public int getrsyncmgr
return targetrsyncmgr_
private char flipbits char array
for  int i   0  i < array length  i
array ^  0xff
return array
private void writedeferredresetfromcache
int length   cachedconnectbytes_ length
system arraycopy cachedconnectbytes_
0
netagent_ netconnectionrequest_ bytes_
netagent_ netconnectionrequest_ offset_
length
netagent_ netconnectionrequest_ offset_    length
netagent_ netconnectionrequest_ setdsslengthlocation netagent_ netconnectionrequest_ offset_
netagent_ netconnectionrequest_ setcorrelationid 4
public void writecommitsubstitute_   throws sqlexception
netagent_ connectionrequest_ writecommitsubstitute this
public void readcommitsubstitute_   throws sqlexception
netagent_ connectionreply_ readcommitsubstitute this
public void writelocalxastart_   throws sqlexception
netagent_ connectionrequest_ writelocalxastart this
public void readlocalxastart_   throws sqlexception
netagent_ connectionreply_ readlocalxastart this
public void writelocalxacommit_   throws sqlexception
netagent_ connectionrequest_ writelocalxacommit this
public void readlocalxacommit_   throws sqlexception
netagent_ connectionreply_ readlocalxacommit this
public void writelocalxarollback_   throws sqlexception
netagent_ connectionrequest_ writelocalxarollback this
public void readlocalxarollback_   throws sqlexception
netagent_ connectionreply_ readlocalxarollback this
public void writelocalcommit_   throws sqlexception
netagent_ connectionrequest_ writelocalcommit this
public void readlocalcommit_   throws sqlexception
netagent_ connectionreply_ readlocalcommit this
public void writelocalrollback_   throws sqlexception
netagent_ connectionrequest_ writelocalrollback this
public void readlocalrollback_   throws sqlexception
netagent_ connectionreply_ readlocalrollback this
protected void markclosed_
protected boolean isglobalpending_
return false
protected boolean doclosestatementsonclose_
return true
protected boolean allowcloseinuow_
return false
// driver-specific determination if local commit/rollback is allowed;
// allow local commit/rollback only if we are not in an xa transaction
protected boolean allowlocalcommitrollback_   throws org apache derby client am sqlexception
if  getxastate      xa_t0_not_associated
return true
return false
public void setinputstream java io inputstream inputstream
netagent_ setinputstream inputstream
public void setoutputstream java io outputstream outputstream
netagent_ setoutputstream outputstream
public java io inputstream getinputstream
return netagent_ getinputstream
public java io outputstream getoutputstream
return netagent_ getoutputstream
public void writetransactionstart statement statement  throws sqlexception
public void readtransactionstart   throws sqlexception
super readtransactionstart
public void setindoubttransactions java util hashtable indoubttransactions
if  isxaconnection_
if  indoubttransactions_    null
indoubttransactions_ clear
indoubttransactions_   indoubttransactions
protected void setreadonlytransactionflag boolean flag
readonlytransaction_   flag
public org apache derby client am sectionmanager newsectionmanager
string collection
org apache derby client am agent agent
string databasename
return new org apache derby client am sectionmanager collection  agent  databasename
protected int getsocketandinputoutputstreams string server  int port  int clientsslmode
try
netagent_ socket_    java net socket  java security accesscontroller doprivileged new opensocketaction server  port  clientsslmode
catch  java security privilegedactionexception e
exception opensocketexception   e getexception
if  netagent_ loggingenabled
netagent_ logwriter_ tracepoint    101      opensocketexception getclass   getname         opensocketexception getmessage
return  1
try
netagent_ rawsocketoutputstream_   netagent_ socket_ getoutputstream
netagent_ rawsocketinputstream_   netagent_ socket_ getinputstream
catch  java io ioexception e
if  netagent_ loggingenabled
netagent_ logwriter_ tracepoint    103      e getmessage
try
netagent_ socket_ close
catch  java io ioexception donothing
return  1
return 0
protected int checkalternateserverhasequalorhigherproductlevel productlevel orglvl  int orgservertype
if  orglvl    null    orgservertype    0
return 0
productlevel alternateserverproductlvl
netagent_ netconnection_ databasemetadata_ productlevel_
boolean alternateserverisequalorhighertooriginalserver
alternateserverproductlvl greaterthanorequalto
orglvl versionlevel_
orglvl releaselevel_
orglvl modificationlevel_   ? true   false
// write an entry to the trace
if   alternateserverisequalorhighertooriginalserver
netagent_ loggingenabled
netagent_ logwriter_ tracepoint
99
return  alternateserverisequalorhighertooriginalserver  ? 0    1
public boolean willautocommitgenerateflow
// this logic must be in sync with writecommit() logic
if   autocommit_
return false
if   isxaconnection_
return true
boolean docommit   false
int xastate   getxastate
if  xastate    xa_t0_not_associated
docommit   true
return docommit
public int getsecuritymechanism
return securitymechanism_
public encryptionmanager getencryptionmanager
return encryptionmanager_
public byte gettargetpublickey
return targetpublickey_
public string getproductid
return targetsrvclsnm_
public void doresetnow   throws sqlexception
if   resetconnectionatfirstsql_
return     reset not needed
agent_ beginwritechainoutsideuow
agent_ flowoutsideuow
agent_ endreadchain
/**
* @return returns the connectionnull.
*/
public boolean isconnectionnull
return connectionnull
/**
* @param connectionnull the connectionnull to set.
*/
public void setconnectionnull boolean connectionnull
this connectionnull   connectionnull
/**
* check whether the server has full support for the qryclsimp
* parameter in opnqry.
*
* @return true if qryclsimp is fully supported
*/
public final boolean serversupportsqryclsimp
netdatabasemetadata metadata
netdatabasemetadata  databasemetadata_
return metadata serversupportsqryclsimp
public final boolean serversupportslayerbstreaming
netdatabasemetadata metadata
netdatabasemetadata  databasemetadata_
return metadata serversupportslayerbstreaming
/**
* returns if a transaction is in process
* @return open
*/
public boolean isopen
return open_
/**
* closes underlying connection and associated resource.
*/
synchronized public void close   throws sqlexception
// call super.close*() to do the close*
super close
if   isxaconnection_
return
if  isopen
return     still open  return
if  xares_    null
xares_ removexaresfromsamermchain
/**
* closes underlying connection and associated resource.
*/
synchronized public void closex   throws sqlexception
// call super.close*() to do the close*
super closex
if   isxaconnection_
return
if  isopen
return     still open  return
if  xares_    null
xares_ removexaresfromsamermchain
/**
* invalidates connection but keeps socket open.
*/
synchronized public void closeforreuse   throws sqlexception
// call super.close*() to do the close*
super closeforreuse
if   isxaconnection_
return
if  isopen
return     still open  return
if  xares_    null
xares_ removexaresfromsamermchain
/**
* closes resources connection will be not available
* for reuse.
*/
synchronized public void closeresources   throws sqlexception
// call super.close*() to do the close*
super closeresources
if   isxaconnection_
return
if  isopen
return     still open  return
if  xares_    null
xares_ removexaresfromsamermchain
/**
* invokes write commit on netxaconnection
*/
protected void writexacommit_   throws sqlexception
xares_ netxaconn_ writecommit
/**
* invokes readcommit on netxaconnection
*/
protected void readxacommit_   throws sqlexception
xares_ netxaconn_ readcommit
/**
* invokes writerollback on netxaconnection
*/
protected void writexarollback_   throws sqlexception
xares_ netxaconn_ writerollback
/**
* invokes writerollback on netxaconnection
*/
protected void readxarollback_   throws sqlexception
xares_ netxaconn_ readrollback
protected void writexatransactionstart statement statement  throws sqlexception
xares_ netxaconn_ writetransactionstart statement