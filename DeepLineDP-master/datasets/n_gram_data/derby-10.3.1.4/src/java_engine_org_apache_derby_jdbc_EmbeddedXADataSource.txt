/*
derby - class org.apache.derby.jdbc.embeddedxadatasource
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby jdbc
import org apache derby iapi reference messageid
import org apache derby iapi services i18n messageservice
import org apache derby iapi services monitor monitor
import org apache derby iapi jdbc resourceadapter
import org apache derby iapi db database
import org apache derby iapi reference property
import org apache derby iapi error exceptionseverity
import java sql sqlexception
import java sql connection
import java sql driver
/** -- jdbc 2.0. extension -- */
import javax sql xadatasource
import javax sql xaconnection
/**
embeddedxadatasource is derby's xadatasource implementation for jdbc3.0.
<p>an xadatasource is a factory for xaconnection objects.  it represents a
rm in a dtp environment.  an object that implements the xadatasource
interface is typically registered with a jndi service provider.
<p>
embeddedxadatasource automatically supports the correct jdbc specification version
for the java virtual machine's environment.
<ul>
<li> jdbc 3.0 - java 2 - jdk 1.4, j2se 5.0
</ul>
<p>embeddedxadatasource object only works on a local database.  there is no
client/server support.  an embeddedxadatasource object must live in the same jvm as
the database.
<p>embeddedxadatasource is serializable and referenceable.
<p>see embeddeddatasource for datasource properties.
*/
public class embeddedxadatasource extends embeddeddatasource implements
javax sql xadatasource
private static final long serialversionuid    5715798975598379738l
// link to the database
transient private resourceadapter ra
/**
no-arg constructor
*/
public embeddedxadatasource
super
/*
* xadatasource methods
*/
/**
* attempt to establish a database connection.
*
* @return  a connection to the database
* @exception sqlexception if a database-access error occurs.
*/
public final xaconnection getxaconnection   throws sqlexception
if  ra    null     ra isactive
setupresourceadapter null  null  false
return createxaconnection  ra  getuser    getpassword    false
/**
* attempt to establish a database connection with the given user
* name and password.
*
* @param user the database user on whose behalf the connection is being made
* @param password the user's password
* @return  a connection to the database
* @exception sqlexception if a database-access error occurs.
*/
public final xaconnection getxaconnection string user  string password
throws sqlexception
if  ra    null     ra isactive
setupresourceadapter user  password  true
return createxaconnection  ra  user  password  true
/*
* private method
*/
void update
ra   null
super update
private void setupresourceadapter string user  string password  boolean requestpassword  throws sqlexception
synchronized this
if  ra    null     ra isactive
// if it is inactive, it is useless.
ra   null
string dbname   getdatabasename
if  dbname    null
// see if database already booted, if it is, then don't make a
// connection.
database database   null
// if monitor is never setup by any modulecontrol, getmonitor
// returns null and no derby database has been booted.
if  monitor getmonitor      null
database    database
monitor findservice property database_module  dbname
if  database    null
// if database is not found, try connecting to it.  this
// boots and/or creates the database.  if database cannot
// be found, this throws sqlexception.
if  requestpassword
getconnection user  password  close
else
getconnection   close
// now try to find it again
database    database
monitor findservice property database_module  dbname
if  database    null
ra    resourceadapter  database getresourceadapter
if  ra    null
throw new sqlexception messageservice gettextmessage messageid core_database_not_available
exceptionseverity database_severity
// if database is already up, we need to set up driver
// seperately.
finddriver
if  driver    null
throw new sqlexception messageservice gettextmessage messageid core_driver_not_available
exceptionseverity database_severity
/**
* intantiate and return an embedxaconnection from this instance
* of embeddedxadatasource.
*
* @param user
* @param password
* @return xaconnection
*/
protected xaconnection createxaconnection  resourceadapter ra
string user  string password  boolean requestpassword
throws sqlexception
/* this object (embeddedxadatasource) is a jdbc 2 and jdbc 3
* implementation of xadatsource.  however, it's possible that we
* are running with a newer driver (esp. jdbc 4) in which case we
* should return a pooledconnection that implements the newer jdbc
* interfaces--even if "this" object does not itself satisfy those
* interfaces.  as an example, if we have a jdk 6 application then
* even though this specific object doesn't implement jdbc 4 (it
* only implements jdbc 2 and 3), we should still return an
* xaconnection object that *does* implement jdbc 4 because that's
* what a jdk 6 app expects.
*
* by calling "finddriver()" here we will get the appropriate
* driver for the jdk in use (ex. if using jdk 6 then finddriver()
* will return the jdbc 4 driver).  if we then ask the driver to
* give us an xa connection, we will get a connection that
* corresponds to whatever driver/jdbc implementation is being
* used--which is what we want.  so for a jdk 6 application we
* will correctly return a jdbc 4 xaconnection. derby-2488.
*
* this type of scenario can occur if an application that was
* previously running with an older jvm (ex. jdk 1.4/1.5) starts
* running with a newer jvm (ex. jdk 6), in which case the app
* is probably still using the "old" data source (ex. is still
* instantiating embeddedxadatasource) instead of the newer one
* (embeddedxadatasource40).
*/
return   driver30  finddriver    getnewxaconnection
this  ra  user  password  requestpassword