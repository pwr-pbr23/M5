/*
derby - class org.apache.derby.impl.sql.genericactivationholder
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl sql
import org apache derby iapi sql conn languageconnectioncontext
import org apache derby iapi types datavaluefactory
import org apache derby iapi sql execute execpreparedstatement
import org apache derby iapi sql execute execrow
import org apache derby iapi sql execute executionfactory
import org apache derby iapi sql execute noputresultset
import org apache derby iapi sql execute constantaction
import org apache derby impl sql execute baseactivation
import org apache derby iapi types datatypedescriptor
import org apache derby iapi sql parametervalueset
import org apache derby iapi sql resultset
import org apache derby iapi sql resultdescription
import org apache derby iapi sql activation
import org apache derby iapi sql execute cursorresultset
import org apache derby iapi sql execute temporaryrowholder
import org apache derby iapi sql dictionary indexrowgenerator
import org apache derby iapi sql dictionary tabledescriptor
import org apache derby iapi reference sqlstate
import org apache derby iapi error standardexception
import org apache derby iapi services loader generatedclass
import org apache derby iapi services context context
import org apache derby iapi store access conglomeratecontroller
import org apache derby iapi store access scancontroller
import org apache derby iapi types rowlocation
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi store access transactioncontroller
import java sql sqlwarning
import java util enumeration
import java util vector
import java util hashtable
/**
* this class holds an activation, and passes through most of the calls
* to the activation.  the purpose of this class is to allow a preparedstatement
* to be recompiled without the caller having to detect this and get a new
* activation.
*
* in addition to the activation, this class holds a reference to the
* preparedstatement that created it, along with a reference to the
* generatedclass that was associated with the preparedstatement at the time
* this holder was created.  these references are used to validate the
* activation, to ensure that an activation is used only with the
* preparedstatement that created it, and to detect when recompilation has
* happened.
*
* we detect recompilation by checking whether the generatedclass has changed.
* if it has, we try to let the caller continue to use this activationholder.
* we create a new instance of the new generatedclass (that is, we create a
* new activation), and we compare the number and type of parameters.  if these
* are compatible, we copy the parameters from the old to the new activation.
* if they are not compatible, we throw an exception telling the user that
* the activation is out of date, and they need to get a new one.
*
*/
final class genericactivationholder implements activation
baseactivation			ac
execpreparedstatement	ps
generatedclass			gc
datatypedescriptor	paramtypes
private final languageconnectioncontext lcc
/**
* constructor for an activationholder
*
* @param gc	the generatedclass of the activation
* @param ps	the preparedstatement this activationholder is associated
*				with
*
* @exception standardexception		thrown on error
*/
genericactivationholder languageconnectioncontext lcc  generatedclass gc  execpreparedstatement ps  boolean scrollable
throws standardexception
this lcc   lcc
if  sanitymanager debug
sanitymanager assert gc    null      ps getclass
this gc   gc
this ps   ps
ac    baseactivation  gc newinstance lcc
ac setupactivation ps  scrollable
paramtypes   ps getparametertypes
/* activation interface */
/**
* @see activation#reset
*
* @exception standardexception thrown on failure
*/
public void	reset   throws standardexception
ac reset
/**
* temporary tables can be declared with on commit delete rows. but if the table has a held curosr open at
* commit time, data should not be deleted from the table. this method, (gets called at commit time) checks if this
* activation held cursor and if so, does that cursor reference the passed temp table name.
*
* @return	true if this activation has held cursor and if it references the passed temp table name
*/
public boolean checkifthisactivationhasholdcursor string tablename
return ac checkifthisactivationhasholdcursor tablename
/**
* @see activation#setcursorname
*
*/
public void	setcursorname string cursorname
ac setcursorname cursorname
/**
* @see activation#getcursorname
*/
public string	getcursorname
return ac getcursorname
/**
* @see activation#setresultsetholdability
*
*/
public void	setresultsetholdability boolean resultsetholdability
ac setresultsetholdability resultsetholdability
/**
* @see activation#getresultsetholdability
*/
public boolean	getresultsetholdability
return ac getresultsetholdability
/** @see activation#setautogeneratedkeysresultsetinfo */
public void setautogeneratedkeysresultsetinfo int columnindexes  string columnnames
ac setautogeneratedkeysresultsetinfo columnindexes  columnnames
/** @see activation#getautogeneratedkeysresultsetmode */
public boolean getautogeneratedkeysresultsetmode
return ac getautogeneratedkeysresultsetmode
/** @see activation#getautogeneratedkeyscolumnindexes */
public int getautogeneratedkeyscolumnindexes
return ac getautogeneratedkeyscolumnindexes
/** @see activation#getautogeneratedkeyscolumnnames */
public string getautogeneratedkeyscolumnnames
return ac getautogeneratedkeyscolumnnames
/** @see org.apache.derby.iapi.sql.activation#getlanguageconnectioncontext */
public	languageconnectioncontext	getlanguageconnectioncontext
return	lcc
public transactioncontroller gettransactioncontroller
return ac gettransactioncontroller
/** @see activation#getexecutionfactory */
public	executionfactory	getexecutionfactory
return	ac getexecutionfactory
/**
* @see activation#getparametervalueset
*/
public parametervalueset	getparametervalueset
return ac getparametervalueset
/**
* @see activation#setparameters
*/
public void	setparameters parametervalueset parametervalues  datatypedescriptor parametertypes  throws standardexception
ac setparameters parametervalues  parametertypes
/**
* @see activation#execute
*
* @exception standardexception		thrown on failure
*/
public resultset execute   throws standardexception
/*
** synchronize to avoid problems if another thread is preparing
** the statement at the same time we're trying to execute it.
*/
// synchronized (ps)
/* has the activation class changed? */
if  gc    ps getactivationclass
// ensure the statement is valid by repreparing it.
ps reprepare getlanguageconnectioncontext
/*
** if we get here, it means the preparedstatement has been
** recompiled.  get a new activation and check whether the
** parameters are compatible.  if so, transfer the parameters
** from the old activation to the new one, and make that the
** current activation.  if not, throw an exception.
*/
generatedclass		newgc   ps getactivationclass
baseactivation		newac    baseactivation  newgc newinstance lcc
datatypedescriptor	newparamtypes   ps getparametertypes
/*
** link the new activation to the prepared statement.
*/
newac setupactivation ps  ac getscrollable
newac setparameters ac getparametervalueset    paramtypes
/*
** important
**
** copy any essential state from the old activation
** to the new activation. this must match the state
** setup in embedstatement.
** singleexecution, cursorname, holdability, maxrows.
*/
if  ac issingleexecution
newac setsingleexecution
newac setcursorname ac getcursorname
newac setresultsetholdability ac getresultsetholdability
if  ac getautogeneratedkeysresultsetmode      need to do copy only if auto generated mode is on
newac setautogeneratedkeysresultsetinfo ac getautogeneratedkeyscolumnindexes
ac getautogeneratedkeyscolumnnames
newac setmaxrows ac getmaxrows
// break the link with the prepared statement
ac setupactivation null  false
ac close
/* remember the new class information */
ac   newac
gc   newgc
paramtypes   newparamtypes
string cursorname   ac getcursorname
if  cursorname    null
// have to see if another activation is open
// with the same cursor name. if so we can't use this name
activation activecursor   lcc lookupcursoractivation cursorname
if   activecursor    null      activecursor    ac
throw standardexception newexception sqlstate lang_cursor_already_exists  cursorname
return ac execute
/**
* @see activation#getresultset
*
* @return the current resultset of this activation.
*/
public resultset getresultset
return ac getresultset
/**
* @see activation#setcurrentrow
*
*/
public void setcurrentrow execrow currentrow  int resultsetnumber
ac setcurrentrow currentrow  resultsetnumber
/**
* @see activation#clearcurrentrow
*/
public void clearcurrentrow int resultsetnumber
ac clearcurrentrow resultsetnumber
/**
* @see activation#getpreparedstatement
*/
public execpreparedstatement getpreparedstatement
return ps
public void checkstatementvalidity   throws standardexception
ac checkstatementvalidity
/**
* @see activation#getresultdescription
*/
public resultdescription getresultdescription
return ac getresultdescription
/**
* @see activation#getdatavaluefactory
*/
public datavaluefactory getdatavaluefactory
return ac getdatavaluefactory
/**
* @see activation#getrowlocationtemplate
*/
public rowlocation getrowlocationtemplate int itemnumber
return ac getrowlocationtemplate itemnumber
/**
* @see activation#getheapconglomeratecontroller
*/
public conglomeratecontroller getheapconglomeratecontroller
return ac getheapconglomeratecontroller
/**
* @see activation#setheapconglomeratecontroller
*/
public void setheapconglomeratecontroller conglomeratecontroller updateheapcc
ac setheapconglomeratecontroller updateheapcc
/**
* @see activation#clearheapconglomeratecontroller
*/
public void clearheapconglomeratecontroller
ac clearheapconglomeratecontroller
/**
* @see activation#getindexscancontroller
*/
public scancontroller getindexscancontroller
return ac getindexscancontroller
/**
* @see activation#setindexscancontroller
*/
public void setindexscancontroller scancontroller indexsc
ac setindexscancontroller indexsc
/**
* @see activation#getindexconglomeratenumber
*/
public long getindexconglomeratenumber
return ac getindexconglomeratenumber
/**
* @see activation#setindexconglomeratenumber
*/
public void setindexconglomeratenumber long indexconglomeratenumber
ac setindexconglomeratenumber indexconglomeratenumber
/**
* @see activation#clearindexscaninfo
*/
public void clearindexscaninfo
ac clearindexscaninfo
/**
* @see activation#close
*
* @exception standardexception		thrown on error
*/
public void close   throws standardexception
ac close
/**
* @see activation#isclosed
*/
public boolean isclosed
return ac isclosed
/**
set the activation for a single execution.
@see activation#setsingleexecution
*/
public void setsingleexecution
ac setsingleexecution
/**
is the activation set up for a single execution.
@see activation#issingleexecution
*/
public boolean issingleexecution
return ac issingleexecution
/**
get the number of subqueries in the entire query.
@return int	 the number of subqueries in the entire query.
*/
public int getnumsubqueries
return ac getnumsubqueries
/**
* @see activation#setforcreatetable()
*/
public void setforcreatetable
ac setforcreatetable
/**
* @see activation#getforcreatetable()
*/
public boolean getforcreatetable
return ac getforcreatetable
/**
* @see activation#setddltabledescriptor
*/
public void setddltabledescriptor tabledescriptor td
ac setddltabledescriptor td
/**
* @see activation#getddltabledescriptor
*/
public tabledescriptor getddltabledescriptor
return ac getddltabledescriptor
/**
* @see activation#setmaxrows
*/
public void setmaxrows int maxrows
ac setmaxrows maxrows
/**
* @see activation#getmaxrows
*/
public int getmaxrows
return ac getmaxrows
public void settargetvti java sql resultset targetvti
ac settargetvti targetvti
public java sql resultset gettargetvti
return ac gettargetvti
/* class implementation */
/**
* mark the activation as unused.
*/
public void markunused
ac markunused
/**
* is the activation in use?
*
* @return true/false
*/
public boolean isinuse
return ac isinuse
/**
@see org.apache.derby.iapi.sql.activation#addwarning
*/
public void addwarning sqlwarning w
ac addwarning w
/**
@see org.apache.derby.iapi.sql.activation#getwarnings
*/
public sqlwarning getwarnings
return ac getwarnings
/**
@see org.apache.derby.iapi.sql.activation#clearwarnings
*/
public void clearwarnings
ac clearwarnings
/**
@see activation#informofrowcount
@exception standardexception	thrown on error
*/
public void informofrowcount noputresultset resultset  long rowcount
throws standardexception
ac informofrowcount resultset  rowcount
/**
* @see activation#iscursoractivation
*/
public boolean iscursoractivation
return ac iscursoractivation
public constantaction getconstantaction
return ac getconstantaction
public void setparentresultset temporaryrowholder rs  string resultsetid
ac setparentresultset rs  resultsetid
public vector getparentresultset string resultsetid
return ac getparentresultset resultsetid
public void clearparentresultsets
ac clearparentresultsets
public hashtable getparentresultsets
return ac getparentresultsets
public void setforupdateindexscan cursorresultset forupdateresultset
ac setforupdateindexscan forupdateresultset
public cursorresultset getforupdateindexscan
return ac getforupdateindexscan
public java sql resultset getdynamicresults
return ac getdynamicresults
public int getmaxdynamicresults
return ac getmaxdynamicresults