/*
derby - class org.apache.derby.impl.sql.execute.noputresultsetimpl
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl sql execute
import org apache derby iapi error standardexception
import org apache derby iapi reference sqlstate
import org apache derby iapi services i18n messageservice
import org apache derby iapi services io formatablebitset
import org apache derby iapi services loader generatedmethod
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi sql activation
import org apache derby iapi sql resultdescription
import org apache derby iapi sql execute execindexrow
import org apache derby iapi sql execute execrow
import org apache derby iapi sql execute noputresultset
import org apache derby iapi sql execute targetresultset
import org apache derby iapi store access qualifier
import org apache derby iapi store access rowlocationretrowsource
import org apache derby iapi store access rowsource
import org apache derby iapi types datavaluedescriptor
import org apache derby iapi types orderable
import org apache derby iapi types rowlocation
/**
* abstract resultset with built in activation support for operations that
* return rows but do not allow the caller to put data on output pipes. this
* implementation of resultset is meant to be overridden by subtypes in the
* execution engine. its primary users will be dml operations that do not put
* data on output pipes, but simply return it due to being result sets
* themselves.
* <p>
* this abstract class does not define the entire resultset
* interface, but leaves the 'get' half of the interface
* for subtypes to implement. it is package-visible only,
* with its methods being public for exposure by its subtypes.
* <p>
*/
abstract class noputresultsetimpl
extends basicnoputresultsetimpl
/* set in constructor and not modified */
public final int				resultsetnumber
/* fields used for formating run time statistics output */
protected string indent
protected string subindent
protected int sourcedepth
// fields used when being called as a rowsource
private boolean needsrowlocation
protected execrow clonedexecrow
generatedmethod	checkgm
long			heapconglomerate
protected targetresultset	targetresultset
/* beetle 4464. compact flags into array of key column positions that we do check/skip nulls,
* so that we burn less cycles for each row, column.
*/
protected int checknullcols
protected int cnclen
/**
*  constructor
*
*	@param	activation			the activation
*	@param	resultsetnumber		the resultsetnumber
*  @param	optimizerestimatedrowcount	the optimizer's estimated number
*										of rows.
*  @param	optimizerestimatedcost		the optimizer's estimated cost
*/
noputresultsetimpl activation activation
int resultsetnumber
double optimizerestimatedrowcount
double optimizerestimatedcost
super null
activation
optimizerestimatedrowcount
optimizerestimatedcost
if  sanitymanager debug
sanitymanager assert activation  null
sanitymanager assert resultsetnumber >  0
this resultsetnumber   resultsetnumber
// noputresultset interface
/**
* returns the description of the table's rows
*/
public resultdescription getresultdescription
return activation getresultdescription
/**
return my cursor name for jdbc. can be null.
*/
public string getcursorname
string cursorname   activation getcursorname
if   cursorname    null     isforupdate
activation setcursorname activation getlanguageconnectioncontext   getuniquecursorname
cursorname   activation getcursorname
return cursorname
/** @see noputresultset#resultsetnumber() */
public int resultsetnumber
return resultsetnumber
/**
close needs to invalidate any dependent statements, if this is a cursor.
must be called by any subclasses that override close().
@exception standardexception on error
*/
public void close   throws standardexception
if   isopen
return
/* if this is the top resultset then we must
* close all of the open subqueries for the
* entire query.
*/
if  istopresultset
int stalength    subquerytrackingarray    null  ? 0
subquerytrackingarray length
for  int index   0  index < stalength  index
if  subquerytrackingarray    null
continue
if  subquerytrackingarray isclosed
continue
subquerytrackingarray close
isopen   false
/** @see noputresultset#settargetresultset */
public void settargetresultset targetresultset trs
targetresultset   trs
/** @see noputresultset#setneedsrowlocation */
public void setneedsrowlocation boolean needsrowlocation
this needsrowlocation   needsrowlocation
// rowsource interface
/**
* @see rowsource#getvalidcolumns
*/
public formatablebitset getvalidcolumns
// all columns are valid
return null
/**
* @see rowsource#getnextrowfromrowsource
* @exception standardexception on error
*/
public datavaluedescriptor getnextrowfromrowsource
throws standardexception
execrow execrow   getnextrowcore
if  execrow    null
/* let the target preprocess the row.  for now, this
* means doing an in place clone on any indexed columns
* to optimize cloning and so that we don't try to drain
* a stream multiple times.  this is where we also
* enforce any check constraints.
*/
clonedexecrow   targetresultset preprocesssourcerow execrow
return execrow getrowarray
return null
/**
* @see rowsource#needstoclone
*/
public boolean needstoclone
return true
/**
* @see rowsource#closerowsource
*/
public void closerowsource
// do nothing here - actual work will be done in close()
// rowlocationretrowsource interface
/**
* @see rowlocationretrowsource#needsrowlocation
*/
public boolean needsrowlocation
return needsrowlocation
/**
* @see rowlocationretrowsource#rowlocation
* @exception standardexception on error
*/
public void rowlocation rowlocation rl
throws standardexception
targetresultset changedrow clonedexecrow  rl
// class implementation
/**
* clear the orderable cache for each qualifier.
* (this should be done each time a scan/conglomerate with
* qualifiers is reopened.)
*
* @param qualifiers	the qualifiers to clear
*/
protected void clearorderablecache qualifier qualifiers  throws standardexception
// clear the qualifiers's orderable cache
if  qualifiers    null
qualifier qual
for  int term   0  term < qualifiers length  term
for  int index   0  index < qualifiers length  index
qual   qualifiers
qual clearorderablecache
/* beetle 4880 performance enhancement and avoid deadlock while pushing
* down method call to store: pre-evaluate.
*/
if    genericqualifier  qual  varianttype    qualifier variant
qual getorderable   		   ignore return value
/* support methods for rowsource interface.
* these methods are used for enabling check constraint enforcement and
* replication logging for published tables when we are a rowsource.
*/
/**
* set the generatedmethod for enforcing check constraints
*
* @param checkgm	the generatedmethod for enforcing any check constraints.
*/
protected void setcheckconstraints generatedmethod checkgm
this checkgm   checkgm
/**
* set the heap conglomerate number (used in enforcing check constraints)
*
* @param heapconglomerate	the heap conglomerate number.
*/
protected void setheapconglomerate long heapconglomerate
this heapconglomerate   heapconglomerate
/**
* set the current row to the row passed in.
*
* @param row the new current row
*
*/
public final void setcurrentrow execrow row
activation setcurrentrow row  resultsetnumber
currentrow   row
/**
* clear the current row
*
*/
public final void clearcurrentrow
currentrow   null
activation clearcurrentrow resultsetnumber
/**
* is this resultset or it's source result set for update
* this method will be overriden in the inherited classes
* if it is true
* @return whether or not the result set is for update.
*/
public boolean isforupdate
return false
/**
* return true if we should skip the scan due to nulls in the start
* or stop position when the predicate on the column(s) in question
* do not implement ordered null semantics. beetle 4464, we also compact
* the arenullsordered flags into checknullcols here.
*
* @param startposition	an index row for the start position
* @param stopposition	an index row for the stop position
*
* @return	true means not to do the scan
*/
protected boolean skipscan execindexrow startposition  execindexrow stopposition
throws standardexception
int nstartcols    startposition    null  ? 0   startposition ncolumns
int nstopcols    stopposition    null  ? 0   stopposition ncolumns
/* two facts 1) for start and stop key column positions, one has to be the prefix
* of the other, 2) startposition.arenullsordered(i) can't be different from
* stopposition.arenullsordered(i) unless the case "c > null and c < 5", (where c is
* non-nullable), in which we skip the scan anyway.
* so we can just use the longer one to get checknullcols.
*/
boolean startkeylonger   false
int size   nstopcols
if  nstartcols > nstopcols
startkeylonger   true
size   nstartcols
if  size    0
return false
if   checknullcols    null      checknullcols length < size
checknullcols   new int
cnclen   0
boolean returnvalue   false
for  int position   0  position < nstartcols  position
if     startposition arenullsordered position
if  startkeylonger
checknullcols   position   1
if  startposition getcolumn position   1  isnull
returnvalue    true
if    startkeylonger
break
if  startkeylonger    returnvalue
return true
for  int position   0  position < nstopcols  position
if     stopposition arenullsordered position
if    startkeylonger
checknullcols   position   1
if  returnvalue
continue
if  stopposition getcolumn position   1  isnull
returnvalue    true
if  startkeylonger
break
return returnvalue
/**
* return true if we should skip the scan due to nulls in the row
* when the start or stop positioners on the columns containing
* null do not implement ordered null semantics.
*
* @param row	an index row
*
* @return	true means skip the row because it has null
*/
protected boolean skiprow execrow row   throws standardexception
for  int i   0  i < cnclen  i
if  row getcolumn checknullcols  isnull
return true
return false
/**
* return a 2-d array of qualifiers as a string
*/
public static string printqualifiers qualifier qualifiers
string idt
string output
if  qualifiers    null
return idt   messageservice gettextmessage sqlstate lang_none
for  int term   0  term < qualifiers length  term
for  int i   0  i < qualifiers length  i
qualifier qual   qualifiers
output   idt   output
messageservice gettextmessage
sqlstate lang_column_id_array
string valueof term   string valueof i
qual getcolumnid
int operator   qual getoperator
string opstring   null
switch  operator
case orderable order_op_equals
opstring
break
case orderable order_op_lessorequals
opstring
break
case orderable order_op_lessthan
opstring
break
default
if  sanitymanager debug
sanitymanager throwassert     operator
// note: this does not have to be internationalized, because
// this code should never be reached.
opstring       operator
break
output   output
idt   messageservice gettextmessage sqlstate lang_operator
opstring
idt
messageservice gettextmessage
sqlstate lang_ordered_nulls
qual getorderednulls
idt
messageservice gettextmessage
sqlstate lang_unknown_return_value
qual getunknownrv
idt
messageservice gettextmessage
sqlstate lang_negate_comparison_result
qual negatecompareresult
return output
/**
* @see noputresultset#updaterow
*
* this method is result sets used for scroll insensitive updatable
* result sets for other result set it is a no-op.
*/
public void updaterow execrow row  throws standardexception
// only resultsets of type scroll insensitive implement
// detectability, so for other result sets this method
// is a no-op
/**
* @see noputresultset#markrowasdeleted
*
* this method is result sets used for scroll insensitive updatable
* result sets for other result set it is a no-op.
*/
public void markrowasdeleted   throws standardexception
// only resultsets of type scroll insensitive implement
// detectability, so for other result sets this method
// is a no-op
/**
* @see noputresultset#positionscanatrowlocation
*
* this method is result sets used for scroll insensitive updatable
* result sets for other result set it is a no-op.
*/
public void positionscanatrowlocation rowlocation rl
throws standardexception
// only resultsets of type scroll insensitive implement
// detectability, so for other result sets this method
// is a no-op