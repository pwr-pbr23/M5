/*
derby - class org.apache.derby.impl.sql.execute.genericconstantactionfactory
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl sql execute
import org apache derby iapi error standardexception
import org apache derby iapi services context contextservice
import org apache derby iapi sql conn authorizer
import org apache derby iapi sql conn languageconnectioncontext
import org apache derby iapi sql resultdescription
import org apache derby iapi sql execute constantaction
import org apache derby iapi sql execute execindexrow
import org apache derby iapi sql dictionary constraintdescriptorlist
import org apache derby iapi sql dictionary genericdescriptorlist
import org apache derby iapi sql dictionary indexrowgenerator
import org apache derby iapi sql dictionary tabledescriptor
import org apache derby iapi sql dictionary schemadescriptor
import org apache derby iapi sql execute execrow
import org apache derby iapi sql depend providerinfo
import org apache derby iapi store access staticcompiledopenconglominfo
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi types rowlocation
import org apache derby catalog uuid
import org apache derby catalog aliasinfo
import org apache derby iapi services io formatablebitset
import java util list
import java util properties
import java sql timestamp
/**
* factory for creating constantactions.
*
* <p>implemetation note: for most operations, the resultsetfactory
*    determines if the operation is allowed in a readonly/target database.
*    because we perform jar add/drop/replace with a utility rather than
*    using normal language processing we never get a result set for these
*    operations. for this reason, the constantactionfactory rather than
*    the resultsetfactory checks if the these operations are allowed.
*
*/
public class genericconstantactionfactory
///////////////////////////////////////////////////////////////////////
//
//	constructors
//
///////////////////////////////////////////////////////////////////////
public	genericconstantactionfactory
///////////////////////////////////////////////////////////////////////
//
//	constant action manufactories
//
///////////////////////////////////////////////////////////////////////
/**
* get constantaction for set constraints statement.
*
*  @param cdl			the constraints to set, if null,
*						we'll go ahead and set them all
*  @param enable		if true, turn them on, if false
*						disable them
*  @param unconditionallyenforce	replication sets this to true at
*									the end of refresh. this forces us
*									to run the included foreign key constraints even
*									if they're already marked enabled.
*	@param ddllist		replication list of actions to propagate,
*						null unless a replication source
*/
public	constantaction getsetconstraintsconstantaction
constraintdescriptorlist	cdl
boolean						enable
boolean						unconditionallyenforce
object					ddllist
// ignore rep arg
return new setconstraintsconstantaction cdl  enable  unconditionallyenforce
/**
*	make the alteraction for an alter table statement.
*
*  @param sd			descriptor for the schema that table lives in.
*  @param tablename	name of table.
*	@param tableid		uuid of table.
*	@param tableconglomerateid	heap conglomerate id of table
*  @param tabletype	type of table (e.g., base).
*  @param columninfo	information on all the columns in the table.
*  @param constraintactions	constraintconstantaction[] for constraints
* @param lockgranularity	the lock granularity.
*	@param compresstable	whether or not this is a compress table
*	@param behavior			drop behavior of dropping column
*	@param sequential	if compress table/drop column, whether or not sequential
*/
public	constantaction	getaltertableconstantaction
schemadescriptor			sd
string						tablename
uuid						tableid
long						tableconglomerateid
int							tabletype
columninfo				columninfo
constraintconstantaction 	constraintactions
char						lockgranularity
boolean						compresstable
int							behavior
boolean						sequential
boolean                     truncatetable
return new	altertableconstantaction  sd  tablename  tableid  tableconglomerateid
tabletype  columninfo  constraintactions
lockgranularity  compresstable
behavior  sequential  truncatetable
/**
*	make a constantaction for a constraint.
*
*  @param constraintname	constraint name.
*  @param constrainttype	constraint type.
*  @param tablename		table name.
*	@param tableid			uuid of table.
*  @param schemaname		schema that table lives in.
*  @param columnnames		string[] for column names
*  @param indexaction		indexconstantaction for constraint (if necessary)
*  @param constrainttext	text for check constraint
*	@param enabled			should the constraint be created as enabled
*							(enabled == true), or disabled (enabled == false).
*	@param otherconstraint	the referenced constraint, if a foreign key constraint
*  @param providerinfo information on all the providers
*/
public	createconstraintconstantaction	getcreateconstraintconstantaction
string				constraintname
int					constrainttype
string				tablename
uuid				tableid
string				schemaname
string			columnnames
indexconstantaction indexaction
string				constrainttext
boolean				enabled
constraintinfo		otherconstraint
providerinfo		providerinfo
return new createconstraintconstantaction
constraintname  constrainttype  tablename
tableid  schemaname  columnnames  indexaction  constrainttext
enabled  otherconstraint  providerinfo
/**
*	make the constantaction for a create index statement.
*
*  @param unique		true means it will be a unique index
*  @param indextype	the type of index (btree, for example)
*  @param schemaname			the schema that table (and index) lives in.
*  @param indexname	name of the index
*  @param tablename	name of table the index will be on
*	@param tableid		uuid of table.
*  @param columnnames	names of the columns in the index, in order
*  @param isascending	array of booleans telling asc/desc on each column
*  @param isconstraint	true if index is backing up a constraint, else false
*  @param conglomerateuuid	id of conglomerate
*  @param properties	the optional properties list associated with the index.
*/
public	createindexconstantaction	getcreateindexconstantaction
boolean			unique
string			indextype
string			schemaname
string			indexname
string			tablename
uuid			tableid
string		columnnames
boolean		isascending
boolean			isconstraint
uuid			conglomerateuuid
properties		properties
return	new createindexconstantaction
unique  indextype  schemaname  indexname  tablename  tableid
columnnames  isascending  isconstraint
conglomerateuuid  properties
/**
*	make the constantaction for a create alias statement.
*
*  @param aliasname		name of alias.
*  @param schemaname		alias's schema.
*  @param javaclassname	name of java class.
*  @param aliastype		the alias type
*/
public	constantaction	getcreatealiasconstantaction
string	aliasname
string	schemaname
string	javaclassname
aliasinfo	aliasinfo
char	aliastype
return new createaliasconstantaction
aliasname  schemaname  javaclassname  aliasinfo  aliastype
/**
* make the constantaction for a create schema statement.
*
*  @param schemaname	name of table.
*  @param aid			authorizaton id
*/
public	constantaction	getcreateschemaconstantaction
string			schemaname
string			aid
return new createschemaconstantaction schemaname  aid
/**
*	make the constantaction for a create table statement.
*
*  @param schemaname	name for the schema that table lives in.
*  @param tablename	name of table.
*  @param tabletype	type of table (e.g., base, global temporary table).
*  @param columninfo	information on all the columns in the table.
*		 (remind tabledescriptor ignored)
*  @param constraintactions	createconstraintconstantaction[] for constraints
*  @param properties	optional table properties
* @param lockgranularity	the lock granularity.
* @param oncommitdeleterows	if true, on commit delete rows else on commit preserve rows of temporary table.
* @param onrollbackdeleterows	if true, on rollback, delete rows from temp tables which were logically modified. true is the only supported value
*/
public	constantaction	getcreatetableconstantaction
string			schemaname
string			tablename
int				tabletype
columninfo	columninfo
createconstraintconstantaction constraintactions
properties		properties
char			lockgranularity
boolean			oncommitdeleterows
boolean			onrollbackdeleterows
return new createtableconstantaction  schemaname  tablename  tabletype  columninfo
constraintactions  properties
lockgranularity  oncommitdeleterows  onrollbackdeleterows
/**
*	make the constantaction for a savepoint statement (rollback savepoint, relase savepoint and savepoint).
*
*  @param savepointname	name for the savepoint.
*  @param statementtype	type of savepoint statement ie rollback, release or set savepoint
*/
public	constantaction	getsavepointconstantaction
string			savepointname
int				statementtype
return new savepointconstantaction  savepointname  statementtype
/**
*	make the constantaction for a create view statement.
*
*  @param schemaname	name of the schema that table lives in.
*  @param tablename	name of table.
*  @param tabletype	type of table (in this case tabledescriptor.view_type).
*	@param viewtext		text of query expression for view definition
*  @param checkoption	check option type
*  @param columninfo	information on all the columns in the table.
*  @param providerinfo information on all the providers
*	@param compschemaid	id of schema in which the view is to be bound
*						when accessed in the future.
*		 (remind tabledescriptor ignored)
*/
public	constantaction	getcreateviewconstantaction
string	schemaname
string			tablename
int				tabletype
string			viewtext
int				checkoption
columninfo	columninfo
providerinfo  providerinfo
uuid			compschemaid
return new createviewconstantaction  schemaname  tablename  tabletype
viewtext  checkoption  columninfo
providerinfo  compschemaid
/**
*	make the constantaction for a replicated delete statement.
*
*  @param conglomid			conglomerate id.
*  @param tabletype			type of this table
*	@param heapscoci			staticcompiledopenconglominfo for heap.
*  @param irgs					index descriptors
*  @param indexcids			conglomerate ids of indices
*	@param indexscocis	staticcompiledopenconglominfos for indexes.
*  @param emptyheaprow			template for heap row.
*	@param deferred				true means deferred delete
*  @param tableispublished		true if table is published
*  @param tableid				table id
*	@param lockmode				the lock mode to use
*								  (row or table, see transactioncontroller)
*  @param keysignature     	signature for the key(null for source)
*  @param keypositions     	positions of primary key columns in base row
*  @param keyconglomid  		conglomerate id for the key
*								(-1 for the souce)
*  @param schemaname    		schemaname(null for source)
*  @param tablename        	tablename(null for source)
*  @param resultdescription	a description of the columns in the row
*			to be deleted.  only set in replication or during cascade delete.
*	@param fkinfo				array of structures containing foreign key
*								info, if any (may be null)
*	@param triggerinfo			array of structures containing trigger
*								info, if any (may be null)
*  @param numcolumns			number of columns to read
*  @param dependencyid			uuid for dependency system
*  @param baserowreadlist      map of columns read in.  1 based.
*	@param baserowreadmap		baserowreadmap[heapcolid]->readrowcolumnid.
*  @param streamstorableheapcolids null for non rep. (0 based)
*  @param singlerowsource		whether or not source is a single row source
*
*  @exception standardexception		thrown on failure
*/
public	constantaction	getdeleteconstantaction
long				conglomid
int					tabletype
staticcompiledopenconglominfo heapscoci
indexrowgenerator	irgs
long				indexcids
staticcompiledopenconglominfo indexscocis
execrow				emptyheaprow
boolean				deferred
boolean				tableispublished
uuid				tableid
int					lockmode
object         		deletetoken
object		     	keysignature
int				keypositions
long                keyconglomid
string				schemaname
string				tablename
resultdescription	resultdescription
fkinfo			fkinfo
triggerinfo			triggerinfo
formatablebitset				baserowreadlist
int				baserowreadmap
int               streamstorableheapcolids
int					numcolumns
uuid				dependencyid
boolean				singlerowsource
constantaction	dependentconstantactions
throws standardexception
// ignore replication args, which should be null
return new deleteconstantaction
conglomid
heapscoci
irgs
indexcids
indexscocis
emptyheaprow
deferred
tableid
lockmode
fkinfo
triggerinfo
baserowreadlist
baserowreadmap
streamstorableheapcolids
numcolumns
singlerowsource
resultdescription
dependentconstantactions
/**
*	make constantaction to drop a constraint.
*
*  @param constraintname	constraint name.
*	@param constraintschemaname		constraint schema name
*  @param tablename		table name.
*	@param tableid			uuid of table.
*  @param tableschemaname				the schema that table lives in.
*  @param indexaction		indexconstantaction for constraint (if necessary)
*	@param behavior			the drop behavior (e.g. statementtype.restrict)
*  @param verifytype       verify that the constraint is of this type.
*/
public	constraintconstantaction	getdropconstraintconstantaction
string					constraintname
string					constraintschemaname
string					tablename
uuid					tableid
string					tableschemaname
indexconstantaction indexaction
int						behavior
int                     verifytype
return	new dropconstraintconstantaction  constraintname  constraintschemaname  tablename
tableid  tableschemaname  indexaction  behavior  verifytype
/**
*	make the constantaction for a drop index statement.
*
*
*	@param	fullindexname		fully qualified index name
*	@param	indexname			index name.
*	@param	tablename			the table name
*	@param	schemaname					schema that index lives in.
*  @param  tableid				uuid for table
*  @param  tableconglomerateid	heap conglomerate id for table
*
*/
public	dropindexconstantaction	getdropindexconstantaction
string				fullindexname
string				indexname
string				tablename
string				schemaname
uuid				tableid
long				tableconglomerateid
return	new dropindexconstantaction  fullindexname  indexname  tablename  schemaname
tableid  tableconglomerateid
/**
*	make the constantaction for a drop alias statement.
*
*
*	@param	aliasname			alias name.
*	@param	aliastype			alias type.
*
*/
public	constantaction	getdropaliasconstantaction schemadescriptor	sd  string aliasname  char aliastype
return	new dropaliasconstantaction sd  aliasname  aliastype
/**
*	make the constantaction for a drop table statement.
*
*	@param	schemaname			table name.
*
*/
public	constantaction	getdropschemaconstantaction string	schemaname
return	new dropschemaconstantaction  schemaname
/**
*	make the constantaction for a drop table statement.
*
*
*	@param	fulltablename		fully qualified table name
*	@param	tablename			table name.
*	@param	sd					schema that table lives in.
*  @param  conglomeratenumber	conglomerate number for heap
*  @param  tableid				uuid for table
*  @param  behavior			drop behavior, cascade, restrict or default
*
*/
public	constantaction	getdroptableconstantaction
string				fulltablename
string				tablename
schemadescriptor	sd
long				conglomeratenumber
uuid				tableid
int					behavior
return	new droptableconstantaction  fulltablename  tablename  sd  conglomeratenumber  tableid  behavior
/**
*	make the constantaction for a drop view statement.
*
*
*	@param	fulltablename		fully qualified table name
*	@param	tablename			table name.
*	@param	sd					schema that view lives in.
*
*/
public	constantaction	getdropviewconstantaction
string				fulltablename
string				tablename
schemadescriptor	sd
return new dropviewconstantaction  fulltablename  tablename  sd
/**
*	make the constantaction for a rename table/column/index statement.
*
*	@param	fulltablename fully qualified table name
*	@param	tablename   table name.
*	@param	oldobjectname   old object name
*	@param	newobjectname   new object name.
*	@param	sd    schema that table lives in.
*	@param	tableid   uuid for table
*  @param	usedaltertable	true if used alter table command, false if used rename
*  @param	renamingwhat	value indicates if rename column/index.
*
*/
public	constantaction	getrenameconstantaction
string				fulltablename
string				tablename
string				oldobjectname
string				newobjectname
schemadescriptor	sd
uuid				tableid
boolean				usedaltertable
int				renamingwhat
return	new renameconstantaction  fulltablename  tablename  oldobjectname  newobjectname
sd  tableid  usedaltertable  renamingwhat
/**
*	make the constantaction for a replicated insert statement.
*
*  @param conglomid		conglomerate id.
*  @param heapscoci		staticcompiledopenconglominfo for target heap.
*  @param irgs				index descriptors
*  @param indexcids		conglomerate ids of indices
*	@param indexscocis		staticcompiledopenconglominfos for indexes.
*  @param indexnames		names of indices on this table for error
*							reporting.
*	@param deferred			true means deferred insert
*  @param tableispublished	true if table is published, false otherwise
*  @param tableid			table id
*  @param targetproperties	properties on the target table
*	@param fkinfo			array of structures containing foreign key info,
*							if any (may be null)
*	@param triggerinfo		array of structures containing trigger info,
*  @param streamstorableheapcolids null for non rep. (0 based)
*							if any (may be null)
*  @param indexedcols		boolean[] of which (0-based) columns are indexed.
*  @param dependencyid		uuid for dependency system
*	@param stagecontrol		stage control tokens
*	@param ddllist			list of ddl to log. this is for bulk insert into a published table at the source.
*  @param singlerowsource	whether or not source is a single row source
*  @param autoincrowlocation array of row locations into syscolumns for
autoincrement columns
*
* @exception standardexception		thrown on failure
*/
public	constantaction getinsertconstantaction
tabledescriptor		tabledescriptor
long				conglomid
staticcompiledopenconglominfo heapscoci
indexrowgenerator	irgs
long				indexcids
staticcompiledopenconglominfo indexscocis
string			indexnames
boolean				deferred
boolean				tableispublished
uuid				tableid
int					lockmode
object         		inserttoken
object				rowsignature
properties			targetproperties
fkinfo			fkinfo
triggerinfo			triggerinfo
int               streamstorableheapcolids
boolean			indexedcols
uuid				dependencyid
object			stagecontrol
object			ddllist
boolean				singlerowsource
rowlocation		autoincrowlocation
throws standardexception
return new insertconstantaction tabledescriptor
conglomid
heapscoci
irgs
indexcids
indexscocis
indexnames
deferred
targetproperties
tableid
lockmode
fkinfo
triggerinfo
streamstorableheapcolids
indexedcols
singlerowsource
autoincrowlocation
/**
*	make the constantaction for an updatable vti statement.
*
* @param deferred					deferred mode?
*
* @exception standardexception		thrown on failure
*/
public constantaction getupdatablevticonstantaction  int statementtype  boolean deferred
throws standardexception
return new updatablevticonstantaction  statementtype  deferred  null
/**
*	make the constantaction for an updatable vti statement.
*
* @param deferred					deferred mode?
* @param changedcolumnids array of ids of changed columns
*
* @exception standardexception		thrown on failure
*/
public constantaction getupdatablevticonstantaction  int statementtype
boolean deferred
int changedcolumnids
throws standardexception
return new updatablevticonstantaction  statementtype  deferred  changedcolumnids
/**
* make the constantaction for a lock table statement.
*
*  @param fulltablename		full name of the table.
*  @param conglomeratenumber	conglomerate number for the heap
*  @param exclusivemode		whether or not to get an exclusive lock.
*/
public	constantaction	getlocktableconstantaction
string fulltablename
long conglomeratenumber  boolean exclusivemode
return new locktableconstantaction
fulltablename  conglomeratenumber  exclusivemode
/**
* make the constantaction for a set schema statement.
*
*  @param schemaname	name of schema.
*  @param type			literal, user or ?
*/
public	constantaction	getsetschemaconstantaction string schemaname  int type
return new setschemaconstantaction  schemaname   type
/**
* make the constantaction for a set transaction isolation statement.
*
* @param isolationlevel	the new isolation level.
*/
public constantaction getsettransactionisolationconstantaction int isolationlevel
return new settransactionisolationconstantaction isolationlevel
/**
*	make the constantaction for a replicated delete statement.
*
*  @param conglomid			conglomerate id.
*  @param tabletype			type of this table
*	@param heapscoci			staticcompiledopenconglominfo for heap.
*  @param irgs					index descriptors
*  @param indexcids			conglomerate ids of indices
*	@param indexscocis	staticcompiledopenconglominfos for indexes.
*  @param emptyheaprow			template for heap row.
*	@param deferred				true means deferred update
*	@param targetuuid			uuid of target table
*	@param lockmode				the lock mode to use
*								  (row or table, see transactioncontroller)
*  @param tableispublished		true if table is published, false otherwise
*	@param changedcolumnids		array of ids of changes columns
*  @param keypositions     	positions of primary key columns in base row
*	@param fkinfo				array of structures containing foreign key info,
*								if any (may be null)
*	@param triggerinfo			array of structures containing trigger info,
*  @param baserowreadlist      map of columns read in.  1 based.
*  @param baserowreadmap		map of columns to be selected from the base row
*								(partial row). 1 based.
*  @param streamstorableheapcolids null for non rep. (0 based)
*  @param numcolumns			the number of columns being read.
*	@param positionedupdate		is this a positioned update
*  @param singlerowsource		whether or not source is a single row source
*
*  @exception standardexception thrown on failure
*/
public	updateconstantaction	getupdateconstantaction
long				conglomid
int					tabletype
staticcompiledopenconglominfo heapscoci
indexrowgenerator	irgs
long				indexcids
staticcompiledopenconglominfo indexscocis
string			indexnames
execrow				emptyheaprow
boolean				deferred
uuid				targetuuid
int					lockmode
boolean				tableispublished
int				changedcolumnids
int				keypositions
object         		updatetoken
fkinfo			fkinfo
triggerinfo			triggerinfo
formatablebitset				baserowreadlist
int				baserowreadmap
int				streamstorableheapcolids
int					numcolumns
boolean				positionedupdate
boolean				singlerowsource
throws standardexception
return new updateconstantaction
conglomid
heapscoci
irgs
indexcids
indexscocis
indexnames
emptyheaprow
deferred
targetuuid
lockmode
changedcolumnids
fkinfo
triggerinfo
baserowreadlist
baserowreadmap
streamstorableheapcolids
numcolumns
positionedupdate
singlerowsource
static protected authorizer getauthorizer
languageconnectioncontext lcc    languageconnectioncontext
contextservice getcontext languageconnectioncontext context_id
return lcc getauthorizer
/**
*	make the constantaction for a create trigger statement.
*
* @param triggerschemaname		name of the schema that trigger lives in.
* @param triggername	name of trigger
* @param eventmask		triggerdescriptor.trigger_event_xxxx
* @param isbefore		is this a before (as opposed to after) trigger
* @param isrow			is this a row trigger or statement trigger
* @param isenabled		is this trigger enabled or disabled
* @param triggertable	the table upon which this trigger is defined
* @param whenspsid		the sps id for the when clause (may be null)
* @param whentext		the text of the when clause (may be null)
* @param actionspsid	the spsid for the trigger action (may be null)
* @param actiontext	the text of the trigger action (may be null)
* @param spscompschemaid	the compilation schema for the action and when
*							spses.   if null, will be set to the current default
*							schema
* @param creationtimestamp	when was this trigger created?  if null, will be
*						set to the time that executeconstantaction() is invoked
* @param referencedcols	what columns does this trigger reference (may be null)
* @param originalactiontext the original user text of the trigger action
* @param referencingold whether or not old appears in referencing clause
* @param referencingnew whether or not new appears in referencing clause
* @param oldreferencingname old referencing table name, if any, that appears in refercing clause
* @param newreferencingname new referencing table name, if any, that appears in refercing clause
*/
public constantaction getcreatetriggerconstantaction
string				triggerschemaname
string				triggername
int					eventmask
boolean				isbefore
boolean 			isrow
boolean 			isenabled
tabledescriptor		triggertable
uuid				whenspsid
string				whentext
uuid				actionspsid
string				actiontext
uuid				spscompschemaid
timestamp			creationtimestamp
int				referencedcols
string				originalactiontext
boolean				referencingold
boolean				referencingnew
string				oldreferencingname
string				newreferencingname
return new createtriggerconstantaction triggerschemaname  triggername
eventmask  isbefore  isrow  isenabled  triggertable  whenspsid
whentext  actionspsid  actiontext  spscompschemaid  creationtimestamp
referencedcols  originalactiontext
referencingold  referencingnew  oldreferencingname  newreferencingname
/**
* make the constantaction for a drop trigger statement.
*
* @param	sd					schema that stored prepared statement lives in.
* @param	triggername			name of the trigger
* @param	tableid				the table this trigger is defined upon
*/
public constantaction getdroptriggerconstantaction
schemadescriptor	sd
string				triggername
uuid				tableid
return new droptriggerconstantaction sd  triggername  tableid
/**
* make the constant action for a update statistics statement.
*
* @param fortable		whether for an index or table.
* @param objectname	name of the object (either table or index) for which
* this statistic is being created.
* @param tableuuid		uuid of the table for which statistics are being
* created.
* @param objectuuid    array of uuid's, one for each index conglomerate for
* which statistics are being created.
* @param conglomeratenumber array of conglomerate numbers, one for each
* index conglomerate for which statistics are being created.
* @param indexrow		array of index rows, one for each index. this row is
* used by the constant action to read data from the indices.
*/
public constantaction getupdatestatisticsconstantaction
boolean fortable
string objectname
uuid tableuuid
uuid objectuuid
long conglomeratenumber
execindexrow indexrow
return new updatestatisticsconstantaction fortable
objectname
tableuuid
objectuuid
conglomeratenumber
indexrow
/**
* make the constant action for drop statistics statement.
*
* @param sd			schema descriptor of the schema in which the object
* resides.
* @param fulltablename full name of the object for which statistics are
* being dropped.
* @param objectname	 object name for which statistics are being dropped.
* @param fortable 		 is it an index or table whose statistics aer being
* consigned to the garbage heap?
*/
public constantaction getdropstatisticsconstantaction
schemadescriptor sd  string fulltablename  string objectname  boolean fortable
return new dropstatisticsconstantaction sd  fulltablename  objectname  fortable
/**
* make the constant action for a grant statement
*
* @param privileges the list of privileges to be granted
* @param grantees the list of grantees
*/
public constantaction getgrantconstantaction  privilegeinfo privileges
list grantees
return new grantrevokeconstantaction  true  privileges  grantees
/**
* make the constant action for a revoke statement
*
* @param privileges the list of privileges to be revokeed
* @param grantees the list of grantees
*/
public constantaction getrevokeconstantaction  privilegeinfo privileges
list grantees
return new grantrevokeconstantaction  false  privileges  grantees