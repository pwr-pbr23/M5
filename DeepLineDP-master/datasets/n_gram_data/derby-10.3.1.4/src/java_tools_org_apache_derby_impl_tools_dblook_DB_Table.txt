/*
derby - class org.apache.derby.impl.tools.dblook.db_table
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl tools dblook
import java sql connection
import java sql statement
import java sql preparedstatement
import java sql resultset
import java sql sqlexception
import java sql resultsetmetadata
import java util hashmap
import java util set
import java util iterator
import org apache derby tools dblook
public class db_table
// prepared statements use throughout the ddl
// generation process.
private static preparedstatement getcolumninfostmt
private static preparedstatement getcolumntypestmt
private static preparedstatement getautoincstmt
/* ************************************************
* generate the ddl for all user tables in a given
* database.
* @param conn connection to the source database.
* @param tableidtonamemap mapping of table ids to table
*  names, for quicker reference.
* @return the ddl for the tables has been written
*  to output via logs.java.
****/
public static void dotables connection conn  hashmap tableidtonamemap
throws sqlexception
// prepare some statements for general use by this class.
getcolumninfostmt
conn preparestatement
getcolumntypestmt
conn preparestatement
getautoincstmt
conn preparestatement
// walk through list of tables and generate the ddl for
// each one.
boolean firsttime   true
set tableids   tableidtonamemap keyset
for  iterator itr   tableids iterator    itr hasnext
string tableid    string itr next
string tablename    string  tableidtonamemap get tableid
if  dblook isexcludedtable tablename
// table isn't included in user-given list; skip it.
continue
if  firsttime
logs reportstring
logs reportmessage
logs reportstring
logs writetonewddl     tablename
// get column list, and write ddl for each column.
boolean firstcol   true
getcolumninfostmt setstring 1  tableid
resultset columnrs   getcolumninfostmt executequery
while  columnrs next
string colname   dblook addquotes columnrs getstring 1
string createcolstring   createcolumn colname  columnrs getstring 2
columnrs getint 3
if   firstcol
createcolstring       createcolstring
logs writetonewddl createcolstring
firstcol   false
columnrs close
logs writetonewddl
logs writestmtendtonewddl
logs writenewlinetonewddl
firsttime   false
outer while
getcolumninfostmt close
getcolumntypestmt close
getautoincstmt close
/* ************************************************
* generate the ddl for a specific column of the
* the table corresponding to the received tableid.
* @param colname the name of the column to generate.
* @param tableid which table the column belongs to.
* @param colnum the number of the column to generate (1 =>
*  1st column, 2 => 2nd column, etc)
* @return the generated ddl, as a string.
****/
private static string createcolumn string colname  string tableid
int colnum  throws sqlexception
getcolumntypestmt setstring 1  tableid
getcolumntypestmt setstring 2  dblook stripquotes colname
resultset rs   getcolumntypestmt executequery
stringbuffer coldef   new stringbuffer
if  rs next
coldef append dblook addquotes dblook expanddoublequotes
dblook stripquotes colname
coldef append
coldef append rs getstring 1
if   reinstateautoincrement colname  tableid  coldef
rs getstring 2     null
coldef append
coldef append rs getstring 2
rs close
return coldef tostring
/* ************************************************
* generate autoincrement ddl for a given column and write it to
* received stringbuffer
* @param colname: name of column that is autoincrement.
* @param tableid: id of table in which column exists.
* @param coldef: stringbuffer to which ddl will be added.
* @return true if autoincrement ddl has been generated.
****/
public static boolean reinstateautoincrement string colname
string tableid  stringbuffer coldef  throws sqlexception
getautoincstmt setstring 1  dblook stripquotes colname
getautoincstmt setstring 2  tableid
resultset autoinccols   getautoincstmt executequery
if  autoinccols next
long start   autoinccols getlong 1
if   autoinccols wasnull
coldef append
coldef append autoinccols getobject 5     null ?
coldef append
coldef append autoinccols getlong 1
coldef append
coldef append autoinccols getlong 2
coldef append
return true
return false