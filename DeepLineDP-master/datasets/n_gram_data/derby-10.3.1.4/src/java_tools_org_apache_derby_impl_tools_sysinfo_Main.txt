/*
derby - class org.apache.derby.impl.tools.sysinfo.main
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl tools sysinfo
import java security accesscontroller
import java security privilegedaction
import java util locale
import java io ioexception
import java io unsupportedencodingexception
import java io inputstream
import java util properties
import java io bufferedreader
import java io inputstreamreader
import java util locale
import java util missingresourceexception
import java util resourcebundle
import java util stringtokenizer
import java io file
import java util zip zipfile
import java io ioexception
import java util zip zipentry
import java io fileinputstream
import java util vector
import java io inputstream
import java lang reflect method
import java net url
import java net urldecoder
import java security protectiondomain
import java security codesource
import java security accesscontroller
import org apache derby iapi services info propertynames
import org apache derby iapi services info productversionholder
import org apache derby iapi services info productgenusnames
import org apache derby iapi tools i18n
/**
<p>
sysinfo reports values relevant to the current derby configuration.
<p>
sysinfo looks for properties files in org.apache.derby.info named after
the genus names in org.apache.derby.tools.sysinfo, and gets their location
using getresource. it also searches the classpath and attempts to load
the info properties files from the directory or jar locations on the
classpath, and eliminates any duplicated information. if no files
are found, or some other exception occurs, the
value returned will be that set for the key
sysinfo.failuretag, or be the value "<info unavailable>".
<p>
this class can be used to print out system information at the
command line by issuing the command:
<pre>
java org.apache.derby.tools.sysinfo
</pre>
alternatively, you can use sysinfo within your program to display
derby information; a derby version string is returned by this java code:
<pre>
new main().tostring();
</pre>
*/
public final class main
/**
application entry point for sysinfo.   this will print out
the derby product information as well as a snapshot of
the system properties.
*/
public static void main string args
// adjust the application in accordance with derby.ui.locale and derby.ui.codeset
localizedresource getinstance
localizedoutput out
//using appstreamreader(extends inputstreamreader) for conversion into specific codeset
out   localizedresource outputwriter
// because we're in a static method, we need to
// get our own instance variable
parseargs  args
if  cptester    true
getclasspathinfo  args  out
else
getmaininfo  out  setpause
end of main  string args
public static void getmaininfo  java io printwriter aw  boolean pause
aw println  javasep
reportjavainfo  aw
aw println  jbmssep
reportderby  aw
aw println  sep
// locales info
try
reportlocales  aw
catch  exception e
aw println  main gettextmessage
aw println  main gettextmessage
if  pause
pause
end of getmaininfo  appstreamwriter aw  boolean printlicense  boolean pause
private static boolean setpause   false
private static boolean setlicense   false
private static boolean cptester   false
private static void parseargs  string args
if  args    null
return
for  int i   0  i < args length  i
if  args equals
setpause   true
if  args equals
cptester true
end for
end of parseargs  string args
/**
for the benefit of dos box users, this method waits for input
before returning
*/
private static void pause
try
system out print  main gettextmessage
bufferedreader br   new bufferedreader  new inputstreamreader  system in
br readline
catch  ioexception ioe
//just return
end of pause
/**
prints out the jbms info to the specified appstreamwriter.
@param localaw the appstreamwriter to use. if null, system.out is
used
*/
private static void reportderby  java io printwriter localaw
localaw println     org apache derby iapi services info jvminfo derbyvmlevel
string classpath
try
classpath   system getproperty
catch  securityexception se
localaw println
main gettextmessage     se getmessage
classpath   null
zipinfoproperties zip  main getallinfo  classpath
if  zip    null
for  int i   0  i < zip length  i
string thisinfo       zip getlocation
zip getversionbuildinfo
localaw println  thisinfo
else
localaw println  main gettextmessage
end of reportderby
/**
writes out the relevant info about the java environment to
the specified appstreamwriter.
@param localaw the appstreamwriter to write info out to. if this is
null, the info is written to system.out
*/
private static void reportjavainfo  java io printwriter localaw
localaw println  main gettextmessage
getjavaproperty
localaw println  main gettextmessage
getjavaproperty
localaw println  main gettextmessage
getjavaproperty
localaw println  main gettextmessage
getjavaproperty
localaw println  main gettextmessage
getjavaproperty
localaw println  main gettextmessage
getjavaproperty
localaw println  main gettextmessage
getjavaproperty
localaw println  main gettextmessage
getjavaproperty
localaw println  main gettextmessage
getjavaproperty
localaw println  main gettextmessage
getjavaproperty
localaw println     getjavaproperty
localaw println     getjavaproperty
end of reportjavainfo
/**
return java properties from java.lang.system. will catch
securityexceptions and note them for displaying information.
@return the java property value or a string capturing a
security exception.
*/
private static string getjavaproperty  string whichproperty
string property
string unavailable   main gettextmessage
try
property   system getproperty  whichproperty  unavailable
return property
catch  securityexception se
return main gettextmessage     se
end of getjavaproperty  string whichproperty
/**
for use by the main () method
*/
private final static string sep
private final static string javasep   main gettextmessage
private final static string jbmssep   main gettextmessage
private final static string licsep    main gettextmessage
private final static string locsep    main gettextmessage
private final static string curloc    main gettextmessage
/**
the name of the failure tag in the information file.
the failure tag's value provides a default value if
any other properties are missing.
*/
private final static string failuretag   main gettextmessage
private static void getclasspathinfo  string args  java io printwriter aw
main useme  args  aw
/**
writes out information about the locales with the
product.
@param localaw the appstreamwriter to which the info is written. if this
value is null, the info is written to system.out
*/
private static void reportlocales  java io printwriter localaw
boolean cur_loc   true
localaw println  locsep
// read all the possible locales, and test for each one, if it loads.
// if so, then read the properties, and print them out.
locale supportedlocales   locale getavailablelocales
string stringlocales   new string
for  int i   0  i < supportedlocales length  i
stringlocales   supportedlocales tostring
java util arrays sort stringlocales
properties p   new properties
for  int i   0  i < stringlocales length  i
string localeresource
stringlocales
final properties finalp   p
final string finallocaleresource   localeresource
try
inputstream is    inputstream  accesscontroller doprivileged
new privilegedaction
public object run
inputstream locis
finalp getclass   getresourceasstream  finallocaleresource
return locis
if  is    null
//           localaw.println("resource is null: " + localeresource);
else
try
p clear
p load  is
//displaying current locale
if  cur_loc
locale loc   null
loc   locale getdefault
localaw println main gettextmessage           loc getdisplaylanguage          loc getdisplaycountry         loc
cur_loc   false
//beetle 5079: do not print unlocalized locale names to console, only print locale code.
string localename   p getproperty
localename   localename substring localename indexof    1
localename   localename substring 0 localename indexof
localaw println  main gettextmessage
localename
int major   integer valueof p getproperty      intvalue
int minor   integer valueof p getproperty      intvalue
int maint   integer valueof p getproperty      intvalue
string build   p getproperty
string lv   productversionholder fullversionstring major  minor  maint  false  build
localaw println  main gettextmessage     lv
catch  ioexception ioe
//this case is a bit ugly. if we get an ioexception, we return
//null. though this correctly reflects that the product is not
//available for use, it may be confusing to users that we swallow
//the io error here.
localaw println     is
catch  throwable t
localaw println      localeresource
localaw println      t
localaw println  sep
end of reportlocales
/* for arguments, choose from one of:*/
private static final string embedded
/* you can add this if you like*/
private static final string tools
private static final string net
private static final string client
private static final string db2driver
/* you can add this if you like */
private static final string mainusagestring
private static final string usagestringparta   mainusagestring       embedded       net       client       db2driver       tools
private static final string usagestringpartb
static  void useme string args  java io printwriter pw
java io printwriter localpw   pw
if  localpw    null
localpw   new java io printwriter system out
int length   args length
if  length  1
try
tryallclasspaths localpw
catch  throwable t
else
try
trysomeclasspaths args  localpw
catch  throwable t
private static void tryallclasspaths java io printwriter localpw  throws throwable
localpw println main gettextmessage
localpw println main gettextmessage    mainusagestring
stringbuffer successes   new stringbuffer main gettextmessage     crlf
stringbuffer failures   new stringbuffer crlf     main gettextmessage      crlf
trycoreclasspath successes  failures
trynetclasspath successes  failures
tryclientclasspath successes  failures
trydb2driverclasspath successes  failures
tryutilsclasspath successes  failures
localpw println successes tostring
if   failures tostring   equals crlf     main gettextmessage      crlf
localpw println failures tostring
else
localpw println main gettextmessage
localpw flush
private static void trysomeclasspaths string args  java io printwriter localpw  throws throwable
boolean seenarg   false
stringbuffer successes   new stringbuffer main gettextmessage     crlf
stringbuffer failures   new stringbuffer crlf     main gettextmessage      crlf
if  argumentscontain args  embedded
trycoreclasspath successes  failures
seenarg  true
if  argumentscontain args net
trynetclasspath successes  failures
seenarg  true
if  argumentscontain args client
tryclientclasspath successes  failures
seenarg  true
if  argumentscontain args db2driver
trydb2driverclasspath successes  failures
seenarg  true
if  argumentscontain args tools     argumentscontain args
tryutilsclasspath successes  failures
seenarg  true
string userclass   argumentmatches args
if   userclass equals
trymyclasspath argumentmatches args      main gettextmessage    userclass   successes  failures
seenarg  true
if  seenarg
localpw println successes tostring
if   failures tostring   equals crlf     main gettextmessage      crlf
localpw println failures tostring
else
localpw println main gettextmessage
else
localpw println main gettextmessage    usagestringparta  usagestringpartb
localpw flush
private static void trycoreclasspath stringbuffer successes  stringbuffer failures
trymyclasspath    main gettextmessage        successes  failures
private static void trynetclasspath stringbuffer successes  stringbuffer failures
trymyclasspath    main gettextmessage        successes  failures
trymyclasspath    main gettextmessage        successes  failures
private static void tryclientclasspath stringbuffer successes  stringbuffer failures
trymyclasspath    main gettextmessage        successes  failures
private static void trydb2driverclasspath stringbuffer successes
stringbuffer failures
trymyclasspath
main gettextmessage
successes  failures
private static void tryutilsclasspath stringbuffer successes  stringbuffer failures
trymyclasspath    main gettextmessage        successes  failures
private static void trymyclasspath string cn  string library  stringbuffer successes  stringbuffer failures
try
class c   class forname cn
string loc   getfilewhichloadedclass c
successes append found cn  library  loc
catch  throwable t
failures append notfound cn  library
private static void tryasresource string cn  string library  stringbuffer successes  stringbuffer failures
try
java io inputstream in   cn getclass   getresourceasstream cn
in close
string loc   getfilewhichloadedclass cn getclass
successes append found cn  library  loc
catch  throwable t
failures append notfound cn  library
private static string found string cn  string library  string loc
stringbuffer temp   new stringbuffer crlf
temp append     library
temp append crlf
if  loc    null
temp append    append loc  append crlf
temp append crlf
return temp tostring
private static string notfound string cn  string library
stringbuffer temp   new stringbuffer crlf
temp append     library
temp append crlf
temp append     main gettextmessage    cn
temp append crlf
temp append crlf
return temp tostring
private static string crlf
return system getproperty
private static string lookformainarg string args  java io printwriter localpw
int length args length
string legalargs   new string
legalargs   embedded
int argsfound   0
string whichargument
for  int i   0  i < length  i
for  int j 0  j < legalargs length  j
if  args touppercase java util locale english  equals legalargs touppercase java util locale english
argsfound
whichargument legalargs
if  argsfound > 1    argsfound < 1
localpw println main gettextmessage    usagestringparta  usagestringpartb
return
return whichargument
private static boolean argumentscontain string args  string s
for  int i   0  i < args length  i
if  args equalsignorecase s
return true
return false
private static string argumentmatches string args  string ss
string userclass
int length   args length
for  int i   0  i < length  i
if  args endswith ss
userclass   args substring 0 args length   6
return userclass
/*
** code related to loading info fromjar files.
*/
private static final string infonames
org apache derby iapi services info productgenusnames dbms
org apache derby iapi services info productgenusnames tools
org apache derby iapi services info productgenusnames net
org apache derby iapi services info productgenusnames dnc
/**
*  get all the info we can obtain from the local execution context
*  as to the availability of the derby classes by attempting to load
*  the info files with loadzipfromresource() and checking classpath
*  locations with checkforinfo if the classpath is accessible.
*
*  @param classpath the classpath, or null if not accessible
*  @return an array of zipinfoproperties with the locations of the located
*          resources
*  @see #loadzipfromresource()
*  @see #checkforinfo(string)
*/
public static zipinfoproperties getallinfo string classpath
zipinfoproperties zips   loadzipfromresource
// no info properties files found, but here we are in sysinfo.
// avoid an npe in mergezips by creating a zipinfoproperties array
// with the location of the sysinfo that is currently executing.
if  zips    null
zips   new zipinfoproperties
zipinfoproperties zip   new zipinfoproperties productversionholder getproductversionholderfrommyenv org apache derby tools sysinfo tools
zip setlocation getfilewhichloadedclass new main   getclass
zips   zip
try
if  classpath    null
string cp    parseclasspath classpath
vector v   new vector
for  int i   0  i < cp length  i
zipinfoproperties zip   null
try
zip   checkforinfo cp
catch  securityexception se
zip   new zipinfoproperties null
zip setlocation
main gettextmessage     se getmessage
if  zip    null
v addelement zip
if  v size   > 0
zipinfoproperties cpzips   new zipinfoproperties
v copyinto cpzips
return mergezips zips  cpzips
return mergezips zips  null
catch  securityexception se
zipinfoproperties zip   new zipinfoproperties
zip   new zipinfoproperties null
zip setlocation
main gettextmessage     se getmessage
return zip
/**
*  attempt to load the info properties files specified in infonames[i]
*  using getresourceasstream(). if none are able to be loaded, return
*  a null array.
*
*  @return an array of zipinfoproperties with the locations from which
*          the info properties files were loaded.
*  @see #infonames
*/
private static zipinfoproperties  loadzipfromresource
java util arraylist al   new java util arraylist
for  int i   0  i < infonames length  i
final string resource     concat infonames
inputstream is    inputstream  accesscontroller doprivileged
new privilegedaction
public object run
inputstream locis
new main   getclass   getresourceasstream resource
return locis
if  is    null
continue
zipinfoproperties ze   new zipinfoproperties productversionholder getproductversionholderfrommyenv is
// get the real location of the info file
url locurl    url  accesscontroller doprivileged
new privilegedaction
public object run
url realurl   new main   getclass   getresource resource
return realurl
ze setlocation formaturl locurl
al add ze
if  al size      0
return null
zipinfoproperties zip   new zipinfoproperties
al toarray zip
return zip
/**
*  split the classpath into separate elements.
*
*  @param cp the classpath, if accessible.
*  @return a string array with the individual classpath elements.
*/
private static string  parseclasspath string cp
stringtokenizer st   new stringtokenizer cp  file pathseparator
int count   st counttokens
if  count    0
return null
string vals   new string
for  int i  0  i < count  i
vals   st nexttoken
return vals
/**
*  given an individual element of the element of the classpath, call
*  checkdirectory() if the element is a directory or checkfile()
*  if the element is a file.
*
*  @param cpentry the classpath element
*  @return a zipinfoproperties if an info properties file is found.
*/
private static zipinfoproperties checkforinfo string cpentry
file f   new file cpentry
if     f exists
return null
if  f isdirectory
zipinfoproperties zip   checkdirectory cpentry
return zip
if  f isfile
zipinfoproperties zip   checkfile cpentry
return zip
return null
/**
*  check a given directory for the presence of an info properties file in
*  org/apache/derby/info inside the directory.
*
*  @param dirname the directory to check as a string
*  @return a zipinfoproperties if a file is found, otherwise null.
*/
private static zipinfoproperties checkdirectory string dirname
boolean foundone   false
file f   null
for  int i   0  i < infonames length  i
string localsysinfo   infonames replace    file separatorchar
f   new file dirname  localsysinfo
if  f exists
foundone   true
break
if   foundone     f    null
return null
try
inputstream bis   new fileinputstream f
zipinfoproperties zip   new zipinfoproperties productversionholder getproductversionholderfrommyenv bis
zip setlocation new file dirname  getcanonicalpath   replace    file separatorchar
return zip
catch  ioexception ioe
return null
/**
*  check inside a jar file for the presence of a derby info properties
*  file. there is a special case for db2jcc, which does not have a derby
*  info propeties file. if db2jcc is in the filename, acquire db2driver
*  via reflection and get the version number from it.
*
*  @param filename the jar file to check
*  @return zipinfoproperties with the jar file set as the location
*          or null if not found.
*/
private static zipinfoproperties checkfile string filename
// try to create a zipfile from it
// check to see if it's a version of db2jcc.jar and if so, report the version number.
if  filename indexof    >  0
class c   null
method m   null
object o   null
integer build   null
integer major   null
integer minor   null
try
try
c   class forname
m   c getmethod    null
o   c newinstance
build    integer m invoke o null
catch  classnotfoundexception cnfe
c   class forname
m   c getmethod    null
o   c newinstance
build    integer m invoke o null
m   c getmethod    null
major    integer m invoke o null
m   c getmethod    null
minor    integer m invoke o null
productversionholder jccversion   productversionholder getproductversionholder
major intvalue
minor intvalue
0
0
build tostring
boolean false
zipinfoproperties zip   new zipinfoproperties jccversion
string loc   getfilewhichloadedclass c
// for db2jcc.jar, report the actual file from which db2driver
// was loaded, if we can determine it. for db2jcc_license_c,
// report the filename from the classpath, and the version
// info from the db2driver that we loaded. this is slightly
// misleading, since db2jcc_license_c.jar doesn't really have
// a "version", but the two jars are usually linked.
if  loc    null    filename indexof    < 0
zip setlocation loc
else
zip setlocation new file filename  getcanonicalpath   replace    file separatorchar
return zip
catch  exception e    return null
try
zipfile zf   new zipfile filename
// try to get a zipentry from the zipfile
zipentry thisentry   null
for  int i  0  i < infonames length  i
thisentry   zf getentry infonames
if  thisentry    null
break
if  thisentry    null
return null
inputstream bis   zf getinputstream thisentry
if  bis    null
return null
zipinfoproperties zip   new zipinfoproperties productversionholder getproductversionholderfrommyenv bis
zip setlocation new file filename  getcanonicalpath   replace    file separatorchar
return zip
catch  ioexception ioe
//guess not
return null
/*
** message handling
*/
private static resourcebundle getbundle
try
return resourcebundle getbundle
catch  missingresourceexception mre
return null
public static string gettextmessage string msgid
return getcompletemessage msgid   object  null
public static string gettextmessage string msgid  object a1
return getcompletemessage msgid  new object  a1
public static string gettextmessage string msgid  object a1  object a2
return getcompletemessage msgid  new object  a1  a2
public static string gettextmessage string msgid  object a1  object a2  object a3
return getcompletemessage msgid  new object  a1  a2  a3
public static string gettextmessage string msgid  object a1  object a2  object a3  object a4
return getcompletemessage msgid  new object  a1  a2  a3  a4
/**
*/
public static string getcompletemessage string msgid  object arguments
// we have a base file (sysinfomessages.properties) so don't give us a last chance.
return org apache derby iapi services i18n messageservice formatmessage getbundle    msgid  arguments  false
/**
* given a loaded class, this
* routine asks the class's class loader for information about where the
* class was loaded from. typically, this is a file, which might be
* either a class file or a jar file. the routine figures that out, and
* returns the name of the file. if it can't figure it out, it returns null
*/
private static string getfilewhichloadedclass final class cls
return  string accesscontroller doprivileged  new privilegedaction
public object run
codesource cs   null
try
cs   cls getprotectiondomain   getcodesource
catch  securityexception se
return main gettextmessage    cls  se getmessage
if   cs    null
return null
url result   cs getlocation
return formaturl result
/**
*  <p>
*  merge and flatten two arrays of zipinfoproperties, removing any
*  duplicates. there may be duplicates in the arrays because
*  loadzipfromresource may find all the properties files in the same
*  location, such as when loading from compiled source instead of
*  packaged jars. also, a poorly constructed classpath may contain
*  duplicate entries that each contain the derby classes, and we
*  need only report the first of each such instances found.
*  <p>
*  the second array may be null if the classpath was empty, in which
*  case we still remove the duplicates from the first array and return
*  the shortened array.
*
*  @param zip1 the first array from loadzipwithresource
*  @param zip2 the second array from analyzing the classpath
*  @return the merged array
*/
private static zipinfoproperties mergezips zipinfoproperties zip1
zipinfoproperties zip2
vector v   new vector
boolean founddup   false
// remove duplicates from first array
for  int i   0  i < zip1 length  i
if  zip1    null    zip1 length > 1
for  int j   i   1  j < zip1 length  j
if  zip1 getlocation   equals zip1 getlocation
zip1   null
if  zip1    null
v addelement zip1
// if provided a second array, remove any locations in second array
// still in first array.
if  zip2    null
for  int j   0  j < zip2 length  j
for  int k   0  k < v size    k
zipinfoproperties z    zipinfoproperties v get k
if  zip2 getlocation   equals z getlocation
founddup   true
if   founddup
v addelement zip2
founddup   false
zipinfoproperties merged   new zipinfoproperties
v copyinto merged
return merged
/**
*  strip a given url down to the filename. the url will be a jarfile or
*  directory containing a derby info properties file. return the canonical
*  path for the filename, with the path separators normalized.
*/
private static string formaturl url loc
string filename   urldecoder decode loc tostring
if  filename startswith       filename   filename substring 4
if  filename startswith       filename   filename substring 5
if  filename indexof    >  1    filename   filename substring 0  filename indexof
if  filename indexof    >  1
filename   filename substring 0  filename indexof
if  filename charat 0
character isletter filename charat 1
filename charat 2
filename charat 2          filename   filename substring 1
string result
try
result   new file filename  getcanonicalpath   replace    file separatorchar
catch  ioexception e
result
return result
end of class main