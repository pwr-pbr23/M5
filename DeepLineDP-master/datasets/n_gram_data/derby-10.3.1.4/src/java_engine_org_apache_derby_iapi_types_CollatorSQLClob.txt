/*
derby - class org.apache.derby.iapi.types.collatorsqlclob
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi types
import org apache derby iapi error standardexception
import org apache derby iapi services sanity sanitymanager
import java text rulebasedcollator
/**
* collatorsqlclob class differs from sqlclob based on how the 2 classes
* use different collations to collate their data. sqlclob uses derby's
* default collation which is ucs_basic. whereas, this class uses the
* rulebasedcollator object that was passed to it in it's constructor and that
* rulebasedcollator object decides the collation.
*
* in derby 10.3, this class will be passed a rulebasedcollator which is based
* on the database's territory. in future releases of derby, this class can be
* used to do other kinds of collations like case-insensitive collation etc by
* just passing an appropriate rulebasedcollator object for that kind of
* collation.
*/
class collatorsqlclob extends sqlclob implements collationelementsinterface
private workhorseforcollatordatatypes holderforcollationsensitiveinfo
/*
* constructors
*/
/**
* create sql clob value initially set to null that
* performs collation according to collatorforcharacterdatatypes
*/
collatorsqlclob rulebasedcollator collatorforcharacterdatatypes
setcollator collatorforcharacterdatatypes
/**
* create sql clob value initially set to value that
* performs collation according to collatorforcharacterdatatypes
*/
collatorsqlclob string val  rulebasedcollator collatorforcharacterdatatypes
super val
setcollator collatorforcharacterdatatypes
/**
* set the rulebasedcollator for this instance of collatorsqlclob. it will
* be used to do the collation.
*/
private void setcollator rulebasedcollator collatorforcharacterdatatypes
holderforcollationsensitiveinfo
new workhorseforcollatordatatypes collatorforcharacterdatatypes  this
/** @see collationelementsinterface#getcollationelementsforstring */
public int getcollationelementsforstring   throws standardexception
return holderforcollationsensitiveinfo getcollationelementsforstring
/** @see collationelementsinterface#getcountofcollationelements */
public int getcountofcollationelements
return holderforcollationsensitiveinfo getcountofcollationelements
/*
* datavaluedescriptor interface
*/
/**
* @see datavaluedescriptor#getclone
*/
public datavaluedescriptor getclone
try
return new collatorsqlclob getstring
holderforcollationsensitiveinfo getcollatorforcollation
catch  standardexception se
if  sanitymanager debug
sanitymanager throwassert    se
return null
/**
* @see datavaluedescriptor#getnewnull
*/
public datavaluedescriptor getnewnull
collatorsqlclob result   new collatorsqlclob null
holderforcollationsensitiveinfo getcollatorforcollation
return result
/**
* we do not anticipate this method on collation sensitive dvd to be
* ever called in derby 10.3 in future, when derby will start supporting
* sql standard collate clause, this method might get called on the
* collation sensitive dvds.
*
* @see stringdatavalue#getvalue(rulebasedcollator)
*/
public stringdatavalue getvalue rulebasedcollator collatorforcomparison
if  collatorforcomparison    null
//non-null collatorforcomparison means use this collator sensitive
//implementation of sqlclob
setcollator collatorforcomparison
return this
else
//null collatorforcomparison means use ucs_basic for collation.
//for that, we need to use the base class sqlclob
sqlclob s   new sqlclob
s copystate this
return s
/** @see sqlchar#stringcompare(sqlchar, sqlchar) */
protected int stringcompare sqlchar char1  sqlchar char2
throws standardexception
return holderforcollationsensitiveinfo stringcompare char1  char2
/**
* this method implements the like function for char (with no escape value).
* the difference in this method and the same method in superclass is that
* here we use special collator object to do the comparison rather than
* using the collator object associated with the default jvm locale.
*
* @param pattern		the pattern to use
*
* @return	a sql boolean value telling whether the first operand is
*			like the second operand
*
* @exception standardexception		thrown on error
*/
public booleandatavalue like datavaluedescriptor pattern
throws standardexception
return holderforcollationsensitiveinfo like pattern
/**
* this method implements the like function for char with an escape value.
*
* @param pattern		the pattern to use
*
* @return	a sql boolean value telling whether the first operand is
* like the second operand
*
* @exception standardexception		thrown on error
*/
public booleandatavalue like datavaluedescriptor pattern
datavaluedescriptor escape  throws standardexception
return holderforcollationsensitiveinfo like pattern  escape