/*
derby - class org.apache.derby.jdbc.embedpooledconnection40
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby jdbc
import java sql connection
import java sql sqlexception
import java util enumeration
import java util vector
import java sql preparedstatement
import javax sql statementevent
import javax sql statementeventlistener
/**
a pooledconnection object is a connection object that provides hooks for
connection pool management.
<p>this is derby's implementation of a pooledconnection for use in
the following environments:
<ul>
<li> jdbc 4.0 - j2se 6.0
</ul>
*/
class embedpooledconnection40 extends embedpooledconnection
//using generics to avoid casting problems
protected final vector<statementeventlistener> statementeventlisteners
new vector<statementeventlistener>
embedpooledconnection40  referenceabledatasource ds  string user
string password  boolean requestpassword  throws sqlexception
super  ds  user  password  requestpassword
/**
* removes the specified <code>statementeventlistener</code> from the list of
* components that will be notified when the driver detects that a
* <code>preparedstatement</code> has been closed or is invalid.
* <p>
*
* @param listener	the component which implements the
* <code>statementeventlistener</code> interface that was previously
* registered with this <code>pooledconnection</code> object
* <p>
* @since 1.6
*/
public void removestatementeventlistener statementeventlistener listener
if  listener    null
return
statementeventlisteners removeelement listener
/**
* registers a <code>statementeventlistener</code> with this
* <code>pooledconnection</code> object.  components that
* wish to be notified when  <code>preparedstatement</code>s created by the
* connection are closed or are detected to be invalid may use this method
* to register a <code>statementeventlistener</code> with this
* <code>pooledconnection</code> object.
* <p>
*
* @param listener	an component which implements the
* <code>statementeventlistener</code> interface that is to be registered
* with this <code>pooledconnection</code> object
* <p>
* @since 1.6
*/
public void addstatementeventlistener statementeventlistener listener
if   isactive
return
if  listener    null
return
statementeventlisteners addelement listener
/**
* raise the statementclosed event for all the listeners when the
* corresponding events occurs
* @param statement preparedstatement
*/
public void onstatementclose preparedstatement statement
if   statementeventlisteners isempty
statementevent event   new statementevent this statement
//synchronized block on statementeventlisteners to make it thread
//safe
synchronized statementeventlisteners
for  statementeventlistener l   statementeventlisteners
l statementclosed event
/**
* raise the statementerroroccurred event for all the listeners when the
* corresponding events occurs
* @param statement preparedstatement
* @param sqle      sqlexception
*/
public void onstatementerroroccurred preparedstatement statement sqlexception sqle
if   statementeventlisteners isempty
statementevent event   new statementevent this statement sqle
//synchronized block on statementeventlisteners to make it thread
//safe
synchronized statementeventlisteners
for  statementeventlistener l   statementeventlisteners
l statementerroroccurred event