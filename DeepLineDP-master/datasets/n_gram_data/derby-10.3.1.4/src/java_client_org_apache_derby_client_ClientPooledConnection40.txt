/*
derby - class org.apache.derby.client.clientpooledconnection40
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby client
import java sql preparedstatement
import java sql sqlexception
import java util enumeration
import java util vector
import javax sql connectioneventlistener
import javax sql statementeventlistener
import javax sql statementevent
import org apache derby client am sqlexception
import org apache derby client net netxaconnection
import org apache derby jdbc clientbasedatasource
import org apache derby jdbc clientdatasource
import org apache derby client am sqlexception
import org apache derby client net netlogwriter
/**
*
* the class extends from the clientpooledconnection class
* and contains implementations for the jdbc 4.0 specific
* methods in the javax.sql.pooledconnection interface.
*
*/
public class clientpooledconnection40 extends clientpooledconnection
//using generics to avoid casting problems
protected final vector<statementeventlistener> statementeventlisteners
new vector<statementeventlistener>
public clientpooledconnection40 clientbasedatasource ds
org apache derby client am logwriter logwriter
string user
string password  throws sqlexception
super ds logwriter user password
public clientpooledconnection40 clientbasedatasource ds
org apache derby client am logwriter logwriter
string user
string password
int rmid  throws sqlexception
super ds logwriter user password rmid
public clientpooledconnection40 clientbasedatasource ds
org apache derby client am logwriter logwriter  throws sqlexception
super ds logwriter
/**
*
* registers a statementeventlistener with this pooledconnection object.
* components that wish to be informed of events associated with the
* preparedstatement object created by this pooledconnection like the close
* or error occurred event can register a statementeventlistener with this
* pooledconnection object.
*
* @param  listener a component that implements the statementeventlistener
*                  interface and wants to be notified of statement closed or
*                  or statement error occurred events
*/
public void addstatementeventlistener statementeventlistener listener
if  logwriter_    null
logwriter_ traceentry this     listener
statementeventlisteners addelement listener
/**
*
* removes the specified previously registered listener object from the list
* of components that would be informed of events with a preparedstatement
* object.
*
* @param listener the previously registered event listener that needs to be
*                 removed from the list of components
*/
public void removestatementeventlistener statementeventlistener listener
if  logwriter_    null
logwriter_ traceentry this     listener
statementeventlisteners removeelement listener
/**
*
* raise the statementclosed event for all the listeners when the
* corresponding events occurs.
*
* @param statement the preparedstatement that was closed
*
*/
public void onstatementclose preparedstatement statement
if   statementeventlisteners isempty
statementevent event   new statementevent this statement
//synchronized block on statementeventlisteners to make it thread
//safe
synchronized statementeventlisteners
for  statementeventlistener l   statementeventlisteners
l statementclosed event
/**
*
* raise the statementerroroccurred event for all the listeners when the
* corresponding events occurs.
*
* @param statement the preparedstatement on which error occurred
* @param sqle      the sqlexception associated with the error that
*                  caused the invalidation of the preparedstatements
*
*/
public void onstatementerroroccurred preparedstatement statement
sqlexception sqle
if   statementeventlisteners isempty
statementevent event   new statementevent this statement sqle
//synchronized block on statementeventlisteners to make it thread
//safe
synchronized statementeventlisteners
for  statementeventlistener l   statementeventlisteners
l statementerroroccurred event