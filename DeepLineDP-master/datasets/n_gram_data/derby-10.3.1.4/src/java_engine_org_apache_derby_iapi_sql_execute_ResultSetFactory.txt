/*
derby - class org.apache.derby.iapi.sql.execute.resultsetfactory
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi sql execute
import org apache derby iapi error standardexception
import org apache derby iapi sql resultdescription
import org apache derby iapi sql resultset
import org apache derby iapi sql activation
import org apache derby iapi services loader generatedmethod
import org apache derby iapi store access qualifier
import org apache derby iapi types datavaluedescriptor
/**
* resultsetfactory provides a wrapper around all of
* the result sets needed in an execution implementation.
* <p>
* for the activations to avoid searching for this module
* in their execute methods, the base activation supertype
* should implement a method that does the lookup and salts
* away this factory for the activation to use as it needs it.
*
*/
public interface resultsetfactory
/**
module name for the monitor's module locating system.
*/
string module
//
// ddl operations
//
/**
generic ddl result set creation.
@param activation 		the activation for this result set
@return	resultset	a wrapper result set to run the execution-time
logic.
@exception standardexception thrown when unable to create the
result set
*/
resultset getddlresultset activation activation
throws standardexception
//
// misc operations
//
/**
generic misc result set creation.
@param activation 		the activation for this result set
@return	resultset	a wrapper result set to run the execution-time
logic.
@exception standardexception thrown when unable to create the
result set
*/
resultset getmiscresultset activation activation
throws standardexception
//
// transaction operations
//
/**
@param activation 		the activation for this result set
@return	resultset	a wrapper result set to run the execution-time
logic.
@exception standardexception thrown when unable to create the
result set
*/
resultset getsettransactionresultset activation activation
throws standardexception
//
// dml statement operations
//
/**
an insert result set simply reports that it completed, and
the number of rows inserted.  it does not return rows.
the insert has been completed once the
insert result set is available.
@param source the result set from which to take rows to
be inserted into the target table.
@param checkgm	the code to enforce the check constraints, if any
@return the insert operation as a result set.
@exception standardexception thrown when unable to perform the insert
*/
resultset getinsertresultset noputresultset source
generatedmethod checkgm
throws standardexception
/**
an insert vti result set simply reports that it completed, and
the number of rows inserted.  it does not return rows.
the insert has been completed once the
insert result set is available.
@param source the result set from which to take rows to
be inserted into the target table.
@param vtirs	the code to instantiate the vti, if necessary
@return the insert vti operation as a result set.
@exception standardexception thrown when unable to perform the insert
*/
resultset getinsertvtiresultset noputresultset source
noputresultset vtirs
throws standardexception
/**
a delete vti result set simply reports that it completed, and
the number of rows deleted.  it does not return rows.
the delete has been completed once the
delete result set is available.
@param source the result set from which to take rows to
be inserted into the target table.
@return the delete vti operation as a result set.
@exception standardexception thrown when unable to perform the insert
*/
resultset getdeletevtiresultset noputresultset source
throws standardexception
/**
a delete result set simply reports that it completed, and
the number of rows deleted.  it does not return rows.
the delete has been completed once the
delete result set is available.
@param source the result set from which to take rows to
be deleted from the target table. this result set must
contain one column which provides rowlocations that are
valid in the target table.
@return the delete operation as a result set.
@exception standardexception thrown when unable to perform the delete
*/
resultset getdeleteresultset noputresultset source
throws standardexception
/**
a delete cascade result set simply reports that it completed, and
the number of rows deleted.  it does not return rows.
the delete has been completed once the
delete result set is available.
@param source the result set from which to take rows to
be deleted from the target table.
@param constantactionitem a constant action saved object reference
@param dependentresultsets an array of deletecascade resultsets
for the current table referential action
dependents tables.
@param resultsetid  an id which is used to store the refence
to the temporary result set created of
the materilized rows.dependent table resultsets
uses the same id to access their parent temporary result sets.
@return the delete operation as a delete cascade result set.
@exception standardexception thrown when unable to perform the delete
*/
resultset getdeletecascaderesultset noputresultset source
int constantactionitem
resultset dependentresultsets
string resultsetid
throws standardexception
/**
an update result set simply reports that it completed, and
the number of rows updated.  it does not return rows.
the update has been completed once the
update result set is available.
@param source the result set from which to take rows to be
updated in the target table. this result set must contain
a column which provides rowlocations that are valid in the
target table, and new values to be placed in those rows.
@param checkgm	the code to enforce the check constraints, if any
@return the update operation as a result set.
@exception standardexception thrown when unable to perform the update
*/
resultset getupdateresultset noputresultset source
generatedmethod checkgm
throws standardexception
/**
* @param source the result set from which to take rows to be
*               updated in the target table.
* @return the update operation as a result set.
* @exception standardexception thrown on error
*/
public resultset getupdatevtiresultset noputresultset source
throws standardexception
/**
an update result set simply reports that it completed, and
the number of rows updated.  it does not return rows.
the update has been completed once the
update result set is available.
@param source the result set from which to take rows to be
updated in the target table. this result set must contain
a column which provides rowlocations that are valid in the
target table, and new values to be placed in those rows.
@param checkgm	the code to enforce the check constraints, if any
@param constantactionitem a constant action saved object reference
@param rsditem   result description, saved object id.
@return the update operation as a result set.
@exception standardexception thrown when unable to perform the update
*/
resultset getdeletecascadeupdateresultset noputresultset source
generatedmethod checkgm
int constantactionitem
int rsditem
throws standardexception
/**
a call statement result set simply reports that it completed.
it does not return rows.
@param methodcall a reference to a method in the activation
for the method call
@param activation the activation for this result set
@return the call statement operation as a result set.
@exception standardexception thrown when unable to perform the call statement
*/
resultset getcallstatementresultset generatedmethod methodcall
activation activation
throws standardexception
//
// query expression operations
//
/**
a project restrict result set iterates over its source,
evaluating a restriction and when it is satisfied,
constructing a row to return in its result set based on
its projection.
the rows can be constructed as they are requested from the
result set.
@param source the result set from which to take rows to be
filtered by this operation.
@param restriction a reference to a method in the activation
that is applied to the activation's "current row" field
to determine whether the restriction is satisfied or not.
the signature of this method is
<verbatim>
boolean restriction() throws standardexception;
</verbatim>
@param projection a reference to a method in the activation
that is applied to the activation's "current row" field
to project out the expected result row.
the signature of this method is
<verbatim>
execrow projection() throws standardexception;
</verbatim>
@param resultsetnumber	the resultsetnumber for the resultset
@param constantrestriction a reference to a method in the activation
that represents a constant expression (eg where 1 = 2).
the signature of this method is
<verbatim>
boolean restriction() throws standardexception;
</verbatim>
@param maparrayitem	item # for mapping of source to target columns
@param reuseresult	whether or not to reuse the result row.
@param doesprojection	whether or not this prn does a projection
@param optimizerestimatedrowcount	estimated total # of rows by
optimizer
@param optimizerestimatedcost		estimated total cost by optimizer
@return the project restrict operation as a result set.
@exception standardexception thrown when unable to create the
result set
*/
noputresultset getprojectrestrictresultset noputresultset source
generatedmethod restriction
generatedmethod projection  int resultsetnumber
generatedmethod constantrestriction
int maparrayitem
boolean reuseresult
boolean doesprojection
double optimizerestimatedrowcount
double optimizerestimatedcost  throws standardexception
/**
a hash table result set builds a hash table on its source,
applying a list of predicates, if any, to the source,
when building the hash table.  it then does a look up into
the hash table on a probe.
the rows can be constructed as they are requested from the
result set.
@param source the result set from which to take rows to be
filtered by this operation.
@param singletablerestriction restriction, if any, applied to
input of hash table.
@param equijoinqualifiers qualifier[] for look up into hash table
@param projection a reference to a method in the activation
that is applied to the activation's "current row" field
to project out the expected result row.
the signature of this method is
<verbatim>
execrow projection() throws standardexception;
</verbatim>
@param resultsetnumber	the resultsetnumber for the resultset
@param maprefitem	item # for mapping of source to target columns
@param reuseresult	whether or not to reuse the result row.
@param keycolitem	item for hash key column array
@param removeduplicates	whether or not to remove duplicates when building the hash table
@param maxinmemoryrowcount			max size of in-memory hash table
@param initialcapacity				initialcapacity for java.util.hashtable
@param loadfactor					loadfactor for java.util.hashtable
@param optimizerestimatedrowcount	estimated total # of rows by
optimizer
@param optimizerestimatedcost		estimated total cost by optimizer
@return the project restrict operation as a result set.
@exception standardexception thrown when unable to create the
result set
*/
public noputresultset gethashtableresultset noputresultset source
generatedmethod singletablerestriction
qualifier equijoinqualifiers
generatedmethod projection  int resultsetnumber
int maprefitem
boolean reuseresult
int keycolitem
boolean removeduplicates
long maxinmemoryrowcount
int	initialcapacity
float loadfactor
double optimizerestimatedrowcount
double optimizerestimatedcost
throws standardexception
/**
a sort result set sorts its source and if requested removes
duplicates.  it will generate the entire result when open, and
then return it a row at a time.
<p>
if passed aggregates it will do scalar or vector aggregate
processing.  a list of aggregator information is passed
off of the preparedstatement's savedobjects.  aggregation
and select distinct cannot be processed in the same sort.
@param source the result set from which to take rows to be
filtered by this operation.
@param distinct true if distinct select list
@param isinsortedorder	true if the source result set is in sorted order
@param orderitem entry in preparedstatement's savedobjects for order
@param rowallocator a reference to a method in the activation
that generates rows of the right size and shape for the source
@param rowsize the size of the row that is allocated by rowallocator.
size should be the maximum size of the sum of all the datatypes.
user type are necessarily approximated
@param resultsetnumber	the resultsetnumber for the resultset
@param optimizerestimatedrowcount	estimated total # of rows by
optimizer
@param optimizerestimatedcost		estimated total cost by optimizer
@return the distinct operation as a result set.
@exception standardexception thrown when unable to create the
result set
*/
noputresultset getsortresultset noputresultset source
boolean distinct
boolean isinsortedorder
int orderitem
generatedmethod rowallocator
int rowsize
int resultsetnumber
double optimizerestimatedrowcount
double optimizerestimatedcost
throws standardexception
/**
a scalaraggregateresultset computes non-distinct scalar aggregates.
it will compute the aggregates when open.
@param source the result set from which to take rows to be
filtered by this operation.
@param isinsortedorder	true if the source result set is in sorted order
@param aggregateitem entry in preparedstatement's savedobjects for aggregates
@param orderingitem		ignored to allow same signature as getdistinctscalaraggregateresultset
@param rowallocator a reference to a method in the activation
that generates rows of the right size and shape for the source
@param rowsize			ignored to allow same signature as getdistinctscalaraggregateresultset
@param resultsetnumber	the resultsetnumber for the resultset
@param singleinputrow	whether we know we have a single input row or not
@param optimizerestimatedrowcount	estimated total # of rows by
optimizer
@param optimizerestimatedcost		estimated total cost by optimizer
@return the scalar aggregation operation as a result set.
@exception standardexception thrown when unable to create the
result set
*/
noputresultset getscalaraggregateresultset noputresultset source
boolean isinsortedorder
int aggregateitem
int orderingitem
generatedmethod rowallocator
int rowsize
int resultsetnumber
boolean singleinputrow
double optimizerestimatedrowcount
double optimizerestimatedcost
throws standardexception
/**
a distinctscalaraggregateresultset computes scalar aggregates when
at least one of them is a distinct aggregate.
it will compute the aggregates when open.
@param source the result set from which to take rows to be
filtered by this operation.
@param isinsortedorder	true if the source result set is in sorted order
@param aggregateitem entry in preparedstatement's savedobjects for aggregates
@param orderingitem entry in preparedstatement's savedobjects for order
@param rowallocator a reference to a method in the activation
that generates rows of the right size and shape for the source
@param rowsize the size of the row that is allocated by rowallocator.
size should be the maximum size of the sum of all the datatypes.
user type are necessarily approximated
@param resultsetnumber	the resultsetnumber for the resultset
@param singleinputrow	whether we know we have a single input row or not
@param optimizerestimatedrowcount	estimated total # of rows by
optimizer
@param optimizerestimatedcost		estimated total cost by optimizer
@return the scalar aggregation operation as a result set.
@exception standardexception thrown when unable to create the
result set
*/
noputresultset getdistinctscalaraggregateresultset noputresultset source
boolean isinsortedorder
int aggregateitem
int orderingitem
generatedmethod rowallocator
int rowsize
int resultsetnumber
boolean singleinputrow
double optimizerestimatedrowcount
double optimizerestimatedcost
throws standardexception
/**
a groupedaggregateresultset computes non-distinct grouped aggregates.
it will compute the aggregates when open.
@param source the result set from which to take rows to be
filtered by this operation.
@param isinsortedorder	true if the source result set is in sorted order
@param aggregateitem entry in preparedstatement's savedobjects for aggregates
@param orderingitem		ignored to allow same signature as getdistinctscalaraggregateresultset
@param rowallocator a reference to a method in the activation
that generates rows of the right size and shape for the source
@param rowsize			ignored to allow same signature as getdistinctscalaraggregateresultset
@param resultsetnumber	the resultsetnumber for the resultset
@param optimizerestimatedrowcount	estimated total # of rows by
optimizer
@param optimizerestimatedcost		estimated total cost by optimizer
@return the scalar aggregation operation as a result set.
@exception standardexception thrown when unable to create the
result set
*/
noputresultset getgroupedaggregateresultset noputresultset source
boolean isinsortedorder
int aggregateitem
int orderingitem
generatedmethod rowallocator
int rowsize
int resultsetnumber
double optimizerestimatedrowcount
double optimizerestimatedcost
throws standardexception
/**
a distinctgroupedaggregateresultset computes scalar aggregates when
at least one of them is a distinct aggregate.
it will compute the aggregates when open.
@param source the result set from which to take rows to be
filtered by this operation.
@param isinsortedorder	true if the source result set is in sorted order
@param aggregateitem entry in preparedstatement's savedobjects for aggregates
@param orderingitem entry in preparedstatement's savedobjects for order
@param rowallocator a reference to a method in the activation
that generates rows of the right size and shape for the source
@param rowsize the size of the row that is allocated by rowallocator.
size should be the maximum size of the sum of all the datatypes.
user type are necessarily approximated
@param resultsetnumber	the resultsetnumber for the resultset
@param optimizerestimatedrowcount	estimated total # of rows by
optimizer
@param optimizerestimatedcost		estimated total cost by optimizer
@return the scalar aggregation operation as a result set.
@exception standardexception thrown when unable to create the
result set
*/
noputresultset getdistinctgroupedaggregateresultset noputresultset source
boolean isinsortedorder
int aggregateitem
int orderingitem
generatedmethod rowallocator
int rowsize
int resultsetnumber
double optimizerestimatedrowcount
double optimizerestimatedcost
throws standardexception
/**
an any result set iterates over its source,
returning a row with all columns set to nulls
if the source returns no rows.
@param source the result set from which to take rows to be
filtered by this operation.
@param emptyrowfun a reference to a method in the activation
that is called if the source returns no rows
@param resultsetnumber		the resultsetnumber for the resultset
@param subquerynumber		the subquery number for this subquery.
@param pointofattachment	the point of attachment for this subquery.
@param optimizerestimatedrowcount	estimated total # of rows by
optimizer
@param optimizerestimatedcost		estimated total cost by optimizer
@return the any operation as a result set.
@exception standardexception thrown when unable to create the
result set
*/
noputresultset getanyresultset noputresultset source
generatedmethod emptyrowfun  int resultsetnumber
int subquerynumber  int pointofattachment
double optimizerestimatedrowcount
double optimizerestimatedcost
throws standardexception
/**
a once result set iterates over its source,
raising an error if the source returns > 1 row and
returning a row with all columns set to nulls
if the source returns no rows.
@param source the result set from which to take rows to be
filtered by this operation.
@param emptyrowfun a reference to a method in the activation
that is called if the source returns no rows
@param cardinalitycheck the type of cardinality check, if any that
is required
@param resultsetnumber	the resultsetnumber for the resultset
@param subquerynumber		the subquery number for this subquery.
@param pointofattachment	the point of attachment for this subquery.
@param optimizerestimatedrowcount	estimated total # of rows by
optimizer
@param optimizerestimatedcost		estimated total cost by optimizer
@return the once operation as a result set.
@exception standardexception thrown when unable to create the
result set
*/
noputresultset getonceresultset noputresultset source
generatedmethod emptyrowfun
int cardinalitycheck  int resultsetnumber
int subquerynumber  int pointofattachment
double optimizerestimatedrowcount
double optimizerestimatedcost
throws standardexception
/**
a row result set forms a result set on a single, known row value.
it is used to turn constant rows into result sets for use in
the result set paradigm.
the row can be constructed when it is requested from the
result set.
@param activation the activation for this result set,
against which the row operation is performed to
create the result set.
@param row a reference to a method in the activation
that creates the expected row.
<verbatim>
execrow row() throws standardexception;
</verbatim>
@param cancacherow	true if execution can cache the input row
after it has gotten it.  if the input row is constructed soley
of constants or parameters, it is ok to cache this row rather
than recreating it each time it is requested.
@param resultsetnumber	the resultsetnumber for the resultset
@param optimizerestimatedrowcount	estimated total # of rows by
optimizer
@param optimizerestimatedcost		estimated total cost by optimizer
@return the row as a result set.
@exception standardexception thrown when unable to create the
result set
*/
noputresultset getrowresultset activation activation  generatedmethod row
boolean cancacherow
int resultsetnumber
double optimizerestimatedrowcount
double optimizerestimatedcost
throws standardexception
/**
a vti result set wraps a user supplied result set.
@param activation the activation for this result set,
against which the row operation is performed to
create the result set.
@param row a reference to a method in the activation
that creates the expected row.
<verbatim>
execrow row() throws standardexception;
</verbatim>
@param resultsetnumber	the resultsetnumber for the resultset
@param constructor		the generatedmethod for the user's constructor
@param javaclassname	the java class name for the vti
@param erdnumber		int for referenced column bitset
(so it can be turned back into an object)
@param version2			whether or not vti is a version 2 vti.
@param istarget			whether or not vti is a target vti.
@param optimizerestimatedrowcount	estimated total # of rows by
optimizer
@param optimizerestimatedcost		estimated total cost by optimizer
@return the row as a result set.
@exception standardexception thrown when unable to create the
result set
*/
public noputresultset getvtiresultset activation activation  generatedmethod row
int resultsetnumber
generatedmethod constructor
string javaclassname
qualifier pushedqualifiers
int erdnumber
boolean version2  boolean reuseableps
int ctcnumber
boolean istarget
int scanisolationlevel
double optimizerestimatedrowcount
double optimizerestimatedcost
throws standardexception
/**
a hash result set forms a result set on a hash table built on a scan
of a table.
the rows are put into the hash table on the 1st open.
<p>
@param activation the activation for this result set,
which provides the context for the row allocation operation.
@param conglomid the conglomerate of the table to be scanned.
@param scociitem the saved item for the static conglomerate info.
@param resultrowallocator a reference to a method in the activation
that creates a holder for the rows from the scan.
<verbatim>
execrow rowallocator() throws standardexception;
</verbatim>
@param resultsetnumber	the resultsetnumber for the resultset
@param startkeygetter a reference to a method in the activation
that gets the start key indexable row for the scan.  null
means there is no start key.
<verbatim>
execindexrow startkeygetter() throws standardexception;
</verbatim>
@param startsearchoperator the start search operator for opening
the scan
@param stopkeygetter	a reference to a method in the activation
that gets the stop key indexable row for the scan.  null means
there is no stop key.
<verbatim>
execindexrow stopkeygetter() throws standardexception;
</verbatim>
@param stopsearchoperator	the stop search operator for opening
the scan
@param samestartstopposition	re-use the startkeygetter for the stopkeygetter
(exact match search.)
@param scanqualifiers the array of qualifiers for the scan.
null or an array length of zero means there are no qualifiers.
@param nextqualifiers the array of qualifiers for the look up into the hash table.
@param initialcapacity	the initialcapacity for the hashtable.
@param loadfactor		the loadfactor for the hashtable.
@param maxcapacity		the maximum size for the hashtable.
@param hashkeycolumn	the 0-based column # for the hash key.
@param tablename		the full name of the table
@param usersuppliedoptimizeroverrides		overrides specified by the user on the sql
@param indexname		the name of the index, if one used to access table.
@param isconstraint		if index, if used, is a backing index for a constraint.
@param forupdate		true means open for update
@param colrefitem		an saved item for a bitset of columns that
are referenced in the underlying table.  -1 if
no item.
@param lockmode			the lock granularity to use (see
transactioncontroller in access)
@param tablelocked		whether or not the table is marked as using table locking
(in sys.systables)
@param isolationlevel	isolation level (specified or not) to use on scans
@param optimizerestimatedrowcount	estimated total # of rows by
optimizer
@param optimizerestimatedcost		estimated total cost by optimizer
@return the table scan operation as a result set.
@exception standardexception thrown when unable to create the
result set
*/
noputresultset gethashscanresultset
activation activation
long conglomid
int scociitem
generatedmethod resultrowallocator
int resultsetnumber
generatedmethod startkeygetter
int startsearchoperator
generatedmethod stopkeygetter
int stopsearchoperator
boolean samestartstopposition
qualifier scanqualifiers
qualifier nextqualifiers
int initialcapacity
float loadfactor
int maxcapacity
int hashkeycolumn
string tablename
string usersuppliedoptimizeroverrides
string indexname
boolean isconstraint
boolean forupdate
int colrefitem
int indexcolitem
int lockmode
boolean tablelocked
int isolationlevel
double optimizerestimatedrowcount
double optimizerestimatedcost
throws standardexception
/**
a distinct scan result set pushes duplicate elimination into
the scan.
<p>
@param activation the activation for this result set,
which provides the context for the row allocation operation.
@param conglomid the conglomerate of the table to be scanned.
@param scociitem the saved item for the static conglomerate info.
@param resultrowallocator a reference to a method in the activation
that creates a holder for the rows from the scan.
<verbatim>
execrow rowallocator() throws standardexception;
</verbatim>
@param resultsetnumber	the resultsetnumber for the resultset
@param hashkeycolumn	the 0-based column # for the hash key.
@param tablename		the full name of the table
@param usersuppliedoptimizeroverrides		overrides specified by the user on the sql
@param indexname		the name of the index, if one used to access table.
@param isconstraint		if index, if used, is a backing index for a constraint.
@param colrefitem		an saved item for a bitset of columns that
are referenced in the underlying table.  -1 if
no item.
@param lockmode			the lock granularity to use (see
transactioncontroller in access)
@param tablelocked		whether or not the table is marked as using table locking
(in sys.systables)
@param isolationlevel	isolation level (specified or not) to use on scans
@param optimizerestimatedrowcount	estimated total # of rows by
optimizer
@param optimizerestimatedcost		estimated total cost by optimizer
@return the table scan operation as a result set.
@exception standardexception thrown when unable to create the
result set
*/
noputresultset getdistinctscanresultset
activation activation
long conglomid
int scociitem
generatedmethod resultrowallocator
int resultsetnumber
int hashkeycolumn
string tablename
string usersuppliedoptimizeroverrides
string indexname
boolean isconstraint
int colrefitem
int lockmode
boolean tablelocked
int isolationlevel
double optimizerestimatedrowcount
double optimizerestimatedcost
throws standardexception
/**
a table scan result set forms a result set on a scan
of a table.
the rows can be constructed as they are requested from the
result set.
<p>
this form of the table scan operation is simple, and is
to be used when there are no predicates to be passed down
to the scan to limit its scope on the target table.
@param conglomid the conglomerate of the table to be scanned.
@param scociitem the saved item for the static conglomerate info.
@param activation the activation for this result set,
which provides the context for the row allocation operation.
@param resultrowallocator a reference to a method in the activation
that creates a holder for the result row of the scan.  may
be a partial row.
<verbatim>
execrow rowallocator() throws standardexception;
</verbatim>
@param resultsetnumber	the resultsetnumber for the resultset
@param startkeygetter a reference to a method in the activation
that gets the start key indexable row for the scan.  null
means there is no start key.
<verbatim>
execindexrow startkeygetter() throws standardexception;
</verbatim>
@param startsearchoperator the start search operator for opening
the scan
@param stopkeygetter	a reference to a method in the activation
that gets the stop key indexable row for the scan.  null means
there is no stop key.
<verbatim>
execindexrow stopkeygetter() throws standardexception;
</verbatim>
@param stopsearchoperator	the stop search operator for opening
the scan
@param samestartstopposition	re-use the startkeygetter for the stopkeygetter
(exact match search.)
@param qualifiers the array of qualifiers for the scan.
null or an array length of zero means there are no qualifiers.
@param tablename		the full name of the table
@param usersuppliedoptimizeroverrides		overrides specified by the user on the sql
@param indexname		the name of the index, if one used to access table.
@param isconstraint		if index, if used, is a backing index for a constraint.
@param forupdate		true means open for update
@param colrefitem		an saved item for a bitset of columns that
are referenced in the underlying table.  -1 if
no item.
@param lockmode			the lock granularity to use (see
transactioncontroller in access)
@param tablelocked		whether or not the table is marked as using table locking
(in sys.systables)
@param isolationlevel	isolation level (specified or not) to use on scans
@param onerowscan		whether or not this is a 1 row scan.
@param optimizerestimatedrowcount	estimated total # of rows by
optimizer
@param optimizerestimatedcost		estimated total cost by optimizer
@return the table scan operation as a result set.
@exception standardexception thrown when unable to create the
result set
*/
noputresultset gettablescanresultset
activation activation
long conglomid
int scociitem
generatedmethod resultrowallocator
int resultsetnumber
generatedmethod startkeygetter
int startsearchoperator
generatedmethod stopkeygetter
int stopsearchoperator
boolean samestartstopposition
qualifier qualifiers
string tablename
string usersuppliedoptimizeroverrides
string indexname
boolean isconstraint
boolean forupdate
int colrefitem
int indexcolitem
int lockmode
boolean tablelocked
int isolationlevel
boolean onerowscan
double optimizerestimatedrowcount
double optimizerestimatedcost
throws standardexception
/**
a table scan result set forms a result set on a scan
of a table.
the rows can be constructed as they are requested from the
result set.
<p>
this form of the table scan operation is simple, and is
to be used when there are no predicates to be passed down
to the scan to limit its scope on the target table.
@param conglomid the conglomerate of the table to be scanned.
@param scociitem the saved item for the static conglomerate info.
@param activation the activation for this result set,
which provides the context for the row allocation operation.
@param resultrowallocator a reference to a method in the activation
that creates a holder for the result row of the scan.  may
be a partial row.
<verbatim>
execrow rowallocator() throws standardexception;
</verbatim>
@param resultsetnumber	the resultsetnumber for the resultset
@param startkeygetter a reference to a method in the activation
that gets the start key indexable row for the scan.  null
means there is no start key.
<verbatim>
execindexrow startkeygetter() throws standardexception;
</verbatim>
@param startsearchoperator the start search operator for opening
the scan
@param stopkeygetter	a reference to a method in the activation
that gets the stop key indexable row for the scan.  null means
there is no stop key.
<verbatim>
execindexrow stopkeygetter() throws standardexception;
</verbatim>
@param stopsearchoperator	the stop search operator for opening
the scan
@param samestartstopposition	re-use the startkeygetter for the stopkeygetter
(exact match search.)
@param qualifiers the array of qualifiers for the scan.
null or an array length of zero means there are no qualifiers.
@param tablename		the full name of the table
@param usersuppliedoptimizeroverrides		overrides specified by the user on the sql
@param indexname		the name of the index, if one used to access table.
@param isconstraint		if index, if used, is a backing index for a constraint.
@param forupdate		true means open for update
@param colrefitem		an saved item for a bitset of columns that
are referenced in the underlying table.  -1 if
no item.
@param lockmode			the lock granularity to use (see
transactioncontroller in access)
@param tablelocked		whether or not the table is marked as using table locking
(in sys.systables)
@param isolationlevel	isolation level (specified or not) to use on scans
@param rowsperread		the number of rows to read per fetch.
@param onerowscan		whether or not this is a 1 row scan.
@param optimizerestimatedrowcount	estimated total # of rows by
optimizer
@param optimizerestimatedcost		estimated total cost by optimizer
@return the table scan operation as a result set.
@exception standardexception thrown when unable to create the
result set
*/
noputresultset getbulktablescanresultset
activation activation
long conglomid
int scociitem
generatedmethod resultrowallocator
int resultsetnumber
generatedmethod startkeygetter
int startsearchoperator
generatedmethod stopkeygetter
int stopsearchoperator
boolean samestartstopposition
qualifier qualifiers
string tablename
string usersuppliedoptimizeroverrides
string indexname
boolean isconstraint
boolean forupdate
int colrefitem
int indexcolitem
int lockmode
boolean tablelocked
int isolationlevel
int rowsperread
boolean onerowscan
double optimizerestimatedrowcount
double optimizerestimatedcost
throws standardexception
/**
a multi-probe result set, used for probing an index with one or more
target values (probevalues) and returning the matching rows.  this
type of result set is useful for in lists as it allows us to avoid
scannning an entire, potentially very large, index for a mere handful
of rows (derby-47).
all arguments are the same as for tablescanresultset, plus the
following:
@param probevals list of values with which to probe the underlying
table. should not be null.
@param probevalsaresorted whether or not the values in probevals are
sorted.
*/
noputresultset getmultiprobetablescanresultset
activation activation
long conglomid
int scociitem
generatedmethod resultrowallocator
int resultsetnumber
generatedmethod startkeygetter
int startsearchoperator
generatedmethod stopkeygetter
int stopsearchoperator
boolean samestartstopposition
qualifier qualifiers
datavaluedescriptor  probevals
boolean probevalsaresorted
string tablename
string usersuppliedoptimizeroverrides
string indexname
boolean isconstraint
boolean forupdate
int colrefitem
int indexcolitem
int lockmode
boolean tablelocked
int isolationlevel
boolean onerowscan
double optimizerestimatedrowcount
double optimizerestimatedcost
throws standardexception
/**
an index row to base row result set gets an index row from its source
and uses the rowlocation in its last column to get the row from the
base conglomerate.
<p>
@param conglomid	conglomerate # for the heap.
@param scoci the saved item for the static conglomerate info.
@param source	the source result set, which is expected to provide
rows from an index conglomerate
@param resultrowallocator a reference to a method in the activation
that creates a holder for the rows from the scan.
<verbatim>
execrow rowallocator() throws standardexception;
</verbatim>
@param resultsetnumber	the resultsetnumber for the resultset
@param indexname		the name of the index.
@param heapcolrefitem	a saved item for a bitimpl of columns that
are referenced in the underlying heap.  -1 if
no item.
@param allcolrefitem a saved item for a bitimpl of columns
that are referenced in the underlying
index and heap.  -1 if no item.
@param heaponlycolrefitem a saved item for a bitimpl of
columns that are referenced in the
underlying heap only.  -1 if no item.
@param indexcolmapitem	a saved item for a referencedcolumnsdescriptorimpl
which tell  which columms are coming from the index.
@param restriction		the restriction, if any, to be applied to the base row
@param forupdate		true means to open for update
@param optimizerestimatedrowcount	estimated total # of rows by
optimizer
@param optimizerestimatedcost		estimated total cost by optimizer
@return the index row to base row operation as a result set.
@exception standardexception thrown when unable to create the
result set
*/
public noputresultset getindexrowtobaserowresultset
long conglomid
int scoci
noputresultset source
generatedmethod resultrowallocator
int resultsetnumber
string indexname
int heapcolrefitem
int allcolrefitem
int heaponlycolrefitem
int indexcolmapitem
generatedmethod restriction
boolean forupdate
double optimizerestimatedrowcount
double optimizerestimatedcost
throws standardexception
/**
a nested loop left outer join result set forms a result set on top of
2 other result sets.
the rows can be constructed as they are requested from the
result set.
<p>
this form of the nested loop join operation is simple, and is
to be used when there are no join predicates to be passed down
to the join to limit its scope on the right resultset.
@param leftresultset	outer resultset for join.
@param leftnumcols		number of columns in the leftresultset
@param rightresultset	inner resultset for join.
@param rightnumcols		number of columns in the rightresultset
@param joinclause a reference to a method in the activation
that is applied to the activation's "current row" field
to determine whether the joinclause is satisfied or not.
the signature of this method is
<verbatim>
boolean joinclause() throws standardexception;
</verbatim>
@param resultsetnumber	the resultsetnumber for the resultset
@param onerowrightside	boolean, whether or not the right side returns
a single row.  (no need to do 2nd next() if it does.)
@param notexistsrightside	boolean, whether or not the right side resides a
not exists base table
@param optimizerestimatedrowcount	estimated total # of rows by
optimizer
@param optimizerestimatedcost		estimated total cost by optimizer
@param usersuppliedoptimizeroverrides		overrides specified by the user on the sql
@return the nested loop join operation as a result set.
@exception standardexception thrown when unable to create the
result set
*/
public noputresultset getnestedloopjoinresultset noputresultset leftresultset
int leftnumcols
noputresultset rightresultset
int rightnumcols
generatedmethod joinclause
int resultsetnumber
boolean onerowrightside
boolean notexistsrightside
double optimizerestimatedrowcount
double optimizerestimatedcost
string usersuppliedoptimizeroverrides
throws standardexception
/**
a hash join.
@param leftresultset	outer resultset for join.
@param leftnumcols		number of columns in the leftresultset
@param rightresultset	inner resultset for join.
@param rightnumcols		number of columns in the rightresultset
@param joinclause a reference to a method in the activation
that is applied to the activation's "current row" field
to determine whether the joinclause is satisfied or not.
the signature of this method is
<verbatim>
boolean joinclause() throws standardexception;
</verbatim>
@param resultsetnumber	the resultsetnumber for the resultset
@param onerowrightside	boolean, whether or not the right side returns
a single row.  (no need to do 2nd next() if it does.)
@param notexistsrightside	boolean, whether or not the right side resides a
not exists base table
@param optimizerestimatedrowcount	estimated total # of rows by
optimizer
@param optimizerestimatedcost		estimated total cost by optimizer
@param usersuppliedoptimizeroverrides		overrides specified by the user on the sql
@return the nested loop join operation as a result set.
@exception standardexception thrown when unable to create the
result set
*/
public noputresultset gethashjoinresultset noputresultset leftresultset
int leftnumcols
noputresultset rightresultset
int rightnumcols
generatedmethod joinclause
int resultsetnumber
boolean onerowrightside
boolean notexistsrightside
double optimizerestimatedrowcount
double optimizerestimatedcost
string usersuppliedoptimizeroverrides
throws standardexception
/**
a nested loop join result set forms a result set on top of
2 other result sets.
the rows can be constructed as they are requested from the
result set.
<p>
this form of the nested loop join operation is simple, and is
to be used when there are no join predicates to be passed down
to the join to limit its scope on the right resultset.
@param leftresultset	outer resultset for join.
@param leftnumcols		number of columns in the leftresultset
@param rightresultset	inner resultset for join.
@param rightnumcols		number of columns in the rightresultset
@param joinclause a reference to a method in the activation
that is applied to the activation's "current row" field
to determine whether the joinclause is satisfied or not.
the signature of this method is
<verbatim>
boolean joinclause() throws standardexception;
</verbatim>
@param resultsetnumber	the resultsetnumber for the resultset
@param emptyrowfun a reference to a method in the activation
that is called if the right child returns no rows
@param wasrightouterjoin	whether or not this was originally a right outer join
@param onerowrightside	boolean, whether or not the right side returns
a single row.  (no need to do 2nd next() if it does.)
@param notexistsrightside	boolean, whether or not the right side resides a
not exists base table
@param optimizerestimatedrowcount	estimated total # of rows by
optimizer
@param optimizerestimatedcost		estimated total cost by optimizer
@param usersuppliedoptimizeroverrides		overrides specified by the user on the sql
@return the nested loop join operation as a result set.
@exception standardexception thrown when unable to create the
result set
*/
public noputresultset getnestedloopleftouterjoinresultset noputresultset leftresultset
int leftnumcols
noputresultset rightresultset
int rightnumcols
generatedmethod joinclause
int resultsetnumber
generatedmethod emptyrowfun
boolean wasrightouterjoin
boolean onerowrightside
boolean notexistsrightside
double optimizerestimatedrowcount
double optimizerestimatedcost
string usersuppliedoptimizeroverrides
throws standardexception
/**
a left outer join using a hash join.
@param leftresultset	outer resultset for join.
@param leftnumcols		number of columns in the leftresultset
@param rightresultset	inner resultset for join.
@param rightnumcols		number of columns in the rightresultset
@param joinclause a reference to a method in the activation
that is applied to the activation's "current row" field
to determine whether the joinclause is satisfied or not.
the signature of this method is
<verbatim>
boolean joinclause() throws standardexception;
</verbatim>
@param resultsetnumber	the resultsetnumber for the resultset
@param emptyrowfun a reference to a method in the activation
that is called if the right child returns no rows
@param wasrightouterjoin	whether or not this was originally a right outer join
@param onerowrightside	boolean, whether or not the right side returns
a single row.  (no need to do 2nd next() if it does.)
@param notexistsrightside	boolean, whether or not the right side resides a
not exists base table
@param optimizerestimatedrowcount	estimated total # of rows by
optimizer
@param optimizerestimatedcost		estimated total cost by optimizer
@param usersuppliedoptimizeroverrides		overrides specified by the user on the sql
@return the nested loop join operation as a result set.
@exception standardexception thrown when unable to create the
result set
*/
public noputresultset gethashleftouterjoinresultset noputresultset leftresultset
int leftnumcols
noputresultset rightresultset
int rightnumcols
generatedmethod joinclause
int resultsetnumber
generatedmethod emptyrowfun
boolean wasrightouterjoin
boolean onerowrightside
boolean notexistsrightside
double optimizerestimatedrowcount
double optimizerestimatedcost
string usersuppliedoptimizeroverrides
throws standardexception
/**
a resultset which materializes the underlying resultset tree into a
temp table on the 1st open.  all subsequent "scans" of this resultset
will return results from the temp table.
@param source the result set input to this result set.
@param resultsetnumber	the resultsetnumber for the resultset
@param optimizerestimatedrowcount	estimated total # of rows by
optimizer
@param optimizerestimatedcost		estimated total cost by optimizer
@return the materialization operation as a result set.
@exception standardexception		thrown on failure
*/
noputresultset getmaterializedresultset noputresultset source
int resultsetnumber
double optimizerestimatedrowcount
double optimizerestimatedcost
throws standardexception
/**
a resultset which provides the insensitive scrolling functionality
for the underlying result set by materializing the underlying resultset
tree into a hash table while scrolling forward.
@param source the result set input to this result set.
@param activation the activation for this result set,
which provides the context for normalization.
@param resultsetnumber	the resultsetnumber for the resultset
@param sourcerowwidth	the # of columns in the source row.
@param optimizerestimatedrowcount	estimated total # of rows by
optimizer
@param optimizerestimatedcost		estimated total cost by optimizer
@return the materialization operation as a result set.
@exception standardexception		thrown on failure
*/
noputresultset getscrollinsensitiveresultset noputresultset source  activation activation
int resultsetnumber
int sourcerowwidth
boolean scrollable
double optimizerestimatedrowcount
double optimizerestimatedcost
throws standardexception
/**
remind: needs more description...
@param source the result set input to this result set.
@param resultsetnumber	the resultsetnumber for the resultset
@param erdnumber	int for resultdescription
(so it can be turned back into an object)
@param optimizerestimatedrowcount	estimated total # of rows by
optimizer
@param optimizerestimatedcost		estimated total cost by optimizer
@return the normalization operation as a result set.
@exception standardexception		thrown on failure
*/
noputresultset getnormalizeresultset noputresultset source
int resultsetnumber  int erdnumber
double optimizerestimatedrowcount
double optimizerestimatedcost
boolean forupdate
throws standardexception
/**
a current of result set forms a result set on the
current row of an open cursor.
it is used to perform positioned operations such as
positioned update and delete, using the result set paradigm.
@param cursorname the name of the cursor providing the row.
@param resultsetnumber	the resultsetnumber for the resultset
*/
noputresultset getcurrentofresultset string cursorname  activation activation
int resultsetnumber
/**
* the union interface is used to evaluate the union (all) of two resultsets.
* (any duplicate elimination is performed above this resultset.)
*
* forms a resultset returning the union of the rows in two source
* resultsets.  the column types in source1 and source2 are assumed to be
* the same.
*
* @param source1	the first resultset whose rows go into the union
* @param source2	the second resultset whose rows go into the
*			union
*	@param resultsetnumber	the resultsetnumber for the resultset
*	@param optimizerestimatedrowcount	estimated total # of rows by
*										optimizer
*	@param optimizerestimatedcost		estimated total cost by optimizer
*
* @return	a resultset from which the caller can get the union
*		of the two source resultsets.
*
* @exception standardexception		thrown on failure
*/
noputresultset	getunionresultset noputresultset source1
noputresultset source2
int resultsetnumber
double optimizerestimatedrowcount
double optimizerestimatedcost
throws standardexception
/**
* the setopresultset is used to implement an intersect or except operation.
* it selects rows from two ordered input result sets.
*
* @param leftsource the result set that implements the left input
* @param rightsource the result set that implements the right input
* @param activation the activation for this result set
* @param resultsetnumber
* @param optimizerestimatedrowcount
* @param optimizerestimatedcost
* @param optype intersectorexceptnode.intersect_op or except_op
* @param all true if the operation is an intersect all or an except all,
*            false if the operation is an intersect disctinct or an except disctinct
* @param intermediateorderbycolumnssavedobject the saved object index for the array of order by columns for the
*        ordering of the left and right sources. that is, both the left and right sources have an order by
*        clause of the form order by intermediateorderbycolumns[0],intermediateorderbycolumns[1],...
* @param intermediateorderbydirectionsavedobject the saved object index for the array of source
*        order by directions. that is, the ordering of the i'th order by column in the input is ascending
*        if intermediateorderbydirection[i] is 1, descending if intermediateorderbydirection[i] is -1.
*
* @return	a resultset from which the caller can get the intersect or except
*
* @exception standardexception		thrown on failure
*/
noputresultset getsetopresultset  noputresultset leftsource
noputresultset rightsource
activation activation
int resultsetnumber
long optimizerestimatedrowcount
double optimizerestimatedcost
int optype
boolean all
int intermediateorderbycolumnssavedobject
int intermediateorderbydirectionsavedobject
throws standardexception
//
// misc operations
//
/**
* a last index key result set returns the last row from
* the index in question.  it is used as an ajunct to max().
*
* @param activation 		the activation for this result set,
*		which provides the context for the row allocation operation.
* @param resultsetnumber	the resultsetnumber for the resultset
* @param resultrowallocator a reference to a method in the activation
* 						that creates a holder for the result row of the scan.  may
*						be a partial row.  <verbatim>
*		execrow rowallocator() throws standardexception; </verbatim>
* @param conglomid 		the conglomerate of the table to be scanned.
* @param tablename			the full name of the table
* @param usersuppliedoptimizeroverrides		overrides specified by the user on the sql
* @param indexname			the name of the index, if one used to access table.
* @param colrefitem		an saved item for a bitset of columns that
*							are referenced in the underlying table.  -1 if
*							no item.
* @param lockmode			the lock granularity to use (see
*							transactioncontroller in access)
* @param tablelocked		whether or not the table is marked as using table locking
*							(in sys.systables)
* @param isolationlevel	isolation level (specified or not) to use on scans
* @param optimizerestimatedrowcount	estimated total # of rows by
* 										optimizer
* @param optimizerestimatedcost		estimated total cost by optimizer
*
* @return the scan operation as a result set.
*
* @exception standardexception thrown when unable to create the
* 				result set
*/
noputresultset getlastindexkeyresultset
activation 			activation
int 				resultsetnumber
generatedmethod 	resultrowallocator
long 				conglomid
string 				tablename
string 				usersuppliedoptimizeroverrides
string 				indexname
int 				colrefitem
int 				lockmode
boolean				tablelocked
int					isolationlevel
double				optimizerestimatedrowcount
double 				optimizerestimatedcost
throws standardexception
/**
a dependent table scan result set forms a result set on a scan
of a dependent table for the rows that got materilized
on the scan of its parent table and if the row being deleted
on parent table has a reference in the dependent table.
@param activation the activation for this result set,
which provides the context for the row allocation operation.
@param conglomid the conglomerate of the table to be scanned.
@param scociitem the saved item for the static conglomerate info.
@param resultrowallocator a reference to a method in the activation
that creates a holder for the result row of the scan.  may
be a partial row.
<verbatim>
execrow rowallocator() throws standardexception;
</verbatim>
@param resultsetnumber	the resultsetnumber for the resultset
@param startkeygetter a reference to a method in the activation
that gets the start key indexable row for the scan.  null
means there is no start key.
<verbatim>
execindexrow startkeygetter() throws standardexception;
</verbatim>
@param startsearchoperator the start search operator for opening
the scan
@param stopkeygetter	a reference to a method in the activation
that gets the stop key indexable row for the scan.  null means
there is no stop key.
<verbatim>
execindexrow stopkeygetter() throws standardexception;
</verbatim>
@param stopsearchoperator	the stop search operator for opening
the scan
@param samestartstopposition	re-use the startkeygetter for the stopkeygetter
(exact match search.)
@param qualifiers the array of qualifiers for the scan.
null or an array length of zero means there are no qualifiers.
@param tablename		the full name of the table
@param usersuppliedoptimizeroverrides		overrides specified by the user on the sql
@param indexname		the name of the index, if one used to access table.
@param isconstraint		if index, if used, is a backing index for a constraint.
@param forupdate		true means open for update
@param colrefitem		an saved item for a bitset of columns that
are referenced in the underlying table.  -1 if
no item.
@param lockmode			the lock granularity to use (see
transactioncontroller in access)
@param tablelocked		whether or not the table is marked as using table locking
(in sys.systables)
@param isolationlevel	isolation level (specified or not) to use on scans
@param onerowscan		whether or not this is a 1 row scan.
@param optimizerestimatedrowcount	estimated total # of rows by
optimizer
@param optimizerestimatedcost		estimated total cost by optimizer
@param parentresultsetid  id to access the materlized temporary result
set from the refence stored in the activation.
@param fkindexconglomid foreign key index conglomerate id.
@param fkcolarrayitem  saved column array object  that matches the foreign key index
columns  and the resultset from the parent table.
@param  rltitem row location template
@return the table scan operation as a result set.
@exception standardexception thrown when unable to create the
result set
*/
public noputresultset getradependenttablescanresultset
activation activation
long conglomid
int scociitem
generatedmethod resultrowallocator
int resultsetnumber
generatedmethod startkeygetter
int startsearchoperator
generatedmethod stopkeygetter
int stopsearchoperator
boolean samestartstopposition
qualifier qualifiers
string tablename
string usersuppliedoptimizeroverrides
string indexname
boolean isconstraint
boolean forupdate
int colrefitem
int indexcolitem
int lockmode
boolean tablelocked
int isolationlevel
boolean onerowscan
double optimizerestimatedrowcount
double optimizerestimatedcost
string parentresultsetid
long fkindexconglomid
int fkcolarrayitem
int rltitem
throws standardexception