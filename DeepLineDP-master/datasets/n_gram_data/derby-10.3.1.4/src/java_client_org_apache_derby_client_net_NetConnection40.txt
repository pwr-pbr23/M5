/*
derby - class org.apache.derby.client.net.netconnection40
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby client net
import java sql array
import org apache derby client am sqlexceptionfactory
import org apache derby client am sqlexception
import java sql blob
import java sql clob
import java sql connection
import java sql nclob
import java sql preparedstatement
import java sql resultset
import java sql sqlclientinfoexception
import java sql sqlexception
import java sql sqlxml
import java sql struct
import java util hashmap
import java util map
import java util properties
import java util enumeration
import org apache derby client clientpooledconnection
import org apache derby client am clientmessageid
import org apache derby client am failedproperties40
import org apache derby shared common reference sqlstate
public class  netconnection40 extends org apache derby client net netconnection
/**
* prepared statement that is used each time isvalid() is called on this
* connection. the statement is created the first time isvalid is called
* and closed when the connection is closed (by the close call).
*/
private preparedstatement isvalidstmt   null
/*
*-------------------------------------------------------
* jdbc 4.0
*-------------------------------------------------------
*/
public netconnection40 netlogwriter netlogwriter
string databasename
java util properties properties  throws sqlexception
super netlogwriter databasename properties
public netconnection40 netlogwriter netlogwriter
org apache derby jdbc clientbasedatasource datasource
string user
string password  throws sqlexception
super netlogwriter datasource user password
public netconnection40 netlogwriter netlogwriter
int drivermanagerlogintimeout
string servername
int portnumber
string databasename
java util properties properties  throws sqlexception
super netlogwriter drivermanagerlogintimeout servername portnumber databasename properties
public netconnection40 netlogwriter netlogwriter
string user
string password
org apache derby jdbc clientbasedatasource datasource
int rmid
boolean isxaconn  throws sqlexception
super netlogwriter user password datasource rmid isxaconn
public netconnection40 netlogwriter netlogwriter
string ipaddr
int portnumber
org apache derby jdbc clientbasedatasource datasource
boolean isxaconn  throws sqlexception
super netlogwriter ipaddr portnumber datasource isxaconn
/**
* the constructor for the netconnection40 class which contains
* implementations of jdbc 4.0 specific methods in the java.sql.connection
* interface. this constructor is called from the clientpooledconnection object
* to enable the netconnection to pass <code>this</code> on to the associated
* prepared statement object thus enabling the prepared statement object
* to inturn  raise the statement events to the clientpooledconnection object.
*
* @param netlogwriter netlogwriter object associated with this connection.
* @param user         user id for this connection.
* @param password     password for this connection.
* @param datasource   the datasource object passed from the pooledconnection
*                     object from which this constructor was called.
* @param rmid         the resource manager id for xa connections
* @param isxaconn     true if this is a xa connection.
* @param cpc          the clientpooledconnection object from which this
*                     netconnection constructor was called. this is used
*                     to pass statementevents back to the pooledconnection
*                     object.
* @throws             sqlexception
*/
public netconnection40 netlogwriter netlogwriter
string user
string password
org apache derby jdbc clientbasedatasource datasource
int rmid
boolean isxaconn
clientpooledconnection cpc  throws sqlexception
super netlogwriter user password datasource rmid isxaconn cpc
public array createarrayof string typename  object elements
throws sqlexception
throw sqlexceptionfactory notimplemented
public nclob createnclob   throws sqlexception
throw sqlexceptionfactory notimplemented
public sqlxml createsqlxml   throws sqlexception
throw sqlexceptionfactory notimplemented
public struct createstruct string typename  object attributes
throws sqlexception
throw sqlexceptionfactory notimplemented
/**
* checks if the connection has not been closed and is still valid.
* the validity is checked by running a simple query against the
* database.
*
* the timeout specified by the caller is implemented as follows:
* on the server: uses the querytimeout functionality to make the
* query time out on the server in case the server has problems or
* is highly loaded.
* on the client: uses a timeout on the socket to make sure that
* the client is not blocked forever in the cases where the server
* is "hanging" or not sending the reply.
*
* @param timeout the time in seconds to wait for the database
* operation used to validate the connection to complete. if the
* timeout period expires before the operation completes, this
* method returns false. a value of 0 indicates a timeout is not
* applied to the database operation.
* @return true if the connection is valid, false otherwise
* @exception sqlexception if the parameter value is illegal or if a
* database error has occured
*/
public boolean isvalid int timeout  throws sqlexception
// validate that the timeout has a legal value
if  timeout < 0
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate invalid_api_parameter
new integer timeout
getsqlexception
// check if the connection is closed
if  isclosed
return false
// do a simple query against the database
synchronized this
try
// save the current network timeout value
int oldtimeout   netagent_ gettimeout
// set the required timeout value on the network connection
netagent_ settimeout timeout
// if this is the first time this method is called on this
// connection we prepare the query
if  isvalidstmt    null
isvalidstmt   preparestatement
// set the query timeout
isvalidstmt setquerytimeout timeout
// run the query against the database
resultset rs   isvalidstmt executequery
rs close
// restore the previous timeout value
netagent_ settimeout oldtimeout
catch sqlexception e
// if an sql exception is thrown the connection is not valid,
// we ignore the exception and return false.
return false
return true      the connection is valid
/**
* close the connection and release its resources.
* @exception sqlexception if a database-access error occurs.
*/
synchronized public void close   throws sqlexception
// release resources owned by the prepared statement used by isvalid
if  isvalidstmt    null
isvalidstmt close
isvalidstmt   null
super close
/**
* <code>setclientinfo</code> will always throw a
* <code>sqlclientinfoexception</code> since derby does not support
* any properties.
*
* @param name a property key <code>string</code>
* @param value a property value <code>string</code>
* @exception sqlexception always.
*/
public void setclientinfo string name  string value
throws sqlclientinfoexception
properties p   failedproperties40 makeproperties name value
try   checkforclosedconnection
catch  sqlexception se
throw new sqlclientinfoexception
se getmessage    se getsqlstate
new failedproperties40 p  getproperties
if  name    null    value    null
return
setclientinfo p
/**
* <code>setclientinfo</code> will throw a
* <code>sqlclientinfoexception</code> uless the <code>properties</code>
* paramenter is empty, since derby does not support any
* properties. all the property keys in the
* <code>properties</code> parameter are added to failedproperties
* of the exception thrown, with reason_unknown_property as the
* value.
*
* @param properties a <code>properties</code> object with the
* properties to set.
* @exception sqlclientinfoexception unless the properties
* parameter is null or empty.
*/
public void setclientinfo properties properties
throws sqlclientinfoexception
failedproperties40 fp   new failedproperties40 properties
try   checkforclosedconnection
catch  sqlexception se
throw new sqlclientinfoexception se getmessage    se getsqlstate
fp getproperties
if  properties    null    properties isempty
return
sqlexception se
new sqlexception agent_ logwriter_
new clientmessageid
sqlstate property_unsupported_change
fp getfirstkey    fp getfirstvalue
throw new sqlclientinfoexception se getmessage
se getsqlstate    fp getproperties
/**
* <code>getclientinfo</code> always returns a
* <code>null string</code> since derby doesn't support
* clientinfoproperties.
*
* @param name a <code>string</code> value
* @return a <code>null string</code> value
* @exception sqlexception if the connection is closed.
*/
public string getclientinfo string name
throws sqlexception
try
checkforclosedconnection
return null
catch  sqlexception se    throw se getsqlexception
/**
* <code>getclientinfo</code> always returns an empty
* <code>properties</code> object since derby doesn't support
* clientinfoproperties.
*
* @return an empty <code>properties</code> object.
* @exception sqlexception if the connection is closed.
*/
public properties getclientinfo
throws sqlexception
try
checkforclosedconnection
return new properties
catch  sqlexception se    throw se getsqlexception
/**
* returns the type map for this connection.
*
* @return type map for this connection
* @exception sqlexception if a database access error occurs
*/
public final map<string  class<?>> gettypemap   throws sqlexception
// this method is already implemented with a non-generic
// signature in am/connection. we could just use that method
// directly, but then we get a compiler warning (unchecked
// cast/conversion). copy the map to avoid the compiler
// warning.
map typemap   super gettypemap
if  typemap    null  return null
map<string  class<?>> generictypemap   new hashmap<string  class<?>>
for  object key   typemap keyset
generictypemap put  string  key   class  typemap get key
return generictypemap
/**
* returns false unless <code>interfaces</code> is implemented
*
* @param  interfaces             a class defining an interface.
* @return true                   if this implements the interface or
*                                directly or indirectly wraps an object
*                                that does.
* @throws java.sql.sqlexception  if an error occurs while determining
*                                whether this is a wrapper for an object
*                                with the given interface.
*/
public boolean iswrapperfor class<?> interfaces  throws sqlexception
try
checkforclosedconnection
catch  sqlexception se
throw se getsqlexception
return interfaces isinstance this
/**
* returns <code>this</code> if this class implements the interface
*
* @param  interfaces a class defining an interface
* @return an object that implements the interface
* @throws java.sql.sqlexception if no object if found that implements the
* interface
*/
public <t> t unwrap java lang class<t> interfaces
throws sqlexception
try
checkforclosedconnection
return interfaces cast this
catch  classcastexception cce
throw new sqlexception null
new clientmessageid sqlstate unable_to_unwrap
interfaces  getsqlexception
catch  sqlexception se
throw se getsqlexception