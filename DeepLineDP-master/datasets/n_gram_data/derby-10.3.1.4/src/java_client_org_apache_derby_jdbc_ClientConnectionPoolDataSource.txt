/*
derby - class org.apache.derby.jdbc.clientconnectionpooldatasource
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby jdbc
import java sql sqlexception
import javax sql connectionpooldatasource
import javax sql datasource
import javax sql pooledconnection
import org apache derby client am logwriter
import org apache derby client am sqlexception
/**
* clientconnectionpooldatasource is a factory for pooledconnection objects.
* an object that implements this interface
* will typically be registered with a naming service that is based on the
* java naming and directory interface (jndi). use
* clientconnectionpooldatasource if your application runs under
* jdbc3.0 or jdbc2.0, that is, on the following java virtual machines:
* <p/>
* <ul>
* <li> jdbc 3.0 - java 2 - jdk 1.4, j2se 5.0
* <li> jdbc 2.0 - java 2 - jdk 1.2,1.3
* </ul>
*/
public class clientconnectionpooldatasource extends clientdatasource
implements connectionpooldatasource
private static final long serialversionuid    539234282156481377l
public static final string classname__
public clientconnectionpooldatasource
super
// ---------------------------interface methods-------------------------------
// attempt to establish a physical database connection that can be used as a pooled connection.
public pooledconnection getpooledconnection   throws sqlexception
try
logwriter dnclogwriter   super computednclogwriterfornewconnection
if  dnclogwriter    null
dnclogwriter traceentry this
pooledconnection pooledconnection   getpooledconnectionx dnclogwriter  this  getuser    getpassword
if  dnclogwriter    null
dnclogwriter traceexit this     pooledconnection
return pooledconnection
catch   sqlexception se
throw se getsqlexception
// standard method that establishes the initial physical connection using cpds properties.
public pooledconnection getpooledconnection string user  string password  throws sqlexception
try
logwriter dnclogwriter   super computednclogwriterfornewconnection
if  dnclogwriter    null
dnclogwriter traceentry this     user
pooledconnection pooledconnection   getpooledconnectionx dnclogwriter  this  user  password
if  dnclogwriter    null
dnclogwriter traceexit this     pooledconnection
return pooledconnection
catch   sqlexception se
throw se getsqlexception
//  method that establishes the initial physical connection
// using ds properties instead of cpds properties.
private pooledconnection getpooledconnectionx logwriter dnclogwriter
clientbasedatasource ds  string user
string password  throws sqlexception
return clientdriver getfactory   newclientpooledconnection ds
dnclogwriter  user  password