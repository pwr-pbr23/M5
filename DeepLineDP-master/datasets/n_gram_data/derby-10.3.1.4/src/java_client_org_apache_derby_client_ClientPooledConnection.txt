/*
derby - class org.apache.derby.client.clientpooledconnection
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby client
import java sql preparedstatement
import java sql sqlexception
import org apache derby client net netxaconnection
import org apache derby jdbc clientbasedatasource
import org apache derby jdbc clientdatasource
import org apache derby jdbc clientdriver
import org apache derby client am clientmessageid
import org apache derby client am sqlexception
import org apache derby client net netlogwriter
import org apache derby shared common reference sqlstate
public class clientpooledconnection implements javax sql pooledconnection
private boolean newpc_   true
private java util vector listeners_   null
org apache derby client am connection physicalconnection_   null
org apache derby client net netconnection netphysicalconnection_   null
org apache derby client net netxaconnection netxaphysicalconnection_   null
org apache derby client am logicalconnection logicalconnection_   null
protected org apache derby client am logwriter logwriter_   null
protected int rmid_   0
// cached stuff from constructor
private clientbasedatasource ds_
private string user_
private string password_
// constructor for non-xa pooled connections.
// using standard java apis, a cpds is passed in.
// user/password overrides anything on the ds.
public clientpooledconnection clientbasedatasource ds
org apache derby client am logwriter logwriter
string user
string password  throws sqlexception
try
logwriter_   logwriter
ds_   ds
user_   user
password_   password
listeners_   new java util vector
//pass the client pooled connection instance to this
//instance of the netconnection object
//this object is then used to pass the close and the error events
//that occur in the preparedstatement object back to the
//pooledconnection which will then raise the events
//on the listeners
netphysicalconnection_    org apache derby client net netconnection
clientdriver getfactory   newnetconnection
netlogwriter  logwriter_
user
password
ds
1
false
this
physicalconnection_   netphysicalconnection_
catch   sqlexception se
throw se getsqlexception
// constructor for xa pooled connections only.
// using standard java apis, a cpds is passed in.
// user/password overrides anything on the ds.
public clientpooledconnection clientbasedatasource ds
org apache derby client am logwriter logwriter
string user
string password
int rmid  throws sqlexception
try
logwriter_   logwriter
ds_   ds
user_   user
password_   password
rmid_   rmid
listeners_   new java util vector
netxaphysicalconnection_   getnetxaconnection ds
netlogwriter  logwriter_
user
password
rmid
physicalconnection_   netxaphysicalconnection_ getnetconnection
catch   sqlexception se
throw se getsqlexception
public clientpooledconnection clientbasedatasource ds
org apache derby client am logwriter logwriter  throws sqlexception
logwriter_   logwriter
ds_   ds
listeners_   new java util vector
try
netphysicalconnection_    org apache derby client net netconnection
clientdriver getfactory   newnetconnection
netlogwriter  logwriter_


ds
1
false
physicalconnection_   netphysicalconnection_
catch  sqlexception se
throw se getsqlexception
protected void finalize   throws java lang throwable
if  logwriter_    null
logwriter_ traceentry this
close
public synchronized void close   throws sqlexception
try
if  logwriter_    null
logwriter_ traceentry this
if  logicalconnection_    null
logicalconnection_ nullphysicalconnection
logicalconnection_   null
if  physicalconnection_    null
return
// even if the physcial connection is marked closed (in the pool),
// this will close its underlying resources.
physicalconnection_ closeresources
finally
physicalconnection_   null
// this is the standard api for getting a logical connection handle for a pooled connection.
// no "resettable" properties are passed, so user, password, and all other properties may not change.
public synchronized java sql connection getconnection   throws sqlexception
try
if  logwriter_    null
logwriter_ traceentry this
createlogicalconnection
if   newpc_
// derby-1144 changed the last parameter of this method to true
// to reset the connection state to the default on
// pooledconnection.getconnection() otherwise the
// isolation level and holdability was not correct and out of sync with the server.
physicalconnection_ reset logwriter_  user_  password_  ds_  true
else
physicalconnection_ lightreset         poolfix
newpc_   false
if  logwriter_    null
logwriter_ traceexit this     logicalconnection_
return logicalconnection_
catch  sqlexception se
throw se getsqlexception
private void createlogicalconnection   throws sqlexception
if  physicalconnection_    null
throw new sqlexception logwriter_
new clientmessageid sqlstate nogetconn_on_closed_pooled_connection
// roll back any pending transactions.  otherwise we get an exception
// when we try to close the connection (even for re-use), with an error
// saying we can't close the connection with active transactions
// (this fixes derby-1004)
try
if   physicalconnection_ transactioninprogress
physicalconnection_ rollback
catch   sqlexception sqle
throw new sqlexception sqle
// not the usual case, but if we have an existing logical connection, then we must close it by spec.
// we close the logical connection without notifying the pool manager that this pooled connection is availabe for reuse.
if  logicalconnection_    null
logicalconnection_ closewithoutrecyclingtopool
logicalconnection_   clientdriver getfactory   newlogicalconnection
physicalconnection_
this
public synchronized void addconnectioneventlistener javax sql connectioneventlistener listener
if  logwriter_    null
logwriter_ traceentry this     listener
listeners_ addelement listener
public synchronized void removeconnectioneventlistener javax sql connectioneventlistener listener
if  logwriter_    null
logwriter_ traceentry this     listener
listeners_ removeelement listener
// not public, but needs to be visible to am.logicalconnection
public void recycleconnection
if  physicalconnection_ agent_ loggingenabled
physicalconnection_ agent_ logwriter_ traceentry this
for  java util enumeration e   listeners_ elements    e hasmoreelements
javax sql connectioneventlistener listener    javax sql connectioneventlistener  e nextelement
javax sql connectionevent event   new javax sql connectionevent this
listener connectionclosed event
// not public, but needs to be visible to am.logicalconnection
public void trashconnection sqlexception exception
for  java util enumeration e   listeners_ elements    e hasmoreelements
javax sql connectioneventlistener listener    javax sql connectioneventlistener  e nextelement
java sql sqlexception sqle   exception getsqlexception
javax sql connectionevent event   new javax sql connectionevent this  sqle
listener connectionerroroccurred event
// used by logicalconnection close when it disassociates itself from the clientpooledconnection
public synchronized void nulllogicalconnection
logicalconnection_   null
/*-----------------------------------------------------------------*/
/*
* these methods are needed to provide statementevent support for
* derby.
* they are actually implemented in embedpooledconnection40 but have
* a dummy implementation here
*/
/**
*
* the onstatementclose contains the logic for raising the statement closed
* events. this method has a dummy implementation here to avoid error when
* this class is compiled with jdk1.4. the class the actual implementation
* in clientpooledconnection40.
*
* @param statement the preparedstatement that was closed
*
*/
public void onstatementclose preparedstatement statement
/**
* the method contains the logic for raising the statement error occurred
* events. this method has a dummy implementation here to avoid error when
* this class is compiled with jdk1.4. the class the actual implementation
* in clientpooledconnection40.
*
* @param statement the preparedstatement that was closed
* @param sqle      the sqlexception associated with the error that caused
*                  the invalidation of this preparedstatement
*/
public void onstatementerroroccurred preparedstatement statement
sqlexception sqle
/**
* creates and returns netxaconnection.
* overwrite this method to create different version of netxaconnection
* @param ds
* @param logwriter
* @param user
* @param password
* @param rmid
* @return netxaconnection
*/
protected netxaconnection getnetxaconnection  clientbasedatasource ds
netlogwriter logwriter
string user
string password
int rmid  throws sqlexception
return new netxaconnection logwriter
user
password
ds
rmid
true
this