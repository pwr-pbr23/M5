/*
derby - class org.apache.derby.catalog.types.routinealiasinfo
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby catalog types
import org apache derby iapi services io formatable
import org apache derby iapi services io storedformatids
import org apache derby iapi services io arrayutil
import org apache derby iapi reference sqlstate
import org apache derby iapi reference jdbc30translation
import org apache derby catalog aliasinfo
import org apache derby catalog typedescriptor
import java io ioexception
import java io objectinput
import java io objectoutput
import org apache derby iapi services sanity sanitymanager
/**
* describe a routine (procedure or function) alias.
*
* @see aliasinfo
*/
public class routinealiasinfo extends methodaliasinfo
private static final string sql_control
public static final short modifies_sql_data   0
public static final short reads_sql_data	  1
public static final short contains_sql		  2
public static final short no_sql			  3
/** parameter style java */
public static final short ps_java   0
private int parametercount
private typedescriptor	parametertypes
/**
* name of each parameter. as of derby 10.3, parameter names
* are optional. if the parameter is unnamed, parameternames[i]
* is a string of length 0
*/
private string			parameternames
/**
in, out, inout
*/
private int				parametermodes
private int dynamicresultsets
/**
return type for functions. null for procedures.
*/
private typedescriptor	returntype
/**
parameter style - always ps_java at the moment.
*/
private short parameterstyle
/**
what sql is allowed by this procedure.
*/
private short	sqlallowed
/**
sql specific name (future)
*/
private string	specificname
/**
true if the routine is called on null input.
(always true for procedures).
*/
private boolean	calledonnullinput
// what type of alias is this: procedure or function?
private transient char aliastype
public routinealiasinfo
/**
create a routinealiasinfo for an internal procedure.
*/
public routinealiasinfo string methodname  int parametercount  string parameternames
typedescriptor	parametertypes  int parametermodes  int dynamicresultsets  short parameterstyle  short sqlallowed
this methodname  parametercount  parameternames  parametertypes  parametermodes
dynamicresultsets  parameterstyle  sqlallowed  true   typedescriptor  null
/**
create a routinealiasinfo for a procedure or function
*/
public routinealiasinfo string methodname  int parametercount  string parameternames
typedescriptor	parametertypes  int parametermodes  int dynamicresultsets  short parameterstyle  short sqlallowed
boolean calledonnullinput  typedescriptor returntype
super methodname
this parametercount   parametercount
this parameternames   parameternames
this parametertypes   parametertypes
this parametermodes   parametermodes
this dynamicresultsets   dynamicresultsets
this parameterstyle   parameterstyle
this sqlallowed   sqlallowed
this calledonnullinput   calledonnullinput
this returntype   returntype
if  sanitymanager debug
if  parametercount    0    parameternames length    parametercount
sanitymanager throwassert     parameternames length       parametercount
else if  parametercount    0    parameternames    null    parameternames length    0
sanitymanager throwassert             parametercount
if  parametercount    0    parametertypes length    parametercount
sanitymanager throwassert     parametertypes length       parametercount
else if  parametercount    0    parametertypes    null    parametertypes length    0
sanitymanager throwassert             parametercount
if  parametercount    0    parametermodes length    parametercount
sanitymanager throwassert     parametermodes length       parametercount
else if  parametercount    0    parametermodes    null    parametermodes length    0
sanitymanager throwassert             parametercount
if  returntype    null
if     sqlallowed >  routinealiasinfo reads_sql_data      sqlallowed <  routinealiasinfo no_sql
sanitymanager throwassert     methodname       sqlallowed
else
if     sqlallowed >  routinealiasinfo modifies_sql_data      sqlallowed <  routinealiasinfo no_sql
sanitymanager throwassert     methodname       sqlallowed
public int getparametercount
return parametercount
public typedescriptor getparametertypes
return parametertypes
public int getparametermodes
return parametermodes
/**
* returns an array containing the names of the parameters.
* as of derby 10.3, parameter names are optional (see derby-183
* for more information). if the i-th parameter was unnamed,
* parameternames[i] will contain a string of length 0.
*/
public string getparameternames
return parameternames
public int getmaxdynamicresultsets
return dynamicresultsets
public short getparameterstyle
return parameterstyle
public short getsqlallowed
return sqlallowed
public boolean calledonnullinput
return calledonnullinput
public typedescriptor getreturntype
return returntype
// formatable methods
/**
* read this object from a stream of stored objects.
*
* @param in read this.
*
* @exception ioexception					thrown on error
* @exception classnotfoundexception		thrown on error
*/
public void readexternal  objectinput in
throws ioexception  classnotfoundexception
super readexternal in
specificname    string  in readobject
dynamicresultsets   in readint
parametercount   in readint
parameterstyle   in readshort
sqlallowed   in readshort
returntype    typedescriptor  in readobject
calledonnullinput   in readboolean
in readint       future expansion
if  parametercount    0
parameternames   new string
parametertypes   new typedescriptor
arrayutil readarrayitems in  parameternames
arrayutil readarrayitems in  parametertypes
parametermodes   arrayutil readintarray in
else
parameternames   null
parametertypes   null
parametermodes   null
/**
* write this object to a stream of stored objects.
*
* @param out write bytes here.
*
* @exception ioexception		thrown on error
*/
public void writeexternal  objectoutput out
throws ioexception
super writeexternal out
out writeobject specificname
out writeint dynamicresultsets
out writeint parametercount
out writeshort parameterstyle
out writeshort sqlallowed
out writeobject returntype
out writeboolean calledonnullinput
out writeint 0      future expansion
if  parametercount    0
arrayutil writearrayitems out  parameternames
arrayutil writearrayitems out  parametertypes
arrayutil writeintarray out  parametermodes
/**
* get the formatid which corresponds to this class.
*
*	@return	the formatid of this class
*/
public	int	gettypeformatid  	  return storedformatids routine_info_v01_id
/**
* get this alias info as a string.  note: the "aliasinfo" column
* in the sysaliases table will return the result of this method
* on a resultset.getstring() call.  that said, since the dblook
* utility uses resultset.getstring() to retrieve aliasinfo and
* to generate the ddl, this method must return a string that
* is syntactically valid, or else the ddl generated by dblook
* will be incorrect.
*/
public string tostring
stringbuffer sb   new stringbuffer 100
sb append getmethodname
sb append
for  int i   0  i < parametercount  i
if  i    0
sb append
if  returntype    null
// this is a procedure.  we only want to print the
// parameter mode (ex. "in", "out", "inout") for procedures--
// we don't do it for functions since use of the "in" keyword
// is not part of the function syntax.
sb append routinealiasinfo parametermode parametermodes
sb append
sb append parameternames
sb append
sb append parametertypes getsqlstring
sb append
if  returntype    null
// this a function, so syntax requires us to append the return type.
sb append     returntype getsqlstring
sb append
sb append routinealiasinfo sql_control
if   returntype    null
dynamicresultsets    0
only print dynamic result sets if this is a procedure
// because it's not valid syntax for functions.
sb append
sb append dynamicresultsets
if  returntype    null
// this a function, so append the syntax telling what to
// do with a null parameter.
sb append calledonnullinput ?
sb append
return sb tostring
public static string parametermode int parametermode
switch  parametermode
case jdbc30translation parameter_mode_in
return
case jdbc30translation parameter_mode_out
return
case jdbc30translation parameter_mode_in_out
return
default
return