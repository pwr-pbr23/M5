/*
derby - class org.apache.derby.impl.load.columninfo
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl load
import org apache derby iapi services io storedformatids
import java sql resultset
import java sql sqlexception
import java sql sqlwarning
import java sql statement
import java sql preparedstatement
import java sql connection
import java sql resultsetmetadata
import java sql databasemetadata
import java util
/**
*
* this class provides supportto  create casting/conversions required to
* perform import. import vti  gives all the data in varchar type becuase data
* in the files is in char format. there is no implicit cast availabile from
* varchar to some of the types. in cases where explicit casting is allowed,
* columns are casted with  explict cast to the type of table column; in case of
* double/real explicit casting is also not allowd , scalar fuction double is
* used in those cases.
*
*/
class columninfo
private arraylist vticolumnnames
private arraylist insertcolumnnames
private arraylist columntypes
private arraylist jdbccolumntypes
private int noofcolumns
private arraylist columnpositions
private boolean createolumnnames   true
private int expectednumberofcols     number of columns that are suppose
// to be in the file to imported
private connection conn
private string tablename
private string schemaname
/**
* initialize the column type and name  information
* @param conn  - connection to use for metadata queries
* @param sname - table's schema
* @param tname - table name
* @param insertcolumnlist - comma seperared insert statement column list
* @param  vticolumnindexes - indexes in the file
* @param  vticolumnprefix - prefix to use to generate column names to select from vti
* @exception exception on error
*/
public columninfo connection conn
string sname
string tname
string insertcolumnlist
string vticolumnindexes
string vticolumnprefix
throws sqlexception
vticolumnnames   new arraylist 1
insertcolumnnames   new arraylist 1
columntypes   new arraylist 1
jdbccolumntypes   new arraylist 1
noofcolumns   0
this conn   conn
this schemaname   sname
this tablename    tname
if insertcolumnlist  null
//break the comma seperated column list and initialze column info
//eg: c2 , c1 , c3
stringtokenizer st   new stringtokenizer insertcolumnlist
while  st hasmoretokens
string columnname    st nexttoken    trim
if  initializecolumninfo columnname
if tableexists
throw  loaderror invalidcolumnname columnname
else
string entityname    schemaname   null ?
schemaname       tablename  tablename
throw loaderror tablenotfound entityname
else
//all columns in the table
if  initializecolumninfo null
string entityname    schemaname   null ?
schemaname       tablename  tablename
throw loaderror tablenotfound entityname
//break the comma seperated column indexes for import file give by the user
//eg: "1, 3, 5, 7"
if vticolumnindexes   null
stringtokenizer st   new stringtokenizer vticolumnindexes
while  st hasmoretokens
string columnindex     st nexttoken    trim
vticolumnnames add vticolumnprefix   columnindex
int cindex    new integer columnindex    intvalue
if cindex > expectednumberofcols
expectednumberofcols  cindex
//if column indexes are not specified  ; create names for all collumns requested
if vticolumnnames size   < 1
for int index   1   index <  noofcolumns  index
vticolumnnames add vticolumnprefix   index
expectednumberofcols   noofcolumns
private boolean initializecolumninfo string columnpattern
throws sqlexception
databasemetadata dmd   conn getmetadata
resultset rs   dmd getcolumns null
schemaname
tablename
columnpattern
boolean foundthecolumn false
while  rs next
// 4.column_name string => column name
string columnname   rs getstring 4
// 5.data_type short => sql type from java.sql.types
short datatype   rs getshort 5
// 6.type_name string => data source dependent type name
string typename   rs getstring 6
// 7.column_size int => column size. for char or date types
// this is the maximum number of characters, for numeric or
// decimal types this is precision.
int columnsize   rs getint 7
// 9.decimal_digits int => the number of fractional digits
int decimaldigits   rs getint 9
// 10.num_prec_radix int => radix (typically either 10 or 2)
int numprecradix   rs getint 10
foundthecolumn   true
if importexportsupportedtype datatype
insertcolumnnames add columnname
string sqltype   typename   gettypeoption typename   columnsize   columnsize   decimaldigits
columntypes add sqltype
jdbccolumntypes add new integer datatype
noofcolumns
else
rs close
throw
loaderror nonsupportedtypecolumn columnname typename
rs close
return foundthecolumn
//return true if the given type is supported by import/export
public  static final boolean importexportsupportedtype int type
return   type    java sql types bit
type    java sql types java_object
type    java sql types other
type    storedformatids xml_type_id
private string gettypeoption string type   int length   int precision   int scale
if   type equals
type equals
type equals
type equals        length    0
return     length
if  type equals        precision    0
return      precision
//there are three format of decimal and numeric. plain decimal, decimal(x)
//and decimal(x,y). x is precision and y is scale.
if  type equals
type equals
if   precision    0    scale    0
return     precision
else if  precision    0    scale    0
return     precision       scale
else if precision    0    scale  0
return     scale
if   type equals
type equals        scale    0
return     scale
//no special type option
return
/*
* returns a  string of columns with proper casting/conversion
* to be used to select from import vti.
*/
public string getcolumnnameswithcasts
stringbuffer sb   new stringbuffer
boolean first   true
int noofvticols    vticolumnnames size
for int index   0   index < noofcolumns    index < noofvticols  index
if  first
sb append
else
first   false
string type    string  columntypes get index
string columnname    string  vticolumnnames get index
if type startswith
type startswith
type startswith
type startswith
type startswith
//these types require explicit casting
sb append         columnname       type
else
//if it is double use scalar double function no explicit casting allowed
if type startswith
sb append         columnname
else
//real: use double function to convert from string and the cast to real
if type startswith
sb append
columnname
else
//all other types does  not need any special casting
sb append     columnname
//there is no column info available
if first
return
else
return sb tostring
/* returns comma seperated column names delimited by quotes for the insert
* statement
* eg: "c1", "c2" , "c3" , "c4"
*/
public string getinsertcolumnnames
stringbuffer sb   new stringbuffer
boolean first   true
for int index   0   index < noofcolumns  index
if  first
sb append
else
first   false
// column names can be sql reserved words, so it
// is necessary delimit them using quotes for insert to work correctly.
sb append  "
sb append insertcolumnnames get index
sb append  "
//there is no column info available
if first
return null
else
return sb tostring
/*
returns number of columns expected to be in  the file from the user input paramters.
*/
public int getexpectednumberofcolumnsinfile
return expectednumberofcols
//return true if the given table exists in the database
private boolean tableexists   throws sqlexception
databasemetadata dmd   conn getmetadata
resultset rs   dmd gettables null  schemaname  tablename  null
boolean foundtable   false
if rs next
//found the entry
foundtable   true
rs close
return foundtable
/*
* returns the the expected vti data column types in a string format.
* format : (column name : type [, column name : type]*)
* eg: column1:1 (java.sql.types.char) , column2: -1(longvarchar) ,
* column3 : 2004 (blob)
*/
public string getexpectedvticolumntypesasstring
stringbuffer vticolumntypes   new stringbuffer
// expected types of data in the import file, based on
// the how columns in the data file are  mapped to
// the table  columns.
boolean first   true
for  int i  0   i < noofcolumns    i < vticolumnnames size    i
if  first
first   false
else
vticolumntypes append
vticolumntypes append vticolumnnames get i
jdbccolumntypes get i
if first
// there is no information about column types.
return null
else
return vticolumntypes tostring
/*
* get the expected vti data column types. this information was
* passed earlies as string to the vti. this rourine extract the
* information from the string.
* @param columntypesstr  import data column type information ,
*                        encoded as string.
* @param noofcolumns     number of columns in the import file.
*
* @see getexpectedvticolumntypesasstring()
*/
public static int getexpectedvticolumntypes string columntypesstr
int noofcolumns
// extract the table column types. break the comma seperated
// column types into java.sql.types int values from the columntypes
// string that got passed to the import vti.
//eg: column1:1 (java.sql.types.char) , column2: -1(longvarchar) ,
//column3 : 2004 (blob)
int vticolumntypes   new int
// expected column type information is only available
// for the columns that are being imported from the file.
// columns type information is not required when
// a column in the data file is not one of the
// imported column, just assume they are of varchar type.
for  int i   0   i < noofcolumns   i
vticolumntypes   java sql types varchar
stringtokenizer st   new stringtokenizer columntypesstr
while  st hasmoretokens
string coltypeinfo    st nexttoken    trim
int coltypeoffset   coltypeinfo indexof
// column names format is "column" + columnnumner
int colindex    new integer coltypeinfo substring 6
coltypeoffset    intvalue
int coltype    new integer coltypeinfo substring
coltypeoffset 1    intvalue
// column numbers start with 1. check if user by mistake has
// specified a column number that is large than than the
// number of columns exist in the file, if that is the case
// don't assign the type.
if  colindex <   noofcolumns
vticolumntypes   coltype
return vticolumntypes