/*
derby - class org.apache.derby.jdbc.embedpooledconnection
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby jdbc
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi reference property
import org apache derby iapi error exceptionseverity
import org apache derby iapi reference jdbc30translation
import org apache derby iapi sql conn languageconnectioncontext
/* import impl class */
import org apache derby impl jdbc util
import org apache derby impl jdbc embedconnection
import org apache derby iapi jdbc brokeredconnection
import org apache derby iapi jdbc brokeredconnectioncontrol
import org apache derby iapi jdbc engineconnection
import org apache derby impl jdbc embedpreparedstatement
import org apache derby impl jdbc embedcallablestatement
import java sql connection
import java sql sqlexception
import java sql statement
import java sql preparedstatement
import java sql callablestatement
import java util vector
import java util enumeration
/* -- new jdbc 20 extension types --- */
import javax sql datasource
import javax sql pooledconnection
import javax sql connectioneventlistener
import javax sql connectionevent
/**
a pooledconnection object is a connection object that provides hooks for
connection pool management.
<p>this is derby's implementation of a pooledconnection for use in
the following environments:
<ul>
<li> jdbc 3.0 - java 2 - jdk 1.4, j2se 5.0
<li> jdbc 2.0 - java 2 - jdk 1.2,1.3
</ul>
*/
class embedpooledconnection implements javax sql pooledconnection  brokeredconnectioncontrol
/** static counter for connection ids */
private static int idcounter   0
/** the id for this connection.  */
private int connectionid
/** the connection string */
private string connstring
private vector eventlistener     who wants to know i am closed or error
embedconnection realconnection
int defaultisolationlevel
private boolean defaultreadonly
brokeredconnection currentconnectionhandle
// set up once by the data source
final referenceabledatasource datasource
private final string username
private final string password
/**
true if the password was passed in on the connection request, false if it came from the data source property.
*/
private final boolean requestpassword
protected boolean isactive
private synchronized int nextid
return idcounter
embedpooledconnection referenceabledatasource ds  string u  string p  boolean requestpassword  throws sqlexception
connectionid   nextid
datasource   ds
username   u
password   p
this requestpassword   requestpassword
isactive   true
// open the connection up front in order to do authentication
openrealconnection
string getusername
if  username    null    username equals
return property default_user_name
else
return username
string getpassword
if  password    null
return
else
return password
/**
create an object handle for a database connection.
@return a connection object
@exception sqlexception - if a database-access error occurs.
*/
public synchronized connection getconnection   throws sqlexception
checkactive
// need to do this in case the connection is forcibly removed without
// first being closed.
closecurrentconnectionhandle
// realconnection is not null if the app server yanks a local
// connection from one client and give it to another.  in this case,
// the real connection is ready to be used.  otherwise, set it up
if  realconnection    null
// first time we establish a connection
openrealconnection
else
resetrealconnection
// now make a brokered connection wrapper and give this to the user
// we reuse the embedconnection(ie realconnection).
connection c   getnewcurrentconnectionhandle
return c
final void openrealconnection   throws sqlexception
// first time we establish a connection
connection rc   datasource getconnection username  password  requestpassword
this realconnection    embedconnection  rc
defaultisolationlevel   rc gettransactionisolation
defaultreadonly   rc isreadonly
if  currentconnectionhandle    null
realconnection setapplicationconnection currentconnectionhandle
final connection getnewcurrentconnectionhandle
connection applicationconnection   currentconnectionhandle
org apache derby jdbc driver20   realconnection getlocaldriver     newbrokeredconnection this
realconnection setapplicationconnection applicationconnection
return applicationconnection
/**
in this case the listeners are *not* notified. jdbc 3.0 spec section 11.4
*/
private void closecurrentconnectionhandle   throws sqlexception
if  currentconnectionhandle    null
vector tmpeventlistener   eventlistener
eventlistener   null
try
currentconnectionhandle close
finally
eventlistener   tmpeventlistener
currentconnectionhandle   null
void resetrealconnection   throws sqlexception
// ensure any outstanding changes from the previous
// user are rolledback.
realconnection rollback
// clear any warnings that are left over
realconnection clearwarnings
// need to reset transaction isolation, autocommit, readonly, holdability states
if  realconnection gettransactionisolation      defaultisolationlevel
realconnection settransactionisolation defaultisolationlevel
if   realconnection getautocommit
realconnection setautocommit true
if  realconnection isreadonly      defaultreadonly
realconnection setreadonly defaultreadonly
if  realconnection getholdability      jdbc30translation hold_cursors_over_commit
realconnection setholdability jdbc30translation hold_cursors_over_commit
// reset any remaining state of the connection
realconnection resetfrompool
if  sanitymanager debug
sanitymanager assert realconnection transactionisidle
/**
close the pooled connection.
@exception sqlexception - if a database-access error occurs.
*/
public synchronized void close   throws sqlexception
if   isactive
return
closecurrentconnectionhandle
try
if  realconnection    null
if   realconnection isclosed
realconnection close
finally
realconnection   null 	   make sure i am not accessed again
isactive   false
eventlistener   null
/**
add an event listener.
*/
public final synchronized void addconnectioneventlistener connectioneventlistener listener
if   isactive
return
if  listener    null
return
if  eventlistener    null
eventlistener   new vector
eventlistener addelement listener
/**
remove an event listener.
*/
public final synchronized void removeconnectioneventlistener connectioneventlistener listener
if  listener    null
return
if  eventlistener    null
eventlistener removeelement listener
/*
* class specific method
*/
// called by connectionhandle when it needs to forward things to the
// underlying connection
public synchronized engineconnection getrealconnection
throws sqlexception
checkactive
return realconnection
/**
* @return the underlying language connection.
*/
public synchronized languageconnectioncontext getlanguageconnection
throws sqlexception
checkactive
return realconnection getlanguageconnection
// my conneciton handle has caught an error (actually, the real connection
// has already handled the error, we just need to nofity the listener an
// error is about to be thrown to the app).
public synchronized void notifyerror sqlexception exception
// only report fatal error to the connection pool manager
if  exception geterrorcode   < exceptionseverity session_severity
return
// tell my listeners an exception is about to be thrown
if  eventlistener    null    eventlistener size   > 0
connectionevent errorevent   new connectionevent this  exception
for  enumeration e   eventlistener elements
e hasmoreelements
connectioneventlistener l
connectioneventlistener e nextelement
l connectionerroroccurred errorevent
// my conneciton handle is being closed
public synchronized void notifyclose
// tell my listeners i am closed
if  eventlistener    null    eventlistener size   > 0
connectionevent closeevent   new connectionevent this
for  enumeration e   eventlistener elements
e hasmoreelements
connectioneventlistener l
connectioneventlistener e nextelement
l connectionclosed closeevent
final void checkactive   throws sqlexception
if   isactive
throw util nocurrentconnection
/*
** brokeredconnectioncontrol api
*/
/**
returns true if isolation level has been set using either jdbc api or sql
*/
public boolean isisolationlevelsetusingsqlorjdbc   throws sqlexception
if  realconnection    null
return realconnection getlanguageconnection   isisolationlevelsetusingsqlorjdbc
else
return false
/**
reset the isolation level flag used to keep state in
brokeredconnection. it will get set to true when isolation level
is set using jdbc/sql. it will get reset to false at the start
and the end of a global transaction.
*/
public void resetisolationlevelflag   throws sqlexception
realconnection getlanguageconnection   resetisolationlevelflagusedforsqlandjdbc
/**
notify the control class that a sqlexception was thrown
during a call on one of the brokered connection's methods.
*/
public void notifyexception sqlexception sqle
this notifyerror sqle
/**
allow control over setting auto commit mode.
*/
public void checkautocommit boolean autocommit  throws sqlexception
/**
are held cursors allowed.
*/
public int checkholdcursors int holdability  boolean downgrade
throws sqlexception
return holdability
/**
allow control over creating a savepoint (jdbc 3.0)
*/
public void checksavepoint   throws sqlexception
/**
allow control over calling rollback.
*/
public void checkrollback   throws sqlexception
/**
allow control over calling commit.
*/
public void checkcommit   throws sqlexception
/**
close called on brokeredconnection. if this call
returns true then getrealconnection().close() will be called.
don't close the underlying real connection as
it is pooled.
*/
public boolean closingconnection   throws sqlexception
notifyclose
currentconnectionhandle   null
return false
/**
no need to wrap statements for pooledconnections.
*/
public statement wrapstatement statement s  throws sqlexception
return s
/**
* call the setbrokeredconnectioncontrol method inside the
* embedpreparedstatement class to set the brokeredconnectioncontrol
* variable to this instance of embedpooledconnection
* this will then be used to call the onstatementerroroccurred
* and onstatementclose events when the corresponding events
* occur on the preparedstatement
*
* @param  ps            preparedstatment to be wrapped
* @param  sql           string
* @param  generatedkeys object
* @return returns the wrapped preparedstatement
* @throws java.sql.sqlexception
*/
public preparedstatement wrapstatement preparedstatement ps  string sql  object generatedkeys  throws sqlexception
/*
*/
embedpreparedstatement ps_    embedpreparedstatement ps
ps_ setbrokeredconnectioncontrol this
return  preparedstatement ps_
/**
* call the setbrokeredconnectioncontrol method inside the
* embedcallablestatement class to set the brokeredconnectioncontrol
* variable to this instance of embedpooledconnection
* this will then be used to call the onstatementerroroccurred
* and onstatementclose events when the corresponding events
* occur on the callablestatement
*
* @param  cs            callablestatment to be wrapped
* @param  sql           string
* @return returns the wrapped callablestatement
* @throws java.sql.sqlexception
*/
public callablestatement wrapstatement callablestatement cs  string sql  throws sqlexception
embedcallablestatement cs_    embedcallablestatement cs
cs_ setbrokeredconnectioncontrol this
return  callablestatement cs_
/**
* get the string representation of this pooled connection.
*
* a pooled connection is assigned a separate id from a physical
* connection. when a container calls pooledconnection.tostring(),
* it gets the string representation of this id. this is useful for
* developers implementing connection pools when they are trying to
* debug pooled connections.
*
* @return a string representation of the uniquie id for this pooled
*    connection.
*
*/
public string tostring
if   connstring    null
string physicalconnstring   isactive ?
realconnection tostring
connstring
this getclass   getname         this hashcode
connectionid
physicalconnstring
return connstring
/*-----------------------------------------------------------------*/
/*
* these methods are from the brokeredconnectioncontrol interface.
* these methods are needed to provide statementevent support for
* derby.
* they are actually implemented in embedpooledconnection40 but have
* a dummy implementation here so that the compilation wont fail when they
* are compiled with jdk1.4
*/
/**
* dummy implementation for the actual methods found in
* org.apache.derby.jdbc.embedpooledconnection40
* @param statement preparedstatement
*/
public void onstatementclose preparedstatement statement
/**
* dummy implementation for the actual methods found in
* org.apache.derby.jdbc.embedpooledconnection40
* @param statement preparedstatement
* @param sqle      sqlexception
*/
public void onstatementerroroccurred preparedstatement statement
sqlexception sqle