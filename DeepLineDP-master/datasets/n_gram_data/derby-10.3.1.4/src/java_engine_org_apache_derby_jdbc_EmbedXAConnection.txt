/*
derby - class org.apache.derby.jdbc.embedxaconnection
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby jdbc
import org apache derby impl jdbc util
import org apache derby iapi jdbc engineconnection
import org apache derby iapi jdbc resourceadapter
import org apache derby iapi reference sqlstate
import org apache derby iapi reference jdbc30translation
import java sql connection
import java sql sqlexception
import java sql statement
import java sql preparedstatement
import java sql callablestatement
import javax transaction xa xaresource
/** -- jdbc 2.0. extension -- */
import javax sql xaconnection
/**
*/
class embedxaconnection extends embedpooledconnection
implements xaconnection
private embedxaresource xares
embedxaconnection embeddeddatasource ds  resourceadapter ra  string u  string p  boolean requestpassword  throws sqlexception
super ds  u  p  requestpassword
xares   new embedxaresource  this  ra
/*
** xaconnection methods
*/
public final synchronized xaresource getxaresource   throws sqlexception
checkactive
return xares
/*
** brokeredconnectioncontrol api
*/
/**
allow control over setting auto commit mode.
*/
public void checkautocommit boolean autocommit  throws sqlexception
if  autocommit     xares getcurrentxid       null
throw util generatecssqlexception sqlstate cannot_autocommit_xa
super checkautocommit autocommit
/**
are held cursors allowed. if the connection is attached to
a global transaction then downgrade the result set holdabilty
to close_cursors_at_commit if downgrade is true, otherwise
throw an exception.
if the connection is in a local transaction then the
passed in holdabilty is returned.
*/
public int  checkholdcursors int holdability  boolean downgrade
throws sqlexception
if  holdability    jdbc30translation hold_cursors_over_commit
if  xares getcurrentxid       null
if   downgrade
throw util generatecssqlexception sqlstate cannot_hold_cursor_xa
holdability   jdbc30translation close_cursors_at_commit
return super checkholdcursors holdability  downgrade
/**
allow control over creating a savepoint (jdbc 3.0)
*/
public void checksavepoint   throws sqlexception
if  xares getcurrentxid       null
throw util generatecssqlexception sqlstate cannot_rollback_xa
super checksavepoint
/**
allow control over calling rollback.
*/
public void checkrollback   throws sqlexception
if  xares getcurrentxid       null
throw util generatecssqlexception sqlstate cannot_rollback_xa
super checkrollback
/**
allow control over calling commit.
*/
public void checkcommit   throws sqlexception
if  xares getcurrentxid       null
throw util generatecssqlexception sqlstate cannot_commit_xa
super checkcommit
public connection getconnection   throws sqlexception
connection handle
// is this just a local transaction?
if  xares getcurrentxid       null
handle   super getconnection
else
if  currentconnectionhandle    null
// this can only happen if someone called start(xid),
// getconnection, getconnection (and we are now the 2nd
// getconnection call).
// cannot yank a global connection away like, i don't think...
throw util generatecssqlexception
sqlstate cannot_close_active_xa_connection
handle   getnewcurrentconnectionhandle
currentconnectionhandle syncstate
return handle
/**
wrap and control a statement
*/
public statement wrapstatement statement s  throws sqlexception
xastatementcontrol sc   new xastatementcontrol this  s
return sc applicationstatement
/**
wrap and control a preparedstatement
*/
public preparedstatement wrapstatement preparedstatement ps  string sql  object generatedkeys  throws sqlexception
ps   super wrapstatement ps sql generatedkeys
xastatementcontrol sc   new xastatementcontrol this  ps  sql  generatedkeys
return  preparedstatement  sc applicationstatement
/**
wrap and control a preparedstatement
*/
public callablestatement wrapstatement callablestatement cs  string sql  throws sqlexception
cs   super wrapstatement cs sql
xastatementcontrol sc   new xastatementcontrol this  cs  sql
return  callablestatement  sc applicationstatement
/**
override getrealconnection to create a a local connection
when we are not associated with an xa transaction.
this can occur if the application has a connection object (conn)
and the following sequence occurs.
conn = xac.getconnection();
xac.start(xid, ...)
// do work with conn
xac.end(xid, ...);
// do local work with conn
// need to create new connection here.
*/
public engineconnection getrealconnection   throws sqlexception
engineconnection rc   super getrealconnection
if  rc    null
return rc
openrealconnection
// a new connection, set its state according to the application's connection handle
currentconnectionhandle setstate true
return realconnection