/*
derby - class org.apache.derby.client.am.cursor
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby client am
import org apache derby shared common reference sqlstate
import java sql sqlexception
import java io unsupportedencodingexception
// when we calculate column offsets make sure we calculate the correct offsets for double byte charactr5er data
// length from server is number of chars, not bytes
// direct byte-level converters are called directly by this class, cross converters are deferred to the crossconverters class.
public abstract class cursor
protected agent agent_
//-----------------------------varchar representations------------------------
public final static int string   0
public final static int variable_string   2           uses a 2 byte length indicator
public final static int variable_short_string   1     aka pascal l  uses a 1 byte length indicator
public final static int null_terminated_string   3
public final static int bytes   4
public final static int variable_bytes   5
public final static int variable_short_bytes   6
public final static int null_terminated_bytes   7
public final static int sbcs_clob   8
public final static int mbcs_clob   9
public final static int dbcs_clob   10
//-----------------------------internal state---------------------------------
//-------------structures for holding and scrolling the data -----------------
public byte databuffer_
public java io bytearrayoutputstream databufferstream_
public int position_     this is the read head
public int lastvalidbyteposition_
public boolean haslobs_     is there at least one lob column?
// current row positioning
protected int currentrowposition_
private int nextrowposition_
// let's new up a 2-dimensional array based on fetch-size and reuse so that
protected int columndataposition_
// this is the actual, computed lengths of varchar fields, not the max length from query descriptor or da
protected int columndatacomputedlength_
// populate this for
// all the data is in the buffers, but user may not have necessarily stepped to the last row yet.
// this flag indicates that the server has returned all the rows, and is positioned
// after last, for both scrollable and forward-only cursors.
// for singleton cursors, this memeber will be set to true as soon as next is called.
private boolean allrowsreceivedfromserver_
// total number of rows read so far.
// this should never exceed this.statement.maxrows
int rowsread_
// maximum column size limit in bytes.
int maxfieldsize_   0
// row positioning for all cached rows
// for scrollable result sets, these lists hold the offsets into the cached rowset buffer for each row of data.
protected java util arraylist columndatapositioncache_   new java util arraylist
protected java util arraylist columndatalengthcache_   new java util arraylist
protected java util arraylist columndataisnullcache_   new java util arraylist
public java util arraylist isupdatedeleteholecache_   new java util arraylist
public boolean isupdatedeletehole_
// state to keep track of when a row has been updated,
// cf. corresponding set and get accessors.  only implemented for
// scrollable updatable insensitive result sets for now.
private boolean isrowupdated_
final static public java lang boolean row_is_null   new boolean true
final static public java lang boolean row_is_not_null   new boolean false
java util calendar recyclablecalendar_   null
// for the net, this data comes from the query descriptor.
public int jdbctypes_
public int columns_
public boolean nullable_
public string charsetname_
public boolean isnull_
public int fdocalength_     this is the max length for
//----------------------------------------------------------------------------
public int ccsid_
char charbuffer_
//---------------------constructors/finalizer---------------------------------
public cursor agent agent
agent_   agent
isrowupdated_   false
databufferstream_   new java io bytearrayoutputstream
public cursor agent agent  byte databuffer
this agent
databuffer_   databuffer
setallrowsreceivedfromserver false
public void setnumberofcolumns int numberofcolumns
columndataposition_   new int
columndatacomputedlength_   new int
columns_   numberofcolumns
nullable_   new boolean
charsetname_   new string
ccsid_   new int
isnull_   new boolean
jdbctypes_   new int
/**
* makes the next row the current row. returns true if the current
* row position is a valid row position.
*
* @param allowserverfetch if false, don't fetch more data from
* the server even if more data is needed
* @return <code>true</code> if current row position is valid
* @exception sqlexception if an error occurs
*/
protected boolean stepnext boolean allowserverfetch  throws sqlexception
// local variable usd to hold the returned value from calculatecolumnoffsetsforrow()
boolean rowpositionisvalid   true
// reset lob data
// clears out cursor.lobs_ calculated for the current row when cursor is moved.
clearlobdata_
// mark the start of a new row.
makenextrowpositioncurrent
// moving out of the hole, set isupdatedeletehole to false
isupdatedeletehole_   false
isrowupdated_   false
// drive the cntqry outside of calculatecolumnoffsetsforrow() if the databuffer_
// contains no data since it has no abilities to handle replies other than
// the qrydta, i.e. endqryrm when the result set contains no more rows.
while   databufferhasunprocesseddata
if  allrowsreceivedfromserver_
return false
getmoredata_
// the parameter passed in here is used as an index into the cached rowset for
// scrollable cursors, for the arrays to be reused.  it is not used for forward-only
// cursors, so just pass in 0.
rowpositionisvalid   calculatecolumnoffsetsforrow_ 0  allowserverfetch
marknextrowposition
return rowpositionisvalid
/**
* makes the next row the current row. returns true if the current
* row position is a valid row position.
*
* @return <code>true</code> if current row position is valid
* @exception sqlexception if an error occurs
*/
public boolean next   throws sqlexception
return stepnext true
//--------------------------reseting cursor state-----------------------------
/**
* set the value of value of allrowsreceivedfromserver_.
*
* @param b a <code>boolean</code> value indicating whether all
* rows are received from the server
*/
public void setallrowsreceivedfromserver boolean b
allrowsreceivedfromserver_   b
/**
* return <code>true</code> if all rows are received from the
* server.
*
* @return <code>true</code> if all rows are received from the
* server.
*/
public final boolean allrowsreceivedfromserver
return allrowsreceivedfromserver_
public final boolean currentrowpositionisequaltonextrowposition
return  currentrowposition_    nextrowposition_
// reset the beginning and ending position in the data buffer to 0
// reset the currentrowposition and nextrowposition to 0
// reset lastrowreached and sqlcode100received to false
// clear the column data offsets cache
public final void resetdatabuffer
position_   0
lastvalidbyteposition_   0
currentrowposition_   0
nextrowposition_   0
setallrowsreceivedfromserver false
databufferstream_ reset
public final boolean databufferhasunprocesseddata
return  lastvalidbyteposition_   position_  > 0
/**
* calculate the column offsets for a row.
*
* @param row row index
* @param allowserverfetch if true, allow fetching more data from
* server
* @return <code>true</code> if the current row position is a
* valid row position.
* @exception sqlexception
* @exception disconnectexception
*/
protected abstract boolean
calculatecolumnoffsetsforrow_ int row  boolean allowserverfetch
throws sqlexception  disconnectexception
protected abstract void clearlobdata_
protected abstract void getmoredata_   throws sqlexception
// associate a new underlying com or sqlda output data buffer for this converter.
public final void setbuffer byte databuffer
databuffer_   databuffer
public final void setisupdatadeletehole int row  boolean isrownull
isupdatedeletehole_   isrownull
boolean nullindicator    isupdatedeletehole_    true  ? row_is_null   row_is_not_null
if  isupdatedeleteholecache_ size      row
isupdatedeleteholecache_ add nullindicator
else
isupdatedeleteholecache_ set row  nullindicator
/**
* keep track of updated status for this row.
*
* @param isrowupdated true if row has been updated
*
* @see cursor#getisrowupdated
*/
public final void setisrowupdated boolean isrowupdated
isrowupdated_   isrowupdated
/**
* get updated status for this row.
* minion of resultset#rowupdated.
*
* @see cursor#setisrowupdated
*/
public final boolean getisrowupdated
return isrowupdated_
/**
* get deleted status for this row.
* minion of resultset#rowdeleted.
*
* @see cursor#setisupdatadeletehole
*/
public final boolean getisupdatedeletehole
return isupdatedeletehole_
//---------------------------cursor positioning-------------------------------
final int getposition
return position_
final void setposition int newposition
position_   newposition
public final void markcurrentrowposition
currentrowposition_   position_
public final void marknextrowposition
nextrowposition_   position_
public final void makenextrowpositioncurrent
currentrowposition_   nextrowposition_
final void repositioncursortocurrentrow
position_   currentrowposition_
final void repositioncursortonextrow
position_   nextrowposition_
public final byte getdatabuffer
return databuffer_
public final int getdatabufferlength
return databuffer_ length
public final int getlastvalidbyteposition
return lastvalidbyteposition_
// this tracks the total number of rows read into the client side buffer for
// this result set, irregardless of scrolling.
// per jdbc semantics, this should never exceed statement.maxrows.
// this event should be generated in the materialized cursor's implementation
// of calculatecolumnoffsetsforrow().
public final void incrementrowsreadevent
rowsread_
//------- the following getters are called on known column types -------------
// direct conversions only, cross conversions are handled by another set of getters.
// build a java short from a 2-byte signed binary representation.
private final short get_smallint int column
return org apache derby client am signedbinary getshort databuffer_
columndataposition_
// build a java int from a 4-byte signed binary representation.
protected final int get_integer int column
return org apache derby client am signedbinary getint databuffer_
columndataposition_
// build a java long from an 8-byte signed binary representation.
private final long get_bigint int column
return org apache derby client am signedbinary getlong databuffer_
columndataposition_
// build a java float from a 4-byte floating point representation.
private final float get_float int column
return org apache derby client am floatingpoint getfloat databuffer_
columndataposition_
// build a java double from an 8-byte floating point representation.
private final double get_double int column
return org apache derby client am floatingpoint getdouble databuffer_
columndataposition_
// build a java.math.bigdecimal from a fixed point decimal byte representation.
private final java math bigdecimal get_decimal int column  throws sqlexception
try
return org apache derby client am decimal getbigdecimal databuffer_
columndataposition_
getcolumnprecision column   1
getcolumnscale column   1
catch  java io unsupportedencodingexception e
throw new sqlexception agent_ logwriter_
new clientmessageid  sqlstate unsupported_encoding
e
// build a java double from a fixed point decimal byte representation.
private final double getdoublefromdecimal int column  throws sqlexception
try
return org apache derby client am decimal getdouble databuffer_
columndataposition_
getcolumnprecision column   1
getcolumnscale column   1
catch  java lang illegalargumentexception e
throw new sqlexception agent_ logwriter_
new clientmessageid  sqlstate lang_outside_range_for_datatype
e
catch  java io unsupportedencodingexception e
throw new sqlexception agent_ logwriter_
new clientmessageid  sqlstate unsupported_encoding
e
// build a java long from a fixed point decimal byte representation.
private final long getlongfromdecimal int column  throws sqlexception
try
return org apache derby client am decimal getlong databuffer_
columndataposition_
getcolumnprecision column   1
getcolumnscale column   1
catch  java lang illegalargumentexception e
throw new sqlexception agent_ logwriter_
new clientmessageid  sqlstate lang_outside_range_for_datatype
e
catch  java io unsupportedencodingexception e
throw new sqlexception agent_ logwriter_
new clientmessageid  sqlstate unsupported_encoding
e
// build a java string from a database varchar or longvarchar field.
//
// depending on the ccsid, length is the number of chars or number of bytes.
// for 2-byte character ccsids, length is the number of characters,
// for all other cases length is the number of bytes.
// the length does not include the null terminator.
private final string getvarchar int column  throws sqlexception
string tempstring   null
try
if  ccsid_    1200
return getstringwithoutconvert columndataposition_   2  columndatacomputedlength_   2
// check for null encoding is needed because the net layer
// will no longer throw an exception if the server didn't specify
// a mixed or double byte ccsid (ccsid = 0).  this check for null in the
// cursor is only required for types which can have mixed or double
// byte ccsids.
if  charsetname_    null
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate character_converter_not_available
tempstring   new string databuffer_
columndataposition_   2
columndatacomputedlength_   2
charsetname_
return  maxfieldsize_    0  ? tempstring
tempstring substring 0  java lang math min maxfieldsize_  tempstring length
catch  java io unsupportedencodingexception e
throw new sqlexception agent_ logwriter_
new clientmessageid  sqlstate unsupported_encoding
e
// build a java string from a database char field.
private final string getchar int column  throws sqlexception
string tempstring   null
if  ccsid_    1200
return getstringwithoutconvert columndataposition_  columndatacomputedlength_
try
// check for null encoding is needed because the net layer
// will no longer throw an exception if the server didn't specify
// a mixed or double byte ccsid (ccsid = 0).  this check for null in the
// cursor is only required for types which can have mixed or double
// byte ccsids.
if  charsetname_    null
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate character_converter_not_available
tempstring   new string databuffer_
columndataposition_
columndatacomputedlength_
charsetname_
return  maxfieldsize_    0  ? tempstring
tempstring substring 0  java lang math min maxfieldsize_  tempstring length
catch  java io unsupportedencodingexception e
throw new sqlexception agent_ logwriter_
new clientmessageid  sqlstate unsupported_encoding
e
// build a jdbc date object from the derby iso date field.
private final java sql date getdate int column  throws sqlexception
try
return org apache derby client am datetime datebytestodate databuffer_
columndataposition_
getrecyclablecalendar
charsetname_
catch  unsupportedencodingexception e
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate unsupported_encoding
e
// build a jdbc time object from the derby iso time field.
private final java sql time gettime int column  throws sqlexception
try
return org apache derby client am datetime timebytestotime databuffer_
columndataposition_
getrecyclablecalendar
charsetname_
catch  unsupportedencodingexception e
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate unsupported_encoding
e
// build a jdbc timestamp object from the derby iso timestamp field.
private final java sql timestamp gettimestamp int column  throws sqlexception
try
return org apache derby client am datetime timestampbytestotimestamp
databuffer_
columndataposition_
getrecyclablecalendar
charsetname_
catch  java io unsupportedencodingexception e
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate unsupported_encoding
e
// build a jdbc timestamp object from the derby iso date field.
private final java sql timestamp gettimestampfromdate int column  throws sqlexception
try
return org apache derby client am datetime datebytestotimestamp databuffer_
columndataposition_
getrecyclablecalendar
charsetname_
catch  unsupportedencodingexception e
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate unsupported_encoding
e
// build a jdbc timestamp object from the derby iso time field.
private final java sql timestamp gettimestampfromtime int column  throws sqlexception
try
return org apache derby client am datetime timebytestotimestamp databuffer_
columndataposition_
getrecyclablecalendar
charsetname_
catch  unsupportedencodingexception e
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate unsupported_encoding
e
// build a jdbc date object from the derby iso timestamp field.
private final java sql date getdatefromtimestamp int column  throws sqlexception
try
return org apache derby client am datetime timestampbytestodate databuffer_
columndataposition_
getrecyclablecalendar
charsetname_
catch  unsupportedencodingexception e
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate unsupported_encoding
e
// build a jdbc time object from the derby iso timestamp field.
private final java sql time gettimefromtimestamp int column  throws sqlexception
try
return org apache derby client am datetime timestampbytestotime databuffer_
columndataposition_
getrecyclablecalendar
charsetname_
catch  unsupportedencodingexception e
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate unsupported_encoding
e
private final string getstringfromdate int column  throws sqlexception
return getdate column  tostring
// build a string object from the derby byte time representation.
private final string getstringfromtime int column  throws sqlexception
return gettime column  tostring
// build a string object from the derby byte timestamp representation.
private final string getstringfromtimestamp int column  throws sqlexception
return gettimestamp column  tostring
// extract bytes from a database java.sql.types.binary field.
// this is the derby type char(n) for bit data.
private final byte get_char_for_bit_data int column  throws sqlexception
// there is no limit to the size of a column if maxfieldsize is zero.
// otherwise, use the smaller of maxfieldsize and the actual column length.
int columnlength    maxfieldsize_    0  ? columndatacomputedlength_
java lang math min maxfieldsize_  columndatacomputedlength_
byte bytes   new byte
system arraycopy databuffer_  columndataposition_  bytes  0  columnlength
return bytes
// extract bytes from a database java.sql.types.varbinary or longvarbinary field.
// this includes the derby types:
//   varchar(n) for bit data
//   long varchar(n) for bit data
private final byte get_varchar_for_bit_data int column  throws sqlexception
byte bytes
int columnlength   0
columnlength    maxfieldsize_    0  ? columndatacomputedlength_   2
java lang math min maxfieldsize_  columndatacomputedlength_   2
bytes   new byte
system arraycopy databuffer_  columndataposition_   2  bytes  0  bytes length
return bytes
/**
* instantiate an instance of calendar that can be re-used for getting
* time, timestamp, and date values from this cursor.  assumption is
* that all users of the returned calendar object will clear it as
* appropriate before using it.
*/
private java util calendar getrecyclablecalendar
if  recyclablecalendar_    null
recyclablecalendar_   new java util gregoriancalendar
return recyclablecalendar_
abstract public blob getblobcolumn_ int column  agent agent  throws sqlexception
abstract public clob getclobcolumn_ int column  agent agent  throws sqlexception
// get the raw clob bytes, without translation.  dataoffset must be int[1]
abstract public byte getclobbytes_ int column  int dataoffset   output    throws sqlexception
//------- the following getters perform any necessary cross-conversion _------
final boolean getboolean int column  throws sqlexception
switch  jdbctypes_
case java sql types smallint
return agent_ crossconverters_ getbooleanfromshort get_smallint column
case java sql types integer
return agent_ crossconverters_ getbooleanfromint get_integer column
case java sql types bigint
return agent_ crossconverters_ getbooleanfromlong get_bigint column
case java sql types real
return agent_ crossconverters_ getbooleanfromfloat get_float column
case java sql types double
return agent_ crossconverters_ getbooleanfromdouble get_double column
case java sql types decimal
// for performance we don't materialize the bigdecimal, but convert directly from decimal bytes to a long.
return agent_ crossconverters_ getbooleanfromlong getlongfromdecimal column
case java sql types char
return agent_ crossconverters_ getbooleanfromstring getchar column
case java sql types varchar
case java sql types longvarchar
return agent_ crossconverters_ getbooleanfromstring getvarchar column
default
throw new columntypeconversionexception agent_ logwriter_
jdbctypes_
final byte getbyte int column  throws sqlexception
// this needs to be changed to use jdbctypes[]
switch  jdbctypes_
case java sql types smallint
return agent_ crossconverters_ getbytefromshort get_smallint column
case java sql types integer
return agent_ crossconverters_ getbytefromint get_integer column
case java sql types bigint
return agent_ crossconverters_ getbytefromlong get_bigint column
case java sql types real
return agent_ crossconverters_ getbytefromfloat get_float column
case java sql types double
return agent_ crossconverters_ getbytefromdouble get_double column
case java sql types decimal
// for performance we don't materialize the bigdecimal, but convert directly from decimal bytes to a long.
return agent_ crossconverters_ getbytefromlong getlongfromdecimal column
case java sql types char
return agent_ crossconverters_ getbytefromstring getchar column
case java sql types varchar
case java sql types longvarchar
return agent_ crossconverters_ getbytefromstring getvarchar column
default
throw new columntypeconversionexception agent_ logwriter_
jdbctypes_
final short getshort int column  throws sqlexception
switch  jdbctypes_
case java sql types smallint
return get_smallint column
case java sql types integer
return agent_ crossconverters_ getshortfromint get_integer column
case java sql types bigint
return agent_ crossconverters_ getshortfromlong get_bigint column
case java sql types real
return agent_ crossconverters_ getshortfromfloat get_float column
case java sql types double
return agent_ crossconverters_ getshortfromdouble get_double column
case java sql types decimal
// for performance we don't materialize the bigdecimal, but convert directly from decimal bytes to a long.
return agent_ crossconverters_ getshortfromlong getlongfromdecimal column
case java sql types char
return agent_ crossconverters_ getshortfromstring getchar column
case java sql types varchar
case java sql types longvarchar
return agent_ crossconverters_ getshortfromstring getvarchar column
default
throw new columntypeconversionexception agent_ logwriter_
jdbctypes_
final int getint int column  throws sqlexception
switch  jdbctypes_
case java sql types smallint
return  int  get_smallint column
case java sql types integer
return get_integer column
case java sql types bigint
return agent_ crossconverters_ getintfromlong get_bigint column
case java sql types real
return agent_ crossconverters_ getintfromfloat get_float column
case java sql types double
return agent_ crossconverters_ getintfromdouble get_double column
case java sql types decimal
// for performance we don't materialize the bigdecimal, but convert directly from decimal bytes to a long.
return agent_ crossconverters_ getintfromlong getlongfromdecimal column
case java sql types char
return agent_ crossconverters_ getintfromstring getchar column
case java sql types varchar
case java sql types longvarchar
return agent_ crossconverters_ getintfromstring getvarchar column
default
throw new columntypeconversionexception agent_ logwriter_
jdbctypes_
final long getlong int column  throws sqlexception
switch  jdbctypes_
case java sql types smallint
return  long  get_smallint column
case java sql types integer
return  long  get_integer column
case java sql types bigint
return get_bigint column
case java sql types real
return agent_ crossconverters_ getlongfromfloat get_float column
case java sql types double
return agent_ crossconverters_ getlongfromdouble get_double column
case java sql types decimal
// for performance we don't materialize the bigdecimal, but convert directly from decimal bytes to a long.
return getlongfromdecimal column
case java sql types char
return agent_ crossconverters_ getlongfromstring getchar column
case java sql types varchar
case java sql types longvarchar
return agent_ crossconverters_ getlongfromstring getvarchar column
default
throw new columntypeconversionexception agent_ logwriter_
jdbctypes_
final float getfloat int column  throws sqlexception
switch  jdbctypes_
case java sql types real
return get_float column
case java sql types double
return agent_ crossconverters_ getfloatfromdouble get_double column
case java sql types decimal
// for performance we don't materialize the bigdecimal, but convert directly from decimal bytes to a long.
return agent_ crossconverters_ getfloatfromdouble getdoublefromdecimal column
case java sql types smallint
return  float  get_smallint column
case java sql types integer
return  float  get_integer column
case java sql types bigint
return  float  get_bigint column
case java sql types char
return agent_ crossconverters_ getfloatfromstring getchar column
case java sql types varchar
case java sql types longvarchar
return agent_ crossconverters_ getfloatfromstring getvarchar column
default
throw new columntypeconversionexception agent_ logwriter_
jdbctypes_
final double getdouble int column  throws sqlexception
switch  jdbctypes_
case java sql types real
double d    double  get_float column
return d
//return (double) get_float (column);
case java sql types double
return get_double column
case java sql types decimal
// for performance we don't materialize the bigdecimal, but convert directly from decimal bytes to a long.
return getdoublefromdecimal column
case java sql types smallint
return  double  get_smallint column
case java sql types integer
return  double  get_integer column
case java sql types bigint
return  double  get_bigint column
case java sql types char
return agent_ crossconverters_ getdoublefromstring getchar column
case java sql types varchar
case java sql types longvarchar
return agent_ crossconverters_ getdoublefromstring getvarchar column
default
throw new columntypeconversionexception agent_ logwriter_
jdbctypes_
final java math bigdecimal getbigdecimal int column  throws sqlexception
switch  jdbctypes_
case java sql types decimal
return get_decimal column
case java sql types real
// can't use the following commented out line because it changes precision of the result.
//return new java.math.bigdecimal (get_float (column));
float f   get_float column
return new java math bigdecimal string valueof f
case java sql types double
// can't use the following commented out line because it changes precision of the result.
return new java math bigdecimal string valueof get_double column
case java sql types smallint
return java math bigdecimal valueof get_smallint column
case java sql types integer
return java math bigdecimal valueof get_integer column
case java sql types bigint
return java math bigdecimal valueof get_bigint column
case java sql types char
return agent_ crossconverters_ getbigdecimalfromstring getchar column
case java sql types varchar
case java sql types longvarchar
return agent_ crossconverters_ getbigdecimalfromstring getvarchar column
default
throw new columntypeconversionexception agent_ logwriter_
jdbctypes_
final java sql date getdate int column  throws sqlexception
switch  jdbctypes_
case java sql types date
return getdate column
case java sql types timestamp
return getdatefromtimestamp column
case java sql types char
return agent_ crossconverters_ getdatefromstring getchar column
case java sql types varchar
case java sql types longvarchar
return agent_ crossconverters_ getdatefromstring getvarchar column
default
throw new columntypeconversionexception agent_ logwriter_
jdbctypes_
final java sql time gettime int column  throws sqlexception
switch  jdbctypes_
case java sql types time
return gettime column
case java sql types timestamp
return gettimefromtimestamp column
case java sql types char
return agent_ crossconverters_ gettimefromstring getchar column
case java sql types varchar
case java sql types longvarchar
return agent_ crossconverters_ gettimefromstring getvarchar column
default
throw new columntypeconversionexception agent_ logwriter_
jdbctypes_
final java sql timestamp gettimestamp int column  throws sqlexception
switch  jdbctypes_
case java sql types timestamp
return gettimestamp column
case java sql types date
return gettimestampfromdate column
case java sql types time
return gettimestampfromtime column
case java sql types char
return agent_ crossconverters_ gettimestampfromstring getchar column
case java sql types varchar
case java sql types longvarchar
return agent_ crossconverters_ gettimestampfromstring getvarchar column
default
throw new columntypeconversionexception agent_ logwriter_
jdbctypes_
final string getstring int column  throws sqlexception
try
string tempstring   null
switch  jdbctypes_
case java sql types char
return getchar column
case java sql types varchar
case java sql types longvarchar
return getvarchar column
case java sql types smallint
return string valueof get_smallint column
case java sql types integer
return string valueof get_integer column
case java sql types bigint
return string valueof get_bigint column
case java sql types real
return string valueof get_float column
case java sql types double
return string valueof get_double column
case java sql types decimal
// we could get better performance here if we didn't materialize the bigdecimal,
// but converted directly from decimal bytes to a string.
return string valueof get_decimal column
case java sql types date
return getstringfromdate column
case java sql types time
return getstringfromtime column
case java sql types timestamp
return getstringfromtimestamp column
case types binary
tempstring
agent_ crossconverters_ getstringfrombytes get_char_for_bit_data column
return  maxfieldsize_    0  ? tempstring
tempstring substring 0  java lang math min maxfieldsize_  tempstring length
case java sql types varbinary
case java sql types longvarbinary
tempstring
agent_ crossconverters_ getstringfrombytes get_varchar_for_bit_data column
return  maxfieldsize_    0  ? tempstring
tempstring substring 0  java lang math min maxfieldsize_  tempstring length
case java sql types blob
blob b    blob  getblobcolumn_ column  agent_
return agent_ crossconverters_ getstringfrombytes b getbytes 1   int  b length
case java sql types clob
clob c   getclobcolumn_ column  agent_
return c getsubstring 1   int  c length
default
throw new columntypeconversionexception agent_ logwriter_
jdbctypes_
catch   sqlexception se
throw new sqlexception se
final byte getbytes int column  throws sqlexception
try
switch  jdbctypes_
case java sql types binary
return get_char_for_bit_data column
case java sql types varbinary
case java sql types longvarbinary
return get_varchar_for_bit_data column
case java sql types blob
blob b    blob  getblobcolumn_ column  agent_
return b getbytes 1   int  b length
default
throw new columntypeconversionexception agent_ logwriter_
jdbctypes_
catch   sqlexception se
throw new sqlexception se
public final java io inputstream getbinarystream int column  throws sqlexception
try
switch  jdbctypes_
case java sql types binary
return new java io bytearrayinputstream get_char_for_bit_data column
case java sql types varbinary
case java sql types longvarbinary
return new java io bytearrayinputstream get_varchar_for_bit_data column
case java sql types blob
blob b    blob  getblobcolumn_ column  agent_
return b getbinarystream
default
throw new columntypeconversionexception agent_ logwriter_
jdbctypes_
catch   sqlexception se
throw new sqlexception se
public final java io inputstream getasciistream int column  throws sqlexception
try
switch  jdbctypes_
case java sql types clob
clob c   getclobcolumn_ column  agent_
return c getasciistream
case java sql types char
try
return new java io bytearrayinputstream getchar column  getbytes
catch  java io unsupportedencodingexception e
throw new sqlexception agent_ logwriter_
new clientmessageid  sqlstate unsupported_encoding
e
case java sql types varchar
case java sql types longvarchar
try
return new java io bytearrayinputstream getvarchar column  getbytes
catch  java io unsupportedencodingexception e
throw new sqlexception agent_ logwriter_
new clientmessageid  sqlstate unsupported_encoding
e
case java sql types binary
return new java io bytearrayinputstream get_char_for_bit_data column
case java sql types varbinary
case java sql types longvarbinary
return new java io bytearrayinputstream get_varchar_for_bit_data column
case java sql types blob
blob b    blob  getblobcolumn_ column  agent_
return b getbinarystream
default
throw new columntypeconversionexception agent_ logwriter_
jdbctypes_
catch   sqlexception se
throw new sqlexception se
public final java io inputstream getunicodestream int column  throws sqlexception
try
switch  jdbctypes_
case java sql types clob
clob c   getclobcolumn_ column  agent_
string s   c getsubstring 1l   int  c length
try
return new java io bytearrayinputstream s getbytes
catch  java io unsupportedencodingexception e
throw new sqlexception agent_ logwriter_
new clientmessageid  sqlstate unsupported_encoding
e
case java sql types char
try
return new java io bytearrayinputstream getchar column  getbytes
catch  java io unsupportedencodingexception e
throw new sqlexception agent_ logwriter_
new clientmessageid  sqlstate unsupported_encoding
e
case java sql types varchar
case java sql types longvarchar
try
return new java io bytearrayinputstream getvarchar column  getbytes
catch  java io unsupportedencodingexception e
throw new sqlexception agent_ logwriter_
new clientmessageid  sqlstate unsupported_encoding
e
case java sql types binary
return new java io bytearrayinputstream get_char_for_bit_data column
case java sql types varbinary
case java sql types longvarbinary
return new java io bytearrayinputstream get_varchar_for_bit_data column
case java sql types blob
blob b    blob  getblobcolumn_ column  agent_
return b getbinarystream
default
throw new columntypeconversionexception agent_ logwriter_
jdbctypes_
catch   sqlexception se
throw new sqlexception se
public final java io reader getcharacterstream int column  throws sqlexception
try
switch  jdbctypes_
case java sql types clob
clob c   getclobcolumn_ column  agent_
return c getcharacterstream
case java sql types char
return new java io stringreader getchar column
case java sql types varchar
case java sql types longvarchar
return new java io stringreader getvarchar column
case java sql types binary
try
return new java io inputstreamreader new java io bytearrayinputstream get_char_for_bit_data column
catch  java io unsupportedencodingexception e
throw new sqlexception agent_ logwriter_
new clientmessageid  sqlstate unsupported_encoding
e
case java sql types varbinary
case java sql types longvarbinary
try
return new java io inputstreamreader new java io bytearrayinputstream get_varchar_for_bit_data column
catch  java io unsupportedencodingexception e
throw new sqlexception agent_ logwriter_
new clientmessageid  sqlstate unsupported_encoding
e
case java sql types blob
try
blob b    blob  getblobcolumn_ column  agent_
return new java io inputstreamreader b getbinarystream
catch  java io unsupportedencodingexception e
throw new sqlexception agent_ logwriter_
new clientmessageid  sqlstate unsupported_encoding
e
default
throw new columntypeconversionexception agent_ logwriter_
jdbctypes_
catch   sqlexception se
throw new sqlexception se
public final java sql blob getblob int column  throws sqlexception
switch  jdbctypes_
case types blob
return getblobcolumn_ column  agent_
default
throw new columntypeconversionexception agent_ logwriter_
jdbctypes_
public final java sql clob getclob int column  throws sqlexception
switch  jdbctypes_
case types clob
return getclobcolumn_ column  agent_
default
throw new columntypeconversionexception agent_ logwriter_
jdbctypes_
public final java sql array getarray int column  throws sqlexception
throw new sqlexception agent_ logwriter_
new clientmessageid  sqlstate not_implemented
public final java sql ref getref int column  throws sqlexception
throw new sqlexception agent_ logwriter_
new clientmessageid  sqlstate not_implemented
public final object getobject int column  throws sqlexception
switch  jdbctypes_
case java sql types smallint
return new integer get_smallint column       see table 4 in jdbc 1 spec  pg  932 in jdbc book
case java sql types integer
return new integer get_integer column
case java sql types bigint
return new long get_bigint column
case java sql types real
return new float get_float column
case java sql types double
return new double get_double column
case java sql types decimal
return get_decimal column
case java sql types date
return getdate column
case java sql types time
return gettime column
case java sql types timestamp
return gettimestamp column
case java sql types char
return getchar column
case java sql types varchar
case java sql types longvarchar
return getvarchar column
case types binary
return get_char_for_bit_data column
case java sql types varbinary
case java sql types longvarbinary
return get_varchar_for_bit_data column
case java sql types blob
return getblobcolumn_ column  agent_
case java sql types clob
return getclobcolumn_ column  agent_
default
throw new columntypeconversionexception agent_ logwriter_
jdbctypes_
public final void allocatecharbuffer
// compute the maximum char length
int maxcharlength   0
for  int i   0  i < columns_  i
switch  jdbctypes_
case types char
case types varchar
case types longvarchar
if  fdocalength_ > maxcharlength
maxcharlength   fdocalength_
// allocate char buffer to accomodate largest result column
charbuffer_   new char
private final string getstringwithoutconvert int position  int actuallength  throws sqlexception
int start   position
int end   position   actuallength
int charcount   0
while  start < end
charbuffer_    char     databuffer_   0xff  << 8     databuffer_   0xff
start    2
return new string charbuffer_  0  charcount
public void nulldataforgc
databuffer_   null
databufferstream_   null
columndataposition_   null
columndatacomputedlength_   null
columndatapositioncache_   null
columndatalengthcache_   null
columndataisnullcache_   null
jdbctypes_   null
nullable_   null
charsetname_   null
this ccsid_   null
isupdatedeleteholecache_   null
isnull_   null
fdocalength_   null
charbuffer_   null
private final int getcolumnprecision int column
return   fdocalength_ >> 8    0xff
private final int getcolumnscale int column
return  fdocalength_   0xff
// only used by sqlca.getmessage() when using a locale encoding
// to convert errror message text instead of relying on server encoding as usual.
final byte getbytesfromvarchar int column  throws sqlexception
byte bytes
bytes   new byte   2]
system arraycopy databuffer_  columndataposition_   2  bytes  0  bytes length
return bytes