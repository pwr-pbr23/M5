/*
derby - class org.apache.derby.jdbc.xastatementcontrol
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby jdbc
import org apache derby iapi jdbc brokeredconnection
import org apache derby iapi jdbc brokeredstatementcontrol
import org apache derby iapi jdbc brokeredstatement
import org apache derby iapi jdbc brokeredpreparedstatement
import org apache derby iapi jdbc brokeredcallablestatement
import org apache derby iapi jdbc enginestatement
import org apache derby impl jdbc embedconnection
import org apache derby impl jdbc embedresultset
import org apache derby impl jdbc embedstatement
import org apache derby impl jdbc embedpreparedstatement
import java sql
/**
the statement returned by an connection returned by a xaconnection
needs to float across the underlying real connections. we do this by implementing
a wrapper statement.
*/
final class xastatementcontrol implements brokeredstatementcontrol
/**
*/
private final embedxaconnection	xaconnection
private final brokeredconnection	applicationconnection
brokeredstatement		applicationstatement
private embedconnection	realconnection
private statement			realstatement
private preparedstatement	realpreparedstatement
private callablestatement	realcallablestatement
private xastatementcontrol embedxaconnection xaconnection
this xaconnection   xaconnection
this realconnection   xaconnection realconnection
this applicationconnection   xaconnection currentconnectionhandle
xastatementcontrol embedxaconnection xaconnection
statement realstatement  throws sqlexception
this xaconnection
this realstatement   realstatement
this applicationstatement   applicationconnection newbrokeredstatement this
embedstatement  realstatement  setapplicationstatement
applicationstatement
xastatementcontrol embedxaconnection xaconnection
preparedstatement realpreparedstatement
string sql  object generatedkeys  throws sqlexception
this xaconnection
this realpreparedstatement   realpreparedstatement
this applicationstatement   applicationconnection newbrokeredstatement this  sql  generatedkeys
embedstatement  realpreparedstatement  setapplicationstatement
applicationstatement
xastatementcontrol embedxaconnection xaconnection
callablestatement realcallablestatement
string sql  throws sqlexception
this xaconnection
this realcallablestatement   realcallablestatement
this applicationstatement   applicationconnection newbrokeredstatement this  sql
embedstatement  realcallablestatement  setapplicationstatement
applicationstatement
public statement getrealstatement   throws sqlexception
//
if  applicationconnection    xaconnection currentconnectionhandle
// application connection is the same.
if  realconnection    xaconnection realconnection
return realstatement
// if we switched back to a local connection, and the first access is through
// a non-connection object (e.g. statement then realconnection will be null)
if  xaconnection realconnection    null
// force the connection
xaconnection getrealconnection
// underlying connection has changed.
// create new statement
statement newstatement   applicationstatement createduplicatestatement xaconnection realconnection  realstatement
embedstatement  realstatement  transferbatch  embedstatement  newstatement
try
realstatement close
catch  sqlexception sqle
realstatement   newstatement
realconnection   xaconnection realconnection
embedstatement  realstatement  setapplicationstatement
applicationstatement
else
// application connection is different, therefore the outer application
// statement is closed, so just return the realstatement. it should be
// closed by virtue of its application connection being closed.
return realstatement
public preparedstatement getrealpreparedstatement   throws sqlexception
//
if  applicationconnection    xaconnection currentconnectionhandle
// application connection is the same.
if  realconnection    xaconnection realconnection
return realpreparedstatement
// if we switched back to a local connection, and the first access is through
// a non-connection object (e.g. statement then realconnection will be null)
if  xaconnection realconnection    null
// force the connection
xaconnection getrealconnection
// underlying connection has changed.
// create new preparedstatement
preparedstatement newpreparedstatement
brokeredpreparedstatement  applicationstatement  createduplicatestatement xaconnection realconnection  realpreparedstatement
// ((embedstatement) realpreparedstatement).transferbatch((embedstatement) newpreparedstatement);
embedpreparedstatement  realpreparedstatement  transferparameters  embedpreparedstatement  newpreparedstatement
try
realpreparedstatement close
catch  sqlexception sqle
realpreparedstatement   newpreparedstatement
realconnection   xaconnection realconnection
embedstatement  realpreparedstatement  setapplicationstatement
applicationstatement
else
// application connection is different, therefore the outer application
// statement is closed, so just return the realstatement. it should be
// closed by virtue of its application connection being closed.
return realpreparedstatement
public callablestatement getrealcallablestatement   throws sqlexception
if  applicationconnection    xaconnection currentconnectionhandle
// application connection is the same.
if  realconnection    xaconnection realconnection
return realcallablestatement
// if we switched back to a local connection, and the first access is through
// a non-connection object (e.g. statement then realconnection will be null)
if  xaconnection realconnection    null
// force the connection
xaconnection getrealconnection
// underlying connection has changed.
// create new preparedstatement
callablestatement newcallablestatement
brokeredcallablestatement  applicationstatement  createduplicatestatement xaconnection realconnection  realcallablestatement
embedstatement  realcallablestatement  transferbatch  embedstatement  newcallablestatement
try
realcallablestatement close
catch  sqlexception sqle
realcallablestatement   newcallablestatement
realconnection   xaconnection realconnection
embedstatement  realcallablestatement  setapplicationstatement
applicationstatement
else
// application connection is different, therefore the outer application
// statement is closed, so just return the realstatement. it should be
// closed by virtue of its application connection being closed.
return realcallablestatement
/**
* don't need to wrap the resultset but do need to update its
* application statement reference to be the one the application
* used to create the resultset.
*/
public resultset wrapresultset statement s  resultset rs
if  rs    null
embedresultset  rs  setapplicationstatement s
return rs
/**
can cursors be held across commits.
*/
public int checkholdcursors int holdability  throws sqlexception
return xaconnection checkholdcursors holdability  true