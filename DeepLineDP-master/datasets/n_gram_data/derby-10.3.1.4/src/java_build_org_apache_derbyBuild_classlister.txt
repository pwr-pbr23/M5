/*
derby - class org.apache.derbybuild.classlister
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derbybuild
import org apache derby iapi services classfile
import org apache derby iapi util bytearray
import java util
import java util zip
import java io
import java io
/**
a tool that generates a list of required classes from a
set of properties files. the value of any property within a property
file that starts with 'derby.module.' is taken as a class name.
that class name and all the clases it requires are listed to
system.out, to facilitate building a zip file. classes that
start with 'java.' or 'javax.' are not listed and are not
checked for dependent classes.
<p>
if the class name starts with 'com.ibm.db2j.' then a messages.properties
file is searched for corresponding to that class, if one exists then
is is added to the list of files printed.
<p>
the search path for the classes is $classpath
<p>
if the system property cloudscapeonly is set to true then only classes
and message.properties files are listed that start with com.ibm.db2j.
<p>
the output for each class or properties file is a relative file
name that uses '/' as the file separator. e.g.
com/ibm/db2j/core/setup.class
<p>
the output order of the classes & files is random.
<p>
usage: java [-dignoreweblogic=true] [-dverbose=true] [-dcloudscapeonly=true] [-druntimeonly=true]
[-ddb2jtools=true]
[-dportingonly=true] [-doutputfile=<filename>] org.apache.derbybuild.classlister
property_file [ property_file ... ]
**/
public class classlister
protected string sets
protected hashtable foundclasses
//protected classutilitiesfactory cuf;
protected boolean cloudscapeonly   false
protected boolean portingonly   false
protected boolean ignoreweblogic   false
protected boolean verbose   false
protected boolean skipjava   true
protected boolean skipjavax   true
protected boolean skiporg   true
protected boolean skipinformix   true
protected boolean skipdb2   true
protected boolean skipdb2e   true
protected boolean skipsun   true
protected boolean showall   false
protected boolean keeprolling   false
protected boolean showone   false
protected hashtable masterclasslist   new hashtable
protected string classpath   null
protected string outputfile
protected hashtable classpathhash
protected int indent   0
protected int errorcount   0
protected printwriter pwout
protected printstream psout
protected boolean db2jtools
protected boolean db2jdrda
protected boolean keepdependencyhistory
protected static final string propfiles
public static void main string args  throws ioexception
classlister me   new classlister
me sets   args
me run
if  me errorcount > 0
system out println me errorcount
system exit 1
}
}
public classlister
cloudscapeonly   boolean getboolean
portingonly   boolean getboolean
ignoreweblogic   boolean getboolean
verbose   boolean getboolean
skipjava     boolean getboolean
skipjavax     boolean getboolean
skiporg     boolean getboolean
showall   boolean getboolean
showone   boolean getboolean
keeprolling   boolean getboolean
outputfile   system getproperty
db2jtools   boolean getboolean
db2jdrda   boolean getboolean
keepdependencyhistory   showone    showall
}
public void run
//system.out.println("outputfile: " + outputfile);
try
file outfile   new file outputfile
pwout   new printwriter  new bufferedwriter
new filewriter outfile getpath     10000   true
}
catch  ioexception ioe
system out println ioe
system exit 1
}
loadclasspath
//cuf = new modifyclasses();
foundclasses   new hashtable 3000  0 8f
for  int i   0  i < sets length  i
// if a set name ends in '.class' then take it as a class
// name of the form com.acme.foo.myclass.class.
try
string s   sets
if  s endswith
finddependencies s substring 0  s length     6
else
fileinputstream fis   new fileinputstream s
properties pset   new properties
pset load fis
findclasses pset
}
}
catch  ioexception ioe
system err println ioe tostring
system exit 1
}
}
if  pwout    null
system out println
system exit 1
}
for  enumeration e   foundclasses keys    e hasmoreelements
string name    string  e nextelement
string type    string  foundclasses get name
if  type equals
if  ignoreweblogic
if  name startswith
continue
}
}
if  iscloudscapecode name
if  name startswith
if  cloudscapeonly
continue
else
if  portingonly
continue
}
else
if  cloudscapeonly    portingonly
continue
}
pwout println name replace
}
else
// is a file name
if  name startswith
if  portingonly
continue
}
else
if  cloudscapeonly    portingonly
continue
}
pwout println name
}
}
if  showall
showallitems
}
if  showone
showallitemsonelevel
}
}
protected void findclasses properties pset  throws ioexception
for  enumeration e   pset propertynames    e hasmoreelements
string key    string  e nextelement
if  key startswith
if  verbose
pwout println pset getproperty key
}
finddependencies pset getproperty key
}
}
}
protected void loadclasspath
classpathhash   new hashtable
try
string classpathstring   system getproperty
if  verbose
pwout println     classpathstring
stringtokenizer st   new stringtokenizer classpathstring  file pathseparator
int entries   st counttokens
classpath   new string
for  int i   0  i < entries  i
classpath   st nexttoken
}
}
catch  securityexception se
pwout println
system exit 1
}
for  int i   0  i < classpath length  i
string pathentry   classpath
if  pathentry touppercase java util locale english  endswith
pathentry touppercase java util locale english  endswith
zipfile zipfile   null
try
zipfile   new zipfile pathentry replace    file separatorchar
}
catch  ioexception ioe
// can't do anything about it; zipfile doesn't exists
// it can happen if the person sticks a directory called
// foo.zip in the classpath or foo.zip doesn't exist as
// a file
}
if  zipfile    null
classpathhash put pathentry  zipfile
}
else
if  verbose
pwout println     pathentry
}
}
}
else
file file   new file pathentry
if  file exists      file isdirectory
classpathhash put pathentry  file
}
else
if  verbose
pwout println     pathentry
}
}
}
}
}
protected inputstream locateclass string classname  boolean beverbose
if  classname startswith
classname   classname substring 1
}
if  beverbose
pwout println     classname
}
if  classpath    null
loadclasspath
}
for  int i   0  i < classpath length  i
string pathentry   classpath
object hash   classpathhash get pathentry
if  hash    null
if  hash instanceof zipfile
try
zipfile zipfile    zipfile  hash
zipentry entry   zipfile getentry classname
if  entry    null
inputstream is   zipfile getinputstream entry
datainputstream dis  new datainputstream new bufferedinputstream is
return dis
}
}
catch  ioexception ioe
if  beverbose
pwout println
pwout println ioe
}
}
else if  hash instanceof file
file file   new file  file hash  classname replace    file separatorchar
if  beverbose
pwout println     file getname
}
if  file exists
if  beverbose
pwout println
}
try
fileinputstream fis   new fileinputstream file
return new bufferedinputstream fis  8192
}
catch  ioexception ioe
if  beverbose
pwout println
pwout println ioe
return null
}
}
}
}
}
//
}
// could not find it
if  beverbose
pwout println
}
return null
}
protected void finddependencies string classname  throws ioexception
indent
try
if  classname startswith       skipjava
pwout println     classname
return
}
if  classname startswith       skipjavax
//system.out.println("skipping javax " + classname);
return
}
if  classname startswith       skipsun
//system.out.println("skipping sun " + classname);
return
}
if  classname startswith       skiporg
// allow opensource org.apache.derby classes
if   classname startswith
//system.out.println("skipping org " + classname);
return
}
}
if  classname startswith       skipinformix
//system.out.println("skipping informix " + classname);
return
}
if  classname startswith       skipdb2e
//system.out.println("skipping db2e " + classname);
return
}
if  classname startswith       skipdb2
//system.out.println("skipping db2 common " + classname);
return
}
if  ignoreweblogic
if  classname startswith
return
}
}
if  db2jtools    db2jdrda
// for tools skip classes that are part of the db2j product api
// they should be pulled in from cs.jar or any client.jar
if
classname startswith
classname startswith
classname startswith
classname startswith
classname startswith
classname startswith
return
}
}
// drda explicitly brings in some database engine classes.
// they must be picke dup from cs.jar and not put in
// the network server jar.
if  db2jdrda
if
classname startswith
classname startswith
classname startswith
classname startswith
return
}
}
// already seen class
if  foundclasses get classname     null
return
if  verbose
for  int i  0  i < indent  i
system out print
}
system out println classname
}
/*
org.apache.derby.iapi.reference.classname &
registeredformatids has a list of all registered classes, if we pull this in then
we will pull in the complete set of classes. so we add this to our list but don't
dependency check it.
*/
boolean dontcheckdependencies   false
/*
if (classname.equals("org.apache.derby.iapi.reference.classname") ||
classname.equals("org.apache.derby.iapi.services.io.registeredformatids")) {
dontcheckdependencies = true;
}
*/
try
hashtable localhashtable   null
if  keepdependencyhistory
localhashtable    hashtable  masterclasslist get classname
if  localhashtable    null
localhashtable   new hashtable
masterclasslist put classname  localhashtable
}
}
foundclasses put classname
if  dontcheckdependencies
return
string filename       classname replace
inputstream is   locateclass filename  false
if  is    null
pwout println     filename
if   keeprolling
system exit 1
}
else
errorcount
}
}
//byte[] classdata = new byte[is.available()];
//is.read(classdata);
classinvestigator ch   classinvestigator load is
is close
for  enumeration e   ch   getclassinfo     referencedclasses    e hasmoreelements
string x    string  e nextelement
// skip microsoft classes
if  x startswith
continue
}
if   org apache derby iapi services sanity sanitymanager debug
if  x indexof        1
boolean printsanitywarning   true
int ld   classname lastindexof
if  ld     1
if  classname lastindexof       ld   1
printsanitywarning   false
else if  classname lastindexof       ld   1
printsanitywarning   false
else if  classname lastindexof       ld   1
printsanitywarning   false
else if  classname lastindexof       ld   1
printsanitywarning   false
else if  classname endswith
printsanitywarning   false
}
if  printsanitywarning
system out println     filename
}
}
if  keepdependencyhistory     localhashtable get x     null
localhashtable put x
}
finddependencies x
}
}
catch  nullpointerexception npe
pwout println
pwout println classname
npe printstacktrace
if   keeprolling
system exit 1
}
errorcount
}
// look for properties only with cloudscape code ...
if   iscloudscapecode classname
return
// the following block of code checks the package of each class
// scanned to see if there is a corresponding properties file
// from propfiles and adds it to the list of found classes.
// derbytools.jar should not contain any of these files, so skip
// for that jar. see also derby-1537.
if   db2jtools
string packagename   classname substring 0  classname lastindexof      1
for  int i   0  i < propfiles length  i
string filename       packagename replace         propfiles
if  foundclasses get filename     null
continue
inputstream is   getclass   getresourceasstream filename
if  is    null
continue
is close
foundclasses put filename substring 1
}
}
finally
indent
}
}
protected boolean iscloudscapecode string name
return name startswith
name startswith
name startswith
name startswith
}
protected void showallitems
enumeration e   masterclasslist keys
pwout println
while  e hasmoreelements
string kid    string  e nextelement
pwout println kid
hashtable scoreboard   new hashtable
hashtable grandkids    hashtable  masterclasslist get kid
unrollhashtable    grandkids  scoreboard  1
}
}
protected void showallitemsonelevel
pwout println
pwout println
pwout println
enumeration e   masterclasslist keys
while  e hasmoreelements
string key    string  e nextelement
pwout println key
hashtable h    hashtable  masterclasslist get key
enumeration e2   h keys
hashtable h2   new hashtable
while  e2 hasmoreelements
string key2    string  e2 nextelement
pwout println     key2
}
}
}
protected void unrollhashtable  string parent  hashtable current  hashtable scoreboard  int indentlevel
string indentstring
enumeration e   current keys
string key   null
while  e hasmoreelements
key    string  e nextelement
if  key equals parent
continue
}
pwout print indentlevel
integer value    integer  scoreboard get key
if  value    null
for  int i   0  i < indentlevel  i
pwout print indentstring
}
pwout println key       value
return
}
for  int i   0  i < indentlevel  i
pwout print indentstring
}
pwout println key
hashtable currentschildren    hashtable  masterclasslist get key
scoreboard put key  new integer indentlevel
unrollhashtable key  currentschildren  scoreboard   indentlevel 1
scoreboard put key  new integer indentlevel
}
}
}