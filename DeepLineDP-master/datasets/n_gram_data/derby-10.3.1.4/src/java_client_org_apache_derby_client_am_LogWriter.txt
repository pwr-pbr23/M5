/*
derby - class org.apache.derby.client.am.logwriter
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby client am
import java sql sqlexception
import java util enumeration
import java util properties
import java security accesscontroller
import javax naming namingexception
import javax naming refaddr
import javax naming reference
import org apache derby jdbc clientbasedatasource
import org apache derby jdbc clientdatasource
import org apache derby shared common reference attribute
import org apache derby shared common reference sqlstate
public class logwriter
protected java io printwriter printwriter_
protected int tracelevel_
private boolean driverconfigurationhasbeenwrittentojdbc1stream_   false
private boolean driverconfigurationhasbeenwrittentojdbc2stream_   false
// it is assumed that this constructor is never called when logwriter is null.
public logwriter java io printwriter printwriter  int tracelevel
printwriter_   printwriter
tracelevel_   tracelevel
final protected boolean loggingenabled int tracelevel
// it is an invariant that the printwriter is never null, so remove the
return printwriter_    null     tracelevel   tracelevel_     0
final protected boolean tracesuspended
return org apache derby client am configuration tracesuspended__
// when garbage collector doesn't kick in in time
// to close file descriptors, "too many open files"
// exception may occur (currently found on linux).
// to minimize the chance of this problem happening,
// the print writer needs to be closed (after this
// dnc log writer is closed) when each connection has
// its own trace file (i.e. tracedirectory is specified).
public boolean printwriterneedstobeclosed_
void close
if  printwriterneedstobeclosed_
printwriter_ close
printwriterneedstobeclosed_   false
// printwriter_ = null; // help gc.
// ---------------------------------------------------------------------------
public void dncprintln string s
synchronized  printwriter_
printwriter_ println     s
printwriter_ flush
private void dncprint string s
synchronized  printwriter_
printwriter_ print     s
printwriter_ flush
private void dncprintln string header  string s
synchronized  printwriter_
printwriter_ println     header       s
printwriter_ flush
private void dncprint string header  string s
synchronized  printwriter_
printwriter_ print     header       s
printwriter_ flush
// ------------------------ tracepoint api -----------------------------------
public void tracepoint string component  int tracepoint  string message
if  tracesuspended
return
dncprintln component
system currenttimemillis
thread currentthread   getname
tracepoint
message
public void tracepoint string component  int tracepoint
string classcontext  string methodcontext
if  tracesuspended
return
string staticcontexttracepointrecord
component
system currenttimemillis
thread currentthread   getname
tracepoint
classcontext       methodcontext
dncprintln staticcontexttracepointrecord
public void tracepoint string component  int tracepoint
object instance  string classcontext  string methodcontext
if  tracesuspended
return
string instancecontexttracepointrecord
component
system currenttimemillis
thread currentthread   getname
tracepoint
classcontext       integer tohexstring instance hashcode          methodcontext
dncprintln instancecontexttracepointrecord
public void tracepoint string component  int tracepoint
string classcontext  string methodcontext
java util map memory
if  tracesuspended
return
string staticcontexttracepointrecord
component
system currenttimemillis
thread currentthread   getname
tracepoint
classcontext       methodcontext
dncprintln staticcontexttracepointrecord   getmemorymapdisplay memory
public void tracepoint string component  int tracepoint
object instance  string classcontext  string methodcontext
java util map memory
if  tracesuspended
return
string instancecontexttracepointrecord
component
system currenttimemillis
thread currentthread   getname
tracepoint
classcontext       integer tohexstring instance hashcode          methodcontext
dncprintln instancecontexttracepointrecord   getmemorymapdisplay memory
private string getmemorymapdisplay java util map memory
return memory tostring       need to loop thru all keys in the map and print values
// ------------- api entry and exit trace methods ----------------------------
// entry and exit are be traced separately because input arguments need
// to be traced before any potential exception can occur.
// exit tracing is only performed on methods that return values.
// entry tracing is only performed on methods that update state,
// so entry tracing is not performed on simple getter methods.
// we could decide in the future to restrict entry tracing only to methods with input arguments.
private void traceexternalmethod object instance  string classname  string methodname
if  tracesuspended
return
dncprint buildexternalmethodheader instance  classname   methodname
private void traceexternaldeprecatedmethod object instance  string classname  string methodname
if  tracesuspended
return
dncprint buildexternalmethodheader instance  classname       methodname
private string buildexternalmethodheader object instance  string classname
return
system currenttimemillis
thread currentthread   getname
classname       integer tohexstring instance hashcode
private string getclassnameofinstanceiftraced object instance
if  instance    null     this prevents npe from instance getclass   used below
return null
else if  instance instanceof connection    loggingenabled clientdatasource trace_connection_calls
return
else if  instance instanceof resultset    loggingenabled clientdatasource trace_result_set_calls
return
else if  instance instanceof callablestatement    loggingenabled clientdatasource trace_statement_calls
return
else if  instance instanceof preparedstatement    loggingenabled clientdatasource trace_statement_calls
return
else if  instance instanceof statement    loggingenabled clientdatasource trace_statement_calls
return
// not yet externalizing blob tracing, except for trace_all
else if  instance instanceof blob    loggingenabled clientdatasource trace_all      add a trace level for lobs
return
// not yet externalizing clob tracing, except for trace_all
else if  instance instanceof clob    loggingenabled clientdatasource trace_all      add a trace level for bobs
return
// not yet externalizing dbmd catalog call tracing, except for trace_all
else if  instance instanceof databasemetadata    loggingenabled clientdatasource trace_all      add a trace level for dbmd ??
return
// we don't use instanceof javax.transaction.xaresource to avoid dependency on j2ee.jar
else if  loggingenabled clientdatasource trace_xa_calls
instance getclass   getname   startswith
return
else if  loggingenabled clientdatasource trace_all
instance getclass   getname   equals
return
else if  loggingenabled clientdatasource trace_all
instance getclass   getname   equals
return
else if  loggingenabled clientdatasource trace_all
instance getclass   getname   equals
return
else if  loggingenabled clientdatasource trace_all
instance getclass   getname   equals
return
else if  loggingenabled clientdatasource trace_all
instance getclass   getname   equals
return
else
return instance getclass   getname
// --------------------------- method exit tracing --------------------------
public void traceexit object instance  string methodname  object returnvalue
if  tracesuspended
return
string classname   getclassnameofinstanceiftraced instance
if  classname    null
return
synchronized  printwriter_
traceexternalmethod instance  classname  methodname
printwriter_ println     returnvalue
printwriter_ flush
public void tracedeprecatedexit object instance  string methodname  object returnvalue
if  tracesuspended
return
string classname   getclassnameofinstanceiftraced instance
if  classname    null
return
synchronized  printwriter_
traceexternaldeprecatedmethod instance  classname  methodname
printwriter_ println     returnvalue
printwriter_ flush
public void traceexit object instance  string methodname  resultset resultset
if  tracesuspended
return
string returnvalue    resultset    null  ?         integer tohexstring resultset hashcode
traceexit instance  methodname  returnvalue
public void traceexit object instance  string methodname  callablestatement returnvalue
if  tracesuspended
return
traceexit instance  methodname      integer tohexstring returnvalue hashcode
public void traceexit object instance  string methodname  preparedstatement returnvalue
if  tracesuspended
return
traceexit instance  methodname      integer tohexstring returnvalue hashcode
public void traceexit object instance  string methodname  statement returnvalue
if  tracesuspended
return
traceexit instance  methodname      integer tohexstring returnvalue hashcode
public void traceexit object instance  string methodname  blob blob
if  tracesuspended
return
string returnvalue    blob    null  ?         integer tohexstring blob hashcode
traceexit instance  methodname  returnvalue
public void traceexit object instance  string methodname  clob clob
if  tracesuspended
return
string returnvalue    clob    null  ?         integer tohexstring clob hashcode
traceexit instance  methodname  returnvalue
public void traceexit object instance  string methodname  databasemetadata returnvalue
if  tracesuspended
return
traceexit instance  methodname      integer tohexstring returnvalue hashcode
public void traceexit object instance  string methodname  connection returnvalue
if  tracesuspended
return
traceexit instance  methodname      integer tohexstring returnvalue hashcode
public void traceexit object instance  string methodname  columnmetadata returnvalue
if  tracesuspended
return
traceexit instance  methodname       returnvalue    null ? integer tohexstring returnvalue hashcode      null
public void traceexit object instance  string methodname  byte returnvalue
if  tracesuspended
return
traceexit instance  methodname  utils getstringfrombytes returnvalue
public void traceexit object instance  string methodname  int returnvalue
if  tracesuspended
return
traceexit instance  methodname  utils getstringfromints returnvalue
public void tracedeprecatedexit object instance  string methodname  byte returnvalue
if  tracesuspended
return
tracedeprecatedexit instance  methodname  utils getstringfrombytes returnvalue
public void traceexit object instance  string methodname  byte returnvalue
if  tracesuspended
return
traceexit instance  methodname      integer tohexstring returnvalue   0xff
public void traceexit object instance  string methodname  int returnvalue
if  tracesuspended
return
traceexit instance  methodname  string valueof returnvalue
public void traceexit object instance  string methodname  boolean returnvalue
if  tracesuspended
return
traceexit instance  methodname  string valueof returnvalue
public void traceexit object instance  string methodname  long returnvalue
if  tracesuspended
return
traceexit instance  methodname  string valueof returnvalue
public void traceexit object instance  string methodname  float returnvalue
if  tracesuspended
return
traceexit instance  methodname  string valueof returnvalue
public void traceexit object instance  string methodname  double returnvalue
if  tracesuspended
return
traceexit instance  methodname  string valueof returnvalue
// --------------------------- method entry tracing --------------------------
private void traceentryallargs object instance  string methodname  string arglist
if  tracesuspended
return
string classname   getclassnameofinstanceiftraced instance
if  classname    null
return
synchronized  printwriter_
traceexternalmethod instance  classname  methodname
printwriter_ println     arglist
printwriter_ flush
private void tracedeprecatedentryallargs object instance  string methodname  string arglist
if  tracesuspended
return
string classname   getclassnameofinstanceiftraced instance
if  classname    null
return
synchronized  printwriter_
traceexternaldeprecatedmethod instance  classname  methodname
printwriter_ println     arglist
printwriter_ flush
// ---------------------- trace entry of methods w/ no args ------------------
public void traceentry object instance  string methodname
if  tracesuspended
return
traceentryallargs instance  methodname
// ---------------------- trace entry of methods w/ 1 arg --------------------
public void traceentry object instance  string methodname  object argument
if  tracesuspended
return
traceentryallargs instance  methodname
argument
public void traceentry object instance  string methodname  boolean argument
if  tracesuspended
return
traceentryallargs instance  methodname
argument
public void traceentry object instance  string methodname  int argument
if  tracesuspended
return
traceentryallargs instance  methodname
argument
public void tracedeprecatedentry object instance  string methodname  int argument
if  tracesuspended
return
tracedeprecatedentryallargs instance  methodname
argument
public void tracedeprecatedentry object instance  string methodname  object argument
if  tracesuspended
return
tracedeprecatedentryallargs instance  methodname
argument
// ---------------------- trace entry of methods w/ 2 args -------------------
public void traceentry object instance  string methodname  object arg1  object arg2
if  tracesuspended
return
traceentryallargs instance  methodname
arg1       arg2
public void traceentry object instance  string methodname  int arg1  object arg2
if  tracesuspended
return
traceentryallargs instance  methodname
arg1       arg2
public void traceentry object instance  string methodname  int arg1  byte arg2
if  tracesuspended
return
traceentryallargs instance  methodname
arg1       utils getstringfrombytes arg2
public void tracedeprecatedentry object instance  string methodname  int arg1  int arg2
if  tracesuspended
return
tracedeprecatedentryallargs instance  methodname
arg1       arg2
public void tracedeprecatedentry object instance  string methodname  object arg1  int arg2
if  tracesuspended
return
tracedeprecatedentryallargs instance  methodname
arg1       arg2
public void traceentry object instance  string methodname  int arg1  boolean arg2
if  tracesuspended
return
traceentryallargs instance  methodname
arg1       arg2
public void traceentry object instance  string methodname  int arg1  byte arg2
if  tracesuspended
return
traceentryallargs instance  methodname
arg1       integer tohexstring arg2   0xff
public void traceentry object instance  string methodname  int arg1  short arg2
if  tracesuspended
return
traceentryallargs instance  methodname
arg1       arg2
public void traceentry object instance  string methodname  int arg1  int arg2
if  tracesuspended
return
traceentryallargs instance  methodname
arg1       arg2
public void traceentry object instance  string methodname  int arg1  long arg2
if  tracesuspended
return
traceentryallargs instance  methodname
arg1       arg2
public void traceentry object instance  string methodname  int arg1  float arg2
if  tracesuspended
return
traceentryallargs instance  methodname
arg1       arg2
public void traceentry object instance  string methodname  int arg1  double arg2
if  tracesuspended
return
traceentryallargs instance  methodname
arg1       arg2
public void traceentry object instance  string methodname  object arg1  boolean arg2
if  tracesuspended
return
traceentryallargs instance  methodname
arg1       arg2
public void traceentry object instance  string methodname  object arg1  byte arg2
if  tracesuspended
return
traceentryallargs instance  methodname
arg1       integer tohexstring arg2   0xff
public void traceentry object instance  string methodname  object arg1  short arg2
if  tracesuspended
return
traceentryallargs instance  methodname
arg1       arg2
public void traceentry object instance  string methodname  object arg1  int arg2
if  tracesuspended
return
traceentryallargs instance  methodname
arg1       arg2
public void traceentry object instance  string methodname  object arg1  long arg2
if  tracesuspended
return
traceentryallargs instance  methodname
arg1       arg2
public void traceentry object instance  string methodname  object arg1  float arg2
if  tracesuspended
return
traceentryallargs instance  methodname
arg1       arg2
public void traceentry object instance  string methodname  object arg1  double arg2
if  tracesuspended
return
traceentryallargs instance  methodname
arg1       arg2
// ---------------------- trace entry of methods w/ 3 args -------------------
public void traceentry object instance  string methodname
object arg1  object arg2  object arg3
if  tracesuspended
return
traceentryallargs instance  methodname
arg1       arg2       arg3
public void traceentry object instance  string methodname
int arg1  object arg2  object arg3
if  tracesuspended
return
traceentryallargs instance  methodname
arg1       arg2       arg3
public void traceentry object instance  string methodname
object arg1  object arg2  int arg3
if  tracesuspended
return
traceentryallargs instance  methodname
arg1       arg2       arg3
public void traceentry object instance  string methodname
int arg1  object arg2  int arg3
if  tracesuspended
return
traceentryallargs instance  methodname
arg1       arg2       arg3
public void tracedeprecatedentry object instance  string methodname
int arg1  object arg2  int arg3
if  tracesuspended
return
traceentryallargs instance  methodname
arg1       arg2       arg3
public void traceentry object instance  string methodname
int arg1  int arg2  object arg3
if  tracesuspended
return
traceentryallargs instance  methodname
arg1       arg2       arg3
public void traceentry object instance  string methodname
int arg1  int arg2  int arg3
if  tracesuspended
return
traceentryallargs instance  methodname
arg1       arg2       arg3
public void traceentry object instance  string methodname
object arg1  int arg2  int arg3
if  tracesuspended
return
traceentryallargs instance  methodname
arg1       arg2       arg3
public void traceentry object instance  string methodname
object arg1  int arg2  object arg3
if  tracesuspended
return
traceentryallargs instance  methodname
arg1       arg2       arg3
public void traceentry object instance  string methodname
object arg1  boolean arg2  boolean arg3
if  tracesuspended
return
traceentryallargs instance  methodname
arg1       arg2       arg3
public void traceentry object instance  string methodname
object arg1  boolean arg2  int arg3
if  tracesuspended
return
traceentryallargs instance  methodname
arg1       arg2       arg3
// ---------------------- trace entry of methods w/ 4 args -------------------
public void traceentry object instance  string methodname
object arg1  object arg2  object arg3  object arg4
if  tracesuspended
return
traceentryallargs instance  methodname
arg1       arg2       arg3       arg4
public void traceentry object instance  string methodname
int arg1  object arg2  object arg3  object arg4
if  tracesuspended
return
traceentryallargs instance  methodname
arg1       arg2       arg3       arg4
public void traceentry object instance  string methodname
int arg1  object arg2  int arg3  int arg4
if  tracesuspended
return
traceentryallargs instance  methodname
arg1       arg2       arg3       arg4
public void traceentry object instance  string methodname
object arg1  int arg2  int arg3  int arg4
if  tracesuspended
return
traceentryallargs instance  methodname
arg1       arg2       arg3       arg4
public void traceentry object instance  string methodname
object arg1  object arg2  int arg3  int arg4
if  tracesuspended
return
traceentryallargs instance  methodname
arg1       arg2       arg3       arg4
// ---------------------- trace entry of methods w/ 5 args -------------------
public void traceentry object instance  string methodname
object arg1  object arg2  object arg3  int arg4  boolean arg5
if  tracesuspended
return
traceentryallargs instance  methodname
arg1       arg2       arg3       arg4       arg5
public void traceentry object instance  string methodname
object arg1  object arg2  object arg3  boolean arg4  boolean arg5
if  tracesuspended
return
traceentryallargs instance  methodname
arg1       arg2       arg3       arg4       arg5
// ---------------------- trace entry of methods w/ 6 args -------------------
public void traceentry object instance  string methodname
object arg1  object arg2  object arg3  object arg4  object arg5  object arg6
if  tracesuspended
return
traceentryallargs instance  methodname
arg1       arg2       arg3       arg4       arg5       arg6
// ---------------------------tracing exceptions and warnings-----------------
public void tracediagnosable sqlexception e
if  tracesuspended
return
if   loggingenabled clientdatasource trace_diagnostics
return
synchronized  printwriter_
dncprintln
exceptionformatter printtrace e  printwriter_     true      true means return tokens only
dncprintln
public void tracediagnosable java sql sqlexception e
if  tracesuspended
return
if   loggingenabled clientdatasource trace_diagnostics
return
synchronized  printwriter_
dncprintln
exceptionformatter printtrace e  printwriter_     true      true means return tokens only
dncprintln
public void tracediagnosable javax transaction xa xaexception e
if  tracesuspended
return
if   loggingenabled clientdatasource trace_diagnostics
return
synchronized  printwriter_
dncprintln
exceptionformatter printtrace e  printwriter_
dncprintln
// ------------------------ meta data tracing --------------------------------
public void traceparametermetadata statement statement  columnmetadata columnmetadata
if  tracesuspended
return
if   loggingenabled clientdatasource trace_parameter_meta_data     columnmetadata    null
return
synchronized  printwriter_
string header       integer tohexstring columnmetadata hashcode
try
dncprintln header
dncprintln header      integer tohexstring statement hashcode
dncprintln header      columnmetadata getcolumncount
tracecolumnmetadata header  columnmetadata
dncprintln header
catch  sqlexception e
dncprintln header
dncprintln header
public void traceresultsetmetadata statement statement  columnmetadata columnmetadata
if  tracesuspended
return
if   loggingenabled clientdatasource trace_result_set_meta_data     columnmetadata    null
return
synchronized  printwriter_
string header       integer tohexstring columnmetadata hashcode
try
dncprintln header
dncprintln header      integer tohexstring statement hashcode
dncprintln header      columnmetadata getcolumncount
tracecolumnmetadata header  columnmetadata
dncprintln header
catch  sqlexception e
dncprintln header
dncprintln header
//-----------------------------transient state--------------------------------
private void tracecolumnmetadata string header  columnmetadata columnmetadata
if  tracesuspended
return
try
synchronized  printwriter_
for  int column   1  column <  columnmetadata getcolumncount    column
dncprint header      column
printwriter_ print     columnmetadata getcolumnlabel column
printwriter_ print     columnmetadata getcolumnname column
printwriter_ print     columnmetadata getcolumntypename column
printwriter_ print     columnmetadata getcolumntype column
printwriter_ print     columnmetadata isnullable column
printwriter_ print     columnmetadata getprecision column
printwriter_ print     columnmetadata getscale column
printwriter_ print     columnmetadata getschemaname column
printwriter_ print     columnmetadata gettablename column
printwriter_ print     columnmetadata iswritable column
printwriter_ print      columnmetadata sqlprecision_    null ?         columnmetadata sqlprecision_
printwriter_ print      columnmetadata sqlscale_    null ?         columnmetadata sqlscale_
printwriter_ print      columnmetadata sqllength_    null ?         columnmetadata sqllength_
printwriter_ print      columnmetadata sqltype_    null ?         columnmetadata sqltype_
printwriter_ print      columnmetadata sqlccsid_    null ?         columnmetadata sqlccsid_
printwriter_ print      columnmetadata sqlname_    null ?     columnmetadata sqlname_
printwriter_ print      columnmetadata sqllabel_    null ?     columnmetadata sqllabel_
printwriter_ print      columnmetadata sqlunnamed_    null ?         columnmetadata sqlunnamed_
printwriter_ print      columnmetadata sqlcomment_    null ?     columnmetadata sqlcomment_
printwriter_ print      columnmetadata sqlxkeymem_    null ?         columnmetadata sqlxkeymem_
printwriter_ print      columnmetadata sqlxgenerated_    null ?         columnmetadata sqlxgenerated_
printwriter_ print      columnmetadata sqlxparmmode_    null ?         columnmetadata sqlxparmmode_
printwriter_ print      columnmetadata sqlxcorname_    null ?     columnmetadata sqlxcorname_
printwriter_ print      columnmetadata sqlxname_    null ?     columnmetadata sqlxname_
printwriter_ print      columnmetadata sqlxbasename_    null ?     columnmetadata sqlxbasename_
printwriter_ print      columnmetadata sqlxupdatable_    null ?         columnmetadata sqlxupdatable_
printwriter_ print      columnmetadata sqlxschema_    null ?     columnmetadata sqlxschema_
printwriter_ print      columnmetadata sqlxrdbnam_    null ?     columnmetadata sqlxrdbnam_
printwriter_ print     columnmetadata types_
printwriter_ println
dncprint header
printwriter_ print     columnmetadata sqldhold_
printwriter_ print     columnmetadata sqldreturn_
printwriter_ print     columnmetadata sqldscroll_
printwriter_ print     columnmetadata sqldsensitive_
printwriter_ print     columnmetadata sqldfcode_
printwriter_ print     columnmetadata sqldkeytype_
printwriter_ print     columnmetadata sqldrdbnam_
printwriter_ print     columnmetadata sqldschema_
printwriter_ println
printwriter_ flush
catch  sqlexception e
dncprintln header
// ---------------------- 3-way tracing connects -----------------------------
// including protocol manager levels, and driver configuration
// jdbc 2
public void traceconnectentry clientbasedatasource datasource
if  tracesuspended
return
if  loggingenabled clientdatasource trace_driver_configuration
tracedriverconfigurationjdbc2
if  loggingenabled clientdatasource trace_connects
traceconnectsentry datasource
// jdbc 1
public void traceconnectentry string server
int port
string database
java util properties properties
if  tracesuspended
return
if  loggingenabled clientdatasource trace_driver_configuration
tracedriverconfigurationjdbc1
if  loggingenabled clientdatasource trace_connects
traceconnectsentry server  port  database  properties
public void traceconnectresetentry object instance  logwriter logwriter
string user  clientbasedatasource ds
if  tracesuspended
return
traceentry instance     logwriter  user     ds
if  loggingenabled clientdatasource trace_connects
traceconnectsresetentry ds
public void traceconnectexit connection connection
if  tracesuspended
return
if  loggingenabled clientdatasource trace_connects
traceconnectsexit connection
public void traceconnectresetexit connection connection
if  tracesuspended
return
if  loggingenabled clientdatasource trace_connects
traceconnectsresetexit connection
// ---------------------- tracing connects -----------------------------------
private void traceconnectsresetentry clientbasedatasource datasource
try
if  tracesuspended
return
traceconnectsresetentry datasource getservername
datasource getportnumber
datasource getdatabasename
getproperties datasource
catch   sqlexception se
dncprintln
private void traceconnectsentry clientbasedatasource datasource
try
if  tracesuspended
return
traceconnectsentry datasource getservername
datasource getportnumber
datasource getdatabasename
getproperties datasource
catch   sqlexception se
dncprintln
private void traceconnectsresetentry string server
int port
string database
java util properties properties
if  tracesuspended
return
dncprintln
dncprintln     server       port       database
dncprint
writeproperties properties
dncprintln
private void traceconnectsentry string server
int port
string database
java util properties properties
if  tracesuspended
return
synchronized  printwriter_
dncprintln
dncprintln     server       port       database
dncprint
writeproperties properties
dncprintln
// specialized by netlogwriter.traceconnectsexit()
public void traceconnectsexit connection c
if  tracesuspended
return
synchronized  printwriter_
string header       integer tohexstring c hashcode
try
dncprintln header
dncprintln header      c databasemetadata_ geturl
dncprintln header      c databasemetadata_ getusername
dncprintln header      c databasemetadata_ getdatabaseproductname
dncprintln header      c databasemetadata_ getdatabaseproductversion
dncprintln header      c databasemetadata_ getdrivername
dncprintln header      c databasemetadata_ getdriverversion
dncprintln header
catch  java sql sqlexception e
dncprintln header
dncprintln header
public void traceconnectsresetexit org apache derby client am connection c
if  tracesuspended
return
synchronized  printwriter_
string header       integer tohexstring c hashcode
try
dncprintln header
dncprintln header      c databasemetadata_ geturl
dncprintln header      c databasemetadata_ getusername
dncprintln header      c databasemetadata_ getdatabaseproductname
dncprintln header      c databasemetadata_ getdatabaseproductversion
dncprintln header      c databasemetadata_ getdrivername
dncprintln header      c databasemetadata_ getdriverversion
dncprintln header
catch  java sql sqlexception e
dncprintln header
dncprintln header
// properties.tostring() will print out passwords,
// so this method was written to escape the password property value.
// printwriter_ synchronized by caller.
private void writeproperties java util properties properties
printwriter_ print
for  java util iterator i   properties entryset   iterator    i hasnext
java util map entry e    java util map entry   i next
if    equals e getkey
printwriter_ print     escapepassword  string  e getvalue
else
printwriter_ print e getkey         e getvalue
if  i hasnext
printwriter_ print
printwriter_ println
printwriter_ flush
private string escapepassword string pw
stringbuffer sb   new stringbuffer pw
for  int j   0  j < pw length    j
sb setcharat j
return sb tostring
//-------------------------tracing driver configuration-----------------------
private void tracedriverconfigurationjdbc2
if  tracesuspended
return
synchronized  printwriter_
if   driverconfigurationhasbeenwrittentojdbc2stream_
writedriverconfiguration
driverconfigurationhasbeenwrittentojdbc2stream_   true
private void tracedriverconfigurationjdbc1
if  tracesuspended
return
synchronized  printwriter_
if   driverconfigurationhasbeenwrittentojdbc1stream_
writedriverconfiguration
driverconfigurationhasbeenwrittentojdbc1stream_   true
public void writedriverconfiguration
org apache derby client am version writedriverconfiguration printwriter_
public static java io printwriter getprintwriter final string filename  final boolean fileappend  throws sqlexception
java io printwriter printwriter   null
//using an anonymous class to deal with the printwriter because the
//method java.security.accesscontroller.doprivileged requires an
//instance of a class(which implements
//java.security.privilegedexceptionaction). since getprintwriter method
//is static, we can't simply pass "this" to doprivileged method and
//have logwriter implement privilegedexceptionaction.
//to get around the static nature of method getprintwriter, have an
//anonymous class implement privilegedexceptionaction. that class will
//do the work related to printwriter in it's run method and return
//printwriter object.
try
printwriter    java io printwriter accesscontroller doprivileged
new java security privilegedexceptionaction
public object run  throws java io ioexception
string filecanonicalpath   new java io file filename  getcanonicalpath
return new java io printwriter
new java io bufferedoutputstream
new java io fileoutputstream
filecanonicalpath  fileappend   4096   true
catch  java security privilegedactionexception pae
throw new sqlexception null
new clientmessageid sqlstate unable_to_open_file
new object   filename  pae getmessage
pae
return printwriter
/**
* obtain a set of properties for the clientbasedatasource
*/
private properties getproperties clientbasedatasource cds
throws sqlexception
properties properties   new properties
try
reference ref   cds getreference
for  enumeration e   ref getall    e hasmoreelements
refaddr attribute    refaddr  e nextelement
string propertykey   attribute gettype
string value    string  attribute getcontent
// don't display the password or even its length
if  attribute password_attr equals propertykey
value
if value    null
properties setproperty propertykey  value
catch  namingexception e
throw new sqlexception this
new clientmessageid sqlstate java_exception
e getclass   getname    e getmessage    e
return properties