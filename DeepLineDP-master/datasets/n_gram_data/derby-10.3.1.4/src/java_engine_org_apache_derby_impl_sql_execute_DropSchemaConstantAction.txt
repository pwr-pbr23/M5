/*
derby - class org.apache.derby.impl.sql.execute.dropschemaconstantaction
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl sql execute
import org apache derby iapi error standardexception
import org apache derby iapi sql activation
import org apache derby iapi sql conn languageconnectioncontext
import org apache derby iapi sql dictionary datadictionary
import org apache derby iapi sql dictionary schemadescriptor
import org apache derby iapi sql execute constantaction
/**
*	this class  describes actions that are always performed for a
*	drop schema statement at execution time.
*
*/
class dropschemaconstantaction extends ddlconstantaction
private final string				schemaname
// constructors
/**
*	make the constantaction for a drop table statement.
*
*	@param	schemaname			table name.
*
*/
dropschemaconstantaction string	schemaname
this schemaname   schemaname
///////////////////////////////////////////////
//
// object shadows
//
///////////////////////////////////////////////
public	string	tostring
// do not put this under sanitymanager.debug - it is needed for
// error reporting.
return     schemaname
// interface methods
/**
*	this is the guts of the execution-time logic for drop table.
*
*	@see constantaction#executeconstantaction
*
* @exception standardexception		thrown on failure
*/
public void	executeconstantaction  activation activation
throws standardexception
languageconnectioncontext lcc   activation getlanguageconnectioncontext
datadictionary dd   lcc getdatadictionary
/*
** inform the data dictionary that we are about to write to it.
** there are several calls to data dictionary "get" methods here
** that might be done in "read" mode in the data dictionary, but
** it seemed safer to do this whole operation in "write" mode.
**
** we tell the data dictionary we're done writing at the end of
** the transaction.
*/
dd startwriting lcc
schemadescriptor sd   dd getschemadescriptor schemaname  null  true
sd drop lcc