/*
derby - class org.apache.derby.impl.sql.compile.parserimpl
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl sql compile
import org apache derby impl sql compile querytreenode
import org apache derby iapi sql compile parser
import org apache derby iapi sql statement
import org apache derby iapi sql compile compilercontext
import org apache derby iapi reference sqlstate
import org apache derby iapi error standardexception
import org apache derby iapi services sanity sanitymanager
public class parserimpl implements parser
/*
** we will use the following constant to pass in to
** our charstream.  it is the size of the internal
** buffers that are used to buffer tokens.  it
** should be set to what is typically around the
** largest token that is likely to be hit.  note
** that if the size is exceeded, the buffer will
** automatically be expanded by 2048, so it is ok
** to choose something that is smaller than the
** max token supported.
**
** since, javacc generates parser and tokenmanagers classes
** tightly connected, to use another parser or tokenmanager
** inherit this class, override the following methods
** to use specific instances:<ul>
** <li>gettokenmanager()</li>
** <li>getparser()</li>
** <li>parsegoalproduction(...)</li>
** </ul>
**
*/
static final int large_token_size   128
/* don't ever access these objects directly, call getparser(), and gettokenmanager() */
private sqlparser cachedparser
protected object cachedtokenmanager
protected charstream charstream
protected string sqltext
protected final compilercontext cc
/**
* constructor for parser
*/
public parserimpl compilercontext cc
this cc   cc
public statementnode parsestatement string statementsqltext
throws standardexception
return parsestatement statementsqltext   object null
/**
* returns a initialized (clean) tokenmanager, paired w. the parser in getparser,
* appropriate for this parserimpl object.
*/
protected object gettokenmanager
/* returned a cached tokenmanager if already exists, otherwise create */
sqlparsertokenmanager tm    sqlparsertokenmanager  cachedtokenmanager
if  tm    null
tm   new sqlparsertokenmanager charstream
cachedtokenmanager   tm
else
tm reinit charstream
return tm
/**
* new parser, appropriate for the parserimpl object.
*/
private sqlparser getparser
sqlparsertokenmanager tm    sqlparsertokenmanager  gettokenmanager
/* returned a cached parser if already exists, otherwise create */
sqlparser p    sqlparser  cachedparser
if  p    null
p   new sqlparser tm
p setcompilercontext cc
cachedparser   p
else
p reinit tm
return p
/**
* parse a statement and return a query tree.  implements the parser
* interface
*
* @param statementsqltext	statement to parse
* @param paramdefaults	parameter defaults. passed around as an array
*                      of objects, but is really an array of storabledatavalues
* @return	a querytree representing the parsed statement
*
* @exception standardexception	thrown on error
*/
public statementnode parsestatement string statementsqltext  object paramdefaults
throws standardexception
java io reader sqltext   new java io stringreader statementsqltext
/* get a char stream if we don't have one already */
if  charstream    null
charstream   new ucode_charstream sqltext  1  1  large_token_size
else
charstream reinit sqltext  1  1  large_token_size
/* remember the string that we're parsing */
sqltext   statementsqltext
/* parse the statement, and return the querytree */
try
return getparser   statement statementsqltext  paramdefaults
catch  parseexception e
throw standardexception newexception sqlstate lang_syntax_error  e getmessage
catch  tokenmgrerror e
// derby - 2103.
// when the exception occurs cachedparser may live with
// some flags set inappropriately that may cause exception
// in the subsequent compilation. this seems to be a javacc bug.
// issue javacc-152 has been raised.
// as a workaround, the cachedparser object is cleared to ensure
// that the exception does not have any side effect.
// todo : remove the following line if javacc-152 is fixed.
cachedparser   null
throw standardexception newexception sqlstate lang_lexical_error  e getmessage
/**
* returns the current sql text string that is being parsed.
*
* @return	current sql text string.
*
*/
public	string		getsqltext
return	sqltext