/*
derby - class org.apache.derby.impl.sql.compile.clobtypecompiler
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl sql compile
import org apache derby iapi services loader classfactory
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi services compiler localfield
import org apache derby iapi services compiler methodbuilder
import org apache derby iapi services io storedformatids
import org apache derby iapi types stringdatavalue
import org apache derby iapi types typeid
import org apache derby iapi types datatypedescriptor
import org apache derby iapi sql compile typecompiler
import org apache derby iapi reference classname
/**
* this class implements typecompiler for the sql lob types.
*
*/
public class clobtypecompiler extends basetypecompiler
/**
* tell whether this type (lob) can be converted to the given type.
*
* @see typecompiler#convertible
*/
public boolean convertible typeid othertype
boolean fordatatypefunction
// allow casting to any string
return  othertype isstringtypeid
/**
* tell whether this type (clob) is compatible with the given type.
*
* @param othertype     the typeid of the other type.
*/
public boolean compatible typeid othertype
return convertible othertype false
/**
* tell whether this type (lob) can be stored into from the given type.
*
* @param othertype     the typeid of the other type.
* @param cf            a classfactory
*/
public boolean storable typeid othertype  classfactory cf
// no automatic conversions at store time--but string
// literals (or values of type char/varchar) are storable
// as clobs, even if the two types can't be compared.
return  othertype isstringtypeid
/** @see typecompiler#interfacename */
public string interfacename
return classname stringdatavalue
/**
* @see typecompiler#getcorrespondingprimitivetypename
*/
public string getcorrespondingprimitivetypename
int formatid   getstoredformatidfromtypeid
switch  formatid
case storedformatids clob_type_id   return
case storedformatids nclob_type_id  return
default
if  sanitymanager debug
sanitymanager throwassert     formatid
return null
public string getmatchingnationalchartypename
return typeid nclob_name
/**
* @see typecompiler#getcasttocharwidth
*/
public int getcasttocharwidth datatypedescriptor dts
return dts getmaximumwidth
string nullmethodname
int formatid   getstoredformatidfromtypeid
switch  formatid
case storedformatids clob_type_id   return
case storedformatids nclob_type_id  return
default
if  sanitymanager debug
sanitymanager throwassert     formatid
return null
string datavaluemethodname
int formatid   getstoredformatidfromtypeid
switch  formatid
case storedformatids clob_type_id   return
case storedformatids nclob_type_id  return
default
if  sanitymanager debug
sanitymanager throwassert     formatid
return null
/**
* push the collation type if it is not collation_type_ucs_basic.
*
* @param collationtype collation type of character values.
* @return true collationtype will be pushed, false collationtype will be ignored.
*/
boolean pushcollationfordatavalue int collationtype
return collationtype    stringdatavalue collation_type_ucs_basic