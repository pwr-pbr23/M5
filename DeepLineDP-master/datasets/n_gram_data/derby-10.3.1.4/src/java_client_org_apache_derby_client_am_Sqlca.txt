/*
derby - class org.apache.derby.client.am.sqlca
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby client am
import org apache derby shared common reference sqlstate
import org apache derby client net typdef
public abstract class sqlca
transient protected connection connection_
sqlexception exceptionthrownonstoredprocinvocation_
boolean messagetextretrievedcontainstokensonly_   true
// data corresponding to sqlca fields
protected int sqlcode_            sqlcode
/** a string representation of <code>sqlerrmcbytes_</code>. */
private string sqlerrmc_
/** array of errmc strings for each message in the chain. */
protected string sqlerrmcmessages_
/** sql states for all the messages in the exception chain. */
private string sqlstates_
// contain an error token
protected string sqlerrp_            function name issuing error
protected int sqlerrd_            6 diagnostic information
protected char sqlwarn_            11 warning flags
protected string sqlstate_           sqlstate
// raw sqlca data fields before unicode conversion
protected byte sqlerrmcbytes_
protected byte sqlerrpbytes_
protected byte sqlwarnbytes_
protected int sqlerrmcccsid_
protected boolean containssqlcax_   true
protected long rowsetrowcount_
/**
* character sequence that separates the different messages in the errmc.
* @see org.apache.derby.catalog.systemprocedures#sqlerrmc_message_delimiter
*/
private static final string sqlerrmcdelimiter__
// jdk stack trace calls e.getmessage(), so we must set some state on the sqlca that says return tokens only.
private boolean returntokensonlyinmessagetext_   false
transient private final agent agent_
/** cached error messages (to prevent multiple invocations of the stored
* procedure to get the same message). */
private string cachedmessages
protected sqlca org apache derby client am connection connection
connection_   connection
agent_   connection_    null ? connection_ agent_   null
void returntokensonlyinmessagetext boolean returntokensonlyinmessagetext
returntokensonlyinmessagetext_   returntokensonlyinmessagetext
/**
* returns the number of messages this sqlca contains.
*
* @return number of messages
*/
synchronized int numberofmessages
initsqlerrmcmessages
if  sqlerrmcmessages_    null
return sqlerrmcmessages_ length
// even if we don't have an array of errmc messages, we are able to get
// one message out of this sqlca (although it's not very readable)
return 1
synchronized public int getsqlcode
return sqlcode_
synchronized public string getsqlerrmc
if  sqlerrmc_    null
return sqlerrmc_
// sqlerrmc string is dependent on sqlerrmcmessages_ array having
// been built
initsqlerrmcmessages
// sqlerrmc will be built only if sqlerrmcmessages_ has been built.
// otherwise, a null string will be returned.
if  sqlerrmcmessages_    null
return null
// create 0-length string if no tokens
if  sqlerrmcmessages_ length    0
sqlerrmc_
return sqlerrmc_
// concatenate tokens with sqlerrmcdelimiter delimiters into one string
stringbuffer buffer   new stringbuffer
int indx
for  indx   0  indx < sqlerrmcmessages_ length   1  indx
buffer append sqlerrmcmessages_
buffer append sqlerrmcdelimiter__
// all but the first message should be preceded by the sql state
// and a colon (see drdaconnthread.buildtokenizedsqlerrmc() on the
// server)
buffer append sqlstates_
buffer append
// add the last token
buffer append sqlerrmcmessages_
// save as a string
sqlerrmc_   buffer tostring
return sqlerrmc_
/**
* initialize and build the arrays <code>sqlerrmcmessages_</code> and
* <code>sqlstates_</code>.
*/
private void initsqlerrmcmessages
if  sqlerrmcmessages_    null    sqlstates_    null
// processsqlerrmctokens handles null sqlerrmcbytes_ case
processsqlerrmctokens sqlerrmcbytes_
synchronized public string getsqlerrp
if  sqlerrp_    null
return sqlerrp_
if  sqlerrpbytes_    null
return null
try
sqlerrp_   bytes2string sqlerrpbytes_
0
sqlerrpbytes_ length
return sqlerrp_
catch  java io unsupportedencodingexception e
// leave sqlerrp as null.
return null
public int getsqlerrd
if  sqlerrd_    null
return sqlerrd_
sqlerrd_   new int     create an int array
return sqlerrd_
synchronized public char getsqlwarn
if  sqlwarn_    null
return sqlwarn_
try
if  sqlwarnbytes_    null
sqlwarn_   new char                                      11 blank
else
sqlwarn_   bytes2string sqlwarnbytes_  0  sqlwarnbytes_ length  tochararray
return sqlwarn_
catch  java io unsupportedencodingexception e
sqlwarn_   new char                                      11 blank
return sqlwarn_
synchronized public string getsqlstate
return sqlstate_
/**
* get the sql state for a given error.
*
* @param messagenumber the error to retrieve sql state for
* @return sql state for the error
*/
synchronized string getsqlstate int messagenumber
initsqlerrmcmessages
if  sqlstates_    null
return sqlstates_
return getsqlstate
// gets the formatted message, can throw an exception.
private string getmessage int messagenumber  throws sqlexception
// should this be traced to see if we are calling a stored proc?
if  cachedmessages    null    cachedmessages    null
return cachedmessages
if  connection_    null    connection_ isclosedx      returntokensonlyinmessagetext_
return getunformattedmessage messagenumber
callablestatement cs   null
synchronized  connection_
try
cs   connection_ preparemessageproc
string errmc   null
string sqlstate   null
if  sqlerrmcmessages_    null
errmc   sqlerrmcmessages_
sqlstate   sqlstates_
// sqlcode: sql return code.
cs setintx 1   messagenumber    0  ? getsqlcode     0
// sqlerrml: length of sql error message tokens.
cs setshortx 2   short    errmc    null  ? 0   errmc length
// sqlerrmc: sql error message tokens as a string
cs setstringx 3  errmc
// sqlerrp: product signature.
cs setstringx 4  getsqlerrp
// sqlerrd: sql internal error code.
cs setintx 5  getsqlerrd
cs setintx 6  getsqlerrd
cs setintx 7  getsqlerrd
cs setintx 8  getsqlerrd
cs setintx 9  getsqlerrd
cs setintx 10  getsqlerrd
// sqlwarn: sql warning flags.
cs setstringx 11  new string getsqlwarn
// sqlstate: standard sql state.
cs setstringx 12  sqlstate
// messagefilename: not used by our driver, so set to null.
cs setstringx 13  null
// locale: language preference requested for the return error message.
cs setstringx 14  java util locale getdefault   tostring
// server could return a locale different from what we requested
cs registeroutparameterx 14  java sql types varchar
// message: error message returned from sqlcamessage stored procedure.
cs registeroutparameterx 15  java sql types longvarchar
// rcode: return code from sqlcamessage stored procedure.
cs registeroutparameterx 16  java sql types integer
cs executex
if  cs getintx 16     0
// return the message text.
messagetextretrievedcontainstokensonly_   false
string message   cs getstringx 15
if  cachedmessages    null
cachedmessages   new string
cachedmessages   message
return message
else
// stored procedure can't return a valid message text, so we return
// unformated exception
return getunformattedmessage messagenumber
finally
if  cs    null
try
cs closex
catch  sqlexception donothing
// may or may not get the formatted message depending upon datasource directives.  cannot throw exeption.
synchronized string getjdbcmessage int messagenumber
// the transient connection_ member will only be null if the sqlca has been deserialized
if  connection_    null    connection_ retrievemessagetext_
try
return getmessage messagenumber
catch  sqlexception e
// invocation of stored procedure fails, so we return error message tokens directly.
exceptionthrownonstoredprocinvocation_   e
chaindeferredexceptionstoagentorasconnectionwarnings  sqlexception  e
return getunformattedmessage messagenumber
else
return getunformattedmessage messagenumber
/**
* get the unformatted message text (in case we cannot ask the server).
*
* @param messagenumber which message number to get the text for
* @return string with details about the error
*/
private string getunformattedmessage int messagenumber
int sqlcode
string sqlstate
string sqlerrmc
if  messagenumber    0
// if the first exception in the chain is requested, return all the
// information we have
sqlcode   getsqlcode
sqlstate   getsqlstate
sqlerrmc   getsqlerrmc
else
// otherwise, return information about the specified error only
sqlcode   0
sqlstate   sqlstates_
sqlerrmc   sqlerrmcmessages_
return     sqlcode
sqlstate       sqlerrmc
private void chaindeferredexceptionstoagentorasconnectionwarnings sqlexception e
sqlexception current   e
while  current    null
sqlexception next    sqlexception  current getnextexception
current   current copyasunchainedsqlexception agent_ logwriter_
if  current geterrorcode       440
sqlwarning warningforstoredprocfailure   new sqlwarning agent_ logwriter_
new clientmessageid sqlstate unable_to_obtain_message_text_from_server
warningforstoredprocfailure setnextexception current getsqlexception
connection_ accumulate440warningformessageprocfailure warningforstoredprocfailure
else if  current geterrorcode       444
sqlwarning warningforstoredprocfailure   new sqlwarning agent_ logwriter_
new clientmessageid sqlstate unable_to_obtain_message_text_from_server
warningforstoredprocfailure setnextexception current getsqlexception
connection_ accumulate444warningformessageprocfailure warningforstoredprocfailure
else
agent_ accumulatedeferredexception current
current   next
public boolean includessqlcode int codes
for  int i   0  i < codes length  i
if  codes    getsqlcode
return true
return false
// ------------------- helper methods ----------------------------------------
private void processsqlerrmctokens byte tokenbytes
if  tokenbytes    null
return
// create 0-length string tokens array if tokenbytes is 0-length
int length   tokenbytes length
if  length    0
sqlstates_   sqlerrmcmessages_   new string
return
try
// tokenize and convert tokenbytes
string fullstring   bytes2string tokenbytes  0  length
string tokens   fullstring split
string states   new string
states   getsqlstate
for  int i   1  i < tokens length  i
// all but the first message are preceded by the sql state
// (five characters) and a colon. extract the sql state and
// clean up the token. see
// drdaconnthread.buildtokenizedsqlerrmc() for more details.
states   tokens substring 0  5
tokens   tokens substring 6
sqlstates_   states
sqlerrmcmessages_   tokens
catch  java io unsupportedencodingexception e
/* do nothing, the arrays continue to be null */
protected string bytes2string byte bytes  int offset  int length
throws java io unsupportedencodingexception
// network server uses utf8 encoding
return new string bytes  offset  length  typdef utf8encoding
public int getupdatecount
if  sqlerrd_    null
return 0
return sqlerrd_
public long getrowcount   throws org apache derby client am disconnectexception
return   long  sqlerrd_ << 32    sqlerrd_
public void setcontainssqlcax boolean containssqlcax
containssqlcax_   containssqlcax
public boolean containssqlcax
return containssqlcax_
public void resetrowsetsqlca org apache derby client am connection connection
int sqlcode
string sqlstate
byte sqlerrpbytes
connection_   connection
sqlcode_   sqlcode
sqlstate_   sqlstate
sqlerrpbytes_   sqlerrpbytes
public void setrowsetrowcount long rowcount
rowsetrowcount_   rowcount
public long getrowsetrowcount
return rowsetrowcount_