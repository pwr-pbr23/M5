/*
derby - class org.apache.derby.client.am.logicalconnection40
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby client am
import java sql array
import java sql blob
import java sql sqlclientinfoexception
import java sql clob
import java sql nclob
import java sql sqlxml
import java sql sqlexception
import java sql struct
import java sql wrapper
import java util properties
import org apache derby client clientpooledconnection
import org apache derby shared common reference sqlstate
import java util map
/**
* a simple delegation wrapper handle for a physical connection.
* this class only contains jdbc 4.0 specific methods.
*
* note: all non-implemented jdbc 4.0 methods are located here, but when they
*       are implemented, they should be moved to the superclass if possible.
*/
public class logicalconnection40
extends logicalconnection
public logicalconnection40 connection physicalconnection
clientpooledconnection pooledconnection
throws sqlexception
super physicalconnection  pooledconnection
public array createarrayof string typename  object elements
throws sqlexception
checkfornullphysicalconnection
return physicalconnection_ createarrayof  typename  elements
public blob createblob
throws sqlexception
checkfornullphysicalconnection
return physicalconnection_ createblob
public clob createclob
throws sqlexception
checkfornullphysicalconnection
return physicalconnection_ createclob
public nclob createnclob
throws sqlexception
checkfornullphysicalconnection
return physicalconnection_ createnclob
public sqlxml createsqlxml
throws sqlexception
checkfornullphysicalconnection
return physicalconnection_ createsqlxml
public struct createstruct string typename  object attributes
throws sqlexception
checkfornullphysicalconnection
return physicalconnection_ createstruct  typename  attributes
/**
* <code>getclientinfo</code> forwards to
* <code>physicalconnection_</code>.
* <code>getclientinfo</code> always returns an empty
* <code>properties</code> object since derby doesn't support
* clientinfoproperties.
*
* @return an empty <code>properties</code> object
* @exception sqlexception if an error occurs
*/
public properties getclientinfo
throws sqlexception
checkfornullphysicalconnection
return physicalconnection_ getclientinfo
/**
* <code>getclientinfo</code> forwards to
* <code>physicalconnection_</code>. always returns a <code>null
* string</code> since derby does not support
* clientinfoproperties.
*
* @param name a property key to get <code>string</code>
* @return a property value <code>string</code>
* @exception sqlexception if an error occurs
*/
public string getclientinfo string name
throws sqlexception
checkfornullphysicalconnection
return physicalconnection_ getclientinfo name
/**
* returns the type map for this connection.
*
* @return type map for this connection
* @exception sqlexception if a database access error occurs
*/
public map<string  class<?>> gettypemap   throws sqlexception
checkfornullphysicalconnection
return   java sql connection  physicalconnection_  gettypemap
/**
* checks if the connection has not been closed and is still valid.
* the validity is checked by running a simple query against the
* database.
*
* @param timeout the time in seconds to wait for the database
* operation used to validate the connection to complete. if the
* timeout period expires before the operation completes, this
* method returns false. a value of 0 indicates a timeout is not
* applied to the database operation.
* @return true if the connection is valid, false otherwise
* @throws sqlexception if the call on the physical connection throws an
* exception.
*/
synchronized public boolean isvalid int timeout  throws sqlexception
// check if we have a underlying physical connection
if  physicalconnection_    null
return false
return physicalconnection_ isvalid timeout
public boolean iswrapperfor class<?> interfaces
throws sqlexception
checkfornullphysicalconnection
return interfaces isinstance this
/**
* <code>setclientinfo</code> forwards to
* <code>physicalconnection_</code>.
*
* @param properties a <code>properties</code> object with the
* properties to set
* @exception sqlclientinfoexception if an error occurs
*/
public void setclientinfo properties properties
throws sqlclientinfoexception
try   checkfornullphysicalconnection
catch  sqlexception se
throw new sqlclientinfoexception
se getmessage    se getsqlstate
new failedproperties40 properties   getproperties
physicalconnection_ setclientinfo properties
/**
* <code>setclientinfo</code> forwards to
* <code>physicalconnection_</code>.
*
* @param name a property key <code>string</code>
* @param value a property value <code>string</code>
* @exception sqlexception if an error occurs
*/
public void setclientinfo string name  string value
throws sqlclientinfoexception
try   checkfornullphysicalconnection
catch  sqlexception se
throw new sqlclientinfoexception
se getmessage    se getsqlstate
new failedproperties40
failedproperties40 makeproperties
name value   getproperties
physicalconnection_ setclientinfo name  value
public <t>t unwrap class<t> interfaces
throws sqlexception
checkfornullphysicalconnection
// derby does not implement non-standard methods on jdbc objects
try
return interfaces cast this
catch  classcastexception cce
throw new sqlexception null
new clientmessageid sqlstate unable_to_unwrap
interfaces  getsqlexception
end class logicalconnection40