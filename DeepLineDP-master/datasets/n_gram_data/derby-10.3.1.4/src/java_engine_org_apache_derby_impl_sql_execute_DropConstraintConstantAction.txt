/*
derby - class org.apache.derby.impl.sql.execute.dropconstraintconstantaction
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl sql execute
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi services io formatablehashtable
import org apache derby catalog uuid
import org apache derby iapi services uuid uuidfactory
import org apache derby iapi error standardexception
import org apache derby iapi sql conn languageconnectioncontext
import org apache derby iapi sql statementtype
import org apache derby iapi sql dictionary conglomeratedescriptor
import org apache derby iapi sql dictionary constraintdescriptor
import org apache derby iapi sql dictionary constraintdescriptorlist
import org apache derby iapi sql dictionary datadescriptorgenerator
import org apache derby iapi sql dictionary datadictionary
import org apache derby iapi sql dictionary foreignkeyconstraintdescriptor
import org apache derby iapi sql dictionary referencedkeyconstraintdescriptor
import org apache derby iapi sql dictionary schemadescriptor
import org apache derby iapi sql dictionary tabledescriptor
import org apache derby iapi types datavaluefactory
import org apache derby iapi sql depend dependencymanager
import org apache derby iapi reference sqlstate
import org apache derby iapi sql execute constantaction
import org apache derby iapi sql activation
import org apache derby iapi store access transactioncontroller
import org apache derby catalog uuid
/**
*	this class  describes actions that are always performed for a
*	drop constraint at execution time.
*
*	@version 0.1
*/
public class dropconstraintconstantaction extends constraintconstantaction
private boolean cascade 		   default false
private string constraintschemaname
private int verifytype
// constructors
/**
*	make one of these puppies.
*
*  @param constraintname	constraint name.
*  @param constraintschemaname		the schema that constraint lives in.
*  @param tablename		table name.
*	@param tableid			uuid of table.
*  @param tableschemaname				the schema that table lives in.
*  @param indexaction		indexconstantaction for constraint (if necessary)
*  @param behavior			the drop behavior (e.g. statementtype.drop_cascade)
*/
dropconstraintconstantaction
string				constraintname
string				constraintschemaname
string				tablename
uuid					tableid
string				tableschemaname
indexconstantaction indexaction
int					behavior
int                  verifytype
super constraintname  datadictionary drop_constraint  tablename
tableid  tableschemaname  indexaction
cascade    behavior    statementtype drop_cascade
this constraintschemaname   constraintschemaname
this verifytype   verifytype
// object methods
public	string	tostring
// do not put this under sanitymanager.debug - it is needed for
// error reporting.
if  constraintname    null
return
string ss   constraintschemaname    null ? schemaname   constraintschemaname
return     ss       constraintname
// interface methods
/**
*	this is the guts of the execution-time logic for drop constraint.
*
*	@see constantaction#executeconstantaction
*
* @exception standardexception		thrown on failure
*/
public void	executeconstantaction  activation activation
throws standardexception
constraintdescriptor		condesc   null
tabledescriptor				td
uuid							indexid   null
string						indexuuidstring
languageconnectioncontext lcc   activation getlanguageconnectioncontext
datadictionary dd   lcc getdatadictionary
dependencymanager dm   dd getdependencymanager
transactioncontroller tc   lcc gettransactionexecute
/*
** inform the data dictionary that we are about to write to it.
** there are several calls to data dictionary "get" methods here
** that might be done in "read" mode in the data dictionary, but
** it seemed safer to do this whole operation in "write" mode.
**
** we tell the data dictionary we're done writing at the end of
** the transaction.
*/
dd startwriting lcc
td   dd gettabledescriptor tableid
if  td    null
throw standardexception newexception sqlstate lang_table_not_found_during_execution  tablename
/* table gets locked in altertableconstantaction */
/*
** if the schema descriptor is null, then
** we must have just read ourselves in.
** so we will get the corresponding schema
** descriptor from the data dictionary.
*/
schemadescriptor tdsd   td getschemadescriptor
schemadescriptor constraintsd
constraintschemaname    null ? tdsd   dd getschemadescriptor constraintschemaname  tc  true
/* get the constraint descriptor for the index, along
* with an exclusive row lock on the row in sys.sysconstraints
* in order to ensure that no one else compiles against the
* index.
*/
if  constraintname    null      this means
condesc   dd getconstraintdescriptors td  getprimarykey
else
condesc   dd getconstraintdescriptorbyname td  constraintsd  constraintname  true
// error if constraint doesn't exist
if  condesc    null
string errorname   constraintname    null ?
constraintsd getschemaname        constraintname
throw standardexception newexception sqlstate lang_drop_non_existent_constraint
errorname
td getqualifiedname
switch  verifytype
case datadictionary unique_constraint
if  condesc getconstrainttype      verifytype
throw standardexception newexception sqlstate lang_drop_constraint_type
constraintname
break
case datadictionary check_constraint
if  condesc getconstrainttype      verifytype
throw standardexception newexception sqlstate lang_drop_constraint_type
constraintname
break
case datadictionary foreignkey_constraint
if  condesc getconstrainttype      verifytype
throw standardexception newexception sqlstate lang_drop_constraint_type
constraintname
break
boolean cascadeonrefkey    cascade
condesc instanceof referencedkeyconstraintdescriptor
if   cascadeonrefkey
dm invalidatefor condesc  dependencymanager drop_constraint  lcc
/*
** if we had a primary/unique key and it is drop cascade,
** drop all the referencing keys now.  we must do this after
** dropping the referenced key because otherwise we would
** be repeatedly changing the reference count of the referenced
** key and generating unnecessary i/o.
*/
condesc drop lcc   cascadeonrefkey
if  cascadeonrefkey
foreignkeyconstraintdescriptor fkcd
referencedkeyconstraintdescriptor cd
constraintdescriptorlist cdl
cd    referencedkeyconstraintdescriptor condesc
cdl   cd getforeignkeyconstraints referencedkeyconstraintdescriptor all
int cdlsize   cdl size
for int index   0  index < cdlsize  index
fkcd    foreignkeyconstraintdescriptor  cdl elementat index
dm invalidatefor fkcd  dependencymanager drop_constraint  lcc
fkcd drop lcc  true
/*
** we told dropconstraintandindex not to
** remove our dependencies, so send an invalidate,
** and drop the dependencies.
*/
dm invalidatefor condesc  dependencymanager drop_constraint  lcc
dm cleardependencies lcc  condesc