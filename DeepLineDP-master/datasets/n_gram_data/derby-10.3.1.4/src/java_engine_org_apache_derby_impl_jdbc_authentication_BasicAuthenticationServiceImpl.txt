/*
derby - class org.apache.derby.impl.jdbc.authentication.basicauthenticationserviceimpl
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl jdbc authentication
import org apache derby iapi reference messageid
import org apache derby iapi reference attribute
import org apache derby authentication userauthenticator
import org apache derby iapi services property propertyutil
import org apache derby iapi services daemon serviceable
import org apache derby iapi services monitor modulefactory
import org apache derby iapi services monitor monitor
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi error standardexception
import org apache derby iapi services i18n messageservice
import org apache derby iapi store access transactioncontroller
import org apache derby iapi jdbc authenticationservice
import org apache derby iapi util stringutil
import java util properties
// security imports - for sha-1 digest
import java security messagedigest
import java security nosuchalgorithmexception
import java io serializable
import java util dictionary
/**
* this authentication service is the basic derby user authentication
* level support.
*
* it is activated upon setting derby.authentication.provider database
* or system property to 'builtin'.
* <p>
* it instantiates & calls the basic user authentication scheme at runtime.
* <p>
* in 2.0, users can now be defined as database properties.
* if derby.database.propertiesonly is set to true, then in this
* case, only users defined as database properties for the current database
* will be considered.
*
*/
public final class basicauthenticationserviceimpl
extends authenticationservicebase implements userauthenticator
//
// modulecontrol implementation (overriden)
//
/**
*  check if we should activate this authentication service.
*/
public boolean cansupport properties properties
if   requireauthentication properties
return false
//
// we check 2 system/database properties:
//
//
// - if derby.authentication.provider is set to 'builtin'.
//
// and in that case we are the authentication service that should
// be run.
//
string authenticationprovider   propertyutil getpropertyfromset
properties
org apache derby iapi reference property authentication_provider_parameter
if    authenticationprovider    null
authenticationprovider length      0
stringutil sqlequalsignorecase authenticationprovider
org apache derby iapi reference property authentication_provider_builtin
return false
else
return true 	   yep  we're on
/**
* @see org.apache.derby.iapi.services.monitor.modulecontrol#boot
* @exception standardexception upon failure to load/boot the expected
* authentication service.
*/
public void boot boolean create  properties properties
throws standardexception
// we need authentication
// setauthentication(true);
// we call the super in case there is anything to get initialized.
super boot create  properties
// initialize the messagedigest class engine here
// (we don't need to do that ideally, but there is some
// overhead the first time it is instantiated.
// sha-1 is expected in jdk 1.1x and jdk1.2
// this is a standard name: check,
// http://java.sun.com/products/jdk/1.{1,2}
//					/docs/guide/security/cryptospec.html#appa
try
messagedigest digestalgorithm   messagedigest getinstance
digestalgorithm reset
catch  nosuchalgorithmexception nsae
throw monitor exceptionstartingmodule nsae
// set ourselves as being ready and loading the proper
// authentication scheme for this service
//
this setauthenticationservice this
/*
** userauthenticator methods.
*/
/**
* authenticate the passed-in user's credentials.
*
* @param username		the user's name used to connect to jbms system
* @param userpassword	the user's password used to connect to jbms system
* @param databasename	the database which the user wants to connect to.
* @param info			additional jdbc connection info.
*/
public boolean	authenticateuser string username
string userpassword
string databasename
properties info
// client security mechanism if any specified
// note: right now it is only used to handle clients authenticating
// via drda secmec_usrssbpwd mechanism
string clientsecuritymechanism   null
// client security mechanism (if any) short representation
// default value is none.
int secmec   0
// let's check if the user has been defined as a valid user of the
// jbms system.
// we expect to find and match a system property corresponding to the
// credentials passed-in.
//
if  username    null
// we don't tolerate 'guest' user for now.
return false
string defineduserpassword   null  passeduserpassword   null
// if a security mechanism is specified as part of the connection
// properties, it indicates that we've to account as far as how the
// password is presented to us - in the case of secmec_usrssbpwd
// (only expected one at the moment), the password is a substitute
// one which has already been hashed differently than what we store
// at the database level (for instance) - this will influence how we
// assess the substitute password to be legitimate for derby's
// builtin authentication scheme/provider.
if   clientsecuritymechanism
info getproperty attribute client_security_mechanism      null
secmec   integer parseint clientsecuritymechanism
//
// check if user has been defined at the database or/and
// system level. the user (administrator) can configure it the
// way he/she wants (as well as forcing users properties to
// be retrieved at the datbase level only).
//
string usernameproperty
org apache derby iapi reference property user_property_prefix concat
username
// check if user defined at the database level
defineduserpassword   getdatabaseproperty usernameproperty
if  defineduserpassword    null
if  secmec    secmec_usrssbpwd
// encrypt passed-in password
passeduserpassword   encryptpassword userpassword
else
// dealing with a client secmec - password checking is
// slightly different and we need to generate a
// password substitute to compare with the substitute
// generated one from the client.
defineduserpassword   substitutepassword username
defineduserpassword
info  true
// as secmec is secmec_usrssbpwd, expected passed-in password
// to be hexstring'ified already
passeduserpassword   userpassword
else
// check if user defined at the system level
defineduserpassword   getsystemproperty usernameproperty
passeduserpassword   userpassword
if   defineduserpassword    null
secmec    secmec_usrssbpwd
// dealing with a client secmec - see above comments
defineduserpassword   substitutepassword username
defineduserpassword
info  false
if  defineduserpassword    null
// no such user found
return false
// check if the passwords match
if   defineduserpassword equals passeduserpassword
return false
// note: we do not look at the passed-in database name value as
// we rely on the authorization service that was put in
// in 2.0 . (if a database name was passed-in)
// we do have a valid user
return true