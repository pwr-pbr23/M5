/*
derby - class org.apache.derby.impl.drda.session
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl drda
import java io ioexception
import java io inputstream
import java io outputstream
import java net socket
import java util enumeration
import java util hashtable
import org apache derby iapi tools i18n localizedresource
import java sql sqlexception
/**
session stores information about the current session
it is used so that a drdaconnthread can work on any session.
*/
class session
// session states
protected static final int init   1 	   before exchange of server attributes
protected static final int attexc   2 	   after first exchange of server attributes
protected static final int secacc   3 	   after accsec  security manager accessed
protected static final int chksec   4 	   after secchk   checked security
protected static final int closed   5 	   session has ended
// session types
protected static final int drda_session   1
protected static final int cmd_session   2
// trace name prefix and suffix
private static final string tracename_prefix
private static final string tracename_suffix
// session information
protected socket clientsocket 		   session socket
protected int connnum 				   connection number
protected inputstream sessioninput 	   session input stream
protected outputstream sessionoutput 	   session output stream
protected string tracefilename 		   trace file name for session
protected boolean traceon 			   whether trace is currently on for the session
protected int state 				   the current state of the session
protected int sessiontype 			   type of session   drda or networkservercontrol command
protected string drdaid 			   drda id of the session
protected dsstrace dsstrace 		   trace object associated with the session
protected apprequester apprequester 	   application requester for this session
protected database database 		   current database
protected int qryinsid 				   unique identifier for each query
protected localizedresource langutil 		   localization information for command session
// client
private	hashtable	dbtable 		   table of databases accessed in this session
// constructor
/**
* session constructor
*
* @param connnum		connection number
* @param clientsocket	communications socket for this session
* @param tracedirectory	location for trace files
* @param traceon		whether to start tracing this connection
*
* @exception throws ioexception
*/
session  int connnum  socket clientsocket  string tracedirectory
boolean traceon  throws ioexception
this connnum   connnum
this clientsocket   clientsocket
this traceon   traceon
if  traceon
dsstrace   new dsstrace
dbtable   new hashtable
initialize tracedirectory
/**
* close session - close connection sockets and set state to closed
*
*/
protected void close   throws sqlexception
try
sessioninput close
sessionoutput close
clientsocket close
if  dbtable    null
for  enumeration e   dbtable elements     e hasmoreelements
database  e nextelement    close
catch  ioexception e        ignore ioexception when we are shutting down
finally
state   closed
dbtable   null
database   null
/**
* initialize a server trace for the drda protocol
*
* @param tracedirectory - directory for trace file
*/
protected void inittrace string tracedirectory
if  tracedirectory    null
tracefilename   tracedirectory       tracename_prefix
connnum  tracename_suffix
else
tracefilename   tracename_prefix  connnum  tracename_suffix
traceon   true
if  dsstrace    null
dsstrace   new dsstrace
dsstrace startcombuffertrace  tracefilename
/**
* set tracing on
*
* @param tracedirectory 	directory for trace files
*/
protected void settraceon string tracedirectory
if  traceon
return
inittrace tracedirectory
/**
* get whether tracing is on
*
* @return true if tracing is on false otherwise
*/
protected boolean istraceon
if  traceon
return true
else
return false
/**
* get connection number
*
* @return connection number
*/
protected int getconnnum
return connnum
/**
* set tracing off
*
*/
protected void settraceoff
if    traceon
return
traceon   false
if  tracefilename    null
dsstrace stopcombuffertrace
/**
* add database to session table
*/
protected void adddatabase database d
dbtable put d dbname  d
/**
* get database
*/
protected database getdatabase string dbname
return  database dbtable get dbname
/**
* get requried security checkpoint.
* used to verify excsat/accsec/secchk order.
*
*  @return next required security checkpoint or -1 if
*          neither accsec or secchk are required at this time.
*
*/
protected int getrequiredsecuritycodepoint
switch  state
case attexc
// on initial exchange of attributes we require accsec
// to access security manager
return codepoint accsec
case secacc
// after security manager has been accessed successfully we
// require secchk to check security
return codepoint secchk
default
return  1
/**
* check if a security codepoint is required
*
* @return true if accsec or secchk are required at this time.
*/
protected boolean requiressecuritycodepoint
return  getrequiredsecuritycodepoint       1
/**
* set session state
*
*/
protected void setstate int s
state   s
/**
* get session into initial state
*
* @param tracedirectory	- directory for trace files
*/
private void initialize string tracedirectory
throws ioexception
sessioninput   clientsocket getinputstream
sessionoutput   clientsocket getoutputstream
if  traceon
inittrace tracedirectory
state   init
protected  string buildruntimeinfo string indent  localizedresource locallangutil
string s
s    indent    locallangutil gettextmessage
connnum
if  database    null
return s
s    database buildruntimeinfo indent locallangutil
s
return s