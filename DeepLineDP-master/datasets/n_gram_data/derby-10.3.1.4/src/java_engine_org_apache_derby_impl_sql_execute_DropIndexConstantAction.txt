/*
derby - class org.apache.derby.impl.sql.execute.dropindexconstantaction
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl sql execute
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi error standardexception
import org apache derby iapi sql conn languageconnectioncontext
import org apache derby iapi sql depend dependency
import org apache derby iapi sql depend dependent
import org apache derby iapi sql dictionary conglomeratedescriptor
import org apache derby iapi sql dictionary datadescriptorgenerator
import org apache derby iapi sql dictionary datadictionary
import org apache derby iapi sql dictionary schemadescriptor
import org apache derby iapi sql dictionary tabledescriptor
import org apache derby iapi sql depend dependencymanager
import org apache derby iapi reference sqlstate
import org apache derby iapi sql execute constantaction
import org apache derby iapi sql activation
import org apache derby iapi store access transactioncontroller
import org apache derby catalog uuid
import java util enumeration
/**
*	this class  describes actions that are always performed for a
*	drop index statement at execution time.
*
*/
class dropindexconstantaction extends indexconstantaction
private string				fullindexname
private long				tableconglomerateid
// constructors
/**
*	make the constantaction for a drop index statement.
*
*
*	@param	fullindexname		fully qualified index name
*	@param	indexname			index name.
*	@param	tablename			the table name
*	@param	schemaname			schema that index lives in.
*  @param  tableid				uuid for table
*  @param  tableconglomerateid	heap conglomerate id for table
*
*/
dropindexconstantaction
string				fullindexname
string				indexname
string				tablename
string				schemaname
uuid				tableid
long				tableconglomerateid
super tableid  indexname  tablename  schemaname
this fullindexname   fullindexname
this tableconglomerateid   tableconglomerateid
// object methods
public	string	tostring
// do not put this under sanitymanager.debug - it is needed for
// error reporting.
return     fullindexname
// interface methods
/**
*	this is the guts of the execution-time logic for drop index.
*
*
* @exception standardexception		thrown on failure
*/
public void	executeconstantaction activation activation
throws standardexception
tabledescriptor td
conglomeratedescriptor cd
languageconnectioncontext lcc   activation getlanguageconnectioncontext
datadictionary dd   lcc getdatadictionary
transactioncontroller tc   lcc gettransactionexecute
/*
** inform the data dictionary that we are about to write to it.
** there are several calls to data dictionary "get" methods here
** that might be done in "read" mode in the data dictionary, but
** it seemed safer to do this whole operation in "write" mode.
**
** we tell the data dictionary we're done writing at the end of
** the transaction.
*/
dd startwriting lcc
// need to lock heap in exclusive mode first.  because we can't first
// shared lock the row in sysconglomerates and later exclusively lock
// it, this is potential deadlock (track 879).  also td need to be
// gotten after we get the lock, a concurrent thread could be modifying
// table shape (track 3804, 3825)
// older version (or target) has to get td first, potential deadlock
if  tableconglomerateid    0
td   dd gettabledescriptor tableid
if  td    null
throw standardexception newexception
sqlstate lang_table_not_found_during_execution  tablename
tableconglomerateid   td getheapconglomerateid
locktableforddl tc  tableconglomerateid  true
td   dd gettabledescriptor tableid
if  td    null
throw standardexception newexception sqlstate lang_table_not_found_during_execution  tablename
/*
** if the schema descriptor is null, then
** we must have just read ourselves in.
** so we will get the corresponding schema
** descriptor from the data dictionary.
*/
schemadescriptor sd   dd getschemadescriptor schemaname  tc  true
/* get the conglomerate descriptor for the index, along
* with an exclusive row lock on the row in sys.sysconglomerates
* in order to ensure that no one else compiles against the
* index.
*/
cd   dd getconglomeratedescriptor indexname  sd  true
if  cd    null
throw standardexception newexception sqlstate lang_index_not_found_during_execution  fullindexname
cd drop lcc  td