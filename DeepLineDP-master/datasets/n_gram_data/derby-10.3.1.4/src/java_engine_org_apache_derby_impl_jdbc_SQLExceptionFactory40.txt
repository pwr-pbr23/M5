/*
derby - class org.apache.derby.impl.jdbc.sqlexceptionfactory40
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl jdbc
import java sql sqldataexception
import java sql sqlexception
import java sql sqlintegrityconstraintviolationexception
import java sql sqlinvalidauthorizationspecexception
import java sql sqlsyntaxerrorexception
import java sql sqltransactionrollbackexception
import java sql sqltransientconnectionexception
import java sql sqlfeaturenotsupportedexception
import org apache derby iapi error standardexception
import org apache derby shared common reference sqlstate
/**
* sqlexceptionfactory40 overwrites getsqlexception method
* to return sqlexception or one of its sub class
*/
public class sqlexceptionfactory40 extends sqlexceptionfactory
/**
* overwrites super class method to create jdbc4 exceptions
* sqlstate class (prefix)     exception
* 0a                          java.sql.sqlfeaturenotsupportedexception
* 08                          java.sql.sqltransientconnectionexception
* 22                          java.sql.sqldataexception
* 28                          java.sql.sqlinvalidauthorizationspecexception
* 40                          java.sql.sqltransactionrollbackexception
* 42                          java.sql.sqlsyntaxerrorexception
*
* note the following divergence from jdbc3 behavior: when running
* a jdbc3 client, we return embedsqlexception. that exception class
* overrides throwable.tostring() and strips off the throwable's class name.
* in contrast, the following jdbc4 implementation returns
* subclasses of java.sql.exception. these subclasses inherit the behavior
* of throwable.tostring(). that is, their tostring() output includes
* their class name. this will break code which relies on the
* stripping behavior of embedsqlsxception.tostring().
*/
public sqlexception getsqlexception string message  string messageid
sqlexception next  int severity  throwable t  object args
string sqlstate   standardexception getsqlstatefromidentifier messageid
//
// create dummy exception which ferries arguments needed to serialize
// sqlexceptions across the drda network layer.
//
t   wrapargsfortransportacrossdrda  message  messageid  next  severity  t  args
final sqlexception ex
if  sqlstate startswith sqlstate connectivity_prefix
//none of the sqlstate supported by derby belongs to
//nontransientconnectionexception
ex   new sqltransientconnectionexception message  sqlstate
severity  t
else if  sqlstate startswith sqlstate sql_data_prefix
ex   new sqldataexception message  sqlstate  severity  t
else if  sqlstate startswith sqlstate integrity_violation_prefix
ex   new sqlintegrityconstraintviolationexception message  sqlstate
severity  t
else if  sqlstate startswith sqlstate authorization_spec_prefix
ex   new sqlinvalidauthorizationspecexception message  sqlstate
severity  t
else if  sqlstate startswith sqlstate transaction_prefix
ex   new sqltransactionrollbackexception message  sqlstate
severity  t
else if  sqlstate startswith sqlstate lse_compilation_prefix
ex   new sqlsyntaxerrorexception message  sqlstate  severity  t
else if  sqlstate startswith sqlstate unsupported_prefix
ex   new sqlfeaturenotsupportedexception message  sqlstate  severity  t
else
ex   new sqlexception message  sqlstate  severity  t
if  next    null
ex setnextexception next
return ex
/**
* unpack the exception, looking for an embedsqlexception which carries
* the derby messageid and args which we will serialize across drda so
* that the client can reconstitute a sqlexception with appropriate text.
* if we are running jdbc4, then the
* passed-in exception will hopefully wrap an informative embedsqlexception.
* see wrapargsfortransportacrossdrda() below.
*/
public	sqlexception	getargumentferry sqlexception se
throwable	cause   se getcause
if    cause    null       cause instanceof embedsqlexception   	  return se
else	  return  sqlexception  cause
/**
* <p>
* the following method helps handle derby-1178. the problem is that we may
* need to serialize our final sqlexception across the drda network layer.
* that serialization involves some clever encoding of the derby messageid and
* arguments. unfortunately, once we create one of the
* jdbc4-specific subclasses of sqlexception, we lose the messageid and
* args. this method creates a dummy embedsqlexception which preserves that
* information. we return the dummy exception.
* </p>
*/
private	sqlexception	wrapargsfortransportacrossdrda
string message  string messageid  sqlexception next  int severity  throwable t  object args
// generate an embedsqlexception
sqlexception e
super getsqlexception message  messageid
next    null ? null   getargumentferry next
severity  t  args
return e