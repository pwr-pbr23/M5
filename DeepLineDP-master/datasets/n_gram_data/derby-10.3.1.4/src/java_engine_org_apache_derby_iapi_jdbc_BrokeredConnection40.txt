/*
derby - class org.apache.derby.iapi.jdbc.brokeredconnection40
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi jdbc
import java sql array
import java sql blob
import java sql clob
import java sql connection
import java sql sqlclientinfoexception
import java sql nclob
import java sql sqlexception
import java sql sqlxml
import java sql struct
import java util properties
import org apache derby impl jdbc util
//import org.apache.derby.impl.jdbc.embedconnection40;
import org apache derby iapi reference sqlstate
public class brokeredconnection40 extends brokeredconnection30
/** creates a new instance of brokeredconnection40 */
public brokeredconnection40 brokeredconnectioncontrol control
super control
public array createarrayof string typename  object elements
throws sqlexception
try
return getrealconnection   createarrayof  typename  elements
catch  sqlexception sqle
notifyexception sqle
throw sqle
/**
*
* constructs an object that implements the <code>blob</code> interface. the object
* returned initially contains no data.  the <code>setbinarystream</code> and
* <code>setbytes</code> methods of the <code>blob</code> interface may be used to add data to
* the <code>blob</code>.
*
* @return  an object that implements the <code>blob</code> interface
* @throws sqlexception if an object that implements the
* <code>blob</code> interface can not be constructed, this method is
* called on a closed connection or a database access error occurs.
*
*/
public blob createblob   throws sqlexception
if  isclosed
throw util nocurrentconnection
// forward the createblob call to the physical connection
try
return getrealconnection   createblob
catch  sqlexception sqle
notifyexception sqle
throw sqle
/**
*
* constructs an object that implements the <code>clob</code> interface. the object
* returned initially contains no data.  the <code>setasciistream</code>,
* <code>setcharacterstream</code> and <code>setstring</code> methods of
* the <code>clob</code> interface may be used to add data to the <code>clob</code>.
*
* @return an object that implements the <code>clob</code> interface
* @throws sqlexception if an object that implements the
* <code>clob</code> interface can not be constructed, this method is
* called on a closed connection or a database access error occurs.
*
*/
public clob createclob   throws sqlexception
if  isclosed
throw util nocurrentconnection
// forward the createclob call to the physical connection
try
return getrealconnection   createclob
catch  sqlexception sqle
notifyexception sqle
throw sqle
public nclob createnclob   throws sqlexception
try
return getrealconnection   createnclob
catch  sqlexception sqle
notifyexception sqle
throw sqle
public sqlxml createsqlxml   throws sqlexception
try
return getrealconnection   createsqlxml
catch  sqlexception sqle
notifyexception sqle
throw sqle
public struct createstruct string typename  object attributes
throws sqlexception
try
return getrealconnection   createstruct  typename  attributes
catch  sqlexception sqle
notifyexception sqle
throw sqle
/**
* checks if the connection has not been closed and is still valid.
* the validity is checked by running a simple query against the
* database.
*
* @param timeout the time in seconds to wait for the database
* operation used to validate the connection to complete. if the
* timeout period expires before the operation completes, this
* method returns false. a value of 0 indicates a timeout is not
* applied to the database operation.
* @return true if the connection is valid, false otherwise
* @throws sqlexception if the call on the physical connection throws an
* exception.
*/
public final boolean isvalid int timeout  throws sqlexception
// check first if the brokered connection is closed
if  isclosed
return false
// forward the isvalid call to the physical connection
try
return getrealconnection   isvalid timeout
catch  sqlexception sqle
notifyexception sqle
throw sqle
/**
* <code>setclientinfo</code> forwards to the real connection.
*
* @param name the property key <code>string</code>
* @param value the property value <code>string</code>
* @exception sqlclientinfoexception if the property is not
* supported or the real connection could not be obtained.
*/
public void setclientinfo string name  string value
throws sqlclientinfoexception
try
getrealconnection   setclientinfo name  value
catch  sqlclientinfoexception se
notifyexception se
throw se
catch  sqlexception se
throw new sqlclientinfoexception
se getmessage    se getsqlstate
new failedproperties40
failedproperties40 makeproperties name value
getproperties
/**
* <code>setclientinfo</code> forwards to the real connection.  if
* the call to <code>getrealconnection</code> fails the resulting
* <code>sqlexception</code> is wrapped in a
* <code>sqlclientinfoexception</code> to satisfy the specified
* signature.
* @param properties a <code>properties</code> object with the
* properties to set.
* @exception sqlclientinfoexception if the properties are not
* supported or the real connection could not be obtained.
*/
public void setclientinfo properties properties
throws sqlclientinfoexception
try
getrealconnection   setclientinfo properties
catch  sqlclientinfoexception cie
notifyexception cie
throw cie
catch  sqlexception se
throw new sqlclientinfoexception
se getmessage    se getsqlstate
new failedproperties40 properties   getproperties
/**
* <code>getclientinfo</code> forwards to the real connection.
*
* @param name a <code>string</code> that is the property key to get.
* @return a <code>string</code> that is returned from the real connection.
* @exception sqlexception if a database access error occurs.
*/
public string getclientinfo string name
throws sqlexception
try
return getrealconnection   getclientinfo name
catch  sqlexception se
notifyexception se
throw se
/**
* <code>getclientinfo</code> forwards to the real connection.
*
* @return a <code>properties</code> object
* from the real connection.
* @exception sqlexception if a database access error occurs.
*/
public properties getclientinfo
throws sqlexception
try
return getrealconnection   getclientinfo
catch  sqlexception se
notifyexception se
throw se
/**
* returns an instance of jdbc4.0 speccific class brokeredstatement40
* @param  statementcontrol brokeredstatementcontrol
* @return an instance of brokeredstatement40
* throws java.sql.sqlexception
*/
public final brokeredstatement newbrokeredstatement
brokeredstatementcontrol statementcontrol  throws sqlexception
try
return new brokeredstatement40 statementcontrol  getjdbclevel
catch  sqlexception sqle
notifyexception sqle
throw sqle
public final brokeredpreparedstatement newbrokeredstatement brokeredstatementcontrol statementcontrol  string sql  object generatedkeys  throws sqlexception
try
return new brokeredpreparedstatement40 statementcontrol  getjdbclevel    sql  generatedkeys
catch  sqlexception sqle
notifyexception sqle
throw sqle
public final brokeredcallablestatement newbrokeredstatement brokeredstatementcontrol statementcontrol  string sql  throws sqlexception
try
return new brokeredcallablestatement40 statementcontrol  getjdbclevel    sql
catch  sqlexception sqle
notifyexception sqle
throw sqle
/**
* returns the type map for this connection.
*
* @return type map for this connection
* @exception sqlexception if a database access error occurs
*/
public final java util map<string class<?>> gettypemap   throws sqlexception
try
return getrealconnection   gettypemap
catch  sqlexception se
notifyexception se
throw se
final int getjdbclevel     return 4
/**
* returns false unless <code>interfaces</code> is implemented
*
* @param  interfaces             a class defining an interface.
* @return true                   if this implements the interface or
*                                directly or indirectly wraps an object
*                                that does.
* @throws java.sql.sqlexception  if an error occurs while determining
*                                whether this is a wrapper for an object
*                                with the given interface.
*/
public final boolean iswrapperfor class<?> interfaces  throws sqlexception
checkifclosed
return interfaces isinstance this
/**
* returns <code>this</code> if this class implements the interface
*
* @param  interfaces a class defining an interface
* @return an object that implements the interface
* @throws java.sql.sqlexption if no object if found that implements the
* interface
*/
public final <t> t unwrap java lang class<t> interfaces
throws sqlexception
checkifclosed
//derby does not implement non-standard methods on
//jdbc objects
try
return interfaces cast this
catch  classcastexception cce
throw util generatecssqlexception sqlstate unable_to_unwrap
interfaces