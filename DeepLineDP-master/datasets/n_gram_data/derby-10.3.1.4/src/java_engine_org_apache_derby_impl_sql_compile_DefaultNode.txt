/*
derby - class org.apache.derby.impl.sql.compile.defaultnode
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package	org apache derby impl sql compile
import org apache derby iapi services context contextmanager
import org apache derby iapi services compiler methodbuilder
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi sql compile compilercontext
import org apache derby iapi sql compile parser
import org apache derby iapi sql compile c_nodetypes
import org apache derby iapi sql conn languageconnectioncontext
import org apache derby iapi types typeid
import org apache derby iapi sql dictionary columndescriptor
import org apache derby iapi sql dictionary datadictionary
import org apache derby iapi sql dictionary defaultdescriptor
import org apache derby iapi sql dictionary tabledescriptor
import org apache derby iapi error standardexception
import org apache derby impl sql compile expressionclassbuilder
import org apache derby catalog types defaultinfoimpl
import java util vector
/**
* defaultnode represents a column/parameter default.
*/
public  class defaultnode extends valuenode
private string		columnname
private string		defaulttext
private valuenode	defaulttree
/**
* initializer for a column/parameter default.
*
* @param defaulttree			query tree for default
* @param defaulttext	the text of the default.
*/
public void init
object defaulttree
object defaulttext
this defaulttree    valuenode  defaulttree
this defaulttext    string  defaulttext
/**
* initializer for insert/update
*
*/
public void init object columnname
this columnname    string  columnname
/**
* get the text of the default.
*/
public	string	getdefaulttext
return	defaulttext
/**
* get the query tree for the default.
*
* @return the query tree for the default.
*/
valuenode getdefaulttree
return defaulttree
/**
* convert this object to a string.  see comments in querytreenode.java
* for how this should be done for tree printing.
*
* @return	this object as a string
*/
public string tostring
if  sanitymanager debug
return     defaulttree
defaulttext
super tostring
else
return
/**
* bind this expression.  this means binding the sub-expressions,
* as well as figuring out what the return type is for this expression.
* in this case, there are no sub-expressions, and the return type
* is already known, so this is just a stub.
*
* @param fromlist		the from list for the query this
*				expression is in, for binding columns.
* @param subquerylist		the subquery list being built as we find subquerynodes
* @param aggregatevector	the aggregate vector being built as we find aggregatenodes
*
* @return	the new top of the expression tree.
*
* @exception standardexception		thrown on failure
*/
public valuenode bindexpression fromlist fromlist  subquerylist subquerylist
vector	aggregatevector
throws standardexception
columndescriptor	cd
tabledescriptor		td
if  sanitymanager debug
sanitymanager assert fromlist size      0
if     fromlist elementat 0  instanceof frombasetable
sanitymanager throwassert
fromlist elementat 0  getclass   getname
// get the tabledescriptor for the target table
td     frombasetable  fromlist elementat 0   gettabledescriptor
// get the columndescriptor for the column
cd   td getcolumndescriptor columnname
if  sanitymanager debug
sanitymanager assert cd    null
/* if we have the default text, then parse and bind it and
* return the tree.
*/
defaultinfoimpl defaultinfo    defaultinfoimpl  cd getdefaultinfo
if  defaultinfo    null
string		defaulttext   defaultinfo getdefaulttext
valuenode	defaulttree   parsedefault defaulttext  getlanguageconnectioncontext
getcompilercontext
/* query is dependent on the defaultdescriptor */
defaultdescriptor defaultdescriptor   cd getdefaultdescriptor
getdatadictionary
getcompilercontext   createdependency defaultdescriptor
return defaulttree bindexpression
fromlist
subquerylist
aggregatevector
else
// default is null
valuenode nullnode    valuenode  getnodefactory   getnode
c_nodetypes untyped_null_constant_node
getcontextmanager
return nullnode
/**
*	parse a default and turn it into a query tree.
*
*	@param	defaulttext			text of default.
* @param	lcc					languageconnectioncontext
* @param	cc					compilercontext
*
* @return	the parsed default as a query tree.
*
* @exception standardexception		thrown on failure
*/
public	static valuenode	parsedefault
string						defaulttext
languageconnectioncontext	lcc
compilercontext				cc
throws standardexception
parser						p
valuenode					defaulttree
/* get a statement to pass to the parser */
/* we're all set up to parse. we have to build a compilable sql statement
* before we can parse -  so, we goober up a values defaulttext.
*/
string values       defaulttext
/*
** get a new compiler context, so the parsing of the select statement
** doesn't mess up anything in the current context (it could clobber
** the parametervalueset, for example).
*/
compilercontext newcc   lcc pushcompilercontext
p   newcc getparser
/* finally, we can call the parser */
// since this is always nested inside another sql statement, so toplevel flag
// should be false
statementnode qt   p parsestatement values
if  sanitymanager debug
if     qt instanceof cursornode
sanitymanager throwassert
qt getclass   getname
cursornode cn    cursornode  qt
if     cn getresultsetnode   instanceof rowresultsetnode
sanitymanager throwassert
cn getresultsetnode   getclass   getname
defaulttree     resultcolumn
cursornode  qt  getresultsetnode   getresultcolumns   elementat 0
getexpression
lcc popcompilercontext newcc
return	defaulttree
/**
* @exception standardexception		thrown on failure
*/
public void generateexpression expressionclassbuilder acb
methodbuilder mb
throws standardexception
if  sanitymanager debug
sanitymanager throwassert
/**
* @inheritdoc
*/
protected boolean isequivalent valuenode other
return false