/*
derby - class org.apache.derby.iapi.jdbc.brokeredcallablestatement40
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi jdbc
import java io reader
import java io inputstream
import java sql blob
import java sql clob
import java sql nclob
import java sql rowid
import java sql sqlexception
import java sql sqlxml
import org apache derby iapi reference sqlstate
import org apache derby impl jdbc util
public class brokeredcallablestatement40 extends  brokeredcallablestatement30
public brokeredcallablestatement40 brokeredstatementcontrol control  int jdbclevel  string sql  throws sqlexception
super control jdbclevel sql
public reader getcharacterstream int parameterindex
throws sqlexception
return getcallablestatement   getcharacterstream parameterindex
public reader getcharacterstream string parametername
throws sqlexception
return getcallablestatement   getcharacterstream parametername
public reader getncharacterstream int parameterindex
throws sqlexception
return getcallablestatement   getncharacterstream parameterindex
public reader getncharacterstream string parametername
throws sqlexception
return getcallablestatement   getncharacterstream parametername
public string getnstring int parameterindex
throws sqlexception
return getcallablestatement   getnstring parameterindex
public string getnstring string parametername
throws sqlexception
return getcallablestatement   getnstring parametername
public rowid getrowid int parameterindex  throws sqlexception
return getcallablestatement   getrowid parameterindex
public rowid getrowid string parametername  throws sqlexception
return getcallablestatement   getrowid parametername
public void setrowid string parametername  rowid x  throws sqlexception
getcallablestatement   setrowid parametername x
public void setblob string parametername  blob x
throws sqlexception
getcallablestatement   setblob parametername  x
public void setclob string parametername  clob x
throws sqlexception
getcallablestatement   setclob parametername  x
public void setnstring string parametername  string value
throws sqlexception
getcallablestatement   setnstring parametername value
public final void setncharacterstream string parametername  reader value
throws sqlexception
getcallablestatement   setncharacterstream parametername  value
public void setncharacterstream string parametername reader value long length
throws sqlexception
getcallablestatement   setncharacterstream parametername value length
public void setnclob string parametername  nclob value  throws sqlexception
getcallablestatement   setnclob parametername value
public final void setclob string parametername  reader reader
throws sqlexception
getcallablestatement   setclob parametername  reader
public void setclob string parametername  reader reader  long length
throws sqlexception
getcallablestatement   setclob parametername reader length
public final void setblob string parametername  inputstream inputstream
throws sqlexception
getcallablestatement   setblob parametername  inputstream
public void setblob string parametername  inputstream inputstream  long length
throws sqlexception
getcallablestatement   setblob parametername inputstream length
public final void setnclob string parametername  reader reader
throws sqlexception
getcallablestatement   setnclob parametername  reader
public void setnclob string parametername  reader reader  long length
throws sqlexception
getcallablestatement   setnclob parametername reader length
public nclob getnclob int i  throws sqlexception
return getcallablestatement   getnclob i
public nclob getnclob string parametername  throws sqlexception
return getcallablestatement   getnclob parametername
public void setsqlxml string parametername  sqlxml xmlobject  throws sqlexception
getcallablestatement   setsqlxml parametername xmlobject
public sqlxml getsqlxml int parameterindex  throws sqlexception
return getcallablestatement   getsqlxml parameterindex
public sqlxml getsqlxml string parametername  throws sqlexception
return getcallablestatement   getsqlxml parametername
/************************************************************************
*preparedstatement40 methods
*************************************************************************/
/**
* sets the designated parameter to the given input stream.
*
* @param parameterindex the first parameter is 1, the second is 2, ...
* @param x the java input stream that contains the ascii parameter value
* @throws sqlexception if a database access error occurs or this method is
*      called on a closed <code>preparedstatement</code>
*/
public final void setasciistream int parameterindex  inputstream x
throws sqlexception
getcallablestatement   setasciistream parameterindex  x
/**
* sets the designated parameter to the given input stream.
*
* @param parameterindex the first parameter is 1, the second is 2, ...
* @param x the java input stream which contains the binary parameter value
* @throws sqlexception if a database access error occurs or this method is
*      called on a closed <code>preparedstatement</code>
*/
public final void setbinarystream int parameterindex  inputstream x
throws sqlexception
getcallablestatement   setbinarystream parameterindex  x
/**
* sets the designated parameter to the given <code>reader</code> object.
*
* @param parameterindex the first parameter is 1, the second is 2, ...
* @param reader the <code>java.io.reader</code> object that contains the
*      unicode data
* @throws sqlexception if a database access error occurs or this method is
*      called on a closed <code>preparedstatement</code>
*/
public final void setcharacterstream int parameterindex  reader reader
throws sqlexception
getcallablestatement   setcharacterstream parameterindex  reader
public void setrowid int parameterindex  rowid x  throws sqlexception
getpreparedstatement   setrowid parameterindex x
public void setnstring int index  string value  throws sqlexception
getpreparedstatement   setnstring index value
public void setncharacterstream int parameterindex  reader value
throws sqlexception
getcallablestatement   setncharacterstream parameterindex  value
public void setncharacterstream int index  reader value  long length  throws sqlexception
getpreparedstatement   setncharacterstream index value length
public void setnclob int index  nclob value  throws sqlexception
getpreparedstatement   setnclob index value
/**
* sets the designated parameter to a <code>reader</code> object.
* this method differs from the <code>setcharacterstream(int,reader)</code>
* method because it informs the driver that the parameter value should be
* sent to the server as a <code>clob</code>.
*
* @param parameterindex the first parameter is 1, the second is 2, ...
* @param reader an object that contains the data to set the parameter
*      value to.
* @throws sqlexception if a database access error occurs, this method is
*      called on a closed preparedstatement
*/
public final void setclob int parameterindex  reader reader
throws sqlexception
getcallablestatement   setclob parameterindex  reader
public void setclob int parameterindex  reader reader  long length
throws sqlexception
getpreparedstatement   setclob parameterindex reader length
/**
* sets the designated parameter to a <code>inputstream</code> object.
* this method differs from the <code>setbinarystream(int, inputstream)
* </code>  method because it informs the driver that the parameter value
* should be sent to the server as a <code>blob</code>.
*
* @param inputstream an object that contains the data to set the parameter
*      value to.
* @throws sqlexception if a database access error occurs, this method is
*      called on a closed <code>preparedstatement</code>
*/
public final void setblob int parameterindex  inputstream inputstream
throws sqlexception
getcallablestatement   setblob parameterindex  inputstream
public void setblob int parameterindex  inputstream inputstream  long length
throws sqlexception
getpreparedstatement   setblob parameterindex inputstream length
public final void setnclob int parameterindex  reader reader
throws sqlexception
getcallablestatement   setnclob parameterindex  reader
public void setnclob int parameterindex  reader reader  long length
throws sqlexception
getpreparedstatement   setnclob parameterindex reader length
public void setsqlxml int parameterindex  sqlxml xmlobject  throws sqlexception
getpreparedstatement   setsqlxml parameterindex xmlobject
/**
* checks if the statement is closed.
*
* @return <code>true</code> if the statement is closed,
* <code>false</code> otherwise
* @exception sqlexception if an error occurs
*/
public final boolean isclosed   throws sqlexception
return getcallablestatement   isclosed
/**
* returns <code>this</code> if this class implements the interface
*
* @param  interfaces a class defining an interface
* @return an object that implements the interface
* @throws java.sql.sqlexption if no object if found that implements the
* interface
*/
public <t> t unwrap java lang class<t> interfaces
throws sqlexception
checkifclosed
//derby does not implement non-standard methods on
//jdbc objects
try
return interfaces cast this
catch  classcastexception cce
throw util generatecssqlexception sqlstate unable_to_unwrap
interfaces
/**
* forwards to the real callablestatement.
* @return true if the underlying callablestatement is poolable,
* false otherwise.
* @throws sqlexception if the forwarding call fails.
*/
public boolean ispoolable   throws sqlexception
return getstatement   ispoolable
/**
* forwards to the real callablestatement.
* @param poolable new value for the poolable hint.
* @throws sqlexception if the forwarding call fails.
*/
public void setpoolable boolean poolable  throws sqlexception
getstatement   setpoolable poolable
/**
* sets the designated parameter to the given input stream, which will have
* the specified number of bytes.
*
* @param parameterindex the first parameter is 1, the second is 2, ...
* @param x the java input stream which contains the ascii parameter value
* @param length the number of bytes in the stream
* @exception sqlexception thrown on failure.
*
*/
public final void setasciistream int parameterindex  inputstream x  long length
throws sqlexception
getcallablestatement   setasciistream parameterindex x length
/**
* sets the designated parameter to the given input stream, which will have
* the specified number of bytes.
*
* @param parameterindex the first parameter is 1, the second is 2, ...
* @param x the java input stream which contains the binary parameter value
* @param length the number of bytes in the stream
* @exception sqlexception thrown on failure.
*
*/
public final void setbinarystream int parameterindex  inputstream x  long length
throws sqlexception
getcallablestatement   setbinarystream parameterindex x length
/**
* sets the designated parameter to the given reader, which will have
* the specified number of bytes.
*
* @param parameterindex the first parameter is 1, the second is 2, ...
* @param x the java reader which contains the unicode value
* @param length the number of bytes in the stream
* @exception sqlexception thrown on failure.
*
*/
public final void setcharacterstream int parameterindex  reader x  long length
throws sqlexception
getcallablestatement   setcharacterstream parameterindex x length
public final void setasciistream string parametername  inputstream x
throws sqlexception
getcallablestatement   setasciistream parametername  x
/**
* sets the designated parameter to the given input stream, which will have
* the specified number of bytes.
*
* @param parametername the name of the parameter
* @param x the java input stream which contains the ascii parameter value
* @param length the number of bytes in the stream
* @exception sqlexception thrown on failure.
*
*/
public final void setasciistream string parametername  inputstream x  long length
throws sqlexception
getcallablestatement   setasciistream parametername x length
public final void setbinarystream string parametername  inputstream x
throws sqlexception
getcallablestatement   setbinarystream parametername  x
/**
* sets the designated parameter to the given input stream, which will have
* the specified number of bytes.
*
* @param parametername the name of the parameter
* @param x the java input stream which contains the binary parameter value
* @param length the number of bytes in the stream
* @exception sqlexception thrown on failure.
*
*/
public final void setbinarystream string parametername  inputstream x  long length
throws sqlexception
getcallablestatement   setbinarystream parametername x length
public final void setcharacterstream string parametername  reader x
throws sqlexception
getcallablestatement   setcharacterstream parametername  x
/**
* sets the designated parameter to the given reader, which will have
* the specified number of bytes.
*
* @param parametername the name of the parameter
* @param x the java reader which contains the unicode value
* @param length the number of bytes in the stream
* @exception sqlexception thrown on failure.
*
*/
public final void setcharacterstream string parametername  reader x  long length
throws sqlexception
getcallablestatement   setcharacterstream parametername x length