/*
derby - class org.apache.derby.catalog.systemprocedures
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby catalog
import java security accesscontroller
import java security privilegedaction
import java security policy
import java sql connection
import java sql databasemetadata
import java sql preparedstatement
import java sql resultset
import java sql sqlexception
import java util nosuchelementexception
import java util random
import java util stringtokenizer
import org apache derby iapi db factory
import org apache derby iapi db propertyinfo
import org apache derby iapi error publicapi
import org apache derby iapi error standardexception
import org apache derby iapi reference property
import org apache derby iapi reference sqlstate
import org apache derby iapi services cache cachemanager
import org apache derby iapi services i18n messageservice
import org apache derby iapi services property propertyutil
import org apache derby iapi sql conn connectionutil
import org apache derby iapi sql conn languageconnectioncontext
import org apache derby iapi util idutil
import org apache derby iapi util stringutil
import org apache derby impl jdbc embeddatabasemetadata
import org apache derby impl jdbc util
import org apache derby impl load export
import org apache derby impl load import
import org apache derby impl sql execute jarutil
import org apache derby jdbc internaldriver
/**
some system built-in procedures, and help routines.  now used for network server.
these procedures are built-in to the sysibm schema which match the db2 sysibm procedures.
currently information on those can be found at url:
ftp://ftp.software.ibm.com/ps/products/db2/info/vr8/pdf/letter/db2l2e80.pdf
<p>
also used for builtin-routines, such as sysfun functions, when direct calls
into java libraries cannot be made.
*/
public class systemprocedures
private final static int sql_best_rowid   1
private final static int sql_rowver   2
private final static string driver_type_option
private final static string odbc_driver_option
// this token delimiter value is used to separate the tokens for multiple
// error messages.  this is used in drdaconnthread
/**
* <code>sqlerrmc_message_delimiter</code> when message argument tokes are sent,
* this value separates the tokens for mulitiple error messages
*/
public  static string sqlerrmc_message_delimiter   new string new char   char 20  char 20  char 20
/**
method used by derby network server to get localized message (original call
from jcc.
@param sqlcode	sqlcode, not used.
@param errmclen	sqlerrmc length
@param sqlerrmc	sql error message tokens, variable part of error message (ie.,
arguments) plus messageid, separated by separator.
@param sqlerrp	not used
@param errd0  	not used
@param errd1  	not used
@param errd2  	not used
@param errd3  	not used
@param errd4  	not used
@param errd5  	not used
@param warn		not used
@param sqlstate	5-char sql state
@param file		not used
@param localestr	client locale in string
@param msg		output parameter, localized error message
@param rc			output parameter, return code -- 0 for success
*/
public static void sqlcamessage int sqlcode  short errmclen  string sqlerrmc
string sqlerrp  int errd0  int errd1  int errd2
int errd3  int errd4  int errd5  string warn
string sqlstate  string file  string localestr
string msg  int rc
int nummessages   1
// figure out if there are multiple exceptions in sqlerrmc. if so get each one
// translated and append to make the final result.
for  int index 0    nummessages
if  sqlerrmc indexof sqlerrmc_message_delimiter  index      1
break
index   sqlerrmc indexof sqlerrmc_message_delimiter  index
sqlerrmc_message_delimiter length
// putting it here instead of preparecall it directly is because inter-jar reference tool
// cannot detect/resolve this otherwise
if  nummessages    1
messageservice getlocalizedmessage sqlcode  errmclen  sqlerrmc  sqlerrp  errd0  errd1
errd2  errd3  errd4  errd5  warn  sqlstate  file
localestr  msg  rc
else
int startidx 0  endidx
string sqlerror
string errmsg   new string
for  int i 0  i<nummessages  i
endidx   sqlerrmc indexof sqlerrmc_message_delimiter  startidx
if  i    nummessages 1 				   last error message
sqlerror   sqlerrmc substring startidx
else sqlerror   sqlerrmc substring startidx  endidx
if  i > 0
/* strip out the sqlstate */
sqlstate   sqlerror substring 0  5
sqlerror   sqlerror substring 6
msg        sqlstate
messageservice getlocalizedmessage sqlcode   short sqlerror length    sqlerror
sqlerrp  errd0  errd1  errd2  errd3  errd4  errd5
warn  sqlstate  file  localestr  errmsg  rc
if  rc    0 			   success
if  i    0
msg   errmsg
else msg    errmsg 	   append the new message
startidx   endidx   sqlerrmc_message_delimiter length
/**
* get the default or nested connection corresponding to the url
* jdbc:default:connection. we do not use drivermanager here
* as it is not supported in jsr 169. in addition we need to perform
* more checks for null drivers or the driver returing null from connect
* as that logic is in drivermanager.
* @return the nested connection
* @throws sqlexception not running in a sql statement
*/
private static connection getdefaultconn  throws sqlexception
internaldriver id   internaldriver activedriver
if  id    null
connection conn   id connect    null
if  conn    null
return conn
throw util nocurrentconnection
/**
*  get the databasemetadata for the current connection for use in
*  mapping the jcc sysibm.* calls to the derby databasemetadata methods
*
*  @return the databasemetadata object of the current connection
*/
private static databasemetadata getdmd   throws sqlexception
connection conn   getdefaultconn
return conn getmetadata
/**
*  map sqlprocedures to embeddatabasemetadata.getprocedures
*
*  @param catalogname sysibm.sqlprocedures catalogname varchar(128),
*  @param schemaname  sysibm.sqlprocedures schemaname  varchar(128),
*  @param procname    sysibm.sqlprocedures procname    varchar(128),
*  @param options     sysibm.sqlprocedures options     varchar(4000))
*  @param rs          output parameter, the resultset object containing
*                     the result of getprocedures
*  	if options contains the string 'datatype='odbc'', call the odbc
*  	version of this procedure.
*/
public static void sqlprocedures  string catalogname  string schemaname  string procname
string options  resultset rs  throws sqlexception
rs   isforodbc options
?   embeddatabasemetadata getdmd    getproceduresforodbc
catalogname  schemaname  procname
getdmd   getprocedures catalogname  schemaname  procname
/**
*  map sqlfunctions to embeddatabasemetadata.getfunctions
*
*  @param catalogname sysibm.sqlfunctions catalogname varchar(128),
*  @param schemaname  sysibm.sqlfunctions schemaname  varchar(128),
*  @param funcname    sysibm.sqlfunctions procname    varchar(128),
*  @param options     sysibm.sqlfunctions options     varchar(4000))
*                     (not used)
*  @param rs          output parameter, the resultset object containing
*                     the result of getfunctions
*/
public static void sqlfunctions string catalogname
string schemaname
string funcname
string options
resultset rs  throws sqlexception
rs     embeddatabasemetadata getdmd
getfunctions catalogname  schemaname  funcname
/**
* map sqltables to embeddatabasemetadata.getschemas, getcatalogs,
* gettabletypes and gettables, and return the result of the
* databasemetadata calls.
*
* <p>jcc and dnc overload this method:
* <ul>
* <li>if options contains the string 'getschemas=1',
*     call getschemas()</li>
* <li>if options contains the string 'getschemas=2',
*     call getschemas(string, string)</li>
* <li>if options contains the string 'getcatalogs=1',
*     call getcatalogs()</li>
* <li>if options contains the string 'gettabletypes=1',
*     call gettabletypes()</li>
* <li>otherwise, call gettables()</li>
* </ul>
*
*  @param catalogname sysibm.sqltables catalogname varchar(128),
*  @param schemaname  sysibm.sqltables schemaname  varchar(128),
*  @param tablename   sysibm.sqltables tablename   varchar(128),
*  @param tabletype   sysibm.sqltables tabletype   varchar(4000))
*  @param options     sysibm.sqltables options     varchar(4000))
*  @param rs          output parameter, the resultset object
*/
public static void sqltables  string catalogname  string schemaname  string tablename
string tabletype  string options  resultset rs
throws sqlexception
string optionvalue   getoption    options
if  optionvalue    null    optionvalue trim   equals
rs   getdmd   getcatalogs
return
optionvalue   getoption    options
if  optionvalue    null    optionvalue trim   equals
rs   getdmd   gettabletypes
return
optionvalue   getoption    options
if  optionvalue    null
optionvalue   optionvalue trim
if  optionvalue equals
rs   getdmd   getschemas
return
if  optionvalue equals
embeddatabasemetadata edmd    embeddatabasemetadata  getdmd
rs   edmd getschemas catalogname  schemaname
return
string typearray   null
if  tabletype    null
stringtokenizer st   new stringtokenizer tabletype
typearray   new string
int i   0
while  st hasmoretokens
typearray   st nexttoken
i
rs   getdmd   gettables catalogname  schemaname  tablename  typearray
/**
*  map sqlforeignkeys to embeddatabasemetadata.getimportedkeys, getexportedkeys, and getcrossreference
*
*  @param pkcatalogname sysibm.sqlforeignkeys pkcatalogname varchar(128),
*  @param pkschemaname  sysibm.sqlforeignkeys pkschemaname  varchar(128),
*  @param pktablename   sysibm.sqlforeignkeys pktablename   varchar(128),
*  @param fkcatalogname sysibm.sqlforeignkeys fkcatalogname varchar(128),
*  @param fkschemaname  sysibm.sqlforeignkeys fkschemaname  varchar(128),
*  @param fktablename   sysibm.sqlforeignkeys fktablename   varchar(128),
*  @param options       sysibm.sqlforeignkeys options       varchar(4000))
*  @param rs            output parameter, the resultset object
*                     	 containing the result of the databasemetadata calls
*  			 jcc overloads this method:
*  			 if options contains the string 'exportedkey=1', call getimportedkeys
*  			 if options contains the string 'importedkey=1', call getexportedkeys
*  			 otherwise, call getcrossreference
*/
public static void sqlforeignkeys  string pkcatalogname  string pkschemaname  string pktablename
string fkcatalogname  string fkschemaname  string fktablename
string options  resultset rs
throws sqlexception
string exportedkeyprop   getoption    options
string importedkeyprop   getoption    options
if  importedkeyprop    null    importedkeyprop trim   equals
rs   getdmd   getimportedkeys fkcatalogname
fkschemaname fktablename
else if  exportedkeyprop    null    exportedkeyprop trim   equals
rs   getdmd   getexportedkeys pkcatalogname
pkschemaname pktablename
else
//odbc allows table name value 'null'. jdbc does not
rs   isforodbc options
?   embeddatabasemetadata getdmd    getcrossreferenceforodbc
pkcatalogname  pkschemaname  pktablename
fkcatalogname  fkschemaname  fktablename
getdmd   getcrossreference
pkcatalogname  pkschemaname  pktablename
fkcatalogname  fkschemaname  fktablename
/**
*  helper for sqlforeignkeys and sqltables
*
*  @return option	string containing the value for a given option
*  @param  pattern 	string containing the option to search for
*  @param  options 	string containing the options to search through
*/
private static string getoption string pattern  string options
if  options    null
return null
int start   options lastindexof pattern
if  start < 0      not there
return null
int valuestart   options indexof    start
if  valuestart < 0      invalid options string
return null
int valueend   options indexof    valuestart
if  valueend < 0      last option
return options substring valuestart   1
else
return options substring valuestart   1  valueend
/**
*  map sqlprocedurecols to embeddatabasemetadata.getprocedurecolumns
*
*  @param catalogname sysibm.sqlprocedurecols catalogname varchar(128),
*  @param schemaname  sysibm.sqlprocedurecols schemaname  varchar(128),
*  @param procname    sysibm.sqlprocedurecols procname    varchar(128),
*  @param paramname   sysibm.sqlprocedurecols paramname   varchar(128),
*  @param options     sysibm.sqlprocedurecols options     varchar(4000))
*  @param rs          output parameter, the resultset object containing
*			           the result of getprocedurecolumns
*  	if options contains the string 'datatype='odbc'', call the odbc
*  	version of this procedure.
*/
public static void sqlprocedurecols  string catalogname  string schemaname  string procname
string paramname  string options  resultset rs
throws sqlexception
rs   isforodbc options
?   embeddatabasemetadata getdmd    getprocedurecolumnsforodbc
catalogname  schemaname  procname  paramname
getdmd   getprocedurecolumns catalogname  schemaname  procname  paramname
/**
*  map sqlfunctionparameters to
*  embeddatabasemetadata.getfunctioncolumns()
*
* @param catalogname sysibm.sqlfunctionparameters catalogname
* varchar(128),
* @param schemaname sysibm.sqlfunctionparameters schemaname
* varchar(128),
* @param funcname sysibm.sqlfunctionparameters funcname
* varchar(128),
* @param paramname sysibm.sqlfunctionparameters paramname
* varchar(128),
* @param options sysibm.sqlfunctionparameters options
* varchar(4000))
* @param rs output parameter, the resultset object containing the
* result of getfunctioncolumns().
*/
public static void sqlfunctionparams string catalogname
string schemaname
string funcname
string paramname
string options
resultset rs  throws sqlexception
rs     embeddatabasemetadata getdmd
getfunctioncolumns catalogname  schemaname  funcname
paramname
/**
*  map sqlcolumns to embeddatabasemetadata.getcolumns
*
*  @param catalogname sysibm.sqlcolumns catalogname varchar(128),
*  @param schemaname  sysibm.sqlcolumns schemaname  varchar(128),
*  @param tablename   sysibm.sqlcolumns tablename   varchar(128),
*  @param columnname  sysibm.sqlcolumns columnname  varchar(128),
*  @param options     sysibm.sqlcolumns options     varchar(4000))
*  	if options contains the string 'datatype='odbc'', call the odbc
*  	version of this procedure.
*  @param rs          output parameter, the resultset object containing
*                     the result of getprocedures
*/
public static void sqlcolumns  string catalogname  string schemaname  string tablename
string columnname  string options  resultset rs
throws sqlexception
rs   isforodbc options
?   embeddatabasemetadata getdmd    getcolumnsforodbc
catalogname  schemaname  tablename  columnname
getdmd   getcolumns catalogname  schemaname  tablename  columnname
/**
*  map sqlcolprivileges to embeddatabasemetadata.getcolumnprivileges
*
*  @param catalogname sysibm.sqlcolprivileges catalogname varchar(128),
*  @param schemaname  sysibm.sqlcolprivileges schemaname  varchar(128),
*  @param tablename   sysibm.sqlcolprivileges procname    varchar(128),
*  @param columnname  sysibm.sqlcolprivileges columnname  varchar(128),
*  @param options     sysibm.sqlcolprivileges options     varchar(4000))
*  @param rs          output parameter, the resultset object containing
*                     the result of getcolumnprivileges
*/
public static void sqlcolprivileges  string catalogname  string schemaname  string tablename
string columnname  string options  resultset rs
throws sqlexception
rs   getdmd   getcolumnprivileges catalogname  schemaname  tablename  columnname
/**
*  map sqltableprivileges to embeddatabasemetadata.gettableprivileges
*
*  @param catalogname sysibm.sqltableprivileges catalogname varchar(128),
*  @param schemaname  sysibm.sqltableprivileges schemaname  varchar(128),
*  @param tablename   sysibm.sqltableprivileges procname    varchar(128),
*  @param options     sysibm.sqltableprivileges options     varchar(4000))
*  @param rs          output parameter, the resultset object containing
*                     the result of gettableprivileges
*/
public static void sqltableprivileges  string catalogname  string schemaname  string tablename
string options  resultset rs
throws sqlexception
rs   getdmd   gettableprivileges catalogname  schemaname  tablename
/**
*  map sqlprimarykeys to embeddatabasemetadata.getprimarykeys
*
*  @param catalogname sysibm.sqlprimarykeys catalogname varchar(128),
*  @param schemaname  sysibm.sqlprimarykeys schemaname  varchar(128),
*  @param tablename   sysibm.sqlprimarykeys tablename   varchar(128),
*  @param options     sysibm.sqlprimarykeys options     varchar(4000))
*  	if options contains the string 'datatype='odbc'', call the odbc
*  	version of this procedure.
*  @param rs          output parameter, the resultset object containing
*                     the result of getprimarykeys
*/
public static void sqlprimarykeys  string catalogname  string schemaname  string tablename  string options  resultset rs
throws sqlexception
rs   getdmd   getprimarykeys catalogname  schemaname  tablename
/**
*  map sqlgettypeinfo to embeddatabasemetadata.gettypeinfo
*
*  @param datatype  sysibm.sqlgettypeinfo datatype smallint,
*  @param options   sysibm.sqlgettypeinfo options  varchar(4000))
*  	if options contains the string 'datatype='odbc'', call the odbc
*  	version of this procedure.
*  @param rs        output parameter, the resultset object containing the
*                   result of gettypeinfo
*/
public static void sqlgettypeinfo  short datatype  string options  resultset rs
throws sqlexception
rs   isforodbc options
?   embeddatabasemetadata getdmd    gettypeinfoforodbc
getdmd   gettypeinfo
/**
*  map sqlstatistics to embeddatabasemetadata.getindexinfo
*
*  @param catalogname sysibm.sqlstatistics catalogname varchar(128),
*  @param schemaname  sysibm.sqlstatistics schemaname  varchar(128),
*  @param tablename   sysibm.sqlstatistics tablename   varchar(128),
*  @param unique      sysibm.sqlstatistics unique      smallint; 0=sql_index_unique(0); 1=sql_index_all(1),
*  @param approximate sysibm.sqlstatistics approximate smallint; 1=true; 0=false,
*  @param options     sysibm.sqlstatistics options     varchar(4000))
*  	if options contains the string 'datatype='odbc'', call the odbc
*  	version of this procedure.
*  @param rs          output parameter, the resultset object containing
*                     the result of getindexinfo
*/
public static void sqlstatistics  string catalogname  string schemaname  string tablename
short unique  short approximate  string options  resultset rs
throws sqlexception
boolean boolunique    unique    0  ? true  false
boolean boolapproximate    approximate    1  ? true  false
rs   isforodbc options
?   embeddatabasemetadata getdmd    getindexinfoforodbc
catalogname  schemaname  tablename  boolunique  boolapproximate
getdmd   getindexinfo catalogname  schemaname  tablename  boolunique  boolapproximate
/**
*  map sqlspecialcolumns to embeddatabasemetadata.getbestrowidentifier and getversioncolumns
*
*  @param coltype     sysibm.sqlspecialcolumns coltype     smallint,
*			where 1 means getbestrowidentifier and 2 getversioncolumns was called.
*  @param catalogname sysibm.sqlspecialcolumns catalogname varchar(128),
*  @param schemaname  sysibm.sqlspecialcolumns schemaname  varchar(128),
*  @param tablename   sysibm.sqlspecialcolumns tablename   varchar(128),
*  @param scope       sysibm.sqlspecialcolumns scope       smallint,
*  @param nullable    sysibm.sqlspecialcolumns nullable    smallint; 0=false, 1=true,
*  @param options     sysibm.sqlspecialcolumns options     varchar(4000))
*  	if options contains the string 'datatype='odbc'', call the odbc
*  	version of this procedure.
*  @param rs          output parameter, the resultset object containing
*                     the result of the databasemetadata call
*/
public static void sqlspecialcolumns  short coltype  string catalogname  string schemaname  string tablename
short scope  short nullable  string options  resultset rs
throws sqlexception
boolean boolnullable    nullable    1  ? true  false
if  coltype    sql_best_rowid
rs   isforodbc options
?   embeddatabasemetadata getdmd    getbestrowidentifierforodbc
catalogname  schemaname  tablename  scope  boolnullable
getdmd   getbestrowidentifier catalogname  schemaname  tablename  scope  boolnullable
else    coltype must be sql_rowver
rs   isforodbc options
?   embeddatabasemetadata getdmd    getversioncolumnsforodbc
catalogname  schemaname  tablename
getdmd   getversioncolumns catalogname  schemaname  tablename
/**
*  map sqludts to embeddatabasemetadata.getudts
*
*  @param catalogname     sysibm.sqludts catalogname          varchar(128),
*  @param schemapattern   sysibm.sqludts schema_name_pattern  varchar(128),
*  @param typenamepattern sysibm.sqludts type_name_pattern    varchar(128),
*  @param udttypes        sysibm.sqludts udttypes             varchar(128),
*  @param options         sysibm.sqludts options              varchar(4000))
*  @param rs              output parameter, the resultset object containing
*                         the result of getudts, which will be empty
*/
public static void sqludts  string catalogname  string schemapattern  string typenamepattern
string udttypes  string options  resultset rs
throws sqlexception
int types   null
if  udttypes    null    udttypes length   > 0
stringtokenizer tokenizer   new stringtokenizer  udttypes
int udttypecount   tokenizer counttokens
types   new int
string udttype
try
for  int i   0  i < udttypecount  i
udttype   tokenizer nexttoken
types   integer parseint  udttype
catch  numberformatexception nfe
throw new sqlexception      udttype
catch  nosuchelementexception nsee
throw new sqlexception
rs   getdmd   getudts catalogname  schemapattern  typenamepattern  types
/*
*  map sysibm.metadata to appropriate embeddatabasemetadata methods
*  for now, using the sps in org.apache.derby.iapi.db.jdbc.datadictionary.metadata_net.properties
*
*/
public static void metadata  resultset rs
throws sqlexception
rs     embeddatabasemetadata  getdmd    getclientcachedmetadata
/**
* helper for odbc metadata calls.
* @param options	string containig the options to search through.
* @return true if options contain odbc indicator; false otherwise.
*/
private static boolean isforodbc string options
string optionvalue   getoption driver_type_option  options
return   optionvalue    null     optionvalue touppercase   equals odbc_driver_option
/**
* set/delete the value of a property of the database in current connection.
* <p>
* will be called as syscs_util.syscs_set_database_property.
*
* @param key       the property key.
* @param value     the new value, if null the property is deleted.
*
* @exception  standardexception  standard exception policy.
**/
public static void syscs_set_database_property
string  key
string  value
throws sqlexception
propertyinfo setdatabaseproperty key  value
/**
* get the value of a property of the database in current connection.
* <p>
* will be called as syscs_util.syscs_get_database_property.
*
* @param key       the property key.
*
* @exception  standardexception  standard exception policy.
**/
public static string syscs_get_database_property
string  key
throws sqlexception
languageconnectioncontext lcc   connectionutil getcurrentlcc
try
return propertyutil getdatabaseproperty lcc gettransactionexecute    key
catch  standardexception se
throw publicapi wrapstandardexception se
/**
* compress the table.
* <p>
* calls the "alter table compress {sequential}" sql.  this syntax
* is not db2 compatible so it mapped by a system routine.  this
* routine will be called when an application calls:
*
*     syscs_util.syscs_compress_table
* <p>
*
* @param schema        schema name of the table to compress.  must be
*                      non-null, no default is used.
* @param tablename     table name of the table to compress.  must be
*                      non-null.
* @param sequential    if non-zero then rebuild indexes sequentially,
*                      if 0 then rebuild all indexes in parallel.
*
* @exception  standardexception  standard exception policy.
**/
public static void syscs_compress_table
string  schema
string  tablename
int     sequential
throws sqlexception
string query
sequential    0 ?
connection conn   getdefaultconn
conn preparestatement query  executeupdate
conn close
/**
* freeze the database.
* <p>
* call internal routine to freeze the database so that a backup
* can be made.
*
* @exception  standardexception  standard exception policy.
**/
public static void syscs_freeze_database
throws sqlexception
factory getdatabaseofconnection   freeze
/**
* unfreeze the database.
* <p>
* call internal routine to unfreeze the database, which was "freezed"
* by calling syscs_freeze_database().
* can be made.
*
* @exception  standardexception  standard exception policy.
**/
public static void syscs_unfreeze_database
throws sqlexception
factory getdatabaseofconnection   unfreeze
public static void syscs_checkpoint_database
throws sqlexception
factory getdatabaseofconnection   checkpoint
/**
* backup the database to a backup directory.
*
* this procedure will throw error, if there are any unlogged
* operation executed in the same transaction backup is started.
* if there any unlogged operations in progess in other transaction, it
* will wait until those transactions are completed before starting the backup.
*
* examples of unlogged operations include: create index and bulk insert.
* note that once the backup begins these operations will not block,
* instead they are automatically converted into logged operations.
*
* @param backupdir the name of the directory where the backup should be
*                  stored. this directory will be created if it
*                  does not exist.
* @exception standardexception thrown on error
*/
public static void syscs_backup_database string  backupdir
throws sqlexception
factory getdatabaseofconnection   backup backupdir  true
/**
* backup the database to a backup directory.
*
* this procedure will throw error, if there are any uncommitted unlogged
* operation before stating the backup. it will not wait for the unlogged
* operations to complete.
*
* examples of unlogged operations include: create index and bulk insert.
* note that once the backup begins these operations will not block,
* instead they are automatically converted into logged operations.
*
* @param backupdir the name of the directory where the backup should be
*                  stored. this directory will be created if it
*                  does not exist.
* @exception standardexception thrown on error
*/
public static void syscs_backup_database_nowait string  backupdir
throws sqlexception
factory getdatabaseofconnection   backup backupdir  false
/**
* backup the database to a backup directory and enable the log archive
* mode that will keep the archived log files required for roll-forward
* from this version of the backup.
*
* this procedure will throw error if there are any unlogged
* operation executed in the same transaction backup is started.
* if there any unlogged operations in progess in other transaction, it
* will wait until those transactions are completed before starting the backup.
*
* examples of unlogged operations include: create index and bulk insert.
* note that once the backup begins these operations will not block,
* instead they are automatically converted into logged operations.
*
* @param backupdir the name of the directory where the backup should be
*                  stored. this directory will be created if not it
*                  does not exist.
* @param deleteonlinearchivedlogfiles  if <tt>non-zero</tt> deletes online
*                 archived log files that exist before this backup, delete
*                 will occur  only after the backup is  complete.
* @exception standardexception thrown on error.
*/
public static void syscs_backup_database_and_enable_log_archive_mode
string  backupdir
int     deleteonlinearchivedlogfiles
throws sqlexception
factory getdatabaseofconnection   backupandenablelogarchivemode
backupdir
deleteonlinearchivedlogfiles    0
true
/**
* backup the database to a backup directory and enable the log archive
* mode that will keep the archived log files required for roll-forward
* from this version backup.
*
* this procedure will throw error, if there are any uncommitted unlogged
* operation before stating the backup. it will not wait for the unlogged
* operations to complete.
*
* examples of unlogged operations include: create index and bulk insert.
* note that once the backup begins these operations will not block,
* instead they are automatically converted into logged operations.
*
* @param backupdir the name of the directory where the backup should be
*                  stored. this directory will be created if not it
*                  does not exist.
*
* @param deleteonlinearchivedlogfiles  if <tt>non-zero</tt> deletes online
*                  archived log files that exist before this backup, delete
*                  will occur  only after the backup is  complete.
*
* @exception standardexception thrown on error.
*/
public static void syscs_backup_database_and_enable_log_archive_mode_nowait
string  backupdir
int     deleteonlinearchivedlogfiles
throws sqlexception
factory getdatabaseofconnection   backupandenablelogarchivemode
backupdir
deleteonlinearchivedlogfiles    0
false
/**
* disables the log archival process, i.e no old log files
* will be kept around for a roll-forward recovery.
*
* @param deleteonlinearchivedlogfiles  if <tt>non-zero</tt> deletes all the
*        online archived log files that exist before this call immediately.
*
* @exception standardexception thrown on error
*/
public static void syscs_disable_log_archive_mode
int     deleteonlinearchivedlogfiles
throws sqlexception
factory getdatabaseofconnection   disablelogarchivemode
deleteonlinearchivedlogfiles    0
public static void syscs_set_runtimestatistics
int     enable
throws sqlexception
connectionutil getcurrentlcc   setruntimestatisticsmode enable    0 ? true   false
public static void syscs_set_statistics_timing
int     enable
throws sqlexception
connectionutil getcurrentlcc   setstatisticstiming enable    0 ? true   false
public static int syscs_check_table
string  schema
string  tablename
throws sqlexception
boolean ret_val
org apache derby iapi db consistencychecker checktable
schema  tablename
return ret_val ? 1   0
public static void syscs_inplace_compress_table
string  schema
string  tablename
int     purgerows
int     defragementrows
int     truncateend
throws sqlexception
org apache derby iapi db onlinecompress compresstable
schema
tablename
purgerows    0
defragementrows    0
truncateend    0
return
public static string syscs_get_runtimestatistics
throws sqlexception
object rts   connectionutil getcurrentlcc   getruntimestatisticsobject
if  rts    null
return null
return rts tostring
/*
** sqlj procedures.
*/
/**
install a jar file in the database.
sqlj.install_jar
@param url url of the jar file to be installed in the database.
@param jar sql name jar will be installed as.
@param deploy ignored.
@exception sqlexception error installing jar file.
*/
public static void install_jar string url  string jar  int deploy
throws sqlexception
try
languageconnectioncontext lcc   connectionutil getcurrentlcc
string st   idutil parsequalifiedname jar trim    true
string schemaname
string sqlname
if  st length    1
schemaname   lcc getcurrentschemaname
sqlname   st
else
schemaname   st
sqlname   st
checkjarsqlname sqlname
jarutil install lcc  schemaname  sqlname  url
catch  standardexception se
throw publicapi wrapstandardexception se
/**
replace a jar file in the database.
sqlj.replace_jar
@param url url of the jar file to be installed in the database.
@param jar sql name of jar to be replaced.
@exception sqlexception error replacing jar file.
*/
public static void replace_jar string url  string jar
throws sqlexception
try
languageconnectioncontext lcc   connectionutil getcurrentlcc
string st   idutil parsequalifiedname jar trim    true
string schemaname
string sqlname
if  st length    1
schemaname   lcc getcurrentschemaname
sqlname   st
else
schemaname   st
sqlname   st
checkjarsqlname sqlname
jarutil replace lcc
schemaname  sqlname  url
catch  standardexception se
throw publicapi wrapstandardexception se
/**
remove a jar file from the database.
@param jar      sql name of jar to be replaced.
@param undeploy ignored.
@exception sqlexception error removing jar file.
*/
public static void remove_jar string jar  int undeploy
throws sqlexception
try
languageconnectioncontext lcc   connectionutil getcurrentlcc
string st   idutil parsequalifiedname jar trim    true
string schemaname
string sqlname
if  st length    1
schemaname   lcc getcurrentschemaname
sqlname   st
else
schemaname   st
sqlname   st
checkjarsqlname sqlname
jarutil drop lcc  schemaname  sqlname
catch  standardexception se
throw publicapi wrapstandardexception se
private static void checkjarsqlname string sqlname
throws standardexception
// weed out a few special cases that cause problems.
if      sqlname length      0
sqlname indexof        1
throw standardexception newexception sqlstate id_parse_error
/**
* export data from a table to given file.
* <p>
* will be called by system procedure:
* syscs_export_table(in schemaname  varchar(128),
* in tablename    varchar(128),  in filename varchar(32672) ,
* in columndelimiter char(1),  in characterdelimiter char(1) ,
* in codeset varchar(128))
* @exception  standardexception  standard exception policy.
**/
public static void syscs_export_table
string  schemaname
string  tablename
string  filename
string  columndelimiter
string  characterdelimiter
string  codeset
throws sqlexception
connection conn   getdefaultconn
export exporttable conn  schemaname   tablename   filename
columndelimiter   characterdelimiter  codeset
//export finished successfully, issue a commit
conn commit
/**
* export data from a table to given files. large objects
* are exported to an external file and the reference to it is written
* in the main export file.
* <p>
* will be called by system procedure:
* syscs_export_table_lobs_to_extfile(in schemaname  varchar(128),
* in tablename    varchar(128),  in filename varchar(32672) ,
* in columndelimiter char(1),  in characterdelimiter char(1) ,
* in codeset varchar(128), in lobsfilename varchar(32672))
* @exception  standardexception  standard exception policy.
**/
public static void syscs_export_table_lobs_to_extfile
string  schemaname
string  tablename
string  filename
string  columndelimiter
string  characterdelimiter
string  codeset
string  lobsfilename
throws sqlexception
connection conn   getdefaultconn
export exporttable conn  schemaname   tablename   filename
columndelimiter   characterdelimiter
codeset  lobsfilename
//export finished successfully, issue a commit
conn commit
/**
* export data from a  select statement to given file.
* <p>
* will be called as
* syscs_export_query(in selectstatement  varchar(32672),
* in filename varchar(32672) ,
* in columndelimiter char(1),  in characterdelimiter char(1) ,
* in codeset varchar(128))
*
* @exception  standardexception  standard exception policy.
**/
public static void syscs_export_query
string  selectstatement
string  filename
string  columndelimiter
string  characterdelimiter
string  codeset
throws sqlexception
connection conn   getdefaultconn
export exportquery conn  selectstatement  filename
columndelimiter   characterdelimiter  codeset
//export finished successfully, issue a commit
conn commit
/**
* export data from a  select statement to given file. large objects
* are exported to an external file and the reference to it is written
* in the main export file.
* <p>
* will be called as
* syscs_export_query_lobs_to_extfile(in selectstatement  varchar(32672),
* in filename varchar(32672) ,
* in columndelimiter char(1),  in characterdelimiter char(1) ,
* in codeset varchar(128), in lobsfilename varchar(32672))
*
* @exception  standardexception  standard exception policy.
**/
public static void syscs_export_query_lobs_to_extfile
string  selectstatement
string  filename
string  columndelimiter
string  characterdelimiter
string  codeset
string  lobsfilename
throws sqlexception
connection conn   getdefaultconn
export exportquery conn  selectstatement  filename
columndelimiter   characterdelimiter
codeset  lobsfilename
//export finished successfully, issue a commit
conn commit
/**
* import  data from a given file to a table.
* <p>
* will be called by system procedure as
* syscs_import_table(in schemaname  varchar(128),
* in tablename    varchar(128),  in filename varchar(32672) ,
* in columndelimiter char(1),  in characterdelimiter char(1) ,
* in codeset varchar(128), in  replace smallint)
* @exception  standardexception  standard exception policy.
**/
public static void syscs_import_table
string  schemaname
string  tablename
string  filename
string  columndelimiter
string  characterdelimiter
string  codeset
short   replace
throws sqlexception
connection conn   getdefaultconn
try
import importtable conn  schemaname   tablename   filename
columndelimiter   characterdelimiter  codeset
replace  false
catch sqlexception se
//issue a rollback on any errors
conn rollback
throw  se
//import finished successfull, commit it.
conn commit
/**
* import  data from a given file to a table. data for large object
* columns is in an external file, the reference to it is in the main
* input file. read the lob data from the external file using the
* lob location info in the main import file.
* <p>
* will be called by system procedure as
* syscs_import_table_lobs_from_extfile(in schemaname  varchar(128),
* in tablename    varchar(128),  in filename varchar(32672) ,
* in columndelimiter char(1),  in characterdelimiter char(1) ,
* in codeset varchar(128), in  replace smallint)
* @exception  standardexception  standard exception policy.
**/
public static void syscs_import_table_lobs_from_extfile
string  schemaname
string  tablename
string  filename
string  columndelimiter
string  characterdelimiter
string  codeset
short   replace
throws sqlexception
connection conn   getdefaultconn
try
import importtable conn  schemaname   tablename   filename
columndelimiter   characterdelimiter
codeset  replace
true   lobs in external file
catch sqlexception se
//issue a rollback on any errors
conn rollback
throw  se
//import finished successfull, commit it.
conn commit
/**
* import data from a given file into the specified table columns from the
* specified columns in the file.
* <p>
* will be called as
* syscs_import_data (in schemaname varchar(128), in tablename varchar(128),
*                    in insertcolumnlist varchar(32762), in columnindexes varchar(32762),
*                    in filename varchar(32762), in columndelimiter char(1),
*                    in characterdelimiter char(1), in codeset varchar(128),
*                    in replace smallint)
*
* @exception  standardexception  standard exception policy.
**/
public static void syscs_import_data
string  schemaname
string  tablename
string  insertcolumnlist
string  columnindexes
string  filename
string  columndelimiter
string  characterdelimiter
string  codeset
short   replace
throws sqlexception
connection conn   getdefaultconn
try
import importdata conn  schemaname   tablename
insertcolumnlist  columnindexes  filename
columndelimiter  characterdelimiter
codeset  replace  false
catch sqlexception se
//issue a rollback on any errors
conn rollback
throw  se
//import finished successfull, commit it.
conn commit
/**
* import data from a given file into the specified table columns
* from the  specified columns in the file. data for large object
* columns is in an  external file, the reference to it is in the
* main input file. read the lob data from the external file using
* the lob location info in the main import file.
* <p>
* will be called as
* syscs_import_data_lobs_from_extfile(in schemaname varchar(128),
*               in tablename varchar(128),
*               in insertcolumnlist varchar(32762),
*               in columnindexes varchar(32762),
*               in filename varchar(32762), in columndelimiter char(1),
*               in characterdelimiter char(1), in codeset varchar(128),
*               in replace smallint)
*
* @exception  standardexception  standard exception policy.
**/
public static void syscs_import_data_lobs_from_extfile
string  schemaname
string  tablename
string  insertcolumnlist
string  columnindexes
string  filename
string  columndelimiter
string  characterdelimiter
string  codeset
short   replace
throws sqlexception
connection conn   getdefaultconn
try
import importdata conn  schemaname   tablename
insertcolumnlist  columnindexes  filename
columndelimiter  characterdelimiter
codeset  replace  true
catch sqlexception se
//issue a rollback on any errors
conn rollback
throw  se
//import finished successfull, commit it.
conn commit
/**
* perform bulk insert using the specificed vti .
* <p>
* will be called as
* syscs_bulk_insert (in schemaname varchar(128), in tablename varchar(128),
*                    in vtiname varchar(32762), in vtiarg varchar(32762))
*
* @exception  standardexception  standard exception policy.
**/
public static void syscs_bulk_insert
string  schemaname
string  tablename
string  vtiname
string  vtiarg
throws sqlexception
connection conn   getdefaultconn
string entityname    schemaname    null ? tablename   schemaname       tablename
string binsertsql
entityname
vtiname
schemaname
tablename
vtiarg
preparedstatement ps   conn preparestatement binsertsql
ps executeupdate
ps close
/**
* reload the policy file.
* <p>
* system procedure called thusly:
*
* syscs_util.syscs_reload_security_policy()
**/
public static void syscs_reload_security_policy
throws sqlexception
// if no security manager installed then there
// is no policy to refresh. calling policy.getpolicy().refresh()
// without a securitymanager seems to lock in a policy with
// no permissions thus ignoring the system property java.security.policy
// when later installing a securitymanager.
if  system getsecuritymanager      null
return
try
accesscontroller doprivileged
new privilegedaction
public object run
policy getpolicy   refresh
return null
catch  securityexception se
throw util policynotreloaded se
/**
* method to return the constant pi.
* sysfun.pi().
* @return pi
*/
public static double pi
return strictmath pi
/**
* constant for natural log(10).
*/
private static final double log10   strictmath log 10 0d
/**
* base 10 log function. sysfun.log10
* calculated by
* <code>
* log(value) / log(10)
* </code>
* where log is the natural log.
*/
public static double log10 double value
return strictmath log value    log10
/**
* cotangent function. sysfun.cot
* @see <a href="http://mathworld.wolfram.com/hyperbolicfunctions.html">hyperbolicfunctions</a>
* @return 1 / tan(x)
*/
public static double cot double value
return 1 0   strictmath tan value
/**
* hyperbolic cosine function. sysfun.cosh
* @see <a href="http://mathworld.wolfram.com/hyperbolicfunctions.html">hyperbolicfunctions</a>
* @return 1/2 (e^x + e^-x)
*/
public static double cosh double value
return  strictmath exp value    strictmath exp  value     2 0
/**
* hyperbolic sine function. sysfun.sinh
* @see <a href="http://mathworld.wolfram.com/hyperbolicfunctions.html">hyperbolicfunctions</a>
* @return 1/2 (e^x - e^-x)
*/
public static double sinh double value
return  strictmath exp value    strictmath exp  value     2 0
/**
* hyperbolic tangent function. sysfun.tanh
* @see <a href="http://mathworld.wolfram.com/hyperbolicfunctions.html">hyperbolicfunctions</a>
* @return (e^x - e^-x) / (e^x + e^-x)
*/
public static double tanh double value
return  strictmath exp value    strictmath exp  value
strictmath exp value    strictmath exp  value
/**
* method to return the sign of the given value.
* sysfun.sign().
* @return 0, 1 or -1
*/
public static int sign double value
return value < 0 ?  1   value > 0 ? 1   0
/**
* pseudo-random number function.
* @return a random number
*/
public static double rand int seed
return  new random seed   nextdouble
/**
* set the connection level authorization for
* a specific user - syscs_util.syscs_set_user_access.
* @throws sqlexception error setting the permission
*/
public static void syscs_set_user_access string username
string connectionpermission
throws sqlexception
try
// validate the name, however the name stored in
// the properties is in the external format, as a
// quoted identifier if required. the external form
// is what the user passes into this method so that
// gets used in modifying the lists.
idutil getuserauthorizationid username
string addlistproperty
if  property full_access equals connectionpermission
removefromaccesslist property read_only_access_users_property
username
addlistproperty   property full_access_users_property
else if  property read_only_access equals connectionpermission
removefromaccesslist property full_access_users_property
username
addlistproperty   property read_only_access_users_property
else if  connectionpermission    null
removefromaccesslist property full_access_users_property
username
removefromaccesslist property read_only_access_users_property
username
return
else
throw standardexception newexception sqlstate uu_unknown_permission
connectionpermission
string addlist   syscs_get_database_property addlistproperty
syscs_set_database_property addlistproperty
idutil appendid username  addlist
catch  standardexception se
throw publicapi wrapstandardexception se
/**
* utility method for syscs_set_user_access removes a user from
* one of the access lists, driven by the property name.
*/
private static void removefromaccesslist
string listproperty  string username
throws sqlexception  standardexception
string removelist   syscs_get_database_property listproperty
if  removelist    null
syscs_set_database_property listproperty
idutil deleteid username  removelist
/**
* get the connection level authorization for
* a specific user - syscs_util.syscs_get_user_access.
*/
public static string syscs_get_user_access string username
throws sqlexception
try
string sqluser   idutil getuserauthorizationid username
string fulluserlist
syscs_get_database_property property full_access_users_property
if  idutil idonlist sqluser  fulluserlist
return property full_access
string readonlyuserlist
syscs_get_database_property property read_only_access_users_property
if  idutil idonlist sqluser  readonlyuserlist
return property read_only_access
string defaultaccess
syscs_get_database_property property default_connection_mode_property
if  defaultaccess    null
defaultaccess   stringutil sqltouppercase defaultaccess
else
defaultaccess   property full_access     is the default
return defaultaccess
catch  standardexception se
throw publicapi wrapstandardexception se
/**
* empty as much of the cache as possible. it is not guaranteed
* that the cache is empty after this call, as statements may be kept
* by currently executing queries, activations that are about to be garbage
* collected.
*/
public static void syscs_empty_statement_cache
throws sqlexception
languageconnectioncontext lcc   connectionutil getcurrentlcc
cachemanager statementcache
lcc getlanguageconnectionfactory   getstatementcache
if  statementcache    null
statementcache ageout