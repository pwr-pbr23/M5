/*
derby - class org.apache.derby.iapi.types.sqlreal
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi types
import org apache derby iapi reference sqlstate
import org apache derby iapi services io arrayinputstream
import org apache derby iapi types booleandatavalue
import org apache derby iapi types datavaluedescriptor
import org apache derby iapi types numberdatavalue
import org apache derby iapi types stringdatavalue
import org apache derby iapi types typeid
import org apache derby iapi services io storable
import org apache derby iapi services io storedformatids
import org apache derby iapi error standardexception
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi types numberdatatype
import org apache derby iapi types sqlboolean
import org apache derby iapi services cache classsize
import java io objectoutput
import java io objectinput
import java io ioexception
import java sql resultset
import java sql preparedstatement
import java sql sqlexception
/**
* sqlreal satisfies the datavaluedescriptor
* interfaces (i.e., orderabledatatype). it implements a real column,
* e.g. for storing a column value; it can be specified
* when constructed to not allow nulls. nullability cannot be changed
* after construction, as it affects the storage size and mechanism.
* <p>
* because orderabledatatype is a subtype of valuecolumn,
* sqlreal can play a role in either a valuecolumn/row
* or a orderabledatatype/row, interchangeably.
* <p>
* we assume the store has a flag for nullness of the value,
* and simply return a 0-length array for the stored form
* when the value is null.
* <p>
* performance: there are likely alot of performance improvements
* possible for this implementation -- it new's float
* more than it probably wants to.
* <p>
* this is called sqlreal even though it maps to the java float type,
* to avoid confusion with whether it maps to the sql float type or not.
* it doesn't, it maps to the sql real type.
* <p>
* this is modeled after sqlsmallint.
* @see sqlsmallint
*
*/
public final class sqlreal
extends numberdatatype
/*
* datavaluedescriptor interface
* (mostly implemented in datatype)
*/
// jdbc is lax in what it permits and what it
// returns, so we are similarly lax
/**
* @see datavaluedescriptor#getint
* @exception standardexception thrown on failure to convert
*/
public int	getint   throws standardexception
if   value >    double  integer max_value   1 0d        value <    double  integer min_value    1 0d
throw standardexception newexception sqlstate lang_outside_range_for_datatype
return  int  value
/**
* @see datavaluedescriptor#getbyte
* @exception standardexception thrown on failure to convert
*/
public byte	getbyte   throws standardexception
if   value >    double  byte max_value   1 0d        value <    double  byte min_value    1 0d
throw standardexception newexception sqlstate lang_outside_range_for_datatype
return  byte  value
/**
* @exception standardexception thrown on failure to convert
* @see datavaluedescriptor#getshort
*/
public short	getshort   throws standardexception
if   value >    double  short max_value   1 0d        value <    double  short min_value    1 0d
throw standardexception newexception sqlstate lang_outside_range_for_datatype
return  short  value
/**
* @see datavaluedescriptor#getlong
* @exception standardexception thrown on failure to convert
*/
public long	getlong   throws standardexception
if   value >    double  long max_value   1 0d        value <    double  long min_value    1 0d
throw standardexception newexception sqlstate lang_outside_range_for_datatype
return  long  value
/**
* @see datavaluedescriptor#getfloat
*/
public float	getfloat
return value
/**
* @see datavaluedescriptor#getdouble
*/
public double	getdouble
return  double  value
/**
* double implementation. convert to a bigdecimal using getstring.
*/
public int typetobigdecimal
return java sql types char
// for lack of a specification: 0 or null is false,
// all else is true
/**
* @see datavaluedescriptor#getboolean
*/
public boolean	getboolean
return  value    0
/**
* @see datavaluedescriptor#getstring
*/
public string	getstring
if  isnull
return null
else
return float tostring value
/**
* @see datavaluedescriptor#getlength
*/
public int	getlength
return real_length
/**
* @see datavaluedescriptor#getobject
*/
public object	getobject
if  isnull
return null
else
return new float value
// this is for datatype's error generator
public string gettypename
return typeid real_name
/*
* storable interface, implies externalizable, typedformat
*/
/**
return my format identifier.
@see org.apache.derby.iapi.services.io.typedformat#gettypeformatid
*/
public int gettypeformatid
return storedformatids sql_real_id
/*
* see if the real value is null.
*/
/** @see storable#isnull */
public boolean isnull
return isnull
public void writeexternal objectoutput out  throws ioexception
// never called when value is null
if  sanitymanager debug
sanitymanager assert   isnull
out writefloat value
/** @see java.io.externalizable#readexternal */
public void readexternal objectinput in  throws ioexception
// setvalue(in.readfloat()); // can throw standardexception which we can't pass on
// assume we wrote the value, so we can read it without problem, for now.
value   in readfloat
isnull   false
public void readexternalfromarray arrayinputstream in  throws ioexception
// setvalue(in.readfloat()); // can throw standardexception which we can't pass on
// assume we wrote the value, so we can read it without problem, for now.
value   in readfloat
isnull   false
/**
* @see storable#restoretonull
*
*/
public void restoretonull
value   0
isnull   true
/** @exception standardexception		thrown on error */
protected int typecompare datavaluedescriptor arg  throws standardexception
/* neither are null, get the value */
// jsk: should use double? depends on db2
float thisvalue   this getfloat
float othervalue   numberdatatype normalizereal arg getfloat        could gotten from    may not be a float
if  thisvalue    othervalue
return 0
else if  thisvalue > othervalue
return 1
else
return  1
/*
* datavaluedescriptor interface
*/
/** @see datavaluedescriptor#getclone */
public datavaluedescriptor getclone
sqlreal ret   new sqlreal
ret value   this value
ret isnull   this isnull
return ret
/**
* @see datavaluedescriptor#getnewnull
*/
public datavaluedescriptor getnewnull
return new sqlreal
/**
* @see datavaluedescriptor#setvaluefromresultset
*
* @exception standardexception		thrown on error
* @exception sqlexception		thrown on error
*/
public void setvaluefromresultset resultset resultset  int colnumber
boolean isnullable
throws standardexception  sqlexception
float fv   resultset getfloat colnumber
if  isnullable    resultset wasnull
restoretonull
else
setvalue fv
/**
set the value into a preparedstatement.
@exception sqlexception error setting value in preparedstatement
*/
public final void setinto preparedstatement ps  int position  throws sqlexception
if  isnull
ps setnull position  java sql types real
return
ps setfloat position  value
/**
set this value into a resultset for a subsequent resultset.insertrow
or resultset.updaterow. this method will only be called for non-null values.
@exception sqlexception thrown by the resultset object
@exception standardexception thrown by me accessing my value.
*/
public final void setinto resultset rs  int position  throws sqlexception  standardexception
rs updatefloat position  value
/*
* class interface
*/
/*
* constructors
*/
/** no-arg constructor, required by formattable. */
// this constructor also gets used when we are
// allocating space for a float.
public sqlreal
isnull   true
public sqlreal float val
throws standardexception
value   numberdatatype normalizereal val
public sqlreal float obj  throws standardexception
if  isnull    obj    null
else
value   numberdatatype normalizereal obj floatvalue
/**
@exception standardexception thrown if string not accepted
*/
public void setvalue string thevalue
throws standardexception
if  thevalue    null
value   0
isnull   true
else
// what if string is rouned to zero?
//system.out.println("sqlreal.setvalue(string) - rounding issue?"+thevalue);
try
setvalue double valueof thevalue trim    doublevalue
catch  numberformatexception nfe
throw invalidformat
public  void setvalue number thevalue  throws standardexception
if  objectnull thevalue
return
if  sanitymanager assert
if    thevalue instanceof java lang float
sanitymanager throwassert     thevalue getclass
setvalue thevalue floatvalue
/**
called for an application setting this value using a bigdecimal
*/
public  void setbigdecimal number bigdecimal  throws standardexception
if  objectnull bigdecimal
return
// note bigdecimal.floatvalue() handles the case where
// its value is outside the range of a float. it returns
// infinity values which should throw an exception in setvalue(double).
setvalue bigdecimal floatvalue
public void setvalue float thevalue
throws standardexception
value   numberdatatype normalizereal thevalue
isnull   false
public void setvalue int thevalue
value   thevalue
isnull   false
public void setvalue long thevalue
value   thevalue
isnull   false
/**
@exception standardexception if outsiderangeforreal
*/
public void setvalue double thevalue  throws standardexception
// jsk: where does this thevalue come from? if some caller is rounding parsing from string
// we might have rounding error (different than db2 behaviour)
float fv    float  thevalue
// detect rounding taking place at cast time
if  fv    0 0f    thevalue    0 0d
throw standardexception newexception sqlstate lang_outside_range_for_datatype  typeid real_name
setvalue fv
/**
* @see numberdatavalue#setvalue
*
*/
public void setvalue boolean thevalue
value   thevalue?1 0
isnull   false
/**
* set the value from a correctly typed float object.
* @throws standardexception
*/
void setobject object thevalue  throws standardexception
setvalue   float  thevalue  floatvalue
protected void setfrom datavaluedescriptor thevalue  throws standardexception
// rounding issue to solve!!!/jsk
//double.getfloat() would make rounding problem if it got called here!!!
// need to check where it is called from!
if  thevalue instanceof stringdatavalue
//system.out.println("\tcalling setvalue(string)");
setvalue thevalue getstring
else if  thevalue instanceof sqldouble
//system.out.println("\tcalling setvalue(double)");
setvalue thevalue getdouble
else
setvalue thevalue getfloat
/*
* datavaluedescriptor interface
*/
/** @see datavaluedescriptor#typeprecedence */
public int typeprecedence
return typeid real_precedence
/*
** sql operators
*/
/**
* the = operator as called from the language module, as opposed to
* the storage module.
*
* @param left			the value on the left side of the =
* @param right			the value on the right side of the =
*
* @return	a sql boolean value telling whether the two parameters are equal
*
* @exception standardexception		thrown on error
*/
public booleandatavalue equals datavaluedescriptor left
datavaluedescriptor right
throws standardexception
return sqlboolean truthvalue left
right
left getfloat      right getfloat
/**
* the <> operator as called from the language module, as opposed to
* the storage module.
*
* @param left			the value on the left side of the <>
* @param right			the value on the right side of the <>
*
* @return	a sql boolean value telling whether the two parameters
*			are not equal
*
* @exception standardexception		thrown on error
*/
public booleandatavalue notequals datavaluedescriptor left
datavaluedescriptor right
throws standardexception
return sqlboolean truthvalue left
right
left getfloat      right getfloat
/**
* the < operator as called from the language module, as opposed to
* the storage module.
*
* @param left			the value on the left side of the <
* @param right			the value on the right side of the <
*
* @return	a sql boolean value telling whether the first operand is less
*			than the second operand
*
* @exception standardexception		thrown on error
*/
public booleandatavalue lessthan datavaluedescriptor left
datavaluedescriptor right
throws standardexception
return sqlboolean truthvalue left
right
left getfloat   < right getfloat
/**
* the > operator as called from the language module, as opposed to
* the storage module.
*
* @param left			the value on the left side of the >
* @param right			the value on the right side of the >
*
* @return	a sql boolean value telling whether the first operand is greater
*			than the second operand
*
* @exception standardexception		thrown on error
*/
public booleandatavalue greaterthan datavaluedescriptor left
datavaluedescriptor right
throws standardexception
return sqlboolean truthvalue left
right
left getfloat   > right getfloat
/**
* the <= operator as called from the language module, as opposed to
* the storage module.
*
* @param left			the value on the left side of the <=
* @param right			the value on the right side of the <=
*
* @return	a sql boolean value telling whether the first operand is less
*			than or equal to the second operand
*
* @exception standardexception		thrown on error
*/
public booleandatavalue lessorequals datavaluedescriptor left
datavaluedescriptor right
throws standardexception
return sqlboolean truthvalue left
right
left getfloat   <  right getfloat
/**
* the >= operator as called from the language module, as opposed to
* the storage module.
*
* @param left			the value on the left side of the >=
* @param right			the value on the right side of the >=
*
* @return	a sql boolean value telling whether the first operand is greater
*			than or equal to the second operand
*
* @exception standardexception		thrown on error
*/
public booleandatavalue greaterorequals datavaluedescriptor left
datavaluedescriptor right
throws standardexception
return sqlboolean truthvalue left
right
left getfloat   >  right getfloat
/**
* this method implements the + operator for "real + real".
* the operator uses double aritmetic as db2 does.
*
* @param addend1	one of the addends
* @param addend2	the other addend
* @param result	the result of a previous call to this method, null
*					if not called yet
*
* @return	a sqlreal containing the result of the addition
*
* @exception standardexception		thrown on error
*/
public numberdatavalue plus numberdatavalue addend1
numberdatavalue addend2
numberdatavalue result
throws standardexception
if  result    null
result   new sqlreal
if  addend1 isnull      addend2 isnull
result settonull
return result
double dsum   addend1 getdouble     addend2 getdouble
// no need to check underflow (result rounded to 0.0),
// since the difference between two non-equal valid db2 double values is always non-zero in java.lang.double precision.
result setvalue dsum
return result
/**
* this method implements the - operator for "real - real".
* the operator uses double aritmetic as db2 does.
*
* @param left	the value to be subtracted from
* @param right	the value to be subtracted
* @param result	the result of a previous call to this method, null
*					if not called yet
*
* @return	a sqlreal containing the result of the subtraction
*
* @exception standardexception		thrown on error
*/
public numberdatavalue minus numberdatavalue left
numberdatavalue right
numberdatavalue result
throws standardexception
if  result    null
result   new sqlreal
if  left isnull      right isnull
result settonull
return result
double ddifference   left getdouble     right getdouble
// no need to check underflow (result rounded to 0.0),
// since no difference between two valid db2 double values can be rounded off to 0.0 in java.lang.double
result setvalue ddifference
return result
/**
* this method implements the * operator for "real * real".
* the operator uses double aritmetic as db2 does.
*
* @param left	the first value to be multiplied
* @param right	the second value to be multiplied
* @param result	the result of a previous call to this method, null
*					if not called yet
*
* @return	a sqlreal containing the result of the multiplication
*
* @exception standardexception		thrown on error
*/
public numberdatavalue times numberdatavalue left
numberdatavalue right
numberdatavalue result
throws standardexception
if  result    null
result   new sqlreal
if  left isnull      right isnull
result settonull
return result
double leftvalue   left getdouble
double rightvalue   right getdouble
double tempresult   leftvalue   rightvalue
// check underflow (result rounded to 0.0)
if    tempresult    0 0        leftvalue    0 0      rightvalue    0 0
throw standardexception newexception sqlstate lang_outside_range_for_datatype  typeid real_name
result setvalue tempresult
return result
/**
* this method implements the / operator for "real / real".
* the operator uses double aritmetic as db2 does.
*
* @param dividend	the numerator
* @param divisor	the denominator
* @param result	the result of a previous call to this method, null
*					if not called yet
*
* @return	a sqlreal containing the result of the division
*
* @exception standardexception		thrown on error
*/
public numberdatavalue divide numberdatavalue dividend
numberdatavalue divisor
numberdatavalue result
throws standardexception
if  result    null
result   new sqlreal
if  dividend isnull      divisor isnull
result settonull
return result
double divisorvalue   divisor getdouble
if  divisorvalue    0 0e0f
throw standardexception newexception sqlstate lang_divide_by_zero
double dividendvalue   dividend getdouble
double resultvalue   dividendvalue   divisorvalue
if  double isnan resultvalue
throw standardexception newexception sqlstate lang_divide_by_zero
// check underflow (result rounded to 0.0)
if   resultvalue    0 0e0d      dividendvalue    0 0e0d
throw standardexception newexception sqlstate lang_outside_range_for_datatype  typeid real_name
result setvalue resultvalue
return result
/**
* this method implements the unary minus operator for real.
*
* @param result	the result of a previous call to this method, null
*					if not called yet
*
* @return	a sqlsmalllint containing the result of the division
*
* @exception standardexception		thrown on error
*/
public numberdatavalue minus numberdatavalue result
throws standardexception
float		minusresult
if  result    null
result   new sqlreal
if  this isnull
result settonull
return result
minusresult     this getfloat
result setvalue minusresult
return result
/**
* this method implements the isnegative method.
* note: this method will return true for -0.0f.
*
* @return  a boolean.  if this.value is negative, return true.
*          for positive values or null, return false.
*/
protected boolean isnegative
return  isnull       value < 0 0f
/*
* string display of value
*/
public string tostring
if  isnull
return
else
return float tostring value
/*
* hash code
*/
public int hashcode
long longval    long  value
if  longval    value
longval   double doubletolongbits value
return  int   longval ^  longval >> 32
static final int real_length   16
private static final int base_memory_usage   classsize estimatebasefromcatalog  sqlreal class
public int estimatememoryusage
return base_memory_usage
/*
* object state
*/
private float value
private boolean isnull