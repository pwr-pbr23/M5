/*
derby - class org.apache.derby.client.net.netpackagerequest
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby client net
import org apache derby client am configuration
import org apache derby client am section
import org apache derby client am sqlexception
import org apache derby client am clientmessageid
import org apache derby shared common reference sqlstate
public class netpackagerequest extends netconnectionrequest
static final string collectionname
netpackagerequest netagent netagent  ccsidmanager ccsidmanager  int buffersize
super netagent  ccsidmanager  buffersize
// rdb package name, consistency token
// scalar object specifies the fully qualified name of a relational
// database package and its consistency token.
//
// to accomodate larger lengths, the scalar data length
// (scldtalen) field is used to specify the length of the instance
// variable which follows.
static final string collectionname
void buildcommonpkgnaminfo section section  throws sqlexception
string collectiontoflow   collectionname
// the scalar data length field may or may not be required.  it depends
// on the level of support and length of the data.
// check the lengths of the rdbnam, rdbcolid, and pkgid.
// determine if the lengths require an scldtalen object.
// note: if an sqldtalen is required for one of them,
// it is needed for all of them.  this is why this check is
// up front.
// the sqlam level dictates the maximum size for
// rdb collection identifier (rdbcolid)
// relational database name (rdbnam)
// rdb package identifier (pkgid)
int maxidentifierlength   netconfiguration pkg_identifier_max_len
boolean scldtalenrequired   false
scldtalenrequired   checkpkgnamlengths netagent_ netconnection_ databasename_
maxidentifierlength
netconfiguration pkg_identifier_fixed_len
if   scldtalenrequired
scldtalenrequired   checkpkgnamlengths collectiontoflow
maxidentifierlength
netconfiguration pkg_identifier_fixed_len
if   scldtalenrequired
scldtalenrequired   checkpkgnamlengths section getpackagename
maxidentifierlength
netconfiguration pkg_identifier_fixed_len
// the format is different depending on if an scldtalen is required.
if   scldtalenrequired
writescalarpaddedstring netagent_ netconnection_ databasename_
netconfiguration pkg_identifier_fixed_len
writescalarpaddedstring collectiontoflow
netconfiguration pkg_identifier_fixed_len
writescalarpaddedstring section getpackagename
netconfiguration pkg_identifier_fixed_len
else
buildscldta netagent_ netconnection_ databasename_  netconfiguration pkg_identifier_fixed_len
buildscldta collectiontoflow  netconfiguration pkg_identifier_fixed_len
buildscldta section getpackagename    netconfiguration pkg_identifier_fixed_len
private void buildscldta string identifier  int minimumlength  throws sqlexception
if  identifier length   <  minimumlength
write2bytes minimumlength
writescalarpaddedstring identifier  minimumlength
else
write2bytes identifier length
writescalarpaddedstring identifier  identifier length
// this specifies the fully qualified package name,
// consistency token, and section number within the package being used
// to execute the sql.  if the connection supports reusing the previous
// package information and this information is the same except for the section
// number then only the section number needs to be sent to the server.
void buildpkgnamcsn section section  throws sqlexception
if   cancommandusedefaultpkgnamcsn
marklengthbytes codepoint pkgnamcsn
// if pkgnamcbytes is already available, copy the bytes to the request buffer directly.
if  section getpkgnamcbytes      null
writestoredpkgnamcbytes section
else
// mark the beginning of pkgnamcsn bytes.
markforcachingpkgnamcsn
buildcommonpkgnaminfo section
writescalarpaddedbytes configuration dncpackageconsistencytoken
netconfiguration pkgcnstkn_fixed_len
netconfiguration non_char_ddm_data_pad_byte
// store the pkgnamcbytes
storepkgnamcbytes section
write2bytes section getsectionnumber
updatelengthbytes
else
writescalar2bytes codepoint pkgsn  section getsectionnumber
private void storepkgnamcbytes section section
// get the locaton where we started writing pkgnamcsn
int startpos   popmarkforcachingpkgnamcsn
int copylength   offset_   startpos
byte b   new byte
system arraycopy bytes_
startpos
b
0
copylength
section setpkgnamcbytes b
private void writestoredpkgnamcbytes section section
byte b   section getpkgnamcbytes
// mare sure request buffer has enough space to write this byte array.
ensurelength offset_   b length
system arraycopy b
0
bytes_
offset_
b length
offset_    b length
private boolean cancommandusedefaultpkgnamcsn
return false
// throws an exception if lengths exceed the maximum.
// returns a boolean indicating if slcdtalen is required.
private boolean checkpkgnamlengths string identifier
int maxidentifierlength
int lengthrequiringscldta  throws sqlexception
int length   identifier length
if  length > maxidentifierlength
throw new sqlexception netagent_ logwriter_
new clientmessageid sqlstate lang_identifier_too_long
identifier  new integer maxidentifierlength
return  length > lengthrequiringscldta
private byte getbytes string string  string encoding  throws sqlexception
try
return string getbytes encoding
catch  java lang exception e
throw new sqlexception netagent_ logwriter_
new clientmessageid sqlstate java_exception
e getclass   getname    e getmessage    e
private void buildnocmornocs string string  throws sqlexception
if  string    null
write2bytes 0xffff
else
byte sqlbytes   null
if  netagent_ typdef_ isccsidmbcset
sqlbytes   getbytes string  netagent_ typdef_ getccsidmbcencoding
write1byte 0x00
write4bytes sqlbytes length
writebytes sqlbytes  sqlbytes length
write1byte 0xff
else
sqlbytes   getbytes string  netagent_ typdef_ getccsidsbcencoding
write1byte 0xff
write1byte 0x00
write4bytes sqlbytes length
writebytes sqlbytes  sqlbytes length
// sqlsttgrp : fdoca early group
// sql statement group description
//
// format for sqlam <= 6
//   sqlstatement_m; protocol type lvcm; envlid 0x40; length override 32767
//   sqlstatement_s; protocol type lvcs; envlid 0x34; length override 32767
//
// format for sqlam >= 7
//   sqlstatement_m; protocol type nocm; envlid 0xcf; length override 4
//   sqlstatement_s; protocol type nocs; envlid 0xcb; length override 4
private void buildsqlsttgrp string string  throws sqlexception
buildnocmornocs string
return
// sqlstt : fdoca early row
// sql statement row description
//
// format for all sqlam levels
//   sqlsttgrp; group lid 0x5c; element taken 0(all); rep factor 1
private void buildsqlstt string string  throws sqlexception
buildsqlsttgrp string
protected void buildsqlsttcommanddata string sql  throws sqlexception
createencryptedcommanddata
int loc   offset_
marklengthbytes codepoint sqlstt
buildsqlstt sql
updatelengthbytes
if  netagent_ netconnection_ getsecuritymechanism
netconfiguration secmec_eusriddta
netagent_ netconnection_ getsecuritymechanism
netconfiguration secmec_eusrpwddta
encryptdatastream loc
protected void buildsqlattrcommanddata string sql  throws sqlexception
createencryptedcommanddata
int loc   offset_
marklengthbytes codepoint sqlattr
buildsqlstt sql
updatelengthbytes
if  netagent_ netconnection_ getsecuritymechanism
netconfiguration secmec_eusriddta
netagent_ netconnection_ getsecuritymechanism
netconfiguration secmec_eusrpwddta
encryptdatastream loc
public void encryptdatastream int lengthlocation  throws sqlexception
byte clearedbytes   new byte
byte encryptedbytes
for  int i   lengthlocation  i < offset_  i
clearedbytes   bytes_
encryptedbytes   netagent_ netconnection_ getencryptionmanager
encryptdata clearedbytes
netconfiguration secmec_eusridpwd
netagent_ netconnection_ gettargetpublickey
netagent_ netconnection_ gettargetpublickey
int length   encryptedbytes length
if  bytes_ length >  lengthlocation   length
system arraycopy encryptedbytes  0  bytes_  lengthlocation  length
else
byte largebyte   new byte
system arraycopy bytes_  0  largebyte  0  lengthlocation
system arraycopy encryptedbytes  0  largebyte  lengthlocation  length
bytes_   largebyte
offset_    length   clearedbytes length
//we need to update the length in dss header here.
bytes_    byte    length >>> 8    0xff
bytes_    byte   length   0xff