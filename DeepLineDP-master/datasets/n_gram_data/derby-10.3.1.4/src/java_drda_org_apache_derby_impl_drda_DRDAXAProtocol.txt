/*
derby - class org.apache.derby.impl.drda.drdaxaprotocol.java
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl drda
import org apache derby iapi services sanity sanitymanager
import javax transaction xa
/**
* this class translates drda xa protocol from an application requester to xa
* calls for derby and then translates the results from derby to drda
* for return to the application requester.
* this class requires the use of javax.transaction.xa classes from j2ee,
* so is separated from drdaconnthread, because of the additional
* library requirements
*/
class drdaxaprotocol
private drdaconnthread connthread
private ddmreader reader
private ddmwriter writer
/** holds the xid of the global transaction associated with
* the corresponding drdaconnthread (and connection itself). */
private xid xid
drdaxaprotocol drdaconnthread connthread
this connthread   connthread
reader   connthread getreader
writer   connthread getwriter
xid   null
/**
* parse syncctl - parse syncctl command for xamgr lvl 7
*
*/
protected void parsesyncctl   throws drdaprotocolexception
reader markcollection
int codepoint   reader getcodepoint codepoint synctype
int synctype   parsesynctype
int xaflags   0
boolean readxaflags   false
xid xid   null
// the value -1 means no value of timeout received
long xatimeout    1
boolean readxatimeout   false
codepoint   reader getcodepoint
while  codepoint     1
switch codepoint
case codepoint xid
xid   parsexid
break
case codepoint xaflags
xaflags   parsexaflags
readxaflags  true
break
case codepoint timeout
xatimeout   parsexatimeout
readxatimeout   true
break
case codepoint rlsconv
connthread codepointnotsupported codepoint
default
connthread invalidcodepoint codepoint
codepoint   reader getcodepoint
connthread trace     synctypetostring synctype
connthread trace     xid
connthread trace     xaflagstostring xaflags
if  synctype    codepoint synctype_indoubt
if  xid    null
connthread missingcodepoint codepoint xid
// all but recover and forget require xaflags
if  synctype    codepoint synctype_req_forget
readxaflags
if  sanitymanager debug
connthread missingcodepoint codepoint xaflags
switch  synctype
case codepoint synctype_new_uow
// new unit of work for xa
// formatid -1 is just a local connection
startxatransaction xid  xaflags  xatimeout
break
case codepoint synctype_end_uow
// end unit of work
endxa xid xaflags
break
case codepoint synctype_prepare
preparexatransaction xid
// prepare to commit
break
case codepoint synctype_migrate
// migrate to resync server sync type
connthread codepointnotsupported codepoint
break
case codepoint synctype_req_commit
// request to commit sync type
committransaction xid xaflags
break
case codepoint synctype_committed
// commit  sync type
committransaction xid  xaflags
break
case codepoint synctype_req_forget
// request to forget sync type
forgetxatransaction xid
break
case codepoint synctype_rollback
//rollback sync type
rollbacktransaction xid  true
break
case codepoint synctype_indoubt
//recover sync type
if  readxaflags
recoverxa xaflags
else
recoverxa
break
default
connthread invalidcodepoint codepoint
/**
* parse synctype for xamgr lvl 7
* return synctype value
*   codepoint.synctype_new_uow -> xaresource.start()
*   codepoint.synctype_end_uow -> xaresource.end()
*   codepoint.synctype_prepare -> xaresource.prepare()
*   codepoint.synctype_migrate -> not supported  //syncpt mgr level 5
*   codepoint.synctype_req_commit -> not supported //syncpt mgr level 5
*   codepoint.synctype_committed -> xaresource.commit()
*                                   or local commit for null xid
*   codepoint.synctype_req_log ->  not supported
*   codepoint.synctype_req_forget -> xaresource.forget()
*   codepoint.synctype_rollback -> xaresource.rollback()
*   codepoint.synctype_migrated -> not supported
*   codepoint.synctype_indoubt   -> xaresource.recover();
*
*/
protected int  parsesynctype   throws drdaprotocolexception
return reader readunsignedbyte
/** parse xid
*  formatid -1 translates into a null xid and a local transaction
*/
private  xid parsexid    throws drdaprotocolexception
int formatid   reader readnetworkint
byte gtrid   null
byte bqual   null
if  formatid     1
int gtridlen   reader readnetworkint
int bquallen   reader readnetworkint
gtrid   reader readbytes gtridlen
bqual   reader readbytes bquallen
return new drdaxid formatid  gtrid  bqual
/**
*  parse xidshr
*
* @return xidshr value
* @throws drdaprotocolexception
*/
private int parsexidshr   throws drdaprotocolexception
return reader readunsignedbyte
/**
*  parse xaflags
*
* @return xaflags value
* @throws drdaprotocolexception
*/
private int parsexaflags   throws drdaprotocolexception
return reader readnetworkint
/**
* parses a xa transaction timout value.
*
* @return a timeout value.
* @throws drdaprotocolexception
*/
private long parsexatimeout   throws drdaprotocolexception
return reader readnetworklong
/**
*  start the xa transaction. send syncrrd response
*
*  @param xid - xid (formatid = -1 for local transaction)
*  @param xaflags - xaflags
*  @param xatimeout - the timeout for the global transaction in millis
*                     (or -1 if not specified)
*  @throws drdaprotocolexception
*/
private void startxatransaction xid xid  int xaflags  long xatimeout
throws drdaprotocolexception
xaresource xaresource   getxaresource
int xaretval   xaresource xa_ok
try
if  xid getformatid       1    xatimeout     1
// the value of timeout might be specified only for global transactions
throw new xaexception xaexception xaer_proto
else if  xatimeout     1    xaflags    xaresource tmnoflags
// according the drda spec if the value of timeout was specified
// a tmnoflags have to be used
throw new xaexception xaexception xaer_proto
else
if  xatimeout    0
// according the drda specification
// value 0 means the unlimited timeout
// integer.max_value is used in derby
// to set up the infinite timeout.
// in jdbc spec the value 0 means the resource
// manager's default value.
xaresource settransactiontimeout integer max_value
else if  xatimeout     1
// the timeout value was not specified, so use the default
// timeout - see javadoc for xaresource.settransactiontimeout
xaresource settransactiontimeout 0
else
// the value of timeout was specified
xaresource settransactiontimeout  int   xatimeout 1000
if  xid getformatid       1
xaresource start xid xaflags
this xid   xid
catch  xaexception xe
xaretval   processxaexception xe
writesynccrd codepoint synctype_new_uow
xaretval  null
/**
*  commit  the xa transaction. send synccrd response
*
*  @param xid - xid (formatid = -1 for local transaction)
*  @param xaflags - xaflags
*  @throws drdaprotocolexception
*/
private void committransaction xid xid  int xaflags  throws drdaprotocolexception
boolean local      xid getformatid       1
if  local
commitlocaltransaction
else
commitxatransaction xid  xaflags
/**
*  commit local transaction. send synccrd response.
*
*  @throws drdaprotocolexception
*/
private void commitlocaltransaction   throws drdaprotocolexception
int xaretval   xaresource xa_ok
try
connthread getdatabase   commit
catch   exception e
xaretval   xaexception xaer_rmfail
if  sanitymanager debug
connthread getserver   consoleexceptionprint e
writesynccrd codepoint synctype_committed
xaretval  null
/**
*  commit  the xa transaction. send synccrd response.
*
*  @param xid - xid
*  @param xaflags - xaflags
*  @throws drdaprotocolexception
*/
private void commitxatransaction xid xid  int xaflags  throws drdaprotocolexception
xaresource xaresource   getxaresource
int xaretval   xaresource xa_ok
// check this
boolean isonephase    xaflags   xaresource tmonephase     0
try
xaresource commit xid  isonephase
if  sanitymanager debug
connthread trace     xaretval
catch  xaexception xe
xaretval   processxaexception xe
writesynccrd codepoint synctype_committed
xaretval  null
/**
* rollback transaction. optionally send synccrd response.
* @param xid  xid for rollback for global transaction.
*             if xid formatid is -1 it represents a local transaction
* @param sendsynccrd indicates whether the function should
*                    send a synccrd response
*/
private void rollbacktransaction xid xid  boolean sendsynccrd  throws drdaprotocolexception
boolean local      xid getformatid       1
if  local
rollbacklocaltransaction sendsynccrd
else
rollbackxatransaction xid  sendsynccrd
/**
* rollback a local transaction. optionally send synccrd response.
*
* @param sendsynccrd indicates whether the function should
*                    send a synccrd response
* @throws drdaprotocolexception
*/
private void rollbacklocaltransaction boolean sendsynccrd  throws drdaprotocolexception
int xaretval   xaresource xa_ok
try
connthread getdatabase   rollback
catch   exception e
xaretval   xaexception xaer_rmfail
if  sanitymanager debug
connthread getserver   consoleexceptionprint e
if  sendsynccrd
writesynccrd codepoint synctype_committed
xaretval  null
/**
*  rollback the xa transaction. optionally send synccrd response.
*
*  @param xid - xid
*  @param sendsynccrd indicates whether the function should
*                     send a synccrd response
*  @throws drdaprotocolexception
*/
private void rollbackxatransaction xid xid  boolean sendsynccrd  throws drdaprotocolexception
xaresource xaresource   getxaresource
int xaretval   xaresource xa_ok
try
xaresource rollback xid
if  sanitymanager debug
connthread trace     xaretval
catch  xaexception xe
xaretval   processxaexception xe
if  sendsynccrd
writesynccrd codepoint synctype_rollback
xaretval  null
/**
*  end  the xa transaction. send syncrrd response
*
*  @param xid - xid
*  @param xaflags - xaflags
*  @throws drdaprotocolexception
*/
private void endxa xid xid  int xaflags  throws drdaprotocolexception
xaresource xaresource   getxaresource
int xaretval   xaresource xa_ok
try
xaresource end xid xaflags
this xid   null
if  sanitymanager debug
connthread trace     xid
xaflags
xaretval
catch  xaexception xe
xaretval   processxaexception xe
writesynccrd codepoint synctype_end_uow
xaretval  null
/**
*  prepare the xa transaction. send synccrd response.
*
*  @param xid - xid
*  @throws drdaprotocolexception
*/
private void preparexatransaction xid xid  throws drdaprotocolexception
xaresource xaresource   getxaresource
int xaretval   xaresource xa_ok
try
xaretval   xaresource prepare xid
if  sanitymanager debug
connthread trace
xaretval
catch  xaexception xe
xaretval   processxaexception xe
writesynccrd codepoint synctype_prepare
xaretval  null
/**
*  forget the xa transaction. send synccrd response.
*
*  @param xid - xid
*  @throws drdaprotocolexception
*/
private void forgetxatransaction xid xid  throws drdaprotocolexception
xaresource xaresource   getxaresource
int xaretval   xaresource xa_ok
try
xaresource forget xid
if  sanitymanager debug
connthread trace     xaretval
catch  xaexception xe
xaretval   processxaexception xe
writesynccrd codepoint synctype_req_forget
xaretval  null
// jcc doesn't send xaflags but always wants tmstartrscan.
//so default to that if we got no xaflags
private void recoverxa   throws drdaprotocolexception
recoverxa xaresource tmstartrscan
/**
* call recover. send synccrd response with indoubt list
*
*  @throws drdaprotocolexception
*/
private void recoverxa int xaflags  throws drdaprotocolexception
xaresource xaresource   getxaresource
int xaretval   xaresource xa_ok
xid indoubtxids   null
try
indoubtxids   xaresource recover xaflags
catch  xaexception xe
xaretval   processxaexception xe
writesynccrd codepoint synctype_indoubt
xaretval  indoubtxids
/** write synccrd (syncctl response)
* @param synctype - xa command to send response for see  parsesynctype
* @param xaretval - return value from xa command
* @param xids - list of xids to return for recover.
*               null for other commands
* @throws drdaprotocolexception
*/
private void writesynccrd  int synctype  int xaretval  xid xids  throws drdaprotocolexception
writer createdssreply
writer startddm codepoint synccrd
writer startddm codepoint xaretval
writer writeint xaretval
writer endddm
if  xids    null
writeprphrclst xids
writer endddmanddss
/** write prphrclst (indoubt list)
*
* @param xids - list of indoubt xa transactions obtained from recover
* @throws drdaprotocolexception
*/
private void writeprphrclst xid xids  throws drdaprotocolexception
int xidcnt    xids    null ? 0   xids length
writer startddm codepoint prphrclst
writer writescalar2bytes codepoint xidcnt  xidcnt
for  int i   0  i < xidcnt  i
writexid xids
writer endddm
/** write xid
*
* @param xid - xid to write
* @throws drdaprotocolexception
*/
private void writexid xid xid  throws drdaprotocolexception
writer startddm codepoint xid
int formatid   xid getformatid
byte gtrid   xid getglobaltransactionid
byte bqual   xid getbranchqualifier
writer writeint formatid
writer writeint gtrid length
writer writeint bqual length
writer writebytes gtrid
writer writebytes bqual
writer endddm
/** get xaresource for the connection
*
* @return xaresource
*/
private xaresource getxaresource
return   xadatabase  connthread getdatabase    getxaresource
/** printable synctype for debug output
* @param synctype
* @return - sync type meaning
*/
private string synctypetostring int synctype
switch  synctype
case codepoint synctype_new_uow
return
case codepoint synctype_end_uow
return
case codepoint synctype_prepare
return
case codepoint synctype_migrate
return
case codepoint synctype_req_commit
return
case codepoint synctype_committed
return
case codepoint synctype_req_forget
return
case codepoint synctype_rollback
return
case codepoint synctype_req_log
return
case   codepoint synctype_migrated
return
case codepoint synctype_indoubt
return
default
return
/**
* printable xaflags
* @param xaflags
* @return printable xaflags for debug output
*/
private string xaflagstostring int xaflags
switch  xaflags
case xaresource tmendrscan
return
case xaresource tmfail
return
case xaresource tmnoflags
return
case xaresource tmjoin
return
case xaresource tmonephase
return
case xaresource tmresume
return
case xaresource tmstartrscan
return
case xaresource tmsuccess
return
case xaresource tmsuspend
return
default
return     xaflags
/**
* return xa exception errorcode.
* print to console for debug output.
* @param xe - xa exception
*/
private int processxaexception xaexception xe
int xaretval   xe errorcode
if  sanitymanager debug
connthread getserver   consoleexceptionprint xe
return xaretval
/**
* this function rollbacks the current global transaction associated
* with the xaresource or a local transaction. the function should
* be called only in exceptional cases - like client socket
* is closed. */
void rollbackcurrenttransaction
if  xid    null
boolean local      xid getformatid       1
try
// if the transaction is not local disassociate the transaction from
// the connection first because the rollback can not be performed
// on a transaction associated with the xaresource
try
if   local
xaresource xaresource   getxaresource
// this will throw the xaexception (because tmfail
// will throw an exception)
xaresource end xid  xaresource tmfail
catch  xaexception e
// do not print out the exception generally thrown
// when tmfail flag is present
if  e errorcode < xaexception xa_rbbase
e errorcode > xaexception xa_rbend
connthread getserver   consoleexceptionprint e
rollbacktransaction xid  false
catch   drdaprotocolexception e
// because we do not dump any drda stuff to the socket
// the exception can not be thrown in this case
// however, we will dump the exception to the console
connthread getserver   consoleexceptionprint e
xid   null