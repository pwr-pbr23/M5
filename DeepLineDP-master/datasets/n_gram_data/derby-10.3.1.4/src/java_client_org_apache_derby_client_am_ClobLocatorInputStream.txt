/*
derby - class org.apache.derby.client.am.cloblocatorinputstream
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby client am
import java sql callablestatement
import java sql sqlexception
import java io ioexception
import org apache derby iapi services sanity sanitymanager
/**
* an <code>inputstream</code> that will use an locator to fetch the
* clob value from the server.
* <p>
* closing a <code>bytearrayinputstream</code> has no effect. the methods in
* this class can be called after the stream has been closed without
* generating an <code>ioexception</code>.
* <p>
* this <code>inputstream</code> implementation is pretty basic.  no
* buffering of data is done.  hence, for efficieny #read(byte[])
* should be used instead of #read().  marks are not supported, but it
* should be pretty simple to extend the implementation to support
* this.  a more efficient skip implementation should also be
* straight-forward.
*/
public class cloblocatorinputstream extends java io inputstream
/**
* connection used to read clob from server.
*/
private final connection connection
/**
* the clob to be accessed.
*/
private final clob clob
/**
* current position in the underlying clob.
* clobs are indexed from 1
*/
private long currentpos
/**
* create an <code>inputstream</code> for reading the
* <code>clob</code> value represented by the given locator based
* <code>clob</code> object.
* @param connection connection to be used to read the
*        <code>clob</code> value from the server
* @param clob <code>clob</code> object that contains locator for
*        the <code>clob</code> value on the server.
*/
public cloblocatorinputstream connection connection  clob clob
throws sqlexception
if  sanitymanager debug
sanitymanager assert clob islocator
this connection   connection
this clob   clob
this currentpos   1
/**
* create an <code>inputstream</code> for reading the
* <code>clob</code> value represented by the given locator based
* <code>clob</code> object.
* @param connection connection to be used to read the
*        <code>clob</code> value from the server
* @param clob <code>clob</code> object that contains locator for
*        the <code>clob</code> value on the server.
* @param pos the position inside the <code>clob<code> from which
*            the reading must begin.
*/
public cloblocatorinputstream connection connection  clob clob  long pos
throws sqlexception
this connection  clob
this currentpos   pos
/**
* @see java.io.inputstream#read()
*
* this method fetches one byte at a time from the server. for more
* efficient retrieval, use #read(byte[]).
*/
public int read   throws ioexception
byte bytes   readbytes 1
if  bytes length    0       eof
return  1
else
return bytes
/**
* @see java.io.inputstream#read(byte[], int, int)
*/
public int read byte b  int off  int len  throws ioexception
if  len    0  return 0
if   off < 0      len < 0      len > b length   off
throw new indexoutofboundsexception
byte bytes   readbytes len
if  bytes length    0       eof
return  1
else
system arraycopy bytes  0  b  off  bytes length
return bytes length
/**
* read the next <code>len</code> bytes of the <code>clob</code>
* value from the server.
*
* @param len number of bytes to read
* @throws java.io.ioexception wrapped sqlexception if reading
*         from server fails.
* @return <code>byte[]</code> containing the read bytes
*/
private byte readbytes int len  throws ioexception
try
int actuallength
int  math min len  clob sqllength     currentpos   1
string resultstr   connection locatorprocedurecall
clobgetsubstring clob getlocator
currentpos  actuallength
byte result   getbytesfromstring resultstr
currentpos    result length
return result
catch  sqlexception ex
ioexception ioex   new ioexception
ioex initcause ex
throw ioex
/**
* returns a <code>byte</code> array from the
* <code>string</code> passed as input.
*
* @param str the input <code>string</code>.
* @return the <code>byte</code> corresponding
*         to the <code>string</code> that was
*         input.
*/
private byte getbytesfromstring string str
//the byte array that will hold the final
//converted byte array that will be returned
//to the user
byte result   new byte
//iterate through the string to
//convert each character in the
//string
for  int i   1  i <  str length    i
//charat function accpets a index that
//starts from 0 and ranges to length()-1
char onechar   str charat i 1
if  onechar <  0xff
//check if the value is lesser
//than maximum value that can
//be stored in a byte. if it is
//lesser store it directly in the
//byte array
result    byte onechar
else
//the value is greater than the
//maximum value that can be
//stored. use the value 0x003f
//which corresponds to '?'
//signifying an unknown character
result   0x3f
return result