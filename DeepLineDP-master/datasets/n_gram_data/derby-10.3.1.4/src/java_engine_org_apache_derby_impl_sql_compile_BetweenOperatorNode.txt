/*
derby - class org.apache.derby.impl.sql.compile.betweenoperatornode
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package	org apache derby impl sql compile
import org apache derby iapi error standardexception
import org apache derby iapi sql conn languageconnectioncontext
import org apache derby iapi sql dictionary datadictionary
import org apache derby iapi sql compile c_nodetypes
import org apache derby iapi services compiler methodbuilder
import org apache derby iapi services sanity sanitymanager
import org apache derby impl sql compile expressionclassbuilder
import org apache derby impl sql compile activationclassbuilder
import org apache derby iapi sql compile nodefactory
import org apache derby iapi services context contextmanager
/**
* a betweenoperatornode represents a between clause. the between values are
* represented as a 2 element list in order to take advantage of code reuse.
*
*/
public class betweenoperatornode extends binarylistoperatornode
/**
* initializer for a betweenoperatornode
*
* @param leftoperand		the left operand of the node
* @param betweenvalues		the between values in list form
*/
public void init object leftoperand  object betweenvalues
if  sanitymanager debug
valuenodelist betweenvals    valuenodelist  betweenvalues
sanitymanager assert betweenvals size      2
betweenvals size
super init leftoperand  betweenvalues     null
/**
* eliminate notnodes in the current query block.  we traverse the tree,
* inverting ands and ors and eliminating nots as we go.  we stop at
* comparisonoperators and boolean expressions.  we invert
* comparisonoperators and replace boolean expressions with
* boolean expression = false.
* note: since we do not recurse under comparisonoperators, there
* still could be notnodes left in the tree.
*
* @param	undernotnode		whether or not we are under a notnode.
*
*
* @return		the modified expression
*
* @exception standardexception		thrown on error
*/
valuenode eliminatenots boolean undernotnode
throws standardexception
binarycomparisonoperatornode leftbco
binarycomparisonoperatornode rightbco
ornode						 newor
if  sanitymanager debug
sanitymanager assert rightoperandlist size      2
rightoperandlist size
if    undernotnode
return this
/* we want to convert the between  * into < or >
as described below.
*/
/* convert:
*		lefto between rightolist.elementat(0) and rightolist.elementat(1)
* to:
*		lefto < rightolist.elementat(0) or lefto > rightolist.elementat(1)
* note - we do the conversion here since ors will eventually be
* optimizable and there's no benefit for the optimizer to see not between
*/
nodefactory nodefactory   getnodefactory
contextmanager cm   getcontextmanager
/* lefto < rightolist.elementat(0) */
leftbco    binarycomparisonoperatornode
nodefactory getnode
c_nodetypes binary_less_than_operator_node
leftoperand
rightoperandlist elementat 0
cm
/* set type info for the operator node */
leftbco bindcomparisonoperator
/* lefto > rightolist.elementat(1) */
rightbco    binarycomparisonoperatornode
nodefactory getnode
c_nodetypes binary_greater_than_operator_node
leftoperand
rightoperandlist elementat 1
cm
/* set type info for the operator node */
rightbco bindcomparisonoperator
/* create and return the or */
newor    ornode  nodefactory getnode
c_nodetypes or_node
leftbco
rightbco
cm
newor postbindfixup
/* tell optimizer to use the between selectivity instead of >= * <= selectivities */
leftbco setbetweenselectivity
rightbco setbetweenselectivity
return newor
/**
* preprocess an expression tree.  we do a number of transformations
* here (including subqueries, in lists, like and between) plus
* subquery flattening.
* note: this is done before the outer resultsetnode is preprocessed.
*
* @param	numtables			number of tables in the dml statement
* @param	outerfromlist		fromlist from outer query block
* @param	outersubquerylist	subquerylist from outer query block
* @param	outerpredicatelist	predicatelist from outer query block
*
* @return		the modified expression
*
* @exception standardexception		thrown on error
*/
public valuenode preprocess int numtables
fromlist outerfromlist
subquerylist outersubquerylist
predicatelist outerpredicatelist
throws standardexception
valuenode	leftclone1
valuenode	rightoperand
/* we must 1st preprocess the component parts */
super preprocess numtables
outerfromlist  outersubquerylist
outerpredicatelist
/* this is where we do the transformation for between to make it optimizable.
* c1 between value1 and value2 -> c1 >= value1 and c1 <= value2
* this transformation is only done if the leftoperand is a columnreference.
*/
if    leftoperand instanceof columnreference
return this
/* for some unknown reason we need to clone the leftoperand if it is
* a columnreference because reusing them in qualifiers for a scan
* does not work.
*/
leftclone1   leftoperand getclone
/* the transformed tree has to be normalized:
*				and
*			   /   \
*			  >=    and
*				   /   \
*				  <=    true
*/
nodefactory nodefactory   getnodefactory
contextmanager cm   getcontextmanager
querytreenode truenode   nodefactory getnode
c_nodetypes boolean_constant_node
boolean true
cm
/* create the and <= */
binarycomparisonoperatornode lessequal
binarycomparisonoperatornode  nodefactory getnode
c_nodetypes binary_less_equals_operator_node
leftclone1
rightoperandlist elementat 1
cm
/* set type info for the operator node */
lessequal bindcomparisonoperator
/* create the and */
andnode newand    andnode  nodefactory getnode
c_nodetypes and_node
lessequal
truenode
cm
newand postbindfixup
/* create the and >= */
binarycomparisonoperatornode greaterequal
binarycomparisonoperatornode  nodefactory getnode
c_nodetypes binary_greater_equals_operator_node
leftoperand
rightoperandlist elementat 0
cm
/* set type info for the operator node */
greaterequal bindcomparisonoperator
/* create the and */
newand    andnode  nodefactory getnode
c_nodetypes and_node
greaterequal
newand
cm
newand postbindfixup
/* tell optimizer to use the between selectivity instead of >= * <= selectivities */
lessequal setbetweenselectivity
greaterequal setbetweenselectivity
return newand
/**
* do code generation for this between operator.
*
* @param acb	the expressionclassbuilder for the class we're generating
* @param mb	the method the code to place the code
*
*
* @exception standardexception		thrown on error
*/
public void generateexpression expressionclassbuilder acb
methodbuilder mb
throws standardexception
andnode						 newand
binarycomparisonoperatornode leftbco
binarycomparisonoperatornode rightbco
if  sanitymanager debug
sanitymanager assert rightoperandlist size      2
rightoperandlist size
/* convert:
*		lefto between rightolist.elementat(0) and rightolist.elementat(1)
* to:
*		lefto >= rightolist.elementat(0) and lefto <= rightolist.elementat(1)
*/
nodefactory nodefactory   getnodefactory
contextmanager cm   getcontextmanager
/* lefto >= rightolist.elementat(0) */
leftbco    binarycomparisonoperatornode
nodefactory getnode
c_nodetypes binary_greater_equals_operator_node
leftoperand
rightoperandlist elementat 0
cm
/* set type info for the operator node */
leftbco bindcomparisonoperator
/* lefto <= rightolist.elementat(1) */
rightbco    binarycomparisonoperatornode
nodefactory getnode
c_nodetypes binary_less_equals_operator_node
leftoperand
rightoperandlist elementat 1
cm
/* set type info for the operator node */
rightbco bindcomparisonoperator
/* create and return the and */
newand    andnode  nodefactory getnode
c_nodetypes and_node
leftbco
rightbco
cm
newand postbindfixup
newand generateexpression acb  mb