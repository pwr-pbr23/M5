/*
derby - class org.apache.derby.client.am.logicalconnection
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby client am
import org apache derby shared common reference sqlstate
import java sql sqlexception
// a simple delegation wrapper handle for a physical connection.
// all methods are forwarded to the underlying physical connection except for close() and isclosed().
// when a physical connection is wrapped, it is non-null, when the logical connection
// is closed, the wrapped physical connection is always set to null.
// both the finalizer and close() methods will always set the physical connection to null.
// after the physical conneciton is set to null,
// only the pooled connection instance will maintain a handle to the physical connection.
public class logicalconnection implements java sql connection
protected connection physicalconnection_   null     reset to null when the logical connection is closed
private org apache derby client clientpooledconnection pooledconnection_   null
public logicalconnection connection physicalconnection
org apache derby client clientpooledconnection pooledconnection  throws sqlexception
physicalconnection_   physicalconnection
pooledconnection_   pooledconnection
try
checkfornullphysicalconnection
catch   sqlexception se
throw new sqlexception se
protected void finalize   throws java lang throwable
close
// used by clientpooledconnection close when it disassociates itself from the logicalconnection
synchronized public void nullphysicalconnection
physicalconnection_   null
// ------------------------ logical connection close -------------------------
// all methods are simply forwarded to the physical connection, except for close() and isclosed().
synchronized public void close   throws sqlexception
try
// we also need to loop thru all the logicalstatements and close them
if  physicalconnection_    null
return
if  physicalconnection_ agent_ loggingenabled
physicalconnection_ agent_ logwriter_ traceentry this
if  physicalconnection_ isclosed       connection is closed or has become stale
pooledconnection_ trashconnection new sqlexception null
new clientmessageid
sqlstate physical_connection_already_closed
else
physicalconnection_ closeforreuse
if   physicalconnection_ isglobalpending_
pooledconnection_ recycleconnection
physicalconnection_   null
pooledconnection_ nulllogicalconnection
catch   sqlexception se
throw se getsqlexception
synchronized public void closewithoutrecyclingtopool   throws sqlexception
if  physicalconnection_    null
return
physicalconnection_ checkfortransactioninprogress
try
if  physicalconnection_ isclosed       connection is closed or has become stale
throw new sqlexception null
new clientmessageid sqlstate no_current_connection       no call to trashconnection
else
no call to recycleconnection
finally
physicalconnection_ closeforreuse       poolfix
physicalconnection_   null
public boolean isclosed   throws sqlexception
if  physicalconnection_    null
return true
return physicalconnection_ isclosed
// --------------------------- helper methods --------------------------------
// this method doesn't wrap in the standard way, because it went out without a throws clause.
// unlike all other logicalconnection methods, if the physical connection is null, it won't throw an exception, but will return false.
protected void checkfornullphysicalconnection   throws sqlexception
if  physicalconnection_    null
sqlexception se   new sqlexception null
new clientmessageid sqlstate no_current_connection
throw se getsqlexception
// ---------------------- wrapped public entry points ------------------------
// all methods are forwarded to the physical connection in a standard way
synchronized public java sql statement createstatement   throws sqlexception
checkfornullphysicalconnection
return physicalconnection_ createstatement
synchronized public java sql preparedstatement preparestatement string sql  throws sqlexception
checkfornullphysicalconnection
return physicalconnection_ preparestatement sql
synchronized public preparedstatement preparepositionedupdatestatement string sql  section querysection  throws sqlexception
try
checkfornullphysicalconnection
catch   sqlexception se
throw new sqlexception se
return physicalconnection_ preparepositionedupdatestatement sql  querysection
synchronized public java sql callablestatement preparecall string sql  throws sqlexception
checkfornullphysicalconnection
return physicalconnection_ preparecall sql
public string nativesql string sql  throws sqlexception
checkfornullphysicalconnection
return physicalconnection_ nativesql sql
synchronized public void setautocommit boolean autocommit  throws sqlexception
checkfornullphysicalconnection
physicalconnection_ setautocommit autocommit
public boolean getautocommit   throws sqlexception
checkfornullphysicalconnection
return physicalconnection_ getautocommit
synchronized public void commit   throws sqlexception
checkfornullphysicalconnection
physicalconnection_ commit
synchronized public void rollback   throws sqlexception
checkfornullphysicalconnection
physicalconnection_ rollback
synchronized public void settransactionisolation int level  throws sqlexception
checkfornullphysicalconnection
physicalconnection_ settransactionisolation level
public int gettransactionisolation   throws sqlexception
checkfornullphysicalconnection
return physicalconnection_ gettransactionisolation
public java sql sqlwarning getwarnings   throws sqlexception
checkfornullphysicalconnection
return physicalconnection_ getwarnings
synchronized public void clearwarnings   throws sqlexception
checkfornullphysicalconnection
physicalconnection_ clearwarnings
public java sql databasemetadata getmetadata   throws sqlexception
checkfornullphysicalconnection
return physicalconnection_ getmetadata
synchronized public void setreadonly boolean readonly  throws sqlexception
checkfornullphysicalconnection
physicalconnection_ setreadonly readonly
public boolean isreadonly   throws sqlexception
checkfornullphysicalconnection
return physicalconnection_ isreadonly
synchronized public void setcatalog string catalog  throws sqlexception
checkfornullphysicalconnection
physicalconnection_ setcatalog catalog
public string getcatalog   throws sqlexception
checkfornullphysicalconnection
return physicalconnection_ getcatalog
synchronized public java sql statement createstatement int resultsettype
int resultsetconcurrency  throws sqlexception
checkfornullphysicalconnection
return physicalconnection_ createstatement resultsettype  resultsetconcurrency
synchronized public java sql preparedstatement preparestatement string sql
int resultsettype
int resultsetconcurrency  throws sqlexception
checkfornullphysicalconnection
return physicalconnection_ preparestatement sql  resultsettype  resultsetconcurrency
synchronized public java sql callablestatement preparecall string sql
int resultsettype
int resultsetconcurrency  throws sqlexception
checkfornullphysicalconnection
return physicalconnection_ preparecall sql  resultsettype  resultsetconcurrency
public java util map gettypemap   throws sqlexception
checkfornullphysicalconnection
return physicalconnection_ gettypemap
synchronized public void settypemap java util map map  throws sqlexception
checkfornullphysicalconnection
physicalconnection_ settypemap map
public java sql statement createstatement int resultsettype  int resultsetconcurrency
int resultsetholdability  throws sqlexception
checkfornullphysicalconnection
return physicalconnection_ createstatement resultsettype  resultsetconcurrency  resultsetholdability
public java sql callablestatement preparecall string sql  int resultsettype
int resultsetconcurrency
int resultsetholdability  throws sqlexception
checkfornullphysicalconnection
return physicalconnection_ preparecall sql  resultsettype  resultsetconcurrency  resultsetholdability
public java sql preparedstatement preparestatement string sql  int resultsettype
int resultsetconcurrency  int resultsetholdability
throws sqlexception
checkfornullphysicalconnection
return physicalconnection_ preparestatement sql  resultsettype  resultsetconcurrency
resultsetholdability
public java sql preparedstatement preparestatement string sql  int autogeneratedkeys
throws sqlexception
checkfornullphysicalconnection
return physicalconnection_ preparestatement sql  autogeneratedkeys
public java sql preparedstatement preparestatement string sql  int columnindexes
throws sqlexception
checkfornullphysicalconnection
return physicalconnection_ preparestatement sql  columnindexes
public java sql preparedstatement preparestatement string sql  string columnnames
throws sqlexception
checkfornullphysicalconnection
return physicalconnection_ preparestatement sql  columnnames
public void setholdability int holdability  throws sqlexception
checkfornullphysicalconnection
physicalconnection_ setholdability holdability
public int getholdability   throws sqlexception
checkfornullphysicalconnection
return physicalconnection_ getholdability
public java sql savepoint setsavepoint   throws sqlexception
checkfornullphysicalconnection
return physicalconnection_ setsavepoint
public java sql savepoint setsavepoint string name  throws sqlexception
checkfornullphysicalconnection
return physicalconnection_ setsavepoint name
public void rollback java sql savepoint savepoint  throws sqlexception
checkfornullphysicalconnection
physicalconnection_ rollback savepoint
public void releasesavepoint java sql savepoint savepoint  throws sqlexception
checkfornullphysicalconnection
physicalconnection_ releasesavepoint savepoint
//----------------------------------------------------------------------------
public int getserverversion
if  physicalconnection_    null
return  1
else
return physicalconnection_ getserverversion