/*
derby - class org.apache.derby.jdbc.clientbasedatasource
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby jdbc
import java io serializable
import java io printwriter
import java io file
import java security accesscontroller
import java security privilegedactionexception
import java util properties
import java util stringtokenizer
import java util nosuchelementexception
import java lang reflect invocationtargetexception
import java lang reflect method
import java lang reflect modifier
import javax naming referenceable
import javax naming reference
import javax naming namingexception
import javax naming stringrefaddr
import org apache derby client am configuration
import org apache derby client am logwriter
import org apache derby client am sqlexception
import org apache derby client am connection
import org apache derby client am clientmessageid
import org apache derby client net netconfiguration
import org apache derby client net netlogwriter
import org apache derby client clientdatasourcefactory
import org apache derby shared common reference attribute
import org apache derby shared common reference sqlstate
/**
* base class for client-side datasource implementations.
*/
public abstract class clientbasedatasource implements serializable  referenceable
private static final long serialversionuid    7660172643035173692l
// spec requires dh algorithm with 32bytes prime to be used
// not all jce implementations have support for this. e.g.
// sun jce does not support dh(prime of 32bytes).
// store information if client jvm has jce loaded that
// can support the necessary algorithms required for eusridpwd
// (encrypted userid and password) security mechanism
// this information is needed to decide if security mechanism
// can be upgraded to eusridpwd or not
// see getupgradedsecuritymechanism()
static boolean supports_eusridpwd   false
static
try
// the encryptionmanager class will instantiate objects of the required
// security algorithms that are needed for eusridpwd
// an exception will be thrown if support is not available
// in the jce implementation in the jvm in which the client
// is loaded.
new org apache derby client am encryptionmanager null
supports_eusridpwd   true
catch exception e
// if an exception is thrown, ignore exception.
// set supports_eusridpwd to false indicating that the client
// does not support eusridpwd security mechanism
supports_eusridpwd   false
// the logintimeout jdbc 2 data source property is not supported as a jdbc 1 connection property,
// because logintimeout is set by the jdbc 1 api via java.sql.drivermanager.setlogintimeout().
// the databasename, servername, and portnumber data source properties are also not supported as connection properties
// because they are extracted from the jdbc 1 database url passed on the connection request.
// however, all other data source properties should probably also be supported as connection properties.
//---------------------contructors/finalizers---------------------------------
// this class is abstract, hide the default constructor
clientbasedatasource
// ---------------------------- logintimeout -----------------------------------
//
// was serialized in 1.0 release
/**
* the time in seconds to wait for a connection request on this data source. the default value of zero indicates
* that either the system time out be used or no timeout limit.
*
* @serial
*/
private int logintimeout
public synchronized void setlogintimeout int seconds
this logintimeout   seconds
public int getlogintimeout
return this logintimeout
// ---------------------------- logwriter -----------------------------------
//
/**
* the log writer is declared transient, and is not serialized or stored under jndi.
*
* @see #tracelevel
*/
private transient printwriter logwriter
public synchronized void setlogwriter printwriter logwriter
this logwriter   logwriter
public printwriter getlogwriter
return this logwriter
// ---------------------------- databasename -----------------------------------
//
// stores the relational database name, rdbname.
// the length of the database name may be limited to 18 bytes
// and therefore may throw an sqlexception.
//
//
private string databasename
// databasename is not permitted in a properties object
// ---------------------------- description ------------------------------
// a description of this data source.
private string description
// ---------------------------- datasourcename -----------------------------------
//
// a data source name;
// used to name an underlying xadatasource,
// or connectionpooldatasource when pooling of connections is done.
//
private string datasourcename
// ---------------------------- portnumber -----------------------------------
//
private int portnumber   propertydefault_portnumber
public final static int propertydefault_portnumber   1527
// ---------------------------- servername -----------------------------------
//
// derby-410 fix.
private string servername   propertydefault_servername
public final static string propertydefault_servername
// servername is not permitted in a properties object
//---------------------- client ssl ----------------
public final static int ssl_off   0
public final static int ssl_basic   1
public final static int ssl_peer_authentication   2
public static final int getsslmodefromstring string s
throws sqlexception
if  s    null
if  s equalsignorecase
return ssl_off
else if  s equalsignorecase
return ssl_basic
else if  s equalsignorecase
return ssl_peer_authentication
else
throw new sqlexception null
new clientmessageid sqlstate invalid_attribute
attribute ssl_attr  s
else
// default
return ssl_off
public static final int getclientsslmode properties properties
throws sqlexception
return getsslmodefromstring properties getproperty attribute ssl_attr
// ---------------------------- user -----------------------------------
//
// this property can be overwritten by specifing the
// username parameter on the datasource.getconnection() method
// call.  if user is specified, then password must also be
// specified, either in the data source object or provided on
// the datasource.getconnection() call.
//
// each data source implementation subclass will maintain it's own <code>password</code> property.
// this password property may or may not be declared transient, and therefore may be serialized
// to a file in clear-text, care must taken by the user to prevent security breaches.
// derby-406 fix
private string user   propertydefault_user
public final static string propertydefault_user
public static string getuser properties properties
string userstring   properties getproperty attribute username_attr
return parsestring userstring  propertydefault_user
// ---------------------------- securitymechanism -----------------------------------
//
// the source security mechanism to use when connecting to this data source.
// <p>
// security mechanism options are:
// <ul>
// <li> user_only_security
// <li> clear_text_password_security
// <li> encrypted_password_security
// <li> encrypted_user_and_password_security - both password and user are encrypted
// <li> strong_password_substitute_security
// </ul>
// the default security mechanism is user_only_security.
// <p>
// if the application specifies a security
// mechanism then it will be the only one attempted.
// if the specified security mechanism is not supported by the conversation
// then an exception will be thrown and there will be no additional retries.
// <p>
// this property is currently only available for the dnc driver.
// <p>
// both user and password need to be set for all security mechanism except user_only_security
// when using user_only_security, only the user property needs to be specified.
//
// constant to indicate that the security mechanism has not been
// explicitly set, either on connection request when using drivermanager
// or on the client datasource object
private final static short secmec_has_not_explicitly_set   0
// security mechanism can be specified explicitly either when obtaining a
// connection via a drivermanager or via datasource.
// via drivermanager, securitymechanism can be set on the connection request using
// the 'securitymechanism' attribute.
// via datasource, securitymechanism can be set by calling setsecuritymechanism()
// on the clientdatasource
// if the security mechanism is not explicitly set as mentioned above, in that case
// the client will try to upgrade the security mechanism to a more secure one, if possible.
// @see #getupgradedsecuritymechanism
// therefore, need to keep track if the securitymechanism has been explicitly set
protected short securitymechanism   secmec_has_not_explicitly_set
//  default security mechanism is user_only_security.
public final static short propertydefault_securitymechanism
short  netconfiguration secmec_usridonl
// we use the net layer constants to avoid a mapping for the net driver.
/**
* return security mechanism if it is set, else upgrade the security mechanism
* if possible and return the upgraded security mechanism
* @param properties look in the properties if securitymechanism is set or not
* if set, return this security mechanism
* @return security mechanism
*/
public static short getsecuritymechanism properties properties
short secmec
string securitymechanismstring
properties getproperty attribute client_security_mechanism
if   securitymechanismstring    null
// security mechanism has been set, do not override, but instead return
// the security mechanism that has been set (derby-962)
secmec   short parseshort securitymechanismstring
else
// if securitymechanismstring is null, this means that
// security mechanism has not been set explicitly and not available in
// properties. hence, do an upgrade of security mechanism if possible
// the logic for upgrade of security mechanism uses information about
// if password is available or not, so pass this information also.
string passwordstring   properties getproperty attribute password_attr
secmec   getupgradedsecuritymechanism passwordstring
return secmec
/**
* this method has logic to upgrade security mechanism to a better (more secure)
* one if it is possible. currently derby server only has support for usridpwd,
* usridonl, eusridpwd and usrssbpwd (10.2+) - this method only considers these
* possibilities. usridpwd, eusridpwd and usrssbpwd require a password, usridonl
* is the only security mechanism which does not require password.
* 1. if password is not available, then security mechanism possible is usridonl
* 2. if password is available,then usridpwd is returned.
*
* @param password password argument
* @return upgraded security mechanism if possible
*/
public static short getupgradedsecuritymechanism string password
// if password is null, in that case the only acceptable security
// mechanism is usridonl, which is the default security mechanism.
if   password    null
return propertydefault_securitymechanism
// when we have support for more security mechanisms on server
// and client, we should update this upgrade logic to pick
// secure security mechanisms before trying out the usridpwd
/*
// -----------------------
// please note:
// when derby-1517, derby-1755 is fixed, there might be a way to use eusridpwd
// when both client and server vm's have support for it. hence the below
// if statement is commented out.
if (supports_eusridpwd)
return (short)netconfiguration.secmec_eusridpwd;
else
// important note:
// --------------
// if derby-1517 can be fixed, we should default to
// secmec_usrssbpwd (strong password substitute).
// until then, connecting with a 10.2+ client to
// a derby server < 10.2, and hence does not support
// secmec_usrssbpwd as a secmec, will cause a drda protocol
// exception, as described in derby-926).
//
// return (short)netconfiguration.secmec_usrssbpwd;
// ----------------------
*/
return  short netconfiguration secmec_usridpwd
// ---------------------------- getservermessagetextongetmessage -----------------------------------
//
private boolean retrievemessagetext   propertydefault_retrievemessagetext
public final static boolean propertydefault_retrievemessagetext   true
public static boolean getretrievemessagetext properties properties
string retrievemessagetextstring   properties getproperty attribute client_retieve_message_text
return parseboolean retrievemessagetextstring  propertydefault_retrievemessagetext
// ---------------------------- tracefile -----------------------------------
//
private string tracefile
public static string gettracefile properties properties
return properties getproperty attribute client_trace_file
// ---------------------------- tracedirectory -----------------------------------
// for the suffix of the trace file when tracedirectory is enabled.
private transient int tracefilesuffixindex_   0
//
private string tracedirectory
/**
* check if derby.client.tracedirectory is provided as a jvm property.
* if yes, then we use that value. if not, then we look for tracedirectory
* in the the properties parameter.
*
* @param properties jdbc url properties
* @return value of tracedirectory property
*/
public static string gettracedirectory properties properties
string tracedirectorystring
tracedirectorystring    readsystemproperty attribute client_jvm_property_prefix attribute client_trace_directory
if  tracedirectorystring    null
return properties getproperty attribute client_trace_directory
else
return tracedirectorystring
/**
* read the value of the passed system property.
* @param key name of the system property
* @return value of the system property, null if there is no permission to read the property
*/
private static string readsystemproperty final string key
//using an anonymous class to read the system privilege because the
//method java.security.accesscontroller.doprivileged requires an
//instance of a class(which implements java.security.privilegedaction).
//since readsystemproperty method is static, we can't simply pass "this"
//to doprivileged method and have clientbasedatasource implement
//privilegedaction. to get around the static nature of method
//readsystemproperty, have an anonymous class implement privilegeaction.
//this class will read the system property in it's run method and
//return the value to the caller.
return  string  accesscontroller doprivileged
new java security privilegedaction
public object run
try
return system getproperty key
catch  securityexception se
// we do not want the connection to fail if the user does not have permission to
// read the property, so if a security exception occurs, just return null and
// continue with the connection.
return null
// ---------------------------- tracefileappend -----------------------------------
//
private boolean tracefileappend   propertydefault_tracefileappend
public final static boolean propertydefault_tracefileappend   false
public static boolean gettracefileappend properties properties
string tracefileappendstring   properties getproperty attribute client_trace_append
return parseboolean tracefileappendstring  propertydefault_tracefileappend
// ---------------------------- password -----------------------------------
//
// the password property is defined in subclasses, but the method
// getpassword (java.util.properties properties) is in this class to eliminate
// dependencies on j2ee for connections that go thru the driver manager.
public static string getpassword properties properties
return properties getproperty
private string password
synchronized public final void setpassword string password
this password   password
public final string getpassword
return password
//------------------------ interface methods ---------------------------------
public reference getreference   throws namingexception
// this method creates a new reference object to represent this data source.
// the class name of the data source object is saved in the reference,
// so that an object factory will know that it should create an instance
// of that class when a lookup operation is performed. the class
// name of the object factory, org.apache.derby.client.clientbasedatasourcefactory,
// is also stored in the reference.
// this is not required by jndi, but is recommend in practice.
// jndi will always use the object factory class specified in the reference when
// reconstructing an object, if a class name has been specified.
// see the jndi spi documentation
// for further details on this topic, and for a complete description of the reference
// and stringrefaddr classes.
//
// this clientbasedatasource class provides several standard jdbc properties.
// the names and values of the data source properties are also stored
// in the reference using the stringrefaddr class.
// this is all the information needed to reconstruct a clientbasedatasource object.
reference ref   new reference this getclass   getname    clientdatasourcefactory class getname    null
addbeanproperties ref
return ref
/**
* add java bean properties to the reference using
* stringrefaddr for each property. list of bean properties
* is defined from the public getxxx() methods on this object
* that take no arguments and return short, int, boolean or string.
* the stringrefaddr has a key of the java bean property name,
* converted from the method name. e.g. tracedirectory for
* tracedirectory.
*
*/
private void addbeanproperties reference ref
// look for all the getxxx methods in the class that take no arguments.
method methods   this getclass   getmethods
for  int i   0  i < methods length  i
method m   methods
// only look for simple getter methods.
if  m getparametertypes   length    0
continue
// only non-static methods
if  modifier isstatic m getmodifiers
continue
// only getxxx methods
string methodname   m getname
if   methodname length   < 5      methodname startswith
continue
class returntype   m getreturntype
if  integer type equals returntype
short type equals returntype
string class equals returntype
boolean type equals returntype
// setsomeproperty
// 01234
string propertyname   methodname substring 3  4  tolowercase
java util locale english  concat
methodname substring 4
try
object ov   m invoke this  null
string value   ov    null ? null   ov tostring
ref add new stringrefaddr propertyname  value
catch  illegalaccessexception iae
catch  invocationtargetexception ite
// ----------------------supplemental methods---------------------------------
//---------------------- helper methods --------------------------------------
// the java.io.printwriter overrides the tracefile setting.
// if neither tracefile nor jdbc logwriter are set, then null is returned.
// logwriterinusesuffix used only for trace directories to indicate whether
// log writer is use is from xads, cpds, sds, ds, driver, config, reset.
logwriter computednclogwriterfornewconnection string logwriterinusesuffix  throws sqlexception
return computednclogwriterfornewconnection logwriter  tracedirectory  tracefile  tracefileappend  tracelevel  logwriterinusesuffix  tracefilesuffixindex_
// called on for connection requests.
// the java.io.printwriter overrides the tracefile setting.
// if neither tracefile, nor logwriter, nor tracedirectory are set, then null is returned.
static logwriter computednclogwriterfornewconnection printwriter logwriter  string tracedirectory  string tracefile  boolean tracefileappend  int tracelevel  string logwriterinusesuffix  int tracefilesuffixindex  throws sqlexception
int globaltracefilesuffixindex   configuration tracefilesuffixindex__
// compute regular dnc log writer if there is any
logwriter dnclogwriter   computednclogwriter logwriter  tracedirectory  tracefile  tracefileappend  logwriterinusesuffix  tracefilesuffixindex  tracelevel
if  dnclogwriter    null
return dnclogwriter
// compute global default dnc log writer if there is any
dnclogwriter   computednclogwriter null  configuration tracedirectory__  configuration tracefile__  configuration tracefileappend__     globaltracefilesuffixindex  configuration tracelevel__
return dnclogwriter
// compute a dnc log writer before a connection is created.
static logwriter computednclogwriter printwriter logwriter  string tracedirectory  string tracefile  boolean tracefileappend  string logwriterinusesuffix  int tracefilesuffixindex  int tracelevel  throws sqlexception
// otherwise, the trace file will still be created even trace_none.
if  tracelevel    trace_none
return null
printwriter printwriter   computeprintwriter logwriter  tracedirectory  tracefile  tracefileappend  logwriterinusesuffix  tracefilesuffixindex
if  printwriter    null
return null
logwriter dnclogwriter   new netlogwriter printwriter  tracelevel
if  printwriter    logwriter    tracedirectory    null
// when printwriter is an internal trace file and
// tracedirectory is not null, each connection has
// its own trace file and the trace file is not cached,
// so we can close it when dnc log writer is closed.
dnclogwriter printwriterneedstobeclosed_   true
return dnclogwriter
// compute a dnc log writer after a connection is created.
// declared public for use by am.connection.  not a public external.
public static logwriter computednclogwriter connection connection  printwriter logwriter  string tracedirectory  string tracefile  boolean tracefileappend  string logwriterinusesuffix  int tracefilesuffixindex  int tracelevel  throws sqlexception
// otherwise, the trace file will still be created even trace_none.
if  tracelevel    trace_none
return null
printwriter printwriter   computeprintwriter logwriter  tracedirectory  tracefile  tracefileappend  logwriterinusesuffix  tracefilesuffixindex
if  printwriter    null
return null
logwriter dnclogwriter   connection agent_ newlogwriter_ printwriter  tracelevel
if  printwriter    logwriter    tracedirectory    null
// when printwriter is an internal trace file and
// tracedirectory is not null, each connection has
// its own trace file and the trace file is not cached,
// so we can close it when dnc log writer is closed.
dnclogwriter printwriterneedstobeclosed_   true
return dnclogwriter
// this method handles all the override semantics.
// the logwriter overrides the tracefile, and tracedirectory settings.
// if neither tracefile, nor logwriter, nor tracedirectory are set, then null is returned.
static printwriter computeprintwriter printwriter logwriter  string tracedirectory  string tracefile  boolean tracefileappend  string logwriterinusesuffix  int tracefilesuffixindex  throws sqlexception
if  logwriter    null      java io printwriter is specified
return logwriter
else      check trace file setting
if  tracedirectory    null
string filename
if  tracefile    null
filename   tracedirectory   file separator   logwriterinusesuffix       tracefilesuffixindex
else
filename   tracedirectory   file separator   tracefile   logwriterinusesuffix       tracefilesuffixindex
return logwriter getprintwriter filename  true      no file append and not enable caching
else if  tracefile    null
return logwriter getprintwriter tracefile  tracefileappend
return null
private static boolean parseboolean string boolstring  boolean defaultbool
if  boolstring    null
return  boolstring equalsignorecase       boolstring equalsignorecase
return defaultbool
private static string parsestring string string  string defaultstring
if  string    null
return string
return defaultstring
private static short parseshort string shortstring  short defaultshort
if  shortstring    null
return short parseshort shortstring
return defaultshort
private static int parseint string intstring  int defaultint
if  intstring    null
return integer parseint intstring
return defaultint
// tokenize "property=value;property=value..." and returns new properties object
//this method is used both by clientdriver to parse the url and
// clientdatasource.setconnectionattributes
static properties tokenizeattributes string attributestring  properties properties  throws sqlexception
properties augmentedproperties
if  attributestring    null
return properties
if  properties    null
augmentedproperties    properties  properties clone
else
augmentedproperties   new properties
try
stringtokenizer attrtokenizer   new stringtokenizer attributestring
while  attrtokenizer hasmoretokens
string v   attrtokenizer nexttoken
int eqpos   v indexof
if  eqpos     1
throw new sqlexception null
new clientmessageid sqlstate invalid_attribute_syntax
attributestring
augmentedproperties setproperty  v substring 0  eqpos   trim     v substring eqpos   1   trim
catch  nosuchelementexception e
// a null log writer is passed, because jdbc 1 sqlexceptions are automatically traced
throw new sqlexception null
new clientmessageid sqlstate invalid_attribute_syntax
attributestring  e
checkboolean augmentedproperties  attribute client_retieve_message_text
return augmentedproperties
private static void checkboolean properties set  string attribute  throws sqlexception
final string booleanchoices
checkenumeration set  attribute  booleanchoices
private static void checkenumeration properties set  string attribute  string choices  throws sqlexception
string value   set getproperty attribute
if  value    null
return
for  int i   0  i < choices length  i
if  value touppercase java util locale english  equals choices touppercase java util locale english
return
// the attribute value is invalid. construct a string giving the choices for
// display in the error message.
string choicesstr
for  int i   0  i < choices length  i
if  i > 0
choicesstr
choicesstr    choices
throw new sqlexception null
new clientmessageid sqlstate invalid_attribute
attribute  value  choicesstr
/*
* properties to be seen by bean - access thru reflection.
*/
// -- stardard jdbc datasource properties
public synchronized void setdatabasename string databasename
this databasename   databasename
public string getdatabasename
return this databasename
public synchronized void setdatasourcename string datasourcename
this datasourcename   datasourcename
public string getdatasourcename
return this datasourcename
public synchronized void setdescription string description
this description   description
public string getdescription
return this description
public synchronized void setportnumber int portnumber
this portnumber   portnumber
public int getportnumber
return this portnumber
public synchronized void setservername string servername
this servername   servername
public string getservername
return this servername
public synchronized void setuser string user
this user   user
public string getuser
return this user
synchronized public void setretrievemessagetext boolean retrievemessagetext
this retrievemessagetext   retrievemessagetext
public boolean getretrievemessagetext
return this retrievemessagetext
// ---------------------------- securitymechanism -----------------------------------
/**
* the source security mechanism to use when connecting to this data source.
* <p/>
* security mechanism options are: <ul>
* <li> user_only_security
* <li> clear_text_password_security
* <li> encrypted_password_security
* <li> encrypted_user_and_password_security - both password and user are encrypted
* <li> strong_password_substitute_security
* </ul> the default security mechanism is user_only security
* <p/>
* if the application specifies a security mechanism then it will be the only one attempted. if the specified
* security mechanism is not supported by the conversation then an exception will be thrown and there will be no
* additional retries.
* <p/>
* this property is currently only available for the  dnc driver.
* <p/>
* both user and password need to be set for all security mechanism except user_only_security
*/
// we use the net layer constants to avoid a mapping for the net driver.
public final static short user_only_security    short  netconfiguration secmec_usridonl
public final static short clear_text_password_security    short  netconfiguration secmec_usridpwd
public final static short encrypted_password_security    short  netconfiguration secmec_usrencpwd
public final static short encrypted_user_and_password_security    short  netconfiguration secmec_eusridpwd
public final static short strong_password_substitute_security    short  netconfiguration secmec_usrssbpwd
/**
* sets the security mechanism.
* @param securitymechanism to set
*/
synchronized public void setsecuritymechanism short securitymechanism
this securitymechanism   securitymechanism
/**
* return the security mechanism.
* if security mechanism has not been set explicitly on datasource,
* then upgrade the security mechanism to a more secure one if possible.
* @see #getupgradedsecuritymechanism(string)
* @return the security mechanism
*/
public short getsecuritymechanism
return getsecuritymechanism getpassword
/**
* return the security mechanism for this datasource object.
* if security mechanism has not been set explicitly on datasource,
* then upgrade the security mechanism to a more secure one if possible.
* @param password  password of user
* @see #getupgradedsecuritymechanism(string)
* @return the security mechanism
*/
public short getsecuritymechanism string password
// if security mechanism has not been set explicitly on
// datasource, then upgrade the security mechanism if possible
// derby-962
if   securitymechanism    secmec_has_not_explicitly_set
return getupgradedsecuritymechanism password
return securitymechanism
// ----------------------- ssl
private int sslmode
public void setssl string mode
throws sqlexception
sslmode   getsslmodefromstring mode
public void setssl int mode
sslmode   mode
public string getssl
switch sslmode
case ssl_off
default
return
case ssl_basic
return
case ssl_peer_authentication
return
// ----------------------- set/getcreate/shutdowndatabase ---------------------------
/**
* set to true if the database should be created.
*/
private boolean createdatabase
/**
* set to true if the database should be shutdown.
*/
private boolean shutdowndatabase
/**
* set this property to create a new database.  if this property is not
* set, the database (identified by databasename) is assumed to be already
* existing.
* @param create if set to the string "create", this data source will try
*               to create a new database of databasename, or boot the
*               database if one by that name already exists.
*
*/
public final void setcreatedatabase string create
if  create    null    create equalsignorecase
this createdatabase   true
else    reset
this createdatabase   false
/** @return "create" if create is set, or null if not
*/
public final string getcreatedatabase
string createstr null
if  createdatabase
createstr
return createstr
/**
* set this property if one wishes to shutdown the database identified by
* databasename.
* @param shutdown if set to the string "shutdown", this data source will
*                 shutdown the database if it is running.
*
*/
public final void setshutdowndatabase string shutdown
if  shutdown    null    shutdown equalsignorecase
this shutdowndatabase   true
else    reset
this shutdowndatabase   false
/** @return "shutdown" if shutdown is set, or null if not
*/
public final string getshutdowndatabase
string shutdownstr null
if  shutdowndatabase
shutdownstr
return shutdownstr
protected string connectionattributes   null
/**
* set this property to pass in more derby specific connection url attributes.
* <br>
* any attributes that can be set using a property of this datasource implementation
* (e.g user, password) should not be set in connectionattributes. conflicting
* settings in connectionattributes and properties of the datasource will lead to
* unexpected behaviour.
*
* @param prop set to the list of derby connection attributes separated by semi-colons.   e.g., to specify an
*             encryption bootpassword of "x8hhk2adf", and set upgrade to true, do the following: <pre>
*             ds.setconnectionattributes("bootpassword=x8hhk2adf;upgrade=true"); </pre> see derby documentation for
*             complete list.
*/
public final void setconnectionattributes string prop
connectionattributes   prop
/**
* @return derby specific connection url attributes
*/
public final string getconnectionattributes
return connectionattributes
// ---------------------------- tracelevel -----------------------------------
//
public final static int trace_none   0x0
public final static int trace_connection_calls   0x1
public final static int trace_statement_calls   0x2
public final static int trace_result_set_calls   0x4
public final static int trace_driver_configuration   0x10
public final static int trace_connects   0x20
public final static int trace_protocol_flows   0x40
public final static int trace_result_set_meta_data   0x80
public final static int trace_parameter_meta_data   0x100
public final static int trace_diagnostics   0x200
public final static int trace_xa_calls   0x800
public final static int trace_all   0xffffffff
public final static int propertydefault_tracelevel   trace_all
protected int tracelevel   propertydefault_tracelevel
/**
* check if derby.client.tracelevel is provided as a jvm property.
* if yes, then we use that value. if not, then we look for tracelevel
* in the the properties parameter.
*
* @param properties jdbc url properties
* @return value of tracelevel property
*/
public static int gettracelevel properties properties
string tracelevelstring
tracelevelstring    readsystemproperty attribute client_jvm_property_prefix attribute client_trace_level
if  tracelevelstring    null
tracelevelstring   properties getproperty attribute client_trace_level
return parseint tracelevelstring  propertydefault_tracelevel
synchronized public void settracelevel int tracelevel
this tracelevel   tracelevel
public int gettracelevel
return this tracelevel
public synchronized void settracefile string tracefile
this tracefile   tracefile
public string gettracefile
return this tracefile
public synchronized void settracedirectory string tracedirectory
this tracedirectory   tracedirectory
public string gettracedirectory
return this tracedirectory
synchronized public void settracefileappend boolean tracefileappend
this tracefileappend   tracefileappend
public boolean gettracefileappend
return this tracefileappend
// --- private helper methods
/**
* the datasource keeps individual fields for the values that are relevant to the client. these need to be updated
* when set connection attributes is called.
*/
void updatedatasourcevalues properties prop
throws sqlexception
if  prop    null
return
if  prop containskey attribute username_attr
setuser getuser prop
if  prop containskey attribute client_security_mechanism
setsecuritymechanism getsecuritymechanism prop
if  prop containskey attribute client_trace_file
settracefile gettracefile prop
if  prop containskey attribute client_trace_directory
settracedirectory gettracedirectory prop
if  prop containskey attribute client_trace_append
settracefileappend gettracefileappend prop
if  prop containskey attribute client_retieve_message_text
setretrievemessagetext getretrievemessagetext prop
if  prop containskey attribute ssl_attr
setssl getclientsslmode prop