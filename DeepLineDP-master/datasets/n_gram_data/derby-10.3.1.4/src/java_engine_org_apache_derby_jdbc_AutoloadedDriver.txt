/*
derby - class org.apache.derby.jdbc.autoloadeddriver
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby jdbc
import java sql drivermanager
import java sql driver
import java sql connection
import java sql driverpropertyinfo
import java sql sqlexception
import java io printstream
import java util properties
import org apache derby iapi reference messageid
import org apache derby iapi reference attribute
import org apache derby iapi services i18n messageservice
import org apache derby iapi jdbc jdbcboot
/**
this is the dummy driver which is registered with the drivermanager and
which is autoloaded by jdbc4. loading this class will not automatically boot the derby engine.
instead, the engine boots lazily when you ask for a
connection. alternatively, you can force the engine to boot as follows:
<pre>
class.forname("org.apache.derby.jdbc.embeddeddriver").newinstance();
// or
new org.apache.derby.jdbc.embeddeddriver();
</pre>
*/
public class autoloadeddriver implements driver
// this flag is set if the engine is forcibly brought down.
private	static	boolean	_engineforceddown   false
//
// this is the driver that's specific to the jdbc level we're running at.
// it's the module which boots the whole derby engine.
//
private	static	driver	_drivermodule
static
try
drivermanager registerdriver  new autoloadeddriver
catch  sqlexception se
string	message   messageservice gettextmessage
messageid jdbc_driver_register_error  se getmessage
throw new illegalstateexception  message
/*
** methods from java.sql.driver.
*/
/**
accept anything that starts with <code>jdbc:derby:</code>.
@exception sqlexception if a database-access error occurs.
@see java.sql.driver
*/
public boolean acceptsurl string url  throws sqlexception
//
// we don't want to accidentally boot the engine just because
// the application is looking for a connection from some other
// driver.
//
return  _engineforceddown    internaldriver embeddeddriveracceptsurl url
/**
connect to the url if possible
@exception sqlexception illegal url or problem with connectiong
@see java.sql.driver
*/
public connection connect string url  properties info
throws sqlexception
//
// this pretty piece of logic compensates for the following behavior
// of the drivermanager: when asked to get a connection, the
// drivermanager cycles through all of its autoloaded drivers, looking
// for one which will return a connection. without this pretty logic,
// the embedded driver module will be booted by any request for
// a connection which cannot be satisfied by drivers ahead of us
// in the list.
if   internaldriver embeddeddriveracceptsurl url     return null
return getdrivermodule   connect url  info
/**
* returns an array of driverpropertyinfo objects describing possible properties.
@exception sqlexception if a database-access error occurs.
@see java.sql.driver
*/
public  driverpropertyinfo getpropertyinfo string url  properties info
throws sqlexception
return getdrivermodule   getpropertyinfo url  info
/**
* returns the driver's major version number.
@see java.sql.driver
*/
public int getmajorversion
try
return  getdrivermodule   getmajorversion
catch  sqlexception se
return 0
/**
* returns the driver's minor version number.
@see java.sql.driver
*/
public int getminorversion
try
return  getdrivermodule   getminorversion
catch  sqlexception se
return 0
/**
* report whether the driver is a genuine jdbc compliant (tm) driver.
@see java.sql.driver
*/
public boolean jdbccompliant
try
return  getdrivermodule   jdbccompliant
catch  sqlexception se
return false
///////////////////////////////////////////////////////////////////////
//
// support for booting and shutting down the engine.
//
///////////////////////////////////////////////////////////////////////
/*
** retrieve the driver which is specific to our jdbc level.
** we defer real work to this specific driver.
*/
static	driver getdrivermodule   throws sqlexception
if   _engineforceddown
// driver not registered
throw new sqlexception
messageservice gettextmessage messageid core_jdbc_driver_unregistered
if    isbooted       embeddeddriver boot
return _drivermodule
/*
** record which driver module actually booted.
*/
static	void	registerdrivermodule  driver driver
_drivermodule   driver
_engineforceddown   false
/*
** unregister the driver. this happens when the engine is
** forcibly shut down.
*/
static	void	unregisterdrivermodule
_drivermodule   null
_engineforceddown   true
/*
** return true if the engine has been booted.
*/
private	static	boolean	isbooted
return   _drivermodule    null