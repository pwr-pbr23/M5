/*
derby - class org.apache.derby.impl.sql.compile.nodefactoryimpl
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package	org apache derby impl sql compile
import java util properties
import java util vector
import org apache derby iapi services context contextmanager
import org apache derby iapi services monitor modulecontrol
import org apache derby iapi services monitor modulesupportable
import org apache derby iapi services monitor monitor
import org apache derby iapi sql compile optimizer
import org apache derby iapi sql compile nodefactory
import org apache derby iapi sql compile c_nodetypes
import org apache derby iapi sql dictionary tabledescriptor
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi services property propertyutil
import org apache derby iapi error standardexception
import org apache derby iapi reference enginetype
import org apache derby iapi reference sqlstate
import org apache derby catalog aliasinfo
import org apache derby iapi services loader classinfo
import org apache derby iapi util stringutil
/**
* this class is a factory for querytreenode nodes.  it exists to provide
* methods to generate new nodes without having to call new directly.
* in the future, it may implement caching of nodes, as well, to avoid
* memory management and garbage collection.
*
*/
public class nodefactoryimpl extends nodefactory implements modulecontrol  modulesupportable
//////////////////////////////////////////////////////////////////////
//
// constants
//
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//
// state
//
//////////////////////////////////////////////////////////////////////
/* do join order optimization by default */
private boolean joinorderoptimization   boolean true
private final classinfo	nodeci   new classinfo
private static final vector emptyvector   new vector 0
//////////////////////////////////////////////////////////////////////
//
// modulecontrol interface
//
//////////////////////////////////////////////////////////////////////
/**
* module supports the standard database engine and
* a storeless sql engine. probably a single nodefactory
* will only ever exist, see derby-673, as part of the
* compile system.
*/
public boolean cansupport properties startparams
return monitor isdesiredtype startparams
enginetype standalone_db   enginetype storeless_engine
/**
@see monitor
@exception standardexception ooops
*/
public void boot boolean create  properties startparams
throws standardexception
/*
** this system property determines whether to optimize join order
** by default.  it is used mainly for testing - there are many tests
** that assume the join order is fixed.
*/
string opt
propertyutil getsystemproperty optimizer join_order_optimization
if  opt    null
joinorderoptimization   boolean valueof opt
/**
@see monitor
*/
public void stop
/**
every module needs a public niladic constructor. it just does.
*/
public	nodefactoryimpl
/** @see nodefactory#dojoinorderoptimization */
public boolean dojoinorderoptimization
return joinorderoptimization
/**
* @see nodefactory#getnode
*
* @exception standardexception		thrown on error
*/
public querytreenode getnode int nodetype  contextmanager cm
throws standardexception
classinfo ci   nodeci
class nodeclass   null
if  ci    null
string nodename   nodename nodetype
try
nodeclass   class forname nodename
catch  classnotfoundexception cnfe
if  sanitymanager debug
sanitymanager throwassert
cnfe
ci   new classinfo nodeclass
nodeci   ci
querytreenode retval   null
try
retval    querytreenode  ci getnewinstance
//retval = (querytreenode) nodeclass.newinstance();
catch  exception iae
if  sanitymanager debug
sanitymanager throwassert    iae
retval setcontextmanager cm
retval setnodetype nodetype
return retval
/**
* translate a node type from c_nodetypes to a class name
*
* @param nodetype	a node type identifier from c_nodetypes
*
* @exception standardexception		thrown on error
*/
protected string nodename int nodetype
throws standardexception
switch  nodetype
// warning: when adding node types here, you must also add
// them to tools/jar/dbmsnode.properties
// xxxresolve: why not make this a giant array and simply index into
// it? manish thu feb 22 14:49:41 pst 2001
case c_nodetypes current_row_location_node
return c_nodenames current_row_location_node_name
case c_nodetypes group_by_list
return c_nodenames group_by_list_name
case c_nodetypes order_by_list
return c_nodenames order_by_list_name
case c_nodetypes predicate_list
return c_nodenames predicate_list_name
case c_nodetypes result_column_list
return c_nodenames result_column_list_name
case c_nodetypes subquery_list
return c_nodenames subquery_list_name
case c_nodetypes table_element_list
return c_nodenames table_element_list_name
case c_nodetypes untyped_null_constant_node
return c_nodenames untyped_null_constant_node_name
case c_nodetypes table_element_node
return c_nodenames table_element_node_name
case c_nodetypes value_node_list
return c_nodenames value_node_list_name
case c_nodetypes all_result_column
return c_nodenames all_result_column_name
case c_nodetypes get_current_connection_node
return c_nodenames get_current_connection_node_name
case c_nodetypes nop_statement_node
return c_nodenames nop_statement_node_name
case c_nodetypes set_transaction_isolation_node
return c_nodenames set_transaction_isolation_node_name
case c_nodetypes char_length_operator_node
return c_nodenames length_operator_node_name
// isnotnull compressed into isnull
case c_nodetypes is_not_null_node
case c_nodetypes is_null_node
return c_nodenames is_null_node_name
case c_nodetypes not_node
return c_nodenames not_node_name
case c_nodetypes sql_to_java_value_node
return c_nodenames sql_to_java_value_node_name
case c_nodetypes table_name
return c_nodenames table_name_name
case c_nodetypes group_by_column
return c_nodenames group_by_column_name
case c_nodetypes java_to_sql_value_node
return c_nodenames java_to_sql_value_node_name
case c_nodetypes from_list
return c_nodenames from_list_name
case c_nodetypes boolean_constant_node
return c_nodenames boolean_constant_node_name
case c_nodetypes and_node
return c_nodenames and_node_name
case c_nodetypes binary_equals_operator_node
case c_nodetypes binary_greater_equals_operator_node
case c_nodetypes binary_greater_than_operator_node
case c_nodetypes binary_less_equals_operator_node
case c_nodetypes binary_less_than_operator_node
case c_nodetypes binary_not_equals_operator_node
return c_nodenames binary_relational_operator_node_name
case c_nodetypes binary_minus_operator_node
case c_nodetypes binary_plus_operator_node
case c_nodetypes binary_times_operator_node
case c_nodetypes binary_divide_operator_node
case c_nodetypes mod_operator_node
return c_nodenames binary_arithmetic_operator_node_name
case c_nodetypes coalesce_function_node
return c_nodenames coalesce_function_node_name
case c_nodetypes concatenation_operator_node
return c_nodenames concatenation_operator_node_name
case c_nodetypes like_operator_node
return c_nodenames like_operator_node_name
case c_nodetypes or_node
return c_nodenames or_node_name
case c_nodetypes between_operator_node
return c_nodenames between_operator_node_name
case c_nodetypes conditional_node
return c_nodenames conditional_node_name
case c_nodetypes in_list_operator_node
return c_nodenames in_list_operator_node_name
case c_nodetypes bit_constant_node
return c_nodenames bit_constant_node_name
case c_nodetypes longvarbit_constant_node
case c_nodetypes varbit_constant_node
case c_nodetypes blob_constant_node
return c_nodenames varbit_constant_node_name
case c_nodetypes cast_node
return c_nodenames cast_node_name
case c_nodetypes char_constant_node
case c_nodetypes longvarchar_constant_node
case c_nodetypes varchar_constant_node
case c_nodetypes clob_constant_node
return c_nodenames char_constant_node_name
case c_nodetypes xml_constant_node
return c_nodenames xml_constant_node_name
case c_nodetypes column_reference
return c_nodenames column_reference_name
case c_nodetypes drop_index_node
return c_nodenames drop_index_node_name
case c_nodetypes drop_trigger_node
return c_nodenames drop_trigger_node_name
case c_nodetypes tinyint_constant_node
case c_nodetypes smallint_constant_node
case c_nodetypes int_constant_node
case c_nodetypes longint_constant_node
case c_nodetypes decimal_constant_node
case c_nodetypes double_constant_node
case c_nodetypes float_constant_node
return c_nodenames numeric_constant_node_name
case c_nodetypes usertype_constant_node
return c_nodenames usertype_constant_node_name
case c_nodetypes predicate
return c_nodenames predicate_name
case c_nodetypes result_column
return c_nodenames result_column_name
case c_nodetypes set_schema_node
return c_nodenames set_schema_node_name
case c_nodetypes simple_string_operator_node
return c_nodenames simple_string_operator_node_name
case c_nodetypes static_class_field_reference_node
return c_nodenames static_class_field_reference_node_name
case c_nodetypes static_method_call_node
return c_nodenames static_method_call_node_name
case c_nodetypes extract_operator_node
return c_nodenames extract_operator_node_name
case c_nodetypes parameter_node
return c_nodenames parameter_node_name
case c_nodetypes drop_schema_node
return c_nodenames drop_schema_node_name
case c_nodetypes drop_table_node
return c_nodenames drop_table_node_name
case c_nodetypes drop_view_node
return c_nodenames drop_view_node_name
case c_nodetypes subquery_node
return c_nodenames subquery_node_name
case c_nodetypes base_column_node
return c_nodenames base_column_node_name
case c_nodetypes call_statement_node
return c_nodenames call_statement_node_name
case c_nodetypes modify_column_default_node
case c_nodetypes modify_column_type_node
case c_nodetypes modify_column_constraint_node
case c_nodetypes modify_column_constraint_not_null_node
case c_nodetypes drop_column_node
return c_nodenames modify_column_node_name
case c_nodetypes non_static_method_call_node
return c_nodenames non_static_method_call_node_name
case c_nodetypes current_of_node
return c_nodenames current_of_node_name
case c_nodetypes default_node
return c_nodenames default_node_name
case c_nodetypes delete_node
return c_nodenames delete_node_name
case c_nodetypes update_node
return c_nodenames update_node_name
case c_nodetypes order_by_column
return c_nodenames order_by_column_name
case c_nodetypes row_result_set_node
return c_nodenames row_result_set_node_name
case c_nodetypes virtual_column_node
return c_nodenames virtual_column_node_name
case c_nodetypes current_datetime_operator_node
return c_nodenames current_datetime_operator_node_name
case c_nodetypes user_node
case c_nodetypes current_user_node
case c_nodetypes session_user_node
case c_nodetypes system_user_node
case c_nodetypes current_isolation_node
case c_nodetypes identity_val_node
case c_nodetypes current_schema_node
return c_nodenames special_function_node_name
case c_nodetypes is_node
return c_nodenames is_node_name
case c_nodetypes lock_table_node
return c_nodenames lock_table_node_name
case c_nodetypes alter_table_node
return c_nodenames alter_table_node_name
case c_nodetypes aggregate_node
return c_nodenames aggregate_node_name
case c_nodetypes column_definition_node
return c_nodenames column_definition_node_name
case c_nodetypes exec_sps_node
return c_nodenames exec_sps_node_name
case c_nodetypes fk_constraint_definition_node
return c_nodenames fk_constraint_definition_node_name
case c_nodetypes from_vti
return c_nodenames from_vti_name
case c_nodetypes materialize_result_set_node
return c_nodenames materialize_result_set_node_name
case c_nodetypes normalize_result_set_node
return c_nodenames normalize_result_set_node_name
case c_nodetypes scroll_insensitive_result_set_node
return c_nodenames scroll_insensitive_result_set_node_name
case c_nodetypes order_by_node
return c_nodenames order_by_node_name
case c_nodetypes distinct_node
return c_nodenames distinct_node_name
case c_nodetypes locate_function_node
case c_nodetypes substring_operator_node
case c_nodetypes trim_operator_node
case c_nodetypes timestamp_add_fn_node
case c_nodetypes timestamp_diff_fn_node
return c_nodenames ternary_operator_node_name
case c_nodetypes select_node
return c_nodenames select_node_name
case c_nodetypes create_view_node
return c_nodenames create_view_node_name
case c_nodetypes constraint_definition_node
return c_nodenames constraint_definition_node_name
case c_nodetypes new_invocation_node
return c_nodenames new_invocation_node_name
case c_nodetypes create_schema_node
return c_nodenames create_schema_node_name
case c_nodetypes from_base_table
return c_nodenames from_base_table_name
case c_nodetypes from_subquery
return c_nodenames from_subquery_name
case c_nodetypes group_by_node
return c_nodenames group_by_node_name
case c_nodetypes insert_node
return c_nodenames insert_node_name
case c_nodetypes join_node
return c_nodenames join_node_name
case c_nodetypes create_table_node
return c_nodenames create_table_node_name
case c_nodetypes rename_node
return c_nodenames rename_node_name
case c_nodetypes union_node
return c_nodenames union_node_name
case c_nodetypes intersect_or_except_node
return c_nodenames intersect_or_except_node_name
case c_nodetypes create_trigger_node
return c_nodenames create_trigger_node_name
case c_nodetypes half_outer_join_node
return c_nodenames half_outer_join_node_name
case c_nodetypes create_index_node
return c_nodenames create_index_node_name
case c_nodetypes cursor_node
return c_nodenames cursor_node_name
case c_nodetypes hash_table_node
return c_nodenames hash_table_node_name
case c_nodetypes index_to_base_row_node
return c_nodenames index_to_base_row_node_name
case c_nodetypes create_alias_node
return c_nodenames create_alias_node_name
case c_nodetypes project_restrict_node
return c_nodenames project_restrict_node_name
case c_nodetypes sql_boolean_constant_node
return c_nodenames sql_boolean_constant_node_name
case c_nodetypes drop_alias_node
return c_nodenames drop_alias_node_name
case c_nodetypes test_constraint_node
return c_nodenames test_constraint_node_name
case c_nodetypes absolute_operator_node
case c_nodetypes sqrt_operator_node
case c_nodetypes unary_plus_operator_node
case c_nodetypes unary_minus_operator_node
return c_nodenames unary_arithmetic_operator_node_name
case c_nodetypes savepoint_node
return c_nodenames savepoint_node_name
case c_nodetypes unary_date_timestamp_operator_node
return c_nodenames unary_date_timestamp_operator_node_name
case c_nodetypes timestamp_operator_node
return c_nodenames timestamp_operator_node_name
case c_nodetypes db2_length_operator_node
return c_nodenames db2_length_operator_node_name
case c_nodetypes xml_parse_operator_node
case c_nodetypes xml_serialize_operator_node
return c_nodenames unary_operator_node_name
case c_nodetypes xml_exists_operator_node
case c_nodetypes xml_query_operator_node
return c_nodenames binary_operator_node_name
case c_nodetypes grant_node
return c_nodenames grant_node_name
case c_nodetypes revoke_node
return c_nodenames revoke_node_name
case c_nodetypes privilege_node
return c_nodenames privilege_name
case c_nodetypes table_privileges_node
return c_nodenames table_privileges_name
// warning: when adding node types here, you must also add
// them to tools/jar/dbmsnodes.properties
default
throw standardexception newexception sqlstate not_implemented
/**
* get one of the several types of create alias nodes. carved out of parser
* so this could be used by alter publication.
*
* @param aliasname	the name of the alias
* @param targetname	the full path/method name
* @param aliasspecificinfo	the full path of the target method name,
*								if any
* @param aliastype	the type of alias to create
* @param delimitedidentifier	whether or not to treat the class name
*								as a delimited identifier if trying to
*								resolve it as a class alias.
* @param cm			a contextmanager
*
* @return	a createaliasnode matching the given parameters
*
* @exception standardexception		thrown on error
*/
public	querytreenode
getcreatealiasnode
object aliasname
object targetname
object aliasspecificinfo
char aliastype
boolean delimitedidentifier
contextmanager cm
throws standardexception
int nodetype
string methodname   null
string targetmethodname   null
string targetclassname   null
nodetype   c_nodetypes create_alias_node
if  aliastype    aliasinfo alias_type_synonym_as_char
int lastperiod
string fullstaticmethodname    string  targetname
int paren   fullstaticmethodname indexof
if  paren     1
// not a java signature - split based on last period
lastperiod   fullstaticmethodname lastindexof
else
// a java signature - split on last period before the '('
lastperiod   fullstaticmethodname substring 0  paren  lastindexof
if  lastperiod     1    lastperiod    fullstaticmethodname length   1
throw standardexception newexception sqlstate lang_invalid_full_static_method_name  fullstaticmethodname
string javaclassname   fullstaticmethodname substring 0  lastperiod
methodname   fullstaticmethodname substring lastperiod   1
targetname   javaclassname
return getnode
nodetype
aliasname
targetname
methodname
aliasspecificinfo
new character aliastype
delimitedidentifier
cm
/**
* return a node that represents invocation of the virtual table
* for the given table descriptor.  the mapping of the table descriptor
* to a specific vti class name will occur as part of the "init"
* phase for the newinvocationnode that we create here.
* <p>
* currently only handles no argument vtis corresponding to a subset
* of the diagnostic tables. (e.g. lock_table).
* the node returned is a from_vti node with a passed in new_invocation_node
* representing the class, with no arguments.
* other attributes of the original from_table node (such as resultcolumns)
* are passed into the from_vti node.
*
*/
public resultsetnode maptableasvti
tabledescriptor td
string correlationname
resultcolumnlist resultcolumns
properties tableproperties
contextmanager cm
throws standardexception
/* the fact that we pass a non-null table descriptor to the
* following call is an indication that we are mapping to a
* no-argument vti.  since we have the table descriptor we
* do not need to pass in a tablename. see newinvocationnode
* for more.
*/
querytreenode newnode
getnode c_nodetypes new_invocation_node
null 	   tablename
td         tabledescriptor
emptyvector
boolean false
cm
querytreenode vtinode
if  correlationname    null
vtinode   getnode c_nodetypes from_vti
newnode
correlationname
resultcolumns
tableproperties
cm
else
tablename exposedname   newnode maketablename td getschemaname
td getdescriptorname
vtinode   getnode c_nodetypes from_vti
newnode
correlationname
resultcolumns
tableproperties
exposedname
cm
return  resultsetnode  vtinode