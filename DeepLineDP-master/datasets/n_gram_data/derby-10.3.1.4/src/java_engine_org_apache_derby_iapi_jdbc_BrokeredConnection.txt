/*
derby - class org.apache.derby.iapi.jdbc.brokeredconnection
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi jdbc
import java sql connection
import java sql statement
import java sql preparedstatement
import java sql callablestatement
import java sql databasemetadata
import java sql sqlexception
import java sql sqlwarning
import org apache derby impl jdbc embedsqlwarning
import org apache derby impl jdbc util
import java io objectoutput
import java io objectinput
import java lang reflect
import org apache derby iapi reference jdbc30translation
import org apache derby iapi error publicapi
import org apache derby iapi error standardexception
import org apache derby shared common reference sqlstate
/**
* this is a rudimentary connection that delegates
* everything to connection.
*/
public abstract class brokeredconnection implements engineconnection
// default for derby
int stateholdability   jdbc30translation hold_cursors_over_commit
final brokeredconnectioncontrol control
private boolean isclosed
private string connstring
/**
maintain state as seen by this connection handle, not the state
of the underlying connection it is attached to.
*/
private int stateisolationlevel
private boolean statereadonly
private boolean stateautocommit
/////////////////////////////////////////////////////////////////////////
//
//	constructors
//
/////////////////////////////////////////////////////////////////////////
public	brokeredconnection brokeredconnectioncontrol control
this control   control
public final void setautocommit boolean autocommit  throws sqlexception
try
control checkautocommit autocommit
getrealconnection   setautocommit autocommit
stateautocommit   autocommit
catch  sqlexception sqle
notifyexception sqle
throw sqle
public final boolean getautocommit   throws sqlexception
try
return getrealconnection   getautocommit
catch  sqlexception sqle
notifyexception sqle
throw sqle
public final statement createstatement   throws sqlexception
try
return control wrapstatement getrealconnection   createstatement
catch  sqlexception sqle
notifyexception sqle
throw sqle
public final preparedstatement preparestatement string sql
throws sqlexception
try
return control wrapstatement getrealconnection   preparestatement sql   sql  null
catch  sqlexception sqle
notifyexception sqle
throw sqle
public final callablestatement preparecall string sql  throws sqlexception
try
return control wrapstatement getrealconnection   preparecall sql   sql
catch  sqlexception sqle
notifyexception sqle
throw sqle
public final string nativesql string sql  throws sqlexception
try
return getrealconnection   nativesql sql
catch  sqlexception sqle
notifyexception sqle
throw sqle
public final void commit   throws sqlexception
try
control checkcommit
getrealconnection   commit
catch  sqlexception sqle
notifyexception sqle
throw sqle
public final void rollback   throws sqlexception
try
control checkrollback
getrealconnection   rollback
catch  sqlexception sqle
notifyexception sqle
throw sqle
public final void close   throws sqlexception
if  isclosed
return
try
if   control closingconnection
isclosed   true
return
isclosed   true
getrealconnection   close
catch  sqlexception sqle
notifyexception sqle
throw sqle
public final boolean isclosed   throws sqlexception
if  isclosed
return true
try
boolean realisclosed   getrealconnection   isclosed
if  realisclosed
control closingconnection
isclosed   true
return realisclosed
catch  sqlexception sqle
notifyexception sqle
throw sqle
public final sqlwarning getwarnings   throws sqlexception
try
return getrealconnection   getwarnings
catch  sqlexception sqle
notifyexception sqle
throw sqle
public final void clearwarnings   throws sqlexception
try
getrealconnection   clearwarnings
catch  sqlexception sqle
notifyexception sqle
throw sqle
public final databasemetadata getmetadata   throws sqlexception
try
return getrealconnection   getmetadata
catch  sqlexception sqle
notifyexception sqle
throw sqle
public final void setreadonly boolean readonly  throws sqlexception
try
getrealconnection   setreadonly readonly
statereadonly   readonly
catch  sqlexception sqle
notifyexception sqle
throw sqle
public final boolean isreadonly   throws sqlexception
try
return getrealconnection   isreadonly
catch  sqlexception sqle
notifyexception sqle
throw sqle
public final void setcatalog string catalog  throws sqlexception
try
getrealconnection   setcatalog catalog
catch  sqlexception sqle
notifyexception sqle
throw sqle
public final string getcatalog   throws sqlexception
try
return getrealconnection   getcatalog
catch  sqlexception sqle
notifyexception sqle
throw sqle
public final void settransactionisolation int level  throws sqlexception
try
getrealconnection   settransactionisolation level
stateisolationlevel   level
catch  sqlexception sqle
notifyexception sqle
throw sqle
public final int gettransactionisolation   throws sqlexception
try
return getrealconnection   gettransactionisolation
catch  sqlexception sqle
notifyexception sqle
throw sqle
public final statement createstatement int resultsettype  int resultsetconcurrency
throws sqlexception
try
return control wrapstatement getrealconnection
createstatement resultsettype  resultsetconcurrency
catch  sqlexception se
notifyexception se
throw se
public final preparedstatement preparestatement string sql  int resultsettype
int resultsetconcurrency
throws sqlexception
try
return control wrapstatement getrealconnection
preparestatement sql  resultsettype  resultsetconcurrency   sql  null
catch  sqlexception se
notifyexception se
throw se
public final callablestatement preparecall string sql  int resultsettype
int resultsetconcurrency  throws sqlexception
try
return control wrapstatement getrealconnection
preparecall sql  resultsettype  resultsetconcurrency   sql
catch  sqlexception se
notifyexception se
throw se
public java util map gettypemap   throws sqlexception
try
return getrealconnection   gettypemap
catch  sqlexception se
notifyexception se
throw se
public final void settypemap java util map map  throws sqlexception
try
getrealconnection   settypemap map
catch  sqlexception se
notifyexception se
throw se
/////////////////////////////////////////////////////////////////////////
//
//	minions
//
/////////////////////////////////////////////////////////////////////////
/**
*	a little indirection for getting the real connection.
*
*	@return	the current connection
*/
final engineconnection getrealconnection   throws sqlexception
if  isclosed
throw util nocurrentconnection
return control getrealconnection
final void notifyexception sqlexception sqle
if   isclosed
control notifyexception sqle
/**
sync up the state of the underlying connection
with the state of this new handle.
*/
public void syncstate   throws sqlexception
engineconnection conn   getrealconnection
stateisolationlevel   conn gettransactionisolation
statereadonly   conn isreadonly
stateautocommit   conn getautocommit
stateholdability   conn getholdability
/**
isolation level state in brokeredconnection can get out of sync
if the isolation is set using sql rather than jdbc. in order to
ensure correct state level information, this method is called
at the start and end of a global transaction.
*/
public void getisolationuptodate   throws sqlexception
if  control isisolationlevelsetusingsqlorjdbc
stateisolationlevel   getrealconnection   gettransactionisolation
control resetisolationlevelflag
/**
set the state of the underlying connection according to the
state of this connection's view of state.
@param complete if true set the complete state of the underlying
connection, otherwise set only the connection related state (ie.
the non-transaction specific state).
*/
public void setstate boolean complete  throws sqlexception
class conn_param     integer type
object conn_arg     new integer stateholdability
connection conn   getrealconnection
if  complete
conn settransactionisolation stateisolationlevel
conn setreadonly statereadonly
conn setautocommit stateautocommit
// make the underlying connection pick my holdability state
// since holdability is a state of the connection handle
// not the underlying transaction.
// jdk13 does not have connection.setholdability method and hence using
// reflection to cover both jdk13 and higher jdks
try
method sh   conn getclass   getmethod    conn_param
sh invoke conn  conn_arg
catch  exception e
throw publicapi wrapstandardexception  standardexception plainwrapexception  e
public brokeredstatement newbrokeredstatement brokeredstatementcontrol statementcontrol  throws sqlexception
return new brokeredstatement statementcontrol  getjdbclevel
public abstract brokeredpreparedstatement
newbrokeredstatement brokeredstatementcontrol statementcontrol
string sql  object generatedkeys  throws sqlexception
public abstract brokeredcallablestatement
newbrokeredstatement brokeredstatementcontrol statementcontrol
string sql  throws sqlexception
/**
*  set the drdaid for this connection. the drdaid prints with the
*  statement text to the errror log
*  @param drdaid  drdaid to be used for this connection
*
*/
public final void setdrdaid string drdaid
try
getrealconnection   setdrdaid drdaid
catch  sqlexception sqle
// connection is closed, just ignore drdaid
// since connection cannot be used.
/**
*  set the internal isolation level to use for preparing statements.
*  subsequent prepares will use this isoalation level
* @param level - internal isolation level
* @throws sqlexception
* see embedconnection#setprepareisolation
*
*/
public final void setprepareisolation int level  throws sqlexception
getrealconnection   setprepareisolation level
/**
* get the isolation level that is currently being used to prepare
* statements (used for network server)
*
* @throws sqlexception
* @return current prepare isolation level
* see embedconnection#getprepareisolation
*/
public final int getprepareisolation   throws sqlexception
return getrealconnection   getprepareisolation
/**
* add a sqlwarning to this connection object.
* @throws sqlexception
*/
public final void addwarning sqlwarning w  throws sqlexception
getrealconnection   addwarning w
/**
* checks if the connection is closed and throws an exception if
* it is.
*
* @exception sqlexception if the connection is closed
*/
protected final void checkifclosed   throws sqlexception
if  isclosed
throw util nocurrentconnection
/**
* get the string representation for this connection.  return
* the class name/hash code and various debug information.
*
* @return unique string representation for this connection
*/
public string tostring
if   connstring    null
string wrappedstring
try
wrappedstring   getrealconnection   tostring
catch   sqlexception e
wrappedstring
connstring   this getclass   getname         this hashcode
wrappedstring
return connstring
int getjdbclevel     return 2
/*
* jdbc 3.0 methods that are exposed through engineconnection.
*/
/**
* prepare statement with explicit holdability.
*/
public final preparedstatement preparestatement string sql
int resultsettype  int resultsetconcurrency
int resultsetholdability  throws sqlexception
try
resultsetholdability   statementholdabilitycheck resultsetholdability
return control wrapstatement
getrealconnection   preparestatement sql  resultsettype
resultsetconcurrency  resultsetholdability   sql  null
catch  sqlexception se
notifyexception se
throw se
/**
* get the holdability for statements created by this connection
* when holdability is not passed in.
*/
public final int getholdability   throws sqlexception
try
return getrealconnection   getholdability
catch  sqlexception se
notifyexception se
throw se
/*
** methods private to the class.
*/
/**
* check the result set holdability when creating a statement
* object. section 16.1.3.1 of jdbc 4.0 (proposed final draft)
* says the driver may change the holdabilty and add a sqlwarning
* to the connection object.
*
* this work-in-progress implementation throws an exception
* to match the old behaviour just as part of incremental development.
*/
final int statementholdabilitycheck int resultsetholdability
throws sqlexception
int holdability   control checkholdcursors resultsetholdability  true
if  holdability    resultsetholdability
sqlwarning w
embedsqlwarning newembedsqlwarning sqlstate holdable_result_set_not_available
addwarning w
return holdability
/**
* add the locator and the corresponding lob object into the
* hashmap
*
* @param lobreference the object which contains the lob object that
*                     that is added to the hashmap.
* @return an integer that represents the locator that has been
*         allocated to this lob.
*/
public int addlobmapping object lobreference  throws sqlexception
//forward the methods implementation to the implementation in the
//underlying embedconnection object.
return getrealconnection   addlobmapping lobreference
/**
* clear the hashmap of all entries.
* called when a commit or rollback of the transaction
* happens.
*/
public void clearlobmapping   throws sqlexception
//forward the methods implementation to the implementation in the
//underlying embedconnection object.
getrealconnection   clearlobmapping
/**
* get the lob reference corresponding to the locator.
* @param key the integer that represents the lob locator value.
* @return the lob object corresponding to this locator.
*/
public object getlobmapping int key  throws sqlexception
//forward the methods implementation to the implementation in the
//underlying embedconnection object.
return getrealconnection   getlobmapping key