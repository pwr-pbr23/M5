/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq ra
import java net uri
import java util hashmap
import javax jms connection
import javax jms jmsexception
import javax jms xaconnection
import javax jms xasession
import javax resource notsupportedexception
import javax resource resourceexception
import javax resource spi activationspec
import javax resource spi bootstrapcontext
import javax resource spi resourceadapterinternalexception
import javax resource spi endpoint messageendpointfactory
import javax transaction xa xaresource
import org apache activemq activemqconnection
import org apache activemq activemqconnectionfactory
import org apache activemq redeliverypolicy
import org apache activemq broker brokerfactory
import org apache activemq broker brokerservice
import org apache activemq util servicesupport
/**
* knows how to connect to one activemq server. it can then activate endpoints
* and deliver messages to those end points using the connection configure in
* the resource adapter. <p/>must override equals and hashcode (jca spec 16.4)
*
* @org.apache.xbean.xbean element="resourceadapter" rootelement="true"
*                         description="the jca resource adaptor for activemq"
*
*/
public class activemqresourceadapter extends activemqconnectionsupport implements messageresourceadapter
private final hashmap<activemqendpointactivationkey  activemqendpointworker> endpointworkers   new hashmap<activemqendpointactivationkey  activemqendpointworker>
private bootstrapcontext bootstrapcontext
private string brokerxmlconfig
private brokerservice broker
private thread brokerstartthread
private activemqconnectionfactory connectionfactory
/**
*
*/
public activemqresourceadapter
super
/**
* @see javax.resource.spi.resourceadapter#start(javax.resource.spi.bootstrapcontext)
*/
public void start bootstrapcontext bootstrapcontext  throws resourceadapterinternalexception
this bootstrapcontext   bootstrapcontext
if  brokerxmlconfig    null    brokerxmlconfig trim   length   > 0
brokerstartthread   new thread
@override
public void run
try
// ensure rar resources are available to xbean (needed for weblogic)
log debug     thread currentthread   getcontextclassloader
thread currentthread   setcontextclassloader getclass   getclassloader
log debug     thread currentthread   getcontextclassloader
synchronized  activemqresourceadapter this
broker   brokerfactory createbroker new uri brokerxmlconfig
broker start
catch  throwable e
log warn   brokerxmlconfig   e getmessage
log debug   e getmessage    e
brokerstartthread setdaemon true
brokerstartthread start
// wait up to 5 seconds for the broker to start up in the async thread.. otherwise keep going without it..
try
brokerstartthread join 1000 5
catch  interruptedexception e
thread currentthread   interrupt
/**
* @see org.apache.activemq.ra.messageresourceadapter#makeconnection()
*/
public activemqconnection makeconnection   throws jmsexception
if  connectionfactory    null
return makeconnection getinfo
else
return makeconnection getinfo    connectionfactory
/**
* @param activationspec
*/
public activemqconnection makeconnection messageactivationspec activationspec  throws jmsexception
activemqconnectionfactory cf   getconnectionfactory
if  cf    null
cf   createconnectionfactory getinfo
string username   defaultvalue activationspec getusername    getinfo   getusername
string password   defaultvalue activationspec getpassword    getinfo   getpassword
string clientid   activationspec getclientid
if  clientid    null
cf setclientid clientid
else
if  activationspec isdurablesubscription
log warn     activationspec
activemqconnection physicalconnection    activemqconnection  cf createconnection username  password
// have we configured a redelivery policy
redeliverypolicy redeliverypolicy   activationspec redeliverypolicy
if  redeliverypolicy    null
physicalconnection setredeliverypolicy redeliverypolicy
return physicalconnection
/**
* @see javax.resource.spi.resourceadapter#stop()
*/
public void stop
while  endpointworkers size   > 0
activemqendpointactivationkey key   endpointworkers keyset   iterator   next
endpointdeactivation key getmessageendpointfactory    key getactivationspec
synchronized  this
if  broker    null
if  brokerstartthread isalive
brokerstartthread interrupt
servicesupport dispose broker
broker   null
this bootstrapcontext   null
/**
* @see org.apache.activemq.ra.messageresourceadapter#getbootstrapcontext()
*/
public bootstrapcontext getbootstrapcontext
return bootstrapcontext
/**
* @see javax.resource.spi.resourceadapter#endpointactivation(javax.resource.spi.endpoint.messageendpointfactory,
*      javax.resource.spi.activationspec)
*/
public void endpointactivation messageendpointfactory endpointfactory  activationspec activationspec  throws resourceexception
// spec section 5.3.3
if   equals activationspec getresourceadapter
throw new resourceexception     activationspec getresourceadapter         this
if    activationspec instanceof messageactivationspec
throw new notsupportedexception     activationspec getclass
activemqendpointactivationkey key   new activemqendpointactivationkey endpointfactory   messageactivationspec activationspec
// this is weird.. the same endpoint activated twice.. must be a
// container error.
if  endpointworkers containskey key
throw new illegalstateexception
activemqendpointworker worker   new activemqendpointworker this  key
endpointworkers put key  worker
worker start
/**
* @see javax.resource.spi.resourceadapter#endpointdeactivation(javax.resource.spi.endpoint.messageendpointfactory,
*      javax.resource.spi.activationspec)
*/
public void endpointdeactivation messageendpointfactory endpointfactory  activationspec activationspec
if  activationspec instanceof messageactivationspec
activemqendpointactivationkey key   new activemqendpointactivationkey endpointfactory   messageactivationspec activationspec
activemqendpointworker worker   endpointworkers remove key
if  worker    null
// this is weird.. that endpoint was not activated.. oh well..
// this method
// does not throw exceptions so just return.
return
try
worker stop
catch  interruptedexception e
// we interrupted.. we won't throw an exception but will stop
// waiting for the worker
// to stop.. we tried our best. keep trying to interrupt the
// thread.
thread currentthread   interrupt
/**
* we only connect to one resource manager per resourceadapter instance, so
* any activationspec will return the same xaresource.
*
* @see javax.resource.spi.resourceadapter#getxaresources(javax.resource.spi.activationspec[])
*/
public xaresource getxaresources activationspec activationspecs  throws resourceexception
connection connection   null
try
connection   makeconnection
if  connection instanceof xaconnection
xasession session     xaconnection connection  createxasession
xaresource xaresource   session getxaresource
return new xaresource
xaresource
return new xaresource
catch  jmsexception e
throw new resourceexception e
finally
try
connection close
catch  throwable ignore
//
// ///////////////////////////////////////////////////////////////////////
//
// java bean getters and setters for this resourceadapter class.
//
// ///////////////////////////////////////////////////////////////////////
/**
* @see org.apache.activemq.ra.messageresourceadapter#getbrokerxmlconfig()
*/
public string getbrokerxmlconfig
return brokerxmlconfig
/**
* sets the <a href="http://activemq.org/xml+configuration">xml
* configuration file </a> used to configure the activemq broker via spring
* if using embedded mode.
*
* @param brokerxmlconfig is the filename which is assumed to be on the
*                classpath unless a url is specified. so a value of
*                <code>foo/bar.xml</code> would be assumed to be on the
*                classpath whereas <code>file:dir/file.xml</code> would
*                use the file system. any valid url string is supported.
*/
public void setbrokerxmlconfig string brokerxmlconfig
this brokerxmlconfig   brokerxmlconfig
/**
* @see java.lang.object#equals(java.lang.object)
*/
@override
public boolean equals object o
if  this    o
return true
if    o instanceof messageresourceadapter
return false
final messageresourceadapter activemqresourceadapter    messageresourceadapter o
if   getinfo   equals activemqresourceadapter getinfo
return false
if  notequal brokerxmlconfig  activemqresourceadapter getbrokerxmlconfig
return false
return true
/**
* @see java.lang.object#hashcode()
*/
@override
public int hashcode
int result
result   getinfo   hashcode
if  brokerxmlconfig    null
result ^  brokerxmlconfig hashcode
return result
public activemqconnectionfactory getconnectionfactory
return connectionfactory
public void setconnectionfactory activemqconnectionfactory aconnectionfactory
this connectionfactory   aconnectionfactory