/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq store jdbc
import java io ioexception
import java sql sqlexception
import java util concurrent atomic atomiclong
import org apache activemq activemqmessageaudit
import org apache activemq broker connectioncontext
import org apache activemq command activemqdestination
import org apache activemq command message
import org apache activemq command messageack
import org apache activemq command messageid
import org apache activemq store abstractmessagestore
import org apache activemq store messagerecoverylistener
import org apache activemq util bytesequence
import org apache activemq util bytesequencedata
import org apache activemq util ioexceptionsupport
import org apache activemq wireformat wireformat
import org slf4j logger
import org slf4j loggerfactory
/**
*
*/
public class jdbcmessagestore extends abstractmessagestore
class duration
static final int limit   100
final long start   system currenttimemillis
final string name
duration string name
this name   name
void end
end null
void end object o
long duration   system currenttimemillis     start
if  duration > limit
system err println name       duration       o
private static final logger log   loggerfactory getlogger jdbcmessagestore class
protected final wireformat wireformat
protected final jdbcadapter adapter
protected final jdbcpersistenceadapter persistenceadapter
protected atomiclong lastrecoveredsequenceid   new atomiclong  1
protected atomiclong lastrecoveredpriority   new atomiclong byte max_value  1
protected activemqmessageaudit audit
public jdbcmessagestore jdbcpersistenceadapter persistenceadapter  jdbcadapter adapter  wireformat wireformat  activemqdestination destination  activemqmessageaudit audit  throws ioexception
super destination
this persistenceadapter   persistenceadapter
this adapter   adapter
this wireformat   wireformat
this audit   audit
if  destination isqueue      persistenceadapter getbrokerservice   shouldrecordvirtualdestination destination
recorddestinationcreation destination
private void recorddestinationcreation activemqdestination destination  throws ioexception
transactioncontext c   persistenceadapter gettransactioncontext
try
c   persistenceadapter gettransactioncontext
if  adapter dogetlastackeddurablesubscribermessageid c  destination  destination getqualifiedname    destination getqualifiedname    < 0
adapter dorecorddestination c  destination
catch  sqlexception e
jdbcpersistenceadapter log    e
throw ioexceptionsupport create     destination       e  e
finally
c close
public void addmessage connectioncontext context  message message  throws ioexception
messageid messageid   message getmessageid
if  audit    null    audit isduplicate message
if  log isdebugenabled
log debug destination getphysicalname
messageid
return
long sequenceid   persistenceadapter getnextsequenceid
// serialize the message..
byte data
try
bytesequence packet   wireformat marshal message
data   bytesequencedata tobytearray packet
catch  ioexception e
throw ioexceptionsupport create     messageid       e  e
// get a connection and insert the message into the db.
transactioncontext c   persistenceadapter gettransactioncontext context
try
adapter doaddmessage c  sequenceid  messageid  destination  data  message getexpiration
this isprioritizedmessages   ? message getpriority     0  context    null ? context getxid     null
catch  sqlexception e
jdbcpersistenceadapter log    e
throw ioexceptionsupport create     messageid       e  e
finally
c close
if  context    null    context getxid      null
message getmessageid   setdatalocator sequenceid
else
onadd messageid  sequenceid  message getpriority
protected void onadd messageid messageid  long sequenceid  byte priority
public void addmessagereference connectioncontext context  messageid messageid  long expirationtime  string messageref  throws ioexception
// get a connection and insert the message into the db.
transactioncontext c   persistenceadapter gettransactioncontext context
try
adapter doaddmessagereference c  persistenceadapter getnextsequenceid    messageid  destination  expirationtime  messageref
catch  sqlexception e
jdbcpersistenceadapter log    e
throw ioexceptionsupport create     messageid       e  e
finally
c close
public message getmessage messageid messageid  throws ioexception
// get a connection and pull the message out of the db
transactioncontext c   persistenceadapter gettransactioncontext
try
byte data   adapter dogetmessage c  messageid
if  data    null
return null
message answer    message wireformat unmarshal new bytesequence data
return answer
catch  ioexception e
throw ioexceptionsupport create     messageid       e  e
catch  sqlexception e
jdbcpersistenceadapter log    e
throw ioexceptionsupport create     messageid       e  e
finally
c close
public string getmessagereference messageid messageid  throws ioexception
long id   messageid getbrokersequenceid
// get a connection and pull the message out of the db
transactioncontext c   persistenceadapter gettransactioncontext
try
return adapter dogetmessagereference c  id
catch  ioexception e
throw ioexceptionsupport create     messageid       e  e
catch  sqlexception e
jdbcpersistenceadapter log    e
throw ioexceptionsupport create     messageid       e  e
finally
c close
public void removemessage connectioncontext context  messageack ack  throws ioexception
long seq   persistenceadapter getstoresequenceidformessageid ack getlastmessageid    destination
// get a connection and remove the message from the db
transactioncontext c   persistenceadapter gettransactioncontext context
try
adapter doremovemessage c  seq  context    null ? context getxid     null
catch  sqlexception e
jdbcpersistenceadapter log    e
throw ioexceptionsupport create     ack getlastmessageid         e  e
finally
c close
if  context    null    context getxid      null
ack getlastmessageid   setdatalocator seq
public void recover final messagerecoverylistener listener  throws exception
// get all the message ids out of the database.
transactioncontext c   persistenceadapter gettransactioncontext
try
c   persistenceadapter gettransactioncontext
adapter dorecover c  destination  new jdbcmessagerecoverylistener
public boolean recovermessage long sequenceid  byte data  throws exception
message msg    message wireformat unmarshal new bytesequence data
msg getmessageid   setbrokersequenceid sequenceid
return listener recovermessage msg
public boolean recovermessagereference string reference  throws exception
return listener recovermessagereference new messageid reference
catch  sqlexception e
jdbcpersistenceadapter log    e
throw ioexceptionsupport create     e  e
finally
c close
/**
* @see org.apache.activemq.store.messagestore#removeallmessages(connectioncontext)
*/
public void removeallmessages connectioncontext context  throws ioexception
// get a connection and remove the message from the db
transactioncontext c   persistenceadapter gettransactioncontext context
try
adapter doremoveallmessages c  destination
catch  sqlexception e
jdbcpersistenceadapter log    e
throw ioexceptionsupport create     e  e
finally
c close
public int getmessagecount   throws ioexception
int result   0
transactioncontext c   persistenceadapter gettransactioncontext
try
result   adapter dogetmessagecount c  destination
catch  sqlexception e
jdbcpersistenceadapter log    e
throw ioexceptionsupport create     destination       e  e
finally
c close
return result
/**
* @param maxreturned
* @param listener
* @throws exception
* @see org.apache.activemq.store.messagestore#recovernextmessages(int,
*      org.apache.activemq.store.messagerecoverylistener)
*/
public void recovernextmessages int maxreturned  final messagerecoverylistener listener  throws exception
transactioncontext c   persistenceadapter gettransactioncontext
try
adapter dorecovernextmessages c  destination  lastrecoveredsequenceid get    lastrecoveredpriority get
maxreturned  isprioritizedmessages    new jdbcmessagerecoverylistener
public boolean recovermessage long sequenceid  byte data  throws exception
if  listener hasspace
message msg    message wireformat unmarshal new bytesequence data
msg getmessageid   setbrokersequenceid sequenceid
listener recovermessage msg
lastrecoveredsequenceid set sequenceid
lastrecoveredpriority set msg getpriority
return true
return false
public boolean recovermessagereference string reference  throws exception
if  listener hasspace
listener recovermessagereference new messageid reference
return true
return false
catch  sqlexception e
jdbcpersistenceadapter log    e
finally
c close
/**
* @see org.apache.activemq.store.messagestore#resetbatching()
*/
public void resetbatching
if  log istraceenabled
log trace destination getphysicalname         lastrecoveredsequenceid get
lastrecoveredsequenceid set  1
lastrecoveredpriority set byte max_value   1
@override
public void setbatch messageid messageid
try
long storedvalues   persistenceadapter getstoresequenceidformessageid messageid  destination
lastrecoveredsequenceid set storedvalues
lastrecoveredpriority set storedvalues
catch  ioexception ignoredasalreadylogged
lastrecoveredsequenceid set  1
lastrecoveredpriority set byte max_value  1
if  log istraceenabled
log trace destination getphysicalname         lastrecoveredsequenceid get
lastrecoveredpriority get
public void setprioritizedmessages boolean prioritizedmessages
super setprioritizedmessages prioritizedmessages