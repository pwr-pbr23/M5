/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq security
import org apache activemq command activemqdestination
import org apache activemq command activemqqueue
import org apache activemq command activemqtopic
import org apache activemq filter destinationmapentry
import org apache activemq jaas groupprincipal
import org apache activemq jaas userprincipal
import org slf4j logger
import org slf4j loggerfactory
import javax naming
import javax naming directory
import javax naming event
import javax naming ldap ldapname
import javax naming ldap rdn
import java util
/**
*/
public class simplecachedldapauthorizationmap extends defaultauthorizationmap
private static final logger log   loggerfactory getlogger simplecachedldapauthorizationmap class
// configuration options
private string initialcontextfactory
private string connectionurl
private string connectionusername
private string connectionpassword
private string connectionprotocol
private string authentication
private int queueprefixlength   4
private int topicprefixlength   4
private int tempprefixlength   4
private string queuesearchbase
private string topicsearchbase
private string tempsearchbase
private string permissiongroupmemberattribute
private string adminpermissiongroupsearchfilter
private string readpermissiongroupsearchfilter
private string writepermissiongroupsearchfilter
private boolean legacygroupmapping   true
private string groupobjectclass
private string userobjectclass
private string groupnameattribute
private string usernameattribute
private int refreshinterval    1
private boolean refreshdisabled   false
// internal state
private long lastupdated
private static string any_descendant
protected dircontext context
private eventdircontext eventcontext
protected hashmap<activemqdestination  authorizationentry> entries
new hashmap<activemqdestination  authorizationentry>
protected dircontext createcontext   throws namingexception
hashtable<string  string> env   new hashtable<string  string>
env put context initial_context_factory  initialcontextfactory
if  connectionusername    null       equals connectionusername
env put context security_principal  connectionusername
if  connectionpassword    null       equals connectionpassword
env put context security_credentials  connectionpassword
env put context security_protocol  connectionprotocol
env put context provider_url  connectionurl
env put context security_authentication  authentication
return new initialdircontext env
protected boolean iscontextalive
boolean alive   false
if  context    null
try
context getattributes
alive   true
catch  exception e
return alive
/**
* returns the existing open context or creates a new one and registers listeners for
* push notifications if such an update style is enabled.  this implementation should not
* be invoked concurrently.
*
* @return the current context
*
* @throws namingexception if there is an error setting things up
*/
protected dircontext open   throws namingexception
if  iscontextalive
return context
try
context   createcontext
if  refreshinterval     1     refreshdisabled
eventcontext     eventdircontext context lookup
final searchcontrols constraints   new searchcontrols
constraints setsearchscope searchcontrols subtree_scope
// listeners for queue policy //
// listeners for each type of permission
for  permissiontype permissiontype   permissiontype values
eventcontext addnaminglistener queuesearchbase  getfilterforpermissiontype permissiontype   constraints
this new cachedldapauthorizationmapnamespacechangelistener destinationtype queue  permissiontype
// listener for changes to the destination pattern entry itself and not a permission entry.
eventcontext addnaminglistener queuesearchbase     new searchcontrols
this new cachedldapauthorizationmapnamespacechangelistener destinationtype queue  null
// listeners for topic policy //
// listeners for each type of permission
for  permissiontype permissiontype   permissiontype values
eventcontext addnaminglistener topicsearchbase  getfilterforpermissiontype permissiontype   constraints
this new cachedldapauthorizationmapnamespacechangelistener destinationtype topic  permissiontype
// listener for changes to the destination pattern entry itself and not a permission entry.
eventcontext addnaminglistener topicsearchbase     new searchcontrols
this new cachedldapauthorizationmapnamespacechangelistener destinationtype topic  null
// listeners for temp policy //
// listeners for each type of permission
for  permissiontype permissiontype   permissiontype values
eventcontext addnaminglistener tempsearchbase  getfilterforpermissiontype permissiontype   constraints
this new cachedldapauthorizationmapnamespacechangelistener destinationtype temp  permissiontype
catch  namingexception e
context   null
throw e
return context
/**
* queries the directory and initializes the policy based on the data in the directory.
* this implementation should not be invoked concurrently.
*
* @throws exception if there is an unrecoverable error processing the directory contents
*/
@suppresswarnings
protected void query   throws exception
dircontext currentcontext   open
final searchcontrols constraints   new searchcontrols
constraints setsearchscope searchcontrols subtree_scope
for  permissiontype permissiontype   permissiontype values
try
processqueryresults
currentcontext search queuesearchbase  getfilterforpermissiontype permissiontype   constraints
destinationtype queue  permissiontype
catch  exception e
log error     queuesearchbase
getfilterforpermissiontype permissiontype       e
for  permissiontype permissiontype   permissiontype values
try
processqueryresults
currentcontext search topicsearchbase  getfilterforpermissiontype permissiontype   constraints
destinationtype topic  permissiontype
catch  exception e
log error     topicsearchbase
getfilterforpermissiontype permissiontype       e
for  permissiontype permissiontype   permissiontype values
try
processqueryresults
currentcontext search tempsearchbase  getfilterforpermissiontype permissiontype   constraints
destinationtype temp  permissiontype
catch  exception e
log error     tempsearchbase
getfilterforpermissiontype permissiontype       e
setentries new arraylist<destinationmapentry> entries values
updated
/**
* processes results from a directory query in the context of a given destination type and permission type.
* this implementation should not be invoked concurrently.
*
* @param results the results to process
* @param destinationtype the type of the destination for which the directory results apply
* @param permissiontype the type of the permission for which the directory results apply
*
* @throws exception if there is an error processing the results
*/
protected void processqueryresults namingenumeration<searchresult> results
destinationtype destinationtype  permissiontype permissiontype  throws exception
while  results hasmore
searchresult result   results next
authorizationentry entry   null
try
entry   getentry new ldapname result getnameinnamespace     destinationtype
catch  exception e
log error
result getnameinnamespace    e
continue
applyacl entry  result  permissiontype
/**
* marks the time at which the authorization state was last refreshed.  relevant for synchronous policy updates.
* this implementation should not be invoked concurrently.
*/
protected void updated
lastupdated   system currenttimemillis
/**
* retrieves or creates the {@link authorizationentry} that corresponds to
* the dn in {@code dn}.  this implementation should not be invoked concurrently.
*
* @param dn
*            the dn representing the policy entry in the directory
* @param destinationtype the type of the destination to get/create the entry for
*
* @return the corresponding authorization entry for the dn
*
* @throws illegalargumentexception
*             if destination type is not one of {@link destinationtype#queue}, {@link destinationtype#topic},
*             {@link destinationtype#temp} or if the policy entry dn is malformed
*/
protected authorizationentry getentry ldapname dn  destinationtype destinationtype
authorizationentry entry   null
switch  destinationtype
case temp
// handle temp entry
if  dn size      getprefixlengthfordestinationtype destinationtype    1
// handle unknown entry
throw new illegalargumentexception
entry   gettempdestinationauthorizationentry
if  entry    null
entry   new tempdestinationauthorizationentry
settempdestinationauthorizationentry  tempdestinationauthorizationentry  entry
break
case queue
case topic
// handle regular destinations
if  dn size      getprefixlengthfordestinationtype destinationtype    2
throw new illegalargumentexception
activemqdestination dest   formatdestination dn  destinationtype
if  dest    null
entry   entries get dest
if  entry    null
entry   new authorizationentry
entry setdestination dest
entries put dest  entry
break
default
// handle unknown entry
throw new illegalargumentexception     destinationtype
return entry
/**
* applies the policy from the directory to the given entry within the context of the provided
* permission type.
*
* @param entry the policy entry to apply the policy to
* @param result the results from the directory to apply to the policy entry
* @param permissiontype the permission type of the data in the directory
*
* @throws namingexception if there is an error applying the acl
*/
protected void applyacl authorizationentry entry  searchresult result
permissiontype permissiontype  throws namingexception
// find members
attribute memberattribute   result getattributes   get permissiongroupmemberattribute
namingenumeration<?> memberattributeenum   memberattribute getall
hashset<object> members   new hashset<object>
while  memberattributeenum hasmoreelements
string memberdn    string  memberattributeenum nextelement
boolean group   false
boolean user   false
string principalname   null
if   legacygroupmapping
// lookup of member to determine principal type (group or user) and name.
attributes memberattributes
try
memberattributes   context getattributes memberdn
new string     groupnameattribute  usernameattribute
catch  namingexception e
log error
memberdn
result getnameinnamespace    e
continue
attribute memberentryobjectclassattribute   memberattributes get
namingenumeration<?> memberentryobjectclassattributeenum   memberentryobjectclassattribute getall
while  memberentryobjectclassattributeenum hasmoreelements
string objectclass    string  memberentryobjectclassattributeenum nextelement
if  objectclass equalsignorecase groupobjectclass
group   true
attribute name   memberattributes get groupnameattribute
if  name    null
log error
memberdn
groupnameattribute       result getnameinnamespace
break
principalname    string  name get
if  objectclass equalsignorecase userobjectclass
user   true
attribute name   memberattributes get usernameattribute
if  name    null
log error
memberdn
usernameattribute       result getnameinnamespace
break
principalname    string  name get
else
group   true
principalname   memberdn replaceall
if    group     user      group    user
log error
memberdn       result getnameinnamespace
else if  principalname    null
if  group     user
members add new groupprincipal principalname
else if   group    user
members add new userprincipal principalname
try
applyacl entry  permissiontype  members
catch  exception e
log error
result getnameinnamespace    e
/**
* applies policy to the entry given the actual principals that will be applied to the policy entry.
*
* @param entry the policy entry to which the policy should be applied
* @param permissiontype the type of the permission that the policy will be applied to
* @param acls the principals that represent the actual policy
*
* @throw illegalargumentexception if {@code permissiontype} is unsupported
*/
protected void applyacl authorizationentry entry  permissiontype permissiontype  set<object> acls
switch  permissiontype
case read
entry setreadacls acls
break
case write
entry setwriteacls acls
break
case admin
entry setadminacls acls
break
default
throw new illegalargumentexception     permissiontype
/**
* parses a dn into the equivalent {@link activemqdestination}.  the default implementation
* expects a format of cn=<permission_name>,ou=<destination_pattern>,.... or
* ou=<destination_pattern>,.... for permission and destination entries, respectively.
* for example {@code cn=admin,ou=$,ou=...} or {@code ou=$,ou=...}.
*
* @param dn the dn to parse
* @param destinationtype the type of the destination that we are parsing
*
* @return the destination that the dn represents
*
* @throws illegalargumentexception if {@code destinationtype} is {@link destinationtype#temp} or
* if the format of {@code dn} is incorrect for for a topic or queue
*
* @see #formatdestination(rdn, destinationtype)
*/
protected activemqdestination formatdestination ldapname dn  destinationtype destinationtype
activemqdestination destination   null
switch  destinationtype
case queue
case topic
// there exists a need to deal with both names representing a permission or simply a
// destination.  as such, we need to determine the proper rdn to work with based
// on the destination type and the dn size.
if  dn size       getprefixlengthfordestinationtype destinationtype    2
destination   formatdestination dn getrdn dn size     2   destinationtype
else if  dn size       getprefixlengthfordestinationtype destinationtype    1
destination   formatdestination dn getrdn dn size     1   destinationtype
else
throw new illegalargumentexception
break
default
throw new illegalargumentexception
destinationtype
return destination
/**
* parses rdn values representing the destination name/pattern and
* destination type into the equivalent {@link activemqdestination}.
*
* @param destinationname
*            the rdn representing the name or pattern for the destination
* @param destinationtype
*            the type of the destination
*
* @return the destination that the rdn represent
*
* @throws illegalargumentexception
*             if {@code destinationtype} is not one of {@link destinationtype#topic} or
*             {@link destinationtype#queue}.
*
* @see #formatdestinationname(rdn)
* @see #formatdestination(ldapname, destinationtype)
*/
protected activemqdestination formatdestination rdn destinationname  destinationtype destinationtype
activemqdestination dest   null
switch  destinationtype
case queue
dest   new activemqqueue formatdestinationname destinationname
break
case topic
dest   new activemqtopic formatdestinationname destinationname
break
default
throw new illegalargumentexception
destinationtype
return dest
/**
* parses the rdn representing a destination name/pattern into the standard string representation
* of the name/pattern.  this implementation does not care about the type of the rdn such that the rdn could
* be a cn or ou.
*
* @param destinationname the rdn representing the name or pattern for the destination
*
* @see #formatdestination(rdn, rdn)
*/
protected string formatdestinationname rdn destinationname
return destinationname getvalue   tostring   replaceall any_descendant
/**
* transcribes an existing set into a new set. used to make defensive copies
* for concurrent access.
*
* @param source
*            the source set or {@code null}
*
* @return a new set containing the same elements as {@code source} or
*         {@code null} if {@code source} is {@code null}
*/
protected <t> set<t> transcribeset set<t> source
if  source    null
return new hashset<t> source
else
return null
/**
* returns the filter string for the given permission type.
*
* @throws illegalargumentexception if {@code permissiontype} is not supported
*
* @see #setadminpermissiongroupsearchfilter(string)
* @see #setreadpermissiongroupsearchfilter(string)
* @see #setwritepermissiongroupsearchfilter(string)
*/
protected string getfilterforpermissiontype permissiontype permissiontype
string filter   null
switch  permissiontype
case admin
filter   adminpermissiongroupsearchfilter
break
case read
filter   readpermissiongroupsearchfilter
break
case write
filter   writepermissiongroupsearchfilter
break
default
throw new illegalargumentexception     permissiontype
return filter
/**
* returns the dn prefix size based on the given destination type.
*
* @throws illegalargumentexception if {@code destinationtype} is not supported
*
* @see #setqueuesearchbase(string)
* @see #settopicsearchbase(string)
* @see #settempsearchbase(string)
*/
protected int getprefixlengthfordestinationtype destinationtype destinationtype
int filter   0
switch  destinationtype
case queue
filter   queueprefixlength
break
case topic
filter   topicprefixlength
break
case temp
filter   tempprefixlength
break
default
throw new illegalargumentexception     destinationtype
return filter
/**
* performs a check for updates from the server in the event that synchronous updates are enabled
* and are the refresh interval has elapsed.
*/
protected void checkforupdates
if  context    null      refreshdisabled     refreshinterval     1    system currenttimemillis   >  lastupdated   refreshinterval
if   iscontextalive
try
context   createcontext
catch  namingexception ne
// ldap is down, use already cached values
return
reset
settempdestinationauthorizationentry null
entries clear
log debug
try
query
catch  exception e
log error
e
// authorization map
/**
* provides synchronous refresh capabilities if so configured before delegating to the super implementation,
* and otherwise simply delegates to the super implementation.
*/
@override
protected synchronized set<authorizationentry> getallentries activemqdestination destination
checkforupdates
return super getallentries destination
/**
* provides synchronized and defensive access to the admin acls for temp destinations as the super
* implementation returns live copies of the acls and {@link authorizationentry} is not
* setup for concurrent access.
*/
@override
public synchronized set<object> gettempdestinationadminacls
checkforupdates
return transcribeset super gettempdestinationadminacls
/**
* provides synchronized and defensive access to the read acls for temp destinations as the super
* implementation returns live copies of the acls and {@link authorizationentry} is not
* setup for concurrent access.
*/
public synchronized set<object> gettempdestinationreadacls
checkforupdates
return transcribeset super gettempdestinationreadacls
/**
* provides synchronized and defensive access to the write acls for temp destinations as the super
* implementation returns live copies of the acls and {@link authorizationentry} is not
* setup for concurrent access.
*/
public synchronized set<object> gettempdestinationwriteacls
checkforupdates
return transcribeset super gettempdestinationwriteacls
/**
* provides synchronized access to the admin acls for the destinations as
* {@link authorizationentry} is not setup for concurrent access.
*/
public synchronized set<object> getadminacls activemqdestination destination
return super getadminacls destination
/**
* provides synchronized access to the read acls for the destinations as
* {@link authorizationentry} is not setup for concurrent access.
*/
public synchronized set<object> getreadacls activemqdestination destination
checkforupdates
return super getreadacls destination
/**
* provides synchronized access to the write acls for the destinations as
* {@link authorizationentry} is not setup for concurrent access.
*/
public synchronized set<object> getwriteacls activemqdestination destination
checkforupdates
return super getwriteacls destination
/**
* handler for new policy entries in the directory.
*
* @param namingevent the new entry event that occurred
* @param destinationtype the type of the destination to which the event applies
* @param permissiontype the permission type to which the event applies
*/
public synchronized void objectadded namingevent namingevent  destinationtype destinationtype
permissiontype permissiontype
log debug     namingevent getnewbinding
searchresult result    searchresult  namingevent getnewbinding
try
ldapname name   new ldapname result getname
authorizationentry entry   getentry name  destinationtype
applyacl entry  result  permissiontype
if    entry instanceof tempdestinationauthorizationentry
put entry getdestination    entry
catch  invalidnameexception e
log error
result getname    e
catch  exception e
log error
result getname    e
/**
* handler for removed policy entries in the directory.
*
* @param namingevent the removed entry event that occurred
* @param destinationtype the type of the destination to which the event applies
* @param permissiontype the permission type to which the event applies
*/
public synchronized void objectremoved namingevent namingevent  destinationtype destinationtype
permissiontype permissiontype
log debug     namingevent getoldbinding
binding result   namingevent getoldbinding
try
ldapname name   new ldapname result getname
authorizationentry entry   getentry name  destinationtype
applyacl entry  permissiontype  new hashset<object>
catch  invalidnameexception e
log error
result getname    e
catch  exception e
log error
result getname    e
/**
* handler for renamed policy entries in the directory.  this handler deals with the renaming
* of destination entries as well as permission entries.  if the permission type is not null, it is
* assumed that we are dealing with the renaming of a permission entry.  otherwise, it is assumed
* that we are dealing with the renaming of a destination entry.
*
* @param namingevent the renaming entry event that occurred
* @param destinationtype the type of the destination to which the event applies
* @param permissiontype the permission type to which the event applies
*/
public synchronized void objectrenamed namingevent namingevent  destinationtype destinationtype
permissiontype permissiontype
binding oldbinding   namingevent getoldbinding
binding newbinding   namingevent getnewbinding
log debug     oldbinding       newbinding
try
ldapname oldname   new ldapname oldbinding getname
activemqdestination olddest   formatdestination oldname  destinationtype
ldapname newname   new ldapname newbinding getname
activemqdestination newdest   formatdestination newname  destinationtype
if  permissiontype    null
// handle the case where a permission entry is being renamed.
objectremoved namingevent  destinationtype  permissiontype
searchcontrols controls   new searchcontrols
controls setsearchscope searchcontrols object_scope
boolean matchedtotype   false
for  permissiontype newpermissiontype   permissiontype values
namingenumeration<searchresult> results   context search
newname
getfilterforpermissiontype newpermissiontype   controls
if  results hasmore
objectadded namingevent  destinationtype  newpermissiontype
matchedtotype   true
break
if   matchedtotype
log error
oldbinding getname         newbinding getname
else
// handle the case where a destination entry is being renamed.
if  olddest    null    newdest    null
authorizationentry entry   entries remove olddest
if  entry    null
entry setdestination newdest
put newdest  entry
remove olddest  entry
entries put newdest  entry
else
log warn     olddest
catch  invalidnameexception e
log error
oldbinding getname         newbinding getname    e
catch  exception e
log error
oldbinding getname         newbinding getname    e
/**
* handler for changed policy entries in the directory.
*
* @param namingevent the changed entry event that occurred
* @param destinationtype the type of the destination to which the event applies
* @param permissiontype the permission type to which the event applies
*/
public synchronized void objectchanged namingevent namingevent
destinationtype destinationtype  permissiontype permissiontype
log debug     namingevent getoldbinding         namingevent getnewbinding
objectremoved namingevent  destinationtype  permissiontype
objectadded namingevent  destinationtype  permissiontype
/**
* handler for exception events from the registry.
*
* @param namingexceptionevent the exception event
*/
public void namingexceptionthrown namingexceptionevent namingexceptionevent
context   null
log error    namingexceptionevent getexception
// init / destroy
public void afterpropertiesset   throws exception
query
public void destroy   throws exception
if  eventcontext    null
eventcontext close
eventcontext   null
if  context    null
context close
context   null
// getters and setters
public string getconnectionurl
return connectionurl
public void setconnectionurl string connectionurl
this connectionurl   connectionurl
public string getconnectionusername
return connectionusername
public void setconnectionusername string connectionusername
this connectionusername   connectionusername
public string getconnectionpassword
return connectionpassword
public void setconnectionpassword string connectionpassword
this connectionpassword   connectionpassword
public string getconnectionprotocol
return connectionprotocol
public void setconnectionprotocol string connectionprotocol
this connectionprotocol   connectionprotocol
public string getauthentication
return authentication
public void setauthentication string authentication
this authentication   authentication
public string getqueuesearchbase
return queuesearchbase
public void setqueuesearchbase string queuesearchbase
try
ldapname basename   new ldapname queuesearchbase
queueprefixlength   basename size
this queuesearchbase   queuesearchbase
catch  invalidnameexception e
throw new illegalargumentexception     queuesearchbase  e
public string gettopicsearchbase
return topicsearchbase
public void settopicsearchbase string topicsearchbase
try
ldapname basename   new ldapname topicsearchbase
topicprefixlength   basename size
this topicsearchbase   topicsearchbase
catch  invalidnameexception e
throw new illegalargumentexception     topicsearchbase  e
public string gettempsearchbase
return tempsearchbase
public void settempsearchbase string tempsearchbase
try
ldapname basename   new ldapname tempsearchbase
tempprefixlength   basename size
this tempsearchbase   tempsearchbase
catch  invalidnameexception e
throw new illegalargumentexception     tempsearchbase  e
public string getpermissiongroupmemberattribute
return permissiongroupmemberattribute
public void setpermissiongroupmemberattribute
string permissiongroupmemberattribute
this permissiongroupmemberattribute   permissiongroupmemberattribute
public string getadminpermissiongroupsearchfilter
return adminpermissiongroupsearchfilter
public void setadminpermissiongroupsearchfilter
string adminpermissiongroupsearchfilter
this adminpermissiongroupsearchfilter   adminpermissiongroupsearchfilter
public string getreadpermissiongroupsearchfilter
return readpermissiongroupsearchfilter
public void setreadpermissiongroupsearchfilter
string readpermissiongroupsearchfilter
this readpermissiongroupsearchfilter   readpermissiongroupsearchfilter
public string getwritepermissiongroupsearchfilter
return writepermissiongroupsearchfilter
public void setwritepermissiongroupsearchfilter
string writepermissiongroupsearchfilter
this writepermissiongroupsearchfilter   writepermissiongroupsearchfilter
public boolean islegacygroupmapping
return legacygroupmapping
public void setlegacygroupmapping boolean legacygroupmapping
this legacygroupmapping   legacygroupmapping
public string getgroupobjectclass
return groupobjectclass
public void setgroupobjectclass string groupobjectclass
this groupobjectclass   groupobjectclass
public string getuserobjectclass
return userobjectclass
public void setuserobjectclass string userobjectclass
this userobjectclass   userobjectclass
public string getgroupnameattribute
return groupnameattribute
public void setgroupnameattribute string groupnameattribute
this groupnameattribute   groupnameattribute
public string getusernameattribute
return usernameattribute
public void setusernameattribute string usernameattribute
this usernameattribute   usernameattribute
public boolean isrefreshdisabled
return refreshdisabled
public void setrefreshdisabled boolean refreshdisabled
this refreshdisabled   refreshdisabled
public int getrefreshinterval
return refreshinterval
public void setrefreshinterval int refreshinterval
this refreshinterval   refreshinterval
protected static enum destinationtype
queue
topic
temp
protected static enum permissiontype
read
write
admin
/**
* listener implementation for directory changes that maps change events to
* destination types.
*/
protected class cachedldapauthorizationmapnamespacechangelistener implements
namespacechangelistener  objectchangelistener
private final destinationtype destinationtype
private final permissiontype permissiontype
/**
* creates a new listener.  if {@code permissiontype} is {@code null}, add
* and remove events are ignored as they do not directly affect policy state.
* this configuration is used when listening for changes on entries that represent
* destination patterns and not for entries that represent permissions.
*
* @param destinationtype the type of the destination being listened for
* @param permissiontype the optional permission type being listened for
*/
public cachedldapauthorizationmapnamespacechangelistener
destinationtype destinationtype  permissiontype permissiontype
this destinationtype   destinationtype
this permissiontype   permissiontype
@override
public void namingexceptionthrown namingexceptionevent evt
simplecachedldapauthorizationmap this namingexceptionthrown evt
@override
public void objectadded namingevent evt
// this test is a hack to work around the fact that apache ds 2.0 seems to trigger notifications
// for the entire sub-tree even when one-level is the selected search scope.
if  permissiontype    null
simplecachedldapauthorizationmap this objectadded evt  destinationtype  permissiontype
@override
public void objectremoved namingevent evt
// this test is a hack to work around the fact that apache ds 2.0 seems to trigger notifications
// for the entire sub-tree even when one-level is the selected search scope.
if  permissiontype    null
simplecachedldapauthorizationmap this objectremoved evt  destinationtype  permissiontype
@override
public void objectrenamed namingevent evt
simplecachedldapauthorizationmap this objectrenamed evt  destinationtype  permissiontype
@override
public void objectchanged namingevent evt
// this test is a hack to work around the fact that apache ds 2.0 seems to trigger notifications
// for the entire sub-tree even when one-level is the selected search scope.
if  permissiontype    null
simplecachedldapauthorizationmap this objectchanged evt  destinationtype  permissiontype