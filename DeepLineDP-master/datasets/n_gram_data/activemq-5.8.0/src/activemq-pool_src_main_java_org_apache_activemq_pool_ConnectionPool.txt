/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq pool
import java io ioexception
import java util list
import java util concurrent copyonwritearraylist
import java util concurrent atomic atomicboolean
import javax jms jmsexception
import javax jms session
import org apache activemq activemqconnection
import org apache activemq activemqsession
import org apache activemq transport transportlistener
import org apache activemq util jmsexceptionsupport
import org apache commons pool keyedpoolableobjectfactory
import org apache commons pool impl generickeyedobjectpool
import org apache commons pool impl genericobjectpool
/**
* holds a real jms connection along with the session pools associated with it.
* <p/>
* instances of this class are shared amongst one or more pooledconnection object and must
* track the session objects that are loaned out for cleanup on close as well as ensuring
* that the temporary destinations of the managed connection are purged when all references
* to this connectionpool are released.
*/
public class connectionpool
private activemqconnection connection
private int referencecount
private long lastused   system currenttimemillis
private long firstused   lastused
private boolean hasfailed
private boolean hasexpired
private int idletimeout   30   1000
private long expirytimeout   0l
private final atomicboolean started   new atomicboolean false
private final generickeyedobjectpool<sessionkey  pooledsession> sessionpool
private final list<pooledsession> loanedsessions   new copyonwritearraylist<pooledsession>
public connectionpool activemqconnection connection
this connection   connection
// add a transport listener so that we can notice if this connection
// should be expired due to a connection failure.
connection addtransportlistener new transportlistener
public void oncommand object command
public void onexception ioexception error
synchronized  connectionpool this
hasfailed   true
public void transportinterupted
public void transportresumed
// make sure that we set the hasfailed flag, in case the transport already failed
// prior to the addition of our new transportlistener
if connection istransportfailed
hasfailed   true
// create our internal pool of session instances.
this sessionpool   new generickeyedobjectpool<sessionkey  pooledsession>
new keyedpoolableobjectfactory<sessionkey  pooledsession>
@override
public void activateobject sessionkey key  pooledsession session  throws exception
connectionpool this loanedsessions add session
@override
public void destroyobject sessionkey key  pooledsession session  throws exception
connectionpool this loanedsessions remove session
session getinternalsession   close
@override
public pooledsession makeobject sessionkey key  throws exception
activemqsession session    activemqsession
connectionpool this connection createsession key istransacted    key getackmode
return new pooledsession key  session  sessionpool
@override
public void passivateobject sessionkey key  pooledsession session  throws exception
connectionpool this loanedsessions remove session
@override
public boolean validateobject sessionkey key  pooledsession session
return true
public void start   throws jmsexception
if  started compareandset false  true
try
connection start
catch  jmsexception e
started set false
throw e
public synchronized activemqconnection getconnection
return connection
public session createsession boolean transacted  int ackmode  throws jmsexception
sessionkey key   new sessionkey transacted  ackmode
pooledsession session
try
session   sessionpool borrowobject key
catch  exception e
throw jmsexceptionsupport create e
return session
public synchronized void close
if  connection    null
try
sessionpool close
catch  exception e
finally
try
connection close
catch  exception e
finally
connection   null
public synchronized void incrementreferencecount
referencecount
lastused   system currenttimemillis
public synchronized void decrementreferencecount
referencecount
lastused   system currenttimemillis
if  referencecount    0
expiredcheck
// loaned sessions are those that are active in the sessionpool and
// have not been closed by the client before closing the connection.
// these need to be closed so that all session's reflect the fact
// that the parent connection is closed.
for  pooledsession session   this loanedsessions
try
session close
catch  exception e
this loanedsessions clear
// we only clean up temporary destinations when all users of this
// connection have called close.
if  getconnection      null
getconnection   cleanuptempdestinations
/**
* determines if this connection has expired.
* <p/>
* a connectionpool is considered expired when all references to it are released and either
* the configured idletimeout has elapsed or the configured expirytimeout has elapsed.
* once a connectionpool is determined to have expired its underlying connection is closed.
*
* @return true if this connection has expired.
*/
public synchronized boolean expiredcheck
if  connection    null
return true
if  hasexpired
if  referencecount    0
close
return true
if  hasfailed
idletimeout > 0    system currenttimemillis   > lastused   idletimeout
expirytimeout > 0    system currenttimemillis   > firstused   expirytimeout
hasexpired   true
if  referencecount    0
close
return true
return false
public int getidletimeout
return idletimeout
public void setidletimeout int idletimeout
this idletimeout   idletimeout
public void setexpirytimeout long expirytimeout
this expirytimeout   expirytimeout
public long getexpirytimeout
return expirytimeout
public int getmaximumactivesessionperconnection
return this sessionpool getmaxactive
public void setmaximumactivesessionperconnection int maximumactivesessionperconnection
this sessionpool setmaxactive maximumactivesessionperconnection
/**
* @return the total number of pooled session including idle sessions that are not
*          currently loaned out to any client.
*/
public int getnumsessions
return this sessionpool getnumidle     this sessionpool getnumactive
/**
* @return the total number of sessions that are in the session pool but not loaned out.
*/
public int getnumidlesessions
return this sessionpool getnumidle
/**
* @return the total number of session's that have been loaned to pooledconnection instances.
*/
public int getnumactivesessions
return this sessionpool getnumactive
/**
* configure whether the createsession method should block when there are no more idle sessions and the
* pool already contains the maximum number of active sessions.  if false the create method will fail
* and throw an exception.
*
* @param block
* 		indicates whether blocking should be used to wait for more space to create a session.
*/
public void setblockifsessionpoolisfull boolean block
this sessionpool setwhenexhaustedaction
block ? genericobjectpool when_exhausted_block   genericobjectpool when_exhausted_fail
public boolean isblockifsessionpoolisfull
return this sessionpool getwhenexhaustedaction      genericobjectpool when_exhausted_block
@override
public string tostring
return     connection