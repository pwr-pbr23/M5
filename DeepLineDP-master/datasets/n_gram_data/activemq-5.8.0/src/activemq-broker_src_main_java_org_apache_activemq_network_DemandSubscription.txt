/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq network
import java util set
import java util concurrent copyonwritearrayset
import java util concurrent atomic atomicboolean
import java util concurrent atomic atomicinteger
import org apache activemq command consumerid
import org apache activemq command consumerinfo
import org apache activemq command networkbridgefilter
import org slf4j logger
import org slf4j loggerfactory
/**
* represents a network bridge interface
*/
public class demandsubscription
private static final logger log   loggerfactory getlogger demandsubscription class
private final consumerinfo remoteinfo
private final consumerinfo localinfo
private final set<consumerid> remotesubsids   new copyonwritearrayset<consumerid>
private final atomicinteger dispatched   new atomicinteger 0
private final atomicboolean activewaiter   new atomicboolean
private networkbridgefilter networkbridgefilter
demandsubscription consumerinfo info
remoteinfo   info
localinfo   info copy
localinfo setnetworksubscription true
remotesubsids add info getconsumerid
/**
* increment the consumers associated with this subscription
*
* @param id
* @return true if added
*/
public boolean add consumerid id
return remotesubsids add id
/**
* increment the consumers associated with this subscription
*
* @param id
* @return true if removed
*/
public boolean remove consumerid id
return remotesubsids remove id
/**
* @return true if there are no interested consumers
*/
public boolean isempty
return remotesubsids isempty
public int size
return remotesubsids size
/**
* @return returns the localinfo.
*/
public consumerinfo getlocalinfo
return localinfo
/**
* @return returns the remoteinfo.
*/
public consumerinfo getremoteinfo
return remoteinfo
public void waitforcompletion
if  dispatched get   > 0
if  log isdebugenabled
log debug     localinfo getconsumerid         this dispatched get
activewaiter set true
if  dispatched get   > 0
synchronized  activewaiter
try
activewaiter wait
catch  interruptedexception ignored
if  this dispatched get   > 0
log warn
this dispatched get
public void decrementoutstandingresponses
if  dispatched decrementandget      0    activewaiter get
synchronized  activewaiter
activewaiter notifyall
public boolean incrementoutstandingresponses
dispatched incrementandget
if  activewaiter get
decrementoutstandingresponses
return false
return true
public networkbridgefilter getnetworkbridgefilter
return networkbridgefilter
public void setnetworkbridgefilter networkbridgefilter networkbridgefilter
this networkbridgefilter   networkbridgefilter