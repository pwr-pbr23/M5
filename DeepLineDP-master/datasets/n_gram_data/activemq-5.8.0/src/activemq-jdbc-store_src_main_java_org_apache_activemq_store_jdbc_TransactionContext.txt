/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq store jdbc
import java io ioexception
import java sql connection
import java sql preparedstatement
import java sql sqlexception
import java sql statement
import javax sql datasource
import org apache activemq util ioexceptionsupport
import org slf4j logger
import org slf4j loggerfactory
/**
* helps keep track of the current transaction/jdbc connection.
*
*
*/
public class transactioncontext
private static final logger log   loggerfactory getlogger transactioncontext class
private final datasource datasource
private final jdbcpersistenceadapter persistenceadapter
private connection connection
private boolean intx
private preparedstatement addmessagestatement
private preparedstatement removedmessagestatement
private preparedstatement updatelastackstatement
// a cheap dirty level that we can live with
private int transactionisolation   connection transaction_read_uncommitted
public transactioncontext jdbcpersistenceadapter persistenceadapter  throws ioexception
this persistenceadapter   persistenceadapter
this datasource   persistenceadapter getdatasource
public connection getconnection   throws ioexception
if  connection    null
try
connection   datasource getconnection
if  persistenceadapter ischangeautocommitallowed
boolean autocommit    intx
if  connection getautocommit      autocommit
log trace    autocommit  connection
connection setautocommit autocommit
catch  sqlexception e
jdbcpersistenceadapter log    e
ioexception ioe   ioexceptionsupport create e
persistenceadapter getbrokerservice   handleioexception ioe
throw ioe
try
connection settransactionisolation transactionisolation
catch  throwable e
return connection
public void executebatch   throws sqlexception
try
executebatch addmessagestatement
finally
addmessagestatement   null
try
executebatch removedmessagestatement
finally
removedmessagestatement   null
try
executebatch updatelastackstatement
finally
updatelastackstatement   null
private void executebatch preparedstatement p  string message  throws sqlexception
if  p    null
return
try
int rc   p executebatch
for  int i   0  i < rc length  i
int code   rc
if  code < 0    code    statement success_no_info
throw new sqlexception message       code
finally
try
p close
catch  throwable e
public void close   throws ioexception
if   intx
try
/**
* we are not in a transaction so should not be committing ??
* this was previously commented out - but had adverse affects
* on testing - so it's back!
*
*/
try
executebatch
finally
if  connection    null     connection getautocommit
connection commit
catch  sqlexception e
jdbcpersistenceadapter log    e
throw ioexceptionsupport create e
finally
try
if  connection    null
connection close
catch  throwable e
log warn     e getmessage    e
finally
connection   null
public void begin   throws ioexception
if  intx
throw new ioexception
intx   true
connection   getconnection
public void commit   throws ioexception
if   intx
throw new ioexception
try
executebatch
if   connection getautocommit
connection commit
catch  sqlexception e
jdbcpersistenceadapter log    e
this rollback
throw ioexceptionsupport create e
finally
intx   false
close
public void rollback   throws ioexception
if   intx
throw new ioexception
try
if  addmessagestatement    null
addmessagestatement close
addmessagestatement   null
if  removedmessagestatement    null
removedmessagestatement close
removedmessagestatement   null
if  updatelastackstatement    null
updatelastackstatement close
updatelastackstatement   null
connection rollback
catch  sqlexception e
jdbcpersistenceadapter log    e
throw ioexceptionsupport create e
finally
intx   false
close
public preparedstatement getaddmessagestatement
return addmessagestatement
public void setaddmessagestatement preparedstatement addmessagestatement
this addmessagestatement   addmessagestatement
public preparedstatement getupdatelastackstatement
return updatelastackstatement
public void setupdatelastackstatement preparedstatement ackmessagestatement
this updatelastackstatement   ackmessagestatement
public preparedstatement getremovedmessagestatement
return removedmessagestatement
public void setremovedmessagestatement preparedstatement removedmessagestatement
this removedmessagestatement   removedmessagestatement
public void settransactionisolation int transactionisolation
this transactionisolation   transactionisolation