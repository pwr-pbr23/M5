/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq broker region cursors
import java util iterator
import org apache activemq broker region destination
import org apache activemq broker region messagereference
import org apache activemq command message
import org apache activemq command messageid
import org apache activemq store messagerecoverylistener
import org slf4j logger
import org slf4j loggerfactory
/**
*  store based cursor
*
*/
public abstract class abstractstorecursor extends abstractpendingmessagecursor implements messagerecoverylistener
private static final logger log   loggerfactory getlogger abstractstorecursor class
protected final destination regiondestination
protected final pendinglist batchlist
private iterator<messagereference> iterator   null
protected boolean batchresetneeded   false
private boolean storehasmessages   false
protected int size
private messageid lastcachedid
private boolean hadspace   false
protected abstractstorecursor destination destination
super  destination    null ? destination isprioritizedmessages   false
this regiondestination destination
if  this prioritizedmessages
this batchlist  new prioritizedpendinglist
else
this batchlist   new orderedpendinglist
public final synchronized void start   throws exception
if   isstarted
super start
resetbatch
resetsize
setcacheenabled  this storehasmessages  usecache
protected void resetsize
this size   getstoresize
this storehasmessages this size > 0
public final synchronized void stop   throws exception
resetbatch
super stop
gc
public final boolean recovermessage message message  throws exception
return recovermessage message false
public synchronized boolean recovermessage message message  boolean cached  throws exception
boolean recovered   false
if  recorduniqueid message getmessageid
if   cached
message setregiondestination regiondestination
if  message getmemoryusage    null
message setmemoryusage this getsystemusage   getmemoryusage
message incrementreferencecount
batchlist addmessagelast message
cleariterator true
recovered   true
storehasmessages   true
else
/*
* we should expect to get these - as the message is recorded as it before it goes into
* the cache. if subsequently, we pull out that message from the store (before its deleted)
* it will be a duplicate - but should be ignored
*/
if  log istraceenabled
log trace this       message getmessageid         message getpriority
return recovered
public final synchronized void reset
if  batchlist isempty
try
fillbatch
catch  exception e
log error this      e
throw new runtimeexception e
cleariterator true
size
public synchronized void release
cleariterator false
private synchronized void cleariterator boolean ensureiterator
boolean haveiterator   this iterator    null
this iterator null
if haveiterator  ensureiterator
ensureiterator
private synchronized void ensureiterator
if this iterator  null
this iterator this batchlist iterator
public final void finished
public final synchronized boolean hasnext
if  batchlist isempty
try
fillbatch
catch  exception e
log error this      e
throw new runtimeexception e
ensureiterator
return this iterator hasnext
public final synchronized messagereference next
messagereference result   null
if   this batchlist isempty    this iterator hasnext
result   this iterator next
last   result
if  result    null
result incrementreferencecount
return result
public final synchronized void addmessagelast messagereference node  throws exception
boolean disablecache   false
if  hasspace
if   iscacheenabled      size  0    isstarted      usecache
if  log istraceenabled
log trace this       node getmessageid
setcacheenabled true
if  iscacheenabled
if  recovermessage node getmessage   true
lastcachedid   node getmessageid
else
// failed to recover, possible duplicate from concurrent dispatchpending,
// lets not recover further in case of out of order
disablecache   true
else
disablecache   true
if  disablecache    iscacheenabled
setcacheenabled false
// sync with store on disabling the cache
if  lastcachedid    null
if  log istraceenabled
log trace this
lastcachedid
node getmessageid         batchlist size
setbatch lastcachedid
lastcachedid   null
this storehasmessages   true
size
protected void setbatch messageid messageid  throws exception
public final synchronized void addmessagefirst messagereference node  throws exception
setcacheenabled false
size
public final synchronized void remove
size
if  iterator  null
iterator remove
if  last    null
last decrementreferencecount
public final synchronized void remove messagereference node
if  batchlist remove node     null
size
setcacheenabled false
public final synchronized void clear
gc
public synchronized void gc
for  iterator<messagereference>i   batchlist iterator   i hasnext
messagereference msg   i next
rollback msg getmessageid
msg decrementreferencecount
batchlist clear
cleariterator false
batchresetneeded   true
setcacheenabled false
@override
public boolean hasspace
hadspace   super hasspace
return hadspace
protected final synchronized void fillbatch
if  log istraceenabled
log trace this
if  batchresetneeded
resetsize
setmaxbatchsize math min regiondestination getmaxpagesize    size
resetbatch
this batchresetneeded   false
if  this batchlist isempty      this storehasmessages    this size >0
try
dofillbatch
catch  exception e
log error this      e
throw new runtimeexception e
this storehasmessages    this batchlist isempty       hadspace
public final synchronized boolean isempty
// negative means more messages added to store through queue.send since last reset
return size    0
public final synchronized boolean hasmessagesbufferedtodeliver
return  batchlist isempty
public final synchronized int size
if  size < 0
this size   getstoresize
return size
@override
public string tostring
return super tostring         regiondestination getactivemqdestination   getphysicalname         batchresetneeded
this storehasmessages       this size       iscacheenabled
maxbatchsize
protected abstract void dofillbatch   throws exception
protected abstract void resetbatch
protected abstract int getstoresize
protected abstract boolean isstoreempty