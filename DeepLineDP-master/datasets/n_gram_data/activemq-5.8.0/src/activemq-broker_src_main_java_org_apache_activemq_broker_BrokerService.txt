/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq broker
import java io bufferedreader
import java io file
import java io ioexception
import java io inputstream
import java io inputstreamreader
import java net uri
import java net urisyntaxexception
import java net unknownhostexception
import java util arraylist
import java util date
import java util hashmap
import java util hashset
import java util iterator
import java util list
import java util locale
import java util map
import java util set
import java util concurrent copyonwritearraylist
import java util concurrent countdownlatch
import java util concurrent linkedblockingqueue
import java util concurrent rejectedexecutionexception
import java util concurrent rejectedexecutionhandler
import java util concurrent synchronousqueue
import java util concurrent threadfactory
import java util concurrent threadpoolexecutor
import java util concurrent timeunit
import java util concurrent atomic atomicboolean
import javax annotation postconstruct
import javax annotation predestroy
import javax management malformedobjectnameexception
import javax management objectname
import org apache activemq activemqconnectionmetadata
import org apache activemq configurationexception
import org apache activemq service
import org apache activemq advisory advisorybroker
import org apache activemq broker cluster connectionsplitbroker
import org apache activemq broker jmx annotatedmbean
import org apache activemq broker jmx brokermbeansupport
import org apache activemq broker jmx brokerview
import org apache activemq broker jmx connectorview
import org apache activemq broker jmx connectorviewmbean
import org apache activemq broker jmx healthview
import org apache activemq broker jmx healthviewmbean
import org apache activemq broker jmx jmsconnectorview
import org apache activemq broker jmx jobschedulerview
import org apache activemq broker jmx jobschedulerviewmbean
import org apache activemq broker jmx managedregionbroker
import org apache activemq broker jmx managementcontext
import org apache activemq broker jmx networkconnectorview
import org apache activemq broker jmx networkconnectorviewmbean
import org apache activemq broker jmx proxyconnectorview
import org apache activemq broker region compositedestinationinterceptor
import org apache activemq broker region destination
import org apache activemq broker region destinationfactory
import org apache activemq broker region destinationfactoryimpl
import org apache activemq broker region destinationinterceptor
import org apache activemq broker region regionbroker
import org apache activemq broker region policy policymap
import org apache activemq broker region virtual mirroredqueue
import org apache activemq broker region virtual virtualdestination
import org apache activemq broker region virtual virtualdestinationinterceptor
import org apache activemq broker region virtual virtualtopic
import org apache activemq broker scheduler jobschedulerstore
import org apache activemq broker scheduler schedulerbroker
import org apache activemq command activemqdestination
import org apache activemq command activemqqueue
import org apache activemq command brokerid
import org apache activemq filter destinationfilter
import org apache activemq network connectionfilter
import org apache activemq network discoverynetworkconnector
import org apache activemq network networkconnector
import org apache activemq network jms jmsconnector
import org apache activemq proxy proxyconnector
import org apache activemq security messageauthorizationpolicy
import org apache activemq selector selectorparser
import org apache activemq store journaledstore
import org apache activemq store pliststore
import org apache activemq store persistenceadapter
import org apache activemq store persistenceadapterfactory
import org apache activemq store memory memorypersistenceadapter
import org apache activemq thread scheduler
import org apache activemq thread taskrunnerfactory
import org apache activemq transport transportfactorysupport
import org apache activemq transport transportserver
import org apache activemq transport vm vmtransportfactory
import org apache activemq usage systemusage
import org apache activemq util brokersupport
import org apache activemq util defaultioexceptionhandler
import org apache activemq util ioexceptionhandler
import org apache activemq util ioexceptionsupport
import org apache activemq util iohelper
import org apache activemq util inetaddressutil
import org apache activemq util servicestopper
import org apache activemq util threadpoolutils
import org apache activemq util timeutils
import org apache activemq util urisupport
import org slf4j logger
import org slf4j loggerfactory
import org slf4j mdc
/**
* manages the lifecycle of an activemq broker. a brokerservice consists of a
* number of transport connectors, network connectors and a bunch of properties
* which can be used to configure the broker as its lazily created.
*
*
* @org.apache.xbean.xbean
*/
public class brokerservice implements service
public static final string default_port
public static final string local_host_name
public static final string broker_version
public static final string default_broker_name
public static final int default_max_file_length   1024   1024   32
private static final logger log   loggerfactory getlogger brokerservice class
private static final long serialversionuid   7353129142305630237l
private boolean usejmx   true
private boolean enablestatistics   true
private boolean persistent   true
private boolean populatejmsxuserid
private boolean useauthenticatedprincipalforjmsxuserid
private boolean populateusernameinmbeans
private long mbeaninvocationtimeout   0
private boolean useshutdownhook   true
private boolean useloggingforshutdownerrors
private boolean shutdownonmasterfailure
private boolean shutdownonslavefailure
private boolean waitforslave
private long waitforslavetimeout   600000l
private boolean passiveslave
private string brokername   default_broker_name
private file datadirectoryfile
private file tmpdatadirectory
private broker broker
private brokerview adminview
private managementcontext managementcontext
private objectname brokerobjectname
private taskrunnerfactory taskrunnerfactory
private taskrunnerfactory persistencetaskrunnerfactory
private systemusage systemusage
private systemusage producersystemusage
private systemusage consumersystemusaage
private persistenceadapter persistenceadapter
private persistenceadapterfactory persistencefactory
protected destinationfactory destinationfactory
private messageauthorizationpolicy messageauthorizationpolicy
private final list<transportconnector> transportconnectors   new copyonwritearraylist<transportconnector>
private final list<networkconnector> networkconnectors   new copyonwritearraylist<networkconnector>
private final list<proxyconnector> proxyconnectors   new copyonwritearraylist<proxyconnector>
private final list<jmsconnector> jmsconnectors   new copyonwritearraylist<jmsconnector>
private final list<service> services   new arraylist<service>
private transient thread shutdownhook
private string transportconnectoruris
private string networkconnectoruris
private jmsconnector jmsbridgeconnectors     these are jms to jms bridges
// to other jms messaging systems
private boolean deleteallmessagesonstartup
private boolean advisorysupport   true
private uri vmconnectoruri
private string defaultsocketuristring
private policymap destinationpolicy
private final atomicboolean started   new atomicboolean false
private final atomicboolean stopped   new atomicboolean false
private final atomicboolean stopping   new atomicboolean false
private brokerplugin plugins
private boolean keepdurablesubsactive   true
private boolean usevirtualtopics   true
private boolean usemirroredqueues   false
private boolean usetempmirroredqueues   true
private brokerid brokerid
private destinationinterceptor destinationinterceptors
private activemqdestination destinations
private pliststore tempdatastore
private int persistencethreadpriority   thread max_priority
private boolean uselocalhostbrokername
private final countdownlatch stoppedlatch   new countdownlatch 1
private final countdownlatch startedlatch   new countdownlatch 1
private boolean supportfailover
private broker regionbroker
private int producersystemusageportion   60
private int consumersystemusageportion   40
private boolean splitsystemusageforproducersconsumers
private boolean monitorconnectionsplits   false
private int taskrunnerpriority   thread norm_priority
private boolean dedicatedtaskrunner
private boolean cachetempdestinations   false    useful for failover
private int timebeforepurgetempdestinations   5000
private final list<runnable> shutdownhooks   new arraylist<runnable>
private boolean systemexitonshutdown
private int systemexitonshutdownexitcode
private sslcontext sslcontext
private boolean forcestart   false
private ioexceptionhandler ioexceptionhandler
private boolean schedulersupport   false
private file schedulerdirectoryfile
private scheduler scheduler
private threadpoolexecutor executor
private int scheduleperiodfordestinationpurge  0
private int maxpurgeddestinationspersweep   0
private brokercontext brokercontext
private boolean networkconnectorstartasync   false
private boolean allowtempautocreationonsend
private jobschedulerstore jobschedulerstore
private long offlinedurablesubscribertimeout    1
private long offlinedurablesubscribertaskschedule   300000
private destinationfilter virtualconsumerdestinationfilter
private final object persistenceadapterlock   new object
private throwable startexception   null
private boolean startasync   false
private date startdate
static
string localhostname
try
localhostname    inetaddressutil getlocalhostname
catch  unknownhostexception e
log error
local_host_name   localhostname
inputstream in   null
string version   null
if   in   brokerservice class getresourceasstream        null
bufferedreader reader   new bufferedreader new inputstreamreader in
try
version   reader readline
catch exception e
broker_version   version
@override
public string tostring
return     getbrokername
private string getbrokerversion
string version   activemqconnectionmetadata provider_version
if  version    null
version   broker_version
return version
/**
* adds a new transport connector for the given bind address
*
* @return the newly created and added transport connector
* @throws exception
*/
public transportconnector addconnector string bindaddress  throws exception
return addconnector new uri bindaddress
/**
* adds a new transport connector for the given bind address
*
* @return the newly created and added transport connector
* @throws exception
*/
public transportconnector addconnector uri bindaddress  throws exception
return addconnector createtransportconnector bindaddress
/**
* adds a new transport connector for the given transportserver transport
*
* @return the newly created and added transport connector
* @throws exception
*/
public transportconnector addconnector transportserver transport  throws exception
return addconnector new transportconnector transport
/**
* adds a new transport connector
*
* @return the transport connector
* @throws exception
*/
public transportconnector addconnector transportconnector connector  throws exception
transportconnectors add connector
return connector
/**
* stops and removes a transport connector from the broker.
*
* @param connector
* @return true if the connector has been previously added to the broker
* @throws exception
*/
public boolean removeconnector transportconnector connector  throws exception
boolean rc   transportconnectors remove connector
if  rc
unregisterconnectormbean connector
return rc
/**
* adds a new network connector using the given discovery address
*
* @return the newly created and added network connector
* @throws exception
*/
public networkconnector addnetworkconnector string discoveryaddress  throws exception
return addnetworkconnector new uri discoveryaddress
/**
* adds a new proxy connector using the given bind address
*
* @return the newly created and added network connector
* @throws exception
*/
public proxyconnector addproxyconnector string bindaddress  throws exception
return addproxyconnector new uri bindaddress
/**
* adds a new network connector using the given discovery address
*
* @return the newly created and added network connector
* @throws exception
*/
public networkconnector addnetworkconnector uri discoveryaddress  throws exception
networkconnector connector   new discoverynetworkconnector discoveryaddress
return addnetworkconnector connector
/**
* adds a new proxy connector using the given bind address
*
* @return the newly created and added network connector
* @throws exception
*/
public proxyconnector addproxyconnector uri bindaddress  throws exception
proxyconnector connector   new proxyconnector
connector setbind bindaddress
connector setremote new uri
return addproxyconnector connector
/**
* adds a new network connector to connect this broker to a federated
* network
*/
public networkconnector addnetworkconnector networkconnector connector  throws exception
connector setbrokerservice this
uri uri   getvmconnectoruri
map<string  string> map   new hashmap<string  string> urisupport parseparameters uri
map put
uri   urisupport createuriwithquery uri  urisupport createquerystring map
connector setlocaluri uri
// set a connection filter so that the connector does not establish loop
// back connections.
connector setconnectionfilter new connectionfilter
@override
public boolean connectto uri location
list<transportconnector> transportconnectors   gettransportconnectors
for  iterator<transportconnector> iter   transportconnectors iterator    iter hasnext
try
transportconnector tc   iter next
if  location equals tc getconnecturi
return false
catch  throwable e
return true
networkconnectors add connector
if  isusejmx
registernetworkconnectormbean connector
return connector
/**
* removes the given network connector without stopping it. the caller
* should call {@link networkconnector#stop()} to close the connector
*/
public boolean removenetworkconnector networkconnector connector
boolean answer   networkconnectors remove connector
if  answer
unregisternetworkconnectormbean connector
return answer
public proxyconnector addproxyconnector proxyconnector connector  throws exception
uri uri   getvmconnectoruri
connector setlocaluri uri
proxyconnectors add connector
if  isusejmx
registerproxyconnectormbean connector
return connector
public jmsconnector addjmsconnector jmsconnector connector  throws exception
connector setbrokerservice this
jmsconnectors add connector
if  isusejmx
registerjmsconnectormbean connector
return connector
public jmsconnector removejmsconnector jmsconnector connector
if  jmsconnectors remove connector
return connector
return null
public void masterfailed
if  shutdownonmasterfailure
log error
try
stop
catch  exception e
log error    e
else
log warn
try
startallconnectors
broker nowmasterbroker
catch  exception e
log error    e
public string getuptime
// compute and log uptime
if  startdate    null
return
long delta   new date   gettime     startdate gettime
return timeutils printduration delta
public boolean isstarted
return started get      startedlatch getcount      0
/**
* forces a start of the broker.
* by default a brokerservice instance that was
* previously stopped using brokerservice.stop() cannot be restarted
* using brokerservice.start().
* this method enforces a restart.
* it is not recommended to force a restart of the broker and will not work
* for most but some very trivial broker configurations.
* for restarting a broker instance we recommend to first call stop() on
* the old instance and then recreate a new brokerservice instance.
*
* @param force - if true enforces a restart.
* @throws exception
*/
public void start boolean force  throws exception
forcestart   force
stopped set false
started set false
start
// service interface
// -------------------------------------------------------------------------
protected boolean shouldautostart
return true
/**
*
* @throws exception
* @org. apache.xbean.initmethod
*/
@postconstruct
public void autostart   throws exception
if shouldautostart
start
@override
public void start   throws exception
if  stopped get       started compareandset false  true
// lets just ignore redundant start() calls
// as its way too easy to not be completely sure if start() has been
// called or not with the gazillion of different configuration
// mechanisms
// throw new illegalstateexception("already started.");
return
stopping set false
startdate   new date
mdc put    brokername
try
if  systemexitonshutdown    useshutdownhook
throw new configurationexception
processhelperproperties
if  isusejmx
// need to remove mdc during starting jmx, as that would otherwise causes leaks, as spawned threads inheirt the mdc and
// we cannot cleanup clear that during shutdown of the broker.
mdc remove
try
startmanagementcontext
finally
mdc put    brokername
// in jvm master slave, lets not publish over existing broker till we get the lock
final brokerregistry brokerregistry   brokerregistry getinstance
if  brokerregistry lookup getbrokername       null
brokerregistry bind getbrokername    brokerservice this
startpersistenceadapter startasync
startbroker startasync
brokerregistry bind getbrokername    brokerservice this
catch  exception e
log error     getbrokername         brokerid       e  e
try
if   stopped get
stop
catch  exception ex
log warn    ex
throw e
finally
mdc remove
private void startpersistenceadapter boolean async  throws exception
if  async
new thread
@override
public void run
try
dostartpersistenceadapter
catch  throwable e
startexception   e
finally
synchronized  persistenceadapterlock
persistenceadapterlock notifyall
start
else
dostartpersistenceadapter
private void dostartpersistenceadapter   throws exception
getpersistenceadapter   setusagemanager getproducersystemusage
getpersistenceadapter   setbrokername getbrokername
log info     getpersistenceadapter
if  deleteallmessagesonstartup
deleteallmessages
getpersistenceadapter   start
private void startbroker boolean async  throws exception
if  async
new thread
@override
public void run
try
synchronized  persistenceadapterlock
persistenceadapterlock wait
dostartbroker
catch  throwable t
startexception   t
start
else
dostartbroker
private void dostartbroker   throws exception
if  startexception    null
return
startdestinations
addshutdownhook
broker   getbroker
brokerid   broker getbrokerid
// need to log this after creating the broker so we have its id and name
if  log isinfoenabled
log info     getbrokerversion
getbrokername         brokerid
broker start
if  isusejmx
if  getmanagementcontext   iscreateconnector       getmanagementcontext   isconnectorstarted
// try to restart management context
// typical for slaves that use the same ports as master
managementcontext stop
startmanagementcontext
managedregionbroker managedbroker    managedregionbroker  regionbroker
managedbroker setcontextbroker broker
adminview setbroker managedbroker
startallconnectors
if  ioexceptionhandler    null
setioexceptionhandler new defaultioexceptionhandler
if  log isinfoenabled
log info     getbrokerversion
getbrokername         brokerid
log info
getbroker   brokerservicestarted
checksystemusagelimits
startedlatch countdown
getbroker   nowmasterbroker
/**
*
* @throws exception
* @org.apache .xbean.destroymethod
*/
@override
@predestroy
public void stop   throws exception
if   stopping compareandset false  true
log trace
return
mdc put    brokername
if  systemexitonshutdown
new thread
@override
public void run
system exit systemexitonshutdownexitcode
start
if  log isinfoenabled
log info     getbrokerversion
getbrokername         brokerid
removeshutdownhook
if  this scheduler    null
this scheduler stop
this scheduler   null
servicestopper stopper   new servicestopper
if  services    null
for  service service   services
stopper stop service
stopallconnectors stopper
// remove any vmtransports connected
// this has to be done after services are stopped,
// to avoid timing issue with discovery (spinning up a new instance)
brokerregistry getinstance   unbind getbrokername
vmtransportfactory stopped getbrokername
if  broker    null
stopper stop broker
broker   null
if  jobschedulerstore    null
jobschedulerstore stop
jobschedulerstore   null
if  tempdatastore    null
tempdatastore stop
tempdatastore   null
try
stopper stop persistenceadapter
persistenceadapter   null
if  isusejmx
stopper stop getmanagementcontext
managementcontext   null
// clear selectorparser cache to free memory
selectorparser clearcache
finally
started set false
stopped set true
stoppedlatch countdown
if  this taskrunnerfactory    null
this taskrunnerfactory shutdown
this taskrunnerfactory   null
if  this executor    null
threadpoolutils shutdownnow executor
this executor   null
this destinationinterceptors   null
this destinationfactory   null
if  log isinfoenabled
if  startdate    null
log info     getbrokerversion
getbrokername         brokerid       getuptime
log info     getbrokerversion
getbrokername         brokerid
synchronized  shutdownhooks
for  runnable hook   shutdownhooks
try
hook run
catch  throwable e
stopper onexception hook  e
mdc remove
// and clear start date
startdate   null
stopper throwfirstexception
public boolean checkqueuesize string queuename
long count   0
long queuesize   0
map<activemqdestination  destination> destinationmap   regionbroker getdestinationmap
for  map entry<activemqdestination  destination> entry   destinationmap entryset
if  entry getkey   isqueue
if  entry getvalue   getname   matches queuename
queuesize   entry getvalue   getdestinationstatistics   getmessages   getcount
count    queuesize
if  queuesize > 0
log info     entry getvalue   getname
queuesize
return count    0
/**
* this method (both connectorname and queuename are using regex to match)
* 1. stop the connector (supposed the user input the connector which the
* clients connect to) 2. to check whether there is any pending message on
* the queues defined by queuename 3. supposedly, after stop the connector,
* client should failover to other broker and pending messages should be
* forwarded. if no pending messages, the method finally call stop to stop
* the broker.
*
* @param connectorname
* @param queuename
* @param timeout
* @param pollinterval
* @throws exception
*/
public void stopgracefully string connectorname  string queuename  long timeout  long pollinterval  throws exception
if  isusejmx
if  connectorname    null    queuename    null    timeout <  0
throw new exception
if  pollinterval <  0
pollinterval   30
log info     connectorname       queuename
timeout       pollinterval
transportconnector connector
for  int i   0  i < transportconnectors size    i
connector   transportconnectors get i
if  connector    null    connector getname      null    connector getname   matches connectorname
connector stop
long start   system currenttimemillis
while  system currenttimemillis     start < timeout   1000
// check quesize until it gets zero
if  checkqueuesize queuename
stop
break
else
thread sleep pollinterval   1000
if  stopped get
log info
else
log info
/**
* a helper method to block the caller thread until the broker has been
* stopped
*/
public void waituntilstopped
while  isstarted       stopped get
try
stoppedlatch await
catch  interruptedexception e
// ignore
/**
* a helper method to block the caller thread until the broker has fully started
* @return boolean true if wait succeeded false if broker was not started or was stopped
*/
public boolean waituntilstarted
boolean waitsucceeded   isstarted
while   isstarted       stopped get       waitsucceeded
try
if  startexception    null
return waitsucceeded
waitsucceeded   startedlatch await 100l  timeunit milliseconds
catch  interruptedexception ignore
return waitsucceeded
// properties
// -------------------------------------------------------------------------
/**
* returns the message broker
*/
public broker getbroker   throws exception
if  broker    null
broker   createbroker
return broker
/**
* returns the administration view of the broker; used to create and destroy
* resources such as queues and topics. note this method returns null if jmx
* is disabled.
*/
public brokerview getadminview   throws exception
if  adminview    null
// force lazy creation
getbroker
return adminview
public void setadminview brokerview adminview
this adminview   adminview
public string getbrokername
return brokername
/**
* sets the name of this broker; which must be unique in the network
*
* @param brokername
*/
public void setbrokername string brokername
if  brokername    null
throw new nullpointerexception
string str   brokername replaceall
if   str equals brokername
log error     brokername       str
this brokername   str trim
public persistenceadapterfactory getpersistencefactory
return persistencefactory
public file getdatadirectoryfile
if  datadirectoryfile    null
datadirectoryfile   new file iohelper getdefaultdatadirectory
return datadirectoryfile
public file getbrokerdatadirectory
string brokerdir   getbrokername
return new file getdatadirectoryfile    brokerdir
/**
* sets the directory in which the data files will be stored by default for
* the jdbc and journal persistence adaptors.
*
* @param datadirectory
*            the directory to store data files
*/
public void setdatadirectory string datadirectory
setdatadirectoryfile new file datadirectory
/**
* sets the directory in which the data files will be stored by default for
* the jdbc and journal persistence adaptors.
*
* @param datadirectoryfile
*            the directory to store data files
*/
public void setdatadirectoryfile file datadirectoryfile
this datadirectoryfile   datadirectoryfile
/**
* @return the tmpdatadirectory
*/
public file gettmpdatadirectory
if  tmpdatadirectory    null
tmpdatadirectory   new file getbrokerdatadirectory
return tmpdatadirectory
/**
* @param tmpdatadirectory
*            the tmpdatadirectory to set
*/
public void settmpdatadirectory file tmpdatadirectory
this tmpdatadirectory   tmpdatadirectory
public void setpersistencefactory persistenceadapterfactory persistencefactory
this persistencefactory   persistencefactory
public void setdestinationfactory destinationfactory destinationfactory
this destinationfactory   destinationfactory
public boolean ispersistent
return persistent
/**
* sets whether or not persistence is enabled or disabled.
* @org.apache.xbean.property propertyeditor="org.apache.activemq.util.booleaneditor"
*/
public void setpersistent boolean persistent
this persistent   persistent
public boolean ispopulatejmsxuserid
return populatejmsxuserid
/**
* sets whether or not the broker should populate the jmsxuserid header.
*/
public void setpopulatejmsxuserid boolean populatejmsxuserid
this populatejmsxuserid   populatejmsxuserid
public systemusage getsystemusage
try
if  systemusage    null
systemusage   new systemusage    getpersistenceadapter    gettempdatastore    getjobschedulerstore
systemusage setexecutor getexecutor
systemusage getmemoryusage   setlimit 1024   1024   64      64 mb
systemusage gettempusage   setlimit 1024l   1024   1024   50      50 gb
systemusage getstoreusage   setlimit 1024l   1024   1024   100      100 gb
systemusage getjobschedulerusage   setlimit 1024l   1024   1000   50      50    gb
addservice this systemusage
return systemusage
catch  ioexception e
log error    e
throw new runtimeexception     e getmessage
public void setsystemusage systemusage memorymanager
if  this systemusage    null
removeservice this systemusage
this systemusage   memorymanager
if  this systemusage getexecutor    null
this systemusage setexecutor getexecutor
addservice this systemusage
/**
* @return the consumerusagemanager
* @throws ioexception
*/
public systemusage getconsumersystemusage   throws ioexception
if  this consumersystemusaage    null
if  splitsystemusageforproducersconsumers
this consumersystemusaage   new systemusage getsystemusage
float portion   consumersystemusageportion   100f
this consumersystemusaage getmemoryusage   setusageportion portion
addservice this consumersystemusaage
else
consumersystemusaage   getsystemusage
return this consumersystemusaage
/**
* @param consumersystemusaage
*            the storesystemusage to set
*/
public void setconsumersystemusage systemusage consumersystemusaage
if  this consumersystemusaage    null
removeservice this consumersystemusaage
this consumersystemusaage   consumersystemusaage
addservice this consumersystemusaage
/**
* @return the producerusagemanager
* @throws ioexception
*/
public systemusage getproducersystemusage   throws ioexception
if  producersystemusage    null
if  splitsystemusageforproducersconsumers
producersystemusage   new systemusage getsystemusage
float portion   producersystemusageportion   100f
producersystemusage getmemoryusage   setusageportion portion
addservice producersystemusage
else
producersystemusage   getsystemusage
return producersystemusage
/**
* @param producerusagemanager
*            the producerusagemanager to set
*/
public void setproducersystemusage systemusage producerusagemanager
if  this producersystemusage    null
removeservice this producersystemusage
this producersystemusage   producerusagemanager
addservice this producersystemusage
public persistenceadapter getpersistenceadapter   throws ioexception
if  persistenceadapter    null
persistenceadapter   createpersistenceadapter
configureservice persistenceadapter
this persistenceadapter   registerpersistenceadaptermbean persistenceadapter
return persistenceadapter
/**
* sets the persistence adaptor implementation to use for this broker
*
* @throws ioexception
*/
public void setpersistenceadapter persistenceadapter persistenceadapter  throws ioexception
if   ispersistent         persistenceadapter instanceof memorypersistenceadapter
log warn  false     persistenceadapter
return
this persistenceadapter   persistenceadapter
configureservice this persistenceadapter
this persistenceadapter   registerpersistenceadaptermbean persistenceadapter
public taskrunnerfactory gettaskrunnerfactory
if  this taskrunnerfactory    null
this taskrunnerfactory   new taskrunnerfactory   getbrokername      gettaskrunnerpriority    true  1000
isdedicatedtaskrunner
return this taskrunnerfactory
public void settaskrunnerfactory taskrunnerfactory taskrunnerfactory
this taskrunnerfactory   taskrunnerfactory
public taskrunnerfactory getpersistencetaskrunnerfactory
if  taskrunnerfactory    null
persistencetaskrunnerfactory   new taskrunnerfactory    persistencethreadpriority
true  1000  isdedicatedtaskrunner
return persistencetaskrunnerfactory
public void setpersistencetaskrunnerfactory taskrunnerfactory persistencetaskrunnerfactory
this persistencetaskrunnerfactory   persistencetaskrunnerfactory
public boolean isusejmx
return usejmx
public boolean isenablestatistics
return enablestatistics
/**
* sets whether or not the broker's services enable statistics or not.
*/
public void setenablestatistics boolean enablestatistics
this enablestatistics   enablestatistics
/**
* sets whether or not the broker's services should be exposed into jmx or
* not.
* @org.apache.xbean.property propertyeditor="org.apache.activemq.util.booleaneditor"
*/
public void setusejmx boolean usejmx
this usejmx   usejmx
public objectname getbrokerobjectname   throws malformedobjectnameexception
if  brokerobjectname    null
brokerobjectname   createbrokerobjectname
return brokerobjectname
/**
* sets the jmx objectname for this broker
*/
public void setbrokerobjectname objectname brokerobjectname
this brokerobjectname   brokerobjectname
public managementcontext getmanagementcontext
if  managementcontext    null
managementcontext   new managementcontext
return managementcontext
public void setmanagementcontext managementcontext managementcontext
this managementcontext   managementcontext
public networkconnector getnetworkconnectorbyname string connectorname
for  networkconnector connector   networkconnectors
if  connector getname   equals connectorname
return connector
return null
public string getnetworkconnectoruris
return networkconnectoruris
public void setnetworkconnectoruris string networkconnectoruris
this networkconnectoruris   networkconnectoruris
public transportconnector getconnectorbyname string connectorname
for  transportconnector connector   transportconnectors
if  connector getname   equals connectorname
return connector
return null
public map<string  string> gettransportconnectorurisasmap
map<string  string> answer   new hashmap<string  string>
for  transportconnector connector   transportconnectors
try
uri uri   connector getconnecturi
if  uri    null
string scheme   uri getscheme
if  scheme    null
answer put scheme tolowercase locale english   uri tostring
catch  exception e
log debug    e
return answer
public string gettransportconnectoruris
return transportconnectoruris
public void settransportconnectoruris string transportconnectoruris
this transportconnectoruris   transportconnectoruris
/**
* @return returns the jmsbridgeconnectors.
*/
public jmsconnector getjmsbridgeconnectors
return jmsbridgeconnectors
/**
* @param jmsconnectors
*            the jmsbridgeconnectors to set.
*/
public void setjmsbridgeconnectors jmsconnector jmsconnectors
this jmsbridgeconnectors   jmsconnectors
public service getservices
return services toarray new service
/**
* sets the services associated with this broker.
*/
public void setservices service services
this services clear
if  services    null
for  int i   0  i < services length  i
this services add services
/**
* adds a new service so that it will be started as part of the broker
* lifecycle
*/
public void addservice service service
services add service
public void removeservice service service
services remove service
public boolean isuseloggingforshutdownerrors
return useloggingforshutdownerrors
/**
* sets whether or not we should use commons-logging when reporting errors
* when shutting down the broker
*/
public void setuseloggingforshutdownerrors boolean useloggingforshutdownerrors
this useloggingforshutdownerrors   useloggingforshutdownerrors
public boolean isuseshutdownhook
return useshutdownhook
/**
* sets whether or not we should use a shutdown handler to close down the
* broker cleanly if the jvm is terminated. it is recommended you leave this
* enabled.
*/
public void setuseshutdownhook boolean useshutdownhook
this useshutdownhook   useshutdownhook
public boolean isadvisorysupport
return advisorysupport
/**
* allows the support of advisory messages to be disabled for performance
* reasons.
* @org.apache.xbean.property propertyeditor="org.apache.activemq.util.booleaneditor"
*/
public void setadvisorysupport boolean advisorysupport
this advisorysupport   advisorysupport
public list<transportconnector> gettransportconnectors
return new arraylist<transportconnector> transportconnectors
/**
* sets the transport connectors which this broker will listen on for new
* clients
*
* @org.apache.xbean.property
*                            nestedtype="org.apache.activemq.broker.transportconnector"
*/
public void settransportconnectors list<transportconnector> transportconnectors  throws exception
for  transportconnector connector   transportconnectors
addconnector connector
public transportconnector gettransportconnectorbyname string name
for  transportconnector transportconnector   transportconnectors
if  name equals transportconnector getname
return transportconnector
return null
public transportconnector gettransportconnectorbyscheme string scheme
for  transportconnector transportconnector   transportconnectors
if  scheme equals transportconnector geturi   getscheme
return transportconnector
return null
public list<networkconnector> getnetworkconnectors
return new arraylist<networkconnector> networkconnectors
public list<proxyconnector> getproxyconnectors
return new arraylist<proxyconnector> proxyconnectors
/**
* sets the network connectors which this broker will use to connect to
* other brokers in a federated network
*
* @org.apache.xbean.property
*                            nestedtype="org.apache.activemq.network.networkconnector"
*/
public void setnetworkconnectors list<?> networkconnectors  throws exception
for  object connector   networkconnectors
addnetworkconnector  networkconnector  connector
/**
* sets the network connectors which this broker will use to connect to
* other brokers in a federated network
*/
public void setproxyconnectors list<?> proxyconnectors  throws exception
for  object connector   proxyconnectors
addproxyconnector  proxyconnector  connector
public policymap getdestinationpolicy
return destinationpolicy
/**
* sets the destination specific policies available either for exact
* destinations or for wildcard areas of destinations.
*/
public void setdestinationpolicy policymap policymap
this destinationpolicy   policymap
public brokerplugin getplugins
return plugins
/**
* sets a number of broker plugins to install such as for security
* authentication or authorization
*/
public void setplugins brokerplugin plugins
this plugins   plugins
public messageauthorizationpolicy getmessageauthorizationpolicy
return messageauthorizationpolicy
/**
* sets the policy used to decide if the current connection is authorized to
* consume a given message
*/
public void setmessageauthorizationpolicy messageauthorizationpolicy messageauthorizationpolicy
this messageauthorizationpolicy   messageauthorizationpolicy
/**
* delete all messages from the persistent store
*
* @throws ioexception
*/
public void deleteallmessages   throws ioexception
getpersistenceadapter   deleteallmessages
public boolean isdeleteallmessagesonstartup
return deleteallmessagesonstartup
/**
* sets whether or not all messages are deleted on startup - mostly only
* useful for testing.
* @org.apache.xbean.property propertyeditor="org.apache.activemq.util.booleaneditor"
*/
public void setdeleteallmessagesonstartup boolean deletepersistentmessagesonstartup
this deleteallmessagesonstartup   deletepersistentmessagesonstartup
public uri getvmconnectoruri
if  vmconnectoruri    null
try
vmconnectoruri   new uri     getbrokername   replaceall
catch  urisyntaxexception e
log error     getbrokername    e
return vmconnectoruri
public void setvmconnectoruri uri vmconnectoruri
this vmconnectoruri   vmconnectoruri
public string getdefaultsocketuristring
if  started get
if  this defaultsocketuristring    null
for  transportconnector tc this transportconnectors
string result   null
try
result   tc getpublishableconnectstring
catch  exception e
log warn   tc e
if  result    null
// find first publishable uri
if  tc isupdateclusterclients      tc isrebalanceclusterclients
this defaultsocketuristring   result
break
else
// or use the first defined
if  this defaultsocketuristring    null
this defaultsocketuristring   result
return this defaultsocketuristring
return null
/**
* @return returns the shutdownonmasterfailure.
*/
public boolean isshutdownonmasterfailure
return shutdownonmasterfailure
/**
* @param shutdownonmasterfailure
*            the shutdownonmasterfailure to set.
*/
public void setshutdownonmasterfailure boolean shutdownonmasterfailure
this shutdownonmasterfailure   shutdownonmasterfailure
public boolean iskeepdurablesubsactive
return keepdurablesubsactive
public void setkeepdurablesubsactive boolean keepdurablesubsactive
this keepdurablesubsactive   keepdurablesubsactive
public boolean isusevirtualtopics
return usevirtualtopics
/**
* sets whether or not <a
* href="http://activemq.apache.org/virtual-destinations.html">virtual
* topics</a> should be supported by default if they have not been
* explicitly configured.
*/
public void setusevirtualtopics boolean usevirtualtopics
this usevirtualtopics   usevirtualtopics
public destinationinterceptor getdestinationinterceptors
return destinationinterceptors
public boolean isusemirroredqueues
return usemirroredqueues
/**
* sets whether or not <a
* href="http://activemq.apache.org/mirrored-queues.html">mirrored
* queues</a> should be supported by default if they have not been
* explicitly configured.
*/
public void setusemirroredqueues boolean usemirroredqueues
this usemirroredqueues   usemirroredqueues
/**
* sets the destination interceptors to use
*/
public void setdestinationinterceptors destinationinterceptor destinationinterceptors
this destinationinterceptors   destinationinterceptors
public activemqdestination getdestinations
return destinations
/**
* sets the destinations which should be loaded/created on startup
*/
public void setdestinations activemqdestination destinations
this destinations   destinations
/**
* @return the tempdatastore
*/
public synchronized pliststore gettempdatastore
if  tempdatastore    null
if   ispersistent
return null
try
persistenceadapter pa   getpersistenceadapter
if  pa  null    pa instanceof pliststore
return  pliststore  pa
catch  ioexception e
throw new runtimeexception e
boolean result   true
boolean empty   true
try
file directory   gettmpdatadirectory
if  directory exists      directory isdirectory
file files   directory listfiles
if  files    null    files length > 0
empty   false
for  int i   0  i < files length  i
file file   files
if   file isdirectory
result    file delete
if   empty
string str   result ?
log info str
string clazz
this tempdatastore    pliststore  getclass   getclassloader   loadclass clazz  newinstance
this tempdatastore setdirectory gettmpdatadirectory
configureservice tempdatastore
this tempdatastore start
catch  exception e
throw new runtimeexception e
return tempdatastore
/**
* @param tempdatastore
*            the tempdatastore to set
*/
public void settempdatastore pliststore tempdatastore
this tempdatastore   tempdatastore
configureservice tempdatastore
try
tempdatastore start
catch  exception e
runtimeexception exception   new runtimeexception     tempdatastore  e
log error exception getlocalizedmessage    e
throw exception
public int getpersistencethreadpriority
return persistencethreadpriority
public void setpersistencethreadpriority int persistencethreadpriority
this persistencethreadpriority   persistencethreadpriority
/**
* @return the uselocalhostbrokername
*/
public boolean isuselocalhostbrokername
return this uselocalhostbrokername
/**
* @param uselocalhostbrokername
*            the uselocalhostbrokername to set
*/
public void setuselocalhostbrokername boolean uselocalhostbrokername
this uselocalhostbrokername   uselocalhostbrokername
if  uselocalhostbrokername     started get      brokername    null    brokername    default_broker_name
brokername   local_host_name
/**
* @return the supportfailover
*/
public boolean issupportfailover
return this supportfailover
/**
* @param supportfailover
*            the supportfailover to set
*/
public void setsupportfailover boolean supportfailover
this supportfailover   supportfailover
/**
* looks up and lazily creates if necessary the destination for the given
* jms name
*/
public destination getdestination activemqdestination destination  throws exception
return getbroker   adddestination getadminconnectioncontext    destination false
public void removedestination activemqdestination destination  throws exception
getbroker   removedestination getadminconnectioncontext    destination  0
public int getproducersystemusageportion
return producersystemusageportion
public void setproducersystemusageportion int producersystemusageportion
this producersystemusageportion   producersystemusageportion
public int getconsumersystemusageportion
return consumersystemusageportion
public void setconsumersystemusageportion int consumersystemusageportion
this consumersystemusageportion   consumersystemusageportion
public boolean issplitsystemusageforproducersconsumers
return splitsystemusageforproducersconsumers
public void setsplitsystemusageforproducersconsumers boolean splitsystemusageforproducersconsumers
this splitsystemusageforproducersconsumers   splitsystemusageforproducersconsumers
public boolean ismonitorconnectionsplits
return monitorconnectionsplits
public void setmonitorconnectionsplits boolean monitorconnectionsplits
this monitorconnectionsplits   monitorconnectionsplits
public int gettaskrunnerpriority
return taskrunnerpriority
public void settaskrunnerpriority int taskrunnerpriority
this taskrunnerpriority   taskrunnerpriority
public boolean isdedicatedtaskrunner
return dedicatedtaskrunner
public void setdedicatedtaskrunner boolean dedicatedtaskrunner
this dedicatedtaskrunner   dedicatedtaskrunner
public boolean iscachetempdestinations
return cachetempdestinations
public void setcachetempdestinations boolean cachetempdestinations
this cachetempdestinations   cachetempdestinations
public int gettimebeforepurgetempdestinations
return timebeforepurgetempdestinations
public void settimebeforepurgetempdestinations int timebeforepurgetempdestinations
this timebeforepurgetempdestinations   timebeforepurgetempdestinations
public boolean isusetempmirroredqueues
return usetempmirroredqueues
public void setusetempmirroredqueues boolean usetempmirroredqueues
this usetempmirroredqueues   usetempmirroredqueues
public synchronized jobschedulerstore getjobschedulerstore
if  jobschedulerstore    null    isschedulersupport
try
string clazz
jobschedulerstore    jobschedulerstore  getclass   getclassloader   loadclass clazz  newinstance
jobschedulerstore setdirectory getschedulerdirectoryfile
configureservice jobschedulerstore
jobschedulerstore start
log info     getschedulerdirectoryfile
catch  exception e
throw new runtimeexception e
return jobschedulerstore
public void setjobschedulerstore jobschedulerstore jobschedulerstore
this jobschedulerstore   jobschedulerstore
configureservice jobschedulerstore
try
jobschedulerstore start
catch  exception e
runtimeexception exception   new runtimeexception
jobschedulerstore  e
log error exception getlocalizedmessage    e
throw exception
//
// implementation methods
// -------------------------------------------------------------------------
/**
* handles any lazy-creation helper properties which are added to make
* things easier to configure inside environments such as spring
*
* @throws exception
*/
protected void processhelperproperties   throws exception
if  transportconnectoruris    null
for  int i   0  i < transportconnectoruris length  i
string uri   transportconnectoruris
addconnector uri
if  networkconnectoruris    null
for  int i   0  i < networkconnectoruris length  i
string uri   networkconnectoruris
addnetworkconnector uri
if  jmsbridgeconnectors    null
for  int i   0  i < jmsbridgeconnectors length  i
addjmsconnector jmsbridgeconnectors
protected void checksystemusagelimits   throws ioexception
systemusage usage   getsystemusage
long memlimit   usage getmemoryusage   getlimit
long jvmlimit   runtime getruntime   maxmemory
if  memlimit > jvmlimit
log error     memlimit    1024   1024
jvmlimit    1024   1024
if  getpersistenceadapter      null
persistenceadapter adapter   getpersistenceadapter
file dir   adapter getdirectory
if  dir    null
string dirpath   dir getabsolutepath
if   dir isabsolute
dir   new file dirpath
while  dir    null    dir isdirectory      false
dir   dir getparentfile
long storelimit   usage getstoreusage   getlimit
long dirfreespace   dir getusablespace
if  storelimit > dirfreespace
log warn     storelimit    1024   1024
dir getabsolutepath
dirfreespace    1024   1024
long maxjournalfilesize   0
long storelimit   usage getstoreusage   getlimit
if  adapter instanceof journaledstore
maxjournalfilesize     journaledstore  adapter  getjournalmaxfilelength
if  storelimit < maxjournalfilesize
log error     storelimit    1024   1024
maxjournalfilesize    1024   1024
file tmpdir   gettmpdatadirectory
if  tmpdir    null
string tmpdirpath   tmpdir getabsolutepath
if   tmpdir isabsolute
tmpdir   new file tmpdirpath
long storelimit   usage gettempusage   getlimit
while  tmpdir    null    tmpdir isdirectory      false
tmpdir   tmpdir getparentfile
long dirfreespace   tmpdir getusablespace
if  storelimit > dirfreespace
log error     storelimit    1024   1024
tmpdirpath
dirfreespace    1024   1024
if  ispersistent
long maxjournalfilesize
pliststore store   usage gettempusage   getstore
if  store    null    store instanceof journaledstore
maxjournalfilesize     journaledstore  store  getjournalmaxfilelength
else
maxjournalfilesize   default_max_file_length
if  storelimit < maxjournalfilesize
log error     storelimit    1024   1024
maxjournalfilesize    1024   1024
if  getjobschedulerstore      null
jobschedulerstore scheduler   getjobschedulerstore
file schedulerdir   scheduler getdirectory
if  schedulerdir    null
string schedulerdirpath   schedulerdir getabsolutepath
if   schedulerdir isabsolute
schedulerdir   new file schedulerdirpath
while  schedulerdir    null    schedulerdir isdirectory      false
schedulerdir   schedulerdir getparentfile
long schedularlimit   usage getjobschedulerusage   getlimit
long dirfreespace   schedulerdir getusablespace
if  schedularlimit > dirfreespace
log warn     schedularlimit    1024   1024
schedulerdir getabsolutepath
dirfreespace    1024   1024
public void stopallconnectors servicestopper stopper
for  iterator<networkconnector> iter   getnetworkconnectors   iterator    iter hasnext
networkconnector connector   iter next
unregisternetworkconnectormbean connector
stopper stop connector
for  iterator<proxyconnector> iter   getproxyconnectors   iterator    iter hasnext
proxyconnector connector   iter next
stopper stop connector
for  iterator<jmsconnector> iter   jmsconnectors iterator    iter hasnext
jmsconnector connector   iter next
stopper stop connector
for  iterator<transportconnector> iter   gettransportconnectors   iterator    iter hasnext
transportconnector connector   iter next
stopper stop connector
protected transportconnector registerconnectormbean transportconnector connector  throws ioexception
try
objectname objectname   createconnectorobjectname connector
connector   connector asmanagedconnector getmanagementcontext    objectname
connectorviewmbean view   new connectorview connector
annotatedmbean registermbean getmanagementcontext    view  objectname
return connector
catch  throwable e
throw ioexceptionsupport create     e getmessage    e
protected void unregisterconnectormbean transportconnector connector  throws ioexception
if  isusejmx
try
objectname objectname   createconnectorobjectname connector
getmanagementcontext   unregistermbean objectname
catch  throwable e
throw ioexceptionsupport create
e getmessage    e
protected persistenceadapter registerpersistenceadaptermbean persistenceadapter adaptor  throws ioexception
return adaptor
protected void unregisterpersistenceadaptermbean persistenceadapter adaptor  throws ioexception
if  isusejmx
private objectname createconnectorobjectname transportconnector connector  throws malformedobjectnameexception
return brokermbeansupport createconnectorname getbrokerobjectname       connector getname
protected void registernetworkconnectormbean networkconnector connector  throws ioexception
networkconnectorviewmbean view   new networkconnectorview connector
try
objectname objectname   createnetworkconnectorobjectname connector
connector setobjectname objectname
annotatedmbean registermbean getmanagementcontext    view  objectname
catch  throwable e
throw ioexceptionsupport create     e getmessage    e
protected objectname createnetworkconnectorobjectname networkconnector connector  throws malformedobjectnameexception
return brokermbeansupport createnetworkconnectorname getbrokerobjectname       connector getname
public objectname createduplexnetworkconnectorobjectname string transport  throws malformedobjectnameexception
return brokermbeansupport createnetworkconnectorname getbrokerobjectname       transport tostring
protected void unregisternetworkconnectormbean networkconnector connector
if  isusejmx
try
objectname objectname   createnetworkconnectorobjectname connector
getmanagementcontext   unregistermbean objectname
catch  exception e
log error     e  e
protected void registerproxyconnectormbean proxyconnector connector  throws ioexception
proxyconnectorview view   new proxyconnectorview connector
try
objectname objectname   brokermbeansupport createnetworkconnectorname getbrokerobjectname       connector getname
annotatedmbean registermbean getmanagementcontext    view  objectname
catch  throwable e
throw ioexceptionsupport create     e getmessage    e
protected void registerjmsconnectormbean jmsconnector connector  throws ioexception
jmsconnectorview view   new jmsconnectorview connector
try
objectname objectname   brokermbeansupport createnetworkconnectorname getbrokerobjectname       connector getname
annotatedmbean registermbean getmanagementcontext    view  objectname
catch  throwable e
throw ioexceptionsupport create     e getmessage    e
/**
* factory method to create a new broker
*
* @throws exception
* @throws
* @throws
*/
protected broker createbroker   throws exception
regionbroker   createregionbroker
broker broker   addinterceptors regionbroker
// add a filter that will stop access to the broker once stopped
broker   new mutablebrokerfilter broker
broker old
@override
public void stop   throws exception
old   this next getandset new errorbroker     this
// just ignore additional stop actions.
@override
public void stop   throws exception
old stop
@override
public void start   throws exception
if  forcestart    old    null
this next set old
getnext   start
return broker
/**
* factory method to create the core region broker onto which interceptors
* are added
*
* @throws exception
*/
protected broker createregionbroker   throws exception
if  destinationinterceptors    null
destinationinterceptors   createdefaultdestinationinterceptor
configureservices destinationinterceptors
destinationinterceptor destinationinterceptor   new compositedestinationinterceptor destinationinterceptors
if  destinationfactory    null
destinationfactory   new destinationfactoryimpl this  gettaskrunnerfactory    getpersistenceadapter
return createregionbroker destinationinterceptor
protected broker createregionbroker destinationinterceptor destinationinterceptor  throws ioexception
regionbroker regionbroker
if  isusejmx
try
regionbroker   new managedregionbroker this  getmanagementcontext    getbrokerobjectname
gettaskrunnerfactory    getconsumersystemusage    destinationfactory  destinationinterceptor getscheduler   getexecutor
catch malformedobjectnameexception me
log error   me
throw new ioexception me
else
regionbroker   new regionbroker this  gettaskrunnerfactory    getconsumersystemusage    destinationfactory
destinationinterceptor getscheduler   getexecutor
destinationfactory setregionbroker regionbroker
regionbroker setkeepdurablesubsactive keepdurablesubsactive
regionbroker setbrokername getbrokername
regionbroker getdestinationstatistics   setenabled enablestatistics
regionbroker setallowtempautocreationonsend isallowtempautocreationonsend
if  brokerid    null
regionbroker setbrokerid brokerid
return regionbroker
/**
* create the default destination interceptor
*/
protected destinationinterceptor createdefaultdestinationinterceptor
list<destinationinterceptor> answer   new arraylist<destinationinterceptor>
if  isusevirtualtopics
virtualdestinationinterceptor interceptor   new virtualdestinationinterceptor
virtualtopic virtualtopic   new virtualtopic
virtualtopic setname
virtualdestination virtualdestinations     virtualtopic
interceptor setvirtualdestinations virtualdestinations
answer add interceptor
if  isusemirroredqueues
mirroredqueue interceptor   new mirroredqueue
answer add interceptor
destinationinterceptor array   new destinationinterceptor
answer toarray array
return array
/**
* strategy method to add interceptors to the broker
*
* @throws ioexception
*/
protected broker addinterceptors broker broker  throws exception
if  isschedulersupport
schedulerbroker sb   new schedulerbroker this  broker  getjobschedulerstore
if  isusejmx
jobschedulerviewmbean view   new jobschedulerview sb getjobscheduler
try
objectname objectname   brokermbeansupport createjobschedulerservicename getbrokerobjectname
annotatedmbean registermbean getmanagementcontext    view  objectname
this adminview setjmsjobscheduler objectname
catch  throwable e
throw ioexceptionsupport create
e getmessage    e
broker   sb
if  isusejmx
healthviewmbean statusview   new healthview  managedregionbroker getregionbroker
try
objectname objectname   brokermbeansupport createhealthservicename getbrokerobjectname
annotatedmbean registermbean getmanagementcontext    statusview  objectname
catch  throwable e
throw ioexceptionsupport create
e getmessage    e
if  isadvisorysupport
broker   new advisorybroker broker
broker   new compositedestinationbroker broker
broker   new transactionbroker broker  getpersistenceadapter   createtransactionstore
if  ispopulatejmsxuserid
useridbroker useridbroker   new useridbroker broker
useridbroker setuseauthenticateprincipal isuseauthenticatedprincipalforjmsxuserid
broker   useridbroker
if  ismonitorconnectionsplits
broker   new connectionsplitbroker broker
if  plugins    null
for  int i   0  i < plugins length  i
brokerplugin plugin   plugins
broker   plugin installplugin broker
return broker
protected persistenceadapter createpersistenceadapter   throws ioexception
if  ispersistent
persistenceadapterfactory fac   getpersistencefactory
if  fac    null
return fac createpersistenceadapter
else
try
string clazz
persistenceadapter adaptor    persistenceadapter getclass   getclassloader   loadclass clazz  newinstance
file dir   new file getbrokerdatadirectory
adaptor setdirectory dir
return adaptor
catch  throwable e
throw ioexceptionsupport create e
else
return new memorypersistenceadapter
protected objectname createbrokerobjectname   throws malformedobjectnameexception
return brokermbeansupport createbrokerobjectname getmanagementcontext   getjmxdomainname    getbrokername
protected transportconnector createtransportconnector uri brokeruri  throws exception
transportserver transport   transportfactorysupport bind this  brokeruri
return new transportconnector transport
/**
* extracts the port from the options
*/
protected object getport map<? ?> options
object port   options get
if  port    null
port   default_port
log warn     port
return port
protected void addshutdownhook
if  useshutdownhook
shutdownhook   new thread
@override
public void run
containershutdown
runtime getruntime   addshutdownhook shutdownhook
protected void removeshutdownhook
if  shutdownhook    null
try
runtime getruntime   removeshutdownhook shutdownhook
catch  exception e
log debug     e
/**
* sets hooks to be executed when broker shut down
*
* @org.apache.xbean.property
*/
public void setshutdownhooks list<runnable> hooks  throws exception
for  runnable hook   hooks
addshutdownhook hook
/**
* causes a clean shutdown of the container when the vm is being shut down
*/
protected void containershutdown
try
stop
catch  ioexception e
throwable linkedexception   e getcause
if  linkedexception    null
logerror     e       linkedexception  linkedexception
else
logerror     e  e
if   useloggingforshutdownerrors
e printstacktrace system err
catch  exception e
logerror     e  e
protected void logerror string message  throwable e
if  useloggingforshutdownerrors
log error     e
else
system err println     e
/**
* starts any configured destinations on startup
*/
protected void startdestinations   throws exception
if  destinations    null
connectioncontext adminconnectioncontext   getadminconnectioncontext
for  int i   0  i < destinations length  i
activemqdestination destination   destinations
getbroker   adddestination adminconnectioncontext  destination true
if  isusevirtualtopics
startvirtualconsumerdestinations
/**
* returns the broker's administration connection context used for
* configuring the broker at startup
*/
public connectioncontext getadminconnectioncontext   throws exception
return brokersupport getconnectioncontext getbroker
protected void startmanagementcontext   throws exception
getmanagementcontext   setbrokername brokername
getmanagementcontext   start
adminview   new brokerview this  null
objectname objectname   getbrokerobjectname
annotatedmbean registermbean getmanagementcontext    adminview  objectname
/**
* start all transport and network connections, proxies and bridges
*
* @throws exception
*/
public void startallconnectors   throws exception
set<activemqdestination> durabledestinations   getbroker   getdurabledestinations
list<transportconnector> al   new arraylist<transportconnector>
for  iterator<transportconnector> iter   gettransportconnectors   iterator    iter hasnext
transportconnector connector   iter next
connector setbrokerservice this
al add starttransportconnector connector
if  al size   > 0
// let's clear the transportconnectors list and replace it with
// the started transportconnector instances
this transportconnectors clear
settransportconnectors al
uri uri   getvmconnectoruri
map<string  string> map   new hashmap<string  string> urisupport parseparameters uri
map put
map put
uri   urisupport createuriwithquery uri  urisupport createquerystring map
if   stopped get
threadpoolexecutor networkconnectorstartexecutor   null
if  isnetworkconnectorstartasync
// spin up as many threads as needed
networkconnectorstartexecutor   new threadpoolexecutor 0  integer max_value
10  timeunit seconds  new synchronousqueue<runnable>
new threadfactory
int count 0
@override
public thread newthread runnable runnable
thread thread   new thread runnable      count
thread setdaemon true
return thread
for  iterator<networkconnector> iter   getnetworkconnectors   iterator    iter hasnext
final networkconnector connector   iter next
connector setlocaluri uri
connector setbrokername getbrokername
connector setdurabledestinations durabledestinations
if  getdefaultsocketuristring      null
connector setbrokerurl getdefaultsocketuristring
if  networkconnectorstartexecutor    null
networkconnectorstartexecutor execute new runnable
@override
public void run
try
log info     connector
connector start
catch exception e
log error     connector      e
else
connector start
if  networkconnectorstartexecutor    null
// executor done when enqueued tasks are complete
threadpoolutils shutdown networkconnectorstartexecutor
for  iterator<proxyconnector> iter   getproxyconnectors   iterator    iter hasnext
proxyconnector connector   iter next
connector start
for  iterator<jmsconnector> iter   jmsconnectors iterator    iter hasnext
jmsconnector connector   iter next
connector start
for  service service   services
configureservice service
service start
protected transportconnector starttransportconnector transportconnector connector  throws exception
connector settaskrunnerfactory gettaskrunnerfactory
messageauthorizationpolicy policy   getmessageauthorizationpolicy
if  policy    null
connector setmessageauthorizationpolicy policy
if  isusejmx
connector   registerconnectormbean connector
connector getstatistics   setenabled enablestatistics
connector start
return connector
/**
* perform any custom dependency injection
*/
protected void configureservices object services
for  object service   services
configureservice service
/**
* perform any custom dependency injection
*/
protected void configureservice object service
if  service instanceof brokerserviceaware
brokerserviceaware serviceaware    brokerserviceaware  service
serviceaware setbrokerservice this
public void handleioexception ioexception exception
if  ioexceptionhandler    null
ioexceptionhandler handle exception
else
log info     exception  exception
protected void startvirtualconsumerdestinations   throws exception
connectioncontext adminconnectioncontext   getadminconnectioncontext
set<activemqdestination> destinations   destinationfactory getdestinations
destinationfilter filter   getvirtualtopicconsumerdestinationfilter
if   destinations isempty
for  activemqdestination destination   destinations
if  filter matches destination     true
broker adddestination adminconnectioncontext  destination  false
private destinationfilter getvirtualtopicconsumerdestinationfilter
// created at startup, so no sync needed
if  virtualconsumerdestinationfilter    null
set <activemqqueue> consumerdestinations   new hashset<activemqqueue>
if  destinationinterceptors    null
for  destinationinterceptor interceptor   destinationinterceptors
if  interceptor instanceof virtualdestinationinterceptor
virtualdestinationinterceptor virtualdestinationinterceptor    virtualdestinationinterceptor  interceptor
for  virtualdestination virtualdestination  virtualdestinationinterceptor getvirtualdestinations
if  virtualdestination instanceof virtualtopic
consumerdestinations add new activemqqueue   virtualtopic  virtualdestination  getprefix     destinationfilter any_descendent
activemqqueue filter   new activemqqueue
filter setcompositedestinations consumerdestinations toarray new activemqdestination
virtualconsumerdestinationfilter   destinationfilter parsefilter filter
return virtualconsumerdestinationfilter
protected synchronized threadpoolexecutor getexecutor
if  this executor    null
this executor   new threadpoolexecutor 1  10  60  timeunit seconds  new linkedblockingqueue<runnable>    new threadfactory
private long i   0
@override
public thread newthread runnable runnable
this i
thread thread   new thread runnable      this i
thread setdaemon true
thread setuncaughtexceptionhandler new thread uncaughtexceptionhandler
@override
public void uncaughtexception final thread t  final throwable e
log error    t getname    e
return thread
new rejectedexecutionhandler
@override
public void rejectedexecution final runnable r  final threadpoolexecutor executor
try
executor getqueue   offer r  60  timeunit seconds
catch  interruptedexception e
throw new rejectedexecutionexception
throw new rejectedexecutionexception
return this executor
public synchronized scheduler getscheduler
if  this scheduler  null
this scheduler   new scheduler   getbrokername
try
this scheduler start
catch  exception e
log error   e
return this scheduler
public broker getregionbroker
return regionbroker
public void setregionbroker broker regionbroker
this regionbroker   regionbroker
public void addshutdownhook runnable hook
synchronized  shutdownhooks
shutdownhooks add hook
public void removeshutdownhook runnable hook
synchronized  shutdownhooks
shutdownhooks remove hook
public boolean issystemexitonshutdown
return systemexitonshutdown
/**
* @org.apache.xbean.property propertyeditor="org.apache.activemq.util.booleaneditor"
*/
public void setsystemexitonshutdown boolean systemexitonshutdown
this systemexitonshutdown   systemexitonshutdown
public int getsystemexitonshutdownexitcode
return systemexitonshutdownexitcode
public void setsystemexitonshutdownexitcode int systemexitonshutdownexitcode
this systemexitonshutdownexitcode   systemexitonshutdownexitcode
public sslcontext getsslcontext
return sslcontext
public void setsslcontext sslcontext sslcontext
this sslcontext   sslcontext
public boolean isshutdownonslavefailure
return shutdownonslavefailure
/**
* @org.apache.xbean.property propertyeditor="org.apache.activemq.util.booleaneditor"
*/
public void setshutdownonslavefailure boolean shutdownonslavefailure
this shutdownonslavefailure   shutdownonslavefailure
public boolean iswaitforslave
return waitforslave
/**
* @org.apache.xbean.property propertyeditor="org.apache.activemq.util.booleaneditor"
*/
public void setwaitforslave boolean waitforslave
this waitforslave   waitforslave
public long getwaitforslavetimeout
return this waitforslavetimeout
public void setwaitforslavetimeout long waitforslavetimeout
this waitforslavetimeout   waitforslavetimeout
/**
* get the passiveslave
* @return the passiveslave
*/
public boolean ispassiveslave
return this passiveslave
/**
* set the passiveslave
* @param passiveslave the passiveslave to set
* @org.apache.xbean.property propertyeditor="org.apache.activemq.util.booleaneditor"
*/
public void setpassiveslave boolean passiveslave
this passiveslave   passiveslave
/**
* override the default ioexception handler, called when persistence adapter
* has experiences file or jdbc i/o exceptions
*
* @param ioexceptionhandler
*/
public void setioexceptionhandler ioexceptionhandler ioexceptionhandler
configureservice ioexceptionhandler
this ioexceptionhandler   ioexceptionhandler
public ioexceptionhandler getioexceptionhandler
return ioexceptionhandler
/**
* @return the schedulersupport
*/
public boolean isschedulersupport
return this schedulersupport
/**
* @param schedulersupport the schedulersupport to set
* @org.apache.xbean.property propertyeditor="org.apache.activemq.util.booleaneditor"
*/
public void setschedulersupport boolean schedulersupport
this schedulersupport   schedulersupport
/**
* @return the schedulerdirectory
*/
public file getschedulerdirectoryfile
if  this schedulerdirectoryfile    null
this schedulerdirectoryfile   new file getbrokerdatadirectory
return schedulerdirectoryfile
/**
* @param schedulerdirectory the schedulerdirectory to set
*/
public void setschedulerdirectoryfile file schedulerdirectory
this schedulerdirectoryfile   schedulerdirectory
public void setschedulerdirectory string schedulerdirectory
setschedulerdirectoryfile new file schedulerdirectory
public int getscheduleperiodfordestinationpurge
return this scheduleperiodfordestinationpurge
public void setscheduleperiodfordestinationpurge int scheduleperiodfordestinationpurge
this scheduleperiodfordestinationpurge   scheduleperiodfordestinationpurge
public int getmaxpurgeddestinationspersweep
return this maxpurgeddestinationspersweep
public void setmaxpurgeddestinationspersweep int maxpurgeddestinationspersweep
this maxpurgeddestinationspersweep   maxpurgeddestinationspersweep
public brokercontext getbrokercontext
return brokercontext
public void setbrokercontext brokercontext brokercontext
this brokercontext   brokercontext
public void setbrokerid string brokerid
this brokerid   new brokerid brokerid
public boolean isuseauthenticatedprincipalforjmsxuserid
return useauthenticatedprincipalforjmsxuserid
public void setuseauthenticatedprincipalforjmsxuserid boolean useauthenticatedprincipalforjmsxuserid
this useauthenticatedprincipalforjmsxuserid   useauthenticatedprincipalforjmsxuserid
/**
* should mbeans that support showing the authenticated user name information have this
* value filled in or not.
*
* @return true if user names should be exposed in mbeans
*/
public boolean ispopulateusernameinmbeans
return this populateusernameinmbeans
/**
* sets whether authenticated user name information is shown in mbeans that support this field.
* @param value if mbeans should expose user name information.
*/
public void setpopulateusernameinmbeans boolean value
this populateusernameinmbeans   value
/**
* gets the time in milliseconds that an invocation of an mbean method will wait before
* failing.  the default value is to wait forever (zero).
*
* @return timeout in milliseconds before mbean calls fail, (default is 0 or no timeout).
*/
public long getmbeaninvocationtimeout
return mbeaninvocationtimeout
/**
* gets the time in milliseconds that an invocation of an mbean method will wait before
* failing. the default value is to wait forever (zero).
*
* @param mbeaninvocationtimeout
*      timeout in milliseconds before mbean calls fail, (default is 0 or no timeout).
*/
public void setmbeaninvocationtimeout long mbeaninvocationtimeout
this mbeaninvocationtimeout   mbeaninvocationtimeout
public boolean isnetworkconnectorstartasync
return networkconnectorstartasync
public void setnetworkconnectorstartasync boolean networkconnectorstartasync
this networkconnectorstartasync   networkconnectorstartasync
public boolean isallowtempautocreationonsend
return allowtempautocreationonsend
/**
* enable if temp destinations need to be propagated through a network when
* advisorysupport==false. this is used in conjunction with the policy
* gcinactivedestinations for matching temps so they can get removed
* when inactive
*
* @param allowtempautocreationonsend
*/
public void setallowtempautocreationonsend boolean allowtempautocreationonsend
this allowtempautocreationonsend   allowtempautocreationonsend
public long getofflinedurablesubscribertimeout
return offlinedurablesubscribertimeout
public void setofflinedurablesubscribertimeout long offlinedurablesubscribertimeout
this offlinedurablesubscribertimeout   offlinedurablesubscribertimeout
public long getofflinedurablesubscribertaskschedule
return offlinedurablesubscribertaskschedule
public void setofflinedurablesubscribertaskschedule long offlinedurablesubscribertaskschedule
this offlinedurablesubscribertaskschedule   offlinedurablesubscribertaskschedule
public boolean shouldrecordvirtualdestination activemqdestination destination
return isusevirtualtopics      destination isqueue
getvirtualtopicconsumerdestinationfilter   matches destination
public throwable getstartexception
return startexception
public boolean isstartasync
return startasync
public void setstartasync boolean startasync
this startasync   startasync