/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq broker util
import org apache activemq broker brokerpluginsupport
import org apache activemq broker producerbrokerexchange
import org apache activemq broker region destination
import org apache activemq broker region policy deadletterstrategy
import org apache activemq command activemqdestination
import org apache activemq command activemqmessage
import org apache activemq command message
import org slf4j logger
import org slf4j loggerfactory
/**
* a broker interceptor which updates a jms client's timestamp on the message
* with a broker timestamp. useful when the clocks on client machines are known
* to not be correct and you can only trust the time set on the broker machines.
*
* enabling this plugin will break jms compliance since the timestamp that the
* producer sees on the messages after as send() will be different from the
* timestamp the consumer will observe when he receives the message. this plugin
* is not enabled in the default activemq configuration.
*
* 2 new attributes have been added which will allow the administrator some override control
* over the expiration time for incoming messages:
*
* attribute 'zeroexpirationoverride' can be used to apply an expiration
* time to incoming messages with no expiration defined (messages that would never expire)
*
* attribute 'ttlceiling' can be used to apply a limit to the expiration time
*
* @org.apache.xbean.xbean element="timestampingbrokerplugin"
*
*
*/
public class timestampingbrokerplugin extends brokerpluginsupport
private static final logger log   loggerfactory getlogger timestampingbrokerplugin class
/**
* variable which (when non-zero) is used to override
* the expiration date for messages that arrive with
* no expiration date set (in milliseconds).
*/
long zeroexpirationoverride   0
/**
* variable which (when non-zero) is used to limit
* the expiration date (in milliseconds).
*/
long ttlceiling   0
/**
* if true, the plugin will not update timestamp to past values
* false by default
*/
boolean futureonly   false
/**
* if true, update timestamp even if message has passed through a network
* default false
*/
boolean processnetworkmessages   false
/**
* setter method for zeroexpirationoverride
*/
public void setzeroexpirationoverride long ttl
this zeroexpirationoverride   ttl
/**
* setter method for ttlceiling
*/
public void setttlceiling long ttlceiling
this ttlceiling   ttlceiling
public void setfutureonly boolean futureonly
this futureonly   futureonly
public void setprocessnetworkmessages boolean processnetworkmessages
this processnetworkmessages   processnetworkmessages
@override
public void send producerbrokerexchange producerexchange  message message  throws exception
if  message gettimestamp   > 0     isdestinationdlq message
processnetworkmessages     message getbrokerpath      null    message getbrokerpath   length    0
// timestamp not been disabled and has not passed through a network or processnetworkmessages=true
long oldexpiration   message getexpiration
long newtimestamp   system currenttimemillis
long timetolive   zeroexpirationoverride
long oldtimestamp   message gettimestamp
if  oldexpiration > 0
timetolive   oldexpiration   oldtimestamp
if  timetolive > 0    ttlceiling > 0    timetolive > ttlceiling
timetolive   ttlceiling
long expiration   timetolive   newtimestamp
// in the scenario that the broker is behind the clients we never want to set the
// timestamp and expiration in the past
if  futureonly     expiration > oldexpiration
if  timetolive > 0    expiration > 0
message setexpiration expiration
message settimestamp newtimestamp
if  log isdebugenabled
log debug     message getmessageid         oldtimestamp       newtimestamp
super send producerexchange  message
private boolean isdestinationdlq message message
deadletterstrategy deadletterstrategy
message tmp
destination regiondestination    destination  message getregiondestination
if  message    null    regiondestination    null
deadletterstrategy   regiondestination getdeadletterstrategy
if  deadletterstrategy    null
// cheap copy, since we only need two fields
tmp   new activemqmessage
tmp setdestination message getoriginaldestination
tmp setregiondestination regiondestination
// determine if we are headed for a dlq
activemqdestination deadletterdestination   deadletterstrategy getdeadletterqueuefor tmp  null
if  deadletterdestination equals message getdestination
return true
return false