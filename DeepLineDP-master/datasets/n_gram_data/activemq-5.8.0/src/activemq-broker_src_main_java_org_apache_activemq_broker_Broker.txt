/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq broker
import java net uri
import java util set
import java util concurrent threadpoolexecutor
import org apache activemq service
import org apache activemq broker region destination
import org apache activemq broker region messagereference
import org apache activemq broker region region
import org apache activemq broker region subscription
import org apache activemq command activemqdestination
import org apache activemq command brokerid
import org apache activemq command brokerinfo
import org apache activemq command connectioninfo
import org apache activemq command destinationinfo
import org apache activemq command messagedispatch
import org apache activemq command producerinfo
import org apache activemq command sessioninfo
import org apache activemq command transactionid
import org apache activemq store pliststore
import org apache activemq thread scheduler
import org apache activemq usage usage
/**
* the message broker which routes messages, maintains subscriptions and
* connections, acknowledges messages and handles transactions.
*
*
*/
public interface broker extends region  service
/**
* get a broker from the broker stack that is a particular class
*
* @param type
* @return
*/
broker getadaptor class type
/**
* get the id of the broker
*/
brokerid getbrokerid
/**
* get the name of the broker
*/
string getbrokername
/**
* a remote broker connects
*/
void addbroker connection connection  brokerinfo info
/**
* remove a brokerinfo
*
* @param connection
* @param info
*/
void removebroker connection connection  brokerinfo info
/**
* a client is establishing a connection with the broker.
*
* @throws exception todo
*/
void addconnection connectioncontext context  connectioninfo info  throws exception
/**
* a client is disconnecting from the broker.
*
* @param context the environment the operation is being executed under.
* @param info
* @param error null if the client requested the disconnect or the error
*                that caused the client to disconnect.
* @throws exception todo
*/
void removeconnection connectioncontext context  connectioninfo info  throwable error  throws exception
/**
* adds a session.
*
* @param context
* @param info
* @throws exception todo
*/
void addsession connectioncontext context  sessioninfo info  throws exception
/**
* removes a session.
*
* @param context
* @param info
* @throws exception todo
*/
void removesession connectioncontext context  sessioninfo info  throws exception
/**
* adds a producer.
*
* @param context the enviorment the operation is being executed under.
* @throws exception todo
*/
void addproducer connectioncontext context  producerinfo info  throws exception
/**
* removes a producer.
*
* @param context the enviorment the operation is being executed under.
* @throws exception todo
*/
void removeproducer connectioncontext context  producerinfo info  throws exception
/**
* @return all clients added to the broker.
* @throws exception todo
*/
connection getclients   throws exception
/**
* @return all destinations added to the broker.
* @throws exception todo
*/
activemqdestination getdestinations   throws exception
/**
* gets a list of all the prepared xa transactions.
*
* @param context transaction ids
* @return
* @throws exception todo
*/
transactionid getpreparedtransactions connectioncontext context  throws exception
/**
* starts a transaction.
*
* @param context
* @param xid
* @throws exception todo
*/
void begintransaction connectioncontext context  transactionid xid  throws exception
/**
* prepares a transaction. only valid for xa transactions.
*
* @param context
* @param xid
* @return id
* @throws exception todo
*/
int preparetransaction connectioncontext context  transactionid xid  throws exception
/**
* rollsback a transaction.
*
* @param context
* @param xid
* @throws exception todo
*/
void rollbacktransaction connectioncontext context  transactionid xid  throws exception
/**
* commits a transaction.
*
* @param context
* @param xid
* @param onephase
* @throws exception todo
*/
void committransaction connectioncontext context  transactionid xid  boolean onephase  throws exception
/**
* forgets a transaction.
*
* @param context
* @param transactionid
* @throws exception
*/
void forgettransaction connectioncontext context  transactionid transactionid  throws exception
/**
* get the brokerinfo's of any connected brokers
*
* @return array of peer brokerinfos
*/
brokerinfo getpeerbrokerinfos
/**
* notify the broker that a dispatch is going to happen
*
* @param messagedispatch
*/
void preprocessdispatch messagedispatch messagedispatch
/**
* notify the broker that a dispatch has happened
*
* @param messagedispatch
*/
void postprocessdispatch messagedispatch messagedispatch
/**
* @return true if the broker has stopped
*/
boolean isstopped
/**
* @return a set of all durable destinations
*/
set<activemqdestination> getdurabledestinations
/**
* add and process a destinationinfo object
*
* @param context
* @param info
* @throws exception
*/
void adddestinationinfo connectioncontext context  destinationinfo info  throws exception
/**
* remove and process a destinationinfo object
*
* @param context
* @param info
* @throws exception
*/
void removedestinationinfo connectioncontext context  destinationinfo info  throws exception
/**
* @return true if fault tolerant
*/
boolean isfaulttolerantconfiguration
/**
* @return the connection context used to make administration operations on
*         startup or via jmx mbeans
*/
connectioncontext getadminconnectioncontext
/**
* sets the default administration connection context used when configuring
* the broker on startup or via jmx
*
* @param adminconnectioncontext
*/
void setadminconnectioncontext connectioncontext adminconnectioncontext
/**
* @return the temp data store
*/
pliststore gettempdatastore
/**
* @return the uri that can be used to connect to the local broker
*/
uri getvmconnectoruri
/**
* called when the brokerservice starts
*/
void brokerservicestarted
/**
* @return the brokerservice
*/
brokerservice getbrokerservice
/**
* ensure we get the broker at the top of the stack
*
* @return the broker at the top of the stack
*/
broker getroot
/**
* determine if a message has expired -allows default behaviour to be
* overriden - as the timestamp set by the producer can be out of sync with
* the broker
*
* @param messagereference
* @return true if the message is expired
*/
boolean isexpired messagereference messagereference
/**
* a message has expired
*
* @param context
* @param messagereference
* @param subscription, may be null
*/
void messageexpired connectioncontext context  messagereference messagereference  subscription subscription
/**
* a message needs to go the a dlq
*
* @param context
* @param messagereference
* @param subscription, may be null
*/
void sendtodeadletterqueue connectioncontext context  messagereference messagereference  subscription subscription
/**
* @return the broker sequence id
*/
long getbrokersequenceid
/**
* called when message is consumed
* @param context
* @param messagereference
*/
void messageconsumed connectioncontext context  messagereference messagereference
/**
* called when message is delivered to the broker
* @param context
* @param messagereference
*/
void messagedelivered connectioncontext context  messagereference messagereference
/**
* called when a message is discarded - e.g. running low on memory
* this will happen only if the policy is enabled - e.g. non durable topics
* @param context
* @param sub
* @param messagereference
*/
void messagediscarded connectioncontext context  subscription sub  messagereference messagereference
/**
* called when there is a slow consumer
* @param context
* @param destination
* @param subs
*/
void slowconsumer connectioncontext context destination destination  subscription subs
/**
* called to notify a producer is too fast
* @param context
* @param producerinfo
* @param destination
*/
void fastproducer connectioncontext context producerinfo producerinfo activemqdestination destination
/**
* called when a usage reaches a limit
* @param context
* @param destination
* @param usage
*/
void isfull connectioncontext context destination destination usage usage
/**
*  called when the broker becomes the master in a master/slave
*  configuration
*/
void nowmasterbroker
scheduler getscheduler
threadpoolexecutor getexecutor
void networkbridgestarted brokerinfo brokerinfo  boolean createdbyduplex  string remoteip
void networkbridgestopped brokerinfo brokerinfo