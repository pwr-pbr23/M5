/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq broker region policy
import org apache activemq activemqprefetchpolicy
import org apache activemq broker broker
import org apache activemq broker region basedestination
import org apache activemq broker region destination
import org apache activemq broker region durabletopicsubscription
import org apache activemq broker region queue
import org apache activemq broker region queuebrowsersubscription
import org apache activemq broker region queuesubscription
import org apache activemq broker region subscription
import org apache activemq broker region topic
import org apache activemq broker region topicsubscription
import org apache activemq broker region cursors pendingmessagecursor
import org apache activemq broker region group messagegrouphashbucketfactory
import org apache activemq broker region group messagegroupmapfactory
import org apache activemq filter destinationmapentry
import org apache activemq network networkbridgefilterfactory
import org apache activemq usage systemusage
import org slf4j logger
import org slf4j loggerfactory
/**
* represents an entry in a {@link policymap} for assigning policies to a
* specific destination or a hierarchical wildcard area of destinations.
*
* @org.apache.xbean.xbean
*
*/
public class policyentry extends destinationmapentry
private static final logger log   loggerfactory getlogger policyentry class
private dispatchpolicy dispatchpolicy
private subscriptionrecoverypolicy subscriptionrecoverypolicy
private boolean sendadvisoryifnoconsumers
private deadletterstrategy deadletterstrategy   destination default_dead_letter_strategy
private pendingmessagelimitstrategy pendingmessagelimitstrategy
private messageevictionstrategy messageevictionstrategy
private long memorylimit
private messagegroupmapfactory messagegroupmapfactory
private pendingqueuemessagestoragepolicy pendingqueuepolicy
private pendingdurablesubscribermessagestoragepolicy pendingdurablesubscriberpolicy
private pendingsubscribermessagestoragepolicy pendingsubscriberpolicy
private int maxproducerstoaudit basedestination max_producers_to_audit
private int maxauditdepth basedestination max_audit_depth
private int maxqueueauditdepth basedestination max_audit_depth
private boolean enableaudit true
private boolean producerflowcontrol   true
private boolean alwaysretroactive   false
private long blockedproducerwarninginterval   destination default_blocked_producer_warning_interval
private boolean optimizeddispatch false
private int maxpagesize basedestination max_page_size
private int maxbrowsepagesize basedestination max_browse_page_size
private boolean usecache true
private long minimummessagesize 1024
private boolean useconsumerpriority true
private boolean strictorderdispatch false
private boolean lazydispatch false
private int timebeforedispatchstarts   0
private int consumersbeforedispatchstarts   0
private boolean advisoryforslowconsumers
private boolean advisoryforfastproducers
private boolean advisoryfordiscardingmessages
private boolean advisorywhenfull
private boolean advisoryfordelivery
private boolean advisoryforconsumed
private long expiremessagesperiod   basedestination expire_message_period
private int maxexpirepagesize   basedestination max_browse_page_size
private int queueprefetch activemqprefetchpolicy default_queue_prefetch
private int queuebrowserprefetch activemqprefetchpolicy default_queue_browser_prefetch
private int topicprefetch activemqprefetchpolicy default_topic_prefetch
private int durabletopicprefetch activemqprefetchpolicy default_durable_topic_prefetch
private boolean useprefetchextension   true
private int cursormemoryhighwatermark   70
private int storeusagehighwatermark   100
private slowconsumerstrategy slowconsumerstrategy
private boolean prioritizedmessages
private boolean allconsumersexclusivebydefault
private boolean gcinactivedestinations
private boolean gcwithnetworkconsumers
private long inactivetimoutbeforegc   basedestination default_inactive_timeout_before_gc
private boolean reducememoryfootprint
private networkbridgefilterfactory networkbridgefilterfactory
private boolean dooptimzemessagestorage   true
/*
* percentage of in-flight messages above which optimize message store is disabled
*/
private int optimizemessagestoreinflightlimit   10
public void configure broker broker queue queue
baseconfiguration broker queue
if  dispatchpolicy    null
queue setdispatchpolicy dispatchpolicy
queue setdeadletterstrategy getdeadletterstrategy
queue setmessagegroupmapfactory getmessagegroupmapfactory
if  memorylimit > 0
queue getmemoryusage   setlimit memorylimit
if  pendingqueuepolicy    null
pendingmessagecursor messages   pendingqueuepolicy getqueuependingmessagecursor broker queue
queue setmessages messages
queue setuseconsumerpriority isuseconsumerpriority
queue setstrictorderdispatch isstrictorderdispatch
queue setoptimizeddispatch isoptimizeddispatch
queue setlazydispatch islazydispatch
queue settimebeforedispatchstarts gettimebeforedispatchstarts
queue setconsumersbeforedispatchstarts getconsumersbeforedispatchstarts
queue setallconsumersexclusivebydefault isallconsumersexclusivebydefault
public void configure broker broker topic topic
baseconfiguration broker topic
if  dispatchpolicy    null
topic setdispatchpolicy dispatchpolicy
topic setdeadletterstrategy getdeadletterstrategy
if  subscriptionrecoverypolicy    null
subscriptionrecoverypolicy srp   subscriptionrecoverypolicy copy
srp setbroker broker
topic setsubscriptionrecoverypolicy srp
if  memorylimit > 0
topic getmemoryusage   setlimit memorylimit
topic setlazydispatch islazydispatch
public void baseconfiguration broker broker basedestination destination
destination setproducerflowcontrol isproducerflowcontrol
destination setalwaysretroactive isalwaysretroactive
destination setblockedproducerwarninginterval getblockedproducerwarninginterval
destination setenableaudit isenableaudit
destination setmaxauditdepth getmaxqueueauditdepth
destination setmaxproducerstoaudit getmaxproducerstoaudit
destination setmaxpagesize getmaxpagesize
destination setmaxbrowsepagesize getmaxbrowsepagesize
destination setusecache isusecache
destination setminimummessagesize  int  getminimummessagesize
destination setadvisoryforconsumed isadvisoryforconsumed
destination setadvisoryfordelivery isadvisoryfordelivery
destination setadvisoryfordiscardingmessages isadvisoryfordiscardingmessages
destination setadvisoryforslowconsumers isadvisoryforslowconsumers
destination setadvisoryforfastproducers isadvisoryforfastproducers
destination setadvisorywhenfull isadvisorywhenfull
destination setsendadvisoryifnoconsumers sendadvisoryifnoconsumers
destination setexpiremessagesperiod getexpiremessagesperiod
destination setmaxexpirepagesize getmaxexpirepagesize
destination setcursormemoryhighwatermark getcursormemoryhighwatermark
destination setstoreusagehighwatermark getstoreusagehighwatermark
slowconsumerstrategy scs   getslowconsumerstrategy
if  scs    null
scs setbrokerservice broker
destination setslowconsumerstrategy scs
destination setprioritizedmessages isprioritizedmessages
destination setgcifinactive isgcinactivedestinations
destination setgcwithnetworkconsumers isgcwithnetworkconsumers
destination setinactivetimoutbeforegc getinactivetimoutbeforegc
destination setreducememoryfootprint isreducememoryfootprint
destination setdooptimzemessagestorage isdooptimzemessagestorage
destination setoptimizemessagestoreinflightlimit getoptimizemessagestoreinflightlimit
public void configure broker broker  systemusage memorymanager  topicsubscription subscription
configureprefetch subscription
if  pendingmessagelimitstrategy    null
int value   pendingmessagelimitstrategy getmaximumpendingmessagelimit subscription
int consumerlimit   subscription getinfo   getmaximumpendingmessagelimit
if  consumerlimit > 0
if  value < 0    consumerlimit < value
value   consumerlimit
if  value >  0
if  log isdebugenabled
log debug     value       subscription getinfo   getconsumerid
subscription setmaximumpendingmessages value
if  messageevictionstrategy    null
subscription setmessageevictionstrategy messageevictionstrategy
if  pendingsubscriberpolicy    null
string name   subscription getcontext   getclientid         subscription getconsumerinfo   getconsumerid
int maxbatchsize   subscription getconsumerinfo   getprefetchsize
subscription setmatched pendingsubscriberpolicy getsubscriberpendingmessagecursor broker name  maxbatchsize subscription
if  enableaudit
subscription setenableaudit enableaudit
subscription setmaxproducerstoaudit maxproducerstoaudit
subscription setmaxauditdepth maxauditdepth
public void configure broker broker  systemusage memorymanager  durabletopicsubscription sub
string clientid   sub getsubscriptionkey   getclientid
string subname   sub getsubscriptionkey   getsubscriptionname
sub setcursormemoryhighwatermark getcursormemoryhighwatermark
configureprefetch sub
if  pendingdurablesubscriberpolicy    null
pendingmessagecursor cursor   pendingdurablesubscriberpolicy getsubscriberpendingmessagecursor broker clientid  subname sub getprefetchsize   sub
cursor setsystemusage memorymanager
sub setpending cursor
int auditdepth   getmaxauditdepth
if  auditdepth    basedestination max_audit_depth    this isprioritizedmessages
sub setmaxauditdepth auditdepth   10
else
sub setmaxauditdepth auditdepth
sub setmaxproducerstoaudit getmaxproducerstoaudit
sub setuseprefetchextension isuseprefetchextension
public void configure broker broker  systemusage memorymanager  queuebrowsersubscription sub
configureprefetch sub
sub setcursormemoryhighwatermark getcursormemoryhighwatermark
sub setuseprefetchextension isuseprefetchextension
public void configure broker broker  systemusage memorymanager  queuesubscription sub
configureprefetch sub
sub setcursormemoryhighwatermark getcursormemoryhighwatermark
sub setuseprefetchextension isuseprefetchextension
public void configureprefetch subscription subscription
final int currentprefetch   subscription getconsumerinfo   getprefetchsize
if  subscription instanceof queuebrowsersubscription
if  currentprefetch    activemqprefetchpolicy default_queue_browser_prefetch
queuebrowsersubscription  subscription  setprefetchsize getqueuebrowserprefetch
else if  subscription instanceof queuesubscription
if  currentprefetch    activemqprefetchpolicy default_queue_prefetch
queuesubscription  subscription  setprefetchsize getqueueprefetch
else if  subscription instanceof durabletopicsubscription
if  currentprefetch    activemqprefetchpolicy default_durable_topic_prefetch
subscription getconsumerinfo   getprefetchsize      activemqprefetchpolicy default_optimize_durable_topic_prefetch
durabletopicsubscription subscription  setprefetchsize getdurabletopicprefetch
else if  subscription instanceof topicsubscription
if  currentprefetch    activemqprefetchpolicy default_topic_prefetch
topicsubscription  subscription  setprefetchsize gettopicprefetch
if  currentprefetch    0    subscription getprefetchsize      0
// tell the sub so that it can issue a pull request
subscription updateconsumerprefetch 0
// properties
// -------------------------------------------------------------------------
public dispatchpolicy getdispatchpolicy
return dispatchpolicy
public void setdispatchpolicy dispatchpolicy policy
this dispatchpolicy   policy
public subscriptionrecoverypolicy getsubscriptionrecoverypolicy
return subscriptionrecoverypolicy
public void setsubscriptionrecoverypolicy subscriptionrecoverypolicy subscriptionrecoverypolicy
this subscriptionrecoverypolicy   subscriptionrecoverypolicy
public boolean issendadvisoryifnoconsumers
return sendadvisoryifnoconsumers
/**
* sends an advisory message if a non-persistent message is sent and there
* are no active consumers
*/
public void setsendadvisoryifnoconsumers boolean sendadvisoryifnoconsumers
this sendadvisoryifnoconsumers   sendadvisoryifnoconsumers
public deadletterstrategy getdeadletterstrategy
return deadletterstrategy
/**
* sets the policy used to determine which dead letter queue destination
* should be used
*/
public void setdeadletterstrategy deadletterstrategy deadletterstrategy
this deadletterstrategy   deadletterstrategy
public pendingmessagelimitstrategy getpendingmessagelimitstrategy
return pendingmessagelimitstrategy
/**
* sets the strategy to calculate the maximum number of messages that are
* allowed to be pending on consumers (in addition to their prefetch sizes).
* once the limit is reached, non-durable topics can then start discarding
* old messages. this allows us to keep dispatching messages to slow
* consumers while not blocking fast consumers and discarding the messages
* oldest first.
*/
public void setpendingmessagelimitstrategy pendingmessagelimitstrategy pendingmessagelimitstrategy
this pendingmessagelimitstrategy   pendingmessagelimitstrategy
public messageevictionstrategy getmessageevictionstrategy
return messageevictionstrategy
/**
* sets the eviction strategy used to decide which message to evict when the
* slow consumer needs to discard messages
*/
public void setmessageevictionstrategy messageevictionstrategy messageevictionstrategy
this messageevictionstrategy   messageevictionstrategy
public long getmemorylimit
return memorylimit
/**
* when set using xbean, values of the form "20 mb", "1024kb", and "1g" can be used
* @org.apache.xbean.property propertyeditor="org.apache.activemq.util.memorypropertyeditor"
*/
public void setmemorylimit long memorylimit
this memorylimit   memorylimit
public messagegroupmapfactory getmessagegroupmapfactory
if  messagegroupmapfactory    null
messagegroupmapfactory   new messagegrouphashbucketfactory
return messagegroupmapfactory
/**
* sets the factory used to create new instances of {messagegroupmap} used
* to implement the <a
* href="http://activemq.apache.org/message-groups.html">message groups</a>
* functionality.
*/
public void setmessagegroupmapfactory messagegroupmapfactory messagegroupmapfactory
this messagegroupmapfactory   messagegroupmapfactory
/**
* @return the pendingdurablesubscriberpolicy
*/
public pendingdurablesubscribermessagestoragepolicy getpendingdurablesubscriberpolicy
return this pendingdurablesubscriberpolicy
/**
* @param pendingdurablesubscriberpolicy the pendingdurablesubscriberpolicy
*                to set
*/
public void setpendingdurablesubscriberpolicy pendingdurablesubscribermessagestoragepolicy pendingdurablesubscriberpolicy
this pendingdurablesubscriberpolicy   pendingdurablesubscriberpolicy
/**
* @return the pendingqueuepolicy
*/
public pendingqueuemessagestoragepolicy getpendingqueuepolicy
return this pendingqueuepolicy
/**
* @param pendingqueuepolicy the pendingqueuepolicy to set
*/
public void setpendingqueuepolicy pendingqueuemessagestoragepolicy pendingqueuepolicy
this pendingqueuepolicy   pendingqueuepolicy
/**
* @return the pendingsubscriberpolicy
*/
public pendingsubscribermessagestoragepolicy getpendingsubscriberpolicy
return this pendingsubscriberpolicy
/**
* @param pendingsubscriberpolicy the pendingsubscriberpolicy to set
*/
public void setpendingsubscriberpolicy pendingsubscribermessagestoragepolicy pendingsubscriberpolicy
this pendingsubscriberpolicy   pendingsubscriberpolicy
/**
* @return true if producer flow control enabled
*/
public boolean isproducerflowcontrol
return producerflowcontrol
/**
* @param producerflowcontrol
*/
public void setproducerflowcontrol boolean producerflowcontrol
this producerflowcontrol   producerflowcontrol
/**
* @return true if topic is always retroactive
*/
public boolean isalwaysretroactive
return alwaysretroactive
/**
* @param alwaysretroactive
*/
public void setalwaysretroactive boolean alwaysretroactive
this alwaysretroactive   alwaysretroactive
/**
* set's the interval at which warnings about producers being blocked by
* resource usage will be triggered. values of 0 or less will disable
* warnings
*
* @param blockedproducerwarninginterval the interval at which warning about
*            blocked producers will be triggered.
*/
public void setblockedproducerwarninginterval long blockedproducerwarninginterval
this blockedproducerwarninginterval   blockedproducerwarninginterval
/**
*
* @return the interval at which warning about blocked producers will be
*         triggered.
*/
public long getblockedproducerwarninginterval
return blockedproducerwarninginterval
/**
* @return the maxproducerstoaudit
*/
public int getmaxproducerstoaudit
return maxproducerstoaudit
/**
* @param maxproducerstoaudit the maxproducerstoaudit to set
*/
public void setmaxproducerstoaudit int maxproducerstoaudit
this maxproducerstoaudit   maxproducerstoaudit
/**
* @return the maxauditdepth
*/
public int getmaxauditdepth
return maxauditdepth
/**
* @param maxauditdepth the maxauditdepth to set
*/
public void setmaxauditdepth int maxauditdepth
this maxauditdepth   maxauditdepth
/**
* @return the enableaudit
*/
public boolean isenableaudit
return enableaudit
/**
* @param enableaudit the enableaudit to set
*/
public void setenableaudit boolean enableaudit
this enableaudit   enableaudit
public int getmaxqueueauditdepth
return maxqueueauditdepth
public void setmaxqueueauditdepth int maxqueueauditdepth
this maxqueueauditdepth   maxqueueauditdepth
public boolean isoptimizeddispatch
return optimizeddispatch
public void setoptimizeddispatch boolean optimizeddispatch
this optimizeddispatch   optimizeddispatch
public int getmaxpagesize
return maxpagesize
public void setmaxpagesize int maxpagesize
this maxpagesize   maxpagesize
public int getmaxbrowsepagesize
return maxbrowsepagesize
public void setmaxbrowsepagesize int maxpagesize
this maxbrowsepagesize   maxpagesize
public boolean isusecache
return usecache
public void setusecache boolean usecache
this usecache   usecache
public long getminimummessagesize
return minimummessagesize
public void setminimummessagesize long minimummessagesize
this minimummessagesize   minimummessagesize
public boolean isuseconsumerpriority
return useconsumerpriority
public void setuseconsumerpriority boolean useconsumerpriority
this useconsumerpriority   useconsumerpriority
public boolean isstrictorderdispatch
return strictorderdispatch
public void setstrictorderdispatch boolean strictorderdispatch
this strictorderdispatch   strictorderdispatch
public boolean islazydispatch
return lazydispatch
public void setlazydispatch boolean lazydispatch
this lazydispatch   lazydispatch
public int gettimebeforedispatchstarts
return timebeforedispatchstarts
public void settimebeforedispatchstarts int timebeforedispatchstarts
this timebeforedispatchstarts   timebeforedispatchstarts
public int getconsumersbeforedispatchstarts
return consumersbeforedispatchstarts
public void setconsumersbeforedispatchstarts int consumersbeforedispatchstarts
this consumersbeforedispatchstarts   consumersbeforedispatchstarts
/**
* @return the advisoryforslowconsumers
*/
public boolean isadvisoryforslowconsumers
return advisoryforslowconsumers
/**
* @param advisoryforslowconsumers the advisoryforslowconsumers to set
*/
public void setadvisoryforslowconsumers boolean advisoryforslowconsumers
this advisoryforslowconsumers   advisoryforslowconsumers
/**
* @return the advisoryfordiscardingmessages
*/
public boolean isadvisoryfordiscardingmessages
return advisoryfordiscardingmessages
/**
* @param advisoryfordiscardingmessages the advisoryfordiscardingmessages to set
*/
public void setadvisoryfordiscardingmessages
boolean advisoryfordiscardingmessages
this advisoryfordiscardingmessages   advisoryfordiscardingmessages
/**
* @return the advisorywhenfull
*/
public boolean isadvisorywhenfull
return advisorywhenfull
/**
* @param advisorywhenfull the advisorywhenfull to set
*/
public void setadvisorywhenfull boolean advisorywhenfull
this advisorywhenfull   advisorywhenfull
/**
* @return the advisoryfordelivery
*/
public boolean isadvisoryfordelivery
return advisoryfordelivery
/**
* @param advisoryfordelivery the advisoryfordelivery to set
*/
public void setadvisoryfordelivery boolean advisoryfordelivery
this advisoryfordelivery   advisoryfordelivery
/**
* @return the advisoryforconsumed
*/
public boolean isadvisoryforconsumed
return advisoryforconsumed
/**
* @param advisoryforconsumed the advisoryforconsumed to set
*/
public void setadvisoryforconsumed boolean advisoryforconsumed
this advisoryforconsumed   advisoryforconsumed
/**
* @return the advisdoryforfastproducers
*/
public boolean isadvisoryforfastproducers
return advisoryforfastproducers
/**
* @param advisoryforfastproducers the advisdoryforfastproducers to set
*/
public void setadvisoryforfastproducers boolean advisoryforfastproducers
this advisoryforfastproducers   advisoryforfastproducers
public void setmaxexpirepagesize int maxexpirepagesize
this maxexpirepagesize   maxexpirepagesize
public int getmaxexpirepagesize
return maxexpirepagesize
public void setexpiremessagesperiod long expiremessagesperiod
this expiremessagesperiod   expiremessagesperiod
public long getexpiremessagesperiod
return expiremessagesperiod
/**
* get the queueprefetch
* @return the queueprefetch
*/
public int getqueueprefetch
return this queueprefetch
/**
* set the queueprefetch
* @param queueprefetch the queueprefetch to set
*/
public void setqueueprefetch int queueprefetch
this queueprefetch   queueprefetch
/**
* get the queuebrowserprefetch
* @return the queuebrowserprefetch
*/
public int getqueuebrowserprefetch
return this queuebrowserprefetch
/**
* set the queuebrowserprefetch
* @param queuebrowserprefetch the queuebrowserprefetch to set
*/
public void setqueuebrowserprefetch int queuebrowserprefetch
this queuebrowserprefetch   queuebrowserprefetch
/**
* get the topicprefetch
* @return the topicprefetch
*/
public int gettopicprefetch
return this topicprefetch
/**
* set the topicprefetch
* @param topicprefetch the topicprefetch to set
*/
public void settopicprefetch int topicprefetch
this topicprefetch   topicprefetch
/**
* get the durabletopicprefetch
* @return the durabletopicprefetch
*/
public int getdurabletopicprefetch
return this durabletopicprefetch
/**
* set the durabletopicprefetch
* @param durabletopicprefetch the durabletopicprefetch to set
*/
public void setdurabletopicprefetch int durabletopicprefetch
this durabletopicprefetch   durabletopicprefetch
public boolean isuseprefetchextension
return this useprefetchextension
public void setuseprefetchextension boolean useprefetchextension
this useprefetchextension   useprefetchextension
public int getcursormemoryhighwatermark
return this cursormemoryhighwatermark
public void setcursormemoryhighwatermark int cursormemoryhighwatermark
this cursormemoryhighwatermark   cursormemoryhighwatermark
public void setstoreusagehighwatermark int storeusagehighwatermark
this storeusagehighwatermark   storeusagehighwatermark
public int getstoreusagehighwatermark
return storeusagehighwatermark
public void setslowconsumerstrategy slowconsumerstrategy slowconsumerstrategy
this slowconsumerstrategy   slowconsumerstrategy
public slowconsumerstrategy getslowconsumerstrategy
return this slowconsumerstrategy
public boolean isprioritizedmessages
return this prioritizedmessages
public void setprioritizedmessages boolean prioritizedmessages
this prioritizedmessages   prioritizedmessages
public void setallconsumersexclusivebydefault boolean allconsumersexclusivebydefault
this allconsumersexclusivebydefault   allconsumersexclusivebydefault
public boolean isallconsumersexclusivebydefault
return allconsumersexclusivebydefault
public boolean isgcinactivedestinations
return this gcinactivedestinations
public void setgcinactivedestinations boolean gcinactivedestinations
this gcinactivedestinations   gcinactivedestinations
public long getinactivetimoutbeforegc
return this inactivetimoutbeforegc
public void setinactivetimoutbeforegc long inactivetimoutbeforegc
this inactivetimoutbeforegc   inactivetimoutbeforegc
public void setgcwithnetworkconsumers boolean gcwithnetworkconsumers
this gcwithnetworkconsumers   gcwithnetworkconsumers
public boolean isgcwithnetworkconsumers
return gcwithnetworkconsumers
public boolean isreducememoryfootprint
return reducememoryfootprint
public void setreducememoryfootprint boolean reducememoryfootprint
this reducememoryfootprint   reducememoryfootprint
public void setnetworkbridgefilterfactory networkbridgefilterfactory networkbridgefilterfactory
this networkbridgefilterfactory   networkbridgefilterfactory
public networkbridgefilterfactory getnetworkbridgefilterfactory
return networkbridgefilterfactory
public boolean isdooptimzemessagestorage
return dooptimzemessagestorage
public void setdooptimzemessagestorage boolean dooptimzemessagestorage
this dooptimzemessagestorage   dooptimzemessagestorage
public int getoptimizemessagestoreinflightlimit
return optimizemessagestoreinflightlimit
public void setoptimizemessagestoreinflightlimit int optimizemessagestoreinflightlimit
this optimizemessagestoreinflightlimit   optimizemessagestoreinflightlimit