/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq command
import java io datainputstream
import java io dataoutputstream
import java io ioexception
import java io inputstream
import java io outputstream
import java util hashmap
import java util zip deflateroutputstream
import java util zip inflaterinputstream
import javax jms jmsexception
import javax jms messagenotwriteableexception
import javax jms textmessage
import org apache activemq activemqconnection
import org apache activemq util bytearrayinputstream
import org apache activemq util bytearrayoutputstream
import org apache activemq util bytesequence
import org apache activemq util jmsexceptionsupport
import org apache activemq util marshallingsupport
import org apache activemq wireformat wireformat
/**
* @openwire:marshaller code="28"
*
*/
public class activemqtextmessage extends activemqmessage implements textmessage
public static final byte data_structure_type   commandtypes activemq_text_message
protected string text
public message copy
activemqtextmessage copy   new activemqtextmessage
copy copy
return copy
private void copy activemqtextmessage copy
super copy copy
copy text   text
public byte getdatastructuretype
return data_structure_type
public string getjmsxmimetype
return
public void settext string text  throws messagenotwriteableexception
checkreadonlybody
this text   text
setcontent null
public string gettext   throws jmsexception
if  text    null    getcontent      null
inputstream is   null
try
bytesequence bodyasbytes   getcontent
if  bodyasbytes    null
is   new bytearrayinputstream bodyasbytes
if  iscompressed
is   new inflaterinputstream is
datainputstream datain   new datainputstream is
text   marshallingsupport readutf8 datain
datain close
setcontent null
setcompressed false
catch  ioexception ioe
throw jmsexceptionsupport create ioe
finally
if  is    null
try
is close
catch  ioexception e
// ignore
return text
public void beforemarshall wireformat wireformat  throws ioexception
super beforemarshall wireformat
storecontent
@override
public void storecontent
try
bytesequence content   getcontent
if  content    null    text    null
bytearrayoutputstream bytesout   new bytearrayoutputstream
outputstream os   bytesout
activemqconnection connection   getconnection
if  connection    null    connection isusecompression
compressed   true
os   new deflateroutputstream os
dataoutputstream dataout   new dataoutputstream os
marshallingsupport writeutf8 dataout  this text
dataout close
setcontent bytesout tobytesequence
catch  ioexception e
throw new runtimeexception e
// see https://issues.apache.org/activemq/browse/amq-2103
// and https://issues.apache.org/activemq/browse/amq-2966
public void clearmarshalledstate   throws jmsexception
super clearmarshalledstate
this text   null
/**
* clears out the message body. clearing a message's body does not clear its
* header values or property entries. <p/>
* <p>
* if this message body was read-only, calling this method leaves the
* message body in the same state as an empty body in a newly created
* message.
*
* @throws jmsexception if the jms provider fails to clear the message body
*                 due to some internal error.
*/
public void clearbody   throws jmsexception
super clearbody
this text   null
public int getsize
if  size    0    content    null    text    null
size   getminimummessagesize
if  marshalledproperties    null
size    marshalledproperties getlength
size    text length     2
return super getsize
public string tostring
try
string text   gettext
if  text    null
text   marshallingsupport truncate64 text
hashmap<string  object> overridefields   new hashmap<string  object>
overridefields put    text
return super tostring overridefields
catch  jmsexception e
return super tostring