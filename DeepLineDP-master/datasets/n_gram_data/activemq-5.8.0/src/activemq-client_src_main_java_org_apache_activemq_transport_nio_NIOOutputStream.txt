/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq transport nio
import java io eofexception
import java io ioexception
import java io interruptedioexception
import java io outputstream
import java nio bytebuffer
import java nio channels writablebytechannel
import javax net ssl sslengine
import org apache activemq transport tcp timestampstream
/**
* an optimized buffered outputstream for tcp
*/
public class niooutputstream extends outputstream implements timestampstream
private static final int buffer_size   8192
private final writablebytechannel out
private final byte buffer
private final bytebuffer bytebuffer
private int count
private boolean closed
private volatile long writetimestamp    1   concurrent reads of this value
private sslengine engine
/**
* constructor
*
* @param out
*/
public niooutputstream writablebytechannel out
this out  buffer_size
/**
* creates a new buffered output stream to write data to the specified
* underlying output stream with the specified buffer size.
*
* @param out the underlying output stream.
* @param size the buffer size.
* @throws illegalargumentexception if size <= 0.
*/
public niooutputstream writablebytechannel out  int size
this out   out
if  size <  0
throw new illegalargumentexception
buffer   new byte
bytebuffer   bytebuffer wrap buffer
/**
* write a byte on to the stream
*
* @param b - byte to write
* @throws ioexception
*/
public void write int b  throws ioexception
checkclosed
if  availablebuffertowrite   < 1
flush
buffer    byte b
/**
* write a byte array to the stream
*
* @param b the byte buffer
* @param off the offset into the buffer
* @param len the length of data to write
* @throws ioexception
*/
public void write byte b  int off  int len  throws ioexception
checkclosed
if  availablebuffertowrite   < len
flush
if  buffer length >  len
system arraycopy b  off  buffer  count  len
count    len
else
write bytebuffer wrap b  off  len
/**
* flush the data to the output stream this doesn't call flush on the
* underlying outputstream, because tcp is particularly efficent at doing
* this itself ....
*
* @throws ioexception
*/
public void flush   throws ioexception
if  count > 0    out    null
bytebuffer position 0
bytebuffer limit count
write bytebuffer
count   0
/**
* close this stream
*
* @throws ioexception
*/
public void close   throws ioexception
super close
if  engine    null
engine closeoutbound
closed   true
/**
* checks that the stream has not been closed
*
* @throws ioexception
*/
protected void checkclosed   throws ioexception
if  closed
throw new eofexception
/**
* @return the amount free space in the buffer
*/
private int availablebuffertowrite
return buffer length   count
protected void write bytebuffer data  throws ioexception
bytebuffer plain
if  engine    null
plain   bytebuffer allocate engine getsession   getpacketbuffersize
plain clear
engine wrap data  plain
plain flip
else
plain   data
int remaining   plain remaining
int lastremaining   remaining   1
long delay   1
try
writetimestamp   system currenttimemillis
while  remaining > 0
// we may need to do a little bit of sleeping to avoid a busy loop.
// slow down if no data was written out..
if  remaining    lastremaining
try
// use exponential rollback to increase sleep time.
thread sleep delay
delay    2
if  delay > 1000
delay   1000
catch  interruptedexception e
throw new interruptedioexception
else
delay   1
lastremaining   remaining
// since the write is non-blocking, all the data may not have been
// written.
out write plain
remaining   data remaining
// if the data buffer was larger than the packet buffer we might need to
// wrap more packets until we reach the end of data, but only when plain
// has no more space since we are non-blocking and a write might not have
// written anything.
if  engine    null    data hasremaining       plain hasremaining
plain clear
engine wrap data  plain
plain flip
finally
writetimestamp    1
/* (non-javadoc)
* @see org.apache.activemq.transport.tcp.timestampstream#iswriting()
*/
public boolean iswriting
return writetimestamp > 0
/* (non-javadoc)
* @see org.apache.activemq.transport.tcp.timestampstream#getwritetimestamp()
*/
public long getwritetimestamp
return writetimestamp
public void setengine sslengine engine
this engine   engine