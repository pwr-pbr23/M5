/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq broker jmx
import java io file
import java util arraylist
import java util list
import java util map
import javax management objectname
import javax management openmbean compositedatasupport
import javax management openmbean compositetype
import javax management openmbean tabulardata
import javax management openmbean tabulardatasupport
import javax management openmbean tabulartype
import org apache activemq broker brokerservice
import org apache activemq broker scheduler jobschedulerstore
import org apache activemq store persistenceadapter
import org apache activemq usage systemusage
public class healthview implements healthviewmbean
managedregionbroker broker
string currentstate
public healthview managedregionbroker broker
this broker   broker
@override
public tabulardata health   throws exception
opentypesupport opentypefactory factory   opentypesupport getfactory healthstatus class
compositetype ct   factory getcompositetype
tabulartype tt   new tabulartype       ct  new string
tabulardatasupport rc   new tabulardatasupport tt
list<healthstatus> list   healthlist
for  healthstatus healthstatus   list
rc put new compositedatasupport ct  factory getfields healthstatus
return rc
@override
public list<healthstatus> healthlist   throws exception
list<healthstatus> answer   new arraylist<healthstatus>
map<objectname  destinationview> queueviews   broker getqueueviews
for  map entry<objectname  destinationview> entry   queueviews entryset
destinationview queue   entry getvalue
if  queue getconsumercount      0    queue getproducercount   > 0
objectname key   entry getkey
string message       queue getname
answer add new healthstatus       message  key tostring
/**
* check persistence store directory limits
*
*/
brokerservice brokerservice   broker getbrokerservice
if  brokerservice    null    brokerservice getpersistenceadapter      null
persistenceadapter adapter   brokerservice getpersistenceadapter
file dir   adapter getdirectory
if  brokerservice ispersistent
systemusage usage   brokerservice getsystemusage
if  dir    null    usage    null
string dirpath   dir getabsolutepath
if   dir isabsolute
dir   new file dirpath
while  dir    null     dir isdirectory
dir   dir getparentfile
long storesize   adapter size
long storelimit   usage getstoreusage   getlimit
long dirfreespace   dir getusablespace
if  storesize    0
int val    int    storesize   100    storelimit
if  val > 90
answer add new healthstatus           val      adapter tostring
if   storelimit   storesize  > dirfreespace
string message       storelimit    1024   1024
dir getabsolutepath
dirfreespace    1024   1024
answer add new healthstatus       message  adapter tostring
file tmpdir   brokerservice gettmpdatadirectory
if  tmpdir    null
string tmpdirpath   tmpdir getabsolutepath
if   tmpdir isabsolute
tmpdir   new file tmpdirpath
long storesize   usage gettempusage   getusage
long storelimit   usage gettempusage   getlimit
while  tmpdir    null     tmpdir isdirectory
tmpdir   tmpdir getparentfile
int val    int    storesize   100    storelimit
if  val > 90
answer add new healthstatus           val      adapter tostring
if  brokerservice    null    brokerservice getjobschedulerstore      null
jobschedulerstore scheduler   brokerservice getjobschedulerstore
file dir   scheduler getdirectory
if  brokerservice ispersistent
systemusage usage   brokerservice getsystemusage
if  dir    null    usage    null
string dirpath   dir getabsolutepath
if   dir isabsolute
dir   new file dirpath
while  dir    null     dir isdirectory
dir   dir getparentfile
long storesize   scheduler size
long storelimit   usage getjobschedulerusage   getlimit
long dirfreespace   dir getusablespace
if  storesize    0
int val    int    storesize   100    storelimit
if  val > 90
answer add new healthstatus           val      scheduler tostring
if   storelimit   storesize  > dirfreespace
string message       storelimit    1024   1024
dir getabsolutepath
dirfreespace    1024   1024
answer add new healthstatus       message  scheduler tostring
if  answer    null     answer isempty
this currentstate
for  healthstatus hs  answer
currentstate    hs
currentstate
else
this currentstate
return answer
/**
* @return string representation of the current broker state
*/
@override
public string getcurrentstatus
return this currentstate