/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq transport stomp
import java io bufferedreader
import java io ioexception
import java io inputstream
import java io inputstreamreader
import java io outputstreamwriter
import java io printwriter
import java util hashmap
import java util iterator
import java util map
import java util concurrent concurrenthashmap
import java util concurrent atomic atomicboolean
import javax jms jmsexception
import org apache activemq activemqprefetchpolicy
import org apache activemq broker brokercontext
import org apache activemq broker brokercontextaware
import org apache activemq command activemqdestination
import org apache activemq command activemqmessage
import org apache activemq command activemqtempqueue
import org apache activemq command activemqtemptopic
import org apache activemq command command
import org apache activemq command commandtypes
import org apache activemq command connectionerror
import org apache activemq command connectionid
import org apache activemq command connectioninfo
import org apache activemq command consumercontrol
import org apache activemq command consumerid
import org apache activemq command consumerinfo
import org apache activemq command destinationinfo
import org apache activemq command exceptionresponse
import org apache activemq command localtransactionid
import org apache activemq command messageack
import org apache activemq command messagedispatch
import org apache activemq command messageid
import org apache activemq command producerid
import org apache activemq command producerinfo
import org apache activemq command removesubscriptioninfo
import org apache activemq command response
import org apache activemq command sessionid
import org apache activemq command sessioninfo
import org apache activemq command shutdowninfo
import org apache activemq command transactionid
import org apache activemq command transactioninfo
import org apache activemq util bytearrayoutputstream
import org apache activemq util factoryfinder
import org apache activemq util ioexceptionsupport
import org apache activemq util idgenerator
import org apache activemq util introspectionsupport
import org apache activemq util longsequencegenerator
import org slf4j logger
import org slf4j loggerfactory
/**
* @author <a href="http://hiramchirino.com">chirino</a>
*/
public class protocolconverter
private static final logger log   loggerfactory getlogger protocolconverter class
private static final idgenerator connection_id_generator   new idgenerator
private static final string broker_version
private static final stompframe ping   new stompframe stomp commands keepalive
static
inputstream in   null
string version
if   in   protocolconverter class getresourceasstream        null
bufferedreader reader   new bufferedreader new inputstreamreader in
try
version   reader readline
catch exception e
broker_version   version
private final connectionid connectionid   new connectionid connection_id_generator generateid
private final sessionid sessionid   new sessionid connectionid   1
private final producerid producerid   new producerid sessionid  1
private final longsequencegenerator consumeridgenerator   new longsequencegenerator
private final longsequencegenerator messageidgenerator   new longsequencegenerator
private final longsequencegenerator transactionidgenerator   new longsequencegenerator
private final longsequencegenerator tempdestinationgenerator   new longsequencegenerator
private final concurrenthashmap<integer  responsehandler> resposehandlers   new concurrenthashmap<integer  responsehandler>
private final concurrenthashmap<consumerid  stompsubscription> subscriptionsbyconsumerid   new concurrenthashmap<consumerid  stompsubscription>
private final concurrenthashmap<string  stompsubscription> subscriptions   new concurrenthashmap<string  stompsubscription>
private final concurrenthashmap<string  activemqdestination> tempdestinations   new concurrenthashmap<string  activemqdestination>
private final concurrenthashmap<string  string> tempdestinationamqtostompmap   new concurrenthashmap<string  string>
private final map<string  localtransactionid> transactions   new concurrenthashmap<string  localtransactionid>
private final stomptransport stomptransport
private final concurrenthashmap<string  ackentry> pedingacks   new concurrenthashmap<string  ackentry>
private final idgenerator ack_id_generator   new idgenerator
private final object commnadidmutex   new object
private int lastcommandid
private final atomicboolean connected   new atomicboolean false
private final frametranslator frametranslator   new legacyframetranslator
private final factoryfinder frame_translator_finder   new factoryfinder
private final brokercontext brokercontext
private string version
private long hbreadinterval
private long hbwriteinterval
private string defaultheartbeat   stomp default_heart_beat
private static class ackentry
private string messageid
private stompsubscription subscription
public ackentry string messageid  stompsubscription subscription
this messageid   messageid
this subscription   subscription
public messageack onmessageack transactionid transactionid
return subscription onstompmessageack messageid  transactionid
public messageack onmessagenack transactionid transactionid  throws protocolexception
return subscription onstompmessagenack messageid  transactionid
public string getmessageid
return this messageid
public stompsubscription getsubscription
return this subscription
public protocolconverter stomptransport stomptransport  brokercontext brokercontext
this stomptransport   stomptransport
this brokercontext   brokercontext
protected int generatecommandid
synchronized  commnadidmutex
return lastcommandid
protected responsehandler createresponsehandler final stompframe command
final string receiptid   command getheaders   get stomp headers receipt_requested
if  receiptid    null
return new responsehandler
public void onresponse protocolconverter converter  response response  throws ioexception
if  response isexception
// generally a command can fail.. but that does not invalidate the connection.
// we report back the failure but we don't close the connection.
throwable exception     exceptionresponse response  getexception
handleexception exception  command
else
stompframe sc   new stompframe
sc setaction stomp responses receipt
sc setheaders new hashmap<string  string> 1
sc getheaders   put stomp headers response receipt_id  receiptid
stomptransport sendtostomp sc
return null
protected void sendtoactivemq command command  responsehandler handler
command setcommandid generatecommandid
if  handler    null
command setresponserequired true
resposehandlers put integer valueof command getcommandid     handler
stomptransport sendtoactivemq command
protected void sendtostomp stompframe command  throws ioexception
stomptransport sendtostomp command
protected frametranslator findtranslator string header
frametranslator translator   frametranslator
try
if  header    null
translator    frametranslator  frame_translator_finder
newinstance header
if  translator instanceof brokercontextaware
brokercontextaware translator  setbrokercontext brokercontext
catch  exception ignore
// if anything goes wrong use the default translator
return translator
/**
* convert a stomp command
*
* @param command
*/
public void onstompcommand stompframe command  throws ioexception  jmsexception
try
if  command getclass      stompframeerror class
throw   stompframeerror command  getexception
string action   command getaction
if  action startswith stomp commands send
onstompsend command
else if  action startswith stomp commands ack
onstompack command
else if  action startswith stomp commands nack
onstompnack command
else if  action startswith stomp commands begin
onstompbegin command
else if  action startswith stomp commands commit
onstompcommit command
else if  action startswith stomp commands abort
onstompabort command
else if  action startswith stomp commands subscribe
onstompsubscribe command
else if  action startswith stomp commands unsubscribe
onstompunsubscribe command
else if  action startswith stomp commands connect
action startswith stomp commands stomp
onstompconnect command
else if  action startswith stomp commands disconnect
onstompdisconnect command
else
throw new protocolexception     action
catch  protocolexception e
handleexception e  command
// some protocol errors can cause the connection to get closed.
if  e isfatal
getstomptransport   onexception e
protected void handleexception throwable exception  stompframe command  throws ioexception
log warn     command       exception tostring
if  log isdebugenabled
log debug    exception
// let the stomp client know about any protocol errors.
bytearrayoutputstream baos   new bytearrayoutputstream
printwriter stream   new printwriter new outputstreamwriter baos
exception printstacktrace stream
stream close
hashmap<string  string> headers   new hashmap<string  string>
headers put stomp headers error message  exception getmessage
headers put stomp headers content_type
if  command    null
final string receiptid   command getheaders   get stomp headers receipt_requested
if  receiptid    null
headers put stomp headers response receipt_id  receiptid
stompframe errormessage   new stompframe stomp responses error  headers  baos tobytearray
sendtostomp errormessage
protected void onstompsend stompframe command  throws ioexception  jmsexception
checkconnected
map<string  string> headers   command getheaders
string destination   headers get stomp headers send destination
if  destination    null
throw new protocolexception
string stomptx   headers get stomp headers transaction
headers remove
activemqmessage message   convertmessage command
message setproducerid producerid
messageid id   new messageid producerid  messageidgenerator getnextsequenceid
message setmessageid id
message setjmstimestamp system currenttimemillis
if  stomptx    null
transactionid activemqtx   transactions get stomptx
if  activemqtx    null
throw new protocolexception     stomptx
message settransactionid activemqtx
message onsend
sendtoactivemq message  createresponsehandler command
protected void onstompnack stompframe command  throws protocolexception
checkconnected
if  this version equals stomp v1_0
throw new protocolexception
map<string  string> headers   command getheaders
string subscriptionid   headers get stomp headers ack subscription
if  subscriptionid    null     this version equals stomp v1_2
throw new protocolexception
string messageid   headers get stomp headers ack message_id
if  messageid    null     this version equals stomp v1_2
throw new protocolexception
string ackid   headers get stomp headers ack ack_id
if  ackid    null    this version equals stomp v1_2
throw new protocolexception
transactionid activemqtx   null
string stomptx   headers get stomp headers transaction
if  stomptx    null
activemqtx   transactions get stomptx
if  activemqtx    null
throw new protocolexception     stomptx
boolean nacked   false
if  ackid    null
ackentry pendingack   this pedingacks get ackid
if  pendingack    null
messageid   pendingack getmessageid
messageack ack   pendingack onmessagenack activemqtx
if  ack    null
sendtoactivemq ack  createresponsehandler command
nacked   true
else if  subscriptionid    null
stompsubscription sub   this subscriptions get subscriptionid
if  sub    null
messageack ack   sub onstompmessagenack messageid  activemqtx
if  ack    null
sendtoactivemq ack  createresponsehandler command
nacked   true
if   nacked
throw new protocolexception     messageid
protected void onstompack stompframe command  throws protocolexception
checkconnected
map<string  string> headers   command getheaders
string messageid   headers get stomp headers ack message_id
if  messageid    null      this version equals stomp v1_2
throw new protocolexception
string subscriptionid   headers get stomp headers ack subscription
if  subscriptionid    null    this version equals stomp v1_1
throw new protocolexception
string ackid   headers get stomp headers ack ack_id
if  ackid    null    this version equals stomp v1_2
throw new protocolexception
transactionid activemqtx   null
string stomptx   headers get stomp headers transaction
if  stomptx    null
activemqtx   transactions get stomptx
if  activemqtx    null
throw new protocolexception     stomptx
boolean acked   false
if  ackid    null
ackentry pendingack   this pedingacks get ackid
if  pendingack    null
messageid   pendingack getmessageid
messageack ack   pendingack onmessageack activemqtx
if  ack    null
sendtoactivemq ack  createresponsehandler command
acked   true
else if  subscriptionid    null
stompsubscription sub   this subscriptions get subscriptionid
if  sub    null
messageack ack   sub onstompmessageack messageid  activemqtx
if  ack    null
sendtoactivemq ack  createresponsehandler command
acked   true
else
// stomp v1.0: acking with just a message id is very bogus since the same message id
// could have been sent to 2 different subscriptions on the same stomp connection.
// for example, when 2 subs are created on the same topic.
for  stompsubscription sub   subscriptionsbyconsumerid values
messageack ack   sub onstompmessageack messageid  activemqtx
if  ack    null
sendtoactivemq ack  createresponsehandler command
acked   true
break
if   acked
throw new protocolexception     messageid
protected void onstompbegin stompframe command  throws protocolexception
checkconnected
map<string  string> headers   command getheaders
string stomptx   headers get stomp headers transaction
if   headers containskey stomp headers transaction
throw new protocolexception
if  transactions get stomptx     null
throw new protocolexception     stomptx
localtransactionid activemqtx   new localtransactionid connectionid  transactionidgenerator getnextsequenceid
transactions put stomptx  activemqtx
transactioninfo tx   new transactioninfo
tx setconnectionid connectionid
tx settransactionid activemqtx
tx settype transactioninfo begin
sendtoactivemq tx  createresponsehandler command
protected void onstompcommit stompframe command  throws protocolexception
checkconnected
map<string  string> headers   command getheaders
string stomptx   headers get stomp headers transaction
if  stomptx    null
throw new protocolexception
transactionid activemqtx   transactions remove stomptx
if  activemqtx    null
throw new protocolexception     stomptx
for  stompsubscription sub   subscriptionsbyconsumerid values
sub onstompcommit activemqtx
transactioninfo tx   new transactioninfo
tx setconnectionid connectionid
tx settransactionid activemqtx
tx settype transactioninfo commit_one_phase
sendtoactivemq tx  createresponsehandler command
protected void onstompabort stompframe command  throws protocolexception
checkconnected
map<string  string> headers   command getheaders
string stomptx   headers get stomp headers transaction
if  stomptx    null
throw new protocolexception
transactionid activemqtx   transactions remove stomptx
if  activemqtx    null
throw new protocolexception     stomptx
for  stompsubscription sub   subscriptionsbyconsumerid values
try
sub onstompabort activemqtx
catch  exception e
throw new protocolexception    false  e
transactioninfo tx   new transactioninfo
tx setconnectionid connectionid
tx settransactionid activemqtx
tx settype transactioninfo rollback
sendtoactivemq tx  createresponsehandler command
protected void onstompsubscribe stompframe command  throws protocolexception
checkconnected
frametranslator translator   findtranslator command getheaders   get stomp headers transformation
map<string  string> headers   command getheaders
string subscriptionid   headers get stomp headers subscribe id
string destination   headers get stomp headers subscribe destination
if  this version equals stomp v1_1     subscriptionid    null
throw new protocolexception
final activemqdestination actualdest   translator convertdestination this  destination  true
if  actualdest    null
throw new protocolexception
final consumerid id   new consumerid sessionid  consumeridgenerator getnextsequenceid
consumerinfo consumerinfo   new consumerinfo id
consumerinfo setprefetchsize actualdest isqueue   ?
activemqprefetchpolicy default_queue_prefetch
headers containskey    ?
activemqprefetchpolicy default_durable_topic_prefetch   activemqprefetchpolicy default_topic_prefetch
consumerinfo setdispatchasync true
string browser   headers get stomp headers subscribe browser
if  browser    null    browser equals stomp true
if   this version equals stomp v1_1
throw new protocolexception
consumerinfo setbrowser true
consumerinfo setprefetchsize activemqprefetchpolicy default_queue_browser_prefetch
string selector   headers remove stomp headers subscribe selector
if  selector    null
consumerinfo setselector     selector
introspectionsupport setproperties consumerinfo  headers
if  actualdest isqueue      consumerinfo getsubscriptionname      null
throw new protocolexception
consumerinfo setdestination translator convertdestination this  destination  true
stompsubscription stompsubscription
if   consumerinfo isbrowser
stompsubscription   new stompsubscription this  subscriptionid  consumerinfo  headers get stomp headers transformation
else
stompsubscription   new stompqueuebrowsersubscription this  subscriptionid  consumerinfo  headers get stomp headers transformation
stompsubscription setdestination actualdest
string ackmode   headers get stomp headers subscribe ack_mode
if  stomp headers subscribe ackmodevalues client equals ackmode
stompsubscription setackmode stompsubscription client_ack
else if  stomp headers subscribe ackmodevalues individual equals ackmode
stompsubscription setackmode stompsubscription individual_ack
else
stompsubscription setackmode stompsubscription auto_ack
subscriptionsbyconsumerid put id  stompsubscription
// stomp v1.0 doesn't need to set this header so we avoid an npe if not set.
if  subscriptionid    null
subscriptions put subscriptionid  stompsubscription
final string receiptid   command getheaders   get stomp headers receipt_requested
if  receiptid    null    consumerinfo getprefetchsize   > 0
final stompframe cmd   command
final int prefetch   consumerinfo getprefetchsize
// since dispatch could beat the receipt we set prefetch to zero to start and then
// once we've sent our receipt we are safe to turn on dispatch if the response isn't
// an error message.
consumerinfo setprefetchsize 0
final responsehandler handler   new responsehandler
public void onresponse protocolconverter converter  response response  throws ioexception
if  response isexception
// generally a command can fail.. but that does not invalidate the connection.
// we report back the failure but we don't close the connection.
throwable exception     exceptionresponse response  getexception
handleexception exception  cmd
else
stompframe sc   new stompframe
sc setaction stomp responses receipt
sc setheaders new hashmap<string  string> 1
sc getheaders   put stomp headers response receipt_id  receiptid
stomptransport sendtostomp sc
consumercontrol control   new consumercontrol
control setprefetch prefetch
control setdestination actualdest
control setconsumerid id
sendtoactivemq control  null
sendtoactivemq consumerinfo  handler
else
sendtoactivemq consumerinfo  createresponsehandler command
protected void onstompunsubscribe stompframe command  throws protocolexception
checkconnected
map<string  string> headers   command getheaders
activemqdestination destination   null
object o   headers get stomp headers unsubscribe destination
if  o    null
destination   findtranslator command getheaders   get stomp headers transformation   convertdestination this   string o  true
string subscriptionid   headers get stomp headers unsubscribe id
if  this version equals stomp v1_1     subscriptionid    null
throw new protocolexception
if  subscriptionid    null    destination    null
throw new protocolexception
// check if it is a durable subscription
string durable   command getheaders   get
string clientid   durable
if  this version equals stomp v1_1
clientid   connectioninfo getclientid
if  durable    null
removesubscriptioninfo info   new removesubscriptioninfo
info setclientid clientid
info setsubscriptionname durable
info setconnectionid connectionid
sendtoactivemq info  createresponsehandler command
return
if  subscriptionid    null
stompsubscription sub   this subscriptions remove subscriptionid
if  sub    null
sendtoactivemq sub getconsumerinfo   createremovecommand    createresponsehandler command
return
else
// unsubscribing using a destination is a bit weird if multiple subscriptions
// are created with the same destination.
for  iterator<stompsubscription> iter   subscriptionsbyconsumerid values   iterator    iter hasnext
stompsubscription sub   iter next
if  destination    null    destination equals sub getdestination
sendtoactivemq sub getconsumerinfo   createremovecommand    createresponsehandler command
iter remove
return
throw new protocolexception
connectioninfo connectioninfo   new connectioninfo
protected void onstompconnect final stompframe command  throws protocolexception
if  connected get
throw new protocolexception
final map<string  string> headers   command getheaders
// allow anyone to login for now
string login   headers get stomp headers connect login
string passcode   headers get stomp headers connect passcode
string clientid   headers get stomp headers connect client_id
string heartbeat   headers get stomp headers connect heart_beat
if  heartbeat    null
heartbeat   defaultheartbeat
this version   stompcodec detectversion headers
configureinactivitymonitor heartbeat trim
introspectionsupport setproperties connectioninfo  headers
connectioninfo setconnectionid connectionid
if  clientid    null
connectioninfo setclientid clientid
else
connectioninfo setclientid     connectioninfo getconnectionid   tostring
connectioninfo setresponserequired true
connectioninfo setusername login
connectioninfo setpassword passcode
connectioninfo settransportcontext command gettransportcontext
sendtoactivemq connectioninfo  new responsehandler
public void onresponse protocolconverter converter  response response  throws ioexception
if  response isexception
// if the connection attempt fails we close the socket.
throwable exception     exceptionresponse response  getexception
handleexception exception  command
getstomptransport   onexception ioexceptionsupport create exception
return
final sessioninfo sessioninfo   new sessioninfo sessionid
sendtoactivemq sessioninfo  null
final producerinfo producerinfo   new producerinfo producerid
sendtoactivemq producerinfo  new responsehandler
public void onresponse protocolconverter converter  response response  throws ioexception
if  response isexception
// if the connection attempt fails we close the socket.
throwable exception     exceptionresponse response  getexception
handleexception exception  command
getstomptransport   onexception ioexceptionsupport create exception
connected set true
hashmap<string  string> responseheaders   new hashmap<string  string>
responseheaders put stomp headers connected session  connectioninfo getclientid
string requestid   headers get stomp headers connect request_id
if  requestid    null
// todo legacy
requestid   headers get stomp headers receipt_requested
if  requestid    null
// todo legacy
responseheaders put stomp headers connected response_id  requestid
responseheaders put stomp headers response receipt_id  requestid
responseheaders put stomp headers connected version  version
responseheaders put stomp headers connected heart_beat
string format    hbwriteinterval  hbreadinterval
responseheaders put stomp headers connected server    broker_version
stompframe sc   new stompframe
sc setaction stomp responses connected
sc setheaders responseheaders
sendtostomp sc
stompwireformat format   stomptransport getwireformat
if  format    null
format setstompversion version
protected void onstompdisconnect stompframe command  throws protocolexception
if  connected get
sendtoactivemq connectioninfo createremovecommand    createresponsehandler command
sendtoactivemq new shutdowninfo    createresponsehandler command
connected set false
protected void checkconnected   throws protocolexception
if   connected get
throw new protocolexception
/**
* dispatch a activemq command
*
* @param command
* @throws ioexception
*/
public void onactivemqcommand command command  throws ioexception  jmsexception
if  command isresponse
response response    response command
responsehandler rh   resposehandlers remove integer valueof response getcorrelationid
if  rh    null
rh onresponse this  response
else
// pass down any unexpected errors. should this close the connection?
if  response isexception
throwable exception     exceptionresponse response  getexception
handleexception exception  null
else if  command ismessagedispatch
messagedispatch md    messagedispatch command
stompsubscription sub   subscriptionsbyconsumerid get md getconsumerid
if  sub    null
string ackid   null
if  version equals stomp v1_2     sub getackmode      stomp headers subscribe ackmodevalues auto
ackentry pendingack   new ackentry md getmessage   getmessageid   tostring    sub
ackid   this ack_id_generator generateid
this pedingacks put ackid  pendingack
try
sub onmessagedispatch md  ackid
catch  exception ex
if  ackid    null
this pedingacks remove ackid
else if  command getdatastructuretype      commandtypes keep_alive_info
stomptransport sendtostomp ping
else if  command getdatastructuretype      connectionerror data_structure_type
// pass down any unexpected async errors. should this close the connection?
throwable exception     connectionerror command  getexception
handleexception exception  null
public activemqmessage convertmessage stompframe command  throws ioexception  jmsexception
activemqmessage msg   findtranslator command getheaders   get stomp headers transformation   convertframe this  command
return msg
public stompframe convertmessage activemqmessage message  boolean ignoretransformation  throws ioexception  jmsexception
if  ignoretransformation    true
return frametranslator convertmessage this  message
else
return findtranslator message getstringproperty stomp headers transformation   convertmessage this  message
public stomptransport getstomptransport
return stomptransport
public activemqdestination createtempdestination string name  boolean topic
activemqdestination rc   tempdestinations get name
if  rc    null
if  topic
rc   new activemqtemptopic connectionid  tempdestinationgenerator getnextsequenceid
else
rc   new activemqtempqueue connectionid  tempdestinationgenerator getnextsequenceid
sendtoactivemq new destinationinfo connectionid  destinationinfo add_operation_type  rc   null
tempdestinations put name  rc
tempdestinationamqtostompmap put rc getqualifiedname    name
return rc
public string getcreatedtempdestinationname activemqdestination destination
return tempdestinationamqtostompmap get destination getqualifiedname
public string getdefaultheartbeat
return defaultheartbeat
public void setdefaultheartbeat string defaultheartbeat
this defaultheartbeat   defaultheartbeat
protected void configureinactivitymonitor string heartbeatconfig  throws protocolexception
string keepaliveopts   heartbeatconfig split stomp comma
if  keepaliveopts    null    keepaliveopts length    2
throw new protocolexception     heartbeatconfig  true
else
try
hbreadinterval   long parselong keepaliveopts
hbwriteinterval   long parselong keepaliveopts
catch numberformatexception e
throw new protocolexception     heartbeatconfig  true
try
stompinactivitymonitor monitor   this stomptransport getinactivitymonitor
monitor setreadchecktime hbreadinterval
monitor setinitialdelaytime math min hbreadinterval  hbwriteinterval
monitor setwritechecktime hbwriteinterval
monitor startmonitoring
catch exception ex
hbreadinterval   0
hbwriteinterval   0
if  log isdebugenabled
log debug     hbreadinterval       hbwriteinterval
protected void sendreceipt stompframe command
final string receiptid   command getheaders   get stomp headers receipt_requested
if  receiptid    null
stompframe sc   new stompframe
sc setaction stomp responses receipt
sc setheaders new hashmap<string  string> 1
sc getheaders   put stomp headers response receipt_id  receiptid
try
sendtostomp sc
catch  ioexception e
log warn     command  e