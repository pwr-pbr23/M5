/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq broker
import org apache activemq store persistenceadapter
import org apache activemq util servicestopper
import org apache activemq util servicesupport
import org apache activemq util threadpoolutils
import org slf4j logger
import org slf4j loggerfactory
import java io ioexception
import java util concurrent scheduledfuture
import java util concurrent scheduledthreadpoolexecutor
import java util concurrent threadfactory
import java util concurrent timeunit
/**
* helper class for working with services that requires locking
*/
public abstract class lockableservicesupport extends servicesupport implements lockable  brokerserviceaware
private static final logger log   loggerfactory getlogger lockableservicesupport class
boolean uselock   true
locker locker
long lockkeepaliveperiod   0
private scheduledfuture<?> keepaliveticket
private scheduledthreadpoolexecutor clockdaemon
protected brokerservice brokerservice
/**
* initialize resources before locking
*
* @throws exception
*/
abstract public void init   throws exception
@override
public void setuselock boolean uselock
this uselock   uselock
@override
public void setlocker locker locker  throws ioexception
this locker   locker
if  this instanceof persistenceadapter
this locker configure  persistenceadapter this
public locker getlocker   throws ioexception
if  this locker    null
this locker   createdefaultlocker
return this locker
@override
public void setlockkeepaliveperiod long lockkeepaliveperiod
this lockkeepaliveperiod   lockkeepaliveperiod
@override
public void prestart   throws exception
init
if  uselock
if  getlocker      null
log warn
else
getlocker   start
if  lockkeepaliveperiod > 0
keepaliveticket   getscheduledthreadpoolexecutor   scheduleatfixedrate new runnable
public void run
keeplockalive
lockkeepaliveperiod  lockkeepaliveperiod  timeunit milliseconds
@override
public void poststop servicestopper stopper  throws exception
if  uselock
if  keepaliveticket    null
keepaliveticket cancel false
keepaliveticket   null
if  locker    null
getlocker   stop
threadpoolutils shutdown clockdaemon
protected void keeplockalive
boolean stop   false
try
locker locker   getlocker
if  locker    null
if   locker keepalive
stop   true
catch  ioexception e
log warn     e  e
if  stop
stopbroker
protected void stopbroker
// we can no longer keep the lock so lets fail
log info brokerservice getbrokername
try
brokerservice stop
catch  exception e
log warn
public scheduledthreadpoolexecutor getscheduledthreadpoolexecutor
if  clockdaemon    null
clockdaemon   new scheduledthreadpoolexecutor 5  new threadfactory
public thread newthread runnable runnable
thread thread   new thread runnable
thread setdaemon true
return thread
return clockdaemon
@override
public void setbrokerservice brokerservice brokerservice
this brokerservice   brokerservice