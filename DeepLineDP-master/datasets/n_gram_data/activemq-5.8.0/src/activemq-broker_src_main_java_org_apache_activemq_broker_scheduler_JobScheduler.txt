/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq broker scheduler
import java util list
import org apache activemq util bytesequence
public interface jobscheduler
/**
* @return the name of the scheduler
* @throws exception
*/
public abstract string getname   throws exception
/**
* add a job listener
* @param l
* @throws exception
*/
public abstract void addlistener joblistener l  throws exception
/**
* remove a joblistener
* @param l
* @throws exception
*/
public abstract void removelistener joblistener l  throws exception
/**
* add a job to be scheduled
* @param jobid a unique identifier for the job
* @param payload the message to be sent when the job is scheduled
* @param delay the time in milliseconds before the job will be run
* @throws exception
*/
public abstract void schedule string jobid  bytesequence payload long delay  throws exception
/**
* add a job to be scheduled
* @param jobid a unique identifier for the job
* @param payload the message to be sent when the job is scheduled
* @param cronentry - cron entry
* @throws exception
*/
public abstract void schedule string jobid  bytesequence payload string cronentry  throws exception
/**
* add a job to be scheduled
* @param jobid a unique identifier for the job
* @param payload the message to be sent when the job is scheduled
* @param cronentry - cron entry
* @param delay time in ms to wait before scheduling
* @param period the time in milliseconds between successive executions of the job
* @param repeat the number of times to execute the job - less than 0 will be repeated forever
* @throws exception
*/
public abstract void schedule string jobid  bytesequence payload string cronentry long delay  long period  int repeat  throws exception
/**
* remove all jobs scheduled to run at this time
* @param time
* @throws exception
*/
public abstract void remove long time  throws  exception
/**
* remove a job with the matching jobid
* @param jobid
* @throws exception
*/
public abstract void remove string jobid  throws  exception
/**
* remove all the jobs from the scheduler
* @throws exception
*/
public abstract void removealljobs   throws exception
/**
* remove all the jobs from the scheduler that are due between the start and finish times
* @param start time in milliseconds
* @param finish time in milliseconds
* @throws exception
*/
public abstract void removealljobs long start long finish  throws exception
/**
* get the next time jobs will be fired
* @return the time in milliseconds
* @throws exception
*/
public abstract long getnextscheduletime   throws exception
/**
* get all the jobs scheduled to run next
* @return a list of jobs that will be scheduled next
* @throws exception
*/
public abstract list<job> getnextschedulejobs   throws exception
/**
* get all the outstanding jobs
* @return a  list of all jobs
* @throws exception
*/
public abstract list<job> getalljobs   throws exception
/**
* get all outstanding jobs due to run between start and finish
* @param start
* @param finish
* @return a list of jobs
* @throws exception
*/
public abstract list<job> getalljobs long start long finish throws exception