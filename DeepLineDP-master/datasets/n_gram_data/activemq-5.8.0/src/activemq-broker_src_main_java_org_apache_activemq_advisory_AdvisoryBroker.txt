/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq advisory
import java util iterator
import java util map
import java util set
import java util concurrent concurrenthashmap
import org apache activemq broker broker
import org apache activemq broker brokerfilter
import org apache activemq broker connectioncontext
import org apache activemq broker producerbrokerexchange
import org apache activemq broker region destination
import org apache activemq broker region messagereference
import org apache activemq broker region subscription
import org apache activemq broker region topicsubscription
import org apache activemq command activemqdestination
import org apache activemq command activemqmessage
import org apache activemq command activemqtopic
import org apache activemq command brokerinfo
import org apache activemq command command
import org apache activemq command connectionid
import org apache activemq command connectioninfo
import org apache activemq command consumerid
import org apache activemq command consumerinfo
import org apache activemq command destinationinfo
import org apache activemq command message
import org apache activemq command messageid
import org apache activemq command producerid
import org apache activemq command producerinfo
import org apache activemq security securitycontext
import org apache activemq state producerstate
import org apache activemq usage usage
import org apache activemq util idgenerator
import org apache activemq util longsequencegenerator
import org slf4j logger
import org slf4j loggerfactory
/**
* this broker filter handles tracking the state of the broker for purposes of
* publishing advisory messages to advisory consumers.
*/
public class advisorybroker extends brokerfilter
private static final logger log   loggerfactory getlogger advisorybroker class
private static final idgenerator id_generator   new idgenerator
protected final concurrenthashmap<connectionid  connectioninfo> connections   new concurrenthashmap<connectionid  connectioninfo>
protected final concurrenthashmap<consumerid  consumerinfo> consumers   new concurrenthashmap<consumerid  consumerinfo>
protected final concurrenthashmap<producerid  producerinfo> producers   new concurrenthashmap<producerid  producerinfo>
protected final concurrenthashmap<activemqdestination  destinationinfo> destinations   new concurrenthashmap<activemqdestination  destinationinfo>
protected final concurrenthashmap<brokerinfo  activemqmessage> networkbridges   new concurrenthashmap<brokerinfo  activemqmessage>
protected final producerid advisoryproducerid   new producerid
private final longsequencegenerator messageidgenerator   new longsequencegenerator
public advisorybroker broker next
super next
advisoryproducerid setconnectionid id_generator generateid
@override
public void addconnection connectioncontext context  connectioninfo info  throws exception
super addconnection context  info
activemqtopic topic   advisorysupport getconnectionadvisorytopic
// do not distribute passwords in advisory messages. usernames okay
connectioninfo copy   info copy
copy setpassword
fireadvisory context  topic  copy
connections put copy getconnectionid    copy
@override
public subscription addconsumer connectioncontext context  consumerinfo info  throws exception
subscription answer   super addconsumer context  info
// don't advise advisory topics.
if   advisorysupport isadvisorytopic info getdestination
activemqtopic topic   advisorysupport getconsumeradvisorytopic info getdestination
consumers put info getconsumerid    info
fireconsumeradvisory context  info getdestination    topic  info
else
// we need to replay all the previously collected state objects
// for this newly added consumer.
if  advisorysupport isconnectionadvisorytopic info getdestination
// replay the connections.
for  iterator<connectioninfo> iter   connections values   iterator    iter hasnext
connectioninfo value   iter next
activemqtopic topic   advisorysupport getconnectionadvisorytopic
fireadvisory context  topic  value  info getconsumerid
// we check here whether the destination is temporary destination specific or not since we
// can avoid sending advisory messages to the consumer if it only wants temporary destination
// notifications.  if its not just temporary destination related destinations then we have
// to send them all, a composite destination could want both.
if  advisorysupport istempdestinationadvisorytopic info getdestination
// replay the temporary destinations.
for  destinationinfo destination   destinations values
if  destination getdestination   istemporary
activemqtopic topic   advisorysupport getdestinationadvisorytopic destination getdestination
fireadvisory context  topic  destination  info getconsumerid
else if  advisorysupport isdestinationadvisorytopic info getdestination
// replay all the destinations.
for  destinationinfo destination   destinations values
activemqtopic topic   advisorysupport getdestinationadvisorytopic destination getdestination
fireadvisory context  topic  destination  info getconsumerid
// replay the producers.
if  advisorysupport isproduceradvisorytopic info getdestination
for  iterator<producerinfo> iter   producers values   iterator    iter hasnext
producerinfo value   iter next
activemqtopic topic   advisorysupport getproduceradvisorytopic value getdestination
fireproduceradvisory context  value getdestination   topic  value  info getconsumerid
// replay the consumers.
if  advisorysupport isconsumeradvisorytopic info getdestination
for  iterator<consumerinfo> iter   consumers values   iterator    iter hasnext
consumerinfo value   iter next
activemqtopic topic   advisorysupport getconsumeradvisorytopic value getdestination
fireconsumeradvisory context value getdestination    topic  value  info getconsumerid
// replay network bridges
if  advisorysupport isnetworkbridgeadvisorytopic info getdestination
for  iterator<brokerinfo> iter   networkbridges keyset   iterator    iter hasnext
brokerinfo key   iter next
activemqtopic topic   advisorysupport getnetworkbridgeadvisorytopic
fireadvisory context  topic  key  null  networkbridges get key
return answer
@override
public void addproducer connectioncontext context  producerinfo info  throws exception
super addproducer context  info
// don't advise advisory topics.
if  info getdestination      null     advisorysupport isadvisorytopic info getdestination
activemqtopic topic   advisorysupport getproduceradvisorytopic info getdestination
fireproduceradvisory context  info getdestination    topic  info
producers put info getproducerid    info
@override
public destination adddestination connectioncontext context  activemqdestination destination boolean create  throws exception
destination answer   super adddestination context  destination create
if   advisorysupport isadvisorytopic destination
destinationinfo info   new destinationinfo context getconnectionid    destinationinfo add_operation_type  destination
destinationinfo previous   destinations putifabsent destination  info
if  previous  null
activemqtopic topic   advisorysupport getdestinationadvisorytopic destination
fireadvisory context  topic  info
return answer
@override
public void adddestinationinfo connectioncontext context  destinationinfo info  throws exception
activemqdestination destination   info getdestination
next adddestinationinfo context  info
if   advisorysupport isadvisorytopic destination
destinationinfo previous   destinations putifabsent destination  info
if  previous  null
activemqtopic topic   advisorysupport getdestinationadvisorytopic destination
fireadvisory context  topic  info
@override
public void removedestination connectioncontext context  activemqdestination destination  long timeout  throws exception
super removedestination context  destination  timeout
destinationinfo info   destinations remove destination
if  info    null
// ensure we don't modify (and loose/overwrite) an in-flight add advisory, so duplicate
info   info copy
info setdestination destination
info setoperationtype destinationinfo remove_operation_type
activemqtopic topic   advisorysupport getdestinationadvisorytopic destination
fireadvisory context  topic  info
activemqtopic advisorydestinations   advisorysupport getalldestinationadvisorytopics destination
for activemqtopic advisorydestination   advisorydestinations
try
next removedestination context  advisorydestination   1
catch  exception expectedifdestinationdidnotexistyet
@override
public void removedestinationinfo connectioncontext context  destinationinfo destinfo  throws exception
super removedestinationinfo context  destinfo
destinationinfo info   destinations remove destinfo getdestination
if  info    null
// ensure we don't modify (and loose/overwrite) an in-flight add advisory, so duplicate
info   info copy
info setdestination destinfo getdestination
info setoperationtype destinationinfo remove_operation_type
activemqtopic topic   advisorysupport getdestinationadvisorytopic destinfo getdestination
fireadvisory context  topic  info
activemqtopic advisorydestinations   advisorysupport getalldestinationadvisorytopics destinfo getdestination
for activemqtopic advisorydestination   advisorydestinations
try
next removedestination context  advisorydestination   1
catch  exception expectedifdestinationdidnotexistyet
@override
public void removeconnection connectioncontext context  connectioninfo info  throwable error  throws exception
super removeconnection context  info  error
activemqtopic topic   advisorysupport getconnectionadvisorytopic
fireadvisory context  topic  info createremovecommand
connections remove info getconnectionid
@override
public void removeconsumer connectioncontext context  consumerinfo info  throws exception
super removeconsumer context  info
// don't advise advisory topics.
activemqdestination dest   info getdestination
if   advisorysupport isadvisorytopic dest
activemqtopic topic   advisorysupport getconsumeradvisorytopic dest
consumers remove info getconsumerid
if   dest istemporary      destinations containskey dest
fireconsumeradvisory context dest  topic  info createremovecommand
@override
public void removeproducer connectioncontext context  producerinfo info  throws exception
super removeproducer context  info
// don't advise advisory topics.
activemqdestination dest   info getdestination
if  info getdestination      null     advisorysupport isadvisorytopic dest
activemqtopic topic   advisorysupport getproduceradvisorytopic dest
producers remove info getproducerid
if   dest istemporary      destinations contains dest
fireproduceradvisory context  dest topic  info createremovecommand
@override
public void messageexpired connectioncontext context  messagereference messagereference  subscription subscription
super messageexpired context  messagereference  subscription
try
if  messagereference isadvisory
activemqtopic topic   advisorysupport getexpiredmessagetopic messagereference getmessage   getdestination
message payload   messagereference getmessage   copy
payload clearbody
activemqmessage advisorymessage   new activemqmessage
advisorymessage setstringproperty advisorysupport msg_property_message_id  payload getmessageid   tostring
fireadvisory context  topic  payload  null  advisorymessage
catch  exception e
handlefirefailure    e
@override
public void messageconsumed connectioncontext context  messagereference messagereference
super messageconsumed context  messagereference
try
if  messagereference isadvisory
activemqtopic topic   advisorysupport getmessageconsumedadvisorytopic messagereference getmessage   getdestination
message payload   messagereference getmessage   copy
payload clearbody
fireadvisory context  topic payload
catch  exception e
handlefirefailure    e
@override
public void messagedelivered connectioncontext context  messagereference messagereference
super messagedelivered context  messagereference
try
if   messagereference isadvisory
activemqtopic topic   advisorysupport getmessagedeliveredadvisorytopic messagereference getmessage   getdestination
message payload   messagereference getmessage   copy
payload clearbody
fireadvisory context  topic payload
catch  exception e
handlefirefailure    e
@override
public void messagediscarded connectioncontext context  subscription sub  messagereference messagereference
super messagediscarded context  sub  messagereference
try
if   messagereference isadvisory
activemqtopic topic   advisorysupport getmessagediscardedadvisorytopic messagereference getmessage   getdestination
message payload   messagereference getmessage   copy
payload clearbody
activemqmessage advisorymessage   new activemqmessage
if  sub instanceof topicsubscription
advisorymessage setintproperty advisorysupport msg_property_discarded_count    topicsubscription sub  discarded
advisorymessage setstringproperty advisorysupport msg_property_consumer_id  sub getconsumerinfo   getconsumerid   tostring
fireadvisory context  topic  payload  null  advisorymessage
catch  exception e
handlefirefailure    e
@override
public void slowconsumer connectioncontext context  destination destination subscription subs
super slowconsumer context  destination subs
try
if   advisorysupport isadvisorytopic destination getactivemqdestination
activemqtopic topic   advisorysupport getslowconsumeradvisorytopic destination getactivemqdestination
activemqmessage advisorymessage   new activemqmessage
advisorymessage setstringproperty advisorysupport msg_property_consumer_id  subs getconsumerinfo   getconsumerid   tostring
fireadvisory context  topic  subs getconsumerinfo    null  advisorymessage
catch  exception e
handlefirefailure    e
@override
public void fastproducer connectioncontext context producerinfo producerinfo activemqdestination destination
super fastproducer context  producerinfo  destination
try
if   advisorysupport isadvisorytopic destination
activemqtopic topic   advisorysupport getfastproduceradvisorytopic destination
activemqmessage advisorymessage   new activemqmessage
advisorymessage setstringproperty advisorysupport msg_property_producer_id  producerinfo getproducerid   tostring
fireadvisory context  topic  producerinfo  null  advisorymessage
catch  exception e
handlefirefailure    e
@override
public void isfull connectioncontext context  destination destination  usage usage
super isfull context  destination  usage
if  advisorysupport isadvisorytopic destination getactivemqdestination       false
try
activemqtopic topic   advisorysupport getfulladvisorytopic destination getactivemqdestination
activemqmessage advisorymessage   new activemqmessage
advisorymessage setstringproperty advisorysupport msg_property_usage_name  usage getname
fireadvisory context  topic  null  null  advisorymessage
catch  exception e
handlefirefailure    e
@override
public void nowmasterbroker
super nowmasterbroker
try
activemqtopic topic   advisorysupport getmasterbrokeradvisorytopic
activemqmessage advisorymessage   new activemqmessage
connectioncontext context   new connectioncontext
context setsecuritycontext securitycontext broker_security_context
context setbroker getbrokerservice   getbroker
fireadvisory context  topic null null advisorymessage
catch  exception e
handlefirefailure    e
@override
public void sendtodeadletterqueue connectioncontext context  messagereference messagereference
subscription subscription
super sendtodeadletterqueue context  messagereference  subscription
try
if  messagereference isadvisory
activemqtopic topic   advisorysupport getmessagedlqdadvisorytopic messagereference getmessage   getdestination
message payload   messagereference getmessage   copy
payload clearbody
fireadvisory context  topic payload
catch  exception e
handlefirefailure    e
@override
public void networkbridgestarted brokerinfo brokerinfo  boolean createdbyduplex  string remoteip
try
if  brokerinfo    null
activemqmessage advisorymessage   new activemqmessage
advisorymessage setbooleanproperty    true
advisorymessage setbooleanproperty    createdbyduplex
advisorymessage setstringproperty    remoteip
networkbridges putifabsent brokerinfo  advisorymessage
activemqtopic topic   advisorysupport getnetworkbridgeadvisorytopic
connectioncontext context   new connectioncontext
context setsecuritycontext securitycontext broker_security_context
context setbroker getbrokerservice   getbroker
fireadvisory context  topic  brokerinfo  null  advisorymessage
catch  exception e
handlefirefailure    e
@override
public void networkbridgestopped brokerinfo brokerinfo
try
if  brokerinfo    null
activemqmessage advisorymessage   new activemqmessage
advisorymessage setbooleanproperty    false
networkbridges remove brokerinfo
activemqtopic topic   advisorysupport getnetworkbridgeadvisorytopic
connectioncontext context   new connectioncontext
context setsecuritycontext securitycontext broker_security_context
context setbroker getbrokerservice   getbroker
fireadvisory context  topic  brokerinfo  null  advisorymessage
catch  exception e
handlefirefailure    e
private void handlefirefailure string message  throwable cause
log warn      message       cause
if  log isdebugenabled
log debug message      cause
protected void fireadvisory connectioncontext context  activemqtopic topic  command command  throws exception
fireadvisory context  topic  command  null
protected void fireadvisory connectioncontext context  activemqtopic topic  command command  consumerid targetconsumerid  throws exception
activemqmessage advisorymessage   new activemqmessage
fireadvisory context  topic  command  targetconsumerid  advisorymessage
protected void fireconsumeradvisory connectioncontext context  activemqdestination consumerdestination activemqtopic topic  command command  throws exception
fireconsumeradvisory context  consumerdestination topic  command  null
protected void fireconsumeradvisory connectioncontext context  activemqdestination consumerdestination activemqtopic topic  command command  consumerid targetconsumerid  throws exception
activemqmessage advisorymessage   new activemqmessage
int count   0
set<destination>set   getdestinations consumerdestination
if  set    null
for  destination dest set
count    dest getdestinationstatistics   getconsumers   getcount
advisorymessage setintproperty advisorysupport msg_property_consumer_count  count
fireadvisory context  topic  command  targetconsumerid  advisorymessage
protected void fireproduceradvisory connectioncontext context activemqdestination producerdestination  activemqtopic topic  command command  throws exception
fireproduceradvisory context producerdestination  topic  command  null
protected void fireproduceradvisory connectioncontext context  activemqdestination producerdestination activemqtopic topic  command command  consumerid targetconsumerid  throws exception
activemqmessage advisorymessage   new activemqmessage
int count   0
if  producerdestination    null
set<destination> set   getdestinations producerdestination
if  set    null
for  destination dest   set
count    dest getdestinationstatistics   getproducers   getcount
advisorymessage setintproperty    count
fireadvisory context  topic  command  targetconsumerid  advisorymessage
public void fireadvisory connectioncontext context  activemqtopic topic  command command  consumerid targetconsumerid  activemqmessage advisorymessage  throws exception
if  getbrokerservice   isstarted
//set properties
advisorymessage setstringproperty advisorysupport msg_property_origin_broker_name  getbrokername
string id   getbrokerid      null ? getbrokerid   getvalue
advisorymessage setstringproperty advisorysupport msg_property_origin_broker_id  id
string url   getbrokerservice   getvmconnectoruri   tostring
if  getbrokerservice   getdefaultsocketuristring      null
url   getbrokerservice   getdefaultsocketuristring
advisorymessage setstringproperty advisorysupport msg_property_origin_broker_url  url
//set the data structure
advisorymessage setdatastructure command
advisorymessage setpersistent false
advisorymessage settype advisorysupport adivsory_message_type
advisorymessage setmessageid new messageid advisoryproducerid  messageidgenerator getnextsequenceid
advisorymessage settargetconsumerid targetconsumerid
advisorymessage setdestination topic
advisorymessage setresponserequired false
advisorymessage setproducerid advisoryproducerid
boolean originalflowcontrol   context isproducerflowcontrol
final producerbrokerexchange producerexchange   new producerbrokerexchange
producerexchange setconnectioncontext context
producerexchange setmutable true
producerexchange setproducerstate new producerstate new producerinfo
try
context setproducerflowcontrol false
next send producerexchange  advisorymessage
finally
context setproducerflowcontrol originalflowcontrol
public map<connectionid  connectioninfo> getadvisoryconnections
return connections
public map<consumerid  consumerinfo> getadvisoryconsumers
return consumers
public map<producerid  producerinfo> getadvisoryproducers
return producers
public map<activemqdestination  destinationinfo> getadvisorydestinations
return destinations