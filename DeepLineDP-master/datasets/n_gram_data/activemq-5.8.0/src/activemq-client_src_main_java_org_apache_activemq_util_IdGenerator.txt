/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq util
import java net serversocket
import java util concurrent atomic atomiclong
import org slf4j logger
import org slf4j loggerfactory
/**
* generator for globally unique strings.
*/
public class idgenerator
private static final logger log   loggerfactory getlogger idgenerator class
private static final string unique_stub
private static int instancecount
private static string hostname
private string seed
private atomiclong sequence   new atomiclong 1
private int length
static
string stub
boolean canaccesssystemprops   true
try
securitymanager sm   system getsecuritymanager
if  sm    null
sm checkpropertiesaccess
catch  securityexception se
canaccesssystemprops   false
if  canaccesssystemprops
try
hostname   inetaddressutil getlocalhostname
serversocket ss   new serversocket 0
stub       ss getlocalport         system currenttimemillis
thread sleep 100
ss close
catch  exception ioe
log warn    ioe
// fallback
if  hostname    null
hostname
if  stub length      0
stub       system currenttimemillis
unique_stub   stub
/**
* construct an idgenerator
*/
public idgenerator string prefix
synchronized  unique_stub
this seed   prefix   unique_stub    instancecount
this length   this seed length          long max_value  length
public idgenerator
this     hostname
/**
* as we have to find the hostname as a side-affect of generating a unique
* stub, we allow it's easy retrevial here
*
* @return the local host name
*/
public static string gethostname
return hostname
/**
* generate a unqiue id
*
* @return a unique id
*/
public synchronized string generateid
stringbuilder sb   new stringbuilder length
sb append seed
sb append sequence getandincrement
return sb tostring
/**
* generate a unique id - that is friendly for a url or file system
*
* @return a unique id
*/
public string generatesanitizedid
string result   generateid
result   result replace
result   result replace
result   result replace
return result
/**
* from a generated id - return the seed (i.e. minus the count)
*
* @param id the generated identifer
* @return the seed
*/
public static string getseedfromid string id
string result   id
if  id    null
int index   id lastindexof
if  index > 0     index   1  < id length
result   id substring 0  index
return result
/**
* from a generated id - return the generator count
*
* @param id
* @return the count
*/
public static long getsequencefromid string id
long result    1
if  id    null
int index   id lastindexof
if  index > 0     index   1  < id length
string numstr   id substring index   1  id length
result   long parselong numstr
return result
/**
* does a proper compare on the ids
*
* @param id1
* @param id2
* @return 0 if equal else a positive if id1 is > id2 ...
*/
public static int compare string id1  string id2
int result    1
string seed1   idgenerator getseedfromid id1
string seed2   idgenerator getseedfromid id2
if  seed1    null    seed2    null
result   seed1 compareto seed2
if  result    0
long count1   idgenerator getsequencefromid id1
long count2   idgenerator getsequencefromid id2
result    int  count1   count2
return result