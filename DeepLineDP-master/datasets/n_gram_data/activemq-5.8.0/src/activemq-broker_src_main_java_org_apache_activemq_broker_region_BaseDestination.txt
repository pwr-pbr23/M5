/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq broker region
import java io ioexception
import java util list
import javax jms resourceallocationexception
import org apache activemq advisory advisorysupport
import org apache activemq broker broker
import org apache activemq broker brokerservice
import org apache activemq broker connectioncontext
import org apache activemq broker producerbrokerexchange
import org apache activemq broker region policy deadletterstrategy
import org apache activemq broker region policy slowconsumerstrategy
import org apache activemq command activemqdestination
import org apache activemq command activemqtopic
import org apache activemq command message
import org apache activemq command messageack
import org apache activemq command messagedispatchnotification
import org apache activemq command producerinfo
import org apache activemq filter noncachedmessageevaluationcontext
import org apache activemq security securitycontext
import org apache activemq state producerstate
import org apache activemq store messagestore
import org apache activemq thread scheduler
import org apache activemq usage memoryusage
import org apache activemq usage systemusage
import org apache activemq usage usage
import org slf4j logger
/**
*
*/
public abstract class basedestination implements destination
/**
* the maximum number of messages to page in to the destination from
* persistent storage
*/
public static final int max_page_size   200
public static final int max_browse_page_size   max_page_size   2
public static final long expire_message_period   30   1000
public static final long default_inactive_timeout_before_gc   60   1000
public static final int max_producers_to_audit   64
public static final int max_audit_depth   2048
protected final activemqdestination destination
protected final broker broker
protected final messagestore store
protected systemusage systemusage
protected memoryusage memoryusage
private boolean producerflowcontrol   true
private boolean alwaysretroactive   false
protected boolean warnonproducerflowcontrol   true
protected long blockedproducerwarninginterval   default_blocked_producer_warning_interval
private int maxproducerstoaudit   1024
private int maxauditdepth   2048
private boolean enableaudit   true
private int maxpagesize   max_page_size
private int maxbrowsepagesize   max_browse_page_size
private boolean usecache   true
private int minimummessagesize   1024
private boolean lazydispatch   false
private boolean advisoryforslowconsumers
private boolean advisoryforfastproducers
private boolean advisoryfordiscardingmessages
private boolean advisorywhenfull
private boolean advisoryfordelivery
private boolean advisoryforconsumed
private boolean sendadvisoryifnoconsumers
protected final destinationstatistics destinationstatistics   new destinationstatistics
protected final brokerservice brokerservice
protected final broker regionbroker
protected deadletterstrategy deadletterstrategy   default_dead_letter_strategy
protected long expiremessagesperiod   expire_message_period
private int maxexpirepagesize   max_browse_page_size
protected int cursormemoryhighwatermark   70
protected int storeusagehighwatermark   100
private slowconsumerstrategy slowconsumerstrategy
private boolean prioritizedmessages
private long inactivetimoutbeforegc   default_inactive_timeout_before_gc
private boolean gcifinactive
private boolean gcwithnetworkconsumers
private long lastactivetime 0l
private boolean reducememoryfootprint   false
protected final scheduler scheduler
private boolean disposed   false
private boolean dooptimzemessagestorage   true
/*
* percentage of in-flight messages above which optimize message store is disabled
*/
private int optimizemessagestoreinflightlimit   10
/**
* @param brokerservice
* @param store
* @param destination
* @param parentstats
* @throws exception
*/
public basedestination brokerservice brokerservice  messagestore store  activemqdestination destination  destinationstatistics parentstats  throws exception
this brokerservice   brokerservice
this broker   brokerservice getbroker
this store   store
this destination   destination
// let's copy the enabled property from the parent destinationstatistics
this destinationstatistics setenabled parentstats isenabled
this destinationstatistics setparent parentstats
this systemusage   new systemusage brokerservice getproducersystemusage    destination tostring
this memoryusage   this systemusage getmemoryusage
this memoryusage setusageportion 1 0f
this regionbroker   brokerservice getregionbroker
this scheduler   brokerservice getbroker   getscheduler
/**
* initialize the destination
*
* @throws exception
*/
public void initialize   throws exception
// let the store know what usage manager we are using so that he can
// flush messages to disk when usage gets high.
if  store    null
store setmemoryusage this memoryusage
/**
* @return the producerflowcontrol
*/
public boolean isproducerflowcontrol
return producerflowcontrol
/**
* @param producerflowcontrol the producerflowcontrol to set
*/
public void setproducerflowcontrol boolean producerflowcontrol
this producerflowcontrol   producerflowcontrol
public boolean isalwaysretroactive
return alwaysretroactive
public void setalwaysretroactive boolean alwaysretroactive
this alwaysretroactive   alwaysretroactive
/**
* set's the interval at which warnings about producers being blocked by
* resource usage will be triggered. values of 0 or less will disable
* warnings
*
* @param blockedproducerwarninginterval the interval at which warning about
*            blocked producers will be triggered.
*/
public void setblockedproducerwarninginterval long blockedproducerwarninginterval
this blockedproducerwarninginterval   blockedproducerwarninginterval
/**
*
* @return the interval at which warning about blocked producers will be
*         triggered.
*/
public long getblockedproducerwarninginterval
return blockedproducerwarninginterval
/**
* @return the maxproducerstoaudit
*/
public int getmaxproducerstoaudit
return maxproducerstoaudit
/**
* @param maxproducerstoaudit the maxproducerstoaudit to set
*/
public void setmaxproducerstoaudit int maxproducerstoaudit
this maxproducerstoaudit   maxproducerstoaudit
/**
* @return the maxauditdepth
*/
public int getmaxauditdepth
return maxauditdepth
/**
* @param maxauditdepth the maxauditdepth to set
*/
public void setmaxauditdepth int maxauditdepth
this maxauditdepth   maxauditdepth
/**
* @return the enableaudit
*/
public boolean isenableaudit
return enableaudit
/**
* @param enableaudit the enableaudit to set
*/
public void setenableaudit boolean enableaudit
this enableaudit   enableaudit
public void addproducer connectioncontext context  producerinfo info  throws exception
destinationstatistics getproducers   increment
this lastactivetime 0l
public void removeproducer connectioncontext context  producerinfo info  throws exception
destinationstatistics getproducers   decrement
public void addsubscription connectioncontext context  subscription sub  throws exception
destinationstatistics getconsumers   increment
this lastactivetime 0l
public void removesubscription connectioncontext context  subscription sub  long lastdeliveredsequenceid  throws exception
destinationstatistics getconsumers   decrement
public final memoryusage getmemoryusage
return memoryusage
public void setmemoryusage memoryusage memoryusage
this memoryusage   memoryusage
public destinationstatistics getdestinationstatistics
return destinationstatistics
public activemqdestination getactivemqdestination
return destination
public final string getname
return getactivemqdestination   getphysicalname
public final messagestore getmessagestore
return store
public boolean isactive
boolean isactive   destinationstatistics getconsumers   getcount      0
destinationstatistics getproducers   getcount      0
if  isactive    isgcwithnetworkconsumers      destinationstatistics getconsumers   getcount      0
isactive   hasregularconsumers getconsumers
return isactive
public int getmaxpagesize
return maxpagesize
public void setmaxpagesize int maxpagesize
this maxpagesize   maxpagesize
public int getmaxbrowsepagesize
return this maxbrowsepagesize
public void setmaxbrowsepagesize int maxpagesize
this maxbrowsepagesize   maxpagesize
public int getmaxexpirepagesize
return this maxexpirepagesize
public void setmaxexpirepagesize int maxpagesize
this maxexpirepagesize   maxpagesize
public void setexpiremessagesperiod long expiremessagesperiod
this expiremessagesperiod   expiremessagesperiod
public long getexpiremessagesperiod
return expiremessagesperiod
public boolean isusecache
return usecache
public void setusecache boolean usecache
this usecache   usecache
public int getminimummessagesize
return minimummessagesize
public void setminimummessagesize int minimummessagesize
this minimummessagesize   minimummessagesize
public boolean islazydispatch
return lazydispatch
public void setlazydispatch boolean lazydispatch
this lazydispatch   lazydispatch
protected long getdestinationsequenceid
return regionbroker getbrokersequenceid
/**
* @return the advisoryforslowconsumers
*/
public boolean isadvisoryforslowconsumers
return advisoryforslowconsumers
/**
* @param advisoryforslowconsumers the advisoryforslowconsumers to set
*/
public void setadvisoryforslowconsumers boolean advisoryforslowconsumers
this advisoryforslowconsumers   advisoryforslowconsumers
/**
* @return the advisoryfordiscardingmessages
*/
public boolean isadvisoryfordiscardingmessages
return advisoryfordiscardingmessages
/**
* @param advisoryfordiscardingmessages the advisoryfordiscardingmessages to
*            set
*/
public void setadvisoryfordiscardingmessages boolean advisoryfordiscardingmessages
this advisoryfordiscardingmessages   advisoryfordiscardingmessages
/**
* @return the advisorywhenfull
*/
public boolean isadvisorywhenfull
return advisorywhenfull
/**
* @param advisorywhenfull the advisorywhenfull to set
*/
public void setadvisorywhenfull boolean advisorywhenfull
this advisorywhenfull   advisorywhenfull
/**
* @return the advisoryfordelivery
*/
public boolean isadvisoryfordelivery
return advisoryfordelivery
/**
* @param advisoryfordelivery the advisoryfordelivery to set
*/
public void setadvisoryfordelivery boolean advisoryfordelivery
this advisoryfordelivery   advisoryfordelivery
/**
* @return the advisoryforconsumed
*/
public boolean isadvisoryforconsumed
return advisoryforconsumed
/**
* @param advisoryforconsumed the advisoryforconsumed to set
*/
public void setadvisoryforconsumed boolean advisoryforconsumed
this advisoryforconsumed   advisoryforconsumed
/**
* @return the advisdoryforfastproducers
*/
public boolean isadvisoryforfastproducers
return advisoryforfastproducers
/**
* @param advisoryforfastproducers the advisdoryforfastproducers to set
*/
public void setadvisoryforfastproducers boolean advisoryforfastproducers
this advisoryforfastproducers   advisoryforfastproducers
public boolean issendadvisoryifnoconsumers
return sendadvisoryifnoconsumers
public void setsendadvisoryifnoconsumers boolean sendadvisoryifnoconsumers
this sendadvisoryifnoconsumers   sendadvisoryifnoconsumers
/**
* @return the dead letter strategy
*/
public deadletterstrategy getdeadletterstrategy
return deadletterstrategy
/**
* set the dead letter strategy
*
* @param deadletterstrategy
*/
public void setdeadletterstrategy deadletterstrategy deadletterstrategy
this deadletterstrategy   deadletterstrategy
public int getcursormemoryhighwatermark
return this cursormemoryhighwatermark
public void setcursormemoryhighwatermark int cursormemoryhighwatermark
this cursormemoryhighwatermark   cursormemoryhighwatermark
/**
* called when message is consumed
*
* @param context
* @param messagereference
*/
public void messageconsumed connectioncontext context  messagereference messagereference
if  advisoryforconsumed
broker messageconsumed context  messagereference
/**
* called when message is delivered to the broker
*
* @param context
* @param messagereference
*/
public void messagedelivered connectioncontext context  messagereference messagereference
if  advisoryfordelivery
broker messagedelivered context  messagereference
/**
* called when a message is discarded - e.g. running low on memory this will
* happen only if the policy is enabled - e.g. non durable topics
*
* @param context
* @param messagereference
*/
public void messagediscarded connectioncontext context  subscription sub  messagereference messagereference
if  advisoryfordiscardingmessages
broker messagediscarded context  sub  messagereference
/**
* called when there is a slow consumer
*
* @param context
* @param subs
*/
public void slowconsumer connectioncontext context  subscription subs
if  advisoryforslowconsumers
broker slowconsumer context  this  subs
if  slowconsumerstrategy    null
slowconsumerstrategy slowconsumer context  subs
/**
* called to notify a producer is too fast
*
* @param context
* @param producerinfo
*/
public void fastproducer connectioncontext context  producerinfo producerinfo
if  advisoryforfastproducers
broker fastproducer context  producerinfo  getactivemqdestination
/**
* called when a usage reaches a limit
*
* @param context
* @param usage
*/
public void isfull connectioncontext context  usage<?> usage
if  advisorywhenfull
broker isfull context  this  usage
public void dispose connectioncontext context  throws ioexception
if  this store    null
this store removeallmessages context
this store dispose context
this destinationstatistics setparent null
this memoryusage stop
this disposed   true
public boolean isdisposed
return this disposed
/**
* provides a hook to allow messages with no consumer to be processed in
* some way - such as to send to a dead letter queue or something..
*/
protected void onmessagewithnoconsumers connectioncontext context  message msg  throws exception
if   msg ispersistent
if  issendadvisoryifnoconsumers
// allow messages with no consumers to be dispatched to a dead
// letter queue
if  destination isqueue       advisorysupport isadvisorytopic destination
message message   msg copy
// the original destination and transaction id do not get
// filled when the message is first sent,
// it is only populated if the message is routed to another
// destination like the dlq
if  message getoriginaldestination      null
message setoriginaldestination message getdestination
if  message getoriginaltransactionid      null
message setoriginaltransactionid message gettransactionid
activemqtopic advisorytopic
if  destination isqueue
advisorytopic   advisorysupport getnoqueueconsumersadvisorytopic destination
else
advisorytopic   advisorysupport getnotopicconsumersadvisorytopic destination
message setdestination advisorytopic
message settransactionid null
// disable flow control for this since since we don't want
// to block.
boolean originalflowcontrol   context isproducerflowcontrol
try
context setproducerflowcontrol false
producerbrokerexchange producerexchange   new producerbrokerexchange
producerexchange setmutable false
producerexchange setconnectioncontext context
producerexchange setproducerstate new producerstate new producerinfo
context getbroker   send producerexchange  message
finally
context setproducerflowcontrol originalflowcontrol
public void processdispatchnotification messagedispatchnotification messagedispatchnotification  throws exception
public final int getstoreusagehighwatermark
return this storeusagehighwatermark
public void setstoreusagehighwatermark int storeusagehighwatermark
this storeusagehighwatermark   storeusagehighwatermark
protected final void waitforspace connectioncontext context  usage<?> usage  string warning  throws ioexception  interruptedexception  resourceallocationexception
waitforspace context  usage  100  warning
protected final void waitforspace connectioncontext context  usage<?> usage  int highwatermark  string warning  throws ioexception  interruptedexception  resourceallocationexception
if   context isnetworkconnection      systemusage issendfailifnospace
getlog   debug     usage       warning
throw new resourceallocationexception warning
if   context isnetworkconnection      systemusage getsendfailifnospaceaftertimeout      0
if   usage waitforspace systemusage getsendfailifnospaceaftertimeout    highwatermark
getlog   debug     usage       warning
throw new resourceallocationexception warning
else
long start   system currenttimemillis
long nextwarn   start
while   usage waitforspace 1000  highwatermark
if  context getstopping   get
throw new ioexception
long now   system currenttimemillis
if  now >  nextwarn
getlog   info     usage       warning        now   start    1000
nextwarn   now   blockedproducerwarninginterval
protected abstract logger getlog
public void setslowconsumerstrategy slowconsumerstrategy slowconsumerstrategy
this slowconsumerstrategy   slowconsumerstrategy
public slowconsumerstrategy getslowconsumerstrategy
return this slowconsumerstrategy
public boolean isprioritizedmessages
return this prioritizedmessages
public void setprioritizedmessages boolean prioritizedmessages
this prioritizedmessages   prioritizedmessages
if  store    null
store setprioritizedmessages prioritizedmessages
/**
* @return the inactivetimoutbeforegc
*/
public long getinactivetimoutbeforegc
return this inactivetimoutbeforegc
/**
* @param inactivetimoutbeforegc the inactivetimoutbeforegc to set
*/
public void setinactivetimoutbeforegc long inactivetimoutbeforegc
this inactivetimoutbeforegc   inactivetimoutbeforegc
/**
* @return the gcifinactive
*/
public boolean isgcifinactive
return this gcifinactive
/**
* @param gcifinactive the gcifinactive to set
*/
public void setgcifinactive boolean gcifinactive
this gcifinactive   gcifinactive
/**
* indicate if it is ok to gc destinations that have only network consumers
* @param gcwithnetworkconsumers
*/
public void setgcwithnetworkconsumers boolean gcwithnetworkconsumers
this gcwithnetworkconsumers   gcwithnetworkconsumers
public boolean isgcwithnetworkconsumers
return gcwithnetworkconsumers
public void markforgc long timestamp
if  isgcifinactive      this lastactivetime    0    isactive      false
destinationstatistics messages getcount      0    getinactivetimoutbeforegc   > 0l
this lastactivetime   timestamp
public boolean cangc
boolean result   false
if  isgcifinactive     this lastactivetime    0l
if   system currenttimemillis     this lastactivetime  >  getinactivetimoutbeforegc
result   true
return result
public void setreducememoryfootprint boolean reducememoryfootprint
this reducememoryfootprint   reducememoryfootprint
protected boolean isreducememoryfootprint
return this reducememoryfootprint
public boolean isdooptimzemessagestorage
return dooptimzemessagestorage
public void setdooptimzemessagestorage boolean dooptimzemessagestorage
this dooptimzemessagestorage   dooptimzemessagestorage
public int getoptimizemessagestoreinflightlimit
return optimizemessagestoreinflightlimit
public void setoptimizemessagestoreinflightlimit int optimizemessagestoreinflightlimit
this optimizemessagestoreinflightlimit   optimizemessagestoreinflightlimit
public abstract list<subscription> getconsumers
protected boolean hasregularconsumers list<subscription> consumers
boolean hasregularconsumers   false
for  subscription subscription  consumers
if   subscription getconsumerinfo   isnetworksubscription
hasregularconsumers   true
break
return hasregularconsumers
protected connectioncontext createconnectioncontext
connectioncontext answer   new connectioncontext new noncachedmessageevaluationcontext
answer setbroker this broker
answer getmessageevaluationcontext   setdestination getactivemqdestination
answer setsecuritycontext securitycontext broker_security_context
return answer
protected messageack converttononrangedack messageack ack  messagereference node
// the original ack may be a ranged ack, but we are trying to delete
// a specific
// message store here so we need to convert to a non ranged ack.
if  ack getmessagecount   > 0
// dup the ack
messageack a   new messageack
ack copy a
ack   a
// convert to non-ranged.
ack setfirstmessageid node getmessageid
ack setlastmessageid node getmessageid
ack setmessagecount 1
return ack