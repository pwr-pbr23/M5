/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq store jdbc
import java io ioexception
import java sql connection
import java sql preparedstatement
import java sql resultset
import java sql sqlexception
import java sql timestamp
import java util date
import java util concurrent timeunit
import javax sql datasource
import org apache activemq broker abstractlocker
import org apache activemq store persistenceadapter
import org apache activemq util ioexceptionsupport
import org apache activemq util servicestopper
import org slf4j logger
import org slf4j loggerfactory
/**
* represents an exclusive lease on a database to avoid multiple brokers running
* against the same logical database.
*
* @org.apache.xbean.xbean element="lease-database-locker"
*
*/
public class leasedatabaselocker extends abstractlocker
private static final logger log   loggerfactory getlogger leasedatabaselocker class
protected datasource datasource
protected statements statements
protected boolean stopping
protected int maxallowabledifffromdbtime   0
protected long difffromcurrenttime   long max_value
protected string leaseholderid
protected int querytimeout    1
jdbcpersistenceadapter persistenceadapter
public void configure persistenceadapter adapter  throws ioexception
if  adapter instanceof jdbcpersistenceadapter
this persistenceadapter    jdbcpersistenceadapter adapter
this datasource     jdbcpersistenceadapter  adapter  getlockdatasource
this statements     jdbcpersistenceadapter  adapter  getstatements
public void dostart   throws exception
stopping   false
log info getleaseholderid
string sql   statements getleaseobtainstatement
log debug getleaseholderid       sql
while   stopping
connection connection   null
preparedstatement statement   null
try
connection   getconnection
inittimediff connection
statement   connection preparestatement sql
setquerytimeout statement
final long now   system currenttimemillis     difffromcurrenttime
statement setstring 1  getleaseholderid
statement setlong 2  now   lockacquiresleepinterval
statement setlong 3  now
int result   statement executeupdate
if  result    1
// we got the lease, verify we still have it
if  keepalive
break
reportleasownershipandduration connection
catch  exception e
log debug getleaseholderid        e  e
finally
close statement
close connection
log info getleaseholderid         lockacquiresleepinterval
timeunit milliseconds sleep lockacquiresleepinterval
if  stopping
throw new runtimeexception getleaseholderid
log info getleaseholderid         datasource
private void setquerytimeout preparedstatement statement  throws sqlexception
if  querytimeout > 0
statement setquerytimeout querytimeout
private connection getconnection   throws sqlexception
return datasource getconnection
private void close connection connection
if  null    connection
try
connection close
catch  sqlexception e1
log debug getleaseholderid         e1  e1
private void close preparedstatement statement
if  null    statement
try
statement close
catch  sqlexception e1
log debug getleaseholderid         e1  e1
private void reportleasownershipandduration connection connection  throws sqlexception
preparedstatement statement   null
try
statement   connection preparestatement statements getleaseownerstatement
resultset resultset   statement executequery
while  resultset next
log info getleaseholderid         resultset getstring 1        new date resultset getlong 2
finally
close statement
protected long inittimediff connection connection  throws sqlexception
if  long max_value    difffromcurrenttime
if  maxallowabledifffromdbtime > 0
difffromcurrenttime   determinetimedifference connection
else
difffromcurrenttime   0l
return difffromcurrenttime
private long determinetimedifference connection connection  throws sqlexception
preparedstatement statement   connection preparestatement statements getcurrentdatetime
resultset resultset   statement executequery
long result   0l
if  resultset next
timestamp timestamp   resultset gettimestamp 1
long diff   system currenttimemillis     timestamp gettime
log info getleaseholderid         diff       timestamp
if  diff > maxallowabledifffromdbtime    diff <  maxallowabledifffromdbtime
// off by more than maxallowabledifffromdbtime so lets adjust
result   diff
return result
public void dostop servicestopper stopper  throws exception
releaselease
stopping   true
private void releaselease
connection connection   null
preparedstatement statement   null
try
connection   getconnection
statement   connection preparestatement statements getleaseupdatestatement
statement setstring 1  null
statement setlong 2  0l
statement setstring 3  getleaseholderid
if  statement executeupdate      1
log info getleaseholderid
catch  exception e
log error getleaseholderid         e  e
finally
close statement
close connection
@override
public boolean keepalive   throws ioexception
boolean result   false
final string sql   statements getleaseupdatestatement
log debug getleaseholderid         sql
connection connection   null
preparedstatement statement   null
try
connection   getconnection
inittimediff connection
statement   connection preparestatement sql
setquerytimeout statement
final long now   system currenttimemillis     difffromcurrenttime
statement setstring 1  getleaseholderid
statement setlong 2  now   lockacquiresleepinterval
statement setstring 3  getleaseholderid
result    statement executeupdate      1
catch  exception e
log warn getleaseholderid         e  e
ioexception ioe   ioexceptionsupport create e
persistenceadapter getbrokerservice   handleioexception ioe
throw ioe
finally
close statement
close connection
return result
public long getlockacquiresleepinterval
return lockacquiresleepinterval
public void setlockacquiresleepinterval long lockacquiresleepinterval
this lockacquiresleepinterval   lockacquiresleepinterval
public int getquerytimeout
return querytimeout
public void setquerytimeout int querytimeout
this querytimeout   querytimeout
public string getleaseholderid
if  leaseholderid    null
if  persistenceadapter getbrokerservice      null
leaseholderid   persistenceadapter getbrokerservice   getbrokername
return leaseholderid
public void setleaseholderid string leaseholderid
this leaseholderid   leaseholderid
public int getmaxallowabledifffromdbtime
return maxallowabledifffromdbtime
public void setmaxallowabledifffromdbtime int maxallowabledifffromdbtime
this maxallowabledifffromdbtime   maxallowabledifffromdbtime