/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq util
import java io file
import java io ioexception
import java io randomaccessfile
import java nio channels filelock
import java nio channels overlappingfilelockexception
import java util date
/**
* used to lock a file.
*
* @author chirino
*/
public class lockfile
private static final boolean disable_file_lock   boolean getboolean
final private file file
private filelock lock
private randomaccessfile readfile
private int lockcounter
private final boolean deleteonunlock
public lockfile file file  boolean deleteonunlock
this file   file
this deleteonunlock   deleteonunlock
/**
* @throws ioexception
*/
synchronized public void lock   throws ioexception
if  disable_file_lock
return
if  lockcounter > 0
return
iohelper mkdirs file getparentfile
synchronized  lockfile class
if  system getproperty getvmlockkey       null
throw new ioexception     file
system setproperty getvmlockkey    new date   tostring
try
if  lock    null
readfile   new randomaccessfile file
ioexception reason   null
try
lock   readfile getchannel   trylock 0  math max 1  readfile getchannel   size     false
catch  overlappingfilelockexception e
reason   ioexceptionsupport create     file      e
catch  ioexception ioe
reason   ioe
if  lock    null
lockcounter
system setproperty getvmlockkey    new date   tostring
else
// new read file for next attempt
closereadfile
if  reason    null
throw reason
throw new ioexception     file
finally
synchronized  lockfile class
if  lock    null
system getproperties   remove getvmlockkey
/**
*/
public void unlock
if  disable_file_lock
return
lockcounter
if  lockcounter    0
return
// release the lock..
if  lock    null
try
lock release
system getproperties   remove getvmlockkey
catch  throwable ignore
lock   null
closereadfile
if  deleteonunlock
file delete
private string getvmlockkey   throws ioexception
return getclass   getname         file getcanonicalpath
private void closereadfile
// close the file.
if  readfile    null
try
readfile close
catch  throwable ignore
readfile   null