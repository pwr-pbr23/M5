/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq store kahadb
import java io datainputstream
import java io ioexception
import java util arraylist
import java util iterator
import java util list
import java util map
import java util concurrent cancellationexception
import java util concurrent concurrenthashmap
import java util concurrent executionexception
import java util concurrent future
import org apache activemq broker connectioncontext
import org apache activemq command message
import org apache activemq command messageack
import org apache activemq command messageid
import org apache activemq command transactionid
import org apache activemq command xatransactionid
import org apache activemq openwire openwireformat
import org apache activemq protobuf buffer
import org apache activemq store abstractmessagestore
import org apache activemq store messagestore
import org apache activemq store proxymessagestore
import org apache activemq store proxytopicmessagestore
import org apache activemq store topicmessagestore
import org apache activemq store transactionrecoverylistener
import org apache activemq store transactionstore
import org apache activemq store kahadb messagedatabase addopperation
import org apache activemq store kahadb messagedatabase operation
import org apache activemq store kahadb messagedatabase removeopperation
import org apache activemq store kahadb data kahacommitcommand
import org apache activemq store kahadb data kahapreparecommand
import org apache activemq store kahadb data kaharollbackcommand
import org apache activemq store kahadb data kahatransactioninfo
import org apache activemq wireformat wireformat
import org slf4j logger
import org slf4j loggerfactory
/**
* provides a transactionstore implementation that can create transaction aware
* messagestore objects from non transaction aware messagestore objects.
*
*
*/
public class kahadbtransactionstore implements transactionstore
static final logger log   loggerfactory getlogger kahadbtransactionstore class
concurrenthashmap<object  tx> inflighttransactions   new concurrenthashmap<object  tx>
private final wireformat wireformat   new openwireformat
private final kahadbstore thestore
public kahadbtransactionstore kahadbstore thestore
this thestore   thestore
public class tx
private final arraylist<addmessagecommand> messages   new arraylist<addmessagecommand>
private final arraylist<removemessagecommand> acks   new arraylist<removemessagecommand>
public void add addmessagecommand msg
messages add msg
public void add removemessagecommand ack
acks add ack
public message getmessages
message rc   new message
int count   0
for  iterator<addmessagecommand> iter   messages iterator    iter hasnext
addmessagecommand cmd   iter next
rc   cmd getmessage
return rc
public messageack getacks
messageack rc   new messageack
int count   0
for  iterator<removemessagecommand> iter   acks iterator    iter hasnext
removemessagecommand cmd   iter next
rc   cmd getmessageack
return rc
/**
* @return true if something to commit
* @throws ioexception
*/
public list<future<object>> commit   throws ioexception
list<future<object>> results   new arraylist<future<object>>
// do all the message adds.
for  iterator<addmessagecommand> iter   messages iterator    iter hasnext
addmessagecommand cmd   iter next
results add cmd run
// and removes..
for  iterator<removemessagecommand> iter   acks iterator    iter hasnext
removemessagecommand cmd   iter next
cmd run
results add cmd run
return results
public abstract class addmessagecommand
private final connectioncontext ctx
addmessagecommand connectioncontext ctx
this ctx   ctx
abstract message getmessage
future<object> run   throws ioexception
return run this ctx
abstract future<object> run connectioncontext ctx  throws ioexception
public abstract class removemessagecommand
private final connectioncontext ctx
removemessagecommand connectioncontext ctx
this ctx   ctx
abstract messageack getmessageack
future<object> run   throws ioexception
return run this ctx
abstract future<object> run connectioncontext context  throws ioexception
public messagestore proxy messagestore messagestore
return new proxymessagestore messagestore
@override
public void addmessage connectioncontext context  final message send  throws ioexception
kahadbtransactionstore this addmessage context  getdelegate    send
@override
public void addmessage connectioncontext context  final message send  boolean canoptimize  throws ioexception
kahadbtransactionstore this addmessage context  getdelegate    send
@override
public future<object> asyncaddqueuemessage connectioncontext context  message message  throws ioexception
return kahadbtransactionstore this asyncaddqueuemessage context  getdelegate    message
@override
public future<object> asyncaddqueuemessage connectioncontext context  message message  boolean canoptimize  throws ioexception
return kahadbtransactionstore this asyncaddqueuemessage context  getdelegate    message
@override
public void removemessage connectioncontext context  final messageack ack  throws ioexception
kahadbtransactionstore this removemessage context  getdelegate    ack
@override
public void removeasyncmessage connectioncontext context  messageack ack  throws ioexception
kahadbtransactionstore this removeasyncmessage context  getdelegate    ack
public topicmessagestore proxy topicmessagestore messagestore
return new proxytopicmessagestore messagestore
@override
public void addmessage connectioncontext context  final message send  throws ioexception
kahadbtransactionstore this addmessage context  getdelegate    send
@override
public void addmessage connectioncontext context  final message send  boolean canoptimize  throws ioexception
kahadbtransactionstore this addmessage context  getdelegate    send
@override
public future<object> asyncaddtopicmessage connectioncontext context  message message  throws ioexception
return kahadbtransactionstore this asyncaddtopicmessage context  getdelegate    message
@override
public future<object> asyncaddtopicmessage connectioncontext context  message message  boolean canoptimize  throws ioexception
return kahadbtransactionstore this asyncaddtopicmessage context  getdelegate    message
@override
public void removemessage connectioncontext context  final messageack ack  throws ioexception
kahadbtransactionstore this removemessage context  getdelegate    ack
@override
public void removeasyncmessage connectioncontext context  messageack ack  throws ioexception
kahadbtransactionstore this removeasyncmessage context  getdelegate    ack
@override
public void acknowledge connectioncontext context  string clientid  string subscriptionname
messageid messageid  messageack ack  throws ioexception
kahadbtransactionstore this acknowledge context   topicmessagestore getdelegate    clientid
subscriptionname  messageid  ack
/**
* @throws ioexception
* @see org.apache.activemq.store.transactionstore#prepare(transactionid)
*/
public void prepare transactionid txid  throws ioexception
kahatransactioninfo info   gettransactioninfo txid
if  txid isxatransaction      thestore isconcurrentstoreanddispatchtransactions      false
thestore store new kahapreparecommand   settransactioninfo info   true  null  null
else
tx tx   inflighttransactions remove txid
if  tx    null
thestore store new kahapreparecommand   settransactioninfo info   true  null  null
public tx gettx object txid
tx tx   inflighttransactions get txid
if  tx    null
tx   new tx
inflighttransactions put txid  tx
return tx
public void commit transactionid txid  boolean wasprepared  runnable precommit  runnable postcommit
throws ioexception
if  txid    null
if   txid isxatransaction      thestore isconcurrentstoreanddispatchtransactions
if  precommit    null
precommit run
tx tx   inflighttransactions remove txid
if  tx    null
list<future<object>> results   tx commit
boolean donesomething   false
for  future<object> result   results
try
result get
catch  interruptedexception e
thestore brokerservice handleioexception new ioexception e getmessage
catch  executionexception e
thestore brokerservice handleioexception new ioexception e getmessage
catch cancellationexception e
if   result iscancelled
donesomething   true
if  postcommit    null
postcommit run
if  donesomething
kahatransactioninfo info   gettransactioninfo txid
thestore store new kahacommitcommand   settransactioninfo info   true  null  null
else
//the tx will be null for failed over clients - lets run their post commits
if  postcommit    null
postcommit run
else
kahatransactioninfo info   gettransactioninfo txid
thestore store new kahacommitcommand   settransactioninfo info   true  precommit  postcommit
forgetrecoveredacks txid
else
log error
/**
* @throws ioexception
* @see org.apache.activemq.store.transactionstore#rollback(transactionid)
*/
public void rollback transactionid txid  throws ioexception
if  txid isxatransaction      thestore isconcurrentstoreanddispatchtransactions      false
kahatransactioninfo info   gettransactioninfo txid
thestore store new kaharollbackcommand   settransactioninfo info   false  null  null
forgetrecoveredacks txid
else
inflighttransactions remove txid
protected void forgetrecoveredacks transactionid txid  throws ioexception
if  txid isxatransaction
xatransactionid xatid     xatransactionid  txid
thestore forgetrecoveredacks xatid getpreparedacks
public void start   throws exception
public void stop   throws exception
public synchronized void recover transactionrecoverylistener listener  throws ioexception
for  map entry<transactionid  list<operation>> entry   thestore preparedtransactions entryset
xatransactionid xid    xatransactionid  entry getkey
arraylist<message> messagelist   new arraylist<message>
arraylist<messageack> acklist   new arraylist<messageack>
for  operation op   entry getvalue
if  op getclass      addopperation class
addopperation addop    addopperation  op
message msg    message  wireformat unmarshal new datainputstream addop getcommand   getmessage
newinput
messagelist add msg
else
removeopperation rmop    removeopperation  op
buffer ackb   rmop getcommand   getack
messageack ack    messageack  wireformat unmarshal new datainputstream ackb newinput
acklist add ack
message addedmessages   new message
messageack acks   new messageack
messagelist toarray addedmessages
acklist toarray acks
xid setpreparedacks acklist
thestore trackrecoveredacks acklist
listener recover xid  addedmessages  acks
/**
* @param message
* @throws ioexception
*/
void addmessage connectioncontext context  final messagestore destination  final message message
throws ioexception
if  message gettransactionid      null
if  message gettransactionid   isxatransaction      thestore isconcurrentstoreanddispatchtransactions      false
destination addmessage context  message
else
tx tx   gettx message gettransactionid
tx add new addmessagecommand context
@override
public message getmessage
return message
@override
public future<object> run connectioncontext ctx  throws ioexception
destination addmessage ctx  message
return abstractmessagestore future
else
destination addmessage context  message
future<object> asyncaddqueuemessage connectioncontext context  final messagestore destination  final message message
throws ioexception
if  message gettransactionid      null
if  message gettransactionid   isxatransaction      thestore isconcurrentstoreanddispatchtransactions      false
destination addmessage context  message
return abstractmessagestore future
else
tx tx   gettx message gettransactionid
tx add new addmessagecommand context
@override
public message getmessage
return message
@override
public future<object> run connectioncontext ctx  throws ioexception
return destination asyncaddqueuemessage ctx  message
return abstractmessagestore future
else
return destination asyncaddqueuemessage context  message
future<object> asyncaddtopicmessage connectioncontext context  final messagestore destination  final message message
throws ioexception
if  message gettransactionid      null
if  message gettransactionid   isxatransaction      thestore isconcurrentstoreanddispatchtransactions    false
destination addmessage context  message
return abstractmessagestore future
else
tx tx   gettx message gettransactionid
tx add new addmessagecommand context
@override
public message getmessage
return message
@override
public future<object> run connectioncontext ctx  throws ioexception
return destination asyncaddtopicmessage ctx  message
return abstractmessagestore future
else
return destination asyncaddtopicmessage context  message
/**
* @param ack
* @throws ioexception
*/
final void removemessage connectioncontext context  final messagestore destination  final messageack ack
throws ioexception
if  ack isintransaction
if  ack gettransactionid   isxatransaction      thestore isconcurrentstoreanddispatchtransactions     false
destination removemessage context  ack
else
tx tx   gettx ack gettransactionid
tx add new removemessagecommand context
@override
public messageack getmessageack
return ack
@override
public future<object> run connectioncontext ctx  throws ioexception
destination removemessage ctx  ack
return abstractmessagestore future
else
destination removemessage context  ack
final void removeasyncmessage connectioncontext context  final messagestore destination  final messageack ack
throws ioexception
if  ack isintransaction
if  ack gettransactionid   isxatransaction      thestore isconcurrentstoreanddispatchtransactions    false
destination removeasyncmessage context  ack
else
tx tx   gettx ack gettransactionid
tx add new removemessagecommand context
@override
public messageack getmessageack
return ack
@override
public future<object> run connectioncontext ctx  throws ioexception
destination removemessage ctx  ack
return abstractmessagestore future
else
destination removeasyncmessage context  ack
final void acknowledge connectioncontext context  final topicmessagestore destination  final string clientid  final string subscriptionname
final messageid messageid  final messageack ack  throws ioexception
if  ack isintransaction
if  ack gettransactionid   isxatransaction      thestore isconcurrentstoreanddispatchtransactions     false
destination acknowledge context  clientid  subscriptionname  messageid  ack
else
tx tx   gettx ack gettransactionid
tx add new removemessagecommand context
public messageack getmessageack
return ack
public future<object> run connectioncontext ctx  throws ioexception
destination acknowledge ctx  clientid  subscriptionname  messageid  ack
return abstractmessagestore future
else
destination acknowledge context  clientid  subscriptionname  messageid  ack
private kahatransactioninfo gettransactioninfo transactionid txid
return thestore gettransactionidtransformer   transform txid