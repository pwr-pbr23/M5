/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq broker scheduler
import java util arraylist
import java util calendar
import java util collections
import java util list
import java util stringtokenizer
import javax jms messageformatexception
public class cronparser
private static final int number_tokens   5
private static final int minutes   0
private static final int hours   1
private static final int day_of_month   2
private static final int month   3
private static final int day_of_week   4
public static long getnextscheduledtime final string cronentry  long currenttime  throws messageformatexception
long result   0
if  cronentry    null    cronentry length      0
return result
// handle the once per minute case "* * * * *"
// starting the next event at the top of the minute.
if  cronentry startswith
result   currenttime   60   1000
result   result   1000   1000
return result
list<string> list   tokenize cronentry
list<cronentry> entries   buildcronentries list
calendar working   calendar getinstance
working settimeinmillis currenttime
working set calendar second  0
cronentry minutes   entries get minutes
cronentry hours   entries get hours
cronentry dayofmonth   entries get day_of_month
cronentry month   entries get month
cronentry dayofweek   entries get day_of_week
// start at the top of the next minute, cron is only guaranteed to be
// run on the minute.
int timetonextminute   60   working get calendar second
working add calendar second  timetonextminute
// if its already to late in the day this will roll us over to tomorrow
// so we'll need to check again when done updating month and day.
int currentminutes   working get calendar minute
if   iscurrent minutes  currentminutes
int nextminutes   getnext minutes  currentminutes
working add calendar minute  nextminutes
int currenthours   working get calendar hour_of_day
if   iscurrent hours  currenthours
int nexthour   getnext hours  currenthours
working add calendar hour_of_day  nexthour
// we can roll into the next month here which might violate the cron setting
// rules so we check once then recheck again after applying the month settings.
doupdatecurrentday working  dayofmonth  dayofweek
// start by checking if we are in the right month, if not then calculations
// need to start from the beginning of the month to ensure that we don't end
// up on the wrong day.  (can happen when day_of_week is set and current time
// is ahead of the day of the week to execute on).
doupdatecurrentmonth working  month
// now check day of week and day of month together since they can be specified
// together in one entry, if both "day of month" and "day of week" are restricted
// (not "*"), then either the "day of month" field (3) or the "day of week" field
// (5) must match the current day or the calenday must be advanced.
doupdatecurrentday working  dayofmonth  dayofweek
// now we can chose the correct hour and minute of the day in question.
currenthours   working get calendar hour_of_day
if   iscurrent hours  currenthours
int nexthour   getnext hours  currenthours
working add calendar hour_of_day  nexthour
currentminutes   working get calendar minute
if   iscurrent minutes  currentminutes
int nextminutes   getnext minutes  currentminutes
working add calendar minute  nextminutes
result   working gettimeinmillis
if  result <  currenttime
throw new arithmeticexception
return result
protected static long doupdatecurrentmonth calendar working  cronentry month  throws messageformatexception
int currentmonth   working get calendar month    1
if   iscurrent month  currentmonth
int nextmonth   getnext month  currentmonth
working add calendar month  nextmonth
// reset to start of month.
resettostartofday working  1
return working gettimeinmillis
return 0l
protected static long doupdatecurrentday calendar working  cronentry dayofmonth  cronentry dayofweek  throws messageformatexception
int currentdayofweek   working get calendar day_of_week    1
int currentdayofmonth   working get calendar day_of_month
// simplest case, both are unrestricted or both match today otherwise
// result must be the closer of the two if both are set, or the next
// match to the one that is.
if   iscurrent dayofweek  currentdayofweek
iscurrent dayofmonth  currentdayofmonth
int nextweekday   integer max_value
int nextcalendarday   integer max_value
if   iscurrent dayofweek  currentdayofweek
nextweekday   getnext dayofweek  currentdayofweek
if   iscurrent dayofmonth  currentdayofmonth
nextcalendarday   getnext dayofmonth  currentdayofmonth
if  nextweekday < nextcalendarday
working add calendar day_of_week  nextweekday
else
working add calendar day_of_month  nextcalendarday
// since the day changed, we restart the clock at the start of the day
// so that the next time will either be at 12am + value of hours and
// minutes pattern.
resettostartofday working  working get calendar day_of_month
return working gettimeinmillis
return 0l
public static void validate final string cronentry  throws messageformatexception
list<string> list   tokenize cronentry
list<cronentry> entries   buildcronentries list
for  cronentry e   entries
validate e
static void validate final cronentry entry  throws messageformatexception
list<integer> list   entry currentwhen
if  list isempty      list get 0  intvalue   < entry start    list get list size     1  intvalue   > entry end
throw new messageformatexception     entry
static int getnext final cronentry entry  final int current  throws messageformatexception
int result   0
if  entry currentwhen    null
entry currentwhen   calculatevalues entry
list<integer> list   entry currentwhen
int next    1
for  integer i   list
if  i intvalue   > current
next   i intvalue
break
if  next     1
result   next   current
else
int first   list get 0  intvalue
result   entry end   first   entry start   current
// account for difference of one vs zero based indices.
if  entry name equals       entry name equals
result
return result
static boolean iscurrent final cronentry entry  final int current  throws messageformatexception
boolean result   entry currentwhen contains new integer current
return result
protected static void resettostartofday calendar target  int day
target set calendar day_of_month  day
target set calendar hour_of_day  0
target set calendar minute  0
target set calendar second  0
static list<string> tokenize string cron  throws illegalargumentexception
stringtokenizer tokenize   new stringtokenizer cron
list<string> result   new arraylist<string>
while  tokenize hasmoretokens
result add tokenize nexttoken
if  result size      number_tokens
throw new illegalargumentexception     result size
cron
return result
protected static list<integer> calculatevalues final cronentry entry
list<integer> result   new arraylist<integer>
if  isall entry token
for  int i   entry start  i <  entry end  i
result add i
else if  isastep entry token
int denominator   getdenominator entry token
string numerator   getnumerator entry token
cronentry ce   new cronentry entry name  numerator  entry start  entry end
list<integer> list   calculatevalues ce
for  integer i   list
if  i intvalue   % denominator    0
result add i
else if  isalist entry token
stringtokenizer tokenizer   new stringtokenizer entry token
while  tokenizer hasmoretokens
string str   tokenizer nexttoken
cronentry ce   new cronentry entry name  str  entry start  entry end
list<integer> list   calculatevalues ce
result addall list
else if  isarange entry token
int index   entry token indexof
int first   integer parseint entry token substring 0  index
int last   integer parseint entry token substring index   1
for  int i   first  i <  last  i
result add i
else
int value   integer parseint entry token
result add value
collections sort result
return result
protected static boolean isarange string token
return token    null    token indexof    >  0
protected static boolean isastep string token
return token    null    token indexof    >  0
protected static boolean isalist string token
return token    null    token indexof    >  0
protected static boolean isall string token
return token    null    token length      1     token charat 0          token charat 0
protected static int getdenominator final string token
int result   0
int index   token indexof
string str   token substring index   1
result   integer parseint str
return result
protected static string getnumerator final string token
int index   token indexof
string str   token substring 0  index
return str
static list<cronentry> buildcronentries list<string> tokens
list<cronentry> result   new arraylist<cronentry>
cronentry minutes   new cronentry    tokens get minutes   0  60
minutes currentwhen   calculatevalues minutes
result add minutes
cronentry hours   new cronentry    tokens get hours   0  24
hours currentwhen   calculatevalues hours
result add hours
cronentry dayofmonth   new cronentry    tokens get day_of_month   1  31
dayofmonth currentwhen   calculatevalues dayofmonth
result add dayofmonth
cronentry month   new cronentry    tokens get month   1  12
month currentwhen   calculatevalues month
result add month
cronentry dayofweek   new cronentry    tokens get day_of_week   0  6
dayofweek currentwhen   calculatevalues dayofweek
result add dayofweek
return result
static class cronentry
final string name
final string token
final int start
final int end
list<integer> currentwhen
cronentry string name  string token  int start  int end
this name   name
this token   token
this start   start
this end   end
@override
public string tostring
return this name       token