/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq store jdbc
import java io ioexception
import java sql connection
import java sql preparedstatement
import java sql sqlexception
import java sql sqlfeaturenotsupportedexception
import javax sql datasource
import org apache activemq broker abstractlocker
import org apache activemq store persistenceadapter
import org apache activemq util handler
import org apache activemq util servicestopper
import org slf4j logger
import org slf4j loggerfactory
/**
* represents an exclusive lock on a database to avoid multiple brokers running
* against the same logical database.
*
* @org.apache.xbean.xbean element="database-locker"
*
*/
public class defaultdatabaselocker extends abstractlocker
private static final logger log   loggerfactory getlogger defaultdatabaselocker class
protected datasource datasource
protected statements statements
protected volatile preparedstatement lockcreatestatement
protected volatile preparedstatement lockupdatestatement
protected volatile connection connection
protected volatile boolean stopping
protected handler<exception> exceptionhandler
protected int querytimeout   10
public void configure persistenceadapter adapter  throws ioexception
if  adapter instanceof jdbcpersistenceadapter
this datasource     jdbcpersistenceadapter  adapter  getlockdatasource
this statements     jdbcpersistenceadapter  adapter  getstatements
public void dostart   throws exception
stopping   false
log info
string sql   statements getlockcreatestatement
log debug   sql
while  true
try
connection   datasource getconnection
connection setautocommit false
lockcreatestatement   connection preparestatement sql
lockcreatestatement execute
break
catch  exception e
try
if  stopping
throw new exception
e  e
if  exceptionhandler    null
try
exceptionhandler handle e
catch  throwable handlerexception
log error
exceptionhandler getclass   getcanonicalname
handlerexception
e  handlerexception
else
log debug    e  e
finally
// let's make sure the database connection is properly
// closed when an error occurs so that we're not leaking
// connections
if  null    connection
try
connection rollback
catch  sqlexception e1
log error     e1  e1
try
connection close
catch  sqlexception e1
log error     e1  e1
connection   null
finally
if  null    lockcreatestatement
try
lockcreatestatement close
catch  sqlexception e1
log debug     e1  e1
lockcreatestatement   null
log info     lockacquiresleepinterval
try
thread sleep lockacquiresleepinterval
catch  interruptedexception ie
log warn    ie
log info     datasource
public void dostop servicestopper stopper  throws exception
stopping   true
try
if  lockcreatestatement    null
lockcreatestatement cancel
catch  sqlfeaturenotsupportedexception e
log warn     datasource  e
try
if  lockupdatestatement    null
lockupdatestatement cancel
catch  sqlfeaturenotsupportedexception e
log warn     datasource  e
// when the connection is closed from an outside source (lost tcp
// connection, db server, etc) and this connection is managed by a pool
// it is important to close the connection so that we don't leak
// connections
if  connection    null
try
connection rollback
catch  sqlexception sqle
log warn    sqle
finally
try
connection close
catch  sqlexception ignored
log debug    ignored
lockcreatestatement   null
public boolean keepalive   throws ioexception
boolean result   false
try
lockupdatestatement   connection preparestatement statements getlockupdatestatement
lockupdatestatement setlong 1  system currenttimemillis
if  querytimeout > 0
lockupdatestatement setquerytimeout querytimeout
int rows   lockupdatestatement executeupdate
if  rows    1
result true
catch  exception e
log error     e  e
finally
if  lockupdatestatement    null
try
lockupdatestatement close
catch  sqlexception e
log error   e
lockupdatestatement   null
return result
public long getlockacquiresleepinterval
return lockacquiresleepinterval
public void setlockacquiresleepinterval long lockacquiresleepinterval
this lockacquiresleepinterval   lockacquiresleepinterval
public handler getexceptionhandler
return exceptionhandler
public void setexceptionhandler handler exceptionhandler
this exceptionhandler   exceptionhandler
public int getquerytimeout
return querytimeout
public void setquerytimeout int querytimeout
this querytimeout   querytimeout