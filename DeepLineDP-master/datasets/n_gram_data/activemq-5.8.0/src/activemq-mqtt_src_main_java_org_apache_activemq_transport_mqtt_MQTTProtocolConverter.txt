/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq transport mqtt
import java io ioexception
import java util map
import java util concurrent concurrenthashmap
import java util concurrent atomic atomicboolean
import java util zip dataformatexception
import java util zip inflater
import javax jms destination
import javax jms jmsexception
import javax jms message
import org apache activemq broker brokercontext
import org apache activemq command activemqbytesmessage
import org apache activemq command activemqdestination
import org apache activemq command activemqmapmessage
import org apache activemq command activemqmessage
import org apache activemq command activemqtextmessage
import org apache activemq command activemqtopic
import org apache activemq command command
import org apache activemq command connectionerror
import org apache activemq command connectionid
import org apache activemq command connectioninfo
import org apache activemq command consumerid
import org apache activemq command consumerinfo
import org apache activemq command exceptionresponse
import org apache activemq command messageack
import org apache activemq command messagedispatch
import org apache activemq command messageid
import org apache activemq command producerid
import org apache activemq command producerinfo
import org apache activemq command removeinfo
import org apache activemq command response
import org apache activemq command sessionid
import org apache activemq command sessioninfo
import org apache activemq util bytearrayoutputstream
import org apache activemq util bytesequence
import org apache activemq util ioexceptionsupport
import org apache activemq util idgenerator
import org apache activemq util lrucache
import org apache activemq util longsequencegenerator
import org fusesource hawtbuf buffer
import org fusesource hawtbuf utf8buffer
import org fusesource mqtt client qos
import org fusesource mqtt client topic
import org fusesource mqtt codec connack
import org fusesource mqtt codec connect
import org fusesource mqtt codec disconnect
import org fusesource mqtt codec mqttframe
import org fusesource mqtt codec pingreq
import org fusesource mqtt codec pingresp
import org fusesource mqtt codec puback
import org fusesource mqtt codec pubcomp
import org fusesource mqtt codec publish
import org fusesource mqtt codec pubrec
import org fusesource mqtt codec pubrel
import org fusesource mqtt codec suback
import org fusesource mqtt codec subscribe
import org fusesource mqtt codec unsuback
import org fusesource mqtt codec unsubscribe
import org slf4j logger
import org slf4j loggerfactory
class mqttprotocolconverter
private static final logger log   loggerfactory getlogger mqttprotocolconverter class
private static final idgenerator connection_id_generator   new idgenerator
private static final mqttframe ping_resp_frame   new pingresp   encode
private static final double mqtt_keep_alive_grace_period  1 5
private static final int default_cache_size   5000
private final connectionid connectionid   new connectionid connection_id_generator generateid
private final sessionid sessionid   new sessionid connectionid   1
private final producerid producerid   new producerid sessionid  1
private final longsequencegenerator messageidgenerator   new longsequencegenerator
private final longsequencegenerator consumeridgenerator   new longsequencegenerator
private final concurrenthashmap<integer  responsehandler> resposehandlers   new concurrenthashmap<integer  responsehandler>
private final concurrenthashmap<consumerid  mqttsubscription> subscriptionsbyconsumerid   new concurrenthashmap<consumerid  mqttsubscription>
private final concurrenthashmap<utf8buffer  mqttsubscription> mqttsubscriptionbytopic   new concurrenthashmap<utf8buffer  mqttsubscription>
private final map<utf8buffer  activemqtopic> activemqtopicmap   new lrucache<utf8buffer  activemqtopic> default_cache_size
private final map<destination  utf8buffer> mqtttopicmap   new lrucache<destination  utf8buffer> default_cache_size
private final map<short  messageack> consumeracks   new lrucache<short  messageack> default_cache_size
private final map<short  pubrec> publisherrecs   new lrucache<short  pubrec> default_cache_size
private final mqtttransport mqtttransport
private final object commnadidmutex   new object
private int lastcommandid
private final atomicboolean connected   new atomicboolean false
private connectioninfo connectioninfo   new connectioninfo
private connect connect
private string clientid
private long defaultkeepalive
private int activemqsubscriptionprefetch 1
private final string qos_property_name
public mqttprotocolconverter mqtttransport mqtttransport  brokercontext brokercontext
this mqtttransport   mqtttransport
this defaultkeepalive   0
int generatecommandid
synchronized  commnadidmutex
return lastcommandid
void sendtoactivemq command command  responsehandler handler
command setcommandid generatecommandid
if  handler    null
command setresponserequired true
resposehandlers put command getcommandid    handler
mqtttransport sendtoactivemq command
void sendtomqtt mqttframe frame
try
mqtttransport sendtomqtt frame
catch  ioexception e
log warn     frame  e
/**
* convert a mqtt command
*/
public void onmqttcommand mqttframe frame  throws ioexception  jmsexception
switch  frame messagetype
case pingreq type
log debug     getclientid
mqtttransport sendtomqtt ping_resp_frame
log debug     getclientid
break
case connect type
onmqttconnect new connect   decode frame
log debug     getclientid
break
case disconnect type
log debug     getclientid
stoptransport
break
case subscribe type
onsubscribe new subscribe   decode frame
break
case unsubscribe type
onunsubscribe new unsubscribe   decode frame
break
case publish type
onmqttpublish new publish   decode frame
break
case puback type
onmqttpuback new puback   decode frame
break
case pubrec type
onmqttpubrec new pubrec   decode frame
break
case pubrel type
onmqttpubrel new pubrel   decode frame
break
case pubcomp type
onmqttpubcomp new pubcomp   decode frame
break
default
handleexception new mqttprotocolexception     frame messagetype    true   frame
void onmqttconnect final connect connect  throws mqttprotocolexception
if  connected get
throw new mqttprotocolexception
this connect   connect
string clientid
if  connect clientid      null
clientid   connect clientid   tostring
string username
if  connect username      null
username   connect username   tostring
string passswd
if  connect password      null
passswd   connect password   tostring
configureinactivitymonitor connect keepalive
connectioninfo setconnectionid connectionid
if  clientid    null     clientid isempty
connectioninfo setclientid clientid
else
connectioninfo setclientid     connectioninfo getconnectionid   tostring
connectioninfo setresponserequired true
connectioninfo setusername username
connectioninfo setpassword passswd
connectioninfo settransportcontext mqtttransport getpeercertificates
sendtoactivemq connectioninfo  new responsehandler
public void onresponse mqttprotocolconverter converter  response response  throws ioexception
if  response isexception
// if the connection attempt fails we close the socket.
throwable exception     exceptionresponse  response  getexception
//let the client know
connack ack   new connack
ack code connack code connection_refused_server_unavailable
getmqtttransport   sendtomqtt ack encode
getmqtttransport   onexception ioexceptionsupport create exception
return
final sessioninfo sessioninfo   new sessioninfo sessionid
sendtoactivemq sessioninfo  null
final producerinfo producerinfo   new producerinfo producerid
sendtoactivemq producerinfo  new responsehandler
public void onresponse mqttprotocolconverter converter  response response  throws ioexception
if  response isexception
// if the connection attempt fails we close the socket.
throwable exception     exceptionresponse  response  getexception
connack ack   new connack
ack code connack code connection_refused_bad_username_or_password
getmqtttransport   sendtomqtt ack encode
getmqtttransport   onexception ioexceptionsupport create exception
connack ack   new connack
ack code connack code connection_accepted
connected set true
getmqtttransport   sendtomqtt ack encode
void onsubscribe subscribe command  throws mqttprotocolexception
checkconnected
topic topics   command topics
if  topics    null
byte qos   new byte
for  int i   0  i < topics length  i
qos    byte  onsubscribe command  topics  ordinal
suback ack   new suback
ack messageid command messageid
ack grantedqos qos
try
getmqtttransport   sendtomqtt ack encode
catch  ioexception e
log warn     command  e
else
log warn     command
qos onsubscribe subscribe command  topic topic  throws mqttprotocolexception
activemqdestination destination   new activemqtopic convertmqtttoactivemq topic name   tostring
consumerid id   new consumerid sessionid  consumeridgenerator getnextsequenceid
consumerinfo consumerinfo   new consumerinfo id
consumerinfo setdestination destination
consumerinfo setprefetchsize getactivemqsubscriptionprefetch
consumerinfo setdispatchasync true
if   connect cleansession       connect clientid      null
//by default subscribers are persistent
consumerinfo setsubscriptionname connect clientid   tostring
mqttsubscription mqttsubscription   new mqttsubscription this  topic qos    consumerinfo
subscriptionsbyconsumerid put id  mqttsubscription
mqttsubscriptionbytopic put topic name    mqttsubscription
sendtoactivemq consumerinfo  null
return topic qos
void onunsubscribe unsubscribe command
utf8buffer topics   command topics
if  topics    null
for  utf8buffer topic   topics
onunsubscribe topic
unsuback ack   new unsuback
ack messageid command messageid
sendtomqtt ack encode
void onunsubscribe utf8buffer topicname
mqttsubscription subs   mqttsubscriptionbytopic remove topicname
if  subs    null
consumerinfo info   subs getconsumerinfo
if  info    null
subscriptionsbyconsumerid remove info getconsumerid
removeinfo removeinfo   null
if  info    null
removeinfo   info createremovecommand
sendtoactivemq removeinfo  null
/**
* dispatch a activemq command
*/
public void onactivemqcommand command command  throws exception
if  command isresponse
response response    response  command
responsehandler rh   resposehandlers remove integer valueof response getcorrelationid
if  rh    null
rh onresponse this  response
else
// pass down any unexpected errors. should this close the connection?
if  response isexception
throwable exception     exceptionresponse  response  getexception
handleexception exception  null
else if  command ismessagedispatch
messagedispatch md    messagedispatch  command
mqttsubscription sub   subscriptionsbyconsumerid get md getconsumerid
if  sub    null
messageack ack   sub createmessageack md
publish publish   sub createpublish  activemqmessage  md getmessage
if  ack    null    sub expectack publish
synchronized  consumeracks
consumeracks put publish messageid    ack
getmqtttransport   sendtomqtt publish encode
if  ack    null     sub expectack publish
getmqtttransport   sendtoactivemq ack
else if  command getdatastructuretype      connectionerror data_structure_type
// pass down any unexpected async errors. should this close the connection?
throwable exception     connectionerror  command  getexception
handleexception exception  null
else if  command isbrokerinfo
//ignore
else
log debug     command
void onmqttpublish publish command  throws ioexception  jmsexception
checkconnected
activemqmessage message   convertmessage command
message setproducerid producerid
message onsend
sendtoactivemq message  createresponsehandler command
void onmqttpuback puback command
short messageid   command messageid
messageack ack
synchronized  consumeracks
ack   consumeracks remove messageid
if  ack    null
getmqtttransport   sendtoactivemq ack
void onmqttpubrec pubrec commnand
//from a subscriber - send a pubrel in response
pubrel pubrel   new pubrel
pubrel messageid commnand messageid
sendtomqtt pubrel encode
void onmqttpubrel pubrel command
pubrec ack
synchronized  publisherrecs
ack   publisherrecs remove command messageid
if  ack    null
log warn     command messageid
pubcomp pubcomp   new pubcomp
pubcomp messageid command messageid
sendtomqtt pubcomp encode
void onmqttpubcomp pubcomp command
short messageid   command messageid
messageack ack
synchronized  consumeracks
ack   consumeracks remove messageid
if  ack    null
getmqtttransport   sendtoactivemq ack
activemqmessage convertmessage publish command  throws jmsexception
activemqbytesmessage msg   new activemqbytesmessage
msg setproducerid producerid
messageid id   new messageid producerid  messageidgenerator getnextsequenceid
msg setmessageid id
msg settimestamp system currenttimemillis
msg setpriority  byte  message default_priority
msg setpersistent command qos      qos at_most_once
msg setintproperty qos_property_name  command qos   ordinal
activemqtopic topic
synchronized  activemqtopicmap
topic   activemqtopicmap get command topicname
if  topic    null
string topicname   command topicname   tostring   replaceall
topic   new activemqtopic topicname
activemqtopicmap put command topicname    topic
msg setjmsdestination topic
msg writebytes command payload   data  command payload   offset  command payload   length
return msg
public publish convertmessage activemqmessage message  throws ioexception  jmsexception  dataformatexception
publish result   new publish
short id    short  message getmessageid   getproducersequenceid
result messageid id
qos qos
if  message propertyexists qos_property_name
int ordinal   message getintproperty qos_property_name
qos   qos values
else
qos   message ispersistent   ? qos at_most_once   qos at_least_once
result qos qos
utf8buffer topicname
synchronized  mqtttopicmap
topicname   mqtttopicmap get message getjmsdestination
if  topicname    null
topicname   new utf8buffer message getdestination   getphysicalname   replace
mqtttopicmap put message getjmsdestination    topicname
result topicname topicname
if  message getdatastructuretype      activemqtextmessage data_structure_type
activemqtextmessage msg    activemqtextmessage  message copy
msg setreadonlybody true
string messagetext   msg gettext
if  messagetext    null
result payload new buffer messagetext getbytes
else if  message getdatastructuretype      activemqbytesmessage data_structure_type
activemqbytesmessage msg    activemqbytesmessage  message copy
msg setreadonlybody true
byte data   new byte
msg readbytes data
result payload new buffer data
else if  message getdatastructuretype      activemqmapmessage data_structure_type
activemqmapmessage msg    activemqmapmessage  message copy
msg setreadonlybody true
map<string  object> map   msg getcontentmap
if  map    null
result payload new buffer map tostring   getbytes
else
bytesequence bytesequence   message getcontent
if  bytesequence    null    bytesequence getlength   > 0
if  message iscompressed
inflater inflater   new inflater
inflater setinput bytesequence data  bytesequence offset  bytesequence length
byte data   new byte
int read
bytearrayoutputstream bytesout   new bytearrayoutputstream
while   read   inflater inflate data      0
bytesout write data  0  read
bytesequence   bytesout tobytesequence
result payload new buffer bytesequence data  bytesequence offset  bytesequence length
return result
public mqtttransport getmqtttransport
return mqtttransport
public void ontransporterror
if  connect    null
if  connect willtopic      null    connect willmessage      null
try
publish publish   new publish
publish topicname connect willtopic
publish qos connect willqos
publish payload connect willmessage
activemqmessage message   convertmessage publish
message setproducerid producerid
message onsend
sendtoactivemq message  null
catch  exception e
log warn     connect willmessage
void configureinactivitymonitor short keepaliveseconds
mqttinactivitymonitor monitor   getmqtttransport   getinactivitymonitor
// if the user specifically shuts off the inactivitymonitor with transport.useinactivitymonitor=false,
// then ignore configuring it because it won't exist
if  monitor    null
return
long keepalivems   keepaliveseconds   1000
if  log isdebugenabled
log debug     getclientid         keepalivems
try
long keepalivemswithgraceperiod    long   keepalivems   mqtt_keep_alive_grace_period
// if we have a default keep-alive value, and the client is trying to turn off keep-alive,
// we'll observe the server-side configured default value (note, no grace period)
if  keepalivemswithgraceperiod    0    defaultkeepalive > 0
keepalivemswithgraceperiod   defaultkeepalive
monitor setprotocolconverter this
monitor setreadchecktime keepalivemswithgraceperiod
monitor setinitialdelaytime keepalivems
monitor startmonitorthread
if  log isdebugenabled
log debug     getclientid
keepalivemswithgraceperiod
keepalivems        keepalivemswithgraceperiod   keepalivems
catch  exception ex
log warn    ex
void handleexception throwable exception  mqttframe command
log warn     command       exception tostring
if  log isdebugenabled
log debug    exception
try
getmqtttransport   stop
catch  throwable e
log error    e
void checkconnected   throws mqttprotocolexception
if   connected get
throw new mqttprotocolexception
private string getclientid
if  clientid    null
if  connect    null    connect clientid      null
clientid   connect clientid   tostring
else
clientid
return clientid
private void stoptransport
try
getmqtttransport   stop
catch  throwable e
log debug    e
responsehandler createresponsehandler final publish command
if  command    null
switch  command qos
case at_least_once
return new responsehandler
public void onresponse mqttprotocolconverter converter  response response  throws ioexception
if  response isexception
log warn    command    exceptionresponse  response  getexception
else
puback ack   new puback
ack messageid command messageid
converter getmqtttransport   sendtomqtt ack encode
case exactly_once
return new responsehandler
public void onresponse mqttprotocolconverter converter  response response  throws ioexception
if  response isexception
log warn    command    exceptionresponse  response  getexception
else
pubrec ack   new pubrec
ack messageid command messageid
synchronized  publisherrecs
publisherrecs put command messageid    ack
converter getmqtttransport   sendtomqtt ack encode
case at_most_once
break
return null
private string convertmqtttoactivemq string name
string result   name replace
result   result replace
result   result replace
return result
public long getdefaultkeepalive
return defaultkeepalive
/**
* set the default keep alive time (in milliseconds) that would be used if configured on server side
* and the client sends a keep-alive value of 0 (zero) on a connect frame
* @param keepalive the keepalive in milliseconds
*/
public void setdefaultkeepalive long keepalive
this defaultkeepalive   keepalive
public int getactivemqsubscriptionprefetch
return activemqsubscriptionprefetch
/**
* set the default prefetch size when mapping the mqtt subscription to an activemq one
* the default = 1
* @param activemqsubscriptionprefetch set the prefetch for the corresponding activemq subscription
*/
public void setactivemqsubscriptionprefetch int activemqsubscriptionprefetch
this activemqsubscriptionprefetch   activemqsubscriptionprefetch