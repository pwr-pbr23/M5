/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq store
import org apache activemq broker abstractlocker
import org apache activemq util lockfile
import org apache activemq util servicestopper
import org slf4j logger
import org slf4j loggerfactory
import java io file
import java io ioexception
/**
* represents an exclusive lock on a database to avoid multiple brokers running
* against the same logical database.
*
* @org.apache.xbean.xbean element="shared-file-locker"
*
*/
public class sharedfilelocker extends abstractlocker
public static final file default_directory   new file
private static final logger log   loggerfactory getlogger sharedfilelocker class
private lockfile lockfile
protected file directory   default_directory
@override
public void dostart   throws exception
if  lockfile    null
file lockfilename   new file directory
lockfile   new lockfile lockfilename  true
if  failiflocked
lockfile lock
else
boolean locked   false
while    isstopped         isstopping
try
lockfile lock
locked   true
break
catch  ioexception e
log info
lockfilename
lockacquiresleepinterval   1000
e
try
thread sleep lockacquiresleepinterval
catch  interruptedexception e1
if   locked
throw new ioexception
@override
public void dostop servicestopper stopper  throws exception
lockfile unlock
lockfile null
public file getdirectory
return directory
public void setdirectory file directory
this directory   directory
@override
public void configure persistenceadapter persistenceadapter  throws ioexception
this setdirectory persistenceadapter getdirectory