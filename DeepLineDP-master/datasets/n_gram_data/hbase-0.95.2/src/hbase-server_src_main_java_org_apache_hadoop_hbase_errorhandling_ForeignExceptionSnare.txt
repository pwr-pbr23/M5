/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase errorhandling
import org apache hadoop classification interfaceaudience
import org apache hadoop classification interfacestability
/**
* this is an interface for a cooperative exception throwing mechanism.  implementations are
* containers that holds an exception from a separate thread. this can be used to receive
* exceptions from 'foreign' threads or from separate 'foreign' processes.
* <p>
* to use, one would pass an implementation of this object to a long running method and
* periodically check by calling {@link #rethrowexception()}.  if any foreign exceptions have
* been received, the calling thread is then responsible for handling the rethrown exception.
* <p>
* one could use the boolean {@link #hasexception()} to determine if there is an exceptoin as well.
* <p>
* note: this is very similar to the interruptedexception/interrupt/interrupted pattern.  there,
* the notification state is bound to a thread.  using this, applications receive exceptions in
* the snare.  the snare is referenced and checked by multiple threads which enables exception
* notification in all the involved threads/processes.
*/
@interfaceaudience public
@interfacestability evolving
public interface foreignexceptionsnare
/**
* rethrow an exception currently held by the {@link foreignexceptionsnare}. if there is
* no exception this is a no-op
*
* @throws foreignexception
*           all exceptions from remote sources are procedure exceptions
*/
void rethrowexception   throws foreignexception
/**
* non-exceptional form of {@link #rethrowexception()}. checks to see if any
* process to which the exception checkers is bound has created an error that
* would cause a failure.
*
* @return <tt>true</tt> if there has been an error,<tt>false</tt> otherwise
*/
boolean hasexception
/**
* get the value of the captured exception.
*
* @return the captured foreign exception or null if no exception captured.
*/
foreignexception getexception