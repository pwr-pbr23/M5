/*
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase coprocessor
import org apache hadoop classification interfaceaudience
import org apache hadoop classification interfacestability
import org apache hadoop hbase coprocessorenvironment
/**
* carries the execution state for a given invocation of an observer coprocessor
* ({@link regionobserver}, {@link masterobserver}, or {@link walobserver})
* method.  the same observercontext instance is passed sequentially to all loaded
* coprocessors for a given observer method trigger, with the
* <code>coprocessorenvironment</code> reference swapped out for each
* coprocessor.
* @param <e> the {@link coprocessorenvironment} subclass applicable to the
*     revelant observer interface.
*/
@interfaceaudience public
@interfacestability evolving
public class observercontext<e extends coprocessorenvironment>
private e env
private boolean bypass
private boolean complete
public observercontext
public e getenvironment
return env
public void prepare e env
this env   env
/**
* call to indicate that the current coprocessor's return value should be
* used in place of the normal hbase obtained value.
*/
public void bypass
bypass   true
/**
* call to indicate that additional coprocessors further down the execution
* chain do not need to be invoked.  implies that this coprocessor's response
* is definitive.
*/
public void complete
complete   true
/**
* for use by the coprocessor framework.
* @return <code>true</code> if {@link observercontext#bypass()}
*     was called by one of the loaded coprocessors, <code>false</code> otherwise.
*/
public boolean shouldbypass
boolean current   bypass
bypass   false
return current
/**
* for use by the coprocessor framework.
* @return <code>true</code> if {@link observercontext#complete()}
*     was called by one of the loaded coprocessors, <code>false</code> otherwise.
*/
public boolean shouldcomplete
boolean current   complete
complete   false
return current
/**
* instantiates a new observercontext instance if the passed reference is
* <code>null</code> and sets the environment in the new or existing instance.
* this allows deferring the instantiation of a observercontext until it is
* actually needed.
*
* @param env the coprocessor environment to set
* @param context an existing observercontext instance to use, or <code>null</code>
*     to create a new instance
* @param <t> the environment type for the context
* @return an instance of <code>observercontext</code> with the environment set
*/
public static <t extends coprocessorenvironment> observercontext<t> createandprepare
t env  observercontext<t> context
if  context    null
context   new observercontext<t>
context prepare env
return context