/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase procedure
import java io closeable
import java io ioexception
import org apache hadoop classification interfaceaudience
import org apache hadoop classification interfacestability
import org apache hadoop hbase errorhandling foreignexception
/**
* this is the notification interface for procedures that encapsulates message passing from
* members to a coordinator.  each of these calls should send a message to the coordinator.
*/
@interfaceaudience public
@interfacestability evolving
public interface procedurememberrpcs extends closeable
/**
* initialize and start any threads or connections the member needs.
*/
void start final string membername  final proceduremember member
/**
* each subprocedure is being executed on a member.  this is the identifier for the member.
* @return the member name
*/
string getmembername
/**
* notify the coordinator that we aborted the specified {@link subprocedure}
*
* @param sub the {@link subprocedure} we are aborting
* @param cause the reason why the member's subprocedure aborted
* @throws ioexception thrown when the rpcs can't reach the other members of the procedure (and
*  thus can't recover).
*/
void sendmemberaborted subprocedure sub  foreignexception cause  throws ioexception
/**
* notify the coordinator that the specified {@link subprocedure} has acquired the locally required
* barrier condition.
*
* @param sub the specified {@link subprocedure}
* @throws ioexception if we can't reach the coordinator
*/
void sendmemberacquired subprocedure sub  throws ioexception
/**
* notify the coordinator that the specified {@link subprocedure} has completed the work that
* needed to be done under the global barrier.
*
* @param sub the specified {@link subprocedure}
* @throws ioexception if we can't reach the coordinator
*/
void sendmembercompleted subprocedure sub  throws ioexception