/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop metrics2 lib
import com yammer metrics stats exponentiallydecayingsample
import com yammer metrics stats sample
import com yammer metrics stats snapshot
import org apache commons lang stringutils
import org apache hadoop metrics2 metrichistogram
import org apache hadoop metrics2 metricsinfo
import org apache hadoop metrics2 metricsrecordbuilder
import java util concurrent atomic atomiclong
/**
* a histogram implementation that runs in constant space, and exports to hadoop2's metrics2 system.
*/
public class mutablehistogram extends mutablemetric implements metrichistogram
private static final int default_sample_size   2046
// the bias towards sampling from more recent data.
// per cormode et al. an alpha of 0.015 strongly biases to the last 5 minutes
private static final double default_alpha   0 015
private final string name
private final string desc
private final sample sample
private final atomiclong min
private final atomiclong max
private final atomiclong sum
private final atomiclong count
public mutablehistogram metricsinfo info
this info name    info description
public mutablehistogram string name  string description
this name   stringutils capitalize name
this desc   stringutils uncapitalize description
sample   new exponentiallydecayingsample default_sample_size  default_alpha
count   new atomiclong
min   new atomiclong long max_value
max   new atomiclong long min_value
sum   new atomiclong
public void add final long val
setchanged
count incrementandget
sample update val
setmax val
setmin val
sum getandadd val
private void setmax final long potentialmax
boolean done   false
while   done
final long currentmax   max get
done   currentmax >  potentialmax
max compareandset currentmax  potentialmax
private void setmin long potentialmin
boolean done   false
while   done
final long currentmin   min get
done   currentmin <  potentialmin
min compareandset currentmin  potentialmin
public long getmax
if  count get   > 0
return max get
return 0l
public long getmin
if  count get   > 0
return min get
return 0l
public double getmean
long ccount   count get
if  ccount > 0
return sum get      double  ccount
return 0 0
@override
public void snapshot metricsrecordbuilder metricsrecordbuilder  boolean all
if  all    changed
clearchanged
final snapshot s   sample getsnapshot
metricsrecordbuilder addcounter interns info name   num_ops_metric_name  desc   count get
metricsrecordbuilder addgauge interns info name   min_metric_name  desc   getmin
metricsrecordbuilder addgauge interns info name   max_metric_name  desc   getmax
metricsrecordbuilder addgauge interns info name   mean_metric_name  desc   getmean
metricsrecordbuilder addgauge interns info name   median_metric_name  desc   s getmedian
metricsrecordbuilder addgauge interns info name   seventy_fifth_percentile_metric_name  desc
s get75thpercentile
metricsrecordbuilder addgauge interns info name   ninety_fifth_percentile_metric_name  desc
s get95thpercentile
metricsrecordbuilder addgauge interns info name   ninety_nineth_percentile_metric_name  desc
s get99thpercentile