/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase procedure
import java io closeable
import java io ioexception
import java util list
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop classification interfaceaudience
import org apache hadoop classification interfacestability
import org apache hadoop hbase zookeeper zkutil
import org apache hadoop hbase zookeeper zookeeperlistener
import org apache hadoop hbase zookeeper zookeeperwatcher
import org apache zookeeper keeperexception
/**
* this is a shared zookeeper-based znode management utils for distributed procedure.  all znode
* operations should go through the provided methods in coordinators and members.
*
* layout of nodes in zk is
* /hbase/[op name]/acquired/
*                    [op instance] - op data/
*                        /[nodes that have acquired]
*                 /reached/
*                    [op instance]/
*                        /[nodes that have completed]
*                 /abort/
*                    [op instance] - failure data
*
* note: while acquired and completed are znode dirs, abort is actually just a znode.
*
* assumption here that procedure names are unique
*/
@interfaceaudience public
@interfacestability evolving
public abstract class zkprocedureutil
extends zookeeperlistener implements closeable
private static final log log   logfactory getlog zkprocedureutil class
public static final string acquired_barrier_znode_default
public static final string reached_barrier_znode_default
public static final string abort_znode_default
public final string baseznode
protected final string acquiredznode
protected final string reachedznode
protected final string abortznode
/**
* top-level watcher/controller for procedures across the cluster.
* <p>
* on instantiation, this ensures the procedure znodes exist.  this however requires the passed in
*  watcher has been started.
* @param watcher watcher for the cluster zk. owned by <tt>this</tt> and closed via
*          {@link #close()}
* @param procdescription name of the znode describing the procedure to run
* @throws keeperexception when the procedure znodes cannot be created
*/
public zkprocedureutil zookeeperwatcher watcher  string procdescription
throws keeperexception
super watcher
// make sure we are listening for events
watcher registerlistener this
// setup paths for the zknodes used in procedures
this baseznode   zkutil joinznode watcher baseznode  procdescription
acquiredznode   zkutil joinznode baseznode  acquired_barrier_znode_default
reachedznode   zkutil joinznode baseznode  reached_barrier_znode_default
abortznode   zkutil joinznode baseznode  abort_znode_default
// first make sure all the zk nodes exist
// make sure all the parents exist (sometimes not the case in tests)
zkutil createwithparents watcher  acquiredznode
// regular create because all the parents exist
zkutil createandfailsilent watcher  reachedznode
zkutil createandfailsilent watcher  abortznode
@override
public void close   throws ioexception
// the watcher is passed from either master or region server
// watcher.close() will be called by the owner so no need to call close() here
public string getacquiredbarriernode string opinstancename
return zkprocedureutil getacquirebarriernode this  opinstancename
public string getreachedbarriernode string opinstancename
return zkprocedureutil getreachedbarriernode this  opinstancename
public string getabortznode string opinstancename
return zkprocedureutil getabortnode this  opinstancename
public string getabortznode
return abortznode
public string getbaseznode
return baseznode
public string getacquiredbarrier
return acquiredznode
/**
* get the full znode path for the node used by the coordinator to trigger a global barrier
* acquire on each subprocedure.
* @param controller controller running the procedure
* @param opinstancename name of the running procedure instance (not the procedure description).
* @return full znode path to the prepare barrier/start node
*/
public static string getacquirebarriernode zkprocedureutil controller
string opinstancename
return zkutil joinznode controller acquiredznode  opinstancename
/**
* get the full znode path for the node used by the coordinator to trigger a global barrier
* execution and release on each subprocedure.
* @param controller controller running the procedure
* @param opinstancename name of the running procedure instance (not the procedure description).
* @return full znode path to the commit barrier
*/
public static string getreachedbarriernode zkprocedureutil controller
string opinstancename
return zkutil joinznode controller reachedznode  opinstancename
/**
* get the full znode path for the node used by the coordinator or member to trigger an abort
* of the global barrier acquisition or execution in subprocedures.
* @param controller controller running the procedure
* @param opinstancename name of the running procedure instance (not the procedure description).
* @return full znode path to the abort znode
*/
public static string getabortnode zkprocedureutil controller  string opinstancename
return zkutil joinznode controller abortznode  opinstancename
public zookeeperwatcher getwatcher
return watcher
/**
* is this a procedure related znode path?
*
* todo: this is not strict, can return true if had name just starts with same prefix but is
* different zdir.
*
* @return true if starts with baseznode
*/
boolean isinprocedurepath string path
return path startswith baseznode
/**
* is this the exact procedure barrier acquired znode
*/
boolean isacquirednode string path
return path equals acquiredznode
/**
* is this in the procedure barrier acquired znode path
*/
boolean isacquiredpathnode string path
return path startswith this acquiredznode      path equals acquiredznode
/**
* is this the exact procedure barrier reached znode
*/
boolean isreachednode string path
return path equals reachedznode
/**
* is this in the procedure barrier reached znode path
*/
boolean isreachedpathnode string path
return path startswith this reachedznode      path equals reachedznode
/**
* is this in the procedure barrier abort znode path
*/
boolean isabortnode string path
return path equals abortznode
/**
* is this in the procedure barrier abort znode path
*/
public boolean isabortpathnode string path
return path startswith this abortznode      path equals abortznode
// --------------------------------------------------------------------------
// internal debugging methods
// --------------------------------------------------------------------------
/**
* recursively print the current state of zk (non-transactional)
* @param root name of the root directory in zk to print
* @throws keeperexception
*/
void logzktree string root
if   log isdebugenabled    return
log debug
string prefix
log debug prefix   root
try
logzktree root  prefix
catch  keeperexception e
throw new runtimeexception e
/**
* helper method to print the current state of the zk tree.
* @see #logzktree(string)
* @throws keeperexception if an unexpected exception occurs
*/
protected void logzktree string root  string prefix  throws keeperexception
list<string> children   zkutil listchildrennowatch watcher  root
if  children    null  return
for  string child   children
log debug prefix   child
string node   zkutil joinznode root equals    ?     root  child
logzktree node  prefix
public void clearchildznodes   throws keeperexception
// todo this is potentially racy since not atomic. update when we support zk that has multi
log info     acquiredznode       reachedznode
abortznode
// if the coordinator was shutdown mid-procedure, then we are going to lose
// an procedure that was previously started by cleaning out all the previous state. its much
// harder to figure out how to keep an procedure going and the subject of hbase-5487.
zkutil deletechildrenrecursively watcher  acquiredznode
zkutil deletechildrenrecursively watcher  reachedznode
zkutil deletechildrenrecursively watcher  abortznode
public void clearznodes string procedurename  throws keeperexception
// todo this is potentially racy since not atomic. update when we support zk that has multi
log info     procedurename
acquiredznode       reachedznode       abortznode
zkutil deletenoderecursively watcher  getacquiredbarriernode procedurename
zkutil deletenoderecursively watcher  getreachedbarriernode procedurename
zkutil deletenoderecursively watcher  getabortznode procedurename