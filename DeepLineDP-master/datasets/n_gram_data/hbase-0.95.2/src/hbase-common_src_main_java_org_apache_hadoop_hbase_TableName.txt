/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase
import org apache hadoop classification interfaceaudience
import org apache hadoop classification interfacestability
import org apache hadoop hbase util bytes
/**
* immutable pojo class for representing a table name.
* which is of the form:
* &lt;table namespace&gt;:&lt;table qualifier&gt;
*
* two special namespaces:
*
* 1. hbase - system namespace, used to contain hbase internal tables
* 2. default - tables with no explicit specified namespace will
* automatically fall into this namespace.
*
* ie
*
* a) foo:bar, means namespace=foo and qualifier=bar
* b) bar, means namespace=default and qualifier=bar
* c) default:bar, means namespace=default and qualifier=bar
*
*/
@interfaceaudience public
@interfacestability evolving
public final class tablename implements comparable<tablename>
/** namespace delimiter */
//this should always be only 1 byte long
public final static char namespace_delim
// a non-capture group so that this can be embedded.
// regex is a bit more complicated to support nuance of tables
// in default namespace
//allows only letters, digits and '_'
public static final string valid_namespace_regex
//allows only letters, digits, '_', '-' and '.'
public static final string valid_table_qualifier_regex
//concatenation of namespace_regex and table_qualifier_regex,
//with namespace_delim as delimiter
public static final string valid_user_table_regex
valid_namespace_regex   namespace_delim
valid_table_qualifier_regex
/** the root table's name.*/
public static final tablename root_table_name
valueof namespacedescriptor system_namespace_name_str
/** the meta table's name. */
public static final tablename meta_table_name
valueof namespacedescriptor system_namespace_name_str
/** the namespace table's name. */
public static final tablename namespace_table_name
valueof namespacedescriptor system_namespace_name_str
private static final string old_meta_str
private static final string old_root_str
private byte name
private string nameasstring
private byte namespace
private string namespaceasstring
private byte qualifier
private string qualifierasstring
private tablename
/**
* check passed byte array, "tablename", is legal user-space table name.
* @return returns passed <code>tablename</code> param
* @throws illegalargumentexception if passed a tablename is null or
* is made of other than 'word' characters or underscores: i.e.
* <code>[a-za-z_0-9.-:]</code>. the ':' is used to delimit the namespace
* from the table name and can be used for nothing else.
*
* namespace names can only contain 'word' characters
* <code>[a-za-z_0-9]</code> or '_'
*
* qualifier names can only contain 'word' characters
* <code>[a-za-z_0-9]</code> or '_', '.' or '-'.
* the name may not start with '.' or '-'.
*
* valid fully qualified table names:
* foo:bar, namespace=>foo, table=>bar
* org:foo.bar, namespace=org, table=>foo.bar
*/
public static byte  islegalfullyqualifiedtablename final byte tablename
if  tablename    null    tablename length <  0
throw new illegalargumentexception
int namespacedelimindex   com google common primitives bytes lastindexof tablename
byte  namespace_delim
if  namespacedelimindex    0    namespacedelimindex     1
islegaltablequalifiername tablename
else
islegalnamespacename tablename  0  namespacedelimindex
islegaltablequalifiername tablename  namespacedelimindex   1  tablename length
return tablename
public static void islegaltablequalifiername final byte qualifiername
islegaltablequalifiername qualifiername  0  qualifiername length
/**
* qualifier names can only contain 'word' characters
* <code>[a-za-z_0-9]</code> or '_', '.' or '-'.
* the name may not start with '.' or '-'.
*
* @param qualifiername byte array containing the qualifier name
* @param start start index
* @param end end index (exclusive)
*/
public static void islegaltablequalifiername final byte qualifiername
int start
int end
if end   start < 1
throw new illegalargumentexception
if  qualifiername         qualifiername
throw new illegalargumentexception     qualifiername
bytes tostring qualifiername
for  int i   start  i < end  i
if  character isletterordigit qualifiername
qualifiername
qualifiername
qualifiername
continue
throw new illegalargumentexception     qualifiername
i
bytes tostring qualifiername  start  end
public static void islegalnamespacename byte namespacename
islegalnamespacename namespacename  0  namespacename length
/**
* valid namespace characters are [a-za-z_0-9]
* @param namespacename
* @param offset
* @param length
*/
public static void islegalnamespacename byte namespacename  int offset  int length
for  int i   offset  i < length  i
if  character isletterordigit namespacename    namespacename
continue
throw new illegalargumentexception     namespacename
i
bytes tostring namespacename
offset  length
public byte getname
return name
public string getnameasstring
return nameasstring
public byte getnamespace
return namespace
public string getnamespaceasstring
return namespaceasstring
public byte getqualifier
return qualifier
public string getqualifierasstring
return qualifierasstring
public byte tobytes
return name
@override
public string tostring
return nameasstring
public static tablename valueof byte namespace  byte qualifier
tablename ret   new tablename
if namespace    null    namespace length < 1
namespace   namespacedescriptor default_namespace_name
ret namespace   namespace
ret namespaceasstring   bytes tostring namespace
ret qualifier   qualifier
ret qualifierasstring   bytes tostring qualifier
finishvalueof ret
return ret
public static tablename valueof string namespaceasstring  string qualifierasstring
tablename ret   new tablename
if namespaceasstring    null    namespaceasstring length   < 1
namespaceasstring   namespacedescriptor default_namespace_name_str
ret namespaceasstring   namespaceasstring
ret namespace   bytes tobytes namespaceasstring
ret qualifier   bytes tobytes qualifierasstring
ret qualifierasstring   qualifierasstring
finishvalueof ret
return ret
private static void finishvalueof tablename tablename
islegalnamespacename tablename namespace
islegaltablequalifiername tablename qualifier
tablename nameasstring
createfullyqualified tablename namespaceasstring  tablename qualifierasstring
tablename name   bytes tobytes tablename nameasstring
public static tablename valueof byte name
return valueof bytes tostring name
public static tablename valueof string name
if name equals old_root_str
throw new illegalargumentexception old_root_str
if name equals old_meta_str
throw new illegalargumentexception old_meta_str
meta_table_name
islegalfullyqualifiedtablename bytes tobytes name
int index   name indexof namespace_delim
if  index     1
return tablename valueof name substring 0  index   name substring index   1
return tablename valueof namespacedescriptor default_namespace getname    name
private static string createfullyqualified string namespace  string tablequalifier
if  namespace equals namespacedescriptor default_namespace getname
return tablequalifier
return namespace namespace_delim tablequalifier
@override
public boolean equals object o
if  this    o  return true
if  o    null    getclass      o getclass    return false
tablename tablename    tablename  o
if   nameasstring equals tablename nameasstring   return false
return true
@override
public int hashcode
int result   nameasstring hashcode
return result
@override
public int compareto tablename tablename
return this nameasstring compareto tablename getnameasstring