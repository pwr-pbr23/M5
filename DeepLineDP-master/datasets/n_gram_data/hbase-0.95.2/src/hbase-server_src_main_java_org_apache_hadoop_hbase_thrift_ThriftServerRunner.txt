/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase thrift
import static org apache hadoop hbase util bytes getbytes
import java io ioexception
import java net inetaddress
import java net inetsocketaddress
import java net unknownhostexception
import java nio bytebuffer
import java util arraylist
import java util arrays
import java util collections
import java util hashmap
import java util list
import java util map
import java util treemap
import java util concurrent blockingqueue
import java util concurrent executorservice
import java util concurrent linkedblockingqueue
import java util concurrent threadpoolexecutor
import java util concurrent timeunit
import org apache commons cli commandline
import org apache commons cli option
import org apache commons cli optiongroup
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop classification interfaceaudience
import org apache hadoop conf configuration
import org apache hadoop hbase hbaseconfiguration
import org apache hadoop hbase hcolumndescriptor
import org apache hadoop hbase hconstants
import org apache hadoop hbase hregioninfo
import org apache hadoop hbase htabledescriptor
import org apache hadoop hbase keyvalue
import org apache hadoop hbase servername
import org apache hadoop hbase tablename
import org apache hadoop hbase tablenotfoundexception
import org apache hadoop hbase client delete
import org apache hadoop hbase client get
import org apache hadoop hbase client hbaseadmin
import org apache hadoop hbase client htable
import org apache hadoop hbase client increment
import org apache hadoop hbase client operationwithattributes
import org apache hadoop hbase client put
import org apache hadoop hbase client result
import org apache hadoop hbase client resultscanner
import org apache hadoop hbase client scan
import org apache hadoop hbase client durability
import org apache hadoop hbase filter filter
import org apache hadoop hbase filter parsefilter
import org apache hadoop hbase filter prefixfilter
import org apache hadoop hbase filter whilematchfilter
import org apache hadoop hbase thrift callqueue call
import org apache hadoop hbase thrift generated alreadyexists
import org apache hadoop hbase thrift generated batchmutation
import org apache hadoop hbase thrift generated columndescriptor
import org apache hadoop hbase thrift generated hbase
import org apache hadoop hbase thrift generated ioerror
import org apache hadoop hbase thrift generated illegalargument
import org apache hadoop hbase thrift generated mutation
import org apache hadoop hbase thrift generated tcell
import org apache hadoop hbase thrift generated tincrement
import org apache hadoop hbase thrift generated tregioninfo
import org apache hadoop hbase thrift generated trowresult
import org apache hadoop hbase thrift generated tscan
import org apache hadoop hbase util bytes
import org apache thrift texception
import org apache thrift protocol tbinaryprotocol
import org apache thrift protocol tcompactprotocol
import org apache thrift protocol tprotocolfactory
import org apache thrift server thshaserver
import org apache thrift server tnonblockingserver
import org apache thrift server tserver
import org apache thrift server tthreadedselectorserver
import org apache thrift transport tframedtransport
import org apache thrift transport tnonblockingserversocket
import org apache thrift transport tnonblockingservertransport
import org apache thrift transport tserversocket
import org apache thrift transport tservertransport
import org apache thrift transport ttransportfactory
import com google common base joiner
import com google common util concurrent threadfactorybuilder
/**
* thriftserverrunner - this class starts up a thrift server which implements
* the hbase api specified in the hbase.thrift idl file.
*/
@interfaceaudience private
public class thriftserverrunner implements runnable
private static final log log   logfactory getlog thriftserverrunner class
static final string server_type_conf_key
static final string bind_conf_key
static final string compact_conf_key
static final string framed_conf_key
static final string port_conf_key
static final string coalesce_inc_key
private static final string default_bind_addr
public static final int default_listen_port   9090
private final int listenport
private configuration conf
volatile tserver tserver
private final hbase iface handler
private final thriftmetrics metrics
/** an enum of server implementation selections */
enum impltype
hs_ha    true  thshaserver class  true
nonblocking    true  tnonblockingserver class  true
thread_pool    false  tboundedthreadpoolserver class  true
threaded_selector
true  tthreadedselectorserver class  true
public static final impltype default   thread_pool
final string option
final boolean isalwaysframed
final class<? extends tserver> serverclass
final boolean canspecifybindip
impltype string option  boolean isalwaysframed
class<? extends tserver> serverclass  boolean canspecifybindip
this option   option
this isalwaysframed   isalwaysframed
this serverclass   serverclass
this canspecifybindip   canspecifybindip
/**
* @return <code>-option</code> so we can get the list of options from
*         {@link #values()}
*/
@override
public string tostring
return     option
string getdescription
stringbuilder sb   new stringbuilder
serverclass getsimplename
if  isalwaysframed
sb append
if  this    default
sb append
return sb tostring
static optiongroup createoptiongroup
optiongroup group   new optiongroup
for  impltype t   values
group addoption new option t option  t getdescription
return group
static impltype getserverimpl configuration conf
string conftype   conf get server_type_conf_key  thread_pool option
for  impltype t   values
if  conftype equals t option
return t
throw new assertionerror     conftype
static void setserverimpl commandline cmd  configuration conf
impltype chosentype   null
int numchosen   0
for  impltype t   values
if  cmd hasoption t option
chosentype   t
numchosen
if  numchosen < 1
log info
chosentype   default
else if  numchosen > 1
throw new assertionerror
arrays tostring values
log info     chosentype option
conf set server_type_conf_key  chosentype option
public string simpleclassname
return serverclass getsimplename
public static list<string> serversthatcannotspecifybindip
list<string> l   new arraylist<string>
for  impltype t   values
if   t canspecifybindip
l add t simpleclassname
return l
public thriftserverrunner configuration conf  throws ioexception
this conf  new thriftserverrunner hbasehandler conf
public thriftserverrunner configuration conf  hbasehandler handler
this conf   hbaseconfiguration create conf
this listenport   conf getint port_conf_key  default_listen_port
this metrics   new thriftmetrics conf  thriftmetrics thriftservertype one
handler initmetrics metrics
this handler   hbasehandlermetricsproxy newinstance handler  metrics  conf
/*
* runs the thrift server
*/
@override
public void run
try
setupserver
tserver serve
catch  exception e
log fatal    e
// crash the process if the thriftserver is not running
system exit  1
public void shutdown
if  tserver    null
tserver stop
tserver   null
/**
* setting up the thrift tserver
*/
private void setupserver   throws exception
// construct correct protocolfactory
tprotocolfactory protocolfactory
if  conf getboolean compact_conf_key  false
log debug
protocolfactory   new tcompactprotocol factory
else
log debug
protocolfactory   new tbinaryprotocol factory
hbase processor<hbase iface> processor
new hbase processor<hbase iface> handler
impltype impltype   impltype getserverimpl conf
// construct correct transportfactory
ttransportfactory transportfactory
if  conf getboolean framed_conf_key  false     impltype isalwaysframed
transportfactory   new tframedtransport factory
log debug
else
transportfactory   new ttransportfactory
if  conf get bind_conf_key     null     impltype canspecifybindip
log error     joiner on    join
impltype serversthatcannotspecifybindip
throw new runtimeexception
bind_conf_key       impltype
if  impltype    impltype hs_ha    impltype    impltype nonblocking
impltype    impltype threaded_selector
inetaddress listenaddress   getbindaddress conf
tnonblockingservertransport servertransport   new tnonblockingserversocket
new inetsocketaddress listenaddress  listenport
if  impltype    impltype nonblocking
tnonblockingserver args serverargs
new tnonblockingserver args servertransport
serverargs processor processor
transportfactory transportfactory
protocolfactory protocolfactory
tserver   new tnonblockingserver serverargs
else if  impltype    impltype hs_ha
thshaserver args serverargs   new thshaserver args servertransport
callqueue callqueue
new callqueue new linkedblockingqueue<call>    metrics
executorservice executorservice   createexecutor
callqueue  serverargs getworkerthreads
serverargs executorservice executorservice
processor processor
transportfactory transportfactory
protocolfactory protocolfactory
tserver   new thshaserver serverargs
else      threaded_selector
tthreadedselectorserver args serverargs
new hthreadedselectorserverargs servertransport  conf
callqueue callqueue
new callqueue new linkedblockingqueue<call>    metrics
executorservice executorservice   createexecutor
callqueue  serverargs getworkerthreads
serverargs executorservice executorservice
processor processor
transportfactory transportfactory
protocolfactory protocolfactory
tserver   new tthreadedselectorserver serverargs
log info     impltype simpleclassname
integer tostring listenport
else if  impltype    impltype thread_pool
// thread pool server. get the ip address to bind to.
inetaddress listenaddress   getbindaddress conf
tservertransport servertransport   new tserversocket
new inetsocketaddress listenaddress  listenport
tboundedthreadpoolserver args serverargs
new tboundedthreadpoolserver args servertransport  conf
serverargs processor processor
transportfactory transportfactory
protocolfactory protocolfactory
log info     impltype thread_pool simpleclassname
listenaddress       integer tostring listenport
serverargs
tboundedthreadpoolserver tserver
new tboundedthreadpoolserver serverargs  metrics
this tserver   tserver
else
throw new assertionerror
impltype simpleclassname
// a sanity check that we instantiated the right type of server.
if  tserver getclass      impltype serverclass
throw new assertionerror
impltype serverclass getname
tserver getclass   getname
registerfilters conf
executorservice createexecutor blockingqueue<runnable> callqueue
int workerthreads
threadfactorybuilder tfb   new threadfactorybuilder
tfb setdaemon true
tfb setnameformat
return new threadpoolexecutor workerthreads  workerthreads
long max_value  timeunit seconds  callqueue  tfb build
private inetaddress getbindaddress configuration conf
throws unknownhostexception
string bindaddressstr   conf get bind_conf_key  default_bind_addr
return inetaddress getbyname bindaddressstr
protected static class resultscannerwrapper
private final resultscanner scanner
private final boolean sortcolumns
public resultscannerwrapper resultscanner resultscanner
boolean sortresultcolumns
scanner   resultscanner
sortcolumns   sortresultcolumns
public resultscanner getscanner
return scanner
public boolean iscolumnsorted
return sortcolumns
/**
* the hbasehandler is a glue object that connects thrift rpc calls to the
* hbase client api primarily defined in the hbaseadmin and htable objects.
*/
public static class hbasehandler implements hbase iface
protected configuration conf
protected volatile hbaseadmin admin   null
protected final log log   logfactory getlog this getclass   getname
// nextscannerid and scannermap are used to manage scanner state
protected int nextscannerid   0
protected hashmap<integer  resultscannerwrapper> scannermap   null
private thriftmetrics metrics   null
private static threadlocal<map<string  htable>> threadlocaltables
new threadlocal<map<string  htable>>
@override
protected map<string  htable> initialvalue
return new treemap<string  htable>
incrementcoalescer coalescer   null
/**
* returns a list of all the column families for a given htable.
*
* @param table
* @return
* @throws ioexception
*/
byte getallcolumns htable table  throws ioexception
hcolumndescriptor cds   table gettabledescriptor   getcolumnfamilies
byte columns   new byte
for  int i   0  i < cds length  i
columns   bytes add cds getname
keyvalue column_family_delim_array
return columns
/**
* creates and returns an htable instance from a given table name.
*
* @param tablename
*          name of table
* @return htable object
* @throws ioexception
* @throws ioerror
*/
public htable gettable final byte tablename  throws
ioexception
string table   new string tablename
map<string  htable> tables   threadlocaltables get
if   tables containskey table
tables put table  new htable conf  tablename
return tables get table
public htable gettable final bytebuffer tablename  throws ioexception
return gettable getbytes tablename
/**
* assigns a unique id to the scanner and adds the mapping to an internal
* hash-map.
*
* @param scanner
* @return integer scanner id
*/
protected synchronized int addscanner resultscanner scanner boolean sortcolumns
int id   nextscannerid
resultscannerwrapper resultscannerwrapper   new resultscannerwrapper scanner  sortcolumns
scannermap put id  resultscannerwrapper
return id
/**
* returns the scanner associated with the specified id.
*
* @param id
* @return a scanner, or null if id was invalid.
*/
protected synchronized resultscannerwrapper getscanner int id
return scannermap get id
/**
* removes the scanner associated with the specified id from the internal
* id->scanner hash-map.
*
* @param id
* @return a scanner, or null if id was invalid.
*/
protected synchronized resultscannerwrapper removescanner int id
return scannermap remove id
/**
* constructs an hbasehandler object.
* @throws ioexception
*/
protected hbasehandler
throws ioexception
this hbaseconfiguration create
protected hbasehandler final configuration c  throws ioexception
this conf   c
scannermap   new hashmap<integer  resultscannerwrapper>
this coalescer   new incrementcoalescer this
/**
* obtain hbaseadmin. creates the instance if it is not already created.
*/
private hbaseadmin gethbaseadmin   throws ioexception
if  admin    null
synchronized  this
if  admin    null
admin   new hbaseadmin conf
return admin
@override
public void enabletable bytebuffer tablename  throws ioerror
try
gethbaseadmin   enabletable getbytes tablename
catch  ioexception e
log warn e getmessage    e
throw new ioerror e getmessage
@override
public void disabletable bytebuffer tablename  throws ioerror
try
gethbaseadmin   disabletable getbytes tablename
catch  ioexception e
log warn e getmessage    e
throw new ioerror e getmessage
@override
public boolean istableenabled bytebuffer tablename  throws ioerror
try
return htable istableenabled this conf  getbytes tablename
catch  ioexception e
log warn e getmessage    e
throw new ioerror e getmessage
@override
public void compact bytebuffer tablenameorregionname  throws ioerror
try
gethbaseadmin   compact getbytes tablenameorregionname
catch  interruptedexception e
throw new ioerror e getmessage
catch  ioexception e
log warn e getmessage    e
throw new ioerror e getmessage
@override
public void majorcompact bytebuffer tablenameorregionname  throws ioerror
try
gethbaseadmin   majorcompact getbytes tablenameorregionname
catch  interruptedexception e
log warn e getmessage    e
throw new ioerror e getmessage
catch  ioexception e
log warn e getmessage    e
throw new ioerror e getmessage
@override
public list<bytebuffer> gettablenames   throws ioerror
try
htabledescriptor tables   this gethbaseadmin   listtables
arraylist<bytebuffer> list   new arraylist<bytebuffer> tables length
for  int i   0  i < tables length  i
list add bytebuffer wrap tables gettablename   getname
return list
catch  ioexception e
log warn e getmessage    e
throw new ioerror e getmessage
/**
* @return the list of regions in the given table, or an empty list if the table does not exist
*/
@override
public list<tregioninfo> gettableregions bytebuffer tablename
throws ioerror
try
htable table
try
table   gettable tablename
catch  tablenotfoundexception ex
return new arraylist<tregioninfo>
map<hregioninfo  servername> regionlocations
table getregionlocations
list<tregioninfo> results   new arraylist<tregioninfo>
for  map entry<hregioninfo  servername> entry
regionlocations entryset
hregioninfo info   entry getkey
servername servername   entry getvalue
tregioninfo region   new tregioninfo
region servername   bytebuffer wrap
bytes tobytes servername gethostname
region port   servername getport
region startkey   bytebuffer wrap info getstartkey
region endkey   bytebuffer wrap info getendkey
region id   info getregionid
region name   bytebuffer wrap info getregionname
region version   info getversion
results add region
return results
catch  tablenotfoundexception e
// return empty list for non-existing table
return collections emptylist
catch  ioexception e
log warn e getmessage    e
throw new ioerror e getmessage
@deprecated
@override
public list<tcell> get
bytebuffer tablename  bytebuffer row  bytebuffer column
map<bytebuffer  bytebuffer> attributes
throws ioerror
byte  famandqf   keyvalue parsecolumn getbytes column
if famandqf length    1
return get tablename  row  famandqf  new byte  attributes
return get tablename  row  famandqf  famandqf  attributes
protected list<tcell> get bytebuffer tablename
bytebuffer row
byte family
byte qualifier
map<bytebuffer  bytebuffer> attributes  throws ioerror
try
htable table   gettable tablename
get get   new get getbytes row
addattributes get  attributes
if  qualifier    null    qualifier length    0
get addfamily family
else
get addcolumn family  qualifier
result result   table get get
return thriftutilities cellfromhbase result raw
catch  ioexception e
log warn e getmessage    e
throw new ioerror e getmessage
@deprecated
@override
public list<tcell> getver bytebuffer tablename  bytebuffer row
bytebuffer column  int numversions
map<bytebuffer  bytebuffer> attributes  throws ioerror
byte  famandqf   keyvalue parsecolumn getbytes column
if famandqf length    1
return getver tablename  row  famandqf
new byte  numversions  attributes
return getver tablename  row
famandqf  famandqf  numversions  attributes
public list<tcell> getver bytebuffer tablename  bytebuffer row
byte family
byte qualifier  int numversions
map<bytebuffer  bytebuffer> attributes  throws ioerror
try
htable table   gettable tablename
get get   new get getbytes row
addattributes get  attributes
get addcolumn family  qualifier
get setmaxversions numversions
result result   table get get
return thriftutilities cellfromhbase result raw
catch  ioexception e
log warn e getmessage    e
throw new ioerror e getmessage
@deprecated
@override
public list<tcell> getverts bytebuffer tablename
bytebuffer row
bytebuffer column
long timestamp
int numversions
map<bytebuffer  bytebuffer> attributes  throws ioerror
byte  famandqf   keyvalue parsecolumn getbytes column
if famandqf length    1
return getverts tablename  row  famandqf  new byte  timestamp
numversions  attributes
return getverts tablename  row  famandqf  famandqf  timestamp
numversions  attributes
protected list<tcell> getverts bytebuffer tablename
bytebuffer row  byte  family
byte  qualifier  long timestamp  int numversions
map<bytebuffer  bytebuffer> attributes  throws ioerror
try
htable table   gettable tablename
get get   new get getbytes row
addattributes get  attributes
get addcolumn family  qualifier
get settimerange long min_value  timestamp
get setmaxversions numversions
result result   table get get
return thriftutilities cellfromhbase result raw
catch  ioexception e
log warn e getmessage    e
throw new ioerror e getmessage
@override
public list<trowresult> getrow bytebuffer tablename  bytebuffer row
map<bytebuffer  bytebuffer> attributes  throws ioerror
return getrowwithcolumnsts tablename  row  null
hconstants latest_timestamp
attributes
@override
public list<trowresult> getrowwithcolumns bytebuffer tablename
bytebuffer row
list<bytebuffer> columns
map<bytebuffer  bytebuffer> attributes  throws ioerror
return getrowwithcolumnsts tablename  row  columns
hconstants latest_timestamp
attributes
@override
public list<trowresult> getrowts bytebuffer tablename  bytebuffer row
long timestamp  map<bytebuffer  bytebuffer> attributes  throws ioerror
return getrowwithcolumnsts tablename  row  null
timestamp  attributes
@override
public list<trowresult> getrowwithcolumnsts
bytebuffer tablename  bytebuffer row  list<bytebuffer> columns
long timestamp  map<bytebuffer  bytebuffer> attributes  throws ioerror
try
htable table   gettable tablename
if  columns    null
get get   new get getbytes row
addattributes get  attributes
get settimerange long min_value  timestamp
result result   table get get
return thriftutilities rowresultfromhbase result
get get   new get getbytes row
addattributes get  attributes
for bytebuffer column   columns
byte  famandqf   keyvalue parsecolumn getbytes column
if  famandqf length    1
get addfamily famandqf
else
get addcolumn famandqf  famandqf
get settimerange long min_value  timestamp
result result   table get get
return thriftutilities rowresultfromhbase result
catch  ioexception e
log warn e getmessage    e
throw new ioerror e getmessage
@override
public list<trowresult> getrows bytebuffer tablename
list<bytebuffer> rows
map<bytebuffer  bytebuffer> attributes
throws ioerror
return getrowswithcolumnsts tablename  rows  null
hconstants latest_timestamp
attributes
@override
public list<trowresult> getrowswithcolumns bytebuffer tablename
list<bytebuffer> rows
list<bytebuffer> columns
map<bytebuffer  bytebuffer> attributes  throws ioerror
return getrowswithcolumnsts tablename  rows  columns
hconstants latest_timestamp
attributes
@override
public list<trowresult> getrowsts bytebuffer tablename
list<bytebuffer> rows
long timestamp
map<bytebuffer  bytebuffer> attributes  throws ioerror
return getrowswithcolumnsts tablename  rows  null
timestamp  attributes
@override
public list<trowresult> getrowswithcolumnsts bytebuffer tablename
list<bytebuffer> rows
list<bytebuffer> columns  long timestamp
map<bytebuffer  bytebuffer> attributes  throws ioerror
try
list<get> gets   new arraylist<get> rows size
htable table   gettable tablename
if  metrics    null
metrics incnumrowkeysinbatchget rows size
for  bytebuffer row   rows
get get   new get getbytes row
addattributes get  attributes
if  columns    null
for bytebuffer column   columns
byte  famandqf   keyvalue parsecolumn getbytes column
if  famandqf length    1
get addfamily famandqf
else
get addcolumn famandqf  famandqf
get settimerange long min_value  timestamp
gets add get
result result   table get gets
return thriftutilities rowresultfromhbase result
catch  ioexception e
log warn e getmessage    e
throw new ioerror e getmessage
@override
public void deleteall
bytebuffer tablename  bytebuffer row  bytebuffer column
map<bytebuffer  bytebuffer> attributes
throws ioerror
deleteallts tablename  row  column  hconstants latest_timestamp
attributes
@override
public void deleteallts bytebuffer tablename
bytebuffer row
bytebuffer column
long timestamp  map<bytebuffer  bytebuffer> attributes  throws ioerror
try
htable table   gettable tablename
delete delete    new delete getbytes row
addattributes delete  attributes
byte  famandqf   keyvalue parsecolumn getbytes column
if  famandqf length    1
delete deletefamily famandqf  timestamp
else
delete deletecolumns famandqf  famandqf  timestamp
table delete delete
catch  ioexception e
log warn e getmessage    e
throw new ioerror e getmessage
@override
public void deleteallrow
bytebuffer tablename  bytebuffer row
map<bytebuffer  bytebuffer> attributes  throws ioerror
deleteallrowts tablename  row  hconstants latest_timestamp  attributes
@override
public void deleteallrowts
bytebuffer tablename  bytebuffer row  long timestamp
map<bytebuffer  bytebuffer> attributes  throws ioerror
try
htable table   gettable tablename
delete delete    new delete getbytes row   timestamp
addattributes delete  attributes
table delete delete
catch  ioexception e
log warn e getmessage    e
throw new ioerror e getmessage
@override
public void createtable bytebuffer in_tablename
list<columndescriptor> columnfamilies  throws ioerror
illegalargument  alreadyexists
byte  tablename   getbytes in_tablename
try
if  gethbaseadmin   tableexists tablename
throw new alreadyexists
htabledescriptor desc   new htabledescriptor tablename valueof tablename
for  columndescriptor col   columnfamilies
hcolumndescriptor coldesc   thriftutilities coldescfromthrift col
desc addfamily coldesc
gethbaseadmin   createtable desc
catch  ioexception e
log warn e getmessage    e
throw new ioerror e getmessage
catch  illegalargumentexception e
log warn e getmessage    e
throw new illegalargument e getmessage
@override
public void deletetable bytebuffer in_tablename  throws ioerror
byte  tablename   getbytes in_tablename
if  log isdebugenabled
log debug     bytes tostring tablename
try
if   gethbaseadmin   tableexists tablename
throw new ioexception
gethbaseadmin   deletetable tablename
catch  ioexception e
log warn e getmessage    e
throw new ioerror e getmessage
@override
public void mutaterow bytebuffer tablename  bytebuffer row
list<mutation> mutations  map<bytebuffer  bytebuffer> attributes
throws ioerror  illegalargument
mutaterowts tablename  row  mutations  hconstants latest_timestamp
attributes
@override
public void mutaterowts bytebuffer tablename  bytebuffer row
list<mutation> mutations  long timestamp
map<bytebuffer  bytebuffer> attributes
throws ioerror  illegalargument
htable table   null
try
table   gettable tablename
put put   new put getbytes row   timestamp
addattributes put  attributes
delete delete   new delete getbytes row
addattributes delete  attributes
if  metrics    null
metrics incnumrowkeysinbatchmutate mutations size
// i apologize for all this mess :)
for  mutation m   mutations
byte famandqf   keyvalue parsecolumn getbytes m column
if  m isdelete
if  famandqf length    1
delete deletefamily famandqf  timestamp
else
delete deletecolumns famandqf  famandqf  timestamp
delete setdurability m writetowal ? durability sync_wal
durability skip_wal
else
if famandqf length    1
put add famandqf  hconstants empty_byte_array
m value    null ? getbytes m value
hconstants empty_byte_array
else
put add famandqf  famandqf
m value    null ? getbytes m value
hconstants empty_byte_array
put setdurability m writetowal ? durability sync_wal   durability skip_wal
if   delete isempty
table delete delete
if   put isempty
table put put
catch  ioexception e
log warn e getmessage    e
throw new ioerror e getmessage
catch  illegalargumentexception e
log warn e getmessage    e
throw new illegalargument e getmessage
@override
public void mutaterows bytebuffer tablename  list<batchmutation> rowbatches
map<bytebuffer  bytebuffer> attributes
throws ioerror  illegalargument  texception
mutaterowsts tablename  rowbatches  hconstants latest_timestamp  attributes
@override
public void mutaterowsts
bytebuffer tablename  list<batchmutation> rowbatches  long timestamp
map<bytebuffer  bytebuffer> attributes
throws ioerror  illegalargument  texception
list<put> puts   new arraylist<put>
list<delete> deletes   new arraylist<delete>
for  batchmutation batch   rowbatches
byte row   getbytes batch row
list<mutation> mutations   batch mutations
delete delete   new delete row
addattributes delete  attributes
put put   new put row  timestamp
addattributes put  attributes
for  mutation m   mutations
byte famandqf   keyvalue parsecolumn getbytes m column
if  m isdelete
// no qualifier, family only.
if  famandqf length    1
delete deletefamily famandqf  timestamp
else
delete deletecolumns famandqf  famandqf  timestamp
delete setdurability m writetowal ? durability sync_wal
durability skip_wal
else
if famandqf length    1
put add famandqf  hconstants empty_byte_array
m value    null ? getbytes m value
hconstants empty_byte_array
else
put add famandqf  famandqf
m value    null ? getbytes m value
hconstants empty_byte_array
put setdurability m writetowal ? durability sync_wal   durability skip_wal
if   delete isempty
deletes add delete
if   put isempty
puts add put
htable table   null
try
table   gettable tablename
if   puts isempty
table put puts
if   deletes isempty
table delete deletes
catch  ioexception e
log warn e getmessage    e
throw new ioerror e getmessage
catch  illegalargumentexception e
log warn e getmessage    e
throw new illegalargument e getmessage
@deprecated
@override
public long atomicincrement
bytebuffer tablename  bytebuffer row  bytebuffer column  long amount
throws ioerror  illegalargument  texception
byte  famandqf   keyvalue parsecolumn getbytes column
if famandqf length    1
return atomicincrement tablename  row  famandqf  new byte
amount
return atomicincrement tablename  row  famandqf  famandqf  amount
protected long atomicincrement bytebuffer tablename  bytebuffer row
byte  family  byte  qualifier  long amount
throws ioerror  illegalargument  texception
htable table
try
table   gettable tablename
return table incrementcolumnvalue
getbytes row   family  qualifier  amount
catch  ioexception e
log warn e getmessage    e
throw new ioerror e getmessage
public void scannerclose int id  throws ioerror  illegalargument
log debug     id
resultscannerwrapper resultscannerwrapper   getscanner id
if  resultscannerwrapper    null
string message
log warn message
throw new illegalargument
resultscannerwrapper getscanner   close
removescanner id
@override
public list<trowresult> scannergetlist int id int nbrows
throws illegalargument  ioerror
log debug     id
resultscannerwrapper resultscannerwrapper   getscanner id
if  null    resultscannerwrapper
string message
log warn message
throw new illegalargument
result  results   null
try
results   resultscannerwrapper getscanner   next nbrows
if  null    results
return new arraylist<trowresult>
catch  ioexception e
log warn e getmessage    e
throw new ioerror e getmessage
return thriftutilities rowresultfromhbase results  resultscannerwrapper iscolumnsorted
@override
public list<trowresult> scannerget int id  throws illegalargument  ioerror
return scannergetlist id 1
public int scanneropenwithscan bytebuffer tablename  tscan tscan
map<bytebuffer  bytebuffer> attributes
throws ioerror
try
htable table   gettable tablename
scan scan   new scan
addattributes scan  attributes
if  tscan issetstartrow
scan setstartrow tscan getstartrow
if  tscan issetstoprow
scan setstoprow tscan getstoprow
if  tscan issettimestamp
scan settimerange long min_value  tscan gettimestamp
if  tscan issetcaching
scan setcaching tscan getcaching
if  tscan issetbatchsize
scan setbatch tscan getbatchsize
if  tscan issetcolumns      tscan getcolumns   size      0
for bytebuffer column   tscan getcolumns
byte  famqf   keyvalue parsecolumn getbytes column
if famqf length    1
scan addfamily famqf
else
scan addcolumn famqf  famqf
if  tscan issetfilterstring
parsefilter parsefilter   new parsefilter
scan setfilter
parsefilter parsefilterstring tscan getfilterstring
return addscanner table getscanner scan   tscan sortcolumns
catch  ioexception e
log warn e getmessage    e
throw new ioerror e getmessage
@override
public int scanneropen bytebuffer tablename  bytebuffer startrow
list<bytebuffer> columns
map<bytebuffer  bytebuffer> attributes  throws ioerror
try
htable table   gettable tablename
scan scan   new scan getbytes startrow
addattributes scan  attributes
if columns    null    columns size      0
for bytebuffer column   columns
byte  famqf   keyvalue parsecolumn getbytes column
if famqf length    1
scan addfamily famqf
else
scan addcolumn famqf  famqf
return addscanner table getscanner scan   false
catch  ioexception e
log warn e getmessage    e
throw new ioerror e getmessage
@override
public int scanneropenwithstop bytebuffer tablename  bytebuffer startrow
bytebuffer stoprow  list<bytebuffer> columns
map<bytebuffer  bytebuffer> attributes
throws ioerror  texception
try
htable table   gettable tablename
scan scan   new scan getbytes startrow   getbytes stoprow
addattributes scan  attributes
if columns    null    columns size      0
for bytebuffer column   columns
byte  famqf   keyvalue parsecolumn getbytes column
if famqf length    1
scan addfamily famqf
else
scan addcolumn famqf  famqf
return addscanner table getscanner scan   false
catch  ioexception e
log warn e getmessage    e
throw new ioerror e getmessage
@override
public int scanneropenwithprefix bytebuffer tablename
bytebuffer startandprefix
list<bytebuffer> columns
map<bytebuffer  bytebuffer> attributes
throws ioerror  texception
try
htable table   gettable tablename
scan scan   new scan getbytes startandprefix
addattributes scan  attributes
filter f   new whilematchfilter
new prefixfilter getbytes startandprefix
scan setfilter f
if  columns    null    columns size      0
for bytebuffer column   columns
byte  famqf   keyvalue parsecolumn getbytes column
if famqf length    1
scan addfamily famqf
else
scan addcolumn famqf  famqf
return addscanner table getscanner scan   false
catch  ioexception e
log warn e getmessage    e
throw new ioerror e getmessage
@override
public int scanneropents bytebuffer tablename  bytebuffer startrow
list<bytebuffer> columns  long timestamp
map<bytebuffer  bytebuffer> attributes  throws ioerror  texception
try
htable table   gettable tablename
scan scan   new scan getbytes startrow
addattributes scan  attributes
scan settimerange long min_value  timestamp
if  columns    null    columns size      0
for  bytebuffer column   columns
byte  famqf   keyvalue parsecolumn getbytes column
if famqf length    1
scan addfamily famqf
else
scan addcolumn famqf  famqf
return addscanner table getscanner scan   false
catch  ioexception e
log warn e getmessage    e
throw new ioerror e getmessage
@override
public int scanneropenwithstopts bytebuffer tablename  bytebuffer startrow
bytebuffer stoprow  list<bytebuffer> columns  long timestamp
map<bytebuffer  bytebuffer> attributes
throws ioerror  texception
try
htable table   gettable tablename
scan scan   new scan getbytes startrow   getbytes stoprow
addattributes scan  attributes
scan settimerange long min_value  timestamp
if  columns    null    columns size      0
for  bytebuffer column   columns
byte  famqf   keyvalue parsecolumn getbytes column
if famqf length    1
scan addfamily famqf
else
scan addcolumn famqf  famqf
scan settimerange long min_value  timestamp
return addscanner table getscanner scan   false
catch  ioexception e
log warn e getmessage    e
throw new ioerror e getmessage
@override
public map<bytebuffer  columndescriptor> getcolumndescriptors
bytebuffer tablename  throws ioerror  texception
try
treemap<bytebuffer  columndescriptor> columns
new treemap<bytebuffer  columndescriptor>
htable table   gettable tablename
htabledescriptor desc   table gettabledescriptor
for  hcolumndescriptor e   desc getfamilies
columndescriptor col   thriftutilities coldescfromhbase e
columns put col name  col
return columns
catch  ioexception e
log warn e getmessage    e
throw new ioerror e getmessage
@override
public list<tcell> getroworbefore bytebuffer tablename  bytebuffer row
bytebuffer family  throws ioerror
try
htable table   gettable getbytes tablename
result result   table getroworbefore getbytes row   getbytes family
return thriftutilities cellfromhbase result raw
catch  ioexception e
log warn e getmessage    e
throw new ioerror e getmessage
@override
public tregioninfo getregioninfo bytebuffer searchrow  throws ioerror
try
htable table   gettable tablename meta_table_name getname
byte row   getbytes searchrow
result startrowresult   table getroworbefore
row  hconstants catalog_family
if  startrowresult    null
throw new ioexception    tablename meta_table_name
bytes tostringbinary row
// find region start and end keys
hregioninfo regioninfo   hregioninfo gethregioninfo startrowresult
if  regioninfo    null
throw new ioexception
bytes tostringbinary row
tregioninfo region   new tregioninfo
region setstartkey regioninfo getstartkey
region setendkey regioninfo getendkey
region id   regioninfo getregionid
region setname regioninfo getregionname
region version   regioninfo getversion
// find region assignment to server
servername servername   hregioninfo getservername startrowresult
if  servername    null
region setservername bytes tobytes servername gethostname
region port   servername getport
return region
catch  ioexception e
log warn e getmessage    e
throw new ioerror e getmessage
private void initmetrics thriftmetrics metrics
this metrics   metrics
@override
public void increment tincrement tincrement  throws ioerror  texception
if  tincrement getrow   length    0    tincrement gettable   length    0
throw new texception
if  conf getboolean coalesce_inc_key  false
this coalescer queueincrement tincrement
return
try
htable table   gettable tincrement gettable
increment inc   thriftutilities incrementfromthrift tincrement
table increment inc
catch  ioexception e
log warn e getmessage    e
throw new ioerror e getmessage
@override
public void incrementrows list<tincrement> tincrements  throws ioerror  texception
if  conf getboolean coalesce_inc_key  false
this coalescer queueincrements tincrements
return
for  tincrement tinc   tincrements
increment tinc
/**
* adds all the attributes into the operation object
*/
private static void addattributes operationwithattributes op
map<bytebuffer  bytebuffer> attributes
if  attributes    null    attributes size      0
return
for  map entry<bytebuffer  bytebuffer> entry   attributes entryset
string name   bytes tostringbinary getbytes entry getkey
byte value    getbytes entry getvalue
op setattribute name  value
public static void registerfilters configuration conf
string filters   conf getstrings
if filters    null
for string filterclass  filters
string filterpart   filterclass split
if filterpart length    2
log warn     filterclass
else
parsefilter registerfilter filterpart  filterpart