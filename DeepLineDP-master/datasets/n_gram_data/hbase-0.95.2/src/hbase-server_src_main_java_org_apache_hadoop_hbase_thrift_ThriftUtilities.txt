/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase thrift
import java nio bytebuffer
import java util arraylist
import java util list
import java util treemap
import org apache hadoop classification interfaceaudience
import org apache hadoop hbase hcolumndescriptor
import org apache hadoop hbase keyvalue
import org apache hadoop hbase client increment
import org apache hadoop hbase client result
import org apache hadoop hbase io compress compression
import org apache hadoop hbase regionserver bloomtype
import org apache hadoop hbase thrift generated columndescriptor
import org apache hadoop hbase thrift generated illegalargument
import org apache hadoop hbase thrift generated tcell
import org apache hadoop hbase thrift generated tincrement
import org apache hadoop hbase thrift generated tcolumn
import org apache hadoop hbase thrift generated trowresult
import org apache hadoop hbase util bytes
@interfaceaudience private
public class thriftutilities
/**
* this utility method creates a new hbase hcolumndescriptor object based on a
* thrift columndescriptor "struct".
*
* @param in
*          thrift columndescriptor object
* @return hcolumndescriptor
* @throws illegalargument
*/
static public hcolumndescriptor coldescfromthrift columndescriptor in
throws illegalargument
compression algorithm comp
compression getcompressionalgorithmbyname in compression tolowercase
bloomtype bt
bloomtype valueof in bloomfiltertype
if  in name    null     in name hasremaining
throw new illegalargument
byte  parsedname   keyvalue parsecolumn bytes getbytes in name
hcolumndescriptor col   new hcolumndescriptor parsedname
setmaxversions in maxversions
setcompressiontype comp
setinmemory in inmemory
setblockcacheenabled in blockcacheenabled
settimetolive in timetolive
setbloomfiltertype bt
return col
/**
* this utility method creates a new thrift columndescriptor "struct" based on
* an hbase hcolumndescriptor object.
*
* @param in
*          hbase hcolumndescriptor object
* @return thrift columndescriptor
*/
static public columndescriptor coldescfromhbase hcolumndescriptor in
columndescriptor col   new columndescriptor
col name   bytebuffer wrap bytes add in getname    keyvalue column_family_delim_array
col maxversions   in getmaxversions
col compression   in getcompression   tostring
col inmemory   in isinmemory
col blockcacheenabled   in isblockcacheenabled
col bloomfiltertype   in getbloomfiltertype   tostring
return col
/**
* this utility method creates a list of thrift tcell "struct" based on
* an hbase cell object. the empty list is returned if the input is null.
*
* @param in
*          hbase cell object
* @return thrift tcell array
*/
static public list<tcell> cellfromhbase keyvalue in
list<tcell> list   new arraylist<tcell> 1
if  in    null
list add new tcell bytebuffer wrap in getvalue     in gettimestamp
return list
/**
* this utility method creates a list of thrift tcell "struct" based on
* an hbase cell array. the empty list is returned if the input is null.
* @param in hbase cell array
* @return thrift tcell array
*/
static public list<tcell> cellfromhbase keyvalue in
list<tcell> list   null
if  in    null
list   new arraylist<tcell> in length
for  int i   0  i < in length  i
list add new tcell bytebuffer wrap in getvalue     in gettimestamp
else
list   new arraylist<tcell> 0
return list
/**
* this utility method creates a list of thrift trowresult "struct" based on
* an hbase rowresult object. the empty list is returned if the input is
* null.
*
* @param in
*          hbase rowresult object
* @param sortcolumns
*          this boolean dictates if row data is returned in a sorted order
*          sortcolumns = true will set trowresult's sortedcolumns member
*                        which is an arraylist of tcolumn struct
*          sortcolumns = false will set trowresult's columns member which is
*                        a map of columnname and tcell struct
* @return thrift trowresult array
*/
static public list<trowresult> rowresultfromhbase result in  boolean sortcolumns
list<trowresult> results   new arraylist<trowresult>
for   result result_   in
if result_    null    result_ isempty
continue
trowresult result   new trowresult
result row   bytebuffer wrap result_ getrow
if  sortcolumns
result sortedcolumns   new arraylist<tcolumn>
for  keyvalue kv   result_ raw
result sortedcolumns add new tcolumn
bytebuffer wrap keyvalue makecolumn kv getfamily
kv getqualifier
new tcell bytebuffer wrap kv getvalue     kv gettimestamp
else
result columns   new treemap<bytebuffer  tcell>
for  keyvalue kv   result_ raw
result columns put
bytebuffer wrap keyvalue makecolumn kv getfamily
kv getqualifier
new tcell bytebuffer wrap kv getvalue     kv gettimestamp
results add result
return results
/**
* this utility method creates a list of thrift trowresult "struct" based on
* an array of hbase rowresult objects. the empty list is returned if the input is
* null.
*
* @param in
*          array of hbase rowresult objects
* @return thrift trowresult array
*/
static public list<trowresult> rowresultfromhbase result in
return rowresultfromhbase in  false
static public list<trowresult> rowresultfromhbase result in
result  result     in
return rowresultfromhbase result
/**
* from a {@link tincrement} create an {@link increment}.
* @param tincrement the thrift version of an increment
* @return an increment that the {@link tincrement} represented.
*/
public static increment incrementfromthrift tincrement tincrement
increment inc   new increment tincrement getrow
byte famandqf   keyvalue parsecolumn tincrement getcolumn
if  famandqf length <1   return null
byte qual   famandqf length    1 ? new byte  famandqf
inc addcolumn famandqf  qual  tincrement getammount
return inc