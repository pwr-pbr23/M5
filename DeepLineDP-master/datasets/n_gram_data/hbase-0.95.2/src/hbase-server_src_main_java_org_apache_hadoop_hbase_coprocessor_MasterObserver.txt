/*
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
* http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase coprocessor
import java io ioexception
import java util list
import org apache hadoop classification interfaceaudience
import org apache hadoop classification interfacestability
import org apache hadoop hbase coprocessor
import org apache hadoop hbase tablename
import org apache hadoop hbase hcolumndescriptor
import org apache hadoop hbase hregioninfo
import org apache hadoop hbase htabledescriptor
import org apache hadoop hbase namespacedescriptor
import org apache hadoop hbase servername
import org apache hadoop hbase master regionplan
import org apache hadoop hbase protobuf generated hbaseprotos snapshotdescription
/**
* defines coprocessor hooks for interacting with operations on the
* {@link org.apache.hadoop.hbase.master.hmaster} process.
*/
@interfaceaudience public
@interfacestability evolving
public interface masterobserver extends coprocessor
/**
* called before a new table is created by
* {@link org.apache.hadoop.hbase.master.hmaster}.  called as part of create
* table rpc call.
* it can't bypass the default action, e.g., ctx.bypass() won't have effect.
* @param ctx the environment to interact with the framework and master
* @param desc the htabledescriptor for the table
* @param regions the initial regions created for the table
* @throws ioexception
*/
void precreatetable final observercontext<mastercoprocessorenvironment> ctx
htabledescriptor desc  hregioninfo regions  throws ioexception
/**
* called after the createtable operation has been requested.  called as part
* of create table rpc call.
* @param ctx the environment to interact with the framework and master
* @param desc the htabledescriptor for the table
* @param regions the initial regions created for the table
* @throws ioexception
*/
void postcreatetable final observercontext<mastercoprocessorenvironment> ctx
htabledescriptor desc  hregioninfo regions  throws ioexception
/**
* called before a new table is created by
* {@link org.apache.hadoop.hbase.master.hmaster}.  called as part of create
* table handler and it is async to the create rpc call.
* it can't bypass the default action, e.g., ctx.bypass() won't have effect.
* @param ctx the environment to interact with the framework and master
* @param desc the htabledescriptor for the table
* @param regions the initial regions created for the table
* @throws ioexception
*/
void precreatetablehandler final observercontext<mastercoprocessorenvironment>
ctx  htabledescriptor desc  hregioninfo regions  throws ioexception
/**
* called after the createtable operation has been requested.  called as part
* of create table rpc call.  called as part of create table handler and
* it is async to the create rpc call.
* @param ctx the environment to interact with the framework and master
* @param desc the htabledescriptor for the table
* @param regions the initial regions created for the table
* @throws ioexception
*/
void postcreatetablehandler final observercontext<mastercoprocessorenvironment>
ctx  htabledescriptor desc  hregioninfo regions  throws ioexception
/**
* called before {@link org.apache.hadoop.hbase.master.hmaster} deletes a
* table.  called as part of delete table rpc call.
* it can't bypass the default action, e.g., ctx.bypass() won't have effect.
* @param ctx the environment to interact with the framework and master
* @param tablename the name of the table
*/
void predeletetable final observercontext<mastercoprocessorenvironment> ctx
tablename tablename  throws ioexception
/**
* called after the deletetable operation has been requested.  called as part
* of delete table rpc call.
* @param ctx the environment to interact with the framework and master
* @param tablename the name of the table
*/
void postdeletetable final observercontext<mastercoprocessorenvironment> ctx
tablename tablename  throws ioexception
/**
* called before {@link org.apache.hadoop.hbase.master.hmaster} deletes a
* table.  called as part of delete table handler and
* it is async to the delete rpc call.
* it can't bypass the default action, e.g., ctx.bypass() won't have effect.
* @param ctx the environment to interact with the framework and master
* @param tablename the name of the table
*/
void predeletetablehandler
final observercontext<mastercoprocessorenvironment> ctx  tablename tablename
throws ioexception
/**
* called after {@link org.apache.hadoop.hbase.master.hmaster} deletes a
* table.  called as part of delete table handler and it is async to the
* delete rpc call.
* it can't bypass the default action, e.g., ctx.bypass() won't have effect.
* @param ctx the environment to interact with the framework and master
* @param tablename the name of the table
*/
void postdeletetablehandler
final observercontext<mastercoprocessorenvironment> ctx  tablename tablename
throws ioexception
/**
* called prior to modifying a table's properties.  called as part of modify
* table rpc call.
* it can't bypass the default action, e.g., ctx.bypass() won't have effect.
* @param ctx the environment to interact with the framework and master
* @param tablename the name of the table
* @param htd the htabledescriptor
*/
void premodifytable final observercontext<mastercoprocessorenvironment> ctx
final tablename tablename  htabledescriptor htd  throws ioexception
/**
* called after the modifytable operation has been requested.  called as part
* of modify table rpc call.
* @param ctx the environment to interact with the framework and master
* @param tablename the name of the table
* @param htd the htabledescriptor
*/
void postmodifytable final observercontext<mastercoprocessorenvironment> ctx
final tablename tablename  htabledescriptor htd  throws ioexception
/**
* called prior to modifying a table's properties.  called as part of modify
* table handler and it is async to the modify table rpc call.
* it can't bypass the default action, e.g., ctx.bypass() won't have effect.
* @param ctx the environment to interact with the framework and master
* @param tablename the name of the table
* @param htd the htabledescriptor
*/
void premodifytablehandler
final observercontext<mastercoprocessorenvironment> ctx
final tablename tablename  htabledescriptor htd  throws ioexception
/**
* called after to modifying a table's properties.  called as part of modify
* table handler and it is async to the modify table rpc call.
* it can't bypass the default action, e.g., ctx.bypass() won't have effect.
* @param ctx the environment to interact with the framework and master
* @param tablename the name of the table
* @param htd the htabledescriptor
*/
void postmodifytablehandler
final observercontext<mastercoprocessorenvironment> ctx
final tablename tablename  htabledescriptor htd  throws ioexception
/**
* called prior to adding a new column family to the table.  called as part of
* add column rpc call.
* @param ctx the environment to interact with the framework and master
* @param tablename the name of the table
* @param column the hcolumndescriptor
*/
void preaddcolumn final observercontext<mastercoprocessorenvironment> ctx
tablename tablename  hcolumndescriptor column  throws ioexception
/**
* called after the new column family has been created.  called as part of
* add column rpc call.
* @param ctx the environment to interact with the framework and master
* @param tablename the name of the table
* @param column the hcolumndescriptor
*/
void postaddcolumn final observercontext<mastercoprocessorenvironment> ctx
tablename tablename  hcolumndescriptor column  throws ioexception
/**
* called prior to adding a new column family to the table.  called as part of
* add column handler.
* @param ctx the environment to interact with the framework and master
* @param tablename the name of the table
* @param column the hcolumndescriptor
*/
void preaddcolumnhandler
final observercontext<mastercoprocessorenvironment> ctx
tablename tablename  hcolumndescriptor column  throws ioexception
/**
* called after the new column family has been created.  called as part of
* add column handler.
* @param ctx the environment to interact with the framework and master
* @param tablename the name of the table
* @param column the hcolumndescriptor
*/
void postaddcolumnhandler
final observercontext<mastercoprocessorenvironment> ctx
tablename tablename  hcolumndescriptor column  throws ioexception
/**
* called prior to modifying a column family's attributes.  called as part of
* modify column rpc call.
* @param ctx the environment to interact with the framework and master
* @param tablename the name of the table
* @param descriptor the hcolumndescriptor
*/
void premodifycolumn final observercontext<mastercoprocessorenvironment> ctx
tablename tablename  hcolumndescriptor descriptor  throws ioexception
/**
* called after the column family has been updated.  called as part of modify
* column rpc call.
* @param ctx the environment to interact with the framework and master
* @param tablename the name of the table
* @param descriptor the hcolumndescriptor
*/
void postmodifycolumn final observercontext<mastercoprocessorenvironment> ctx
tablename tablename  hcolumndescriptor descriptor  throws ioexception
/**
* called prior to modifying a column family's attributes.  called as part of
* modify column handler.
* @param ctx the environment to interact with the framework and master
* @param tablename the name of the table
* @param descriptor the hcolumndescriptor
*/
void premodifycolumnhandler
final observercontext<mastercoprocessorenvironment> ctx
tablename tablename  hcolumndescriptor descriptor  throws ioexception
/**
* called after the column family has been updated.  called as part of modify
* column handler.
* @param ctx the environment to interact with the framework and master
* @param tablename the name of the table
* @param descriptor the hcolumndescriptor
*/
void postmodifycolumnhandler
final observercontext<mastercoprocessorenvironment> ctx
tablename tablename  hcolumndescriptor descriptor  throws ioexception
/**
* called prior to deleting the entire column family.  called as part of
* delete column rpc call.
* @param ctx the environment to interact with the framework and master
* @param tablename the name of the table
* @param c the column
*/
void predeletecolumn final observercontext<mastercoprocessorenvironment> ctx
final tablename tablename  final byte c  throws ioexception
/**
* called after the column family has been deleted.  called as part of delete
* column rpc call.
* @param ctx the environment to interact with the framework and master
* @param tablename the name of the table
* @param c the column
*/
void postdeletecolumn final observercontext<mastercoprocessorenvironment> ctx
final tablename tablename  final byte c  throws ioexception
/**
* called prior to deleting the entire column family.  called as part of
* delete column handler.
* @param ctx the environment to interact with the framework and master
* @param tablename the name of the table
* @param c the column
*/
void predeletecolumnhandler
final observercontext<mastercoprocessorenvironment> ctx
final tablename tablename  final byte c  throws ioexception
/**
* called after the column family has been deleted.  called as part of
* delete column handler.
* @param ctx the environment to interact with the framework and master
* @param tablename the name of the table
* @param c the column
*/
void postdeletecolumnhandler
final observercontext<mastercoprocessorenvironment> ctx
final tablename tablename  final byte c  throws ioexception
/**
* called prior to enabling a table.  called as part of enable table rpc call.
* it can't bypass the default action, e.g., ctx.bypass() won't have effect.
* @param ctx the environment to interact with the framework and master
* @param tablename the name of the table
*/
void preenabletable final observercontext<mastercoprocessorenvironment> ctx
final tablename tablename  throws ioexception
/**
* called after the enabletable operation has been requested.  called as part
* of enable table rpc call.
* @param ctx the environment to interact with the framework and master
* @param tablename the name of the table
*/
void postenabletable final observercontext<mastercoprocessorenvironment> ctx
final tablename tablename  throws ioexception
/**
* called prior to enabling a table.  called as part of enable table handler
* and it is async to the enable table rpc call.
* it can't bypass the default action, e.g., ctx.bypass() won't have effect.
* @param ctx the environment to interact with the framework and master
* @param tablename the name of the table
*/
void preenabletablehandler
final observercontext<mastercoprocessorenvironment> ctx
final tablename tablename  throws ioexception
/**
* called after the enabletable operation has been requested.  called as part
* of enable table handler and it is async to the enable table rpc call.
* @param ctx the environment to interact with the framework and master
* @param tablename the name of the table
*/
void postenabletablehandler
final observercontext<mastercoprocessorenvironment> ctx
final tablename tablename  throws ioexception
/**
* called prior to disabling a table.  called as part of disable table rpc
* call.
* it can't bypass the default action, e.g., ctx.bypass() won't have effect.
* @param ctx the environment to interact with the framework and master
* @param tablename the name of the table
*/
void predisabletable final observercontext<mastercoprocessorenvironment> ctx
final tablename tablename  throws ioexception
/**
* called after the disabletable operation has been requested.  called as part
* of disable table rpc call.
* @param ctx the environment to interact with the framework and master
* @param tablename the name of the table
*/
void postdisabletable final observercontext<mastercoprocessorenvironment> ctx
final tablename tablename  throws ioexception
/**
* called prior to disabling a table.  called as part of disable table handler
* and it is asyn to the disable table rpc call.
* it can't bypass the default action, e.g., ctx.bypass() won't have effect.
* @param ctx the environment to interact with the framework and master
* @param tablename the name of the table
*/
void predisabletablehandler
final observercontext<mastercoprocessorenvironment> ctx
final tablename tablename  throws ioexception
/**
* called after the disabletable operation has been requested.  called as part
* of disable table handler and it is asyn to the disable table rpc call.
* @param ctx the environment to interact with the framework and master
* @param tablename the name of the table
*/
void postdisabletablehandler
final observercontext<mastercoprocessorenvironment> ctx
final tablename tablename  throws ioexception
/**
* called prior to moving a given region from one region server to another.
* @param ctx the environment to interact with the framework and master
* @param region the hregioninfo
* @param srcserver the source servername
* @param destserver the destination servername
*/
void premove final observercontext<mastercoprocessorenvironment> ctx
final hregioninfo region  final servername srcserver
final servername destserver
throws ioexception
/**
* called after the region move has been requested.
* @param ctx the environment to interact with the framework and master
* @param region the hregioninfo
* @param srcserver the source servername
* @param destserver the destination servername
*/
void postmove final observercontext<mastercoprocessorenvironment> ctx
final hregioninfo region  final servername srcserver
final servername destserver
throws ioexception
/**
* called prior to assigning a specific region.
* @param ctx the environment to interact with the framework and master
* @param regioninfo the regioninfo of the region
*/
void preassign final observercontext<mastercoprocessorenvironment> ctx
final hregioninfo regioninfo  throws ioexception
/**
* called after the region assignment has been requested.
* @param ctx the environment to interact with the framework and master
* @param regioninfo the regioninfo of the region
*/
void postassign final observercontext<mastercoprocessorenvironment> ctx
final hregioninfo regioninfo  throws ioexception
/**
* called prior to unassigning a given region.
* @param ctx the environment to interact with the framework and master
* @param regioninfo
* @param force whether to force unassignment or not
*/
void preunassign final observercontext<mastercoprocessorenvironment> ctx
final hregioninfo regioninfo  final boolean force  throws ioexception
/**
* called after the region unassignment has been requested.
* @param ctx the environment to interact with the framework and master
* @param regioninfo
* @param force whether to force unassignment or not
*/
void postunassign final observercontext<mastercoprocessorenvironment> ctx
final hregioninfo regioninfo  final boolean force  throws ioexception
/**
* called prior to marking a given region as offline. <code>ctx.bypass()</code> will not have any
* impact on this hook.
* @param ctx the environment to interact with the framework and master
* @param regioninfo
*/
void preregionoffline final observercontext<mastercoprocessorenvironment> ctx
final hregioninfo regioninfo  throws ioexception
/**
* called after the region has been marked offline.
* @param ctx the environment to interact with the framework and master
* @param regioninfo
*/
void postregionoffline final observercontext<mastercoprocessorenvironment> ctx
final hregioninfo regioninfo  throws ioexception
/**
* called prior to requesting rebalancing of the cluster regions, though after
* the initial checks for regions in transition and the balance switch flag.
* @param ctx the environment to interact with the framework and master
*/
void prebalance final observercontext<mastercoprocessorenvironment> ctx
throws ioexception
/**
* called after the balancing plan has been submitted.
* @param ctx the environment to interact with the framework and master
* @param plans the regionplans which master has executed. regionplan serves as hint
* as for the final destination for the underlying region but may not represent the
* final state of assignment
*/
void postbalance final observercontext<mastercoprocessorenvironment> ctx  list<regionplan> plans
throws ioexception
/**
* called prior to modifying the flag used to enable/disable region balancing.
* @param ctx the coprocessor instance's environment
* @param newvalue the new flag value submitted in the call
*/
boolean prebalanceswitch final observercontext<mastercoprocessorenvironment> ctx
final boolean newvalue  throws ioexception
/**
* called after the flag to enable/disable balancing has changed.
* @param ctx the coprocessor instance's environment
* @param oldvalue the previously set balanceswitch value
* @param newvalue the newly set balanceswitch value
*/
void postbalanceswitch final observercontext<mastercoprocessorenvironment> ctx
final boolean oldvalue  final boolean newvalue  throws ioexception
/**
* called prior to shutting down the full hbase cluster, including this
* {@link org.apache.hadoop.hbase.master.hmaster} process.
*/
void preshutdown final observercontext<mastercoprocessorenvironment> ctx
throws ioexception
/**
* called immediately prior to stopping this
* {@link org.apache.hadoop.hbase.master.hmaster} process.
*/
void prestopmaster final observercontext<mastercoprocessorenvironment> ctx
throws ioexception
/**
* called immediately after an active master instance has completed
* initialization.  will not be called on standby master instances unless
* they take over the active role.
*/
void poststartmaster final observercontext<mastercoprocessorenvironment> ctx
throws ioexception
/**
* called before a new snapshot is taken.
* called as part of snapshot rpc call.
* it can't bypass the default action, e.g., ctx.bypass() won't have effect.
* @param ctx the environment to interact with the framework and master
* @param snapshot the snapshotdescriptor for the snapshot
* @param htabledescriptor the htabledescriptor of the table to snapshot
* @throws ioexception
*/
void presnapshot final observercontext<mastercoprocessorenvironment> ctx
final snapshotdescription snapshot  final htabledescriptor htabledescriptor
throws ioexception
/**
* called after the snapshot operation has been requested.
* called as part of snapshot rpc call.
* @param ctx the environment to interact with the framework and master
* @param snapshot the snapshotdescriptor for the snapshot
* @param htabledescriptor the htabledescriptor of the table to snapshot
* @throws ioexception
*/
void postsnapshot final observercontext<mastercoprocessorenvironment> ctx
final snapshotdescription snapshot  final htabledescriptor htabledescriptor
throws ioexception
/**
* called before a snapshot is cloned.
* called as part of restoresnapshot rpc call.
* it can't bypass the default action, e.g., ctx.bypass() won't have effect.
* @param ctx the environment to interact with the framework and master
* @param snapshot the snapshotdescriptor for the snapshot
* @param htabledescriptor the htabledescriptor of the table to create
* @throws ioexception
*/
void preclonesnapshot final observercontext<mastercoprocessorenvironment> ctx
final snapshotdescription snapshot  final htabledescriptor htabledescriptor
throws ioexception
/**
* called after a snapshot clone operation has been requested.
* called as part of restoresnapshot rpc call.
* @param ctx the environment to interact with the framework and master
* @param snapshot the snapshotdescriptor for the snapshot
* @param htabledescriptor the htabledescriptor of the table to create
* @throws ioexception
*/
void postclonesnapshot final observercontext<mastercoprocessorenvironment> ctx
final snapshotdescription snapshot  final htabledescriptor htabledescriptor
throws ioexception
/**
* called before a snapshot is restored.
* called as part of restoresnapshot rpc call.
* it can't bypass the default action, e.g., ctx.bypass() won't have effect.
* @param ctx the environment to interact with the framework and master
* @param snapshot the snapshotdescriptor for the snapshot
* @param htabledescriptor the htabledescriptor of the table to restore
* @throws ioexception
*/
void prerestoresnapshot final observercontext<mastercoprocessorenvironment> ctx
final snapshotdescription snapshot  final htabledescriptor htabledescriptor
throws ioexception
/**
* called after a snapshot restore operation has been requested.
* called as part of restoresnapshot rpc call.
* @param ctx the environment to interact with the framework and master
* @param snapshot the snapshotdescriptor for the snapshot
* @param htabledescriptor the htabledescriptor of the table to restore
* @throws ioexception
*/
void postrestoresnapshot final observercontext<mastercoprocessorenvironment> ctx
final snapshotdescription snapshot  final htabledescriptor htabledescriptor
throws ioexception
/**
* called before a snapshot is deleted.
* called as part of deletesnapshot rpc call.
* it can't bypass the default action, e.g., ctx.bypass() won't have effect.
* @param ctx the environment to interact with the framework and master
* @param snapshot the snapshotdescriptor of the snapshot to delete
* @throws ioexception
*/
void predeletesnapshot final observercontext<mastercoprocessorenvironment> ctx
final snapshotdescription snapshot  throws ioexception
/**
* called after the delete snapshot operation has been requested.
* called as part of deletesnapshot rpc call.
* @param ctx the environment to interact with the framework and master
* @param snapshot the snapshotdescriptor of the snapshot to delete
* @throws ioexception
*/
void postdeletesnapshot final observercontext<mastercoprocessorenvironment> ctx
final snapshotdescription snapshot  throws ioexception
/**
* called before a gettabledescriptors request has been processed.
* @param ctx the environment to interact with the framework and master
* @param tablenameslist the list of table names, or null if querying for all
* @param descriptors an empty list, can be filled with what to return if bypassing
* @throws ioexception
*/
void pregettabledescriptors observercontext<mastercoprocessorenvironment> ctx
list<tablename> tablenameslist
list<htabledescriptor> descriptors  throws ioexception
/**
* called after a gettabledescriptors request has been processed.
* @param ctx the environment to interact with the framework and master
* @param descriptors the list of descriptors about to be returned
* @throws ioexception
*/
void postgettabledescriptors observercontext<mastercoprocessorenvironment> ctx
list<htabledescriptor> descriptors  throws ioexception
/**
* called before a new namespace is created by
* {@link org.apache.hadoop.hbase.master.hmaster}.
* it can't bypass the default action, e.g., ctx.bypass() won't have effect.
* @param ctx the environment to interact with the framework and master
* @param ns the namespacedescriptor for the table
* @throws ioexception
*/
void precreatenamespace final observercontext<mastercoprocessorenvironment> ctx
namespacedescriptor ns  throws ioexception
/**
* called after the createnamespace operation has been requested.
* @param ctx the environment to interact with the framework and master
* @param ns the namespacedescriptor for the table
* @throws ioexception
*/
void postcreatenamespace final observercontext<mastercoprocessorenvironment> ctx
namespacedescriptor ns  throws ioexception
/**
* called before {@link org.apache.hadoop.hbase.master.hmaster} deletes a
* namespace
* it can't bypass the default action, e.g., ctx.bypass() won't have effect.
* @param ctx the environment to interact with the framework and master
* @param namespace the name of the namespace
*/
void predeletenamespace final observercontext<mastercoprocessorenvironment> ctx
string namespace  throws ioexception
/**
* called after the deletenamespace operation has been requested.
* @param ctx the environment to interact with the framework and master
* @param namespace the name of the namespace
*/
void postdeletenamespace final observercontext<mastercoprocessorenvironment> ctx
string namespace  throws ioexception
/**
* called prior to modifying a namespace's properties.
* it can't bypass the default action, e.g., ctx.bypass() won't have effect.
* @param ctx the environment to interact with the framework and master
* @param ns the namespacedescriptor
*/
void premodifynamespace final observercontext<mastercoprocessorenvironment> ctx
namespacedescriptor ns  throws ioexception
/**
* called after the modifynamespace operation has been requested.
* @param ctx the environment to interact with the framework and master
* @param ns the namespacedescriptor
*/
void postmodifynamespace final observercontext<mastercoprocessorenvironment> ctx
namespacedescriptor ns  throws ioexception