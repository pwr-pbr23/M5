/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase coprocessor
import java io ioexception
import java lang reflect invocationtargetexception
import java lang reflect method
import org apache hadoop classification interfaceaudience
import org apache hadoop classification interfacestability
import org apache hadoop hbase coprocessor
import org apache hadoop hbase coprocessorenvironment
import org apache hadoop hbase protobuf responseconverter
import org apache hadoop hbase protobuf generated rowprocessorprotos rowprocessorrequest
import org apache hadoop hbase protobuf generated rowprocessorprotos rowprocessorresult
import org apache hadoop hbase protobuf generated rowprocessorprotos rowprocessorservice
import org apache hadoop hbase regionserver hregion
import org apache hadoop hbase regionserver rowprocessor
import com google protobuf bytestring
import com google protobuf message
import com google protobuf rpccallback
import com google protobuf rpccontroller
import com google protobuf service
/**
* this class demonstrates how to implement atomic read-modify-writes
* using {@link hregion#processrowswithlocks} and coprocessor endpoints.
*/
@interfaceaudience public
@interfacestability evolving
public abstract class baserowprocessorendpoint<s extends message  t extends message>
extends rowprocessorservice implements coprocessorservice  coprocessor
private regioncoprocessorenvironment env
/**
* pass a processor to hregion to process multiple rows atomically.
*
* the rowprocessor implementations should be the inner classes of your
* rowprocessorendpoint. this way the rowprocessor can be class-loaded with
* the coprocessor endpoint together.
*
* see {@code testrowprocessorendpoint} for example.
*
* the request contains information for constructing processor
* (see {@link #constructrowprocessorfromrequest}. the processor object defines
* the read-modify-write procedure.
*/
@override
public void process rpccontroller controller  rowprocessorrequest request
rpccallback<rowprocessorresult> done
rowprocessorresult resultproto   null
try
rowprocessor<s t> processor   constructrowprocessorfromrequest request
hregion region   env getregion
region processrowswithlocks processor
t result   processor getresult
rowprocessorresult builder b   rowprocessorresult newbuilder
b setrowprocessorresult result tobytestring
resultproto   b build
catch  exception e
responseconverter setcontrollerexception controller  new ioexception e
done run resultproto
@override
public service getservice
return this
/**
* stores a reference to the coprocessor environment provided by the
* {@link org.apache.hadoop.hbase.regionserver.regioncoprocessorhost} from the region where this
* coprocessor is loaded.  since this is a coprocessor endpoint, it always expects to be loaded
* on a table region, so always expects this to be an instance of
* {@link regioncoprocessorenvironment}.
* @param env the environment provided by the coprocessor host
* @throws ioexception if the provided environment is not an instance of
* {@code regioncoprocessorenvironment}
*/
@override
public void start coprocessorenvironment env  throws ioexception
if  env instanceof regioncoprocessorenvironment
this env    regioncoprocessorenvironment env
else
throw new coprocessorexception
@override
public void stop coprocessorenvironment env  throws ioexception
// nothing to do
@suppresswarnings
rowprocessor<s t> constructrowprocessorfromrequest rowprocessorrequest request
throws ioexception
string classname   request getrowprocessorclassname
class<?> cls
try
cls   class forname classname
rowprocessor<s t> ci    rowprocessor<s t>  cls newinstance
if  request hasrowprocessorinitializermessagename
class<?> imn   class forname request getrowprocessorinitializermessagename
assubclass message class
method m
try
m   imn getmethod    bytestring class
catch  securityexception e
throw new ioexception e
catch  nosuchmethodexception e
throw new ioexception e
s s
try
s    s m invoke null request getrowprocessorinitializermessage
catch  illegalargumentexception e
throw new ioexception e
catch  invocationtargetexception e
throw new ioexception e
ci initialize s
return ci
catch  classnotfoundexception e
throw new ioexception e
catch  instantiationexception e
throw new ioexception e
catch  illegalaccessexception e
throw new ioexception e