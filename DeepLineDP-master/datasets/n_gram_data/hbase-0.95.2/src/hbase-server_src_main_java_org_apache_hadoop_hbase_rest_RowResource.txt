/*
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase rest
import java io ioexception
import java util arraylist
import java util list
import javax ws rs consumes
import javax ws rs delete
import javax ws rs get
import javax ws rs post
import javax ws rs put
import javax ws rs produces
import javax ws rs core context
import javax ws rs core httpheaders
import javax ws rs core response
import javax ws rs core uriinfo
import javax ws rs core response responsebuilder
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop classification interfaceaudience
import org apache hadoop hbase hconstants
import org apache hadoop hbase keyvalue
import org apache hadoop hbase tablenotfoundexception
import org apache hadoop hbase client delete
import org apache hadoop hbase client htableinterface
import org apache hadoop hbase client htablepool
import org apache hadoop hbase client put
import org apache hadoop hbase rest model cellmodel
import org apache hadoop hbase rest model cellsetmodel
import org apache hadoop hbase rest model rowmodel
import org apache hadoop hbase util bytes
@interfaceaudience private
public class rowresource extends resourcebase
private static final log log   logfactory getlog rowresource class
static final string check_put
static final string check_delete
tableresource tableresource
rowspec rowspec
private string check   null
/**
* constructor
* @param tableresource
* @param rowspec
* @param versions
* @throws ioexception
*/
public rowresource tableresource tableresource  string rowspec
string versions  string check  throws ioexception
super
this tableresource   tableresource
this rowspec   new rowspec rowspec
if  versions    null
this rowspec setmaxversions integer valueof versions
this check   check
@get
@produces  mimetype_xml  mimetype_json  mimetype_protobuf
mimetype_protobuf_ietf
public response get final @context uriinfo uriinfo
if  log isdebugenabled
log debug     uriinfo getabsolutepath
servlet getmetrics   incrementrequests 1
try
resultgenerator generator
resultgenerator fromrowspec tableresource getname    rowspec  null
if   generator hasnext
return response status response status not_found
type mimetype_text  entity     crlf
build
int count   0
cellsetmodel model   new cellsetmodel
keyvalue value   generator next
byte rowkey   value getrow
rowmodel rowmodel   new rowmodel rowkey
do
if   bytes equals value getrow    rowkey
model addrow rowmodel
rowkey   value getrow
rowmodel   new rowmodel rowkey
rowmodel addcell new cellmodel value getfamily    value getqualifier
value gettimestamp    value getvalue
if    count > rowspec getmaxvalues
break
value   generator next
while  value    null
model addrow rowmodel
servlet getmetrics   incrementsucessfulgetrequests 1
return response ok model  build
catch  runtimeexception e
servlet getmetrics   incrementfailedputrequests 1
if  e getcause   instanceof tablenotfoundexception
return response status response status not_found
type mimetype_text  entity     crlf
build
return response status response status bad_request
type mimetype_text  entity     crlf
build
catch  exception e
servlet getmetrics   incrementfailedputrequests 1
return response status response status service_unavailable
type mimetype_text  entity     crlf
build
@get
@produces mimetype_binary
public response getbinary final @context uriinfo uriinfo
if  log isdebugenabled
log debug     uriinfo getabsolutepath        mimetype_binary
servlet getmetrics   incrementrequests 1
// doesn't make sense to use a non specific coordinate as this can only
// return a single cell
if   rowspec hascolumns      rowspec getcolumns   length > 1
return response status response status bad_request
type mimetype_text  entity     crlf
build
try
resultgenerator generator
resultgenerator fromrowspec tableresource getname    rowspec  null
if   generator hasnext
return response status response status not_found
type mimetype_text  entity     crlf
build
keyvalue value   generator next
responsebuilder response   response ok value getvalue
response header    value gettimestamp
servlet getmetrics   incrementsucessfulgetrequests 1
return response build
catch  ioexception e
servlet getmetrics   incrementfailedgetrequests 1
return response status response status service_unavailable
type mimetype_text  entity     crlf
build
response update final cellsetmodel model  final boolean replace
servlet getmetrics   incrementrequests 1
if  servlet isreadonly
return response status response status forbidden
type mimetype_text  entity     crlf
build
if  check_put equalsignorecase check
return checkandput model
else if  check_delete equalsignorecase check
return checkanddelete model
else if  check    null    check length   > 0
return response status response status bad_request
type mimetype_text  entity     check       crlf
build
htablepool pool   servlet gettablepool
htableinterface table   null
try
list<rowmodel> rows   model getrows
list<put> puts   new arraylist<put>
for  rowmodel row  rows
byte key   row getkey
if  key    null
key   rowspec getrow
if  key    null
return response status response status bad_request
type mimetype_text  entity     crlf
build
put put   new put key
int i   0
for  cellmodel cell  row getcells
byte col   cell getcolumn
if  col    null  try
col   rowspec getcolumns
catch  arrayindexoutofboundsexception e
col   null
if  col    null
return response status response status bad_request
type mimetype_text  entity     crlf
build
byte  parts   keyvalue parsecolumn col
if  parts length    2    parts length > 0
put add parts  parts  cell gettimestamp    cell getvalue
else
put add parts  null  cell gettimestamp    cell getvalue
puts add put
if  log isdebugenabled
log debug     put tostring
table   pool gettable tableresource getname
table put puts
table flushcommits
responsebuilder response   response ok
servlet getmetrics   incrementsucessfulputrequests 1
return response build
catch  ioexception e
servlet getmetrics   incrementfailedputrequests 1
return response status response status service_unavailable
type mimetype_text  entity     crlf
build
finally
if  table    null  try
table close
catch  ioexception ioe
log debug    ioe
// this currently supports only update of one row at a time.
response updatebinary final byte message  final httpheaders headers
final boolean replace
servlet getmetrics   incrementrequests 1
if  servlet isreadonly
return response status response status forbidden
type mimetype_text  entity     crlf
build
htablepool pool   servlet gettablepool
htableinterface table   null
try
byte row   rowspec getrow
byte columns   rowspec getcolumns
byte column   null
if  columns    null
column   columns
long timestamp   hconstants latest_timestamp
list<string> vals   headers getrequestheader
if  vals    null     vals isempty
row   bytes tobytes vals get 0
vals   headers getrequestheader
if  vals    null     vals isempty
column   bytes tobytes vals get 0
vals   headers getrequestheader
if  vals    null     vals isempty
timestamp   long valueof vals get 0
if  column    null
return response status response status bad_request
type mimetype_text  entity     crlf
build
put put   new put row
byte parts   keyvalue parsecolumn column
if  parts length    2    parts length > 0
put add parts  parts  timestamp  message
else
put add parts  null  timestamp  message
table   pool gettable tableresource getname
table put put
if  log isdebugenabled
log debug     put tostring
servlet getmetrics   incrementsucessfulputrequests 1
return response ok   build
catch  ioexception e
servlet getmetrics   incrementfailedputrequests 1
return response status response status service_unavailable
type mimetype_text  entity     crlf
build
finally
if  table    null  try
table close
catch  ioexception ioe
@put
@consumes  mimetype_xml  mimetype_json  mimetype_protobuf
mimetype_protobuf_ietf
public response put final cellsetmodel model
final @context uriinfo uriinfo
if  log isdebugenabled
log debug     uriinfo getabsolutepath
uriinfo getqueryparameters
return update model  true
@put
@consumes mimetype_binary
public response putbinary final byte message
final @context uriinfo uriinfo  final @context httpheaders headers
if  log isdebugenabled
log debug     uriinfo getabsolutepath        mimetype_binary
return updatebinary message  headers  true
@post
@consumes  mimetype_xml  mimetype_json  mimetype_protobuf
mimetype_protobuf_ietf
public response post final cellsetmodel model
final @context uriinfo uriinfo
if  log isdebugenabled
log debug     uriinfo getabsolutepath
uriinfo getqueryparameters
return update model  false
@post
@consumes mimetype_binary
public response postbinary final byte message
final @context uriinfo uriinfo  final @context httpheaders headers
if  log isdebugenabled
log debug     uriinfo getabsolutepath       mimetype_binary
return updatebinary message  headers  false
@delete
public response delete final @context uriinfo uriinfo
if  log isdebugenabled
log debug     uriinfo getabsolutepath
servlet getmetrics   incrementrequests 1
if  servlet isreadonly
return response status response status forbidden
type mimetype_text  entity     crlf
build
delete delete   null
if  rowspec hastimestamp
delete   new delete rowspec getrow    rowspec gettimestamp
else
delete   new delete rowspec getrow
for  byte column  rowspec getcolumns
byte split   keyvalue parsecolumn column
if  rowspec hastimestamp
if  split length    2    split length    0
delete deletecolumns split  split  rowspec gettimestamp
else
delete deletefamily split  rowspec gettimestamp
else
if  split length    2    split length    0
delete deletecolumns split  split
else
delete deletefamily split
htablepool pool   servlet gettablepool
htableinterface table   null
try
table   pool gettable tableresource getname
table delete delete
servlet getmetrics   incrementsucessfuldeleterequests 1
if  log isdebugenabled
log debug     delete tostring
catch  ioexception e
servlet getmetrics   incrementfaileddeleterequests 1
return response status response status service_unavailable
type mimetype_text  entity     crlf
build
finally
if  table    null  try
table close
catch  ioexception ioe
return response ok   build
/**
* validates the input request parameters, parses columns from cellsetmodel,
* and invokes checkandput on htable.
*
* @param model instance of cellsetmodel
* @return response 200 ok, 304 not modified, 400 bad request
*/
response checkandput final cellsetmodel model
htablepool pool   servlet gettablepool
htableinterface table   null
try
if  model getrows   size      1
return response status response status bad_request
type mimetype_text  entity     crlf
build
rowmodel rowmodel   model getrows   get 0
byte key   rowmodel getkey
if  key    null
key   rowspec getrow
list<cellmodel> cellmodels   rowmodel getcells
int cellmodelcount   cellmodels size
if  key    null    cellmodelcount <  1
return response status response status bad_request
type mimetype_text  entity     crlf
build
put put   new put key
cellmodel valuetocheckcell   cellmodels get cellmodelcount   1
byte valuetocheckcolumn   valuetocheckcell getcolumn
byte valuetoputparts   keyvalue parsecolumn valuetocheckcolumn
if  valuetoputparts length    2    valuetoputparts length > 0
cellmodel valuetoputcell   null
for  int i   0  n   cellmodelcount   1  i < n   i
if bytes equals cellmodels get i  getcolumn
valuetocheckcell getcolumn
valuetoputcell   cellmodels get i
break
if  valuetoputcell    null
put add valuetoputparts  valuetoputparts  valuetoputcell
gettimestamp    valuetoputcell getvalue
else
return response status response status bad_request
type mimetype_text  entity     crlf
build
else
return response status response status bad_request
type mimetype_text  entity     crlf
build
table   pool gettable this tableresource getname
boolean retvalue   table checkandput key  valuetoputparts
valuetoputparts  valuetocheckcell getvalue    put
if  log isdebugenabled
log debug     put tostring         retvalue
table flushcommits
responsebuilder response   response ok
if   retvalue
response   response status 304
return response build
catch  ioexception e
return response status response status service_unavailable
type mimetype_text  entity     crlf
build
finally
if  table    null  try
table close
catch  ioexception ioe
/**
* validates the input request parameters, parses columns from cellsetmodel,
* and invokes checkanddelete on htable.
*
* @param model instance of cellsetmodel
* @return response 200 ok, 304 not modified, 400 bad request
*/
response checkanddelete final cellsetmodel model
htablepool pool   servlet gettablepool
htableinterface table   null
delete delete   null
try
if  model getrows   size      1
return response status response status bad_request
type mimetype_text  entity     crlf
build
rowmodel rowmodel   model getrows   get 0
byte key   rowmodel getkey
if  key    null
key   rowspec getrow
if  key    null
return response status response status bad_request
type mimetype_text  entity     crlf
build
delete   new delete key
cellmodel valuetodeletecell   rowmodel getcells   get 0
byte valuetodeletecolumn   valuetodeletecell getcolumn
if  valuetodeletecolumn    null
try
valuetodeletecolumn   rowspec getcolumns
catch  final arrayindexoutofboundsexception e
return response status response status bad_request
type mimetype_text  entity     crlf
build
byte parts   keyvalue parsecolumn valuetodeletecolumn
if  parts length    2    parts length > 0
delete deletecolumns parts  parts
else
return response status response status bad_request
type mimetype_text  entity     crlf
build
table   pool gettable tableresource getname
boolean retvalue   table checkanddelete key  parts  parts
valuetodeletecell getvalue    delete
if  log isdebugenabled
log debug     delete tostring
retvalue
table flushcommits
responsebuilder response   response ok
if   retvalue
response   response status 304
return response build
catch  ioexception e
return response status response status service_unavailable
type mimetype_text  entity     crlf
build
finally
if  table    null  try
table close
catch  ioexception ioe
log debug    ioe