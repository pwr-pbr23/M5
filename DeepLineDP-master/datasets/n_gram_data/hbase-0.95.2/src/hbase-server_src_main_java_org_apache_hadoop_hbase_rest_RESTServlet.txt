/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*   http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase rest
import java io ioexception
import java security privilegedaction
import org apache hadoop classification interfaceaudience
import org apache hadoop conf configuration
import org apache hadoop hbase client hbaseadmin
import org apache hadoop hbase client hconnectionmanager
import org apache hadoop hbase client hconnectionwrapper
import org apache hadoop hbase client htableinterface
import org apache hadoop hbase client htablepool
import org apache hadoop security usergroupinformation
/**
* singleton class encapsulating global rest servlet state and functions.
*/
@interfaceaudience private
public class restservlet implements constants
private static restservlet instance
private final configuration conf
private final htablepool pool
private final metricsrest metrics   new metricsrest
private final hbaseadmin admin
private final usergroupinformation ugi
/**
* @return the restservlet singleton instance
* @throws ioexception
*/
public synchronized static restservlet getinstance   throws ioexception
assert instance    null
return instance
/**
* @param conf existing configuration to use in rest servlet
* @return the restservlet singleton instance
* @throws ioexception
*/
public synchronized static restservlet getinstance configuration conf
throws ioexception
return getinstance conf  null
public synchronized static restservlet getinstance configuration conf
usergroupinformation ugi  throws ioexception
if  instance    null
instance   new restservlet conf  ugi
return instance
public synchronized static void stop
if  instance    null   instance   null
/**
* constructor with existing configuration
* @param conf existing configuration
* @throws ioexception
*/
restservlet final configuration conf
final usergroupinformation ugi  throws ioexception
this conf   conf
this ugi   ugi
int maxsize   conf getint    10
if  ugi    null
pool   new htablepool conf  maxsize
admin   new hbaseadmin conf
else
admin   new hbaseadmin new hconnectionwrapper ugi
hconnectionmanager getconnection new configuration conf
pool   new htablepool conf  maxsize
/**
* a htablepool adapter. it makes sure the real user is
* always used in creating any table so that the hconnection
* is not any proxy user in case impersonation with
* restservletcontainer.
*/
@override
protected htableinterface createhtable final string tablename
return ugi doas new privilegedaction<htableinterface>
@override
public htableinterface run
return callcreatehtable tablename
/**
* a helper method used to call super.createhtable.
*/
htableinterface callcreatehtable final string tablename
return super createhtable tablename
hbaseadmin getadmin
return admin
htablepool gettablepool
return pool
configuration getconfiguration
return conf
metricsrest getmetrics
return metrics
/**
* helper method to determine if server should
* only respond to get http method requests.
* @return boolean for server read-only state
*/
boolean isreadonly
return getconfiguration   getboolean    false
usergroupinformation getuser
return ugi