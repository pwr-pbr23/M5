/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase procedure
import java io ioexception
import java util arrays
import java util list
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop classification interfaceaudience
import org apache hadoop classification interfacestability
import org apache hadoop hbase errorhandling foreignexception
import org apache hadoop hbase protobuf protobufutil
import org apache hadoop hbase zookeeper zkutil
import org apache hadoop hbase zookeeper zookeeperwatcher
import org apache zookeeper keeperexception
import com google protobuf invalidprotocolbufferexception
/**
* zookeeper based {@link procedurecoordinatorrpcs} for a {@link procedurecoordinator}
*/
@interfaceaudience public
@interfacestability evolving
public class zkprocedurecoordinatorrpcs implements procedurecoordinatorrpcs
public static final log log   logfactory getlog zkprocedurecoordinatorrpcs class
private zkprocedureutil zkproc   null
protected procedurecoordinator coordinator   null      if started this should be non null
zookeeperwatcher watcher
string proceduretype
string coordname
/**
* @param watcher zookeeper watcher. owned by <tt>this</tt> and closed via {@link #close()}
* @param procedureclass procedure type name is a category for when there are multiple kinds of
*    procedures.-- this becomes a znode so be aware of the naming restrictions
* @param coordname name of the node running the coordinator
* @throws keeperexception if an unexpected zk error occurs
*/
public zkprocedurecoordinatorrpcs zookeeperwatcher watcher
string procedureclass  string coordname  throws keeperexception
this watcher   watcher
this proceduretype   procedureclass
this coordname   coordname
/**
* the "acquire" phase.  the coordinator creates a new proctype/acquired/ znode dir. if znodes
* appear, first acquire to relevant listener or sets watch waiting for notification of
* the acquire node
*
* @param proc the procedure
* @param info data to be stored in the acquire node
* @param nodenames children of the acquire phase
* @throws ioexception if any failure occurs.
*/
@override
final public void sendglobalbarrieracquire procedure proc  byte info  list<string> nodenames
throws ioexception  illegalargumentexception
string procname   proc getname
// start watching for the abort node
string abortnode   zkproc getabortznode procname
try
// check to see if the abort node already exists
if  zkutil watchandcheckexists zkproc getwatcher    abortnode
abort abortnode
// if we get an abort node watch triggered here, we'll go complete creating the acquired
// znode but then handle the acquire znode and bail out
catch  keeperexception e
log error    e
throw new ioexception     abortnode  e
// create the acquire barrier
string acquire   zkproc getacquiredbarriernode procname
log debug     acquire
try
// notify all the procedure listeners to look for the acquire node
byte data   protobufutil prependpbmagic info
zkutil createwithparents zkproc getwatcher    acquire  data
// loop through all the children of the acquire phase and watch for them
for  string node   nodenames
string znode   zkutil joinznode acquire  node
log debug     znode
if  zkutil watchandcheckexists zkproc getwatcher    znode
coordinator memberacquiredbarrier procname  node
catch  keeperexception e
throw new ioexception     acquire  e
@override
public void sendglobalbarrierreached procedure proc  list<string> nodenames  throws ioexception
string procname   proc getname
string reachednode   zkproc getreachedbarriernode procname
log debug     reachednode
try
// create the reached znode and watch for the reached znodes
zkutil createwithparents zkproc getwatcher    reachednode
// loop through all the children of the acquire phase and watch for them
for  string node   nodenames
string znode   zkutil joinznode reachednode  node
if  zkutil watchandcheckexists zkproc getwatcher    znode
coordinator memberfinishedbarrier procname  node
catch  keeperexception e
throw new ioexception     reachednode  e
/**
* delete znodes that are no longer in use.
*/
@override
final public void resetmembers procedure proc  throws ioexception
string procname   proc getname
boolean stillgettingnotifications   false
do
try
log debug     procname
zkproc clearznodes procname
stillgettingnotifications   false
catch  keeperexception notemptyexception e
// recursive delete isn't transactional (yet) so we need to deal with cases where we get
// children trickling in
stillgettingnotifications   true
catch  keeperexception e
throw new ioexception     procname  e
while  stillgettingnotifications
/**
* start monitoring znodes in zk - subclass hook to start monitoring znodes they are about.
* @return true if succeed, false if encountered initialization errors.
*/
final public boolean start final procedurecoordinator coordinator
if  this coordinator    null
throw new illegalstateexception
this coordinator   coordinator
try
this zkproc   new zkprocedureutil watcher  proceduretype
@override
public void nodecreated string path
if   isinprocedurepath path   return
log debug     path
logzktree this baseznode
if  isacquiredpathnode path
// node wasn't present when we created the watch so zk event triggers acquire
coordinator memberacquiredbarrier zkutil getnodename zkutil getparent path
zkutil getnodename path
else if  isreachedpathnode path
// node was absent when we created the watch so zk event triggers the finished barrier.
// todo nothing enforces that acquire and reached znodes from showing up in wrong order.
coordinator memberfinishedbarrier zkutil getnodename zkutil getparent path
zkutil getnodename path
else if  isabortpathnode path
abort path
else
log debug     path
zkproc clearchildznodes
catch  keeperexception e
log error    e
return false
log debug     coordname
return true
/**
* this is the abort message being sent by the coordinator to member
*
* todo this code isn't actually used but can be used to issue a cancellation from the
* coordinator.
*/
@override
final public void sendaborttomembers procedure proc  foreignexception ee
string procname   proc getname
log debug     procname
string procabortnode   zkproc getabortznode procname
try
log debug     procabortnode
string source    ee getsource      null  ? coordname   ee getsource
byte errorinfo   protobufutil prependpbmagic foreignexception serialize source  ee
// first create the znode for the procedure
zkutil createandfailsilent zkproc getwatcher    procabortnode  errorinfo
log debug     procabortnode
catch  keeperexception e
// possible that we get this error for the procedure if we already reset the zk state, but in
// that case we should still get an error for that procedure anyways
zkproc logzktree zkproc baseznode
coordinator rpcconnectionfailure     procabortnode
procname      new ioexception e
/**
* receive a notification and propagate it to the local coordinator
* @param abortnode full znode path to the failed procedure information
*/
protected void abort string abortnode
string procname   zkutil getnodename abortnode
foreignexception ee   null
try
byte data   zkutil getdata zkproc getwatcher    abortnode
if   protobufutil ispbmagicprefix data
log warn     abortnode
// we got a remote exception, but we can't describe it
ee   new foreignexception coordname
else
data   arrays copyofrange data  protobufutil lengthofpbmagic    data length
ee   foreignexception deserialize data
catch  invalidprotocolbufferexception e
log warn     abortnode
// we got a remote exception, but we can't describe it
ee   new foreignexception coordname  e
catch  keeperexception e
coordinator rpcconnectionfailure     abortnode
zkproc getabortznode    new ioexception e
coordinator abortprocedure procname  ee
@override
final public void close   throws ioexception
zkproc close
/**
* used in testing
*/
final zkprocedureutil getzkprocedureutil
return zkproc