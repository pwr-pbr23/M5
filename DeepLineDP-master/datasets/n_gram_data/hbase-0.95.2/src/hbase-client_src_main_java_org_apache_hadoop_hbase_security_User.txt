/*
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase security
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop classification interfaceaudience
import org apache hadoop classification interfacestability
import org apache hadoop conf configuration
import org apache hadoop fs commonconfigurationkeys
import org apache hadoop hbase util methods
import org apache hadoop mapred jobconf
import org apache hadoop mapreduce job
import org apache hadoop security usergroupinformation
import java io ioexception
import java lang reflect undeclaredthrowableexception
import java security privilegedaction
import java security privilegedexceptionaction
/**
* wrapper to abstract out usage of user and group information in hbase.
*
* <p>
* this class provides a common interface for interacting with user and group
* information across changing apis in different versions of hadoop.  it only
* provides access to the common set of functionality in
* {@link org.apache.hadoop.security.usergroupinformation} currently needed by
* hbase, but can be extended as needs change.
* </p>
*/
@interfaceaudience public
@interfacestability evolving
public abstract class user
public static final string hbase_security_conf_key
private static log log   logfactory getlog user class
protected usergroupinformation ugi
public usergroupinformation getugi
return ugi
/**
* returns the full user name.  for kerberos principals this will include
* the host and realm portions of the principal name.
* @return user full name.
*/
public string getname
return ugi getusername
/**
* returns the list of groups of which this user is a member.  on secure
* hadoop this returns the group information for the user as resolved on the
* server.  for 0.20 based hadoop, the group names are passed from the client.
*/
public string getgroupnames
return ugi getgroupnames
/**
* returns the shortened version of the user name -- the portion that maps
* to an operating system user name.
* @return short name
*/
public abstract string getshortname
/**
* executes the given action within the context of this user.
*/
public abstract <t> t runas privilegedaction<t> action
/**
* executes the given action within the context of this user.
*/
public abstract <t> t runas privilegedexceptionaction<t> action
throws ioexception  interruptedexception
/**
* requests an authentication token for this user and stores it in the
* user's credentials.
*
* @throws ioexception
*/
public abstract void obtainauthtokenforjob configuration conf  job job
throws ioexception  interruptedexception
/**
* requests an authentication token for this user and stores it in the
* user's credentials.
*
* @throws ioexception
*/
public abstract void obtainauthtokenforjob jobconf job
throws ioexception  interruptedexception
@override
public boolean equals object o
if  this    o
return true
if  o    null    getclass      o getclass
return false
return ugi equals   user  o  ugi
@override
public int hashcode
return ugi hashcode
@override
public string tostring
return ugi tostring
/**
* returns the {@code user} instance within current execution context.
*/
public static user getcurrent   throws ioexception
user user   new securehadoopuser
if  user getugi      null
return null
return user
/**
* wraps an underlying {@code usergroupinformation} instance.
* @param ugi the base hadoop user
* @return user
*/
public static user create usergroupinformation ugi
if  ugi    null
return null
return new securehadoopuser ugi
/**
* generates a new {@code user} instance specifically for use in test code.
* @param name the full username
* @param groups the group names to which the test user will belong
* @return a new <code>user</code> instance
*/
public static user createuserfortesting configuration conf
string name  string groups
return securehadoopuser createuserfortesting conf  name  groups
/**
* log in the current process using the given configuration keys for the
* credential file and login principal.
*
* <p><strong>this is only applicable when
* running on secure hadoop</strong> -- see
* org.apache.hadoop.security.securityutil#login(configuration,string,string,string).
* on regular hadoop (without security features), this will safely be ignored.
* </p>
*
* @param conf the configuration data to use
* @param fileconfkey property key used to configure path to the credential file
* @param principalconfkey property key used to configure login principal
* @param localhost current hostname to use in any credentials
* @throws ioexception underlying exception from securityutil.login() call
*/
public static void login configuration conf  string fileconfkey
string principalconfkey  string localhost  throws ioexception
securehadoopuser login conf  fileconfkey  principalconfkey  localhost
/**
* returns whether or not kerberos authentication is configured for hadoop.
* for non-secure hadoop, this always returns <code>false</code>.
* for secure hadoop, it will return the value from
* {@code usergroupinformation.issecurityenabled()}.
*/
public static boolean issecurityenabled
return securehadoopuser issecurityenabled
/**
* returns whether or not secure authentication is enabled for hbase.  note that
* hbase security requires hdfs security to provide any guarantees, so this requires that
* both <code>hbase.security.authentication</code> and <code>hadoop.security.authentication</code>
* are set to <code>kerberos</code>.
*/
public static boolean ishbasesecurityenabled configuration conf
return   equalsignorecase conf get hbase_security_conf_key
equalsignorecase
conf get commonconfigurationkeys hadoop_security_authentication
/* concrete implementations */
/**
* bridges {@code user} invocations to underlying calls to
* {@link org.apache.hadoop.security.usergroupinformation} for secure hadoop
* 0.20 and versions 0.21 and above.
*/
private static class securehadoopuser extends user
private string shortname
private securehadoopuser   throws ioexception
try
ugi    usergroupinformation  callstatic
catch  ioexception ioe
throw ioe
catch  runtimeexception re
throw re
catch  exception e
throw new undeclaredthrowableexception e
private securehadoopuser usergroupinformation ugi
this ugi   ugi
@override
public string getshortname
if  shortname    null  return shortname
try
shortname    string call ugi     null  null
return shortname
catch  runtimeexception re
throw re
catch  exception e
throw new undeclaredthrowableexception e
@override
public <t> t runas privilegedaction<t> action
try
return  t  call ugi     new class privilegedaction class
new object action
catch  runtimeexception re
throw re
catch  exception e
throw new undeclaredthrowableexception e
@override
public <t> t runas privilegedexceptionaction<t> action
throws ioexception  interruptedexception
try
return  t  call ugi
new class privilegedexceptionaction class
new object action
catch  ioexception ioe
throw ioe
catch  interruptedexception ie
throw ie
catch  runtimeexception re
throw re
catch  exception e
throw new undeclaredthrowableexception e
@override
public void obtainauthtokenforjob configuration conf  job job
throws ioexception  interruptedexception
try
class c   class forname
methods call c  null
new class configuration class  usergroupinformation class
job class
new object conf  ugi  job
catch  classnotfoundexception cnfe
throw new runtimeexception
cnfe
catch  ioexception ioe
throw ioe
catch  interruptedexception ie
throw ie
catch  runtimeexception re
throw re
catch  exception e
throw new undeclaredthrowableexception e
@override
public void obtainauthtokenforjob jobconf job
throws ioexception  interruptedexception
try
class c   class forname
methods call c  null
new class jobconf class  usergroupinformation class
new object job  ugi
catch  classnotfoundexception cnfe
throw new runtimeexception
cnfe
catch  ioexception ioe
throw ioe
catch  interruptedexception ie
throw ie
catch  runtimeexception re
throw re
catch  exception e
throw new undeclaredthrowableexception e
/** @see user#createuserfortesting(org.apache.hadoop.conf.configuration, string, string[]) */
public static user createuserfortesting configuration conf
string name  string groups
try
return new securehadoopuser
usergroupinformation callstatic
new class string class  string class
new object name  groups
catch  runtimeexception re
throw re
catch  exception e
throw new undeclaredthrowableexception e
/**
* obtain credentials for the current process using the configured
* kerberos keytab file and principal.
* @see user#login(org.apache.hadoop.conf.configuration, string, string, string)
*
* @param conf the configuration to use
* @param fileconfkey configuration property key used to store the path
* to the keytab file
* @param principalconfkey configuration property key used to store the
* principal name to login as
* @param localhost the local hostname
*/
public static void login configuration conf  string fileconfkey
string principalconfkey  string localhost  throws ioexception
if  issecurityenabled
// check for securityutil class
try
class c   class forname
class types   new class
configuration class  string class  string class  string class
object args   new object
conf  fileconfkey  principalconfkey  localhost
methods call c  null     types  args
catch  classnotfoundexception cnfe
throw new runtimeexception
cnfe
catch  ioexception ioe
throw ioe
catch  runtimeexception re
throw re
catch  exception e
throw new undeclaredthrowableexception e
/**
* returns the result of {@code usergroupinformation.issecurityenabled()}.
*/
public static boolean issecurityenabled
try
return  boolean callstatic
catch  runtimeexception re
throw re
catch  exception e
throw new undeclaredthrowableexception e
/* reflection helper methods */
private static object callstatic string methodname  throws exception
return call null  methodname  null  null
private static object callstatic string methodname  class types
object args  throws exception
return call null  methodname  types  args
private static object call usergroupinformation instance  string methodname
class types  object args  throws exception
return methods call usergroupinformation class  instance  methodname  types
args