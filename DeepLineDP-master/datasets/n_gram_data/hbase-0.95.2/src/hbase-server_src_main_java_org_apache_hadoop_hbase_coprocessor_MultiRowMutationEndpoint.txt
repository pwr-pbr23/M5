/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase coprocessor
import java io ioexception
import java util arraylist
import java util list
import java util sortedset
import java util treeset
import org apache hadoop classification interfaceaudience
import org apache hadoop classification interfacestability
import org apache hadoop hbase coprocessor
import org apache hadoop hbase coprocessorenvironment
import org apache hadoop hbase hregioninfo
import org apache hadoop hbase client mutation
import org apache hadoop hbase regionserver hregion
import org apache hadoop hbase regionserver wrongregionexception
import org apache hadoop hbase util bytes
import org apache hadoop hbase protobuf protobufutil
import org apache hadoop hbase protobuf responseconverter
import org apache hadoop hbase protobuf generated clientprotos mutationproto
import org apache hadoop hbase protobuf generated multirowmutation multimutaterequest
import org apache hadoop hbase protobuf generated multirowmutation multimutateresponse
import org apache hadoop hbase protobuf generated multirowmutation multirowmutationservice
import com google protobuf rpccallback
import com google protobuf rpccontroller
import com google protobuf service
/**
* this class demonstrates how to implement atomic multi row transactions using
* {@link hregion#mutaterowswithlocks(java.util.collection, java.util.collection)}
* and coprocessor endpoints.
*
* defines a protocol to perform multi row transactions.
* see {@link multirowmutationendpoint} for the implementation.
* </br>
* see
* {@link hregion#mutaterowswithlocks(java.util.collection, java.util.collection)}
* for details and limitations.
* </br>
* example:
* <code><pre>
* list<mutation> mutations = ...;
* put p1 = new put(row1);
* put p2 = new put(row2);
* ...
* mutate m1 = protobufutil.tomutate(mutatetype.put, p1);
* mutate m2 = protobufutil.tomutate(mutatetype.put, p2);
* multimutaterequest.builder mrmbuilder = multimutaterequest.newbuilder();
* mrmbuilder.addmutationrequest(m1);
* mrmbuilder.addmutationrequest(m2);
* coprocessorrpcchannel channel = t.coprocessorservice(row);
* multirowmutationservice.blockinginterface service =
*    multirowmutationservice.newblockingstub(channel);
* multimutaterequest mrm = mrmbuilder.build();
* service.mutaterows(null, mrm);
* </pre></code>
*/
@interfaceaudience public
@interfacestability evolving
public class multirowmutationendpoint extends multirowmutationservice implements
coprocessorservice  coprocessor
private regioncoprocessorenvironment env
@override
public void mutaterows rpccontroller controller  multimutaterequest request
rpccallback<multimutateresponse> done
multimutateresponse response   multimutateresponse getdefaultinstance
try
// set of rows to lock, sorted to avoid deadlocks
sortedset<byte> rowstolock   new treeset<byte> bytes bytes_comparator
list<mutationproto> mutaterequestlist   request getmutationrequestlist
list<mutation> mutations   new arraylist<mutation> mutaterequestlist size
for  mutationproto m   mutaterequestlist
mutations add protobufutil tomutation m
hregioninfo regioninfo   env getregion   getregioninfo
for  mutation m   mutations
// check whether rows are in range for this region
if   hregion rowisinrange regioninfo  m getrow
string msg
bytes tostringbinary m getrow
if  rowstolock isempty
// if this is the first row, region might have moved,
// allow client to retry
throw new wrongregionexception msg
else
// rows are split between regions, do not retry
throw new org apache hadoop hbase donotretryioexception msg
rowstolock add m getrow
// call utility method on region
env getregion   mutaterowswithlocks mutations  rowstolock
catch  ioexception e
responseconverter setcontrollerexception controller  e
done run response
@override
public service getservice
return this
/**
* stores a reference to the coprocessor environment provided by the
* {@link org.apache.hadoop.hbase.regionserver.regioncoprocessorhost} from the region where this
* coprocessor is loaded.  since this is a coprocessor endpoint, it always expects to be loaded
* on a table region, so always expects this to be an instance of
* {@link regioncoprocessorenvironment}.
* @param env the environment provided by the coprocessor host
* @throws ioexception if the provided environment is not an instance of
* {@code regioncoprocessorenvironment}
*/
@override
public void start coprocessorenvironment env  throws ioexception
if  env instanceof regioncoprocessorenvironment
this env    regioncoprocessorenvironment env
else
throw new coprocessorexception
@override
public void stop coprocessorenvironment env  throws ioexception
// nothing to do