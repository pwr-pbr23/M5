/**
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase util
import java lang management managementfactory
import java lang management runtimemxbean
import java lang reflect invocationtargetexception
import java lang reflect method
import java nio bytebuffer
import java util list
import org apache hadoop classification interfaceaudience
import org apache hadoop classification interfacestability
import com google common base preconditions
@interfaceaudience public
@interfacestability evolving
public class directmemoryutils
/**
* @return the setting of -xx:maxdirectmemorysize as a long. returns 0 if
*         -xx:maxdirectmemorysize is not set.
*/
public static long getdirectmemorysize
runtimemxbean runtimemxbean   managementfactory getruntimemxbean
list<string> arguments   runtimemxbean getinputarguments
long multiplier   1    for the byte case
for  string s   arguments
if  s contains
string memsize   s tolowercase
replace       trim
if  memsize contains
multiplier   1024
else if  memsize contains
multiplier   1048576
else if  memsize contains
multiplier   1073741824
memsize   memsize replaceall
long retvalue   long parselong memsize
return retvalue   multiplier
return 0
/**
* directbytebuffers are garbage collected by using a phantom reference and a
* reference queue. every once a while, the jvm checks the reference queue and
* cleans the directbytebuffers. however, as this doesn't happen
* immediately after discarding all references to a directbytebuffer, it's
* easy to outofmemoryerror yourself using directbytebuffers. this function
* explicitly calls the cleaner method of a directbytebuffer.
*
* @param tobedestroyed
*          the directbytebuffer that will be "cleaned". utilizes reflection.
*
*/
public static void destroydirectbytebuffer bytebuffer tobedestroyed
throws illegalargumentexception  illegalaccessexception
invocationtargetexception  securityexception  nosuchmethodexception
preconditions checkargument tobedestroyed isdirect
method cleanermethod   tobedestroyed getclass   getmethod
cleanermethod setaccessible true
object cleaner   cleanermethod invoke tobedestroyed
method cleanmethod   cleaner getclass   getmethod
cleanmethod setaccessible true
cleanmethod invoke cleaner