/*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase regionserver
import java io ioexception
import java util collection
import java util list
import java util uuid
import org apache hadoop classification interfaceaudience
import org apache hadoop classification interfacestability
import org apache hadoop hbase keyvalue
import org apache hadoop hbase client durability
import org apache hadoop hbase regionserver wal waledit
import com google protobuf bytestring
import com google protobuf message
@interfaceaudience public
@interfacestability evolving
/**
* defines the procedure to atomically perform multiple scans and mutations
* on a hregion.
*
* this is invoked by hregion#processrowswithlocks().
* this class performs scans and generates mutations and wal edits.
* the locks and mvcc will be handled by hregion.
*
* the rowprocessor user code could have data that needs to be
* sent across for proper initialization at the server side. the generic type
* parameter s is the type of the request data sent to the server.
* the generic type parameter t is the return type of rowprocessor.getresult().
*/
public interface rowprocessor<s extends message  t extends message>
/**
* rows to lock while operation.
* they have to be sorted with <code>rowprocessor</code>
* to avoid deadlock.
*/
collection<byte> getrowstolock
/**
* obtain the processing result. all row processor implementations must
* implement this, even if the method is simply returning an empty
* message.
*/
t getresult
/**
* is this operation read only? if this is true, process() should not add
* any mutations or it throws ioexception.
* @return ture if read only operation
*/
boolean readonly
/**
* hregion handles the locks and mvcc and invokes this method properly.
*
* you should override this to create your own rowprocessor.
*
* if you are doing read-modify-write here, you should consider using
* <code>isolationlevel.read_uncommitted</code> for scan because
* we advance mvcc after releasing the locks for optimization purpose.
*
* @param now the current system millisecond
* @param region the hregion
* @param mutations the output mutations to apply to memstore
* @param waledit the output wal edits to apply to write ahead log
*/
void process long now
hregion region
list<keyvalue> mutations
waledit waledit  throws ioexception
/**
* the hook to be executed before process().
*
* @param region the hregion
* @param waledit the output wal edits to apply to write ahead log
*/
void preprocess hregion region  waledit waledit  throws ioexception
/**
* the hook to be executed after process().
*
* @param region the hregion
* @param waledit the output wal edits to apply to write ahead log
*/
void postprocess hregion region  waledit waledit  throws ioexception
/**
* @return the replication cluster id.
*/
uuid getclusterid
/**
* human readable name of the processor
* @return the name of the processor
*/
string getname
/**
* this method should return any additional data that is needed on the
* server side to construct the rowprocessor. the server will pass this to
* the {@link #initialize(message msg)} method. if there is no rowprocessor
* specific data then null should be returned.
* @return the pb message
* @throws ioexception
*/
s getrequestdata   throws ioexception
/**
* this method should initialize any field(s) of the rowprocessor with
* a parsing of the passed message bytes (used on the server side).
* @param msg
* @throws ioexception
*/
void initialize s msg  throws ioexception
/**
* @return the {@link durability} to use
*/
durability usedurability