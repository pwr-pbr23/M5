/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase procedure
import java io closeable
import java io ioexception
import java util list
import org apache hadoop classification interfaceaudience
import org apache hadoop classification interfacestability
import org apache hadoop hbase errorhandling foreignexception
/**
* rpcs for the coordinator to run a barriered procedure with subprocedures executed at
* distributed members.
* @see procedurecoordinator
*/
@interfaceaudience public
@interfacestability evolving
public interface procedurecoordinatorrpcs extends closeable
/**
* initialize and start threads necessary to connect an implementation's rpc mechanisms.
* @param listener
* @return true if succeed, false if encountered initialization errors.
*/
boolean start final procedurecoordinator listener
/**
* notify the members that the coordinator has aborted the procedure and that it should release
* barrier resources.
*
* @param procname name of the procedure that was aborted
* @param cause the reason why the procedure needs to be aborted
* @throws ioexception if the rpcs can't reach the other members of the procedure (and can't
*           recover).
*/
void sendaborttomembers procedure procname  foreignexception cause  throws ioexception
/**
* notify the members to acquire barrier for the procedure
*
* @param procname name of the procedure to start
* @param info information that should be passed to all members
* @param members names of the members requested to reach the acquired phase
* @throws illegalargumentexception if the procedure was already marked as failed
* @throws ioexception if we can't reach the remote notification mechanism
*/
void sendglobalbarrieracquire procedure procname  byte info  list<string> members
throws ioexception  illegalargumentexception
/**
* notify members that all members have acquired their parts of the barrier and that they can
* now execute under the global barrier.
*
* must come after calling {@link #sendglobalbarrieracquire(procedure, byte[], list)}
*
* @param procname name of the procedure to start
* @param members members to tell we have reached in-barrier phase
* @throws ioexception if we can't reach the remote notification mechanism
*/
void sendglobalbarrierreached procedure procname  list<string> members  throws ioexception
/**
* notify members to reset the distributed state for procedure
* @param procname name of the procedure to reset
* @throws ioexception if the remote notification mechanism cannot be reached
*/
void resetmembers procedure procname  throws ioexception