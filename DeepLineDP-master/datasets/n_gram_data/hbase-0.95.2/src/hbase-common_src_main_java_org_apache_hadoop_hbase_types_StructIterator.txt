/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase types
import java util iterator
import java util nosuchelementexception
import org apache hadoop classification interfaceaudience
import org apache hadoop classification interfacestability
import org apache hadoop hbase util positionedbyterange
/**
* an {@link iterator} over encoded {@code struct} members.
* <p>
* this iterates over each serialized {@code struct} field from the specified
* {@code datatypes<?>[]} definition. it allows you to read the field or skip
* over its serialized bytes using {@link #next()} and {@link #skip()},
* respectively. this is in contrast to the {@code struct} method which allow
* you to {@link struct#decode(positionedbyterange)} or
* {@link struct#skip(positionedbyterange)} over the entire {@code struct} at
* once.
* </p>
* <p>
* this iterator may also be used to read bytes from any {@code struct} for
* which the specified {@code datatype<?>[]} is a prefix. for example, if the
* specified {@code struct} definition has a {@link rawinteger} and a
* {@link rawstringterminated} field, you may parse the serialized output
* of a {@code struct} whose fields are {@link rawinteger},
* {@link rawstringterminated}, and {@link rawbytes}. the iterator would
* return a number followed by a {@code string}. the trailing {@code byte[]}
* would be ignored.
* </p>
*/
@interfaceaudience public
@interfacestability evolving
public class structiterator implements iterator<object>
protected final positionedbyterange src
protected int idx   0
@suppresswarnings
protected final datatype types
/**
* construct {@code structiterator} over the values encoded in {@code src}
* using the specified {@code types} definition.
* @param src the buffer from which to read encoded values.
* @param types the sequence of types to use as the schema for this
*          {@code struct}.
*/
public structiterator positionedbyterange src  @suppresswarnings    datatype types
this src   src
this types   types
@override
public boolean hasnext
return idx < types length
@override
public void remove     throw new unsupportedoperationexception
@override
public object next
if   hasnext    throw new nosuchelementexception
return types decode src
/**
* bypass the next encoded value.
* @return the number of bytes skipped.
*/
public int skip
if   hasnext    throw new nosuchelementexception
return types skip src