/*
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase filter
import com google common base preconditions
import com google protobuf bytestring
import com google protobuf invalidprotocolbufferexception
import org apache hadoop classification interfaceaudience
import org apache hadoop classification interfacestability
import org apache hadoop hbase exceptions deserializationexception
import org apache hadoop hbase protobuf generated filterprotos
import org apache hadoop hbase util bytes
import java util arraylist
/**
* pass results that have same row prefix.
*/
@interfaceaudience public
@interfacestability stable
public class prefixfilter extends filterbase
protected byte  prefix   null
protected boolean passedprefix   false
public prefixfilter final byte  prefix
this prefix   prefix
public byte getprefix
return prefix
public boolean filterrowkey byte buffer  int offset  int length
if  buffer    null    this prefix    null
return true
if  length < prefix length
return true
// if they are equal, return false => pass row
// else return true, filter row
// if we are passed the prefix, set flag
int cmp   bytes compareto buffer  offset  this prefix length  this prefix  0
this prefix length
if cmp > 0
passedprefix   true
return cmp    0
public boolean filterallremaining
return passedprefix
public static filter createfilterfromarguments arraylist<byte > filterarguments
preconditions checkargument filterarguments size      1
filterarguments size
byte  prefix   parsefilter removequotesfrombytearray filterarguments get 0
return new prefixfilter prefix
/**
* @return the filter serialized using pb
*/
public byte  tobytearray
filterprotos prefixfilter builder builder
filterprotos prefixfilter newbuilder
if  this prefix    null  builder setprefix bytestring copyfrom this prefix
return builder build   tobytearray
/**
* @param pbbytes a pb serialized {@link prefixfilter} instance
* @return an instance of {@link prefixfilter} made from <code>bytes</code>
* @throws org.apache.hadoop.hbase.exceptions.deserializationexception
* @see #tobytearray
*/
public static prefixfilter parsefrom final byte  pbbytes
throws deserializationexception
filterprotos prefixfilter proto
try
proto   filterprotos prefixfilter parsefrom pbbytes
catch  invalidprotocolbufferexception e
throw new deserializationexception e
return new prefixfilter proto hasprefix  ?proto getprefix   tobytearray   null
/**
* @param other
* @return true if and only if the fields of the filter that are serialized
* are equal to the corresponding fields in other.  used for testing.
*/
boolean areserializedfieldsequal filter o
if  o    this  return true
if    o instanceof prefixfilter   return false
prefixfilter other    prefixfilter o
return bytes equals this getprefix    other getprefix
@override
public string tostring
return this getclass   getsimplename         bytes tostringbinary this prefix