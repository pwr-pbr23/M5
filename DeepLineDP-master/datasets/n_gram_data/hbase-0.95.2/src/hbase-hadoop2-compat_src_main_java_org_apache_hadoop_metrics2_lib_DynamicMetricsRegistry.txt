/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop metrics2 lib
import java util collection
import java util concurrent concurrentmap
import com google common base objects
import com google common collect maps
import org apache hadoop classification interfaceaudience
import org apache hadoop classification interfacestability
import org apache hadoop metrics2 metricsexception
import org apache hadoop metrics2 metricsinfo
import org apache hadoop metrics2 metricsrecordbuilder
import org apache hadoop metrics2 metricstag
import org apache hadoop metrics2 impl msinfo
/**
* an optional metrics registry class for creating and maintaining a
* collection of metricsmutables, making writing metrics source easier.
* note: this is a copy of org.apache.hadoop.metrics2.lib.metricsregistry with added one
*       feature: metrics can be removed. when hadoop-8313 is fixed, usages of this class
*       should be substituted with org.apache.hadoop.metrics2.lib.metricsregistry.
*       this implementation also provides handy methods for creating metrics
*       dynamically.
*       another difference is that metricsmap implementation is substituted with
*       thread-safe map, as we allow dynamic metrics additions/removals.
*/
@interfaceaudience public
@interfacestability evolving
public class dynamicmetricsregistry
private final concurrentmap<string  mutablemetric> metricsmap
maps newconcurrentmap
private final concurrentmap<string  metricstag> tagsmap
maps newconcurrentmap
private final metricsinfo metricsinfo
/**
* construct the registry with a record name
* @param name  of the record of the metrics
*/
public dynamicmetricsregistry string name
metricsinfo   interns info name  name
/**
* construct the registry with a metadata object
* @param info  the info object for the metrics record/group
*/
public dynamicmetricsregistry metricsinfo info
metricsinfo   info
/**
* @return the info object of the metrics registry
*/
public metricsinfo info
return metricsinfo
/**
* get a metric by name
* @param name  of the metric
* @return the metric object
*/
public mutablemetric get string name
return metricsmap get name
/**
* get a tag by name
* @param name  of the tag
* @return the tag object
*/
public metricstag gettag string name
return tagsmap get name
/**
* create a mutable integer counter
* @param name  of the metric
* @param desc  metric description
* @param ival  initial value
* @return a new counter object
*/
public mutablecounterint newcounter string name  string desc  int ival
return newcounter interns info name  desc   ival
/**
* create a mutable integer counter
* @param info  metadata of the metric
* @param ival  initial value
* @return a new counter object
*/
public mutablecounterint newcounter metricsinfo info  int ival
mutablecounterint ret   new mutablecounterint info  ival
return addnewmetricifabsent info name    ret  mutablecounterint class
/**
* create a mutable long integer counter
* @param name  of the metric
* @param desc  metric description
* @param ival  initial value
* @return a new counter object
*/
public mutablecounterlong newcounter string name  string desc  long ival
return newcounter interns info name  desc   ival
/**
* create a mutable long integer counter
* @param info  metadata of the metric
* @param ival  initial value
* @return a new counter object
*/
public mutablecounterlong newcounter metricsinfo info  long ival
mutablecounterlong ret   new mutablecounterlong info  ival
return addnewmetricifabsent info name    ret  mutablecounterlong class
/**
* create a mutable integer gauge
* @param name  of the metric
* @param desc  metric description
* @param ival  initial value
* @return a new gauge object
*/
public mutablegaugeint newgauge string name  string desc  int ival
return newgauge interns info name  desc   ival
/**
* create a mutable integer gauge
* @param info  metadata of the metric
* @param ival  initial value
* @return a new gauge object
*/
public mutablegaugeint newgauge metricsinfo info  int ival
mutablegaugeint ret   new mutablegaugeint info  ival
return addnewmetricifabsent info name    ret  mutablegaugeint class
/**
* create a mutable long integer gauge
* @param name  of the metric
* @param desc  metric description
* @param ival  initial value
* @return a new gauge object
*/
public mutablegaugelong newgauge string name  string desc  long ival
return newgauge interns info name  desc   ival
/**
* create a mutable long integer gauge
* @param info  metadata of the metric
* @param ival  initial value
* @return a new gauge object
*/
public mutablegaugelong newgauge metricsinfo info  long ival
mutablegaugelong ret   new mutablegaugelong info  ival
return addnewmetricifabsent info name    ret  mutablegaugelong class
/**
* create a mutable metric with stats
* @param name  of the metric
* @param desc  metric description
* @param samplename  of the metric (e.g., "ops")
* @param valuename   of the metric (e.g., "time" or "latency")
* @param extended    produce extended stat (stdev, min/max etc.) if true.
* @return a new mutable stat metric object
*/
public mutablestat newstat string name  string desc
string samplename  string valuename  boolean extended
mutablestat ret
new mutablestat name  desc  samplename  valuename  extended
return addnewmetricifabsent name  ret  mutablestat class
/**
* create a mutable metric with stats
* @param name  of the metric
* @param desc  metric description
* @param samplename  of the metric (e.g., "ops")
* @param valuename   of the metric (e.g., "time" or "latency")
* @return a new mutable metric object
*/
public mutablestat newstat string name  string desc
string samplename  string valuename
return newstat name  desc  samplename  valuename  false
/**
* create a mutable rate metric
* @param name  of the metric
* @return a new mutable metric object
*/
public mutablerate newrate string name
return newrate name  name  false
/**
* create a mutable rate metric
* @param name  of the metric
* @param description of the metric
* @return a new mutable rate metric object
*/
public mutablerate newrate string name  string description
return newrate name  description  false
/**
* create a mutable rate metric (for throughput measurement)
* @param name  of the metric
* @param desc  description
* @param extended  produce extended stat (stdev/min/max etc.) if true
* @return a new mutable rate metric object
*/
public mutablerate newrate string name  string desc  boolean extended
return newrate name  desc  extended  true
@interfaceaudience private
public mutablerate newrate string name  string desc
boolean extended  boolean returnexisting
if  returnexisting
mutablemetric rate   metricsmap get name
if  rate    null
if  rate instanceof mutablerate  return  mutablerate  rate
throw new metricsexception    rate getclass
name
mutablerate ret   new mutablerate name  desc  extended
return addnewmetricifabsent name  ret  mutablerate class
/**
* create a new histogram.
* @param name name of the histogram.
* @return a new mutablehistogram
*/
public mutablehistogram newhistogram string name
return newhistogram name
/**
* create a new histogram.
* @param name the name of the histogram
* @param desc the description of the data in the histogram.
* @return a new mutablehistogram
*/
public mutablehistogram newhistogram string name  string desc
mutablehistogram histo   new mutablehistogram name  desc
return addnewmetricifabsent name  histo  mutablehistogram class
/**
* create a new mutablequantile(a more accurate histogram).
* @param name the name of the histogram
* @return a new mutablequantile
*/
public metricmutablequantiles newquantile string name
return newquantile name
public metricmutablequantiles newquantile string name  string desc
metricmutablequantiles histo   new metricmutablequantiles name  desc        60
return addnewmetricifabsent name  histo  metricmutablequantiles class
synchronized void add string name  mutablemetric metric
addnewmetricifabsent name  metric  mutablemetric class
/**
* add sample to a stat metric by name.
* @param name  of the metric
* @param value of the snapshot to add
*/
public void add string name  long value
mutablemetric m   metricsmap get name
if  m    null
if  m instanceof mutablestat
mutablestat  m  add value
else
throw new metricsexception    name
else
metricsmap put name  newrate name       default is a rate metric
add name  value
/**
* set the metrics context tag
* @param name of the context
* @return the registry itself as a convenience
*/
public dynamicmetricsregistry setcontext string name
return tag msinfo context  name  true
/**
* add a tag to the metrics
* @param name  of the tag
* @param description of the tag
* @param value of the tag
* @return the registry (for keep adding tags)
*/
public dynamicmetricsregistry tag string name  string description  string value
return tag name  description  value  false
/**
* add a tag to the metrics
* @param name  of the tag
* @param description of the tag
* @param value of the tag
* @param override  existing tag if true
* @return the registry (for keep adding tags)
*/
public dynamicmetricsregistry tag string name  string description  string value
boolean override
return tag interns info name  description   value  override
/**
* add a tag to the metrics
* @param info  metadata of the tag
* @param value of the tag
* @param override existing tag if true
* @return the registry (for keep adding tags etc.)
*/
public dynamicmetricsregistry tag metricsinfo info  string value  boolean override
metricstag tag   interns tag info  value
if   override
metricstag existing   tagsmap putifabsent info name    tag
if  existing    null
throw new metricsexception    info name
return this
tagsmap put info name    tag
return this
public dynamicmetricsregistry tag metricsinfo info  string value
return tag info  value  false
collection<metricstag> tags
return tagsmap values
collection<mutablemetric> metrics
return metricsmap values
/**
* sample all the mutable metrics and put the snapshot in the builder
* @param builder to contain the metrics snapshot
* @param all get all the metrics even if the values are not changed.
*/
public void snapshot metricsrecordbuilder builder  boolean all
for  metricstag tag   tags
builder add tag
for  mutablemetric metric   metrics
metric snapshot builder  all
@override public string tostring
return objects tostringhelper this
add    metricsinfo  add    tags    add    metrics
tostring
/**
* removes metric by name
* @param name name of the metric to remove
*/
public void removemetric string name
metricsmap remove name
/**
* get a metricmutablegaugelong from the storage.  if it is not there atomically put it.
*
* @param gaugename              name of the gauge to create or get.
* @param potentialstartingvalue value of the new gauge if we have to create it.
*/
public mutablegaugelong getlonggauge string gaugename  long potentialstartingvalue
//try and get the guage.
mutablemetric metric   metricsmap get gaugename
//if it's not there then try and put a new one in the storage.
if  metric    null
//create the potential new gauge.
mutablegaugelong newgauge   new mutablegaugelong interns info gaugename
potentialstartingvalue
// try and put the gauge in.  this is atomic.
metric   metricsmap putifabsent gaugename  newgauge
//if the value we get back is null then the put was successful and we will return that.
//otherwise gaugelong should contain the thing that was in before the put could be completed.
if  metric    null
return newgauge
if    metric instanceof mutablegaugelong
throw new metricsexception     gaugename
return  mutablegaugelong  metric
/**
* get a metricmutablecounterlong from the storage.  if it is not there atomically put it.
*
* @param countername            name of the counter to get
* @param potentialstartingvalue starting value if we have to create a new counter
*/
public mutablecounterlong getlongcounter string countername  long potentialstartingvalue
//see getlonggauge for description on how this works.
mutablemetric counter   metricsmap get countername
if  counter    null
mutablecounterlong newcounter
new mutablecounterlong interns info countername      potentialstartingvalue
counter   metricsmap putifabsent countername  newcounter
if  counter    null
return newcounter
if    counter instanceof mutablecounterlong
throw new metricsexception
countername
return  mutablecounterlong  counter
public mutablehistogram gethistogram string histoname
//see getlonggauge for description on how this works.
mutablemetric histo   metricsmap get histoname
if  histo    null
mutablehistogram newcounter
new mutablehistogram interns info histoname
histo   metricsmap putifabsent histoname  newcounter
if  histo    null
return newcounter
if    histo instanceof mutablehistogram
throw new metricsexception
histoname
return  mutablehistogram  histo
public metricmutablequantiles getquantile string histoname
//see getlonggauge for description on how this works.
mutablemetric histo   metricsmap get histoname
if  histo    null
metricmutablequantiles newcounter
new metricmutablequantiles histoname           60
histo   metricsmap putifabsent histoname  newcounter
if  histo    null
return newcounter
if    histo instanceof metricmutablequantiles
throw new metricsexception
histoname
return  metricmutablequantiles  histo
private<t extends mutablemetric> t
addnewmetricifabsent string name
t ret
class<t> metricclass
//if the value we get back is null then the put was successful and we will
// return that. otherwise metric should contain the thing that was in
// before the put could be completed.
mutablemetric metric   metricsmap putifabsent name  ret
if  metric    null
return ret
return returnexistingwithcast metric  metricclass  name
@suppresswarnings
private<t> t returnexistingwithcast mutablemetric metric
class<t> metricclass  string name
if   metricclass isassignablefrom metric getclass
throw new metricsexception
name       metricclass
metric getclass
return  t  metric
public void clearmetrics
metricsmap clear