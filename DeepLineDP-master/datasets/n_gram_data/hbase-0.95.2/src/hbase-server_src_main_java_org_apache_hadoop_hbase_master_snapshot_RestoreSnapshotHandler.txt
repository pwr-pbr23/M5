/**
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase master snapshot
import java io ioexception
import java util list
import java util concurrent cancellationexception
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop classification interfaceaudience
import org apache hadoop fs filesystem
import org apache hadoop fs path
import org apache hadoop hbase tablename
import org apache hadoop hbase hregioninfo
import org apache hadoop hbase htabledescriptor
import org apache hadoop hbase catalog catalogtracker
import org apache hadoop hbase catalog metaeditor
import org apache hadoop hbase errorhandling foreignexception
import org apache hadoop hbase errorhandling foreignexceptiondispatcher
import org apache hadoop hbase executor eventtype
import org apache hadoop hbase master masterfilesystem
import org apache hadoop hbase master masterservices
import org apache hadoop hbase master metricsmaster
import org apache hadoop hbase master snapshotsentinel
import org apache hadoop hbase master handler tableeventhandler
import org apache hadoop hbase monitoring monitoredtask
import org apache hadoop hbase monitoring taskmonitor
import org apache hadoop hbase protobuf generated hbaseprotos snapshotdescription
import org apache hadoop hbase snapshot clientsnapshotdescriptionutils
import org apache hadoop hbase snapshot restoresnapshotexception
import org apache hadoop hbase snapshot restoresnapshothelper
import org apache hadoop hbase snapshot snapshotdescriptionutils
import org apache hadoop hbase util fsutils
/**
* handler to restore a snapshot.
*
* <p>uses {@link restoresnapshothelper} to replace the table content with the
* data available in the snapshot.
*/
@interfaceaudience private
public class restoresnapshothandler extends tableeventhandler implements snapshotsentinel
private static final log log   logfactory getlog restoresnapshothandler class
private final htabledescriptor htabledescriptor
private final snapshotdescription snapshot
private final foreignexceptiondispatcher monitor
private final metricsmaster metricsmaster
private final monitoredtask status
private volatile boolean stopped   false
public restoresnapshothandler final masterservices masterservices
final snapshotdescription snapshot  final htabledescriptor htd
final metricsmaster metricsmaster  throws ioexception
super eventtype c_m_restore_snapshot  htd gettablename    masterservices  masterservices
this metricsmaster   metricsmaster
// snapshot information
this snapshot   snapshot
// monitor
this monitor   new foreignexceptiondispatcher
// check table exists.
gettabledescriptor
// this is the new schema we are going to write out as this modification.
this htabledescriptor   htd
this status   taskmonitor get   createstatus
snapshot getname
htabledescriptor gettablename
public restoresnapshothandler prepare   throws ioexception
return  restoresnapshothandler  super prepare
/**
* the restore table is executed in place.
*  - the on-disk data will be restored - reference files are put in place without moving data
*  -  [if something fail here: you need to delete the table and re-run the restore]
*  - meta will be updated
*  -  [if something fail here: you need to run hbck to fix meta entries]
* the passed in list gets changed in this method
*/
@override
protected void handletableoperation list<hregioninfo> hris  throws ioexception
masterfilesystem filesystemmanager   masterservices getmasterfilesystem
catalogtracker catalogtracker   masterservices getcatalogtracker
filesystem fs   filesystemmanager getfilesystem
path rootdir   filesystemmanager getrootdir
tablename tablename   htabledescriptor gettablename
try
// 1. update descriptor
this masterservices gettabledescriptors   add htabledescriptor
// 2. execute the on-disk restore
log debug     clientsnapshotdescriptionutils tostring snapshot
path snapshotdir   snapshotdescriptionutils getcompletedsnapshotdir snapshot  rootdir
restoresnapshothelper restorehelper   new restoresnapshothelper
masterservices getconfiguration    fs
snapshot  snapshotdir  htabledescriptor  rootdir  monitor  status
restoresnapshothelper restoremetachanges metachanges   restorehelper restorehdfsregions
// 3. applies changes to .meta.
hris clear
status setstatus
if  metachanges hasregionstoadd    hris addall metachanges getregionstoadd
if  metachanges hasregionstorestore    hris addall metachanges getregionstorestore
list<hregioninfo> hristoremove   metachanges getregionstoremove
metaeditor mutateregions catalogtracker  hristoremove  hris
// at this point the restore is complete. next step is enabling the table.
log info     clientsnapshotdescriptionutils tostring snapshot
tablename
catch  ioexception e
string msg       clientsnapshotdescriptionutils tostring snapshot
log error msg  e
monitor receive new foreignexception masterservices getservername   tostring    e
throw new restoresnapshotexception msg  e
@override
protected void completed final throwable exception
this stopped   true
if  exception    null
status abort     snapshot getname
exception getmessage
else
status markcomplete    snapshot getname
metricsmaster addsnapshotrestore status getcompletiontimestamp     status getstarttime
super completed exception
@override
public boolean isfinished
return this stopped
@override
public long getcompletiontimestamp
return this status getcompletiontimestamp
@override
public snapshotdescription getsnapshot
return snapshot
@override
public void cancel string why
if  this stopped  return
this stopped   true
string msg       clientsnapshotdescriptionutils tostring snapshot
why
log info msg
cancellationexception ce   new cancellationexception why
this monitor receive new foreignexception masterservices getservername   tostring    ce
@override
public foreignexception getexceptioniffailed
return this monitor getexception
@override
public void rethrowexceptioniffailed   throws foreignexception
monitor rethrowexception