/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase types
import java util iterator
import org apache hadoop classification interfaceaudience
import org apache hadoop classification interfacestability
import org apache hadoop hbase util order
import org apache hadoop hbase util positionedbyterange
/**
* <p>
* {@code struct} is a simple {@link datatype} for implementing "compound
* rowkey" and "compound qualifier" schema design strategies.
* </p>
* <h3>encoding</h3>
* <p>
* {@code struct} member values are encoded onto the target byte[] in the order
* in which they are declared. a {@code struct} may be used as a member of
* another {@code struct}. {@code struct}s are not {@code nullable} but their
* component fields may be.
* </p>
* <h3>sort order</h3>
* <p>
* {@code struct} instances sort according to the composite order of their
* fields, that is, left-to-right and depth-first. this can also be thought of
* as lexicographic comparison of concatenated members.
* </p>
* <p>
* {@link structiterator} is provided as a convenience for consuming the
* sequence of values. users may find it more appropriate to provide their own
* custom {@link datatype} for encoding application objects rather than using
* this {@code object[]} implementation. examples are provided in test.
* </p>
* @see structiterator
* @see datatype#isnullable()
*/
@interfaceaudience public
@interfacestability evolving
public class struct implements datatype<object>
@suppresswarnings
protected final datatype fields
protected final boolean isorderpreserving
protected final boolean isskippable
/**
* create a new {@code struct} instance defined as the sequence of
* {@code hdatatype}s in {@code membertypes}.
* <p>
* a {@code struct} is {@code orderpreserving} when all of its fields
* are {@code orderpreserving}. a {@code struct} is {@code skippable} when
* all of its fields are {@code skippable}.
* </p>
*/
@suppresswarnings
public struct datatype membertypes
this fields   membertypes
// a struct is not orderpreserving when any of its fields are not.
boolean preservesorder   true
// a struct is not skippable when any of its fields are not.
boolean skippable   true
for  int i   0  i < this fields length  i
datatype dt   this fields
if   dt isorderpreserving    preservesorder   false
if  i < this fields length   2     dt isskippable
throw new illegalargumentexception     i
if   dt isskippable    skippable   false
this isorderpreserving   preservesorder
this isskippable   skippable
@override
public boolean isorderpreserving     return isorderpreserving
@override
public order getorder     return null
@override
public boolean isnullable     return false
@override
public boolean isskippable     return isskippable
@suppresswarnings
@override
public int encodedlength object val
assert fields length    val length
int sum   0
for  int i   0  i < fields length  i
sum    fields encodedlength val
return sum
@override
public class<object> encodedclass     return object class
/**
* retrieve an {@link iterator} over the values encoded in {@code src}.
* {@code src}'s position is consumed by consuming this iterator.
*/
public structiterator iterator positionedbyterange src
return new structiterator src  fields
@override
public int skip positionedbyterange src
structiterator it   iterator src
int skipped   0
while  it hasnext
skipped    it skip
return skipped
@override
public object decode positionedbyterange src
int i   0
object ret   new object
iterator<object> it   iterator src
while  it hasnext
ret   it next
return ret
/**
* read the field at {@code index}. {@code src}'s position is not affected.
*/
public object decode positionedbyterange src  int index
assert index >  0
structiterator it   iterator src shallowcopy
for    index > 0  index
it skip
return it next
@suppresswarnings
@override
public int encode positionedbyterange dst  object val
assert fields length    val length
int written   0
for  int i   0  i < fields length  i
written    fields encode dst  val
return written