/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase regionserver
import java lang reflect method
import java util hashmap
import java util map
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop hbase hconstants
import org apache hadoop hbase notservingregionexception
import org apache hadoop hbase protobuf generated adminprotos closeregionrequest
import org apache hadoop hbase protobuf generated adminprotos compactregionrequest
import org apache hadoop hbase protobuf generated adminprotos flushregionrequest
import org apache hadoop hbase protobuf generated adminprotos getregioninforequest
import org apache hadoop hbase protobuf generated adminprotos getstorefilerequest
import org apache hadoop hbase protobuf generated adminprotos splitregionrequest
import org apache hadoop hbase protobuf generated clientprotos getrequest
import org apache hadoop hbase protobuf generated clientprotos multirequest
import org apache hadoop hbase protobuf generated clientprotos mutaterequest
import org apache hadoop hbase protobuf generated clientprotos scanrequest
import org apache hadoop hbase protobuf generated hbaseprotos regionspecifier
import org apache hadoop hbase protobuf generated rpcprotos requestheader
import org apache hadoop hbase regionserver hregionserver qospriority
import org apache hadoop hbase util pair
import com google common annotations visiblefortesting
import com google common base function
import com google protobuf message
import com google protobuf textformat
/**
* a guava function that will return a priority for use by qos facility in regionserver; e.g.
* rpcs to .meta. and -root-, etc., get priority.
*/
// todo: remove.  this is doing way too much work just to figure a priority.  do as elliott
// suggests and just have the client specify a priority.
//the logic for figuring out high priority rpcs is as follows:
//1. if the method is annotated with a qospriority of qos_high,
//   that is honored
//2. parse out the protobuf message and see if the request is for meta
//   region, and if so, treat it as a high priority rpc
//some optimizations for (2) are done here -
//clients send the argument classname as part of making the rpc. the server
//decides whether to deserialize the proto argument message based on the
//pre-established set of argument classes (knownargumentclasses below).
//this prevents the server from having to deserialize all proto argument
//messages prematurely.
//all the argument classes declare a 'getregion' method that returns a
//regionspecifier object. methods can be invoked on the returned object
//to figure out whether it is a meta region or not.
class qosfunction implements function<pair<requestheader  message>  integer>
public static final log log   logfactory getlog qosfunction class getname
private final map<string  integer> annotatedqos
//we need to mock the regionserver instance for some unit tests (set via
//setregionserver method.
private hregionserver hregionserver
@suppresswarnings
private final class<? extends message> knownargumentclasses   new class
getregioninforequest class
getstorefilerequest class
closeregionrequest class
flushregionrequest class
splitregionrequest class
compactregionrequest class
getrequest class
mutaterequest class
scanrequest class
multirequest class
// some caches for helping performance
private final map<string  class<? extends message>> argumenttoclassmap
new hashmap<string  class<? extends message>>
private final map<string  map<class<? extends message>  method>> methodmap
new hashmap<string  map<class<? extends message>  method>>
qosfunction final hregionserver hrs
this hregionserver   hrs
map<string  integer> qosmap   new hashmap<string  integer>
for  method m   hregionserver class getmethods
qospriority p   m getannotation qospriority class
if  p    null
qosmap put m getname    p priority
this annotatedqos   qosmap
if  methodmap get       null
methodmap put    new hashmap<class<? extends message>  method>
methodmap put    new hashmap<class<? extends message>  method>
for  class<? extends message> cls   knownargumentclasses
argumenttoclassmap put cls getname    cls
try
methodmap get    put cls  cls getdeclaredmethod
methodmap get    put cls  cls getdeclaredmethod
catch  exception e
throw new runtimeexception e
public boolean ismetaregion byte regionname
hregion region
try
region   hregionserver getregion regionname
catch  notservingregionexception ignored
return false
return region getregioninfo   ismetatable
@override
public integer apply pair<requestheader  message> headerandparam
requestheader header   headerandparam getfirst
string methodname   header getmethodname
integer prioritybyannotation   annotatedqos get header getmethodname
if  prioritybyannotation    null
return prioritybyannotation
message param   headerandparam getsecond
if  param    null
return hconstants normal_qos
string cls   param getclass   getname
class<? extends message> rpcargclass   argumenttoclassmap get cls
regionspecifier regionspecifier   null
//check whether the request has reference to meta region or now.
try
// check if the param has a region specifier; the pb methods are hasregion and getregion if
// hasregion returns true.  not all listed methods have region specifier each time.  for
// example, the scanrequest has it on setup but thereafter relies on the scannerid rather than
// send the region over every time.
method hasregion   methodmap get    get rpcargclass
if  hasregion    null     boolean hasregion invoke param   object null
method getregion   methodmap get    get rpcargclass
regionspecifier    regionspecifier getregion invoke param   object null
hregion region   hregionserver getregion regionspecifier
if  region getregioninfo   ismetatable
if  log istraceenabled
log trace     region getregionnameasstring
return hconstants high_qos
catch  exception ex
// not good throwing an exception out of here, a runtime anyways.  let the query go into the
// server and have it throw the exception if still an issue.  just mark it normal priority.
if  log istraceenabled    log trace     ex
return hconstants normal_qos
if  methodname equals          scanner methods
scanrequest request    scanrequest param
if   request hasscannerid
return hconstants normal_qos
regionscanner scanner   hregionserver getscanner request getscannerid
if  scanner    null    scanner getregioninfo   ismetaregion
if  log istraceenabled
// scanner requests are small in size so textformat version should not overwhelm log.
log trace     textformat shortdebugstring request
return hconstants high_qos
return hconstants normal_qos
@visiblefortesting
void setregionserver final hregionserver hrs
this hregionserver   hrs