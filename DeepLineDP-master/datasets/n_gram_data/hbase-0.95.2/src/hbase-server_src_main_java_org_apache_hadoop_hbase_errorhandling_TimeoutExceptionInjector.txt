/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase errorhandling
import java util timer
import java util timertask
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop classification interfaceaudience
import org apache hadoop classification interfacestability
import org apache hadoop hbase util environmentedgemanager
/**
* time a given process/operation and report a failure if the elapsed time exceeds the max allowed
* time.
* <p>
* the timer won't start tracking time until calling {@link #start()}. if {@link #complete()} or
* {@link #trigger()} is called before {@link #start()}, calls to {@link #start()} will fail.
*/
@interfaceaudience public
@interfacestability evolving
public class timeoutexceptioninjector
private static final log log   logfactory getlog timeoutexceptioninjector class
private final long maxtime
private volatile boolean complete
private final timer timer
private final timertask timertask
private long start    1
/**
* create a generic timer for a task/process.
* @param listener listener to notify if the process times out
* @param maxtime max allowed running time for the process. timer starts on calls to
*          {@link #start()}
*/
public timeoutexceptioninjector final foreignexceptionlistener listener  final long maxtime
this maxtime   maxtime
timer   new timer
timertask   new timertask
@override
public void run
// ensure we don't run this task multiple times
synchronized  this
// quick exit if we already marked the task complete
if  timeoutexceptioninjector this complete  return
// mark the task is run, to avoid repeats
timeoutexceptioninjector this complete   true
long end   environmentedgemanager currenttimemillis
timeoutexception tee    new timeoutexception
start  end  maxtime
string source       timer
listener receive new foreignexception source  tee
public long getmaxtime
return maxtime
/**
* for all time forward, do not throw an error because the process has completed.
*/
public void complete
// warn if the timer is already marked complete. this isn't going to be thread-safe, but should
// be good enough and its not worth locking just for a warning.
if  this complete
log warn
return
log debug
synchronized  this timertask
this complete   true
this timer cancel
/**
* start a timer to fail a process if it takes longer than the expected time to complete.
* <p>
* non-blocking.
* @throws illegalstateexception if the timer has already been marked done via {@link #complete()}
*           or {@link #trigger()}
*/
public synchronized void start   throws illegalstateexception
if  this start >  0
log warn
return
log debug     maxtime
timer schedule timertask  maxtime
this start   environmentedgemanager currenttimemillis
/**
* trigger the timer immediately.
* <p>
* exposed for testing.
*/
public void trigger
synchronized  timertask
if  this complete
log warn
return
log debug
this timer cancel
this timertask run