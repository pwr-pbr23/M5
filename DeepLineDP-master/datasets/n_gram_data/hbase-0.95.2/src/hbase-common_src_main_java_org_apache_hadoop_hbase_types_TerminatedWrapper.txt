/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase types
import org apache hadoop classification interfaceaudience
import org apache hadoop classification interfacestability
import org apache hadoop hbase util bytes
import org apache hadoop hbase util order
import org apache hadoop hbase util positionedbyterange
import org apache hadoop hbase util simplepositionedbyterange
/**
* wraps an existing {@code datatype} implementation as a terminated
* version of itself. this has the useful side-effect of turning an existing
* {@code datatype} which is not {@code skippable} into a
* {@code skippable} variant.
*/
@interfaceaudience public
@interfacestability evolving
public class terminatedwrapper<t> implements datatype<t>
protected final datatype<t> wrapped
protected final byte term
/**
* create a terminated version of the {@code wrapped}.
* @throws illegalargumentexception when {@code term} is null or empty.
*/
public terminatedwrapper datatype<t> wrapped  byte term
if  null    term    term length    0
throw new illegalargumentexception
this wrapped   wrapped
wrapped getorder   apply term
this term   term
/**
* create a terminated version of the {@code wrapped}.
* {@code term} is converted to a {@code byte[]} using
* {@link bytes#tobytes(string)}.
* @throws illegalargumentexception when {@code term} is null or empty.
*/
public terminatedwrapper datatype<t> wrapped  string term
this wrapped  bytes tobytes term
@override
public boolean isorderpreserving     return wrapped isorderpreserving
@override
public order getorder     return wrapped getorder
@override
public boolean isnullable     return wrapped isnullable
@override
public boolean isskippable     return true
@override
public int encodedlength t val
return wrapped encodedlength val    term length
@override
public class<t> encodedclass     return wrapped encodedclass
/**
* return the position at which {@code term} begins within {@code src},
* or {@code -1} if {@code term} is not found.
*/
protected int terminatorposition positionedbyterange src
byte a   src getbytes
final int offset   src getoffset
int i
skip  for  i   src getposition    i < src getlength    i
if  a    term  continue
int j
for  j   1  j < term length    offset   j < src getlength    j
if  a    term  continue skip
if  j    term length  return i     success
return  1
/**
* skip {@code src}'s position forward over one encoded value.
* @param src the buffer containing the encoded value.
* @return number of bytes skipped.
* @throws illegalargumentexception when the terminator sequence is not found.
*/
@override
public int skip positionedbyterange src
if  wrapped isskippable
return wrapped skip src
else
// find the terminator position
final int start   src getposition
int skipped   terminatorposition src
if   1    skipped  throw new illegalargumentexception
skipped    term length
src setposition skipped
return skipped   start
@override
public t decode positionedbyterange src
if  wrapped isskippable
return wrapped decode src
else
// find the terminator position
int term   terminatorposition src
if   1    term  throw new illegalargumentexception
byte b   new byte
src get b
// todo: should we assert that b.position == b.length?
t ret   wrapped decode new simplepositionedbyterange b
src get this term
return ret
/**
* write instance {@code val} into buffer {@code dst}.
* @throws illegalargumentexception when the encoded representation of
*           {@code val} contains the {@code term} sequence.
*/
@override
public int encode positionedbyterange dst  t val
final int start   dst getposition
int written   wrapped encode dst  val
positionedbyterange b   dst shallowcopy
b setlength dst getposition
b setposition start
if   1    terminatorposition b
dst setposition start
throw new illegalargumentexception
dst put term
return written   term length