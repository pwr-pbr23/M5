/**
* copyright the apache software foundation
*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements. see the notice file distributed with this
* work for additional information regarding copyright ownership. the asf
* licenses this file to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
* http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis, without
* warranties or conditions of any kind, either express or implied. see the
* license for the specific language governing permissions and limitations
* under the license.
*/
package org apache hadoop hbase io hfile bucket
import java io serializable
import java util concurrent concurrenthashmap
import java util concurrent atomic atomicinteger
import org apache hadoop classification interfaceaudience
/**
* map from type t to int and vice-versa. used for reducing bit field item
* counts.
*/
@interfaceaudience public
public final class uniqueindexmap<t> implements serializable
private static final long serialversionuid    1145635738654002342l
concurrenthashmap<t  integer> mforwardmap   new concurrenthashmap<t  integer>
concurrenthashmap<integer  t> mreversemap   new concurrenthashmap<integer  t>
atomicinteger mindex   new atomicinteger 0
// map a length to an index. if we can't, allocate a new mapping. we might
// race here and get two entries with the same deserialiser. this is fine.
int map t parameter
integer ret   mforwardmap get parameter
if  ret    null  return ret intvalue
int nexti   mindex incrementandget
assert  nexti < short max_value
mforwardmap put parameter  nexti
mreversemap put nexti  parameter
return nexti
t unmap int leni
integer len   integer valueof leni
assert mreversemap containskey len
return mreversemap get len