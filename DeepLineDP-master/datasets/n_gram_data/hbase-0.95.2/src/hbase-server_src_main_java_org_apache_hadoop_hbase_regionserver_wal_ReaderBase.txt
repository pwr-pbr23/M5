/**
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase regionserver wal
import java io ioexception
import org apache hadoop classification interfaceaudience
import org apache hadoop conf configuration
import org apache hadoop fs fsdatainputstream
import org apache hadoop fs filesystem
import org apache hadoop fs path
import org apache hadoop hbase protobuf generated walprotos waltrailer
import org apache hadoop hbase util fsutils
@interfaceaudience private
public abstract class readerbase implements hlog reader
protected configuration conf
protected filesystem fs
protected path path
protected long edit   0
protected long filelength
protected waltrailer trailer
// maximum size of the wal trailer in bytes. if a user writes/reads a trailer with size larger
// than this size, it is written/read respectively, with a warn message in the log.
protected int trailerwarnsize
/**
* compression context to use reading.  can be null if no compression.
*/
protected compressioncontext compressioncontext   null
protected boolean emptycompressioncontext   true
/**
* default constructor.
*/
public readerbase
@override
public void init filesystem fs  path path  configuration conf  fsdatainputstream stream
throws ioexception
this conf   conf
this path   path
this fs   fs
this filelength   this fs getfilestatus path  getlen
this trailerwarnsize   conf getint hlog wal_trailer_warn_size
hlog default_wal_trailer_warn_size
initreader stream
boolean compression   hascompression
if  compression
// if compression is enabled, new dictionaries are created here.
try
if  compressioncontext    null
compressioncontext   new compressioncontext lrudictionary class
fsutils isrecoverededits path
else
compressioncontext clear
catch  exception e
throw new ioexception    e
initaftercompression
@override
public hlog entry next   throws ioexception
return next null
@override
public hlog entry next hlog entry reuse  throws ioexception
hlog entry e   reuse
if  e    null
e   new hlog entry new hlogkey    new waledit
if  compressioncontext    null
e setcompressioncontext compressioncontext
boolean hasentry   readnext e
edit
if  compressioncontext    null    emptycompressioncontext
emptycompressioncontext   false
return hasentry ? e   null
@override
public void seek long pos  throws ioexception
if  compressioncontext    null    emptycompressioncontext
while  next      null
if  getposition      pos
emptycompressioncontext   false
break
seekonfs pos
/**
* initializes the log reader with a particular stream (may be null).
* reader assumes ownership of the stream if not null and may use it. called once.
*/
protected abstract void initreader fsdatainputstream stream  throws ioexception
/**
* initializes the compression after the shared stuff has been initialized. called once.
*/
protected abstract void initaftercompression   throws ioexception
/**
* @return whether compression is enabled for this log.
*/
protected abstract boolean hascompression
/**
* read next entry.
* @param e the entry to read into.
* @return whether there was anything to read.
*/
protected abstract boolean readnext hlog entry e  throws ioexception
/**
* performs a filesystem-level seek to a certain position in an underlying file.
*/
protected abstract void seekonfs long pos  throws ioexception
@override
public waltrailer getwaltrailer
return null