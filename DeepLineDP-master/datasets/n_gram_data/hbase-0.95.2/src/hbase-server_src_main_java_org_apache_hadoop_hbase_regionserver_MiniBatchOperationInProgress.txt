/*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
* http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase regionserver
import org apache hadoop classification interfaceaudience
import org apache hadoop classification interfacestability
import org apache hadoop hbase coprocessor regionobserver
import org apache hadoop hbase regionserver wal waledit
/**
* wraps together the mutations which are applied as a batch to the region and their operation
* status and waledits.
* @see regionobserver#prebatchmutate(observercontext, minibatchoperationinprogress)
* @see regionobserver#postbatchmutate(observercontext, minibatchoperationinprogress)
* @param <t> pair<mutation, integer> pair of mutations and associated rowlock ids .
*/
@interfaceaudience public
@interfacestability evolving
public class minibatchoperationinprogress<t>
private final t operations
private final operationstatus retcodedetails
private final waledit waleditsfromcoprocessors
private final int firstindex
private final int lastindexexclusive
public minibatchoperationinprogress t operations  operationstatus retcodedetails
waledit waleditsfromcoprocessors  int firstindex  int lastindexexclusive
this operations   operations
this retcodedetails   retcodedetails
this waleditsfromcoprocessors   waleditsfromcoprocessors
this firstindex   firstindex
this lastindexexclusive   lastindexexclusive
/**
* @return the number of operations(mutations) involved in this batch.
*/
public int size
return this lastindexexclusive   this firstindex
/**
* @param index
* @return the operation(mutation) at the specified position.
*/
public t getoperation int index
return operations
/**
* sets the status code for the operation(mutation) at the specified position.
* by setting this status, {@link regionobserver} can make hregion to skip mutations.
* @param index
* @param opstatus
*/
public void setoperationstatus int index  operationstatus opstatus
this retcodedetails   opstatus
/**
* @param index
* @return gets the status code for the operation(mutation) at the specified position.
*/
public operationstatus getoperationstatus int index
return this retcodedetails
/**
* sets the waledit for the operation(mutation) at the specified position.
* @param index
* @param waledit
*/
public void setwaledit int index  waledit waledit
this waleditsfromcoprocessors   waledit
/**
* @param index
* @return gets the waledit for the operation(mutation) at the specified position.
*/
public waledit getwaledit int index
return this waleditsfromcoprocessors
private int getabsoluteindex int index
if  index < 0    this firstindex   index >  this lastindexexclusive
throw new arrayindexoutofboundsexception index
return this firstindex   index