/**
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase master
import java util list
import java util map
import org apache hadoop classification interfaceaudience
import org apache hadoop conf configurable
import org apache hadoop hbase clusterstatus
import org apache hadoop hbase hbaseioexception
import org apache hadoop hbase hregioninfo
import org apache hadoop hbase servername
/**
* makes decisions about the placement and movement of regions across
* regionservers.
*
* <p>cluster-wide load balancing will occur only when there are no regions in
* transition and according to a fixed period of a time using {@link #balancecluster(map)}.
*
* <p>inline region placement with {@link #immediateassignment} can be used when
* the master needs to handle closed regions that it currently does not have
* a destination set for.  this can happen during master failover.
*
* <p>on cluster startup, bulk assignment can be used to determine
* locations for all regions in a cluster.
*
* <p>this classes produces plans for the {@link assignmentmanager} to execute.
*/
@interfaceaudience public
public interface loadbalancer extends configurable
/**
* set the current cluster status.  this allows a loadbalancer to map host name to a server
* @param st
*/
void setclusterstatus clusterstatus st
/**
* set the master service.
* @param masterservices
*/
void setmasterservices masterservices masterservices
/**
* perform the major balance operation
* @param clusterstate
* @return list of plans
*/
list<regionplan> balancecluster map<servername
list<hregioninfo>> clusterstate  throws hbaseioexception
/**
* perform a round robin assignment of regions.
* @param regions
* @param servers
* @return map of servername to regioninfos
*/
map<servername  list<hregioninfo>> roundrobinassignment
list<hregioninfo> regions
list<servername> servers
throws hbaseioexception
/**
* assign regions to the previously hosting region server
* @param regions
* @param servers
* @return list of plans
*/
map<servername  list<hregioninfo>> retainassignment
map<hregioninfo  servername> regions
list<servername> servers
throws hbaseioexception
/**
* sync assign a region
* @param regions
* @param servers
* @return map regioninfos to servernames
*/
map<hregioninfo  servername> immediateassignment
list<hregioninfo> regions
list<servername> servers
throws hbaseioexception
/**
* get a random region server from the list
* @param regioninfo region for which this selection is being done.
* @param servers
* @return servername
*/
servername randomassignment
hregioninfo regioninfo  list<servername> servers
throws hbaseioexception