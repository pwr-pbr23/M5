/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase backup example
import java io ioexception
import org apache hadoop classification interfaceaudience
import org apache hadoop conf configuration
import org apache hadoop conf configured
import org apache hadoop hbase client hconnection
import org apache hadoop hbase util bytes
import org apache hadoop hbase zookeeper zkutil
import org apache hadoop hbase zookeeper zookeeperwatcher
import org apache zookeeper keeperexception
/**
* example class for how to use the table archiving coordinated via zookeeper
*/
@interfaceaudience public
public class zktablearchiveclient extends configured
/** configuration key for the archive node. */
private static final string zookeeper_znode_hfile_archive_key
private hconnection connection
public zktablearchiveclient configuration conf  hconnection connection
super conf
this connection   connection
/**
* turn on backups for all hfiles for the given table.
* <p>
* all deleted hfiles are moved to the archive directory under the table directory, rather than
* being deleted.
* <p>
* if backups are already enabled for this table, does nothing.
* <p>
* if the table does not exist, the archiving the table's hfiles is still enabled as a future
* table with that name may be created shortly.
* @param table name of the table to start backing up
* @throws ioexception if an unexpected exception occurs
* @throws keeperexception if zookeeper can't be reached
*/
public void enablehfilebackupasync final byte table  throws ioexception  keeperexception
createhfilearchivemanager   enablehfilebackup table  stop
/**
* disable hfile backups for the given table.
* <p>
* previously backed up files are still retained (if present).
* <p>
* asynchronous operation - some extra hfiles may be retained, in the archive directory after
* disable is called, dependent on the latency in zookeeper to the servers.
* @param table name of the table stop backing up
* @throws ioexception if an unexpected exception occurs
* @throws keeperexception if zookeeper can't be reached
*/
public void disablehfilebackup string table  throws ioexception  keeperexception
disablehfilebackup bytes tobytes table
/**
* disable hfile backups for the given table.
* <p>
* previously backed up files are still retained (if present).
* <p>
* asynchronous operation - some extra hfiles may be retained, in the archive directory after
* disable is called, dependent on the latency in zookeeper to the servers.
* @param table name of the table stop backing up
* @throws ioexception if an unexpected exception occurs
* @throws keeperexception if zookeeper can't be reached
*/
public void disablehfilebackup final byte table  throws ioexception  keeperexception
createhfilearchivemanager   disablehfilebackup table  stop
/**
* disable hfile backups for all tables.
* <p>
* previously backed up files are still retained (if present).
* <p>
* asynchronous operation - some extra hfiles may be retained, in the archive directory after
* disable is called, dependent on the latency in zookeeper to the servers.
* @throws ioexception if an unexpected exception occurs
* @throws keeperexception if zookeeper can't be reached
*/
public void disablehfilebackup   throws ioexception  keeperexception
createhfilearchivemanager   disablehfilebackup   stop
/**
* determine if archiving is enabled (but not necessarily fully propagated) for a table
* @param table name of the table to check
* @return <tt>true</tt> if it is, <tt>false</tt> otherwise
* @throws ioexception if a connection to zookeeper cannot be established
* @throws keeperexception
*/
public boolean getarchivingenabled byte table  throws ioexception  keeperexception
hfilearchivemanager manager   createhfilearchivemanager
try
return manager isarchivingenabled table
finally
manager stop
/**
* determine if archiving is enabled (but not necessarily fully propagated) for a table
* @param table name of the table to check
* @return <tt>true</tt> if it is, <tt>false</tt> otherwise
* @throws ioexception if an unexpected network issue occurs
* @throws keeperexception if zookeeper can't be reached
*/
public boolean getarchivingenabled string table  throws ioexception  keeperexception
return getarchivingenabled bytes tobytes table
/**
* @return a new {@link hfilearchivemanager} to manage which tables' hfiles should be archived
*         rather than deleted.
* @throws keeperexception if we can't reach zookeeper
* @throws ioexception if an unexpected network issue occurs
*/
private synchronized hfilearchivemanager createhfilearchivemanager   throws keeperexception
ioexception
return new hfilearchivemanager this connection  this getconf
/**
* @param conf conf to read for the base archive node
* @param zookeeper zookeeper to used for building the full path
* @return get the znode for long-term archival of a table for
*/
public static string getarchiveznode configuration conf  zookeeperwatcher zookeeper
return zkutil joinznode zookeeper baseznode  conf get zookeeper_znode_hfile_archive_key
tablehfilearchivetracker hfile_archive_znode_parent