/*
derby - class org.apache.derby.drda.netservlet
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby drda
import java io
import java util
import java net
import java security accesscontroller
import java security privilegedexceptionaction
import javax servlet
import javax servlet http
import org apache derby iapi tools i18n localizedresource
import org apache derby iapi reference property
/**
this servlet can be used to start derby network server from a remote location.
<p>
these servlet configuration parameters are understood by this servlet.
<ul>
<li><pre>portnumber</pre> - port number to use. the default is 1527.
<li><pre>startnetworkserveroninit</pre> - starts the derby network server at servlet
initialization if 'true'.
<li><pre>tracingdirectory</pre> - directory for trace files
</ul>
*/
public class netservlet extends httpservlet
private final static int max_connect_trys   20
private final static string servlet_prop_messages
private final static string servlet_address
private string formheader   null
private string host
private int portnumber 1527
private string tracingdirectory
private boolean logstatus  false 	   logging off
private boolean tracestatus   false 	   tracing off
private string knownlang
private string locale
private final static int not_given    2
private final static int invalid    3
private networkservercontrol server
private printwriter out
// for dopri block
private runnable service
/**
initialize the servlet.
configuration parameters:
<ul>
<li><pre>portnumber</pre> - port number
<li><pre>tracedirectory</pre> - location of trace directory
<li><pre>startnetworkserveroninit</pre> - start the server on initialization
</ul>
*/
public void init servletconfig config
throws servletexception
localizedresource langutil   new localizedresource null null servlet_prop_messages
string port   config getinitparameter
if  port    null
int p   integer valueof port  intvalue
if  p > 0
portnumber   p
this tracingdirectory   config getinitparameter
if   this tracingdirectory    null
this tracingdirectory
string startup   config getinitparameter
// test if the server is already running
try
//don't send output to console
if  server    null
server   new networkservercontrol inetaddress getbyname host   portnumber
// assert this.tracingdirectory != null
if      this tracingdirectory trim   equals
server settracedirectory this tracingdirectory
if  isserverstarted server 1
return
catch  exception e
if  startup    null
boolean start   boolean valueof startup  booleanvalue
if  start
runserver langutil  null  null
return
/**
get the form of netservlet. provides buttons and forms to control the
network server.
*/
public void doget  httpservletrequest request  httpservletresponse response
throws servletexception  ioexception
string logonmessage
string logoffmessage
string traceonmessage
string traceoffmessage
string traceonoffmessage
string startmessage
string stopmessage
string returnmessage
string tracesessionmessage
string tracedirmessage
string contmessage
string setparammessage
string setparammessage2
string netparammessage
localizedresource langutil
langutil   getcurrentappui request
response setcontenttype
//prevent caching of the servlet since contents can change - beetle 4649
response setheader
formheader
request getrequesturi
out   new printwriter new
outputstreamwriter response getoutputstream       true
//inialize messages
logonmessage   escapesinglequotes langutil gettextmessage
logoffmessage   escapesinglequotes langutil gettextmessage
traceonmessage   escapesinglequotes langutil gettextmessage
traceoffmessage   escapesinglequotes langutil gettextmessage
startmessage   escapesinglequotes langutil gettextmessage
stopmessage   escapesinglequotes langutil gettextmessage
tracesessionmessage   escapesinglequotes langutil gettextmessage
traceonoffmessage   escapesinglequotes langutil gettextmessage
returnmessage   escapesinglequotes langutil gettextmessage
tracedirmessage   escapesinglequotes langutil gettextmessage
contmessage   escapesinglequotes langutil gettextmessage
setparammessage   escapesinglequotes langutil gettextmessage
setparammessage2   escapesinglequotes langutil gettextmessage
netparammessage   escapesinglequotes langutil gettextmessage
printbanner langutil
// set up a server we can use
if  server    null
try
server   new networkservercontrol
catch  exception e
printerrorform langutil  request  e  returnmessage
return
server setclientlocale locale
string form   getform request
string doaction   getdoaction request
// if doaction is set, use it to determine form
if  doaction    null
if  doaction equals traceonoffmessage
form   tracesessionmessage
else
form   doaction
// if no form, determine form based on server status
boolean serverstatus   getserverstatus
if  form    null
if  serverstatus
form   startmessage
else
form   stopmessage
else if  form equals startmessage
if   serverstatus
runserver langutil  request  returnmessage
else if  form equals stopmessage
if  serverstatus
shutdownserver langutil  request  returnmessage
setdefaults
else if  form equals returnmessage     form equals returnmessage
// check if server is still running and use that to determine which form
if  serverstatus
form   startmessage
else
form   stopmessage
out println  formheader
// display forms
form   escapesinglequotes form
doaction   escapesinglequotes doaction
if  form equals startmessage
string logbutton   getlogging request
string tracebutton   gettrace request
if  logbutton     null    logbutton equals logonmessage
if  logging langutil  true  request  returnmessage
logstatus   true
if  logbutton     null    logbutton equals logoffmessage
if  logging langutil  false  request  returnmessage
logstatus   false
if  tracebutton     null    tracebutton equals traceonmessage
if  traceall langutil  true  request  returnmessage
tracestatus   true
if  tracebutton     null    tracebutton equals traceoffmessage
if  traceall langutil  false  request  returnmessage
tracestatus   false
displaycurrentstatus request  langutil  returnmessage
out println    langutil gettextmessage
out println     stopmessage
out println    langutil gettextmessage
if  logstatus
out println    logoffmessage
else
out println    logonmessage
out println    langutil gettextmessage
if  tracestatus
out println    traceoffmessage
else
out println    traceonmessage
out println    langutil gettextmessage
out println     tracesessionmessage
out println    langutil gettextmessage
out println     tracedirmessage
out println    langutil gettextmessage
out println     netparammessage
else if  form equals stopmessage
printascontentheader langutil gettextmessage
string logbutton   getlogging request
string tracebutton    gettrace request
if  logbutton     null    logbutton equals logonmessage
logstatus   true
if  logbutton     null    logbutton equals logoffmessage
logstatus   false
if  tracebutton     null    tracebutton equals traceonmessage
tracestatus   true
if  tracebutton     null    tracebutton equals traceoffmessage
tracestatus   false
if  logstatus
out println    langutil gettextmessage
out println    logoffmessage
else
out println    langutil gettextmessage
out println    logonmessage
if  tracestatus
out println    langutil gettextmessage
out println    traceoffmessage
else
out println    langutil gettextmessage
out println    traceonmessage
out println    langutil gettextmessage
out println    startmessage
else if  form equals tracesessionmessage
if  doaction    null
if  doaction equals traceonoffmessage
string sessionid   request getparameter
int session   0
try
session    new integer sessionid   intvalue
catch  exception e
printerrorform langutil  request
langutil gettextmessage
sessionid  langutil gettextmessage
returnmessage
return
properties p   null
try
p   server getcurrentproperties
catch  exception e
printerrorform langutil  request  e  returnmessage
return
// if it's on, turn it off, if its off, turn it on
boolean val
if  p getproperty property drda_prop_trace sessionid     null
val   false
else
val   true
if  tracesession langutil  val  session  request  returnmessage
if  val
out println    langutil gettextmessage    sessionid
else
out println    langutil gettextmessage    sessionid
else
return
printascontentheader langutil gettextmessage
out println      gethtmllabelledmessageinstance langutil
out println
out println
out println    traceonoffmessage
out println    returnmessage
else if  form equals tracedirmessage
boolean set   false
string tracedirectory   null
printascontentheader tracedirmessage
if  doaction    null
if  doaction equals tracedirmessage
tracedirectory   getparam request
if  tracedirectory langutil  tracedirectory  request
returnmessage
set   true
else
return
if  set
out println    langutil gettextmessage    tracedirectory
out println    returnmessage
else
out println      gethtmllabelledmessageinstance langutil
out println
tracingdirectory
out println
out println    tracedirmessage
out println    returnmessage
else if  form equals netparammessage
int maxthreads   0
int timeslice   0
string maxname   langutil gettextmessage
string slicename   langutil gettextmessage
try
properties p   server getcurrentproperties
string val   p getproperty property drda_prop_maxthreads
maxthreads   new integer val   intvalue
val   p getproperty property drda_prop_timeslice
timeslice   new integer val   intvalue
catch  exception e
printerrorform langutil  request  e  returnmessage
return
if  doaction    null    doaction equals netparammessage
int newmaxthreads   getintparameter request
langutil  returnmessage
int newtimeslice    newmaxthreads    invalid  ? not_given
getintparameter request        langutil
returnmessage
if   newmaxthreads    invalid      newtimeslice    invalid
return
else if    newmaxthreads    not_given    newtimeslice    not_given
if  newmaxthreads    not_given
maxthreads   newmaxthreads
if  newtimeslice    not_given
timeslice   newtimeslice
if   setnetparam langutil  maxthreads  timeslice  request
returnmessage
return
out println formheader
printascontentheader netparammessage
out println    langutil gettextmessage    new integer maxthreads  tostring
out println    langutil gettextmessage    new integer timeslice  tostring
out println
out println    maxname
out println
out println    slicename
out println
out println
out println    netparammessage
out println    returnmessage
else
system out println    form
out println    form
out println
out println
/**
get the form of netservlet. provides a buttons and form to control the
network server
*/
public void dopost  httpservletrequest request  httpservletresponse response
throws servletexception  ioexception
// simply call the doget()
doget request  response
private string getform httpservletrequest request   throws java io ioexception
return getparam request
private string getdoaction httpservletrequest request  throws java io ioexception
return getparam request
private string getlogging httpservletrequest request  throws java io ioexception
return getparam request
private string gettrace httpservletrequest request  throws java io ioexception
return getparam request
/**
*  get utf8 parameter value and decode international characters
*  @param request   httpservletrequest
*  @param paramname  parameter name
*  @return decoded string
*/
private string getparam httpservletrequest request  string paramname  throws
java io ioexception
string newvalue  null
string value   request getparameter paramname
if  value    null
return value
newvalue   new string value getbytes
return newvalue
/**
*	start the network server and attempt to connect to it before
*	returning
*
* @param localutil localizedresource to use to translate messages
* @param request httpservetrequest for error forms
* @param returnmessage	localized continue message for continue button on error form
* @exception servletexception throws an exception if error in starting the
* 		network server during initialization
*/
private void runserver localizedresource localutil  httpservletrequest request
string returnmessage
throws servletexception
service   new runnable
public void run
try
//echo server output to console
networkservercontrol runserver   new
networkservercontrol inetaddress getbyname host
portnumber
runserver start null
catch  exception e
throw new runtimeexception e getmessage
thread servthread   null
try
servthread    thread  accesscontroller doprivileged
new privilegedexceptionaction
public object run   throws exception
return new thread service
catch  exception e
throw new runtimeexception e getmessage
servthread start
// try to connect to server
try
boolean connectworked   false
int t   0
do
t
try
thread sleep 100
catch  interruptedexception ie
throw new servletexception localutil gettextmessage
try
if  isserverstarted server 1
connectworked   true
catch  exception e       ignore error we'll just try again
while   connectworked    t < max_connect_trys
if  t >  max_connect_trys
throw new exception localutil gettextmessage
new integer max_connect_trys  tostring
// turn logging on if required
if  logstatus
server logconnections true
// turn tracing on
if  tracestatus
server trace true
catch  exception e
if  out    null
printerrorform localutil  request  e  returnmessage
else
throw new servletexception e getmessage
/**
*	display an error form
*
* @param localutil	localizedresource to use to translate messages
* @param request httpservetrequest for error forms
* @param e		exception to be displayed
* @param returnmessage	localized continue message for continue button on error form
*/
private void printerrorform localizedresource localutil  httpservletrequest request
exception e  string returnmessage
printascontentheader localutil gettextmessage
out println    localutil gettextmessage    e getmessage
out println    returnmessage
out println
out println
/**
*	display an error form
*
* @param localutil	localizedresource to use to translate messages
* @param request httpservetrequest for error forms
* @param msg	string to be displayed
* @param returnmessage	localized continue message for continue button on error form
*/
private void printerrorform localizedresource localutil  httpservletrequest request
string msg  string returnmessage
printascontentheader localutil gettextmessage
out println    localutil gettextmessage    msg
out println    returnmessage
out println
out println
/**
*	display the current network server status
*
* @param request	httpservetrequest for  forms
* @param localutil		localizedresource to use for localizing messages
* @param returnmessage	localized continue message for continue button on error form
*/
private void displaycurrentstatus httpservletrequest request
localizedresource localutil  string returnmessage
try
printascontentheader localutil gettextmessage
properties p   server getcurrentproperties
string val   p getproperty property drda_prop_logconnections
if  val equals
logstatus   true
else
logstatus   false
if  logstatus
out println    localutil gettextmessage
else
out println    localutil gettextmessage
val   p getproperty property drda_prop_traceall
if  val equals
tracestatus   true
else
tracestatus   false
if  tracestatus
out println    localutil gettextmessage
else
out println    localutil gettextmessage
val   p getproperty property drda_prop_portnumber
out println    localutil gettextmessage    val
catch  exception e
printerrorform localutil  request  e  returnmessage
/**
*	get the currrent server status by using test connection
*
* @return true if server is up and reachable; false; otherwise
*/
private boolean getserverstatus
try
if  isserverstarted server 1
return true
catch  exception e
return false
/**
*	shutdown the network server
*
* @param localutil	localizedresource to use to translate messages
* @param request httpservetrequest for  forms
* @param returnmessage	localized continue message for continue button on error form
* @return true if succeeded; false; otherwise
*/
private boolean shutdownserver localizedresource localutil
httpservletrequest request  string returnmessage
boolean retval   false
try
server shutdown
retval   true
catch  exception e
printerrorform localutil  request  e  returnmessage
return retval
/**
*	turn logging of connections on
*
* @param localutil	localizedresource to use to translate messages
* @param request httpservetrequest for  forms
* @param returnmessage	localized continue message for continue button on error form
* @return true if succeeded; false; otherwise
*/
private boolean logging localizedresource localutil  boolean val
httpservletrequest request  string returnmessage
boolean retval   false
try
server logconnections val
retval   true
catch  exception e
printerrorform localutil  request  e  returnmessage
return retval
/**
*	change tracing for all sessions
*
* @param localutil	localizedresource to use to translate messages
* @param val	if true, turn tracing on, if false turn it off
* @param request httpservetrequest for  forms
* @param returnmessage	localized continue message for continue button on error form
* @return true if succeeded; false; otherwise
*/
private boolean traceall localizedresource localutil  boolean val
httpservletrequest request  string returnmessage
boolean retval   false
try
server trace val
retval   true
catch  exception e
printerrorform localutil  request  e  returnmessage
return retval
/**
*	change tracing for a given session
*
* @param localutil	localizedresource to use to translate messages
* @param val	if true, turn tracing on, if false turn it off
* @param session	session to trace
* @param request httpservetrequest for  forms
* @param returnmessage	localized continue message for continue button on error form
* @return true if succeeded; false; otherwise
*/
private boolean tracesession localizedresource localutil  boolean val  int session
httpservletrequest request  string returnmessage
boolean retval   false
try
server trace session  val
retval   true
catch  exception e
printerrorform localutil  request  e  returnmessage
return retval
/**
* set trace directory
*
* @param localutil	localizedresource to use to translate messages
* @param tracedirectory	directory for trace files
* @param request 			httpservetrequest for  forms
* @param returnmessage		localized continue message for continue
*							button on error form
* @return true if succeeded; false; otherwise
*/
private boolean tracedirectory localizedresource localutil  string tracedirectory
httpservletrequest request  string returnmessage
boolean retval   false
if   tracedirectory    null     tracedirectory equals
printerrorform localutil  request
localutil gettextmessage
localutil gettextmessage      returnmessage
return retval
try
this tracingdirectory   tracedirectory
server settracedirectory tracedirectory
retval   true
catch  exception e
printerrorform localutil  request  e  returnmessage
return retval
/**
* set network server parameters
*
* @param localutil	localizedresource to use to translate messages
* @param max				maximum number of threads
* @param slice				time slice for each connection
* @param request 			httpservetrequest for  forms
* @param returnmessage		localized continue message for continue
*							button on error form
* @return true if succeeded; false; otherwise
*/
private boolean setnetparam localizedresource localutil  int max  int slice
httpservletrequest request  string returnmessage
boolean retval   false
try
server setmaxthreads max
server settimeslice slice
retval   true
catch  exception e
printerrorform localutil  request  e  returnmessage
return retval
/**
* set defaults for logging and tracing (both off)
*/
private void setdefaults
logstatus   false
tracestatus   false
/**
* get an integer parameter
*
* @param request 			httpservetrequest for  forms
* @param name				parameter name
* @param fieldkey			key for the name of the field we're reading.
* @param localutil				localizedresource to use in localizing messages
* @param returnmessage		localized continue message for continue
*							button on error form
*/
private int getintparameter httpservletrequest request
string name  string fieldkey  localizedresource localutil  string returnmessage
string val   request getparameter name
int retval
if  val    null    val equals
return not_given
try
retval    new integer val   intvalue
catch  exception e
printerrorform localutil  request localutil gettextmessage
val  localutil gettextmessage fieldkey    returnmessage
return invalid
if  retval < 0
// negative integers not allowed for the parameters we're getting.
printerrorform localutil  request  localutil gettextmessage
val  localutil gettextmessage fieldkey    returnmessage
return invalid
return retval
/**
* print derby network server banner
*/
private void printbanner localizedresource localutil
out println  #navskip
localutil gettextmessage
out println
localutil gettextmessage
out println
out println    localutil gettextmessage
out println
out println
out println    localutil gettextmessage
out println
/**
* determine the locale file needed for this browsers preferences
* defaults to the settings for derby.locale and derby.codeset if set
*		english otherwise if browsers preferences can't be found
*
* @param request 			httpservetrequest for forms
* @return the appui which fits the browsers preferences
*/
private localizedresource getcurrentappui httpservletrequest request
localizedresource localutil
string acceptlanguage   request getheader
localutil   new localizedresource null null servlet_prop_messages
// if no language specified use one set by derby.locale, derby.codeset
locale   null
if  acceptlanguage    null
return localutil
// use a tokenizer ot separate acceptable languages
stringtokenizer tokenizer   new stringtokenizer acceptlanguage
while  tokenizer hasmoretokens
//get the next acceptable language
string lang   tokenizer nexttoken
lang   getlocstringfromlanguage lang
int langindex   translationavailable lang
// have we found one
if  langindex     1
localutil init null  lang  servlet_prop_messages
// locale will be passed to server, server routines will get set appropriately
locale   lang
return localutil
// nothing worked use defaults
return localutil
/**
* get locale string from language which may have qvalue set
*
* @param lang	language string to parse
*
* @return stripped language string to use in matching
*/
private string getlocstringfromlanguage string lang
int semi
// cut off any q-value that might come after a semi-colon
if   semi   lang indexof         1
lang   lang substring 0  semi
// trim any whitespace and fix the code, as some browsers might send a bad format
lang   fixlanguagecode lang trim
return lang
/**
* check if the required translation is available
*
* @param lang	language we are looking for
*
* @return index into language array if found, -1 otherwise;
*/
private int translationavailable string lang
// assert lang == fixlanguagecode(lang)
// we don't need to use touppercase() anymore, as the lang is already fixed
for  int i   0  i < knownlang length  i
if  knownlang equals lang
return i
return  1
/**
* fix the language code, as some browsers send then in a bad format (for instance,
* firefox sends en-us instead of en_us).
*
* @param lang	language to be fixed
*
* @return fixed version of the language, with _ separating parts and country in upper case
*/
private string fixlanguagecode  string lang
int index   lang indexof
if   index     1
return fixlanguagecode  lang  index
index   lang indexof
if   index     1
return fixlanguagecode  lang  index
return lang
private string fixlanguagecode string lang  int index
return lang substring 0 index        lang substring index 1  touppercase locale english
/**
* get an html labelled message from the resource bundle file, according to
* the given key.
*/
public string gethtmllabelledmessageinstance localizedresource localutil  string key  string id
if  id    null
id
return      id       localutil gettextmessage key
/**
* print the received string as a header.
* @param str the string to be printed as a header.
*/
private void printascontentheader string str
out println  navskip     str
return
/**
* if the received string has one or more single quotes
* in it, replace each one with the html escape-code
* for a single quote (apostrophe) so that the string
* can be properly displayed on a submit button.
* @param str the string in which we want to escape
*  single quotes.
*/
private string escapesinglequotes string str
if   str    null      str indexof    < 0
return str
char  ca   str tochararray
// worst (and extremely unlikely) case is every
// character is a single quote, which means the
// escaped string would need to be 4 times as long.
char  result   new char
int j   0
for  int i   0  i < ca length  i
if  ca
result
result
result
result
else
result   ca
return new string result  0  j
private static boolean isserverstarted networkservercontrol server  int ntries
for  int i   1  i <  ntries  i
try
thread sleep 500
server ping
return true
catch  exception e
if  i    ntries
return false
return false