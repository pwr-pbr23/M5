/*
derby - class org.apache.derby.impl.store.raw.data.encryptcontainerundooperation
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl store raw data
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi services io storedformatids
import org apache derby iapi store raw compensation
import org apache derby iapi store raw loggable
import org apache derby iapi store raw transaction
import org apache derby iapi store raw undoable
import org apache derby iapi util bytearray
import org apache derby iapi store raw log loginstant
import org apache derby iapi error standardexception
import java io objectoutput
import java io objectinput
import java io ioexception
import org apache derby iapi services io limitobjectinput
/** a encrypt container undo operation rolls back the change of a
*  encrypt container operation
*/
public class encryptcontainerundooperation implements compensation
// the operation to rollback
transient private	encryptcontaineroperation undoop
/** during redo, the whole operation will be reconstituted from the log */
/**
*	set up a encrypt container undo operation during run time rollback
*  @param op encrypt contaner operatation that is to be undone.
*/
public encryptcontainerundooperation encryptcontaineroperation op
undoop   op
/*
* formatable methods
*/
// no-arg constructor, required by formatable
public encryptcontainerundooperation     super
public void writeexternal objectoutput out  throws ioexception
// nothing to write.
/**
@exception ioexception cannot read log record from log stream
@exception classnotfoundexception cannot read bytearray object
*/
public void readexternal objectinput in
throws ioexception  classnotfoundexception
// nothing to read.
/**
return my format identifier.
*/
public int gettypeformatid
return storedformatids logop_encrypt_container_undo
/**
compensation method
*/
/** set up a container undo operation during recovery redo. */
public void setundoop undoable op
if  sanitymanager debug
sanitymanager assert op instanceof encryptcontaineroperation
undoop    encryptcontaineroperation op
/**
loggable methods
*/
/**
* check if this operation needs to be redone during recovery redo.
* returns true if this op should be redone during recovery redo,
* @param xact	the transaction that is doing the rollback
* @return  true, if this operation needs to be redone during recovery.
* @exception standardexception standard derby error policy
*/
public boolean needsredo transaction xact
throws standardexception
return true
/**
the default for prepared log is always null for all the operations
that don't have optionaldata.  if an operation has optional data,
the operation need to prepare the optional data for this method.
encrypt conatainer undo operation has no optional data to write out
*/
public bytearray getpreparedlog
return  bytearray  null
/** apply the undo operation, in this implementation of the
rawstore, it can only call the undome method of undoop
@param xact			the transaction that is doing the rollback
@param instant		the log instant of this compenstaion operation
@param in			optional data
@exception ioexception can be thrown by any of the methods of objectinput.
@exception standardexception standard derby policy.
@see encryptcontaineroperation#generateundo
*/
public final void dome transaction xact  loginstant instant
limitobjectinput in
throws standardexception  ioexception
undoop undome xact
releaseresource xact
/* make sure resource found in undoop is released */
public void releaseresource transaction xact
if  undoop    null
undoop releaseresource xact
/* undo operation is a compensation log operation */
public int group
return loggable compensation   loggable rawstore
/**
debug: print self.
*/
public string tostring
if  sanitymanager debug
string str
if  undoop    null
str    undoop tostring
else
str
return str
else
return null