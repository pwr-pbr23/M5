/*
derby - class org.apache.derby.impl.sql.compile.reftypecompiler
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl sql compile
import org apache derby iapi services loader classfactory
import org apache derby iapi error standardexception
import org apache derby iapi types typeid
import org apache derby iapi types datatypedescriptor
import org apache derby iapi types datatypedescriptor
import org apache derby iapi types datavaluefactory
import org apache derby iapi types refdatavalue
import org apache derby iapi sql compile typecompiler
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi reference classname
/**
* this class implements typecompiler for the sql ref datatype.
*
* @author jeff lichtman
*/
public class reftypecompiler extends basetypecompiler
/** @see typecompiler#getcorrespondingprimitivetypename */
public string getcorrespondingprimitivetypename
if  sanitymanager debug
sanitymanager throwassert
return null
/**
* @see typecompiler#getcasttocharwidth
*/
public int getcasttocharwidth datatypedescriptor dts
if  sanitymanager debug
sanitymanager throwassert
return 0
/** @see typecompiler#convertible */
public boolean convertible typeid othertype
boolean fordatatypefunction
return false
/**
* tell whether this type is compatible with the given type.
*
* @see typecompiler#compatible */
public boolean compatible typeid othertype
return convertible othertype false
/** @see typecompiler#comparable */
public boolean comparable typeid othertype
boolean forequals
classfactory cf
return false
/** @see typecompiler#storable */
public boolean storable typeid othertype  classfactory cf
return othertype isreftypeid
/** @see typecompiler#interfacename */
public string interfacename
return classname refdatavalue
protected string nullmethodname
return