/*
derby - class org.apache.derby.client.net.netconnectionrequest
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby client net
import javax transaction xa xid
import org apache derby client am sqlexception
import org apache derby client am clientmessageid
import org apache derby client am utils
import org apache derby shared common reference sqlstate
public class netconnectionrequest extends request implements connectionrequestinterface
netconnectionrequest netagent netagent  ccsidmanager ccsidmanager  int buffersize
super netagent  ccsidmanager  buffersize
//----------------------------- entry points ---------------------------------
void writeexchangeserverattributes string externalname
int targetagent
int targetsqlam
int targetrdb
int targetsecmgr
int targetcmntcpip
int targetcmnappc
int targetxamgr
int targetsyncptmgr
int targetrsyncmgr  throws sqlexception
// send the exchange server attributes command to the server.
// no other commands will be chained to the excsat because
// the manager levels are needed before anything else is attempted.
buildexcsat externalname
targetagent
targetsqlam
targetrdb
targetsecmgr
targetcmntcpip
targetcmnappc
targetxamgr
targetsyncptmgr
targetrsyncmgr
void writedummyexchangeserverattributes   throws sqlexception
// send the exchange server attributes command to the server,
// without any parameters
builddummyexcsat
void writeaccesssecurity int securitymechanism
string databasename
byte publickey  throws sqlexception
buildaccsec securitymechanism  databasename  publickey
void writesecuritycheck int securitymechanism
string databasename
string userid
string password
byte encrypteduserid
byte encryptedpassword  throws sqlexception
buildsecchk securitymechanism
databasename
userid
password
encrypteduserid
encryptedpassword
void writeaccessdatabase string rdbnam
boolean readonly
byte correlationtoken
byte productdata
typdef typdef  throws sqlexception
buildaccrdb rdbnam
readonly
correlationtoken
productdata
typdef
public void writecommitsubstitute netconnection connection  throws sqlexception
builddummyexcsat
public void writelocalcommit netconnection connection  throws sqlexception
buildrdbcmm
public void writelocalrollback netconnection connection  throws sqlexception
buildrdbrllbck
public void writelocalxastart netconnection connection  throws sqlexception
//build the synnctl commit command
public void writelocalxacommit netconnection conn  throws sqlexception
//build the synnctl rollback command
public void writelocalxarollback netconnection conn  throws sqlexception
public void writexastartunitofwork netconnection conn  throws sqlexception
public void writexaendunitofwork netconnection conn  throws sqlexception
protected void writexaprepare netconnection conn  throws sqlexception
protected void writexacommit netconnection conn  xid xid  throws sqlexception
protected void writexarollback netconnection conn  xid xid  throws sqlexception
protected void writexarecover netconnection conn  int flag  throws sqlexception
protected void writexaforget netconnection conn  xid xid  throws sqlexception
public void writesynctype int codepoint  int synctype
writescalar1byte codepoint  synctype
public void writeforget int codepoint  int value
public void writereleaseconversation int codepoint  int value
void writenullxid int codepoint
void writexid int codepoint  xid xid  throws sqlexception
void writexaflags int codepoint  int xaflags
//----------------------helper methods----------------------------------------
// these methods are "private protected", which is not a recognized java privilege,
// but means that these methods are private to this class and to subclasses,
// and should not be used as package-wide friendly methods.
// rdb commit unit of work (rdbcmm) command commits all work performed
// for the current unit of work.
//
// the relational database name (rdbnam) is an optional parameter
// which will not be sent by this command to reduce size, building,
// and parsing.
void buildrdbcmm   throws sqlexception
createcommand
writelengthcodepoint 0x04  codepoint rdbcmm
// rdb rollback unit of work(rdbrllbck) command rolls back
// all work performed for the current unit of work.
//
// the relational database name (rdbnam) is an optional parameter
// which will not be sent by this command to reduce size, building,
// and parsing.
void buildrdbrllbck   throws sqlexception
createcommand
writelengthcodepoint 0x04  codepoint rdbrllbck
// build the exchange server attributes command.
// this command sends the following information to the server.
// - this driver's server class name
// - this driver's level of each of the manager's it supports
// - this driver's product release level
// - this driver's external name
// - this driver's server name
void buildexcsat string externalname
int targetagent
int targetsqlam
int targetrdb
int targetsecmgr
int targetcmntcpip
int targetcmnappc
int targetxamgr
int targetsyncptmgr
int targetrsyncmgr  throws sqlexception
createcommand
// begin excsat collection by placing the 4 byte llcp in the buffer.
// the length of this command will be computed later and "filled in"
// with the call to request.updatelengthbytes().
marklengthbytes codepoint excsat
// place the external name for the client into the buffer.
// the external name was previously calculated before the call to this method.
buildextnam externalname
// place the server name for the client into the buffer.
buildsrvnam
// place the server release level for the client into the buffer.
// this is a hard coded value for the driver.
buildsrvrlslv
// the managers supported by this driver and their levels will
// be sent to the server.  the variables which store these values
// were initialized during object constrcution to the highest values
// supported by the driver.
// for the case of the manager levels object, there is no
// need to have the length of the ddm object dynamically calculated
// because this method knows exactly how many will be sent and can set
// this now.
// each manager level class and level are 4 bytes long and
// right now 5 are being sent for a total of 20 bytes or 0x14 bytes.
// writescalarheader will be called to insert the llcp.
buildmgrlvlls targetagent
targetsqlam
targetrdb
targetsecmgr
targetxamgr
targetsyncptmgr
targetrsyncmgr
// place the server class name into the buffer.
// this value is hard coded for the driver.
buildsrvclsnm
// the excsat command is complete so the updatelengthbytes method
// is called to dynamically compute the length for this command and insert
// it into the buffer
updatelengthbytes
void builddummyexcsat   throws sqlexception
createcommand
// begin excsat collection by placing the 4 byte llcp in the buffer.
// the length of this command will be computed later and "filled in"
// with the call to request.updatelengthbytes().
marklengthbytes codepoint excsat
// the excsat command is complete so the updatelengthbytes method
// is called to dynamically compute the length for this command and insert
// it into the buffer
updatelengthbytes
void buildaccsec int secmec
string rdbnam
byte sectkn  throws sqlexception
createcommand
// place the llcp for the accsec in the buffer.  save the length bytes for
// later update
marklengthbytes codepoint accsec
// the security mechanism is a required instance variable.  it will
// always be sent.
buildsecmec secmec
// the rdbnam will be built and sent.  different sqlam levels support
// different lengths.  at this point the length has been checked against
// the maximum allowable length.  so write the bytes and padd up to the
// minimum length if needed.
buildrdbnam rdbnam
if  sectkn    null
buildsectkn sectkn
// the accsec command is complete so notify the the request object to
// update the ddm length and the dss header length.
updatelengthbytes
void buildsecchk int secmec
string rdbnam
string user
string password
byte sectkn
byte sectkn2  throws sqlexception
createcommand
marklengthbytes codepoint secchk
// always send the negotiated security mechanism for the connection.
buildsecmec secmec
// the rdbnam will be built and sent.  different sqlam levels support
// different lengths.  at this point the length has been checked against
// the maximum allowable length.  so write the bytes and padd up to the
// minimum length if needed.
buildrdbnam rdbnam
if  user    null
buildusrid user
if  password    null
buildpassword password
if  sectkn    null
buildsectkn sectkn
if  sectkn2    null
buildsectkn sectkn2
updatelengthbytes
// the access rdb (accrdb) command makes a named relational database (rdb)
// available to a requester by creating an instance of an sql application
// manager.  the access rdb command then binds the created instance to the target
// agent and to the rdb. the rdb remains available (accessed) until
// the communications conversation is terminate.
void buildaccrdb string rdbnam
boolean readonly
byte crrtkn
byte prddta
typdef typdef  throws sqlexception
createcommand
marklengthbytes codepoint accrdb
// the relational database name specifies the name of the rdb to
// be accessed.  this can be different sizes depending on the level of
// support.  the size will have ben previously checked so at this point just
// write the data and pad with the correct number of bytes as needed.
// this instance variable is always required.
buildrdbnam rdbnam
// the rdb access manager class specifies an instance of the sqlam
// that accesses the rdb.  the sqlam manager class codepoint
// is always used/required for this.  this instance variable
// is always required.
buildrdbacccl
// product specific identifier specifies the product release level
// of this driver.  see the hard coded value in the netconfiguration class.
// this instance variable is always required.
buildprdid
// product specific data.  this is an optional parameter which carries
// product specific information.  although it is optional, it will be
// sent to the server.  use the first byte to determine the number
// of the prddta bytes to write to the buffer. note: this length
// doesn't include itself so increment by it by 1 to get the actual
// length of this data.
buildprddta prddta
// the typdefnam parameter specifies the name of the data type to data representation
// mappings used when this driver sends command data objects.
buildtypdefnam typdef gettypdefnam
if  crrtkn    null
netagent_ netconnection_ constructcrrtkn
buildcrrtkn netagent_ netconnection_ crrtkn_
// this specifies the single-byte, double-byte
// and mixed-byte ccsids of the scalar data arrays (sdas) in the identified
// data type to the data representation mapping definitions.  this can
// contain 3 ccsids.  the driver will only send the ones which were set.
buildtypdefovr typdef isccsidsbcset
typdef getccsidsbc
typdef isccsiddbcset
typdef getccsiddbc
typdef isccsidmbcset
typdef getccsidmbc
// rdb allow update is an optional parameter which indicates
// whether the rdb allows the requester to perform update operations
// in the rdb.  if update operations are not allowed, this connection
// is limited to read-only access of the rdb resources.
buildrdbalwupd readonly
// the statement decimal delimiter (sttdecdel),
// statement string delimiter (sttstrdel),
// and target default value return (trgdftrt) are all optional
// instance variables which will not be sent to the server.
// the command and the dss are complete so make the call to notify
// the request object.
updatelengthbytes
void buildsyncctlmigrate   throws sqlexception
void buildsyncctlcommit int xaflags  xid xid  throws sqlexception
void buildsyncctlrollback int xaflags  throws sqlexception
// the external name is the name of the job, task, or process on a
// system for which a ddm server is active.
private void buildextnam string extnam  throws sqlexception
int extnamtruncatelength   utils min extnam length
netconfiguration extnam_maxsize
writescalarstring codepoint extnam
extnam substring 0  extnamtruncatelength
// server name is the name of the ddm server.
private void buildsrvnam string srvnam  throws sqlexception
int srvnamtruncatelength   utils min srvnam length
netconfiguration srvnam_maxsize
writescalarstring codepoint srvnam
srvnam substring 0  srvnamtruncatelength
// server product release level string specifies the product
// release level of a ddm server.
private void buildsrvrlslv   throws sqlexception
// hard-coded to clientdnc 1.0 for dnc 1.0.
writescalarstring codepoint srvrlslv  netconfiguration srvrlslv
private void buildsrvclsnm   throws sqlexception
// server class name is hard-coded to qderby/jvm for dnc.
writescalarstring codepoint srvclsnm  netconfiguration srvclsnm_jvm
// precondition: valid secmec is assumed.
private void buildsecmec int secmec  throws sqlexception
writescalar2bytes codepoint secmec  secmec
// relational database name specifies the name of a relational database
// of the server.
// if length of rdb name <= 18 characters, there is not change to the format
// of the rdb name.  the length of the rdbnam remains fixed at 18 which includes
// any right bland padding if necessary.
// if length of the rdb name is > 18 characters, the length of the rdb name is
// identical to the length of the rdb name.  no right blank padding is required.
private void buildrdbnam string rdbnam  throws sqlexception
// since this gets built more than once on the connect flow,
// see if we can optimize
int rdbnamlength   rdbnam length
if  rdbnamlength <  netconfiguration pkg_identifier_fixed_len
writescalarpaddedstring codepoint rdbnam
rdbnam
netconfiguration pkg_identifier_fixed_len       minimum length of rdbnam
else
if  rdbnamlength <  netconfiguration pkg_identifier_max_len
writescalarstring codepoint rdbnam  rdbnam
else
throw new sqlexception netagent_ logwriter_
new clientmessageid sqlstate net_dbname_too_long   rdbnam
//"at sqlam level " + netagent_.targetsqlam_);
private void buildsectkn byte sectkn  throws sqlexception
if  sectkn length > netconfiguration sectkn_maxsize
throw new sqlexception netagent_ logwriter_
new clientmessageid sqlstate net_sectkn_too_long
writescalarbytes codepoint sectkn  sectkn
private void buildusrid string usrid  throws sqlexception
int usridlength   usrid length
if   usridlength    0      usridlength > netconfiguration usrid_maxsize
throw new sqlexception netagent_ logwriter_
new clientmessageid sqlstate net_userid_too_long
writescalarstring codepoint usrid  usrid
private void buildpassword string password  throws sqlexception
int passwordlength   password length
if   passwordlength    0      passwordlength > netconfiguration password_maxsize
throw new sqlexception netagent_ logwriter_
new clientmessageid sqlstate net_password_too_long
if  netagent_ logwriter_    null
// remember the position of password in order to
// mask it out in trace (see request.sendbytes()).
passwordincluded_   true
passwordstart_   offset_   4
passwordlength_   passwordlength
writescalarstring codepoint password  password
private void buildrdbacccl   throws sqlexception
writescalar2bytes codepoint rdbacccl  codepoint sqlam
private void buildprdid   throws sqlexception
writescalarstring codepoint prdid  netconfiguration prdid       product id is hard coded to dnc01000 for dnc 1 0
private void buildprddta byte prddta  throws sqlexception
int prddtalength    prddta   0xff    1
writescalarbytes codepoint prddta  prddta  0  prddtalength
private void buildtypdefnam string typdefnam  throws sqlexception
writescalarstring codepoint typdefnam  typdefnam
void buildtypdefovr boolean sendccsidsbc
int ccsidsbc
boolean sendccsiddbc
int ccsiddbc
boolean sendccsidmbc
int ccsidmbc  throws sqlexception
marklengthbytes codepoint typdefovr
// write the single-byte ccsid used by this driver.
if  sendccsidsbc
writescalar2bytes codepoint ccsidsbc  ccsidsbc
// write the double-byte ccsid used by this driver.
if  sendccsiddbc
writescalar2bytes codepoint ccsiddbc  ccsiddbc
// write the mixed-byte ccsid used by this driver
if  sendccsidmbc
writescalar2bytes codepoint ccsidmbc  ccsidmbc
updatelengthbytes
private void buildmgrlvlls int agent
int sqlam
int rdb
int secmgr
int xamgr
int syncptmgr
int rsyncmgr  throws sqlexception
marklengthbytes codepoint mgrlvlls
// place the managers and their levels in the buffer
writecodepoint4bytes codepoint agent  agent
writecodepoint4bytes codepoint sqlam  sqlam
writecodepoint4bytes codepoint rdb  rdb
writecodepoint4bytes codepoint secmgr  secmgr
if  netagent_ netconnection_ isxaconnection
if  xamgr    netconfiguration mgrlvl_na
writecodepoint4bytes codepoint xamgr  xamgr
if  syncptmgr    netconfiguration mgrlvl_na
writecodepoint4bytes codepoint syncptmgr  syncptmgr
if  rsyncmgr    netconfiguration mgrlvl_na
writecodepoint4bytes codepoint rsyncmgr  rsyncmgr
updatelengthbytes
private void buildcrrtkn byte crrtkn  throws sqlexception
writescalarbytes codepoint crrtkn  crrtkn
private void buildrdbalwupd boolean readonly  throws sqlexception
if  readonly
writescalar1byte codepoint rdbalwupd  codepoint false