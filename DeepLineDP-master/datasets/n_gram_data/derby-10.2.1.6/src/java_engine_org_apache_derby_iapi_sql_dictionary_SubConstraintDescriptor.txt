/*
derby - class org.apache.derby.iapi.sql.dictionary.subconstraintdescriptor
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi sql dictionary
import org apache derby catalog uuid
import org apache derby iapi services sanity sanitymanager
/**
* this interface is used to get information from a subconstraintdescriptor.
* a subkeyconstraintdescriptor is used within the datadictionary to
* get auxiliary constraint information from the system table
* that is auxiliary to sysconstraints.
*
* @version 0.1
* @author jerry brenner
*/
public abstract class subconstraintdescriptor extends tupledescriptor
implements uniquetupledescriptor
/**
public interface for this class:
<ol>
<li> public void	setconstraintid(uuid constraintid);</li>
<li>public boolean hasbackingindex();</li>
<li>public void	settabledescriptor(tabledescriptor td);</li>
<li>public tabledescriptor gettabledescriptor();</li>
</ol>
*/
// implementation
tabledescriptor			td
uuid					constraintid
/**
* constructor for a subconstraintdescriptorimpl
*
* @param constraintid		the uuid of the constraint.
*/
subconstraintdescriptor uuid constraintid
this constraintid   constraintid
/**
* sets the uuid of the constraint.
*
* @param constraintid	the constraint id.
*/
public void	setconstraintid uuid constraintid
this constraintid   constraintid
/**
* gets the uuid of the constraint.
*
* @return	the uuid of the constraint.
*/
public uuid	getuuid
return constraintid
/**
* does this constraint have a backing index?
*
* @return boolean	whether or not there is a backing index for this constraint.
*/
public abstract boolean hasbackingindex
/**
* caches the tabledescriptor of the
* table that the constraint is on.
*
* @param td	the tabledescriptor.
*/
public void	settabledescriptor tabledescriptor td
this td   td
/**
* returns the cached tabledescriptor, if
* supplied, that the constraint is on.
*
* @return the cached tabledescriptor,
* if supplied.
*/
public tabledescriptor gettabledescriptor
return td
/**
* convert the subconstraintdescriptor to a string.
*
* @return	a string representation of this subconstraintdescriptor
*/
public string	tostring
if  sanitymanager debug
return     constraintid
else
return