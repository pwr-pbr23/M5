/*
derby - class org.apache.derby.impl.sql.compile.dropviewnode
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package	org apache derby impl sql compile
import org apache derby iapi services context contextmanager
import org apache derby iapi sql execute constantaction
import org apache derby impl sql compile activationclassbuilder
import org apache derby impl sql execute baseactivation
import org apache derby iapi sql resultset
import org apache derby iapi error standardexception
import org apache derby iapi sql compile compilercontext
import org apache derby iapi sql dictionary datadictionary
import org apache derby iapi sql dictionary schemadescriptor
import org apache derby iapi sql dictionary tabledescriptor
import org apache derby iapi services sanity sanitymanager
/**
* a dropviewnode is the root of a querytree that represents a drop view
* statement.
*
* @author jerry brenner
*/
public class dropviewnode extends ddlstatementnode
/**
* initializer for a dropviewnode
*
* @param dropobjectname	the name of the object being dropped
*
*/
public void init object dropobjectname
throws standardexception
initandcheck dropobjectname
public string statementtostring
return
/**
*  bind the drop view node
*
* @return	the bound query tree
*
* @exception standardexception		thrown on error
*/
public querytreenode bind   throws standardexception
datadictionary dd   getdatadictionary
compilercontext cc   getcompilercontext
tabledescriptor td   dd gettabledescriptor getrelativename
getschemadescriptor
/*
* statement is dependent on the tabledescriptor
* if td is null, let execution throw the error like
* it is before.
*/
if  td    null
cc createdependency td
return this
// inherit generate() method from ddlstatementnode
/**
* create the constant information that will drive the guts of execution.
*
* @exception standardexception		thrown on failure
*/
public constantaction	makeconstantaction   throws standardexception
return	getgenericconstantactionfactory   getdropviewconstantaction  getfullname
getrelativename
getschemadescriptor