/*
derby - class org.apache.derby.iapi.sql.compile.visitor
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package	org apache derby iapi sql compile
import org apache derby iapi error standardexception
/**
* a visitor is an object that traverses the querytree
* and performs some action.
*
* @author jamie
*/
public interface visitor
/**
* this is the default visit operation on a
* querytreenode.  it just returns the node.  this
* will typically suffice as the default visit
* operation for most visitors unless the visitor
* needs to count the number of nodes visited or
* something like that.
* <p>
* visitors will overload this method by implementing
* a version with a signature that matches a specific
* type of node.  for example, if i want to do
* something special with aggregate nodes, then
* that visitor will implement a
* 		<i> visit(aggregatenode node)</i>
* method which does the aggregate specific processing.
*
* @param node 	the node to process
*
* @return a query tree node.  often times this is
* the same node that was passed in, but visitors that
* replace nodes with other nodes will use this to
* return the new replacement node.
*
* @exception standardexception may be throw an error
*	as needed by the visitor (i.e. may be a normal error
*	if a particular node is found, e.g. if checking
*	a group by, we don't expect to find any columnreferences
*	that aren't under an aggregatenode -- the easiest
*	thing to do is just throw an error when we find the
*	questionable node).
*/
visitable visit visitable node
throws standardexception
/**
* method that is called to see
* if query tree traversal should be
* stopped before visiting all nodes.
* useful for short circuiting traversal
* if we already know we are done.
*
* @return true/false
*/
boolean stoptraversal
/**
* method that is called to indicate whether
* we should skip all nodes below this node
* for traversal.  useful if we want to effectively
* ignore/prune all branches under a particular
* node.
* <p>
* differs from stoptraversal() in that it
* only affects subtrees, rather than the
* entire traversal.
*
* @param node 	the node to process
*
* @return true/false
*/
boolean skipchildren visitable node  throws standardexception