/*
derby - class org.apache.derby.impl.sql.compile.ucode_charstream
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
/* generated by:javacc: do not edit this line. ucode_charstream.java version 0.7pre6 */
package org apache derby impl sql compile
/**
* an implementation of interface charstream, where the stream is assumed to
* contain only unicode characters.
*/
// note: this class was modified to support the ability to get all the
// characters in the input stream between two tokens.  - jeff
public final class ucode_charstream implements charstream
// the next two lines are added to support ability to get the input
// between two tokens.
int charcnt
int charoffset
public static final boolean staticflag   false
public int bufpos    1
int bufsize
int available
int tokenbegin
private int bufline
private int bufcolumn
private int column   0
private int line   1
private boolean prevchariscr   false
private boolean prevcharislf   false
private java io reader inputstream
private char nextcharbuf
private char buffer
private int maxnextcharind   0
private int nextcharind    1
private final void expandbuff boolean wraparound
char newbuffer   new char
int newbufline   new int
int newbufcolumn   new int
// the next line was added to support ability to get the input
// between two tokens.
int newcharoffset   new int
try
if  wraparound
system arraycopy buffer  tokenbegin  newbuffer  0  bufsize   tokenbegin
system arraycopy buffer  0  newbuffer
bufsize   tokenbegin  bufpos
buffer   newbuffer
system arraycopy bufline  tokenbegin  newbufline  0  bufsize   tokenbegin
system arraycopy bufline  0  newbufline  bufsize   tokenbegin  bufpos
bufline   newbufline
system arraycopy bufcolumn  tokenbegin  newbufcolumn  0  bufsize   tokenbegin
system arraycopy bufcolumn  0  newbufcolumn  bufsize   tokenbegin  bufpos
bufcolumn   newbufcolumn
// the next three lines were added to support ability to get input
// between two tokens.
system arraycopy charoffset  tokenbegin  newcharoffset  0  bufsize   tokenbegin
system arraycopy charoffset  0  newcharoffset  bufsize   tokenbegin  bufpos
charoffset   newcharoffset
bufpos     bufsize   tokenbegin
else
system arraycopy buffer  tokenbegin  newbuffer  0  bufsize   tokenbegin
buffer   newbuffer
system arraycopy bufline  tokenbegin  newbufline  0  bufsize   tokenbegin
bufline   newbufline
system arraycopy bufcolumn  tokenbegin  newbufcolumn  0  bufsize   tokenbegin
bufcolumn   newbufcolumn
// the next two lines were added to support ability to get input
// between two tokens.
system arraycopy charoffset  tokenbegin  newcharoffset  0  bufsize   tokenbegin
charoffset   newcharoffset
bufpos    tokenbegin
catch  throwable t
throw new error t getmessage
available    bufsize    2048
tokenbegin   0
private final void fillbuff   throws java io ioexception
if  maxnextcharind    nextcharbuf length
maxnextcharind   nextcharind   0
int i
try
if   i   inputstream read nextcharbuf  maxnextcharind
nextcharbuf length   maxnextcharind       1
inputstream close
throw new java io ioexception
else
maxnextcharind    i
return
catch java io ioexception e
if  bufpos    0
bufpos
backup 0
else
bufline   line
bufcolumn   column
if  tokenbegin     1
tokenbegin   bufpos
throw e
private final char readchar   throws java io ioexception
if    nextcharind >  maxnextcharind
fillbuff
return nextcharbuf
public char begintoken   throws java io ioexception
if  inbuf > 0
inbuf
return buffer[tokenbegin    bufpos    bufsize   1  ?  bufpos   0
bufpos]
tokenbegin   0
bufpos    1
char c   readchar
return c
private final void updatelinecolumn char c
column
if  prevcharislf
prevcharislf   false
line     column   1
else if  prevchariscr
prevchariscr   false
if  c
prevcharislf   true
else
line     column   1
switch  c
case
prevchariscr   true
break
case
prevcharislf   true
break
case
column
column     8    column   07
break
default
break
bufline   line
bufcolumn   column
private int inbuf   0
public final char readchar   throws java io ioexception
if  inbuf > 0
inbuf
return  char buffer
if    bufpos    available
if  available    bufsize
if  tokenbegin > 2048
bufpos   0
available   tokenbegin
else if  tokenbegin < 0
bufpos   0
else
expandbuff false
else if  available > tokenbegin
available   bufsize
else if   tokenbegin   available  < 2048
expandbuff true
else
available   tokenbegin
char c   readchar
updatelinecolumn c
// the next line was added to support ability to get the input
// between two tokens.
charoffset   charcnt
return  buffer   c
/**
* @deprecated
* @see #getendcolumn
*/
public final int getcolumn
return bufcolumn
/**
* @deprecated
* @see #getendline
*/
public final int getline
return bufline
public final int getendcolumn
return bufcolumn
public final int getendline
return bufline
public final int getbegincolumn
return bufcolumn
public final int getbeginline
return bufline
// this method was added to support ability to get the input
// between two tokens.
public final int getbeginoffset
return charoffset
// this method was added to support ability to get the input
// between two tokens.
public final int getendoffset
return charoffset
public final void backup int amount
inbuf    amount
if   bufpos    amount  < 0
bufpos    bufsize
public ucode_charstream java io reader dstream
int startline  int startcolumn  int buffersize
inputstream   dstream
line   startline
column   startcolumn   1
available   bufsize   buffersize
buffer   new char
nextcharbuf   new char
bufline   new int
bufcolumn   new int
// the next line was added to support ability to get the input
// between two tokens.
charoffset   new int
public ucode_charstream java io reader dstream
int startline  int startcolumn
this dstream  startline  startcolumn  4096
public void reinit java io reader dstream
int startline  int startcolumn  int buffersize
inputstream   dstream
line   startline
column   startcolumn   1
if  buffer    null    buffersize    buffer length
available   bufsize   buffersize
buffer   new char
nextcharbuf   new char
bufline   new int
bufcolumn   new int
// the next line was added to support ability to get the input
// between two tokens.
inbuf   maxnextcharind   charcnt   tokenbegin   0
nextcharind   bufpos    1
public void reinit java io reader dstream
int startline  int startcolumn
reinit dstream  startline  startcolumn  4096
public ucode_charstream java io inputstream dstream  int startline
int startcolumn  int buffersize
this new java io inputstreamreader dstream   startline  startcolumn  4096
public ucode_charstream java io inputstream dstream  int startline
int startcolumn
this dstream  startline  startcolumn  4096
public void reinit java io inputstream dstream  int startline
int startcolumn  int buffersize
reinit new java io inputstreamreader dstream   startline  startcolumn  4096
public void reinit java io inputstream dstream  int startline
int startcolumn
reinit dstream  startline  startcolumn  4096
public final string getimage
if  bufpos >  tokenbegin
return new string buffer  tokenbegin  bufpos   tokenbegin   1
else
return new string buffer  tokenbegin  bufsize   tokenbegin
new string buffer  0  bufpos   1
public final char getsuffix int len
char ret   new char
if   bufpos   1  >  len
system arraycopy buffer  bufpos   len   1  ret  0  len
else
system arraycopy buffer  bufsize    len   bufpos   1   ret  0
len   bufpos   1
system arraycopy buffer  0  ret  len   bufpos   1  bufpos   1
return ret
public void done
nextcharbuf   null
buffer   null
bufline   null
bufcolumn   null
// the next line was added to support ability to get the input
// between two tokens.
charoffset   null
/**
* method to adjust line and column numbers for the start of a token.<br>
*/
public void adjustbeginlinecolumn int newline  int newcol
int start   tokenbegin
int len
if  bufpos >  tokenbegin
len   bufpos   tokenbegin   inbuf   1
else
len   bufsize   tokenbegin   bufpos   1   inbuf
int i   0  j   0  k   0
int nextcoldiff   0  columndiff   0
while  i < len
bufline    bufline
bufline   newline
nextcoldiff   columndiff   bufcolumn   bufcolumn
bufcolumn   newcol   columndiff
columndiff   nextcoldiff
i
if  i < len
bufline   newline
bufcolumn   newcol   columndiff
while  i   < len
if  bufline    bufline
bufline   newline
else
bufline   newline
line   bufline
column   bufcolumn