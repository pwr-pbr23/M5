/*
derby - class org.apache.derby.impl.sql.execute.nestedloopleftouterjoinresultset
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl sql execute
import org apache derby iapi services monitor monitor
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi services stream headerprintwriter
import org apache derby iapi services stream infostreams
import org apache derby iapi error standardexception
import org apache derby iapi sql activation
import org apache derby iapi sql resultset
import org apache derby iapi types datavaluedescriptor
import org apache derby iapi reference sqlstate
import org apache derby iapi sql execute execrow
import org apache derby iapi sql execute executioncontext
import org apache derby iapi sql execute noputresultset
import org apache derby iapi services loader generatedmethod
/**
* takes 2 noputresultsets and a join filter and returns
* the join's rows satisfying the filter as a result set
* plus the rows from the left joined with a null row from
* the right when there is no matching row in the right
* result set.
*/
class nestedloopleftouterjoinresultset extends nestedloopjoinresultset
protected generatedmethod emptyrowfun
/* was this originally a right outer join? */
private boolean wasrightouterjoin
/* have we found a matching row from the right yet? */
private boolean matchright   false
private boolean returnedemptyright   false
private execrow rightemptyrow   null
public int emptyrightrowsreturned   0
//
// resultset interface (leftover from noputresultset)
//
/**
* return the requested values computed
* from the next row (if any) for which
* the restriction evaluates to true.
* <p>
* restriction parameters
* are evaluated for each row.
*
* @exception standardexception		thrown on error
* @exception standardexception		resultsetnotopen thrown if closed
* @return the next row in the join result
*/
public execrow	getnextrowcore   throws standardexception
execrow result   null
boolean haverow   false
boolean restrict   false
datavaluedescriptor restrictboolean
begintime   getcurrenttimemillis
if    isopen
throw standardexception newexception sqlstate lang_result_set_not_open
/* close right and advance left if we found no match
* on right on last next().
*/
if  returnedemptyright
/* current scan on right is exhausted.  need to close old scan
* and open new scan with new "parameters".  openright will
* reopen the scan.
*/
leftrow   leftresultset getnextrowcore
if  leftrow    null
closeright
else
rowsseenleft
openright
returnedemptyright   false
while  leftrow    null     haverow
rightrow   rightresultset getnextrowcore
if  rightrow    null
/* if we haven't found a match on the right, then
* we join the left with a row of nulls from the
* right.
*/
if    matchright
haverow   true
returnedemptyright   true
if  rightemptyrow    null
rightemptyrow    execrow  emptyrowfun invoke activation
getmergedrow leftrow  rightemptyrow
emptyrightrowsreturned
continue
/* current scan on right is exhausted.  need to close old scan
* and open new scan with new "parameters".  openright()
* will reopen the scan.
*/
matchright   false
leftrow   leftresultset getnextrowcore
if  leftrow    null
closeright
else
rowsseenleft
openright
else
rowsseenright
if  restriction    null
restrictboolean
datavaluedescriptor  restriction invoke activation
// if the result is null, we make it false --
// so the row won't be returned.
restrict      restrictboolean isnull
restrictboolean getboolean
if    restrict
/* update the run time statistics */
rowsfiltered
continue
matchright   true
getmergedrow leftrow  rightrow
haverow   true
/* do we have a row to return? */
if  haverow
result   mergedrow
setcurrentrow mergedrow
rowsreturned
else
clearcurrentrow
nexttime    getelapsedmillis begintime
return result
protected void getmergedrow execrow leftrow  execrow rightrow
throws standardexception
int colinctr
int coloutctr
int leftnumcols
int rightnumcols
/* reverse left and right for return of row if this was originally
* a right outer join.  (result columns ordered according to
* original query.)
*/
if  wasrightouterjoin
execrow tmp
tmp   leftrow
leftrow   rightrow
rightrow   tmp
leftnumcols   this rightnumcols
rightnumcols   this leftnumcols
else
leftnumcols   this leftnumcols
rightnumcols   this rightnumcols
/* merge the rows, doing just in time allocation for mergedrow.
* (by convention, left row is to left of right row.)
*/
if  mergedrow    null
mergedrow   getexecutionfactory   getvaluerow leftnumcols   rightnumcols
for  colinctr   1  coloutctr   1  colinctr <  leftnumcols
colinctr    coloutctr
mergedrow setcolumn coloutctr
leftrow getcolumn colinctr
for  colinctr   1  colinctr <  rightnumcols
colinctr    coloutctr
mergedrow setcolumn coloutctr
rightrow getcolumn colinctr
/**
* clear any private state that changes during scans.
* this includes things like the last row seen, etc.
* this does not include immutable things that are
* typically set up in the constructor.
* <p>
* this method is called on open()/close() and reopen()
* <p>
* warning: this should be implemented in every sub
* class and it should always call super.clearscanstate().
*/
void clearscanstate
matchright   false
returnedemptyright   false
rightemptyrow   null
emptyrightrowsreturned   0
super clearscanstate
/*
* class interface
*
*/
nestedloopleftouterjoinresultset
noputresultset leftresultset
int leftnumcols
noputresultset rightresultset
int rightnumcols
activation activation
generatedmethod restriction
int resultsetnumber
generatedmethod emptyrowfun
boolean wasrightouterjoin
boolean onerowrightside
boolean notexistsrightside
double optimizerestimatedrowcount
double optimizerestimatedcost
string usersuppliedoptimizeroverrides
super leftresultset  leftnumcols  rightresultset  rightnumcols
activation  restriction  resultsetnumber
onerowrightside  notexistsrightside
optimizerestimatedrowcount  optimizerestimatedcost
usersuppliedoptimizeroverrides
this emptyrowfun   emptyrowfun
this wasrightouterjoin   wasrightouterjoin