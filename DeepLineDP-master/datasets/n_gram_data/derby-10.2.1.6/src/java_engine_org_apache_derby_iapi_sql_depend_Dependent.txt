/*
derby - class org.apache.derby.iapi.sql.depend.dependent
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi sql depend
import	org apache derby catalog dependable
import org apache derby iapi error standardexception
import org apache derby iapi sql conn languageconnectioncontext
/**
a dependent has the ability to know whether or not it
is valid and to mark itself as valid or invalid.
marking itself as invalid usually means it cannot be used
in the system until it is revalidated, but this is in no
way enforced by this interface.
*/
public interface dependent  extends dependable
/**
check that all of the dependent's dependencies are valid.
@return true if the dependent is currently valid
*/
boolean isvalid
/**
prepare to mark the dependent as invalid (due to at least one of
its dependencies being invalid).
@param action	the action causing the invalidation
@param p		the provider
@param lcc		the languageconnectioncontext
@exception standardexception thrown if unable to make it invalid
*/
void preparetoinvalidate provider p  int action
languageconnectioncontext lcc
throws standardexception
/**
mark the dependent as invalid (due to at least one of
its dependencies being invalid).
@param	action	the action causing the invalidation
@param lcc		the languageconnectioncontext
@exception standardexception thrown if unable to make it invalid
*/
void makeinvalid int action
languageconnectioncontext lcc
throws standardexception
/**
attempt to revalidate the dependent. for prepared statements,
this could go through its dependencies and check that they
are up to date; if not, it would recompile the statement.
any failure during this attempt should throw
dependencystatementexception.unabletorevalidate().
@param lcc		the languageconnectioncontext
@exception standardexception thrown if unable to make it valid
*/
void makevalid languageconnectioncontext lcc
throws standardexception