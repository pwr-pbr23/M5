/*
derby - class org.apache.derby.client.net.netresultsetreply
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby client net
import org apache derby client am disconnectexception
import org apache derby client am resultset
import org apache derby client am resultsetcallbackinterface
import org apache derby client am sqlexception
import org apache derby client am clientmessageid
import org apache derby shared common reference sqlstate
import org apache derby shared common reference messageid
public class netresultsetreply extends netstatementreply implements resultsetreplyinterface
public netresultsetreply netagent netagent  int buffersize
super netagent  buffersize
//----------------------------- entry points ---------------------------------
public void readfetch resultsetcallbackinterface resultset  throws disconnectexception
startsameidchainparse
parsecntqryreply resultset  true      true means we expect row data
endofsameidchaindata
public void readpositioningfetch resultsetcallbackinterface resultset  throws disconnectexception
startsameidchainparse
parsecntqryreply resultset  false       false means return data is not expected
endofsameidchaindata
public void readscrollablefetch resultsetcallbackinterface resultset  throws disconnectexception
startsameidchainparse
parsecntqryreply resultset  true        true means return data is expected
endofsameidchaindata
public void readcursorclose resultsetcallbackinterface resultset  throws disconnectexception
startsameidchainparse
parseclsqryreply resultset
endofsameidchaindata
//----------------------helper methods----------------------------------------
//------------------parse reply for specific command--------------------------
// these methods are "private protected", which is not a recognized java privilege,
// but means that these methods are private to this class and to subclasses,
// and should not be used as package-wide friendly methods.
// parse the reply for the close query command.
// this method handles the parsing of all command replies and reply data
// for the clsqry command.
private void parseclsqryreply resultsetcallbackinterface resultset  throws disconnectexception
int peekcp   parsetypdefsormgrlvlovrs
if  peekcp    codepoint sqlcard
netsqlca netsqlca   parsesqlcard null      @f48553sxg   null means rowsetsqlca_ is null
// set the cursor state if null sqlca or sqlcode is equal to 0.
resultset completesqlca netsqlca
else
parsecloseerror resultset
// parse the reply for the continue query command.
// this method handles the parsing of all command replies and reply data for the cntqry command.
// if docopyqrydta==false, then there is no data, and we're only parsing out the sqlca to get the row count.
private void parsecntqryreply resultsetcallbackinterface resultseti
boolean docopyqrydta  throws disconnectexception
boolean found   false
int peekcp   peekcodepoint
if  peekcp    codepoint rdbupdrm
found   true
parserdbupdrm
peekcp   peekcodepoint
if  peekcp    codepoint qrydta
found   true
if   docopyqrydta
parselengthandmatchcodepoint codepoint qrydta
//we don't need to copy qrydta since there is no data
if  longvaluefordecryption_    null
longvaluefordecryption_   null
if  longbufferfordecryption_    null
longbufferfordecryption_   null
int ddmlength   getddmlength
ensureblayerdatainbuffer ddmlength
resultset  resultseti  expandrowsetsqlca
netsqlca sqlca   parsesqlcardrow   resultset  resultseti  rowsetsqlca_
int danullindicator   readfastbyte
adjustlengths getddmlength
// define event interface and use the event method
// only get the rowcount_ if sqlca is not null and rowcount_ is unknown
if  sqlca    null    sqlca containssqlcax
resultset  resultseti  setrowcountevent sqlca getrowcount netagent_ targettypdef_
peekcp   peekcodepoint
if  peekcp    codepoint rdbupdrm
parserdbupdrm
peekcp   peekcodepoint
return
do
parseqrydta  netresultset  resultseti
peekcp   peekcodepoint
while  peekcp    codepoint qrydta
if  peekcp    codepoint extdta
found   true
do
copyextdta  netcursor    resultset  resultseti  cursor_
if  longbufferfordecryption_    null     encrypted extdta
buffer_   longbufferfordecryption_
pos_   longposfordecryption_
if  longbufferfordecryption_    null    count_ > longbufferfordecryption_ length
count_   longbufferfordecryption_ length
peekcp   peekcodepoint
while  peekcp    codepoint extdta
if  peekcp    codepoint sqlcard
found   true
resultset  resultseti  expandrowsetsqlca
netsqlca netsqlca   parsesqlcard   resultset  resultseti  rowsetsqlca_
// for an atomic operation, the sqlca contains the sqlcode for the first (statement
// terminating)error, the last warning, or zero.  all multi-row fetch operatons are
// atomic.  (the only operation that is not atomic is multi-row insert).
if    resultset  resultseti  sensitivity_    resultset sensitivity_sensitive_dynamic__
if  netsqlca    null    netsqlca containssqlcax      netsqlca getrowsetrowcount      0
resultset  resultseti  setrowcountevent netsqlca getrowcount netagent_ targettypdef_
resultseti completesqlca netsqlca
peekcp   peekcodepoint
if  peekcp    codepoint endqryrm
found   true
parseendquery resultseti
peekcp   peekcodepoint
if  peekcp    codepoint rdbupdrm
found   true
parserdbupdrm
if   found
parsefetcherror resultseti
if  longbufferfordecryption_    null
// not a good idea to create a new buffer_
buffer_   new byte
longbufferfordecryption_   null
void parsecloseerror resultsetcallbackinterface resultseti  throws disconnectexception
int peekcp   peekcodepoint
switch  peekcp
case codepoint abnuowrm
//passing the resultsetcallbackinterface implementation will
//help in retrieving the the unitofworklistener that needs to
//be rolled back
netsqlca sqlca   parseabnormalenduow resultseti
resultseti completesqlca sqlca
break
case codepoint cmdchkrm
parsecmdchkrm
break
case codepoint qrynoprm
parseqrynoprm resultseti
break
case codepoint rdbnacrm
parserdbnacrm
break
default
parsecommonerror peekcp
void parsefetcherror resultsetcallbackinterface resultseti  throws disconnectexception
int peekcp   peekcodepoint
switch  peekcp
case codepoint abnuowrm
//passing the resultsetcallbackinterface implementation will
//help in retrieving the the unitofworklistener that needs to
//be rolled back
netsqlca sqlca   parseabnormalenduow resultseti
resultseti completesqlca sqlca
break
case codepoint cmdchkrm
parsecmdchkrm
break
case codepoint cmdnsprm
parsecmdnsprm
break
case codepoint qrynoprm
parseqrynoprm resultseti
break
case codepoint rdbnacrm
parserdbnacrm
break
default
parsecommonerror peekcp
//-----------------------------parse ddm reply messages-----------------------
// query not opened reply message is issued if a cntqry or clsqry
// command is issued for a query that is not open.  a previous
// endqryrm, enduowrm, or abnuowrm reply message might have
// terminated the command.
// protocol architects the sqlstate value depending on svrcod
// svrcod 4 -> sqlstate is 24501
// svrcod 8 -> sqlstate of 58008 or 58009
//
// if svrcod is 4 then sqlstate 24501, sqlcode -501
// else sqlstate 58009, sqlcode -30020
//
// messages
// sqlstate : 24501
//     the identified cursor is not open.
//     sqlcode : -501
//     the cursor specified in a fetch or close statement is not open.
//     the statement cannot be processed.
// sqlstate : 58009
//     execution failed due to a distribution protocol error that caused deallocation of the conversation.
//     sqlcode : -30020
//     execution failed because of a distributed protocol
//         error that will affect the successful execution of subsequent
//         commands and sql statements: reason code <reason-code>.
//     some possible reason codes include:
//     121c indicates that the user is not authorized to perform the requested command.
//     1232 the command could not be completed because of a permanent error.
//         in most cases, the server will be in the process of an abend.
//     220a the target server has received an invalid data description.
//         if a user sqlda is specified, ensure that the fields are
//         initialized correctly. also, ensure that the length does not exceed
//         the maximum allowed length for the data type being used.
//
//     the command or statement cannot be processed.  the current
//         transaction is rolled back and the application is disconnected
//         from the remote database.
//
// returned from server:
// svrcod - required  (4 - warning, 8 - error)
// rdbnam - required
// pkgnamcsn - required
//
private void parseqrynoprm resultsetcallbackinterface resultset  throws disconnectexception
boolean svrcodreceived   false
int svrcod   codepoint svrcod_info
boolean rdbnamreceived   false
string rdbnam   null
boolean pkgnamcsnreceived   false
object pkgnamcsn   null
parselengthandmatchcodepoint codepoint qrynoprm
pushlengthoncollectionstack
int peekcp   peekcodepoint
while  peekcp    reply end_of_collection
boolean foundinpass   false
if  peekcp    codepoint svrcod
foundinpass   true
svrcodreceived   checkandgetreceivedflag svrcodreceived
svrcod   parsesvrcod codepoint svrcod_warning  codepoint svrcod_error
peekcp   peekcodepoint
if  peekcp    codepoint rdbnam
foundinpass   true
rdbnamreceived   checkandgetreceivedflag rdbnamreceived
rdbnam   parserdbnam true
peekcp   peekcodepoint
if  peekcp    codepoint pkgnamcsn
foundinpass   true
pkgnamcsnreceived   checkandgetreceivedflag pkgnamcsnreceived
pkgnamcsn   parsepkgnamcsn true
peekcp   peekcodepoint
if   foundinpass
doprmnsprmsemantics peekcp
popcollectionstack
checkrequiredobjects svrcodreceived  rdbnamreceived  pkgnamcsnreceived
// move into a method
netagent_ setsvrcod svrcod
if  svrcod    codepoint svrcod_warning
netagent_ accumulatereadexception new sqlexception netagent_ logwriter_
new clientmessageid sqlstate drda_cursor_not_open
else
agent_ accumulatechainbreakingreadexceptionandthrow new disconnectexception agent_
new clientmessageid sqlstate drda_connection_terminated
sqlexception getmessageutil
gettextmessage messageid conn_cursor_not_open