/*
derby - class org.apache.derby.iapi.store.raw.data.datafactory
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi store raw data
import org apache derby iapi store raw containerkey
import org apache derby iapi services daemon serviceable
import org apache derby iapi services context contextmanager
import org apache derby iapi error standardexception
import org apache derby iapi store raw containerhandle
import org apache derby iapi store raw corruptable
import org apache derby iapi store raw lockingpolicy
import org apache derby iapi store raw rawstorefactory
import org apache derby iapi store raw recordhandle
import org apache derby iapi store raw streamcontainerhandle
import org apache derby iapi store raw xact rawtransaction
import org apache derby iapi store raw transaction
import org apache derby io storagefactory
import org apache derby iapi store access fileresource
import org apache derby iapi store access rowsource
import org apache derby iapi store raw log loginstant
import org apache derby iapi util bytearray
import org apache derby catalog uuid
import java util properties
import java io file
public interface datafactory extends corruptable
public static final string module
/**
the temporary segment is called "tmp"
*/
public static final string temp_segment_name
/**
the database lock
*/
public static final string db_lockfile_name
/*
** file name that is used to acquire exclusive lock on db.
**/
public static final string db_ex_lockfile_name
/**
is the store read-only.
*/
public boolean isreadonly
/**
open a container that is not droped.
@param t the raw transaction that is opening the container
@param containerid the container's identity
@param locking the locking policy
@param mode see the different mode in @see containerhandle
then will return a null handle if the container is dropped.
@return the handle to the opened container
@exception standardexception standard cloudscape error policy
*/
public containerhandle opencontainer rawtransaction t
containerkey containerid
lockingpolicy locking
int mode
throws standardexception
/**
open a container that may have been dropped.
only internal raw store code should call this, e.g. recovery.
@see #opencontainer
@exception standardexception standard cloudscape error policy
*/
public rawcontainerhandle opendroppedcontainer rawtransaction t
containerkey containerid
lockingpolicy locking
int mode
throws standardexception
/**
add a container.
@param t the transaction that is creating the container
@param segmentid the segment where the container is to go
@param mode whether or not to logged or not.  the effect of this mode
is only for this addcontainer call, not persisently stored
throughout the lifetime of the container
@param tableproperties properties of the container that is persistently
stored throughout the lifetime of the container
@return the containerid of the newly created container
@exception standardexception standard cloudscape error policy
*/
public long addcontainer
rawtransaction  t
long            segmentid
long            containerid
int             mode
properties      tableproperties
int             temporaryflag
throws standardexception
/**
create and load a stream container.
@param t the transaction that is creating the container
@param segmentid the segment where the container is to go
@param tableproperties properties of the container that is persistently
stored throughout the lifetime of the container
@param rowsource the data to load the container with
@return the containerid of the newly created stream container
@exception standardexception standard cloudscape error policy
*/
public long addandloadstreamcontainer rawtransaction t  long segmentid
properties tableproperties  rowsource rowsource
throws standardexception
/**
open a stream container.
@return a valid streamcontainerhandle or null if the container does not exist.
@exception standardexception  standard cloudscape exception policy
*/
public streamcontainerhandle openstreamcontainer
rawtransaction  t
long            segmentid
long            containerid
boolean         hold
throws standardexception
/**
drop and remove a stream container.
@exception standardexception  standard cloudscape exception policy
*/
public void dropstreamcontainer rawtransaction t  long segmentid  long containerid
throws standardexception
/**
re-create a container during redo recovery.
used if container is found to not exist during redo recovery of
log records creating the container.
@exception standardexception standard cloudscape error policy
*/
public void recreatecontainerforredorecovery rawtransaction t
long segmentid  long containerid  bytearray containerinfo
throws standardexception
public void dropcontainer rawtransaction t  containerkey containerid
throws standardexception
public void checkpoint   throws standardexception
public void idle   throws standardexception
/**
return the identifier that uniquely identifies this raw store at runtime.
this identifier is to be used as part of the lokcing key for objects
locked in the raw store by value (e.g. containers).
*/
public uuid getidentifier
/**
make data factory aware of which raw store factory it belongs to
also need to boot the logfactory
@exception standardexception cannot boot the log factory
*/
public void setrawstorefactory rawstorefactory rsf  boolean create
properties properties
throws standardexception
/**
return a record handle that is initialized to the given page number and
record id.
@exception standardexception standard cloudscape exception policy.
@param segmentid    segment where the recordhandle belongs.
@param containerid  container where the recordhandle belongs.
@param pagenumber   the page number of the recordhandle.
@param recordid     the record id of the recordhandle.
@see recordhandle
*/
//	public recordhandle makerecordhandle(long segmentid, long containerid, long pagenumber, int recordid)
//		 throws	standardexception;
/**
database creation finished
@exception standardexception standard cloudscape exception policy.
*/
public void createfinished   throws standardexception
/**
get an object to handle non-transactional files.
*/
public fileresource getfilehandler
/**
tell the data factory it is ok to remove committed deleted containers
when the data factory shuts down.
*/
public void removestubsok
/**
get cache statistics for the specified cache
*/
public long getcachestats string cachename
/**
reset the cache statistics for the specified cache
*/
public void resetcachestats string cachename
/**
reclaim space used by this factory.  called by post commit daemon.
@exception standardexception  standard cloudscape exception policy
*/
public int reclaimspace serviceable work  contextmanager contextmgr
throws standardexception
/**
called after recovery is performed.
@exception standardexception standard cloudscape error policy
*/
public void postrecovery   throws standardexception
/**
encrypt cleartext into ciphertext.
@see org.apache.derby.iapi.services.crypto.cipherprovider#encrypt
@exception standardexception standard cloudscape error policy
*/
public int encrypt byte cleartext  int offset  int length
byte ciphertext  int outputoffset
boolean newengine
throws standardexception
/**
decrypt cleartext from ciphertext.
@see org.apache.derby.iapi.services.crypto.cipherprovider#decrypt
@exception standardexception standard cloudscape error policy
*/
public int decrypt byte ciphertext  int offset  int length
byte cleartext  int outputoffset
throws standardexception
/**
* encrypt all the containers in the data segment.
* @param t the transaction that is encrypting the containers.
* @exception standardexception standard derby error policy
*/
public void encryptallcontainers rawtransaction t
throws standardexception
/*
* remove old versions of the containers after (re)encryption
* of the  database.
* @param inrecovery  <code> true </code>, if cleanup is
*                    happening during recovery.
* @exception standardexception standard derby error policy
*/
public void removeoldversionofcontainers boolean inrecovery
throws standardexception
/*
* set that the database is encrypted.
*/
public void setdatabaseencrypted
/**
return the encryption block size used by the algorithm at time of
encrypted database creation
*/
public int getencryptionblocksize
/**
* backup restore - stop writing dirty pages or container to disk
* @exception standardexception standard cloudscape error policy
*/
public void freezepersistentstore   throws standardexception
/**
* backup restore - start writing dirty pages or container to disk
*/
public void unfreezepersistentstore
/**
* backup restore - don't allow the persistent store to be frozen - or if
* it is already frozen, block.   a write is about to commence.
* @exception standardexception standard cloudscape error policy
*/
public void writeinprogress   throws standardexception
/**
* backup restore - write finished, if this is the last writer, allow the
* persistent store to proceed.
*/
public void writefinished
/**
* back up the data segment of the database.
*/
public void backupdatafiles transaction rt  file backupdir  throws standardexception
/**
* return an id which can be used to create a container.
* <p>
* return an id number with is greater than any existing container
* in the current database.  caller will use this to allocate future
* container numbers - most likely caching the value and then incrementing
* it as it is used.
* <p>
*
* @return the an id which can be used to create a container.
*
* @exception  standardexception  standard exception policy.
**/
long getmaxcontainerid
throws standardexception
/**
* this function is called after a checkpoint to remove the stub files thar are not required
* during recovery. crash recovery  uses these files to identify the dropped
* containers.   stub files(d*.dat) gets creates  when a
* table/index(containers) dropped.
* @exception standardexception standard cloudscape error policy
**/
public void removedroppedcontainerfilestubs loginstant redolwm  throws standardexception
/**
* @return the storagefactory used by this datafactory
*/
public storagefactory getstoragefactory
public void	stop