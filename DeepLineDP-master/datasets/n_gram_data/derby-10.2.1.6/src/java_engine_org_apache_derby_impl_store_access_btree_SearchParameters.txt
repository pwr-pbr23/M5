/*
derby - class org.apache.derby.impl.store.access.btree.searchparameters
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl store access btree
import java io printstream
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi error standardexception
import org apache derby iapi store access scancontroller
import org apache derby iapi store access rowutil
import org apache derby iapi types datavaluedescriptor
/**
parameters that are passed down during a recursive b-tree search.
this class is intended to be used as a struct, primarily to make
it easier to pass a number of search parameters around, and also
to make it easy to re-use objects and not re-allocate.
**/
public class searchparameters
/**
* position on key just left of a sequence of partial key matches.
* used by scan which will then start scan on next key.
**/
public static final int position_left_of_partial_key_match    1
/**
* position on last key in a sequence of partial key matches.
* used by scan which will then start scan on next key.
**/
public static final int position_right_of_partial_key_match    1
/**
the key being searched for.  never intended to be modified
for the lifetime of the object.
**/
public datavaluedescriptor searchkey
/**
value to return in comparisons where partial key matches exactly
the partial key of a row.  use this parameter to control where
in a duplicate partial key list to position the search.
here are some examples:
assume: dataset of {1,0}, {5,1}, {5,2}, {6,4}; and partial key of {5}.
if the scan is ge , then the scan intially wants to position
on {1,0} (one before first qualifying row) - in this case when a partial
match is found we want to return 1 when we hit {5,1}; but if the
searchoperator is gt, then we want to return -1 on {5,1}, {5,2}, and then
return 1 on {6,4}.
partial_key_match_op =  position_left_of_partial_key_match:
scan is looking for ge the partial key, so position the scan to the
left of any partial key that exactly matches the partial key.
if the scan is ge , then the scan intially wants to position
on {1,0} (one before first qualifying row) - in this case when a partial
match is found we want to return 1 when we hit {5,1}.
partial_key_match_op = position_right_of_partial_key_match:
scan is looking for gt the partial key, so position the scan to the
right of any partial key that exactly matches the partial key.
if the scan is gt, then the scan intially wants to position
on {5,2} (one before first qualifying row) - in this case when a partial
match is found we want to return -1 when we hit on {5,1}, {5,2}, and then
return 1 on {6,4}.
partial_key_match_op =  0:
scan does not care where in a set of duplicate partial keys to position
to (not used currently).
**/
int partial_key_match_op
/**
an index row with the correct types for the index,
into which rows are read during the search.
rows are read into the template during a page search, but
they will be overwritten; there is only one template per
search.
**/
public datavaluedescriptor template
/**
the b-tree this search is for.  effectively read-only for the
lifetime of this object.
**/
public openbtree btree
/**
the resulting slot from the search.  updated when the search completes.
**/
public int resultslot
/**
whether the row found exactly matched the searchkey.  updated
when the search completes.
**/
public boolean resultexact
/**
whether the search is for the optimizer, to determine range of scan.
**/
public boolean searchforoptimizer
/**
if this is an optimizer search, the fraction of rows that are left of
the current search.  when the search completes this number multiplied by
the number of leaf rows in the table is the number of rows left of
the result slot in the search.
**/
public float left_fraction
/**
if this is an optimizer search, the fraction of rows that are "in" the
the current search.  this number is used as we descend down the tree to
track the percentage of rows that we think are in the current subtree
defined by all leaf's that can be reached from the current branch.
**/
public float current_fraction
/**
construct search parameters.
@exception standardexception standard exception policy.
**/
public searchparameters
datavaluedescriptor   searchkey
int                     partial_key_match_op
datavaluedescriptor   template
openbtree               btree
boolean                 searchforoptimizer
throws standardexception
this searchkey                searchkey
this partial_key_match_op     partial_key_match_op
this template                 template
this btree                    btree
this resultslot               0
this resultexact              false
this searchforoptimizer       searchforoptimizer
if  this searchforoptimizer
this left_fraction   0
this current_fraction   1
if  sanitymanager debug
// resolve - this is ugly but has caught some problems.
sanitymanager assert partial_key_match_op     1
partial_key_match_op    1
public string tostring
if  sanitymanager debug
string string
rowutil tostring searchkey
partial_key_match_op     1 ?
partial_key_match_op     1 ?
partial_key_match_op
rowutil tostring template
// resolve (mikem) - do we want to print out btree?
// "btree = " +   btree           + ";" +
resultslot
resultexact
return string
else
return null