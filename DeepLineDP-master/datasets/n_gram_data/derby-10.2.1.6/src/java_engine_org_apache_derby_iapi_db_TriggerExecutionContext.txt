/*
derby - class org.apache.derby.iapi.db.triggerexecutioncontext
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi db
import java sql resultset
import java sql sqlexception
import org apache derby catalog uuid
/**
* a trigger execution context holds information that is
* available from the context of a trigger invocation.
*/
public interface triggerexecutioncontext
/**
* return value from </i>geteventtype()</i> for
* an update trigger.
*/
public static final int update_event	  1
/**
* return value from </i>geteventtype()</i> for
* a delete trigger.
*/
public static final int delete_event	  2
/**
* return value from </i>geteventtype()</i> for
* an insert trigger.
*/
public static final int insert_event	  3
/**
* get the target table name upon which the
* trigger event is declared.
*
* @return the target table
*/
public string gettargettablename
/**
* get the target table uuid upon which the
* trigger event is declared.
*
* @return the uuid of the target table
*/
public uuid gettargettableid
/**
* get the type for the event that caused the
* trigger to fire.
*
* @return the event type (e.g. update_event)
*/
public int geteventtype
/**
* get the text of the statement that caused the
* trigger to fire.
*
* @return the statement text.
*/
public string geteventstatementtext
/**
* get the columns that have been modified by the statement
* that caused this trigger to fire.  if all columns are
* modified, will return null (e.g. for insert or delete
* return null).
*
* @return an array of strings
*/
public string getmodifiedcolumns
/**
* find out if a column was changed, by column name.
*
* @param columnname the column to check
*
* @return true if the column was modified by this statement.
* note that this will always return true for insert
* and delete regardless of the column name passed in.
*/
public boolean wascolumnmodified string columnname
/**
* find out if a column was changed, by column number
*
* @param columnnumber the column to check
*
* @return true if the column was modified by this statement.
* note that this will always return true for insert
* and delete regardless of the column name passed in.
*/
public boolean wascolumnmodified int columnnumber
/**
* returns a result set of the old (before) images of the changed rows.
* for a row trigger, this result set will have a single row.  for
* a statement trigger, this result set has every row that has
* changed or will change.  if a statement trigger does not affect
* a row, then the result set will be empty (i.e. resultset.next()
* will return false).
* <p>
* will return null if the call is inapplicable for the trigger
* that is currently executing.  for example, will return null if called
* during a the firing of an insert trigger.
*
* @return the resultset containing before images of the rows
* changed by the triggering event.  may return null.
*
* @exception sqlexception if called after the triggering event has
* completed
*/
public resultset getoldrowset   throws sqlexception
/**
* returns a result set of the new (after) images of the changed rows.
* for a row trigger, this result set will have a single row.  for
* a statement trigger, this result set has every row that has
* changed or will change.  if a statement trigger does not affect
* a row, then the result set will be empty (i.e. resultset.next()
* will return false).
* <p>
* will return null if the call is inapplicable for the trigger
* that is currently executing.  for example, will return null if
* called during the firing of a delete trigger.
*
* @return the resultset containing after images of the rows
* changed by the triggering event.  may return null.
*
* @exception sqlexception if called after the triggering event has
* completed
*/
public resultset getnewrowset   throws sqlexception
/**
* like getoldrowset(), but returns a result set positioned
* on the first row of the before (old) result set.  used as a convenience
* to get a column for a row trigger.  equivalent to getoldrowset()
* followed by next().
* <p>
* will return null if the call is inapplicable for the trigger
* that is currently executing.  for example, will return null if called
* during a the firing of an insert trigger.
*
* @return the resultset positioned on the old row image.  may
* return null.
*
* @exception sqlexception if called after the triggering event has
* completed
*/
public resultset getoldrow   throws sqlexception
/**
* like getnewrowset(), but returns a result set positioned
* on the first row of the after (new) result set.  used as a convenience
* to get a column for a row trigger.  equivalent to getnewrowset()
* followed by next().
* <p>
* will return null if the call is inapplicable for the trigger
* that is currently executing.  for example, will return null if
* called during the firing of a delete trigger.
*
* @return the resultset positioned on the new row image.  may
* return null.
*
* @exception sqlexception if called after the triggering event has
* completed
*/
public resultset getnewrow   throws sqlexception