/*
derby - class org.apache.derby.iapi.services.locks.shexlockable
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi services locks
import org apache derby iapi services locks lockable
import org apache derby iapi services locks latch
import org apache derby iapi services locks virtuallocktable
import org apache derby iapi services sanity sanitymanager
import java util hashtable
public class shexlockable implements lockable
public shexlockable
/** @see lockable#lockeralwayscompatible */
public boolean lockeralwayscompatible
return true
/** @see lockable#requestcompatible */
public boolean requestcompatible object requestedqualifier
object grantedqualifier
if  sanitymanager debug
if    requestedqualifier instanceof shexqual
sanitymanager throwassert
requestedqualifier getclass   getname
if    grantedqualifier instanceof shexqual
sanitymanager throwassert
grantedqualifier getclass   getname
shexqual requested    shexqual  requestedqualifier
shexqual granted    shexqual  grantedqualifier
return  requested getlockstate      shexqual shared
granted getlockstate      shexqual shared
/** @see lockable#lockevent */
public void lockevent latch lockinfo
if  sanitymanager debug
if    lockinfo getqualifier   instanceof shexqual
sanitymanager throwassert     lockinfo getqualifier   getclass   getname
/** @see lockable#unlockevent */
public void unlockevent latch lockinfo
if  sanitymanager debug
if    lockinfo getqualifier   instanceof shexqual
sanitymanager throwassert     lockinfo getqualifier   getclass   getname
/**
* this lockable want to participate in the virtual locktable
* when we want to print latch information.
* any lockable object which does not want to participate should
* override this function.
*/
public boolean lockattributes int flag  hashtable attributes
if  flag   virtuallocktable shexlock     0
return false
// no containerid, but need something in there so it can print
attributes put virtuallocktable containerid  new long  1
attributes put virtuallocktable lockname  this tostring
attributes put virtuallocktable locktype
return true