/*
derby - class org.apache.derby.iapi.sql.execute.executioncontext
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi sql execute
import org apache derby iapi services context context
import org apache derby iapi error standardexception
import org apache derby iapi sql resultset
/**
* executioncontext stores the factories that are to be used by
* the current connection. it also provides execution services
* for statement atomicity.
*
* @author ames
*/
public interface executioncontext extends context
/**
* this is the id we expect execution contexts
* to be stored into a context manager under.
*/
string context_id
/* constants for scan isolation levels. */
public static final int unspecified_isolation_level   0
public static final int read_uncommitted_isolation_level   1
public static final int read_committed_isolation_level   2
public static final int repeatable_read_isolation_level   3
public static final int serializable_isolation_level   4
public static final int cs_to_jdbc_isolation_level_map
java sql connection transaction_none 				   unspecified_isolation_level
java sql connection transaction_read_uncommitted 	   read_uncommitted_isolation_level
java sql connection transaction_read_committed 		   read_committed_isolation_level
java sql connection transaction_repeatable_read 	   repeatable_read_isolation_level
java sql connection transaction_serializable		   serializable_isolation_level
public static final string cs_to_sql_isolation_map
unspecified_isolation_level
read stability
/**
* get the resultsetfactory from this executioncontext.
*
* @return	the result set factory associated with this
*		executioncontext
*/
resultsetfactory getresultsetfactory
/**
* get the resultsetstatisticsfactory from this executioncontext.
*
* @return	the result set statistics factory associated with this
*		executioncontext
*
* @exception standardexception		thrown on error
*/
resultsetstatisticsfactory getresultsetstatisticsfactory
throws standardexception
/**
* get the executionfactory from this executioncontext.
*
* @return	the execution factory associated with this
*		executioncontext
*/
executionfactory getexecutionfactory
/**
* mark the beginning of a statement (insert, update, delete)
*
* @param sourcers	source resultset for the statement.
* @exception standardexception thrown on error
*/
void beginstatement resultset sourcers  throws standardexception
/**
* the end of a statement (insert, update, delete)
* @exception standardexception thrown on error
*/
void endstatement   throws standardexception
/**
*	sifts the array of foreign key constraints for the ones
*	which apply in the current context. in certain contexts
*	(e.g., when applying the copy file or when tearing-off
*	a new table during refresh), we don't want to not bother
*	enforcing some foreign keys.
*
*	@param	fulllist	the full list of foreign keys that
*						apply for the current statement
*
*	@return	a pruned back list, which we will actually bother
*			enforcing.
*
* @exception standardexception thrown on error
*/
public	object	siftforeignkeys  object fulllist   throws standardexception
/**
* sifts the triggers for the ones which apply in the current context.
* in certain contexts (e.g., when applying the copy file or
* when tearing-off a new table during refresh), we don't want to
* not bother firing triggers.
*
*	@param	triggerinfo	the original trigger info
*
*	@return	a pruned back triggerinfo, which we will actually bother
*			enforcing.
*
* @exception standardexception thrown on error
*/
public object sifttriggers object triggerinfo  throws standardexception