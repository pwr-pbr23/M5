/*
derby - class org.apache.derby.impl.sql.compile.charconstantnode
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package	org apache derby impl sql compile
import org apache derby iapi types stringdatavalue
import org apache derby iapi types typeid
import org apache derby iapi error standardexception
import org apache derby iapi services compiler methodbuilder
import org apache derby impl sql compile expressionclassbuilder
import org apache derby iapi reference sqlstate
import org apache derby iapi util reusefactory
import java sql types
public final class charconstantnode extends constantnode
/**
* initializer for a charconstantnode.
*
* @param arg1	a string containing the value of the constant or the typeid for the type of the node
*
* @exception standardexception
*/
public void init
object arg1
throws standardexception
if  arg1 instanceof typeid
super init
arg1
boolean true
reusefactory getinteger 0
else
string val    string  arg1
super init
typeid char_id
val    null  ? boolean true   boolean false
val    null  ?
reusefactory getinteger val length
reusefactory getinteger 0
setvalue getdatavaluefactory   getchardatavalue val
/**
* initializer for a charconstantnode of a specific length.
*
* @param newvalue	a string containing the value of the constant
* @param newlength the length of the new value of the constant
*
* @exception standardexception
*/
public void init
object newvalue
object newlength
throws standardexception
string val    string  newvalue
int newlen     integer  newlength  intvalue
super init
typeid char_id
val    null  ? boolean true   boolean false
newlength
if  val length   > newlen
throw standardexception newexception sqlstate lang_string_truncation     val  string valueof newlen
// blank pad the string if necessesary
while  val length   < newlen
val   val
setvalue getdatavaluefactory   getchardatavalue val
/**
* return the value from this charconstantnode
*
* @return	the value of this charconstantnode.
*
* @exception standardexception		thrown on error
*/
public string	getstring   throws standardexception
return value getstring
/**
* return the length
*
* @return	the length of the value this node represents
*
* @exception standardexception		thrown on error
*/
//public int	getlength() throws standardexception
//{
//	return value.getlength();
//}
/**
* return an object representing the bind time value of this
* expression tree.  if the expression tree does not evaluate to
* a constant at bind time then we return null.
* this is useful for bind time resolution of vtis.
* resolve: what do we do for primitives?
*
* @return	an object representing the bind time value of this expression tree.
*			(null if not a bind time constant.)
*
* @exception standardexception		thrown on error
*/
object getconstantvalueasobject   throws standardexception
return value getstring
/**
* this generates the proper constant.  it is implemented
* by every specific constant node (e.g. intconstantnode).
*
* @param acb	the expressionclassbuilder for the class being built
* @param mb	the method the code to place the code
*
* @exception standardexception		thrown on error
*/
void generateconstant expressionclassbuilder acb  methodbuilder mb  throws standardexception
// the generated java is the expression:
// "#getstring()"
mb push getstring