/*
derby - class org.apache.derby.iapi.sql.dictionary.permissionscatalogrowfactory
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl sql catalog
import org apache derby iapi error standardexception
import org apache derby iapi reference limits
import org apache derby iapi services uuid uuidfactory
import org apache derby iapi sql dictionary catalogrowfactory
import org apache derby iapi sql dictionary permissionsdescriptor
import org apache derby iapi sql execute execindexrow
import org apache derby iapi sql execute execrow
import org apache derby iapi sql execute executionfactory
import org apache derby iapi types datavaluedescriptor
import org apache derby iapi types datavaluefactory
import org apache derby iapi types rowlocation
import org apache derby iapi types stringdatavalue
abstract class permissionscatalogrowfactory extends catalogrowfactory
static final string authorization_id_type
static final boolean authorization_id_is_builtin_type   true
static final int authorization_id_length   limits max_identifier_length
permissionscatalogrowfactory uuidfactory uuidf  executionfactory ef  datavaluefactory dvf
boolean convertidtolower
super uuidf ef dvf convertidtolower
datavaluedescriptor getauthorizationid  string value
return getdatavaluefactory   getvarchardatavalue  value
datavaluedescriptor getnullauthorizationid
return getdatavaluefactory   getnullvarchar   stringdatavalue  null
/**
* extract an internal authorization id from a row.
*
* @param row
* @param columnpos 1 based
*
* @return the internal authorization id
*/
string getauthorizationid  execrow row  int columnpos
throws standardexception
return row getcolumn  columnpos  getstring
/**
* build an index key row from a permission descriptor. a key row does not include the rowlocation column.
*
* @param indexnumber
* @param perm a permission descriptor of the appropriate class for this permissionscatalogrowfactory class.
*
* @exception standardexception standard error policy
*/
abstract execindexrow buildindexkeyrow  int indexnumber
permissionsdescriptor perm
throws standardexception
/**
* or a set of permissions in with a row from this catalog table
*
* @param row an existing row
* @param perm a permission descriptor of the appropriate class for this permissionscatalogrowfactory class.
* @param colschanged an array with one element for each column in row. it is updated to
*                    indicate which columns in row were changed
*
* @return the number of columns that were changed.
*
* @exception standardexception standard error policy
*/
abstract int orpermissions  execrow row  permissionsdescriptor perm  boolean colschanged
throws standardexception
/**
* remove a set of permissions from a row from this catalog table
*
* @param row an existing row
* @param perm a permission descriptor of the appropriate class for this permissionscatalogrowfactory class.
* @param colschanged an array with one element for each column in row. it is updated to
*                    indicate which columns in row were changed
*
* @return -1 if there are no permissions left in the row, otherwise the number of columns that were changed.
*
* @exception standardexception standard error policy
*/
abstract int removepermissions  execrow row  permissionsdescriptor perm  boolean colschanged
throws standardexception
/**
* set the uuid of the passed permission descriptor to the uuid of the row
* from the system table. datadictionary will make this call before calling
* the dependency manager to send invalidation messages to the objects
* dependent on the permission descriptor's uuid.
*
* @param row the row from the system table for the passed permission descriptor
* @param perm permission descriptor
* @throws standardexception
*/
abstract void setuuidofthepasseddescriptor execrow row  permissionsdescriptor perm  throws standardexception