/*
derby - class org.apache.derby.impl.sql.compile.nestedloopjoinstrategy
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl sql compile
import org apache derby iapi sql compile costestimate
import org apache derby iapi sql compile expressionclassbuilderinterface
import org apache derby iapi sql compile joinstrategy
import org apache derby iapi sql compile optimizable
import org apache derby iapi sql compile optimizer
import org apache derby iapi sql compile optimizablepredicatelist
import org apache derby iapi sql compile optimizablepredicate
import org apache derby iapi sql dictionary datadictionary
import org apache derby iapi sql dictionary conglomeratedescriptor
import org apache derby iapi store access storecostcontroller
import org apache derby iapi store access transactioncontroller
import org apache derby iapi services compiler methodbuilder
import org apache derby impl sql compile expressionclassbuilder
import org apache derby iapi error standardexception
import org apache derby iapi services sanity sanitymanager
public class nestedloopjoinstrategy extends basejoinstrategy
public nestedloopjoinstrategy
/**
* @see joinstrategy#feasible
*
* @exception standardexception		thrown on error
*/
public boolean feasible optimizable innertable
optimizablepredicatelist predlist
optimizer optimizer
throws standardexception
/* nested loop is feasible, except in the corner case
* where innertable is a vti that cannot be materialized
* (because it has a join column as a parameter) and
* it cannot be instantiated multiple times.
* resolve - actually, the above would work if all of
* the tables outer to innertable were 1 row tables, but
* we don't have that info yet, and it should probably
* be hidden in inner table somewhere.
* note: a derived table that is correlated with an outer
* query block is not materializable, but it can be
* "instantiated" multiple times because that only has
* meaning for vtis.
*/
if  innertable ismaterializable
return true
if  innertable supportsmultipleinstantiations
return true
return false
/** @see joinstrategy#multiplybasecostbyouterrows */
public boolean multiplybasecostbyouterrows
return true
/**
* @see joinstrategy#getbasepredicates
*
* @exception standardexception		thrown on error
*/
public optimizablepredicatelist getbasepredicates
optimizablepredicatelist predlist
optimizablepredicatelist basepredicates
optimizable innertable
throws standardexception
if  sanitymanager debug
sanitymanager assert basepredicates    null
basepredicates size      0
if  predlist    null
predlist transferallpredicates basepredicates
basepredicates classify innertable
innertable getcurrentaccesspath   getconglomeratedescriptor
return basepredicates
/** @see joinstrategy#nonbasepredicateselectivity */
public double nonbasepredicateselectivity
optimizable innertable
optimizablepredicatelist predlist
/*
** for nested loop, all predicates are base predicates, so there
** is no extra selectivity.
*/
return 1 0
/**
* @see joinstrategy#putbasepredicates
*
* @exception standardexception		thrown on error
*/
public void putbasepredicates optimizablepredicatelist predlist
optimizablepredicatelist basepredicates
throws standardexception
for  int i   basepredicates size     1  i >  0  i
optimizablepredicate pred   basepredicates getoptpredicate i
predlist addoptpredicate pred
basepredicates removeoptpredicate i
/* @see joinstrategy#estimatecost */
public void estimatecost optimizable innertable
optimizablepredicatelist predlist
conglomeratedescriptor cd
costestimate outercost
optimizer optimizer
costestimate costestimate
costestimate multiply outercost rowcount    costestimate
optimizer trace optimizer cost_of_n_scans  innertable gettablenumber    0  outercost rowcount
costestimate
/** @see joinstrategy#maxcapacity */
public int maxcapacity  int userspecifiedcapacity
int maxmemorypertable
double perrowusage
return integer max_value
/** @see joinstrategy#getname */
public string getname
return
/** @see joinstrategy#scancosttype */
public int scancosttype
return storecostcontroller storecost_scan_normal
/** @see joinstrategy#resultsetmethodname */
public string resultsetmethodname boolean bulkfetch
if  bulkfetch
return
else
return
/** @see joinstrategy#joinresultsetmethodname */
public string joinresultsetmethodname
return
/** @see joinstrategy#halfouterjoinresultsetmethodname */
public string halfouterjoinresultsetmethodname
return
/**
* @see joinstrategy#getscanargs
*
* @exception standardexception		thrown on error
*/
public int getscanargs
transactioncontroller tc
methodbuilder mb
optimizable innertable
optimizablepredicatelist storerestrictionlist
optimizablepredicatelist nonstorerestrictionlist
expressionclassbuilderinterface acbi
int bulkfetch
methodbuilder resultrowallocator
int colrefitem
int indexcolitem
int lockmode
boolean tablelocked
int isolationlevel
int maxmemorypertable
throws standardexception
expressionclassbuilder acb    expressionclassbuilder  acbi
int numargs
if  sanitymanager debug
if  nonstorerestrictionlist size      0
sanitymanager throwassert
nonstorerestrictionlist size
if  bulkfetch > 1
numargs   25
else
numargs   24
fillinscanargs1 tc  mb
innertable
storerestrictionlist
acb
resultrowallocator
fillinscanargs2 mb
innertable
bulkfetch
colrefitem
indexcolitem
lockmode
tablelocked
isolationlevel
return numargs
/**
* @see joinstrategy#divideuppredicatelists
*
* @exception standardexception		thrown on error
*/
public void divideuppredicatelists
optimizable				 innertable
optimizablepredicatelist originalrestrictionlist
optimizablepredicatelist storerestrictionlist
optimizablepredicatelist nonstorerestrictionlist
optimizablepredicatelist requalificationrestrictionlist
datadictionary			 dd
throws standardexception
/*
** all predicates are store predicates.  no requalification is
** necessary for non-covering index scans.
*/
originalrestrictionlist setpredicatesandproperties storerestrictionlist
/**
* @see joinstrategy#doesmaterialization
*/
public boolean doesmaterialization
return false
public string tostring
return getname
/**
* can this join strategy be used on the
* outermost table of a join.
*
* @return whether or not this join strategy
* can be used on the outermose table of a join.
*/
protected boolean validforoutermosttable
return true