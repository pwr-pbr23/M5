/*
derby - class org.apache.derby.impl.store.raw.data.directactions
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl store raw data
import org apache derby iapi reference sqlstate
import org apache derby iapi services io arrayinputstream
import org apache derby iapi services io formatablebitset
import org apache derby iapi services io dynamicbytearrayoutputstream
import org apache derby iapi services io dynamicbytearrayoutputstream
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi error standardexception
import org apache derby iapi store access conglomerate logicalundo
import org apache derby iapi store raw page
import org apache derby iapi store raw recordhandle
import org apache derby iapi store raw xact rawtransaction
import org apache derby iapi store raw log loginstant
import org apache derby iapi types datavaluedescriptor
import java io bytearrayoutputstream
import java io ioexception
public class directactions implements pageactions
protected dynamicbytearrayoutputstream outbytes
protected arrayinputstream	limitin
public directactions
outbytes   new dynamicbytearrayoutputstream
limitin   new arrayinputstream
public void actiondelete
rawtransaction  t
basepage        page
int             slot
int             recordid
boolean         delete
logicalundo     undo
throws standardexception
try
page setdeletestatus  loginstant null  slot  delete
catch  ioexception ioe
throw standardexception newexception
sqlstate data_unexpected_exception  ioe
public int actionupdate
rawtransaction          t
basepage                page
int                     slot
int                     recordid
object   row
formatablebitset                 validcolumns
int                     realstartcolumn
dynamicbytearrayoutputstream  logbuffer
int                     realspaceonpage
recordhandle            headrowhandle
throws standardexception
if  logbuffer    null
outbytes reset
else
outbytes    dynamicbytearrayoutputstream  logbuffer
try
// manufactures the new row  into outbytes
int nextcolumn
page logrow
slot  false  recordid  row  validcolumns  outbytes  0
page insert_overflow  realstartcolumn
realspaceonpage  100
limitin setdata outbytes getbytearray
limitin setposition outbytes getbeginposition
limitin setlimit outbytes getposition     outbytes getbeginposition
// copy the new row from outbytes into the page
page storerecord  loginstant  null  slot  false  limitin
return nextcolumn
catch  ioexception ioe
throw standardexception newexception
sqlstate data_unexpected_exception  ioe
public void actionpurge rawtransaction t  basepage page  int slot  int
num_rows  int recordids  boolean needdatalogged
throws standardexception
// purge the records in the stored version
// we need to remove from high to low because the slots will be moved down
// as soon as one is removed.
// we could get the slot with the recordid but that will be a waste
// since the page was never unlatch and the slot number is good
try
for  int i   num_rows 1  i >  0  i
page purgerecord  loginstant  null  slot i  recordids
catch  ioexception ioe
throw standardexception newexception
sqlstate data_unexpected_exception  ioe
public void actionupdatefield
rawtransaction          t
basepage                page
int                     slot
int                     recordid
int                     fieldid
object     newvalue
logicalundo             undo
throws standardexception
outbytes reset
try
page logcolumn slot  fieldid  newvalue   dynamicbytearrayoutputstream  outbytes  100
limitin setdata outbytes getbytearray
limitin setposition outbytes getbeginposition
limitin setlimit outbytes getposition     outbytes getbeginposition
page storefield  loginstant  null  slot  fieldid  limitin
catch  ioexception ioe
throw standardexception newexception
sqlstate data_unexpected_exception  ioe
public int actioninsert
rawtransaction          t
basepage                page
int                     slot
int                     recordid
object                row
formatablebitset                 validcolumns
logicalundo             undo
byte                    insertflag
int                     startcolumn
boolean                 islongcolumn
int                     realstartcolumn
dynamicbytearrayoutputstream  logbuffer
int                     realspaceonpage
int                     overflowthreshold
throws standardexception
if  logbuffer    null
outbytes reset
else
outbytes    dynamicbytearrayoutputstream  logbuffer
try
if  islongcolumn
startcolumn   page loglongcolumn slot  recordid
row   dynamicbytearrayoutputstream  outbytes
else
startcolumn   page logrow slot  true  recordid  row  validcolumns
dynamicbytearrayoutputstream  outbytes  startcolumn  insertflag  realstartcolumn  realspaceonpage
overflowthreshold
limitin setdata outbytes getbytearray
limitin setposition outbytes getbeginposition
limitin setlimit outbytes getposition     outbytes getbeginposition
page storerecord  loginstant  null  slot  true  limitin
return  startcolumn
catch  ioexception ioe
throw standardexception newexception
sqlstate data_unexpected_exception  ioe
public void actioncopyrows rawtransaction t  basepage destpage  basepage srcpage  int destslot  int numrows  int srcslot  int recordids
throws standardexception
try
// check to make sure the destination page have the necessary space to
// take the rows - count the bytes once for checking, then once for
// real
// this one is for checking
int spaceneeded   new int
for  int i   0  i < numrows  i
outbytes reset
srcpage logrecord srcslot   i  basepage log_record_default
recordids    formatablebitset  null
outbytes   recordhandle null
spaceneeded   outbytes getused
// do not worry about reserve space since we cannot rollback
if   destpage spaceforcopy numrows  spaceneeded
throw standardexception newexception
sqlstate data_no_space_for_record
// this one is for real
for  int i   0  i < numrows  i
// the recordid passed in is the record id this row will have at
// the destination page, not the record id this row has on the
// srcpage.
outbytes reset
srcpage logrecord srcslot   i  basepage log_record_default
recordids    formatablebitset  null
outbytes   recordhandle null
limitin setdata outbytes getbytearray
limitin setposition outbytes getbeginposition
limitin setlimit outbytes getposition     outbytes getbeginposition
destpage storerecord  loginstant  null  destslot i  true  limitin
catch  ioexception ioe
throw standardexception newexception
sqlstate data_unexpected_exception  ioe
public void actioninvalidatepage rawtransaction t  basepage page
throws standardexception
page setpagestatus  loginstant null  basepage invalid_page
public void actioninitpage rawtransaction t  basepage page  int initflag
int pageformatid  long pageoffset
throws standardexception
boolean overflowpage     initflag   basepage init_page_overflow     0
boolean reuse     initflag   basepage init_page_reuse     0
int nextrecordid     initflag   basepage init_page_reuse_recordid     0  ?
page newrecordid     recordhandle first_record_id
if  sanitymanager debug
sanitymanager assert page gettypeformatid      pageformatid
page initpage  loginstant null  basepage valid_page
nextrecordid  overflowpage  reuse
public void actionshrinkreservedspace rawtransaction t  basepage page
int slot  int recordid  int newvalue  int oldvalue
throws standardexception
try
page setreservedspace  loginstant null  slot  newvalue
catch  ioexception ioe
throw standardexception newexception
sqlstate data_unexpected_exception  ioe