/*
derby - class org.apache.derby.iapi.sql.dictionary.datadescriptorgenerator
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi sql dictionary
import org apache derby iapi services monitor monitor
import org apache derby iapi error standardexception
import org apache derby iapi sql dictionary
import org apache derby iapi types typeid
import org apache derby iapi sql depend dependent
import org apache derby iapi sql depend provider
import org apache derby iapi reference sqlstate
import org apache derby iapi sql execute constantaction
import org apache derby iapi sql execute execpreparedstatement
import org apache derby iapi services uuid uuidfactory
import org apache derby iapi services io formatablebitset
import org apache derby catalog aliasinfo
import org apache derby catalog defaultinfo
import org apache derby catalog dependable
import org apache derby catalog dependablefinder
import org apache derby catalog referencedcolumns
import org apache derby catalog types referencedcolumnsdescriptorimpl
import org apache derby catalog uuid
import org apache derby catalog statistics
import java sql timestamp
import java io inputstream
/**
* this is an implementation of the datadescriptorgenerator interface
* that lives in the datadictionary protocol.  see that interface for
* a description of what this class is supposed to do.
*
* @version 0.1
* @author jeff lichtman
*/
public class datadescriptorgenerator
private 	uuidfactory uuidf
protected	final datadictionary	datadictionary     the data dictionary that this generator operates on
/**
*	make a generator. specify the data dictionary that it operates on.
*
*	@param	datadictionary	the data dictionary that this generator makes objects for
*/
public	datadescriptorgenerator  datadictionary datadictionary
this datadictionary   datadictionary
/**
* create a descriptor for the named schema with a null uuid.
*
* @param schemaname	the name of the schema we're interested in.
*			if the name is null, get the descriptor for the
*			current schema.
* @param aid	the authorization id associated with the schema.
*		the owner of the schema.
*
* @param oid	the object id
*
* @return	the descriptor for the schema.
* @exception standardexception		thrown on failure
*/
public schemadescriptor	newschemadescriptor string schemaname
string aid  uuid oid
throws standardexception
return new schemadescriptor
datadictionary  schemaname  aid  oid
datadictionary issystemschemaname schemaname
/**
* create a descriptor for the named table within the given schema.
* if the schema parameter is null, it creates a schema descriptor
* using the current default schema.
*
* @param tablename	the name of the table to get the descriptor for
* @param schema	the descriptor for the schema the table lives in.
*			if null, use the current (default) schema.
* @param tabletype	the type of the table: base table or view.
* @param lockgranularity	the lock granularity.
*
* @return	the descriptor for the table.
*/
public tabledescriptor	newtabledescriptor
string 				tablename
schemadescriptor	schema
int					tabletype
char				lockgranularity
return new tabledescriptor
datadictionary  tablename  schema  tabletype  lockgranularity
/**
* create a descriptor for the temporary table within the given schema.
*
* @param tablename	the name of the temporary table to get the descriptor for
* @param schema	the descriptor for the schema the table lives in.
* @param tabletype	the type of the table: temporary table
* @param oncommitdeleterows	if true, on commit delete rows else on commit preserve rows of temporary table.
* @param onrollbackdeleterows	if true, on rollback, delete rows from temp tables which were logically modified. true is the only supported value
*
* @return	the descriptor for the table.
*/
public tabledescriptor	newtabledescriptor
string 				tablename
schemadescriptor	schema
int					tabletype
boolean				oncommitdeleterows
boolean				onrollbackdeleterows
return new tabledescriptor
datadictionary  tablename  schema  tabletype  oncommitdeleterows  onrollbackdeleterows
/**
* create a viewdescriptor for the view with the given uuid.
*
* @param viewid	the uuid for the view.
* @param viewname	the name of the view
* @param viewtext	the text of the view's query.
* @param checkoption	int for check option type
* @param compschemaid	the uuid of the schema this was compiled in
*
* @return	a descriptor for the view
*/
public viewdescriptor newviewdescriptor uuid viewid
string viewname  string viewtext  int checkoption
uuid compschemaid
return new viewdescriptor datadictionary  viewid  viewname
viewtext  checkoption  compschemaid
/**
* @see datadescriptorgenerator#newuniqueconstraintdescriptor
*/
public referencedkeyconstraintdescriptor	newuniqueconstraintdescriptor
tabledescriptor table
string constraintname
boolean deferrable
boolean initiallydeferred
int referencedcolumns
uuid		constraintid
uuid		indexid
schemadescriptor schemadesc
boolean isenabled
int referencecount
return new referencedkeyconstraintdescriptor datadictionary unique_constraint
datadictionary  table  constraintname
deferrable  initiallydeferred
referencedcolumns  constraintid
indexid  schemadesc  isenabled  referencecount
/**
* @see datadescriptorgenerator#newprimarykeyconstraintdescriptor
*/
public referencedkeyconstraintdescriptor	newprimarykeyconstraintdescriptor
tabledescriptor table
string constraintname
boolean deferrable
boolean initiallydeferred
int referencedcolumns
uuid		constraintid
uuid indexid
schemadescriptor schemadesc
boolean isenabled
int referencecount
return new referencedkeyconstraintdescriptor datadictionary primarykey_constraint
datadictionary  table  constraintname
deferrable  initiallydeferred
referencedcolumns  constraintid
indexid  schemadesc  isenabled  referencecount
/**
* @see datadescriptorgenerator#newforeignkeyconstraintdescriptor
*/
public foreignkeyconstraintdescriptor	newforeignkeyconstraintdescriptor
tabledescriptor table
string constraintname
boolean deferrable
boolean initiallydeferred
int fkcolumns
uuid	constraintid
uuid indexid
schemadescriptor schemadesc
referencedkeyconstraintdescriptor	referencedconstraintdescriptor
boolean isenabled
int radeleterule
int raupdaterule
return new foreignkeyconstraintdescriptor datadictionary  table  constraintname
deferrable  initiallydeferred
fkcolumns  constraintid
indexid  schemadesc
referencedconstraintdescriptor  isenabled  radeleterule  raupdaterule
/**
* @see datadescriptorgenerator#newforeignkeyconstraintdescriptor
*/
public foreignkeyconstraintdescriptor	newforeignkeyconstraintdescriptor
tabledescriptor table
string constraintname
boolean deferrable
boolean initiallydeferred
int fkcolumns
uuid	constraintid
uuid indexid
schemadescriptor schemadesc
uuid	referencedconstraintid
boolean isenabled
int radeleterule
int raupdaterule
return new foreignkeyconstraintdescriptor datadictionary  table  constraintname
deferrable  initiallydeferred
fkcolumns  constraintid
indexid  schemadesc
referencedconstraintid  isenabled  radeleterule  raupdaterule
/**
* @see datadescriptorgenerator#newcheckconstraintdescriptor
*/
public checkconstraintdescriptor	newcheckconstraintdescriptor
tabledescriptor table
string constraintname
boolean deferrable
boolean initiallydeferred
uuid		constraintid
string constrainttext
referencedcolumns referencedcolumns
schemadescriptor schemadesc
boolean isenabled
return new checkconstraintdescriptor datadictionary  table  constraintname
deferrable  initiallydeferred
constraintid
constrainttext  referencedcolumns  schemadesc  isenabled
public checkconstraintdescriptor	newcheckconstraintdescriptor
tabledescriptor table
string constraintname
boolean deferrable
boolean initiallydeferred
uuid		constraintid
string constrainttext
int refcols
schemadescriptor schemadesc
boolean isenabled
referencedcolumns referencedcolumns   new referencedcolumnsdescriptorimpl refcols
return new checkconstraintdescriptor datadictionary  table  constraintname
deferrable  initiallydeferred
constraintid
constrainttext  referencedcolumns  schemadesc  isenabled
/**
* create a conglomerate descriptor for the given conglomerate id.
*
* @param conglomerateid	the identifier for the conglomerate
*				we're interested in
* @param name			the name of the conglomerate, if any
* @param indexable		true means the conglomerate is indexable,
*				false means it isn't
* @param indexrowgenerator	the indexrowgenerator for the conglomerate,
*							null if it's a heap
* @param isconstraint	true means the conglomerate is an index backing
*						up a constraint, false means it isn't
*
* @param uuid	uuid  for this conglomerate
* @param tableid	uuid for the table that this conglomerate belongs to
* @param schemaid	uuid for the schema that conglomerate belongs to
*
* @return	a conglomeratedescriptor describing the
*		conglomerate.
*/
public conglomeratedescriptor	newconglomeratedescriptor
long conglomerateid
string name
boolean indexable
indexrowgenerator indexrowgenerator
boolean isconstraint
uuid uuid
uuid tableid
uuid schemaid
return  conglomeratedescriptor
new conglomeratedescriptor datadictionary  conglomerateid
name
indexable
indexrowgenerator
isconstraint
uuid
tableid
schemaid
/**
* create a new trigger descriptor.
*
* @param sd	the schema descriptor for this trigger
* @param uuid	the trigger id
* @param name	the trigger name
* @param eventmask	triggerdescriptor.trigger_event_xxxx
* @param isbefore	is this a before (as opposed to after) trigger
* @param isrow		is this a row trigger or statement trigger
* @param isenabled	is this trigger enabled or disabled
* @param td		the table upon which this trigger is defined
* @param whenspsid	the sps id for the when clause (may be null)
* @param actionspsid	the spsid for the trigger action (may be null)
* @param creationtimestamp	when was this trigger created?
* @param referencedcols	what columns does this trigger reference (may be null)
* @param triggerdefinition the original user text of the trigger action
* @param referencingold whether or not old appears in referencing clause
* @param referencingnew whether or not new appears in referencing clause
* @param oldreferencingname old referencing table name, if any, that appears in refercing clause
* @param newreferencingname new referencing table name, if any, that appears in refercing clause
*
* @exception standardexception on error
*/
public triggerdescriptor newtriggerdescriptor
schemadescriptor	sd
uuid				uuid
string				name
int					eventmask
boolean				isbefore
boolean 			isrow
boolean 			isenabled
tabledescriptor		td
uuid				whenspsid
uuid				actionspsid
timestamp			creationtimestamp
int				referencedcols
string				triggerdefinition
boolean				referencingold
boolean				referencingnew
string				oldreferencingname
string				newreferencingname
throws standardexception
return new triggerdescriptor
datadictionary
sd
uuid
name
eventmask
isbefore
isrow
isenabled
td
whenspsid
actionspsid
creationtimestamp
referencedcols
triggerdefinition
referencingold
referencingnew
oldreferencingname
newreferencingname
/*
get a uuidfactory. this uses the monitor to get one the
first time and holds onto it for later.
*/
protected uuidfactory getuuidfactory
if  uuidf    null
uuidf   monitor getmonitor   getuuidfactory
return uuidf
/**
@see datadescriptorgenerator#newfileinfodescriptor
*/
public fileinfodescriptor newfileinfodescriptor
uuid             id
schemadescriptor sd
string           sqlname
long              generationid
if  id    null  id   getuuidfactory   createuuid
return new fileinfodescriptor datadictionary  id sd sqlname generationid
public tablepermsdescriptor newtablepermsdescriptor  tabledescriptor td
string selectperm
string deleteperm
string insertperm
string updateperm
string referencesperm
string triggerperm
string grantor
throws standardexception
if    equals  selectperm       equals  deleteperm       equals  insertperm
equals  updateperm       equals  referencesperm       equals  triggerperm
return null
return new tablepermsdescriptor  datadictionary
string  null
grantor
td getuuid
selectperm
deleteperm
insertperm
updateperm
referencesperm
triggerperm
/**
* manufacture a new colpermsdescriptor.
*
* @param td the descriptor of the table.
* @param type the action type:
*<ol>
*<li>"s" - select without grant
*<li>"s" - select with grant
*<li>"u" - update without grant
*<li>"u" - update with grant
*<li>"r" - references without grant
*<li>"r" - references with grant
*</ol>
* @param columns the set of columns
*/
public colpermsdescriptor newcolpermsdescriptor  tabledescriptor td
string type
formatablebitset columns
string grantor  throws standardexception
return new colpermsdescriptor  datadictionary
string  null
grantor
td getuuid
type
columns
/**
* create a new routine permissions descriptor
*
* @param ad the routine's alias descriptor
* @param grantor
*/
public routinepermsdescriptor newroutinepermsdescriptor  aliasdescriptor ad  string grantor
throws standardexception
return new routinepermsdescriptor  datadictionary
string  null
grantor
ad getuuid