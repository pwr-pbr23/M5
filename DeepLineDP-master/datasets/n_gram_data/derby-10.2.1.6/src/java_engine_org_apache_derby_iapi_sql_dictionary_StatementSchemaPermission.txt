/*
derby - class org.apache.derby.iapi.sql.dictionary.statementroutinepermission
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi sql dictionary
import org apache derby iapi error standardexception
import org apache derby iapi sql conn authorizer
import org apache derby iapi reference sqlstate
import org apache derby iapi sql dictionary schemadescriptor
import org apache derby iapi sql conn languageconnectioncontext
import org apache derby iapi store access transactioncontroller
import org apache derby iapi services sanity sanitymanager
/**
* this class describes a schema permission required by a statement.
*/
public class statementschemapermission extends statementpermission
/**
* the schema name
*/
private string schemaname
/**
* authorization id
*/
private string aid
/**
* one of authorizer.create_schema_priv, modify_schema_priv,
* drop_schema_priv, etc.
*/
private int privtype
public statementschemapermission string schemaname  string aid  int privtype
this schemaname   schemaname
this aid 	  aid
this privtype	  privtype
/**
* @see statementpermission#check
*/
public void check  languageconnectioncontext lcc
string authid
boolean forgrant  throws standardexception
datadictionary dd  	lcc getdatadictionary
transactioncontroller tc   lcc gettransactionexecute
switch   privtype
case authorizer modify_schema_priv
case authorizer drop_schema_priv
schemadescriptor sd   dd getschemadescriptor schemaname  tc  false
// if schema hasn't been created already, no need to check
// for drop schema, an exception will be thrown if the schema
// does not exists.
if  sd    null
return
if   authid equals sd getauthorizationid
throw standardexception newexception
sqlstate auth_no_access_not_owner  authid  schemaname
break
case authorizer create_schema_priv
// non-dba users can only create schemas that match their authid
// also allow only dba to set authid to another user
// note that for dba, check interface wouldn't be called at all
if    schemaname equals authid
aid    null     aid equals authid
throw standardexception newexception
sqlstate auth_not_database_owner  authid  schemaname
break
default
if  sanitymanager debug
sanitymanager throwassert
privtype
break
/**
* schema level permission is never required as list of privileges required
* for triggers/constraints/views and hence we don't do any work here, but
* simply return null
*
* @see statementpermission#check
*/
public permissionsdescriptor getpermissiondescriptor string authid  datadictionary dd
throws standardexception
return null