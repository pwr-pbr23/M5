/*
derby - class org.apache.derby.iapi.util.cheapdateformatter
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi util
/**
* this class contains static methods for formatting dates into strings.
* it can be used where standard date formatting is judged to be too
* expensive.
*/
public class cheapdateformatter
static final long seconds    1000l
static final long minutes   seconds   60l
static final long hours   minutes   60l
static final long days   hours   24l
static final long normal_year   days   365l
static final long leap_year   normal_year   days
static final long fouryears    normal_year   3l    leap_year
static final long end_of_first_year   normal_year
static final long end_of_second_year   end_of_first_year   leap_year
static final long end_of_third_year   end_of_second_year   normal_year
static final int days_in_month    31  28  31  30  31  30  31  31  30  31  30  31
static final int february   1
/**
* this method formats the current date into a string. the input is
* a long representing the number of milliseconds since jan. 1, 1970.
* the output is a string in the form yyyy/mm/dd hh:mm:ss.ddd gmt.
*
* the purpose of this class is to format date strings without paying
* the price of instantiating resourcebundles and locales, which the
* java.util.date class does whenever you format a date string.
* as a result, the output of this class is not localized, it does
* not take the local time zone into account, and it is possible that
* it will not be as accurate as the standard date class. it is ok
* to use this method when, for example, formatting timestamps to
* write to db2j.log, but not for manipulating dates in language
* processing.
*
* @param time	the current time in milliseconds since jan. 1, 1970
*
* @return the date formatted as yyyy/mm/dd hh:mm:ss.ddd gmt.
*/
public static string formatdate long time
// assume not a leap year until we know otherwise
boolean leapyear   false
// how many four year periods since jan. 1, 1970?
long year     time   fouryears    4l
// how much time is left over after the four-year periods?
long leftover   time % fouryears
time     year   4l    fouryears
year    1970l
// does time extend past end of first year in four-year period?
if  leftover >  end_of_first_year
year
time    normal_year
// does time extend past end of second year in four-year period?
if  leftover >  end_of_second_year
year
time    normal_year
// does time extend past end of third year in four-year period?
if  leftover >  end_of_third_year
year
time    leap_year
// it's a leap year if divisible by 4, unless divisible by 100,
// unless divisible by 400.
if   year % 4l     0
if   year % 100l     0
if   year % 400l     0
leapyear   true
leapyear   true
// what day of the year is this, starting at 1?
long days    time   days    1
// what month is this, starting at 1?
int month   1
for  int i   0  i < days_in_month length  i
int daysinmonth
if  leapyear     i    february
// february has 29 days in a leap year
daysinmonth   29
else
// get number of days in next month
daysinmonth   days_in_month
// is date after the month we are looking at?
if  days > daysinmonth
// count number of months
month
// subtract number of days in month
days    daysinmonth
else
// don't bother to look any more - the date is within
// the current month.
break
// how much time is left after days are accounted for?
time %  days
long hours   time   hours
// how much time is left after hours are accounted for?
time %  hours
long minutes   time   minutes
// how much time is left after minutes are accounted for?
time %  minutes
long seconds   time   seconds
// how much time is left after seconds are accounted for?
time %  seconds
return year
twodigits month
twodigits days
twodigits hours
twodigits minutes
twodigits seconds
threedigits time
private static string twodigits long val
string retval
if  val < 10
retval       val
else
retval   long tostring val
return retval
private static string threedigits long val
string retval
if  val < 10
retval       val
else if  val < 100
retval       val
else
retval   long tostring val
return retval