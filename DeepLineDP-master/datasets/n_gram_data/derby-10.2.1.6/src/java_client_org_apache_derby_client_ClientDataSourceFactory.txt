/*
derby - class org.apache.derby.client.clientdatasourcefactory
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby client
import java lang reflect method
import java util enumeration
import javax naming refaddr
import javax naming reference
import org apache derby jdbc clientbasedatasource
import org apache derby jdbc clientconnectionpooldatasource
import org apache derby jdbc clientdatasource
import org apache derby jdbc clientxadatasource
/**
* the data source factory currrently for clientdatasource only. this factory will support xa and pooling-enabled data
* sources in the future.
* <p/>
* this factory reconstructs a derby simple data source object when it is retrieved from jndi. references are needed
* since many naming services don't have the ability to store java objects in their serialized form. when a data source
* object is bound in this type of naming service the reference for that object is actually stored by the jndi
* implementation, not the data source object itself.
* <p/>
* a jndi administrator is responsible for making sure that both the object factory and data source implementation
* classes provided by a jdbc driver vendor are accessible to the jndi service provider at runtime.
* <p/>
* an object factory implements the javax.naming.spi.objectfactory interface. this interface contains a single method,
* getobjectinstance, which is called by a jndi service provider to reconstruct an object when that object is retrieved
* from jndi. a jdbc driver vendor should provide an object factory as part of their jdbc 2.0 product.
*
* @see clientdatasource
*/
public class clientdatasourcefactory implements javax naming spi objectfactory
public clientdatasourcefactory
/**
* reconstructs a clientdatasource object from a jndi data source reference.
* <p/>
* the getobjectinstance() method is passed a reference that corresponds to the object being retrieved as its first
* parameter. the other parameters are optional in the case of jdbc data source objects. the object factory should
* use the information contained in the reference to reconstruct the data source. if for some reason, a data source
* object cannot be reconstructed from the reference, a value of null may be returned. this allows other object
* factories that may be registered in jndi to be tried. if an exception is thrown then no other object factories
* are tried.
*
* @param refobj      the possibly null object containing location or reference information that can be used in
*                    creating an object.
* @param name        the name of this object relative to namecontext, or null if no name is specified.
* @param namecontext context relative to which the name parameter is specified, or null if name is relative to the
*                    default initial context.
* @param environment possibly null environment that is used in creating the object.
*
* @return object created; null if an object cannot be created
*/
public object getobjectinstance object refobj
javax naming name name
javax naming context namecontext
java util hashtable environment  throws java lang exception
javax naming reference ref    javax naming reference  refobj
// create the proper data source object shell.
clientbasedatasource ds   null
if  ref getclassname   equals clientdatasource classname__
ds   new clientdatasource
else if  ref getclassname   equals clientxadatasource classname__
ds   new clientxadatasource
else if  ref getclassname   equals clientconnectionpooldatasource classname__
ds   new clientconnectionpooldatasource
else
return null
// fill in the data source object shell with values from the jndi reference.
clientdatasourcefactory setbeanproperties ds  ref
return ds
/** reflect lookup for java bean method taking a single string arg */
private static final class string_arg       getclass
/** reflect lookup for java bean method taking a single int arg */
private static final class int_arg     integer type
/** reflect lookup for java bean method taking a single boolean arg */
private static final class boolean_arg     boolean type
/** reflect lookup for java bean method taking a single short arg */
private static final class short_arg     short type
/*
* set the java bean properties for an object from its reference. the
* reference contains a set of stringrefaddr values with the key being the
* bean name and the value a string representation of the bean's value. this
* code looks for setxxx() method where the set method corresponds to the
* standard bean naming scheme and has a single parameter of type string,
* int, boolean or short.
*/
private static void setbeanproperties object ds  reference ref
throws exception
for  enumeration e   ref getall    e hasmoreelements
refaddr attribute    refaddr  e nextelement
string propertyname   attribute gettype
string value    string  attribute getcontent
string methodname
propertyname substring 0  1  touppercase
java util locale english
propertyname substring 1
method m
object argvalue
try
m   ds getclass   getmethod methodname  string_arg
argvalue   value
catch  nosuchmethodexception nsme
try
m   ds getclass   getmethod methodname  int_arg
argvalue   integer valueof value
catch  nosuchmethodexception nsme2
try
m   ds getclass   getmethod methodname  boolean_arg
argvalue   boolean valueof value
catch  nosuchmethodexception nsme3
m   ds getclass   getmethod methodname  short_arg
argvalue   short valueof value
m invoke ds  new object   argvalue