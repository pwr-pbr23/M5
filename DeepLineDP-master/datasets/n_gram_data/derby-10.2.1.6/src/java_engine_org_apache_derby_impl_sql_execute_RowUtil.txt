/*
derby - class org.apache.derby.impl.sql.execute.rowutil
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl sql execute
import org apache derby iapi services context contextmanager
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi sql conn languageconnectioncontext
import org apache derby iapi sql execute execrow
import org apache derby iapi sql execute execindexrow
import org apache derby iapi sql execute executioncontext
import org apache derby iapi error standardexception
import org apache derby iapi services io formatablebitset
import java util vector
/**
utility class manipulating rows.
<p>note: this class is public so it may be used by replication execution
code. it is basically not public.
*/
public class rowutil
/**
get an empty execrow.
@param columncount the number of columns in the row.
@return the row.
*/
public static execrow getemptyvaluerow int columncount  languageconnectioncontext lcc
executioncontext	ec
ec   lcc getexecutioncontext
return ec getexecutionfactory   getvaluerow columncount
/**
get an empty execindexrow.
@param columncount the number of columns in the row.
@param cm			 current contextmanager
@return the row.
*/
public static execindexrow getemptyindexrow int columncount  contextmanager cm
executioncontext	ec
ec    executioncontext
cm getcontext executioncontext context_id
return ec getexecutionfactory   getindexablerow columncount
/**
clone an execrow's columns and place the coloned columns in another
execrow.
@param to place the cloned columns here.
@param from get the columns to clone here.
@param count clone this number of columns.
*/
public static void copyclonecolumns execrow to  execrow from  int count
for  int ix   1  ix <  count  ix
to setcolumn ix from clonecolumn ix
/**
copy references for an execrow's columns to another execrow.
@param to place the column references here.
@param from get the column references from here.
*/
public static void copyrefcolumns execrow to  execrow from
object src   from getrowarray
object dst   to getrowarray
system arraycopy src  0  dst  0  src length
/**
copy references for an execrow's columns to another execrow.
@param to place the column references here.
@param from get the column references from here.
@param count copy this number of column references.
*/
public static void copyrefcolumns execrow to  execrow from  int count
throws standardexception
copyrefcolumns to  0  from  0  count
/**
copy references for an execrow's columns to another execrow.
@param to place the column references here.
@param from get the column references from here.
@param start the 0 based index of the first column to copy.
@param count copy this number of column references.
*/
public static void copyrefcolumns execrow to  execrow from
int start  int count
throws standardexception
copyrefcolumns to  0  from  start  count
/**
copy references for an execrow's columns to another execrow.
@param to place the column references here.
@param tostart the 0-based index of the first column to replace.
@param from get the column references from here.
@param fromstart the 0 based index of the first column to copy.
@param count copy this number of column references.
*/
public static void copyrefcolumns execrow to  int tostart  execrow from
int fromstart  int count  throws standardexception
for  int i   1  i <  count  i
// uhhh, why doesn't this to an arraycopy????
to setcolumn i tostart  from getcolumn i fromstart
/**
copy references for an execrow's columns to another execrow.
@param to place the column references here.
@param from get the column references from here.
@param positions	array of 1-based column ids to copy from "from" to "to"
*/
public static void copyrefcolumns execrow to  execrow from  int positions
throws standardexception
if   positions    null     return
int		count   positions length
for  int ix   0  ix < count  ix
to setcolumn  ix   1  from getcolumn  positions
/**
copy references for an execrow's columns to another execrow.
for copying from a compact array to a reconstituted array.
e.g. if positions = {2, 4}, and from = {666, 777} then
to => {null, 666, null, 777}.  will only go as far as to.getarray().length.
@param to place the column references here.  sparse array
@param from get the column references from here. compact array
@param positions	array of 1-based column ids to copy from "from" to "to"
*/
public static void copyrefcolumns execrow to  execrow from  formatablebitset positions
throws standardexception
if  positions    null
return
int	max   to getrowarray   length
int tocount   1
int fromcount   1
for   tocount <  max  tocount
if  positions get tocount
to setcolumn tocount  from getcolumn fromcount
fromcount
/**
empty columns -- i.e. make them refer to a java null.
<p>this is useful to remove dangling references to a column.
@param setme set columns in this storable to be empty.
*/
public static void copyrefcolumns execrow setme
throws standardexception
for  int ix   1  ix <  setme ncolumns    ix
setme setcolumn ix null
/**
* tostring
*
* @param row 			the row
*
* @return the string
*/
public static string tostring execrow row
if  sanitymanager debug
return  row    null  ?     tostring row getrowarray
else
return
/**
* tostring
*
* @param objs 			the row array
*
* @return the string
*/
public static string tostring object objs
if  sanitymanager debug
stringbuffer strbuf   new stringbuffer
if  objs    null
return
strbuf append
for  int i   0  i < objs length  i
if  i > 0
strbuf append
strbuf append objs
strbuf append
return strbuf tostring
else
return
/**
* tostring
*
* @param row 			the row
* @param startpoint 	0 based start point in row array, inclusive
* @param endpoint		0 based end point in row array, inclusive
*
* @return the string
*/
public static string tostring execrow row  int startpoint  int endpoint
return tostring row getrowarray    startpoint  endpoint
/**
* tostring
*
* @param objs 			the row array
* @param startpoint 	0 based start point in row array, inclusive
* @param endpoint		0 based end point in row array, inclusive
*
* @return the string
*/
public static string tostring object objs  int startpoint  int endpoint
stringbuffer strbuf   new stringbuffer
if  sanitymanager debug
if  endpoint >  objs length
sanitymanager throwassert   endpoint
objs length
strbuf append
for  int i   startpoint  i <  endpoint  i
if  i > 0
strbuf append
strbuf append objs
strbuf append
return strbuf tostring
/**
* tostring
*
* @param row 			the row
* @param positions 	1 based array of positions
*
* @return the string
*/
public static string tostring execrow row  int positions
return tostring row getrowarray    positions
/**
* tostring
*
* @param objs 			the row array
* @param positions 	1 based array of positions
*
* @return the string
*/
public static string tostring object objs  int positions
if  positions    null
return  string  null
stringbuffer strbuf   new stringbuffer
strbuf append
for  int i   0  i < positions length  i
if  i > 0
strbuf append
strbuf append objs   1]
strbuf append
return strbuf tostring
/**
* intarraytostring
*
* @param colmap 			the int array
*
* @return the string
*/
public static string intarraytostring int colmap
stringbuffer strbuf   new stringbuffer
strbuf append
for  int i   0  i < colmap length  i
if  i > 0
strbuf append
strbuf append colmap
strbuf append
return strbuf tostring
public static boolean inascendingorder int colmap
if  colmap    null
int lastcol    1
for  int i   0  i < colmap length  i
if  lastcol > colmap
return false
lastcol   colmap
return true
/**
* shift a formatablebitset n bits toward the zero end.
* e.g. shift({2,4}) -> {1,3}.
*
* @param bitset the bit set
* @param n	the number of bits to shift
*
* @return a new formatablebitset with the shifted result
*/
public static formatablebitset shift formatablebitset bitset  int n
formatablebitset out   null
if  bitset    null
int size   bitset size
out   new formatablebitset size
for  int i   n  i < size  i
if  bitset get i
out set i n
return out