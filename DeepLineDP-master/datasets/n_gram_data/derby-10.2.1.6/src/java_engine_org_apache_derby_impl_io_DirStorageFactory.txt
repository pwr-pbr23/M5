/*
derby - class org.apache.derby.impl.io.dirstoragefactory
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl io
import org apache derby iapi services sanity sanitymanager
import org apache derby io writablestoragefactory
import org apache derby io storagefile
import org apache derby io storagerandomaccessfile
import java io file
import java io filenotfoundexception
import java io fileoutputstream
import java io fileinputstream
import java io inputstream
import java io outputstream
import java io ioexception
import java io syncfailedexception
import java util properties
/**
* this class provides a disk based implementation of the storagefactory interface. it is used by the
* database engine to access persistent data and transaction logs under the directory (default) subsubprotocol.
*/
public class dirstoragefactory extends basestoragefactory
implements writablestoragefactory
/**
* construct a storagefile from a path name.
*
* @param path the path name of the file
*
* @return a corresponding storagefile object
*/
public final storagefile newstoragefile  string path
return newpersistentfile  path
/**
* construct a storagefile from a directory and file name.
*
* @param directoryname the directory part of the path name.
* @param filename the name of the file within the directory.
*
* @return a corresponding storagefile object
*/
public final storagefile newstoragefile  string directoryname  string filename
return newpersistentfile  directoryname  filename
/**
* construct a storagefile from a directory and file name.
*
* @param directoryname the directory part of the path name.
* @param filename the name of the file within the directory.
*
* @return a corresponding storagefile object
*/
public final storagefile newstoragefile  storagefile directoryname  string filename
return newpersistentfile  directoryname  filename
/**
* construct a persistent storagefile from a path name.
*
* @param path the path name of the file. guaranteed not to be in the temporary file directory. if null
*             then the database directory should be returned.
*
* @return a corresponding storagefile object
*/
storagefile newpersistentfile  string path
if  path    null
return new dirfile  datadirectory
return new dirfile datadirectory  path
/**
* construct a persistent storagefile from a directory and path name.
*
* @param directoryname the path name of the directory. guaranteed not to be in the temporary file directory.
*                  guaranteed not to be null
* @param filename the name of the file within the directory. guaranteed not to be null.
*
* @return a corresponding storagefile object
*/
storagefile newpersistentfile  string directoryname  string filename
return new dirfile  separateddatadirectory   directoryname  filename
/**
* construct a persistent storagefile from a directory and path name.
*
* @param directoryname the path name of the directory. guaranteed not to be to be null. guaranteed to be
*                  created by a call to one of the newpersistentfile methods.
* @param filename the name of the file within the directory. guaranteed not to be null.
*
* @return a corresponding storagefile object
*/
storagefile newpersistentfile  storagefile directoryname  string filename
return new dirfile   dirfile  directoryname  filename
/**
* force the data of an output stream out to the underlying storage. that is, ensure that
* it has been made persistent. if the database is to be transient, that is, if the database
* does not survive a restart, then the sync method implementation need not do anything.
*
* @param stream the stream to be synchronized.
* @param metadata if true then this method must force both changes to the file's
*          contents and metadata to be written to storage; if false, it need only force file content changes
*          to be written. the implementation is allowed to ignore this parameter and always force out
*          metadata changes.
*
* @exception ioexception if an i/o error occurs.
* @exception syncfailedexception thrown when the buffers cannot be flushed,
*            or because the system cannot guarantee that all the buffers have been
*            synchronized with physical media.
*/
public void sync  outputstream stream  boolean metadata  throws ioexception  syncfailedexception
fileoutputstream  stream  getfd   sync
/**
* this method tests whether the "rws" and "rwd" modes are implemented. if the "rws" method is supported
* then the database engine will conclude that the write methods of "rws" mode storagerandomaccessfiles are
* slow but the sync method is fast and optimize accordingly.
*
* @return <b>true</b> if an stirandomaccess file opened with "rws" or "rwd" modes immediately writes data to the
*         underlying storage, <b>false</b> if not.
*/
public boolean supportsrws
return false
public boolean isreadonlydatabase
return false
/**
* determine whether the storage supports random access. if random access is not supported then
* it will only be accessed using inputstreams and outputstreams (if the database is writable).
*
* @return <b>true</b> if the storage supports random access, <b>false</b> if it is writable.
*/
public boolean supportsrandomaccess
return true
void doinit   throws ioexception
if  datadirectory    null
file datadirectoryfile   new file  datadirectory
file databaseroot   null
if  datadirectoryfile isabsolute
databaseroot   datadirectoryfile
else if  home    null    datadirectory startswith  home
databaseroot   datadirectoryfile
else
databaseroot   new file  home  datadirectory
if  home    null
datadirectory   home   getseparator      datadirectory
canonicalname   databaseroot getcanonicalpath
createtempdir
separateddatadirectory   datadirectory   getseparator
else if  home    null
file root   new file  home
datadirectory   root getcanonicalpath
separateddatadirectory   datadirectory   getseparator
end of doinit