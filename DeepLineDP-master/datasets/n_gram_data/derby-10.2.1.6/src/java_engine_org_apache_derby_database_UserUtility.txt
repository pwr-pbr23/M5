/*
derby - class org.apache.derby.database.userutility
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby database
import org apache derby iapi db propertyinfo
import org apache derby iapi store access transactioncontroller
import org apache derby iapi util idutil
import org apache derby iapi error standardexception
import org apache derby iapi sql conn languageconnectioncontext
import org apache derby iapi sql conn connectionutil
import org apache derby iapi reference sqlstate
import org apache derby iapi reference property
import java sql sqlexception
import org apache derby iapi error publicapi
/**
this utility class provides static methods for managing user authorization in a cloudscape database.
<p>this class can only be used within an sql-j statement, a java procedure or a server side java method.
<p>this class can be accessed using the class alias <code> userutility </code> in sql-j statements.
*/
public abstract class userutility
/** enumeration value for read access permission ("read_access_permission"). */
public final static string read_access_permission
/** enumeration value for full access permission ("full_access_permission"). */
public final static string full_access_permission
/** prevent users from creating userutility objects. */
private userutility
/**
add a user's authorization permission to the database.
<p>
only users with full_access_permission may use this.
@param username the user's name. a valid possibly delimited
sql identifier.
@param permission read_access_permission or full_access_permission.
@exception sqlexception thrown if this fails.
*/
public static final void add string username  string permission
throws sqlexception
string pv
transactioncontroller tc   connectionutil getcurrentlcc   gettransactionexecute
try
normalizeidparam   username     validate
if  permission  null
throw standardexception newexception sqlstate uu_invalid_parameter
if  permission equals read_access_permission
pv    string tc getproperty property read_only_access_users_property
pv   idutil appendid username pv
propertyinfo setdatabaseproperty property read_only_access_users_property pv
else if  permission equals full_access_permission
pv    string tc getproperty property full_access_users_property
pv   idutil appendid username pv
propertyinfo setdatabaseproperty property full_access_users_property pv
else
throw standardexception newexception sqlstate uu_unknown_permission  permission
catch  standardexception se
throw publicapi wrapstandardexception se
/**
set the authorization permission for a user in the database.
<p>
only users with full_access_permission may use this.
@param username the user's name. a valid possibly delimited
sql identifier.
@param permission read_access_permission or full_access_permission.
@exception sqlexception thrown if this fails.
*/
public static final void set string username  string permission
throws sqlexception
drop username
add username permission
/**
drop a user's authorization permission from the database.
<p>
only users with full_access_permission may use this.
@param username the user's name. a valid possibly delimited
sql identifier.
@exception sqlexception thrown if this fails or the user
being dropped does not exist.
*/
public static final void drop string username  throws
sqlexception
transactioncontroller tc   connectionutil getcurrentlcc   gettransactionexecute
try
string userid   normalizeidparam   username
string access   getpermission username
if  access    null    access equals read_access_permission
string pv    string tc getproperty property read_only_access_users_property
string newlist   idutil deleteid userid pv
propertyinfo setdatabaseproperty property read_only_access_users_property newlist
else if  access    null    access equals full_access_permission
string pv    string tc getproperty property full_access_users_property
string newlist   idutil deleteid userid pv
propertyinfo setdatabaseproperty property full_access_users_property newlist
else
throw standardexception newexception sqlstate uu_unknown_user  username
catch  standardexception se
throw publicapi wrapstandardexception se
/**
return a user's authorization permission in a database.
<p>
users with full_access_permission or read_access_permission
may use this.
@param username the user's name. a valid possibly delimited
sql identifier.
@return full_access_permission if the user is in "derby.database.fullaccessusers",
read_access_permission if the user is in "derby.database.readonlyaccessusers",
or null if the user is not in either list.
@exception sqlexception thrown if this fails.
*/
public static final string getpermission string username
throws sqlexception
transactioncontroller tc   connectionutil getcurrentlcc   gettransactionexecute
try
string pv    string
tc getproperty property read_only_access_users_property
string userid   normalizeidparam   username
if  idutil idonlist userid pv   return read_access_permission
pv    string tc getproperty property full_access_users_property
if  idutil idonlist userid pv   return full_access_permission
return null
catch  standardexception se
throw publicapi wrapstandardexception se
private static string normalizeidparam string pname  string pvalue
throws standardexception
if  pvalue  null
throw standardexception newexception sqlstate uu_invalid_parameter  pname
try
return idutil parseid pvalue
catch  standardexception se
throw standardexception newexception sqlstate uu_invalid_parameter  se  pname pvalue