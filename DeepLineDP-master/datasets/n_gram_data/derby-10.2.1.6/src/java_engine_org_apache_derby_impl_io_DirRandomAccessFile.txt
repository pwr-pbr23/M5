/*
derby - class org.apache.derby.impl.io.dirrandomaccessfile
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl io
import org apache derby iapi services sanity sanitymanager
import org apache derby io storagefile
import org apache derby io storagerandomaccessfile
import java io file
import java io randomaccessfile
import java io ioexception
import java io filenotfoundexception
/**
* this class provides a disk based implementation of the stirandomaccess file interface. it is used by the
* database engine to access persistent data and transaction logs under the directory (default) subsubprotocol.
*/
class dirrandomaccessfile extends randomaccessfile implements storagerandomaccessfile
/**
* construct a storagerandomaccessfileimpl.
*
* @param name the file name.
* @param mode the file open mode: "r", "rw", "rws", or "rwd". the  "rws" and "rwd" modes specify that the file is to
*             be synchronized, consistent with the java.io.randomaccessfile class. however the
*             storagerandomaccessfile.sync() method will be called even if the file was opened
*             in "rws" or "rwd" mode.  if the "rws" or "rwd" modes are supported then the implementation
*             of storagerandomaccessfile.sync need not do anything.
*
* @exception illegalargumentexception if the mode argument is not equal to one of "r", "rw".
* @exception filenotfoundexception if the file exists but is a directory rather than a regular
*              file, or cannot be opened or created for any other reason .
*/
dirrandomaccessfile  file name  string mode  throws filenotfoundexception
super  name  mode
/**
* force any changes out to the persistent store.
*
* @param metadata if true then this method is required to force changes to both the file's
*          content and metadata to be written to storage; otherwise, it need only force content changes
*          to be written.
*
* @exception ioexception if an io error occurs.
*/
public void sync  boolean metadata  throws ioexception
getfd   sync