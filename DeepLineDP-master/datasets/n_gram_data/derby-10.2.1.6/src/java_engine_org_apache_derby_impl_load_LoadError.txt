/*
derby - class org.apache.derby.impl.load.loaderror
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl load
import java sql sqlexception
import org apache derby iapi error exceptionseverity
import org apache derby iapi reference sqlstate
import org apache derby iapi error standardexception
import org apache derby iapi error publicapi
/**
* these exceptions are thrown by the import and export modules.
*
*
* @author mamta satoor
@see sqlexception
*/
class loaderror
/**
raised if, the cloudscape database connection is null.
*/
static sqlexception connectionnull
return publicapi wrapstandardexception
standardexception newexception sqlstate connection_null
/**
raised if, there is data found between the stop delimiter and field/record spearator.
@param linenumber found invalid data on this line number in the data file
@param columnnumber found invalid data for this column number in the data file
*/
static sqlexception dataafterstopdelimiter int linenumber  int columnnumber
return publicapi wrapstandardexception
standardexception newexception sqlstate data_after_stop_delimiter
new integer linenumber  new integer columnnumber
/**
raised if, the passed data file can't be found.
@param filename the data file name
*/
static sqlexception datafilenotfound string filename
return publicapi wrapstandardexception
standardexception newexception sqlstate data_file_not_found  filename
/**
raised if, null is passed for data file url.
*/
static sqlexception datafilenull
return publicapi wrapstandardexception
standardexception newexception sqlstate data_file_null
/**
raised if, the entity (ie table/view) for import/export is missing in the database.
*/
static sqlexception entitynamemissing
return publicapi wrapstandardexception
standardexception newexception sqlstate entity_name_missing
/**
raised if, field & record separators are substring of each other.
*/
static sqlexception fieldandrecordseparatorssubset
return  publicapi wrapstandardexception
standardexception newexception sqlstate field_is_record_seperator_subset
/**
raised if, no column by given name is found in the resultset while importing.
@param columnname the resultset doesn't have this column name
*/
static sqlexception invalidcolumnname string columnname
return  publicapi wrapstandardexception
standardexception newexception sqlstate invalid_column_name   columnname
/**
raised if, no column by given number is found in the resultset while importing.
@param numberofcolumns the resultset doesn't have this column number
*/
static sqlexception invalidcolumnnumber int numberofcolumns
return publicapi wrapstandardexception
standardexception newexception sqlstate invalid_column_number
new integer numberofcolumns
/**
raised if, trying to export/import from an entity which has non supported
type columns in it.
*/
static sqlexception nonsupportedtypecolumn string columnname  string typename
return  publicapi wrapstandardexception
standardexception newexception sqlstate unsupported_column_type
columnname
typename
/**
raised if, in case of fixed format, don't find the record separator for a row in the data file.
@param linenumber the line number with the missing record separator in the data file
*/
static sqlexception recordseparatormissing int linenumber
return  publicapi wrapstandardexception
standardexception newexception sqlstate record_seperator_missing
new integer linenumber
/**
raised if, in case of fixed format, reach end of file before reading data for all the columns.
*/
static sqlexception unexpectedendoffile int linenumber
return  publicapi wrapstandardexception
standardexception newexception sqlstate unexpected_end_of_file
new integer linenumber
/**
raised if, got ioexception while writing data to the file.
*/
static sqlexception errorwritingdata
return publicapi wrapstandardexception
standardexception newexception sqlstate error_writing_data
/*
* raised if period(.) is used a character delimiter
*/
static sqlexception periodaschardelimiternotallowed
return publicapi wrapstandardexception
standardexception newexception sqlstate period_as_char_delimiter_not_allowed
/*
* raised if same delimiter character is used for more than one delimiter
* type . for eg using ';' for both column delimter and character delimter
*/
static sqlexception delimitersarenotmutuallyexclusive
return publicapi wrapstandardexception
standardexception newexception sqlstate delimiters_are_not_mutually_exclusive
static sqlexception tablenotfound string tablename
return publicapi wrapstandardexception
standardexception newexception sqlstate table_not_found  tablename
/* wrapper to throw an unknown excepton duing import/export.
* typically this can be some io error which is not generic error
* like the above error messages.
*/
static sqlexception unexpectederror throwable t
if    t instanceof sqlexception
return publicapi wrapstandardexception standardexception plainwrapexception t
else
return  sqlexception  t