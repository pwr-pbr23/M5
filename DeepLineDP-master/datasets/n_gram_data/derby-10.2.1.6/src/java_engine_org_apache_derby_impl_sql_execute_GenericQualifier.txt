/*
derby - class org.apache.derby.impl.sql.execute.genericqualifier
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl sql execute
import org apache derby iapi sql activation
import org apache derby iapi error standardexception
import org apache derby iapi store access qualifier
import org apache derby iapi types datavaluedescriptor
import org apache derby iapi services loader generatedmethod
import org apache derby iapi services sanity sanitymanager
/**
*	this is the implementation for qualifier.  it is used for generated scans.
*
*	@author jeff lichtman
*/
public class genericqualifier implements qualifier
private int columnid
private int operator
private generatedmethod orderablegetter
private activation	activation
private boolean orderednulls
private boolean unknownrv
private boolean negatecompareresult
protected int varianttype
private datavaluedescriptor orderablecache   null
public genericqualifier int columnid
int operator
generatedmethod orderablegetter
activation activation
boolean orderednulls
boolean unknownrv
boolean negatecompareresult
int varianttype
this columnid   columnid
this operator   operator
this orderablegetter   orderablegetter
this activation   activation
this orderednulls   orderednulls
this unknownrv   unknownrv
this negatecompareresult   negatecompareresult
this varianttype   varianttype
/*
* qualifier interface
*/
/**
* @see qualifier#getcolumnid
*/
public int getcolumnid
return columnid
/**
* @see qualifier#getorderable
*
* @exception standardexception		thrown on error
*/
public datavaluedescriptor getorderable   throws standardexception
if  varianttype    variant
if  orderablecache    null
orderablecache    datavaluedescriptor   orderablegetter invoke activation
return orderablecache
return  datavaluedescriptor   orderablegetter invoke activation
/** get the operator to use in the comparison.
*
*  @see qualifier#getoperator
**/
public int getoperator
return operator
/** should the result from the compare operation be negated?  if true
*  then only rows which fail the compare operation will qualify.
*
*  @see qualifier#negatecompareresult
**/
public boolean negatecompareresult
return negatecompareresult
/** get the getorderednulls argument to use in the comparison.
*
*  @see qualifier#getorderednulls
**/
public boolean getorderednulls
return orderednulls
/** get the getorderednulls argument to use in the comparison.
*
*  @see qualifier#getunknownrv
**/
public boolean getunknownrv
return unknownrv
/** clear the datavaluedescriptor cache, if one exists.
*  (the datavaluedescriptor can be 1 of 3 types:
*		o  variant		  - cannot be cached as its value can
*							vary within a scan
*		o  scan_invariant - can be cached within a scan as its
*							value will not change within a scan
*		o  query_invariant- can be cached across the life of the query
*							as its value will never change
*		o  constant		  - never changes
*
*  @see qualifier#getunknownrv
*/
public void clearorderablecache
if   varianttype    scan_invariant      varianttype    variant
orderablecache   null
/**
* this method reinitializes all the state of
* the qualifier.  it is used to distinguish between
* resetting something that is query invariant
* and something that is constant over every
* execution of a query.  basically, clearorderablecache()
* will only clear out its cache if it is a variant
* or scan_invariant value.  however, each time a
* query is executed, the query_invariant qualifiers need
* to be reset.
*/
public void reinitialize
if  varianttype    constant
orderablecache   null
public string tostring
if  sanitymanager debug
return   columnid
operator
orderednulls
unknownrv
negatecompareresult
else
return