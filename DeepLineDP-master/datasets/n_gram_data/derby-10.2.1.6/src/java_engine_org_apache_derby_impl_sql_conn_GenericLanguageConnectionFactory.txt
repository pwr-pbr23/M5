/*
derby - class org.apache.derby.impl.sql.conn.genericlanguageconnectionfactory
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl sql conn
import org apache derby iapi reference jdbc20translation
import org apache derby iapi reference jdbc30translation
import org apache derby iapi sql conn languageconnectionfactory
import org apache derby iapi sql conn languageconnectioncontext
import org apache derby iapi sql compile compilercontext
import org apache derby iapi sql languagefactory
import org apache derby impl sql genericstatement
import org apache derby impl sql conn cachedstatement
import org apache derby iapi services uuid uuidfactory
import org apache derby iapi services compiler javafactory
import org apache derby iapi services loader classfactory
import org apache derby iapi db database
import org apache derby iapi store access transactioncontroller
import org apache derby iapi sql compile typecompilerfactory
import org apache derby iapi error standardexception
import org apache derby iapi sql compile nodefactory
import org apache derby iapi sql compile parser
import org apache derby iapi sql activation
import org apache derby iapi store access accessfactory
import org apache derby iapi services property propertyfactory
import org apache derby iapi sql statement
import org apache derby iapi sql compile optimizerfactory
import org apache derby iapi sql dictionary datadictionary
import org apache derby iapi types datavaluefactory
import org apache derby iapi sql execute executionfactory
import org apache derby iapi sql dictionary schemadescriptor
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi services monitor monitor
import org apache derby iapi services monitor modulecontrol
import org apache derby iapi services monitor modulesupportable
import org apache derby iapi services monitor modulefactory
import org apache derby iapi services context contextmanager
import org apache derby iapi services cache cachefactory
import org apache derby iapi services cache cachemanager
import org apache derby iapi services cache cacheablefactory
import org apache derby iapi services cache cacheable
import org apache derby iapi services property propertyutil
import org apache derby iapi services property propertysetcallback
import org apache derby iapi services i18n localefinder
import org apache derby iapi reference sqlstate
import org apache derby iapi reference property
import org apache derby iapi reference enginetype
import java util properties
import java util locale
import java util dictionary
import java io serializable
import org apache derby iapi util idutil
import org apache derby iapi services daemon serviceable
import org apache derby iapi util stringutil
/**
* languageconnectionfactory generates all of the items
* a language system needs that is specific to a particular
* connection. alot of these are other factories.
*
* @author ames
*/
public class genericlanguageconnectionfactory
implements languageconnectionfactory  cacheablefactory  propertysetcallback  modulecontrol  modulesupportable
/*
fields
*/
protected 	datadictionary	dd
private 	executionfactory		ef
private 	optimizerfactory		of
private		typecompilerfactory		tcf
private 	datavaluefactory		dvf
private 	uuidfactory				uuidfactory
private 	javafactory				javafactory
private 	classfactory			classfactory
private 	nodefactory				nodefactory
private 	accessfactory			af
private 	propertyfactory			pf
private		int						nextlccinstancenumber
/*
for caching prepared statements
*/
private int cachesize   org apache derby iapi reference property statement_cache_size_default
private cachemanager singlestatementcache
/*
constructor
*/
public genericlanguageconnectionfactory
/*
languageconnectionfactory interface
*/
/*
these are the methods that do real work, not just look for factories
*/
/**
get a statement for the connection
@param compilationschema schema
@param statementtext the text for the statement
@param forreadonly if concurrency is concur_read_only
@return	the statement
*/
public statement getstatement schemadescriptor compilationschema  string statementtext  boolean forreadonly
return new genericstatement compilationschema  statementtext  forreadonly
/**
get a languageconnectioncontext. this holds things
we want to remember about activity in the language system,
where this factory holds things that are pretty stable,
like other factories.
<p>
the returned languageconnectioncontext is intended for use
only by the connection that requested it.
@return a language connection context for the context stack.
@exception standardexception the usual -- for the subclass
*/
public languageconnectioncontext newlanguageconnectioncontext
contextmanager cm
transactioncontroller tc
languagefactory lf
database db
string username
string drdaid
string dbname  throws standardexception
pushdatadictionarycontext cm
return new genericlanguageconnectioncontext cm
tc
lf
this
db
username
getnextlccinstancenumber
drdaid
dbname
public cacheable newcacheable cachemanager cm
return new cachedstatement
/*
these methods all look for factories that we booted.
*/
/**
get the uuidfactory to use with this language connection
remind: this is only used by the compiler; should there be
a compiler module control class to boot compiler-only stuff?
*/
public uuidfactory	getuuidfactory
return uuidfactory
/**
get the classfactory to use with this language connection
*/
public classfactory	getclassfactory
return classfactory
/**
get the javafactory to use with this language connection
remind: this is only used by the compiler; should there be
a compiler module control class to boot compiler-only stuff?
*/
public javafactory	getjavafactory
return javafactory
/**
get the nodefactory to use with this language connection
remind: is this only used by the compiler?
*/
public nodefactory	getnodefactory
return nodefactory
/**
get the executionfactory to use with this language connection
*/
public executionfactory	getexecutionfactory
return ef
/**
get the accessfactory to use with this language connection
*/
public accessfactory	getaccessfactory
return af
/**
get the propertyfactory to use with this language connection
*/
public propertyfactory	getpropertyfactory
return pf
/**
get the optimizerfactory to use with this language connection
*/
public optimizerfactory	getoptimizerfactory
return of
/**
get the typecompilerfactory to use with this language connection
*/
public typecompilerfactory gettypecompilerfactory
return tcf
/**
get the datavaluefactory to use with this language connection
*/
public datavaluefactory		getdatavaluefactory
return dvf
protected void pushdatadictionarycontext contextmanager cm
// we make sure there is a data dictionary context in place.
dd pushdatadictionarycontext cm
/*
modulecontrol interface
*/
/**
this implementation will not support caching of statements.
*/
public boolean cansupport properties startparams
return monitor isdesiredtype  startparams  enginetype standalone_db
private	int	statementcachesize properties startparams
string wantcacheproperty   null
wantcacheproperty
propertyutil getpropertyfromset startparams  org apache derby iapi reference property statement_cache_size
if  sanitymanager debug
sanitymanager debug      wantcacheproperty
if  wantcacheproperty    null
try
cachesize   integer parseint wantcacheproperty
catch  numberformatexception nfe
cachesize   org apache derby iapi reference property statement_cache_size_default
return cachesize
/**
* start-up method for this instance of the language connection factory.
* note these are expected to be booted relative to a database.
*
* @param startparams	the start-up parameters (ignored in this case)
*
* @exception standardexception	thrown on failure to boot
*/
public void boot boolean create  properties startparams
throws standardexception
dvf    datavaluefactory  monitor bootservicemodule create  this  org apache derby iapi reference classname datavaluefactory  startparams
javafactory    javafactory  monitor startsystemmodule org apache derby iapi reference module javafactory
uuidfactory   monitor getmonitor   getuuidfactory
classfactory    classfactory  monitor getservicemodule this  org apache derby iapi reference module classfactory
if  classfactory    null
classfactory    classfactory  monitor findsystemmodule org apache derby iapi reference module classfactory
bootdatadictionary create  startparams
//set the property validation module needed to do propertysetcallback
//register and property validation
setvalidation
setstore
ef    executionfactory  monitor bootservicemodule create  this  executionfactory module  startparams
of    optimizerfactory  monitor bootservicemodule create  this  optimizerfactory module  startparams
tcf
typecompilerfactory  monitor startsystemmodule typecompilerfactory module
nodefactory    nodefactory  monitor bootservicemodule create  this  nodefactory module  startparams
// if the system supports statement caching boot the cachefactory module.
int cachesize   statementcachesize startparams
if  cachesize > 0
cachefactory cachefactory    cachefactory  monitor startsystemmodule org apache derby iapi reference module cachefactory
singlestatementcache   cachefactory newcachemanager this
cachesize 4
cachesize
protected void bootdatadictionary boolean create  properties startparams  throws standardexception
dd    datadictionary  monitor bootservicemodule create  this  datadictionary module  startparams
/**
* returns the statement cache that this connection should use; currently
* there is a statement cache per connection.
*/
public cachemanager getstatementcache
return singlestatementcache
/**
* stop this module.  in this case, nothing needs to be done.
*/
public void stop
/*
** methods of propertysetcallback
*/
public void init boolean dbonly  dictionary p
// not called yet ...
/**
@see propertysetcallback#validate
@exception standardexception thrown on error.
*/
public boolean validate string key
serializable value
dictionary p
throws standardexception
if  value    null
return true
else if  key equals property default_connection_mode_property
string value_s    string value
if  value_s    null
stringutil sqlequalsignorecase value_s  property no_access
stringutil sqlequalsignorecase value_s  property read_only_access
stringutil sqlequalsignorecase value_s  property full_access
throw standardexception newexception sqlstate auth_invalid_authorization_property  key  value_s
return true
else if  key equals property read_only_access_users_property
key equals property full_access_users_property
string value_s    string value
/** parse the new useridlist to verify its syntax. */
string newlist_a
try  newlist_a   idutil parseidlist value_s
catch  standardexception se
throw standardexception newexception sqlstate auth_invalid_authorization_property  se  key value_s
/** check the new list useridlist for duplicates. */
string dups   idutil dups newlist_a
if  dups    null  throw standardexception newexception sqlstate auth_duplicate_users  key dups
/** check for users with both read and full access permission. */
string otherlist_a
string otherlist
if  key equals property read_only_access_users_property
otherlist    string p get property full_access_users_property
else
otherlist    string p get property read_only_access_users_property
otherlist_a   idutil parseidlist otherlist
string both   idutil intersect newlist_a otherlist_a
if  both    null  throw standardexception newexception sqlstate auth_user_in_read_and_write_lists  both
return true
return false
/** @see propertysetcallback#apply */
public serviceable apply string key
serializable value
dictionary p
return null
/** @see propertysetcallback#map */
public serializable map string key  serializable value  dictionary p
return null
protected void setvalidation   throws standardexception
pf    propertyfactory  monitor findservicemodule this
org apache derby iapi reference module propertyfactory
pf addpropertysetnotification this
protected void setstore   throws standardexception
af    accessfactory  monitor findservicemodule this accessfactory module
public parser newparser compilercontext cc
return new org apache derby impl sql compile parserimpl cc
// class methods
/**
* get the instance # for the next lcc.
* (useful for logstatementtext=true output.
*
* @return instance # of next lcc.
*/
protected synchronized int getnextlccinstancenumber
return nextlccinstancenumber