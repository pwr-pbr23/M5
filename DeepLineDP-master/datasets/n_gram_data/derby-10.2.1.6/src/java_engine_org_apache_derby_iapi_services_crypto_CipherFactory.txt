/*
derby - class org.apache.derby.iapi.services.crypto.cipherfactory
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi services crypto
import org apache derby iapi error standardexception
import java security securerandom
import java util properties
import org apache derby io storagefactory
/**
a cipherfactory can create new cipherprovider, which is a wrapper for a
javax.crypto.cipher
this service is only available when run on jdk1.2 or beyond.
to use this service, either the sunjce or an alternative clean room
implementation of the jce must be installed.
to use a cipherprovider to encrypt or decrypt, it needs 3 things:
1) a cipherprovider that is initialized to encrypt or decrypt
2) a secret key for the encryption/decryption
3) an initialization vector (ivparameterspec) that is used to create some
randomness in the encryption
see $ws/docs/funcspec/mulan/configurableencryption.html
see http://java.sun.com/products/jdk/1.1/docs/guide/security/cryptospec.html
see http://java.sun.com/products/jdk/1.2/docs/guide/security/cryptospec.html
see http://java.sun.com/products/jdk/1.2/jce/index.html
*/
public interface cipherfactory
/** minimum bootpassword length */
public static final int min_bootpass_length   8
/**
get a cipherprovider that either encrypts or decrypts.
*/
public static final int encrypt   1
public static final int decrypt   2
securerandom getsecurerandom
/**
returns a cipherprovider which is the encryption or decryption engine.
@param mode is either encrypt or decrypt.  the cipherprovider can only
do encryption or decryption but not both.
@exception standardexception standard cloudscape error policy
*/
cipherprovider createnewcipher int mode
throws standardexception
public string changebootpassword string changestring  properties properties  cipherprovider verify
throws standardexception
/**
verify the external encryption key. throws exception if unable to verify
that the encryption key is the same as that
used during database creation or if there are any problems when trying to do the
verification process.
@param	create	 true means database is being created, whereas false
implies that the database has already been created
@param	storagefactory storagefactory is used to access any stored data
that might be needed for verification process of the encryption key
@param	properties	properties at time of database connection as well as those in service.properties
*/
public void verifykey boolean create  storagefactory storagefactory properties properties
throws standardexception
public void saveproperties properties properties