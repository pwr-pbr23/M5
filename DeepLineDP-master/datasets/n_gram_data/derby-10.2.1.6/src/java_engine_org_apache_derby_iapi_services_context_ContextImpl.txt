/*
derby - class org.apache.derby.iapi.services.context.contextimpl
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi services context
/**
* contexts are created and used to manage the execution
* environment. they provide a convenient location for
* storing globals organized by the module using the
* globals.
* <p>
* we provide this abstract class for other implementations
* to use so that they can simply add fields and operations on
* them. to be usable by the context manager, the subclasses
* must define cleanuponerror and call super() in any constructor.
* <p>
* contexts assist in cleanup
* when errors are caught in the outer block.
* <p>
* contexts implement the sanity interface to check and provide
* information about their contents.
*/
public abstract class contextimpl
implements context
private final string myidname
private final contextmanager mycontextmanager
/*
* class interface
*/
protected contextimpl contextmanager cm  string id
myidname   id
mycontextmanager   cm
cm pushcontext this
/*
* context interface
*/
/**
* @see org.apache.derby.iapi.services.context.context#getcontextmanager
*/
final public contextmanager getcontextmanager
return mycontextmanager
/**
* @see org.apache.derby.iapi.services.context.context#getidname
*/
final public string getidname
return myidname
final public void pushme
getcontextmanager   pushcontext this
/** @see context#popme */
final public void popme
getcontextmanager   popcontext this
/**
* @see context#islasthandler
*/
public boolean islasthandler int severity
return false
public stringbuffer appenderrorinfo
return null