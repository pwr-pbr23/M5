/*
derby - class org.apache.derby.impl.store.access.conglomerate.conglomerateutil
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl store access conglomerate
import org apache derby iapi reference property
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi services io formatable
import org apache derby iapi services io formatidutil
import org apache derby iapi error standardexception
import org apache derby iapi store access qualifier
import org apache derby iapi store access rowutil
import org apache derby iapi store access transactioncontroller
import org apache derby iapi store raw containerhandle
import org apache derby iapi store raw fetchdescriptor
import org apache derby iapi store raw page
import org apache derby iapi store raw rawstorefactory
import org apache derby iapi store raw recordhandle
import org apache derby iapi types datavaluedescriptor
import org apache derby iapi services io formatablebitset
import java io ioexception
import java io objectinput
import java io objectoutput
import java util hashtable
import java util properties
/**
* static utility routine package for all conglomerates.
* <p>
* a collection of static utility routines that are shared by multiple
* conglomerate implementations.
* <p>
**/
public final class conglomerateutil
/* public methods of this class: (arranged alphabetically ) */
/**
* create a list of all the properties that access wants to export
* through the getinternaltablepropertyset() call.
* <p>
* this utility routine creates a list of properties that are shared by
* all conglomerates.  this list contains the following:
*
*     derby.storage.initialpages
*     derby.storage.minimumrecordsize
*     derby.storage.pagereservedspace
*     derby.storage.pagesize
*     derby.storage.reusablerecordid
*
* <p>
*
* @return the property set filled in.
*
* @param prop   if non-null the property set to fill in.
**/
public static properties createrawstorepropertyset
properties  prop
prop   createuserrawstorepropertyset prop
prop put rawstorefactory page_reusable_record_id
return prop
/**
* create a list of all the properties that access wants to export
* through the getinternaltablepropertyset() call.
* <p>
* this utility routine creates a list of properties that are shared by
* all conglomerates.  this list contains the following:
*
*     derby.storage.initialpages
*     derby.storage.minimumrecordsize
*     derby.storage.pagereservedspace
*     derby.storage.pagesize
*
* <p>
*
* @return the property set filled in.
*
* @param prop   if non-null the property set to fill in.
**/
public static properties createuserrawstorepropertyset
properties  prop
if  prop    null
prop   new properties
prop put property page_size_parameter
prop put rawstorefactory minimum_record_size_parameter
prop put rawstorefactory page_reserved_space_parameter
prop put rawstorefactory container_initial_pages
return prop
/**
* given an array of objects, return an array of format id's.
* <p>
*
* @return an array of format id's describing the input array of objects.
*
* @param template a row.
*
**/
public static int createformatids
datavaluedescriptor    template
// get format id's from each column in template
// conglomerate state.
int format_ids   new int
for  int i   0  i < template length  i
if  sanitymanager debug
if  template    null
sanitymanager throwassert
i
if    template instanceof formatable
sanitymanager throwassert
i   template getclass   getname
format_ids     formatable  template  gettypeformatid
return format_ids
/**
* read a format id array in from a stream.
* <p>
*
* @return a new array of format id's.
*
* @param num         the number of format ids to read.
* @param in          the stream to read the array of format id's from.
*
* @exception  ioexception  thown on read error.
**/
public static int readformatidarray
int         num
objectinput in
throws ioexception
// read in the array of format id's
int format_ids   new int
for  int i   0  i < num  i
format_ids   formatidutil readformatidinteger in
return format_ids
/**
* write a format id array to a stream.
* <p>
*
* @param format_id_array the number of format ids to read.
* @param out             the stream to write the array of format id's to.
*
* @exception  ioexception  thown on write error.
**/
public static void writeformatidarray
int     format_id_array
objectoutput out
throws ioexception
for  int i   0  i < format_id_array length  i
formatidutil writeformatidinteger out  format_id_array
/**
** format a page of data, as access see's it.
**/
public static string debugpage
page                    page
int                     start_slot
boolean                 full_rh
datavaluedescriptor   template
if  sanitymanager debug
stringbuffer string   new stringbuffer 4096
string append
string append page getpagenumber
string append
try
if  page    null
int numrows     page recordcount
for  int slot_no   start_slot  slot_no < numrows  slot_no
recordhandle rh
page fetchfromslot
recordhandle  null  slot_no  template
fetchdescriptor  null
true
// pre-pend either "d:" if deleted, or " :" if not.
string append
page isdeletedatslot slot_no  ?
// row[slot,id]:
string append
string append slot_no
string append
string append rh getid
string append
// long record handle:
//   record id=78 page(31,container(0, 919707766934))
if  full_rh
string append
string append rh tostring
string append
// row:
string append rowutil tostring template
string append
// string.append(page.tostring());
catch  throwable t
string append
return string tostring
else
return null