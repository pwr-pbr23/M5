/*
derby - class org.apache.derby.jdbc.embeddeddriver
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby jdbc
import java sql drivermanager
import java sql driver
import java sql connection
import java sql driverpropertyinfo
import java sql sqlexception
import java io printstream
import java util properties
import org apache derby iapi reference messageid
import org apache derby iapi reference attribute
import org apache derby iapi services i18n messageservice
import org apache derby iapi jdbc jdbcboot
/**
the embedded jdbc driver (type 4) for derby.
<p>
the driver automatically supports the correct jdbc specification version
for the java virtual machine's environment.
<ul>
<li> jdbc 3.0 - java 2 - jdk 1.4, j2se 5.0
<li> jdbc 2.0 - java 2 - jdk 1.2,1.3
</ul>
<p>
loading this jdbc driver boots the database engine
within the same java virtual machine.
<p>
the correct code to load the derby engine using this driver is
(with approriate try/catch blocks):
<pre>
class.forname("org.apache.derby.jdbc.embeddeddriver").newinstance();
// or
new org.apache.derby.jdbc.embeddeddriver();
</pre>
when loaded in this way, the class boots the actual jdbc driver indirectly.
the jdbc specification recommends the class.forname method without the .newinstance()
method call, but adding the newinstance() guarantees
that derby will be booted on any java virtual machine.
<p>
any initial error messages are placed in the printstream
supplied by the drivermanager. if the printstream is null error messages are
sent to system.err. once the derby engine has set up an error
logging facility (by default to derby.log) all subsequent messages are sent to it.
<p>
by convention, the class used in the class.forname() method to
boot a jdbc driver implements java.sql.driver.
this class is not the actual jdbc driver that gets registered with
the driver manager. it proxies requests to the registered derby jdbc driver.
@see java.sql.drivermanager
@see java.sql.drivermanager#getlogstream
@see java.sql.driver
@see java.sql.sqlexception
*/
public class embeddeddriver  implements driver
static
embeddeddriver boot
private	autoloadeddriver	_autoloadeddriver
// boot from the constructor as well to ensure that
// class.forname(...).newinstance() reboots derby
// after a shutdown inside the same jvm.
public embeddeddriver
embeddeddriver boot
/*
** methods from java.sql.driver.
*/
/**
accept anything that starts with <code>jdbc:derby:</code>.
@exception sqlexception if a database-access error occurs.
@see java.sql.driver
*/
public boolean acceptsurl string url  throws sqlexception
return getdrivermodule   acceptsurl url
/**
connect to the url if possible
@exception sqlexception illegal url or problem with connectiong
@see java.sql.driver
*/
public connection connect string url  properties info
throws sqlexception
return getdrivermodule   connect url  info
/**
* returns an array of driverpropertyinfo objects describing possible properties.
@exception sqlexception if a database-access error occurs.
@see java.sql.driver
*/
public  driverpropertyinfo getpropertyinfo string url  properties info
throws sqlexception
return getdrivermodule   getpropertyinfo url  info
/**
* returns the driver's major version number.
@see java.sql.driver
*/
public int getmajorversion
try
return  getdrivermodule   getmajorversion
catch  sqlexception se
return 0
/**
* returns the driver's minor version number.
@see java.sql.driver
*/
public int getminorversion
try
return  getdrivermodule   getminorversion
catch  sqlexception se
return 0
/**
* report whether the driver is a genuine jdbc compliant (tm) driver.
@see java.sql.driver
*/
public boolean jdbccompliant
try
return  getdrivermodule   jdbccompliant
catch  sqlexception se
return false
/**
* lookup the booted driver module appropriate to our jdbc level.
*/
private	driver	getdrivermodule
throws sqlexception
return autoloadeddriver getdrivermodule
/*
** find the appropriate driver for our jdbc level and boot it.
*  this is package protected so that autoloadeddriver can call it.
*/
static void boot
printstream ps   drivermanager getlogstream
if  ps    null
ps   system err
new jdbcboot   boot attribute protocol  ps