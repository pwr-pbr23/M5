/*
derby - class org.apache.derby.client.net.netconfiguration
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby client net
import org apache derby iapi reference drdaconstants
import org apache derby client am version
public class netconfiguration
// ---------------------------------------------------------------------------
static final int initial_capacity   10     initial size of the vector for the input parameters
// value to use when padding non-character data in ddm objects.
public static final byte non_char_ddm_data_pad_byte   0x00
static final int cursor_not_open   0
static final int cursor_open   1
static final int cursor_close_only   2
// number of bytes in the ddm header.
static final int ddmhdr_length   4
// number of bytes in the dss header.
static final int dsshdr_length   6
// maximum size of external name.
static final int extnam_maxsize   255
// minimum agent level required by protocol.
static final int min_agent_mgrlvl   3
// minimum communications tcpip manager level required by protocol.
static final int min_cmntcpip_mgrlvl   5
// minimum lu6.2 conversational communications manager
static final int min_cmnappc_mgrlvl   3
// minimum rdb manager level required by protocol.
static final int min_rdb_mgrlvl   3
// minimum secmgr manager level required by protocol.
static final int min_secmgr_mgrlvl   5
// minimum sqlam manager level required by protocol.
static final int min_sqlam_mgrlvl   4
// minimum xa manager level required by protocol.
static final int min_xamgr_mgrlvl   7
// minimum secmgr manager level required by protocol.
static final int min_syncptmgr_mgrlvl   5
// minimum sqlam manager level required by protocol.
static final int min_rsyncmgr_mgrlvl   5
// maximun password size.
static final int password_maxsize   255
// fixed prddta application id fixed length.
public static final int prddta_appl_id_fixed_len   20
// prddta accounting suffix length byte offset.
static final int prddta_acct_suffix_len_byte   55
// prddta max accounting suffix length.
static final int prddta_max_acct_suffix_len   199
// prddta length byte offset.
static final int prddta_len_byte   0
// maximum prddta size.
static final int prddta_maxsize   255
// prddta platform id.
public static final string prddta_platform_id
// fixed prddta user id fixed length.
public static final int prddta_user_id_fixed_len   8
// identifier length for fixed length rdb name
public static final int pkg_identifier_fixed_len   18
// maximum rdb identifier length
static final int pkg_identifier_max_len   255
// fixed pkgcnstkn length
public static final int pkgcnstkn_fixed_len   8
// maximum length of a security token.
// anything greater than 32763 bytes of sectkn would require extended length ddms.
// this seems like an impossible upper bound limit right now so set
// max to 32763 and cross bridge later.
static final int sectkn_maxsize   32763      this was 255
// server class name of the clientdnc product.
static final string srvclsnm_jvm
// maximum size of srvnam name.
static final int srvnam_maxsize   255
// manager is na or not usued.
static final int mgrlvl_na   0
// manager level 3 constant.
static final int mgrlvl_3   0x03
// manager level 4 constant.
static final int mgrlvl_4   0x04
// manager level 5 constant.
static final int mgrlvl_5   0x05
// manager level 6 constant.
static final int mgrlvl_6   0x06
// manager level 7 constant.
static final public int mgrlvl_7   0x07
// indicates the dce security mechanism.
static final int secmec_dcesec   0x01
// indicates encrypted userid, password,
// new password security mechanism.
static final int secmec_eusridnwpwd   0x0a
// indicates userid/encrypted password security mechanism.
public static final int secmec_eusridpwd   0x09
// indicates userid only security mechanism.
public static final int secmec_usridonl   0x04
// indicates userid/encrypted password security mechanism.
public static final int secmec_usrencpwd   0x07
// indicates userid/new password security mechanism.
static final int secmec_usridnwpwd   0x05
// indicates userid/password security mechanism.
public static final int secmec_usridpwd   0x03
//indicates encrypted userid and encrypted security-sensitive data security mechanism
public static final int secmec_eusriddta   0x0c
//indicates encrypted userid,encrypted password and encrypted security-sensitive data security mechanism
public static final int secmec_eusrpwddta   0x0d
// indicates userid with strong password substitute security mechanism.
public static final int secmec_usrssbpwd   0x08
// list of security mechanisms supported by this driver
static final int secmgr_secmecs    netconfiguration secmec_eusridpwd
netconfiguration secmec_usrencpwd
netconfiguration secmec_usridpwd
netconfiguration secmec_usridonl
netconfiguration secmec_eusriddta
netconfiguration secmec_eusrpwddta
netconfiguration secmec_usrssbpwd
// ieee ascii constant.
public static final string system_asc
// jvm constant.
static final string system_jvm
// maximum size of user name.
static final int usrid_maxsize   255
// product id of the clientdnc.
public static string prdid
// the server release level of this product.
// it will be prefixed with prdid
static string srvrlslv
// initialize prdid and srvrlslv
static
int majorversion   version getmajorversion
int minorversion   version getminorversion
int protocolmaintversion   version getprotocolmaintversion
// prdid format as network server expects  it: dncmmmx
// mm = major version
// mm = minor version
// x = protocol maintenanceversion
string prdid   drdaconstants derby_drda_client_id
if  majorversion < 10
prdid
prdid    majorversion
if  minorversion < 10
prdid
prdid    minorversion
prdid    protocolmaintversion
prdid   prdid
srvrlslv   prdid       version getdriverversion