/*
derby - class org.apache.derby.impl.sql.execute.genericaggregateresultset
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl sql execute
import org apache derby iapi services monitor monitor
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi services stream headerprintwriter
import org apache derby iapi services stream infostreams
import org apache derby iapi services io formatable
import org apache derby iapi sql execute cursorresultset
import org apache derby iapi sql resultset
import org apache derby iapi sql execute execrow
import org apache derby iapi sql execute execindexrow
import org apache derby iapi sql execute noputresultset
import org apache derby iapi sql activation
import org apache derby iapi store access columnordering
import org apache derby iapi store access sortobserver
import org apache derby iapi store access transactioncontroller
import org apache derby iapi store access scancontroller
import org apache derby iapi jdbc connectioncontext
import org apache derby iapi services loader generatedmethod
import org apache derby iapi services loader classfactory
import org apache derby iapi sql execute executioncontext
import org apache derby iapi sql conn languageconnectioncontext
import org apache derby iapi sql conn languageconnectioncontext
import org apache derby iapi error standardexception
import org apache derby iapi types rowlocation
import org apache derby iapi reference sqlstate
import org apache derby iapi services io formatablearrayholder
import org apache derby impl jdbc embedsqlwarning
import java util properties
import java util vector
import java sql sqlexception
/**
* generic aggregation utilities.
*
* @author jamie
*/
abstract class genericaggregateresultset extends noputresultsetimpl
protected genericaggregator		aggregates
protected generatedmethod			rowallocator
protected aggregatorinfolist	agginfolist
public noputresultset source
protected	noputresultset	originalsource     used for run time stats only
/**
* constructor
*
* @param a activation
* @param ra row allocator generated method
* @param resultsetnumber result set number
* @param optimizerestimatedrowcount optimizer estimated row count
* @param optimizerestimatedcost optimizer estimated cost
*
* @exception standardexception thrown on error
*/
genericaggregateresultset
noputresultset s
int	aggregateitem
activation 	a
generatedmethod	ra
int 			resultsetnumber
double 			optimizerestimatedrowcount
double 			optimizerestimatedcost
throws standardexception
super a  resultsetnumber  optimizerestimatedrowcount  optimizerestimatedcost
source   s
originalsource   s
rowallocator   ra
agginfolist    aggregatorinfolist   a getpreparedstatement   getsavedobject aggregateitem
aggregates   getsortaggregators agginfolist  false
a getlanguageconnectioncontext    s
/**
* for each aggregatorinfo in the list, generate a
* genericaggregator and stick it in an array of
* genericaggregators.
*
* @param list 	the list of aggregators to set up
* @param eliminatedistincts	should distincts be ignored.
*		used to toss out distinct aggregates for a prelim
*		sort.
* @param lcc the lcc
* @param inputresultset the incoming result set
*
* @return the array of genericaggregators
*
* @exception standardexception on error
*/
protected final genericaggregator getsortaggregators
aggregatorinfolist 			list
boolean 					eliminatedistincts
languageconnectioncontext	lcc
noputresultset				inputresultset
throws standardexception
genericaggregator 	aggregators
vector tmpaggregators   new vector
classfactory		cf   lcc getlanguageconnectionfactory   getclassfactory
int count   list size
for  int i   0  i < count  i
aggregatorinfo agginfo    aggregatorinfo  list elementat i
if     eliminatedistincts    agginfo isdistinct
// if (eliminatedistincts == agginfo.isdistinct())
tmpaggregators addelement new genericaggregator agginfo  cf
aggregators   new genericaggregator
tmpaggregators copyinto aggregators
// system.out.println("size of sort aggregates " + tmpaggregators.size());
return aggregators
/**
* finish the aggregation for the current row.
* basically call finish() on each aggregator on
* this row.  called once per grouping on a vector
* aggregate or once per table on a scalar aggregate.
*
* if the input row is null, then rowallocator is
* invoked to create a new row.  that row is then
* initialized and used for the output of the aggregation.
*
* @param 	row	the row to finish aggregation
*
* @return	the result row.  if the input row != null, then
*	the result row == input row
*
* @exception standardexception thrown on error
*/
protected final execindexrow finishaggregation execindexrow row
throws standardexception
int	size   aggregates length
/*
** if the row in which we are to place the aggregate
** result is null, then we have an empty input set.
** so we'll have to create our own row and set it
** up.  note: we needn't initialize in this case,
** finish() will take care of it for us.
*/
if  row    null
row   getexecutionfactory   getindexablerow  execrow  rowallocator invoke activation
setcurrentrow row
currentrow   row
boolean eliminatednulls   false
for  int i   0  i < size  i
genericaggregator curraggregate   aggregates
if  curraggregate finish row
eliminatednulls   true
if  eliminatednulls
addwarning embedsqlwarning newembedsqlwarning sqlstate lang_null_eliminated_in_set_function
return row
public void finish   throws standardexception
source finish
super finish