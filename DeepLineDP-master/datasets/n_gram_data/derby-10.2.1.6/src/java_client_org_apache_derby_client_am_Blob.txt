/*
derby - class org.apache.derby.client.am.blob
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby client am
import java io ioexception
import java io inputstream
import java sql sqlexception
import java util arraylist
import org apache derby shared common reference sqlstate
public class blob extends lob implements java sql blob
//this boolean variable indicates whether the blob object has
//been invalidated by calling free() on it
private boolean isvalid   true
//-----------------------------state------------------------------------------
byte binarystring_   null
// only used for input purposes.  for output, each getbinarystream call
// must generate an independent stream.
java io inputstream binarystream_   null
int dataoffset_
//---------------------constructors/finalizer---------------------------------
public blob byte binarystring
agent agent
int dataoffset
super agent
binarystring_   binarystring
datatype_    binary_string
sqllength_   binarystring length   dataoffset
lengthobtained_   true
dataoffset_   dataoffset
// ctor for input:
public blob agent agent
java io inputstream binarystream
int length
super agent
binarystream_   binarystream
datatype_    binary_stream
sqllength_   length
lengthobtained_   true
/**
* create a new <code>blob</code> from a stream with unknown length.
* <em>important:</em> this constructor is a temporary solution for
* implementing lengthless overloads in the jdbc4 api. before a proper
* solution can be implemented, we need to enable streaming without having
* to know the stream length in the drda protocol. see jira derby-1471 and
* derby-1417 for more details.
*
* <em>shortcomings:</em> this constructor will cause the <em>whole stream
* to be materialized</em> to determine its length. if the stream is big
* enough, the client will fail with an outofmemoryerror. since this is a
* temporary solution, state checking is not added to all methods as it
* would clutter up the class severely. after using the constructor, the
* <code>length</code>-method must be called, which will materialize the
* stream and determine the length. <em>do not pass a blob object created
* with this constructor to the user!</em>
*
* @param agent
* @param binarystream the stream to get data from
*/
public blob agent agent  java io inputstream binarystream
super agent
binarystream_   binarystream
datatype_    binary_stream
sqllength_    1
lengthobtained_   false
// ---------------------------jdbc 2------------------------------------------
public long length   throws sqlexception
//call checkvalidity to exit by throwing a sqlexception if
//the blob object has been freed by calling free() on it
checkvalidity
try
synchronized  agent_ connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this
// code to handle the lengthless constructor.
if   lengthobtained_
binarystream_   super materializestream binarystream_
long retval   super sqllength
if  agent_ loggingenabled
agent_ logwriter_ traceexit this     retval
return retval
catch   sqlexception se
throw se getsqlexception
/**
* returns as an array of bytes part or all of the <code>blob</code>
* value that this <code>blob</code> object designates.  the byte
* array contains up to <code>length</code> consecutive bytes
* starting at position <code>pos</code>.
* the starting position must be between 1 and the length
* of the blob plus 1. this allows for zero-length blob values, from
* which only zero-length byte arrays can be returned.
* if a larger length is requested than there are bytes available,
* characters from the start position to the end of the blob are returned.
* @param pos the ordinal position of the first byte in the
* <code>blob</code> value to be extracted; the first byte is at
* position 1
* @param length is the number of consecutive bytes to be copied
* @return a byte array containing up to <code>length</code>
* consecutive bytes from the <code>blob</code> value designated
* by this <code>blob</code> object, starting with the
* byte at position <code>startpos</code>.
* @exception sqlexception if there is an error accessing the
* <code>blob</code>
* note: if the starting position is the length of the blob plus 1,
* zero bytess are returned regardless of the length requested.
*/
public byte getbytes long pos  int length  throws sqlexception
//call checkvalidity to exit by throwing a sqlexception if
//the blob object has been freed by calling free() on it
checkvalidity
try
synchronized  agent_ connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this      int  pos  length
if  pos <  0
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate blob_bad_position
new long pos
if  pos > this length     1
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate blob_position_too_large
new long pos
if  length < 0
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate blob_nonpositive_length
new integer length
byte retval   getbytesx pos  length
if  agent_ loggingenabled
agent_ logwriter_ traceexit this     retval
return retval
catch   sqlexception se
throw se getsqlexception
private byte getbytesx long pos  int length  throws sqlexception
checkforclosedconnection
long actuallength
try
// actual length is the lesser of the number of bytes requested
// and the number of bytes available from pos to the end
actuallength   math min this length     pos   1   long  length
catch   sqlexception se
throw new sqlexception se
byte retval   new byte
system arraycopy binarystring_   int  pos   dataoffset_   1  retval  0   int  actuallength
return retval
public java io inputstream getbinarystream   throws sqlexception
//call checkvalidity to exit by throwing a sqlexception if
//the blob object has been freed by calling free() on it
checkvalidity
try
synchronized  agent_ connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this
java io inputstream retval   getbinarystreamx
if  agent_ loggingenabled
agent_ logwriter_ traceexit this     retval
return retval
catch   sqlexception se
throw se getsqlexception
private java io inputstream getbinarystreamx   throws sqlexception
checkforclosedconnection
if  isbinarystream          this lob is used for input
return binarystream_
return new java io bytearrayinputstream binarystring_  dataoffset_  binarystring_ length   dataoffset_
public long position byte pattern  long start  throws sqlexception
//call checkvalidity to exit by throwing a sqlexception if
//the blob object has been freed by calling free() on it
checkvalidity
try
synchronized  agent_ connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     pattern  start
if  pattern    null
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate blob_null_pattern_or_search_str
if  start < 1
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate blob_bad_position
new long start
long pos   positionx pattern  start
if  agent_ loggingenabled
agent_ logwriter_ traceexit this     pos
return pos
catch   sqlexception se
throw se getsqlexception
private long positionx byte pattern  long start  throws sqlexception
checkforclosedconnection
return binarystringposition pattern  start
public long position java sql blob pattern  long start  throws sqlexception
//call checkvalidity to exit by throwing a sqlexception if
//the blob object has been freed by calling free() on it
checkvalidity
try
synchronized  agent_ connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     pattern  start
if  pattern    null
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate blob_null_pattern_or_search_str
if  start < 1
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate blob_bad_position
new long start
long pos   positionx pattern  start
if  agent_ loggingenabled
agent_ logwriter_ traceexit this     pos
return pos
catch   sqlexception se
throw se getsqlexception
private long positionx java sql blob pattern  long start  throws sqlexception
checkforclosedconnection
try
return binarystringposition pattern getbytes 1l   int  pattern length     start
catch  java sql sqlexception e
throw new sqlexception e
// -------------------------- jdbc 3.0 -----------------------------------
public int setbytes long pos  byte bytes  throws sqlexception
//call checkvalidity to exit by throwing a sqlexception if
//the blob object has been freed by calling free() on it
checkvalidity
try
synchronized  agent_ connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this      int  pos  bytes
int length   setbytesx pos  bytes  0  bytes length
if  agent_ loggingenabled
agent_ logwriter_ traceexit this     length
return length
catch   sqlexception se
throw se getsqlexception
public int setbytes long pos  byte bytes  int offset  int len  throws sqlexception
//call checkvalidity to exit by throwing a sqlexception if
//the blob object has been freed by calling free() on it
checkvalidity
try
synchronized  agent_ connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this      int  pos  bytes  offset  len
int length   setbytesx pos  bytes  offset  len
if  agent_ loggingenabled
agent_ logwriter_ traceexit this     length
return length
catch   sqlexception se
throw se getsqlexception
public int setbytesx long pos  byte bytes  int offset  int len  throws sqlexception
int length   0
/*
check if position is less than 0 and if true
raise an exception
*/
if  pos <  0l
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate blob_bad_position   new long pos
/*
currently only 2g-1 bytes can be inserted in a
single blob column hence check corresponding position
value
*/
if  pos  >  integer max_value
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate blob_position_too_large   new long pos
if  pos   1 > binarystring_ length   dataoffset_
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate blob_position_too_large   new long pos
if   offset < 0     offset > bytes length
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate blob_invalid_offset
new integer offset
if   len < 0
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate blob_nonpositive_length
new integer length
if  len    0
return 0
length   math min  bytes length   offset   len
if   binarystring_ length   dataoffset_    int  pos   1  < length
byte newbuf   new byte
system arraycopy binarystring_  0  newbuf  0  binarystring_ length
binarystring_   newbuf
system arraycopy bytes  offset  binarystring_   int  pos   dataoffset_   1  length
binarystream_   new java io bytearrayinputstream binarystring_
sqllength_   binarystring_ length   dataoffset_
return length
public java io outputstream setbinarystream long pos  throws sqlexception
//call checkvalidity to exit by throwing a sqlexception if
//the blob object has been freed by calling free() on it
checkvalidity
synchronized  agent_ connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this      int  pos
bloboutputstream outstream   new bloboutputstream this  pos
if  agent_ loggingenabled
agent_ logwriter_ traceexit this     outstream
return outstream
public void truncate long len  throws sqlexception
//call checkvalidity to exit by throwing a sqlexception if
//the blob object has been freed by calling free() on it
checkvalidity
try
synchronized  agent_ connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this      int  len
if  len < 0    len > this length
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate invalid_api_parameter
new long len
if  len    this length
return
long newlength    int  len   dataoffset_
byte newbuf   new byte
system arraycopy binarystring_  0  newbuf  0   int  newlength
binarystring_   newbuf
binarystream_   new java io bytearrayinputstream binarystring_
sqllength_   binarystring_ length   dataoffset_
catch   sqlexception se
throw se getsqlexception
// -------------------------- jdbc 4.0 -----------------------------------
/**
* this method frees the <code>blob</code> object and releases the resources that
* it holds. the object is invalid once the <code>free</code>
* method is called. if <code>free</code> is called multiple times, the subsequent
* calls to <code>free</code> are treated as a no-op.
*
* @throws sqlexception if an error occurs releasing
* the blob's resources
*/
public void free
throws sqlexception
//calling free() on a already freed object is treated as a no-op
if   isvalid  return
//now that free has been called the blob object is no longer
//valid
isvalid   false
if isbinarystream
try
binarystream_ close
catch ioexception ioe
throw new sqlexception null  new clientmessageid sqlstate io_error_upon_lob_free   getsqlexception
else
binarystring_   null
public inputstream getbinarystream long pos  long length
throws sqlexception
throw sqlexceptionfactory notimplemented
//------------------ material layer event callback methods -------------------
//---------------------------- helper methods --------------------------------
public boolean isbinarystring
return   datatype_   binary_string     binary_string
public boolean isbinarystream
return   datatype_   binary_stream     binary_stream
public byte getbinarystring
return binarystring_
protected long binarystringposition byte pattern  long start
// perform a local byte string search, starting at start
// check that the range of comparison is valid
int index    int  start   dataoffset_   1     api start begins at 1
while  index   pattern length <  binarystring_ length
if  issubstring pattern  index
return  long   index   dataoffset_   1      readjust for api indexing
index
return  1l     not found
// precondition: binarystring_ is long enough for the comparison
protected boolean issubstring byte pattern  int index
for  int i   0  i < pattern length  i    index
if  pattern    binarystring_
return false
return true
/*
* checks is isvalid is true. if it is not true throws
* a sqlexception stating that a method has been called on
* an invalid lob object
*
* throws sqlexception if isvalid is not true.
*/
private void checkvalidity   throws sqlexception
if  isvalid
throw new sqlexception null new clientmessageid sqlstate lob_object_invalid
getsqlexception