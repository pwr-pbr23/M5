/*
derby - class org.apache.derby.impl.drda.drdaresultset
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl drda
import java sql resultset
import java sql resultsetmetadata
import java sql sqlexception
import java sql types
import java util arraylist
import org apache derby iapi jdbc engineresultset
/**
drdaresultset holds result set information
*/
class drdaresultset
//note!
//
// since drdaresultsets are reused, all variables should be set
// to their default values in reset().
// resultset states are not_opened and suspended
protected static final int not_opened   1
protected static final int suspended   2
public static final int qryclsimp_default   codepoint qryclsimp_no
boolean explicitlyclosed   false
int state
protected boolean hasdata   true
protected int rslens 				   result length for each column
private int rsdrdatypes 			   drda types of the result set columns
private int rsprecision             result precision for decimal types
private int rsscale                  result sale for decimal types
protected int  outovr_drdatype 	   output override drda type and length
protected int withholdcursor 			   hold cursor after commit attribute
protected int scrolltype   resultset type_forward_only 			   sensitive or insensitive scroll attribute
protected int concurtype 			   concurency type
protected long rowcount 			   number of rows we have processed
private resultset rs                  current resultset
protected int blksize 				   query block size
protected int maxblkext 			   maximum number of extra blocks
protected int outovropt 			   output override option
protected int qryclsimp 			   implicit query close setting
protected boolean qryrelscr 		   query relative scrolling
protected long qryrownbr 			   query row number
protected boolean qryrfrtbl 		   query refresh answer set table
protected int qryscrorn 			   query scroll orientation
protected boolean qryrowsns 		   query row sensitivity
protected boolean qryblkrst 		   query block reset
protected boolean qryrtndta 		   query returns data
protected int qryrowset 			   query row set
private   int qryprctyp 			   protocol type
private   boolean gotprctyp 		   save the result  for performance
protected int rtnextdta 			   return of extdta option
protected int nbrrow 			      number of fetch or insert rows
protected byte  rslsetflg 		   result set flags
private arraylist  extdtaobjects      arraylist of blobs and clobs
// return values to
// send with extdta objects.
private arraylist rsextpositions
protected consistencytoken pkgcnstkn     unique consistency token for resultset 0
// splitqrydta is normally null. if it is non-null, it means that
// the last qrydta response which was sent for this statement was
// split according to the lmtblkprc protocol, and this array contains
// the bytes that didn't fit. these bytes should be the first bytes
// emitted in the next qrydta response to a cntqry request.
private byte splitqrydta
drdaresultset
state   not_opened
// initialize qryclsimp to no. only result sets requested by
// an opnqry command should be implicitly closed. opnqry will
// set qryclsimp later in setopnqryoptions().
qryclsimp   codepoint qryclsimp_no
/**
* set result set and initialize type array.
*
* @param value
*
*/
protected void setresultset resultset value  throws sqlexception
int numcols
rs   value
gotprctyp   false
if  value    null
numcols  rs getmetadata   getcolumncount
rsdrdatypes   new int
explicitlyclosed   false
/**
* set consistency token for this resultset
*
*/
protected void setpkgcnstkn consistencytoken pkgcnstkn
this pkgcnstkn   pkgcnstkn
/**
*
*  @return the underlying java.sql.resultset
*/
protected resultset getresultset
return rs
public void setsplitqrydta byte data
splitqrydta   data
public bytegetsplitqrydta
return splitqrydta
/**
* set resultset drda datatypes
* @param value drdatypes for columns.
**/
protected void setrsdrdatypes int  value
rsdrdatypes   value
/**
*@return resultset drda datatypes
**/
protected int getrsdrdatypes
// use the given override if it is present
if  outovr_drdatype    null
return outovr_drdatype
return rsdrdatypes
/**
* set resultset/out parameter precision
*
* @param index - starting with 1
* @param precision
*/
protected void setrsprecision int index  int precision
if  rsprecision    null
rsprecision   new int
rsprecision   precision
/**
* get resultset /out paramter precision
* @param index -starting with 1
* @return precision of column
*/
protected int getrsprecision int index
if  rsprecision    null
return 0
return rsprecision
/**
* set resultset/out parameter scale
*
* @param index - starting with 1
* @param scale
*/
protected void setrsscale int index  int scale
if  rsscale    null
rsscale   new int
rsscale   scale
/**
* get resultset /out paramter scale
* @param index -starting with 1
* @return scale of column
*/
protected int  getrsscale int index
if  rsscale    null
return 0
return rsscale
/**
* set resultset/out parameter drdatype
*
* @param index - starting with 1
* @param type
*/
protected  void setrsdrdatype int index  int type
rsdrdatypes    type
/**
* get  resultset/out parameter drdatype
*
* @param index - starting with 1
* @return  drda type of column
*/
protected int getrsdrdatype int index
return rsdrdatypes
/**
* set resultset drda len
*
* @param index - starting with 1
* @param value
*/
protected  void setrslen int index  int value
if  rslens    null
rslens   new int
rslens   value
/**
* get  resultset  drdalen
* @param index - starting with 1
* @return  length of column value
*/
protected int getrslen int index
return rslens
/**
* add extdtaobject
* @param o - object to  add
*/
protected void  addextdtaobject  object o  int jdbcindex
if  extdtaobjects    null
extdtaobjects   new java util arraylist
extdtaobjects add  o
if  rsextpositions    null
rsextpositions   new java util arraylist
// need to record the 0 based position so subtract 1
rsextpositions add  new integer jdbcindex  1
/**
* clear externalized lob objects in current result set
*/
protected void  clearextdtaobjects
if  extdtaobjects    null
extdtaobjects clear
if  rsextpositions    null
rsextpositions clear
/*
* is lob object nullable
* @param index - offset starting with 0
* @return true if object is nullable
*/
protected boolean isextdtavaluenullable int index
if   rsextpositions    null
rsextpositions get index     null
return false
int colnum     integer  rsextpositions get index   intvalue
if  fdocaconstants isnullable  getrsdrdatypes
return true
else
return false
/**
* get the extdata objects
*
*  @return arraylist with extdta
*/
protected arraylist getextdtaobjects
return extdtaobjects
/**
* set the extdata objects
*/
protected void  setextdtaobjects arraylist a
extdtaobjects  a
/**
* this method closes the jdbc objects and frees up all references held by
* this object.
*
* @throws sqlexception
*/
protected void close    throws sqlexception
if  rs    null
rs close
rs   null
outovr_drdatype   null
rslens   null
rsdrdatypes   null
rsprecision   null
rsscale   null
extdtaobjects   null
splitqrydta   null
rsextpositions   null
/**
* this method resets the state of this drdaresultset object so that it can
* be re-used. this method should reset all variables of this class.
*
*/
protected void reset
explicitlyclosed   false
state   not_opened
hasdata   true
rslens   null
rsdrdatypes   null
rsprecision   null
rsscale   null
outovr_drdatype   null
withholdcursor   0
scrolltype   resultset type_forward_only
concurtype   0
rowcount   0
rs   null
blksize   0
maxblkext   0
outovropt   0
qryclsimp   codepoint qryclsimp_no
qryrelscr   false
qryrownbr   0
qryrfrtbl   false
qryscrorn   0
qryrowsns   false
qryblkrst   false
qryrtndta   false
qryrowset   0
qryprctyp   0
gotprctyp   false
rtnextdta   0
nbrrow   0
rslsetflg   null
extdtaobjects   null
rsextpositions   null
pkgcnstkn   null
splitqrydta   null
/**
* explicitly close the result set by clsqry
* needed to check for double close.
*/
protected void clsqry
explicitlyclosed   true
/*
* @return whether clsqry has been called on the
*         current result set.
*/
protected boolean wasexplicitlyclosed
return explicitlyclosed
/****
* check to see if the result set for this statement
* has at least one column that is blob/clob.
* @return true if the result has at least one blob/clob
*  column; false otherwise.
****/
protected boolean haslobcolumns   throws sqlexception
resultsetmetadata rsmd   rs getmetadata
int ncols   rsmd getcolumncount
for  int i   1  i <  ncols  i
int type   rsmd getcolumntype i
if  type    types blob    type    types clob
return true
return false
/**
* get the cursor name for the resultset
*/
public string getresultsetcursorname   throws sqlexception
if  rs    null
return rs getcursorname
else
return null
protected int getqryprctyp
throws sqlexception
if   gotprctyp    qryprctyp    codepoint lmtblkprc
gotprctyp   true
if  rs    null      engineresultset rs  isforupdate
/* for now we are not supporting lob under lmtblkprc.  drda spec only
* disallows lob under lmtblkprc if outovr is also for any cntqry reply.
* to support lob, qrydta protocols for lob will need to be changed.
*/
haslobcolumns
qryprctyp   codepoint fixrowprc
return qryprctyp
protected void setqryprctyp int qryprctyp
this qryprctyp   qryprctyp
/**
* is resultset closed
* @return whether the resultset  is closed
*/
protected boolean isclosed
return  state    not_opened
/**
* set state to suspended (result set is opened)
*/
protected void suspend
state   suspended
protected string todebugstring string indent
string s   indent
s    indent       getstatestring state
s    indent       pkgcnstkn
s    indent
string cursorname   null
try
if  rs    null
cursorname   rs getcursorname
catch  sqlexception se
cursorname
s    indent   cursorname
return s
private string getstatestring  int i
switch  i
case not_opened
return
case suspended
return
default
return
/**
* sets the opnqryoptions. for more information on the meaning of these
* values consult the drda technical standard document.
*
* @param blksize query block size
* @param qryblkctl use to set the query protocol type
* @param maxblkext maximum number of extra blocks
* @param outovropt output override option
* @param qryrowset query row set
* @param qryclsimpl implicit query close setting
*/
protected void setopnqryoptions int blksize  int qryblkctl
int maxblkext  int outovropt int qryrowset int qryclsimpl
this blksize   blksize
setqryprctyp qryblkctl
this maxblkext   maxblkext
this outovropt   outovropt
this qryrowset   qryrowset
this qryclsimp    qryclsimpl    codepoint qryclsimp_server_choice
? drdaresultset qryclsimp_default   qryclsimpl
// assume that we are returning data until a cntqry command
// tells us otherwise. (derby-822)
qryrtndta   true
// for scrollable result sets, we don't know the fetch
// orientation until we get a cntqry command. set orientation
// and row number to make pre-fetching possible. (derby-822)
qryscrorn   codepoint qryscrrel
qryrownbr   1