/*
derby - class org.apache.derby.impl.store.access.btree.index.b2istaticcompiledinfo
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl store access btree index
import org apache derby iapi services io arrayinputstream
import org apache derby iapi services monitor monitor
import org apache derby iapi services io formatidutil
import org apache derby iapi services io storedformatids
import org apache derby iapi error standardexception
import org apache derby iapi store access conglomerate conglomerate
import org apache derby iapi store access staticcompiledopenconglominfo
import org apache derby iapi store access transactioncontroller
import org apache derby iapi types datavaluedescriptor
import java io ioexception
import java io objectinput
import java io objectoutput
/**
this class implements the static compiled information relevant to a btree
secondary index.  it is what is returned by
b2i.getstaticcompiledopenconglominfo().
<p>
currently the only interesting information stored is conglomerate for this
index and the conglomerate for the base table of this conglomerate.
**/
public class b2istaticcompiledinfo implements staticcompiledopenconglominfo
/**************************************************************************
* fields of the class
**************************************************************************
*/
/**
* conglomerate data structure for this index.
**/
b2i b2i
/**
* conglomerate data structure for this base table of this index.
**/
staticcompiledopenconglominfo   base_table_static_info
/**************************************************************************
* constructors for this class:
**************************************************************************
*/
/**
* empty arg constructor used by the monitor to create object to read into.
**/
public b2istaticcompiledinfo
/**
* constructor used to build class from scratch.
* <p>
* @param b2i    the btree conglomerate that we are compiling.
**/
b2istaticcompiledinfo
transactioncontroller   tc
b2i                     b2i
throws standardexception
this b2i   b2i
this base_table_static_info
tc getstaticcompiledconglominfo b2i baseconglomerateid
/**************************************************************************
* private/protected methods of this class:
**************************************************************************
*/
/**************************************************************************
* public methods of this class:
**************************************************************************
*/
/**************************************************************************
* public methods of staticcompiledopenconglominfo interface:
**************************************************************************
*/
/**
* return the "conglomerate".
* <p>
* for secondaryindex compiled info return the secondary index conglomerate.
* <p>
*
* @return the secondary index conglomerate object.
**/
public datavaluedescriptor getconglom
return b2i
/**************************************************************************
* public methods of storable interface (via staticcompiledopenconglominfo):
*     this class is responsible for re/storing its own state.
**************************************************************************
*/
/**
return whether the value is null or not.
the containerid being zero is what determines nullness;  subclasses
are not expected to override this method.
@see org.apache.derby.iapi.services.io.storable#isnull
**/
public boolean isnull
return b2i    null
/**
restore the in-memory representation to the null value.
the containerid being zero is what determines nullness;  subclasses
are not expected to override this method.
@see org.apache.derby.iapi.services.io.storable#restoretonull
**/
public void restoretonull
b2i   null
/**
* return my format identifier.
*
* @see org.apache.derby.iapi.services.io.typedformat#gettypeformatid
**/
public int gettypeformatid
return storedformatids access_b2i_static_compiled_v1_id
/**
restore the in-memory representation from the stream.
@exception classnotfoundexception thrown if the stored representation is
serialized and a class named in the stream could not be found.
@exception ioexception thrown by readobject()
@see java.io.externalizable#readexternal
*/
public void readexternal objectinput in
throws ioexception  classnotfoundexception
// read in the b2i
b2i   new b2i
b2i readexternal in
// read in base table conglomerate
base_table_static_info
staticcompiledopenconglominfo  in readobject
public void readexternalfromarray arrayinputstream in
throws ioexception  classnotfoundexception
// read in the b2i
b2i   new b2i
b2i readexternal in
// read in base table conglomerate
base_table_static_info
staticcompiledopenconglominfo  in readobject
/**
store the stored representation of the column value in the stream.
it might be easier to simply store the properties - which would certainly
make upgrading easier.
@exception ioexception thrown by writeobject()
*/
public void writeexternal objectoutput out
throws ioexception
// first write the b2i object (the type we "know")
b2i writeexternal out
// write conglomerate object as an object
out writeobject base_table_static_info