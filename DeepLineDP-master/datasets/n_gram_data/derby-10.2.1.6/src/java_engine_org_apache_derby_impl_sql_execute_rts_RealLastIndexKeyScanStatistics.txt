/*
derby - class org.apache.derby.impl.sql.execute.rts.reallastindexkeyscanstatistics
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl sql execute rts
import org apache derby iapi services io storedformatids
import org apache derby iapi services i18n messageservice
import org apache derby iapi reference sqlstate
import org apache derby iapi services io formatablehashtable
import org apache derby iapi services io formatableproperties
import java io objectoutput
import java io objectinput
import java io ioexception
import java util enumeration
import java util properties
/**
resultsetstatistics implemenation for reallastindexkeyscanresultset.
@author jamie
*/
public class reallastindexkeyscanstatistics
extends realnoputresultsetstatistics
/* leave these fields public for object inspectors */
public string isolationlevel
public string tablename
public string indexname
public string lockstring
// constructors
/**
*
*
*/
public	reallastindexkeyscanstatistics int numopens
long constructortime
long opentime
long nexttime
long closetime
int resultsetnumber
string tablename
string indexname
string isolationlevel
string lockstring
double optimizerestimatedrowcount
double optimizerestimatedcost
super
numopens
1
0
constructortime
opentime
nexttime
closetime
resultsetnumber
optimizerestimatedrowcount
optimizerestimatedcost
this tablename   tablename
this indexname   indexname
this isolationlevel   isolationlevel
this lockstring   lockstring
// resultsetstatistics methods
/**
* return the statement execution plan as a string.
*
* @param depth	indentation level.
*
* @return string	the statement executio plan as a string.
*/
public string getstatementexecutionplantext int depth
string header
string isolationstring   null
initformatinfo depth
header
indent   messageservice gettextmessage
sqlstate rts_lkis_rs
tablename
indexname
header   header   messageservice gettextmessage
sqlstate rts_locking_optimizer
isolationlevel
lockstring
header   header
return
header
indent   messageservice gettextmessage sqlstate rts_num_opens
numopens
indent   messageservice gettextmessage sqlstate rts_rows_seen
numopens
dumptimestats indent  subindent
rowsseen > 0
?
subindent   messageservice gettextmessage
sqlstate rts_next_time
nexttime   numopens
// resolve - estimated row count and cost will eventually
// be displayed for all nodes
dumpestimatedcosts subindent
/**
* return information on the scan nodes from the statement execution
* plan as a string.
*
* @param depth	indentation level.
* @param tablename if not null then print information for this table only
*
* @return string	the information on the scan nodes from the
*					statement execution plan as a string.
*/
public string getscanstatisticstext string tablename  int depth
if   tablename    null      tablename equals this tablename
return getstatementexecutionplantext depth
else
return  string
// class implementation
public string tostring
return getstatementexecutionplantext 0
/**
* format for display, a name for this node.
*
*/
public string getnodename
return messageservice gettextmessage
indexname    null ?
sqlstate rts_table_scan
sqlstate rts_index_scan
/**
* if this node is on a database item (like a table or an index), then provide a
* string that describes the on item.
*
*/
public string getnodeon
if  indexname    null
return messageservice gettextmessage sqlstate rts_on  tablename
else
return messageservice gettextmessage
sqlstate rts_on_using
tablename
indexname