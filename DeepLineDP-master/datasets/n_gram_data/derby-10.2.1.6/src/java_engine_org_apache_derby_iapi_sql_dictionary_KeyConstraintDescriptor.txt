/*
derby - class org.apache.derby.iapi.sql.dictionary.keyconstraintdescriptor
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi sql dictionary
import org apache derby iapi error standardexception
import org apache derby catalog uuid
import org apache derby iapi services sanity sanitymanager
/**
* this interface is used to get information from a keyconstraintdescriptor.
* a keyconstraintdescriptor can represent a primary/unique/foreign key
* constraint.
*
* @version 0.1
* @author jerry brenner
*/
public abstract class keyconstraintdescriptor extends constraintdescriptor
/** interface to this class:
<ol>
<li>public uuid getindexid();</li>
<li>public conglomeratedescriptor getindexconglomeratedescriptor(datadictionary dd)</li>
throws standardexception;</li>
<li>public string getindexuuidstring();</li>
<li>public int[]	getkeycolumns();</li>
</ol>
*/
// implementation
uuid			indexid
private	conglomeratedescriptor	indexconglom
/**
* constructor for a keyconstraintdescriptor
*
* @param datadictionary		the data dictionary that this descriptor lives in
* @param table		the descriptor of the table the constraint is on
* @param constraintname	the name of the constraint.
* @param deferrable		if the constraint can be deferred.
* @param initiallydeferred if the constraint starts life deferred.
* @param referencedcolumns columns that the constraint references
* @param constraintid		uuid of constraint
* @param indexid			the uuid for the backing index
* @param schemadesc		the schemadescriptor for the constraint
* @param isenabled			is this constraint enabled
*/
keyconstraintdescriptor
datadictionary datadictionary
tabledescriptor table
string constraintname
boolean deferrable
boolean initiallydeferred
int referencedcolumns
uuid constraintid
uuid indexid
schemadescriptor schemadesc
boolean isenabled
super datadictionary  table  constraintname  deferrable
initiallydeferred  referencedcolumns
constraintid  schemadesc  isenabled
this indexid   indexid
/**
* gets the uuid of the backing index for the constraint.
*
* @return	the uuid of the backing index for the constraint.
*/
public uuid getindexid
return indexid
/**
* gets the index conglomerate descriptor
*
* @return the index conglomerate descriptor
*
* @exception standardexception on error
*/
public conglomeratedescriptor getindexconglomeratedescriptor datadictionary dd
throws standardexception
if  indexconglom    null
indexconglom   gettabledescriptor   getconglomeratedescriptor indexid
return indexconglom
/**
* gets the uuid string of the backing index for the constraint.
*
* @return	the uuid string of the backing index for the constraint.
*/
public string getindexuuidstring
return indexid tostring
/**
* does this constraint have a backing index?
*
* @return boolean	whether or not there is a backing index for this constraint.
*/
public boolean hasbackingindex
return true
/**
* get the uuid of the backing index, if one exists.
*
* @return the uuid of the backing index, if one exists, else null.
*/
public uuid getconglomerateid
return indexid
/**
* convert the subconstraintdescriptor to a string.
*
* @return	a string representation of this subconstraintdescriptor
*/
public string	tostring
if  sanitymanager debug
return     indexid
super tostring
else
return