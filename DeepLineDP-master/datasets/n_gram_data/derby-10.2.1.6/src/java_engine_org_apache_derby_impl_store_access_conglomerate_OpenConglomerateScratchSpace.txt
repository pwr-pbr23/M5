/*
derby - class org.apache.derby.impl.store.access.conglomerate.openconglomeratescratchspace
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl store access conglomerate
import org apache derby iapi error standardexception
import org apache derby iapi store access dynamiccompiledopenconglominfo
import org apache derby iapi store access rowutil
import org apache derby iapi types datavaluedescriptor
import org apache derby iapi services io formatablebitset
import org apache derby iapi services loader instancegetter
/**
a utility class to store and use temporary scratch space associated with
a conglomerate.
**/
public class openconglomeratescratchspace
implements dynamiccompiledopenconglominfo
/**************************************************************************
* fields of the class
**************************************************************************
*/
/**
* a template of info about the classes in the returned row.
* <p>
* this template is allocated on demand, and is used to efficiently
* create new rows for export from this class.  this variable is for
* use by get_row_for_export().
**/
private formatablebitset     row_for_export_column_list
private instancegetter row_for_export_class_template
/**
* a scratch template used for searching and qualifying rows in the
* conglomerate.  this is a full template, independent of the formatablebitset
* used for access.
**/
private datavaluedescriptor scratch_template
/**
* a scratch row used for qualifying rows in the
* conglomerate.  this is a row which matches the formatablebitset of rows being
* returned.
**/
private datavaluedescriptor scratch_row
/**
* a complete array of format id's for this conglomerate.
**/
private int    format_ids
/**************************************************************************
* constructors for this class:
**************************************************************************
*/
public openconglomeratescratchspace
int  format_ids
this format_ids   format_ids
/**************************************************************************
* private/protected methods of this class:
**************************************************************************
*/
/**************************************************************************
* public methods of this class:
**************************************************************************
*/
/**
* return an empty template (possibly partial) row to be given back to
* a client.
* <p>
* the main use of this is for fetchset() and fetchnextgroup() which
* allocate rows and then give them back entirely to the caller.
* <p>
*
* @return the row to use.
*
* @exception  standardexception  standard exception policy.
**/
public datavaluedescriptor get_row_for_export
throws standardexception
// create a partial row class template template from the initial scan
// parameters.
if  row_for_export_class_template    null
row_for_export_class_template
rowutil newclassinfotemplate
row_for_export_column_list  format_ids
// allocate a new row based on the class template.
return
rowutil newrowfromclassinfotemplate row_for_export_class_template
/**
* return an empty template (possibly partial) row to be used and
* reused internally for processing.
* <p>
* the main use of this is for qualifying rows where a row has not been
* provided by the client.  this routine cache's a single row for reuse
* by the caller, if the caller needs 2 concurrent scratch rows, some other
* mechanism must be used.
* <p>
*
* @return the row to use.
*
* @exception  standardexception  standard exception policy.
**/
public datavaluedescriptor get_scratch_row
throws standardexception
// create a partial row class template template from the initial scan
// parameters.
if  scratch_row    null
scratch_row   get_row_for_export
// allocate a new row based on the class template.
return scratch_row
/**
* return a complete empty row.
* <p>
* the main use of this is for searching a tree where a complete copy of
* the row is needed for searching.
* <p>
*
* @return the template to use.
*
* @exception  standardexception  standard exception policy.
**/
public datavaluedescriptor get_template
throws standardexception
// create a partial row class template from the initial scan parameters.
if  scratch_template    null
scratch_template   templaterow newrow  formatablebitset  null  format_ids
return scratch_template
/**
* initialize scratch space for reuse by possibly different template.
* <p>
* some data is only valid per statement.
**/
public void init
formatablebitset export_column_list
row_for_export_class_template   null
row_for_export_column_list      null