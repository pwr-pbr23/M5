/*
derby - class org.apache.derby.iapi.db.propertyinfo
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi db
import org apache derby iapi error standardexception
import org apache derby iapi error publicapi
import org apache derby iapi sql activation
import org apache derby iapi sql conn authorizer
import org apache derby iapi sql conn languageconnectioncontext
import org apache derby iapi sql conn connectionutil
import org apache derby iapi sql dictionary conglomeratedescriptor
import org apache derby iapi sql dictionary datadictionarycontext
import org apache derby iapi sql dictionary datadictionary
import org apache derby iapi sql dictionary schemadescriptor
import org apache derby iapi sql dictionary tabledescriptor
import org apache derby iapi store access conglomeratecontroller
import org apache derby iapi store access transactioncontroller
import org apache derby iapi services property propertyutil
import org apache derby iapi reference sqlstate
import java util properties
import java sql sqlexception
/**
*	propertyinfo is a class with static methods that retrieve the properties
* associated with a table or index and set and retrieve properties associated
* with a database.
*
* <p>
this class can only be used within an sql-j statement, a java procedure or a server side java method.
<p>this class can be accessed using the class alias <code> propertyinfo </code> in sql-j statements.
*/
public final class propertyinfo
/**
* get the properties associated with a given table.
*
* @param schemaname    the name of the schema that the table is in.
* @param tablename     the name of the table.
*
* @return properties   the properties associated with the specified table.
*                      (an empty properties is returned if the table does not exist.)
* @exception sqlexception on error
*/
public static properties gettableproperties string schemaname  string tablename
throws sqlexception
return	propertyinfo getconglomerateproperties  schemaname  tablename  false
/**
* get the properties associated with a given index.
*
* @param schemaname    the name of the schema that the index is in.
* @param indexname     the name of the index.
*
* @return properties   the properties associated with the specified index.
*                      (an empty properties is returned if the index does not exist.)
* @exception sqlexception on error
*/
public static properties getindexproperties string schemaname  string indexname
throws sqlexception
return	propertyinfo getconglomerateproperties  schemaname  indexname  true
/**
fetch the value of a property of the database on the current connection.
@param key the property key
@return the value of the property or null if the property is not set.
@exception sqlexception on error
*/
public static string getdatabaseproperty string key  throws sqlexception
languageconnectioncontext lcc   connectionutil getcurrentlcc
try
return propertyutil getdatabaseproperty lcc gettransactionexecute    key
catch  standardexception se
throw publicapi wrapstandardexception se
/**
set or delete the value of a property of the database on the current connection.
@param key the property key
@param value the new value, if null the property is deleted.
@exception sqlexception on error
*/
public static void setdatabaseproperty string key  string value  throws sqlexception
languageconnectioncontext lcc   connectionutil getcurrentlcc
try
authorizer a   lcc getauthorizer
a authorize  activation  null  authorizer property_write_op
// get the current transaction controller
transactioncontroller tc   lcc gettransactionexecute
tc setproperty key  value  false
catch  standardexception se
throw publicapi wrapstandardexception se
/**
internal use only.
*/
private	propertyinfo
//////////////////////////////////////////////////////////////////////////////
//
//	private methods
//
/////////////////////////////////////////////////////////////////////////////
/**
* get the properties associated with a given conglomerate
*
* @param schemaname    	the name of the schema that the conglomerate is in.
* @param conglomeratename  the name of the conglomerate.
*
* @return properties   the properties associated with the specified conglomerate.
*                      (an empty properties is returned if the conglomerate does not exist.)
* @exception sqlexception on error
*/
private static properties	getconglomerateproperties  string schemaname  string conglomeratename  boolean isindex
throws sqlexception
long					  conglomeratenumber
// find the language context.
languageconnectioncontext lcc   connectionutil getcurrentlcc
// get the current transaction controller
transactioncontroller tc   lcc gettransactionexecute
try
// find the datadictionary
datadictionary dd   lcc getdatadictionary
// get the schemadescriptor
schemadescriptor sd   dd getschemadescriptor schemaname  tc  true
if    isindex
// get the tabledescriptor for the table
tabledescriptor td   dd gettabledescriptor conglomeratename  sd
// return an empty properties if table does not exist or if it is for a view.
if   td    null     td gettabletype      tabledescriptor view_type    return new properties
conglomeratenumber   td getheapconglomerateid
else
// get the conglomeratedescriptor for the index
conglomeratedescriptor cd   dd getconglomeratedescriptor conglomeratename  sd  false
// return an empty properties if index does not exist
if  cd    null    return new properties
conglomeratenumber   cd getconglomeratenumber
conglomeratecontroller cc   tc openconglomerate
conglomeratenumber
false
0
transactioncontroller mode_record
transactioncontroller isolation_serializable
properties properties   tc getusercreateconglomproplist
cc gettableproperties  properties
cc close
return properties
catch  standardexception se
throw publicapi wrapstandardexception se