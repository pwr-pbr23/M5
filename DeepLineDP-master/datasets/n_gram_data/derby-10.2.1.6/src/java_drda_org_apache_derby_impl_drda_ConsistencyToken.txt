/*
* derby - class org.apache.derby.impl.drda.consistencytoken
*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*   http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or
* implied. see the license for the specific language governing
* permissions and limitations under the license.
*
*/
package org apache derby impl drda
/**
* class which represents an rdb package consistency token.
*/
final class consistencytoken
/** byte array representation of the token. */
private final byte bytes
/** cached hash code. */
private int hash   0
/**
* create a new <code>consistencytoken</code> instance.
*
* @param bytes byte array representing the token
*/
consistencytoken byte bytes
this bytes   bytes
/**
* get the byte array representation of the consistency token.
*
* @return a <code>byte[]</code> value
*/
public byte getbytes
return bytes
/**
* check whether this object is equal to another object.
*
* @param o another object
* @return true if the objects are equal
*/
public boolean equals object o
if    o instanceof consistencytoken   return false
consistencytoken ct    consistencytoken  o
int len   bytes length
if  len    ct bytes length  return false
for  int i   0  i < len    i
if  bytes    ct bytes  return false
return true
/**
* calculate the hash code.
*
* @return hash code
*/
public int hashcode
// consistencytoken objects might be kept for a long time and are
// frequently used as keys in hash tables. therefore, it is a good idea
// to cache their hash codes.
int h   hash
if  h    0
// the hash code has not been calculated yet (or perhaps the hash
// code actually is 0). calculate a new one and cache it. no
// synchronization is needed since reads and writes of 32-bit
// primitive values are guaranteed to be atomic. see the
// "double-checked locking is broken" declaration for details.
int len   bytes length
for  int i   0  i < len    i
h ^  bytes
hash   h
return h
/**
* return a string representation of the consistency token by
* converting it to a <code>biginteger</code> value. (for
* debugging only.)
*
* @return a <code>string</code> value
*/
public string tostring
return new java math biginteger bytes  tostring