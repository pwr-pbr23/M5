/*
derby - class org.apache.derby.impl.load.controlinfo
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl load
import java io printstream
import java io inputstream
import java io inputstreamreader
import java util date
import java util properties
//read the control file properties. if the passed parameter for control file
//name is null, assigns default values to the properties. also, if the control
//file has message property in it, it sends the errors to that file by
//redirecting system err to that message file
class controlinfo
static final string escape
static final string default_escape
static final string quote
static final string default_quote
static final string commit_count
static final string default_commit_count
static final string start_row
static final string default_start_row
static final string stop_row
static final string default_stop_row
static final string field_separator
static final string default_field_separator
static final string record_separator
static final string default_record_separator   system getproperty
static final string column_definition
static final string default_column_definition
static final string null_string
static final string default_null_string
static final string format
static final string default_format
static final string db2_delimited_format         beetle 5007
static final string field_start_delimiter
static final string default_field_start_delimiter    "
static final string field_end_delimiter
static final string default_field_end_delimiter    "
static final string column_widths
static final string message_file
static final string default_version
static final string version
static final string newline
static final string comma
static final string space
static final string tab
static final string cr
static final string lf
static final string crlf
static final string lfcr
static final string ff
static final string empty_line
static final string semicolon
static final string data_codeset
static final string has_delimeter_at_end
static final string internal_none
static final string internal_true
static final string internal_false
static final string internal_tab
static final string internal_space
static final string internal_cr
static final string internal_lf
static final string internal_crlf
static final string internal_lfcr
static final string internal_comma
static final string internal_semicolon
static final string internal_newline
static final string internal_ff
static final string internal_empty_line
private properties currentproperties
public controlinfo   throws exception
getcurrentproperties
//the field and record separators can't be subset of each other
if  getfieldseparator   indexof getrecordseparator        1
throw loaderror fieldandrecordseparatorssubset
//read the value of a given property
string getpropertyvalue string akey  throws exception
return getcurrentproperties   getproperty akey
//following are the default values for few of the properties
private void loaddefaultvalues
currentproperties   new properties
currentproperties put field_separator  default_field_separator
currentproperties put record_separator  default_record_separator
currentproperties put column_definition  default_column_definition
currentproperties put null_string  default_null_string
currentproperties put format  default_format
currentproperties put field_start_delimiter  default_field_start_delimiter
currentproperties put field_end_delimiter  default_field_end_delimiter
currentproperties put version  default_version
currentproperties put has_delimeter_at_end  internal_false
//get control file version.
string getcurrentversion   throws exception
return default_version
//2 possible formats: fixed and delimited. default is ascii_delimited
string getformat   throws exception
return getcurrentproperties   getproperty format
//read the column widths property which is comma delimited.
//in case of fixed format, if column widths are missing, it will
//throw an exception
int getcolumnwidths
return null
//default is default_field_separator
string getfieldseparator   throws exception
string fieldseparator   getcurrentproperties   getproperty field_separator
fieldseparator   mapfromuserfriendlyfielddelimiters fieldseparator
return fieldseparator
string getfieldstartdelimiter   throws exception
return getcurrentproperties   getproperty field_start_delimiter
string getfieldenddelimiter   throws exception
return getcurrentproperties   getproperty field_end_delimiter
string getrecordseparator   throws exception
string recordseparator   getcurrentproperties   getproperty record_separator
recordseparator   mapfromuserfriendlyrecorddelimiters recordseparator
return recordseparator
//to be used to cover cases where column delimeters are placed at the end of
//each column resulting in an extra delimeter at the end of a row.
boolean gethasdelimiteratend   throws exception
string hasdelimeteratend   getcurrentproperties   getproperty has_delimeter_at_end
return hasdelimeteratend equals internal_true
string gethasdelimeteratendstring   throws exception
string hasdelimeteratend   getcurrentproperties   getproperty has_delimeter_at_end
return hasdelimeteratend
//if at the time of export, the column has null into it, we will spit
//nullstring in the output file.
//if at the time of import, we see nullstring for a column, we will
//send null as part of resultset interface
string getnullstring   throws exception
return getcurrentproperties   getproperty null_string
//for fixed format, get column definitions
string getcolumndefinition   throws exception
return getcurrentproperties   getproperty column_definition
private string mapfromuserfriendlyfielddelimiters string adelimiter
if  adelimiter touppercase java util locale english  equals internal_tab touppercase java util locale english
return tab
if  adelimiter touppercase java util locale english  equals internal_space touppercase java util locale english
return space
if  adelimiter touppercase java util locale english  equals internal_cr touppercase java util locale english
return cr
if  adelimiter touppercase java util locale english  equals internal_lf touppercase java util locale english
return lf
if  adelimiter touppercase java util locale english  equals internal_crlf touppercase java util locale english
return crlf
if  adelimiter touppercase java util locale english  equals internal_lfcr touppercase java util locale english
return lfcr
if  adelimiter touppercase java util locale english  equals internal_comma touppercase java util locale english
return comma
if  adelimiter touppercase java util locale english  equals internal_semicolon touppercase java util locale english
return semicolon
adelimiter   commontofieldandrecorddelimiters adelimiter
adelimiter   commontofieldandrecorddelimiters adelimiter
adelimiter   commontofieldandrecorddelimiters adelimiter
adelimiter   commontofieldandrecorddelimiters adelimiter
return adelimiter
//vjbms: when user types \n in vjbms, it comes as 2 characters \ and n
//and not just one character '\n' that's the reason for the following
//check. i look for "\n" and replace it with '\n'. same thing for \t
// \r and \f
private string commontofieldandrecorddelimiters string adelimiter
string specialchars  char replacementchar
string beforespecialchars
string afterspecialchars
int specialcharsposition
while  adelimiter indexof specialchars      1
specialcharsposition   adelimiter indexof specialchars
beforespecialchars   adelimiter substring 0 specialcharsposition
afterspecialchars   adelimiter substring specialcharsposition 2
adelimiter   beforespecialchars   replacementchar   afterspecialchars
return adelimiter
private string mapfromuserfriendlyrecorddelimiters string adelimiter
if  adelimiter equals
adelimiter   internal_newline
if  adelimiter touppercase java util locale english  equals internal_newline touppercase java util locale english
return newline
if  adelimiter touppercase java util locale english  equals internal_cr touppercase java util locale english
return cr
if  adelimiter touppercase java util locale english  equals internal_lf touppercase java util locale english
return lf
if  adelimiter touppercase java util locale english  equals internal_crlf touppercase java util locale english
return crlf
if  adelimiter touppercase java util locale english  equals internal_lfcr touppercase java util locale english
return lfcr
if  adelimiter touppercase java util locale english  equals internal_ff touppercase java util locale english
return ff
if  adelimiter touppercase java util locale english  equals internal_empty_line touppercase java util locale english
return empty_line
adelimiter   commontofieldandrecorddelimiters adelimiter
adelimiter   commontofieldandrecorddelimiters adelimiter
adelimiter   commontofieldandrecorddelimiters adelimiter
adelimiter   commontofieldandrecorddelimiters adelimiter
return adelimiter
/**
*
* @return code set, can return null for use the default code set.
* @throws exception
*/
string getdatacodeset   throws exception
return getcurrentproperties   getproperty data_codeset
/**read the control file properties into a local variable which is used later on
*in case there is no control file, read the default values for these properties
* @exception	exception if there is an error
*/
properties getcurrentproperties    throws exception
if  currentproperties    null
loaddefaultvalues
return currentproperties
// following set routines can be used to change the default properties
public void setcolumnwidths string columnwidths  throws exception
if columnwidths  null
currentproperties setproperty column_widths  columnwidths
public void setfieldseparator string fieldseperator  throws exception
if fieldseperator  null
currentproperties setproperty field_separator  fieldseperator
public void setfieldstartdelimiter string fsdl  throws exception
if fsdl  null
currentproperties setproperty field_start_delimiter  fsdl
public void setfieldenddelimiter string fedl  throws exception
if fedl  null
currentproperties setproperty field_end_delimiter  fedl
public void  setrecordseparator string recordseperator  throws exception
if recordseperator  null
currentproperties setproperty record_separator  recordseperator
public void sethasdelimiteratend string hasdelimeteratend  throws exception
if hasdelimeteratend  null
currentproperties setproperty has_delimeter_at_end  hasdelimeteratend
public void setnullstring string nullstring  throws exception
if nullstring  null
currentproperties setproperty null_string  nullstring
//for fixed format, set column definitions
public void setcolumndefinition string columndefinition  throws exception
if columndefinition  null
currentproperties setproperty column_definition  columndefinition
public void setdatacodeset string codeset  throws exception
if codeset  null
currentproperties setproperty data_codeset  codeset
public void setcharacterdelimiter string chardelimiter  throws exception
if chardelimiter   null
setfieldstartdelimiter chardelimiter
setfieldenddelimiter chardelimiter
public void setcontrolproperties string characterdelimiter
string columndelimiter
string codeset  throws exception
setcharacterdelimiter characterdelimiter
setfieldseparator columndelimiter
setdatacodeset codeset
//check whether the delimiters are valid ones
validatedelimiters
private void validatedelimiters   throws exception
char coldel    getfieldseparator    charat 0
char chardel    getfieldstartdelimiter    charat 0
//the period was specified as a character string delimiter.
if chardel
throw loaderror periodaschardelimiternotallowed
//a delimiter is not valid or is used more than once.
if coldel    chardel
coldel
character isspacechar coldel
character isspacechar chardel
throw loaderror delimitersarenotmutuallyexclusive