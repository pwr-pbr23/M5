/*
derby - class org.apache.derby.impl.drda.testproto
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl drda
import java io bufferedreader
import java io fileinputstream
import java io filenotfoundexception
import java io ioexception
import java io inputstream
import java io inputstreamreader
import java io outputstream
import java io streamtokenizer
import java io unsupportedencodingexception
import java net socket
import java net unknownhostexception
import java util enumeration
import java util hashtable
import java util locale
import java util vector
/**
this class is used to test error conditions in the protocol.
the protocol to send to the net server is contained in a file encoded
as calls to routines in ddmreader and ddmwriter.
additional commands have been added for testing purposes.
to add tests, modify the file protocol.tests.
tests can also be done as separate files and given as an argument to
this class.
*/
public class testproto
private static final codepointnametable codepointnametable   new codepointnametable
private static final hashtable codepointvaluetable   new hashtable
private static final hashtable commandtable   new hashtable
private	static final ccsidmanager ccsidmanager   new ebcdicccsidmanager
//commands
private static final int create_dss_request   1
private static final int create_dss_object   2
private static final int end_dss   3
private static final int end_ddm_and_dss   4
private static final int start_ddm   5
private static final int end_ddm   6
private static final int write_byte   7
private static final int write_network_short   8
private static final int write_network_int   9
private static final int write_bytes   10
private static final int write_codepoint_4bytes   11
private static final int write_scalar_1byte   12
private static final int write_scalar_2bytes   13
private static final int write_scalar_bytes   14
private static final int write_scalar_header   15
private static final int write_scalar_string   16
private static final int write_scalar_padded_string   17
private static final int write_scalar_padded_bytes   18
private static final int write_short   19
private static final int write_int   20
private static final int write_long   21
private static final int write_float   22
private static final int write_double   23
private static final int read_reply_dss   24
private static final int read_length_and_codepoint   25
private static final int read_codepoint   26
private static final int mark_collection   27
private static final int get_codepoint   28
private static final int read_byte   29
private static final int read_network_short   30
private static final int read_short   31
private static final int read_network_int   32
private static final int read_int   33
private static final int read_long   34
private static final int read_boolean   35
private static final int read_string   36
private static final int read_bytes   37
private static final int flush   38
private static final int display   39
private static final int checkerror   40
private static final int reset   41
private static final int create_dss_reply   42
private static final int skip_dss   43
private static final int read_scalar_2bytes   44
private static final int read_scalar_1byte   45
private static final int end_test   46
private static final int skip_ddm   47
private static final int include   48
private static final int skip_bytes   49
private static final int write_padded_string   50
private static final int write_string   51
private static final int write_encoded_string   52
private static final int write_encoded_ldstring   53
private static final int check_sqlcard   54
private static final int more_data   55
private static final int complete_test   56
private static final int read_secmec_secchkcd   57
private static final string multival_start
private static final string multival_sep
private static final string multival_end
// initialize hash tables
static
init
private socket monitorsocket   null
private inputstream monitoris   null
private outputstream monitoros   null
private ddmwriter writer   new ddmwriter ccsidmanager  null  null
private ddmreader reader
private boolean failed   false
private streamtokenizer tkn
private string current_filename
// constructor
public testproto string filename
current_filename   filename
getconnection
try
reader   new ddmreader ccsidmanager  monitoris
processfile filename
catch  exception e
int line   0
if  tkn    null
line   tkn lineno
system err println     line       current_filename
e printstacktrace
finally
closeconnection
/**
* process include file
*
* @exception 	ioexception, drdaprotocolexception 	error reading file or protocol
*/
private void processincludefile
throws ioexception  drdaprotocolexception
string filename   getstring
streamtokenizer savetkn   tkn
processfile filename
tkn   savetkn
/**
* process a command file
*
* @param  filename
* @exception 	ioexception, drdaprotocolexception 	error reading file or protocol
*/
private void processfile string filename
throws ioexception  drdaprotocolexception
string prev_filename   current_filename
current_filename   filename
string hostname gethostname
bufferedreader fr
try
fr   new bufferedreader new inputstreamreader new fileinputstream filename
catch  filenotfoundexception fnfe
// if useprocess=false & we're running in a suite,
// the location is different, try it
string userdir    system getproperty
string sep    system getproperty
fr   new bufferedreader  new inputstreamreader new fileinputstream userdir   sep       sep   filename
tkn   new streamtokenizer fr
int val
while    val   tkn nexttoken       streamtokenizer tt_eof
switch val
case streamtokenizer tt_number
break
case streamtokenizer tt_word
processcommand
break
case streamtokenizer tt_eol
break
current_filename   prev_filename
/**
* set up a connection to the network server
*/
private void getconnection
string hostname gethostname
try
monitorsocket   new socket hostname 1527
catch  unknownhostexception e
system err println     hostname
system exit 1
catch  ioexception e
system err println     hostname
system exit 1
try
monitoris   monitorsocket getinputstream
monitoros   monitorsocket getoutputstream
catch  ioexception e
system err println     hostname
system exit 1
/**
* close connection to the network server
*/
private void closeconnection
try
monitoris close
monitoros close
monitorsocket close
catch  exception e       ignore exceptions when closing the connection
/**
* reset connection for another test
*/
private void reset
closeconnection
getconnection
reader initialize monitoris
writer reset null
/**
* finish by cleaning up the last connection
*/
private void completetest
closeconnection
/**
* initialize hashtable for commands and set up a table to translate from
* the codepoint name to the codepoint value
*/
private static void init
commandtable put    new integer create_dss_request
commandtable put    new integer create_dss_object
commandtable put    new integer create_dss_reply
commandtable put    new integer end_dss
commandtable put    new integer end_dss
commandtable put    new integer end_ddm_and_dss
commandtable put    new integer start_ddm
commandtable put    new integer end_ddm
commandtable put    new integer write_byte
commandtable put    new integer write_network_short
commandtable put    new integer write_network_int
commandtable put    new integer write_bytes
commandtable put    new integer write_codepoint_4bytes
commandtable put    new integer write_scalar_1byte
commandtable put    new integer write_scalar_2bytes
commandtable put    new integer write_scalar_bytes
commandtable put    new integer write_scalar_header
commandtable put    new integer write_scalar_string
commandtable put    new integer write_scalar_padded_string
commandtable put    new integer write_scalar_padded_bytes
commandtable put    new integer write_short
commandtable put    new integer write_int
commandtable put    new integer write_long
commandtable put    new integer write_float
commandtable put    new integer write_double
commandtable put    new integer read_reply_dss
commandtable put    new integer read_length_and_codepoint
commandtable put    new integer read_codepoint
commandtable put    new integer mark_collection
commandtable put    new integer get_codepoint
commandtable put    new integer read_byte
commandtable put    new integer read_network_short
commandtable put    new integer read_short
commandtable put    new integer read_int
commandtable put    new integer read_long
commandtable put    new integer read_boolean
commandtable put    new integer read_string
commandtable put    new integer read_bytes
commandtable put    new integer flush
commandtable put    new integer display
commandtable put    new integer checkerror
commandtable put    new integer reset
commandtable put    new integer skip_dss
commandtable put    new integer skip_ddm
commandtable put    new integer read_scalar_2bytes
commandtable put    new integer read_scalar_1byte
commandtable put    new integer end_test
commandtable put    new integer include
commandtable put    new integer skip_bytes
commandtable put    new integer write_padded_string
commandtable put    new integer write_string
commandtable put    new integer write_encoded_string
commandtable put    new integer write_encoded_ldstring
commandtable put    new integer check_sqlcard
commandtable put    new integer more_data
commandtable put    new integer complete_test
commandtable put    new integer read_secmec_secchkcd
integer key
for  enumeration e   codepointnametable keys    e hasmoreelements
key    integer e nextelement
codepointvaluetable put codepointnametable get key   key
/**
* process a command
*/
private void processcommand
throws ioexception  drdaprotocolexception
integer icmd     integer commandtable get tkn sval tolowercase locale english
if  icmd    null
system err println     tkn sval
tkn lineno
system exit 1
int cmd    icmd intvalue
int codepoint
int val
int reqval
string str
switch  cmd
case include
processincludefile
break
case create_dss_request
writer createdssrequest
break
case create_dss_object
writer createdssobject
break
case create_dss_reply
writer createdssreply
break
case end_dss
tkn nexttoken
tkn pushback
if   tkn sval    null     tkn sval startswith
// use specified chaining.
writer enddss  getbytes
else
// use default chaining
writer enddss
break
case end_ddm
writer endddm
break
case end_ddm_and_dss
writer endddmanddss
break
case start_ddm
writer startddm getcp
break
case write_scalar_string
writer writescalarstring getcp    getstring
break
case write_scalar_2bytes
writer writescalar2bytes getcp   getintorcp
break
case write_scalar_1byte
writer writescalar1byte getcp   getint
break
case write_scalar_bytes
writer writescalarbytes getcp   getbytes
break
case write_scalar_padded_bytes
writer writescalarpaddedbytes getcp    getbytes    getint
ccsidmanager space
break
case write_byte
writer writebyte getint
break
case write_bytes
writer writebytes getbytes
break
case write_short
writer writeshort getint
break
case write_int
writer writeint getint
break
case write_codepoint_4bytes
writer writecodepoint4bytes getcp    getint
break
case write_string
str   getstring
writer writebytes getebcdic str
break
case write_encoded_string
writeencodedstring getstring    getstring
break
case write_encoded_ldstring
writeencodedldstring getstring    getstring    getint
break
case write_padded_string
str   getstring
writer writebytes getebcdic str
int reqlen   getint
int strlen   str length
if  strlen < reqlen
writer padbytes ccsidmanager space  reqlen strlen
break
case read_reply_dss
reader readreplydss
break
case skip_dss
skipdss
break
case skip_ddm
skipddm
break
case more_data
boolean expbool
str   getstring
if  str equalsignorecase
expbool   true
else
expbool   false
if  reader moredata      expbool    false
fail
if   reader moredata      expbool    true
fail
break
case read_length_and_codepoint
readlengthandcodepoint
break
case read_scalar_2bytes
readlengthandcodepoint
val   reader readnetworkshort
checkintorcp val
break
case read_scalar_1byte
readlengthandcodepoint
val   reader readbyte
checkintorcp val
break
case read_secmec_secchkcd
readsecmecandsecchkcd
break
case read_bytes
byte bytearray   reader readbytes
byte reqarray   getbytes
if  bytearray length    reqarray length
fail
for  int i   0  i < bytearray length  i
if  bytearray    reqarray
fail
break
case read_network_short
val   reader readnetworkshort
checkintorcp val
break
case flush
writer finalizechain reader getcurrchainstate    monitoros
writer reset null
break
case display
system out println getstring
break
case checkerror
checkerror
break
case check_sqlcard
checksqlcard getint    getstring
break
case complete_test
completetest
break
case end_test
// print that we passed the test if we haven't failed
if  failed    false
system out println
failed   false
reset
break
case reset
reset
break
case skip_bytes
reader skipbytes
break
default
system out println     tkn lineno
// skip remainder of line
while  tkn nexttoken       streamtokenizer tt_eol
/**
* skip a dss communication
*/
private void skipdss   throws drdaprotocolexception
reader readreplydss
reader skipdss
/**
* skip the a ddm communication
*/
private void skipddm   throws drdaprotocolexception
reader readlengthandcodepoint
reader skipbytes
/**
* read an int from the command file
* negative numbers are preceded by "-"
*/
private int getint   throws ioexception
int mult   1
int val   tkn nexttoken
if  tkn sval    null    tkn sval equals
mult    1
val   tkn nexttoken
if  val    streamtokenizer tt_number
if  tkn sval    null
system err println     tkn lineno
system exit 1
string str   tkn sval tolowercase locale english
if   str startswith
system err println     tkn sval       tkn lineno
system exit 1
else
return converthex str
return  new double tkn nval  intvalue     mult
/**
* convert a token in hex format to int from the command file
*/
private int converthex string str  throws ioexception
int retval   0
int len   str length
if   len % 2     1    len > 10
system err println     len
tkn lineno
system exit 1
for  int i   2  i < len  i
retval   retval << 4
retval    byte valueof str substring i  i 1   16  bytevalue
return retval
/**
* checks if value matches next int or cp.
* handles multiple legal values in protocol test file
* format for multiple values
* multivalstart 10 sep 32 sep 40 multivalend
**/
private boolean checkintorcp int val   throws ioexception
boolean rval   false
int tkntype    tkn nexttoken
string reqval
if  tkntype    streamtokenizer tt_word    tkn sval trim   equals multival_start
do
int nextval   getintorcp
reqval   reqval   nextval
// system.out.println("checking multival (" + val + "==" + nextval + ")");
rval   rval     val    nextval
tkn nexttoken
while tkn sval trim   equals multival_sep
if     tkn sval trim   equals multival_end
fail     multival_end
tkn sval
else
tkn pushback
int nextval   getintorcp
reqval       nextval
// system.out.println("checking single value (" + val + "==" + nextval + ")");
rval    val    nextval
if  rval    false
fail     val       reqval
return rval
/**
* read an int or codepoint - codepoint is given as a string
*/
private int getintorcp   throws ioexception
int val   tkn nexttoken
if  val    streamtokenizer tt_number
return new double tkn nval  intvalue
else if  val    streamtokenizer tt_word
return decodecp tkn sval
else
fail     tkn sval
tkn lineno
system exit 1
return 0
/**
* read an array of bytes from the command file
* a byte string can start with 0x in which case the bytes are interpreted
* in hex format or it can just be a string, in which case each char is
* interpreted as  2 byte unicode
*
* @return byte array
*/
private byte   getbytes   throws ioexception
byte retval   null
int val   tkn nexttoken
if  tkn sval    null
system err println     tkn lineno
system exit 1
string str   tkn sval tolowercase locale english
if   str startswith
//just convert the string to ebcdic byte array
return ccsidmanager convertfromucs2 str
else
int len   str length
if   len % 2     1
system err println     len
tkn lineno
system exit 1
retval   new byte
int j   0
for  int i   2  i < len  i  2  j
retval    byte  byte valueof str substring i  i 1   16  bytevalue   << 4
retval    byte valueof str substring i 1  i 2   16  bytevalue
return retval
/**
* read a string from the command file
*
* @return string found in file
* @exception 	ioexception 	error reading file
*/
private string getstring   throws ioexception
int val   tkn nexttoken
if  val    streamtokenizer tt_number
system err println     tkn nval       tkn lineno
system exit 1
return tkn sval
/**
* read the string version of a codepoint
*
* @exception 	ioexception 	error reading file
*/
private int getcp   throws ioexception
string strval   getstring
return decodecp strval
/**
* translate a string codepoint such as accsec to the equivalent int value
*
* @param strval	string codepoint
* @return 		integer value of codepoint
*/
private int decodecp string strval
integer cp    integer codepointvaluetable get strval
if  cp    null
system err println    strval
tkn lineno
exception e   new exception
e printstacktrace
system exit 1
return cp intvalue
/**
* print failure message and skip to the next test
*
* @exception 	ioexception 	error reading file
*/
private void fail string msg  throws ioexception
system out println     msg       tkn lineno
// skip remainder of the test look for endtest or end of file
int val   tkn nexttoken
while  val    streamtokenizer tt_eof
if  val    streamtokenizer tt_word    tkn sval tolowercase locale english  equals
break
val   tkn nexttoken
failed   true
// get ready for next test
reset
// print out stack trace so we know where the failure occurred
exception e   new exception
e printstacktrace
/**
* check error sent back to application requester
*
* @exception 	ioexception, drdaprotocolexception 	error reading file or protocol
*/
private void checkerror   throws ioexception  drdaprotocolexception
int svrcod   0
int invalidcodepoint   0
int prccnvcd   0
int synerrcd   0
int codepoint
int reqval
vector manager   new vector    managerlevel   new vector
reader readreplydss
int error   reader readlengthandcodepoint
int reqcp   getcp
if  error    reqcp
cperror error  reqcp
return
while  reader moredssdata
codepoint   reader readlengthandcodepoint
switch  codepoint
case codepoint svrcod
svrcod   reader readnetworkshort
break
case codepoint codpnt
invalidcodepoint   reader readnetworkshort
break
case codepoint prccnvcd
prccnvcd   reader readbyte
break
case codepoint synerrcd
synerrcd   reader readbyte
break
case codepoint mgrlvlls
while  reader moreddmdata
manager addelement new integer reader readnetworkshort
managerlevel addelement new integer reader readnetworkshort
break
default
//ignore codepoints we don't understand
reader skipbytes
reqval   getint
if  svrcod    reqval
fail     integer tohexstring svrcod
integer tohexstring reqval
return
if  error    codepoint prccnvrm
reqval   getint
if  prccnvcd    reqval
fail     integer tohexstring prccnvcd
integer tohexstring reqval
return
if  error    codepoint syntaxrm
reqval   getint
if  synerrcd    reqval
fail     integer tohexstring synerrcd
integer tohexstring reqval
return
reqval   getintorcp
if  invalidcodepoint    reqval
cperror invalidcodepoint  reqval
return
if  error    codepoint mgrlvlrm
int mgr  mgrlevel
for  int i   0  i < manager size    i
reqval   getcp
mgr     integer  manager elementat i    intvalue
if  mgr    reqval
cperror mgr  reqval
return
mgrlevel     integer  managerlevel elementat i    intvalue
reqval   getint
if  mgrlevel    reqval
fail     integer tohexstring mgrlevel
integer tohexstring reqval
return
/**
* read length and codepoint and check against required values
*
* @exception 	ioexception, drdaprotocolexception 	error reading file or protocol
*/
private void readlengthandcodepoint   throws ioexception  drdaprotocolexception
int codepoint   reader readlengthandcodepoint
int reqcp   getcp
if  codepoint    reqcp
cperror codepoint  reqcp
/**
* handle the case of testing the reading of secmec and secchkcd,
* where on an invalid secmec value for accsec, the server can send
* valid supported secmec values. one of the valid supported value can be
* eusridpwd (secmec value of 9) depending on if the server jvm
* can actually support it or not.
* @exception   ioexception, drdaprotocolexception  error reading file or protocol
*/
private void readsecmecandsecchkcd   throws ioexception  drdaprotocolexception
int codepoint
boolean notdone   true
int val    1
do
codepoint   reader readlengthandcodepoint
switch codepoint
case codepoint secmec
system out print
val   reader readnetworkshort
system out print val
break
case codepoint secchkcd
system out print
val   reader readbyte
system out println val
notdone   false
break
default
notdone false
while notdone
/**
* codepoint error
*
* @exception ioexception error reading command file
*/
private void cperror int cp  int reqcp  throws ioexception
string cpname   codepointnametable lookup cp
string reqcpname   codepointnametable lookup reqcp
fail     integer tohexstring cp
cpname
integer tohexstring reqcp
reqcpname
/**
* translate a string to ebcdic for use in the protocol
*
* @param str	string to transform
* @return ebcdic string
*/
private byte getebcdic string str
byte  buf   new byte
ccsidmanager convertfromucs2 str  buf  0
return buf
/**
* write an encoded string
*
* @param str	string to write
* @param encoding	java encoding to use
* @exception ioexception
*/
private void writeencodedstring string str  string encoding
throws ioexception
try
byte  buf   str getbytes encoding
writer writebytes buf
catch  unsupportedencodingexception e
fail     encoding
/**
* write length and encoded string
*
* @param str string to write
* @param encoding	java encoding to use
* @param len			size of length value (2 or 4 bytes)
* @exception ioexception
*/
private void writeencodedldstring string str  string encoding  int len
throws ioexception
try
byte  buf   str getbytes encoding
if  len    2
writer writeshort buf length
else
writer writeint buf length
writer writebytes buf
catch  unsupportedencodingexception e
fail     encoding
/**
* check the value of sqlcard
*
* @param sqlcode	sqlcode value
* @param sqlstate	sqlstate value
* @exception ioexception, drdaprotocolexception
*/
private void checksqlcard int sqlcode  string sqlstate
throws ioexception  drdaprotocolexception
reader readreplydss
int codepoint   reader readlengthandcodepoint
if  codepoint    codepoint sqlcard
fail    integer tohexstring codepoint
return
int nullind   reader readbyte
//cheating here and using readnetworkint since the byteorder is the same
int code   reader readnetworkint
if  code    sqlcode
fail     sqlcode      integer tohexstring code
return
string state   reader readstring 5
if   state equals sqlstate
fail     sqlstate      state
return
// skip the rest of the sqlcard
reader skipbytes
private static string gethostname
string hostname    system getproperty
if  hostname    null
hostname
return hostname