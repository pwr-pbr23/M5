/*
derby - class org.apache.derby.impl.sql.catalog.sysroutinepermsrowfactory
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl sql catalog
import org apache derby iapi sql dictionary systemcolumn
import org apache derby iapi sql dictionary tupledescriptor
import org apache derby iapi sql dictionary routinepermsdescriptor
import org apache derby iapi sql dictionary datadictionary
import org apache derby iapi sql dictionary permissionsdescriptor
import org apache derby iapi error standardexception
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi sql execute execrow
import org apache derby iapi sql execute execindexrow
import org apache derby iapi sql execute executionfactory
import org apache derby iapi types datavaluefactory
import org apache derby iapi types rowlocation
import org apache derby iapi types datavaluedescriptor
import org apache derby iapi types stringdatavalue
import org apache derby iapi services uuid uuidfactory
import org apache derby catalog uuid
/**
* factory for creating a sysroutineperms row.
*
*/
public class sysroutinepermsrowfactory extends permissionscatalogrowfactory
static final string tablename_string
// column numbers for the sysroutineperms table. 1 based
private static final int routinepermsid_col_num   1
private static final int grantee_col_num   2
private static final int grantor_col_num   3
private static final int aliasid_col_num   4
private static final int grantoption_col_num   5
private static final int column_count   5
static final int grantee_alias_grantor_index_num   0
public static final int routinepermsid_index_num   1
public static final int aliasid_index_num   2
private static final int indexcolumnpositions
grantee_col_num  aliasid_col_num  grantor_col_num
routinepermsid_col_num
aliasid_col_num
private static final boolean indexuniqueness     true  true  false
private	static final string uuids
catalog uuid
heap uuid
index1
index2
index3
private systemcolumn columnlist
public sysroutinepermsrowfactory uuidfactory uuidf  executionfactory ef  datavaluefactory dvf
boolean convertidtolower
super uuidf ef dvf convertidtolower
initinfo  column_count  tablename_string  indexcolumnpositions  indexuniqueness  uuids
public execrow makerow tupledescriptor td  tupledescriptor parent  throws standardexception
uuid oid
string routinepermid   null
datavaluedescriptor grantee   null
datavaluedescriptor grantor   null
string routineid   null
if  td    null
grantee   getnullauthorizationid
grantor   getnullauthorizationid
else
routinepermsdescriptor rpd    routinepermsdescriptor  td
oid   rpd getuuid
if   oid    null
oid   getuuidfactory   createuuid
rpd setuuid oid
routinepermid   oid tostring
grantee   getauthorizationid  rpd getgrantee
grantor   getauthorizationid  rpd getgrantor
if  rpd getroutineuuid      null
routineid   rpd getroutineuuid   tostring
execrow row   getexecutionfactory   getvaluerow  column_count
row setcolumn  routinepermsid_col_num  dvf getchardatavalue routinepermid
row setcolumn  grantee_col_num  grantee
row setcolumn  grantor_col_num  grantor
row setcolumn  aliasid_col_num  dvf getchardatavalue  routineid
row setcolumn  grantoption_col_num  dvf getchardatavalue
return row
end of makerow
/** builds a tuple descriptor from a row */
public tupledescriptor builddescriptor execrow row
tupledescriptor parenttuple
datadictionary	datadictionary
throws standardexception
if  sanitymanager debug
sanitymanager assert  row ncolumns      column_count
string routinepermsuuidstring   row getcolumn routinepermsid_col_num  getstring
uuid routinepermsuuid   getuuidfactory   recreateuuid routinepermsuuidstring
string aliasuuidstring   row getcolumn  aliasid_col_num  getstring
uuid aliasuuid   getuuidfactory   recreateuuid aliasuuidstring
routinepermsdescriptor routinepermsdesc
new routinepermsdescriptor  datadictionary
getauthorizationid  row  grantee_col_num
getauthorizationid  row  grantor_col_num
aliasuuid
routinepermsdesc setuuid routinepermsuuid
return routinepermsdesc
end of builddescriptor
/** builds a column list for the catalog */
public systemcolumn buildcolumnlist
if  columnlist    null
columnlist   new systemcolumn
columnlist
new systemcolumnimpl  convertidcase
routinepermsid_col_num
0     precision
0     scale
false     nullability
true
36
columnlist
new systemcolumnimpl  convertidcase
grantee_col_num
0     precision
0     scale
false     nullability
authorization_id_type
authorization_id_is_builtin_type
authorization_id_length
columnlist
new systemcolumnimpl  convertidcase
grantor_col_num
0     precision
0     scale
false     nullability
authorization_id_type
authorization_id_is_builtin_type
authorization_id_length
columnlist
new systemcolumnimpl  convertidcase
aliasid_col_num
0     precision
0     scale
false     nullability
datatype
true     built in type
36
columnlist
new systemcolumnimpl  convertidcase
grantoption_col_num
0     precision
0     scale
false     nullability
datatype
true     built in type
1
return columnlist
end of buildcolumnlist
/**
* builds an index key row given for a given index number.
*/
public execindexrow buildindexkeyrow  int indexnumber
permissionsdescriptor perm
throws standardexception
execindexrow row   null
switch  indexnumber
case grantee_alias_grantor_index_num
// resolve we do not support the for grant option, so rougine permission rows are unique on the
// grantee and alias uuid columns. the grantor column will always have the name of the owner of the
// routine. so the index key, used for searching the index, only has grantee and alias uuid columns.
// it does not have a grantor column.
//
// if we support for grant option then there may be multiple routine permissions rows for a
// (grantee, aliasid) combination. since there is only one kind of routine permission (execute)
// execute permission checking need not worry about multiple routine permission rows for a
// (grantee, aliasid) combination, it only cares whether there are any. grant and revoke must
// look through multiple rows to see if the current user has grant/revoke permission and use
// the full key in checking for the pre-existence of the permission being granted or revoked.
row   getexecutionfactory   getindexablerow  2
row setcolumn 1  getauthorizationid  perm getgrantee
string routineuuidstr     routinepermsdescriptor  perm  getroutineuuid   tostring
row setcolumn 2  getdatavaluefactory   getchardatavalue  routineuuidstr
break
case routinepermsid_index_num
row   getexecutionfactory   getindexablerow  1
string routinepermsuuidstr   perm getobjectid   tostring
row setcolumn 1  getdatavaluefactory   getchardatavalue  routinepermsuuidstr
break
case aliasid_index_num
row   getexecutionfactory   getindexablerow  1
routineuuidstr     routinepermsdescriptor  perm  getroutineuuid   tostring
row setcolumn 1  getdatavaluefactory   getchardatavalue  routineuuidstr
break
return row
end of buildindexkeyrow
public int getprimarykeyindexnumber
return grantee_alias_grantor_index_num
/**
* or a set of permissions in with a row from this catalog table
*
* @param row an existing row
* @param perm a permission descriptor of the appropriate class for this permissionscatalogrowfactory class.
* @param colschanged an array with one element for each column in row. it is updated to
*                    indicate which columns in row were changed
*
* @return the number of columns that were changed.
*
* @exception standardexception standard error policy
*/
public int orpermissions  execrow row  permissionsdescriptor perm  boolean colschanged
throws standardexception
// there is only one kind of routine permission: execute or not. so the row would not exist
// unless execute permission is there.
// this changes if we implement with grant option.
return 0
/**
* remove a set of permissions from a row from this catalog table
*
* @param row an existing row
* @param perm a permission descriptor of the appropriate class for this permissionscatalogrowfactory class.
* @param colschanged an array with one element for each column in row. it is updated to
*                    indicate which columns in row were changed
*
* @return -1 if there are no permissions left in the row, otherwise the number of columns that were changed.
*
* @exception standardexception standard error policy
*/
public int removepermissions  execrow row  permissionsdescriptor perm  boolean colschanged
throws standardexception
return  1     there is only one kind of routine privilege so delete the whole row
end of removepermissions
/**
* @see permissionscatalogrowfactory#setuuidofthepasseddescriptor
*/
public void setuuidofthepasseddescriptor execrow row  permissionsdescriptor perm
throws standardexception
datavaluedescriptor existingpermdvd   row getcolumn routinepermsid_col_num
perm setuuid getuuidfactory   recreateuuid existingpermdvd getstring