/*
derby - class org.apache.derby.impl.tools.ij.main
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl tools ij
import org apache derby tools jdbcdisplayutil
import org apache derby iapi tools i18n localizedresource
import org apache derby iapi tools i18n localizedinput
import org apache derby iapi tools i18n localizedoutput
import java io fileinputstream
import java io bufferedinputstream
import java io bufferedreader
import java io fileoutputstream
import java io filenotfoundexception
import java io inputstream
import java io reader
import java io printstream
import java io unsupportedencodingexception
import java io ioexception
import java sql connection
import java sql sqlexception
import java util
/**
* this is the controller for ij. it uses two parsers:
* one to grab the next statement, and another to
* see if it is an ij command, and if so execute it.
* if it is not an ij command, it is treated as a jsql
* statement and executed against the current connection.
* ijparser controls the current connection, and so contains
* all of the state information for executing jsql statements.
* <p>
* this was written to facilitate a test harness for language
* functionality tests.
*
* @author ames
*
*/
public class main
private utilmain utilinstance
/**
* ij can be used directly on a shell command line through
* its main program.
* @param args allows 1 file name to be specified, from which
*    input will be read; if not specified, stdin is used.
*/
public static void main string args
throws ioexception
maincore args  new main true
public static void maincore string args  main main
throws ioexception
localizedinput in   null
inputstream in1   null
main me
string file
string inputresourcename
boolean gotprop
properties connattributedefaults   null
localizedresource langutil   localizedresource getinstance
localizedoutput out   langutil getnewoutput system out
// validate arguments, check for --help.
if  util invalidargs args
util usage out
return
// load the property file if specified
gotprop   util getpropertyarg args
// get the default connection attributes
connattributedefaults   util getconnattributearg args
// readjust output to derby.ui.locale and derby.ui.codeset if
// they were loaded from a property file.
langutil init
out   langutil getnewoutput system out
main initappui
file   util getfilearg args
inputresourcename   util getinputresourcenamearg args
if  inputresourcename    null
in   langutil getnewinput util getresourceasstream inputresourcename
if  in    null
out println langutil gettextmessage   inputresourcename
return
else if  file    null
in   langutil getnewinput system in
out flush
else
try
in1   new fileinputstream file
if  in1    null
in1   new bufferedinputstream in1  utilmain bufferedfilesize
in   langutil getnewinput in1
catch  filenotfoundexception e
if  boolean getboolean
in   langutil getnewinput util getresourceasstream file
if  in    null
out println langutil gettextmessage   file
return
string outfile   util getsystemproperty
if  outfile    null    outfile length  >0
localizedoutput oldout   out
try
out   langutil getnewoutput new fileoutputstream outfile
catch  ioexception ioe
oldout println langutil gettextmessage   outfile
// the old property name is deprecated...
string maxdisplaywidth   util getsystemproperty
if  maxdisplaywidth  null
maxdisplaywidth   util getsystemproperty
if  maxdisplaywidth    null    maxdisplaywidth length   > 0
try
int maxwidth   integer parseint maxdisplaywidth
jdbcdisplayutil setmaxdisplaywidth maxwidth
catch  numberformatexception nfe
out println langutil gettextmessage    maxdisplaywidth
/* use the main parameter to get to
* a new main that we can use.
* (we can't do the work in main(out)
* until after we do all of the work above
* us in this method.
*/
me   main getmain out
/* let the processing begin! */
me go in  out  connattributedefaults
in close    out close
/**
* get the right main (according to
* the jdbc version.
*
* @return	the right main (according to the jdbc version).
*/
public main getmain localizedoutput out
return new main out
/**
* get the right utilmain (according to
* the jdbc version.
*
* @return	the right utilmain (according to the jdbc version).
*/
public utilmain getutilmain int numconnections  localizedoutput out
return new utilmain numconnections  out
/**
give a shortcut to go on the utilinstance so
we don't expose utilmain.
*/
private void go localizedinput in  localizedoutput out
properties connattributedefaults
localizedinput ina     in
utilinstance go ina  out connattributedefaults
/**
* create an ij tool waiting to be given input and output streams.
*/
public main
this null
public main localizedoutput out
if  out    null
out   localizedresource getinstance   getnewoutput system out
utilinstance   getutilmain 1  out
utilinstance initfromenvironment
/**
* this constructor is only used so that we
* can get to the right main based on the
* jdbc version.  we don't do any work in
* this constructor and we only use this
* object to get to the right main via
* getmain().
*/
public main boolean trash
private void initappui
//to fix a problem in the appui implementation, a reference to the appui class is
//maintained by this tool.  without this reference, it is possible for the
//appui class to be garbage collected and the initialization values lost.
//langutilclass = localizedresource.class;
// adjust the application in accordance with derby.ui.locale and derby.ui.codeset
localizedresource getinstance