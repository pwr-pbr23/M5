/*
derby - class org.apache.derby.impl.jdbc.embedcallablestatement20
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl jdbc
import java math bigdecimal
import java sql callablestatement
import java sql sqlexception
import java sql date
import java sql time
import java sql timestamp
import java sql types
/* ---- new jdbc 2.0 types ----- */
import java sql array
import java sql blob
import java sql clob
import java sql ref
import java net url
import java util map
import java io bytearrayinputstream
import java io inputstream
import java io inputstreamreader
import java io reader
import java io stringreader
import java io unsupportedencodingexception
import java util calendar
import org apache derby iapi error standardexception
import org apache derby iapi services io streamstorable
import org apache derby iapi sql conn statementcontext
import org apache derby iapi reference jdbc30translation
import org apache derby iapi reference sqlstate
import org apache derby iapi types datavaluedescriptor
import org apache derby impl jdbc util
import org apache derby impl jdbc embedconnection
import org apache derby impl jdbc embedresultset
/**
* this class extends the embedcallablestatement class in order to support new
* methods and classes that come with jdbc 2.0.
*
*	@see org.apache.derby.impl.jdbc.embedcallablestatement
*
*	@author francois
*/
public class embedcallablestatement20
extends org apache derby impl jdbc embedcallablestatement
//////////////////////////////////////////////////////////////
//
// constructors
//
//////////////////////////////////////////////////////////////
public embedcallablestatement20  embedconnection conn  string sql
int resultsettype
int resultsetconcurrency
int resultsetholdability
throws sqlexception
super conn  sql  resultsettype  resultsetconcurrency  resultsetholdability
/////////////////////////////////////////////////////////////////////////
//
//	jdbc 2.0	-	new public methods
//
/////////////////////////////////////////////////////////////////////////
/**
* jdbc 2.0
*
* get the value of a numeric parameter as a java.math.bigdecimal object.
*
* @param parameterindex the first parameter is 1, the second is 2, ...
* @return the parameter value (full precision); if the value is sql null,
* the result is null
* @exception sqlexception if a database-access error occurs.
*/
public bigdecimal getbigdecimal int parameterindex  throws sqlexception
checkstatus
try
datavaluedescriptor dvd   getparms   getparameterforget parameterindex 1
if  wasnull   dvd isnull
return null
return org apache derby iapi types sqldecimal getbigdecimal dvd
catch  standardexception e
throw embedresultset nostatechangeexception e
/**
* jdbc 2.0
*
* returns an object representing the value of out parameter @i.
* use the @map to determine the class from which to construct
* data of sql structured and distinct types.
*
* @param i the first parameter is 1, the second is 2, ...
* @param map the mapping from sql type names to java classes
* @return a java.lang.object holding the out parameter value.
* @exception sqlexception if a database-access error occurs.
*/
public object  getobject  int i  java util map map  throws sqlexception
checkstatus
if  map    null
throw util generatecssqlexception sqlstate invalid_api_parameter map
if   map isempty
throw util notimplemented
// map is empty call the normal getobject method.
return getobject i
/**
* jdbc 2.0
*
* get a ref(&lt;structured-type&gt;) out parameter.
*
* @param i the first parameter is 1, the second is 2, ...
* @return an object representing data of an sql ref type
* @exception sqlexception if a database-access error occurs.
*/
public ref getref  int i  throws sqlexception
throw util notimplemented
/**
* jdbc 2.0
*
* get an array out parameter.
*
* @param i the first parameter is 1, the second is 2, ...
* @return an object representing an sql array
* @exception sqlexception if a database-access error occurs.
*/
public array getarray  int i  throws sqlexception
throw util notimplemented
/*
* note: all the jdbc 2.0 prepared statement methods are duplicated in here
* because this class inherits from local/embedcallablestatement, which
* inherits from local/preparedstatement.  this class should inherit from a
* local20/preparedstatement.  since java does not allow multiple inheritance,
* duplicate the code here.
*/
/**
* jdbc 2.0
*
* set a ref(&lt;structured-type&gt;) parameter.
*
* @param i the first parameter is 1, the second is 2, ...
* @param x an object representing data of an sql ref type
* @exception sqlexception feature not implemented for now.
*/
public void setref  int i  ref x  throws sqlexception
throw util notimplemented
/**
* jdbc 2.0
*
* set an array parameter.
*
* @param i the first parameter is 1, the second is 2, ...
* @param x an object representing an sql array
* @exception sqlexception feature not implemented for now.
*/
public void setarray  int i  array x  throws sqlexception
throw util notimplemented
/////////////////////////////////////////////////////////////////////////
//
//	jdbc 3.0	-	new public methods
//
/////////////////////////////////////////////////////////////////////////
/**
* jdbc 3.0
*
* registers the out parameter named parametername to the jdbc type sqltype.
* all out parameters must be registered before a stored procedure is executed.
*
* @param parametername - the name of the parameter
* @param sqltype - the jdbc type code defined by java.sql.types. if the
* parameter is of jdbc type numeric or decimal, the version of registeroutparameter
* that accepts a scale value should be used.
* @exception sqlexception feature not implemented for now.
*/
public void registeroutparameter string parametername
int sqltype
throws sqlexception
throw util notimplemented
/**
* jdbc 3.0
*
* registers the designated output parameter. this version of the method
* registeroutparameter should be used for a user-named or ref output parameter.
*
* @param parametername - the name of the parameter
* @param sqltype - the sql type code defined by java.sql.types.
* @param typename - the fully-qualified name of an sql structure type
* @exception sqlexception feature not implemented for now.
*/
public void registeroutparameter string parametername
int sqltype  string typename
throws sqlexception
throw util notimplemented
/**
* jdbc 3.0
*
* registers the parameter named parametername to the jdbc type sqltype.
* this method must be called before a stored procedure is executed.
*
* @param parametername - the name of the parameter
* @param sqltype - the sql type code defined by java.sql.types.
* @param scale - the desired number of digits to the right of the decimal point.
* it must be greater than or equal to zero.
* @exception sqlexception feature not implemented for now.
*/
public void registeroutparameter string parametername
int sqltype  int scale
throws sqlexception
throw util notimplemented
/**
* jdbc 3.0
*
* retrieves the value of a jdbc ref (<structured-type) parameter as a ref object
* in the java programming language.
*
* @param parametername - the name of the parameter
* @return the parameter value as a ref object in the java programming language.
* if the value is sql null, the result is null.
* @exception sqlexception feature not implemented for now.
*/
public ref getref string parametername
throws sqlexception
throw util notimplemented
/**
* jdbc 3.0
*
* retrieves the value of a jdbc blob parameter as a blob object
* in the java programming language.
*
* @param parametername - the name of the parameter
* @return the parameter value as a blob object in the java programming language.
* if the value is sql null, the result is null.
* @exception sqlexception feature not implemented for now.
*/
public blob getblob string parametername
throws sqlexception
throw util notimplemented
/**
* jdbc 3.0
*
* retrieves the value of a jdbc clob parameter as a clob object
* in the java programming language.
*
* @param parametername - the name of the parameter
* @return the parameter value as a clob object in the java programming language.
* if the value is sql null, the result is null.
* @exception sqlexception feature not implemented for now.
*/
public clob getclob string parametername
throws sqlexception
throw util notimplemented
/**
* jdbc 3.0
*
* retrieves the value of a jdbc array parameter as an array object
* in the java programming language.
*
* @param parametername - the name of the parameter
* @return the parameter value as a array object in the java programming language.
* if the value is sql null, the result is null.
* @exception sqlexception feature not implemented for now.
*/
public array getarray string parametername
throws sqlexception
throw util notimplemented
/**
* jdbc 3.0
*
* sets the designated parameter to sql null.
*
* @param parametername - the name of the parameter
* @param sqltype - the sql type code defined in java.sql.types
* @exception sqlexception feature not implemented for now.
*/
public void setnull string parametername  int sqltype
throws sqlexception
throw util notimplemented
/**
* jdbc 3.0
*
* sets the designated parameter to sql null.
*
* @param parametername - the name of the parameter
* @param sqltype - the sql type code defined in java.sql.types
* @param typename - the fully-qualified name of an sql user-defined type
* @exception sqlexception feature not implemented for now.
*/
public void setnull string parametername  int sqltype  string typename
throws sqlexception
throw util notimplemented
/**
* jdbc 3.0
*
* sets the designated parameter to the given java boolean value. the driver
* converts this to an sql bit value when it sends it to the database.
*
* @param parametername - the name of the parameter
* @param x - the parameter value
* @exception sqlexception feature not implemented for now.
*/
public void setboolean string parametername  boolean x
throws sqlexception
throw util notimplemented
/**
* jdbc 3.0
*
* retrieves the value of a jdbc bit parameter as a boolean in the java
* programming language.
*
* @param parametername - the name of the parameter
* @return the parameter value. if the value is sql null, the result is false.
* @exception sqlexception feature not implemented for now.
*/
public boolean getboolean string parametername
throws sqlexception
throw util notimplemented
/**
* jdbc 3.0
*
* sets the designated parameter to the given java byte value. the driver
* converts this to an sql tinyint value when it sends it to the database.
*
* @param parametername - the name of the parameter
* @param x - the parameter value
* @exception sqlexception feature not implemented for now.
*/
public void setbyte string parametername  byte x
throws sqlexception
throw util notimplemented
/**
* jdbc 3.0
*
* retrieves the value of a jdbc tinyint parameter as a byte in the java
* programming language.
*
* @param parametername - the name of the parameter
* @return the parameter value. if the value is sql null, the result is 0.
* @exception sqlexception feature not implemented for now.
*/
public byte getbyte string parametername
throws sqlexception
throw util notimplemented
/**
* jdbc 3.0
*
* sets the designated parameter to the given java short value. the driver
* converts this to an sql smallint value when it sends it to the database.
*
* @param parametername - the name of the parameter
* @param x - the parameter value
* @exception sqlexception feature not implemented for now.
*/
public void setshort string parametername  short x
throws sqlexception
throw util notimplemented
/**
* jdbc 3.0
*
* retrieves the value of a jdbc smallint parameter as a short in the java
* programming language.
*
* @param parametername - the name of the parameter
* @return the parameter value. if the value is sql null, the result is 0.
* @exception sqlexception feature not implemented for now.
*/
public short getshort string parametername
throws sqlexception
throw util notimplemented
/**
* jdbc 3.0
*
* sets the designated parameter to the given java int value. the driver
* converts this to an sql integer value when it sends it to the database.
*
* @param parametername - the name of the parameter
* @param x - the parameter value
* @exception sqlexception feature not implemented for now.
*/
public void setint string parametername  int x
throws sqlexception
throw util notimplemented
/**
* jdbc 3.0
*
* retrieves the value of a jdbc integer parameter as a int in the java
* programming language.
*
* @param parametername - the name of the parameter
* @return the parameter value. if the value is sql null, the result is 0.
* @exception sqlexception feature not implemented for now.
*/
public int getint string parametername
throws sqlexception
throw util notimplemented
/**
* jdbc 3.0
*
* sets the designated parameter to the given java long value. the driver
* converts this to an sql bigint value when it sends it to the database.
*
* @param parametername - the name of the parameter
* @param x - the parameter value
* @exception sqlexception feature not implemented for now.
*/
public void setlong string parametername  long x
throws sqlexception
throw util notimplemented
/**
* jdbc 3.0
*
* retrieves the value of a jdbc bigint parameter as a long in the java
* programming language.
*
* @param parametername - the name of the parameter
* @return the parameter value. if the value is sql null, the result is 0.
* @exception sqlexception feature not implemented for now.
*/
public long getlong string parametername
throws sqlexception
throw util notimplemented
/**
* jdbc 3.0
*
* sets the designated parameter to the given java float value. the driver
* converts this to an sql float value when it sends it to the database.
*
* @param parametername - the name of the parameter
* @param x - the parameter value
* @exception sqlexception feature not implemented for now.
*/
public void setfloat string parametername  float x
throws sqlexception
throw util notimplemented
/**
* jdbc 3.0
*
* retrieves the value of a jdbc float parameter as a float in the java
* programming language.
*
* @param parametername - the name of the parameter
* @return the parameter value. if the value is sql null, the result is 0.
* @exception sqlexception feature not implemented for now.
*/
public float getfloat string parametername
throws sqlexception
throw util notimplemented
/**
* jdbc 3.0
*
* sets the designated parameter to the given java double value. the driver
* converts this to an sql double value when it sends it to the database.
*
* @param parametername - the name of the parameter
* @param x - the parameter value
* @exception sqlexception feature not implemented for now.
*/
public void setdouble string parametername  double x
throws sqlexception
throw util notimplemented
/**
* jdbc 3.0
*
* retrieves the value of a jdbc double parameter as a double in the java
* programming language.
*
* @param parametername - the name of the parameter
* @return the parameter value. if the value is sql null, the result is 0.
* @exception sqlexception feature not implemented for now.
*/
public double getdouble string parametername
throws sqlexception
throw util notimplemented
/**
* jdbc 3.0
*
* sets the designated parameter to the given java.math.bigdecimal value. the driver
* converts this to an sql numeric value when it sends it to the database.
*
* @param parametername - the name of the parameter
* @param x - the parameter value
* @exception sqlexception feature not implemented for now.
*/
public void setbigdecimal string parametername  bigdecimal x
throws sqlexception
throw util notimplemented
/**
* jdbc 3.0
*
* retrieves the value of a jdbc numeric parameter as a java.math.bigdecimal
* object with as many digits to the right of the decimal point as the value contains
*
* @param parametername - the name of the parameter
* @return the parameter value. if the value is sql null, the result is 0.
* @exception sqlexception feature not implemented for now.
*/
public bigdecimal getbigdecimal string parametername
throws sqlexception
throw util notimplemented
/**
* jdbc 3.0
*
* sets the designated parameter to the given java string value. the driver
* converts this to an sql varchar or longvarchar value (depending on the
* argument's size relative the driver's limits on varchar values) when it
* sends it to the database.
*
* @param parametername - the name of the parameter
* @param x - the parameter value
* @exception sqlexception feature not implemented for now.
*/
public void setstring string parametername  string x
throws sqlexception
throw util notimplemented
/**
* jdbc 3.0
*
* retrieves the value of a jdbc char, varchar, or longvarchar parameter as
* a string in the java programming language.
*
* @param parametername - the name of the parameter
* @return the parameter value. if the value is sql null, the result is null.
* @exception sqlexception feature not implemented for now.
*/
public string getstring string parametername
throws sqlexception
throw util notimplemented
/**
* jdbc 3.0
*
* sets the designated parameter to the given java array of bytes. the driver
* converts this to an sql varbinary or longvarbinary (depending on the argument's
* size relative to the driver's limits on varbinary values)when it sends it to
* the database.
*
* @param parametername - the name of the parameter
* @param x - the parameter value
* @exception sqlexception feature not implemented for now.
*/
public void setbytes string parametername  byte x
throws sqlexception
throw util notimplemented
/**
* jdbc 3.0
*
* retrieves the value of a jdbc binary or varbinary parameter as an array
* of byte values in the java programming language.
*
* @param parametername - the name of the parameter
* @return the parameter value. if the value is sql null, the result is null.
* @exception sqlexception feature not implemented for now.
*/
public byte getbytes string parametername
throws sqlexception
throw util notimplemented
/**
* jdbc 3.0
*
* sets the designated parameter to the given java.sql.date value. the driver
* converts this to an sql date value when it sends it to the database.
*
* @param parametername - the name of the parameter
* @param x - the parameter value
* @exception sqlexception feature not implemented for now.
*/
public void setdate string parametername  date x
throws sqlexception
throw util notimplemented
/**
* jdbc 3.0
*
* sets the designated parameter to the given java.sql.date value, using the given
* calendar object.
*
* @param parametername - the name of the parameter
* @param x - the parameter value
* @param cal - the calendar object the driver will use to construct the date
* @exception sqlexception feature not implemented for now.
*/
public void setdate string parametername  date x  calendar cal
throws sqlexception
throw util notimplemented
/**
* jdbc 3.0
*
* retrieves the value of a jdbc date parameter as ajava.sql.date object
*
* @param parametername - the name of the parameter
* @return the parameter value. if the value is sql null, the result is null.
* @exception sqlexception feature not implemented for now.
*/
public date getdate string parametername
throws sqlexception
throw util notimplemented
/**
* jdbc 3.0
*
* retrieves the value of a jdbc date parameter as a java.sql.date object,
* using the given calendar object to construct the date object.
*
* @param parametername - the name of the parameter
* @param cal - the calendar object the driver will use to construct the date
* @return the parameter value. if the value is sql null, the result is null.
* @exception sqlexception feature not implemented for now.
*/
public date getdate string parametername  calendar cal
throws sqlexception
throw util notimplemented
/**
* jdbc 3.0
*
* sets the designated parameter to the given java.sql.time value. the driver
* converts this to an sql time value when it sends it to the database.
*
* @param parametername - the name of the parameter
* @param x - the parameter value
* @exception sqlexception feature not implemented for now.
*/
public void settime string parametername  time x
throws sqlexception
throw util notimplemented
/**
* jdbc 3.0
*
* retrieves the value of a jdbc time parameter as ajava.sql.time object
*
* @param parametername - the name of the parameter
* @return the parameter value. if the value is sql null, the result is null.
* @exception sqlexception feature not implemented for now.
*/
public time gettime string parametername
throws sqlexception
throw util notimplemented
/**
* jdbc 3.0
*
* retrieves the value of a jdbc time parameter as a java.sql.time object,
* using the given calendar object to construct the time object.
*
* @param parametername - the name of the parameter
* @param cal - the calendar object the driver will use to construct the time
* @return the parameter value. if the value is sql null, the result is null.
* @exception sqlexception feature not implemented for now.
*/
public time gettime string parametername  calendar cal
throws sqlexception
throw util notimplemented
/**
* jdbc 3.0
*
* sets the designated parameter to the given java.sql.time value using the
* calendar object
*
* @param parametername - the name of the parameter
* @param x - the parameter value
* @param cal - the calendar object the driver will use to construct the time
* @exception sqlexception feature not implemented for now.
*/
public void settime string parametername  time x  calendar cal
throws sqlexception
throw util notimplemented
/**
* jdbc 3.0
*
* sets the designated parameter to the given java.sql.timestamp value. the driver
* converts this to an sql timestamp value when it sends it to the database.
*
* @param parametername - the name of the parameter
* @param x - the parameter value
* @exception sqlexception feature not implemented for now.
*/
public void settimestamp string parametername  timestamp x
throws sqlexception
throw util notimplemented
/**
* jdbc 3.0
*
* sets the designated parameter to the given java.sql.timestamp value, using the
* given calendar object
*
* @param parametername - the name of the parameter
* @param x - the parameter value
* @param cal - the calendar object the driver will use to construct the timestamp.
* @exception sqlexception feature not implemented for now.
*/
public void settimestamp string parametername  timestamp x  calendar cal
throws sqlexception
throw util notimplemented
/**
* jdbc 3.0
*
* retrieves the value of a jdbc timestamp parameter as a java.sql.timestamp object
*
* @param parametername - the name of the parameter
* @return the parameter value. if the value is sql null, the result is null.
* @exception sqlexception feature not implemented for now.
*/
public timestamp gettimestamp string parametername
throws sqlexception
throw util notimplemented
/**
* jdbc 3.0
*
* retrieves the value of a jdbc timestamp parameter as a java.sql.timestamp object,
* using the given calendar object to construct the timestamp object.
*
* @param parametername - the name of the parameter
* @param cal - the calendar object the driver will use to construct the timestamp
* @return the parameter value. if the value is sql null, the result is null.
* @exception sqlexception feature not implemented for now.
*/
public timestamp gettimestamp string parametername  calendar cal
throws sqlexception
throw util notimplemented
/**
* jdbc 3.0
*
* sets the designated parameter to the given input stream, which will have the
* specified number of bytes.
*
* @param parametername - the name of the parameter
* @param x - the java input stream that contains the ascii parameter value
* @param length - the number of bytes in the stream
* @exception sqlexception feature not implemented for now.
*/
public void setasciistream string parametername  inputstream x  int length
throws sqlexception
throw util notimplemented
/**
* jdbc 3.0
*
* sets the designated parameter to the given input stream, which will have the
* specified number of bytes.
*
* @param parametername - the name of the parameter
* @param x - the java input stream that contains the binary parameter value
* @param length - the number of bytes in the stream
* @exception sqlexception feature not implemented for now.
*/
public void setbinarystream string parametername  inputstream x  int length
throws sqlexception
throw util notimplemented
/**
* jdbc 3.0
*
* sets the designated parameter to the given reader object, which is the given
* number of characters long.
*
* @param parametername - the name of the parameter
* @param reader - the java.io.reader object that contains the unicode data
* @param length - the number of characters in the stream
* @exception sqlexception feature not implemented for now.
*/
public void setcharacterstream string parametername  reader reader  int length
throws sqlexception
throw util notimplemented
/**
* jdbc 3.0
*
* sets the value of the designated parameter with the given object. the second
* argument must be an object type; for integral values, the java.lang equivalent
* objects should be used.
*
* @param parametername - the name of the parameter
* @param x - the object containing the input parameter value
* @param targetsqltype - the sql type (as defined in java.sql.types) to be sent to
* the database. the scale argument may further qualify this type.
* @param scale - for java.sql.types.decimal or java.sql.types.numeric types, this
* is the number of digits after the decimal point. for all other types, this value
* will be ignored.
* @exception sqlexception feature not implemented for now.
*/
public void setobject string parametername  object x  int targetsqltype  int scale
throws sqlexception
throw util notimplemented
/**
* jdbc 3.0
*
* retrieves the value of a parameter as an object in the java programming language.
*
* @param parametername - the name of the parameter
* @return a java.lang.object holding the out parameter value
* @exception sqlexception feature not implemented for now.
*/
public object getobject string parametername
throws sqlexception
throw util notimplemented
/**
* jdbc 3.0
*
* returns an object representing the value of out parameter i and uses map for
* the custom mapping of the parameter value.
*
* @param parametername - the name of the parameter
* @param map - the mapping from sql type names to java classes
* @return a java.lang.object holding the out parameter value
* @exception sqlexception feature not implemented for now.
*/
public object getobject string parametername  map map
throws sqlexception
checkstatus
if  map    null
throw util generatecssqlexception sqlstate invalid_api_parameter map
if   map isempty
throw util notimplemented
// map is empty so call the normal getobject method.
return getobject parametername
/**
* jdbc 3.0
*
* sets the value of the designated parameter with the given object. this method
* is like the method setobject above, except that it assumes a scale of zero.
*
* @param parametername - the name of the parameter
* @param x - the object containing the input parameter value
* @param targetsqltype - the sql type (as defined in java.sql.types) to be sent to
* the database.
* @exception sqlexception feature not implemented for now.
*/
public void setobject string parametername  object x  int targetsqltype
throws sqlexception
throw util notimplemented
/**
* jdbc 3.0
*
* sets the value of the designated parameter with the given object. the second
* parameter must be of type object; therefore, the java.lang equivalent objects
* should be used for built-in types.
*
* @param parametername - the name of the parameter
* @param x - the object containing the input parameter value
* @exception sqlexception feature not implemented for now.
*/
public void setobject string parametername  object x
throws sqlexception
throw util notimplemented
/*
** methods using bigdecimal, moved out of embedpreparedstatement
** to allow that class to support jsr169.
*/
/**
* set a parameter to a java.lang.bigdecimal value.
* the driver converts this to a sql numeric value when
* it sends it to the database.
*
* @param parameterindex the first parameter is 1, the second is 2, ...
* @param x the parameter value
* @exception sqlexception thrown on failure.
*/
public final void setbigdecimal int parameterindex  bigdecimal x  throws sqlexception
checkstatus
try
/* jdbc is one-based, dbms is zero-based */
getparms   getparameterforset parameterindex   1  setbigdecimal x
catch  throwable t
throw embedresultset nostatechangeexception t
/**
* @see callablestatement#getbigdecimal
* @exception sqlexception nooutputparameters thrown.
*/
public final bigdecimal getbigdecimal int parameterindex  int scale  throws sqlexception
bigdecimal v   getbigdecimal parameterindex
if  v    null
v   v setscale scale  bigdecimal round_half_down
return v
/**
allow explict setobject conversions by sub-classes for classes
not supported by this variant. in this case handle bigdecimal.
@return true if the object was set successfully, false if no valid
conversion exists.
@exception sqlexception value could not be set.
*/
boolean setobjectconvert int parameterindex  object x  throws sqlexception
if  x instanceof bigdecimal
setbigdecimal parameterindex   bigdecimal  x
return true
return false
/////////////////////////////////////////////////////////////////////////
//
//	jdbc 4.0	-	new public methods
//
/////////////////////////////////////////////////////////////////////////
/**
* retrieves the value of the designated parameter as a
* <code>java.io.reader</code> object in the java programming language.
* introduced in jdbc 4.0.
*
* @param parameterindex the first parameter is 1, the second is 2, ...
* @return a <code>java.io.reader</code> object that contains the parameter
*         value; if the value is sql <code>null</code>, the value returned
*         is <code>null</code> in the java programming language.
* @throws sqlexception if a database access error occurs or this method is
*                      called on a closed <code>callablestatement</code>
*/
public reader getcharacterstream int parameterindex
throws sqlexception
checkstatus
// make sure the specified parameter has mode out or in/out.
switch  getparms   getparametermode parameterindex
case jdbc30translation parameter_mode_in
case jdbc30translation parameter_mode_unknown
throw newsqlexception sqlstate lang_not_output_parameter
integer tostring parameterindex
reader reader   null
int paramtype   getparameterjdbctype parameterindex
switch  paramtype
// handle character/string types.
case types char
case types varchar
case types longvarchar
case types clob
boolean pushstack   false
object syncobject   getconnectionsynchronization
synchronized  syncobject
try
datavaluedescriptor param
getparms   getparameterforget parameterindex  1
if  param isnull
break
pushstack   true
setupcontextstack
streamstorable ss    streamstorable param
inputstream stream   ss returnstream
if  stream    null
reader   new stringreader param getstring
else
reader   new utf8reader stream  0  this  syncobject
catch  throwable t
throw embedresultset nostatechangeexception t
finally
if  pushstack
restorecontextstack
end synchronized block
break
// handle binary types.
// jdbc says to support these, but no defintion exists for the output.
// match jcc which treats the bytes as a utf-16be stream.
case types binary
case types varbinary
case types longvarbinary
case types blob
try
inputstream is   getbinarystream parameterindex
if  is    null
reader   new inputstreamreader is
break
catch  unsupportedencodingexception uee
throw newsqlexception uee getmessage
default
throw newsqlexception sqlstate lang_data_type_get_mismatch
util typename paramtype
// update wasnull.
wasnull    reader    null
return reader
// private utility classes
/**
* get binary stream for a parameter.
*
* @param parameterindex first parameter is 1, second is 2 etc.
* @return a stream for the binary parameter, or <code>null</code>.
*
* @throws sqlexception if a database access error occurs.
*/
private inputstream getbinarystream int parameterindex
throws sqlexception
int paramtype   getparameterjdbctype parameterindex
switch  paramtype
case types binary
case types varbinary
case types longvarbinary
case types blob
break
default
throw newsqlexception sqlstate lang_data_type_get_mismatch
util typename paramtype
boolean pushstack   false
synchronized  getconnectionsynchronization
try
datavaluedescriptor param
getparms   getparameterforget parameterindex  1
wasnull   param isnull
if  wasnull
return null
pushstack   true
setupcontextstack
streamstorable ss    streamstorable param
inputstream stream   ss returnstream
if  stream    null
stream   new bytearrayinputstream param getbytes
else
stream   new binarytorawstream stream  param
return stream
catch  throwable t
throw embedresultset nostatechangeexception t
finally
if  pushstack
restorecontextstack
end synchronized block