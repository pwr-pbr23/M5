/*
derby - class org.apache.derby.impl.sql.compile.droptriggernode
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package	org apache derby impl sql compile
import org apache derby iapi sql compile compilercontext
import org apache derby iapi sql dictionary datadictionary
import org apache derby iapi sql dictionary schemadescriptor
import org apache derby iapi sql dictionary tabledescriptor
import org apache derby iapi sql dictionary triggerdescriptor
import org apache derby iapi reference sqlstate
import org apache derby iapi sql execute constantaction
import org apache derby iapi error standardexception
import org apache derby iapi services context contextmanager
import org apache derby iapi services sanity sanitymanager
/**
* a droptriggernode is the root of a querytree that represents a drop trigger
* statement.
*
* @author jamie
*/
public class droptriggernode extends ddlstatementnode
private tabledescriptor td
public string statementtostring
return
/**
* bind this droptriggernode.  this means looking up the trigger,
* verifying it exists and getting its table uuid.
*
* @return	the bound query tree
*
* @exception standardexception		thrown on error
*/
public querytreenode bind   throws standardexception
compilercontext			cc   getcompilercontext
datadictionary			dd   getdatadictionary
schemadescriptor sd   getschemadescriptor
triggerdescriptor triggerdescriptor   null
if  sd getuuid      null
triggerdescriptor   dd gettriggerdescriptor getrelativename    sd
if  triggerdescriptor    null
throw standardexception newexception sqlstate lang_object_not_found     getfullname
/* get the table descriptor */
td   triggerdescriptor gettabledescriptor
cc createdependency td
cc createdependency triggerdescriptor
return this
// inherit generate() method from ddlstatementnode
/**
* create the constant information that will drive the guts of execution.
*
* @exception standardexception		thrown on failure
*/
public constantaction	makeconstantaction   throws standardexception
return	getgenericconstantactionfactory   getdroptriggerconstantaction
getschemadescriptor
getrelativename
td getuuid