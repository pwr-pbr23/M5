/*
derby - class com.ihost.cs.idutil
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi util
import org apache derby iapi reference attribute
import org apache derby iapi reference sqlstate
import org apache derby iapi reference property
import org apache derby iapi error standardexception
import java io ioexception
import java io stringreader
import java util vector
import java util hashset
import java util properties
/**
utility class for parsing and producing string representations of
ids. this class supports both delimited and un-delimited ids.
<p>the syntax for an id follows.
<pre>
id := delim-id | undelim-id
delim-id := "[""|[any char but quote]]+"
undelim-id := (a-z|a-z|anyunicodeletter)[a-z|a-z|_|0-9|anyunicodeletter|anyunicodedigit]*
in the syntax braces show grouping. '*' means repeat 0 or more times.
'|' means or. '+' means repeat 1 or more times.
</pre>
<p>in addition this class provides support for qualified names. a qualified name
is a dot (.) separated list of ids.
<p>limitations:
<ol>
<li>unicode escape sequences in ids are not supported.
<li>escape sequences (\n...) are not supported.
</ol>
*/
public abstract class idutil
/**
delimit the identifier provided.
@return the delimited identifier.
*/
public static string delimitid string id
stringbuffer quotedbuffer   new stringbuffer
quotedbuffer append
char chararray   id tochararray
for  int ix   0  ix < chararray length  ix
char currentchar   chararray
quotedbuffer append currentchar
if  currentchar
quotedbuffer append
quotedbuffer append
return quotedbuffer tostring
/**
produce a delimited two part qualified name from two
un-delimited identifiers.
@return the result.
*/
public static string mkqualifiedname string id1
string id2
if  null    id1
return delimitid id2
return
delimitid id1
delimitid id2
/**
make a string form of a qualified name from the array of ids provided.
*/
public static string mkqualifiedname string ids
stringbuffer sb   new stringbuffer
for  int ix 0  ix < ids length  ix
if  ix  0  sb append
sb append delimitid ids
return sb tostring
/**
scan a qualified name from the string provided. raise an excepion
if the string does not contain a qualified name.
@param s the string to be parsed
@param normalizetoupper if true then undelimited names are converted to upper case (the ansi standard). if false then undelimited names are converted to lower case (used when the source database is informix foundation).
@return an array of strings made by breaking the input string at its dots, '.'.
@exception standardexception oops
*/
public static string parsequalifiedname string s  boolean normalizetoupper
throws standardexception
stringreader r   new stringreader s
string qname   parsequalifiedname r  normalizetoupper
verifyempty r
return qname
/**
scan a qualified name from a stringreader. return an array
of strings with 1 entry per name scanned. raise an exception
if the stringreader does not contain a valid qualified name.
@param r a stringreader for the string to be parsed
@param normalizetoupper if true then undelimited names are converted to upper case (the ansi standard). if false then undelimited names are converted to lower case (used when the source database is informix foundation).
@return an array of strings made by breaking the input string at its dots, '.'.
@exception standardexception oops
*/
public static string parsequalifiedname stringreader r  boolean normalizetoupper
throws standardexception
vector v   new vector
while  true
string thisid   parseid r true  normalizetoupper
v addelement thisid
int dot
try
r mark 0
dot   r read
if  dot
if  dot   1  r reset
break
catch  ioexception ioe
throw standardexception newexception sqlstate id_parse_error ioe
string result   new string
v copyinto result
return result
/**
convert the string provided to an id. throw an exception
iff the string does not contain only a valid external form
for an id. this is a convenience routine that simply
uses getid(stringreader) to do the work.
<p> see the header for getid below for restrictions.
@exception standardexception oops
*/
public static string parseid string s
throws standardexception
stringreader r   new stringreader s
string id   parseid r true  true
verifyempty r
return id
/**
read an id from the stringreader provided.
@param normalize true means return ids in nomral form, false means
return them as they were entered.
<p>
raise an exception if the first thing in the stringreader
is not a valid id.
@exception standardexception ooops.
*/
public static string parseid stringreader r  boolean normalize  boolean normalizetoupper
throws standardexception
try
r mark 0
int c   r read
if  c     1     id can't be 0 length
throw standardexception newexception sqlstate id_parse_error
r reset
if  c
return parseqid r normalize
else
return parseunqid r normalize  normalizetoupper
catch  ioexception ioe
throw standardexception newexception sqlstate id_parse_error ioe
private static string parseunqid stringreader r  boolean normalize  boolean normalizetoupper
throws ioexception standardexception
stringbuffer b   new stringbuffer
int c
boolean first
//
for first   true    first false
r mark 0
if  idchar first c r read
b append  char c
else
break
if  c     1  r reset
if  normalize
return normalizetoupper ? stringutil sqltouppercase b tostring      stringutil sqltolowercase b tostring
else
return b tostring
private static boolean idchar boolean first int c
if    c>      c<        c>      c<
first    c>      c<          first   c
return true
else if  character isletter  char  c
return true
else if   first    character isdigit  char  c
return true
return false
private static string parseqid stringreader r boolean normalize
throws ioexception standardexception
stringbuffer b   new stringbuffer
int c   r read
if  c       throw standardexception newexception sqlstate id_parse_error
while  true
c r read
if  c
r mark 0
int c2   r read
if  c2
if  c2   1 r reset
break
else if  c     1
throw standardexception newexception sqlstate id_parse_error
b append  char c
if  b length      0    id can't be 0 length
throw standardexception newexception sqlstate id_parse_error
if  normalize
return b tostring
else
return delimitid b tostring       put the quotes back
private static void verifyempty java io reader r
throws standardexception
try
if  r read       1
throw standardexception newexception sqlstate id_parse_error
catch  ioexception ioe
throw standardexception newexception sqlstate id_parse_error ioe
/**index of the schema name in a jar name on a db classpath*/
public static final int dbcp_schema_name   0
/**index of the sql jar name in a jar name on a db classpath*/
public static final int dbcp_sql_jar_name   1
/**
scan a database classpath from the string provided. this returns
an array with one qualified name per entry on the classpath. the
constants above describe the content of the returned names. this
raises an an exception if the string does not contain a valid database
class path.
<pre>
classpath := item[:item]*
item := id.id
in the syntax braces ([]) show grouping. '*' means repeat 0 or more times.
the syntax for id is defined in idutil.
</pre>
<br>
classpath returned is a two part name.	  <br>
if the class path is empty then this returns an array
of zero length.
@exception standardexception oops
*/
public static string parsedbclasspath string input  boolean normalizetoupper
throws standardexception
//as a special case we accept a zero length dbclasspath.
if  input length      0
return new string
vector v   new vector
java io stringreader r   new java io stringreader input
//
while  true
try
string thisqname   idutil parsequalifiedname r  normalizetoupper
if  thisqname length    2
throw standardexception newexception sqlstate db_class_path_parse_error input
v addelement thisqname
int delim   r read
if  delim
if  delim   1
throw standardexception newexception sqlstate db_class_path_parse_error input
break
catch  standardexception se
if  se getmessageid   equals sqlstate id_parse_error
throw standardexception newexception sqlstate db_class_path_parse_error
se input
else
throw se
catch  ioexception ioe
throw standardexception newexception sqlstate db_class_path_parse_error ioe input
string result   new string
v copyinto result
return result
/*
** methods that operate on lists of identifiers.
*/
/**
scan a list of ids from the string provided. this returns
an array with id per entry. this raises an an exception if
the string does not contain a valid list of names.
@exception standardexception oops
*/
public static string parseidlist string p
throws standardexception
if  p  null  return null
stringreader r   new stringreader p
string result   parseidlist r  true
verifylistempty r
return result
/**
parse an idlist.
@param normalize true means return ids in nomral form, false means
return them as they were entered.
@exception standardexception oops
*/
private static string parseidlist stringreader r  boolean normalize
throws standardexception
vector v   new vector
while  true
int delim
try
string thisid   idutil parseid r normalize  true
v addelement thisid
r mark 0
delim   r read
if  delim
if  delim   1  r reset
break
catch  standardexception se
if  se getmessageid   equals sqlstate id_list_parse_error
throw standardexception newexception sqlstate id_list_parse_error se
else
throw se
catch  ioexception ioe
throw standardexception newexception sqlstate id_list_parse_error ioe
if  v size      0  return null
string result   new string
v copyinto result
return result
/**
return an idlist with all the ids that in l1 and l2
or null if not ids are on both lists.
@param l1 an array of ids in normal form
@param l2 an array of ids in nomral form
*/
public static string intersect string l1  string l2
if  l1    null    l2    null  return null
hashset h   new hashset
for int ix 0 ix<l2 length ix    h add l2
vector v   new vector
for int ix 0 ix<l1 length ix    if  h contains l1   v addelement l1
return vectortoidlist v true
/**
return an idlist in external form with one id for every
element of v. if v has no elements, return null.
@param normal true means the ids in v are in normal form
and false means they are in external form.
*/
private static string vectortoidlist vector v boolean normal
if  v size      0  return null
string a   new string
v copyinto a
if  normal
return mkidlist a
else
return mkidlistasentered a
/**
* map username to authorizationid
*
* @exception standardexception on error
*/
public static string getuserauthorizationid string username  throws standardexception
try
return parseid username
catch  standardexception se
throw standardexception newexception sqlstate auth_invalid_user_name  username
/**
* get user name from url properties. handles the case of "" user.
*
* @exception standardexception on error
*/
public static string getusernamefromurlprops properties params
string username   params getproperty attribute username_attr
property default_user_name
if  username equals
username   property default_user_name
return username
/**
return an idlist with all the ids that are repeated
in l.
@param l a list of ids in normal form.
*/
public static string dups string l
if  l    null  return null
hashset h   new hashset
vector v   new vector
for int ix 0 ix<l length ix
if   h contains l
h add l
else
v addelement l
return vectortoidlist v true
/**
return an idlist with all the duplicate ids removed
@param l a list of ids in external form.
@exception standardexception oops.
*/
public static string prunedups string l  throws standardexception
if  l    null  return null
string normal_a   parseidlist l
stringreader r   new stringreader l
string external_a   parseidlist r false
hashset h   new hashset
vector v   new vector
for int ix 0 ix<normal_a length ix
if   h contains normal_a
h add normal_a
v addelement external_a
return vectortoidlist v false
/**
produce a string form of an idlist from an array of
normalized ids.
*/
public static string mkidlist string ids
stringbuffer sb   new stringbuffer
for  int ix 0 ix<ids length  ix
if  ix    0  sb append
sb append idutil delimitid ids
return sb tostring
/**
produce an id list from an array of ids in external form
*/
private static string mkidlistasentered string externalids
stringbuffer sb   new stringbuffer
for  int ix 0 ix<externalids length  ix
if  ix    0  sb append
sb append externalids
return sb tostring
private static void verifylistempty stringreader r
throws standardexception
try
if  r read       1
throw standardexception newexception sqlstate id_list_parse_error
catch  ioexception ioe
throw standardexception newexception sqlstate id_list_parse_error ioe
/**
return true if the id provided is on the list provided.
@param id an id in normal form
@param	list a list of ids in external form.
@exception standardexception oops.
*/
public static boolean idonlist string id  string list
throws standardexception
if  list  null  return false
string list_a   parseidlist list
for  int ix 0  ix < list_a length  ix
if  id equals list_a   return true
return false
/**
delete an id from a list of ids.
@param id an id in normal form (quotes removed, upshifted)
@param list a comma separated list of ids in external
form (possibly delmited or not upshifted).
@return the list with the id deleted or null if the
resulting list has no ids. if 'id' is not on 'list'
this returns list unchanged.
@exception standardexception oops.
*/
public static string deleteid string id  string list
throws standardexception
if  list  null  return null
vector v   new vector
stringreader r   new stringreader list
string enteredlist_a   parseidlist r false
//
//loop through enteredlist element by element
//removing elements that match id. before we
//compare we parse each id in list to convert
//to normal form.
for  int ix 0  ix < enteredlist_a length  ix
if   id equals idutil parseid enteredlist_a
v addelement enteredlist_a
if  v size      0
return null
else
return vectortoidlist v false
/**
append an id in external form.
@return the list with the id appended.
@exception standardexception oops
*/
public static string appendid string id  string list
throws standardexception
if  list  null
return id
else
return list   id