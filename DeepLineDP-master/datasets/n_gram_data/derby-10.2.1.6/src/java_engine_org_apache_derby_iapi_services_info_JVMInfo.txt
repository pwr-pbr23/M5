/*
derby - class org.apache.derby.iapi.services.info.jvminfo
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi services info
/**
what's the current jdk runtime environment.
*/
public abstract class jvminfo
/**
the jvm's runtime environment.
<ul>
<li> 1 - not used was jdk 1.1
<li> 2 - j2se_13- jdk 1.2, 1.3
<li> 4 - j2se_14 - jdk 1.4.0 or 1.4.1
<li> 5 - j2se_142 - jdk 1.4.2
<li> 6 - j2se_15 - jdk 1.5
</ul>
*/
public static final int jdk_id
public static final int j2se_13   2
public static final int j2se_14   4
public static final int j2se_142   5
public static final int j2se_15   6     aka j2se 5 0
public static final int j2se_16   7     java se 6  not j2se
public static final boolean j2me
/**
jdbc boolean type - types.bit in jdk1.1 & 1.2 & 1.3, types.boolean in jdk1.4
*/
public static final int java_sql_types_boolean
static
int id
//
// if the property java.specification.version is set, then try to parse
// that.  anything we don't recognize, default to java 2 platform
// because java.specification.version is a property that is introduced
// in java 2.  we hope that jvm vendors don't implement java 1 and
// set a java 2 system property.
//
// otherwise, see if we recognize what is set in java.version.
// if we don't recoginze that, or if the property is not set, assume
// version 1.3.
//
string javaversion
string javaspec
boolean isj2me
try
javaspec   system getproperty
catch  securityexception se
// some vms do not know about this property so they
// throw a security exception when access is restricted.
javaspec   null
try
javaversion   system getproperty
catch  securityexception se
// some vms do not know about this property so they
// throw a security exception when access is restricted.
javaversion
if  javaspec    null    javaspec startswith
// ibm's wctme 5.7 returns these values for cdc 1.0 profiles.
// "j2me foundation specification"
//
// foundation 1.0 and personal profile 1.0 based
// upon cdc 1.0 which is jdk 1.3 based
id   j2se_13
isj2me   true
else
// j2se/j2ee
isj2me   false
if  javaversion equals       javaversion equals
id   j2se_13    jdk1 3 is still java2 platform with the same api
else if  javaversion equals
string vmversion   system getproperty
if  jvminfo vmcheck vmversion        jvminfo vmcheck vmversion
id   j2se_14
else
id   j2se_142
else if  javaversion equals
id   j2se_15
else if  javaversion equals
id   j2se_16
else
// aussme our lowest support unless the java spec
// is greater than our highest level.
id   j2se_13
try
if  float valueof javaversion  floatvalue   > 1 4f
id   5
catch  numberformatexception nfe
jdk_id   id
j2me   isj2me
java_sql_types_boolean    isj2me    id >  j2se_14  ?
org apache derby iapi reference jdbc30translation sql_types_boolean  java sql types bit
/**
check the vmversion against a speciifc value.
sun jvms are of the form
*/
private static boolean vmcheck string vmversion  string id
return vmversion equals id     vmversion startswith id
/**
return derby's understanding of the virtual machine's environment.
*/
public static string derbyvmlevel
switch  jdk_id
case j2se_13  return j2me ?
case j2se_14  return
case j2se_142  return
case j2se_15  return
case j2se_16  return
default  return