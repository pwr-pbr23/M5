/*
derby - class org.apache.derby.tools.urlcheck
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby tools
import org apache derby iapi reference attribute
import org apache derby iapi tools i18n localizedresource
import org apache derby impl tools ij attributeholder
import java util vector
import java util properties
import java util enumeration
import java util stringtokenizer
import java lang reflect field
import java sql sqlexception
/**
* this class takes a string used for a connection url and checks for
* correctness.
* to turn off output in ij, use the command line
* property of -durlcheck=false.
*
* param anurl	 the url used to connect to a database.
*
*/
public class urlcheck
public vector attributes
public static vector booleanattributes
//need so that appui class does not get garbage collected
localizedresource langutil   localizedresource getinstance
vector validprops
public urlcheck string anurl
try
//initialize the appui class
//parse the url string into properties.
properties props   getattributes anurl  new properties
check
catch  exception ex
ex printstacktrace
public static void main string args
if  args length > 0
//get the first argument passed in.
urlcheck acheck   new urlcheck args
public void check
enumeration e   attributes elements
while  e hasmoreelements
attributeholder anattribute    attributeholder e nextelement
//the check for duplicate must be done at the urlcheck level
//and not by each specific attribute.  only urlcheck knowns about
//all of the attributes and names.
checkforduplicate anattribute
//have each attribute check as much about themself as possible.
anattribute check  validprops
public void checkforduplicate attributeholder anattribute
enumeration e   attributes elements
while  e hasmoreelements
attributeholder aholder    attributeholder e nextelement
//if a duplicate is found, make sure that the message is only shown
//once for each attribute.
if  anattribute    aholder    anattribute getname   equals aholder getname
anattribute adderror langutil gettextmessage
public properties getattributes string url  properties props  throws exception
string protocol
if  url startswith
url startswith
validprops   null
else if  url startswith
protocol
validprops   getvalidderbyprops
else
validprops   null
//parse the url into attributes and put them in a properties object.
stringtokenizer st   new stringtokenizer url substring protocol length      "
attributes   new vector
while  st hasmoretokens
attributeholder anattribute   new attributeholder
string anatt
string avalue
string atoken   st nexttoken
//the "=" is the seperator between key and value.
int eqpos   atoken indexof
if  eqpos     1
//if there is no "=" this is not an attribute
continue
else
anatt    atoken substring 0  eqpos   trim
avalue    atoken substring eqpos   1   trim
anattribute setname anatt
anattribute setvalue avalue
anattribute settoken atoken
attributes addelement anattribute
props put anatt  atoken
return props
public static vector getbooleanattributes
if  booleanattributes    null
booleanattributes   new vector
booleanattributes addelement attribute data_encryption
booleanattributes addelement attribute create_attr
booleanattributes addelement attribute shutdown_attr
booleanattributes addelement attribute upgrade_attr
return booleanattributes
private static vector validderbyprops
private vector getvalidderbyprops
if  validderbyprops    null
try
vector props   new vector
class att   attribute class
//use reflection to get the list of valid keys from the attribute class.
//the attribute class is an interface and therefore all the field
//for it are public.
field fields   att getfields
for  int i   0  i < fields length  i
field afield    field fields
props addelement afield get att
validderbyprops   props
catch  exception ex
ex printstacktrace
return validderbyprops
end of getvalidderbyprops