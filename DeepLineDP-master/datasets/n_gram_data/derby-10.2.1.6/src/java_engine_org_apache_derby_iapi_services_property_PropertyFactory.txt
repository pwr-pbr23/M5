/*
derby - class org.apache.derby.iapi.services.property.propertyfactory
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi services property
import org apache derby catalog uuid
import org apache derby iapi services context contextmanager
import org apache derby iapi services locks lockfactory
import org apache derby iapi error standardexception
import org apache derby iapi store access transactioncontroller
import org apache derby iapi store access conglomerate methodfactory
import org apache derby iapi services property propertysetcallback
import java util properties
import java io file
import java io serializable
import java util dictionary
/**
module interface for an property validation.
<p>
an propertyfactory is typically obtained from the monitor:
<p>
<blockquote><pre>
// get the current validation factory.
propertyfactory af;
af = (propertyfactory) monitor.findservicemodule(this, org.apache.derby.iapi.reference.module.propertyfactory);
</pre></blockquote>
**/
public interface propertyfactory
/**************************************************************************
* methods that are property related.
**************************************************************************
*/
/**
* add a callback for a change in any property value.
* <br>
* the callback is made in the context of the transaction making the change.
*
* @param who   which object is called
**/
public void addpropertysetnotification
propertysetcallback     who
/**
* validate a property set.
* <p>
* validate a property set by calling all the registered property set
* notification functions with .
*
* @param p properties to validate.
* @param ignore properties to not validate in p. usefull for properties
*        that may not be set after boot.
*
* @exception standardexception throws if p fails a check.
**/
public void verifypropertyset
properties p
properties ignore
throws standardexception
/**
* validation a single property
*/
public void validatesingleproperty string key
serializable value
dictionary set
throws standardexception
/**
*/
public serializable dovalidateapplyandmap transactioncontroller tc
string key  serializable value
dictionary d  boolean dbonlyproperty
throws standardexception
/**
call the property set callbacks to map a proposed property value
to a value to save.
<p>
the caller must run this in a block synchronized on this
to serialize validations with changes to the set of
property callbacks
*/
public serializable domap string key
serializable value
dictionary set
throws standardexception