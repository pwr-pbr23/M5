/*
derby - class org.apache.derby.iapi.store.access.xatransactioncontroller
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi store access
import org apache derby iapi error standardexception
import org apache derby iapi store access transactioncontroller
/**
this interface allows access to commit,prepare,abort global transactions
as part of a two phase commit protocol, during runtime.
these interfaces have been chosen to be exact implementations required to
implement the xaresource interfaces as part of the jta standard extension.
<p>
it is expected that the following interfaces are only used during the
runtime portion of a 2 phase commit connection.
<p>
if a runtime exception causes a transaction abort (of a transaction that
has not been successfully prepared), then the transaction will act as if
xa_rollback() had been called.  the transaction will be aborted and any
other call other than destroy will throw exceptions.
<p>
the xaresource interface is a java mapping of the industry standard xa resource
manager interface.  please refer to: x/open cae specification - distributed
transaction processing: the xa specification, x/open document no. xo/cae/91/300
or isbn 1 872630 24 3.
<p>
note - all calls to this interface assume that the caller has insured that
there is no active work being done on the local instance of the transaction
in question.  resolve - not sure whether this means that the connection
associated with the transaction must be closed, or if it just means that
synchronization has been provided to provide correct mt behavior from above.
**/
public interface xatransactioncontroller extends transactioncontroller
/**************************************************************************
* public methods of this class:
**************************************************************************
*/
public static final int xa_rdonly   1
public static final int xa_ok       2
/**
* this method is called to commit the current xa global transaction.
* <p>
* once this call has been made all other calls on this controller other
* than destroy will throw exceptions.
* <p>
*
* @param onephase if true, the resource manager should use a one-phase
*                 commit protocol to commit the work done on behalf of
*                 current xid.
*
* @exception  standardexception  standard exception policy.
**/
public void xa_commit
boolean onephase
throws standardexception
/**
* this method is called to ask the resource manager to prepare for
* a transaction commit of the transaction specified in xid.
* <p>
* if xa_ok is returned then any call other than xa_commit() or xa_abort()
* will throw exceptions.  if xa_rdonly is returned then any call other
* than destroy() will throw exceptions.
*
* @return         a value indicating the resource manager's vote on the
*                 the outcome of the transaction.  the possible values
*                 are:  xa_rdonly or xa_ok.  if the resource manager wants
*                 to roll back the transaction, it should do so by
*                 throwing an appropriate xaexception in the prepare
*                 method.
*
* @exception  standardexception  standard exception policy.
**/
public int xa_prepare
throws standardexception
/**
* rollback the current global transaction.
* <p>
* the given transaction is roll'ed back and it's history is not
* maintained in the transaction table or long term log.
* <p>
* once this call has been made all other calls on this controller other
* than destroy will throw exceptions.
* <p>
*
* @exception  standardexception  standard exception policy.
**/
public void xa_rollback
throws standardexception