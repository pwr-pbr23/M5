/*
derby - class org.apache.derby.iapi.services.io.formatidoutputstream
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi services io
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi services info jvminfo
import java io dataoutputstream
import java io ioexception
import java io objectoutput
import java io objectoutputstream
import java io outputstream
import java io serializable
/**
a stream for serializing objects with format id tags.
<p>an objectoutput (henceforth 'out') preceeds objects it writes with
a format id. the companion formatidinputstream (henceforth 'in')
uses these format ids in parsing the stored data. the stream
can be thought of as containing a sequence of (formatid,object) pairs
interspersed with other data. the assumption is that out.writeobject()
produces these pairs and in.readobject() uses the format ids to
construct objects from the pairs that out.writeobject produced.
the description below describes each supported pair and how in.readobject()
processes it.
<ol>
<li> (null_format_id, nothing) in.readobject() returns null.
<li> (sring_format_id, utf8 encoded string)in.readobject reads and
returns this string.
<li> (serializable_format_id,serialized object) in.readobject() reads
the object using java serialization and returns it.
<li> (a format id for a storable, isnull flag and object if isnull == false)
(see note 1) in.readobject() reads the boolean isnull flag. if is null
is true, in.readobject() returns a storable object of the correct
class which is null. if ifnull is false, in.readobject() restores
the object using its readexternal() method.
<li> (a format id for a formatable which is not storable, the stored object)
(see note 1) in.readobject restores the object using its
readexternal() method.
</ol>
<p>note 1: the formatidinputstream uses
monitor.newinstancefromidentifier(format id) to get the class.
<p>note 2: an object may support more than one of the following
interfaces storable, formatable, serializable. in this case out.writeobject
use the first of these interfaces which the object supports (based on the order
listed here) to determine how to write the object.
*/
public class formatidoutputstream
extends dataoutputstream implements objectoutput  errorinfo
/**
constructor for a formatidoutputstream
@param out output goes here.
*/
public formatidoutputstream outputstream out
super out
/**
write a format id for the object provied followed by the
object itself to this formatidoutputstream.
@param ref a reference to the object.
@exception java.io.ioexception the exception.
*/
public void writeobject object ref  throws ioexception
if  ref    null
formatidutil writeformatidinteger this  storedformatids null_format_id
return
if  ref instanceof string
// string's are special cased to use writeutf which is more
// efficient than the default writeobject(string), but the format
// can only store 65535 bytes.  the worst case size conversion is
// 3 bytes for each unicode character in a string, so limiting
// writeutf optimization to strings smaller than 20000 should
// insure that we won't call writeutf() and produce more than
// 65535 bytes.
string  str    string  ref
if  str length   <  20000
formatidutil writeformatidinteger
this  storedformatids string_format_id
this writeutf  string ref
return
// add debugging code to read-in every formatable that we write
// to ensure that it can be read and it's correctly registered.
outputstream oldout   null
if  sanitymanager debug
if  ref instanceof formatable
oldout   this out
this out   new debugbyteteeoutputstream oldout
if  ref instanceof storable
storable s    storable ref
int fmtid   s gettypeformatid
if  fmtid    storedformatids serializable_format_id
formatidutil writeformatidinteger this  fmtid
boolean isnull   s isnull
writeboolean isnull
if   isnull
s writeexternal this
if  sanitymanager debug
debugbyteteeoutputstream  this out  checkobject s
this out   oldout
return
else if  ref instanceof formatable
formatable f
formatable  ref
int fmtid   f gettypeformatid
if  fmtid    storedformatids serializable_format_id
formatidutil writeformatidinteger this fmtid
f writeexternal this
if  sanitymanager debug
debugbyteteeoutputstream  this out  checkobject f
this out   oldout
return
/*
** otherwise we assume (ref instanceof serializable).
** if it isn't we'll get an error, which is what
** we would expect if someone uses something that
** doesn't support serializable/externalizable/formattable
** when it should.
*/
/*
** if we are debugging (serializetrace), we are
** going to print out every unexpected serialized
** class.  we print them out to stdout to help
** in debugging (so they cause diffs in test runs).
** this is only active in a sane server.
*/
if  sanitymanager debug
if  sanitymanager debug_on
string name   ref getclass   getname
if
name startswith
name startswith
sanitymanager debug
name
system out println
name
formatidutil writeformatidinteger this  storedformatids serializable_format_id
objectoutputstream oos   new objectoutputstream this
oos writeobject ref
oos flush
if  sanitymanager debug    ref instanceof formatable
debugbyteteeoutputstream  this out  checkobject  formatable  ref
this out   oldout
/**
set the outputstream for this formatidoutputstream to the stream
provided. it is the responsibility of the caller to flush or
close (as required) the previous stream this class was attached to.
@param out the new output stream.
*/
public void setoutput outputstream out
this out   out
this written   0
/* methods of errorinfo, used here for sqldata error reporting */
public string geterrorinfo
return null
public exception getnestedexception
return null