/*
derby - class org.apache.derby.iapi.services.monitor.persistentservice
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi services monitor
import org apache derby io storagefactory
import org apache derby iapi error standardexception
import org apache derby iapi reference property
import java util properties
import java util enumeration
import java io ioexception
/**
a persistentservice modularises the access to persistent services,
abstracting out details such as finding the list of services to
be started at boot time, finding the service.properties file
and creating and deleting the persistent storage for a service.
<p>
these modules must only be used by the monitor.
<p>
possible examples of implementations are:
<ul>
<li> store services in a directory in the file system.
<li> store services in a zip file
<li> service data is provided by a web server
<li> service data is stored on the class path.
</ul>
<p>
this class also serves as the registry the defined name for all
the implementations of persistentservice. these need to be kept track
of as they can be used in jdbc urls.
<p>
an implementation of persistentservice can implement modulesupportable
but must not implement modulecontrol. this is because the monitor will
not execute modulecontrol methods for a persistentservice.
*/
public interface persistentservice
/**
service stored in a directory.
*/
public static final string directory
/**
service stored on the class path (can be in a zip/jar on the class path).
*/
public static final string classpath
/**
service stored in a jar/zip archive.
*/
public static final string jar
/**
service stored in a web server .
*/
public static final string http
public static final string https
/**
the typical name for the service's properties file.
*/
public static final string properties_name
/**
the root of any stored data.
*/
public static final string root   property property_runtime_prefix
/**
the type of persistentservice used to boot the service.
*/
public static final string type   property property_runtime_prefix
/**
return the type of this service.
*/
public string gettype
/**
return an enumeration of service names descriptors (strings) that should be
be started at boot time by the monitor. the monitor will boot the service if getserviceproperties()
returns a properties object and the properties does not indicate the service should not be
auto-booted.
<p>
this method may return null if there are no services that need to be booted automatically at boot time.
<p>
the service name returned by the enumeration must be in its canonical form.
*/
public enumeration getboottimeservices
/**
for a service return its service properties, typically from the service.properties
file.
@return a properties object or null if servicename does not represent a valid service.
@exception standardexception service appears valid but the properties cannot be created.
*/
public properties getserviceproperties string servicename  properties defaultproperties
throws standardexception
/**
@exception standardexception properties cannot be saved.
*/
public void saveserviceproperties string servicename
storagefactory storagefactory
properties properties
boolean replace
throws standardexception
/**
save to a backup file.
@exception standardexception properties cannot be saved.
*/
public void saveserviceproperties string servicename
properties properties
boolean replace
throws standardexception
/**
returns the canonical name of the service.
@exception standardexception service root cannot be created.
*/
public string createserviceroot string name  boolean deleteexisting
throws standardexception
/**
remove a service's root and its contents.
*/
public boolean removeserviceroot string servicename
/**
convert a service name into its canonical form. returns null if the name
cannot be converted into a canonical form.
@exception no canonical name, name probably invalid
*/
public string getcanonicalservicename string name
throws standardexception
/**
return the user form of a service name. this name is only valid within
this system. the separator character used must be '/'
*/
public string getuserservicename string servicename
public boolean issameservice string servicename1  string servicename2
/**
* @return true if the persistentservice has a storagefactory, false if not.
*/
public boolean hasstoragefactory
/**
* get an initialized storagefactoryinstance
*
* @param usehome if true and the database name is not absolute then the database directory will be
*                relative to the home directory, if one is defined in the properties file.
* @param databasename the name of the database (directory). the name does not include the subsubprotocol.
*                     if null then the storage factory will only be used to deal with the directory containing
*                     the databases.
* @param tempdirname the name of the temporary file directory set in properties. if null then a default
*                    directory should be used. each database should get a separate temporary file
*                    directory within this one to avoid collisions.
* @param uniquename a unique name that can be used to create the temporary file directory for this database.
*                   if null then temporary files will not be created in this storagefactory instance.
*
* @return an initialized storagefactory.
*/
public storagefactory getstoragefactoryinstance boolean usehome
string databasename
string tempdirname
string uniquename
throws standardexception  ioexception