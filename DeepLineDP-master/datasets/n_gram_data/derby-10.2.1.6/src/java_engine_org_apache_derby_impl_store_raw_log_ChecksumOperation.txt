/*
derby - class org.apache.derby.impl.store.raw.log.checksumoperation
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl store raw log
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi services io formatable
import org apache derby iapi services io formatidutil
import org apache derby iapi services io storedformatids
import org apache derby catalog uuid
import org apache derby iapi store raw transaction
import org apache derby iapi store raw loggable
import org apache derby iapi store raw log loginstant
import org apache derby iapi store raw log logfactory
import org apache derby iapi store raw xact rawtransaction
import org apache derby iapi error standardexception
import org apache derby iapi services io compressednumber
import org apache derby iapi util bytearray
import java io externalizable
import java io outputstream
import java io inputstream
import java io objectinput
import java io objectoutput
import java io ioexception
import org apache derby iapi services io limitobjectinput
import java util zip checksum
import java util zip crc32
/**
a log operation that represents a checksum for a group of log records
that are written to the tranaction log file.
<pre>
@format_id	logop_checksum
the formatid is written by formatidoutputstream when this object is
written out by writeobject
@purpose  checksum one or more log records while writing to disk
@upgrade
@disk_layout
checksumalgo(byte)  	the checksum algorithm
checksumvalue(long)     the checksum value
datalength(int)			number of bytes that the checksum is calculated
@end_format
</pre>
@author  suresh thalamati
@see loggable
*/
public class checksumoperation implements loggable
private  byte   checksumalgo
private  long   checksumvalue
private  int	datalength
private checksum checksum
/*
* constant values for algorithm that are used to perform the checksum.
*/
public static final byte crc32_algorithm     byte  0x1    java util zip crc32
private static final int formatlength   formatidutil getformatidbytelength storedformatids logop_checksum
public void init
this checksumalgo   crc32_algorithm
initializechecksumalgo
datalength   0
// update the checksum
protected void update byte buf  int off  int len
checksum update buf  off   len
datalength    len
// reset the checksum
protected void reset
checksum reset
datalength   0
private void initializechecksumalgo
if checksumalgo    crc32_algorithm
this checksum   new crc32
/*
* formatable methods
*/
// no-arg constructor, required by formatable
public checksumoperation     super
public void writeexternal objectoutput out  throws ioexception
checksumvalue   checksum getvalue
out writebyte checksumalgo
out writeint datalength
out writelong checksumvalue
public void readexternal objectinput in  throws ioexception  classnotfoundexception
checksumalgo    byte  in readunsignedbyte
datalength   in readint
checksumvalue   in readlong
initializechecksumalgo
public int getstoredsize
return formatlength   1   4   8
/**
return my format identifier.
*/
public int gettypeformatid
return storedformatids logop_checksum
/**
loggable methods
*/
/**
*	nothing to do for the checksum log record because it does need to be
*  applied during redo.
*/
public void dome transaction xact  loginstant instant  limitobjectinput in  throws standardexception
/**
the default for prepared log is always null for all the operations
that don't have optionaldata.  if an operation has optional data,
the operation need to prepare the optional data for this method.
checksum has no optional data to write out
*/
public bytearray getpreparedlog
return  bytearray  null
/**
checksum does not need to be redone, it is used to just verify that
log records are written completely.
*/
public boolean needsredo transaction xact
return false
/**
checksum has no resources to release
*/
public void releaseresource transaction xact
/**
checksum is a raw store operation
*/
public int group
return loggable rawstore   loggable checksum
/**
* access attributes of the checksum log record
*/
protected int getdatalength
return datalength
protected boolean ischecksumvalid byte data  int off   int length
checksum reset
checksum update data   off   length
return checksum getvalue     checksumvalue
/**
debug: print self.
*/
public string tostring
if  sanitymanager debug
stringbuffer str   new stringbuffer 200
append
append
append checksumalgo
append
append checksumvalue
append    append datalength
return str tostring
else
return null