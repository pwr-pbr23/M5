/*
derby - class org.apache.derby.impl.sql.compile.sumavgaggregatedefinition
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl sql compile
import org apache derby iapi sql conn languageconnectioncontext
import org apache derby iapi services context contextservice
import org apache derby iapi services sanity sanitymanager
import org apache derby impl sql execute sumaggregator
import org apache derby impl sql execute avgaggregator
import org apache derby catalog typedescriptor
import org apache derby iapi types typeid
import org apache derby iapi types datatypedescriptor
import org apache derby iapi sql compile typecompiler
import org apache derby iapi sql compile typecompilerfactory
import org apache derby iapi sql compile compilercontext
import org apache derby iapi error standardexception
import org apache derby iapi reference classname
/**
* defintion for the sum()/avg() aggregates.
*
* @author jamie
*/
public class sumavgaggregatedefinition
implements aggregatedefinition
private boolean issum
/**
* niladic constructor.  does nothing.  for ease
* of use, only.
*/
public sumavgaggregatedefinition     super
/**
* determines the result datatype.  accept numberdatavalues
* only.
* <p>
* <i>note</i>: in the future you should be able to do
* a sum user data types.  one option would be to run
* sum on anything that implements plus().  in which
* case avg() would need divide().
*
* @param inputtype	the input type, either a user type or a java.lang object
*
* @return the output class (null if cannot operate on
*	value expression of this type.
*/
public final typedescriptor	getaggregator typedescriptor inputtype
stringbuffer aggregatorclass
try
languageconnectioncontext lcc    languageconnectioncontext
contextservice getcontext languageconnectioncontext context_id
datatypedescriptor dts   new datatypedescriptor   datatypedescriptor inputtype  inputtype isnullable
typeid comptype   dts gettypeid
compilercontext cc    compilercontext
contextservice getcontext compilercontext context_id
typecompilerfactory tcf   cc gettypecompilerfactory
typecompiler tc   tcf gettypecompiler comptype
/*
** if the class implements numberdatavalue, then we
** are in business.  return type is same as input
** type.
*/
if  comptype isnumerictypeid
aggregatorclass append getaggregatorclassname
datatypedescriptor outdts   tc resolvearithmeticoperation
dts  dts  getoperator
/*
** sum and avg may return null
*/
outdts setnullability true
return outdts
catch  standardexception e
if  sanitymanager debug
sanitymanager throwassert     e
return null
/**
* return the aggregator class.
*
* @return sumaggregator.class_name/avgaggregator.class_name
*/
private string getaggregatorclassname
if   issum
return classname sumaggregator
else
return classname avgaggregator
/**
* return the arithmetic operator corresponding
* to this operation.
*
* @return typecompiler.sum_op /typecompiler.avg_op
*/
protected string getoperator
if   issum
return typecompiler sum_op
else
return typecompiler avg_op
/**
* this is set by the parser.
*/
public final void setsumoravg boolean issum
this issum   issum