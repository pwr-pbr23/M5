/*
derby - class org.apache.derby.impl.sql.execute.renameconstantaction
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl sql execute
import org apache derby iapi sql dictionary schemadescriptor
import org apache derby iapi sql dictionary tabledescriptor
import org apache derby iapi sql dictionary columndescriptor
import org apache derby iapi sql dictionary columndescriptorlist
import org apache derby iapi sql dictionary conglomeratedescriptor
import org apache derby iapi sql dictionary constraintdescriptor
import org apache derby iapi sql dictionary constraintdescriptorlist
import org apache derby iapi sql dictionary referencedkeyconstraintdescriptor
import org apache derby iapi sql dictionary datadictionary
import org apache derby iapi store access transactioncontroller
import org apache derby iapi sql depend dependencymanager
import org apache derby iapi sql conn languageconnectioncontext
import org apache derby iapi reference sqlstate
import org apache derby iapi sql activation
import org apache derby iapi sql statementtype
import org apache derby iapi sql execute constantaction
import org apache derby iapi error standardexception
import org apache derby iapi services sanity sanitymanager
import org apache derby catalog uuid
import org apache derby iapi services io formatablebitset
/**
* this class  describes actions that are always performed for a
* rename table/column/index statement at execution time.
*
* @author mamta satoor.
*/
class renameconstantaction extends ddlsingletableconstantaction
private string fulltablename
private string tablename
private string newtablename
private string oldobjectname
private string newobjectname
private uuid schemaid
private schemadescriptor sd
/* you can rename using either alter table or rename command to
* rename a table/column. an index can only be renamed with rename
* command. usedaltertable flag is used to keep that information.
*/
private boolean usedaltertable
/* renamingwhat will be set to 1 if user is renaming a table.
* will be set to 2 if user is renaming a column and will be
* set to 3 if user is renaming an index
*/
private int renamingwhat
// constructors
/**
* make the constantaction for a rename table/column/index statement.
*
* @param fulltablename fully qualified table name
* @param tablename table name.
* @param oldobjectname this is either the name of column/index in case
*		of rename column/index. for rename table, this is null.
* @param newobjectname this is new name for table/column/index
* @param	sd schema that table lives in.
* @param tableid uuid for table
* @param usedaltertable true-used alter table, false-used rename.
*		for rename index, this will always be false because
*		there is no alter table command to rename index
* @param renamingwhat rename a 1 - table, 2 - column, 3 - index
*
*/
public	renameconstantaction
string fulltablename
string tablename
string oldobjectname
string newobjectname
schemadescriptor sd
uuid tableid
boolean usedaltertable
int renamingwhat
super tableid
this fulltablename   fulltablename
this tablename   tablename
this sd   sd
this usedaltertable   usedaltertable
this renamingwhat   renamingwhat
switch  this renamingwhat
case statementtype rename_table
this newtablename   newobjectname
this oldobjectname   null
this newobjectname newobjectname
break
case statementtype rename_column
case statementtype rename_index
this oldobjectname   oldobjectname
this newobjectname   newobjectname
break
default
if  sanitymanager debug
sanitymanager throwassert
if  sanitymanager debug
sanitymanager assert sd    null
// object methods
public	string	tostring
string renamestring
if  usedaltertable
renamestring
else
renamestring
switch  this renamingwhat
case statementtype rename_table
if usedaltertable
renamestring   renamestring   fulltablename       newtablename
else
renamestring   renamestring       fulltablename       newtablename
break
case statementtype rename_column
if usedaltertable
renamestring   renamestring   fulltablename       oldobjectname       newobjectname
else
renamestring   renamestring       fulltablename       oldobjectname       newobjectname
break
case statementtype rename_index
renamestring   renamestring       oldobjectname       newobjectname
break
default
if  sanitymanager debug
sanitymanager throwassert
break
return renamestring
// interface methods
/**
* the guts of the execution-time logic for rename table/column/index.
*
* @see constantaction#executeconstantaction
*
* @exception standardexception thrown on failure
*/
public void executeconstantaction
activation activation
throws standardexception
tabledescriptor td
uuid tableid
languageconnectioncontext lcc   activation getlanguageconnectioncontext
datadictionary dd   lcc getdatadictionary
dependencymanager dm   dd getdependencymanager
transactioncontroller tc   lcc gettransactionexecute
/*
** inform the data dictionary that we are about to write to it.
** there are several calls to data dictionary "get" methods here
** that might be done in "read" mode in the data dictionary, but
** it seemed safer to do this whole operation in "write" mode.
**
** we tell the data dictionary we're done writing at the end of
** the transaction.
*/
dd startwriting lcc
td   dd gettabledescriptor tableid
if  td    null
throw standardexception newexception
sqlstate lang_table_not_found_during_execution  fulltablename
/*
** if the schema descriptor is null, then
** we must have just read ourselves in.
** so we will get the corresponding schema
** descriptor from the data dictionary.
*/
if  sd    null
sd   getandcheckschemadescriptor dd  schemaid
long heapid   td getheapconglomerateid
/* need to lock table, beetle 4271
*/
locktableforddl tc  heapid  true
/* need to get td again, in case it's changed before lock acquired
*/
td   dd gettabledescriptor tableid
if  td    null
throw standardexception newexception
sqlstate lang_table_not_found_during_execution  fulltablename
switch  renamingwhat
case statementtype rename_table
execgutsrenametable td  activation
break
case statementtype rename_column
execgutsrenamecolumn td  activation
break
case statementtype rename_index
execgutsrenameindex td  activation
break
default
if  sanitymanager debug
sanitymanager throwassert
break
//do necessary work for rename table at execute time.
private void execgutsrenametable
tabledescriptor td  activation activation
throws standardexception
constraintdescriptorlist constraintdescriptorlist
constraintdescriptor constraintdescriptor
languageconnectioncontext lcc   activation getlanguageconnectioncontext
datadictionary dd   lcc getdatadictionary
dependencymanager dm   dd getdependencymanager
transactioncontroller tc   lcc gettransactionexecute
dm invalidatefor td  dependencymanager rename  lcc
/* look for foreign key dependency on the table. if found any,
use dependency manager to pass the rename action to the
dependents. */
constraintdescriptorlist   dd getconstraintdescriptors td
for int index 0  index<constraintdescriptorlist size    index
constraintdescriptor   constraintdescriptorlist elementat index
if  constraintdescriptor instanceof referencedkeyconstraintdescriptor
dm invalidatefor constraintdescriptor  dependencymanager rename  lcc
// drop the table
dd droptabledescriptor td  sd  tc
// change the table name of the table descriptor
td settablename newtablename
// add the table descriptor with new name
dd adddescriptor td  sd  datadictionary systables_catalog_num
false  tc
//do necessary work for rename column at execute time.
private void execgutsrenamecolumn
tabledescriptor td  activation activation
throws standardexception
columndescriptor columndescriptor   null
int columnposition   0
constraintdescriptorlist constraintdescriptorlist
constraintdescriptor constraintdescriptor
languageconnectioncontext lcc   activation getlanguageconnectioncontext
datadictionary dd   lcc getdatadictionary
dependencymanager dm   dd getdependencymanager
transactioncontroller tc   lcc gettransactionexecute
/* get the column descriptor for column to be renamed and
* using it's position in the table, set the referenced
* column map of the table indicating which column is being
* renamed. dependency manager uses this to find out the
* dependents on the column.
*/
columndescriptor   td getcolumndescriptor oldobjectname
columnposition   columndescriptor getposition
formatablebitset torename   new formatablebitset td getcolumndescriptorlist   size     1
torename set columnposition
td setreferencedcolumnmap torename
dm invalidatefor td  dependencymanager rename  lcc
//look for foreign key dependency on the column.
constraintdescriptorlist   dd getconstraintdescriptors td
for int index 0  index<constraintdescriptorlist size    index
constraintdescriptor   constraintdescriptorlist elementat index
int referencedcolumns   constraintdescriptor getreferencedcolumns
int numrefcols   referencedcolumns length
for  int j   0  j < numrefcols  j
if   referencedcolumns    columnposition
constraintdescriptor instanceof referencedkeyconstraintdescriptor
dm invalidatefor constraintdescriptor  dependencymanager rename  lcc
// drop the column
dd dropcolumndescriptor td getuuid    oldobjectname  tc
columndescriptor setcolumnname newobjectname
dd adddescriptor columndescriptor  td
datadictionary syscolumns_catalog_num  false  tc
//need to do following to reload the cache so that table
//descriptor now has new column name
td   dd gettabledescriptor td getobjectid
//do necessary work for rename index at execute time.
private void execgutsrenameindex
tabledescriptor td  activation activation
throws standardexception
languageconnectioncontext lcc   activation getlanguageconnectioncontext
datadictionary dd   lcc getdatadictionary
dependencymanager dm   dd getdependencymanager
transactioncontroller tc   lcc gettransactionexecute
//for indexes, we only invalidate sps, rest we ignore(ie views)
dm invalidatefor td  dependencymanager rename_index  lcc
conglomeratedescriptor conglomeratedescriptor
dd getconglomeratedescriptor oldobjectname  sd  true
if  conglomeratedescriptor    null
throw standardexception newexception sqlstate lang_index_not_found_during_execution
oldobjectname
/* drop the index descriptor */
dd dropconglomeratedescriptor conglomeratedescriptor  tc
// change the index name of the index descriptor
conglomeratedescriptor setconglomeratename newobjectname
// add the index descriptor with new name
dd adddescriptor conglomeratedescriptor  sd
datadictionary sysconglomerates_catalog_num  false  tc
/* following is used for error handling by repsourcecompilerutilities
* in it's method checkifrenamedependency */
public	string	gettablename  	  return tablename