/*
derby - class org.apache.derby.iapi.services.io.counteroutputstream
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi services io
import java io outputstream
import java io ioexception
import java io eofexception
/**
an outputstream that simply provides methods to count the number
of bytes written to an underlying stream.
*/
public class counteroutputstream extends outputstream implements limit
protected outputstream out
private int count
private int limit
/**
create a counteroutputstream that will discard any bytes
written but still coutn them and call its reset method
so that the count is intially zero.
*/
public counteroutputstream
super
public void setoutputstream outputstream out
this out   out
setlimit  1
/**
get count of bytes written to the stream since the last
reset() call.
*/
public int getcount
return count
/**
set a limit at which an exception will be thrown. this allows callers
to count the number of bytes up to some point, without having to complete
the count. e.g. a caller may only want to see if some object will write out
over 4096 bytes, without waiting for all 200,000 bytes of the object to be written.
<br>
if the passed in limit is 0 or negative then the stream will count bytes without
throwing an exception.
@see eofexception
*/
public void setlimit int limit
count   0
this limit   limit
return
public int clearlimit
int unused   limit   count
limit   0
return unused
/*
** methods of outputstream
*/
/**
add 1 to the count.
@see outputstream#write
*/
public  void write int b  throws ioexception
if   limit >  0       count   1  > limit
throw new eofexception
out write b
count
/**
add b.length to the count.
@see outputstream#write
*/
public void write byte b  throws ioexception
if   limit >  0       count   b length  > limit
throw new eofexception
out write b
count    b length
/**
add len to the count, discard the data.
@see outputstream#write
*/
public void write byte b  int off  int len  throws ioexception
if   limit >  0       count   len  > limit
throw new eofexception
out write b  off  len
count    len