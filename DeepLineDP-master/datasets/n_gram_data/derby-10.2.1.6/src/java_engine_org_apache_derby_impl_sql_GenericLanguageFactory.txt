/*
derby - class org.apache.derby.impl.sql.genericlanguagefactory
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl sql
import org apache derby iapi services property propertyfactory
import org apache derby iapi store access accessfactory
import org apache derby iapi store access transactioncontroller
import org apache derby iapi sql languagefactory
import org apache derby iapi sql parametervalueset
import org apache derby iapi sql resultdescription
import org apache derby iapi sql resultcolumndescriptor
import org apache derby iapi sql row
import org apache derby iapi services monitor monitor
import org apache derby iapi services monitor modulecontrol
import org apache derby iapi error standardexception
import org apache derby iapi sql conn languageconnectionfactory
import org apache derby iapi services loader classinspector
import org apache derby iapi services io formatidutil
import java util properties
/**
the languagefactory provides system-wide services that
are available on the database api.
@author ames
*/
public class genericlanguagefactory implements languagefactory  modulecontrol
private genericparametervalueset emptyset
public genericlanguagefactory
/*
modulecontrol interface
*/
/**
* start-up method for this instance of the language factory.
* this service is expected to be started and accessed relative
* to a database.
*
* @param startparams	the start-up parameters (ignored in this case)
@exception standardexception thrown if module cannot be booted.
*
*/
public void boot boolean create  properties startparams  throws standardexception
languageconnectionfactory lcf    languageconnectionfactory   monitor findservicemodule this  languageconnectionfactory module
propertyfactory pf   lcf getpropertyfactory
if  pf    null
pf addpropertysetnotification new languagedbpropertysetter
emptyset   new genericparametervalueset null  0  false
/**
* stop this module.  in this case, nothing needs to be done.
*/
public void stop
/* languagefactory methods */
/**
* factory method for getting a parametervalueset
*
* @see languagefactory#newparametervalueset
*/
public parametervalueset newparametervalueset classinspector ci  int numparms  boolean hasreturnparam
if  numparms    0
return emptyset
return new genericparametervalueset ci  numparms  hasreturnparam
/**
* get a new result description from the input result
* description.  picks only the columns in the column
* array from the inputresultdescription.
*
* @param inputresultdescription  the input rd
* @param thecols array of ints, non null
*
* @return resultdescription the rd
*/
public resultdescription getresultdescription
resultdescription	inputresultdescription
int				thecols
return new genericresultdescription inputresultdescription  thecols
/**
* get a new result description
*
* @param cols an array of col descriptors
* @param type the statement type
*
* @return resultdescription the rd
*/
public resultdescription getresultdescription
resultcolumndescriptor	cols
string						type
return new genericresultdescription cols  type
/*
** remind: we will need a row and column factory
** when we make putresultsets available for users'
** server-side jdbc methods.
*/