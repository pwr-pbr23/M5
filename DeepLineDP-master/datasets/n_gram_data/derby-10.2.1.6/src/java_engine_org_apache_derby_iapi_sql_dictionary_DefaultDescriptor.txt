/*
derby - class org.apache.derby.iapi.sql.dictionary.defaultdescriptor
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi sql dictionary
import org apache derby iapi sql depend provider
import org apache derby iapi sql depend dependent
import org apache derby iapi reference sqlstate
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi sql statementtype
import org apache derby catalog dependablefinder
import org apache derby catalog dependable
import org apache derby iapi services io storedformatids
import org apache derby iapi error standardexception
import org apache derby iapi sql depend dependencymanager
import org apache derby iapi sql depend dependent
import org apache derby iapi sql depend dependency
import org apache derby iapi sql depend provider
import org apache derby iapi services i18n messageservice
import org apache derby iapi sql conn languageconnectioncontext
import org apache derby catalog uuid
/**
* this interface is used to get information from a defaultdescriptor.
*
* @author jerry
*/
public final class defaultdescriptor
extends tupledescriptor
implements uniquetupledescriptor  provider  dependent
private final int			columnnumber
private final uuid		defaultuuid
private final uuid		tableuuid
/**
* constructor for a defaultdescriptor
*
* @param datadictionary    the dd
* @param defaultuuid		the uuid of the default
* @param tableuuid			the uuid of the table
* @param columnnumber		the column number of the column that the default is for
*/
public defaultdescriptor datadictionary datadictionary  uuid defaultuuid  uuid tableuuid  int columnnumber
super  datadictionary
this defaultuuid   defaultuuid
this tableuuid   tableuuid
this columnnumber   columnnumber
/**
* get the uuid of the default.
*
* @return	the uuid of the default.
*/
public uuid	getuuid
return defaultuuid
/**
* get the uuid of the table.
*
* @return	the uuid of the table.
*/
public uuid	gettableuuid
return tableuuid
/**
* get the column number of the column.
*
* @return	the column number of the column.
*/
public int	getcolumnnumber
return columnnumber
/**
* convert the defaultdescriptor to a string.
*
* @return	a string representation of this defaultdescriptor
*/
public string	tostring
if  sanitymanager debug
/*
** note: this does not format table, because table.tostring()
** formats columns, leading to infinite recursion.
*/
return     defaultuuid
tableuuid
columnnumber
else
return
////////////////////////////////////////////////////////////////////
//
// provider interface
//
////////////////////////////////////////////////////////////////////
/**
@return the stored form of this provider
@see dependable#getdependablefinder
*/
public dependablefinder getdependablefinder
return	getdependablefinder storedformatids default_descriptor_finder_v01_id
/**
* return the name of this provider.  (useful for errors.)
*
* @return string	the name of this provider.
*/
public string getobjectname
return
/**
* get the provider's uuid
*
* @return 	the provider's uuid
*/
public uuid getobjectid
return defaultuuid
/**
* get the provider's type.
*
* @return char		the provider's type.
*/
public string getclasstype
return dependable default
//////////////////////////////////////////////////////
//
// dependent interface
//
//////////////////////////////////////////////////////
/**
* check that all of the dependent's dependencies are valid.
*
* @return true if the dependent is currently valid
*/
public synchronized boolean isvalid
return true
/**
* prepare to mark the dependent as invalid (due to at least one of
* its dependencies being invalid).
*
* @param action	the action causing the invalidation
* @param p		the provider
*
* @exception standardexception thrown if unable to make it invalid
*/
public void preparetoinvalidate provider p  int action
languageconnectioncontext lcc
throws standardexception
dependencymanager dm   getdatadictionary   getdependencymanager
switch  action
/*
** currently, the only thing we are depenedent
** on is an alias.
*/
default
datadictionary dd   getdatadictionary
columndescriptor cd   dd getcolumndescriptorbydefaultid defaultuuid
tabledescriptor td   dd gettabledescriptor cd getreferencinguuid
throw standardexception newexception sqlstate lang_provider_has_dependent_object
dm getactionstring action
p getobjectname
messageservice gettextmessage
sqlstate lang_column_default
td getqualifiedname
cd getcolumnname
/**
* mark the dependent as invalid (due to at least one of
* its dependencies being invalid).  always an error
* for a constraint -- should never have gotten here.
*
* @param	action	the action causing the invalidation
*
* @exception standardexception thrown if called in sanity mode
*/
public void makeinvalid int action  languageconnectioncontext lcc
throws standardexception
/*
** we should never get here, we should have barfed on
** preparetoinvalidate().
*/
if  sanitymanager debug
dependencymanager dm
dm   getdatadictionary   getdependencymanager
sanitymanager throwassert
dm getactionstring action
/**
* attempt to revalidate the dependent. meaningless
* for defaults.
*/
public void makevalid languageconnectioncontext lcc