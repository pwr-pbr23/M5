/*
derby - class org.apache.derby.impl.store.access.btree.index.b2inolocking
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl store access btree index
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi error standardexception
import org apache derby iapi store access conglomeratecontroller
import org apache derby iapi types rowlocation
import org apache derby iapi store access transactioncontroller
import org apache derby iapi store raw fetchdescriptor
import org apache derby iapi store raw lockingpolicy
import org apache derby iapi store raw page
import org apache derby iapi store raw recordhandle
import org apache derby iapi store raw transaction
import org apache derby iapi types datavaluedescriptor
import org apache derby impl store access btree btree
import org apache derby impl store access btree btreelockingpolicy
import org apache derby impl store access btree controlrow
import org apache derby impl store access btree leafcontrolrow
import org apache derby impl store access btree openbtree
import org apache derby impl store access btree btreerowposition
import org apache derby impl store access btree waiterror
/**
secondary index locking policy that does no locking.
<p>
this is used when the caller knows that logical locks are already obtained
so need not be requested again.  for instance when inserting a row into
an index, a x row lock has already been obtained when the row was inserted
into the base table, so there is no need to get another lock in the
secondary index.
<p>
this class overrides all interfaces of btreelockingpolicy making them
no-ops.
**/
public class b2inolocking implements btreelockingpolicy
/**************************************************************************
* constructors for this class:
**************************************************************************
*/
public b2inolocking
transaction             rawtran
int                     lock_level
lockingpolicy           locking_policy
conglomeratecontroller  base_cc
openbtree               open_btree
protected b2inolocking
/**************************************************************************
* public methods of this class:
**************************************************************************
*/
/**************************************************************************
* abstract protected lockscan*() locking methods of btree:
*     lockscan                 - lock the scan page
*     lockscanforreclaimspace  - lock page for reclaiming deleted rows.
*     lockscanrow              - lock row and possibly the scan page
*     unlockscan               - unlock the scan page
*     unlockscanrecordafterread- unlock the scan record
**************************************************************************
*/
/**
* lock a control row page for scan.
* <p>
* see btree.lockscan() for more info.
*
* @exception  standardexception  standard exception policy.
**/
public boolean lockscan
leafcontrolrow          current_leaf
controlrow              aux_control_row
boolean                 forupdate
int                     lock_operation
throws standardexception
return true
/**
* lock a control row page for reclaiming deleted rows.
* <p>
* when reclaiming deleted rows during split need to get an exclusive
* scan lock on the page, which will mean there are no other scans
* positioned on the page.  if there are other scans positioned, just
* give up on reclaiming space now.
*
* @return true if lock was granted nowait, else false and not lock was
*         granted.
*
* @exception  standardexception  standard exception policy.
**/
public boolean lockscanforreclaimspace
leafcontrolrow          current_leaf
throws standardexception
// if doing no locking don't allow reclaiming space.
return false
/**
* lock a btree row to determine if it is a committed deleted row.
* <p>
* request an exclusive lock on the row located at the given slot, nowait.
* return true if the lock is granted, otherwise false.
* <p>
*
* @param open_btree        the conglomerate we are locking.
* @param leaf              the leaf page with the row to lock.
* @param template          a scratch area to use to read in rowlocation.
* @param slot_no           the slot of row on "current_leaf"
*
* @exception  standardexception  standard exception policy.
**/
public boolean lockscancommitteddeletedrow
openbtree               open_btree
leafcontrolrow          leaf
datavaluedescriptor   template
fetchdescriptor         lock_fetch_desc
int                     slot_no
throws standardexception
return true
/**
* lock a row as part of doing the scan.
* <p>
* lock the row at the given slot (or the previous row if slot is 0).
* get the scan lock on the page if "request_scan_lock" is true.
* <p>
* if this routine returns true all locks were acquired while maintaining
* the latch on leaf.  if this routine returns false, locks may or may
* not have been acquired, and the routine should be called again after
* the client has researched the tree to reget the latch on the
* appropriate page.
* (p>
* as a sided effect stores the value of the record handle of the current
* scan lock.
*
* @return whether locks were acquired without releasing latch on leaf.
*
* @param pos               the position of the row to lock.
* @param request_scan_lock whether to request the page scan lock, should
*                          only be requested once per page in the scan.
*
* @exception  standardexception  standard exception policy.
**/
public boolean lockscanrow
openbtree               open_btree
btree                   btree
btreerowposition        pos
boolean                 request_scan_lock
fetchdescriptor         lock_fetch_desc
datavaluedescriptor   lock_template
rowlocation             lock_row_loc
boolean                 previous_key_lock
boolean                 forupdate
int                     lock_operation
throws standardexception
return true
/**
* release read lock on a row.
*
* @param forupdate         is the scan for update or for read only.
*
* @exception  standardexception  standard exception policy.
**/
public void unlockscanrecordafterread
btreerowposition        pos
boolean                 forupdate
throws standardexception
return
/**
* unlock the lock gotten by lockscan().
* <p>
* see btree.unlockscan() for more info.
*
**/
public void unlockscan
long    page_number
/**************************************************************************
* abstract protected locknonscan*() locking methods of btree:
*
*     locknonscanpreviousrow   - lock the row previous to the current
*     locknonscanrow           - lock the input row
**************************************************************************
*/
/**
* lock the row previous to the input row.
* <p>
* see btree.lockpreviousrow() for more info.
*
* @exception  standardexception  standard exception policy.
**/
public boolean locknonscanpreviousrow
btree                   btree
leafcontrolrow          current_leaf
int                     current_slot
fetchdescriptor         lock_fetch_desc
datavaluedescriptor   lock_template
rowlocation             lock_row_loc
openbtree               open_btree
int                     lock_operation
int                     lock_duration
throws standardexception
return true
/**
* lock the in memory row.
* <p>
* see btree.lockrow() for more info.
*
* @exception  standardexception  standard exception policy.
**/
public boolean locknonscanrow
btree                   btree
leafcontrolrow          current_leaf
leafcontrolrow          aux_leaf
datavaluedescriptor   current_row
int                     lock_operation
throws standardexception
return true
public boolean locknonscanrowonpage
btree                   btree
leafcontrolrow          current_leaf
int                     current_slot
fetchdescriptor         lock_fetch_desc
datavaluedescriptor   lock_template
rowlocation             lock_row_loc
int                     lock_operation
throws standardexception
return true