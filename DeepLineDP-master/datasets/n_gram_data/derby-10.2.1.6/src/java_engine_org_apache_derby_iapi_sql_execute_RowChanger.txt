/*
derby - class org.apache.derby.iapi.sql.execute.rowchanger
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi sql execute
import org apache derby iapi services context contextservice
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi error standardexception
import org apache derby iapi sql conn languageconnectioncontext
import org apache derby iapi sql dictionary indexrowgenerator
import org apache derby iapi store access conglomeratecontroller
import org apache derby iapi types rowlocation
import org apache derby iapi store access transactioncontroller
/**
perform row at a time dml operations of tables and maintain indexes.
*/
public interface rowchanger
/**
open this rowchanger.
<p>note to avoid the cost of fixing indexes that do not
change during update operations use openforupdate().
@param lockmode	the lock mode to use
(row or table, see transactioncontroller)
@exception standardexception thrown on failure to convert
*/
public void open int lockmode
throws standardexception
/**
* set the row holder for this changer to use.
* if the row holder is set, it wont bother
* saving copies of rows needed for deferred
* processing.  also, it will never close the
* passed in rowholder.
*
* @param rowholder	the row holder
*/
public void setrowholder temporaryrowholder rowholder
/**
* sets the index names of the tables indices. used for error reporting.
*
* @param indexnames		names of all the indices on this table.
*/
public void setindexnames string indexnames
/**
open this rowchanger to avoid fixing indexes that do not change
during update operations.
@param fixonupdate fixonupdat[ix] == true ==> fix index 'ix' on
an update operation.
@param lockmode	the lock mode to use
(row or table, see transactioncontroller)
@param wait		if true, then the caller wants to wait for locks. false will be
when we using a nested user xaction - we want to timeout right away
if the parent holds the lock.  (bug 4821)
@exception standardexception thrown on failure to convert
*/
public void openforupdate  boolean fixonupdate  int lockmode  boolean wait
throws standardexception
/**
insert a row into the table and perform associated index maintenance.
@param baserow the row.
@exception standardexception		thrown on error
*/
public void insertrow execrow baserow
throws standardexception
/**
delete a row from the table and perform associated index maintenance.
@param baserow the row.
@param baserowlocation the row's base conglomerate
location
@exception standardexception		thrown on error
*/
public void deleterow execrow baserow  rowlocation baserowlocation
throws standardexception
/**
update a row in the table and perform associated index maintenance.
@param oldbaserow the old image of the row.
@param newbaserow the new image of the row.
@param baserowlocation the row's base conglomerate
location
@exception standardexception		thrown on error
*/
public void updaterow execrow oldbaserow
execrow newbaserow
rowlocation baserowlocation
throws standardexception
/**
finish processing the changes.  this means applying the deferred
inserts for updates to unique indexes.
@exception standardexception		thrown on error
*/
public void finish
throws standardexception
/**
close this rowchanger.
@exception standardexception		thrown on error
*/
public void close
throws standardexception
/**
* return the conglomeratecontroller from this rowchanger.
* this is useful when copying properties from heap to
* temp conglomerate on insert/update/delete.
*
* @return the conglomeratecontroller from this rowchanger.
*/
public conglomeratecontroller getheapconglomeratecontroller
/**
open this rowchanger.
<p>note to avoid the cost of fixing indexes that do not
change during update operations use openforupdate().
@param lockmode	the lock mode to use
(row or table, see transactioncontroller)
@param wait		if true, then the caller wants to wait for locks. false will be
when we using a nested user xaction - we want to timeout right away
if the parent holds the lock.
@exception standardexception thrown on failure to convert
*/
public void open int lockmode  boolean wait
throws standardexception