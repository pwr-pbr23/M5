/*
derby - class org.apache.derby.impl.sql.compile.subquerylist
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package	org apache derby impl sql compile
import org apache derby iapi sql dictionary datadictionary
import org apache derby iapi error standardexception
import org apache derby iapi services sanity sanitymanager
/**
* a subquerylist represents a list of subquerys within a specific clause
* (select, where or having) in a dml statement.  it extends querytreenodevector.
*
* @author jerry brenner
*/
public class subquerylist extends querytreenodevector
/**
* prints the sub-nodes of this object.  see querytreenode.java for
* how tree printing is supposed to work.
*
* @param depth		the depth of this node in the tree
*/
public void printsubnodes int depth
if  sanitymanager debug
subquerynode	subquerynode
super printsubnodes depth
for  int index   0  index < size    index
subquerynode    subquerynode  elementat index
subquerynode treeprint depth   1
/**
* add a subquery to the list.
*
* @param subquerynode	a subquerynode to add to the list
*
*/
public void addsubquerynode subquerynode subquerynode  throws standardexception
addelement subquerynode
/**
* preprocess a subquerylist.  for now, we just preprocess each subquerynode
* in the list.
*
* @param	numtables			number of tables in the dml statement
* @param	outerfromlist		fromlist from outer query block
* @param	outersubquerylist	subquerylist from outer query block
* @param	outerpredicatelist	predicatelist from outer query block
*
* @exception standardexception		thrown on error
*/
public void preprocess int numtables
fromlist outerfromlist
subquerylist outersubquerylist
predicatelist outerpredicatelist
throws standardexception
subquerynode	subquerynode
int size   size
for  int index   0  index < size  index
subquerynode    subquerynode  elementat index
subquerynode preprocess numtables  outerfromlist
outersubquerylist
outerpredicatelist
/**
* optimize the subqueries in this list.
*
* @param datadictionary	the data dictionary to use for optimization
* @param outerrows			the optimizer's estimate of the number of
*							times this subquery will be executed.
*
* @exception standardexception		thrown on error
*/
public void optimize datadictionary datadictionary  double outerrows
throws standardexception
int size   size
for  int index   0  index < size  index
subquerynode	subquerynode
subquerynode    subquerynode  elementat index
subquerynode optimize datadictionary  outerrows
/**
* modify the access paths for all subqueries in this list.
*
* @see resultsetnode#modifyaccesspaths
*
* @exception standardexception		thrown on error
*/
public void modifyaccesspaths
throws standardexception
int size   size
for  int index   0  index < size  index
subquerynode	subquerynode
subquerynode    subquerynode  elementat index
subquerynode modifyaccesspaths
/**
* search to see if a query references the specifed table name.
*
* @param name		table name (string) to search for.
* @param basetable	whether or not name is for a base table
*
* @return	true if found, else false
*
* @exception standardexception		thrown on error
*/
public boolean referencestarget string name  boolean basetable
throws standardexception
int size   size
for  int index   0  index < size  index
subquerynode	subquerynode
subquerynode    subquerynode  elementat index
if  subquerynode ismaterializable
continue
if  subquerynode getresultset   referencestarget name  basetable
return true
return false
/**
* return true if the node references session schema tables (temporary or permanent)
*
* @return	true if references session schema tables, else false
*
* @exception standardexception		thrown on error
*/
public boolean referencessessionschema
throws standardexception
int size   size
for  int index   0  index < size  index
subquerynode	subquerynode
subquerynode    subquerynode  elementat index
if  subquerynode getresultset   referencessessionschema
return true
return false
/**
* set the point of attachment in all subqueries in this list.
*
* @param pointofattachment		the point of attachment
*
* @exception standardexception			thrown on error
*/
public void setpointofattachment int pointofattachment
throws standardexception
int size   size
for  int index   0  index < size  index
subquerynode	subquerynode
subquerynode    subquerynode  elementat index
subquerynode setpointofattachment pointofattachment
/**
* decrement (query block) level (0-based) for
* all of the tables in this subquery list.
* this is useful when flattening a subquery.
*
* @param decrement	the amount to decrement by.
*/
void decrementlevel int decrement
int size   size
for  int index   0  index < size  index
subquerynode  elementat index   getresultset   decrementlevel decrement