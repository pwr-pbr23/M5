/*
derby - class org.apache.derby.iapi.types.numberdatavalue
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi types
import org apache derby iapi error standardexception
public interface numberdatavalue extends datavaluedescriptor
/**
* the minimum scale when dividing decimals
*/
public static final int min_decimal_divide_scale   4
public static final int max_decimal_precision_scale   31
/**
* the sql + operator.
*
* @param addend1	one of the addends
* @param addend2	the other addend
* @param result	the result of the previous call to this method, null
*					if not called yet.
*
* @return	the sum of the two addends
*
* @exception standardexception		thrown on error, if result is non-null then its value will be unchanged.
*/
public numberdatavalue plus numberdatavalue addend1
numberdatavalue addend2
numberdatavalue result
throws standardexception
/**
* the sql - operator.
*
* @param left		the left operand
* @param right		the right operand
* @param result	the result of the previous call to this method, null
*					if not called yet.
*
* @return	left - right
*
* @exception standardexception		thrown on error, if result is non-null then its value will be unchanged.
*/
public numberdatavalue minus numberdatavalue left
numberdatavalue right
numberdatavalue result
throws standardexception
/**
* the sql * operator.
*
* @param left		the left operand
* @param right		the right operand
* @param result	the result of the previous call to this method, null
*					if not called yet.
*
* @return	left * right
*
* @exception standardexception		thrown on error, if result is non-null then its value will be unchanged.
*/
public numberdatavalue times numberdatavalue left
numberdatavalue right
numberdatavalue result
throws standardexception
/**
* the sql / operator.
*
* @param dividend		the numerator
* @param divisor		the denominator
* @param result		the result of the previous call to this method, null
*						if not called yet.
*
* @return	dividend / divisor
*
* @exception standardexception		thrown on error, if result is non-null then its value will be unchanged.
*/
public numberdatavalue divide numberdatavalue dividend
numberdatavalue divisor
numberdatavalue result
throws standardexception
/**
* the sql / operator.
*
* @param dividend		the numerator
* @param divisor		the denominator
* @param result		the result of the previous call to this method, null
*						if not called yet.
* @param scale			the scale of the result, for decimal type.  if pass
*						in value < 0, can calculate it dynamically.
*
* @return	dividend / divisor
*
* @exception standardexception		thrown on error, if result is non-null then its value will be unchanged.
*/
public numberdatavalue divide numberdatavalue dividend
numberdatavalue divisor
numberdatavalue result
int scale
throws standardexception
/**
* the sql mod operator.
*
* @param dividend		the numerator
* @param divisor		the denominator
* @param result		the result of the previous call to this method, null
*						if not called yet.
*
* @return	dividend / divisor
*
* @exception standardexception		thrown on error, if result is non-null then its value will be unchanged.
*/
public numberdatavalue mod numberdatavalue dividend
numberdatavalue divisor
numberdatavalue result
throws standardexception
/**
* the sql unary - operator.  negates this numberdatavalue.
*
* @param result	the result of the previous call to this method, null
*					if not called yet.
*
* @return	- operand
*
* @exception standardexception		thrown on error, if result is non-null then its value will be unchanged.
*/
public numberdatavalue minus numberdatavalue result
throws standardexception
/**
* the sql absolute operator.  absolute value of this numberdatavalue.
*
* @param result    the result of the previous call to this method, null
*                  if not called yet.
*
* @exception standardexception     thrown on error, if result is non-null then its value will be unchanged.
*/
public numberdatavalue absolute numberdatavalue result
throws standardexception
/**
* the sql sqrt operator.  sqrt value of this numberdatavalue.
*
* @param result    the result of the previous call to this method, null
*                  if not call yet.
*
* @exception standardexception     thrown on error (a negative number), if result is non-null then its value will be unchanged.
*/
public numberdatavalue sqrt numberdatavalue result
throws standardexception
/**
* set the value of this numberdatavalue to the given value.
this is only intended to be called when mapping values from
the java space into the sql space, e.g. parameters and return
types from procedures and functions. each specific type is only
expected to handle the explicit type according the jdbc.
<ul>
<li> smallint from java.lang.integer
<li> integer from java.lang.integer
<li> long from java.lang.long
<li> float from java.lang.float
<li> double from java.lang.double
<li> decimal from java.math.bigdecimal
</ul>
*
* @param thevalue	an number containing the value to set this
*					numberdatavalue to.  null means set the value
*					to sql null.
*
*/
public void setvalue number thevalue  throws standardexception
/**
return the sql precision of this specific decimal value.
this does not match the return from bigdecimal.precision()
added in j2se 5.0, which represents the precision of the unscaled value.
if the value does not represent a sql decimal then
the return is undefined.
*/
public int getdecimalvalueprecision
/**
return the sql scale of this specific decimal value.
this does not match the return from bigdecimal.scale()
since in j2se 5.0 onwards that can return negative scales.
if the value does not represent a sql decimal then
the return is undefined.
*/
public int getdecimalvaluescale