/*
derby - class org.apache.derby.impl.sql.compile.accesspathimpl
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package	org apache derby impl sql compile
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi sql compile accesspath
import org apache derby iapi sql compile costestimate
import org apache derby iapi sql compile joinstrategy
import org apache derby iapi sql compile optimizer
import org apache derby iapi sql dictionary conglomeratedescriptor
import org apache derby iapi sql dictionary tabledescriptor
import org apache derby iapi sql dictionary datadictionary
import org apache derby iapi sql dictionary constraintdescriptor
import org apache derby iapi error standardexception
import org apache derby iapi reference sqlstate
class accesspathimpl implements accesspath
conglomeratedescriptor	cd   null
private costestimate	costestimate   null
boolean					coveringindexscan   false
boolean					nonmatchingindexscan   false
joinstrategy			joinstrategy   null
int						lockmode
optimizer				optimizer
private string			accesspathname
accesspathimpl optimizer optimizer
this optimizer   optimizer
/** @see accesspath#setconglomeratedescriptor */
public void setconglomeratedescriptor conglomeratedescriptor cd
this cd   cd
/** @see accesspath#getconglomeratedescriptor */
public conglomeratedescriptor getconglomeratedescriptor
return cd
/** @see accesspath#setcostestimate */
public void setcostestimate costestimate costestimate
/*
** costestimates are mutable, so keep the best cost estimate in
** a copy.
*/
if  this costestimate    null
if  costestimate    null
this costestimate   costestimate cloneme
else
if  costestimate    null
this costestimate   null
else
this costestimate setcost costestimate
/** @see accesspath#getcostestimate */
public costestimate getcostestimate
return costestimate
/** @see accesspath#setcoveringindexscan */
public void setcoveringindexscan boolean coveringindexscan
this coveringindexscan   coveringindexscan
/** @see accesspath#getcoveringindexscan */
public boolean getcoveringindexscan
return coveringindexscan
/** @see accesspath#setnonmatchingindexscan */
public void setnonmatchingindexscan boolean nonmatchingindexscan
this nonmatchingindexscan   nonmatchingindexscan
/** @see accesspath#getnonmatchingindexscan */
public boolean getnonmatchingindexscan
return nonmatchingindexscan
/** @see accesspath#setjoinstrategy */
public void setjoinstrategy joinstrategy joinstrategy
this joinstrategy   joinstrategy
/** @see accesspath#getjoinstrategy */
public joinstrategy getjoinstrategy
return joinstrategy
/** @see accesspath#setlockmode */
public void setlockmode int lockmode
this lockmode   lockmode
/** @see accesspath#getlockmode */
public int getlockmode
return lockmode
/** @see accesspath#copy */
public void copy accesspath copyfrom
setconglomeratedescriptor copyfrom getconglomeratedescriptor
setcostestimate copyfrom getcostestimate
setcoveringindexscan copyfrom getcoveringindexscan
setnonmatchingindexscan copyfrom getnonmatchingindexscan
setjoinstrategy copyfrom getjoinstrategy
setlockmode copyfrom getlockmode
/** @see accesspath#getoptimizer */
public optimizer getoptimizer
return optimizer
public string tostring
if  sanitymanager debug
return     cd
costestimate
coveringindexscan
nonmatchingindexscan
joinstrategy
lockmode
optimizer getlevel
else
return
/** @see accesspath#initializeaccesspathname */
public void initializeaccesspathname datadictionary dd  tabledescriptor td
throws standardexception
if  cd    null
return
if  cd isconstraint
constraintdescriptor constraintdesc
dd getconstraintdescriptor td  cd getuuid
if  constraintdesc    null
throw standardexception newexception
sqlstate lang_object_not_found
td getname
accesspathname   constraintdesc getconstraintname
else if  cd isindex
accesspathname   cd getconglomeratename
else
accesspathname