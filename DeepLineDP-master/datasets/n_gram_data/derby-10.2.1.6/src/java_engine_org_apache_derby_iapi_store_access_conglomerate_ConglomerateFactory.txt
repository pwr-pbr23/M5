/*
derby - class org.apache.derby.iapi.store.access.conglomerate.conglomeratefactory
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi store access conglomerate
import java util properties
import org apache derby catalog uuid
import org apache derby iapi error standardexception
import org apache derby iapi store access columnordering
import org apache derby iapi store raw containerkey
import org apache derby iapi store raw transaction
import org apache derby iapi types datavaluedescriptor
/**
the factory interface for all conglomerate access methods.
**/
public interface conglomeratefactory extends methodfactory
static final int    heap_factory_id       0x00
static final int    btree_factory_id      0x01
/**
* return the conglomerate factory id.
* <p>
* return a number in the range of 0-15 which identifies this factory.
* code which names conglomerates depends on this range currently, but
* could be easily changed to handle larger ranges.   one hex digit seemed
* reasonable for the number of conglomerate types currently implemented
* (heap, btree) and those that might be implmented in the future: gist,
* gist btree, gist rtree, hash, others? ).
* <p>
*
* @return an unique identifier used to the factory into the conglomid.
*
**/
int getconglomeratefactoryid
/**
create the conglomerate and return a conglomerate object
for it.  it is expected that the caller of this method will place the
the resulting object in the conglomerate directory.
@param xact_mgr             transaction to perform the create in.
@param segment              segment to create the conglomerate in.
@param input_containerid    containerid to assign the container, or
containerhandle.default_assign_id if you want
raw store to assign an id.
@param template             template of row in the conglomerate.
@param columnorder          columns sort order for index creation
@param properties           properties associated with the conglomerate.
@exception standardexception if the conglomerate could not be
opened for some reason, or if an error occurred in one of
the lower level modules.
**/
conglomerate createconglomerate
transactionmanager      xact_mgr
int                     segment
long                    input_containerid
datavaluedescriptor   template
columnordering		columnorder
properties              properties
int						temporaryflag
throws standardexception
/**
* return conglomerate object for conglomerate with container_key.
* <p>
* return the conglomerate object.  this is implementation specific.
* examples of what will be done is using the key to find the file where
* the conglomerate is located, and then executing implementation specific
* code to instantiate an object from reading a "special" row from a
* known location in the file.  in the btree case the btree conglomerate
* is stored as a column in the control row on the root page.
* <p>
* this operation is costly so it is likely an implementation using this
* will cache the conglomerate row in memory so that subsequent accesses
* need not perform this operation.
*
* @param xact_mgr      transaction to perform the create in.
* @param container_key the unique id of the existing conglomerate.
*
* @return an instance of the conglomerate.
*
* @exception  standardexception  standard exception policy.
**/
conglomerate readconglomerate
transactionmanager      xact_mgr
containerkey            container_key
throws standardexception