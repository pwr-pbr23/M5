/*
derby - class org.apache.derby.impl.store.access.conglomerate.genericcontroller
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl store access conglomerate
import org apache derby iapi reference sqlstate
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi error standardexception
import org apache derby iapi store access conglomerate conglomerate
import org apache derby iapi store access conglomerate logicalundo
import org apache derby iapi store access conglomerate transactionmanager
import org apache derby iapi store access conglomeratecontroller
import org apache derby iapi store access dynamiccompiledopenconglominfo
import org apache derby iapi store access rowutil
import org apache derby iapi store access spaceinfo
import org apache derby iapi store raw containerhandle
import org apache derby iapi store raw page
import org apache derby iapi store raw recordhandle
import org apache derby iapi store raw transaction
import org apache derby iapi types rowlocation
import org apache derby iapi services io formatablebitset
import java util properties
/**
**/
abstract class genericcontroller
/**************************************************************************
* fields of the class
**************************************************************************
*/
protected openconglomerate    open_conglom
/**************************************************************************
* constructors for this class:
**************************************************************************
*/
/**************************************************************************
* private/protected methods of this class:
**************************************************************************
*/
protected void getrowpositionfromrowlocation
rowlocation row_loc
rowposition pos
throws standardexception
// not implemented in default conglomerate, needs to be overridden.
throw standardexception newexception
sqlstate heap_unimplemented_feature
protected void queuedeletepostcommitwork
rowposition pos
throws standardexception
// not implemented in default conglomerate, needs to be overridden.
throw standardexception newexception
sqlstate heap_unimplemented_feature
/**************************************************************************
* public methods of this class:
**************************************************************************
*/
public void init
openconglomerate    open_conglom
throws standardexception
if  sanitymanager debug
sanitymanager assert open_conglom    null
this open_conglom   open_conglom
public openconglomerate getopenconglom
return open_conglom
/**************************************************************************
* public methods implementing conglomeratecontroller which just
*     delegate to openconglomerate:
**************************************************************************
*/
public void checkconsistency
throws standardexception
open_conglom checkconsistency
public void debugconglomerate
throws standardexception
open_conglom debugconglomerate
public void gettableproperties properties prop
throws standardexception
open_conglom gettableproperties prop
public properties getinternaltablepropertyset properties prop
throws standardexception
return open_conglom getinternaltablepropertyset prop
public spaceinfo getspaceinfo
throws standardexception
return open_conglom getspaceinfo
public void close
throws standardexception
if  open_conglom    null
open_conglom close
public boolean iskeyed
return open_conglom iskeyed
public rowlocation newrowlocationtemplate
throws standardexception
if  open_conglom isclosed
open_conglom reopen
return open_conglom newrowlocationtemplate
/**
* is the open btree table locked?
**/
public boolean istablelocked
return open_conglom istablelocked
/**
* get the total estimated number of rows in the container.
* <p>
* the number is a rough estimate and may be grossly off.  in general
* the server will cache the row count and then occasionally write
* the count unlogged to a backing store.  if the system happens to
* shutdown before the store gets a chance to update the row count it
* may wander from reality.
* <p>
* this call is currently only supported on heap conglomerates, it
* will throw an exception if called on btree conglomerates.
*
* @return the total estimated number of rows in the conglomerate.
*
* @exception  standardexception  standard exception policy.
**/
public long getestimatedrowcount
throws standardexception
if  open_conglom isclosed
open_conglom reopen
// don't return 0 rows (return 1 instead), as this often leads the
// optimizer to produce plans which don't use indexes because of the 0
// row edge case.
//
// eventually the plan is recompiled when rows are added, but we
// have seen multiple customer cases of deadlocks and timeouts
// because of these 0 row based plans.
long row_count   open_conglom getcontainer   getestimatedrowcount 0
return   row_count    0  ? 1   row_count
/**
* set the total estimated number of rows in the container.
* <p>
* often, after a scan, the client of rawstore has a much better estimate
* of the number of rows in the container than what store has.  for
* instance if we implement some sort of update statistics command, or
* just after a create index a complete scan will have been done of the
* table.  in this case this interface allows the client to set the
* estimated row count for the container, and store will use that number
* for all future references.
* <p>
* this call is currently only supported on heap conglomerates, it
* will throw an exception if called on btree conglomerates.
*
* @param count the estimated number of rows in the container.
*
* @exception  standardexception  standard exception policy.
**/
public void setestimatedrowcount long count
throws standardexception
containerhandle container   open_conglom getcontainer
if  container    null
open_conglom reopen
open_conglom getcontainer   setestimatedrowcount
count     unused flag    0
/**************************************************************************
* public methods implementing conglomeratecontroller:
**************************************************************************
*/