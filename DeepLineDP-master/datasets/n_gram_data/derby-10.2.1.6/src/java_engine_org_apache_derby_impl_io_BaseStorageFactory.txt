/*
derby - class org.apache.derby.impl.io.basestoragefactory
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl io
import org apache derby iapi store raw data datafactory
import org apache derby io storagefactory
import org apache derby io storagefile
import java io file
import java io ioexception
/**
* this class provides a base for implementations of the storagefactory interface. it is used by the
* database engine to access persistent data and transaction logs under the directory (default) subsubprotocol.
*/
abstract class basestoragefactory implements storagefactory
string home
protected storagefile tempdir
protected string tempdirpath
protected string datadirectory
protected string separateddatadirectory     datadirectory   separator
protected string uniquename
protected string canonicalname
private static final string temp_dir_prefix
/**
* most of the initialization is done in the init method.
*/
basestoragefactory
/**
* classes implementing the storagefactory interface must have a null
* constructor.  this method is called when the database is booted up to
* initialize the class. it should perform all actions necessary to start the
* basic storage, such as creating a temporary file directory.
*
* the init method will be called once, before any other method is called, and will not
* be called again.
*
* @param home the name of the directory containing the database. it comes from the system.home system property.
*             it may be null. a storage factory may decide to ignore this parameter. (for instance the classpath
*             storage factory ignores it.
* @param databasename the name of the database (directory). all relative pathnames are relative to this directory.
*                     if null then the storage factory will only be used to deal with the directory containing
*                     the databases.
* @param tempdirname the name of the temporary file directory set in properties. if null then a default
*                    directory should be used. each database should get a separate temporary file
*                    directory within this one to avoid collisions.
* @param uniquename a unique name that can be used to create the temporary file directory for this database.
*
* @exception ioexception on an error (unexpected).
*/
public void init  string home  string databasename  string tempdirname  string uniquename
throws ioexception
if  databasename    null
datadirectory   databasename
separateddatadirectory   databasename   getseparator
this home   home
this uniquename   uniquename
tempdirpath   tempdirname
doinit
end of init
abstract void doinit   throws ioexception
public void shutdown
/**
* get the canonical name of the database. this is a name that uniquely identifies it. it is system dependent.
*
* the normal, disk based implementation uses method java.io.file.getcanonicalpath on the directory holding the
* database to construct the canonical name.
*
* @return the canonical name
*
* @exception ioexception if an io error occurred during the construction of the name.
*/
public string getcanonicalname   throws ioexception
return canonicalname
/**
* construct a storagefile from a path name.
*
* @param path the path name of the file
*
* @return a corresponding storagefile object
*/
public storagefile newstoragefile  string path
if  path    null    tempdirpath    null    path startswith  tempdirpath
return new dirfile  path
return newpersistentfile  path
/**
* construct a storagefile from a directory and file name.
*
* @param directoryname the directory part of the path name.
* @param filename the name of the file within the directory.
*
* @return a corresponding storagefile object
*/
public storagefile newstoragefile  string directoryname  string filename
if  directoryname    null
return newstoragefile  filename
else if  tempdirpath    null    directoryname startswith  tempdirpath
return new dirfile directoryname  filename
else
return newpersistentfile  directoryname  filename
/**
* construct a storagefile from a directory and file name.
*
* @param directoryname the directory part of the path name.
* @param filename the name of the file within the directory.
*
* @return a corresponding storagefile object
*/
public storagefile newstoragefile  storagefile directoryname  string filename
if  directoryname    null
return newstoragefile  filename
if  filename    null
return directoryname
else if  tempdirpath    null    directoryname getpath   startswith tempdirpath
return new dirfile   dirfile  directoryname  filename
return newpersistentfile  directoryname  filename
/**
* construct a persistent storagefile from a path name.
*
* @param path the path name of the file. guaranteed not to be in the temporary file directory. if null
*             then the database directory should be returned.
*
* @return a corresponding storagefile object
*/
abstract storagefile newpersistentfile  string path
/**
* construct a persistent storagefile from a directory and path name.
*
* @param directoryname the path name of the directory. guaranteed not to be in the temporary file directory.
*                  guaranteed not to be null
* @param filename the name of the file within the directory. guaranteed not to be null.
*
* @return a corresponding storagefile object
*/
abstract storagefile newpersistentfile  string directoryname  string filename
/**
* construct a persistent storagefile from a directory and path name.
*
* @param directoryname the path name of the directory. guaranteed not to be to be null. guaranteed to be
*                  created by a call to one of the newpersistentfile methods.
* @param filename the name of the file within the directory. guaranteed not to be null.
*
* @return a corresponding storagefile object
*/
abstract storagefile newpersistentfile  storagefile directoryname  string filename
/**
* get the pathname separator character used by the storagefile implementation.
*
* @return the pathname separator character. (normally '/' or '\').
*/
public char getseparator
// temp files are always java.io.file's and use its separator.
return file separatorchar
/**
* get the abstract name of the directory that holds temporary files.
*
* @return a directory name
*/
public storagefile gettempdir
return tempdir
/**
* this method is used to determine whether the storage is fast (ram based) or slow (disk based).
* it may be used by the database engine to determine the default size of the page cache.
*
* @return <b>true</b> if the storage is fast, <b>false</b> if it is slow.
*/
public boolean isfast
return false
public boolean isreadonlydatabase
return true
/**
* determine whether the storage supports random access. if random access is not supported then
* it will only be accessed using inputstreams and outputstreams (if the database is writable).
*
* @return <b>true</b> if the storage supports random access, <b>false</b> if it is writable.
*/
public boolean supportsrandomaccess
return false
void createtempdir   throws java io ioexception
if  uniquename    null
return
if  tempdirpath    null
tempdir   new dirfile  tempdirpath  temp_dir_prefix concat uniquename
else if  isreadonlydatabase
tempdir   new dirfile  readonlytemproot    temp_dir_prefix concat uniquename
else
tempdir   new dirfile  canonicalname  datafactory temp_segment_name
// blow away any temporary directory
tempdir deleteall
tempdir mkdirs
tempdirpath   tempdir getpath
end of createtempdir
private string readonlytemproot   throws java io ioexception
// return the system temp dir by creating a temp file
// and finding its parent.
file temp   file createtempfile
string parent   temp getparent
temp delete
return parent
public int getstoragefactoryversion
return storagefactory version_number