/*
derby - class org.apache.derby.iapi.services.io.formatableproperties
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi services io
import org apache derby iapi services io arrayinputstream
import org apache derby iapi services io formatidutil
import org apache derby iapi services io formatable
import org apache derby iapi services io storedformatids
import java util enumeration
import java util properties
import java io ioexception
import java io objectoutput
import java io objectinput
/**
* a formatable holder for a java.util.properties.
* used to avoid serializing properties.
*/
public class formatableproperties extends properties implements formatable
/********************************************************
**
**	this class implements formatable. that means that it
**	can write itself to and from a formatted stream. if
**	you add more fields to this class, make sure that you
**	also write/read them with the writeexternal()/readexternal()
**	methods.
**
**	if, inbetween releases, you add more fields to this class,
**	then you should bump the version number emitted by the gettypeformatid()
**	method.
**
********************************************************/
/**
* niladic constructor for formatable
*/
public formatableproperties
this null
/**
* creates an empty property list with the specified
* defaults.
*
* @param defaults the defaults
*/
public formatableproperties properties defaults
super defaults
/**
clear the defaults from this properties set.
this sets the default field to null and thus
breaks any link with the properties set that
was the default.
*/
public void cleardefaults
defaults   null
//////////////////////////////////////////////
//
// formatable
//
//////////////////////////////////////////////
/**
* write the properties out.  step through
* the enumeration and write the strings out
* in utf.
*
* @param out write bytes here
*
* @exception ioexception thrown on error
*/
public void writeexternal objectoutput out  throws ioexception
out writeint size
for  enumeration e   keys    e hasmoreelements
string key    string e nextelement
out writeutf key
out writeutf getproperty key
/**
* read the properties from a stream of stored objects.
*
* @param in read this.
*
* @exception ioexception					thrown on error
*/
public void readexternal objectinput in
throws ioexception
int size   in readint
for    size > 0  size
put in readutf    in readutf
public void readexternal arrayinputstream in
throws ioexception
int size   in readint
for    size > 0  size
put in readutf    in readutf
/**
* get the formatid which corresponds to this class.
*
*	@return	the formatid of this class
*/
public	int	gettypeformatid  	  return storedformatids formatable_properties_v01_id