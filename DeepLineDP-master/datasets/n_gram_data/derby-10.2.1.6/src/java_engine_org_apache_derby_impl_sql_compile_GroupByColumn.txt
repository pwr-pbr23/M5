/*
derby - class org.apache.derby.impl.sql.compile.groupbycolumn
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package	org apache derby impl sql compile
import org apache derby iapi error standardexception
import org apache derby iapi sql dictionary datadictionary
import org apache derby iapi types typeid
import org apache derby iapi reference sqlstate
import org apache derby iapi services sanity sanitymanager
import java util vector
/**
* a groupbycolumn is a column in the group by clause.
*
* @author jerry
*/
public class groupbycolumn extends orderedcolumn
private valuenode columnexpression
/**
* initializer.
*
* @param colref	the columnreference for the grouping column
*/
public void init object colref
this columnexpression    valuenode colref
/**
* convert this object to a string.  see comments in querytreenode.java
* for how this should be done for tree printing.
*
* @return	this object as a string
*/
public string tostring
if  sanitymanager debug
return   columnexpression super tostring
else
return
/**
* prints the sub-nodes of this object.  see querytreenode.java for
* how tree printing is supposed to work.
*
* @param depth		the depth of this node in the tree
*/
public void printsubnodes int depth
if  sanitymanager debug
super printsubnodes depth
if  columnexpression    null
printlabel depth
columnexpression treeprint depth   1
/**
* get the name of this column
*
* @return	the name of this column
*/
public string getcolumnname
return columnexpression getcolumnname
/**
* bind this grouping column.
*
* @param fromlist			the from list to use for binding
* @param subquerylist		the subquerylist we are building as we hit
*							subquerynodes.
* @param aggregatevector	the aggregate vector we build as we hit
*							aggregatenodes.
*
* @exception standardexception	thrown on error
*/
public void bindexpression
fromlist fromlist
subquerylist subquerylist
vector	aggregatevector
throws standardexception
/* bind the columnreference to the fromlist */
columnexpression    valuenode  columnexpression bindexpression fromlist
subquerylist
aggregatevector
// verify that we can group on the column
if  columnexpression isparameternode
throw standardexception newexception sqlstate lang_invalid_col_ref_grouped_select_list
columnexpression
/*
* do not check to see if we can map user types
* to built-in types.  the ability to do so does
* not mean that ordering will work.  in fact,
* as of version 2.0, ordering does not work on
* user types.
*/
typeid ctid   columnexpression gettypeid
if    ctid orderable getclassfactory
throw standardexception newexception sqlstate lang_column_not_orderable_during_execution
ctid getsqltypename
public valuenode getcolumnexpression
return columnexpression
public void setcolumnexpression valuenode cexpr
this columnexpression   cexpr