/*
derby - class org.apache.derby.impl.store.access.heap.heapcostcontroller
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl store access heap
import org apache derby iapi reference sqlstate
import org apache derby iapi reference property
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi error standardexception
import org apache derby iapi store access conglomerate transactionmanager
import org apache derby iapi types rowlocation
import org apache derby iapi store access storecostcontroller
import org apache derby iapi store access storecostresult
import org apache derby iapi store raw containerhandle
import org apache derby iapi store raw lockingpolicy
import org apache derby iapi store raw rawstorefactory
import org apache derby iapi store raw transaction
import org apache derby impl store access conglomerate genericcostcontroller
import org apache derby impl store access conglomerate openconglomerate
import org apache derby iapi store access rowutil
import org apache derby iapi types datavaluedescriptor
import org apache derby iapi services io formatablebitset
import java util properties
/**
the storecostcontroller interface provides methods that an access client
(most likely the system optimizer) can use to get store's estimated cost of
various operations on the conglomerate the storecostcontroller was opened
for.
<p>
it is likely that the implementation of storecostcontroller will open
the conglomerate and will leave the conglomerate open until the
storecostcontroller is closed.  this represents a significant amount of
work, so the caller if possible should attempt to open the storecostcontroller
once per unit of work and rather than close and reopen the controller.  for
instance if the optimizer needs to cost 2 different scans against a single
conglomerate, it should use one instance of the storecostcontroller.
<p>
the locking behavior of the implementation of a storecostcontroller is
undefined, it may or may not get locks on the underlying conglomerate.  it
may or may not hold locks until end of transaction.
an optimal implementation will not get any locks on the underlying
conglomerate, thus allowing concurrent access to the table by a executing
query while another query is optimizing.
<p>
the storecostcontroller gives 2 kinds of cost information
**/
public class heapcostcontroller
extends genericcostcontroller implements storecostcontroller
/**
* only lookup these estimates from raw store once.
**/
long    num_pages
long    num_rows
long    page_size
long    row_size
/* private/protected methods of this class: */
/**
* initialize the cost controller.
* <p>
* let super.init() do it's work and then get the initial stats about the
* table from raw store.
*
* @exception  standardexception  standard exception policy.
**/
public void init
openconglomerate    open_conglom
throws standardexception
super init open_conglom
containerhandle container   open_conglom getcontainer
// look up costs from raw store.
num_rows    container getestimatedrowcount   unused flag   0
// don't use 0 rows (use 1 instead), as 0 rows often leads the
// optimizer to produce plans which don't use indexes because of the 0
// row edge case.
//
// eventually the plan is recompiled when rows are added, but we
// have seen multiple customer cases of deadlocks and timeouts
// because of these 0 row based plans.
if  num_rows    0
num_rows   1
// eliminate the allocation page from the count.
num_pages   container getestimatedpagecount    unused flag    0
properties prop   new properties
prop put property page_size_parameter
container getcontainerproperties prop
page_size
integer parseint prop getproperty property page_size_parameter
row_size    num_pages   page_size   num_rows
return
/* public methods of this class: */
/* public methods of xxxx class: */
/**
* return the cost of calling conglomeratecontroller.fetch().
* <p>
* return the estimated cost of calling conglomeratecontroller.fetch()
* on the current conglomerate.  this gives the cost of finding a record
* in the conglomerate given the exact rowlocation of the record in
* question.
* <p>
* the validcolumns describes what kind of row is being fetched,
* ie. it may be cheaper to fetch a partial row than a complete row.
* <p>
*
*
* @param validcolumns    a description of which columns to return from
*                        row on the page into "templaterow."  templaterow,
*                        and validcolumns work together to
*                        describe the row to be returned by the fetch -
*                        see rowutil for description of how these three
*                        parameters work together to describe a fetched
*                        "row".
*
* @param access_type     describe the type of access the query will be
*                        performing to the conglomeratecontroller.
*
*                        storecost_clustered - the location of one fetch
*                            is likely clustered "close" to the next
*                            fetch.  for instance if the query plan were
*                            to sort the rowlocations of a heap and then
*                            use those rowlocations sequentially to
*                            probe into the heap, then this flag should
*                            be specified.  if this flag is not set then
*                            access to the table is assumed to be
*                            random - ie. the type of access one gets
*                            if you scan an index and probe each row
*                            in turn into the base table is "random".
*
*
* @return the cost of the fetch.
*
* @exception  standardexception  standard exception policy.
*
* @see rowutil
**/
public double getfetchfromrowlocationcost
formatablebitset      validcolumns
int         access_type
throws standardexception
double ret_cost
// get "per-byte" cost of fetching a row from the page.
ret_cost   row_size   base_row_per_bytecost
long num_pages_per_row    row_size   page_size    1
if   access_type   storecostcontroller storecost_clustered     0
// this is the "base" unit case.
ret_cost     base_uncached_row_fetch_cost   num_pages_per_row
else
ret_cost     base_cached_row_fetch_cost   num_pages_per_row
return ret_cost
/**
* calculate the cost of a scan.
* <p>
* cause this object to calculate the cost of performing the described
* scan.  the interface is setup such that first a call is made to
* calcualtescancost(), and then subsequent calls to accessor routines
* are made to get various pieces of information about the cost of
* the scan.
* <p>
* for the purposes of costing this routine is going to assume that
* a page will remain in cache between the time one next()/fetchnext()
* call and a subsequent next()/fetchnext() call is made within a scan.
* <p>
* the result of costing the scan is placed in the "cost_result".
* the cost of the scan is stored by calling
* cost_result.setestimatedcost(cost).
* the estimated row count is stored by calling
* cost_result.setestimatedrowcount(row_count).
* <p>
* the estimated cost of the scan assumes the caller will
* execute a fetchnext() loop for every row that qualifies between
* start and stop position.  note that this cost is different than
* execution a next(),fetch() loop; or if the scan is going to be
* terminated by client prior to reaching the stop condition.
* <p>
* the estimated number of rows returned from the scan
* assumes the caller will execute a fetchnext() loop for every
* row that qualifies between start and stop position.
* <p>
*
*
* @param scan_type       the type of scan that will be executed.  there
*                        are currently 2 types:
*                        storecost_scan_normal - scans will be executed
*                        using the standard next/fetch, where each fetch
*                        can retrieve 1 or many rows (if fetchnextgroup()
*                        interface is used).
*
*                        storecost_scan_set - the entire result set will
*                        be retrieved using the the fetchset() interface.
*
* @param row_count       estimated total row count of the table.  the
*                        current system tracks row counts in heaps better
*                        than btree's (btree's have "rows" which are not
*                        user rows - branch rows, control rows), so
*                        if available the client should
*                        pass in the base table's row count into this
*                        routine to be used as the index's row count.
*                        if the caller has no idea, pass in -1.
*
* @param group_size      the number of rows to be returned by a single
*                        fetch call for storecost_scan_normal scans.
*
* @param forupdate       should be true if the caller intends to update
*                        through the scan.
*
* @param scancolumnlist  a description of which columns to return from
*                        every fetch in the scan.  template,
*                        and scancolumnlist work together
*                        to describe the row to be returned by the scan -
*                        see rowutil for description of how these three
*                        parameters work together to describe a "row".
*
* @param template        a prototypical row which the scan may use to
*                        maintain its position in the conglomerate.  not
*                        all access method scan types will require this,
*                        if they don't it's ok to pass in null.
*                        in order to scan a conglomerate one must
*                        allocate 2 separate "row" templates.  the "row"
*                        template passed into openscan is for the private
*                        use of the scan itself, and no access to it
*                        should be made by the caller while the scan is
*                        still open.  because of this the scanner must
*                        allocate another "row" template to hold the
*                        values returned from fetch().  note that this
*                        template must be for the full row, whether a
*                        partial row scan is being executed or not.
*
* @param startkeyvalue   an indexable row which holds a (partial) key
*                        value which, in combination with the
*                        startsearchoperator, defines the starting
*                        position of the scan.  if null, the starting
*                        position of the scan is the first row of the
*                        conglomerate.  the startkeyvalue must only
*                        reference columns included in the scancolumnlist.
*
* @param startsearchoperator
*                        an operator which defines how the startkeyvalue
*                        is to be searched for.  if startsearchoperation
*                        is scancontroller.ge, the scan starts on the
*                        first row which is greater than or equal to the
*                        startkeyvalue.  if startsearchoperation is
*                        scancontroller.gt, the scan starts on the first
*                        row whose key is greater than startkeyvalue.  the
*                        startsearchoperation parameter is ignored if the
*                        startkeyvalue parameter is null.
*
* @param stopkeyvalue    an indexable row which holds a (partial) key
*                        value which, in combination with the
*                        stopsearchoperator, defines the ending position
*                        of the scan.  if null, the ending position of the
*                        scan is the last row of the conglomerate.  the
*                        stopkeyvalue must only reference columns included
*                        in the scancolumnlist.
*
* @param stopsearchoperator
*                        an operator which defines how the stopkeyvalue
*                        is used to determine the scan stopping position.
*                        if stopsearchoperation is scancontroller.ge, the
*                        scan stops just before the first row which is
*                        greater than or equal to the stopkeyvalue.  if
*                        stopsearchoperation is scancontroller.gt, the
*                        scan stops just before the first row whose key
*                        is greater than startkeyvalue.  the
*                        stopsearchoperation parameter is ignored if the
*                        stopkeyvalue parameter is null.
*
*
* @param access_type     describe the type of access the query will be
*                        performing to the scancontroller.
*
*                        storecost_clustered - the location of one scan
*                            is likely clustered "close" to the previous
*                            scan.  for instance if the query plan were
*                            to used repeated "reopenscan()'s" to probe
*                            for the next key in an index, then this flag
*                            should be be specified.  if this flag is not
*                            set then each scan will be costed independant
*                            of any other predicted scan access.
*
*
* @exception  standardexception  standard exception policy.
*
* @see rowutil
**/
public void getscancost
int                     scan_type
long                    row_count
int                     group_size
boolean                 forupdate
formatablebitset        scancolumnlist
datavaluedescriptor   template
datavaluedescriptor   startkeyvalue
int                     startsearchoperator
datavaluedescriptor   stopkeyvalue
int                     stopsearchoperator
boolean                 reopen_scan
int                     access_type
storecostresult         cost_result
throws standardexception
if  sanitymanager debug
sanitymanager assert
scan_type    storecostcontroller storecost_scan_normal
scan_type    storecostcontroller storecost_scan_set
long estimated_row_count     row_count < 0  ?  num_rows   row_count
// this cost is if the caller has to go in and out of access for
// every row in the table.  the cost will be significantly less if
// group fetch is used, or if qualifiers
// first the base cost of bringing each page in from cache:
double cost    num_pages   base_uncached_row_fetch_cost
// the cost associated with the number of bytes in each row:
cost     estimated_row_count   row_size    base_row_per_bytecost
// the base cost of getting each of the rows from a page assumed
// to already be cached (by the scan fetch) - this is only for all
// rows after the initial row on the page has been accounted for
// under the base_uncached_row_fetch_cost cost.:
long cached_row_count   estimated_row_count   num_pages
if  cached_row_count < 0
cached_row_count   0
if  scan_type    storecostcontroller storecost_scan_normal
cost    cached_row_count   base_groupscan_row_cost
else
cost    cached_row_count   base_hashscan_row_fetch_cost
if  sanitymanager debug
sanitymanager assert cost >  0
sanitymanager assert estimated_row_count >  0
cost_result setestimatedcost cost
// return that all rows will be scanned.
cost_result setestimatedrowcount estimated_row_count
return