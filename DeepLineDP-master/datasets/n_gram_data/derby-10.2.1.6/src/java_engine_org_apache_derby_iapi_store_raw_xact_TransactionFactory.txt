/*
derby - class org.apache.derby.iapi.store.raw.xact.transactionfactory
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi store raw xact
import org apache derby iapi services context contextmanager
import org apache derby iapi services daemon serviceable
import org apache derby iapi services io formatable
import org apache derby iapi services locks lockfactory
import org apache derby iapi store access transactioninfo
import org apache derby iapi store raw rawstorefactory
import org apache derby iapi store raw transaction
import org apache derby iapi store raw corruptable
import org apache derby iapi store raw log loginstant
import org apache derby iapi error standardexception
/**
this module is intended to be used only within the rawstore. rawstore functionality
is accessed only through the rawstorefactory interface.
the transaction manager is responsible for:
<ul>
<li>generating unique transaction identifiers.
<li>keeping a list of all open transactions within the raw store.
</ul>
@see rawstorefactory
@see transaction
*/
public interface transactionfactory extends corruptable
public static string module
/**
get the lockfactory to use with this store.
*/
public lockfactory getlockfactory
/*
* return the module providing xaresource interface to the transaction
* table.
*
* @exception standardexception standard cloudscape exception policy.
*/
public    xaresourcemanager    object getxaresourcemanager
throws standardexception
/**
start a new transaction within the given raw store. this method will
push a transaction context as described in
rawstorefactory.starttransaction
@param contextmgr is the context manager to use.  it must be the current
context manager.
@param transname is the transaction name. it will be displayed in the
transactiontable vti.
@see rawstorefactory#starttransaction
@exception standardexception standard cloudscape error policy.
*/
public rawtransaction starttransaction
rawstorefactory rsf
contextmanager  contextmgr
string transname
throws standardexception
/**
start a new read only transaction within the given raw store. this
method will push a transaction context as described in
rawstorefactory.startnestedtransaction
@param compatibilityspace   compatibility space to use for locks.
@param contextmgr           is the context manager to use.  it must be
the current context manager.
@param transname            is the transaction name. it will be
displayed in the transactiontable vti.
@see rawstorefactory#startnestedreadonlyusertransaction
@exception standardexception standard cloudscape error policy.
*/
public rawtransaction startnestedreadonlyusertransaction
rawstorefactory rsf
object          compatibilityspace
contextmanager  contextmgr
string          transname
throws standardexception
/**
start a new update transaction within the given raw store. this method
will push a transaction context as described in
rawstorefactory.startnestedtransaction
@param contextmgr           is the context manager to use.  it must be
the current context manager.
@param transname            is the transaction name. it will be
displayed in the transactiontable vti.
@see rawstorefactory#startnestedupdateusertransaction
@exception standardexception standard cloudscape error policy.
*/
public rawtransaction startnestedupdateusertransaction
rawstorefactory rsf
contextmanager  contextmgr
string          transname
throws standardexception
/**
start a new transaction within the given raw store. this method will
push a transaction context as described in
rawstorefactory.starttransaction
@param format_id  the format id part of the xid - ie. xid.getformatid().
@param global_id  the global transaction identifier part of xid - ie.
xid.getglobaltransactionid().
@param branch_id  the branch qualifier of the xid - ie.
xid.getbranchqaulifier()
@param contextmgr is the context manager to use.  it must be the current
context manager.
@see rawstorefactory#startglobaltransaction
@exception standardexception standard cloudscape error policy.
*/
public rawtransaction startglobaltransaction
rawstorefactory rsf
contextmanager  contextmgr
int             format_id
byte          global_id
byte          branch_id
throws standardexception
/**
find a user transaction within the given raw store and the given
contextmgr.  if no user transaction exist, then start one with name
transname. this method will push a transaction context as described in
rawstorefactory.starttransaction
@see rawstorefactory#findusertransaction
@see rawstorefactory#starttransaction
@exception standardexception standard cloudscape error policy.
*/
public rawtransaction findusertransaction
rawstorefactory rsf
contextmanager contextmgr
string transname  throws standardexception
/**
start a new nested top transaction within the given raw store. this
method will push a transaction context as described in
rawstorefactory.startnestedtoptransaction
@see rawstorefactory#starttransaction(contextmanager, string)
@exception standardexception standard cloudscape error policy.
*/
public rawtransaction startnestedtoptransaction rawstorefactory rsf  contextmanager contextmgr  throws standardexception
/**
start a new internal transaction within the given raw store. this
method will push a transaction context as described in
rawstorefactory.startinternaltransaction
@see rawstorefactory#starttransaction
@exception standardexception standard cloudscape error policy.
*/
public rawtransaction startinternaltransaction rawstorefactory rsf  contextmanager contextmgr  throws standardexception
/**
find a transaction using a transactionid and make the passed in
transaction assume the identity and properties of that transaction.
used in recovery only.
*/
public boolean findtransaction transactionid id  rawtransaction tran
/**
reset any resettable transaction id
@exception standardexception standard cloudscape error policy.
*/
public void resettranid   throws standardexception
/**
the first log instant that belongs to a transaction that is still
active in the raw store. this is the first log record of the longest
running transaction at this moment.
*/
public loginstant firstupdateinstant
/**
run through all prepared transactions known to this factory
and restore their state such that they remain after recovery, and
can be found and handled by a xa transaction manager.  this includes
creating a context manager for each, pushing a xact context, and
reclaiming update locks on all data changed by the transaction.
used only in recovery.
@exception standardexception cloudscape standard error policy
*/
public void handlepreparedxacts
rawstorefactory rsf
throws standardexception
/**
rollback and close all transactions known to this factory using a
passed in transaction.  used only in recovery.
@param recoverytransaction the transaction used to rollback
@exception standardexception cloudscape standard error policy
*/
public void rollbackalltransactions rawtransaction recoverytransaction
rawstorefactory rsf
throws standardexception
/**
submit a post commit work to the post commit daemon.
the work is always added to the deamon, regardless of the
state it returns.
@return true if the daemon indicates it is being overloaded,
false it's happy.
<mt> must be mt-safe
*/
public boolean submitpostcommitwork serviceable work
/**
make transaction factory aware of which raw store factory it belongs to
*/
public void setrawstorefactory rawstorefactory rsf  throws standardexception
/**
returns true if the transaction factory has no active updating
transaction
*/
public boolean noactiveupdatetransaction
/**
* check if there are any prepared transanctions.
*
* <p>mt - unsafe, called during boot, which is single threaded.
*
* @return   <tt>true</tt> if prepared transactions exist,
*			 <tt>false</tt> otherwise.
*/
public boolean haspreparedxact
/**
database creation finished
@exception standardexception standard cloudscape exception policy.
*/
public void createfinished   throws standardexception
/**
return the transaction table so it can get logged with the checkpoint
log record.
*/
public formatable gettransactiontable
/**
use this transaction table, which is gotten from a checkpoint
operation.  use only during recovery.
@exception standardexception standard cloudscape exception policy.
*/
public void usetransactiontable formatable transactiontable
throws standardexception
/**
@see org.apache.derby.iapi.store.access.accessfactory#gettransactioninfo
*/
public transactioninfo gettransactioninfo
/**
* checks if there any backup blocking operations are in progress and
* prevents new ones from starting until the backup is finished.
*
* @param wait if <tt>true</tt>, waits for the current backup blocking
*             operations in progress to finish.
* @return     <tt>true</tt> if there are no backup blocking
*             operations in progress.
*             <tt>false</tt> otherwise.
* @exception standardexception if interrupted or a runtime exception occurs.
*/
public boolean blockbackupblockingoperations boolean wait
throws standardexception
/**
* backup completed. allow backup blocking operations.
*/
public void  unblockbackupblockingoperations