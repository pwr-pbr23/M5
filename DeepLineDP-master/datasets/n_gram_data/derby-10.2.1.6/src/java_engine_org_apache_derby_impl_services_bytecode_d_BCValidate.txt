/*
derby - class org.apache.derby.impl.services.bytecode.d_bcvalidate
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl services bytecode
import java lang reflect
import org apache derby iapi services classfile vmopcode
import org apache derby iapi services sanity sanitymanager
import java util hashtable
import org apache derby iapi services loader
import org apache derby iapi services context
/**
* validate bc calls.
*
* @author jamie
*/
class d_bcvalidate
private static final string cspackages
private static final class no_params   new class
static void checkmethod short opcode  type dt  string methodname  string debugparametertypes  type rt
if  sanitymanager debug
string reason   null
try
string declaringclass   dt javaname
if  declaringclass startswith
return
// only validate against cloudscape engine or java classes. not user defined classes
int p
for  p   0  p < cspackages length  p
if  declaringclass startswith cspackages
break
if  p    cspackages length
return
class params   no_params
class declaring   loadclass declaringclass
if  debugparametertypes    null
params   new class
for  int i   0  i < debugparametertypes length  i
params   loadclass debugparametertypes
// if the class is not in the same class loader then it
// it must be a non-derby class. in that case any method etc.
// being accessed must be public, so don't use the getdeclared
// methods. default securitymanager behaviour is to grant access to public members
// and members from classes loaded by the same class loader. thus
// we try to fall into these categories to avoid having to grant
// permissions to derby jars for the function tests.
classloader declareloader   declaring getclassloader
classloader myloader   d_bcvalidate class getclassloader
boolean sameclassloader   false
if  declareloader    myloader
sameclassloader   true
else if  declareloader    null
sameclassloader   declareloader equals myloader
string actualreturntype
if  methodname equals
constructor c
if  sameclassloader
c   declaring getdeclaredconstructor params
else
c   declaring getconstructor params
// check this construct is declared by this
// class, has to be, right? but no harm checking.
if   c getdeclaringclass   equals declaring
reason       c tostring         c getdeclaringclass         declaring
actualreturntype
else
method m
if  sameclassloader
m   declaring getdeclaredmethod methodname  params
else
m   declaring getmethod methodname  params
// check this method is declared by this
// class? but no harm checking.
if   m getdeclaringclass   equals declaring
reason       m tostring         m getdeclaringclass         declaring
actualreturntype   m getreturntype   getname
// do we already have a problem?
if  reason    null
class requestedreturntype   loadclass rt javaname
// check the return type
if  actualreturntype equals requestedreturntype getname
// check the inteface match
if  opcode    vmopcode invokeinterface
return
if  declaring isinterface
return
reason
else
reason       actualreturntype
catch  exception e
reason   e tostring
e printstacktrace system out
string sig   dt javaname         rt javaname         methodname
if  debugparametertypes    null
for  int i   0  i < debugparametertypes length  i
if  i    0
sig   sig
sig   sig   debugparametertypes
sig   sig
string msg       sig       reason
system out println msg
sanitymanager throwassert msg
private static hashtable primitives
static
if  sanitymanager debug
primitives   new hashtable
primitives put    boolean type
primitives put    byte type
primitives put    character type
primitives put    double type
primitives put    float type
primitives put    integer type
primitives put    long type
primitives put    short type
primitives put    void type
private static class loadclass string name  throws classnotfoundexception
if  sanitymanager debug
class c    class  primitives get name
if  c    null
return c
if  name endswith
class baseclass   loadclass name substring 0  name length     2
return array newinstance baseclass  0  getclass
return class forname name
return null