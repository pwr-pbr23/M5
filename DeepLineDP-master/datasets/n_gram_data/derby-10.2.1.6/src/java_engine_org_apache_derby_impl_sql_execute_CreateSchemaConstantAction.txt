/*
derby - class org.apache.derby.impl.sql.execute.createschemaconstantaction
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl sql execute
import org apache derby iapi sql execute constantaction
import org apache derby iapi store access transactioncontroller
import org apache derby iapi sql dictionary datadescriptorgenerator
import org apache derby iapi sql dictionary datadictionary
import org apache derby iapi sql dictionary schemadescriptor
import org apache derby iapi sql conn languageconnectioncontext
import org apache derby iapi reference sqlstate
import org apache derby iapi sql activation
import org apache derby iapi error standardexception
import org apache derby iapi services sanity sanitymanager
import org apache derby catalog uuid
/**
*	this class describes actions that are always performed for a
*	create schema statement at execution time.
*
*	@author jamie
*/
class createschemaconstantaction extends ddlconstantaction
private final string					aid 	   authorization id
private final string					schemaname
// constructors
/**
* make the constantaction for a create schema statement.
* when executed, will set the default schema to the
* new schema if the settodefault parameter is set to
* true.
*
*  @param schemaname	name of table.
*  @param aid			authorizaton id
*/
createschemaconstantaction
string			schemaname
string			aid
this schemaname   schemaname
this aid   aid
///////////////////////////////////////////////
//
// object shadows
//
///////////////////////////////////////////////
public	string	tostring
// do not put this under sanitymanager.debug - it is needed for
// error reporting.
return     schemaname
// interface methods
/**
*	this is the guts of the execution-time logic for create schema.
*
*	@see constantaction#executeconstantaction
*
* @exception standardexception		thrown on failure
*/
public void	executeconstantaction  activation activation
throws standardexception
languageconnectioncontext lcc   activation getlanguageconnectioncontext
datadictionary dd   lcc getdatadictionary
transactioncontroller tc   lcc gettransactionexecute
datadescriptorgenerator ddg   dd getdatadescriptorgenerator
schemadescriptor sd   dd getschemadescriptor schemaname  lcc gettransactionexecute    false
//if the schema descriptor is an in-memory schema, we donot throw schema already exists exception for it.
//this is to handle in-memory session schema for temp tables
if   sd    null      sd getuuid      null
throw standardexception newexception sqlstate lang_object_already_exists      schemaname
uuid tmpschemaid   dd getuuidfactory   createuuid
/*
** aid defaults to connection authorization if not
** specified in create schema (if we had module
** authorizations, that would be the first check
** for default, then session aid).
*/
string thisaid   aid
if  thisaid    null
thisaid   lcc getauthorizationid
/*
** inform the data dictionary that we are about to write to it.
** there are several calls to data dictionary "get" methods here
** that might be done in "read" mode in the data dictionary, but
** it seemed safer to do this whole operation in "write" mode.
**
** we tell the data dictionary we're done writing at the end of
** the transaction.
*/
dd startwriting lcc
sd   ddg newschemadescriptor schemaname
thisaid
tmpschemaid
dd adddescriptor sd  null  datadictionary sysschemas_catalog_num  false  tc