/*
derby - class org.apache.derby.iapi.sql.dictionary.referencedkeyconstraintdescriptor
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi sql dictionary
import org apache derby iapi error standardexception
import org apache derby iapi reference sqlstate
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi sql statementtype
import org apache derby iapi services io storedformatids
import org apache derby catalog uuid
/**
* a referencedconstraintdeescriptor is a primary key or a unique
* key that is referenced by a foreign key.
*
* @author jamie
*/
public class referencedkeyconstraintdescriptor extends keyconstraintdescriptor
/**
public interface to this descriptor:
<ol>
<li>public boolean hasselfreferencingfk(constraintdescriptorlist cdl, int type)
throws standardexception;</li>
<li>public constraintdescriptorlist getforeignkeyconstraints(int type) throws standardexception;</li>
<li>public boolean isreferenced();</li>
<li>public int getreferencecount();</li>
<li>public int incrementreferencecount();</li>
<li>public int decrementreferencecount();</li>
</ol>
*/
//implementation
private final int constrainttype
int			referencecount
// enabled foreign keys
private	constraintdescriptorlist fkenabledconstraintlist
// all foreign keys
private	constraintdescriptorlist fkconstraintlist
private boolean checkedselfreferencing
private boolean hasselfreferencing
/**
* constructor for a keyconstraintdescriptorimpl
*
* @param constrainttype	the type of the constraint
* @param datadictionary		the data dictionary that this descriptor lives in
* @param table		the descriptor of the table the constraint is on
* @param constraintname	the name of the constraint.
* @param deferrable		if the constraint can be deferred.
* @param initiallydeferred if the constraint starts life deferred.
* @param columns			columns involved in the constraint
* @param constraintid		uuid of constraint
* @param indexid			the uuid for the backing index
* @param schemadesc		the schemadescriptor for the constraint
* @param isenabled			is the constraint enabled?
* @param referencecount	number of fks (enabled only)
*/
protected referencedkeyconstraintdescriptor int constrainttype
datadictionary datadictionary
tabledescriptor table
string constraintname
boolean deferrable
boolean initiallydeferred
int columns
uuid constraintid
uuid indexid
schemadescriptor schemadesc
boolean	isenabled
int referencecount
super datadictionary  table  constraintname  deferrable
initiallydeferred  columns
constraintid  indexid  schemadesc  isenabled
this referencecount   referencecount
this constrainttype   constrainttype
public final int getconstrainttype
return constrainttype
/**
* am i referenced by a fk on the same table?
*
* @param cdl	constraintdescriptorlist for the table
* @param type constraintdescriptor.(enabled|disabled|all)
*
* @return	true/false
*
* @exception standardexception on error
*/
public boolean hasselfreferencingfk constraintdescriptorlist cdl  int type
throws standardexception
if  sanitymanager debug
checktype type
if  checkedselfreferencing
return hasselfreferencing
constraintdescriptor cd
foreignkeyconstraintdescriptor fkcd
/* get a full list of referencing keys, if caller
* passed in null cdl.
*/
if  cdl    null
cdl   getforeignkeyconstraints type
int cdlsize   cdl size
for  int index   0  index < cdlsize  index
cd    constraintdescriptor  cdl elementat index
if     cd instanceof foreignkeyconstraintdescriptor
continue
fkcd    foreignkeyconstraintdescriptor  cd
if  fkcd getreferencedconstraintid   equals getuuid
hasselfreferencing   true
break
return hasselfreferencing
/**
* am i referenced by a fk on another table?
* @param type constraintdescriptor.(enabled|disabled|all)
* @return	true/false
* @exception standardexception on error
*/
public boolean hasnonselfreferencingfk int type
throws standardexception
boolean hasnonselfreferencefk   false
if  sanitymanager debug
checktype type
constraintdescriptor cd
foreignkeyconstraintdescriptor fkcd
// get a full list of referencing keys,
constraintdescriptorlist cdl   getforeignkeyconstraints type
int cdlsize   cdl size
for  int index   0  index < cdlsize  index
cd    constraintdescriptor  cdl elementat index
if     cd instanceof foreignkeyconstraintdescriptor
continue
fkcd    foreignkeyconstraintdescriptor  cd
if   fkcd gettableid   equals gettableid
hasnonselfreferencefk   true
break
return hasnonselfreferencefk
/**
* get the referencing foreign key constraints
*
* @param type constraintdescriptor.(enabled|disabled|all)
*
* @return	the list of constraints (constraintdescriptorlistimpl)
*
* @exception standardexception on error
*/
public constraintdescriptorlist getforeignkeyconstraints int type
throws standardexception
if  sanitymanager debug
checktype type
// optimized for this case
if  type    enabled
// optimization to avoid any lookups if we know we
// aren't referenced.
if   isreferenced
return new constraintdescriptorlist
else if  fkenabledconstraintlist    null
return fkenabledconstraintlist
else if  fkconstraintlist    null
fkconstraintlist   getdatadictionary   getforeignkeys constraintid
fkenabledconstraintlist   fkconstraintlist getconstraintdescriptorlist true
return fkenabledconstraintlist
// not optimized for this case
else if  type    disabled
if  fkconstraintlist    null
fkconstraintlist   getdatadictionary   getforeignkeys constraintid
return fkconstraintlist getconstraintdescriptorlist false
else
if  fkconstraintlist    null
fkconstraintlist   getdatadictionary   getforeignkeys constraintid
return fkconstraintlist
/**
* is this constraint referenced? returns
* true if there are enabled fks that
* reference this constraint.
*
* @return false
*/
public boolean isreferenced
return referencecount    0
/**
* get the number of enabled fks that
* reference this key.
*
* @return the number of fks
*/
public int getreferencecount
return referencecount
/**
* bump the reference count by one.
*
* @return the number of fks
*/
public int incrementreferencecount
return referencecount
/**
* decrement the reference count by one.
*
* @return the number of fks
*/
public int decrementreferencecount
return referencecount
/**
* does this constraint need to fire on this type of
* dml?  for referenced keys, fire if referenced by
* a fk, and stmt is delete or bulk insert replace,
* or stmt is update and columns intersect.
*
* @param stmttype	the type of dml
* (statementtype.insert|statementtype.update|statementtype.delete)
* @param modifiedcols	the columns modified, or null for all
*
* @return true/false
*/
public boolean needstofire int stmttype  int modifiedcols
/*
** if we are disabled, we never fire
*/
if   isenabled
return false
if   isreferenced
stmttype    statementtype insert
return false
if  stmttype    statementtype delete
stmttype    statementtype bulk_insert_replace
return true
// if update, only relevant if columns intersect
return docolumnsintersect modifiedcols  getreferencedcolumns
private void checktype int type  throws standardexception
if  sanitymanager debug
switch  type
case enabled
case disabled
case all
break
default
sanitymanager throwassert   type