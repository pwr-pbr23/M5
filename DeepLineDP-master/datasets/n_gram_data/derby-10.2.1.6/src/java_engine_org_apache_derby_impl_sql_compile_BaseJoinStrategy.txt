/*
derby - class org.apache.derby.impl.sql.compile.basejoinstrategy
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl sql compile
import org apache derby iapi services loader generatedmethod
import org apache derby iapi services compiler methodbuilder
import org apache derby iapi sql compile expressionclassbuilderinterface
import org apache derby iapi sql compile joinstrategy
import org apache derby iapi sql compile optimizable
import org apache derby iapi sql compile optimizablepredicatelist
import org apache derby iapi sql activation
import org apache derby iapi sql dictionary conglomeratedescriptor
import org apache derby iapi sql dictionary constraintdescriptor
import org apache derby iapi sql dictionary datadictionary
import org apache derby iapi sql dictionary tabledescriptor
import org apache derby iapi store access qualifier
import org apache derby iapi store access staticcompiledopenconglominfo
import org apache derby iapi store access transactioncontroller
import org apache derby impl sql compile expressionclassbuilder
import org apache derby iapi error standardexception
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi reference classname
import org apache derby iapi util propertyutil
abstract class basejoinstrategy implements joinstrategy
basejoinstrategy
/** @see joinstrategy#bulkfetchok */
public boolean bulkfetchok
return true
/** @see joinstrategy#ignorebulkfetch */
public boolean ignorebulkfetch
return false
/**
* push the first set of common arguments for obtaining a scan resultset from
* resultsetfactory.
* the first 11 arguments are common for these resultset getters
* <ul>
* <li> resultsetfactory.getbulktablescanresultset
* <li> resultsetfactory.gethashscanresultset
* <li> resultsetfactory.gettablescanresultset
* <li> resultsetfactory.getradependenttablescanresultset
* </ul>
* @param tc
* @param mb
* @param innertable
* @param predlist
* @param acbi
* @param resultrowallocator
* @throws standardexception
*/
void fillinscanargs1
transactioncontroller tc
methodbuilder mb
optimizable innertable
optimizablepredicatelist predlist
expressionclassbuilderinterface acbi
methodbuilder resultrowallocator
throws standardexception
boolean				   samestartstopposition   predlist samestartstopposition
expressionclassbuilder acb    expressionclassbuilder  acbi
long				   conglomnumber
innertable gettrulythebestaccesspath
getconglomeratedescriptor
getconglomeratenumber
staticcompiledopenconglominfo scoci   tc getstaticcompiledconglominfo conglomnumber
acb pushthisasactivation mb
mb push conglomnumber
mb push acb additem scoci
acb pushmethodreference mb  resultrowallocator
mb push innertable getresultsetnumber
predlist generatestartkey acb  mb  innertable
mb push predlist startoperator innertable
if    samestartstopposition
predlist generatestopkey acb  mb  innertable
else
mb pushnull classname generatedmethod
mb push predlist stopoperator innertable
mb push samestartstopposition
predlist generatequalifiers acb  mb  innertable  true
mb upcast classname qualifier
final void fillinscanargs2 methodbuilder mb
optimizable innertable
int bulkfetch
int colrefitem
int indexcolitem
int lockmode
boolean tablelocked
int isolationlevel
throws standardexception
mb push innertable getbasetablename
//user may have supplied optimizer overrides in the sql
//pass them onto execute phase so it can be shown in
//run time statistics.
if  innertable getproperties      null
mb push propertyutil sortproperties innertable getproperties
else
mb pushnull
conglomeratedescriptor cd
innertable gettrulythebestaccesspath   getconglomeratedescriptor
if  cd isconstraint
datadictionary dd   innertable getdatadictionary
tabledescriptor td   innertable gettabledescriptor
constraintdescriptor constraintdesc   dd getconstraintdescriptor
td  cd getuuid
mb push constraintdesc getconstraintname
else if  cd isindex
mb push cd getconglomeratename
else
mb pushnull
// whether or not the conglomerate is the backing index for a constraint
mb push cd isconstraint
// tell it whether it's to open for update, which we should do if
// it's an update or delete statement, or if it's the target
// table of an updatable cursor.
mb push innertable forupdate
mb push colrefitem
mb push indexcolitem
mb push lockmode
mb push tablelocked
mb push isolationlevel
if  bulkfetch > 0
mb push bulkfetch
/* 1 row scans (avoiding 2nd next()) are
* only meaningful for some join strategies.
* (only an issue for outer table, which currently
* can only be nested loop, as avoidance of 2nd next
* on inner table already factored in to join node.)
*/
if  validforoutermosttable
mb push innertable isonerowscan
mb push
innertable gettrulythebestaccesspath
getcostestimate   rowcount
mb push
innertable gettrulythebestaccesspath
getcostestimate   getestimatedcost
/**
* @see joinstrategy#ishashjoin
*/
public boolean ishashjoin
return false
/**
* can this join strategy be used on the
* outermost table of a join.
*
* @return whether or not this join strategy
* can be used on the outermose table of a join.
*/
protected boolean validforoutermosttable
return false