/*
derby - class org.apache.derby.iapi.types.datavaluefactory
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi types
import org apache derby iapi types rowlocation
import org apache derby iapi error standardexception
import java sql date
import java sql time
import java sql timestamp
/**
* this interface is how we get constant data values of different types.
*/
public interface datavaluefactory
/**
* get a sql int with the given value.  a null argument means get
* a sql null value.  the second form uses the previous value (if non-null)
* to hold the return value.
*
*/
numberdatavalue         getdatavalue integer value
numberdatavalue         getdatavalue integer value  numberdatavalue previous
throws standardexception
/**
* get a sql int with a char value.  a null argument means get
* a sql null value.  the second form uses the previous value (if non-null)
* to hold the return value.
*
*/
public numberdatavalue getdatavalue char value
public numberdatavalue getdatavalue char value  numberdatavalue previous
throws standardexception
/**
* get a sql smallint with the given value.  a null argument means get
* a sql null value.  the second form uses the previous value (if non-null)
* to hold the return value.
*
*/
numberdatavalue         getdatavalue short value
numberdatavalue         getdatavalue short value  numberdatavalue previous
throws standardexception
/**
* get a sql tinyint with the given value.  a null argument means get
* a sql null value.  the second form uses the previous value (if non-null)
* to hold the return value.
*
*/
numberdatavalue         getdatavalue byte value
numberdatavalue         getdatavalue byte value  numberdatavalue previous
throws standardexception
/**
* get a sql bigint with the given value.  a null argument means get
* a sql null value.  the second form uses the previous value (if non-null)
* to hold the return value.
*
*/
numberdatavalue         getdatavalue long value
numberdatavalue         getdatavalue long value  numberdatavalue previous
throws standardexception
/**
* get a sql real with the given value.  a null argument means get
* a sql null value.  the second form uses the previous value (if non-null)
* to hold the return value.
*
*/
numberdatavalue         getdatavalue float value  throws standardexception
numberdatavalue         getdatavalue float value  numberdatavalue previous
throws standardexception
/**
* get a sql double precision with the given value.  a null argument means
* a sql null value.  the second form uses the previous value (if non-null)
* to hold the return value.
*
* @exception standardexception         thrown on error
*/
numberdatavalue         getdatavalue double value  throws standardexception
numberdatavalue         getdatavalue double value  numberdatavalue previous
throws standardexception
/**
* get a sql boolean with the given value.  a null argument means get
* a sql null value.  the second form uses the previous value (if non-null)
* to hold the return value.
*
*/
booleandatavalue        getdatavalue boolean value
booleandatavalue        getdatavalue boolean value  booleandatavalue previous
throws standardexception
// ------ longvarbit
/**
* get a sql long bit varying with the given value.  a null argument means
* get a sql null value.  the second form uses the previous value (if
* non-null) to hold the return value.
*
* @exception standardexception         thrown on error
*/
bitdatavalue            getlongvarbitdatavalue byte value  throws standardexception
bitdatavalue            getlongvarbitdatavalue byte value
bitdatavalue previous
throws standardexception
// ------ blob
/**
* get a sql blob with the given value.  a null argument means
* get a sql null value.  the second form uses the previous value (if
* non-null) to hold the return value.
*
* @exception standardexception         thrown on error
*/
bitdatavalue            getblobdatavalue byte value  throws standardexception
bitdatavalue            getblobdatavalue byte value
bitdatavalue previous
throws standardexception
// ------ boolean
/**
* get a sql boolean with the given value.  a null argument means get
* a sql null value.  the second form uses the previous value (if non-null)
* to hold the return value.
*
* @exception standardexception         thrown on error
*/
booleandatavalue        getdatavalue booleandatavalue value  throws standardexception
/**
* get a sql varchar with the given value.  a null argument means get
* a sql null value.  the second form uses the previous value (if non-null)
* to hold the return value.
*
*/
stringdatavalue         getvarchardatavalue string value
stringdatavalue         getvarchardatavalue string value
stringdatavalue previous
throws standardexception
/**
* get a sql long varchar with the given value.  a null argument means
* get a sql null value.  the second form uses the previous value
* (if non-null) to hold the return value.
*
*/
stringdatavalue         getlongvarchardatavalue string value
stringdatavalue         getlongvarchardatavalue string value  stringdatavalue previous  throws standardexception
/**
* get a sql clob with the given value.  a null argument means
* get a sql null value.  the second form uses the previous value
* (if non-null) to hold the return value.
*
*/
stringdatavalue         getclobdatavalue string value
stringdatavalue         getclobdatavalue string value  stringdatavalue previous  throws standardexception
/**
* get a sql national varchar with the given value.  a null argument means get
* a sql null value.  the second form uses the previous value (if non-null)
* to hold the return value.
*/
stringdatavalue         getnationalvarchardatavalue string value
stringdatavalue         getnationalvarchardatavalue string value
stringdatavalue previous
throws standardexception
/**
* get a sql national long varchar with the given value.  a null argument means
* get a sql null value.  the second form uses the previous value
* (if non-null) to hold the return value.
*/
stringdatavalue         getnationallongvarchardatavalue string value
stringdatavalue         getnationallongvarchardatavalue string value
stringdatavalue previous
throws standardexception
/**
* get a sql national blob with the given value.  a null argument means
* get a sql null value.  the second form uses the previous value
* (if non-null) to hold the return value.
*/
stringdatavalue         getnclobdatavalue string value
stringdatavalue         getnclobdatavalue string value  stringdatavalue previous
throws standardexception
/**
* get a user-defined data value with the given value and type name.
* a null argument means get a sql null value.  the second form uses
* the previous value (if non-null) hold the return value.
*
*/
userdatavalue           getdatavalue object value
userdatavalue           getdatavalue object value
userdatavalue previous
/**
* get a refdatavalue with the given value.  a null argument means get
* a sql null value.  the second form uses the previous value (if non-null)
* to hold the return value.
*
*/
refdatavalue            getdatavalue rowlocation value
refdatavalue            getdatavalue rowlocation value  refdatavalue previous
/**
* get a sql int with the given value.  the second form re-uses the
* previous value, if non-null, as the data holder to return.
*
*/
numberdatavalue         getdatavalue int value
numberdatavalue         getdatavalue int value  numberdatavalue previous
throws standardexception
/**
* get a sql bigint with the given value.  the second form re-uses the
* previous value, if non-null, as the data holder to return.
*
*/
numberdatavalue         getdatavalue long value
numberdatavalue         getdatavalue long value  numberdatavalue previous
throws standardexception
/**
* get a sql real with the given value.  the second form
* re-uses the previous value, if non-null, as the data holder to return.
*
* @exception standardexception         thrown on error
*/
numberdatavalue         getdatavalue float value  throws standardexception
numberdatavalue         getdatavalue float value  numberdatavalue previous
throws standardexception
/**
* get a sql double precision with the given value.  the second form
* re-uses the previous value, if non-null, as the data holder to return.
*
* @exception standardexception         thrown on error
*/
numberdatavalue         getdatavalue double value  throws standardexception
numberdatavalue         getdatavalue double value  numberdatavalue previous
throws standardexception
/**
* get a sql smallint with the given value.  the second form re-uses the
* previous value, if non-null, as the data holder to return.
*
*/
numberdatavalue         getdatavalue short value
numberdatavalue         getdatavalue short value  numberdatavalue previous
throws standardexception
/**
* get a sql tinyint with the given value.  the second form re-uses the
* previous value, if non-null, as the data holder to return.
*
*/
numberdatavalue         getdatavalue byte value
numberdatavalue         getdatavalue byte value  numberdatavalue previous
throws standardexception
/**
* get a sql decimal with the given value.  the second form re-uses the
* previous value, if non-null, as the data holder to return.
*
* @exception standardexception         thrown on error
*/
numberdatavalue         getdecimaldatavalue number value  throws standardexception
numberdatavalue         getdecimaldatavalue number value  numberdatavalue previous
throws standardexception
/**
* get a sql decimal with the given value.
*
* @exception standardexception         thrown on error
*/
numberdatavalue         getdecimaldatavalue long value  numberdatavalue previous
throws standardexception
/**
* get a sql decimal with the given value.  the second form re-uses the
* previous value, if non-null, as the data holder to return.
*
* @exception standardexception         thrown on error
*/
numberdatavalue         getdecimaldatavalue string value  throws standardexception
numberdatavalue         getdecimaldatavalue string value
numberdatavalue previous
throws standardexception
/**
* get a sql boolean with the given value.  the second form re-uses the
* previous value, if non-null, as the data holder to return.
*
*/
booleandatavalue        getdatavalue boolean value
booleandatavalue        getdatavalue boolean value  booleandatavalue previous
throws standardexception
/**
* get a sql bit with the given value.  the second form re-uses the
* previous value, if non-null, as the data holder to return.
*
* @exception standardexception         thrown on error
*/
bitdatavalue            getbitdatavalue byte value  throws standardexception
bitdatavalue            getbitdatavalue byte value  bitdatavalue previous
throws standardexception
/**
* get a sql bit with the given value.  the second form re-uses the
* previous value, if non-null, as the data holder to return.
*
* @exception standardexception         thrown on error
*/
bitdatavalue            getvarbitdatavalue byte value  throws standardexception
bitdatavalue            getvarbitdatavalue byte value  bitdatavalue previous
throws standardexception
/**
* get a sql char with the given value.  a null argument means get
* a sql null value.  the second form re-uses the previous value,
* if non-null, as the data holder to return.
*
*/
stringdatavalue         getchardatavalue string value
stringdatavalue         getchardatavalue string value  stringdatavalue previous
throws standardexception
/**
* get a sql national char with the given value.  a null argument means get
* a sql null value.  the second form re-uses the previous value,
* if non-null, as the data holder to return.
*/
stringdatavalue         getnationalchardatavalue string value
stringdatavalue         getnationalchardatavalue string value  stringdatavalue previous
throws standardexception
/**
* get a sql date with the given value.  a null argument means get
* a sql null value.  the second form re-uses the previous value,
* if non-null, as the data holder to return.
*
*/
datetimedatavalue       getdatavalue date value  throws standardexception
datetimedatavalue       getdatavalue date value  datetimedatavalue previous
throws standardexception
/**
* get a sql time with the given value.  a null argument means get
* a sql null value.  the second form re-uses the previous value,
* if non-null, as the data holder to return.
*
*/
datetimedatavalue       getdatavalue time value  throws standardexception
datetimedatavalue       getdatavalue time value  datetimedatavalue previous
throws standardexception
/**
* get a sql timestamp with the given value.  a null argument means get
* a sql null value.  the second form re-uses the previous value,
* if non-null, as the data holder to return.
*
*/
datetimedatavalue       getdatavalue timestamp value  throws standardexception
datetimedatavalue       getdatavalue timestamp value
datetimedatavalue previous
throws standardexception
/**
* implement the timestamp sql function: construct a sql timestamp from a string, or timestamp.
*
* @param operand must be a timestamp or a string convertible to a timestamp.
*/
datetimedatavalue gettimestamp  datavaluedescriptor operand  throws standardexception
/**
* construct a sql timestamp from a date and time.
*
* @param date must be convertible to a date.
* @param time must be convertible to a time.
*/
datetimedatavalue gettimestamp  datavaluedescriptor date  datavaluedescriptor time  throws standardexception
/**
* implements the sql date function
*
* @param operand a date, timestamp, string or integer.
*
* @return the corresponding date value
*
* @exception standardexception if the syntax is invalid or the date is out of range.
*/
public datetimedatavalue getdate  datavaluedescriptor operand  throws standardexception
/**
* @param datestr a date in one of the db2 standard date formats or the local format.
* @param isjdbcescape if true then the timestamp must be in the jdbc timestamp escape format, otherwise it must
*                     be in the db2 timestamp format.
* @return a datetimedatavalue
*
* @exception standardexception if the syntax is invalid or the date is out of range.
*/
public datetimedatavalue getdatevalue  string datestr  boolean isjdbcescape  throws standardexception
/**
* @param timestr a date in one of the db2 standard time formats or the local format.
* @param isjdbcescape if true then the timestamp must be in the jdbc time escape format, otherwise it must
*                     be in the db2 time format.
* @return a datetimedatavalue
*
* @exception standardexception if the syntax is invalid or the time is out of range.
*/
public datetimedatavalue gettimevalue  string timestr  boolean isjdbcescape  throws standardexception
/**
* @param timestampstr a time in string format.
* @param isjdbcescape if true then the time must be in the jdbc time escape format, otherwise it must
*                     be in the db2 time format.
* @return an internal timestamp
*
* @exception standardexception if the syntax is invalid or the timestamp is out of range.
*/
public datetimedatavalue gettimestampvalue  string timestampstr  boolean isjdbcescape  throws standardexception
/**
* get a null xml value. the second form re-uses the previous value,
* if non-null, as the data holder to return.
*/
xmldatavalue getxmldatavalue
xmldatavalue getxmldatavalue xmldatavalue previous
throws standardexception
/**
* get a sql int with a sql null value. if the supplied value
* is null then get a new value, otherwise set it to null and return
* that value.
*
*/
numberdatavalue getnullinteger numberdatavalue datavalue
/**
* get a sql smallint with  a sql null value. if the supplied value
* is null then get a new value, otherwise set it to null and return
* that value.
*/
numberdatavalue getnullshort numberdatavalue datavalue
/**
* get a sql tinyint with  a sql null value. if the supplied value
* is null then get a new value, otherwise set it to null and return
* that value.
*
*/
numberdatavalue getnullbyte numberdatavalue datavalue
/**
* get a sql bigint with  a sql null value. if the supplied value
* is null then get a new value, otherwise set it to null and return
* that value.
*
*/
numberdatavalue getnulllong numberdatavalue datavalue
/**
* get a sql float with  a sql null value. if the supplied value
* is null then get a new value, otherwise set it to null and return
* that value.
*
*/
numberdatavalue getnullfloat numberdatavalue datavalue
/**
* get a sql double with  a sql null value. if the supplied value
* is null then get a new value, otherwise set it to null and return
* that value.
*
*/
numberdatavalue getnulldouble numberdatavalue datavalue
/**
* get a sql decimal/numeric with  a sql null value. if the supplied value
* is null then get a new value, otherwise set it to null and return
* that value.
*
*/
numberdatavalue getnulldecimal numberdatavalue datavalue
/**
* get a sql boolean with  a sql null value. if the supplied value
* is null then get a new value, otherwise set it to null and return
* that value.
*/
booleandatavalue getnullboolean booleandatavalue datavalue
/**
* get a sql bit with a sql null value. if the supplied value
* is null then get a new value, otherwise set it to null and return
* that value.
*
* @exception standardexception         thrown on error
*/
bitdatavalue            getnullbit bitdatavalue datavalue  throws standardexception
/**
* get a sql bit varying with a sql null value. if the supplied value
* is null then get a new value, otherwise set it to null and return
* that value.
*
* @exception standardexception         thrown on error
*/
bitdatavalue            getnullvarbit bitdatavalue datavalue  throws standardexception
// --- longvarbit
/**
* get a sql long bit varying with a sql null value. if the supplied
* value is null then get a new value, otherwise set it to null
* and return that value.
*
* @exception standardexception         thrown on error
*/
bitdatavalue            getnulllongvarbit
bitdatavalue datavalue
throws standardexception
// --- blob
/**
* get a sql blob with a sql null value. if the supplied
* value is null then get a new value, otherwise set it to null
* and return that value.
*
* @exception standardexception         thrown on error
*/
bitdatavalue            getnullblob bitdatavalue datavalue
throws standardexception
// ------ char
/**
* get a sql char with a sql null value. if the supplied value
* is null then get a new value, otherwise set it to null and return
* that value.
*/
stringdatavalue         getnullchar stringdatavalue datavalue
/**
* get a sql varchar with a sql null value. if the supplied value
* is null then get a new value, otherwise set it to null and return
* that value.
*
*/
stringdatavalue         getnullvarchar stringdatavalue datavalue
/**
* get a sql long varchar with a sql null value. if the supplied value
* is null then get a new value, otherwise set it to null and return
* that value.
*
*/
stringdatavalue         getnulllongvarchar stringdatavalue datavalue
/**
* get a sql long varchar with a sql null value. if the supplied value
* is null then get a new value, otherwise set it to null and return
* that value.
*
*/
stringdatavalue         getnullclob stringdatavalue datavalue
/**
* get a sql national char with a sql null value. if the supplied value
* is null then get a new value, otherwise set it to null and return
* that value.
*/
stringdatavalue         getnullnationalchar stringdatavalue datavalue
/**
* get a sql national varchar with a sql null value. if the supplied value
* is null then get a new value, otherwise set it to null and return
* that value.
*
*/
stringdatavalue         getnullnationalvarchar stringdatavalue datavalue
/**
* get a sql national long varchar with a sql null value. if the supplied value
* is null then get a new value, otherwise set it to null and return
* that value.
*
*/
stringdatavalue         getnullnationallongvarchar stringdatavalue datavalue
/**
* get a sql nclob with a sql null value. if the supplied value
* is null then get a new value, otherwise set it to null and return
* that value.
*
*/
stringdatavalue         getnullnclob stringdatavalue datavalue
/**
* get a user-defined data value with a sql null value. if the supplied value
* is null then get a new value, otherwise set it to null and return
* that value.
*
*/
userdatavalue           getnullobject userdatavalue datavalue
/**
* get a refdatavalue with a sql null value. if the supplied value
* is null then get a new value, otherwise set it to null and return
* that value.
*
*/
refdatavalue            getnullref refdatavalue datavalue
/**
* get a sql date with a sql null value. if the supplied value
* is null then get a new value, otherwise set it to null and return
* that value.
*
*/
datetimedatavalue       getnulldate datetimedatavalue datavalue
/**
* get a sql time with a sql null value. if the supplied value
* is null then get a new value, otherwise set it to null and return
* that value.
*
*/
datetimedatavalue       getnulltime datetimedatavalue datavalue
/**
* get a sql timestamp with a sql null value. if the supplied value
* is null then get a new value, otherwise set it to null and return
* that value.
*/
datetimedatavalue       getnulltimestamp datetimedatavalue datavalue
/**
* get an xml with a sql null value. if the supplied value is
* null then get a new value, otherwise set it to null and return
* that value.
*/
xmldatavalue            getnullxml xmldatavalue datavalue