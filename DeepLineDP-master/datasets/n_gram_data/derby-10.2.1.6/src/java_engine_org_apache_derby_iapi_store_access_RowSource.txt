/*
derby - class org.apache.derby.iapi.store.access.rowsource
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi store access
import org apache derby iapi error standardexception
import org apache derby iapi types datavaluedescriptor
import org apache derby iapi services io formatablebitset
/**
a rowsource is the mechanism for iterating over a set of rows.  the rowsource
is the interface through which access recieved a set of rows from the client
for the purpose of inserting into a single conglomerate.
<p>
a rowsource can come from many sources - from rows that are from fast path
import, to rows coming out of a sort for index creation.
*/
public interface rowsource
/**
get the next row as an array of column objects. the column objects can
be a jbms storable or any
serializable/externalizable/formattable/streaming type.
<br>
a return of null indicates that the complete set of rows has been read.
<p>
a null column can be specified by leaving the object null, or indicated
by returning a non-null getvalidcolumns.  on streaming columns, it can
be indicated by returning a non-null get fieldstates.
<p>
if rowsource.needtoclone() is true then the returned row
(the datavaluedescriptor[]) is guaranteed not to be modified by drainer
of the rowsource (except that the input stream will be read, of course)
and drainer will keep no reference to it before making the subsequent
nextrow call.  so it is safe to return the same datavaluedescriptor[]
in subsequent nextrow calls if that is desirable for performance
reasons.
<p>
if rowsource.needtoclone() is false then the returned row (the
datavaluedescriptor[]) may be be modified by drainer of the rowsource,
and the drainer may keep a reference to it after making the subsequent
nextrow call.  in this case the client should severe all references to
the row after returning it from getnextrowfromrowsource().
@exception standardexception cloudscape standard error policy
*/
public datavaluedescriptor getnextrowfromrowsource
throws standardexception
/**
does the caller of getnextrowfromrowsource() need to clone the row
in order to keep a reference to the row past the
getnextrowfromrowsource() call which returned the row.  this call
must always return the same for all rows in a rowsource (ie. the
caller will call this once per scan from a rowsource and assume the
behavior is true for all rows in the rowsource).
*/
public boolean needstoclone
/**
getvalidcolumns describes the datavaluedescriptor[] returned by all calls
to the getnextrowfromrowsource() call.
if getvalidcolumns returns null, the number of columns is given by the
datavaluedescriptor.length where datavaluedescriptor[] is returned by the
preceeding getnextrowfromrowsource() call.  column n maps to
datavaluedescriptor[n], where column numbers start at zero.
if getvalidcolumns return a non null validcolumns formatablebitset the number of
columns is given by the number of bits set in validcolumns.  column n is
not in the partial row if validcolumns.get(n) returns false.  column n is
in the partial row if validcolumns.get(n) returns true.  if column n is
in the partial row then it maps to datavaluedescriptor[m] where m is the
count of calls to validcolumns.get(i) that return true where i < n.  if
datavaluedescriptor.length is greater than the number of columns
indicated by validcolumns the extra entries are ignored.
*/
formatablebitset getvalidcolumns
/**
closerowsource tells the rowsource that it will no longer need to
return any rows and it can release any resource it may have.
subsequent call to any method on the rowsource will result in undefined
behavior.  a closed rowsource can be closed again.
*/
void closerowsource