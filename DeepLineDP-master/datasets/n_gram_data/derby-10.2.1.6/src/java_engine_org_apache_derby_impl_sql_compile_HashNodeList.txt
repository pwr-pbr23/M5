/*
derby - class org.apache.derby.impl.sql.compile.hashnodelist
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package	org apache derby impl sql compile
import org apache derby iapi error standardexception
import org apache derby iapi services sanity sanitymanager
import java util hashtable
import java util enumeration
/**
* hashnodelist is the root class for all hashlists of query tree nodes.
* it implements the querytree interface that is part of the language
* protocols
*
* @author rick hillegas
*/
public abstract class hashnodelist extends querytreenode
private	hashtable		hashtable   new hashtable
/////////////////////////////////////////////////////////////////
//
//	hashtable forwards
//
/////////////////////////////////////////////////////////////////
/**
*	add an element to this hash list.
*
*	@param	key		hash key for new value
*	@param	value	new item to add to list
*
*/
public	void	add  object key  object value
hashtable put  key  value
/**
*	returns the size of the list.
*
*	@return	size of the list
*/
public	int	size     return hashtable size
/**
*	get an iterator to walk this hash list
*
*	@return	an enumeration for walking this hash list
*/
public	enumeration	elements
return	hashtable elements
/**
*	gets an element by key
*
*	@param	key		hash key to lookup
*
*	@return	the element associated with the hash key
*			null if no element with that key exists
*
*/
public	object	get  object key
return	hashtable get  key
/////////////////////////////////////////////////////////////////
//
//	object support
//
/////////////////////////////////////////////////////////////////
/**
* convert this object to a string.  see comments in querytreenode.java
* for how this should be done for tree printing.
*
* @return	this object as a string
*/
public string tostring
if  sanitymanager debug
enumeration		iterator
stringbuffer	buffer   new stringbuffer
object			item
for  iterator   elements    iterator hasmoreelements      true
item   iterator nextelement
buffer append item tostring
buffer append
return buffer tostring
else
return
/////////////////////////////////////////////////////////////////
//
//	query tree node methods
//
/////////////////////////////////////////////////////////////////
/**
* get the optimizer's cost estimate for an optimized querytree.
* for non-optimizable statements (for example, create table),
* return null.  for optimizable statements, this method will be
* over-ridden in the statement's root node (dmlstatementnode in
* all cases we know about so far).
*
* @return	null
*/
// public costestimate	getcostestimate()
// {
// return null;
// }
/**
* returns whether or not this statement requires a set/clear savepoint
* around its execution.  the following statement "types" do not require them:
*		cursor	- unnecessary and won't work in a read only environment
*		xact	- savepoint will get blown away underneath us during commit/rollback
*
* @return boolean	whether or not this statement requires a set/clear savepoint
*/
public boolean needssavepoint
if  sanitymanager debug
sanitymanager assert false
return false