/*
derby - class org.apache.derby.client.net.netconnectionreply
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby client net
import javax transaction xa xid
import org apache derby client am connection
import org apache derby client am connectioncallbackinterface
import org apache derby client am statementcallbackinterface
import org apache derby client am resultsetcallbackinterface
import org apache derby client am disconnectexception
import org apache derby client am sqlexception
import org apache derby client am clientmessageid
import org apache derby client am sqlca
import java io unsupportedencodingexception
import org apache derby client am unitofworklistener
import org apache derby shared common error exceptionseverity
import org apache derby shared common error exceptionutil
import org apache derby shared common reference sqlstate
import org apache derby shared common reference messageid
import org apache derby shared common i18n messageutil
public class netconnectionreply extends reply
implements connectionreplyinterface
private static messageutil msgutil_   sqlexception getmessageutil
netconnectionreply netagent netagent  int buffersize
super netagent  buffersize
// net only entry point
void readexchangeserverattributes connection connection  throws sqlexception
startsameidchainparse
parseexcsatreply  netconnection  connection
endofsameidchaindata
agent_ checkforchainbreakingexception_
void verifydeferredreset   throws sqlexception
readdssheader
verifyconnectreply codepoint excsatrd
readdssheader
verifyconnectreply codepoint accsecrd
readdssheader
verifyconnectreply codepoint secchkrm
readdssheader
verifyconnectreply codepoint accrdbrm
agent_ checkforchainbreakingexception_
void verifyconnectreply int codept  throws sqlexception
if  peekcodepoint      codept
parseconnecterror
return
readlengthandcodepoint
skipbytes
if  codept    codepoint accrdbrm
int peekcp   peekcodepoint
if  peekcp    reply end_of_same_id_chain
return
parsetypdefsormgrlvlovrs
netsqlca netsqlca   parsesqlcard null
netagent_ netconnection_ completesqlca netsqlca
void parseconnecterror   throws disconnectexception
int peekcp   peekcodepoint
switch  peekcp
case codepoint cmdchkrm
parsecmdchkrm
break
case codepoint mgrlvlrm
parsemgrlvlrm
break
default
parsecommonerror peekcp
void readdummyexchangeserverattributes connection connection  throws sqlexception
startsameidchainparse
parsedummyexcsatreply  netconnection  connection
endofsameidchaindata
agent_ checkforchainbreakingexception_
// net only entry point
void readaccesssecurity connection connection
int securitymechanism  throws sqlexception
startsameidchainparse
parseaccsecreply  netconnection  connection  securitymechanism
endofsameidchaindata
agent_ checkforchainbreakingexception_
// net only entry point
void readsecuritycheck connection connection  throws sqlexception
startsameidchainparse
parsesecchkreply  netconnection  connection
endofsameidchaindata
agent_ checkforchainbreakingexception_
// net only entry point
void readaccessdatabase connection connection  throws sqlexception
startsameidchainparse
parseaccrdbreply  netconnection  connection
endofsameidchaindata
agent_ checkforchainbreakingexception_
public void readcommitsubstitute connectioncallbackinterface connection  throws disconnectexception
startsameidchainparse
parsedummyexcsatreply  netconnection  connection
endofsameidchaindata
public void readlocalcommit connectioncallbackinterface connection  throws disconnectexception
startsameidchainparse
parserdbcmmreply connection
endofsameidchaindata
public void readlocalrollback connectioncallbackinterface connection  throws disconnectexception
startsameidchainparse
parserdbrllbckreply connection
endofsameidchaindata
public void readlocalxastart connectioncallbackinterface connection  throws disconnectexception
public void readlocalxacommit connectioncallbackinterface connection  throws disconnectexception
public void readlocalxarollback connectioncallbackinterface connection  throws disconnectexception
protected void readxastartunitofwork netconnection conn  throws disconnectexception
protected int readxaendunitofwork netconnection conn  throws disconnectexception
return 0
protected int readxaprepare netconnection conn  throws disconnectexception
return 0
protected void readxacommit netconnection conn  throws disconnectexception
protected int readxarollback netconnection conn  throws disconnectexception
return 0
protected void readxarecover netconnection conn  throws disconnectexception
protected void readxaforget netconnection conn  throws disconnectexception
//------------------parse reply for specific command--------------------------
// these methods are "private protected", which is not a recognized java privilege,
// but means that these methods are private to this class and to subclasses,
// and should not be used as package-wide friendly methods.
// parse the reply for the rdb commit unit of work command.
// this method handles the parsing of all command replies and reply data
// for the rdbcmm command.
private void parserdbcmmreply connectioncallbackinterface connection  throws disconnectexception
int peekcp   parsetypdefsormgrlvlovrs
if  peekcp    codepoint enduowrm    peekcp    codepoint sqlcard
parsecommiterror connection
return
if  peekcp    codepoint enduowrm
parseenduowrm connection
peekcp   parsetypdefsormgrlvlovrs
netsqlca netsqlca   parsesqlcard null
connection completesqlca netsqlca
// parse the reply for the rdb rollback unit of work command.
// this method handles the parsing of all command replies and reply data
// for the rdbrllbck command.
private void parserdbrllbckreply connectioncallbackinterface connection  throws disconnectexception
int peekcp   parsetypdefsormgrlvlovrs
if  peekcp    codepoint enduowrm
parserollbackerror
return
parseenduowrm connection
peekcp   parsetypdefsormgrlvlovrs
netsqlca netsqlca   parsesqlcard null
connection completesqlca netsqlca
// parse the reply for the exchange server attributes command.
// this method handles the parsing of all command replies and reply data
// for the excsat command.
private void parseexcsatreply netconnection netconnection  throws disconnectexception
if  peekcodepoint      codepoint excsatrd
parseexchangeserverattributeserror
return
parseexcsatrd netconnection
// parse the reply for the exchange server attributes command (dummy)
// this method handles the parsing of all command replies and reply data
// for the excsat command.
private void parsedummyexcsatreply netconnection netconnection  throws disconnectexception
if  peekcodepoint      codepoint excsatrd
parseexchangeserverattributeserror
return
parsedummyexcsatrd netconnection
// parse the reply for the access security command.
// this method handles the parsing of all command replies and reply data
// for the accsec command.
private void parseaccsecreply netconnection netconnection  int securitymechanism  throws disconnectexception
int peekcp   peekcodepoint
if  peekcp    codepoint accsecrd
parseaccesssecurityerror netconnection
return
parseaccsecrd netconnection  securitymechanism
peekcp   peekcodepoint
if  peekcp    reply end_of_same_id_chain
return
// parse the reply for the security check command.
// this method handles the parsing of all command replies and reply data
// for the secchk command.
private void parsesecchkreply netconnection netconnection  throws disconnectexception
if  peekcodepoint      codepoint secchkrm
parsesecuritycheckerror netconnection
return
parsesecchkrm netconnection
if  peekcodepoint      codepoint sectkn
// rpydta used only if the security mechanism returns
// a security token that must be sent back to the source system.
// this is only used for dcssec.  in the case of dcesec,
// the sectkn must be returned as reply data if dce is using
// mutual authentication.
// need to double check what to map this to.  this is probably
// incorrect but consider it a conversation protocol error
// 0x03 - objdss sent when not allowed.
//parsesectkn (true);
boolean done   false
byte bytes   parsesectkn false
// parse the reply for the access rdb command.
// this method handles the parsing of all command replies and reply data
// for the accrdb command.
private void parseaccrdbreply netconnection netconnection  throws disconnectexception
int peekcp   peekcodepoint
if  peekcp    codepoint accrdbrm
parseaccessrdberror netconnection
return
parseaccrdbrm netconnection
peekcp   peekcodepoint
if  peekcp    reply end_of_same_id_chain
return
parsetypdefsormgrlvlovrs
netsqlca netsqlca   parsesqlcard null
netconnection completesqlca netsqlca
protected int parsetypdefsormgrlvlovrs   throws disconnectexception
boolean targettypedefcloned   false
while  true
int peekcp   peekcodepoint
if  peekcp    codepoint typdefnam
if   targettypedefcloned
netagent_ targettypdef_    typdef  netagent_ targettypdef_ clone
targettypedefcloned   true
parsetypdefnam
else if  peekcp    codepoint typdefovr
if   targettypedefcloned
netagent_ targettypdef_    typdef  netagent_ targettypdef_ clone
targettypedefcloned   true
parsetypdefovr
else
return peekcp
//-----------------------------parse ddm reply messages-----------------------
protected void parsecommiterror connectioncallbackinterface connection  throws disconnectexception
int peekcp   peekcodepoint
switch  peekcp
case codepoint abnuowrm
netsqlca sqlca   parseabnormalenduow connection null
connection completesqlca sqlca
break
case codepoint cmdchkrm
parsecmdchkrm
break
case codepoint rdbnacrm
parserdbnacrm
break
default
parsecommonerror peekcp
break
void parserollbackerror   throws disconnectexception
int peekcp   peekcodepoint
switch  peekcp
case codepoint cmdchkrm
parsecmdchkrm
break
case codepoint rdbnacrm
parserdbnacrm
break
default
parsecommonerror peekcp
break
void parseexchangeserverattributeserror   throws disconnectexception
int peekcp   peekcodepoint
switch  peekcp
case codepoint cmdchkrm
parsecmdchkrm
break
case codepoint mgrlvlrm
parsemgrlvlrm
break
default
parsecommonerror peekcp
void parseaccesssecurityerror netconnection netconnection  throws disconnectexception
int peekcp   peekcodepoint
switch  peekcp
case codepoint cmdchkrm
parsecmdchkrm
break
case codepoint rdbnfnrm
parserdbnfnrm netconnection
break
case codepoint rdbaflrm
parserdbaccessfailed netconnection
break
default
parsecommonerror peekcp
void parsesecuritycheckerror netconnection netconnection  throws disconnectexception
int peekcp   peekcodepoint
switch  peekcp
case codepoint cmdchkrm
parsecmdchkrm
break
case codepoint objnsprm
parseobjnsprm
break
case codepoint rdbnfnrm
parserdbnfnrm netconnection
break
case codepoint rdbaflrm
parserdbaccessfailed netconnection
break
default
parsecommonerror peekcp
void parseaccessrdberror netconnection netconnection  throws disconnectexception
int peekcp   peekcodepoint
switch  peekcp
case codepoint cmdchkrm
parsecmdchkrm
break
case codepoint rdbaccrm
parserdbaccrm
break
case codepoint rdbaflrm
parserdbaccessfailed netconnection
break
case codepoint rdbathrm
parserdbathrm netconnection
break
case codepoint rdbnfnrm
parserdbnfnrm netconnection
break
default
parsecommonerror peekcp
// called by all the net*reply classes.
void parsecommonerror int peekcp  throws disconnectexception
switch  peekcp
case codepoint cmdnsprm
parsecmdnsprm
break
case codepoint prccnvrm
parseprccnvrm
break
case codepoint syntaxrm
parsesyntaxrm
break
case codepoint valnsprm
parsevalnsprm
break
default
doobjnsprmsemantics peekcp
/**
* perform necessary actions for parsing of a abnuowrm message.
*
* @param connection an implementation of the connectioncallbackinterface
*
* @return an netsqlca object obtained from parsing the abnuowrm
* @throws disconnectexception
*
*/
netsqlca parseabnormalenduow connectioncallbackinterface connection unitofworklistener uwl  throws disconnectexception
parseabnuowrm
if  peekcodepoint      codepoint sqlcard
parsetypdefsormgrlvlovrs
netsqlca netsqlca   parsesqlcard null
if exceptionutil getseverityfromidentifier netsqlca getsqlstate    >
exceptionseverity statement_severity    uwl    null
connection completeabnormalunitofwork
else
connection completeabnormalunitofwork uwl
return netsqlca
/**
* perform necessary actions for parsing of a abnuowrm message.
*
* @param s an implementation of the statementcallbackinterface
*
* @return an netsqlca object obtained from parsing the abnuowrm
* @throws disconnectexception
*
*/
netsqlca parseabnormalenduow statementcallbackinterface s  throws disconnectexception
return parseabnormalenduow s getconnectioncallbackinterface   s
/**
* perform necessary actions for parsing of a abnuowrm message.
*
* @param r an implementation of the resultsetcallbackinterface
*
* @return an netsqlca object obtained from parsing the abnuowrm
* @throws disconnectexception
*
*/
netsqlca parseabnormalenduow resultsetcallbackinterface r  throws disconnectexception
return parseabnormalenduow r getconnectioncallbackinterface   r
void parserdbaccessfailed netconnection netconnection  throws disconnectexception
parserdbaflrm
// an sqlcard is returned if an rdbalfrm is returned.
// this sqlcard always follows the rdbalfrm.
// typdefnam and typdefovr are mtlinc
if  peekcodepoint      codepoint typdefnam
parsetypdefnam
parsetypdefovr
else
parsetypdefovr
parsetypdefnam
netsqlca netsqlca   parsesqlcard null
//check if the sqlcard has null sqlexception
if netsqlca getsqlerrmc      null
netconnection setconnectionnull true
else
netconnection completesqlca netsqlca
// the security check (secchkrm) reply message indicates the acceptability
// of the security information.
// this method returns the security check code. it is up to the caller to check
// the value of this return code and take the appropriate action.
//
// returned from server:
// svrcod - required  (0 - info, 8 - error, 16 -severe)
// secchkcd - required
// sectkn - optional, ignorable
// svcerrno - optional
private void parsesecchkrm netconnection netconnection  throws disconnectexception
boolean svrcodreceived   false
int svrcod   codepoint svrcod_info
boolean secchkcdreceived   false
int secchkcd   codepoint secchkcd_00
boolean sectknreceived   false
byte sectkn   null
parselengthandmatchcodepoint codepoint secchkrm
pushlengthoncollectionstack
int peekcp   peekcodepoint
while  peekcp    reply end_of_collection
boolean foundinpass   false
if  peekcp    codepoint svrcod
// severity code.  it's value is dictated by the secchkcd.
// right now it will not be checked that it is the correct value
// for the secchkcd.  maybe this will be done in the future.
foundinpass   true
svrcodreceived   checkandgetreceivedflag svrcodreceived
svrcod   parsesvrcod codepoint svrcod_info  codepoint svrcod_severe
peekcp   peekcodepoint
if  peekcp    codepoint secchkcd
// security check code. this specifies the state of the security information.
// there is a relationship between this value and the svrcod value.
// right now this driver will not check these values against each other.
foundinpass   true
secchkcdreceived   checkandgetreceivedflag secchkcdreceived
secchkcd   parsesecchkcd
peekcp   peekcodepoint
if  peekcp    codepoint sectkn
// security token.
// used when mutual authentication of the source and target servers
// is requested.  the architecture lists this as an instance variable
// and also says that the sectkn flows as reply data to the secchk cmd and
// it must flow after the secchkrm message.  right now this driver doesn't
// support ay mutual authentication so it will be ignored (it is listed
// as an ignorable instance variable in the ddm manual).
foundinpass   true
sectknreceived   checkandgetreceivedflag sectknreceived
sectkn   parsesectkn true
peekcp   peekcodepoint
if   foundinpass
doprmnsprmsemantics peekcp
popcollectionstack
// check for the required instance variables.
checkrequiredobjects svrcodreceived  secchkcdreceived
netconnection securitycheckcomplete svrcod  secchkcd
// access to rdb completed (acrdbrm) reply message specifies that an
// instance of the sql application manager has been created and is bound
// to the specified relation database (rdb).
//
// returned from server:
// svrcod - required  (0 - info, 4 - warning)
// prdid - required
// typdefnam - required (minlvl 4) (qtdsqljvm)
// typdefovr - required
// rdbinttkn - optional
// crrtkn - optional
// usrid - optional
// srvlst - optional (minlvl 5)
private void parseaccrdbrm netconnection netconnection  throws disconnectexception
boolean svrcodreceived   false
int svrcod   codepoint svrcod_info
boolean prdidreceived   false
string prdid   null
boolean typdefnamreceived   false
boolean typdefovrreceived   false
boolean rdbinttknreceived   false
boolean crrtknreceived   false
byte crrtkn   null
boolean usridreceived   false
string usrid   null
parselengthandmatchcodepoint codepoint accrdbrm
pushlengthoncollectionstack
int peekcp   peekcodepoint
while  peekcp    reply end_of_collection
boolean foundinpass   false
if  peekcp    codepoint svrcod
// severity code.  if the target sqlam cannot support the typdefovr
// parameter values specified for the double-byte and mixed-byte ccsids
// on the corresponding accrdb command, then the severity code warning
// is specified on the accrdbrm.
foundinpass   true
svrcodreceived   checkandgetreceivedflag svrcodreceived
svrcod   parsesvrcod codepoint svrcod_info  codepoint svrcod_warning
peekcp   peekcodepoint
// this is the product release level of the target rdb server.
if  peekcp    codepoint prdid
foundinpass   true
prdidreceived   checkandgetreceivedflag prdidreceived
prdid   parseprdid false      false means do not skip the bytes
peekcp   peekcodepoint
if  peekcp    codepoint typdefnam
// this is the name of the data type to the data representation mapping
// definitions tha the target sqlam uses when sending reply data objects.
foundinpass   true
typdefnamreceived   checkandgetreceivedflag typdefnamreceived
parsetypdefnam
peekcp   peekcodepoint
if  peekcp    codepoint typdefovr
// this is the single-byte, double-byte, and mixed-byte ccsids of the
// scalar data arrays (sda) in the identified data type to data representation
// mapping definitions.
foundinpass   true
typdefovrreceived   checkandgetreceivedflag typdefovrreceived
parsetypdefovr
peekcp   peekcodepoint
if  peekcp    codepoint usrid
// specifies the target defined user id.  it is returned if the value of
// trgdftrt is true in accrdb.  right now this driver always sets this
// value to false so this should never get returned here.
// if it is returned, it could be considered an error but for now
// this driver will just skip the bytes.
foundinpass   true
usridreceived   checkandgetreceivedflag usridreceived
usrid   parseusrid true
peekcp   peekcodepoint
if  peekcp    codepoint crrtkn
// carries information to correlate with the work being done on bahalf
// of an application at the source and at the target server.
// defualt value is ''.
// this parameter is only retunred if an only if the crrtkn parameter
// is not received on accrdb.  we will rely on server to send us this
// in accrdbrm
foundinpass   true
crrtknreceived   checkandgetreceivedflag crrtknreceived
crrtkn   parsecrrtkn false
peekcp   peekcodepoint
if   foundinpass
doprmnsprmsemantics peekcp
popcollectionstack
// check for the required instance variables.
checkrequiredobjects svrcodreceived
prdidreceived
typdefnamreceived
typdefovrreceived
netconnection rdbaccessed svrcod
prdid
crrtknreceived
crrtkn
// the end unit of work condition (enduowrm) reply mesage specifies
// that the unit of work has ended as a result of the last command.
//
// returned from server:
//   svrcod - required  (4 warning)
//   uowdsp - required
//   rdbnam - optional
void parseenduowrm connectioncallbackinterface connection  throws disconnectexception
boolean svrcodreceived   false
int svrcod   codepoint svrcod_info
boolean uowdspreceived   false
int uowdsp   0
boolean rdbnamreceived   false
string rdbnam   null
parselengthandmatchcodepoint codepoint enduowrm
pushlengthoncollectionstack
int peekcp   peekcodepoint
while  peekcp    reply end_of_collection
boolean foundinpass   false
if  peekcp    codepoint svrcod
foundinpass   true
svrcodreceived   checkandgetreceivedflag svrcodreceived
svrcod   parsesvrcod codepoint svrcod_warning  codepoint svrcod_warning
peekcp   peekcodepoint
if  peekcp    codepoint uowdsp
foundinpass   true
uowdspreceived   checkandgetreceivedflag uowdspreceived
uowdsp   parseuowdsp
peekcp   peekcodepoint
if  peekcp    codepoint rdbnam
foundinpass   true
rdbnamreceived   checkandgetreceivedflag rdbnamreceived
rdbnam   parserdbnam true
peekcp   peekcodepoint
if   foundinpass
doprmnsprmsemantics peekcp
popcollectionstack
checkrequiredobjects svrcodreceived  uowdspreceived
netagent_ setsvrcod svrcod
if  uowdsp    codepoint uowdsp_commit
connection completelocalcommit
else
connection completelocalrollback
// command check reply message indicates that the requested
// command encountered an unarchitected and implementation-specific
// condition for which there is no architected message.  if the severity
// code value is error or greater, the command has failed.  the
// message can be accompanied by other messages that help to identify
// the specific condition.
// the cmdchkrm should not be used as a general catch-all in place of
// product-defined messages when using product extensions to ddm.
// protocol architects the sqlstate value depending on svrcod
// svrcod 0 -> sqlstate is not returned
// svrcod 8 -> sqlstate of 58008 or 58009
// svrcod 16,32,64,128 -> sqlstate of 58009
//
// messages
//   sqlstate : 58009
//     execution failed due to a distribution protocol error that caused deallocation of the conversation.
//     sqlcode : -30020
//     execution failed because of a distributed protocol
//       error that will affect the successful execution of subsequent
//       commands and sql statements: reason code <reason-code>.
//     some possible reason codes include:
//       121c indicates that the user is not authorized to perform the requested command.
//       1232 the command could not be completed because of a permanent error.
//         in most cases, the server will be in the process of an abend.
//       220a the target server has received an invalid data description.
//         if a user sqlda is specified, ensure that the fields are
//         initialized correctly. also, ensure that the length does not
//         exceed the maximum allowed length for the data type being used.
//
// the command or statement cannot be processed.  the current
// transaction is rolled back and the application is disconnected
//  from the remote database.
//
//
// returned from server:
//   svrcod - required  (0 - info, 4 - warning, 8 - error, 16 - severe,
//                       32 - accdmg, 64 - prmdmg, 128 - sesdmg))
//   rdbnam - optional (minlvl 3)
//   reccnt - optional (minval 0, minlvl 3)
//
// called by all the reply classescmdchkrm
protected void parsecmdchkrm   throws disconnectexception
boolean svrcodreceived   false
int svrcod   codepoint svrcod_info
boolean rdbnamreceived   false
string rdbnam   null
parselengthandmatchcodepoint codepoint cmdchkrm
pushlengthoncollectionstack
int peekcp   peekcodepoint
while  peekcp    reply end_of_collection
boolean foundinpass   false
if  peekcp    codepoint svrcod
foundinpass   true
svrcodreceived   checkandgetreceivedflag svrcodreceived
svrcod   parsesvrcod codepoint svrcod_info  codepoint svrcod_sesdmg
peekcp   peekcodepoint
if  peekcp    codepoint rdbnam
foundinpass   true
rdbnamreceived   checkandgetreceivedflag rdbnamreceived
rdbnam   parserdbnam true
peekcp   peekcodepoint
// skip over the reccnt since it can't be found in the ddm book.
if  peekcp    0x115c
foundinpass   true
parselengthandmatchcodepoint 0x115c
skipbytes
peekcp   peekcodepoint
if   foundinpass
doprmnsprmsemantics peekcp
popcollectionstack
checkrequiredobjects svrcodreceived
netagent_ setsvrcod svrcod
agent_ accumulatechainbreakingreadexceptionandthrow new disconnectexception agent_
new clientmessageid sqlstate drda_connection_terminated
msgutil_ gettextmessage messageid conn_drda_cmdchkrm
// rdb not accessed reply message indicates that the access relational
// database command (accrdb) was not issued prior to a command
// requesting the rdb services.
// protocol architects an sqlstate of 58008 or 58009.
//
// messages
// sqlstate : 58009
//     execution failed due to a distribution protocol error that caused deallocation of the conversation.
//     sqlcode : -30020
//     execution failed because of a distributed protocol
//         error that will affect the successful execution of subsequent
//         commands and sql statements: reason code <reason-code>.
//      some possible reason codes include:
//      121c indicates that the user is not authorized to perform the requested command.
//      1232 the command could not be completed because of a permanent error.
//          in most cases, the server will be in the process of an abend.
//      220a the target server has received an invalid data description.
//          if a user sqlda is specified, ensure that the fields are
//          initialized correctly. also, ensure that the length does not
//          exceed the maximum allowed length for the data type being used.
//
//      the command or statement cannot be processed.  the current
//      transaction is rolled back and the application is disconnected
//      from the remote database.
//
//
// returned from server:
// svrcod - required  (8 - error)
// rdbnam - required
//
// called by all the net*reply classes.
void parserdbnacrm   throws disconnectexception
boolean svrcodreceived   false
int svrcod   codepoint svrcod_info
boolean rdbnamreceived   false
string rdbnam   null
parselengthandmatchcodepoint codepoint rdbnacrm
pushlengthoncollectionstack
int peekcp   peekcodepoint
while  peekcp    reply end_of_collection
boolean foundinpass   false
if  peekcp    codepoint svrcod
foundinpass   true
svrcodreceived   checkandgetreceivedflag svrcodreceived
svrcod   parsesvrcod codepoint svrcod_error  codepoint svrcod_error
peekcp   peekcodepoint
if  peekcp    codepoint rdbnam
foundinpass   true
rdbnamreceived   checkandgetreceivedflag rdbnamreceived
rdbnam   parserdbnam true
peekcp   peekcodepoint
if   foundinpass
doprmnsprmsemantics peekcp
popcollectionstack
checkrequiredobjects svrcodreceived  rdbnamreceived
netagent_ setsvrcod svrcod
agent_ accumulatechainbreakingreadexceptionandthrow
new disconnectexception agent_
new clientmessageid sqlstate drda_connection_terminated
msgutil_ gettextmessage messageid conn_drda_rdbnacrm
// rdb not found reply message indicates that the target
// server cannot find the specified relational database.
// protocol architects an sqlstate of 08004.
//
// messages
// sqlstate : 8004
//     the application server rejected establishment of the connection.
//     sqlcode : -30061
//     the database alias or database name <name> was not found at the remote node.
//     the statement cannot be processed.
//
//
// returned from server:
// svrcod - required  (8 - error)
// rdbnam - required
//
private void parserdbnfnrm netconnection netconnection  throws disconnectexception
boolean svrcodreceived   false
int svrcod   codepoint svrcod_info
boolean rdbnamreceived   false
string rdbnam   null
parselengthandmatchcodepoint codepoint rdbnfnrm
pushlengthoncollectionstack
int peekcp   peekcodepoint
while  peekcp    reply end_of_collection
boolean foundinpass   false
if  peekcp    codepoint svrcod
foundinpass   true
svrcodreceived   checkandgetreceivedflag svrcodreceived
svrcod   parsesvrcod codepoint svrcod_error  codepoint svrcod_error
peekcp   peekcodepoint
if  peekcp    codepoint rdbnam
foundinpass   true
rdbnamreceived   checkandgetreceivedflag rdbnamreceived
rdbnam   parserdbnam true
peekcp   peekcodepoint
if   foundinpass
doprmnsprmsemantics peekcp
popcollectionstack
checkrequiredobjects svrcodreceived  rdbnamreceived
netagent_ setsvrcod svrcod
agent_ accumulatechainbreakingreadexceptionandthrow new disconnectexception agent_
new clientmessageid sqlstate net_database_not_found
netconnection databasename_
// not authorized to rdb reply message specifies that
// the requester is not authorized to access the specified
// relational database.
// protocol architects an sqlstate of 08004
//
// messages
// sqlstate : 8004
//     authorization id <authorization-id> attempted to perform the specified
//     <operation> without having been granted the proper authorization to do so.
//     sqlcode : -30060
//      <authorization-id> does not have the privilege to perform operation <operation>.
//
//
// returned from server:
// svrcod - required  (8 - error)
// rdbnam - required
//
private void parserdbathrm netconnection netconnection  throws disconnectexception
boolean svrcodreceived   false
int svrcod   codepoint svrcod_info
boolean rdbnamreceived   false
string rdbnam   null
parselengthandmatchcodepoint codepoint rdbathrm
pushlengthoncollectionstack
int peekcp   peekcodepoint
while  peekcp    reply end_of_collection
boolean foundinpass   false
if  peekcp    codepoint svrcod
foundinpass   true
svrcodreceived   checkandgetreceivedflag svrcodreceived
svrcod   parsesvrcod codepoint svrcod_error  codepoint svrcod_error
peekcp   peekcodepoint
if  peekcp    codepoint rdbnam
foundinpass   true
rdbnamreceived   checkandgetreceivedflag rdbnamreceived
rdbnam   parserdbnam true
peekcp   peekcodepoint
if   foundinpass
doprmnsprmsemantics peekcp
popcollectionstack
checkrequiredobjects svrcodreceived  rdbnamreceived
netagent_ setsvrcod svrcod
netagent_ accumulatereadexception new sqlexception agent_ logwriter_
new clientmessageid sqlstate net_connect_auth_failed
msgutil_ gettextmessage messageid conn_user_not_authorized_to_db
// data stream syntax error reply message indicates that the data
// sent to the target agent does not structurally conform to the requirements
// of the ddm architecture.  the target agent terminated paring of the dss
// when the condition synerrcd specified was detected.
// protocol architects an sqlstate of 58008 or 58009.
//
// messages
// sqlstate : 58009
//     execution failed due to a distribution protocol error that caused deallocation of the conversation.
//     sqlcode : -30020
//     execution failed because of a distributed protocol
//         error that will affect the successful execution of subsequent
//         commands and sql statements: reason code <reason-code>.
//      some possible reason codes include:
//      121c indicates that the user is not authorized to perform the requested command.
//      1232 the command could not be completed because of a permanent error.
//          in most cases, the server will be in the process of an abend.
//      220a the target server has received an invalid data description.
//          if a user sqlda is specified, ensure that the fields are
//          initialized correctly. also, ensure that the length does not
//          exceed the maximum allowed length for the data type being used.
//
//      the command or statement cannot be processed.  the current
//          transaction is rolled back and the application is disconnected
//          from the remote database.
//
//
// returned from server:
// svrcod - required  (8 - error)
// synerrcd - required
// reccnt - optional (minval 0, minlvl 3) (will not be returned - should be ignored)
// codpnt - optional (minlvl 3)
// rdbnam - optional (minlvl 3)
//
protected void parsesyntaxrm   throws disconnectexception
boolean svrcodreceived   false
int svrcod   codepoint svrcod_info
boolean synerrcdreceived   false
int synerrcd   0
boolean rdbnamreceived   false
string rdbnam   null
boolean codpntreceived   false
int codpnt   0
parselengthandmatchcodepoint codepoint syntaxrm
pushlengthoncollectionstack
int peekcp   peekcodepoint
while  peekcp    reply end_of_collection
boolean foundinpass   false
if  peekcp    codepoint svrcod
foundinpass   true
svrcodreceived   checkandgetreceivedflag svrcodreceived
svrcod   parsesvrcod codepoint svrcod_error  codepoint svrcod_error
peekcp   peekcodepoint
if  peekcp    codepoint synerrcd
foundinpass   true
synerrcdreceived   checkandgetreceivedflag synerrcdreceived
synerrcd   parsesynerrcd
peekcp   peekcodepoint
if  peekcp    codepoint rdbnam
foundinpass   true
rdbnamreceived   checkandgetreceivedflag rdbnamreceived
rdbnam   parserdbnam true
peekcp   peekcodepoint
if  peekcp    codepoint codpnt
foundinpass   true
codpntreceived   checkandgetreceivedflag codpntreceived
codpnt   parsecodpnt
peekcp   peekcodepoint
// reccnt will be skipped.
if   foundinpass
doprmnsprmsemantics peekcp
popcollectionstack
checkrequiredobjects svrcodreceived  synerrcdreceived
netagent_ setsvrcod svrcod
dosyntaxrmsemantics codpnt
// rdb currently accessed reply message inidcates that the
// accrdb command cannot be issued because the requester
// has access to a relational database.
// protocol architects an sqlstate of 58008 or 58009.
//
// messages
// sqlstate : 58009
//     execution failed due to a distribution protocol error that caused deallocation of the conversation.
//     sqlcode : -30020
//     execution failed because of a distributed protocol
//         error that will affect the successful execution of subsequent
//         commands and sql statements: reason code <reason-code>.
//      some possible reason codes include:
//      121c indicates that the user is not authorized to perform the requested command.
//      1232 the command could not be completed because of a permanent error.
//          in most cases, the server will be in the process of an abend.
//      220a the target server has received an invalid data description.
//          if a user sqlda is specified, ensure that the fields are
//          initialized correctly. also, ensure that the length does not
//          exceed the maximum allowed length for the data type being used.
//
//      the command or statement cannot be processed.  the current
//      transaction is rolled back and the application is disconnected
//      from the remote database.
//
//
// returned from server:
// svrcod - required  (8 - error)
// rdbnam - required
//
private void parserdbaccrm   throws disconnectexception
boolean svrcodreceived   false
int svrcod   codepoint svrcod_info
boolean rdbnamreceived   false
string rdbnam   null
parselengthandmatchcodepoint codepoint rdbaccrm
pushlengthoncollectionstack
int peekcp   peekcodepoint
while  peekcp    reply end_of_collection
boolean foundinpass   false
if  peekcp    codepoint svrcod
foundinpass   true
svrcodreceived   checkandgetreceivedflag svrcodreceived
svrcod   parsesvrcod codepoint svrcod_error  codepoint svrcod_error
peekcp   peekcodepoint
if  peekcp    codepoint rdbnam
foundinpass   true
rdbnamreceived   checkandgetreceivedflag rdbnamreceived
rdbnam   parserdbnam true
peekcp   peekcodepoint
if   foundinpass
doprmnsprmsemantics peekcp
popcollectionstack
checkrequiredobjects svrcodreceived  rdbnamreceived
netagent_ setsvrcod svrcod
agent_ accumulatechainbreakingreadexceptionandthrow new disconnectexception agent_
new clientmessageid sqlstate drda_connection_terminated
msgutil_ gettextmessage messageid conn_drda_rdbaccrm
// rdb access failed reply message specifies that the relational
// database failed the attempted connection.
// an sqlcard object must also be returned, following the
// rdbaflrm, to explain why the rdb failed the connection.
// in addition, the target sqlam instance is destroyed.
// the sqlstate is returned in the sqlcard.
//
// messages
// sqlstate : 58009
//     execution failed due to a distribution protocol error that caused deallocation of the conversation.
//     sqlcode : -30020
//     execution failed because of a distributed protocol
//         error that will affect the successful execution of subsequent
//         commands and sql statements: reason code <reason-code>.
//      some possible reason codes include:
//      121c indicates that the user is not authorized to perform the requested command.
//      1232 the command could not be completed because of a permanent error.
//          in most cases, the server will be in the process of an abend.
//      220a the target server has received an invalid data description.
//          if a user sqlda is specified, ensure that the fields are
//          initialized correctly. also, ensure that the length does not
//          exceed the maximum allowed length for the data type being used.
//
//      the command or statement cannot be processed.  the current
//      transaction is rolled back and the application is disconnected
//      from the remote database.
//
//
// returned from server:
// svrcod - required  (8 - error)
// rdbnam - required
//
private void parserdbaflrm   throws disconnectexception
boolean svrcodreceived   false
int svrcod   codepoint svrcod_info
boolean rdbnamreceived   false
string rdbnam   null
parselengthandmatchcodepoint codepoint rdbaflrm
pushlengthoncollectionstack
int peekcp   peekcodepoint
while  peekcp    reply end_of_collection
boolean foundinpass   false
if  peekcp    codepoint svrcod
foundinpass   true
svrcodreceived   checkandgetreceivedflag svrcodreceived
svrcod   parsesvrcod codepoint svrcod_error  codepoint svrcod_error
peekcp   peekcodepoint
if  peekcp    codepoint rdbnam
foundinpass   true
rdbnamreceived   checkandgetreceivedflag rdbnamreceived
rdbnam   parserdbnam true
peekcp   peekcodepoint
if   foundinpass
doprmnsprmsemantics peekcp
popcollectionstack
checkrequiredobjects svrcodreceived  rdbnamreceived
netagent_ setsvrcod svrcod
// parameter value not supported reply message indicates
// that the parameter value specified is either not recognized
// or not supported for the specified parameter.
// the valnsprm can only be specified in accordance with
// the rules specified for ddm subsetting.
// the code point of the command parameter in error is
// returned as a parameter in this message.
// protocol architects an sqlstate of 58017.
//
// if codepoint is 0x119c,0x119d, or 0x119e then sqlstate 58017, sqlcode -332
// else sqlstate 58017, sqlcode -30073
//
// messages
// sqlstate : 58017
//     the ddm parameter value is not supported.
//     sqlcode : -332
//     there is no available conversion for the source code page
//         <code page> to the target code page <code page>.
//         reason code <reason-code>.
//     the reason codes are as follows:
//     1 source and target code page combination is not supported
//         by the database manager.
//     2 source and target code page combination is either not
//         supported by the database manager or by the operating
//         system character conversion utility on the client node.
//     3 source and target code page combination is either not
//         supported by the database manager or by the operating
//         system character conversion utility on the server node.
//
// sqlstate : 58017
//     the ddm parameter value is not supported.
//     sqlcode : -30073
//     <parameter-identifier> parameter value <value> is not supported.
//     some possible parameter identifiers include:
//     002f  the target server does not support the data type
//         requested by the application requester.
//         the target server does not support the ccsid
//         requested by the application requester. ensure the ccsid
//         used by the requester is supported by the server.
//         119c - verify the single-byte ccsid.
//         119d - verify the double-byte ccsid.
//         119e - verify the mixed-byte ccsid.
//
//     the current environment command or sql statement
//         cannot be processed successfully, nor can any subsequent
//         commands or sql statements.  the current transaction is
//         rolled back and the application is disconnected
//         from the remote database. the command cannot be processed.
//
// returned from server:
// svrcod - required  (8 - error)
// codpnt - required
// reccnt - optional (minlvl 3, minval 0) (will not be returned - should be ignored)
// rdbnam - optional (minlvl 3)
//
protected void parsevalnsprm   throws disconnectexception
boolean svrcodreceived   false
int svrcod   codepoint svrcod_info
boolean rdbnamreceived   false
string rdbnam   null
boolean codpntreceived   false
int codpnt   0
parselengthandmatchcodepoint codepoint valnsprm
pushlengthoncollectionstack
int peekcp   peekcodepoint
while  peekcp    reply end_of_collection
boolean foundinpass   false
if  peekcp    codepoint svrcod
foundinpass   true
svrcodreceived   checkandgetreceivedflag svrcodreceived
svrcod   parsesvrcod codepoint svrcod_error  codepoint svrcod_error
peekcp   peekcodepoint
if  peekcp    codepoint rdbnam
foundinpass   true
rdbnamreceived   checkandgetreceivedflag rdbnamreceived
rdbnam   parserdbnam true
peekcp   peekcodepoint
if  peekcp    codepoint codpnt
foundinpass   true
codpntreceived   checkandgetreceivedflag codpntreceived
codpnt   parsecodpnt
peekcp   peekcodepoint
// reccnt will be skipped
if   foundinpass
doprmnsprmsemantics peekcp
popcollectionstack
checkrequiredobjects svrcodreceived  codpntreceived
netagent_ setsvrcod svrcod
dovalnsprmsemantics codpnt
// conversational protocol error reply message
// indicates that a conversational protocol error occurred.
// protocol architects the sqlstate value depending on svrcod
// svrcod 8 -> sqlstate of 58008 or 58009
// svrcod 16,128 -> sqlstate of 58009
//
// messages
// sqlstate : 58009
//     execution failed due to a distribution protocol error that caused deallocation of the conversation.
//     sqlcode : -30020
//     execution failed because of a distributed protocol
//         error that will affect the successful execution of subsequent
//         commands and sql statements: reason code <reason-code>.
//      some possible reason codes include:
//      121c indicates that the user is not authorized to perform the requested command.
//      1232 the command could not be completed because of a permanent error.
//          in most cases, the server will be in the process of an abend.
//      220a the target server has received an invalid data description.
//          if a user sqlda is specified, ensure that the fields are
//          initialized correctly. also, ensure that the length does not
//          exceed the maximum allowed length for the data type being used.
//
//      the command or statement cannot be processed.  the current
//      transaction is rolled back and the application is disconnected
//      from the remote database.
//
//
// returned from server:
// svrcod - required  (8 - error, 16 - severe, 128 - sesdmg)
// prccnvcd - required
// reccnt - optional (minval 0, minlvl 3)
// rdbnam - optional (ninlvl 3)
//
protected void parseprccnvrm   throws disconnectexception
boolean svrcodreceived   false
int svrcod   codepoint svrcod_info
boolean rdbnamreceived   false
string rdbnam   null
boolean prccnvcdreceived   false
int prccnvcd   0
parselengthandmatchcodepoint codepoint prccnvrm
pushlengthoncollectionstack
int peekcp   peekcodepoint
while  peekcp    reply end_of_collection
boolean foundinpass   false
if  peekcp    codepoint svrcod
foundinpass   true
svrcodreceived   checkandgetreceivedflag svrcodreceived
svrcod   parsesvrcod codepoint svrcod_error  codepoint svrcod_sesdmg
peekcp   peekcodepoint
if  peekcp    codepoint rdbnam
foundinpass   true
rdbnamreceived   checkandgetreceivedflag rdbnamreceived
rdbnam   parserdbnam true
peekcp   peekcodepoint
if  peekcp    codepoint prccnvcd
foundinpass   true
prccnvcdreceived   checkandgetreceivedflag prccnvcdreceived
prccnvcd   parseprccnvcd
peekcp   peekcodepoint
if   foundinpass
doprmnsprmsemantics peekcp
popcollectionstack
checkrequiredobjects svrcodreceived  prccnvcdreceived
netagent_ setsvrcod svrcod
doprccnvrmsemantics codepoint prccnvrm
// object not supported reply message indicates that the target
// server does not recognize or support the object
// specified as data in an objdss for the command associated
// with the object.
// the objnsprm is also returned if an object is found in a
// valid collection in an objdss (such as recal collection)
// that that is not valid for that collection.
// protocol architects an sqlstate of 58015.
//
// messages
// sqlstate : 58015
//     the ddm object is not supported.
//     sqlcode : -30071
//      <object-identifier> object is not supported.
//     the current transaction is rolled back and the application
//     is disconnected from the remote database. the command
//     cannot be processed.
//
//
// returned from server:
// svrcod - required  (8 - error, 16 - severe)
// codpnt - required
// reccnt - optional (minval 0)  (will not be returned - should be ignored)
// rdbnam - optional (minlvl 3)
//
// also called by netpackagereply and netstatementreply
void parseobjnsprm   throws disconnectexception
boolean svrcodreceived   false
int svrcod   codepoint svrcod_info
boolean rdbnamreceived   false
string rdbnam   null
boolean codpntreceived   false
int codpnt   0
parselengthandmatchcodepoint codepoint objnsprm
pushlengthoncollectionstack
int peekcp   peekcodepoint
while  peekcp    reply end_of_collection
boolean foundinpass   false
if  peekcp    codepoint svrcod
foundinpass   true
svrcodreceived   checkandgetreceivedflag svrcodreceived
svrcod   parsesvrcod codepoint svrcod_error  codepoint svrcod_severe
peekcp   peekcodepoint
if  peekcp    codepoint rdbnam
foundinpass   true
rdbnamreceived   checkandgetreceivedflag rdbnamreceived
rdbnam   parserdbnam true
peekcp   peekcodepoint
if  peekcp    codepoint codpnt
foundinpass   true
codpntreceived   checkandgetreceivedflag codpntreceived
codpnt   parsecodpnt
peekcp   peekcodepoint
// skip the reccnt
if   foundinpass
doprmnsprmsemantics peekcp
popcollectionstack
checkrequiredobjects svrcodreceived  codpntreceived
netagent_ setsvrcod svrcod
doobjnsprmsemantics codpnt
// manager-level conflict (mgrlvlrm) reply message indicates that
// the manager levels specified in the mgrlvlls conflict amoung
// themselves or with previously specified manager levels.
// - the manager-level dependencies of one specified manager violates another
//   specified maanger level.
// - the manager- level specified attempts to respecify a manager level that
//   previously excsat command specified.
// protocol architects an sqlstate of 58010.
//
// messages
// sqlstate : 58010
//     execution failed due to a distributed protocol error that will affect
//     the successful execution of subsequent ddm commands or sql statements.
//     sqlcode : -30021
//     execution failed due to a distribution protocol error
//     that will affect the successful execution of subsequent
//     commands and sql statements: manager <manager> at level <level>
//     not supported.
//
//     a system error occurred that prevented successful connection
//     of the application to the remote database.
//
//
// returned from server:
// svrcod - required  (8 - error)
// mgrlvlls - required
//
private void parsemgrlvlrm   throws disconnectexception
boolean svrcodreceived   false
int svrcod   codepoint svrcod_info
boolean mgrlvllsreceived   false
int managercodepoint   null
int managerlevel   null
parselengthandmatchcodepoint codepoint mgrlvlrm
pushlengthoncollectionstack
int peekcp   peekcodepoint
while  peekcp    reply end_of_collection
boolean foundinpass   false
if  peekcp    codepoint svrcod
foundinpass   true
svrcodreceived   checkandgetreceivedflag svrcodreceived
svrcod   parsesvrcod codepoint svrcod_error  codepoint svrcod_error
peekcp   peekcodepoint
if  peekcp    codepoint mgrlvlls
foundinpass   true
mgrlvllsreceived   checkandgetreceivedflag mgrlvllsreceived
parselengthandmatchcodepoint codepoint mgrlvlls
int managerlistlength   getddmlength
if   managerlistlength    0       managerlistlength % 7     0
dosyntaxrmsemantics codepoint synerrcd_obj_len_not_allowed
int managercount   managerlistlength   7
managercodepoint   new int
managerlevel   new int
for  int i   0  i < managercount  i
managercodepoint   parsecodpntdr
managerlevel   parsemgrlvln
peekcp   peekcodepoint
if   foundinpass
doprmnsprmsemantics peekcp
popcollectionstack
checkrequiredobjects svrcodreceived  mgrlvllsreceived
netagent_ setsvrcod svrcod
domgrlvlrmsemantics managercodepoint  managerlevel
// command not supported reply message indicates that the specified
// command is not recognized or not supported for the
// specified target.  the reply message can be returned
// only in accordance with the architected rules for ddm subsetting.
// protocol architects an sqlstate of 58014.
//
// messages
// sqlstate : 58014
//     the ddm command is not supported.
//     sqlcode : -30070
//      <command-identifier> command is not supported.
//     the current transaction is rolled back and the application is
//     disconnected from the remote database. the statement cannot be processed.
//
//
// returned from server:
// svrcod - required  (4 - warning, 8 - error) (minlvl 2)
// codpnt - required
// rdbnam - optional (minlvl 3)
//
protected void parsecmdnsprm   throws disconnectexception
boolean svrcodreceived   false
int svrcod   codepoint svrcod_info
boolean rdbnamreceived   false
string rdbnam   null
boolean srvdgnreceived   false
byte srvdgn   null
boolean codpntreceived   false
int codpnt   0
parselengthandmatchcodepoint codepoint cmdnsprm
pushlengthoncollectionstack
int peekcp   peekcodepoint
while  peekcp    reply end_of_collection
boolean foundinpass   false
if  peekcp    codepoint svrcod
foundinpass   true
svrcodreceived   checkandgetreceivedflag svrcodreceived
svrcod   parsesvrcod codepoint svrcod_warning  codepoint svrcod_error
peekcp   peekcodepoint
if  peekcp    codepoint rdbnam
foundinpass   true
rdbnamreceived   checkandgetreceivedflag rdbnamreceived
rdbnam   parserdbnam true
peekcp   peekcodepoint
if  peekcp    codepoint codpnt
foundinpass   true
codpntreceived   checkandgetreceivedflag codpntreceived
codpnt   parsecodpnt
peekcp   peekcodepoint
if   foundinpass
doprmnsprmsemantics peekcp
popcollectionstack
checkrequiredobjects svrcodreceived  codpntreceived
netagent_ setsvrcod svrcod
agent_ accumulatechainbreakingreadexceptionandthrow new disconnectexception agent_
new clientmessageid sqlstate drda_ddm_command_not_supported
integer tohexstring codpnt
// abnormal end unit of work condition reply message indicates
// that the current unit of work ended abnormally because
// of some action at the target server.  this can be caused by a
// deadlock resolution, operator intervention, or some similar
// situation that caused the relational database to rollback
// the current unit of work.  this reply message is returned only
// if an sqlam issues the command.  whenever an abnuowrm is returned
// in response to a command, an sqlcard object must also be returned
// following the abnuowrm.  the sqlstate is returned in the sqlcard.
//
// returned from server:
//   svrcod - required (8 - error)
//   rdbnam - required
//
// called by all the net*reply classes.
void parseabnuowrm   throws disconnectexception
boolean svrcodreceived   false
int svrcod   codepoint svrcod_info
boolean rdbnamreceived   false
string rdbnam   null
parselengthandmatchcodepoint codepoint abnuowrm
pushlengthoncollectionstack
int peekcp   peekcodepoint
while  peekcp    reply end_of_collection
boolean foundinpass   false
if  peekcp    codepoint svrcod
foundinpass   true
svrcodreceived   checkandgetreceivedflag svrcodreceived
svrcod   parsesvrcod codepoint svrcod_error  codepoint svrcod_error
peekcp   peekcodepoint
if  peekcp    codepoint rdbnam
// skip the rbbnam since it doesn't tell us anything new.
// there is no way to return it to the application anyway.
// not having to convert this to a string is a time saver also.
foundinpass   true
rdbnamreceived   checkandgetreceivedflag rdbnamreceived
rdbnam   parserdbnam true
peekcp   peekcodepoint
if   foundinpass
doprmnsprmsemantics peekcp
popcollectionstack
checkrequiredobjects svrcodreceived  rdbnamreceived
// the abnuowrm has been received, do whatever state changes are necessary
netagent_ setsvrcod svrcod
//--------------------- parse ddm reply data--------------------------------------
// the server attributes reply data (excsatrd) returns the following
// information in response to an excsat command:
// - the target server's class name
// - the target server's support level for each class of manager
//   the source requests
// - the target server's product release level
// - the target server's external name
// - the target server's name
//
// returned from server:
// extnam - optional
// mgrlvlls - optional
// srvclsnm - optional
// srvnam - optional
// srvrlslv - optional
private void parseexcsatrd netconnection netconnection  throws disconnectexception
boolean extnamreceived   false
string extnam   null
boolean mgrlvllsreceived   false
boolean srvclsnmreceived   false
string srvclsnm   null
boolean srvnamreceived   false
string srvnam   null
boolean srvrlslvreceived   false
string srvrlslv   null
parselengthandmatchcodepoint codepoint excsatrd
pushlengthoncollectionstack
int peekcp   peekcodepoint
while  peekcp    reply end_of_collection
boolean foundinpass   false
if  peekcp    codepoint extnam
// external name is the name of the job, task, or process
// on a system for which a ddm server is active.  for a target
// ddm server, the external name is the name of the job the system creates
// or activates to run the ddm server.
// no semantic meaning is assigned to external names in ddm.
// external names are transmitted to aid in problem determination.
// this driver will save the external name of the target (the
// driver may use it for logging purposes later).
foundinpass   true
extnamreceived   checkandgetreceivedflag extnamreceived
extnam   parseextnam
peekcp   peekcodepoint
if  peekcp    codepoint mgrlvlls
// manager-level list
// specifies a list of code points and support levels for the
// classes of managers a server supports
foundinpass   true
mgrlvllsreceived   checkandgetreceivedflag mgrlvllsreceived
parsemgrlvlls netconnection       need to review this one  check input and output
peekcp   peekcodepoint
if  peekcp    codepoint srvclsnm
// server class name
// specifies the name of a class of ddm servers.
foundinpass   true
srvclsnmreceived   checkandgetreceivedflag srvclsnmreceived
srvclsnm   parsesrvclsnm
peekcp   peekcodepoint
if  peekcp    codepoint srvnam
// server name
// no semantic meaning is assigned to server names in ddm,
// it is recommended (by the ddm manual) that the server's
// physical or logical location identifier be used as a server name.
// server names are transmitted for problem determination purposes.
// this driver will save this name and in the future may use it
// for logging errors.
foundinpass   true
srvnamreceived   checkandgetreceivedflag srvnamreceived
srvnam   parsesrvnam
peekcp   peekcodepoint
if  peekcp    codepoint srvrlslv
// server product release level
// specifies the procuct release level of a ddm server.
// the contents are unarchitected.
// this driver will save this information and in the future may
// use it for logging purposes.
foundinpass   true
srvrlslvreceived   checkandgetreceivedflag srvrlslvreceived
srvrlslv   parsesrvrlslv
peekcp   peekcodepoint
if   foundinpass
doprmnsprmsemantics peekcp
popcollectionstack
// according the the ddm book, all these instance variables are optional
netconnection setserverattributedata extnam  srvclsnm  srvnam  srvrlslv
// must make a version that does not change state in the associated connection
private void parsedummyexcsatrd netconnection netconnection  throws disconnectexception
boolean extnamreceived   false
string extnam   null
boolean mgrlvllsreceived   false
boolean srvclsnmreceived   false
string srvclsnm   null
boolean srvnamreceived   false
string srvnam   null
boolean srvrlslvreceived   false
string srvrlslv   null
parselengthandmatchcodepoint codepoint excsatrd
pushlengthoncollectionstack
int peekcp   peekcodepoint
while  peekcp    reply end_of_collection
boolean foundinpass   false
if  peekcp    codepoint extnam
// external name is the name of the job, task, or process
// on a system for which a ddm server is active.  for a target
// ddm server, the external name is the name of the job the system creates
// or activates to run the ddm server.
// no semantic meaning is assigned to external names in ddm.
// external names are transmitted to aid in problem determination.
// this driver will save the external name of the target (the
// driver may use it for logging purposes later).
foundinpass   true
extnamreceived   checkandgetreceivedflag extnamreceived
extnam   parseextnam
peekcp   peekcodepoint
if  peekcp    codepoint mgrlvlls
// manager-level list
// specifies a list of code points and support levels for the
// classes of managers a server supports
foundinpass   true
mgrlvllsreceived   checkandgetreceivedflag mgrlvllsreceived
parsemgrlvlls netconnection       need to review this one  check input and output
peekcp   peekcodepoint
if  peekcp    codepoint srvclsnm
// server class name
// specifies the name of a class of ddm servers.
foundinpass   true
srvclsnmreceived   checkandgetreceivedflag srvclsnmreceived
srvclsnm   parsesrvclsnm
peekcp   peekcodepoint
if  peekcp    codepoint srvnam
// server name
// no semantic meaning is assigned to server names in ddm,
// it is recommended (by the ddm manual) that the server's
// physical or logical location identifier be used as a server name.
// server names are transmitted for problem determination purposes.
// this driver will save this name and in the future may use it
// for logging errors.
foundinpass   true
srvnamreceived   checkandgetreceivedflag srvnamreceived
srvnam   parsesrvnam
peekcp   peekcodepoint
if  peekcp    codepoint srvrlslv
// server product release level
// specifies the procuct release level of a ddm server.
// the contents are unarchitected.
// this driver will save this information and in the future may
// use it for logging purposes.
foundinpass   true
srvrlslvreceived   checkandgetreceivedflag srvrlslvreceived
srvrlslv   parsesrvrlslv
peekcp   peekcodepoint
if   foundinpass
doprmnsprmsemantics peekcp
popcollectionstack
// according the the ddm book, all these instance variables are optional
// don't change state of netconnection because this is a dummy flow
//netconnection.setserverattributedata (extnam, srvclsnm, srvnam, srvrlslv);
// the access security reply data (acsecrd) collection object contains
// the security information from a target server's security manager.
// this method returns the security check code received from the server
// (if the server does not return a security check code, this method
// will return 0).  it is up to the caller to check
// the value of this return code and take the appropriate action.
//
// returned from server:
// secmec - required
// sectkn - optional (minlvl 6)
// secchkcd - optional
private void parseaccsecrd netconnection netconnection  int securitymechanism  throws disconnectexception
boolean secmecreceived   false
int secmeclist   null
boolean sectknreceived   false
byte sectkn   null
boolean secchkcdreceived   false
int secchkcd   0
parselengthandmatchcodepoint codepoint accsecrd
pushlengthoncollectionstack
int peekcp   peekcodepoint
while  peekcp    reply end_of_collection
boolean foundinpass   false
if  peekcp    codepoint secmec
// security mechanism.
// this value must either reflect the value sent in the accsec command
// if the target server supports it; or the values the target server
// does support when it does not support or accept the value
// requested by the source server.
// the secmecs returned are treated as a list and stored in
// targetsecmec_list.
// if the target server supports the source's secmec, it
// will be saved in the variable targetsecmec_ (note: so
// after calling this method, if targetsecmec_'s value is zero,
// then the target did not support the source secmec.  any alternate
// secmecs would be contained in targetsecmec_list).
foundinpass   true
secmecreceived   checkandgetreceivedflag secmecreceived
secmeclist   parsesecmec
peekcp   peekcodepoint
if  peekcp    codepoint sectkn
// security token
foundinpass   true
sectknreceived   checkandgetreceivedflag sectknreceived
sectkn   parsesectkn false
peekcp   peekcodepoint
if  peekcp    codepoint secchkcd
// security check code.
// included if and only if an error is detected when processing
// the accsec command.  this has an implied severity code
// of error.
foundinpass   true
secchkcdreceived   checkandgetreceivedflag secchkcdreceived
secchkcd   parsesecchkcd
peekcp   peekcodepoint
if   foundinpass
doprmnsprmsemantics peekcp
popcollectionstack
checkrequiredobjects secmecreceived
netconnection setaccesssecuritydata secchkcd
securitymechanism
secmeclist
sectknreceived
sectkn
// called by all the net*reply classes.
void parsetypdefnam   throws disconnectexception
parselengthandmatchcodepoint codepoint typdefnam
netagent_ targettypdef_ settypdefnam readstring
// called by all the net*reply classes.
void parsetypdefovr   throws disconnectexception
parselengthandmatchcodepoint codepoint typdefovr
pushlengthoncollectionstack
int peekcp   peekcodepoint
while  peekcp    reply end_of_collection
boolean foundinpass   false
if  peekcp    codepoint ccsidsbc
foundinpass   true
netagent_ targettypdef_ setccsidsbc parseccsidsbc
peekcp   peekcodepoint
if  peekcp    codepoint ccsiddbc
foundinpass   true
netagent_ targettypdef_ setccsiddbc parseccsiddbc
peekcp   peekcodepoint
if  peekcp    codepoint ccsidmbc
foundinpass   true
netagent_ targettypdef_ setccsidmbc parseccsidmbc
peekcp   peekcodepoint
if   foundinpass
doprmnsprmsemantics peekcp
popcollectionstack
// the synccrd reply mesage
//
// returned from server:
//   xaretval - required
int parsesynccrd connectioncallbackinterface connection  throws disconnectexception
return 0
// process xa return value
protected int parsexaretval   throws disconnectexception
return 0
// process xa return value
protected byte parsesynctype   throws disconnectexception
return 0
// this method handles the parsing of all command replies and reply data
// for the syncctl command.
protected int parsesyncctlreply connectioncallbackinterface connection  throws disconnectexception
return 0
// called by the xa commit and rollback parse reply methods.
void parsesyncctlerror int peekcp  throws disconnectexception
switch  peekcp
case codepoint cmdchkrm
parsecmdchkrm
break
case codepoint prccnvrm
parseprccnvrm
break
case codepoint syntaxrm
parsesyntaxrm
break
case codepoint valnsprm
parsevalnsprm
break
default
doobjnsprmsemantics peekcp
// manager-level list.
// specifies a list of code points and support levels for the
// classes of managers a server supports.
// the target server must not provide information for any target
// managers unless the source explicitly requests it.
// for each manager class, if the target server's support level
// is greater than or equal to the source server's level, then the source
// server's level is returned for that class if the target server can operate
// at the source's level; otherwise a level 0 is returned.  if the target
// server's support level is less than the source server's level, the
// target server's level is returned for that class.  if the target server
// does not recognize the code point of a manager class or does not support
// that class, it returns a level of 0.  the target server then waits
// for the next command or for the source server to terminate communications.
// when the source server receives excsatrd, it must compare each of the entries
// in the mgrlvlls parameter it received to the corresponding entries in the mgrlvlls
// parameter it sent.  if any level mismatches, the source server must decide
// whether it can use or adjust to the lower level of target support for that manager
// class.  there are no architectural criteria for making this decision.
// the source server can terminate communications or continue at the target
// servers level of support.  it can also attempt to use whatever
// commands its user requests while receiving eror reply messages for real
// functional mismatches.
// the manager levels the source server specifies or the target server
// returns must be compatible with the manager-level dependencies of the specified
// manangers.  incompatible manager levels cannot be specified.
// after this method successfully returns, the targetxxxx values (where xxxx
// represents a manager name.  example targetagent) contain the negotiated
// manager levels for this particular connection.
private void parsemgrlvlls netconnection netconnection  throws disconnectexception
parselengthandmatchcodepoint codepoint mgrlvlls
// each manager class and level is 4 bytes long.
// get the length of the mgrlvls bytes, make sure it contains
// the correct number of bytes for a mgrlvlls object, and calculate
// the number of manager's returned from the server.
int managerlistlength   getddmlength
if   managerlistlength    0       managerlistlength % 4     0
dosyntaxrmsemantics codepoint synerrcd_obj_len_not_allowed
int managercount   managerlistlength   4
// the managercount should be equal to the same number of
// managers sent on the excsat.
// read each of the manager levels returned from the server.
for  int i   0  i < managercount  i
// first two byte are the manager's codepoint, next two bytes are the level.
int managercodepoint   parsecodpntdr
int managerlevel   parsemgrlvln
// check each manager to make sure levels are within proper limits
// for this driver.  also make sure unexpected managers are not returned.
switch  managercodepoint
case codepoint agent
if   managerlevel < netconfiguration min_agent_mgrlvl
managerlevel > netconnection targetagent_
domgrlvlrmsemantics managercodepoint  managerlevel
netconnection targetagent_   managerlevel
break
case codepoint cmntcpip
if   managerlevel < netconfiguration min_cmntcpip_mgrlvl
managerlevel > netconnection targetcmntcpip_
domgrlvlrmsemantics managercodepoint  managerlevel
netconnection targetcmntcpip_   managerlevel
break
case codepoint rdb
if   managerlevel < netconfiguration min_rdb_mgrlvl
managerlevel > netconnection targetrdb_
domgrlvlrmsemantics managercodepoint  managerlevel
netconnection targetrdb_   managerlevel
break
case codepoint secmgr
if   managerlevel < netconfiguration min_secmgr_mgrlvl
managerlevel > netconnection targetsecmgr_
domgrlvlrmsemantics managercodepoint  managerlevel
netconnection targetsecmgr_   managerlevel
break
case codepoint sqlam
if   managerlevel < netconfiguration min_sqlam_mgrlvl
managerlevel > netagent_ targetsqlam_
domgrlvlrmsemantics managercodepoint  managerlevel
netagent_ orignaltargetsqlam_   managerlevel
break
case codepoint cmnappc
if   managerlevel < netconfiguration min_cmnappc_mgrlvl
managerlevel > netconnection targetcmnappc_
domgrlvlrmsemantics managercodepoint  managerlevel
netconnection targetcmnappc_   managerlevel
break
case codepoint xamgr
if   managerlevel    0
managerlevel < netconfiguration min_xamgr_mgrlvl
managerlevel > netconnection targetxamgr_
domgrlvlrmsemantics managercodepoint  managerlevel
netconnection targetxamgr_   managerlevel
break
case codepoint syncptmgr
if   managerlevel    0
managerlevel < netconfiguration min_syncptmgr_mgrlvl
managerlevel > netconnection targetsyncptmgr_
domgrlvlrmsemantics managercodepoint  managerlevel
netconnection targetsyncptmgr_   managerlevel
break
case codepoint rsyncmgr
if   managerlevel    0
managerlevel < netconfiguration min_rsyncmgr_mgrlvl
managerlevel > netconnection targetrsyncmgr_
domgrlvlrmsemantics managercodepoint  managerlevel
netconnection targetrsyncmgr_   managerlevel
break
// the target server must not provide information for any target managers
// unless the source explicitly requests.  the following managers are never requested.
default
domgrlvlrmsemantics managercodepoint  managerlevel
break
// the external name is the name of the job, task, or process on a
// system for which a ddm server is active.  on a source ddm server,
// the external name is the name of the job that is requesting
// access to remote resources.  for a target ddm server,
// the external name is the name of the job the system
// creates or activates to run the ddm server.
// no semantic meaning is assigned to external names in ddm.
// external names are transmitted to aid in problem determination.
protected string parseextnam   throws disconnectexception
parselengthandmatchcodepoint codepoint extnam
return readstring
// server class name specifies the name of a class of ddm servers.
// server class names are assigned for each product involved in protocol.
protected string parsesrvclsnm   throws disconnectexception
parselengthandmatchcodepoint codepoint srvclsnm
return readstring
// server name is the name of the ddm server.
// no semantic meaning is assigned to server names in ddm,
// but it is recommended that the server names are transmitted
// for problem determination.
protected string parsesrvnam   throws disconnectexception
parselengthandmatchcodepoint codepoint srvnam
return readstring
// server product release level string specifies the product
// release level of a ddm server.  the contents of the
// parameter are unarchitected.  up to 255 bytes can be sent.
// srvrlslv should not be used in place of product-defined
// extensions to carry information not related to the products
// release level.
protected string parsesrvrlslv   throws disconnectexception
parselengthandmatchcodepoint codepoint srvrlslv
return readstring
// manager-level number attribute binary integer number specifies
// the level of a defined ddm manager.
protected int parsemgrlvln   throws disconnectexception
return readunsignedshort
// security mechanims.
protected int parsesecmec   throws disconnectexception
parselengthandmatchcodepoint codepoint secmec
return readunsignedshortlist
// the security token byte string is information provided and used
// by the various security mechanisms.
protected byte parsesectkn boolean skip  throws disconnectexception
parselengthandmatchcodepoint codepoint sectkn
if  skip
skipbytes
return null
return readbytes
// the security check code string codifies the security information
// and condition for the secchkrm.
protected int parsesecchkcd   throws disconnectexception
parselengthandmatchcodepoint codepoint secchkcd
int secchkcd   readunsignedbyte
if   secchkcd < codepoint secchkcd_00      secchkcd > codepoint secchkcd_15
dovalnsprmsemantics codepoint secchkcd  secchkcd
return secchkcd
// product specific identifier specifies the product release level
// of a ddm server.
protected string parseprdid boolean skip  throws disconnectexception
parselengthandmatchcodepoint codepoint prdid
if  skip
skipbytes
return null
else
return readstring
// the user id specifies an end-user name.
protected string parseusrid boolean skip  throws disconnectexception
parselengthandmatchcodepoint codepoint usrid
if  skip
skipbytes
return null
return readstring
// code point data representation specifies the data representation
// of a dictionary codepoint.  code points are hexadecimal aliases for ddm
// named terms.
protected int parsecodpntdr   throws disconnectexception
return readunsignedshort
// correlation token specifies a token that is conveyed between source
// and target servers for correlating the processing between servers.
protected byte parsecrrtkn boolean skip  throws disconnectexception
parselengthandmatchcodepoint codepoint crrtkn
if  skip
skipbytes
return null
return readbytes
// unit of work disposition scalar object specifies the disposition of the
// last unit of work.
protected int parseuowdsp   throws disconnectexception
parselengthandmatchcodepoint codepoint uowdsp
int uowdsp   readunsignedbyte
if   uowdsp    codepoint uowdsp_commit      uowdsp    codepoint uowdsp_rollback
dovalnsprmsemantics codepoint uowdsp  uowdsp
return uowdsp
// relational database name specifies the name of a relational
// database of the server.  a server can have more than one rdb.
protected string parserdbnam boolean skip  throws disconnectexception
parselengthandmatchcodepoint codepoint rdbnam
if  skip
skipbytes
return null
return readstring
protected int parsexidcnt   throws disconnectexception
parselengthandmatchcodepoint codepoint xidcnt
return readunsignedshort
protected xid parsexid   throws disconnectexception
return null
protected java util hashtable parseindoubtlist   throws disconnectexception
return null
// syntax error code string specifies the condition that caused termination
// of data stream parsing.
protected int parsesynerrcd   throws disconnectexception
parselengthandmatchcodepoint codepoint synerrcd
int synerrcd   readunsignedbyte
if   synerrcd < 0x01      synerrcd > 0x1d
dovalnsprmsemantics codepoint synerrcd  synerrcd
return synerrcd
// the code point data specifies a scalar value that is an architected code point.
protected int parsecodpnt   throws disconnectexception
parselengthandmatchcodepoint codepoint codpnt
return parsecodpntdr
// conversational protocol error code specifies the condition
// for which the prccnvrm was returned.
protected int parseprccnvcd   throws disconnectexception
parselengthandmatchcodepoint codepoint prccnvcd
int prccnvcd   readunsignedbyte
if   prccnvcd    0x01      prccnvcd    0x02      prccnvcd    0x03
prccnvcd    0x04      prccnvcd    0x05      prccnvcd    0x06
prccnvcd    0x10      prccnvcd    0x11      prccnvcd    0x12
prccnvcd    0x13      prccnvcd    0x15
dovalnsprmsemantics codepoint prccnvcd  prccnvcd
return prccnvcd
// ccsid for single-byte characters specifies a coded character
// set identifier for single-byte characters.
protected int parseccsidsbc   throws disconnectexception
parselengthandmatchcodepoint codepoint ccsidsbc
return readunsignedshort
// ccsid for mixed-byte characters specifies a coded character
// set identifier for mixed-byte characters.
protected int parseccsidmbc   throws disconnectexception
parselengthandmatchcodepoint codepoint ccsidmbc
return readunsignedshort
// ccsid for double-byte characters specifies a coded character
// set identifier for double-byte characters.
protected int parseccsiddbc   throws disconnectexception
parselengthandmatchcodepoint codepoint ccsiddbc
return readunsignedshort
// severity code is an indicator of the severity of a condition
// detected during the execution of a command.
protected int parsesvrcod int minsvrcod  int maxsvrcod  throws disconnectexception
parselengthandmatchcodepoint codepoint svrcod
int svrcod   readunsignedshort
if   svrcod    codepoint svrcod_info
svrcod    codepoint svrcod_warning
svrcod    codepoint svrcod_error
svrcod    codepoint svrcod_severe
svrcod    codepoint svrcod_accdmg
svrcod    codepoint svrcod_prmdmg
svrcod    codepoint svrcod_sesdmg
dovalnsprmsemantics codepoint svrcod  svrcod
if  svrcod < minsvrcod    svrcod > maxsvrcod
dovalnsprmsemantics codepoint svrcod  svrcod
return svrcod
protected int parsefastsvrcod int minsvrcod  int maxsvrcod  throws disconnectexception
matchcodepoint codepoint svrcod
int svrcod   readfastunsignedshort
if   svrcod    codepoint svrcod_info
svrcod    codepoint svrcod_warning
svrcod    codepoint svrcod_error
svrcod    codepoint svrcod_severe
svrcod    codepoint svrcod_accdmg
svrcod    codepoint svrcod_prmdmg
svrcod    codepoint svrcod_sesdmg
dovalnsprmsemantics codepoint svrcod  svrcod
if  svrcod < minsvrcod    svrcod > maxsvrcod
dovalnsprmsemantics codepoint svrcod  svrcod
return svrcod
protected netsqlca parsesqlcard sqlca rowsetsqlca  throws disconnectexception
parselengthandmatchcodepoint codepoint sqlcard
int ddmlength   getddmlength
ensureblayerdatainbuffer ddmlength
netsqlca netsqlca   parsesqlcardrow rowsetsqlca
adjustlengths getddmlength
return netsqlca
//--------------------------parse fdoca objects------------------------
// sqlcard : fdoca early row
// sql communications area row description
//
// format for all sqlam levels
//   sqlcagrp; group lid 0x54; element taken 0(all); rep factor 1
netsqlca parsesqlcardrow sqlca rowsetsqlca  throws disconnectexception
return parsesqlcagrp rowsetsqlca
// sqlnumrow : fdoca early row
// sql number of elements row description
//
// format for sqlam levels
//   sqlnumgrp; group lid 0x58; element taken 0(all); rep factor 1
int parsesqlnumrow   throws disconnectexception
return parsesqlnumgrp
int parsefastsqlnumrow   throws disconnectexception
return parsefastsqlnumgrp
// sqlnumgrp : fdoca early group
// sql number of elements group description
//
// format for all sqlam levels
//   sqlnum; protocol type i2; envlid 0x04; length override 2
private int parsesqlnumgrp   throws disconnectexception
return readshort
private int parsefastsqlnumgrp   throws disconnectexception
return readfastshort
// sqlcagrp : fdoca early group
// sql communcations area group description
//
// format for sqlam <= 6
//   sqlcode; protocol type i4; envlid 0x02; length override 4
//   sqlstate; protocol type fcs; envlid 0x30; length override 5
//   sqlerrproc; protocol type fcs; envlid 0x30; length override 8
//   sqlcaxgrp; protocol type n-gda; envlid 0x52; length override 0
//
// format for sqlam >= 7
//   sqlcode; protocol type i4; envlid 0x02; length override 4
//   sqlstate; protocol type fcs; envlid 0x30; length override 5
//   sqlerrproc; protocol type fcs; envlid 0x30; length override 8
//   sqlcaxgrp; protocol type n-gda; envlid 0x52; length override 0
//   sqldiaggrp; protocol type n-gda; envlid 0x56; length override 0
private netsqlca parsesqlcagrp sqlca rowsetsqlca  throws disconnectexception
if  readfastunsignedbyte      codepoint nulldata
return null
int sqlcode   readfastint
byte sqlstate   readfastbytes 5
byte sqlerrproc   readfastbytes 8
netsqlca netsqlca   null
try
netsqlca   new netsqlca netagent_ netconnection_
sqlcode
sqlstate
sqlerrproc
catch sqlexception sqle
throw new disconnectexception netagent_ sqle
parsesqlcaxgrp netsqlca
if  netagent_ targetsqlam_ >  netconfiguration mgrlvl_7
netsqlca setrowsetrowcount parsesqldiaggrp rowsetsqlca
return netsqlca
// sqlcaxgrp : early fdoca group
// sql communications area exceptions group description
//
// format for sqlam <= 6
//   sqlrdbnme; protocol type fcs; envlid 0x30; length override 18
//   sqlerrd1; protocol type i4; envlid 0x02; length override 4
//   sqlerrd2; protocol type i4; envlid 0x02; length override 4
//   sqlerrd3; protocol type i4; envlid 0x02; length override 4
//   sqlerrd4; protocol type i4; envlid 0x02; length override 4
//   sqlerrd5; protocol type i4; envlid 0x02; length override 4
//   sqlerrd6; protocol type i4; envlid 0x02; length override 4
//   sqlwarn0; protocol type fcs; envlid 0x30; length override 1
//   sqlwarn1; protocol type fcs; envlid 0x30; length override 1
//   sqlwarn2; protocol type fcs; envlid 0x30; length override 1
//   sqlwarn3; protocol type fcs; envlid 0x30; length override 1
//   sqlwarn4; protocol type fcs; envlid 0x30; length override 1
//   sqlwarn5; protocol type fcs; envlid 0x30; length override 1
//   sqlwarn6; protocol type fcs; envlid 0x30; length override 1
//   sqlwarn7; protocol type fcs; envlid 0x30; length override 1
//   sqlwarn8; protocol type fcs; envlid 0x30; length override 1
//   sqlwarn9; protocol type fcs; envlid 0x30; length override 1
//   sqlwarna; protocol type fcs; envlid 0x30; length override 1
//   sqlerrmsg_m; protocol type vcm; envlid 0x3e; length override 70
//   sqlerrmsg_s; protocol type vcs; envlid 0x32; length override 70
//
// format for sqlam >= 7
//   sqlerrd1; protocol type i4; envlid 0x02; length override 4
//   sqlerrd2; protocol type i4; envlid 0x02; length override 4
//   sqlerrd3; protocol type i4; envlid 0x02; length override 4
//   sqlerrd4; protocol type i4; envlid 0x02; length override 4
//   sqlerrd5; protocol type i4; envlid 0x02; length override 4
//   sqlerrd6; protocol type i4; envlid 0x02; length override 4
//   sqlwarn0; protocol type fcs; envlid 0x30; length override 1
//   sqlwarn1; protocol type fcs; envlid 0x30; length override 1
//   sqlwarn2; protocol type fcs; envlid 0x30; length override 1
//   sqlwarn3; protocol type fcs; envlid 0x30; length override 1
//   sqlwarn4; protocol type fcs; envlid 0x30; length override 1
//   sqlwarn5; protocol type fcs; envlid 0x30; length override 1
//   sqlwarn6; protocol type fcs; envlid 0x30; length override 1
//   sqlwarn7; protocol type fcs; envlid 0x30; length override 1
//   sqlwarn8; protocol type fcs; envlid 0x30; length override 1
//   sqlwarn9; protocol type fcs; envlid 0x30; length override 1
//   sqlwarna; protocol type fcs; envlid 0x30; length override 1
//   sqlrdbname; protocol type vcs; envlid 0x32; length override 255
//   sqlerrmsg_m; protocol type vcm; envlid 0x3e; length override 70
//   sqlerrmsg_s; protocol type vcs; envlid 0x32; length override 70
private void parsesqlcaxgrp netsqlca netsqlca  throws disconnectexception
if  readfastunsignedbyte      codepoint nulldata
netsqlca setcontainssqlcax false
return
if  netagent_ targetsqlam_ < netconfiguration mgrlvl_7
// skip over the rdbnam for now
//   sqlrdbnme; protocol type fcs; envlid 0x30; length override 18
skipfastbytes 18
//   sqlerrd1 to sqlerrd6; protocol type i4; envlid 0x02; length override 4
int sqlerrd   new int
readfastintarray sqlerrd
//   sqlwarn0 to sqlwarna; protocol type fcs; envlid 0x30; length override 1
byte sqlwarn   readfastbytes 11
if  netagent_ targetsqlam_ >  netconfiguration mgrlvl_7
// skip over the rdbnam for now
// sqlrdbname; protocol type vcs; envlid 0x32; length override 255
parsefastvcs
int sqlerrmcccsid   0
byte sqlerrmc   readfastldbytes
if  sqlerrmc    null
sqlerrmcccsid   netagent_ targettypdef_ getccsidmbc
skipfastbytes 2
else
sqlerrmc   readfastldbytes
sqlerrmcccsid   netagent_ targettypdef_ getccsidsbc
netsqlca setsqlerrd sqlerrd
netsqlca setsqlwarnbytes sqlwarn
netsqlca setsqlerrmcbytes sqlerrmc  sqlerrmcccsid      sqlerrmc may be null
// sqldiaggrp : fdoca early group
// sql diagnostics group description - identity 0xd1
// nullable group
// sqldiagstt; protocol type n-gda; envlid 0xd3; length override 0
// sqldiagcn;  drfa type n-rlo; envlid 0xf6; length override 0
// sqldiagci;  protocol type n-rlo; envlid 0xf5; length override 0
private long parsesqldiaggrp sqlca rowsetsqlca  throws disconnectexception
if  readfastunsignedbyte      codepoint nulldata
return 0
long row_count   parsesqldiagstt rowsetsqlca
parsesqldiagci rowsetsqlca
parsesqldiagcn
return row_count
// this is duplicated in parsecolumnmetadata, but different
// dagroup under netcolumnmetadata requires a lot more stuffs including
// precsion, scale and other stuffs
protected string parsefastvcs   throws disconnectexception
// doublecheck what readstring() does if the length is 0
return readfaststring readfastunsignedshort
netagent_ targettypdef_ getccsidsbcencoding
//----------------------non-parsing computational helper methods--------------
protected boolean checkandgetreceivedflag boolean receivedflag  throws disconnectexception
if  receivedflag
// this method will throw a disconnect exception if
// the received flag is already true;
dosyntaxrmsemantics codepoint synerrcd_dup_obj_present
return true
protected void checkrequiredobjects boolean receivedflag  throws disconnectexception
if   receivedflag
dosyntaxrmsemantics codepoint synerrcd_req_obj_not_found
protected void checkrequiredobjects boolean receivedflag
boolean receivedflag2  throws disconnectexception
if   receivedflag     receivedflag2
dosyntaxrmsemantics codepoint synerrcd_req_obj_not_found
protected void checkrequiredobjects boolean receivedflag
boolean receivedflag2
boolean receivedflag3  throws disconnectexception
if   receivedflag     receivedflag2     receivedflag3
dosyntaxrmsemantics codepoint synerrcd_req_obj_not_found
protected void checkrequiredobjects boolean receivedflag
boolean receivedflag2
boolean receivedflag3
boolean receivedflag4  throws disconnectexception
if   receivedflag     receivedflag2     receivedflag3     receivedflag4
dosyntaxrmsemantics codepoint synerrcd_req_obj_not_found
protected void checkrequiredobjects boolean receivedflag
boolean receivedflag2
boolean receivedflag3
boolean receivedflag4
boolean receivedflag5
boolean receivedflag6  throws disconnectexception
if   receivedflag     receivedflag2     receivedflag3     receivedflag4
receivedflag5     receivedflag6
dosyntaxrmsemantics codepoint synerrcd_req_obj_not_found
protected void checkrequiredobjects boolean receivedflag
boolean receivedflag2
boolean receivedflag3
boolean receivedflag4
boolean receivedflag5
boolean receivedflag6
boolean receivedflag7  throws disconnectexception
if   receivedflag     receivedflag2     receivedflag3     receivedflag4
receivedflag5     receivedflag6     receivedflag7
dosyntaxrmsemantics codepoint synerrcd_req_obj_not_found
// these methods are "private protected", which is not a recognized java privilege,
// but means that these methods are private to this class and to subclasses,
// and should not be used as package-wide friendly methods.
protected void doobjnsprmsemantics int codepoint  throws disconnectexception
agent_ accumulatechainbreakingreadexceptionandthrow new disconnectexception agent_
new clientmessageid sqlstate drda_ddm_object_not_supported
integer tohexstring codepoint
// also called by netstatementreply.
protected void doprmnsprmsemantics int codepoint  throws disconnectexception
agent_ accumulatechainbreakingreadexceptionandthrow new disconnectexception agent_
new clientmessageid sqlstate drda_ddm_param_not_supported
integer tohexstring codepoint
// also called by netstatementreply
void dovalnsprmsemantics int codepoint  int value  throws disconnectexception
dovalnsprmsemantics codepoint  integer tostring value
void dovalnsprmsemantics int codepoint  string value  throws disconnectexception
// special case the fdodta codepoint not to disconnect.
if  codepoint    codepoint fdodta
agent_ accumulatereadexception new sqlexception agent_ logwriter_
new clientmessageid sqlstate drda_ddm_paramval_not_supported
integer tohexstring codepoint
return
if  codepoint    codepoint ccsidsbc
codepoint    codepoint ccsiddbc
codepoint    codepoint ccsidmbc
// the server didn't like one of the ccsids.
// the message should reflect the error in question.  right now these values
// will be hard coded but this won't be correct if our driver starts sending
// other values to the server.  in order to pick up the correct values,
// a little reorganization may need to take place so that this code (or
// whatever code sets the message) has access to the correct values.
int cpvalue   0
switch  codepoint
case codepoint ccsidsbc
cpvalue   netagent_ typdef_ getccsidsbc
break
case codepoint ccsiddbc
cpvalue   netagent_ typdef_ getccsiddbc
break
case codepoint ccsidmbc
cpvalue   netagent_ typdef_ getccsidsbc
break
default
// should never be in this default case...
cpvalue   0
break
agent_ accumulatechainbreakingreadexceptionandthrow new disconnectexception agent_
new clientmessageid sqlstate drda_no_avail_codepage_conversion
new integer cpvalue   value
return
// the problem isn't with one of the ccsid values so...
// returning more information would
// require rearranging this code a little.
agent_ accumulatechainbreakingreadexceptionandthrow new disconnectexception agent_
new clientmessageid sqlstate drda_ddm_paramval_not_supported
integer tohexstring codepoint
void dodtamchrmsemantics   throws disconnectexception
agent_ accumulatechainbreakingreadexceptionandthrow new disconnectexception agent_
new clientmessageid sqlstate drda_connection_terminated
msgutil_ gettextmessage messageid conn_drda_dtarmchrm
// messages
//  sqlstate : 58010
//      execution failed due to a distribution protocol error that
//      will affect the successful execution of subsequent ddm commands
//      or sql statements.
//  sqlcode : -30021
//       execution failed because of a distributed protocol
//       error that will affect the successful execution of subsequent
//       commands and sql statements: manager <manager> at level
//       <level> not supported.
//
//       a system erro occurred that prevented successful connection
//       of the application to the remote database.  this message (sqlcode)
//       is producted for sql connect statement.
private void domgrlvlrmsemantics string manager  string level  throws disconnectexception
agent_ accumulatechainbreakingreadexceptionandthrow new disconnectexception agent_
new clientmessageid sqlstate drda_mgrlvlrm
manager  level
private void domgrlvlrmsemantics int manager  int level  throws disconnectexception
domgrlvlrmsemantics     integer tohexstring manager
integer tohexstring level
private void domgrlvlrmsemantics int namelist  int levellist  throws disconnectexception
stringbuffer managernames   new stringbuffer 100
stringbuffer managerlevels   new stringbuffer 100
int count   namelist length
for  int i   0  i < count  i
managernames append
managernames append namelist
managerlevels append
managerlevels append levellist
if  i     count   1
managernames append
managerlevels append
domgrlvlrmsemantics managernames tostring    managerlevels tostring
// the client can detect that a conversational protocol error has occurred.
// this can also be detected at the server in which case a prccnvrm is returned.
// the conversation protocol error code, prccnvrm, describes the various errors.
//
// note: not all of these may be valid at the client.  see descriptions for
// which ones make sense for client side errors/checks.
// conversation error code                  description of error
// -----------------------                  --------------------
// 0x01                                     rpydss received by target communications manager.
// 0x02                                     multiple dsss sent without chaining or multiple
//                                          dss chains sent.
// 0x03                                     objdss sent when not allowed.
// 0x04                                     request correlation identifier of an rqsdss
//                                          is less than or equal to the previous
//                                          rqsdss's request correlatio identifier in the chain.
// 0x05                                     request correlation identifier of an objdss
//                                          does not equal the request correlation identifier
//                                          of the preceding rqsdss.
// 0x06                                     excsat was not the first command after the connection
//                                          was established.
// 0x10                                     accsec or secchk command sent in wrong state.
// 0x11                                     syncctl or syncrsy command is used incorrectly.
// 0x12                                     rdbnam mismatch between accsec, secchk, and accrdb.
// 0x13                                     a command follows one that returned extdtas as reply object.
//
// when the client detects these errors, it will be handled as if a prccnvrm is returned
// from the server.  in this prccnvrm case, protocol architects an sqlstate of 58008 or 58009
// depening of the svrcod.  in this case, a 58009 will always be returned.
// messages
// sqlstate : 58009
//     execution failed due to a distribution protocol error that caused deallocation of the conversation.
//     sqlcode : -30020
//     execution failed because of a distributed protocol
//         error that will affect the successful execution of subsequent
//         commands and sql statements: reason code <reason-code>.
//      some possible reason codes include:
//      121c indicates that the user is not authorized to perform the requested command.
//      1232 the command could not be completed because of a permanent error.
//          in most cases, the server will be in the process of an abend.
//      220a the target server has received an invalid data description.
//          if a user sqlda is specified, ensure that the fields are
//          initialized correctly. also, ensure that the length does not
//          exceed the maximum allowed length for the data type being used.
//
//      the command or statement cannot be processed.  the current
//          transaction is rolled back and the application is disconnected
//          from the remote database.
protected void doprccnvrmsemantics int conversationprotocolerrorcode  throws disconnectexception
// we may need to map the conversation protocol error code, prccnvcd, to some kind
// of reason code.  for now just return the prccnvcd as the reason code
agent_ accumulatechainbreakingreadexceptionandthrow new disconnectexception agent_
new clientmessageid sqlstate drda_connection_terminated
msgutil_ gettextmessage messageid conn_drda_prccnvrm
integer tohexstring conversationprotocolerrorcode
// sql diagnostics condition token array - identity 0xf7
// sqlnumrow; row lid 0x68; element taken 0(all); rep factor 1
// sqltokrow; row lid 0xe7; element taken 0(all); rep factor 0(all)
void parsesqldctoks   throws disconnectexception
if  readfastunsignedbyte      codepoint nulldata
return
int num   parsefastsqlnumrow
for  int i   0  i < num  i
parsesqltokrow
// sql diagnostics condition information array - identity 0xf5
// sqlnumrow; row lid 0x68; element taken 0(all); rep factor 1
// sqldcirow; row lid 0xe5; element taken 0(all); rep factor 0(all)
private void parsesqldiagci sqlca rowsetsqlca  throws disconnectexception
if  readfastunsignedbyte      codepoint nulldata
return
int num   parsefastsqlnumrow
if  num    0
resetrowsetsqlca rowsetsqlca  0
// lastrow is the row number for the last row that had a non-null sqlca.
int lastrow   1
for  int i   0  i < num  i
lastrow   parsesqldcrow rowsetsqlca  lastrow
resetrowsetsqlca rowsetsqlca  lastrow   1
// sql diagnostics connection array - identity 0xf6
// sqlnumrow; row lid 0x68; element taken 0(all); rep factor 1
// sqlcnrow;  row lid 0xe6; element taken 0(all); rep factor 0(all)
private void parsesqldiagcn   throws disconnectexception
if  readunsignedbyte      codepoint nulldata
return
int num   parsefastsqlnumrow
for  int i   0  i < num  i
parsesqlcnrow
// sql diagnostics connection row - identity 0xe6
// sqlcngrp; group lid 0xd6; element taken 0(all); rep factor 1
private void parsesqlcnrow   throws disconnectexception
parsesqlcngrp
// sql diagnostics condition row - identity 0xe5
// sqldcgrp; group lid 0xd5; element taken 0(all); rep factor 1
private int parsesqldcrow sqlca rowsetsqlca  int lastrow  throws disconnectexception
return parsesqldcgrp rowsetsqlca  lastrow
// sql diagnostics token row - identity 0xe7
// sqltokgrp; group lid 0xd7; element taken 0(all); rep factor 1
private void parsesqltokrow   throws disconnectexception
parsesqltokgrp
// check on sqltokgrp format
private void parsesqltokgrp   throws disconnectexception
skipfastnvcmornvcs
// sql diagnostics statement group description - identity 0xd3
// nullable group
// sqldsfcod; protocol type i4; envlid 0x02; length override 4
// sqldscost; protocol type i4; envlid 0x02; length override 4
// sqldslrow; protocol type i4; envlid 0x02; length override 4
// sqldsnpm; protocol type i4; envlid 0x02; length override 4
// sqldsnrs; protocol type i4; envlid 0x02; length override 4
// sqldsrns; protocol type i4; envlid 0x02; length override 4
// sqldsdcod; protocol type i4; envlid 0x02; length override 4
// sqldsrowc; protocol type fd; envlid 0x0e; length override 31
// sqldsnrow; protocol type fd; envlid 0x0e; length override 31
// sqldsrowcs; protocol type fd; envlid 0x0e; length override 31
// sqldsacon; protocol type fcs; envlid 0x30; length override 1
// sqldsacrh; protocol type fcs; envlid 0x30; length override 1
// sqldsacrs; protocol type fcs; envlid 0x30; length override 1
// sqldsacsl; protocol type fcs; envlid 0x30; length override 1
// sqldsacse; protocol type fcs; envlid 0x30; length override 1
// sqldsacty; protocol type fcs; envlid 0x30; length override 1
// sqldscerr; protocol type fcs; envlid 0x30; length override 1
// sqldsmore; protocol type fcs; envlid 0x30; length override 1
private long parsesqldiagstt sqlca rowsetsqlca  throws disconnectexception
if  readfastunsignedbyte      codepoint nulldata
return 0
int sqldsfcod   readfastint       function_code
int sqldscost   readfastint       cost_estimate
int sqldslrow   readfastint       last_row
skipfastbytes 16
long sqldsrowc   readfastlong       row_count
skipfastbytes 24
return sqldsrowc
// sql diagnostics connection group description - identity 0xd6
// nullable
//
// sqlcnstate; protocol type i4; envlid 0x02; length override 4
// sqlcnstatus; protocol type i4; envlid 0x02; length override 4
// sqlcnatype; protocol type fcs; envlid 0x30; length override 1
// sqlcnetype; protocol type fcs; envlid 0x30; length override 1
// sqlcnprdid; protocol type fcs; envlid 0x30; length override 8
// sqlcnrdb; protocol type vcs; envlid 0x32; length override 255
// sqlcnclass; protocol type vcs; envlid 0x32; length override 255
// sqlcnauthid; protocol type vcs; envlid 0x32; length override 255
private void parsesqlcngrp   throws disconnectexception
skipbytes 18
string sqlcnrdb   parsefastvcs          rdbnam
string sqlcnclass   parsefastvcs        class_name
string sqlcnauthid   parsefastvcs       authid
// sql diagnostics condition group description
//
// sqldccode; protocol type i4; envlid 0x02; length override 4
// sqldcstate; protocol type fcs; envlid ox30; lengeh override 5
// sqldcreason; protocol type i4; envlid 0x02; length override 4
// sqldclinen; protocol type i4; envlid 0x02; length override 4
// sqldcrown; protocol type fd; envlid 0x0e; lengeh override 31
// sqldcer01; protocol type i4; envlid 0x02; length override 4
// sqldcer02; protocol type i4; envlid 0x02; length override 4
// sqldcer03; protocol type i4; envlid 0x02; length override 4
// sqldcer04; protocol type i4; envlid 0x02; length override 4
// sqldcpart; protocol type i4; envlid 0x02; length override 4
// sqldcppop; protocol type i4; envlid 0x02; length override 4
// sqldcmsgid; protocol type fcs; envlid 0x30; length override 10
// sqldcmde; protocol type fcs; envlid 0x30; length override 8
// sqldcpmod; protocol type fcs; envlid 0x30; length override 5
// sqldcrdb; protocol type vcs; envlid 0x32; length override 255
// sqldctoks; protocol type n-rlo; envlid 0xf7; length override 0
// sqldcmsg_m; protocol type nvmc; envlid 0x3f; length override 32672
// sqldcmsg_s; protocol type nvcs; envlid 0x33; length override 32672
// sqldccoln_m; protocol type nvcm ; envlid 0x3f; length override 255
// sqldccoln_s; protocol type nvcs; envlid 0x33; length override 255
// sqldccurn_m; protocol type nvcm; envlid 0x3f; length override 255
// sqldccurn_s; protocol type nvcs; envlid 0x33; length override 255
// sqldcpnam_m; protocol type nvcm; envlid 0x3f; length override 255
// sqldcpnam_s; protocol type nvcs; envlid 0x33; length override 255
// sqldcxgrp; protocol type n-gda; envlid 0xd3; length override 1
private int parsesqldcgrp sqlca rowsetsqlca  int lastrow  throws disconnectexception
int sqldccode   readfastint       sqlcode
string sqldcstate   readfaststring 5  typdef utf8encoding      sqlstate
int sqldcreason   readfastint        reason_code
int sqldclinen   readfastint       line_number
int sqldcrown    int  readfastlong       row_number
// save +20237 in the 0th entry of the rowsetsqlca's.
// this info is going to be used when a subsequent fetch prior is issued, and if already
// received a +20237 then we've gone beyond the first row and there is no need to
// flow another fetch to the server.
if  sqldccode    20237
rowsetsqlca   new netsqlca netagent_ netconnection_
sqldccode
sqldcstate

else
if  rowsetsqlca    null
rowsetsqlca resetrowsetsqlca netagent_ netconnection_
sqldccode
sqldcstate

else
rowsetsqlca   new netsqlca netagent_ netconnection_
sqldccode
sqldcstate

// reset all entries between lastrow and sqldcrown to null
for  int i   lastrow   1  i < sqldcrown  i
rowsetsqlca   null
skipfastbytes 47
string sqldcrdb   parsefastvcs       rdbnam
// skip the tokens for now, since we already have the complete message.
parsesqldctoks       message_tokens
string sqldcmsg   parsefastnvcmornvcs       message_text
// skip the following for now.
skipfastnvcmornvcs        column_name
skipfastnvcmornvcs        parameter_name
skipfastnvcmornvcs        extended_names
parsesqldcxgrp       sqldcxgrp
return sqldcrown
// sql diagnostics extended names group description - identity 0xd5
// nullable
//
// sqldcxrdb_m ; protocol type nvcm; envlid 0x3f; length override 255
// sqldcxsch_m ; protocol type nvcm; envlid 0x3f; length override 255
// sqldcxnam_m ; protocol type nvcm; envlid 0x3f; length override 255
// sqldcxtbln_m ; protocol type nvcm; envlid 0x3f; length override 255
// sqldcxrdb_s ; protocol type nvcs; envlid 0x33; length override 255
// sqldcxsch_s ; protocol type nvcs; envlid 0x33; length override 255
// sqldcxnam_s ; protocol type nvcs; envlid 0x33; length override 255
// sqldcxtbln_s ; protocol type nvcs; envlid 0x33; length override 255
//
// sqldcxcrdb_m ; protocol type nvcm; envlid 0x3f; length override 255
// sqldcxcsch_m ; protocol type nvcm; envlid 0x3f; length override 255
// sqldcxcnam_m ; protocol type nvcm; envlid 0x3f; length override 255
// sqldcxcrdb_s ; protocol type nvcs; envlid 0x33; length override 255
// sqldcxcsch_s ; protocol type nvcs; envlid 0x33; length override 255
// sqldcxcnam_s ; protocol type nvcs; envlid 0x33; length override 255
//
// sqldcxrrdb_m ; protocol type nvcm; envlid 0x3f; length override 255
// sqldcxrsch_m ; protocol type nvcm; envlid 0x3f; length override 255
// sqldcxrnam_m ; protocol type nvcm; envlid 0x3f; length override 255
// sqldcxrrdb_s ; protocol type nvcs; envlid 0x33; length override 255
// sqldcxrsch_s ; protocol type nvcs; envlid 0x33; length override 255
// sqldcxrnam_s ; protocol type nvcs; envlid 0x33; length override 255
//
// sqldcxtrdb_m ; protocol type nvcm; envlid 0x3f; length override 255
// sqldcxtsch_m ; protocol type nvcm; envlid 0x3f; length override 255
// sqldcxtnam_m ; protocol type nvcm; envlid 0x3f; length override 255
// sqldcxtrdb_s ; protocol type nvcs; envlid 0x33; length override 255
// sqldcxtsch_s ; protocol type nvcs; envlid 0x33; length override 255
// sqldcxtnam_s ; protocol type nvcs; envlid 0x33; length override 255
private void parsesqldcxgrp   throws disconnectexception
if  readfastunsignedbyte      codepoint nulldata
return
skipfastnvcmornvcs        object_rdbnam
skipfastnvcmornvcs        object_schema
skipfastnvcmornvcs        specific_name
skipfastnvcmornvcs        table_name
string sqldcxcrdb   parsefastvcs              constraint_rdbnam
skipfastnvcmornvcs        constraint_schema
skipfastnvcmornvcs        constraint_name
parsefastvcs              routine_rdbnam
skipfastnvcmornvcs        routine_schema
skipfastnvcmornvcs        routine_name
parsefastvcs              trigger_rdbnam
skipfastnvcmornvcs        trigger_schema
skipfastnvcmornvcs        trigger_name
private string parsefastnvcmornvcs   throws disconnectexception
string stringtobeset   null
int vcm_length   0
int vcs_length   0
if  readfastunsignedbyte      codepoint nulldata
vcm_length   readfastunsignedshort
if  vcm_length > 0
stringtobeset   readfaststring vcm_length  netagent_ targettypdef_ getccsidmbcencoding
if  readfastunsignedbyte      codepoint nulldata
agent_ accumulatechainbreakingreadexceptionandthrow
new disconnectexception agent_
new clientmessageid
sqlstate net_nvcm_nvcs_both_non_null
else
if  readfastunsignedbyte      codepoint nulldata
vcs_length   readfastunsignedshort
if  vcs_length > 0
stringtobeset   readfaststring vcs_length  netagent_ targettypdef_ getccsidsbcencoding
return stringtobeset
private void skipfastnvcmornvcs   throws disconnectexception
int vcm_length   0
int vcs_length   0
if  readfastunsignedbyte      codepoint nulldata
vcm_length   readfastunsignedshort
if  vcm_length > 0
//stringtobeset = readstring (vcm_length, netagent_.targettypdef_.getccsidmbcencoding());
skipfastbytes vcm_length
if  readfastunsignedbyte      codepoint nulldata
agent_ accumulatechainbreakingreadexceptionandthrow
new disconnectexception agent_
new clientmessageid
sqlstate net_nvcm_nvcs_both_non_null
else
if  readfastunsignedbyte      codepoint nulldata
vcs_length   readfastunsignedshort
if  vcs_length > 0
//stringtobeset = readstring (vcs_length, netagent_.targettypdef_.getccsidsbcencoding());
skipfastbytes vcs_length
void resetrowsetsqlca sqlca rowsetsqlca  int row
// rowsetsqlca can be null.
int count     rowsetsqlca    null  ? 0   rowsetsqlca length
for  int i   row  i < count  i
rowsetsqlca   null