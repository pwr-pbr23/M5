/*
derby - class org.apache.derby.client.am.databasemetadata
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby client am
import java sql sqlexception
import org apache derby jdbc clientdatasource
import org apache derby shared common reference sqlstate
import org apache derby shared common reference jdbc30translation
// note:
//   tag members using the strictest visibility.
// note:
//   mark methods synchronized if and only if they update object state and are public.
// not yet done:
//   application heap data should be copied for shiraz.
//   save for future pass to avoid clutter during development.
// not yet done:
//   apply meaning-preserving program transformations for performance,
//   including the replacement of slow adts with faster unsynchronized adts.
//   save for future pass to avoid clutter during development.
// not yet done:
//   assign an errorkey, resourcekey, and resource for each throw statement.
//   save for future pass to avoid maintenance during development.
public abstract class databasemetadata implements java sql databasemetadata
//----------------------------- constants  -----------------------------------
private final static short sql_best_rowid   1
private final static short sql_rowver   2
private final static short sql_index_unique   0
private final static short sql_index_all   1
//---------------------navigational members-----------------------------------
protected agent agent_
protected connection connection_
//-----------------------------state------------------------------------------
private final static int numberofmetadatainfomethods__   108
private object metadatainfocache_   new object
private boolean metadatainfoiscached_   false
public productlevel productlevel_
/** the jdbc major version supported by the server. */
private final int serverjdbcmajorversion
/** the jdbc minor version supported by the server. */
private final int serverjdbcminorversion
public boolean useserverxastate_   true
//---------------------constructors/finalizer---------------------------------
protected databasemetadata agent agent  connection connection  productlevel productlevel
agent_   agent
connection_   connection
productlevel_   productlevel
computefeatureset_
if  connection isxaconnection
connection xahostversion_   productlevel_ versionlevel_
if  productlevel_ lessthan 10  2  0
serverjdbcmajorversion   3
serverjdbcminorversion   0
else
serverjdbcmajorversion   4
serverjdbcminorversion   0
// ---------------------------jdbc 1------------------------------------------
//----------------------------------------------------------------------
// first, a variety of minor information about the target database.
private final static int allproceduresarecallable__   0
public boolean allproceduresarecallable   throws sqlexception
checkforclosedconnection
return getmetadatainfoboolean allproceduresarecallable__
private final static int alltablesareselectable__   1
public boolean alltablesareselectable   throws sqlexception
checkforclosedconnection
return getmetadatainfoboolean alltablesareselectable__
private final static int nullsaresortedhigh__   2
public boolean nullsaresortedhigh   throws sqlexception
checkforclosedconnection
return getmetadatainfoboolean nullsaresortedhigh__
private final static int nullsaresortedlow__   3
public boolean nullsaresortedlow   throws sqlexception
checkforclosedconnection
return getmetadatainfoboolean nullsaresortedlow__
private final static int nullsaresortedatstart__   4
public boolean nullsaresortedatstart   throws sqlexception
checkforclosedconnection
return getmetadatainfoboolean nullsaresortedatstart__
private final static int nullsaresortedatend__   5
public boolean nullsaresortedatend   throws sqlexception
checkforclosedconnection
return getmetadatainfoboolean nullsaresortedatend__
private final static int useslocalfiles__   6
public boolean useslocalfiles   throws sqlexception
checkforclosedconnection
return getmetadatainfoboolean useslocalfiles__
private final static int useslocalfilepertable__   7
public boolean useslocalfilepertable   throws sqlexception
checkforclosedconnection
return getmetadatainfoboolean useslocalfilepertable__
private final static int storesuppercaseidentifiers__   8
public boolean storesuppercaseidentifiers   throws sqlexception
checkforclosedconnection
return getmetadatainfoboolean storesuppercaseidentifiers__
private final static int storeslowercaseidentifiers__   9
public boolean storeslowercaseidentifiers   throws sqlexception
checkforclosedconnection
return getmetadatainfoboolean storeslowercaseidentifiers__
private final static int storesmixedcaseidentifiers__   10
public boolean storesmixedcaseidentifiers   throws sqlexception
checkforclosedconnection
return getmetadatainfoboolean storesmixedcaseidentifiers__
private final static int storesuppercasequotedidentifiers__   11
public boolean storesuppercasequotedidentifiers   throws sqlexception
checkforclosedconnection
return getmetadatainfoboolean storesuppercasequotedidentifiers__
private final static int storeslowercasequotedidentifiers__   12
public boolean storeslowercasequotedidentifiers   throws sqlexception
checkforclosedconnection
return getmetadatainfoboolean storeslowercasequotedidentifiers__
private final static int storesmixedcasequotedidentifiers__   13
public boolean storesmixedcasequotedidentifiers   throws sqlexception
checkforclosedconnection
return getmetadatainfoboolean storesmixedcasequotedidentifiers__
private final static int getsqlkeywords__   14
public string getsqlkeywords   throws sqlexception
checkforclosedconnection
return getmetadatainfostring getsqlkeywords__
private final static int getnumericfunctions__   15
public string getnumericfunctions   throws sqlexception
checkforclosedconnection
return getmetadatainfostring getnumericfunctions__
private final static int getstringfunctions__   16
public string getstringfunctions   throws sqlexception
checkforclosedconnection
return getmetadatainfostring getstringfunctions__
private final static int getsystemfunctions__   17
public string getsystemfunctions   throws sqlexception
checkforclosedconnection
return getmetadatainfostring getsystemfunctions__
private final static int gettimedatefunctions__   18
public string gettimedatefunctions   throws sqlexception
checkforclosedconnection
return getmetadatainfostring gettimedatefunctions__
private final static int getsearchstringescape__   19
public string getsearchstringescape   throws sqlexception
checkforclosedconnection
return getmetadatainfostring getsearchstringescape__
private final static int getextranamecharacters__   20
public string getextranamecharacters   throws sqlexception
checkforclosedconnection
return getmetadatainfostring getextranamecharacters__
private final static int supportsaltertablewithaddcolumn__   21
public boolean supportsaltertablewithaddcolumn   throws sqlexception
checkforclosedconnection
return getmetadatainfoboolean supportsaltertablewithaddcolumn__
private final static int supportsaltertablewithdropcolumn__   22
public boolean supportsaltertablewithdropcolumn   throws sqlexception
checkforclosedconnection
return getmetadatainfoboolean supportsaltertablewithdropcolumn__
private final static int supportsconvert__   23
public boolean supportsconvert   throws sqlexception
checkforclosedconnection
return getmetadatainfoboolean supportsconvert__
private final static int supportsconverttype__   24
public boolean supportsconvert int fromtype  int totype  throws sqlexception
checkforclosedconnection
return getmetadatainfoboolean_supportsconvert supportsconverttype__  fromtype  totype
private final static int supportsdifferenttablecorrelationnames__   25
public boolean supportsdifferenttablecorrelationnames   throws sqlexception
checkforclosedconnection
return getmetadatainfoboolean supportsdifferenttablecorrelationnames__
private final static int supportsexpressionsinorderby__   26
public boolean supportsexpressionsinorderby   throws sqlexception
checkforclosedconnection
return getmetadatainfoboolean supportsexpressionsinorderby__
private final static int supportsorderbyunrelated__   27
public boolean supportsorderbyunrelated   throws sqlexception
checkforclosedconnection
return getmetadatainfoboolean supportsorderbyunrelated__
private final static int supportsgroupby__   28
public boolean supportsgroupby   throws sqlexception
checkforclosedconnection
return getmetadatainfoboolean supportsgroupby__
private final static int supportsgroupbyunrelated__   29
public boolean supportsgroupbyunrelated   throws sqlexception
checkforclosedconnection
return getmetadatainfoboolean supportsgroupbyunrelated__
private final static int supportsgroupbybeyondselect__   30
public boolean supportsgroupbybeyondselect   throws sqlexception
checkforclosedconnection
return getmetadatainfoboolean supportsgroupbybeyondselect__
private final static int supportsmultipleresultsets__   31
public boolean supportsmultipleresultsets   throws sqlexception
checkforclosedconnection
return getmetadatainfoboolean supportsmultipleresultsets__
private final static int supportsmultipletransactions__   32
public boolean supportsmultipletransactions   throws sqlexception
checkforclosedconnection
return getmetadatainfoboolean supportsmultipletransactions__
private final static int supportscoresqlgrammar__   33
public boolean supportscoresqlgrammar   throws sqlexception
checkforclosedconnection
return getmetadatainfoboolean supportscoresqlgrammar__
private final static int supportsextendedsqlgrammar__   34
public boolean supportsextendedsqlgrammar   throws sqlexception
checkforclosedconnection
return getmetadatainfoboolean supportsextendedsqlgrammar__
private final static int supportsansi92intermediatesql__   35
public boolean supportsansi92intermediatesql   throws sqlexception
checkforclosedconnection
return getmetadatainfoboolean supportsansi92intermediatesql__
private final static int supportsansi92fullsql__   36
public boolean supportsansi92fullsql   throws sqlexception
checkforclosedconnection
return getmetadatainfoboolean supportsansi92fullsql__
private final static int supportsintegrityenhancementfacility__   37
public boolean supportsintegrityenhancementfacility   throws sqlexception
checkforclosedconnection
return getmetadatainfoboolean supportsintegrityenhancementfacility__
private final static int supportsouterjoins__   38
public boolean supportsouterjoins   throws sqlexception
checkforclosedconnection
return getmetadatainfoboolean supportsouterjoins__
private final static int supportsfullouterjoins__   39
public boolean supportsfullouterjoins   throws sqlexception
checkforclosedconnection
return getmetadatainfoboolean supportsfullouterjoins__
private final static int supportslimitedouterjoins__   40
public boolean supportslimitedouterjoins   throws sqlexception
checkforclosedconnection
return getmetadatainfoboolean supportslimitedouterjoins__
private final static int getschematerm__   41
public string getschematerm   throws sqlexception
checkforclosedconnection
return getmetadatainfostring getschematerm__
private final static int getprocedureterm__   42
public string getprocedureterm   throws sqlexception
checkforclosedconnection
return getmetadatainfostring getprocedureterm__
private final static int getcatalogterm__   43
public string getcatalogterm   throws sqlexception
checkforclosedconnection
return getmetadatainfostring getcatalogterm__
private final static int iscatalogatstart__   44
public boolean iscatalogatstart   throws sqlexception
checkforclosedconnection
return getmetadatainfoboolean iscatalogatstart__
private final static int getcatalogseparator__   45
public string getcatalogseparator   throws sqlexception
checkforclosedconnection
return getmetadatainfostring getcatalogseparator__
private final static int supportsschemasindatamanipulation__   46
public boolean supportsschemasindatamanipulation   throws sqlexception
checkforclosedconnection
return getmetadatainfoboolean supportsschemasindatamanipulation__
private final static int supportsschemasinprocedurecalls__   47
public boolean supportsschemasinprocedurecalls   throws sqlexception
checkforclosedconnection
return getmetadatainfoboolean supportsschemasinprocedurecalls__
private final static int supportsschemasintabledefinitions__   48
public boolean supportsschemasintabledefinitions   throws sqlexception
checkforclosedconnection
return getmetadatainfoboolean supportsschemasintabledefinitions__
private final static int supportsschemasinindexdefinitions__   49
public boolean supportsschemasinindexdefinitions   throws sqlexception
checkforclosedconnection
return getmetadatainfoboolean supportsschemasinindexdefinitions__
private final static int supportsschemasinprivilegedefinitions__   50
public boolean supportsschemasinprivilegedefinitions   throws sqlexception
checkforclosedconnection
return getmetadatainfoboolean supportsschemasinprivilegedefinitions__
private final static int supportscatalogsindatamanipulation__   51
public boolean supportscatalogsindatamanipulation   throws sqlexception
checkforclosedconnection
return getmetadatainfoboolean supportscatalogsindatamanipulation__
private final static int supportscatalogsinprocedurecalls__   52
public boolean supportscatalogsinprocedurecalls   throws sqlexception
checkforclosedconnection
return getmetadatainfoboolean supportscatalogsinprocedurecalls__
private final static int supportscatalogsintabledefinitions__   53
public boolean supportscatalogsintabledefinitions   throws sqlexception
checkforclosedconnection
return getmetadatainfoboolean supportscatalogsintabledefinitions__
private final static int supportscatalogsinindexdefinitions__   54
public boolean supportscatalogsinindexdefinitions   throws sqlexception
checkforclosedconnection
return getmetadatainfoboolean supportscatalogsinindexdefinitions__
private final static int supportscatalogsinprivilegedefinitions__   55
public boolean supportscatalogsinprivilegedefinitions   throws sqlexception
checkforclosedconnection
return getmetadatainfoboolean supportscatalogsinprivilegedefinitions__
private final static int supportspositioneddelete__   56
public boolean supportspositioneddelete   throws sqlexception
checkforclosedconnection
return getmetadatainfoboolean supportspositioneddelete__
private final static int supportspositionedupdate__   57
public boolean supportspositionedupdate   throws sqlexception
checkforclosedconnection
return getmetadatainfoboolean supportspositionedupdate__
private final static int supportsselectforupdate__   58
public boolean supportsselectforupdate   throws sqlexception
checkforclosedconnection
return getmetadatainfoboolean supportsselectforupdate__
private final static int supportsstoredprocedures__   59
public boolean supportsstoredprocedures   throws sqlexception
checkforclosedconnection
return getmetadatainfoboolean supportsstoredprocedures__
private final static int supportssubqueriesincomparisons__   60
public boolean supportssubqueriesincomparisons   throws sqlexception
checkforclosedconnection
return getmetadatainfoboolean supportssubqueriesincomparisons__
private final static int supportsunion__   61
public boolean supportsunion   throws sqlexception
checkforclosedconnection
return getmetadatainfoboolean supportsunion__
private final static int supportsunionall__   62
public boolean supportsunionall   throws sqlexception
checkforclosedconnection
return getmetadatainfoboolean supportsunionall__
private final static int supportsopencursorsacrosscommit__   63
public boolean supportsopencursorsacrosscommit   throws sqlexception
checkforclosedconnection
return getmetadatainfoboolean supportsopencursorsacrosscommit__
private final static int supportsopencursorsacrossrollback__   64
public boolean supportsopencursorsacrossrollback   throws sqlexception
checkforclosedconnection
return getmetadatainfoboolean supportsopencursorsacrossrollback__
private final static int supportsopenstatementsacrosscommit__   65
public boolean supportsopenstatementsacrosscommit   throws sqlexception
checkforclosedconnection
return getmetadatainfoboolean supportsopenstatementsacrosscommit__
private final static int supportsopenstatementsacrossrollback__   66
public boolean supportsopenstatementsacrossrollback   throws sqlexception
checkforclosedconnection
return getmetadatainfoboolean supportsopenstatementsacrossrollback__
//----------------------------------------------------------------------
// the following group of methods exposes various limitations
// based on the target database with the current driver.
// unless otherwise specified, a result of zero means there is no
// limit, or the limit is not known.
private final static int getmaxbinaryliterallength__   67
public int getmaxbinaryliterallength   throws sqlexception
checkforclosedconnection
return getmetadatainfoint getmaxbinaryliterallength__
private final static int getmaxcharliterallength__   68
public int getmaxcharliterallength   throws sqlexception
checkforclosedconnection
return getmetadatainfoint getmaxcharliterallength__
private final static int getmaxcolumnnamelength__   69
public int getmaxcolumnnamelength   throws sqlexception
checkforclosedconnection
return getmetadatainfoint getmaxcolumnnamelength__
private final static int getmaxcolumnsingroupby__   70
public int getmaxcolumnsingroupby   throws sqlexception
checkforclosedconnection
return getmetadatainfoint getmaxcolumnsingroupby__
private final static int getmaxcolumnsinindex__   71
public int getmaxcolumnsinindex   throws sqlexception
checkforclosedconnection
return getmetadatainfoint getmaxcolumnsinindex__
private final static int getmaxcolumnsinorderby__   72
public int getmaxcolumnsinorderby   throws sqlexception
checkforclosedconnection
return getmetadatainfoint getmaxcolumnsinorderby__
private final static int getmaxcolumnsinselect__   73
public int getmaxcolumnsinselect   throws sqlexception
checkforclosedconnection
return getmetadatainfoint getmaxcolumnsinselect__
private final static int getmaxcolumnsintable__   74
public int getmaxcolumnsintable   throws sqlexception
checkforclosedconnection
return getmetadatainfoint getmaxcolumnsintable__
private final static int getmaxconnections__   75
public int getmaxconnections   throws sqlexception
checkforclosedconnection
return getmetadatainfoint getmaxconnections__
private final static int getmaxcursornamelength__   76
public int getmaxcursornamelength   throws sqlexception
checkforclosedconnection
return getmetadatainfoint getmaxcursornamelength__
private final static int getmaxindexlength__   77
public int getmaxindexlength   throws sqlexception
checkforclosedconnection
return getmetadatainfoint getmaxindexlength__
private final static int getmaxschemanamelength__   78
public int getmaxschemanamelength   throws sqlexception
checkforclosedconnection
return getmetadatainfoint getmaxschemanamelength__
private final static int getmaxprocedurenamelength__   79
public int getmaxprocedurenamelength   throws sqlexception
checkforclosedconnection
return getmetadatainfoint getmaxprocedurenamelength__
private final static int getmaxcatalognamelength__   80
public int getmaxcatalognamelength   throws sqlexception
checkforclosedconnection
return getmetadatainfoint getmaxcatalognamelength__
private final static int getmaxrowsize__   81
public int getmaxrowsize   throws sqlexception
checkforclosedconnection
return getmetadatainfoint getmaxrowsize__
private final static int doesmaxrowsizeincludeblobs__   82
public boolean doesmaxrowsizeincludeblobs   throws sqlexception
checkforclosedconnection
return getmetadatainfoboolean doesmaxrowsizeincludeblobs__
private final static int getmaxstatementlength__   83
public int getmaxstatementlength   throws sqlexception
checkforclosedconnection
return getmetadatainfoint getmaxstatementlength__
private final static int getmaxstatements__   84
public int getmaxstatements   throws sqlexception
checkforclosedconnection
return getmetadatainfoint getmaxstatements__
private final static int getmaxtablenamelength__   85
public int getmaxtablenamelength   throws sqlexception
checkforclosedconnection
return getmetadatainfoint getmaxtablenamelength__
private final static int getmaxtablesinselect__   86
public int getmaxtablesinselect   throws sqlexception
checkforclosedconnection
return getmetadatainfoint getmaxtablesinselect__
private final static int getmaxusernamelength__   87
public int getmaxusernamelength   throws sqlexception
checkforclosedconnection
return getmetadatainfoint getmaxusernamelength__
private final static int getdefaulttransactionisolation__   88
public int getdefaulttransactionisolation   throws sqlexception
checkforclosedconnection
return getmetadatainfoint getdefaulttransactionisolation__
private final static int supportstransactions__   89
public boolean supportstransactions   throws sqlexception
checkforclosedconnection
return getmetadatainfoboolean supportstransactions__
// stored procedure will return a string containing a
// comma seperated list of all supported levels
private final static int supportstransactionisolationlevel__   90
public boolean supportstransactionisolationlevel int level  throws sqlexception
checkforclosedconnection
return getmetadatainfobooleanwithtype supportstransactionisolationlevel__  level
private final static int supportsdatadefinitionanddatamanipulationtransactions__   91
public boolean supportsdatadefinitionanddatamanipulationtransactions   throws sqlexception
checkforclosedconnection
return getmetadatainfoboolean supportsdatadefinitionanddatamanipulationtransactions__
private final static int supportsdatamanipulationtransactionsonly__   92
public boolean supportsdatamanipulationtransactionsonly   throws sqlexception
checkforclosedconnection
return getmetadatainfoboolean supportsdatamanipulationtransactionsonly__
private final static int datadefinitioncausestransactioncommit__   93
public boolean datadefinitioncausestransactioncommit   throws sqlexception
checkforclosedconnection
return getmetadatainfoboolean datadefinitioncausestransactioncommit__
private final static int datadefinitionignoredintransactions__   94
public boolean datadefinitionignoredintransactions   throws sqlexception
checkforclosedconnection
return getmetadatainfoboolean datadefinitionignoredintransactions__
// stored procedure will return a string containing a
// comma seperated list of all the supported resultset types
private final static int supportsresultsettype__   95
public boolean supportsresultsettype int type  throws sqlexception
checkforclosedconnection
return getmetadatainfobooleanwithtype supportsresultsettype__  type
private final static int supportsresultsetconcurrency__   96
public boolean supportsresultsetconcurrency int type  int concurrency  throws sqlexception
checkforclosedconnection
return getmetadatainfoint_supportsresultsetconcurrency supportsresultsetconcurrency__  type  concurrency
// stored procedure will return a string containing a
// comma seperated list of all the supported result set types
private final static int ownupdatesarevisible__   97
public boolean ownupdatesarevisible int type  throws sqlexception
checkforclosedconnection
return getmetadatainfobooleanwithtype ownupdatesarevisible__  type
// stored procedure will return a string containing a
// comma seperated list of all the supported result set types
private final static int owndeletesarevisible__   98
public boolean owndeletesarevisible int type  throws sqlexception
checkforclosedconnection
return getmetadatainfobooleanwithtype owndeletesarevisible__  type
// stored procedure will return a string containing a
// comma seperated list all the supported result set types
private final static int owninsertsarevisible__   99
public boolean owninsertsarevisible int type  throws sqlexception
checkforclosedconnection
return getmetadatainfobooleanwithtype owninsertsarevisible__  type
// stored procedure will return a string containing a
// comma seperated list of all the supported result set types
private final static int othersupdatesarevisible__   100
public boolean othersupdatesarevisible int type  throws sqlexception
checkforclosedconnection
return getmetadatainfobooleanwithtype othersupdatesarevisible__  type
// stored procedure will return a string containing a
// comma seperated list of all the supported result set types
private final static int othersdeletesarevisible__   101
public boolean othersdeletesarevisible int type  throws sqlexception
checkforclosedconnection
return getmetadatainfobooleanwithtype othersdeletesarevisible__  type
// stored procedure will return a string containing a
// comma seperated list of all the supported result set types
private final static int othersinsertsarevisible__   102
public boolean othersinsertsarevisible int type  throws sqlexception
checkforclosedconnection
return getmetadatainfobooleanwithtype othersinsertsarevisible__  type
// stored procedure will return a string containing a
// comma seperated list of all the supported result set types
private final static int updatesaredetected__   103
public boolean updatesaredetected int type  throws sqlexception
checkforclosedconnection
return getmetadatainfobooleanwithtype updatesaredetected__  type
// stored procedure will return a string containing a
// comma seperated list of all the supported result set types
private final static int deletesaredetected__   104
public boolean deletesaredetected int type  throws sqlexception
checkforclosedconnection
return getmetadatainfobooleanwithtype deletesaredetected__  type
// stored procedure will return a string containing a
// comma seperated list of all the supported result set types
private final static int insertsaredetected__   105
public boolean insertsaredetected int type  throws sqlexception
checkforclosedconnection
return getmetadatainfobooleanwithtype insertsaredetected__  type
private final static int supportsbatchupdates__   106
public boolean supportsbatchupdates   throws sqlexception
checkforclosedconnection
return getmetadatainfoboolean supportsbatchupdates__
public boolean supportssavepoints   throws sqlexception
checkforclosedconnection
if  productlevel_ greaterthanorequalto 5  2  0
return true
return false
// start tagging all abstract methods with an underscore like this !!
abstract public string geturl_   throws sqlexception
public string geturl   throws sqlexception
try
checkforclosedconnection
return geturl_
catch   sqlexception se
throw se getsqlexception
public string getusername   throws sqlexception
checkforclosedconnection
return connection_ user_
public boolean isreadonly   throws sqlexception
return false
public string getdatabaseproductname   throws sqlexception
checkforclosedconnection
return productlevel_ databaseproductname_
public string getdatabaseproductversion   throws sqlexception
checkforclosedconnection
return productlevel_ databaseproductversion_
public string getdrivername   throws sqlexception
checkforclosedconnection
return configuration dncdrivername
public string getdriverversion   throws sqlexception
checkforclosedconnection
return version getdriverversion
// jdbc signature also does not throw sqlexception, so we don't check for closed connection.
public int getdrivermajorversion
return version getmajorversion
// jdbc signature also does not throw sqlexception, so we don't check for closed connection.
public int getdriverminorversion
return version getminorversion
//all jdbc drivers must return false for this method. for this reason we choose
//to return false
public boolean supportsmixedcaseidentifiers   throws sqlexception
checkforclosedconnection
return false
public boolean supportsmixedcasequotedidentifiers   throws sqlexception
checkforclosedconnection
return true
public string getidentifierquotestring   throws sqlexception
checkforclosedconnection
return  "
public boolean supportscolumnaliasing   throws sqlexception
checkforclosedconnection
return true
public boolean nullplusnonnullisnull   throws sqlexception
checkforclosedconnection
return true
public boolean supportstablecorrelationnames   throws sqlexception
checkforclosedconnection
return true
public boolean supportslikeescapeclause   throws sqlexception
checkforclosedconnection
return true
public boolean supportsnonnullablecolumns   throws sqlexception
checkforclosedconnection
return true
public boolean supportsminimumsqlgrammar   throws sqlexception
checkforclosedconnection
return true
public boolean supportsansi92entrylevelsql   throws sqlexception
checkforclosedconnection
return true
public boolean supportssubqueriesinexists   throws sqlexception
checkforclosedconnection
return true
public boolean supportssubqueriesinins   throws sqlexception
checkforclosedconnection
return true
public boolean supportssubqueriesinquantifieds   throws sqlexception
checkforclosedconnection
return true
public boolean supportscorrelatedsubqueries   throws sqlexception
checkforclosedconnection
return true
//------------------------catalog query methods follow--------------------------------------------
// call stored procedure sqlprocedures
// sysibm.sqlprocedures(
//              catalogname varchar(128),
//              schemaname  varchar(128),
//              procname    varchar(128),
//              options     varchar(4000))
//
public java sql resultset getprocedures string catalog
string schemapattern
string procedurenamepattern  throws sqlexception
try
synchronized  connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     catalog  schemapattern  procedurenamepattern
return getproceduresx catalog  schemapattern  procedurenamepattern
catch   sqlexception se
throw se getsqlexception
private resultset getproceduresx string catalog
string schemapattern
string procedurenamepattern  throws sqlexception
checkforclosedconnectionx
preparedstatement cs   preparemetadataquery
cs setstringx 1  catalog
cs setstringx 2  schemapattern
cs setstringx 3  procedurenamepattern
cs setstringx 4  getoptions
return executecatalogquery cs
// call stored procedure sqlprocedurecols
// sysibm.sqlprocedurecols(
//              catalogname varchar(128),
//              schemaname  varchar(128),
//              procname    varchar(128),
//              paramname   varchar(128),
//              options     varchar(4000))
//
public java sql resultset getprocedurecolumns string catalog
string schemapattern
string procedurenamepattern
string columnnamepattern  throws sqlexception
try
synchronized  connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     catalog  schemapattern  procedurenamepattern  columnnamepattern
return getprocedurecolumnsx catalog  schemapattern  procedurenamepattern  columnnamepattern
catch   sqlexception se
throw se getsqlexception
private resultset getprocedurecolumnsx string catalog
string schemapattern
string procedurenamepattern
string columnnamepattern  throws sqlexception
checkforclosedconnectionx
preparedstatement cs   preparemetadataquery
cs setstringx 1  catalog
cs setstringx 2  schemapattern
cs setstringx 3  procedurenamepattern
cs setstringx 4  columnnamepattern
cs setstringx 5  getoptions
return executecatalogquery cs
/**
* get the function names available in the database.  calls stored
* procedure <code>sysibm.sqlfunctions(catalogname
* varchar(128), schemaname varchar(128), funcname varchar(128),
* options varchar(4000))</code> on the server. this procedure
* will in turn call
* <code>embeddatabasemetadata.getfunctions(string,string,string)</code><p>
* compatibility: only available if both server and client version
* > 10.1, and jdk version >= 1.6. older clients will not have
* this method available. newer clients will be able to call this
* method when connected to an older server, but this will be
* trigger an exception in
* <code>checkserverjdbcversionx()</code>. <p>upgrade:
* <code>sysibm.sqlfunctions</code> is added in
* <code>datadictionaryimpl.create_10_2_system_procedures
* (transactioncontroller,uuid)</code> so it will become available
* in newly created databases and after <b>hard</b> upgrade.
*
* @param catalog limit search to this catalog
* @param schemapattern limit search to schemas matching this pattern
* @param functionnamepattern limit search to functions matching this
* pattern
* @return a <code>resultset</code> listing the fucntions
* @exception sqlexception if a database error occurs
* @see #getfunctionsx(string, string, string)
* @see org.apache.derby.impl.sql.catalog.datadictionaryimpl#create_10_2_system_procedures(transactioncontroller,uuid)
* @see org.apache.derby.impl.jdbc.embeddatabasemetadata#getfunctions(string,string,string)
*/
public java sql resultset getfunctions string catalog
string schemapattern
string functionnamepattern
throws sqlexception
try
synchronized  connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this
catalog  schemapattern
functionnamepattern
return getfunctionsx catalog  schemapattern
functionnamepattern
catch  sqlexception se
throw se getsqlexception
/**
* untraced version of <code>getfunctions(string, string, string)</code>.
* @param catalog limit search to this catalog
* @param schemapattern limit search to schemas matching this pattern
* @param functionnamepattern limit search to functions matching this
* pattern
* @return a <code>resultset</code> listing the fucntions
* @exception sqlexception if a database error occurs
* @see #getfunctions(string, string, string)
*/
private resultset getfunctionsx string catalog
string schemapattern
string functionnamepattern
throws sqlexception
checkforclosedconnectionx
checkserverjdbcversionx    4  0
preparedstatement cs
preparemetadataquery
cs setstringx 1  catalog
cs setstringx 2  schemapattern
cs setstringx 3  functionnamepattern
cs setstringx 4  getoptions
return executecatalogquery cs
/**
* get the function names available in the database.  calls stored
* procedure <code>sysibm.sqlfunctionparams(catalogname
* varchar(128), schemaname varchar(128), funcname varchar(128),
* paramname varchar(128), options varchar(4000))</code> on the
* server. this procedure will in turn call
* <code>embeddatabasemetadata.getfunctioncolumns(string,string,
* string,string)</code><p> compatibility: only available if both
* server and client version > 10.1, and jdk version >= 1.6. older
* clients will not have this method available. newer clients will
* be able to call this method when connected to an older server,
* but this will be trigger an exception in
* <code>checkserverjdbcversionx()</code>. <p>upgrade:
* <code>sysibm.sqlfunctionparams</code> is added in
* <code>datadictionaryimpl.create_10_2_system_procedures
* (transactioncontroller,uuid)</code> so it will become available
* in newly created databases and after <b>hard</b> upgrade.
*
* @param catalog limit search to this catalog
* @param schemapattern limit search to schemas matching this pattern
* @param functionnamepattern limit search to functions matching this
* pattern
* @return a <code>resultset</code> listing the fucntions
* @exception sqlexception if a database error occurs
* @see #getfunctioncolumnsx(string, string, string,string)
* @see org.apache.derby.impl.sql.catalog.datadictionaryimpl#create_10_2_system_procedures(transactioncontroller,uuid)
* @see org.apache.derby.impl.jdbc.embeddatabasemetadata#getfunctions(string,string,string)
*/
public java sql resultset
getfunctioncolumns string catalog
string schemapattern
string functionnamepattern
string parameternamepattern
throws sqlexception
try
synchronized  connection_
if  agent_ loggingenabled
agent_ logwriter_
traceentry this
catalog  schemapattern
functionnamepattern  parameternamepattern
return getfunctioncolumnsx catalog  schemapattern
functionnamepattern
parameternamepattern
catch   sqlexception se
throw se getsqlexception
/**
* untraced version of <code>getfunctioncolumns(string, string,
* string, string)</code>.
* @param catalog limit search to this catalog
* @param schemapattern limit search to schemas matching this pattern
* @param functionnamepattern limit search to functions matching this
* pattern
* @param parameternamepattern limit search to parameters mathing
* this pattern
* @return a <code>resultset</code> listing the fucntions
* @exception sqlexception if a database error occurs
* @see #getfunctioncolumns(string, string, string, string)
*/
private resultset getfunctioncolumnsx string catalog
string schemapattern
string functionnamepattern
string parameternamepattern
throws sqlexception
checkforclosedconnectionx
checkserverjdbcversionx
4  0
preparedstatement cs
preparemetadataquery
cs setstringx 1  catalog
cs setstringx 2  schemapattern
cs setstringx 3  functionnamepattern
cs setstringx 4  parameternamepattern
cs setstringx 5  getoptions
return executecatalogquery cs
// call stored procedure sqltables
// sysibm.sqltables(
//              catalogname varchar(128),
//              schemaname  varchar(128),
//              tablename   varchar(128),
//              taletype    varchar(4000),
//              options     varchar(4000))
//
public java sql resultset gettables string catalog
string schemapattern
string tablenamepattern
string types  throws sqlexception
try
synchronized  connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     catalog  schemapattern  tablenamepattern  types
return gettablesx catalog  schemapattern  tablenamepattern  types
catch   sqlexception se
throw se getsqlexception
private resultset gettablesx string catalog
string schemapattern
string tablenamepattern
string types  throws sqlexception
try
checkforclosedconnection
catch   sqlexception se
throw new sqlexception se
preparedstatement cs   preparemetadataquery
if  catalog    null
cs setnullx 1  java sql types varchar
else
cs setstringx 1  catalog
if  schemapattern    null
cs setnullx 2  java sql types varchar
else
cs setstringx 2  schemapattern
if  tablenamepattern    null
cs setnullx 3  java sql types varchar
else
cs setstringx 3  tablenamepattern
string tabletypes   new string
int i   0
if  types    null
cs setnullx 4  java sql types varchar
else if  types length    1     types trim    equals
cs setstringx 4  types
else
while  i < types length
if  i > 0
tabletypes   tabletypes concat
tabletypes   tabletypes concat     types
i
cs setstringx 4  tabletypes
cs setstringx 5  getoptions
return executecatalogquery cs
// call stored procedure sqltables
// sysibm.sqltables(
//              catalogname varchar(128),
//              schemaname  varchar(128),
//              tablename   varchar(128),
//              taletype    varchar(4000),
//              options     varchar(4000))
//
public java sql resultset getschemas   throws sqlexception
try
synchronized  connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this
return getschemasx
catch   sqlexception se
throw se getsqlexception
private resultset getschemasx   throws sqlexception
try
checkforclosedconnection
catch   sqlexception se
throw new sqlexception se
preparedstatement cs   preparemetadataquery
return  resultset  cs executequeryx
// derby does not have the notion of a catalog, so we return a result set with no rows.
public java sql resultset getcatalogs   throws sqlexception
try
synchronized  connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this
return getcatalogsx
catch   sqlexception se
throw se getsqlexception
private resultset getcatalogsx   throws sqlexception
checkforclosedconnectionx
preparedstatement cs   preparemetadataquery
return  resultset  cs executequeryx
// call stored procedure sqltables
// sysibm.sqltables(
//              catalogname varchar(128),
//              schemaname  varchar(128),
//              tablename   varchar(128),
//              tabletype   varchar(4000),
//              options     varchar(4000))
public java sql resultset gettabletypes   throws sqlexception
try
synchronized  connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this
return gettabletypesx
catch   sqlexception se
throw se getsqlexception
private resultset gettabletypesx   throws sqlexception
checkforclosedconnectionx
preparedstatement cs   null
cs   preparemetadataquery
cs setstringx 1
cs setstringx 2
cs setstringx 3
cs setstringx 4
int cursorhold
if  connection_ holdability      jdbc30translation hold_cursors_over_commit
cursorhold   1
else
cursorhold   0
cs setstringx 5      cursorhold
return executecatalogquery cs
// call stored procedure sqlcolumns
// sysibm.sqlcolumns(
//              catalogname varchar(128),
//              schemaname  varchar(128),
//              tablename   varchar(128),
//              columnname  varchar(128),
//              options     varchar(4000))
//
public java sql resultset getcolumns string catalog
string schemapattern
string tablenamepattern
string columnnamepattern  throws sqlexception
try
synchronized  connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     catalog  schemapattern  tablenamepattern  columnnamepattern
checkforclosedconnection
return getcolumnsx catalog  schemapattern  tablenamepattern  columnnamepattern
catch   sqlexception se
throw se getsqlexception
private resultset getcolumnsx string catalog
string schemapattern
string tablenamepattern
string columnnamepattern  throws sqlexception
checkforclosedconnectionx
preparedstatement cs   preparemetadataquery
cs setstringx 1  catalog
cs setstringx 2  schemapattern
cs setstringx 3  tablenamepattern
cs setstringx 4  columnnamepattern     always null  for jdbc
cs setstringx 5  getoptions
return executecatalogquery cs
// call stored procedure sqlcolumnprivileges
// sysibm.sqlcolprivileges(
//              catalogname varchar(128),
//              schemaname  varchar(128),
//              tablename   varchar(128),
//              columnname  varchar(128),
//              options     varchar(4000))
//
public java sql resultset getcolumnprivileges string catalog
string schema
string table
string columnnamepattern  throws sqlexception
try
synchronized  connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     catalog  schema  table  columnnamepattern
return getcolumnprivilegesx catalog  schema  table  columnnamepattern
catch   sqlexception se
throw se getsqlexception
private resultset getcolumnprivilegesx string catalog
string schema
string table
string columnnamepattern  throws sqlexception
checkforclosedconnectionx
// check input params, table and columnnamepattern cannot be null
if  table    null
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate table_name_cannot_be_null
preparedstatement cs   preparemetadataquery
cs setstringx 1  catalog
cs setstringx 2  schema
cs setstringx 3  table
cs setstringx 4  columnnamepattern
cs setstringx 5  getoptions
return executecatalogquery cs
// call stored procedure sqltableprivileges
// sysibm.sqltableprivileges(
//              catalogname varchar(128),
//              schemaname  varchar(128),
//              tablename   varchar(128),
//              options     varchar(4000))
//
public java sql resultset gettableprivileges string catalog
string schemapattern
string tablenamepattern  throws sqlexception
try
synchronized  connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     catalog  schemapattern  tablenamepattern
return gettableprivilegesx catalog  schemapattern  tablenamepattern
catch   sqlexception se
throw se getsqlexception
private resultset gettableprivilegesx string catalog
string schemapattern
string tablenamepattern  throws sqlexception
checkforclosedconnectionx
preparedstatement cs   preparemetadataquery
cs setstringx 1  catalog
cs setstringx 2  schemapattern
cs setstringx 3  tablenamepattern
cs setstringx 4  getoptions
return executecatalogquery cs
// call stored procedure
// sysibm.sqlspecialcolumns ( in coltype smallint,
//                            in catalog_name varchar(128),
//                            in schema_name  varchar(128),
//                            in table_name   varchar(128),
//                            in scope        smallint,
//                            in nullable     smallint,
//                            in options      varchar(4000) )
//
public java sql resultset getbestrowidentifier string catalog
string schema
string table
int scope
boolean nullable  throws sqlexception
try
synchronized  connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     catalog  schema  table  scope  nullable
return getbestrowidentifierx catalog  schema  table  scope  nullable
catch   sqlexception se
throw se getsqlexception
private resultset getbestrowidentifierx string catalog
string schema
string table
int scope
boolean nullable  throws sqlexception
checkforclosedconnectionx
// check input params
//
// validate input table, which can not be null
if  table    null
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate table_name_cannot_be_null
preparedstatement cs   preparemetadataquery
cs setintx 1  sql_best_rowid
cs setstringx 2  catalog
cs setstringx 3  schema
cs setstringx 4  table
cs setintx 5  scope
if  nullable
cs setshortx 6   short  1
else
cs setshortx 6   short  0
cs setstringx 7  getoptions
return executecatalogquery cs
public java sql resultset getversioncolumns string catalog
string schema
string table  throws sqlexception
try
synchronized  connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     catalog  schema  table
return getversioncolumnsx catalog  schema  table
catch   sqlexception se
throw se getsqlexception
private resultset getversioncolumnsx string catalog
string schema
string table  throws sqlexception
checkforclosedconnectionx
// validate input table, which can not be null
if  table    null
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate table_name_cannot_be_null
preparedstatement cs   preparemetadataquery
cs setintx 1  sql_rowver
cs setstringx 2  catalog
cs setstringx 3  schema
cs setstringx 4  table
cs setintx 5  0
cs setshortx 6   short  0
cs setstringx 7  getoptions
return executecatalogquery cs
// call stored procedure sqlprimarykeys
// sysibm.sqlprimarykeys(
//              catalogname varchar(128),
//              schemaname  varchar(128),
//              tablename   varchar(128),
//              options     varchar(4000))
//
public java sql resultset getprimarykeys string catalog
string schema
string table  throws sqlexception
try
synchronized  connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     catalog  schema  table
return getprimarykeysx catalog  schema  table
catch   sqlexception se
throw se getsqlexception
private resultset getprimarykeysx string catalog
string schema
string table  throws sqlexception
checkforclosedconnectionx
// validate the input table name
if  table    null
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate table_name_cannot_be_null
preparedstatement cs   preparemetadataquery
cs setstringx 1  catalog
cs setstringx 2  schema
cs setstringx 3  table
cs setstringx 4  getoptions
return executecatalogquery cs
// call storlastgetprimarykeysresultset_ed procedure sqlforeignkeys
// sysibm.sqlforeignkeys(
//              pkcatalogname varchar(128),
//              pkschemaname  varchar(128),
//              pktablename   varchar(128),
//              fkcatalogname varchar(128),
//              fkschemaname  varchar(128),
//              fktablename   varchar(128),
//              options       varchar(4000))
//
public java sql resultset getimportedkeys string catalog
string schema
string table  throws sqlexception
try
synchronized  connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     catalog  schema  table
return getimportedkeysx catalog  schema  table
catch   sqlexception se
throw se getsqlexception
private resultset getimportedkeysx string catalog
string schema
string table  throws sqlexception
checkforclosedconnectionx
preparedstatement cs   preparemetadataquery
cs setstringx 1
cs setstringx 2  null
cs setstringx 3
cs setstringx 4  catalog
cs setstringx 5  schema
cs setstringx 6  table
// we're passing the keyword exportedkey, but this support may not be in the ga version of sps.
// as a workaround in getcrossreference(), we'll just "select * where 0=1" when primarytable==""
if  connection_ holdability      jdbc30translation hold_cursors_over_commit
cs setstringx 7
else
cs setstringx 7
return executecatalogquery cs
// call stored procedure sqlforeignkeys
// sysibm.sqlforeignkeys(
//              pkcatalogname varchar(128),
//              pkschemaname  varchar(128),
//              pktablename   varchar(128),
//              fkcatalogname varchar(128),
//              fkschemaname  varchar(128),
//              fktablename   varchar(128),
//              options       varchar(4000))
//
public java sql resultset getexportedkeys string catalog
string schema
string table  throws sqlexception
try
synchronized  connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     catalog  schema  table
return getexportedkeysx catalog  schema  table
catch   sqlexception se
throw se getsqlexception
private resultset getexportedkeysx string catalog
string schema
string table  throws sqlexception
checkforclosedconnectionx
preparedstatement cs   preparemetadataquery
cs setstringx 1  catalog
cs setstringx 2  schema
cs setstringx 3  table
cs setstringx 4
cs setstringx 5  null
cs setstringx 6
// we're passing the keyword exportedkey, but this support may not be in the ga version of sps.
// as a workaround in getcrossreference(), we'll just "select * where 0=1" when foreigntable==""
if  connection_ holdability      jdbc30translation hold_cursors_over_commit
cs setstringx 7
else
cs setstringx 7
return executecatalogquery cs
// call stored procedure sqlforeignkeys
// sysibm.sqlforeignkeys(
//              pkcatalogname varchar(128),
//              pkschemaname  varchar(128),
//              pktablename   varchar(128),
//              fkcatalogname varchar(128),
//              fkschemaname  varchar(128),
//              fktablename   varchar(128),
//              options       varchar(4000))
//
public java sql resultset getcrossreference string primarycatalog
string primaryschema
string primarytable
string foreigncatalog
string foreignschema
string foreigntable  throws sqlexception
try
synchronized  connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     primarycatalog  primaryschema  primarytable  foreigncatalog  foreignschema  foreigntable
return getcrossreferencex primarycatalog  primaryschema  primarytable
foreigncatalog  foreignschema  foreigntable
catch   sqlexception se
throw se getsqlexception
private resultset getcrossreferencex string primarycatalog
string primaryschema
string primarytable
string foreigncatalog
string foreignschema
string foreigntable  throws sqlexception
checkforclosedconnectionx
// check input params, primarytable and foreigntable cannot be null
if  primarytable    null
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate primary_table_name_is_null
if  foreigntable    null
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate foreign_table_name_is_null
preparedstatement cs   preparemetadataquery
cs setstringx 1  primarycatalog
cs setstringx 2  primaryschema
cs setstringx 3  primarytable
cs setstringx 4  foreigncatalog
cs setstringx 5  foreignschema
cs setstringx 6  foreigntable
cs setstringx 7  getoptions
return executecatalogquery cs
// call stored procedure sqlgettypeinfo
// sysibm.sqlgettypeinfo (in datatype smallint,
//                        in options varchar(4000))
//
//
public java sql resultset gettypeinfo   throws sqlexception
try
synchronized  connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this
return gettypeinfox
catch   sqlexception se
throw se getsqlexception
private resultset gettypeinfox   throws sqlexception
checkforclosedconnectionx
// check if the last call's resultset is closed or not.
preparedstatement cs   preparemetadataquery
cs setshortx 1   short  0
cs setstringx 2  getoptions
return executecatalogquery cs
// call stored procedure sqlstatistics
// sysibm.sqlstatistics(
//              catalogname varchar(128),
//              schemaname  varchar(128),
//              tablename   varchar(128),
//              unique      smallint,
//              reserved    smallint,
//              options     varchar(4000))
//
public java sql resultset getindexinfo string catalog
string schema
string table
boolean unique
boolean approximate  throws sqlexception
try
synchronized  connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     catalog  schema  table  unique  approximate
return getindexinfox catalog  schema  table  unique  approximate
catch   sqlexception se
throw se getsqlexception
private resultset getindexinfox string catalog
string schema
string table
boolean unique
boolean approximate  throws sqlexception
checkforclosedconnectionx
// validate the input table name
if  table    null
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate table_name_cannot_be_null
preparedstatement cs   preparemetadataquery
cs setstringx 1  catalog
cs setstringx 2  schema
cs setstringx 3  table
if  unique
cs setshortx 4  sql_index_unique
else
cs setshortx 4  sql_index_all
if  approximate
cs setshortx 5   short  1
else
cs setshortx 5   short  0
cs setstringx 6  getoptions
return executecatalogquery cs
//--------------------------jdbc 2.0-----------------------------
public java sql resultset getudts string catalog
string schemapattern
string typenamepattern
int types  throws sqlexception
try
synchronized  connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     catalog  schemapattern  typenamepattern  types
return getudtsx catalog  schemapattern  typenamepattern  types
catch   sqlexception se
throw se getsqlexception
private resultset getudtsx string catalog
string schemapattern
string typenamepattern
int types  throws sqlexception
checkforclosedconnectionx
preparedstatement cs   preparemetadataquery
cs setstringx 1  catalog
cs setstringx 2  schemapattern
cs setstringx 3  typenamepattern
int i   0
string udttypes   new string
while  types    null    i < types length
if  i > 0
udttypes   udttypes concat
udttypes   udttypes concat string valueof types
i
cs setstringx 4  udttypes
cs setstringx 5  getoptions
return executecatalogquery cs
// helper method for the catalog queries only
private string getoptions
int cursorhold
if  connection_ holdability      jdbc30translation hold_cursors_over_commit
cursorhold   1
else
cursorhold   0
return     cursorhold
// derby uses a preparedstatement argument rather than a callable statement
private resultset executecatalogquery preparedstatement cs
throws sqlexception
try
return cs executequeryx
catch  sqlexception e
if  e geterrorcode       440
sqlexception newexception   new sqlexception agent_ logwriter_
new clientmessageid sqlstate stored_proc_not_installed
newexception setnextexception e
throw newexception
else if  e geterrorcode       444
sqlexception newexception   new sqlexception agent_ logwriter_
new clientmessageid sqlstate stored_proc_load_module_not_found
newexception setnextexception e
throw newexception
else
throw e
public java sql connection getconnection   throws sqlexception
checkforclosedconnection
return connection_
// ------------------- jdbc 3.0 -------------------------
public boolean supportsnamedparameters   throws sqlexception
checkforclosedconnection
return false
public boolean supportsmultipleopenresults   throws sqlexception
checkforclosedconnection
return true
public boolean supportsgetgeneratedkeys   throws sqlexception
checkforclosedconnection
return false
public java sql resultset getsupertypes string catalog
string schemapattern
string typenamepattern  throws sqlexception
try
synchronized  connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     catalog  schemapattern  typenamepattern
return getsupertypesx
catch   sqlexception se
throw se getsqlexception
private resultset getsupertypesx   throws sqlexception
checkforclosedconnectionx
string sql
preparedstatement ps   connection_ preparedynamiccatalogquery sql
return ps executequeryx
public java sql resultset getsupertables string catalog
string schemapattern
string tablenamepattern  throws sqlexception
try
synchronized  connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     catalog  schemapattern  tablenamepattern
return getsupertablesx
catch   sqlexception se
throw se getsqlexception
private resultset getsupertablesx   throws sqlexception
checkforclosedconnectionx
java lang string sql
preparedstatement ps   connection_ preparedynamiccatalogquery sql
return ps executequeryx
public java sql resultset getattributes string catalog
string schemapattern
string typenamepattern
string attributenamepattern  throws sqlexception
try
synchronized  connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this     catalog  schemapattern  typenamepattern  attributenamepattern
return getattributesx
catch   sqlexception se
throw se getsqlexception
private resultset getattributesx   throws sqlexception
checkforclosedconnectionx
java lang string sql
preparedstatement ps   connection_ preparedynamiccatalogquery sql
return ps executequeryx
public boolean supportsresultsetholdability int holdability  throws sqlexception
checkforclosedconnection
return true
public int getresultsetholdability   throws sqlexception
checkforclosedconnection
return java sql resultset hold_cursors_over_commit
public int getdatabasemajorversion   throws sqlexception
checkforclosedconnection
return productlevel_ versionlevel_
public int getdatabaseminorversion   throws sqlexception
checkforclosedconnection
return productlevel_ releaselevel_
public int getjdbcmajorversion   throws sqlexception
checkforclosedconnection
return 3
public int getjdbcminorversion   throws sqlexception
checkforclosedconnection
return 0
public int getsqlstatetype   throws sqlexception
checkforclosedconnection
return sqlstatesql99
public boolean locatorsupdatecopy   throws sqlexception
checkforclosedconnection
return false
public boolean supportsstatementpooling   throws sqlexception
checkforclosedconnection
return false
//--------------------abstract material layer call-down methods-----------------
// compute feature set based on release
abstract protected void computefeatureset_
//------------helper methods for meta data info call methods------------------
private boolean getmetadatainfoboolean int infocallindex  throws sqlexception
try
if  metadatainfoiscached_
return   integer  metadatainfocache_  intvalue      0
metadatainfocall
return   integer  metadatainfocache_  intvalue      0
catch   sqlexception se
throw se getsqlexception
private int getmetadatainfoint int infocallindex  throws sqlexception
try
if  metadatainfoiscached_
return   integer  metadatainfocache_  intvalue
metadatainfocall
return   integer  metadatainfocache_  intvalue
catch   sqlexception se
throw se getsqlexception
private string getmetadatainfostring int infocallindex  throws sqlexception
try
if  metadatainfoiscached_
return  string  metadatainfocache_
metadatainfocall
return  string  metadatainfocache_
catch   sqlexception se
throw se getsqlexception
private boolean getmetadatainfobooleanwithtype int infocallindex  int type
throws sqlexception
boolean clientvalue
getmetadatainfobooleanwithtypeclient infocallindex  type
// derby-1252. in derby <= 10.x, clients (incl jcc) do not have
// logic to negotiate down these values with the server, so
// for features introduced with 10.x, x >= 2 (e.g. sur
// derby-775, in 10.2), the server will return 10.0 values for
// any version 10.x so as not to break existing apps running
// an older 10 client (e.g. 10.1 client for derby-775).
// reciprocally, this means clients at 10.x, where x => 2,
// must disregard the server's (too conservative) answers for
// these features, see logic in
// getmetadatainfobooleanwithtypeclient.
//
// for derby >= 11, the down-negotiation code below which is
// presently commented out should be activated, and the values
// returned from the server should once more reflect reality.
// commented out till we hit derby 11:
//
//     boolean servervalue =
//         getmetadatainfobooleanwithtypeserver(infocallindex, type);
//
//     return clientvalue && servervalue;
return clientvalue
// client's view of boolean metadata.
//
// for values which depend on (added) functionality in *both* the
// client and the server, the client should have its own view of
// all such values here.  for other values, it can defer to the
// server. this is a prerequisite for negotiating down in a mixed
// client/server context. note that metadata negotiation should
// mirror the similar negotiation for use of the feature itself,
// for example, for scrollable updatable result sets of type
// insensitive, the server will downgrade to read-only if it is
// older than 10.2.
//
// see also comments in getmetadatainfobooleanwithtype and
// engine/org/apache/derby/impl/sql/catalog/metadata_net.properties.
//
private boolean getmetadatainfobooleanwithtypeclient int infocallindex
int type
throws sqlexception
switch  infocallindex
case updatesaredetected__
case deletesaredetected__
case ownupdatesarevisible__
case owndeletesarevisible__
if  productlevel_ greaterthanorequalto 10 2 0
type    resultset type_scroll_insensitive
return true
else
return getmetadatainfobooleanwithtypeserver infocallindex
type
case insertsaredetected__
case owninsertsarevisible__
if  productlevel_ greaterthanorequalto 10 2 0
type    resultset type_scroll_insensitive
return false
else
return getmetadatainfobooleanwithtypeserver infocallindex
type
default
return getmetadatainfobooleanwithtypeserver infocallindex
type
private boolean getmetadatainfobooleanwithtypeserver int infocallindex
int type
throws sqlexception
// stored procedure will return a string containing a
// comma seperated list of all the supported result set types
// not throwing any exception right now even if the the type is wrong as per the spec
try
string returnedfromsp   null
if  metadatainfoiscached_
returnedfromsp    string  metadatainfocache_
else
metadatainfocall
returnedfromsp    string  metadatainfocache_
java util stringtokenizer st   new java util stringtokenizer returnedfromsp
while  st hasmoretokens
if   new integer st nexttoken     intvalue      type
return true
return false
catch   sqlexception se
throw se getsqlexception
private boolean getmetadatainfoint_supportsresultsetconcurrency int infocallindex  int type  int concurrency  throws sqlexception
// the stored procured will return a string containing a list
// of lists: for each result set type in the outer list, an
// inner list gives the allowed concurrencies for that type:
// the encoding syntax is reproduced here from the server file
// 'metadata_net.properties (please keep in synch!):
//
// string syntax:
// <type> { "," <concurrency>}* { ";" <type> { "," <concurrency>}* }}*
//
// <type> ::= <the integer value for that type from interface java.sql.resultset
//             i.e. type_forward_only is 1003>
// <concurrency> ::= <the integer value for that concurrency
//                    from interface java.sql.resultset, i.e.
//                    concur_updatable is 1008>
try
string returnedfromsp   null
if  metadatainfoiscached_
returnedfromsp    string  metadatainfocache_
else
metadatainfocall
returnedfromsp    string  metadatainfocache_
java util stringtokenizer st   new java util stringtokenizer returnedfromsp
while  st hasmoretokens
java util stringtokenizer stforconc
new java util stringtokenizer st nexttoken
if   new integer stforconc nexttoken     intvalue      type
while  stforconc hasmoretokens
if   new integer stforconc nexttoken     intvalue      concurrency
return true
return false
return false
catch   sqlexception se
throw se getsqlexception
private boolean getmetadatainfoboolean_supportsconvert int infocallindex  int fromtype  int totype  throws sqlexception
// the stored procedure will return a string contain a list of all the valid conversions it support
// for eg. if the database conversion from char(1) to date(91), time(92) and
// decimal(3) to char(1) ,double(8)
// then storedprocedure string will return "1,91,92;3,1,8"
// see how fromtypes are seperated by ";"
try
string returnedfromsp   null
if  metadatainfoiscached_
returnedfromsp    string  metadatainfocache_
else
metadatainfocall
returnedfromsp    string  metadatainfocache_
java util stringtokenizer st   new java util stringtokenizer returnedfromsp
while  st hasmoretokens
java util stringtokenizer stfortype   new java util stringtokenizer st nexttoken
if   new integer stfortype nexttoken     intvalue      fromtype
while  st hasmoretokens
if   new integer st nexttoken     intvalue      totype
return true
return false
return false
catch   sqlexception se
throw se getsqlexception
// we synchronize at this level so that we don't have to synchronize all
// the meta data info methods.  if we just return hardwired answers we don't
// need to synchronize at the higher level.
private void metadatainfocall   throws sqlexception
synchronized  connection_
resultset rs
// these remote calls return a result set containing a single row.
// each column in the row corresponds to a particular get meta data info
// method.
preparedstatement ps   preparemetadataquery
rs    resultset  ps executequeryx
rs nextx
int columncount
try
columncount     columnmetadata  rs getmetadatax    getcolumncount
catch   sqlexception se
throw new sqlexception se
for  int infocallindex   0
infocallindex < columncount    infocallindex < metadatainfocache_ length
infocallindex
metadatainfocache_   rs getobjectx infocallindex   1
metadatainfoiscached_   true
rs closex
// ------------------- jdbc 4.0 -------------------------
/**
* retrieves whether this database supports invoking user-defined
* or vendor functions using the stored procedure escape syntax.
*
* @return <code>true</code>, since derby supports the escape syntax
* @exception sqlexception if a database access error occurs
*/
public final boolean supportsstoredfunctionsusingcallsyntax
throws sqlexception
checkforclosedconnection
return true
/**
* retrieves whether an <code>sqlexception</code> will cause all
* open <code>resultset</code>s to be closed when auto-commit is
* <code>true</code>.
*
* @return <code>false</code>, since derby does not close all open
* result sets when an error occurs
* @exception sqlexception if a database access error occurs
*/
public final boolean autocommitfailureclosesallresultsets
throws sqlexception
checkforclosedconnection
return false
/**
* retrieves whether this jdbc driver provides its own
* <code>queryobjectgenerator</code>.
*
* @return <code>false</code>, since derby does not provide its
* own generator
* @exception sqlexception if a database access error occurs
*/
public final boolean providesqueryobjectgenerator   throws sqlexception
checkforclosedconnection
return false
/**
* get the schema names available in this database. the results
* are ordered by schema name.
*
* <p>the schema columns are:
*  <ol>
*  <li><strong>table_schem</strong> string =&gt; schema name</li>
*  <li><strong>table_catalog</strong> string =&gt; catalog name
*  (may be <code>null</code>)</li>
*  </ol>
*
* @param catalog catalog name used to narrow down the search; ""
* means no catalog, <code>null</code> means any catalog
* @param schemapattern schema name used to narrow down the
* search, <code>null</code> means schema name should not be used
* to narrow down search
* @return a <code>resultset</code> object in which each row is a
* schema description
* @exception sqlexception if a database error occurs
*/
public resultset getschemas string catalog  string schemapattern
throws sqlexception
try
synchronized  connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this
return getschemasx catalog  schemapattern
catch  sqlexception se
throw se getsqlexception
/**
* untraced version of <code>getschemas(string, string)</code>.
*
* @param catalog catalog name
* @param schemapattern pattern for schema name
* @return a <code>resultset</code> value
* @exception sqlexception if a database error occurs
* @see #getschemas(string, string)
*/
private resultset getschemasx string catalog  string schemapattern
throws sqlexception
checkforclosedconnectionx
// if the server has not implemented support for jdbc 4.0,
// sysibm.sqltables does not recognize the getschemas=2
// option, and it will call gettables() instead of
// getschemas(). therefore, check server version and throw an
// exception if the server does not support jdbc 4.0.
checkserverjdbcversionx    4  0
string call
preparedstatement cs   preparemetadataquery call
if  catalog    null
cs setnullx 1  java sql types varchar
else
cs setstringx 1  catalog
if  schemapattern    null
cs setnullx 2  java sql types varchar
else
cs setstringx 2  schemapattern
return cs executequeryx
/**
* returns a list of the client info properties supported by the
* driver. the result set contains the following columns:
*
* <p>
* <ol>
*  <li>name string=&gt; the name of the client info property.</li>
*  <li>max_len int=&gt; the maximum length of the value for the
*      property.</li>
*  <li>default_value string=&gt; the default value of the property.</li>
*  <li>description string=&gt; a description of the property.</li>
* </ol>
*
* <p>the <code>resultset</code> is sorted by the name column.
*
* @return a <code>resultset</code> object; each row is a
* supported client info property
* @exception sqlexception if an error occurs
*/
public resultset getclientinfoproperties   throws sqlexception
try
synchronized  connection_
if  agent_ loggingenabled
agent_ logwriter_ traceentry this
return getclientinfopropertiesx
catch  sqlexception se
throw se getsqlexception
/**
* untraced version of <code>getclientinfoproperties()</code>.
* returns an empty <code>resultset</code> with the correct column
* names.
*
* @return a <code>resultset</code> value
* @exception sqlexception if a database error occurs
* @see #getclientinfoproperties
*/
private resultset getclientinfopropertiesx   throws sqlexception
checkforclosedconnectionx
final string sql
preparedstatement ps   connection_ preparedynamiccatalogquery sql
return ps executequeryx
//----------------------------helper methods----------------------------------
private preparedstatement preparemetadataquery string cmd  throws sqlexception
preparedstatement ps
ps    org apache derby client am preparedstatement
connection_ preparestatementx     cmd
java sql resultset type_forward_only
java sql resultset concur_read_only
connection_ holdability
java sql statement no_generated_keys

return ps
/**
* a "public" version of checkforclosedconnection() that throws
* sqlexception instead of sqlexception.  in particular this is used
* by all the databasemetadata methods
*/
protected void checkforclosedconnection   throws sqlexception
try
checkforclosedconnectionx
catch   sqlexception se
throw se getsqlexception
private void checkforclosedconnectionx   throws sqlexception
if  connection_ isclosedx
agent_ checkfordeferredexceptions
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate no_current_connection
else
agent_ checkfordeferredexceptions
/**
* checks whether the server supports a jdbc version. if the
* server does not support the jdbc version, an exception is
* thrown.
*
* @param method name of the method for which support is needed on
* the server (used in exception message)
* @param major minimum jdbc major version
* @param minor minimum jdbc minor version if major version matches
* @exception sqlexception if the server does not support the
* specified jdbc version
*/
protected void checkserverjdbcversionx string method  int major  int minor
throws sqlexception
if  serverjdbcmajorversion < major
serverjdbcmajorversion    major
serverjdbcminorversion < minor
throw new sqlexception agent_ logwriter_
new clientmessageid sqlstate jdbc_method_not_supported_by_server   method