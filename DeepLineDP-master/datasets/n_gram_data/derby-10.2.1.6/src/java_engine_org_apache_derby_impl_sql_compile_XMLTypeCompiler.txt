/*
derby - class org.apache.derby.impl.sql.compile.xmltypecompiler
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl sql compile
import org apache derby iapi services loader classfactory
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi services io storedformatids
import org apache derby iapi sql compile typecompiler
import org apache derby iapi error standardexception
import org apache derby iapi types typeid
import org apache derby iapi types datatypedescriptor
import org apache derby iapi reference classname
/**
* this class implements typecompiler for the xml type.
*/
public class xmltypecompiler extends basetypecompiler
/**
* tell whether this type (xml) can be compared to the given type.
* says sql/xml[2003] spec:
*
* 4.2.2 xml comparison and assignment
* "xml values are not comparable."
*
* @param othertype the typeid of the other type.
*/
public boolean comparable typeid othertype
boolean forequals
classfactory cs
// an xml value cannot be compared to any type--
// not even to other xml values.
return false
/**
* tell whether this type (xml) can be converted to the given type.
*
* an xml value can't be converted to any other type, per
* sql/xml[2003] 6.3 <cast specification>
*
* @see typecompiler#convertible
*/
public boolean convertible typeid othertype
boolean fordatatypefunction
// an xml value cannot be converted to any non-xml type.  if
// user wants to convert an xml value to a string, then
// s/he must use the provided sql/xml serialization operator
// (namely, xmlserialize).
return othertype isxmltypeid
/**
* tell whether this type (xml) is compatible with the given type.
*
* @param othertype the typeid of the other type.
*/
public boolean compatible typeid othertype
// an xml value is not compatible (i.e. cannot be "coalesced")
// into any non-xml type.
return othertype isxmltypeid
/**
* tell whether this type (xml) can be stored into from the given type.
* only xml values can be stored into an xml type, per sql/xml spec:
*
* 4.2.2 xml comparison and assignment
* values of xml type are assignable to sites of xml type.
*
* @param othertype the typeid of the other type.
* @param cf a classfactory
*/
public boolean storable typeid othertype  classfactory cf
// the only type of value that can be stored as xml
// is an xml value.  strings are not allowed.  if
// the user wants to store a string value as xml,
// s/he must use the provided xml parse operator
// (namely, xmlparse) to parse the string into
// xml.
return othertype isxmltypeid
/**
* @see typecompiler#interfacename
*/
public string interfacename
return classname xmldatavalue
/**
* @see typecompiler#getcorrespondingprimitivetypename
*/
public string getcorrespondingprimitivetypename
int formatid   getstoredformatidfromtypeid
if  formatid    storedformatids xml_type_id
return
if  sanitymanager debug
sanitymanager throwassert
formatid
return null
/**
* @see typecompiler#getcasttocharwidth
*
* while it is true xml values can't be cast to char, this method
* can get called before we finish type checking--so we return a dummy
* value here and let the type check throw the appropriate error.
*/
public int getcasttocharwidth datatypedescriptor dts
return  1
/**
* @see basetypecompiler#nullmethodname
*/
protected string nullmethodname
int formatid   getstoredformatidfromtypeid
if  formatid    storedformatids xml_type_id
return
if  sanitymanager debug
sanitymanager throwassert
formatid
return null
/**
* @see basetypecompiler#datavaluemethodname
*/
protected string datavaluemethodname
int formatid   getstoredformatidfromtypeid
if  formatid    storedformatids xml_type_id
return
if  sanitymanager debug
sanitymanager throwassert
formatid
return null