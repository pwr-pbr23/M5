/*
derby - class org.apache.derby.impl.services.locks.lock
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl services locks
import org apache derby iapi services locks lockable
import org apache derby iapi services locks latch
import org apache derby iapi services sanity sanitymanager
import java util list
/**
a lock represents a granted or waiting lock request.
<br>
mt - mutable - immutable identity : thread aware
*/
public class lock implements latch  control
/**
compatibility space the object is locked in.
mt - immutable - reference only
*/
private final object	space
/**
object being locked.
mt - immutable - reference only
*/
private final lockable	ref
/**
qualifier used in the lock request..
mt - immutable - reference only
*/
private final object	qualifier
int count
protected lock object space  lockable ref  object qualifier
super
this space   space
this ref   ref
this qualifier   qualifier
/**
return the object this lock is held on
mt - thread safe
*/
public final lockable getlockable
return ref
/**
return the compatability space this lock is held in
mt - thread safe
*/
public final object getcompatabilityspace
return space
/**
return the qualifier lock was obtained with.
mt - thread safe
*/
public final object getqualifier
return qualifier
/**
return the count of locks.
mt - thread safe
*/
public final int getcount
return count
// make a copy of this lock with the count set to zero, copies are only
// to be used in the lockspace code.
final lock copy
return new lock space  ref  qualifier
void grant
count
// tell the object it has been locked by this type of qualifier.
ref lockevent this
int unlock int unlockcount
if  unlockcount > count
unlockcount   count
count    unlockcount
if  count    0
// inform the object an unlock event occured with this qualifier
ref unlockevent this
return unlockcount
/*
** methods of object
*/
public final int hashcode
// qualifier can be null so don't use it in hashcode
return ref hashcode   ^ space hashcode
public final boolean equals object other
if  other instanceof lock
lock ol    lock  other
return  space equals ol space      ref equals ol ref      qualifier    ol qualifier
return false
/*
** methods of control
*/
public lockcontrol getlockcontrol
return new lockcontrol this  ref
public lock getlock object compatabilityspace  object qualifier
if  space equals compatabilityspace      this qualifier    qualifier
return this
return null
//exclude-start-lockdiag-
/**
we can return ourselves here because our identity
is immutable and what we returned will not be accessed
as a lock, so the count cannot be changed.
*/
public control shallowclone
return this
//exclude-end-lockdiag-
public activelock firstwaiter
return null
public boolean isempty
return count    0
public boolean unlock latch lockingroup  int unlockcount
if  unlockcount    0
unlockcount   lockingroup getcount
if  sanitymanager debug
if  unlockcount > getcount
sanitymanager throwassert this       unlockcount       getcount
if   equals lockingroup
sanitymanager throwassert this       lockingroup
unlock unlockcount
return false
public void addwaiters java util dictionary waiters
public lock getfirstgrant
return this
public list getgranted
return null
public list getwaiting
return null
public boolean isgrantable boolean nowaitersbeforeme  object compatabilityspace  object  requestqualifier
boolean samespace   space equals compatabilityspace
if  samespace    ref lockeralwayscompatible
return true
return ref requestcompatible requestqualifier  this qualifier