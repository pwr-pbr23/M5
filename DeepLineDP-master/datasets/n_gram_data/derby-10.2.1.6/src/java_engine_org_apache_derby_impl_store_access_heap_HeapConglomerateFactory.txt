/*
derby - class org.apache.derby.impl.store.access.heap.heapconglomeratefactory
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl store access heap
import org apache derby iapi reference sqlstate
import org apache derby iapi services io formatablebitset
import org apache derby iapi services monitor modulecontrol
import org apache derby iapi services monitor modulesupportable
import org apache derby iapi services monitor monitor
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi services io formatidutil
import org apache derby iapi error standardexception
import org apache derby iapi store access conglomerate conglomerate
import org apache derby iapi store access conglomerate conglomeratefactory
import org apache derby iapi store access conglomerate methodfactory
import org apache derby iapi store access conglomerate transactionmanager
import org apache derby iapi store access accessfactory
import org apache derby iapi store access columnordering
import org apache derby iapi store access conglomeratecontroller
import org apache derby iapi store access qualifier
import org apache derby iapi store raw containerhandle
import org apache derby iapi store raw fetchdescriptor
import org apache derby iapi store raw containerkey
import org apache derby iapi store raw lockingpolicy
import org apache derby iapi store raw page
import org apache derby iapi store raw recordhandle
import org apache derby iapi store raw transaction
import org apache derby iapi types datavaluedescriptor
import org apache derby iapi services uuid uuidfactory
import org apache derby catalog uuid
import java util properties
/**
the heap conglomerate factory manages heap conglomerates implemented
on the raw store.
**/
public class heapconglomeratefactory implements conglomeratefactory  modulecontrol  modulesupportable
// resolve (mikem) (sto062)
// the heap implementation id should be "heap table".
private static final string implementationid
private static final string formatuuidstring
private uuid formatuuid
/*
* methods of methodfactory (via conglomeratefactory)
*/
/**
return the default properties for this kind of conglomerate.
@see methodfactory#defaultproperties
**/
public properties defaultproperties
// heap has no properties.
return new properties
/**
return whether this access method implements the implementation
type given in the argument string.
the heap only has one implementation type, "heap".
@see methodfactory#supportsimplementation
**/
public boolean supportsimplementation string implementationid
return implementationid equals implementationid
/**
return the primary implementation type for this access method.
the heap only has one implementation type, "heap".
@see methodfactory#primaryimplementationtype
**/
public string primaryimplementationtype
return implementationid
/**
return whether this access method supports the format supplied in
the argument.
the heap currently only supports one format, heapformat1.
@see methodfactory#supportsformat
**/
public boolean supportsformat uuid formatid
return formatid equals formatuuid
/**
return the primary format that this access method supports.
the heap currently only supports one format, heapformat1.
@see methodfactory#primaryformat
**/
public uuid primaryformat
return formatuuid
/*
** methods of conglomeratefactory
*/
/**
* return the conglomerate factory id.
* <p>
* return a number in the range of 0-15 which identifies this factory.
* code which names conglomerates depends on this range currently, but
* could be easily changed to handle larger ranges.   one hex digit seemed
* reasonable for the number of conglomerate types being currently
* considered (heap, btree, gist, gist btree, gist rtree, hash, others? ).
* <p>
* @see conglomeratefactory#getconglomeratefactoryid
*
* @return an unique identifier used to the factory into the conglomid.
*
**/
public int getconglomeratefactoryid
return conglomeratefactory heap_factory_id
/**
create the conglomerate and return a conglomerate object for it.
@exception standardexception standard exception policy.
@see conglomeratefactory#createconglomerate
**/
public conglomerate createconglomerate
transactionmanager      xact_mgr
int                     segment
long                    input_containerid
datavaluedescriptor   template
columnordering        columnorder     only meant for btree type congloms
properties              properties
int                     temporaryflag
throws standardexception
//parent.register(heap);
heap heap   new heap
heap create
xact_mgr getrawstorexact    segment  input_containerid
template  properties  temporaryflag
return heap
/**
* return conglomerate object for conglomerate with container_key.
* <p>
* return the conglomerate object.  this is implementation specific.
* examples of what will be done is using the key to find the file where
* the conglomerate is located, and then executing implementation specific
* code to instantiate an object from reading a "special" row from a
* known location in the file.  in the btree case the btree conglomerate
* is stored as a column in the control row on the root page.
* <p>
* this operation is costly so it is likely an implementation using this
* will cache the conglomerate row in memory so that subsequent accesses
* need not perform this operation.
*
* @param xact_mgr      transaction to perform the create in.
* @param container_key the unique id of the existing conglomerate.
*
* @return an instance of the conglomerate.
*
* @exception  standardexception  standard exception policy.
**/
public conglomerate readconglomerate
transactionmanager      xact_mgr
containerkey            container_key
throws standardexception
containerhandle         container     null
page                    page          null
datavaluedescriptor   control_row   new datavaluedescriptor
try
// open container to read the heap object out of it's control row.
container
xact_mgr getrawstorexact   opencontainer
container_key   lockingpolicy  null  0
if  container    null
throw standardexception newexception
sqlstate store_conglomerate_does_not_exist
new long container_key getcontainerid
// row in slot 0 of heap page 1 which is just a single column with
// the heap entry.
control_row         new heap
page   container getpage containerhandle first_page_number
recordhandle rh
page fetchfromslot
recordhandle  null  0  control_row
fetchdescriptor  null
true
if  sanitymanager debug
sanitymanager assert rh    null
// for now the control row is always the first id assigned on
// page 1.
sanitymanager assert rh getid      6
finally
if  page    null
page unlatch
if  container    null
container close
return  conglomerate  control_row
/*
** methods of modulecontrol.
*/
public boolean cansupport properties startparams
string impl
startparams getproperty
if  impl    null
return false
return supportsimplementation impl
public void	boot boolean create  properties startparams
throws standardexception
// find the uuid factory.
uuidfactory uuidfactory
monitor getmonitor   getuuidfactory
// make a uuid that identifies this conglomerate's format.
formatuuid   uuidfactory recreateuuid formatuuidstring
public void	stop
/*
** methods of heapconglomeratefactory
*/
public heapconglomeratefactory