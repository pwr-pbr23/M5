/*
derby - class org.apache.derby.impl.sql.execute.materializedresultset
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl sql execute
import org apache derby iapi services monitor monitor
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi services stream headerprintwriter
import org apache derby iapi services stream infostreams
import org apache derby iapi sql resultset
import org apache derby iapi types rowlocation
import org apache derby iapi sql execute cursorresultset
import org apache derby iapi sql execute execrow
import org apache derby iapi sql execute executioncontext
import org apache derby iapi sql execute noputresultset
import org apache derby iapi sql execute executionfactory
import org apache derby iapi sql activation
import org apache derby iapi services loader generatedmethod
import org apache derby iapi store access conglomeratecontroller
import org apache derby iapi store access scancontroller
import org apache derby iapi store access transactioncontroller
import org apache derby iapi error standardexception
import org apache derby iapi reference sqlstate
import org apache derby iapi services io formatablebitset
/**
* materialize the underlying resultset tree into a temp table on the 1st open.
* return rows from temp table on subsequent scans.
*/
class materializedresultset extends noputresultsetimpl
implements cursorresultset
/*
** set in constructor and not altered during life of object.
*/
public noputresultset	source
private	execrow						materializedrowbuffer
protected long						materializedcid
public    boolean					materializedcreated
private   boolean					fromsource   true
protected conglomeratecontroller	materializedcc
protected scancontroller			materializedscan
private transactioncontroller		tc
private   boolean					sourcedrained
public	  long						createtctime
public	  long						fetchtctime
/**
* constructor for a materializedresultset
*
* @param source					the noputresultset from which to get rows
*									to be materialized
* @param activation				the activation for this execution
* @param resultsetnumber			the resultsetnumber
*
* @exception standardexception	on error
*/
public materializedresultset noputresultset source
activation activation  int resultsetnumber
double optimizerestimatedrowcount
double optimizerestimatedcost  throws standardexception
super activation  resultsetnumber
optimizerestimatedrowcount  optimizerestimatedcost
this source   source
// get the current transaction controller
tc   activation gettransactioncontroller
constructortime    getelapsedmillis begintime
//
// resultset interface (leftover from noputresultset)
//
/**
* open a scan on the source. scan parameters are evaluated
* at each open, so there is probably some way of altering
* their values...
*
* @exception standardexception thrown on failure
*/
public void	opencore   throws standardexception
begintime   getcurrenttimemillis
if  sanitymanager debug
sanitymanager assert    isopen
source opencore
isopen   true
numopens
opentime    getelapsedmillis begintime
/**
* reopen a scan on the table. scan parameters are evaluated
* at each open, so there is probably some way of altering
* their values...
*
* @exception standardexception thrown if cursor finished.
*/
public void	reopencore   throws standardexception
boolean constanteval   true
begintime   getcurrenttimemillis
if  sanitymanager debug
sanitymanager assert isopen
// finish draining the source into the temp table
while    sourcedrained
getnextrowfromsource
// results will now come from the temp table
fromsource   false
// close the temp table if open
if  materializedscan    null
materializedscan close
/* open a scan on the temp conglomerate,
* if one exists.
*/
if  materializedcid    0
materializedscan
tc openscan materializedcid
false 		   hold
0              for update
transactioncontroller mode_table
transactioncontroller isolation_serializable
formatablebitset  null     all fields as objects
null 		   start key value
0 			   start operator
null 		   qualifier
null 		   stop key value
0  			   stop operator
isopen   true
numopens
opentime    getelapsedmillis begintime
/**
*
* @exception standardexception thrown on failure
*/
public execrow	getnextrowcore   throws standardexception
execrow result   null
begintime   getcurrenttimemillis
if   isopen
throw standardexception newexception sqlstate lang_result_set_not_open
/* should we get the next row from the source or the materialized result set? */
if  fromsource
result   getnextrowfromsource
else
result   getnextrowfromtemptable
if  result    null
rowsseen
currentrow   result
setcurrentrow currentrow
nexttime    getelapsedmillis begintime
return result
/* get the next row from the source resultset tree and insert into the temp table */
private execrow getnextrowfromsource   throws standardexception
// nothing to do if source is already drained
if  sourcedrained
return null
execrow		sourcerow   null
execrow		result   null
sourcerow   source getnextrowcore
if  sourcerow    null
long begintctime   getcurrenttimemillis
/* if this is the first row from the source then clone it as our own
* for use when fetching from temp table.
* this is also the place where we create the temp table.
*/
if  materializedrowbuffer    null
materializedrowbuffer   sourcerow getclone
tc   activation gettransactioncontroller
materializedcid   tc createconglomerate   	materializedrowbuffer getrowarray
null  null
transactioncontroller is_temporary
transactioncontroller is_kept
materializedcreated   true
materializedcc
tc openconglomerate
materializedcid
false
transactioncontroller openmode_forupdate
transactioncontroller mode_table
transactioncontroller isolation_serializable
materializedcc insert sourcerow getrowarray
createtctime    getelapsedmillis begintctime
// remember whether or not we've drained the source
else
sourcedrained   true
return sourcerow
/* get the next row from the temp table */
private execrow getnextrowfromtemptable   throws standardexception
long begintctime   getcurrenttimemillis
/* get and return the next row from the temp conglomerate,
* if one exists.
*/
if  materializedscan    null    materializedscan fetchnext materializedrowbuffer getrowarray
fetchtctime    getelapsedmillis begintctime
return materializedrowbuffer
else
return null
/**
* if the result set has been opened,
* close the open scan.
*
* @exception standardexception thrown on error
*/
public void	close   throws standardexception
begintime   getcurrenttimemillis
if   isopen
currentrow   null
source close
if  materializedscan    null
materializedscan close
materializedscan   null
if  materializedcc    null
materializedcc close
materializedcc   null
if  materializedcreated
tc dropconglomerate materializedcid
materializedcreated   false
super close
else
if  sanitymanager debug
sanitymanager debug
closetime    getelapsedmillis begintime
/**
* return the total amount of time spent in this resultset
*
* @param type	current_resultset_only - time spent only in this resultset
*				entire_resultset_tree  - time spent in this resultset and below.
*
* @return long		the total amount of time spent (in milliseconds).
*/
public long gettimespent int type
long tottime   constructortime   opentime   nexttime   closetime
if  type    noputresultset current_resultset_only
return	tottime   source gettimespent entire_resultset_tree
else
return tottime
//
// cursorresultset interface
//
/**
* gets information from its source. we might want
* to have this take a cursorresultset in its constructor some day,
* instead of doing a cast here?
*
* @see cursorresultset
*
* @return the row location of the current cursor row.
*
* @exception standardexception thrown on failure
*/
public rowlocation getrowlocation   throws standardexception
if  sanitymanager debug
sanitymanager assert source instanceof cursorresultset
return    cursorresultset source   getrowlocation
/**
* gets information from last getnextrow call.
*
* @see cursorresultset
*
* @return the last row returned.
*/
/* resolve - this should return activation.getcurrentrow(resultsetnumber),
* once there is such a method.  (currentrow is redundant)
*/
public execrow getcurrentrow
return currentrow
//
// class implementation
//