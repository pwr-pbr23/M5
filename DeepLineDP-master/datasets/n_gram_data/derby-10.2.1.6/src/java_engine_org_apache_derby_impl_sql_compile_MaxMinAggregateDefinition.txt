/*
derby - class org.apache.derby.impl.sql.compile.maxminaggregatedefinition
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl sql compile
import org apache derby iapi sql conn languageconnectioncontext
import org apache derby iapi services sanity sanitymanager
import org apache derby impl sql execute maxminaggregator
import org apache derby catalog typedescriptor
import org apache derby iapi types typeid
import org apache derby iapi types datatypedescriptor
import org apache derby iapi types numberdatavalue
import org apache derby iapi error standardexception
import org apache derby iapi services context contextservice
import org apache derby iapi reference classname
/**
* defintion for the max()/min() aggregates.
*
* @author jamie
*/
public class maxminaggregatedefinition
implements aggregatedefinition
private boolean ismax
/**
* niladic constructor.  does nothing.  for ease
* of use, only.
*/
public maxminaggregatedefinition     super
/**
* determines the result datatype.  accept numberdatavalues
* only.
* <p>
* <i>note</i>: in the future you should be able to do
* a sum user data types.  one option would be to run
* sum on anything that implements divide().
*
* @param inputtype	the input type, either a user type or a java.lang object
*
* @return the output class (null if cannot operate on
*	value expression of this type.
*/
public final typedescriptor	getaggregator typedescriptor inputtype
stringbuffer aggregatorclass
languageconnectioncontext lcc    languageconnectioncontext
contextservice getcontext languageconnectioncontext context_id
/*
** min and max may return null
*/
datatypedescriptor dts   new datatypedescriptor  datatypedescriptor  inputtype  true
typeid comptype   dts gettypeid
/*
** if the class implements numberdatavalue, then we
** are in business.  return type is same as input
** type.
*/
if  comptype orderable
lcc getlanguageconnectionfactory   getclassfactory
aggregatorclass append classname maxminaggregator
return dts
return null
/**
* this is set by the parser.
*/
public final void setmaxormin boolean ismax
this ismax   ismax
/**
* return if the aggregator class is for min/max.
*
* @return boolean true/false
*/
public final boolean ismax
return ismax