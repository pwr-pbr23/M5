/*
derby - class org.apache.derby.iapi.services.uuid.uuidfactory
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi services uuid
import org apache derby catalog uuid
/*
internal comment (not for user documentation):
although this is an abstract interface, i believe that the
underlying implementation of uuid will have to be dce uuid.
this is because the string versions of uuids get stored in
the source code.  in other words, no matter what implementation
is used for uuids, strings that look like this
<blockquote><pre>
e4900b90-da0e-11d0-bafe-0060973f0942
</blockquote></pre>
will always have to be turned into universally unique objects
by the recreateuuid method
*/
/**
generates and recreates unique identifiers.
an example of such an identifier is:
<blockquote><pre>
e4900b90-da0e-11d0-bafe-0060973f0942
</blockquote></pre>
these resemble dce uuids, but use a different implementation.
<p>
the string format is designed to be the same as the string
format produced by microsoft's uuidgen program, although at
present the bit fields are probably not the same.
**/
public interface uuidfactory
/**
create a new uuid.  the resulting object is guaranteed
to be unique "across space and time".
@return		the uuid.
**/
public uuid createuuid
/**
recreate a uuid from a string produced by uuid.tostring.
@return		the uuid.
**/
public uuid recreateuuid string uuidstring
/**
recreate a uuid from a byte array produced by uuid.tobytearray.
@return		the uuid.
@see uuid#tobytearray
**/
public uuid recreateuuid byte b