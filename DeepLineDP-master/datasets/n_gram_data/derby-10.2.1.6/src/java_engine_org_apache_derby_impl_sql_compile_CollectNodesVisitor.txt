/*
derby - class org.apache.derby.impl.sql.compile.collectnodesvisitor
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package	org apache derby impl sql compile
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi sql compile visitable
import org apache derby iapi sql compile visitor
import org apache derby iapi error standardexception
import java util vector
/**
* collect all nodes of the designated type to be returned
* in a vector.
* <p>
* can find any type of node -- the class or class name
* of the target node is passed in as a constructor
* parameter.
*
* @author jamie
*/
public class collectnodesvisitor implements visitor
private vector	nodelist
private class 	nodeclass
private class	skipoverclass
/**
* construct a visitor
*
* @param nodeclass the class of the node that
* 	we are looking for.
*/
public collectnodesvisitor class nodeclass
this nodeclass   nodeclass
nodelist   new vector
/**
* construct a visitor
*
* @param nodeclass the class of the node that
* 	we are looking for.
* @param skipoverclass do not go below this
* node when searching for nodeclass.
*/
public collectnodesvisitor class nodeclass  class skipoverclass
this nodeclass
this skipoverclass   skipoverclass
public boolean stoptraversal
return false
////////////////////////////////////////////////
//
// visitor interface
//
////////////////////////////////////////////////
/**
* if we have found the target node, we are done.
*
* @param node 	the node to process
*
* @return me
*/
public visitable visit visitable node
if  nodeclass isinstance node
nodelist addelement node
return node
/**
* don't visit childen under the skipoverclass
* node, if it isn't null.
*
* @return true/false
*/
public boolean skipchildren visitable node
return  skipoverclass    null  ?
false
skipoverclass isinstance node
////////////////////////////////////////////////
//
// class interface
//
////////////////////////////////////////////////
/**
* reset the status so it can be run again.
*
*/
public vector getlist
return nodelist