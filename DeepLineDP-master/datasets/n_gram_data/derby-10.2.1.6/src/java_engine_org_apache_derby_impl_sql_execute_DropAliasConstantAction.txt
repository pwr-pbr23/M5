/*
derby - class org.apache.derby.impl.sql.execute.dropaliasconstantaction
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl sql execute
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi error standardexception
import org apache derby iapi sql conn languageconnectioncontext
import org apache derby iapi sql dictionary tabledescriptor
import org apache derby iapi sql dictionary aliasdescriptor
import org apache derby iapi sql dictionary datadescriptorgenerator
import org apache derby iapi sql dictionary datadictionary
import org apache derby iapi sql dictionary datadictionarycontext
import org apache derby iapi sql dictionary schemadescriptor
import org apache derby iapi types datavaluefactory
import org apache derby iapi sql depend dependencymanager
import org apache derby iapi reference sqlstate
import org apache derby iapi sql execute constantaction
import org apache derby iapi sql activation
import org apache derby iapi store access transactioncontroller
import org apache derby catalog aliasinfo
/**
*	this class  describes actions that are always performed for a
*	drop alias statement at execution time.
*
*	@author jerry brenner.
*/
class dropaliasconstantaction extends ddlconstantaction
private schemadescriptor	sd
private final string schemaname
private final string				aliasname
private final char				namespace
// constructors
/**
*	make the constantaction for a drop  alias statement.
*
*
*	@param	aliasname			alias name.
*	@param	namespace			alias name space.
*
*/
dropaliasconstantaction schemadescriptor sd  string aliasname  char namespace
this sd   sd
this schemaname   sd getschemaname
this aliasname   aliasname
this namespace   namespace
// object shadows
public	string	tostring
// do not put this under sanitymanager.debug - it is needed for
// error reporting.
return	    aliasname
// interface methods
/**
*	this is the guts of the execution-time logic for drop alias.
*
*	@see constantaction#executeconstantaction
*
* @exception standardexception		thrown on failure
*/
public void	executeconstantaction  activation activation
throws standardexception
languageconnectioncontext lcc   activation getlanguageconnectioncontext
datadictionary dd   lcc getdatadictionary
transactioncontroller tc   lcc gettransactionexecute
dependencymanager dm   dd getdependencymanager
/*
** inform the data dictionary that we are about to write to it.
** there are several calls to data dictionary "get" methods here
** that might be done in "read" mode in the data dictionary, but
** it seemed safer to do this whole operation in "write" mode.
**
** we tell the data dictionary we're done writing at the end of
** the transaction.
*/
dd startwriting lcc
if  sd    null
sd   dd getschemadescriptor schemaname  lcc gettransactionexecute    true
/* get the alias descriptor.  we're responsible for raising
* the error if it isn't found
*/
aliasdescriptor ad   dd getaliasdescriptor sd getuuid   tostring    aliasname  namespace
// resolve - fix error message
if  ad    null
throw standardexception newexception sqlstate lang_object_not_found  ad getaliastype namespace    aliasname
/* prepare all dependents to invalidate.  (this is their chance
* to say that they can't be invalidated.  for example, an open
* cursor referencing a table/view that the user is attempting to
* drop.) if no one objects, then invalidate any dependent objects.
* we check for invalidation before we drop the descriptor
* since the descriptor may be looked up as part of
* decoding tuples in sysdepends.
*/
int invalidationtype   0
switch  ad getaliastype
case aliasinfo alias_type_procedure_as_char
case aliasinfo alias_type_function_as_char
invalidationtype   dependencymanager drop_method_alias
break
case aliasinfo alias_type_synonym_as_char
invalidationtype   dependencymanager drop_synonym
break
dm invalidatefor ad  invalidationtype  lcc
if  ad getaliastype      aliasinfo alias_type_synonym_as_char
// drop the entry from systables as well.
datadescriptorgenerator ddg   dd getdatadescriptorgenerator
tabledescriptor td   ddg newtabledescriptor aliasname  sd
tabledescriptor synonym_type  tabledescriptor default_lock_granularity
dd droptabledescriptor td  sd  tc
else
dd dropallroutinepermdescriptors ad getuuid    tc
/* drop the alias */
dd dropaliasdescriptor ad  tc