/*
derby - class org.apache.derby.impl.sql.compile.unarylogicaloperatornode
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package	org apache derby impl sql compile
import org apache derby iapi sql dictionary datadictionary
import org apache derby iapi types typeid
import org apache derby iapi reference sqlstate
import org apache derby iapi error standardexception
import org apache derby iapi types datatypedescriptor
import org apache derby iapi services sanity sanitymanager
import java util vector
public abstract class unarylogicaloperatornode extends unaryoperatornode
/**
* initializer for a unarylogicaloperatornode
*
* @param operand	the operand of the operator
* @param methodname	the name of the method to call in the generated
*						class.  in this case, it's actually an operator
*						name.
*/
public void init
object	operand
object		methodname
/* for logical operators, the operator and method names are the same */
super init operand  methodname  methodname
/**
* bind this logical operator.  all that has to be done for binding
* a logical operator is to bind the operand, check that the operand
* is sqlboolean, and set the result type to sqlboolean.
*
* @param fromlist			the query's from list
* @param subquerylist		the subquery list being built as we find subquerynodes
* @param aggregatevector	the aggregate vector being built as we find aggregatenodes
*
* @return	the new top of the expression tree.
*
* @exception standardexception		thrown on error
*/
public valuenode bindexpression
fromlist fromlist  subquerylist subquerylist
vector	aggregatevector
throws standardexception
super bindexpression fromlist  subquerylist
aggregatevector
/*
** logical operators work only on booleans.  if the operand
** is not boolean, throw an exception.
**
** for now, this exception will never happen, because the grammar
** does not allow arbitrary expressions with not.  but when
** we start allowing generalized boolean expressions, we will modify
** the grammar, so this test will become useful.
*/
if     operand gettypeservices   gettypeid   equals typeid boolean_id
operand treeprint
throw standardexception newexception sqlstate lang_unary_logical_non_boolean
/* set the type info */
setfulltypeinfo
return this
/**
* set all of the type info (nullability and datatypeservices) for
* this node.  extracts out tasks that must be done by both bind()
* and post-bind() andnode generation.
*
* @exception standardexception		thrown on error
*/
protected void setfulltypeinfo
throws standardexception
boolean nullableresult
/*
** set the result type of this comparison operator based on the
** operands.  the result type is always sqlboolean - the only question
** is whether it is nullable or not.  if either of the operands is
** nullable, the result of the comparison must be nullable, too, so
** we can represent the unknown truth value.
*/
nullableresult   operand gettypeservices   isnullable
settype new datatypedescriptor typeid boolean_id  nullableresult