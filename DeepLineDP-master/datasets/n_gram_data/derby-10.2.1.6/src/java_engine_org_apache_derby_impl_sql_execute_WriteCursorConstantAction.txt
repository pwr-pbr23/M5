/*
derby - class org.apache.derby.impl.sql.execute.writecursorconstantaction
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl sql execute
import org apache derby iapi sql execute executioncontext
import org apache derby iapi services stream headerprintwriter
import org apache derby iapi services io arrayutil
import org apache derby iapi services io formatable
import org apache derby iapi sql dictionary datadescriptorgenerator
import org apache derby iapi sql dictionary datadictionarycontext
import org apache derby iapi sql dictionary datadictionary
import org apache derby iapi sql dictionary tabledescriptor
import org apache derby iapi sql dictionary conglomeratedescriptor
import org apache derby iapi sql dictionary indexrowgenerator
import org apache derby iapi sql dictionary schemadescriptor
import org apache derby iapi sql conn languageconnectioncontext
import org apache derby iapi sql execute constantaction
import org apache derby iapi sql execute execrow
import org apache derby iapi sql activation
import org apache derby iapi error standardexception
import org apache derby iapi store access staticcompiledopenconglominfo
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi services io formatablebitset
import org apache derby catalog uuid
import java io objectoutput
import java io objectinput
import java io ioexception
import java util properties
/**
*	this abstract class describes compiled constants that are passed into
*	delete, insert, and update resultsets.
*
*	@author rick hillegas
*/
abstract	class writecursorconstantaction implements constantaction  formatable
/********************************************************
**
**	this class implements formatable. but it is not used
**	across either major or minor releases.  it is only
** 	written persistently in stored prepared statements,
**	not in the replication stage.  so, it is ok to change
**	its read/writeexternal.
**
********************************************************/
long						conglomid
staticcompiledopenconglominfo heapscoci
indexrowgenerator 		irgs
long						indexcids
staticcompiledopenconglominfo indexscocis
string					indexnames
boolean						deferred
private  properties			targetproperties
uuid						targetuuid
int							lockmode
private	fkinfo					fkinfo
private triggerinfo					triggerinfo
private execrow						emptyheaprow
private formatablebitset baserowreadlist
private int baserowreadmap
private int streamstorableheapcolids
boolean singlerowsource
// constructors
/**
* public niladic constructor. needed for formatable interface to work.
*
*/
public	writecursorconstantaction
/**
*	make the constantaction for a delete, insert, or update statement.
*
*  @param conglomid	conglomerate id of heap.
*	@param heapscoci	staticcompiledopenconglominfo for heap.
*  @param irgs			index descriptors
*  @param indexcids	conglomerate ids of indices
*	@param indexscocis	staticcompiledopenconglominfos for indexes.
*  @param indexnames   names of indices on this table for error reporting.
*  @param deferred		true means process as a deferred update
*  @param targetproperties	properties on the target table
*	@param targetuuid	uuid of target table
*	@param lockmode		the lock mode to use on the target table
*	@param fkinfo	structure containing foreign key info, if any (may be null)
*	@param triggerinfo	structure containing trigger info, if any (may be null)
*  @param emptyheaprow	an empty heap row
*  @param baserowreadmap	baserowreadmap[heapcolid]->readrowcolumnid. (0 based)
*  @param streamstorableheapcolids null for non rep. (0 based)
*  @param singlerowsource		whether or not source is a single row source
*/
public	writecursorconstantaction
long				conglomid
staticcompiledopenconglominfo heapscoci
indexrowgenerator	irgs
long				indexcids
staticcompiledopenconglominfo indexscocis
string			indexnames
boolean				deferred
properties			targetproperties
uuid				targetuuid
int					lockmode
fkinfo			fkinfo
triggerinfo			triggerinfo
execrow				emptyheaprow
formatablebitset				baserowreadlist
int               baserowreadmap
int               streamstorableheapcolids
boolean				singlerowsource
this conglomid   conglomid
this heapscoci   heapscoci
this irgs   irgs
this indexscocis   indexscocis
this indexcids   indexcids
this indexscocis   indexscocis
this deferred   deferred
this targetproperties   targetproperties
this targetuuid   targetuuid
this lockmode   lockmode
this emptyheaprow   emptyheaprow
this fkinfo   fkinfo
this triggerinfo   triggerinfo
this baserowreadlist   baserowreadlist
this baserowreadmap   baserowreadmap
this streamstorableheapcolids   streamstorableheapcolids
this singlerowsource   singlerowsource
this indexnames   indexnames
if  sanitymanager debug
if  fkinfo    null
sanitymanager assert fkinfo length    0
///////////////////////////////////////////////////////////////////
//
//	accessors
//
///////////////////////////////////////////////////////////////////
/**
*	gets the foreign key information for this constant action.
*	a full list of foreign keys was compiled into this constant
*	action. however, we prune this list at run time so that we
*	enforce only the foreign keys that we absolutely must.
*
*	what's going on here? well, in certain contexts (refresh and
*	when intially booting a target), we don't have to enforce some
*	foreign keys. we allow the executioncontext to rule on which
*	foreign keys are relevant and which aren't.
*
*	@param	ec	the executioncontext
*
*	@return	the list of foreign keys to enforce for this action
*
* @exception standardexception		thrown on failure
*/
public	fkinfo	getfkinfo
executioncontext	ec
throws standardexception
fkinfo	siftedarray    fkinfo  ec siftforeignkeys  fkinfo
return siftedarray
/**
* basically, the same as getfkinfo but for triggers.
*
* @return	the triggers that should be fired
*
* @exception standardexception		thrown on failure
*/
public triggerinfo gettriggerinfo executioncontext ec
throws standardexception
return  triggerinfo ec sifttriggers triggerinfo
///////////////////////////////////////////////////////////////////
//
// interface methods
//
///////////////////////////////////////////////////////////////////
/**
*	nop routine. the work is done in insertresultset.
*
*	@see constantaction#executeconstantaction
*
* @exception standardexception		thrown on failure
*/
public final void	executeconstantaction  activation activation
throws standardexception
// formatable methods
/**
* read this object from a stream of stored objects.
*
* @param in read this.
*
* @exception ioexception					thrown on error
* @exception classnotfoundexception		thrown on error
*/
public void readexternal  objectinput in
throws ioexception  classnotfoundexception
conglomid   in readlong
heapscoci    staticcompiledopenconglominfo  in readobject
irgs   new indexrowgenerator
arrayutil readarrayitems in  irgs
indexcids   arrayutil readlongarray in
indexscocis   new staticcompiledopenconglominfo
arrayutil readarrayitems in  indexscocis
deferred   in readboolean
targetproperties    properties  in readobject
targetuuid    uuid  in readobject
lockmode   in readint
fkinfo   new fkinfo
arrayutil readarrayitems in  fkinfo
triggerinfo    triggerinfo in readobject
baserowreadlist    formatablebitset in readobject
baserowreadmap   arrayutil readintarray in
streamstorableheapcolids   arrayutil readintarray in
singlerowsource   in readboolean
indexnames   arrayutil readstringarray in
/**
* write this object to a stream of stored objects.
*
* @param out write bytes here.
*
* @exception ioexception		thrown on error
*/
public void writeexternal  objectoutput out
throws ioexception
out writelong conglomid
out writeobject heapscoci
arrayutil writearray out  irgs
arrayutil writelongarray out  indexcids
arrayutil writearray out  indexscocis
out writeboolean deferred
out writeobject targetproperties
out writeobject targetuuid
out writeint lockmode
arrayutil writearray out  fkinfo
//
//added for xena.
out writeobject triggerinfo
//
//moved from super class for xena.
out writeobject baserowreadlist
//
//added for xena
arrayutil writeintarray out baserowreadmap
arrayutil writeintarray out streamstorableheapcolids
//added for buffy
out writeboolean singlerowsource
// added for mulan (track bug# 3322)
arrayutil writearray out  indexnames
// accessors
/**
* get the conglomerate id for the changed heap.
* @return the conglomerate id.
*/
public long getconglomerateid     return conglomid
/**
*	get emptyheaprow
*
* @param lcc	the languageconnectioncontext to use.
*
* @return	an empty base table row for the table being updated.
*
* @exception standardexception on error
*/
public execrow getemptyheaprow languageconnectioncontext lcc  throws standardexception
datadictionary dd
tabledescriptor td
if  emptyheaprow    null
dd   lcc getdatadictionary
td   dd gettabledescriptor targetuuid
emptyheaprow   td getemptyexecrow lcc getcontextmanager
return emptyheaprow getclone
/**
* get the targetproperties from the constant action.
*
* @return the targetproperties
*/
public properties gettargetproperties
return targetproperties
/**
* the the value of the specified key, if it exists, from
* the targetproperties.
*
* @param key		the key to search for
*
* @return	the value for the specified key if it exists, otherwise null.
*			(return null if targetproperties is null.)
*/
public string getproperty string key
return  targetproperties    null  ? null   targetproperties getproperty key
public formatablebitset getbaserowreadlist     return baserowreadlist
public int getbaserowreadmap     return baserowreadmap
public int getstreamstorableheapcolids     return streamstorableheapcolids
/**
* get the index name given the conglomerate id of the index.
*
* @param indexcid		conglomerate id of the index.
*
* @return index name of given index.
*/
public string getindexnamefromcid long indexcid
int size   indexcids length
if  indexnames    null
return null
for  int i   0  i < size  i
if  indexcids    indexcid
return indexnames
return null
public string getindexnames
return indexnames