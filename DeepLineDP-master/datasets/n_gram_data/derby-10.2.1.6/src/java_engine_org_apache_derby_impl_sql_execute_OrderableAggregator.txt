/*
derby - class org.apache.derby.impl.sql.execute.orderableaggregator
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl sql execute
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi sql execute execaggregator
import org apache derby iapi types datavaluedescriptor
import org apache derby iapi error standardexception
import org apache derby iapi services io formatable
import java io objectoutput
import java io objectinput
import java io ioexception
/**
* abstract aggregator for orderable aggregates (max/min).
*
* @author jamie
*/
abstract class orderableaggregator extends systemaggregator
protected datavaluedescriptor value
/**
*/
public void setup string aggregatename
/**
* @see execaggregator#merge
*
* @exception standardexception on error
*/
public void merge execaggregator addend
throws standardexception
if  sanitymanager debug
sanitymanager assert addend instanceof orderableaggregator
// don't bother merging if the other has never been used.
datavaluedescriptor bv     orderableaggregator addend  value
if  bv    null
this accumulate bv
/**
* return the result of the operations that we
* have been performing.  returns a datavaluedescriptor.
*
* @return the result as a datavaluedescriptor
*/
public datavaluedescriptor getresult   throws standardexception
return value
/////////////////////////////////////////////////////////////
//
// externalizable interface
//
/////////////////////////////////////////////////////////////
/**
* although we are not expected to be persistent per se,
* we may be written out by the sorter temporarily.  so
* we need to be able to write ourselves out and read
* ourselves back in.  we rely on formatable to handle
* situations where <i>value</i> is null.
* <p>
* why would we be called to write ourselves out if we
* are null?  for scalar aggregates, we don't bother
* setting up the aggregator since we only need a single
* row.  so for a scalar aggregate that needs to go to
* disk, the aggregator might be null.
*
* @exception ioexception on error
*
* @see java.io.externalizable#writeexternal
*/
public void writeexternal objectoutput out  throws ioexception
super writeexternal out
out writeobject value
/**
* @see java.io.externalizable#readexternal
*
* @exception ioexception on error
* @exception classnotfoundexception on error
*/
public void readexternal objectinput in
throws ioexception  classnotfoundexception
super readexternal in
value    datavaluedescriptor  in readobject