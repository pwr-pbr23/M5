/*
derby - class org.apache.derby.impl.store.access.btree.index.b2iforwardscan
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl store access btree index
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi error standardexception
import org apache derby iapi store access conglomerate conglomerate
import org apache derby iapi store access conglomerate transactionmanager
import org apache derby iapi store access conglomeratecontroller
import org apache derby iapi store access dynamiccompiledopenconglominfo
import org apache derby iapi store access genericscancontroller
import org apache derby iapi store access qualifier
import org apache derby iapi store access scancontroller
import org apache derby iapi store access staticcompiledopenconglominfo
import org apache derby iapi store access transactioncontroller
import org apache derby iapi store raw containerhandle
import org apache derby iapi store raw lockingpolicy
import org apache derby iapi store raw transaction
import org apache derby iapi types datavaluedescriptor
import org apache derby iapi types rowlocation
import org apache derby iapi services io formatablebitset
import org apache derby impl store access btree btreecontroller
import org apache derby impl store access btree btreelockingpolicy
import org apache derby impl store access btree btreeforwardscan
import org apache derby impl store access conglomerate conglomerateutil
/**
the btree secondary index implementation of scanmanager which provides reading
and deleting of entries in the btree secondary index.
this supports setting up and
iterating through a set of rows while providing a start key, stop key,
and a set of and and or qualifiers to skip unwanted rows.  currently
derby only supports forward scans (but individual columns can have
descending order).  this interface is also used to delete rows from
the conglomerate.  note that update is not supported, it must be
implemented as a delete, followed by an insert.
note most work of this class is inherited from the generic btree implementation.
this class initializes the top level object and deals with locking information
specific to a secondary index implementation of a btree.
**/
public class b2iforwardscan extends btreeforwardscan
{
/*
** fields of b2iforwardscan.
*/
private conglomeratecontroller  base_cc_for_locking
private int                     init_isolation_level
/*
** methods of b2iforwardscan.
*/
b2iforwardscan
{
// perform the generic b-tree scan construction.
super
}
/**
close the scan.
@see genericscancontroller#newrowlocationtemplate
**/
public void close
throws standardexception
{
super close
if  base_cc_for_locking    null
{
base_cc_for_locking close
base_cc_for_locking   null
}
}
/**
close the scan, a commit or abort is about to happen.
**/
public boolean closeforendtransaction boolean closeheldscan
throws standardexception
{
boolean ret_val   super closeforendtransaction closeheldscan
if  base_cc_for_locking    null
{
base_cc_for_locking close
base_cc_for_locking   null
}
return ret_val
}
/**
* open the container after it has been closed previously.
* <p>
* open the container, obtaining necessary locks.  most work is actually
* done by rawstore.opencontainer().  will only reopen() if the container
* is not already open.
*
* @exception  standardexception  standard exception policy.
**/
public containerhandle reopen
throws standardexception
{
containerhandle container   super reopen
b2i             b2i          b2i  getconglomerate
// open and lock the base table.
int base_open_mode
getopenmode     transactioncontroller openmode_for_lock_only
// todo - figure out what to do with static_info stuff
// open the base conglomerate - just to get lock
/*
if (static_info != null)
{
base_cc_for_locking =
xact_manager.opencompiledconglomerate(
false,
base_open_mode, lock_level, isolation_level,
static_info.base_table_static_info,
((conglomerate) static_info.getconglom()).
getdynamiccompiledconglominfo(
b2i.baseconglomerateid));
}
else
*/
{
base_cc_for_locking =
getxactmgr   openconglomerate
b2i baseconglomerateid
false,
base_open_mode  init_lock_level
init_isolation_level
setlockingpolicy
b2i getbtreelockingpolicy
getxactmgr   getrawstorexact
getlocklevel
getopenmode
init_isolation_level
base_cc_for_locking  this
}
return container
}
/**
initialize the scan for use.
<p>
any changes to this method may have to be reflected in close as well.
<p>
the btree init opens the container (super.init), and stores away the
state of the qualifiers.  the actual searching for the first position
is delayed until the first next() call.
@exception  standardexception  standard exception policy.
**/
public void init
transactionmanager              xact_manager
transaction                     rawtran
boolean                         hold
int                             open_mode
int                             lock_level
lockingpolicy                   locking_policy
int                             isolation_level
boolean                         open_for_locking
formatablebitset                         scancolumnlist
datavaluedescriptor	        startkeyvalue
int                             startsearchoperator
qualifier                       qualifier
datavaluedescriptor	        stopkeyvalue
int                             stopsearchoperator
b2i                             conglomerate
b2iundo                         undo
b2istaticcompiledinfo           static_info
dynamiccompiledopenconglominfo  dynamic_info
throws standardexception
{
// open and lock the base table.
int base_open_mode
open_mode   transactioncontroller openmode_for_lock_only
// open the base conglomerate - just to get lock
if (static_info != null)
{
base_cc_for_locking =
xact_manager.opencompiledconglomerate(
false,
base_open_mode, lock_level, isolation_level,
static_info.base_table_static_info,
/* todo - maintain a dynamic info for this */
((conglomerate) static_info.getconglom()).
getdynamiccompiledconglominfo(
conglomerate baseconglomerateid
}
else
{
base_cc_for_locking =
xact_manager openconglomerate
conglomerate baseconglomerateid  false  base_open_mode  lock_level
isolation_level
}
btreelockingpolicy b2i_locking_policy
conglomerate getbtreelockingpolicy
rawtran  lock_level  open_mode  isolation_level
base_cc_for_locking  this
super init
xact_manager
rawtran
hold
open_mode
lock_level
b2i_locking_policy
scancolumnlist
startkeyvalue
startsearchoperator
qualifier
stopkeyvalue
stopsearchoperator
conglomerate
undo
static_info
dynamic_info
// todo - should just save the isolation level in openbtree but
// save it here for now.
init_isolation_level   isolation_level
}
}