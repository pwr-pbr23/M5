/*
derby - class org.apache.derby.shared.common.reference.attribute
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby shared common reference
/**
* list of all connection (jdbc) attributes by the system.
*
*
* <p>
* this class exists for two reasons
* <ol>
* <li> to act as the internal documentation for the attributes.
* <li> to remove the need to declare a java static field for the attributes
* name in the protocol/implementation class. this reduces the footprint as the
* string is final and thus can be included simply as a string constant pool
* entry.
* </ol>
* <p>
* this class should not be shipped with the product.
*
* <p>
* this class has no methods, all it contains are string's which by are public,
* static and final since they are declared in an interface.
*/
public interface attribute
/**
* not an attribute but the root for the jdbc url that derby supports.
*/
string protocol
/**
* the sqlj protocol for getting the default connection for server side jdbc
*/
string sqlj_nested
// network protocols. these need to be rejected by the embedded driver.
/**
* the protocol for derby network client
*/
string dnc_protocol
/**
* the protocol for the ibm universal jdbc driver
*
*/
string jcc_protocol
/**
* attribute name to encrypt the database on disk. if set to true, all user
* data is stored encrypted on disk.
*/
string data_encryption
/**
* if dataencryption is true, use this attribute to pass in the secret key.
* the secret key must be at least 8 characters long. this key must not be
* stored persistently in cleartext anywhere.
*/
string boot_password
/**
* the attribute that is used for the database name, from the jdbc notion of
* jdbc:<subprotocol>:<subname>
*/
string dbname_attr
/**
* the attribute that is used to request a shutdown.
*/
string shutdown_attr
/**
* the attribute that is used to request a database create.
*/
string create_attr
/**
* the attribute that is used to set the user name.
*/
string username_attr
/**
* the attribute that is used to set the user password.
*/
string password_attr
/**
* the attribute that is used to set the connection's drda id.
*/
string drdaid_attr
/**
* the attribute that is used to allow upgrade.
*/
string upgrade_attr
/**
* put the log on a different device.
*/
string log_device
/**
* set the territory for the database.
*/
string territory
/**
* set the collation sequence of the database, currently on identity will be
* supported (strings will sort according to binary comparison).
*/
string collate
/**
* attribute for encrypting a database. specifies the cryptographic services
* provider.
*/
string crypto_provider
/**
* attribute for encrypting a database. specifies the cryptographic
* algorithm.
*/
string crypto_algorithm
/**
* attribute for encrypting a database. specifies the key length in bytes
* for the specified cryptographic algorithm.
*/
string crypto_key_length
/**
* attribute for encrypting a database. specifies the actual key. when this
* is specified all the supplied crypto information is stored external to
* the database, ie by the application.
*/
string crypto_external_key
/**
* this attribute is used to request to create a database from backup. this
* will throw error if a database with same already exists at the location
* where we tring to create.
*/
string create_from
/**
* this attribute is used to request a database restore from backup. it must
* be used only when the active database is corrupted, because it will
* cleanup the existing database and replace it from the backup.
*/
string restore_from
/**
* the attribute that is used to request a roll-forward recovery of the
* database.
*/
string roll_forward_recovery_from
/**
* securitymechanism sets the mechanism for transmitting the user name and
* password from the client. client driver attribute.
*/
string client_security_mechanism
/**
* tracefile sets the client side trace file. client driver attribute.
*/
string client_trace_file
/**
* tracedirectory sets the client side trace directory.
* client driver attribute.
*/
string client_trace_directory
/**
* tracefileappend.
* client driver attribute.
*/
string client_trace_append
/**
* tracelevel.
* client driver attribute.
*/
string client_trace_level
/**
* retrievemessagetext.
* client driver attribute.
*/
string client_retieve_message_text