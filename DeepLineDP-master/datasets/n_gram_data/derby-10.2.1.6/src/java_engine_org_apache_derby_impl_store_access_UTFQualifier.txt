/*
derby - class org.apache.derby.impl.store.access.utfqualifier
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl store access
import org apache derby iapi types datavaluedescriptor
import org apache derby iapi store access qualifier
/**
*/
public class utfqualifier implements qualifier
private utf      value
private int		 columnid
public utfqualifier int columnid  string value
this columnid   columnid
this value   new utf value
/*
** qualifier interface
*/
/** get the id of the column to be qualified. **/
public int getcolumnid
return columnid
/**
* get the value that the column is to be compared to.
*
* @exception standardexception		thrown on error
*/
public datavaluedescriptor getorderable
return value
/** get the operator to use in the comparison.
*
*  @see datavaluedescriptor#compare
**/
public int getoperator
return datavaluedescriptor order_op_equals
/**
*  determine if the result from the compare operation is to be negated.
*  <p>
*  if true then only rows which fail the compare operation will qualify.
*
*  @see datavaluedescriptor#compare
**/
public boolean negatecompareresult
return false
/**
*
*  @see qualifier#getorderednulls
**/
public boolean getorderednulls
return false
/** get the getorderednulls argument to use in the comparison.
*
*  @see datavaluedescriptor#compare
**/
public boolean getunknownrv
return false
/** clear the datavaluedescriptor cache, if one exists.
*  (the datavaluedescriptor can be 1 of 3 types:
*		o  variant		  - cannot be cached as its value can
*							vary within a scan
*		o  scan_invariant - can be cached within a scan as its
*							value will not change within a scan
*		o  query_invariant- can be cached across the life of the query
*							as its value will never change
*		o  constant	      - can be cached across executions
*
*  @see qualifier#getunknownrv
*/
public void clearorderablecache
/**
* this method reinitializes all the state of
* the qualifier.  it is used to distinguish between
* resetting something that is query invariant
* and something that is constant over every
* execution of a query.  basically, clearorderablecache()
* will only clear out its cache if it is a variant
* or scan_invariant value.  however, each time a
* query is executed, the query_invariant qualifiers need
* to be reset.
*/
public void reinitialize