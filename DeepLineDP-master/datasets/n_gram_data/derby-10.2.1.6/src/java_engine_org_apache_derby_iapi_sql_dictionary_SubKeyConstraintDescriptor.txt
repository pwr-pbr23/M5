/*
derby - class org.apache.derby.iapi.sql.dictionary.subkeyconstraintdescriptor
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi sql dictionary
import org apache derby catalog uuid
import org apache derby iapi services sanity sanitymanager
/**
* this interface is used to get information from a subkeyconstraintdescriptor.
* a subkeyconstraintdescriptor is used within the datadictionary to
* get auxiliary constraint information from the system table
* that is auxiliary to sysconstraints.
*
* @version 0.1
* @author jerry brenner
*/
public class subkeyconstraintdescriptor extends subconstraintdescriptor
/** interface for subkeyconstraintdescriptor is
<ol>
<li>public uuid getindexid();</li>
<li>public uuid getkeyconstraintid();</li>
</ol>
*/
// implementation
uuid					indexid
uuid					keyconstraintid
int                     radeleterule    referential action rule for a delete
int                     raupdaterule    referential action rule for a update
/**
* constructor for a subconstraintdescriptorimpl
*
* @param constraintid		the uuid of the constraint.
* @param indexid			the uuid of the backing index.
*/
public subkeyconstraintdescriptor uuid constraintid  uuid indexid
super constraintid
this indexid   indexid
/**
* constructor for a subconstraintdescriptor
*
* @param constraintid		the uuid of the constraint.
* @param indexid			the uuid of the backing index.
* @param keyconstraintid	the uuid of the referenced constraint (fks)
*/
public subkeyconstraintdescriptor uuid constraintid  uuid indexid  uuid keyconstraintid
this constraintid  indexid
this keyconstraintid   keyconstraintid
/**
* constructor for a subconstraintdescriptor
*
* @param constraintid		the uuid of the constraint.
* @param indexid			the uuid of the backing index.
* @param keyconstraintid	the uuid of the referenced constraint (fks)
* @param radeleterule      the referential action for delete
* @param raupdaterule      the referential action for update
*/
public subkeyconstraintdescriptor uuid constraintid  uuid indexid  uuid
keyconstraintid  int radeleterule  int raupdaterule
this constraintid  indexid
this keyconstraintid   keyconstraintid
this radeleterule   radeleterule
this raupdaterule   raupdaterule
/**
* gets the uuid of the backing index.
*
* @return	the uuid of the backing index.
*/
public uuid	getindexid
return indexid
/**
* gets the uuid of the referenced key constraint
*
* @return	the uuid of the referenced key constraint
*/
public uuid	getkeyconstraintid
return keyconstraintid
/**
* does this constraint have a backing index?
*
* @return boolean	whether or not there is a backing index for this constraint.
*/
public boolean hasbackingindex
return true
/**
* gets a referential action rule on a  delete
* @return referential rule defined by the user during foreign key creattion
* for a delete (like cascde , restrict ..etc)
*/
public int	getradeleterule
return radeleterule
/**
* gets a referential action rule on a update
* @return referential rule defined by the user during foreign key creattion
* for an update (like cascde , restrict ..etc)
*/
public int	getraupdaterule
return raupdaterule
/**
* convert the subkeyconstraintdescriptor to a string.
*
* @return	a string representation of this subconstraintdescriptor
*/
public string	tostring
if  sanitymanager debug
return     indexid
keyconstraintid
radeleterule
raupdaterule
super tostring
else
return