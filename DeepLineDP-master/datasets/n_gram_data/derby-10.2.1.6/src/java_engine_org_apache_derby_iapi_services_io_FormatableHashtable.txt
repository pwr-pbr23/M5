/*
derby - class org.apache.derby.iapi.services.io.formatablehashtable
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi services io
import org apache derby iapi services io arrayinputstream
import org apache derby iapi services io storedformatids
import org apache derby iapi services io formatidutil
import org apache derby iapi services io formatable
import org apache derby iapi services sanity sanitymanager
import java util hashtable
import java util enumeration
import java io objectoutput
import java io objectinput
import java io ioexception
/**
* a formatable holder for a java.util.hashtable.
* used to avoid serializing properties.
*/
public class formatablehashtable extends hashtable implements formatable
/********************************************************
**
**	this class implements formatable. that means that it
**	can write itself to and from a formatted stream. if
**	you add more fields to this class, make sure that you
**	also write/read them with the writeexternal()/readexternal()
**	methods.
**
**	if, inbetween releases, you add more fields to this class,
**	then you should bump the version number emitted by the gettypeformatid()
**	method.
**
********************************************************/
/**
* niladic constructor for formatable
*/
public formatablehashtable
/**
* our special put method that wont barf
* on a null value.
* @see java.util.hashtable
*/
public object put object key  object value
if  value    null
return remove key
if  sanitymanager debug
if   value instanceof formatableintholder
value instanceof formatablelongholder
value instanceof java io serializable        value instanceof formatable         value instanceof string
if   value getclass   isarray
// system.out.println("key " + key + " class " + value.getclass());
//new throwable().printstacktrace(system.out);
//system.exit(1);
return super put key  value
public void putint object key  int value
super put key  new formatableintholder value
public int getint object key
return   formatableintholder  get key   getint
public void putlong object key  long value
super put key  new formatablelongholder value
public long getlong object key
return   formatablelongholder  get key   getlong
public void putboolean object key  boolean value
putint key value ? 1   0
public boolean getboolean object key
return getint key     0 ? false   true
//////////////////////////////////////////////
//
// formatable
//
//////////////////////////////////////////////
/**
* write the hash table out.  step through
* the enumeration and write the strings out
* in utf.
*
* @param out write bytes here
*
* @exception ioexception thrown on error
*/
public void writeexternal objectoutput out  throws ioexception
out writeint size
for  enumeration e   keys    e hasmoreelements
object key   e nextelement
out writeobject key
out writeobject get key
if  sanitymanager debug
object value   get key
if  value instanceof formatable
sanitymanager throwassert   value getclass   getname
/**
* read the hash table from a stream of stored objects.
*
* @param in read this.
*
* @exception ioexception					thrown on error
* @exception classnotfoundexception		thrown on error
*/
public void readexternal objectinput in
throws ioexception  classnotfoundexception
int size   in readint
for    size > 0  size
super put in readobject    in readobject
public void readexternal arrayinputstream in
throws ioexception  classnotfoundexception
int size   in readint
for    size > 0  size
super put in readobject    in readobject
/**
* get the formatid which corresponds to this class.
*
*	@return	the formatid of this class
*/
public	int	gettypeformatid  	  return storedformatids formatable_hashtable_v01_id