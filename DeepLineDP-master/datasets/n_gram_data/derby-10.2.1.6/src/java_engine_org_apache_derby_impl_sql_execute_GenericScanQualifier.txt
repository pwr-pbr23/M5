/*
derby - class org.apache.derby.impl.sql.execute.genericscanqualifier
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl sql execute
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi error standardexception
import org apache derby iapi sql execute scanqualifier
import org apache derby iapi store access qualifier
import org apache derby iapi types datavaluedescriptor
/**
*	this is the implementation for scanqualifier.  it is used for system and user
*  scans.
*
*	@version 0.1
*	@author jerry brenner
*/
public class genericscanqualifier implements scanqualifier
private int                 columnid           1
private datavaluedescriptor orderable         null
private int                 operator           1
private boolean             negatecr          false
private boolean             orderednulls      false
private boolean             unknownrv         false
private boolean             properinit        false
public genericscanqualifier
/*
* qualifier interface
*/
/**
* @see qualifier#getcolumnid
*/
public int getcolumnid
if  sanitymanager debug
sanitymanager assert properinit
return columnid
/**
* @see qualifier#getorderable
*/
public datavaluedescriptor getorderable
if  sanitymanager debug
sanitymanager assert properinit
return orderable
/** get the operator to use in the comparison.
*
*  @see qualifier#getoperator
**/
public int getoperator
if  sanitymanager debug
sanitymanager assert properinit
return operator
/** should the result from the compare operation be negated?  if true
*  then only rows which fail the compare operation will qualify.
*
*  @see qualifier#negatecompareresult
**/
public boolean negatecompareresult
if  sanitymanager debug
sanitymanager assert properinit
return negatecr
/** get the getorderednulls argument to use in the comparison.
*
*  @see qualifier#getorderednulls
**/
public boolean getorderednulls
if  sanitymanager debug
sanitymanager assert properinit
return orderednulls
/** get the getorderednulls argument to use in the comparison.
*
*  @see qualifier#getunknownrv
**/
public boolean getunknownrv
if  sanitymanager debug
sanitymanager assert properinit
return unknownrv
/** clear the datavaluedescriptor cache, if one exists.
*  (the datavaluedescriptor can be 1 of 3 types:
*		o  variant		  - cannot be cached as its value can
*							vary within a scan
*		o  scan_invariant - can be cached within a scan as its
*							value will not change within a scan
*		o  query_invariant- can be cached across the life of the query
*							as its value will never change
*		o  constant		  - immutable
*
*  @see qualifier#getunknownrv
*/
public void clearorderablecache
// no orderable caching in scanqualifiers
/**
* this method reinitializes all the state of
* the qualifier.  it is used to distinguish between
* resetting something that is query invariant
* and something that is constant over every
* execution of a query.  basically, clearorderablecache()
* will only clear out its cache if it is a variant
* or scan_invariant value.  however, each time a
* query is executed, the query_invariant qualifiers need
* to be reset.
*/
public void reinitialize
/*
* scanqualifier interface
*/
/**
* @see scanqualifier#setqualifier
*/
public void setqualifier
int                 columnid
datavaluedescriptor orderable
int                 operator
boolean             negatecr
boolean             orderednulls
boolean             unknownrv
this columnid   columnid
this orderable   orderable
this operator   operator
this negatecr   negatecr
this orderednulls   orderednulls
this unknownrv   unknownrv
properinit   true