/*
derby - class org.apache.derby.iapi.jdbc.jdbcboot
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi jdbc
import org apache derby iapi reference property
import org apache derby iapi reference messageid
import org apache derby iapi jdbc authenticationservice
import org apache derby iapi error standardexception
import org apache derby iapi services property propertyutil
import org apache derby iapi services monitor monitor
import java util properties
import java io printstream
/**
a class to boot a cloudscape system that includes a jdbc driver.
should be used indirectly through jdbcdriver or jdbcservletboot
or any other useful booting mechanism that comes along.
*/
public class jdbcboot
private properties bootproperties
private static final string network_server_autostart_class_name
public jdbcboot
bootproperties   new properties
void addproperty string name  string value
bootproperties put name  value
/**
boot a system requesting a jdbc driver but only if there is
no current jdbc driver that is handling the required protocol.
*/
public void boot string protocol  printstream logging
if  org apache derby jdbc internaldriver activedriver      null
// request that the internaldriver (jdbc) service and the
// authentication service be started.
//
addproperty
addproperty    authenticationservice module
monitor startmonitor bootproperties  logging
/* the network server starter module is started differently from other modules because
* 1. its start is conditional, depending on a system property, and propertyutil.getsystemproperty
*    does not work until the monitor has started,
* 2. we do not want the server to try to field requests before cloudscape has booted, and
* 3. if the module fails to start we want to log a message to the error log and continue as
*    an embedded database.
*/
if  boolean valueof propertyutil getsystemproperty property start_drda   booleanvalue
try
monitor startsystemmodule  network_server_autostart_class_name
catch  standardexception se
monitor logtextmessage  messageid conn_network_server_start_exception
se getmessage