/*
derby - class org.apache.derby.iapi.util.propertyutil
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi util
import java util properties
import java util enumeration
import java io inputstream
import java io ioexception
public class propertyutil
//////////////////////////////////////////////////////////////////////////////
//
//	sorts a property list and stringifies the sorted properties
//
/////////////////////////////////////////////////////////////////////////////
/**
*	sorts a property list and turns the sorted list into a string.
*
*	@param	list	property list to sort
*
*	@return	a string version of the sorted list
*/
public	static	string	sortproperties  properties list
// stringify them with no indentation
return sortproperties list  null
/**
* sorts property list and print out each key=value pair prepended with
* specific indentation.  if indent is null, do not prepend with
* indentation.
*
* the output string shows up in two styles, style 1 looks like
* { key1=value1, key2=value2, key3=value3 }
*
* style 2 looks like
*		key1=value1
*		key2=value2
*		key3=value3
* where indent goes between the new line and the keys
*
* to get style 1, pass in a null indent
* to get sytle 2, pass in non-null indent (whatever you want to go before
* the key value)
*/
public	static	string	sortproperties  properties list  string indent
int				size   list    null ? 0   list size
int				count   0
string		array   new string
string			key
string			value
stringbuffer	buffer
// calculate the number of properties in the property list and
// build an array of all the property names.
// we need to go thru the enumeration because properties has a
// recursive list of defaults.
if  list    null
for  enumeration propertynames   list propertynames
propertynames hasmoreelements
if  count    size
// need to expand the array
size   size 2
string expandedarray   new string
system arraycopy array  0  expandedarray  0  count
array   expandedarray
key    string  propertynames nextelement
array   key
// now sort the array
java util arrays sort array  0  count
// now stringify the array
buffer   new stringbuffer
if  indent    null
buffer append
for   int ictr   0  ictr < count  ictr
if   ictr > 0    indent    null
buffer append
key   array
if  indent    null
buffer append  indent
buffer append  key    buffer append
value   list getproperty  key
buffer append  value
if  indent    null
buffer append
if  indent    null
buffer append
return	buffer tostring
/**
* copy a set of properties from one property to another.
* <p>
*
* @param src_prop  source set of properties to copy from.
* @param dest_prop dest properties to copy into.
*
**/
public static void copyproperties properties src_prop  properties dest_prop
for  enumeration propertynames   src_prop propertynames
propertynames hasmoreelements
object key   propertynames nextelement
dest_prop put key  src_prop get key
/**
* read a set of properties from the received input stream, strip
* off any excess white space that exists in those property values,
* and then add those newly-read properties to the received
* properties object; not explicitly removing the whitespace here can
* lead to problems.
*
* this method exists because of the manner in which the jvm reads
* properties from file--extra spaces are ignored after a _key_, but
* if they exist at the _end_ of a property decl line (i.e. as part
* of a _value_), they are preserved, as outlined in the java api:
*
* "any whitespace after the key is skipped; if the first non-
* whitespace character after the key is = or :, then it is ignored
* and any whitespace characters after it are also skipped. all
* remaining characters on the line become part of the associated
* element string."
*
* @param	istr an input stream from which the new properties are to be
*  loaded (should already be initialized).
* @param prop a set of properties to which the properties from
*  istr will be added (should already be initialized).
* properties loaded from 'istr' (with the extra whitespace (if any)
*  removed from all values), will be returned via the parameter.
*
**/
public static void loadwithtrimmedvalues inputstream istr
properties prop  throws ioexception
if   istr    null      prop    null
// shouldn't happen; just ignore this call and return.
return
// else, load the properties from the received input stream.
properties p   new properties
p load istr
// now, trim off any excess whitespace, if any, and then
// add the properties from file to the received properties
// set.
for  enumeration propkeys   p propertynames
propkeys hasmoreelements
// get the value, trim off the whitespace, then store it
// in the received properties object.
string tmpkey    string propkeys nextelement
string tmpvalue   p getproperty tmpkey
tmpvalue   tmpvalue trim
prop put tmpkey  tmpvalue
return