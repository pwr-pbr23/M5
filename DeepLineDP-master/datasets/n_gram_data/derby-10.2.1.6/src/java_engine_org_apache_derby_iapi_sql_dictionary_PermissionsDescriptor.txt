/*
derby - class org.apache.derby.iapi.sql.dictionary.permissionsdescriptor
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi sql dictionary
import org apache derby catalog uuid
import org apache derby iapi error standardexception
import org apache derby iapi sql depend provider
import org apache derby iapi sql dictionary datadictionary
import org apache derby iapi services sanity sanitymanager
/**
* this class is used by rows in the sys.systableperms, sys.syscolperms, and sys.sysroutineperms
* system tables.
*/
public abstract class permissionsdescriptor extends tupledescriptor
implements cloneable  provider
protected uuid oid
private string grantee
private final string grantor
permissionsdescriptor  datadictionary dd
string grantee
string grantor
super  dd
this grantee   grantee
this grantor   grantor
public object clone
try
return super clone
catch  java lang clonenotsupportedexception cnse
if  sanitymanager debug
sanitymanager throwassert      getclass   getname
return null
public abstract int getcatalognumber
/**
* @return true iff the key part of this permissions descriptor equals the key part of another permissions
*		 descriptor.
*/
protected boolean keyequals  permissionsdescriptor other
return grantee equals  other grantee
/**
* @return the hashcode for the key part of this permissions descriptor
*/
protected int keyhashcode
return grantee hashcode
public void setgrantee  string grantee
this grantee   grantee
/*----- getter functions for rowfactory ------*/
public final string getgrantee     return grantee
public final string getgrantor     return grantor
/**
* gets the uuid of the table.
*
* @return	the uuid of the table.
*/
public uuid	getuuid     return oid
/**
* sets the uuid of the table
*
* @param oid	the uuid of the table to be set in the descriptor
*/
public void setuuid uuid oid   	this oid   oid
/**
* this method checks if the passed authorization id is same as the owner
* of the object on which this permission is defined. this method gets
* called by create view/constraint/trigger to see if this permission
* needs to be saved in dependency system for the view/constraint/trigger.
* if the same user is the owner of the the object being accessed and the
* newly created object, then no need to keep this privilege dependency
*
* @return boolean	if passed authorization id is owner of the table
*/
public abstract boolean checkowner string authorizationid  throws standardexception
//////////////////////////////////////////////
//
// provider interface
//
////////////////////////////////////////////////////////////////////
/**
* get the provider's uuid
*
* @return 	the provider's uuid
*/
public uuid getobjectid
return oid
/**
* is this provider persistent?  a stored dependency will be required
* if both the dependent and provider are persistent.
*
* @return boolean              whether or not this provider is persistent.
*/
public boolean ispersistent
return true