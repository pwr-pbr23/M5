/*
derby - class org.apache.derby.impl.sql.compile.createindexnode
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package	org apache derby impl sql compile
import org apache derby iapi services context contextmanager
import org apache derby iapi sql resultset
import org apache derby iapi sql compile compilercontext
import org apache derby iapi sql dictionary columndescriptor
import org apache derby iapi sql dictionary datadictionarycontext
import org apache derby iapi sql dictionary datadictionary
import org apache derby iapi sql dictionary schemadescriptor
import org apache derby iapi sql dictionary tabledescriptor
import org apache derby iapi sql dictionary datadescriptorgenerator
import org apache derby iapi sql dictionary columndescriptor
import org apache derby iapi reference sqlstate
import org apache derby iapi reference limits
import org apache derby iapi reference property
import org apache derby iapi sql execute constantaction
import org apache derby iapi error standardexception
import org apache derby iapi services monitor monitor
import org apache derby iapi services property propertyutil
import org apache derby iapi services sanity sanitymanager
import org apache derby impl sql compile activationclassbuilder
import org apache derby impl sql execute baseactivation
import org apache derby impl sql execute columninfo
import org apache derby iapi types datatypedescriptor
import org apache derby catalog uuid
import java util hashtable
import java util properties
import java util vector
/**
* a createindexnode is the root of a querytree that represents a create index
* statement.
*
* @author jeff lichtman
*/
public class createindexnode extends ddlstatementnode
boolean				unique
datadictionary		dd   null
properties			properties
string				indextype
tablename			indexname
tablename			tablename
vector				columnnamelist
string			columnnames   null
boolean			isascending
int				boundcolumnids
tabledescriptor		td
/**
* initializer for a createindexnode
*
* @param unique	true means it's a unique index
* @param indextype	the type of index
* @param indexname	the name of the index
* @param tablename	the name of the table the index will be on
* @param columnnamelist	a list of column names, in the order they
*							appear in the index.
* @param properties	the optional properties list associated with the index.
*
* @exception standardexception		thrown on error
*/
public void init
object unique
object indextype
object indexname
object tablename
object columnnamelist
object properties
throws standardexception
initandcheck indexname
this unique     boolean  unique  booleanvalue
this indextype    string  indextype
this indexname    tablename  indexname
this tablename    tablename  tablename
this columnnamelist    vector  columnnamelist
this properties    properties  properties
/**
* convert this object to a string.  see comments in querytreenode.java
* for how this should be done for tree printing.
*
* @return	this object as a string
*/
public string tostring
if  sanitymanager debug
return super tostring
unique
indextype
indexname
tablename
properties
else
return
public string statementtostring
return
public	boolean				getuniqueness     return unique
public	string				getindextype     return indextype
public	tablename			getindexname     return indexname
public	uuid				getboundtableid     return td getuuid
public	properties			getproperties     return properties
public  tablename			getindextablename    return tablename
public  string			getcolumnnames     return columnnames
// get 1-based column ids
public	int				getkeycolumnids     return boundcolumnids
public	boolean			getisascending     return isascending
// we inherit the generate() method from ddlstatementnode.
/**
* bind this createindexnode.  this means doing any static error
* checking that can be done before actually creating the table.
* for example, verifying that the column name list does not
* contain any duplicate column names.
*
* @return	the bound query tree
*
* @exception standardexception		thrown on error
*/
public querytreenode bind   throws standardexception
compilercontext			cc   getcompilercontext
datadictionary			dd   getdatadictionary
schemadescriptor		sd
int						columncount
sd   getschemadescriptor
td   gettabledescriptor tablename
//throw an exception if user is attempting to create an index on a temporary table
if  td gettabletype      tabledescriptor global_temporary_table_type
throw standardexception newexception sqlstate lang_not_allowed_for_declared_global_temp_table
//if total number of indexes on the table so far is more than 32767, then we need to throw an exception
if  td gettotalnumberofindexes   > limits db2_max_indexes_on_table
throw standardexception newexception sqlstate lang_too_many_indexes_on_table
string valueof td gettotalnumberofindexes
tablename
string valueof limits db2_max_indexes_on_table
/* validate the column name list */
verifyandgetuniquenames
columncount   columnnames length
boundcolumnids   new int
// verify that the columns exist
for  int i   0  i < columncount  i
columndescriptor			columndescriptor
columndescriptor   td getcolumndescriptor columnnames
if  columndescriptor    null
throw standardexception newexception sqlstate lang_column_not_found_in_table
columnnames
tablename
boundcolumnids   columndescriptor getposition
// don't allow a column to be created on a non-orderable type
if     columndescriptor gettype   gettypeid
orderable getclassfactory
throw standardexception newexception sqlstate lang_column_not_orderable_during_execution
columndescriptor gettype   gettypeid   getsqltypename
/* check for number of key columns to be less than 16 to match db2 */
if  columncount > 16
throw standardexception newexception sqlstate lang_too_many_index_key_cols
/* see if the index already exists in this schema.
* note: we still need to check at execution time
* since the index name is only unique to the schema,
* not the table.
*/
//  		if (dd.getconglomeratedescriptor(indexname.gettablename(), sd, false) != null)
//  		{
//  			throw standardexception.newexception(sqlstate.lang_object_already_exists_in_object,
//  												 "index",
//  												 indexname.gettablename(),
//  												 "schema",
//  												 sd.getschemaname());
//  		}
/* statement is dependent on the tabledescriptor */
getcompilercontext   createdependency td
return this
/**
* return true if the node references session schema tables (temporary or permanent)
*
* @return	true if references session schema tables, else false
*
* @exception standardexception		thrown on error
*/
public boolean referencessessionschema
throws standardexception
//if create index is on a session schema table, then return true.
return issessionschema td getschemaname
/**
* create the constant information that will drive the guts of execution.
*
* @exception standardexception		thrown on failure
*/
public constantaction	makeconstantaction   throws standardexception
long 					conglomid   0
schemadescriptor		sd   getschemadescriptor
int columncount   columnnames length
int approxlength   0
boolean index_has_long_column   false
// bump the page size for the index,
// if the approximate sizes of the columns in the key are
// greater than the bump threshold.
// ideally, we would want to have atleast 2 or 3 keys fit in one page
// with fix for beetle 5728, indexes on long types is not allowed
// so we do not have to consider key columns of long types
for  int i   0  i < columncount  i
columndescriptor columndescriptor   td getcolumndescriptor columnnames
datatypedescriptor dts   columndescriptor gettype
approxlength    dts gettypeid   getapproximatelengthinbytes dts
if  approxlength > property idx_page_size_bump_threshold
if    properties    null
properties get property page_size_parameter     null
propertyutil getserviceproperty
getlanguageconnectioncontext   gettransactioncompile
property page_size_parameter     null
// do not override the user's choice of page size, whether it
// is set for the whole database or just set on this statement.
if  properties    null
properties   new properties
properties put
property page_size_parameter
property page_size_default_long
return	getgenericconstantactionfactory   getcreateindexconstantaction unique
indextype
sd getschemaname
indexname gettablename
tablename gettablename
td getuuid
conglomid
columnnames
isascending
false

properties
/**
* check the uniqueness of the column names within the derived column list.
*
* @exception standardexception	thrown if column list contains a
*											duplicate name.
*/
private void verifyandgetuniquenames
throws standardexception
int size   columnnamelist size
hashtable	ht   new hashtable size   2   float   999
columnnames   new string
isascending   new boolean
for  int index   0  index < size  index
/* verify that this column's name is unique within the list
* having a space at the end meaning descending on the column
*/
columnnames    string  columnnamelist elementat index
if  columnnames endswith
columnnames   columnnames substring 0  columnnames length     1
isascending   false
else
isascending   true
object object   ht put columnnames  columnnames
if  object    null
string  object  equals columnnames
throw standardexception newexception sqlstate lang_duplicate_column_name_create_index  columnnames