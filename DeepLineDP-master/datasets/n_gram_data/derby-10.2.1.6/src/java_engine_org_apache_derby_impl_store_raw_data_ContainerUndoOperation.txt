/*
derby - class org.apache.derby.impl.store.raw.data.containerundooperation
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl store raw data
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi services io formatidutil
import org apache derby iapi services io storedformatids
import org apache derby iapi store raw compensation
import org apache derby iapi store raw containerhandle
import org apache derby iapi store raw loggable
import org apache derby iapi store raw transaction
import org apache derby iapi store raw undoable
import org apache derby iapi store raw data rawcontainerhandle
import org apache derby iapi store raw log loginstant
import org apache derby iapi error standardexception
import java io inputstream
import java io objectoutput
import java io objectinput
import java io ioexception
import org apache derby iapi services io limitobjectinput
/** a container undo operation rolls back the change of a container operation */
public class containerundooperation extends containerbasicoperation
implements compensation
// the operation to rollback
transient private	containeroperation undoop
/** during redo, the whole operation will be reconstituted from the log */
/**
set up a container undo operation during run time rollback
@exception standardexception container handle is not active
*/
public containerundooperation rawcontainerhandle hdl  containeroperation op
throws standardexception
super hdl
undoop   op
/*
* formatable methods
*/
// no-arg constructor, required by formatable
public containerundooperation     super
public void writeexternal objectoutput out  throws ioexception
super writeexternal out
/**
@exception ioexception cannot read log record from log stream
@exception classnotfoundexception cannot read bytearray object
*/
public void readexternal objectinput in
throws ioexception  classnotfoundexception
super readexternal in
/**
return my format identifier.
*/
public int gettypeformatid
return storedformatids logop_container_undo
/**
compensation method
*/
/** set up a container undo operation during recovery redo. */
public void setundoop undoable op
if  sanitymanager debug
sanitymanager assert op instanceof containeroperation
undoop    containeroperation op
/**
loggable methods
*/
/** apply the undo operation, in this implementation of the
rawstore, it can only call the undome method of undoop
@param xact			the transaction that is doing the rollback
@param instant		the log instant of this compenstaion operation
@param in			optional data
@exception ioexception can be thrown by any of the methods of objectinput.
@exception standardexception standard cloudscape policy.
@see containeroperation#generateundo
*/
public final void dome transaction xact  loginstant instant  limitobjectinput in
throws standardexception  ioexception
if  sanitymanager debug
sanitymanager assert containerhdl    null
// if this is called during runtime rollback, generateundo found
// the container and have it opened there.
// if this is called during recovery redo, this.needsredo found
// the container and have it opened here.
//
// in either case, containerhdl is the opened container handle.
undoop undome xact  containerhdl  instant  in
releaseresource xact
/* make sure resource found in undoop is released */
public void releaseresource transaction xact
if  undoop    null
undoop releaseresource xact
super releaseresource xact
/* undo operation is a compensation log operation */
public int group
return super group     loggable compensation   loggable rawstore