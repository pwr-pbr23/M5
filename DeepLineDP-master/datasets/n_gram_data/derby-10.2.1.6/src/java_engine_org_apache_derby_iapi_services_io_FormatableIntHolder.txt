/*
derby - class org.apache.derby.iapi.services.io.formatableintholder
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi services io
import org apache derby iapi services io arrayinputstream
import org apache derby iapi services io formatable
import org apache derby iapi services io formatidutil
import org apache derby iapi services io storedformatids
import java io objectoutput
import java io objectinput
import java io ioexception
/**
* a formatable holder for an int.
*/
public class formatableintholder implements formatable
/********************************************************
**
**	this class implements formatable. that means that it
**	can write itself to and from a formatted stream. if
**	you add more fields to this class, make sure that you
**	also write/read them with the writeexternal()/readexternal()
**	methods.
**
**	if, inbetween releases, you add more fields to this class,
**	then you should bump the version number emitted by the gettypeformatid()
**	method.
**
********************************************************/
// the int
private int theint
/**
* niladic constructor for formatable
*/
public formatableintholder
/**
* construct a formatableintholder using the input int.
*
* @param theint the int to hold
*/
public formatableintholder int theint
this theint   theint
/**
* set the held int to the input int.
*
* @param theint the int to hold
*/
public void setint int theint
this theint   theint
/**
* get the held int.
*
* @return	the held int.
*/
public int getint
return theint
/**
* create and return an array of formatableintholders
* given an array of ints.
*
* @param theints	the array of ints
*
* @return	an array of formatableintholders
*/
public static formatableintholder getformatableintholders int theints
if  theints    null
return null
formatableintholder fiharray   new formatableintholder
for  int index   0  index < theints length  index
fiharray   new formatableintholder theints
return fiharray
//////////////////////////////////////////////
//
// formatable
//
//////////////////////////////////////////////
/**
* write this formatable out
*
* @param out write bytes here
*
* @exception ioexception thrown on error
*/
public void writeexternal objectoutput out  throws ioexception
out writeint theint
/**
* read this formatable from a stream of stored objects.
*
* @param in read this.
*
* @exception ioexception					thrown on error
*/
public void readexternal objectinput in
throws ioexception
theint   in readint
public void readexternal arrayinputstream in
throws ioexception
theint   in readint
/**
* get the formatid which corresponds to this class.
*
*	@return	the formatid of this class
*/
public	int	gettypeformatid  	  return storedformatids formatable_int_holder_v01_id