/*
derby - class org.apache.derby.iapi.services.cache.classsize
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi services cache
import org apache derby iapi services sanity sanitymanager
import java lang class
import java lang reflect field
import java lang runtime
import java lang interruptedexception
import java lang reflect modifier
public class classsize
public static final int refsize
private static final int objectoverhead   2     references  not bytes
private static final int booleansize   4
private static final int charsize   4     unicode
private static final int shortsize   4
private static final int intsize   4
private static final int longsize   8
private static final int floatsize   4
private static final int doublesize   8
private static final int minobjectsize
private static boolean dummycatalog   false     used when constructing the catalog to prevent recursion
static boolean noguess   false
// noguess is used in unit testing.
static boolean unittest   false
// unittest is used in unit testing
private static final int wildguess    0 16
/* the standard wild guess of the size of an unknown class, the size of 16 references.
* used when the security manager will not let us look at the class fields.
*/
/* do not let the compiler see classsizecatalog. otherwise it will try to
* compile it. this may fail because classsizecatalog.java is not created
* until everything else has been compiled. bury classsizecatalog in a string.
*/
private static java util hashtable catalog
static
try
catalog    java util hashtable
class forname     newinstance
catch  exception e
// figure out whether this is a 32 or 64 bit machine.
runtime runtime   runtime getruntime
long membase   runtime totalmemory     runtime freememory
object junk   new object
long memused   runtime totalmemory     runtime freememory     membase
int sz    int   memused   junk length 2  junk length
refsize     4 > sz  ? 4   sz
minobjectsize   4 refsize
/**
* do not try to use the catalog.
*/
public static void setdummycatalog
dummycatalog   true
/**
* get the estimate of the size of an object reference.
*
* @return the estimate in bytes.
*/
public static int getrefsize
return refsize
/**
* @return the estimate of the size of a primitive int
*/
public static int getintsize
return intsize
/**
* the estimate of the size of a class instance depends on whether the jvm uses 32 or 64
* bit addresses, that is it depends on the size of an object reference. it is a linear
* function of the size of a reference, e.g.
*    24 + 5*r
* where r is the size of a reference (usually 4 or 8 bytes).
*
* this method returns the coefficients of the linear function, e.g. {24, 5} in the above
* example.
*
* @param cl a class whose instance size is to be estimated
* @return an array of 2 integers. the first integer is the constant part of the function,
*         the second is the reference size coefficient.
*/
public static int getsizecoefficients  class cl
int coeff    0  objectoverhead
for    null    cl  cl   cl getsuperclass
field field   cl getdeclaredfields
if  null    field
for  int i   0  i < field length  i
if    modifier isstatic  field getmodifiers
class fieldclass   field gettype
if  fieldclass isarray        fieldclass isprimitive
coeff
else    is simple primitive
string name   fieldclass getname
if  name equals        name equals
coeff    intsize
else if  name equals        name equals
coeff    longsize
else if  name equals        name equals
coeff    booleansize
else if  name equals        name equals
coeff    shortsize
else if  name equals        name equals
coeff    1
else if  name equals        name equals
coeff    charsize
else if  name equals        name equals
coeff    floatsize
else if  name equals        name equals
coeff    doublesize
else    what is this??
coeff       make a guess  one reference  ?
return coeff
end of getsizecoefficients
/**
* estimate the static space taken up by a class instance given the coefficients
* returned by getsizecoefficients.
*
* @param coeff the coefficients
*
* @return the size estimate, in bytes
*/
public static int estimatebasefromcoefficients  int coeff
int size   coeff   coeff refsize
// round up to a multiple of 8
size    size   7  8
size    8
return  size < minobjectsize  ? minobjectsize   size
end of estimatebasefromcoefficients
/**
* estimate the static space taken up by a class instance from cataloged coefficients.
*
* @param cls the class
*
* @return the size estimate, in bytes
*
* @see #estimatebasefromcoefficients
* @see #getsizecoefficients
* see org.apache.derbybuild.classsizecrawler
*/
public static int estimatebasefromcatalog  class cls
return estimatebasefromcatalog  cls  false
private static int estimatebasefromcatalog  class cls  boolean addtocatalog
if  dummycatalog
return 0
if  sanitymanager debug
sanitymanager assert  catalog    null
int coeff    int  catalog get  cls getname
if  coeff    null
try
coeff   getsizecoefficients  cls
catch  throwable t
if  noguess
return  2
coeff   wildguess
if  addtocatalog
catalog put  cls getname    coeff
return estimatebasefromcoefficients  coeff
end of estimatebasefromcatalog
/**
* estimate the static space taken up by a class instance. save the coefficients
* in a catalog.
*
* @param cls the class
*
* @return the size estimate, in bytes
*
* @see #estimatebasefromcoefficients
* @see #getsizecoefficients
* see org.apache.derbybuild.classsizecrawler
*/
public static int estimateandcatalogbase  class cls
return estimatebasefromcatalog  cls  true
end of estimateandcatalogbase
/**
* estimate the static space taken up by the fields of a class. this includes the space taken
* up by by references (the pointer) but not by the referenced object. so the estimated
* size of an array field does not depend on the size of the array. similarly the size of
* an object (reference) field does not depend on the object.
*
* @return the size estimate in bytes.
*
* note that this method will throw a securityexception if the securitymanager does not
* let this class execute the method class.getdeclaredfields(). if this is a concern try
* to compute the size coefficients at build time.
* see org.apache.derbybuild.classsizecrawler
* @see #estimatebasefromcatalog
*/
public static int estimatebase  class cl
return estimatebasefromcoefficients  getsizecoefficients  cl
end of estimatebase
/**
* @return the estimated overhead of an array. the estimated size of an x[n] array is
* estimatearrayoverhead() + n*sizeof(x).
*/
public static int estimatearrayoverhead
return minobjectsize
/**
* estimate the size of a hashtable entry. in java 1.2 we can use map.entry, but this is not
* available in earlier versions of java.
*
* @return the estimate, in bytes
*/
public static int estimatehashentrysize
return objectoverhead   3 refsize
/**
* estimate the size of a string.
*
* @return the estimated size, in bytes
*/
public static int estimatememoryusage  string str
if  null    str
return 0
// since java uses unicode assume that each character takes 2 bytes
return 2 str length