/*
derby - class org.apache.derby.iapi.types.datetimeparser
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi types
import org apache derby iapi reference sqlstate
import org apache derby iapi error standardexception
/**
* this class provides a simple regular expression parser for standard format dates, times, and timestamps
*/
class datetimeparser
private string str
private string trimmedstring
private int len
private int fieldstart
private char currentseparator
datetimeparser  string str
this str   str
len   str length
/**
* parse the next integer.
*
* @param maxdigits the maximum number of digits
* @param truncationallowed if true then leading zeroes may be ommitted. if false then the integer must be
*                          exactly ndigits long.
* @param separator the separator at the end of the integer. if zero then the integer must be at the end of the string
*                  but may be followed by spaces.
* @param isfraction if true then the returned integer will be multiplied by 10**(maxdigits - actualdigitcount)
*
* @return the integer.
*
* @exception standardexception invalid syntax.
*/
int parseint  int maxdigits  boolean truncationallowed  char separator  boolean isfraction
throws standardexception
int number   0
char c
int digitcount   0
for    fieldstart < len  fieldstart
c   str charat  fieldstart
if  character isdigit  c
if  digitcount >  maxdigits
throw standardexception newexception  sqlstate lang_date_syntax_exception
digitcount
number   number 10   character digit  c  10
else
break
if  truncationallowed ?  digitcount    0     isfraction     digitcount    maxdigits
throw standardexception newexception  sqlstate lang_date_syntax_exception
updatecurrentseparator
if  separator    null
// separator not required
if  fieldstart < len
fieldstart
else
int sepidx
for  sepidx   0  sepidx < separator length  sepidx
if  separator    0
if  currentseparator    separator
fieldstart
break
else
// separator[sepidx] matches the end of the string
int j
for  j   fieldstart  j < len  j
if  str charat  j
break
if  j    len
fieldstart   j
break
if  sepidx >  separator length
throw standardexception newexception  sqlstate lang_date_syntax_exception
if  isfraction
for int i   digitcount  i < maxdigits  i
number    10
return number
end of parseint
/**
* determine if the next characters are one of a choice of strings.
*
* @param choices an array of strings.
*
* @return an index in choices.
*
* @exception standardexception if the next characters are not in choices.
*/
int parsechoice  string choices  throws standardexception
for  int choiceidx   0  choiceidx < choices length  choiceidx
string choice   choices
int choicelen   choice length
if  fieldstart   choicelen <  len
int i
for  i   0  i < choicelen  i
if  choice charat  i     str charat  fieldstart   i
break
if  i    choicelen
fieldstart    choicelen
updatecurrentseparator
return choiceidx
throw standardexception newexception  sqlstate lang_date_syntax_exception
end of parsechoice
private void updatecurrentseparator
if  fieldstart >  len
currentseparator   0
else
currentseparator   str charat  fieldstart
if  currentseparator
// trailing spaces are always ok. see if we are really at the end
for  int i   fieldstart   1  i < len  i
if  str charat  i
return
currentseparator   0
fieldstart   len
end of updatecurrentseparator
/**
* check that we are at the end of the string: that the rest of the characters, if any, are blanks.
*
* @return the original string with trailing blanks trimmed off.
* @exception standardexception if there are more non-blank characters.
*/
string checkend   throws standardexception
int end   fieldstart
for    fieldstart < len  fieldstart
if  str charat  fieldstart
throw standardexception newexception  sqlstate lang_date_syntax_exception
currentseparator   0
while  end > 0    str charat  end   1
end
trimmedstring    end    len  ? str   str substring  0  end
return trimmedstring
end of checkend
/**
* get the parsed string with trailing blanks removed. <b>this method is only valid after checkend
* has been called.</b>
*
* @return the string with trailing blanks removed.
*/
string gettrimmedstring
return trimmedstring
/**
* @return the next separator, 0 if there are none
*/
char nextseparator
for  int i   fieldstart   1  i < len  i
char c   str charat  i
if    character isletterordigit  c
return c
return 0
/**
* @return the separator between the last parsed integer and the next integer, 0 if the parser is at
*         the end of the string.
*/
char getcurrentseparator
return currentseparator