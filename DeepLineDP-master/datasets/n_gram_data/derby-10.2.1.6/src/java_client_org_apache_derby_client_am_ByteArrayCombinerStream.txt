/*
derby - class org.apache.derby.client.am.bytearraycombinerstream
licensed to the apache software foundation (asf) under one
or more contributor license agreements.  see the notice file
distributed with this work for additional information
regarding copyright ownership.  the asf licenses this file
to you under the apache license, version 2.0 (the
"license"); you may not use this file except in compliance
with the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing,
software distributed under the license is distributed on an
"as is" basis, without warranties or conditions of any
kind, either express or implied.  see the license for the
specific language governing permissions and limitations
under the license.
*/
package org apache derby client am
import java io inputstream
import java io ioexception
import java util arraylist
/**
* a stream whose source is a list of byte arrays.
*
* this class was created when first implementing the jdbc 4 length less
* overloads in the client driver. the reason was missing support for
* streaming data with unknown length from the client to the server.
*
* the purpose of the stream is to avoid having to repeatedly copy data to grow
* the byte buffer, or doing a single big copy to combine the byte arrays in
* the end. this is important for the temporary solution, since we must
* materialize the stream to find the length anyway.
*
* if there is less data available than the specified length, an exception is
* thrown. available data is determined by the length of the byte arrays, not
* the contents of them. a byte array with all 0's is considered valid data.
*
* besides from truncation, this stream does not change the underlying data in
* any way.
*/
public class bytearraycombinerstream
extends inputstream
/** a list of the arrays to combine. */
private final arraylist arrays
/** length of the stream. */
private final long specifiedlength
/** global offset into the whole stream. */
private long goffset   0
/** index of the array we are currently reading from. */
private int arrayindex   0
/** the array we are currently reading from. */
private byte curarray
/** the local offset into the current array. */
private int off   0
/**
* create a stream whose source is a list of byte arrays.
*
* @param arraysin an <code>arraylist</code> with references to the source
*      byte arrays. the references are copied to a new
*      <code>arraylist</code> instance.
* @param length the length of the stream. never published outside
*      this object. note that the length specified can be shorter
*      than the actual number of bytes in the byte arrays.
* @throws illegalargumentexception if there is less data available than
*      specified by <code>length</code>, or <code>length</code> is
*      negative.
*/
public bytearraycombinerstream arraylist arraysin  long length
// don't allow negative length.
if  length < 0
throw new illegalargumentexception
length
this specifiedlength   length
long tmpremaining   length
if  arraysin    null    arraysin size   > 0
// copy references to the byte arrays to a new arraylist.
int arraycount   arraysin size
byte tmparray
arrays   new arraylist arraycount
// truncate data if there are more bytes then specified.
// done to simplify boundary checking in the read-methods.
for  int i 0  i < arraycount    tmpremaining > 0  i
tmparray    byte arraysin get i
if  tmpremaining < tmparray length
// create a new shrunk array.
byte shrunkarray
new byte
system arraycopy tmparray  0
shrunkarray  0  shrunkarray length
arrays add shrunkarray
tmpremaining    shrunkarray length
break
else
// add the whole array.
tmpremaining    tmparray length
arrays add tmparray
// set the first array as the current one.
curarray   nextarray
else
// specify goffset so available returns 0;
goffset   length
arrays   null
// if we don't have enough data, throw exception.
if  tmpremaining > 0
throw new illegalargumentexception
tmpremaining
length
/**
* read a single byte.
*
* @return a byte, or <code>-1</code> if the end-of-stream is reached
*/
public int read
throws ioexception
if  curarray    null
return  1
if  off >  curarray length
curarray   nextarray
if  curarray    null
return  1
goffset
return curarray
/**
* reads up to len bytes of data from the input stream into an array of
* bytes.
* an attempt is made to read as many as <code>len</code> bytes, but
* a smaller number may be read. the number of bytes actually read
* is returned as an integer.
*
* @param buf the array to copy bytes into
* @param offset offset into the array
* @param length the maximum number of bytes to read
* @return the number of bytes read, or <code>-1</code> if end-of-stream
*      is reached
*/
public int read byte buf  int offset  int length
throws ioexception
int read   0
if  curarray    null
return  1
if  length <   curarray length   off
system arraycopy curarray  off  buf  offset  length
off    length
goffset    length
read   length
else
int toread   0
while  curarray    null    read < length
toread   math min curarray length   off  length   read
system arraycopy curarray  off  buf  offset   read  toread
read    toread
goffset    toread
off    toread
if   off < curarray length
break
curarray   nextarray
return read
/**
* return the number of available bytes.
* the method assumes the specified length of the stream is correct.
*
* @return number of available bytes
*/
public int available
return  int  specifiedlength   goffset
/**
* fetch the next array to read data from.
* the reference in the <code>arraylist</code> is cleared when the array
* is "taken out".
*
* @return a <code>byte[]</code>-object, or <code>null</code> if there are
*      no more arrays
*/
private byte nextarray
if  arrayindex >  arrays size
return null
byte tmp    byte arrays get arrayindex
arrays set arrayindex    null
off   0
return tmp
end of class bytearraycombinerstream