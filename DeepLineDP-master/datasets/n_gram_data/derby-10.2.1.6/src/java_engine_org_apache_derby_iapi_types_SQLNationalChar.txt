/*
derby - class org.apache.derby.iapi.types.sqlnationalchar
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi types
import org apache derby iapi types datatypedescriptor
import org apache derby iapi types datavaluedescriptor
import org apache derby iapi types typeid
import org apache derby iapi types stringdatavalue
import org apache derby iapi types datavaluedescriptor
import org apache derby iapi types booleandatavalue
import org apache derby iapi reference sqlstate
import org apache derby iapi types orderable
import org apache derby iapi services io storable
import org apache derby iapi services io formatidutil
import org apache derby iapi services io storedformatids
import org apache derby iapi error standardexception
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi util stringutil
import org apache derby iapi services i18n localefinder
import java io objectoutput
import java io objectinput
import java io ioexception
import java io utfdataformatexception
import java io eofexception
import java sql date
import java sql resultset
import java sql sqlexception
import java sql time
import java sql timestamp
import java util locale
import java util calendar
/**
* sqlnationalchar satisfies the datavaluedescriptor
* interfaces (i.e., orderabledatatype). it implements an string holder,
* e.g. for storing a column value; it can be specified
* when constructed to not allow nulls. nullability cannot be changed
* after construction.
* <p>
* because orderabledatatype is a subclass of datatype,
* sqlnationalchar can play a role in either a datatype/valuerow
* or a orderabledatatype/keyrow, interchangeably.
*/
public class sqlnationalchar
extends sqlchar
/*
* datavaluedescriptor interface.
*
* these are actually all implemented in the super-class, but we need
* to duplicate some of them here so they can be called by byte-code
* generation, which needs to know the class the method appears in.
*/
public string gettypename
return typeid national_char_name
/*
* storable interface, implies externalizable, typedformat
*/
/**
return my format identifier.
@see org.apache.derby.iapi.services.io.typedformat#gettypeformatid
*/
public int gettypeformatid
return storedformatids sql_national_char_id
/*
* datavaluedescriptor interface
*/
/** @see datavaluedescriptor#getclone */
public datavaluedescriptor getclone
try
/* note: we pass instance variables for locale info
* because we only call methods when we know that we
* will need locale info.
*/
return new sqlnationalchar getstring    getlocalefinder
catch  standardexception se
if  sanitymanager debug
sanitymanager throwassert     se
return null
/**
* @see datavaluedescriptor#getnewnull
*
*/
public datavaluedescriptor getnewnull
/* note: we pass instance variables for locale info
* because we only call methods when we know that we
* will need locale info.
*/
sqlnationalchar result   new sqlnationalchar
result setlocalefinder getlocalefinder
return result
/*
* class interface
*/
/*
* constructors
*/
/**
no-arg constructor, required by formattable.
*/
public sqlnationalchar
public sqlnationalchar string val  localefinder localefinder
super val
setlocalefinder localefinder
/**
* @see datavaluedescriptor#getdate
* @exception standardexception thrown on failure to convert
*/
public date	getdate  calendar cal  throws standardexception
return nationalgetdate cal
/**
* @see datavaluedescriptor#gettime
* @exception standardexception thrown on failure to convert
*/
public time gettime  calendar cal  throws standardexception
return nationalgettime cal
/**
* @see datavaluedescriptor#gettimestamp
* @exception standardexception thrown on failure to convert
*/
public timestamp gettimestamp  calendar cal  throws standardexception
return nationalgettimestamp cal
/**
* @see datavaluedescriptor#setvalue
*
* @exception standardexception		thrown on error
*/
public void setvalue date thevalue  calendar cal  throws standardexception
setvalue getdateformat  cal  format thevalue
/**
* @see datavaluedescriptor#setvalue
*
* @exception standardexception		thrown on error
*/
public void setvalue time thevalue  calendar cal  throws standardexception
setvalue gettimeformat  cal  format thevalue
/**
* @see datavaluedescriptor#setvalue
*
* @exception standardexception		thrown on error
*/
public void setvalue timestamp thevalue  calendar cal  throws standardexception
setvalue gettimestampformat cal  format thevalue
/*
* datavaluedescriptor interface
*/
/** @see datavaluedescriptor#typeprecedence */
public int typeprecedence
return typeid national_char_precedence
/**
* compare two sqlchars.  this method will be overriden in the
* national char wrappers so that the appropriate comparison
* is done.
*
* @exception standardexception		thrown on error
*/
protected int stringcompare sqlchar char1  sqlchar char2
throws standardexception
return char1 stringcollatorcompare char2
/**
* get a sqlvarchar for a built-in string function.
* (could be either a sqlvarchar or sqlnationalvarchar.)
*
* @return a sqlvarchar or sqlnationalvarchar.
*/
protected stringdatavalue getnewvarchar   throws standardexception
sqlnationalvarchar result   new sqlnationalvarchar
result setlocalefinder getlocalefinder
return result
/**
* normalization method - this method may be called when putting
* a value into a sqlchar, for example, when inserting into a sqlchar
* column.  see normalizeresultset in execution.
*
* @param desiredtype	the type to normalize the source column to
* @param source		the value to normalize
*
* @exception standardexception				thrown for null into
*											non-nullable column, and for
*											truncation error
*/
public void normalize
datatypedescriptor desiredtype
datavaluedescriptor source
throws standardexception
normalize desiredtype    datatype  source  getnationalstring getlocalefinder
protected void setfrom datavaluedescriptor thevalue  throws standardexception
setvalue   datatype  thevalue  getnationalstring getlocalefinder
/**
* return whether or not this is a national character datatype.
*/
protected boolean isnationalstring
return true
/** @see java.lang.object#hashcode */
public int hashcode
return nationalhashcode