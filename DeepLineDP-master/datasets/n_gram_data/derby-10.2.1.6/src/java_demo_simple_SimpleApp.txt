/*
derby - class simpleapp
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
import java sql connection
import java sql drivermanager
import java sql resultset
import java sql sqlexception
import java sql statement
import java util properties
/**
* this sample program is a minimal jdbc application showing
* jdbc access to derby.
*
* instructions for how to run this program are
* given in <a href=example.html>example.html</a>.
*
* derby applications can run against derby running in an embedded
* or a client/server framework. when derby runs in an embedded framework,
* the derby application and derby run in the same jvm. the application
* starts up the derby engine. when derby runs in a client/server framework,
* the application runs in a different jvm from derby. the application only needs
* to start the client driver, and the connectivity framework provides network connections.
* (the server must already be running.)
*
* <p>when you run this application, give one of the following arguments:
*    * embedded (default, if none specified)
*    * derbyclient (will use the net client driver to access network server)
*    * jccjdbcclient (if derby is running embedded in the jcc server framework)
*
* @author janet
*/
public class simpleapp
/* the default framework is embedded*/
public string framework
public string driver
public string protocol
public static void main string args
new simpleapp   go args
void go string args
/* parse the arguments to determine which framework is desired*/
parsearguments args
system out println     framework
try
/*
the driver is installed by loading its class.
in an embedded environment, this will start up derby, since it is not already running.
*/
class forname driver  newinstance
system out println
connection conn   null
properties props   new properties
props put
props put
/*
the connection specifies create=true to cause
the database to be created. to remove the database,
remove the directory derbydb and its contents.
the directory derbydb will be created under
the directory that the system property
derby.system.home points to, or the current
directory if derby.system.home is not set.
*/
conn   drivermanager getconnection protocol
props
system out println
conn setautocommit false
/*
creating a statement lets us issue commands against
the connection.
*/
statement s   conn createstatement
/*
we create a table, add a few rows, and update one.
*/
s execute
system out println
s execute
system out println
s execute
system out println
s execute
system out println
s execute
system out println
/*
we select the rows and verify the results.
*/
resultset rs   s executequery
if   rs next
throw new exception
if  rs getint 1     300
throw new exception
if   rs next
throw new exception
if  rs getint 1     1910
throw new exception
if  rs next
throw new exception
system out println
s execute
system out println
/*
we release the result and statement resources.
*/
rs close
s close
system out println
/*
we end the transaction and the connection.
*/
conn commit
conn close
system out println
/*
in embedded mode, an application should shut down derby.
if the application fails to shut down derby explicitly,
the derby does not perform a checkpoint when the jvm shuts down, which means
that the next connection will be slower.
explicitly shutting down derby with the url is preferred.
this style of shutdown will always throw an "exception".
*/
boolean gotsqlexc   false
if  framework equals
try
drivermanager getconnection
catch  sqlexception se
gotsqlexc   true
if   gotsqlexc
system out println
else
system out println
catch  throwable e
system out println
if  e instanceof sqlexception
printsqlerror  sqlexception  e
else
e printstacktrace
system out println
static void printsqlerror sqlexception e
while  e    null
system out println e tostring
e   e getnextexception
private void parsearguments string args
int length   args length
for  int index   0  index < length  index
if  args equalsignorecase
framework
driver
protocol
if  args equalsignorecase
framework
driver
protocol