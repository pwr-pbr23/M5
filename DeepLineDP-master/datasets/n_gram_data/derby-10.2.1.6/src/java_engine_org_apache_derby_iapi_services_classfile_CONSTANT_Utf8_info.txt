/*
derby - class org.apache.derby.iapi.services.classfile.constant_utf8_info
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi services classfile
import org apache derby iapi services classfile vmdescriptor
import java io ioexception
/** constant pool class - pages 92-99 */
/** utf8- page 100 - section 4.4.7 */
public final class constant_utf8_info extends constantpoolentry
private final string value
private int asstring
private int ascode
constant_utf8_info string value
super vmdescriptor constant_utf8
this value   value
object getkey
return value
/**
we assume here that the string is ascii, thus this
might return a size smaller than actual size.
*/
int classfilesize
// 1 (tag) + 2 (utf length) + string length
return 1   2   value length
public string tostring
return value
// if this returns 0 then the caller must put another constant_utf8_info into the
// constant pool with no hash table entry and then call setalternative() with its index.
int setascode
if  classholder isexternalclassname value
if  asstring    0
// only used as code at the moment
ascode   getindex
return ascode
// no dots in the string so it can be used as a jvm internal string and
// an external string.
return getindex
int setasstring
if  classholder isexternalclassname value
if  ascode    0
// only used as string at the moment
asstring   getindex
return asstring
// no dots in the string so it can be used as a jvm internal string and
// an external string.
return getindex
void setalternative int index
if  ascode    0
ascode   index
else
asstring   index
void put classformatoutput out  throws ioexception
super put out
if  getindex      ascode
out writeutf classholder converttointernalclassname value
else
out writeutf value