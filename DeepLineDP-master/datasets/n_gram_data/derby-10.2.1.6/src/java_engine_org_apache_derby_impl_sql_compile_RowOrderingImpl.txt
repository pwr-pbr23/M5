/*
derby - class org.apache.derby.impl.sql.compile.roworderingimpl
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl sql compile
import org apache derby iapi sql compile rowordering
import org apache derby iapi sql compile optimizable
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi error standardexception
import java util vector
class roworderingimpl implements rowordering
/* this vector contains columnorderings */
vector ordering
/*
** this columnordering represents the columns that can be considered
** ordered no matter what.  for example, columns that are compared to
** constants with = are always ordered.  also, all columns in a one-row
** result set are ordered.
*/
columnordering	columnsalwaysordered
/*
** this vector contains table numbers for tables that are always ordered.
** this happens for one-row tables.
*/
vector alwaysorderedoptimizables
columnordering	currentcolumnordering
/* this vector contains unordered optimizables */
vector unorderedoptimizables
roworderingimpl
ordering   new vector
unorderedoptimizables   new vector
columnsalwaysordered   new columnordering rowordering dontcare
alwaysorderedoptimizables   new vector
/**
* @see rowordering#orderedoncolumn
*
* @exception standardexception		thrown on error
*/
public boolean orderedoncolumn int direction
int orderposition
int tablenumber
int columnnumber
throws standardexception
/*
** return true if the table is always ordered.
*/
if  vectorcontainsoptimizable tablenumber  alwaysorderedoptimizables
return true
/*
** return true if the column is always ordered.
*/
if  columnsalwaysordered contains tablenumber  columnnumber
return true
/*
** return false if we're looking for an ordering position that isn't
** in this ordering.
*/
if  orderposition >  ordering size
return false
columnordering co    columnordering  ordering elementat orderposition
/*
** is the column in question ordered with the given direction at
** this position?
*/
return co ordered direction  tablenumber  columnnumber
/**
* @see rowordering#orderedoncolumn
*
* @exception standardexception		thrown on error
*/
public boolean orderedoncolumn int direction
int tablenumber
int columnnumber
throws standardexception
/*
** return true if the table is always ordered.
*/
if  vectorcontainsoptimizable tablenumber  alwaysorderedoptimizables
return true
/*
** return true if the column is always ordered.
*/
if  columnsalwaysordered contains tablenumber  columnnumber
return true
boolean ordered   false
for  int i   0  i < ordering size    i
columnordering co    columnordering  ordering elementat i
/*
** is the column in question ordered with the given direction at
** this position?
*/
boolean thisordered   co ordered direction
tablenumber
columnnumber
if  thisordered
ordered   true
break
return ordered
/**
* return true if the given vector of optimizables contains an optimizable
* with the given table number.
*/
private boolean vectorcontainsoptimizable int tablenumber  vector vec
int i
for  i   vec size     1  i >  0  i
optimizable opttable
optimizable  vec elementat i
if  opttable hastablenumber
if  opttable gettablenumber      tablenumber
return true
return false
/** @see rowordering#addorderedcolumn */
public void addorderedcolumn int direction
int tablenumber
int columnnumber
if  unorderedoptimizables size   > 0
return
columnordering currentcolumnordering
if  ordering size      0
currentcolumnordering   new columnordering direction
ordering addelement currentcolumnordering
else
currentcolumnordering
columnordering  ordering elementat ordering size     1
if  sanitymanager debug
if  currentcolumnordering direction      direction
sanitymanager throwassert     direction
currentcolumnordering direction
currentcolumnordering addcolumn tablenumber  columnnumber
/** @see rowordering#nextorderposition */
public void nextorderposition int direction
if  unorderedoptimizables size   > 0
return
currentcolumnordering   new columnordering direction
ordering addelement currentcolumnordering
public void optimizablealwaysordered optimizable optimizable
// a table can't be ordered if there is an outer unordered table
if  unorderedoptimizablesotherthan optimizable
return
/*
** a table is not "always ordered" if any of the other ordered tables
** in the join order are not also "always ordered".  in other words,
** if any outer table is not a one-row table, this table is not
** always ordered.
**
** the table that was passed in as a parameter may have already been
** added as a table with ordered columns.  if it is the first table
** in the list of ordered columns, then there should be no other
** tables in this list, so we remove it from the list and add it
** to the list of always-ordered tables.
*/
boolean hastablenumber   optimizable hastablenumber
int tablenumber    hastablenumber ? optimizable gettablenumber     0
if
ordering size      0
hastablenumber
columnordering  ordering elementat 0   hastable
tablenumber
hastablenumber
columnsalwaysordered hasanyothertable tablenumber
if  optimizable hastablenumber
removeoptimizable optimizable gettablenumber
alwaysorderedoptimizables addelement optimizable
/** @see rowordering#columnalwaysordered */
public void columnalwaysordered optimizable optimizable  int columnnumber
columnsalwaysordered addcolumn optimizable gettablenumber
columnnumber
/** @see rowordering#alwaysordered */
public boolean alwaysordered int tablenumber
return vectorcontainsoptimizable
tablenumber
alwaysorderedoptimizables
/** @see rowordering#removeoptimizable */
public void removeoptimizable int tablenumber
int i
/*
** walk the list backwards, so we can remove elements
** by position.
*/
for  i   ordering size     1  i >  0  i
/*
** first, remove the table from all the columnorderings
*/
columnordering ord    columnordering  ordering elementat i
ord removecolumns tablenumber
if  ord empty
ordering removeelementat i
/* remove from list of always-ordered columns */
columnsalwaysordered removecolumns tablenumber
/* also remove from list of unordered optimizables */
removeoptimizablefromvector tablenumber  unorderedoptimizables
/* also remove from list of always ordered optimizables */
removeoptimizablefromvector tablenumber  alwaysorderedoptimizables
/**
* remove all optimizables with the given table number from the
* given vector of optimizables.
*/
private void removeoptimizablefromvector int tablenumber  vector vec
int i
for  i   vec size     1  i >  0  i
optimizable opttable
optimizable  vec elementat i
if  opttable hastablenumber
if  opttable gettablenumber      tablenumber
vec removeelementat i
/** @see rowordering#addunorderedoptimizable */
public void addunorderedoptimizable optimizable optimizable
unorderedoptimizables addelement optimizable
/** @see rowordering#copy */
public void copy rowordering copyto
if  sanitymanager debug
if      copyto instanceof roworderingimpl
sanitymanager throwassert
copyto getclass   getname
roworderingimpl dest    roworderingimpl  copyto
/* clear the ordering of what we're copying to */
dest ordering removeallelements
dest currentcolumnordering   null
dest unorderedoptimizables removeallelements
for  int i   0  i < unorderedoptimizables size    i
dest unorderedoptimizables addelement
unorderedoptimizables elementat i
dest alwaysorderedoptimizables removeallelements
for  int i   0  i < alwaysorderedoptimizables size    i
dest alwaysorderedoptimizables addelement
alwaysorderedoptimizables elementat i
for  int i   0  i < ordering size    i
columnordering co    columnordering  ordering elementat i
dest ordering addelement co cloneme
if  co    currentcolumnordering
dest remembercurrentcolumnordering i
dest columnsalwaysordered   null
if  columnsalwaysordered    null
dest columnsalwaysordered   columnsalwaysordered cloneme
private void remembercurrentcolumnordering int posn
currentcolumnordering    columnordering  ordering elementat posn
public string tostring
string retval   null
if  sanitymanager debug
int i
retval
for  i   0  i < unorderedoptimizables size    i
optimizable opt    optimizable  unorderedoptimizables elementat i
if  opt getbasetablename      null
retval    opt getbasetablename
else
retval    unorderedoptimizables elementat i  tostring
retval
retval
retval
for  i   0  i < alwaysorderedoptimizables size    i
optimizable opt    optimizable  alwaysorderedoptimizables elementat i
if  opt getbasetablename      null
retval    opt getbasetablename
else
retval    alwaysorderedoptimizables elementat i  tostring
retval
retval
for  i   0  i < ordering size    i
retval        i       ordering elementat i
return retval
/**
* returns true if there are unordered optimizables in the join order
* other than the given one.
*/
private boolean unorderedoptimizablesotherthan optimizable optimizable
for  int i   0  i < unorderedoptimizables size    i
optimizable thisopt
optimizable  unorderedoptimizables elementat i
if  thisopt    optimizable
return true
return false