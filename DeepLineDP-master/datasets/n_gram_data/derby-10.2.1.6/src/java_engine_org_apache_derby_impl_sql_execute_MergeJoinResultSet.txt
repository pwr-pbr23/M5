/*
derby - class org.apache.derby.impl.sql.execute.mergejoinresultset
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl sql execute
import org apache derby iapi services monitor monitor
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi services stream headerprintwriter
import org apache derby iapi services stream infostreams
import org apache derby iapi error standardexception
import org apache derby iapi sql activation
import org apache derby iapi sql resultset
import org apache derby iapi types datavaluedescriptor
import org apache derby iapi reference sqlstate
import org apache derby iapi sql execute execrow
import org apache derby iapi sql execute noputresultset
import org apache derby iapi services loader generatedmethod
/////////////////////////////////////////////
// warning: this has not been tested (or used)
// yet, so use at your own risk
/////////////////////////////////////////////
/**
* merge two result sets.  the left result set (the outer
* result set) must be unique for this to work correctly.
*
*/
class mergejoinresultset extends joinresultset
private static final int greater_than   1
private static final int equal   0
private static final int less_than    1
private generatedmethod leftgreaterthanright
/**
* create a mergejoinresultset
*
* @param leftresultset		the left (outer) result set
* @param leftnumcols		columns in left row
* @param rightresultset	the right (outer) result set
* @param rightnumcols		columns in right row
* @param activation		activation
* @param leftgreaterthanright a generated method that is used to
*			ascertain whether the row from the left result set is
*			greater than the row from the right result set.  returns
*			1,0,or -1 to indicate greater than, equal, or less than,
*			respectively
* @param  restriction		generated method for additional qualification
* @param resultsetnumber	the result set number
* @param onerowrightside	ignored
* @param optimizerestimatedrowcount	self-explanatory
* @param optimizerestimatedcost		self-explanatory
*/
mergejoinresultset noputresultset leftresultset
int leftnumcols
noputresultset rightresultset
int rightnumcols
activation activation
generatedmethod leftgreaterthanright
generatedmethod restriction
int resultsetnumber
boolean onerowrightside
boolean notexistsrightside
double optimizerestimatedrowcount
double optimizerestimatedcost
super leftresultset  leftnumcols  rightresultset  rightnumcols
activation  restriction  resultsetnumber
onerowrightside  notexistsrightside  optimizerestimatedrowcount
optimizerestimatedcost  null
this leftgreaterthanright   leftgreaterthanright
//////////////////////////////////////////////////////////////////////
//
// resultset interface (leftover from noputresultset)
//
//////////////////////////////////////////////////////////////////////
/**
* return the requested values computed
* from the next row (if any) for which
* the restriction evaluates to true.
* <p>
* restriction parameters
* are evaluated for each row.
*
* @exception standardexception		thrown on error
* @exception standardexception		resultsetnotopen thrown if closed
* @return the next row in the join result
*/
public execrow	getnextrowcore   throws standardexception
begintime   getcurrenttimemillis
if    isopen
throw standardexception newexception sqlstate lang_result_set_not_open
if   isrightopen
openright
int compareresult
/*
** for each row in the outer table
*/
while  leftrow    null
/*
** if outer > inner, then go to the
** next row in the inner table
*/
while   compareresult     integer leftgreaterthanright invoke activation   intvalue
greater_than
rightrow   rightresultset getnextrowcore
rowsseenright
/*
** if there are no more rows in the right
** result set, then done.
*/
if  rightrow    null
clearcurrentrow
return  execrow null
/*
** if they match and the restriction passes,
** then return the row.
*/
if   compareresult    equal     restrictionistrue
execrow returnrow   getreturnrow leftrow  rightrow
/*
** move the left scan up one for the next
** getnextrowcore() call.
*/
leftrow   leftresultset getnextrowcore
return returnrow
/*
** next row left
*/
leftrow   leftresultset getnextrowcore
rowsseenleft
clearcurrentrow
return  execrow null
/**
* if the result set has been opened,
* close the open scan.
*
* @exception standardexception thrown on error
*/
public void	close   throws standardexception
begintime   getcurrenttimemillis
if  sanitymanager debug
sanitymanager assert  isopen
if   isopen
// we don't want to keep around a pointer to the
// row ... so it can be thrown away.
// revisit: does this need to be in a finally
// block, to ensure that it is executed?
clearcurrentrow
super close
closetime    getelapsedmillis begintime
/**
* return the total amount of time spent in this resultset
*
* @param type	current_resultset_only - time spent only in this resultset
*				entire_resultset_tree  - time spent in this resultset and below.
*
* @return long		the total amount of time spent (in milliseconds).
*/
public long gettimespent int type
long tottime   constructortime   opentime   nexttime   closetime
if  type    noputresultset current_resultset_only
return	tottime   leftresultset gettimespent entire_resultset_tree
rightresultset gettimespent entire_resultset_tree
else
return tottime
//////////////////////////////////////////////////////////////////
//
// servile methods
//
//////////////////////////////////////////////////////////////////
private execrow getreturnrow execrow leftrow  execrow rightrow
throws standardexception
int colinctr
int coloutctr
/* merge the rows, doing just in time allocation for mergedrow.
* (by convention, left row is to left of right row.)
*/
if  mergedrow    null
mergedrow   getexecutionfactory   getvaluerow leftnumcols   rightnumcols
for  colinctr   1  coloutctr   1  colinctr <  leftnumcols
colinctr    coloutctr
mergedrow setcolumn coloutctr
leftrow getcolumn colinctr
for  colinctr   1  colinctr <  rightnumcols
colinctr    coloutctr
mergedrow setcolumn coloutctr
rightrow getcolumn colinctr
setcurrentrow mergedrow
rowsreturned
nexttime    getelapsedmillis begintime
return mergedrow
private boolean restrictionistrue
throws standardexception
if  restriction    null
datavaluedescriptor restrictboolean
datavaluedescriptor  restriction invoke activation
/*
** if the result is null, we make it false --
** so the row won't be returned.
*/
if  restrictboolean isnull
restrictboolean getboolean
/* update the run time statistics */
rowsfiltered
return false
return true