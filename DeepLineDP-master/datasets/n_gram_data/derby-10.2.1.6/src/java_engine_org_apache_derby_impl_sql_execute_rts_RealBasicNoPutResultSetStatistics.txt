/*
derby - class org.apache.derby.impl.sql.execute.rts.realbasicnoputresultsetstatistics
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl sql execute rts
import org apache derby iapi services io storedformatids
import org apache derby iapi services io formatable
import org apache derby iapi services i18n messageservice
import org apache derby iapi reference sqlstate
import org apache derby iapi services io formatablehashtable
import java util vector
import java io objectoutput
import java io objectinput
import java io ioexception
import java text decimalformat
/**
resultsetstatistics implemenation for basicnoputresultsetimpl.
@author jerry
*/
abstract class realbasicnoputresultsetstatistics
implements resultsetstatistics
/* leave these fields public for object inspectors */
public int numopens
public int rowsseen
public int rowsfiltered
public long constructortime
public long opentime
public long nexttime
public long closetime
public long inspectoverall
public long inspectnum
public string inspectdesc
public double optimizerestimatedrowcount
public double optimizerestimatedcost
// constructors
/**
*
*
*/
public	realbasicnoputresultsetstatistics
int numopens
int rowsseen
int rowsfiltered
long constructortime
long opentime
long nexttime
long closetime
double optimizerestimatedrowcount
double optimizerestimatedcost
this numopens   numopens
this rowsseen   rowsseen
this rowsfiltered   rowsfiltered
this constructortime   constructortime
this opentime   opentime
this nexttime   nexttime
this closetime   closetime
this optimizerestimatedrowcount   optimizerestimatedrowcount
this optimizerestimatedcost   optimizerestimatedcost
// class implementation
/**
* dump out the time information for run time stats.
*
* @return nothing.
*/
protected final string dumptimestats string indent  string subindent
return
/*
indent + "time spent in this resultset = " +
gettimespent(resultset.current_resultset_only) + "\n" +
indent + "time spent in this resultset and below = " +
gettimespent(noputresultset.entire_resultset_tree) + "\n" +
indent + "total time breakdown: " + "\n" +
*/
subindent
messageservice gettextmessage sqlstate lang_constructor_time
constructortime
subindent
messageservice gettextmessage sqlstate lang_open_time
opentime
subindent
messageservice gettextmessage sqlstate lang_next_time
nexttime
subindent
messageservice gettextmessage sqlstate lang_close_time
closetime
/**
* dump out the estimated cost information
*
* @return nothing.
*/
protected final string dumpestimatedcosts string subindent
return	subindent
messageservice gettextmessage sqlstate rts_opt_est_rc
formatdouble optimizerestimatedrowcount
subindent
messageservice gettextmessage sqlstate rts_opt_est_cost
formatdouble optimizerestimatedcost
/**
* format a double as a string with leading spaces and two digits
* after the decimal.
*/
private static decimalformat df   null
private string formatdouble double toformat
if  df    null
// resolve: this really should use the database locale to
// format the number.
df   new decimalformat
df setminimumintegerdigits 1
string retval   df format toformat
if  retval length   < 15
retval
substring 0  15   retval length      retval
return retval
/**
* get the objects to be displayed when this tree object is expanded.
* <p>
* the objects returned can be of any type, including addtional inspectables.
*
* @return java.util.vector	a vector of objects.
*/
public vector getchildren
return new vector
/**
* return the time for all operations performed by this node, and the children
* of this node.  the times included open, next, and close.
*
*/
public long gettotaltime
//the method below is the original calculation.  however, the constructor
//time was found to be inaccurate, and was therefore removed from the calculation.
//return constructortime + opentime + nexttime + closetime;
return opentime   nexttime   closetime
/**
* return the time for all operations performed by the children of this node.
*
*/
public long getchildrentime
long childrentime   0
java util enumeration e   getchildren   elements
while  e hasmoreelements
childrentime   childrentime     realbasicnoputresultsetstatistics e nextelement    gettotaltime
return childrentime
/**
* return the time for all operations performed by this node, but not the
* time for the children of this node.
*
*/
public long getnodetime
return gettotaltime     getchildrentime
/**
* format for display, a name for this node.
*
*/
public abstract string getnodename
/**
* if this node is on a database item (like a table or an index), then provide a
* string that describes the on item.
*
*/
public string getnodeon
return
/**
* get the estimated row count for the number of rows returned
* by the associated query or statement.
*
* @return	the estimated number of rows returned by the associated
* query or statement.
*/
public double getestimatedrowcount
return optimizerestimatedrowcount