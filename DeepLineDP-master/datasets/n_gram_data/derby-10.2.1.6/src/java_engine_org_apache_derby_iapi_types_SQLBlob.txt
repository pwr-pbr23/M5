/*
derby - class org.apache.derby.iapi.types.sqlblob
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi types
import org apache derby iapi types datatypedescriptor
import org apache derby iapi types datavaluedescriptor
import org apache derby iapi types typeid
import org apache derby iapi types bitdatavalue
import org apache derby iapi types datavaluedescriptor
import org apache derby iapi reference sqlstate
import org apache derby iapi reference limits
import org apache derby iapi error standardexception
import org apache derby iapi types orderable
import org apache derby iapi services io formatidutil
import org apache derby iapi services io storedformatids
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi types booleandatavalue
import org apache derby iapi types stringdatavalue
import org apache derby iapi types numberdatavalue
import org apache derby iapi services io formatablebitset
import java io objectoutput
import java io objectinput
import java io ioexception
import java sql blob
import java sql resultset
import java sql sqlexception
import java sql preparedstatement
/**
* sqlblob satisfies the datavaluedescriptor,
* interfaces (i.e., orderabledatatype).
* it uses the sqllongvarbit implementation, which implements a string holder,
* e.g. for storing a column value; it can be specified
* when constructed to not allow nulls. nullability cannot be changed
* after construction.
* <p>
* because lob types are not orderable, we'll override those
* methods...
*
*/
public class sqlblob extends sqlbinary
/*
* constructors
*/
public sqlblob
public sqlblob byte val
super val
public string gettypename
return typeid blob_name
/**
* return max memory usage for a sql blob
*/
int getmaxmemoryusage
return limits db2_lob_maxwidth
/**
* @see datavaluedescriptor#getnewnull
*/
public datavaluedescriptor getnewnull
return new sqlblob
/**
* normalization method - this method may be called when putting
* a value into a sqlbit, for example, when inserting into a sqlbit
* column.  see normalizeresultset in execution.
*
* @param desiredtype	the type to normalize the source column to
* @param source		the value to normalize
*
* @exception standardexception				thrown for null into
*											non-nullable column, and for
*											truncation error
*/
public void normalize
datatypedescriptor desiredtype
datavaluedescriptor source
throws standardexception
setvalue source
setwidth desiredtype getmaximumwidth    0  true
// the method setwidth is only(?) used to adopt the value
// to the casted domain/size. blobs behave different
// from the bit types in that a (cast (x'01' to blob(1024)))
// does not pad the value to the maximal allowed datasize.
// that it is done for bit is understandable, however,
// for bit varying it is a bit confusing. could be inheritence bug.
// anyhow, here we just ignore the call, since there is no padding to be done.
// we do detect truncation, if the errorontrunc flag is set.
// db2 does return a warning on cast and error on insert.
public void setwidth int desiredwidth      ignored
int desiredscale 	   ignored
boolean errorontrunc
throws standardexception
// input is null, so there's nothing to do.
if  isnull
return
// input is a stream with unknown length. the length will be checked
// while reading the stream.
if  islengthless
return
int sourcewidth   getlength
// need to truncate?
if  sourcewidth > desiredwidth
if  errorontrunc
throw standardexception newexception sqlstate lang_string_truncation  gettypename
string valueof desiredwidth
else
/*
* truncate to the desired width.
*/
byte shrunkdata   new byte
system arraycopy getbytes    0  shrunkdata  0  desiredwidth
datavalue   shrunkdata
/**
return my format identifier.
@see org.apache.derby.iapi.services.io.typedformat#gettypeformatid
*/
public int gettypeformatid
return storedformatids sql_blob_id
/**
* @see datavaluedescriptor#setvaluefromresultset
*
* @exception sqlexception		thrown on error
* @throws standardexception
*/
public void setvaluefromresultset resultset resultset  int colnumber
boolean isnullable
throws sqlexception  standardexception
blob blob   resultset getblob colnumber
if  blob    null
settonull
else
setobject blob
/*
* datavaluedescriptor interface
*/
/** @see datavaluedescriptor#typeprecedence */
public int typeprecedence
return typeid blob_precedence     not really used
public void setinto preparedstatement ps  int position
throws sqlexception  standardexception
if  isnull
ps setblob position  null
return
// this may cause problems for streaming blobs, by materializing the whole blob.
ps setbytes position  getbytes
/**
* set the value from an non-null object.
*/
final void setobject object thevalue
throws standardexception
blob vb    blob  thevalue
try
long vbl   vb length
if  vbl < 0l    vbl > integer max_value
throw this outofrange
setvalue new rawtobinaryformatstream
vb getbinarystream     int  vbl
int  vbl
catch  sqlexception e
throw datatypeconversion
/**
* tell if this blob is length less.
*
* @return <code>true</code> if the length of the blob is not known,
*      <code>false</code> otherwise
*/
private final boolean islengthless
return  stream    null    streamvaluelength < 0