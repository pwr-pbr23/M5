/*
derby - class org.apache.derby.iapi.services.io.limitreader
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi services io
import java io reader
import java io ioexception
/**
a  reader that provides methods to limit the range that
can be read from the reader.
*/
public final class limitreader extends reader implements limit
private int remainingcharacters
private boolean limitinplace
private	reader	reader
/**
construct a limitreader and call the clearlimit() method.
*/
public limitreader reader reader
super
this reader   reader
clearlimit
public int read   throws ioexception
if   limitinplace
return reader read
if  remainingcharacters    0
return  1     end of file
int value   reader read
if  value >  0
remainingcharacters
return value
public int read char c  int off  int len  throws ioexception
if   limitinplace
return reader read c  off  len
if  remainingcharacters    0
return  1
if  remainingcharacters < len
len   remainingcharacters     end of file
len   reader read c  off  len
if  len >  0
remainingcharacters    len
return len
public long skip long count
throws ioexception
if   limitinplace
return reader skip count
if  remainingcharacters    0
return 0     end of file
if  remainingcharacters < count
count   remainingcharacters
count   reader skip count
remainingcharacters    count
return count
public void close
throws ioexception
reader close
/**
set the limit of the stream that can be read. after this
call up to and including length characters can be read from
or skipped in the stream.
any attempt to read more than length characters will
result in an eofexception
@exception ioexception ioexception from some underlying stream
@exception eofexception the set limit would exceed
the available data in the stream.
*/
public void setlimit int length
remainingcharacters   length
limitinplace   true
return
/**
* return limit of the stream that can be read without throwing
* eofexception
* @return the remaining characters left to be read from the stream
*/
public final int getlimit
return remainingcharacters
/**
clear any limit set by setlimit. after this call no limit checking
will be made on any read until a setlimit()) call is made.
@return the number of bytes within the limit that have not been read.
-1 if not limit was set.
*/
public int clearlimit
int leftover   remainingcharacters
limitinplace   false
remainingcharacters    1
return leftover