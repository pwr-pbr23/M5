/*
derby - class org.apache.derby.impl.sql.execute.baseexpressionactivation
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl sql execute
import org apache derby iapi error standardexception
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi types datavaluedescriptor
import org apache derby catalog types userdefinedtypeidimpl
import org apache derby iapi services context contextmanager
import org apache derby iapi services context context
import org apache derby iapi jdbc connectioncontext
import org apache derby iapi types datavaluefactory
import org apache derby iapi types typeid
import org apache derby iapi sql execute executioncontext
import org apache derby iapi sql execute executionfactory
import org apache derby iapi sql conn languageconnectioncontext
import org apache derby iapi store access transactioncontroller
import org apache derby iapi reference attribute
import org apache derby iapi sql resultset
import java sql connection
import java sql sqlexception
/**
* baseexpressionactivation
*
* support needed by expression evaluators (filters) and by
* resultset materializers (activations)
*/
public abstract class baseexpressionactivation
//
// constructors
//
baseexpressionactivation
super
/**
* get the minimum value of 4 input values.  if less than 4 values, input
* null.  if more than 4 input values, call this multiple times to
* accumulate results.  also have judge's type as parameter to have a base
* upon which the comparison is based.  an example use is for code
* generation in bug 3858.
*
* @param v1		1st value
* @param v2		2nd value
* @param v3		3rd value
* @param v4		4th value
* @param judgetypeformatid		type format id of the judge
* @param judgeuserjdbctypeid	jdbc type id if judge is user type;
*								-1 if not user type
*
* @return	the minimum value of the 4.
*/
public static datavaluedescriptor minvalue datavaluedescriptor v1
datavaluedescriptor v2
datavaluedescriptor v3
datavaluedescriptor v4
int judgetypeformatid
int judgeuserjdbctypeid
throws standardexception
datavaluedescriptor judge
if  judgeuserjdbctypeid     1
judge    datavaluedescriptor  new typeid judgetypeformatid  null  getnull
else
judge    datavaluedescriptor  new typeid judgetypeformatid  new userdefinedtypeidimpl    getnull
datavaluedescriptor minval   v1
if  v2    null    judge lessthan v2  minval  equals true
minval   v2
if  v3    null    judge lessthan v3  minval  equals true
minval   v3
if  v4    null    judge lessthan v4  minval  equals true
minval   v4
return minval
/**
* get the maximum value of 4 input values.  if less than 4 values, input
* null.  if more than 4 input values, call this multiple times to
* accumulate results.  also have judge's type as parameter to have a base
* upon which the comparison is based.  an example use is for code
* generation in bug 3858.
*
* @param v1		1st value
* @param v2		2nd value
* @param v3		3rd value
* @param v4		4th value
* @param judgetypeformatid		type format id of the judge
* @param judgeuserjdbctypeid	jdbc type id if judge is user type;
*								-1 if not user type
*
* @return	the maximum value of the 4.
*/
public static datavaluedescriptor maxvalue datavaluedescriptor v1
datavaluedescriptor v2
datavaluedescriptor v3
datavaluedescriptor v4
int judgetypeformatid
int judgeuserjdbctypeid
throws standardexception
datavaluedescriptor judge
if  judgeuserjdbctypeid     1
judge    new typeid judgetypeformatid  null  getnull
else
judge    new typeid judgetypeformatid  new userdefinedtypeidimpl    getnull
datavaluedescriptor maxval   v1
if  v2    null    judge greaterthan v2  maxval  equals true
maxval   v2
if  v3    null    judge greaterthan v3  maxval  equals true
maxval   v3
if  v4    null    judge greaterthan v4  maxval  equals true
maxval   v4
return maxval