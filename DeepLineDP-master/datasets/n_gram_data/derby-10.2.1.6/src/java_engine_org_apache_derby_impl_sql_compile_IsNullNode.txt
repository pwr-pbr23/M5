/*
derby - class org.apache.derby.impl.sql.compile.isnullnode
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package	org apache derby impl sql compile
import org apache derby iapi reference classname
import org apache derby iapi services compiler methodbuilder
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi error standardexception
import org apache derby iapi sql compile c_nodetypes
import org apache derby iapi sql compile optimizable
import org apache derby iapi sql conn languageconnectioncontext
import org apache derby iapi store access scancontroller
import org apache derby iapi types datatypedescriptor
import org apache derby iapi types datavaluedescriptor
import org apache derby iapi types datavaluefactory
import org apache derby iapi types typeid
import org apache derby iapi types orderable
import org apache derby impl sql compile expressionclassbuilder
import java sql types
/**
* this node represents either a unary
* is null or is not null comparison operator
*
* @author jerry brenner
*/
public final class isnullnode extends unarycomparisonoperatornode
implements relationaloperator
object nullvalue   null
public void setnodetype int nodetype
string operator
string methodname
if  nodetype    c_nodetypes is_null_node
/* by convention, the method name for the is null operator is "isnull" */
operator
methodname
else
if  sanitymanager debug
if  nodetype    c_nodetypes is_not_null_node
sanitymanager throwassert
nodetype
/* by convention, the method name for the is not null operator is
* "isnotnull"
*/
operator
methodname
setoperator operator
setmethodname methodname
super setnodetype nodetype
/**
* negate the comparison.
*
* @param operand	the operand of the operator
*
* @return unaryoperatornode	the negated expression
*
* @exception standardexception		thrown on error
*/
unaryoperatornode getnegation valuenode operand
throws standardexception
unaryoperatornode negation
if  sanitymanager debug
sanitymanager assert datatypeservices    null
if  isnullnode
setnodetype c_nodetypes is_not_null_node
else
if  sanitymanager debug
if    isnotnullnode
sanitymanager throwassert
getnodetype
setnodetype c_nodetypes is_null_node
return this
/**
* bind a ? parameter operand of the is [not] null predicate.
*
* @exception standardexception		thrown on error
*/
void bindparameter
throws standardexception
/*
** if is [not] null has a ? operand, we assume
** its type is varchar with the implementation-defined maximum length
** for a varchar.
*/
operand settype new datatypedescriptor typeid getbuiltintypeid types varchar   true
/* relationaloperator interface */
/** @see relationaloperator#usefulstartkey */
public boolean usefulstartkey optimizable opttable
// is null is start/stop key, is not null is not
return  isnullnode
/** @see relationaloperator#usefulstopkey */
public boolean usefulstopkey optimizable opttable
// is null is start/stop key, is not null is not
return  isnullnode
/** @see relationaloperator#getstartoperator */
public int getstartoperator optimizable opttable
if  sanitymanager debug
if    isnullnode
sanitymanager throwassert
getnodetype
return scancontroller ge
/** @see relationaloperator#getstopoperator */
public int getstopoperator optimizable opttable
if  sanitymanager debug
if    isnullnode
sanitymanager throwassert
getnodetype
return scancontroller gt
/** @see relationaloperator#generateoperator */
public void generateoperator methodbuilder mb
optimizable opttable
mb push orderable order_op_equals
/** @see relationaloperator#generatenegate */
public void generatenegate methodbuilder mb
optimizable opttable
mb push isnotnullnode
/** @see relationaloperator#getoperator */
public int getoperator
int operator
if  isnullnode
operator   is_null_relop
else
if  sanitymanager debug
if    isnotnullnode
sanitymanager throwassert
getnodetype
operator   is_not_null_relop
return operator
/** @see relationaloperator#comparewithknownconstant */
public boolean comparewithknownconstant optimizable opttable  boolean considerparameters
return true
/**
* @see relationaloperator#getcomparevalue
*
* @exception standardexception		thrown on error
*/
public datavaluedescriptor getcomparevalue optimizable opttable
throws standardexception
if  nullvalue    null
nullvalue   operand gettypeid   getnull
return  datavaluedescriptor  nullvalue
/** @see relationaloperator#equalscomparisonwithconstantexpression */
public boolean equalscomparisonwithconstantexpression optimizable opttable
boolean retval   false
// always return false for not null
if  isnotnullnode
return false
/*
** is the operand a column in the given table?
*/
if  operand instanceof columnreference
int tabnum     columnreference  operand  gettablenumber
if  opttable hastablenumber
opttable gettablenumber      tabnum
retval   true
return retval
/**
* @see relationaloperator#gettransitivesearchclause
*
* @exception standardexception	thrown on error
*/
public relationaloperator gettransitivesearchclause columnreference othercr
throws standardexception
return  relationaloperator  getnodefactory   getnode
getnodetype
othercr
getcontextmanager
/**
* null operators are defined on datavaluedescriptor.
* overrides method in unaryoperatornode for code generation purposes.
*/
public string getreceiverinterfacename
return classname datavaluedescriptor
/** is null is like =, so should have the same selectivity */
public double selectivity optimizable opttable
if  isnullnode
return 0 1d
else
if  sanitymanager debug
if    isnotnullnode
sanitymanager throwassert
getnodetype
/* is not null is like <>, so should have same selectivity */
return 0 9d
private boolean isnullnode
return getnodetype      c_nodetypes is_null_node
private boolean isnotnullnode
return getnodetype      c_nodetypes is_not_null_node
/** @see valuenode#isrelationaloperator */
public boolean isrelationaloperator
return true
/** @see valuenode#optimizableequalitynode */
public boolean optimizableequalitynode optimizable opttable
int columnnumber
boolean isnullokay
if   isnullnode       isnullokay
return false
columnreference cr   getcolumnoperand opttable
columnnumber
if  cr    null
return false
return true