/*
derby - class org.apache.derby.iapi.jdbc.engineconnection
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi jdbc
import java sql connection
import java sql preparedstatement
import java sql sqlexception
import java sql sqlwarning
import org apache derby iapi reference sqlstate
import org apache derby iapi sql execute executioncontext
import org apache derby impl jdbc util
/**
* additional methods the embedded engine exposes on its connection object
* implementations. an internal api only, mainly for the network
* server. allows consistent interaction between embedconnections
* and brokeredconnections.
*
*/
public interface engineconnection extends connection
/**
* set the drda identifier for this connection.
*/
public void setdrdaid string drdaid
/**
* set the transaction isolation level that will be used for the
* next prepare.  used by network server to implement db2 style
* isolation levels.
* note the passed in level using the derby constants from
* executioncontext and not the jdbc constants from java.sql.connection.
* @param level isolation level to change to.  level is the db2 level
*               specified in the package names which happen to correspond
*               to our internal levels. if
*               level == executioncontext.unspecified_isolation,
*               the statement won't be prepared with an isolation level.
*
*
*/
public void setprepareisolation int level  throws sqlexception
/**
* return prepare isolation
*/
public int getprepareisolation
throws sqlexception
/**
* prepare a statement with holdability.
* identical to jdbc 3.0 method, to allow holdabilty
* to be supported in jdk 1.3 by the network server,
* e.g. when the client is jdk 1.4 or above.
* can be removed once jdk 1.3 is no longer supported.
*/
public preparedstatement preparestatement string sql  int resultsettype
int resultsetconcurrency  int resultsetholdability
throws sqlexception
/**
* get the holdability of the connection.
* identical to jdbc 3.0 method, to allow holdabilty
* to be supported in jdk 1.3 by the network server,
* e.g. when the client is jdk 1.4 or above.
* can be removed once jdk 1.3 is no longer supported.
*/
public int getholdability   throws sqlexception
/**
* add a sqlwarning to this connection object.
* @param newwarning warning to be added, will be chained to any
* existing warnings.
*/
public void addwarning sqlwarning newwarning
throws sqlexception