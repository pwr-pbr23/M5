/*
derby - class nserverdemo.nssampleclientthread
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package nserverdemo
import java util properties
import java sql sqlexception
import java sql drivermanager
import java io ioexception
import java sql statement
import java sql resultset
import java sql sqlexception
import java sql sqlwarning
import java io printwriter
import java util properties
import java sql preparedstatement
import java sql connection
import java util random
import java lang math
/**
* nssampleclientthread thread to perform the nssamplework
*/
public class nssampleclientthread extends thread
protected int thread_id
protected properties properties
protected printwriter pw
protected string dburl
nssampleclientthread int id string dburl  properties properties printwriter pw
this thread_id id
this dburl   dburl
this properties   properties
this pw   pw
public void run
system out println   this thread_id
nssamplework w   new nssamplework this thread_id dburl properties pw
w dowork        do all the nssamplework
pw println   this thread_id
/**
* nssamplework class represents all the work done in the sample demo program.
* it includes
* getting a connection to the database, creating and loading of schema,
* preparing and execution of sql statements (insert, select, update, delete )
*/
class nssamplework
protected int thread_id
protected string dburl
protected properties properties
printwriter pw
preparedstatement select   null
preparedstatement insert   null
preparedstatement delete   null
preparedstatement update   null
preparedstatement getmaxkey   null
public static int counter 0
static integer lock   new integer 0
/**
* dburl is the database url to connect to
*/
nssamplework int id  string dburl properties properties printwriter pw
this thread_id   id
this dburl   dburl
this pw   pw
this properties   properties
/**
*	gets a database connection
* if the dburl is trying to connect to the derby netnssamplework server using jcc
* then the jcc driver must be already loaded before calling this method,
* else there will be an error
* return jcc connection if no error, else null
*/
public connection getconnection string dburl  properties properties
connection conn   null
try
pw println   thread_id     dburl
conn   drivermanager getconnection dburl  properties
catch  exception e
system out println    thread_id
e printstacktrace
return conn
/**
* set the connection to this isolation level
*/
public void setisolationlevel connection conn  int level
try
conn settransactionisolation level
catch  exception e
pw println    thread_id
e printstacktrace
/**
* close connection
*/
public void closeconnection connection conn
try
if conn    null
conn close
pw println   thread_id
catch  exception e
pw println   thread_id      e
e printstacktrace
/**
* prepare required sql statements
*/
public void preparestmts connection conn
try
select   conn preparestatement
insert   conn preparestatement
update   conn preparestatement
delete   conn preparestatement
getmaxkey   conn preparestatement
catch  exception e
e printstacktrace
/**
* executing a select and retrieving the results
* select the row with t_key value as 'selectwhat'
*/
public int doselectoperation long selectwhat
int numrowsselected   0
resultset rs   null
try
select setlong 1 selectwhat
rs   select executequery
while  rs next
numrowsselected
int intval   rs getint 1
string strval   rs getstring 2
float floatval   rs getfloat 3
long longval   rs getlong 4   	  t_key column
pw println    thread_id    numrowsselected     intval
strval     floatval     longval
catch  exception e
e printstacktrace
finally
try
if rs    null
rs close
catch  exception e
e printstacktrace
return numrowsselected
/**
*  opens a connection and executes dml (insert, select, update, delete) operations
*/
public void dowork
connection conn   null
resultset rs   null
try
conn   getconnection dburl properties
if conn    null
throw new exception
conn setautocommit true
// setting isolation level to read uncommitted, since this is a sample application.
// please set the isolation level depending on the requirements of your application
setisolationlevel conn connection transaction_read_uncommitted
preparestmts conn
// perform the dml operations
for  int i 0  i<nssample iterations  i
// choose between either a select or any one of (insert or update or delete ) operation
int choice    int   math random     100  % 2
switch  choice
case 0      select a row
rs   getmaxkey executequery      gets max t_key value
long selectwhere   0
if rs next
selectwhere   rs getlong 1
int numselected   doselectoperation selectwhere
break
case 1      do an insert  update or delete
doiudoperation
break
end of switch
enf of for
catch exception e
pw println    thread_id
e printstacktrace
finally
try
if rs    null
rs close
closeconnection conn
cleanup
catch exception ee
pw println     thread_id
ee printstacktrace
end of method donssamplework
/**
* close resources
*/
public void cleanup
try
if select    null
select close
if insert    null
insert close
if delete    null
delete close
if update    null
update close
if getmaxkey    null
getmaxkey close
catch  exception e
e printstacktrace
/**
* perform an insert or an update or delete operation
*/
public void doiudoperation
int decide    int   math random     100  % 3
resultset rs   null
try
switch  decide
case 0      insert
int numinsert   insertrow insert
pw println   thread_id   numinsert
break
case 1      update
rs   getmaxkey executequery
long updaterow 0
if rs next
updaterow   rs getlong 1
int numupdate   updaterow update updaterow
system out println   thread_id   numupdate     updaterow
break
case 2      delete
rs   getmaxkey executequery
long deleterow  0
if rs next
deleterow   rs getlong 1
int numdelete   deleterow delete deleterow
system out println   thread_id   numdelete     deleterow
break
end of switch
catch  exception e
e printstacktrace
finally
try
if rs    null
rs close
catch  exception e
e printstacktrace
end of method doiudoperation
/**
* create necessary schema if schema not already created
*/
public static void checkandcreateschema connection conn printwriter pw
statement stmt   null
resultset rs   null
try
conn setautocommit true
catch  sqlexception  se
pw println
se printstacktrace
// check for existence of schema by quering the catalog systables
try
stmt   conn createstatement
rs   stmt executequery
if  rs next
pw println
return
catch  sqlexception  se
pw println   se
pw println
se printstacktrace
system exit 1
// create the necessary table and indexes
try
pw println
stmt execute
stmt execute
stmt execute
stmt execute
catch  exception  e
pw println     e tostring
pw println
e printstacktrace
system exit 1
finally
try
if rs    null
rs close
if stmt    null
stmt close
catch  exception e
e printstacktrace
end of method checkandcreateschema
/**
* loads schema , inserts 'rowstoinsert' number of rows into the table
*/
public static void loadschema connection conn int rowstoinsert printwriter pw
int insertsremaining   rowstoinsert
preparedstatement ps null
try
ps   conn preparestatement
// insert one row at a time
while  insertsremaining   >  0
int numinserts   insertrow ps
if  numinserts    1
pw println
catch  exception e
pw println    e
e printstacktrace
finally
try
if ps    null
ps close
catch  exception e
e printstacktrace
end of method loadschema
/**
*	generates random values and performs the inserts into the database
*/
public static int insertrow preparedstatement ps
int rowsadded   0
try
// generate random values for the datatypes in the sample table
random rand   new random
int intval   math abs rand nextint  %1000
string charval
synchronized lock
charval    counter
counter
// set parameter values
ps setint 1  intval
ps setstring 2 charval
ps setfloat 3  rand nextfloat    float math pow 10 math abs rand nextint  %30
ps setlong 4 rand nextlong  %10000
rowsadded   ps executeupdate
return rowsadded
catch  exception e
e printstacktrace
return 0
/**
* update a row in the table
* updatewhere	is the value of the t_key row which needs to be updated
* return  number of rows updated
*/
public static int updaterow  preparedstatement ps long updatewhere
try
int val 0
synchronized lock
val   counter
ps setint 1 val
ps setlong 2 updatewhere
return ps executeupdate
catch  sqlexception se
se printstacktrace
return 0
/**
* delete row from table
* deleterow is the value of the t_key of the row to be deleted
* return number of rows deleted
*/
public static int deleterow preparedstatement ps long deleterow
int rowsdeleted   0
try
ps setlong 1  deleterow
rowsdeleted   ps executeupdate
return rowsdeleted
catch exception e
e printstacktrace
return 0
end of class nssamplework