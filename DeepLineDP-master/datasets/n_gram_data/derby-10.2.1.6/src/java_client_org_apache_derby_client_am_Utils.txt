/*
derby - class org.apache.derby.client.am.utils
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby client am
import java sql sqlexception
import org apache derby iapi types sqlbit
import org apache derby shared common i18n messageutil
import org apache derby shared common reference messageid
// self-contained utilities.
// don't reference any other driver classes, except configuration, from within this class.
public final class utils
static string getstringfrombytes byte bytes
if  bytes    null
return
stringbuffer stringbuffer   new stringbuffer bytes length   6   4
stringbuffer append
for  int i   0  i < bytes length  i
stringbuffer append
stringbuffer append integer tohexstring bytes   0xff
if  i    bytes length   1
stringbuffer append
stringbuffer append
return stringbuffer tostring
static string getstringfromints int ints
if  ints    null
return
stringbuffer stringbuffer   new stringbuffer
stringbuffer append
for  int i   0  i < ints length  i
stringbuffer append string valueof ints
if  i    ints length   1
stringbuffer append
stringbuffer append
return stringbuffer tostring
static string getstringfromstrings string strings
if  strings    null
return
stringbuffer stringbuffer   new stringbuffer
stringbuffer append
for  int i   0  i < strings length  i
stringbuffer append strings
if  i    strings length   1
stringbuffer append
stringbuffer append
return stringbuffer tostring
static public int computebigdecimalprecision java math bigdecimal decimal
byte bbytes   decimal unscaledvalue   abs   tobytearray
if  bytearraycmp bbytes  tenradixarr  >  0
throw new java lang illegalargumentexception
sqlexception getmessageutil
gettextmessage messageid conn_precision_too_large
int lo   0  hi   tenradixarr length   1  mi    hi   lo    2
do
int compare   bytearraycmp bbytes  tenradixarr
if  compare    1
lo   mi
else if  compare     1
hi   mi
else
break
mi    hi   lo    2
while  mi    lo
return  mi   1
// used only by computebigdecimalprecision()
private static int bytearraycmp byte arg1  byte arg2
int arg1offset   0
int arg2offset   0
int length
if  arg1 length > arg2 length
int diff   arg1 length   arg2 length
for    arg1offset < diff  arg1offset
if  arg1    0
return 1
length   arg2 length
else if  arg1 length < arg2 length
int diff   arg2 length   arg1 length
for    arg2offset < diff  arg2offset
if  arg2    0
return  1
length   arg1 length
else
length   arg1 length
for  int i   0  i < length  i
int b1   arg1   0xff
int b2   arg2   0xff
if  b1 > b2
return 1
else if  b1 < b2
return  1
return 0
// used only by computebigdecimalprecision()
// byte array of 1, 10, 100, 1000, 10000, ..., 10^31 for
// fast computing the length a bigdecimal.
private static byte tenradixarr
byte  0x01      10^0
byte  0x0a      10^1
byte  0x64      10^2
byte  0x03   byte  0xe8      10^3
byte  0x27   byte  0x10      10^4
byte  0x01   byte  0x86   byte  0xa0      10^5
byte  0x0f   byte  0x42   byte  0x40      10^6
byte  0x98   byte  0x96   byte  0x80      10^7
byte  0x05   byte  0xf5   byte  0xe1   byte  0x00      10^8
byte  0x3b   byte  0x9a   byte  0xca   byte  0x00      10^9
byte  0x02   byte  0x54   byte  0x0b   byte  0xe4   byte  0x00      10^10
byte  0x17   byte  0x48   byte  0x76   byte  0xe8   byte  0x00      10^11
byte  0xe8   byte  0xd4   byte  0xa5   byte  0x10   byte  0x00      10^12
byte  0x09   byte  0x18   byte  0x4e   byte  0x72   byte  0xa0   byte  0x00      10^13
byte  0x5a   byte  0xf3   byte  0x10   byte  0x7a   byte  0x40   byte  0x00      10^14
byte  0x03   byte  0x8d   byte  0x7e   byte  0xa4   byte  0xc6   byte  0x80   byte  0x00      10^15
byte  0x23   byte  0x86   byte  0xf2   byte  0x6f   byte  0xc1   byte  0x00   byte  0x00      10^16
byte  0x01   byte  0x63   byte  0x45   byte  0x78   byte  0x5d   byte  0x8a   byte  0x00   byte  0x00      10^17
byte  0x0d   byte  0xe0   byte  0xb6   byte  0xb3   byte  0xa7   byte  0x64   byte  0x00   byte  0x00      10^18
byte  0x8a   byte  0xc7   byte  0x23   byte  0x04   byte  0x89   byte  0xe8   byte  0x00   byte  0x00      10^19
byte  0x05   byte  0x6b   byte  0xc7   byte  0x5e   byte  0x2d   byte  0x63   byte  0x10   byte  0x00   byte  0x00      10^20
byte  0x36   byte  0x35   byte  0xc9   byte  0xad   byte  0xc5   byte  0xde   byte  0xa0   byte  0x00   byte  0x00      10^21
byte  0x02   byte  0x1e   byte  0x19   byte  0xe0   byte  0xc9   byte  0xba   byte  0xb2   byte  0x40   byte  0x00   byte  0x00      10^22
byte  0x15   byte  0x2d   byte  0x02   byte  0xc7   byte  0xe1   byte  0x4a   byte  0xf6   byte  0x80   byte  0x00   byte  0x00      10^23
byte  0xd3   byte  0xc2   byte  0x1b   byte  0xce   byte  0xcc   byte  0xed   byte  0xa1   byte  0x00   byte  0x00   byte  0x00      10^24
byte  0x08   byte  0x45   byte  0x95   byte  0x16   byte  0x14   byte  0x01   byte  0x48   byte  0x4a   byte  0x00   byte  0x00   byte  0x00      10^25
byte  0x52   byte  0xb7   byte  0xd2   byte  0xdc   byte  0xc8   byte  0x0c   byte  0xd2   byte  0xe4   byte  0x00   byte  0x00   byte  0x00      10^26
byte  0x03   byte  0x3b   byte  0x2e   byte  0x3c   byte  0x9f   byte  0xd0   byte  0x80   byte  0x3c   byte  0xe8   byte  0x00   byte  0x00   byte  0x00      10^27
byte  0x20   byte  0x4f   byte  0xce   byte  0x5e   byte  0x3e   byte  0x25   byte  0x02   byte  0x61   byte  0x10   byte  0x00   byte  0x00   byte  0x00      10^28
byte  0x01   byte  0x43   byte  0x1e   byte  0x0f   byte  0xae   byte  0x6d   byte  0x72   byte  0x17   byte  0xca   byte  0xa0   byte  0x00   byte  0x00   byte  0x00      10^29
byte  0x0c   byte  0x9f   byte  0x2c   byte  0x9c   byte  0xd0   byte  0x46   byte  0x74   byte  0xed   byte  0xea   byte  0x40   byte  0x00   byte  0x00   byte  0x00      10^30
byte  0x7e   byte  0x37   byte  0xbe   byte  0x20   byte  0x22   byte  0xc0   byte  0x91   byte  0x4b   byte  0x26   byte  0x80   byte  0x00   byte  0x00   byte  0x00      10^31
// if the input string is short, pad it with blanks.
// if the input string is long, truncate it.
static public string padortruncate string s  int fixedlength
if  s length   >  fixedlength     we need to truncate
return s substring 0  fixedlength
else      we need to pad
stringbuffer buffer   new stringbuffer s
for  int i   0  i < fixedlength   s length    i
buffer append
return buffer tostring
static public void checkfornegativepositivesqlcard sqlca sqlca  statement statement  throws sqlexception
if  sqlca    null
int sqlcode   sqlca getsqlcode
if  sqlcode < 0
throw new sqlexception statement agent_ logwriter_  sqlca
else
if  sqlcode > 0
statement accumulatewarning new sqlwarning statement agent_ logwriter_  sqlca
static public void checkfornegativepositivesqlcard sqlca sqlca  resultset resultset  throws sqlexception
if  sqlca    null
int sqlcode   sqlca getsqlcode
if  sqlcode < 0
throw new sqlexception resultset agent_ logwriter_  sqlca
else
if  sqlcode > 0
resultset accumulatewarning new sqlwarning resultset agent_ logwriter_  sqlca
static public int getsqlcodefromsqlca sqlca sqlca
if  sqlca    null
return 0
return sqlca getsqlcode
static public int getupdatecountfromsqlcard sqlca sqlca
if  sqlca    null
return 0
else
return sqlca getupdatecount
public static int min int i  int j
return  i < j  ? i   j
public static int max int i  int j
return  i < j  ? j   i
// latestexception is assumed to be non-null, accumulatedexceptions can be null
public static sqlexception accumulatesqlexception sqlexception latestexception
sqlexception accumulatedexceptions
if  accumulatedexceptions    null
return latestexception
else
accumulatedexceptions setnextexception latestexception
return accumulatedexceptions
public static sqlexception accumulatesqlexception sqlexception latestexception
sqlexception accumulatedexceptions
if  accumulatedexceptions    null
return latestexception
else
accumulatedexceptions setnextexception latestexception
return accumulatedexceptions
// latestexception is assumed to be non-null, accumulatedexceptions can be null
public static sqlwarning accumulatesqlwarning sqlwarning latestexception
sqlwarning accumulatedexceptions
latestexception setnextexception accumulatedexceptions
return latestexception
// just a thought...
static string getsqltypename int sqltype
switch  sqltype
case java sql types bigint
return
case java sql types binary
return
case java sql types bit
return
case java sql types char
return
case java sql types date
return
case java sql types decimal
return
case java sql types double
return
case java sql types real
return
case java sql types integer
return
case java sql types longvarbinary
return
case java sql types longvarchar
return
case java sql types null
return
case java sql types numeric
return
case java sql types other
return
case java sql types float
return
case java sql types smallint
return
case java sql types time
return
case java sql types timestamp
return
case java sql types tinyint
return
case java sql types varbinary
return
case java sql types varchar
return
default
return null
public static boolean issqltypenullable int sqltype
return  sqltype   0x01     sqltype
public static int getnonnullablesqltype int sqltype
return sqltype   ~1