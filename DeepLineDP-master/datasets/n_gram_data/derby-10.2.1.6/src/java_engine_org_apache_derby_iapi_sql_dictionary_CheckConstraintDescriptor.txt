/*
derby - class org.apache.derby.iapi.sql.dictionary.checkconstraintdescriptor
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi sql dictionary
import org apache derby catalog referencedcolumns
import org apache derby catalog uuid
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi sql statementtype
/**
* this class represents a check constraint descriptor.
*
* @author jamie
*/
public class checkconstraintdescriptor extends constraintdescriptor
referencedcolumns	referencedcolumns
string						constrainttext
checkconstraintdescriptor
datadictionary datadictionary
tabledescriptor table
string constraintname
boolean deferrable
boolean initiallydeferred
uuid constraintid
string constrainttext
referencedcolumns referencedcolumns
schemadescriptor schemadesc
boolean	isenabled
super datadictionary  table  constraintname  deferrable
initiallydeferred   int   null
constraintid  schemadesc  isenabled
this constrainttext   constrainttext
this referencedcolumns   referencedcolumns
/**
* does this constraint have a backing index?
*
* @return boolean	whether or not there is a backing index for this constraint.
*/
public boolean hasbackingindex
return false
/**
* gets an identifier telling what type of descriptor it is
* (unique, primary key, foreign key, check).
*
* @return	an identifier telling what type of descriptor it is
*		(unique, primary key, foreign key, check).
*/
public int	getconstrainttype
return datadictionary check_constraint
/**
* get the text of the constraint. (only non-null/meaningful for check
* constraints.)
* @return	the constraint text.
*/
public string getconstrainttext
return constrainttext
/**
* get the uuid of the backing index, if one exists.
*
* @return the uuid of the backing index, if one exists, else null.
*/
public uuid getconglomerateid
return null
/**
* get the referencedcolumns.
*
* @return the referencedcolumns.
*/
public referencedcolumns getreferencedcolumnsdescriptor
return referencedcolumns
/**
* set the referencedcolumns; used in drop column
*
* @param	rcd	the new referencedcolumns.
*/
public void setreferencedcolumnsdescriptor referencedcolumns rcd
referencedcolumns   rcd
/**
* get the referenced columns as an int[] of column ids.
*
* @return the array of referenced column ids.
*/
public int getreferencedcolumns
return referencedcolumns getreferencedcolumnpositions
/**
* does this constraint need to fire on this type of
* dml?  for a check constraint, all inserts, and
* appropriate updates
*
* @param stmttype	the type of dml
* (statementtype.insert|statementtype.update|statementtype.delete)
* @param modifiedcols	the columns modified, or null for all
*
* @return true/false
*/
public boolean needstofire int stmttype  int modifiedcols
/*
** if we are disabled, we never fire
*/
if   isenabled
return false
if  stmttype    statementtype insert
return true
if  stmttype    statementtype delete
return false
// if update, only relevant if columns intersect
return docolumnsintersect modifiedcols  getreferencedcolumns
/**
* convert the checkconstraintdescriptor to a string.
*
* @return	a string representation of this checkconstraintdescriptor
*/
public string	tostring
if  sanitymanager debug
return     constrainttext
referencedcolumns
super tostring
else
return