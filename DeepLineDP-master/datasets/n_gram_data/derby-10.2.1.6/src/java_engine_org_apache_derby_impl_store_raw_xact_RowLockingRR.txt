/*
derby - class org.apache.derby.impl.store.raw.xact.rowlockingrr
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl store raw xact
import org apache derby iapi services locks lockfactory
import org apache derby iapi services locks c_lockfactory
import org apache derby iapi services locks latch
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi store raw containerhandle
import org apache derby iapi store raw containerlock
import org apache derby iapi store raw lockingpolicy
import org apache derby iapi store raw recordhandle
import org apache derby iapi store raw rowlock
import org apache derby iapi store raw transaction
import org apache derby iapi error standardexception
/**
a locking policy that implements row level locking with repeatable read
isolation.  since phantom protection with previous key locking is actually
handled by the upper level access methods, the only difference in repeatable
read is that read locks are of type rowlock.rs2.  this type will not
conflict with a previous key insert lock.
@see org.apache.derby.iapi.store.raw.lockingpolicy
*/
public class rowlockingrr extends rowlocking3
protected rowlockingrr lockfactory lf
super lf
protected rowlock getreadlocktype
return rowlock rs2
protected rowlock getupdatelocktype
return rowlock ru2
protected rowlock getwritelocktype
return rowlock rx2
/**
* unlock a record after it has been locked for read.
* <p>
* in repeatable read only unlock records which "did not qualify".  for
* example in a query like "select * from foo where a = 1" on a table
* with no index it is only necessary to hold locks on rows where a=1, but
* in the process of finding those rows the system will get locks on other
* rows to verify they are committed before applying the qualifier.  those
* locks can be released under repeatable read isolation.
* <p>
*
* @exception  standardexception  standard exception policy.
**/
public void unlockrecordafterread
transaction     t
containerhandle container_handle
recordhandle    record
boolean         forupdate
boolean         row_qualified
throws standardexception
if   row_qualified
object qualifier   forupdate ? rowlock ru2   rowlock rs2
int count
lf unlock t getcompatibilityspace    t  record  qualifier
if  sanitymanager debug
// in the case of lock escalation the count could be 0.
if    count    1    count    0
sanitymanager throwassert
count
record getcontainerid