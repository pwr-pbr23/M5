/*
derby - class org.apache.derby.impl.sql.compile.querytreenodevector
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package	org apache derby impl sql compile
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi sql compile visitor
import org apache derby iapi sql compile visitable
import org apache derby iapi error standardexception
import java util enumeration
import java util vector
/**
* querytreenodevector is the root class for all lists of query tree nodes.
* it provides a wrapper for java.util.vector. all
* lists of query tree nodes inherit from querytreenodevector.
*
* @author jerry brenner
*/
abstract class querytreenodevector extends querytreenode
private vector			v   new vector
public final int size
return v size
querytreenode elementat int index
return  querytreenode  v elementat index
final void addelement querytreenode qt
v addelement qt
final void removeelementat int index
v removeelementat index
final void removeelement querytreenode qt
v removeelement qt
final object remove int index
return  querytreenode   v remove index
final int indexof querytreenode qt
return v indexof qt
final void setelementat querytreenode qt  int index
v setelementat qt  index
void destructiveappend querytreenodevector qtnv
nondestructiveappend qtnv
qtnv removeallelements
void nondestructiveappend querytreenodevector qtnv
int qtnvsize   qtnv size
for  int index   0  index < qtnvsize  index
v addelement qtnv elementat index
final void removeallelements
v removeallelements
final void insertelementat querytreenode qt  int index
v insertelementat qt  index
/**
* format this list as a string
*
* we can simply iterate through the list.  note each list member
* is a querytreenode, and so should have its specialization of
* tostring defined.
*
* @return	this list formatted as a string
*/
public string tostring
if  sanitymanager debug
stringbuffer	buffer   new stringbuffer
for  int index   0  index < size    index
buffer append elementat index  tostring    append
return buffer tostring
else
return
/**
* accept a visitor, and call v.visit()
* on child nodes as necessary.
*
* @param v the visitor
*
* @exception standardexception on error
*/
public visitable accept visitor v
throws standardexception
visitable		returnnode   v visit this
if  v skipchildren this
return returnnode
int size   size
for  int index   0  index < size  index
setelementat  querytreenode   querytreenode  elementat index   accept v   index
return returnnode