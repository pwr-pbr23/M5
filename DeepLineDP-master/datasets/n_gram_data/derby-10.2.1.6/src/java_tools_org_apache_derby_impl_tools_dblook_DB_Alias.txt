/*
derby - class org.apache.derby.impl.tools.dblook.db_alias
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl tools dblook
import java sql connection
import java sql statement
import java sql preparedstatement
import java sql resultset
import java sql sqlexception
import java sql databasemetadata
import java util hashmap
import org apache derby tools dblook
public class db_alias
// prepared statements use throughout the ddl
// generation process.
/* ************************************************
* generate the ddl for all stored procedures and
* functions in a given database and write it to
* output via logs.java.
* @param conn connection to the source database.
****/
public static void doproceduresandfunctions connection conn
throws sqlexception
// first do stored procedures.
statement stmt   conn createstatement
resultset rs   stmt executequery
generateddl rs     	      > for procedures
// now do functions.
rs   stmt executequery
generateddl rs     	      > for functions
rs close
stmt close
return
/* ************************************************
* generate the ddl for either stored procedures or
* functions in a given database, depending on the
* the received aliastype.
* @param rs result set holding either stored procedures
*  or functions.
* @param aliastype indication of whether we're generating
*  stored procedures or functions.
****/
private static void generateddl resultset rs  char aliastype
throws sqlexception
boolean firsttime   true
while  rs next
if  rs getboolean 6
// it's a system alias, so we ignore it.
continue
string procschema   dblook lookupschemaid rs getstring 4
if  dblook isignorableschema procschema
continue
if  firsttime
logs reportstring
logs reportmessage  aliastype
?
logs reportstring
string aliasname   rs getstring 1
string fullname   dblook addquotes
dblook expanddoublequotes aliasname
fullname   procschema       fullname
string creationstring   createprocorfuncstring
fullname  rs  aliastype
logs writetonewddl creationstring
logs writestmtendtonewddl
logs writenewlinetonewddl
firsttime   false
/* ************************************************
* generate ddl for a specific stored procedure or
* function.
* @param aliasname name of the current procedure/function
* @param aliasinfo info about the current procedure/function
* @param aliastype indicator of whether we're generating
*  a stored procedure or a function.
* @return ddl for the current stored procedure is
*   returned, as a string.
****/
private static string createprocorfuncstring string aliasname
resultset aliasinfo  char aliastype  throws sqlexception
stringbuffer alias   new stringbuffer
if  aliastype
alias append
else if  aliastype
alias append
alias append aliasname
alias append
string params   aliasinfo getstring 2
// just grab the parameter part; we'll get the method name later.
alias append params substring params indexof     params length
alias append
// now add the external name.
alias append
alias append aliasinfo getstring 5
alias append
// get method name from parameter string fetched above.
alias append params substring 0  params indexof
alias append
return alias tostring
/* ************************************************
* generate the ddl for all synonyms in a given
* database. on successul return, the ddl for the
* synonyms has been written to output via logs.java.
* @param conn connection to the source database.
* @return
****/
public static void dosynonyms connection conn  throws sqlexception
statement stmt   conn createstatement
resultset rs   stmt executequery
boolean firsttime   true
while  rs next
if  rs getboolean 4
// it's a system alias, so we ignore it.
continue
string aliasschema   dblook lookupschemaid rs getstring 2
if  dblook isignorableschema aliasschema
continue
if  firsttime
logs reportstring
logs reportmessage
logs reportstring
string aliasname   rs getstring 1
string aliasfullname   dblook addquotes
dblook expanddoublequotes aliasname
aliasfullname   aliasschema       aliasfullname
logs writetonewddl   aliasfullname   rs getstring 3
logs writestmtendtonewddl
logs writenewlinetonewddl
firsttime   false
rs close
stmt close
return