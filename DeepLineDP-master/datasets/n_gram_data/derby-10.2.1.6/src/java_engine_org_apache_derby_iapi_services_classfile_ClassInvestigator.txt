/*
derby - class org.apache.derby.iapi.services.classfile.classinvestigator
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi services classfile
import java io inputstream
import java util enumeration
import java io ioexception
import java util vector
import org apache derby iapi services classfile vmdescriptor
import org apache derby iapi services classfile vmdescriptor
import java util hashset
import java util hashtable
import java util vector
import java util enumeration
import java util collections
/**
*/
public class classinvestigator extends classholder
public static classinvestigator load inputstream is
throws ioexception
classinput classinput   new classinput is
// check the header
checkheader classinput
//	read in the constant pool
int constantpoolcount   classinput getu2
classinvestigator ci   new classinvestigator constantpoolcount
// yes, index starts at 1, the '0'th constant pool entry
// is reserved for the jvm and is not present in the class file.
for  int i   1  i < constantpoolcount
constantpoolentry item   classinvestigator getconstant classinput
i    ci addentry item getkey    item
}
// read in access_flags and class indexes
ci access_flags   classinput getu2
ci this_class   classinput getu2
ci super_class   classinput getu2
// interfaces is a simple int array
int interfacecount   classinput getu2
if  interfacecount    0
ci interfaces   new int
for  int i   0  i < interfacecount  i
ci interfaces   classinput getu2
}
int fieldcount   classinput getu2
if  fieldcount    0
ci field_info   new membertable fieldcount
for  int i   0  i < fieldcount  i
ci field_info addentry readclassmember ci  classinput
}
}
int methodcount   classinput getu2
if  methodcount    0
ci method_info   new membertable methodcount
for  int i   0  i < methodcount  i
ci method_info addentry readclassmember ci  classinput
}
}
int attributecount   classinput getu2
if  attributecount    0
ci attribute_info   new attributes attributecount
for  int i   0  i < attributecount  i
ci attribute_info addentry new attributeentry classinput
}
return ci
}
private static classmember readclassmember classinvestigator ci  classinput in
throws ioexception
classmember member   new classmember ci  in getu2     in getu2    in getu2
int attributecount   in getu2
if  attributecount    0
member attribute_info   new attributes attributecount
for  int i   0  i < attributecount  i
member attribute_info addentry new attributeentry in
}
return member
}
/*
**	constructors.
*/
private classinvestigator int constantpoolcount
super constantpoolcount
}
/*
** methods to investigate this class
*/
public enumeration implementedinterfaces
int interfacecount   interfaces    null ? 0   interfaces length
vector implemented   new vector interfacecount
for  int i   0  i < interfacecount  i
implemented addelement classname interfaces
}
return implemented elements
}
public enumeration getfields
if  field_info    null
return collections enumeration collections empty_list
return field_info entries elements
}
public enumeration getmethods
if  method_info    null
return collections enumeration collections empty_list
return method_info entries elements
}
public enumeration referencedclasses
return getclasses getmethods    getfields
}
/**
return an enumeration of all referenced classes
*/
private enumeration getclasses enumeration methods  enumeration fields
return new classenumeration this  cptentries elements    methods  fields
}
public enumeration getstrings
hashset strings   new hashset 30  0 8f
int size   cptentries size
for  int i   1  i < size  i
constantpoolentry cpe   getentry i
if   cpe    null      cpe gettag      vmdescriptor constant_string
continue
constant_index_info cii    constant_index_info  cpe
strings add nameindextostring cii geti1
}
return java util collections enumeration strings
}
public classmember getmember string simplename  string descriptor
if  descriptor startswith
if  method_info    null
return null
return method_info find simplename  descriptor
}
else
if  field_info    null
return null
return  field_info find simplename  descriptor
}
}
/**
return an enumeration of all member references
*/
/*
enumeration getmemberreferences() {
return new referenceenumeration(this, elements());
}
*/
/*
** methods to modify the class.
*/
// remove all atttributes that are not essential
public void removeattributes   throws ioexception
// class level attributes
if  attribute_info    null
for  int i   attribute_info size     1  i >  0   i
attributeentry ae    attributeentry  attribute_info elementat i
string name   nameindextostring ae getnameindex
if  name equals
attribute_info removeelementat i
else if  name equals
leave in
else
system err println     name
}
if  attribute_info size      0
attribute_info   null
}
attribute_info   null
// fields
for  enumeration e   getfields    e hasmoreelements
classmember member    classmember  e nextelement
attributes attrs   member attribute_info
if  attrs    null
for  int i   attrs size     1  i >  0   i
attributeentry ae    attributeentry  attrs elementat i
string name   nameindextostring ae getnameindex
if  name equals
leave in
else if  name equals
leave in
else
system err println     name
}
if  attrs size      0
member attribute_info   null
}
}
// methods
for  enumeration e   getmethods    e hasmoreelements
classmember member    classmember  e nextelement
attributes attrs   member attribute_info
if  attrs    null
for  int i   attrs size     1  i >  0   i
attributeentry ae    attributeentry  attrs elementat i
string name   nameindextostring ae getnameindex
if  name equals
processcodeattribute member  ae
else if  name equals
leave in
else if  name equals
leave in
else if  name equals
leave in
else
system err println     name
}
if  attrs size      0
member attribute_info   null
}
}
}
private void processcodeattribute classmember member  attributeentry ae  throws ioexception
classinput ci   new classinput new java io bytearrayinputstream ae infoin
ci skipbytes 4      puts us at code_length
int len   ci getu4
ci skipbytes len      puts us at exception_table_length
int count   ci getu2
if  count    0
ci skipbytes 8   count
int nonattrlength   4   4   len   2    8   count
// now at attributes
count   ci getu2
if  count    0
return
int newcount   count
for  int i   0  i < count  i
int nameindex   ci getu2
string name   nameindextostring nameindex
if  name equals       name equals
newcount
else
system err println     name
len   ci getu4
ci skipbytes len
}
if  newcount    0
system err println
system exit 1
}
// this is only coded for all attributes within a code attribute being removed.
byte newinfo   new byte
system arraycopy ae infoin  0  newinfo  0  nonattrlength
// last two bytes are left at 0 which means 0 attributes
ae infoin   newinfo
}
public void renameclasselements hashtable classnamemap  hashtable membernamemap
// this & super class
renamestring classnamemap   constant_index_info  getentry this_class
renamestring classnamemap   constant_index_info  getentry super_class
// implemented interfaces
// handled by class entries below
// classes & strings
// descriptors
int size   cptentries size
for  int i   1  i < size  i
constantpoolentry cpe   getentry i
if  cpe    null
continue
switch  cpe gettag
case vmdescriptor constant_string
case vmdescriptor constant_class
constant_index_info cii    constant_index_info  cpe
renamestring classnamemap  cii
break
}
case vmdescriptor constant_nameandtype
constant_index_info cii    constant_index_info  cpe
string newdescriptor   newdescriptor classnamemap  nameindextostring cii geti2
if  newdescriptor    null
dorenamestring cii geti2    newdescriptor
}
break
}
default
continue
}
}
//system.out.println("starting fields");
// now the methods & fields, only descriptors at this time
renamemembers getfields    classnamemap  membernamemap
renamemembers getmethods    classnamemap  membernamemap
}
private void renamemembers enumeration e  hashtable classnamemap  hashtable membernamemap
for    e hasmoreelements
classmember member    classmember  e nextelement
string oldmembername   nameindextostring member name_index
string newmembername    string  membernamemap get oldmembername
if  newmembername    null
dorenamestring member name_index  newmembername
string newdescriptor   newdescriptor classnamemap  nameindextostring member descriptor_index
if  newdescriptor    null
dorenamestring member descriptor_index  newdescriptor
}
}
}
private void renamestring hashtable classnamemap  constant_index_info cii
int index   cii geti1
string name   nameindextostring index
string newname    string  classnamemap get name
if  newname    null
dorenamestring index  newname
return
}
// have to look for arrays
if  cii gettag      vmdescriptor constant_class
if  name charat 0
int classoffset   name indexof      1
string baseclassname   name substring classoffset  name length     1
newname    string  classnamemap get baseclassname
if  newname    null
string newarrayclassname   name substring 0  classoffset    newname
dorenamestring index  newarrayclassname
}
}
}
}
private void dorenamestring int index  string newname
constantpoolentry cpe   getentry index
if  cpe gettag      vmdescriptor constant_utf8
throw new runtimeexception     cpe
constant_utf8_info newcpe   new constant_utf8_info newname
cpthashtable remove cpe getkey
cpthashtable put cpe getkey    cpe
newcpe index   index
cptentries setelementat newcpe  index
}
/*
**
*/
static private void checkheader classinput in  throws ioexception
int magic   in getu4
int minor_version   in getu2
int major_version   in getu2
if  magic    vmdescriptor java_class_format_magic
throw new classformaterror
}
private static constantpoolentry getconstant classinput in
throws ioexception
constantpoolentry item
int tag
tag   in readunsignedbyte
switch  tag
case vmdescriptor constant_class
case vmdescriptor constant_string
item   new constant_index_info tag  in getu2    0
break
case vmdescriptor constant_nameandtype
case vmdescriptor constant_fieldref
case vmdescriptor constant_methodref
case vmdescriptor constant_interfacemethodref
item   new constant_index_info tag  in getu2    in getu2
break
case vmdescriptor constant_integer
item   new constant_integer_info in getu4
break
case vmdescriptor constant_float
item   new constant_float_info in readfloat
break
case vmdescriptor constant_long
item   new constant_long_info in readlong
break
case vmdescriptor constant_double
item   new constant_double_info in readdouble
break
case vmdescriptor constant_utf8
item   new constant_utf8_info in readutf
break
default
throw new classformaterror
}
return item
}
public static string newdescriptor hashtable classnamemap  string descriptor
string newdescriptor   null
int dlen   descriptor length
for  int offset   0  offset < dlen
char c   descriptor charat offset
switch  c
case vmdescriptor c_void
case vmdescriptor c_boolean
case vmdescriptor c_byte
case vmdescriptor c_char
case vmdescriptor c_short
case vmdescriptor c_int
case vmdescriptor c_long
case vmdescriptor c_float
case vmdescriptor c_double
case vmdescriptor c_array
case vmdescriptor c_method
case vmdescriptor c_endmethod
default
offset
continue
case vmdescriptor c_class
int startoffset   offset
while  descriptor charat offset       vmdescriptor c_endclass
int endoffset   offset
// name includes l and ;
string name   descriptor substring startoffset  endoffset
string newname    string  classnamemap get name
if  newname    null
if  newdescriptor    null
newdescriptor   descriptor
// we just replace the first occurance of it,
// the loop will hit any next occurance.
int startpos   newdescriptor indexof name
string tmp
if  startpos    0
tmp   newname
else
tmp   newdescriptor substring 0  startpos
newname
int endpos   startpos   name length
if  endpos < newdescriptor length
tmp    newdescriptor substring endpos   newdescriptor length
}
newdescriptor   tmp
}
}
}
}
//if (newdescriptor != null) {
//	system.out.println("o - " + descriptor);
//	system.out.println("n - " + newdescriptor);
//}
return newdescriptor
}
}