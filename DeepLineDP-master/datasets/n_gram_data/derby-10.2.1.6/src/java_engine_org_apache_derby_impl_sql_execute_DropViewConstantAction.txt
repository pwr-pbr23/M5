/*
derby - class org.apache.derby.impl.sql.execute.dropviewconstantaction
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl sql execute
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi error standardexception
import org apache derby iapi sql conn languageconnectioncontext
import org apache derby iapi sql dictionary conglomeratedescriptor
import org apache derby iapi sql dictionary datadescriptorgenerator
import org apache derby iapi sql dictionary datadictionary
import org apache derby iapi sql dictionary datadictionarycontext
import org apache derby iapi sql dictionary schemadescriptor
import org apache derby iapi sql dictionary tabledescriptor
import org apache derby iapi sql dictionary viewdescriptor
import org apache derby iapi sql depend dependencymanager
import org apache derby iapi reference sqlstate
import org apache derby iapi sql execute constantaction
import org apache derby iapi sql activation
import org apache derby iapi store access transactioncontroller
import org apache derby catalog uuid
/**
*	this class  describes actions that are always performed for a
*	drop view statement at execution time.
*
*	@author jerry brenner.
*/
class dropviewconstantaction extends ddlconstantaction
private string				fulltablename
private string				tablename
private schemadescriptor	sd
// constructors
/**
*	make the constantaction for a drop view statement.
*
*
*	@param	fulltablename		fully qualified table name
*	@param	tablename			table name.
*	@param	sd					schema that view lives in.
*
*/
dropviewconstantaction
string				fulltablename
string				tablename
schemadescriptor	sd
this fulltablename   fulltablename
this tablename   tablename
this sd   sd
if  sanitymanager debug
sanitymanager assert sd    null
// object methods
public	string	tostring
// do not put this under sanitymanager.debug - it is needed for
// error reporting.
return     fulltablename
// interface methods
/**
*	this is the guts of the execution-time logic for drop view.
*
*	@see constantaction#executeconstantaction
*
* @exception standardexception		thrown on failure
*/
public void	executeconstantaction  activation activation
throws standardexception
tabledescriptor td
viewdescriptor vd
languageconnectioncontext lcc   activation getlanguageconnectioncontext
datadictionary dd   lcc getdatadictionary
dependencymanager dm   dd getdependencymanager
transactioncontroller tc   lcc gettransactionexecute
/*
** inform the data dictionary that we are about to write to it.
** there are several calls to data dictionary "get" methods here
** that might be done in "read" mode in the data dictionary, but
** it seemed safer to do this whole operation in "write" mode.
**
** we tell the data dictionary we're done writing at the end of
** the transaction.
*/
dd startwriting lcc
/* get the table descriptor.  we're responsible for raising
* the error if it isn't found
*/
td   dd gettabledescriptor tablename  sd
if  td    null
throw standardexception newexception sqlstate lang_table_not_found_during_execution  fulltablename
/* verify that tabledescriptor represents a view */
if  td gettabletype      tabledescriptor view_type
throw standardexception newexception sqlstate lang_drop_view_on_non_view  fulltablename
vd   dd getviewdescriptor td
vd dropviewwork dd  dm  lcc  tc  sd  td  false