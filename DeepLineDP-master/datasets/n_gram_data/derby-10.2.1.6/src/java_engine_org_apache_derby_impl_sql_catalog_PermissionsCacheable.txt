/*
derby - class org.apache.derby.impl.sql.catalog.permissionscacheable
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl sql catalog
import org apache derby iapi error standardexception
import org apache derby iapi services cache cacheable
import org apache derby iapi services cache cachemanager
import org apache derby iapi services io formatablebitset
import org apache derby iapi sql conn authorizer
import org apache derby iapi sql conn connectionutil
import org apache derby iapi sql dictionary tabledescriptor
import org apache derby iapi sql dictionary schemadescriptor
import org apache derby iapi sql dictionary aliasdescriptor
import org apache derby iapi sql dictionary tablepermsdescriptor
import org apache derby iapi sql dictionary permissionsdescriptor
import org apache derby iapi sql dictionary colpermsdescriptor
import org apache derby iapi sql dictionary routinepermsdescriptor
import org apache derby iapi services sanity sanitymanager
/**
* this class implements a cacheable for a datadictionary cache of
* permissions.
*/
class permissionscacheable implements cacheable
protected final datadictionaryimpl dd
private permissionsdescriptor permissions
permissionscacheable datadictionaryimpl dd
this dd   dd
/* cacheable interface */
public cacheable setidentity object key  throws standardexception
// if the user does not have permission then cache an empty (no permission) descriptor in
// case the same user asks again. that is particularly important for table permission because
// we ask about table permission before column permissions. if a user has permission to use a
// proper subset of the columns we will still ask about table permission every time he tries
// to access that column subset.
if  key instanceof tablepermsdescriptor
tablepermsdescriptor tablepermskey    tablepermsdescriptor  key
permissions   dd getuncachedtablepermsdescriptor  tablepermskey
if  permissions    null
// the owner has all privileges unless they have been revoked.
tabledescriptor td   dd gettabledescriptor  tablepermskey gettableuuid
schemadescriptor sd   td getschemadescriptor
if  sd issystemschema
// resolve the access to system tables is hard coded to select only to everyone.
// is this the way we want derby to work? should we allow revocation of read access
// to system tables? if so we must explicitly add a row to the sys.systablepermissions
// table for each system table when a database is created.
permissions   new tablepermsdescriptor  dd
tablepermskey getgrantee
string  null
tablepermskey gettableuuid
else if  tablepermskey getgrantee   equals  sd getauthorizationid
permissions   new tablepermsdescriptor  dd
tablepermskey getgrantee
authorizer system_authorization_id
tablepermskey gettableuuid
else
permissions   new tablepermsdescriptor  dd
tablepermskey getgrantee
string  null
tablepermskey gettableuuid
else if  key instanceof colpermsdescriptor
colpermsdescriptor colpermskey    colpermsdescriptor  key
permissions   dd getuncachedcolpermsdescriptor colpermskey
if  permissions    null
permissions   new colpermsdescriptor  dd
colpermskey getgrantee
string  null
colpermskey gettableuuid
colpermskey gettype
formatablebitset  null
else if  key instanceof routinepermsdescriptor
routinepermsdescriptor routinepermskey    routinepermsdescriptor  key
permissions   dd getuncachedroutinepermsdescriptor  routinepermskey
if  permissions    null
// the owner has all privileges unless they have been revoked.
try
aliasdescriptor ad   dd getaliasdescriptor  routinepermskey getroutineuuid
schemadescriptor sd   dd getschemadescriptor  ad getschemauuid
connectionutil getcurrentlcc   gettransactionexecute
if  sd issystemschema       sd isschemawithgrantableroutines
permissions   new routinepermsdescriptor  dd
routinepermskey getgrantee
string  null
routinepermskey getroutineuuid
true
else if  routinepermskey getgrantee   equals  sd getauthorizationid
permissions   new routinepermsdescriptor  dd
routinepermskey getgrantee
authorizer system_authorization_id
routinepermskey getroutineuuid
true
catch  java sql sqlexception sqle
throw standardexception plainwrapexception  sqle
else
if  sanitymanager debug
sanitymanager notreached
return null
if  permissions    null
return this
return null
end of setidentity
public cacheable createidentity object key  object createparameter  throws standardexception
if  sanitymanager debug
sanitymanager assert   key instanceof tablepermsdescriptor
key instanceof colpermsdescriptor
key instanceof routinepermsdescriptor
key getclass   getname
if  key    null
return null
permissions    permissionsdescriptor    permissionsdescriptor key  clone
return this
end of createidentity
public void clearidentity
permissions   null
public object getidentity
return permissions
public boolean isdirty
return false
public void clean boolean forremove  throws standardexception