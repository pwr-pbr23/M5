/*
derby - class org.apache.derby.impl.sql.execute.autoincrementcounter
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl sql execute
import org apache derby iapi services sanity sanitymanager
import	org apache derby iapi sql dictionary tabledescriptor
import org apache derby iapi sql dictionary columndescriptor
import org apache derby iapi sql dictionary datadictionary
import org apache derby iapi store access transactioncontroller
import org apache derby iapi error standardexception
import org apache derby catalog uuid
import org apache derby iapi reference sqlstate
/**
* autoincrementcounter is a not so general counter for the specific purposes
* of autoincrement columns. it can be thought of as an in-memory autoincrement
* column.
* the counting or incrementing is done in fashion identical to the
* autoincrementvalue in syscolumns.
* <p>
* to create a counter, the user must call the constructor with a start value,
* increment and optionally a final value. in addition the caller must specify
* the schema name, table name and column name uniquely identifying the
* counter.
* <p>
* when a counter is created it is in an invalid state-- to initialize it, the
* user must call either  <i>update</i> or <i>reset(false)</i>. the value of a
* counter can be changed by either calling reset or update.
* @author manish
*/
public class autoincrementcounter
private long start
private long increment
private string identity
private long finalvalue
private string schemaname
private string tablename
private string columnname
// maintains state.
private long counter
private int columnposition
private boolean initialized   false
/**
* constructor
* @param 	start		the start value of the counter; is a java object as
* 			it can also be null.
* @param   increment	how much to increment the counter by.
* @param	finalvalue	the finalvalue of the counter. used by reset
* @param 	s
* @param   t
* @param	c
*/
public autoincrementcounter long start  long increment  long finalvalue
string s  string t  string c  int position
this increment   increment
this start   start
this initialized   false
this identity   makeidentity s t c
this finalvalue   finalvalue
this schemaname   s
this tablename   t
this columnname   c
this columnposition   position
//		system.out.println("aic created with " + this);
/**
* make a unique key for the counter.
*/
public static string makeidentity string s  string t  string c
return s       t       c
/**
* make a unique key for the counter.
*/
public static string makeidentity tabledescriptor td  columndescriptor cd
return td getschemaname         td getname
cd getcolumnname
/**
* reset to the counter to the beginning or the end.
*
* @param 	begin	if true reset to beginning and mark it uninitialized.
*/
public void reset boolean begin
if  begin    true
initialized   false
else
counter   finalvalue
initialized   true
//		system.out.println("counter reset to " + this);
/**
* update the counter.
*
* @param 	t		update the counter to this value.
*/
public long update long t
counter   t
//		system.out.println("counter updated to " + this);
initialized   true
return counter
/**
* update the counter to its next value.
*
* @exception	standardexception	if the counter has not yet been
* initialized and the start value is null.
*/
public long update   throws standardexception
long counterval
if  initialized    false
// the first time around, counter simply gets the start
// value.
initialized   true
if  start    null
throw standardexception newexception
sqlstate lang_ai_counter_error
counter   start longvalue
else
counter   counter   increment
//		system.out.println("counter updated to " + this);
return counter
/**
* get the current value of the counter. an uninitialized counter means the
* current value is null.
*/
public long getcurrentvalue
if  initialized    false
return null
return new long counter
/**
* return the identity of the counter.
*/
public string getidentity
return identity
/**
* flush a counter to disk; i.e write the current value of the counter into
* the row in syscolumns.
*
* @param	tc			transactioncontroller to use
* @param	dd			datadictionary to use.
* @param	tableuuid	i might have the table name but i need more
* information
* @exception	standardexception standard cloudscape exception.
*/
public void flushtodisk transactioncontroller tc  datadictionary dd
uuid tableuuid
throws standardexception
dd setautoincrementvalue tc  tableuuid  columnname  counter  true
/**
* get the column position in the table for which this counter has been
* created.
* @return the position of the corresponding column in the table (1-based)
*/
public int getcolumnposition
return columnposition
/**
* get the start value
* @return the initial value of the counter
*/
public long getstartvalue
return start
public string tostring
return     identity       counter
start
increment       finalvalue