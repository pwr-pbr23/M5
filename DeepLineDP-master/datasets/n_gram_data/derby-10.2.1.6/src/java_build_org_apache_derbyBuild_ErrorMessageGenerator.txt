/*
derby - class org.apache.derbybuild.errormessagegenerator
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derbybuild
import java io printwriter
import java io fileoutputstream
import java util hashtable
import java lang math
import java sql connection
import java sql drivermanager
import java sql statement
import java sql resultset
/**
*
* this tool is used to generate the dita file that lists all the sql states
* and their error messages.
*/
public class errormessagegenerator
/** driver name */
private	static	final	string	derby_embedded_driver
/** output file name */
private	static	final	string	dita_file_name
/** location of output file in documentation client. the root of the
documentation client is the directory just above src.
*/
private	static	final	string	output_file_stub       dita_file_name
/** usage string */
private static  final   string  usage_string
/** success exit */
private static  final   int success   0
/** failure exit */
private static  final   int failure   1
/** root of the documentation client */
private string  docclientroot
/** the name of the dita file */
private string  ditafilename   dita_file_name
/** the connection url */
private string  url
/** used to write to the dita file */
private printwriter ditawriter
/** table of sql state codes and their meaning */
private static hashtable codes   new hashtable
/** short-hand for a double-quote */
char dq
/** indicates whether we are on the first table */
boolean firsttable   true
/** stores the code for the current row */
string currentcode
/** stores the class comment for the current row */
string currentcomment
static
codes put
codes put
codes put
codes put
codes put
codes put
codes put
codes put
codes put
codes put
codes put
codes put
codes put
codes put
codes put
codes put
codes put
codes put
codes put
codes put
codes put
codes put
codes put
codes put
codes put
codes put
codes put
codes put
codes put
codes put
codes put
codes put
codes put
codes put
codes put
codes put
codes put
codes put
codes put
codes put
codes put
codes put
codes put
codes put
codes put
codes put
codes put
codes put
codes put
codes put
/**
* <p>
* generate the dita file of sqlstates for inclusion in
* derby's reference guide.
* </p>
*
* <ul>
* <li>args[ 0 ] = root of docs client. e.g. "/home/myname/derby/docs/trunk"</li>
* </ul>
*/
public static void main string args
errormessagegenerator generator   new errormessagegenerator
if    generator parseargs  args
generator printusage
system exit  failure
generator setditafilename  generator docclientroot       output_file_stub
try
generator execute
catch   throwable t
t printstacktrace
system exit  failure
system exit  success
/**
* <p>
* parse the arguments. returns false if the arguments are malformed.
* </p>
*
* <ul>
* <li>args[ 0 ] = root of docs client. e.g. "/home/myname/derby/docs"</li>
* </ul>
*/
private boolean    parseargs  string args
int     idx   0
if   args    null     return false
if   args length    1     return false
docclientroot   args
return true
/**
* <p>
* print instructions on how to run this program.
* </p>
*/
private void    printusage
system out println  usage_string
/**
* set the name of the dita file
*/
public void setditafilename string ditafilename
this ditafilename   ditafilename
/**
* set the database url
*/
public void setdatabaseurl string url
this url   url
/**
* execute the program
*/
public void execute   throws exception
try
// open the dita file
ditawriter   openditafile
// generate the header of the dita file
generateditaheader
// generate the error messages for the dita file
generatemessages
// generate the footer of the dita file
generateditafooter
ditawriter close
catch   exception e
throw e
finally
if   ditawriter    null
ditawriter close
/**
* open the dita file for writing
*
* @return a printwriter for the dita file
*/
protected printwriter openditafile   throws exception
return new printwriter new fileoutputstream ditafilename
/**
* generate the header for the dita file
*/
protected void generateditaheader   throws exception
printwriter dw   this ditawriter
ditawriter println     dq       dq
dq       dq
ditawriter println     dq
dq
ditawriter println dq       dq
ditawriter println     dq       dq
dq       dq
ditawriter println
ditawriter println
ditawriter println
ditawriter println
ditawriter println
ditawriter println  license
ditawriter println
ditawriter println
ditawriter println
ditawriter println
ditawriter println
ditawriter println  as is
ditawriter println
ditawriter println
ditawriter println
ditawriter println
ditawriter println
ditawriter println
ditawriter println
ditawriter println
ditawriter println
ditawriter println
ditawriter println
ditawriter println
ditawriter println
dq
dq
ditawriter println
ditawriter println
ditawriter println
/**
* generate the footer for the dita file
*/
protected void generateditafooter   throws exception
ditawriter println
ditawriter println
ditawriter println
/**
* generate the actual error messages
*/
protected void generatemessages   throws exception
// get the list of messages from the database
resultset rs   getmessages
string prevsqlstate   null
while   rs next
string sqlstate   rs getstring 1
string message    replacespecialchars rs getstring 2
string severity   rs getstring 3
// see if it's a new sql state category, and if so,
// start a new table in the dita file
testfornewcategory sqlstate  prevsqlstate
generatetableentry sqlstate  message  severity
prevsqlstate   sqlstate
// tidy up the last table.
generatetablefooter
/**
* replace a substring with some equivalent. for example, we would
* like to replace "<" with "&lt;" in the error messages.
* add any substrings you would like to replace in the code below.
* be aware that the first paramter to the replaceall() method is
* interpreted as a regular expression.
*
* @param input
*      a string that may contain substrings that we want to replace
* @return
*      output string where substrings selected for replacement have been
*      replaced.
* @see java.util.regex.pattern
*/
private static string replacespecialchars java lang string input
string output   input replaceall
output   output replaceall
return output
/**
* test to see if we have a new sql state category, and if so,
* end the old table and start a new table in the dita file.
*
* @param sqlstate
*      the sql state for the current row
*
* @param oldsqlstate
*      the sql state for the previous row
*/
protected void testfornewcategory string sqlstate  string prevsqlstate
throws exception
string prevcode   currentcode
currentcode   getcode sqlstate
if   currentcode    null
ditawriter println
sqlstate
system out println
sqlstate
return
if   currentcode equals prevcode
return
// if we got here, it's a new prefix, let's end the old table
// and generate a header for a new table
generatetableheader
/**
* get the class for the current sql state.
* side effect: sets this.currentcomment
*/
protected string getcode string sqlstate  throws exception
string comment   null
string code   null
if   sqlstate    null
return null
int codelen   sqlstate length
while   codelen >  2
code   sqlstate substring 0 codelen
comment    string codes get code
if   comment    null
this currentcomment   comment
return code
codelen
if   comment    null
return null
return code
/**
* generate the table header for a given prefix
*/
protected void generatetableheader
throws exception
// generate the end of the previous table
if     firsttable
generatetablefooter
else
firsttable   false
// generate the header for this table
ditawriter println     currentcode
currentcomment
ditawriter println     dq       dq
dq       dq       dq
dq       dq       dq
ditawriter println     dq       dq
ditawriter println
ditawriter println     dq       dq
ditawriter println     dq       dq
ditawriter println     dq       dq
ditawriter println
ditawriter println
ditawriter println
/**
* generate the table footer for a given prefix
*/
protected void generatetablefooter
throws exception
ditawriter println
ditawriter println
ditawriter println
/**
* generate a table entry for the current row
*/
protected void generatetableentry string sqlstate  string message
string severity  throws exception
ditawriter println
ditawriter println     dq       dq
sqlstate
ditawriter println     dq       dq
message
ditawriter println
/**
* get the messages from the database
*/
protected resultset getmessages   throws exception
class forname  derby_embedded_driver
connection conn   drivermanager getconnection  url
if   conn    null
throw new exception     url
statement stmt   conn createstatement
resultset rs   stmt executequery
return rs