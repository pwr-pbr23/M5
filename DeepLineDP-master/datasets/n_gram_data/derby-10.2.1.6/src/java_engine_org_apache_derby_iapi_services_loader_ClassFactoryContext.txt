/*
derby - class org.apache.derby.iapi.services.loader.classfactorycontext
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi services loader
import org apache derby iapi services context contextimpl
import org apache derby iapi services context contextmanager
import org apache derby iapi services property persistentset
import org apache derby iapi error exceptionseverity
import org apache derby iapi error standardexception
/**
* context that provides the correct classfactory for the
* current service. allows stateless code to obtain the
* correct class loading scheme.
*/
public abstract class classfactorycontext extends contextimpl
public static final string context_id
private final classfactory cf
protected classfactorycontext contextmanager cm  classfactory cf
super cm  context_id
this cf   cf
public final classfactory getclassfactory
return cf
/**
* get the lock compatibility space to use for the
* transactional nature of the class loading lock.
* used when the classpath changes or a database
* jar file is installed, removed or replaced.
*/
public abstract object getlockspace   throws standardexception
/**
* get the set of properties stored with this service.
*/
public abstract persistentset getpersistentset   throws standardexception
/**
get the mechanism to rad jar files. the classfactory
may keep the jarreader reference from the first class load.
*/
public abstract jarreader getjarreader
/**
* handle any errors. only work here is to pop myself
* on a session or greater severity error.
*/
public final void cleanuponerror throwable error
if  error instanceof standardexception
standardexception se    standardexception  error
if  se getseverity   >  exceptionseverity session_severity
popme