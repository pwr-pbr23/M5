/*
derby - class org.apache.derby.iapi.sql.dictionary.statementtablepermission
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi sql dictionary
import org apache derby iapi error standardexception
import org apache derby catalog uuid
import org apache derby iapi sql conn authorizer
import org apache derby iapi sql conn languageconnectioncontext
import org apache derby iapi reference sqlstate
/**
* this class describes a table permission required by a statement.
*/
public class statementtablepermission extends statementpermission
uuid tableuuid
int privtype     one of authorizer select_priv  update_priv  etc
/**
* constructor for statementtablepermission. creates an instance of
* table permission requested for the given access.
*
* @param tableuuid	uuid of the table
* @param privtype	access privilege requested
*
*/
public statementtablepermission uuid tableuuid  int privtype
this tableuuid   tableuuid
this privtype   privtype
/**
* return privilege access requested for this access descriptor
*
* @return	privilege access
*/
public int getprivtype
return privtype
/**
* return table uuid for this access descriptor
*
* @return	table uuid
*/
public uuid gettableuuid
return tableuuid
/**
* routine to check if another instance of access descriptor matches this.
* used to ensure only one access descriptor for a table of given privilege is created.
* otherwise, every column reference from a table may create a descriptor for that table.
*
* @param obj	another instance of statementpermission
*
* @return	true if match
*/
public boolean equals  object obj
if  obj    null
return false
if  getclass   equals  obj getclass
statementtablepermission other    statementtablepermission  obj
return privtype    other privtype    tableuuid equals  other tableuuid
return false
end of equals
/**
* return hash code for this instance
*
* @return	hashcode
*
*/
public int hashcode
return privtype   tableuuid hashcode
/**
* @see statementpermission#check
*/
public void check  languageconnectioncontext lcc
string authorizationid
boolean forgrant
throws standardexception
datadictionary dd   lcc getdatadictionary
if    haspermissionontable  dd  authorizationid  forgrant
tabledescriptor td   gettabledescriptor  dd
throw standardexception newexception  forgrant ? sqlstate auth_no_table_permission_for_grant
sqlstate auth_no_table_permission
authorizationid
getprivname
td getschemaname
td getname
end of check
protected tabledescriptor gettabledescriptor datadictionary dd   throws standardexception
tabledescriptor td   dd gettabledescriptor  tableuuid
if  td    null
throw standardexception newexception sqlstate auth_internal_bad_uuid
return td
end of gettabledescriptor
/*
* check if authorizationid has permission on the table
*/
protected boolean haspermissionontable datadictionary dd  string authorizationid  boolean forgrant
throws standardexception
return oneauthhaspermissionontable  dd  authorizer public_authorization_id  forgrant
oneauthhaspermissionontable  dd  authorizationid  forgrant
protected boolean oneauthhaspermissionontable datadictionary dd  string authorizationid  boolean forgrant
throws standardexception
tablepermsdescriptor perms   dd gettablepermissions  tableuuid  authorizationid
if  perms    null
return false
string priv   null
switch  privtype
case authorizer select_priv
priv   perms getselectpriv
break
case authorizer update_priv
priv   perms getupdatepriv
break
case authorizer references_priv
priv   perms getreferencespriv
break
case authorizer insert_priv
priv   perms getinsertpriv
break
case authorizer delete_priv
priv   perms getdeletepriv
break
case authorizer trigger_priv
priv   perms gettriggerpriv
break
return   equals priv       forgrant       equals  priv
end of haspermissionontable
/**
* @see statementpermission#getpermissiondescriptor
*/
public permissionsdescriptor getpermissiondescriptor string authid  datadictionary dd
throws standardexception
//if the required type of privilege exists for the given authorizer,
//then pass the permission descriptor for it.
if  oneauthhaspermissionontable  dd  authid  false
return dd gettablepermissions tableuuid  authid
else return null
/**
* return privilege needed for this access as string
*
* @return	privilege string
*/
public string getprivname
switch  privtype
case authorizer select_priv
return
case authorizer update_priv
return
case authorizer references_priv
return
case authorizer insert_priv
return
case authorizer delete_priv
return
case authorizer trigger_priv
return
return
end of getprivname