/*
derby - class org.apache.derby.iapi.services.locks.lockfactory
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi services locks
import org apache derby iapi util matchable
import org apache derby iapi error standardexception
import org apache derby iapi services property propertysetcallback
import java util enumeration
/**
generic locking of objects. enables deadlock detection.
<br>
mt - mutable - container object - thread safe
*/
public interface lockfactory extends propertysetcallback
/**
lock an object within a compatability space
and associate the lock with a group object,
waits up to timeout milli-seconds for the object to become unlocked. a
timeout of 0 means do not wait for the lock to be unlocked.
note the actual time waited is approximate.
<p>
a compatibility space in an space where lock requests are assumed to be
compatabile and granted by the lock manager if the trio
{compatabilityspace, ref, qualifier} are equal (i.e. reference equality
for qualifier, equals() method
for compatabilityspace and ref ). a typical reference to use for the compatability
space is a reference to an object representing a transaction.
granted by the lock manager means that the lockable object may or may
not be queried to see if the request is compatible.
<br>
a compatability space is not assumed to be owned by a single thread.
@param compatabilityspace object defining compatability space (by value)
@param group handle of group, must be private to a thread.
@param ref reference to object to be locked
@param qualifier a qualification of the request.
@param timeout the maximum time to wait in milliseconds, lockfactory.no_wait means don't wait.
@return true if the lock was obtained, false if timeout is equal to lockfactory.no_wait and the lock
could not be granted.
@exception org.apache.derby.iapi.error.standardexception a deadlock has occured (message id will be lockfactory.deadlock)
@exception org.apache.derby.iapi.error.standardexception the wait for the lock timed out (message id will be lockfactory.timeout).
@exception org.apache.derby.iapi.error.standardexception another thread interupted this thread while
it was waiting for the lock. this will be a standardexception with a nested java.lang.interruptedexception exception,
(message id will be lockfactory.interruptedexceptionid)
@exception standardexception standard cloudscape error policy.
*/
public boolean lockobject object compatabilityspace  object group  lockable ref  object qualifier  int timeout
throws standardexception
/**
lock an object within a compatability space
and associate the lock with a group object,
waits forever the object to become unlocked.
<p>
a compatibility space in an space where lock requests are assumed to be
compatabile and granted by the lock manager if the trio
{compatabilityspace, ref, qualifier} are equal (i.e. reference equality
for qualifier, equals() method
for compatabilityspace and ref ). a typical reference to use for the compatability
space is a reference to an object representing a transaction.
granted by the lock manager means that the lockable object may or may
not be queried to see if the request is compatible.
<br>
a compatability space is not assumed to be owned by a single thread.
@param compatabilityspace object defining compatability space (by value)
@param group handle of group, must be private to a thread.
@param ref reference to object to be locked
@param qualifier a qualification of the request.
@exception org.apache.derby.iapi.error.standardexception a deadlock has occured (message id will be lockfactory.deadlock)
@exception org.apache.derby.iapi.error.standardexception another thread interupted this thread while
it was waiting for the lock. this will be a standardexception with a nested java.lang.interruptedexception exception,
(message id will be lockfactory.interruptedexceptionid)
@exception standardexception standard cloudscape error policy.
*/
//public void lockobject(object compatabilityspace, object group, lockable ref, object qualifier)
//	throws standardexception;
/**
lock an object within a compatability space
and associate the lock with a group object,
in addition a held latch is passed in. if the lock
cannot be granted immediately, the latch will be released
and relatched after the lock is obtained. if the lock can be granted
immediately the latch is not released.
<br>
the compatability space of the request is defined by the compatability
space of the latch.
<p>
@param group handle of group, must be private to a compatability space.
@param ref reference to object to be locked
@param qualifier a qualification of the request.
@param timeout amount of time to wait, <b>no_wait is not supported</b>
@param latch latch to be atomically released/re-latched in a wait.
@return true if the latch was released, false otherwise.
@exception org.apache.derby.iapi.error.standardexception a deadlock has occured (message id will be lockfactory.deadlock)
@exception org.apache.derby.iapi.error.standardexception another thread interupted this thread while
it was waiting for the lock. this will be a standardexception with a nested java.lang.interruptedexception exception,
(message id will be lockfactory.interruptedexceptionid)
@exception standardexception standard cloudscape error policy.
*/
public boolean lockobject object group  lockable ref  object qualifier  int timeout  latch latch
throws standardexception
/**
unlock a single lock on a single object held within this compatability space
that was locked with the supplied qualifier.
@param compatabilityspace object defining compatability space (by value)
@param group handle of group.
@param ref reference to object to be unlocked.
@param qualifier qualifier of lock to be unlocked
@return number of locks released (one or zero).
*/
public int unlock object compatabilityspace  object group  lockable ref  object qualifier
/**
unlock all locks in a group.
@param group handle of group that objects were locked with.
*/
public void unlockgroup object compatabilityspace  object group
/**
unlock all locks on a group that match the passed in value.
*/
public void unlockgroup object compatabilityspace  object group  matchable key
/**
transfer a set of locks from one group to another.
*/
public void transfer object compatabilityspace  object oldgroup  object newgroup
/**
returns true if locks held by anyone are blocking anyone else
*/
public boolean anyoneblocked
/**
return true if locks are held in this compatability space and
this group.
@param group handle of group that objects were locked with.
*/
public boolean arelocksheld object compatabilityspace  object group
/**
return true if locks are held in this compatability space.
*/
public boolean arelocksheld object compatabilityspace
/**
latch an object. a latch is a lock without a group.
this means that it must be released explicitly by the owner.
a latch is not released by any unlock methods, it must be
released by the unlatch method. a latch is assumed to only
be held by one locker at a time.
<br>
the first argument passed to lockevent() is the latch that
is to be used in the unlatch() call.
the firstargument passed to unlockevent() should be ignored.
@return true if the latch was obtained,
false if timeout is equal to lockfactory.no_wait and the lock could not be granted.
@exception org.apache.derby.iapi.error.standardexception a deadlock has occured (message id will be lockfactory.deadlock)
@exception org.apache.derby.iapi.error.standardexception another thread interupted this thread while
it was waiting for the latch. this will be a standardexception with a nested java.lang.interruptedexception exception,
(message id will be lockfactory.interruptedexceptionid)
@exception standardexception standard cloudscape error policy.
*/
public boolean latchobject object compatabilityspace  lockable ref  object qualifier  int timeout
throws standardexception
/**
unlatch an object.
*/
public void unlatch latch heldlatch
/**
lock an object with zero duration within a compatability space,
waits up to timeout milli-seconds for the object to become unlocked. a
timeout of 0 means do not wait for the lock to be unlocked.
note the actual time waited is approximate.
<p>
zero duration means the lock is released as soon as it is obtained.
<p>
a compatibility space in an space where lock requests are assumed to be
compatabile and granted by the lock manager if the trio
{compatabilityspace, ref, qualifier} are equal (i.e. reference equality
for qualifier, equals() method
for compatabilityspace and ref ). a typical reference to use for the compatability
space is a reference to an object representing a transaction.
granted by the lock manager means that the lockable object may or may
not be queried to see if the request is compatible.
<br>
a compatability space is not assumed to be owned by a single thread.
@param compatabilityspace object defining compatability space (by value)
@param ref reference to object to be locked
@param qualifier a qualification of the request.
@param timeout the maximum time to wait in milliseconds, lockfactory.no_wait means don't wait.
@return true if the lock was obtained, false if timeout is equal to lockfactory.no_wait and the lock
could not be granted.
@exception org.apache.derby.iapi.error.standardexception a deadlock has occured (message id will be lockfactory.deadlock)
@exception org.apache.derby.iapi.error.standardexception the wait for the lock timed out (message id will be lockfactory.timeout).
@exception org.apache.derby.iapi.error.standardexception another thread interupted this thread while
it was waiting for the lock. this will be a standardexception with a nested java.lang.interruptedexception exception,
(message id will be lockfactory.interruptedexceptionid)
@exception standardexception standard cloudscape error policy.
*/
public boolean zerodurationlockobject object compatabilityspace  lockable ref  object qualifier  int timeout
throws standardexception
/**
check to see if a specific lock is held.
*/
public boolean islockheld object compatabilityspace  object group  lockable ref  object qualifier
/**
install a limit that is called when the size of the group exceeds
the required limit.
<br>
it is not guaranteed that the callback method (limit.reached) is
called as soon as the group size exceeds the given limit.
if the callback method does not result in a decrease in the
number of locks held then the lock factory implementation
may delay calling the method again. e.g. with a limit
of 500 and a reached() method that does nothing, may result
in the call back method only being called when the group size reaches
550.
<br>
only one limit may be in place for a group at any time.
@see limit
*/
public void setlimit object compatabilityspace  object group  int limit  limit callback
/**
clear a limit set by setlimit.
*/
public void clearlimit object compatabilityspace  object group
/**
make a virtual lock table for diagnostics.
*/
public enumeration makevirtuallocktable