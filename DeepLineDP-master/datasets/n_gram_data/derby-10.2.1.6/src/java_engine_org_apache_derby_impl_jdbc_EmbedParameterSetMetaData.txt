/*
derby - class org.apache.derby.impl.jdbc.embedparametersetmetadata
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl jdbc
import org apache derby iapi sql activation
import org apache derby iapi sql parametervalueset
import org apache derby iapi types datatypedescriptor
import org apache derby iapi types datatypeutilities
import org apache derby iapi reference jdbc30translation
import org apache derby iapi reference sqlstate
import org apache derby iapi jdbc engineparametermetadata
import java sql sqlexception
import java sql types
/**
* this class immitates to implement the parametermetadata interface from jdbc3.0
* we want to provide the functionality to jdks before jdbc3.0. we put it here
* instead of in local20 because we want to make it available for callablestatement.
* it provides the parameter meta data for callable & prepared statements.
* the subclass in local30 actually implements parametermetadata interface.
*
* for use of parametermetadata functionality in network server, please do not use
* this class directly. instead use the method available on enginepreparedstatement
* @see org.apache.derby.iapi.jdbc.engineparametermetadata
* @see org.apache.derby.iapi.jdbc.enginepreparedstatement
*/
public class embedparametersetmetadata implements engineparametermetadata
private final parametervalueset pvs
private final datatypedescriptor types
private final int paramcount
//////////////////////////////////////////////////////////////
//
// constructors
//
//////////////////////////////////////////////////////////////
protected embedparametersetmetadata parametervalueset pvs  datatypedescriptor types
int paramcount
paramcount   pvs getparametercount
this pvs   pvs
this paramcount   paramcount
this types   types
/**
*
* retrieves the number of parameters in the preparedstatement object for which
* this parametermetadata object contains information.
*
* @return the number of parameters
*/
public int getparametercount
return paramcount
/**
*
* retrieves whether null values are allowed in the designated parameter.
*
* @param param - the first parameter is 1, the second is 2, ...
* @return the nullability status of the given parameter; one of
* parametermetadata.parameternonulls, parametermetadata.parameternullable, or
* parametermetadata.parameternullableunknown
* @exception sqlexception if a database access error occurs
*/
public int isnullable int param  throws sqlexception
checkposition param
if  types isnullable
return jdbc30translation parameter_nullable
else
return jdbc30translation parameter_no_nulls
/**
*
* retrieves whether values for the designated parameter can be signed numbers.
*
* @param param - the first parameter is 1, the second is 2, ...
* @return true if it can be signed numbers
* @exception sqlexception if a database access error occurs
*/
public boolean issigned int param  throws sqlexception
checkposition param
return types gettypeid   isnumerictypeid
/**
*
* retrieves the designated parameter's number of decimal digits.
*
* @param param - the first parameter is 1, the second is 2, ...
* @return precision
* @exception sqlexception if a database access error occurs
*/
public int getprecision int param  throws sqlexception
checkposition param
int outparamprecision    1
int precision   datatypeutilities getprecision types
if    param    1     pvs hasreturnoutputparameter
outparamprecision   pvs getprecision param
return  outparamprecision     1  ? precision   outparamprecision
/**
*
* retrieves the designated parameter's number of digits to right of the decimal point.
*
* @param param - the first parameter is 1, the second is 2, ...
* @return scale
* @exception sqlexception if a database access error occurs
*/
public int getscale int param  throws sqlexception
checkposition param
if    param    1     pvs hasreturnoutputparameter
return pvs getscale param
return types getscale
/**
*
* retrieves the designated parameter's sql type.
*
* @param param - the first parameter is 1, the second is 2, ...
* @return sql type from java.sql.types
* @exception sqlexception if a database access error occurs
*/
public int getparametertype int param  throws sqlexception
checkposition param
return types gettypeid   getjdbctypeid
/**
*
* retrieves the designated parameter's database-specific type name.
*
* @param param - the first parameter is 1, the second is 2, ...
* @return type the name used by the database. if the parameter
* type is a user-defined type, then a fully-qualified type name is returned.
* @exception sqlexception if a database access error occurs
*/
public string getparametertypename int param  throws sqlexception
checkposition param
return types gettypeid   getsqltypename
/**
*
* retrieves the fully-qualified name of the java class whose instances should be
* passed to the method preparedstatement.setobject.
*
* @param param - the first parameter is 1, the second is 2, ...
* @return the fully-qualified name of the class in the java
* programming language that would be used by the method
* preparedstatement.setobject to set the value in the specified parameter.
* this is the class name used for custom mapping.
* @exception sqlexception if a database access error occurs
*/
public string getparameterclassname int param  throws sqlexception
checkposition param
return types gettypeid   getresultsetmetadatatypename
/**
*
* retrieves the designated parameter's mode.
*
* @param param - the first parameter is 1, the second is 2, ...
* @return mode of the parameter; one of parametermetadata.parametermodein,
* parametermetadata.parametermodeout, or parametermetadata.parametermodeinout
* parametermetadata.parametermodeunknown.
* @exception sqlexception if a database access error occurs
*/
public int getparametermode int param  throws sqlexception
checkposition param
//bug 4857 - only the return parameter is of type out. all the other output
//parameter are in_out (it doesn't matter if their value is set or not).
if   param    1     pvs hasreturnoutputparameter     only the first parameter can be of return type
return jdbc30translation parameter_mode_out
return pvs getparametermode param
// check the position number for a parameter and throw an exception if
// it is out of range.
private void checkposition int parameterindex  throws sqlexception
/* check that the parameterindex is in range. */
if  parameterindex < 1
parameterindex > paramcount
/* this message matches the one used by the dbms */
throw util generatecssqlexception
sqlstate lang_invalid_param_position
new integer parameterindex   new integer paramcount