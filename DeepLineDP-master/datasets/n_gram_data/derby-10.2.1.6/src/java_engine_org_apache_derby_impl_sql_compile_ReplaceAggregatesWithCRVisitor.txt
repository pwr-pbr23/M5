/*
derby - class org.apache.derby.impl.sql.compile.replaceaggregateswithcrvisitor
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package	org apache derby impl sql compile
import org apache derby iapi sql compile visitable
import org apache derby iapi sql compile visitor
import org apache derby iapi error standardexception
/**
* replace all aggregates with result columns.
*
* @author jamie
*/
public class replaceaggregateswithcrvisitor implements visitor
private resultcolumnlist rcl
private class skipoverclass
private int tablenumber
/**
* replace all aggregates with column references.  add
* the reference to the rcl.  delegates most work to
* aggregatenode.replaceaggregateswithcolumnreferences(rcl, tablenumber).
*
* @param rcl the result column list
* @param tablenumber	the tablenumber for the new crs
*/
public replaceaggregateswithcrvisitor resultcolumnlist rcl  int tablenumber
this rcl   rcl
this tablenumber   tablenumber
/**
* replace all aggregates with column references.  add
* the reference to the rcl.  delegates most work to
* aggregatenode.replaceaggregateswithcolumnreferences(rcl).
* doesn't traverse below the passed in class.
*
* @param rcl the result column list
* @param nodetoskip don't examine anything below nodetoskip
*/
public replaceaggregateswithcrvisitor resultcolumnlist rcl  class nodetoskip
this rcl   rcl
this skipoverclass   nodetoskip
////////////////////////////////////////////////
//
// visitor interface
//
////////////////////////////////////////////////
/**
* don't do anything unless we have an aggregate
* node.
*
* @param node 	the node to process
*
* @return me
*
* @exception standardexception on error
*/
public visitable visit visitable node
throws standardexception
if  node instanceof aggregatenode
/*
** let aggregatenode replace itself.
*/
node     aggregatenode node  replaceaggregateswithcolumnreferences rcl  tablenumber
return node
/**
* don't visit childen under the skipoverclass
* node, if it isn't null.
*
* @return true/false
*/
public boolean skipchildren visitable node
return  skipoverclass    null  ?
false
skipoverclass isinstance node
public boolean stoptraversal
return false