/*
derby - class org.apache.derby.tools.dblook
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby tools
import java io bufferedreader
import java io stringreader
import java sql drivermanager
import java sql resultset
import java sql connection
import java sql statement
import java sql preparedstatement
import java sql sqlexception
import java sql sqlwarning
import java sql timestamp
import java util hashmap
import java util stringtokenizer
import java util arraylist
import org apache derby iapi tools i18n localizedresource
import org apache derby impl tools dblook db_check
import org apache derby impl tools dblook db_index
import org apache derby impl tools dblook db_jar
import org apache derby impl tools dblook db_key
import org apache derby impl tools dblook db_table
import org apache derby impl tools dblook db_schema
import org apache derby impl tools dblook db_alias
import org apache derby impl tools dblook db_trigger
import org apache derby impl tools dblook db_view
import org apache derby impl tools dblook db_grantrevoke
import org apache derby impl tools dblook logs
public final class dblook
// db2 enforces a maximum of 30 tables to be specified as part of
// the table list.
private static final int db2_max_number_of_tables   30
private connection conn
private static preparedstatement getcolnamefromnumberquery
// mappings from id to name for schemas and tables (for ease
// of reference).
private static hashmap schemamap
private static hashmap tableidtonamemap
// command-line parameters.
private static string sourcedburl
private static string ddlfilename
private static string stmtdelimiter
private static boolean appendlogs
private static arraylist tablelist
private static string schemaparam
private static string targetschema
private static boolean skipviews
private static boolean verbose
private static string sourcedbname
private static string looklogname
private static localizedresource langutil
private static boolean sqlauthorization
/* ************************************************
* main:
* initialize program state by creating a dblook object,
* and then start the ddl generation by calling "go".
* ****/
public static void main string args
try
new dblook args
catch  exception e
// all "normal" errors are logged and printed to
// console according to command line arguments,
// so if we get here, something unexpected must
// have happened; print to error stream.
e printstacktrace
/* ************************************************
* constructor:
* parse the command line, initialize logs, echo program variables,
* and load the derby driver.
* @param args array of dblook command-line arguments.
* ****/
public dblook string args  throws exception
// adjust the application in accordance with derby.ui.locale
// and derby.ui.codeset
langutil   localizedresource getinstance
// initialize class variables.
initstate
// parse the command line.
if   parseargs args
system out println lookupmessage
return
showvariables
if   loaddriver
// failed when loading the driver.  we already logged
// the exception, so just return.
return
schemamap   new hashmap
tableidtonamemap   new hashmap
// now run the utility.
go
/* ************************************************
* initstate:
* initialize class variables.
****/
private void initstate
sourcedburl   null
ddlfilename   null
stmtdelimiter   null
appendlogs   false
tablelist   null
targetschema   null
schemaparam   null
skipviews   false
verbose  false
sourcedbname   null
return
/* ************************************************
* parseargs:
* parse the command-line arguments.
* @param args args[0] is the url for the source database.
* @return true if all parameters were loaded and the output
*  files were successfully created; false otherwise.
****/
private boolean parseargs string args
if  args length < 2
// must have minimum of 2 args: "-d" and "<dburl>".
return false
int st   0
for  int i   0  i < args length  i
st   loadparam args  i
if  st     1
return false
i   st
if  sourcedburl    null
// must have at least a database url.
return false
// at this point, all parameters should have been read into
// their respective class variables.  use those
// variables for some further processing.
// setup logs.
boolean okay   logs initlogs looklogname  ddlfilename  appendlogs
verbose   stmtdelimiter    null ?     stmtdelimiter
// get database name.
sourcedbname   extractdbnamefromurl sourcedburl
// set up schema restriction.
if   schemaparam    null      schemaparam length   > 0
schemaparam charat 0
// not quoted, so upper case, then add quotes.
targetschema   addquotes expanddoublequotes
schemaparam touppercase java util locale english
else
targetschema   addquotes expanddoublequotes stripquotes schemaparam
return okay
/* ************************************************
* loadparam:
* read in a flag and its corresponding values from
* list of command line arguments, starting at
* the start'th argument.
* @return the position of the argument that was
*  most recently processed.
****/
private int loadparam string  args  int start
if   args length      0     args charat 0
// starting argument should be a flag; if it's
// not, ignore it.
return start
boolean haveval    args length > start   1
switch  args charat 1
case
if   haveval
return  1
if  args length      2
sourcedburl   stripquotes args
return start
return  1
case
if   haveval
return  1
if  args length      2
schemaparam   args
return start
return  1
case
if   haveval
return  1
if  args equals
stmtdelimiter   args
return start
else if  args equals
// list of tables.
return extracttablenamesfromlist args  start 1
return  1
case
if   haveval
return  1
if   args length      2      args length   > 0
ddlfilename   args
return start
return  1
case
if  args equals
appendlogs   true
return start
return  1
case
if  args equals
skipviews   true
return start
return  1
case
if  args equals
verbose   true
return start
return  1
default
return  1
/* ************************************************
* loaddriver:
* load derby driver.
* @param precondition sourcedburl has been loaded.
* @return false if anything goes wrong; true otherwise.
****/
private boolean loaddriver
string derbydriver   system getproperty
if  derbydriver    null
if  sourcedburl indexof        1
derbydriver
else if  sourcedburl startswith
derbydriver
else
derbydriver
try
class forname derbydriver  newinstance
catch  exception e
logs debug e
return false
return true
/* ************************************************
* extractdbnamefromurl:
* given a database url, parse out the actual name
* of the database.  this is required for creation
* the db2jjars directory (the database name is part
* of the path to the jar).
* @param dburl the database url from which to extract the
*  the database name.
* @return the name of the database (including its
*  path, if provided) that is referenced by the url.
****/
private string extractdbnamefromurl string dburl
if  dburl    null
// shouldn't happen; ignore it here, as an error
// will be thrown we try to connect.
return
int start   dburl indexof
if  start     1
// not a valid url; just ignore it (an error
// will be thrown when we try to connect).
return
start   dburl indexof
if  start     1
// standard url (jdbc:derby:<dbname>).  database
// name starts right after "derby:".  the "6" in
// the following line is the length of "derby:".
start   dburl indexof      6
else
// network server url.  database name starts right
// after next slash (":net://hostname:port/<dbname>).
// the "3" in the following line is the length of
// "://".
start   dburl indexof    start 3    1
int stop    1
if  dburl charat start
// database name is quoted; end of the name is the
// closing quote.
start
stop   dburl indexof  "  start
else
// database name ends with the start of a list of connection
// attributes.  this list can begin with either a colon
// or a semi-colon.
stop   dburl indexof    start
if  stop     1
if   dburl charat stop 1
dburl charat stop 1
// then this colon is part of the path (ex. "c:"),
// so ignore it.
stop   dburl indexof    stop 2
int stop2   dburl length
if  stop     1
// no colons; see if we can find a semi-colon.
stop   dburl indexof    start
else
stop2   dburl indexof    start
stop    stop <  stop2 ? stop   stop2
if  stop     1
// we have a url that ends with database name (no
// other attributes appended).
stop   dburl length
return dburl substring start  stop
/* ************************************************
* extracttablenamesfromlist:
* given an array of command line arguments containing
* a list of table names beginning at start'th position,
* read the list of table names and store them as
* our target table list.  names without quotes are
* turned into all caps and then double quotes are
* added; names whcih already have double quotes are
* stored exactly as they are. note: db2 enforces
* maximum of 30 tables, and ignores the rest; so
* do we.
* @param args array of command line arguments.
* @start position of the start of the list of tables
*  with the args array.
* @return the position of the last table name in
*  the list of table names.
****/
private int extracttablenamesfromlist string  args
int start
int argindex   start
int count   0
tablelist   new arraylist
while  argindex < args length
if    args length   > 0      args charat 0
count > db2_max_number_of_tables
// we're done with the table list.
break
if   args length   > 0      args charat 0
// it's quoted.
tablelist add addquotes expanddoublequotes
stripquotes args
else
// not quoted, so make it all caps, then add
// quotes.
tablelist add addquotes
expanddoublequotes args touppercase
java util locale english
if  tablelist size      0
tablelist   null
return argindex   1
/* ************************************************
* showvariables:
* echo primary variables to output, so user can see
* what s/he specified.
****/
private void showvariables
if  ddlfilename    null
logs reportstring
logs reportmessage
if  verbose
writeverboseoutput
ddlfilename
logs reportmessage
new timestamp system currenttimemillis    tostring
logs reportmessage    sourcedbname
logs reportmessage    sourcedburl
if  tablelist    null
logs reportmessage
if  schemaparam    null
logs reportmessage    stripquotes schemaparam
logs reportstring     appendlogs
return
/* ************************************************
* go:
* connect to the source database, prepare statements,
* and load a list of table id-to-name mappings.  then,
* generate the ddl for the various objects in the
* database by making calls to static methods of helper
* classes (one helper class for each type of database
* object).  if a particular object type should not be
* generated (because of the user-specified command-
* line), then we enforce that here.
* @precondition all user-specified parameters have
*  been loaded.
* @return ddl for the source database has been
*  generated and printed to output, subject to
*  user-specified restrictions.
* ****/
private void go
throws exception
try
// connect to the database, prepare statements,
// and load id-to-name mappings.
this conn   drivermanager getconnection sourcedburl
prepfordump
// generate ddl.
// start with schemas, since we might need them to
// exist for jars to load properly.
db_schema doschemas this conn
tablelist    null      targetschema    null
if  tablelist    null
// don't do these if user just wants table-related objects.
db_jar dojars sourcedbname  this conn
db_alias doproceduresandfunctions this conn
db_table dotables this conn  tableidtonamemap
db_index doindexes this conn
db_alias dosynonyms this conn
db_key dokeys this conn
db_check dochecks this conn
if   skipviews
db_view doviews this conn
db_trigger dotriggers this conn
db_grantrevoke doauthorizations this conn
// that's it; we're done.
if  getcolnamefromnumberquery    null
getcolnamefromnumberquery close
logs cleanup
catch  sqlexception sqle
logs debug sqle
logs debug logs unrollexceptions sqle    string null
logs cleanup
return
catch  exception e
logs debug e
logs cleanup
return
finally
// close our connection.
if  conn    null
conn commit
conn close
/* ************************************************
* prepfordump:
* prepare any useful statements (i.e. statements that
* are required by more than one helper class) and load
* the id-to-name mappings for the source database.
****/
private void prepfordump   throws exception
// we're only selecting throughout all of this, so no need
// to commit (plus, disabling commit makes it easier to
// have multiple resultsets open on the same connection).
this conn setautocommit false
// prepare statements.
getcolnamefromnumberquery   conn preparestatement
// load list of user tables and table ids, for general use.
statement stmt   conn createstatement
resultset rs   stmt executequery
while  rs next
string tablename   addquotes expanddoublequotes rs getstring 2
string schemaname   addquotes expanddoublequotes rs getstring 3
tableidtonamemap put rs getstring 1
schemaname       tablename
// load schema id's and names.
rs   stmt executequery
while  rs next
schemamap put rs getstring 1
addquotes expanddoublequotes rs getstring 2
// check if sqlauthorization mode is on. if so, need to generate
// authorization statements.
rs   stmt executequery
if  rs next
string sqlauth   rs getstring 1
if  boolean valueof sqlauth  booleanvalue
sqlauthorization   true
stmt close
// load default property values.
return
/* ************************************************
* getcolumnlistfromdescription:
* takes string description of column numbers in the
* form of "(2, 1, 3...)" and the id of the table
* having those columns, and then returns a string
* with the column numbers replaced by their actual
* names ('2' is replaced with the 2nd column in the
* table, '1' with the first column, etc.).
* @param tableid the id of the table to which the column
*   numbers should be applied.
* @param description a string holding a list of column
*  numbers, enclosed in parentheses and separated
*  by commas.
* @return a new string with the column numbers in
*  'description' replaced by their column names;
*  also, the parentheses have been stripped off.
****/
public static string getcolumnlistfromdescription string tableid
string description  throws sqlexception
stringbuffer sb   new stringbuffer
stringtokenizer tokenizer   new stringtokenizer
description substring description indexof      1
description lastindexof         true
boolean firstcol   true
while  tokenizer hasmoretokens
string tok   tokenizer nexttoken   trim
if  tok equals
continue
else if  tok equals
firstcol   false
continue
try
string colname   getcolnamefromnumber tableid
integer valueof tok   intvalue
if   firstcol
sb append
sb append colname
catch  numberformatexception e
// not a number; could be "asc" or "desc" tag,
// which is okay; otherwise, something's wrong.
tok   tok touppercase
if  tok equals       tok equals
// then this is okay; just add the token to result.
sb append     tok
else
// shouldn't happen.
logs debug
tok
description   string null
return sb tostring
/* ************************************************
* getcolnamefromnumber:
* takes a tableid and a column number colnum, and
* returns the name of the colnum'th column in the
* table with tableid.
* @param tableid id of the table.
* @param colnum number of the column for which we want
*  the name.
* @return the name of the colnum'th column in the
*  table with tableid.
****/
public static string getcolnamefromnumber string tableid
int colnum  throws sqlexception
getcolnamefromnumberquery setstring 1  tableid
getcolnamefromnumberquery setint 2  colnum
resultset rs   getcolnamefromnumberquery executequery
if   rs next
// shouldn't happen.
logs debug
lookuptableid tableid
colnum   string null
rs close
return
else
string colname   addquotes expanddoublequotes rs getstring 1
rs close
return colname
/* ************************************************
* addquotes:
* add quotes to the received object name, and return
* the result.
* @param name the name to which to add quotes.
* @return the name with double quotes around it.
****/
public static string addquotes string name
if  name    null
return null
return
public static string addsinglequotes string name
if  name    null
return null
return     name
/* ************************************************
* stripquotes:
* takes a name and, if the name is enclosed in
* quotes, strips the quotes off.  this method
* assumes that the received string either has no quotes,
* or has a quote (double or single) as the very first
* and very last character.
* @param quotedname a name with quotes as the first
*  and last character, or else with no quotes at all.
* @return quotedname, without the quotes.
****/
public static string stripquotes string quotedname
if  quotedname    null
return null
if    quotedname startswith       quotedname startswith  "
// name doesn't _start_ with a quote, so we do nothing.
return quotedname
if    quotedname endswith       quotedname endswith  "
// name doesn't _end_ with a quote, so we do nothing.
return quotedname
// remove starting and ending quotes.
return quotedname substring 1  quotedname length     1
/* ************************************************
* isexcludedtable:
* takes a table name and determines whether or not
* the ddl for objects related to that table should be
* generated.
* @param tablename name of the table to check.
* @return true if 1) the user specified a table list
*  and that list does not include the received name; or
*  2) if the user specified a schema restriction and
*  the received name does not have that schema; false
*  otherwise.
****/
public static boolean isexcludedtable string tablename
if  tablename    null
return true
int dot   tablename indexof
if  dot     1
// strip off the schema part of the name, and see if we're
// okay to use it.
if  isignorableschema tablename substring 0  dot
// then we exclude this table.
return true
tablename   tablename substring dot   1
tablename length
return   tablelist    null      tablelist contains tablename
/* ************************************************
* takes a schema name and determines whether or
* not the ddl for objects with that schema should
* be generated.
* @param schemaname schema name to be checked.
* @return true if 1) the user specified a target
*  schema and that target is not the same as the
*  received schema name, or 2) the schema is a
*  system schema (sys, sysvisual, or sysibm);
*  false otherwise;
****/
private static final string ignorableschemanames
public static boolean isignorableschema string schemaname
if   targetschema    null       schemaname equals targetschema
return true
schemaname   stripquotes schemaname
boolean ret   false
for  int i   ignorableschemanames length   1  i >  0
if   ret   ignorableschemanames equalsignorecase schemaname
break
return ret
/* ************************************************
* takes a string and determines whether or not that
* string makes reference to any of the table names
* in the user-specified table list.
* @param str the string in which to search for table names.
* @return true if 1) the user didn't specify a
*  target table list, or 2) the received string
*  contains at least one of the table names in the
*  user-specified target list; false otherwise.
****/
public static boolean stringcontainstargettable string str
if  str    null
// if the string is null, it can't possibly contain
// any table names.
return false
if  tablelist    null
// if we have no target tables, then default to true.
return true
int strlen   str length
for  int i   0  i < tablelist size    i
string tablename    string tablelist get i
tablename   expanddoublequotes stripquotes tablename
int namelen   tablename length
string strcopy
if  tablename equals tablename touppercase
java util locale english
// case doesn't matter.
strcopy   str touppercase
else
strcopy   str
int pos   strcopy indexof tablename
while  pos     1
// if we found it, make sure it's really a match.
// first, see if it's part of another word.
if   partofword str  pos  namelen  strlen
// see if the match is in quotes--if so, then
// it should match the table name's case.
if   pos >  1      strcopy charat pos 1
pos   namelen < strcopy length
strcopy charat pos namelen
match is quoted  check it's case
if  str substring pos
pos   namelen  equals tablename
// everything checks out.
return true
else
// match isn't quoted, so we're okay as is.
return true
pos   str indexof tablename  pos   namelen
// if we get here, we didn't find it.
return false
/* ************************************************
* partofword:
* returns true if the part of the string given by
* str.substring(pos, pos + namelen) is part of
* another word.
* @param str the string in which we're looking.
* @param pos the position at which the substring in
*  question begins.
* @param namelen the length of the substring in
*  question.
* @param strlen the length of the string in which
*  we're looking.
* @return true if the substring from pos to
*  pos+namelen is part of larger word (i.e.
*  if it has a letter/digit immediately before
*  or after); false otherwise.
****/
private static boolean partofword  string str
int pos  int namelen  int strlen
boolean somethingbefore   false
if  pos > 0
char c   str charat pos 1
somethingbefore     c
character isletterordigit c
boolean somethingafter   false
if  pos   namelen < strlen
char c   str charat pos   namelen
somethingafter     c
character isletterordigit c
return  somethingbefore    somethingafter
/* ************************************************
* expanddoublequotes:
* if the received sql id contains a quote, we have
* to expand it into two quotes so that it can be
* treated correctly at parse time.
* @param name id that we want to print.
****/
public static string expanddoublequotes string name
if   name    null      name indexof  "  < 0
// nothing to do.
return name
char  ca   name tochararray
// worst (and extremely unlikely) case is every
// character is a double quote, which means the
// escaped string would need to be 2 times as long.
char  result   new char
int j   0
for  int i   0  i < ca length  i
if  ca
result
result
else
result   ca
return new string result  0  j
/* ************************************************
* lookupschemaid:
* return the schema name corresponding to the
* received schema id.
* @param schemaid the id to look up.
* @return the schema name.
****/
public static string lookupschemaid string schemaid
return  string  schemamap get schemaid
/* ************************************************
* lookuptableid:
* return the table name corresponding to the
* received table id.
* @param tableid the id to look up.
* @return the table name.
****/
public static string lookuptableid string tableid
return  string  tableidtonamemap get tableid
/* ************************************************
* writeverboseoutput:
* writes the received string as "verbose" output,
* meaning that we write it to system.err.  we
* choose system.err so that the string doesn't
* show up if the user pipes dblook output to
* a file (unless s/he explicitly pipes system.err
* output to that file, as well).
* @param key key for the message to be printed as
*  verbose output.
* @param value value to be substituted into the
*  message.
* @return message for received key has been printed
*  to system.err.
****/
public static void writeverboseoutput string key
string value
if  value    null
system err println lookupmessage key
else
system err println lookupmessage key
new string   value
return
/* ************************************************
* lookupmessage:
* retrieve a localized message.
* @param key the key for the localized message.
* @return the message corresponding to the received
*  key.
****/
public static string lookupmessage string key
return lookupmessage key  null
/* ************************************************
* lookupmessage:
* retreive a localized message.
* @param key the key for the localized message.
* @param vals array of values to be used in the
*   message.
* @return the message corresponding to the received
*  key, with the received values substituted where
*  appropriate.
****/
public static string lookupmessage string key  string vals
string msg
if  vals    null
msg   langutil gettextmessage key
else
switch  vals length
case 1  msg   langutil gettextmessage
key  vals
break
case 2  msg   langutil gettextmessage
key  vals  vals
break
default     shouldn't happen
break
return msg
/* ************************************************
* removenewlines:
* remove any newline characters from the received
* string (replace them with spaces).
* @param str the string from which we are removing
*  all newline characters.
* @return the string, with all newline characters
*  replaced with spaces.
****/
public static string removenewlines string str
if  str    null
// don't do anything.
return null
stringbuffer result   null
try
bufferedreader strval   new bufferedreader  new stringreader str
for  string txt   strval readline    txt    null
txt   strval readline
if  result    null
result   new stringbuffer txt
else
result append
result append txt
return result tostring
catch  exception e
// if something went wrong, just return the string as is--
// worst case is that the generated ddl is correct, it just
// can't be run in some sql script apps (because of the newline
// characters).
return str