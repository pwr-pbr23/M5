/*
derby - class org.apache.derby.iapi.store.access.rowlocationretrowsource
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi store access
import org apache derby iapi error standardexception
import org apache derby iapi types datavaluedescriptor
import org apache derby iapi types rowlocation
/**
a rowlocationretrowsource is the mechanism for iterating over a set of rows,
loading those rows into a conglomerate, and returning the rowlocation of the
inserted rows.
@see rowsource
*/
public interface rowlocationretrowsource extends rowsource
{
/**
needsrowlocation returns true iff this the row source expects the
drainer of the row source to call rowlocation after getting a row from
getnextrowfromrowsource.
@return true iff this row source expects some row location to be
returned
@see #rowlocation
*/
boolean needsrowlocation
/**
rowlocation is a callback for the drainer of the row source to return
the rowlocation of the current row, i.e, the row that is being returned
by getnextrowfromrowsource.  this interface is for the purpose of
loading a base table with index.  in that case, the indices can be
built at the same time the base table is laid down once the row
location of the base row is known.  this is an example pseudo code on
how this call is expected to be used:
<br><pre>
boolean needsrl = rowsource.needsrowlocation();
datavaluedescriptor[] row;
while((row = rowsource.getnextrowfromrowsource()) != null)
{
rowlocation rl = heapconglomerate.insertrow(row);
if (needsrl)
rowsource.rowlocation(rl);
}
</pre><br>
needsrowlocation and rowlocation will only be called by a drainer of
the row source which can return a row location.  drainer of row source
which cannot return rowlocation will guarentee to not call either
callbacks. conversely, if needsrowlocation is called and it returns
true, then for every row return by getnextrowfromrowsource, a
rowlocation callback must also be issued with the row location of the
row.  implementor of both the source and the drain of the row source
must be aware of this protocol.
<br>
the rowlocation object is own by the caller of rowlocation, in other
words, the drainer of the rowsource.  this is so that we don't need to
new a row location for every row.  if the row source wants to keep the
row location, it needs to clone it (rowlocation is a clonableobject).
@exception standardexception on error
*/
void rowlocation rowlocation rl  throws standardexception
}