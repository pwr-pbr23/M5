/*
derby - class org.apache.derby.impl.sql.execute.referencedkeyrichecker
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl sql execute
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi error standardexception
import org apache derby iapi sql statementutil
import org apache derby iapi sql execute execrow
import org apache derby iapi sql execute execindexrow
import org apache derby iapi reference sqlstate
import org apache derby iapi store access scancontroller
import org apache derby iapi store access transactioncontroller
import org apache derby iapi sql statementtype
/**
* a referential integrity checker for a change
* to a referenced key (primary or unique).   makes
* sure that all the referenced key row is not
* referenced by any of its foreign keys.  see
* foreignkeyrichecker for the code that validates
* changes to foreign keys.
*/
public class referencedkeyrichecker extends genericrichecker
/**
* @param tc		the xact controller
* @param fkinfo	the foreign key information
*
* @exception standardexception		thrown on failure
*/
referencedkeyrichecker transactioncontroller tc  fkinfo fkinfo
throws standardexception
super tc  fkinfo
if  sanitymanager debug
if  fkinfo type    fkinfo referenced_key
sanitymanager throwassert   fkinfo type
/**
* check that the row either has a null column(s), or
* has no corresponding foreign keys.
* <p>
* if a foreign key is found, an exception is thrown.
* if not, the scan is closed.
*
* @param row	the row to check
*
* @exception standardexception on unexpected error, or
*		on a primary/unique key violation
*/
void docheck execrow row  boolean restrictcheckonly  throws standardexception
/*
** if any of the columns are null, then the
** check always succeeds.
*/
if  isanyfieldnull row
return
/*
** otherwise, should be no rows found.
** check each conglomerate.
*/
scancontroller scan
for  int i   0  i < fkinfo fkconglomnumbers length  i
if restrictcheckonly
if fkinfo rarules    statementtype ra_restrict
continue
scan   getscancontroller fkinfo fkconglomnumbers  fkscocis  fkdcocis  row
if  scan next
close
standardexception se   standardexception newexception sqlstate lang_fk_violation  fkinfo fkconstraintnames
fkinfo tablename
statementutil typename fkinfo stmttype
rowutil tostring row  fkinfo colarray
throw se
/*
** move off of the current row to release any locks.
*/
scan next