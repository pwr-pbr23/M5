/*
derby - class com.ihost.cs.stringutil
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi util
import java util locale
/**
a set of public static methods for dealing with strings
*/
public class stringutil
/**
* used to print out a string for error messages,
* chops is off at 60 chars for historical reasons.
*/
public final static string formatforprint string input
if  input length   > 60
stringbuffer tmp   new stringbuffer input substring 0  60
tmp append
input   tmp tostring
return input
/**
* a method that receive an array of objects and return a
* string array representation of that array.
*/
public static string  tostringarray object  objarray
int idx
int len objarray length
string  strarray new string
for  idx 0   idx<len   idx
strarray objarray tostring
return strarray
/**
get 7-bit ascii character array from input string.
the lower 7 bits of each character in the input string is assumed to be
the ascii character value.
hexadecimal - character
| 00 nul| 01 soh| 02 stx| 03 etx| 04 eot| 05 enq| 06 ack| 07 bel|
| 08 bs | 09 ht | 0a nl | 0b vt | 0c np | 0d cr | 0e so | 0f si |
| 10 dle| 11 dc1| 12 dc2| 13 dc3| 14 dc4| 15 nak| 16 syn| 17 etb|
| 18 can| 19 em | 1a sub| 1b esc| 1c fs | 1d gs | 1e rs | 1f us |
| 20 sp | 21  ! | 22  " | 23  # | 24  $ | 25  % | 26  & | 27  ' |
| 28  ( | 29  ) | 2a  * | 2b  + | 2c  , | 2d  - | 2e  . | 2f  / |
| 30  0 | 31  1 | 32  2 | 33  3 | 34  4 | 35  5 | 36  6 | 37  7 |
| 38  8 | 39  9 | 3a  : | 3b  ; | 3c  < | 3d  = | 3e  > | 3f  ? |
| 40  @ | 41  a | 42  b | 43  c | 44  d | 45  e | 46  f | 47  g |
| 48  h | 49  i | 4a  j | 4b  k | 4c  l | 4d  m | 4e  n | 4f  o |
| 50  p | 51  q | 52  r | 53  s | 54  t | 55  u | 56  v | 57  w |
| 58  x | 59  y | 5a  z | 5b  [ | 5c  \ | 5d  ] | 5e  ^ | 5f  _ |
| 60  ` | 61  a | 62  b | 63  c | 64  d | 65  e | 66  f | 67  g |
| 68  h | 69  i | 6a  j | 6b  k | 6c  l | 6d  m | 6e  n | 6f  o |
| 70  p | 71  q | 72  r | 73  s | 74  t | 75  u | 76  v | 77  w |
| 78  x | 79  y | 7a  z | 7b  { | 7c  | | 7d  } | 7e  ~ | 7f del|
*/
public static byte getasciibytes string input
char c   input tochararray
byte b   new byte
for  int i   0  i < c length  i
b    byte  c   0x007f
return b
/**
* trim off trailing blanks but not leading blanks
*
* @param str
*
* @return the input with trailing blanks stipped off
*/
public static string trimtrailing  string str
if  str    null
return null
int len   str length
for    len > 0  len
if    character iswhitespace  str charat  len   1
break
return str substring  0  len
end of trimtrailing
/**
truncate a string to the given length with no warnings
or error raised if it is bigger.
@param	value string to be truncated
@param	length	maximum length of string
@return returns value if value is null or value.length() is less or equal to than length, otherwise a string representing
value truncated to length.
*/
public static string truncate string value  int length
if  value    null    value length   > length
value   value substring 0  length
return value
/**
* return a slice (substring) of the passed in value, optionally trimmed.
* warning - endoffset is inclusive for historical reasons, unlike
* string.substring() which has an exclusive ending offset.
* @param value value to slice, must be non-null.
* @param beginoffset inclusive start character
* @param endoffset inclusive end character
* @param trim to trim or not to trim
* @return sliceed value.
*/
public static string slice string value
int beginoffset  int endoffset
boolean trim
string retval   value substring beginoffset  endoffset   1
if  trim
retval   retval trim
return retval
private static char hex_table
/**
convert a byte array to a string with a hexidecimal format.
the string may be converted back to a byte array using fromhexstring.
<br>
for each byte (b) two characaters are generated, the first character
represents the high nibble (4 bits) in hexidecimal (<code>b & 0xf0</code>), the second character
represents the low nibble (<code>b & 0x0f</code>).
<br>
the byte at <code>data[offset]</code> is represented by the first two characters in the returned string.
@param	data	byte array
@param	offset	starting byte (zero based) to convert.
@param	length	number of bytes to convert.
@return the string (with hexidecimal format) form of the byte array
*/
public static string tohexstring byte data  int offset  int length
stringbuffer s   new stringbuffer length 2
int end   offset length
for  int i   offset  i < end  i
int high_nibble    data   0xf0  >>> 4
int low_nibble    data   0x0f
s append hex_table
s append hex_table
return s tostring
/**
convert a string into a byte array in hex format.
<br>
for each character (b) two bytes are generated, the first byte
represents the high nibble (4 bits) in hexidecimal (<code>b & 0xf0</code>),
the second byte represents the low nibble (<code>b & 0x0f</code>).
<br>
the character at <code>str.charat(0)</code> is represented by the first two bytes
in the returned string.
@param	str string
@param	offset	starting character (zero based) to convert.
@param	length	number of characters to convert.
@return the byte[]  (with hexidecimal format) form of the string (str)
*/
public static byte tohexbyte string str  int offset  int length
byte data   new byte
int end   offset length
for  int i   offset  i < end  i
char ch   str charat i
int high_nibble    ch   0xf0  >>> 4
int low_nibble    ch   0x0f
data    byte high_nibble
data    byte low_nibble
return data
/**
convert a hexidecimal string generated by tohexstring() back
into a byte array.
@param s string to convert
@param offset starting character (zero based) to convert.
@param length number of characters to convert.
@return the converted byte array. returns null if the length is
not a multiple of 2.
*/
public static byte fromhexstring string s  int offset  int length
if   length%2     0
return null
byte bytearray   new byte
int j   0
int end   offset length
for  int i   offset  i < end  i    2
int high_nibble   character digit s charat i   16
int low_nibble   character digit s charat i 1   16
if  high_nibble     1    low_nibble     1
// illegal format
return null
bytearray    byte    high_nibble << 4    0xf0     low_nibble   0x0f
return bytearray
/**
convert a byte array to a human-readable string for debugging purposes.
*/
public static string hexdump byte data
byte byte_value
stringbuffer str   new stringbuffer data length   3
str append
for  int i   0  i < data length  i    16
// dump the header: 00000000:
string offset   integer tohexstring i
// "0" left pad offset field so it is always 8 char's long.
for  int offlen   offset length    offlen < 8  offlen
str append
str append offset
str append
// dump hex version of 16 bytes per line.
for  int j   0   j < 16       i   j  < data length   j
byte_value   data
// add spaces between every 2 bytes.
if   j % 2     0
str append
// dump a single byte.
byte high_nibble    byte    byte_value   0xf0  >>> 4
byte low_nibble     byte   byte_value   0x0f
str append hex_table
str append hex_table
// dump ascii version of 16 bytes
str append
for  int j   0   j < 16       i   j  < data length   j
char char_value    char  data
// resolve (really want isascii() or isprintable())
if  character isletterordigit char_value
str append string valueof char_value
else
str append
// new line
str append
return str tostring
// the functions below are used for uppercasing sql in a consistent manner.
// cloudscape will uppercase turkish to the english locale to avoid i
// uppercasing to an uppercase dotted i. in future versions, all
// casing will be done in english.   the result will be that we will get
// only the 1:1 mappings  in
// http://www.unicode.org/public/3.0-update1/unicodedata-3.0.1.txt
// and avoid the 1:n mappings in
//http://www.unicode.org/public/3.0-update1/specialcasing-3.txt
//
// any sql casing should use these functions
/** convert string to uppercase
* always use the java.util.english locale
* @param s   string to uppercase
* @return uppercased string
*/
public static string sqltouppercase string s
return s touppercase locale english
/** convert string to lowercase
*  return java.util.locale.english lowercasing
* @param s string to lowercase
* @return lowercased string
*/
public static string sqltolowercase string s
return s tolowercase locale english
/** compares two strings
* strings will be uppercased in english and compared
* equivalent to s1.equalsignorecase(s2)
* throws npe if s1 is null
*
* @param s1  first string to compare
* @param s2  second string to compare
*
* @return   true if the two upppercased english values are equal
*           return false if s2 is null
*/
public static boolean sqlequalsignorecase string s1  string s2
if  s2    null
return  false
else
return s1 touppercase locale english  equals s2 touppercase locale english