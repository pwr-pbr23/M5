/*
derby - class simplenetworkserversample
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
import java sql
import javax sql datasource
import org apache derby drda networkservercontrol
import java util properties
import java io bufferedreader
import java io inputstreamreader
/**
* in order for a database to be consistent, only one jvm is allowed
* to access it at a time. the embedded driver is loaded when the network server
* is started. hence, the jvm that starts the network server can get an
* embedded connection to the same database that network server is accessing
* to serve the clients from other jvms. this solution allows you to take
* advantage of the performance benefits of embedded driver as well as allow
* for client connections from other jvms to connect to the same database.
*
*
* in particular,this sample program
* 1) 	starts the derby network server using a property and
*		also loads the embedded driver
* 2)	checks if the derby network server is up and running
* 3)	creates the database 'nssimpledb' if not already created
* 4)	obtains an embedded database connection
* 5)	tests the database connection by executing a sample query
* 6)	allows for client connections to connect to the server until
*      the user decides to stop the server and exit the program
* 7)	closes the connections
* 8)	shuts down the derby network server before exiting the program.
*
* note, on running this program, there will be a nssimpledb database directory
* created if not present already and there will be a derby.log file which
* contains messages from derby
*
*  <p>
*  usage: java simplenetworkserversample
*
*/
public class simplenetworkserversample
/*
* the database is located in the same directory where this program is being
* run. alternately one can specify the absolute path of the database location
*/
private static string dbname
public static void main  string args
throws exception
connection embeddedconn   null
try
startnetworkserver
/*
can now spawn threads to do many wonderous things with
embedded connections but allow others to connect via
network server. but for sample purposes, an embedded connection
will be obtained and a sample query executed before waiting for
the user to give input to shutdown the server.
*/
catch  exception e
system out println     e
system exit 1
try
// get an embedded connection
// since network server was started in this jvm,  this jvm can get an embedded
// connection to the same database that network server
// is accessing to serve clients from other jvm's.
// the embedded connection will be faster than going across the
// network
embeddedconn   getembeddedconnection dbname
system out println
system out println
// test connections by doing some work
test embeddedconn
// print how to connect to the network server using ij
string howtoconnect   ijusage
system out println howtoconnect
waitforexit
catch  sqlexception sqle
system out println     sqle
sqle printstacktrace
finally
if embeddedconn    null
embeddedconn close
try
// shutdown derby network server
drivermanager getconnection
catch sqlexception se
//ignore se
/**
*  setting the derby.drda.startnetworkserver property to true,
*  either in the system properties as we do here or in
*  the derby.properties file will cause network server to
*  start as soon as derby is loaded.
*
*  to load derby we just need to load the embedded
*  driver with:
*  class.forname("org.apache.derby.jdbc.embeddeddriver").newinstance();
*
*  then we will test for a while and make sure it is up, before
*  we give up.
*
*  alternately network server might be started from the command
*  line or from some other program. note: only the jvm that starts
*  network server can make an embedded connection.
*/
public static void startnetworkserver   throws exception
// start network server using the property
// and then wait for the server to start by testing a connection
startwithproperty
waitforstart
/**
* start derby network server using the property
* derby.drda.startnetworkserver. this property can be set as a system property or
* or by setting in derby.properties file.
* setting this property to true , starts the network server when
* derby boots up.
* the port at which the derby network server listens to can be changed
* by setting the derby.drda.portnumber property. by default, the server starts
* at port 1527
* server output goes to derby.log
*/
private static void startwithproperty   throws exception
system out println
system setproperty
// booting derby
class forname    newinstance
/**
* tries to check if the network server is up and running by calling ping
* if successful, then it returns else tries for 50 seconds before giving up and throwing
* an exception.
* @throws exception when there is a problem with testing if the network server is up
* and running
*/
private static void waitforstart   throws exception
// server instance for testing connection
org apache derby drda networkservercontrol server   null
// use networkservercontrol.ping() to wait for
// networkserver to come up.  we could have used
// networkservercontrol to start the server but the property is
// easier.
server   new networkservercontrol
system out println
for  int i   0  i < 10   i
try
thread currentthread   sleep 5000
server ping
catch  exception e
system out println     i      e tostring
if  i    9
system out println
throw e
system out println
/**
* used to return an embedded derby connection
* the protocol used is "jdbc:derby:dbname" where dbname is the database name
* @pre the derby embedded jdbc driver must be loaded before calling this method
* alternately, if the derby network server is started in this jvm, then the embedded driver
* org.apache.derby.jdbc.embeddeddriver is already loaded and it need not be loaded again.
* @param	dbname	database name (ie location of the database)
* @param 	attributes attributes for the database connection
*			example, create=true;
*					 upgrade=true;
* @return	returns embedded database connection
* @throws exception if there is any error
*/
public static connection getembeddedconnection string database string attributes
throws exception
string dburl     database    attributes
connection conn   drivermanager getconnection dburl
return conn
/**
* test a connection by executing a sample query
* @param	conn 	database connection
* @throws exception if there is any error
*/
public static void test connection conn
throws exception
statement stmt   null
resultset rs   null
try
// to test our connection, we will try to do a select from the system catalog tables
stmt   conn createstatement
rs   stmt executequery
while rs next
system out println    rs getint 1
catch sqlexception sqle
system out println    sqle
throw sqle
finally
if rs    null
rs close
if stmt    null
stmt close
/**
* this method waits until the user hits enter to stop the server
* and eventually exit this program
* allows clients to continue to connect using client connections from other
* jvms to derby network server that was started in this program
*/
private static void waitforexit   throws exception
system out println
bufferedreader in
new bufferedreader new inputstreamreader system in
system out println
in readline
/**
* returns a string with information as to how to connect to derby network server
*/
private static string ijusage
string ijusage
ijusage
ijusage
ijusage        dbname
return ijusage