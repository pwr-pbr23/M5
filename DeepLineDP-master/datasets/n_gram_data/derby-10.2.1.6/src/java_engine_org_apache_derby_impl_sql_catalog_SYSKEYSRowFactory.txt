/*
derby - class org.apache.derby.impl.sql.catalog.syskeysrowfactory
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl sql catalog
import org apache derby iapi types typeid
import org apache derby iapi sql dictionary systemcolumn
import org apache derby catalog typedescriptor
import org apache derby iapi types datavaluedescriptor
import org apache derby iapi types datavaluefactory
import org apache derby iapi types rowlocation
import org apache derby iapi sql dictionary catalogrowfactory
import org apache derby iapi sql dictionary conglomeratedescriptor
import org apache derby iapi sql dictionary constraintdescriptor
import org apache derby iapi sql dictionary datadescriptorgenerator
import org apache derby iapi sql dictionary datadictionary
import org apache derby iapi sql dictionary datadictionarycontext
import org apache derby iapi sql dictionary keyconstraintdescriptor
import org apache derby iapi sql dictionary subkeyconstraintdescriptor
import org apache derby iapi sql dictionary tupledescriptor
import org apache derby iapi sql execute execindexrow
import org apache derby iapi sql execute executioncontext
import org apache derby iapi sql execute execrow
import org apache derby iapi sql execute executionfactory
import org apache derby iapi error standardexception
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi services monitor monitor
import org apache derby catalog uuid
import org apache derby iapi services uuid uuidfactory
import org apache derby catalog indexdescriptor
/**
* factory for creating a syskeys row.
*
* @author jerry
*/
public class syskeysrowfactory extends catalogrowfactory
private static final string		tablename_string
protected static final int		syskeys_column_count   2
protected static final int		syskeys_constraintid   1
protected static final int		syskeys_conglomerateid   2
protected static final int		syskeys_index1_id   0
private	static	final	boolean	uniqueness   null
private static final int indexcolumnpositions
syskeys_constraintid
private	static	final	string	uuids
catalog uuid
heap uuid
syskeys_index1
/////////////////////////////////////////////////////////////////////////////
//
//	constructors
//
/////////////////////////////////////////////////////////////////////////////
public	syskeysrowfactory uuidfactory uuidf  executionfactory ef  datavaluefactory dvf
boolean convertidtolower
super uuidf ef dvf convertidtolower
initinfo syskeys_column_count  tablename_string  indexcolumnpositions  uniqueness  uuids
/////////////////////////////////////////////////////////////////////////////
//
//	methods
//
/////////////////////////////////////////////////////////////////////////////
/**
* make a syskeys row
*
* @return	row suitable for inserting into syskeys.
*
* @exception   standardexception thrown on failure
*/
public execrow makerow tupledescriptor td  tupledescriptor parent
throws standardexception
datavaluedescriptor		col
execrow    				row
uuid						oid
string					constraintid   null
string					conglomerateid   null
if  td    null
keyconstraintdescriptor	constraint    keyconstraintdescriptor td
/*
** we only allocate a new uuid if the descriptor doesn't already have one.
** for descriptors replicated from a source system, we already have an uuid.
*/
oid   constraint getuuid
constraintid   oid tostring
conglomerateid   constraint getindexuuidstring
/* insert info into syskeys */
/* resolve - it would be nice to require less knowledge about syskeys
* and have this be more table driven.
*/
/* build the row to insert  */
row   getexecutionfactory   getvaluerow syskeys_column_count
/* 1st column is constraintid (uuid - char(36)) */
row setcolumn syskeys_constraintid  dvf getchardatavalue constraintid
/* 2nd column is conglomerateid (uuid - char(36)) */
row setcolumn syskeys_conglomerateid  dvf getchardatavalue conglomerateid
return row
///////////////////////////////////////////////////////////////////////////
//
//	abstract methods to be implemented by children of catalogrowfactory
//
///////////////////////////////////////////////////////////////////////////
/**
* make a subconstraintdescriptor out of a syskeys row
*
* @param row a syskeys row
* @param parenttupledescriptor	null for this kind of descriptor.
* @param dd datadictionary
*
* @exception   standardexception thrown on failure
*/
public tupledescriptor builddescriptor
execrow					row
tupledescriptor			parenttupledescriptor
datadictionary 			dd
throws standardexception
subkeyconstraintdescriptor keydesc   null
if  sanitymanager debug
sanitymanager assert
row ncolumns      syskeys_column_count
datavaluedescriptor		col
datadescriptorgenerator ddg
uuid					constraintuuid
uuid					conglomerateuuid
string				constraintuuidstring
string				conglomerateuuidstring
ddg   dd getdatadescriptorgenerator
/* 1st column is constraintid (uuid - char(36)) */
col   row getcolumn syskeys_constraintid
constraintuuidstring   col getstring
constraintuuid   getuuidfactory   recreateuuid constraintuuidstring
/* 2nd column is conglomerateid (uuid - char(36)) */
col   row getcolumn syskeys_conglomerateid
conglomerateuuidstring   col getstring
conglomerateuuid   getuuidfactory   recreateuuid conglomerateuuidstring
/* now build and return the descriptor */
keydesc    new subkeyconstraintdescriptor
constraintuuid
conglomerateuuid
return keydesc
/**
* builds a list of columns suitable for creating this catalog.
*
*
* @return array of systemcolumn suitable for making this catalog.
*/
public systemcolumn	buildcolumnlist
int						index   0
systemcolumn			columnlist   new systemcolumn
// describe columns
columnlist
new systemcolumnimpl
convertidcase     			   column name
syskeys_constraintid 	   column number
0 					   precision
0 					   scale
false 				   nullability
datatype
true 				   built in type
36					   maxlength
columnlist
new systemcolumnimpl
convertidcase     	   column name
syskeys_conglomerateid 	   column number
0 					   precision
0 					   scale
false 				   nullability
datatype
true 				   built in type
36					   maxlength
return	columnlist