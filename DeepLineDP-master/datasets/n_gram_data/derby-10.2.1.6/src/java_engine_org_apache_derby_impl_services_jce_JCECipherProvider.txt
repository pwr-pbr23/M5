/*
derby - class org.apache.derby.impl.services.jce.jcecipherprovider
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl services jce
import org apache derby iapi services crypto cipherfactory
import org apache derby iapi services crypto cipherprovider
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi error standardexception
import org apache derby iapi reference sqlstate
import java security key
import java security invalidkeyexception
import java security nosuchalgorithmexception
import java security generalsecurityexception
import java security nosuchproviderexception
import javax crypto cipher
import javax crypto spec ivparameterspec
import javax crypto secretkeyfactory
import javax crypto spec secretkeyspec
import javax crypto secretkey
/**
this is a wrapper for a cipher
@see cipherfactory
*/
class jcecipherprovider implements cipherprovider
private cipher cipher
private int mode
private boolean ivused   true
private final ivparameterspec ivspec
private final int encryptionblocksize
private boolean sunjce    default of bool is false
// other provider workaround, we need to re-init the cipher before every encrypt/decrypt
private secretkey cryptixkey
jcecipherprovider int mode  secretkey secretkey  byte iv  string algorithm  string provider
throws standardexception
throwable t
ivspec   new ivparameterspec iv
try
if  provider    null
cipher   cipher getinstance algorithm
// see below.
if    equals cipher getprovider   getname
sunjce   true
else
/* the sun encryption provider does not need to re-init the cipher
* after each encrypt/decrypt.  this is a speed up trick.
* other crypto providers needs this because the encrypt/decrypt
* ciphers becomes out of sync after an encrypt/decrypt operation.
*/
if  provider equals
sunjce   true
else
/* the bouncycastle encryption provider is named "bc".
* the full "bouncycastleprovider" name used to work until
* version 103 came out.  (ie. beta3 and beta4 works fine)
* this trick is so that cipher.getinstance(algo, prov) will
* not throw an exception.  resolve 3765.
*/
if  provider equals
provider
cipher   cipher getinstance algorithm provider
// at creation time, the encryption block size is stored in order
// to do appropriate padding
encryptionblocksize   cipher getblocksize
this mode   mode
try
// ecb feedback mode does not require an iv
if  mode    cipherfactory encrypt
if   algorithm indexof    >  1
cipher init cipher encrypt_mode  secretkey
else
cipher init cipher encrypt_mode  secretkey ivspec
else if  mode    cipherfactory decrypt
if   algorithm indexof    >  1
cipher init cipher decrypt_mode  secretkey
else
cipher init cipher decrypt_mode  secretkey ivspec
else
throw standardexception newexception sqlstate illegal_cipher_mode
catch  invalidkeyexception ike
if  algorithm startswith
secretkeyfactory skf
if  provider    null
skf   secretkeyfactory getinstance secretkey getalgorithm
else
skf   secretkeyfactory getinstance secretkey getalgorithm    provider
// since the key may be a series of bytes generated by an arbitary means
// we need to translate it into a key suitable for the algorithm.
secretkey   skf translatekey new secretkeyspec secretkey getencoded    secretkey getalgorithm
// ecb mode does not require iv
if  mode    cipherfactory encrypt
if   algorithm indexof    >  1
cipher init cipher encrypt_mode  secretkey
else
cipher init cipher encrypt_mode  secretkey ivspec
else if  mode    cipherfactory decrypt
if   algorithm indexof    >  1
cipher init cipher decrypt_mode  secretkey
else
cipher init cipher decrypt_mode  secretkey ivspec
else
throw standardexception newexception sqlstate crypto_exception  ike
cryptixkey   secretkey
if  cipher getiv      null
ivused   false
if  sanitymanager debug
sanitymanager assert verifyiv iv
return
catch  invalidkeyexception ike
t   ike
catch  nosuchalgorithmexception nsae
throw standardexception newexception sqlstate encryption_nosuch_algorithm  algorithm  jcecipherfactory providererrorname provider
catch  nosuchproviderexception nspe
throw standardexception newexception sqlstate encryption_bad_provider  jcecipherfactory providererrorname provider
catch  generalsecurityexception gse
t   gse
throw standardexception newexception sqlstate crypto_exception  t
/**
@see cipherprovider#encrypt
@exception standardexception standard cloudscape error policy
*/
public int encrypt byte cleartext  int offset  int length
byte ciphertext  int outputoffset
throws standardexception
if  sanitymanager debug
sanitymanager assert mode    cipherfactory encrypt
sanitymanager assert cleartext    null
sanitymanager assert offset >  0
sanitymanager assert length > 0
sanitymanager assert offset length <  cleartext length
sanitymanager assert length <  ciphertext length outputoffset
int retval   0
try
// this same cipher is shared across the entire raw store, make it
// mt safe
synchronized this
if   sunjce
// this code is a workaround for other providers
try
//ivspec = new ivparameterspec(cipher.getiv());
if  mode    cipherfactory encrypt
if  ivused
cipher init cipher encrypt_mode  cryptixkey  ivspec
else
cipher init cipher encrypt_mode cryptixkey
else if  mode    cipherfactory decrypt
if  ivused
cipher init cipher decrypt_mode  cryptixkey  ivspec
else
cipher init cipher decrypt_mode  cryptixkey
catch  invalidkeyexception ike
system out println     ike
throw standardexception newexception sqlstate crypto_exception  ike
retval   cipher dofinal cleartext  offset  length  ciphertext  outputoffset
catch  illegalstateexception ise
// should never happen
if  sanitymanager debug
sanitymanager throwassert
catch  generalsecurityexception gse
system out println     gse
throw standardexception newexception sqlstate crypto_exception  gse
if  sanitymanager debug
sanitymanager assert retval    length
return retval
/**
@see cipherprovider#decrypt
@exception standardexception standard cloudscape error policy
*/
public int decrypt byte ciphertext  int offset  int length
byte cleartext  int outputoffset
throws standardexception
if  sanitymanager debug
sanitymanager assert mode    cipherfactory decrypt
sanitymanager assert ciphertext    null
sanitymanager assert offset >  0
sanitymanager assert length > 0
sanitymanager assert offset length <  ciphertext length
sanitymanager assert length <  cleartext length outputoffset
int retval   0
try
// this same cipher is shared across the entire raw store, make it
// mt safe
synchronized this
if   sunjce
// this code is a workaround for other providers
try
//ivspec = new ivparameterspec(cipher.getiv());
if  mode    cipherfactory encrypt
if  ivused
cipher init cipher encrypt_mode  cryptixkey  ivspec
else
cipher init cipher encrypt_mode cryptixkey
else if  mode    cipherfactory decrypt
if  ivused
cipher init cipher decrypt_mode  cryptixkey  ivspec
else
cipher init cipher decrypt_mode  cryptixkey
catch  invalidkeyexception ike
system out println     ike
throw standardexception newexception sqlstate crypto_exception  ike
retval   cipher dofinal ciphertext  offset  length  cleartext  outputoffset
catch  illegalstateexception ise
// should never happen
if  sanitymanager debug
sanitymanager throwassert
catch  generalsecurityexception gse
system out println     gse
throw standardexception newexception sqlstate crypto_exception  gse
if  sanitymanager debug
sanitymanager assert retval    length
return retval
boolean verifyiv byte iv
byte myiv   cipher getiv
// null iv is ok only if iv is not used
if  myiv    null
return  ivused
if  myiv length    iv length
return false
for  int i   0  i < iv length  i
if  myiv    iv
return false
return true
public int getencryptionblocksize
return encryptionblocksize