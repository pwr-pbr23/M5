/*
derby - class org.apache.derby.iapi.services.io.inputstreamutil
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi services io
import java io
/**
utility methods for inputstream that are stand-ins for
a small subset of datainput methods. this avoids pushing
a datainputstream just to get this functionality.
*/
public final class inputstreamutil
/**
read an unsigned byte from an inputstream, throwing an eofexception
if the end of the input is reached.
@exception ioexception if an i/o error occurs.
@exception eofexception if the end of the stream is reached
@see datainput#readunsignedbyte
*/
public static int readunsignedbyte inputstream in  throws ioexception
int b   in read
if  b < 0
throw new eofexception
return b
/**
read a number of bytes into an array.
@exception ioexception if an i/o error occurs.
@exception eofexception if the end of the stream is reached
@see datainput#readfully
*/
public static void readfully inputstream in  byte b
int offset
int len  throws ioexception
do
int bytesread   in read b  offset  len
if  bytesread < 0
throw new eofexception
len    bytesread
offset    bytesread
while  len    0
/**
read a number of bytes into an array.
keep reading in a loop until len bytes are read or eof is reached or
an exception is thrown. return the number of bytes read.
(inputstream.read(byte[],int,int) does not guarantee to read len bytes
even if it can do so without reaching eof or raising an exception.)
@exception ioexception if an i/o error occurs.
*/
public static int readloop inputstream in
byte b
int offset
int len
throws ioexception
int firstoffset   offset
do
int bytesread   in read b  offset  len
if  bytesread <  0
break
len    bytesread
offset    bytesread
while  len    0
return offset   firstoffset
/**
skip a number of bytes in the stream. note that this version takes and returns
a long instead of the int used by skipbytes.
@exception ioexception if an i/o error occurs.
@exception eofexception if the end of the stream is reached
@see datainput#skipbytes
*/
public static long skipbytes inputstream in  long n  throws ioexception
while  n > 0
//system.out.println(" skip n = " + n);
long delta   in skip n
//system.out.println(" skipped = " + delta);
if  delta < 0
throw new eofexception
n    delta
return n