/*
derby - class org.apache.derby.iapi.store.raw.loggable
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi store raw
import org apache derby iapi services io formatable
import org apache derby iapi error standardexception
import org apache derby iapi store raw log loginstant
import org apache derby iapi util bytearray
import java io ioexception
import java io outputstream
import org apache derby iapi services io limitobjectinput
/**
a loggable is a record of a change of state or an event that happened
in the rawstore in the context of a transaction.
all changes in the rawstore must be logged.
this is the root class for all log operations.
@see transaction#loganddo
*/
public interface loggable extends formatable
/**
apply the change indicated by this operation and optional data.
<b>if this method fail, the system will be shut down because the log
record has already been written to disk.  moreover, the log record will
be replayed during recovery and this dome method will be called on the
same page again, so if it fails again, recovery will fail and the
database cannot be started.  so it is very important to make sure that
every resource you need, such as disk space, has been acquired before
the loganddo method is called! </b>
<br>this method cannot acquire any resource (like latching of a page)
since it is called underneath the logging system, ie., the log record has
already been written to the log stream.
<p> the available() method of in indicates how much data can be read, i.e.
how much was originally written.
@param xact			the transaction
@param instant		the log instant of this operation
@param in			optional data
@exception ioexception can be thrown by any of the methods of in.
@exception standardexception standard cloudscape policy.
*/
public void dome transaction xact  loginstant instant  limitobjectinput in
throws standardexception  ioexception
/**
the log operations are responsible to create the bytearray, and the log
operations should write out any optional data for the change to the
bytearray.
the bytearray can be prepared when the log operation is constructed,
or it can be prepared when getpreparedlog() is called.
called by the log manager to allow the log operation to pass the buffer
which contains optional data that will be available in to dome()
methods.
@exception standardexception standard cloudscape policy.
*/
public bytearray getpreparedlog   throws standardexception
/**
determine if the operation should be reapplied in recovery redo.
if redo is needed, acquire any resource that is necessary for the
loggable's dome method.  these need to be released in the
releaseresource method.
<p> the sequence of events in recovery redo of a loggable operation is:
<nl>
<li> get the loggable operation.  if loggable.needsredo is false, then
no need to redo this operation.
<li> if loggable.needsredo is true, all the resources necessary for
applying the dome is acquired in needsredo.
<li> if the loggable is actually a compensation operation, then the
logging system will find the undoable operation that needs to be
undone, call compensation.setundoop with the undoable operation.
<li> the recovery system then calls loggable.dome, which re-applies the
loggable operation, or re-applies the compensation operation
<li> the recovery system then calls loggable.releaseresource.
</nl>
@param xact		the transaction trying to redo this operation
@return true if operation needs redoing, false if not.
@exception standardexception standard cloudscape policy.
@see loggable#releaseresource
*/
public boolean needsredo transaction xact  throws standardexception
/**
release any resource that was acquired for dome for rollback or
recovery redo.
this resource is acquired in either generateundo (if this is a
compensation operation during run time rollback or recovery rollback)
or in needsredo (if this is during recovery redo).  the run time
transaction context should have all the resource already acquird for
run time roll forward, so there is no need to releaseresource during
run time roll forward.
this method must be safe to be called multiple times.
*/
public void releaseresource transaction xact
/**
each loggable belongs to one or more groups of similar functionality.
grouping is a way to quickly sort out log records that are interesting
to different modules or different implementations.
when a module makes loggable and sent it to the log file, it must mark
this loggable with one or more of the following group.
if none fit, or if the loggable encompasses functionality that is not
described in existing groups, then a new group should be introduced.
grouping has no effect on how the record is logged or how it is treated
in rollback or recovery.
the following groups are defined. this list serves as the registry of
all loggable groups.
*/
public static final int first   			0x1 	   the first operation of a transaction
public static final int last   				0x2 	   the last operation of a transaction
public static final int compensation   		0x4 	   a compensation log record
public static final int bi_log   			0x8 	   a beforeimage log record
public static final int commit  		   0x10  	   the transaction committed
public static final int abort  			   0x20  	   the transaction aborted
public static final int prepare  		   0x40  	   the transaction prepared
public static final int xa_needlock  	   0x80  	   need to reclaim locks associated with theis log record during xa prepared xact recovery
public static final int rawstore  		  0x100 	   a log record generated by the raw store
public static final int file_resource     0x400        related to   files
public static final int checksum          0x800        a checksum log record
/**
get the loggable's group value
*/
public int group