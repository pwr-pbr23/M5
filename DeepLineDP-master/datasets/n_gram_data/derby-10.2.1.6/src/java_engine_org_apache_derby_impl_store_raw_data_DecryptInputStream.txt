/*
derby - class org.apache.derby.impl.store.raw.data.decryptinputstream
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl store raw data
import org apache derby iapi error standardexception
import org apache derby iapi store raw data datafactory
import org apache derby iapi store raw rawstorefactory
import org apache derby iapi services io compressednumber
import java io inputstream
import java io ioexception
/**
a decryptinputstream is used by stream container to access an encrypted
stream of bytes.
*/
public class decryptinputstream extends bufferedbyteholderinputstream
// if database is encrypted, bytes to reserve at the beginning of the buffer
//protected static final int encryption_reserve = datafactory.getencryptionblocksize() - 1;
protected datafactory datafactory
protected inputstream in
public decryptinputstream inputstream in  byteholder bh  datafactory datafactory
throws ioexception
super bh
this in   in
this datafactory   datafactory
fillbyteholder
public void fillbyteholder   throws ioexception
if  this bh available      0
this bh clear
try
// from the stream, read the actual length of the bytes
// before it was padded and encrypted.
int reallen   compressednumber readint in
// if it is -1, we have reached the end of the file.
// then we are done.
if  reallen     1
return
// calculate out what the padding was based on the actual length
int tail   reallen % datafactory getencryptionblocksize
int padding    tail    0  ? 0    datafactory getencryptionblocksize     tail
int encryptedlen   reallen   padding
// read all encrypted data including the padding.
byte ciphertext   new byte
in read ciphertext  0  encryptedlen
byte cleartext   new byte
// decrypt the data, and stored it in a new byte array.
datafactory decrypt ciphertext  0  encryptedlen  cleartext  0
// only put the actual data without the padding into the byte holder.
bh write cleartext  padding  reallen
catch  standardexception se
throw new ioexception
// allow reading from the byte holder.
this bh startreading