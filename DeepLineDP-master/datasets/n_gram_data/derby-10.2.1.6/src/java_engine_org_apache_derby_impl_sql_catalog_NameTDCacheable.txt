/*
derby - class org.apache.derby.impl.sql.catalog.nametdcacheable
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl sql catalog
import org apache derby iapi services cache cacheable
import org apache derby iapi sql dictionary schemadescriptor
import org apache derby iapi sql dictionary tabledescriptor
import org apache derby iapi error standardexception
import org apache derby iapi services sanity sanitymanager
/**
* this class implements a cacheable for a datadictionary cache of
* table descriptors, with the lookup key being the name of the table.
*
* assumes client passes in a string that includes the schema name.
*/
class nametdcacheable extends tdcacheable
{
private tablekey identity
nametdcacheable datadictionaryimpl dd
super dd
}
/* cacheable interface */
/** @see cacheable#clearidentity */
public void clearidentity
{
identity   null
td   null
}
/** @see cacheable#getidentity */
public object getidentity
{
return identity
}
/** @see cacheable#createidentity */
public cacheable createidentity object key  object createparameter
{
if (sanitymanager.debug)
{
if    key instanceof tablekey
{
sanitymanager throwassert
key getclass   getname
}
if    createparameter instanceof tabledescriptor
{
sanitymanager throwassert
createparameter getclass   getname
}
}
identity    tablekey key
td    tabledescriptor  createparameter
if  td    null
return this
else
return null
}
/**
* @see cacheable#setidentity
*
* @exception standardexception		thrown on error
*/
public cacheable setidentity object key  throws standardexception
{
if (sanitymanager.debug)
{
if    key instanceof tablekey
{
sanitymanager throwassert
key getclass   getname
}
}
td   dd getuncachedtabledescriptor identity    tablekey key
if  td    null
{
// add table descriptor to the oidtdcache in the datadictionary.
// no fear of deadlocks because this is called outside the
// synchronize block in the cache code.
dd addtabledescriptortoothercache td  this
return this
}
else
return null
}
/**
@exception standardexception		thrown on error
*/
// if this code is required it should be moved into a d_ class. - djd
/*
public boolean isconsistent(headerprintwriter reportinconsistent)
throws standardexception
{
boolean retval = true;
if (sanitymanager.debug)
{
tabledescriptor uncachedtd;
try
{
uncachedtd = dd.getuncachedtabledescriptor(identity);
}
catch (standardexception se)
{
reportinconsistent.println("unexpected exception " + se +
" while getting cached table descriptor in nametdcacheable.");
uncachedtd = null;
}
retval = checkconsistency(uncachedtd, identity, reportinconsistent);
}
return retval;
}
*/
}