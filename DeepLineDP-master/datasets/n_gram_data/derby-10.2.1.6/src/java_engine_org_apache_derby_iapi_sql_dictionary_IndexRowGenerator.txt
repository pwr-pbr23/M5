/*
derby - class org.apache.derby.iapi.sql.dictionary.indexrowgenerator
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi sql dictionary
import org apache derby iapi sql dictionary columndescriptorlist
import org apache derby iapi sql conn languageconnectioncontext
import org apache derby iapi sql execute executioncontext
import org apache derby iapi sql execute execindexrow
import org apache derby iapi sql execute execrow
import org apache derby iapi sql execute executionfactory
import org apache derby iapi types rowlocation
import org apache derby iapi types datatypedescriptor
import org apache derby iapi services io formatable
import org apache derby iapi services io formatidutil
import org apache derby iapi services io storedformatids
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi services context contextservice
import org apache derby iapi error standardexception
import org apache derby catalog indexdescriptor
import org apache derby catalog types indexdescriptorimpl
import java io objectinput
import java io objectoutput
import java io ioexception
import org apache derby iapi services io formatablebitset
/**
* this class extends indexdescriptor for internal use by the
* datadictionary.
*/
public class indexrowgenerator implements indexdescriptor  formatable
indexdescriptor	id
private executionfactory ef
/**
* constructor for an indexrowgeneratorimpl
*
* @param indextype		the type of index
* @param isunique		true means the index is unique
* @param basecolumnpositions	an array of column positions in the base
*								table.  each index column corresponds to a
*								column position in the base table.
* @param isascending	an array of booleans telling asc/desc on each
*						column.
* @param numberoforderedcolumns	in the future, it will be possible
*									to store non-ordered columns in an
*									index.  these will be useful for
*									covered queries.
*/
public indexrowgenerator string indextype
boolean isunique
int basecolumnpositions
boolean isascending
int numberoforderedcolumns
id   new indexdescriptorimpl indextype
isunique
basecolumnpositions
isascending
numberoforderedcolumns
if  sanitymanager debug
sanitymanager assert basecolumnpositions    null
/**
* constructor for an indexrowgeneratorimpl
*
* @param indexdescriptor		an indexdescriptor to delegate calls to
*/
public indexrowgenerator indexdescriptor indexdescriptor
id   indexdescriptor
/**
* get a template for the index row, to be used with getindexrow.
*
* @return	a row template for the index row.
*/
public execindexrow getindexrowtemplate
return getexecutionfactory   getindexablerow
id basecolumnpositions   length   1
/**
* get an index row for this index given a row from the base table
* and the rowlocation of the base row.  this method can be used
* to get the new index row for inserts, and the old and new index
* rows for deletes and updates.  for updates, the result row has
* all the old column values followed by all of the new column values,
* so you must form a row using the new column values to pass to
* this method to get the new index row.
*
* @param baserow	a row in the base table
* @param rowlocation	the rowlocation of the row in the base table
* @param indexrow	a template for the index row.  it must have the
*					correct number of columns.
* @param bitset	if non-null, then baserow is a partial row and the
*					set bits in bitset represents the column mapping for
*					the partial row to the complete base row. <b> warning:
*					</b> one based!!!
*
* @exception standardexception		thrown on error
*/
public void getindexrow execrow baserow
rowlocation rowlocation
execindexrow indexrow
formatablebitset bitset
throws standardexception
/*
** set the columns in the index row that are based on columns in
** the base row.
*/
int basecolumnpositions   id basecolumnpositions
int colcount   basecolumnpositions length
if  bitset    null
/*
** set the columns in the index row that are based on columns in
** the base row.
*/
for  int i   0  i < colcount   i
indexrow setcolumn i   1
baserow getcolumn basecolumnpositions
else
if  sanitymanager debug
sanitymanager assert  bitset get 0
/*
** set the columns in the index row that are based on columns in
** the base row.
*/
for  int i   0  i < colcount  i
int fullcolumnnumber   basecolumnpositions
int partialcolumnnumber   0
for  int index   1  index <  fullcolumnnumber  index
if  bitset get index
partialcolumnnumber
indexrow setcolumn i   1
baserow getcolumn partialcolumnnumber
/* set the row location in the last column of the index row */
indexrow setcolumn colcount   1  rowlocation
/**
* get a null index row for this index. this is useful to create objects
* that need to be passed to scancontroller.
*
* @param columnlist columndescriptors describing the base table.
* @param rowlocation	empty row location.
*
* @exception standardexception thrown on error.
*/
public execindexrow getnullindexrow columndescriptorlist columnlist
rowlocation rowlocation
throws standardexception
int basecolumnpositions   id basecolumnpositions
int i
execindexrow indexrow   getindexrowtemplate
for  i   0  i < basecolumnpositions length  i
datatypedescriptor dtd
columnlist elementat basecolumnpositions   1  gettype
indexrow setcolumn i   1  dtd getnull
indexrow setcolumn i   1  rowlocation
return indexrow
/**
* return true iff a change to a set of columns changes the index for this
* indexrowgenerator.
*
* @param changedcolumnids - holds the 1 based column ids for the changed
*		columns.
* @return	true iff a change to one of the columns in changedcolumnids
*          effects this index.
*/
public boolean indexchanged int changedcolumnids
int basecolumnpositions   id basecolumnpositions
for  int ix   0  ix < changedcolumnids length  ix
for  int iy   0  iy < basecolumnpositions length  iy
if  changedcolumnids    basecolumnpositions
return true
return false
/**
* get the indexdescriptor that this indexrowgenerator is based on.
*/
public indexdescriptor getindexdescriptor
return id
/** zero-argument constructor for formatable interface */
public indexrowgenerator
/** @see indexdescriptor#isunique */
public boolean isunique
return id isunique
/** @see indexdescriptor#basecolumnpositions */
public int basecolumnpositions
return id basecolumnpositions
/** @see indexdescriptor#getkeycolumnposition */
public integer getkeycolumnposition integer heapcolumnposition
return id getkeycolumnposition heapcolumnposition
/** @see indexdescriptor#getkeycolumnposition */
public int getkeycolumnposition int heapcolumnposition
return id getkeycolumnposition heapcolumnposition
/** @see indexdescriptor#numberoforderedcolumns */
public int numberoforderedcolumns
return id numberoforderedcolumns
/** @see indexdescriptor#indextype */
public string indextype
return id indextype
public string tostring
return id tostring
/** @see indexdescriptor#isascending */
public boolean			isascending integer keycolumnposition
return id isascending keycolumnposition
/** @see indexdescriptor#isdescending */
public boolean			isdescending integer keycolumnposition
return id isdescending keycolumnposition
/** @see indexdescriptor#isascending */
public boolean		isascending
return id isascending
/** @see indexdescriptor#setbasecolumnpositions */
public void		setbasecolumnpositions int basecolumnpositions
id setbasecolumnpositions basecolumnpositions
/** @see indexdescriptor#setisascending */
public void		setisascending boolean isascending
id setisascending isascending
/** @see indexdescriptor#setnumberoforderedcolumns */
public void		setnumberoforderedcolumns int numberoforderedcolumns
id setnumberoforderedcolumns numberoforderedcolumns
/**
* test for value equality
*
* @param other		the other indexrowgenerator to compare this one with
*
* @return	true if this indexrowgenerator has the same value as other
*/
public boolean equals object other
return id equals other
/**
@see java.lang.object#hashcode
*/
public int hashcode
return id hashcode
private executionfactory getexecutionfactory
if  ef    null
executioncontext	ec
ec    executioncontext
contextservice getcontext executioncontext context_id
ef   ec getexecutionfactory
return ef
////////////////////////////////////////////////////////////////////////////
//
// externalizable
//
////////////////////////////////////////////////////////////////////////////
/**
* @see java.io.externalizable#readexternal
*
* @exception ioexception	thrown on read error
* @exception classnotfoundexception	thrown on read error
*/
public void readexternal objectinput in  throws ioexception  classnotfoundexception
id    indexdescriptor in readobject
/**
*
* @exception ioexception	thrown on write error
*/
public void writeexternal objectoutput out  throws ioexception
out writeobject id
/* typedformat interface */
public int gettypeformatid
return storedformatids index_row_generator_v01_id