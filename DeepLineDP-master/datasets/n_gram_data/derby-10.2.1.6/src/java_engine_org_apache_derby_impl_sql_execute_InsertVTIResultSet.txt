/*
derby - class org.apache.derby.impl.sql.execute.insertvtiresultset
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl sql execute
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi error standardexception
import org apache derby iapi sql conn languageconnectioncontext
import org apache derby iapi types datavaluedescriptor
import org apache derby iapi sql execute cursorresultset
import org apache derby iapi sql execute execrow
import org apache derby iapi sql execute noputresultset
import org apache derby iapi sql activation
import org apache derby iapi sql resultdescription
import org apache derby vti defermodification
import java sql preparedstatement
import java sql resultset
import java util properties
/**
* insert the rows from the source into the specified
* base table. this will cause constraints to be checked
* and triggers to be executed based on the c's and t's
* compiled into the insert plan.
*/
class insertvtiresultset extends dmlvtiresultset
private preparedstatement		ps
private vtiresultset			vtirs
private java sql resultset		rs
private	temporaryrowholderimpl	rowholder
/**
*
* @exception standardexception		thrown on error
*/
public insertvtiresultset noputresultset source
noputresultset vtirs
activation activation
throws standardexception
super source  activation
this vtirs    vtiresultset  vtirs
/**
@exception standardexception standard cloudscape error policy
*/
protected void opencore   throws standardexception
/* we must instantiate the vti on each execution if any of the
* parameters contain a ?.
*/
if  ps    null
ps    preparedstatement  vtirs getvticonstructor   invoke activation
if  ps instanceof defermodification
try
defermodification  ps  modificationnotify  defermodification insert_statement  constants deferred
catch  throwable t
throw standardexception unexpecteduserexception t
execrow row   getnextrowcore sourceresultset
try
rs   ps executequery
catch  throwable t
throw standardexception unexpecteduserexception t
/* get or re-use the row changer.
* note: we need to set ourself as the top result set
* if this is not the 1st execution.  (done in constructor
* for 1st execution.)
*/
if    firstexecute
lcc getstatementcontext   settopresultset this  subquerytrackingarray
/* the source does not know whether or not we are doing a
* deferred mode insert.  if we are, then we must clear the
* index scan info from the activation so that the row changer
* does not re-use that information (which won't be valid for
* a deferred mode insert).
*/
if  constants deferred
activation clearindexscaninfo
if  firstexecute    constants deferred
properties properties   new properties
/*
** if deferred we save a copy of the entire row.
*/
rowholder
new temporaryrowholderimpl activation  properties
resultdescription
while   row    null
/*
** if we're doing a deferred insert, insert into the temporary
** conglomerate.  otherwise, insert directly into the permanent
** conglomerates using the rowchanger.
*/
if  constants deferred
rowholder insert row
else
insertintovti rs  row
rowcount
// no need to do a next on a single row source
if  constants singlerowsource
row   null
else
row   getnextrowcore sourceresultset
/*
** if it's a deferred insert, scan the temporary conglomerate and
** insert the rows into the permanent conglomerates using rowchanger.
*/
if  constants deferred
cursorresultset temprs   rowholder getresultset
try
temprs open
while   row   temprs getnextrow       null
insertintovti rs  row
finally
sourceresultset clearcurrentrow
temprs close
if  rowholder    null
rowholder close
// rowholder kept across opens
end of normalinsertcore
private void insertintovti resultset target  execrow row
throws standardexception
try
target movetoinsertrow
datavaluedescriptor rowarray   row getrowarray
for  int index   0  index < rowarray length  index
datavaluedescriptor dvd   rowarray
try
if  dvd isnull
target updatenull index   1
else
dvd setinto target  index   1
catch  throwable t
// backwards compatibility - 5.0 and before used
// updateobject always.
target updateobject index   1  dvd getobject
target insertrow
catch  throwable t
throw standardexception unexpecteduserexception t
/**
* @see org.apache.derby.iapi.sql.resultset#cleanup
*
* @exception standardexception		thrown on error
*/
public void	cleanup   throws standardexception
if  rowholder    null
rowholder close
if  rs    null
try
rs close
catch  throwable t
throw standardexception unexpecteduserexception t
rs   null
// close the ps if it needs to be instantiated on each execution
if   vtirs isreuseableps      ps    null
try
ps close
ps   null
catch  throwable t
throw standardexception unexpecteduserexception t
super cleanup
end of cleanup
// class implementation
public void finish   throws standardexception
if   ps    null      vtirs isreuseableps
try
ps close
ps   null
catch  throwable t
throw standardexception unexpecteduserexception t
super finish
end of finish