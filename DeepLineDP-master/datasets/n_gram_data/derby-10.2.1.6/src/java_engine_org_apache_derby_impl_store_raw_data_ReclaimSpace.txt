/*
derby - class org.apache.derby.impl.store.raw.data.reclaimspace
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl store raw data
import org apache derby iapi store raw containerkey
import org apache derby iapi store raw recordhandle
import org apache derby iapi store raw pagetimestamp
import org apache derby iapi store raw pagekey
import org apache derby iapi services context contextmanager
import org apache derby iapi services daemon serviceable
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi error standardexception
import org apache derby iapi store raw data datafactory
import org apache derby iapi store raw containerhandle
/**
post commit work to reclaim some space from the raw store.  this is a
wrapper class for the real serviceable class who wraps this on top of
itself so different things can be identified.
*/
public final class reclaimspace implements serviceable
private  boolean serviceasap
private  containerkey containerid
private  pagekey pageid 		   not used for reclaiming container
private  recordhandle headrowhandle     used for reclaiming overflow page
// and row reserved space.
// the following is used for reclaiming column chain only.
private int  columnid 		   which column in the row to reclaim
private long columnpageid 	   where the column chain pointer
private int  columnrecordid     is pointed at
private pagetimestamp timestamp     time stamp of columnpageid to make sure
// the post commit work doesn't get
// exercised more then once.
private  int  attempts
private  datafactory processor 	   processor knows how to reclaim file space
private  int reclaim     what is it we should be reclaiming
public static final int container   1 	   reclaim the entire container
public static final int page   2  		   reclaim an overflow page
public static final int row_reserve   3     reclaim reserved space on a row
public static final int column_chain   4     reclaim a column chain
private void initcontainerinfo containerkey containerid  int reclaim
datafactory processor  boolean serviceasap
this containerid   containerid
this reclaim   reclaim
this attempts   0
this processor   processor
this serviceasap   serviceasap
// reclaim container
public reclaimspace int reclaim  containerkey containerid
datafactory processor  boolean serviceasap
if  sanitymanager debug
sanitymanager assert reclaim    container
initcontainerinfo containerid  reclaim  processor  serviceasap
// reclaim page - undo of insert into overflow page
public reclaimspace int reclaim  pagekey pageid
datafactory processor  boolean serviceasap
if  sanitymanager debug
sanitymanager assert reclaim    page
initcontainerinfo pageid getcontainerid    reclaim  processor  serviceasap
this pageid   pageid
// reclaim row reserved space
public reclaimspace int reclaim  recordhandle headrowhandle
datafactory processor  boolean serviceasap
if  sanitymanager debug
sanitymanager assert reclaim    row_reserve
initcontainerinfo headrowhandle getcontainerid    reclaim  processor  serviceasap
this headrowhandle   headrowhandle
// reclaim column chain
public reclaimspace int reclaim  recordhandle headrowhandle
int columnid  long ovpageid  int ovrecordid
pagetimestamp timestamp
datafactory processor  boolean serviceasap
if  sanitymanager debug
sanitymanager assert reclaim    column_chain
initcontainerinfo headrowhandle getcontainerid    reclaim  processor  serviceasap
this headrowhandle   headrowhandle
this columnid   columnid
this columnpageid   ovpageid
this columnrecordid   ovrecordid
this timestamp   timestamp
/*
* serviceable methods
*/
public boolean serviceasap
return serviceasap
public int performwork contextmanager context  throws standardexception
if  sanitymanager debug
sanitymanager assert context    null
sanitymanager assert processor    null
return processor reclaimspace this  context
// @return true, if this work needs to be done on a user thread immediately
public boolean serviceimmediately
//it's very important that we reclaim container space immediately
//as part of post commit cleanup. because typically could typically
//involve large amount of space freed and
//we don't want conatiner reclaim requests lost if the server crashes
//for some reasom before container reclaim requests could be
//processed successfully by an asynchronous thread.
//if(reclaim == container)
//	return true; else return false;
return true
/*
* class specific methods
*/
public final containerkey getcontainerid
return containerid
public final pagekey getpageid
return pageid
public final recordhandle getheadrowhandle
return headrowhandle
public final int getcolumnid
return columnid
public final long getcolumnpageid
return columnpageid
public final int getcolumnrecordid
return columnrecordid
public final pagetimestamp getpagetimestamp
return timestamp
public final int reclaimwhat
return reclaim
public final int incrattempts
return   attempts
// debug
public string tostring
if  sanitymanager debug
if  reclaim    container
return     containerid
if  reclaim    page
return     pageid       headrowhandle
if  reclaim    row_reserve
return     pageid       headrowhandle
if  reclaim    column_chain
return    pageid       headrowhandle
columnid       columnpageid
columnrecordid
return null