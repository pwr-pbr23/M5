/*
derby - class org.apache.derby.impl.sql.execute.deletevtiresultset
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl sql execute
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi error standardexception
import org apache derby iapi sql conn languageconnectioncontext
import org apache derby iapi sql execute cursorresultset
import org apache derby iapi sql execute execrow
import org apache derby iapi sql execute noputresultset
import org apache derby iapi sql activation
import org apache derby iapi sql resultdescription
import org apache derby iapi store access transactioncontroller
import org apache derby iapi types sqlinteger
import java util properties
/**
* delete the rows from the specified
* base table. this will cause constraints to be checked
* and triggers to be executed based on the c's and t's
* compiled into the insert plan.
*/
class deletevtiresultset extends dmlvtiresultset
private java sql resultset		rs
private temporaryrowholderimpl rowholder
/* if the delete is deferred use a row holder to keep the list of ids of the rows to be deleted.
* a rowholder is used instead of a simple list because a rowholder will spill to disk when it becomes
* too large. the row will consist of just one column -- an integer.
*/
/*
* class interface
*
*/
/**
*
* @exception standardexception		thrown on error
*/
public deletevtiresultset
noputresultset		source
activation			activation
throws standardexception
super source  activation
/**
@exception standardexception standard cloudscape error policy
*/
protected void opencore   throws standardexception
lcc getstatementcontext   settopresultset this  subquerytrackingarray
execrow row   getnextrowcore sourceresultset
if  row    null
rs   activation gettargetvti
if  sanitymanager debug
sanitymanager assert rs    null
/* the source does not know whether or not we are doing a
* deferred mode delete.  if we are, then we must clear the
* index scan info from the activation so that the row changer
* does not re-use that information (which won't be valid for
* a deferred mode delete).
*/
if  constants deferred
activation clearindexscaninfo
if  null    rowholder
rowholder
new temporaryrowholderimpl activation  new properties
resultdescription  null
try
while   row    null
if   constants deferred
rs deleterow
else
execrow rowid   new valuerow 1
rowid setcolumn  1  new sqlinteger  rs getrow
rowholder insert  rowid
rowcount
// no need to do a next on a single row source
if  constants singlerowsource
row   null
else
row   getnextrowcore sourceresultset
catch  standardexception se
throw se
catch  throwable t
throw standardexception unexpecteduserexception t
if  constants deferred
cursorresultset temprs   rowholder getresultset
try
execrow	deferredrowbuffer   null
temprs open
while   deferredrowbuffer   temprs getnextrow       null
int rownumber   deferredrowbuffer getcolumn  1  getint
rs absolute  rownumber
rs deleterow
catch  throwable t
throw standardexception unexpecteduserexception t
finally
sourceresultset clearcurrentrow
temprs close
if  rowholder    null
rowholder close
// rowholder kept across opens
end of opencore