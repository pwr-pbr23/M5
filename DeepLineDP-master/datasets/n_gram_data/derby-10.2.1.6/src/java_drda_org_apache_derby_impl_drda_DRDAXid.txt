/*
derby - class org.apache.derby.impl.drda.drdaxid.java
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
/**
* this class provides an xid implementation for network server xa
*/
package org apache derby impl drda
import javax transaction xa xid
class drdaxid implements xid
private final int format_id
private final byte global_id
private final byte branch_id
drdaxid int formatid  byte globalid  byte branchid
format_id   formatid
global_id   globalid
branch_id   branchid
/**
* obtain the format id part of the xid.
* <p>
*
* @return format identifier. o means the osi ccr format.
**/
public int getformatid
return format_id
/**
* obtain the global transaction identifier part of xid as an array of
* bytes.
* <p>
*
* @return a byte array containing the global transaction identifier.
**/
public byte getglobaltransactionid
return global_id
/**
* obtain the transaction branch qualifier part of the xid in a byte array.
* <p>
*
* @return a byte array containing the branch qualifier of the transaction.
**/
public byte getbranchqualifier
return branch_id
public string tostring
string s
format_id
converttohexstring global_id
converttohexstring branch_id
return s
/**
* convert byte array to a hex string
*
* @param buf buffer to  convert
* @return hex string representation of byte array
*/
private static string converttohexstring byte  buf
if  buf    null
return null
stringbuffer str   new stringbuffer
str append
string val
int byteval
for  int i   0  i < buf length  i
byteval   buf   0xff
val   integer tohexstring byteval
if  val length   < 2
str append
str append val
return str tostring