/*
derby - class org.apache.derby.impl.tools.dblook.logs
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl tools dblook
import java io printwriter
import java io fileoutputstream
import java io ioexception
import java sql sqlexception
import org apache derby tools dblook
public class logs
// log file (for errors/warnings).
private static printwriter logfile   null
// user-specified output file.
private static printwriter ddlfile   null
// statement delimiter.
private static string stmtend
// verbose mode?
private static boolean verbose
// did we write at least one message to the dblook file?
private static boolean atleastonedebug
/* **********************************************
* initlogs:
* prepare output streams and initialize state for
* handling dblook output.
* @param logfilename file for errors/warnings.
* @param ddlfilename file for generated ddl.
* @param appendlogs whether or not to append to existing
*   log and ddl files.
* @param doverbose verbose mode
* @param endofstmt statement delimiter.
* @return true if all state is initialized successfully;
*  false otherwise.
****/
public static boolean initlogs string logfilename  string ddlfilename
boolean appendlogs  boolean doverbose  string endofstmt
try
logfile   new printwriter new fileoutputstream logfilename  appendlogs
ddlfile    ddlfilename    null  ? null
new printwriter new fileoutputstream ddlfilename  appendlogs
verbose   doverbose
stmtend   endofstmt
atleastonedebug   false
catch  ioexception ioe
system out println     ioe
return false
return true
/* **********************************************
* method to report status info to the end-user.
* this information will be printed as sql script
* comments, which means the messages must be
* preceded by a "--".  if the user specified a
* ddl file, then the message will be printed to
* that file; otherwise, it will be printed to
* the console.
* @param msg the information to print out.
****/
public static void report string msg
if  ddlfile    null
system out println     msg
else
ddlfile println     msg
return
/* **********************************************
* report a specific string to output.
* @param str the string to report.
****/
public static void reportstring string str
report str
/* **********************************************
* report a localized message to output.
* @param key key for the message to report.
****/
public static void reportmessage string key
reportmessage key   string null
/* **********************************************
* report a localized message to output,
* substituting the received value where
* appropriate.
* @param key key for the message to report.
* @param value value to be inserted into the
*   message at the {0} marker.
****/
public static void reportmessage string key
string value
reportmessage key  new string   value
/* **********************************************
* report a localized message to output,
* substituting the received values where
* appropriate.
* @param key key for the message to report.
* @param values array of value to be inserted
*   into the message at the {0}, {1}, etc markers.
****/
public static void reportmessage string key
string  values
string msg   dblook lookupmessage key  values
report msg
/* **********************************************
* prints the received exception to the log
* file and, if the use has specified "verbose",
* the screen as well.
* @param e the exception to be printed.
****/
public static void debug exception e
e printstacktrace logfile
if  verbose
e printstacktrace system err
atleastonedebug   true
/* **********************************************
* prints the message for the received key to the log
* log file and, if the use has specified "verbose",
* the screen as well.
* @param key key for the message to be printed.
* @param value value to be substituted into the
*   message.
****/
public static void debug string key
string value
string msg   key
if  value    null
msg   dblook lookupmessage key
new string   value
logfile println     msg
if  verbose
system err println     msg
atleastonedebug   true
/* **********************************************
* prints the message for the received key to the log
* log file and, if the use has specified "verbose",
* the screen as well.
* @param key key for the message to be printed.
* @param value value to be substituted into the
*   message.
****/
public static void debug string key
string  values
string msg   key
if  values    null
msg   dblook lookupmessage key  values
logfile println     msg
if  verbose
system err println     msg
atleastonedebug   true
/* **********************************************
* recursive method to unroll a chains of sql exceptions.
* @param sqle the sql exception to unroll.
* @return a string representing the unrolled exception
*  is returned.
****/
public static string unrollexceptions sqlexception sqle
string rv   sqle getmessage
if  sqle getnextexception      null
return rv   unrollexceptions sqle getnextexception
else
return rv
/* **********************************************
* write a string (piece of an sql command) to
* the output ddl file.
* @param sql the string to write.
****/
public static void writetonewddl string sql
if  ddlfile    null
system out print sql
else
ddlfile print sql
/* **********************************************
* write the user-given statement delimiter to
* the output ddl file, followed by a newline.
****/
public static void writestmtendtonewddl
if  ddlfile    null
system out println stmtend
else
ddlfile println stmtend
/* **********************************************
* write a newline character to the output ddl
* file, followed by a newline.
****/
public static void writenewlinetonewddl
if  ddlfile    null
system out println
else
ddlfile println
/* **********************************************
* close output streams and, if at least one
* message was printed to the log file, let
* the user know.
* @return true if all streams were closed
*  successfully; false otherwise.
****/
public static boolean cleanup
try
if  atleastonedebug
dblook writeverboseoutput

logfile close
if  ddlfile    null
ddlfile close
catch  exception e
system out println     e
return false
return true