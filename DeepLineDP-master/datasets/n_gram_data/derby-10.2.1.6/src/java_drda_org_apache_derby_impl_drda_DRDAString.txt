/*
* derby - class org.apache.derby.impl.drda.drdastring
*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*   http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or
* implied. see the license for the specific language governing
* permissions and limitations under the license.
*
*/
package org apache derby impl drda
/**
* this class provides functionality for reusing buffers and strings
* when parsing drda packets. a byte array representing a string is
* stored internally. when the string is requested as a
* <code>string</code> object, the byte array is converted to a
* string, and the string is cached to avoid unnecessary conversion
* later.
*/
final class drdastring
/** buffer representing the string. */
private byte buffer
/** object used to convert byte buffer to string. */
private final ccsidmanager ccsidmanager
/** true if the contents were modified in the previous call to
* <code>setbytes</code>. */
private boolean modified
/** the previously generated string. */
private string cachedstring
/**
* create a new <code>drdastring</code> instance.
*
* @param m a <code>ccsidmanager</code> value specifying
* which encoding is used
*/
drdastring ccsidmanager m
this buffer   new byte
this ccsidmanager   m
this cachedstring   null
/**
* check whether the internal buffer contains the same data as
* another byte buffer.
*
* @param buf a byte array
* @param offset start position in the byte array
* @param size how many bytes to read from the byte array
* @return <code>true</code> if the internal buffer contains the
* same data as the specified byte array
*/
private boolean equalto byte buf  int offset  int size
int len   buffer length
if  len    size  return false
for  int i   0  i < len    i
if  buffer    buf  return false
return true
/**
* modify the internal byte buffer. if the new data is equal to
* the old data, the cached values are not cleared.
*
* @param src the new bytes
* @param offset start offset
* @param size number of bytes to use
*/
public void setbytes byte src  int offset  int size
if  equalto src  offset  size
modified   false
return
if  buffer length    size
buffer   new byte
system arraycopy src  offset  buffer  0  size
modified   true
cachedstring   null
/**
* check whether the contents of the <code>drdastring</code> were
* modified in the previous call to <code>setbytes()</code>.
*
* @return <code>true</code> if the contents were modified
*/
public boolean wasmodified
return modified
/**
* convert the internal byte array to a string. the string value
* is cached.
*
* @return a <code>string</code> value
*/
public string tostring
if  cachedstring    null
cachedstring
ccsidmanager converttoucs2 buffer
return cachedstring
/**
* return the length in bytes of the internal string
* representation.
*
* @return length of internal representation
*/
public int length
return buffer length
/**
* return the internal byte array. the returned array should not
* be modified, as it is used internally in
* <code>drdastring</code>. the value of the array might be
* modified by subsequent calls to
* <code>drdastring.setbytes()</code>.
*
* @return internal buffer
*/
public byte getbytes
return buffer