/*
derby - class org.apache.derby.iapi.services.cache.cachemanager
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi services cache
import org apache derby iapi error standardexception
import org apache derby iapi services daemon daemonservice
import org apache derby iapi util matchable
import org apache derby iapi util operator
public interface cachemanager
/**
* @return the current maximum size of the cache.
*/
public long getmaximumsize
/**
* change the maximum size of the cache. if the size is decreased then cache entries
* will be thrown out.
*
* @param newsize the new maximum cache size
*
* @exception standardexception cloudscape standard error policy
*/
public void resize  long newsize  throws standardexception
/**
find an object in the cache.
<p>
find an object in the cache that matches the key provided using the equals()
method, i.e. the return cacheable will have getidentifier.equals(key) true.
if the object does not exist in the cache it will be added by one of:
<ul>
<li>creating a new holder object and calling its initparameter() method and then its
setidentity() method with key as the parameter.
<li>calling clearidentity() on an holder object in the clean state and then calling its
setidentity() method with key as the parameter.
<li>calling clean() on a dirty holder object and then calling clearidentity() on an
holder object in the clean state and then calling its setidentity() method with key
as the parameter.
</ul>
in all cases the setidentity() method is called with forcreate set to false.
<br>
the returned object is kept, i.e. its identity will not change, until the release()
method is called. the release() method must be called after the caller is finished
with the object and throw away the reference to it, e.g.
<pre>
page p = (page) pagecache.find(pagekey);
// do stuff with p
// release p
pagecache.release(p);
p = null;
</pre>
@return a reference to an object in the cache, or null if the object cannot be found.
@exception standardexception standard cloudscape error policy.
@see cacheable#setidentity
*/
public cacheable find object key  throws standardexception
/**
find an object in the cache.
<p>
find an object in the cache that matches the key provided using the equals()
method, i.e. the return cacheable will have getidentifier.equals(key) true.
if a matching object does not exist in the cache, null is returned.
<br>
the returned object is kept, i.e. its identity will not change, until the release()
method is called. the release() method must be called after the caller is finished
with the object and throw away the reference to it, e.g.
<pre>
page p = (page) pagecache.findcached(pagekey);
if (p != null) {
// do stuff with p
// release p
pagecache.release(p);
p = null;
}
</pre>
@exception standardexception standard cloudscape error policy.
*/
public cacheable findcached object key  throws standardexception
/**
* determine whether a key is in the cache.
*
* <b>warning:</b> this method does not keep a lock on the entry or the cache, so
* the return value could be made incorrect by the time that this method returns.
* therefore this method should only be used for statistical purposes.
*/
public boolean containskey  object key
/**
* mark a set of entries as having been used. normally this is done as a side effect
* of find() or findcached. if the entry has been replaced then this method
* does nothing.
*
* @param keys the key of the used entry.
*/
public void setused  object keys
/**
create an object in the cache. the resulting object will match the key provided using the equals()
method, i.e. the return cacheable will have getidentifier.equals(key) true.
if an object that matches the key already exists in the cache then
an exception is thrown.
<br>
the object will be added by one of:
<ul>
<li>creating a new holder object and calling its initparameter() method and then its
createidentity() method with key as the parameter.
<li>calling clearidentity() on an holder object in the clean state and then calling its
createidentity() method with key as the parameter.
<li>calling clean() on a dirty holder object and then calling clearidentity() on an
holder object in the clean state and then calling its createidentity() method with key
as the parameter.
</ul>
in all cases the setidentity() method is called with the createparameter as the second
argument.
if the object cannot be created then an exception is thrown by createidentity.
<br>
the returned object is kept, i.e. its identity will not change, until the release()
method is called. the release() method must be called after the caller is finished
with the object and throw away the reference to it, e.g.
<pre>
page p = (page) pagecache.create(pagekey, createtype);
// do stuff with p
// release p
pagecache.release(p);
p = null;
</pre>
@return a reference to an object in the cache.
@exception standardexception standard cloudscape error policy.
@see cacheable#createidentity
*/
public cacheable create object key  object createparameter  throws standardexception
/**
release a cacheable object previously found with find() or findcached().
after this call the caller must throw away the reference to item.
*/
public void release cacheable entry
/**
delete and remove an object from the cache. it is up to the user of the cache
to provide synchronization of some form that ensures that only one caller
executes remove() on a cached object.
<br>
the object must have previously been found with find() or findcached().
the item will be placed into the noidentity
state through clean(true) (if required) and clearidentity(). the removal of the
object will be delayed until it is not kept by anyone. objects that are in the
to be removed state can still be found through find() and findcached()
until their keep count drops to zero. this call waits until the object
has been removed.
<br>
after this call the caller must throw away the reference to item.
@exception standardexception standard cloudscape error policy.
*/
public void remove cacheable entry  throws standardexception
/**
place all objects in their clean state by calling their clean method
if they are dirty. this method guarantees that all objects that existed
in the cache at the time of the call are placed in the clean state
sometime during this call. objects that are added to the cache during
this call or objects that are dirtied during this call (by other
callers) are not guaranteed to be clean once this call returns.
@see cacheable#clean
@see cacheable#isdirty
@exception standardexception standard cloudscape error policy.
*/
public void cleanall   throws standardexception
/**
clean all objects that match the partialkey (or exact key).
any cached object that results in the partialkey.equals(object)
method returning true when passed the cached object will be cleaned.
<p>
in order to clean more than one object the cacheable equals method must
be able to handle a partial key, e.g. a page has pagekey but a clean
may pass a containerkey which will discard all pages in that container.
@exception standardexception standard cloudscape error policy.
*/
public void clean matchable partialkey  throws standardexception
/**
age as many objects as possible out of the cache.
this call is guaranteed not to block.
it is not guaranteed to leave the cache empty.
<br>
it is guaranteed that all unkept, clean objects will be
removed from the cache.
@see cacheable#clean
@see cacheable#clearidentity
*/
public void ageout
/**
shutdown the cache. this call stops the cache returning
any more valid references on a find() or findcached() call,
and then cleanall() and ageout() are called. the cache remains
in existence until the last kept object has been unkept.
@exception standardexception standard cloudscape error policy.
*/
public void shutdown   throws standardexception
/**
this cache can use this daemonservice if it needs some work to be done
int he background
*/
public void usedaemonservice daemonservice daemon
/**
discard all objects that match the partialkey (or exact key).
any cached object that results in the partialkey.equals(object)
method returning true when passed the cached object will be thrown out of the cache
if and only if it is not in use. the cacheable
will be discarded without its clean method being called.
<p>
if partialkey is null, it matches all objects.  this is a way to
discard all objects from the cache in case of emergency shutdown.
<p>
in order to discard more than one object the cacheable equals method must be able to handle
a partial key, e.g. a page has pagekey but a discard may pass a containerkey which will discard
all pages in that container.
<p>
@return true if discard has successful gotten rid of all objects that
match the partial or exact key.  false if some objects that matches
were not gotten rid of because it was kept.
*/
public boolean discard matchable partialkey
/**
report the number of items in use (with identity) in this cache.
*/
public int getnumberinuse
/**
return statistics about cache that may be implemented.
**/
public long getcachestats
/**
reset the cache statistics to 0.
**/
public void resetcachestats
/**
* perform an operation on (approximately) all entries that matches the filter,
* or all entries if the filter is null.  entries that are added while the
* cache is being scanned might or might not be missed.
*
* @param filter
* @param operator
*/
public void scan  matchable filter  operator operator
}