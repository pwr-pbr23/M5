/*
derby - class org.apache.derby.iapi.db.factory
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi db
import org apache derby iapi services monitor monitor
import org apache derby iapi sql conn languageconnectioncontext
import org apache derby iapi sql conn connectionutil
import java sql sqlexception
/**
*  <p>
*  callers of these methods must be within the context of a
*  cloudscape statement execution otherwise a sqlexception will be thrown.
*  <br>
*  there are two basic ways to call these methods.
*  <ol>
*  <li>
*  within a sql statement.
*  <pre>
*		-- checkpoint the database
*		call org.apache.derby.iapi.db.factory::
*				getdatabaseofconnection().checkpoint();
*  </pre>
*  <li>
*  in a server-side jdbc method.
*  <pre>
*		import org.apache.derby.iapi.db.*;
*
*		...
*
*	// checkpoint the database
*	    database db = factory.getdatabaseofconnection();
*		db.checkpoint();
*
*  </pre>
*  </ol>
this class can only be used within an sql-j statement, a java procedure or a server side java method.
<p>this class can be accessed using the class alias <code> factory </code> in sql-j statements.
*/
public class factory
/**
<p>
returns the database object associated with the current connection.
@exception sqlexception not in a connection context.
**/
public static org apache derby database database getdatabaseofconnection
throws sqlexception
// get the current language connection context.  this is associated
// with the current database.
languageconnectioncontext lcc   connectionutil getcurrentlcc
return lcc getdatabase
/**
* get the triggerexecutioncontext for the current connection
* of the connection.
*
* @return the triggerexecutioncontext if called from the context
* of a trigger; otherwise, null.
@exception sqlexception not in a connection or trigger context.
*/
public static triggerexecutioncontext gettriggerexecutioncontext
throws sqlexception
languageconnectioncontext lcc   connectionutil getcurrentlcc
return lcc gettriggerexecutioncontext