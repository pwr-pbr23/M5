/*
derby - class org.apache.derby.impl.sql.compile.privilegenode
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package	org apache derby impl sql compile
import org apache derby iapi error standardexception
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi sql depend provider
import org apache derby iapi sql dictionary schemadescriptor
import org apache derby iapi sql dictionary datadictionary
import org apache derby iapi sql dictionary tabledescriptor
import org apache derby iapi sql dictionary aliasdescriptor
import org apache derby catalog types routinealiasinfo
import org apache derby catalog aliasinfo
import org apache derby iapi reference sqlstate
import org apache derby impl sql execute privilegeinfo
import org apache derby catalog typedescriptor
import java util hashmap
import java util list
/**
* this node represents a set of privileges that are granted or revoked on one object.
*/
public class privilegenode extends querytreenode
// privilege object type
public static final int table_privileges   0
public static final int routine_privileges   1
private int objecttype
private object objectofprivilege
private tableprivilegesnode specificprivileges     null for routines
/**
* initialize a privilegesnode
*
* @param objecttype (an integer)
* @param objectofprivilege (a tablename or routinedesignator)
* @param specificprivileges null for routines
*/
public void init  object objecttype  object objectofprivilege  object specificprivileges
this objecttype     integer  objecttype  intvalue
this objectofprivilege   objectofprivilege
this specificprivileges    tableprivilegesnode  specificprivileges
if  sanitymanager debug
sanitymanager assert  objectofprivilege    null
switch  this objecttype
case table_privileges
sanitymanager assert  objectofprivilege instanceof tablename
objectofprivilege getclass   getname
sanitymanager assert  specificprivileges    null
break
case routine_privileges
sanitymanager assert  objectofprivilege instanceof routinedesignator
objectofprivilege getclass   getname
sanitymanager assert  specificprivileges    null
break
default
sanitymanager throwassert      this objecttype
end of init
/**
* bind this grantnode. resolve all table, column, and routine references. register
* a dependency on the object of the privilege if it has not already been done
*
* @param dependencies the list of privilege objects that this statement has already seen.
*               if the object of this privilege is not in the list then this statement is registered
*               as dependent on the object.
* @param grantees the list of grantees
* @param isgrant grant if true; revoke if false
* @return the bound node
*
* @exception standardexception	standard error policy.
*/
public querytreenode bind  hashmap dependencies  list grantees  boolean isgrant   throws standardexception
provider dependencyprovider   null
schemadescriptor sd   null
switch  objecttype
case table_privileges
tablename tablename    tablename  objectofprivilege
sd   getschemadescriptor  tablename getschemaname    true
if  sd issystemschema
throw standardexception newexception sqlstate auth_grant_revoke_not_allowed  tablename getfulltablename
tabledescriptor td   gettabledescriptor  tablename gettablename    sd
if  td    null
throw standardexception newexception  sqlstate lang_table_not_found  tablename
// don't allow authorization on session schema tables. causes confusion if
// a temporary table is created later with same name.
if  issessionschema sd getschemaname
throw standardexception newexception sqlstate lang_operation_not_allowed_on_session_schema_tables
if  td gettabletype      tabledescriptor base_table_type
td gettabletype      tabledescriptor view_type
throw standardexception newexception sqlstate auth_grant_revoke_not_allowed  tablename getfulltablename
// can not grant/revoke permissions from self
if  grantees contains sd getauthorizationid
throw standardexception newexception sqlstate auth_grant_revoke_not_allowed
td getqualifiedname
specificprivileges bind  td  isgrant
dependencyprovider   td
break
case routine_privileges
routinedesignator rd    routinedesignator  objectofprivilege
sd   getschemadescriptor  rd name getschemaname    true
if   sd isschemawithgrantableroutines
throw standardexception newexception sqlstate auth_grant_revoke_not_allowed  rd name getfulltablename
aliasdescriptor proc   null
routinealiasinfo routineinfo   null
java util list list   getdatadictionary   getroutinelist
sd getuuid   tostring    rd name gettablename
rd isfunction ? aliasinfo alias_name_space_function_as_char   aliasinfo alias_name_space_procedure_as_char
// can not grant/revoke permissions from self
if  grantees contains sd getauthorizationid
throw standardexception newexception sqlstate auth_grant_revoke_not_allowed
rd name getfulltablename
if  rd paramtypelist    null
// no signature was specified. make sure that there is exactly one routine with that name.
if  list size   > 1
throw standardexception newexception    rd isfunction ? sqlstate lang_ambiguous_function_name
sqlstate lang_ambiguous_procedure_name
rd name getfulltablename
if  list size      1
throw standardexception newexception sqlstate lang_no_such_method_alias  rd name getfulltablename
proc    aliasdescriptor  list get 0
else
// the full signature was specified
boolean found   false
for  int i   list size     1    found     i >  0  i
proc    aliasdescriptor  list get i
routineinfo    routinealiasinfo  proc getaliasinfo
int parametercount   routineinfo getparametercount
if  parametercount    rd paramtypelist size
continue
typedescriptor parametertypes   routineinfo getparametertypes
found   true
for  int parmidx   0  parmidx < parametercount  parmidx
if    parametertypes equals  rd paramtypelist get  parmidx
found   false
break
if    found
// reconstruct the signature for the error message
stringbuffer sb   new stringbuffer  rd name getfulltablename
sb append
for  int i   0  i < rd paramtypelist size    i
if  i > 0
sb append
sb append  rd paramtypelist get i  tostring
throw standardexception newexception sqlstate lang_no_such_method_alias  sb tostring
rd setaliasdescriptor  proc
dependencyprovider   proc
break
if  dependencyprovider    null
if  dependencies get  dependencyprovider     null
getcompilercontext   createdependency  dependencyprovider
dependencies put  dependencyprovider  dependencyprovider
return this
end of bind
/**
* @return privilegeinfo for this node
*/
privilegeinfo makeprivilegeinfo
switch  objecttype
case table_privileges
return specificprivileges makeprivilegeinfo
case routine_privileges
return   routinedesignator  objectofprivilege  makeprivilegeinfo
return null