/*
derby - class org.apache.derby.impl.tools.ij.session
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl tools ij
import org apache derby iapi tools i18n localizedoutput
import java sql connection
import java sql preparedstatement
import java sql statement
import java sql resultset
import java sql sqlexception
import java util hashtable
/**
session holds the objects local to a particular database session,
which starts with a connection and is all other jdbc
stuff used on that connection, along with some ij state
that is connection-based as well.
this is separated out to localize database objects and
also group objects by session.
@author ames
*/
class session
static final string default_name
boolean singlesession   true
connection conn   null
string tag  name
hashtable prepstmts   new hashtable
hashtable cursorstmts   new hashtable
hashtable cursors   new hashtable
hashtable asyncstmts   new hashtable
boolean isjcc  false          is this the ibm universal driver
boolean isdnc   false         is this the derby network client jdbc driver
session connection newconn  string newtag  string newname
conn   newconn
tag   newtag
name   newname
try
isjcc   conn getmetadata   getdrivername   startswith
isdnc   conn getmetadata   getdrivername   startswith
catch  sqlexception se
// if there is a problem getting the driver name we will
// assume it is not jcc or dnc.
connection getconnection
// check: should never be null
return conn
boolean getisjcc
return isjcc
boolean getisdnc
return isdnc
string getname
return name
object addpreparedstatement string name  preparedstatement ps
return prepstmts put name ps
object addcursorstatement string name  statement s
return cursorstmts put name  s
object addcursor string name  resultset rs
return cursors put name  rs
object addasyncstatement string name  asyncstatement s
return asyncstmts put name  s
preparedstatement getpreparedstatement string name
return  preparedstatement  prepstmts get name
statement getcursorstatement string name
return  statement cursorstmts get name
resultset getcursor string name
return  resultset cursors get name
asyncstatement getasyncstatement string name
return  asyncstatement asyncstmts get name
boolean removepreparedstatement string name
return prepstmts remove name   null
boolean removecursorstatement string name
return cursorstmts remove name   null
boolean removecursor string name
return cursors remove name   null
void doprompt boolean newstatement  localizedoutput out  boolean multisessions
// check if tag should be increased...
if  multisessions    singlesession
singlesession   false
if  tag    null  tag     name
else tag   tag substring 0 tag length   1    name
// check if tag should be reduced...
if   multisessions     singlesession
singlesession   true
if  tag    null
else if  tag length      name length   2  tag   null
else tag   tag substring 0 tag length   2 name length
utilmain doprompt newstatement  out  tag
void close   throws sqlexception
if   conn isclosed
if    conn getautocommit      name    null      name startswith
conn rollback
conn close
prepstmts clear       should we check   close them individually?
cursorstmts clear
cursors clear
asyncstmts clear
conn   null