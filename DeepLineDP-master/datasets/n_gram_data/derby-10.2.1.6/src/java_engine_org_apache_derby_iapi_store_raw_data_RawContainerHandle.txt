/*
derby - class org.apache.derby.iapi.store.raw.data.rawcontainerhandle
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi store raw data
import org apache derby iapi store raw containerhandle
import org apache derby iapi store raw page
import org apache derby iapi store raw log loginstant
import org apache derby iapi error standardexception
import org apache derby iapi util bytearray
/**
rawcontainerhandle is the form of containerhandle that is used within
the raw store.  this allows the raw store to have a handle on dropped
container without exposing this to the external interface, which is not
allowed to get back a handle on a dropped container
*/
public interface rawcontainerhandle extends containerhandle
/** a container can be in 4 states:
non_existent - this is represented by a null containerhandle
normal - this is the normal case, container has been created and is not dropped.
dropped - container has been dropped, but is not known whether the drop
has been committed or not
committed_drop - container has been dropped and has committed.  to
everyone else except recovery, this state is equivalent
to non_existent
*/
public static final int normal   1
public static final int dropped   2
public static final int committed_drop   4
/**
return the status of the container - one of normal, dropped, committed_drop.
@exception standardexception  standard cloudscape exception policy
*/
public int getcontainerstatus   throws standardexception
/**
remove the container.
@exception standardexception  standard cloudscape exception policy
*/
public void removecontainer loginstant instant  throws standardexception
/**
if drop is true, drop the container.  if drop is false, un-drop the
container
@exception standardexception  standard cloudscape exception policy
*/
public void dropcontainer loginstant instant  boolean drop  throws standardexception
/**
get the logged container version
@exception standardexception  standard cloudscape exception policy
*/
public long getcontainerversion   throws standardexception
/**
return a page that represents any page - alloc page, valid page, free page,
dealloced page etc.
@exception standardexception standard cloudscape error policy
*/
public page getanypage long pagenumber  throws standardexception
/** backup restore support */
/**
recreate a page for redo recovery.
used during redo recovery while trying to apply log records which
are creating the page.
@exception standardexception standard cloudscape error policy
*/
public page recreatepageforredorecovery
int     pageformat
long    pagenumber
long    pageoffset
throws standardexception
/**
log all information necessary to recreate the container during a load
tran.
@exception standardexception standard cloudscape error policy
*/
public bytearray logcreatecontainerinfo   throws standardexception
/**
the container is about to be modified.
loggable actions use this to make sure the container gets cleaned if a
checkpoint is taken after any log record is sent to the log stream but
before the container is actually dirtied.
@exception standardexception standard cloudscape error policy
*/
public void predirty boolean predirtyon  throws standardexception
/**
* create encrypted version of the container with the
* user specified encryption properties.
* @param newfilepath file to store the new encrypted version of the container
* @exception standardexception	standard cloudscape error policy
*/
public void encryptcontainer string newfilepath  throws standardexception