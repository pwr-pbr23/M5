/*
derby - class org.apache.derby.iapi.types.sqlbit
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi types
import org apache derby iapi reference sqlstate
import org apache derby iapi reference limits
import org apache derby iapi services io arrayinputstream
import org apache derby iapi types datatypedescriptor
import org apache derby iapi types datavaluedescriptor
import org apache derby iapi types typeid
import org apache derby iapi types bitdatavalue
import org apache derby iapi types datavaluedescriptor
import org apache derby iapi types concatabledatavalue
import org apache derby iapi types variablesizedatavalue
import org apache derby iapi error standardexception
import org apache derby iapi services io formatidutil
import org apache derby iapi services io storedformatids
import org apache derby iapi services io streamstorable
import org apache derby iapi services io formatidinputstream
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi types booleandatavalue
import org apache derby iapi types stringdatavalue
import org apache derby iapi types numberdatavalue
import org apache derby iapi services cache classsize
import org apache derby iapi util stringutil
import org apache derby iapi types sqlinteger
import java io objectoutput
import java io objectinput
import java io ioexception
import java io inputstream
import java sql resultset
import java sql sqlexception
/**
* sqlbit represents the sql type char for bit data
*/
public class sqlbit
extends sqlbinary
/**
*
* @exception standardexception		thrown on error
*/
public object	getobject   throws standardexception
return getbytes
public string gettypename
return typeid bit_name
/**
* return max memory usage for a sql bit
*/
int getmaxmemoryusage
return limits db2_char_maxwidth
/*
* storable interface, implies externalizable, typedformat
*/
/**
return my format identifier.
@see org.apache.derby.iapi.services.io.typedformat#gettypeformatid
*/
public int gettypeformatid
return storedformatids sql_bit_id
/** @see datavaluedescriptor#getnewnull */
public datavaluedescriptor getnewnull
return new sqlbit
/**
* obtain the value using getbytes. this works for all for bit data types.
* getting a stream is problematic as any other getxxx() call on the resultset
* will close the stream we fetched. therefore we have to create the value in-memory
* as a byte array.
* @see datavaluedescriptor#setvaluefromresultset
*
* @exception sqlexception		thrown on error
*/
public final void setvaluefromresultset resultset resultset  int colnumber
boolean isnullable
throws sqlexception
setvalue resultset getbytes colnumber
/*
* datavaluedescriptor interface
*/
/** @see datavaluedescriptor#typeprecedence */
public int typeprecedence
return typeid bit_precedence
/**
* set the value from an non-null object.
*/
final void setobject object thevalue
throws standardexception
setvalue  byte  thevalue
/*
* constructors
*/
/**
no-arg constructor, required by formattable.
*/
public sqlbit
public sqlbit byte val
datavalue   val
/**
* normalization method - this method may be called when putting
* a value into a sqlbit, for example, when inserting into a sqlbit
* column.  see normalizeresultset in execution.
*
* @param desiredtype	the type to normalize the source column to
* @param source		the value to normalize
*
* @exception standardexception				thrown for null into
*											non-nullable column, and for
*											truncation error
*/
public void normalize
datatypedescriptor desiredtype
datavaluedescriptor source
throws standardexception
int		desiredwidth   desiredtype getmaximumwidth
sqlbinary  this  setvalue source getbytes
setwidth desiredwidth  0  true
/**
* set the width of the to the desired value.  used
* when casting.  ideally we'd recycle normalize(), but
* the behavior is different (we issue a warning instead
* of an error, and we aren't interested in nullability).
*
* @param desiredwidth	the desired length
* @param desiredscale	the desired scale (ignored)
* @param errorontrunc	throw error on truncation
*
* @exception standardexception		thrown on non-zero truncation
*		if errorontrunc is true
*/
public void setwidth int desiredwidth
int desiredscale 	   ignored
boolean errorontrunc
throws standardexception
/*
** if the input is null, nothing to do.
*/
if  getvalue      null
return
int sourcewidth   datavalue length
/*
** if the input is shorter than the desired type,
** then pad with blanks to the right length.
*/
if  sourcewidth < desiredwidth
byte actualdata   new byte
system arraycopy datavalue  0  actualdata  0  datavalue length
java util arrays fill actualdata  datavalue length  actualdata length  sqlbinary pad
datavalue   actualdata
/*
** truncation?
*/
else if  sourcewidth > desiredwidth
if  errorontrunc
// error if truncating non pad characters.
for  int i   desiredwidth  i < datavalue length  i
if  datavalue    sqlbinary pad
throw standardexception newexception sqlstate lang_string_truncation  gettypename
stringutil formatforprint this tostring
string valueof desiredwidth
//else
//{
// resolve: when we have warnings, issue a warning if
// truncation of non-zero bits will occur
//}
/*
** truncate to the desired width.
*/
byte shrunkdata   new byte
system arraycopy datavalue  0  shrunkdata  0  desiredwidth
datavalue   shrunkdata