/*
derby - class org.apache.derby.impl.store.access.btree.index.b2irowlocking2
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl store access btree index
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi error standardexception
import org apache derby iapi store access conglomerate transactionmanager
import org apache derby iapi store access conglomeratecontroller
import org apache derby iapi types rowlocation
import org apache derby iapi store access transactioncontroller
import org apache derby iapi store raw lockingpolicy
import org apache derby iapi store raw page
import org apache derby iapi store raw recordhandle
import org apache derby iapi store raw transaction
import org apache derby iapi types datavaluedescriptor
import org apache derby impl store access btree btree
import org apache derby impl store access btree btreelockingpolicy
import org apache derby impl store access btree btreerowposition
import org apache derby impl store access btree controlrow
import org apache derby impl store access btree leafcontrolrow
import org apache derby impl store access btree openbtree
import org apache derby impl store access btree waiterror
/**
the btree locking policy which implements read committed isolation level.
it inherits all functionality from b2irowlockingrr (repeatable read) except
that it releases read locks after obtaining them.  it provides a single
implementation of unlockscanrecordafterread() which releases a read lock
after it has been locked and processed.
**/
class b2irowlocking2 extends b2irowlockingrr implements btreelockingpolicy
/**************************************************************************
* constructors for this class:
**************************************************************************
*/
b2irowlocking2
transaction             rawtran
int                     lock_level
lockingpolicy           locking_policy
conglomeratecontroller  base_cc
openbtree               open_btree
super rawtran  lock_level  locking_policy  base_cc  open_btree
/**************************************************************************
* public methods of this class:
**************************************************************************
*/
/**
* release read lock on a row.
*
* @param forupdate         is the scan for update or for read only.
*
**/
public void unlockscanrecordafterread
btreerowposition        pos
boolean                 forupdate
throws standardexception
if  sanitymanager debug
sanitymanager assert open_btree    null
sanitymanager assert pos current_leaf    null
sanitymanager assert
pos current_lock_row_loc    null
sanitymanager assert
pos current_lock_row_loc isnull
// always unlock in read committed, so pass false for qualified arg.
base_cc unlockrowafterread pos current_lock_row_loc  forupdate  false