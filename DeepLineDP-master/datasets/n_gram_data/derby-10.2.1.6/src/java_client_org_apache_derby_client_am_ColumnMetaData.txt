/*
derby - class org.apache.derby.client.am.columnmetadata
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby client am
import java sql sqlexception
import org apache derby iapi reference drdaconstants
import org apache derby iapi reference jdbc30translation
import org apache derby shared common reference sqlstate
// under jdbc 2, we must new up our parameter meta data as column meta data instances
// once we move to jdk 1.4 pre-req, create a resultsetmetadata class and make this class abstract
public class columnmetadata implements java sql resultsetmetadata
public int columns_
public boolean nullable_
// although this is describe information, it is tagged transient for now becuase it is not currently used.
transient public int singlemixedbyteordouble_     1 means single  2 means double  3 means mixed byte  0 not applicable
// all of the following state data comes from the sqlda reply.
//data from sqldhgrp
public short sqldhold_
public short sqldreturn_
public short sqldscroll_
public short sqldsensitive_
public short sqldfcode_
public short sqldkeytype_
public string sqldrdbnam_     catalog name  not used by driver  placeholder only
public string sqldschema_     schema name  not used by driver  placeholder only
//data comes from sqldagrp
public int sqlprecision_     adjusted sqllen
public int sqlscale_
public long sqllength_      this is maximum length for varchar fields
// these are the derby sql types, for use only by resultsetmetadata, other code should use jdbctypes_.
// sqltypes_ is currently not set for input column meta data.
public int sqltype_
public int sqlccsid_
// with the exception of sqlnames_ and sqlxparmmode_, the following members are only allocated when needed
//data from sqldoptgrp
public string sqlname_       column name  pre allocated
public string sqllabel_      column label
public short sqlunnamed_
public string sqlcomment_
//data from sqldxgrp
public short sqlxkeymem_
public short sqlxgenerated_
public short sqlxparmmode_     pre allocated
public string sqlxcorname_
public string sqlxname_
public string sqlxbasename_      table name
public int sqlxupdatable_
public string sqlxschema_        schema name
public string sqlxrdbnam_        catalog name
//-----------------------------transient state--------------------------------
// for performance only, not part of logical model.
public transient int protocoltypescache_   null
public transient java util hashtable protocoltypetooverridelidmapping_   null
public transient java util arraylist mddoverridearray_   null
public transient int types_
public transient int clientparamtertype_
public transient logwriter logwriter_
// only set on execute replies, this is not describe information.
// only used for result set meta data.
public transient int resultsetconcurrency_
transient private java util hashtable columnnametoindexcache_   null
transient private boolean statementclosed_   false
void markclosed
statementclosed_   true
nulldataforgc
}
void checkforclosedstatement   throws sqlexception
// agent_.checkfordeferredexceptions();
if  statementclosed_
throw new sqlexception logwriter_
new clientmessageid  sqlstate lang_statement_closed_no_reason
}
}
//---------------------navigational members-----------------------------------
//---------------------constructors/finalizer---------------------------------
// called by netcolumnmetadata constructor before #columns is parsed out yet.
public columnmetadata logwriter logwriter
logwriter_   logwriter
}
// for creating column meta data when describe input is not available.
// the upper bound that is passed in is determined by counting the number of parameter markers.
// called by preparedstatement.flowpreparestatement() and flowdescribeinputoutput()
// only when describe input is not available.
public columnmetadata logwriter logwriter  int upperbound
logwriter_   logwriter
initializecache upperbound
}
public void initializecache int upperbound
columns_   upperbound
nullable_   new boolean
types_   new int
clientparamtertype_   new int
singlemixedbyteordouble_   new int     1 means single  2 means double  3 means mixed byte  0 not applicable
sqlprecision_   new int
sqlscale_   new int
sqllength_   new long
sqltype_   new int
sqlccsid_   new int
sqlname_   new string
sqlxparmmode_   new short
}
protected void finalize   throws java lang throwable
super finalize
}
//--------------------abstract material layer call-down methods-----------------
//------------------material layer event callback methods-----------------------
// ---------------------------jdbc 1------------------------------------------
public int getcolumncount   throws sqlexception
try
checkforclosedstatement
return columns_
}
catch   sqlexception e
throw e getsqlexception
}
}
public boolean isautoincrement int column  throws sqlexception
try
checkforclosedstatement
checkforvalidcolumnindex column
return false
}
catch   sqlexception e
throw e getsqlexception
}
}
public boolean iscasesensitive int column  throws sqlexception
try
checkforclosedstatement
checkforvalidcolumnindex column
//return true if the sqltype is char, varchar, logvarchar or clob
int type   types_
return
type    types char
type    types varchar
type    types longvarchar
type    types clob
}
catch   sqlexception e
throw e getsqlexception
}
}
// all searchable except distinct
public boolean issearchable int column  throws sqlexception
try
checkforclosedstatement
checkforvalidcolumnindex column
return true
}
catch   sqlexception e
throw e getsqlexception
}
}
public boolean iscurrency int column  throws sqlexception
try
checkforclosedstatement
checkforvalidcolumnindex column
return false
}
catch   sqlexception e
throw e getsqlexception
}
}
public int isnullable int column  throws sqlexception
try
checkforclosedstatement
checkforvalidcolumnindex column
if  nullable_
return java sql resultsetmetadata columnnullable
else
return java sql resultsetmetadata columnnonulls
}
}
catch   sqlexception e
throw e getsqlexception
}
}
public boolean issigned int column  throws sqlexception
try
checkforclosedstatement
checkforvalidcolumnindex column
//return true only if the sqltype is smallint, int, bigint, float, real, double, numeric or decimal
int type   types_
return
type    types smallint
type    types integer
type    types bigint
type    java sql types float
type    types real
type    types double
type    java sql types numeric
type    types decimal
}
catch   sqlexception e
throw e getsqlexception
}
}
public int getcolumndisplaysize int column  throws sqlexception
try
checkforclosedstatement
checkforvalidcolumnindex column
int jdbctype   types_
switch  jdbctype
case types integer
return 11
case types smallint
return 6
case types bigint
return 20
case types real
return 13
case types double
case java sql types float
return 22
case types decimal
case java sql types numeric
// there are 3 possible cases with respect to finding the correct max width for decimal type.
// 1. if scale = 0, only sign should be added to precision.
// 2. scale = precision, 3 should be added to precision for sign, decimal and an additional char '0'.
// 3. precision > scale > 0, 2 should be added to precision for sign and decimal.
int scale   getscale column
int precision   getprecision column
return  scale    0  ?  precision   1      scale    precision  ?  precision   3     precision   2
case types char
case types varchar
case types longvarchar
case types clob
return  int  sqllength_
case types date
return 10
case types time
return 8
case types timestamp
return 26
case types binary
case types varbinary
case types longvarbinary
case types blob
return  int   2   sqllength_      eg    represents just one byte
default
throw new sqlexception logwriter_
new clientmessageid  sqlstate unsupported_type
}
}
catch   sqlexception e
throw e getsqlexception
}
}
public string getcolumnlabel int column  throws sqlexception
try
checkforclosedstatement
checkforvalidcolumnindex column
// return labels if label is turned on, otherwise, return column name
if  sqllabel_    null    sqllabel_    null
return sqllabel_
}
if  sqlname_    null    sqlname_    null
assigncolumnname column
}
return sqlname_
}
catch   sqlexception e
throw e getsqlexception
}
}
public string getcolumnname int column  throws sqlexception
try
checkforclosedstatement
checkforvalidcolumnindex column
// the javadoc and jdbc book explicitly state that the empty string ("") is returned if "not applicable"
// for the following methods:
//   getschemaname()
//   gettablename()
//   getcatalogname()
// since the empty string is a valid string and is not really a proper table name, schema name, or catalog name,
// we're not sure why the empty string was chosen over null, except possibly to be friendly to lazy jdbc apps
// that may not be checking for nulls, thereby minimizing potential npe's.
// by induction, it would make sense to return the empty string when column name is not available/applicable.
//
// the jdbc specification contains blanket statements about sql compliance levels,
// so elaboration within the jdbc specification is often bypassed.
// personally, i would prefer to return java null for all the not-applicable cases,
// but it appears that we have precedent for the empty ("") string.
//
// we assume a straightforward induction from jdbc spec that the column name be "" (empty)
// in preference to null or null for the not applicable case.
//
if  sqlname_    null    sqlname_    null
assigncolumnname column
}
return sqlname_
}
catch   sqlexception e
throw e getsqlexception
}
}
public string getschemaname int column  throws sqlexception
try
checkforclosedstatement
checkforvalidcolumnindex column
if  sqlxschema_    null    sqlxschema_    null
return       per jdbc spec
}
return sqlxschema_
}
catch   sqlexception e
throw e getsqlexception
}
}
public int getprecision int column  throws sqlexception
try
checkforclosedstatement
checkforvalidcolumnindex column
int jdbctype   types_
switch  jdbctype
case java sql types numeric
case types decimal
return sqlprecision_
case types smallint
return 5
case types integer
return 10
case types bigint
return 19
case java sql types float
return 15
case types real
return 7      this is the number of signed digits for ieee float with mantissa 24  ie  2^24
case types double
return 15     this is the number of signed digits for ieee float with mantissa 24  ie  2^24
case types char
case types varchar
case types longvarchar
case types binary
case types varbinary
case types longvarbinary
case types clob
case types blob
return  int  sqllength_
case types date
return 10
case types time
return 8
case types timestamp
return 26
default
throw new sqlexception logwriter_
new clientmessageid  sqlstate unsupported_type
}
}
catch   sqlexception e
throw e getsqlexception
}
}
public int getscale int column  throws sqlexception
try
checkforclosedstatement
checkforvalidcolumnindex column
// we get the scale from the sqlda as returned by derby, but derby does not return the ansi-defined
// value of scale 6 for timestamp.
//
//   the jdbc drivers should hardcode this info as a short/near term solution.
//
if  types_    types timestamp
return 6
}
return sqlscale_
}
catch   sqlexception e
throw e getsqlexception
}
}
public string gettablename int column  throws sqlexception
try
checkforclosedstatement
checkforvalidcolumnindex column
if  sqlxbasename_    null    sqlxbasename_    null
return       per jdbc spec
}
return sqlxbasename_
}
catch   sqlexception e
throw e getsqlexception
}
}
/**
* what's a column's table's catalog name?
*
* @param column the first column is 1, the second is 2, ...
*
* @return column name or "" if not applicable.
*
* @throws sqlexception thrown on failure
*/
public string getcatalogname int column  throws sqlexception
try
checkforclosedstatement
checkforvalidcolumnindex column
return
}
catch   sqlexception e
throw e getsqlexception
}
}
public int getcolumntype int column  throws sqlexception
try
checkforclosedstatement
checkforvalidcolumnindex column
return types_
}
catch   sqlexception e
throw e getsqlexception
}
}
public string getcolumntypename int column  throws sqlexception
try
checkforclosedstatement
checkforvalidcolumnindex column
int jdbctype   types_
// so these all come back zero for downlevel servers in protocol.
// john is going to write some code to construct the sqltype_ array
// based on the protocol types from the query descriptor.
int sqltype   sqltype_
switch  sqltype
case drdaconstants db2_sqltype_date
case drdaconstants db2_sqltype_ndate
return
case drdaconstants db2_sqltype_time
case drdaconstants db2_sqltype_ntime
return
case drdaconstants db2_sqltype_timestamp
case drdaconstants db2_sqltype_ntimestamp
return
case drdaconstants db2_sqltype_blob
case drdaconstants db2_sqltype_nblob
return
case drdaconstants db2_sqltype_clob
case drdaconstants db2_sqltype_nclob
return
case drdaconstants db2_sqltype_varchar
case drdaconstants db2_sqltype_nvarchar
if  jdbctype    types varbinary
return
else
return
}
case drdaconstants db2_sqltype_char
case drdaconstants db2_sqltype_nchar
if  jdbctype    types binary
return
else
return
}
case drdaconstants db2_sqltype_long
case drdaconstants db2_sqltype_nlong
if  jdbctype    types longvarbinary
return
else
return
}
case drdaconstants db2_sqltype_cstr
case drdaconstants db2_sqltype_ncstr
return
case drdaconstants db2_sqltype_float
case drdaconstants db2_sqltype_nfloat
if  jdbctype    types double
return
}
if  jdbctype    types real
return
}
case drdaconstants db2_sqltype_decimal
case drdaconstants db2_sqltype_ndecimal
return
case drdaconstants db2_sqltype_bigint
case drdaconstants db2_sqltype_nbigint
return
case drdaconstants db2_sqltype_integer
case drdaconstants db2_sqltype_ninteger
return
case drdaconstants db2_sqltype_small
case drdaconstants db2_sqltype_nsmall
return
case drdaconstants db2_sqltype_numeric
case drdaconstants db2_sqltype_nnumeric
return
default
throw new sqlexception logwriter_
new clientmessageid  sqlstate unsupported_type
}
}
catch   sqlexception e
throw e getsqlexception
}
}
public boolean isreadonly int column  throws sqlexception
try
checkforclosedstatement
checkforvalidcolumnindex column
if  sqlxupdatable_    null
return  resultsetconcurrency_    java sql resultset concur_read_only      if no extended describe  return resultset's concurrecnty
}
return sqlxupdatable_    0     protocol 0 means not updatable  1 means updatable
}
catch   sqlexception e
throw e getsqlexception
}
}
public boolean iswritable int column  throws sqlexception
try
checkforclosedstatement
checkforvalidcolumnindex column
if  sqlxupdatable_    null
return  resultsetconcurrency_    java sql resultset concur_updatable      if no extended describe  return resultset's concurrency
}
return sqlxupdatable_    1     protocol 0 means not updatable  1 means updatable
}
catch   sqlexception e
throw e getsqlexception
}
}
public boolean isdefinitelywritable int column  throws sqlexception
try
checkforclosedstatement
checkforvalidcolumnindex column
if  sqlxupdatable_    null
return false
}
return sqlxupdatable_    1     protocol 0 means not updatable  1 means updatable
}
catch   sqlexception e
throw e getsqlexception
}
}
//--------------------------jdbc 2.0-----------------------------------
public string getcolumnclassname int column  throws sqlexception
try
checkforclosedstatement
checkforvalidcolumnindex column
int jdbctype   types_
switch  jdbctype
case java sql types bit
return
case java sql types tinyint
return
case types smallint
return
case types integer
return
case types bigint
return
case java sql types float
return
case types real
return
case types double
return
case java sql types numeric
case types decimal
return
case types char
case types varchar
case types longvarchar
return
case types date
return
case types time
return
case types timestamp
return
case types binary
case types varbinary
case types longvarbinary
return
case java sql types struct
return
case java sql types array
return
case types blob
return
case types clob
return
case java sql types ref
return
default
throw new sqlexception logwriter_
new clientmessageid  sqlstate unsupported_type
}
}
catch   sqlexception e
throw e getsqlexception
}
}
//----------------------------helper methods----------------------------------
void checkforvalidcolumnindex int column  throws sqlexception
if  column < 1    column > columns_
throw new sqlexception logwriter_
new clientmessageid  sqlstate lang_invalid_column_position
new integer  column   new integer columns_
}
}
// if the input parameter has been set, return true, else return false.
private boolean isparametermodeguessedasaninput int parameterindex
if  sqlxparmmode_    java sql parametermetadata parametermodein
sqlxparmmode_    java sql parametermetadata parametermodeinout
return true
}
return false
}
// does out parm registration rely on extended describe?
// if the output parameter has been registered, return true, else return false.
public boolean isparametermodeguessedasoutput int parameterindex
return sqlxparmmode_ >  java sql parametermetadata parametermodeinout
}
/** this method does not appear to be in use -- davidvc@apache.org
// only called when column meta data is not described. called by setxxx methods.
public void guessinputparametermetadata(int parameterindex,
int jdbctype) throws sqlexception {
guessinputparametermetadata(parameterindex, jdbctype, 0);
}
*/
private void setparmmodeforinputparameter int parameterindex
if  sqlxparmmode_    java sql parametermetadata parametermodeout
sqlxparmmode_   java sql parametermetadata parametermodeinout
else if  sqlxparmmode_    java sql parametermetadata parametermodeunknown
sqlxparmmode_   java sql parametermetadata parametermodein
}
}
private void setparmmodeforoutputparameter int parameterindex
if  sqlxparmmode_    java sql parametermetadata parametermodein
sqlxparmmode_   java sql parametermetadata parametermodeinout
else if  sqlxparmmode_    java sql parametermetadata parametermodeunknown
sqlxparmmode_   java sql parametermetadata parametermodeout
}
}
private boolean iscompatibledrivertypes int registeredtype  int guessedinputtype
switch  registeredtype
case types char
case types varchar
case types longvarchar
return guessedinputtype    types char    guessedinputtype    types varchar    guessedinputtype    types longvarchar
case types binary
case types varbinary
case types longvarbinary
return guessedinputtype    types binary    guessedinputtype    types varbinary    guessedinputtype    types longvarbinary
default
return registeredtype    guessedinputtype
}
}
// only used when describe information is not available.
private int getinternaltypeforguessedorregisteredjdbctype int guessedorregisteredjdbctype  throws sqlexception
switch  guessedorregisteredjdbctype
case java sql types bit
case java sql types tinyint
case java sql types smallint
return types smallint
case java sql types integer
return types integer
case java sql types bigint
return types bigint
case java sql types real
return types real
case java sql types double
case java sql types float
return types double
case java sql types decimal
case java sql types numeric
return types decimal
case java sql types date
return types date
case java sql types time
return types time
case java sql types timestamp
return types timestamp
case java sql types char
return types char
case java sql types varchar
return types varchar
case java sql types longvarchar
return types longvarchar
case java sql types binary
return types binary
case java sql types varbinary
return types varbinary
case java sql types longvarbinary
return types longvarbinary
case java sql types blob
return types blob
case java sql types clob
return types clob
case java sql types null
case java sql types other
throw new sqlexception logwriter_
new clientmessageid  sqlstate unsupported_type
default
throw new sqlexception logwriter_
new clientmessageid  sqlstate unsupported_type
}
}
public void setlogwriter logwriter logwriter
logwriter_   logwriter
}
private void nulldataforgc
columns_   0
nullable_   null
types_   null
singlemixedbyteordouble_   null
sqldrdbnam_   null
sqldschema_   null
sqlprecision_   null
sqlscale_   null
sqllength_   null
sqltype_   null
sqlccsid_   null
sqlname_   null
sqllabel_   null
sqlunnamed_   null
sqlcomment_   null
sqlxkeymem_   null
sqlxgenerated_   null
sqlxparmmode_   null
sqlxcorname_   null
sqlxname_   null
sqlxbasename_   null
sqlxupdatable_   null
sqlxschema_   null
sqlxrdbnam_   null
clientparamtertype_   null
types_   null
}
public boolean haslobcolumns
for  int i   0  i < columns_  i
switch  org apache derby client am utils getnonnullablesqltype sqltype_
case drdaconstants db2_sqltype_blob
case drdaconstants db2_sqltype_clob
return true
default
break
}
}
return false
}
// cache the hashtable in columnmetadata.
int findcolumnx string columnname  throws sqlexception
// create cache if it doesn't exist
if  columnnametoindexcache_    null
columnnametoindexcache_   new java util hashtable
else      check cache for mapping
integer index    integer  columnnametoindexcache_ get columnname
if  index    null
return index intvalue
}
}
// ok, we'll have to search the metadata
for  int col   0  col < this columns_  col
if  this sqlname_    null       sqlname comes from an optional group
this sqlname_    null
this sqlname_ equalsignorecase columnname
// found it, add it to the cache
columnnametoindexcache_ put columnname  new integer col   1
return col   1
}
}
throw new sqlexception logwriter_
new clientmessageid  sqlstate invalid_column_name   columnname
}
// assign ordinal position as the column name if null.
void assigncolumnname int column
if  columnnametoindexcache_    null
columnnametoindexcache_   new java util hashtable
}
string columnname    new integer column   tostring
columnnametoindexcache_ put columnname  new integer column
sqlname_   columnname
}
public boolean columnisnotinunicode int index
return  sqlccsid_    1208
}
}