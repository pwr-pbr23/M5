/*
derby - class org.apache.derby.iapi.types.rawtobinaryformatstream
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi types
import java io inputstream
import java io ioexception
import java io eofexception
import org apache derby iapi services io derbyioexception
import org apache derby iapi services io limitinputstream
import org apache derby iapi services i18n messageservice
import org apache derby iapi reference sqlstate
/**
stream that takes a raw input stream and converts it
to the on-disk format of the binary types by prepending the
length of the value.
<p>
if the length of the stream is known then it is encoded
as the first bytes in the stream in the defined format.
<br>
if the length is unknown then the first four bytes will
be zero, indicating unknown length.
<br>
note: this stream cannot be re-used. once end of file is
reached, the next read call will throw an eofexception
@see sqlbinary
*/
public final class rawtobinaryformatstream extends limitinputstream
/**
* number of bytes of length encoding.
*
*/
private int encodedoffset
/**
* encoding of the length in bytes which will be
* seen as the first encodedlength.length bytes of
* this stream.
*/
private byte encodedlength
// flag to indicate the stream has already been read
// and eof reached
private boolean eof   false
/**
* the length of the stream.
* unknown if less than 0.
*/
private final int length
/**
* the maximum allowed length for the stream.
* no limit if less than 0.
*/
private final int maximumlength
/**
* the type of the column the stream is inserted into.
* used for length less streams, <code>null</code> if not in use.
*/
private final string typename
/**
* create a binary on-disk stream from the given <code>inputstream</code>.
*
* the on-disk stream prepends a length encoding, and validates that the
* actual length of the stream matches the specified length (as according
* to jdbc 3.0).
*
* @param in application's raw binary stream passed into jdbc layer
* @param length length of the stream
* @throws illegalargumentexception if <code>length</code> is negative.
*      this exception should never be exposed to the user, and seeing it
*      means a programming error exists in the code.
*/
public rawtobinaryformatstream inputstream in  int length
super in
if  length < 0
throw new illegalargumentexception
length
this length   length
this maximumlength    1
this typename   null
setlimit length
if  length <  31
encodedlength   new byte
encodedlength    byte   0x80    length   0xff
else if  length <  0xffff
encodedlength   new byte
encodedlength    byte  0xa0
encodedlength    byte  length >> 8
encodedlength    byte  length
else
encodedlength   new byte
encodedlength    byte  0xc0
encodedlength    byte  length >> 24
encodedlength    byte  length >> 16
encodedlength    byte  length >> 8
encodedlength    byte  length
/**
* create a binary on-disk stream from the given <code>inputstream</code>
* of unknown length.
*
* a limit is placed on the maximum length of the stream.
*
* @param in the application stream
* @param maximumlength maximum length of the column data is inserted into
* @param typename type name for the column data is inserted into
* @throws illegalargumentexception if maximum length is negative, or type
*      name is <code>null<code>. this exception should never be exposed
*      to the user, and seeing it means a programming error exists in the
*      code. although a missing type name is not critical, an exception is
*      is thrown to signal the intended use of this constructor.
*/
public rawtobinaryformatstream inputstream in
int maximumlength
string typename
super in
if  maximumlength < 0
throw new illegalargumentexception
maximumlength
if  typename    null
throw new illegalargumentexception
this length    1
this maximumlength   maximumlength
this typename   typename
// unknown length, four zero bytes.
encodedlength   new byte
setlimit maximumlength
/**
read from the wrapped stream prepending the intial bytes if needed.
if stream has been read, and eof reached, in that case any subsequent
read will throw an eofexception
*/
public int read   throws ioexception
if   eof
throw new eofexception messageservice gettextmessage
sqlstate stream_eof
if  encodedoffset < encodedlength length
return encodedlength   0xff
int ret   super read
if  ret     1
checksufficientdata
return ret
/**
jdbc 3.0 (from tutorial book) requires that an
input stream has the correct number of bytes in
the stream.
*/
private void checksufficientdata   throws ioexception
// if we reached here, then read call returned -1, and we
// have already reached the end of stream, so set eof=true
// so that subsequent reads on this stream will return an
// eofexception
eof   true
if   limitinplace
return
int remainingbytes   clearlimit
if  length >  1    remainingbytes > 0
throw new derbyioexception
messageservice gettextmessage
sqlstate set_stream_inexact_length_data
sqlstate set_stream_inexact_length_data
// if we had a limit try reading one more byte.
// jdbc 3.0 states the stream muct have the correct number of characters in it.
if  remainingbytes    0
int c
try
c   super read
catch  ioexception ioe
c    1
if  c     1
if  length >  1
// stream is not capped, and should have matched the
// specified length.
throw new derbyioexception
messageservice gettextmessage
sqlstate set_stream_inexact_length_data
sqlstate set_stream_inexact_length_data
else
// stream is capped, and has exceeded the maximum length.
throw new derbyioexception
messageservice gettextmessage
sqlstate lang_string_truncation
typename
string valueof maximumlength
sqlstate lang_string_truncation
/**
read from the wrapped stream prepending the intial bytes if needed.
if stream has been read, and eof reached, in that case any subsequent
read will throw an eofexception
*/
public int read byte b  int off  int len  throws ioexception
if   eof
throw new eofexception messageservice gettextmessage sqlstate stream_eof
int elen   encodedlength length   encodedoffset
if  elen    0
if  len < elen
elen   len
system arraycopy encodedlength  encodedoffset
b  off  elen
encodedoffset    elen
off    elen
len    elen
if  len    0
return elen
int realread   super read b  off  len
if  realread < 0
if  elen    0
return elen
checksufficientdata
return realread
return elen   realread