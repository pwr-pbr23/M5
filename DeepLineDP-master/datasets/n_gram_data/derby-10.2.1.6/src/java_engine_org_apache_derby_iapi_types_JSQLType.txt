/*
derby - class org.apache.derby.iapi.types.jsqltype
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi types
import org apache derby iapi services io storedformatids
import org apache derby iapi services io formatable
import java io ioexception
import java io objectinput
import java io objectoutput
/**
*	type descriptor which wraps all 3 kinds of types supported in cloudscape's
*	jsql language: sql types, java primitives, java classes.
*
*	this interface was originally added to support the serializing of workunit
*	signatures.
*
*
* @author rick
*/
public final class jsqltype implements formatable
///////////////////////////////////////////////////////////////////////
//
//	constants
//
///////////////////////////////////////////////////////////////////////
public	static	final	byte	sqltype			 	0
public	static	final	byte	java_class		 	1
public	static	final	byte	java_primitive	 	2
public	static	final	byte	not_primitive	 	 1
public	static	final	byte	boolean			 	0
public	static	final	byte	char			 	1
public	static	final	byte	byte			 	2
public	static	final	byte	short			 	3
public	static	final	byte	int				 	4
public	static	final	byte	long			 	5
public	static	final	byte	float			 	6
public	static	final	byte	double			 	7
// these two arrays are in the order of the primitive constants
static	private	final	string	wrapperclassnames
we can't serialize char  so we convert it to int
static	public	final	string	primitivenames
// here are the fields we serialize
private	byte				category   java_primitive
private	datatypedescriptor	sqltype
private	string				javaclassname
private	byte				primitivekind
///////////////////////////////////////////////////////////////////////
//
//	constructors
//
///////////////////////////////////////////////////////////////////////
/**
*	public 0-arg constructor for formatable machinery.
*/
public	jsqltype     initialize  int
/**
*	create a jsqltype from a sql type.
*
*	@param	sqltype	the sql type to wrap
*/
public	jsqltype
datatypedescriptor	sqltype
initialize  sqltype
/**
*	create a jsqltype given the name of a java primitive or java class.
*
*	@param	javaname	name of java primitive or class to wrap
*/
public	jsqltype
string	javaname
byte	primitiveid   getprimitiveid  javaname
if   primitiveid    not_primitive     initialize  primitiveid
else   initialize  javaname
/**
*	create a jsqltype for a java primitive.
*
*	@param	primitivekind	primitive to wrap
*/
public	jsqltype
byte	primitivekind
initialize  primitivekind
/**
*	what kind of type is this:
*
*	@return	one of the following: sqltype, java_primitive, java_class
*/
public	byte	getcategory     return category
/**
*	if this is a java_primitive, what is its name?
*
*	@return	boolean, int, ... if this is a java_primitive.
*				not_primitive if this is sqltype or java_class.
*/
public	byte	getprimitivekind     return primitivekind
/**
*	if this is a java_class, what is it's name?
*
*	@return	java class name if this is a java_class
*				null if this is sqltype or java_primitive
*/
public	string	getjavaclassname     return javaclassname
/**
*	what's our sqltype?
*
*	@return	the datatypedescriptor corresponding to this type
*
*/
public	datatypedescriptor	getsqltype
// might not be filled in if this is a java_class or java_primitive
if   sqltype    null
string	classname
if   category    java_class
classname   javaclassname
else
classname   getwrapperclassname  primitivekind
sqltype   datatypedescriptor getsqldatatypedescriptor  classname
return sqltype
///////////////////////////////////////////////////////////////////////
//
//	formatable behavior
//
///////////////////////////////////////////////////////////////////////
/**
* get the formatid which corresponds to this class.
*
*	@return	the formatid of this class
*/
public	int	gettypeformatid  	  return storedformatids jsqltypeimpl_id
/**
@see java.io.externalizable#readexternal
@exception ioexception thrown on error
@exception classnotfoundexception	thrown on error
*/
public void readexternal  objectinput in
throws ioexception  classnotfoundexception
byte	frozencategory   in readbyte
switch   frozencategory
case sqltype
initialize   datatypedescriptor  in readobject
break
case java_class
initialize   string  in readobject
break
case java_primitive
initialize  in readbyte
break
/**
@exception ioexception thrown on error
*/
public void writeexternal  objectoutput out
throws ioexception
out writebyte  category
switch   category
case sqltype
out writeobject  sqltype
break
case java_class
out writeobject  javaclassname
break
case java_primitive
out writebyte  primitivekind
break
///////////////////////////////////////////////////////////////////////
//
//	initialization minions
//
///////////////////////////////////////////////////////////////////////
private	void	initialize  byte primitivekind
initialize  java_primitive  null  null  primitivekind
private	void	initialize  datatypedescriptor sqltype
initialize  sqltype  sqltype  null  not_primitive
private	void	initialize  string javaclassname
initialize  java_class  null  javaclassname  not_primitive
/**
*	initialize this jsql type. minion of all constructors.
*
*	@param	category		sqltype, java_class, java_primitive
*	@param	sqltype			corresponding sql type if category=sqltype
*	@param	javaclassname	corresponding java class if category=java_class
*	@param	primitivekind	kind of primitive if category=java_primitive
*/
private	void	initialize
byte				category
datatypedescriptor	sqltype
string				javaclassname
byte				primitivekind
this category   category
this sqltype   sqltype
this javaclassname   javaclassname
this primitivekind   primitivekind
///////////////////////////////////////////////////////////////////////
//
//	general minions
//
///////////////////////////////////////////////////////////////////////
/**
*	gets the name of the java wrapper class corresponding to a primitive.
*
*	@param	primitive	boolean, int, ... etc.
*
*	@return	name of the java wrapper class corresponding to the primitive
*/
private	static string	getwrapperclassname
byte	primitive
if   primitive    not_primitive     return
return wrapperclassnames
/**
*	translate the name of a java primitive to an id
*
*	@param	name	name of primitive
*
*	@return	boolean, int, ... etc if the name is that of a primitive.
*			not_primitive otherwise
*/
private	static byte	getprimitiveid
string	name
for   byte ictr   boolean  ictr <  double  ictr
if   primitivenames equals  name       return ictr
return	not_primitive