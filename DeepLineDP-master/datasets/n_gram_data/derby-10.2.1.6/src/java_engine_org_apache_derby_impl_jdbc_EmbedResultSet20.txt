/*
derby - class org.apache.derby.impl.jdbc.embedresultset20
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl jdbc
import org apache derby iapi reference jdbc20translation
import org apache derby iapi reference sqlstate
import org apache derby iapi sql resultset
import org apache derby iapi sql execute execcursortablereference
import org apache derby iapi error standardexception
import org apache derby impl jdbc util
import org apache derby iapi sql conn languageconnectioncontext
import org apache derby iapi sql conn statementcontext
import org apache derby iapi types datavaluedescriptor
import java sql statement
import java sql sqlexception
import java sql types
/* ---- new jdbc 2.0 types ----- */
import java sql array
import java sql blob
import java sql clob
import java sql ref
import java math bigdecimal
import java net url
/**
* this class extends the embedresultset class in order to support new
* methods and classes that come with jdbc 2.0.
<p><b>supports</b>
<ul>
<li> jdbc 2.0/2.1
<li> jdbc 3.0
</ul>
*      @see org.apache.derby.impl.jdbc.embedresultset
*
*      @author francois
*/
public class embedresultset20
extends org apache derby impl jdbc embedresultset
//////////////////////////////////////////////////////////////
//
// constructors
//
//////////////////////////////////////////////////////////////
/**
* this class provides the glue between the derby
* resultset and the jdbc resultset, mapping calls-to-calls.
*/
public embedresultset20 org apache derby impl jdbc embedconnection conn
resultset resultstowrap
boolean formetadata
org apache derby impl jdbc embedstatement stmt
boolean isatomic
throws sqlexception
super conn  resultstowrap  formetadata  stmt  isatomic
/*
** methods using java.math.bigdecimal, not supported in jsr169
*/
/**
* get the value of a column in the current row as a java.lang.bigdecimal object.
*
* @param columnindex the first column is 1, the second is 2, ...
* @param scale the number of digits to the right of the decimal
* @return the column value; if the value is sql null, the result is null
* @exception sqlexception thrown on failure.
*/
public final bigdecimal getbigdecimal int columnindex  int scale
throws sqlexception
bigdecimal ret   getbigdecimal columnindex
if  ret    null
return ret setscale scale  bigdecimal round_half_down
return null
public final bigdecimal getbigdecimal int columnindex
throws sqlexception
checkifclosed
try
datavaluedescriptor dvd   getcolumn columnindex
if  wasnull   dvd isnull
return null
return org apache derby iapi types sqldecimal getbigdecimal dvd
catch  standardexception t
throw nostatechangeexception t
/**
* get the value of a column in the current row as a java.lang.bigdecimal object.
*
* @param columnname is the sql name of the column
* @param scale the number of digits to the right of the decimal
* @return the column value; if the value is sql null, the result is null
* @exception sqlexception thrown on failure.
*/
public final bigdecimal getbigdecimal string columnname  int scale
throws sqlexception
checkifclosed
return  getbigdecimal findcolumnname columnname   scale
/**
* jdbc 2.0
*
deprecated in jdbc 2.0, not supported by jcc.
* @exception sqlexception thrown on failure.
*/
public final java io inputstream getunicodestream int columnindex  throws sqlexception
throw util notimplemented
/**
deprecated in jdbc 2.0, not supported by jcc.
* @exception sqlexception thrown on failure.
*/
public final java io inputstream getunicodestream string columnname  throws sqlexception
throw util notimplemented
/**
* jdbc 2.0
*
* get the value of a column in the current row as a java.math.bigdecimal
* object.
*
* @exception sqlexception feature not implemented for now.
*/
public final bigdecimal getbigdecimal string columnname  throws sqlexception
checkifclosed
return getbigdecimal findcolumnname columnname
public void updatebigdecimal int columnindex  bigdecimal x
throws sqlexception
try
getdvdforcolumntobeupdated columnindex     setbigdecimal x
catch  standardexception t
throw nostatechangeexception t
/**
* jdbc 2.0
*
* update a column with an object value.
*
* the updatexxx() methods are used to update column values in the current
* row, or the insert row. the updatexxx() methods do not update the
* underlying database, instead the updaterow() or insertrow() methods are
* called to update the database.
*
* @param columnindex
*            the first column is 1, the second is 2, ...
* @param x
*            the new column value
* @exception sqlexception
*                if a database-access error occurs
*/
public void updateobject int columnindex  object x  throws sqlexception
//if the object x is the right datatype, this method will eventually call getdvdforcolumntobeupdated which will check for
//the read only resultset. but for other datatypes of x, we want to catch if this updateobject is being
//issued against a read only resultset. and that is the reason for call to checksbeforeupdateordelete here.
checksbeforeupdateordelete    columnindex
int coltype   getcolumntype columnindex
if  x instanceof bigdecimal
updatebigdecimal columnindex   bigdecimal  x
return
super updateobject columnindex  x
/**
* jdbc 2.0
*
* update a column with a bigdecimal value.
*
* the updatexxx() methods are used to update column values in the
* current row, or the insert row.  the updatexxx() methods do not
* update the underlying database, instead the updaterow() or insertrow()
* methods are called to update the database.
*
* @param columnname the name of the column
* @param x the new column value
* @exception sqlexception if a database-access error occurs
*/
public void updatebigdecimal string columnname  bigdecimal x
throws sqlexception
checkifclosed
updatebigdecimal findcolumnname columnname   x
/**
* jdbc 2.0
*
* returns the value of column @i as a java object.  use the
* param map to determine the class from which to construct data of
* sql structured and distinct types.
*
* @param columnindex the first column is 1, the second is 2, ...
* @param map the mapping from sql type names to java classes
* @return an object representing the sql value
* @exception sqlexception feature not implemented for now.
*/
public object getobject int columnindex  java util map map  throws sqlexception
checkifclosed
if  map    null
throw util generatecssqlexception sqlstate invalid_api_parameter map
if   map isempty
throw util notimplemented
// map is empty call the normal getobject method.
return getobject columnindex
/**
* jdbc 2.0
*
* get a ref(&lt;structured-type&gt;) column.
*
* @param i the first column is 1, the second is 2, ...
* @return an object representing data of an sql ref type
* @exception sqlexception feature not implemented for now.
*/
public ref getref int i  throws sqlexception
throw util notimplemented
/**
* jdbc 2.0
*
* get an array column.
*
* @param i the first column is 1, the second is 2, ...
* @return an object representing an sql array
* @exception sqlexception feature not implemented for now.
*/
public array getarray int i  throws sqlexception
throw util notimplemented
/**
* jdbc 2.0
*
* returns the value of column @i as a java object.  use the
* param map to determine the class from which to construct data of
* sql structured and distinct types.
*
* @param colname the column name
* @param map the mapping from sql type names to java classes
* @return an object representing the sql value
* @exception sqlexception feature not implemented for now.
*/
public object getobject string colname  java util map map
throws sqlexception
checkifclosed
return getobject findcolumn colname  map
/**
* jdbc 2.0
*
* get a ref(&lt;structured-type&gt;) column.
*
* @param colname the column name
* @return an object representing data of an sql ref type
* @exception sqlexception feature not implemented for now.
*/
public ref getref string colname  throws sqlexception
throw util notimplemented
/**
* jdbc 2.0
*
* get an array column.
*
* @param colname the column name
* @return an object representing an sql array
* @exception sqlexception feature not implemented for now.
*/
public array getarray string colname  throws sqlexception
throw util notimplemented
/**
following methods are for the new jdbc 3.0 methods in java.sql.resultset
(see the jdbc 3.0 spec). we have the jdbc 3.0 methods in local20
package, so we don't have to have a new class in local30.
the new jdbc 3.0 methods don't make use of any new jdbc3.0 classes and
so this will work fine in jdbc2.0 configuration.
*/
/////////////////////////////////////////////////////////////////////////
//
//      jdbc 3.0        -       new public methods
//
/////////////////////////////////////////////////////////////////////////
/**
* jdbc 3.0
*
* updates the designated column with a java.sql.ref value. the updater methods are
* used to update column values in the current row or the insert row. the
* updater methods do not update the underlying database; instead the updaterow
* or insertrow methods are called to update the database.
*
* @param columnindex - the first column is 1, the second is 2
* @param x - the new column value
* @exception sqlexception feature not implemented for now.
*/
public void updateref int columnindex  ref x
throws sqlexception
throw util notimplemented
/**
* jdbc 3.0
*
* updates the designated column with a java.sql.ref value. the updater methods are
* used to update column values in the current row or the insert row. the
* updater methods do not update the underlying database; instead the updaterow
* or insertrow methods are called to update the database.
*
* @param columnname - the sql name of the column
* @param x - the new column value
* @exception sqlexception feature not implemented for now.
*/
public void updateref string columnname  ref x
throws sqlexception
throw util notimplemented
/**
* jdbc 3.0
*
* updates the designated column with a java.sql.array value. the updater methods are
* used to update column values in the current row or the insert row. the
* updater methods do not update the underlying database; instead the updaterow
* or insertrow methods are called to update the database.
*
* @param columnindex - the first column is 1, the second is 2
* @param x - the new column value
* @exception sqlexception feature not implemented for now.
*/
public void updatearray int columnindex  array x
throws sqlexception
throw util notimplemented
/**
* jdbc 3.0
*
* updates the designated column with a java.sql.array value. the updater methods are
* used to update column values in the current row or the insert row. the
* updater methods do not update the underlying database; instead the updaterow
* or insertrow methods are called to update the database.
*
* @param columnname - the sql name of the column
* @param x - the new column value
* @exception sqlexception feature not implemented for now.
*/
public void updatearray string columnname  array x
throws sqlexception
throw util notimplemented