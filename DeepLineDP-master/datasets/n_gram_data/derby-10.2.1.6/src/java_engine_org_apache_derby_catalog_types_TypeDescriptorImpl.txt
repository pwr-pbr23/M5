/*
derby - class org.apache.derby.catalog.types.typedescriptorimpl
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby catalog types
import org apache derby iapi services io storedformatids
import org apache derby iapi services io formatable
import org apache derby catalog typedescriptor
import java io objectoutput
import java io objectinput
import java io ioexception
import java sql types
public class typedescriptorimpl implements typedescriptor  formatable
/********************************************************
**
**	this class implements formatable. that means that it
**	can write itself to and from a formatted stream. if
**	you add more fields to this class, make sure that you
**	also write/read them with the writeexternal()/readexternal()
**	methods.
**
**	if, inbetween releases, you add more fields to this class,
**	then you should bump the version number emitted by the gettypeformatid()
**	method.
**
********************************************************/
private basetypeidimpl		typeid
private int						precision
private int						scale
private boolean					isnullable
private int						maximumwidth
/**
* public niladic constructor. needed for formatable interface to work.
*
*/
public	typedescriptorimpl
/**
* constructor for use with numeric types
*
* @param typeid	the typeid of the type being described
* @param precision	the number of decimal digits.
* @param scale		the number of digits after the decimal point.
* @param isnullable	true means it could contain null, false means
*			it definitely cannot contain null.
* @param maximumwidth	the maximum number of bytes for this datatype
*/
public typedescriptorimpl
basetypeidimpl typeid
int precision
int scale
boolean isnullable
int maximumwidth
this typeid   typeid
this precision   precision
this scale   scale
this isnullable   isnullable
this maximumwidth   maximumwidth
/**
* constructor for use with non-numeric types
*
* @param typeid	the typeid of the type being described
* @param isnullable	true means it could contain null, false means
*			it definitely cannot contain null.
* @param maximumwidth	the maximum number of bytes for this datatype
*/
public typedescriptorimpl
basetypeidimpl typeid
boolean isnullable
int maximumwidth
this typeid   typeid
this isnullable   isnullable
this maximumwidth   maximumwidth
/**
* constructor for internal uses only.
* (this is useful when the precision and scale are potentially wider than
* those in the source, like when determining the dominant data type.)
*
* @param source	the dtsi to copy
* @param precision	the number of decimal digits.
* @param scale		the number of digits after the decimal point.
* @param isnullable	true means it could contain null, false means
*			it definitely cannot contain null.
* @param maximumwidth	the maximum number of bytes for this datatype
*/
public typedescriptorimpl
typedescriptorimpl source
int precision
int scale
boolean isnullable
int maximumwidth
this typeid   source typeid
this precision   precision
this scale   scale
this isnullable   isnullable
this maximumwidth   maximumwidth
/**
* constructor for internal uses only
*
* @param source	the dtsi to copy
* @param isnullable	true means it could contain null, false means
*			it definitely cannot contain null.
* @param maximumwidth	the maximum number of bytes for this datatype
*/
public typedescriptorimpl
typedescriptorimpl source
boolean isnullable
int maximumwidth
this typeid   source typeid
this precision   source precision
this scale   source scale
this isnullable   isnullable
this maximumwidth   maximumwidth
/**
* @see typedescriptor#getmaximumwidth
*/
public int	getmaximumwidth
return maximumwidth
/**
* return the length of this type in bytes.  note that
* while the jdbc api _does_ define a need for
* returning length in bytes of a type, it doesn't
* state clearly what that means for the various
* types.  we assume therefore that the values here
* are meant to match those specified by the odbc
* specification (esp. since odbc clients are more
* likely to need this value than a java client).
* the odbc spec that defines the values we use here
* can be found at the following link:
*
* http://msdn.microsoft.com/library/default.asp?url=/library/
* en-us/odbc/htm/odbctransfer_octet_length.asp
*
* @see typedescriptor#getmaximumwidthinbytes
*/
public int	getmaximumwidthinbytes
switch  typeid getjdbctypeid
case types bit
case types tinyint
case types smallint
case types integer
case types real
case types double
case types float
case types binary
case types varbinary
case types longvarbinary
case types blob
// for all of these, just take the maximumwidth,
// since that already holds the length in bytes.
return maximumwidth
// for bigint values, odbc spec says to return
// 40 because max length of a c/c++ bigint in
// string form is 20 and we assume the client
// character set is unicode (spec says to
// multiply by 2 for unicode).
case types bigint
return 40
// odbc spec explicitly declares what the lengths
// should be for datetime values, based on the
// declared fields of sql_date_struct, sql_time_struct,
// and sql_timestamp_struct.  so we just use those
// values.
case types date
case types time
return 6
case types timestamp
return 16
// odbc spec says that for numeric/decimal values,
// we should use max number of digits plus 2
// (for sign and decimal point), since that's
// the length of a decimal value in string form.
// and since we assume client character set
// is unicode, we have to multiply by 2 to
// get the number of bytes.
case types numeric
case types decimal
return 2    precision   2
// odbc spec says to use length in chars
// for character types, times two if we
// assume client character set is unicode.
// if 2 * character length is greater than
// variable type (in this case, integer),
// then we return the max value for an
// integer.
case types char
case types varchar
case types longvarchar
case types clob
if   maximumwidth > 0      2   maximumwidth < 0
// integer overflow; return max integer possible.
return integer max_value
else
return 2   maximumwidth
case types array
case types distinct
case types null
case types other
case types ref
case types struct
case types java_object
default
// for these we don't know, so return the "don't-know"
// indicator.
return  1
/**
* get the jdbc type id for this type.  jdbc type can be
* found in java.sql.types.
*
* @return	a jdbc type, e.g. java.sql.types.decimal
*
* @see types
*/
public int getjdbctypeid
return typeid getjdbctypeid
/**
* gets the name of this datatype.
*
*
*  @return	the name of this datatype
*/
public	string		gettypename
return typeid getsqltypename
/**
* returns the number of decimal digits for the datatype, if applicable.
*
* @return	the number of decimal digits for the datatype.  returns
*		zero for non-numeric datatypes.
*/
public int	getprecision
return precision
/**
* returns the number of digits to the right of the decimal for
* the datatype, if applicable.
*
* @return	the number of digits to the right of the decimal for
*		the datatype.  returns zero for non-numeric datatypes.
*/
public int	getscale
return scale
/**
* returns true if the datatype can contain null, false if not.
* jdbc supports a return value meaning "nullability unknown" -
* i assume we will never have columns where the nullability is unknown.
*
* @return	true if the datatype can contain null, false if not.
*/
public boolean	isnullable
return isnullable
/**
* set the nullability of the datatype described by this descriptor
*
* @param nullable	true means set nullability to true, false
*					means set it to false
*/
public void setnullability boolean nullable
isnullable   nullable
/**
* converts this data type descriptor (including length/precision)
* to a string. e.g.
*
*			varchar(30)
*
*	or
*
*			 java.util.hashtable
*
* @return	string version of datatype, suitable for running through
*			the parser.
*/
public string	getsqlstring
return typeid toparsablestring  this
public string	tostring
string s   getsqlstring
if   isnullable
return s
return s
/**
* get the type id stored within this type descriptor.
*/
public basetypeidimpl gettypeid
return typeid
/**
compare if two typedescriptors are exactly the same
@param object the datatypedescriptor to compare to.
*/
public boolean equals object object
typedescriptor typedescriptor    typedescriptor object
if  this gettypename   equals typedescriptor gettypename
this precision    typedescriptor getprecision
this scale    typedescriptor getscale
this isnullable    typedescriptor isnullable
this maximumwidth    typedescriptor getmaximumwidth
return false
else
return true
// formatable methods
/**
* read this object from a stream of stored objects.
*
* @param in read this.
*
* @exception ioexception					thrown on error
* @exception classnotfoundexception		thrown on error
*/
public void readexternal  objectinput in
throws ioexception  classnotfoundexception
typeid    basetypeidimpl  in readobject
precision   in readint
scale   in readint
isnullable   in readboolean
maximumwidth   in readint
/**
* write this object to a stream of stored objects.
*
* @param out write bytes here.
*
* @exception ioexception		thrown on error
*/
public void writeexternal  objectoutput out
throws ioexception
out writeobject  typeid
out writeint  precision
out writeint  scale
out writeboolean  isnullable
out writeint  maximumwidth
/**
* get the formatid which corresponds to this class.
*
*	@return	the formatid of this class
*/
public	int	gettypeformatid  	  return storedformatids data_type_impl_descriptor_v01_id