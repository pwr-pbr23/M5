/*
derby - class org.apache.derby.iapi.services.cache.signedbinary
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl drda
/**
* converters from signed binary bytes to java <code>short</code>, <code>int</code>, or <code>long</code>.
*/
class signedbinary
// hide the default constructor, this is a static class.
private signedbinary
/**
* as/400, unix, system/390 byte-order for signed binary representations.
*/
public final static int big_endian   1
/**
* intel 80/86 reversed byte-order for signed binary representations.
*/
public final static int little_endian   2
/**
* build a java short from a 2-byte signed binary representation.
* <p>
* depending on machine type, byte orders are
* {@link #big_endian big_endian} for signed binary integers, and
* {@link #little_endian little_endian} for pc8087 signed binary integers.
*
* @exception illegalargumentexception if the specified byte order is not recognized.
*/
public static short getshort  byte buffer  int offset  int byteorder
switch  byteorder
case big_endian
return bigendianbytestoshort  buffer  offset
case little_endian
return littleendianbytestoshort  buffer  offset
default
throw new java lang illegalargumentexception
/**
* build a java int from a 4-byte signed binary representation.
* <p>
* depending on machine type, byte orders are
* {@link #big_endian big_endian} for signed binary integers, and
* {@link #little_endian little_endian} for pc8087 signed binary integers.
*
* @exception illegalargumentexception if the specified byte order is not recognized.
*/
public static int getint  byte buffer  int offset  int byteorder
switch  byteorder
case big_endian
return bigendianbytestoint  buffer  offset
case little_endian
return littleendianbytestoint  buffer  offset
default
throw new java lang illegalargumentexception
/**
* build a java long from an 8-byte signed binary representation.
* <p>
* depending on machine type, byte orders are
* {@link #big_endian big_endian} for signed binary integers, and
* {@link #little_endian little_endian} for pc8087 signed binary integers.
* <p>
*
* @exception illegalargumentexception if the specified byte order is not recognized.
*/
public static long getlong  byte buffer  int offset  int byteorder
switch  byteorder
case big_endian
return bigendianbytestolong  buffer  offset
case little_endian
return littleendianbytestolong  buffer  offset
default
throw new java lang illegalargumentexception
/**
* build a java short from a 2-byte big endian signed binary representation.
*/
public static short bigendianbytestoshort  byte buffer  int offset
return  short     buffer   0xff  << 8
buffer   0xff  << 0
/**
* build a java short from a 2-byte little endian signed binary representation.
*/
public static short littleendianbytestoshort  byte buffer  int offset
return  short     buffer   0xff  << 0
buffer   0xff  << 8
/**
* build a java int from a 4-byte big endian signed binary representation.
*/
public static int bigendianbytestoint  byte buffer  int offset
return  int     buffer   0xff  << 24
buffer   0xff  << 16
buffer   0xff  << 8
buffer   0xff  << 0
/**
* build a java int from a 4-byte little endian signed binary representation.
*/
public static int littleendianbytestoint  byte buffer  int offset
return  int     buffer   0xff  << 0
buffer   0xff  << 8
buffer   0xff  << 16
buffer   0xff  << 24
/**
* build a java long from an 8-byte big endian signed binary representation.
*/
public static long bigendianbytestolong  byte buffer  int offset
return  long     buffer   0xffl  << 56
buffer   0xffl  << 48
buffer   0xffl  << 40
buffer   0xffl  << 32
buffer   0xffl  << 24
buffer   0xffl  << 16
buffer   0xffl  << 8
buffer   0xffl  << 0
/**
* build a java long from an 8-byte little endian signed binary representation.
*/
public static long littleendianbytestolong  byte buffer  int offset
return  long     buffer   0xffl  << 0
buffer   0xffl  << 8
buffer   0xffl  << 16
buffer   0xffl  << 24
buffer   0xffl  << 32
buffer   0xffl  << 40
buffer   0xffl  << 48
buffer   0xffl  << 56