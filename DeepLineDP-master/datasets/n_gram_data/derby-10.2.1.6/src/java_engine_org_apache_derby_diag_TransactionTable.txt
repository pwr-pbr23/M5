/*
derby - class org.apache.derby.diag.transactiontable
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby diag
import org apache derby iapi services monitor monitor
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi sql conn languageconnectioncontext
import org apache derby iapi sql conn connectionutil
import org apache derby iapi store access accessfactory
import org apache derby iapi store access transactioninfo
import org apache derby vti vtitemplate
import org apache derby vti vticosting
import org apache derby vti vtienvironment
import org apache derby iapi sql resultcolumndescriptor
import org apache derby impl jdbc embedresultsetmetadata
import org apache derby iapi reference limits
import org apache derby iapi util stringutil
import java sql resultsetmetadata
import java sql sqlexception
import java sql types
/**
transactiontable is a virtual table that shows all transactions
currently in the database.
this virtual table can be invoked by calling it
directly
<pre> select * from syscs_diag.transaction_table </pre>
<p>the transactiontable virtual table takes a snap shot of the
transaction table while the system is in flux, so it is possible that some
transactions may be in transition state while the snap shot is taken.
we choose to do this rather then impose extraneous timing restrictions so
that the use of this tool will not alter the normal timing and flow of
execution in the application.
<p>the transactiontable virtual table has the following columns:
<ul>
<li>xid varchar(15) - not nullable.  the transaction id, this can be joined
with the locktable virtual table's xid.</li>
<li>global_xid varchar(140) - nullable.  the global transaction id, only
set if this transaction is a participant in a distributed transaction.</li>
<li>username varchar(128) - nullable.  the user name, or app by default.
may appear null if the transaction is started by cloudscape.</li>
<li>type varchar(30) - not nullable. usertransaction or an internal
transaction spawned by cloudscape.</li>
<li>status varchar(8) - not nullable.  idle or active.  a transaction is
idle only when it is first created or right after it commits.  any
transaction that holds or has held any resource in the database is active.
accessing the transactiontable virtual table without using the class alias
will not activate the transaction.</li>
<li>first_instant varchar(20) - nullable.  if null, this is a read only
transaction.  if not null, this is the first log record instant written by
the transaction.</li>
<li>sql_text varchar(32672) - nullable.  if null, this transaction is
currently not being executed in the database.  if not null, this is the sql
statement currently being executed in the database.</li>
</ul>
*/
public class transactiontable extends vtitemplate implements vticosting
private transactioninfo transactiontable
boolean initialized
int currentrow
private boolean wasnull
/**
@see java.sql.resultset#getmetadata
*/
public resultsetmetadata getmetadata
return metadata
/**
@see java.sql.resultset#next
@exception sqlexception if no transaction context can be found
*/
public boolean next   throws sqlexception
if   initialized
languageconnectioncontext lcc   connectionutil getcurrentlcc
accessfactory af   lcc getlanguageconnectionfactory   getaccessfactory
transactiontable   af gettransactioninfo
initialized   true
currentrow    1
if  transactiontable    null
return false
for  currentrow
currentrow < transactiontable length
currentrow
transactioninfo info   transactiontable
if  info    null
continue 		   transaction object in flux while the
// snap shot was taken, get another row
return true
// currentrow >= transactiontable.length
transactiontable   null
return false
/**
@see java.sql.resultset#close
*/
public void close
transactiontable   null
/**
all columns in transactiontable vti is of string type.
@see java.sql.resultset#getstring
*/
public string getstring int columnnumber
transactioninfo info   transactiontable
string str   null
switch columnnumber
case 1
str   info gettransactionidstring    break
case 2
str   info getglobaltransactionidstring    break
case 3
str   info getusernamestring    break
case 4
str   info gettransactiontypestring    break
case 5
str   info gettransactionstatusstring    break
case 6
str   info getfirstloginstantstring    break
case 7
str   info getstatementtextstring
str   stringutil truncate str  limits db2_varchar_maxwidth
break
default
str   null
wasnull    str    null
return str
/**
@see java.sql.resultset#wasnull
*/
public boolean wasnull
return wasnull
/**  vti costing interface */
/**
@see vticosting#getestimatedrowcount
*/
public double getestimatedrowcount vtienvironment vtienvironment
return vticosting defaultestimatedrowcount
/**
@see vticosting#getestimatedcostperinstantiation
*/
public double getestimatedcostperinstantiation vtienvironment vtienvironment
return vticosting defaultestimatedcost
/**
@return false
@see vticosting#supportsmultipleinstantiations
*/
public boolean supportsmultipleinstantiations vtienvironment vtienvironment
return false
/*
** metadata
*/
private static final resultcolumndescriptor columninfo
embedresultsetmetadata getresultcolumndescriptor              types varchar  false  15
embedresultsetmetadata getresultcolumndescriptor       types varchar  true   140
embedresultsetmetadata getresultcolumndescriptor         types varchar  true   128
embedresultsetmetadata getresultcolumndescriptor             types varchar  false  30
embedresultsetmetadata getresultcolumndescriptor           types varchar  false  8
embedresultsetmetadata getresultcolumndescriptor    types varchar  true   20
embedresultsetmetadata getresultcolumndescriptor         types varchar  true   limits db2_varchar_maxwidth
private static final resultsetmetadata metadata   new embedresultsetmetadata columninfo