/*
derby - class org.apache.derby.ui.util.derbyserverutils
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby ui util
//import org.apache.ui.decorator.derbyrunningdecorator;
import java sql sqlexception
import java util hashmap
import java util iterator
import org apache derby ui common commonnames
import org apache derby ui common messages
import org apache derby ui decorate derbyisrunningdecorator
import org apache derby ui properties derbyproperties
import org eclipse core resources iproject
import org eclipse core resources iresourcechangeevent
import org eclipse core resources iresourcechangelistener
import org eclipse core resources iworkspace
import org eclipse core resources resourcesplugin
import org eclipse core runtime coreexception
import org eclipse core runtime istatus
import org eclipse core runtime qualifiedname
import org eclipse debug core debugevent
import org eclipse debug core debugplugin
import org eclipse debug core idebugeventsetlistener
import org eclipse debug core ilaunch
import org eclipse debug core model iprocess
import org eclipse jdt core ijavaproject
import org eclipse jface dialogs messagedialog
import org eclipse swt swtexception
import org eclipse swt widgets shell
public class derbyserverutils
//singleton class
private static derbyserverutils dsutils   new derbyserverutils
private hashmap servers   new hashmap
private derbyserverutils
super
public static derbyserverutils getdefault
if  dsutils    null
dsutils   new derbyserverutils
return dsutils
// listener for debugevents, to know if a server was stopped by the client
// or died by itself
private idebugeventsetlistener listener   new idebugeventsetlistener
public void handledebugevents debugevent events
// type of event was a terminate...
if events length>0
if  events getkind      debugevent terminate
object source   events getsource
if  source instanceof iprocess
// check for derby network servre process.
object proj   servers get source
if  proj    null
try
//remove it from the hashmap, update the ui
servers remove source
if proj instanceof ijavaproject
setrunning   ijavaproject proj  getproject    null
else if proj instanceof iproject
setrunning  iproject proj null
catch  coreexception ce
logger log   ce  istatus error
catch exception e
logger log   e  istatus error
private iresourcechangelistener rlistener   new iresourcechangelistener
public void resourcechanged iresourcechangeevent event
if event gettype    iresourcechangeevent pre_close
try
if event getresource   getproject   isnatureenabled commonnames derby_nature
if getrunning event getresource   getproject
stopderbyserver event getresource   getproject
catch swtexception swe
//the swtexception is thrown during the shell creation
//logger.log("exception shutting down "+swe,istatus.error);
//e.printstacktrace();
catch exception e
logger log   e istatus error
public boolean getrunning iproject proj  throws coreexception
object value   proj getsessionproperty new qualifiedname commonnames ui_path  commonnames isrunning
return value    null
public void setrunning iproject proj  boolean value  throws coreexception
try
if  value    null    value equals boolean false
value   null
if proj isopen
proj setsessionproperty new qualifiedname commonnames ui_path commonnames isrunning   value
catch exception e
logger log   e  istatus error
derbyisrunningdecorator performupdatedecor proj
public void startderbyserver  iproject proj  throws coreexception
string args   commonnames start_derby_server
string vmargs
derbyproperties dprop new derbyproperties proj
//starts the server as a java app
args    dprop gethost      dprop getport
//set derby system home from the derby properties
if  dprop getsystemhome    null      dprop getsystemhome   equals
vmargs commonnames d_system_home dprop getsystemhome
string procname   proj getname     commonnames derby_server   commonnames start_derby_server   dprop gethost      dprop getport
ilaunch launch   derbyutils launch proj  procname
commonnames derby_server_class  args  vmargs  commonnames start_derby_server
iprocess ip launch getprocesses
//set a name to be seen in the console list
ip setattribute iprocess attr_process_label procname
// saves the mapping between (server) process and project
//servers.put(launch.getprocesses()[0], proj);
servers put ip  proj
// register a listener to listen, when this process is finished
debugplugin getdefault   adddebugeventlistener listener
//add resource listener
iworkspace workspace   resourcesplugin getworkspace
workspace addresourcechangelistener rlistener
setrunning proj  boolean true
shell shell   new shell
messagedialog openinformation
shell
commonnames plugin_name
messages d_ns_attempt_started dprop getport
public void stopderbyserver  iproject proj  throws coreexception  classnotfoundexception  sqlexception
string args   commonnames shutdown_derby_server
string vmargs
derbyproperties dprop new derbyproperties proj
args    dprop gethost      dprop getport
//	set derby system home from the derby properties
if  dprop getsystemhome    null      dprop getsystemhome   equals
vmargs commonnames d_system_home dprop getsystemhome
string procname   proj getname     commonnames derby_server   commonnames shutdown_derby_server   dprop gethost      dprop getport
// starts the server as a java app
ilaunch launch   derbyutils launch proj  procname
commonnames derby_server_class  args  vmargs commonnames shutdown_derby_server
iprocess ip launch getprocesses
//set a name to be seen in the console list
ip setattribute iprocess attr_process_label procname
//update the objectstate
setrunning proj  boolean false
if proj isopen
shell shell   new shell
messagedialog openinformation
shell
commonnames plugin_name
messages d_ns_attempt_stopped dprop getport
public void shutdownallservers
iterator it   servers values   iterator
while  it hasnext
try
stopderbyserver  iproject it next
catch  exception e
logger log   istatus error
logger log selectionutil getstatusmessages e   istatus error