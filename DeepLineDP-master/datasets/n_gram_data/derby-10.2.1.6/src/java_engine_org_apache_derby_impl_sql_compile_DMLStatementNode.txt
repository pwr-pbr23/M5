/*
derby - class org.apache.derby.impl.sql.compile.dmlstatementnode
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package	org apache derby impl sql compile
import org apache derby iapi services context contextmanager
import org apache derby iapi error standardexception
import org apache derby iapi sql compile compilercontext
import org apache derby iapi sql compile visitable
import org apache derby iapi sql compile visitor
import org apache derby iapi sql compile c_nodetypes
import org apache derby iapi sql conn languageconnectioncontext
import org apache derby iapi sql conn authorizer
import org apache derby iapi sql execute executioncontext
import org apache derby iapi sql resultcolumndescriptor
import org apache derby iapi sql parametervalueset
import org apache derby iapi sql resultdescription
import org apache derby iapi sql dictionary datadictionarycontext
import org apache derby iapi sql dictionary datadictionary
import org apache derby iapi sql dictionary tabledescriptor
import org apache derby iapi sql dictionary conglomeratedescriptor
import org apache derby iapi sql dictionary indexrowgenerator
import org apache derby iapi services monitor monitor
import org apache derby iapi services compiler methodbuilder
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi util jbitset
import org apache derby impl sql compile activationclassbuilder
import java util enumeration
import java util properties
import java util vector
/**
* a dmlstatementnode represents any type of dml statement: a cursor declaration,
* an insert statement, and update statement, or a delete statement.  all dml
* statements have result sets, but they do different things with them.  a
* select statement sends its result set to the client, an insert statement
* inserts its result set into a table, a delete statement deletes from a
* table the rows corresponding to the rows in its result set, and an update
* statement updates the rows in a base table corresponding to the rows in its
* result set.
*
* @author jeff lichtman
*/
abstract class dmlstatementnode extends statementnode
/**
* the result set is the rows that result from running the
* statement.  what this means for select statements is fairly obvious.
* for a delete, there is one result column representing the
* key of the row to be deleted (most likely, the location of the
* row in the underlying heap).  for an update, the row consists of
* the key of the row to be updated plus the updated columns.  for
* an insert, the row consists of the new column values to be
* inserted, with no key (the system generates a key).
*
* the parser doesn't know anything about keys, so the columns
* representing the keys will be added after parsing (perhaps in
* the binding phase?).
*
*/
resultsetnode	resultset
/**
* initializer for a dmlstatementnode
*
* @param resultset	a resultsetnode for the result set of the
*			dml statement
*/
public void init object resultset
this resultset    resultsetnode  resultset
/**
* prints the sub-nodes of this object.  see querytreenode.java for
* how tree printing is supposed to work.
*
* @param depth		the depth of this node in the tree
*/
public void printsubnodes int depth
if  sanitymanager debug
super printsubnodes depth
if  resultset    null
printlabel depth
resultset treeprint depth   1
/**
* get the resultsetnode from this dml statement.
* (useful for view resolution after parsing the view definition.)
*
* @return resultsetnode	the resultsetnode from this dmlstatementnode.
*/
public resultsetnode getresultsetnode
return resultset
/**
* bind this dmlstatementnode.  this means looking up tables and columns and
* getting their types, and figuring out the result types of all
* expressions, as well as doing view resolution, permissions checking,
* etc.
*
* @param datadictionary	the datadictionary to use to look up
*				columns, tables, etc.
*
* @return	the bound query tree
*
* @exception standardexception		thrown on error
*/
public querytreenode bind datadictionary datadictionary
throws standardexception
// we just need select privilege on most columns and tables
getcompilercontext   pushcurrentprivtype getprivtype
try
/*
** bind the tables before binding the expressions, so we can
** use the results of table binding to look up columns.
*/
bindtables datadictionary
/* bind the expressions */
bindexpressions
finally
getcompilercontext   popcurrentprivtype
return this
/**
* bind only the underlying resultsets with tables.  this is necessary for
* insert, where the binding order depends on the underlying resultsets.
* this means looking up tables and columns and
* getting their types, and figuring out the result types of all
* expressions, as well as doing view resolution, permissions checking,
* etc.
*
* @param datadictionary	the datadictionary to use to look up
*				columns, tables, etc.
*
* @return	the bound query tree
*
* @exception standardexception		thrown on error
*/
public querytreenode bindresultsetswithtables datadictionary datadictionary
throws standardexception
/* okay to bindly bind the tables, since resultsets without tables
* know to handle the call.
*/
bindtables datadictionary
/* bind the expressions in the underlying resultsets with tables */
bindexpressionswithtables
return this
/**
* bind the tables in this dml statement.
*
* @param datadictionary	the data dictionary to use to look up the tables
*
* @exception standardexception		thrown on error
*/
protected void bindtables datadictionary datadictionary
throws standardexception
/* bind the tables in the resultset
* (dmlstatementnode is above all resultsetnodes, so table numbering
* will begin at 0.)
* in case of referential action on delete , the table numbers can be
* > 0 because the nodes are create for dependent tables also in the
* the same context.
*/
resultset   resultset bindnonvtitables
datadictionary
fromlist  getnodefactory   getnode
c_nodetypes from_list
getnodefactory   dojoinorderoptimization
getcontextmanager
resultset   resultset bindvtitables
fromlist  getnodefactory   getnode
c_nodetypes from_list
getnodefactory   dojoinorderoptimization
getcontextmanager
/**
* bind the expressions in this dml statement.
*
* @exception standardexception		thrown on error
*/
protected void bindexpressions
throws standardexception
fromlist fromlist    fromlist  getnodefactory   getnode
c_nodetypes from_list
getnodefactory   dojoinorderoptimization
getcontextmanager
/* bind the expressions under the resultset */
resultset bindexpressions fromlist
/* verify that all underlying resultsets reclaimed their fromlist */
if  sanitymanager debug
sanitymanager assert fromlist size      0
fromlist size
/**
* bind the expressions in the underlying resultsets with tables.
*
* @exception standardexception		thrown on error
*/
protected void bindexpressionswithtables
throws standardexception
fromlist fromlist    fromlist  getnodefactory   getnode
c_nodetypes from_list
getnodefactory   dojoinorderoptimization
getcontextmanager
/* bind the expressions under the resultset */
resultset bindexpressionswithtables fromlist
/* verify that all underlying resultsets reclaimed their fromlist */
if  sanitymanager debug
sanitymanager assert fromlist size      0
fromlist size
/**
* returns the type of activation this class
* generates.
*
* @return either (need_row_activation | need_param_activation) or
*			(need_row_activation) depending on params
*
*/
int activationkind
vector parameterlist   getcompilercontext   getparameterlist
/*
** we need rows for all types of dml activations.  we need parameters
** only for those that have parameters.
*/
if  parameterlist    null    parameterlist size   > 0
return statementnode need_param_activation
else
return statementnode need_row_activation
/**
* optimize a dml statement (which is the only type of statement that
* should need optimizing, i think). this method over-rides the one
* in querytreenode.
*
* this method takes a bound tree, and returns an optimized tree.
* it annotates the bound tree rather than creating an entirely
* new tree.
*
* throws an exception if the tree is not bound, or if the binding
* is out of date.
*
* @return	an optimized querytree
*
* @exception standardexception		thrown on error
*/
public querytreenode optimize   throws standardexception
resultset   resultset preprocess getcompilercontext   getnumtables

fromlist  null
resultset   resultset optimize getdatadictionary    null  1 0d
resultset   resultset modifyaccesspaths
/* if this is a cursor, then we
* need to generate a new resultsetnode to enable the scrolling
* on top of the tree before modifying the access paths.
*/
if  this instanceof cursornode
resultcolumnlist				sirclist
resultcolumnlist				childrclist
resultsetnode					sichild   resultset
/* we get a shallow copy of the resultcolumnlist and its
* resultcolumns.  (copy maintains resultcolumn.expression for now.)
*/
sirclist   resultset getresultcolumns
childrclist   sirclist copylistandobjects
resultset setresultcolumns childrclist
/* replace resultcolumn.expression with new virtualcolumnnodes
* in the scrollinsensitiveresultsetnode's resultcolumnlist.  (virtualcolumnnodes include
* pointers to source resultsetnode, this, and source resultcolumn.)
*/
sirclist genvirtualcolumnnodes resultset  childrclist
/* finally, we create the new scrollinsensitiveresultsetnode */
resultset    resultsetnode  getnodefactory
getnode
c_nodetypes scroll_insensitive_result_set_node
resultset
sirclist

getcontextmanager
// propagate the referenced table map if it's already been created
if  sichild getreferencedtablemap      null
resultset setreferencedtablemap  jbitset  sichild getreferencedtablemap   clone
return this
/**
* make a resultdescription for use in a preparedstatement.
*
* resultdescriptions are visible to jdbc only for cursor statements.
* for other types of statements, they are only used internally to
* get descriptions of the base tables being affected.  for example,
* for an insert statement, the resultdescription describes the
* rows in the table being inserted into, which is useful when
* the values being inserted are of a different type or length
* than the columns in the base table.
*
* @return	a resultdescription for this dml statement
*/
public resultdescription makeresultdescription
executioncontext ec    executioncontext  getcontextmanager   getcontext
executioncontext context_id
resultcolumndescriptor coldescs   resultset makeresultdescriptors ec
string statementtype   statementtostring
return ec getexecutionfactory   getresultdescription coldescs  statementtype
/**
* generate the code to create the parametervalueset, if necessary,
* when constructing the activation.  also generate the code to call
* a method that will throw an exception if we try to execute without
* all the parameters being set.
*
* @param acb	the activationclassbuilder for the class we're building
*/
void generateparametervalueset activationclassbuilder acb
throws standardexception
vector parameterlist   getcompilercontext   getparameterlist
int	numberofparameters    parameterlist    null  ? 0   parameterlist size
if  numberofparameters <  0
return
parameternode generateparametervalueset
acb  numberofparameters  parameterlist
/**
* a read statement is atomic (dmlmod overrides us) if there
* are no work units, and no select nodes, or if its select nodes
* are all arguments to a function.  this is admittedly
* a bit simplistic, what if someone has: <pre>
* 	values myfunc(select max(c.commitfunc()) from t)
* </pre>
* but we aren't going too far out of our way to
* catch every possible wierd case.  we basically
* want to be permissive w/o allowing someone to partially
* commit a write.
*
* @return true if the statement is atomic
*
* @exception standardexception on error
*/
public boolean isatomic   throws standardexception
/*
** if we have a frombasetable then we have
** a select, so we want to consider ourselves
** atomic.  don't drill below staticmethodcallnodes
** to allow a select in an argument to a method
** call that can be atomic.
*/
hasnodevisitor visitor   new hasnodevisitor frombasetable class  staticmethodcallnode class
this accept visitor
if  visitor hasnode
return true
return false
/**
* accept a visitor, and call v.visit()
* on child nodes as necessary.
*
* @param v the visitor
*
* @exception standardexception on error
*/
public visitable accept visitor v
throws standardexception
if  v skipchildren this
return v visit this
if  resultset    null     v stoptraversal
resultset    resultsetnode resultset accept v
return this
/**
* return default privilege needed for this node. other dml nodes can override
* this method to set their own default privilege.
*
* @return true if the statement is atomic
*/
int getprivtype
return authorizer select_priv