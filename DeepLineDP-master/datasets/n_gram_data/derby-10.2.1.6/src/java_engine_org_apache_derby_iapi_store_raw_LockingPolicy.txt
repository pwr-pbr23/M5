/*
derby - class org.apache.derby.iapi.store.raw.lockingpolicy
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi store raw
import org apache derby iapi services locks latch
import org apache derby iapi error standardexception
/**
any object that implements this interface can be used as a locking
policy for accessing a container.
<p>
the locking policy must use the defined lock qualifiers
(containerlock.cis, rowlock.rs, etc.) and the standard lock manager.
(a locking policy that just performs no locking wouldn't need to use
these :-)
<p>
a locking policy must use the object that is an instance of transaction
(originally obtained via starttransaction() in rawstorefactory) as the
compatibilityspace for the lockfactory calls.
<br>
a locking policy must use the passed in transaction as the
compatability space and the lock group.
this chain (group) of locks has the following defined behaviour
<ul>
<li>locks are released at transaction.commit()
<li>locks are released at transaction.abort()
</ul>
<br>
mt - thread safe
@see containerhandle
@see recordhandle
@see org.apache.derby.iapi.services.locks.lockfactory
@see org.apache.derby.iapi.services.locks.lockable
*/
public interface lockingpolicy
/**
no locking what so ever, isolation parameter will be ignored by
getlockingpolicy().
@see  	rawstorefactory
*/
static final int mode_none   0
/**
record level locking.
*/
static final int mode_record   1
/**
containerhandle level locking.
*/
static final int mode_container   2
/**
called when a container is opened.
@param t            transaction to associate lock with.
@param container    container to lock.
@param waitforlock  should lock request wait until granted?
@param forupdate    should container be locked for update, or read?
@return true if the lock was obtained, false if it wasn't.
false should only be returned if the waitforlock policy was set to
"false," and the lock was unavailable.
@exception standardexception	standard cloudscape error policy
@see containerhandle
*/
public boolean lockcontainer
transaction         t
containerhandle     container
boolean             waitforlock
boolean             forupdate
throws standardexception
/**
called when a container is closed.
@see containerhandle
@see containerhandle#close
*/
public void unlockcontainer
transaction t
containerhandle container
/**
called before a record is fetched.
@param t            transaction to associate lock with.
@param container    open container used to get record.  will be used
to row locks by the container they belong to.
@param record       record to lock.
@param waitforlock  should lock request wait until granted?
@param forupdate    should container be locked for update, or read?
@exception standardexception	standard cloudscape error policy
@see page
*/
public boolean lockrecordforread
transaction     t
containerhandle container
recordhandle    record
boolean         waitforlock
boolean         forupdate
throws standardexception
/**
lock a record while holding a page latch.
@param latch        latch held.
@param record       record to lock.
@param forupdate    should container be locked for update, or read?
@exception standardexception	standard cloudscape error policy
@see page
*/
public void lockrecordforread
latch			latch
recordhandle    record
boolean         forupdate
throws standardexception
/**
request a write lock which will be released immediately upon grant.
@param t                        transaction to associate lock with.
@param record                   record to lock.
@param lockforpreviouskey       lock is for a previous key of a insert.
@param waitforlock              should lock request wait until granted?
@return true if the lock was obtained, false if it wasn't.
false should only be returned if the waitforlock argument was set to
"false," and the lock was unavailable.
@exception standardexception	standard cloudscape error policy
@see page
*/
public boolean zerodurationlockrecordforwrite
transaction     t
recordhandle    record
boolean         lockforpreviouskey
boolean         waitforlock
throws standardexception
/**
called before a record is inserted, updated or deleted.
if zeroduration is true then lock is released immediately after it
has been granted.
@param t             transaction to associate lock with.
@param record        record to lock.
@param lockforinsert lock is for an insert.
@param waitforlock   should lock request wait until granted?
@return true if the lock was obtained, false if it wasn't.
false should only be returned if the waitforlock argument was set to
"false," and the lock was unavailable.
@exception standardexception	standard cloudscape error policy
@see page
*/
public boolean lockrecordforwrite
transaction     t
recordhandle    record
boolean         lockforinsert
boolean         waitforlock
throws standardexception
/**
lock a record for write while holding a page latch.
@param latch        page latch held.
@param record       record to lock.
@exception standardexception	standard cloudscape error policy
@see page
*/
public void lockrecordforwrite
latch			latch
recordhandle    record
throws standardexception
/**
called after a record has been fetched.
@exception standardexception	standard cloudscape error policy
@see page
*/
public void unlockrecordafterread
transaction     t
containerhandle container
recordhandle    record
boolean         forupdate
boolean         row_qualified
throws standardexception
/**
get the mode of this policy
*/
public int getmode