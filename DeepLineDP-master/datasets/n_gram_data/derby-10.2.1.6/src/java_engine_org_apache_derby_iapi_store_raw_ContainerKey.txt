/*
derby - class org.apache.derby.iapi.store.raw.containerkey
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi store raw
import org apache derby iapi util matchable
import org apache derby iapi services io compressednumber
import java io objectoutput
import java io objectinput
import java io ioexception
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi services locks lockable
import org apache derby iapi services locks latch
import org apache derby iapi services locks virtuallocktable
import java util hashtable
/**
a key that identifies a container within the rawstore.
<br> mt - immutable
*/
public final class containerkey implements matchable  lockable
private final long	segmentid 		   segment identifier
private final long	containerid 	   container identifier
/**
create a new containerkey
*/
public containerkey long segmentid  long containerid
this segmentid   segmentid
this containerid   containerid
/**
return my identifier within the segment
*/
public long getcontainerid
return containerid
/**
return my segment identifier
*/
public long getsegmentid
return segmentid
/*
** methods to read and write containerkeys.
*/
public void writeexternal objectoutput out  throws ioexception
compressednumber writelong out  segmentid
compressednumber writelong out  containerid
public static containerkey read objectinput in  throws ioexception
long sid   compressednumber readlong in
long cid   compressednumber readlong in
return new containerkey sid  cid
/*
** methods of object
*/
public boolean equals object other
if  other    this
return true
if  other instanceof containerkey
containerkey otherkey    containerkey  other
return  containerid    otherkey containerid
segmentid    otherkey segmentid
else
return false
public int hashcode
return  int   segmentid ^ containerid
public string tostring
return     segmentid       containerid
/*
** methods of matchable
*/
public boolean match object key
// instance of containerkey?
if  equals key
return true
if  key instanceof pagekey
return equals   pagekey  key  getcontainerid
if  key instanceof recordhandle
return equals   recordhandle  key  getcontainerid
return false
/*
** methods of lockable
*/
public void lockevent latch lockinfo
public boolean requestcompatible object requestedqualifier  object grantedqualifier
if  sanitymanager debug
sanitymanager assert requestedqualifier instanceof containerlock
sanitymanager assert grantedqualifier instanceof containerlock
containerlock clrequested    containerlock  requestedqualifier
containerlock clgranted     containerlock  grantedqualifier
return clrequested iscompatible clgranted
/**
this method will only be called if requestcompatible returned false.
this results from two cases, some other compatabilty space has some
lock that would conflict with the request, or this compatability space
has a lock tha
*/
public boolean lockeralwayscompatible
return true
public void unlockevent latch lockinfo
/**
this lockable wants to participate in the virtual lock table.
*/
public boolean lockattributes int flag  hashtable attributes
if  sanitymanager debug
sanitymanager assert attributes    null
if   flag   virtuallocktable table_and_rowlock     0
return false
attributes put virtuallocktable containerid
new long getcontainerid
attributes put virtuallocktable lockname
attributes put virtuallocktable locktype
// attributes.put(virtuallocktable.segmentid, new long(identity.getsegmentid()));
return true