/*
derby - class org.apache.derby.impl.store.raw.data.containerbasicoperation
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl store raw data
import org apache derby iapi reference sqlstate
import org apache derby iapi store raw containerkey
import org apache derby iapi store raw containerhandle
import org apache derby iapi store raw loggable
import org apache derby iapi store raw lockingpolicy
import org apache derby iapi store raw transaction
import org apache derby iapi store raw xact rawtransaction
import org apache derby iapi store raw data rawcontainerhandle
import org apache derby iapi error standardexception
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi services io compressednumber
import org apache derby iapi util bytearray
import java io outputstream
import java io objectinput
import java io objectoutput
import java io ioexception
/**
a container operation change the state of the container.
a containerbasicoperation is the base class for all container operations.
*/
public abstract class containerbasicoperation implements loggable
/* page info this operation changed */
private long containerversion
protected containerkey containerid
transient protected rawcontainerhandle containerhdl   null
transient private boolean foundhere   false
protected containerbasicoperation rawcontainerhandle hdl  throws standardexception
containerhdl   hdl
containerid   hdl getid
containerversion   hdl getcontainerversion
/*
* formatable methods
*/
// no-arg constructor, required by formatable
public containerbasicoperation     super
public void writeexternal objectoutput out  throws ioexception
containerid writeexternal out
compressednumber writelong out  containerversion
public void readexternal objectinput in
throws ioexception  classnotfoundexception
containerid   containerkey read in
containerversion   compressednumber readlong in
/**
loggable methods
*/
/**
the default for prepared log is always null for all the operations
that don't have optionaldata.  if an operation has optional data,
the operation need to prepare the optional data for this method.
space operation has no optional data to write out
*/
public bytearray getpreparedlog
return  bytearray  null
public void releaseresource transaction tran
if   foundhere
return
if  containerhdl    null
containerhdl close
containerhdl   null
foundhere   false
/**
a space operation is a rawstore log record
*/
public int group
return loggable rawstore
/**
methods specific to this class
*/
/**
open the container with this segmentid and containerid.
this method should only be called if the container has already been
created.
@exception standardexception the container cannot be found or cannot be
opened.
*/
protected rawcontainerhandle findcontainer transaction tran
throws standardexception
releaseresource tran
rawtransaction rtran    rawtransaction tran
containerhdl   rtran opendroppedcontainer
containerid   lockingpolicy  null
//if we are in roll forward recovery, missing container will be
//recreated becuase we might have hit a log record which has a
//reused the container id that was dropped earlier.
if  rtran inrollforwardrecovery
if  containerhdl    null
if  sanitymanager debug
if sanitymanager debug_on
sanitymanager debug_print
containerid
containerhdl   findcontainerforredorecovery rtran
if  sanitymanager debug
if sanitymanager debug_on
sanitymanager debug_print
containerhdl    null
if  containerhdl    null
throw standardexception newexception
sqlstate data_container_vanished  containerid
foundhere   true
return containerhdl
/**
subclass (e.g., containeroperation) that wishes to do something abou
missing container in load tran should override this method to return
the recreated container
@exception standardexception cloudscape standard error policy
*/
protected rawcontainerhandle findcontainerforredorecovery
rawtransaction tran
throws standardexception
return null
/**
@exception standardexception standard cloudscape error policy
*/
public boolean needsredo transaction xact
throws standardexception
findcontainer xact
long cversion   containerhdl getcontainerversion
if  cversion    containerversion
return true
releaseresource xact
if  cversion > containerversion
return false
else
// resolve - correct error handling
if  sanitymanager debug
sanitymanager throwassert
containerversion
cversion
return false
public string tostring
if  sanitymanager debug
return     containerid
else
return null