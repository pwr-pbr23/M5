/*
derby - class org.apache.derby.tools.jdbcdisplayutil
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby tools
import java io printstream
import java io printwriter
import java io file
import java io filenotfoundexception
import java io ioexception
import java sql connection
import java sql sqlexception
import java sql sqlwarning
import java sql statement
import java sql preparedstatement
import java sql resultset
import java sql resultsetmetadata
import java sql types
import java util properties
import java util enumeration
import java util vector
import org apache derby iapi tools i18n localizedresource
import org apache derby impl tools ij ijexception
/**
this class contains utility methods for displaying jdbc objects and results.
<p>
all of the methods are static. the output stream
to write to is always passed in, along with the
jdbc objects to display.
@author ames
*/
public class jdbcdisplayutil
// used to control display
static final private int minwidth   4
static private int maxwidth   128
static public boolean showselectcount   false
static
// initialize the locale support functions to default value of jvm
localizedresource getinstance
//-----------------------------------------------------------------
// methods for displaying and checking errors
/**
print information about the exception to the given printwriter.
for non-sqlexceptions, does a stack trace. for sqlexceptions,
print a standard error message and walk the list, if any.
@param out the place to write to
@param e the exception to display
*/
static public void showexception printwriter out  throwable e
if  e    null  return
if  e instanceof sqlexception
showsqlexception out   sqlexception e
else
e printstacktrace out
/**
print information about the sql exception to the given printwriter.
walk the list of exceptions, if any.
@param out the place to write to
@param e the exception to display
*/
static public void showsqlexception printwriter out  sqlexception e
string errorcode
if  boolean getboolean
errorcode   localizedresource getmessage    localizedresource getnumber e geterrorcode
else
errorcode
while  e  null
string p1   mapnull e getsqlstate   localizedresource getmessage
string p2   mapnull e getmessage   localizedresource getmessage
out println localizedresource getmessage    p1  p2 errorcode
dotrace out  e
e e getnextexception
/**
print information about the sql warnings for the connection
to the given printwriter.
walks the list of exceptions, if any.
@param out the place to write to
@param theconnection the connection that may have warnings.
*/
static public void showwarnings printwriter out  connection theconnection
try
// get connection warnings
sqlwarning warning   null
if  theconnection    null
showwarnings out  theconnection getwarnings
if  theconnection    null
theconnection clearwarnings
catch  sqlexception e
showsqlexception out  e
showwarnings
/**
@param out the place to write to
@param warning the sqlwarning
*/
static public void showwarnings printwriter out  sqlwarning warning
while  warning    null
string p1   mapnull warning getsqlstate   localizedresource getmessage
string p2   mapnull warning getmessage   localizedresource getmessage
out println localizedresource getmessage    p1  p2
warning   warning getnextwarning
/**
print information about the sql warnings for the resultset
to the given printwriter.
walk the list of exceptions, if any.
@param out the place to write to
@param rs the resultset that may have warnings on it
*/
static public void showwarnings printwriter out  resultset rs
try
// get resultset warnings
sqlwarning warning   null
if  rs    null
showwarnings out  rs getwarnings
if  rs    null
rs clearwarnings
catch  sqlexception e
showsqlexception out  e
showresultsetwarnings
/**
print information about the sql warnings for the statement
to the given printwriter.
walks the list of exceptions, if any.
@param out the place to write to
@param s the statement that may have warnings on it
*/
static public void showwarnings printwriter out  statement s
try
// get statement warnings
sqlwarning warning   null
if  s    null
showwarnings out  s getwarnings
if  s    null
s clearwarnings
catch  sqlexception e
showsqlexception out  e
showstatementwarnings
//-----------------------------------------------------------------
// methods for displaying and checking results
// remind: make this configurable...
static final private int max_retries   0
/**
pretty-print the results of a statement that has been executed.
if it is a select, gathers and prints the results.  display
partial results up to the first error.
if it is not a select, determine if rows were involved or not,
and print the appropriate message.
@param out the place to write to
@param stmt the statement to display
@param conn the connection against which the statement was executed
@exception sqlexception on jdbc access failure
*/
static public void displayresults printwriter out  statement stmt  connection conn
throws sqlexception
indent_displayresults  out  stmt  conn  0  null  null
static private void indent_displayresults
printwriter out  statement stmt  connection conn  int indentlevel
int displaycolumns  int displaycolumnwidths
throws sqlexception
checknotnull stmt
resultset rs   stmt getresultset
if  rs    null
indent_displayresults out  rs  conn  indentlevel
displaycolumns  displaycolumnwidths
rs close       let the result set go away
else
displayupdatecount out stmt getupdatecount    indentlevel
showwarnings out stmt
displayresults
/**
@param out the place to write to
@param count the update count to display
@param indentlevel number of tab stops to indent line
*/
static void displayupdatecount printwriter out  int count  int indentlevel
if  count    1
indentedprintline  out  indentlevel  localizedresource getmessage
else if  count >  0
indentedprintline  out  indentlevel  localizedresource getmessage    localizedresource getnumber count
else
indentedprintline  out  indentlevel  localizedresource getmessage
/**
calculates column display widths from the default widths of the
result set.
*/
static private int getcolumndisplaywidths resultsetmetadata rsmd  int dispcolumns
boolean localizedoutput
throws sqlexception
int count    dispcolumns    null  ? rsmd getcolumncount     dispcolumns length
int widths   new int
for int i 0  i<count  i
int colnum    dispcolumns    null  ?  i   1    dispcolumns
int dispsize   localizedoutput
? localizedresource getinstance   getcolumndisplaysize rsmd  colnum
rsmd getcolumndisplaysize colnum
widths   math min maxwidth
math max  rsmd isnullable colnum     resultsetmetadata columnnonulls ?
0   minwidth  dispsize
return widths
/**
@param out the place to write to
@param rs the resultset to display
@param conn the connection against which the resultset was retrieved
@param displaycolumns column numbers to display, or null if all
@param displaycolumnwidths column widths, in characters, if displaycolumns is specified.
@exception sqlexception on jdbc access failure
*/
static public void displayresults printwriter out  resultset rs  connection conn
int displaycolumns  int displaycolumnwidths
throws sqlexception
indent_displayresults  out  rs  conn  0  displaycolumns
displaycolumnwidths
static private void indent_displayresults
printwriter out  resultset rs  connection conn  int indentlevel
int displaycolumns  int displaycolumnwidths
throws sqlexception
resultsetmetadata rsmd   rs getmetadata
checknotnull rsmd
vector nestedresults
int numberofrowsselected   0
// autocommit must be off or the nested cursors
// are closed when the outer statement completes.
if   conn getautocommit
nestedresults   new vector
else
nestedresults   null
if displaycolumnwidths    null
displaycolumnwidths   getcolumndisplaywidths rsmd  displaycolumns true
int len   indent_displaybanner out rsmd  indentlevel  displaycolumns
displaycolumnwidths
// when displaying rows, keep going past errors
// unless/until the maximum # of errors is reached.
boolean donext   true
int retry   0
while  donext
try
donext   rs next
if  donext
displayrow out  rs  rsmd  len  nestedresults  conn
indentlevel  displaycolumns
displaycolumnwidths
showwarnings out  rs
numberofrowsselected
catch  sqlexception e
// revisit: might want to check the exception
// and for some, not bother with the retry.
if    retry > max_retries
throw e
else
showsqlexception out  e
if  showselectcount    true
if  numberofrowsselected    1
out println
indentedprintline  out  indentlevel  localizedresource getmessage
else if  numberofrowsselected >  0
out println
indentedprintline  out  indentlevel
localizedresource getmessage    localizedresource getnumber numberofrowsselected
displaynestedresults out  nestedresults  conn  indentlevel
nestedresults   null
/**
@param out the place to write to
@param nr the vector of results
@param conn the connection against which the resultset was retrieved
@param indentlevel number of tab stops to indent line
@exception sqlexception thrown on access error
*/
static private void displaynestedresults printwriter out  vector nr  connection conn  int indentlevel
throws sqlexception
if  nr    null  return
string b localizedresource getmessage
string oldstring
for  int i 0  i < nr size    i
localizedresource outputwriter   println
//just too clever to get the extra +s
string t   integer tostring i
if  t length   > oldstring length
oldstring   t
b b localizedresource getmessage
localizedresource outputwriter   println b
localizedresource outputwriter   println localizedresource getmessage    localizedresource getnumber i
localizedresource outputwriter   println b
indent_displayresults out   resultset  nr elementat i   conn
indentlevel  null  null
/**
fetch the next row of the result set, and if it
exists format and display a banner and the row.
@param out the place to write to
@param rs the resultset in use
@param conn the connection against which the resultset was retrieved
@exception sqlexception on jdbc access failure
*/
static public void displaynextrow printwriter out  resultset rs  connection conn
throws sqlexception
indent_displaynextrow  out  rs  conn  0  null   rs    null  ? null
getcolumndisplaywidths rs getmetadata    null  true
static private void indent_displaynextrow printwriter out  resultset rs  connection conn  int indentlevel
int displaycolumns  int displaycolumnwidths
throws sqlexception
vector nestedresults
// autocommit must be off or the nested cursors
// are closed when the outer statement completes.
if   conn getautocommit
nestedresults   new vector
else
nestedresults   null
checknotnull rs
resultsetmetadata rsmd   rs getmetadata
checknotnull rsmd
// only print stuff out if there is a row to be had.
if  rs next
int rowlen   indent_displaybanner out  rsmd  indentlevel  displaycolumns  displaycolumnwidths
displayrow out  rs  rsmd  rowlen  nestedresults  conn  indentlevel
null  null
else
indentedprintline  out  indentlevel  localizedresource getmessage
showwarnings out  rs
displaynestedresults out  nestedresults  conn  indentlevel
nestedresults   null
displaynextrow
/**
display the current row of the result set along with
a banner. assume the result set is on a row.
@param out the place to write to
@param rs the resultset in use
@param conn the connection against which the resultset was retrieved
@exception sqlexception on jdbc access failure
*/
static public void displaycurrentrow printwriter out  resultset rs  connection conn
throws sqlexception
indent_displaycurrentrow  out  rs  conn  0  null   rs    null  ? null
getcolumndisplaywidths rs getmetadata    null  true
static private void indent_displaycurrentrow printwriter out  resultset rs  connection conn
int indentlevel  int displaycolumns  int displaycolumnwidths
throws sqlexception
vector nestedresults
if  rs    null
indentedprintline  out  indentlevel  localizedresource getmessage
return
// autocommit must be off or the nested cursors
// are closed when the outer statement completes.
if   conn getautocommit
nestedresults   new vector
else
nestedresults   null
resultsetmetadata rsmd   rs getmetadata
checknotnull rsmd
int rowlen   indent_displaybanner out  rsmd  indentlevel  displaycolumns  displaycolumnwidths
displayrow out  rs  rsmd  rowlen  nestedresults  conn  indentlevel
displaycolumns  displaycolumnwidths
showwarnings out  rs
displaynestedresults out  nestedresults  conn  indentlevel
nestedresults   null
displaynextrow
/**
print a banner containing the column labels separated with '|'s
and a line of '-'s.  each field is as wide as the display
width reported by the metadata.
@param out the place to write to
@param rsmd the resultsetmetadata to use
@exception sqlexception on jdbc access failure
*/
static public int displaybanner printwriter out  resultsetmetadata rsmd
throws sqlexception
return indent_displaybanner  out  rsmd  0  null
getcolumndisplaywidths rsmd  null  true
static private int indent_displaybanner printwriter out  resultsetmetadata rsmd  int indentlevel
int displaycolumns  int displaycolumnwidths
throws sqlexception
stringbuffer buf   new stringbuffer
int numcols   displaycolumnwidths length
int rowlen
// do some precalculation so the buffer is allocated only once
// buffer is twice as long as the display length plus one for a newline
rowlen    numcols   1      for the column separators
for  int i 1  i <  numcols  i
rowlen    displaycolumnwidths
buf ensurecapacity rowlen
// get column header info
// truncate it to the column display width
// add a bar between each item.
for  int i 1  i <  numcols  i
int colnum   displaycolumns  null ? i   displaycolumns
if  i>1
buf append
string s   rsmd getcolumnlabel colnum
int w   displaycolumnwidths
if  s length   < w
buf append s
// try to paste on big chunks of space at a time.
int k   w   s length
for    k >  64  k    64
buf append
for    k >  16  k    16
buf append
for    k >  4  k    4
buf append
for    k > 0  k
buf append
else if  s length   > w
if  w > 1
buf append s substring 0 w 1
if  w > 0
buf append
else
buf append s
buf setlength math min rowlen  1024
indentedprintline  out  indentlevel  buf
// now print a row of '-'s
for  int i 0  i<math min rowlen  1024   i
buf setcharat i
indentedprintline  out  indentlevel  buf
buf   null
return rowlen
displaybanner
/**
print one row of a result set, padding each field to the
display width and separating them with '|'s
@param out the place to write to
@param rs the resultset to use
@param rsmd the resultsetmetadata to use
@param rowlen
@param nestedresults
@param conn
@param indentlevel number of tab stops to indent line
@param displaycolumns a list of column numbers to display
@param displaycolumnwidths if displaycolumns is set, the width of
columns to display, in characters.
@exception sqlexception thrown on jdbc access failure
*/
static private void displayrow printwriter out  resultset rs  resultsetmetadata rsmd  int rowlen  vector nestedresults  connection conn  int indentlevel
int displaycolumns  int displaycolumnwidths
throws sqlexception
stringbuffer buf   new stringbuffer
buf ensurecapacity rowlen
int numcols   displaycolumnwidths length
int i
// get column header info
// truncate it to the column display width
// add a bar between each item.
for  i 1  i <  numcols  i
int colnum   displaycolumns  null ? i   displaycolumns
if  i>1
buf append
string s
switch  rsmd getcolumntype colnum
default
s   localizedresource getinstance   getlocalizedstring rs  rsmd  colnum
break
case org apache derby iapi reference jdbc20translation sql_types_java_object
case types other
object o   rs getobject colnum
if  o    null    s
else if  o instanceof resultset    nestedresults    null
s   localizedresource getmessage    localizedresource getnumber nestedresults size
nestedresults addelement o
else
try
s   rs getstring colnum
catch  sqlexception se
// oops, they don't support refetching the column
s   o tostring
break
if  s  null  s
int w   displaycolumnwidths
if  s length   < w
stringbuffer fulls   new stringbuffer s
fulls ensurecapacity w
for  int k s length    k<w  k
fulls append
s   fulls tostring
else if  s length   > w
// add the & marker to know it got cut off
s   s substring 0 w 1
buf append s
indentedprintline  out  indentlevel  buf
displayrow
/**
check if an object is null, and if it is, throw an exception
with an informative parameter about what was null.
the exception is a run-time exception that is internal to ij.
@param o the object to test
@param what the information to include in the error if it is null
*/
public static void checknotnull object o  string what
if  o    null
throw ijexception objectwasnull what
checknotnull
/**
map the string to the value if it is null.
@param s the string to test for null
@param nullvalue the value to use if s is null
@return if s is non-null, s; else nullvalue.
*/
static public string mapnull string s  string nullvalue
if  s  null  return nullvalue
return s
/**
if the property ij.exceptiontrace is true, display the stack
trace to the print stream. otherwise, do nothing.
@param out the output stream to write to
@param e the exception to display
*/
static public void dotrace printwriter out  exception e
if  boolean getboolean
e printstacktrace out
out flush
static public void setmaxdisplaywidth int maxdisplaywidth
maxwidth   maxdisplaywidth
static	private	void	indentedprintline  printwriter out  int indentlevel  string text
indent  out  indentlevel
out println  text
static	private	void	indentedprintline  printwriter out  int indentlevel  stringbuffer text
indent  out  indentlevel
out println  text
static	private	void	indent  printwriter out  int indentlevel
for   int ictr   0  ictr < indentlevel  ictr       out print
// ================
static public void showexception printstream out  throwable e
if  e    null  return
if  e instanceof sqlexception
showsqlexception out   sqlexception e
else
e printstacktrace out
static public void showsqlexception printstream out  sqlexception e
string errorcode
if  boolean getboolean
errorcode       e geterrorcode
else
errorcode
while  e  null
out println   mapnull e getsqlstate
mapnull e getmessage      errorcode
dotrace out  e
e e getnextexception
static public void showwarnings printstream out  connection theconnection
try
// get connection warnings
sqlwarning warning   null
if  theconnection    null
showwarnings out  theconnection getwarnings
if  theconnection    null
theconnection clearwarnings
catch  sqlexception e
showsqlexception out  e
showwarnings
static public void showwarnings printstream out  sqlwarning warning
while  warning    null
out println
mapnull warning getsqlstate
mapnull warning getmessage
warning   warning getnextwarning
static public void showwarnings printstream out  resultset rs
try
// get resultset warnings
sqlwarning warning   null
if  rs    null
showwarnings out  rs getwarnings
if  rs    null
rs clearwarnings
catch  sqlexception e
showsqlexception out  e
showresultsetwarnings
static public void showwarnings printstream out  statement s
try
// get statement warnings
sqlwarning warning   null
if  s    null
showwarnings out  s getwarnings
if  s    null
s clearwarnings
catch  sqlexception e
showsqlexception out  e
showstatementwarnings
static public void displayresults printstream out  statement stmt  connection conn
throws sqlexception
indent_displayresults  out  stmt  conn  0  null  null
static private void indent_displayresults
printstream out  statement stmt  connection conn  int indentlevel
int displaycolumns  int displaycolumnwidths
throws sqlexception
checknotnull stmt
resultset rs   stmt getresultset
if  rs    null
indent_displayresults out  rs  conn  indentlevel  displaycolumns
displaycolumnwidths
rs close       let the result set go away
else
displayupdatecount out stmt getupdatecount    indentlevel
showwarnings out stmt
displayresults
static void displayupdatecount printstream out  int count  int indentlevel
if  count    1
indentedprintline  out  indentlevel
else if  count >  0
indentedprintline  out  indentlevel  count
else
indentedprintline  out  indentlevel
static public void displayresults printstream out  resultset rs  connection conn
throws sqlexception
indent_displayresults  out  rs  conn  0  null  null
static private void indent_displayresults
printstream out  resultset rs  connection conn  int indentlevel
int displaycolumns  int displaycolumnwidths
throws sqlexception
resultsetmetadata rsmd   rs getmetadata
checknotnull rsmd
vector nestedresults
int numberofrowsselected   0
// autocommit must be off or the nested cursors
// are closed when the outer statement completes.
if   conn getautocommit
nestedresults   new vector
else
nestedresults   null
if displaycolumnwidths    null
displaycolumnwidths   getcolumndisplaywidths rsmd  displaycolumns  false
int len   indent_displaybanner out rsmd  indentlevel  displaycolumns
displaycolumnwidths
// when displaying rows, keep going past errors
// unless/until the maximum # of errors is reached.
boolean donext   true
int retry   0
while  donext
try
donext   rs next
if  donext
displayrow out  rs  rsmd  len  nestedresults  conn
indentlevel  displaycolumns
displaycolumnwidths
showwarnings out  rs
numberofrowsselected
catch  sqlexception e
// revisit: might want to check the exception
// and for some, not bother with the retry.
if    retry > max_retries
throw e
else
showsqlexception out  e
if  showselectcount    true
if  numberofrowsselected    1
out println
indentedprintline  out  indentlevel
else if  numberofrowsselected >  0
out println
indentedprintline  out  indentlevel  numberofrowsselected
displaynestedresults out  nestedresults  conn  indentlevel
nestedresults   null
static private void displaynestedresults printstream out  vector nr  connection conn  int indentlevel
throws sqlexception
if  nr    null  return
string s
string b
string oldstring
for  int i 0  i < nr size    i
system out println
//just too clever to get the extra +s
string t   integer tostring i
if  t length   > oldstring length
oldstring   t
b b
system out println b
system out println s i
system out println b
indent_displayresults out   resultset  nr elementat i   conn
indentlevel  null  null
static public void displaynextrow printstream out  resultset rs  connection conn
throws sqlexception
indent_displaynextrow  out  rs  conn  0  null   rs    null  ? null
getcolumndisplaywidths rs getmetadata   null false
static private void indent_displaynextrow printstream out  resultset rs  connection conn  int indentlevel
int displaycolumns  int displaycolumnwidths
throws sqlexception
vector nestedresults
// autocommit must be off or the nested cursors
// are closed when the outer statement completes.
if   conn getautocommit
nestedresults   new vector
else
nestedresults   null
checknotnull rs
resultsetmetadata rsmd   rs getmetadata
checknotnull rsmd
// only print stuff out if there is a row to be had.
if  rs next
int rowlen   indent_displaybanner out  rsmd  indentlevel  null  null
displayrow out  rs  rsmd  rowlen  nestedresults  conn  indentlevel
displaycolumns  displaycolumnwidths
else
indentedprintline  out  indentlevel  localizedresource getmessage
showwarnings out  rs
displaynestedresults out  nestedresults  conn  indentlevel
nestedresults   null
displaynextrow
static public void displaycurrentrow printstream out  resultset rs  connection conn
throws sqlexception
indent_displaycurrentrow  out  rs  conn  0  null   rs    null  ? null
getcolumndisplaywidths rs getmetadata   null false
static private void indent_displaycurrentrow printstream out  resultset rs  connection conn
int indentlevel  int displaycolumns  int displaycolumnwidths
throws sqlexception
vector nestedresults
if  rs    null
indentedprintline  out  indentlevel  localizedresource getmessage
return
// autocommit must be off or the nested cursors
// are closed when the outer statement completes.
if   conn getautocommit
nestedresults   new vector
else
nestedresults   null
resultsetmetadata rsmd   rs getmetadata
checknotnull rsmd
int rowlen   indent_displaybanner out  rsmd  indentlevel  displaycolumns  displaycolumnwidths
displayrow out  rs  rsmd  rowlen  nestedresults  conn  indentlevel
displaycolumns  displaycolumnwidths
showwarnings out  rs
displaynestedresults out  nestedresults  conn  indentlevel
nestedresults   null
displaynextrow
static public int displaybanner printstream out  resultsetmetadata rsmd
throws sqlexception
return indent_displaybanner  out  rsmd  0  null
getcolumndisplaywidths rsmd null false
static private int indent_displaybanner printstream out  resultsetmetadata rsmd  int indentlevel
int displaycolumns  int displaycolumnwidths
throws sqlexception
stringbuffer buf   new stringbuffer
int numcols   displaycolumnwidths length
int rowlen
// do some precalculation so the buffer is allocated only once
// buffer is twice as long as the display length plus one for a newline
rowlen    numcols   1      for the column separators
for  int i 1  i <  numcols  i
rowlen    displaycolumnwidths
buf ensurecapacity rowlen
// get column header info
// truncate it to the column display width
// add a bar between each item.
for  int i 1  i <  numcols  i
int colnum   displaycolumns  null ? i   displaycolumns
if  i>1
buf append
string s   rsmd getcolumnlabel colnum
int w   displaycolumnwidths
if  s length   < w
// build a string buffer to hold the whitespace
stringbuffer blanks   new stringbuffer s
blanks ensurecapacity w
// try to paste on big chunks of space at a time.
for  int k blanks length   64  k< w  k  64
blanks append
for  int k blanks length   16  k< w  k  16
blanks append
for  int k blanks length   4  k< w  k  4
blanks append
for  int k blanks length    k<w  k
blanks append
buf append blanks
// remind: could do more cleverness, like keep around
// past buffers to reuse...
else if  s length   > w
if  w > 1
buf append s substring 0 w 1
if  w > 0
buf append
else
buf append s
buf setlength math min rowlen  1024
indentedprintline  out  indentlevel  buf
// now print a row of '-'s
for  int i 0  i<math min rowlen  1024   i
buf setcharat i
indentedprintline  out  indentlevel  buf
buf   null
return rowlen
displaybanner
static private void displayrow printstream out  resultset rs  resultsetmetadata rsmd  int rowlen  vector nestedresults  connection conn  int indentlevel
int displaycolumns  int displaycolumnwidths
throws sqlexception
stringbuffer buf   new stringbuffer
buf ensurecapacity rowlen
int numcols   displaycolumnwidths length
int i
// get column header info
// truncate it to the column display width
// add a bar between each item.
for  i 1  i <  numcols  i
int colnum   displaycolumns  null ? i   displaycolumns
if  i>1
buf append
string s
switch  rsmd getcolumntype colnum
default
s   rs getstring colnum
break
case org apache derby iapi reference jdbc20translation sql_types_java_object
case types other
object o   rs getobject colnum
if  o    null    s
else if  o instanceof resultset    nestedresults    null
s     nestedresults size
nestedresults addelement o
else
try
s   rs getstring colnum
catch  sqlexception se
// oops, they don't support refetching the column
s   o tostring
break
if  s  null  s
int w   displaycolumnwidths
if  s length   < w
stringbuffer fulls   new stringbuffer s
fulls ensurecapacity w
for  int k s length    k<w  k
fulls append
s   fulls tostring
else if  s length   > w
// add the & marker to know it got cut off
s   s substring 0 w 1
buf append s
indentedprintline  out  indentlevel  buf
displayrow
static public void dotrace printstream out  exception e
if  boolean getboolean
e printstacktrace out
out flush
static	private	void	indentedprintline  printstream out  int indentlevel  string text
indent  out  indentlevel
out println  text
static	private	void	indentedprintline  printstream out  int indentlevel  stringbuffer text
indent  out  indentlevel
out println  text
static	private	void	indent  printstream out  int indentlevel
for   int ictr   0  ictr < indentlevel  ictr       out print
// ==========================