/*
derby - class org.apache.derbybuild.propertyconfig
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derbybuild
import java util properties
import java io fileinputstream
import java io fileoutputstream
import java io ioexception
import java io file
import java util stringtokenizer
import java util properties
import java util enumeration
/**
*
* usage:
* java propertyconfig <master file> <config> <output file>
* <b> e.g., java propertyconfig dbms.properties cloudsync
* cloudsync.dbms.properties
*
* <p>
* this program takes a master property file, and using the configuration
* specification, generate an output file that only contains the properties
* for that particular configuration.
*
* <p>
* for the different types of legitamite configurations, please see
* org.apache.derby.modules.properties
*
* <p>
* propertysplitter will look at cloudscape.config.<tag> to see which
* configuration a particular module belongs to.
* <b>e.g., cloudscape.config.datacomm.listen=cloudtarget,cloudsync
* <b>this means all properties associated with datacomm.listen will be
* in the output properties file only if we are generating for the cloudsync or
* cloudtarget configuration.  they will not be in the output properties file
* if we are generating for the cloud or cloudscape configuration.
*
*/
public class propertyconfig
public static string header
public static string footer
public static void main string args  throws ioexception
if  args length    3
printusageandexit
file masterfile   new file args
file outputfile   new file args
if   masterfile exists
printusageandexit
// ok, got the input cleared up, now do the processing
properties masterprop   new properties
fileinputstream is   new fileinputstream masterfile
try
masterprop load is
finally
if  is    null
is close
process masterprop  args  outputfile
/**
* for each module with a particular tag in derby.module.<tag>, see if
* there is any configuration restriction.  if there is no
* cloudscape.config.<tag> property, then this module should be present in
* all configurations.  if there is a cloudscape.config.<tag>, then this
* module should only be present in the configurations listed.
*
* <br>if this module should be present or this configuration, then gather
* up all the properties belong to this module and send it to the output
* file.
*
*/
private static void process properties modulelist  string config
file outputfile
throws ioexception
properties outputprop   new properties
// copy this code from
// org.apache.derby.impl.services.monitor.basemonitor
//
for  enumeration e   modulelist propertynames    e hasmoreelements
string key    string  e nextelement
if  key startswith
string tag   key substring   length
// check to see if it has any configuration requirements
string configkey     concat tag
string configprop   modulelist getproperty configkey
boolean match   false
if  configprop    null
stringtokenizer st   new stringtokenizer configprop
while st hasmoretokens
string s   st nexttoken   trim
// if config spec says all, it should not have other
// configurations
if  s equalsignorecase
configprop trim   equals
system out println
key
system exit 3
// if config spec says none, it should not have other
// configurations
if  s equalsignorecase
configprop trim   equals
system out println
key
system exit 4
if  s equalsignorecase config
s equalsignorecase
match   true
break
else
// no config property, this module goes to all configs
system out println     key
system exit 2
if  match
// gather up all relavant properties and put it in
// outputprop
// derby.module.<tag>
outputprop put key  modulelist getproperty key
// don't output cloudscape.config.<tag>
// that line only has meaning to this program
// derby.env.classes.<tag>
string envkey     concat tag
if  modulelist getproperty envkey     null
outputprop put envkey  modulelist getproperty envkey
// derby.env.jdk.<tag>
//
// some of the configs only support one java env.  some modules
// have alternate implementation for running on java1 and
// java2 platforms.  if we get rid of, say, the java2
// implementation, then the monitor won't load the java1
// implementation if that module specifies that it should
// only be loaded in a java1 environment.  the result is
// that some critical modules will be missing and the
// database won't boot.
//
// the convention is, for modules that have both java1 and
// java2 implementation, they must named the module as
// derby.env.jdk.<name>j1 or
// derby.env.jdk.<name>j2
// in other words, the <tag> must end with j1 or j2.
//
// if a config only use one of the two implementation, then
// this program will not put the one env.jdk line to the
// output properties.  as a result, this one implementation
// will be loaded when run in any environment.
//
// this does not apply to any module that only has one
// implementation that runs on a specific jdk environment.
//
//derby.env.jdk.<tag>
envkey     concat tag
if  modulelist getproperty envkey     null
// by default keep the jdk env specification with the
// config
boolean saveenvkey   true
// figure out if this is a tag of the form <name>j1 or
// <name>j2.
if  tag endswith       tag endswith
// ok, this is a module with alternate
// implementation for java 1 and java 2.  if this
// config ditches one of them, then do not output
// the env line
int length   tag length     2
string alternatetag   tag substring 0  length
if  tag endswith
alternatetag
else
alternatetag
// see if
// 1) this module has an alternate impl for the
// other jdk and
// 2) this config is not going to pick it up.
//
string alternateimplkey
alternatetag
string alternatejdkenv
alternatetag
string alternateimplconfigkey
alternatetag
// if any of of these are not present, then we
// don't have a problem because either there is no
// alternate implementation, or the alternate
// implementation is not based on jdk, or the
// alternate jdk based implemenation will also be
// present in this configuration
if   modulelist getproperty alternateimplkey     null
modulelist getproperty alternatejdkenv     null
modulelist getproperty alternateimplconfigkey     null
// there is an alternate impl that is jdk based
// and it has a config tag.  let's see if it is
// part of this config.
string alternateconfigprop
modulelist getproperty alternateimplconfigkey
// we know that there are
// derby.module.<tag>j2 and
// derby.module.<tag>j1 and
// derby.env.jdk.<tag>j2 and
// derby.env.jdk.<tag>j1 and
// cloudscape.config.<tag>j2 and
// cloudscape.config.<tag>j1
stringtokenizer st2   new
stringtokenizer alternateconfigprop
boolean ok   false
while st2 hasmoretokens
string s   st2 nexttoken   trim
if  s equalsignorecase config
s equalsignorecase
ok   true
break
// the alternate module impl is not part of
// this config, do not save the jdk env key
if   ok
saveenvkey   false
if  saveenvkey
outputprop put envkey  modulelist getproperty envkey
// note, if other types of properties are added to
// modules.properties, be sure to add it here too.
fileoutputstream os   new fileoutputstream outputfile
try
outputprop save os
header
concat    concat config
concat footer
finally
if  os    null
os close
private static void printusageandexit
stringbuffer buf   new stringbuffer 400
buf append
append
append
append
append
append
append
append
append
system out println buf tostring
system exit 1