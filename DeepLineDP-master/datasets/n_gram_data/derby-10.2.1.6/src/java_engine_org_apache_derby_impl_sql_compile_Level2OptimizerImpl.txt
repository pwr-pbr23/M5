/*
derby - class org.apache.derby.impl.sql.compile.level2optimizerimpl
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl sql compile
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi error standardexception
import org apache derby iapi sql compile joinstrategy
import org apache derby iapi sql compile optimizable
import org apache derby iapi sql compile optimizablelist
import org apache derby iapi sql compile optimizablepredicate
import org apache derby iapi sql compile optimizablepredicatelist
import org apache derby iapi sql compile optimizer
import org apache derby iapi sql compile costestimate
import org apache derby iapi sql compile requiredrowordering
import org apache derby iapi sql compile rowordering
import org apache derby iapi sql compile accesspath
import org apache derby iapi sql conn languageconnectioncontext
import org apache derby iapi sql dictionary conglomeratedescriptor
import org apache derby iapi sql dictionary datadictionary
import org apache derby iapi sql dictionary indexrowgenerator
import org apache derby iapi sql dictionary tabledescriptor
import org apache derby iapi reference sqlstate
import org apache derby iapi util jbitset
import org apache derby impl sql compile optimizerimpl
import org apache derby impl sql compile costestimateimpl
import java util properties
/**
* this is the level 2 optimizer.
*/
public class level2optimizerimpl extends optimizerimpl
private languageconnectioncontext lcc
level2optimizerimpl optimizablelist optimizablelist
optimizablepredicatelist predicatelist
datadictionary ddictionary
boolean rulebasedoptimization
boolean notimeout
boolean usestatistics
int maxmemorypertable
joinstrategy joinstrategies
int tablelockthreshold
requiredrowordering requiredrowordering
int numtablesinquery
languageconnectioncontext lcc
throws standardexception
super optimizablelist  predicatelist  ddictionary
rulebasedoptimization  notimeout  usestatistics  maxmemorypertable
joinstrategies  tablelockthreshold  requiredrowordering
numtablesinquery
// remember whether or not optimizer trace is on;
optimizertrace   lcc getoptimizertrace
optimizertracehtml   lcc getoptimizertracehtml
this lcc   lcc
// optimization started
if  optimizertrace
trace started  0  0  0 0  null
/** @see optimizer#getlevel */
public int getlevel
return 2
/** @see optimizer#newcostestimate */
public costestimate newcostestimate
return new level2costestimateimpl
public costestimateimpl getnewcostestimate double thecost
double therowcount
double thesinglescanrowcount
return new level2costestimateimpl thecost  therowcount  thesinglescanrowcount
// optimzer trace
public void trace int traceflag  int intparam1  int intparam2
double doubleparam  object objectparam1
conglomeratedescriptor cd
string cdstring
string tracestring   null
// we can get called from outside optimizer when tracing is off
if   optimizertrace
return
switch  traceflag
case started
tracestring
timeoptimizationstarted
this hashcode
break
case time_exceeded
tracestring
currenttime       bestcost
break
case no_tables
tracestring
break
case complete_join_order
tracestring
break
case cost_of_sorting
tracestring
sortcost
break
case no_best_plan
tracestring
break
case modifying_access_paths
tracestring
this hashcode
break
case short_circuiting
string basis    timeexceeded  ?
optimizable thisopt
optimizablelist getoptimizable
proposedjoinorder
if  thisopt getbestaccesspath   getcostestimate      null
basis
tracestring
basis
joinposition
break
case skipping_join_order
tracestring   buildjoinorder    true  intparam1
proposedjoinorder
break
case illegal_user_join_order
tracestring
break
case user_join_order_optimized
tracestring
break
case considering_join_order
tracestring   buildjoinorder    false  intparam1
proposedjoinorder
break
case total_cost_non_sa_plan
tracestring
currentcost
break
case total_cost_sa_plan
tracestring
currentsortavoidancecost
break
case total_cost_with_sorting
tracestring
currentcost
break
case current_plan_is_sa_plan
tracestring
bestcost
currentsortavoidancecost
break
case cheapest_plan_so_far
tracestring
break
case plan_type
tracestring
intparam1    optimizer normal_plan ?
break
case cost_of_cheapest_plan_so_far
tracestring
currentcost
break
case sort_needed_for_ordering
tracestring
intparam1    optimizer sort_avoidance_plan
requiredrowordering
break
case remembering_best_join_order
tracestring   buildjoinorder    false  intparam1
bestjoinorder
break
case skipping_due_to_excess_memory
tracestring
maxmemorypertable
break
case cost_of_n_scans
tracestring
doubleparam
objectparam1
intparam1
break
case hj_skip_not_materializable
tracestring
break
case hj_skip_no_join_columns
tracestring
break
case hj_hash_key_columns
int hashkeycolumns    int   objectparam1
tracestring       hashkeycolumns length
for  int index   0  index < hashkeycolumns length  index
tracestring
tracestring       index
hashkeycolumns
break
case calling_on_join_node
tracestring
break
case considering_join_strategy
joinstrategy js    joinstrategy  objectparam1
tracestring
js       intparam1
break
case remembering_best_access_path
tracestring
objectparam1
intparam1
intparam2    optimizer normal_plan ?
break
case no_more_conglomerates
tracestring
intparam1
break
case considering_conglomerate
cd    conglomeratedescriptor  objectparam1
cdstring   dumpconglomeratedescriptor cd
tracestring
cdstring
intparam1
break
case scanning_heap_full_match_on_unique_key
tracestring
break
case adding_unordered_optimizable
tracestring       intparam1
break
case changing_access_path_for_table
tracestring       intparam1
break
case table_lock_no_start_stop
tracestring
break
case non_covering_index_cost
tracestring
doubleparam
intparam1
break
case row_lock_all_constant_start_stop
tracestring
break
case estimating_cost_of_conglomerate
cd    conglomeratedescriptor  objectparam1
cdstring   dumpconglomeratedescriptor cd
tracestring
costfortable cdstring  intparam1
break
case looking_for_specified_index
tracestring
objectparam1
intparam1
break
case match_single_row_cost
tracestring
doubleparam       intparam1
break
case cost_including_extra_1st_col_selectivity
tracestring   costincluding
objectparam1  intparam1
tracestring
objectparam1       intparam1
break
case calling_next_access_path
tracestring
objectparam1       intparam1
break
case table_lock_over_threshold
tracestring   lockmodethreshold
doubleparam  intparam1
break
case row_lock_under_threshold
tracestring   lockmodethreshold
doubleparam  intparam1
break
case cost_including_extra_start_stop
tracestring   costincluding
objectparam1  intparam1
break
case cost_including_extra_qualifier_selectivity
tracestring   costincluding
objectparam1  intparam1
break
case cost_including_extra_nonqualifier_selectivity
tracestring   costincluding
objectparam1  intparam1
break
case cost_including_composite_sel_from_stats
tracestring   costincluding
objectparam1  intparam1
break
case cost_including_stats_for_index
tracestring   costincluding
objectparam1  intparam1
break
case composite_sel_from_stats
tracestring
doubleparam
break
case cost_of_noncovering_index
tracestring
costfortable objectparam1  intparam1
break
case remembering_join_strategy
tracestring
objectparam1
intparam1
break
case remembering_best_access_path_substring
tracestring
break
case remembering_best_sort_avoidance_access_path_substring
tracestring
break
case remembering_best_unknown_access_path_substring
tracestring
break
case cost_of_conglomerate_scan1
cd    conglomeratedescriptor  objectparam1
cdstring   dumpconglomeratedescriptor cd
tracestring
cdstring
intparam1
break
case cost_of_conglomerate_scan2
tracestring
objectparam1 tostring
break
case cost_of_conglomerate_scan3
tracestring
intparam1
doubleparam
break
case cost_of_conglomerate_scan4
tracestring
intparam1
doubleparam
break
case cost_of_conglomerate_scan5
tracestring
intparam1
doubleparam
break
case cost_of_conglomerate_scan6
tracestring
intparam1
doubleparam
break
case cost_of_conglomerate_scan7
tracestring
intparam1
doubleparam
break
if  sanitymanager debug
if  tracestring    null
sanitymanager throwassert
lcc appendoptimizertraceoutput tracestring
private string costfortable object cost  int tablenumber
return cost       tablenumber
private string bestcost
return     bestcost
private string buildjoinorder string prefix  boolean addjoinordernumber
int joinordernumber  int joinorder
string joinorderstring   prefix
for  int i   0  i <  joinposition  i
joinorderstring   joinorderstring       joinorder
if  addjoinordernumber
joinorderstring   joinorderstring       joinordernumber
return joinorderstring       assignedtablemap
private string lockmodethreshold
string lockmode  string relop
double rowcount  int threshold
return
lockmode
rowcount
relop       threshold
private string costincluding
string selectivitytype  object objectparam1  int intparam1
return
selectivitytype
costfortable objectparam1  intparam1
private string dumpconglomeratedescriptor conglomeratedescriptor cd
if  sanitymanager debug
return cd tostring
string		keystring
string	columnnames   cd getcolumnnames
if  cd isindex      columnnames    null
indexrowgenerator irg   cd getindexdescriptor
int keycolumns   irg basecolumnpositions
keystring       columnnames   1]
for  int index   1  index < keycolumns length  index
keystring   keystring       columnnames   1]
keystring   keystring
return     cd getconglomeratenumber
cd getconglomeratename
cd getuuid
cd isindex
keystring