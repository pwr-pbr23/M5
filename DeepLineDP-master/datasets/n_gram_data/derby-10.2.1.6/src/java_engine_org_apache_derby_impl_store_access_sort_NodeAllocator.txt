/*
derby - class org.apache.derby.impl.store.access.sort.nodeallocator
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl store access sort
/**
nodeallocator manages an array of nodes which can be reused.
**/
final class nodeallocator
private static final int default_init_size   128
private static final int growth_multiplier   2
private static final int default_max_size   1024
private node array
private int maxsize
private int nallocated
private node freelist   null
/**
construct an empty allocator.  the caller must call
init() before using it.
**/
public nodeallocator
array   null
nallocated   0
maxsize   0
public node newnode
// caller forgot to init?
if  array    null
if  init      false
return null
if  freelist    null
node n   freelist
freelist   n rightlink
n rightlink   null
return n
// do we need to try reallocating the array?
if  nallocated    array length
// if the array is already the maximum size, then
// tell the caller that there are no more nodes
// available.
if  array length >  maxsize
return null
// attempt to allocate a new array.  if the allocation
// fails, tell the caller that there are no more
// nodes available.
node newarray   new node
if  newarray    null
return null
// the new array was successfully allocated.  copy the
// nodes from the original array into it, and make the
// new array the allocator's array.
system arraycopy array  0  newarray  0  array length
array   newarray
// if this slot in the array hasn't had a node
// allocated for it yet, do so now.
if  array    null
array   new node nallocated
// return the node and increase the allocated count.
return array
/**
return a node to the allocator.
**/
public void freenode node n
n reset
n rightlink   freelist
freelist   n
/**
initialize the allocator with default values for
initial and maximum size.  returns false if sufficient
memory could not be allocated.
**/
public boolean init
return init default_init_size  default_max_size
/**
initialize the allocator with default values for
initial size and the provided maximum size.
returns false if sufficient	memory could not be allocated.
**/
public boolean init int maxsize
return init default_init_size  maxsize
/**
initialize the allocator with the given initial and
maximum sizes.  this method does not check, but assumes
that the value of initsize is less than the value of
maxsize, and that they are both powers of two. returns
false if sufficient memory could not be allocated.
**/
public boolean init int initsize  int maxsize
this maxsize   maxsize
if  maxsize < initsize
initsize   maxsize
array   new node
if  array    null
return false
nallocated   0
return true
/**
expand the node allocator's capacity by certain percent.
**/
public void grow int percent
if  percent > 0 		   cannot shrink
maxsize   maxsize    100 percent  100
/**
clear all nodes that this allocator has allocated.
the allocator must already have been initialized.
**/
public void reset
if  array    null
return
for  int i   0  i < nallocated  i
array reset
nallocated   0
freelist   null
public void close
array   null
nallocated   0
maxsize   0
freelist   null
public int capacity
return maxsize