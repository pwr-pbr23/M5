/*
derby - class org.apache.derby.impl.store.raw.xact.xactcontext
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl store raw xact
import org apache derby iapi reference sqlstate
// this is the recommended super-class for all contexts.
import org apache derby iapi services context contextimpl
import org apache derby iapi services context contextmanager
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi store raw rawstorefactory
import org apache derby iapi store raw xact rawtransaction
import org apache derby iapi error standardexception
import org apache derby iapi error exceptionseverity
/**
the context associated with the transaction.
this object stores the context associated with the raw store transaction
on the stack.  it stores info about the transaction opened within a
context manager (ie. typically a single user) for a single rawstorefactory.
**/
final class xactcontext extends contextimpl
private		rawtransaction	xact
private     rawstorefactory factory
private		boolean   abortall     true if any exception causes this transaction to be aborted
xactcontext contextmanager cm  string name  xact xact  boolean abortall  rawstorefactory factory
super cm  name
this xact   xact
this abortall   abortall
this factory   factory
xact xc   this 	   double link between transaction and myself
/*
** context methods (most are implemented by super-class)
*/
/**
@exception standardexception standard cloudscape error policy
*/
public void cleanuponerror throwable error  throws standardexception
if  sanitymanager debug
sanitymanager assert getcontextmanager      null
boolean throwaway   false
if  error instanceof standardexception
standardexception se    standardexception  error
if  abortall
// any error aborts an internal/nested xact and its transaction
if  se getseverity   < exceptionseverity transaction_severity
throw standardexception newexception
sqlstate xact_internal_transaction_exception  error
throwaway   true
else
// if the severity is lower than a transaction error then do nothing.
if  se getseverity   < exceptionseverity transaction_severity
return
// if the session is going to disappear then we want to close this
// transaction, not just abort it.
if  se getseverity   >  exceptionseverity session_severity
throwaway   true
else
// some java* error, throw away the transaction.
throwaway   true
try
if  xact    null
// abort the transaction
xact abort
catch  standardexception se
// if we get an error during abort then shut the system down
throwaway   true
// if the system was being shut down anyway, do nothing
if   se getseverity   <  exceptionseverity session_severity
se getseverity   >    standardexception  error  getseverity
throw factory markcorrupt
standardexception newexception
sqlstate xact_abort_exception  se
finally
if  throwaway
// xact close will pop this context out of the context
// stack
xact close
xact   null
rawtransaction gettransaction
return xact
rawstorefactory getfactory
return factory
void substitutetransaction xact newtran
// disengage old tran from this xact context
xact oldtran    xact xact
if  oldtran xc    this
oldtran xc   null
// set up double link between new transaction and myself
xact   newtran
xact xact  xc   this