/*
derby - class org.apache.derby.impl.jdbc.utf8reader
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl jdbc
import java io inputstream
import java io reader
import java io ioexception
import java io utfdataformatexception
import java io eofexception
import java sql sqlexception
/**
*/
public final class utf8reader extends reader
private inputstream in
private final long         utflen 	   bytes
private long        utfcount 		   bytes
private long		readercharcount     characters
private long		maxfieldsize 	   characeters
private char		buffer   new char
private int			charactersinbuffer 	   within buffer
private int			readpositioninbuffer
private boolean		nomorereads
// maintain a reference to the parent object so that it can't get
// garbage collected until we are done with the stream.
private connectionchild      parent
public utf8reader
inputstream in
long maxfieldsize
connectionchild      parent
object synchronization
throws ioexception
super synchronization
this in       in
this maxfieldsize   maxfieldsize
this parent   parent
synchronized  lock
this utflen   readunsignedshort
/*
** reader implemention.
*/
public int read   throws ioexception
synchronized  lock
// check if closed..
if  nomorereads
throw new ioexception
if  readpositioninbuffer >  charactersinbuffer
if  fillbuffer
return  1
readpositioninbuffer   0
return buffer
public int read char cbuf  int off  int len  throws ioexception
synchronized  lock
// check if closed..
if  nomorereads
throw new ioexception
if  readpositioninbuffer >  charactersinbuffer
if  fillbuffer
return  1
readpositioninbuffer   0
int remaininginbuffer   charactersinbuffer   readpositioninbuffer
if  len > remaininginbuffer
len   remaininginbuffer
system arraycopy buffer  readpositioninbuffer  cbuf  off  len
readpositioninbuffer    len
return len
public long skip long len  throws ioexception
synchronized  lock
// check if closed..
if  nomorereads
throw new ioexception
if  readpositioninbuffer >  charactersinbuffer
// do somthing
if  fillbuffer
return  1
readpositioninbuffer   0
int remaininginbuffer   charactersinbuffer   readpositioninbuffer
if  len > remaininginbuffer
len   remaininginbuffer
readpositioninbuffer    len
return len
public void close
synchronized  lock
closein
parent    null
nomorereads   true
/*
** methods just for cloudscape's jdbc driver
*/
public int readinto stringbuffer sb  int len  throws ioexception
synchronized  lock
if  readpositioninbuffer >  charactersinbuffer
if  fillbuffer
return  1
readpositioninbuffer   0
int remaininginbuffer   charactersinbuffer   readpositioninbuffer
if  len > remaininginbuffer
len   remaininginbuffer
sb append buffer  readpositioninbuffer  len
readpositioninbuffer    len
return len
int readasciiinto byte abuf  int off  int len  throws ioexception
synchronized  lock
if  readpositioninbuffer >  charactersinbuffer
if  fillbuffer
return  1
readpositioninbuffer   0
int remaininginbuffer   charactersinbuffer   readpositioninbuffer
if  len > remaininginbuffer
len   remaininginbuffer
char lbuffer   buffer
for  int i   0  i < len  i
char c   lbuffer
byte cb
if  c <  255
cb    byte  c
else
cb    byte        question mark   out of range character
abuf   cb
readpositioninbuffer    len
return len
/*
** internal implementation
*/
private void closein
if  in    null
try
in close
catch  ioexception ioe
finally
in   null
private ioexception utfformatexception string s
nomorereads   true
closein
return new utfdataformatexception s
private ioexception utfformatexception
nomorereads   true
closein
return new utfdataformatexception
/**
fill the buffer, return true if eof has been reached.
*/
private boolean fillbuffer   throws ioexception
if  in    null
return true
charactersinbuffer   0
try
try
parent setupcontextstack
readchars
while
charactersinbuffer < buffer length
utfcount < utflen      utflen    0
maxfieldsize    0      readercharcount < maxfieldsize
int c   in read
if  c     1
if  utflen    0
closein
break readchars
throw utfformatexception
int finalchar
switch  c >> 4
case 0  case 1  case 2  case 3  case 4  case 5  case 6  case 7
// 0xxxxxxx
utfcount
finalchar   c
break
case 12  case 13
// 110x xxxx   10xx xxxx
utfcount    2
int char2   in read
if  char2     1
throw utfformatexception
if   char2   0xc0     0x80
throw utfformatexception
finalchar      c   0x1f  << 6     char2   0x3f
break
case 14
// 1110 xxxx  10xx xxxx  10xx xxxx
utfcount    3
int char2   in read
int char3   in read
if  char2     1    char3     1
throw utfformatexception
if   c    0xe0      char2    0      char3    0
if  utflen    0
// we reached the end of a long string,
// that was terminated with
// (11100000, 00000000, 00000000)
closein
break readchars
throw utfformatexception
if    char2   0xc0     0x80       char3   0xc0     0x80
throw utfformatexception
finalchar      c   0x0f  << 12
char2   0x3f  << 6
char3   0x3f  << 0
break
default
// 10xx xxxx,  1111 xxxx
throw utfformatexception
buffer    char  finalchar
readercharcount
if  utflen    0    utfcount > utflen
throw utfformatexception     utfcount       utflen
if  charactersinbuffer    0
return false
closein
return true
finally
parent restorecontextstack
catch  sqlexception sqle
throw new ioexception sqle getsqlstate         sqle getmessage
// this method came from java.io.datainputstream
private final int readunsignedshort   throws ioexception
int ch1   in read
int ch2   in read
if   ch1   ch2  < 0
throw new eofexception
return  ch1 << 8     ch2 << 0