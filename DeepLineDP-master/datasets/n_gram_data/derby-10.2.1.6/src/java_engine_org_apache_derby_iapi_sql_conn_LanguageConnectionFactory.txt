/*
derby - class org.apache.derby.iapi.sql.conn.languageconnectionfactory
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi sql conn
import org apache derby iapi error standardexception
import org apache derby iapi db database
import org apache derby iapi store access accessfactory
import org apache derby iapi services property propertyfactory
import org apache derby iapi sql compile optimizerfactory
import org apache derby iapi sql compile nodefactory
import org apache derby iapi sql compile compilercontext
import org apache derby iapi types datavaluefactory
import org apache derby iapi sql compile typecompilerfactory
import org apache derby iapi sql execute executionfactory
import org apache derby iapi sql activation
import org apache derby iapi sql statement
import org apache derby iapi sql compile parser
import org apache derby iapi services uuid uuidfactory
import org apache derby iapi services compiler javafactory
import org apache derby iapi services loader classfactory
import org apache derby iapi services context contextmanager
import org apache derby iapi services cache cachemanager
import org apache derby iapi sql languagefactory
import org apache derby iapi store access transactioncontroller
import org apache derby iapi sql dictionary schemadescriptor
import java io inputstream
import java util locale
/**
* factory interface for items specific to a connection in the language system.
* this is expected to be used internally, and so is not in language.interface.
* <p>
* this factory provides pointers to other language factories; the
* languageconnectioncontext holds more dynamic information, such as
* prepared statements and whether a commit has occurred or not.
* <p>
* this factory is for internal items used throughout language during a
* connection. things that users need for the database api are in
* languagefactory in language.interface.
* <p>
* this factory returns (and thus starts) all the other per-database
* language factories. so there might someday be properties as to which
* ones to start (attributes, say, like level of optimization).
* if the request is relative to a specific connection, the connection
* is passed in. otherwise, they are assumed to be database-wide services.
*
* @see org.apache.derby.iapi.sql.languagefactory
*
* @author ames
*/
public interface languageconnectionfactory
/**
used to locate this factory by the monitor basic service.
there needs to be a language factory per database.
*/
string module
/**
get a statement
@param compilationschema schema
@param statementtext the text for the statement
@param forreadonly true if concurrency mode is concur_read_only
@return	the statement
*/
statement getstatement schemadescriptor compilationschema  string statementtext  boolean forreadonly
/**
get a new languageconnectioncontext. this holds things
we want to remember about activity in the language system,
where this factory holds things that are pretty stable,
like other factories.
<p>
the returned languageconnectioncontext is intended for use
only by the connection that requested it.
@return a language connection context for the context stack.
@exception standardexception the usual
*/
languageconnectioncontext
newlanguageconnectioncontext contextmanager cm
transactioncontroller tc
languagefactory lf
database db
string username
string drdaid
string dbname
throws standardexception
/**
get the uuidfactory to use with this language connection
*/
uuidfactory	getuuidfactory
/**
get the classfactory to use with this language connection
*/
classfactory	getclassfactory
/**
get the javafactory to use with this language connection
*/
javafactory	getjavafactory
/**
get the nodefactory to use with this language connection
*/
nodefactory	getnodefactory
/**
get the executionfactory to use with this language connection
*/
executionfactory	getexecutionfactory
/**
get the propertyfactory to use with this language connection
*/
propertyfactory	getpropertyfactory
/**
get the accessfactory to use with this language connection
*/
accessfactory	getaccessfactory
/**
get the optimizerfactory to use with this language connection
*/
optimizerfactory	getoptimizerfactory
/**
get the typecompilerfactory to use with this language connection
*/
typecompilerfactory gettypecompilerfactory
/**
get the datavaluefactory to use with this language connection
this is expected to get stuffed into the language connection
context and accessed from there.
*/
datavaluefactory		getdatavaluefactory
public cachemanager getstatementcache
public parser newparser compilercontext cc