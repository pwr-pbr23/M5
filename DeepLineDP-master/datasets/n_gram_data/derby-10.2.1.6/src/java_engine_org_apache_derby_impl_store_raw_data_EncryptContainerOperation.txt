/*
derby - class org.apache.derby.impl.store.raw.data.encryptcontaineroperation
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl store raw data
import org apache derby iapi services io storedformatids
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi store raw compensation
import org apache derby iapi store raw transaction
import org apache derby iapi store raw undoable
import org apache derby iapi store raw loggable
import org apache derby iapi store raw data rawcontainerhandle
import org apache derby iapi store raw xact rawtransaction
import org apache derby iapi store raw log loginstant
import org apache derby iapi store raw containerkey
import org apache derby iapi error standardexception
import org apache derby iapi util bytearray
import java io objectoutput
import java io objectinput
import java io ioexception
import org apache derby iapi services io limitobjectinput
/**
* log operation to encrypt a container with a new encryption key or to encrypt
* an unencrypted container while configuring the database for
* encryption. container is  synced to the disk when encryption is
* is successfull, there is nothing to do on a redo. if there is crash/error
* while configuring a database for encryption; original version of the
* container is put backup during undo.
*
* <pre>
*  @format_id	logop_encrypt_container
* 	the formatid is written by formatidoutputstream when this object is
*	written out by writeobject
* @purpose to record enctyption of container with a new encryption key.
* @upgrade
* @disk_layout
*      containerid(containerkey)  the id of the container this operation applies to
*	@end_format
*  </pre>
*
*	@author  suresh thalamati
*  @see undoable
*/
public class encryptcontaineroperation implements undoable
private containerkey containerid
protected encryptcontaineroperation rawcontainerhandle hdl
throws standardexception
containerid   hdl getid
/*
* formatable methods
*/
// no-arg constructor, required by formatable
public encryptcontaineroperation     super
public void writeexternal objectoutput out  throws ioexception
containerid writeexternal out
public void readexternal objectinput in
throws ioexception  classnotfoundexception
containerid   containerkey read in
/**
loggable methods
*/
/**
the default for prepared log is always null for all the operations
that don't have optionaldata.  if an operation has optional data,
the operation need to prepare the optional data for this method.
encrypt operation has no optional data to write out
*/
public bytearray getpreparedlog
return  bytearray  null
public void releaseresource transaction tran
// no resources held to release.
/**
a space operation is a rawstore log record
*/
public int group
return loggable rawstore
/**
* check if this operation needs to be redone during recovery redo.
* returns true if this op should be redone during recovery redo,
* @param xact	the transaction that is doing the rollback
* @return  true, if this operation needs to be redone during recovery.
* @exception standardexception standard derby error policy
*/
public boolean needsredo transaction xact
throws standardexception
// this opeation should not be redone during recovery. encrypted version
// of the container are synced to the disk when it is complete. in case
// rollback containers are replaced with the origincal version.
return false
/**
return my format identifier.
*/
public int gettypeformatid
return storedformatids logop_encrypt_container
/**
* containers are not encryped on a redo. nothing to do in this method.
* @param tran      transaction doing the operation.
* @param instant   log instant for this operation.
* @param in        unused by this log operation.
*
* @exception standardexception standard cloudscape error policy
*/
public final void dome transaction tran  loginstant instant
limitobjectinput in
throws standardexception
// nothing to do here, containers are not encrypted on redo,
// if confuring the database for encryption fails. it is
// undone during  recovery. encryption of the container is done
// after the log record is flushed to the disk.
releaseresource tran
/**
undo of encrytpion of the container. original version of the container
that existed before the start of the database encryption is put back.
@param tran the transaction that is undoing this operation
@exception standardexception standard cloudscape error policy
*/
public void undome transaction tran  throws standardexception
// restore the container to the state it was before the encrytpion.
basedatafilefactory bdff
basedatafilefactory    rawtransaction  tran  getdatafactory
encryptdata ed   new encryptdata bdff
ed restorecontainer containerid
releaseresource tran
/**
* generate a compensation (encryptcontainerundooperation) that
* will rollback the changes made to the container during container
* encryption.
* @param tran	the transaction doing the compensating
* @param in	optional input; not used by this operation.
* @exception standardexception standard cloudscape error policy
*/
public compensation generateundo transaction tran  limitobjectinput in
throws standardexception
return new encryptcontainerundooperation this
/** debug */
public string tostring
if  sanitymanager debug
return      containerid
return null