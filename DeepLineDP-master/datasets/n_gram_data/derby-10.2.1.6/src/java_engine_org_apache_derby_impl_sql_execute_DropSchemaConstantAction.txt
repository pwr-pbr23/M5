/*
derby - class org.apache.derby.impl.sql.execute.dropschemaconstantaction
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl sql execute
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi error standardexception
import org apache derby iapi sql dictionary conglomeratedescriptor
import org apache derby iapi sql dictionary datadescriptorgenerator
import org apache derby iapi sql dictionary datadictionary
import org apache derby iapi sql dictionary schemadescriptor
import org apache derby iapi sql depend dependencymanager
import org apache derby iapi sql conn languageconnectioncontext
import org apache derby iapi store access transactioncontroller
import org apache derby iapi reference sqlstate
import org apache derby iapi sql execute constantaction
import org apache derby iapi sql activation
import org apache derby catalog uuid
/**
*	this class  describes actions that are always performed for a
*	drop schema statement at execution time.
*
*	@author jamie
*/
class dropschemaconstantaction extends ddlconstantaction
private final string				schemaname
// constructors
/**
*	make the constantaction for a drop table statement.
*
*	@param	schemaname			table name.
*
*/
dropschemaconstantaction string	schemaname
this schemaname   schemaname
///////////////////////////////////////////////
//
// object shadows
//
///////////////////////////////////////////////
public	string	tostring
// do not put this under sanitymanager.debug - it is needed for
// error reporting.
return     schemaname
// interface methods
/**
*	this is the guts of the execution-time logic for drop table.
*
*	@see constantaction#executeconstantaction
*
* @exception standardexception		thrown on failure
*/
public void	executeconstantaction  activation activation
throws standardexception
schemadescriptor	sd
languageconnectioncontext lcc   activation getlanguageconnectioncontext
datadictionary dd   lcc getdatadictionary
dependencymanager dm   dd getdependencymanager
transactioncontroller tc   lcc gettransactionexecute
/*
** inform the data dictionary that we are about to write to it.
** there are several calls to data dictionary "get" methods here
** that might be done in "read" mode in the data dictionary, but
** it seemed safer to do this whole operation in "write" mode.
**
** we tell the data dictionary we're done writing at the end of
** the transaction.
*/
dd startwriting lcc
sd   dd getschemadescriptor schemaname  null  true
//if user is attempting to drop session schema and there is no physical session schema, then throw an exception
//need to handle it this special way is because session schema is also used for temporary tables. if there is no
//physical session schema, we internally generate an in-memory session schema in order to support temporary tables
//but there is no way for the user to access that in-memory session schema. following if will be true if there is
//no physical session schema and hence getschemadescriptor has returned an in-memory session schema
if  schemaname equals schemadescriptor std_declared_global_temporary_tables_schema_name      sd    null      sd getuuid      null
throw standardexception newexception sqlstate lang_schema_does_not_exist  schemaname
/*
** make sure the schema is empty.
** in the future we want to drop everything
** in the schema if it is cascade.
*/
if   dd isschemaempty sd
throw standardexception newexception sqlstate lang_schema_not_empty  schemaname
/* prepare all dependents to invalidate.  (this is there chance
* to say that they can't be invalidated.  for example, an open
* cursor referencing a table/view that the user is attempting to
* drop.) if no one objects, then invalidate any dependent objects.
* we check for invalidation before we drop the table descriptor
* since the table descriptor may be looked up as part of
* decoding tuples in sysdepends.
*/
dm invalidatefor sd  dependencymanager drop_schema  lcc
dd dropschemadescriptor schemaname  tc
/*
** if we have dropped the current default schema,
** then we will set the default to null.  the
** lcc is free to set the new default schema to
** some system defined default.
*/
sd   lcc getdefaultschema
if   sd    null
schemaname equals sd getschemaname
lcc setdefaultschema  schemadescriptor null