/*
derby - class org.apache.derby.impl.sql.execute.aggregatorinfolist
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl sql execute
import org apache derby iapi services io storedformatids
import org apache derby iapi services io formatidutil
import org apache derby iapi services io formatable
import java io objectoutput
import java io objectinput
import java io ioexception
import java util vector
/**
* vector of aggergatorinfo objects.
*
* @see java.util.vector
*
* @author jamie
*/
public class aggregatorinfolist extends vector implements formatable
/********************************************************
**
**	this class implements formatable. that means that it
**	can write itself to and from a formatted stream. if
**	you add more fields to this class, make sure that you
**	also write/read them with the writeexternal()/readexternal()
**	methods.
**
**	if, inbetween releases, you add more fields to this class,
**	then you should bump the version number emitted by the gettypeformatid()
**	method.  or, since this is something that is used
**	in stored prepared statements, it is ok to change it
**	if you make sure that stored prepared statements are
**	invalidated across releases.
**
********************************************************/
/**
* niladic constructor for formatable
*/
public aggregatorinfolist
/**
* indicate whether i have a distinct or not.
*
* @return indicates if there is a distinct
*/
public boolean hasdistinct
int count   size
for  int i   0  i < count  i
aggregatorinfo agginfo    aggregatorinfo  elementat i
if  agginfo isdistinct
return true
return false
//////////////////////////////////////////////
//
// formatable
//
//////////////////////////////////////////////
/** @exception  ioexception thrown on error */
public void writeexternal objectoutput out  throws ioexception
int count   size
out writeint count
for  int i   0  i < count  i
out writeobject elementat i
/**
* @see java.io.externalizable#readexternal
*
* @exception ioexception on error
* @exception classnotfoundexception on error
*/
public void readexternal objectinput in  throws ioexception  classnotfoundexception
int count   in readint
ensurecapacity count
for  int i   0  i < count  i
aggregatorinfo agg    aggregatorinfo in readobject
addelement agg
/**
* get the formatid which corresponds to this class.
*
*	@return	the formatid of this class
*/
public	int	gettypeformatid  	  return storedformatids agg_info_list_v01_id
///////////////////////////////////////////////////////////////
//
// object interface
//
///////////////////////////////////////////////////////////////