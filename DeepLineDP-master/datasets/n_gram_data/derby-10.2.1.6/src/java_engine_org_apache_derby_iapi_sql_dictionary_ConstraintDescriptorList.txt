/*
derby - class org.apache.derby.iapi.sql.dictionary.constraintdescriptorlist
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi sql dictionary
import org apache derby iapi error standardexception
import org apache derby iapi services sanity sanitymanager
import org apache derby catalog uuid
import org apache derby iapi sql dictionary constraintdescriptor
import org apache derby iapi sql dictionary referencedkeyconstraintdescriptor
import org apache derby iapi sql dictionary datadictionary
import org apache derby iapi sql dictionary keyconstraintdescriptor
import org apache derby iapi sql dictionary schemadescriptor
import org apache derby iapi error standardexception
import org apache derby iapi services sanity sanitymanager
import org apache derby catalog uuid
import java util arraylist
public class constraintdescriptorlist extends arraylist
private boolean scanned
/**
* mark whether or not the underlying system table has
* been scanned.  (if a table does not have any
* constraints then the size of its cdl will always
* be 0.  we used these get/set methods to determine
* when we need to scan the table.
*
* @param scanned	whether or not the underlying system table has been scanned.
*/
public void setscanned boolean scanned
this scanned   scanned
/**
* return whether or not the underlying system table has been scanned.
*
* @return		where or not the underlying system table has been scanned.
*/
public boolean getscanned
return scanned
/**
* get the constraintdescriptor with the matching uuid string for the backing index.
*
* @param indexuuid		the uuid  for the backing index.
*
* @return the matching constraintdescriptor.
*/
public constraintdescriptor getconstraintdescriptor uuid indexuuid
constraintdescriptor retcd   null
int size   size
for  int index   0  index < size  index
constraintdescriptor cd   elementat index
if     cd instanceof keyconstraintdescriptor
continue
keyconstraintdescriptor keycd    keyconstraintdescriptor  cd
if  keycd getindexid   equals indexuuid
retcd   cd
break
return retcd
/**
* get the constraintdescriptor with the matching constraint id.
*
* @param uuid		the constraint id.
*
* @return the matching constraintdescriptor.
*/
public constraintdescriptor getconstraintdescriptorbyid uuid uuid
constraintdescriptor returncd   null
int size   size
for  int index   0  index < size  index
constraintdescriptor cd   elementat index
if  cd getuuid   equals uuid
returncd   cd
break
return returncd
/**
*	drop the constraint with the given uuid.
*
* @param uuid		the constraint id.
*
* @return the matching constraintdescriptor.
*/
public constraintdescriptor dropconstraintdescriptorbyid uuid uuid
constraintdescriptor cd   null
int size   size
for  int index   0  index < size  index
cd   elementat index
if  cd getuuid   equals uuid
remove  cd
break
return cd
/**
* get the constraintdescriptor with the matching constraint name.
*
* @param sd		the constraint schema descriptor.
* @param name		the constraint name.
*
* @return the matching constraintdescriptor.
*/
public constraintdescriptor getconstraintdescriptorbyname schemadescriptor sd
string name
constraintdescriptor retcd   null
int size   size
for  int index   0  index < size  index
constraintdescriptor cd   elementat index
if  cd getconstraintname   equals name
if   sd    null
sd equals cd getschemadescriptor
retcd   cd
break
return retcd
/**
* get the constraintdescriptor with the matching constraint name.
*
* @return the matching constraintdescriptor.
*/
public referencedkeyconstraintdescriptor getprimarykey
int size   size
for  int index   0  index < size  index
constraintdescriptor cd   elementat index
if  cd getconstrainttype      datadictionary primarykey_constraint
return  referencedkeyconstraintdescriptor cd
return  referencedkeyconstraintdescriptor null
/**
* return a list of constraints where enabled is
* as passed in.
*
* @param enabled true or false
*
* @return a constraint descriptor list built from this.  always
* a new list even if all the elements in this were of the correct
* type (i.e. not optimized for the case where every element is
* desired).
*/
public constraintdescriptorlist getconstraintdescriptorlist boolean enabled
constraintdescriptorlist cdl   new constraintdescriptorlist
int size   size
for  int index   0  index < size  index
constraintdescriptor cd   elementat index
if  cd isenabled      enabled
cdl add cd
return cdl
/**
* return the nth (0-based) element in the list.
*
* @param n	which element to return.
*
* @return the nth element in the list.
*/
public constraintdescriptor elementat int n
return  constraintdescriptor  get n
/**
* return a constraintdescriptorlist containing the constraintdescriptors
* of the specified type that are in this list.
*
* @param type	the constraint type.
*
* @return a constraintdescriptorlist containing the constraintdescriptors
* of the specified type that are in this list.
*/
public constraintdescriptorlist getsublist int type
constraintdescriptor cd   null
constraintdescriptorlist cdl   new constraintdescriptorlist
int size   size
for  int index   0  index < size  index
cd   elementat index
if  cd getconstrainttype      type
cdl add cd
return cdl