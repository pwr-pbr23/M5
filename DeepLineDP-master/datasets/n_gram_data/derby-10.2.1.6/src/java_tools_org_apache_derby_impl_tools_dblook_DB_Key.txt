/*
derby - class org.apache.derby.impl.tools.dblook.db_key
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl tools dblook
import java sql connection
import java sql statement
import java sql preparedstatement
import java sql resultset
import java sql sqlexception
import java util hashmap
import java util arraylist
import java util stringtokenizer
import org apache derby tools dblook
public class db_key
// prepared statements used throughout the ddl
// generation process.
private static preparedstatement getreferencecols
private static boolean printedheader
/* ************************************************
* generate the ddl for all keys in a given
* database.
* @param conn connection to the source database.
* @return the ddl for the keys has been written
*  to output via logs.java.
****/
public static void dokeys connection conn
throws sqlexception
printedheader   false
getreferencecols   conn preparestatement
// non-foreign keys, first.
statement stmt   conn createstatement
resultset rs   stmt executequery
createkeysfrom rs
// now, foreign keys.
rs   stmt executequery
createkeysfrom rs
getreferencecols close
stmt close
rs close
return
/* ************************************************
* generate the ddl for the a set of keys in the
* source database.
* @param rs info on keys to dump; either a set of non-
*  foreign keys (primary and unique), or a set of
*  foreign keys.
* @return ddl for the receive set of keys has
*  been written to output via logs.java.
****/
private static void createkeysfrom  resultset rs
throws sqlexception
boolean firsttime   true
while  rs next
if   rs getboolean 7
// this row is not for a constraint, so skip it.
continue
string tableid   rs getstring 3
string tablename   dblook lookuptableid tableid
if  dblook isexcludedtable tablename
// table isn't included in user-given list; skip it.
continue
if  firsttime
printheader
if  rs getstring 2  equals
logs reportmessage
else
logs reportmessage
stringbuffer kstring   createkeystring tableid  tablename  rs
if  rs getstring 2  equals
// foreign key; we have to figure out the references info.
kstring append makefkreferenceclause rs getstring 10
rs getstring 8  charat 0   rs getstring 9  charat 0
logs writetonewddl kstring tostring
logs writestmtendtonewddl
logs writenewlinetonewddl
firsttime   false
return
/* ************************************************
* generate ddl for a specific key.
* @param tableid id of table on which the key exists.
* @param tablename name of table on which the key exists.
* @param akey info on the key to generate.
* @return ddl for the specified key is returned as
*  a string.
****/
private static stringbuffer createkeystring  string tableid
string tablename  resultset akey
throws sqlexception
stringbuffer sb   new stringbuffer
sb append tablename
sb append
string constraintname   dblook addquotes
dblook expanddoublequotes akey getstring 1
sb append
sb append constraintname
sb append expandkeytype akey getstring 2  charat 0
// for keys, we need to get the column list.
sb append
sb append dblook getcolumnlistfromdescription
tableid  akey getstring 6
sb append
return sb
/* ************************************************
* takes a character representing a key type and
* returns the full type name (as it will appear in
* in the ddl).
* @param keytype key type as a char.
* @return key type as a full string.
****/
private static string expandkeytype char keytype
switch  keytype
case
return
case
return
case
return
default
// shouldn't happen.
logs debug
keytype   string null
return
/* ************************************************
* generate the ddl for a foreign key's "references"
* clause.
* @param constraintid id of the foreign key constraint.
* @param deletechar what action to take on delete.
* @param updatechar what action to take on update.
* @return the ddl for the references clause of the
*  foreign key, returned as a string.
****/
private static string makefkreferenceclause string constraintid
char deletechar  char updatechar
throws sqlexception
stringbuffer refclause   new stringbuffer
getreferencecols setstring 1  constraintid
resultset colsrs   getreferencecols executequery
colsrs next
refclause append
refclause append dblook lookuptableid colsrs getstring 1
refclause append
refclause append dblook getcolumnlistfromdescription
colsrs getstring 1   colsrs getstring 2
refclause append
// on delete.
refclause append
switch  deletechar
case   	refclause append     break
case   	refclause append     break
case   	refclause append     break
case   	refclause append     break
default 	   shouldn't happen
logs debug
deletechar   string null
break
// on update
refclause append
switch  updatechar
case   	refclause append     break
case   	refclause append     break
default 	   shouldn't happen
logs debug
updatechar   string null
break
colsrs close
return refclause tostring
/* ************************************************
* print a simple header to output.
****/
private static void printheader
if  printedheader
return
logs reportstring
logs reportmessage
logs reportstring
printedheader   true