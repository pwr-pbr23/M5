/*
derby - class org.apache.derby.impl.sql.genericstorablepreparedstatement
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl sql
import org apache derby iapi services monitor modulefactory
import org apache derby iapi services monitor monitor
import org apache derby iapi services sanity sanitymanager
import org apache derby catalog uuid
import org apache derby iapi services uuid uuidfactory
import org apache derby iapi util bytearray
import org apache derby iapi sql dictionary datadictionary
import org apache derby iapi sql activation
import org apache derby iapi sql resultcolumndescriptor
import org apache derby iapi sql resultdescription
import org apache derby iapi sql resultset
import org apache derby iapi sql preparedstatement
import org apache derby iapi sql statement
import org apache derby iapi sql storablepreparedstatement
import org apache derby iapi sql execute constantaction
import org apache derby iapi sql conn languageconnectioncontext
import org apache derby iapi error standardexception
import org apache derby iapi reference sqlstate
import org apache derby iapi services loader generatedclass
import org apache derby iapi services loader classfactory
import org apache derby iapi services context contextservice
import org apache derby iapi services io storedformatids
import org apache derby iapi services io formatidutil
import org apache derby iapi services io arrayutil
import org apache derby iapi services io formatable
import org apache derby iapi services monitor monitor
import java sql timestamp
import java io objectoutput
import java io objectinput
import java io ioexception
import org apache derby iapi services loader classfactory
import org apache derby iapi services loader generatedclass
import org apache derby iapi services loader generatedmethod
/**
* prepared statement that can be made persistent.
* @author jamie
*/
public class genericstorablepreparedstatement
extends genericpreparedstatement implements formatable  storablepreparedstatement
// formatable
private bytearray 		bytecode
private string 			classname
/**
* niladic constructor, for formatable
* only.
*/
public genericstorablepreparedstatement
super
genericstorablepreparedstatement statement stmt
super stmt
/**
* get our byte code array.  used
* by others to save off our byte
* code for us.
*
* @return the byte code saver
*/
bytearray getbytecodesaver
if  bytecode    null
bytecode   new bytearray
return bytecode
/**
* get and load the activation class.  will always
* return a loaded/valid class or null if the class
* cannot be loaded.
*
* @return the generated class, or null if the
*		class cannot be loaded
*
* @exception standardexception on error
*/
public generatedclass getactivationclass
throws standardexception
if  activationclass    null
loadgeneratedclass
return activationclass
void setactivationclass generatedclass ac
super setactivationclass ac
if  ac    null
classname   ac getname
// see if this is an pre-compiled class
if  bytecode    null    bytecode getarray      null
bytecode   null
/////////////////////////////////////////////////////////////
//
// storablepreparedstatement interface
//
/////////////////////////////////////////////////////////////
/**
* load up the class from the saved bytes.
*
* @exception standardexception on error
*/
public void loadgeneratedclass
throws standardexception
languageconnectioncontext lcc
languageconnectioncontext  contextservice getcontext
languageconnectioncontext context_id
classfactory classfactory   lcc getlanguageconnectionfactory   getclassfactory
generatedclass gc   classfactory loadgeneratedclass classname  bytecode
/*
** no special try catch logic to write out bad classes
** here.  we don't expect any problems, and in any
** event, we don't have the class builder available
** here.
*/
setactivationclass gc
/////////////////////////////////////////////////////////////
//
// externalizable interface
//
/////////////////////////////////////////////////////////////
/**
*
* @exception ioexception on error
*/
public void writeexternal objectoutput out  throws ioexception
out writeobject getcursorinfo
out writeboolean needssavepoint
out writeboolean isatomic
out writeobject executionconstants
out writeobject resultdesc
// savedobjects may be null
if  savedobjects    null
out writeboolean false
else
out writeboolean true
arrayutil writearraylength out  savedobjects
arrayutil writearrayitems out  savedobjects
/*
** write out the class name and byte code
** if we have them.  they might be null if
** we don't want to write out the plan, and
** would prefer it just write out null (e.g.
** we know the plan is invalid).
*/
out writeobject classname
out writeboolean bytecode    null
if  bytecode    null
bytecode writeexternal out
/**
* @see java.io.externalizable#readexternal
*
* @exception ioexception on error
* @exception classnotfoundexception on error
*/
public void readexternal objectinput in
throws ioexception  classnotfoundexception
setcursorinfo  cursorinfo in readobject
setneedssavepoint in readboolean
isatomic    in readboolean
executionconstants    constantaction  in readobject
resultdesc    resultdescription  in readobject
if  in readboolean
savedobjects   new object
arrayutil readarrayitems in  savedobjects
classname    string in readobject
if  in readboolean
bytecode   new bytearray
bytecode readexternal in
else
bytecode   null
/////////////////////////////////////////////////////////////
//
// formatable interface
//
/////////////////////////////////////////////////////////////
/**
* get the formatid which corresponds to this class.
*
*	@return	the formatid of this class
*/
public	int gettypeformatid  	  return storedformatids storable_prepared_statement_v01_id
/////////////////////////////////////////////////////////////
//
// misc
//
/////////////////////////////////////////////////////////////
public boolean isstorable
return true
public string tostring
if  sanitymanager debug
string acn
if  activationclass   null
acn
else
acn   activationclass getname
return     system identityhashcode this      acn   classname
else
return