/*
derby - class org.apache.derby.impl.store.raw.xact.nolocking
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl store raw xact
import org apache derby iapi services locks latch
import org apache derby iapi store raw lockingpolicy
import org apache derby iapi store raw containerhandle
import org apache derby iapi store raw recordhandle
import org apache derby iapi store raw transaction
import org apache derby iapi error standardexception
/**
a locking policy that implements no locking.
@see lockingpolicy
*/
class nolocking implements lockingpolicy
protected nolocking
public boolean lockcontainer
transaction     t
containerhandle container
boolean         waitforlock
boolean         forupdate
throws standardexception
return true
public void unlockcontainer
transaction     t
containerhandle container
public boolean lockrecordforread
transaction     t
containerhandle container
recordhandle    record
boolean         waitforlock
boolean         forupdate
throws standardexception
return true
public void lockrecordforread
latch			latch
recordhandle    record
boolean         forupdate
throws standardexception
public boolean zerodurationlockrecordforwrite
transaction     t
recordhandle    record
boolean         lockforpreviouskey
boolean         waitforlock
throws standardexception
return true
public boolean lockrecordforwrite
transaction     t
recordhandle    record
boolean         lockforinsert
boolean         waitforlock
throws standardexception
return true
public void lockrecordforwrite
latch			latch
recordhandle    record
throws standardexception
public void unlockrecordafterread
transaction     t
containerhandle container
recordhandle    record
boolean         forupdate
boolean         row_qualified
throws standardexception
public int getmode
return lockingpolicy mode_none