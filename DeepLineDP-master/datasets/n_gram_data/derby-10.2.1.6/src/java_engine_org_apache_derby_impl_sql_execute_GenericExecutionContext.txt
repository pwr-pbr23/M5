/*
derby - class org.apache.derby.impl.sql.execute.genericexecutioncontext
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl sql execute
import org apache derby iapi sql execute executioncontext
import org apache derby iapi sql execute executionfactory
import org apache derby iapi sql execute resultsetfactory
import org apache derby iapi sql execute resultsetstatisticsfactory
import org apache derby iapi sql resultset
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi services context contextimpl
import org apache derby iapi services context contextmanager
import org apache derby iapi services monitor monitor
import org apache derby iapi error standardexception
import java util properties
import org apache derby iapi error exceptionseverity
/**
* executioncontext stores the result set factory to be used by
* the current connection, and manages execution-level connection
* activities.
* <p>
* an execution context is expected to be on the stack for the
* duration of the connection.
*
* @author ames
*/
class genericexecutioncontext
extends contextimpl
implements executioncontext
private resultset sourcers
//
// class implementation
//
private resultsetfactory rsfactory
private resultsetstatisticsfactory rssfactory
private executionfactory execfactory
//
// executioncontext interface
//
/**
* get the resultsetfactory from this executioncontext.
*
* @return	the result set factory associated with this
*		executioncontext
*/
public resultsetfactory getresultsetfactory
/* null rsfactory may have been passed to
* constructor in order to speed up boot time.
*/
if  rsfactory    null
rsfactory   execfactory getresultsetfactory
return rsfactory
/**
* get the resultsetstatisticsfactory from this executioncontext.
*
* @return	the result set statistics factory associated with this
*		executioncontext
*
* @exception standardexception		thrown on error
*/
public resultsetstatisticsfactory getresultsetstatisticsfactory
throws standardexception
if  rssfactory    null
rssfactory    resultsetstatisticsfactory
monitor bootservicemodule
false
execfactory
resultsetstatisticsfactory module
properties  null
return rssfactory
public executionfactory getexecutionfactory
return execfactory
/**
* @see executioncontext#beginstatement
* @exception standardexception thrown on error
*/
public void beginstatement resultset sourcers  throws standardexception
this sourcers   sourcers
/**
* @see executioncontext#endstatement
* @exception standardexception thrown on error
*/
public void endstatement   throws standardexception
sourcers   null
/**
* @see executioncontext#siftforeignkeys
* @exception standardexception thrown on error
*/
public	object	siftforeignkeys  object fulllist   throws standardexception
// for the core language, this routine is a nop. the interesting
// cases occur during refresh and the initial boot of a target
// database. see repexecutioncontext for the interesting cases.
return	fulllist
/**
* @see executioncontext#sifttriggers
* @exception standardexception thrown on error
*/
public object sifttriggers object triggerinfo  throws standardexception
// for the core language, this routine is a nop. the interesting
// cases occur during refresh and the initial boot of a target
// database. see repexecutioncontext for the interesting cases.
return	triggerinfo
//
// context interface
//
/**
* @exception standardexception thrown on error
*/
public void cleanuponerror throwable error  throws standardexception
if  error instanceof standardexception
standardexception se    standardexception  error
int severity   se getseverity
if  severity >  exceptionseverity session_severity
popme
return
if  severity > exceptionseverity statement_severity
return
if  sourcers    null
sourcers close
sourcers   null
endstatement
return
//
// class interface
//
genericexecutioncontext
resultsetfactory rsf
contextmanager cm
executionfactory ef
super cm  executioncontext context_id
rsfactory   rsf
execfactory   ef