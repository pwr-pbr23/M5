/*
derby - class org.apache.derby.impl.sql.compile.typecompilerfactoryimpl
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl sql compile
import org apache derby iapi sql compile typecompilerfactory
import org apache derby iapi sql compile typecompiler
import org apache derby iapi types typeid
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi reference jdbc20translation
import org apache derby iapi reference jdbc30translation
import org apache derby iapi services io storedformatids
import java util properties
import java sql types
public class typecompilerfactoryimpl implements typecompilerfactory
private static final string package_name
// these are all the typecompilers that are stateless, so we can
// use a single instance of each. initialize all to null, and fault
// them in.
static typecompiler bittypecompiler
static typecompiler booleantypecompiler
static typecompiler chartypecompiler
static typecompiler decimaltypecompiler
static typecompiler doubletypecompiler
static typecompiler inttypecompiler
static typecompiler longinttypecompiler
static typecompiler longvarbittypecompiler
static typecompiler longvarchartypecompiler
static typecompiler nationalchartypecompiler
static typecompiler nationallongvarchartypecompiler
static typecompiler nationalvarchartypecompiler
static typecompiler realtypecompiler
static typecompiler smallinttypecompiler
static typecompiler tinyinttypecompiler
static typecompiler datetypecompiler
static typecompiler timetypecompiler
static typecompiler timestamptypecompiler
static typecompiler varbittypecompiler
static typecompiler varchartypecompiler
static typecompiler reftypecompiler
static typecompiler blobtypecompiler
static typecompiler clobtypecompiler
static typecompiler nclobtypecompiler
static typecompiler xmltypecompiler
/**
* get a typecompiler corresponding to the given typeid
*
* @param typeid        the typeid to get a typecompiler for
*
* @return      the corresponding typecompiler
*/
public typecompiler gettypecompiler typeid typeid
return staticgettypecompiler typeid
static typecompiler staticgettypecompiler typeid typeid
string sqltypename
switch  typeid getjdbctypeid
case types binary
return bittypecompiler
getaninstance package_name
bittypecompiler
typeid
case types bit
case jdbc30translation sql_types_boolean
return booleantypecompiler
getaninstance package_name
booleantypecompiler
typeid
case types char
sqltypename   typeid getsqltypename
if  sqltypename equals typeid char_name
return chartypecompiler
getaninstance package_name
chartypecompiler
typeid
else
return nationalchartypecompiler
getaninstance package_name
nationalchartypecompiler
typeid
case types numeric
case types decimal
return decimaltypecompiler
getaninstance package_name
decimaltypecompiler
typeid
case types double
return doubletypecompiler
getaninstance package_name
doubletypecompiler
typeid
case types integer
return inttypecompiler
getaninstance package_name
inttypecompiler
typeid
case types bigint
return longinttypecompiler
getaninstance package_name
longinttypecompiler
typeid
case jdbc20translation sql_types_blob
return blobtypecompiler
getaninstance package_name
blobtypecompiler
typeid
case types longvarbinary
return longvarbittypecompiler
getaninstance package_name
longvarbittypecompiler
typeid
case jdbc20translation sql_types_clob
sqltypename   typeid getsqltypename
if  sqltypename equals typeid clob_name
return clobtypecompiler
getaninstance package_name
clobtypecompiler
typeid
else
return nclobtypecompiler
getaninstance package_name
nclobtypecompiler
typeid
case types longvarchar
sqltypename   typeid getsqltypename
if  sqltypename equals typeid longvarchar_name
return longvarchartypecompiler
getaninstance package_name
longvarchartypecompiler
typeid
else
return nationallongvarchartypecompiler
getaninstance package_name
nationallongvarchartypecompiler
typeid
case types real
return realtypecompiler
getaninstance package_name
realtypecompiler
typeid
case types smallint
return smallinttypecompiler
getaninstance package_name
smallinttypecompiler
typeid
case types tinyint
return tinyinttypecompiler
getaninstance package_name
tinyinttypecompiler
typeid
case types date
return datetypecompiler
getaninstance package_name
datetypecompiler
typeid
case types time
return timetypecompiler
getaninstance package_name
timetypecompiler
typeid
case types timestamp
return timestamptypecompiler
getaninstance package_name
timestamptypecompiler
typeid
case types varbinary
return varbittypecompiler
getaninstance package_name
varbittypecompiler
typeid
case types varchar
sqltypename   typeid getsqltypename
if  sqltypename equals typeid varchar_name
return varchartypecompiler
getaninstance package_name
varchartypecompiler
typeid
else
return nationalvarchartypecompiler
getaninstance package_name
nationalvarchartypecompiler
typeid
case org apache derby iapi reference jdbc20translation sql_types_java_object
case types other
if  typeid isreftypeid
return reftypecompiler   getaninstance
package_name
reftypecompiler
typeid
else
// cannot re-use instances of user-defined type compilers,
// because they contain the class name
basetypecompiler btc   new userdefinedtypecompiler
btc settypeid typeid
return btc
case storedformatids xml_type_id
return xmltypecompiler
getaninstance package_name
xmltypecompiler
typeid
if  sanitymanager debug
sanitymanager throwassert
typeid getjdbctypeid
typeid getclass   getname
return null
/**
* check whether the given typecompiler has been allocated yet.
* if so, just return it, otherwise allocate a new instance
* given its class.
*/
private static typecompiler getaninstance string classname
typecompiler aninstance
typeid typeid
if  aninstance    null
exception exc   null
class typecompilerclass   null
try
typecompilerclass   class forname classname
aninstance     typecompiler  typecompilerclass newinstance
basetypecompiler  aninstance  settypeid typeid
catch  classnotfoundexception cnfe
exc   cnfe
catch  illegalaccessexception iae
exc   iae
catch  instantiationexception ie
exc   ie
if  sanitymanager debug
if  exc    null
sanitymanager throwassert
exc
typecompilerclass getname
return aninstance