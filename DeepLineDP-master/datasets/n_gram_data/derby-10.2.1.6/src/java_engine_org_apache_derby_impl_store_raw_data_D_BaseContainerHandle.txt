/*
derby - class org.apache.derby.impl.store.raw.data.d_basecontainerhandle
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl store raw data
import org apache derby iapi services diag diagnosticable
import org apache derby iapi services diag diagnosticablegeneric
import org apache derby iapi services diag diagnosticutil
import org apache derby iapi services monitor modulecontrol
import org apache derby iapi error standardexception
import org apache derby iapi store raw rowlock
import org apache derby iapi store raw containerkey
import java util properties
/**
the d_basecontainerhandle class provides diagnostic information about the
basecontainerhandle class.  currently this info is a single string of the form
table(conglomerate_id, container_id)
**/
public class d_basecontainerhandle extends diagnosticablegeneric
{
/**
* return string identifying the underlying container.
* <p>
*
* @return a string of the form table(conglomerate_id, container_id).
* @exception standardexception standard cloudscape error
**/
public string diag
throws standardexception
{
basecontainerhandle ch     basecontainerhandle  diag_object
string              str   null
/*
string str =
"basecontainerhandle:(" +
diagnosticutil.todiagstring(ch.identity) +
")";
*/
long container_id   ch identity getcontainerid
long conglom_id
d_diagnosticutil diag_containerid_to_conglomid
ch xact getdatafactory
container_id
if  conglom_id     long min_value
{
str       conglom_id       container_id
}
else
{
str       container_id
}
// resolve (mikem) - during boot we can't ask acces to give us the
// containerid info, since access hasn't booted yet.  for now just
// assume that is why we got a bad containerid number and don't print
// the containerid so that we can diff the output.
/*
else
{
str = "table(?, " +  container_id + ")";
thread.dumpstack();
}
*/
return str
}
/**
* return a set of properties describing the the key used to lock container.
* <p>
* used by debugging code to print the lock table on demand.
*
* @exception  standardexception  standard exception policy.
**/
public void diag_detail properties prop
throws standardexception
{
basecontainerhandle ch             basecontainerhandle  diag_object
containerkey        key           ch getid
prop put rowlock diag_containerid  long tostring key getcontainerid
prop put rowlock diag_segmentid  long tostring key getsegmentid
// the following 2 don't make sense for container locks, just set
// them to 0 to make it easier for now to tree container locks and
// row locks similarly.
prop put rowlock diag_pagenum  integer tostring 0
prop put rowlock diag_recid    integer tostring 0
return
}
}