/*
derby - class org.apache.derby.impl.sql.execute.currentdatetime
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl sql execute
/* can't import due to name overlap:
import java.util.date;
*/
import java sql date
import java sql time
import java sql timestamp
/**
currentdatetime provides execution support for ensuring
that the current datetime is evaluated only once for a
statement. the same value is returned for every
current_date, current_time, and current_timestamp in the
statement.
<p>
this is expected to be used by an activation and its
result set, and so 'forget' must be called whenever you
want to reuse the currentdatetime object for additional
executions of the statement.
@author ames
*/
public class currentdatetime
/**
holds the current datetime on the first evaluation of a current function
in a statement, which contains all available fields.
*/
private java util date currentdatetime
/**
holds the sql date version of the current datetime.
*/
private date currentdate
/**
holds the sql time version of the current datetime.
*/
private time currenttime
/**
holds the sql timestamp version of the current datetime.
*/
private timestamp currenttimestamp
/**
the constructor is public; note we wait until evaluation to
put any values into the fields.
*/
public currentdatetime
// class implementation
final private void setcurrentdatetime
if  currentdatetime    null
currentdatetime   new java util date
// class interface
public date getcurrentdate
if  currentdate    null
setcurrentdatetime
currentdate   new date currentdatetime gettime
return currentdate
public time getcurrenttime
if  currenttime    null
setcurrentdatetime
currenttime   new time currentdatetime gettime
return currenttime
public timestamp getcurrenttimestamp
if  currenttimestamp    null
setcurrentdatetime
currenttimestamp   new timestamp currentdatetime gettime
return currenttimestamp
/**
this is called prior to each execution of the statement, to
ensure that it starts over with a new current datetime value.
*/
public void forget
currentdatetime   null
currentdate   null
currenttime   null
currenttimestamp   null