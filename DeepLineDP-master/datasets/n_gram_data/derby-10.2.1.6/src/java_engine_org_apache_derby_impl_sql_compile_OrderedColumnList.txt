/*
derby - class org.apache.derby.impl.sql.compile.orderedcolumnlist
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package	org apache derby impl sql compile
import org apache derby iapi store access columnordering
import org apache derby impl sql execute indexcolumnorder
import java util hashtable
/**
* list of orderedcolumns
*
* @author jamie
*/
public abstract class orderedcolumnlist extends querytreenodevector
/**
* get an array of columnorderings to pass to the store
*/
public indexcolumnorder getcolumnordering
indexcolumnorder ordering
int numcols   size
int actualcols
ordering   new indexcolumnorder
/*
order by is fun, in that we need to ensure
there are no duplicates in the list.  later copies
of an earlier entry are considered purely redundant,
they won't affect the result, so we can drop them.
we don't know how many columns are in the source,
so we use a hashtable for lookup of the positions
*/
hashtable hashcolumns   new hashtable
actualcols   0
for  int i   0  i < numcols  i
orderedcolumn oc    orderedcolumn  elementat i
// order by (lang) positions are 1-based,
// order items (store) are 0-based.
int position   oc getcolumnposition     1
integer posint   new integer position
if    hashcolumns containskey posint
ordering   new indexcolumnorder position
oc isascending
actualcols
hashcolumns put posint  posint
/*
if there were duplicates removed, we need
to shrink the array down to what we used.
*/
if  actualcols < numcols
indexcolumnorder newordering   new indexcolumnorder
system arraycopy ordering  0  newordering  0  actualcols
ordering   newordering
return ordering