/*
derby - class org.apache.derby.iapi.sql.dictionary.foreignkeyconstraintdescriptor
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi sql dictionary
import org apache derby iapi error standardexception
import org apache derby catalog uuid
import org apache derby iapi reference sqlstate
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi sql statementtype
import org apache derby iapi services io storedformatids
import org apache derby iapi error standardexception
import org apache derby iapi sql depend dependencymanager
import org apache derby iapi sql depend dependent
import org apache derby iapi sql depend dependency
import org apache derby iapi sql depend provider
import org apache derby iapi sql conn languageconnectioncontext
import org apache derby iapi services sanity sanitymanager
/**
* a foreign key.
*
* @author jamie
*/
public class foreignkeyconstraintdescriptor extends keyconstraintdescriptor
/**
interface to this descriptor
<ol>
<li>public referencedkeyconstraintdescriptor getreferencedconstraint()
throws standardexception;
<li>public uuid getreferencedconstraintid()
throws standardexception;
<li>public boolean isselfreferencingfk()
throws standardexception;
<ol>
*/
// implementation
referencedkeyconstraintdescriptor	referencedconstraintdescriptor
uuid								referencedconstraintid
int                                 radeleterule
int                                 raupdaterule
/**
* constructor for a foreignkeyconstraintdescriptor
*
* @param datadictionary		the data dictionary that this descriptor lives in
* @param table		the descriptor of the table the constraint is on
* @param constraintname	the name of the constraint.
* @param deferrable		if the constraint can be deferred.
* @param initiallydeferred if the constraint starts life deferred.
* @param fkcolumns 			columns in the foreign key
* @param constraintid		uuid of constraint
* @param indexid			the uuid for the backing index
* @param schemadesc		the schemadescriptor for the constraint
* @param referencedconstraintdescriptor	is referenced constraint descriptor
* @param isenabled			is the constraint enabled?
*/
protected foreignkeyconstraintdescriptor
datadictionary datadictionary
tabledescriptor table
string constraintname
boolean deferrable
boolean initiallydeferred
int fkcolumns
uuid constraintid
uuid indexid
schemadescriptor schemadesc
referencedkeyconstraintdescriptor referencedconstraintdescriptor
boolean isenabled
int radeleterule
int raupdaterule
super datadictionary  table  constraintname  deferrable
initiallydeferred  fkcolumns
constraintid  indexid  schemadesc  isenabled
this referencedconstraintdescriptor   referencedconstraintdescriptor
this radeleterule   radeleterule
this raupdaterule   raupdaterule
/**
* constructor for a foreignkeyconstraintdescriptor
*
* @param datadictionary		the data dictionary that this descriptor lives in
* @param table		the descriptor of the table the constraint is on
* @param constraintname	the name of the constraint.
* @param deferrable		if the constraint can be deferred.
* @param initiallydeferred if the constraint starts life deferred.
* @param fkcolumns 			columns in the foreign key
* @param constraintid		uuid of constraint
* @param indexid			the uuid for the backing index
* @param schemadesc		the schemadescriptor for the constraint
* @param referencedconstraintid	is referenced constraint id
* @param isenabled			is the constraint enabled?
*/
foreignkeyconstraintdescriptor
datadictionary datadictionary
tabledescriptor table
string constraintname
boolean deferrable
boolean initiallydeferred
int fkcolumns
uuid constraintid
uuid indexid
schemadescriptor schemadesc
uuid referencedconstraintid
boolean isenabled
int radeleterule
int raupdaterule
super datadictionary  table  constraintname  deferrable
initiallydeferred  fkcolumns
constraintid  indexid  schemadesc  isenabled
this referencedconstraintid   referencedconstraintid
this radeleterule   radeleterule
this raupdaterule   raupdaterule
/**
* get the constraint that this fk references.  will
* return either a primary key or a unique key constriant.
*
* @return	the constraint
*
* @exception standardexception on error
*/
public referencedkeyconstraintdescriptor getreferencedconstraint
throws standardexception
if  referencedconstraintdescriptor    null
return referencedconstraintdescriptor
if  referencedconstraintid    null
getreferencedconstraintid
tabledescriptor reftd   getdatadictionary   getconstrainttabledescriptor referencedconstraintid
if  sanitymanager debug
if  reftd    null
sanitymanager throwassert   referencedconstraintid
constraintdescriptorlist cdl   getdatadictionary   getconstraintdescriptors reftd
referencedconstraintdescriptor    referencedkeyconstraintdescriptor
cdl getconstraintdescriptorbyid referencedconstraintid
if  sanitymanager debug
if  referencedconstraintdescriptor    null
sanitymanager throwassert
referencedconstraintdescriptor
reftd getname
return referencedconstraintdescriptor
/**
* get the constraint id for the constraint that this fk references.
* will return either a primary key or a unique key constriant.
*
* @return	the constraint id
*
* @exception standardexception on error
*/
public uuid getreferencedconstraintid    throws standardexception
if  referencedconstraintdescriptor    null
return referencedconstraintdescriptor getuuid
subkeyconstraintdescriptor subkey
subkey   getdatadictionary   getsubkeyconstraint constraintid
datadictionary foreignkey_constraint
if  sanitymanager debug
if  subkey    null
sanitymanager throwassert   constraintname
referencedconstraintid   subkey getkeyconstraintid
return referencedconstraintid
/**
* gets an identifier telling what type of descriptor it is
* (unique, primary key, foreign key, check).
*
* @return	an identifier telling what type of descriptor it is
*		(unique, primary key, foreign key, check).
*/
public int	getconstrainttype
return datadictionary foreignkey_constraint
/**
* does this constraint need to fire on this type of
* dml?  true if insert or update and columns intersect
*
* @param stmttype	the type of dml
* (statementtype.insert|statementtype.update|statementtype.delete)
* @param modifiedcols	the columns modified, or null for all
*
* @return true/false
*/
public boolean needstofire int stmttype  int modifiedcols
/*
** if we are disabled, we never fire
*/
if   isenabled
return false
if  stmttype    statementtype delete
return false
if  stmttype    statementtype insert
return true
// if update, only relevant if columns intersect
return docolumnsintersect modifiedcols  getreferencedcolumns
/**
* am i a self-referencing fk?  true if my referenced
* constraint is on the same table as me.
*
* @return	true/false
*
* @exception standardexception on error
*/
public boolean isselfreferencingfk
throws standardexception
referencedkeyconstraintdescriptor refcd   getreferencedconstraint
return  refcd gettableid   equals gettableid
/**
* gets a referential action rule on a  delete
* @return referential rule defined by the user during foreign key creattion
* for a delete (like cascde , restrict ..etc)
*/
public int	getradeleterule
return radeleterule
/**
* gets a referential action rule on a update
* @return referential rule defined by the user during foreign key creattion
* for an update (like cascde , restrict ..etc)
*/
public int	getraupdaterule
return raupdaterule