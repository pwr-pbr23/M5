/*
derby - class org.apache.derby.iapi.sql.languagefactory
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi sql
import org apache derby iapi error standardexception
import org apache derby iapi services loader classinspector
/**
* factory interface for the language.interface protocol.
* this is used via the database api by users, and is presented
* as a system module (not a service module).  that could change,
* but for now this is valid for any database.
*
* @author jeff lichtman
*/
public interface languagefactory
/**
used to locate this factory by the monitor basic service.
there needs to be a language factory per database.
*/
string module
/**
* get a parametervalueset
*
* @param numparms	the number of parameters in the
*			parametervalueset
* @param hasreturnparam	true if this parameter set
*			has a return parameter.  the return parameter
*			is always the 1st parameter in the list.  it
*			is due to a callablestatement like this: <i>
*			? = call mymethod()</i>
*
* @return	a new parametervalueset with the given number of parms
*/
parametervalueset newparametervalueset classinspector ci  int numparms  boolean hasreturnparam
/**
* get a new result description from the input result
* description.  picks only the columns in the column
* array from the inputresultdescription.
*
* @param inputresultdescription the input rd
* @param thecols non null array of ints
*
* @return resultdescription the rd
*/
public resultdescription getresultdescription
resultdescription	inputresultdescription
int				thecols
/**
* get a new result description
*
* @param cols an array of col descriptors
* @param type the statement type
*
* @return resultdescription the rd
*/
public resultdescription getresultdescription
resultcolumndescriptor	cols
string						type