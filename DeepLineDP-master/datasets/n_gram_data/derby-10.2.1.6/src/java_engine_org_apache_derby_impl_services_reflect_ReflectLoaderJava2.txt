/*
derby - class org.apache.derby.impl.services.reflect.reflectloaderjava2
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl services reflect
import org apache derby iapi util bytearray
import org apache derby iapi sql compile codegeneration
final class reflectloaderjava2 extends classloader
/*
**	fields
*/
private final databaseclasses cf
/*
** constructor
*/
reflectloaderjava2 classloader parent  databaseclasses cf
super parent
this cf   cf
protected class findclass string name
throws classnotfoundexception
return cf loadapplicationclass name
/*
** implementation specific methods
** note these are copied from reflectloader as the two classes cannot be made into
a super/sub class pair. because the java2 one needs to call super(classloader)
that was added in java2 and it needs to not implement loadclass()
*/
/**
load a generated class from the passed in class data.
*/
public loadedgeneratedclass loadgeneratedclass string name  bytearray classdata
class jvmclass   defineclass name  classdata getarray    classdata getoffset    classdata getlength
resolveclass jvmclass
/*
djd - not enabling this yet, need more memory testing, may only
create a factory instance when a number of instances are created.
this would avoid a factory instance for ddl
// now generate a factory class that loads instances
int lastdot = name.lastindexof('.');
string factoryname = name.substring(lastdot + 1, name.length()).concat("_f");
classdata = cf.buildspecificfactory(name, factoryname);
class factoryclass = defineclass(codegeneration.generated_package_prefix.concat(factoryname),
classdata.getarray(), classdata.getoffset(), classdata.getlength());
resolveclass(factoryclass);
*/
class factoryclass   null
return new reflectgeneratedclass cf  jvmclass  factoryclass