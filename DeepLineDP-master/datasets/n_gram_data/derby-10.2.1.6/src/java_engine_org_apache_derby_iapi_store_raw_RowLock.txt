/*
derby - class org.apache.derby.iapi.store.raw.rowlock
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi store raw
/**
a rowlock represents a qualifier that is to be used when
locking a row through a recordhandle.
<br>
mt - immutable
@see recordhandle
@see lockingpolicy
*/
public final class rowlock
private final int   type
// names of locks for virtual lock table print out
private static string shortnames
/* row shared lock for repeatable read and below isolation level */
public static final rowlock rs2    new rowlock 0
/* row shared lock for serialized read isolation level */
public static final rowlock rs3    new rowlock 1
/* row update lock for reapeatable read and below isolation level*/
public static final rowlock ru2    new rowlock 2
/* row update lock for serializable isolation level*/
public static final rowlock ru3    new rowlock 3
/* row insert previous key lock */
public static final rowlock rip    new rowlock 4
/* row insert lock */
public static final rowlock ri     new rowlock 5
/* row exclusive write lock for repeatable read and below isolation level */
public static final rowlock rx2    new rowlock 6
/* row exclusive write lock for serializable isolation level */
public static final rowlock rx3    new rowlock 7
/** number of row locks */
public static final int r_number   8
/** row lock compatability table */
public static final boolean r_compat
//          granted
// request   rs2     rs3    ru2    ru3    rip    ri     rx2    rx3
//
rs2        true   true   true   true   true   false  false  false
rs3        true   true   true   true   false  false  false  false
ru2        true   true   false  false  true   false  false  false
ru3        true   true   false  false  false  false  false  false
rip        true   false  true   false  true   true   true   false
ri         false  false  false  false  true   false  false  false
rx2        false  false  false  false  true   false  false  false
rx3        false  false  false  false  false  false  false  false
/* lock debugging stuff */
public static final string diag_index
public static final string diag_xactid
public static final string diag_locktype
public static final string diag_lockmode
public static final string diag_conglomid
public static final string diag_containerid
public static final string diag_segmentid
public static final string diag_pagenum
public static final string diag_recid
public static final string diag_count
public static final string diag_group
public static final string diag_state
private rowlock int type
this type   type
/**
get an integer representation of the type of the lock. this method is
guaranteed to return an integer >= 0 and < r_number. no correlation
between the value and one of the static variables (cis etc.) is
guaranteed, except that the values returned do not change.
*/
public int gettype
return type
public boolean iscompatible rowlock granted
return iscompatible granted gettype
public boolean iscompatible int granted
return r_compat
public string tostring
return shortnames