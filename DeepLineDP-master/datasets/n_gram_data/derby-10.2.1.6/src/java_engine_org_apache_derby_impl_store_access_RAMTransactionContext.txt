/*
derby - class org.apache.derby.impl.store.access.ramtransactioncontext
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl store access
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi error standardexception
import org apache derby iapi store access transactioncontroller
import org apache derby iapi services context contextmanager
import org apache derby iapi services context contextimpl
import org apache derby iapi error exceptionseverity
final class ramtransactioncontext extends contextimpl
/**
the transaction this context is managing.
**/
protected ramtransaction transaction
/**
true if any exception causes this transaction to be destroyed
**/
private boolean abortall
/*
** context methods (most are implemented by super-class).
*/
/**
handle cleanup processing for this context. the resources
associated with a transaction are the open controllers.
cleanup involves closing them at the appropriate time.
rollback of the underlying transaction is handled by the
raw store.
**/
public void cleanuponerror throwable error
throws standardexception
if  sanitymanager debug
sanitymanager assert getcontextmanager      null
boolean destroy   false
if  abortall    false     error instanceof standardexception
standardexception se    standardexception  error
// if the severity is lower than a transaction error then do nothing.
if  se getseverity   < exceptionseverity transaction_severity
return
// if the session is going to disappear then we want to destroy this
// transaction, not just abort it.
if  se getseverity   >  exceptionseverity session_severity
destroy   true
else
// abortall is true or some java* error, throw away the
// transaction.
destroy   true
if  transaction    null
try
transaction invalidateconglomeratecache
catch  standardexception se
// resolve - what to do in error case.
if  sanitymanager debug
sanitymanager throwassert
transaction closecontrollers true    close held controllers
if  destroy
transaction   null
popme
/*
** methods of ramtransactioncontext
*/
// this constructor is called with the transaction
// controller to be saved when the context
// is created (when the first statement comes in, likely).
ramtransactioncontext
contextmanager  cm
string          context_id
ramtransaction  thetransaction
boolean         abortall
throws standardexception
super cm  context_id
this abortall   abortall
transaction   thetransaction
transaction setcontext this
package    ramtransaction gettransaction
return transaction
package    void settransaction
ramtransaction  transaction
this transaction   transaction