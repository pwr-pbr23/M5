/*
derby - class org.apache.derby.impl.sql.execute.onceresultset
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl sql execute
import org apache derby iapi services monitor monitor
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi services stream headerprintwriter
import org apache derby iapi services stream infostreams
import org apache derby iapi sql conn statementcontext
import org apache derby iapi sql execute execrow
import org apache derby iapi sql execute noputresultset
import org apache derby iapi types datavaluedescriptor
import org apache derby iapi sql activation
import org apache derby iapi sql resultset
import org apache derby iapi services loader generatedmethod
import org apache derby iapi reference sqlstate
import org apache derby iapi error standardexception
/**
* takes an expression subquery's result set and verifies that only
* a single scalar value is being returned.
* note: a row with a single column containing null will be returned from
* getnextrow() if the underlying subquery resultset is empty.
*
* @author jerry
*/
public class onceresultset extends noputresultsetimpl
/* statics for cardinality check */
public static final int do_cardinality_check		  1
public static final int no_cardinality_check		  2
public static final int unique_cardinality_check	  3
/* used to cache row with nulls for case when subquery result set
* is empty.
*/
private execrow rowwithnulls
/* used to cache the statementcontext */
private statementcontext statementcontext
// set in constructor and not altered during
// life of object.
public noputresultset source
private generatedmethod emptyrowfun
private int cardinalitycheck
public int subquerynumber
public int pointofattachment
//
// class interface
//
public onceresultset noputresultset s  activation a  generatedmethod emptyrowfun
int cardinalitycheck  int resultsetnumber
int subquerynumber  int pointofattachment
double optimizerestimatedrowcount
double optimizerestimatedcost
super a  resultsetnumber  optimizerestimatedrowcount  optimizerestimatedcost
source   s
this emptyrowfun   emptyrowfun
this cardinalitycheck   cardinalitycheck
this subquerynumber   subquerynumber
this pointofattachment   pointofattachment
constructortime    getelapsedmillis begintime
//
// resultset interface (leftover from noputresultset)
//
/**
* open a scan on the table. scan parameters are evaluated
* at each open, so there is probably some way of altering
* their values...
*
* @exception standardexception thrown if cursor finished.
*/
public void	opencore   throws standardexception
/* note: we can't get code generation
* to generate calls to reopencore() for
* subsequent probes, so we just handle
* it here.
*/
if  isopen
reopencore
return
begintime   getcurrenttimemillis
source opencore
/* notify statementcontext about ourself so that we can
* get closed down, if necessary, on an exception.
*/
if  statementcontext    null
statementcontext   getlanguageconnectioncontext   getstatementcontext
statementcontext setsubqueryresultset subquerynumber  this
activation getnumsubqueries
numopens
isopen   true
opentime    getelapsedmillis begintime
/**
* reopen a scan on the table. scan parameters are evaluated
* at each open, so there is probably some way of altering
* their values...
*
* @exception standardexception thrown if cursor finished.
*/
public void	reopencore   throws standardexception
begintime   getcurrenttimemillis
if  sanitymanager debug
sanitymanager assert isopen
source reopencore
numopens
opentime    getelapsedmillis begintime
/**
* return the requested value computed from the next row.
*
* @exception standardexception thrown on failure.
*			  standardexception scalarsubquerycardinalityviolation
*						thrown if scalar subquery returns more than 1 row.
*/
public execrow	getnextrowcore   throws standardexception
execrow candidaterow   null
execrow secondrow   null
execrow result   null
begintime   getcurrenttimemillis
// this is an assert and not a real error because this is never
// outermost in the tree and so a next call when closed will not occur.
if  sanitymanager debug
sanitymanager assert  isopen
if   isopen
candidaterow   source getnextrowcore
if  candidaterow    null
switch  cardinalitycheck
case do_cardinality_check
case no_cardinality_check
candidaterow   candidaterow getclone
if  cardinalitycheck    do_cardinality_check
/* raise an error if the subquery returns > 1 row
* we need to make a copy of the current candidaterow since
* the getnextrow() for this check will wipe out the underlying
* row.
*/
secondrow   source getnextrowcore
if  secondrow    null
close
standardexception se   standardexception newexception sqlstate lang_scalar_subquery_cardinality_violation
throw se
result   candidaterow
break
case unique_cardinality_check
candidaterow   candidaterow getclone
secondrow   source getnextrowcore
datavaluedescriptor orderable1   candidaterow getcolumn 1
while  secondrow    null
datavaluedescriptor orderable2   secondrow getcolumn 1
if     orderable1 compare datavaluedescriptor order_op_equals  orderable2  true  true
close
standardexception se   standardexception newexception sqlstate lang_scalar_subquery_cardinality_violation
throw se
secondrow   source getnextrowcore
result   candidaterow
break
default
if  sanitymanager debug
sanitymanager throwassert
cardinalitycheck
break
else if  rowwithnulls    null
rowwithnulls    execrow  emptyrowfun invoke activation
result   rowwithnulls
else
result   rowwithnulls
currentrow   result
setcurrentrow result
rowsseen
nexttime    getelapsedmillis begintime
return result
/**
* if the result set has been opened,
* close the open scan.
*
* @exception standardexception thrown on error
*/
public void	close   throws standardexception
begintime   getcurrenttimemillis
if   isopen
// we don't want to keep around a pointer to the
// row ... so it can be thrown away.
// revisit: does this need to be in a finally
// block, to ensure that it is executed?
clearcurrentrow
source close
super close
else
if  sanitymanager debug
sanitymanager debug
closetime    getelapsedmillis begintime
/**
* @see noputresultset#getpointofattachment
*/
public int getpointofattachment
return pointofattachment
/**
* return the total amount of time spent in this resultset
*
* @param type	current_resultset_only - time spent only in this resultset
*				entire_resultset_tree  - time spent in this resultset and below.
*
* @return long		the total amount of time spent (in milliseconds).
*/
public long gettimespent int type
long tottime   constructortime   opentime   nexttime   closetime
if  type    noputresultset current_resultset_only
return	tottime   source gettimespent entire_resultset_tree
else
return tottime