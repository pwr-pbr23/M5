/*
derby - class org.apache.derby.impl.store.raw.data.rememberbytesinputstream
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl store raw data
import org apache derby iapi services sanity sanitymanager
import java io filterinputstream
import java io ioexception
import java io inputstream
import java io outputstream
/**
a filterinputstream that remembers read or skipped bytes.
<p>in record mode this stream remembers all the bytes a
caller reads or skips. after reading some bytes this
returns a 'replay' stream to re-read them.
<p>a caller may call getreplaysteam to get a stream
to re-read the the remembered bytes. any number of calls
to getreplaystream are supported.
<p>the clear function causes this stream to forget the remembered
bytes and re-enter record mode.
*/
public class rememberbytesinputstream extends filterinputstream
byteholder bh
boolean recording   true
// in case of streams (e.g readertoutf8stream,
// rawtobinaryformatstream) that cannot be re-used
// a read on a closed stream will throw an eofexception
// hence keep track if the stream is closed or not
boolean streamclosed   false
/**
construct a rememberbytesinputstream.
@param bh for storing the remembered bytes. (must be
in writing mode.
*/
public rememberbytesinputstream inputstream in  byteholder bh
super in
if  sanitymanager debug
sanitymanager assert bh writingmode
this bh   bh
/**
@see java.io.inputstream#read
@exception ioexception thrown on an io error spooling rememberd bytes
to backing storage.
*/
public int read   throws ioexception
if  sanitymanager debug
sanitymanager assert recording
int value    1
if    streamclosed
value   super read
if   value     1
bh write value
else
streamclosed  true
return value
/**
@see java.io.inputstream#read
@exception ioexception thrown on an io error spooling rememberd bytes
to backing storage.
*/
public int read byte b  int off  int len  throws ioexception
if  sanitymanager debug
sanitymanager assert recording
if    streamclosed
if   len   off  > b length
len   b length   off
len   super read b  off  len
if  len > 0
bh write b  off  len
else
streamclosed   true
else
return  1
return len
/**
read len bytes from the input stream, and store it in the byte holder.
note, fillbuf does not return negative values, if there are no
bytes to store in the byteholder, it will return 0
@exception ioexception thrown on an io error spooling rememberd bytes
to backing storage.
*/
public long fillbuf int len  throws ioexception
long val   0
if    streamclosed
val   bh write this in  len
// if bh.write returns less than len, then the stream
// has reached end of stream. see logic in membyteholder.write
if   val < len
streamclosed true
return val
/**
read len bytes from the byte holder, and write it to the output stream.
@exception ioexception thrown on an io error spooling rememberd bytes
to backing storage.
*/
public int putbuf outputstream out  int len  throws ioexception
bh startreading
return bh read out  len
/**
@see java.io.inputstream#skip
@exception ioexception thrown on an io error spooling rememberd bytes
to backing storage.
*/
public long skip long count   throws ioexception
if  sanitymanager debug
sanitymanager assert recording
return bh write in count
/**
get an input stream for re-reading the remembered bytes.
*/
public inputstream getreplaystream   throws ioexception
bh startreading
recording   false
return new byteholderinputstream bh
/**
get the byteholder.
*/
public byteholder getbyteholder   throws ioexception
return bh
/**
clear all the remembered bytes. this stream will
remember any bytes read after this call.
@exception ioexception thrown on an io error clearing backing
storage.
*/
public void clear   throws ioexception
bh clear
recording   true
/**
set the inputstream from which this reads.
<p>please note this does not clear remembered
bytes.
*/
public void setinput inputstream in
this in   in
streamclosed   false
/**
return true iff this rememberbytesinputstream is
in recording mode.
*/
public boolean recording
return recording
/**
return the number of bytes remains in the byteholder
for reading, without setting the write/read mode.
*/
public int available   throws ioexception
// may not have set reading to be true, then,
// we are getting available in negative numbers.
int remainingbytes   bh available
remainingbytes   remainingbytes > 0 ? remainingbytes     1    remainingbytes
return remainingbytes
/**
return the number of bytes that have been saved to this byte holder.
this result is different from available() as it is unaffected by the
current read position on the byteholder.
*/
public int numbytessaved   throws ioexception
return bh numbytessaved
/**
remove the remaining bytes in the byteholder to the beginning
set the position to start recording just after these bytes.
returns how many bytes was transfered to the beginning.
*/
public int shifttofront   throws ioexception
int bytesshifted   bh shifttofront
return bytesshifted
/**
@see java.lang.object#tostring
*/
public string tostring
return
recording   bh