/*
derby - class org.apache.derby.iapi.sql.dictionary.statementroutinepermission
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi sql dictionary
import org apache derby iapi error standardexception
import org apache derby catalog uuid
import org apache derby iapi sql conn authorizer
import org apache derby iapi sql conn languageconnectioncontext
import org apache derby iapi reference sqlstate
import org apache derby iapi sql dictionary routinepermsdescriptor
import org apache derby iapi store access transactioncontroller
/**
* this class describes a routine execute permission
* required by a statement.
*/
public final class statementroutinepermission extends statementpermission
private uuid routineuuid
public statementroutinepermission  uuid routineuuid
this routineuuid   routineuuid
/**
* @see statementpermission#check
*/
public void check  languageconnectioncontext lcc
string authorizationid
boolean forgrant  throws standardexception
datadictionary dd   lcc getdatadictionary
transactioncontroller tc   lcc gettransactionexecute
routinepermsdescriptor perms   dd getroutinepermissions  routineuuid  authorizationid
if  perms    null      perms gethasexecutepermission
perms   dd getroutinepermissions routineuuid  authorizer public_authorization_id
if  perms    null      perms gethasexecutepermission
aliasdescriptor ad   dd getaliasdescriptor  routineuuid
if  ad    null
throw standardexception newexception  sqlstate auth_internal_bad_uuid
schemadescriptor sd   dd getschemadescriptor  ad getschemauuid    tc
if  sd    null
throw standardexception newexception  sqlstate auth_internal_bad_uuid
throw standardexception newexception  forgrant ? sqlstate auth_no_execute_permission_for_grant
sqlstate auth_no_execute_permission
authorizationid
ad getdescriptortype
sd getschemaname
ad getdescriptorname
end of check
/**
* @see statementpermission#getpermissiondescriptor
*/
public permissionsdescriptor getpermissiondescriptor string authid  datadictionary dd
throws standardexception
return dd getroutinepermissions routineuuid authid