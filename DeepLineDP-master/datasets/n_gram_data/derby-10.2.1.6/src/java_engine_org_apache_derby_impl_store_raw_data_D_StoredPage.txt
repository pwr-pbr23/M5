/*
derby - class org.apache.derby.impl.store.raw.data.d_storedpage
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl store raw data
import org apache derby iapi services diag diagnosticable
import org apache derby iapi services diag diagnosticablegeneric
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi error standardexception
import org apache derby iapi store access qualifier
import org apache derby iapi store raw fetchdescriptor
import org apache derby iapi store raw page
import org apache derby iapi store raw recordhandle
import org apache derby iapi types datavaluedescriptor
import java util properties
import java io printstream
import java io ioexception
import org apache derby iapi services io formatablebitset
import org apache derby iapi services io counteroutputstream
import org apache derby iapi services io nulloutputstream
/**
the d_storedpage class provides diagnostic information about the storedpage
class.  currently this info includes:
o a dump of the page.
o page size of the page.
o bytes free on the page.
o bytes reserved on the page.
**/
public class d_storedpage implements diagnosticable
protected storedpage page
public d_storedpage
/* private/protected methods of this class: */
/*
** methods of diagnosticable
*/
public void init object obj
if  sanitymanager debug
sanitymanager assert obj instanceof storedpage
page    storedpage  obj
/**
* provide a string dump of the storedpage.
* <p>
* resolve - once the "diagnostic" interface is accepted move the
* string dumping code into this routine from it's current place in
* the storedpage code.
* <p>
*
* @return string dump of the storedpage
*
* @exception  standardexception  standard exception policy.
**/
public string diag
throws standardexception
return page tostring
/**
* provide detailed diagnostic information about a storedpage.
* <p>
* currently supports 3 types of information:
*   page.diag_page_size      - page size.
*   page.diag_btyes_free     - # of free bytes on the page.
*   page.diag_bytes_reserved - # of reserved bytes on the page.
* <p>
*
* @exception  standardexception  standard exception policy.
**/
public void diag_detail properties prop
throws standardexception
string prop_value   null
// currently only support 2 properties - pagesize and freebytes
if  prop getproperty page diag_page_size     null
// set the page size diag string
prop put page diag_page_size  integer tostring page getpagesize
if  prop getproperty page diag_bytes_free     null
int space_available   page freespace
// set the page free diag string
prop put page diag_bytes_free  integer tostring space_available
if  prop getproperty page diag_bytes_reserved     null
int reservedspace    page totalspace   page sparespace   100
reservedspace   math min reservedspace  page freespace
// set the reserved space diag string.
prop put
page diag_bytes_reserved  integer tostring reservedspace
if  prop getproperty page diag_reserved_space     null
// diag_reserved_space is the % of the page to reserve during
// insert for expansion.
prop put
page diag_reserved_space  integer tostring page sparespace
if  prop getproperty page diag_minimum_rec_size     null
// diag_minimum_rec_sze is the minimum number of bytes per row
// to reserve at insert time for a record.
prop put
page diag_minimum_rec_size
integer tostring page minimumrecordsize
if  prop getproperty page diag_pageoverhead     null
// diag_pageoverhead is the amount of space needed by the page
// for it's internal info.
prop put
page diag_pageoverhead
integer tostring page getpagesize     page getmaxfreespace
if  prop getproperty page diag_slottable_size     null
// diag_slottable_size is the amount of space needed by the page
// for the current slot table.
// resolve - it would be better to call a storedpage variable or
// interface.
int slotentrysize   page getslotsinuse     3
page getpagesize   >  65536  ?
storedpage large_slot_size   storedpage small_slot_size
prop put page diag_slottable_size  integer tostring slotentrysize
// loop through slot table and determine row size's and overflow recs.
int  overflow_count   0
int  row_size         0
long min_rowsize      0
long max_rowsize      0
long record_size      0
if  page getslotsinuse   > 0
min_rowsize   long max_value
max_rowsize   long min_value
for  int slot   0  slot < page getslotsinuse    slot
try
if  page getisoverflow slot
if  sanitymanager debug
sanitymanager debug_print
slot
page
overflow_count
record_size   page getrecordlength slot
row_size    record_size
min_rowsize   math min min_rowsize  record_size
max_rowsize   math max max_rowsize  record_size
catch  throwable t
system out println
if  prop getproperty page diag_numoverflowed     null
// diag_numoverflowed is the number of over flow rows on this page.
prop put page diag_numoverflowed  integer tostring overflow_count
if  prop getproperty page diag_rowsize     null
// sum of the record lengths on this page.
prop put page diag_rowsize  integer tostring row_size
if  prop getproperty page diag_minrowsize     null
// minimum length record on this page.
prop put page diag_minrowsize  long tostring min_rowsize
if  prop getproperty page diag_maxrowsize     null
// maximum length record on this page.
prop put page diag_maxrowsize  long tostring max_rowsize
/**
checks the slot table.
<p>
1) checks the number of slot entries matches the record count
2) checks the slot table lengths match the field lengths
@exception  standardexception  standard exception policy.
*/
public boolean checkslottable printstream out  throws standardexception  ioexception
boolean ok   true
int slotcount   page getslotsinuse
int recordcount   page recordcount
if  slotcount    recordcount
out println     slotcount
recordcount
ok   false
for  int slot   0  slot < slotcount  slot
int recordlength   page getrecordportionlength slot
counteroutputstream counter   new counteroutputstream
counter setoutputstream new nulloutputstream
int recordid
page fetchfromslot

slot
new datavaluedescriptor
fetchdescriptor  null  true  getid
page logrecord slot  page log_record_default  recordid
formatablebitset  null  counter   recordhandle null
int actuallength   counter getcount
if  actuallength    recordlength
out println
slot
out println     recordlength
out println     actuallength
ok   false
return ok
public string pageheadertostring
return     page getidentity
page isoverflowpage
page getpageversion
page getslotsinuse
page getpagestatus
page newrecordid