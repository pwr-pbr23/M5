/*
derby - class org.apache.derby.impl.jdbc.authentication.authenticationservicebase
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl jdbc authentication
import org apache derby authentication userauthenticator
import org apache derby iapi reference property
import org apache derby iapi jdbc authenticationservice
import org apache derby iapi reference limits
import org apache derby iapi error standardexception
import org apache derby iapi services i18n messageservice
import org apache derby iapi services context contextservice
import org apache derby iapi services daemon serviceable
import org apache derby iapi services monitor modulesupportable
import org apache derby iapi services monitor modulecontrol
import org apache derby iapi services monitor monitor
import org apache derby iapi store access accessfactory
import org apache derby iapi services property propertyfactory
import org apache derby iapi store access transactioncontroller
import org apache derby iapi services property propertysetcallback
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi reference attribute
import org apache derby iapi services property propertyutil
import org apache derby iapi util stringutil
import java security messagedigest
import java security nosuchalgorithmexception
import java io serializable
import java util dictionary
import java util properties
import java util date
/**
* this is the authentication service base class.
* <p>
* there can be 1 authentication service for the whole cloudscape
* system and/or 1 authentication per database.
* in a near future, we intend to allow multiple authentication services
* per system and/or per database.
* <p>
* it should be extended by the specialized authentication services.
*
* important note:
* --------------
* user passwords are encrypted using sha-1 message digest algorithm
* if they're stored in the database; otherwise they are not encrypted
* if they were defined at the system level.
* sha-1 digest is single hash (one way) digest and is considered very
* secure (160 bits).
*
* @author francois
*/
public abstract class authenticationservicebase
implements authenticationservice  modulecontrol  modulesupportable  propertysetcallback
protected userauthenticator authenticationscheme
// required to retrieve service properties
private accessfactory store
/**
trace flag to trace authentication operations
*/
public static final string authenticationtrace
sanitymanager debug ?     null
/**
pattern that is prefixed to the stored password in the new authentication scheme
*/
public static final string id_pattern_new_scheme
/**
userid with strong password substitute drda security mechanism
*/
protected static final int secmec_usrssbpwd   8
/**
length of the encrypted password in the new authentication scheme
see beetle4601
*/
public static final int magiclen_newencrypt_scheme 44
//
// constructor
//
public authenticationservicebase
protected void setauthenticationservice userauthenticator ascheme
// specialized class is the principal caller.
this authenticationscheme   ascheme
if  sanitymanager debug
sanitymanager assert this authenticationscheme    null
if  sanitymanager debug_on authenticationtrace
java io printwriter idbgstream
sanitymanager get_debug_stream
idbgstream println
this tostring
idbgstream println
this authenticationscheme tostring
/**
/*
** methods of module control - to be overriden
*/
/**
start this module.  in this case, nothing needs to be done.
@see org.apache.derby.iapi.services.monitor.modulecontrol#boot
@exception standardexception upon failure to load/boot
the expected authentication service.
*/
public void boot boolean create  properties properties
throws standardexception
//
// we expect the access factory to be available since we're
// at boot stage.
//
store    accessfactory
monitor getservicemodule this  accessfactory module
// register to be notified upon db properties changes
// _only_ if we're on a database context of course :)
propertyfactory pf    propertyfactory
monitor getservicemodule this  org apache derby iapi reference module propertyfactory
if  pf    null
pf addpropertysetnotification this
/**
* @see org.apache.derby.iapi.services.monitor.modulecontrol#stop
*/
public void stop
// nothing special to be done yet.
/*
** methods of authenticationservice
*/
/**
* authenticate a user inside jbms.t his is an overload method.
*
* we're passed-in a properties object containing user credentials information
* (as well as database name if user needs to be validated for a certain
* database access).
*
* @see
* org.apache.derby.iapi.jdbc.authenticationservice#authenticate
*
*
*/
public boolean authenticate string databasename  properties userinfo  throws java sql sqlexception
if  userinfo     properties  null
return false
string username   userinfo getproperty attribute username_attr
if   username    null     username length   > limits db2_max_userid_length
// db2 has limits on length of the user id, so we enforce the same.
// this used to be error 28000 "invalid authorization id", but with v82,
// db2 changed the behavior to return a normal "authorization failure
// occurred" error; so that means just return "false" and the correct
// exception will be thrown as usual.
return false
if  sanitymanager debug
if  sanitymanager debug_on authenticationtrace
java io printwriter idbgstream
sanitymanager get_debug_stream
idbgstream println
username
databasename
// the following will print the stack trace of the
// authentication request to the log.
//throwable t = new throwable();
//istream.println("authentication request stack trace:");
//t.printstacktrace(istream.getprintwriter());
return this authenticationscheme authenticateuser username
userinfo getproperty attribute password_attr
databasename
userinfo
/**
* returns a property if it was set at the database or
* system level. treated as service property by default.
*
* @return a property string value.
**/
public string getproperty string key
string propertyvalue   null
transactioncontroller tc   null
try
if  store    null
tc   store gettransaction
contextservice getfactory   getcurrentcontextmanager
propertyvalue
propertyutil getserviceproperty tc
key
string  null
if  tc    null
tc commit
tc   null
catch  standardexception se
// do nothing and just return
return propertyvalue
public string getdatabaseproperty string key
string propertyvalue   null
transactioncontroller tc   null
try
if  store    null
tc   store gettransaction
contextservice getfactory   getcurrentcontextmanager
propertyvalue
propertyutil getdatabaseproperty tc  key
if  tc    null
tc commit
tc   null
catch  standardexception se
// do nothing and just return
return propertyvalue
public string getsystemproperty string key
boolean dbonly   false
dbonly   boolean valueof
this getdatabaseproperty
property database_properties_only   booleanvalue
if  dbonly
return null
return propertyutil getsystemproperty key
/*
** methods of propertysetcallback
*/
public void init boolean dbonly  dictionary p
// not called yet ...
/**
@see propertysetcallback#validate
*/
public boolean validate string key  serializable value  dictionary p
return key startswith org apache derby iapi reference property user_property_prefix
/**
@see propertysetcallback#validate
*/
public serviceable apply string key serializable value dictionary p
return null
/**
@see propertysetcallback#map
@exception standardexception thrown on error.
*/
public serializable map string key  serializable value  dictionary p
throws standardexception
// we only care for "derby.user." property changes
// at the moment.
if   key startswith org apache derby iapi reference property user_property_prefix   return null
// we do not encrypt 'derby.user.<username>' password if
// the configured authentication service is ldap as the
// same property could be used to store ldap user full dn (x500).
// in performing this check we only consider database properties
// not system, service or application properties.
string authservice
string p get org apache derby iapi reference property authentication_provider_parameter
if   authservice    null
stringutil sqlequalsignorecase authservice  org apache derby iapi reference property authentication_provider_ldap
return null
// ok, we can encrypt this password in the db
string userpassword    string  value
if  userpassword    null
// encrypt (digest) the password
// the caller will retrieve the new value
userpassword   encryptpassword userpassword
return userpassword
// class implementation
protected final boolean requireauthentication properties properties
//
// we check if derby.connection.requireauthentication system
// property is set to true, otherwise we are the authentication
// service that should be run.
//
string requireauthentication   propertyutil getpropertyfromset
properties
org apache derby iapi reference property require_authentication_parameter
return boolean valueof requireauthentication  booleanvalue
/**
* this method encrypts a clear user password using a
* single hash algorithm such as sha-1 (sha equivalent)
* (it is a 160 bits digest)
*
* the digest is returned as an object string.
*
* @param plaintxtuserpassword plain text user password
*
* @return encrypted user password (digest) as a string object
*/
protected string encryptpassword string plaintxtuserpassword
if  plaintxtuserpassword    null
return null
messagedigest algorithm   null
try
algorithm   messagedigest getinstance
catch  nosuchalgorithmexception nsae
// ignore as we checked already during service boot-up
algorithm reset
byte bytepasswd   null
bytepasswd   stringutil tohexbyte
plaintxtuserpassword 0 plaintxtuserpassword length
algorithm update bytepasswd
byte encryptval   algorithm digest
string hexstring   id_pattern_new_scheme
stringutil tohexstring encryptval 0 encryptval length
return  hexstring
/**
* strong password substitution (usrssbpwd).
*
* this method generate a password subtitute to authenticate a client
* which is using a drda security mechanism such as secmec_usrssbpwd.
*
* depending how the user is defined in derby and if builtin
* is used, the stored password can be in clear-text (system level)
* or encrypted (hashed - *not decryptable*)) (database level) - if the
* user has authenticated at the network level via secmec_usrssbpwd, it
* means we're presented with a password substitute and we need to
* generate a substitute password coming from the store to compare with
* the one passed-in.
*
* note: a lot of this logic could be shared with the drda decryption
*       and client encryption managers - this will be done _once_
*       code sharing along with its rules are defined between the
*       derby engine, client and network code (pending).
*
* substitution algorithm works as follow:
*
* pw_token = sha-1(pw, id)
* the password (pw) and user name (id) can be of any length greater
* than or equal to 1 byte.
* the client generates a 20-byte password substitute (pw_sub) as follows:
* pw_sub = sha-1(pw_token, rdr, rds, id, pwseqs)
*
* w/ (rds) as the random client seed and (rdr) as the server one.
*
* see pwdssb - strong password substitution security mechanism
* (drda vol.3 - p.650)
*
* @return a substituted password.
*/
protected string substitutepassword
string username
string password
properties info
boolean databaseuser
messagedigest messagedigest   null
// pattern that is prefixed to the builtin encrypted password
string id_pattern_new_scheme
// pwseqs's 8-byte value constant - see drda vol 3
byte secmec_usrssbpwd_pwdseqs
byte  0x00   byte  0x00   byte  0x00   byte  0x00
byte  0x00   byte  0x00   byte  0x00   byte  0x01
// generated password substitute
byte passwordsubstitute
try
messagedigest   messagedigest getinstance
catch  nosuchalgorithmexception nsae
// ignore as we checked already during service boot-up
// important note: as the password is stored single-hashed in the
// database, it is impossible for us to decrypt the password and
// recompute a substitute to compare with one generated on the source
// side - hence, we have to generate a password substitute.
// in other words, we cannot figure what the original password was -
// strong password substitution (usrssbpwd) cannot be supported for
// targets which can't access or decrypt passwords on their side.
//
messagedigest reset
byte bytepasswd   null
byte userbytes   stringutil tohexbyte username  0  username length
if  sanitymanager debug
// we must have a source and target seed
sanitymanager assert
string  info getproperty attribute drda_sectkn_in     null
string  info getproperty attribute drda_sectkn_out     null
// retrieve source (client)  and target 8-byte seeds
string sourceseedstr   info getproperty attribute drda_sectkn_in
string targetseedstr   info getproperty attribute drda_sectkn_out
byte sourceseed_
stringutil fromhexstring sourceseedstr  0  sourceseedstr length
byte targetseed_
stringutil fromhexstring targetseedstr  0  targetseedstr length
string hexstring   null
// if user is at the database level, we don't encrypt the password
// as it is already encrypted (builtin scheme) - we only do the
// builtin encryption if the user is defined at the system level
// only - this is required beforehands so that we can do the password
// substitute generation right afterwards.
if   databaseuser
bytepasswd   stringutil tohexbyte password  0  password length
messagedigest update bytepasswd
byte encryptval   messagedigest digest
hexstring   id_pattern_new_scheme
stringutil tohexstring encryptval  0  encryptval length
else
// already encrypted from the database store
hexstring   password
// generate the password substitute now
// generate some 20-byte password token
messagedigest update userbytes
messagedigest update
stringutil tohexbyte hexstring  0  hexstring length
byte passwordtoken   messagedigest digest
// now we generate the 20-byte password substitute
messagedigest update passwordtoken
messagedigest update targetseed_
messagedigest update sourceseed_
messagedigest update userbytes
messagedigest update secmec_usrssbpwd_pwdseqs
passwordsubstitute   messagedigest digest
return stringutil tohexstring passwordsubstitute  0
passwordsubstitute length