/*
derby - class org.apache.derby.iapi.types.bigintegerdecimal
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi types
import java math biginteger
import java sql types
import org apache derby iapi error standardexception
import org apache derby iapi reference sqlstate
import org apache derby iapi services sanity sanitymanager
/**
* decimal support using the immutable java.math.biginteger to perform arithmetic
* and conversions. extends binarydecimal to use the base
* support of that class. j2me/cdc/foundation includes biginteger.
*
* a biginteger is used in calculations etc. to represent the integral unscaled value.
* it is simply created from new biginteger(data2c). no additional instance fields
* are used by this class, a possible enhancement would be to keep the biginteger around
* but would require calls from the parent class to reset state etc.
*/
public final class bigintegerdecimal extends binarydecimal
private static final biginteger ten   biginteger valueof 10l
private static final biginteger maxlong_plus_one   biginteger valueof long max_value  add biginteger one
private static final biginteger minlong_minus_one   biginteger valueof long min_value  subtract biginteger one
public bigintegerdecimal
public datavaluedescriptor getnewnull
return new bigintegerdecimal
public long getlong   throws standardexception
if  isnull
return 0l
biginteger bi   new biginteger data2c
// if at any time we see that the value to be scaled down
// is within the range for a long, then we are guaranteed
// that the scaled down value is within the range for long.
boolean rangeok   false
if   bi compareto bigintegerdecimal maxlong_plus_one  < 0
bi compareto bigintegerdecimal minlong_minus_one  > 0
rangeok   true
for  int i   0  i < sqlscale  i
bi   bi divide bigintegerdecimal ten
if  rangeok
continue
if   bi compareto bigintegerdecimal maxlong_plus_one  < 0
bi compareto bigintegerdecimal minlong_minus_one  > 0
rangeok   true
// todo range checking
if   rangeok
throw standardexception newexception sqlstate lang_outside_range_for_datatype
return bi longvalue
public float getfloat   throws standardexception
if  isnull
return 0 0f
return numberdatatype normalizereal float parsefloat getstring
public double getdouble   throws standardexception
if  isnull
return 0 0
return numberdatatype normalizedouble double parsedouble getstring
// 0 or null is false, all else is true
public boolean	getboolean
if  isnull
return false
biginteger bi   new biginteger data2c
return bi compareto java math biginteger zero     0
/**
* set the value from a string, the format is
* nnnn
*
* scale always set to zero.
*/
public void setvalue string thevalue  throws standardexception
if  thevalue    null
restoretonull
return
thevalue   thevalue trim
int dot   thevalue indexof
int eposition   thevalue indexof
if  eposition     1
eposition   thevalue indexof
int scale   0
try
// handle the exponent
if  eposition     1
if  dot > eposition
throw invalidformat
// integer.parseint does not handle a + sign in
// front of the number, while the format for the
// exponent allows it. need to strip it off.
int expoffset   eposition   1
if  expoffset >  thevalue length
throw invalidformat
if  thevalue charat expoffset
// strip the plus but must ensure the next character
// is not a - sign. any other invalid sign will be handled
// by integer.parseint.
expoffset
if  expoffset >  thevalue length
throw invalidformat
if  thevalue charat expoffset
throw invalidformat
string exponent   thevalue substring expoffset
scale    1   integer parseint exponent
thevalue   thevalue substring 0  eposition
if  dot     1
// remove the dot from the string
string leading   thevalue substring 0  dot
scale     thevalue length      dot   1
thevalue   leading concat thevalue substring dot   1  thevalue length
if  scale < 0
for  int i   scale  i < 0  i
thevalue   thevalue concat
scale   0
biginteger bi   new biginteger thevalue
data2c   bi tobytearray
sqlscale   scale
catch  numberformatexception nfe
throw invalidformat
/* (non-javadoc)
* @see org.apache.derby.iapi.types.datavaluedescriptor#getstring()
*/
public string getstring
if  isnull
return null
string unscaled   new biginteger data2c  tostring
if  sqlscale    0
return unscaled
boolean isnegative   this isnegative
if  sqlscale >   unscaled length      isnegative ? 1   0
if  isnegative
unscaled   unscaled substring 1
string val   isnegative ?
for  int i   sqlscale   unscaled length    i > 0  i
val   val concat
return val concat unscaled
string val   unscaled substring 0  unscaled length     sqlscale
val   val concat
return val concat unscaled substring unscaled length     sqlscale  unscaled length
/**
* return the sql precision of this value.
*/
public int getdecimalvalueprecision
if  isnull
return 0
biginteger bi   new biginteger data2c
if  biginteger zero equals bi
return 0
int precision   bi tostring   length
if  this isnegative
precision
if  precision < sqlscale
return sqlscale
return precision
/**
* compare two non-null numberdatavalues using decimal arithmetic.
*/
protected int typecompare datavaluedescriptor arg  throws standardexception
bigintegerdecimal obid   getbid arg
// need to align scales to perform comparisions
int tscale   getdecimalvaluescale
int oscale   obid getdecimalvaluescale
biginteger tbi   new biginteger data2c
biginteger obi   new biginteger obid data2c
if  tscale < oscale
tbi   bigintegerdecimal rescale tbi  oscale   tscale
else if  oscale < tscale
obi   bigintegerdecimal rescale obi  tscale   oscale
return tbi compareto obi
/**
* add two non-null numberdatavalues using decimal arithmetic.
* uses add() to perform the calculation.
*/
public numberdatavalue plusnn numberdatavalue left  numberdatavalue right  numberdatavalue result
throws standardexception
binarydecimal resultbid    binarydecimal  result
if  resultbid    null
resultbid   new bigintegerdecimal
bigintegerdecimal lbid   getbid left
bigintegerdecimal rbid   getbid right
// need to align scales to perform plus
int lscale   lbid getdecimalvaluescale
int rscale   rbid getdecimalvaluescale
biginteger bi1   new biginteger lbid data2c
biginteger bi2   new biginteger rbid data2c
int tscale   lscale
if  lscale < rscale
bi1   bigintegerdecimal rescale bi1  rscale   lscale
tscale   rscale
else if  rscale < lscale
bi2   bigintegerdecimal rescale bi2  lscale   rscale
bi1   bi1 add bi2
resultbid data2c   bi1 tobytearray
resultbid sqlscale   tscale
return resultbid
/**
* negate the number.
* @see org.apache.derby.iapi.types.numberdatavalue#minus(org.apache.derby.iapi.types.numberdatavalue)
*/
public numberdatavalue minus numberdatavalue result  throws standardexception
if  result    null
result    numberdatavalue  getnewnull
if  isnull
result settonull
else
binarydecimal rbd    binarydecimal  result
biginteger bi   new biginteger data2c
// scale remains unchanged.
rbd data2c   bi negate   tobytearray
rbd sqlscale   sqlscale
return result
/**
* multiple two non-null numberdatavalues using decimal arithmetic.
* uses biginteger.multipy() to perform the calculation.
* simply multiply the unscaled values and add the scales, proof:
<code>
left * right
= (left_unscaled * 10^-left_scale) * (right_unscaled * 10^-right_scale)
= (left_unscaled * 10^-left_scale) * (right_unscaled * 10^-right_scale)
= (left_unscaled * right_unscaled) * 10^-(left_scale + right_scale)
</code>
*/
public numberdatavalue timesnn numberdatavalue left  numberdatavalue right  numberdatavalue result
throws standardexception
bigintegerdecimal resultbid    bigintegerdecimal  result
if  resultbid    null
resultbid   new bigintegerdecimal
bigintegerdecimal lbid   getbid left
bigintegerdecimal rbid   getbid right
biginteger lbi   new biginteger lbid data2c
biginteger rbi   new biginteger rbid data2c
rbi   lbi multiply rbi
resultbid data2c   rbi tobytearray
resultbid sqlscale   lbid getdecimalvaluescale     rbid getdecimalvaluescale
return resultbid
/**
* divide two non-null numberdatavalues using decimal arithmetic.
* uses divide() to perform the calculation.
* simply multiply the unscaled values and subtract the scales, proof:
<code>
left / right
= (left_unscaled * 10^-left_scale) / (right_unscaled * 10^-right_scale)
= (left_unscaled / right_unscaled) * (10^-left_scale / 10^-right_scale)
= (left_unscaled / right_unscaled) * (10^-(left_scale-right_scale))
</code>
*/
public numberdatavalue dividenn numberdatavalue left  numberdatavalue right
numberdatavalue result  int scale
throws standardexception
binarydecimal resultbid    binarydecimal  result
if  resultbid    null
resultbid   new bigintegerdecimal
bigintegerdecimal lbid   getbid left
bigintegerdecimal rbid   getbid right
biginteger lbi   new biginteger lbid data2c
biginteger rbi   new biginteger rbid data2c
if  biginteger zero equals rbi
throw  standardexception newexception sqlstate lang_divide_by_zero
int lscale   lbid getdecimalvaluescale
int rscale   rbid getdecimalvaluescale
if  scale >  0
if  lscale <  scale   rscale
lbi   bigintegerdecimal rescale lbi  scale   rscale   lscale
lscale   scale   rscale
rbi   lbi divide rbi
resultbid sqlscale   lscale   rscale
if  resultbid sqlscale < 0
rbi   bigintegerdecimal rescale rbi   resultbid sqlscale
resultbid sqlscale   0
resultbid data2c   rbi tobytearray
return resultbid
public void normalize
datatypedescriptor desiredtype
datavaluedescriptor source
throws standardexception
int desiredscale   desiredtype getscale
int desiredprecision   desiredtype getprecision
setfrom source
setwidth desiredprecision  desiredscale  true
/* (non-javadoc)
* @see org.apache.derby.iapi.types.variablesizedatavalue#setwidth(int, int, boolean)
*/
public void setwidth int desiredprecision  int desiredscale
boolean errorontrunc  throws standardexception
if  isnull
return
int deltascale   desiredscale   sqlscale
if  desiredprecision    ignore_precision
int currentprecision   getdecimalvalueprecision
int futureprecision   currentprecision   deltascale
if  futureprecision > desiredprecision
throw standardexception newexception sqlstate lang_outside_range_for_datatype
desiredprecision   desiredscale
if  deltascale    0
return
biginteger bi   new biginteger data2c
bi   bigintegerdecimal rescale bi  deltascale
data2c   bi tobytearray
sqlscale   desiredscale
/**
* obtain a binarydecimal that represents the passed in value.
*/
private bigintegerdecimal getbid datavaluedescriptor value
throws standardexception
switch  value typetobigdecimal
case types decimal
return  bigintegerdecimal  value
case types char
bigintegerdecimal bid   new bigintegerdecimal
bid setvalue value getstring
return bid
case types bigint
bigintegerdecimal bid   new bigintegerdecimal
bid setvalue value getlong
return bid
default
if  sanitymanager debug
sanitymanager throwassert
value getclass
value typetobigdecimal
return null
/**
* rescale a biginteger, a positive delta means the scale is increased, zero
* no change and negative decrease of scale. it is up to the caller to
* manage the actual scale of the value, e.g. don't allow the scale to go
* negative.
*
* @param bi
*            value to be rescaled
* @param deltascale
*            change of scale
* @return rescaled value
*/
private static biginteger rescale biginteger bi  int deltascale
if  deltascale    0
return bi
if  deltascale > 0
// scale increasing, e.g. 10.23 to 10.2300
for  int i   0  i < deltascale  i
bi   bi multiply bigintegerdecimal ten
else if  deltascale < 0
// scale decreasing, e.g. 10.2345 to 10.23
for  int i   deltascale  i < 0  i
bi   bi divide bigintegerdecimal ten
return bi
/*
* string display of value
*/
public string tostring
if  isnull
return
else
return getstring