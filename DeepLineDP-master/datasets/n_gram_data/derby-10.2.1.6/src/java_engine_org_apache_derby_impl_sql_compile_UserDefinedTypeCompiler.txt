/*
derby - class org.apache.derby.impl.sql.compile.userdefinedtypecompiler
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl sql compile
import org apache derby iapi services loader classfactory
import org apache derby iapi error standardexception
import org apache derby iapi types datatypedescriptor
import org apache derby iapi types datavaluefactory
import org apache derby iapi types typeid
import org apache derby iapi sql compile typecompiler
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi services compiler localfield
import org apache derby iapi services compiler methodbuilder
import org apache derby iapi reference classname
public class userdefinedtypecompiler extends basetypecompiler
/* typecompiler methods */
/**
* user types are comparable to other user types only if
* (for now) they are the same type and are being used to
* implement some jdbc type.  this is sufficient for
* date/time types; it may be generalized later for e.g.
* comparison of any user type with one of its subtypes.
*
* @param othertype the type of the instance to compare with this type.
* @param forequals true if this is an = or <> comparison, false
*					otherwise.
* @param cf		a classfactory
* @return true if othertype is comparable to this type, else false.
*/
public boolean comparable typeid othertype
boolean forequals
classfactory cf
if  forequals
return true
try
class thisclass   cf getclassinspector   getclass
gettypeid   getcorrespondingjavatypename
return java lang comparable class isassignablefrom thisclass
catch  classnotfoundexception cnfe
return false
/**
* user types are convertible to other user types only if
* (for now) they are the same type and are being used to
* implement some jdbc type.  this is sufficient for
* date/time types; it may be generalized later for e.g.
* comparison of any user type with one of its subtypes.
*
* @param othertype
* @param fordatatypefunction
* @return true if othertype is convertible to this type, else false.
*
*@see typecompiler#convertible
*/
public boolean convertible typeid othertype  boolean fordatatypefunction
/*
** we are a user defined type, we are
** going to have to let the client find out
** the hard way.
*/
return true
/** @see typecompiler#compatible */
public boolean compatible typeid othertype
return convertible othertype  false
/**
* user types are storable into other user types that they
* are assignable to. the other type must be a subclass of
* this type, or implement this type as one of its interfaces.
*
* built-in types are also storable into user types when the built-in
* type's corresponding java type is assignable to the user type.
*
* @param othertype the type of the instance to store into this type.
* @param cf		a classfactory
* @return true if othertype is storable into this type, else false.
*/
public boolean storable typeid othertype  classfactory cf
return cf getclassinspector   assignableto
othertype getcorrespondingjavatypename
gettypeid   getcorrespondingjavatypename
/** @see typecompiler#interfacename */
public string interfacename
return classname userdatavalue
/**
* @see typecompiler#getcorrespondingprimitivetypename
*/
public string getcorrespondingprimitivetypename
return gettypeid   getcorrespondingjavatypename
/**
* @see typecompiler#getcasttocharwidth
*/
public int getcasttocharwidth datatypedescriptor dts
// this is the maximum maximum width for user types
return  1
protected string nullmethodname
return
public void generatedatavalue methodbuilder mb
localfield field
// cast the value to an object for method resolution
mb upcast
super generatedatavalue mb  field