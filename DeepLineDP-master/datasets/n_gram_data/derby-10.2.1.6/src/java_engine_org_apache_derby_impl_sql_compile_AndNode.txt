/*
derby - class org.apache.derby.impl.sql.compile.andnode
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package	org apache derby impl sql compile
import org apache derby iapi sql dictionary datadictionary
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi error standardexception
import org apache derby iapi sql compile nodefactory
import org apache derby iapi sql compile c_nodetypes
import java util vector
public class andnode extends binarylogicaloperatornode
/**
* initializer for an andnode
*
* @param leftoperand	the left operand of the and
* @param rightoperand	the right operand of the and
*/
public void init object leftoperand  object rightoperand
super init leftoperand  rightoperand
this shortcircuitvalue   false
/**
* bind this logical operator.  all that has to be done for binding
* a logical operator is to bind the operands, check that both operands
* are booleandatavalue, and set the result type to booleandatavalue.
*
* @param fromlist			the query's from list
* @param subquerylist		the subquery list being built as we find subquerynodes
* @param aggregatevector	the aggregate vector being built as we find aggregatenodes
*
* @return	the new top of the expression tree.
*
* @exception standardexception		thrown on error
*/
public valuenode bindexpression
fromlist fromlist  subquerylist subquerylist
vector aggregatevector
throws standardexception
super bindexpression fromlist  subquerylist  aggregatevector
postbindfixup
return this
/**
* preprocess an expression tree.  we do a number of transformations
* here (including subqueries, in lists, like and between) plus
* subquery flattening.
* note: this is done before the outer resultsetnode is preprocessed.
*
* @param	numtables			number of tables in the dml statement
* @param	outerfromlist		fromlist from outer query block
* @param	outersubquerylist	subquerylist from outer query block
* @param	outerpredicatelist	predicatelist from outer query block
*
* @return		the modified expression
*
* @exception standardexception		thrown on error
*/
public valuenode preprocess int numtables
fromlist outerfromlist
subquerylist outersubquerylist
predicatelist outerpredicatelist
throws standardexception
/* if the left child is an or, then mark it as the 1st or in
* the list.  that will allow us to consider converting the or
* to an in list when we preprocess the 1st or in the list.
*/
if  leftoperand instanceof ornode
ornode  leftoperand  setfirstor
leftoperand   leftoperand preprocess numtables
outerfromlist  outersubquerylist
outerpredicatelist
/* we need to rerun the changetocnf() phase if our left operand
* is an andnode.  this can happen due to a predicate transformation,
* such as the ones for like and between, underneath us.
*/
if  leftoperand instanceof andnode
changetocnf false
rightoperand   rightoperand preprocess numtables
outerfromlist  outersubquerylist
outerpredicatelist
return this
/**
* eliminate notnodes in the current query block.  we traverse the tree,
* inverting ands and ors and eliminating nots as we go.  we stop at
* comparisonoperators and boolean expressions.  we invert
* comparisonoperators and replace boolean expressions with
* boolean expression = false.
* note: since we do not recurse under comparisonoperators, there
* still could be notnodes left in the tree.
*
* @param	undernotnode		whether or not we are under a notnode.
*
*
* @return		the modified expression
*
* @exception standardexception		thrown on error
*/
valuenode eliminatenots boolean undernotnode
throws standardexception
leftoperand   leftoperand eliminatenots undernotnode
rightoperand   rightoperand eliminatenots undernotnode
if    undernotnode
return this
/* convert the andnode to an ornode */
valuenode	ornode
ornode    valuenode  getnodefactory   getnode
c_nodetypes or_node
leftoperand
rightoperand
getcontextmanager
ornode settype datatypeservices
return ornode
/**
* do the 1st step in putting an expression into conjunctive normal
* form.  this step ensures that the top level of the expression is
* a chain of andnodes terminated by a true booleanconstantnode.
*
* @return		the modified expression
*
* @exception standardexception		thrown on error
*/
public valuenode putandsontop
throws standardexception
if  sanitymanager debug
sanitymanager assert rightoperand    null
rightoperand   rightoperand putandsontop
return this
/**
* verify that putandsontop() did its job correctly.  verify that the top level
* of the expression is a chain of andnodes terminated by a true booleanconstantnode.
*
* @return		boolean which reflects validity of the tree.
*/
public boolean verifyputandsontop
boolean isvalid   true
if  sanitymanager assert
isvalid     rightoperand instanceof andnode
rightoperand isbooleantrue
if  rightoperand instanceof andnode
isvalid   rightoperand verifyputandsontop
return isvalid
/**
* finish putting an expression into conjunctive normal
* form.  an expression tree in conjunctive normal form meets
* the following criteria:
*		o  if the expression tree is not null,
*		   the top level will be a chain of andnodes terminating
*		   in a true booleanconstantnode.
*		o  the left child of an andnode will never be an andnode.
*		o  any right-linked chain that includes an andnode will
*		   be entirely composed of andnodes terminated by a true booleanconstantnode.
*		o  the left child of an ornode will never be an ornode.
*		o  any right-linked chain that includes an ornode will
*		   be entirely composed of ornodes terminated by a false booleanconstantnode.
*		o  valuenodes other than andnodes and ornodes are considered
*		   leaf nodes for purposes of expression normalization.
*		   in other words, we won't do any normalization under
*		   those nodes.
*
* in addition, we track whether or not we are under a top level andnode.
* subquerynodes need to know this for subquery flattening.
*
* @param	undertopandnode		whether or not we are under a top level andnode.
*
*
* @return		the modified expression
*
* @exception standardexception		thrown on error
*/
public valuenode changetocnf boolean undertopandnode
throws standardexception
andnode curand   this
/* top chain will be a chain of ands terminated by a non-andnode.
* (putandsontop() has taken care of this. if the last node in
* the chain is not a true booleanconstantnode then we need to do the
* transformation to make it so.
*/
/* add the true booleanconstantnode if not there yet */
if    rightoperand instanceof andnode
rightoperand isbooleantrue
booleanconstantnode	truenode
truenode    booleanconstantnode  getnodefactory   getnode
c_nodetypes boolean_constant_node
boolean true
getcontextmanager
curand setrightoperand
valuenode  getnodefactory   getnode
c_nodetypes and_node
curand getrightoperand
truenode
getcontextmanager
andnode  curand getrightoperand    postbindfixup
/* if leftoperand is an andnode, then we modify the tree from:
*
*				this
*			   /	\
*			and2	nodex
*		   /	\		...
*		left2	right2
*
*	to:
*
*						this
*					   /	\
*	left2.changetocnf()		 and2
*							/	\
*		right2.changetocnf()	  nodex.changetocnf()
*
*	note: we could easily switch places between left2.changetocnf() and
*  right2.changetocnf().
*/
/* pull up the andnode chain to our left */
while  leftoperand instanceof andnode
valuenode newleft
andnode	  oldleft
andnode	  newright
valuenode oldright
/* for "clarity", we first get the new and old operands */
newleft     andnode  leftoperand  getleftoperand
oldleft    andnode  leftoperand
newright    andnode  leftoperand
oldright   rightoperand
/* we then twiddle the tree to match the above diagram */
leftoperand   newleft
rightoperand   newright
newright setleftoperand oldleft getrightoperand
newright setrightoperand oldright
/* finally, we continue to normalize the left and right subtrees. */
leftoperand   leftoperand changetocnf undertopandnode
rightoperand   rightoperand changetocnf undertopandnode
return this
/**
* verify that changetocnf() did its job correctly.  verify that:
*		o  andnode  - rightoperand is not instanceof ornode
*				      leftoperand is not instanceof andnode
*		o  ornode	- rightoperand is not instanceof andnode
*					  leftoperand is not instanceof ornode
*
* @return		boolean which reflects validity of the tree.
*/
public boolean verifychangetocnf
boolean isvalid   true
if  sanitymanager assert
isvalid     rightoperand instanceof andnode
rightoperand isbooleantrue
if  rightoperand instanceof andnode
isvalid   rightoperand verifychangetocnf
if  leftoperand instanceof andnode
isvalid   false
else
isvalid   isvalid    leftoperand verifychangetocnf
return isvalid
/**
* do bind() by hand for an andnode that was generated after bind(),
* eg by putandsontop(). (set the data type and nullability info.)
*
* @exception standardexception		thrown on error
*/
void postbindfixup
throws standardexception
settype resolvelogicalbinaryoperator
leftoperand gettypeservices
rightoperand gettypeservices