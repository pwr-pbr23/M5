/*
derby - class org.apache.derby.catalog.indexdescriptor
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby catalog
/**
*
* this interface describes an index.
*
* it is used in the column sys.sysconglomerates.descriptor
* and describes everything about an index except the index name and
* the table on which the index is defined.
* that information is available
* in the columns name and tableid of the table sys.sysconglomerates.
*/
public interface indexdescriptor
/**
* returns true if the index is unique.
*/
boolean			isunique
/**
* returns an array of column positions in the base table.  each index
* column corresponds to a column position in the base table, except
* the column representing the location of the row in the base table.
* the returned array holds the column positions in the
* base table, so, if entry 2 is the number 4, the second
* column in the index is the fourth column in the table.
*/
public int	basecolumnpositions
/**
* returns the postion of a column.
* <p>
* returns the position of a column within the key (1-based).
* 0 means that the column is not in the key.
*/
public integer getkeycolumnposition integer heapcolumnposition
/**
* returns the postion of a column.
* <p>
* returns the position of a column within the key (1-based).
* 0 means that the column is not in the key.  same as the above
* method, but it uses int instead of integer.
*/
public int getkeycolumnposition int heapcolumnposition
/**
* returns the number of ordered columns.
* <p>
* in the future, it will be
* possible to store non-ordered columns in an index.  these will be
* useful for covered queries.  the ordered columns will be at the
* beginning of the index row, and they will be followed by the
* non-ordered columns.
*
* for now, all columns in an index must be ordered.
*/
int				numberoforderedcolumns
/**
* returns the type of the index.  for now, we only support b-trees,
* so the value "btree" is returned.
*/
string			indextype
/**
* returns array of boolean telling asc/desc info for each index
* key column for convenience of using together with basecolumnpositions
* method.  both methods return an array with subscript starting from 0.
*/
public boolean	isascending
/**
* returns true if the specified column is ascending in the index
* (1-based).
*/
boolean			isascending integer keycolumnposition
/**
* returns true if the specified column is descending in the index
* (1-based).  in the current release, only ascending columns are
* supported.
*/
boolean			isdescending integer keycolumnposition
/**
* set the basecolumnpositions field of the index descriptor.  this
* is for updating the field in operations such as "alter table drop
* column" where basecolumnpositions is changed.
*/
public void     setbasecolumnpositions int basecolumnpositions
/**
* set the isascending field of the index descriptor.  this
* is for updating the field in operations such as "alter table drop
* column" where isascending is changed.
*/
public void     setisascending boolean isascending
/**
* set the numberoforderedcolumns field of the index descriptor.  this
* is for updating the field in operations such as "alter table drop
* column" where numberoforderedcolumns is changed.
*/
public void     setnumberoforderedcolumns int numberoforderedcolumns