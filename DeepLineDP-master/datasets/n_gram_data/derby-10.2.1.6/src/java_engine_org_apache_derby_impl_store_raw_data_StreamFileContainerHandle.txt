/*
derby - class org.apache.derby.impl.store.raw.data.streamfilecontainerhandle
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl store raw data
import org apache derby iapi services locks lockable
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi error standardexception
import org apache derby iapi store raw streamcontainerhandle
import org apache derby iapi store raw containerkey
import org apache derby iapi store raw xact rawtransaction
import org apache derby iapi types datavaluedescriptor
import org apache derby impl store raw data droponcommit
import org apache derby catalog uuid
import java util observable
import java util observer
import java util properties
/**
a handle to an open stream container, implememts streamcontainerhandle.
<p>
this class is an observer to observe rawtransactions
<br> mt - mutable - immutable identity - thread aware
*/
final class streamfilecontainerhandle
implements  streamcontainerhandle  observer
/*
** fields
*/
/**
raw store identifier
<br> mt - immutable
*/
private final uuid rawstoreid
/**
container identifier
<br> mt - immutable
*/
protected final containerkey identity
/**
is this streamcontainerhandle active.
<br> mt - mutable : scoped
*/
protected boolean active
/**
the actual container we are accessing. only valid when active is true.
<br> mt - mutable : scoped
*/
protected streamfilecontainer container
/**
our transaction. only valid when active is true.
<br> mt - mutable : scoped
*/
protected rawtransaction xact
/**
whether this container should be held open across commit.
only valid when active is true.
<br> mt - mutable : scoped
*/
private boolean     hold
/*
** constructor
*/
public streamfilecontainerhandle
uuid            rawstoreid
rawtransaction  xact
containerkey    identity
boolean         hold
this identity     identity
this xact         xact
this rawstoreid   rawstoreid
this hold         hold
public streamfilecontainerhandle
uuid                rawstoreid
rawtransaction      xact
streamfilecontainer container
boolean             hold
this identity     container getidentity
this xact         xact
this rawstoreid   rawstoreid
this hold         hold
this container    container
// we are inactive until usecontainer is called.
/*
** methods from streamcontainerhandle
*/
/**
* request the system properties associated with a container.
* @see streamcontainerhandle#getcontainerproperties
* @param prop   property list to fill in.
*
* @exception  standardexception  standard exception policy.
**/
public void getcontainerproperties properties prop
throws standardexception
container getcontainerproperties prop
return
/**
* fetch a row from the container.
*
* @exception  standardexception  standard exception policy.
**/
public boolean fetchnext datavaluedescriptor row
throws standardexception
return container fetchnext row
/**
@see streamcontainerhandle#close
@exception  standardexception  standard exception policy.
*/
public void close
if  xact    null
// probably be closed explicitly by a client, after closing
// automatically after an abort.
if  sanitymanager debug
sanitymanager assert  active
return
active   false
// let go of the container
container close
container   null
// and remove ourseleves from this transaction
xact deleteobserver this
xact   null
/**
remove the stream container
@exception standardexception standard cloudscape error policy
@see streamcontainerhandle#removecontainer
*/
public void removecontainer   throws standardexception
container removecontainer
/**
get the container key for the stream container
*/
public containerkey getid
return identity
/*
**	methods of observer
*/
/**
called when the transaction is about to complete.
@see observer#update
*/
public void update observable obj  object arg
if  sanitymanager debug
if  arg    null
sanitymanager throwassert     this
// already been removed from the list
if  xact    null
return
if  sanitymanager debug
// just check reference equality
if  obj    xact
sanitymanager throwassert
xact       obj
// close on a commit, abort or drop of this container.
if  arg equals rawtransaction commit
arg equals rawtransaction abort
arg equals identity
// close the container
close
return
if  arg equals rawtransaction savepoint_rollback
// remain open
return
/*
** implementation specific methods, these are public so that they can be called
** in other packages that are specific implementations of data, ie.
** a directory at the level
**
** com.ibm.db2j.impl.database.storage.rawstore.data.*
*/
/**
attach me to a container. if this method returns false then
i cannot be used anymore, and any reference to me must be discarded.
@exception standardexception standard cloudscape error policy
*/
public boolean usecontainer   throws standardexception
if  sanitymanager debug
sanitymanager assert  active
sanitymanager assert container    null
// always set forupdate to false
if   container use this
container   null
return false
active   true
// watch transaction and close ourseleves just before it completes.
if   hold
xact addobserver this
xact addobserver new droponcommit identity  true
return true
/**
return the rawtransaction this object was opened in.
*/
public final rawtransaction gettransaction
if  sanitymanager debug
sanitymanager assert xact    null
return xact
/*
** implementation specific methods for myself and my sub-classes
*/
public string tostring
if  sanitymanager debug
string str   new string
str        identity tostring
return str
else
return super tostring