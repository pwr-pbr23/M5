/*
derby - class org.apache.derby.iapi.sql.compile.requiredrowordering
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi sql compile
import org apache derby iapi error standardexception
import org apache derby iapi util jbitset
/**
* this interface provides a representation of the required ordering of rows
* from a resultset.  different operations can require ordering: order by,
* distinct, group by.  some operations, like order by, require that the
* columns be ordered a particular way, while others, like distinct and
* group by, reuire only that there be no duplicates in the result.
*/
public interface requiredrowordering
static final int sort_required   1
static final int eliminate_dups   2
static final int nothing_required   3
/**
* tell whether sorting is required for this requiredrowordering,
* given a rowordering.
*
* @param rowordering	the order of rows in question
*
* @return	sort_required if sorting is required,
*			eliminate_dups if no sorting is required but duplicates
*							must be eliminated (i.e. the rows are in
*							the right order but there may be duplicates),
*			nothing_required is no operation is required
*
* @exception standardexception		thrown on error
*/
int sortrequired rowordering rowordering  throws standardexception
/**
* tell whether sorting is required for this requiredrowordering,
* given a rowordering representing a partial join order, and
* a bit map telling what tables are represented in the join order.
* this is useful for reducing the number of cases the optimizer
* has to consider.
*
* @param rowordering	the order of rows in the partial join order
* @param tablemap		a bit map of the tables in the partial join order
*
* @return	sort_required if sorting is required,
*			eliminate_dups if no sorting is required by duplicates
*							must be eliminated (i.e. the rows are in
*							the right order but there may be duplicates),
*			nothing_required is no operation is required
*
* @exception standardexception		thrown on error
*/
int sortrequired rowordering rowordering  jbitset tablemap
throws standardexception
/**
* estimate the cost of doing a sort for this row ordering, given
* the number of rows to be sorted.  this does not take into account
* whether the sort is really needed.  it also estimates the number of
* result rows.
*
* @param estimatedinputrows	the estimated number of rows to sort
* @param rowordering			the ordering of the input rows
* @param resultcost			a place to store the resulting cost
*
* @exception standardexception		thrown on error
*/
void estimatecost double estimatedinputrows
rowordering rowordering
costestimate resultcost
throws standardexception
/**
* indicate that a sort is necessary to fulfill this required ordering.
* this method may be called many times during a single optimization.
*/
void sortneeded
/**
* indicate that a sort is *not* necessary to fulfill this required
* ordering.  this method may be called many times during a single
* optimization.
*/
void sortnotneeded
boolean getsortneeded