/*
derby - class org.apache.derby.impl.store.raw.xact.xactid
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl store raw xact
import org apache derby iapi services io formatidutil
import org apache derby iapi services io storedformatids
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi error standardexception
import org apache derby iapi store raw xact transactionid
import org apache derby iapi services io compressednumber
import java io objectoutput
import java io objectinput
import java io ioexception
/**
use this class for a short hand representation of the transaction.  this
value is only guarentee to be unique within one continuous operation of the
raw store, in other words, every reboot may reuse the same value.
whereas globalxactid is unique for all times across all raw store, a xactid
is only unique within a particular rawstore and may be reused.
xactid keeps track of the outstanding transactionid and is responsible
for dispensing new transactionids
*/
public class xactid implements transactionid
/*
** fields
*/
private long id 			   immutable
/*
** constructor
*/
public xactid long id
this id   id
/*
* formatable methods
*/
// no-arg constructor, required by formatable
public xactid     super
/**
write this out.
@exception ioexception error writing to log stream
*/
public void writeexternal objectoutput out  throws ioexception
compressednumber writelong out  id
/**
read this in
@exception ioexception error reading from log stream
*/
public void readexternal objectinput in  throws ioexception
id   compressednumber readlong in
/**
return my format identifier.
*/
public int gettypeformatid
return storedformatids raw_store_xact_id
/**
transactionid method
*/
public int getmaxstoredsize
return formatidutil getformatidbytelength storedformatids raw_store_xact_id
compressednumber max_long_stored_size
public boolean equals object other
if  other    this
return true
// assume cast will be successful rather than waste time doing an
// instanceof first.  catch the exception if it failed.
try
xactid oxid    xactid other
return  id    oxid id
catch  classcastexception cce
return false
public int hashcode
return  int id
/**
methods specific to this class
*/
/**
return	0 if a == b,
+ve number if a > b
-ve number if a < b
*/
public static long compare transactionid a  transactionid b
if  a    null    b    null
if  a    null
return  1
else if  b    null
return 1
else
return 0
if  sanitymanager debug
sanitymanager assert a instanceof xactid
sanitymanager assert b instanceof xactid
xactid a    xactid a
xactid b    xactid b
return a id   b id
protected long getid
return id
public string tostring
// needed for virtual lock table
return long tostring id