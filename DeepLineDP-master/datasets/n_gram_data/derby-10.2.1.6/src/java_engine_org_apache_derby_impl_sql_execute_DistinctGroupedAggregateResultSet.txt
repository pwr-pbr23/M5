/*
derby - class org.apache.derby.impl.sql.execute.distinctgroupedaggregateresultset
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl sql execute
import org apache derby iapi services monitor monitor
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi services stream headerprintwriter
import org apache derby iapi services stream infostreams
import org apache derby iapi services io formatable
import org apache derby iapi sql execute cursorresultset
import org apache derby iapi sql resultset
import org apache derby iapi sql execute execindexrow
import org apache derby iapi sql execute noputresultset
import org apache derby iapi sql activation
import org apache derby iapi store access columnordering
import org apache derby iapi store access transactioncontroller
import org apache derby iapi store access scancontroller
import org apache derby iapi services loader generatedmethod
import org apache derby iapi sql execute executioncontext
import org apache derby iapi sql conn languageconnectioncontext
import org apache derby iapi types rowlocation
import org apache derby iapi error standardexception
import java util properties
import java util vector
import java util enumeration
/**
* this resultset evaluates grouped aggregates when there is 1 or more distinct aggregate.
* it will scan the entire source result set and calculate
* the grouped aggregates when scanning the source during the
* first call to next().
*
* resolve - this subclass is essentially empty.  someday we will need to write
* additional code for distinct grouped aggregates, especially when we support
* multiple distinct aggregates.
*
* @author jerry (broken out from sortresultset)
*/
class distinctgroupedaggregateresultset extends groupedaggregateresultset
/**
* constructor
*
* @param	s			input result set
* @param	isinsortedorder	true if the source results are in sorted order
* @param	aggregateitem	indicates the number of the
*		savedobject off of the preparedstatement that holds the
*		aggregatorinfolist used by this routine.
* @param	orderingitem	indicates the number of the
*		savedobject off of the preparedstatement that holds the
*		columordering array used by this routine
* @param	a				activation
* @param	ra				generated method to build an empty
*	 	output row
* @param	maxrowsize		approx row size, passed to sorter
* @param	resultsetnumber	the resultsetnumber for this result set
*
* @exception standardexception thrown on error
*/
distinctgroupedaggregateresultset noputresultset s
boolean isinsortedorder
int	aggregateitem
int	orderingitem
activation a
generatedmethod ra
int maxrowsize
int resultsetnumber
double optimizerestimatedrowcount
double optimizerestimatedcost  throws standardexception
super s  isinsortedorder  aggregateitem  orderingitem
a  ra  maxrowsize  resultsetnumber  optimizerestimatedrowcount  optimizerestimatedcost
///////////////////////////////////////////////////////////////////////////////
//
// resultset interface (leftover from noputresultset)
//
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
//
// cursorresultset interface
//
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
//
// scan abstraction utilities
//
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
//
// aggregation utilities
//
///////////////////////////////////////////////////////////////////////////////