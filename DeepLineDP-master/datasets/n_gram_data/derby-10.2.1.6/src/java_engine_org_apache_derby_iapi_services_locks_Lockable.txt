/*
derby - class org.apache.derby.iapi.services.locks.lockable
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi services locks
import java util hashtable
/**
any object that needs to be locked must implement lockable.
this allows a generic lock manager that can have locking policies
defined on a per-object basis.
a request to lock the object takes a qualifier, this qualifier may be
used the object to implement a complex locking policy, e.g. traditional
database shared, update and exclusive locks.
<p>
the lock manager uses this ordered protocol to determine if a lock request on a
lockable <tt> l </tt> with qualifier <tt> q1 </tt> in compatiblity space
<tt> cs1 </tt> can be granted:
<ol>
<li>if no locks are held on <tt> l </tt> in any compatability space then the
request is granted.
<li>if <tt>l.requestcompatible(q1)</tt> returns true then the lock is granted.
<li>otherwise the request is granted if the following expression evaluates
to true for every other lock <tt>{ csn, qn}</tt> held on <tt> l </tt>
<ul>
<li> <pre>    ( ( csn == cs1 ) && l.lockeralwayscompatible() ) </pre>
<li> <pre> || (l.reqestcompatible(q1, qn)) </pre>
</ul>
</ol>
<br>
if the request is granted then a call is made to <tt> l.lockevent(cs1, q1) </tt>.
<br>
when the lock is released a call is made to <tt> l.unlockevent(cs1, q1) </tt>.
<p>
the lock manager uses equals() and hashcode() to identify unique lockables.
<br>
if the class implementing lockable requires that each instance of class
correspond to a different locked object then the equals() method must test
equality via the reference equality test (==), this is the default behaviour
for equality.
<br>
if the class implementing lockable require that each instance of the class
that has the same value (as defined by the class) corresponds to a locked
object then its equals() method must reflect that, e.g. by testing equality
of its fields. in this case the first lockable to be locked will be kept
by lock manager as the key for the lock. thus even after the first caller
unlocks the obejct, its reference will still be kept by the lock manager.
thus lockable's that per value equality must be designed so that they
are never re-used for different lockable concepts.
<br>
in either case the equals() method must accept a reference to an object of
a different type.
<br>
as per standard hashtable rules the value returned by hashcode() must be in sync
with the equals() method.
<br>
mt - mutable - : single thread required, synchronization is provided by the lock manager.
if the class implementing lockable uses value equality then it must have an immutable identity.
*/
public interface lockable
/**
note the fact the object is locked. performs required actions
to ensure that unlockevent() work correctly.
this method does not actually  perform any locking of the
object, the locking mechanism is provided by the lock manager.
<p>
if the class supports multiple lockers of the object then this method
will be called once per locker, each with their own qualifier.
<p>
must only be called by the lock manager. synchronization will be handled
by the lock manager.
*/
public void lockevent latch lockinfo
/**
return true if the requested qualifier is compatible with the already granted
qualifier.
*/
public boolean requestcompatible object requestedqualifier  object grantedqualifier
/**
returns true if any lock request on a lockable l in a compatibility space cs1 is compatible
with any other lock held on l in cs1.
*/
public boolean lockeralwayscompatible
/**
note that the object has been unlocked
<p>
must only be called by the lock manager. synchronization will be handled
by the lock manager.
*/
public void unlockevent latch lockinfo
/**
if this lockable object wants to participate in a diagnostic virtual
lock table, then put any relavent attributes of this lock into the
attributes list (the attribute must be an immutable object).  the list
of attributes of interest to the virtual lock table can be found in
virtuallocktable. the tostring method will be called by the virtualtable
on the attribute value for display.
<p>
@param flag use the bits in this int to decide if the user is
interested in this kind of lockable object.  the bits are defined in
virtuallocktable.  for instance, the user may only ask
for table_and_rowlock and if this is not a table or row lock, then
don't paritipate.
@param attributes if this decides to participate, put all relavent
attributes into the hashtable.  the complete list of interesting
attributes is listed in virtuallocktable.
the following attributes must be present for all participating
lockables:
virtuallocktable.lockname,
virtuallocktable.locktype,
either virtuallocktable.containerid or virtuallocktable.conglomid,
<p>
mt - this routine must be mp safe, caller will not be single threading
the lock manager.
<p>
@return true if this object has diagnostic information to add to the
virtual lock table.  if this object either does not want to participate
in the diagnostic virtual lock table or none of the attributes
requested are attributes of this lock, returns false.
@see virtuallocktable
*/
public boolean lockattributes int flag  hashtable attributes