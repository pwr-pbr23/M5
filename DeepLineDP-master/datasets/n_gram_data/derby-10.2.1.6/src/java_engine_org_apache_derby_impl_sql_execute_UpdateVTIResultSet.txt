/*
derby - class org.apache.derby.impl.sql.execute.updatevtiresultset
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl sql execute
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi error standardexception
import org apache derby iapi sql conn languageconnectioncontext
import org apache derby iapi types datavaluedescriptor
import org apache derby iapi sql execute cursorresultset
import org apache derby iapi sql execute execrow
import org apache derby iapi sql execute noputresultset
import org apache derby iapi sql activation
import org apache derby iapi sql resultdescription
import java sql preparedstatement
import java sql resultset
import java util properties
/**
* update the rows from the source into the specified
* base table.
*/
class updatevtiresultset extends dmlvtiresultset
private java sql resultset		rs
private	temporaryrowholderimpl	rowholder
/**
*
* @exception standardexception		thrown on error
*/
public updatevtiresultset noputresultset source
activation activation
throws standardexception
super source  activation
/**
@exception standardexception standard cloudscape error policy
*/
protected void opencore   throws standardexception
int rowlocationcolumn    1
boolean firstrow   true
rs   activation gettargetvti
execrow row   getnextrowcore sourceresultset
if  null    row
rowlocationcolumn   row ncolumns
if   firstexecute
lcc getstatementcontext   settopresultset this  subquerytrackingarray
/* the source does not know whether or not we are doing a
* deferred mode insert.  if we are, then we must clear the
* index scan info from the activation so that the row changer
* does not re-use that information (which won't be valid for
* a deferred mode insert).
*/
if  constants deferred
activation clearindexscaninfo
if  null    rowholder    constants deferred
properties properties   new properties
/*
** if deferred we save a copy of the entire row.
*/
rowholder
new temporaryrowholderimpl activation  properties
resultdescription
try
while   row    null
if  constants deferred
// add the row number to the row.
if  firstrow
row getcolumn  rowlocationcolumn  setvalue  rs getrow
firstrow   false
else
datavaluedescriptor rowlocation   row clonecolumn  rowlocationcolumn
rowlocation setvalue  rs getrow
row setcolumn  rowlocationcolumn  rowlocation
rowholder insert row
else
updatevti rs  row
rowcount
// no need to do a next on a single row source
if  constants singlerowsource
row   null
else
row   getnextrowcore sourceresultset
catch  standardexception se
throw se
catch  throwable t
throw standardexception unexpecteduserexception t
/*
** if it's a deferred update, scan the temporary conglomerate and
** insert the rows into the vti using rowchanger.
*/
if  constants deferred
cursorresultset temprs   rowholder getresultset
try
temprs open
while   row   temprs getnextrow       null
int rownumber   row getcolumn  rowlocationcolumn  getint
rs absolute  rownumber
updatevti rs  row
catch  throwable t
throw standardexception unexpecteduserexception t
finally
sourceresultset clearcurrentrow
temprs close
if  rowholder    null
rowholder close
// rowholder kept across opens
end of opencore
private void updatevti resultset target  execrow row
throws standardexception
int changedcolumnids   constants changedcolumnids
try
for  int i   0  i < changedcolumnids length  i
int columnid   changedcolumnids
datavaluedescriptor newvalue   row getcolumn  i   1
if  newvalue isnull
target updatenull  columnid
else
newvalue setinto  target  columnid
target updaterow
catch  throwable t
throw standardexception unexpecteduserexception t
end of updatevti