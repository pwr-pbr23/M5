/*
derby - class org.apache.derby.iapi.sql.compile.typecompiler
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi sql compile
import org apache derby iapi services loader classfactory
import org apache derby iapi services compiler methodbuilder
import org apache derby iapi services compiler localfield
import org apache derby iapi types datatypedescriptor
import org apache derby iapi types datavaluedescriptor
import org apache derby iapi types typeid
import org apache derby iapi error standardexception
import org apache derby iapi reference limits
/**
* this interface defines methods associated with a typeid that are used
* by the compiler.
*/
public interface typecompiler
/**
* various fixed numbers related to datatypes.
*/
// need to leave space for '-'
public static final int longint_maxwidth_as_char	  20
// need to leave space for '-'
public static final int int_maxwidth_as_char	  11
// need to leave space for '-'
public static final int smallint_maxwidth_as_char	  6
// need to leave space for '-'
public static final int tinyint_maxwidth_as_char	  4
// need to leave space for '-' and decimal point
public static final int double_maxwidth_as_char		  54
// need to leave space for '-' and decimal point
public static final int real_maxwidth_as_char	  25
public static final int default_decimal_precision	  limits db2_default_decimal_precision
public static final int default_decimal_scale 		  limits db2_default_decimal_scale
public static final int max_decimal_precision_scale   limits db2_max_decimal_precision_scale
public static final int boolean_maxwidth_as_char	  5
public static final string plus_op
public static final string divide_op
public static final string minus_op
public static final string times_op
public static final string sum_op
public static final string avg_op
public static final string mod_op
/**
* type resolution methods on binary operators
*
* @param lefttype	the type of the left parameter
* @param righttype	the type of the right parameter
* @param operator	the name of the operator (e.g. "+").
*
* @return	the type of the result
*
* @exception standardexception	thrown on error
*/
datatypedescriptor	resolvearithmeticoperation
datatypedescriptor lefttype
datatypedescriptor righttype
string operator
throws standardexception
/**
* determine if this type can be compared to some other type
*
* @param othertype	the compilationtype of the other type to compare
*					this type to
* @param forequals true if this is an = or <> comparison, false otherwise.
* @param cf		a classfactory
*
* @return	true if the types can be compared, false if comparisons between
*			the types are not allowed
*/
boolean				comparable typeid othertype
boolean forequals
classfactory cf
/**
* determine if this type can be converted to some other type
*
* @param othertype	the compilationtype of the other type to compare
*					this type to
*
* @param fordatatypefunction  true if this is a type function that
*   requires more liberal behavior (e.g double can convert a char but
*   you cannot cast a char to double.
*
* @return	true if the types can be converted, false if conversion
*			is not allowed
*/
boolean             convertible typeid othertype
boolean fordatatypefunction
/**
* determine if this type is compatible to some other type
* (e.g. coalesce(thistype, othertype)).
*
* @param othertype	the compilationtype of the other type to compare
*					this type to
*
* @return	true if the types are compatible, false if not compatible
*/
boolean compatible typeid othertype
/**
* determine if this type can have a value of another type stored into it.
* note that direction is relevant here: the test is that the othertype
* is storable into this type.
*
* @param othertype	the typeid of the other type to compare this type to
* @param cf		a classfactory
*
* @return	true if the other type can be stored in a column of this type.
*/
boolean				storable typeid othertype  classfactory cf
/**
* get the name of the interface for this type.  for example, the interface
* for a sqlinteger is numberdatavalue.  the full path name of the type
* is returned.
*
* @return	the name of the interface for this type.
*/
string interfacename
/**
* get the name of the corresponding java type.  for numerics and booleans
* we will get the corresponding java primitive type.
e
* each sql type has a corresponding java type.  when a sql value is
* passed to a java method, it is translated to its corresponding java
* type.  for example, a sql integer will be mapped to a java int, but
* a sql date will be mapped to a java.sql.date.
*
* @return	the name of the corresponding java primitive type.
*/
string	getcorrespondingprimitivetypename
/**
* get the method name for getting out the corresponding primitive
* java type from a datavaluedescriptor.
*
* @return string		the method call name for getting the
*						corresponding primitive java type.
*/
string getprimitivemethodname
/**
* get the name of the matching national char type.
*
* @return the name of the matching national char type.
*/
string getmatchingnationalchartypename
/**
* generate the code necessary to produce a sql null of the appropriate
* type. the stack must contain a datavaluefactory and a null or a value
of the correct type (interfacename()).
*
* @param mb	the method to put the expression in
*
*/
void			generatenull methodbuilder mb
/**
* generate the code necessary to produce a sql value based on
* a value.  the value's type is assumed to match
* the type of this typeid.  for example, a typeid
* for the sql int type should be given an value that evaluates
* to a java int or integer.
*
* if the type of the value is incorrect, the generated code will
* not work.
the stack must contain
data value factory
value
*
*/
void			generatedatavalue methodbuilder eb  localfield field
/**
* return the maximum width for this data type when cast to a char type.
*
* @param dts		the associated datatypedescriptor for this typeid.
*
* @return int			the maximum width for this data type when cast to a char type.
*/
int getcasttocharwidth datatypedescriptor dts