/*
derby - class org.apache.derby.impl.sql.execute.droptriggerconstantaction
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl sql execute
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi error standardexception
import org apache derby iapi sql conn languageconnectioncontext
import org apache derby iapi sql dictionary datadescriptorgenerator
import org apache derby iapi sql dictionary datadictionary
import org apache derby iapi sql dictionary datadictionarycontext
import org apache derby iapi sql dictionary schemadescriptor
import org apache derby iapi sql dictionary spsdescriptor
import org apache derby iapi sql dictionary triggerdescriptor
import org apache derby iapi sql dictionary tabledescriptor
import org apache derby iapi sql depend dependencymanager
import org apache derby iapi reference sqlstate
import org apache derby iapi sql execute constantaction
import org apache derby iapi sql activation
import org apache derby iapi store access transactioncontroller
import org apache derby catalog uuid
/**
*	this class  describes actions that are always performed for a
*	drop trigger statement at execution time.
*
*	@author jamie
*/
public class droptriggerconstantaction extends ddlsingletableconstantaction
private final string			triggername
private final schemadescriptor	sd
// constructors
/**
*	make the constantaction for a drop trigger statement.
*
* @param	sd					schema that stored prepared statement lives in.
* @param	triggername			name of the trigger
* @param	tableid				the table upon which the trigger is defined
*
*/
droptriggerconstantaction
schemadescriptor	sd
string				triggername
uuid				tableid
super tableid
this sd   sd
this triggername   triggername
if  sanitymanager debug
sanitymanager assert sd    null
/**
*	this is the guts of the execution-time logic for drop statement.
*
*	@see constantaction#executeconstantaction
*
* @exception standardexception		thrown on failure
*/
public void	executeconstantaction  activation activation
throws standardexception
triggerdescriptor 			triggerd
languageconnectioncontext lcc   activation getlanguageconnectioncontext
datadictionary dd   lcc getdatadictionary
dependencymanager dm   dd getdependencymanager
/*
** inform the data dictionary that we are about to write to it.
** there are several calls to data dictionary "get" methods here
** that might be done in "read" mode in the data dictionary, but
** it seemed safer to do this whole operation in "write" mode.
**
** we tell the data dictionary we're done writing at the end of
** the transaction.
*/
dd startwriting lcc
tabledescriptor td   dd gettabledescriptor tableid
if  td    null
throw standardexception newexception
sqlstate lang_table_not_found_during_execution
tableid tostring
transactioncontroller tc   lcc gettransactionexecute
locktableforddl tc  td getheapconglomerateid    true
// get td again in case table shape is changed before lock is acquired
td   dd gettabledescriptor tableid
if  td    null
throw standardexception newexception
sqlstate lang_table_not_found_during_execution
tableid tostring
/*
** get the trigger descriptor.  we're responsible for raising
** the error if it isn't found
*/
triggerd   dd gettriggerdescriptor triggername  sd
if  triggerd    null
throw standardexception newexception sqlstate lang_object_not_found_during_execution
sd getschemaname         triggername
/*
** prepare all dependents to invalidate.  (this is there chance
** to say that they can't be invalidated.  for example, an open
** cursor referencing a table/trigger that the user is attempting to
** drop.) if no one objects, then invalidate any dependent objects.
*/
droptriggerdescriptor lcc  dm  dd  tc  triggerd  activation
public static void droptriggerdescriptor
languageconnectioncontext	lcc
dependencymanager 			dm
datadictionary				dd
transactioncontroller		tc
triggerdescriptor			triggerd
activation					activation
throws standardexception
if  sanitymanager debug
sanitymanager assert triggerd  null
dm invalidatefor triggerd  dependencymanager drop_trigger  lcc
// drop the trigger
dd droptriggerdescriptor triggerd  tc
// clear the dependencies for the trigger
dm cleardependencies lcc  triggerd
// drop the spses
spsdescriptor spsd   dd getspsdescriptor triggerd getactionid
// there shouldn't be any dependencies, but in case
// there are, lets clear them
dm invalidatefor spsd  dependencymanager drop_trigger  lcc
dm cleardependencies lcc  spsd
dd dropspsdescriptor spsd  tc
if  triggerd getwhenclauseid      null
spsd   dd getspsdescriptor triggerd getwhenclauseid
dm invalidatefor spsd  dependencymanager drop_trigger  lcc
dm cleardependencies lcc  spsd
dd dropspsdescriptor spsd  tc
public string tostring
// do not put this under sanitymanager.debug - it is needed for
// error reporting.
return   triggername