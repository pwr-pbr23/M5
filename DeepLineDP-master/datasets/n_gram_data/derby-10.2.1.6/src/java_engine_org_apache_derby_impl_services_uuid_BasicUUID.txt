/*
derby - class org.apache.derby.impl.services.uuid.basicuuid
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl services uuid
import org apache derby iapi services io formatidutil
import org apache derby iapi services io storedformatids
import org apache derby iapi services io formatable
import org apache derby catalog uuid
import java io objectoutput
import java io objectinput
import java io ioexception
import java io stringreader
public class basicuuid implements uuid  formatable
/*
** fields of basicuuid
*/
private long majorid     only using 48 bits
private long timemillis
private int sequence
/*
** methods of basicuuid
*/
/**
constructor only called by basicuuidfactory.
**/
public basicuuid long majorid  long timemillis  int sequence
this majorid   majorid
this timemillis   timemillis
this sequence   sequence
/**
constructor only called by basicuuidfactory.
constructs a uuid from the string representation
produced by tostring.
@see basicuuid#tostring
**/
public basicuuid string uuidstring
stringreader sr   new stringreader uuidstring
sequence    int  readmsb sr
long ltimemillis   readmsb sr  << 32
ltimemillis    readmsb sr  << 16
ltimemillis    readmsb sr
timemillis   ltimemillis
majorid   readmsb sr
/**
constructor only called by basicuuidfactory.
constructs a uuid from the byte array representation
produced by tobytearrayio.
@see basicuuid#tobytearray
**/
public basicuuid byte b
int lsequence   0
for  int ix   0  ix < 4  ix
lsequence   lsequence << 8
lsequence   lsequence    0xff   b
long ltimemillis   0
for  int ix   4  ix < 10  ix
ltimemillis   ltimemillis << 8
ltimemillis   ltimemillis    0xff   b
long linetaddr   0
for  int ix   10  ix < 16  ix
linetaddr   linetaddr << 8
linetaddr   linetaddr    0xff   b
sequence   lsequence
timemillis   ltimemillis
majorid   linetaddr
/*
* formatable methods
*/
// no-arg constructor, required by formatable
public basicuuid     super
/**
write this out.
@exception ioexception error writing to log stream
*/
public void writeexternal objectoutput out  throws ioexception
// resolve: write out the byte array instead?
out writelong majorid
out writelong timemillis
out writeint sequence
/**
read this in
@exception ioexception error reading from log stream
*/
public void readexternal objectinput in  throws ioexception
majorid   in readlong
timemillis   in readlong
sequence   in readint
/**
return my format identifier.
*/
public int gettypeformatid
return storedformatids basic_uuid
private static void writemsb char data  int offset  long value  int nbytes
for  int i   nbytes   1  i >  0  i
long b    value    255l <<  8   i    >>>  8   i
int c    int    b   0xf0  >> 4
data    char   c < 10 ? c        c   10
c    int   b   0x0f
data    char   c < 10 ? c        c   10
/**
read a long value, msb first, from its character
representation in the string reader, using '-' or
end of string to delimit.
**/
private static long readmsb stringreader sr
long value   0
try
int c
while   c   sr read        1
if  c
break
value <<  4
int nibble
if  c <
nibble   c
else if  c <
nibble   c       10
else
nibble   c       10
value    nibble
catch  exception e
return value
/*
** methods of uuid
*/
/**
implement value equality.
**/
public boolean equals object otherobject
if    otherobject instanceof basicuuid
return false
basicuuid other    basicuuid  otherobject
return  this sequence    other sequence
this timemillis    other timemillis
this majorid    other majorid
/**
provide a hashcode which is compatible with
the equals() method.
**/
public int hashcode
long hc   majorid ^ timemillis
return sequence ^   int   hc >> 4
/**
produce a string representation of this uuid which
can be passed to uuidfactory.recreateuuid later on
to reconstruct it.  the funny representation is
designed to (sort of) match the format of microsoft's
uuidgen utility.
*/
public string tostring    return stringworkhorse
/**
produce a string representation of this uuid which
is suitable for use as a unique ansi identifier.
*/
public string toansiidentifier    return     stringworkhorse
/**
*	private workhorse of the string making routines.
*
*	@param	separator	character to separate number blocks.
*                     null means do not include a separator.
*
*	@return	string representation of uuid.
*/
public	string	stringworkhorse  char separator
char data   new char
writemsb data  0   long  sequence  4
int offset   8
if  separator    0  data   separator
long ltimemillis   timemillis
writemsb data  offset   ltimemillis   0x0000ffff00000000l  >>> 32  2
offset    4
if  separator    0  data   separator
writemsb data  offset   ltimemillis   0x00000000ffff0000l  >>> 16  2
offset    4
if  separator    0  data   separator
writemsb data  offset   ltimemillis   0x000000000000ffffl   2
offset    4
if  separator    0  data   separator
writemsb data  offset  majorid  6
offset    12
return new string data  0  offset
/**
store this uuid in a byte array. arrange the bytes in the uuid
in the same order the code which stores a uuid in a string
does.
@see org.apache.derby.catalog.uuid#tobytearray
*/
public byte tobytearray
byte result   new byte
int lsequence   sequence
result    byte  lsequence >>> 24
result    byte  lsequence >>> 16
result    byte  lsequence >>> 8
result    byte lsequence
long ltimemillis   timemillis
result    byte  ltimemillis >>> 40
result    byte  ltimemillis >>> 32
result    byte  ltimemillis >>> 24
result    byte  ltimemillis >>> 16
result    byte  ltimemillis >>> 8
result    byte ltimemillis
long linetaddr   majorid
result    byte  linetaddr >>> 40
result    byte  linetaddr >>> 32
result    byte  linetaddr >>> 24
result    byte  linetaddr >>> 16
result    byte  linetaddr >>> 8
result    byte linetaddr
return result
/**
clone this uuid.
@return	a copy of this uuid
*/
public uuid cloneme
return	new	basicuuid majorid  timemillis  sequence
public string tohexstring    return stringworkhorse   char  0