/*
derby - class org.apache.derby.impl.store.access.sort.mergesortinfo
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl store access sort
import org apache derby iapi store access sortinfo
import org apache derby iapi error standardexception
import org apache derby iapi reference sqlstate
import org apache derby iapi services i18n messageservice
import java util vector
import java util properties
/**
this object provides performance information related to a sort.
the information is accumulated during operations on a sortcontroller() and
then copied into this object and returned by a call to
sortcontroller.getsortinfo().
@see org.apache.derby.iapi.store.access.sortcontroller#getsortinfo()
**/
class mergesortinfo implements sortinfo
/**
* performance counters ...
*/
private string  stat_sorttype
// private long    stat_estimmemused;
private int     stat_numrowsinput
private int     stat_numrowsoutput
private int     stat_nummergeruns
private vector  stat_mergerunssize
/* constructors for this class: */
mergesortinfo mergeinserter sort
// copy perfomance state out of sort, to get a fixed set of stats
stat_sorttype                 sort stat_sorttype
// stat_estimmemused           = sort.estimatedmemoryused;
stat_numrowsinput             sort stat_numrowsinput
stat_numrowsoutput            sort stat_numrowsoutput
stat_nummergeruns             sort stat_nummergeruns
stat_mergerunssize            sort stat_mergerunssize
/**
* return all information gathered about the sort.
* <p>
* this routine returns a list of properties which contains all information
* gathered about the sort.  if a property is passed in, then that property
* list is appended to, otherwise a new property object is created and
* returned.
* <p>
* not all sorts may support all properties, if the property is not
* supported then it will not be returned.  the following is a list of
* properties that may be returned:
*
*     sorttype
*         - type of the sort being performed:
*           internal
*           external
*     numrowsinput
*         - the number of rows input to the sort.  this
*           number includes duplicates.
*     numrowsoutput
*         - the number of rows to be output by the sort.  this number
*           may be different from numrowsinput since duplicates may not
*           be output.
*     nummergeruns
*         - the number of merge runs for the sort.
*           applicable to external sorts only.
*           note: when a sortcontroller is closed, nummergeruns may increase by 1, to
*           reflect the additional merge run that may be created for
*           any data still in the sort buffer.
*     mergerunssize
*         - the size (number of rows) of each merge run for the sort.
*           applicable to external sorts only.
*           e.g. [3,3,2] indicates 3 merge runs, where the first two runs
*           have 3 rows each, and the last run has 2 rows.
*           note: when a sortcontroller is closed, this vector may get an
*           additional element, to reflect the additional merge run that
*           may be created for any data still in the sort buffer.
*     note - this list will be expanded as more information about the sort
*            is gathered and returned.
*
* @param prop   property list to fill in.
*
* @exception  standardexception  standard exception policy.
**/
public properties getallsortinfo properties prop
throws standardexception
if  prop    null
prop   new properties
prop put
messageservice gettextmessage sqlstate store_rts_sort_type
equals this stat_sorttype  ?
messageservice gettextmessage sqlstate store_rts_external
messageservice gettextmessage sqlstate store_rts_internal
// prop.put(
//  messageservice.gettextmessage(sqlstate.store_rts_estimated_memory_used),
//  long.tostring(stat_estimmemused));
prop put
messageservice gettextmessage sqlstate store_rts_num_rows_input
integer tostring stat_numrowsinput
prop put
messageservice gettextmessage sqlstate store_rts_num_rows_output
integer tostring stat_numrowsoutput
if  this stat_sorttype
prop put
messageservice gettextmessage sqlstate store_rts_num_merge_runs
integer tostring stat_nummergeruns
prop put
messageservice gettextmessage sqlstate store_rts_merge_runs_size
stat_mergerunssize tostring
return prop
/**
*     estimmemused is not currently supported since it is unreliable
*     estimmemused
*         - the estimated memory used by the sort.
*
*           this is only measured when the system runs out of sort
*           buffer space, and when it tries to avoid doing an external sort.
*           it measures this by subtracting the memory usage at initialization
*           from the memory usage at the time we are trying to avoid doing an
*           external sort.  the result could be negative: this probably indicates
*           that there has been some garbage collection in the interim.
*           if the attempt at keeping the sort internal succeeds, the buffer grows
*           but the increased memory usage is not measured.
*
*           the system may never measure the memory usage. this happens if
*           it never runs out of sort buffer space, or if it is set up not
*           to avoid external sorts. in cases that it is not measured, it returns 0.
*
*           in future, this info may improve with an improved jvm api.
*/