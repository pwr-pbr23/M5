/*
derby - class org.apache.derby.iapi.services.crypto.cipherprovider
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi services crypto
import java security key
import org apache derby iapi error standardexception
/**
a cipherprovider is a wrapper for a cipher class in jce.
this service is only available when run on jdk1.2 or beyond.
to use this service, either the sunjce or an alternative clean room
implementation of the jce must be installed.
to use a cipherprovider to encrypt or decrypt, it needs 3 things:
1) a cipherprovider that is initialized to encrypt or decrypt
2) a secret key for the encryption/decryption
3) an initialization vector (ivparameterspec) that is used to create some
randomness in the encryption
see $ws/docs/funcspec/mulan/configurableencryption.html
see http://java.sun.com/products/jdk/1.1/docs/guide/security/cryptospec.html
see http://java.sun.com/products/jdk/1.2/docs/guide/security/cryptospec.html
see http://java.sun.com/products/jdk/1.2/jce/index.html
*/
public interface cipherprovider
/**
encrypt data - use only with cipher that has been initialized with
cipherfactory.encrypt.
@return the number of bytes stored in ciphertext.
@param cleartext the byte array containing the cleartext
@param offset encrypt from this byte offset in the cleartext
@param length encrypt this many bytes starting from offset
@param ciphertext the byte array to store the ciphertext
@param outputoffset the offset into the ciphertext array the output
should go
if cleartext and ciphertext are the same array, caller must be careful
to not overwrite the cleartext before it is scrambled.
@exception standardexception standard cloudscape error policy
*/
int encrypt byte cleartext  int offset  int length
byte ciphertext  int outputoffset
throws standardexception
/**
decrypt data - use only with cipher that has been initialized with
cipherfactory.decrypt.
@return the number of bytes stored in cleartext.
@param ciphertext the byte array containing the ciphertext
@param offset decrypt from this byte offset in the ciphertext
@param length decrypt this many bytes starting from offset
@param cleartext the byte array to store the cleartext
@param outputoffset the offset into the cleartext array the output
should go
if cleartext and ciphertext are the same array, caller must be careful
to not overwrite the ciphertext before it is un-scrambled.
@exception standardexception standard cloudscape error policy
*/
int decrypt byte ciphertext  int offset  int length
byte cleartext  int outputoffset
throws standardexception
/**
returns the encryption block size used during creation of the encrypted database
*/
public int getencryptionblocksize