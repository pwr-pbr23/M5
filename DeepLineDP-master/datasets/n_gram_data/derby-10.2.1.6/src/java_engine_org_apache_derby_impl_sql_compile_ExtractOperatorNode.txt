/*
derby - class org.apache.derby.impl.sql.compile.extractoperatornode
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package	org apache derby impl sql compile
import org apache derby iapi sql compile c_nodetypes
import org apache derby iapi sql dictionary datadictionary
import org apache derby iapi types typeid
import org apache derby iapi types datetimedatavalue
import org apache derby iapi types datatypedescriptor
import org apache derby iapi sql compile typecompiler
import org apache derby iapi reference sqlstate
import org apache derby iapi error standardexception
import org apache derby iapi services sanity sanitymanager
import java sql types
import java util vector
/**
* this node represents a unary extract operator, used to extract
* a field from a date/time. the field value is returned as an integer.
*
* @author ames
*/
public class extractoperatornode extends unaryoperatornode
static private final string fieldname
static private final string fieldmethod
private int extractfield
/**
* initializer for a extractoperatornode
*
* @param field		the field to extract
* @param operand	the operand
*/
public void init object field  object operand
extractfield     integer  field  intvalue
super init  operand
fieldname
fieldmethod
/**
* bind this operator
*
* @param fromlist			the query's from list
* @param subquerylist		the subquery list being built as we find subquerynodes
* @param aggregatevector	the aggregate vector being built as we find aggregatenodes
*
* @return	the new top of the expression tree.
*
* @exception standardexception		thrown on error
*/
public valuenode bindexpression
fromlist		fromlist
subquerylist	subquerylist
vector	aggregatevector
throws standardexception
int	operandtype
typeid optypeid
super bindexpression fromlist  subquerylist
aggregatevector
optypeid   operand gettypeid
operandtype   optypeid getjdbctypeid
typecompiler tc   operand gettypecompiler
/*
** cast the operand, if necessary, - this function is allowed only on
** date/time types.  by default, we cast to date if extracting
** year, month or day and to time if extracting hour, minute or
** second.
*/
if  optypeid isstringtypeid
int casttype    extractfield < 3  ? types date   types time
operand     valuenode
getnodefactory   getnode
c_nodetypes cast_node
operand
datatypedescriptor getbuiltindatatypedescriptor casttype  true
tc getcasttocharwidth
operand gettypeservices
getcontextmanager
castnode  operand  bindcastnodeonly
optypeid   operand gettypeid
operandtype   optypeid getjdbctypeid
if         operandtype    types date
operandtype    types time
operandtype    types timestamp
throw standardexception newexception sqlstate lang_unary_function_bad_type
fieldname
optypeid getsqltypename
/*
if the type is date, ensure the field is okay.
*/
if    operandtype    types date
extractfield > datetimedatavalue day_field
throw standardexception newexception sqlstate lang_unary_function_bad_type
fieldname
optypeid getsqltypename
/*
if the type is time, ensure the field is okay.
*/
if    operandtype    types time
extractfield < datetimedatavalue hour_field
throw standardexception newexception sqlstate lang_unary_function_bad_type
fieldname
optypeid getsqltypename
/*
** the result type of extract is int,
** unless it is timestamp and second, in which case
** for now it is double but eventually it will need to
** be decimal(11,9).
*/
if    operandtype    types timestamp
extractfield    datetimedatavalue second_field
settype new datatypedescriptor
typeid getbuiltintypeid types double
operand gettypeservices   isnullable
else
settype new datatypedescriptor
typeid integer_id
operand gettypeservices   isnullable
return this
public string tostring
if  sanitymanager debug
return super tostring       fieldname
else
return