/*
derby - class org.apache.derby.jdbc.internaldriver
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby jdbc
import org apache derby iapi reference attribute
import org apache derby iapi reference sqlstate
import org apache derby iapi reference messageid
import org apache derby iapi services io formatableproperties
import org apache derby iapi jdbc connectioncontext
import org apache derby iapi services monitor modulecontrol
import org apache derby iapi services monitor monitor
import org apache derby iapi services context contextservice
import org apache derby iapi services context contextmanager
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi error standardexception
import org apache derby iapi services i18n messageservice
import org apache derby iapi sql resultset
import org apache derby iapi jdbc authenticationservice
import org apache derby iapi sql resultcolumndescriptor
import org apache derby impl jdbc
import java sql connection
import java sql databasemetadata
import java sql sqlexception
import java util properties
import java util stringtokenizer
/**
abstract factory class and api for jdbc objects.
@author djd
*/
public abstract class internaldriver implements modulecontrol
private static final object syncme   new object
private static internaldriver activedriver
protected boolean active
private contextservice contextservicefactory
private authenticationservice	authenticationservice
public static final internaldriver activedriver
return activedriver
public internaldriver
contextservicefactory   contextservice getfactory
/*
**	methods from modulecontrol
*/
public void boot boolean create  properties properties  throws standardexception
synchronized  internaldriver syncme
internaldriver activedriver   this
active   true
public void stop
synchronized  internaldriver syncme
internaldriver activedriver   null
active   false
contextservicefactory   null
/*
** methods from java.sql.driver
*/
public boolean acceptsurl string url
return active    embeddeddriveracceptsurl  url
/*
** this method can be called by autoloadeddriver so that we
** don't accidentally boot derby while answering the question "can
** you handle this url?"
*/
public static	boolean embeddeddriveracceptsurl string url
return
//	need to reject network driver's url's
url startswith attribute jcc_protocol      url startswith attribute dnc_protocol
url startswith attribute protocol     url equals attribute sqlj_nested
public connection connect string url  properties info
throws sqlexception
if   acceptsurl url     return null
/**
* if we are below the low memory watermark for obtaining
* a connection, then don't even try. just throw an exception.
*/
if  embedconnection memorystate islowmemory
throw embedconnection no_mem
/*
** a url "jdbc:default:connection" means get the current
** connection.  from within a method called from jsql, the
** "current" connection is the one that is running the
** jsql statement containing the method call.
*/
boolean current   url equals attribute sqlj_nested
/* if jdbc:default:connection, see if user already has a
* connection. all connection attributes are ignored.
*/
if  current
connectioncontext conncontext   getconnectioncontext
if  conncontext    null
return conncontext getnestedconnection false
// there is no cloudscape connection, so
// return null, as we are not the driver to handle this
return null
// convert the ;name=value attributes in the url into
// properties.
formatableproperties finfo   null
try
finfo   getattributes url  info
info   null     ensure we don't use this reference directly again
/*
** a property "shutdown=true" means shut the system or database down
*/
boolean shutdown   boolean valueof finfo getproperty attribute shutdown_attr   booleanvalue
if  shutdown
// if we are shutting down the system don't attempt to create
// a connection; but we validate users credentials if we have to.
// in case of datbase shutdown, we ask the database authentication
// service to authenticate the user. if it is a system shutdown,
// then we ask the driver to do the authentication.
//
if  internaldriver getdatabasename url  finfo  length      0
//
// we need to authenticate the user if authentication is
// on. note that this is a system shutdown.
// check that we do have a authentication service
// it is _always_ expected.
if  this getauthenticationservice      null
throw util generatecssqlexception
sqlstate login_failed
messageservice gettextmessage messageid auth_no_service_for_system
if   this getauthenticationservice   authenticate  string  null  finfo
// not a valid user
throw util generatecssqlexception
sqlstate login_failed  messageservice gettextmessage messageid auth_invalid
monitor getmonitor   shutdown
throw util generatecssqlexception
sqlstate cloudscape_system_shutdown
embedconnection conn   getnewembedconnection url  finfo
// if this is not the correct driver a embedconnection
// object is returned in the closed state.
if  conn isclosed
return null
return conn
catch  outofmemoryerror nomemory
embedconnection memorystate setlowmemory
throw embedconnection no_mem
finally
// break any link with the user's properties set.
if  finfo    null
finfo cleardefaults
public int getmajorversion
return monitor getmonitor   getengineversion   getmajorversion
public int getminorversion
return monitor getmonitor   getengineversion   getminorversion
public boolean jdbccompliant
return true
/*
** url manipulation
*/
/**
convert all the attributes in the url into properties and
combine them with the set provided.
<br>
if the caller passed in a set of attributes (info != null)
then we set that up as the default of the returned property
set as the user's set. this means we can easily break the link
with the user's set, ensuring that we don't hang onto the users object.
it also means that we don't add our attributes into the user's
own property object.
@exception sqlexception thrown if url form bad
*/
protected formatableproperties getattributes string url  properties info
throws sqlexception
// we use formatableproperties here to take advantage
// of the cleardefaults, method.
formatableproperties finfo   new formatableproperties info
info   null     ensure we don't use this reference directly again
stringtokenizer st   new stringtokenizer url
st nexttoken       skip the first part of the url
while  st hasmoretokens
string v   st nexttoken
int eqpos   v indexof
if  eqpos     1
throw util generatecssqlexception
sqlstate malformed_url  url
//if (eqpos != v.lastindexof('='))
//	throw util.malformedurl(url);
finfo put  v substring 0  eqpos   trim
v substring eqpos   1   trim
// now validate any attributes we can
//
// boolean attributes -
//  dataencryption,create,createsource,converttosource,shutdown,upgrade,current
checkboolean finfo  attribute data_encryption
checkboolean finfo  attribute create_attr
checkboolean finfo  attribute shutdown_attr
checkboolean finfo  attribute upgrade_attr
return finfo
private static void checkboolean properties set  string attribute  throws sqlexception
final string booleanchoices
checkenumeration  set  attribute  booleanchoices
private static void checkenumeration properties set  string attribute  string choices  throws sqlexception
string value   set getproperty attribute
if  value    null
return
for  int i   0  i < choices length  i
if  value touppercase java util locale english  equals  choices touppercase java util locale english
return
// the attribute value is invalid. construct a string giving the choices for
// display in the error message.
string choicesstr
for  int i   0  i < choices length  i
if  i > 0
choicesstr
choicesstr    choices
throw util generatecssqlexception
sqlstate invalid_attribute  attribute  value  choicesstr
/**
get the database name from the url.
copes with three forms
jdbc:derby:dbname
jdbc:derby:dbname;...
jdbc:derby:;subname=dbname
@param url the url being used for the connection
@param info the properties set being used for the connection, must include
the properties derived from the attributes in the url
@return a string containing the database name or an empty string ("") if
no database name is present in the url.
*/
public static string getdatabasename string url  properties info
if  url equals attribute sqlj_nested
return
// skip the jdbc:derby:
int attributestart   url indexof
string dbname
if  attributestart     1
dbname   url substring attribute protocol length
else
dbname   url substring attribute protocol length    attributestart
// for security reasons we rely on here an non-null string being
// taken as the database name, before the databasename connection
// attribute. specifically, even if dbname is blank we still we
// to use it rather than the connection attribute, even though
// it will end up, after the trim, as a zero-length string.
// see embeddeddatasource.update()
if  dbname length      0
if  info    null
dbname   info getproperty attribute dbname_attr  dbname
// beetle 4653 - trim database name to remove blanks that might make a difference on finding the database
// on unix platforms
dbname   dbname trim
return dbname
public final contextservice getcontextservicefactory
return contextservicefactory
// returns the authenticationservice handle
public authenticationservice getauthenticationservice
//
// if authenticationservice handle not cached in yet, then
// ask the monitor to find it for us and set it here in its
// attribute.
//
if  this authenticationservice    null
this authenticationservice    authenticationservice
monitor findservice authenticationservice module
// we should have a authentication service (always)
//
if  sanitymanager debug
sanitymanager assert this authenticationservice    null
return this authenticationservice
/*
methods to be overloaded in sub-implementations such as
a tracing driver.
*/
protected abstract embedconnection getnewembedconnection string url  properties info
throws sqlexception
private connectioncontext getconnectioncontext
/*
** the current connection is the one in the current
** connection context, so get the context.
*/
contextmanager	cm   getcurrentcontextmanager
connectioncontext localcc   null
/*
cm is null the very first time, and whenever
we aren't actually nested.
*/
if  cm    null
localcc    connectioncontext
cm getcontext connectioncontext context_id
return localcc
private contextmanager getcurrentcontextmanager
return getcontextservicefactory   getcurrentcontextmanager
/**
return true if this driver is active. package private method.
*/
public boolean isactive
return active
/**
* get a new nested connection.
*
* @param conn	the embedconnection.
*
* @return a nested connection object.
*
*/
public abstract connection getnewnestedconnection embedconnection conn
/*
** methods to be overridden by subimplementations wishing to insert
** their classes into the mix.
*/
public java sql statement newembedstatement
embedconnection conn
boolean formetadata
int resultsettype
int resultsetconcurrency
int resultsetholdability
return new embedstatement conn  formetadata  resultsettype  resultsetconcurrency
resultsetholdability
/**
@exception sqlexception if fails to create statement
*/
public abstract java sql preparedstatement newembedpreparedstatement
embedconnection conn
string stmt
boolean formetadata
int resultsettype
int resultsetconcurrency
int resultsetholdability
int autogeneratedkeys
int columnindexes
string columnnames
throws sqlexception
/**
@exception sqlexception if fails to create statement
*/
public abstract java sql callablestatement newembedcallablestatement
embedconnection conn
string stmt
int resultsettype
int resultsetconcurrency
int resultsetholdability
throws sqlexception
/**
* return a new java.sql.databasemetadata instance for this implementation.
@exception sqlexception on failure to create.
*/
public databasemetadata newembeddatabasemetadata embedconnection conn
string dbname  throws sqlexception
return new embeddatabasemetadata conn dbname
/**
* return a new java.sql.resultset instance for this implementation.
* @param conn owning connection
* @param results top level of language result set tree
* @param formetadata is this for meta-data
* @param statement the statement that is creating the sql resultset
* @param isatomic
* @return a new java.sql.resultset
* @throws sqlexception
*/
public abstract embedresultset
newembedresultset embedconnection conn  resultset results  boolean formetadata  embedstatement statement  boolean isatomic  throws sqlexception
/**
* returns a new java.sql.resultsetmetadata for this implementation
*
* @param columninfo a resultcolumndescriptor that stores information
*        about the columns in a resultset
*/
public embedresultsetmetadata newembedresultsetmetadata
resultcolumndescriptor columninfo
return new embedresultsetmetadata columninfo