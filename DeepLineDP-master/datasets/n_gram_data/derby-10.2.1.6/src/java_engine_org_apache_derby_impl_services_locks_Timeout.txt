/*
derby - class org.apache.derby.impl.services.locks.timeout
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl services locks
import org apache derby impl services locks tablenameinfo
import org apache derby iapi services context contextservice
import org apache derby iapi reference sqlstate
import org apache derby iapi services locks latch
import org apache derby iapi services locks lockable
import org apache derby iapi services locks virtuallocktable
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi error standardexception
import org apache derby iapi sql conn languageconnectioncontext
import org apache derby iapi store access transactioncontroller
import org apache derby iapi util cheapdateformatter
import java util enumeration
import java util hashtable
/**
* code to support timeout error output.
* @author gavin
*/
public final class timeout
public static final int table_and_rowlock   virtuallocktable table_and_rowlock
public static final int all   virtuallocktable all
public static final string newline
//fixme: the newline might not be truely platform independent.
// we do not want to use a system call because of security reasons.
// line_separator returns ^m for some reason, not ^m<nl>.
//public static final string newline = string.valueof( (char)(new byte(character.line_separator)).intvalue() );
//public static final string newline = system.getproperty( "line.separator" );
private transactioncontroller tc
private tablenameinfo tabinfo
/* the current latch to extract info out of */
private latch currentlock
/* the current row output of the locktable */
private char outputrow
/* the entire locktable as a buffer */
private stringbuffer sb
/* the hashtable information of the current lock */
private hashtable currentrow
/* the time when the exception was thrown */
private final long currenttime
/* the snapshot of the locktable that timeout */
private final enumeration locktable
// column1: xid varchar(10) not null
// column2: type varchar(13) not null
// column3: mode varchar(4) not null
// column4: lockcount varchar(9) not null
// column5: lockname varchar(80) not null
// column6: state varchar(5) not null
// column7: tabletype varchar(38) not null                  / lockobj varchar(38)
// column8: indexname varchar(50) nullable as string "null" / container_id / mode (latch only) varchar(50)
// column9: tablename varchar(38) not null                  / conglom_id varchar(38)
// total length of this string is 10+1+13+1+6+1+9+1+80+1+5+1+38+1+48+1+38=256
private final static string column   new string
private final static int lengthoftable
static
column
column
column
column
column
column
column
column
column
int length   0
for  int i   0   i < column length  i
length    column length
length    column length     for the separator
if  sanitymanager debug
256 is a good number  can be expanded or contracted if necessary
sanitymanager assert  length    256
lengthoftable   length
private final static char line
private final static char separator
/**
* constructor
* @param mytimeoutlock the latch that the timeout happened on
* @param mylocktable
* @param time the time when the locktable was cloned.
*/
private timeout  latch mytimeoutlock  enumeration mylocktable  long time
currentlock   mytimeoutlock
locktable   mylocktable
currenttime   time
if  sanitymanager debug
sanitymanager assert  currenttime > 0
/**
* createexception creates a standardexception based on:
*          currentlock
*          a snapshot of the locktable
* @return standardexception the exception with the locktable snapshot in it
*/
private standardexception createexception
try
buildlocktablestring
catch  standardexception se
return se
standardexception se   standardexception newexception  sqlstate lock_timeout_log  sb tostring
se setreport  standardexception report_always
return se
/**
* buildlocktablestring creates a locktable info string
*/
private string buildlocktablestring   throws standardexception
sb   new stringbuffer 8192
outputrow   new char
int i     counter
// need language here to print out tablenames
languageconnectioncontext lcc    languageconnectioncontext
contextservice getcontext languageconnectioncontext context_id
if  lcc    null
tc   lcc gettransactionexecute
try
tabinfo   new tablenameinfo  lcc  true
catch  exception se
just don't do anything
sb append  newline
sb append cheapdateformatter formatdate currenttime
sb append  newline
for  i   0  i < column length  i
sb append  column
sb append  separator
sb append  newline
for  i   0  i < lengthoftable  i
sb append  line
sb append  newline
// get the timeout lock info
if  currentlock    null
dumplock
if  timeoutinfohash
sb append
sb append  newline
sb append  outputrow
sb append  newline
sb append
sb append  newline
else
sb append      currentlock
sb append  newline
// get lock info from the rest of the table
if  locktable    null
while  locktable hasmoreelements
currentlock    latch locktable nextelement
dumplock
if  timeoutinfohash
sb append  outputrow
sb append  newline
else
sb append      currentlock
sb append  newline
for  i   0  i < lengthoftable  i
sb append  line
sb append  newline
return sb tostring
/**
* the static entry way to get the locktable in the system.
* @param timeoutlock the latch that the timeout happened on
* @param table the locktable
* @param time the time when the locktable was cloned
* @return standardexception the exception with the locktable snapshot in it
*/
static standardexception buildexception  latch timeoutlock  enumeration table  long time
timeout mytimeout   new timeout  timeoutlock  table  time
return mytimeout createexception
/*
* a static entry way to get the locktable in the system.
* for track 3311
*/
public static string buildstring  enumeration table  long time   throws standardexception
timeout mytimeout   new timeout  null  table  time
return mytimeout buildlocktablestring
/**
* dumplock puts information about currentlock into currentrow for output later.
* @throws standardexception
*/
private void dumplock   throws standardexception
hashtable attributes   new hashtable 17
object lock_type   currentlock getqualifier
// want containerid, segmentid, pagenum, recid from locktable
lockable lockable   currentlock getlockable
// see if the lockable object wants to participate
if   lockable lockattributes all  attributes
currentrow   null
return
// if it does, the lockable object must have filled in the following
// fields
if  sanitymanager debug
sanitymanager assert attributes get virtuallocktable lockname     null
sanitymanager assert attributes get virtuallocktable locktype     null
if  attributes get virtuallocktable containerid      null
attributes get virtuallocktable conglomid      null
sanitymanager throwassert
long conglomid    long  attributes get virtuallocktable conglomid
if  conglomid    null
if  attributes get virtuallocktable containerid     null    tc    null
long value    long attributes get virtuallocktable containerid
conglomid   new long  tc findconglomid  value longvalue
attributes put  virtuallocktable conglomid  conglomid
long containerid    long  attributes get virtuallocktable containerid
if  containerid    null
if  conglomid    null    tc    null
try
containerid   new long  tc findcontainerid  conglomid longvalue
attributes put  virtuallocktable containerid  containerid
catch  exception e
// just don't do anything
attributes put  virtuallocktable lockobj  currentlock
attributes put  virtuallocktable xactid  currentlock getcompatabilityspace   tostring
attributes put  virtuallocktable lockmode  lock_type tostring
attributes put  virtuallocktable lockcount  integer tostring  currentlock getcount
attributes put  virtuallocktable state   currentlock getcount      0   ?
if  tabinfo    null    conglomid    null
try
string tablename   tabinfo gettablename  conglomid
attributes put  virtuallocktable tablename  tablename
catch  nullpointerexception e
attributes put  virtuallocktable tablename  conglomid
try
string indexname   tabinfo getindexname  conglomid
if  indexname    null
attributes put  virtuallocktable indexname  indexname
else
if  attributes get virtuallocktable locktype  equals
because mode field is way to short to display this
// just put it in the indexname field for latch only.
attributes put  virtuallocktable indexname  attributes get virtuallocktable lockmode
else
attributes put  virtuallocktable indexname
catch  exception e
we are here because tabinfo indexcache is null
if  virtuallocktable containerid    null
attributes put  virtuallocktable indexname  virtuallocktable containerid
else
attributes put  virtuallocktable indexname
string tabletype   tabinfo gettabletype  conglomid
attributes put  virtuallocktable tabletype  tabletype
else
if  conglomid    null
attributes put  virtuallocktable tablename  virtuallocktable conglomid
else
attributes put  virtuallocktable tablename
if  virtuallocktable containerid    null
attributes put  virtuallocktable indexname  virtuallocktable containerid
else
attributes put  virtuallocktable indexname
attributes put  virtuallocktable tabletype  currentlock tostring
currentrow   attributes
/**
* cparray helps built the output string (outputrow).
* @param tocp the string to be copied into outputrow
* @param start the start place
* @param end the end place
*/
private void cparray  string tocp  int start  int end
build a field in the output string
int i   0
int totalallowwrite   end   start
if  tocp    null
for    i < tocp length     i
if   totalallowwrite i     0
break
outputrow   tocp charat i
for    i   start    end  i
outputrow
outputrow   separator
/**
* copies the needed information from currentrow into the stringbuffer for output
* @return true if successful
*/
private boolean timeoutinfohash
if  currentrow    null
return false
string mydata   new string
mydata   virtuallocktable xactid
mydata   virtuallocktable locktype
mydata   virtuallocktable lockmode
mydata   virtuallocktable lockcount
mydata   virtuallocktable lockname
mydata   virtuallocktable state
mydata   virtuallocktable tabletype
mydata   virtuallocktable indexname
mydata   virtuallocktable tablename
int currentlength   0
for  int i   0  i < mydata length  i
cparray  currentrow get  mydata   tostring    currentlength   currentlength   column length
// the next beginning position
currentlength   currentlength   column length     1
return true