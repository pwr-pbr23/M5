/*
derby - class org.apache.derby.impl.sql.execute.unionresultset
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl sql execute
import org apache derby iapi services monitor monitor
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi services stream headerprintwriter
import org apache derby iapi services stream infostreams
import org apache derby iapi sql execute cursorresultset
import org apache derby iapi sql execute execrow
import org apache derby iapi sql execute noputresultset
import org apache derby iapi error standardexception
import org apache derby iapi sql activation
import org apache derby iapi sql resultset
import org apache derby iapi sql resultdescription
import org apache derby iapi services loader generatedmethod
import org apache derby iapi types rowlocation
/**
* takes two result sets and returns their union (all).
* (any duplicate elimination is performed above this resultset.)
*
* @author ames
*/
class unionresultset extends noputresultsetimpl
implements cursorresultset
/* run time statistics variables */
public int rowsseenleft
public int rowsseenright
public int rowsreturned
private int whichsource   1     1 or 2     the source we are currently on
private int source1finalrowcount    1
// these are set in the constructor and never altered
public noputresultset source1
public noputresultset source2
//
// class interface
//
/*
* implementation alternative: an array of sources,
* using whichsource to index into the current source.
*/
public unionresultset noputresultset source1  noputresultset source2
activation activation
int resultsetnumber
double optimizerestimatedrowcount
double optimizerestimatedcost
super activation  resultsetnumber
optimizerestimatedrowcount  optimizerestimatedcost
this source1   source1
this source2   source2
constructortime    getelapsedmillis begintime
//
// resultset interface (leftover from noputresultset)
//
/**
* returns the description of the first source.
* assumes the compiler ensured both sources
* had the same description.
*/
public resultdescription getresultdescription
return source1 getresultdescription
/**
* open the first source.
*	@exception standardexception thrown on failure
*/
public void	opencore   throws standardexception
begintime   getcurrenttimemillis
if  sanitymanager debug
sanitymanager assert    isopen
isopen   true
source1 opencore
numopens
opentime    getelapsedmillis begintime
/**
* if there are rows still on the first source, return the
* next one; otherwise, switch to the second source and
* return a row from there.
*	@exception standardexception thrown on failure
*/
public execrow	getnextrowcore   throws standardexception
execrow result   null
begintime   getcurrenttimemillis
if   isopen
switch  whichsource
case 1   result   source1 getnextrowcore
if   result     execrow  null
//source1finalrowcount = source1.rowcount();
source1 close
whichsource   2
source2 opencore
result   source2 getnextrowcore
if  result    null
rowsseenright
else
rowsseenleft
break
case 2   result   source2 getnextrowcore
if  result    null
rowsseenright
break
default
if  sanitymanager debug
sanitymanager throwassert
break
currentrow   result
setcurrentrow result
if  result    null
rowsreturned
nexttime    getelapsedmillis begintime
return result
/**
* if the result set has been opened,
* close the currently open source.
*
* @exception standardexception thrown on error
*/
public void	close   throws standardexception
begintime   getcurrenttimemillis
if   isopen
// we don't want to keep around a pointer to the
// row ... so it can be thrown away.
// revisit: does this need to be in a finally
// block, to ensure that it is executed?
clearcurrentrow
switch  whichsource
case 1   source1 close
break
case 2   source2 close
source1finalrowcount    1
whichsource   1
break
default
if  sanitymanager debug
sanitymanager throwassert
break
super close
else
if  sanitymanager debug
sanitymanager debug
closetime    getelapsedmillis begintime
public void	finish   throws standardexception
source1 finish
source2 finish
finishandrts
/**
* return the total amount of time spent in this resultset
*
* @param type	current_resultset_only - time spent only in this resultset
*				entire_resultset_tree  - time spent in this resultset and below.
*
* @return long		the total amount of time spent (in milliseconds).
*/
public long gettimespent int type
long tottime   constructortime   opentime   nexttime   closetime
if  type    noputresultset current_resultset_only
return	tottime   source1 gettimespent entire_resultset_tree
source2 gettimespent entire_resultset_tree
else
return tottime
//
// cursorresultset interface
//
/**
a union has a single underlying row at a time, although
from one of several sources.
@see cursorresultset
@return the row location of the current cursor row.
@exception standardexception thrown on failure
*/
public rowlocation getrowlocation   throws standardexception
switch  whichsource
case 1
if  sanitymanager debug
sanitymanager assert source1 instanceof cursorresultset
return   cursorresultset source1  getrowlocation
case 2
if  sanitymanager debug
sanitymanager assert source2 instanceof cursorresultset
return   cursorresultset source2  getrowlocation
default
if  sanitymanager debug
sanitymanager throwassert
return null
/**
a union has a single underlying row at a time, although
from one of several sources.
@see cursorresultset
@return the current row.
* @exception standardexception thrown on failure.
*/
/* resolve - this should return activation.getcurrentrow(resultsetnumber),
* once there is such a method.  (currentrow is redundant)
*/
public execrow getcurrentrow   throws standardexception
execrow result   null
if  sanitymanager debug
sanitymanager assert isopen
if    whichsource    1    whichsource    2
sanitymanager throwassert
whichsource
switch  whichsource
case 1
result     cursorresultset  source1  getcurrentrow
break
case 2
result     cursorresultset  source2  getcurrentrow
break
currentrow   result
setcurrentrow result
return result