/*
derby - class org.apache.derby.iapi.services.daemon.daemonservice
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi services daemon
import org apache derby iapi services sanity sanitymanager
/**
a daemonservice provides a background service which is suitable for
asynchronous i/o and general clean up.  it should not be used as a general
worker thread for parallel execution.  a daemonservice can be subscribe to by
many serviceable objects and a daemonservice will call that object's
performwork from time to time.  the performwork method is defined by the
client object and should be well behaved - in other words, it should not take
too long or hog too many resources or deadlock with anyone else.  and it
cannot (should not) error out.
<p>it is up to each <code>daemonservice</code> implementation to define its
level of service, including
<ul>
<li>how quickly and how often the clients should expect to be be serviced
<li>how the clients are prioritized
<li>whether the clients need to tolerate spurious services
</ul>
<p>mt - all routines on the interface must be mt-safe.
@see serviceable
*/
public interface daemonservice
public static int timer_delay   10000     wake up once per timer_delay milli second
/**
trace flag that can be used by daemons to print stuff out
*/
public static final string daemontrace   sanitymanager debug ?     null
/**
trace flag that can be used to turn off background daemons
if daemonoff is set, background daemon will not attempt to do anything.
*/
public static final string daemonoff   sanitymanager debug ?     null
/**
add a new client that this daemon needs to service
@param newclient a serviceable object this daemon will service from time to time
@param ondemandonly only service this client when it ask for service with a servicenow request
@return a client number that uniquely identifies this client (this subscription)
*/
public int subscribe serviceable newclient  boolean ondemandonly
/**
get rid of a client from the daemon. if a client is being serviced when
the call is made, the implementation may choose whether or not the call
should block until the client has completed its work. if the call does
not block, the client must be prepared to handle calls to its
<code>performwork()</code> method even after <code>unsubscribe()</code>
has returned.
@param clientnumber the number that uniquely identify the client
*/
public void unsubscribe int clientnumber
/**
service this subscription asap.  does not guarantee that the daemon
will actually do anything about it.
@param clientnumber the number that uniquely identify the client
*/
public void servicenow int clientnumber
/**
request a one time service from the daemon.  unless performwork returns
requeue (see serviceable), the daemon will service this client once
and then it will get rid of this client.  since no client number is
associated with this client, it cannot request to be serviced or be
unsubscribed.
the work is always added to the deamon, regardless of the
state it returns.
@param newclient the object that needs a one time service
@param servicenow if true, this client should be serviced asap, as if a
servicenow has been issued.  if false, then this client will be
serviced with the normal scheduled.
@return true if the daemon indicates it is being overloaded,
false it's happy.
*/
public boolean enqueue serviceable newclient  boolean servicenow
/**
pause.  no new service is performed until a resume is issued.
*/
public void pause
/**
resume service after a pause
*/
public void resume
/**
end this daemon service
*/
public void stop
/**
clear all the queued up work from this daemon.  subscriptions are not
affected.
*/
public void clear
/*
*wait until work in the high priorty queue is done.
*/
public void waituntilqueueisempty