/*
derby - class org.apache.derby.catalog.types.indexdescriptorimpl
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby catalog types
import org apache derby catalog indexdescriptor
import org apache derby iapi services io formatable
import org apache derby iapi services io storedformatids
import org apache derby iapi reference sqlstate
import org apache derby iapi services io formatablehashtable
import org apache derby iapi services io formatableintholder
import org apache derby iapi sql dictionary indexrowgenerator
import java io objectinput
import java io objectoutput
import java io ioexception
/** @see org.apache.derby.iapi.sql.dictionary.indexrowgenerator */
public class indexdescriptorimpl implements indexdescriptor  formatable
/********************************************************
**
**	this class implements formatable. that means that it
**	can write itself to and from a formatted stream. if
**	you add more fields to this class, make sure that you
**	also write/read them with the writeexternal()/readexternal()
**	methods.
**
**	if, inbetween releases, you add more fields to this class,
**	then you should bump the version number emitted by the gettypeformatid()
**	method.
**
********************************************************/
private boolean		isunique
private int		basecolumnpositions
private boolean	isascending
private int			numberoforderedcolumns
private string		indextype
/**
* constructor for an indexdescriptorimpl
*
* @param indextype		the type of index
* @param isunique		true means the index is unique
* @param basecolumnpositions	an array of column positions in the base
*								table.  each index column corresponds to a
*								column position in the base table.
* @param isascending	an array of booleans telling asc/desc on each
*						column.
* @param numberoforderedcolumns	in the future, it will be possible
*									to store non-ordered columns in an
*									index.  these will be useful for
*									covered queries.
*/
public indexdescriptorimpl string indextype
boolean isunique
int basecolumnpositions
boolean isascending
int numberoforderedcolumns
this indextype   indextype
this isunique   isunique
this basecolumnpositions   basecolumnpositions
this isascending   isascending
this numberoforderedcolumns   numberoforderedcolumns
/** zero-argument constructor for formatable interface */
public indexdescriptorimpl
/** @see indexdescriptor#isunique */
public boolean isunique
return isunique
/** @see indexdescriptor#basecolumnpositions */
public int basecolumnpositions
return basecolumnpositions
/** @see indexdescriptor#getkeycolumnposition */
public integer getkeycolumnposition integer heapcolumnposition
return new integer getkeycolumnposition heapcolumnposition intvalue
/** @see indexdescriptor#getkeycolumnposition */
public int getkeycolumnposition int heapcolumnposition
/* return 0 if column is not in the key */
int keyposition   0
for  int index   0  index < basecolumnpositions length  index
/* return 1-based key column position if column is in the key */
if  basecolumnpositions    heapcolumnposition
keyposition   index   1
break
return keyposition
/** @see indexdescriptor#numberoforderedcolumns */
public int numberoforderedcolumns
return numberoforderedcolumns
/** @see indexdescriptor#indextype */
public string indextype
return indextype
/** @see indexdescriptor#isascending */
public boolean			isascending integer keycolumnposition
int i   keycolumnposition intvalue     1
if  i < 0    i >  basecolumnpositions length
return false
return isascending
/** @see indexdescriptor#isdescending */
public boolean			isdescending integer keycolumnposition
int i   keycolumnposition intvalue     1
if  i < 0    i >  basecolumnpositions length
return false
return   isascending
/** @see indexdescriptor#isascending */
public boolean		isascending
return isascending
/** @see indexdescriptor#setbasecolumnpositions */
public void		setbasecolumnpositions int basecolumnpositions
this basecolumnpositions   basecolumnpositions
/** @see indexdescriptor#setisascending */
public void		setisascending boolean isascending
this isascending   isascending
/** @see indexdescriptor#setnumberoforderedcolumns */
public void		setnumberoforderedcolumns int numberoforderedcolumns
this numberoforderedcolumns   numberoforderedcolumns
public string tostring
string	uniqueness
string	cols
stringbuffer	sb   new stringbuffer 60
if  isunique
sb append
sb append indextype
sb append
for  int i   0  i < basecolumnpositions length  i
if  i > 0
sb append
sb append basecolumnpositions
if    isascending
sb append
sb append
return sb tostring
/* externalizable interface */
/**
* @see java.io.externalizable#readexternal
*
* @exception ioexception	thrown on read error
*/
public void readexternal objectinput in  throws ioexception  classnotfoundexception
formatablehashtable fh    formatablehashtable in readobject
isunique   fh getboolean
int bcplength   fh getint
basecolumnpositions   new int
isascending   new boolean
for  int i   0  i < bcplength  i
basecolumnpositions   fh getint     i
isascending   fh getboolean     i
numberoforderedcolumns   fh getint
indextype    string fh get
/**
* @see java.io.externalizable#writeexternal
*
* @exception ioexception	thrown on write error
*/
public void writeexternal objectoutput out  throws ioexception
formatablehashtable fh   new formatablehashtable
fh putboolean    isunique
fh putint    basecolumnpositions length
for  int i   0  i < basecolumnpositions length  i
fh putint     i  basecolumnpositions
fh putboolean     i  isascending
fh putint    numberoforderedcolumns
fh put    indextype
out writeobject fh
/* typedformat interface */
public int gettypeformatid
return storedformatids index_descriptor_impl_v02_id
/**
* test for value equality
*
* @param other		the other indexrowgenerator to compare this one with
*
* @return	true if this indexrowgenerator has the same value as other
*/
public boolean equals object other
/* assume not equal until we know otherwise */
boolean retval   false
/* equal only if comparing the same class */
if  other instanceof indexdescriptorimpl
indexdescriptorimpl id    indexdescriptorimpl  other
/*
** check all the fields for equality except for the array
** elements (this is hardest, so save for last)
*/
if   id isunique    this isunique
id basecolumnpositions length
this basecolumnpositions length
id numberoforderedcolumns    this numberoforderedcolumns
id indextype equals this indextype
/*
** everything but array elements known to be true -
** assume equal, and check whether array elements are equal.
*/
retval   true
for  int i   0  i < this basecolumnpositions length  i
/* if any array element is not equal, return false */
if   id basecolumnpositions
this basecolumnpositions      id isascending
this isascending
retval   false
break
return retval
/**
@see java.lang.object#hashcode
*/
public int hashcode
int	retval
retval   isunique ? 1   2
retval    numberoforderedcolumns
for  int i   0  i < basecolumnpositions length  i
retval    basecolumnpositions
retval    indextype hashcode
return retval