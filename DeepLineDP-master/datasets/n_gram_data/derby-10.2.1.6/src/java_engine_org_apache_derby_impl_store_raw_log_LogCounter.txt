/*
derby - class org.apache.derby.impl.store.raw.log.logcounter
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl store raw log
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi services io formatidutil
import org apache derby iapi services io storedformatids
import org apache derby iapi store raw log loginstant
import org apache derby iapi store access databaseinstant
import org apache derby iapi services io compressednumber
import java io ioexception
import java io objectinput
import java io objectoutput
/**
a very simple log instant implementation.
within the stored log record a log counter is represented as a long,
hence the getvalueaslong() method. outside the logfactory the instant
is passed around as a logcounter (through its loginstant interface).
the way the long is encoded is such that < == > correctly tells if
one log instant is lessthan, equals or greater than another.
*/
public class logcounter implements loginstant
/********************************************************
**
**	this class implements formatable. that means that it
**	can write itself to and from a formatted stream. if
**	you add more fields to this class, make sure that you
**	also write/read them with the writeexternal()/readexternal()
**	methods.
**
**	if, between releases, you add more fields to this class,
**	then you should bump the version number emitted by the gettypeformatid()
**	method.
**
********************************************************/
/** a well defined value of an invalid log instant. */
public static final long invalid_log_instant   0
// max possible log file number in versions before 10.1 is 2^22 -1
public static final long derby_10_0_max_logfile_number    long 0x003fffffl     4194303
// max possible log file number is 2^31 -1
public static final long max_logfile_number	   long 0x7fffffffl     2147483647
// lower end of 32 bits in long type are used to store the log file position
private static final long file_number_shift	  32
// reserve top 4 bits in log file size for future use
public static final long max_logfile_size	       long 0x0fffffffl     268435455
// 32 bits are used to store the log file postion
private static final long file_position_mask	   long 0x7fffffffl
private long filenumber
private long fileposition
// contructors
public logcounter long value
filenumber   getlogfilenumber value
fileposition   getlogfileposition value
public logcounter long filenumber  long position
if  sanitymanager debug
sanitymanager assert filenumber > 0
sanitymanager assert position > 0
sanitymanager assert position < max_logfile_size
sanitymanager assert filenumber < max_logfile_number
this filenumber   filenumber
this fileposition   position
/**
* public niladic constructor needed for formatable interface.
*/
public logcounter
/**
static functions that can only be used inside the rawstore's log
factory which passes the log counter around encoded as a long
*/
// make a log instant from 2 longs and return a long which is the long
// representatin of a logcounter
static public final long makeloginstantaslong long filenum  long filepos
if  sanitymanager debug
sanitymanager assert filenum > 0
sanitymanager assert filepos > 0
sanitymanager assert filepos < max_logfile_size
sanitymanager assert filenum < max_logfile_number
return   filenum << file_number_shift    filepos
static public final long getlogfileposition long valueaslong
return valueaslong   file_position_mask
static public final long getlogfilenumber long valueaslong
return valueaslong >>> file_number_shift
/** logscan methods */
public boolean lessthan databaseinstant other
logcounter compare    logcounter other
return  filenumber    compare filenumber  ?
fileposition < compare fileposition
filenumber < compare filenumber
public boolean equals object other
if  this    other
return true
if    other instanceof logcounter
return false
logcounter compare    logcounter other
return filenumber    compare filenumber
fileposition    compare fileposition
public databaseinstant next
return new logcounter  makeloginstantaslong filenumber  fileposition    1
public databaseinstant prior
return new logcounter  makeloginstantaslong filenumber  fileposition    1
public int hashcode
return  int   fileposition ^ filenumber
public string tostring
return     filenumber       fileposition
public static string todebugstring long instant
if  sanitymanager debug
return     getlogfilenumber instant        getlogfileposition instant
else
return null
/**
these following methods are only intended to be called by an
implementation of a log factory. all other uses of this object should
only see it as a log instant.
*/
public long getvalueaslong
return makeloginstantaslong filenumber  fileposition
public long getlogfileposition
return fileposition
public long getlogfilenumber
return filenumber
/*
* methods for the formatable interface
*/
/**
* read this in.
* @exception ioexception error reading from log stream
* @exception classnotfoundexception corrupted log stream
*/
public void readexternal objectinput oi  throws ioexception  classnotfoundexception
filenumber   compressednumber readlong oi
fileposition   compressednumber readlong oi
/**
* write this out.
* @exception ioexception error writing to log stream
*/
public void writeexternal objectoutput oo  throws ioexception
compressednumber writelong oo filenumber
compressednumber writelong oo fileposition
/**
* get the formatid which corresponds to this class.
*
*	@return	the formatid of this class
*/
public	int	gettypeformatid  	  return storedformatids log_counter