/*
derby - class org.apache.derby.impl.sql.execute.rowresultset
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl sql execute
import org apache derby iapi services monitor monitor
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi services stream headerprintwriter
import org apache derby iapi services stream infostreams
import org apache derby iapi sql execute cursorresultset
import org apache derby iapi sql execute execrow
import org apache derby iapi sql execute noputresultset
import org apache derby iapi sql activation
import org apache derby iapi sql resultdescription
import org apache derby iapi error standardexception
import org apache derby iapi services loader generatedmethod
import org apache derby iapi types rowlocation
/**
* takes a constant row value and returns it as
* a result set.
* <p>
* this class actually probably never underlies a select statement,
* but in case it might and because it has the same behavior as the
* ones that do, we have it implement cursorresultset and give
* reasonable answers.
*
* @author ames
*/
class rowresultset extends noputresultsetimpl
implements cursorresultset
/* run time statistics variables */
public int rowsreturned
private boolean cancacherow
private boolean next
private generatedmethod row
private execrow		cachedrow
//
// class interface
//
rowresultset
activation 	activation
generatedmethod row
boolean 		cancacherow
int 			resultsetnumber
double 			optimizerestimatedrowcount
double 			optimizerestimatedcost
super activation  resultsetnumber
optimizerestimatedrowcount  optimizerestimatedcost
this row   row
this cancacherow   cancacherow
constructortime    getelapsedmillis begintime
/* this constructor takes in a constant row value, as the cache row.  see the
* usage in beetle 4373 for materializing subquery.
*/
rowresultset
activation 		activation
execrow 		constantrow
boolean 		cancacherow
int 			resultsetnumber
double 			optimizerestimatedrowcount
double 			optimizerestimatedcost
super activation  resultsetnumber
optimizerestimatedrowcount  optimizerestimatedcost
begintime   getcurrenttimemillis
this cachedrow   constantrow
this cancacherow   cancacherow
constructortime    getelapsedmillis begintime
//
// resultset interface (leftover from noputresultset)
//
/**
* sets state to 'open'.
*
* @exception standardexception thrown if activation closed.
*/
public void	opencore   throws standardexception
next   false
begintime   getcurrenttimemillis
isopen   true
numopens
opentime    getelapsedmillis begintime
/**
* if open and not returned yet, returns the row
* after plugging the parameters into the expressions.
*
* @exception standardexception thrown on failure.
*/
public execrow	getnextrowcore   throws standardexception
currentrow   null
begintime   getcurrenttimemillis
if  isopen
if   next
next   true
if  currentrow    null
if  cachedrow    null
currentrow   cachedrow
else if  row    null
currentrow    execrow  row invoke activation
if  cancacherow
cachedrow   currentrow
rowsreturned
setcurrentrow currentrow
nexttime    getelapsedmillis begintime
return currentrow
/**
* @see org.apache.derby.iapi.sql.resultset#close
*
* @exception standardexception thrown on error
*/
public void	close   throws standardexception
begintime   getcurrenttimemillis
if  isopen
// we don't want to keep around a pointer to the
// row ... so it can be thrown away.
// revisit: does this need to be in a finally
// block, to ensure that it is executed?
clearcurrentrow
next   false
super close
else
if  sanitymanager debug
sanitymanager debug
closetime    getelapsedmillis begintime
/**
* return the total amount of time spent in this resultset
*
* @param type	current_resultset_only - time spent only in this resultset
*				entire_resultset_tree  - time spent in this resultset and below.
*
* @return long		the total amount of time spent (in milliseconds).
*/
public long gettimespent int type
long tottime   constructortime   opentime   nexttime   closetime
return tottime
//
// cursorresultset interface
//
/**
* this is not operating against a stored table,
* so it has no row location to report.
*
* @see cursorresultset
*
* @return a null.
*/
public rowlocation getrowlocation
if  sanitymanager debug
sanitymanager throwassert
return null
/**
* this is not used in positioned update and delete,
* so just return a null.
*
* @see cursorresultset
*
* @return a null.
*/
public execrow getcurrentrow
if  sanitymanager debug
sanitymanager throwassert
return null