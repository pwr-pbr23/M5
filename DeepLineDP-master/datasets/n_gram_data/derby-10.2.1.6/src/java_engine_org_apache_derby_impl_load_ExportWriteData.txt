/*
derby - class org.apache.derby.impl.load.exportwritedata
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl load
import java io fileoutputstream
import java io bufferedoutputstream
import java io outputstreamwriter
import java net malformedurlexception
import java net url
import java util date
import java io ioexception
//this class takes the passed row and writes it into the data file using the
//properties from the control file
//fixed format: if length of nullstring is greater than column width, throw execption
final class exportwritedata extends exportwritedataabstract
implements java security privilegedexceptionaction
private string outputfilename
// i18n support - instead of using dataoutputstream.writebytes - use
// outputstreamwriter.write with the correct codeset.
private outputstreamwriter astream
//writes data into the o/p file using control file properties
exportwritedata string outputfilename  controlinfo controlfilereader
throws exception
this outputfilename   outputfilename
this controlfilereader   controlfilereader
loadpropertiesinfo
try
java security accesscontroller doprivileged this
catch  java security privilegedactionexception pae
throw pae getexception
public final object run   throws exception
openfile
return null
//prepares the o/p file for writing
private void openfile   throws exception
try
url url   new url outputfilename
outputfilename   url getfile
catch  malformedurlexception ex
fileoutputstream anoutputstream   new fileoutputstream outputfilename
bufferedoutputstream buffered   new bufferedoutputstream anoutputstream
astream   datacodeset    null ?
new outputstreamwriter buffered
new outputstreamwriter buffered  datacodeset
/**if control file says true for column definition, write it as first line of the
*  data file
* @exception	exception if there is an error
*/
void writecolumndefinitionoptionally string columnnames
string columntypes
throws exception
boolean ignorecolumntypes true
//do uppercase because the ui shows the values as true and false
if  columndefinition touppercase java util locale english  equals controlinfo internal_true touppercase java util locale english
string tempstr new string
//put the start and stop delimiters around the column name and type
for  int i 0  i<columnnames length  i
// take care at adding fieldseparator at the
// end of the field if needed
if  i>0
tempstr fieldseparator
else
tempstr
tempstr tempstr
fieldstartdelimiter columnnames fieldstopdelimiter
if  ignorecolumntypes  false
tempstr tempstr fieldseparator
fieldstartdelimiter columntypes fieldstopdelimiter
astream write tempstr  0  tempstr length
astream write recordseparator  0  recordseparator length
//puts the start and stop delimiters only if column value contains field/record separator
//in it
private void writenextcolumn string onecolumn  boolean isnumeric  throws exception
if  onecolumn    null
//put the start and end delimiters always
//because of the bug 2045, i broke down following
//astream.writebytes(fieldstartdelimiter+onecolumn+fieldstopdelimiter);
//into 3 writebytes. that bug had a table with long bit varying datatype and while
//writing data from that column using the stream, it would run out of memory.
// i18n - write using the write method of outputstreamwriter
if   isnumeric
astream write fieldstartdelimiter  0  fieldstartdelimiter length
//convert the string to double character delimiters format if requred.
if doubledelimiter
onecolumn   makedoubledelimiterstring onecolumn   fieldstartdelimiter
astream write onecolumn  0  onecolumn length
if   isnumeric
astream write fieldstopdelimiter  0  fieldstopdelimiter length
/**write the passed row into the data file
* @exception	exception if there is an error
*/
public void writedata string onerow  boolean isnumeric  throws exception
if  format equals controlinfo default_format
//if format is delimited, write column data and field separator and then the record separator
//if a column's value is null, write just the column separator
writenextcolumn onerow  isnumeric
for  int i   1  i < onerow length  i
astream write fieldseparator  0  fieldseparator length
writenextcolumn onerow  isnumeric
if  hasdelimiteratend     write an additional delimeter if user wants one at the end of each row
astream write fieldseparator  0  fieldseparator length
astream write recordseparator  0  recordseparator length
/**if nothing more to write, then close the file and write a message of completion
*  in message file
*@exception	exception if there is an error
*/
public void nomorerows   throws ioexception
astream flush
astream close
//    system.err.print(new date(system.currenttimemillis()) + " ");
//    system.err.println("export finished");
//    system.seterr(system.out);
/*
* convert the input string into double delimiter format for export.
* double character delimiter recognition in delimited format
* files applies to the export and import utilities. character delimiters are
* permitted within the character-based fields of a file. this applies to
* fields of type char, varchar, longvarchar, or clob. any pair of character
* delimiters found between the enclosing character delimiters is imported
* into the database. for example with doble quote(") as character delimiter
*
*	 "what a ""nice""day!"
*
*  will be imported as:
*
*	 what a "nice"day!
*
*	 in the case of export, the rule applies in reverse. for example,
*
*	 i am 6"tall.
*
*	 will be exported to a file as:
*
*	 "i am 6""tall."
*/
private string makedoubledelimiterstring string inputstring   string chardelimiter
int start   inputstring indexof chardelimiter
stringbuffer result
//if delimeter is not found inside the string nothing to do
if start     1
result   new stringbuffer inputstring
int current
int dellength   chardelimiter length
while start    1
//insert delimter character
result   result insert start  chardelimiter
current   start   dellength  1
start   result tostring   indexof chardelimiter  current
return result tostring
return inputstring