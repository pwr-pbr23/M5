/*
derby - class org.apache.derby.impl.store.raw.xact.containerlocking3
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl store raw xact
import org apache derby iapi services locks lockfactory
import org apache derby iapi services locks c_lockfactory
import org apache derby iapi store raw containerhandle
import org apache derby iapi store raw containerlock
import org apache derby iapi store raw transaction
import org apache derby iapi error standardexception
/**
a locking policy that implements container level locking with
isolation degree 3.
@see org.apache.derby.iapi.store.raw.lockingpolicy
*/
public class containerlocking3 extends nolocking
protected final lockfactory	lf
protected containerlocking3 lockfactory lf
this lf   lf
/**
obtain a container shared or exclusive lock	until
the end of the nested transaction.
@exception standardexception standard cloudscape error policy
*/
public boolean lockcontainer
transaction     t
containerhandle container
boolean         waitforlock
boolean         forupdate
throws standardexception
object qualifier   forupdate ? containerlock cx   containerlock cs
return
lf lockobject
t getcompatibilityspace    t  container getid    qualifier
waitforlock ?
c_lockfactory timed_wait   c_lockfactory no_wait
public int getmode
return mode_container
/*
** we can inherit all the others methods of nolocking since we hold the
** container lock until the end of transaction, and we don't obtain row
** locks.
*/