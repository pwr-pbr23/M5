/*
derby - class org.apache.derby.iapi.sql.dictionary.columndescriptorlist
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi sql dictionary
import org apache derby iapi error standardexception
import org apache derby iapi services sanity sanitymanager
import org apache derby catalog uuid
import org apache derby iapi error standardexception
import org apache derby iapi services sanity sanitymanager
import java util arraylist
import java util iterator
/**
* this represents a list of column descriptors.
*/
public class columndescriptorlist extends arraylist
/**
* add the column.  currently, the table id is ignored.
*
* @param tableid the table id (ignored)
* @param column the column to add
*/
public void add uuid tableid  columndescriptor column
/*
** resolve: the interface includes tableid because presumably
** the primary key for the columns table will be tableid +
** columnid (or possibly tableid + column name - both column
** name and id must be unique within a table).  however, the
** columndescriptor contains a reference to a tableid, so it
** seems like we don't need the parameter here.  i am going
** to leave it here just in case we decide we need it later.
*/
add column
/**
* get the column descriptor
*
* @param tableid the table id (ignored)
* @param columnname the column get
*
* @return the column descriptor if found
*/
public columndescriptor getcolumndescriptor uuid tableid
string columnname
columndescriptor	returnvalue   null
for  iterator iterator   iterator    iterator hasnext
columndescriptor columndescriptor    columndescriptor  iterator next
if   columnname equals  columndescriptor getcolumnname
tableid equals  columndescriptor getreferencinguuid
returnvalue   columndescriptor
break
return returnvalue
/**
* get the column descriptor
*
* @param tableid the table id (ignored)
* @param columnid the column id
*
* @return the column descriptor if found
*/
public columndescriptor getcolumndescriptor uuid tableid  int columnid
columndescriptor	returnvalue   null
for  iterator iterator   iterator    iterator hasnext
columndescriptor columndescriptor    columndescriptor  iterator next
if     columnid    columndescriptor getposition
tableid equals  columndescriptor getreferencinguuid
returnvalue   columndescriptor
break
return returnvalue
/**
* return the nth (0-based) element in the list.
*
* @param n	which element to return.
*
* @return the nth element in the list.
*/
public columndescriptor elementat int n
return  columndescriptor  get n
/**
* get an array of strings for all the columns
* in this cdl.
*
* @return the array of strings
*/
public string getcolumnnames
string strings   new string
int size   size
for  int index   0  index < size  index
columndescriptor columndescriptor   elementat index
strings   columndescriptor getcolumnname
return strings