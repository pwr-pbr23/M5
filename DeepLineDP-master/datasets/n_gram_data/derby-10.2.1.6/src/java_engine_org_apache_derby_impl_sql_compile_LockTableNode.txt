/*
derby - class org.apache.derby.impl.sql.compile.locktablenode
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package	org apache derby impl sql compile
import org apache derby iapi services context contextmanager
import org apache derby iapi services compiler methodbuilder
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi error standardexception
import org apache derby iapi sql compile compilercontext
import org apache derby iapi sql conn authorizer
import org apache derby iapi sql dictionary conglomeratedescriptor
import org apache derby iapi sql dictionary datadictionary
import org apache derby iapi sql dictionary datadictionarycontext
import org apache derby iapi sql dictionary schemadescriptor
import org apache derby iapi sql dictionary tabledescriptor
import org apache derby iapi reference sqlstate
import org apache derby iapi sql execute constantaction
import org apache derby iapi sql activation
import org apache derby iapi sql resultset
import org apache derby iapi reference classname
import org apache derby impl sql compile activationclassbuilder
import org apache derby iapi services classfile vmopcode
/**
* a locktablenode is the root of a querytree that represents a lock table command:
*	lock table <tablename> in share/exclusive mode
*
* @author jerry brenner
*/
public class locktablenode extends miscellaneousstatementnode
private tablename	tablename
private boolean		exclusivemode
private long		conglomeratenumber
private tabledescriptor			locktabledescriptor
/**
* initializer for locktablenode
*
* @param tablename		the table to lock
* @param exclusivemode	boolean, whether or not to get an exclusive lock.
*/
public void init object tablename  object exclusivemode
this tablename    tablename  tablename
this exclusivemode     boolean  exclusivemode  booleanvalue
/**
* convert this object to a string.  see comments in querytreenode.java
* for how this should be done for tree printing.
*
* @return	this object as a string
*/
public string tostring
if  sanitymanager debug
return     tablename
exclusivemode
conglomeratenumber
super tostring
else
return
public string statementtostring
return
/**
* bind this locktablenode.  this means looking up the table,
* verifying it exists and getting the heap conglomerate number.
*
* @return	the bound query tree
*
* @exception standardexception		thrown on error
*/
public querytreenode bind   throws standardexception
compilercontext			cc   getcompilercontext
conglomeratedescriptor	cd
datadictionary			dd   getdatadictionary
schemadescriptor		sd
string schemaname   tablename getschemaname
sd   getschemadescriptor schemaname
// users are not allowed to lock system tables
if  sd issystemschema
throw standardexception newexception sqlstate lang_no_user_ddl_in_system_schema
statementtostring    schemaname
locktabledescriptor   gettabledescriptor tablename gettablename    sd
if  locktabledescriptor    null
// check if the reference is for a synonym.
tablename synonymtab   resolvetabletosynonym tablename
if  synonymtab    null
throw standardexception newexception sqlstate lang_table_not_found  tablename
tablename   synonymtab
sd   getschemadescriptor tablename getschemaname
locktabledescriptor   gettabledescriptor synonymtab gettablename    sd
if  locktabledescriptor    null
throw standardexception newexception sqlstate lang_table_not_found  tablename
//throw an exception if user is attempting to lock a temporary table
if  locktabledescriptor gettabletype      tabledescriptor global_temporary_table_type
throw standardexception newexception sqlstate lang_not_allowed_for_declared_global_temp_table
conglomeratenumber   locktabledescriptor getheapconglomerateid
/* get the base conglomerate descriptor */
cd   locktabledescriptor getconglomeratedescriptor conglomeratenumber
/* statement is dependent on the tabledescriptor and conglomeratedescriptor */
cc createdependency locktabledescriptor
cc createdependency cd
if  isprivilegecollectionrequired
// need select privilege to perform lock table statement.
cc pushcurrentprivtype authorizer select_priv
cc addrequiredtablepriv locktabledescriptor
cc popcurrentprivtype
return this
/**
* return true if the node references session schema tables (temporary or permanent)
*
* @return	true if references session schema tables, else false
*
* @exception standardexception		thrown on error
*/
public boolean referencessessionschema
throws standardexception
//if lock table is on a session schema table, then return true.
return issessionschema locktabledescriptor getschemaname
/**
* create the constant information that will drive the guts of execution.
*
* @exception standardexception		thrown on failure
*/
public constantaction	makeconstantaction   throws standardexception
return getgenericconstantactionfactory   getlocktableconstantaction
tablename getfulltablename
conglomeratenumber
exclusivemode