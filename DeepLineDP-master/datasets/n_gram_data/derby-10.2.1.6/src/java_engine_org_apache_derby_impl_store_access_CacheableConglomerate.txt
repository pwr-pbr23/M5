/*
derby - class org.apache.derby.impl.store.access.cacheableconglomerate
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl store access
import java util properties
import org apache derby iapi services cache cacheable
import org apache derby iapi services cache cachemanager
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi error standardexception
import org apache derby iapi store access conglomerate conglomerate
/**
the cacheableconglomerate implements a single item in the cache used by
the conglomerate directory to cache conglomerates.  it is simply a wrapper
object for the conglomid and conglomerate object that is read from the
conglomerate conglomerate.   it is a wrapper rather than extending
the conglomerate implementations because we want to cache all conglomerate
implementatations: (ie. heap, b2i, ...).
references to the conglomerate objects cached by this wrapper will be handed
out to callers.  when this this object goes out of cache callers may still
have references to the conglomerate objects, which we are counting on java
to garbage collect.  the conglomerate objects never change after they are
created.
**/
class cacheableconglomerate implements cacheable
private long            conglomid
private conglomerate    conglom
/* constructor */
cacheableconglomerate
/*
** protected methods of cacheableconglomerate:
*/
protected conglomerate getconglom
return this conglom
/*
** methods of cacheable:
*/
/**
set the identity of the object to represent an item that already exists,
e.g. an existing container.
the object will be in the no identity state,
ie. it will have just been created or clearidentity() was just called.
<br>
the object must copy the information out of key, not just store a reference to key.
after this call the expression getidentity().equals(key) must return true.
<br>
if the class of the object needs to change (e.g. to support a different format)
then the object should create a new object, call its initparameter() with the parameters
the original object was called with, set its identity and return a reference to it. the cache
manager will discard the reference to the old object.
<br>
if an exception is thrown the object must be left in the no-identity state.
<br> mt - single thread required - method must only be called be cache manager
and the cache manager will guarantee only one thread can be calling it.
@return an object reference if the object can take on the identity, null otherwise.
@exception standardexception standard cloudscape policy
@see cachemanager#find
*/
public cacheable setidentity object key  throws standardexception
if  sanitymanager debug
sanitymanager throwassert
return null
/**
* create a new item and set the identity of the object to represent it.
* the object will be in the no identity state,
* ie. it will have just been created or clearidentity() was just called.
* <br>
* the object must copy the information out of key, not just store a
* reference to key.  after this call the expression
* getidentity().equals(key) must return true.
* <br>
* if the class of the object needs to change (e.g. to support a different
* format) then the object should create a new object, call its
* initparameter() with the parameters the original object was called with,
* set its identity and return a reference to it. the cache manager will
* discard the reference to the old object.
* <br>
* if an exception is thrown the object must be left in the no-identity
* state.
* <br> mt - single thread required - method must only be called be cache
* manager and the cache manager will guarantee only one thread can be
* calling it.
*
* @return an object reference if the object can take on the identity,
* null otherwise.
*
* @exception standardexception if forcreate is true and the object cannot
* be created.
*
* @see cachemanager#create
**/
public cacheable createidentity object key  object createparameter
throws standardexception
if  sanitymanager debug
sanitymanager assert
key instanceof long
sanitymanager assert
createparameter instanceof conglomerate
this conglomid    long  key
this conglom       conglomerate  createparameter
return this
/**
put the object into the no identity state.
<br> mt - single thread required - method must only be called be cache manager
and the cache manager will guarantee only one thread can be calling it.
*/
public void clearidentity
this conglomid   null
this conglom     null
/**
get the identity of this object.
<br> mt - thread safe.
*/
public object getidentity
return this conglomid
/**
returns true of the object is dirty. will only be called when the object is unkept.
<br> mt - thread safe
*/
public boolean isdirty
return false
/**
clean the object.
it is up to the object to ensure synchronization of the isdirty()
and clean() method calls.
<br>
if forremove is true then the
object is being removed due to an explict remove request, in this case
the cache manager will have called this method regardless of the
state of the isdirty()
<br>
if an exception is thrown the object must be left in the clean state.
<br> mt - thread safe - can be called at any time by the cache manager, it is the
responsibility of the object implementing cacheable to ensure any users of the
object do not conflict with the clean call.
@exception standardexception standard cloudscape error policy.
*/
public void clean boolean forremove  throws standardexception