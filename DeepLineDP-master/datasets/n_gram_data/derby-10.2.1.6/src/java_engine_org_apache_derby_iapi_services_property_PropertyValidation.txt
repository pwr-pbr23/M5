/*
derby - class org.apache.derby.iapi.services.property.propertyvalidation
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi services property
import org apache derby iapi reference attribute
import org apache derby iapi reference property
import org apache derby iapi reference sqlstate
import org apache derby iapi services property propertyutil
import org apache derby iapi error standardexception
import org apache derby iapi services daemon serviceable
import org apache derby iapi services property propertysetcallback
import org apache derby iapi store access transactioncontroller
import org apache derby iapi store access conglomerate transactionmanager
import java io serializable
import java util dictionary
import java util enumeration
import java util properties
import java util vector
public class propertyvalidation implements propertyfactory
private vector  notifyonset
/* constructors for this class: */
public propertyvalidation
public serializable dovalidateapplyandmap transactioncontroller tc
string key  serializable value
dictionary d  boolean dbonlyproperty
throws standardexception
serializable mappedvalue   null
if  notifyonset    null
synchronized  this
for  int i   0  i < notifyonset size     i
propertysetcallback psc    propertysetcallback  notifyonset elementat i
if   psc validate key  value  d
continue
// if this property should not be used then
// don't call apply. this depends on where
// the old value comes from
// set_in_jvm - property will not be used
// set_in_database - propery will be used
// set_in_application - will become set_in_database
// not_set - will become set_in_database
if   dbonlyproperty    key startswith
if  propertyutil whereset key  d     propertyutil set_in_jvm
continue
serviceable s
if   s   psc apply key value d      null
transactionmanager  tc  addpostcommitwork s
if  mappedvalue    null
mappedvalue   psc map key  value  d
return mappedvalue
/**
call the property set callbacks to map a proposed property value
to a value to save.
<p>
the caller must run this in a block synchronized on this
to serialize validations with changes to the set of
property callbacks
*/
public serializable domap string key
serializable value
dictionary set
throws standardexception
serializable mappedvalue   null
if  notifyonset    null
for  int i   0  i < notifyonset size      mappedvalue    null  i
propertysetcallback psc    propertysetcallback  notifyonset elementat i
mappedvalue   psc map key  value  set
if  mappedvalue    null
return value
else
return mappedvalue
public void validatesingleproperty string key
serializable value
dictionary set
throws standardexception
// resolve: log device cannot be changed on the fly right now
if  key equals attribute log_device
throw standardexception newexception
sqlstate rawstore_cannot_change_logdevice
if  notifyonset    null
for  int i   0  i < notifyonset size    i
propertysetcallback psc    propertysetcallback  notifyonset elementat i
psc validate key  value  set
public synchronized void addpropertysetnotification propertysetcallback who
if  notifyonset    null
notifyonset   new vector 1 1
notifyonset addelement who
public synchronized void verifypropertyset properties p properties ignore
throws standardexception
for  enumeration e   p propertynames    e hasmoreelements
string pn    string e nextelement
//
//ignore the ones we are told to ignore.
if  ignore getproperty pn     null  continue
serializable pv   p getproperty pn
validatesingleproperty pn pv p