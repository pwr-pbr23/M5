/*
derby - class org.apache.derby.impl.tools.ij.utilmain14
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl tools ij
import org apache derby iapi reference jdbc20translation
import org apache derby iapi reference jdbc30translation
import java util hashtable
import java sql connection
import java sql sqlexception
import java sql statement
import org apache derby iapi tools i18n localizedoutput
/**
this class is utilities specific to the two ij main's.
this factoring enables sharing the functionality for
single and dual connection ij runs.
@author jerry
*/
class utilmain14 extends utilmain
private static final string jdbc_notsupported
/**
* set up the test to run with 'numconnections' connections/users.
*
* @param numconnections	the number of connections/users to test.
*
*/
utilmain14 int numconnections  localizedoutput out
throws ijfatalexception
super numconnections  out   hashtable null
/**
* set up the test to run with 'numconnections' connections/users.
*
* @param numconnections	the number of connections/users to test.
* @param ignoreerrors		a list of errors to ignore.  if null,
*							all errors are printed out and nothing
*							is fatal.  if non-null, if an error is
*							hit and it is in this list, it is silently
*							ignore.  otherwise, an ijfatalexception is
*							thrown.  ignoreerrors is used for stress
*							tests.
*
*/
utilmain14 int numconnections  localizedoutput out  hashtable ignoreerrors
throws ijfatalexception
super numconnections  out  ignoreerrors
/**
* connections by default create resultset objects with holdability true. this method can be used
* to change the holdability of the connection by passing one of resultset.hold_cursors_over_commit
* or resultset.close_cursors_at_commit
*
* @param conn			the connection.
* @param holdtype	the new holdability for the connection object.
*
* @return	the connection object with holdability set to passed value.
*/
connection setholdability connection conn  int holdtype
throws sqlexception
conn setholdability holdtype
return conn
/**
jdbc 3.0
* retrieves the current holdability of resultset objects created using this
* connection object.
*
*
* @return  the holdability, one of resultset.hold_cursors_over_commit
* or resultset.close_cursors_at_commit
*
*/
int getholdability connection conn
throws sqlexception
return conn getholdability
/**
* create the right kind of statement (scrolling or not)
* off of the specified connection.
*
* @param conn			the connection.
* @param scrolltype	the scroll type of the cursor.
*
* @return	the statement.
*/
statement createstatement connection conn  int scrolltype  int holdtype
throws sqlexception
statement stmt
try
stmt   conn createstatement scrolltype  jdbc20translation concur_read_only  holdtype
catch sqlexception se
//since jcc doesn't yet support jdbc3.0 we have to go back to jdbc2.0
if  isjcc    se getmessage   equals jdbc_notsupported
stmt   conn createstatement scrolltype  jdbc20translation concur_read_only
else
throw se
catch abstractmethoderror ame
//because weblogic 4.5 doesn't yet implement jdbc 2.0 interfaces, need
//to go back to jdbc 1.x functionality
//the jcc obfuscated jar gets this error
if  isjcc
stmt   conn createstatement scrolltype  jdbc20translation concur_read_only
else
stmt   conn createstatement
return stmt