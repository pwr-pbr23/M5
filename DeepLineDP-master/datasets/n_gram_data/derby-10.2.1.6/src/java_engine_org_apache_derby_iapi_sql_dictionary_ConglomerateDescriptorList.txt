/*
derby - class org.apache.derby.iapi.sql.dictionary.conglomeratedescriptorlist
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi sql dictionary
import org apache derby iapi sql dictionary conglomeratedescriptor
import org apache derby iapi error standardexception
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi services monitor monitor
import org apache derby catalog uuid
import java util iterator
import java util arraylist
public class conglomeratedescriptorlist extends arraylist
/**
* get a conglomerate descriptor by its number
*
* @param conglomeratenumber	the number of the conglomerate we're looking for
*
* @return	the conglomeratedescriptor if found in this list,
*		null if not found.
*/
public conglomeratedescriptor getconglomeratedescriptor long conglomeratenumber
conglomeratedescriptor conglomeratedescriptor
conglomeratedescriptor	returnvalue   null
int size   size
for  int index   0  index < size  index
conglomeratedescriptor    conglomeratedescriptor  get index
if  conglomeratenumber    conglomeratedescriptor getconglomeratenumber
returnvalue   conglomeratedescriptor
break
return returnvalue
/**
* get an array of conglomerate descriptors with the given conglomerate
* number.  we get more than one descriptors if duplicate indexes share
* one conglomerate.
*
* @param conglomeratenumber	the number of the conglomerate
*
* @return	array of conglomeratedescriptors if found in this list,
*		size 0 array if not found.
*/
public conglomeratedescriptor getconglomeratedescriptors long conglomeratenumber
conglomeratedescriptor conglomeratedescriptor
int size   size    j   0
conglomeratedescriptor draft   new conglomeratedescriptor
for  int index   0  index < size  index
conglomeratedescriptor    conglomeratedescriptor  get index
if  conglomeratenumber    conglomeratedescriptor getconglomeratenumber
draft   conglomeratedescriptor
if  j    size
return draft
conglomeratedescriptor returnvalue   new conglomeratedescriptor
for  int i   0  i < j  i
returnvalue   draft
return returnvalue
/**
* get a conglomerate descriptor by its name
*
* @param conglomeratename	the name of the conglomerate we're looking for
*
* @return	the conglomeratedescriptor if found in this list,
*		null if not found.
*/
public conglomeratedescriptor getconglomeratedescriptor string conglomeratename
conglomeratedescriptor conglomeratedescriptor
conglomeratedescriptor	returnvalue   null
int size   size
for  int index   0  index < size  index
conglomeratedescriptor    conglomeratedescriptor  get index
if  conglomeratename equals conglomeratedescriptor getconglomeratename
returnvalue   conglomeratedescriptor
break
return returnvalue
/**
* get a conglomerate descriptor by its uuid string
*
* @param uuid	the uuid of the conglomerate we're looking for
*
* @return	the conglomeratedescriptor if found in this list,
*		null if not found.
* @exception   standardexception thrown on failure
*/
public conglomeratedescriptor getconglomeratedescriptor uuid uuid
throws standardexception
conglomeratedescriptor conglomeratedescriptor
conglomeratedescriptor	returnvalue   null
int size   size
for  int index   0  index < size  index
conglomeratedescriptor    conglomeratedescriptor  get index
if  uuid equals conglomeratedescriptor getuuid
returnvalue   conglomeratedescriptor
break
return returnvalue
/**
* get an array of conglomerate descriptors by a uuid string.  we get
* more than one descriptors if duplicate indexes share one conglomerate.
*
* @param uuid	the uuid of the conglomerate
*
* @return	array of conglomeratedescriptors if found in this list,
*		size 0 array if not found.
*/
public conglomeratedescriptor getconglomeratedescriptors uuid uuid
conglomeratedescriptor conglomeratedescriptor
int size   size    j   0
conglomeratedescriptor draft   new conglomeratedescriptor
for  int index   0  index < size  index
conglomeratedescriptor    conglomeratedescriptor  get index
if  uuid equals conglomeratedescriptor getuuid
draft   conglomeratedescriptor
if  j    size
return draft
conglomeratedescriptor returnvalue   new conglomeratedescriptor
for  int i   0  i < j  i
returnvalue   draft
return returnvalue
/**
* remove the specified conglomerate descriptor from the
* conglomerate descriptor list.  if the descriptor
* is not found, no errors are issued.
*
* @param tableid table uuid, ignored
* @param cgdesc the conglomerate
*
* @exception   standardexception thrown on failure
*/
public void dropconglomeratedescriptor uuid tableid  conglomeratedescriptor cgdesc
throws standardexception
for  iterator iterator   iterator    iterator hasnext
conglomeratedescriptor localcgdesc    conglomeratedescriptor  iterator next
if  localcgdesc getconglomeratenumber      cgdesc getconglomeratenumber
localcgdesc getconglomeratename   equals cgdesc getconglomeratename
localcgdesc getschemaid   equals cgdesc getschemaid
iterator remove
break
/**
* remove the specified conglomerate descriptor from the
* conglomerate descriptor list.  if the descriptor
* is not found, no errors are issued.
*
* @param conglomerateid table uuid, ignored
*
* @exception   standardexception thrown on failure
*/
public void dropconglomeratedescriptorbyuuid uuid conglomerateid
throws standardexception
for  iterator iterator   iterator    iterator hasnext
conglomeratedescriptor localcgdesc    conglomeratedescriptor  iterator next
if   conglomerateid equals  localcgdesc getuuid
iterator remove
break