/*
derby - class org.apache.derby.vti.defermodification
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby vti
import java sql sqlexception
/**
* this interface is implemented by a read/write vti class that wants to control when
* modifications to the vti are deferred, or to be notified that a it is to be modified.
* consider the following statement:<br>
* update new myvti(...)
*  set cost = cost + 10
*  where cost < 15
*<p>
* updating a column that is used in the where clause might or might not give the vti implementation trouble;
* the update might cause the same row to be selected more than once. this problem can be solved by building the
* complete list of rows to be updated and the new column values before updating any rows. the updates are applied
* after the list is built. this process is called "deferred update".
*<p>
* by default, updates on a vti are deferred when the vti resultset
* is scrollable (resultset.type_scroll_sensitive or type_scroll_insensitive), and one or more of the following is true.
*<ol>
*<li>one or more of the columns in the set clause is also used in the where
* clause and the vti resultset is sensitive. we do not defer updates
* when the resultset is type_scroll_insensitive because it is not necessary.
*<li>the where clause contains a subselect on a vti from the same class as the
* target vti. we do not look at the vti parameters, just the vti class name.
*</ol>
*<p>
* by default, deletes on a vti are deferred in a similar situation: when the vti resultset
* is scrollable (resultset.type_scroll_sensitive or type_scroll_insensitive), and
* the where clause contains a subselect on a vti from the same class as the
* target vti. we do not look at the vti parameters, just the vti class name.
*<p>
* by default, inserts into a vti are deferred when the same vti class is used as both
* the source and target. it does not depend on the scrollability of the
* vti resultset because inserts can be deferred without scrolling the resultset.
*<p>
* if these defaults are not appropriate then the class implementing the vti should also implement
* this interface (org.apache.derby.vti.defermodification).
*<p>
* (a read/write vti is implemented by a class that implements the java.sql.preparedstatement interface,
* often by extending the updatablevtitemplate interface. @see updatablevtitemplate).
*<p>
* update and delete statement deferral is implemented by scrolling the vti's resultset. therefore,
* updates and deletes on a vti are never deferred unless the vti's resultsets are scrollable, even
* if the defermodification interface methods return <b>true</b>.
* therefore for an update or delete to be deferred the vti getresultsettype() method must return
* resultset.type_scroll_sensitive or type_scroll_insensitive and the vti must produce scrollable
* java.sql.resultsets that implement the getrow() and absolute() methods. if your vti is implemented as
* an extension to updatablevtitemplate then you must override the getresultsetmethod:
* updatablevtitemplate.getresultsettype()
* throws an exception. if your vti's resultsets are implemented as extensions to vtitemplate then you must
* override the getrow() and absolute() methods: vtitemplate.getrow() and absolute() throw exceptions.
*<p>
* this interface is not used when the vti is referenced only in a subselect; it is only used when a
* vti appears as the target of an insert, update, or delete statement.
*/
public interface defermodification
public static final int insert_statement   1
public static final int update_statement   2
public static final int delete_statement   3
/**
* this method is called during preparation of an insert, update, or delete statement with this vti
* as the target. it indicates whether the statement should be deferred irregardless of the other clauses
* in the statement. if alwaysdefer returns <b>true</b> then the other methods in this interface
* are not called. (at least not for this statement type).
*
* @param statementtype one of insert_statement, update_statement, delete_statement.
*
* @return <b>true</b> if the statement type should always be deferred on this vti,
*         <b>false</b> other criteria (see below) should be examined to determine
*         whether to defer the modification.
*
* @exception sqlexception on an unexpected condition.
*/
public boolean alwaysdefer  int statementtype
throws sqlexception
/**
* this method is called during preparation of an update or delete statement on the virtual
* table if getresultsettype() returns resultset.type_scroll_sensitive or type_scroll_sensitive and
* alwaysdefer( statementtype) returns <b>false</b>.
* columnrequiresdefer is called once for each column that is being updated,
* or each column in a delete where clause until
* it returns <b>true</b> or until all the columns have been exhausted.
*
* @param statementtype update_statement or delete_statement.
* @param columnname the name of one of the columns being updated
* @param inwhereclause indicates whether the column also appears in the where clause
*
* @return <b>true</b> if the update must be deferred
*         <b>false</b> if this column does not require a deferred update
*
* @exception sqlexception a parameter is invalid or there is another unexpected failure.
*/
public boolean columnrequiresdefer  int statementtype
string columnname
boolean inwhereclause
throws sqlexception
/**
* this method is called during preparation of an insert, update, or delete statement that has this virtual
* table as its target and that has a sub-select. it is invoked once for each regular table in a sub-select,
* if it has not already been determined that the statement should be deferred or that the vti does not support
* deferral.
*
* @param statementtype the statement type: insert_statement, update_statement, or delete_statement.
* @param schemaname the schema of the table in the sub-select.
* @param tablename the name of the table in the sub-select.
*
* @return <b>true</b> if the modification must be deferred
*         <b>false</b> if this source table does not necessitate a deferred modification
*
* @exception sqlexception a parameter is invalid or there is another unexpected failure.
*/
public boolean subselectrequiresdefer  int statementtype
string schemaname
string tablename
throws sqlexception
/**
* this method is called during preparation of an insert, update, or delete statement that has this virtual
* table as its target and that has a sub-select. it is invoked once for each virtual table in the sub-select,
* if it has not already been determined that the statement should be deferred or that the vti does not support
* deferral.
*
* @param statementtype the statement type: insert_statement, update_statement, or delete_statement.
* @param vticlassname the name of the class implementing the vti in the sub-select.
*
* @return <b>true</b> if the modification must be deferred
*         <b>false</b> if this source table does not necessitate a deferred modification
*
* @exception sqlexception a parameter is invalid or there is another unexpected failure.
*/
public boolean subselectrequiresdefer  int statementtype
string vticlassname
throws sqlexception
/**
* this vti method is called by cloudscape when a vti modification (insert, update, or delete)
* is executed. it is called after the vti has been instantiated but before any rows are read,
* inserted, updated, or deleted.
*
* @param statementtype one of insert_statement, update_statement, or delete_statement
* @param deferred <b>true</b> if the modification will be deferred, <b>false</b> if not.
*
* @exception sqlexception thrown on an unexpected failure
*/
public void modificationnotify  int statementtype
boolean deferred
throws sqlexception