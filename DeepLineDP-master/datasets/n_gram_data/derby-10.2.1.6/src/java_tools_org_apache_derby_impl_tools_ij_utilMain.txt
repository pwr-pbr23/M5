/*
derby - class org.apache.derby.impl.tools.ij.utilmain
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl tools ij
import org apache derby iapi reference jdbc20translation
import org apache derby iapi reference jdbc30translation
import org apache derby tools jdbcdisplayutil
import org apache derby iapi tools i18n
import org apache derby iapi services info productversionholder
import org apache derby iapi services info productgenusnames
import org apache derby iapi error publicapi
import org apache derby iapi error standardexception
import java util stack
import java util hashtable
import java util properties
import java io inputstream
import java io fileinputstream
import java io bufferedinputstream
import java io filenotfoundexception
import java io stringreader
import java sql drivermanager
import java sql driver
import java sql connection
import java sql sqlexception
import java sql resultset
import java sql statement
import java sql preparedstatement
import java lang reflect
/**
this class is utilities specific to the two ij main's.
this factoring enables sharing the functionality for
single and dual connection ij runs.
@author jerry
*/
public class utilmain implements java security privilegedaction
private static final class conn_param     integer type
private static final object conn_arg     new integer jdbc30translation close_cursors_at_commit
private statementfinder commandgrabber
ucode_charstream charstream
ijtokenmanager ijtokmgr
ij ijparser
connectionenv connenv
private int currce
private final int		numconnections
private boolean fileinput
private boolean initialfileinput
private boolean mtuse
private boolean firstrun   true
private localizedoutput out   null
private properties connattributedefaults
private hashtable ignoreerrors
/**
* true if to display the error code when
* displaying a sqlexception.
*/
private final boolean showerrorcode
/**
* value of the system property ij.execptiontrace
*/
private final string ijexceptiontrace
protected boolean isjcc 	  the driver being used is jcc
/*
in the goodness of time, this could be an ij property
*/
public static final int bufferedfilesize   2048
/*
* command can be redirected, so we stack up command
* grabbers as needed.
*/
stack oldgrabbers   new stack
localizedresource langutil   localizedresource getinstance
/**
* set up the test to run with 'numconnections' connections/users.
*
* @param numconnections	the number of connections/users to test.
*/
utilmain int numconnections  localizedoutput out
throws ijfatalexception
this numconnections  out   hashtable null
/**
* set up the test to run with 'numconnections' connections/users.
*
* @param numconnections	the number of connections/users to test.
* @param ignoreerrors		a list of errors to ignore.  if null,
*							all errors are printed out and nothing
*							is fatal.  if non-null, if an error is
*							hit and it is in this list, it is silently
*							ignore.  otherwise, an ijfatalexception is
*							thrown.  ignoreerrors is used for stress
*							tests.
*/
public utilmain int numconnections  localizedoutput out  hashtable ignoreerrors
throws ijfatalexception
string framework_property   util getsystemproperty
if  framework_property    null
if  framework_property equals
framework_property equals
isjcc   true
/* init the parser; give it no input to start with.
* (1 parser for entire test.)
*/
charstream   new ucode_charstream
new stringreader     1  1
ijtokmgr   new ijtokenmanager charstream
ijparser   new ij ijtokmgr  this
this out   out
this ignoreerrors   ignoreerrors
showerrorcode
boolean valueof
util getsystemproperty
booleanvalue
ijexceptiontrace   util getsystemproperty
this numconnections   numconnections
/* 1 statementfinder and connectionenv per connection/user. */
commandgrabber   new statementfinder
connenv   new connectionenv
for  int ictr   0  ictr < numconnections  ictr
commandgrabber   new statementfinder langutil getnewinput system in
connenv   new connectionenv ictr   numconnections > 1    numconnections    1
/* start with connection/user 0 */
currce   0
fileinput   false
initialfileinput   false
firstrun   true
/**
* initialize the connections from the environment.
*
*/
public void initfromenvironment
ijparser initfromenvironment
for  int ictr   0  ictr < numconnections  ictr
try
connenv init out
catch  sqlexception s
jdbcdisplayutil showexception out  s      will continue past connect failure
catch  classnotfoundexception c
jdbcdisplayutil showexception out  c      will continue past driver failure
catch  instantiationexception i
jdbcdisplayutil showexception out  i      will continue past driver failure
catch  illegalaccessexception ia
jdbcdisplayutil showexception out  ia      will continue past driver failure
/**
* run ij over the specified input, sending output to the
* specified output. any prior input and output will be lost.
*
* @param in source for input to ij
* @param out sink for output from ij
* @param connattributedefaults  connection attributes from -ca ij arg
*/
public void go localizedinput in  localizedoutput out
properties connattributedefaults  throws ijfatalexception
this out   out
this connattributedefaults   connattributedefaults
ijparser setconnection connenv   numconnections > 1
fileinput   initialfileinput     in isstandardinput
for  int ictr   0  ictr < commandgrabber length  ictr
commandgrabber reinit in
if  firstrun
// figure out which version this is
inputstream versionstream    inputstream  java security accesscontroller doprivileged this
// figure out which version this is
productversionholder ijversion
productversionholder getproductversionholderfrommyenv versionstream
string version
if  ijversion    null
version       ijversion getmajorversion
ijversion getminorversion
else
version
out println langutil gettextmessage    version
for  int i connenv length 1 i> 0 i         print out any initial warnings
connection c   connenv getconnection
if  c  null
jdbcdisplayutil showwarnings out c
firstrun   false
//check if the property is set to not show select count and set the static variable
//accordingly.
boolean shownocountforselect   boolean getboolean
jdbcdisplayutil showselectcount    shownocountforselect
//check if the property is set to not show initial connections and accordingly set the
//static variable.
boolean shownoconnectionsatstart   boolean getboolean
if    shownoconnectionsatstart
try
ijresult result   ijparser showconnectionsmethod true
displayresult out result connenv getconnection
catch  sqlexception ex
handlesqlexception out ex
this out   out
runscriptguts
cleanupgo in
/**
* support to run a script. performs minimal setup
* to set the passed in connection into the existing
* ij setup, connectionenv.
* @param conn
* @param in
*/
public int goscript connection conn
localizedinput in
jdbcdisplayutil showselectcount   false
connenv addsession conn   string  null
fileinput   initialfileinput    in isstandardinput
commandgrabber reinit in
return runscriptguts
/**
* run the guts of the script. split out to allow
* calling from the full ij and the minimal goscript.
* @return the number of errors seen in the script.
*
*/
private int runscriptguts
int scripterrorcount   0
boolean done   false
string command   null
while   ijparser exit     done
try
ijparser setconnection connenv   numconnections > 1
catch throwable t
//do nothing
connenv doprompt true  out
try
command   null
out flush
command   commandgrabber nextstatement
// if there is no next statement,
// pop back to the top saved grabber.
while  command    null      oldgrabbers empty
// close the old input file if not system.in
if  fileinput  commandgrabber close
commandgrabber    statementfinder oldgrabbers pop
if  oldgrabbers empty
fileinput   initialfileinput
command   commandgrabber nextstatement
// if there are no grabbers left,
// we are done.
if  command    null    oldgrabbers empty
done   true
else
boolean	elapsedtimeon   ijparser getelapsedtimestate
long	begintime   0
long	endtime
if  fileinput
out println command
out flush
charstream reinit new stringreader command   1  1
ijtokmgr reinit charstream
ijparser reinit ijtokmgr
if  elapsedtimeon
begintime   system currenttimemillis
ijresult result   ijparser ijstatement
displayresult out result connenv getconnection
// if something went wrong, an sqlexception or ijexception was thrown.
// we can keep going to the next statement on those (see catches below).
// ijparseexception means we try the sql parser.
/* print the elapsed time if appropriate */
if  elapsedtimeon
endtime   system currenttimemillis
out println langutil gettextmessage
langutil getnumberasstring endtime   begintime
// would like when it completes a statement
// to see if there is stuff after the ;
// and before the <eol> that we will ignore
// (with a warning to that effect)
catch  parseexception e
if  command    null
scripterrorcount    docatch command  ? 0   1
catch  tokenmgrerror e
if  command    null
scripterrorcount    docatch command  ? 0   1
catch  sqlexception e
scripterrorcount
// sql exception occurred in ij's actions; print and continue
// unless it is considered fatal.
handlesqlexception out e
catch  ijexception e
scripterrorcount
// exception occurred in ij's actions; print and continue
out println langutil gettextmessage   e getmessage
dotrace e
catch  throwable e
scripterrorcount
out println langutil gettextmessage   e tostring
dotrace e
/* go to the next connection/user, if there is one */
currce     currce % connenv length
return scripterrorcount
/**
* perform cleanup after a script has been run.
* close the input streams if required and shutdown
* derby on an exit.
* @param in
*/
private void cleanupgo localizedinput in
// we need to close all sessions when done; otherwise we have
// a problem when a single vm runs successive ij threads
try
for  int i   0  i < connenv length  i
connenv removeallsessions
catch  sqlexception se
handlesqlexception out se
// similarly must close input files
for  int i   0  i < numconnections  i
try
in close
catch  exception e
out println langutil gettextmessage
e tostring
/*
if an exit was requested, then we will be shutting down.
*/
if  ijparser exit     initialfileinput     mtuse
driver d   null
try
d   drivermanager getdriver
catch  throwable e
d   null
if  d  null       do we have a driver running? shutdown on exit
try
drivermanager getconnection
catch  sqlexception e
// ignore the errors, they are expected.
private void displayresult localizedoutput out  ijresult result  connection conn  throws sqlexception
// display the result, if appropriate.
if  result  null
if  result isconnection
if  result haswarnings
jdbcdisplayutil showwarnings out result getsqlwarnings
result clearsqlwarnings
else if  result isstatement
statement s   result getstatement
try
jdbcdisplayutil displayresults out s connenv getconnection
catch  sqlexception se
result closestatement
throw se
result closestatement
else if  result isnextrowofresultset
resultset r   result getnextrowofresultset
jdbcdisplayutil displaycurrentrow out r connenv getconnection
else if  result isvector
util displayvector out result getvector
if  result haswarnings
jdbcdisplayutil showwarnings out result getsqlwarnings
result clearsqlwarnings
else if  result ismulti
try
util displaymulti out  preparedstatement result getstatement   result getresultset   connenv getconnection
catch  sqlexception se
result closestatement
throw se
result closestatement       done with the statement now
if  result haswarnings
jdbcdisplayutil showwarnings out result getsqlwarnings
result clearsqlwarnings
else if  result isresultset
resultset rs   result getresultset
try
jdbcdisplayutil displayresults out rs connenv getconnection    result getcolumndisplaylist    result getcolumnwidthlist
catch  sqlexception se
result closestatement
throw se
result closestatement
else if  result isexception
jdbcdisplayutil showexception out result getexception
/**
* catch processing on failed commands. this really ought to
* be in ij somehow, but it was easier to catch in main.
*/
private boolean docatch string command
// this retries the failed statement
// as a jsql statement; it uses the
// ijparser since that maintains our
// connection and state.
try
boolean	elapsedtimeon   ijparser getelapsedtimestate
long	begintime   0
long	endtime
if  elapsedtimeon
begintime   system currenttimemillis
ijresult result   ijparser executeimmediate command
displayresult out result connenv getconnection
/* print the elapsed time if appropriate */
if  elapsedtimeon
endtime   system currenttimemillis
out println langutil gettextmessage
langutil getnumberasstring endtime   begintime
return true
catch  sqlexception e
// sql exception occurred in ij's actions; print and continue
// unless it is considered fatal.
handlesqlexception out e
catch  ijexception i
out println langutil gettextmessage    i getmessage
dotrace i
catch  ijtokenexception ie
out println langutil gettextmessage    ie getmessage
dotrace ie
catch  throwable t
out println langutil gettextmessage    t tostring
dotrace t
return false
/**
* this routine displays sql exceptions and decides whether they
* are fatal or not, based on the ignoreerrors field. if they
* are fatal, an ijfatalexception is thrown.
* lifted from ij/util.java:showsqlexception
*/
private void handlesqlexception localizedoutput out  sqlexception e
throws ijfatalexception
string errorcode
string sqlstate   null
sqlexception fatalexception   null
if  showerrorcode
errorcode   langutil gettextmessage
langutil getnumberasstring e geterrorcode
else
errorcode
for    e  null  e e getnextexception
/*
** if we are to throw errors, then throw the exceptions
** that aren't in the ignoreerrors list.  if
** the ignoreerrors list is null we don't throw
** any errors.
*/
if  ignoreerrors    null
sqlstate   e getsqlstate
if   sqlstate    null
ignoreerrors get sqlstate     null
continue
else
fatalexception   e
string st1   jdbcdisplayutil mapnull e getsqlstate   langutil gettextmessage
string st2   jdbcdisplayutil mapnull e getmessage   langutil gettextmessage
out println langutil gettextmessage     st1  st2  errorcode
dotrace e
if  fatalexception    null
throw new ijfatalexception fatalexception
/**
* stack trace dumper
*/
private void dotrace throwable t
if  ijexceptiontrace    null
t printstacktrace out
out flush
void newinput string filename
fileinputstream newfile   null
try
newfile   new fileinputstream filename
catch  filenotfoundexception e
throw ijexception filenotfound
if  newfile    null  return
// if the file was opened, move to use it for input.
oldgrabbers push commandgrabber
commandgrabber
new statementfinder langutil getnewinput new bufferedinputstream newfile  bufferedfilesize
fileinput   true
void newresourceinput string resourcename
inputstream is   util getresourceasstream resourcename
if  is  null  throw ijexception resourcenotfound
oldgrabbers push commandgrabber
commandgrabber
new statementfinder langutil getnewencodedinput new bufferedinputstream is  bufferedfilesize
fileinput   true
/**
* remind: eventually this might be part of statementfinder,
* used at each carriage return to show that it is still "live"
* when it is reading multi-line input.
*/
static void doprompt boolean newstatement  localizedoutput out  string tag
if  newstatement
out print    tag  null?  tag
else
out print
out flush
void setmtuse boolean b
mtuse   b
// jdbc 2.0 support
/**
* connections by default create resultset objects with holdability true. this method can be used
* to change the holdability of the connection by passing one of resultset.hold_cursors_over_commit
* or resultset.close_cursors_at_commit. we implement this using reflection in jdk13 and lower
*
* @param conn			the connection.
* @param holdtype	the new holdability for the connection object.
*
* @return	the connection object with holdability set to passed value.
*/
connection setholdability connection conn  int holdtype
throws sqlexception
//prior to db2 compatibility work, the default holdability for connections was close cursors over commit and all the tests
//were written based on that assumption
//later, as part of db2 compatibility, we changed the default holdability for connection to hold cursors over commit.
//but in order for the existing tests to work fine, the tests needed a way to set the holdability to close cursors for connections
//since there is no direct jdbc api in jdk13 and lower to do that, we are using reflection to set the holdability to close cursors
try     for jdks prior to jdk14  need to use reflection to set holdability to false
method sh   conn getclass   getmethod    conn_param
sh invoke conn  conn_arg
catch  exception e
throw publicapi wrapstandardexception  standardexception plainwrapexception  e
return conn
/**
* retrieves the current holdability of resultset objects created using this
* connection object. we implement this using reflection in jdk13 and lower
*
* @return  the holdability, one of resultset.hold_cursors_over_commit
* or resultset.close_cursors_at_commit
*
*/
int getholdability connection conn
throws sqlexception
//this method is used to make sure we are not trying to create a statement with holdability different than the connection holdability
//this is because jdk13 and lower does not have support for that.
//the holdability of connection and statement can differ if connection holdability is set to close cursor on commit using reflection
//and statement is getting created with holdability true
//another instance of holdability of connection and statement not being same is when connection holdability is hold cursor
//over commit and statement is being created with holdability false
int defaultholdability   jdbc30translation hold_cursors_over_commit
try
method sh   conn getclass   getmethod    null
defaultholdability     integer sh invoke conn  null   intvalue
catch  exception e
throw publicapi wrapstandardexception  standardexception plainwrapexception  e
return defaultholdability
/**
* create the right kind of statement (scrolling or not)
* off of the specified connection.
*
* @param conn			the connection.
* @param scrolltype	the scroll type of the cursor.
*
* @return	the statement.
*/
statement createstatement connection conn  int scrolltype  int holdtype
throws sqlexception
//following if is used to make sure we are not trying to create a statement with holdability different that the connection
//holdability. this is because jdk13 and lower does not have support for that.
//the holdability of connection and statement can differ if connection holdability is set to close cursor on commit using reflection
//and statement is getting created with holdability true
//another instance of holdability of connection and statement not being same is when connection holdability is hold cursor
//over commit and statement is being created with holdability false
if  holdtype    getholdability conn
throw ijexception holdcursorsnotsupported
statement stmt
try
stmt   conn createstatement scrolltype  jdbc20translation concur_read_only
catch abstractmethoderror ame
//because weblogic 4.5 doesn't yet implement jdbc 2.0 interfaces, need to go back
//to jdbc 1.x functionality
stmt   conn createstatement
return stmt
/**
* position on the specified row of the specified resultset.
*
* @param rs	the specified resultset.
* @param row	the row # to move to.
*				(negative means from the end of the result set.)
*
* @return	null.
*
* @exception	sqlexception thrown on error.
*				(absolute() not supported pre-jdbc2.0)
*/
ijresult absolute resultset rs  int row
throws sqlexception
boolean forwardonly    rs getstatement   getresultsettype      jdbc20translation type_forward_only
if  forwardonly
throw ijexception forwardonlycursor
// 0 is an *valid* value for row
return new ijrowresult rs  rs absolute row
/**
* move the cursor position by the specified amount.
*
* @param rs	the specified resultset.
* @param row	the # of rows to move.
*				(negative means toward the beginning of the result set.)
*
* @return	null.
*
* @exception	sqlexception thrown on error.
*				(relative() not supported pre-jdbc2.0)
*/
ijresult relative resultset rs  int row
throws sqlexception
boolean forwardonly    rs getstatement   getresultsettype      jdbc20translation type_forward_only
// relative is only allowed on scroll cursors
if  forwardonly
throw ijexception forwardonlycursor
return new ijrowresult rs  rs relative row
/**
* position before the first row of the specified resultset
* and return null to the user.
*
* @param rs	the specified resultset.
*
* @return	null.
*
* @exception	sqlexception thrown on error.
*				(beforefirst() not supported pre-jdbc2.0)
*/
ijresult beforefirst resultset rs
throws sqlexception
boolean forwardonly    rs getstatement   getresultsettype      jdbc20translation type_forward_only
// before first is only allowed on scroll cursors
if  forwardonly
throw ijexception forwardonlycursor
rs beforefirst
return new ijrowresult rs  false
/**
* position on the first row of the specified resultset
* and return that row to the user.
*
* @param rs	the specified resultset.
*
* @return	the first row of the resultset.
*
* @exception	sqlexception thrown on error.
*				(first() not supported pre-jdbc2.0)
*/
ijresult first resultset rs
throws sqlexception
boolean forwardonly    rs getstatement   getresultsettype      jdbc20translation type_forward_only
// first is only allowed on scroll cursors
if  forwardonly
throw ijexception forwardonlycursor
return new ijrowresult rs  rs first
/**
* position after the last row of the specified resultset
* and return null to the user.
*
* @param rs	the specified resultset.
*
* @return	null.
*
* @exception	sqlexception thrown on error.
*				(afterlast() not supported pre-jdbc2.0)
*/
ijresult afterlast resultset rs
throws sqlexception
boolean forwardonly
try
forwardonly    rs getstatement   getresultsettype      jdbc20translation type_forward_only
catch  abstractmethoderror ame
//because weblogic 4.5 doesn't yet implement jdbc 2.0 interfaces, need to go back
//to jdbc 1.x functionality
forwardonly   true
// after last is only allowed on scroll cursors
if  forwardonly
throw ijexception forwardonlycursor
rs afterlast
return new ijrowresult rs  false
/**
* position on the last row of the specified resultset
* and return that row to the user.
*
* @param rs	the specified resultset.
*
* @return	the last row of the resultset.
*
* @exception	sqlexception thrown on error.
*				(last() not supported pre-jdbc2.0)
*/
ijresult last resultset rs
throws sqlexception
boolean forwardonly    rs getstatement   getresultsettype      jdbc20translation type_forward_only
// last is only allowed on scroll cursors
if  forwardonly
throw ijexception forwardonlycursor
return new ijrowresult rs  rs last
/**
* position on the previous row of the specified resultset
* and return that row to the user.
*
* @param rs	the specified resultset.
*
* @return	the previous row of the resultset.
*
* @exception	sqlexception thrown on error.
*				(previous() not supported pre-jdbc2.0)
*/
ijresult previous resultset rs
throws sqlexception
boolean forwardonly    rs getstatement   getresultsettype      jdbc20translation type_forward_only
// first is only allowed on scroll cursors
if  forwardonly
throw ijexception forwardonlycursor
return new ijrowresult rs  rs previous
/**
* get the current row number
*
* @param rs	the specified resultset.
*
* @return	the current row number
*
* @exception	sqlexception thrown on error.
*				(getrow() not supported pre-jdbc2.0)
*/
int getcurrentrownumber resultset rs
throws sqlexception
boolean forwardonly    rs getstatement   getresultsettype      jdbc20translation type_forward_only
// getcurrentrow is only allowed on scroll cursors
if  forwardonly
throw ijexception forwardonlycursor
return rs getrow
properties getconnattributedefaults
return connattributedefaults
public final object run
return  getclass   getresourceasstream productgenusnames tools_info