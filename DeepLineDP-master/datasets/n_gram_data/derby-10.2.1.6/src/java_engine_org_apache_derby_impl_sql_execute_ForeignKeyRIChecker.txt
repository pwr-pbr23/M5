/*
derby - class org.apache.derby.impl.sql.execute.foreignkeyrichecker
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl sql execute
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi error standardexception
import org apache derby iapi sql statementutil
import org apache derby iapi sql execute execrow
import org apache derby iapi sql execute execindexrow
import org apache derby iapi reference sqlstate
import org apache derby iapi store access scancontroller
import org apache derby iapi store access transactioncontroller
/**
* a referential integrity checker for a foreign
* key constraint.  it makes sure the foreign key is
* intact.  this is used for a change to a foreign
* key column.  see referencedkeyrichecker for the code
* that validates changes to referenced keys.
*/
public class foreignkeyrichecker extends genericrichecker
/**
* @param tc		the xact controller
* @param fkinfo	the foreign key information
*
* @exception standardexception		thrown on failure
*/
foreignkeyrichecker transactioncontroller tc  fkinfo fkinfo
throws standardexception
super tc  fkinfo
if  sanitymanager debug
if  fkinfo type    fkinfo foreign_key
sanitymanager throwassert   fkinfo type
/**
* check that the row either has a null column(s), or
* corresponds to a row in the referenced key.
* <p>
* if the referenced key is found, then it is locked
* when this method returns.  the lock is held until
* the next call to docheck() or close().
*
* @param row	the row to check
*
* @exception standardexception on unexped error, or
*		on a foreign key violation
*/
void docheck execrow row  boolean restrictcheckonly  throws standardexception
if restrictcheckonly    restrict rule checks are not valid here
return
/*
** if any of the columns are null, then the
** check always succeeds.
*/
if  isanyfieldnull row
return
/*
** otherwise, we had better find this row in the
** referenced key
*/
scancontroller scan   getscancontroller fkinfo refconglomnumber  refscoci  refdcoci  row
if   scan next
close
standardexception se   standardexception newexception sqlstate lang_fk_violation  fkinfo fkconstraintnames
fkinfo tablename
statementutil typename fkinfo stmttype
rowutil tostring row  fkinfo colarray
throw se
/*
** if we found the row, we are currently positioned on
** the row when we leave this method.  so we hold the
** lock on the referenced key, which is very important.
*/
/**
* get the isolation level for the scan for
* the ri check.
*
* note: the level will eventually be instantaneous
* locking once the implemenation changes.
*
* @return the isolation level for the scan for
* the ri check.
*/
int getricheckisolationlevel
return transactioncontroller isolation_read_committed