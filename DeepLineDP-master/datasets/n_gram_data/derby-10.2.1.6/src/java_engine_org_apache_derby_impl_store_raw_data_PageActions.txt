/*
derby - class org.apache.derby.impl.store.raw.data.pageactions
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl store raw data
import org apache derby iapi services io formatablebitset
import org apache derby iapi services io dynamicbytearrayoutputstream
import org apache derby iapi error standardexception
import org apache derby iapi store access conglomerate logicalundo
import org apache derby iapi store raw recordhandle
import org apache derby iapi store raw xact rawtransaction
import org apache derby iapi types datavaluedescriptor
public interface pageactions
/**
* set the delete status of the record at the given slot.
* <p>
* subclass that implements this method has to call
* basepage.setdeletestatus to update the delete status on the in-memory
* slot table.
* <p>
* <br> mt - latched, page is latched when this methods is called.
* @param t				    the transaction
* @param page				the target page
* @param slot				the slot number of the record
* @param recordid			the recordid of the record
* @param delete			set the delete status to this value
* @param undo				logical undo logic if necessary
*
* @exception standardexception	standard cloudscape error policy
* @see org.apache.derby.iapi.store.raw.page#deleteatslot
**/
public void actiondelete
rawtransaction  t
basepage        page
int             slot
int             recordid
boolean         delete
logicalundo     undo
throws standardexception
/**
* update record at the given slot with this row.
* <p>
* <br> mt - latched, page is latched when this methods is called.
*
* @param t         	    the transaction
* @param page			    the updated page
* @param slot			    the slot number of the record
* @param recordid		    the recordid of the record
* @param row			    the new storable row
* @param validcolumns	    the columns that needs to be updated
* @param realstartcolumn	the first column that is updated
* @param logbuffer		    where to prepare the log record
* @param realspaceonpage	??
* @param headrowhandle	the record handle of the head row
*
* @return the next column to update in the row or,
*         -1 if the update has been completed.
*
* @exception standardexception	standard cloudscape error policy
*
* @see org.apache.derby.iapi.store.raw.page#updateatslot
**/
public int actionupdate
rawtransaction                  t
basepage                        page
int                             slot
int                             recordid
object                        row
formatablebitset                validcolumns
int                             realstartcolumn
dynamicbytearrayoutputstream    logbuffer
int                             realspaceonpage
recordhandle                    headrowhandle
throws standardexception
/**
* purge the record at the given slot.
* <p>
* subclass that implements this method has to remove the slot from the
* base page in-memory slot table (removeandshiftdown).
* <p>
* <br> mt - latched, page is latched when this methods is called.
*
* @param t				the transaction
* @param slot			the starting slot number of the record
* @param num_rows		how many rows to purge
* @param recordids		the recordids of the record (an array of num_rows)
*
* @exception standardexception	standard cloudscape error policy
*
* @see org.apache.derby.iapi.store.raw.page#purgeatslot
**/
public void actionpurge
rawtransaction  t
basepage        page
int             slot
int             num_rows
int           recordids
boolean         logdata
throws standardexception
/**
* update a field of the record at the given slot with this value.
* <p>
*
* <br> mt - latched, page is latched when this methods is called.
*
* @param t         	the transaction
* @param slot			the slot number of the record
* @param recordid		the recordid of the record
* @param fieldid		the fieldid of the value
* @param newvalue      the new value for the field
* @param undo          if logical undo may be necessary, a function
*                      pointer to the access code where the logical undo
*                      logic resides.   null if logical undo is not
*                      necessary.
*
* @exception standardexception	standard cloudscape error policy
*
* @see org.apache.derby.iapi.store.raw.page#updatefieldatslot
*
**/
public void actionupdatefield
rawtransaction          t
basepage                page
int                     slot
int                     recordid
int                     fieldid
object     newvalue
logicalundo             undo
throws standardexception
/**
* insert record at the given slot with this recordid.
* <p>
*
* <br> mt - latched, page is latched when this methods is called.
*
* @param t             	the transaction
* @param slot			    the slot number of the record
* @param recordid		    the recordid of the record
* @param row			    the storable row
* @param undo              if logical undo may be necessary, a function
*                          pointer to the access code where the logical
*                          undo logic resides.   null if logical undo is
*                          not necessary.
* @param insertflag		see page value for insertflag
*
* @exception standardexception	standard cloudscape error policy
*
* @see org.apache.derby.iapi.store.raw.page#insertatslot
**/
public int actioninsert
rawtransaction          t
basepage                page
int                     slot
int                     recordid
object                row
formatablebitset                 validcolumns
logicalundo             undo
byte                    insertflag
int                     startcolumn
boolean                 islongcolumn
int                     realstartcolumn
dynamicbytearrayoutputstream  logbuffer
int                     realspaceonpage
int                     overflowthreshold
throws standardexception
/**
* copy num_rows from srcpage into deestpage.
* <p>
* longer descrption of routine.
* <p>
* @param t             	the transaction
* @param destpage			the destination page
* @param srcpage			the source page
* @param destslot			starting slot # of destination page to copy to
* @param numrows			the number of rows to be copied
* @param srcslot			starting slot number of source page to copy from
* @param recordids		    an array of record ids to use in the
*                          destination page
*
* @exception standardexception standard cloudscape policy.
**/
public void actioncopyrows
rawtransaction  t
basepage        destpage
basepage        srcpage
int             destslot
int             numrows
int             srcslot
int           recordids
throws standardexception
/**
* invalidate the page due to deallocation.
* short one line description of routine.
* <p>
* invalidate the page due to deallocation - this is the action on the page
* that is being deallocated as opposed to the action on the allocation
* page.
* <p>
*
* @param t             	the transaction
* @param page				that page to be invalidated
*
* @exception standardexception standard cloudscape policy.
**/
public void actioninvalidatepage
rawtransaction  t
basepage        page
throws standardexception
/**
* initialize the page due to allocation.
* <p>
* initialize the page due to allocation - this page could be brand new or
* it could be being re-allocated.
* <p>
*
* @param t             	the transaction
* @param page				that page to be initialized
* @param initflag			flags set to values in basepage.init_page_*
*                          which indicates how the new page is to be
*                          initialized.
* @param pageformatid		the format id of the page being initialized.
*
* @exception standardexception standard cloudscape policy.
**/
public void actioninitpage
rawtransaction  t
basepage        page
int             initflag
int             pageformatid
long            pageoffset
throws standardexception
/**
* shrink the reserved space to the new value.
* <p>
* shrink the reserved space to the new value.  this action is not undoable.
* <p>
* @param t             	the transaction
* @param page				that page to be initialized
* @param slot				the slot number of the record
* @param recordid			the recordid of the record
* @param newvalue			the new reserved space value
*
* @exception standardexception unexpected exception from the implementation
*
**/
public void actionshrinkreservedspace
rawtransaction t
basepage       page
int            slot
int            recordid
int            newvalue
int            oldvalue
throws standardexception