/*
derby - class org.apache.derby.impl.services.uuid.basicuuidfactory
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl services uuid
import org apache derby iapi services monitor monitor
import org apache derby catalog uuid
import org apache derby iapi services uuid uuidfactory
/**
a hack implementation of something similar to a dce uuid
generator.  generates unique 128-bit numbers based on the
current machine's internet address, the current time, and
a sequence number.  this implementation should be made to
conform to the dce specification. ("dec/hp, network computing
architecture, remote procedure call runtime extensions
specification, version osf tx1.0.11," steven miller, july
23, 1992.  this is part of the osf dce documentation.
chapter 10 describes the uuid generation algorithm.)
<p>
some known deficiencies:
<ul>
<li> rather than using the 48-bit hardware network address,
it uses the 32-bit ip address. ip addresses are not
guaranteed to be unique.
<li> there is no provision for generating a suitably unique
number if no ip address is available.
<li> two processes running on this machine which start their
respective uuid services within a millisecond of one another
may generate duplicate uuids.
</ul>
<p>
however, the intention is that uuids generated from this class
will be unique with respect to uuids generated by other dce
uuid generators.
**/
public final class basicuuidfactory
implements uuidfactory
/*
** fields of basicuuidfactory.
*/
private long majorid      48 bits only
private long timemillis
public basicuuidfactory
object env   monitor getmonitor   getenvironment
if  env    null
string s   env tostring
if  s    null
env   s
majorid     long  env hashcode
else
majorid   runtime getruntime   freememory
majorid    0x0000ffffffffffffl
resetcounters
//
//	constants and fields for computing the sequence number. we started out with monotonically
//	increasing sequence numbers but realized that this causes collisions at the
//	ends of btrees built on uuid columns. so now we have a random number
//	generator. we generate these numbers using a technique from knuth
//	"seminumerical algorithms," section 3.2 (generating uniform random numbers).
//	the formula is:
//
//		next = ( (multiplier * current) + step ) % modulus
//
//	here
//
//		modulus			=	int size.
//		multiplier		=	fairly close to the square root of modulus to force the
//							sequence number to jump around. satisifies the rule that
//							(multiplier-1) is divisible by 4 and by all the primes which
//							divide modulus.
//		step			=	a large number that keeps the sequence number jumping around.
//							must be relatively prime to modulus.
//		initial_value	=	a number guaranteeing that the first couple sequence numbers
//							won't be monotonically increasing.
//
//	the sequence numbers should jump around and cycle through all numbers which fit in an int.
private	static	final	long	modulus			 	  1l << 32
private	static	final	long	multiplier		 	    1l << 14     1
private	static	final	long	step			 	    1l << 27     1
private	static	final	long	initial_value	 	  2551218188l
private			long	currentvalue
/*
** methods of uuid
*/
/**
generate a new uuid.
@see uuidfactory#createuuid
**/
public synchronized uuid createuuid
long cv   currentvalue       multiplier   currentvalue     step   % modulus
if   cv    initial_value     bumpmajor
int sequence    int  cv
return new basicuuid majorid  timemillis  sequence
/**
recreate a uuid previously generated uuid value.
@see uuidfactory#recreateuuid
**/
public uuid recreateuuid string uuidstring
return new basicuuid uuidstring
/**
@see uuidfactory#recreateuuid
**/
public uuid recreateuuid byte b
return new basicuuid b
private void bumpmajor
// 48 bits only
majorid    majorid   1l    0x0000ffffffffffffl
if  majorid    0l
resetcounters
private void resetcounters
timemillis   system currenttimemillis
currentvalue   initial_value