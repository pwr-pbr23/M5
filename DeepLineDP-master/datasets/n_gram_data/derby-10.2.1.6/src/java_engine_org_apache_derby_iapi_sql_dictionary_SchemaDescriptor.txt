/*
derby - class org.apache.derby.iapi.sql.dictionary.schemadescriptor
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi sql dictionary
import org apache derby iapi sql depend provider
import org apache derby catalog dependablefinder
import org apache derby iapi services io storedformatids
import org apache derby iapi reference property
import org apache derby catalog uuid
import org apache derby catalog dependable
/**
* this class represents a schema descriptor
*
* @version 0.1
* @author jeff lichtman
*/
public final class schemadescriptor extends tupledescriptor
implements uniquetupledescriptor  provider
/*
** when we boot, we put the system tables in
** in 'sys', owned by user dba.
** '92 talks about two system schemas:
**
**		information schema: literal name is
**		sys.  this schema contains
**		a series of well defined views that reference
**		actual base tables from the definition schema.
**
**		definition schema:  literal name is
**		definition_schema.  this schema contains
** 		system tables that can be in any shape or
**		form.
**
** sys is owned by sa_user_name (or dba).
*/
/**
* std_system_schema_name is the name of the system schema in databases that
* use ansi standard identifier casing. in lsa and in cloudscape target
* databases the name will use the same case as the source database
* identifiers.
*
* see org.apache.derby.impl.sql.conn.genericlanguageconnectioncontext#getsystemschemaname
*/
public static final	string	std_system_schema_name
public static final	string	ibm_system_schema_name
/*
* names of system schemas.
* the following schemas exist in a standard empty db2 database.  for
* now creating them in the cloudscape database but not actually putting
* any objects in them.  users should not be able to create any objects
* in these schemas.
**/
public static final	string	ibm_system_cat_schema_name
public static final	string	ibm_system_fun_schema_name
public static final	string	ibm_system_proc_schema_name
public static final	string	ibm_system_stat_schema_name
public static final	string	ibm_system_nullid_schema_name
/**
* this schema is used for jar handling procedures.
**/
public static final	string	std_sqlj_schema_name
/**
* this schema is for cloudscape specific system diagnostic procedures and
* functions which are not available in db2.
**/
public static final	string	std_system_diag_schema_name
/**
* this schema is for cloudscape specific system diagnostic procedures and
* functions which are not available in db2.
**/
public static final	string	std_system_util_schema_name
/**
* std_default_schema_name is the name of the default schema in databases
* that use ansi standard identifier casing. in lsa and in cloudscape
* target databases the name will use the same case as the source database
* identifiers.
*
* see org.apache.derby.impl.sql.conn.genericlanguageconnectioncontext#getdefaultschemaname
*/
public	static	final	string	std_default_schema_name   property default_user_name
/**
* uuid's used as key's in the sysschema catalog for the system schema's
**/
public static final string syscat_schema_uuid
public static final string sysfun_schema_uuid
public static final string sysproc_schema_uuid
public static final string sysstat_schema_uuid
public static final string syscs_diag_schema_uuid
public static final string syscs_util_schema_uuid
public static final string nullid_schema_uuid
public static final string sqlj_schema_uuid
public static final	string system_schema_uuid
public static final	string sysibm_schema_uuid
public static final	string default_schema_uuid
public	static	final	string	std_declared_global_temporary_tables_schema_name
public	static	final	string	default_user_name   property default_user_name
public	static	final	string	sa_user_name
/** the public interface for this system:
<ol>
<li>public string getschemaname();
<li>public string getauthorizationid();
<li>public void	setuuid(uuid uuid);
<li>public boolean issystemschema();
</ol>
*/
//// implementation
private final string			name
private uuid			oid
private final string			aid
private final boolean issystem
private final boolean issysibm
/**
* constructor for a schemadescriptor.
*
* @param datadictionary
* @param name	        the schema descriptor for this table.
* @param oid	        the object id
* @param aid	        the authorizatin id
* @param issystem	    boolean, true iff this is a system schema, like sys,
*                      sysibm, syscat, sysfun, ....
*/
public schemadescriptor
datadictionary  datadictionary
string          name
string          aid
uuid            oid
boolean         issystem
super  datadictionary
this name   name
this aid   aid
this oid   oid
this issystem   issystem
issysibm   issystem    ibm_system_schema_name equals name
/**
* gets the name of the schema
*
* @return	the schema name
*/
public string	getschemaname
return name
/**
* gets the authorization id of the schema
*
* @return	authorization id
*		lives in.
*/
public string getauthorizationid
return aid
/**
* gets the oid of the schema
*
* @return	an oid
*/
public uuid	getuuid
return oid
/**
* sets the oid of the schema
*
* @param oid	the object id
*
*/
public void	setuuid uuid oid
this oid   oid
//
// provider interface
//
/**
@return the stored form of this provider
@see dependable#getdependablefinder
*/
public dependablefinder getdependablefinder
// is this ok?
return	getdependablefinder storedformatids schema_descriptor_finder_v01_id
/**
* return the name of this provider.  (useful for errors.)
*
* @return string	the name of this provider.
*/
public string getobjectname
return name
/**
* get the provider's uuid
*
* @return string	the provider's uuid
*/
public uuid getobjectid
return oid
/**
* get the provider's type.
*
* @return string		the provider's type.
*/
public string getclasstype
return dependable schema
//
// class interface
//
/**
* prints the contents of the schemadescriptor
*
* @return the contents as a string
*/
public string tostring
return name
//	methods so that we can put schemadescriptors on hashed lists
/**
*	determine if two schemadescriptors are the same.
*
*	@param	otherobject	other schemadescriptor
*
*	@return	true if they are the same, false otherwise
*/
public boolean equals object otherobject
if    otherobject instanceof schemadescriptor
return false
schemadescriptor other    schemadescriptor  otherobject
if   oid    null      other oid    null
return oid equals  other oid
return name equals other name
/**
* indicate whether this is a system schema or not
*
* examples of system schema's include:
*      sys, sysibm, syscat, sysfun, sysproc, sysstat, and syscs_diag
*
* @return true/false
*/
public boolean issystemschema
return issystem
/**
* indicate whether this is a system schema with grantable routines
*
* @return true/false
*/
public boolean isschemawithgrantableroutines
if   issystem
return true
if  name equals std_sqlj_schema_name     name equals std_system_util_schema_name
return true
return false
public boolean issysibm
return issysibm
/**
*	get a hashcode for this schemadescriptor
*
*	@return	hashcode
*/
public int hashcode
return	oid hashcode
/** @see tupledescriptor#getdescriptorname */
public string getdescriptorname
return name
/** @see tupledescriptor#getdescriptortype */
public string getdescriptortype
return