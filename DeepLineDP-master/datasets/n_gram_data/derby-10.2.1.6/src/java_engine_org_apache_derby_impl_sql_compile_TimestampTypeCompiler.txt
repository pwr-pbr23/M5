/*
derby - class org.apache.derby.impl.sql.compile.timestamptypecompiler
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl sql compile
import org apache derby iapi services loader classfactory
import org apache derby iapi error standardexception
import org apache derby iapi types datatypedescriptor
import org apache derby iapi types datetimedatavalue
import org apache derby iapi types datavaluefactory
import org apache derby iapi types typeid
import org apache derby iapi sql compile typecompiler
import org apache derby iapi services sanity sanitymanager
import java sql types
import org apache derby iapi reference classname
public class timestamptypecompiler extends basetypecompiler
/* typecompiler methods */
/**
* timestamps are comparable to timestamps and to comparable
* user types.
*
* @param othertype the type of the instance to compare with this type.
* @param forequals true if this is an = or <> comparison, false
*					otherwise.
* @param cf		a classfactory
* @return true if othertype is comparable to this type, else false.
*/
public boolean comparable typeid othertype
boolean forequals
classfactory cf
return comparable gettypeid    othertype  forequals  cf
boolean comparable typeid lefttype
typeid othertype
boolean forequals
classfactory cf
int otherjdbctypeid   othertype getjdbctypeid
// long types cannot be compared
if  othertype islongconcatabletypeid
return false
typecompiler othertc   gettypecompiler othertype
if  otherjdbctypeid    types timestamp    othertype isstringtypeid
return true
/* user types know the rules for what can be compared to them */
if  othertype usertype
return othertc comparable gettypeid    forequals  cf
return false
/**
* user types are convertible to other user types only if
* (for now) they are the same type and are being used to
* implement some jdbc type.  this is sufficient for
* date/time types; it may be generalized later for e.g.
* comparison of any user type with one of its subtypes.
*
* @see typecompiler#convertible
*
*/
public boolean convertible typeid othertype
boolean fordatatypefunction
if  othertype isstringtypeid
othertype islongconcatabletypeid
return true
int otherjdbctypeid   othertype getjdbctypeid
/*
** at this point, we have only date/time.  if
** same type, convert always ok.
*/
if  otherjdbctypeid    types timestamp
return true
/*
** otherwise, we can convert timestamp to
** date or time only.
*/
return   otherjdbctypeid    types date
otherjdbctypeid    types time
/**
* tell whether this type (timestamp) is compatible with the given type.
*
* @param othertype     the typeid of the other type.
*/
public boolean compatible typeid othertype
if  othertype isstringtypeid
othertype islongconcatabletypeid
return true
/*
** both are timestamp datatypes and hence compatible.
*/
return  getstoredformatidfromtypeid
othertype gettypeformatid
/**
* user types are storable into other user types that they
* are assignable to. the other type must be a subclass of
* this type, or implement this type as one of its interfaces.
*
* built-in types are also storable into user types when the built-in
* type's corresponding java type is assignable to the user type.
*
* @param othertype the type of the instance to store into this type.
* @param cf		a classfactory
* @return true if othertype is storable into this type, else false.
*/
public boolean storable typeid othertype  classfactory cf
int	otherjdbctypeid   othertype getjdbctypeid
if  otherjdbctypeid    types timestamp
otherjdbctypeid    types char
otherjdbctypeid    types varchar
return true
return cf getclassinspector   assignableto
othertype getcorrespondingjavatypename
/** @see typecompiler#interfacename */
public string interfacename
return classname datetimedatavalue
/**
* @see typecompiler#getcorrespondingprimitivetypename
*/
public string getcorrespondingprimitivetypename
return
/**
* @see typecompiler#getcasttocharwidth
*/
public int getcasttocharwidth datatypedescriptor dts
return 26     date time milliseconds  extra few for good measure
public double estimatedmemoryusage datatypedescriptor dtd
return 12 0
protected string nullmethodname
return