/*
derby - class org.apache.derby.iapi.sql.dictionary.genericdescriptorlist
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi sql dictionary
import org apache derby iapi error standardexception
import org apache derby iapi services sanity sanitymanager
import org apache derby catalog uuid
import org apache derby iapi sql dictionary datadictionary
import org apache derby iapi sql dictionary uniquetupledescriptor
import org apache derby iapi sql dictionary schemadescriptor
import org apache derby iapi error standardexception
import org apache derby iapi services sanity sanitymanager
import org apache derby catalog uuid
import java util arraylist
import java util iterator
public class genericdescriptorlist extends arraylist
private boolean scanned
/**
* mark whether or not the underlying system table has
* been scanned.  (if a table does not have any
* constraints then the size of its cdl will always
* be 0.  we used these get/set methods to determine
* when we need to scan the table.
*
* @param scanned	whether or not the underlying system table has been scanned.
*/
public void setscanned boolean scanned
this scanned   scanned
/**
* return whether or not the underlying system table has been scanned.
*
* @return		where or not the underlying system table has been scanned.
*/
public boolean getscanned
return scanned
/**
* get the uniquetupledescriptor that matches the
* input uuid.
*
* @param uuid		the uuid for the object
*
* @return the matching uniquetupledescriptor.
*/
public uniquetupledescriptor getuniquetupledescriptor uuid uuid
for  iterator iterator   iterator    iterator hasnext
uniquetupledescriptor ud    uniquetupledescriptor  iterator next
if  ud getuuid   equals uuid
return ud
return null
public java util enumeration elements
return java util collections enumeration this