/*
derby - class org.apache.derby.diag.errorlogreader
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby diag
import java io bufferedreader
import java io filenotfoundexception
import java io inputstream
import java io inputstreamreader
import java io fileinputstream
import java util hashtable
import java util enumeration
import java util properties
import java sql resultsetmetadata
import java sql sqlexception
import java sql types
import org apache derby vti vtitemplate
import org apache derby iapi reference limits
import org apache derby iapi util stringutil
import org apache derby iapi sql resultcolumndescriptor
import org apache derby impl jdbc embedresultsetmetadata
/**
errorlogreader is a virtual table interface (vti) which contains all the statements
of "interest" in db2j.<!-- -->log or a specified file when
db2j.<!-- -->language.<!-- -->logstatementtext=true.
<p>one use of this vti is to determine the active transactions
and the sql statements in those transactions at a given point in time, say
when a deadlock or lock timeout occurred.  in order to do that, you must first
find the timestamp (timestampconstant) of interest in the error log.
the sql to view the active transactions at a given in time is:
<pre>select vti.ts, threadid, cast(xid as int) as xid_int, cast(lccid as int) as lccid_int, logtext
from new org.apache.derby.diag.errorlogreader() vti,
(values timestampconstant) t(ts)
where vti.ts <= t.ts and
vti.ts >
(select max(ts) is null ? '2000-01-01 00:00:00.1' : max(ts)
from new org.apache.derby.diag.errorlogreader() vti_i
where (logtext like 'committing%' or
logtext like 'rolling%') and
vti.xid = vti_i.xid and ts < t.ts)
order by xid_int, vti.ts
</pre>
<p>the errorlogreader virtual table has the following columns:
<ul><li>ts varchar(26) - the timestamp of the statement.</li>
<li>threadid varchar(40) - the thread name.</li>
<li>xid varchar(15) - the transaction id.</li>
<li>lccid varchar(15) - the connection id.</li>
<li>database varchar(128) -  database name
<li>drdaid  varchar(50) - nullable. drda id for network server session.
<li>logtext long varchar - text of the statement or commit or rollback.</li>
</ul>
*/
public class errorlogreader extends vtitemplate
/*
** private
*/
private boolean gotfile
private inputstreamreader inputfilestreamreader
private inputstream inputstream
private bufferedreader bufferedreader
private string inputfilename
// variables for current row
private string line
private int gmtindex
private int threadindex
private int xidindex
private int lccidindex
private int databaseindex
private int drdaidindex
private static final string gmt_string
private static final string parameters_string
private static final string begin_thread_string
private static final string end_thread_string
private static final string begin_xid_string
private static final string end_xid_string
private static final string begin_database_string
private static final string end_database_string
private static final string begin_drdaid_string
private static final string end_drdaid_string
private static final string begin_executing_string
private static final string end_executing_string
/**
errorlogreader() accesses the derby.log in
derby.system.home, if set, otherwise it looks in the current directory.
errorlogreader('filename') will access the specified
file name.
*/
public errorlogreader
string home   system getproperty
inputfilename
if  home    null
inputfilename   home       inputfilename
public errorlogreader string inputfilename
this inputfilename   inputfilename
/**
@see java.sql.resultset#getmetadata
*/
public resultsetmetadata getmetadata
return metadata
/**
@see java.sql.resultset#next
@exception sqlexception if database-access error occurs.
*/
public boolean next   throws sqlexception
if    gotfile
gotfile   true
try
inputfilestreamreader   new inputstreamreader new fileinputstream inputfilename
bufferedreader   new bufferedreader inputfilestreamreader  32 1024
catch  filenotfoundexception ex
throw new sqlexception ex getmessage
while  true
try
line   bufferedreader readline
catch  java io ioexception ioe
throw new sqlexception ioe getmessage
if  line    null
return false
gmtindex   line indexof gmt_string
threadindex   line indexof begin_thread_string
xidindex   line indexof begin_xid_string
lccidindex   line indexof begin_xid_string  xidindex   1
databaseindex   line indexof begin_database_string  lccidindex   1
drdaidindex   line indexof begin_drdaid_string  databaseindex   1
// skip parameters
if  line indexof parameters_string      1
continue
if  gmtindex     1    threadindex     1     xidindex     1
databaseindex     1
return true
/**
@see java.sql.resultset#close
*/
public void close
if  bufferedreader    null
try
bufferedreader close
inputfilestreamreader close
catch  java io ioexception ioe
// eat exceptions during close;
finally
bufferedreader   null
inputfilestreamreader   null
/**
all columns in the db2jlogreader vti have a of string type.
@see java.sql.resultset#getstring
@exception sqlexception if database-access error occurs.
*/
public string getstring int columnnumber
throws sqlexception
switch  columnnumber
case 1
return line substring 0  gmtindex
case 2
return line substring threadindex   1  line indexof end_thread_string
case 3
return line substring xidindex   2  line indexof end_xid_string  xidindex
case 4
return line substring lccidindex   2  line indexof end_xid_string  lccidindex
case 5
return line substring databaseindex   begin_database_string length    line indexof end_database_string  databaseindex
case 6
return line substring drdaidindex   begin_drdaid_string length    line indexof end_drdaid_string  drdaidindex
case 7
/* executing prepared statement is a special case as
* it could span multiple lines
*/
string output
if  line indexof begin_executing_string      1
output   line substring line indexof end_drdaid_string  drdaidindex    3
else
/* we need to build string until we find the end of the text */
int endindex   line indexof end_executing_string  drdaidindex
if  endindex     1
output   line substring line indexof end_drdaid_string  drdaidindex    3
else
output   line substring line indexof end_xid_string  drdaidindex    3
endindex
while  endindex     1
try
line   bufferedreader readline
catch  java io ioexception ioe
throw new sqlexception     ioe
endindex   line indexof end_executing_string
if  endindex     1
output   output   line
else
output   output   line substring 0  endindex
output   stringutil truncate output  limits db2_varchar_maxwidth
return output
default
return
/**
@see java.sql.resultset#wasnull
*/
public boolean wasnull
return false
/* metadata
*/
// column1: ts varchar(26) not null
// column2: threadid varchar(40) not null
// column3: xid  varchar(15) not null
// column4: lccid  varchar(15) not null
// column5: database varchar(128) not null
// column6: drdaid varchar(50) nullable
// column5: logtext varchar(max) not null
private static final resultcolumndescriptor columninfo
embedresultsetmetadata getresultcolumndescriptor    types varchar  false  26
embedresultsetmetadata getresultcolumndescriptor    types varchar  false  40
embedresultsetmetadata getresultcolumndescriptor    types varchar  false  15
embedresultsetmetadata getresultcolumndescriptor    types varchar  false  15
embedresultsetmetadata getresultcolumndescriptor    types varchar  false  128
embedresultsetmetadata getresultcolumndescriptor    types varchar  true  50
embedresultsetmetadata getresultcolumndescriptor   types varchar  false  limits db2_varchar_maxwidth
private static final resultsetmetadata metadata   new embedresultsetmetadata columninfo