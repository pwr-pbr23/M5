/*
derby - class org.apache.derby.diag.locktable
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby diag
// temp
import org apache derby impl services locks tablenameinfo
import org apache derby iapi services locks lockfactory
import org apache derby iapi services locks latch
import org apache derby iapi services locks lockable
import org apache derby iapi services locks virtuallocktable
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi error standardexception
import org apache derby iapi sql conn languageconnectioncontext
import org apache derby iapi sql conn connectionutil
import org apache derby iapi sql conn languageconnectionfactory
import org apache derby iapi store access transactioncontroller
import org apache derby iapi error publicapi
import org apache derby iapi sql resultcolumndescriptor
import org apache derby impl jdbc embedresultsetmetadata
import java util hashtable
import java util enumeration
import java sql resultsetmetadata
import java sql sqlexception
import java sql types
import org apache derby vti vtitemplate
import org apache derby vti vticosting
import org apache derby vti vtienvironment
/**
locktable is a virtual table that shows all locks currently held in
the database.
this virtual table can be invoked by calling it directly
<pre> select * from syscs_diag.lock_table </pre>
<p>the locktable virtual table takes a snap shot of the lock table while
the system is in flux, so it is possible that some locks may be in
transition state while the snap shot is taken. we choose to do this rather
then impose extranous timing restrictions so that the use of this tool will
not alter the normal timing and flow of execution in the application.
<p>the locktable virtual table has the following columns:
<ul><li>xid varchar(15) - not nullable.  the transaction id, this can be joined with the
transactiontable virtual table's xid.</li>
<li>type varchar(5) - nullable.  the type of lock, row, table, or latch</li>
<li>mode varchar(4) - not nullable.  the mode of the lock, "s", "u", "x", "is", "ix".</li>
<ul><li>s is shared lock (n/a to latch) </li>
<li>u is update lock (n/a to latch) </li>
<li>x is exclusive lock </li>
<li>is is intent shared lock (n/a to latch or row lock) </li>
<li>ix is intent exclusive lock (n/a to latch or row lock) </li>
</ul>
<li>tablename varchar(128) - not nullable. the name of the base table the lock is for </li>
<li>lockname varchar(20) - not nullable.  the name of the lock </li>
<li>state varchar(5) - nullable.  grant or wait </li>
<li>tabletype varchar(9) - not nullable.  't' for user table, 's' for system table </li>
<li>lockcount varchar(5) - not nullable.  internal lock count.</li>
<li>indexname varchar(128) - normally null.  if non-null, a lock is held on
the index, this can only happen if this is not a user transaction.</li>
</ul>
*/
public class locktable extends vtitemplate implements vticosting
/** return only latches */
public static final int latch   virtuallocktable latch
/** return only table and row locks */
public static final int table_and_rowlock   virtuallocktable table_and_rowlock
/** return all locks and latches */
public static final int all   virtuallocktable all
/*
** private
*/
private transactioncontroller tc
private languageconnectionfactory lcf
private hashtable currentrow 		   an entry in the lock table
private enumeration locktable
private boolean wasnull
private boolean initialized
private final int flag
private tablenameinfo tabinfo
/**
the normal way of instantiating a locktable, equivalent to
locktable(org.apache.derby.diag.locktable->table_and_rowlock).
only shows row and table lock and not latches.  latches are generally
held for very short duration and are not of interest to cloudscape
users.  only under abnormal circumstances will one be interested in
looking at latches.
*/
public locktable
flag   table_and_rowlock
/**
this call is intrusive and should only be used under the supervision of
technical support.  create an instance of the lock table which
has transient latches as well as locks.
*/
public locktable int flag
this flag   flag
/**
@see java.sql.resultset#getmetadata
*/
public resultsetmetadata getmetadata
return metadata
/**
@see java.sql.resultset#next
@exception sqlexception if no transaction context can be found, or other
cloudscape internal errors are encountered.
*/
public boolean next   throws sqlexception
try
if   initialized
languageconnectioncontext lcc   connectionutil getcurrentlcc
tc   lcc gettransactionexecute
languageconnectionfactory lcf   lcc getlanguageconnectionfactory
lockfactory lf   lcf getaccessfactory   getlockfactory
locktable   lf makevirtuallocktable
initialized   true
tabinfo   new tablenameinfo lcc  true
currentrow   null
if  locktable    null
while  locktable hasmoreelements       currentrow    null
currentrow   dumplock  latch  locktable nextelement
catch  standardexception se
throw publicapi wrapstandardexception se
return  currentrow    null
/**
@see java.sql.resultset#close
*/
public void close
locktable   null
/**
all columns in transactiontable vti are of string type.
@see java.sql.resultset#getstring
*/
public string getstring int columnnumber
string val    string currentrow get columninfo getname
wasnull    val    null
return  val
/**
@see java.sql.resultset#wasnull
*/
public boolean wasnull
return wasnull
/**  vti costing interface */
/**
@see vticosting#getestimatedrowcount
*/
public double getestimatedrowcount vtienvironment vtienvironment
return vticosting defaultestimatedrowcount
/**
@see vticosting#getestimatedcostperinstantiation
*/
public double getestimatedcostperinstantiation vtienvironment vtienvironment
return vticosting defaultestimatedcost
/**
@return false
@see vticosting#supportsmultipleinstantiations
*/
public boolean supportsmultipleinstantiations vtienvironment vtienvironment
return false
/*
** private methods
*/
/**
convert the lock information into a hashtable.
*/
private hashtable dumplock
latch                   lock
throws standardexception
hashtable	attributes   new hashtable 17
object      lock_type    lock getqualifier
// 4 things we are interested in from the lockable:
// containerid, segmentid, pagenum, recid
lockable lockable   lock getlockable
// see if this lockable object wants to participate
if   lockable lockattributes flag  attributes
return null
// if it does, the lockable object must have filled in the following
// fields
if  sanitymanager debug
sanitymanager assert attributes get virtuallocktable lockname     null
sanitymanager assert attributes get virtuallocktable locktype     null
if  attributes get virtuallocktable containerid     null
attributes get virtuallocktable conglomid     null
sanitymanager throwassert
if  attributes get virtuallocktable lockname     null
attributes get virtuallocktable locktype     null
return null 				   can't deal with this for now
// if the lock has zero count and is an instance of lock then it
// is a lock that has just been released. therefore do put it into
// the lock table. this occurs because the lock object is the real
// live object in the locktable. thus when we copied the lock table
// it had a non-zero count, but since then it has been released
// (after we dropped the sync). note if it is of type activelock
// with zero count there is stil the chance it has been released.
// less likely, but we still need to fix that at some time.
int lockcount   lock getcount
string state
if  lockcount    0
state
else if    lock instanceof org apache derby impl services locks activelock
return null
else
state
long conglomid    long  attributes get virtuallocktable conglomid
if  conglomid    null
// we need to figure this out
if  attributes get virtuallocktable containerid     null
return null     can't deal with this for now
long value    long attributes get virtuallocktable containerid
conglomid   new long tc findconglomid value longvalue
attributes put virtuallocktable conglomid  conglomid
attributes put virtuallocktable lockobj  lock
attributes put virtuallocktable xactid  lock getcompatabilityspace   tostring
attributes put virtuallocktable lockmode  lock_type tostring
attributes put virtuallocktable lockcount  integer tostring lockcount
attributes put virtuallocktable state  state
string tablename   tabinfo gettablename conglomid
attributes put virtuallocktable tablename  tablename
string indexname   tabinfo getindexname conglomid
if  indexname    null
attributes put virtuallocktable indexname  indexname
string tabletype   tabinfo gettabletype conglomid
attributes put virtuallocktable tabletype  tabletype
return attributes
/*
** metadata
*/
private static final resultcolumndescriptor columninfo
embedresultsetmetadata getresultcolumndescriptor virtuallocktable xactid     types varchar  false  15
embedresultsetmetadata getresultcolumndescriptor virtuallocktable locktype   types varchar  true  5
embedresultsetmetadata getresultcolumndescriptor virtuallocktable lockmode   types varchar  false  4
embedresultsetmetadata getresultcolumndescriptor virtuallocktable tablename  types varchar  false  128
embedresultsetmetadata getresultcolumndescriptor virtuallocktable lockname   types varchar  false  20
embedresultsetmetadata getresultcolumndescriptor virtuallocktable state      types varchar  true  5
embedresultsetmetadata getresultcolumndescriptor virtuallocktable tabletype  types varchar  false  9
embedresultsetmetadata getresultcolumndescriptor virtuallocktable lockcount  types varchar  false  5
embedresultsetmetadata getresultcolumndescriptor virtuallocktable indexname  types varchar  true   128
private static final resultsetmetadata metadata   new embedresultsetmetadata columninfo