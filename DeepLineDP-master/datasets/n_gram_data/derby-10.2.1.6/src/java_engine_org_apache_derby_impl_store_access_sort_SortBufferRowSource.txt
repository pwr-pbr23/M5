/*
derby - class org.apache.derby.impl.store.access.sort.sortbufferrowsource
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl store access sort
import org apache derby iapi reference sqlstate
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi error standardexception
import org apache derby iapi store access rowsource
import org apache derby iapi store access sortobserver
import org apache derby iapi types rowlocation
import org apache derby iapi store access conglomerate scancontrollerrowsource
import org apache derby iapi store access conglomerate transactionmanager
import org apache derby iapi store access scancontroller
import org apache derby iapi types datavaluedescriptor
import org apache derby iapi services io formatablebitset
/**
wrapping the output of a sortbuffer in a rowsource for the benefit of the
createandloadconglomerate and loadconglomerate interface.
scan implements scancontroller, this class just implements the
rowsource interface.
*/
public class sortbufferrowsource extends scan
implements scancontrollerrowsource
/**
the sort buffer where rows come from
**/
sortbuffer sortbuffer   null
/**
the transactionmanager that opened this scan.
**/
protected transactionmanager tran   null
private int			 maxfreelistsize
private boolean		 writingtodisk
private sortobserver sortobserver
/*
* constructors.
*/
sortbufferrowsource
sortbuffer          sortbuffer
transactionmanager  tran
sortobserver        sortobserver
boolean             writingtodisk
int                 maxfreelistsize
super
this sortbuffer   sortbuffer
this tran   tran
this sortobserver   sortobserver
this writingtodisk   writingtodisk
this maxfreelistsize   maxfreelistsize
/* private/protected methods of this class: */
/* public methods of this class: */
/* public methods of rowsource class: */
public datavaluedescriptor getnextrowfromrowsource
if  sortbuffer    null 	   has been closed
return null
datavaluedescriptor retval   sortbuffer removefirst
// return the removed object to the free datavaluedescriptor[]
if  retval    null    writingtodisk
sortobserver addtofreelist retval  maxfreelistsize
return retval
public boolean needsrowlocation
return false
/**
* @see rowsource#needstoclone
*/
public boolean needstoclone
return false
public void rowlocation rowlocation rl
if  sanitymanager debug
sanitymanager throwassert
/**
all columns are always set from a sorter
*/
public formatablebitset getvalidcolumns
return null
/**
close the scan
*/
public void close
if  sortbuffer    null
sortbuffer close
sortbuffer   null
tran closeme this
/**
close the scan
*/
public boolean closeforendtransaction boolean closeheldscan
if  sanitymanager debug
sanitymanager assert
closeheldscan
close
return true
/**
close the rowsource
*/
public void closerowsource
close
/*
* disable illegal and dangerous scan controller interface call
*/
public boolean next   throws standardexception
throw standardexception newexception
sqlstate sort_improper_scan_method
/**
* fetch the row at the current position of the scan and does not apply the
* qualifiers.
*
* this method will always throw an exception.
* (sqlstate.sort_improper_scan_method)
*
* @see scancontroller#fetchwithoutqualify
**/
public void fetchwithoutqualify datavaluedescriptor result
throws standardexception
throw standardexception newexception
sqlstate sort_improper_scan_method
/**
* fetch the row at the current position of the scan.
*
* @see scancontroller#fetch
**/
public void fetch datavaluedescriptor result  throws standardexception
throw standardexception newexception
sqlstate sort_improper_scan_method
public final boolean fetchnext datavaluedescriptor row
throws standardexception
throw standardexception newexception
sqlstate sort_improper_scan_method