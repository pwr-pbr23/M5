/*
derby - class org.apache.derby.diag.statementduration
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby diag
import java io bufferedreader
import java io filenotfoundexception
import java io inputstream
import java io inputstreamreader
import java io fileinputstream
import java util hashtable
import java util enumeration
import java util properties
import java sql resultsetmetadata
import java sql sqlexception
import java sql timestamp
import java sql types
import org apache derby vti vtitemplate
import org apache derby iapi sql resultcolumndescriptor
import org apache derby impl jdbc embedresultsetmetadata
import org apache derby iapi reference limits
import org apache derby iapi util stringutil
/**
statementduration is a virtual table which
can be used to analyze the execution duration of the statements
of "interest" in db2j.<!-- -->log or a specified file when
db2j.<!-- -->language.<!-- -->logstatementtext=true.
<p>a limitation is that, for each transaction id,
a row will not be returned for the last	statement with that
transaction id.  (transaction ids change within a connection after
a commit or rollback, if the transaction that just ended modified data.)
<p>the execution duration is the time between the beginning of
execution of two successive statements.  there are a number of reasons
why this time may not be accurate.  the duration could include time
spent in the application waiting for user input, doing other work, etc.
it may also only include a portion of the actual execution time, if
the application executes a new statement before draining the previous
open resultset.  statementduration can be used to get a rough sense of
where the bottlenecks in an application's jdbc code are.
<p>the statementduration virtual table has the following columns:
<ul><li>ts varchar(26) - not nullable.  the timestamp of the statement.</li>
<li>threadid varchar(80) - not nullable.  the thread name.</li>
<li>xid varchar(15) - not nullable.  the transaction id.</li>
<li>logtext long varchar - nullable.  text of the statement or commit or rollback.</li>
<li>duration varchar(10) - not nullable.  duration, in milliseconds, of the statement.</li>
</ul>
*/
public class statementduration extends vtitemplate
/*
** private
*/
private boolean gotfile
private inputstreamreader inputfilestreamreader
private inputstream inputstream
private bufferedreader bufferedreader
private string inputfilename
private hashtable hashtable
// variables for current row
private string line
private int gmtindex
private int threadindex
private int xidindex
private int lccidindex
private string currentrow
private static final string gmt_string
private static final string begin_thread_string
private static final string end_thread_string
private static final string begin_xid_string
private static final string end_xid_string
private static final string begin_executing_string
private static final string end_executing_string
/**
statementduration() accesses the error log in
derby.system.home, if set, otherwise it looks in the current directory.
statementduration('filename') will access the specified
file name.
*/
public statementduration
string home   system getproperty
inputfilename
if  home    null
inputfilename   home       inputfilename
public statementduration string inputfilename
this inputfilename   inputfilename
/**
@see java.sql.resultset#getmetadata
*/
public resultsetmetadata getmetadata
return metadata
/**
@see java.sql.resultset#next
@exception sqlexception if database access error occurs.
*/
public boolean next   throws sqlexception
if    gotfile
gotfile   true
try
inputfilestreamreader   new inputstreamreader new fileinputstream inputfilename
bufferedreader   new bufferedreader inputfilestreamreader  32 1024
catch  filenotfoundexception ex
throw new sqlexception ex getmessage
hashtable   new hashtable
while  true
try
line   bufferedreader readline
catch  java io ioexception ioe
throw new sqlexception ioe getmessage
if  line    null
return false
gmtindex   line indexof gmt_string
threadindex   line indexof begin_thread_string
xidindex   line indexof begin_xid_string
lccidindex   line indexof begin_xid_string  xidindex   1
if  gmtindex     1    threadindex     1
/* build a row */
string newrow   new string
for  int index   1
index <  5
index
newrow   setupcolumn index
/* note: we need to use the lccid as the key
*/
object previousrow   hashtable put newrow
newrow
if  previousrow    null
continue
currentrow    string  previousrow
/* figure out the duration. */
timestamp endts   timestamp valueof newrow
long end   endts gettime     endts getnanos     1000000
timestamp startts   timestamp valueof currentrow
long start   startts gettime     startts getnanos     1000000
currentrow   long tostring end   start
return true
/**
@see java.sql.resultset#close
*/
public void close
if  bufferedreader    null
try
bufferedreader close
inputfilestreamreader close
catch  java io ioexception ioe
// eat exceptions during close;
finally
bufferedreader   null
inputfilestreamreader   null
/**
all columns in statementduration vti have string data types.
@see java.sql.resultset#getstring
@exception sqlexception if database access error occurs.
*/
public string getstring int columnnumber
throws sqlexception
return currentrow
private string setupcolumn int columnnumber
throws sqlexception
switch  columnnumber
case 1
return line substring 0  gmtindex
case 2
return line substring threadindex   1  line indexof end_thread_string
case 3
return line substring xidindex   2  line indexof end_xid_string  xidindex
case 4
return line substring lccidindex   2  line indexof end_xid_string  lccidindex
case 5
/* executing prepared statement is a special case as
* it could span multiple lines
*/
string output
if  line indexof begin_executing_string      1
output   line substring line indexof end_xid_string  lccidindex    3
else
/* we need to build string until we find the end of the text */
int endindex   line indexof end_executing_string  lccidindex
if  endindex     1
output   line substring line indexof end_xid_string  lccidindex    3
else
output   line substring line indexof end_xid_string  lccidindex    3
endindex
while  endindex     1
try
line   bufferedreader readline
catch  java io ioexception ioe
throw new sqlexception     ioe
endindex   line indexof end_executing_string
if  endindex     1
output   output   line
else
output   output   line substring 0  endindex
output   stringutil truncate output  limits db2_varchar_maxwidth
return output
default
return null
/**
@see java.sql.resultset#wasnull
*/
public boolean wasnull
return false
/*
** metadata
*/
private static final resultcolumndescriptor columninfo
embedresultsetmetadata getresultcolumndescriptor           types varchar  false  26
embedresultsetmetadata getresultcolumndescriptor     types varchar  false  80
embedresultsetmetadata getresultcolumndescriptor          types varchar  false  15
embedresultsetmetadata getresultcolumndescriptor        types varchar  false  10
embedresultsetmetadata getresultcolumndescriptor      types varchar  true  limits db2_varchar_maxwidth
embedresultsetmetadata getresultcolumndescriptor     types varchar  false  10
private static final resultsetmetadata metadata   new embedresultsetmetadata columninfo