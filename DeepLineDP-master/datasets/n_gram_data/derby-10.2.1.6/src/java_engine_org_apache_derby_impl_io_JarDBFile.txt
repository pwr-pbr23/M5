/*
derby - class org.apache.derby.impl.io.jardbfile
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl io
import org apache derby io storagefile
import org apache derby io storagerandomaccessfile
import org apache derby iapi services sanity sanitymanager
import java io file
import java io inputstream
import java io outputstream
import java io ioexception
import java io filenotfoundexception
import java net malformedurlexception
import java net url
import java util zip zipentry
import java util zip zipfile
/**
* this class provides a jar file based implementation of the storagefile interface. it is used by the
* database engine to access persistent data and transaction logs under the jar subsubprotocol.
*/
class jardbfile extends inputstreamfile
private final jarstoragefactory storagefactory
jardbfile  jarstoragefactory storagefactory  string path
super  storagefactory  path
this storagefactory   storagefactory
jardbfile  jarstoragefactory storagefactory  string parent  string name
super  storagefactory  parent  name
this storagefactory   storagefactory
jardbfile  jardbfile dir  string name
super  dir name
this storagefactory   dir storagefactory
private jardbfile  jarstoragefactory storagefactory  string child  int pathlen
super  storagefactory  child  pathlen
this storagefactory   storagefactory
/**
* tests whether the named file exists.
*
* @return <b>true</b> if the named file exists, <b>false</b> if not.
*/
public boolean exists
return getentry      null
end of exists
private zipentry getentry
return storagefactory zipdata getentry  path
/**
* returns the length of the named file if it is not a directory. the return value is not specified
* if the file is a directory.
*
* @return the length, in bytes, of the named file if it exists and is not a directory,
*         0 if the file does not exist, or any value if the named file is a directory.
*/
public long length
zipentry entry   getentry
if  entry    null
return 0
return entry getsize
end of length
/**
* get the name of the parent directory if this name includes a parent.
*
* @return an storagefile denoting the parent directory of this storagefile, if it has a parent, null if
*         it does not have a parent.
*/
storagefile getparentdir  int pathlen
return new jardbfile  storagefactory  path  pathlen
/**
* creates an input stream from a file name.
*
* @return an input stream suitable for reading from the file.
*
* @exception filenotfoundexception if the file is not found.
*/
public inputstream getinputstream    throws filenotfoundexception
zipentry zipentry   getentry
if  zipentry    null
throw new java io filenotfoundexception path
try
return storagefactory zipdata getinputstream zipentry
catch  ioexception ioe   throw new java io filenotfoundexception path
end of getinputstream
/**
* get the file name for diagnostic purposes. usually the same as getpath().
*
* @return the file name
*/
public string tostring
return path
/**
* return a url for this file (resource). returns a url according to the
* spec for java.net.jarurlconnection
*
* @see org.apache.derby.io.storagefile#geturl()
*/
public url geturl   throws malformedurlexception
file pathfile   new file storagefactory zipdata getname
string pathfileurl   pathfile tourl   tostring
return new url     pathfileurl       path