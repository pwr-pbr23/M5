/*
derby - class org.apache.derby.impl.store.raw.data.inputstreamcontainer
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl store raw data
import org apache derby impl store raw data filecontainer
import org apache derby iapi store raw containerkey
import org apache derby iapi error standardexception
import org apache derby iapi store raw log loginstant
import org apache derby iapi services sanity sanitymanager
import org apache derby impl store raw data basedatafilefactory
import org apache derby iapi services io inputstreamutil
import org apache derby iapi reference sqlstate
import org apache derby io storagefile
import java io inputstream
import java io ioexception
import java io datainputstream
/**
a class that uses a zipentry to be a single container file,
but read-only.
*/
final class inputstreamcontainer extends filecontainer
private storagefile containerpath
/*
* constructors
*/
inputstreamcontainer basedatafilefactory factory
super factory
canupdate   false
final boolean opencontainer containerkey newidentity  throws standardexception
datainputstream dis   null
try
inputstream is   null
containerpath   datafactory getcontainerpath newidentity  false
try
is   containerpath getinputstream
catch  ioexception ioe
// maybe it's been stubbified.
containerpath   datafactory getcontainerpath newidentity  true
try
is   getinputstream
catch  ioexception ioe2
containerpath   null
return false
dis   new datainputstream is
// filedata has to be positioned just at the beginning
// of the first allocation page. and it is because we
// just opened the stream and the first allocation page
// is located at the beginning of the file.
readheader dis
return true
catch  ioexception ioe
throw standardexception
newexception sqlstate file_container_exception  ioe  this
finally
if  dis    null
try
dis close
catch  ioexception ioe
end of opencontainer
void closecontainer
containerpath   null
/**
write out the header information for this container. if an i/o exception
occurs then ...
@see org.apache.derby.iapi.services.cache.cacheable#clean
@exception standardexception standard cloudscape error policy
*/
public final void clean boolean forremove  throws standardexception
// nothing to do since we are inherently read-only.
/**
preallocate page.
*/
protected final int preallocate long lastpreallocpagenum  int preallocsize
// nothing to do since we are inherently read-only.
return 0
protected void truncatepages long lastvalidpagenum
// nothing to do since we are inherently read-only.
return
/*
** container creation, opening, and closing
*/
/**
create a new container, all references to identity must be through the
passed in identity, this object will no identity until after this method returns.
*/
void createcontainer containerkey newidentity  throws standardexception
// resolve - probably should throw an error ...
/**
remove the container.
*/
protected final void removecontainer loginstant instant  boolean leavestub  throws standardexception
// resove
/*
** methods used solely by storedpage
*/
/**
read a page into the supplied array.
<br> mt - thread safe
*/
protected final void readpage long pagenumber  byte pagedata
throws ioexception  standardexception
if  sanitymanager debug
sanitymanager assert  getcommitteddropstate
long pageoffset   pagenumber   pagesize
readpositionedpage pageoffset  pagedata
if  datafactory databaseencrypted
pagenumber    first_alloc_page_number
decryptpage pagedata  pagesize
/**
read the page at the positioned offset.
this default implementation, opens the stream and skips to the offset
and then reads the data into pagedata.
*/
protected void readpositionedpage long pageoffset  byte pagedata  throws ioexception
inputstream is   null
try
// no need to synchronize as each caller gets a new stream
is   getinputstream
inputstreamutil skipbytes is  pageoffset
inputstreamutil readfully is  pagedata  0  pagesize
is close
is   null
finally
if  is    null
try  is close     catch  ioexception ioe
/**
write a page from the supplied array.
<br> mt - thread safe
*/
protected final void writepage long pagenumber  byte pagedata  boolean syncpage
throws ioexception  standardexception
protected final void flushall
/**
get an input stream positioned at the beginning of the file
*/
protected inputstream getinputstream   throws ioexception
return containerpath getinputstream
/**
* backup the container.
* there is no support to backup this type of containers. it may not be any
* real use for users because users can simply  make copies of the read only
* database in zip files easily using os utilities.
*
* @exception standardexception standard derby error policy
*/
protected void backupcontainer basecontainerhandle handle 	string backuplocation
throws standardexception
throw standardexception newexception
sqlstate store_feature_not_implemented
/**
* encrypt the container.  there is no support to encrypt
* this type of containers.
*
* @exception standardexception standard derby error policy
*/
protected void encryptcontainer basecontainerhandle handle
string newfilepath
throws standardexception
throw standardexception newexception
sqlstate store_feature_not_implemented