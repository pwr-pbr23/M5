/*
derby - class org.apache.derby.impl.store.raw.xact.rowlocking2
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl store raw xact
import org apache derby iapi services locks lockfactory
import org apache derby iapi services locks c_lockfactory
import org apache derby iapi services locks latch
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi store raw containerhandle
import org apache derby iapi store raw containerlock
import org apache derby iapi store raw lockingpolicy
import org apache derby iapi store raw recordhandle
import org apache derby iapi store raw rowlock
import org apache derby iapi store raw transaction
import org apache derby iapi error standardexception
/**
a locking policy that implements row level locking with isolation degree 2.
the approach is to place all "write" container and row locks on the
transaction group lock list.  locks on this group will last until end
of transaction.  all "read" container and row locks will be placed
on a group list, key'd by the containerid of the lock.  locks on this
list will either be released explicitly by the caller, or will be released
as a group when the unlockcontainer() call is made.
note that write operations extend from the rowlocking3 implementations.
@see org.apache.derby.iapi.store.raw.lockingpolicy
*/
public class rowlocking2 extends rowlockingrr
// no locking has no state, so it's safe to hold
// it as a static
private static final lockingpolicy no_lock   new nolocking
protected rowlocking2 lockfactory lf
super lf
/**
* obtain container level intent lock.
* <p>
* this implementation of row locking is 2 level, ie. table and row locking.
* it will interact correctly with tables opened with containerlocking3
* locking mode.
* <p>
* updater's will get table level ix locks, and x row locks.
* <p>
* reader's will get table level is locks, and s row locks.
* <p>
* read locks are put in a separate "group" from the transaction, so that
* when the container is closed it can release these read locks.
*
* @param t            transaction to associate lock with.
* @param container    container to lock.
* @param waitforlock  should lock request wait until granted?
* @param forupdate    should container be locked for update, or read?
*
* @return true if the lock was obtained, false if it wasn't.
*   false should only be returned if the waitforlock policy was set to
*  "false," and the lock was unavailable.
*
* @exception  standardexception  standard exception policy.
**/
public boolean lockcontainer
transaction         t
containerhandle     container
boolean             waitforlock
boolean             forupdate
throws standardexception
object qualifier   forupdate ? containerlock cix   containerlock cis
// for cursor stability put read locks on a separate lock chain, which
// will be released when the container is unlocked.
object group
forupdate ?   object  t      object  container getuniqueid
boolean gotlock
lf lockobject
t getcompatibilityspace    group  container getid    qualifier
waitforlock ? c_lockfactory timed_wait   c_lockfactory no_wait
if  gotlock
// look for covering table locks
// cis and cix is covered by cx
// in that case move the lock to the transaction list from the
// container list, as the null locking policy will do nothing in
// unlockcontainer().
//
if  lf islockheld t getcompatibilityspace    t  container getid
containerlock cx
//release any container group locks becuase cx container lock will cover everthing.
lf unlockgroup t getcompatibilityspace    container getuniqueid
container setlockingpolicy no_lock
else if    forupdate
lf islockheld t getcompatibilityspace    t  container getid    containerlock cs
// move locks from container group to transaction group.
lf transfer t getcompatibilityspace    group  t
container setlockingpolicy no_lock
return gotlock
/**
* obtain lock on record being read.
* <p>
* assumes that a table level is has been acquired.  will acquire a shared
* or update lock on the row, depending on the "forupdate" parameter.
* <p>
* read lock will be placed on separate group from transaction.
*
* @param t             the transaction to associate the lock with.
* @param record        the record to be locked.
* @param waitforlock   should lock request wait until granted?
* @param forupdate     whether to open for read or write access.
*
* @return true if the lock was granted, false if waitforlock was false
* and the lock could not be granted.
*
* @exception  standardexception  standard exception policy.
**/
public boolean lockrecordforread
transaction     t
containerhandle container_handle
recordhandle    record
boolean         waitforlock
boolean         forupdate
throws standardexception
object qualifier   forupdate ? rowlock ru2   rowlock rs2
return
lf lockobject
t getcompatibilityspace
container_handle getuniqueid
record
qualifier
waitforlock ?
c_lockfactory timed_wait   c_lockfactory no_wait
/**
* obtain lock on record being read while holding a latch.
* <p>
* assumes that a table level is has been acquired.  will acquire a shared
* or update lock on the row, depending on the "forupdate" parameter.
* <p>
*
* @param latch         the latch being held.
* @param record        the record to be locked.
* @param forupdate     whether to open for read or write access.
*
* @exception  standardexception  standard exception policy.
**/
public void lockrecordforread
latch			latch
recordhandle    record
boolean         forupdate
throws standardexception
// resolve - did i do the right thing with the "forupdate" variable.
// resolve (mikem) - looks like it needs work for update locks, and
//     compatibility spaces.
object qualifier   forupdate ? rowlock ru2   rowlock rs2
lf lockobject
record getcontainerid    record  qualifier
c_lockfactory timed_wait  latch
public void unlockrecordafterread
transaction     t
containerhandle container_handle
recordhandle    record
boolean         forupdate
boolean         row_qualified
throws standardexception
object qualifier   forupdate ? rowlock ru2   rowlock rs2
int count
lf unlock
t getcompatibilityspace    container_handle getuniqueid
record  qualifier
if  sanitymanager debug
// in the case of lock escalation the count could be 0.
if    count    1    count    0
sanitymanager throwassert
count
record getcontainerid
/**
* unlock read locks.
* <p>
* in cursor stability release all read locks obtained.  unlockcontainer()
* will be called when the container is closed.
* <p>
*
* @param t                 the transaction to associate the lock with.
* @param container_handle  container to unlock.
**/
public void unlockcontainer
transaction     t
containerhandle container_handle
// only release read locks before end of transaction in level 2.
lf unlockgroup
t getcompatibilityspace    container_handle getuniqueid