/*
derby - class com.ihost.cs.jbitset
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi util
import org apache derby iapi services sanity sanitymanager
import java util bitset
/**
* jbitset is a wrapper class for bitset.  it is a fixed length implementation
* which can be extended via the grow() method.  it provides additional
* methods to manipulate bitsets.
* note: jbitset was driven by the (current and perceived) needs of the
* optimizer, but placed in the util package since it is not specific to
* query trees..
* note: java.util.bitset is final, so we must provide a wrapper class
* which includes a bitset member in order to extend the functionality.
* we want to make it look like jbitset extends bitset, so we need to
* provide wrapper methods for all of bitset's methods.
*
* @author jerry brenner
*/
public final class jbitset
/* the bitset that we'd like to extend */
private final bitset	bitset
/* cache size() of bitset, since accessed a lot */
private int		size
/**
* construct a jbitset of the specified size.
*
* @param size	the number of bits in the jbitset.
*/
public jbitset int size
bitset   new bitset size
this size   size
/**
* construct a jbitset with the specified bitset.
*
* @param bitset	the bitset.
* @param size		the size of bitset.
*					note: we need to specify the size since the size of a
*					bitset is not guaranteed to be the same as jbitset.size().
*/
private jbitset bitset bitset  int size
this bitset   bitset
this size   size
/**
* set the bitset to have the exact same bits set as the parameter's bitset.
*
* @param sourcebitset	the jbitset to copy.
*/
public void setto jbitset sourcebitset
if  sanitymanager debug
sanitymanager assert size    sourcebitset size
/* high reuse solution */
and sourcebitset
or sourcebitset
/**
* test to see if one jbitset contains another one of
* the same size.
*
* @param jbitset	jbitset that we want to know if it is
*					a subset of current jbitset
*
* @return boolean	whether or not jbitset is a subset.
*/
public boolean contains jbitset jbitset
if  sanitymanager debug
sanitymanager assert size    jbitset size
for  int bitindex   0  bitindex < size  bitindex
if  jbitset bitset get bitindex        bitset get bitindex
return false
return true
/**
* see of a jbitset has exactly 1 bit set.
*
* @return boolean	whether or not jbitset has a single bit set.
*/
public boolean hassinglebitset
boolean found   false
for  int bitindex   0  bitindex < size  bitindex
if  bitset get bitindex
if  found
return false
else
found   true
return found
/**
* get the first set bit (starting at index 0) from a jbitset.
*
* @return int	index of first set bit, -1 if none set.
*/
public int getfirstsetbit
for  int bitindex   0  bitindex < size  bitindex
if  bitset get bitindex
return bitindex
return  1
/**
* grow an existing jbitset to the specified size.
*
* @param newsize	the new size
*
*/
public void grow int newsize
if  sanitymanager debug
sanitymanager assert newsize > size
size   newsize
/**
* clear all of the bits in this jbitset
*/
public void clearall
for  int bitindex   0  bitindex < size  bitindex
if  bitset get bitindex
bitset clear bitindex
/* wrapper methods for bitset's methods */
public string tostring
return bitset tostring
public boolean equals object obj
if  sanitymanager debug
sanitymanager assert  obj instanceof jbitset
obj
return bitset equals   jbitset  obj  bitset
public int hashcode
return bitset hashcode
public object clone
return new jbitset  bitset  bitset clone    size
public boolean get int bitindex
return bitset get bitindex
public void set int bitindex
bitset set bitindex
public void clear int bitindex
bitset clear bitindex
public void and jbitset set
bitset and set bitset
public void or jbitset set
bitset or set bitset
public void xor jbitset set
bitset xor set bitset
/**
* return the size of bitset
*
* @return int	size of bitset
*/
public int size
return size