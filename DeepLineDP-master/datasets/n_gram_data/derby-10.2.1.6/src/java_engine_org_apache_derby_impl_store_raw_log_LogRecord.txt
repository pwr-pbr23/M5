/*
derby - class org.apache.derby.impl.store.raw.log.logrecord
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl store raw log
import org apache derby iapi reference sqlstate
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi services io formatidutil
import org apache derby iapi services io storedformatids
import org apache derby iapi services io formatable
import org apache derby iapi error standardexception
import org apache derby iapi store raw loggable
import org apache derby iapi store raw compensation
import org apache derby iapi store raw repreparable
import org apache derby iapi store raw undoable
import org apache derby iapi store raw xact transactionid
import org apache derby iapi services io compressednumber
import java io objectoutput
import java io objectinput
import java io ioexception
/**
the log record written out to disk. this log record includes:
<p>
the is a holder object that may be setup using the setvalue() and re-used
rather than creating a new object for each actual log record.
<p>	<pre>
the format of a log record is
@format_id log_record
the formatid is written by formatidoutputstream when this object is
written out by writeobject
@purpose	the log record described every change to the persistent store
@upgrade
@disk_layout
loggable group(compressedint)	the loggable's group value
xactid(transactionid)			the transaction this log belongs to
op(loggable)					the log operation
@end_format
</pre>
*/
public class logrecord implements formatable
private transactionid	xactid 	   the transaction id
private loggable		op 		   the loggable
private int				group 	   the loggable's group value
// the objectinput stream that contains the loggable object.  the
// objectification of the transaction id and the the loggable object is
// delayed from readexternal time to gettransactionid and getloggable time
// to give the log scan an opportunity to discard the loggable based on
// group value and xactid.
transient objectinput input
private static final int formatlength   formatidutil getformatidbytelength storedformatids log_record
public logrecord
/*
* formatable methods
*/
/**
write this out.
@exception ioexception error writing to log stream
*/
public void writeexternal objectoutput out  throws ioexception
compressednumber writeint out  group
out writeobject xactid
out writeobject op
/**
read this in
@exception ioexception error reading from log stream
@exception classnotfoundexception corrupted log stream
*/
public void readexternal objectinput in  throws ioexception  classnotfoundexception
group   compressednumber readint in
input   in 				   tie the input to this logrecord
xactid   null 			   delay reading these until later
op   null
/**
return my format identifier.
*/
public int gettypeformatid
return storedformatids log_record
/*
* class specific methods
*/
public void setvalue transactionid xactid  loggable op
this xactid   xactid
this op   op
this group   op group
public static int formatoverhead
return formatlength
public static int maxgroupstoredsize
return compressednumber max_int_stored_size
public static int maxtransactionidstoredsize transactionid tranid
return tranid getmaxstoredsize
public static int getstoredsize int group  transactionid xactid
if  sanitymanager debug
sanitymanager assert xactid    null
return 	formatlength   	compressednumber sizeint group
formatidutil getformatidbytelength storedformatids null_format_id
public transactionid gettransactionid
throws ioexception  classnotfoundexception
if  xactid    null
return xactid
if  sanitymanager debug
sanitymanager assert input    null
object obj   input readobject
if  sanitymanager debug
sanitymanager assert obj instanceof transactionid
xactid    transactionid obj
return xactid
public loggable getloggable   throws ioexception  classnotfoundexception
if  op    null 			   if log operation is already objectified
return op 			   then just return it
if  sanitymanager debug
sanitymanager assert input    null
if  xactid    null 		   xactid is not read off yet
xactid    transactionid input readobject
object obj   input readobject
if  sanitymanager debug
if      obj instanceof loggable
sanitymanager throwassert
obj getclass   getname
op    loggable obj
input   null
return op
public repreparable getrepreparable
throws ioexception  classnotfoundexception
return  repreparable  getloggable
/**
skip over the loggable.  set the input stream to point ot after the
loggable as if the entire log record has been sucked in by the log
record
@exception standardexception if the loggable is not found, log is corrupt
*/
public void skiploggable   throws standardexception
if  op    null 		   loggable already read off
return
try
if  xactid    null
xactid    transactionid input readobject   	   get rid of the transactionid
if  op    null
op    loggable input readobject   	   get rid of the loggable
catch classnotfoundexception cnfe
throw standardexception newexception sqlstate log_corrupted  cnfe
catch ioexception ioe
throw standardexception newexception sqlstate log_corrupted  ioe
public undoable getundoable   throws ioexception  classnotfoundexception
if  op    null
getloggable   		   objectify it
if  op instanceof undoable
return  undoable  op
else
return null
public boolean isclr
return   group   loggable compensation     0
public boolean isfirst
return   group   loggable first     0
public boolean iscomplete
return   group   loggable last     0
public boolean isprepare
return   group   loggable prepare     0
public boolean requirespreparelocks
return   group   loggable xa_needlock     0
public boolean iscommit
if  sanitymanager debug
sanitymanager assert  group   loggable last     loggable last
sanitymanager assert  group    loggable commit   loggable abort      0
return   group   loggable commit     0
public boolean isabort
if  sanitymanager debug
sanitymanager assert  group   loggable last     loggable last
sanitymanager assert  group    loggable commit   loggable abort      0
return   group   loggable abort     0
public int group
return group
public boolean ischecksum
return   group   loggable checksum     0