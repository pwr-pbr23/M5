/*
derby - class org.apache.derby.database.database
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby database
/*
the org.apache.derby.iapi.db.database interface is all the externally available
methods on a database.  these are methods that might be called from an
sql-j call statement. it is extended by com.ibm.db2j.impl.database.databaseinterface.database
which adds internal methods which are only called from within cloudscape code.
the javadoc comment that follows is for external consumption.
*/
import org apache derby catalog uuid
import java sql timestamp
import java sql sqlexception
import java util locale
import java io file
/**
* the database interface provides control over a database
* (that is, the stored data and the files the data are stored in),
* operations on the database such as  backup and recovery,
* and all other things that are associated with the database itself.
*
*  @see org.apache.derby.iapi.db.factory
*/
public interface database
/**
* tells whether the database is configured as read-only, or the
* database was started in read-only mode.
*
* @return	true means the database is read-only, false means it is
*		not read-only.
*/
public boolean		isreadonly
/**
* delete all stored prepared statements that were
* created for jdbc metadata queries.
*
* @exception sqlexception thrown on error deleting
*		the stored prepared statements, most likely
*		a deadlock or timeout.
*/
public void dropalljdbcmetadataspses
throws sqlexception
/**
* backup the database to a backup directory.  see online documentation
* for more detail about how to use this feature.
*
* @param backupdir the directory name where the database backup should
*         go.  this directory will be created if not it does not exist.
* @param wait if <tt>true</tt>, waits for  all the backup blocking
*             operations in progress to finish.
* @exception sqlexception thrown on error
*/
public void backup string backupdir  boolean wait
throws sqlexception
/**
* backup the database to a backup directory and enable the log archive
* mode that will keep the archived log files required for roll-forward
* from this version backup.
*
* @param backupdir                     the directory name where the
*                                      database backup should go.  this
*                                      directory will be created if it
*                                      does not exist.
*
* @param deleteonlinearchivedlogfiles  if true deletes online archived log
*                                      files that exist before this backup;
*                                      otherwise they will not be deleted.
*
*                                      deletion will occur only after
*                                      backup is complete.
*
* @param wait                          if <tt>true</tt>, waits for all
*                                      the backup blocking operations in
*                                      progress to finish.
*
* @exception sqlexception thrown on error
*/
public void backupandenablelogarchivemode
string  backupdir
boolean deleteonlinearchivedlogfiles
boolean wait
throws sqlexception
/**
* disables the log archival process, i.e no old log files
* will be kept around for a roll-forward recovery. only restore that can
* be performed after disabling log archive mode is version recovery.
*
* @param deleteonlinearchivedlogfiles  if true deletes all online archived
*                                      log files that exist before this
*                                      call immediately; otherwise they
*                                      will not be deleted.
*
* @exception sqlexception thrown on error
*/
public void disablelogarchivemode boolean deleteonlinearchivedlogfiles
throws sqlexception
/**
* freeze the database temporarily so a backup can be taken.
* <p>please see cloudscape on line documentation on backup and restore.
*
* @exception sqlexception thrown on error
*/
public void freeze   throws sqlexception
/**
* unfreeze the database after a backup has been taken.
* <p>please see cloudscape on line documentation on backup and restore.
*
* @exception sqlexception thrown on error
*/
public void unfreeze   throws sqlexception
/**
* checkpoints the database, that is, flushes all dirty data to disk.
* records a checkpoint in the transaction log, if there is a log.
*
* @exception sqlexception thrown on error
*/
public void checkpoint   throws sqlexception
/**
* get the locale for this database.
*/
public locale getlocale
/**
return the uuid of this database.
@deprecated no longer supported.
*/
public uuid getid