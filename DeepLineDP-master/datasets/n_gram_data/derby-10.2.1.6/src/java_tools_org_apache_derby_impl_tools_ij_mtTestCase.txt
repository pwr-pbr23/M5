/*
derby - class org.apache.derby.impl.tools.ij.mttestcase
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl tools ij
import java util hashtable
import java util properties
import java lang math
import java io filenotfoundexception
import java io bufferedinputstream
import java io fileinputstream
import java io ioexception
import org apache derby iapi tools i18n
/**
*/
public class mttestcase
public string name   null
public string file   null
public string propfile   null
public float weight    float  5
public hashtable ignoreerrors   null
public string description   null
private int iterations
private int attempts
public void mttestcase
public void setname string name
this name   name
public string getname
return name
public void setfile string name
this file   name
public void setinputdir string dir
file   dir       file
public string getfile
return file
public void setpropfile string name
this propfile   name
public string getpropfile
return propfile
public void setweight int weight
this weight    float  weight 100 0
public void setignoreerrors hashtable t
this ignoreerrors   t
public void setdescription string description
this description   description
/**
** initialize the test case.  see initialize(string)
*/
public synchronized bufferedinputstream initialize
throws filenotfoundexception  ioexception
return initialize null
/**
** initizalize the test case.  loads up the properties
** file and sets the input stream.  used to set up
** prior to running the thread.
*/
public synchronized bufferedinputstream initialize string inputdir
throws filenotfoundexception  ioexception
string filepath
bufferedinputstream	instream   null
// load up properties
if  propfile    null
bufferedinputstream	propstream
properties		p
string proppath    inputdir    null  ?
propfile
inputdir       propfile
try
propstream   new bufferedinputstream new fileinputstream proppath
catch  filenotfoundexception e
system out println name   proppath
throw e
p   system getproperties
p load propstream
// for network server need to alter url
string framework   p getproperty
if  framework    null
string newurlprefix   null
framework   framework touppercase java util locale english
if  framework equals       framework equals
newurlprefix
else if  framework equals
newurlprefix
if  newurlprefix    null
updateurlproperties p newurlprefix
p setproperty
p setproperty
// this is a special case for the multitest.
// check and alter url if there are any encryption related
// properties that need to be set on the url
if      equalsignorecase p getproperty
string encrypturl
string dburl   p getproperty
string encryptionalgorithm   p getproperty
if  encryptionalgorithm    null
p setproperty
dburl       encrypturl       encryptionalgorithm
else
p setproperty   dburl     encrypturl
// if the initial connection is being specified as a datasource
// on the command line using -dij.datasource=<dsclassname>
// then remove the ij.database and ij.protocol property.
// this is because the ij.database and ij.protocol
// will override the ij.datasource property.
if  system getproperty       null
p remove
p remove
system setproperties p
// set input stream
filepath    inputdir    null  ?
file    inputdir       file
try
instream   new bufferedinputstream new fileinputstream filepath
utilmain bufferedfilesize
catch  filenotfoundexception e
system out println   filepath
throw e
return instream
/**
** attempt to grab this test case.
** uses random number and the weight of this
** case to determine if the grab was successful.
**
** @return true/false
*/
public synchronized boolean grab
attempts
if  java lang math random   < weight
iterations
return true
else
return false
/**
** run the test case.  invokes ij to do our
** dirty work.
*/
public void runme localizedoutput log  localizedoutput out  bufferedinputstream infile
utilmain	utilinstance
localizedinput is
is   localizedresource getinstance   getnewinput infile
localizedinput  in     is
out println   file
utilinstance   new utilmain 1  out  ignoreerrors
utilinstance initfromenvironment
utilinstance setmtuse true
utilinstance go in  out   java util properties  null
log flush
out flush
public void updateurlproperties properties p  string newurlprefix
string propstoupdate
for  int i   0  i < propstoupdate length  i
string key   propstoupdate
string val   p getproperty key
if  val    null
p setproperty key alterurl val newurlprefix
public string alterurl string url  string newurlprefix
string urlprefix
if  url startswith newurlprefix
return url
// if we don't have a url prefix for this framework
// just return
if  newurlprefix    null
return url
if  url equals urlprefix      replace embedded
return newurlprefix
if  url startswith urlprefix
// replace jdbc:derby: with our url:
url   newurlprefix
url substring urlprefix length
else
if     url startswith
url   newurlprefix   url
//system.out.println("new url:" +url);
return url
// note: tried invoking ij directly, but had some problems,
// so stick with calling utilmain().
//	/**
//	** run the test case.  invokes ij to do our
//	** dirty work.
//	*/
//	public void runme(appstreamwriter log, appstreamwriter out, bufferedinputstream infile)
//	{
//		ascii_ucodeesc_charstream charstream;
//		ijtokenmanager	ijtokmgr;
//		ij	ijparser;
//
//
//		out.println("--------------"+file+"-----------------");
//		charstream = new ascii_ucodeesc_charstream(in, 1, 1);
//		ijtokmgr = new ijtokenmanager(charstream);
//		ijparser = new ij(ijtokmgr, system.out, this);
//		log.flush();
//		out.flush();
//	}
/**
** name says it all
*/
public string tostring
return   name
file
propfile
weight
ignoreerrors
description