/*
derby - class org.apache.derby.impl.store.raw.log.checkpointoperation
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl store raw log
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi services io formatable
import org apache derby iapi services io formatidutil
import org apache derby iapi services io storedformatids
import org apache derby catalog uuid
import org apache derby iapi store raw transaction
import org apache derby iapi store raw loggable
import org apache derby iapi store raw log loginstant
import org apache derby iapi store raw log logfactory
import org apache derby iapi store raw xact rawtransaction
import org apache derby iapi error standardexception
import org apache derby iapi services io compressednumber
import org apache derby iapi util bytearray
import java io externalizable
import java io outputstream
import java io inputstream
import java io objectinput
import java io objectoutput
import java io ioexception
import org apache derby iapi services io limitobjectinput
/**
a log operation that represents a checkpoint.
@see loggable
*/
public class checkpointoperation implements loggable
// redo lwm
protected long	redolwm
// undo lwm
protected long	undolwm
protected formatable transactiontable
public checkpointoperation long redolwm  long undolwm  formatable ttab
this redolwm   redolwm
this undolwm   undolwm
this transactiontable   ttab
/*
* formatable methods
*/
// no-arg constructor, required by formatable
public checkpointoperation     super
public void writeexternal objectoutput out  throws ioexception
compressednumber writelong out  redolwm
compressednumber writelong out  undolwm
// resolve: following write not needed, keeping it to avoid upgrade/downgrade issues.
compressednumber writeint out  0  	   no other truncation lwm
if  transactiontable    null
compressednumber writeint out  0
else
compressednumber writeint out  1
out writeobject transactiontable
public void readexternal objectinput in  throws ioexception  classnotfoundexception
redolwm   compressednumber readlong in
undolwm   compressednumber readlong in
// resolve: following read not required, keeping it to avoid upgrade/downgrade issues.
int tsize   compressednumber readint in      is there any truncationlwm?
int havettab   compressednumber readint in
if  havettab    1
transactiontable    formatable in readobject
else
transactiontable    formatable null
/**
return my format identifier.
*/
public int gettypeformatid
return storedformatids logop_checkpoint
/**
loggable methods
*/
/**
*	nothing to do unless we are rollforward recovery;
*  redoing of checkpoints during rollforward recovery allows us to restart
*  the  roll-forward recovery from the last checkpoint redone during rollforward recovery, if
*  we happen to crash during the roll-forward recovery process.
*  another reason why we need to do this is dropped table stub files
*  removed at checkpoint because the containerids may have been reused
*  after a checkpoint if the system was rebooted.
*/
public void dome transaction xact  loginstant instant  limitobjectinput in  throws standardexception
//redo the checkpoint if we are in roll-forward recovery only
if   rawtransaction xact  inrollforwardrecovery
rawtransaction xact  checkpointinrollforwardrecovery instant  redolwm
return
/**
the default for prepared log is always null for all the operations
that don't have optionaldata.  if an operation has optional data,
the operation need to prepare the optional data for this method.
checkpoint has no optional data to write out
*/
public bytearray getpreparedlog
return  bytearray  null
/**
checkpoint does not need to be redone unless
we are doing rollforward recovery.
*/
public boolean needsredo transaction xact
if   rawtransaction xact  inrollforwardrecovery
return true
else
return false
/**
checkpoint has not resource to release
*/
public void releaseresource transaction xact
/**
checkpoint is a raw store operation
*/
public int group
return loggable rawstore
/**
access attributes of the checkpoint record
*/
public long redolwm
return redolwm
public long undolwm
return undolwm
public formatable gettransactiontable
return transactiontable
/**
debug: print self.
*/
public string tostring
if  sanitymanager debug
logcounter undolwm   new logcounter undolwm
logcounter redolwm   new logcounter redolwm
stringbuffer str   new stringbuffer 1000
append
append redolwm tostring
append    append undolwm tostring
if  transactiontable    null
str append transactiontable tostring
return str tostring
else
return null