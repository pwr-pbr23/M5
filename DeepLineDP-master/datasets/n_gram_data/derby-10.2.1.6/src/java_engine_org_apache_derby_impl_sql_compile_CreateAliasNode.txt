/*
derby - class org.apache.derby.impl.sql.compile.createaliasnode
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package	org apache derby impl sql compile
import org apache derby iapi services loader classinspector
import org apache derby iapi services context contextmanager
import org apache derby iapi sql compile compilercontext
import org apache derby iapi sql compile c_nodetypes
import org apache derby iapi reference sqlstate
import org apache derby iapi reference limits
import org apache derby iapi sql resultset
import org apache derby iapi sql execute constantaction
import org apache derby iapi types typeid
import org apache derby iapi sql dictionary datadictionary
import org apache derby iapi sql dictionary tabledescriptor
import org apache derby iapi sql dictionary schemadescriptor
import org apache derby iapi error standardexception
import org apache derby iapi services monitor monitor
import org apache derby iapi services sanity sanitymanager
import org apache derby impl sql compile activationclassbuilder
import org apache derby impl sql execute baseactivation
import org apache derby catalog aliasinfo
import org apache derby catalog typedescriptor
import org apache derby catalog types routinealiasinfo
import org apache derby catalog types synonymaliasinfo
import java lang reflect member
import java util vector
/**
* a createaliasnode represents a create alias statement.
*
* @author jerry brenner
*/
public class createaliasnode extends ddlstatementnode
private string				javaclassname
private string				methodname
private char				aliastype
private boolean				delimitedidentifier
private aliasinfo aliasinfo
/**
* initializer for a createaliasnode
*
* @param aliasname				the name of the alias
* @param targetobject			target name
* @param methodname		    the method name
* @param aliastype				the alias type
* @param delimitedidentifier	whether or not to treat the class name
*								as a delimited identifier if trying to
*								resolve it as a class alias
*
* @exception standardexception		thrown on error
*/
public void init
object aliasname
object targetobject
object methodname
object aliasspecificinfo
object aliastype
object delimitedidentifier
throws standardexception
tablename qn    tablename  aliasname
this aliastype     character  aliastype  charvalue
initandcheck qn
switch  this aliastype
case aliasinfo alias_type_procedure_as_char
case aliasinfo alias_type_function_as_char
this javaclassname    string  targetobject
this methodname    string  methodname
this delimitedidentifier
boolean  delimitedidentifier  booleanvalue
//routineelements contains the description of the procedure.
//
// 0 - object[] 3 element array for parameters
// 1 - tablename - specific name
// 2 - integer - dynamic result set count
// 3 - string language (always java) - ignore
// 4 - string external name (also passed directly to create alias node - ignore
// 5 - integer parameter style
// 6 - short - sql control
// 7 - boolean - called on null input (always true for procedures)
// 8 - typedescriptor - return type (always null for procedures)
object routineelements    object  aliasspecificinfo
object parameters    object  routineelements
int paramcount     vector  parameters  size
// support for java signatures in derby was added in 10.1
// check to see the catalogs have been upgraded to 10.1 before
// accepting such a method name for a routine. otherwise
// a routine that works in 10.1 soft upgrade mode would
// exist when running 10.0 but not resolve to anything.
if  this methodname indexof        1
getdatadictionary   checkversion
datadictionary dd_version_derby_10_1
string names   null
typedescriptor types   null
int modes   null
if  paramcount > limits db2_max_params_in_stored_procedure
throw standardexception newexception sqlstate lang_too_many_parameters_for_stored_proc
string valueof limits db2_max_params_in_stored_procedure   aliasname  string valueof paramcount
if  paramcount    0
names   new string
vector  parameters  copyinto names
types   new typedescriptor
vector  parameters  copyinto types
modes   new int
for  int i   0  i < paramcount  i
modes     integer     vector  parameters  elementat i    intvalue
if  typeid getbuiltintypeid types getjdbctypeid    islongconcatabletypeid
throw standardexception newexception sqlstate lang_long_data_type_not_allowed  names
if  paramcount > 1
string dupnamecheck   new string
system arraycopy names  0  dupnamecheck  0  paramcount
java util arrays sort dupnamecheck
for  int dnc   1  dnc < dupnamecheck length  dnc
if  dupnamecheck equals dupnamecheck
throw standardexception newexception sqlstate lang_db2_duplicate_names  dupnamecheck  getfullname
integer drso    integer  routineelements
int drs   drso    null ? 0   drso intvalue
short sqlallowed
short sqlallowedobject    short  routineelements
if  sqlallowedobject    null
sqlallowed   sqlallowedobject shortvalue
else
sqlallowed    this aliastype    aliasinfo alias_type_procedure_as_char ?
routinealiasinfo modifies_sql_data   routinealiasinfo reads_sql_data
boolean calledonnullinputo    boolean  routineelements
boolean calledonnullinput
if  calledonnullinputo    null
calledonnullinput   true
else
calledonnullinput   calledonnullinputo booleanvalue
aliasinfo   new routinealiasinfo this methodname  paramcount  names  types  modes  drs
short  routineelements  shortvalue   	   parameter style
sqlallowed  calledonnullinput   typedescriptor  routineelements
implicitcreateschema   true
break
case aliasinfo alias_type_synonym_as_char
string targetschema
implicitcreateschema   true
tablename t    tablename  targetobject
if  t getschemaname      null
targetschema   t getschemaname
else targetschema   getschemadescriptor   getschemaname
aliasinfo   new synonymaliasinfo targetschema  t gettablename
break
default
if  sanitymanager debug
sanitymanager throwassert
aliastype
public string statementtostring
switch  this aliastype
case aliasinfo alias_type_procedure_as_char
return
case aliasinfo alias_type_synonym_as_char
return
default
return
// we inherit the generate() method from ddlstatementnode.
/**
* bind this createaliasnode.  this means doing any static error
* checking that can be done before actually creating the table.
* for example, verifying that the column name list does not
* contain any duplicate column names.
*
* @return	the bound query tree
*
* @exception standardexception		thrown on error
*/
public querytreenode bind   throws standardexception
// procedures and functions do not check class or method validity until
// runtime execution. synonyms do need some validity checks.
if  aliastype    aliasinfo alias_type_synonym_as_char
return this
// don't allow creating synonyms in session schema. causes confusion if
// a temporary table is created later with same name.
if  issessionschema getschemadescriptor   getschemaname
throw standardexception newexception sqlstate lang_operation_not_allowed_on_session_schema_tables
string targetschema     synonymaliasinfo aliasinfo  getsynonymschema
string targettable     synonymaliasinfo aliasinfo  getsynonymtable
if  this getobjectname   equals targetschema  targettable
throw standardexception newexception sqlstate lang_synonym_circular
this getfullname
targetschema   targettable
schemadescriptor targetsd   getschemadescriptor targetschema  false
if   targetsd    null     issessionschema targetsd
throw standardexception newexception sqlstate lang_operation_not_allowed_on_session_schema_tables
return this
/**
* create the constant information that will drive the guts of execution.
*
* @exception standardexception		thrown on failure
*/
public constantaction	makeconstantaction   throws standardexception
string schemaname
switch  aliastype
case aliasinfo alias_type_procedure_as_char
case aliasinfo alias_type_function_as_char
schemaname   getschemadescriptor   getschemaname
break
case aliasinfo alias_type_synonym_as_char
schemaname   getschemadescriptor   getschemaname
break
default
schemaname   null
return	getgenericconstantactionfactory   getcreatealiasconstantaction
getrelativename
schemaname
javaclassname
aliasinfo
aliastype