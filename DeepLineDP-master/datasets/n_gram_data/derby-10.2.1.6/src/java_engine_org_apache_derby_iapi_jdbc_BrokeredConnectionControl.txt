/*
derby - class org.apache.derby.iapi.jdbc.brokeredconnectioncontrol
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi jdbc
import java sql sqlexception
import java sql statement
import java sql preparedstatement
import java sql callablestatement
/**
provides control over a brokeredconnection
*/
public interface brokeredconnectioncontrol
/**
return the real jdbc connection for the brokered connection.
*/
public engineconnection	getrealconnection   throws sqlexception
/**
notify the control class that a sqlexception was thrown
during a call on one of the brokered connection's methods.
*/
public void notifyexception sqlexception sqle
/**
allow control over setting auto commit mode.
*/
public void checkautocommit boolean autocommit  throws sqlexception
/**
allow control over creating a savepoint (jdbc 3.0)
*/
public void checksavepoint   throws sqlexception
/**
allow control over calling rollback.
*/
public void checkrollback   throws sqlexception
/**
allow control over calling commit.
*/
public void checkcommit   throws sqlexception
/**
can cursors be held across commits.
@param downgrade true to downgrade the holdability,
false to throw an exception.
*/
public int checkholdcursors int holdability  boolean downgrade
throws sqlexception
/**
returns true if isolation level has been set using jdbc/sql.
*/
public boolean isisolationlevelsetusingsqlorjdbc   throws sqlexception
/**
reset the isolation level flag used to keep state in
brokeredconnection. it will get set to true when isolation level
is set using jdbc/sql. it will get reset to false at the start
and the end of a global transaction.
*/
public void resetisolationlevelflag   throws sqlexception
/**
close called on brokeredconnection. if this call
returns true then getrealconnection().close() will be called.
*/
public boolean closingconnection   throws sqlexception
/**
optionally wrap a statement with another statement.
*/
public statement wrapstatement statement realstatement  throws sqlexception
/**
optionally wrap a preparedstatement with another preparedstatement.
*/
public preparedstatement wrapstatement preparedstatement realstatement  string sql  object generatekeys   throws sqlexception
/**
optionally wrap a callablestatement with an callablestatement.
*/
public callablestatement wrapstatement callablestatement realstatement  string sql  throws sqlexception
/**
* close called on the associated preparedstatement object
* @param statement preparedstatement object on which the close event
* occurred
*/
public void onstatementclose preparedstatement statement
/**
* error occurred on associated preparedstatement object
* @param statement preparedstatement object on which the
* error occured
* @param sqle      the sqlexeption that caused the error
*/
public void onstatementerroroccurred preparedstatement statement sqlexception sqle