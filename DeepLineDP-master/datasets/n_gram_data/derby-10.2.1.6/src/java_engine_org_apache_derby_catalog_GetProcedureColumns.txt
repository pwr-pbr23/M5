/*
derby - class org.apache.derby.catalog.getprocedurecolumns
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby catalog
import java sql types
import java lang reflect
import java sql resultsetmetadata
import java sql sqlexception
import java sql databasemetadata
import org apache derby catalog typedescriptor
import org apache derby iapi types datatypedescriptor
import org apache derby iapi types datatypeutilities
import org apache derby iapi sql resultcolumndescriptor
import org apache derby impl jdbc embedresultsetmetadata
import org apache derby catalog types routinealiasinfo
import org apache derby shared common reference jdbc40translation
/**
<p>use of virtualtableinterface to provide support for
databasemetadata.getprocedurecolumns().
<p>this class is called from a query constructed in
java/org.apache.derby.impl.jdbc/metadata.properties:
<pre>
<p>the vti will return columns 3-14, an extra column to the specification
method_id is returned to distinguish between overloaded methods.
<ol>
<li><b>procedure_cat</b> string => procedure catalog (may be null)
<li><b>procedure_schem</b> string => procedure schema (may be null)
<li><b>procedure_name</b> string => procedure name
<li><b>column_name</b> string => column/parameter name
<li><b>column_type</b> short => kind of column/parameter:
<ul>
<li> procedurecolumnunknown - nobody knows
<li> procedurecolumnin - in parameter
<li> procedurecolumninout - inout parameter
<li> procedurecolumnout - out parameter
<li> procedurecolumnreturn - procedure return value
<li> procedurecolumnresult - result column in resultset
</ul>
<li><b>data_type</b> int => sql type from java.sql.types
<li><b>type_name</b> string => sql type name, for a udt type the
type name is fully qualified
<li><b>precision</b> int => precision
<li><b>length</b> int => length in bytes of data
<li><b>scale</b> short => scale
<li><b>radix</b> short => radix
<li><b>nullable</b> short => can it contain null?
<ul>
<li> procedurenonulls - does not allow null values
<li> procedurenullable - allows null values
<li> procedurenullableunknown - nullability unknown
</ul>
<li><b>remarks</b> string => comment describing parameter/column
<li><b>method_id</b> short => cloudscape extra column (overloading)
<li><b>parameter_id</b> short => cloudscape extra column (output order)
</ol>
*/
public class getprocedurecolumns extends org apache derby vti vtitemplate
private boolean isfunction
private int translate int val
if   isfunction    return val
switch  val
case databasemetadata procedurecolumnunknown
return jdbc40translation function_parameter_unknown
case databasemetadata procedurecolumnin
return jdbc40translation function_parameter_in
case databasemetadata procedurecolumninout
return jdbc40translation function_parameter_inout
case databasemetadata procedurecolumnout
return jdbc40translation function_parameter_out
case databasemetadata procedurecolumnreturn
return jdbc40translation function_return
default
return jdbc40translation function_parameter_unknown
private boolean isprocedure
// state for procedures.
private routinealiasinfo procedure
private int paramcursor
private short method_count
private short param_number
private typedescriptor sqltype
private string columnname
private short columntype
private final short nullable
public resultsetmetadata getmetadata
return metadata
//
// instantiates the vti given a class name and methodname.
//
// @exception sqlexception  thrown if there is a sql error.
//
//
public getprocedurecolumns aliasinfo aliasinfo  string aliastype  throws sqlexception
// compile time aliasinfo will be null.
if  aliasinfo    null
isprocedure   aliastype equals
isfunction   aliastype equals
procedure    routinealiasinfo  aliasinfo
method_count    short  procedure getparametercount
if  aliastype    null
nullable   0
return
if  isfunction
nullable    short  jdbc40translation function_nullable
sqltype   procedure getreturntype
columnname          column_name is varchar not null
columntype    short  jdbc40translation function_return
paramcursor    2
return
nullable    short  databasemetadata procedurenullable
paramcursor    1
public boolean next   throws sqlexception
if    paramcursor >  procedure getparametercount
return false
if  paramcursor >  1
sqltype        procedure getparametertypes
columnname     procedure getparameternames
columntype
short translate procedure getparametermodes
param_number    short  paramcursor
return true
//
// get the value of the specified data type from a column.
//
// @exception sqlexception  thrown if there is a sql error.
//
//
public string getstring int column  throws sqlexception
switch  column
case 1     column_name
return columnname
case 4    _type_name
return sqltype gettypename
case 10     remarks
return null
default
return super getstring column       throw exception
//
// get the value of the specified data type from a column.
//
// @exception sqlexception  thrown if there is a sql error.
//
//
public int getint int column  throws sqlexception
switch  column
case 3     data_type
if  sqltype    null
return sqltype getjdbctypeid
return java sql types java_object
case 5     precision
if  sqltype    null
int type   sqltype getjdbctypeid
if  datatypedescriptor isnumerictype type
return sqltype getprecision
else if  type    types date    type    types time
type    types timestamp
return datatypeutilities getcolumndisplaysize type   1
else
return sqltype getmaximumwidth
// no corresponding sql type
return 0
case 6     length  in bytes
if  sqltype    null
return sqltype getmaximumwidthinbytes
// no corresponding sql type
return 0
default
return super getint column       throw exception
//
// get the value of the specified data type from a column.
//
// @exception sqlexception  thrown if there is a sql error.
//
//
public short getshort int column  throws sqlexception
switch  column
case 2     column_type
return columntype
case 7     scale
if  sqltype    null
return  short sqltype getscale
// no corresponding sql type
return 0
case 8     radix
if  sqltype    null
int sqltypeid   sqltype getjdbctypeid
if  sqltypeid    java sql types real
sqltypeid    java sql types float
sqltypeid    java sql types double
return 2
return 10
// no corresponding sql type
return 0
//fixme
case 9     nullable
return nullable
case 11     method_id
return method_count
case 12     parameter_id
return param_number
default
return super getshort column       throw exception
public void close
/*
** metadata
*/
private static final resultcolumndescriptor columninfo
embedresultsetmetadata getresultcolumndescriptor   				 types varchar  false  128
embedresultsetmetadata getresultcolumndescriptor   				 types smallint  false
embedresultsetmetadata getresultcolumndescriptor   				 types integer  false
embedresultsetmetadata getresultcolumndescriptor   				 types varchar  false  22
embedresultsetmetadata getresultcolumndescriptor   				 types integer  false
embedresultsetmetadata getresultcolumndescriptor   					 types integer  false
embedresultsetmetadata getresultcolumndescriptor   					 types smallint  false
embedresultsetmetadata getresultcolumndescriptor   					 types smallint  false
embedresultsetmetadata getresultcolumndescriptor   				 types smallint  false
embedresultsetmetadata getresultcolumndescriptor   					 types varchar  true  22
embedresultsetmetadata getresultcolumndescriptor   				 types smallint  false
embedresultsetmetadata getresultcolumndescriptor   			 types smallint  false
private static final resultsetmetadata metadata   new embedresultsetmetadata columninfo