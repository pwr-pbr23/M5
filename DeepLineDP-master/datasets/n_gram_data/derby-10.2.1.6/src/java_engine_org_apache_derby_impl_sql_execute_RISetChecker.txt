/*
derby - class org.apache.derby.impl.sql.execute.risetchecker
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl sql execute
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi error standardexception
import org apache derby iapi sql execute execrow
import org apache derby iapi sql execute execindexrow
import org apache derby iapi store access transactioncontroller
/**
* checks a set or referential integrity constraints.  used
* to shield the caller from referencedkeyrichecker and
* foreignkeyricheckers.
*/
public class risetchecker
private genericrichecker 	checkers
/**
* @param tc		the xact controller
* @param fkinfo	the foreign key information
*
* @exception standardexception		thrown on failure
*/
public risetchecker transactioncontroller tc  fkinfo fkinfo
throws standardexception
if  fkinfo    null
return
checkers   new genericrichecker
for  int i   0  i < fkinfo length  i
checkers    fkinfo type    fkinfo foreign_key  ?
genericrichecker new foreignkeyrichecker tc  fkinfo
genericrichecker new referencedkeyrichecker tc  fkinfo
/**
* do any work needed to reopen our ri checkers
* for another round of checks.  must do a close()
* first.
*
* @exception standardexception on error
*/
void reopen   throws standardexception
// currently a noop
/**
* check that there are no referenced primary keys in
* the passed in row.  so for each foreign key that
* references a primary key constraint, make sure
* that there is no row that matches the values in
* the passed in row.
*
* @param row	the row to check
*
* @exception standardexception on unexpected error, or
*		on a primary/unique key violation
*/
public void dopkcheck execrow row  boolean restrictcheckonly  throws standardexception
if  checkers    null
return
for  int i   0  i < checkers length  i
if  checkers instanceof referencedkeyrichecker
checkers docheck row restrictcheckonly
/**
* check that everything in the row is ok, i.e.
* that there are no foreign keys in the passed
* in row that have invalid values.
*
* @param row	the row to check
*
* @exception standardexception on unexpected error, or
*		on a primary/unique key violation
*/
public void dofkcheck execrow row  throws standardexception
if  checkers    null
return
for  int i   0  i < checkers length  i
if  checkers instanceof foreignkeyrichecker
checkers docheck row
/**
* execute the specific ri check on the passed in row.
*
* @param index	index into fkinfo
* @param row		the row to check
*
* @exception standardexception on unexpected error, or
*		on a primary/unique key violation
*/
public void doricheck int index  execrow row  boolean restrictcheckonly  throws standardexception
if  sanitymanager debug
if  checkers    null
sanitymanager throwassert   index
if  index >  checkers length
sanitymanager throwassert
checkers length   index
checkers docheck row  restrictcheckonly
/**
* clean up
*
* @exception standardexception on error
*/
public void close   throws standardexception
if  checkers    null
return
for  int i   0  i < checkers length  i
checkers close