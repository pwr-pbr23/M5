/*
derby - class org.apache.derby.impl.store.raw.xact.rowlocking1
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl store raw xact
import org apache derby iapi services locks lockfactory
import org apache derby iapi services locks c_lockfactory
import org apache derby iapi services locks latch
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi store raw containerhandle
import org apache derby iapi store raw containerlock
import org apache derby iapi store raw lockingpolicy
import org apache derby iapi store raw recordhandle
import org apache derby iapi store raw rowlock
import org apache derby iapi store raw transaction
import org apache derby iapi error standardexception
/**
a locking policy that implements row level locking with isolation degree 1.
this is an implementation of gray's degree 1 isolation, read uncommitted,
or often referred to as dirty reads.  basically read operations are
done with no locking.
this locking policy is only to be used for read operations.
the approach is to place all "write" container and row locks on the
transaction group lock list.  locks on this group will last until end
of transaction.
this implementation will still get table level intent locks.  this is to
prevent hard cases where the container otherwise could be deleted while
read uncommitted reader is still accessing it.  in order to not get table
level intent locks some sort of other ddl level lock would have to be
implemented.
all "read" row locks will be not be requested.
note that write operations extend from the rowlocking3 implementations.
@see org.apache.derby.iapi.store.raw.lockingpolicy
*/
public class rowlocking1 extends rowlocking2
protected rowlocking1 lockfactory lf
super lf
/**
* obtain lock on record being read.
* <p>
* assumes that a table level is has been acquired.  will acquire a shared
* or update lock on the row, depending on the "forupdate" parameter.
* <p>
* read lock will be placed on separate group from transaction.
*
* @param t             the transaction to associate the lock with.
* @param record        the record to be locked.
* @param waitforlock   should lock request wait until granted?
* @param forupdate     whether to open for read or write access.
*
* @return true if the lock was granted, false if waitforlock was false
* and the lock could not be granted.
*
* @exception  standardexception  standard exception policy.
**/
public boolean lockrecordforread
transaction     t
containerhandle container_handle
recordhandle    record
boolean         waitforlock
boolean         forupdate
throws standardexception
return
forupdate ?
true
super lockrecordforread
t  container_handle  record  waitforlock  forupdate
/**
* obtain lock on record being read while holding a latch.
* <p>
* assumes that a table level is has been acquired.  will acquire a shared
* or update lock on the row, depending on the "forupdate" parameter.
* <p>
*
* @param latch         the latch being held.
* @param record        the record to be locked.
* @param forupdate     whether to open for read or write access.
*
* @exception  standardexception  standard exception policy.
**/
public void lockrecordforread
latch			latch
recordhandle    record
boolean         forupdate
throws standardexception
if  forupdate
super lockrecordforread latch  record  forupdate
public void unlockrecordafterread
transaction     t
containerhandle container_handle
recordhandle    record
boolean         forupdate
boolean         row_qualified
throws standardexception
if  forupdate
super unlockrecordafterread
t  container_handle  record  forupdate  row_qualified
return