/*
derby - class org.apache.derby.iapi.types.stringdatavalue
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi types
import org apache derby iapi error standardexception
public interface stringdatavalue extends concatabledatavalue
// trim() types
public static final int both		  0
public static final int trailing	  1
public static final int leading		  2
/**
* the sql concatenation '||' operator.
*
* @param leftoperand	string on the left hand side of '||'
* @param rightoperand	string on the right hand side of '||'
* @param result	the result of a previous call to this method,
*					null if not called yet.
*
* @return	a concatabledatavalue containing the result of the '||'
*
* @exception standardexception		thrown on error
*/
public stringdatavalue concatenate
stringdatavalue leftoperand
stringdatavalue rightoperand
stringdatavalue result
throws standardexception
/**
* the sql like() function with out escape clause.
*
* @param pattern	the pattern to use
*
* @return	a booleandatavalue containing the result of the like
*
* @exception standardexception		thrown on error
*/
public booleandatavalue like datavaluedescriptor pattern
throws standardexception
/**
* the sql like() function with escape clause.
*
* @param pattern	the pattern to use
* @param escape	the escape character
*
* @return	a booleandatavalue containing the result of the like
*
* @exception standardexception		thrown on error
*/
public booleandatavalue like datavaluedescriptor pattern
datavaluedescriptor escape
throws standardexception
/**
* the sql trim(), ltrim() and rtrim() functions.
*
* @param trimtype	type of trim
* @param result	the result of a previous call to this method,
*					null if not called yet.
*
* @return	a stringdatavalue containing the result of the trim()
*
* @exception standardexception		thrown on error
*/
public stringdatavalue trim
int trimtype
stringdatavalue result
throws standardexception
/**
* convert the string to upper case.
*
* @param result	the result (reusable - allocate if null).
*
* @return	the string converted to upper case.
*
* @exception standardexception		thrown on error
*/
public stringdatavalue upper stringdatavalue result
throws standardexception
/**
* convert the string to lower case.
*
* @param result	the result (reusable - allocate if null).
*
* @return	the string converted to lower case.
*
* @exception standardexception		thrown on error
*/
public stringdatavalue lower stringdatavalue result
throws standardexception
/**
* position in searchfrom of the first occurrence of this.value.
* the search begins from position start.  0 is returned if searchfrom does
* not contain this.value.  position 1 is the first character in searchfrom.
*
* @param searchfrom    - the string to search from
* @param start         - the position to search from in string searchfrom
* @param result        - the object to return
*
* @return  the position in searchfrom the fist occurrence of this.value.
*              0 is returned if searchfrom does not contain this.value.
* @exception standardexception     thrown on error
*/
public numberdatavalue locate   stringdatavalue searchfrom
numberdatavalue start
numberdatavalue result
throws standardexception
/**
* get a char array.  typically, this is a simple
* getter that is cheaper than getstring() because
* we always need to create a char array when
* doing i/o.  use this instead of getstring() where
* reasonable.
* <p>
* <b>warning</b>: may return a character array that has spare
* characters at the end.  must be used in conjunction
* with getlength() to be safe.
*
* @exception standardexception		thrown on error
*/
public char getchararray   throws standardexception