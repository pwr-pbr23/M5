/*
derby - class org.apache.derby.impl.sql.compile.lobtypecompiler
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl sql compile
import org apache derby iapi services loader classfactory
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi services io storedformatids
import org apache derby iapi error standardexception
import org apache derby iapi types bitdatavalue
import org apache derby iapi types datavaluefactory
import org apache derby iapi types typeid
import org apache derby iapi types datatypedescriptor
import org apache derby iapi sql compile typecompiler
import org apache derby iapi reference classname
import java sql types
import org apache derby iapi reference jdbc20translation
/**
* this class implements typecompiler for the sql lob types.
*
* @author jonas s karlsson
*/
public class lobtypecompiler extends basetypecompiler
/**
* tell whether this type (blob) can be compared to the given type. //
* blobs are not comparable.
*
* @param othertype     the typeid of the other type.
*/
public boolean comparable typeid othertype
boolean forequals
classfactory cf
return false
/**
* tell whether this type (lob) can be converted to the given type.
*
* @see typecompiler#convertible
*/
public boolean convertible typeid othertype
boolean fordatatypefunction
return   othertype isblobtypeid
/**
* tell whether this type (lob) is compatible with the given type.
*
* @param othertype     the typeid of the other type.
*/
public boolean compatible typeid othertype
return convertible othertype false
/**
* tell whether this type (lob) can be stored into from the given type.
*
* @param othertype     the typeid of the other type.
* @param cf            a classfactory
*/
public boolean storable typeid othertype  classfactory cf
// no automatic conversions at store time
return   othertype isblobtypeid
/** @see typecompiler#interfacename */
public string interfacename
return classname bitdatavalue
/**
* @see typecompiler#getcorrespondingprimitivetypename
*/
public string getcorrespondingprimitivetypename
int formatid   getstoredformatidfromtypeid
switch  formatid
case storedformatids blob_type_id   return
default
if  sanitymanager debug
sanitymanager throwassert     formatid
return null
/**
* @see typecompiler#getcasttocharwidth
*/
public int getcasttocharwidth datatypedescriptor dts
return dts getmaximumwidth
protected string nullmethodname
int formatid   getstoredformatidfromtypeid
switch  formatid
case storedformatids blob_type_id   return
default
if  sanitymanager debug
sanitymanager throwassert     formatid
return null
protected string datavaluemethodname
int formatid   getstoredformatidfromtypeid
switch  formatid
case storedformatids blob_type_id   return
default
if  sanitymanager debug
sanitymanager throwassert     formatid
return null