/*
derby - class org.apache.derby.impl.store.raw.xact.rowlocking2nohold
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl store raw xact
import org apache derby iapi services locks lockfactory
import org apache derby iapi services locks c_lockfactory
import org apache derby iapi services locks latch
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi store raw containerhandle
import org apache derby iapi store raw containerlock
import org apache derby iapi store raw lockingpolicy
import org apache derby iapi store raw recordhandle
import org apache derby iapi store raw rowlock
import org apache derby iapi store raw transaction
import org apache derby iapi error standardexception
/**
a locking policy that implements row level locking with isolation degree 2,
never holding read locks after they are granted.
exactly the same as rowlocking2, except that read locks are acquired using
zeroduration locks, which are immediately released by the lock manager
after they are granted.
@see org.apache.derby.iapi.store.raw.lockingpolicy
*/
public class rowlocking2nohold extends rowlocking2
protected rowlocking2nohold lockfactory lf
super lf
/**
* obtain lock on record being read.
* <p>
* assumes that a table level is has been acquired.  will acquire a shared
* or update lock on the row, depending on the "forupdate" parameter.
* <p>
* read lock will be acquired using zeroduration lock.
*
* @param t             the transaction to associate the lock with.
* @param record        the record to be locked.
* @param waitforlock   should lock request wait until granted?
* @param forupdate     whether to open for read or write access.
*
* @return true if the lock was granted, false if waitforlock was false
* and the lock could not be granted.
*
* @exception  standardexception  standard exception policy.
**/
public boolean lockrecordforread
transaction     t
containerhandle container_handle
recordhandle    record
boolean         waitforlock
boolean         forupdate
throws standardexception
// resolve - figure out what is right for update locks, for now throw
// if they are used.
if  sanitymanager debug
sanitymanager assert  forupdate
return lf zerodurationlockobject
t getcompatibilityspace
record
forupdate ? rowlock ru2   rowlock rs2
waitforlock ?
c_lockfactory timed_wait   c_lockfactory no_wait
public void unlockrecordafterread
transaction     t
containerhandle container_handle
recordhandle    record
boolean         forupdate
boolean         row_qualified
return