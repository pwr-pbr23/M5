/*
derby - class org.apache.derby.iapi.services.cache.cacheablefactory
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi services cache
/**
any object that implements this interface can be cached using the services of
the cachemanager/cachefactory. in addition to implementing this interface the
class must be public and it must have a public no-arg constructor. this is because
the cache manager will construct objects itself and then set their identity
by calling the setidentity method.
<p>
a cacheable object has five states:
<ol>
<ol>
<li> no identity - the object is only accessable by the cache manager
<li> identity, clean, unkept - the object has an identity, is clean but is only accessable by the cache manager
<li> identity, clean, kept - the object has an identity, is clean, and is in use by one or more threads
<li> identity, kept, dirty - the object has an identity, is dirty, and is in use by one or more threads
<li> identity, unkept, dirty - the object has an identity, is dirty but is only accessable by the cache manager
</ol>
</ol>
<br>
while the object is kept it is guaranteed
not to change identity. while it is unkept no-one outside of the
cache manager can have a reference to the object.
the cache manager returns kept objects and they return to the unkept state
when all the current users of the object have released it.
<br>
it is required that the object can only move into a dirty state while it is kept.
<br> mt - mutable : thread aware - calls to cacheable method must only be made by the
cache manager or the object itself.
@see cachemanager
@see cachefactory
@see class#newinstance
*/
public interface cacheablefactory
public cacheable newcacheable cachemanager cm