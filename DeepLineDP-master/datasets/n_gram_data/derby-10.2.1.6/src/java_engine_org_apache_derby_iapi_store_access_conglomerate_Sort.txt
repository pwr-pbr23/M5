/*
derby - class org.apache.derby.iapi.store.access.conglomerate.sort
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi store access conglomerate
import org apache derby iapi error standardexception
import org apache derby iapi store access conglomerate transactionmanager
import org apache derby iapi store access scancontroller
import org apache derby iapi store access sortcontroller
import org apache derby iapi store access transactioncontroller
/**
the sort interface corresponds to an instance of an in-progress sort.
sorts are not persistent.
**/
public interface sort
/**
open a sort controller.
<p>
the sort may have been dropped already, in which case
this method should thrown an exception.
@exception standardexception standard exception policy.
**/
sortcontroller open transactionmanager tran
throws standardexception
/**
open a scan controller.
<p>
the sort may have been dropped already, in which case
this method should thrown an exception.
@exception standardexception standard exception policy.
**/
scancontroller opensortscan
transactionmanager  tran
boolean             hold
throws standardexception
/**
open a row source to get rows out of the sorter.
<p>
the sort may have been dropped already, in which case
this method should thrown an exception.
@exception standardexception standard exception policy.
**/
scancontrollerrowsource opensortrowsource transactionmanager tran
throws standardexception
/**
drop the sort - this means release all its resources.
<p>
note: drop is like close, it has to be tolerant of
being called more than once, it must succeed or at
least not throw any exceptions.
**/
void drop transactioncontroller tran
throws standardexception