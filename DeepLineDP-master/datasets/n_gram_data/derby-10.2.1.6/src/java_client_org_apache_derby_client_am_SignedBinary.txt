/*
derby - class org.apache.derby.client.am.signedbinary
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby client am
public class signedbinary
// hide the default constructor, this is a static class.
private signedbinary
/**
* unix byte-order for signed binary representations.
*/
public final static int big_endian   1
/**
* intel 80/86 reversed byte-order for signed binary representations.
*/
public final static int little_endian   2
/**
* build a java short from a 2-byte signed binary representation.
*
* @throws illegalargumentexception if the specified byte order is not recognized.
*/
public static final short getshort byte buffer  int offset
return  short     buffer   0xff  << 8
buffer   0xff  << 0
/**
* build a java int from a 4-byte signed binary representation.
*
* @throws illegalargumentexception if the specified byte order is not recognized.
*/
public static final int getint byte buffer  int offset
return  int     buffer   0xff  << 24
buffer   0xff  << 16
buffer   0xff  << 8
buffer   0xff  << 0
/**
* build a java long from an 8-byte signed binary representation.
*
* @throws illegalargumentexception if the specified byte order is not recognized.
*/
public static final long getlong byte buffer  int offset
return  long     buffer   0xffl  << 56
buffer   0xffl  << 48
buffer   0xffl  << 40
buffer   0xffl  << 32
buffer   0xffl  << 24
buffer   0xffl  << 16
buffer   0xffl  << 8
buffer   0xffl  << 0
//--------------------- input converters -------------------------------------
/**
* write a java short to a 2-byte big endian signed binary representation.
*/
public static final void shorttobigendianbytes byte buffer  int offset  short v
buffer    byte    v >>> 8    0xff
buffer    byte    v >>> 0    0xff
/**
* write a java int to a 4-byte big endian signed binary representation.
*/
public static final void inttobigendianbytes byte buffer  int offset  int v
buffer    byte    v >>> 24    0xff
buffer    byte    v >>> 16    0xff
buffer    byte    v >>> 8    0xff
buffer    byte    v >>> 0    0xff
/**
* write a java long to an 8-byte big endian signed binary representation.
*/
public static final void longtobigendianbytes byte buffer  int offset  long v
buffer    byte    v >>> 56    0xff
buffer    byte    v >>> 48    0xff
buffer    byte    v >>> 40    0xff
buffer    byte    v >>> 32    0xff
buffer    byte    v >>> 24    0xff
buffer    byte    v >>> 16    0xff
buffer    byte    v >>> 8    0xff
buffer    byte    v >>> 0    0xff