/*
derby - class org.apache.derby.iapi.sql.execute.executionfactory
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi sql execute
import org apache derby iapi sql activation
import org apache derby iapi error standardexception
import org apache derby iapi sql conn languageconnectioncontext
import org apache derby iapi sql activation
import org apache derby iapi sql resultcolumndescriptor
import org apache derby iapi sql resultdescription
import org apache derby iapi store access dynamiccompiledopenconglominfo
import org apache derby iapi store access qualifier
import org apache derby iapi sql dictionary indexrowgenerator
import org apache derby iapi store access staticcompiledopenconglominfo
import org apache derby iapi store access transactioncontroller
import java util properties
import org apache derby iapi services io formatablebitset
import org apache derby iapi services loader generatedmethod
import org apache derby iapi services context contextmanager
import org apache derby catalog typedescriptor
import org apache derby catalog uuid
/**
this is the factory for creating a factories needed by
execution per connection, and the context to hold them.
<p>
there is expected to be one of these configured per database.
<p>
if a factory is needed outside of execution (say,
data dictionary or compilation), then it belongs in the
languageconnectioncontext.
@see org.apache.derby.iapi.sql.conn.languageconnectioncontext
@author ames
*/
public interface executionfactory
/**
module name for the monitor's module locating system.
*/
string module
/**
only one result set factory is needed for a database
in the system.
we require that an execution factory be configured for
each database. each execution factory then needs to
know about the result set factory it is maintaining
for its database, so that it can provide it through
calls to this method.
so, we reuse the result set factory by making it
available to each connection
in that connection's execution context.
@return the result set factory for this database.
*/
resultsetfactory getresultsetfactory
/**
we want an execution context so that we can push it onto
the stack.  we could instead require the implementation
push it onto the stack for us, but this way we know
which context object exactly was pushed onto the stack.
@param cm  the context manager
*/
executioncontext newexecutioncontext contextmanager cm
/**
* create an execution time resultcolumndescriptor from a
* compile time rcd.
*
* @param compilercd	the compile time rcd.
*
* @return the execution time resultcolumndescriptor
*/
resultcolumndescriptor getresultcolumndescriptor resultcolumndescriptor compilercd
/**
* create a result description given parameters for it.
*/
resultdescription getresultdescription resultcolumndescriptor columns
string statementtype
/**
* get an array of scanqualifiers for a scan.  scanqualifiers are used
* with the datadictionary.
*
* @param numqualifiers	the number of scanqualifiers to get.
*/
scanqualifier getscanqualifier int numqualifiers
/**
* release a scanqualifier[] (back to the pool or free it).
*/
void releasescanqualifier scanqualifier scanqualifiers
/**
* get a qualifier to use with a scan of a conglomerate.
*
* @param columnid	the store id of the column to qualify
* @param operator	one of orderable.order_op_equals,
*					orderable.order_op_lessthan,
*					or orderable.order_op_lessorequals
* @param orderablegetter	a generated method that returns the
*							orderable to be compared with the column
* @param activation	the activation that acts as the receiver for the
*						generated method
* @param orderednulls	true means that null == null for the sake of
*						this qualifier
* @param unknownrv	the value to return if the comparison between
*					the column and the orderable value returns the
*					unknown truth value
* @param negatecompareresult	true means to negate the result of the comparison.
*					so, for example, to do a > comparison, you would
*					pass order_op_lessorequals and set negate to true.
* @param varianttype	the varianttype for the qualifier's orderable.
*						(determines whether or not to cache the value.)
*
* @return	a new qualifier
*/
qualifier getqualifier int columnid
int operator
generatedmethod orderablegetter
activation activation
boolean orderednulls
boolean unknownrv
boolean negatecompareresult
int varianttype
/**
create a new rowchanger for performing update and delete
operations based on full before and after rows.
@param heapconglom	conglomerate # for the heap
@param heapscoci the scoci for the heap.
@param heapdcoci the dcoci for the heap.
@param irgs the indexrowgenerators for the table's indexes. we use
positions in this array as local id's for indexes. to support updates,
only indexes that change need be included.
@param indexcids the conglomerateids for the table's idexes.
indexcids[ix] corresponds to the same index as irgs[ix].
@param indexscocis the scocis for the table's idexes.
indexscocis[ix] corresponds to the same index as irgs[ix].
@param indexdcocis the dcocis for the table's idexes.
indexdcocis[ix] corresponds to the same index as irgs[ix].
@param numberofcolumns number of columns in a full row.
@param tc the transaction controller
@param streamstorableheapcolids column ids of stream storable
columns. (0 based, only needed for sync. null if none or
not needed).
@param activation	the activation.
@exception standardexception		thrown on error
*/
public rowchanger
getrowchanger long heapconglom
staticcompiledopenconglominfo heapscoci
dynamiccompiledopenconglominfo heapdcoci
indexrowgenerator irgs
long indexcids
staticcompiledopenconglominfo indexscocis
dynamiccompiledopenconglominfo indexdcocis
int numberofcolumns
transactioncontroller tc
int changedcolumnids
int streamstorableheapcolids
activation activation  throws standardexception
/**
create a new rowchanger for doing insert update and delete
operations based on partial before and after.
@param heapconglom	conglomerate # for the heap
@param heapscoci the scoci for the heap.
@param heapdcoci the dcoci for the heap.
@param irgs the indexrowgenerators for the table's indexes. we use
positions in this array as local id's for indexes. to support updates,
only indexes that change need be included.
@param indexcids the conglomerateids for the table's idexes.
indexcids[ix] corresponds to the same index as irgs[ix].
@param indexscocis the scocis for the table's idexes.
indexscocis[ix] corresponds to the same index as irgs[ix].
@param indexdcocis the dcocis for the table's idexes.
indexdcocis[ix] corresponds to the same index as irgs[ix].
@param numberofcolumns number of columns in partial row.
@param tc the transaction controller
@param changedcolumnids array of 1 based ints of columns
to be updated.  used by update only.
@param baserowreadlist the columns in the base row that were
read (1 based)
@param baserowreadmap baserowreadmap[heapcolid]->readrowcolid
(0 based)
@param streamstorablecolids column ids of stream storable
columns. (0 based, only needed for sync. null if none or
not needed).
@param activation	the activation.
@exception standardexception		thrown on error
*/
public rowchanger
getrowchanger long heapconglom
staticcompiledopenconglominfo heapscoci
dynamiccompiledopenconglominfo heapdcoci
indexrowgenerator irgs
long indexcids
staticcompiledopenconglominfo indexscocis
dynamiccompiledopenconglominfo indexdcocis
int numberofcolumns
transactioncontroller tc
int changedcolumnids
formatablebitset	baserowreadlist
int baserowreadmap
int streamstorablecolids
activation activation  throws standardexception
// methods from old rowfactory interface
/**
this returns a new row that is storable but not indexable
*/
public execrow getvaluerow int numcolumns
/**
this returns an indexable row
*/
public execindexrow	getindexablerow int numcolumns
/**
this returns the value row as an indexable row
*/
public execindexrow	getindexablerow execrow valuerow
/**
this returns the value row as an indexable row, reusing the passed
in execindexrow if non-null.
*/
//public execindexrow	getindexablerow(execrow valuerow, execindexrow sourceexecindexrow);
/**
packages up a clump of constants which the plugin uses at execute()
time for copy publication.
*/
public	object	getjdbccopyconstants
int				paramreferences
typedescriptor	columntypes
int				publishedtableschemacounts
/**
packages up a clump of constants which the plugin uses at execute()
time for create publication.
*/
public	object	getjdbccreateconstants
uuid				publishedjarfileids
object				publisheditems
int				tableschemacounts