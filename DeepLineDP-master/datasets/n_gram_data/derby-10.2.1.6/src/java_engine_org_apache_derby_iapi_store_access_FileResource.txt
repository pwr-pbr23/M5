/*
derby - class org.apache.derby.iapi.store.access.fileresource
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi store access
import org apache derby iapi error standardexception
import org apache derby iapi store access databaseinstant
import org apache derby io storagefile
import java io filenotfoundexception
import java io ioexception
import java io inputstream
/**
management of file resources within	a database. suitable for jar
files, images etc.
<p>a file resource is identified by the pair (name,generationid).
name is an arbitrary string supplied by the caller. generationid
is a non-repeating sequence number constructed by the database.
within a database a	(name,generationid) pair uniquely identifies
a version of a file resource for all time. newer generation
numbers reflect newer versions of the file.
<p>a database supports the concept of a designated current version
of a fileresource. the management of the current version is
transactional. the following rules apply
<ol>
<li>adding a fileresource makes the added version the current
version
<li>removing a fileresource removes the current version of the
resource. after this operation the database holds no current
version of the fileresoure.
<li>replacing a fileresource removes the current version of the
resource.
</ol>
<p>for the benefit of replication, a database optionally retains
historic versions of stored files. these old versions are
useful when processing old transactions in the stage.
*/
public interface fileresource
/**
the name of the jar directory
*/
public static final string jar_directory_name
/**
add a file resource, copying from the input stream.
the inputstream will be closed by this method.
@param name the name of the file resource.
@param source an input stream for reading the content of
the file resource.
@return the generationid for the file resource. this
quantity increases when you replace the file resource.
@exception standardexception some error occured.
*/
public long add string name inputstream source
throws standardexception
/**
remove the current generation of a file resource from
the database.
@param name the name of the fileresource to remove.
@param purgeoncommit true means purge the fileresource
when the current transaction commits. false means retain
the file resource for use by replication.
@exception standardexception some error occured.
*/
public void remove string name  long currentgenerationid  boolean purgeoncommit
throws standardexception
/**
replace a file resource with a new version.
<p>the inputstream will be closed by this method.
@param name the name of the file resource.
@param source an input stream for reading the content of
the file resource.
@param purgeoncommit true means purge the existing version of
fileresource when the current transaction commits. false
means retain the existing version for use by replication.
@return the generationid for the new 'current' version of the
file resource.
@exception standardexception some error occured.
*/
public long replace string name  long currentgenerationid  inputstream source boolean purgeoncommit
throws standardexception
/**
get the file handle to a file resource. in some situations
higher level code can make optimisations if it can access
a file as a file, rather than an output stream. if this call
returns null then the resouce is not accessable as a file
(e.g. the database is in a zip file).
@param name the name of the fileresource
@param generationid the generationid of the fileresource
@return a file object representing the file, or null if
the resource is not accessable as a file.
*/
public storagefile getasfile string name  long generationid
/**
get the file resource as a stream.
@exception ioexception some io error occured
@exception filenotfoundexception file does not exist.
*/
public inputstream getasstream string name  long generationid
throws ioexception
/**
* @return the separator character to be used in file names.
*/
public char getseparatorchar