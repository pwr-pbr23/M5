/*
derby - class org.apache.derby.impl.sql.compile.quantifiedbinaryoperatornode
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package	org apache derby impl sql compile
import org apache derby iapi sql dictionary datadictionary
import org apache derby iapi error standardexception
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi util jbitset
import java util vector
/**
* a quantifiedbinaryoperatornode represents a binary quantified predicate
* that is used with a subquery, such as in, not in, < all, etc.  quantified
* predicates all return boolean values.  all quantified operators will be
* removed from the tree by the time we get to code generation - they will
* be replaced by other constructs that can be compiled. for example,
* an in node may be converted to a type of join.
*
* @author jeff lichtman
*/
public class quantifiedbinaryoperatornode extends binaryoperatornode
int	operator
public final static int in	  1
public final static int not_in	  2
public final static int eq_any	  3
public final static int eq_all	  4
public final static int ne_any	  5
public final static int ne_all	  6
public final static int gt_any	  7
public final static int gt_all	  8
public final static int ge_any	  9
public final static int ge_all	  10
public final static int lt_any   11
public final static int lt_all	  12
public final static int le_any	  13
public final static int le_all	  14
valuenode	leftoperand
subquerynode	rightoperand
/**
* prints the sub-nodes of this object.  see querytreenode.java for
* how tree printing is supposed to work.
*
* @param depth		the depth of this node in the tree
*/
public void printsubnodes int depth
if  sanitymanager debug
super printsubnodes depth
if  leftoperand    null
printlabel depth
leftoperand treeprint depth   1
if  rightoperand    null
printlabel depth
rightoperand treeprint depth   1
/**
* bind this expression.  this means binding the sub-expressions,
* as well as figuring out what the return type is for this expression.
*
* @param fromlist		the from list for the query this
*				expression is in, for binding columns.
* @param subquerylist		the subquery list being built as we find subquerynodes
* @param aggregatevector	the aggregate vector being built as we find aggregatenodes
*
* @return	the new top of the expression tree.
*
* @exception standardexception		thrown on error
*/
public valuenode bindexpression
fromlist fromlist  subquerylist subquerylist
vector	aggregatevector
throws standardexception
leftoperand   leftoperand bindexpression fromlist  subquerylist
aggregatevector
rightoperand    subquerynode  rightoperand bindexpression fromlist  subquerylist
aggregatevector
/* resolve: need to bind this node */
/* resolve - set the subqueryoperator in the subquerynode */
return this