/*
derby - class org.apache.derby.impl.store.access.sort.mergescan
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl store access sort
import java util enumeration
import java util vector
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi services io storable
import org apache derby iapi error standardexception
import org apache derby iapi store access conglomerate transactionmanager
import org apache derby iapi store access conglomerate scanmanager
import org apache derby iapi store access scancontroller
import org apache derby iapi store access sortobserver
import org apache derby iapi store access transactioncontroller
import org apache derby iapi store raw streamcontainerhandle
import org apache derby iapi store raw transaction
import org apache derby iapi types datavaluedescriptor
/**
a sort scan that is capable of merging as many merge runs
as will fit in the passed-in sort buffer.
**/
public class mergescan extends sortscan
/**
the sort buffer we will use.
**/
protected sortbuffer sortbuffer
/**
the merge runs.
**/
protected vector mergeruns
/**
array of scan controllers for the merge runs.
entries in the array become null as the last
row is pulled out and the scan is closed.
**/
protected streamcontainerhandle openscans
private sortobserver sortobserver
/*
* constructors.
*/
mergescan
mergesort           sort
transactionmanager  tran
sortbuffer          sortbuffer
vector              mergeruns
sortobserver		sortobserver
boolean             hold
super sort  tran  hold
this sortbuffer   sortbuffer
this mergeruns    mergeruns
this tran         tran
this sortobserver   sortobserver
/*
* methods of mergesortscan
*/
/**
move to the next position in the scan.
@see scancontroller#next
**/
public boolean next
throws standardexception
current   sortbuffer removefirst
if  current    null
mergearow sortbuffer getlastaux
return  current    null
/**
close the scan.
@see scancontroller#close
**/
public void close
if  openscans    null
for  int i   0  i < openscans length  i
if  openscans    null
openscans close
openscans   null
openscans   null
// hand sort buffer and remaining merge runs to sort.
if  super sort    null
sort donescanning this  sortbuffer  mergeruns
sortbuffer   null
mergeruns   null
// sets sort to null
super close
/**
close the scan.
@see scanmanager#closeforendtransaction
**/
public boolean closeforendtransaction boolean closeheldscan
if   hold    closeheldscan
close
return true
else
return false
/*
* methods of mergescan
*/
/**
initialize the scan, returning false if there
was some error.
**/
public boolean init transactionmanager tran
throws standardexception
if  sanitymanager debug
// we really expect to have at least one
// merge run.
sanitymanager assert mergeruns    null
sanitymanager assert mergeruns size   > 0
// this sort scan also expects that the
// caller has ensured that the sort buffer
// capacity will hold a row from all the
// merge runs.
sanitymanager assert sortbuffer capacity   >  mergeruns size
// clear the sort buffer.
sortbuffer reset
// create an array to hold a scan controller
// for each merge run.
openscans   new streamcontainerhandle
if  openscans    null
return false
// open a scan on each merge run.
int scanindex   0
enumeration e   mergeruns elements
while  e hasmoreelements
// get the container id
long id     long  e nextelement    longvalue
transaction rawtran   tran getrawstorexact        get raw transaction
int segmentid   streamcontainerhandle temporary_segment
openscans
rawtran openstreamcontainer segmentid  id  hold
// load the initial rows.
for  scanindex   0  scanindex < openscans length  scanindex
mergearow scanindex
// success!
return true
/**
insert rows while we keep getting duplicates
from the merge run whose scan is in the
open scan array entry indexed by scanindex.
**/
void mergearow int scanindex
throws standardexception
if  sanitymanager debug
// unless there's a bug, the scan index will refer
// to an open scan.  that's because we never put
// a scan index for a closed scan into the sort
// buffer (via setnextaux).
sanitymanager assert openscans    null
datavaluedescriptor row
// read rows from the merge run and stuff them into the
// sort buffer for as long as we encounter duplicates.
do
row   sortobserver getarrayclone
// fetch the row from the merge run.
if   openscans fetchnext row
// if we're out of rows in the merge run, close the scan.
openscans close
openscans   null
return
// save the index of this merge run with
// the row we're putting in the sort buffer.
sortbuffer setnextaux scanindex
while  sortbuffer insert row     sortbuffer insert_duplicate