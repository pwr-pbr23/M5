/*
derby - class org.apache.derby.impl.sql.compile.hasvariantvaluenodevisitor
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package	org apache derby impl sql compile
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi sql compile visitable
import org apache derby iapi sql compile visitor
import org apache derby iapi store access qualifier
import org apache derby iapi error standardexception
/**
* find out if we have a value node with variant type less than what the
* caller desires, anywhere below us.  stop traversal as soon as we find one.
* this is used in two places: one to check the values clause of an insert
* statement; i.e
* <pre>
* insert into <table> values (?, 1, foobar());
* </pre>
* if all the expressions in the values clause are query_invariant (and an
* exception is made for parameters) then we can cache the results in the
* rowresultnode. this is useful when we have a prepared insert statement which
* is repeatedly executed.
* <p>
* the second place where this is used is to check if a subquery can be
* materialized or not.
* @see org.apache.derby.iapi.store.access.qualifier
*
* @author jamie
*/
public class hasvariantvaluenodevisitor implements visitor
private boolean hasvariant
private int varianttype
private boolean ignoreparameters
/**
* construct a visitor
*/
public hasvariantvaluenodevisitor
this varianttype   qualifier variant
this ignoreparameters   false
if  sanitymanager debug
sanitymanager assert qualifier variant < qualifier scan_invariant
sanitymanager assert qualifier scan_invariant < qualifier query_invariant
/**
* construct a visitor.  pass in the variant
* type.  we look for nodes that are less
* than or equal to this variant type.  e.g.,
* if the varianttype is qualifier.scan_variant,
* then any node that is either variant or
* scan_variant will cause the visitor to
* consider it variant.
*
* @param varianttype the type of variance we consider
*		variant
* @param ignoreparameters should i ignore parameter nodes?
*/
public hasvariantvaluenodevisitor int varianttype  boolean ignoreparameters
this varianttype   varianttype
this ignoreparameters   ignoreparameters
if  sanitymanager debug
sanitymanager assert varianttype >  qualifier variant
// note: there is no point in (varianttype == qualifier.constant) so throw an
// exception for that case too
sanitymanager assert varianttype <  qualifier query_invariant
////////////////////////////////////////////////
//
// visitor interface
//
////////////////////////////////////////////////
/**
* if we have found the target node, we are done.
*
* @param node 	the node to process
*
* @return me
*
* @exception standardexception on error
*/
public visitable visit visitable node  throws standardexception
if  node instanceof valuenode
if  ignoreparameters      valuenode node  requirestypefromcontext
return node
if    valuenode node  getorderablevarianttype   <  varianttype
hasvariant   true
return node
public boolean skipchildren visitable node
return false
/**
* stop traversal if we found the target node
*
* @return true/false
*/
public boolean stoptraversal
return hasvariant
////////////////////////////////////////////////
//
// class interface
//
////////////////////////////////////////////////
/**
* indicate whether we found the node in
* question
*
* @return true/false
*/
public boolean hasvariant
return hasvariant