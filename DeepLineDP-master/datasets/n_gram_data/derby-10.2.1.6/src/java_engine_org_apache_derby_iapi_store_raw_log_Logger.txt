/*
derby - class org.apache.derby.iapi.store.raw.log.logger
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi store raw log
import org apache derby iapi store raw rawstorefactory
import org apache derby iapi store raw loggable
import org apache derby iapi store raw compensation
import org apache derby iapi store raw xact rawtransaction
import org apache derby iapi store raw xact transactionfactory
import org apache derby iapi store raw xact transactionid
import org apache derby iapi store raw data datafactory
import org apache derby iapi error standardexception
import org apache derby iapi services io limitobjectinput
public interface logger
/**
log the loggable operation under the context of the transaction and then
apply the operation to the rawstore.
<br>
before you call this method, make sure that the loggable's dome
method will succeed.  this method will go ahead and send the log record
to disk, and once it does that, then dome cannot fail or the system
will be shut down and recovery may fail.  so it is <b> very important
</b> to make sure that every resource you need for the loggable's dome
method, such as disk space, has be acquired or accounted for before
calling loganddo.
@param xact		the transaction that is affecting the change
@param operation	the loggable operation that describes the change
@return loginstant that is the loginstant of the loggable operation
@exception standardexception	standard cloudscape error policy
*/
public loginstant loganddo rawtransaction xact  loggable operation
throws standardexception
/**
log the compensation operation under the context of the transaction
and then apply the undo to the rawstore.
<br>
before you call this method, make sure that the compensation's dome
method will succeed.  this method will go ahead and send the log record
to disk, and once it does that, then dome cannot fail or the system
will be shut down and recovery may fail.  so it is <b> very important
</b> to make sure that every resource you need for the compensation's
dome method, such as disk space, has be acquired or accounted for before
calling logandundo.
@param xact		the transaction that is affecting the undo
@param operation	the compensation operation
@param undoinstant	the loginstant of the change that is to be undone
@param in			optional data
@return loginstant that is the loginstant of the compensation operation
@exception standardexception	standard cloudscape error policy
*/
public loginstant logandundo rawtransaction xact
compensation operation  loginstant undoinstant
limitobjectinput in
throws standardexception
/**
flush all unwritten log record up to the log instance indicated to disk.
@param where flush log up to here
@exception standardexception cannot flush due to sync error
*/
public void flush loginstant where  throws standardexception
/**
flush all unwritten log to disk
@exception standardexception cannot flush due to sync error
*/
public void flushall   throws standardexception
/**
* during recovery re-prepare a transaction.
* <p>
* after redo() and undo(), this routine is called on all outstanding
* in-doubt (prepared) transactions.  this routine re-acquires all
* logical write locks for operations in the xact, and then modifies
* the transaction table entry to make the transaction look as if it
* had just been prepared following startup after recovery.
* <p>
*
* @param t             is the transaction performing the re-prepare
* @param undoid        is the transaction id to be re-prepared
* @param undostopat    is where the log instant (inclusive) where the
*                      re-prepare should stop.
* @param undostartat   is the log instant (inclusive) where re-prepare
*                      should begin, this is normally the log instant of
*                      the last log record of the transaction that is to
*                      be re-prepare.  if null, then re-prepare starts
*                      from the end of the log.
*
* @exception  standardexception  standard exception policy.
**/
public void reprepare
rawtransaction  t
transactionid   undoid
loginstant      undostopat
loginstant      undostartat
throws standardexception
/**
undo transaction.
@param t is the transaction performing the rollback
@param undoid is the transaction id to be rolled back
@param undostopat is where the log instant (inclusive) where
the rollback should stop.
@param undostartat is the log instant (inclusive) where rollback
should begin, this is normally the log instant of
the last log record of the transaction that is
to be rolled back.
if null, then rollback starts from the end of the log.
@exception standardexception	standard cloudscape error policy
*/
public void undo rawtransaction t
transactionid undoid
loginstant undostopat
loginstant undostartat  throws standardexception