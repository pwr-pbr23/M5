/*
derby - class org.apache.derby.impl.store.access.btree.index.b2irowlocking1
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl store access btree index
import org apache derby iapi services sanity sanitymanager
import org apache derby iapi error standardexception
import org apache derby iapi store access conglomerate transactionmanager
import org apache derby iapi store access conglomeratecontroller
import org apache derby iapi types rowlocation
import org apache derby iapi store access transactioncontroller
import org apache derby iapi store raw fetchdescriptor
import org apache derby iapi store raw lockingpolicy
import org apache derby iapi store raw page
import org apache derby iapi store raw recordhandle
import org apache derby iapi store raw transaction
import org apache derby iapi types datavaluedescriptor
import org apache derby impl store access btree btree
import org apache derby impl store access btree btreelockingpolicy
import org apache derby impl store access btree btreerowposition
import org apache derby impl store access btree controlrow
import org apache derby impl store access btree leafcontrolrow
import org apache derby impl store access btree openbtree
import org apache derby impl store access btree waiterror
/**
the btree locking policy which implements read uncommitted isolation level.
it inherits all functionality from b2irowlocking2 except that it does not
get any read row locks (and thus does not release them).  note that table
level and table level intent locking remains the same as b2irowlocking2 as
this is currently the way we prevent concurrent ddl from happening while a
read uncommitted scanner is operating in the btree.
**/
class b2irowlocking1 extends b2irowlocking2 implements btreelockingpolicy
/**************************************************************************
* fields of the class
**************************************************************************
*/
/**************************************************************************
* constructors for this class:
**************************************************************************
*/
b2irowlocking1
transaction             rawtran
int                     lock_level
lockingpolicy           locking_policy
conglomeratecontroller  base_cc
openbtree               open_btree
super rawtran  lock_level  locking_policy  base_cc  open_btree
/**************************************************************************
* public methods of this class:
**************************************************************************
*/
/**************************************************************************
* abstract protected lockscan*() locking methods of btree:
*     lockscan                 - lock the scan page
*                                (inherit from b2irowlocking2, we still
*                                 get page control locks).
*     lockscanforreclaimspace  - lock page for reclaiming deleted rows.
*                                (inherit from b2irowlocking2, should never
*                                 be called while in read uncommitted).
*     lockscanrow              - lock row and possibly the scan page, only
*                                if row is forupdate and not a previous key
*                                lock.
*     unlockscan               - unlock the scan page
*                                (inherit from b2irowlocking2, should never
*                                 be called while in read uncommitted).
*     unlockscanrecordafterread- unlock the scan record if we locked it in
*                                lockscanrow.
*
**************************************************************************
*/
/**
* lock a row as part of doing the scan.
* <p>
* lock the row at the given slot (or the previous row if slot is 0).
* get the scan lock on the page if "request_scan_lock" is true.
* <p>
* if this routine returns true all locks were acquired while maintaining
* the latch on leaf.  if this routine returns false, locks may or may
* not have been acquired, and the routine should be called again after
* the client has researched the tree to reget the latch on the
* appropriate page.
* (p>
* as a side effect stores the value of the record handle of the current
* scan lock.
*
* @return whether locks were acquired without releasing latch on leaf.
*
* @param open_btree        the open_btree to associate latches with -
*                          used if routine has to scan backward.
* @param btree             the conglomerate info.
* @param pos               the position of the row to lock.
* @param request_scan_lock whether to request the page scan lock, should
*                          only be requested once per page in the scan.
* @param lock_template     a scratch area to use to read in rows.
* @param previous_key_lock is this a previous key lock call?
* @param forupdate         is the scan for update or for read only.
*
* @exception  standardexception  standard exception policy.
**/
public boolean lockscanrow
openbtree               open_btree
btree                   btree
btreerowposition        pos
boolean                 request_scan_lock
fetchdescriptor         lock_fetch_desc
datavaluedescriptor   lock_template
rowlocation             lock_row_loc
boolean                 previous_key_lock
boolean                 forupdate
int                     lock_operation
throws standardexception
// request the scan lock if necessary.
// only get the row lock if it is not a previous key lock and iff
// it is an update lock.
return
_lockscanrow
open_btree
btree
pos
forupdate     previous_key_lock      only get update row lock
request_scan_lock
lock_fetch_desc  lock_template  lock_row_loc
previous_key_lock
forupdate
lock_operation
/**
* release read lock on a row.
*
* because this is read uncommitted no s row locks will have been requested,
* thus none need be released.  the only locks that need to be released
* are u locks requested if the scan was opened for update.
*
* @param pos               the position of the row to unlock.
* @param forupdate         is the scan for update or for read only.
*
**/
public void unlockscanrecordafterread
btreerowposition        pos
boolean                 forupdate
throws standardexception
if  forupdate
super unlockscanrecordafterread pos  forupdate
/**************************************************************************
* abstract protected locknonscan*() locking methods of btree:
*
*     locknonscanpreviousrow   - lock the row previous to the current
*                                (inherit from b2irowlocking2, we still
*                                 get page control locks) - only called
*                                 by insert.
*     locknonscanrow           - lock the input row
*                                (inherit from b2irowlocking2, we still
*                                 get page control locks) - only called
*                                 by insert.
**************************************************************************
*/