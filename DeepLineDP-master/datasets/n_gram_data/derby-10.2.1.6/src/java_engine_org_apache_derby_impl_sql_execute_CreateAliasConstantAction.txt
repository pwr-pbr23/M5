/*
derby - class org.apache.derby.impl.sql.execute.createaliasconstantaction
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby impl sql execute
import org apache derby iapi services loader classfactory
import org apache derby iapi store access transactioncontroller
import org apache derby iapi sql execute constantaction
import org apache derby iapi sql dictionary tabledescriptor
import org apache derby iapi sql dictionary aliasdescriptor
import org apache derby iapi sql dictionary datadescriptorgenerator
import org apache derby iapi sql dictionary datadictionary
import org apache derby iapi sql dictionary conglomeratedescriptor
import org apache derby iapi sql dictionary schemadescriptor
import org apache derby iapi sql conn languageconnectioncontext
import org apache derby iapi types datavaluefactory
import org apache derby iapi reference sqlstate
import org apache derby iapi sql activation
import org apache derby iapi error standardexception
import org apache derby iapi services context contextservice
import org apache derby catalog uuid
import org apache derby iapi services sanity sanitymanager
import org apache derby catalog aliasinfo
import org apache derby catalog types routinealiasinfo
import org apache derby catalog types synonymaliasinfo
import java lang reflect method
import java lang reflect modifier
/**
*	this class  describes actions that are always performed for a
*	create alias statement at execution time.
*
*	@author jerry brenner.
*/
class createaliasconstantaction extends ddlconstantaction
private final string					aliasname
private final string					schemaname
private final string					javaclassname
private final char					aliastype
private final char					namespace
private final aliasinfo				aliasinfo
// constructors
/**
*	make the constantaction for a create alias statement.
*
*  @param aliasname		name of alias.
*  @param schemaname		name of alias's schema.
*  @param javaclassname	name of java class.
*  @param aliasinfo		aliasinfo
*  @param aliastype		the type of the alias
*/
createaliasconstantaction
string	aliasname
string	schemaname
string	javaclassname
aliasinfo	aliasinfo
char	aliastype
this aliasname   aliasname
this schemaname   schemaname
this javaclassname   javaclassname
this aliasinfo   aliasinfo
this aliastype   aliastype
switch  aliastype
case aliasinfo alias_type_procedure_as_char
namespace   aliasinfo alias_name_space_procedure_as_char
break
case aliasinfo alias_type_function_as_char
namespace   aliasinfo alias_name_space_function_as_char
break
case aliasinfo alias_type_synonym_as_char
namespace   aliasinfo alias_name_space_synonym_as_char
break
default
if  sanitymanager debug
sanitymanager throwassert
aliastype
namespace
break
// object shadows
public	string	tostring
// do not put this under sanitymanager.debug - it is needed for
// error reporting.
string type   null
switch  aliastype
case aliasinfo alias_type_procedure_as_char
type
break
case aliasinfo alias_type_function_as_char
type
break
case aliasinfo alias_type_synonym_as_char
type
break
default
if  sanitymanager debug
sanitymanager throwassert
aliastype
return	type   aliasname
// interface methods
/**
*	this is the guts of the execution-time logic for create alias.
*
*	@see constantaction#executeconstantaction
*
* @exception standardexception		thrown on failure
*/
public void	executeconstantaction  activation activation
throws standardexception
languageconnectioncontext lcc
if  activation    null
lcc   activation getlanguageconnectioncontext
else    only for direct executions by the database meta data
lcc    languageconnectioncontext  contextservice getcontext
languageconnectioncontext context_id
datadictionary dd   lcc getdatadictionary
transactioncontroller tc   lcc gettransactionexecute
/* verify the method alias:
**		aggregates - just verify the class
**		method alias - verify the class and method
**		work units - verify the class and method
**				(depends on whether we're at a source or target)
*/
string checkmethodname   null
string checkclassname   javaclassname
if  aliasinfo    null
checkmethodname   aliasinfo getmethodname
// procedures do not check class or method validity until runtime execution of the procedure.
// this matches db2 behaviour
switch  aliastype
case aliasinfo alias_type_procedure_as_char
case aliasinfo alias_type_function_as_char
case aliasinfo alias_type_synonym_as_char
break
default
classfactory cf   lcc getlanguageconnectionfactory   getclassfactory
class realclass   null
try
// does the class exist?
realclass   cf loadapplicationclass checkclassname
catch  classnotfoundexception t
throw standardexception newexception sqlstate lang_type_doesnt_exist2  t  checkclassname
if    modifier ispublic realclass getmodifiers
throw standardexception newexception sqlstate lang_type_doesnt_exist2  checkclassname
if  checkmethodname    null
// is the method public and static
method methods   realclass getmethods
int index   0
for     index < methods length  index
if   modifier isstatic methods getmodifiers
continue
if  checkmethodname equals methods getname
break
if  index    methods length
throw standardexception newexception sqlstate lang_no_method_matching_alias
checkmethodname  checkclassname
/*
** inform the data dictionary that we are about to write to it.
** there are several calls to data dictionary "get" methods here
** that might be done in "read" mode in the data dictionary, but
** it seemed safer to do this whole operation in "write" mode.
**
** we tell the data dictionary we're done writing at the end of
** the transaction.
*/
dd startwriting lcc
schemadescriptor sd   null
if  activation    null
sd   dd getsysibmschemadescriptor
else if  schemaname    null
sd   ddlconstantaction getschemadescriptorforcreate dd  activation  schemaname
//
// create a new method alias descriptor with aliasid filled in.
//
uuid aliasid   dd getuuidfactory   createuuid
aliasdescriptor ads   new aliasdescriptor dd  aliasid
aliasname
sd    null ? sd getuuid     null
javaclassname
aliastype
namespace
false
aliasinfo  null
// perform duplicate rule checking
switch  aliastype
case aliasinfo alias_type_procedure_as_char
case aliasinfo alias_type_function_as_char
java util list list   dd getroutinelist
sd getuuid   tostring    aliasname  aliastype
for  int i   list size     1  i >  0  i
aliasdescriptor proc    aliasdescriptor  list get i
routinealiasinfo procedureinfo    routinealiasinfo  proc getaliasinfo
int parametercount   procedureinfo getparametercount
if  parametercount      routinealiasinfo  aliasinfo  getparametercount
continue
// procedure duplicate checking is simple, only
// one procedure with a given number of parameters.
throw standardexception newexception sqlstate lang_object_already_exists
ads getdescriptortype
aliasname
break
case aliasinfo alias_type_synonym_as_char
// if target table/view exists already, error.
tabledescriptor targettd   dd gettabledescriptor aliasname  sd
if  targettd    null
throw standardexception newexception
sqlstate lang_object_already_exists
targettd getdescriptortype
targettd getdescriptorname
// detect synonym cycles, if present.
string nextsyntable     synonymaliasinfo aliasinfo  getsynonymtable
string nextsynschema     synonymaliasinfo aliasinfo  getsynonymschema
schemadescriptor nextsd
for
nextsd   dd getschemadescriptor nextsynschema  tc  false
if  nextsd    null
break
aliasdescriptor nextad   dd getaliasdescriptor nextsd getuuid   tostring
nextsyntable  namespace
if  nextad    null
break
synonymaliasinfo info    synonymaliasinfo  nextad getaliasinfo
nextsyntable   info getsynonymtable
nextsynschema   info getsynonymschema
if  aliasname equals nextsyntable     schemaname equals nextsynschema
throw standardexception newexception sqlstate lang_synonym_circular
aliasname    synonymaliasinfo aliasinfo  getsynonymtable
// if synonym final target is not present, raise a warning
if  nextsd    null
targettd   dd gettabledescriptor nextsyntable  nextsd
if  nextsd    null    targettd    null
activation addwarning
standardexception newwarning sqlstate lang_synonym_undefined
aliasname  nextsynschema   nextsyntable
// to prevent any possible deadlocks with systables, we insert a row into
// systables also for synonyms. this also ensures tables/views/synonyms share
// same namespace
tabledescriptor td
datadescriptorgenerator ddg   dd getdatadescriptorgenerator
td   ddg newtabledescriptor aliasname  sd  tabledescriptor synonym_type
tabledescriptor default_lock_granularity
dd adddescriptor td  sd  datadictionary systables_catalog_num  false  tc
default
break
dd adddescriptor ads  null  datadictionary sysaliases_catalog_num
false  lcc gettransactionexecute