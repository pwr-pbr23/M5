/*
derby - class org.apache.derby.impl.sql.compile.vtidefermodpolicy
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package	org apache derby impl sql compile
import org apache derby iapi error standardexception
import org apache derby iapi sql dictionary tabledescriptor
import org apache derby iapi sql compile visitor
import org apache derby iapi sql compile visitable
import org apache derby vti defermodification
import java util enumeration
import java util hashtable
import java sql resultset
import java sql sqlexception
/**
* this class applies a vti modification deferral policy to a statement to
* see whether it should be deferred.
*/
class vtidefermodpolicy implements visitor
/**
* see if a vti modification statement should be deferred.
*
* @param statementtype defermodification.insert_statement, update_statement, or delete_statement
* @param targetvti the target vti
* @param updatecolumnnames the list of columns being updated, null if this is not an update statement
* @param source
*/
public static boolean deferit  int statementtype
fromvti targetvti
string updatecolumnnames
querytreenode source
throws standardexception
try
defermodification deferralcontrol
int resultsettype   targetvti getresultsettype
/* deferred updates and deletes are implemented by scrolling the result set. so, if
* the statement is an update or delete but the result set is not scrollable then do
* not attempt to defer the statement.
*/
if   statementtype    defermodification update_statement   statementtype    defermodification delete_statement
resultsettype    resultset type_forward_only
return false
deferralcontrol   targetvti getdeferralcontrol
if  deferralcontrol    null
string vticlassname   targetvti getnewinvocation   getjavaclassname
deferralcontrol   new defaultvtimoddeferpolicy  vticlassname
resultset type_scroll_sensitive    resultsettype
if  deferralcontrol alwaysdefer  statementtype
return true
if  source    null    statementtype    defermodification update_statement
return false
vtidefermodpolicy deferralsearch   new vtidefermodpolicy  targetvti
updatecolumnnames
deferralcontrol
statementtype
if  source    null
source accept  deferralsearch
if  statementtype    defermodification update_statement
// apply the columnrequiresdefer method to updated columns not in the where clause.
enumeration columns   deferralsearch columns keys
while  columns hasmoreelements
if  deferralcontrol columnrequiresdefer  statementtype
string  columns nextelement
false
return true
return deferralsearch deferred
catch  sqlexception sqle
throw standardexception unexpecteduserexception sqle
end of deferit
// state needed to search the statement parse tree for nodes that require deferred modification
private boolean deferred   false
private defermodification deferralcontrol
private int statementtype
private int tablenumber
private hashtable columns   new hashtable
private vtidefermodpolicy  fromvti targetvti
string columnnames
defermodification deferralcontrol
int statementtype
this deferralcontrol   deferralcontrol
this statementtype   statementtype
tablenumber   targetvti gettablenumber
if  statementtype    defermodification update_statement    columnnames    null
for  int i   0  i < columnnames length  i
columns put  columnnames  columnnames
public visitable visit visitable node
throws standardexception
try
if  node instanceof columnreference    statementtype    defermodification insert_statement
columnreference cr    columnreference  node
if  cr gettablenumber      tablenumber
string columnname   cr getcolumnname
if  statementtype    defermodification delete_statement
if  columns get  columnname     null
columns put  columnname  columnname
if  deferralcontrol columnrequiresdefer  statementtype  columnname  true
deferred   true
else if  statementtype    defermodification update_statement
if  columns get  columnname     null
// this column is referenced in the where clause and is being updated
if  deferralcontrol columnrequiresdefer  statementtype  columnname  true
deferred   true
columns remove  columnname      only test it once
else if  node instanceof selectnode
selectnode subselect    selectnode  node
fromlist fromlist   subselect getfromlist
for  int i   0  i < fromlist size    i
fromtable fromtable    fromtable  fromlist elementat i
if  fromtable instanceof frombasetable
tabledescriptor td   fromtable gettabledescriptor
if  deferralcontrol subselectrequiresdefer  statementtype
td getschemaname
td getname
deferred   true
else if  fromtable instanceof fromvti
fromvti fromvti    fromvti  fromtable
if  deferralcontrol subselectrequiresdefer  statementtype
fromvti getnewinvocation   getjavaclassname
deferred   true
catch  sqlexception sqle
throw standardexception unexpecteduserexception sqle
return node
end of visit
public boolean stoptraversal
return deferred
end of stoptraversal
public boolean skipchildren visitable node
return false
end of skipchildren
end of class vtidefermodpolicy