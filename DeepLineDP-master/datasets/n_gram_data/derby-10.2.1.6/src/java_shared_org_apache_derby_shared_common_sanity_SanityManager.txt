/*
derby - class org.apache.derby.iapi.services.sanity.sanitymanager
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby shared common sanity
import java util hashtable
import java util enumeration
/**
* the sanityservice provides assertion checking and debug
* control.
* <p>
* assertions and debug checks
* can only be used for testing conditions that might occur
* in development code but not in production code.
* <b>they are compiled out of production code.</b>
* <p>
* uses of assertions should not add assertfailure catches or
* throws clauses; assertfailure is under runtimeexception
* in the java exception hierarchy. our outermost system block
* will bring the system down when it detects an assertion
* failure.
* <p>
* in addition to asserts in code, classes can choose to implement
* an isconsistent method that would be used by asserts, unittests,
* and any other code wanting to check the consistency of an object.
* <p>
* assertions are meant to be used to verify the state of the system
* and bring the system down if the state is not correct. debug checks
* are meant to display internal information about a running system.
* <p>
* @see org.apache.derby.iapi.services.sanity.assertfailure
*/
public class sanitymanager
/**
* the build tool may be configured to alter
* this source file to reset the static final variables
* so that assertion and debug checks can be compiled out
* of the code.
*/
public static final boolean assert   sanitystate assert     code should use debug
public static final boolean debug   sanitystate debug
public static final string debugdebug
/**
* debugstream holds a pointer to the debug stream for writing out
* debug messages.  it is cached at the first debug write request.
*/
static private java io printwriter debugstream   new java io printwriter system err
/**
* debugflags holds the values of all debug flags in
* the configuration file.
*/
static private hashtable debugflags   new hashtable
/**
* alldebugon and alldebugoff override individual flags
*/
static private boolean alldebugon   false
static private boolean alldebugoff   false
//
// class interface
//
/**
* assert checks the condition, and if it is
* false, throws assertfailure.
* a message about the assertion failing is
* printed.
* <p>
* @see org.apache.derby.iapi.services.sanity.assertfailure
*/
public static final void assert boolean mustbetrue
if  debug
if    mustbetrue
if  debug
assertfailure af   new assertfailure
if  debug_on
showtrace af
throw af
else
throw new assertfailure
/**
* assert checks the condition, and if it is
* false, throws assertfailure. the message will
* be printed and included in the assertion.
* <p>
* @see org.apache.derby.iapi.services.sanity.assertfailure
*/
public static final void assert boolean mustbetrue  string msgiffail
if  debug
if    mustbetrue
if  debug
assertfailure af   new assertfailure     msgiffail
if  debug_on
showtrace af
throw af
else
throw new assertfailure     msgiffail
/**
* throwassert throws assertfailure. this is used in cases where
* the caller has already detected the assertion failure (such as
* in the default case of a switch). this method should be used,
* rather than throwing assertfailure directly, to allow us to
* centralize all sanity checking.  the message argument will
* be printed and included in the assertion.
* <p>
* @param msgiffail message to print with the assertion
*
* @see org.apache.derby.iapi.services.sanity.assertfailure
*/
public static final void throwassert string msgiffail
// xxx (nat) hmm, should we check assert here?  the caller is
// not expecting this function to return, whether assertions
// are compiled in or not.
if  debug
assertfailure af   new assertfailure     msgiffail
if  debug_on
showtrace af
throw af
else
throw new assertfailure     msgiffail
/**
* throwassert throws assertfailure.
* this flavor will print the stack associated with the exception.
* the message argument will
* be printed and included in the assertion.
* <p>
* @param msg message to print with the assertion
* @param t exception to print with the assertion
*
* @see org.apache.derby.iapi.services.sanity.assertfailure
*/
public static final void throwassert string msg  throwable t
if  debug
assertfailure af   new assertfailure     t tostring    t
if  debug_on
showtrace af
showtrace t
throw af
else
showtrace t
throw new assertfailure     t tostring    t
/**
* throwassert throws assertfailure.
* this flavor will print the stack associated with the exception.
* <p>
* @param t exception to print with the assertion
*
* @see org.apache.derby.iapi.services.sanity.assertfailure
*/
public static final void throwassert throwable t
if  debug
assertfailure af   new assertfailure     t tostring    t
if  debug_on
showtrace af
showtrace t
throw af
else
showtrace t
throw new assertfailure     t tostring    t
/**
* the debug calls provide the ability to print information or
* perform actions based on whether a debug flag is set or not.
* debug flags are set in configurations and picked up by the
* sanity manager when the monitor finds them (see config below).
* <p>
* the message is output to the trace stream, so it ends up in
* db2j.log. it will include a header line of
*   debug <flagname> output:
* before the message.
* <p>
* if the debugstream stream cannot be found, the message is printed to
* system.out.
*/
public static final void debug string flag  string message
if  debug
if  debug_on flag
debug_print flag  message
/**
* this can be called directly if you want to control
* what is done once the debug flag has been verified --
* for example, if you are calling a routine that prints to
* the trace stream directly rather than returning a string to
* be printed, or if you want to perform more (or fewer!)
*
* <p>
* calls to this method should be surrounded with
*     if (sanitymanager.debug) {
*     }
* so that they can be compiled out completely.
*
* @return true if the flag has been set to "true"; false
* if the flag is not set, or is set to something other than "true".
*/
public static final boolean debug_on string flag
if  debug
if  alldebugon  return true
else if  alldebugoff  return false
else
boolean flagvalue    boolean  debugflags get flag
if    debugdebug equals flag
if  debug_on debugdebug
debug_print debugdebug    flag   flagvalue
if  flagvalue    null  return false
else return flagvalue booleanvalue
else return false
/**
* set the named debug flag to true.
*
* <p>
* calls to this method should be surrounded with
*     if (sanitymanager.debug) {
*     }
* so that they can be compiled out completely.
*
* @param flag	the name of the debug flag to set to true
*/
public static final void debug_set string flag
if  debug
if    debugdebug equals flag
if  debug_on debugdebug
debug_print debugdebug      flag
debugflags put flag  boolean true
/**
* set the named debug flag to false.
*
* <p>
* calls to this method should be surrounded with
*     if (sanitymanager.debug) {
*     }
* so that they can be compiled out completely.
*
* @param flag	the name of the debug flag to set to false
*/
public static final void debug_clear string flag
if  debug
if    debugdebug equals flag
if  debug_on debugdebug
debug_print debugdebug      flag
debugflags put flag  boolean false
/**
* this can be used to have the sanitymanager return true
* for any debug_on check. debug_clear of an individual
* flag will appear to have no effect.
*/
public static final void debug_all_on
if  debug
alldebugon   true
alldebugoff   false
/**
* this can be used to have the sanitymanager return false
* for any debug_on check. debug_set of an individual
* flag will appear to have no effect.
*/
public static final void debug_all_off
if  debug
alldebugoff   true
alldebugon   false
//
// class implementation
//
static public void set_debug_stream java io printwriter pw
debugstream   pw
static public java io printwriter get_debug_stream
return debugstream
static private void showtrace assertfailure af
af printstacktrace
java io printwriter assertstream   get_debug_stream
assertstream println
af printstacktrace assertstream
assertstream flush
static public void showtrace throwable t
java io printwriter assertstream   get_debug_stream
assertstream println
t printstacktrace assertstream
/**
* the debug_print calls provides a convenient way to print debug
* information to the db2j.log file,  the message includes a header
*<p>
*	debug <flag> output:
* before the message
*<p>
* if the debugstream stream cannot be found, the message is printed to
* system.out.
*
*/
static public void debug_print string flag  string message
java io printwriter debugstream   get_debug_stream
debugstream println   flag     message
debugstream flush
public static void notreached
throwassert