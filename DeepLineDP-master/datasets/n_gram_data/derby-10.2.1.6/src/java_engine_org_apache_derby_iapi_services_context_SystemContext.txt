/*
derby - class org.apache.derby.iapi.services.context.systemcontext
licensed to the apache software foundation (asf) under one or more
contributor license agreements.  see the notice file distributed with
this work for additional information regarding copyright ownership.
the asf licenses this file to you under the apache license, version 2.0
(the "license"); you may not use this file except in compliance with
the license.  you may obtain a copy of the license at
http://www.apache.org/licenses/license-2.0
unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "as is" basis,
without warranties or conditions of any kind, either express or implied.
see the license for the specific language governing permissions and
limitations under the license.
*/
package org apache derby iapi services context
import org apache derby iapi error standardexception
import org apache derby iapi services monitor monitor
import org apache derby iapi error exceptionseverity
/**
a context that shuts the system down if it gets an standardexception
with a severity greater than or equal to exceptionseverity.system_severity
or an exception that is not a standardexception.
*/
final class systemcontext extends contextimpl
systemcontext contextmanager cm
super cm
public void cleanuponerror throwable t
boolean doshutdown   false
if  t instanceof standardexception
standardexception se    standardexception  t
int severity   se getseverity
if  severity < exceptionseverity session_severity
return
popme
if  severity >  exceptionseverity system_severity
doshutdown   true
else if  t instanceof shutdownexception
// system is already shutting down ...
else if  t instanceof threaddeath
// ignore this too, it means we explicitly told thread to
// stop.  one way this can happen is after monitor
// shutdown, so we don't need to shut down again
if   doshutdown
//contextmanager cm = getcontextmanager();
// need to remove me from the list of all contexts.
getcontextmanager   owningcsf removecontext getcontextmanager
return
try
// try to print out that the shutdown is occurring.
// revisit: does this need to be a localizable message?
system err println
monitor getstream   printlnwithheader     t getmessage
finally
// we need this to happen even if we fail to print out a notice
monitor getmonitor   shutdown