/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq ra
import java lang reflect method
import javax jms connection
import javax jms connectionconsumer
import javax jms exceptionlistener
import javax jms jmsexception
import javax jms message
import javax jms messagelistener
import javax jms session
import javax jms topic
import javax resource resourceexception
import javax resource spi endpoint messageendpointfactory
import javax resource spi work work
import javax resource spi work workexception
import javax resource spi work workmanager
import org apache activemq activemqconnection
import org apache activemq command activemqdestination
import org apache activemq command activemqqueue
import org apache activemq command activemqtopic
import org apache commons logging log
import org apache commons logging logfactory
/**
* @version $revision$ $date$
*/
public class activemqendpointworker
public static final method on_message_method
private static final log log   logfactory getlog activemqendpointworker class
private static final long initial_reconnect_delay   1000     1 second
private static final long max_reconnect_delay   1000   30     30 seconds
private static final threadlocal<session> thread_local   new threadlocal<session>
static
try
on_message_method   messagelistener class getmethod    new class
message class
catch  exception e
throw new exceptionininitializererror e
protected messageresourceadapter adapter
protected activemqendpointactivationkey endpointactivationkey
protected messageendpointfactory endpointfactory
protected workmanager workmanager
protected boolean transacted
protected activemqconnection connection
private connectionconsumer consumer
private serversessionpoolimpl serversessionpool
private activemqdestination dest
private boolean running
private work connectwork
private long reconnectdelay   initial_reconnect_delay
public activemqendpointworker final messageresourceadapter adapter  activemqendpointactivationkey key  throws resourceexception
this endpointactivationkey   key
this adapter   adapter
this endpointfactory   endpointactivationkey getmessageendpointfactory
this workmanager   adapter getbootstrapcontext   getworkmanager
try
this transacted   endpointfactory isdeliverytransacted on_message_method
catch  nosuchmethodexception e
throw new resourceexception
connectwork   new work
public void release
//
public synchronized void run
if   isrunning
return
if  connection    null
return
messageactivationspec activationspec   endpointactivationkey getactivationspec
try
connection   adapter makeconnection activationspec
connection start
connection setexceptionlistener new exceptionlistener
public void onexception jmsexception error
if   serversessionpool isclosing
reconnect error
if  activationspec isdurablesubscription
consumer   connection createdurableconnectionconsumer  topic dest  activationspec getsubscriptionname    emptytonull activationspec getmessageselector     serversessionpool
activationspec getmaxmessagespersessionsintvalue    activationspec getnolocalbooleanvalue
else
consumer   connection createconnectionconsumer dest  emptytonull activationspec getmessageselector     serversessionpool  activationspec getmaxmessagespersessionsintvalue
activationspec getnolocalbooleanvalue
catch  jmsexception error
log debug     error  error
reconnect error
messageactivationspec activationspec   endpointactivationkey getactivationspec
if    equals activationspec getdestinationtype
dest   new activemqqueue activationspec getdestination
else if    equals activationspec getdestinationtype
dest   new activemqtopic activationspec getdestination
else
throw new resourceexception     activationspec getdestinationtype
/**
* @param s
*/
public static void safeclose session s
try
if  s    null
s close
catch  jmsexception e
//
/**
* @param c
*/
public static void safeclose connection c
try
if  c    null
c close
catch  jmsexception e
//
/**
* @param cc
*/
public static void safeclose connectionconsumer cc
try
if  cc    null
cc close
catch  jmsexception e
//
/**
*
*/
public synchronized void start   throws workexception  resourceexception
if  running
return
running   true
log debug
serversessionpool   new serversessionpoolimpl this  endpointactivationkey getactivationspec   getmaxsessionsintvalue
connect
log debug
/**
*
*/
public synchronized void stop   throws interruptedexception
if   running
return
running   false
serversessionpool close
disconnect
private boolean isrunning
return running
private synchronized void connect
if   running
return
try
workmanager schedulework connectwork  workmanager indefinite  null  null
catch  workexception e
running   false
log error    e
/**
*
*/
private synchronized void disconnect
safeclose consumer
consumer   null
safeclose connection
connection   null
private void reconnect jmsexception error
log debug    error
long reconnectdelay
synchronized  this
reconnectdelay   this reconnectdelay
// only log errors if the server is really down.. and not a temp
// failure.
if  reconnectdelay    max_reconnect_delay
log error     error getmessage
log error      max_reconnect_delay   1000
try
disconnect
thread sleep reconnectdelay
synchronized  this
// use exponential rollback.
this reconnectdelay    2
if  this reconnectdelay > max_reconnect_delay
this reconnectdelay   max_reconnect_delay
connect
catch  interruptedexception e
//
protected void registerthreadsession session session
thread_local set session
protected void unregisterthreadsession session session
thread_local set null
private string emptytonull string value
if  value    null    value length      0
return null
return value