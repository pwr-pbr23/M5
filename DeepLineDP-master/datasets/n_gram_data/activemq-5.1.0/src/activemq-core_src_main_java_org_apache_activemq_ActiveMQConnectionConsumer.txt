/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq
import java util collections
import java util linkedlist
import java util list
import javax jms connectionconsumer
import javax jms illegalstateexception
import javax jms jmsexception
import javax jms serversession
import javax jms serversessionpool
import javax jms session
import org apache activemq command consumerinfo
import org apache activemq command messagedispatch
/**
* for application servers, <code>connection</code> objects provide a special
* facility for creating a <code>connectionconsumer</code> (optional). the
* messages it is to consume are specified by a <code>destination</code> and a
* message selector. in addition, a <code>connectionconsumer</code> must be
* given a <code>serversessionpool</code> to use for processing its messages.
* <p/>
* <p>
* normally, when traffic is light, a <code>connectionconsumer</code> gets a
* <code>serversession</code> from its pool, loads it with a single message,
* and starts it. as traffic picks up, messages can back up. if this happens, a
* <code>connectionconsumer</code> can load each <code>serversession</code>
* with more than one message. this reduces the thread context switches and
* minimizes resource use at the expense of some serialization of message
* processing.
*
* @see javax.jms.connection#createconnectionconsumer
* @see javax.jms.connection#createdurableconnectionconsumer
* @see javax.jms.queueconnection#createconnectionconsumer
* @see javax.jms.topicconnection#createconnectionconsumer
* @see javax.jms.topicconnection#createdurableconnectionconsumer
*/
public class activemqconnectionconsumer implements connectionconsumer  activemqdispatcher
private activemqconnection connection
private serversessionpool sessionpool
private consumerinfo consumerinfo
private boolean closed
/**
* create a connectionconsumer
*
* @param theconnection
* @param thesessionpool
* @param theconsumerinfo
* @throws jmsexception
*/
protected activemqconnectionconsumer activemqconnection theconnection  serversessionpool thesessionpool  consumerinfo theconsumerinfo  throws jmsexception
this connection   theconnection
this sessionpool   thesessionpool
this consumerinfo   theconsumerinfo
this connection addconnectionconsumer this
this connection adddispatcher consumerinfo getconsumerid    this
this connection syncsendpacket this consumerinfo
/**
* gets the server session pool associated with this connection consumer.
*
* @return the server session pool used by this connection consumer
* @throws jmsexception if the jms provider fails to get the server session
*                 pool associated with this consumer due to some internal
*                 error.
*/
public serversessionpool getserversessionpool   throws jmsexception
if  closed
throw new illegalstateexception
return this sessionpool
/**
* closes the connection consumer. <p/>
* <p>
* since a provider may allocate some resources on behalf of a connection
* consumer outside the java virtual machine, clients should close these
* resources when they are not needed. relying on garbage collection to
* eventually reclaim these resources may not be timely enough.
*
* @throws jmsexception
*/
public void close   throws jmsexception
if   closed
dispose
this connection asyncsendpacket this consumerinfo createremovecommand
public void dispose
if   closed
this connection removedispatcher consumerinfo getconsumerid
this connection removeconnectionconsumer this
closed   true
public void dispatch messagedispatch messagedispatch
try
messagedispatch setconsumer this
serversession serversession   sessionpool getserversession
session s   serversession getsession
activemqsession session   null
if  s instanceof activemqsession
session    activemqsession s
else if  s instanceof activemqtopicsession
activemqtopicsession topicsession    activemqtopicsession s
session    activemqsession topicsession getnext
else if  s instanceof activemqqueuesession
activemqqueuesession queuesession    activemqqueuesession s
session    activemqsession queuesession getnext
else
connection onasyncexception new jmsexception     s getclass
return
session dispatch messagedispatch
serversession start
catch  jmsexception e
connection onasyncexception e
public string tostring
return     consumerinfo getconsumerid