/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq store kahadaptor
import java io ioexception
import java util hashset
import java util iterator
import java util map
import java util set
import java util concurrent concurrenthashmap
import java util concurrent locks lock
import org apache activemq broker connectioncontext
import org apache activemq command activemqdestination
import org apache activemq command message
import org apache activemq command messageid
import org apache activemq command subscriptioninfo
import org apache activemq kaha listcontainer
import org apache activemq kaha mapcontainer
import org apache activemq kaha marshaller
import org apache activemq kaha store
import org apache activemq kaha storeentry
import org apache activemq store messagerecoverylistener
import org apache activemq store topicreferencestore
import org apache activemq util subscriptionkey
public class kahatopicreferencestore extends kahareferencestore implements topicreferencestore
protected listcontainer<topicsuback> ackcontainer
protected map<string  topicsubcontainer> subscribermessages   new concurrenthashmap<string  topicsubcontainer>
private map<string  subscriptioninfo> subscribercontainer
private store store
private static final string topic_sub_name
public kahatopicreferencestore store store  kahareferencestoreadapter adapter
mapcontainer<messageid  referencerecord> messagecontainer  listcontainer<topicsuback> ackcontainer
mapcontainer<string  subscriptioninfo> subscontainer  activemqdestination destination
throws ioexception
super adapter  messagecontainer  destination
this store   store
this ackcontainer   ackcontainer
subscribercontainer   subscontainer
// load all the ack containers
for  iterator<subscriptioninfo> i   subscribercontainer values   iterator    i hasnext
subscriptioninfo info   i next
addsubscribermessagecontainer info getclientid    info getsubscriptionname
protected messageid getmessageid object object
return new messageid   referencerecord object  getmessageid
public void addmessage connectioncontext context  message message  throws ioexception
throw new runtimeexception
public message getmessage messageid identity  throws ioexception
throw new runtimeexception
public  void addmessagereference final connectioncontext context  final messageid messageid
final referencedata data
lock lock
try
final referencerecord record   new referencerecord messageid tostring    data
final int subscribercount   subscribermessages size
if  subscribercount > 0
final storeentry messageentry   messagecontainer place messageid  record
addinterest record
final topicsuback tsa   new topicsuback
tsa setcount subscribercount
tsa setmessageentry messageentry
final storeentry ackentry   ackcontainer placelast tsa
for  final iterator<topicsubcontainer> i   subscribermessages values   iterator    i hasnext
final topicsubcontainer container   i next
final consumermessageref ref   new consumermessageref
ref setackentry ackentry
ref setmessageentry messageentry
ref setmessageid messageid
container add ref
finally
lock unlock
public referencedata getmessagereference final messageid identity  throws ioexception
final referencerecord result   messagecontainer get identity
if  result    null
return null
return result getdata
public void addreferencefileidsinuse
for  storeentry entry   ackcontainer getfirst    entry    null  entry   ackcontainer getnext entry
topicsuback suback   ackcontainer get entry
if  suback getcount   > 0
referencerecord rr   messagecontainer getvalue suback getmessageentry
addinterest rr
protected mapcontainer addsubscribermessagecontainer string clientid  string subscriptionname  throws ioexception
string containername   getsubscriptioncontainername getsubscriptionkey clientid  subscriptionname
mapcontainer container   store getmapcontainer containername containername
container setkeymarshaller store messageid_marshaller
marshaller marshaller   new consumermessagerefmarshaller
container setvaluemarshaller marshaller
topicsubcontainer tsc   new topicsubcontainer container
subscribermessages put getsubscriptionkey clientid  subscriptionname   tsc
return container
public boolean acknowledgereference connectioncontext context
string clientid  string subscriptionname  messageid messageid
throws ioexception
boolean removemessage   false
lock lock
try
string key   getsubscriptionkey clientid  subscriptionname
topicsubcontainer container   subscribermessages get key
if  container    null
consumermessageref ref   null
if  ref   container remove messageid      null
topicsuback tsa   ackcontainer get ref getackentry
if  tsa    null
if  tsa decrementcount   <  0
storeentry entry   ref getackentry
entry   ackcontainer refresh entry
ackcontainer remove entry
referencerecord rr   messagecontainer get messageid
if  rr    null
entry   tsa getmessageentry
entry   messagecontainer refresh entry
messagecontainer remove entry
removeinterest rr
removemessage   true
else
//no message held
removemessage   true
finally
lock unlock
return removemessage
public void acknowledge connectioncontext context
string clientid  string subscriptionname  messageid messageid  throws ioexception
acknowledgereference context  clientid  subscriptionname  messageid
public void addsubsciption subscriptioninfo info  boolean retroactive  throws ioexception
string key   getsubscriptionkey info getclientid    info getsubscriptionname
lock lock
try
// if already exists - won't add it again as it causes data files
// to hang around
if   subscribercontainer containskey key
subscribercontainer put key  info
adapter addsubscriberstate info
// add the subscriber
addsubscribermessagecontainer info getclientid    info getsubscriptionname
if  retroactive
/*
* for(storeentry
* entry=ackcontainer.getfirst();entry!=null;entry=ackcontainer.getnext(entry)){
* topicsuback tsa=(topicsuback)ackcontainer.get(entry);
* consumermessageref ref=new consumermessageref();
* ref.setackentry(entry);
* ref.setmessageentry(tsa.getmessageentry()); container.add(ref); }
*/
finally
lock unlock
public void deletesubscription string clientid  string subscriptionname  throws ioexception
lock lock
try
subscriptioninfo info   lookupsubscription clientid  subscriptionname
if  info    null
adapter removesubscriberstate info
removesubscribermessagecontainer clientid subscriptionname
finally
lock unlock
public subscriptioninfo getallsubscriptions   throws ioexception
subscriptioninfo result   subscribercontainer values
toarray new subscriptioninfo
return result
public int getmessagecount string clientid  string subscribername  throws ioexception
string key   getsubscriptionkey clientid  subscribername
topicsubcontainer container   subscribermessages get key
return container    null ? container size     0
public subscriptioninfo lookupsubscription string clientid  string subscriptionname  throws ioexception
return subscribercontainer get getsubscriptionkey clientid  subscriptionname
public void recovernextmessages string clientid  string subscriptionname  int maxreturned
messagerecoverylistener listener  throws exception
string key   getsubscriptionkey clientid  subscriptionname
lock lock
try
topicsubcontainer container   subscribermessages get key
if  container    null
int count   0
storeentry entry   container getbatchentry
if  entry    null
entry   container getentry
else
entry   container refreshentry entry
if  entry    null
entry   container getnextentry entry
if  entry    null
do
consumermessageref consumerref   container get entry
referencerecord msg   messagecontainer getvalue consumerref
getmessageentry
if  msg    null
if  recoverreference listener  msg
count
container setbatchentry msg getmessageid    entry
else
break
else
container reset
entry   container getnextentry entry
while  entry    null    count < maxreturned    listener hasspace
finally
lock unlock
public void recoversubscription string clientid  string subscriptionname  messagerecoverylistener listener
throws exception
string key   getsubscriptionkey clientid  subscriptionname
topicsubcontainer container   subscribermessages get key
if  container    null
for  iterator i   container iterator    i hasnext
consumermessageref ref    consumermessageref i next
referencerecord msg   messagecontainer get ref getmessageentry
if  msg    null
if   recoverreference listener  msg
break
public void resetbatching string clientid  string subscriptionname
lock lock
try
string key   getsubscriptionkey clientid  subscriptionname
topicsubcontainer topicsubcontainer   subscribermessages get key
if  topicsubcontainer    null
topicsubcontainer reset
finally
lock unlock
public void removeallmessages connectioncontext context  throws ioexception
lock lock
try
set<string> tmpset   new hashset<string> subscribercontainer keyset
for  string key tmpset
topicsubcontainer container   subscribermessages get key
if  container    null
container clear
ackcontainer clear
finally
lock unlock
super removeallmessages context
protected void removesubscribermessagecontainer string clientid  string subscriptionname  throws ioexception
string subscriberkey   getsubscriptionkey clientid  subscriptionname
string containername   getsubscriptioncontainername subscriberkey
subscribercontainer remove subscriberkey
topicsubcontainer container   subscribermessages remove subscriberkey
if  container    null
for  iterator i   container iterator    i hasnext
consumermessageref ref    consumermessageref i next
if  ref    null
topicsuback tsa   ackcontainer get ref getackentry
if  tsa    null
if  tsa decrementcount   <  0
ackcontainer remove ref getackentry
messagecontainer remove tsa getmessageentry
else
ackcontainer update ref getackentry    tsa
store deletemapcontainer containername containername
protected string getsubscriptionkey string clientid  string subscribername
stringbuffer buffer   new stringbuffer
buffer append clientid  append
string name   subscribername    null ? subscribername
return buffer append name  tostring
private string getsubscriptioncontainername string subscriptionkey
stringbuffer result   new stringbuffer topic_sub_name
result append destination getqualifiedname
result append subscriptionkey
return result tostring