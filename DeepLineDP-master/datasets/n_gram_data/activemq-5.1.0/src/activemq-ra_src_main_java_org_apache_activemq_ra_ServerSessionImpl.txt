/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq ra
import java lang reflect method
import javax jms jmsexception
import javax jms message
import javax jms messagelistener
import javax jms messageproducer
import javax jms serversession
import javax jms session
import javax resource spi endpoint messageendpoint
import javax resource spi work work
import javax resource spi work workevent
import javax resource spi work workexception
import javax resource spi work worklistener
import javax resource spi work workmanager
import org apache activemq activemqsession
import org apache activemq activemqsession deliverylistener
import org apache activemq transactioncontext
import org apache commons logging log
import org apache commons logging logfactory
/**
* @version $revision$
*/
public class serversessionimpl implements serversession  inboundcontext  work  deliverylistener
public static final method on_message_method
private static int nextlogid
static
try
on_message_method   messagelistener class getmethod    new class
message class
catch  exception e
throw new exceptionininitializererror e
private int serversessionid   getnextlogid
private final log log   logfactory getlog serversessionimpl class getname         serversessionid
private activemqsession session
private workmanager workmanager
private messageendpoint endpoint
private messageproducer messageproducer
private final serversessionpoolimpl pool
private object runcontrolmutex   new object
private boolean runningflag
/**
* true if an error was detected that cause this session to be stale. when a
* session is stale, it should not be used again for proccessing.
*/
private boolean stale
/**
* does the tx commit need to be managed by the ra?
*/
private final boolean useramanagedtx
/**
* the maximum number of messages to batch
*/
private final int batchsize
/**
* the current number of messages in the batch
*/
private int currentbatchsize
public serversessionimpl serversessionpoolimpl pool  activemqsession session  workmanager workmanager  messageendpoint endpoint  boolean useramanagedtx  int batchsize  throws jmsexception
this pool   pool
this session   session
this workmanager   workmanager
this endpoint   endpoint
this useramanagedtx   useramanagedtx
this session setmessagelistener  messagelistener endpoint
this session setdeliverylistener this
this batchsize   batchsize
private static synchronized int getnextlogid
return nextlogid
public session getsession   throws jmsexception
return session
public messageproducer getmessageproducer   throws jmsexception
if  messageproducer    null
messageproducer   getsession   createproducer null
return messageproducer
/**
* @see javax.jms.serversession#start()
*/
public void start   throws jmsexception
synchronized  runcontrolmutex
if  runningflag
log debug
return
runningflag   true
// we get here because we need to start a async worker.
log debug
try
workmanager schedulework this  workmanager indefinite  null  new worklistener
// the work listener is useful only for debugging...
public void workaccepted workevent event
log debug     event
public void workrejected workevent event
log debug     event
public void workstarted workevent event
log debug     event
public void workcompleted workevent event
log debug     event
catch  workexception e
throw  jmsexception new jmsexception     e  initcause e
/**
* @see java.lang.runnable#run()
*/
public void run
log debug
while  true
log debug
try
if   session isrunning
inboundcontextsupport register this
currentbatchsize   0
session run
else
log debug
stale   true
catch  throwable e
stale   true
log debug    e
log info     e
finally
inboundcontextsupport unregister this
log debug
synchronized  runcontrolmutex
// this endpoint may have gone stale due to error
if  stale
runningflag   false
pool removefrompool this
break
if   session hasuncomsumedmessages
runningflag   false
pool returntopool this
break
log debug
/**
* the activemqsession's run method will call back to this method before
* dispactching a message to the messagelistener.
*/
public void beforedelivery activemqsession session  message msg
if  currentbatchsize    0
try
endpoint beforedelivery on_message_method
catch  throwable e
throw new runtimeexception    e
/**
* the activemqsession's run method will call back to this method after
* dispactching a message to the messagelistener.
*/
public void afterdelivery activemqsession session  message msg
if    currentbatchsize >  batchsize     session hasuncomsumedmessages
currentbatchsize   0
try
endpoint afterdelivery
catch  throwable e
throw new runtimeexception    e
finally
transactioncontext transactioncontext   session gettransactioncontext
if  transactioncontext    null    transactioncontext isinlocaltransaction
if   useramanagedtx
// sanitiy check: if the local transaction has not been
// commited..
// commit it now.
log warn
try
session commit
catch  jmsexception e
log info    e
/**
* @see javax.resource.spi.work.work#release()
*/
public void release
log debug
/**
* @see java.lang.object#tostring()
*/
public string tostring
return     serversessionid
public void close
try
endpoint release
catch  throwable e
log debug     e  e
try
session close
catch  throwable e
log debug     e  e