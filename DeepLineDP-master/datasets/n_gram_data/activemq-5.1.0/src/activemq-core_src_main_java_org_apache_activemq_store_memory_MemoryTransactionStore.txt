/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq store memory
import java io ioexception
import java util arraylist
import java util iterator
import java util concurrent concurrenthashmap
import javax transaction xa xaexception
import org apache activemq broker connectioncontext
import org apache activemq command message
import org apache activemq command messageack
import org apache activemq command transactionid
import org apache activemq command xatransactionid
import org apache activemq store messagestore
import org apache activemq store proxymessagestore
import org apache activemq store proxytopicmessagestore
import org apache activemq store topicmessagestore
import org apache activemq store transactionrecoverylistener
import org apache activemq store transactionstore
/**
* provides a transactionstore implementation that can create transaction aware
* messagestore objects from non transaction aware messagestore objects.
*
* @version $revision: 1.4 $
*/
public class memorytransactionstore implements transactionstore
concurrenthashmap<object  tx> inflighttransactions   new concurrenthashmap<object  tx>
concurrenthashmap<transactionid  tx> preparedtransactions   new concurrenthashmap<transactionid  tx>
private boolean doingrecover
public static class tx
private arraylist<addmessagecommand> messages   new arraylist<addmessagecommand>
private arraylist<removemessagecommand> acks   new arraylist<removemessagecommand>
public void add addmessagecommand msg
messages add msg
public void add removemessagecommand ack
acks add ack
public message getmessages
message rc   new message
int count   0
for  iterator<addmessagecommand> iter   messages iterator    iter hasnext
addmessagecommand cmd   iter next
rc   cmd getmessage
return rc
public messageack getacks
messageack rc   new messageack
int count   0
for  iterator<removemessagecommand> iter   acks iterator    iter hasnext
removemessagecommand cmd   iter next
rc   cmd getmessageack
return rc
/**
* @throws ioexception
*/
public void commit   throws ioexception
// do all the message adds.
for  iterator<addmessagecommand> iter   messages iterator    iter hasnext
addmessagecommand cmd   iter next
cmd run
// and removes..
for  iterator<removemessagecommand> iter   acks iterator    iter hasnext
removemessagecommand cmd   iter next
cmd run
public interface addmessagecommand
message getmessage
void run   throws ioexception
public interface removemessagecommand
messageack getmessageack
void run   throws ioexception
public messagestore proxy messagestore messagestore
return new proxymessagestore messagestore
public void addmessage connectioncontext context  final message send  throws ioexception
memorytransactionstore this addmessage getdelegate    send
public void removemessage connectioncontext context  final messageack ack  throws ioexception
memorytransactionstore this removemessage getdelegate    ack
public topicmessagestore proxy topicmessagestore messagestore
return new proxytopicmessagestore messagestore
public void addmessage connectioncontext context  final message send  throws ioexception
memorytransactionstore this addmessage getdelegate    send
public void removemessage connectioncontext context  final messageack ack  throws ioexception
memorytransactionstore this removemessage getdelegate    ack
/**
* @see org.apache.activemq.store.transactionstore#prepare(transactionid)
*/
public void prepare transactionid txid
tx tx   inflighttransactions remove txid
if  tx    null
return
preparedtransactions put txid  tx
public tx gettx object txid
tx tx   inflighttransactions get txid
if  tx    null
tx   new tx
inflighttransactions put txid  tx
return tx
/**
* @throws xaexception
* @see org.apache.activemq.store.transactionstore#commit(org.apache.activemq.service.transaction)
*/
public void commit transactionid txid  boolean wasprepared  throws ioexception
tx tx
if  wasprepared
tx   preparedtransactions remove txid
else
tx   inflighttransactions remove txid
if  tx    null
return
tx commit
/**
* @see org.apache.activemq.store.transactionstore#rollback(transactionid)
*/
public void rollback transactionid txid
preparedtransactions remove txid
inflighttransactions remove txid
public void start   throws exception
public void stop   throws exception
public synchronized void recover transactionrecoverylistener listener  throws ioexception
// all the inflight transactions get rolled back..
inflighttransactions clear
this doingrecover   true
try
for  iterator<transactionid> iter   preparedtransactions keyset   iterator    iter hasnext
object txid   iter next
tx tx   preparedtransactions get txid
listener recover  xatransactionid txid  tx getmessages    tx getacks
finally
this doingrecover   false
/**
* @param message
* @throws ioexception
*/
void addmessage final messagestore destination  final message message  throws ioexception
if  doingrecover
return
if  message gettransactionid      null
tx tx   gettx message gettransactionid
tx add new addmessagecommand
public message getmessage
return message
public void run   throws ioexception
destination addmessage null  message
else
destination addmessage null  message
/**
* @param ack
* @throws ioexception
*/
final void removemessage final messagestore destination  final messageack ack  throws ioexception
if  doingrecover
return
if  ack isintransaction
tx tx   gettx ack gettransactionid
tx add new removemessagecommand
public messageack getmessageack
return ack
public void run   throws ioexception
destination removemessage null  ack
else
destination removemessage null  ack
public void delete
inflighttransactions clear
preparedtransactions clear
doingrecover   false