/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq kaha impl index hash
import java io file
import java io ioexception
import java io randomaccessfile
import java util linkedlist
import java util concurrent atomic atomicboolean
import org apache activemq kaha marshaller
import org apache activemq kaha storeentry
import org apache activemq kaha impl index index
import org apache activemq kaha impl index indexmanager
import org apache activemq util databytearrayinputstream
import org apache activemq util databytearrayoutputstream
import org apache activemq util iohelper
import org apache activemq util lrucache
import org apache commons logging log
import org apache commons logging logfactory
/**
* btree implementation
*
* @version $revision: 1.1.1.1 $
*/
public class hashindex implements index  hashindexmbean
public static final int default_page_size
public static final int default_key_size
public static final int default_bin_size
private static final string name_prefix
private static final log log   logfactory getlog hashindex class
private final string name
private file directory
private file file
private randomaccessfile indexfile
private indexmanager indexmanager
private int pagesize   default_page_size
private int keysize   default_key_size
private int numberofbins   default_bin_size
private int keysperpage   this pagesize  this keysize
private databytearrayinputstream datain
private databytearrayoutputstream dataout
private byte readbuffer
private hashbin bins
private marshaller keymarshaller
private long length
private linkedlist<hashpage> freelist   new linkedlist<hashpage>
private atomicboolean loaded   new atomicboolean
private lrucache<long  hashpage> pagecache
private boolean enablepagecaching false   this is off by default   see amq 1667
private int pagecachesize   10
private int size
private int activebins
/**
* constructor
*
* @param directory
* @param name
* @param indexmanager
* @param numberofbins
* @throws ioexception
*/
public hashindex file directory  string name  indexmanager indexmanager  throws ioexception
this directory   directory
this name   name
this indexmanager   indexmanager
openindexfile
pagecache   new lrucache<long  hashpage> pagecachesize  pagecachesize  0 75f  true
/**
* set the marshaller for key objects
*
* @param marshaller
*/
public synchronized void setkeymarshaller marshaller marshaller
this keymarshaller   marshaller
/**
* @return the keysize
*/
public synchronized int getkeysize
return this keysize
/**
* @param keysize the keysize to set
*/
public synchronized void setkeysize int keysize
this keysize   keysize
if  loaded get
throw new runtimeexception
/**
* @return the pagesize
*/
public synchronized int getpagesize
return this pagesize
/**
* @param pagesize the pagesize to set
*/
public synchronized void setpagesize int pagesize
if  loaded get      pagesize    this pagesize
throw new runtimeexception
this pagesize   pagesize
/**
* @return number of bins
*/
public int getnumberofbins
return this numberofbins
/**
* @param numberofbins
*/
public void setnumberofbins int numberofbins
if  loaded get      numberofbins    this numberofbins
throw new runtimeexception
this numberofbins   numberofbins
/**
* @return the enablepagecaching
*/
public synchronized boolean isenablepagecaching
return this enablepagecaching
/**
* @param enablepagecaching the enablepagecaching to set
*/
public synchronized void setenablepagecaching boolean enablepagecaching
this enablepagecaching   enablepagecaching
/**
* @return the pagecachesize
*/
public synchronized int getpagecachesize
return this pagecachesize
/**
* @param pagecachesize the pagecachesize to set
*/
public synchronized void setpagecachesize int pagecachesize
this pagecachesize   pagecachesize
pagecache setmaxcachesize pagecachesize
public synchronized boolean istransient
return false
public synchronized int getsize
return size
public synchronized int getactivebins
return activebins
public synchronized void load
if  loaded compareandset false  true
int capacity   1
while  capacity < numberofbins
capacity <<  1
this bins   new hashbin
keysperpage   pagesize   keysize
datain   new databytearrayinputstream
dataout   new databytearrayoutputstream pagesize
readbuffer   new byte
try
openindexfile
if  indexfile length   > 0
docompress
catch  ioexception e
log error    e
throw new runtimeexception e
public synchronized void unload   throws ioexception
if  loaded compareandset true  false
if  indexfile    null
indexfile close
indexfile   null
freelist clear
pagecache clear
bins   new hashbin
public synchronized void store object key  storeentry value  throws ioexception
load
hashentry entry   new hashentry
entry setkey  comparable key
entry setindexoffset value getoffset
if   getbin key  put entry
size
public synchronized storeentry get object key  throws ioexception
load
hashentry entry   new hashentry
entry setkey  comparable key
hashentry result   getbin key  find entry
return result    null ? indexmanager getindex result getindexoffset      null
public synchronized storeentry remove object key  throws ioexception
load
hashentry entry   new hashentry
entry setkey  comparable key
hashentry result   getbin key  remove entry
if  result    null
size
return indexmanager getindex result getindexoffset
return null
public synchronized boolean containskey object key  throws ioexception
return get key     null
public synchronized void clear   throws ioexception
unload
delete
openindexfile
load
public synchronized void delete   throws ioexception
unload
if  file exists
file delete
length   0
hashpage lookuppage long pageid  throws ioexception
hashpage result   null
if  pageid >  0
result   getfromcache pageid
if  result    null
result   getfullpage pageid
if  result    null
if  result isactive
addtocache result
else
throw new illegalstateexception     pageid
return result
hashpage createpage int binid  throws ioexception
hashpage result   getnextfreepage
if  result    null
// allocate one
result   new hashpage keysperpage
result setid length
result setbinid binid
writepageheader result
length    pagesize
indexfile seek length
indexfile write hashentry not_set
addtocache result
return result
void releasepage hashpage page  throws ioexception
removefromcache page
page reset
page setactive false
writepageheader page
freelist add page
private hashpage getnextfreepage   throws ioexception
hashpage result   null
if  freelist isempty
result   freelist removefirst
result setactive true
result reset
writepageheader result
return result
void writefullpage hashpage page  throws ioexception
dataout reset
page write keymarshaller  dataout
if  dataout size   > pagesize
throw new ioexception     pagesize       dataout size
indexfile seek page getid
indexfile write dataout getdata    0  dataout size
void writepageheader hashpage page  throws ioexception
dataout reset
page writeheader dataout
indexfile seek page getid
indexfile write dataout getdata    0  hashpage page_header_size
hashpage getfullpage long id  throws ioexception
indexfile seek id
indexfile readfully readbuffer  0  pagesize
datain restart readbuffer
hashpage page   new hashpage keysperpage
page setid id
page read keymarshaller  datain
return page
hashpage getpageheader long id  throws ioexception
indexfile seek id
indexfile readfully readbuffer  0  hashpage page_header_size
datain restart readbuffer
hashpage page   new hashpage keysperpage
page setid id
page readheader datain
return page
void addtobin hashpage page  throws ioexception
hashbin bin   getbin page getbinid
bin addhashpageinfo page getid    page getpersistedsize
private hashbin getbin int index
hashbin result   bins
if  result    null
result   new hashbin this  index  pagesize   keysize
bins   result
activebins
return result
private void openindexfile   throws ioexception
if  indexfile    null
file   new file directory  name_prefix   iohelper tofilesystemsafename name
file getparentfile   mkdirs
indexfile   new randomaccessfile file
private hashbin getbin object key
int hash   hash key
int i   indexfor hash  bins length
return getbin i
private hashpage getfromcache long pageid
hashpage result   null
if  enablepagecaching
result   pagecache get pageid
return result
private void addtocache hashpage page
if  enablepagecaching
pagecache put page getid    page
private void removefromcache hashpage page
if  enablepagecaching
pagecache remove page getid
private void doload   throws ioexception
long offset   0
if  loaded compareandset false  true
while   offset   pagesize  <  indexfile length
indexfile seek offset
indexfile readfully readbuffer  0  hashpage page_header_size
datain restart readbuffer
hashpage page   new hashpage keysperpage
page setid offset
page readheader datain
if   page isactive
page reset
freelist add page
else
addtobin page
size  page size
offset    pagesize
length offset
private void docompress   throws ioexception
string backfilename   name
hashindex backindex   new hashindex directory backfilename indexmanager
backindex setkeymarshaller keymarshaller
backindex setkeysize getkeysize
backindex setnumberofbins getnumberofbins
backindex setpagesize getpagesize
backindex load
file backfile   backindex file
long offset   0
while   offset   pagesize  <  indexfile length
indexfile seek offset
hashpage page   getfullpage offset
if  page isactive
for  hashentry entry   page getentries
backindex getbin entry getkey    put entry
backindex size
page null
offset    pagesize
backindex unload
unload
iohelper deletefile file
iohelper copyfile backfile  file
iohelper deletefile backfile
openindexfile
doload
public string tostring
string str     system identityhashcode this    file getname
return str
static int hash object x
int h   x hashcode
h    ~ h << 9
h ^  h >>> 14
h    h << 4
h ^  h >>> 10
return h
static int indexfor int h  int length
return h    length   1
static
default_page_size   integer parseint system getproperty
default_key_size   integer parseint system getproperty
default_bin_size  integer parseint system getproperty