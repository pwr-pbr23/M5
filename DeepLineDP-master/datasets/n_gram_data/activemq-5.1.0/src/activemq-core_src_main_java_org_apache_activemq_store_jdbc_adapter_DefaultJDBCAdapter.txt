/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq store jdbc adapter
import java io ioexception
import java sql preparedstatement
import java sql resultset
import java sql sqlexception
import java sql statement
import java util arraylist
import java util hashset
import java util set
import org apache activemq command activemqdestination
import org apache activemq command messageid
import org apache activemq command subscriptioninfo
import org apache activemq store jdbc jdbcadapter
import org apache activemq store jdbc jdbcmessagerecoverylistener
import org apache activemq store jdbc jdbcpersistenceadapter
import org apache activemq store jdbc statements
import org apache activemq store jdbc transactioncontext
import org apache commons logging log
import org apache commons logging logfactory
/**
* implements all the default jdbc operations that are used by the
* jdbcpersistenceadapter. <p/> sub-classing is encouraged to override the
* default implementation of methods to account for differences in jdbc driver
* implementations. <p/> the jdbcadapter inserts and extracts blob data using
* the getbytes()/setbytes() operations. <p/> the databases/jdbc drivers that
* use this adapter are:
* <ul>
* <li></li>
* </ul>
*
* @org.apache.xbean.xbean element="defaultjdbcadapter"
*
* @version $revision: 1.10 $
*/
public class defaultjdbcadapter implements jdbcadapter
private static final log log   logfactory getlog defaultjdbcadapter class
protected statements statements
protected boolean batchstatments   true
protected void setbinarydata preparedstatement s  int index  byte data  throws sqlexception
s setbytes index  data
protected byte getbinarydata resultset rs  int index  throws sqlexception
return rs getbytes index
public void docreatetables transactioncontext c  throws sqlexception  ioexception
statement s   null
try
// check to see if the table already exists. if it does, then don't
// log warnings during startup.
// need to run the scripts anyways since they may contain alter
// statements that upgrade a previous version
// of the table
boolean alreadyexists   false
resultset rs   null
try
rs   c getconnection   getmetadata   gettables null  null
statements getfullmessagetablename
new string
alreadyexists   rs next
catch  throwable ignore
finally
close rs
s   c getconnection   createstatement
string createstatments   statements getcreateschemastatements
for  int i   0  i < createstatments length  i
// this will fail usually since the tables will be
// created already.
try
log debug     createstatments
s execute createstatments
catch  sqlexception e
if  alreadyexists
log debug
createstatments       e getmessage
e getsqlstate         e geterrorcode
else
log warn
createstatments       e getmessage
e getsqlstate         e geterrorcode
jdbcpersistenceadapter log    e
c getconnection   commit
finally
try
s close
catch  throwable e
public void dodroptables transactioncontext c  throws sqlexception  ioexception
statement s   null
try
s   c getconnection   createstatement
string dropstatments   statements getdropschemastatements
for  int i   0  i < dropstatments length  i
// this will fail usually since the tables will be
// created already.
try
s execute dropstatments
catch  sqlexception e
log warn
dropstatments       e getmessage
e getsqlstate         e geterrorcode
jdbcpersistenceadapter log    e
c getconnection   commit
finally
try
s close
catch  throwable e
public long dogetlastmessagebrokersequenceid transactioncontext c  throws sqlexception  ioexception
preparedstatement s   null
resultset rs   null
try
s   c getconnection   preparestatement statements getfindlastsequenceidinmsgsstatement
rs   s executequery
long seq1   0
if  rs next
seq1   rs getlong 1
rs close
s close
s   c getconnection   preparestatement statements getfindlastsequenceidinacksstatement
rs   s executequery
long seq2   0
if  rs next
seq2   rs getlong 1
return math max seq1  seq2
finally
close rs
close s
public void doaddmessage transactioncontext c  messageid messageid  activemqdestination destination
byte data  long expiration  throws sqlexception  ioexception
preparedstatement s   c getaddmessagestatement
try
if  s    null
s   c getconnection   preparestatement statements getaddmessagestatement
if  batchstatments
c setaddmessagestatement s
s setlong 1  messageid getbrokersequenceid
s setstring 2  messageid getproducerid   tostring
s setlong 3  messageid getproducersequenceid
s setstring 4  destination getqualifiedname
s setlong 5  expiration
setbinarydata s  6  data
if  batchstatments
s addbatch
else if  s executeupdate      1
throw new sqlexception
finally
if   batchstatments
s close
public void doaddmessagereference transactioncontext c  messageid messageid
activemqdestination destination  long expirationtime  string messageref
throws sqlexception  ioexception
preparedstatement s   c getaddmessagestatement
try
if  s    null
s   c getconnection   preparestatement statements getaddmessagestatement
if  batchstatments
c setaddmessagestatement s
s setlong 1  messageid getbrokersequenceid
s setstring 2  messageid getproducerid   tostring
s setlong 3  messageid getproducersequenceid
s setstring 4  destination getqualifiedname
s setlong 5  expirationtime
s setstring 6  messageref
if  batchstatments
s addbatch
else if  s executeupdate      1
throw new sqlexception
finally
if   batchstatments
s close
public long getbrokersequenceid transactioncontext c  messageid messageid  throws sqlexception
ioexception
preparedstatement s   null
resultset rs   null
try
s   c getconnection   preparestatement statements getfindmessagesequenceidstatement
s setstring 1  messageid getproducerid   tostring
s setlong 2  messageid getproducersequenceid
rs   s executequery
if   rs next
return 0
return rs getlong 1
finally
close rs
close s
public byte dogetmessage transactioncontext c  long seq  throws sqlexception  ioexception
preparedstatement s   null
resultset rs   null
try
s   c getconnection   preparestatement statements getfindmessagestatement
s setlong 1  seq
rs   s executequery
if   rs next
return null
return getbinarydata rs  1
finally
close rs
close s
public string dogetmessagereference transactioncontext c  long seq  throws sqlexception  ioexception
preparedstatement s   null
resultset rs   null
try
s   c getconnection   preparestatement statements getfindmessagestatement
s setlong 1  seq
rs   s executequery
if   rs next
return null
return rs getstring 1
finally
close rs
close s
public void doremovemessage transactioncontext c  long seq  throws sqlexception  ioexception
preparedstatement s   c getremovedmessagestatement
try
if  s    null
s   c getconnection   preparestatement statements getremovemessagestatment
if  batchstatments
c setremovedmessagestatement s
s setlong 1  seq
if  batchstatments
s addbatch
else if  s executeupdate      1
throw new sqlexception
finally
if   batchstatments
s close
public void dorecover transactioncontext c  activemqdestination destination
jdbcmessagerecoverylistener listener  throws exception
preparedstatement s   null
resultset rs   null
try
s   c getconnection   preparestatement statements getfindallmessagesstatement
s setstring 1  destination getqualifiedname
rs   s executequery
if  statements isuseexternalmessagereferences
while  rs next
if   listener recovermessagereference rs getstring 2
break
else
while  rs next
if   listener recovermessage rs getlong 1   getbinarydata rs  2
break
finally
close rs
close s
public void dosetlastack transactioncontext c  activemqdestination destination  string clientid
string subscriptionname  long seq  throws sqlexception  ioexception
preparedstatement s   c getupdatelastackstatement
try
if  s    null
s   c getconnection   preparestatement statements getupdatelastackofdurablesubstatement
if  batchstatments
c setupdatelastackstatement s
s setlong 1  seq
s setstring 2  destination getqualifiedname
s setstring 3  clientid
s setstring 4  subscriptionname
if  batchstatments
s addbatch
else if  s executeupdate      1
throw new sqlexception
finally
if   batchstatments
s close
public void dorecoversubscription transactioncontext c  activemqdestination destination  string clientid
string subscriptionname  jdbcmessagerecoverylistener listener
throws exception
// dumptables(c,
// destination.getqualifiedname(),clientid,subscriptionname);
preparedstatement s   null
resultset rs   null
try
s   c getconnection   preparestatement statements getfindalldurablesubmessagesstatement
s setstring 1  destination getqualifiedname
s setstring 2  clientid
s setstring 3  subscriptionname
rs   s executequery
if  statements isuseexternalmessagereferences
while  rs next
if   listener recovermessagereference rs getstring 2
break
else
while  rs next
if   listener recovermessage rs getlong 1   getbinarydata rs  2
break
finally
close rs
close s
public void dorecovernextmessages transactioncontext c  activemqdestination destination  string clientid
string subscriptionname  long seq  int maxreturned
jdbcmessagerecoverylistener listener  throws exception
preparedstatement s   null
resultset rs   null
try
s   c getconnection   preparestatement statements getfinddurablesubmessagesstatement
s setmaxrows maxreturned
s setstring 1  destination getqualifiedname
s setstring 2  clientid
s setstring 3  subscriptionname
s setlong 4  seq
rs   s executequery
int count   0
if  statements isuseexternalmessagereferences
while  rs next      count < maxreturned
if  listener recovermessagereference rs getstring 1
count
else
break
else
while  rs next      count < maxreturned
if  listener recovermessage rs getlong 1   getbinarydata rs  2
count
else
break
finally
close rs
close s
public int dogetdurablesubscribermessagecount transactioncontext c  activemqdestination destination
string clientid  string subscriptionname
throws sqlexception  ioexception
preparedstatement s   null
resultset rs   null
int result   0
try
s   c getconnection   preparestatement statements getdurablesubscribermessagecountstatement
s setstring 1  destination getqualifiedname
s setstring 2  clientid
s setstring 3  subscriptionname
rs   s executequery
if  rs next
result   rs getint 1
finally
close rs
close s
return result
/**
* @see org.apache.activemq.store.jdbc.jdbcadapter#dosetsubscriberentry(java.sql.connection,
*      java.lang.object, org.apache.activemq.service.subscriptioninfo)
*/
public void dosetsubscriberentry transactioncontext c  subscriptioninfo info  boolean retroactive
throws sqlexception  ioexception
// dumptables(c, destination.getqualifiedname(), clientid,
// subscriptionname);
preparedstatement s   null
try
long lastmessageid    1
if   retroactive
s   c getconnection   preparestatement statements getfindlastsequenceidinmsgsstatement
resultset rs   null
try
rs   s executequery
if  rs next
lastmessageid   rs getlong 1
finally
close rs
close s
s   c getconnection   preparestatement statements getcreatedurablesubstatement
s setstring 1  info getdestination   getqualifiedname
s setstring 2  info getclientid
s setstring 3  info getsubscriptionname
s setstring 4  info getselector
s setlong 5  lastmessageid
s setstring 6  info getsubscribeddestination   getqualifiedname
if  s executeupdate      1
throw new ioexception     info getclientid
finally
close s
public subscriptioninfo dogetsubscriberentry transactioncontext c  activemqdestination destination
string clientid  string subscriptionname
throws sqlexception  ioexception
preparedstatement s   null
resultset rs   null
try
s   c getconnection   preparestatement statements getfinddurablesubstatement
s setstring 1  destination getqualifiedname
s setstring 2  clientid
s setstring 3  subscriptionname
rs   s executequery
if   rs next
return null
subscriptioninfo subscription   new subscriptioninfo
subscription setdestination destination
subscription setclientid clientid
subscription setsubscriptionname subscriptionname
subscription setselector rs getstring 1
subscription setsubscribeddestination activemqdestination
createdestination rs getstring 2   activemqdestination queue_type
return subscription
finally
close rs
close s
public subscriptioninfo dogetallsubscriptions transactioncontext c  activemqdestination destination
throws sqlexception  ioexception
preparedstatement s   null
resultset rs   null
try
s   c getconnection   preparestatement statements getfindalldurablesubsstatement
s setstring 1  destination getqualifiedname
rs   s executequery
arraylist<subscriptioninfo> rc   new arraylist<subscriptioninfo>
while  rs next
subscriptioninfo subscription   new subscriptioninfo
subscription setdestination destination
subscription setselector rs getstring 1
subscription setsubscriptionname rs getstring 2
subscription setclientid rs getstring 3
subscription setsubscribeddestination activemqdestination
createdestination rs getstring 4   activemqdestination queue_type
rc add subscription
return rc toarray new subscriptioninfo
finally
close rs
close s
public void doremoveallmessages transactioncontext c  activemqdestination destinationname
throws sqlexception  ioexception
preparedstatement s   null
try
s   c getconnection   preparestatement statements getremoveallmessagesstatement
s setstring 1  destinationname getqualifiedname
s executeupdate
s close
s   c getconnection   preparestatement statements getremoveallsubscriptionsstatement
s setstring 1  destinationname getqualifiedname
s executeupdate
finally
close s
public void dodeletesubscription transactioncontext c  activemqdestination destination  string clientid
string subscriptionname  throws sqlexception  ioexception
preparedstatement s   null
try
s   c getconnection   preparestatement statements getdeletesubscriptionstatement
s setstring 1  destination getqualifiedname
s setstring 2  clientid
s setstring 3  subscriptionname
s executeupdate
finally
close s
public void dodeleteoldmessages transactioncontext c  throws sqlexception  ioexception
preparedstatement s   null
try
log debug     statements getdeleteoldmessagesstatement
s   c getconnection   preparestatement statements getdeleteoldmessagesstatement
s setlong 1  system currenttimemillis
int i   s executeupdate
log debug     i
finally
close s
public long dogetlastackeddurablesubscribermessageid transactioncontext c
activemqdestination destination  string clientid
string subscribername  throws sqlexception
ioexception
preparedstatement s   null
resultset rs   null
long result    1
try
s   c getconnection
preparestatement statements getlastackeddurablesubscribermessagestatement
s setstring 1  destination getqualifiedname
s setstring 2  clientid
s setstring 3  subscribername
rs   s executequery
if  rs next
result   rs getlong 1
rs close
s close
finally
close rs
close s
return result
private static void close preparedstatement s
try
s close
catch  throwable e
private static void close resultset rs
try
rs close
catch  throwable e
public set<activemqdestination> dogetdestinations transactioncontext c  throws sqlexception  ioexception
hashset<activemqdestination> rc   new hashset<activemqdestination>
preparedstatement s   null
resultset rs   null
try
s   c getconnection   preparestatement statements getfindalldestinationsstatement
rs   s executequery
while  rs next
rc add activemqdestination createdestination rs getstring 1   activemqdestination queue_type
finally
close rs
close s
return rc
public boolean isbatchstatments
return batchstatments
public void setbatchstatments boolean batchstatments
this batchstatments   batchstatments
public void setuseexternalmessagereferences boolean useexternalmessagereferences
statements setuseexternalmessagereferences useexternalmessagereferences
public statements getstatements
return statements
public void setstatements statements statements
this statements   statements
public byte dogetnextdurablesubscribermessagestatement transactioncontext c
activemqdestination destination
string clientid  string subscribername
throws sqlexception  ioexception
preparedstatement s   null
resultset rs   null
try
s   c getconnection   preparestatement statements getnextdurablesubscribermessagestatement
s setstring 1  destination getqualifiedname
s setstring 2  clientid
s setstring 3  subscribername
rs   s executequery
if   rs next
return null
return getbinarydata rs  1
finally
close rs
close s
public int dogetmessagecount transactioncontext c  activemqdestination destination  throws sqlexception
ioexception
preparedstatement s   null
resultset rs   null
int result   0
try
s   c getconnection   preparestatement statements getdestinationmessagecountstatement
s setstring 1  destination getqualifiedname
rs   s executequery
if  rs next
result   rs getint 1
finally
close rs
close s
return result
public void dorecovernextmessages transactioncontext c  activemqdestination destination  long nextseq
int maxreturned  jdbcmessagerecoverylistener listener  throws exception
preparedstatement s   null
resultset rs   null
try
s   c getconnection   preparestatement statements getfindnextmessagesstatement
s setmaxrows maxreturned
s setstring 1  destination getqualifiedname
s setlong 2  nextseq
rs   s executequery
int count   0
if  statements isuseexternalmessagereferences
while  rs next      count < maxreturned
if  listener recovermessagereference rs getstring 1
count
else
log debug
else
while  rs next      count < maxreturned
if  listener recovermessage rs getlong 1   getbinarydata rs  2
count
else
log debug
catch  exception e
e printstacktrace
finally
close rs
close s
/*
* useful for debugging. public void dumptables(connection c, string
* destinationname, string clientid, string subscriptionname) throws
* sqlexception { printquery(c, "select * from activemq_msgs", system.out);
* printquery(c, "select * from activemq_acks", system.out);
* preparedstatement s = c.preparestatement("select m.id, d.last_acked_id
* from " +"activemq_msgs m, " +"activemq_acks d " +"where d.container=? and
* d.client_id=? and d.sub_name=?" +" and m.container=d.container and m.id >
* d.last_acked_id" +" order by m.id"); s.setstring(1,destinationname);
* s.setstring(2,clientid); s.setstring(3,subscriptionname);
* printquery(s,system.out); }
*
* public void dumptables(connection c) throws sqlexception { printquery(c,
* "select * from activemq_msgs", system.out); printquery(c, "select * from
* activemq_acks", system.out); }
*
* private void printquery(connection c, string query, printstream out)
* throws sqlexception { printquery(c.preparestatement(query), out); }
*
* private void printquery(preparedstatement s, printstream out) throws
* sqlexception {
*
* resultset set=null; try { set = s.executequery(); resultsetmetadata
* metadata = set.getmetadata(); for( int i=1; i<=
* metadata.getcolumncount(); i++ ) { if(i==1) out.print("||");
* out.print(metadata.getcolumnname(i)+"||"); } out.println();
* while(set.next()) { for( int i=1; i<= metadata.getcolumncount(); i++ ) {
* if(i==1) out.print("|"); out.print(set.getstring(i)+"|"); }
* out.println(); } } finally { try { set.close(); } catch (throwable
* ignore) {} try { s.close(); } catch (throwable ignore) {} } }
*/