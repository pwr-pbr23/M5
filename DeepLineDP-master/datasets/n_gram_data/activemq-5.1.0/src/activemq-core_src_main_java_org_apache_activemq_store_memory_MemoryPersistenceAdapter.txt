/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq store memory
import java io file
import java io ioexception
import java util hashset
import java util iterator
import java util set
import java util concurrent concurrenthashmap
import org apache activemq broker connectioncontext
import org apache activemq command activemqdestination
import org apache activemq command activemqqueue
import org apache activemq command activemqtopic
import org apache activemq store messagestore
import org apache activemq store persistenceadapter
import org apache activemq store proxymessagestore
import org apache activemq store topicmessagestore
import org apache activemq store transactionstore
import org apache activemq usage systemusage
import org apache commons logging log
import org apache commons logging logfactory
/**
* @org.apache.xbean.xbean
* @version $revision: 1.4 $
*/
public class memorypersistenceadapter implements persistenceadapter
private static final log log   logfactory getlog memorypersistenceadapter class
memorytransactionstore transactionstore
concurrenthashmap<activemqdestination  topicmessagestore> topics   new concurrenthashmap<activemqdestination  topicmessagestore>
concurrenthashmap<activemqdestination  messagestore> queues   new concurrenthashmap<activemqdestination  messagestore>
private boolean useexternalmessagereferences
public set<activemqdestination> getdestinations
set<activemqdestination> rc   new hashset<activemqdestination> queues size     topics size
for  iterator<activemqdestination> iter   queues keyset   iterator    iter hasnext
rc add iter next
for  iterator<activemqdestination> iter   topics keyset   iterator    iter hasnext
rc add iter next
return rc
public static memorypersistenceadapter newinstance file file
return new memorypersistenceadapter
public messagestore createqueuemessagestore activemqqueue destination  throws ioexception
messagestore rc   queues get destination
if  rc    null
rc   new memorymessagestore destination
if  transactionstore    null
rc   transactionstore proxy rc
queues put destination  rc
return rc
public topicmessagestore createtopicmessagestore activemqtopic destination  throws ioexception
topicmessagestore rc   topics get destination
if  rc    null
rc   new memorytopicmessagestore destination
if  transactionstore    null
rc   transactionstore proxy rc
topics put destination  rc
return rc
public transactionstore createtransactionstore   throws ioexception
if  transactionstore    null
transactionstore   new memorytransactionstore
return transactionstore
public void begintransaction connectioncontext context
public void committransaction connectioncontext context
public void rollbacktransaction connectioncontext context
public void start   throws exception
public void stop   throws exception
public long getlastmessagebrokersequenceid   throws ioexception
return 0
public void deleteallmessages   throws ioexception
for  iterator<topicmessagestore> iter   topics values   iterator    iter hasnext
memorymessagestore store   asmemorymessagestore iter next
if  store    null
store delete
for  iterator<messagestore> iter   queues values   iterator    iter hasnext
memorymessagestore store   asmemorymessagestore iter next
if  store    null
store delete
if  transactionstore    null
transactionstore delete
public boolean isuseexternalmessagereferences
return useexternalmessagereferences
public void setuseexternalmessagereferences boolean useexternalmessagereferences
this useexternalmessagereferences   useexternalmessagereferences
protected memorymessagestore asmemorymessagestore object value
if  value instanceof memorymessagestore
return  memorymessagestore value
if  value instanceof proxymessagestore
messagestore delegate     proxymessagestore value  getdelegate
if  delegate instanceof memorymessagestore
return  memorymessagestore  delegate
log warn     value
return null
/**
* @param usagemanager the usagemanager that is controlling the broker's
*                memory usage.
*/
public void setusagemanager systemusage usagemanager
public string tostring
return
public void setbrokername string brokername
public void setdirectory file dir
public void checkpoint boolean sync  throws ioexception
public long size
return 0