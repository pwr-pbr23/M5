/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq broker region policy
import org apache activemq broker broker
import org apache activemq broker region durabletopicsubscription
import org apache activemq broker region queue
import org apache activemq broker region topic
import org apache activemq broker region topicsubscription
import org apache activemq broker region cursors pendingmessagecursor
import org apache activemq broker region group messagegrouphashbucketfactory
import org apache activemq broker region group messagegroupmapfactory
import org apache activemq filter destinationmapentry
import org apache activemq usage systemusage
import org apache commons logging log
import org apache commons logging logfactory
/**
* represents an entry in a {@link policymap} for assigning policies to a
* specific destination or a hierarchical wildcard area of destinations.
*
* @org.apache.xbean.xbean
* @version $revision: 1.1 $
*/
public class policyentry extends destinationmapentry
private static final log log   logfactory getlog policyentry class
private dispatchpolicy dispatchpolicy
private subscriptionrecoverypolicy subscriptionrecoverypolicy
private boolean sendadvisoryifnoconsumers
private deadletterstrategy deadletterstrategy
private pendingmessagelimitstrategy pendingmessagelimitstrategy
private messageevictionstrategy messageevictionstrategy
private long memorylimit
private messagegroupmapfactory messagegroupmapfactory
private pendingqueuemessagestoragepolicy pendingqueuepolicy
private pendingdurablesubscribermessagestoragepolicy pendingdurablesubscriberpolicy
private pendingsubscribermessagestoragepolicy pendingsubscriberpolicy
private int maxproducerstoaudit 32
private int maxauditdepth 2048
private int maxqueueauditdepth 2048
private boolean enableaudit true
private boolean producerflowcontrol   true
private boolean optimizeddispatch false
private int maxpagesize 100
private boolean usecache true
private long minimummessagesize 1024
private boolean useconsumerpriority true
private boolean strictorderdispatch false
private boolean lazydispatch false
public void configure broker broker queue queue
if  dispatchpolicy    null
queue setdispatchpolicy dispatchpolicy
if  deadletterstrategy    null
queue setdeadletterstrategy deadletterstrategy
queue setmessagegroupmapfactory getmessagegroupmapfactory
if  memorylimit > 0
queue getmemoryusage   setlimit memorylimit
if  pendingqueuepolicy    null
pendingmessagecursor messages   pendingqueuepolicy getqueuependingmessagecursor broker queue
queue setmessages messages
queue setproducerflowcontrol isproducerflowcontrol
queue setenableaudit isenableaudit
queue setmaxauditdepth getmaxqueueauditdepth
queue setmaxproducerstoaudit getmaxproducerstoaudit
queue setmaxpagesize getmaxpagesize
queue setusecache isusecache
queue setminimummessagesize  int  getminimummessagesize
queue setuseconsumerpriority isuseconsumerpriority
queue setstrictorderdispatch isstrictorderdispatch
queue setoptimizeddispatch isoptimizeddispatch
queue setlazydispatch islazydispatch
public void configure topic topic
if  dispatchpolicy    null
topic setdispatchpolicy dispatchpolicy
if  deadletterstrategy    null
topic setdeadletterstrategy deadletterstrategy
if  subscriptionrecoverypolicy    null
topic setsubscriptionrecoverypolicy subscriptionrecoverypolicy copy
topic setsendadvisoryifnoconsumers sendadvisoryifnoconsumers
if  memorylimit > 0
topic getmemoryusage   setlimit memorylimit
topic setproducerflowcontrol isproducerflowcontrol
topic setenableaudit isenableaudit
topic setmaxauditdepth getmaxauditdepth
topic setmaxproducerstoaudit getmaxproducerstoaudit
topic setmaxpagesize getmaxpagesize
topic setusecache isusecache
topic setminimummessagesize  int  getminimummessagesize
topic setlazydispatch islazydispatch
public void configure broker broker  systemusage memorymanager  topicsubscription subscription
if  pendingmessagelimitstrategy    null
int value   pendingmessagelimitstrategy getmaximumpendingmessagelimit subscription
int consumerlimit   subscription getinfo   getmaximumpendingmessagelimit
if  consumerlimit > 0
if  value < 0    consumerlimit < value
value   consumerlimit
if  value >  0
if  log isdebugenabled
log debug     value       subscription getinfo   getconsumerid
subscription setmaximumpendingmessages value
if  messageevictionstrategy    null
subscription setmessageevictionstrategy messageevictionstrategy
if  pendingsubscriberpolicy    null
string name   subscription getcontext   getclientid         subscription getconsumerinfo   getconsumerid
int maxbatchsize   subscription getconsumerinfo   getprefetchsize
subscription setmatched pendingsubscriberpolicy getsubscriberpendingmessagecursor broker name  maxbatchsize
public void configure broker broker  systemusage memorymanager  durabletopicsubscription sub
string clientid   sub getsubscriptionkey   getclientid
string subname   sub getsubscriptionkey   getsubscriptionname
int prefetch   sub getprefetchsize
if  pendingdurablesubscriberpolicy    null
pendingmessagecursor cursor   pendingdurablesubscriberpolicy getsubscriberpendingmessagecursor broker clientid  subname prefetch sub
cursor setsystemusage memorymanager
sub setpending cursor
sub setmaxauditdepth getmaxauditdepth
sub setmaxproducerstoaudit getmaxproducerstoaudit
// properties
// -------------------------------------------------------------------------
public dispatchpolicy getdispatchpolicy
return dispatchpolicy
public void setdispatchpolicy dispatchpolicy policy
this dispatchpolicy   policy
public subscriptionrecoverypolicy getsubscriptionrecoverypolicy
return subscriptionrecoverypolicy
public void setsubscriptionrecoverypolicy subscriptionrecoverypolicy subscriptionrecoverypolicy
this subscriptionrecoverypolicy   subscriptionrecoverypolicy
public boolean issendadvisoryifnoconsumers
return sendadvisoryifnoconsumers
/**
* sends an advisory message if a non-persistent message is sent and there
* are no active consumers
*/
public void setsendadvisoryifnoconsumers boolean sendadvisoryifnoconsumers
this sendadvisoryifnoconsumers   sendadvisoryifnoconsumers
public deadletterstrategy getdeadletterstrategy
return deadletterstrategy
/**
* sets the policy used to determine which dead letter queue destination
* should be used
*/
public void setdeadletterstrategy deadletterstrategy deadletterstrategy
this deadletterstrategy   deadletterstrategy
public pendingmessagelimitstrategy getpendingmessagelimitstrategy
return pendingmessagelimitstrategy
/**
* sets the strategy to calculate the maximum number of messages that are
* allowed to be pending on consumers (in addition to their prefetch sizes).
* once the limit is reached, non-durable topics can then start discarding
* old messages. this allows us to keep dispatching messages to slow
* consumers while not blocking fast consumers and discarding the messages
* oldest first.
*/
public void setpendingmessagelimitstrategy pendingmessagelimitstrategy pendingmessagelimitstrategy
this pendingmessagelimitstrategy   pendingmessagelimitstrategy
public messageevictionstrategy getmessageevictionstrategy
return messageevictionstrategy
/**
* sets the eviction strategy used to decide which message to evict when the
* slow consumer needs to discard messages
*/
public void setmessageevictionstrategy messageevictionstrategy messageevictionstrategy
this messageevictionstrategy   messageevictionstrategy
public long getmemorylimit
return memorylimit
/**
* @org.apache.xbean.property propertyeditor="org.apache.activemq.util.memorypropertyeditor"
*/
public void setmemorylimit long memorylimit
this memorylimit   memorylimit
public messagegroupmapfactory getmessagegroupmapfactory
if  messagegroupmapfactory    null
messagegroupmapfactory   new messagegrouphashbucketfactory
return messagegroupmapfactory
/**
* sets the factory used to create new instances of {messagegroupmap} used
* to implement the <a
* href="http://activemq.apache.org/message-groups.html">message groups</a>
* functionality.
*/
public void setmessagegroupmapfactory messagegroupmapfactory messagegroupmapfactory
this messagegroupmapfactory   messagegroupmapfactory
/**
* @return the pendingdurablesubscriberpolicy
*/
public pendingdurablesubscribermessagestoragepolicy getpendingdurablesubscriberpolicy
return this pendingdurablesubscriberpolicy
/**
* @param pendingdurablesubscriberpolicy the pendingdurablesubscriberpolicy
*                to set
*/
public void setpendingdurablesubscriberpolicy pendingdurablesubscribermessagestoragepolicy pendingdurablesubscriberpolicy
this pendingdurablesubscriberpolicy   pendingdurablesubscriberpolicy
/**
* @return the pendingqueuepolicy
*/
public pendingqueuemessagestoragepolicy getpendingqueuepolicy
return this pendingqueuepolicy
/**
* @param pendingqueuepolicy the pendingqueuepolicy to set
*/
public void setpendingqueuepolicy pendingqueuemessagestoragepolicy pendingqueuepolicy
this pendingqueuepolicy   pendingqueuepolicy
/**
* @return the pendingsubscriberpolicy
*/
public pendingsubscribermessagestoragepolicy getpendingsubscriberpolicy
return this pendingsubscriberpolicy
/**
* @param pendingsubscriberpolicy the pendingsubscriberpolicy to set
*/
public void setpendingsubscriberpolicy pendingsubscribermessagestoragepolicy pendingsubscriberpolicy
this pendingsubscriberpolicy   pendingsubscriberpolicy
/**
* @return true if producer flow control enabled
*/
public boolean isproducerflowcontrol
return producerflowcontrol
/**
* @param producerflowcontrol
*/
public void setproducerflowcontrol boolean producerflowcontrol
this producerflowcontrol   producerflowcontrol
/**
* @return the maxproducerstoaudit
*/
public int getmaxproducerstoaudit
return maxproducerstoaudit
/**
* @param maxproducerstoaudit the maxproducerstoaudit to set
*/
public void setmaxproducerstoaudit int maxproducerstoaudit
this maxproducerstoaudit   maxproducerstoaudit
/**
* @return the maxauditdepth
*/
public int getmaxauditdepth
return maxauditdepth
/**
* @param maxauditdepth the maxauditdepth to set
*/
public void setmaxauditdepth int maxauditdepth
this maxauditdepth   maxauditdepth
/**
* @return the enableaudit
*/
public boolean isenableaudit
return enableaudit
/**
* @param enableaudit the enableaudit to set
*/
public void setenableaudit boolean enableaudit
this enableaudit   enableaudit
public int getmaxqueueauditdepth
return maxqueueauditdepth
public void setmaxqueueauditdepth int maxqueueauditdepth
this maxqueueauditdepth   maxqueueauditdepth
public boolean isoptimizeddispatch
return optimizeddispatch
public void setoptimizeddispatch boolean optimizeddispatch
this optimizeddispatch   optimizeddispatch
public int getmaxpagesize
return maxpagesize
public void setmaxpagesize int maxpagesize
this maxpagesize   maxpagesize
public boolean isusecache
return usecache
public void setusecache boolean usecache
this usecache   usecache
public long getminimummessagesize
return minimummessagesize
public void setminimummessagesize long minimummessagesize
this minimummessagesize   minimummessagesize
public boolean isuseconsumerpriority
return useconsumerpriority
public void setuseconsumerpriority boolean useconsumerpriority
this useconsumerpriority   useconsumerpriority
public boolean isstrictorderdispatch
return strictorderdispatch
public void setstrictorderdispatch boolean strictorderdispatch
this strictorderdispatch   strictorderdispatch
public boolean islazydispatch
return lazydispatch
public void setlazydispatch boolean lazydispatch
this lazydispatch   lazydispatch