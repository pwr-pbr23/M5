/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq advisory
import java util concurrent atomic atomicboolean
import java util concurrent atomic atomicinteger
import javax jms connection
import javax jms destination
import javax jms jmsexception
import javax jms message
import javax jms messageconsumer
import javax jms messagelistener
import javax jms session
import org apache activemq service
import org apache activemq command activemqdestination
import org apache activemq command activemqmessage
import org apache activemq command activemqtopic
import org apache activemq command consumerid
import org apache activemq command consumerinfo
import org apache activemq command removeinfo
import org apache commons logging log
import org apache commons logging logfactory
/**
* an object which can be used to listen to the number of active consumers
* available on a given destination.
*
* @version $revision$
*/
public class consumereventsource implements service  messagelistener
private static final log log   logfactory getlog consumereventsource class
private final connection connection
private final activemqdestination destination
private consumerlistener listener
private atomicboolean started   new atomicboolean false
private atomicinteger consumercount   new atomicinteger
private session session
private messageconsumer consumer
public consumereventsource connection connection  destination destination  throws jmsexception
this connection   connection
this destination   activemqdestination transform destination
public void setconsumerlistener consumerlistener listener
this listener   listener
public void start   throws exception
if  started compareandset false  true
session   connection createsession false  session auto_acknowledge
activemqtopic advisorytopic   advisorysupport getconsumeradvisorytopic destination
consumer   session createconsumer advisorytopic
consumer setmessagelistener this
public void stop   throws exception
if  started compareandset true  false
if  session    null
session close
public void onmessage message message
if  message instanceof activemqmessage
activemqmessage activemessage    activemqmessage message
object command   activemessage getdatastructure
int count   0
if  command instanceof consumerinfo
count   consumercount incrementandget
count   extractconsumercountfrommessage message  count
fireconsumerevent new consumerstartedevent this  destination   consumerinfo command  count
else if  command instanceof removeinfo
removeinfo removeinfo    removeinfo command
if  removeinfo isconsumerremove
count   consumercount decrementandget
count   extractconsumercountfrommessage message  count
fireconsumerevent new consumerstoppedevent this  destination   consumerid removeinfo getobjectid    count
else
log warn     command
else
log warn     message
/**
* lets rely by default on the broker telling us what the consumer count is
* as it can ensure that we are up to date at all times and have not
* received messages out of order etc.
*/
protected int extractconsumercountfrommessage message message  int count
try
object value   message getobjectproperty
if  value instanceof number
number n    number value
return n intvalue
log warn     message
catch  exception e
log warn     message       e  e
return count
protected void fireconsumerevent consumerevent event
if  listener    null
listener onconsumerevent event