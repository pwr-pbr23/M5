/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq broker region
import java io ioexception
import java util list
import javax jms jmsexception
import org apache activemq broker region group messagegroupmap
import org apache activemq broker region policy simpledispatchselector
import org apache activemq command activemqdestination
import org apache activemq command activemqmessage
import org apache activemq command consumerid
import org apache activemq command message
import org apache commons logging log
import org apache commons logging logfactory
/**
* queue dispatch policy that determines if a message can be sent to a subscription
*
* @org.apache.xbean.xbean
* @version $revision$
*/
public class queuedispatchselector extends simpledispatchselector
private static final log log   logfactory getlog queuedispatchselector class
private subscription exclusiveconsumer
/**
* @param destination
*/
public queuedispatchselector activemqdestination destination
super destination
public subscription getexclusiveconsumer
return exclusiveconsumer
public void setexclusiveconsumer subscription exclusiveconsumer
this exclusiveconsumer   exclusiveconsumer
public boolean isexclusiveconsumer subscription s
return s    this exclusiveconsumer
public boolean canselect subscription subscription
messagereference m  throws exception
if  subscription isbrowser      super candispatch subscription  m
return true
boolean result    super candispatch subscription  m
if  result
result   exclusiveconsumer    null
exclusiveconsumer    subscription
if  result
queuemessagereference node    queuemessagereference  m
// keep message groups together.
string groupid   node getgroupid
int sequence   node getgroupsequence
if  groupid    null
messagegroupmap messagegroupowners     queue  node
getregiondestination    getmessagegroupowners
// if we can own the first, then no-one else should own the
// rest.
if  sequence    1
assigngroup subscription  messagegroupowners  node groupid
else
// make sure that the previous owner is still valid, we may
// need to become the new owner.
consumerid groupowner
groupowner   messagegroupowners get groupid
if  groupowner    null
assigngroup subscription  messagegroupowners  node groupid
else
if  groupowner equals subscription getconsumerinfo   getconsumerid
// a group sequence < 1 is an end of group signal.
if  sequence < 0
messagegroupowners removegroup groupid
else
result   false
return result
protected void assigngroup subscription subs messagegroupmap messagegroupowners  messagereference n  string groupid  throws ioexception
messagegroupowners put groupid  subs getconsumerinfo   getconsumerid
message message   n getmessage
if  message instanceof activemqmessage
activemqmessage activemessage    activemqmessage message
try
activemessage setbooleanproperty    true  false
catch  jmsexception e
log warn     e  e