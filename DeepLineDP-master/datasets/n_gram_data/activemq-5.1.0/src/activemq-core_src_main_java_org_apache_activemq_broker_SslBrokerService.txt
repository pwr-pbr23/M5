/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq broker
import java io ioexception
import java net uri
import java security keymanagementexception
import java security securerandom
import javax net ssl keymanager
import javax net ssl trustmanager
import org apache activemq transport transportfactory
import org apache activemq transport transportserver
import org apache activemq transport tcp ssltransportfactory
/**
* a brokerservice that allows access to the key and trust managers used by ssl
* connections. there is no reason to use this class unless ssl is being used
* and the key and trust managers need to be specified from within code. in
* fact, if the uri passed to this class does not have an "ssl" scheme, this
* class will pass all work on to its superclass.
*
* @author sepandm@gmail.com (sepand)
*/
public class sslbrokerservice extends brokerservice
/**
* adds a new transport connector for the given bind address. if the
* transport created uses ssl, it will also use the key and trust managers
* provided. otherwise, this is the same as calling addconnector.
*
* @param bindaddress the address to bind to.
* @param km the keymanager to be used.
* @param tm the trustmanager to be used.
* @param random the source of randomness for the generator.
* @return the newly connected and added transport connector.
* @throws exception
*/
public transportconnector addsslconnector string bindaddress  keymanager km  trustmanager tm  securerandom random  throws exception
return addsslconnector new uri bindaddress   km  tm  random
/**
* adds a new transport connector for the given bind address. if the
* transport created uses ssl, it will also use the key and trust managers
* provided. otherwise, this is the same as calling addconnector.
*
* @param bindaddress the uri to bind to.
* @param km the keymanager to be used.
* @param tm the trustmanager to be used.
* @param random the source of randomness for the generator.
* @return the newly created and added transport connector.
* @throws exception
*/
public transportconnector addsslconnector uri bindaddress  keymanager km  trustmanager tm  securerandom random  throws exception
return addconnector createssltransportserver bindaddress  km  tm  random
/**
* creates a transportserver that uses the given key and trust managers. the
* last three parameters will be eventually passed to sslcontext.init.
*
* @param brokeruri the uri to bind to.
* @param km the keymanager to be used.
* @param tm the trustmanager to be used.
* @param random the source of randomness for the generator.
* @return a new transportserver that uses the given managers.
* @throws ioexception if cannot handle uri.
* @throws keymanagementexception passed on from ssl.
*/
protected transportserver createssltransportserver uri brokeruri  keymanager km  trustmanager tm  securerandom random  throws ioexception  keymanagementexception
if  brokeruri getscheme   equals
// if given an ssl uri, use an ssl transportfactory and configure
// it to use the given key and trust managers.
ssltransportfactory transportfactory   new ssltransportfactory
transportfactory setkeyandtrustmanagers km  tm  random
return transportfactory dobind brokeruri
else
// else, business as usual.
return transportfactory bind this  brokeruri