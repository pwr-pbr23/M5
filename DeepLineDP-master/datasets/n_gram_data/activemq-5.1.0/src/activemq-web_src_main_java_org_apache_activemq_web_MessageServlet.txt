/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq web
import java io ioexception
import java io printwriter
import java util linkedlist
import java util list
import javax jms destination
import javax jms jmsexception
import javax jms message
import javax jms messageconsumer
import javax jms objectmessage
import javax jms textmessage
import javax servlet servletconfig
import javax servlet servletexception
import javax servlet http httpservletrequest
import javax servlet http httpservletresponse
import org apache activemq messageavailableconsumer
import org apache activemq messageavailablelistener
import org apache commons logging log
import org apache commons logging logfactory
import org mortbay util ajax continuation
import org mortbay util ajax continuationsupport
/**
* a servlet for sending and receiving messages to/from jms destinations using
* http post for sending and http get for receiving. <p/> you can specify the
* destination and whether it is a topic or queue via configuration details on
* the servlet or as request parameters. <p/> for reading messages you can
* specify a readtimeout parameter to determine how long the servlet should
* block for.
*
* @version $revision: 1.1.1.1 $
*/
public class messageservlet extends messageservletsupport
private static final log log   logfactory getlog messageservlet class
private string readtimeoutparameter
private long defaultreadtimeout    1
private long maximumreadtimeout   20000
public void init   throws servletexception
servletconfig servletconfig   getservletconfig
string name   servletconfig getinitparameter
if  name    null
defaultreadtimeout   aslong name
name   servletconfig getinitparameter
if  name    null
maximumreadtimeout   aslong name
/**
* sends a message to a destination
*
* @param request
* @param response
* @throws servletexception
* @throws ioexception
*/
protected void dopost httpservletrequest request  httpservletresponse response  throws servletexception  ioexception
// lets turn the http post into a jms message
try
webclient client   webclient getwebclient request
string text   getpostedmessagebody request
// lets create the destination from the uri?
destination destination   getdestination client  request
if  destination    null
throw new nodestinationsuppliedexception
if  log isdebugenabled
log debug     destination       text
textmessage message   client getsession   createtextmessage text
appendparameterstomessage request  message
boolean persistent   issendpersistent request
int priority   getsendpriority request
long timetolive   getsendtimetolive request
client send destination  message  persistent  priority  timetolive
// lets return a unique uri for reliable messaging
response setheader    message getjmsmessageid
response setstatus httpservletresponse sc_ok
catch  jmsexception e
throw new servletexception     e  e
/**
* supports a http delete to be equivlanent of consuming a singe message
* from a queue
*/
protected void dodelete httpservletrequest request  httpservletresponse response  throws servletexception  ioexception
domessages request  response  1
/**
* supports a http delete to be equivlanent of consuming a singe message
* from a queue
*/
protected void doget httpservletrequest request  httpservletresponse response  throws servletexception  ioexception
domessages request  response   1
/**
* reads a message from a destination up to some specific timeout period
*
* @param request
* @param response
* @throws servletexception
* @throws ioexception
*/
protected void domessages httpservletrequest request  httpservletresponse response  int maxmessages  throws servletexception  ioexception
int messages   0
try
webclient client   webclient getwebclient request
destination destination   getdestination client  request
if  destination    null
throw new nodestinationsuppliedexception
long timeout   getreadtimeout request
boolean ajax   isricoajax request
if   ajax
maxmessages   1
if  log isdebugenabled
log debug     destination       timeout
messageavailableconsumer consumer    messageavailableconsumer client getconsumer destination
continuation continuation   null
listener listener   null
message message   null
synchronized  consumer
// fetch the listeners
listener    listener consumer getavailablelistener
if  listener    null
listener   new listener consumer
consumer setavailablelistener listener
// look for any available messages
message   consumer receivenowait
// get an existing continuation or create a new one if there are
// no events.
if  message    null
continuation   continuationsupport getcontinuation request  consumer
// register this continuation with our listener.
listener setcontinuation continuation
// get the continuation object (may wait and/or retry
// request here).
continuation suspend timeout
// try again now
if  message    null
message   consumer receivenowait
// write a responds
response setcontenttype
printwriter writer   response getwriter
if  ajax
writer println
// handle any message(s)
if  message    null
// no messages so ok response of for ajax else no content.
response setstatus ajax ? httpservletresponse sc_ok   httpservletresponse sc_no_content
else
// we have at least one message so set up the response
response setstatus httpservletresponse sc_ok
string type   getcontenttype request
if  type    null
response setcontenttype type
// send a response for each available message (up to max
// messages)
while   maxmessages < 0    messages < maxmessages     message    null
// system.err.println("message["+messages+"]="+message);
if  ajax
writer print
writer print request getparameter
writer println
else
// only ever 1 message for non ajax!
setresponseheaders response  message
writemessageresponse writer  message
if  ajax
writer println
// look for next message
message   consumer receivenowait
messages
if  ajax
writer println
writer println
catch  jmsexception e
throw new servletexception     e  e
finally
if  log isdebugenabled
log debug     messages
/**
* reads a message from a destination up to some specific timeout period
*
* @param request
* @param response
* @throws servletexception
* @throws ioexception
*/
protected void domessageswithoutcontinuation httpservletrequest request  httpservletresponse response  int maxmessages  throws servletexception  ioexception
int messages   0
try
webclient client   webclient getwebclient request
destination destination   getdestination client  request
long timeout   getreadtimeout request
boolean ajax   isricoajax request
if   ajax
maxmessages   1
if  log isdebugenabled
log debug     destination       timeout
messageavailableconsumer consumer    messageavailableconsumer client getconsumer destination
message message   null
// write a responds
response setcontenttype
printwriter writer   response getwriter
if  ajax
writer println
// only one client thread at a time should poll for messages.
if  client getsemaphore   tryacquire
try
// look for any available messages
message   consumer receive timeout
// handle any message(s)
if  message    null
// no messages so ok response of for ajax else no
// content.
response setstatus ajax ? httpservletresponse sc_ok   httpservletresponse sc_no_content
else
// we have at least one message so set up the
// response
response setstatus httpservletresponse sc_ok
string type   getcontenttype request
if  type    null
response setcontenttype type
// send a response for each available message (up to
// max
// messages)
while   maxmessages < 0    messages < maxmessages     message    null
// system.err.println("message["+messages+"]="+message);
if  ajax
writer print
writer print request getparameter
writer println
else
// only ever 1 message for non ajax!
setresponseheaders response  message
writemessageresponse writer  message
if  ajax
writer println
// look for next message
message   consumer receivenowait
messages
finally
client getsemaphore   release
else
// client is using us in another thread.
response setstatus ajax ? httpservletresponse sc_ok   httpservletresponse sc_no_content
if  ajax
writer println
writer println
catch  jmsexception e
throw new servletexception     e  e
finally
if  log isdebugenabled
log debug     messages
protected void writemessageresponse printwriter writer  message message  throws jmsexception  ioexception
if  message instanceof textmessage
textmessage textmsg    textmessage message
string txt   textmsg gettext
if  txt startswith
txt   txt substring txt indexof      2
writer print txt
else if  message instanceof objectmessage
objectmessage objectmsg    objectmessage message
object object   objectmsg getobject
writer print object tostring
protected boolean isricoajax httpservletrequest request
string rico   request getparameter
return rico    null    rico equals
protected string getcontenttype httpservletrequest request
/*
* log("params: " + request.getparametermap()); enumeration iter =
* request.getheadernames(); while (iter.hasmoreelements()) { string
* name = (string) iter.nextelement(); log("header: " + name + " = " +
* request.getheader(name)); }
*/
string value   request getparameter
if  value    null      equalsignorecase value
return
return null
protected void setresponseheaders httpservletresponse response  message message  throws jmsexception
response setheader    message getjmsdestination   tostring
response setheader    message getjmsmessageid
/**
* @return the timeout value for read requests which is always >= 0 and <=
*         maximumreadtimeout to avoid dos attacks
*/
protected long getreadtimeout httpservletrequest request
long answer   defaultreadtimeout
string name   request getparameter readtimeoutparameter
if  name    null
answer   aslong name
if  answer < 0    answer > maximumreadtimeout
answer   maximumreadtimeout
return answer
/*
* listen for available messages and wakeup any continuations.
*/
private static class listener implements messageavailablelistener
messageconsumer consumer
continuation continuation
list queue   new linkedlist
listener messageconsumer consumer
this consumer   consumer
public void setcontinuation continuation continuation
synchronized  consumer
this continuation   continuation
public void onmessageavailable messageconsumer consumer
assert this consumer    consumer
synchronized  this consumer
if  continuation    null
continuation resume
continuation   null