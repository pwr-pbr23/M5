/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq broker jmx
import java io ioexception
import java lang reflect method
import java net malformedurlexception
import java rmi registry locateregistry
import java util list
import java util concurrent atomic atomicboolean
import javax management attribute
import javax management jmexception
import javax management mbeanserver
import javax management mbeanserverfactory
import javax management malformedobjectnameexception
import javax management objectname
import javax management remote jmxconnectorserver
import javax management remote jmxconnectorserverfactory
import javax management remote jmxserviceurl
import org apache activemq service
import org apache commons logging log
import org apache commons logging logfactory
/**
* a flow provides different dispatch policies within the nmr
*
* @org.apache.xbean.xbean
* @version $revision$
*/
public class managementcontext implements service
/**
* default activemq domain
*/
public static final string default_domain
private static final log log   logfactory getlog managementcontext class
private mbeanserver beanserver
private string jmxdomainname   default_domain
private boolean usembeanserver   true
private boolean creatembeanserver   true
private boolean locallycreatembeanserver
private boolean createconnector   true
private boolean findtigermbeanserver
private int connectorport   1099
private int rmiserverport
private string connectorpath
private atomicboolean started   new atomicboolean false
private jmxconnectorserver connectorserver
private objectname namingserviceobjectname
public managementcontext
this null
public managementcontext mbeanserver server
this beanserver   server
public void start   throws ioexception
// lets force the mbeanserver to be created if needed
if  started compareandset false  true
getmbeanserver
if  connectorserver    null
try
getmbeanserver   invoke namingserviceobjectname     null  null
catch  throwable ignore
thread t   new thread
public void run
try
jmxconnectorserver server   connectorserver
if  started get      server    null
server start
log info     server getaddress
catch  ioexception e
log warn     e getmessage
t setdaemon true
t start
public void stop   throws ioexception
if  started compareandset true  false
jmxconnectorserver server   connectorserver
connectorserver   null
if  server    null
try
server stop
catch  ioexception e
log warn     e getmessage
try
getmbeanserver   invoke namingserviceobjectname     null  null
catch  throwable ignore
if  locallycreatembeanserver    beanserver    null
// check to see if the factory knows about this server
list list   mbeanserverfactory findmbeanserver null
if  list    null     list isempty      list contains beanserver
mbeanserverfactory releasembeanserver beanserver
/**
* @return returns the jmxdomainname.
*/
public string getjmxdomainname
return jmxdomainname
/**
* @param jmxdomainname the jmxdomainname to set.
*/
public void setjmxdomainname string jmxdomainname
this jmxdomainname   jmxdomainname
/**
* get the mbeanserver
*
* @return the mbeanserver
*/
public mbeanserver getmbeanserver
if  this beanserver    null
this beanserver   findmbeanserver
return beanserver
/**
* set the mbeanserver
*
* @param beanserver
*/
public void setmbeanserver mbeanserver beanserver
this beanserver   beanserver
/**
* @return returns the usembeanserver.
*/
public boolean isusembeanserver
return usembeanserver
/**
* @param usembeanserver the usembeanserver to set.
*/
public void setusembeanserver boolean usembeanserver
this usembeanserver   usembeanserver
/**
* @return returns the creatembeanserver flag.
*/
public boolean iscreatembeanserver
return creatembeanserver
/**
* @param enablejmx set creatembeanserver.
*/
public void setcreatembeanserver boolean enablejmx
this creatembeanserver   enablejmx
public boolean isfindtigermbeanserver
return findtigermbeanserver
/**
* enables/disables the searching for the java 5 platform mbeanserver
*/
public void setfindtigermbeanserver boolean findtigermbeanserver
this findtigermbeanserver   findtigermbeanserver
/**
* formulate and return the mbean objectname of a custom control mbean
*
* @param type
* @param name
* @return the jmx objectname of the mbean, or <code>null</code> if
*         <code>customname</code> is invalid.
*/
public objectname createcustomcomponentmbeanname string type  string name
objectname result   null
string tmp   jmxdomainname           sanitizestring type        sanitizestring name
try
result   new objectname tmp
catch  malformedobjectnameexception e
log error     type       name
return result
/**
* the ':' and '/' characters are reserved in objectnames
*
* @param in
* @return sanitized string
*/
private static string sanitizestring string in
string result   null
if  in    null
result   in replace
result   result replace
result   result replace
return result
/**
* retrive an system objectname
*
* @param domainname
* @param containername
* @param theclass
* @return the objectname
* @throws malformedobjectnameexception
*/
public static objectname getsystemobjectname string domainname  string containername  class theclass  throws malformedobjectnameexception  nullpointerexception
string tmp   domainname           theclass getname         getrelativename containername  theclass
return new objectname tmp
private static string getrelativename string containername  class theclass
string name   theclass getname
int index   name lastindexof
if  index >  0     index   1  < name length
name   name substring index   1
return containername       name
/**
* unregister an mbean
*
* @param name
* @throws jmexception
*/
public void unregistermbean objectname name  throws jmexception
if  beanserver    null    beanserver isregistered name
beanserver unregistermbean name
protected synchronized mbeanserver findmbeanserver
mbeanserver result   null
// create the mbean server
try
if  usembeanserver
if  findtigermbeanserver
result   findtigermbeanserver
if  result    null
// lets piggy back on another mbeanserver -
// we could be in an appserver!
list list   mbeanserverfactory findmbeanserver null
if  list    null    list size   > 0
result    mbeanserver list get 0
if  result    null    creatembeanserver
result   creatembeanserver
if  result    null    createconnector
createconnector result
catch  noclassdeffounderror e
log error    e
catch  throwable e
// probably don't have access to system properties
log error    e
return result
public static mbeanserver findtigermbeanserver
string name
class type   loadclass name  managementcontext class getclassloader
if  type    null
try
method method   type getmethod    new class
if  method    null
object answer   method invoke null  new object
if  answer instanceof mbeanserver
return  mbeanserver answer
else
log warn     answer
else
log warn     type getname
catch  exception e
log warn     e  e
else
log trace     name
return null
private static class loadclass string name  classloader loader
try
return loader loadclass name
catch  classnotfoundexception e
try
return thread currentthread   getcontextclassloader   loadclass name
catch  classnotfoundexception e1
return null
/**
* @return
* @throws nullpointerexception
* @throws malformedobjectnameexception
* @throws ioexception
*/
protected mbeanserver creatembeanserver   throws malformedobjectnameexception  ioexception
mbeanserver mbeanserver   mbeanserverfactory creatembeanserver jmxdomainname
locallycreatembeanserver   true
if  createconnector
createconnector mbeanserver
return mbeanserver
/**
* @param mbeanserver
* @throws malformedobjectnameexception
* @throws malformedurlexception
* @throws ioexception
*/
private void createconnector mbeanserver mbeanserver  throws malformedobjectnameexception  malformedurlexception  ioexception
// create the namingservice, needed by jsr 160
try
locateregistry createregistry connectorport
namingserviceobjectname   objectname getinstance
// do not use the creatembean as the mx4j jar may not be in the
// same class loader than the server
class cl   class forname
mbeanserver registermbean cl newinstance    namingserviceobjectname
// mbeanserver.creatembean("mx4j.tools.naming.namingservice",
// namingserviceobjectname, null);
// set the naming port
attribute attr   new attribute    integer valueof connectorport
mbeanserver setattribute namingserviceobjectname  attr
catch classnotfoundexception e
log debug     e getlocalizedmessage
catch  throwable e
log debug    e
// create the jmxconnectorserver
string rmiserver
if  rmiserverport    0
// this is handy to use if you have a firewall and need to
// force jmx to use fixed ports.
rmiserver       rmiserverport
string serviceurl       rmiserver       connectorport   connectorpath
jmxserviceurl url   new jmxserviceurl serviceurl
connectorserver   jmxconnectorserverfactory newjmxconnectorserver url  null  mbeanserver
public string getconnectorpath
return connectorpath
public void setconnectorpath string connectorpath
this connectorpath   connectorpath
public int getconnectorport
return connectorport
public void setconnectorport int connectorport
this connectorport   connectorport
public int getrmiserverport
return rmiserverport
public void setrmiserverport int rmiserverport
this rmiserverport   rmiserverport
public boolean iscreateconnector
return createconnector
public void setcreateconnector boolean createconnector
this createconnector   createconnector