/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq store kahadaptor
import java io file
import java io ioexception
import java util hashmap
import java util hashset
import java util iterator
import java util map
import java util set
import java util concurrent atomic atomicboolean
import java util concurrent atomic atomicinteger
import java util concurrent atomic atomiclong
import java util concurrent locks lock
import org apache activemq broker connectioncontext
import org apache activemq command activemqdestination
import org apache activemq command activemqqueue
import org apache activemq command activemqtopic
import org apache activemq command messageid
import org apache activemq command subscriptioninfo
import org apache activemq command transactionid
import org apache activemq kaha commandmarshaller
import org apache activemq kaha listcontainer
import org apache activemq kaha mapcontainer
import org apache activemq kaha messageidmarshaller
import org apache activemq kaha store
import org apache activemq kaha storefactory
import org apache activemq kaha impl storelockedexcpetion
import org apache activemq kaha impl index hash hashindex
import org apache activemq store messagestore
import org apache activemq store referencestore
import org apache activemq store referencestoreadapter
import org apache activemq store topicmessagestore
import org apache activemq store topicreferencestore
import org apache activemq store amq amqtx
import org apache commons logging log
import org apache commons logging logfactory
public class kahareferencestoreadapter extends kahapersistenceadapter implements referencestoreadapter
private static final log log   logfactory getlog kahareferencestoreadapter class
private static final string store_state
private static final string index_version_name
private static final integer index_version   new integer 6
private static final string record_references
private static final string transactions
private mapcontainer statemap
private mapcontainer<transactionid  amqtx> preparedtransactions
private map<integer  atomicinteger> recordreferences   new hashmap<integer  atomicinteger>
private listcontainer<subscriptioninfo> durablesubscribers
private boolean storevalid
private store statestore
private boolean persistentindex   true
private int indexbinsize   hashindex default_bin_size
private int indexkeysize   hashindex default_key_size
private int indexpagesize   hashindex default_page_size
public kahareferencestoreadapter atomiclong size
super size
}
public synchronized messagestore createqueuemessagestore activemqqueue destination  throws ioexception
throw new runtimeexception
}
public synchronized topicmessagestore createtopicmessagestore activemqtopic destination
throws ioexception
throw new runtimeexception
}
@override
public synchronized void start   throws exception
super start
store store   getstatestore
boolean empty   store getmapcontainerids   isempty
statemap   store getmapcontainer    store_state
statemap load
storevalid true
if   empty
atomicboolean status    atomicboolean statemap get store_state
if  status    null
storevalid   status get
}
if  storevalid
//check what version the indexes are at
integer indexversion    integer  statemap get index_version_name
if  indexversion  null    indexversion intvalue   < index_version intvalue
storevalid   false
log warn
}
}
if  storevalid
if  statemap containskey record_references
recordreferences    map<integer  atomicinteger> statemap get record_references
}
}
}
statemap put store_state  new atomicboolean
statemap put index_version_name  index_version
durablesubscribers   store getlistcontainer
durablesubscribers setmarshaller new commandmarshaller
preparedtransactions   store getmapcontainer    transactions  false
// need to set the marshallers here
preparedtransactions setkeymarshaller store command_marshaller
preparedtransactions setvaluemarshaller new amqtxmarshaller wireformat
}
@override
public synchronized void stop   throws exception
statemap put record_references  recordreferences
statemap put store_state  new atomicboolean true
statemap put index_version_name  index_version
if  this statestore    null
this statestore close
this statestore   null
this statemap   null
}
super stop
}
public void committransaction connectioncontext context  throws ioexception
//we don;t need to force on a commit - as the reference store
//is rebuilt on a non clean shutdown
}
public boolean isstorevalid
return storevalid
}
public referencestore createqueuereferencestore activemqqueue destination  throws ioexception
referencestore rc    referencestore queues get destination
if  rc    null
rc   new kahareferencestore this  getmapreferencecontainer destination
destination
messagestores put destination  rc
// if(transactionstore!=null){
// rc=transactionstore.proxy(rc);
// }
queues put destination  rc
}
return rc
}
public topicreferencestore createtopicreferencestore activemqtopic destination  throws ioexception
topicreferencestore rc    topicreferencestore topics get destination
if  rc    null
store store   getstore
mapcontainer messagecontainer   getmapreferencecontainer destination getphysicalname
mapcontainer subscontainer   getsubsmapcontainer destination getphysicalname
listcontainer<topicsuback> ackcontainer   store getlistcontainer destination getphysicalname
ackcontainer setmarshaller new topicsubackmarshaller
rc   new kahatopicreferencestore store  this  messagecontainer  ackcontainer  subscontainer
destination
messagestores put destination  rc
// if(transactionstore!=null){
// rc=transactionstore.proxy(rc);
// }
topics put destination  rc
}
return rc
}
/*
public void buildreferencefileidsinuse() throws ioexception {
recordreferences = new hashmap<integer, atomicinteger>();
set<activemqdestination> destinations = getdestinations();
for (activemqdestination destination : destinations) {
if (destination.isqueue()) {
kahareferencestore store = (kahareferencestore)createqueuereferencestore((activemqqueue)destination);
store.addreferencefileidsinuse();
} else {
kahatopicreferencestore store = (kahatopicreferencestore)createtopicreferencestore((activemqtopic)destination);
store.addreferencefileidsinuse();
}
}
}
*/
protected mapcontainer<messageid  referencerecord> getmapreferencecontainer object id
string containername
throws ioexception
store store   getstore
mapcontainer<messageid  referencerecord> container   store getmapcontainer id  containername persistentindex
container setindexbinsize getindexbinsize
container setindexkeysize getindexkeysize
container setindexpagesize getindexpagesize
container setkeymarshaller new messageidmarshaller
container setvaluemarshaller new referencerecordmarshaller
container load
return container
}
synchronized void addinterestinrecordfile int recordnumber
integer key   integer valueof recordnumber
atomicinteger rr   recordreferences get key
if  rr    null
rr   new atomicinteger
recordreferences put key  rr
}
rr incrementandget
}
synchronized void removeinterestinrecordfile int recordnumber
integer key   integer valueof recordnumber
atomicinteger rr   recordreferences get key
if  rr    null    rr decrementandget   <  0
recordreferences remove key
}
}
/**
* @return
* @throws ioexception
* @see org.apache.activemq.store.referencestoreadapter#getreferencefileidsinuse()
*/
public set<integer> getreferencefileidsinuse   throws ioexception
return recordreferences keyset
}
/**
*
* @throws ioexception
* @see org.apache.activemq.store.referencestoreadapter#clearmessages()
*/
public void clearmessages   throws ioexception
//don't delete messages as it will clear state - call base
//class method to clear out the data instead
super deleteallmessages
}
/**
*
* @throws ioexception
* @see org.apache.activemq.store.referencestoreadapter#recoverstate()
*/
public void recoverstate   throws ioexception
set<subscriptioninfo> set   new hashset<subscriptioninfo> this durablesubscribers
for  subscriptioninfo info set
log info     info
topicreferencestore ts   createtopicreferencestore  activemqtopic info getdestination
ts addsubsciption info  false
}
}
public map<transactionid  amqtx> retrievepreparedstate   throws ioexception
map<transactionid  amqtx> result   new hashmap<transactionid  amqtx>
preparedtransactions load
for  iterator<transactionid> i   preparedtransactions keyset   iterator    i hasnext
transactionid key   i next
amqtx value   preparedtransactions get key
result put key  value
}
return result
}
public void savepreparedstate map<transactionid  amqtx> map  throws ioexception
preparedtransactions clear
for  iterator<map entry<transactionid  amqtx>> iter   map entryset   iterator    iter hasnext
map entry<transactionid  amqtx> entry   iter next
preparedtransactions put entry getkey    entry getvalue
}
}
@override
public synchronized void setdirectory file directory
file file   new file directory
super setdirectory file
this statestore   createstatestore directory
}
protected synchronized store getstatestore   throws ioexception
if  this statestore    null
file statedirectory   new file getdirectory
statedirectory mkdirs
this statestore   createstatestore getdirectory
}
return this statestore
}
public void deleteallmessages   throws ioexception
super deleteallmessages
if  statestore    null
if  statestore isinitialized
statestore clear
} else {
statestore delete
}
} else {
file statedirectory   new file getdirectory
storefactory delete statedirectory
}
}
public boolean ispersistentindex
return persistentindex
}
public void setpersistentindex boolean persistentindex
this persistentindex   persistentindex
}
private store createstatestore file directory
file statedirectory   new file directory
statedirectory mkdirs
try
return storefactory open statedirectory
catch  ioexception e
log error    e
}
return null
}
protected void addsubscriberstate subscriptioninfo info  throws ioexception
durablesubscribers add info
}
protected void removesubscriberstate subscriptioninfo info
durablesubscribers remove info
}
public int getindexbinsize
return indexbinsize
}
public void setindexbinsize int indexbinsize
this indexbinsize   indexbinsize
}
public int getindexkeysize
return indexkeysize
}
public void setindexkeysize int indexkeysize
this indexkeysize   indexkeysize
}
public int getindexpagesize
return indexpagesize
}
public void setindexpagesize int indexpagesize
this indexpagesize   indexpagesize
}
}