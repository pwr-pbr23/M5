/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq broker region
import java io ioexception
import java net uri
import java util arraylist
import java util collections
import java util hashmap
import java util map
import java util set
import java util concurrent concurrenthashmap
import java util concurrent copyonwritearraylist
import javax jms invalidclientidexception
import javax jms jmsexception
import org apache activemq broker broker
import org apache activemq broker brokerservice
import org apache activemq broker connection
import org apache activemq broker connectioncontext
import org apache activemq broker consumerbrokerexchange
import org apache activemq broker producerbrokerexchange
import org apache activemq broker region policy deadletterstrategy
import org apache activemq broker region policy policymap
import org apache activemq command activemqdestination
import org apache activemq command brokerid
import org apache activemq command brokerinfo
import org apache activemq command connectionid
import org apache activemq command connectioninfo
import org apache activemq command consumerinfo
import org apache activemq command destinationinfo
import org apache activemq command message
import org apache activemq command messageack
import org apache activemq command messagedispatch
import org apache activemq command messagedispatchnotification
import org apache activemq command messagepull
import org apache activemq command producerinfo
import org apache activemq command removesubscriptioninfo
import org apache activemq command response
import org apache activemq command sessioninfo
import org apache activemq command transactionid
import org apache activemq kaha store
import org apache activemq state connectionstate
import org apache activemq thread taskrunnerfactory
import org apache activemq usage systemusage
import org apache activemq util brokersupport
import org apache activemq util idgenerator
import org apache activemq util longsequencegenerator
import org apache activemq util servicestopper
import org apache commons logging log
import org apache commons logging logfactory
/**
* routes broker operations to the correct messaging regions for processing.
*
* @version $revision$
*/
public class regionbroker implements broker
private static final log log   logfactory getlog regionbroker class
private static final idgenerator broker_id_generator   new idgenerator
protected final destinationstatistics destinationstatistics   new destinationstatistics
protected destinationfactory destinationfactory
protected final map<connectionid  connectionstate> connectionstates   collections synchronizedmap new hashmap<connectionid  connectionstate>
private final region queueregion
private final region topicregion
private final region tempqueueregion
private final region temptopicregion
protected brokerservice brokerservice
private boolean started
private boolean keepdurablesubsactive
private final copyonwritearraylist<connection> connections   new copyonwritearraylist<connection>
private final map<activemqdestination  destination> destinations   new concurrenthashmap<activemqdestination  destination>
private final copyonwritearraylist<brokerinfo> brokerinfos   new copyonwritearraylist<brokerinfo>
private final longsequencegenerator sequencegenerator   new longsequencegenerator
private brokerid brokerid
private string brokername
private map<string  connectioncontext> clientidset   new hashmap<string  connectioncontext>
private final destinationinterceptor destinationinterceptor
private connectioncontext adminconnectioncontext
public regionbroker brokerservice brokerservice  taskrunnerfactory taskrunnerfactory  systemusage memorymanager  destinationfactory destinationfactory
destinationinterceptor destinationinterceptor  throws ioexception
this brokerservice   brokerservice
if  destinationfactory    null
throw new illegalargumentexception
this sequencegenerator setlastsequenceid destinationfactory getlastmessagebrokersequenceid
this destinationfactory   destinationfactory
queueregion   createqueueregion memorymanager  taskrunnerfactory  destinationfactory
topicregion   createtopicregion memorymanager  taskrunnerfactory  destinationfactory
this destinationinterceptor   destinationinterceptor
tempqueueregion   createtempqueueregion memorymanager  taskrunnerfactory  destinationfactory
temptopicregion   createtemptopicregion memorymanager  taskrunnerfactory  destinationfactory
public map<activemqdestination  destination> getdestinationmap
map<activemqdestination  destination> answer   getqueueregion   getdestinationmap
answer putall gettopicregion   getdestinationmap
return answer
public set <destination> getdestinations activemqdestination destination
switch  destination getdestinationtype
case activemqdestination queue_type
return queueregion getdestinations destination
case activemqdestination topic_type
return topicregion getdestinations destination
case activemqdestination temp_queue_type
return tempqueueregion getdestinations destination
case activemqdestination temp_topic_type
return temptopicregion getdestinations destination
default
return collections empty_set
public broker getadaptor class type
if  type isinstance this
return this
return null
public region getqueueregion
return queueregion
public region gettempqueueregion
return tempqueueregion
public region gettemptopicregion
return temptopicregion
public region gettopicregion
return topicregion
protected region createtemptopicregion systemusage memorymanager  taskrunnerfactory taskrunnerfactory  destinationfactory destinationfactory
return new temptopicregion this  destinationstatistics  memorymanager  taskrunnerfactory  destinationfactory
protected region createtempqueueregion systemusage memorymanager  taskrunnerfactory taskrunnerfactory  destinationfactory destinationfactory
return new tempqueueregion this  brokerservice  destinationstatistics  memorymanager  taskrunnerfactory  destinationfactory
protected region createtopicregion systemusage memorymanager  taskrunnerfactory taskrunnerfactory  destinationfactory destinationfactory
return new topicregion this  destinationstatistics  memorymanager  taskrunnerfactory  destinationfactory
protected region createqueueregion systemusage memorymanager  taskrunnerfactory taskrunnerfactory  destinationfactory destinationfactory
return new queueregion this  destinationstatistics  memorymanager  taskrunnerfactory  destinationfactory
public void start   throws exception
topicregion topicregion  setkeepdurablesubsactive keepdurablesubsactive
started   true
queueregion start
topicregion start
tempqueueregion start
temptopicregion start
public void stop   throws exception
started   false
servicestopper ss   new servicestopper
dostop ss
ss throwfirstexception
public policymap getdestinationpolicy
return brokerservice    null ? brokerservice getdestinationpolicy     null
public void addconnection connectioncontext context  connectioninfo info  throws exception
string clientid   info getclientid
if  clientid    null
throw new invalidclientidexception
synchronized  clientidset
connectioncontext oldcontext   clientidset get clientid
if  oldcontext    null
if  context isfaulttolerant      context isnetworkconnection
//remove the old connection
try
removeconnection oldcontext  info  new exception
catch exception e
log warn   e
else
throw new invalidclientidexception     getbrokername         clientid
oldcontext getconnection   getremoteaddress
else
clientidset put clientid  context
connections add context getconnection
public void removeconnection connectioncontext context  connectioninfo info  throwable error  throws exception
string clientid   info getclientid
if  clientid    null
throw new invalidclientidexception
synchronized  clientidset
connectioncontext oldvalue   clientidset get clientid
// we may be removing the duplicate connection, not the first
// connection to be created
// so lets check that their connection ids are the same
if  oldvalue    context
if  isequal oldvalue getconnectionid    info getconnectionid
clientidset remove clientid
connections remove context getconnection
protected boolean isequal connectionid connectionid  connectionid connectionid2
return connectionid    connectionid2     connectionid    null    connectionid equals connectionid2
public connection getclients   throws exception
arraylist<connection> l   new arraylist<connection> connections
connection rc   new connection
l toarray rc
return rc
public destination adddestination connectioncontext context  activemqdestination destination  throws exception
destination answer
answer   destinations get destination
if  answer    null
return answer
switch  destination getdestinationtype
case activemqdestination queue_type
answer   queueregion adddestination context  destination
break
case activemqdestination topic_type
answer   topicregion adddestination context  destination
break
case activemqdestination temp_queue_type
answer   tempqueueregion adddestination context  destination
break
case activemqdestination temp_topic_type
answer   temptopicregion adddestination context  destination
break
default
throw createunknowndestinationtypeexception destination
destinations put destination  answer
return answer
public void removedestination connectioncontext context  activemqdestination destination  long timeout  throws exception
if  destinations remove destination     null
switch  destination getdestinationtype
case activemqdestination queue_type
queueregion removedestination context  destination  timeout
break
case activemqdestination topic_type
topicregion removedestination context  destination  timeout
break
case activemqdestination temp_queue_type
tempqueueregion removedestination context  destination  timeout
break
case activemqdestination temp_topic_type
temptopicregion removedestination context  destination  timeout
break
default
throw createunknowndestinationtypeexception destination
public void adddestinationinfo connectioncontext context  destinationinfo info  throws exception
adddestination context  info getdestination
public void removedestinationinfo connectioncontext context  destinationinfo info  throws exception
removedestination context  info getdestination    info gettimeout
public activemqdestination getdestinations   throws exception
arraylist<activemqdestination> l
l   new arraylist<activemqdestination> getdestinationmap   keyset
activemqdestination rc   new activemqdestination
l toarray rc
return rc
public void addsession connectioncontext context  sessioninfo info  throws exception
public void removesession connectioncontext context  sessioninfo info  throws exception
public void addproducer connectioncontext context  producerinfo info
throws exception
activemqdestination destination   info getdestination
if  destination    null
// this seems to cause the destination to be added but without advisories firing...
context getbroker   adddestination context  destination
switch  destination getdestinationtype
case activemqdestination queue_type
queueregion addproducer context  info
break
case activemqdestination topic_type
topicregion addproducer context  info
break
case activemqdestination temp_queue_type
tempqueueregion addproducer context  info
break
case activemqdestination temp_topic_type
temptopicregion addproducer context  info
break
public void removeproducer connectioncontext context  producerinfo info  throws exception
activemqdestination destination   info getdestination
if  destination    null
switch  destination getdestinationtype
case activemqdestination queue_type
queueregion removeproducer context  info
break
case activemqdestination topic_type
topicregion removeproducer context  info
break
case activemqdestination temp_queue_type
tempqueueregion removeproducer context  info
break
case activemqdestination temp_topic_type
temptopicregion removeproducer context  info
break
public subscription addconsumer connectioncontext context  consumerinfo info  throws exception
activemqdestination destination   info getdestination
switch  destination getdestinationtype
case activemqdestination queue_type
return queueregion addconsumer context  info
case activemqdestination topic_type
return topicregion addconsumer context  info
case activemqdestination temp_queue_type
return tempqueueregion addconsumer context  info
case activemqdestination temp_topic_type
return temptopicregion addconsumer context  info
default
throw createunknowndestinationtypeexception destination
public void removeconsumer connectioncontext context  consumerinfo info  throws exception
activemqdestination destination   info getdestination
switch  destination getdestinationtype
case activemqdestination queue_type
queueregion removeconsumer context  info
break
case activemqdestination topic_type
topicregion removeconsumer context  info
break
case activemqdestination temp_queue_type
tempqueueregion removeconsumer context  info
break
case activemqdestination temp_topic_type
temptopicregion removeconsumer context  info
break
default
throw createunknowndestinationtypeexception destination
public void removesubscription connectioncontext context  removesubscriptioninfo info  throws exception
topicregion removesubscription context  info
public void send producerbrokerexchange producerexchange  message message  throws exception
message setbrokerintime system currenttimemillis
if  producerexchange ismutable      producerexchange getregion      null
activemqdestination destination   message getdestination
// ensure the destination is registered with the regionbroker
producerexchange getconnectioncontext   getbroker   adddestination producerexchange getconnectioncontext    destination
region region   null
switch  destination getdestinationtype
case activemqdestination queue_type
region   queueregion
break
case activemqdestination topic_type
region   topicregion
break
case activemqdestination temp_queue_type
region   tempqueueregion
break
case activemqdestination temp_topic_type
region   temptopicregion
break
default
throw createunknowndestinationtypeexception destination
producerexchange setregion region
producerexchange getregion   send producerexchange  message
public void acknowledge consumerbrokerexchange consumerexchange  messageack ack  throws exception
if  consumerexchange iswildcard      consumerexchange getregion      null
activemqdestination destination   ack getdestination
region region   null
switch  destination getdestinationtype
case activemqdestination queue_type
region   queueregion
break
case activemqdestination topic_type
region   topicregion
break
case activemqdestination temp_queue_type
region   tempqueueregion
break
case activemqdestination temp_topic_type
region   temptopicregion
break
default
throw createunknowndestinationtypeexception destination
consumerexchange setregion region
consumerexchange getregion   acknowledge consumerexchange  ack
public response messagepull connectioncontext context  messagepull pull  throws exception
activemqdestination destination   pull getdestination
switch  destination getdestinationtype
case activemqdestination queue_type
return queueregion messagepull context  pull
case activemqdestination topic_type
return topicregion messagepull context  pull
case activemqdestination temp_queue_type
return tempqueueregion messagepull context  pull
case activemqdestination temp_topic_type
return temptopicregion messagepull context  pull
default
throw createunknowndestinationtypeexception destination
public transactionid getpreparedtransactions connectioncontext context  throws exception
throw new illegalaccessexception
public void begintransaction connectioncontext context  transactionid xid  throws exception
throw new illegalaccessexception
public int preparetransaction connectioncontext context  transactionid xid  throws exception
throw new illegalaccessexception
public void rollbacktransaction connectioncontext context  transactionid xid  throws exception
throw new illegalaccessexception
public void committransaction connectioncontext context  transactionid xid  boolean onephase  throws exception
throw new illegalaccessexception
public void forgettransaction connectioncontext context  transactionid transactionid  throws exception
throw new illegalaccessexception
public void gc
queueregion gc
topicregion gc
public brokerid getbrokerid
if  brokerid    null
// todo: this should persist the broker id so that subsequent
// startup
// uses the same broker id.
brokerid   new brokerid broker_id_generator generateid
return brokerid
public void setbrokerid brokerid brokerid
this brokerid   brokerid
public string getbrokername
if  brokername    null
try
brokername   java net inetaddress getlocalhost   gethostname   tolowercase
catch  exception e
brokername
return brokername
public void setbrokername string brokername
this brokername   brokername
public destinationstatistics getdestinationstatistics
return destinationstatistics
protected jmsexception createunknowndestinationtypeexception activemqdestination destination
return new jmsexception     destination getdestinationtype
public synchronized void addbroker connection connection  brokerinfo info
brokerinfos add info
public synchronized void removebroker connection connection  brokerinfo info
if  info    null
brokerinfos remove info
public synchronized brokerinfo getpeerbrokerinfos
brokerinfo result   new brokerinfo
result   brokerinfos toarray result
return result
public void preprocessdispatch messagedispatch messagedispatch
message message   messagedispatch getmessage
if  message    null
long endtime   system currenttimemillis
message setbrokerouttime endtime
if  getbrokerservice   isenablestatistics
long totaltime   endtime   message getbrokerintime
message getregiondestination   getdestinationstatistics   getprocesstime   addtime totaltime
public void postprocessdispatch messagedispatch messagedispatch
public void processdispatchnotification messagedispatchnotification messagedispatchnotification  throws exception
activemqdestination destination   messagedispatchnotification getdestination
switch  destination getdestinationtype
case activemqdestination queue_type
queueregion processdispatchnotification messagedispatchnotification
break
case activemqdestination topic_type
topicregion processdispatchnotification messagedispatchnotification
break
case activemqdestination temp_queue_type
tempqueueregion processdispatchnotification messagedispatchnotification
break
case activemqdestination temp_topic_type
temptopicregion processdispatchnotification messagedispatchnotification
break
default
throw createunknowndestinationtypeexception destination
public boolean isslavebroker
return brokerservice isslave
public boolean isstopped
return  started
public set<activemqdestination> getdurabledestinations
return destinationfactory getdestinations
public boolean isfaulttolerantconfiguration
return false
protected void dostop servicestopper ss
ss stop queueregion
ss stop topicregion
ss stop tempqueueregion
ss stop temptopicregion
public boolean iskeepdurablesubsactive
return keepdurablesubsactive
public void setkeepdurablesubsactive boolean keepdurablesubsactive
this keepdurablesubsactive   keepdurablesubsactive
public destinationinterceptor getdestinationinterceptor
return destinationinterceptor
public connectioncontext getadminconnectioncontext
return adminconnectioncontext
public void setadminconnectioncontext connectioncontext adminconnectioncontext
this adminconnectioncontext   adminconnectioncontext
public map<connectionid  connectionstate> getconnectionstates
return connectionstates
public store gettempdatastore
return brokerservice gettempdatastore
public uri getvmconnectoruri
return brokerservice getvmconnectoruri
public void brokerservicestarted
public brokerservice getbrokerservice
return brokerservice
public boolean isexpired messagereference messagereference
return messagereference isexpired
public void messageexpired connectioncontext context  messagereference node
if  log isdebugenabled
log debug     node
getroot   sendtodeadletterqueue context  node
public void sendtodeadletterqueue connectioncontext context
messagereference node
try
if node  null
message message node getmessage
if message  null  node getregiondestination    null
deadletterstrategy deadletterstrategy node
getregiondestination   getdeadletterstrategy
if deadletterstrategy  null
if deadletterstrategy issendtodeadletterqueue message
long expiration message getexpiration
message setexpiration 0
message setproperty   new long
expiration
if  message ispersistent
message setpersistent true
message setproperty
// the original destination and transaction id do
// not get filled when the message is first
// sent,
// it is only populated if the message is routed to
// another destination like the dlq
activemqdestination deadletterdestination deadletterstrategy
getdeadletterqueuefor message
getdestination
if  context getbroker    null
context setbroker getroot
brokersupport resend context message
deadletterdestination
catch exception e
log warn   node e
public broker getroot
try
return getbrokerservice   getbroker
catch  exception e
log fatal     e
throw new runtimeexception
/**
* @return the broker sequence id
*/
public long getbrokersequenceid
synchronized sequencegenerator
return sequencegenerator getnextsequenceid