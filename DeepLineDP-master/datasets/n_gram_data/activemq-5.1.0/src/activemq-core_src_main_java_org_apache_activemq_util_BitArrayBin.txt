/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq util
import java util linkedlist
/**
* holder for many bitarrays - used for message audit
*
* @version $revision: 1.1.1.1 $
*/
public class bitarraybin
private linkedlist<bitarray> list
private int maxnumberofarrays
private int firstindex    1
private int firstbin    1
private long lastinorderbit  1
/**
* create a bitarraybin to a certain window size (number of messages to
* keep)
*
* @param windowsize
*/
public bitarraybin int windowsize
maxnumberofarrays     windowsize   1    bitarray long_size    1
maxnumberofarrays   math max maxnumberofarrays  1
list   new linkedlist<bitarray>
for  int i   0  i < maxnumberofarrays  i
list add null
/**
* set a bit
*
* @param index
* @param value
* @return true if set
*/
public boolean setbit long index  boolean value
boolean answer   true
bitarray ba   getbitarray index
if  ba    null
int offset   getoffset index
if  offset >  0
answer   ba set offset  value
if  value
else
return answer
/**
* test if in order
* @param index
* @return true if next message is in order
*/
public boolean isinorder long index
boolean result   false
if  lastinorderbit     1
result   true
else
result   lastinorderbit   1    index
lastinorderbit   index
return result
/**
* get the boolean value at the index
*
* @param index
* @return true/false
*/
public boolean getbit long index
boolean answer   index >  firstindex
bitarray ba   getbitarray index
if  ba    null
int offset   getoffset index
if  offset >  0
answer   ba get offset
return answer
else
// gone passed range for previous bins so assume set
answer   true
return answer
/**
* get the bitarray for the index
*
* @param index
* @return bitarray
*/
private bitarray getbitarray long index
int bin   getbin index
bitarray answer   null
if  bin >  0
if  firstindex < 0
firstindex   0
if  bin >  list size
list removefirst
firstindex    bitarray long_size
list add new bitarray
bin   list size     1
answer   list get bin
if  answer    null
answer   new bitarray
list set bin  answer
return answer
/**
* get the index of the bin from the total index
*
* @param index
* @return the index of the bin
*/
private int getbin long index
int answer   0
if  firstbin < 0
firstbin   0
else if  firstindex >  0
answer    int   index   firstindex    bitarray long_size
return answer
/**
* get the offset into a bin from the total index
*
* @param index
* @return the relative offset into a bin
*/
private int getoffset long index
int answer   0
if  firstindex >  0
answer    int   index   firstindex     bitarray long_size   getbin index
return answer