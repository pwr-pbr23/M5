/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq store jdbc
import java io file
import java io ioexception
import java sql sqlexception
import java util collections
import java util set
import java util concurrent scheduledfuture
import java util concurrent scheduledthreadpoolexecutor
import java util concurrent threadfactory
import java util concurrent timeunit
import javax sql datasource
import org apache activemq broker brokerservice
import org apache activemq broker brokerserviceaware
import org apache activemq broker connectioncontext
import org apache activemq command activemqdestination
import org apache activemq command activemqqueue
import org apache activemq command activemqtopic
import org apache activemq openwire openwireformat
import org apache activemq store messagestore
import org apache activemq store persistenceadapter
import org apache activemq store topicmessagestore
import org apache activemq store transactionstore
import org apache activemq store jdbc adapter defaultjdbcadapter
import org apache activemq store memory memorytransactionstore
import org apache activemq usage systemusage
import org apache activemq util factoryfinder
import org apache activemq util ioexceptionsupport
import org apache activemq wireformat wireformat
import org apache commons logging log
import org apache commons logging logfactory
/**
* a {@link persistenceadapter} implementation using jdbc for persistence
* storage.
*
* this persistence adapter will correctly remember prepared xa transactions,
* but it will not keep track of local transaction commits so that operations
* performed against the message store are done as a single uow.
*
* @org.apache.xbean.xbean element="jdbcpersistenceadapter"
*
* @version $revision: 1.9 $
*/
public class jdbcpersistenceadapter extends datasourcesupport implements persistenceadapter
brokerserviceaware
private static final log log   logfactory getlog jdbcpersistenceadapter class
private static factoryfinder factoryfinder   new factoryfinder
private wireformat wireformat   new openwireformat
private brokerservice brokerservice
private statements statements
private jdbcadapter adapter
private memorytransactionstore transactionstore
private scheduledthreadpoolexecutor clockdaemon
private scheduledfuture clockticket
private int cleanupperiod   1000   60   5
private boolean useexternalmessagereferences
private boolean usedatabaselock   true
private long lockkeepaliveperiod   1000 30
private databaselocker databaselocker
private boolean createtablesonstartup   true
public jdbcpersistenceadapter
public jdbcpersistenceadapter datasource ds  wireformat wireformat
super ds
this wireformat   wireformat
public set<activemqdestination> getdestinations
// get a connection and insert the message into the db.
transactioncontext c   null
try
c   gettransactioncontext
return getadapter   dogetdestinations c
catch  ioexception e
return emptydestinationset
catch  sqlexception e
jdbcpersistenceadapter log    e
return emptydestinationset
finally
if  c    null
try
c close
catch  throwable e
@suppresswarnings
private set<activemqdestination> emptydestinationset
return collections empty_set
public messagestore createqueuemessagestore activemqqueue destination  throws ioexception
messagestore rc   new jdbcmessagestore this  getadapter    wireformat  destination
if  transactionstore    null
rc   transactionstore proxy rc
return rc
public topicmessagestore createtopicmessagestore activemqtopic destination  throws ioexception
topicmessagestore rc   new jdbctopicmessagestore this  getadapter    wireformat  destination
if  transactionstore    null
rc   transactionstore proxy rc
return rc
public transactionstore createtransactionstore   throws ioexception
if  transactionstore    null
transactionstore   new memorytransactionstore
return this transactionstore
public long getlastmessagebrokersequenceid   throws ioexception
// get a connection and insert the message into the db.
transactioncontext c   gettransactioncontext
try
return getadapter   dogetlastmessagebrokersequenceid c
catch  sqlexception e
jdbcpersistenceadapter log    e
throw ioexceptionsupport create     e  e
finally
c close
public void start   throws exception
getadapter   setuseexternalmessagereferences isuseexternalmessagereferences
if  iscreatetablesonstartup
transactioncontext transactioncontext   gettransactioncontext
transactioncontext begin
try
try
getadapter   docreatetables transactioncontext
catch  sqlexception e
log warn     e
jdbcpersistenceadapter log    e
finally
transactioncontext commit
if  isusedatabaselock
databaselocker service   getdatabaselocker
if  service    null
log warn
else
service start
cleanup
// cleanup the db periodically.
if  cleanupperiod > 0
clockticket   getscheduledthreadpoolexecutor   scheduleatfixedrate new runnable
public void run
cleanup
cleanupperiod  cleanupperiod  timeunit milliseconds
public synchronized void stop   throws exception
if  clockticket    null
clockticket cancel true
clockticket   null
if  clockdaemon    null
clockdaemon shutdown
clockdaemon   null
databaselocker service   getdatabaselocker
if  service    null
service stop
public void cleanup
transactioncontext c   null
try
log debug
c   gettransactioncontext
getadapter   dodeleteoldmessages c
catch  ioexception e
log warn     e  e
catch  sqlexception e
log warn     e
jdbcpersistenceadapter log    e
finally
if  c    null
try
c close
catch  throwable e
log debug
public void setscheduledthreadpoolexecutor scheduledthreadpoolexecutor clockdaemon
this clockdaemon   clockdaemon
public scheduledthreadpoolexecutor getscheduledthreadpoolexecutor
if  clockdaemon    null
clockdaemon   new scheduledthreadpoolexecutor 5  new threadfactory
public thread newthread runnable runnable
thread thread   new thread runnable
thread setdaemon true
return thread
return clockdaemon
public jdbcadapter getadapter   throws ioexception
if  adapter    null
setadapter createadapter
return adapter
public databaselocker getdatabaselocker   throws ioexception
if  databaselocker    null
databaselocker   createdatabaselocker
if  lockkeepaliveperiod > 0
getscheduledthreadpoolexecutor   scheduleatfixedrate new runnable
public void run
databaselockkeepalive
lockkeepaliveperiod  lockkeepaliveperiod  timeunit milliseconds
return databaselocker
/**
* sets the database locker strategy to use to lock the database on startup
*/
public void setdatabaselocker databaselocker databaselocker
this databaselocker   databaselocker
public brokerservice getbrokerservice
return brokerservice
public void setbrokerservice brokerservice brokerservice
this brokerservice   brokerservice
/**
* @throws ioexception
*/
protected jdbcadapter createadapter   throws ioexception
jdbcadapter adapter   null
transactioncontext c   gettransactioncontext
try
try
// make the filename file system safe.
string dirvername   c getconnection   getmetadata   getdrivername
dirvername   dirvername replaceall       tolowercase
try
adapter    defaultjdbcadapter factoryfinder newinstance dirvername
log info     dirvername
catch  throwable e
log warn     dirvername
catch  sqlexception e
log
warn
e getmessage
jdbcpersistenceadapter log    e
// use the default jdbc adapter if the
// database type is not recognized.
if  adapter    null
adapter   new defaultjdbcadapter
finally
c close
return adapter
public void setadapter jdbcadapter adapter
this adapter   adapter
this adapter setstatements getstatements
public wireformat getwireformat
return wireformat
public void setwireformat wireformat wireformat
this wireformat   wireformat
public transactioncontext gettransactioncontext connectioncontext context  throws ioexception
if  context    null
return gettransactioncontext
else
transactioncontext answer    transactioncontext context getlongtermstorecontext
if  answer    null
answer   new transactioncontext getdatasource
context setlongtermstorecontext answer
return answer
public transactioncontext gettransactioncontext   throws ioexception
return new transactioncontext getdatasource
public void begintransaction connectioncontext context  throws ioexception
transactioncontext transactioncontext   gettransactioncontext context
transactioncontext begin
public void committransaction connectioncontext context  throws ioexception
transactioncontext transactioncontext   gettransactioncontext context
transactioncontext commit
public void rollbacktransaction connectioncontext context  throws ioexception
transactioncontext transactioncontext   gettransactioncontext context
transactioncontext rollback
public int getcleanupperiod
return cleanupperiod
/**
* sets the number of milliseconds until the database is attempted to be
* cleaned up for durable topics
*/
public void setcleanupperiod int cleanupperiod
this cleanupperiod   cleanupperiod
public void deleteallmessages   throws ioexception
transactioncontext c   gettransactioncontext
try
getadapter   dodroptables c
getadapter   setuseexternalmessagereferences isuseexternalmessagereferences
getadapter   docreatetables c
catch  sqlexception e
jdbcpersistenceadapter log    e
throw ioexceptionsupport create e
finally
c close
public boolean isuseexternalmessagereferences
return useexternalmessagereferences
public void setuseexternalmessagereferences boolean useexternalmessagereferences
this useexternalmessagereferences   useexternalmessagereferences
public boolean iscreatetablesonstartup
return createtablesonstartup
/**
* sets whether or not tables are created on startup
*/
public void setcreatetablesonstartup boolean createtablesonstartup
this createtablesonstartup   createtablesonstartup
public boolean isusedatabaselock
return usedatabaselock
/**
* sets whether or not an exclusive database lock should be used to enable
* jdbc master/slave. enabled by default.
*/
public void setusedatabaselock boolean usedatabaselock
this usedatabaselock   usedatabaselock
public static void log string msg  sqlexception e
string s   msg   e getmessage
while  e getnextexception      null
e   e getnextexception
s        e getmessage
log debug s  e
public statements getstatements
if  statements    null
statements   new statements
return statements
public void setstatements statements statements
this statements   statements
/**
* @param usagemanager the usagemanager that is controlling the
*                destination's memory usage.
*/
public void setusagemanager systemusage usagemanager
protected void databaselockkeepalive
boolean stop   false
try
databaselocker locker   getdatabaselocker
if  locker    null
if   locker keepalive
stop   true
catch  ioexception e
log error     e  e
if  stop
stopbroker
protected void stopbroker
// we can no longer keep the lock so lets fail
log info
try
brokerservice stop
catch  exception e
log warn
protected databaselocker createdatabaselocker   throws ioexception
return new defaultdatabaselocker getdatasource    getstatements
public void setbrokername string brokername
public string tostring
return     super tostring
public void setdirectory file dir
public void checkpoint boolean sync  throws ioexception
public long size
return 0
public long getlockkeepaliveperiod
return lockkeepaliveperiod
public void setlockkeepaliveperiod long lockkeepaliveperiod
this lockkeepaliveperiod   lockkeepaliveperiod