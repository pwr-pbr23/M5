/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq
import java util iterator
import java util list
import javax jms jmsexception
import org apache activemq command consumerid
import org apache activemq command messagedispatch
import org apache activemq thread task
import org apache activemq thread taskrunner
import org apache activemq util jmsexceptionsupport
import org apache commons logging log
import org apache commons logging logfactory
/**
* a utility class used by the session for dispatching messages asynchronously
* to consumers
*
* @version $revision$
* @see javax.jms.session
*/
public class activemqsessionexecutor implements task
private static final log log   logfactory getlog activemqsessionexecutor class
private activemqsession session
private messagedispatchchannel messagequeue   new messagedispatchchannel
private boolean dispatchedbysessionpool
private taskrunner taskrunner
private boolean startedorwarnedthatnotstarted
activemqsessionexecutor activemqsession session
this session   session
void setdispatchedbysessionpool boolean value
dispatchedbysessionpool   value
wakeup
void execute messagedispatch message  throws interruptedexception
if   startedorwarnedthatnotstarted
activemqconnection connection   session connection
long aboutunstartedconnectiontimeout   connection getwarnaboutunstartedconnectiontimeout
if  connection isstarted      aboutunstartedconnectiontimeout < 0l
startedorwarnedthatnotstarted   true
else
long elapsedtime   system currenttimemillis     connection gettimecreated
// lets only warn when a significant amount of time has passed
// just in case its normal operation
if  elapsedtime > aboutunstartedconnectiontimeout
log warn     connection
message
startedorwarnedthatnotstarted   true
if   session issessionasyncdispatch       dispatchedbysessionpool
dispatch message
else
messagequeue enqueue message
wakeup
public void wakeup
if   dispatchedbysessionpool
if  session issessionasyncdispatch
try
if  taskrunner    null
taskrunner   session connection getsessiontaskrunner   createtaskrunner this      session getsessionid
taskrunner wakeup
catch  interruptedexception e
thread currentthread   interrupt
else
while  iterate
void executefirst messagedispatch message
messagequeue enqueuefirst message
wakeup
public boolean hasuncomsumedmessages
return  messagequeue isclosed      messagequeue isrunning       messagequeue isempty
void dispatch messagedispatch message
// todo - we should use a map for this indexed by consumerid
for  iterator i   this session consumers iterator    i hasnext
activemqmessageconsumer consumer    activemqmessageconsumer i next
consumerid consumerid   message getconsumerid
if  consumerid equals consumer getconsumerid
consumer dispatch message
break
synchronized void start
if   messagequeue isrunning
messagequeue start
if  hasuncomsumedmessages
wakeup
void stop   throws jmsexception
try
if  messagequeue isrunning
messagequeue stop
if  taskrunner    null
taskrunner shutdown
taskrunner   null
catch  interruptedexception e
thread currentthread   interrupt
throw jmsexceptionsupport create e
boolean isrunning
return messagequeue isrunning
void close
messagequeue close
void clear
messagequeue clear
messagedispatch dequeuenowait
return  messagedispatch messagequeue dequeuenowait
protected void clearmessagesinprogress
messagequeue clear
public boolean isempty
return messagequeue isempty
public boolean iterate
// deliver any messages queued on the consumer to their listeners.
for  iterator i   this session consumers iterator    i hasnext
activemqmessageconsumer consumer    activemqmessageconsumer i next
if  consumer iterate
return true
// no messages left queued on the listeners.. so now dispatch messages
// queued on the session
messagedispatch message   messagequeue dequeuenowait
if  message    null
return false
else
dispatch message
return  messagequeue isempty
list getunconsumedmessages
return messagequeue removeall