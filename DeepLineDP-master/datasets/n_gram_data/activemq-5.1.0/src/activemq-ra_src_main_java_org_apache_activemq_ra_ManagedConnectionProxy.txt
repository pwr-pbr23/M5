/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq ra
import java util arraylist
import java util iterator
import javax jms connection
import javax jms connectionconsumer
import javax jms connectionmetadata
import javax jms destination
import javax jms exceptionlistener
import javax jms illegalstateexception
import javax jms jmsexception
import javax jms queue
import javax jms queueconnection
import javax jms queuesession
import javax jms serversessionpool
import javax jms session
import javax jms topic
import javax jms topicconnection
import javax jms topicsession
import org apache activemq activemqqueuesession
import org apache activemq activemqsession
import org apache activemq activemqtopicsession
/**
* acts as a pass through proxy for a jms connection object. it intercepts
* events that are of interest of the activemqmanagedconnection.
*
* @version $revision$
*/
public class managedconnectionproxy implements connection  queueconnection  topicconnection  exceptionlistener
private activemqmanagedconnection managedconnection
private arraylist<managedsessionproxy> sessions   new arraylist<managedsessionproxy>
private exceptionlistener exceptionlistener
public managedconnectionproxy activemqmanagedconnection managedconnection
this managedconnection   managedconnection
/**
* used to let the activemqmanagedconnection that this connection handel is
* not needed by the app.
*
* @throws jmsexception
*/
public void close   throws jmsexception
if  managedconnection    null
managedconnection proxyclosedevent this
/**
* called by the activemqmanagedconnection to invalidate this proxy.
*/
public void cleanup
exceptionlistener   null
managedconnection   null
for  iterator<managedsessionproxy> iter   sessions iterator    iter hasnext
managedsessionproxy p   iter next
try
p cleanup
catch  jmsexception ignore
iter remove
/**
*
*/
private connection getconnection   throws jmsexception
if  managedconnection    null
throw new illegalstateexception
return managedconnection getphysicalconnection
/**
* @param transacted
* @param acknowledgemode
* @return
* @throws jmsexception
*/
public session createsession boolean transacted  int acknowledgemode  throws jmsexception
return createsessionproxy transacted  acknowledgemode
/**
* @param acknowledgemode
* @param transacted
* @return
* @throws jmsexception
*/
private managedsessionproxy createsessionproxy boolean transacted  int acknowledgemode  throws jmsexception
activemqsession session    activemqsession getconnection   createsession transacted  acknowledgemode
managedtransactioncontext txcontext   new managedtransactioncontext managedconnection gettransactioncontext
session settransactioncontext txcontext
managedsessionproxy p   new managedsessionproxy session
p setusesharedtxcontext managedconnection isinmanagedtx
sessions add p
return p
public void setusesharedtxcontext boolean enable  throws jmsexception
for  iterator<managedsessionproxy> iter   sessions iterator    iter hasnext
managedsessionproxy p   iter next
p setusesharedtxcontext enable
/**
* @param transacted
* @param acknowledgemode
* @return
* @throws jmsexception
*/
public queuesession createqueuesession boolean transacted  int acknowledgemode  throws jmsexception
return new activemqqueuesession createsessionproxy transacted  acknowledgemode
/**
* @param transacted
* @param acknowledgemode
* @return
* @throws jmsexception
*/
public topicsession createtopicsession boolean transacted  int acknowledgemode  throws jmsexception
return new activemqtopicsession createsessionproxy transacted  acknowledgemode
/**
* @return
* @throws jmsexception
*/
public string getclientid   throws jmsexception
return getconnection   getclientid
/**
* @return
* @throws jmsexception
*/
public exceptionlistener getexceptionlistener   throws jmsexception
return getconnection   getexceptionlistener
/**
* @return
* @throws jmsexception
*/
public connectionmetadata getmetadata   throws jmsexception
return getconnection   getmetadata
/**
* @param clientid
* @throws jmsexception
*/
public void setclientid string clientid  throws jmsexception
getconnection   setclientid clientid
/**
* @param listener
* @throws jmsexception
*/
public void setexceptionlistener exceptionlistener listener  throws jmsexception
getconnection
exceptionlistener   listener
/**
* @throws jmsexception
*/
public void start   throws jmsexception
getconnection   start
/**
* @throws jmsexception
*/
public void stop   throws jmsexception
getconnection   stop
/**
* @param queue
* @param messageselector
* @param sessionpool
* @param maxmessages
* @return
* @throws jmsexception
*/
public connectionconsumer createconnectionconsumer queue queue  string messageselector  serversessionpool sessionpool  int maxmessages  throws jmsexception
throw new jmsexception
/**
* @param topic
* @param messageselector
* @param sessionpool
* @param maxmessages
* @return
* @throws jmsexception
*/
public connectionconsumer createconnectionconsumer topic topic  string messageselector  serversessionpool sessionpool  int maxmessages  throws jmsexception
throw new jmsexception
/**
* @param destination
* @param messageselector
* @param sessionpool
* @param maxmessages
* @return
* @throws jmsexception
*/
public connectionconsumer createconnectionconsumer destination destination  string messageselector  serversessionpool sessionpool  int maxmessages  throws jmsexception
throw new jmsexception
/**
* @param topic
* @param subscriptionname
* @param messageselector
* @param sessionpool
* @param maxmessages
* @return
* @throws jmsexception
*/
public connectionconsumer createdurableconnectionconsumer topic topic  string subscriptionname  string messageselector  serversessionpool sessionpool  int maxmessages  throws jmsexception
throw new jmsexception
/**
* @return returns the managedconnection.
*/
public activemqmanagedconnection getmanagedconnection
return managedconnection
public void onexception jmsexception e
if  exceptionlistener    null    managedconnection    null
try
exceptionlistener onexception e
catch  throwable ignore
// we can never trust user code so ignore any exceptions.