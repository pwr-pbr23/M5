/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq broker ft
import java util concurrent atomic atomicboolean
import org apache activemq broker connection
import org apache activemq broker connectioncontext
import org apache activemq broker consumerbrokerexchange
import org apache activemq broker insertablemutablebrokerfilter
import org apache activemq broker mutablebrokerfilter
import org apache activemq broker producerbrokerexchange
import org apache activemq broker region subscription
import org apache activemq command command
import org apache activemq command connectioncontrol
import org apache activemq command connectioninfo
import org apache activemq command consumerinfo
import org apache activemq command exceptionresponse
import org apache activemq command message
import org apache activemq command messageack
import org apache activemq command messagedispatch
import org apache activemq command messagedispatchnotification
import org apache activemq command producerinfo
import org apache activemq command removeinfo
import org apache activemq command removesubscriptioninfo
import org apache activemq command response
import org apache activemq command sessioninfo
import org apache activemq command transactionid
import org apache activemq command transactioninfo
import org apache activemq transport mutextransport
import org apache activemq transport responsecorrelator
import org apache activemq transport transport
import org apache commons logging log
import org apache commons logging logfactory
/**
* the message broker which passes messages to a slave
*
* @version $revision: 1.8 $
*/
public class masterbroker extends insertablemutablebrokerfilter
private static final log log   logfactory getlog masterbroker class
private transport slave
private atomicboolean started   new atomicboolean false
/**
* constructor
*
* @param parent
* @param transport
*/
public masterbroker mutablebrokerfilter parent  transport transport
super parent
this slave   transport
this slave   new mutextransport slave
this slave   new responsecorrelator slave
this slave settransportlistener transport gettransportlistener
/**
* start processing this broker
*/
public void startprocessing
started set true
try
connection connections   getclients
connectioncontrol command   new connectioncontrol
command setfaulttolerant true
if  connections    null
for  int i   0  i < connections length  i
if  connections isactive      connections ismanageable
connections dispatchasync command
catch  exception e
log error    e
/**
* stop the broker
*
* @throws exception
*/
public void stop   throws exception
super stop
stopprocessing
/**
* stop processing this broker
*/
public void stopprocessing
if  started compareandset true  false
remove
/**
* a client is establishing a connection with the broker.
*
* @param context
* @param info
* @throws exception
*/
public void addconnection connectioncontext context  connectioninfo info  throws exception
super addconnection context  info
sendasynctoslave info
/**
* a client is disconnecting from the broker.
*
* @param context the environment the operation is being executed under.
* @param info
* @param error null if the client requested the disconnect or the error
*                that caused the client to disconnect.
* @throws exception
*/
public void removeconnection connectioncontext context  connectioninfo info  throwable error  throws exception
super removeconnection context  info  error
sendasynctoslave new removeinfo info getconnectionid
/**
* adds a session.
*
* @param context
* @param info
* @throws exception
*/
public void addsession connectioncontext context  sessioninfo info  throws exception
super addsession context  info
sendasynctoslave info
/**
* removes a session.
*
* @param context
* @param info
* @throws exception
*/
public void removesession connectioncontext context  sessioninfo info  throws exception
super removesession context  info
sendasynctoslave new removeinfo info getsessionid
/**
* adds a producer.
*
* @param context the enviorment the operation is being executed under.
* @param info
* @throws exception
*/
public void addproducer connectioncontext context  producerinfo info  throws exception
super addproducer context  info
sendasynctoslave info
/**
* removes a producer.
*
* @param context the enviorment the operation is being executed under.
* @param info
* @throws exception
*/
public void removeproducer connectioncontext context  producerinfo info  throws exception
super removeproducer context  info
sendasynctoslave new removeinfo info getproducerid
/**
* add a consumer
*
* @param context
* @param info
* @return the assocated subscription
* @throws exception
*/
public subscription addconsumer connectioncontext context  consumerinfo info  throws exception
sendasynctoslave info
subscription answer   super addconsumer context  info
return answer
/**
* remove a subscription
*
* @param context
* @param info
* @throws exception
*/
public void removesubscription connectioncontext context  removesubscriptioninfo info  throws exception
super removesubscription context  info
sendasynctoslave info
/**
* begin a transaction
*
* @param context
* @param xid
* @throws exception
*/
public void begintransaction connectioncontext context  transactionid xid  throws exception
transactioninfo info   new transactioninfo context getconnectionid    xid  transactioninfo begin
sendasynctoslave info
super begintransaction context  xid
/**
* prepares a transaction. only valid for xa transactions.
*
* @param context
* @param xid
* @return the state
* @throws exception
*/
public int preparetransaction connectioncontext context  transactionid xid  throws exception
transactioninfo info   new transactioninfo context getconnectionid    xid  transactioninfo prepare
sendasynctoslave info
int result   super preparetransaction context  xid
return result
/**
* rollsback a transaction.
*
* @param context
* @param xid
* @throws exception
*/
public void rollbacktransaction connectioncontext context  transactionid xid  throws exception
transactioninfo info   new transactioninfo context getconnectionid    xid  transactioninfo rollback
sendasynctoslave info
super rollbacktransaction context  xid
/**
* commits a transaction.
*
* @param context
* @param xid
* @param onephase
* @throws exception
*/
public void committransaction connectioncontext context  transactionid xid  boolean onephase  throws exception
transactioninfo info   new transactioninfo context getconnectionid    xid  transactioninfo commit_one_phase
sendsynctoslave info
super committransaction context  xid  onephase
/**
* forgets a transaction.
*
* @param context
* @param xid
* @throws exception
*/
public void forgettransaction connectioncontext context  transactionid xid  throws exception
transactioninfo info   new transactioninfo context getconnectionid    xid  transactioninfo forget
sendasynctoslave info
super forgettransaction context  xid
/**
* notifiy the broker that a dispatch has happened
*
* @param messagedispatch
*/
public void postprocessdispatch messagedispatch messagedispatch
messagedispatchnotification mdn   new messagedispatchnotification
mdn setconsumerid messagedispatch getconsumerid
mdn setdeliverysequenceid messagedispatch getdeliverysequenceid
mdn setdestination messagedispatch getdestination
if  messagedispatch getmessage      null
message msg   messagedispatch getmessage
mdn setmessageid msg getmessageid
sendasynctoslave mdn
super postprocessdispatch messagedispatch
/**
* @param context
* @param message
* @throws exception
*/
public void send producerbrokerexchange producerexchange  message message  throws exception
/**
* a message can be dispatched before the super.send() method returns so -
* here the order is switched to avoid problems on the slave with
* receiving acks for messages not received yey
*/
sendtoslave message
super send producerexchange  message
/**
* @param context
* @param ack
* @throws exception
*/
public void acknowledge consumerbrokerexchange consumerexchange  messageack ack  throws exception
sendtoslave ack
super acknowledge consumerexchange  ack
public boolean isfaulttolerantconfiguration
return true
protected void sendtoslave message message
if  message isresponserequired
sendsynctoslave message
else
sendasynctoslave message
protected void sendtoslave messageack ack
if  ack isresponserequired
sendasynctoslave ack
else
sendsynctoslave ack
protected void sendasynctoslave command command
try
slave oneway command
catch  throwable e
log error    e
stopprocessing
protected void sendsynctoslave command command
try
response response    response slave request command
if  response isexception
exceptionresponse er    exceptionresponse response
log error    er getexception
catch  throwable e
log error    e