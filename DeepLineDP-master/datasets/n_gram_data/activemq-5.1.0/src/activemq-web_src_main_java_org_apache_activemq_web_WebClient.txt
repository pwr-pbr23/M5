/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq web
import java io externalizable
import java io ioexception
import java io objectinput
import java io objectoutput
import java util arraylist
import java util hashmap
import java util iterator
import java util list
import java util map
import java util concurrent semaphore
import javax jms connection
import javax jms connectionfactory
import javax jms deliverymode
import javax jms destination
import javax jms jmsexception
import javax jms message
import javax jms messageconsumer
import javax jms messageproducer
import javax jms session
import javax servlet servletcontext
import javax servlet http httpservletrequest
import javax servlet http httpsession
import javax servlet http httpsessionactivationlistener
import javax servlet http httpsessionbindingevent
import javax servlet http httpsessionbindinglistener
import javax servlet http httpsessionevent
import org apache activemq activemqconnectionfactory
import org apache activemq messageavailableconsumer
import org apache commons logging log
import org apache commons logging logfactory
/**
* represents a messaging client used from inside a web container typically
* stored inside a httpsession todo controls to prevent dos attacks with users
* requesting many consumers todo configure consumers with small prefetch.
*
* @version $revision: 1.1.1.1 $
*/
public class webclient implements httpsessionactivationlistener  httpsessionbindinglistener  externalizable
public static final string web_client_attribute
public static final string connection_factory_attribute
public static final string connection_factory_prefetch_param
public static final string connection_factory_optimize_ack_param
public static final string broker_url_init_param
private static final log log   logfactory getlog webclient class
private static transient connectionfactory factory
private transient map<destination  messageconsumer> consumers   new hashmap<destination  messageconsumer>
private transient connection connection
private transient session session
private transient messageproducer producer
private int deliverymode   deliverymode non_persistent
private final semaphore semaphore   new semaphore 1
public webclient
if  factory    null
throw new illegalstateexception
/**
* helper method to get the client for the current session, lazily creating
* a client if there is none currently
*
* @param request is the current http request
* @return the current client or a newly creates
*/
public static webclient getwebclient httpservletrequest request
httpsession session   request getsession true
webclient client   getwebclient session
if  client    null    client isclosed
client   webclient createwebclient request
session setattribute web_client_attribute  client
return client
/**
* @return the web client for the current http session or null if there is
*         not a web client created yet
*/
public static webclient getwebclient httpsession session
return  webclient session getattribute web_client_attribute
public static void initcontext servletcontext context
initconnectionfactory context
public int getdeliverymode
return deliverymode
public void setdeliverymode int deliverymode
this deliverymode   deliverymode
public synchronized void closeconsumers
for  iterator<messageconsumer> it   consumers values   iterator    it hasnext
messageconsumer consumer   it next
it remove
try
consumer setmessagelistener null
if  consumer instanceof messageavailableconsumer
messageavailableconsumer consumer  setavailablelistener null
consumer close
catch  jmsexception e
log debug    e
public synchronized void close
try
closeconsumers
if  connection    null
connection close
catch  jmsexception e
log debug    e
finally
producer   null
session   null
connection   null
if  consumers    null
consumers clear
consumers   null
public boolean isclosed
return consumers    null
public void writeexternal objectoutput out  throws ioexception
if  consumers    null
out write consumers size
iterator<destination> i   consumers keyset   iterator
while  i hasnext
out writeobject i next   tostring
else
out write  1
public void readexternal objectinput in  throws ioexception  classnotfoundexception
int size   in readint
if  size >  0
consumers   new hashmap<destination  messageconsumer>
for  int i   0  i < size  i
string destinationname   in readobject   tostring
try
destination destination   destinationname startswith    ?  destination getsession   createtopic destinationname     destination getsession   createqueue destinationname
consumers put destination  getconsumer destination  true
catch  jmsexception e
log debug    e
ioexception ex   new ioexception e getmessage
ex initcause e getcause      null ? e getcause     e
throw ex
public void send destination destination  message message  throws jmsexception
getproducer   send destination  message
if  log isdebugenabled
log debug     destination       message
public void send destination destination  message message  boolean persistent  int priority  long timetolive  throws jmsexception
int deliverymode   persistent ? deliverymode persistent   deliverymode non_persistent
getproducer   send destination  message  deliverymode  priority  timetolive
if  log isdebugenabled
log debug     destination       message
public session getsession   throws jmsexception
if  session    null
session   createsession
return session
public connection getconnection   throws jmsexception
if  connection    null
connection   factory createconnection
connection start
return connection
protected static synchronized void initconnectionfactory servletcontext servletcontext
if  factory    null
factory    connectionfactory servletcontext getattribute connection_factory_attribute
if  factory    null
string brokerurl   servletcontext getinitparameter broker_url_init_param
log debug     broker_url_init_param       brokerurl
if  brokerurl    null
throw new illegalstateexception     broker_url_init_param
activemqconnectionfactory amqfactory   new activemqconnectionfactory brokerurl
// set prefetch policy for factory
if  servletcontext getinitparameter connection_factory_prefetch_param     null
int prefetch   integer valueof servletcontext getinitparameter connection_factory_prefetch_param   intvalue
amqfactory getprefetchpolicy   setall prefetch
// set optimize acknowledge setting
if  servletcontext getinitparameter connection_factory_optimize_ack_param     null
boolean optimizeack   boolean valueof servletcontext getinitparameter connection_factory_optimize_ack_param   booleanvalue
amqfactory setoptimizeacknowledge optimizeack
factory   amqfactory
servletcontext setattribute connection_factory_attribute  factory
public synchronized messageproducer getproducer   throws jmsexception
if  producer    null
producer   getsession   createproducer null
producer setdeliverymode deliverymode
return producer
public void setproducer messageproducer producer
this producer   producer
public synchronized messageconsumer getconsumer destination destination  throws jmsexception
return getconsumer destination  true
public synchronized messageconsumer getconsumer destination destination  boolean create  throws jmsexception
messageconsumer consumer   consumers get destination
if  create    consumer    null
consumer   getsession   createconsumer destination
consumers put destination  consumer
return consumer
public synchronized void closeconsumer destination destination  throws jmsexception
messageconsumer consumer   consumers get destination
if  consumer    null
consumers remove destination
consumer setmessagelistener null
if  consumer instanceof messageavailableconsumer
messageavailableconsumer consumer  setavailablelistener null
consumer close
public synchronized list<messageconsumer> getconsumers
return new arraylist<messageconsumer> consumers values
protected session createsession   throws jmsexception
return getconnection   createsession false  session auto_acknowledge
public semaphore getsemaphore
return semaphore
public void sessionwillpassivate httpsessionevent event
close
public void sessiondidactivate httpsessionevent event
public void valuebound httpsessionbindingevent event
public void valueunbound httpsessionbindingevent event
close
protected static webclient createwebclient httpservletrequest request
return new webclient