/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq transport tcp
import java io ioexception
import java net uri
import java net urisyntaxexception
import java net unknownhostexception
import java security keymanagementexception
import java security nosuchalgorithmexception
import java security securerandom
import java util hashmap
import java util map
import javax net serversocketfactory
import javax net socketfactory
import javax net ssl keymanager
import javax net ssl sslcontext
import javax net ssl sslserversocketfactory
import javax net ssl sslsocketfactory
import javax net ssl trustmanager
import org apache activemq openwire openwireformat
import org apache activemq transport inactivitymonitor
import org apache activemq transport transport
import org apache activemq transport transportloggerfactory
import org apache activemq transport transportserver
import org apache activemq transport wireformatnegotiator
import org apache activemq util ioexceptionsupport
import org apache activemq util introspectionsupport
import org apache activemq util urisupport
import org apache activemq wireformat wireformat
import org apache commons logging log
import org apache commons logging logfactory
/**
* an implementation of the tcptransportfactory using ssl. the major
* contribution from this class is that it is aware of ssltransportserver and
* ssltransport classes. all transports and transportservers created from this
* factory will have their needclientauth option set to false.
*
* @author sepandm@gmail.com (sepand)
* @author david martin clavo david(dot)martin(dot)clavo(at)gmail.com (logging improvement modifications)
* @version $revision$
*/
public class ssltransportfactory extends tcptransportfactory
// the log this uses.,
private static final log log   logfactory getlog ssltransportfactory class
// the context used to creat ssl sockets.
private sslcontext sslcontext
/**
* constructor. nothing special.
*/
public ssltransportfactory
/**
* overriding to use ssltransportserver and allow for proper reflection.
*/
public transportserver dobind final uri location  throws ioexception
try
map<string  string> options   new hashmap<string  string> urisupport parseparamters location
serversocketfactory serversocketfactory   createserversocketfactory
ssltransportserver server   new ssltransportserver this  location   sslserversocketfactory serversocketfactory
server setwireformatfactory createwireformatfactory options
introspectionsupport setproperties server  options
map<string  object> transportoptions   introspectionsupport extractproperties options
server settransportoption transportoptions
server bind
return server
catch  urisyntaxexception e
throw ioexceptionsupport create e
/**
* overriding to allow for proper configuration through reflection.
*/
public transport compositeconfigure transport transport  wireformat format  map options
ssltransport ssltransport    ssltransport transport narrow ssltransport class
introspectionsupport setproperties ssltransport  options
map<string  object> socketoptions   introspectionsupport extractproperties options
ssltransport setsocketoptions socketoptions
if  ssltransport istrace
try
transport   transportloggerfactory getinstance   createtransportlogger transport
ssltransport getlogwritername    ssltransport isdynamicmanagement    ssltransport isstartlogging    ssltransport getjmxport
catch  throwable e
log error     ssltransport getlogwritername         e  e
transport   new inactivitymonitor transport
// only need the wireformatnegotiator if using openwire
if  format instanceof openwireformat
transport   new wireformatnegotiator transport   openwireformat format  ssltransport getminmumwireformatversion
return transport
/**
* overriding to use ssltransports.
*/
protected transport createtransport uri location  wireformat wf  throws unknownhostexception  ioexception
uri locallocation   null
string path   location getpath
// see if the path is a local uri location
if  path    null    path length   > 0
int localportindex   path indexof
try
integer parseint path substring localportindex   1  path length
string localstring   location getscheme         path
locallocation   new uri localstring
catch  exception e
log warn    e
socketfactory socketfactory   createsocketfactory
return new ssltransport wf   sslsocketfactory socketfactory  location  locallocation  false
/**
* sets the key and trust managers used in constructed socket factories.
* passes given arguments to sslcontext.init(...).
*
* @param km the sources of authentication keys or null.
* @param tm the sources of peer authentication trust decisions or null.
* @param random the source of randomness for this generator or null.
*/
public void setkeyandtrustmanagers keymanager km  trustmanager tm  securerandom random  throws keymanagementexception
// killing old context and making a new one just to be safe.
try
sslcontext   sslcontext getinstance
catch  nosuchalgorithmexception e
// this should not happen unless this class is improperly modified.
throw new runtimeexception    e
sslcontext init km  tm  random
/**
* creates a new ssl serversocketfactory. the given factory will use
* user-provided key and trust managers (if the user provided them).
*
* @return newly created (ssl)serversocketfactory.
*/
protected serversocketfactory createserversocketfactory
if  sslcontext    null
return sslserversocketfactory getdefault
else
return sslcontext getserversocketfactory
/**
* creates a new ssl socketfactory. the given factory will use user-provided
* key and trust managers (if the user provided them).
*
* @return newly created (ssl)socketfactory.
*/
protected socketfactory createsocketfactory
if  sslcontext    null
return sslsocketfactory getdefault
else
return sslcontext getsocketfactory