/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql parse
import java io serializable
import java util arraylist
import java util hashmap
import java util list
import java util map entry
/**
* internal representation of the join tree.
*
*/
public class qbjointree implements serializable
private static final long serialversionuid   1l
private string leftalias
private string rightaliases
private string leftaliases
private qbjointree joinsrc
private string basesrc
private int nexttag
private joincond joincond
private boolean noouterjoin
private boolean nosemijoin
// keeps track of the right-hand-side table name of the left-semi-join, and
// its list of join keys
private final hashmap<string  arraylist<astnode>> rhssemijoin
// join conditions
private arraylist<arraylist<astnode>> expressions
// key index to nullsafe join flag
private arraylist<boolean> nullsafes
// filters
private arraylist<arraylist<astnode>> filters
// filters for pushing
private arraylist<arraylist<astnode>> filtersforpushing
// user asked for map-side join
private boolean mapsidejoin
private list<string> mapaliases
// big tables that should be streamed
private list<string> streamaliases
/**
* constructor.
*/
public qbjointree
nexttag   0
noouterjoin   true
nosemijoin   true
rhssemijoin   new hashmap<string  arraylist<astnode>>
/**
* returns left alias if any - this is used for merging later on.
*
* @return left alias if any
*/
public string getleftalias
return leftalias
/**
* set left alias for the join expression.
*
* @param leftalias
*          string
*/
public void setleftalias string leftalias
this leftalias   leftalias
public string getrightaliases
return rightaliases
public void setrightaliases string rightaliases
this rightaliases   rightaliases
public string getleftaliases
return leftaliases
public void setleftaliases string leftaliases
this leftaliases   leftaliases
public arraylist<arraylist<astnode>> getexpressions
return expressions
public void setexpressions arraylist<arraylist<astnode>> expressions
this expressions   expressions
public string getbasesrc
return basesrc
public void setbasesrc string basesrc
this basesrc   basesrc
public qbjointree getjoinsrc
return joinsrc
public void setjoinsrc qbjointree joinsrc
this joinsrc   joinsrc
public int getnexttag
return nexttag
public string getjoinstreamdesc
return
public joincond getjoincond
return joincond
public void setjoincond joincond joincond
this joincond   joincond
public boolean getnoouterjoin
return noouterjoin
public void setnoouterjoin boolean noouterjoin
this noouterjoin   noouterjoin
public boolean getnosemijoin
return nosemijoin
public void setnosemijoin boolean semi
nosemijoin   semi
/**
* @return the filters
*/
public arraylist<arraylist<astnode>> getfilters
return filters
/**
* @param filters
*          the filters to set
*/
public void setfilters arraylist<arraylist<astnode>> filters
this filters   filters
/**
* @return the filters for pushing
*/
public arraylist<arraylist<astnode>> getfiltersforpushing
return filtersforpushing
/**
* @param filters for pushing
*          the filters to set
*/
public void setfiltersforpushing arraylist<arraylist<astnode>> filters
this filtersforpushing   filters
/**
* @return the mapsidejoin
*/
public boolean ismapsidejoin
return mapsidejoin
/**
* @param mapsidejoin
*          the mapsidejoin to set
*/
public void setmapsidejoin boolean mapsidejoin
this mapsidejoin   mapsidejoin
/**
* @return the mapaliases
*/
public list<string> getmapaliases
return mapaliases
/**
* @param mapaliases
*          the mapaliases to set
*/
public void setmapaliases list<string> mapaliases
this mapaliases   mapaliases
public list<string> getstreamaliases
return streamaliases
public void setstreamaliases list<string> streamaliases
this streamaliases   streamaliases
/**
* insert only a key to the semijoin table name to column names map.
*
* @param alias
*          table name alias.
*/
public void addrhssemijoin string alias
if   rhssemijoin containskey alias
rhssemijoin put alias  null
/**
* remeber the mapping of table alias to set of columns.
*
* @param alias
* @param columns
*/
public void addrhssemijoincolumns string alias  arraylist<astnode> columns
arraylist<astnode> cols   rhssemijoin get alias
if  cols    null
rhssemijoin put alias  columns
else
cols addall columns
/**
* remeber the mapping of table alias to set of columns.
*
* @param alias
* @param column
*/
public void addrhssemijoincolumns string alias  astnode column
arraylist<astnode> cols   rhssemijoin get alias
if  cols    null
cols   new arraylist<astnode>
cols add column
rhssemijoin put alias  cols
else
cols add column
public arraylist<astnode> getrhssemijoincolumns string alias
return rhssemijoin get alias
/**
* merge the rhs tables from another join tree.
*
* @param src
*          the source join tree
*/
public void mergerhssemijoin qbjointree src
for  entry<string  arraylist<astnode>> e   src rhssemijoin entryset
string key   e getkey
arraylist<astnode> value   rhssemijoin get key
if  value    null
rhssemijoin put key  e getvalue
else
value addall e getvalue
public arraylist<boolean> getnullsafes
return nullsafes
public void setnullsafes arraylist<boolean> nullsafes
this nullsafes   nullsafes