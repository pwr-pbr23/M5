/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive serde2 dynamic_type
import java io serializable
import java util arraylist
import java util arrays
import java util hashmap
import java util list
import java util map
import org apache hadoop hive serde2 serdeexception
import org apache hadoop hive serde2 objectinspector objectinspector
import org apache hadoop hive serde2 objectinspector structfield
import org apache hadoop hive serde2 objectinspector structobjectinspector
import org apache thrift texception
import org apache thrift protocol tfield
import org apache thrift protocol tprotocol
import org apache thrift protocol tprotocolutil
import org apache thrift protocol ttype
/**
* dynamicserdefieldlist.
*
*/
public class dynamicserdefieldlist extends dynamicserdesimplenode implements
serializable
// private void writeobject(objectoutputstream out) throws ioexception {
// out.writeobject(types_by_column_name);
// out.writeobject(ordered_types);
// }
// production: field()*
// mapping of the fieldid to the field
private map<integer  dynamicserdetypebase> types_by_id   null
private map<string  dynamicserdetypebase> types_by_column_name   null
private dynamicserdetypebase ordered_types   null
private map<string  integer> ordered_column_id_by_name   null
public dynamicserdefieldlist int i
super i
public dynamicserdefieldlist thrift_grammar p  int i
super p  i
private dynamicserdefield getfield int i
return  dynamicserdefield  jjtgetchild i
public final dynamicserdefield getchildren
int size   jjtgetnumchildren
dynamicserdefield result   new dynamicserdefield
for  int i   0  i < size  i
result    dynamicserdefield  jjtgetchild i
return result
private int getnumfields
return jjtgetnumchildren
public void initialize
if  types_by_id    null
// multiple means of lookup
types_by_id   new hashmap<integer  dynamicserdetypebase>
types_by_column_name   new hashmap<string  dynamicserdetypebase>
ordered_types   new dynamicserdetypebase
ordered_column_id_by_name   new hashmap<string  integer>
// put them in and also roll them up while we're at it
// a field contains a fieldtype which in turn contains a type
for  int i   0  i < jjtgetnumchildren    i
dynamicserdefield mt   getfield i
dynamicserdetypebase type   mt getfieldtype   getmytype
// types get initialized in case they need to setup any
// internal data structures - e.g., dynamicserdestructbase
type initialize
type fieldid   mt fieldid
type name   mt name
types_by_id put integer valueof mt fieldid   type
types_by_column_name put mt name  type
ordered_types   type
ordered_column_id_by_name put mt name  i
private dynamicserdetypebase getfieldbyfieldid int i
return types_by_id get i
protected dynamicserdetypebase getfieldbyname string fieldname
return types_by_column_name get fieldname
/**
* indicates whether fields can be out of order or missing. i.e., is it really
* real thrift serialization. this is used by dynamicserde to do some
* optimizations if it knows all the fields exist and are required and are
* serialized in order. for now, those optimizations are only done for
* dynamicserde serialized data so always set to false for now.
*/
protected boolean isrealthrift   false
protected boolean fieldspresent
public object deserialize object reuse  tprotocol iprot
throws serdeexception  texception  illegalaccessexception
arraylist<object> struct   null
if  reuse    null
struct   new arraylist<object> getnumfields
for  dynamicserdetypebase orderedtype   ordered_types
struct add null
else
struct    arraylist<object>  reuse
assert  struct size      ordered_types length
boolean fastskips   iprot instanceof org apache hadoop hive serde2 thrift skippabletprotocol
// may need to strip away the stop marker when in thrift mode
boolean stopseen   false
if  fieldspresent    null
fieldspresent   new boolean
arrays fill fieldspresent  false
// read the fields.
for  int i   0  i < getnumfields    i
dynamicserdetypebase mt   null
tfield field   null
if   isrealthrift    getfield i  isskippable
// pre - all the fields are required and serialized in order - is
// !isrealthrift
mt   ordered_types
if  fastskips
org apache hadoop hive serde2 thrift skippabletprotocol  iprot
skip mt gettype
else
tprotocolutil skip iprot  mt gettype
struct set i  null
continue
if  thrift_mode
field   iprot readfieldbegin
if  field type >  0
if  field type    ttype stop
stopseen   true
break
mt   getfieldbyfieldid field id
if  mt    null
system err println     field id
field type
tprotocolutil skip iprot  field type
continue
// field.type < 0 means that this is a faked thrift field, e.g.,
// tcontrolseparatedprotocol, which does not
// serialize the field id in the stream. as a result, the only way to get
// the field id is to fall back to
// the position "i".
// the intention of this hack (field.type < 0) is to make
// tcontrolseparatedprotocol a real thrift prototype,
// but there are a lot additional work to do to fulfill that, and that
// protocol inherently does not support
// versioning (adding/deleting fields).
int orderedid    1
if   thrift_mode    field type < 0
mt   ordered_types
// we don't need to lookup order_column_id_by_name because we know it
// must be "i".
orderedid   i
else
// set the correct position
orderedid   ordered_column_id_by_name get mt name
struct set orderedid  mt deserialize struct get orderedid   iprot
if  thrift_mode
iprot readfieldend
fieldspresent   true
for  int i   0  i < ordered_types length  i
if   fieldspresent
struct set i  null
if  thrift_mode     stopseen
// strip off the stop marker, which may be left if all the fields were in
// the serialization
iprot readfieldbegin
return struct
tfield field   new tfield
public void serialize object o  objectinspector oi  tprotocol oprot
throws texception  serdeexception  nosuchfieldexception  illegalaccessexception
// assuming the objectinspector represents exactly the same type as this
// struct.
// this assumption should be checked during query compile time.
assert  oi instanceof structobjectinspector
structobjectinspector soi    structobjectinspector  oi
boolean writenulls   oprot instanceof org apache hadoop hive serde2 thrift writenullsprotocol
// for every field
list<? extends structfield> fields   soi getallstructfieldrefs
if  fields size      ordered_types length
throw new serdeexception     fields size
ordered_types length
o       oi gettypename
for  int i   0  i < fields size    i
object f   soi getstructfielddata o  fields get i
dynamicserdetypebase mt   ordered_types
if  f    null     writenulls
continue
if  thrift_mode
field   new tfield mt name  mt gettype     short  mt fieldid
oprot writefieldbegin field
if  f    null
org apache hadoop hive serde2 thrift writenullsprotocol  oprot
writenull
else
mt serialize f  fields get i  getfieldobjectinspector    oprot
if  thrift_mode
oprot writefieldend
if  thrift_mode
oprot writefieldstop
@override
public string tostring
stringbuilder result   new stringbuilder
string prefix
for  dynamicserdefield t   getchildren
result append prefix   t fieldid
t getfieldtype   getmytype   tostring         t name
prefix
return result tostring