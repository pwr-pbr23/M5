/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql exec
import java io ioexception
import java io serializable
import java lang management managementfactory
import java lang management memorymxbean
import java net urlclassloader
import java util arrays
import java util list
import java util map
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop hive ql plan mapredlocalwork
import org apache hadoop hive ql plan mapredwork
import org apache hadoop io writable
import org apache hadoop mapred jobconf
import org apache hadoop mapred mapreducebase
import org apache hadoop mapred mapper
import org apache hadoop mapred outputcollector
import org apache hadoop mapred reporter
import org apache hadoop util stringutils
/**
* execmapper.
*
*/
public class execmapper extends mapreducebase implements mapper
private mapoperator mo
private map<string  fetchoperator> fetchoperators
private outputcollector oc
private jobconf jc
private boolean abort   false
private reporter rp
public static final log l4j   logfactory getlog
private static boolean done
// used to log memory usage periodically
public static memorymxbean memorymxbean
private long numrows   0
private long nextcntr   1
private mapredlocalwork localwork   null
private boolean isloginfoenabled   false
private final execmappercontext execcontext   new execmappercontext
@override
public void configure jobconf job
// allocate the bean at the beginning -
memorymxbean   managementfactory getmemorymxbean
l4j info     memorymxbean getheapmemoryusage   getmax
isloginfoenabled   l4j isinfoenabled
try
l4j info
arrays aslist   urlclassloader  job getclassloader    geturls
l4j info
arrays aslist   urlclassloader  thread currentthread
getcontextclassloader    geturls
catch  exception e
l4j info     e getmessage
try
jc   job
execcontext setjc jc
// create map and fetch operators
mapredwork mrwork   utilities getmapredwork job
mo   new mapoperator
mo setconf mrwork
// initialize map operator
mo setchildren job
l4j info mo dump 0
// initialize map local work
localwork   mrwork getmaplocalwork
execcontext setlocalwork localwork
mo setexeccontext execcontext
mo initializelocalwork jc
mo initialize jc  null
if  localwork    null
return
//the following code is for mapjoin
//initialize all the dummy ops
l4j info
list<operator<? extends serializable>> dummyops   localwork getdummyparentop
for operator<? extends serializable> dummyop   dummyops
dummyop setexeccontext execcontext
dummyop initialize jc null
catch  throwable e
abort   true
if  e instanceof outofmemoryerror
// will this be true here?
// don't create a new object if we are already out of memory
throw  outofmemoryerror  e
else
throw new runtimeexception    e
public void map object key  object value  outputcollector output
reporter reporter  throws ioexception
if  oc    null
oc   output
rp   reporter
mo setoutputcollector oc
mo setreporter rp
// reset the execcontext for each new row
execcontext resetrow
try
if  mo getdone
done   true
else
// since there is no concept of a group, we don't invoke
// startgroup/endgroup for a mapper
mo process  writable value
if  isloginfoenabled
numrows
if  numrows    nextcntr
long used_memory   memorymxbean getheapmemoryusage   getused
l4j info     numrows
used_memory
nextcntr   getnextcntr numrows
catch  throwable e
abort   true
if  e instanceof outofmemoryerror
// don't create a new object if we are already out of memory
throw  outofmemoryerror  e
else
l4j fatal stringutils stringifyexception e
throw new runtimeexception e
private long getnextcntr long cntr
// a very simple counter to keep track of number of rows processed by the
// reducer. it dumps
// every 1 million times, and quickly before that
if  cntr >  1000000
return cntr   1000000
return 10   cntr
@override
public void close
// no row was processed
if  oc    null
l4j trace
// check if there are ioexceptions
if   abort
abort   execcontext getiocxt   getioexceptions
// detecting failed executions by exceptions thrown by the operator tree
// ideally hadoop should let us know whether map execution failed or not
try
mo close abort
//for close the local work
if localwork    null
list<operator<? extends serializable>> dummyops   localwork getdummyparentop
for operator<? extends serializable> dummyop   dummyops
dummyop close abort
if  fetchoperators    null
mapredlocalwork localwork   mo getconf   getmaplocalwork
for  map entry<string  fetchoperator> entry   fetchoperators entryset
operator<? extends serializable> forwardop   localwork
getaliastowork   get entry getkey
forwardop close abort
if  isloginfoenabled
long used_memory   memorymxbean getheapmemoryusage   getused
l4j info     numrows
used_memory
reportstats rps   new reportstats rp
mo preordermap rps
return
catch  exception e
if   abort
// signal new failure to map-reduce
l4j error
throw new runtimeexception    e
public static boolean getdone
return done
public boolean isabort
return abort
public void setabort boolean abort
this abort   abort
public static void setdone boolean done
execmapper done   done
/**
* reportstats.
*
*/
public static class reportstats implements operator operatorfunc
reporter rp
public reportstats reporter rp
this rp   rp
public void func operator op
map<enum  long> opstats   op getstats
for  map entry<enum  long> e   opstats entryset
if  rp    null
rp incrcounter e getkey    e getvalue