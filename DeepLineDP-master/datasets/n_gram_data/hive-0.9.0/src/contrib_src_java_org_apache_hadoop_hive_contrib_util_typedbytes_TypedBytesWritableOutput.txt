/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive contrib util typedbytes
import java io bytearrayoutputstream
import java io dataoutput
import java io dataoutputstream
import java io ioexception
import java util arrays
import java util map
import org apache hadoop hive serde2 io bytewritable
import org apache hadoop hive serde2 io doublewritable
import org apache hadoop hive serde2 io shortwritable
import org apache hadoop io arraywritable
import org apache hadoop io booleanwritable
import org apache hadoop io byteswritable
import org apache hadoop io floatwritable
import org apache hadoop io ioutils
import org apache hadoop io intwritable
import org apache hadoop io longwritable
import org apache hadoop io mapwritable
import org apache hadoop io nullwritable
import org apache hadoop io sortedmapwritable
import org apache hadoop io text
import org apache hadoop io vintwritable
import org apache hadoop io vlongwritable
import org apache hadoop io writable
import org apache hadoop io writablecomparable
import org apache hadoop io writableutils
import org apache hadoop record record
/**
* provides functionality for writing writable objects as typed bytes.
*
* @see typedbytesoutput
*/
public class typedbyteswritableoutput
private typedbytesoutput out
private typedbyteswritableoutput
private void settypedbytesoutput typedbytesoutput out
this out   out
private static threadlocal tbout   new threadlocal
@override
protected synchronized object initialvalue
return new typedbyteswritableoutput
/**
* get a thread-local typed bytes writable input for the supplied
* {@link typedbytesoutput}.
*
* @param out
*          typed bytes output object
* @return typed bytes writable output corresponding to the supplied
*         {@link typedbytesoutput}.
*/
public static typedbyteswritableoutput get typedbytesoutput out
typedbyteswritableoutput bout    typedbyteswritableoutput  tbout get
bout settypedbytesoutput out
return bout
/**
* get a thread-local typed bytes writable output for the supplied
* {@link dataoutput}.
*
* @param out
*          data output object
* @return typed bytes writable output corresponding to the supplied
*         {@link dataoutput}.
*/
public static typedbyteswritableoutput get dataoutput out
return get typedbytesoutput get out
/** creates a new instance of typedbyteswritableoutput. */
public typedbyteswritableoutput typedbytesoutput out
this
this out   out
/** creates a new instance of typedbyteswritableoutput. */
public typedbyteswritableoutput dataoutput dout
this new typedbytesoutput dout
public void write writable w  throws ioexception
if  w instanceof typedbyteswritable
writetypedbytes  typedbyteswritable  w
else if  w instanceof byteswritable
writebytes  byteswritable  w
else if  w instanceof bytewritable
writebyte  bytewritable  w
else if  w instanceof booleanwritable
writeboolean  booleanwritable  w
else if  w instanceof intwritable
writeint  intwritable  w
else if  w instanceof vintwritable
writevint  vintwritable  w
else if  w instanceof longwritable
writelong  longwritable  w
else if  w instanceof vlongwritable
writevlong  vlongwritable  w
else if  w instanceof floatwritable
writefloat  floatwritable  w
else if  w instanceof doublewritable
writedouble  doublewritable  w
else if  w instanceof text
writetext  text  w
else if  w instanceof shortwritable
writeshort  shortwritable  w
else if  w instanceof arraywritable
writearray  arraywritable  w
else if  w instanceof mapwritable
writemap  mapwritable  w
else if  w instanceof sortedmapwritable
writesortedmap  sortedmapwritable  w
else if  w instanceof record
writerecord  record  w
else if  w instanceof nullwritable    w    null
writenull
else
writewritable w      last resort
public void writetypedbytes typedbyteswritable tbw  throws ioexception
out writeraw tbw getbytes    0  tbw getlength
public void writebytes byteswritable bw  throws ioexception
byte bytes   arrays copyofrange bw getbytes    0  bw getlength
out writebytes bytes
public void writebyte bytewritable bw  throws ioexception
out writebyte bw get
public void writeboolean booleanwritable bw  throws ioexception
out writebool bw get
public void writeint intwritable iw  throws ioexception
out writeint iw get
public void writevint vintwritable viw  throws ioexception
out writeint viw get
public void writelong longwritable lw  throws ioexception
out writelong lw get
public void writevlong vlongwritable vlw  throws ioexception
out writelong vlw get
public void writefloat floatwritable fw  throws ioexception
out writefloat fw get
public void writedouble doublewritable dw  throws ioexception
out writedouble dw get
public void writeshort shortwritable sw  throws ioexception
out writeshort sw get
public void writetext text t  throws ioexception
out writestring t tostring
public void writearray arraywritable aw  throws ioexception
writable writables   aw get
out writevectorheader writables length
for  writable writable   writables
write writable
public void writemap mapwritable mw  throws ioexception
out writemapheader mw size
for  map entry<writable  writable> entry   mw entryset
write entry getkey
write entry getvalue
public void writesortedmap sortedmapwritable smw  throws ioexception
out writemapheader smw size
for  map entry<writablecomparable  writable> entry   smw entryset
write entry getkey
write entry getvalue
public void writerecord record r  throws ioexception
r serialize typedbytesrecordoutput get out
public void writenull   throws ioexception
out writenull
public void writewritable writable w  throws ioexception
dataoutputstream dos   null
try
bytearrayoutputstream baos   new bytearrayoutputstream
dos   new dataoutputstream baos
writableutils writestring dos  w getclass   getname
w write dos
out writebytes baos tobytearray    type writable code
dos close
dos   null
finally
ioutils closestream dos
public void writeendofrecord   throws ioexception
out writeendofrecord