/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql exec persistence
/**
* an mru (most recently used) cache implementation. this implementation
* maintains a doubly circular linked list and it can be used with an auxiliary
* data structure such as a hashmap to locate the item quickly.
*/
public class mru<t extends dcllitem>
t head     head of the linked list    mru  tail  head prev  will be the lru
public mru
head   null
/**
* insert a value into the mru. it will appear as the head.
*/
public t put t item
addtohead item
return item
/**
* remove a item from the mru list.
*
* @param v
*          linked list item.
*/
public void remove t v
if  v    null
return
if  v    head
if  head    head getnext
head    t  head getnext
else
head   null
v remove
/**
* get the most recently used.
*
* @return the most recently used item.
*/
public t head
return head
/**
* get the least recently used.
*
* @return the least recently used item.
*/
public t tail
return  t  head getprev
/**
* insert a new item as the head.
*
* @param v
*          the new linked list item to be added to the head.
*/
private void addtohead t v
if  head    null
head   v
else
head insertbefore v
head   v
/**
* move an existing item to the head.
*
* @param v
*          the linked list item to be moved to the head.
*/
public void movetohead t v
assert  head    null
if  head    v
v remove
head insertbefore v
head   v
/**
* clear all elements in the mru list. this is not very efficient (linear)
* since it will call remove() to every item in the list.
*/
public void clear
while  head getnext      head
head getnext   remove
head remove
head   null