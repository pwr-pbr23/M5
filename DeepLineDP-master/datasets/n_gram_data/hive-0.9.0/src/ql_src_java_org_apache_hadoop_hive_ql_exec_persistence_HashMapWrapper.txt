/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql exec persistence
import java io file
import java io fileinputstream
import java io fileoutputstream
import java io ioexception
import java io objectinputstream
import java io objectoutputstream
import java io serializable
import java lang management managementfactory
import java lang management memorymxbean
import java text numberformat
import java util hashmap
import java util set
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop hive ql exec utilities
import org apache hadoop hive ql metadata hiveexception
import org apache hadoop hive ql session sessionstate loghelper
/**
* simple wrapper for persistent hashmap implementing only the put/get/remove/clear interface. the
* main memory hash table acts as a cache and all put/get will operate on it first. if the size of
* the main memory hash table exceeds a certain threshold, new elements will go into the persistent
* hash table.
*/
public class hashmapwrapper<k  v> implements serializable
private static final long serialversionuid   1l
protected log log   logfactory getlog this getclass   getname
// default threshold for using main memory based hashmap
private static final int threshold   1000000
private static final float loadfactor   0 75f
private static final float memoryusage   1
private float maxmemoryusage
private hashmap<k  v> mhash     main memory hashmap
protected transient loghelper console
private file dumpfile
public static memorymxbean memorymxbean
private long maxmemory
private long currentmemory
private numberformat num
/**
* constructor.
*
* @param threshold
*          user specified threshold to store new values into persistent storage.
*/
public hashmapwrapper int threshold  float loadfactor  float memoryusage
maxmemoryusage   memoryusage
mhash   new hashmap<k  v> threshold  loadfactor
memorymxbean   managementfactory getmemorymxbean
maxmemory   memorymxbean getheapmemoryusage   getmax
log info     maxmemory
num   numberformat getinstance
num setminimumfractiondigits 2
public hashmapwrapper int threshold
this threshold  loadfactor  memoryusage
public hashmapwrapper
this threshold  loadfactor  memoryusage
public v get k key
return mhash get key
public boolean put k key  v value  throws hiveexception
// isabort();
mhash put key  value
return false
public void remove k key
mhash remove key
/**
* flush the main memory hash table into the persistent cache file
*
* @return persistent cache file
*/
public long flushmemorycachetopersistent file file  throws ioexception
objectoutputstream outputstream   null
outputstream   new objectoutputstream new fileoutputstream file
outputstream writeobject mhash
outputstream flush
outputstream close
return file length
public void initilizepersistenthash string filename  throws ioexception  classnotfoundexception
objectinputstream inputstream   null
inputstream   new objectinputstream new fileinputstream filename
hashmap<k  v> hashtable    hashmap<k  v>  inputstream readobject
this setmhash hashtable
inputstream close
public int size
return mhash size
public set<k> keyset
return mhash keyset
/**
* close the persistent hash table and clean it up.
*
* @throws hiveexception
*/
public void close   throws hiveexception
mhash clear
public void clear   throws hiveexception
mhash clear
public int getkeysize
return mhash size
public boolean isabort long numrows loghelper console
system gc
system gc
int size   mhash size
long usedmemory   memorymxbean getheapmemoryusage   getused
double rate    double  usedmemory    double  maxmemory
console printinfo utilities now         numrows
size       usedmemory       num format rate
if  rate >  double  maxmemoryusage
return true
return false
public void setlog log log
log   log
public hashmap<k  v> getmhash
return mhash
public void setmhash hashmap<k  v> hash
mhash   hash
public loghelper getconsole
return console
public void setconsole loghelper console
this console   console
public file getdumpfile
return dumpfile
public void setdumpfile file dumpfile
this dumpfile   dumpfile
public static memorymxbean getmemorymxbean
return memorymxbean
public static void setmemorymxbean memorymxbean memorymxbean
hashmapwrapper memorymxbean   memorymxbean
public long getmaxmemory
return maxmemory
public void setmaxmemory long maxmemory
this maxmemory   maxmemory
public long getcurrentmemory
return currentmemory
public void setcurrentmemory long currentmemory
this currentmemory   currentmemory
public numberformat getnum
return num
public void setnum numberformat num
this num   num
public static int getthreshold
return threshold