/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive serde2 columnar
import java io datainput
import java io dataoutput
import java io ioexception
import org apache hadoop io writable
import org apache hadoop io writablecomparator
import org apache hadoop io writablefactories
import org apache hadoop io writablefactory
/**
* <tt>bytesrefwritable</tt> referenced a section of byte array. it can be used
* to avoid unnecessary byte copy.
*/
public class bytesrefwritable implements writable  comparable<bytesrefwritable>
private static final byte empty_bytes   new byte
public static bytesrefwritable zerobytesrefwritable   new bytesrefwritable
int start   0
int length   0
byte bytes   null
lazydecompressioncallback lazydecompressobj
/**
* create a zero-size bytes.
*/
public bytesrefwritable
this empty_bytes
/**
* create a bytesrefwritable with <tt>length</tt> bytes.
*/
public bytesrefwritable int length
assert length > 0
this length   length
bytes   new byte
start   0
/**
* create a bytesrefwritable referenced to the given bytes.
*/
public bytesrefwritable byte bytes
this bytes   bytes
length   bytes length
start   0
/**
* create a bytesrefwritable referenced to one section of the given bytes. the
* section is determined by argument <tt>offset</tt> and <tt>len</tt>.
*/
public bytesrefwritable byte data  int offset  int len
bytes   data
start   offset
length   len
/**
* create a bytesrefwritable referenced to one section of the given bytes. the
* argument <tt>lazydecompressdata</tt> refers to a lazydecompressioncallback
* object. the arguments <tt>offset</tt> and <tt>len</tt> are referred to
* uncompressed bytes of <tt>lazydecompressdata</tt>. use <tt>offset</tt> and
* <tt>len</tt> after uncompressing the data.
*/
public bytesrefwritable lazydecompressioncallback lazydecompressdata
int offset  int len
lazydecompressobj   lazydecompressdata
start   offset
length   len
private void lazydecompress   throws ioexception
if  bytes    null    lazydecompressobj    null
bytes   lazydecompressobj decompress
/**
* returns a copy of the underlying bytes referenced by this instance.
*
* @return a new copied byte array
* @throws ioexception
*/
public byte getbytescopy   throws ioexception
lazydecompress
byte bb   new byte
system arraycopy bytes  start  bb  0  length
return bb
/**
* returns the underlying bytes.
*
* @throws ioexception
*/
public byte getdata   throws ioexception
lazydecompress
return bytes
/**
* readfields() will corrupt the array. so use the set method whenever
* possible.
*
* @see #readfields(datainput)
*/
public void set byte newdata  int offset  int len
bytes   newdata
start   offset
length   len
lazydecompressobj   null
/**
* readfields() will corrupt the array. so use the set method whenever
* possible.
*
* @see #readfields(datainput)
*/
public void set lazydecompressioncallback newdata  int offset  int len
bytes   null
start   offset
length   len
lazydecompressobj   newdata
public void writedatato dataoutput out  throws ioexception
lazydecompress
out write bytes  start  length
/**
* always reuse the bytes array if length of bytes array is equal or greater
* to the current record, otherwise create a new one. readfields will corrupt
* the array. please use set() whenever possible.
*
* @see #set(byte[], int, int)
*/
public void readfields datainput in  throws ioexception
int len   in readint
if  len > bytes length
bytes   new byte
start   0
length   len
in readfully bytes  start  length
/** {@inheritdoc} */
public void write dataoutput out  throws ioexception
lazydecompress
out writeint length
out write bytes  start  length
/** {@inheritdoc} */
@override
public int hashcode
return super hashcode
/** {@inheritdoc} */
@override
public string tostring
stringbuilder sb   new stringbuilder 3   length
for  int idx   start  idx < length  idx
// if not the first, put a blank separator in
if  idx    0
sb append
string num   integer tohexstring 0xff   bytes
// if it is only one digit, add a leading 0.
if  num length   < 2
sb append
sb append num
return sb tostring
/** {@inheritdoc} */
@override
public int compareto bytesrefwritable other
if  other    null
throw new illegalargumentexception
if  this    other
return 0
try
return writablecomparator comparebytes getdata    start  getlength
other getdata    other start  other getlength
catch  ioexception e
throw new runtimeexception e
/** {@inheritdoc} */
@override
public boolean equals object right_obj
if  right_obj    null      right_obj instanceof bytesrefwritable
return false
return compareto  bytesrefwritable  right_obj     0
static
writablefactories setfactory bytesrefwritable class  new writablefactory
@override
public writable newinstance
return new bytesrefwritable
public int getlength
return length
public int getstart
return start