/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive serde2 objectinspector
import org apache hadoop hive serde2 objectinspector objectinspectorconverters converter
import org apache hadoop hive serde2 objectinspector primitive booleanobjectinspector
import org apache hadoop hive serde2 objectinspector primitive byteobjectinspector
import org apache hadoop hive serde2 objectinspector primitive intobjectinspector
import org apache hadoop hive serde2 objectinspector primitive longobjectinspector
import org apache hadoop hive serde2 objectinspector primitive stringobjectinspector
import org apache hadoop hive serde2 typeinfo typeinfo
import org apache hadoop hive serde2 typeinfo typeinfofactory
import org apache hadoop hive serde2 typeinfo typeinfoutils
/**
* compare two list of objects.
* two lists are expected to have same types. type information for every object is
* passed when calling constructor to avoid the step of figuring out types from
* objectinspetor and determine how to compare the types when comparing.
* also, for string and text elements, it performs slightly better than
* using objectinspectorutils.compare() == 0, which instead of calling .compare()
* calls .equalto(), which compares size before byte by byte comparison.
*
*/
public class listobjectsequalcomparer
enum comparetype
// now only string, text, int, long, byte and boolean comparisons
// are treated as special cases.
// for other types, we reuse objectinspectorutils.compare()
compare_string  compare_text  compare_int  compare_long  compare_byte
compare_bool  other
class fieldcomparer
protected objectinspector oi0  oi1
protected objectinspector compareoi
protected comparetype comparetype
protected converter converter0  converter1
protected stringobjectinspector soi0  soi1
protected intobjectinspector ioi0  ioi1
protected longobjectinspector loi0  loi1
protected byteobjectinspector byoi0  byoi1
protected booleanobjectinspector boi0  boi1
public fieldcomparer objectinspector oi0  objectinspector oi1
this oi0   oi0
this oi1   oi1
typeinfo type0   typeinfoutils gettypeinfofromobjectinspector oi0
typeinfo type1   typeinfoutils gettypeinfofromobjectinspector oi1
if  type0 equals typeinfofactory stringtypeinfo
type1 equals typeinfofactory stringtypeinfo
soi0    stringobjectinspector  oi0
soi1    stringobjectinspector  oi1
if  soi0 preferwritable      soi1 preferwritable
comparetype   comparetype compare_text
else
comparetype   comparetype compare_string
else if  type0 equals typeinfofactory inttypeinfo
type1 equals typeinfofactory inttypeinfo
comparetype   comparetype compare_int
ioi0    intobjectinspector  oi0
ioi1    intobjectinspector  oi1
else if  type0 equals typeinfofactory longtypeinfo
type1 equals typeinfofactory longtypeinfo
comparetype   comparetype compare_long
loi0    longobjectinspector  oi0
loi1    longobjectinspector  oi1
else if  type0 equals typeinfofactory bytetypeinfo
type1 equals typeinfofactory bytetypeinfo
comparetype   comparetype compare_byte
byoi0    byteobjectinspector  oi0
byoi1    byteobjectinspector  oi1
else if  type0 equals typeinfofactory booleantypeinfo
type1 equals typeinfofactory booleantypeinfo
comparetype   comparetype compare_bool
boi0    booleanobjectinspector  oi0
boi1    booleanobjectinspector  oi1
else
// we don't check compatibility of two object inspectors, but directly
// pass them into objectinspectorutils.compare(), users of this class
// should make sure objectinspectorutils.compare() doesn't throw exceptions
// and returns correct results.
comparetype   comparetype other
public boolean areequal object o0  object o1
if  o0    null    o1    null
return true
else if  o0    null    o1    null
return false
switch  comparetype
case compare_text
return  soi0 getprimitivewritableobject o0  equals
soi1 getprimitivewritableobject o1
case compare_int
return  ioi0 get o0     ioi1 get o1
case compare_long
return  loi0 get o0     loi1 get o1
case compare_byte
return  byoi0 get o0     byoi1 get o1
case compare_bool
return  boi0 get o0     boi1 get o1
case compare_string
return  soi0 getprimitivejavaobject o0  equals
soi1 getprimitivejavaobject o1
default
return  objectinspectorutils compare
o0  oi0  o1  oi1     0
fieldcomparer fieldcomparers
int numfields
public listobjectsequalcomparer objectinspector oi0  objectinspector oi1
if  oi0 length    oi1 length
throw new runtimeexception
numfields   oi0 length
fieldcomparers   new fieldcomparer
for  int i   0  i < oi0 length  i
fieldcomparers   new fieldcomparer oi0  oi1
/**
* ol0, ol1 should have equal or less number of elements than objectinspectors
* passed in constructor.
*
* @param ol0
* @param ol1
* @return true if object in ol0 and ol1 are all identical
*/
public boolean areequal object ol0  object ol1
if  ol0 length    numfields    ol1 length    numfields
if  ol0 length    ol1 length
return false
assert  ol0 length <  numfields
assert  ol1 length <  numfields
for  int i   0  i < math min ol0 length  ol1 length   i
if   fieldcomparers areequal ol0  ol1
return false
return true
for  int i   numfields   1  i >  0  i
if   fieldcomparers areequal ol0  ol1
return false
return true