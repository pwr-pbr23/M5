/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive serde2 columnar
import java io ioexception
import java util arrays
import java util list
import java util properties
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop conf configuration
import org apache hadoop hive serde2 bytestream
import org apache hadoop hive serde2 columnprojectionutils
import org apache hadoop hive serde2 serde
import org apache hadoop hive serde2 serdeexception
import org apache hadoop hive serde2 serdestats
import org apache hadoop hive serde2 serdeutils
import org apache hadoop hive serde2 lazy lazyfactory
import org apache hadoop hive serde2 lazy lazysimpleserde
import org apache hadoop hive serde2 lazy lazysimpleserde serdeparameters
import org apache hadoop hive serde2 objectinspector objectinspector
import org apache hadoop hive serde2 objectinspector objectinspector category
import org apache hadoop hive serde2 objectinspector structfield
import org apache hadoop hive serde2 objectinspector structobjectinspector
import org apache hadoop hive serde2 objectinspector primitive primitiveobjectinspectorfactory
import org apache hadoop hive serde2 typeinfo structtypeinfo
import org apache hadoop hive serde2 typeinfo typeinfoutils
import org apache hadoop io writable
/**
* columnarserde is used for columnar based storage supported by rcfile.
* columnarserde differentiate from lazysimpleserde in:<br>
* (1) columnarserde uses a columnarstruct as its lazy object <br>
* (2) columnarserde initialize columnarstruct's field directly. but under the
* field level, it works like lazysimpleserde<br>
*/
public class columnarserde extends columnarserdebase
@override
public string tostring
return getclass   tostring
arrays aslist serdeparams getseparators
structtypeinfo  serdeparams getrowtypeinfo
getallstructfieldnames
structtypeinfo  serdeparams getrowtypeinfo
getallstructfieldtypeinfos
public static final log log   logfactory
getlog columnarserde class getname
public columnarserde   throws serdeexception
serdeparameters serdeparams   null
/**
* initialize the serde given the parameters.
*
* @see serde#initialize(configuration, properties)
*/
public void initialize configuration job  properties tbl  throws serdeexception
serdeparams   lazysimpleserde initserdeparams job  tbl  getclass   getname
// create the objectinspectors for the fields. note: currently
// columnarobject uses same objectinpector as lazystruct
cachedobjectinspector   lazyfactory createcolumnarstructinspector
serdeparams getcolumnnames    serdeparams getcolumntypes    serdeparams
getseparators    serdeparams getnullsequence    serdeparams
isescaped    serdeparams getescapechar
java util arraylist<integer> notskipids   columnprojectionutils getreadcolumnids job
cachedlazystruct   new columnarstruct cachedobjectinspector  notskipids
serdeparams getnullsequence
int size   serdeparams getcolumntypes   size
super initialize size
log debug
serdeparams getcolumnnames
serdeparams getcolumntypes
arrays aslist serdeparams getseparators
serdeparams getnullstring
/**
* serialize a row of data.
*
* @param obj
*          the row object
* @param objinspector
*          the objectinspector for the row object
* @return the serialized writable object
* @see serde#serialize(object, objectinspector)
*/
public writable serialize object obj  objectinspector objinspector  throws serdeexception
if  objinspector getcategory      category struct
throw new serdeexception getclass   tostring
objinspector gettypename
// prepare the field objectinspectors
structobjectinspector soi    structobjectinspector  objinspector
list<? extends structfield> fields   soi getallstructfieldrefs
list<object> list   soi getstructfieldsdataaslist obj
list<? extends structfield> declaredfields    serdeparams getrowtypeinfo      null      structtypeinfo  serdeparams
getrowtypeinfo    getallstructfieldnames   size   > 0  ?   structobjectinspector  getobjectinspector
getallstructfieldrefs

try
// used for avoid extra byte copy
serializestream reset
serializedsize   0
int count   0
// serialize each field
for  int i   0  i < fields size    i
// get the field objectinspector and the field object.
objectinspector foi   fields get i  getfieldobjectinspector
object f    list    null ? null   list get i
if  declaredfields    null    i >  declaredfields size
throw new serdeexception     declaredfields size
i           obj
serdeparams getrowtypeinfo   tostring
typeinfoutils gettypeinfofromobjectinspector objinspector
// if the field that is passed in is not a primitive, and either the
// field is not declared (no schema was given at initialization), or
// the field is declared as a primitive in initialization, serialize
// the data to json string. otherwise serialize the data in the
// delimited way.
if   foi getcategory   equals category primitive
declaredfields    null    declaredfields get i
getfieldobjectinspector   getcategory   equals
category primitive
lazysimpleserde serialize serializestream  serdeutils getjsonstring
f  foi
primitiveobjectinspectorfactory javastringobjectinspector
serdeparams getseparators    1  serdeparams getnullsequence
serdeparams isescaped    serdeparams getescapechar    serdeparams
getneedsescape
else
lazysimpleserde serialize serializestream  f  foi  serdeparams
getseparators    1  serdeparams getnullsequence    serdeparams
isescaped    serdeparams getescapechar    serdeparams
getneedsescape
field set serializestream getdata    count  serializestream
getcount
count
count   serializestream getcount
serializedsize   serializestream getcount
lastoperationserialize   true
lastoperationdeserialize   false
catch  ioexception e
throw new serdeexception e
return serializecache