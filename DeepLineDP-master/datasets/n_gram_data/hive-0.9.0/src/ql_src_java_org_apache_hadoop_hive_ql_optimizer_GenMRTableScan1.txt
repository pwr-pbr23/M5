/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql optimizer
import java io serializable
import java util hashset
import java util map
import java util set
import java util stack
import org apache hadoop hive ql exec operator
import org apache hadoop hive ql exec tablescanoperator
import org apache hadoop hive ql exec task
import org apache hadoop hive ql exec taskfactory
import org apache hadoop hive ql lib node
import org apache hadoop hive ql lib nodeprocessor
import org apache hadoop hive ql lib nodeprocessorctx
import org apache hadoop hive ql metadata partition
import org apache hadoop hive ql optimizer genmrproccontext genmapredctx
import org apache hadoop hive ql parse parsecontext
import org apache hadoop hive ql parse prunedpartitionlist
import org apache hadoop hive ql parse qbparseinfo
import org apache hadoop hive ql parse semanticexception
import org apache hadoop hive ql parse basesemanticanalyzer tablespec
import org apache hadoop hive ql plan mapredwork
import org apache hadoop hive ql plan statswork
/**
* processor for the rule - table scan.
*/
public class genmrtablescan1 implements nodeprocessor
public genmrtablescan1
/**
* table sink encountered.
*
* @param nd
*          the table sink operator encountered
* @param opprocctx
*          context
*/
public object process node nd  stack<node> stack  nodeprocessorctx opprocctx
object    nodeoutputs  throws semanticexception
tablescanoperator op    tablescanoperator  nd
genmrproccontext ctx    genmrproccontext  opprocctx
parsecontext parsectx   ctx getparsectx
map<operator<? extends serializable>  genmapredctx> mapcurrctx   ctx getmapcurrctx
// create a dummy mapreduce task
mapredwork currwork   genmapredutils getmapredwork parsectx
task<? extends serializable> currtask   taskfactory get currwork  parsectx getconf
operator<? extends serializable> currtopop   op
ctx setcurrtask currtask
ctx setcurrtopop currtopop
for  string alias   parsectx gettopops   keyset
operator<? extends serializable> currop   parsectx gettopops   get alias
if  currop    op
string curraliasid   alias
ctx setcurraliasid curraliasid
mapcurrctx put op  new genmapredctx currtask  currtopop  curraliasid
qbparseinfo parseinfo   parsectx getqb   getparseinfo
if  parseinfo isanalyzecommand
//   analyze table t [partition (...)] compute statistics;
// the plan consists of a simple mapredtask followed by a statstask.
// the mr task is just a simple tablescanoperator
statswork statswork   new statswork parsectx getqb   getparseinfo   gettablespec
statswork setaggkey op getconf   getstatsaggprefix
task<statswork> statstask   taskfactory get statswork  parsectx getconf
currtask adddependenttask statstask
if   ctx getroottasks   contains currtask
ctx getroottasks   add currtask
currwork setgatheringstats true
// note: here we should use the new partition predicate pushdown api to get a list of pruned list,
// and pass it to settaskplan as the last parameter
set<partition> confirmedpartns   new hashset<partition>
tablespec tblspec   parseinfo gettablespec
if  tblspec spectype    tablespec spectype static_partition
// static partition
confirmedpartns add tblspec parthandle
else if  tblspec spectype    tablespec spectype dynamic_partition
// dynamic partition
confirmedpartns addall tblspec partitions
if  confirmedpartns size   > 0
prunedpartitionlist partlist   new prunedpartitionlist confirmedpartns  new hashset<partition>    null
genmapredutils settaskplan curraliasid  currtopop  currwork  false  ctx  partlist
else      non partitioned table
genmapredutils settaskplan curraliasid  currtopop  currwork  false  ctx
return null
assert false
return null