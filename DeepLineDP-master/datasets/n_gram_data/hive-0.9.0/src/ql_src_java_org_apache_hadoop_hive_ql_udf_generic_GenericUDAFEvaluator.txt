/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql udf generic
import org apache hadoop hive ql metadata hiveexception
import org apache hadoop hive ql udf udftype
import org apache hadoop hive serde2 objectinspector objectinspector
/**
* a generic user-defined aggregation function (genericudaf) for the use with
* hive.
*
* new genericudaf classes need to inherit from this genericudaf class.
*
* the genericudaf are superior to normal udafs in the following ways: 1. it can
* accept arguments of complex types, and return complex types. 2. it can accept
* variable length of arguments. 3. it can accept an infinite number of function
* signature - for example, it's easy to write a genericudaf that accepts
* array<int>, array<array<int>> and so on (arbitrary levels of nesting).
*/
@udftype deterministic   true
public abstract class genericudafevaluator
/**
* mode.
*
*/
public static enum mode
/**
* partial1: from original data to partial aggregation data: iterate() and
* terminatepartial() will be called.
*/
partial1
/**
* partial2: from partial aggregation data to partial aggregation data:
* merge() and terminatepartial() will be called.
*/
partial2
/**
* final: from partial aggregation to full aggregation: merge() and
* terminate() will be called.
*/
final
/**
* complete: from original data directly to full aggregation: iterate() and
* terminate() will be called.
*/
complete
mode mode
/**
* the constructor.
*/
public genericudafevaluator
/**
* initialize the evaluator.
*
* @param m
*          the mode of aggregation.
* @param parameters
*          the objectinspector for the parameters: in partial1 and complete
*          mode, the parameters are original data; in partial2 and final
*          mode, the parameters are just partial aggregations (in that case,
*          the array will always have a single element).
* @return the objectinspector for the return value. in partial1 and partial2
*         mode, the objectinspector for the return value of
*         terminatepartial() call; in final and complete mode, the
*         objectinspector for the return value of terminate() call.
*
*         note: we need objectinspector[] (in addition to the typeinfo[] in
*         genericudafresolver) for 2 reasons: 1. objectinspector contains
*         more information than typeinfo; and genericudafevaluator.init at
*         execution time. 2. we call genericudafresolver.getevaluator at
*         compilation time,
*/
public objectinspector init mode m  objectinspector parameters  throws hiveexception
// this function should be overriden in every sub class
// and the sub class should call super.init(m, parameters) to get mode set.
mode   m
return null
/**
* the interface for a class that is used to store the aggregation result
* during the process of aggregation.
*
* we split this piece of data out because there can be millions of instances
* of this aggregation in hash-based aggregation process, and it's very
* important to conserve memory.
*
* in the future, we may completely hide this class inside the evaluator and
* use integer numbers to identify which aggregation we are looking at.
*/
public static interface aggregationbuffer
/**
* get a new aggregation object.
*/
public abstract aggregationbuffer getnewaggregationbuffer   throws hiveexception
/**
* reset the aggregation. this is useful if we want to reuse the same
* aggregation.
*/
public abstract void reset aggregationbuffer agg  throws hiveexception
/**
* this function will be called by groupbyoperator when it sees a new input
* row.
*
* @param agg
*          the object to store the aggregation result.
* @param parameters
*          the row, can be inspected by the ois passed in init().
*/
public void aggregate aggregationbuffer agg  object parameters  throws hiveexception
if  mode    mode partial1    mode    mode complete
iterate agg  parameters
else
assert  parameters length    1
merge agg  parameters
/**
* this function will be called by groupbyoperator when it sees a new input
* row.
*
* @param agg
*          the object to store the aggregation result.
*/
public object evaluate aggregationbuffer agg  throws hiveexception
if  mode    mode partial1    mode    mode partial2
return terminatepartial agg
else
return terminate agg
/**
* iterate through original data.
*
* @param parameters
*          the objects of parameters.
*/
public abstract void iterate aggregationbuffer agg  object parameters  throws hiveexception
/**
* get partial aggregation result.
*
* @return partial aggregation result.
*/
public abstract object terminatepartial aggregationbuffer agg  throws hiveexception
/**
* merge with partial aggregation result. note: null might be passed in case
* there is no input data.
*
* @param partial
*          the partial aggregation result.
*/
public abstract void merge aggregationbuffer agg  object partial  throws hiveexception
/**
* get final aggregation result.
*
* @return final aggregation result.
*/
public abstract object terminate aggregationbuffer agg  throws hiveexception