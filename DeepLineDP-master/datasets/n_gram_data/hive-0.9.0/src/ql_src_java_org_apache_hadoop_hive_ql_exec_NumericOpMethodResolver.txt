/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql exec
import java lang reflect method
import java util arraylist
import java util arrays
import java util list
import org apache hadoop hive serde2 typeinfo typeinfo
import org apache hadoop hive serde2 typeinfo typeinfofactory
import org apache hadoop hive serde2 typeinfo typeinfoutils
/**
* the class implements the method resolution for operators like (+, -, *, %).
* the resolution logic is as follows:
*
* 1. if one of the parameters is a string, then it resolves to evaluate(double,
* double) 2. if one of the parameters is null, then it resolves to evaluate(t,
* t) where t is the other non-null parameter type. 3. if both of the parameters
* are null, then it resolves to evaluate(byte, byte) 4. otherwise, it resolves
* to evaluate(t, t), where t is the type resulting from calling
* functionregistry.getcommonclass() on the two arguments.
*/
public class numericopmethodresolver implements udfmethodresolver
/**
* the udfclass for which resolution is needed.
*/
class<? extends udf> udfclass
/**
* constuctor.
*/
public numericopmethodresolver class<? extends udf> udfclass
this udfclass   udfclass
/*
* (non-javadoc)
*
* @see
* org.apache.hadoop.hive.ql.exec.udfmethodresolver#getevalmethod(java.util
* .list)
*/
@override
public method getevalmethod list<typeinfo> argtypeinfos  throws udfargumentexception
assert  argtypeinfos size      2
list<typeinfo> ptypeinfos   null
list<typeinfo> modargtypeinfos   new arraylist<typeinfo>
// if either argument is a string, we convert to a double because a number
// in string form should always be convertible into a double
if  argtypeinfos get 0  equals typeinfofactory stringtypeinfo
argtypeinfos get 1  equals typeinfofactory stringtypeinfo
modargtypeinfos add typeinfofactory doubletypeinfo
modargtypeinfos add typeinfofactory doubletypeinfo
else
// if it's a void, we change the type to a byte because once the types
// are run through getcommonclass(), a byte and any other type t will
// resolve to type t
for  int i   0  i < 2  i
if  argtypeinfos get i  equals typeinfofactory voidtypeinfo
modargtypeinfos add typeinfofactory bytetypeinfo
else
modargtypeinfos add argtypeinfos get i
typeinfo commontype   functionregistry getcommonclass modargtypeinfos
get 0   modargtypeinfos get 1
if  commontype    null
throw new udfargumentexception
modargtypeinfos get 0  gettypename
modargtypeinfos get 1  gettypename
ptypeinfos   new arraylist<typeinfo>
ptypeinfos add commontype
ptypeinfos add commontype
method udfmethod   null
for  method m   arrays aslist udfclass getmethods
if  m getname   equals
list<typeinfo> argumenttypeinfos   typeinfoutils getparametertypeinfos
m  ptypeinfos size
if  argumenttypeinfos    null
// null means the method does not accept number of arguments passed.
continue
boolean match    argumenttypeinfos size      ptypeinfos size
for  int i   0  i < ptypeinfos size      match  i
typeinfo accepted   argumenttypeinfos get i
if   accepted equals ptypeinfos get i
match   false
if  match
if  udfmethod    null
throw new ambiguousmethodexception udfclass  argtypeinfos
arrays aslist new method udfmethod  m
else
udfmethod   m
return udfmethod