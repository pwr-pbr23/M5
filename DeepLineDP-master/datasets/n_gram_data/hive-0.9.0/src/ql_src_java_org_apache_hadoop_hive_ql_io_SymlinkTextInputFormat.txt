/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql io
import java io bufferedreader
import java io datainput
import java io dataoutput
import java io ioexception
import java io inputstreamreader
import java util arraylist
import java util hashmap
import java util list
import java util map
import org apache hadoop conf configuration
import org apache hadoop fs contentsummary
import org apache hadoop fs filestatus
import org apache hadoop fs filesystem
import org apache hadoop fs path
import org apache hadoop hive conf hiveconf
import org apache hadoop hive io hiveioexceptionhandlerutil
import org apache hadoop hive ql plan mapredwork
import org apache hadoop hive ql plan partitiondesc
import org apache hadoop io longwritable
import org apache hadoop io text
import org apache hadoop mapred fileinputformat
import org apache hadoop mapred filesplit
import org apache hadoop mapred inputformat
import org apache hadoop mapred inputsplit
import org apache hadoop mapred jobconf
import org apache hadoop mapred jobconfigurable
import org apache hadoop mapred recordreader
import org apache hadoop mapred reporter
import org apache hadoop mapred textinputformat
/**
* symlink file is a text file which contains a list of filename / dirname.
* this input method reads symlink files from specified job input paths and
* takes the files / directories specified in those symlink files as
* actual map-reduce input. the target input data should be in textinputformat.
*/
@suppresswarnings
public class symlinktextinputformat extends symbolicinputformat implements
inputformat<longwritable  text>  jobconfigurable
contentsummaryinputformat  reworkmapredinputformat
/**
* this input split wraps the filesplit generated from
* textinputformat.getsplits(), while setting the original link file path
* as job input path. this is needed because mapoperator relies on the
* job input path to lookup correct child operators. the target data file
* is encapsulated in the wrapped filesplit.
*/
public static class symlinktextinputsplit extends filesplit
private final filesplit split
public symlinktextinputsplit
super  path null  0  0   string null
split   new filesplit  path null  0  0   string null
public symlinktextinputsplit path symlinkpath  filesplit split  throws ioexception
super symlinkpath  0  0  split getlocations
this split   split
/**
* gets the target split, i.e. the split of target data.
*/
public filesplit gettargetsplit
return split
@override
public void write dataoutput out  throws ioexception
super write out
split write out
@override
public void readfields datainput in  throws ioexception
super readfields in
split readfields in
@override
public recordreader<longwritable  text> getrecordreader
inputsplit split  jobconf job  reporter reporter  throws ioexception
inputsplit targetsplit     symlinktextinputsplit split  gettargetsplit
// the target data is in textinputformat.
textinputformat inputformat   new textinputformat
inputformat configure job
recordreader innerreader   null
try
innerreader   inputformat getrecordreader targetsplit  job
reporter
catch  exception e
innerreader   hiveioexceptionhandlerutil
handlerecordreadercreationexception e  job
hiverecordreader rr   new hiverecordreader innerreader  job
rr initiocontext  filesplit targetsplit  job  textinputformat class  innerreader
return rr
/**
* parses all target paths from job input directory which contains symlink
* files, and splits the target data using textinputformat.
*/
@override
public inputsplit getsplits jobconf job  int numsplits
throws ioexception
path symlinksdirs   fileinputformat getinputpaths job
if  symlinksdirs length    0
throw new ioexception
// get all target paths first, because the number of total target paths
// is used to determine number of splits of each target path.
list<path> targetpaths   new arraylist<path>
list<path> symlinkpaths   new arraylist<path>
try
gettargetpathsfromsymlinksdirs
job
symlinksdirs
targetpaths
symlinkpaths
catch  exception e
throw new ioexception
e
if  targetpaths size      0
return new inputsplit
// the input should be in textinputformat.
textinputformat inputformat   new textinputformat
jobconf newjob   new jobconf job
newjob setinputformat textinputformat class
inputformat configure newjob
list<inputsplit> result   new arraylist<inputsplit>
// ceil(numsplits / numpaths), so we can get at least numsplits splits.
int numpaths   targetpaths size
int numsubsplits    numsplits   numpaths   1    numpaths
// for each path, do getsplits().
for  int i   0  i < numpaths    i
path targetpath   targetpaths get i
path symlinkpath   symlinkpaths get i
fileinputformat setinputpaths newjob  targetpath
inputsplit iss   inputformat getsplits newjob  numsubsplits
for  inputsplit is   iss
result add new symlinktextinputsplit symlinkpath   filesplit is
return result toarray new inputsplit
@override
public void configure jobconf job
// empty
/**
* given list of directories containing symlink files, read all target
* paths from symlink files and return as targetpaths list. and for each
* targetpaths[i], symlinkpaths[i] will be the path to the symlink file
* containing the target path.
*/
private static void gettargetpathsfromsymlinksdirs
configuration conf  path symlinksdirs
list<path> targetpaths  list<path> symlinkpaths  throws ioexception
for  path symlinkdir   symlinksdirs
filesystem filesystem   symlinkdir getfilesystem conf
filestatus symlinks   filesystem liststatus symlinkdir
// read paths from each symlink file.
for  filestatus symlink   symlinks
bufferedreader reader
new bufferedreader
new inputstreamreader
filesystem open symlink getpath
string line
while   line   reader readline       null
targetpaths add new path line
symlinkpaths add symlink getpath
/**
* for backward compatibility with hadoop 0.17.
*/
public void validateinput jobconf job  throws ioexception
// do nothing
@override
public contentsummary getcontentsummary path p  jobconf job
throws ioexception
//length, file count, directory count
long summary    0  0  0
list<path> targetpaths   new arraylist<path>
list<path> symlinkpaths   new arraylist<path>
try
gettargetpathsfromsymlinksdirs
job
new path p
targetpaths
symlinkpaths
catch  exception e
throw new ioexception
e
for path path   targetpaths
filesystem fs   path getfilesystem job
contentsummary cs   fs getcontentsummary path
summary    cs getlength
summary    cs getfilecount
summary    cs getdirectorycount
return new contentsummary summary  summary  summary