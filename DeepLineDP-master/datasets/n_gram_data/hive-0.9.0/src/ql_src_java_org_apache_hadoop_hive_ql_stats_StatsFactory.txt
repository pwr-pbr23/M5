/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql stats
import java io serializable
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop conf configuration
import org apache hadoop hive common javautils
import org apache hadoop hive conf hiveconf
import org apache hadoop util reflectionutils
/**
* a factory of stats publisher and aggregator implementations of the
* statspublisher and statsaggregator interfaces.
*/
public final class statsfactory
static final private log log   logfactory getlog statsfactory class getname
private static class <? extends serializable> publisherimplementation
private static class <? extends serializable> aggregatorimplementation
private static configuration jobconf
/**
* sets the paths of the implementation classes of publishing
* and aggregation (istatspublisher and istatsaggregator interfaces).
* the paths are determined according to a configuration parameter which
* is passed as the user input for choosing the implementation as mysql, hbase, ...
*/
public static boolean setimplementation string configurationparam  configuration conf
classloader classloader   javautils getclassloader
if  configurationparam equals statssetupconst hbase_impl_class_val
// case: hbase
try
publisherimplementation    class<? extends serializable>
class forname    true  classloader
aggregatorimplementation    class<? extends serializable>
class forname    true  classloader
catch  classnotfoundexception e
log error    e
return false
else if  configurationparam contains statssetupconst jdbc_impl_class_val
// case: jdbc:mysql or jdbc:derby
try
publisherimplementation    class<? extends serializable>
class forname    true  classloader
aggregatorimplementation    class<? extends serializable>
class forname    true  classloader
catch  classnotfoundexception e
log error    e
return false
else
// try default stats publisher/aggregator
string defpublisher   hiveconf getvar conf  hiveconf confvars hive_stats_default_publisher
string defaggregator   hiveconf getvar conf   hiveconf confvars hive_stats_default_aggregator
// error no default publisher/aggregator is defined
if  defpublisher    null    defaggregator    null
return false
try
publisherimplementation    class<? extends serializable>
class forname defpublisher  true  classloader
aggregatorimplementation    class<? extends serializable>
class forname defaggregator  true  classloader
catch  classnotfoundexception e
log error    e
return false
jobconf   conf
return true
/**
* returns a stats publisher implementation class for the istatspublisher interface
* for example hbasestatspublisher for the hbase implementation
*/
public static statspublisher getstatspublisher
return  statspublisher  reflectionutils newinstance publisherimplementation  jobconf
/**
* returns a stats aggregator implementation class for the istatsaggregator interface
* for example hbasestatsaggregator for the hbase implementation
*/
public static statsaggregator getstatsaggregator
return  statsaggregator  reflectionutils newinstance aggregatorimplementation  jobconf