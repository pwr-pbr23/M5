/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql stats jdbc
import java sql connection
import java sql drivermanager
import java sql preparedstatement
import java sql resultset
import java sql sqlexception
import java sql sqlrecoverableexception
import java util hashmap
import java util map
import java util random
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop conf configuration
import org apache hadoop hive conf hiveconf
import org apache hadoop hive ql exec utilities
import org apache hadoop hive ql stats statsaggregator
public class jdbcstatsaggregator implements statsaggregator
private connection conn
private string connectionstring
private configuration hiveconf
private final map<string  preparedstatement> columnmapping
private final log log   logfactory getlog this getclass   getname
private int timeout   30
private final string comment       this getclass   getname
private int maxretries  waitwindow
private final random r
public jdbcstatsaggregator
columnmapping   new hashmap<string  preparedstatement>
r   new random
@override
public boolean connect configuration hiveconf
this hiveconf   hiveconf
timeout   hiveconf getintvar hiveconf  hiveconf confvars hive_stats_jdbc_timeout
connectionstring   hiveconf getvar hiveconf  hiveconf confvars hivestatsdbconnectionstring
string driver   hiveconf getvar hiveconf  hiveconf confvars hivestatsjdbcdriver
maxretries   hiveconf getintvar hiveconf  hiveconf confvars hive_stats_retries_max
waitwindow   hiveconf getintvar hiveconf  hiveconf confvars hive_stats_retries_wait
try
class forname driver  newinstance
catch  exception e
log error     driver      e
return false
// stats is non-blocking -- throw an exception when timeout
drivermanager setlogintimeout timeout
// function pointer for executewithretry to setquerytimeout
utilities sqlcommand<void> setquerytimeout   new utilities sqlcommand<void>
@override
public void run preparedstatement stmt  throws sqlexception
stmt setquerytimeout timeout
return null
// retry connection and statement preparations
for  int failures   0   failures
try
conn   utilities connectwithretry connectionstring  waitwindow  maxretries
for  string stattype   jdbcstatsutils getsupportedstatistics
// prepare statements
preparedstatement selstmt   utilities preparewithretry conn
jdbcstatsutils getselectaggr stattype  comment   waitwindow  maxretries
columnmapping put stattype  selstmt
// set query timeout
utilities executewithretry setquerytimeout  selstmt  waitwindow  failures
return true
catch  sqlrecoverableexception e
if  failures > maxretries
log error     e
return false
long waittime   utilities getrandomwaittime waitwindow  failures  r
try
thread sleep waittime
catch  interruptedexception e1
catch  sqlexception e
// for sqltransientexception (maxretries already achieved at utilities retry functions
// or sqlnontransientexception, declare a real failure
return false
@override
public string aggregatestats string fileid  string stattype
if   jdbcstatsutils isvalidstatistic stattype
log warn     stattype
jdbcstatsutils getsupportedstatistics
return null
utilities sqlcommand<resultset> execquery   new utilities sqlcommand<resultset>
@override
public resultset run preparedstatement stmt  throws sqlexception
return stmt executequery
string keyprefix   utilities escapesqllike fileid
for  int failures   0   failures
try
long retval   0
preparedstatement selstmt   columnmapping get stattype
selstmt setstring 1  keyprefix
selstmt setstring 2  character tostring utilities sqlescapechar
resultset result   utilities executewithretry execquery  selstmt  waitwindow  maxretries
if  result next
retval   result getlong 1
else
log warn
return null
return long tostring retval
catch  sqlrecoverableexception e
// need to start from scratch (connection)
if  failures >  maxretries
return null
// close the current connection
closeconnection
long waittime   utilities getrandomwaittime waitwindow  failures  r
try
thread sleep waittime
catch  interruptedexception iex
// getting a new connection
if   connect hiveconf
// if cannot reconnect, just fail because connect() already handles retries.
log error     e
return null
catch  sqlexception e
// for sqltransientexception (already handled by utilities.*withretries() functions
// and sqlnontransientexception, just declare failure.
log error     e
return null
@override
public boolean closeconnection
if  conn    null
return true
try
conn close
// in case of derby, explicitly close the database connection
if  hiveconf getvar hiveconf  hiveconf confvars hivestatsdbclass  equalsignorecase
try
// the following closes the derby connection. it throws an exception that has to be caught
// and ignored.
drivermanager getconnection connectionstring
catch  exception e
// do nothing because we know that an exception is thrown anyway.
return true
catch  sqlexception e
log error     e
return false
@override
public boolean cleanup string rowid
utilities sqlcommand<void> execupdate   new utilities sqlcommand<void>
@override
public void run preparedstatement stmt  throws sqlexception
stmt executeupdate
return null
try
string keyprefix   utilities escapesqllike rowid
preparedstatement delstmt   utilities preparewithretry conn
jdbcstatsutils getdeleteaggr rowid  comment   waitwindow  maxretries
delstmt setstring 1  keyprefix
delstmt setstring 2  character tostring utilities sqlescapechar
for  int failures   0   failures
try
utilities executewithretry execupdate  delstmt  waitwindow  maxretries
return true
catch  sqlrecoverableexception e
// need to start from scratch (connection)
if  failures >  maxretries
return false
// close the current connection
closeconnection
long waittime   utilities getrandomwaittime waitwindow  failures  r
try
thread sleep waittime
catch  interruptedexception iex
// getting a new connection
if   connect hiveconf
log error     e
return false
catch  sqlexception e
// for sqltransientexception (already handled by utilities.*withretries() functions
// and sqlnontransientexception, just declare failure.
log error     e
return false
catch  sqlexception e
log error     e
return false