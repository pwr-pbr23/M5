/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql optimizer index
import java io ioexception
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop hive conf hiveconf
import org apache hadoop hive ql context
import org apache hadoop hive ql parse astnode
import org apache hadoop hive ql parse basesemanticanalyzer
import org apache hadoop hive ql parse parsecontext
import org apache hadoop hive ql parse parsedriver
import org apache hadoop hive ql parse parseexception
import org apache hadoop hive ql parse parseutils
import org apache hadoop hive ql parse qb
import org apache hadoop hive ql parse semanticanalyzer
import org apache hadoop hive ql parse semanticanalyzerfactory
import org apache hadoop hive ql parse semanticexception
/**
* rewriteparsecontextgenerator is a class that offers methods to generate operator tree
* for input queries. it is implemented on lines of the analyzeinternal(..) method
* of {@link semanticanalyzer} but it creates only the parsecontext for the input query command.
* it does not optimize or generate map-reduce tasks for the input query.
* this can be used when you need to create operator tree for an internal query.
*
*/
public final class rewriteparsecontextgenerator
private static final log log   logfactory getlog rewriteparsecontextgenerator class getname
private rewriteparsecontextgenerator
/**
* parse the input {@link string} command and generate a astnode tree.
* @param conf
* @param command
* @return the parse context
* @throws semanticexception
*/
public static parsecontext generateoperatortree hiveconf conf
string command  throws semanticexception
context ctx
parsecontext subpctx   null
try
ctx   new context conf
parsedriver pd   new parsedriver
astnode tree   pd parse command  ctx
tree   parseutils findrootnonnulltoken tree
basesemanticanalyzer sem   semanticanalyzerfactory get conf  tree
assert sem instanceof semanticanalyzer
dosemanticanalysis  semanticanalyzer  sem  tree  ctx
subpctx     semanticanalyzer  sem  getparsecontext
log info
catch  ioexception e
log error
command       e
log error org apache hadoop util stringutils stringifyexception e
throw new semanticexception e getmessage    e
catch  parseexception e
log error
command       e
log error org apache hadoop util stringutils stringifyexception e
throw new semanticexception e getmessage    e
catch  semanticexception e
log error
command       e
log error org apache hadoop util stringutils stringifyexception e
throw new semanticexception e getmessage    e
return subpctx
/**
* for the input astnode tree, perform a semantic analysis and check metadata
* generate a operator tree and return the {@link parsecontext} instance for the operator tree.
*
* @param ctx
* @param sem
* @param ast
* @return
* @throws semanticexception
*/
private static void dosemanticanalysis semanticanalyzer sem
astnode ast  context ctx  throws semanticexception
qb qb   new qb null  null  false
astnode child   ast
parsecontext subpctx     semanticanalyzer  sem  getparsecontext
subpctx setcontext ctx
semanticanalyzer  sem  init subpctx
log info
sem dophase1 child  qb  sem initphase1ctx
log info
sem getmetadata qb
log info
log info     ast tostringtree
sem genplan qb
log info