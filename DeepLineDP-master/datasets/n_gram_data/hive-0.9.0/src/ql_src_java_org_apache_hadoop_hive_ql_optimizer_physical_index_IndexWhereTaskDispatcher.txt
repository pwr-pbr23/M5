/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql optimizer physical index
import java io serializable
import java util arraylist
import java util collection
import java util hashmap
import java util linkedhashmap
import java util list
import java util map
import java util stack
import org apache hadoop hive metastore api index
import org apache hadoop hive ql exec task
import org apache hadoop hive ql index bitmap bitmapindexhandler
import org apache hadoop hive ql index compact compactindexhandler
import org apache hadoop hive ql lib defaultgraphwalker
import org apache hadoop hive ql lib defaultruledispatcher
import org apache hadoop hive ql lib dispatcher
import org apache hadoop hive ql lib graphwalker
import org apache hadoop hive ql lib node
import org apache hadoop hive ql lib nodeprocessor
import org apache hadoop hive ql lib nodeprocessorctx
import org apache hadoop hive ql lib rule
import org apache hadoop hive ql lib ruleregexp
import org apache hadoop hive ql metadata table
import org apache hadoop hive ql optimizer indexutils
import org apache hadoop hive ql optimizer physical physicalcontext
import org apache hadoop hive ql parse parsecontext
import org apache hadoop hive ql parse semanticexception
import org apache hadoop hive ql plan mapredwork
/**
*
* indexwheretaskdispatcher.  walks a task tree, and for the right kind of task,
* walks the operator tree to create an index subquery.  then attaches the
* subquery task to the task tree.
*
*/
public class indexwheretaskdispatcher implements dispatcher
private final physicalcontext physicalcontext
public indexwheretaskdispatcher physicalcontext context
super
physicalcontext   context
@override
public object dispatch node nd  stack<node> stack  object    nodeoutputs
throws semanticexception
task<? extends serializable> task    task<? extends serializable>  nd
parsecontext pctx   physicalcontext getparsecontext
// create the regex's so the walker can recognize our where queries
map<rule  nodeprocessor> operatorrules   createoperatorrules pctx
// check for no indexes on any table
if  operatorrules    null
return null
// create context so the walker can carry the current task with it.
indexwhereprocctx indexwhereoptimizectx   new indexwhereprocctx task  pctx
// create the dispatcher, which fires the processor according to the rule that
// best matches
dispatcher dispatcher   new defaultruledispatcher getdefaultprocessor
operatorrules
indexwhereoptimizectx
// walk the mapper operator(not task) tree for each specific task
graphwalker ogw   new defaultgraphwalker dispatcher
arraylist<node> topnodes   new arraylist<node>
if  task getwork   instanceof mapredwork
topnodes addall   mapredwork task getwork    getaliastowork   values
else
return null
ogw startwalking topnodes  null
return null
/**
* create a set of rules that only matches where predicates on columns we have
* an index on.
* @return
*/
private map<rule  nodeprocessor> createoperatorrules parsecontext pctx  throws semanticexception
map<rule  nodeprocessor> operatorrules   new linkedhashmap<rule  nodeprocessor>
list<string> supportedindexes   new arraylist<string>
supportedindexes add compactindexhandler class getname
supportedindexes add bitmapindexhandler class getname
// query the metastore to know what columns we have indexed
collection<table> toptables   pctx gettoptotable   values
map<table  list<index>> indexes   new hashmap<table  list<index>>
for  table tbl   toptables
list<index> tblindexes   indexutils getindexes tbl  supportedindexes
if  tblindexes size   > 0
indexes put tbl  tblindexes
// quit if our tables don't have any indexes
if  indexes size      0
return null
// we set the pushed predicate from the where clause as the filter expr on
// all table scan operators, so we look for table scan operators(ts%)
operatorrules put new ruleregexp        new indexwhereprocessor indexes
return operatorrules
private nodeprocessor getdefaultprocessor
return new nodeprocessor
@override
public object process node nd  stack<node> stack  nodeprocessorctx procctx
object    nodeoutputs  throws semanticexception
return null