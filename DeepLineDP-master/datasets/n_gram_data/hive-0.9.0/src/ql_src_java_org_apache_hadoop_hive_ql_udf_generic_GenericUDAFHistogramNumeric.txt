/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql udf generic
import java util arraylist
import java util list
import java util random
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop hive ql exec description
import org apache hadoop hive ql exec udfargumenttypeexception
import org apache hadoop hive ql metadata hiveexception
import org apache hadoop hive ql parse semanticexception
import org apache hadoop hive serde2 io doublewritable
import org apache hadoop hive serde2 objectinspector objectinspector
import org apache hadoop hive serde2 objectinspector objectinspectorfactory
import org apache hadoop hive serde2 objectinspector primitiveobjectinspector
import org apache hadoop hive serde2 objectinspector standardmapobjectinspector
import org apache hadoop hive serde2 objectinspector standardlistobjectinspector
import org apache hadoop hive serde2 objectinspector structobjectinspector
import org apache hadoop hive serde2 objectinspector structfield
import org apache hadoop hive serde2 objectinspector primitive doubleobjectinspector
import org apache hadoop hive serde2 objectinspector primitive writabledoubleobjectinspector
import org apache hadoop hive serde2 objectinspector primitive primitiveobjectinspectorfactory
import org apache hadoop hive serde2 objectinspector primitive primitiveobjectinspectorutils
import org apache hadoop hive serde2 typeinfo primitivetypeinfo
import org apache hadoop hive serde2 typeinfo typeinfo
import org apache hadoop util stringutils
/**
* computes an approximate histogram of a numerical column using a user-specified number of bins.
*
* the output is an array of (x,y) pairs as hive struct objects that represents the histogram's
* bin centers and heights.
*/
@description name
value
extended
x  y  x  y  x  y
public class genericudafhistogramnumeric extends abstractgenericudafresolver
// class static variables
static final log log   logfactory getlog genericudafhistogramnumeric class getname
@override
public genericudafevaluator getevaluator typeinfo parameters  throws semanticexception
if  parameters length    2
throw new udfargumenttypeexception parameters length   1
// validate the first parameter, which is the expression to compute over
if  parameters getcategory      objectinspector category primitive
throw new udfargumenttypeexception 0
parameters gettypename
switch    primitivetypeinfo  parameters  getprimitivecategory
case byte
case short
case int
case long
case float
case double
case timestamp
break
case string
case boolean
default
throw new udfargumenttypeexception 0
parameters gettypename
// validate the second parameter, which is the number of histogram bins
if  parameters getcategory      objectinspector category primitive
throw new udfargumenttypeexception 1
parameters gettypename
if    primitivetypeinfo  parameters  getprimitivecategory
primitiveobjectinspector primitivecategory int
throw new udfargumenttypeexception 1
parameters gettypename
return new genericudafhistogramnumericevaluator
/**
* construct a histogram using an algorithm described by ben-haim and tom-tov.
*
* the algorithm is a heuristic adapted from the following paper:
* yael ben-haim and elad tom-tov, "a streaming parallel decision tree algorithm",
* j. machine learning research 11 (2010), pp. 849--872. although there are no approximation
* guarantees, it appears to work well with adequate data and a large (e.g., 20-80) number
* of histogram bins.
*/
public static class genericudafhistogramnumericevaluator extends genericudafevaluator
// for partial1 and complete: objectinspectors for original data
private primitiveobjectinspector inputoi
private primitiveobjectinspector nbinsoi
// for partial2 and final: objectinspectors for partial aggregations (list of doubles)
private standardlistobjectinspector loi
@override
public objectinspector init mode m  objectinspector parameters  throws hiveexception
super init m  parameters
// init input object inspectors
if  m    mode partial1    m    mode complete
assert parameters length    2
inputoi    primitiveobjectinspector  parameters
nbinsoi    primitiveobjectinspector  parameters
else
loi    standardlistobjectinspector  parameters
// init output object inspectors
if  m    mode partial1    m    mode partial2
// the output of a partial aggregation is a list of doubles representing the
// histogram being constructed. the first element in the list is the user-specified
// number of bins in the histogram, and the histogram itself is represented as (x,y)
// pairs following the first element, so the list length should *always* be odd.
return objectinspectorfactory getstandardlistobjectinspector
primitiveobjectinspectorfactory writabledoubleobjectinspector
else
// the output of final and complete is a full aggregation, which is a
// list of doublewritable structs that represent the final histogram as
// (x,y) pairs of bin centers and heights.
arraylist<objectinspector> foi   new arraylist<objectinspector>
foi add primitiveobjectinspectorfactory writabledoubleobjectinspector
foi add primitiveobjectinspectorfactory writabledoubleobjectinspector
arraylist<string> fname   new arraylist<string>
fname add
fname add
return objectinspectorfactory getstandardlistobjectinspector
objectinspectorfactory getstandardstructobjectinspector fname  foi
@override
public object terminatepartial aggregationbuffer agg  throws hiveexception
// return a single arraylist where the first element is the number of histogram bins,
// and subsequent elements represent histogram (x,y) pairs.
stdagg myagg    stdagg  agg
return myagg histogram serialize
@override
public object terminate aggregationbuffer agg  throws hiveexception
stdagg myagg    stdagg  agg
if  myagg histogram getusedbins   < 1       sql standard   return null for zero elements
return null
else
arraylist<doublewritable> result   new arraylist<doublewritable>
for int i   0  i < myagg histogram getusedbins    i
doublewritable bin   new doublewritable
bin   new doublewritable myagg histogram getbin i  x
bin   new doublewritable myagg histogram getbin i  y
result add bin
return result
@override
public void merge aggregationbuffer agg  object partial  throws hiveexception
if partial    null
return
list<doublewritable> partialhistogram    list<doublewritable>  loi getlist partial
stdagg myagg    stdagg  agg
myagg histogram merge partialhistogram
@override
public void iterate aggregationbuffer agg  object parameters  throws hiveexception
assert  parameters length    2
if parameters    null    parameters    null
return
stdagg myagg    stdagg  agg
// parse out the number of histogram bins only once, if we haven't already done
// so before. we need at least 2 bins; otherwise, there is no point in creating
// a histogram.
if  myagg histogram isready
int nbins   primitiveobjectinspectorutils getint parameters  nbinsoi
if nbins < 2
throw new hiveexception getclass   getsimplename
nbins
// allocate memory for the histogram bins
myagg histogram allocate nbins
// process the current data point
double v   primitiveobjectinspectorutils getdouble parameters  inputoi
myagg histogram add v
// aggregation buffer definition and manipulation methods
static class stdagg implements aggregationbuffer
numerichistogram histogram     the histogram object
@override
public aggregationbuffer getnewaggregationbuffer   throws hiveexception
stdagg result   new stdagg
reset result
return result
@override
public void reset aggregationbuffer agg  throws hiveexception
stdagg myagg    stdagg  agg
myagg histogram   new numerichistogram
myagg histogram reset