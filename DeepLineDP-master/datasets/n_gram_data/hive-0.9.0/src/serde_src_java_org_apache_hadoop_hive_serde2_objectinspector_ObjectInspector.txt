/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive serde2 objectinspector
/**
* objectinspector helps us to look into the internal structure of a complex
* object.
*
* a (probably configured) objectinspector instance stands for a specific type
* and a specific way to store the data of that type in the memory.
*
* for native java object, we can directly access the internal structure through
* member fields and methods. objectinspector is a way to delegate that
* functionality away from the object, so that we have more control on the
* behavior of those actions.
*
* an efficient implementation of objectinspector should rely on factory, so
* that we can make sure the same objectinspector only has one instance. that
* also makes sure hashcode() and equals() methods of java.lang.object directly
* works for objectinspector as well.
*/
public interface objectinspector extends cloneable
/**
* category.
*
*/
public static enum category
primitive  list  map  struct  union
/**
* returns the name of the data type that is inspected by this
* objectinspector. this is used to display the type information to the user.
*
* for primitive types, the type name is standardized. for other types, the
* type name can be something like "list<int>", "map<int,string>", java class
* names, or user-defined type names similar to typedef.
*/
string gettypename
/**
* an objectinspector must inherit from one of the following interfaces if
* getcategory() returns: primitive: primitiveobjectinspector list:
* listobjectinspector map: mapobjectinspector struct: structobjectinspector.
*/
category getcategory