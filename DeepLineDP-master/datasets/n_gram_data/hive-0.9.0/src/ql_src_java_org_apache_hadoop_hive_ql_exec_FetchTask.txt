/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql exec
import java io ioexception
import java io serializable
import java util arraylist
import java util properties
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop hive common javautils
import org apache hadoop hive conf hiveconf
import org apache hadoop hive ql commandneedretryexception
import org apache hadoop hive ql context
import org apache hadoop hive ql drivercontext
import org apache hadoop hive ql queryplan
import org apache hadoop hive ql metadata hiveexception
import org apache hadoop hive ql plan fetchwork
import org apache hadoop hive ql plan tabledesc
import org apache hadoop hive ql plan api stagetype
import org apache hadoop hive serde constants
import org apache hadoop hive serde2 delimitedjsonserde
import org apache hadoop hive serde2 serde
import org apache hadoop hive serde2 objectinspector inspectableobject
import org apache hadoop io text
import org apache hadoop mapred jobconf
import org apache hadoop util reflectionutils
import org apache hadoop util stringutils
/**
* fetchtask implementation.
**/
public class fetchtask extends task<fetchwork> implements serializable
private static final long serialversionuid   1l
private int maxrows   100
private fetchoperator ftop
private serde mserde
private int totalrows
private static transient final log log   logfactory getlog fetchtask class
public fetchtask
super
@override
public void initialize hiveconf conf  queryplan queryplan  drivercontext ctx
super initialize conf  queryplan  ctx
try
// create a file system handle
jobconf job   new jobconf conf  execdriver class
string serdename   hiveconf getvar conf  hiveconf confvars hivefetchoutputserde
class<? extends serde> serdeclass   class forname serdename  true
javautils getclassloader    assubclass serde class
// cast only needed for hadoop 0.17 compatibility
mserde    serde  reflectionutils newinstance serdeclass  null
properties serdeprop   new properties
// this is the default serialization format
if  mserde instanceof delimitedjsonserde
serdeprop put constants serialization_format      utilities tabcode
serdeprop put constants serialization_null_format  work getserializationnullformat
mserde initialize job  serdeprop
ftop   new fetchoperator work  job
catch  exception e
// bail out ungracefully - we should never hit
// this here - but would have hit it in semanticanalyzer
log error stringutils stringifyexception e
throw new runtimeexception e
@override
public int execute drivercontext drivercontext
assert false
return 0
/**
* return the tabledesc of the fetchwork.
*/
public tabledesc gettbldesc
return work gettbldesc
/**
* return the maximum number of rows returned by fetch.
*/
public int getmaxrows
return maxrows
/**
* set the maximum number of rows returned by fetch.
*/
public void setmaxrows int maxrows
this maxrows   maxrows
@override
public boolean fetch arraylist<string> res  throws ioexception  commandneedretryexception
try
int numrows   0
int rowsret   maxrows
if  work getleastnumrows   > 0
if  totalrows    work getleastnumrows
return false
for  int i   0  i < work getleastnumrows    i
inspectableobject io   ftop getnextrow
if  io    null
throw new commandneedretryexception
res add   text  mserde serialize io o  io oi   tostring
numrows
totalrows   work getleastnumrows
return true
if   work getlimit   >  0       work getlimit     totalrows  < rowsret
rowsret   work getlimit     totalrows
if  rowsret <  0
ftop clearfetchcontext
return false
while  numrows < rowsret
inspectableobject io   ftop getnextrow
if  io    null
if  numrows    0
return false
totalrows    numrows
return true
res add   text  mserde serialize io o  io oi   tostring
numrows
totalrows    numrows
return true
catch  commandneedretryexception e
throw e
catch  ioexception e
throw e
catch  exception e
throw new ioexception e
@override
public stagetype gettype
return stagetype fetch
@override
public string getname
return
@override
protected void localizemrtmpfilesimpl context ctx
string s   work gettbldir
if   s    null     ctx ismrtmpfileuri s
work settbldir ctx localizemrtmpfileuri s
arraylist<string> ls   work getpartdir
if  ls    null
ctx localizepaths ls
/**
* clear the fetch operator.
*
* @throws hiveexception
*/
public void clearfetch   throws hiveexception
if  null    ftop
ftop clearfetchcontext