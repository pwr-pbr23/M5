/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql exec
import java util arraylist
import java util list
import org apache hadoop conf configuration
import org apache hadoop hive ql metadata hiveexception
import org apache hadoop hive ql plan lateralviewjoindesc
import org apache hadoop hive ql plan api operatortype
import org apache hadoop hive serde2 objectinspector objectinspector
import org apache hadoop hive serde2 objectinspector objectinspectorfactory
import org apache hadoop hive serde2 objectinspector structfield
import org apache hadoop hive serde2 objectinspector structobjectinspector
/**
* the lateral view join operator is used for from src lateral view udtf()...
* this operator was implemented with the following operator dag in mind.
*
* for a query such as
*
* select pageid, adid.* from example_table lateral view explode(adid_list) as
* adid
*
* the top of the operator dag will look similar to
*
*            [table scan]
*                |
*       [lateral view forward]
*              /   \
*   [select](*)    [select](adid_list)
*            |      |
*            |     [udtf] (explode)
*            \     /
*      [lateral view join]
*               |
*               |
*      [select] (pageid, adid.*)
*               |
*              ....
*
* rows from the table scan operator are first to a lateral view forward
* operator that just forwards the row and marks the start of a lv. the
* select operator on the left picks all the columns while the select operator
* on the right picks only the columns needed by the udtf.
*
* the output of select in the left branch and output of the udtf in the right
* branch are then sent to the lateral view join (lvj). in most cases, the udtf
* will generate > 1 row for every row received from the ts, while the left
* select operator will generate only one. for each row output from the ts, the
* lvj outputs all possible rows that can be created by joining the row from the
* left select and one of the rows output from the udtf.
*
* additional lateral views can be supported by adding a similar dag after the
* previous lvj operator.
*/
public class lateralviewjoinoperator extends operator<lateralviewjoindesc>
private static final long serialversionuid   1l
// the expected tags from the parent operators. see processop() before
// changing the tags.
static final int select_tag   0
static final int udtf_tag   1
@override
protected void initializeop configuration hconf  throws hiveexception
arraylist<objectinspector> ois   new arraylist<objectinspector>
arraylist<string> fieldnames   conf getoutputinternalcolnames
// the output of the lateral view join will be the columns from the select
// parent, followed by the column from the udtf parent
structobjectinspector soi    structobjectinspector  inputobjinspectors
list<? extends structfield> sfs   soi getallstructfieldrefs
for  structfield sf   sfs
ois add sf getfieldobjectinspector
soi    structobjectinspector  inputobjinspectors
sfs   soi getallstructfieldrefs
for  structfield sf   sfs
ois add sf getfieldobjectinspector
outputobjinspector   objectinspectorfactory
getstandardstructobjectinspector fieldnames  ois
// initialize the rest of the operator dag
super initializeop hconf
// acc is short for accumulator. it's used to build the row before forwarding
arraylist<object> acc   new arraylist<object>
// selectobjs hold the row from the select op, until receiving a row from
// the udtf op
arraylist<object> selectobjs   new arraylist<object>
/**
* an important assumption for processop() is that for a given row from the
* ts, the lvj will first get the row from the left select operator, followed
* by all the corresponding rows from the udtf operator. and so on.
*/
@override
public void processop object row  int tag  throws hiveexception
structobjectinspector soi    structobjectinspector  inputobjinspectors
if  tag    select_tag
selectobjs clear
selectobjs addall soi getstructfieldsdataaslist row
else if  tag    udtf_tag
acc clear
acc addall selectobjs
acc addall soi getstructfieldsdataaslist row
forward acc  outputobjinspector
else
throw new hiveexception
@override
public string getname
return
@override
public operatortype gettype
return operatortype lateralviewjoin