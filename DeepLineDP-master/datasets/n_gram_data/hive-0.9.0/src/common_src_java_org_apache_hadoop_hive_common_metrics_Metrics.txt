/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive common metrics
import java io ioexception
import java lang management managementfactory
import java util hashmap
import javax management mbeanserver
import javax management objectname
/**
* metrics subsystem  - allows exposure of a number of named parameters/counters
*                      via jmx, intended to be used as a static subsystem
*
*                      has a couple of primary ways it can be used:
*                      (i) using the set and get methods to set and get named parameters
*                      (ii) using the incrementcounter method to increment and set named
*                      parameters in one go, rather than having to make a get and then a set.
*                      (iii) using the startscope and endscope methods to start and end
*                      named "scopes" that record the number of times they've been
*                      instantiated and amount of time(in milliseconds) spent inside
*                      the scopes.
*/
public class metrics
/**
* metricsscope : a class that encapsulates an idea of a metered scope.
* instantiating a named scope and then closing it exposes two counters:
*   (i) a "number of calls" counter ( &lt;name&gt;.n ), and
*  (ii) a "number of msecs spent between scope open and close" counter. ( &lt;name&gt;.t)
*/
public class metricsscope
string name   null
boolean isopen   false
long starttime   null
string numcounter   null
string timecounter   null
string avgtimecounter   null
//disable default ctor - so that it can't be created without a name
@suppresswarnings
private metricsscope
/**
* instantiates a named scope - intended to only be called by metrics, so locally scoped.
* @param name - name of the variable
* @throws ioexception
*/
metricsscope string name  throws ioexception
this name   name
this numcounter   name
this timecounter   name
this avgtimecounter   name
open
/**
* opens scope, and makes note of the time started, increments run counter
* @throws ioexception
*
*/
public void open   throws ioexception
if   isopen
isopen   true
starttime   system currenttimemillis
else
throw new ioexception     name
/**
* closes scope, and records the time taken
* @throws ioexception
*/
public void close   throws ioexception
if  isopen
long endtime   system currenttimemillis
synchronized metrics
long num   metrics incrementcounter numcounter
long time   metrics incrementcounter timecounter  endtime   starttime
if  num    null    time    null
metrics set avgtimecounter  double valueof time doublevalue     num doublevalue
else
throw new ioexception     name
isopen   false
/**
* closes scope if open, and reopens it
* @throws ioexception
*/
public void reopen   throws ioexception
if isopen
close
open
static metricsmbean metrics   new metricsmbeanimpl
static threadlocal<hashmap<string  metricsscope>> threadlocalscopes
new threadlocal<hashmap<string metricsscope>>
@override
protected synchronized hashmap<string metricsscope> initialvalue
return new hashmap<string metricsscope>
static boolean initialized   false
static metrics m   new metrics
public static void init   throws exception
if   initialized
mbeanserver mbs   managementfactory getplatformmbeanserver
objectname oname   new objectname
mbs registermbean metrics  oname
initialized   true
public static long incrementcounter string name  throws ioexception
if   initialized
return null
return incrementcounter name long valueof 1
public static long incrementcounter string name  long increment  throws ioexception
if   initialized
return null
long value
synchronized metrics
if   metrics haskey name
value   long valueof increment
set name  value
else
value     long get name     increment
set name  value
return value
public static void set string name  object value  throws ioexception
if   initialized
return
synchronized metrics
metrics put name value
public static object get string name  throws ioexception
if   initialized
return null
return metrics get name
public static metricsscope startscope string name  throws ioexception
if   initialized
return null
if  threadlocalscopes get   containskey name
threadlocalscopes get   get name  open
else
threadlocalscopes get   put name  m new metricsscope name
return threadlocalscopes get   get name
public static metricsscope getscope string name  throws ioexception
if   initialized
return null
if  threadlocalscopes get   containskey name
return threadlocalscopes get   get name
else
throw new ioexception     name
public static void endscope string name  throws ioexception
if   initialized
return
if  threadlocalscopes get   containskey name
threadlocalscopes get   get name  close