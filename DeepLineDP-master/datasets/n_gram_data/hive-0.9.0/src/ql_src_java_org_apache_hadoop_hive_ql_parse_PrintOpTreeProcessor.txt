/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql parse
import java io printstream
import java io serializable
import java util hashmap
import java util stack
import org apache hadoop hive ql exec operator
import org apache hadoop hive ql lib node
import org apache hadoop hive ql lib nodeprocessor
import org apache hadoop hive ql lib nodeprocessorctx
/**
* printoptreeprocessor.
*
*/
public class printoptreeprocessor implements nodeprocessor
private final printstream out
private final hashmap<operator<? extends serializable>  integer> opmap   new hashmap<operator<? extends serializable>  integer>
private integer curnum   0
public printoptreeprocessor
out   system out
public printoptreeprocessor printstream o
out   o
private string getparents operator<? extends serializable> op
stringbuilder ret   new stringbuilder
boolean first   true
if  op getparentoperators      null
for  operator<? extends serializable> parent   op getparentoperators
if   first
ret append
ret append opmap get parent
first   false
ret append
return ret tostring
private string getchildren operator<? extends serializable> op
stringbuilder ret   new stringbuilder
boolean first   true
if  op getchildoperators      null
for  operator<? extends serializable> child   op getchildoperators
if   first
ret append
ret append opmap get child
first   false
ret append
return ret tostring
public object process node nd  stack<node> stack  nodeprocessorctx ctx
object    nodeoutputs  throws semanticexception
operator<? extends serializable> op    operator<? extends serializable>  nd
if  opmap get op     null
opmap put op  curnum
out println     opmap get op        op getclass   getname
getparents op        getchildren op
if  op getconf      null
return null
return null