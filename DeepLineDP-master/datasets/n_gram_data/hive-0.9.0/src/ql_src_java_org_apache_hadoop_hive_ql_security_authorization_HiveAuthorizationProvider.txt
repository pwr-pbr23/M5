/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql security authorization
import java util list
import org apache hadoop conf configurable
import org apache hadoop conf configuration
import org apache hadoop hive metastore api database
import org apache hadoop hive ql metadata authorizationexception
import org apache hadoop hive ql metadata hiveexception
import org apache hadoop hive ql metadata partition
import org apache hadoop hive ql metadata table
import org apache hadoop hive ql security hiveauthenticationprovider
/**
* hive's pluggable authorization provider interface
*/
public interface hiveauthorizationprovider extends configurable
public void init configuration conf  throws hiveexception
public hiveauthenticationprovider getauthenticator
public void setauthenticator hiveauthenticationprovider authenticator
/**
* authorization user level privileges.
*
* @param readrequiredpriv
*          a list of privileges needed for inputs.
* @param writerequiredpriv
*          a list of privileges needed for outputs.
* @throws hiveexception
* @throws authorizationexception
*/
public void authorize privilege readrequiredpriv
privilege writerequiredpriv  throws hiveexception
authorizationexception
/**
* authorization privileges against a database object.
*
* @param db
*          database
* @param readrequiredpriv
*          a list of privileges needed for inputs.
* @param writerequiredpriv
*          a list of privileges needed for outputs.
* @throws hiveexception
* @throws authorizationexception
*/
public void authorize database db  privilege readrequiredpriv
privilege writerequiredpriv  throws hiveexception
authorizationexception
/**
* authorization privileges against a hive table object.
*
* @param table
*          table object
* @param readrequiredpriv
*          a list of privileges needed for inputs.
* @param writerequiredpriv
*          a list of privileges needed for outputs.
* @throws hiveexception
* @throws authorizationexception
*/
public void authorize table table  privilege readrequiredpriv
privilege writerequiredpriv  throws hiveexception
authorizationexception
/**
* authorization privileges against a hive partition object.
*
* @param part
*          partition object
* @param readrequiredpriv
*          a list of privileges needed for inputs.
* @param writerequiredpriv
*          a list of privileges needed for outputs.
* @throws hiveexception
* @throws authorizationexception
*/
public void authorize partition part  privilege readrequiredpriv
privilege writerequiredpriv  throws hiveexception
authorizationexception
/**
* authorization privileges against a list of columns. if the partition object
* is not null, look at the column grants for the given partition. otherwise
* look at the table column grants.
*
* @param table
*          table object
* @param part
*          partition object
* @param columns
*          a list of columns
* @param readrequiredpriv
*          a list of privileges needed for inputs.
* @param writerequiredpriv
*          a list of privileges needed for outputs.
* @throws hiveexception
* @throws authorizationexception
*/
public void authorize table table  partition part  list<string> columns
privilege readrequiredpriv  privilege writerequiredpriv
throws hiveexception  authorizationexception