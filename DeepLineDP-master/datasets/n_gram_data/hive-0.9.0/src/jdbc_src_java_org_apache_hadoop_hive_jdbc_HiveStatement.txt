/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive jdbc
import java sql connection
import java sql resultset
import java sql sqlexception
import java sql sqlwarning
import org apache hadoop hive service hiveinterface
import org apache hadoop hive service hiveserverexception
/**
* hivestatement.
*
*/
public class hivestatement implements java sql statement
private hiveinterface client
private int fetchsize   50
/**
* we need to keep a reference to the result set to support the following:
* <code>
* statement.execute(string sql);
* statement.getresultset();
* </code>.
*/
private resultset resultset   null
/**
* the maximum number of rows this statement should return (0 => all rows).
*/
private int maxrows   0
/**
* add sqlwarnings to the warningchain if needed.
*/
private sqlwarning warningchain   null
/**
* keep state so we can fail certain calls made after close().
*/
private boolean isclosed   false
/**
*
*/
public hivestatement hiveinterface client
this client   client
/*
* (non-javadoc)
*
* @see java.sql.statement#addbatch(java.lang.string)
*/
public void addbatch string sql  throws sqlexception
throw new sqlexception
/*
* (non-javadoc)
*
* @see java.sql.statement#cancel()
*/
public void cancel   throws sqlexception
throw new sqlexception
/*
* (non-javadoc)
*
* @see java.sql.statement#clearbatch()
*/
public void clearbatch   throws sqlexception
throw new sqlexception
/*
* (non-javadoc)
*
* @see java.sql.statement#clearwarnings()
*/
public void clearwarnings   throws sqlexception
warningchain   null
/*
* (non-javadoc)
*
* @see java.sql.statement#close()
*/
public void close   throws sqlexception
client   null
resultset   null
isclosed   true
/*
* (non-javadoc)
*
* @see java.sql.statement#execute(java.lang.string)
*/
public boolean execute string sql  throws sqlexception
resultset rs   executequery sql
// todo: this should really check if there are results, but there's no easy
// way to do that without calling rs.next();
return rs    null
/*
* (non-javadoc)
*
* @see java.sql.statement#execute(java.lang.string, int)
*/
public boolean execute string sql  int autogeneratedkeys  throws sqlexception
throw new sqlexception
/*
* (non-javadoc)
*
* @see java.sql.statement#execute(java.lang.string, int[])
*/
public boolean execute string sql  int columnindexes  throws sqlexception
throw new sqlexception
/*
* (non-javadoc)
*
* @see java.sql.statement#execute(java.lang.string, java.lang.string[])
*/
public boolean execute string sql  string columnnames  throws sqlexception
throw new sqlexception
/*
* (non-javadoc)
*
* @see java.sql.statement#executebatch()
*/
public int executebatch   throws sqlexception
throw new sqlexception
/*
* (non-javadoc)
*
* @see java.sql.statement#executequery(java.lang.string)
*/
public resultset executequery string sql  throws sqlexception
if  isclosed
throw new sqlexception
try
resultset   null
client execute sql
catch  hiveserverexception e
throw new sqlexception e getmessage    e getsqlstate    e geterrorcode
catch  exception ex
throw new sqlexception ex tostring
resultset   new hivequeryresultset client  maxrows
resultset setfetchsize fetchsize
return resultset
/*
* (non-javadoc)
*
* @see java.sql.statement#executeupdate(java.lang.string)
*/
public int executeupdate string sql  throws sqlexception
try
client execute sql
catch  exception ex
throw new sqlexception ex tostring
throw new sqlexception
/*
* (non-javadoc)
*
* @see java.sql.statement#executeupdate(java.lang.string, int)
*/
public int executeupdate string sql  int autogeneratedkeys  throws sqlexception
throw new sqlexception
/*
* (non-javadoc)
*
* @see java.sql.statement#executeupdate(java.lang.string, int[])
*/
public int executeupdate string sql  int columnindexes  throws sqlexception
throw new sqlexception
/*
* (non-javadoc)
*
* @see java.sql.statement#executeupdate(java.lang.string, java.lang.string[])
*/
public int executeupdate string sql  string columnnames  throws sqlexception
throw new sqlexception
/*
* (non-javadoc)
*
* @see java.sql.statement#getconnection()
*/
public connection getconnection   throws sqlexception
throw new sqlexception
/*
* (non-javadoc)
*
* @see java.sql.statement#getfetchdirection()
*/
public int getfetchdirection   throws sqlexception
throw new sqlexception
/*
* (non-javadoc)
*
* @see java.sql.statement#getfetchsize()
*/
public int getfetchsize   throws sqlexception
return fetchsize
/*
* (non-javadoc)
*
* @see java.sql.statement#getgeneratedkeys()
*/
public resultset getgeneratedkeys   throws sqlexception
throw new sqlexception
/*
* (non-javadoc)
*
* @see java.sql.statement#getmaxfieldsize()
*/
public int getmaxfieldsize   throws sqlexception
throw new sqlexception
/*
* (non-javadoc)
*
* @see java.sql.statement#getmaxrows()
*/
public int getmaxrows   throws sqlexception
return maxrows
/*
* (non-javadoc)
*
* @see java.sql.statement#getmoreresults()
*/
public boolean getmoreresults   throws sqlexception
throw new sqlexception
/*
* (non-javadoc)
*
* @see java.sql.statement#getmoreresults(int)
*/
public boolean getmoreresults int current  throws sqlexception
throw new sqlexception
/*
* (non-javadoc)
*
* @see java.sql.statement#getquerytimeout()
*/
public int getquerytimeout   throws sqlexception
throw new sqlexception
/*
* (non-javadoc)
*
* @see java.sql.statement#getresultset()
*/
public resultset getresultset   throws sqlexception
return resultset
/*
* (non-javadoc)
*
* @see java.sql.statement#getresultsetconcurrency()
*/
public int getresultsetconcurrency   throws sqlexception
throw new sqlexception
/*
* (non-javadoc)
*
* @see java.sql.statement#getresultsetholdability()
*/
public int getresultsetholdability   throws sqlexception
throw new sqlexception
/*
* (non-javadoc)
*
* @see java.sql.statement#getresultsettype()
*/
public int getresultsettype   throws sqlexception
throw new sqlexception
/*
* (non-javadoc)
*
* @see java.sql.statement#getupdatecount()
*/
public int getupdatecount   throws sqlexception
return 0
/*
* (non-javadoc)
*
* @see java.sql.statement#getwarnings()
*/
public sqlwarning getwarnings   throws sqlexception
return warningchain
/*
* (non-javadoc)
*
* @see java.sql.statement#isclosed()
*/
public boolean isclosed   throws sqlexception
return isclosed
/*
* (non-javadoc)
*
* @see java.sql.statement#ispoolable()
*/
public boolean ispoolable   throws sqlexception
throw new sqlexception
/*
* (non-javadoc)
*
* @see java.sql.statement#setcursorname(java.lang.string)
*/
public void setcursorname string name  throws sqlexception
throw new sqlexception
/*
* (non-javadoc)
*
* @see java.sql.statement#setescapeprocessing(boolean)
*/
public void setescapeprocessing boolean enable  throws sqlexception
throw new sqlexception
/*
* (non-javadoc)
*
* @see java.sql.statement#setfetchdirection(int)
*/
public void setfetchdirection int direction  throws sqlexception
throw new sqlexception
/*
* (non-javadoc)
*
* @see java.sql.statement#setfetchsize(int)
*/
public void setfetchsize int rows  throws sqlexception
fetchsize   rows
/*
* (non-javadoc)
*
* @see java.sql.statement#setmaxfieldsize(int)
*/
public void setmaxfieldsize int max  throws sqlexception
throw new sqlexception
/*
* (non-javadoc)
*
* @see java.sql.statement#setmaxrows(int)
*/
public void setmaxrows int max  throws sqlexception
if  max < 0
throw new sqlexception
maxrows   max
/*
* (non-javadoc)
*
* @see java.sql.statement#setpoolable(boolean)
*/
public void setpoolable boolean poolable  throws sqlexception
throw new sqlexception
/*
* (non-javadoc)
*
* @see java.sql.statement#setquerytimeout(int)
*/
public void setquerytimeout int seconds  throws sqlexception
throw new sqlexception
/*
* (non-javadoc)
*
* @see java.sql.wrapper#iswrapperfor(java.lang.class)
*/
public boolean iswrapperfor class<?> iface  throws sqlexception
throw new sqlexception
/*
* (non-javadoc)
*
* @see java.sql.wrapper#unwrap(java.lang.class)
*/
public <t> t unwrap class<t> iface  throws sqlexception
throw new sqlexception