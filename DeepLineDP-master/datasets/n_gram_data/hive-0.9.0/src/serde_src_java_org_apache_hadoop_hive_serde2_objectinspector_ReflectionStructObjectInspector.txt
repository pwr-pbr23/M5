/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive serde2 objectinspector
import java lang reflect field
import java util arraylist
import java util list
import java util map
import org apache hadoop util reflectionutils
/**
* reflectionstructobjectinspector works on struct data that is stored as a
* native java object. it will drill down into the java class to get the fields
* and construct objectinspectors for the fields, if they are not specified.
*
* always use the objectinspectorfactory to create new objectinspector objects,
* instead of directly creating an instance of this class.
*
*/
public class reflectionstructobjectinspector extends
settablestructobjectinspector
/**
* myfield.
*
*/
public static class myfield implements structfield
protected field field
protected objectinspector fieldobjectinspector
public myfield field field  objectinspector fieldobjectinspector
this field   field
this fieldobjectinspector   fieldobjectinspector
public string getfieldname
return field getname   tolowercase
public objectinspector getfieldobjectinspector
return fieldobjectinspector
public string getfieldcomment
return null
@override
public string tostring
return field tostring
class<?> objectclass
list<myfield> fields
public category getcategory
return category struct
public string gettypename
return objectclass getname
/**
* this method is only intended to be used by the utilities class in this
* package. this creates an uninitialized objectinspector so the utilities
* class can put it into a cache before it initializes when it might look up
* the cache for member fields that might be of the same type (e.g. recursive
* type like linked list and trees).
*/
reflectionstructobjectinspector
/**
* this method is only intended to be used by utilities class in this package.
* the reason that this method is not recursive by itself is because we want
* to allow recursive types.
*/
void init class<?> objectclass
list<objectinspector> structfieldobjectinspectors
assert   list class isassignablefrom objectclass
assert   map class isassignablefrom objectclass
this objectclass   objectclass
field reflectionfields   objectinspectorutils
getdeclarednonstaticfields objectclass
fields   new arraylist<myfield> structfieldobjectinspectors size
int used   0
for  int i   0  i < reflectionfields length  i
if   shouldignorefield reflectionfields getname
reflectionfields setaccessible true
fields add new myfield reflectionfields  structfieldobjectinspectors
get used
assert  fields size      structfieldobjectinspectors size
// thriftstructobjectinspector will override and ignore __isset fields.
public boolean shouldignorefield string name
return false
// without data
@override
public structfield getstructfieldref string fieldname
return objectinspectorutils getstandardstructfieldref fieldname  fields
@override
public list<? extends structfield> getallstructfieldrefs
return fields
// with data
@override
public object getstructfielddata object data  structfield fieldref
if  data    null
return null
if    fieldref instanceof myfield
throw new runtimeexception
myfield f    myfield  fieldref
try
object r   f field get data
return r
catch  exception e
throw new runtimeexception     f field
data getclass         data  e
@override
public list<object> getstructfieldsdataaslist object data
if  data    null
return null
try
arraylist<object> result   new arraylist<object> fields size
for  int i   0  i < fields size    i
result add fields get i  field get data
return result
catch  exception e
throw new runtimeexception e
@override
public object create
return reflectionutils newinstance objectclass  null
@override
public object setstructfielddata object struct  structfield field
object fieldvalue
myfield myfield    myfield  field
try
myfield field set struct  fieldvalue
catch  exception e
throw new runtimeexception     myfield field
struct getclass         struct  e
return struct