/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql tools
import java io ioexception
import java util arraylist
import java util linkedhashmap
import java util map
import java util stack
import java util treeset
import org apache hadoop hive ql lib defaultgraphwalker
import org apache hadoop hive ql lib defaultruledispatcher
import org apache hadoop hive ql lib dispatcher
import org apache hadoop hive ql lib graphwalker
import org apache hadoop hive ql lib node
import org apache hadoop hive ql lib nodeprocessor
import org apache hadoop hive ql lib nodeprocessorctx
import org apache hadoop hive ql lib rule
import org apache hadoop hive ql parse astnode
import org apache hadoop hive ql parse basesemanticanalyzer
import org apache hadoop hive ql parse hiveparser
import org apache hadoop hive ql parse parsedriver
import org apache hadoop hive ql parse parseexception
import org apache hadoop hive ql parse semanticexception
/**
*
* this class prints out the lineage info. it takes sql as input and prints
* lineage info. currently this prints only input and output tables for a given
* sql. later we can expand to add join tables etc.
*
*/
public class lineageinfo implements nodeprocessor
/**
* stores input tables in sql.
*/
treeset<string> inputtablelist   new treeset<string>
/**
* stores output tables in sql.
*/
treeset<string> outputtablelist   new treeset<string>
/**
*
* @return java.util.treeset
*/
public treeset<string> getinputtablelist
return inputtablelist
/**
* @return java.util.treeset
*/
public treeset<string> getoutputtablelist
return outputtablelist
/**
* implements the process method for the nodeprocessor interface.
*/
public object process node nd  stack<node> stack  nodeprocessorctx procctx
object    nodeoutputs  throws semanticexception
astnode pt    astnode  nd
switch  pt gettoken   gettype
case hiveparser tok_tab
outputtablelist add basesemanticanalyzer getunescapedname  astnode pt getchild 0
break
case hiveparser tok_tabref
astnode tabtree    astnode  pt getchild 0
string table_name    tabtree getchildcount      1  ?
basesemanticanalyzer getunescapedname  astnode tabtree getchild 0
basesemanticanalyzer getunescapedname  astnode tabtree getchild 0         tabtree getchild 1
inputtablelist add table_name
break
return null
/**
* parses given query and gets the lineage info.
*
* @param query
* @throws parseexception
*/
public void getlineageinfo string query  throws parseexception
semanticexception
/*
* get the ast tree
*/
parsedriver pd   new parsedriver
astnode tree   pd parse query
while   tree gettoken      null      tree getchildcount   > 0
tree    astnode  tree getchild 0
/*
* initialize event processor and dispatcher.
*/
inputtablelist clear
outputtablelist clear
// create a walker which walks the tree in a dfs manner while maintaining
// the operator stack. the dispatcher
// generates the plan from the operator tree
map<rule  nodeprocessor> rules   new linkedhashmap<rule  nodeprocessor>
// the dispatcher fires the processor corresponding to the closest matching
// rule and passes the context along
dispatcher disp   new defaultruledispatcher this  rules  null
graphwalker ogw   new defaultgraphwalker disp
// create a list of topop nodes
arraylist<node> topnodes   new arraylist<node>
topnodes add tree
ogw startwalking topnodes  null
public static void main string args  throws ioexception  parseexception
semanticexception
string query   args
lineageinfo lep   new lineageinfo
lep getlineageinfo query
for  string tab   lep getinputtablelist
system out println     tab
for  string tab   lep getoutputtablelist
system out println     tab