/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive hbase
import java io ioexception
import java util map
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop conf configuration
import org apache hadoop hbase hbaseconfiguration
import org apache hadoop hbase hcolumndescriptor
import org apache hadoop hbase htabledescriptor
import org apache hadoop hbase client get
import org apache hadoop hbase client hbaseadmin
import org apache hadoop hbase client htable
import org apache hadoop hbase client put
import org apache hadoop hbase client result
import org apache hadoop hbase util bytes
import org apache hadoop hive ql stats statspublisher
/**
* a class that implements the statspublisher interface through hbase.
*/
public class hbasestatspublisher implements statspublisher
private htable htable
private final log log   logfactory getlog this getclass   getname
/**
* does the necessary hbase initializations.
*/
public boolean connect configuration hiveconf
try
htable   new htable hbaseconfiguration create hiveconf
hbasestatssetupconstants part_stat_table_name
// for performance reason, defer update until the closeconnection
htable setautoflush false
catch  ioexception e
log error     e
return false
return true
/**
* writes temporary statistics into hbase;
*/
public boolean publishstat string rowid  map<string  string> stats
// write in hbase
if   hbasestatsutils isvalidstatisticset stats keyset
log warn     stats keyset   tostring
hbasestatsutils getsupportedstatistics
return false
try
// check the basic stat (e.g., row_count)
get get   new get bytes tobytes rowid
result result   htable get get
byte family   hbasestatsutils getfamilyname
byte column   hbasestatsutils getcolumnname hbasestatsutils getbasicstat
long val   long parselong hbasestatsutils getstatfrommap hbasestatsutils getbasicstat
stats
long oldval   0
if   result isempty
oldval   long parselong bytes tostring result getvalue family  column
if  oldval >  val
return true     we do not need to publish anything
// we need to update
put row   new put bytes tobytes rowid
for  string stattype   hbasestatsutils getsupportedstatistics
column   hbasestatsutils getcolumnname stattype
row add family  column  bytes tobytes hbasestatsutils getstatfrommap stattype  stats
htable put row
return true
catch  ioexception e
log error     e
return false
public boolean closeconnection
// batch update
try
htable flushcommits
return true
catch  ioexception e
log error    e
return false
/**
* does the necessary hbase initializations.
*/
public boolean init configuration hiveconf
try
hbaseadmin hbase   new hbaseadmin hbaseconfiguration create hiveconf
// creating table if not exists
if   hbase tableexists hbasestatssetupconstants part_stat_table_name
htabledescriptor table   new htabledescriptor hbasestatssetupconstants part_stat_table_name
hcolumndescriptor family   new hcolumndescriptor hbasestatsutils getfamilyname
table addfamily family
hbase createtable table
catch  ioexception e
log error     e
return false
return true