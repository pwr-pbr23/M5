/* generated by:jjtree&javacc: do not edit this line. thrift_grammar.java */
package org apache hadoop hive serde2 dynamic_type
import java io file
import java io fileinputstream
import java io ioexception
import java io inputstream
import java util arraylist
import java util hashmap
import java util list
import java util map
public class thrift_grammar   @bgen jjtree    implements
thrift_grammartreeconstants  thrift_grammarconstants     @bgen jjtree
protected jjtthrift_grammarstate jjtree   new jjtthrift_grammarstate
private list<string> include_path   null
// for computing the autogenerated field ids in thrift
private int field_val
// store types and tables
// separately because one cannot use a table (ie service.method) as a struct
// like type.
protected map<string  dynamicserdesimplenode> types
protected map<string  dynamicserdesimplenode> tables
// system include path
final private static string default_include_path
// need three params to differentiate between this and 2 param method auto
// generated since
// some calls in the autogenerated code use null param for 2nd param and thus
// ambiguous.
protected thrift_grammar inputstream is  list<string> include_path
boolean junk
this is  null
types   new hashmap<string  dynamicserdesimplenode>
tables   new hashmap<string  dynamicserdesimplenode>
this include_path   include_path
field_val    1
// find the file on the include path
private static file findfile string fname  list<string> include_path
for  string path   include_path
final string full   path       fname
file f   new file full
if  f exists
return f
return null
public static void main string args
string filename   null
list<string> include_path   new arraylist<string>
for  string path   default_include_path
include_path add path
for  int i   0  i < args length  i
string arg   args
if  arg equals       i   1 < args length
include_path add args
if  arg equals       i   1 < args length
filename   args
inputstream is   system in
if  filename    null
try
is   new fileinputstream findfile filename  include_path
catch  ioexception e
thrift_grammar t   new thrift_grammar is  include_path  false
try
t start
catch  exception e
system out println
system out println e getmessage
e printstacktrace
final public simplenode start   throws parseexception
/* @bgen(jjtree) start */
dynamicserdestart jjtn000   new dynamicserdestart jjtstart
boolean jjtc000   true
jjtree opennodescope jjtn000
try
headerlist
label_1  while  true
switch   jj_ntk     1  ? jj_ntk     jj_ntk
case 59
case 60
commaorsemicolon
break
default
jj_la1   jj_gen
definition
switch   jj_ntk     1  ? jj_ntk     jj_ntk
case tok_const
case tok_senum
case tok_typedef
case tok_struct
case tok_exception
case tok_service
case tok_enum
case 59
case 60
break
default
jj_la1   jj_gen
break label_1
jjtree closenodescope jjtn000  true
jjtc000   false
if  true
return jjtn000
catch  throwable jjte000
if  jjtc000
jjtree clearnodescope jjtn000
jjtc000   false
else
jjtree popnode
if  jjte000 instanceof runtimeexception
if  true
throw  runtimeexception  jjte000
if  jjte000 instanceof parseexception
if  true
throw  parseexception  jjte000
if  true
throw  error  jjte000
finally
if  jjtc000
jjtree closenodescope jjtn000  true
throw new error
final public simplenode headerlist   throws parseexception
/* @bgen(jjtree) headerlist */
dynamicserdeheaderlist jjtn000   new dynamicserdeheaderlist jjtheaderlist
boolean jjtc000   true
jjtree opennodescope jjtn000
try
label_2  while  true
switch   jj_ntk     1  ? jj_ntk     jj_ntk
case tok_namespace
case tok_cpp_namespace
case tok_cpp_include
case tok_java_package
case tok_cocoa_prefix
case tok_csharp_namespace
case tok_php_namespace
case tok_py_module
case tok_perl_package
case tok_ruby_namespace
case tok_smalltalk_category
case tok_smalltalk_prefix
case tok_xsd_namespace
case tok_include
break
default
jj_la1   jj_gen
break label_2
header
jjtree closenodescope jjtn000  true
jjtc000   false
if  true
return jjtn000
catch  throwable jjte000
if  jjtc000
jjtree clearnodescope jjtn000
jjtc000   false
else
jjtree popnode
if  jjte000 instanceof runtimeexception
if  true
throw  runtimeexception  jjte000
if  jjte000 instanceof parseexception
if  true
throw  parseexception  jjte000
if  true
throw  error  jjte000
finally
if  jjtc000
jjtree closenodescope jjtn000  true
throw new error
final public simplenode header   throws parseexception
/* @bgen(jjtree) header */
dynamicserdeheader jjtn000   new dynamicserdeheader jjtheader
boolean jjtc000   true
jjtree opennodescope jjtn000
try
switch   jj_ntk     1  ? jj_ntk     jj_ntk
case tok_include
include
jjtree closenodescope jjtn000  true
jjtc000   false
if  true
return jjtn000
break
case tok_namespace
case tok_cpp_namespace
case tok_cpp_include
case tok_java_package
case tok_cocoa_prefix
case tok_csharp_namespace
case tok_php_namespace
case tok_py_module
case tok_perl_package
case tok_ruby_namespace
case tok_smalltalk_category
case tok_smalltalk_prefix
case tok_xsd_namespace
namespace
jjtree closenodescope jjtn000  true
jjtc000   false
if  true
return jjtn000
break
default
jj_la1   jj_gen
jj_consume_token  1
throw new parseexception
catch  throwable jjte000
if  jjtc000
jjtree clearnodescope jjtn000
jjtc000   false
else
jjtree popnode
if  jjte000 instanceof runtimeexception
if  true
throw  runtimeexception  jjte000
if  jjte000 instanceof parseexception
if  true
throw  parseexception  jjte000
if  true
throw  error  jjte000
finally
if  jjtc000
jjtree closenodescope jjtn000  true
throw new error
final public simplenode namespace   throws parseexception
/* @bgen(jjtree) namespace */
dynamicserdenamespace jjtn000   new dynamicserdenamespace jjtnamespace
boolean jjtc000   true
jjtree opennodescope jjtn000
try
switch   jj_ntk     1  ? jj_ntk     jj_ntk
case tok_namespace
jj_consume_token tok_namespace
jj_consume_token identifier
jj_consume_token identifier
jjtree closenodescope jjtn000  true
jjtc000   false
if  true
return jjtn000
break
case tok_cpp_namespace
jj_consume_token tok_cpp_namespace
jj_consume_token identifier
jjtree closenodescope jjtn000  true
jjtc000   false
if  true
return jjtn000
break
case tok_cpp_include
jj_consume_token tok_cpp_include
jj_consume_token tok_literal
jjtree closenodescope jjtn000  true
jjtc000   false
if  true
return jjtn000
break
case tok_php_namespace
jj_consume_token tok_php_namespace
jj_consume_token identifier
jjtree closenodescope jjtn000  true
jjtc000   false
if  true
return jjtn000
break
case tok_py_module
jj_consume_token tok_py_module
jj_consume_token identifier
jjtree closenodescope jjtn000  true
jjtc000   false
if  true
return jjtn000
break
case tok_perl_package
jj_consume_token tok_perl_package
jj_consume_token identifier
jjtree closenodescope jjtn000  true
jjtc000   false
if  true
return jjtn000
break
case tok_ruby_namespace
jj_consume_token tok_ruby_namespace
jj_consume_token identifier
jjtree closenodescope jjtn000  true
jjtc000   false
if  true
return jjtn000
break
case tok_smalltalk_category
jj_consume_token tok_smalltalk_category
jj_consume_token tok_st_identifier
jjtree closenodescope jjtn000  true
jjtc000   false
if  true
return jjtn000
break
case tok_smalltalk_prefix
jj_consume_token tok_smalltalk_prefix
jj_consume_token identifier
jjtree closenodescope jjtn000  true
jjtc000   false
if  true
return jjtn000
break
case tok_java_package
jj_consume_token tok_java_package
jj_consume_token identifier
jjtree closenodescope jjtn000  true
jjtc000   false
if  true
return jjtn000
break
case tok_cocoa_prefix
jj_consume_token tok_cocoa_prefix
jj_consume_token identifier
jjtree closenodescope jjtn000  true
jjtc000   false
if  true
return jjtn000
break
case tok_xsd_namespace
jj_consume_token tok_xsd_namespace
jj_consume_token tok_literal
jjtree closenodescope jjtn000  true
jjtc000   false
if  true
return jjtn000
break
case tok_csharp_namespace
jj_consume_token tok_csharp_namespace
jj_consume_token identifier
jjtree closenodescope jjtn000  true
jjtc000   false
if  true
return jjtn000
break
default
jj_la1   jj_gen
jj_consume_token  1
throw new parseexception
finally
if  jjtc000
jjtree closenodescope jjtn000  true
throw new error
final public simplenode include   throws parseexception
/* @bgen(jjtree) include */
dynamicserdeinclude jjtn000   new dynamicserdeinclude jjtinclude
boolean jjtc000   true
jjtree opennodescope jjtn000
string fname
boolean found   false
try
jj_consume_token tok_include
fname   jj_consume_token tok_literal  image
jjtree closenodescope jjtn000  true
jjtc000   false
// bugbug somewhat fragile below substring expression
fname   fname substring 1  fname length     1
// try to find the file on the include path
file f   thrift_grammar findfile fname  include_path
if  f    null
found   true
try
fileinputstream fis   new fileinputstream f
thrift_grammar t   new thrift_grammar fis  include_path  false
t start
fis close
found   true
// add in what we found to our type and table tables.
tables putall t tables
types putall t types
catch  exception e
system out println     fname
system out println e getmessage
e printstacktrace
if   found
if  true
throw new runtimeexception     fname
if  true
return jjtn000
finally
if  jjtc000
jjtree closenodescope jjtn000  true
throw new error
final public simplenode definition   throws parseexception
/* @bgen(jjtree) definition */
dynamicserdedefinition jjtn000   new dynamicserdedefinition jjtdefinition
boolean jjtc000   true
jjtree opennodescope jjtn000
try
switch   jj_ntk     1  ? jj_ntk     jj_ntk
case tok_const
const
jjtree closenodescope jjtn000  true
jjtc000   false
if  true
return jjtn000
break
case tok_service
service
jjtree closenodescope jjtn000  true
jjtc000   false
if  true
return jjtn000
break
case tok_senum
case tok_typedef
case tok_struct
case tok_exception
case tok_enum
typedefinition
jjtree closenodescope jjtn000  true
jjtc000   false
if  true
return jjtn000
break
default
jj_la1   jj_gen
jj_consume_token  1
throw new parseexception
catch  throwable jjte000
if  jjtc000
jjtree clearnodescope jjtn000
jjtc000   false
else
jjtree popnode
if  jjte000 instanceof runtimeexception
if  true
throw  runtimeexception  jjte000
if  jjte000 instanceof parseexception
if  true
throw  parseexception  jjte000
if  true
throw  error  jjte000
finally
if  jjtc000
jjtree closenodescope jjtn000  true
throw new error
final public simplenode typedefinition   throws parseexception
/* @bgen(jjtree) typedefinition */
dynamicserdetypedefinition jjtn000   new dynamicserdetypedefinition
jjttypedefinition
boolean jjtc000   true
jjtree opennodescope jjtn000
try
switch   jj_ntk     1  ? jj_ntk     jj_ntk
case tok_typedef
typedef
jjtree closenodescope jjtn000  true
jjtc000   false
if  true
return jjtn000
break
case tok_enum
enum
jjtree closenodescope jjtn000  true
jjtc000   false
if  true
return jjtn000
break
case tok_senum
senum
jjtree closenodescope jjtn000  true
jjtc000   false
if  true
return jjtn000
break
case tok_struct
struct
jjtree closenodescope jjtn000  true
jjtc000   false
if  true
return jjtn000
break
case tok_exception
xception
jjtree closenodescope jjtn000  true
jjtc000   false
if  true
return jjtn000
break
default
jj_la1   jj_gen
jj_consume_token  1
throw new parseexception
catch  throwable jjte000
if  jjtc000
jjtree clearnodescope jjtn000
jjtc000   false
else
jjtree popnode
if  jjte000 instanceof runtimeexception
if  true
throw  runtimeexception  jjte000
if  jjte000 instanceof parseexception
if  true
throw  parseexception  jjte000
if  true
throw  error  jjte000
finally
if  jjtc000
jjtree closenodescope jjtn000  true
throw new error
final public dynamicserdetypedef typedef   throws parseexception
/* @bgen(jjtree) typedef */
dynamicserdetypedef jjtn000   new dynamicserdetypedef jjttypedef
boolean jjtc000   true
jjtree opennodescope jjtn000
try
jj_consume_token tok_typedef
definitiontype
jjtn000 name   jj_consume_token identifier  image
jjtree closenodescope jjtn000  true
jjtc000   false
// store the type for later retrieval
types put jjtn000 name  jjtn000
if  true
return jjtn000
catch  throwable jjte000
if  jjtc000
jjtree clearnodescope jjtn000
jjtc000   false
else
jjtree popnode
if  jjte000 instanceof runtimeexception
if  true
throw  runtimeexception  jjte000
if  jjte000 instanceof parseexception
if  true
throw  parseexception  jjte000
if  true
throw  error  jjte000
finally
if  jjtc000
jjtree closenodescope jjtn000  true
throw new error
// returning void because we ignore this production.
final public void commaorsemicolon   throws parseexception
/* @bgen(jjtree) commaorsemicolon */
dynamicserdecommaorsemicolon jjtn000   new dynamicserdecommaorsemicolon
jjtcommaorsemicolon
boolean jjtc000   true
jjtree opennodescope jjtn000
try
switch   jj_ntk     1  ? jj_ntk     jj_ntk
case 59
jj_consume_token 59
break
case 60
jj_consume_token 60
jjtree closenodescope jjtn000  true
jjtc000   false
break
default
jj_la1   jj_gen
jj_consume_token  1
throw new parseexception
finally
if  jjtc000
jjtree closenodescope jjtn000  true
final public simplenode enum   throws parseexception
/* @bgen(jjtree) enum */
dynamicserdeenum jjtn000   new dynamicserdeenum jjtenum
boolean jjtc000   true
jjtree opennodescope jjtn000
try
jj_consume_token tok_enum
jj_consume_token identifier
jj_consume_token 61
enumdeflist
jj_consume_token 62
jjtree closenodescope jjtn000  true
jjtc000   false
if  true
return jjtn000
catch  throwable jjte000
if  jjtc000
jjtree clearnodescope jjtn000
jjtc000   false
else
jjtree popnode
if  jjte000 instanceof runtimeexception
if  true
throw  runtimeexception  jjte000
if  jjte000 instanceof parseexception
if  true
throw  parseexception  jjte000
if  true
throw  error  jjte000
finally
if  jjtc000
jjtree closenodescope jjtn000  true
throw new error
final public simplenode enumdeflist   throws parseexception
/* @bgen(jjtree) enumdeflist */
dynamicserdeenumdeflist jjtn000   new dynamicserdeenumdeflist
jjtenumdeflist
boolean jjtc000   true
jjtree opennodescope jjtn000
try
label_3  while  true
enumdef
switch   jj_ntk     1  ? jj_ntk     jj_ntk
case identifier
break
default
jj_la1   jj_gen
break label_3
jjtree closenodescope jjtn000  true
jjtc000   false
if  true
return jjtn000
catch  throwable jjte000
if  jjtc000
jjtree clearnodescope jjtn000
jjtc000   false
else
jjtree popnode
if  jjte000 instanceof runtimeexception
if  true
throw  runtimeexception  jjte000
if  jjte000 instanceof parseexception
if  true
throw  parseexception  jjte000
if  true
throw  error  jjte000
finally
if  jjtc000
jjtree closenodescope jjtn000  true
throw new error
final public simplenode enumdef   throws parseexception
/* @bgen(jjtree) enumdef */
dynamicserdeenumdef jjtn000   new dynamicserdeenumdef jjtenumdef
boolean jjtc000   true
jjtree opennodescope jjtn000
try
jj_consume_token identifier
switch   jj_ntk     1  ? jj_ntk     jj_ntk
case 63
jj_consume_token 63
jj_consume_token tok_int_constant
break
default
jj_la1   jj_gen
switch   jj_ntk     1  ? jj_ntk     jj_ntk
case 59
case 60
commaorsemicolon
break
default
jj_la1   jj_gen
jjtree closenodescope jjtn000  true
jjtc000   false
if  true
return jjtn000
catch  throwable jjte000
if  jjtc000
jjtree clearnodescope jjtn000
jjtc000   false
else
jjtree popnode
if  jjte000 instanceof runtimeexception
if  true
throw  runtimeexception  jjte000
if  jjte000 instanceof parseexception
if  true
throw  parseexception  jjte000
if  true
throw  error  jjte000
finally
if  jjtc000
jjtree closenodescope jjtn000  true
throw new error
final public simplenode senum   throws parseexception
/* @bgen(jjtree) senum */
dynamicserdesenum jjtn000   new dynamicserdesenum jjtsenum
boolean jjtc000   true
jjtree opennodescope jjtn000
try
jj_consume_token tok_senum
jj_consume_token identifier
jj_consume_token 61
senumdeflist
jj_consume_token 62
jjtree closenodescope jjtn000  true
jjtc000   false
if  true
return jjtn000
catch  throwable jjte000
if  jjtc000
jjtree clearnodescope jjtn000
jjtc000   false
else
jjtree popnode
if  jjte000 instanceof runtimeexception
if  true
throw  runtimeexception  jjte000
if  jjte000 instanceof parseexception
if  true
throw  parseexception  jjte000
if  true
throw  error  jjte000
finally
if  jjtc000
jjtree closenodescope jjtn000  true
throw new error
final public simplenode senumdeflist   throws parseexception
/* @bgen(jjtree) senumdeflist */
dynamicserdesenumdeflist jjtn000   new dynamicserdesenumdeflist
jjtsenumdeflist
boolean jjtc000   true
jjtree opennodescope jjtn000
try
label_4  while  true
senumdef
switch   jj_ntk     1  ? jj_ntk     jj_ntk
case tok_literal
break
default
jj_la1   jj_gen
break label_4
jjtree closenodescope jjtn000  true
jjtc000   false
if  true
return jjtn000
catch  throwable jjte000
if  jjtc000
jjtree clearnodescope jjtn000
jjtc000   false
else
jjtree popnode
if  jjte000 instanceof runtimeexception
if  true
throw  runtimeexception  jjte000
if  jjte000 instanceof parseexception
if  true
throw  parseexception  jjte000
if  true
throw  error  jjte000
finally
if  jjtc000
jjtree closenodescope jjtn000  true
throw new error
final public simplenode senumdef   throws parseexception
/* @bgen(jjtree) senumdef */
dynamicserdesenumdef jjtn000   new dynamicserdesenumdef jjtsenumdef
boolean jjtc000   true
jjtree opennodescope jjtn000
try
jj_consume_token tok_literal
switch   jj_ntk     1  ? jj_ntk     jj_ntk
case 59
case 60
commaorsemicolon
break
default
jj_la1   jj_gen
jjtree closenodescope jjtn000  true
jjtc000   false
if  true
return jjtn000
catch  throwable jjte000
if  jjtc000
jjtree clearnodescope jjtn000
jjtc000   false
else
jjtree popnode
if  jjte000 instanceof runtimeexception
if  true
throw  runtimeexception  jjte000
if  jjte000 instanceof parseexception
if  true
throw  parseexception  jjte000
if  true
throw  error  jjte000
finally
if  jjtc000
jjtree closenodescope jjtn000  true
throw new error
final public simplenode const   throws parseexception
/* @bgen(jjtree) const */
dynamicserdeconst jjtn000   new dynamicserdeconst jjtconst
boolean jjtc000   true
jjtree opennodescope jjtn000
try
jj_consume_token tok_const
fieldtype
jj_consume_token identifier
jj_consume_token 63
constvalue
switch   jj_ntk     1  ? jj_ntk     jj_ntk
case 59
case 60
commaorsemicolon
break
default
jj_la1   jj_gen
jjtree closenodescope jjtn000  true
jjtc000   false
if  true
return jjtn000
catch  throwable jjte000
if  jjtc000
jjtree clearnodescope jjtn000
jjtc000   false
else
jjtree popnode
if  jjte000 instanceof runtimeexception
if  true
throw  runtimeexception  jjte000
if  jjte000 instanceof parseexception
if  true
throw  parseexception  jjte000
if  true
throw  error  jjte000
finally
if  jjtc000
jjtree closenodescope jjtn000  true
throw new error
final public simplenode constvalue   throws parseexception
/* @bgen(jjtree) constvalue */
dynamicserdeconstvalue jjtn000   new dynamicserdeconstvalue jjtconstvalue
boolean jjtc000   true
jjtree opennodescope jjtn000
try
switch   jj_ntk     1  ? jj_ntk     jj_ntk
case tok_int_constant
jj_consume_token tok_int_constant
jjtree closenodescope jjtn000  true
jjtc000   false
break
case tok_double_constant
jj_consume_token tok_double_constant
jjtree closenodescope jjtn000  true
jjtc000   false
break
case tok_literal
jj_consume_token tok_literal
jjtree closenodescope jjtn000  true
jjtc000   false
break
case identifier
jj_consume_token identifier
jjtree closenodescope jjtn000  true
jjtc000   false
break
case 64
constlist
jjtree closenodescope jjtn000  true
jjtc000   false
break
case 61
constmap
jjtree closenodescope jjtn000  true
jjtc000   false
if  true
return jjtn000
break
default
jj_la1   jj_gen
jj_consume_token  1
throw new parseexception
catch  throwable jjte000
if  jjtc000
jjtree clearnodescope jjtn000
jjtc000   false
else
jjtree popnode
if  jjte000 instanceof runtimeexception
if  true
throw  runtimeexception  jjte000
if  jjte000 instanceof parseexception
if  true
throw  parseexception  jjte000
if  true
throw  error  jjte000
finally
if  jjtc000
jjtree closenodescope jjtn000  true
throw new error
final public simplenode constlist   throws parseexception
/* @bgen(jjtree) constlist */
dynamicserdeconstlist jjtn000   new dynamicserdeconstlist jjtconstlist
boolean jjtc000   true
jjtree opennodescope jjtn000
try
jj_consume_token 64
constlistcontents
jj_consume_token 65
jjtree closenodescope jjtn000  true
jjtc000   false
if  true
return jjtn000
catch  throwable jjte000
if  jjtc000
jjtree clearnodescope jjtn000
jjtc000   false
else
jjtree popnode
if  jjte000 instanceof runtimeexception
if  true
throw  runtimeexception  jjte000
if  jjte000 instanceof parseexception
if  true
throw  parseexception  jjte000
if  true
throw  error  jjte000
finally
if  jjtc000
jjtree closenodescope jjtn000  true
throw new error
final public simplenode constlistcontents   throws parseexception
/* @bgen(jjtree) constlistcontents */
dynamicserdeconstlistcontents jjtn000   new dynamicserdeconstlistcontents
jjtconstlistcontents
boolean jjtc000   true
jjtree opennodescope jjtn000
try
label_5  while  true
constvalue
switch   jj_ntk     1  ? jj_ntk     jj_ntk
case 59
case 60
commaorsemicolon
break
default
jj_la1   jj_gen
switch   jj_ntk     1  ? jj_ntk     jj_ntk
case tok_int_constant
case tok_double_constant
case identifier
case tok_literal
case 61
case 64
break
default
jj_la1   jj_gen
break label_5
jjtree closenodescope jjtn000  true
jjtc000   false
if  true
return jjtn000
catch  throwable jjte000
if  jjtc000
jjtree clearnodescope jjtn000
jjtc000   false
else
jjtree popnode
if  jjte000 instanceof runtimeexception
if  true
throw  runtimeexception  jjte000
if  jjte000 instanceof parseexception
if  true
throw  parseexception  jjte000
if  true
throw  error  jjte000
finally
if  jjtc000
jjtree closenodescope jjtn000  true
throw new error
final public simplenode constmap   throws parseexception
/* @bgen(jjtree) constmap */
dynamicserdeconstmap jjtn000   new dynamicserdeconstmap jjtconstmap
boolean jjtc000   true
jjtree opennodescope jjtn000
try
jj_consume_token 61
constmapcontents
jj_consume_token 62
jjtree closenodescope jjtn000  true
jjtc000   false
if  true
return jjtn000
catch  throwable jjte000
if  jjtc000
jjtree clearnodescope jjtn000
jjtc000   false
else
jjtree popnode
if  jjte000 instanceof runtimeexception
if  true
throw  runtimeexception  jjte000
if  jjte000 instanceof parseexception
if  true
throw  parseexception  jjte000
if  true
throw  error  jjte000
finally
if  jjtc000
jjtree closenodescope jjtn000  true
throw new error
final public simplenode constmapcontents   throws parseexception
/* @bgen(jjtree) constmapcontents */
dynamicserdeconstmapcontents jjtn000   new dynamicserdeconstmapcontents
jjtconstmapcontents
boolean jjtc000   true
jjtree opennodescope jjtn000
try
switch   jj_ntk     1  ? jj_ntk     jj_ntk
case tok_int_constant
case tok_double_constant
case identifier
case tok_literal
case 61
case 64
label_6  while  true
constvalue
jj_consume_token 66
constvalue
switch   jj_ntk     1  ? jj_ntk     jj_ntk
case 59
case 60
commaorsemicolon
break
default
jj_la1   jj_gen
switch   jj_ntk     1  ? jj_ntk     jj_ntk
case tok_int_constant
case tok_double_constant
case identifier
case tok_literal
case 61
case 64
break
default
jj_la1   jj_gen
break label_6
jjtree closenodescope jjtn000  true
jjtc000   false
break
default
jj_la1   jj_gen
jjtree closenodescope jjtn000  true
jjtc000   false
if  true
return jjtn000
catch  throwable jjte000
if  jjtc000
jjtree clearnodescope jjtn000
jjtc000   false
else
jjtree popnode
if  jjte000 instanceof runtimeexception
if  true
throw  runtimeexception  jjte000
if  jjte000 instanceof parseexception
if  true
throw  parseexception  jjte000
if  true
throw  error  jjte000
finally
if  jjtc000
jjtree closenodescope jjtn000  true
throw new error
final public dynamicserdestruct struct   throws parseexception
/* @bgen(jjtree) struct */
dynamicserdestruct jjtn000   new dynamicserdestruct jjtstruct
boolean jjtc000   true
jjtree opennodescope jjtn000
try
jj_consume_token tok_struct
jjtn000 name   jj_consume_token identifier  image
jj_consume_token 61
fieldlist
jj_consume_token 62
jjtree closenodescope jjtn000  true
jjtc000   false
types put jjtn000 name  jjtn000
if  true
return jjtn000
catch  throwable jjte000
if  jjtc000
jjtree clearnodescope jjtn000
jjtc000   false
else
jjtree popnode
if  jjte000 instanceof runtimeexception
if  true
throw  runtimeexception  jjte000
if  jjte000 instanceof parseexception
if  true
throw  parseexception  jjte000
if  true
throw  error  jjte000
finally
if  jjtc000
jjtree closenodescope jjtn000  true
throw new error
final public simplenode xception   throws parseexception
/* @bgen(jjtree) xception */
dynamicserdexception jjtn000   new dynamicserdexception jjtxception
boolean jjtc000   true
jjtree opennodescope jjtn000
try
jj_consume_token tok_exception
jj_consume_token identifier
jj_consume_token 61
fieldlist
jj_consume_token 62
jjtree closenodescope jjtn000  true
jjtc000   false
if  true
return jjtn000
catch  throwable jjte000
if  jjtc000
jjtree clearnodescope jjtn000
jjtc000   false
else
jjtree popnode
if  jjte000 instanceof runtimeexception
if  true
throw  runtimeexception  jjte000
if  jjte000 instanceof parseexception
if  true
throw  parseexception  jjte000
if  true
throw  error  jjte000
finally
if  jjtc000
jjtree closenodescope jjtn000  true
throw new error
final public simplenode service   throws parseexception
/* @bgen(jjtree) service */
dynamicserdeservice jjtn000   new dynamicserdeservice jjtservice
boolean jjtc000   true
jjtree opennodescope jjtn000
try
jj_consume_token tok_service
jj_consume_token identifier
extends
jj_consume_token 61
flagargs
label_7  while  true
function
switch   jj_ntk     1  ? jj_ntk     jj_ntk
case tok_void
case tok_bool
case tok_i16
case tok_i32
case tok_i64
case tok_double
case tok_string
case tok_map
case tok_list
case tok_set
case tok_async
case identifier
break
default
jj_la1   jj_gen
break label_7
unflagargs
jj_consume_token 62
jjtree closenodescope jjtn000  true
jjtc000   false
// at some point, these should be inserted as a "db"
if  true
return jjtn000
catch  throwable jjte000
if  jjtc000
jjtree clearnodescope jjtn000
jjtc000   false
else
jjtree popnode
if  jjte000 instanceof runtimeexception
if  true
throw  runtimeexception  jjte000
if  jjte000 instanceof parseexception
if  true
throw  parseexception  jjte000
if  true
throw  error  jjte000
finally
if  jjtc000
jjtree closenodescope jjtn000  true
throw new error
final public simplenode flagargs   throws parseexception
/* @bgen(jjtree) flagargs */
dynamicserdeflagargs jjtn000   new dynamicserdeflagargs jjtflagargs
boolean jjtc000   true
jjtree opennodescope jjtn000
try
jjtree closenodescope jjtn000  true
jjtc000   false
if  true
return jjtn000
finally
if  jjtc000
jjtree closenodescope jjtn000  true
throw new error
final public simplenode unflagargs   throws parseexception
/* @bgen(jjtree) unflagargs */
dynamicserdeunflagargs jjtn000   new dynamicserdeunflagargs jjtunflagargs
boolean jjtc000   true
jjtree opennodescope jjtn000
try
jjtree closenodescope jjtn000  true
jjtc000   false
if  true
return jjtn000
finally
if  jjtc000
jjtree closenodescope jjtn000  true
throw new error
final public simplenode extends   throws parseexception
/* @bgen(jjtree) extends */
dynamicserdeextends jjtn000   new dynamicserdeextends jjtextends
boolean jjtc000   true
jjtree opennodescope jjtn000
try
switch   jj_ntk     1  ? jj_ntk     jj_ntk
case tok_extends
jj_consume_token tok_extends
jj_consume_token identifier
jjtree closenodescope jjtn000  true
jjtc000   false
if  true
return jjtn000
break
default
jj_la1   jj_gen
jjtree closenodescope jjtn000  true
jjtc000   false
if  true
return jjtn000
finally
if  jjtc000
jjtree closenodescope jjtn000  true
throw new error
final public dynamicserdefunction function   throws parseexception
/* @bgen(jjtree) function */
dynamicserdefunction jjtn000   new dynamicserdefunction jjtfunction
boolean jjtc000   true
jjtree opennodescope jjtn000
try
async
functiontype
// the name of the function/table
jjtn000 name   jj_consume_token identifier  image
jj_consume_token 67
fieldlist
jj_consume_token 68
throws
switch   jj_ntk     1  ? jj_ntk     jj_ntk
case 59
case 60
commaorsemicolon
break
default
jj_la1   jj_gen
jjtree closenodescope jjtn000  true
jjtc000   false
tables put jjtn000 name  jjtn000
if  true
return jjtn000
catch  throwable jjte000
if  jjtc000
jjtree clearnodescope jjtn000
jjtc000   false
else
jjtree popnode
if  jjte000 instanceof runtimeexception
if  true
throw  runtimeexception  jjte000
if  jjte000 instanceof parseexception
if  true
throw  parseexception  jjte000
if  true
throw  error  jjte000
finally
if  jjtc000
jjtree closenodescope jjtn000  true
throw new error
final public void async   throws parseexception
/* @bgen(jjtree) async */
dynamicserdeasync jjtn000   new dynamicserdeasync jjtasync
boolean jjtc000   true
jjtree opennodescope jjtn000
try
switch   jj_ntk     1  ? jj_ntk     jj_ntk
case tok_async
jj_consume_token tok_async
break
default
jj_la1   jj_gen
jjtree closenodescope jjtn000  true
jjtc000   false
finally
if  jjtc000
jjtree closenodescope jjtn000  true
final public void throws   throws parseexception
/* @bgen(jjtree) throws */
dynamicserdethrows jjtn000   new dynamicserdethrows jjtthrows
boolean jjtc000   true
jjtree opennodescope jjtn000
try
switch   jj_ntk     1  ? jj_ntk     jj_ntk
case tok_throws
jj_consume_token tok_throws
jj_consume_token 67
fieldlist
jj_consume_token 68
break
default
jj_la1   jj_gen
jjtree closenodescope jjtn000  true
jjtc000   false
catch  throwable jjte000
if  jjtc000
jjtree clearnodescope jjtn000
jjtc000   false
else
jjtree popnode
if  jjte000 instanceof runtimeexception
if  true
throw  runtimeexception  jjte000
if  jjte000 instanceof parseexception
if  true
throw  parseexception  jjte000
if  true
throw  error  jjte000
finally
if  jjtc000
jjtree closenodescope jjtn000  true
// nothing special - just use the dynamicserdefieldlist's children methods to
// access the fields
final public dynamicserdefieldlist fieldlist   throws parseexception
/* @bgen(jjtree) fieldlist */
dynamicserdefieldlist jjtn000   new dynamicserdefieldlist jjtfieldlist
boolean jjtc000   true
jjtree opennodescope jjtn000
field_val    1
try
label_8  while  true
switch   jj_ntk     1  ? jj_ntk     jj_ntk
case tok_bool
case tok_i16
case tok_i32
case tok_i64
case tok_double
case tok_string
case tok_map
case tok_list
case tok_set
case tok_required
case tok_optional
case tok_skip
case tok_int_constant
case identifier
break
default
jj_la1   jj_gen
break label_8
field
jjtree closenodescope jjtn000  true
jjtc000   false
if  true
return jjtn000
catch  throwable jjte000
if  jjtc000
jjtree clearnodescope jjtn000
jjtc000   false
else
jjtree popnode
if  jjte000 instanceof runtimeexception
if  true
throw  runtimeexception  jjte000
if  jjte000 instanceof parseexception
if  true
throw  parseexception  jjte000
if  true
throw  error  jjte000
finally
if  jjtc000
jjtree closenodescope jjtn000  true
throw new error
final public dynamicserdefield field   throws parseexception
/* @bgen(jjtree) field */
dynamicserdefield jjtn000   new dynamicserdefield jjtfield
boolean jjtc000   true
jjtree opennodescope jjtn000
string fidnum
try
switch   jj_ntk     1  ? jj_ntk     jj_ntk
case tok_int_constant
fidnum   jj_consume_token tok_int_constant  image
jj_consume_token 66
break
default
jj_la1   jj_gen
fieldrequiredness
fieldtype
// the name of the field - not optional
jjtn000 name   jj_consume_token identifier  image
fieldvalue
switch   jj_ntk     1  ? jj_ntk     jj_ntk
case 59
case 60
commaorsemicolon
break
default
jj_la1   jj_gen
jjtree closenodescope jjtn000  true
jjtc000   false
if  fidnum length   > 0
int fidint   integer valueof fidnum
jjtn000 fieldid   fidint
else
jjtn000 fieldid   field_val
if  true
return jjtn000
catch  throwable jjte000
if  jjtc000
jjtree clearnodescope jjtn000
jjtc000   false
else
jjtree popnode
if  jjte000 instanceof runtimeexception
if  true
throw  runtimeexception  jjte000
if  jjte000 instanceof parseexception
if  true
throw  parseexception  jjte000
if  true
throw  error  jjte000
finally
if  jjtc000
jjtree closenodescope jjtn000  true
throw new error
final public dynamicserdefieldrequiredness fieldrequiredness
throws parseexception
/* @bgen(jjtree) fieldrequiredness */
dynamicserdefieldrequiredness jjtn000   new dynamicserdefieldrequiredness
jjtfieldrequiredness
boolean jjtc000   true
jjtree opennodescope jjtn000
try
switch   jj_ntk     1  ? jj_ntk     jj_ntk
case tok_required
jj_consume_token tok_required
jjtree closenodescope jjtn000  true
jjtc000   false
jjtn000 requiredness   dynamicserdefieldrequiredness requirednesstypes required
if  true
return jjtn000
break
case tok_optional
jj_consume_token tok_optional
jjtree closenodescope jjtn000  true
jjtc000   false
jjtn000 requiredness   dynamicserdefieldrequiredness requirednesstypes optional
if  true
return jjtn000
break
case tok_skip
jj_consume_token tok_skip
jjtree closenodescope jjtn000  true
jjtc000   false
jjtn000 requiredness   dynamicserdefieldrequiredness requirednesstypes skippable
if  true
return jjtn000
break
default
jj_la1   jj_gen
jjtree closenodescope jjtn000  true
jjtc000   false
if  true
return jjtn000
finally
if  jjtc000
jjtree closenodescope jjtn000  true
throw new error
final public simplenode fieldvalue   throws parseexception
/* @bgen(jjtree) fieldvalue */
dynamicserdefieldvalue jjtn000   new dynamicserdefieldvalue jjtfieldvalue
boolean jjtc000   true
jjtree opennodescope jjtn000
try
switch   jj_ntk     1  ? jj_ntk     jj_ntk
case 63
jj_consume_token 63
constvalue
jjtree closenodescope jjtn000  true
jjtc000   false
if  true
return jjtn000
break
default
jj_la1   jj_gen
jjtree closenodescope jjtn000  true
jjtc000   false
if  true
return jjtn000
catch  throwable jjte000
if  jjtc000
jjtree clearnodescope jjtn000
jjtc000   false
else
jjtree popnode
if  jjte000 instanceof runtimeexception
if  true
throw  runtimeexception  jjte000
if  jjte000 instanceof parseexception
if  true
throw  parseexception  jjte000
if  true
throw  error  jjte000
finally
if  jjtc000
jjtree closenodescope jjtn000  true
throw new error
final public simplenode definitiontype   throws parseexception
/* @bgen(jjtree) definitiontype */
dynamicserdedefinitiontype jjtn000   new dynamicserdedefinitiontype
jjtdefinitiontype
boolean jjtc000   true
jjtree opennodescope jjtn000
try
switch   jj_ntk     1  ? jj_ntk     jj_ntk
case tok_string
typestring
jjtree closenodescope jjtn000  true
jjtc000   false
if  true
return jjtn000
break
case tok_bool
typebool
jjtree closenodescope jjtn000  true
jjtc000   false
if  true
return jjtn000
break
case tok_i16
typei16
jjtree closenodescope jjtn000  true
jjtc000   false
if  true
return jjtn000
break
case tok_i32
typei32
jjtree closenodescope jjtn000  true
jjtc000   false
if  true
return jjtn000
break
case tok_i64
typei64
jjtree closenodescope jjtn000  true
jjtc000   false
if  true
return jjtn000
break
case tok_double
typedouble
jjtree closenodescope jjtn000  true
jjtc000   false
if  true
return jjtn000
break
case tok_map
typemap
jjtree closenodescope jjtn000  true
jjtc000   false
if  true
return jjtn000
break
case tok_set
typeset
jjtree closenodescope jjtn000  true
jjtc000   false
if  true
return jjtn000
break
case tok_list
typelist
jjtree closenodescope jjtn000  true
jjtc000   false
if  true
return jjtn000
break
default
jj_la1   jj_gen
jj_consume_token  1
throw new parseexception
catch  throwable jjte000
if  jjtc000
jjtree clearnodescope jjtn000
jjtc000   false
else
jjtree popnode
if  jjte000 instanceof runtimeexception
if  true
throw  runtimeexception  jjte000
if  jjte000 instanceof parseexception
if  true
throw  parseexception  jjte000
if  true
throw  error  jjte000
finally
if  jjtc000
jjtree closenodescope jjtn000  true
throw new error
final public void functiontype   throws parseexception
/* @bgen(jjtree) functiontype */
dynamicserdefunctiontype jjtn000   new dynamicserdefunctiontype
jjtfunctiontype
boolean jjtc000   true
jjtree opennodescope jjtn000
try
switch   jj_ntk     1  ? jj_ntk     jj_ntk
case tok_bool
case tok_i16
case tok_i32
case tok_i64
case tok_double
case tok_string
case tok_map
case tok_list
case tok_set
case identifier
fieldtype
break
case tok_void
jj_consume_token tok_void
jjtree closenodescope jjtn000  true
jjtc000   false
break
default
jj_la1   jj_gen
jj_consume_token  1
throw new parseexception
catch  throwable jjte000
if  jjtc000
jjtree clearnodescope jjtn000
jjtc000   false
else
jjtree popnode
if  jjte000 instanceof runtimeexception
if  true
throw  runtimeexception  jjte000
if  jjte000 instanceof parseexception
if  true
throw  parseexception  jjte000
if  true
throw  error  jjte000
finally
if  jjtc000
jjtree closenodescope jjtn000  true
final public dynamicserdefieldtype fieldtype   throws parseexception
/* @bgen(jjtree) fieldtype */
dynamicserdefieldtype jjtn000   new dynamicserdefieldtype jjtfieldtype
boolean jjtc000   true
jjtree opennodescope jjtn000
try
switch   jj_ntk     1  ? jj_ntk     jj_ntk
case tok_string
typestring
jjtree closenodescope jjtn000  true
jjtc000   false
if  true
return jjtn000
break
case tok_bool
typebool
jjtree closenodescope jjtn000  true
jjtc000   false
if  true
return jjtn000
break
case tok_i16
typei16
jjtree closenodescope jjtn000  true
jjtc000   false
if  true
return jjtn000
break
case tok_i32
typei32
jjtree closenodescope jjtn000  true
jjtc000   false
if  true
return jjtn000
break
case tok_i64
typei64
jjtree closenodescope jjtn000  true
jjtc000   false
if  true
return jjtn000
break
case tok_double
typedouble
jjtree closenodescope jjtn000  true
jjtc000   false
if  true
return jjtn000
break
case tok_map
typemap
jjtree closenodescope jjtn000  true
jjtc000   false
if  true
return jjtn000
break
case tok_set
typeset
jjtree closenodescope jjtn000  true
jjtc000   false
if  true
return jjtn000
break
case tok_list
typelist
jjtree closenodescope jjtn000  true
jjtc000   false
if  true
return jjtn000
break
case identifier
jjtn000 name   jj_consume_token identifier  image
jjtree closenodescope jjtn000  true
jjtc000   false
if  types get jjtn000 name     null
system err println     jjtn000 name
if  true
throw new runtimeexception     jjtn000 name
// lookup the specified type and set this nodes type to it. precludes
// forward and self references for now.
jjtn000 jjtaddchild types get jjtn000 name   0
if  true
return jjtn000
break
default
jj_la1   jj_gen
jj_consume_token  1
throw new parseexception
catch  throwable jjte000
if  jjtc000
jjtree clearnodescope jjtn000
jjtc000   false
else
jjtree popnode
if  jjte000 instanceof runtimeexception
if  true
throw  runtimeexception  jjte000
if  jjte000 instanceof parseexception
if  true
throw  parseexception  jjte000
if  true
throw  error  jjte000
finally
if  jjtc000
jjtree closenodescope jjtn000  true
throw new error
final public dynamicserdetypestring typestring   throws parseexception
/* @bgen(jjtree) typestring */
dynamicserdetypestring jjtn000   new dynamicserdetypestring jjttypestring
boolean jjtc000   true
jjtree opennodescope jjtn000
try
jj_consume_token tok_string
jjtree closenodescope jjtn000  true
jjtc000   false
if  true
return jjtn000
finally
if  jjtc000
jjtree closenodescope jjtn000  true
throw new error
final public dynamicserdetypebyte typebyte   throws parseexception
/* @bgen(jjtree) typebyte */
dynamicserdetypebyte jjtn000   new dynamicserdetypebyte jjttypebyte
boolean jjtc000   true
jjtree opennodescope jjtn000
try
jj_consume_token tok_byte
jjtree closenodescope jjtn000  true
jjtc000   false
if  true
return jjtn000
finally
if  jjtc000
jjtree closenodescope jjtn000  true
throw new error
final public dynamicserdetypei16 typei16   throws parseexception
/* @bgen(jjtree) typei16 */
dynamicserdetypei16 jjtn000   new dynamicserdetypei16 jjttypei16
boolean jjtc000   true
jjtree opennodescope jjtn000
try
jj_consume_token tok_i16
jjtree closenodescope jjtn000  true
jjtc000   false
if  true
return jjtn000
finally
if  jjtc000
jjtree closenodescope jjtn000  true
throw new error
final public dynamicserdetypei32 typei32   throws parseexception
/* @bgen(jjtree) typei32 */
dynamicserdetypei32 jjtn000   new dynamicserdetypei32 jjttypei32
boolean jjtc000   true
jjtree opennodescope jjtn000
try
jj_consume_token tok_i32
jjtree closenodescope jjtn000  true
jjtc000   false
if  true
return jjtn000
finally
if  jjtc000
jjtree closenodescope jjtn000  true
throw new error
final public dynamicserdetypei64 typei64   throws parseexception
/* @bgen(jjtree) typei64 */
dynamicserdetypei64 jjtn000   new dynamicserdetypei64 jjttypei64
boolean jjtc000   true
jjtree opennodescope jjtn000
try
jj_consume_token tok_i64
jjtree closenodescope jjtn000  true
jjtc000   false
if  true
return jjtn000
finally
if  jjtc000
jjtree closenodescope jjtn000  true
throw new error
final public dynamicserdetypedouble typedouble   throws parseexception
/* @bgen(jjtree) typedouble */
dynamicserdetypedouble jjtn000   new dynamicserdetypedouble jjttypedouble
boolean jjtc000   true
jjtree opennodescope jjtn000
try
jj_consume_token tok_double
jjtree closenodescope jjtn000  true
jjtc000   false
if  true
return jjtn000
finally
if  jjtc000
jjtree closenodescope jjtn000  true
throw new error
final public dynamicserdetypebool typebool   throws parseexception
/* @bgen(jjtree) typebool */
dynamicserdetypebool jjtn000   new dynamicserdetypebool jjttypebool
boolean jjtc000   true
jjtree opennodescope jjtn000
try
jj_consume_token tok_bool
jjtree closenodescope jjtn000  true
jjtc000   false
if  true
return jjtn000
finally
if  jjtc000
jjtree closenodescope jjtn000  true
throw new error
final public dynamicserdetypemap typemap   throws parseexception
/* @bgen(jjtree) typemap */
dynamicserdetypemap jjtn000   new dynamicserdetypemap jjttypemap
boolean jjtc000   true
jjtree opennodescope jjtn000
try
jj_consume_token tok_map
jj_consume_token 69
fieldtype
jj_consume_token 59
fieldtype
jj_consume_token 70
jjtree closenodescope jjtn000  true
jjtc000   false
if  true
return jjtn000
catch  throwable jjte000
if  jjtc000
jjtree clearnodescope jjtn000
jjtc000   false
else
jjtree popnode
if  jjte000 instanceof runtimeexception
if  true
throw  runtimeexception  jjte000
if  jjte000 instanceof parseexception
if  true
throw  parseexception  jjte000
if  true
throw  error  jjte000
finally
if  jjtc000
jjtree closenodescope jjtn000  true
throw new error
final public dynamicserdetypeset typeset   throws parseexception
/* @bgen(jjtree) typeset */
dynamicserdetypeset jjtn000   new dynamicserdetypeset jjttypeset
boolean jjtc000   true
jjtree opennodescope jjtn000
try
jj_consume_token tok_set
jj_consume_token 69
fieldtype
jj_consume_token 70
jjtree closenodescope jjtn000  true
jjtc000   false
if  true
return jjtn000
catch  throwable jjte000
if  jjtc000
jjtree clearnodescope jjtn000
jjtc000   false
else
jjtree popnode
if  jjte000 instanceof runtimeexception
if  true
throw  runtimeexception  jjte000
if  jjte000 instanceof parseexception
if  true
throw  parseexception  jjte000
if  true
throw  error  jjte000
finally
if  jjtc000
jjtree closenodescope jjtn000  true
throw new error
final public dynamicserdetypelist typelist   throws parseexception
/* @bgen(jjtree) typelist */
dynamicserdetypelist jjtn000   new dynamicserdetypelist jjttypelist
boolean jjtc000   true
jjtree opennodescope jjtn000
try
jj_consume_token tok_list
jj_consume_token 69
fieldtype
jj_consume_token 70
jjtree closenodescope jjtn000  true
jjtc000   false
if  true
return jjtn000
catch  throwable jjte000
if  jjtc000
jjtree clearnodescope jjtn000
jjtc000   false
else
jjtree popnode
if  jjte000 instanceof runtimeexception
if  true
throw  runtimeexception  jjte000
if  jjte000 instanceof parseexception
if  true
throw  parseexception  jjte000
if  true
throw  error  jjte000
finally
if  jjtc000
jjtree closenodescope jjtn000  true
throw new error
/** generated token manager. */
public thrift_grammartokenmanager token_source
simplecharstream jj_input_stream
/** current token. */
public token token
/** next token. */
public token jj_nt
private int jj_ntk
private int jj_gen
final private int jj_la1   new int
static private int jj_la1_0
static private int jj_la1_1
static private int jj_la1_2
static
jj_la1_init_0
jj_la1_init_1
jj_la1_init_2
private static void jj_la1_init_0
jj_la1_0   new int  0x0  0x100  0xa3fee00  0xa3fee00  0x23fee00  0x100
0x0  0x0  0x0  0x0  0x0  0x0  0x0  0x0  0x0  0x0  0x0  0x0  0x0  0x0
0xb0000000  0x0  0x0  0x0  0x0  0xa0000000  0x0  0x0  0x0  0x0
0xa0000000  0xb0000000  0xa0000000
private static void jj_la1_init_1
jj_la1_1   new int  0x18000000  0x18019c20  0x0  0x0  0x0  0x19c20
0x11c20  0x18000000  0x400000  0x80000000  0x18000000  0x2000000
0x18000000  0x18000000  0x22700000  0x18000000  0x22700000  0x18000000
0x22700000  0x22700000  0x4003cf  0x2000  0x18000000  0x200  0x4000
0x5e01cf  0x100000  0x18000000  0xe0000  0x80000000  0x1cf  0x4001cf
0x4001cf
private static void jj_la1_init_2
jj_la1_2   new int  0x0  0x0  0x0  0x0  0x0  0x0  0x0  0x0  0x0  0x0
0x0  0x0  0x0  0x0  0x1  0x0  0x1  0x0  0x1  0x1  0x0  0x0  0x0  0x0
0x0  0x0  0x0  0x0  0x0  0x0  0x0  0x0  0x0
/** constructor with inputstream. */
public thrift_grammar java io inputstream stream
this stream  null
/** constructor with inputstream and supplied encoding */
public thrift_grammar java io inputstream stream  string encoding
try
jj_input_stream   new simplecharstream stream  encoding  1  1
catch  java io unsupportedencodingexception e
throw new runtimeexception e
token_source   new thrift_grammartokenmanager jj_input_stream
token   new token
jj_ntk    1
jj_gen   0
for  int i   0  i < 33  i
jj_la1    1
/** reinitialise. */
public void reinit java io inputstream stream
reinit stream  null
/** reinitialise. */
public void reinit java io inputstream stream  string encoding
try
jj_input_stream reinit stream  encoding  1  1
catch  java io unsupportedencodingexception e
throw new runtimeexception e
token_source reinit jj_input_stream
token   new token
jj_ntk    1
jjtree reset
jj_gen   0
for  int i   0  i < 33  i
jj_la1    1
/** constructor. */
public thrift_grammar java io reader stream
jj_input_stream   new simplecharstream stream  1  1
token_source   new thrift_grammartokenmanager jj_input_stream
token   new token
jj_ntk    1
jj_gen   0
for  int i   0  i < 33  i
jj_la1    1
/** reinitialise. */
public void reinit java io reader stream
jj_input_stream reinit stream  1  1
token_source reinit jj_input_stream
token   new token
jj_ntk    1
jjtree reset
jj_gen   0
for  int i   0  i < 33  i
jj_la1    1
/** constructor with generated token manager. */
public thrift_grammar thrift_grammartokenmanager tm
token_source   tm
token   new token
jj_ntk    1
jj_gen   0
for  int i   0  i < 33  i
jj_la1    1
/** reinitialise. */
public void reinit thrift_grammartokenmanager tm
token_source   tm
token   new token
jj_ntk    1
jjtree reset
jj_gen   0
for  int i   0  i < 33  i
jj_la1    1
private token jj_consume_token int kind  throws parseexception
token oldtoken
if   oldtoken   token  next    null
token   token next
else
token   token next   token_source getnexttoken
jj_ntk    1
if  token kind    kind
jj_gen
return token
token   oldtoken
jj_kind   kind
throw generateparseexception
/** get the next token. */
final public token getnexttoken
if  token next    null
token   token next
else
token   token next   token_source getnexttoken
jj_ntk    1
jj_gen
return token
/** get the specific token. */
final public token gettoken int index
token t   token
for  int i   0  i < index  i
if  t next    null
t   t next
else
t   t next   token_source getnexttoken
return t
private int jj_ntk
if   jj_nt   token next     null
return  jj_ntk    token next   token_source getnexttoken    kind
else
return  jj_ntk   jj_nt kind
private final java util list jj_expentries   new java util arraylist
private int jj_expentry
private int jj_kind    1
/** generate parseexception. */
public parseexception generateparseexception
jj_expentries clear
boolean la1tokens   new boolean
if  jj_kind >  0
la1tokens   true
jj_kind    1
for  int i   0  i < 33  i
if  jj_la1    jj_gen
for  int j   0  j < 32  j
if   jj_la1_0    1 << j      0
la1tokens   true
if   jj_la1_1    1 << j      0
la1tokens   true
if   jj_la1_2    1 << j      0
la1tokens   true
for  int i   0  i < 71  i
if  la1tokens
jj_expentry   new int
jj_expentry   i
jj_expentries add jj_expentry
int exptokseq   new int
for  int i   0  i < jj_expentries size    i
exptokseq    int  jj_expentries get i
return new parseexception token  exptokseq  tokenimage
/** enable tracing. */
final public void enable_tracing
/** disable tracing. */
final public void disable_tracing