/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql exec errors
import java util arraylist
import java util hashmap
import java util hashset
import java util list
import java util map
import java util set
import java util map entry
import java util regex pattern
import org apache hadoop mapred jobconf
/**
* simple heuristic where the query and the lines of the task log file are run
* through regular expressions to see if they resemble a known error condition.
*
* only a single regular expression can be supplied to match the query whereas
* multiple regular expressions can be supplied to match lines from the log file.
* a mapping is maintained from the regular expression to the lines from the log
* file that it matched.
*/
public abstract class regexerrorheuristic implements errorheuristic
private string query   null
private jobconf conf   null
// pattern to look for in the hive query and whether it matched
private string queryregex   null
private boolean querymatches   false
// the regexes to look for in the log files
private final set<string> logregexes   new hashset<string>
// mapping from the regex to lines in the log file where find() == true
private final map<string  list<string>> regextologlines   new hashmap<string  list<string>>
private final map<string  pattern> regextopattern   new hashmap<string  pattern>
public regexerrorheuristic
protected void setqueryregex string queryregex
this queryregex    queryregex
protected string getqueryregex
return queryregex
protected boolean getquerymatches
return querymatches
protected set<string> getlogregexes
return this logregexes
protected map<string  list<string>> getregextologlines
return this regextologlines
protected jobconf getconf
return conf
@override
/**
* before init is called, logregexes and queryregexes should be populated.
*/
public void init string query  jobconf conf
this query   query
this conf   conf
assert  logregexes  null      queryregex    null
pattern querypattern   pattern compile queryregex  pattern case_insensitive
querymatches   querypattern matcher query  find
for string regex   logregexes
regextopattern put regex  pattern compile regex  pattern case_insensitive
regextologlines put regex  new arraylist<string>
@override
public abstract errorandsolution geterrorandsolution
@override
public void processlogline string line
if querymatches
for entry<string  pattern> e   regextopattern entryset
string regex   e getkey
pattern p   e getvalue
boolean linematches   p matcher line  find
if linematches
regextologlines get regex  add line
/**
* resets to state before any processlogline() calls.
*/
protected void reset
for list<string> lst   regextologlines values
lst clear