/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql index
import java util list
import java util set
import org apache hadoop conf configurable
import org apache hadoop hive conf hiveconf
import org apache hadoop hive metastore api index
import org apache hadoop hive ql exec task
import org apache hadoop hive ql hooks readentity
import org apache hadoop hive ql hooks writeentity
import org apache hadoop hive ql metadata hiveexception
import org apache hadoop hive ql metadata partition
import org apache hadoop hive ql parse parsecontext
import org apache hadoop hive ql plan exprnodedesc
/**
* hiveindexhandler defines a pluggable interface for adding new index handlers
* to hive.
*/
public interface hiveindexhandler extends configurable
/**
* determines whether this handler implements indexes by creating an index
* table.
*
* @return true if index creation implies creation of an index table in hive;
*         false if the index representation is not stored in a hive table
*/
boolean usesindextable
/**
* requests that the handler validate an index definition and fill in
* additional information about its stored representation.
*
* @param basetable
*          the definition of the table being indexed
*
* @param index
*          the definition of the index being created
*
* @param indextable
*          a partial definition of the index table to be used for storing the
*          index representation, or null if usesindextable() returns false;
*          the handler can augment the index's storage descriptor (e.g. with
*          information about input/output format) and/or the index table's
*          definition (typically with additional columns containing the index
*          representation, e.g. pointers into hdfs).
*
* @throws hiveexception if the index definition is invalid with respect to
*         either the base table or the supplied index table definition
*/
void analyzeindexdefinition
org apache hadoop hive metastore api table basetable
org apache hadoop hive metastore api index index
org apache hadoop hive metastore api table indextable
throws hiveexception
/**
* requests that the handler generate a plan for building the index; the plan
* should read the base table and write out the index representation.
*
* @param basetbl
*          the definition of the table being indexed
*
* @param index
*          the definition of the index
*
* @param basetblpartitions
*          list of base table partitions with each element mirrors to the
*          corresponding one in indextblpartitions
*
* @param indextbl
*          the definition of the index table, or null if usesindextable()
*          returns null
*
* @param inputs
*          inputs for hooks, supplemental outputs going
*          along with the return value
*
* @param outputs
*          outputs for hooks, supplemental outputs going
*          along with the return value
*
* @return list of tasks to be executed in parallel for building the index
*
* @throws hiveexception if plan generation fails
*/
list<task<?>> generateindexbuildtasklist
org apache hadoop hive ql metadata table basetbl
org apache hadoop hive metastore api index index
list<partition> indextblpartitions  list<partition> basetblpartitions
org apache hadoop hive ql metadata table indextbl
set<readentity> inputs  set<writeentity> outputs
throws hiveexception
/**
* generate the list of tasks required to run an index optimized sub-query for the
* given predicate, using the given indexes. if multiple indexes are
* provided, it is up to the handler whether to use none, one, some or all of
* them. the supplied predicate may reference any of the columns from any of
* the indexes. if the handler decides to use more than one index, it is
* responsible for generating tasks to combine their search results
* (e.g. performing a join on the result).
* @param indexes
* @param predicate
* @param pctx
* @param querycontext contains results, such as query tasks and input configuration
*/
void generateindexquery list<index> indexes  exprnodedesc predicate
parsecontext pctx  hiveindexquerycontext querycontext
/**
* check the size of an input query to make sure it fits within the bounds
*
* @param inputsize size (in bytes) of the query in question
* @param conf
* @return true if query is within the bounds
*/
boolean checkquerysize long inputsize  hiveconf conf