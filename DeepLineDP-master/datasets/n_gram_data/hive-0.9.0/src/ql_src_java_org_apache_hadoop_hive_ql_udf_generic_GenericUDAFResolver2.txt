/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql udf generic
import org apache hadoop hive ql parse semanticexception
/**
* this interface extends the <tt>genericudafresolver</tt> interface and
* provides more flexibility in terms of discovering the parameter types
* supplied to the udaf. implementations that extend this interface will
* also have access to extra information such as the specification of the
* <tt>distinct</tt> qualifier or the invocation with the special wildcard
* character.
* <p>
* <b>note:</b> the implementation of function does not have to handle the
* actual <tt>distinct</tt> or wildcard implementation. this information is
* provided only to allow the function implementation to accept or reject
* such invocations. for example - the implementation of <tt>count</tt> udaf
* requires that the <tt>distinct</tt> qualifier be supplied when more than
* one parameters are specified in the invocation. the actual filtering of
* data bound to parameter types for <tt>distinct</tt> implementation is
* handled by the framework and not the <tt>count</tt> udaf implementation.
*/
@suppresswarnings
public interface genericudafresolver2 extends genericudafresolver
/**
* get the evaluator for the parameter types.
*
* the reason that this function returns an object instead of a class is
* because it is possible that the object needs some configuration (that can
* be serialized). in that case the class of the object has to implement the
* serializable interface. at execution time, we will deserialize the object
* from the plan and use it to evaluate the aggregations.
* <p>
* if the class of the object does not implement serializable, then we will
* create a new instance of the class at execution time.
* </p>
*
* @param info the parameter information that is applicable to the udaf being
*          invoked.
* @throws semanticexception
*/
genericudafevaluator getevaluator
genericudafparameterinfo info  throws semanticexception