/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql exec
import java io serializable
import java util arraylist
import java util list
import org apache hadoop hive conf hiveconf
import org apache hadoop hive ql io rcfile merge blockmergetask
import org apache hadoop hive ql io rcfile merge mergework
import org apache hadoop hive ql plan conditionalwork
import org apache hadoop hive ql plan copywork
import org apache hadoop hive ql plan ddlwork
import org apache hadoop hive ql plan explainwork
import org apache hadoop hive ql plan fetchwork
import org apache hadoop hive ql plan functionwork
import org apache hadoop hive ql plan mapredlocalwork
import org apache hadoop hive ql plan mapredwork
import org apache hadoop hive ql plan movework
import org apache hadoop hive ql plan statswork
/**
* taskfactory implementation.
**/
public final class taskfactory
/**
* tasktuple.
*
* @param <t>
*/
public static final class tasktuple<t extends serializable>
public class<t> workclass
public class<? extends task<t>> taskclass
public tasktuple class<t> workclass  class<? extends task<t>> taskclass
this workclass   workclass
this taskclass   taskclass
public static arraylist<tasktuple<? extends serializable>> taskvec
static
taskvec   new arraylist<tasktuple<? extends serializable>>
taskvec add new tasktuple<movework> movework class  movetask class
taskvec add new tasktuple<fetchwork> fetchwork class  fetchtask class
taskvec add new tasktuple<copywork> copywork class  copytask class
taskvec add new tasktuple<ddlwork> ddlwork class  ddltask class
taskvec add new tasktuple<functionwork> functionwork class
functiontask class
taskvec
add new tasktuple<explainwork> explainwork class  explaintask class
taskvec add new tasktuple<conditionalwork> conditionalwork class
conditionaltask class
taskvec add new tasktuple<mapredwork> mapredwork class
mapredtask class
taskvec add new tasktuple<mapredlocalwork> mapredlocalwork class
mapredlocaltask class
taskvec add new tasktuple<statswork> statswork class
statstask class
taskvec add new tasktuple<mergework> mergework class
blockmergetask class
private static threadlocal<integer> tid   new threadlocal<integer>
@override
protected synchronized integer initialvalue
return integer valueof 0
public static int getandincrementid
int curvalue   tid get   intvalue
tid set new integer curvalue   1
return curvalue
public static void resetid
tid set integer valueof 0
@suppresswarnings
public static <t extends serializable> task<t> get class<t> workclass
hiveconf conf
for  tasktuple<? extends serializable> t   taskvec
if  t workclass    workclass
try
task<t> ret    task<t>  t taskclass newinstance
ret setid     integer tostring getandincrementid
return ret
catch  exception e
throw new runtimeexception e
throw new runtimeexception     workclass getname
public static <t extends serializable> task<t> get t work  hiveconf conf
task<? extends serializable>    tasklist
task<t> ret   get  class<t>  work getclass    conf
ret setwork work
if  tasklist length    0
return  ret
arraylist<task<? extends serializable>> clist   new arraylist<task<? extends serializable>>
for  task<? extends serializable> tsk   tasklist
clist add tsk
ret setchildtasks clist
return  ret
public static <t extends serializable> task<t> getandmakechild t work
hiveconf conf  task<? extends serializable>    tasklist
task<t> ret   get  class<t>  work getclass    conf
ret setwork work
if  tasklist length    0
return  ret
makechild ret  tasklist
return  ret
public static  void makechild task<?> ret
task<? extends serializable>    tasklist
// add the new task as child of each of the passed in tasks
for  task<? extends serializable> tsk   tasklist
list<task<? extends serializable>> children   tsk getchildtasks
if  children    null
children   new arraylist<task<? extends serializable>>
children add ret
tsk setchildtasks children
private taskfactory
// prevent instantiation