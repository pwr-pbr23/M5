/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql udf generic
import org apache hadoop hive ql exec udfargumentexception
import org apache hadoop hive ql metadata hiveexception
import org apache hadoop hive serde2 objectinspector objectinspector
import org apache hadoop hive serde2 objectinspector structobjectinspector
/**
* a generic user-defined table generating function (udtf)
*
* generates a variable number of output rows for a single input row. useful for
* explode(array)...
*/
public abstract class genericudtf
collector collector   null
/**
* initialize this genericudtf. this will be called only once per instance.
*
* @param argois
*          an array of objectinspectors for the arguments
* @return a structobjectinspector for output. the output struct represents a
*         row of the table where the fields of the stuct are the columns. the
*         field names are unimportant as they will be overridden by user
*         supplied column aliases.
*/
public abstract structobjectinspector initialize objectinspector argois
throws udfargumentexception
/**
* give a set of arguments for the udtf to process.
*
* @param args
*          object array of arguments
*/
public abstract void process object args  throws hiveexception
/**
* called to notify the udtf that there are no more rows to process.
* clean up code or additional forward() calls can be made here.
*/
public abstract void close   throws hiveexception
/**
* associates a collector with this udtf. can't be specified in the
* constructor as the udtf may be initialized before the collector has been
* constructed.
*
* @param collector
*/
public final void setcollector collector collector
this collector   collector
/**
* passes an output row to the collector.
*
* @param o
* @throws hiveexception
*/
protected final void forward object o  throws hiveexception
collector collect o