/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive service
import java io bufferedreader
import java io file
import java io filenotfoundexception
import java io fileoutputstream
import java io filereader
import java io ioexception
import java io printstream
import java io unsupportedencodingexception
import java util arraylist
import java util list
import java util map
import java util properties
import org apache commons cli optionbuilder
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop hive common serverutils
import org apache hadoop hive common logutils
import org apache hadoop hive common logutils loginitializationexception
import org apache hadoop hive common cli commonclioptions
import org apache hadoop hive conf hiveconf
import org apache hadoop hive metastore hivemetastore
import org apache hadoop hive metastore api metaexception
import org apache hadoop hive metastore api schema
import org apache hadoop hive ql commandneedretryexception
import org apache hadoop hive ql driver
import org apache hadoop hive ql plan api queryplan
import org apache hadoop hive ql processors commandprocessor
import org apache hadoop hive ql processors commandprocessorfactory
import org apache hadoop hive ql processors commandprocessorresponse
import org apache hadoop hive ql session sessionstate
import org apache hadoop hive shims shimloader
import org apache hadoop mapred clusterstatus
import org apache thrift texception
import org apache thrift tprocessor
import org apache thrift tprocessorfactory
import org apache thrift protocol tbinaryprotocol
import org apache thrift server tserver
import org apache thrift server tthreadpoolserver
import org apache thrift transport tserversocket
import org apache thrift transport tservertransport
import org apache thrift transport ttransport
import org apache thrift transport ttransportfactory
import org apache hadoop fs filesystem
import org apache hadoop fs path
import com facebook fb303 fb_status
/**
* thrift hive server implementation.
*/
public class hiveserver extends thrifthive
private static final string version
/**
* default port on which to start the hive server
*/
private static final int default_hive_server_port   10000
/**
* default minimum number of threads serving the hive server
*/
private static final int default_min_worker_threads   100
/**
* default maximum number of threads serving the hive server
*/
private static final int default_max_worker_threads   integer max_value
/**
* handler which implements the hive interface this class can be used in lieu
* of the hiveclient class to get an embedded server.
*/
public static class hiveserverhandler extends hivemetastore hmshandler
implements hiveinterface
/**
* hive server uses org.apache.hadoop.hive.ql.driver for run() and
* getresults() methods.
* it is the instance of the last hive query.
*/
private driver driver
private commandprocessorresponse response
/**
* for processors other than hive queries (driver), they output to session.out (a temp file)
* first and the fetchone/fetchn/fetchall functions get the output from pipein.
*/
private bufferedreader pipein
/**
* flag that indicates whether the last executed command was a hive query.
*/
private boolean ishivequery
public static final log log   logfactory getlog hiveserver class getname
/**
* construct a new handler.
*
* @throws metaexception unable to create metastore
*/
public hiveserverhandler   throws metaexception
this new hiveconf sessionstate class
/**
* construct a new handler with the specified hive configuration.
*
* @param conf caller specified hive configuration
* @throws metaexception unable to create metastore
*/
public hiveserverhandler hiveconf conf  throws metaexception
super hiveserver class getname    conf
ishivequery   false
driver   null
sessionstate session   new sessionstate conf
sessionstate start session
setupsessionio session
private void setupsessionio sessionstate session
try
log info     session gettmpoutputfile   tostring
session in   null     hive server's session input stream is not used
// open a per-session file in auto-flush mode for writing temp results
session out   new printstream new fileoutputstream session gettmpoutputfile     true
// todo: for hadoop jobs, progress is printed out to session.err,
// we should find a way to feed back job progress to client
session err   new printstream system err  true
catch  ioexception e
log error    e
try
session in   null
session out   new printstream system out  true
session err   new printstream system err  true
catch  unsupportedencodingexception ee
ee printstacktrace
session out   null
session err   null
/**
* executes a query.
*
* @param cmd
*          hiveql query to execute
*/
public void execute string cmd  throws hiveserverexception  texception
hiveserverhandler log info     cmd
sessionstate session   sessionstate get
string cmd_trimmed   cmd trim
string tokens   cmd_trimmed split
string cmd_1   cmd_trimmed substring tokens length    trim
int ret   0
string errormessage
string sqlstate   null
try
commandprocessor proc   commandprocessorfactory get tokens
if  proc    null
if  proc instanceof driver
ishivequery   true
driver    driver  proc
// in hive server mode, we are not able to retry in the fetchtask
// case, when calling fetch quueries since execute() has returned.
// for now, we disable the test attempts.
driver settrycount integer max_value
response   driver run cmd
else
ishivequery   false
driver   null
// need to reset output for each non-hive query
setupsessionio session
response   proc run cmd_1
ret   response getresponsecode
sqlstate   response getsqlstate
errormessage   response geterrormessage
catch  exception e
hiveserverexception ex   new hiveserverexception
ex setmessage     e tostring
ex seterrorcode ret    0?  10000  ret
throw ex
if  ret    0
throw new hiveserverexception     ret
errormessage  ret  sqlstate
/**
* should be called by the client at the end of a session.
*/
public void clean
if  driver    null
driver close
driver destroy
sessionstate session   sessionstate get
if  session gettmpoutputfile      null
session gettmpoutputfile   delete
pipein   null
/**
* return the status information about the map-reduce cluster.
*/
public hiveclusterstatus getclusterstatus   throws hiveserverexception
texception
hiveclusterstatus hcs
try
driver drv   new driver
drv init
clusterstatus cs   drv getclusterstatus
jobtrackerstate state   jobtrackerstate valueof shimloader gethadoopshims   getjobtrackerstate cs  name
hcs   new hiveclusterstatus cs gettasktrackers    cs getmaptasks    cs
getreducetasks    cs getmaxmaptasks    cs getmaxreducetasks
state
catch  exception e
log error e tostring
e printstacktrace
hiveserverexception ex   new hiveserverexception
ex setmessage     e tostring
throw ex
return hcs
/**
* return the hive schema of the query result.
*/
public schema getschema   throws hiveserverexception  texception
if   ishivequery
schema schema   response getschema
if  schema    null
// return empty schema if the last command was not a hive query
return new schema
else
return schema
assert driver    null
try
schema schema   driver getschema
if  schema    null
schema   new schema
log info     schema
return schema
catch  exception e
log error e tostring
e printstacktrace
hiveserverexception ex   new hiveserverexception
ex setmessage     e tostring
throw ex
/**
* return the thrift schema of the query result.
*/
public schema getthriftschema   throws hiveserverexception  texception
if   ishivequery
// return empty schema if the last command was not a hive query
return new schema
assert driver    null
try
schema schema   driver getthriftschema
if  schema    null
schema   new schema
log info     schema
return schema
catch  exception e
log error e tostring
e printstacktrace
hiveserverexception ex   new hiveserverexception
ex setmessage     e tostring
throw ex
/**
* fetches the next row in a query result set.
*
* @return the next row in a query result set. null if there is no more row
*         to fetch.
*/
public string fetchone   throws hiveserverexception  texception
if   ishivequery
// return no results if the last command was not a hive query
list<string> results   new arraylist<string> 1
readresults results  1
if  results size   > 0
return results get 0
else       throw an eof exception
throw new hiveserverexception    0
assert driver    null
arraylist<string> result   new arraylist<string>
driver setmaxrows 1
try
if  driver getresults result
return result get 0
// todo: cannot return null here because thrift cannot handle nulls
// todo: returning empty string for now. need to figure out how to
// todo: return null in some other way
throw new hiveserverexception    0
// return "";
catch  commandneedretryexception e
hiveserverexception ex   new hiveserverexception
ex setmessage e getmessage
throw ex
catch  ioexception e
hiveserverexception ex   new hiveserverexception
ex setmessage e getmessage
throw ex
private void cleantmpfile
if  pipein    null
sessionstate session   sessionstate get
file tmp   session gettmpoutputfile
tmp delete
pipein   null
/**
* reads the temporary results for non-hive (non-driver) commands to the
* resulting list of strings.
* @param results list of strings containing the results
* @param nlines number of lines read at once. if it is <= 0, then read all lines.
*/
private void readresults list<string> results  int nlines
if  pipein    null
sessionstate session   sessionstate get
file tmp   session gettmpoutputfile
try
pipein   new bufferedreader new filereader tmp
catch  filenotfoundexception e
log error     tmp      e
return
boolean readall   false
for  int i   0  i < nlines    nlines <  0    i
try
string line   pipein readline
if  line    null
// reached the end of the result file
readall   true
break
else
results add line
catch  ioexception e
log error    e
readall   true
if  readall
cleantmpfile
/**
* fetches numrows rows.
*
* @param numrows
*          number of rows to fetch.
* @return a list of rows. the size of the list is numrows if there are at
*         least numrows rows available to return. the size is smaller than
*         numrows if there aren't enough rows. the list will be empty if
*         there is no more row to fetch or numrows == 0.
* @throws hiveserverexception
*           invalid value for numrows (numrows < 0)
*/
public list<string> fetchn int numrows  throws hiveserverexception
texception
if  numrows < 0
hiveserverexception ex   new hiveserverexception
ex setmessage     numrows
throw ex
arraylist<string> result   new arraylist<string>
if   ishivequery
readresults result  numrows
return result
assert driver    null
driver setmaxrows numrows
try
driver getresults result
catch  commandneedretryexception e
hiveserverexception ex   new hiveserverexception
ex setmessage e getmessage
throw ex
catch  ioexception e
hiveserverexception ex   new hiveserverexception
ex setmessage e getmessage
throw ex
return result
/**
* fetches all the rows in a result set.
*
* @return all the rows in a result set of a query executed using execute
*         method.
*
*         todo: currently the server buffers all the rows before returning
*         them to the client. decide whether the buffering should be done
*         in the client.
*/
public list<string> fetchall   throws hiveserverexception  texception
arraylist<string> rows   new arraylist<string>
arraylist<string> result   new arraylist<string>
if   ishivequery
// return all results if numrows <= 0
readresults result  0
return result
try
while  driver getresults result
rows addall result
result clear
catch  commandneedretryexception e
hiveserverexception ex   new hiveserverexception
ex setmessage e getmessage
throw ex
catch  ioexception e
hiveserverexception ex   new hiveserverexception
ex setmessage e getmessage
throw ex
return rows
/**
* return the status of the server.
*/
@override
public fb_status getstatus
return fb_status alive
/**
* return the version of the server software.
*/
@override
public string getversion
return version
@override
public queryplan getqueryplan   throws hiveserverexception  texception
queryplan qp   new queryplan
if   ishivequery
return qp
assert driver    null
// todo for now only return one query at a time
// going forward, all queries associated with a single statement
// will be returned in a single queryplan
try
qp addtoqueries driver getqueryplan
catch  exception e
hiveserverexception ex   new hiveserverexception
ex setmessage e tostring
throw ex
return qp
/**
* thrifthiveprocessorfactory.
*
*/
public static class thrifthiveprocessorfactory extends tprocessorfactory
private final hiveconf conf
public thrifthiveprocessorfactory tprocessor processor  hiveconf conf
super processor
this conf   conf
@override
public tprocessor getprocessor ttransport trans
try
iface handler   new hiveserverhandler new hiveconf conf
return new thrifthive processor handler
catch  exception e
throw new runtimeexception e
/**
* hiveserver specific cli
*
*/
static public class hiveservercli extends commonclioptions
private static final string option_max_worker_threads
private static final string option_min_worker_threads
public int port   default_hive_server_port
public int minworkerthreads   default_min_worker_threads
public int maxworkerthreads   default_max_worker_threads
@suppresswarnings
public hiveservercli
super    true
// -p port
options addoption optionbuilder
hasarg
withargname
withdescription
default_hive_server_port
create
// min worker thread count
options addoption optionbuilder
hasarg
withlongopt option_min_worker_threads
withdescription
default_min_worker_threads
create
// max worker thread count
options addoption optionbuilder
hasarg
withlongopt option_max_worker_threads
withdescription
default_max_worker_threads
create
@override
public void parse string args
super parse args
// support the old syntax "hiveserver [port [threads]]" but complain
args   commandline getargs
if  args length >  1
// complain about the deprecated syntax -- but still run
system err println
port   integer parseint args
if  args length >  2
minworkerthreads   integer parseint args
// notice that command line options take precedence over the
// deprecated (old style) naked args...
if  commandline hasoption
port   integer parseint commandline getoptionvalue
else
// legacy handling
string hiveport   system getenv
if  hiveport    null
port   integer parseint hiveport
if  commandline hasoption option_min_worker_threads
minworkerthreads   integer parseint
commandline getoptionvalue option_min_worker_threads
if  commandline hasoption option_max_worker_threads
maxworkerthreads   integer parseint
commandline getoptionvalue option_max_worker_threads
public static void main string args
try
hiveservercli cli   new hiveservercli
cli parse args
// note: it is critical to do this prior to initializing log4j, otherwise
// any log specific settings via hiveconf will be ignored
properties hiveconf   cli addhiveconftosystemproperties
// note: it is critical to do this here so that log4j is reinitialized
// before any of the other core hive classes are loaded
try
logutils inithivelog4j
catch  loginitializationexception e
hiveserverhandler log warn e getmessage
hiveconf conf   new hiveconf hiveserverhandler class
serverutils cleanupscratchdir conf
tservertransport servertransport   new tserversocket cli port
// set all properties specified on the command line
for  map entry<object  object> item   hiveconf entryset
conf set  string  item getkey     string  item getvalue
thrifthiveprocessorfactory hfactory
new thrifthiveprocessorfactory null  conf
tthreadpoolserver args sargs   new tthreadpoolserver args servertransport
processorfactory hfactory
transportfactory new ttransportfactory
protocolfactory new tbinaryprotocol factory
minworkerthreads cli minworkerthreads
maxworkerthreads cli maxworkerthreads
tserver server   new tthreadpoolserver sargs
string msg       cli port
cli minworkerthreads
cli maxworkerthreads
hiveserverhandler log info msg
if  cli isverbose
system err println msg
server serve
catch  exception x
x printstacktrace