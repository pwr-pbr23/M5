/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql exec persistence
import java io ioexception
import java io objectinput
import java io objectoutput
import java util arraylist
import org apache hadoop hive ql exec mapjoinmetadata
import org apache hadoop hive ql exec hashtablesinkoperator hashtablesinkobjectctx
import org apache hadoop hive serde2 serdeexception
import org apache hadoop hive serde2 objectinspector objectinspectorutils
import org apache hadoop hive serde2 objectinspector objectinspectorutils objectinspectorcopyoption
import org apache hadoop io writable
public class mapjoindoublekeys extends abstractmapjoinkey
protected transient object obj1
protected transient object obj2
public mapjoindoublekeys
/**
* @param obj1
* @param obj2
*/
public mapjoindoublekeys object obj1  object obj2
this obj1   obj1
this obj2   obj2
@override
public boolean equals object o
if  o instanceof mapjoindoublekeys
mapjoindoublekeys mobj    mapjoindoublekeys  o
object key1   mobj getobj1
object key2   mobj getobj2
if   obj1    null      key1    null
if   obj2    null      key2    null
return true
if   obj1    null      key1    null
if  obj1 equals key1
if   obj2    null      key2    null
if  obj2 equals key2
return true
return false
@override
public int hashcode
int hashcode   1
if  obj1    null
hashcode   metadatatag
else
hashcode     31   obj1 hashcode
if  obj2    null
hashcode    metadatatag
else
hashcode     31   obj2 hashcode
return hashcode
@override
public void readexternal objectinput in  throws ioexception  classnotfoundexception
try
// get the tabledesc from the map stored in the mapjoin operator
hashtablesinkobjectctx ctx   mapjoinmetadata get integer valueof metadatatag
writable val   ctx getserde   getserializedclass   newinstance
val readfields in
arraylist<object> list    arraylist<object>  objectinspectorutils copytostandardobject ctx
getserde   deserialize val   ctx getserde   getobjectinspector
objectinspectorcopyoption writable
if  list    null
obj1   null
obj2   null
else
obj1   list get 0
obj2   list get 1
catch  exception e
throw new ioexception e
@override
public void writeexternal objectoutput out  throws ioexception
try
// out.writeint(metadatatag);
// get the tabledesc from the map stored in the mapjoin operator
hashtablesinkobjectctx ctx   mapjoinmetadata get integer valueof metadatatag
arraylist<object> list   mapjoinmetadata getlist
list add obj1
list add obj2
// different processing for key and value
writable outval   ctx getserde   serialize list  ctx getstandardoi
outval write out
catch  serdeexception e
throw new ioexception e
/**
* @return the obj
*/
public object getobj1
return obj1
/**
* @param obj1
*          the obj to set
*/
public void setobj1 object obj1
this obj1   obj1
/**
* @return the obj
*/
public object getobj2
return obj2
/**
* @param obj2
*          the obj to set
*/
public void setobj2 object obj2
this obj2   obj2
@override
public boolean hasanynulls boolean nullsafes
if  obj1    null     nullsafes    null     nullsafes
return true
if  obj2    null     nullsafes    null     nullsafes
return true
return false