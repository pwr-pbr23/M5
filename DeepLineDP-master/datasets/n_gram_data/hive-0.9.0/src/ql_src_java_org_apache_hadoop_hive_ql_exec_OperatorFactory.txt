/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql exec
import java io serializable
import java util arraylist
import java util list
import org apache hadoop hive ql plan collectdesc
import org apache hadoop hive ql plan extractdesc
import org apache hadoop hive ql plan filesinkdesc
import org apache hadoop hive ql plan filterdesc
import org apache hadoop hive ql plan forwarddesc
import org apache hadoop hive ql plan groupbydesc
import org apache hadoop hive ql plan hashtabledummydesc
import org apache hadoop hive ql plan hashtablesinkdesc
import org apache hadoop hive ql plan joindesc
import org apache hadoop hive ql plan lateralviewforwarddesc
import org apache hadoop hive ql plan lateralviewjoindesc
import org apache hadoop hive ql plan limitdesc
import org apache hadoop hive ql plan mapjoindesc
import org apache hadoop hive ql plan reducesinkdesc
import org apache hadoop hive ql plan smbjoindesc
import org apache hadoop hive ql plan scriptdesc
import org apache hadoop hive ql plan selectdesc
import org apache hadoop hive ql plan tablescandesc
import org apache hadoop hive ql plan udtfdesc
import org apache hadoop hive ql plan uniondesc
/**
* operatorfactory.
*
*/
public final class operatorfactory
/**
* optuple.
*
* @param <t>
*/
public static final class optuple<t extends serializable>
public class<t> descclass
public class<? extends operator<t>> opclass
public optuple class<t> descclass  class<? extends operator<t>> opclass
this descclass   descclass
this opclass   opclass
public static arraylist<optuple> opvec
static
opvec   new arraylist<optuple>
opvec add new optuple<filterdesc> filterdesc class  filteroperator class
opvec add new optuple<selectdesc> selectdesc class  selectoperator class
opvec add new optuple<forwarddesc> forwarddesc class  forwardoperator class
opvec add new optuple<filesinkdesc> filesinkdesc class  filesinkoperator class
opvec add new optuple<collectdesc> collectdesc class  collectoperator class
opvec add new optuple<scriptdesc> scriptdesc class  scriptoperator class
opvec add new optuple<reducesinkdesc> reducesinkdesc class  reducesinkoperator class
opvec add new optuple<extractdesc> extractdesc class  extractoperator class
opvec add new optuple<groupbydesc> groupbydesc class  groupbyoperator class
opvec add new optuple<joindesc> joindesc class  joinoperator class
opvec add new optuple<mapjoindesc> mapjoindesc class  mapjoinoperator class
opvec add new optuple<smbjoindesc> smbjoindesc class  smbmapjoinoperator class
opvec add new optuple<limitdesc> limitdesc class  limitoperator class
opvec add new optuple<tablescandesc> tablescandesc class  tablescanoperator class
opvec add new optuple<uniondesc> uniondesc class  unionoperator class
opvec add new optuple<udtfdesc> udtfdesc class  udtfoperator class
opvec add new optuple<lateralviewjoindesc> lateralviewjoindesc class
lateralviewjoinoperator class
opvec add new optuple<lateralviewforwarddesc> lateralviewforwarddesc class
lateralviewforwardoperator class
opvec add new optuple<hashtabledummydesc> hashtabledummydesc class
hashtabledummyoperator class
opvec add new optuple<hashtablesinkdesc> hashtablesinkdesc class
hashtablesinkoperator class
public static <t extends serializable> operator<t> get class<t> opclass
for  optuple o   opvec
if  o descclass    opclass
try
operator<t> op    operator<t>  o opclass newinstance
op initializecounters
return op
catch  exception e
e printstacktrace
throw new runtimeexception e
throw new runtimeexception
opclass getname
public static <t extends serializable> operator<t> get class<t> opclass
rowschema rwsch
operator<t> ret   get opclass
ret setschema rwsch
return ret
/**
* returns an operator given the conf and a list of children operators.
*/
public static <t extends serializable> operator<t> get t conf
operator<? extends serializable>    oplist
operator<t> ret   get  class<t>  conf getclass
ret setconf conf
if  oplist length    0
return  ret
arraylist<operator<? extends serializable>> clist   new arraylist<operator<? extends serializable>>
for  operator op   oplist
clist add op
ret setchildoperators clist
// add this parent to the children
for  operator op   oplist
list<operator<? extends serializable>> parents   op getparentoperators
if  parents    null
parents   new arraylist<operator<? extends serializable>>
parents add ret
op setparentoperators parents
return  ret
/**
* returns an operator given the conf and a list of children operators.
*/
public static <t extends serializable> operator<t> get t conf
rowschema rwsch  operator    oplist
operator<t> ret   get conf  oplist
ret setschema rwsch
return  ret
/**
* returns an operator given the conf and a list of parent operators.
*/
public static <t extends serializable> operator<t> getandmakechild t conf
operator    oplist
operator<t> ret   get  class<t>  conf getclass
ret setconf conf
if  oplist length    0
return  ret
// add the new operator as child of each of the passed in operators
for  operator op   oplist
list<operator> children   op getchildoperators
if  children    null
children   new arraylist<operator>
children add ret
op setchildoperators children
// add parents for the newly created operator
list<operator<? extends serializable>> parent   new arraylist<operator<? extends serializable>>
for  operator op   oplist
parent add op
ret setparentoperators parent
return  ret
/**
* returns an operator given the conf and a list of parent operators.
*/
public static <t extends serializable> operator<t> getandmakechild t conf
list<operator<? extends serializable>> oplist
operator<t> ret   get  class<t>  conf getclass
ret setconf conf
if  oplist size      0
return  ret
// add the new operator as child of each of the passed in operators
for  operator op   oplist
list<operator> children   op getchildoperators
if  children    null
children   new arraylist<operator>
children add ret
op setchildoperators children
// add parents for the newly created operator
list<operator<? extends serializable>> parent   new arraylist<operator<? extends serializable>>
for  operator op   oplist
parent add op
ret setparentoperators parent
return  ret
/**
* returns an operator given the conf and a list of parent operators.
*/
public static <t extends serializable> operator<t> getandmakechild t conf
rowschema rwsch  operator    oplist
operator<t> ret   getandmakechild conf  oplist
ret setschema rwsch
return  ret
/**
* returns an operator given the conf and a list of parent operators.
*/
public static <t extends serializable> operator<t> getandmakechild t conf
rowschema rwsch  list<operator<? extends serializable>> oplist
operator<t> ret   getandmakechild conf  oplist
ret setschema rwsch
return  ret
private operatorfactory
// prevent instantiation