/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive thrift client
import java io ioexception
import java security privilegedexceptionaction
import org apache hadoop hive thrift tfiltertransport
import org apache hadoop security usergroupinformation
import org apache thrift transport ttransport
import org apache thrift transport ttransportexception
/**
* the thrift sasl transports call sasl.createsaslserver and sasl.createsaslclient
* inside open(). so, we need to assume the correct ugi when the transport is opened
* so that the sasl mechanisms have access to the right principal. this transport
* wraps the sasl transports to set up the right ugi context for open().
*
* this is used on the client side, where the api explicitly opens a transport to
* the server.
*/
public class tugiassumingtransport extends tfiltertransport
protected usergroupinformation ugi
public tugiassumingtransport ttransport wrapped  usergroupinformation ugi
super wrapped
this ugi   ugi
@override
public void open   throws ttransportexception
try
ugi doas new privilegedexceptionaction<void>
public void run
try
wrapped open
catch  ttransportexception tte
// wrap the transport exception in an rte, since ugi.doas() then goes
// and unwraps this for us out of the doas block. we then unwrap one
// more time in our catch clause to get back the tte. (ugh)
throw new runtimeexception tte
return null
catch  ioexception ioe
throw new runtimeexception    ioe
catch  interruptedexception ie
throw new runtimeexception    ie
catch  runtimeexception rte
if  rte getcause   instanceof ttransportexception
throw  ttransportexception rte getcause
else
throw rte