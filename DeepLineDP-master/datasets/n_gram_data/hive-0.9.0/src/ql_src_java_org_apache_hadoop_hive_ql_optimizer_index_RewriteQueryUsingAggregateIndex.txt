/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql optimizer index
import java io serializable
import java util arraylist
import java util hashmap
import java util iterator
import java util linkedhashmap
import java util list
import java util map
import java util set
import java util stack
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop fs path
import org apache hadoop hive ql exec columninfo
import org apache hadoop hive ql exec functionregistry
import org apache hadoop hive ql exec groupbyoperator
import org apache hadoop hive ql exec operator
import org apache hadoop hive ql exec rowschema
import org apache hadoop hive ql exec selectoperator
import org apache hadoop hive ql exec tablescanoperator
import org apache hadoop hive ql lib node
import org apache hadoop hive ql lib nodeprocessor
import org apache hadoop hive ql lib nodeprocessorctx
import org apache hadoop hive ql metadata hiveexception
import org apache hadoop hive ql metadata table
import org apache hadoop hive ql parse opparsecontext
import org apache hadoop hive ql parse parsecontext
import org apache hadoop hive ql parse rowresolver
import org apache hadoop hive ql parse semanticexception
import org apache hadoop hive ql plan aggregationdesc
import org apache hadoop hive ql plan exprnodecolumndesc
import org apache hadoop hive ql plan exprnodedesc
import org apache hadoop hive ql plan groupbydesc
import org apache hadoop hive ql plan tablescandesc
import org apache hadoop hive ql udf generic genericudafevaluator
import org apache hadoop hive serde2 serdeexception
import org apache hadoop hive serde2 objectinspector objectinspector
import org apache hadoop hive serde2 objectinspector structfield
import org apache hadoop hive serde2 objectinspector structobjectinspector
import org apache hadoop hive serde2 typeinfo primitivetypeinfo
import org apache hadoop hive serde2 typeinfo typeinfo
import org apache hadoop hive serde2 typeinfo typeinfofactory
import org apache hadoop hive serde2 typeinfo typeinfoutils
/**
* this class defines a procedure factory used to rewrite the operator plan
* each method replaces the necessary base table data structures with
* the index table data structures for each operator.
*/
public final class rewritequeryusingaggregateindex
private static final log log   logfactory getlog rewritequeryusingaggregateindex class getname
private static rewritequeryusingaggregateindexctx rewritequeryctx   null
private rewritequeryusingaggregateindex
//this prevents the class from getting instantiated
private static class newqueryselectschemaproc implements nodeprocessor
public object process node nd  stack<node> stack  nodeprocessorctx ctx
object    nodeoutputs  throws semanticexception
selectoperator operator    selectoperator nd
rewritequeryctx    rewritequeryusingaggregateindexctx ctx
list<operator<? extends serializable>> childops   operator getchildoperators
operator<? extends serializable> childop   childops iterator   next
//we need to set the collist, outputcolumnnames, colexprmap,
// rowschema for only that selectoperator which precedes the groupbyoperator
// count(indexed_key_column) needs to be replaced by sum(`_count_of_indexed_key_column`)
if  childop instanceof groupbyoperator
list<exprnodedesc> selcollist
operator getconf   getcollist
selcollist add rewritequeryctx getaggrexprnode
list<string> seloutputcolnames
operator getconf   getoutputcolumnnames
seloutputcolnames add rewritequeryctx getaggrexprnode   getcolumn
rowschema selrs   operator getschema
list<columninfo> selrssignature
selrs getsignature
//need to create a new type for column[_count_of_indexed_key_column] node
primitivetypeinfo pti    primitivetypeinfo  typeinfofactory getprimitivetypeinfo
pti settypename
columninfo newci   new columninfo rewritequeryctx getaggregatefunction    pti     false
selrssignature add newci
selrs setsignature  arraylist<columninfo>  selrssignature
operator setschema selrs
return null
public static newqueryselectschemaproc getnewqueryselectschemaproc
return new newqueryselectschemaproc
/**
* this processor replaces the original tablescanoperator with
* the new tablescanoperator and metadata that scans over the
* index table rather than scanning over the orginal table.
*
*/
private static class replacetablescanopproc implements nodeprocessor
public object process node nd  stack<node> stack  nodeprocessorctx ctx
object    nodeoutputs  throws semanticexception
tablescanoperator scanoperator    tablescanoperator nd
rewritequeryctx    rewritequeryusingaggregateindexctx ctx
string basetablename   rewritequeryctx getbasetablename
string alias   null
if basetablename contains
alias    basetablename split
//need to remove the original tablescanoperators from these data structures
// and add new ones
map<tablescanoperator  table>  toptotable
rewritequeryctx getparsecontext   gettoptotable
map<string  operator<? extends serializable>>  topops
rewritequeryctx getparsecontext   gettopops
map<operator<? extends serializable>  opparsecontext>  opparsecontext
rewritequeryctx getparsecontext   getopparsectx
//need this to set rowresolver for new scanoperator
opparsecontext operatorcontext   opparsecontext get scanoperator
//remove original tablescanoperator
toptotable remove scanoperator
topops remove basetablename
opparsecontext remove scanoperator
//construct a new descriptor for the index table scan
tablescandesc indextablescandesc   new tablescandesc
indextablescandesc setgatherstats false
string indextablename   rewritequeryctx getindexname
table indextablehandle   null
try
indextablehandle   rewritequeryctx gethivedb   gettable indextablename
catch  hiveexception e
log error
log error org apache hadoop util stringutils stringifyexception e
throw new semanticexception e getmessage    e
string k   indextablename   path separator
indextablescandesc setstatsaggprefix k
scanoperator setconf indextablescandesc
//construct the new rowresolver for the new tablescanoperator
rowresolver rr   new rowresolver
try
structobjectinspector rowobjectinspector
structobjectinspector  indextablehandle getdeserializer   getobjectinspector
list<? extends structfield> fields   rowobjectinspector
getallstructfieldrefs
for  int i   0  i < fields size    i
rr put indextablename  fields get i  getfieldname    new columninfo fields
get i  getfieldname    typeinfoutils
gettypeinfofromobjectinspector fields get i
getfieldobjectinspector     indextablename  false
catch  serdeexception e
log error
log error org apache hadoop util stringutils stringifyexception e
throw new semanticexception e getmessage    e
//set row resolver for new table
operatorcontext setrowresolver rr
string tabnamewithalias   null
if alias    null
tabnamewithalias   alias       indextablename
else
tabnamewithalias   indextablename
//scan operator now points to other table
toptotable put scanoperator  indextablehandle
scanoperator getconf   setalias tabnamewithalias
scanoperator setalias indextablename
topops put tabnamewithalias  scanoperator
opparsecontext put scanoperator  operatorcontext
rewritequeryctx getparsecontext   settoptotable
hashmap<tablescanoperator  table>  toptotable
rewritequeryctx getparsecontext   settopops
hashmap<string  operator<? extends serializable>>  topops
rewritequeryctx getparsecontext   setopparsectx
linkedhashmap<operator<? extends serializable>  opparsecontext>  opparsecontext
return null
public static replacetablescanopproc getreplacetablescanproc
return new replacetablescanopproc
/**
* we need to replace the count(indexed_column_key) genericudaf aggregation function for
* group-by construct to "sum" genericudaf.
* this processor creates a new operator tree for a sample query that creates a groupbyoperator
* with sum aggregation function and uses that groupbyoperator information to replace
* the original groupbyoperator aggregation information.
* it replaces the aggregationdesc (aggregation descriptor) of the old groupbyoperator with the
* new aggregation desc of the new groupbyoperator.
*/
private static class newquerygroupbyschemaproc implements nodeprocessor
public object process node nd  stack<node> stack  nodeprocessorctx ctx
object    nodeoutputs  throws semanticexception
groupbyoperator operator    groupbyoperator nd
rewritequeryctx    rewritequeryusingaggregateindexctx ctx
//we need to replace the groupbyoperator which is in
//groupoptoinputtables map with the new groupbyoperator
if rewritequeryctx getparsecontext   getgroupoptoinputtables   containskey operator
list<exprnodedesc> gbykeylist   operator getconf   getkeys
string gbykeys   null
iterator<exprnodedesc> gbykeylistitr   gbykeylist iterator
while gbykeylistitr hasnext
exprnodedesc expr   gbykeylistitr next   clone
if expr instanceof exprnodecolumndesc
exprnodecolumndesc colexpr    exprnodecolumndesc expr
gbykeys   colexpr getcolumn
if gbykeylistitr hasnext
gbykeys   gbykeys
//the query contains the sum aggregation genericudaf
string selreplacementcommand
rewritequeryctx getaggregatefunction
rewritequeryctx getindexname
gbykeys
//create a new parsecontext for the query to retrieve its operator tree,
//and the required groupbyoperator from it
parsecontext newdagcontext   rewriteparsecontextgenerator generateoperatortree
rewritequeryctx getparsecontext   getconf
selreplacementcommand
//we get our new groupbyoperator here
map<groupbyoperator  set<string>> newgbyopmap   newdagcontext getgroupoptoinputtables
groupbyoperator newgbyoperator   newgbyopmap keyset   iterator   next
groupbydesc oldconf   operator getconf
//we need this information to set the correct collist, outputcolumnnames in selectoperator
exprnodecolumndesc aggrexprnode   null
//construct the new aggregationdesc to get rid of the current
//internal names and replace them with new internal names
//as required by the operator tree
groupbydesc newconf   newgbyoperator getconf
list<aggregationdesc> newaggrlist   newconf getaggregators
if newaggrlist    null    newaggrlist size   > 0
for  aggregationdesc aggregationdesc   newaggrlist
rewritequeryctx seteval aggregationdesc getgenericudafevaluator
aggrexprnode    exprnodecolumndesc aggregationdesc getparameters   get 0
rewritequeryctx setaggrexprnode aggrexprnode
//now the groupbyoperator has the new aggregationlist; sum(`_count_of_indexed_key`)
//instead of count(indexed_key)
opparsecontext gbyopc   rewritequeryctx getopc   get operator
rowresolver gbyrr   newdagcontext getopparsectx   get newgbyoperator  getrowresolver
gbyopc setrowresolver gbyrr
rewritequeryctx getopc   put operator  gbyopc
oldconf setaggregators  arraylist<aggregationdesc>  newaggrlist
operator setconf oldconf
else
//we just need to reset the genericudafevaluator and its name for this
//groupbyoperator whose parent is the reducesinkoperator
groupbydesc childconf    groupbydesc  operator getconf
list<aggregationdesc> childaggrlist   childconf getaggregators
if childaggrlist    null    childaggrlist size   > 0
for  aggregationdesc aggregationdesc   childaggrlist
list<exprnodedesc> paralist   aggregationdesc getparameters
list<objectinspector> parametersoilist   new arraylist<objectinspector>
for  exprnodedesc expr   paralist
parametersoilist add expr getwritableobjectinspector
genericudafevaluator evaluator   functionregistry getgenericudafevaluator
parametersoilist  false  false
aggregationdesc setgenericudafevaluator evaluator
aggregationdesc setgenericudafname
return null
public static newquerygroupbyschemaproc getnewquerygroupbyschemaproc
return new newquerygroupbyschemaproc