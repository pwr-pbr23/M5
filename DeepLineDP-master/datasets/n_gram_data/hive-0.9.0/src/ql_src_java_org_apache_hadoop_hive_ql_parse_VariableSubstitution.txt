/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql parse
import java util regex matcher
import java util regex pattern
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop hive conf hiveconf
import org apache hadoop hive conf hiveconf confvars
import org apache hadoop hive ql processors setprocessor
import org apache hadoop hive ql session sessionstate
public class variablesubstitution
private static final log l4j   logfactory getlog variablesubstitution class
protected static pattern varpat   pattern compile
protected static int max_subst   40
private string getsubstitute hiveconf conf  string var
string val   null
try
if  var startswith setprocessor system_prefix
val   system getproperty var substring setprocessor system_prefix length
catch securityexception se
l4j warn    se
if  val   null
if  var startswith setprocessor env_prefix
val   system getenv var substring setprocessor env_prefix length
if  val    null
if  var startswith setprocessor hiveconf_prefix
val   conf get var substring setprocessor hiveconf_prefix length
if  val   null
if var startswith setprocessor hivevar_prefix
val    sessionstate get   gethivevariables   get var substring setprocessor hivevar_prefix length
else
val   sessionstate get   gethivevariables   get var
return val
public string substitute  hiveconf conf  string expr
if  conf getboolvar confvars hivevariablesubstitute
l4j debug   expr
else
return expr
if  expr    null
return null
matcher match   varpat matcher
string eval   expr
for int s 0  s<max_subst  s
match reset eval
if   match find
return eval
string var   match group
var   var substring 2  var length   1      remove $
string val   getsubstitute conf  var
if  val    null
l4j debug   eval
return eval     return literal  no substitution found
// substitute
eval   eval substring 0  match start    val eval substring match end
throw new illegalstateexception
max_subst       expr