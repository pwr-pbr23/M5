/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql io
/**
* iocontext basically contains the position information of the current
* key/value. for blockcompressed files, isblockpointer should return true,
* and currentblockstart refers to the rcfile block or sequencefile block. for
* non compressed files, isblockpointer should return false, and
* currentblockstart refers to the beginning offset of the current row,
* nextblockstart refers the end of current row and beginning of next row.
*/
public class iocontext
private static threadlocal<iocontext> threadlocal   new threadlocal<iocontext>
@override
protected synchronized iocontext initialvalue     return new iocontext
public static iocontext get
return iocontext threadlocal get
long currentblockstart
long nextblockstart
long currentrow
boolean isblockpointer
boolean ioexceptions
// are we using the fact the input is sorted
boolean usesorted   false
// are we currently performing a binary search
boolean isbinarysearching   false
// do we want to end the binary search
boolean endbinarysearch   false
// the result of the comparison of the last row processed
comparison comparison   null
// the class name of the generic udf being used by the filter
string genericudfclassname   null
public static enum comparison
greater
less
equal
unknown
string inputfile
public iocontext
this currentblockstart   0
this nextblockstart    1
this currentrow   0
this isblockpointer   true
this ioexceptions   false
public long getcurrentblockstart
return currentblockstart
public void setcurrentblockstart long currentblockstart
this currentblockstart   currentblockstart
public long getnextblockstart
return nextblockstart
public void setnextblockstart long nextblockstart
this nextblockstart   nextblockstart
public long getcurrentrow
return currentrow
public void setcurrentrow long currentrow
this currentrow   currentrow
public boolean isblockpointer
return isblockpointer
public void setblockpointer boolean isblockpointer
this isblockpointer   isblockpointer
public string getinputfile
return inputfile
public void setinputfile string inputfile
this inputfile   inputfile
public void setioexceptions boolean ioe
this ioexceptions   ioe
public boolean getioexceptions
return ioexceptions
public boolean usesorted
return usesorted
public void setusesorted boolean usesorted
this usesorted   usesorted
public boolean isbinarysearching
return isbinarysearching
public void setisbinarysearching boolean isbinarysearching
this isbinarysearching   isbinarysearching
public boolean shouldendbinarysearch
return endbinarysearch
public void setendbinarysearch boolean endbinarysearch
this endbinarysearch   endbinarysearch
public comparison getcomparison
return comparison
public void setcomparison integer comparison
if  comparison    null    this isbinarysearching
// nothing we can do here, so just proceed normally from now on
endbinarysearch   true
else
if  comparison    null
this comparison   comparison unknown
else if  comparison intvalue   < 0
this comparison   comparison less
else if  comparison intvalue   > 0
this comparison   comparison greater
else
this comparison   comparison equal
public string getgenericudfclassname
return genericudfclassname
public void setgenericudfclassname string genericudfclassname
this genericudfclassname   genericudfclassname
/**
* the thread local iocontext is static, we may need to restart the search if, for instance,
* multiple files are being searched as part of a combinedhiverecordreader
*/
public void resetsortingvalues
this usesorted   false
this isbinarysearching   false
this endbinarysearch   false
this comparison   null
this genericudfclassname   null