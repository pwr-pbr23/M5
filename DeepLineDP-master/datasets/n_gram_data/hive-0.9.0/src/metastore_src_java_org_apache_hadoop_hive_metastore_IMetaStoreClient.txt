/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive metastore
import java util list
import java util map
import org apache hadoop hive metastore api alreadyexistsexception
import org apache hadoop hive metastore api configvalsecurityexception
import org apache hadoop hive metastore api database
import org apache hadoop hive metastore api fieldschema
import org apache hadoop hive metastore api hiveobjectprivilege
import org apache hadoop hive metastore api hiveobjectref
import org apache hadoop hive metastore api index
import org apache hadoop hive metastore api invalidobjectexception
import org apache hadoop hive metastore api invalidoperationexception
import org apache hadoop hive metastore api invalidpartitionexception
import org apache hadoop hive metastore api metaexception
import org apache hadoop hive metastore api nosuchobjectexception
import org apache hadoop hive metastore api partition
import org apache hadoop hive metastore api partitioneventtype
import org apache hadoop hive metastore api principalprivilegeset
import org apache hadoop hive metastore api principaltype
import org apache hadoop hive metastore api privilegebag
import org apache hadoop hive metastore api role
import org apache hadoop hive metastore api table
import org apache hadoop hive metastore api unknowndbexception
import org apache hadoop hive metastore api unknownpartitionexception
import org apache hadoop hive metastore api unknowntableexception
import org apache thrift texception
/**
* todo unnecessary when the server sides for both dbstore and filestore are
* merged
*/
public interface imetastoreclient
public void close
/**
* get the names of all databases in the metastore that match the given pattern.
* @param databasepattern
* @return list of database names.
* @throws metaexception
* @throws texception
*/
public list<string> getdatabases string databasepattern
throws metaexception  texception
/**
* get the names of all databases in the metastore.
* @return list of database names.
* @throws metaexception
* @throws texception
*/
public list<string> getalldatabases
throws metaexception  texception
/**
* get the names of all tables in the specified database that satisfy the supplied
* table name pattern.
* @param dbname
* @param tablepattern
* @return list of table names.
* @throws metaexception
* @throws texception
* @throws unknowndbexception
*/
public list<string> gettables string dbname  string tablepattern
throws metaexception  texception  unknowndbexception
/**
* get the names of all tables in the specified database.
* @param dbname
* @return list of table names.
* @throws metaexception
* @throws texception
* @throws unknowndbexception
*/
public list<string> getalltables string dbname
throws metaexception  texception  unknowndbexception
/**
* get a list of table names that match a filter.
* the filter operators are like, <, <=, >, >=, =, <>
*
* in the filter statement, values interpreted as strings must be enclosed in quotes,
* while values interpreted as integers should not be.  strings and integers are the only
* supported value types.
*
* the currently supported key names in the filter are:
* constants.hive_filter_field_owner, which filters on the tables' owner's name
*   and supports all filter operators
* constants.hive_filter_field_last_access, which filters on the last access times
*   and supports all filter operators except like
* constants.hive_filter_field_params, which filters on the tables' parameter keys and values
*   and only supports the filter operators = and <>.
*   append the parameter key name to hive_filter_field_params in the filter statement.
*   for example, to filter on parameter keys called "retention", the key name in the filter
*   statement should be constants.hive_filter_field_params + "retention"
*   also, = and <> only work for keys that exist in the tables.
*   e.g., filtering on tables where key1 <> value will only
*   return tables that have a value for the parameter key1.
* some example filter statements include:
* filter = constants.hive_filter_field_owner + " like \".*test.*\" and " +
*   constants.hive_filter_field_last_access + " = 0";
* filter = constants.hive_filter_field_owner + " = \"test_user\" and (" +
*   constants.hive_filter_field_params + "retention = \"30\" or " +
*   constants.hive_filter_field_params + "retention = \"90\")"
*
* @param dbname
*          the name of the database from which you will retrieve the table names
* @param filter
*          the filter string
* @param maxtables
*          the maximum number of tables returned
* @return  a list of table names that match the desired filter
*/
public list<string> listtablenamesbyfilter string dbname  string filter  short maxtables
throws metaexception  texception  invalidoperationexception  unknowndbexception
/**
* drop the table.
*
* @param dbname
*          the database for this table
* @param tablename
*          the table to drop
* @throws metaexception
*           could not drop table properly.
* @throws nosuchobjectexception
*           the table wasn't found.
* @throws texception
*           a thrift communication error occurred
* @throws existingdependentsexception
*/
public void droptable string dbname  string tablename  boolean deletedata
boolean ignoreuknowntab  throws metaexception  texception
nosuchobjectexception
/**
* drop the table in the default database.
*
* @param tablename
*          the table to drop
* @param deletedata
*          should we delete the underlying data
* @throws metaexception
*           could not drop table properly.
* @throws unknowntableexception
*           the table wasn't found.
* @throws texception
*           a thrift communication error occurred
* @throws nosuchobjectexception
*           the table wasn't found.
*
* @deprecated as of release 0.6.0 replaced by {@link #droptable(string, string, boolean, boolean)}.
*             this method will be removed in release 0.7.0.
*/
@deprecated
public void droptable string tablename  boolean deletedata
throws metaexception  unknowntableexception  texception
nosuchobjectexception
public void droptable string dbname  string tablename
throws metaexception  texception  nosuchobjectexception
public boolean tableexists string databasename  string tablename  throws metaexception
texception  unknowndbexception
/**
* check to see if the specified table exists in the default database.
* @param tablename
* @return true if default.tablename exists, false otherwise.
* @throws metaexception
* @throws texception
* @throws unknowndbexception
* @deprecated as of release 0.6.0 replaced by {@link #tableexists(string, string)}.
*             this method will be removed in release 0.7.0.
*/
@deprecated
public boolean tableexists string tablename  throws metaexception
texception  unknowndbexception
/**
* get a table object from the default database.
*
* @param tablename
*          name of the table to fetch.
* @return an object representing the table.
* @throws metaexception
*           could not fetch the table
* @throws texception
*           a thrift communication error occurred
* @throws nosuchobjectexception
*           in case the table wasn't found.
* @deprecated as of release 0.6.0 replaced by {@link #gettable(string, string)}.
*             this method will be removed in release 0.7.0.
*/
@deprecated
public table gettable string tablename  throws metaexception  texception
nosuchobjectexception
/**
* get a database object
* @param databasename  name of the database to fetch
* @return the database
* @throws nosuchobjectexception the database does not exist
* @throws metaexception could not fetch the database
* @throws texception a thrift communication error occurred
*/
public database getdatabase string databasename
throws nosuchobjectexception  metaexception  texception
/**
* get a table object.
*
* @param dbname
*          the database the table is located in.
* @param tablename
*          name of the table to fetch.
* @return an object representing the table.
* @throws metaexception
*           could not fetch the table
* @throws texception
*           a thrift communication error occurred
* @throws nosuchobjectexception
*           in case the table wasn't found.
*/
public table gettable string dbname  string tablename  throws metaexception
texception  nosuchobjectexception
/**
*
* @param dbname
*          the database the tables are located in.
* @param tablenames
*          the names of the tables to fetch
* @return a list of objects representing the tables.
*          only the tables that can be retrieved from the database are returned.  for example,
*          if none of the requested tables could be retrieved, an empty list is returned.
*          there is no guarantee of ordering of the returned tables.
* @throws invalidoperationexception
*          the input to this operation is invalid (e.g., the list of tables names is null)
* @throws unknowndbexception
*          the requested database could not be fetched.
* @throws texception
*          a thrift communication error occurred
* @throws metaexception
*          any other errors
*/
public list<table> gettableobjectsbyname string dbname  list<string> tablenames
throws metaexception  invalidoperationexception  unknowndbexception  texception
/**
* @param tablename
* @param dbname
* @param partvals
* @return the partition object
* @throws invalidobjectexception
* @throws alreadyexistsexception
* @throws metaexception
* @throws texception
* @see org.apache.hadoop.hive.metastore.api.thrifthivemetastore.iface#append_partition(java.lang.string,
*      java.lang.string, java.util.list)
*/
public partition appendpartition string tablename  string dbname
list<string> partvals  throws invalidobjectexception
alreadyexistsexception  metaexception  texception
public partition appendpartition string tablename  string dbname  string name
throws invalidobjectexception  alreadyexistsexception  metaexception  texception
/**
* add a partition to the table.
*
* @param partition
*          the partition to add
* @return the partition added
* @throws invalidobjectexception
*           could not find table to add to
* @throws alreadyexistsexception
*           partition already exists
* @throws metaexception
*           could not add partition
* @throws texception
*           thrift exception
*/
public partition add_partition partition partition
throws invalidobjectexception  alreadyexistsexception  metaexception
texception
/**
* add partitions to the table.
*
* @param partitions
*          the partitions to add
* @throws invalidobjectexception
*           could not find table to add to
* @throws alreadyexistsexception
*           partition already exists
* @throws metaexception
*           could not add partition
* @throws texception
*           thrift exception
*/
public int add_partitions list<partition> partitions
throws invalidobjectexception  alreadyexistsexception  metaexception
texception
/**
* @param tblname
* @param dbname
* @param partvals
* @return the partition object
* @throws metaexception
* @throws texception
* @see org.apache.hadoop.hive.metastore.api.thrifthivemetastore.iface#get_partition(java.lang.string,
*      java.lang.string, java.util.list)
*/
public partition getpartition string tblname  string dbname
list<string> partvals  throws nosuchobjectexception  metaexception  texception
/**
* @param dbname
* @param tblname
* @param name - partition name i.e. 'ds=2010-02-03/ts=2010-02-03 18%3a16%3a01'
* @return the partition object
* @throws metaexception
* @throws texception
* @see org.apache.hadoop.hive.metastore.api.thrifthivemetastore.iface#get_partition(java.lang.string,
*      java.lang.string, java.util.list)
*/
public partition getpartition string dbname  string tblname
string name  throws metaexception  unknowntableexception  nosuchobjectexception  texception
/**
* @param dbname
* @param tablename
* @param pvals
* @param username
* @param groupnames
* @return the partition
* @throws metaexception
* @throws unknowntableexception
* @throws nosuchobjectexception
* @throws texception
*/
public partition getpartitionwithauthinfo string dbname  string tablename
list<string> pvals  string username  list<string> groupnames
throws metaexception  unknowntableexception  nosuchobjectexception  texception
/**
* @param tbl_name
* @param db_name
* @param max_parts
* @return the list of partitions
* @throws nosuchobjectexception
* @throws metaexception
* @throws texception
*/
public list<partition> listpartitions string db_name  string tbl_name
short max_parts  throws nosuchobjectexception  metaexception  texception
public list<partition> listpartitions string db_name  string tbl_name
list<string> part_vals  short max_parts  throws nosuchobjectexception  metaexception  texception
public list<string> listpartitionnames string db_name  string tbl_name
short max_parts  throws metaexception  texception
public list<string> listpartitionnames string db_name  string tbl_name
list<string> part_vals  short max_parts
throws metaexception  texception  nosuchobjectexception
/**
* get list of partitions matching specified filter
* @param db_name the database name
* @param tbl_name the table name
* @param filter the filter string,
*    for example "part1 = \"p1_abc\" and part2 <= "\p2_test\"". filtering can
*    be done only on string partition keys.
* @param max_parts the maximum number of partitions to return,
*    all partitions are returned if -1 is passed
* @return list of partitions
* @throws metaexception
* @throws nosuchobjectexception
* @throws texception
*/
public list<partition> listpartitionsbyfilter string db_name  string tbl_name
string filter  short max_parts  throws metaexception
nosuchobjectexception  texception
/**
* @param dbname
* @param tablename
* @param s
* @param username
* @param groupnames
* @return the list of partitions
* @throws nosuchobjectexception
*/
public list<partition> listpartitionswithauthinfo string dbname
string tablename  short s  string username  list<string> groupnames
throws metaexception  texception  nosuchobjectexception
/**
* get partitions by a list of partition names.
* @param db_name database name
* @param tbl_name table name
* @param part_names list of partition names
* @return list of partition objects
* @throws nosuchobjectexception
* @throws metaexception
* @throws texception
*/
public list<partition> getpartitionsbynames string db_name  string tbl_name
list<string> part_names  throws nosuchobjectexception  metaexception  texception
/**
* @param dbname
* @param tablename
* @param partialpvals
* @param s
* @param username
* @param groupnames
* @return the list of paritions
* @throws nosuchobjectexception
*/
public list<partition> listpartitionswithauthinfo string dbname
string tablename  list<string> partialpvals  short s  string username
list<string> groupnames  throws metaexception  texception  nosuchobjectexception
/**
* @param db_name
* @param tbl_name
* @param partkvs
* @param eventtype
* @throws metaexception
* @throws nosuchobjectexception
* @throws texception
* @throws unknowntableexception
* @throws unknowndbexception
* @throws unknownpartitionexception
* @throws invalidpartitionexception
*/
public void markpartitionforevent string db_name  string tbl_name  map<string string> partkvs
partitioneventtype eventtype  throws metaexception  nosuchobjectexception  texception
unknowntableexception  unknowndbexception  unknownpartitionexception  invalidpartitionexception
/**
* @param db_name
* @param tbl_name
* @param partkvs
* @param eventtype
* @throws metaexception
* @throws nosuchobjectexception
* @throws texception
* @throws unknowntableexception
* @throws unknowndbexception
* @throws unknownpartitionexception
* @throws invalidpartitionexception
*/
public boolean ispartitionmarkedforevent string db_name  string tbl_name  map<string string> partkvs
partitioneventtype eventtype  throws metaexception  nosuchobjectexception  texception
unknowntableexception  unknowndbexception  unknownpartitionexception  invalidpartitionexception
/**
* @param tbl
* @throws alreadyexistsexception
* @throws invalidobjectexception
* @throws metaexception
* @throws nosuchobjectexception
* @throws texception
* @see org.apache.hadoop.hive.metastore.api.thrifthivemetastore.iface#create_table(org.apache.hadoop.hive.metastore.api.table)
*/
public void createtable table tbl  throws alreadyexistsexception
invalidobjectexception  metaexception  nosuchobjectexception  texception
public void alter_table string defaultdatabasename  string tblname
table table  throws invalidoperationexception  metaexception  texception
public void createdatabase database db
throws invalidobjectexception  alreadyexistsexception  metaexception  texception
public void dropdatabase string name
throws nosuchobjectexception  invalidoperationexception  metaexception  texception
public void dropdatabase string name  boolean deletedata  boolean ignoreunknowndb
throws nosuchobjectexception  invalidoperationexception  metaexception  texception
public void dropdatabase string name  boolean deletedata  boolean ignoreunknowndb  boolean cascade
throws nosuchobjectexception  invalidoperationexception  metaexception  texception
public void alterdatabase string name  database db
throws nosuchobjectexception  metaexception  texception
/**
* @param db_name
* @param tbl_name
* @param part_vals
* @param deletedata
*          delete the underlying data or just delete the table in metadata
* @return true or false
* @throws nosuchobjectexception
* @throws metaexception
* @throws texception
* @see org.apache.hadoop.hive.metastore.api.thrifthivemetastore.iface#drop_partition(java.lang.string,
*      java.lang.string, java.util.list, boolean)
*/
public boolean droppartition string db_name  string tbl_name
list<string> part_vals  boolean deletedata  throws nosuchobjectexception
metaexception  texception
public boolean droppartition string db_name  string tbl_name
string name  boolean deletedata  throws nosuchobjectexception
metaexception  texception
/**
* updates a partition to new partition
*
* @param dbname
*          database of the old partition
* @param tblname
*          table name of the old partition
* @param newpart
*          new partition
* @throws invalidoperationexception
*           if the old partition does not exist
* @throws metaexception
*           if error in updating metadata
* @throws texception
*           if error in communicating with metastore server
*/
public void alter_partition string dbname  string tblname  partition newpart
throws invalidoperationexception  metaexception  texception
/**
* rename a partition to a new partition
*
* @param dbname
*          database of the old partition
* @param name
*          table name of the old partition
* @param part_vals
*          values of the old partition
* @param newpart
*          new partition
* @throws invalidoperationexception
*           if srcfs and destfs are different
* @throws metaexception
*          if error in updating metadata
* @throws texception
*          if error in communicating with metastore server
*/
public void renamepartition final string dbname  final string name  final list<string> part_vals  final partition newpart
throws invalidoperationexception  metaexception  texception
/**
* @param db
* @param tablename
* @throws unknowntableexception
* @throws unknowndbexception
* @throws metaexception
* @throws texception
* @see org.apache.hadoop.hive.metastore.api.thrifthivemetastore.iface#get_fields(java.lang.string,
*      java.lang.string)
*/
public list<fieldschema> getfields string db  string tablename
throws metaexception  texception  unknowntableexception
unknowndbexception
/**
* @param db
* @param tablename
* @throws unknowntableexception
* @throws unknowndbexception
* @throws metaexception
* @throws texception
* @see org.apache.hadoop.hive.metastore.api.thrifthivemetastore.iface#get_schema(java.lang.string,
*      java.lang.string)
*/
public list<fieldschema> getschema string db  string tablename
throws metaexception  texception  unknowntableexception
unknowndbexception
/**
* @param name
*          name of the configuration property to get the value of
* @param defaultvalue
*          the value to return if property with the given name doesn't exist
* @return value of the specified configuration property
* @throws texception
* @throws configvalsecurityexception
*/
public string getconfigvalue string name  string defaultvalue
throws texception  configvalsecurityexception
/**
*
* @param name
*          the partition name e.g. ("ds=2010-03-03/hr=12")
* @return a list containing the partition col values, in the same order as the name
* @throws metaexception
* @throws texception
*/
public list<string> partitionnametovals string name
throws metaexception  texception
/**
*
* @param name
*          the partition name e.g. ("ds=2010-03-03/hr=12")
* @return a map from the partition col to the value, as listed in the name
* @throws metaexception
* @throws texception
*/
public map<string  string> partitionnametospec string name
throws metaexception  texception
/**
* create an index
* @param index the index object
* @throws invalidobjectexception
* @throws metaexception
* @throws nosuchobjectexception
* @throws texception
* @throws alreadyexistsexception
*/
public void createindex index index  table indextable  throws invalidobjectexception
metaexception  nosuchobjectexception  texception  alreadyexistsexception
public void alter_index string dbname  string tblname  string indexname
index index  throws invalidoperationexception  metaexception  texception
/**
*
* @param dbname
* @param tblname
* @param indexname
* @return the index
* @throws metaexception
* @throws unknowntableexception
* @throws nosuchobjectexception
* @throws texception
*/
public index getindex string dbname  string tblname  string indexname
throws metaexception  unknowntableexception  nosuchobjectexception
texception
/**
* list indexes of the give base table
* @param db_name
* @param tbl_name
* @param max
* @return the list of indexes
* @throws nosuchobjectexception
* @throws metaexception
* @throws texception
*/
public list<index> listindexes string db_name  string tbl_name
short max  throws nosuchobjectexception  metaexception  texception
/**
* list all the index names of the give base table.
*
* @param db_name
* @param tbl_name
* @param max
* @return the list of names
* @throws metaexception
* @throws texception
*/
public list<string> listindexnames string db_name  string tbl_name
short max  throws metaexception  texception
/**
* @param db_name
* @param tbl_name
* @param name index name
* @param deletedata
* @return true on success
* @throws nosuchobjectexception
* @throws metaexception
* @throws texception
*/
public boolean dropindex string db_name  string tbl_name
string name  boolean deletedata  throws nosuchobjectexception
metaexception  texception
/**
* @param role
*          role object
* @return true on success
* @throws metaexception
* @throws texception
*/
public boolean create_role role role
throws metaexception  texception
/**
* @param role_name
*          role name
*
* @return true on success
* @throws metaexception
* @throws texception
*/
public boolean drop_role string role_name  throws metaexception  texception
/**
* list all role names
* @return list of names
* @throws texception
* @throws metaexception
*/
public list<string> listrolenames   throws metaexception  texception
/**
*
* @param role_name
* @param user_name
* @param principaltype
* @param grantor
* @param grantortype
* @param grantoption
* @return true on success
* @throws metaexception
* @throws texception
*/
public boolean grant_role string role_name  string user_name
principaltype principaltype  string grantor  principaltype grantortype
boolean grantoption  throws metaexception  texception
/**
* @param role_name
*          role name
* @param user_name
*          user name
* @param principaltype
*
* @return true on success
* @throws metaexception
* @throws texception
*/
public boolean revoke_role string role_name  string user_name
principaltype principaltype  throws metaexception  texception
/**
*
* @param principalname
* @param principaltype
* @return list of roles
* @throws metaexception
* @throws texception
*/
public list<role> list_roles string principalname  principaltype principaltype
throws metaexception  texception
/**
* @param hiveobject
* @param user_name
* @param group_names
* @return the privilege set
* @throws metaexception
* @throws texception
*/
public principalprivilegeset get_privilege_set hiveobjectref hiveobject
string user_name  list<string> group_names  throws metaexception
texception
/**
* @param principal_name
* @param principal_type
* @param hiveobject
* @return list of privileges
* @throws metaexception
* @throws texception
*/
public list<hiveobjectprivilege> list_privileges string principal_name
principaltype principal_type  hiveobjectref hiveobject
throws metaexception  texception
/**
* @param privileges
* @return true on success
* @throws metaexception
* @throws texception
*/
public boolean grant_privileges privilegebag privileges
throws metaexception  texception
/**
* @param privileges
* @return true on success
* @throws metaexception
* @throws texception
*/
public boolean revoke_privileges privilegebag privileges
throws metaexception  texception
/**
* @param owner the intended owner for the token
* @param renewerkerberosprincipalname
* @return the string of the token
* @throws metaexception
* @throws texception
*/
public string getdelegationtoken string owner  string renewerkerberosprincipalname
throws metaexception  texception
/**
* @param tokenstrform
* @return the new expiration time
* @throws metaexception
* @throws texception
*/
public long renewdelegationtoken string tokenstrform  throws metaexception  texception
/**
* @param tokenstrform
* @throws metaexception
* @throws texception
*/
public void canceldelegationtoken string tokenstrform  throws metaexception  texception