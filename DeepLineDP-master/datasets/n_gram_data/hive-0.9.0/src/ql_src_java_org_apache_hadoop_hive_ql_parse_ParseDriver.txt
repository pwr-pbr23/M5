/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql parse
import java util arraylist
import java util collection
import java util hashmap
import org antlr runtime antlrstringstream
import org antlr runtime bitset
import org antlr runtime charstream
import org antlr runtime failedpredicateexception
import org antlr runtime intstream
import org antlr runtime mismatchedtokenexception
import org antlr runtime noviablealtexception
import org antlr runtime recognitionexception
import org antlr runtime token
import org antlr runtime tokenrewritestream
import org antlr runtime tokenstream
import org antlr runtime tree commontreeadaptor
import org antlr runtime tree treeadaptor
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop hive ql context
/**
* parsedriver.
*
*/
public class parsedriver
private static final log log   logfactory getlog
private static hashmap<string  string> xlatemap
static
xlatemap   new hashmap<string  string>
// keywords
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
// operators
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
xlatemap put
public static collection<string> getkeywords
return xlatemap values
private static string xlate string name
string ret   xlatemap get name
if  ret    null
ret   name
return ret
/**
* antlrnocasestringstream.
*
*/
//this class provides and implementation for a case insensitive token checker
//for the lexical analysis part of antlr. by converting the token stream into
//upper case at the time when lexical rules are checked, this class ensures that the
//lexical rules need to just match the token with upper case letters as opposed to
//combination of upper case and lower case characteres. this is purely used for matching lexical
//rules. the actual token text is stored in the same way as the user input without
//actually converting it into an upper case. the token values are generated by the consume()
//function of the super class antlrstringstream. the la() function is the lookahead funtion
//and is purely used for matching lexical rules. this also means that the grammar will only
//accept capitalized tokens in case it is run from other tools like antlrworks which
//do not have the antlrnocasestringstream implementation.
public class antlrnocasestringstream extends antlrstringstream
public antlrnocasestringstream string input
super input
@override
public int la int i
int returnchar   super la i
if  returnchar    charstream eof
return returnchar
else if  returnchar    0
return returnchar
return character touppercase  char  returnchar
/**
* hivelexerx.
*
*/
public class hivelexerx extends hivelexer
private final arraylist<parseerror> errors
public hivelexerx
super
errors   new arraylist<parseerror>
public hivelexerx charstream input
super input
errors   new arraylist<parseerror>
@override
public void displayrecognitionerror string tokennames
recognitionexception e
errors add new parseerror this  e  tokennames
@override
public string geterrormessage recognitionexception e  string tokennames
string msg   null
if  e instanceof noviablealtexception
@suppresswarnings
noviablealtexception nvae    noviablealtexception  e
// for development, can add
// "decision=<<"+nvae.grammardecisiondescription+">>"
// and "(decision="+nvae.decisionnumber+") and
// "state "+nvae.statenumber
msg       getcharerrordisplay e c
else
msg   super geterrormessage e  tokennames
return msg
public arraylist<parseerror> geterrors
return errors
/**
* hiveparserx.
*
*/
public class hiveparserx extends hiveparser
private final arraylist<parseerror> errors
public hiveparserx tokenstream input
super input
errors   new arraylist<parseerror>
@override
protected void mismatch intstream input  int ttype  bitset follow
throws recognitionexception
throw new mismatchedtokenexception ttype  input
@override
public void recoverfrommismatchedset intstream input
recognitionexception re  bitset follow  throws recognitionexception
throw re
@override
public void displayrecognitionerror string tokennames
recognitionexception e
errors add new parseerror this  e  tokennames
@override
public string geterrorheader recognitionexception e
string header   null
if  e charpositioninline < 0    input lt  1     null
token t   input lt  1
header       t getline         t getcharpositioninline
else
header   super geterrorheader e
return header
@override
public string geterrormessage recognitionexception e  string tokennames
string msg   null
// translate the token names to something that the user can understand
string xlatenames   new string
for  int i   0  i < tokennames length    i
xlatenames   parsedriver xlate tokennames
if  e instanceof noviablealtexception
@suppresswarnings
noviablealtexception nvae    noviablealtexception  e
// for development, can add
// "decision=<<"+nvae.grammardecisiondescription+">>"
// and "(decision="+nvae.decisionnumber+") and
// "state "+nvae.statenumber
msg
gettokenerrordisplay e token
input lt 2     null ?     gettokenerrordisplay input lt 2
input lt 3     null ?     gettokenerrordisplay input lt 3
else if  e instanceof mismatchedtokenexception
mismatchedtokenexception mte    mismatchedtokenexception  e
msg   super geterrormessage e  xlatenames     input lt  1     null ?       input lt  1  gettext
else if  e instanceof failedpredicateexception
failedpredicateexception fpe    failedpredicateexception  e
msg       fpe token gettext         fpe rulename
else
msg   super geterrormessage e  xlatenames
if  msgs size   > 0
msg   msg       msgs peek
return msg
public arraylist<parseerror> geterrors
return errors
/**
* tree adaptor for making antlr return astnodes instead of commontree nodes
* so that the graph walking algorithms and the rules framework defined in
* ql.lib can be used with the ast nodes.
*/
static final treeadaptor adaptor   new commontreeadaptor
/**
* creates an astnode for the given token. the astnode is a wrapper around
* antlr's commontree class that implements the node interface.
*
* @param payload
*          the token.
* @return object (which is actually an astnode) for the token.
*/
@override
public object create token payload
return new astnode payload
public astnode parse string command  throws parseexception
return parse command  null
/**
* parses a command, optionally assigning the parser's token stream to the
* given context.
*
* @param command
*          command to parse
*
* @param ctx
*          context with which to associate this parser's token stream, or
*          null if either no context is available or the context already has
*          an existing stream
*
* @return parsed ast
*/
public astnode parse string command  context ctx  throws parseexception
log info     command
hivelexerx lexer   new hivelexerx new antlrnocasestringstream command
tokenrewritestream tokens   new tokenrewritestream lexer
if  ctx    null
ctx settokenrewritestream tokens
hiveparserx parser   new hiveparserx tokens
parser settreeadaptor adaptor
hiveparser statement_return r   null
try
r   parser statement
catch  recognitionexception e
throw new parseexception parser geterrors
if  lexer geterrors   size      0    parser geterrors   size      0
log info
else if  lexer geterrors   size      0
throw new parseexception lexer geterrors
else
throw new parseexception parser geterrors
return  astnode  r gettree