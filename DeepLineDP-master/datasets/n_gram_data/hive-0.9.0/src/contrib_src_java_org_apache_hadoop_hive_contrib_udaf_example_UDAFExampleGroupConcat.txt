/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive contrib udaf example
import java util arraylist
import java util collections
import org apache hadoop hive ql exec udaf
import org apache hadoop hive ql exec udafevaluator
/**
* this is a simple udaf that concatenates all arguments from different rows
* into a single string.
*
* it should be very easy to follow and can be used as an example for writing
* new udafs.
*
* note that hive internally uses a different mechanism (called genericudaf) to
* implement built-in aggregation functions, which are harder to program but
* more efficient.
*/
public class udafexamplegroupconcat extends udaf
/**
* the actual class for doing the aggregation. hive will automatically look
* for all internal classes of the udaf that implements udafevaluator.
*/
public static class udafexamplegroupconcatevaluator implements udafevaluator
arraylist<string> data
public udafexamplegroupconcatevaluator
super
data   new arraylist<string>
/**
* reset the state of the aggregation.
*/
public void init
data clear
/**
* iterate through one row of original data.
*
* this udf accepts arbitrary number of string arguments, so we use
* string[]. if it only accepts a single string, then we should use a single
* string argument.
*
* this function should always return true.
*/
public boolean iterate string o
if  o    null
stringbuilder sb   new stringbuilder
for  string element   o
sb append element
data add sb tostring
return true
/**
* terminate a partial aggregation and return the state.
*/
public arraylist<string> terminatepartial
return data
/**
* merge with a partial aggregation.
*
* this function should always have a single argument which has the same
* type as the return value of terminatepartial().
*
* this function should always return true.
*/
public boolean merge arraylist<string> o
if  o    null
data addall o
return true
/**
* terminates the aggregation and return the final result.
*/
public string terminate
collections sort data
stringbuilder sb   new stringbuilder
for  int i   0  i < data size    i
sb append data get i
return sb tostring