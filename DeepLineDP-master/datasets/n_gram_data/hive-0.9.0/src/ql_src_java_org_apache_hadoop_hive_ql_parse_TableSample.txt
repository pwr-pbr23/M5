/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql parse
import java util arraylist
/**
*
* this class stores all the information specified in the tablesample clause.
* e.g. for the clause "from t tablesample(1 out of 2 on c1) it will store the
* numerator 1, the denominator 2 and the list of expressions(in this case c1)
* in the appropriate fields. the afore-mentioned sampling clause causes the 1st
* bucket to be picked out of the 2 buckets created by hashing on c1.
*
*/
public class tablesample
/**
* the numerator of the tablesample clause.
*/
private int numerator
/**
* the denominator of the tablesample clause.
*/
private int denominator
/**
* the list of expressions following on part of the tablesample clause. this
* list is empty in case there are no expressions such as in the clause
* "from t tablesample(1 out of 2)". for this expression the sampling is done
* on the tables clustering column(as specified when the table was created).
* in case the table does not have any clustering column, the usage of a table
* sample clause without an on part is disallowed by the compiler
*/
private arraylist<astnode> exprs
/**
* flag to indicate that input files can be pruned.
*/
private boolean inputpruning
/**
* constructs the tablesample given the numerator, denominator and the list of
* on clause expressions.
*
* @param num
*          the numerator
* @param den
*          the denominator
* @param exprs
*          the list of expressions in the on part of the tablesample clause
*/
public tablesample string num  string den  arraylist<astnode> exprs
numerator   integer valueof num  intvalue
denominator   integer valueof den  intvalue
this exprs   exprs
public tablesample int num  int den
numerator   num
denominator   den
exprs   null
/**
* gets the numerator.
*
* @return int
*/
public int getnumerator
return numerator
/**
* sets the numerator.
*
* @param num
*          the numerator
*/
public void setnumerator int num
numerator   num
/**
* gets the denominator.
*
* @return int
*/
public int getdenominator
return denominator
/**
* sets the denominator.
*
* @param den
*          the denominator
*/
public void setdenominator int den
denominator   den
/**
* gets the on part's expression list.
*
* @return arraylist<astnode>
*/
public arraylist<astnode> getexprs
return exprs
/**
* sets the expression list.
*
* @param exprs
*          the expression list
*/
public void setexprs arraylist<astnode> exprs
this exprs   exprs
/**
* gets the flag that indicates whether input pruning is possible.
*
* @return boolean
*/
public boolean getinputpruning
return inputpruning
/**
* sets the flag that indicates whether input pruning is possible or not.
*
* @param inputpruning
*          true if input pruning is possible
*/
public void setinputpruning boolean inputpruning
this inputpruning   inputpruning