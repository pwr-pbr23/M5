/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql optimizer pcr
import java util arraylist
import java util linkedhashmap
import java util list
import java util map
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop hive ql lib defaultgraphwalker
import org apache hadoop hive ql lib defaultruledispatcher
import org apache hadoop hive ql lib dispatcher
import org apache hadoop hive ql lib graphwalker
import org apache hadoop hive ql lib node
import org apache hadoop hive ql lib nodeprocessor
import org apache hadoop hive ql lib rule
import org apache hadoop hive ql lib ruleregexp
import org apache hadoop hive ql optimizer transform
import org apache hadoop hive ql parse parsecontext
import org apache hadoop hive ql parse semanticexception
/**
* the transformation step that does partition condition remover.
*
*/
public class partitionconditionremover implements transform
// the log
private static final log log   logfactory
getlog
/*
* (non-javadoc)
*
* @see
* org.apache.hadoop.hive.ql.optimizer.transform#transform(org.apache.hadoop
* .hive.ql.parse.parsecontext)
*/
@override
public parsecontext transform parsecontext pctx  throws semanticexception
// create a the context for walking operators
list<pcropwalkerctx optodeleteinfo> optoremove
new arraylist<pcropwalkerctx optodeleteinfo>
pcropwalkerctx opwalkerctx   new pcropwalkerctx pctx  optoremove
map<rule  nodeprocessor> oprules   new linkedhashmap<rule  nodeprocessor>
oprules put new ruleregexp        pcropprocfactory
getfilterproc
// the dispatcher fires the processor corresponding to the closest matching
// rule and passes the context along
dispatcher disp   new defaultruledispatcher pcropprocfactory getdefaultproc
oprules  opwalkerctx
graphwalker ogw   new defaultgraphwalker disp
// create a list of topop nodes
arraylist<node> topnodes   new arraylist<node>
topnodes addall pctx gettopops   values
ogw startwalking topnodes  null
for  pcropwalkerctx optodeleteinfo entry   optoremove
entry getparent   removechildandadoptitschildren entry getoperator
return pctx