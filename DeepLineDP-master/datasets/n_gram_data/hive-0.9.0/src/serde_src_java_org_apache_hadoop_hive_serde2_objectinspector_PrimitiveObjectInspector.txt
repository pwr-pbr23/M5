/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive serde2 objectinspector
/**
* primitiveobjectinspector.
*
*/
public interface primitiveobjectinspector extends objectinspector
/**
* the primitive types supported by hive.
*/
public static enum primitivecategory
void  boolean  byte  short  int  long  float  double  string  timestamp  binary  unknown
/**
* get the primitive category of the primitiveobjectinspector.
*/
primitivecategory getprimitivecategory
/**
* get the primitive writable class which is the return type of
* getprimitivewritableobject() and copytoprimitivewritableobject().
*/
class<?> getprimitivewritableclass
/**
* return the data in an instance of primitive writable object. if the object
* is already a primitive writable object, just return o.
*/
object getprimitivewritableobject object o
/**
* get the java primitive class which is the return type of
* getjavaprimitiveobject().
*/
class<?> getjavaprimitiveclass
/**
* get the java primitive object.
*/
object getprimitivejavaobject object o
/**
* get a copy of the object in the same class, so the return value can be
* stored independently of the parameter.
*
* if the object is a primitive java object, we just return the parameter
* since primitive java object is immutable.
*/
object copyobject object o
/**
* whether the objectinspector prefers to return a primitive writable object
* instead of a primitive java object. this can be useful for determining the
* most efficient way to getting data out of the object.
*/
boolean preferwritable