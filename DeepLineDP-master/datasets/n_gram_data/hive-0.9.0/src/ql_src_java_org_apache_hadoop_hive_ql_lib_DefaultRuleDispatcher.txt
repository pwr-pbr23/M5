/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql lib
import java util map
import java util stack
import org apache hadoop hive ql parse semanticexception
/**
* dispatches calls to relevant method in processor. the user registers various
* rules with the dispatcher, and the processor corresponding to closest
* matching rule is fired.
*/
public class defaultruledispatcher implements dispatcher
private final map<rule  nodeprocessor> procrules
private final nodeprocessorctx procctx
private final nodeprocessor defaultproc
/**
* constructor.
*
* @param defaultproc
*          default processor to be fired if no rule matches
* @param rules
*          operator processor that handles actual processing of the node
* @param procctx
*          operator processor context, which is opaque to the dispatcher
*/
public defaultruledispatcher nodeprocessor defaultproc
map<rule  nodeprocessor> rules  nodeprocessorctx procctx
this defaultproc   defaultproc
procrules   rules
this procctx   procctx
/**
* dispatcher function.
*
* @param nd
*          operator to process
* @param ndstack
*          the operators encountered so far
* @throws semanticexception
*/
public object dispatch node nd  stack<node> ndstack  object    nodeoutputs
throws semanticexception
// find the firing rule
// find the rule from the stack specified
rule rule   null
int mincost   integer max_value
for  rule r   procrules keyset
int cost   r cost ndstack
if   cost >  0      cost <  mincost
mincost   cost
rule   r
nodeprocessor proc
if  rule    null
proc   defaultproc
else
proc   procrules get rule
// do nothing in case proc is null
if  proc    null
// call the process function
return proc process nd  ndstack  procctx  nodeoutputs
else
return null