/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql exec
import java io datainput
import java io dataoutput
import java io ioexception
import org apache hadoop io writablecomparable
import org apache hadoop io writablecomparator
/**
* bytewritable.
*
*/
public class bytewritable implements writablecomparable
private int value
public void write dataoutput out  throws ioexception
out writebyte value
public void readfields datainput in  throws ioexception
value   in readbyte
public bytewritable int b
value   b   0xff
public bytewritable
value   0
public void set int b
value   b   0xff
/** compares two bytewritables. */
public int compareto object o
int thisvalue   value
int thatvalue     bytewritable  o  value
return  thisvalue < thatvalue ?  1    thisvalue    thatvalue ? 0   1
@override
public boolean equals object o
if    o instanceof bytewritable
return false
bytewritable that    bytewritable  o
if  this    that
return true
if  value    that value
return true
else
return false
@override
public int hashcode
return  value
/** a comparator optimized for byteswritable. */
public static class comparator extends writablecomparator
public comparator
super bytewritable class
/**
* compare the buffers in serialized form.
*/
@override
public int compare byte b1  int s1  int l1  byte b2  int s2  int l2
/**
* ok - we are implementing a dummy byte int a = b1[s1] & 0xff; int b =
* b2[s1] & 0xff; if(a!=b) return a -b;
*/
return 0
static
// register this comparator
writablecomparator define bytewritable class  new comparator