/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive thrift
import java io ioexception
import java util arraylist
import java util hashmap
import java util list
import java util map
import java util concurrent countdownlatch
import java util concurrent timeunit
import org apache commons lang stringutils
import org apache hadoop conf configuration
import org apache hadoop security token delegation abstractdelegationtokensecretmanager delegationtokeninformation
import org apache hadoop security token delegation hivedelegationtokensupport
import org apache zookeeper createmode
import org apache zookeeper keeperexception
import org apache zookeeper watchedevent
import org apache zookeeper watcher
import org apache zookeeper zoodefs
import org apache zookeeper zoodefs ids
import org apache zookeeper zookeeper
import org apache zookeeper zookeeper states
import org apache zookeeper data acl
import org apache zookeeper data id
import org slf4j logger
import org slf4j loggerfactory
/**
* zookeeper token store implementation.
*/
public class zookeepertokenstore implements delegationtokenstore
private static final logger logger
loggerfactory getlogger zookeepertokenstore class getname
protected static final string zk_seq_format
private static final string node_keys
private static final string node_tokens
private string rootnode
private volatile zookeeper zksession
private string zkconnectstring
private final int zksessiontimeout   3000
private long connecttimeoutmillis    1
private list<acl> newnodeacl   ids open_acl_unsafe
private class zookeeperwatcher implements watcher
public void process org apache zookeeper watchedevent event
logger info event tostring
if  event getstate      watcher event keeperstate expired
logger warn
try
zksession close
catch  throwable e
logger warn    e
/**
* default constructor for dynamic instantiation w/ configurable
* (reflectionutils does not support configuration constructor injection).
*/
protected zookeepertokenstore
public zookeepertokenstore string hostport
this zkconnectstring   hostport
init
private zookeeper getsession
if  zksession    null    zksession getstate      states closed
synchronized  this
if  zksession    null    zksession getstate      states closed
try
zksession   createconnectedclient this zkconnectstring  this zksessiontimeout
this connecttimeoutmillis  new zookeeperwatcher
catch  ioexception ex
throw new tokenstoreexception    ex
return zksession
/**
* create a zookeeper session that is in connected state.
*
* @param connectstring zookeeper connect string
* @param sessiontimeout zookeeper session timeout
* @param connecttimeout milliseconds to wait for connection, 0 or negative value means no wait
* @param watchers
* @return
* @throws interruptedexception
* @throws ioexception
*/
public static zookeeper createconnectedclient string connectstring
int sessiontimeout  long connecttimeout  final watcher    watchers
throws ioexception
final countdownlatch connected   new countdownlatch 1
watcher connectwatcher   new watcher
@override
public void process watchedevent event
switch  event getstate
case syncconnected
connected countdown
break
for  watcher w   watchers
w process event
zookeeper zk   new zookeeper connectstring  sessiontimeout  connectwatcher
if  connecttimeout > 0
try
if   connected await connecttimeout  timeunit milliseconds
zk close
throw new ioexception
connecttimeout
catch  interruptedexception e
throw new ioexception    e
return zk
/**
* create a path if it does not already exist ("mkdir -p")
* @param zk zookeeper session
* @param path string with '/' separator
* @param acl list of acl entries
* @return
* @throws keeperexception
* @throws interruptedexception
*/
public static string ensurepath zookeeper zk  string path  list<acl> acl  throws keeperexception
interruptedexception
string pathcomps   stringutils splitbywholeseparator path
string currentpath
for  string pathcomp   pathcomps
currentpath        pathcomp
try
string node   zk create currentpath  new byte  acl
createmode persistent
logger info     node
catch  keeperexception nodeexistsexception e
return currentpath
/**
* parse acl permission string, from zookeepermain private method
* @param permstring
* @return
*/
public static int getpermfromstring string permstring
int perm   0
for  int i   0  i < permstring length    i
switch  permstring charat i
case
perm    zoodefs perms read
break
case
perm    zoodefs perms write
break
case
perm    zoodefs perms create
break
case
perm    zoodefs perms delete
break
case
perm    zoodefs perms admin
break
default
logger error     permstring charat i
return perm
/**
* parse comma separated list of acl entries to secure generated nodes, e.g.
* <code>sasl:hive/host1@my.domain:cdrwa,sasl:hive/host2@my.domain:cdrwa</code>
* @param aclstring
* @return acl list
*/
public static list<acl> parseacls string aclstring
string aclcomps   stringutils splitbywholeseparator aclstring
list<acl> acl   new arraylist<acl> aclcomps length
for  string a   aclcomps
if  stringutils isblank a
continue
a   a trim
// from zookeepermain private method
int firstcolon   a indexof
int lastcolon   a lastindexof
if  firstcolon     1    lastcolon     1    firstcolon    lastcolon
logger error a
continue
acl newacl   new acl
newacl setid new id a substring 0  firstcolon   a substring
firstcolon   1  lastcolon
newacl setperms getpermfromstring a substring lastcolon   1
acl add newacl
return acl
private void init
if  this zkconnectstring    null
throw new illegalstateexception
if  this zksession    null
try
this zksession close
catch  interruptedexception ex
logger warn    ex
zookeeper zk   getsession
try
ensurepath zk  rootnode   node_keys  newnodeacl
ensurepath zk  rootnode   node_tokens  newnodeacl
catch  exception e
throw new tokenstoreexception    e
@override
public void setconf configuration conf
if  conf    null
throw new illegalargumentexception
this zkconnectstring   conf get
hadoopthriftauthbridge20s server delegation_token_store_zk_connect_str  null
this connecttimeoutmillis   conf getlong
hadoopthriftauthbridge20s server delegation_token_store_zk_connect_timeoutmillis   1
this rootnode   conf get
hadoopthriftauthbridge20s server delegation_token_store_zk_znode
hadoopthriftauthbridge20s server delegation_token_store_zk_znode_default
string csv   conf get hadoopthriftauthbridge20s server delegation_token_store_zk_acl  null
if  stringutils isnotblank csv
this newnodeacl   parseacls csv
init
@override
public configuration getconf
return null     not required
private map<integer  byte> getallkeys   throws keeperexception
interruptedexception
string masterkeynode   rootnode   node_keys
zookeeper zk   getsession
list<string> nodes   zk getchildren masterkeynode  false
map<integer  byte> result   new hashmap<integer  byte>
for  string node   nodes
byte data   zk getdata masterkeynode       node  false  null
if  data    null
result put getseq node   data
return result
private int getseq string path
string pathcomps   path split
return integer parseint pathcomps
@override
public int addmasterkey string s
try
zookeeper zk   getsession
string newnode   zk create rootnode   node_keys      s getbytes    newnodeacl
createmode persistent_sequential
logger info    newnode
return getseq newnode
catch  keeperexception ex
throw new tokenstoreexception ex
catch  interruptedexception ex
throw new tokenstoreexception ex
@override
public void updatemasterkey int keyseq  string s
try
zookeeper zk   getsession
zk setdata rootnode   node_keys       string format zk_seq_format  keyseq   s getbytes
1
catch  keeperexception ex
throw new tokenstoreexception ex
catch  interruptedexception ex
throw new tokenstoreexception ex
@override
public boolean removemasterkey int keyseq
try
zookeeper zk   getsession
zk delete rootnode   node_keys       string format zk_seq_format  keyseq    1
return true
catch  keeperexception nonodeexception ex
return false
catch  keeperexception ex
throw new tokenstoreexception ex
catch  interruptedexception ex
throw new tokenstoreexception ex
@override
public string getmasterkeys
try
map<integer  byte> allkeys   getallkeys
string result   new string
int resultidx   0
for  byte keybytes   allkeys values
result   new string keybytes
return result
catch  keeperexception ex
throw new tokenstoreexception ex
catch  interruptedexception ex
throw new tokenstoreexception ex
private string gettokenpath delegationtokenidentifier tokenidentifier
try
return rootnode   node_tokens
tokenstoredelegationtokensecretmanager encodewritable tokenidentifier
catch  ioexception ex
throw new tokenstoreexception    ex
@override
public boolean addtoken delegationtokenidentifier tokenidentifier
delegationtokeninformation token
try
zookeeper zk   getsession
byte tokenbytes   hivedelegationtokensupport encodedelegationtokeninformation token
string newnode   zk create gettokenpath tokenidentifier
tokenbytes  newnodeacl  createmode persistent
logger info    newnode
return true
catch  keeperexception nodeexistsexception ex
return false
catch  keeperexception ex
throw new tokenstoreexception ex
catch  interruptedexception ex
throw new tokenstoreexception ex
@override
public boolean removetoken delegationtokenidentifier tokenidentifier
try
zookeeper zk   getsession
zk delete gettokenpath tokenidentifier    1
return true
catch  keeperexception nonodeexception ex
return false
catch  keeperexception ex
throw new tokenstoreexception ex
catch  interruptedexception ex
throw new tokenstoreexception ex
@override
public delegationtokeninformation gettoken delegationtokenidentifier tokenidentifier
try
zookeeper zk   getsession
byte tokenbytes   zk getdata gettokenpath tokenidentifier   false  null
try
return hivedelegationtokensupport decodedelegationtokeninformation tokenbytes
catch  exception ex
throw new tokenstoreexception    ex
catch  keeperexception nonodeexception ex
return null
catch  keeperexception ex
throw new tokenstoreexception ex
catch  interruptedexception ex
throw new tokenstoreexception ex
@override
public list<delegationtokenidentifier> getalldelegationtokenidentifiers
string containernode   rootnode   node_tokens
final list<string> nodes
try
nodes   getsession   getchildren containernode  false
catch  keeperexception ex
throw new tokenstoreexception ex
catch  interruptedexception ex
throw new tokenstoreexception ex
list<delegationtokenidentifier> result   new java util arraylist<delegationtokenidentifier>
nodes size
for  string node   nodes
delegationtokenidentifier id   new delegationtokenidentifier
try
tokenstoredelegationtokensecretmanager decodewritable id  node
result add id
catch  exception e
logger warn    node
return result
@override
public void close   throws ioexception
if  this zksession    null
try
this zksession close
catch  interruptedexception ex
logger warn    ex