/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql plan
import java io serializable
import java util arraylist
import java util list
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop conf configuration
import org apache hadoop hive conf hiveconf
import org apache hadoop hive ql exec functionregistry
import org apache hadoop hive ql exec udfargumentexception
import org apache hadoop hive ql exec utilities
import org apache hadoop hive ql parse errormsg
import org apache hadoop hive ql session sessionstate
import org apache hadoop hive ql session sessionstate loghelper
import org apache hadoop hive ql udf generic genericudf
import org apache hadoop hive ql udf generic genericudfbasecompare
import org apache hadoop hive ql udf generic genericudfbridge
import org apache hadoop hive serde2 objectinspector objectinspector
import org apache hadoop hive serde2 objectinspector objectinspectorutils
import org apache hadoop hive serde2 typeinfo typeinfo
import org apache hadoop hive serde2 typeinfo typeinfofactory
import org apache hadoop hive serde2 typeinfo typeinfoutils
/**
* describes a genericfunc node.
*/
public class exprnodegenericfuncdesc extends exprnodedesc implements
serializable
private static final long serialversionuid   1l
private static final log log   logfactory
getlog exprnodegenericfuncdesc class getname
/**
* in case genericudf is serializable, we will serialize the object.
*
* in case genericudf does not implement serializable, java will remember the
* class of genericudf and creates a new instance when deserialized. this is
* exactly what we want.
*/
private genericudf genericudf
private list<exprnodedesc> childexprs
/**
* this class uses a writableobjectinspector rather than a typeinfo to store
* the canonical type information for this nodedesc.
*/
private objectinspector writableobjectinspector
//is this an expression that should perform a comparison for sorted searches
private boolean issortedexpr
public exprnodegenericfuncdesc
public exprnodegenericfuncdesc typeinfo typeinfo  genericudf genericudf
list<exprnodedesc> children
this typeinfoutils getstandardwritableobjectinspectorfromtypeinfo typeinfo
genericudf  children
public exprnodegenericfuncdesc objectinspector oi  genericudf genericudf
list<exprnodedesc> children
super typeinfoutils gettypeinfofromobjectinspector oi
this writableobjectinspector
objectinspectorutils getwritableobjectinspector oi
assert  genericudf    null
this genericudf   genericudf
this childexprs   children
@override
public objectinspector getwritableobjectinspector
return writableobjectinspector
public genericudf getgenericudf
return genericudf
public void setgenericudf genericudf genericudf
this genericudf   genericudf
public list<exprnodedesc> getchildexprs
return childexprs
public void setchildexprs list<exprnodedesc> children
childexprs   children
@override
public list<exprnodedesc> getchildren
return childexprs
@override
public string tostring
stringbuilder sb   new stringbuilder
sb append genericudf getclass   tostring
sb append
for  int i   0  i < childexprs size    i
if  i > 0
sb append
sb append childexprs get i  tostring
sb append
sb append
return sb tostring
@explain displayname
@override
public string getexprstring
// get the children expr strings
string childrenexprstrings   new string
for  int i   0  i < childrenexprstrings length  i
childrenexprstrings   childexprs get i  getexprstring
return genericudf getdisplaystring childrenexprstrings
@override
public list<string> getcols
list<string> collist   new arraylist<string>
if  childexprs    null
int pos   0
while  pos < childexprs size
list<string> colch   childexprs get pos  getcols
collist   utilities mergeuniqelems collist  colch
pos
return collist
@override
public exprnodedesc clone
list<exprnodedesc> clonech   new arraylist<exprnodedesc> childexprs size
for  exprnodedesc ch   childexprs
clonech add ch clone
exprnodegenericfuncdesc clone   new exprnodegenericfuncdesc typeinfo
functionregistry clonegenericudf genericudf   clonech
return clone
/**
* create a exprnodegenericfuncdesc based on the genericudfclass and the
* children parameters.
*
* @throws udfargumentexception
*/
public static exprnodegenericfuncdesc newinstance genericudf genericudf
list<exprnodedesc> children  throws udfargumentexception
objectinspector childrenois   new objectinspector
for  int i   0  i < childrenois length  i
childrenois   children get i  getwritableobjectinspector
// check if a bigint is implicitely cast to a double as part of a comparison
// perform the check here instead of in genericudfbasecompare to guarantee it is only run once per operator
if  genericudf instanceof genericudfbasecompare    children size      2
typeinfo oitypeinfo0   children get 0  gettypeinfo
typeinfo oitypeinfo1   children get 1  gettypeinfo
sessionstate ss   sessionstate get
configuration conf    ss    null  ? ss getconf     new configuration
loghelper console   new loghelper log
// for now, if a bigint is going to be cast to a double throw an error or warning
if   oitypeinfo0 equals typeinfofactory stringtypeinfo     oitypeinfo1 equals typeinfofactory longtypeinfo
oitypeinfo0 equals typeinfofactory longtypeinfo     oitypeinfo1 equals typeinfofactory stringtypeinfo
if  hiveconf getvar conf  hiveconf confvars hivemapredmode  equalsignorecase
throw new udfargumentexception errormsg no_compare_bigint_string getmsg
else
console printerror
else if   oitypeinfo0 equals typeinfofactory doubletypeinfo     oitypeinfo1 equals typeinfofactory longtypeinfo
oitypeinfo0 equals typeinfofactory longtypeinfo     oitypeinfo1 equals typeinfofactory doubletypeinfo
if  hiveconf getvar conf  hiveconf confvars hivemapredmode  equalsignorecase
throw new udfargumentexception errormsg no_compare_bigint_double getmsg
else
console printerror
objectinspector oi   genericudf initializeandfoldconstants childrenois
string requiredjars   genericudf getrequiredjars
string requiredfiles   genericudf getrequiredfiles
sessionstate ss   sessionstate get
if  requiredjars    null
sessionstate resourcetype t   sessionstate find_resource_type
for  string jarpath   requiredjars
ss add_resource t  jarpath
if  requiredfiles    null
sessionstate resourcetype t   sessionstate find_resource_type
for  string filepath   requiredfiles
ss add_resource t  filepath
return new exprnodegenericfuncdesc oi  genericudf  children
@override
public boolean issame object o
if    o instanceof exprnodegenericfuncdesc
return false
exprnodegenericfuncdesc dest    exprnodegenericfuncdesc  o
if   typeinfo equals dest gettypeinfo
genericudf getclass   equals dest getgenericudf   getclass
return false
if  genericudf instanceof genericudfbridge
genericudfbridge bridge    genericudfbridge  genericudf
genericudfbridge bridge2    genericudfbridge  dest getgenericudf
if   bridge getudfclass   equals bridge2 getudfclass
bridge getudfname   equals bridge2 getudfname
bridge isoperator      bridge2 isoperator
return false
if  childexprs size      dest getchildexprs   size
return false
for  int pos   0  pos < childexprs size    pos
if   childexprs get pos  issame dest getchildexprs   get pos
return false
return true
public boolean issortedexpr
return issortedexpr
public void setsortedexpr boolean issortedexpr
this issortedexpr   issortedexpr