/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive serde2 objectinspector
import java util arraylist
import java util list
import java util map
import org apache hadoop hive serde2 objectinspector primitive javastringobjectinspector
import org apache hadoop hive serde2 objectinspector primitive primitiveobjectinspectorconverter
import org apache hadoop hive serde2 objectinspector primitive settablebooleanobjectinspector
import org apache hadoop hive serde2 objectinspector primitive settablebinaryobjectinspector
import org apache hadoop hive serde2 objectinspector primitive settablebyteobjectinspector
import org apache hadoop hive serde2 objectinspector primitive settabledoubleobjectinspector
import org apache hadoop hive serde2 objectinspector primitive settablefloatobjectinspector
import org apache hadoop hive serde2 objectinspector primitive settableintobjectinspector
import org apache hadoop hive serde2 objectinspector primitive settablelongobjectinspector
import org apache hadoop hive serde2 objectinspector primitive settableshortobjectinspector
import org apache hadoop hive serde2 objectinspector primitive settabletimestampobjectinspector
import org apache hadoop hive serde2 objectinspector primitive writablestringobjectinspector
/**
* objectinspectorconverters.
*
*/
public final class objectinspectorconverters
/**
* a converter which will convert objects with one objectinspector to another.
*/
public static interface converter
object convert object input
/**
* identityconverter.
*
*/
public static class identityconverter implements converter
public object convert object input
return input
/**
* returns a converter that converts objects from one oi to another oi. the
* returned (converted) object belongs to this converter, so that it can be
* reused across different calls.
*/
public static converter getconverter objectinspector inputoi
objectinspector outputoi
// if the inputoi is the same as the outputoi, just return an
// identityconverter.
if  inputoi    outputoi
return new identityconverter
switch  outputoi getcategory
case primitive
switch    primitiveobjectinspector  outputoi  getprimitivecategory
case boolean
return new primitiveobjectinspectorconverter booleanconverter
primitiveobjectinspector  inputoi
settablebooleanobjectinspector  outputoi
case byte
return new primitiveobjectinspectorconverter byteconverter
primitiveobjectinspector  inputoi
settablebyteobjectinspector  outputoi
case short
return new primitiveobjectinspectorconverter shortconverter
primitiveobjectinspector  inputoi
settableshortobjectinspector  outputoi
case int
return new primitiveobjectinspectorconverter intconverter
primitiveobjectinspector  inputoi
settableintobjectinspector  outputoi
case long
return new primitiveobjectinspectorconverter longconverter
primitiveobjectinspector  inputoi
settablelongobjectinspector  outputoi
case float
return new primitiveobjectinspectorconverter floatconverter
primitiveobjectinspector  inputoi
settablefloatobjectinspector  outputoi
case double
return new primitiveobjectinspectorconverter doubleconverter
primitiveobjectinspector  inputoi
settabledoubleobjectinspector  outputoi
case string
if  outputoi instanceof writablestringobjectinspector
return new primitiveobjectinspectorconverter textconverter
primitiveobjectinspector  inputoi
else if  outputoi instanceof javastringobjectinspector
return new primitiveobjectinspectorconverter stringconverter
primitiveobjectinspector  inputoi
case timestamp
return new primitiveobjectinspectorconverter timestampconverter
primitiveobjectinspector  inputoi
settabletimestampobjectinspector  outputoi
case binary
return new primitiveobjectinspectorconverter binaryconverter
primitiveobjectinspector inputoi
settablebinaryobjectinspector outputoi
default
throw new runtimeexception
inputoi gettypename         outputoi gettypename
case struct
return new structconverter  structobjectinspector  inputoi
settablestructobjectinspector  outputoi
case list
return new listconverter  listobjectinspector  inputoi
settablelistobjectinspector  outputoi
case map
return new mapconverter  mapobjectinspector  inputoi
settablemapobjectinspector  outputoi
default
throw new runtimeexception
inputoi gettypename         outputoi gettypename
/**
* a converter class for list.
*/
public static class listconverter implements converter
listobjectinspector inputoi
settablelistobjectinspector outputoi
objectinspector inputelementoi
objectinspector outputelementoi
arraylist<converter> elementconverters
object output
public listconverter listobjectinspector inputoi
settablelistobjectinspector outputoi
this inputoi   inputoi
this outputoi   outputoi
inputelementoi   inputoi getlistelementobjectinspector
outputelementoi   outputoi getlistelementobjectinspector
output   outputoi create 0
elementconverters   new arraylist<converter>
@override
public object convert object input
if  input    null
return null
// create enough elementconverters
// note: we have to have a separate elementconverter for each element,
// because the elementconverters can reuse the internal object.
// so it's not safe to use the same elementconverter to convert multiple
// elements.
int size   inputoi getlistlength input
while  elementconverters size   < size
elementconverters add getconverter inputelementoi  outputelementoi
// convert the elements
outputoi resize output  size
for  int index   0  index < size  index
object inputelement   inputoi getlistelement input  index
object outputelement   elementconverters get index  convert
inputelement
outputoi set output  index  outputelement
return output
/**
* a converter class for struct.
*/
public static class structconverter implements converter
structobjectinspector inputoi
settablestructobjectinspector outputoi
list<? extends structfield> inputfields
list<? extends structfield> outputfields
arraylist<converter> fieldconverters
object output
public structconverter structobjectinspector inputoi
settablestructobjectinspector outputoi
this inputoi   inputoi
this outputoi   outputoi
inputfields   inputoi getallstructfieldrefs
outputfields   outputoi getallstructfieldrefs
assert  inputfields size      outputfields size
fieldconverters   new arraylist<converter> inputfields size
for  int f   0  f < inputfields size    f
fieldconverters add getconverter inputfields get f
getfieldobjectinspector    outputfields get f
getfieldobjectinspector
output   outputoi create
@override
public object convert object input
if  input    null
return null
// convert the fields
for  int f   0  f < inputfields size    f
object inputfieldvalue   inputoi getstructfielddata input  inputfields
get f
object outputfieldvalue   fieldconverters get f  convert
inputfieldvalue
outputoi setstructfielddata output  outputfields get f
outputfieldvalue
return output
/**
* a converter class for map.
*/
public static class mapconverter implements converter
mapobjectinspector inputoi
settablemapobjectinspector outputoi
objectinspector inputkeyoi
objectinspector outputkeyoi
objectinspector inputvalueoi
objectinspector outputvalueoi
arraylist<converter> keyconverters
arraylist<converter> valueconverters
object output
public mapconverter mapobjectinspector inputoi
settablemapobjectinspector outputoi
this inputoi   inputoi
this outputoi   outputoi
inputkeyoi   inputoi getmapkeyobjectinspector
outputkeyoi   outputoi getmapkeyobjectinspector
inputvalueoi   inputoi getmapvalueobjectinspector
outputvalueoi   outputoi getmapvalueobjectinspector
keyconverters   new arraylist<converter>
valueconverters   new arraylist<converter>
output   outputoi create
@override
public object convert object input
if  input    null
return null
// create enough keyconverters/valueconverters
// note: we have to have a separate key/valueconverter for each key/value,
// because the key/valueconverters can reuse the internal object.
// so it's not safe to use the same key/valueconverter to convert multiple
// key/values.
// note: this code tries to get all key-value pairs out of the map.
// it's not very efficient. the more efficient way should be to let mapoi
// return an iterator. this is currently not supported by mapoi yet.
map<?  ?> map   inputoi getmap input
int size   map size
while  keyconverters size   < size
keyconverters add getconverter inputkeyoi  outputkeyoi
valueconverters add getconverter inputvalueoi  outputvalueoi
// clear the output
outputoi clear output
// convert the key/value pairs
int entryid   0
for  map entry<?  ?> entry   map entryset
object inputkey   entry getkey
object inputvalue   entry getvalue
object outputkey   keyconverters get entryid  convert inputkey
object outputvalue   valueconverters get entryid  convert inputvalue
entryid
outputoi put output  outputkey  outputvalue
return output
private objectinspectorconverters
// prevent instantiation