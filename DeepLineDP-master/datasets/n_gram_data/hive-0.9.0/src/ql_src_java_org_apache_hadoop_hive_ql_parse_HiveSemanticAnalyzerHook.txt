/*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql parse
import java io serializable
import java util list
import org apache hadoop hive ql exec task
import org apache hadoop hive ql hooks hook
/**
* hivesemanticanalyzerhook allows hive to be extended with custom
* logic for semantic analysis of ql statements.  this interface
* and any hive internals it exposes are currently
* "limited private and evolving" (unless otherwise stated elsewhere)
* and intended mainly for use by the howl project.
*
*<p>
*
* note that the lifetime of an instantiated hook object is scoped to
* the analysis of a single statement; hook instances are never reused.
*/
public interface hivesemanticanalyzerhook extends hook
/**
* invoked before hive performs its own semantic analysis on
* a statement.  the implementation may inspect the statement ast and
* prevent its execution by throwing a semanticexception.
* optionally, it may also augment/rewrite the ast, but must produce
* a form equivalent to one which could have
* been returned directly from hive's own parser.
*
* @param context context information for semantic analysis
*
* @param ast ast being analyzed and optionally rewritten
*
* @return replacement ast (typically the same as the original ast unless the
* entire tree had to be replaced; must not be null)
*/
public astnode preanalyze
hivesemanticanalyzerhookcontext context
astnode ast  throws semanticexception
/**
* invoked after hive performs its own semantic analysis on a
* statement (including optimization).
* hive calls postanalyze on the same hook object
* as preanalyze, so the hook can maintain state across the calls.
*
* @param context context information for semantic analysis
* @param roottasks root tasks produced by semantic analysis;
* the hook is free to modify this list or its contents
*/
public void postanalyze
hivesemanticanalyzerhookcontext context
list<task<? extends serializable>> roottasks  throws semanticexception