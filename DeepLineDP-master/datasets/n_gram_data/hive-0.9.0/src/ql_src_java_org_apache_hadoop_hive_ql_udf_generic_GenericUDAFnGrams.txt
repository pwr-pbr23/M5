/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql udf generic
import java util arraylist
import java util list
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop hive ql exec description
import org apache hadoop hive ql exec udfargumenttypeexception
import org apache hadoop hive ql metadata hiveexception
import org apache hadoop hive ql parse semanticexception
import org apache hadoop hive serde2 io doublewritable
import org apache hadoop hive serde2 objectinspector objectinspector
import org apache hadoop hive serde2 objectinspector objectinspectorfactory
import org apache hadoop hive serde2 objectinspector primitiveobjectinspector
import org apache hadoop hive serde2 objectinspector standardmapobjectinspector
import org apache hadoop hive serde2 objectinspector standardlistobjectinspector
import org apache hadoop hive serde2 objectinspector structobjectinspector
import org apache hadoop hive serde2 objectinspector structfield
import org apache hadoop hive serde2 objectinspector primitive doubleobjectinspector
import org apache hadoop hive serde2 objectinspector primitive writabledoubleobjectinspector
import org apache hadoop hive serde2 objectinspector primitive primitiveobjectinspectorfactory
import org apache hadoop hive serde2 objectinspector primitive primitiveobjectinspectorutils
import org apache hadoop hive serde2 typeinfo primitivetypeinfo
import org apache hadoop hive serde2 typeinfo listtypeinfo
import org apache hadoop hive serde2 typeinfo typeinfo
import org apache hadoop util stringutils
import org apache hadoop io text
/**
* estimates the top-k n-grams in arbitrary sequential data using a heuristic.
*/
@description name
value
extended
public class genericudafngrams implements genericudafresolver
static final log log   logfactory getlog genericudafngrams class getname
@override
public genericudafevaluator getevaluator typeinfo parameters  throws semanticexception
if  parameters length    3    parameters length    4
throw new udfargumenttypeexception parameters length 1
// validate the first parameter, which is the expression to compute over. this should be an
// array of strings type, or an array of arrays of strings.
primitivetypeinfo pti
if  parameters getcategory      objectinspector category list
throw new udfargumenttypeexception 0
parameters gettypename
switch    listtypeinfo  parameters  getlistelementtypeinfo   getcategory
case primitive
// parameter 1 was an array of primitives, so make sure the primitives are strings.
pti    primitivetypeinfo    listtypeinfo  parameters  getlistelementtypeinfo
break
case list
// parameter 1 was an array of arrays, so make sure that the inner arrays contain
// primitive strings.
listtypeinfo lti    listtypeinfo
listtypeinfo  parameters  getlistelementtypeinfo
pti    primitivetypeinfo  lti getlistelementtypeinfo
break
default
throw new udfargumenttypeexception 0
parameters gettypename
if pti getprimitivecategory      primitiveobjectinspector primitivecategory string
throw new udfargumenttypeexception 0
parameters gettypename
// validate the second parameter, which should be an integer
if parameters getcategory      objectinspector category primitive
throw new udfargumenttypeexception 1
parameters gettypename
switch   primitivetypeinfo  parameters  getprimitivecategory
case byte
case short
case int
case long
case timestamp
break
default
throw new udfargumenttypeexception 1
parameters gettypename
// validate the third parameter, which should also be an integer
if parameters getcategory      objectinspector category primitive
throw new udfargumenttypeexception 2
parameters gettypename
switch   primitivetypeinfo  parameters  getprimitivecategory
case byte
case short
case int
case long
case timestamp
break
default
throw new udfargumenttypeexception 2
parameters gettypename
// if we have the optional fourth parameter, make sure it's also an integer
if parameters length    4
if parameters getcategory      objectinspector category primitive
throw new udfargumenttypeexception 3
parameters gettypename
switch   primitivetypeinfo  parameters  getprimitivecategory
case byte
case short
case int
case long
case timestamp
break
default
throw new udfargumenttypeexception 3
parameters gettypename
return new genericudafngramevaluator
/**
* a constant-space heuristic to estimate the top-k n-grams.
*/
public static class genericudafngramevaluator extends genericudafevaluator
// for partial1 and complete: objectinspectors for original data
private standardlistobjectinspector outerinputoi
private standardlistobjectinspector innerinputoi
private primitiveobjectinspector inputoi
private primitiveobjectinspector noi
private primitiveobjectinspector koi
private primitiveobjectinspector poi
// for partial2 and final: objectinspectors for partial aggregations
private standardlistobjectinspector loi
@override
public objectinspector init mode m  objectinspector parameters  throws hiveexception
super init m  parameters
// init input object inspectors
if  m    mode partial1    m    mode complete
outerinputoi    standardlistobjectinspector  parameters
if outerinputoi getlistelementobjectinspector   getcategory
objectinspector category list
// we're dealing with input that is an array of arrays of strings
innerinputoi    standardlistobjectinspector  outerinputoi getlistelementobjectinspector
inputoi    primitiveobjectinspector  innerinputoi getlistelementobjectinspector
else
// we're dealing with input that is an array of strings
inputoi    primitiveobjectinspector  outerinputoi getlistelementobjectinspector
innerinputoi   null
noi    primitiveobjectinspector  parameters
koi    primitiveobjectinspector  parameters
if parameters length    4
poi    primitiveobjectinspector  parameters
else
poi   null
else
// init the list object inspector for handling partial aggregations
loi    standardlistobjectinspector  parameters
// init output object inspectors.
//
// the return type for a partial aggregation is still a list of strings.
//
// the return type for final and complete is a full aggregation result, which is
// an array of structures containing the n-gram and its estimated frequency.
if  m    mode partial1    m    mode partial2
return objectinspectorfactory getstandardlistobjectinspector
primitiveobjectinspectorfactory writablestringobjectinspector
else
// final return type that goes back to hive: a list of structs with n-grams and their
// estimated frequencies.
arraylist<objectinspector> foi   new arraylist<objectinspector>
foi add objectinspectorfactory getstandardlistobjectinspector
primitiveobjectinspectorfactory writablestringobjectinspector
foi add primitiveobjectinspectorfactory writabledoubleobjectinspector
arraylist<string> fname   new arraylist<string>
fname add
fname add
return objectinspectorfactory getstandardlistobjectinspector
objectinspectorfactory getstandardstructobjectinspector fname  foi
@override
public void merge aggregationbuffer agg  object partial  throws hiveexception
if partial    null
return
ngramaggbuf myagg    ngramaggbuf  agg
list<text> partialngrams    list<text>  loi getlist partial
int n   integer parseint partialngrams get partialngrams size   1  tostring
if myagg n > 0    myagg n    n
throw new hiveexception getclass   getsimplename
n
myagg n
myagg n   n
partialngrams remove partialngrams size   1
myagg nge merge partialngrams
@override
public object terminatepartial aggregationbuffer agg  throws hiveexception
ngramaggbuf myagg    ngramaggbuf  agg
arraylist<text> result   myagg nge serialize
result add new text integer tostring myagg n
return result
private void processngrams ngramaggbuf agg  arraylist<string> seq  throws hiveexception
for int i   seq size   agg n  i >  0  i
arraylist<string> ngram   new arraylist<string>
for int j   0  j < agg n  j
ngram add seq get i j
agg nge add ngram
@override
public void iterate aggregationbuffer agg  object parameters  throws hiveexception
assert  parameters length    3    parameters length    4
if parameters    null    parameters    null    parameters    null
return
ngramaggbuf myagg    ngramaggbuf  agg
// parse out 'n' and 'k' if we haven't already done so, and while we're at it,
// also parse out the precision factor 'pf' if the user has supplied one.
if  myagg nge isinitialized
int n   primitiveobjectinspectorutils getint parameters  noi
int k   primitiveobjectinspectorutils getint parameters  koi
int pf   0
if n < 1
throw new hiveexception getclass   getsimplename
n
if k < 1
throw new hiveexception getclass   getsimplename
k
if parameters length    4
pf   primitiveobjectinspectorutils getint parameters  poi
if pf < 1
throw new hiveexception getclass   getsimplename
pf
else
pf   1     placeholder  minimum pf value is enforced in ngramestimator
// set the parameters
myagg n   n
myagg nge initialize k  pf  n
// get the input expression
list<text> outer    list<text>  outerinputoi getlist parameters
if innerinputoi    null
// we're dealing with an array of arrays of strings
for int i   0  i < outer size    i
list<text> inner    list<text>  innerinputoi getlist outer get i
arraylist<string> words   new arraylist<string>
for int j   0  j < inner size    j
string word   primitiveobjectinspectorutils getstring inner get j   inputoi
words add word
// parse out n-grams, update frequency counts
processngrams myagg  words
else
// we're dealing with an array of strings
arraylist<string> words   new arraylist<string>
for int i   0  i < outer size    i
string word   primitiveobjectinspectorutils getstring outer get i   inputoi
words add word
// parse out n-grams, update frequency counts
processngrams myagg  words
@override
public object terminate aggregationbuffer agg  throws hiveexception
ngramaggbuf myagg    ngramaggbuf  agg
return myagg nge getngrams
// aggregation buffer methods.
static class ngramaggbuf implements aggregationbuffer
ngramestimator nge
int n
@override
public aggregationbuffer getnewaggregationbuffer   throws hiveexception
ngramaggbuf result   new ngramaggbuf
result nge   new ngramestimator
reset result
return result
@override
public void reset aggregationbuffer agg  throws hiveexception
ngramaggbuf result    ngramaggbuf  agg
result nge reset
result n   0