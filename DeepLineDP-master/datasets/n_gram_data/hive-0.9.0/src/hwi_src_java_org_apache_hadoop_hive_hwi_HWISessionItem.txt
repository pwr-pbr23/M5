/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive hwi
import java io file
import java io fileoutputstream
import java io ioexception
import java io printstream
import java util arraylist
import java util list
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop hive cli clisessionstate
import org apache hadoop hive cli optionsprocessor
import org apache hadoop hive common logutils
import org apache hadoop hive common logutils loginitializationexception
import org apache hadoop hive conf hiveconf
import org apache hadoop hive ql commandneedretryexception
import org apache hadoop hive ql driver
import org apache hadoop hive ql history hivehistoryviewer
import org apache hadoop hive ql processors commandprocessor
import org apache hadoop hive ql processors commandprocessorfactory
import org apache hadoop hive ql session sessionstate
/**
* hwisessionitem can be viewed as a wrapper for a hive shell. with it the user
* has a session on the web server rather then in a console window.
*
*/
public class hwisessionitem implements runnable  comparable<hwisessionitem>
protected static final log l4j   logfactory getlog hwisessionitem class
getname
/** represents the state a session item can be in. */
public enum websessionitemstatus
new  ready  query_set  query_running  destroy  kill_query
/** the web interface sessionname this is used to identify the session. */
private final string sessionname
/**
* respresents the current status of the session. used by components to
* determine state. operations will throw exceptions if the item is not in the
* correct state.
*/
private hwisessionitem websessionitemstatus status
private clisessionstate ss
/** standard out from the session will be written to this local file. */
private string resultfile
/** standard error from the session will be written to this local file. */
private string errorfile
/**
* the results from the driver. this is used for storing the most result
* results from the driver in memory.
*/
private arraylist<arraylist<string>> resultbucket
/** limits the resultbucket to be no greater then this size. */
private int resultbucketmaxsize
/** list of queries that this item should/has operated on. */
private list<string> queries
/** status code results of queries. */
private list<integer> queryret
/** reference to the configuration. */
private hiveconf conf
/** user privileges. */
private hwiauth auth
public thread runnable
/**
* threading sessionstate issues require us to capture a reference to the hive
* history file and store it.
*/
private string historyfile
/**
* creates an instance of websessionitem, sets status to new.
*/
public hwisessionitem hwiauth auth  string sessionname
this auth   auth
this sessionname   sessionname
l4j debug
status   websessionitemstatus new
queries   new arraylist<string>
queryret   new arraylist<integer>
resultbucket   new arraylist<arraylist<string>>
resultbucketmaxsize   1000
runnable   new thread this
runnable start
l4j debug
synchronized  runnable
if  status    websessionitemstatus ready
try
runnable wait
catch  exception ex
l4j debug
/**
* this is the initialization process that is carried out for each
* sessionitem. the goal is to emulate the startup of clidriver.
*/
private void iteminit
l4j debug     getsessionname
optionsprocessor oproc   new optionsprocessor
if  system getproperty       null
string parts   system getproperty    split
if   oproc process_stage1 parts
try
logutils inithivelog4j
catch  loginitializationexception e
l4j warn e
conf   new hiveconf sessionstate class
ss   new clisessionstate conf
sessionstate start ss
queries add     auth getuser
auth getgroups
queries add     auth getuser
/*
* hivehistoryfilename will not be accessible outside this thread. we must
* capture this now.
*/
historyfile   sessionstate get   gethivehistory   gethistfilename
l4j debug     getsessionname
status   websessionitemstatus ready
synchronized  runnable
runnable notifyall
/**
* hwisessionitem is a runnable instance. calling this method will change the
* status to query_set and notify(). the run method detects this and then
* continues processing.
*/
public void clientstart   throws hwiexception
if  status    websessionitemstatus query_running
throw new hwiexception
status   websessionitemstatus query_set
synchronized  runnable
runnable notifyall
l4j debug getsessionname
public void clientkill   throws hwiexception
if  status    websessionitemstatus query_running
throw new hwiexception
status   websessionitemstatus kill_query
l4j debug getsessionname
/** this method clears the private member variables. */
public void clientrenew   throws hwiexception
throwifrunning
queries   new arraylist<string>
queryret   new arraylist<integer>
resultbucket   new arraylist<arraylist<string>>
resultfile   null
errorfile   null
// this.conf = null;
// this.ss = null;
status   websessionitemstatus new
l4j debug getsessionname
/**
* this is a callback style function used by the hivesessionmanager. the
* hivesessionmanager notices this and attempts to stop the query.
*/
protected void killit
l4j debug getsessionname
if  runnable    null
try
runnable join 1000
l4j debug getsessionname
catch  interruptedexception e
l4j error getsessionname        e
/**
* helper function to get configuration variables.
*
* @param wanted
*          a confvar
* @return value of the configuration variable.
*/
public string gethiveconfvar hiveconf confvars wanted  throws hwiexception
string result   null
try
result   ss getconf   getvar wanted
catch  exception ex
throw new hwiexception ex
return result
public string gethiveconfvar string s  throws hwiexception
string result   null
try
result   conf get s
catch  exception ex
throw new hwiexception ex
return result
/*
* mapred.job.tracker could be host:port or just local
* mapred.job.tracker.http.address could be host:port or just host in some
* configurations http.address is set to 0.0.0.0 we are combining the two
* variables to provide a url to the job tracker wui if it exists. if hadoop
* chose the first available port for the jobtracker http port will can not
* determine it.
*/
public string getjobtrackerurl string jobid  throws hwiexception
string jt   this gethiveconfvar
string jth   this gethiveconfvar
string jtparts   null
string jthttpparts   null
if  jt equalsignorecase
jtparts   new string
jtparts
jtparts
else
jtparts   jt split
if  jth contains
jthttpparts   jth split
else
jthttpparts   new string
jthttpparts   jth
jthttpparts
return jtparts       jthttpparts       jobid
@override
/*
* hwisessionitem uses a wait() notify() system. if the thread detects conf to
* be null, control is transfered to inititem(). a status of query_set causes
* control to transfer to the runquery() method. destroy will cause the run
* loop to end permanently.
*/
public void run
synchronized  runnable
while  status    hwisessionitem websessionitemstatus destroy
if  status    websessionitemstatus new
iteminit
if  status    websessionitemstatus query_set
runquery
try
runnable wait
catch  interruptedexception e
l4j error    e
end while
end sync
end run
/**
* runquery iterates the list of queries executing each query.
*/
public void runquery
fileoutputstream fos   null
if  getresultfile      null
try
fos   new fileoutputstream new file resultfile
ss out   new printstream fos  true
catch  java io filenotfoundexception fex
l4j error getsessionname         resultfile  fex
catch  java io unsupportedencodingexception uex
l4j error getsessionname         resultfile  uex
else
l4j debug getsessionname
l4j debug getsessionname
status   websessionitemstatus query_running
// expect one return per query
queryret   new arraylist<integer> queries size
for  int i   0  i < queries size    i
string cmd   queries get i
string cmd_trimmed   cmd trim
string tokens   cmd_trimmed split
string cmd_1   cmd_trimmed substring tokens length    trim
commandprocessor proc   commandprocessorfactory get tokens
if  proc    null
if  proc instanceof driver
driver qp    driver  proc
qp settrycount integer max_value
try
queryret add integer valueof qp run cmd  getresponsecode
arraylist<string> res   new arraylist<string>
try
while  qp getresults res
arraylist<string> rescopy   new arraylist<string>
rescopy addall res
resultbucket add rescopy
if  resultbucket size   > resultbucketmaxsize
resultbucket remove 0
for  string row   res
if  ss    null
if  ss out    null
ss out println row
else
throw new runtimeexception
res clear
catch  ioexception ex
l4j error getsessionname         getresultfile
ex
catch  commandneedretryexception e
// this should never happen since we driver.settrycount(integer.max_value)
l4j error getsessionname        e
finally
qp close
else
try
queryret add integer valueof proc run cmd_1  getresponsecode
catch  commandneedretryexception e
// this should never happen if there is no bug
l4j error getsessionname        e
else
// processor was null
l4j error getsessionname
cmd
end for
// cleanup
try
if  fos    null
fos close
catch  ioexception ex
l4j error getsessionname         getresultfile
ex
status   websessionitemstatus ready
l4j debug getsessionname
synchronized  runnable
runnable notifyall
/**
* this is a chained call to sessionstate.setissilent(). use this if you do
* not want the result file to have information status
*/
public void setssissilent boolean silent  throws hwiexception
if  ss    null
throw new hwiexception
ss setissilent silent
/**
* this is a chained call to sessionstate.getissilent().
*/
public boolean getssissilent   throws hwiexception
if  ss    null
throw new hwiexception
return ss getissilent
/** to support sorting/set. */
public int compareto hwisessionitem other
if  other    null
return  1
return getsessionname   compareto other getsessionname
/**
*
* @return the hivehistoryviewer for the session
* @throws hwiexception
*/
public hivehistoryviewer gethistoryviewer   throws hwiexception
if  ss    null
throw new hwiexception
/*
* we can not call this.ss.get().gethivehistory().gethistfilename() directly
* as this call is made from a a jetty thread and will return null
*/
hivehistoryviewer hv   new hivehistoryviewer historyfile
return hv
/**
* uses the sessionname property to compare to sessions.
*
* @return true if sessionnames are equal false otherwise
*/
@override
public boolean equals object other
if  other    null
return false
if    other instanceof hwisessionitem
return false
hwisessionitem o    hwisessionitem  other
if  getsessionname   equals o getsessionname
return true
else
return false
public string getresultfile
return resultfile
public void setresultfile string resultfile
this resultfile   resultfile
/**
* the session name is an identifier to recognize the session.
*
* @return the session's name
*/
public string getsessionname
return sessionname
/**
* used to represent to the user and other components what state the
* hwisessionitem is in. certain commands can only be run when the application
* is in certain states.
*
* @return the current status of the session
*/
public websessionitemstatus getstatus
return status
/**
* currently unused.
*
* @return a string with the full path to the error file.
*/
public string geterrorfile
return errorfile
/**
* currently unused.
*
* @param errorfile
*          the full path to the file for results.
*/
public void seterrorfile string errorfile
this errorfile   errorfile
/**
* @return the auth
*/
public hwiauth getauth
return auth
/**
* @param auth
*          the auth to set
*/
protected void setauth hwiauth auth
this auth   auth
/** returns an unmodifiable list of queries. */
public list<string> getqueries
return java util collections unmodifiablelist queries
/**
* adds a new query to the execution list.
*
* @param query
*          query to be added to the list
*/
public void addquery string query  throws hwiexception
throwifrunning
queries add query
/**
* removes a query from the execution list.
*
* @param item
*          the 0 based index of the item to be removed
*/
public void removequery int item  throws hwiexception
throwifrunning
queries remove item
public void clearqueries   throws hwiexception
throwifrunning
queries clear
/** returns the value for resultbucketmaxsize. */
public int getresultbucketmaxsize
return resultbucketmaxsize
/**
* sets the value for resultbucketmaxsize.
*
* @param size
*          the new size
*/
public void setresultbucketmaxsize int size
resultbucketmaxsize   size
/** gets the value for resultbucket. */
public arraylist<arraylist<string>> getresultbucket
return resultbucket
/**
* the hwisessionitem stores the result of each query in an array.
*
* @return unmodifiable list of return codes
*/
public list<integer> getqueryret
return java util collections unmodifiablelist queryret
/**
* if the itemstatus is queryrunning most of the configuration is in a read
* only state.
*/
private void throwifrunning   throws hwiexception
if  status    websessionitemstatus query_running
throw new hwiexception