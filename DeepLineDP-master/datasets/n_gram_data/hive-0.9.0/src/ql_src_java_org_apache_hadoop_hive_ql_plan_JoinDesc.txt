/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql plan
import java io serializable
import java util arraylist
import java util arrays
import java util linkedhashmap
import java util list
import java util map
/**
* join operator descriptor implementation.
*
*/
@explain displayname
public class joindesc implements serializable
private static final long serialversionuid   1l
public static final int inner_join   0
public static final int left_outer_join   1
public static final int right_outer_join   2
public static final int full_outer_join   3
public static final int unique_join   4
public static final int left_semi_join   5
// used to handle skew join
private boolean handleskewjoin   false
private int skewkeydefinition    1
private map<byte  string> bigkeysdirmap
private map<byte  map<byte  string>> smallkeysdirmap
private map<byte  tabledesc> skewkeysvaluestables
// alias to key mapping
private map<byte  list<exprnodedesc>> exprs
// alias to filter mapping
private map<byte  list<exprnodedesc>> filters
// key index to nullsafe join flag
private boolean nullsafes
// used for create joinoutputobjectinspector
protected list<string> outputcolumnnames
// key:column output name, value:tag
private transient map<string  byte> reversedexprs
// no outer join involved
protected boolean noouterjoin
protected joinconddesc conds
protected byte tagorder
private tabledesc keytabledesc
public joindesc
public joindesc final map<byte  list<exprnodedesc>> exprs
list<string> outputcolumnnames  final boolean noouterjoin
final joinconddesc conds  final map<byte  list<exprnodedesc>> filters
this exprs   exprs
this outputcolumnnames   outputcolumnnames
this noouterjoin   noouterjoin
this conds   conds
this filters   filters
tagorder   new byte
for  int i   0  i < tagorder length  i
tagorder    byte  i
public joindesc final map<byte  list<exprnodedesc>> exprs
list<string> outputcolumnnames  final boolean noouterjoin
final joinconddesc conds
this exprs  outputcolumnnames  noouterjoin  conds  null
public joindesc final map<byte  list<exprnodedesc>> exprs
list<string> outputcolumnnames
this exprs  outputcolumnnames  true  null
public joindesc final map<byte  list<exprnodedesc>> exprs
list<string> outputcolumnnames  final joinconddesc conds
this exprs  outputcolumnnames  true  conds  null
public joindesc joindesc clone
this bigkeysdirmap   clone bigkeysdirmap
this conds   clone conds
this exprs   clone exprs
this nullsafes   clone nullsafes
this handleskewjoin   clone handleskewjoin
this keytabledesc   clone keytabledesc
this noouterjoin   clone noouterjoin
this outputcolumnnames   clone outputcolumnnames
this reversedexprs   clone reversedexprs
this skewkeydefinition   clone skewkeydefinition
this skewkeysvaluestables   clone skewkeysvaluestables
this smallkeysdirmap   clone smallkeysdirmap
this tagorder   clone tagorder
this filters   clone filters
public map<byte  list<exprnodedesc>> getexprs
return exprs
public map<string  byte> getreversedexprs
return reversedexprs
public void setreversedexprs map<string  byte> reversedexprs
this reversedexprs   reversedexprs
@explain displayname
public map<byte  string> getexprsstringmap
if  getexprs      null
return null
linkedhashmap<byte  string> ret   new linkedhashmap<byte  string>
for  map entry<byte  list<exprnodedesc>> ent   getexprs   entryset
stringbuilder sb   new stringbuilder
boolean first   true
if  ent getvalue      null
for  exprnodedesc expr   ent getvalue
if   first
sb append
first   false
sb append
sb append expr getexprstring
sb append
ret put ent getkey    sb tostring
return ret
public void setexprs final map<byte  list<exprnodedesc>> exprs
this exprs   exprs
/**
* get the string representation of filters.
*
* returns null if they are no filters.
*
* @return map from alias to filters on the alias.
*/
@explain displayname
public map<byte  string> getfiltersstringmap
if  getfilters      null    getfilters   size      0
return null
linkedhashmap<byte  string> ret   new linkedhashmap<byte  string>
boolean filterspresent   false
for  map entry<byte  list<exprnodedesc>> ent   getfilters   entryset
stringbuilder sb   new stringbuilder
boolean first   true
if  ent getvalue      null
if  ent getvalue   size      0
filterspresent   true
for  exprnodedesc expr   ent getvalue
if   first
sb append
first   false
sb append
sb append expr getexprstring
sb append
ret put ent getkey    sb tostring
if  filterspresent
return ret
else
return null
public map<byte  list<exprnodedesc>> getfilters
return filters
public void setfilters map<byte  list<exprnodedesc>> filters
this filters   filters
@explain displayname
public list<string> getoutputcolumnnames
return outputcolumnnames
public void setoutputcolumnnames
list<string> outputcolumnnames
this outputcolumnnames   outputcolumnnames
public boolean getnoouterjoin
return noouterjoin
public void setnoouterjoin final boolean noouterjoin
this noouterjoin   noouterjoin
@explain displayname
public list<joinconddesc> getcondslist
if  conds    null
return null
arraylist<joinconddesc> l   new arraylist<joinconddesc>
for  joinconddesc cond   conds
l add cond
return l
public joinconddesc getconds
return conds
public void setconds final joinconddesc conds
this conds   conds
/**
* the order in which tables should be processed when joining.
*
* @return array of tags
*/
public byte gettagorder
return tagorder
/**
* the order in which tables should be processed when joining.
*
* @param tagorder
*          array of tags
*/
public void settagorder byte tagorder
this tagorder   tagorder
@explain displayname
public boolean gethandleskewjoin
return handleskewjoin
/**
* set to handle skew join in this join op.
*
* @param handleskewjoin
*/
public void sethandleskewjoin boolean handleskewjoin
this handleskewjoin   handleskewjoin
/**
* @return mapping from tbl to dir for big keys.
*/
public map<byte  string> getbigkeysdirmap
return bigkeysdirmap
/**
* set the mapping from tbl to dir for big keys.
*
* @param bigkeysdirmap
*/
public void setbigkeysdirmap map<byte  string> bigkeysdirmap
this bigkeysdirmap   bigkeysdirmap
/**
* @return mapping from tbl to dir for small keys
*/
public map<byte  map<byte  string>> getsmallkeysdirmap
return smallkeysdirmap
/**
* set the mapping from tbl to dir for small keys.
*
* @param smallkeysdirmap
*/
public void setsmallkeysdirmap map<byte  map<byte  string>> smallkeysdirmap
this smallkeysdirmap   smallkeysdirmap
/**
* @return skew key definition. if we see a key's associated entries' number
*         is bigger than this, we will define this key as a skew key.
*/
public int getskewkeydefinition
return skewkeydefinition
/**
* set skew key definition.
*
* @param skewkeydefinition
*/
public void setskewkeydefinition int skewkeydefinition
this skewkeydefinition   skewkeydefinition
/**
* @return the table desc for storing skew keys and their corresponding value;
*/
public map<byte  tabledesc> getskewkeysvaluestables
return skewkeysvaluestables
/**
* @param skewkeysvaluestables
*          set the table desc for storing skew keys and their corresponding
*          value;
*/
public void setskewkeysvaluestables map<byte  tabledesc> skewkeysvaluestables
this skewkeysvaluestables   skewkeysvaluestables
public boolean isnoouterjoin
return noouterjoin
public void setkeytabledesc tabledesc keytbldesc
keytabledesc   keytbldesc
public tabledesc getkeytabledesc
return keytabledesc
public boolean getnullsafes
return nullsafes
public void setnullsafes boolean nullsafes
this nullsafes   nullsafes
@explain displayname
public string getnullsafestring
if  nullsafes    null
return null
boolean hasns   false
for  boolean ns   nullsafes
hasns    ns
return hasns ? arrays tostring nullsafes    null