/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive contrib util typedbytes
import java io datainput
import java io eofexception
import java io ioexception
import java util arraylist
import java util list
import java util treemap
import org apache hadoop io writableutils
import org apache hadoop record buffer
/**
* provides functionality for reading typed bytes.
*/
public class typedbytesinput
private datainput in
private typedbytesinput
private void setdatainput datainput in
this in   in
private static threadlocal tbin   new threadlocal
@override
protected synchronized object initialvalue
return new typedbytesinput
/**
* get a thread-local typed bytes input for the supplied {@link datainput}.
*
* @param in
*          data input object
* @return typed bytes input corresponding to the supplied {@link datainput}.
*/
public static typedbytesinput get datainput in
typedbytesinput bin    typedbytesinput  tbin get
bin setdatainput in
return bin
/** creates a new instance of typedbytesinput. */
public typedbytesinput datainput in
this in   in
/**
* reads a typed bytes sequence and converts it to a java object. the first
* byte is interpreted as a type code, and then the right number of subsequent
* bytes are read depending on the obtained type.
*
* @return the obtained object or null when the end of the file is reached
* @throws ioexception
*/
public object read   throws ioexception
int code   1
try
code   in readunsignedbyte
catch  eofexception eof
return null
if  code    type bytes code
return new buffer readbytes
else if  code    type byte code
return readbyte
else if  code    type bool code
return readbool
else if  code    type int code
return readint
else if  code    type short code
return readshort
else if  code    type long code
return readlong
else if  code    type float code
return readfloat
else if  code    type double code
return readdouble
else if  code    type string code
return readstring
else if  code    type vector code
return readvector
else if  code    type list code
return readlist
else if  code    type map code
return readmap
else if  code    type marker code
return null
else if  50 <  code    code <  200       application specific typecodes
return new buffer readbytes
else
throw new runtimeexception
/**
* reads a typed bytes sequence. the first byte is interpreted as a type code,
* and then the right number of subsequent bytes are read depending on the
* obtained type.
*
* @return the obtained typed bytes sequence or null when the end of the file
*         is reached
* @throws ioexception
*/
public byte readraw   throws ioexception
int code    1
try
code   in readunsignedbyte
catch  eofexception eof
return null
if  code    type bytes code
return readrawbytes
else if  code    type byte code
return readrawbyte
else if  code    type bool code
return readrawbool
else if  code    type int code
return readrawint
else if  code    type long code
return readrawlong
else if  code    type float code
return readrawfloat
else if  code    type double code
return readrawdouble
else if  code    type string code
return readrawstring
else if  code    type vector code
return readrawvector
else if  code    type list code
return readrawlist
else if  code    type map code
return readrawmap
else if  code    type marker code
return null
else if  50 <  code    code <  200       application specific typecodes
return readrawbytes
else
throw new runtimeexception
/**
* reads a type byte and returns the corresponding {@link type}.
*
* @return the obtained type or null when the end of the file is reached
* @throws ioexception
*/
public type readtype   throws ioexception
int code    1
try
code   in readunsignedbyte
catch  eofexception eof
return null
for  type type   type values
if  type code    code
return type
return null
/**
* skips a type byte.
*
* @return true iff the end of the file was not reached
* @throws ioexception
*/
public boolean skiptype   throws ioexception
try
in readbyte
return true
catch  eofexception eof
return false
/**
* reads the bytes following a <code>type.bytes</code> code.
*
* @return the obtained bytes sequence
* @throws ioexception
*/
public byte readbytes   throws ioexception
int length   in readint
byte bytes   new byte
in readfully bytes
return bytes
/**
* reads the raw bytes following a <code>type.bytes</code> code.
*
* @return the obtained bytes sequence
* @throws ioexception
*/
public byte readrawbytes   throws ioexception
int length   in readint
byte bytes   new byte
bytes    byte  type bytes code
bytes    byte   0xff    length >> 24
bytes    byte   0xff    length >> 16
bytes    byte   0xff    length >> 8
bytes    byte   0xff   length
in readfully bytes  5  length
return bytes
/**
* reads the byte following a <code>type.byte</code> code.
*
* @return the obtained byte
* @throws ioexception
*/
public byte readbyte   throws ioexception
return in readbyte
/**
* reads the raw byte following a <code>type.byte</code> code.
*
* @return the obtained byte
* @throws ioexception
*/
public byte readrawbyte   throws ioexception
byte bytes   new byte
bytes    byte  type byte code
in readfully bytes  1  1
return bytes
/**
* reads the boolean following a <code>type.bool</code> code.
*
* @return the obtained boolean
* @throws ioexception
*/
public boolean readbool   throws ioexception
return in readboolean
/**
* reads the raw bytes following a <code>type.bool</code> code.
*
* @return the obtained bytes sequence
* @throws ioexception
*/
public byte readrawbool   throws ioexception
byte bytes   new byte
bytes    byte  type bool code
in readfully bytes  1  1
return bytes
/**
* reads the integer following a <code>type.int</code> code.
*
* @return the obtained integer
* @throws ioexception
*/
public int readint   throws ioexception
return in readint
/**
* reads the short following a <code>type.short</code> code.
*
* @return the obtained short
* @throws ioexception
*/
public short readshort   throws ioexception
return in readshort
/**
* reads the raw bytes following a <code>type.int</code> code.
*
* @return the obtained bytes sequence
* @throws ioexception
*/
public byte readrawint   throws ioexception
byte bytes   new byte
bytes    byte  type int code
in readfully bytes  1  4
return bytes
/**
* reads the long following a <code>type.long</code> code.
*
* @return the obtained long
* @throws ioexception
*/
public long readlong   throws ioexception
return in readlong
/**
* reads the raw bytes following a <code>type.long</code> code.
*
* @return the obtained bytes sequence
* @throws ioexception
*/
public byte readrawlong   throws ioexception
byte bytes   new byte
bytes    byte  type long code
in readfully bytes  1  8
return bytes
/**
* reads the float following a <code>type.float</code> code.
*
* @return the obtained float
* @throws ioexception
*/
public float readfloat   throws ioexception
return in readfloat
/**
* reads the raw bytes following a <code>type.float</code> code.
*
* @return the obtained bytes sequence
* @throws ioexception
*/
public byte readrawfloat   throws ioexception
byte bytes   new byte
bytes    byte  type float code
in readfully bytes  1  4
return bytes
/**
* reads the double following a <code>type.double</code> code.
*
* @return the obtained double
* @throws ioexception
*/
public double readdouble   throws ioexception
return in readdouble
/**
* reads the raw bytes following a <code>type.double</code> code.
*
* @return the obtained bytes sequence
* @throws ioexception
*/
public byte readrawdouble   throws ioexception
byte bytes   new byte
bytes    byte  type double code
in readfully bytes  1  8
return bytes
/**
* reads the string following a <code>type.string</code> code.
*
* @return the obtained string
* @throws ioexception
*/
public string readstring   throws ioexception
return writableutils readstring in
/**
* reads the raw bytes following a <code>type.string</code> code.
*
* @return the obtained bytes sequence
* @throws ioexception
*/
public byte readrawstring   throws ioexception
int length   in readint
byte bytes   new byte
bytes    byte  type string code
bytes    byte   0xff    length >> 24
bytes    byte   0xff    length >> 16
bytes    byte   0xff    length >> 8
bytes    byte   0xff   length
in readfully bytes  5  length
return bytes
/**
* reads the vector following a <code>type.vector</code> code.
*
* @return the obtained vector
* @throws ioexception
*/
@suppresswarnings
public arraylist readvector   throws ioexception
int length   readvectorheader
arraylist result   new arraylist length
for  int i   0  i < length  i
result add read
return result
/**
* reads the raw bytes following a <code>type.vector</code> code.
*
* @return the obtained bytes sequence
* @throws ioexception
*/
public byte readrawvector   throws ioexception
buffer buffer   new buffer
int length   readvectorheader
buffer append new byte   byte  type vector code
byte   0xff    length >> 24     byte   0xff    length >> 16
byte   0xff    length >> 8     byte   0xff   length
for  int i   0  i < length  i
buffer append readraw
return buffer get
/**
* reads the header following a <code>type.vector</code> code.
*
* @return the number of elements in the vector
* @throws ioexception
*/
public int readvectorheader   throws ioexception
return in readint
/**
* reads the list following a <code>type.list</code> code.
*
* @return the obtained list
* @throws ioexception
*/
@suppresswarnings
public list readlist   throws ioexception
list list   new arraylist
object obj   read
while  obj    null
list add obj
obj   read
return list
/**
* reads the raw bytes following a <code>type.list</code> code.
*
* @return the obtained bytes sequence
* @throws ioexception
*/
public byte readrawlist   throws ioexception
buffer buffer   new buffer new byte   byte  type list code
byte bytes   readraw
while  bytes    null
buffer append bytes
bytes   readraw
buffer append new byte   byte  type marker code
return buffer get
/**
* reads the map following a <code>type.map</code> code.
*
* @return the obtained map
* @throws ioexception
*/
@suppresswarnings
public treemap readmap   throws ioexception
int length   readmapheader
treemap result   new treemap
for  int i   0  i < length  i
object key   read
object value   read
result put key  value
return result
/**
* reads the raw bytes following a <code>type.map</code> code.
*
* @return the obtained bytes sequence
* @throws ioexception
*/
public byte readrawmap   throws ioexception
buffer buffer   new buffer
int length   readmapheader
buffer append new byte   byte  type map code
byte   0xff    length >> 24     byte   0xff    length >> 16
byte   0xff    length >> 8     byte   0xff   length
for  int i   0  i < length  i
buffer append readraw
buffer append readraw
return buffer get
/**
* reads the header following a <code>type.map</code> code.
*
* @return the number of key-value pairs in the map
* @throws ioexception
*/
public int readmapheader   throws ioexception
return in readint