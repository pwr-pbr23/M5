/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql udf generic
import java util arraylist
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop hive ql exec description
import org apache hadoop hive ql exec udfargumenttypeexception
import org apache hadoop hive ql metadata hiveexception
import org apache hadoop hive ql parse semanticexception
import org apache hadoop hive serde2 io doublewritable
import org apache hadoop hive serde2 objectinspector objectinspector
import org apache hadoop hive serde2 objectinspector objectinspectorfactory
import org apache hadoop hive serde2 objectinspector primitiveobjectinspector
import org apache hadoop hive serde2 objectinspector structfield
import org apache hadoop hive serde2 objectinspector structobjectinspector
import org apache hadoop hive serde2 objectinspector primitive doubleobjectinspector
import org apache hadoop hive serde2 objectinspector primitive longobjectinspector
import org apache hadoop hive serde2 objectinspector primitive primitiveobjectinspectorfactory
import org apache hadoop hive serde2 objectinspector primitive primitiveobjectinspectorutils
import org apache hadoop hive serde2 typeinfo primitivetypeinfo
import org apache hadoop hive serde2 typeinfo typeinfo
import org apache hadoop io longwritable
import org apache hadoop util stringutils
/**
* compute the variance. this class is extended by: genericudafvariancesample
* genericudafstd genericudafstdsample
*
*/
@description name
value
public class genericudafvariance extends abstractgenericudafresolver
static final log log   logfactory getlog genericudafvariance class getname
@override
public genericudafevaluator getevaluator typeinfo parameters  throws semanticexception
if  parameters length    1
throw new udfargumenttypeexception parameters length   1
if  parameters getcategory      objectinspector category primitive
throw new udfargumenttypeexception 0
parameters gettypename
switch    primitivetypeinfo  parameters  getprimitivecategory
case byte
case short
case int
case long
case float
case double
case string
case timestamp
return new genericudafvarianceevaluator
case boolean
default
throw new udfargumenttypeexception 0
parameters gettypename
/**
* evaluate the variance using the algorithm described by chan, golub, and leveque in
* "algorithms for computing the sample variance: analysis and recommendations"
* the american statistician, 37 (1983) pp. 242--247.
*
* variance = variance1 + variance2 + n/(m*(m+n)) * pow(((m/n)*t1 - t2),2)
*
* where: - variance is sum[x-avg^2] (this is actually n times the variance)
* and is updated at every step. - n is the count of elements in chunk1 - m is
* the count of elements in chunk2 - t1 = sum of elements in chunk1, t2 =
* sum of elements in chunk2.
*
* this algorithm was proven to be numerically stable by j.l. barlow in
* "error analysis of a pairwise summation algorithm to compute sample variance"
* numer. math, 58 (1991) pp. 583--590
*
*/
public static class genericudafvarianceevaluator extends genericudafevaluator
// for partial1 and complete
private primitiveobjectinspector inputoi
// for partial2 and final
private structobjectinspector soi
private structfield countfield
private structfield sumfield
private structfield variancefield
private longobjectinspector countfieldoi
private doubleobjectinspector sumfieldoi
private doubleobjectinspector variancefieldoi
// for partial1 and partial2
private object partialresult
// for final and complete
private doublewritable result
@override
public objectinspector init mode m  objectinspector parameters  throws hiveexception
assert  parameters length    1
super init m  parameters
// init input
if  mode    mode partial1    mode    mode complete
inputoi    primitiveobjectinspector  parameters
else
soi    structobjectinspector  parameters
countfield   soi getstructfieldref
sumfield   soi getstructfieldref
variancefield   soi getstructfieldref
countfieldoi    longobjectinspector  countfield
getfieldobjectinspector
sumfieldoi    doubleobjectinspector  sumfield getfieldobjectinspector
variancefieldoi    doubleobjectinspector  variancefield
getfieldobjectinspector
// init output
if  mode    mode partial1    mode    mode partial2
// the output of a partial aggregation is a struct containing
// a long count and doubles sum and variance.
arraylist<objectinspector> foi   new arraylist<objectinspector>
foi add primitiveobjectinspectorfactory writablelongobjectinspector
foi add primitiveobjectinspectorfactory writabledoubleobjectinspector
foi add primitiveobjectinspectorfactory writabledoubleobjectinspector
arraylist<string> fname   new arraylist<string>
fname add
fname add
fname add
partialresult   new object
partialresult   new longwritable 0
partialresult   new doublewritable 0
partialresult   new doublewritable 0
return objectinspectorfactory getstandardstructobjectinspector fname
foi
else
setresult new doublewritable 0
return primitiveobjectinspectorfactory writabledoubleobjectinspector
static class stdagg implements aggregationbuffer
long count     number of elements
double sum     sum of elements
double variance     sum  this is actually n times the variance
@override
public aggregationbuffer getnewaggregationbuffer   throws hiveexception
stdagg result   new stdagg
reset result
return result
@override
public void reset aggregationbuffer agg  throws hiveexception
stdagg myagg    stdagg  agg
myagg count   0
myagg sum   0
myagg variance   0
private boolean warned   false
@override
public void iterate aggregationbuffer agg  object parameters
throws hiveexception
assert  parameters length    1
object p   parameters
if  p    null
stdagg myagg    stdagg  agg
try
double v   primitiveobjectinspectorutils getdouble p  inputoi
myagg count
myagg sum    v
if myagg count > 1
double t   myagg count v   myagg sum
myagg variance     t t      double myagg count  myagg count 1
catch  numberformatexception e
if   warned
warned   true
log warn getclass   getsimplename
stringutils stringifyexception e
log warn getclass   getsimplename
@override
public object terminatepartial aggregationbuffer agg  throws hiveexception
stdagg myagg    stdagg  agg
longwritable  partialresult  set myagg count
doublewritable  partialresult  set myagg sum
doublewritable  partialresult  set myagg variance
return partialresult
@override
public void merge aggregationbuffer agg  object partial  throws hiveexception
if  partial    null
stdagg myagg    stdagg  agg
object partialcount   soi getstructfielddata partial  countfield
object partialsum   soi getstructfielddata partial  sumfield
object partialvariance   soi getstructfielddata partial  variancefield
long n   myagg count
long m   countfieldoi get partialcount
if  n    0
// just copy the information since there is nothing so far
myagg variance   sumfieldoi get partialvariance
myagg count   countfieldoi get partialcount
myagg sum   sumfieldoi get partialsum
if  m    0    n    0
// merge the two partials
double a   myagg sum
double b   sumfieldoi get partialsum
myagg count    m
myagg sum    b
double t    m  double n  a   b
myagg variance    sumfieldoi get partialvariance      n  double m    double n m     t   t
@override
public object terminate aggregationbuffer agg  throws hiveexception
stdagg myagg    stdagg  agg
if  myagg count    0       sql standard   return null for zero elements
return null
else
if  myagg count > 1
getresult   set myagg variance    myagg count
else      for one element the variance is always 0
getresult   set 0
return getresult
public void setresult doublewritable result
this result   result
public doublewritable getresult
return result