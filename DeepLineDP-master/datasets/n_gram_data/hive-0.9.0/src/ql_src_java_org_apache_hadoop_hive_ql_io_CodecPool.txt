/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql io
import java util arraylist
import java util hashmap
import java util list
import java util map
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop io compress compressioncodec
import org apache hadoop io compress compressor
import org apache hadoop io compress decompressor
/**
* a global compressor/decompressor pool used to save and reuse (possibly
* native) compression/decompression codecs.
*/
public final class codecpool
private static final log log   logfactory getlog codecpool class
/**
* a global compressor pool used to save the expensive
* construction/destruction of (possibly native) decompression codecs.
*/
private static final map<class<compressor>  list<compressor>> compressor_pool
new hashmap<class<compressor>  list<compressor>>
/**
* a global decompressor pool used to save the expensive
* construction/destruction of (possibly native) decompression codecs.
*/
private static final map<class<decompressor>  list<decompressor>> decompressor_pool
new hashmap<class<decompressor>  list<decompressor>>
private static <t> t borrow map<class<t>  list<t>> pool
class<? extends t> codecclass
t codec   null
// check if an appropriate codec is available
synchronized  pool
if  pool containskey codecclass
list<t> codeclist   pool get codecclass
if  codeclist    null
synchronized  codeclist
if   codeclist isempty
codec   codeclist remove codeclist size     1
return codec
private static <t> void payback map<class<t>  list<t>> pool  t codec
if  codec    null
class<t> codecclass    class<t>  codec getclass
synchronized  pool
if   pool containskey codecclass
pool put codecclass  new arraylist<t>
list<t> codeclist   pool get codecclass
synchronized  codeclist
codeclist add codec
/**
* get a {@link compressor} for the given {@link compressioncodec} from the
* pool or a new one.
*
* @param codec
*          the <code>compressioncodec</code> for which to get the
*          <code>compressor</code>
* @return <code>compressor</code> for the given <code>compressioncodec</code>
*         from the pool or a new one
*/
public static compressor getcompressor compressioncodec codec
compressor compressor   borrow compressor_pool  codec getcompressortype
if  compressor    null
compressor   codec createcompressor
log info
else
log debug
return compressor
/**
* get a {@link decompressor} for the given {@link compressioncodec} from the
* pool or a new one.
*
* @param codec
*          the <code>compressioncodec</code> for which to get the
*          <code>decompressor</code>
* @return <code>decompressor</code> for the given
*         <code>compressioncodec</code> the pool or a new one
*/
public static decompressor getdecompressor compressioncodec codec
decompressor decompressor   borrow decompressor_pool  codec
getdecompressortype
if  decompressor    null
decompressor   codec createdecompressor
log info
else
log debug
return decompressor
/**
* return the {@link compressor} to the pool.
*
* @param compressor
*          the <code>compressor</code> to be returned to the pool
*/
public static void returncompressor compressor compressor
if  compressor    null
return
compressor reset
payback compressor_pool  compressor
/**
* return the {@link decompressor} to the pool.
*
* @param decompressor
*          the <code>decompressor</code> to be returned to the pool
*/
public static void returndecompressor decompressor decompressor
if  decompressor    null
return
decompressor reset
payback decompressor_pool  decompressor
private codecpool
// prevent instantiation