/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive contrib mr
import java io bufferedreader
import java io inputstream
import java io inputstreamreader
import java io outputstream
import java io outputstreamwriter
import java io printwriter
import java io reader
import java io writer
import java util iterator
import java util nosuchelementexception
/**
* this class attempts to provide a simple framework for writing hive map/reduce
* tasks in java.
*
* the main benefit is that it deals with grouping the keys together for reduce
* tasks.
*
* additionally, it deals with all system io... and provides something closer to
* the hadoop m/r.
*
* as an example, here's the wordcount reduce:
*
* new genericmr().reduce(system.in, system.out, new reducer() { public void
* reduce(string key, iterator<string[]> records, output output) throws
* exception { int count = 0;
*
* while (records.hasnext()) { count += integer.parseint(records.next()[1]); }
*
* output.collect(new string[] { key, string.valueof(count) }); }});
*/
public final class genericmr
public void map final inputstream in  final outputstream out
final mapper mapper  throws exception
map new inputstreamreader in   new outputstreamwriter out   mapper
public void map final reader in  final writer out  final mapper mapper  throws exception
handle in  out  new recordprocessor
@override
public void processnext recordreader reader  output output  throws exception
mapper map reader next    output
public void reduce final inputstream in  final outputstream out
final reducer reducer  throws exception
reduce new inputstreamreader in   new outputstreamwriter out   reducer
public void reduce final reader in  final writer out  final reducer reducer  throws exception
handle in  out  new recordprocessor
@override
public void processnext recordreader reader  output output  throws exception
reducer reduce reader peek    new keyrecorditerator
reader peek    reader   output
private void handle final reader in  final writer out
final recordprocessor processor  throws exception
final recordreader reader   new recordreader in
final outputstreamoutput output   new outputstreamoutput out
try
while  reader hasnext
processor processnext reader  output
finally
try
output close
finally
reader close
private static interface recordprocessor
void processnext final recordreader reader  final output output  throws exception
private static final class keyrecorditerator implements iterator<string>
private final string key
private final recordreader reader
private keyrecorditerator final string key  final recordreader reader
this key   key
this reader   reader
@override
public boolean hasnext
return  reader hasnext      key equals reader peek
@override
public string next
if   hasnext
throw new nosuchelementexception
return reader next
@override
public void remove
throw new unsupportedoperationexception
private static final class recordreader
private final bufferedreader reader
private string next
private recordreader final inputstream in
this new inputstreamreader in
private recordreader final reader in
reader   new bufferedreader in
next   readnext
private string next
final string ret   next
next   readnext
return ret
private string readnext
try
final string line   reader readline
return  line    null ? null   line split
catch  final exception e
throw new runtimeexception e
private boolean hasnext
return next    null
private string peek
return next
private void close   throws exception
reader close
private static final class outputstreamoutput implements output
private final printwriter out
private outputstreamoutput final outputstream out
this new outputstreamwriter out
private outputstreamoutput final writer out
this out   new printwriter out
public void close   throws exception
out close
@override
public void collect string record  throws exception
out println _join record
private static string _join final string record  final string separator
if  record    null    record length    0
return
final stringbuilder sb   new stringbuilder
for  int i   0  i < record length  i
if  i > 0
sb append separator
sb append record
return sb tostring