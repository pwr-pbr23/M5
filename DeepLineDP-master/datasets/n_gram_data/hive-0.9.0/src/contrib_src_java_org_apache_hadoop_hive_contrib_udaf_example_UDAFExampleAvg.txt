/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive contrib udaf example
import org apache hadoop hive ql exec udaf
import org apache hadoop hive ql exec udafevaluator
/**
* this is a simple udaf that calculates average.
*
* it should be very easy to follow and can be used as an example for writing
* new udafs.
*
* note that hive internally uses a different mechanism (called genericudaf) to
* implement built-in aggregation functions, which are harder to program but
* more efficient.
*
*/
public final class udafexampleavg extends udaf
/**
* the internal state of an aggregation for average.
*
* note that this is only needed if the internal state cannot be represented
* by a primitive.
*
* the internal state can also contains fields with types like
* arraylist<string> and hashmap<string,double> if needed.
*/
public static class udafavgstate
private long mcount
private double msum
/**
* the actual class for doing the aggregation. hive will automatically look
* for all internal classes of the udaf that implements udafevaluator.
*/
public static class udafexampleavgevaluator implements udafevaluator
udafavgstate state
public udafexampleavgevaluator
super
state   new udafavgstate
init
/**
* reset the state of the aggregation.
*/
public void init
state msum   0
state mcount   0
/**
* iterate through one row of original data.
*
* the number and type of arguments need to the same as we call this udaf
* from hive command line.
*
* this function should always return true.
*/
public boolean iterate double o
if  o    null
state msum    o
state mcount
return true
/**
* terminate a partial aggregation and return the state. if the state is a
* primitive, just return primitive java classes like integer or string.
*/
public udafavgstate terminatepartial
// this is sql standard - average of zero items should be null.
return state mcount    0 ? null   state
/**
* merge with a partial aggregation.
*
* this function should always have a single argument which has the same
* type as the return value of terminatepartial().
*/
public boolean merge udafavgstate o
if  o    null
state msum    o msum
state mcount    o mcount
return true
/**
* terminates the aggregation and return the final result.
*/
public double terminate
// this is sql standard - average of zero items should be null.
return state mcount    0 ? null   double valueof state msum
state mcount
private udafexampleavg
// prevent instantiation