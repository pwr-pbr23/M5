/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive serde2 lazy
import org apache hadoop hive serde2 io shortwritable
import org apache hadoop hive serde2 lazy objectinspector primitive lazyshortobjectinspector
/**
* lazyobject for storing a value of short.
*
* <p>
* part of the code is adapted from apache harmony project.
*
* as with the specification, this implementation relied on code laid out in <a
* href="http://www.hackersdelight.org/">henry s. warren, jr.'s hacker's
* delight, (addison wesley, 2002)</a> as well as <a
* href="http://aggregate.org/magic/">the aggregate's magic algorithms</a>.
* </p>
*
*/
public class lazyshort extends
lazyprimitive<lazyshortobjectinspector  shortwritable>
public lazyshort lazyshortobjectinspector oi
super oi
data   new shortwritable
public lazyshort lazyshort copy
super copy
data   new shortwritable copy data get
@override
public void init bytearrayref bytes  int start  int length
try
data set parseshort bytes getdata    start  length
isnull   false
catch  numberformatexception e
isnull   true
logexceptionmessage bytes  start  length
/**
* parses the string argument as if it was a short value and returns the
* result. throws numberformatexception if the string does not represent an
* short quantity.
*
* @param bytes
* @param start
* @param length
*          a utf-8 encoded string representation of a short quantity.
* @return short the value represented by the argument
* @exception numberformatexception
*              if the argument could not be parsed as a short quantity.
*/
public static short parseshort byte bytes  int start  int length
return parseshort bytes  start  length  10
/**
* parses the string argument as if it was a short value and returns the
* result. throws numberformatexception if the string does not represent a
* single short quantity. the second argument specifies the radix to use when
* parsing the value.
*
* @param bytes
* @param start
* @param length
*          a utf-8 encoded string representation of a short quantity.
* @param radix
*          the radix to use when parsing.
* @return short the value represented by the argument
* @exception numberformatexception
*              if the argument could not be parsed as a short quantity.
*/
public static short parseshort byte bytes  int start  int length  int radix
int intvalue   lazyinteger parseint bytes  start  length  radix
short result    short  intvalue
if  result    intvalue
return result
throw new numberformatexception