/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql udf generic
import java util arraylist
import org apache hadoop hive ql exec description
import org apache hadoop hive ql exec udfargumentexception
import org apache hadoop hive ql metadata hiveexception
import org apache hadoop hive ql udf generic genericudfutils returnobjectinspectorresolver
import org apache hadoop hive serde2 objectinspector constantobjectinspector
import org apache hadoop hive serde2 objectinspector objectinspector
import org apache hadoop hive serde2 objectinspector objectinspectorfactory
import org apache hadoop hive serde2 objectinspector objectinspectorutils
import org apache hadoop hive serde2 objectinspector structobjectinspector
import org apache hadoop hive serde2 objectinspector primitive writableconstantintobjectinspector
import org apache hadoop io intwritable
/**
* takes a row of size k of data and splits it into n rows of data.  for
* example, if n is 3 then the rest of the arguments are split in order into 3
* rows, each of which has k/3 columns in it (the first emitted row has the
* first k/3, the second has the second, etc).  if n does not divide k then the
* remaining columns are padded with nulls.
*/
@description
name
value
public class genericudtfstack extends genericudtf
@override
public void close   throws hiveexception
arraylist<objectinspector> argois   new arraylist<objectinspector>
object forwardobj   null
arraylist<returnobjectinspectorresolver> returnoiresolvers
new arraylist<returnobjectinspectorresolver>
intwritable numrows   null
integer numcols   null
@override
public structobjectinspector initialize objectinspector args
throws udfargumentexception
if  args length < 2
throw new udfargumentexception
if    args instanceof writableconstantintobjectinspector
throw new udfargumentexception
args gettypename
numrows
writableconstantintobjectinspector args  getwritableconstantvalue
if  numrows    null    numrows get   < 1
throw new udfargumentexception
// divide and round up.
numcols    args length   1   numrows get     1    numrows get
for  int jj   0  jj < numcols    jj
returnoiresolvers add new returnobjectinspectorresolver
for  int ii   0  ii < numrows get      ii
int index   ii   numcols   jj   1
if  index < args length
returnoiresolvers get jj  update args
throw new udfargumentexception
jj   1
args gettypename
index       args gettypename
forwardobj   new object
for  int ii   0  ii < args length    ii
argois add args
arraylist<string> fieldnames   new arraylist<string>
arraylist<objectinspector> fieldois   new arraylist<objectinspector>
for  int ii   0  ii < numcols    ii
fieldnames add     ii
fieldois add returnoiresolvers get ii  get
return objectinspectorfactory getstandardstructobjectinspector
fieldnames  fieldois
@override
public void process object args
throws hiveexception  udfargumentexception
for  int ii   0  ii < numrows get      ii
for  int jj   0  jj < numcols    jj
int index   ii   numcols   jj   1
if  index < args length
forwardobj
returnoiresolvers get jj  convertifnecessary args  argois get index
else
forwardobj   null
forward forwardobj
@override
public string tostring
return