/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql security authorization
import java util arraylist
import java util collection
import java util hashset
import java util list
import java util set
import org apache hadoop hive metastore api database
import org apache hadoop hive metastore api hiveobjecttype
import org apache hadoop hive metastore api principalprivilegeset
import org apache hadoop hive metastore api privilegegrantinfo
import org apache hadoop hive ql metadata authorizationexception
import org apache hadoop hive ql metadata hiveexception
import org apache hadoop hive ql metadata partition
import org apache hadoop hive ql metadata table
public class defaulthiveauthorizationprovider extends
hiveauthorizationproviderbase
static class bitsetchecker
boolean inputcheck   null
boolean outputcheck   null
public static bitsetchecker getbitsetchecker privilege inputrequiredpriv
privilege outputrequiredpriv
bitsetchecker checker   new bitsetchecker
if  inputrequiredpriv    null
checker inputcheck   new boolean
for  int i   0  i < checker inputcheck length  i
checker inputcheck   false
if  outputrequiredpriv    null
checker outputcheck   new boolean
for  int i   0  i < checker outputcheck length  i
checker outputcheck   false
return checker
@override
public void authorize privilege inputrequiredpriv
privilege outputrequiredpriv  throws hiveexception  authorizationexception
bitsetchecker checker   bitsetchecker getbitsetchecker inputrequiredpriv
outputrequiredpriv
boolean inputcheck   checker inputcheck
boolean outputcheck   checker outputcheck
authorizeuserpriv inputrequiredpriv  inputcheck  outputrequiredpriv
outputcheck
checkandthrowauthorizationexception inputrequiredpriv  outputrequiredpriv
inputcheck  outputcheck  null  null  null  null
@override
public void authorize database db  privilege inputrequiredpriv
privilege outputrequiredpriv  throws hiveexception  authorizationexception
bitsetchecker checker   bitsetchecker getbitsetchecker inputrequiredpriv
outputrequiredpriv
boolean inputcheck   checker inputcheck
boolean outputcheck   checker outputcheck
authorizeuseranddbpriv db  inputrequiredpriv  outputrequiredpriv
inputcheck  outputcheck
checkandthrowauthorizationexception inputrequiredpriv  outputrequiredpriv
inputcheck  outputcheck  db getname    null  null  null
@override
public void authorize table table  privilege inputrequiredpriv
privilege outputrequiredpriv  throws hiveexception
bitsetchecker checker   bitsetchecker getbitsetchecker inputrequiredpriv
outputrequiredpriv
boolean inputcheck   checker inputcheck
boolean outputcheck   checker outputcheck
authorizeuserdbandtable table  inputrequiredpriv
outputrequiredpriv  inputcheck  outputcheck
checkandthrowauthorizationexception inputrequiredpriv  outputrequiredpriv
inputcheck  outputcheck  table getdbname    table gettablename
null  null
@override
public void authorize partition part  privilege inputrequiredpriv
privilege outputrequiredpriv  throws hiveexception
//if the partition does not have partition level privilege, go to table level.
table table   part gettable
if  table getparameters   get       null
equalsignorecase table getparameters   get
this authorize part gettable    inputrequiredpriv  outputrequiredpriv
return
bitsetchecker checker   bitsetchecker getbitsetchecker inputrequiredpriv
outputrequiredpriv
boolean inputcheck   checker inputcheck
boolean outputcheck   checker outputcheck
if  authorizeuserdbandpartition part  inputrequiredpriv  outputrequiredpriv
inputcheck  outputcheck
return
checkandthrowauthorizationexception inputrequiredpriv  outputrequiredpriv
inputcheck  outputcheck  part gettable   getdbname    part
gettable   gettablename    part getname    null
@override
public void authorize table table  partition part  list<string> columns
privilege inputrequiredpriv  privilege outputrequiredpriv
throws hiveexception
bitsetchecker checker   bitsetchecker getbitsetchecker inputrequiredpriv
outputrequiredpriv
boolean inputcheck   checker inputcheck
boolean outputcheck   checker outputcheck
string partname   null
list<string> partvalues   null
if  part    null
table getparameters   get       null
equalsignorecase table getparameters   get
partname   part getname
partvalues   part getvalues
if  partvalues    null
if  authorizeuserdbandtable table  inputrequiredpriv  outputrequiredpriv
inputcheck  outputcheck
return
else
if  authorizeuserdbandpartition part  inputrequiredpriv
outputrequiredpriv  inputcheck  outputcheck
return
for  string col   columns
bitsetchecker checker2   bitsetchecker getbitsetchecker
inputrequiredpriv  outputrequiredpriv
boolean inputcheck2   checker2 inputcheck
boolean outputcheck2   checker2 outputcheck
principalprivilegeset partcolumnprivileges   hive_db
get_privilege_set hiveobjecttype column  table getdbname    table gettablename
partvalues  col  this getauthenticator   getusername    this
getauthenticator   getgroupnames
authorizeprivileges partcolumnprivileges  inputrequiredpriv  inputcheck2
outputrequiredpriv  outputcheck2
if  inputcheck2    null
booleanarrayor inputcheck2  inputcheck
if  outputcheck2    null
booleanarrayor inputcheck2  inputcheck
checkandthrowauthorizationexception inputrequiredpriv
outputrequiredpriv  inputcheck2  outputcheck2  table getdbname
table gettablename    partname  col
protected boolean authorizeuserpriv privilege inputrequiredpriv
boolean inputcheck  privilege outputrequiredpriv
boolean outputcheck  throws hiveexception
principalprivilegeset privileges   hive_db get_privilege_set
hiveobjecttype global  null  null  null  null  this getauthenticator
getusername    this getauthenticator   getgroupnames
return authorizeprivileges privileges  inputrequiredpriv  inputcheck
outputrequiredpriv  outputcheck
/**
* check privileges on user and db. this is used before doing a check on
* table/partition objects, first check the user and db privileges. if it
* passed on this check, no need to check against the table/partition hive
* object.
*
* @param db
* @param inputrequiredpriv
* @param outputrequiredpriv
* @param inputcheck
* @param outputcheck
* @return true if the check on user and db privilege passed, which means no
*         need for privilege check on concrete hive objects.
* @throws hiveexception
*/
private boolean authorizeuseranddbpriv database db
privilege inputrequiredpriv  privilege outputrequiredpriv
boolean inputcheck  boolean outputcheck  throws hiveexception
if  authorizeuserpriv inputrequiredpriv  inputcheck  outputrequiredpriv
outputcheck
return true
principalprivilegeset dbprivileges   hive_db get_privilege_set
hiveobjecttype database  db getname    null  null  null  this
getauthenticator   getusername    this getauthenticator
getgroupnames
if  authorizeprivileges dbprivileges  inputrequiredpriv  inputcheck
outputrequiredpriv  outputcheck
return true
return false
/**
* check privileges on user, db and table objects.
*
* @param table
* @param inputrequiredpriv
* @param outputrequiredpriv
* @param inputcheck
* @param outputcheck
* @return true if the check passed
* @throws hiveexception
*/
private boolean authorizeuserdbandtable table table
privilege inputrequiredpriv  privilege outputrequiredpriv
boolean inputcheck  boolean outputcheck  throws hiveexception
if  authorizeuseranddbpriv hive_db getdatabase table getdbname
inputrequiredpriv  outputrequiredpriv  inputcheck  outputcheck
return true
principalprivilegeset tableprivileges   hive_db get_privilege_set
hiveobjecttype table  table getdbname    table gettablename    null
null  this getauthenticator   getusername    this getauthenticator
getgroupnames
if  authorizeprivileges tableprivileges  inputrequiredpriv  inputcheck
outputrequiredpriv  outputcheck
return true
return false
/**
* check privileges on user, db and table/partition objects.
*
* @param part
* @param inputrequiredpriv
* @param outputrequiredpriv
* @param inputcheck
* @param outputcheck
* @return true if the check passed
* @throws hiveexception
*/
private boolean authorizeuserdbandpartition partition part
privilege inputrequiredpriv  privilege outputrequiredpriv
boolean inputcheck  boolean outputcheck  throws hiveexception
if  authorizeuseranddbpriv
hive_db getdatabase part gettable   getdbname     inputrequiredpriv
outputrequiredpriv  inputcheck  outputcheck
return true
principalprivilegeset partprivileges   part gettpartition   getprivileges
if  partprivileges    null
partprivileges   hive_db get_privilege_set hiveobjecttype partition  part
gettable   getdbname    part gettable   gettablename    part
getvalues    null  this getauthenticator   getusername    this
getauthenticator   getgroupnames
if  authorizeprivileges partprivileges  inputrequiredpriv  inputcheck
outputrequiredpriv  outputcheck
return true
return false
protected boolean authorizeprivileges principalprivilegeset privileges
privilege inputpriv  boolean inputcheck  privilege outputpriv
boolean outputcheck  throws hiveexception
boolean pass   true
if  inputpriv    null
pass   pass    matchprivs inputpriv  privileges  inputcheck
if  outputpriv    null
pass   pass    matchprivs outputpriv  privileges  outputcheck
return pass
/**
* try to match an array of privileges from user/groups/roles grants.
*
* @param container
*/
private boolean matchprivs privilege inputpriv
principalprivilegeset privileges  boolean check
if  inputpriv    null
return true
if  privileges    null
return false
/*
* user grants
*/
set<string> privset   new hashset<string>
if  privileges getuserprivileges      null
privileges getuserprivileges   size   > 0
collection<list<privilegegrantinfo>> privcollection   privileges getuserprivileges   values
list<string> userprivs   getprivilegestringlist privcollection
if  userprivs    null    userprivs size   > 0
for  string priv   userprivs
if  priv    null    priv trim   equals
continue
if  priv equalsignorecase privilege all tostring
setbooleanarray check  true
return true
privset add priv tolowercase
/*
* group grants
*/
if  privileges getgroupprivileges      null
privileges getgroupprivileges   size   > 0
collection<list<privilegegrantinfo>> groupprivcollection   privileges
getgroupprivileges   values
list<string> groupprivs   getprivilegestringlist groupprivcollection
if  groupprivs    null    groupprivs size   > 0
for  string priv   groupprivs
if  priv    null    priv trim   equals
continue
if  priv equalsignorecase privilege all tostring
setbooleanarray check  true
return true
privset add priv tolowercase
/*
* roles grants
*/
if  privileges getroleprivileges      null
privileges getroleprivileges   size   > 0
collection<list<privilegegrantinfo>> roleprivscollection   privileges
getroleprivileges   values
list<string> roleprivs   getprivilegestringlist roleprivscollection
if  roleprivs    null    roleprivs size   > 0
for  string priv   roleprivs
if  priv    null    priv trim   equals
continue
if  priv equalsignorecase privilege all tostring
setbooleanarray check  true
return true
privset add priv tolowercase
for  int i   0  i < inputpriv length  i
string tomatch   inputpriv tostring
if   check
check   privset contains tomatch tolowercase
return firstfalseindex check  <0
private list<string> getprivilegestringlist
collection<list<privilegegrantinfo>> privcollection
list<string> userprivs   new arraylist<string>
if  privcollection   null    privcollection size  >0
for  list<privilegegrantinfo> grantlist   privcollection
if  grantlist    null
continue
for  int i   0  i < grantlist size    i
privilegegrantinfo grant   grantlist get i
userprivs add grant getprivilege
return userprivs
private static void setbooleanarray boolean check  boolean b
for  int i   0  i < check length  i
check   b
private static void booleanarrayor boolean output  boolean input
for  int i   0  i < output length    i < input length  i
output   output    input
private void checkandthrowauthorizationexception
privilege inputrequiredpriv  privilege outputrequiredpriv
boolean inputcheck  boolean outputcheck string dbname
string tablename  string partitionname  string columnname
string hiveobject
if  dbname    null
hiveobject   hiveobject       dbname
if  tablename    null
hiveobject   hiveobject       tablename
if  partitionname    null
hiveobject   hiveobject       partitionname
if  columnname    null
hiveobject   hiveobject       columnname
hiveobject   hiveobject
if  inputcheck    null
int input   this firstfalseindex inputcheck
if  input >  0
throw new authorizationexception
inputrequiredpriv tostring
hiveobject
if  outputcheck    null
int output   this firstfalseindex outputcheck
if  output >  0
throw new authorizationexception
outputrequiredpriv tostring
hiveobject
private int firstfalseindex boolean inputcheck
if  inputcheck    null
for  int i   0  i < inputcheck length  i
if   inputcheck
return i
return  1