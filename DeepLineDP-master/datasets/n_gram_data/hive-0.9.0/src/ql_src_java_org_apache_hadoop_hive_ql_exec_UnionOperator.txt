/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql exec
import java io serializable
import java util arraylist
import java util list
import org apache hadoop conf configuration
import org apache hadoop hive ql metadata hiveexception
import org apache hadoop hive ql plan uniondesc
import org apache hadoop hive ql plan api operatortype
import org apache hadoop hive ql udf generic genericudfutils returnobjectinspectorresolver
import org apache hadoop hive serde2 objectinspector objectinspector
import org apache hadoop hive serde2 objectinspector objectinspectorfactory
import org apache hadoop hive serde2 objectinspector structfield
import org apache hadoop hive serde2 objectinspector structobjectinspector
/**
* union operator just forwards. doesn't do anything itself.
**/
public class unionoperator extends operator<uniondesc> implements serializable
private static final long serialversionuid   1l
structobjectinspector parentobjinspectors
list<? extends structfield> parentfields
returnobjectinspectorresolver columntyperesolvers
boolean needstransform
arraylist<object> outputrow
/**
* unionoperator will transform the input rows if the inputobjinspectors from
* different parents are different. if one parent has exactly the same
* objectinspector as the output objectinspector, then we don't need to do
* transformation for that parent. this information is recorded in
* needstransform[].
*/
@override
protected void initializeop configuration hconf  throws hiveexception
int parents   parentoperators size
parentobjinspectors   new structobjectinspector
parentfields   new list
for  int p   0  p < parents  p
parentobjinspectors    structobjectinspector  inputobjinspectors
parentfields   parentobjinspectors getallstructfieldrefs
// get columnnames from the first parent
int columns   parentfields size
arraylist<string> columnnames   new arraylist<string> columns
for  int c   0  c < columns  c
columnnames add parentfields get c  getfieldname
// get outputfieldois
columntyperesolvers   new returnobjectinspectorresolver
for  int c   0  c < columns  c
columntyperesolvers   new returnobjectinspectorresolver true
for  int p   0  p < parents  p
assert  parentfields size      columns
for  int c   0  c < columns  c
columntyperesolvers update parentfields get c
getfieldobjectinspector
arraylist<objectinspector> outputfieldois   new arraylist<objectinspector>
columns
for  int c   0  c < columns  c
outputfieldois add columntyperesolvers get
// create output row objectinspector
outputobjinspector   objectinspectorfactory
getstandardstructobjectinspector columnnames  outputfieldois
outputrow   new arraylist<object> columns
for  int c   0  c < columns  c
outputrow add null
// whether we need to do transformation for each parent
needstransform   new boolean
for  int p   0  p < parents  p
// testing using != is good enough, because we use objectinspectorfactory
// to
// create objectinspectors.
needstransform    inputobjinspectors    outputobjinspector
if  needstransform
log info     p
inputobjinspectors       outputobjinspector
initializechildren hconf
@override
public synchronized void processop object row  int tag  throws hiveexception
structobjectinspector soi   parentobjinspectors
list<? extends structfield> fields   parentfields
if  needstransform
for  int c   0  c < fields size    c
outputrow set c  columntyperesolvers convertifnecessary soi
getstructfielddata row  fields get c    fields get c
getfieldobjectinspector
forward outputrow  outputobjinspector
else
forward row  inputobjinspectors
/**
* @return the name of the operator
*/
@override
public string getname
return
@override
public operatortype gettype
return operatortype union