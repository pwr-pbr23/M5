/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql udf generic
import org apache hadoop hive serde2 objectinspector objectinspector
import org apache hadoop hive serde2 typeinfo typeinfo
/**
* a callback interface used in conjunction with <tt>genericudafresolver2</tt>
* interface that allows for a more extensible and flexible means of
* discovering the parameter types provided for udaf invocation. apart from
* allowing the function implementation to discover the <tt>typeinfo</tt> of
* any types provided in the invocation, this also allows the implementation
* to determine if the parameters were qualified using <tt>distinct</tt>. if
* no parameters were specified explicitly, it allows the function
* implementation to test if the invocation used the wildcard syntax
* such as <tt>function(*)</tt>.
* <p>
* <b>note:</b> the implementation of function does not have to handle the
* actual <tt>distinct</tt> or wildcard implementation. this information is
* provided only to allow the function implementation to accept or reject
* such invocations. for example - the implementation of <tt>count</tt> udaf
* requires that the <tt>distinct</tt> qualifier be supplied when more than
* one parameters are specified in the invocation. the actual filtering of
* data bound to parameter types for <tt>distinct</tt> implementation is
* handled by the framework and not the <tt>count</tt> udaf implementation.
*/
public interface genericudafparameterinfo
/**
*
* @return the parameter type list passed into the udaf.
*/
@deprecated
typeinfo getparameters
/**
*
* @return getparameters() with types returned as objectinspectors.
*/
objectinspector getparameterobjectinspectors
/**
* returns <tt>true</tt> if the udaf invocation was qualified with
* <tt>distinct</tt> keyword. note that this is provided for informational
* purposes only and the function implementation is not expected to ensure
* the distinct property for the parameter values. that is handled by the
* framework.
* @return <tt>true</tt> if the udaf invocation was qualified with
* <tt>distinct</tt> keyword, <tt>false</tt> otherwise.
*/
boolean isdistinct
/**
* returns <tt>true</tt> if the udaf invocation was done via the wildcard
* syntax <tt>function(*)</tt>. note that this is provided for informational
* purposes only and the function implementation is not expected to ensure
* the wildcard handling of the target relation. that is handled by the
* framework.
* @return <tt>true</tt> if the udaf invocation was done with a wildcard
* instead of explicit parameter list.
*/
boolean isallcolumns