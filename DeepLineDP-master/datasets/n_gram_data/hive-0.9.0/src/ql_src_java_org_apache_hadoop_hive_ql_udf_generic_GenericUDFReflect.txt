/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql udf generic
import java lang reflect invocationtargetexception
import java lang reflect method
import java util arrays
import org apache hadoop hive ql exec description
import org apache hadoop hive ql exec udfargumentexception
import org apache hadoop hive ql exec udfargumentlengthexception
import org apache hadoop hive ql exec udfargumenttypeexception
import org apache hadoop hive ql udf udftype
import org apache hadoop hive ql metadata hiveexception
import org apache hadoop hive serde2 objectinspector objectinspector
import org apache hadoop hive serde2 objectinspector objectinspectorutils
import org apache hadoop hive serde2 objectinspector primitiveobjectinspector
import org apache hadoop hive serde2 objectinspector primitiveobjectinspector primitivecategory
import org apache hadoop hive serde2 objectinspector primitive primitiveobjectinspectorfactory
import org apache hadoop hive serde2 objectinspector primitive primitiveobjectinspectorutils
import org apache hadoop hive serde2 objectinspector primitive stringobjectinspector
import org apache hadoop hive serde2 objectinspector primitive primitiveobjectinspectorutils primitivetypeentry
import org apache hadoop util reflectionutils
/**
* a simple generic udf to call java static functions via reflection.
*/
@description name
value
extended
@udftype deterministic   false
public class genericudfreflect extends genericudf
primitiveobjectinspector argumentois
stringobjectinspector classnameoi
stringobjectinspector methodnameoi
class<?> parameterjavaclasses     classes are integer  double  string
class<?> parameterjavatypes       types are int  double  etc
object parameterjavavalues
@override
public objectinspector initialize objectinspector arguments
throws udfargumentexception
if  arguments length < 2
throw new udfargumentlengthexception
for  int i   0  i < 2  i
if    arguments instanceof stringobjectinspector
throw new udfargumenttypeexception i
classnameoi    stringobjectinspector
objectinspectorutils getstandardobjectinspector arguments
methodnameoi    stringobjectinspector
objectinspectorutils getstandardobjectinspector arguments
parameterjavaclasses   new class
parameterjavatypes   new class
for  int i   2  i < arguments length  i
if  arguments getcategory      objectinspector category primitive
throw new udfargumenttypeexception i
primitivecategory category
primitiveobjectinspector arguments  getprimitivecategory
primitivetypeentry t
primitiveobjectinspectorutils gettypeentryfromprimitivecategory category
parameterjavaclasses   t primitivejavaclass
parameterjavatypes   t primitivejavatype
parameterjavavalues   new object
argumentois   new primitiveobjectinspector
for  int i   0  i < arguments length  i
argumentois    primitiveobjectinspector arguments
return primitiveobjectinspectorfactory getprimitivejavaobjectinspector
primitivecategory string
class<?> c
object o
method m
object classname
object methodname
string result
@override
public object evaluate deferredobject arguments  throws hiveexception
// try to find the class
// skip class loading if the class name didn't change
boolean classnamechanged   false
objectinspector newclassnameoi   argumentois
object newclassname   arguments get
// we compare class name/method name using objectinspectorutils.compare(...), to avoid
// any object conversion (which may cause object creation) in most cases, when the class
// name/method name is constant java string, or constant text (stringwritable).
if  classname    null    objectinspectorutils compare classname  classnameoi  newclassname
newclassnameoi     0
classname   objectinspectorutils copytostandardobject newclassname  newclassnameoi
string classnamestring   classnameoi getprimitivejavaobject classname
try
c   class forname classnamestring
catch  classnotfoundexception ex
throw new hiveexception    ex
try
o   null
o   reflectionutils newinstance c  null
catch  exception e
// ignored
classnamechanged   true
// try to find the method
// skip method finding if the method name didn't change, and class name didn't change.
objectinspector newmethodnameoi   argumentois
object newmethodname   arguments get
if  methodname    null    objectinspectorutils compare methodname  methodnameoi  newmethodname
newmethodnameoi     0    classnamechanged
methodname   objectinspectorutils copytostandardobject newmethodname  newmethodnameoi
string methodnamestring   methodnameoi getprimitivejavaobject methodname
try
m   c getmethod methodnamestring  parameterjavaclasses
catch  securityexception e
throw new hiveexception    e
catch  nosuchmethodexception e
try
m   c getmethod methodnamestring  parameterjavatypes
catch  securityexception ex
throw new hiveexception    ex
catch  nosuchmethodexception ex
throw new hiveexception    ex
// get the parameter values
for  int i   2  i < arguments length  i
parameterjavavalues   argumentois getprimitivejavaobject arguments get
try
result   string valueof m invoke o  parameterjavavalues
return result
catch  illegalargumentexception e1
system err println    e1       m
arrays aslist parameterjavavalues
catch  illegalaccessexception e1
system err println    e1       m
arrays aslist parameterjavavalues
catch  invocationtargetexception e1
system err println    e1       m
arrays aslist parameterjavavalues
return null
@override
public string getdisplaystring string children
stringbuilder sb   new stringbuilder
sb append
for  int i   0  i < children length  i
if  i > 0
sb append
sb append children
sb append
return sb tostring