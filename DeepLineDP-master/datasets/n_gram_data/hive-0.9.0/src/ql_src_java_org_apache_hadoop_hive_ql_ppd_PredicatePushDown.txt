/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql ppd
import java util arraylist
import java util linkedhashmap
import java util map
import org apache hadoop hive ql lib defaultgraphwalker
import org apache hadoop hive ql lib defaultruledispatcher
import org apache hadoop hive ql lib dispatcher
import org apache hadoop hive ql lib graphwalker
import org apache hadoop hive ql lib node
import org apache hadoop hive ql lib nodeprocessor
import org apache hadoop hive ql lib rule
import org apache hadoop hive ql lib ruleregexp
import org apache hadoop hive ql optimizer transform
import org apache hadoop hive ql parse parsecontext
import org apache hadoop hive ql parse semanticexception
/**
* implements predicate pushdown. predicate pushdown is a term borrowed from
* relational databases even though for hive it is predicate pushup. the basic
* idea is to process expressions as early in the plan as possible. the default
* plan generation adds filters where they are seen but in some instances some
* of the filter expressions can be pushed nearer to the operator that sees this
* particular data for the first time. e.g. select a.*, b.* from a join b on
* (a.col1 = b.col1) where a.col1 > 20 and b.col2 > 40
*
* for the above query, the predicates (a.col1 > 20) and (b.col2 > 40), without
* predicate pushdown, would be evaluated after the join processing has been
* done. suppose the two predicates filter out most of the rows from a and b,
* the join is unnecessarily processing these rows. with predicate pushdown,
* these two predicates will be processed before the join.
*
* predicate pushdown is enabled by setting hive.optimize.ppd to true. it is
* disable by default.
*
* the high-level algorithm is describe here - an operator is processed after
* all its children have been processed - an operator processes its own
* predicates and then merges (conjunction) with the processed predicates of its
* children. in case of multiple children, there are combined using disjunction
* (or). - a predicate expression is processed for an operator using the
* following steps - if the expr is a constant then it is a candidate for
* predicate pushdown - if the expr is a col reference then it is a candidate
* and its alias is noted - if the expr is an index and both the array and index
* expr are treated as children - if the all child expr are candidates for
* pushdown and all of the expression reference only one alias from the
* operator's rowresolver then the current expression is also a candidate one
* key thing to note is that some operators (select, reducesink, groupby, join
* etc) change the columns as data flows through them. in such cases the column
* references are replaced by the corresponding expression in the input data.
*/
public class predicatepushdown implements transform
private parsecontext pgraphcontext
@override
public parsecontext transform parsecontext pctx  throws semanticexception
pgraphcontext   pctx
// create a the context for walking operators
opwalkerinfo opwalkerinfo   new opwalkerinfo pgraphcontext
map<rule  nodeprocessor> oprules   new linkedhashmap<rule  nodeprocessor>
oprules put new ruleregexp        opprocfactory getfilterproc
oprules put new ruleregexp        opprocfactory getjoinproc
oprules put new ruleregexp        opprocfactory getrsproc
oprules put new ruleregexp        opprocfactory gettsproc
oprules put new ruleregexp        opprocfactory getscrproc
oprules put new ruleregexp        opprocfactory getlimproc
oprules put new ruleregexp        opprocfactory getudtfproc
oprules put new ruleregexp        opprocfactory getlvfproc
// the dispatcher fires the processor corresponding to the closest matching
// rule and passes the context along
dispatcher disp   new defaultruledispatcher opprocfactory getdefaultproc
oprules  opwalkerinfo
graphwalker ogw   new defaultgraphwalker disp
// create a list of topop nodes
arraylist<node> topnodes   new arraylist<node>
topnodes addall pgraphcontext gettopops   values
ogw startwalking topnodes  null
return pgraphcontext