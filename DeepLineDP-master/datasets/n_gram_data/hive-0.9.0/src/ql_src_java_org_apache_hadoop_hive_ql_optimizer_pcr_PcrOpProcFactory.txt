/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql optimizer pcr
import java io serializable
import java util arraylist
import java util stack
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop hive ql exec filteroperator
import org apache hadoop hive ql exec operator
import org apache hadoop hive ql exec tablescanoperator
import org apache hadoop hive ql lib node
import org apache hadoop hive ql lib nodeprocessor
import org apache hadoop hive ql lib nodeprocessorctx
import org apache hadoop hive ql metadata hiveexception
import org apache hadoop hive ql metadata partition
import org apache hadoop hive ql optimizer ppr partitionpruner
import org apache hadoop hive ql parse prunedpartitionlist
import org apache hadoop hive ql parse semanticexception
import org apache hadoop hive ql plan exprnodedesc
/**
* pcropprocfactory contains processors that process expression tree of filter operators
* following table scan operators. it walks the expression tree of the filter operator
* to remove partition predicates when possible. if the filter operator can be removed,
* the whole operator is marked to be removed later on, otherwise the predicate is changed
*/
public final class pcropprocfactory
// the log
private static final log log   logfactory
getlog
/**
* remove partition condition in a filter operator when possible. this is
* called only when the filter follows a table scan operator.
*/
public static class filterpcr implements nodeprocessor
@override
public object process node nd  stack<node> stack  nodeprocessorctx procctx
object    nodeoutputs  throws semanticexception
pcropwalkerctx owc    pcropwalkerctx  procctx
filteroperator fop    filteroperator  nd
filteroperator fop2   null
// the stack contains either ... ts, filter or
// ... ts, filter, filter with the head of the stack being the rightmost
// symbol. so we just pop out the two elements from the top and if the
// second one of them is not a table scan then the operator on the top of
// the stack is the table scan operator.
node tmp   stack pop
node tmp2   stack pop
tablescanoperator top   null
operator<? extends serializable> pop   null
if  tmp2 instanceof tablescanoperator
top    tablescanoperator  tmp2
pop   top
else
top    tablescanoperator  stack peek
fop2    filteroperator  tmp2
pop   fop2
stack push tmp2
stack push tmp
// if fop2 exists (i.e this is not the top level filter and fop2 is not
// a sampling filter then we ignore the current filter
if  fop2    null     fop2 getconf   getissamplingpred
return null
// ignore the predicate in case it is not a sampling predicate
if  fop getconf   getissamplingpred
return null
if  fop getparentoperators   size   > 1
// it's not likely if there is no bug. but in case it happens, we must
// have found a wrong filter operator. we skip the optimization then.
return null
prunedpartitionlist prunedpartlist   owc getparsecontext   getoptopartlist   get top
if  prunedpartlist    null
// we never pruned the partition. try to prune it.
exprnodedesc ppr_pred   owc getparsecontext   getoptopartpruner   get top
if  ppr_pred    null
// no partition predicate found, skip.
return null
try
prunedpartlist   partitionpruner prune owc getparsecontext   gettoptotable   get top
ppr_pred  owc getparsecontext   getconf
string  owc getparsecontext   gettopops   keyset
toarray    owc getparsecontext   getprunedpartitions
if  prunedpartlist    null
owc getparsecontext   getoptopartlist   put top  prunedpartlist
catch  hiveexception e
// has to use full name to make sure it does not conflict with
// org.apache.commons.lang.stringutils
throw new semanticexception e getmessage    e
// otherwise this is not a sampling predicate. we need to process it.
exprnodedesc predicate   fop getconf   getpredicate
string alias   top getconf   getalias
arraylist<partition> partitions   new arraylist<partition>
if  prunedpartlist    null
return null
for  partition p   prunedpartlist getconfirmedpartns
if   p gettable   ispartitioned
return null
for  partition p   prunedpartlist getunknownpartns
if   p gettable   ispartitioned
return null
partitions addall prunedpartlist getconfirmedpartns
partitions addall prunedpartlist getunknownpartns
pcrexprprocfactory nodeinfowrapper wrapper   pcrexprprocfactory walkexprtree
alias  partitions  predicate
if  wrapper state    pcrexprprocfactory walkstate true
owc getoptoremove   add new pcropwalkerctx optodeleteinfo pop  fop
else if  wrapper state    pcrexprprocfactory walkstate false
fop getconf   setpredicate wrapper outexpr
else
log warn
fop getconf   setpredicate wrapper outexpr
return null
/**
* default processor which does nothing
*/
public static class defaultpcr implements nodeprocessor
@override
public object process node nd  stack<node> stack  nodeprocessorctx procctx
object    nodeoutputs  throws semanticexception
// nothing needs to be done.
return null
public static nodeprocessor getfilterproc
return new filterpcr
public static nodeprocessor getdefaultproc
return new defaultpcr
private pcropprocfactory
// prevent instantiation