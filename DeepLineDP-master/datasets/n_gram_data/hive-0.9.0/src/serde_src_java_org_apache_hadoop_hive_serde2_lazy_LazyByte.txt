/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive serde2 lazy
import org apache hadoop hive serde2 io bytewritable
import org apache hadoop hive serde2 lazy objectinspector primitive lazybyteobjectinspector
/**
* lazyobject for storing a value of byte.
*
* <p>
* part of the code is adapted from apache harmony project.
*
* as with the specification, this implementation relied on code laid out in <a
* href="http://www.hackersdelight.org/">henry s. warren, jr.'s hacker's
* delight, (addison wesley, 2002)</a> as well as <a
* href="http://aggregate.org/magic/">the aggregate's magic algorithms</a>.
* </p>
*
*/
public class lazybyte extends
lazyprimitive<lazybyteobjectinspector  bytewritable>
public lazybyte lazybyteobjectinspector oi
super oi
data   new bytewritable
public lazybyte lazybyte copy
super copy
data   new bytewritable copy data get
@override
public void init bytearrayref bytes  int start  int length
try
data set parsebyte bytes getdata    start  length  10
isnull   false
catch  numberformatexception e
isnull   true
logexceptionmessage bytes  start  length
/**
* parses the string argument as if it was a byte value and returns the
* result. throws numberformatexception if the string does not represent a
* single byte quantity.
*
* @param bytes
* @param start
* @param length
*          a utf-8 encoded string representation of a single byte quantity.
* @return byte the value represented by the argument
* @throws numberformatexception
*           if the argument could not be parsed as a byte quantity.
*/
public static byte parsebyte byte bytes  int start  int length
return parsebyte bytes  start  length  10
/**
* parses the string argument as if it was a byte value and returns the
* result. throws numberformatexception if the string does not represent a
* single byte quantity. the second argument specifies the radix to use when
* parsing the value.
*
* @param bytes
* @param start
* @param length
*          a utf-8 encoded string representation of a single byte quantity.
* @param radix
*          the radix to use when parsing.
* @return byte the value represented by the argument
* @throws numberformatexception
*           if the argument could not be parsed as a byte quantity.
*/
public static byte parsebyte byte bytes  int start  int length  int radix
int intvalue   lazyinteger parseint bytes  start  length  radix
byte result    byte  intvalue
if  result    intvalue
return result
throw new numberformatexception