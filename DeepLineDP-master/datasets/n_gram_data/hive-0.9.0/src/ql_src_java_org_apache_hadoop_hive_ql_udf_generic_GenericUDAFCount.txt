/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql udf generic
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop hive ql exec description
import org apache hadoop hive ql exec udfargumentexception
import org apache hadoop hive ql metadata hiveexception
import org apache hadoop hive ql parse semanticexception
import org apache hadoop hive serde2 objectinspector objectinspector
import org apache hadoop hive serde2 objectinspector primitive longobjectinspector
import org apache hadoop hive serde2 objectinspector primitive primitiveobjectinspectorfactory
import org apache hadoop hive serde2 typeinfo typeinfo
import org apache hadoop io longwritable
/**
* this class implements the count aggregation function as in sql.
*/
@description name
value
public class genericudafcount implements genericudafresolver2
private static final log log   logfactory getlog genericudafcount class getname
@override
public genericudafevaluator getevaluator typeinfo parameters
throws semanticexception
// this method implementation is preserved for backward compatibility.
return new genericudafcountevaluator
@override
public genericudafevaluator getevaluator genericudafparameterinfo paraminfo
throws semanticexception
typeinfo parameters   paraminfo getparameters
if  parameters length    0
if   paraminfo isallcolumns
throw new udfargumentexception
assert  paraminfo isdistinct
else
if  parameters length > 1     paraminfo isdistinct
throw new udfargumentexception
assert  paraminfo isallcolumns
return new genericudafcountevaluator   setcountallcolumns
paraminfo isallcolumns
/**
* genericudafcountevaluator.
*
*/
public static class genericudafcountevaluator extends genericudafevaluator
private boolean countallcolumns   false
private longobjectinspector partialcountaggoi
private longwritable result
@override
public objectinspector init mode m  objectinspector parameters
throws hiveexception
super init m  parameters
partialcountaggoi
primitiveobjectinspectorfactory writablelongobjectinspector
result   new longwritable 0
return primitiveobjectinspectorfactory writablelongobjectinspector
private genericudafcountevaluator setcountallcolumns boolean countallcols
countallcolumns   countallcols
return this
/** class for storing count value. */
static class countagg implements aggregationbuffer
long value
@override
public aggregationbuffer getnewaggregationbuffer   throws hiveexception
countagg buffer   new countagg
reset buffer
return buffer
@override
public void reset aggregationbuffer agg  throws hiveexception
countagg  agg  value   0
@override
public void iterate aggregationbuffer agg  object parameters
throws hiveexception
// parameters == null means the input table/split is empty
if  parameters    null
return
if  countallcolumns
assert parameters length    0
countagg  agg  value
else
assert parameters length > 0
boolean countthisrow   true
for  object nextparam   parameters
if  nextparam    null
countthisrow   false
break
if  countthisrow
countagg  agg  value
@override
public void merge aggregationbuffer agg  object partial
throws hiveexception
if  partial    null
long p   partialcountaggoi get partial
countagg  agg  value    p
@override
public object terminate aggregationbuffer agg  throws hiveexception
result set   countagg  agg  value
return result
@override
public object terminatepartial aggregationbuffer agg  throws hiveexception
return terminate agg