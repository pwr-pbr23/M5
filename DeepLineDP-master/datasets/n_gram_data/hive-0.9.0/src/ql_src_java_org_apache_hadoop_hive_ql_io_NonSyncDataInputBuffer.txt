/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql io
import java io datainput
import java io eofexception
import java io filterinputstream
import java io ioexception
import java io pushbackinputstream
import java io utfdataformatexception
import org apache hadoop hive common io nonsyncbytearrayinputstream
/**
* a thread-not-safe version of hadoop's datainputbuffer, which removes all
* synchronized modifiers.
*/
public class nonsyncdatainputbuffer extends filterinputstream implements
datainput
private final nonsyncbytearrayinputstream buffer
byte buff   new byte
/** constructs a new empty buffer. */
public nonsyncdatainputbuffer
this new nonsyncbytearrayinputstream
private nonsyncdatainputbuffer nonsyncbytearrayinputstream buffer
super buffer
this buffer   buffer
/** resets the data that the buffer reads. */
public void reset byte input  int length
buffer reset input  0  length
/** resets the data that the buffer reads. */
public void reset byte input  int start  int length
buffer reset input  start  length
/** returns the current position in the input. */
public int getposition
return buffer getposition
/** returns the length of the input. */
public int getlength
return buffer getlength
/**
* reads bytes from the source stream into the byte array <code>buffer</code>.
* the number of bytes actually read is returned.
*
* @param buffer
*          the buffer to read bytes into
* @return the number of bytes actually read or -1 if end of stream.
*
* @throws ioexception
*           if a problem occurs reading from this datainputstream.
*
*/
@override
public final int read byte buffer  throws ioexception
return in read buffer  0  buffer length
/**
* read at most <code>length</code> bytes from this datainputstream and stores
* them in byte array <code>buffer</code> starting at <code>offset</code>.
* answer the number of bytes actually read or -1 if no bytes were read and
* end of stream was encountered.
*
* @param buffer
*          the byte array in which to store the read bytes.
* @param offset
*          the offset in <code>buffer</code> to store the read bytes.
* @param length
*          the maximum number of bytes to store in <code>buffer</code>.
* @return the number of bytes actually read or -1 if end of stream.
*
* @throws ioexception
*           if a problem occurs reading from this datainputstream.
*
*/
@override
public final int read byte buffer  int offset  int length
throws ioexception
return in read buffer  offset  length
/**
* reads a boolean from this stream.
*
* @return the next boolean value from the source stream.
*
* @throws ioexception
*           if a problem occurs reading from this datainputstream.
*
*/
public final boolean readboolean   throws ioexception
int temp   in read
if  temp < 0
throw new eofexception
return temp    0
/**
* reads an 8-bit byte value from this stream.
*
* @return the next byte value from the source stream.
*
* @throws ioexception
*           if a problem occurs reading from this datainputstream.
*
*/
public final byte readbyte   throws ioexception
int temp   in read
if  temp < 0
throw new eofexception
return  byte  temp
/**
* reads a 16-bit character value from this stream.
*
* @return the next <code>char</code> value from the source stream.
*
* @throws ioexception
*           if a problem occurs reading from this datainputstream.
*
*/
private int readtobuff int count  throws ioexception
int offset   0
while  offset < count
int bytesread   in read buff  offset  count   offset
if  bytesread     1
return bytesread
offset    bytesread
return offset
public final char readchar   throws ioexception
if  readtobuff 2  < 0
throw new eofexception
return  char     buff   0xff  << 8     buff   0xff
/**
* reads a 64-bit <code>double</code> value from this stream.
*
* @return the next <code>double</code> value from the source stream.
*
* @throws ioexception
*           if a problem occurs reading from this datainputstream.
*
*/
public final double readdouble   throws ioexception
return double longbitstodouble readlong
/**
* reads a 32-bit <code>float</code> value from this stream.
*
* @return the next <code>float</code> value from the source stream.
*
* @throws ioexception
*           if a problem occurs reading from this datainputstream.
*
*/
public final float readfloat   throws ioexception
return float intbitstofloat readint
/**
* reads bytes from this stream into the byte array <code>buffer</code>. this
* method will block until <code>buffer.length</code> number of bytes have
* been read.
*
* @param buffer
*          to read bytes into
*
* @throws ioexception
*           if a problem occurs reading from this datainputstream.
*
*/
public final void readfully byte buffer  throws ioexception
readfully buffer  0  buffer length
/**
* reads bytes from this stream and stores them in the byte array
* <code>buffer</code> starting at the position <code>offset</code>. this
* method blocks until <code>count</code> bytes have been read.
*
* @param buffer
*          the byte array into which the data is read
* @param offset
*          the offset the operation start at
* @param length
*          the maximum number of bytes to read
*
* @throws ioexception
*           if a problem occurs while reading from this stream
* @throws eofexception
*           if reaches the end of the stream before enough bytes have been
*           read
*/
public final void readfully byte buffer  int offset  int length
throws ioexception
if  length < 0
throw new indexoutofboundsexception
if  length    0
return
if  in    null    buffer    null
throw new nullpointerexception
if  offset < 0    offset > buffer length   length
throw new indexoutofboundsexception
while  length > 0
int result   in read buffer  offset  length
if  result < 0
throw new eofexception
offset    result
length    result
/**
* reads a 32-bit integer value from this stream.
*
* @return the next <code>int</code> value from the source stream.
*
* @throws ioexception
*           if a problem occurs reading from this datainputstream.
*
*/
public final int readint   throws ioexception
if  readtobuff 4  < 0
throw new eofexception
return   buff   0xff  << 24      buff   0xff  << 16
buff   0xff  << 8     buff   0xff
/**
* answers a <code>string</code> representing the next line of text available
* in this bufferedreader. a line is represented by 0 or more characters
* followed by <code>'\n'</code>, <code>'\r'</code>, <code>"\n\r"</code> or
* end of stream. the <code>string</code> does not include the newline
* sequence.
*
* @return the contents of the line or null if no characters were read before
*         end of stream.
*
* @throws ioexception
*           if the datainputstream is already closed or some other io error
*           occurs.
*
* @deprecated use bufferedreader
*/
@deprecated
public final string readline   throws ioexception
stringbuilder line   new stringbuilder 80      typical line length
boolean foundterminator   false
while  true
int nextbyte   in read
switch  nextbyte
case  1
if  line length      0     foundterminator
return null
return line tostring
case  byte
if  foundterminator
pushbackinputstream  in  unread nextbyte
return line tostring
foundterminator   true
/* have to be able to peek ahead one byte */
if    in getclass      pushbackinputstream class
in   new pushbackinputstream in
break
case  byte
return line tostring
default
if  foundterminator
pushbackinputstream  in  unread nextbyte
return line tostring
line append  char  nextbyte
/**
* reads a 64-bit <code>long</code> value from this stream.
*
* @return the next <code>long</code> value from the source stream.
*
* @throws ioexception
*           if a problem occurs reading from this datainputstream.
*
*/
public final long readlong   throws ioexception
if  readtobuff 8  < 0
throw new eofexception
int i1     buff   0xff  << 24      buff   0xff  << 16
buff   0xff  << 8     buff   0xff
int i2     buff   0xff  << 24      buff   0xff  << 16
buff   0xff  << 8     buff   0xff
return   i1   0xffffffffl  << 32     i2   0xffffffffl
/**
* reads a 16-bit <code>short</code> value from this stream.
*
* @return the next <code>short</code> value from the source stream.
*
* @throws ioexception
*           if a problem occurs reading from this datainputstream.
*
*/
public final short readshort   throws ioexception
if  readtobuff 2  < 0
throw new eofexception
return  short     buff   0xff  << 8     buff   0xff
/**
* reads an unsigned 8-bit <code>byte</code> value from this stream and
* returns it as an int.
*
* @return the next unsigned byte value from the source stream.
*
* @throws ioexception
*           if a problem occurs reading from this datainputstream.
*
*/
public final int readunsignedbyte   throws ioexception
int temp   in read
if  temp < 0
throw new eofexception
return temp
/**
* reads a 16-bit unsigned <code>short</code> value from this stream and
* returns it as an int.
*
* @return the next unsigned <code>short</code> value from the source stream.
*
* @throws ioexception
*           if a problem occurs reading from this datainputstream.
*
*/
public final int readunsignedshort   throws ioexception
if  readtobuff 2  < 0
throw new eofexception
return  char     buff   0xff  << 8     buff   0xff
/**
* reads a utf format string from this stream.
*
* @return the next utf string from the source stream.
*
* @throws ioexception
*           if a problem occurs reading from this datainputstream.
*
*/
public final string readutf   throws ioexception
return decodeutf readunsignedshort
string decodeutf int utfsize  throws ioexception
return decodeutf utfsize  this
private static string decodeutf int utfsize  datainput in  throws ioexception
byte buf   new byte
char out   new char
in readfully buf  0  utfsize
return convertutf8withbuf buf  out  0  utfsize
/**
* reads a utf format string from the datainput stream <code>in</code>.
*
* @param in
*          the input stream to read from
* @return the next utf string from the source stream.
*
* @throws ioexception
*           if a problem occurs reading from this datainputstream.
*
*/
public static final string readutf datainput in  throws ioexception
return decodeutf in readunsignedshort    in
/**
* skips <code>count</code> number of bytes in this stream. subsequent
* <code>read()</code>'s will not return these bytes unless
* <code>reset()</code> is used.
*
* @param count
*          the number of bytes to skip.
* @return the number of bytes actually skipped.
*
* @throws ioexception
*           if the stream is already closed or another ioexception occurs.
*/
public final int skipbytes int count  throws ioexception
int skipped   0
long skip
while  skipped < count     skip   in skip count   skipped      0
skipped    skip
if  skipped < 0
throw new eofexception
return skipped
public static string convertutf8withbuf byte buf  char out  int offset
int utfsize  throws utfdataformatexception
int count   0  s   0  a
while  count < utfsize
if   out    char  buf  <
s
else if    a   out    0xe0     0xc0
if  count >  utfsize
throw new utfdataformatexception
int b   buf
if   b   0xc0     0x80
throw new utfdataformatexception
out    char     a   0x1f  << 6     b   0x3f
else if   a   0xf0     0xe0
if  count   1 >  utfsize
throw new utfdataformatexception
int b   buf
int c   buf
if    b   0xc0     0x80       c   0xc0     0x80
throw new utfdataformatexception
out    char     a   0x0f  << 12      b   0x3f  << 6     c   0x3f
else
throw new utfdataformatexception
return new string out  0  s