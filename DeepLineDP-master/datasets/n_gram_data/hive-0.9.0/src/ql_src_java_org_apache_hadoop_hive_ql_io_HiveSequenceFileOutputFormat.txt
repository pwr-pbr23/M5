/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql io
import java io ioexception
import java util properties
import org apache hadoop fs filesystem
import org apache hadoop fs path
import org apache hadoop hive ql exec filesinkoperator recordwriter
import org apache hadoop hive ql exec utilities
import org apache hadoop io byteswritable
import org apache hadoop io sequencefile
import org apache hadoop io writable
import org apache hadoop mapred jobconf
import org apache hadoop mapred sequencefileoutputformat
import org apache hadoop util progressable
/** a {@link hiveoutputformat} that writes {@link sequencefile}s. */
public class hivesequencefileoutputformat<k v> extends sequencefileoutputformat<k v>
implements hiveoutputformat<k  v>
byteswritable empty_key   new byteswritable
/**
* create the final out file, and output an empty key as the key.
*
* @param jc
*          the job configuration file
* @param finaloutpath
*          the final output file to be created
* @param valueclass
*          the value class used for create
* @param iscompressed
*          whether the content is compressed or not
* @param tableproperties
*          the tableinfo of this file's corresponding table
* @param progress
*          progress used for status report
* @return the recordwriter for the output file
*/
@override
public recordwriter gethiverecordwriter jobconf jc  path finaloutpath
class<? extends writable> valueclass  boolean iscompressed
properties tableproperties  progressable progress  throws ioexception
filesystem fs   finaloutpath getfilesystem jc
final sequencefile writer outstream   utilities createsequencewriter jc
fs  finaloutpath  byteswritable class  valueclass  iscompressed
return new recordwriter
public void write writable r  throws ioexception
outstream append empty_key  r
public void close boolean abort  throws ioexception
outstream close