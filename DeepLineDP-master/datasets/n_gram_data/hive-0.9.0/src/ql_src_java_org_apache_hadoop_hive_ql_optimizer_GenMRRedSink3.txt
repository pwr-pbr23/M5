/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql optimizer
import java io serializable
import java util hashmap
import java util map
import java util stack
import org apache hadoop hive ql exec operator
import org apache hadoop hive ql exec reducesinkoperator
import org apache hadoop hive ql exec task
import org apache hadoop hive ql lib node
import org apache hadoop hive ql lib nodeprocessor
import org apache hadoop hive ql lib nodeprocessorctx
import org apache hadoop hive ql optimizer genmrproccontext genmapredctx
import org apache hadoop hive ql parse semanticexception
import org apache hadoop hive ql plan mapredwork
/**
* processor for the rule - union followed by reduce sink.
*/
public class genmrredsink3 implements nodeprocessor
public genmrredsink3
/**
* reduce scan encountered.
*
* @param nd
*          the reduce sink operator encountered
* @param opprocctx
*          context
*/
public object process node nd  stack<node> stack  nodeprocessorctx opprocctx
object    nodeoutputs  throws semanticexception
reducesinkoperator op    reducesinkoperator  nd
genmrproccontext ctx    genmrproccontext  opprocctx
// union consisted on a bunch of map-reduce jobs, and it has been split at
// the union
operator<? extends serializable> reducer   op getchildoperators   get 0
map<operator<? extends serializable>  genmapredctx> mapcurrctx   ctx
getmapcurrctx
genmapredctx mapredctx   mapcurrctx get ctx getcurrunionop
task<? extends serializable> uniontask   null
if mapredctx    null
uniontask   mapredctx getcurrtask
else
uniontask   ctx getcurrtask
mapredwork plan    mapredwork  uniontask getwork
hashmap<operator<? extends serializable>  task<? extends serializable>> optaskmap   ctx
getoptaskmap
task<? extends serializable> reducertask   optaskmap get reducer
ctx setcurrtask uniontask
// if the plan for this reducer does not exist, initialize the plan
if  reducertask    null
// when the reducer is encountered for the first time
if  plan getreducer      null
genmapredutils initunionplan op  ctx  uniontask
// when union is followed by a multi-table insert
else
genmapredutils splitplan op  ctx
else if  plan getreducer      reducer
// the union is already initialized. however, the union is walked from
// another input
// initunionplan is idempotent
genmapredutils initunionplan op  ctx  uniontask
else
genmapredutils joinunionplan ctx  uniontask  reducertask  false
ctx setcurrtask reducertask
mapcurrctx put op  new genmapredctx ctx getcurrtask    ctx getcurrtopop
ctx getcurraliasid
// the union operator has been processed
ctx setcurrunionop null
return null