/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql exec
import java lang reflect method
import java util arraylist
import java util arrays
import java util list
import org apache hadoop hive serde2 typeinfo typeinfo
/**
* the default udaf method resolver. this resolver is used for resolving the
* udaf methods are used for partial and final evaluation given the list of the
* argument types. the getevalmethod goes through all the evaluate methods and
* returns the one that matches the argument signature or is the closest match.
* closest match is defined as the one that requires the least number of
* arguments to be converted. in case more than one matches are found, the
* method throws an ambiguous method exception.
*/
public class defaultudafevaluatorresolver implements udafevaluatorresolver
/**
* the class of the udaf.
*/
private final class<? extends udaf> udafclass
/**
* constructor. this constructor sets the resolver to be used for comparison
* operators. see {@link udafevaluatorresolver}
*/
public defaultudafevaluatorresolver class<? extends udaf> udafclass
this udafclass   udafclass
/**
* gets the evaluator class for the udaf given the parameter types.
*
* @param argclasses
*          the list of the parameter types.
*/
public class<? extends udafevaluator> getevaluatorclass
list<typeinfo> argclasses  throws udfargumentexception
arraylist<class<? extends udafevaluator>> classlist
new arraylist<class<? extends udafevaluator>>
// add all the public member classes that implement an evaluator
for  class<?> enclclass   udafclass getclasses
if  udafevaluator class isassignablefrom enclclass
classlist add  class<? extends udafevaluator>  enclclass
// next we locate all the iterate methods for each of these classes.
arraylist<method> mlist   new arraylist<method>
arraylist<class<? extends udafevaluator>> clist
new arraylist<class<? extends udafevaluator>>
for  class<? extends udafevaluator> evaluator   classlist
for  method m   evaluator getmethods
if  m getname   equalsignorecase
mlist add m
clist add evaluator
method m   functionregistry getmethodinternal udafclass  mlist  false  argclasses
// find the class that has this method.
// note that method.getdeclaringclass() may not work here because the method
// can be inherited from a base class.
int found    1
for  int i   0  i < mlist size    i
if  mlist get i     m
if  found     1
found   i
else
throw new ambiguousmethodexception udafclass  null  null
assert  found     1
return clist get found