/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive serde2 lazybinary
import java util arraylist
import java util arrays
import java util list
import org apache hadoop hive serde2 lazy bytearrayref
import org apache hadoop hive serde2 lazy lazyobject
import org apache hadoop hive serde2 lazybinary lazybinaryutils recordinfo
import org apache hadoop hive serde2 lazybinary lazybinaryutils vint
import org apache hadoop hive serde2 lazybinary objectinspector lazybinarylistobjectinspector
import org apache hadoop hive serde2 objectinspector listobjectinspector
import org apache hadoop hive serde2 objectinspector objectinspector
/**
* lazybinaryarray is serialized as follows: start a b b b b b b end bytes[] ->
* |--------|---|---|---|---| ... |---|---|
*
* section a is the null-bytes. suppose the list has n elements, then there are
* (n+7)/8 bytes used as null-bytes. each bit corresponds to an element and it
* indicates whether that element is null (0) or not null (1).
*
* after a, all b(s) represent the elements of the list. each of them is again a
* lazybinaryobject.
*
*/
public class lazybinaryarray extends
lazybinarynonprimitive<lazybinarylistobjectinspector>
/**
* whether the data is already parsed or not.
*/
boolean parsed   false
/**
* the length of the array. only valid when the data is parsed.
*/
int arraysize   0
/**
* the start positions and lengths of array elements. only valid when the data
* is parsed.
*/
int elementstart
int elementlength
/**
* whether an element is initialized or not.
*/
boolean elementinited
/**
* whether an element is null or not. because length is 0 does not means the
* field is null. in particular, a 0-length string is not null.
*/
boolean elementisnull
/**
* the elements of the array. note that we call arrayelements[i].init(bytes,
* begin, length) only when that element is accessed.
*/
lazybinaryobject arrayelements
/**
* construct a lazybinaryarray object with the objectinspector.
*
* @param oi
*          the oi representing the type of this lazybinaryarray
*/
protected lazybinaryarray lazybinarylistobjectinspector oi
super oi
/**
* set the row data for this lazybinaryarray.
*
* @see lazyobject#init(bytearrayref, int, int)
*/
@override
public void init bytearrayref bytes  int start  int length
super init bytes  start  length
parsed   false
/**
* enlarge the size of arrays storing information for the elements inside the
* array.
*/
private void adjustarraysize int newsize
if  elementstart    null    elementstart length < newsize
elementstart   new int
elementlength   new int
elementinited   new boolean
elementisnull   new boolean
arrayelements   new lazybinaryobject
vint vint   new lazybinaryutils vint
recordinfo recordinfo   new lazybinaryutils recordinfo
/**
* parse the bytes and fill elementstart, elementlength, elementinited and
* elementisnull.
*/
private void parse
byte bytes   this bytes getdata
// get the vlong that represents the map size
lazybinaryutils readvint bytes  start  vint
arraysize   vint value
if  0    arraysize
parsed   true
return
// adjust arrays
adjustarraysize arraysize
// find out the null-bytes
int arrybytestart   start   vint length
int nullbytecur   arrybytestart
int nullbyteend   arrybytestart    arraysize   7    8
// the begin the real elements
int lastelementbyteend   nullbyteend
// the list element object inspector
objectinspector listeleobjectinspector     listobjectinspector  oi
getlistelementobjectinspector
// parsing elements one by one
for  int i   0  i < arraysize  i
elementisnull   true
if   bytes    1 <<  i % 8       0
elementisnull   false
lazybinaryutils checkobjectbyteinfo listeleobjectinspector  bytes
lastelementbyteend  recordinfo
elementstart   lastelementbyteend   recordinfo elementoffset
elementlength   recordinfo elementsize
lastelementbyteend   elementstart   elementlength
// move onto the next null byte
if  7     i % 8
nullbytecur
arrays fill elementinited  0  arraysize  false
parsed   true
/**
* returns the actual primitive object at the index position inside the array
* represented by this lazybinaryobject.
*/
public object getlistelementobject int index
if   parsed
parse
if  index < 0    index >  arraysize
return null
return uncheckedgetelement index
/**
* get the element without checking out-of-bound index.
*
* @param index
*          index to the array element
*/
private object uncheckedgetelement int index
if  elementisnull
return null
else
if   elementinited
elementinited   true
if  arrayelements    null
arrayelements   lazybinaryfactory createlazybinaryobject  oi
getlistelementobjectinspector
arrayelements init bytes  elementstart
elementlength
return arrayelements getobject
/**
* returns the array size.
*/
public int getlistlength
if   parsed
parse
return arraysize
/**
* cachedlist is reused every time getlist is called. different
* lazybianryarray instances cannot share the same cachedlist.
*/
arraylist<object> cachedlist
/**
* returns the list of actual primitive objects. returns null for null array.
*/
public list<object> getlist
if   parsed
parse
if  cachedlist    null
cachedlist   new arraylist<object> arraysize
else
cachedlist clear
for  int index   0  index < arraysize  index
cachedlist add uncheckedgetelement index
return cachedlist