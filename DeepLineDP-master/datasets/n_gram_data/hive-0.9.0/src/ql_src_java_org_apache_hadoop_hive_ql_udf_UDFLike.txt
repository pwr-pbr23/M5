/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql udf
import java util regex matcher
import java util regex pattern
import org apache hadoop hive ql exec description
import org apache hadoop hive ql exec udf
import org apache hadoop io booleanwritable
import org apache hadoop io text
/**
* udflike.
*
*/
@description name
value
extended
public class udflike extends udf
private final text lastlikepattern   new text
private pattern p   null
// doing characters comparison directly instead of regular expression
// matching for simple patterns like "%abc%".
private enum patterntype
none
begin
end
middle
complex     all other cases  such as
private patterntype type   patterntype none
private final text simplepattern   new text
private final booleanwritable result   new booleanwritable
public udflike
public static string likepatterntoregexp string likepattern
stringbuilder sb   new stringbuilder
for  int i   0  i < likepattern length    i
// make a special case for "\\_" and "\\%"
char n   likepattern charat i
if  n
i   1 < likepattern length
likepattern charat i   1          likepattern charat i   1
sb append likepattern charat i   1
i
continue
if  n
sb append
else if  n
sb append
else
sb append pattern quote character tostring n
return sb tostring
/**
* parses the likepattern. based on it is a simple pattern or not, the
* function might change two member variables. {@link #type} will be changed
* to the corresponding pattern type; {@link #simplepattern} will record the
* string in it for later pattern matching if it is a simple pattern.
* <p>
* examples: <blockquote>
*
* <pre>
* parsesimplepattern("%abc%") changes {@link #type} to patterntype.middle
* and changes {@link #simplepattern} to "abc"
* parsesimplepattern("%ab_c%") changes {@link #type} to patterntype.complex
* and does not change {@link #simplepattern}
* </pre>
*
* </blockquote>
*
* @param likepattern
*          the input like query pattern
*/
private void parsesimplepattern string likepattern
int length   likepattern length
int beginindex   0
int endindex   length
char lastchar
string strpattern   new string
type   patterntype none
for  int i   0  i < length  i
char n   likepattern charat i
if  n            such as
if  lastchar            such as
type   patterntype complex
return
else      such as
strpattern    likepattern substring beginindex  i   1
beginindex   i
else if  n
if  i    0       such as
type   patterntype end
beginindex   1
else if  i < length   1
if  lastchar            such as
type   patterntype complex
return
else      such as
strpattern    likepattern substring beginindex  i   1
beginindex   i
else
if  lastchar
endindex   length   1
if  type    patterntype end       such as
type   patterntype middle
else
type   patterntype begin     such as
else      such as
strpattern    likepattern substring beginindex  i   1
beginindex   i
endindex   length
lastchar   n
strpattern    likepattern substring beginindex  endindex
simplepattern set strpattern
private static boolean find text s  text sub  int starts  int ends
byte bytes   s getbytes
byte bytesub   sub getbytes
int lensub   sub getlength
boolean match   false
for  int i   starts   i < ends   lensub   1       match   i
match   true
for  int j   0  j < lensub  j
if  bytes    bytesub
match   false
break
return match
public booleanwritable evaluate text s  text likepattern
if  s    null    likepattern    null
return null
if   likepattern equals lastlikepattern
lastlikepattern set likepattern
string strlikepattern   likepattern tostring
parsesimplepattern strlikepattern
if  type    patterntype complex
p   pattern compile likepatterntoregexp strlikepattern
if  type    patterntype complex
matcher m   p matcher s tostring
result set m matches
else
int starts   0
int ends   s getlength
// if s is shorter than the required pattern
if  ends < simplepattern getlength
result set false
return result
switch  type
case begin
ends   simplepattern getlength
break
case end
starts   ends   simplepattern getlength
break
case none
if  simplepattern getlength      s getlength
result set false
return result
break
result set find s  simplepattern  starts  ends
return result