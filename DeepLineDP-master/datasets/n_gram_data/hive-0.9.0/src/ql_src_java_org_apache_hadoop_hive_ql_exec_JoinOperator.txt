/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql exec
import java io ioexception
import java io serializable
import java util arraylist
import java util list
import org apache commons logging log
import org apache hadoop conf configuration
import org apache hadoop fs filestatus
import org apache hadoop fs filesystem
import org apache hadoop fs path
import org apache hadoop hive ql metadata hiveexception
import org apache hadoop hive ql plan joindesc
import org apache hadoop hive ql plan api operatortype
import org apache hadoop hive serde2 serdeutils
import org apache hadoop hive serde2 objectinspector standardstructobjectinspector
import org apache hadoop hive serde2 objectinspector structfield
import org apache hadoop hive serde2 objectinspector structobjectinspector
import org apache hadoop io longwritable
/**
* join operator implementation.
*/
public class joinoperator extends commonjoinoperator<joindesc> implements
serializable
private static final long serialversionuid   1l
private transient skewjoinhandler skewjoinkeycontext   null
/**
* skewkeytablecounter.
*
*/
public static enum skewkeytablecounter
skewjoinfollowupjobs
private final transient longwritable skewjoin_followup_jobs   new longwritable 0
@override
protected void initializeop configuration hconf  throws hiveexception
super initializeop hconf
initializechildren hconf
if  handleskewjoin
skewjoinkeycontext   new skewjoinhandler this
skewjoinkeycontext initiliaze hconf
skewjoinkeycontext setskewjoinjobcounter skewjoin_followup_jobs
statsmap put skewkeytablecounter skewjoinfollowupjobs  skewjoin_followup_jobs
@override
public void processop object row  int tag  throws hiveexception
try
reportprogress
// get alias
alias    byte  tag
if   lastalias    null       lastalias equals alias
nextsz   joinemitinterval
arraylist<object> nr   joinutil computevalues row  joinvalues get alias
joinvaluesobjectinspectors get alias   joinfilters get alias
joinfilterobjectinspectors get alias   noouterjoin
if  handleskewjoin
skewjoinkeycontext handleskew tag
// number of rows for the key in the given table
int sz   storage get alias  size
structobjectinspector soi    structobjectinspector  inputobjinspectors
structfield sf   soi getstructfieldref utilities reducefield key
tostring
list keyobject    list  soi getstructfielddata row  sf
// are we consuming too much memory
if  alias    numaliases   1      handleskewjoin    skewjoinkeycontext currbigkeytag >  0
if  sz    joinemitinterval
// the input is sorted by alias, so if we are already in the last join
// operand,
// we can emit some results now.
// note this has to be done before adding the current row to the
// storage,
// to preserve the correctness for outer joins.
checkandgenobject
storage get alias  clear
else
if  sz    nextsz
// print a message if we reached at least 1000 rows for a join operand
// we won't print a message for the last join operand since the size
// will never goes to joinemitinterval.
log info     alias       sz
keyobject
nextsz   getnextsize nextsz
// add the value to the vector
// if join-key is null, process each row in different group.
standardstructobjectinspector inspector
standardstructobjectinspector  sf getfieldobjectinspector
if  serdeutils hasanynullobject keyobject  inspector  nullsafes
endgroup
startgroup
storage get alias  add nr
catch  exception e
e printstacktrace
throw new hiveexception e
@override
public operatortype gettype
return operatortype join
/**
* all done.
*
*/
@override
public void closeop boolean abort  throws hiveexception
if  handleskewjoin
skewjoinkeycontext close abort
super closeop abort
@override
public void jobclose configuration hconf  boolean success  jobclosefeedback feedback
throws hiveexception
int numaliases   conf getexprs   size
if  conf gethandleskewjoin
try
for  int i   0  i < numaliases  i
string specpath   conf getbigkeysdirmap   get  byte  i
mvfiletofinalpath specpath  hconf  success  log
for  int j   0  j < numaliases  j
if  j    i
continue
specpath   getconf   getsmallkeysdirmap   get  byte  i  get
byte  j
mvfiletofinalpath specpath  hconf  success  log
if  success
// move up files
for  int i   0  i < numaliases  i
string specpath   conf getbigkeysdirmap   get  byte  i
moveupfiles specpath  hconf  log
for  int j   0  j < numaliases  j
if  j    i
continue
specpath   getconf   getsmallkeysdirmap   get  byte  i  get
byte  j
moveupfiles specpath  hconf  log
catch  ioexception e
throw new hiveexception e
super jobclose hconf  success  feedback
private void moveupfiles string specpath  configuration hconf  log log
throws ioexception  hiveexception
filesystem fs    new path specpath   getfilesystem hconf
path finalpath   new path specpath
if  fs exists finalpath
filestatus taskoutputdirs   fs liststatus finalpath
if  taskoutputdirs    null
for  filestatus dir   taskoutputdirs
utilities renameormovefiles fs  dir getpath    finalpath
fs delete dir getpath    true
/**
* this is a similar implementation of filesinkoperator.movefiletofinalpath.
* @param specpath
* @param hconf
* @param success
* @param log
* @param dpctx
* @throws ioexception
* @throws hiveexception
*/
private void  mvfiletofinalpath string specpath  configuration hconf
boolean success  log log  throws ioexception  hiveexception
filesystem fs    new path specpath   getfilesystem hconf
path tmppath   utilities totemppath specpath
path intermediatepath   new path tmppath getparent    tmppath getname
path finalpath   new path specpath
arraylist<string> emptybuckets   null
if  success
if  fs exists tmppath
// step1: rename tmp output folder to intermediate path. after this
// point, updates from speculative tasks still writing to tmppath
// will not appear in finalpath.
log info     tmppath       intermediatepath
utilities rename fs  tmppath  intermediatepath
// step2: remove any tmp file or double-committed output files
utilities removetemporduplicatefiles fs  intermediatepath
// step3: move to the file destination
log info     intermediatepath       finalpath
utilities renameormovefiles fs  intermediatepath  finalpath
else
fs delete tmppath  true
/**
* forward a record of join results.
*
* @throws hiveexception
*/
@override
public void endgroup   throws hiveexception
// if this is a skew key, we need to handle it in a separate map reduce job.
if  handleskewjoin    skewjoinkeycontext currbigkeytag >  0
try
skewjoinkeycontext endgroup
catch  ioexception e
log error e getmessage    e
throw new hiveexception e
return
else
checkandgenobject