/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql optimizer index
import java io serializable
import java util arraylist
import java util linkedhashmap
import java util list
import java util map
import java util stack
import org apache hadoop hive ql exec operator
import org apache hadoop hive ql lib defaultgraphwalker
import org apache hadoop hive ql lib defaultruledispatcher
import org apache hadoop hive ql lib dispatcher
import org apache hadoop hive ql lib graphwalker
import org apache hadoop hive ql lib node
import org apache hadoop hive ql lib nodeprocessor
import org apache hadoop hive ql lib nodeprocessorctx
import org apache hadoop hive ql lib rule
import org apache hadoop hive ql lib ruleregexp
import org apache hadoop hive ql metadata hive
import org apache hadoop hive ql parse opparsecontext
import org apache hadoop hive ql parse parsecontext
import org apache hadoop hive ql parse semanticexception
import org apache hadoop hive ql plan exprnodecolumndesc
import org apache hadoop hive ql udf generic genericudafevaluator
/**
* rewritequeryusingaggregateindexctx class stores the
* context for the {@link rewritequeryusingaggregateindex}
* used to rewrite operator plan with index table instead of base table.
*/
public final class rewritequeryusingaggregateindexctx  implements nodeprocessorctx
private rewritequeryusingaggregateindexctx parsecontext parsecontext  hive hivedb
string indextablename  string basetablename  string aggregatefunction
this parsecontext   parsecontext
this hivedb   hivedb
this indextablename   indextablename
this basetablename   basetablename
this aggregatefunction   aggregatefunction
this opc   parsecontext getopparsectx
public static rewritequeryusingaggregateindexctx getinstance parsecontext parsecontext
hive hivedb  string indextablename  string basetablename  string aggregatefunction
return new rewritequeryusingaggregateindexctx
parsecontext  hivedb  indextablename  basetablename  aggregatefunction
private map<operator<? extends serializable>  opparsecontext> opc
new linkedhashmap<operator<? extends serializable>  opparsecontext>
private final hive hivedb
private final parsecontext parsecontext
//we need the genericudafevaluator for genericudaf function "sum"
private genericudafevaluator eval   null
private final string indextablename
private final string basetablename
private final string aggregatefunction
private exprnodecolumndesc aggrexprnode   null
public map<operator<? extends serializable>  opparsecontext> getopc
return opc
public  parsecontext getparsecontext
return parsecontext
public hive gethivedb
return hivedb
public string getindexname
return indextablename
public genericudafevaluator geteval
return eval
public void seteval genericudafevaluator eval
this eval   eval
public void setaggrexprnode exprnodecolumndesc aggrexprnode
this aggrexprnode   aggrexprnode
public exprnodecolumndesc getaggrexprnode
return aggrexprnode
/**
* walk the original operator tree using the {@link defaultgraphwalker} using the rules.
* each of the rules invoke respective methods from the {@link rewritequeryusingaggregateindex}
* to rewrite the original query using aggregate index.
*
* @param topop
* @throws semanticexception
*/
public void invokerewritequeryproc
operator<? extends serializable> topop  throws semanticexception
map<rule  nodeprocessor> oprules   new linkedhashmap<rule  nodeprocessor>
// replace scan operator containing original table with index table
oprules put new ruleregexp
rewritequeryusingaggregateindex getreplacetablescanproc
//rule that replaces index key selection with
//sum(`_count_of_indexed_column`) function in original query
oprules put new ruleregexp
rewritequeryusingaggregateindex getnewqueryselectschemaproc
//manipulates the exprnodedesc from groupbyoperator aggregation list
oprules put new ruleregexp
rewritequeryusingaggregateindex getnewquerygroupbyschemaproc
// the dispatcher fires the processor corresponding to the closest matching
// rule and passes the context along
dispatcher disp   new defaultruledispatcher getdefaultproc    oprules  this
graphwalker ogw   new defaultgraphwalker disp
// create a list of topop nodes
list<node> topnodes   new arraylist<node>
topnodes add topop
ogw startwalking topnodes  null
/**
* default procedure for {@link defaultruledispatcher}.
* @return
*/
private nodeprocessor getdefaultproc
return new nodeprocessor
@override
public object process node nd  stack<node> stack
nodeprocessorctx procctx  object    nodeoutputs  throws semanticexception
return null
public string getbasetablename
return basetablename
public string getaggregatefunction
return aggregatefunction