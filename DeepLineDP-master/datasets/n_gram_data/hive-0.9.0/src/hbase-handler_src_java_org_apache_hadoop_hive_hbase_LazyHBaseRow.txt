/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive hbase
import java util arraylist
import java util arrays
import java util list
import org apache hadoop hbase client result
import org apache hadoop hive hbase hbaseserde columnmapping
import org apache hadoop hive serde2 lazy bytearrayref
import org apache hadoop hive serde2 lazy lazyfactory
import org apache hadoop hive serde2 lazy lazyobject
import org apache hadoop hive serde2 lazy lazystruct
import org apache hadoop hive serde2 lazy objectinspector lazymapobjectinspector
import org apache hadoop hive serde2 lazy objectinspector lazysimplestructobjectinspector
import org apache hadoop hive serde2 objectinspector objectinspector
import org apache hadoop hive serde2 objectinspector structfield
import org apache hadoop hive serde2 objectinspector structobjectinspector
/**
* lazyobject for storing an hbase row.  the field of an hbase row can be
* primitive or non-primitive.
*/
public class lazyhbaserow extends lazystruct
/**
* the hbase columns mapping of the row.
*/
private result result
private list<columnmapping> columnsmapping
private arraylist<object> cachedlist
/**
* construct a lazyhbaserow object with the objectinspector.
*/
public lazyhbaserow lazysimplestructobjectinspector oi
super oi
/**
* set the hbase row data(a result writable) for this lazystruct.
* @see lazyhbaserow#init(result)
*/
public void init result r  list<columnmapping> columnsmapping
result   r
this columnsmapping   columnsmapping
setparsed false
/**
* parse the result and fill each field.
* @see lazystruct#parse()
*/
private void parse
if  getfields      null
list<? extends structfield> fieldrefs
structobjectinspector getinspector    getallstructfieldrefs
lazyobject<? extends objectinspector>  fields   new lazyobject<?>
for  int i   0  i < fields length  i
columnmapping colmap   columnsmapping get i
if  colmap qualifiername    null     colmap hbaserowkey
// a column family
fields   new lazyhbasecellmap
lazymapobjectinspector  fieldrefs get i  getfieldobjectinspector
continue
fields   lazyfactory createlazyobject
fieldrefs get i  getfieldobjectinspector
colmap binarystorage get 0
setfields fields
setfieldinited new boolean
arrays fill getfieldinited    false
setparsed true
/**
* get one field out of the hbase row.
*
* if the field is a primitive field, return the actual object.
* otherwise return the lazyobject.  this is because primitiveobjectinspector
* does not have control over the object used by the user - the user simply
* directly uses the object instead of going through
* object primitiveobjectinspector.get(object).
*
* @param fieldid  the field id
* @return         the field as a lazyobject
*/
@override
public object getfield int fieldid
if   getparsed
parse
return uncheckedgetfield fieldid
/**
* get the field out of the row without checking whether parsing is needed.
* this is called by both getfield and getfieldsaslist.
* @param fieldid  the id of the field starting from 0.
* @param nullsequence  the sequence representing null value.
* @return  the value of the field
*/
private object uncheckedgetfield int fieldid
lazyobject<?>  fields   getfields
boolean  fieldsinited   getfieldinited
if   fieldsinited
fieldsinited   true
bytearrayref ref   null
columnmapping colmap   columnsmapping get fieldid
if  colmap hbaserowkey
ref   new bytearrayref
ref setdata result getrow
else
if  colmap qualifiername    null
// it is a column family
// primitive type for map<key, value> can be stored in binary format
lazyhbasecellmap  fields  init
result  colmap familynamebytes  colmap binarystorage
else
// it is a column i.e. a column-family with column-qualifier
byte  res   result getvalue colmap familynamebytes  colmap qualifiernamebytes
if  res    null
return null
else
ref   new bytearrayref
ref setdata res
if  ref    null
fields init ref  0  ref getdata   length
return fields getobject
/**
* get the values of the fields as an arraylist.
* @return the values of the fields as an arraylist.
*/
@override
public arraylist<object> getfieldsaslist
if   getparsed
parse
if  cachedlist    null
cachedlist   new arraylist<object>
else
cachedlist clear
for  int i   0  i < getfields   length  i
cachedlist add uncheckedgetfield i
return cachedlist
@override
public object getobject
return this