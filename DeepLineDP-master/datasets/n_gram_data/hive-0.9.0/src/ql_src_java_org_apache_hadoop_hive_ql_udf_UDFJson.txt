/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql udf
import java util arraylist
import java util iterator
import java util linkedhashmap
import java util map
import java util regex matcher
import java util regex pattern
import org apache hadoop hive ql exec description
import org apache hadoop hive ql exec udf
import org apache hadoop io text
import org json jsonarray
import org json jsonexception
import org json jsonobject
/**
* udfjson.
*
*/
@description name
value
extended
public class udfjson extends udf
private final pattern patternkey   pattern compile
private final pattern patternindex   pattern compile
// an lru cache using a linked hash map
static class hashcache<k  v> extends linkedhashmap<k  v>
private static final int cache_size   16
private static final int init_size   32
private static final float load_factor   0 6f
hashcache
super init_size  load_factor
private static final long serialversionuid   1
@override
protected boolean removeeldestentry map entry<k  v> eldest
return size   > cache_size
static map<string  object> extractobjectcache   new hashcache<string  object>
static map<string  string> pathexprcache   new hashcache<string  string>
static map<string  arraylist<string>> indexlistcache   new hashcache<string  arraylist<string>>
static map<string  string> mkeygroup1cache   new hashcache<string  string>
static map<string  boolean> mkeymatchescache   new hashcache<string  boolean>
text result   new text
public udfjson
/**
* extract json object from a json string based on json path specified, and
* return json string of the extracted json object. it will return null if the
* input json string is invalid.
*
* a limited version of jsonpath supported: $ : root object . : child operator
* [] : subscript operator for array * : wildcard for []
*
* syntax not supported that's worth noticing: '' : zero length string as key
* .. : recursive descent &amp;#064; : current object/element () : script
* expression ?() : filter (script) expression. [,] : union operator
* [start:end:step] : array slice operator
*
* @param jsonstring
*          the json string.
* @param pathstring
*          the json path expression.
* @return json string or null when an error happens.
*/
public text evaluate string jsonstring  string pathstring
if  jsonstring    null    jsonstring         pathstring    null
pathstring
return null
try
// cache pathexpr
string pathexpr   pathexprcache get pathstring
if  pathexpr    null
pathexpr   pathstring split     1
pathexprcache put pathstring  pathexpr
if   pathexpr equalsignorecase
return null
// cache extractobject
object extractobject   extractobjectcache get jsonstring
if  extractobject    null
extractobject   new jsonobject jsonstring
extractobjectcache put jsonstring  extractobject
for  int i   1  i < pathexpr length  i
extractobject   extract extractobject  pathexpr
result set extractobject tostring
return result
catch  exception e
return null
private object extract object json  string path  throws jsonexception
// cache patternkey.matcher(path).matches()
matcher mkey   null
boolean mkeymatches   mkeymatchescache get path
if  mkeymatches    null
mkey   patternkey matcher path
mkeymatches   mkey matches   ? boolean true   boolean false
mkeymatchescache put path  mkeymatches
if   mkeymatches booleanvalue
return null
// cache mkey.group(1)
string mkeygroup1   mkeygroup1cache get path
if  mkeygroup1    null
if  mkey    null
mkey   patternkey matcher path
mkeygroup1   mkey group 1
mkeygroup1cache put path  mkeygroup1
json   extract_json_withkey json  mkeygroup1
// cache indexlist
arraylist<string> indexlist   indexlistcache get path
if  indexlist    null
matcher mindex   patternindex matcher path
indexlist   new arraylist<string>
while  mindex find
indexlist add mindex group 1
indexlistcache put path  indexlist
if  indexlist size   > 0
json   extract_json_withindex json  indexlist
return json
arraylist<object> jsonlist   new arraylist<object>
private object extract_json_withindex object json  arraylist<string> indexlist
throws jsonexception
jsonlist clear
jsonlist add json
iterator<string> itr   indexlist iterator
while  itr hasnext
string index   itr next
arraylist<object> tmp_jsonlist   new arraylist<object>
if  index equalsignorecase
for  int i   0  i <  jsonlist  size    i
try
jsonarray array    jsonarray   jsonlist  get i
for  int j   0  j < array length    j
tmp_jsonlist add array get j
catch  exception e
continue
jsonlist   tmp_jsonlist
else
for  int i   0  i <  jsonlist  size    i
try
tmp_jsonlist add   jsonarray   jsonlist  get i   get integer
parseint index
catch  classcastexception e
continue
catch  jsonexception e
return null
jsonlist   tmp_jsonlist
return  jsonlist size   > 1  ? new jsonarray jsonlist    jsonlist get 0
private object extract_json_withkey object json  string path
throws jsonexception
if  json getclass      org json jsonarray class
jsonarray jsonarray   new jsonarray
for  int i   0  i <   jsonarray  json  length    i
object josn_elem     jsonarray  json  get i
try
object json_obj     jsonobject  josn_elem  get path
if  json_obj getclass      org json jsonarray class
for  int j   0  j <   jsonarray  json_obj  length    j
jsonarray put   jsonarray  json_obj  get j
else
jsonarray put json_obj
catch  exception e
continue
return  jsonarray length      0  ? null   jsonarray
else
return   jsonobject  json  get path