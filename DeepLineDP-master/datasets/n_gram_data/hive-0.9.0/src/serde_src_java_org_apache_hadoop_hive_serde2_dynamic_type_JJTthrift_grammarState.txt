/* generated by:javacc: do not edit this line. jjtthrift_grammarstate.java version 4.1 */
package org apache hadoop hive serde2 dynamic_type
public class jjtthrift_grammarstate
private final java util list nodes
private final java util list marks
private int sp     number of nodes on stack
private int mk     current mark
private boolean node_created
public jjtthrift_grammarstate
nodes   new java util arraylist
marks   new java util arraylist
sp   0
mk   0
/*
* determines whether the current node was actually closed and pushed. this
* should only be called in the final user action of a node scope.
*/
public boolean nodecreated
return node_created
/*
* call this to reinitialize the node stack. it is called automatically by the
* parser's reinit() method.
*/
public void reset
nodes clear
marks clear
sp   0
mk   0
/*
* returns the root node of the ast. it only makes sense to call this after a
* successful parse.
*/
public node rootnode
return  node  nodes get 0
/* pushes a node on to the stack. */
public void pushnode node n
nodes add n
sp
/*
* returns the node on the top of the stack, and remove it from the stack.
*/
public node popnode
if    sp < mk
mk     integer  marks remove marks size     1   intvalue
return  node  nodes remove nodes size     1
/* returns the node currently on the top of the stack. */
public node peeknode
return  node  nodes get nodes size     1
/*
* returns the number of children on the stack in the current node scope.
*/
public int nodearity
return sp   mk
public void clearnodescope node n
while  sp > mk
popnode
mk     integer  marks remove marks size     1   intvalue
public void opennodescope node n
marks add new integer mk
mk   sp
n jjtopen
/*
* a definite node is constructed from a specified number of children. that
* number of nodes are popped from the stack and made the children of the
* definite node. then the definite node is pushed on to the stack.
*/
public void closenodescope node n  int num
mk     integer  marks remove marks size     1   intvalue
while  num   > 0
node c   popnode
c jjtsetparent n
n jjtaddchild c  num
n jjtclose
pushnode n
node_created   true
/*
* a conditional node is constructed if its condition is true. all the nodes
* that have been pushed since the node was opened are made children of the
* conditional node, which is then pushed on to the stack. if the condition is
* false the node is not constructed and they are left on the stack.
*/
public void closenodescope node n  boolean condition
if  condition
int a   nodearity
mk     integer  marks remove marks size     1   intvalue
while  a   > 0
node c   popnode
c jjtsetparent n
n jjtaddchild c  a
n jjtclose
pushnode n
node_created   true
else
mk     integer  marks remove marks size     1   intvalue
node_created   false
/*
* javacc - originalchecksum=67039445e12d18e18e63124a33879cd3 (do not edit this
* line)
*/