/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql index
import java util arraylist
import java util iterator
import java util linkedhashmap
import java util list
import java util set
import java util map entry
import org apache hadoop conf configuration
import org apache hadoop hive metastore api fieldschema
import org apache hadoop hive ql exec task
import org apache hadoop hive ql exec utilities
import org apache hadoop hive ql hooks readentity
import org apache hadoop hive ql hooks writeentity
import org apache hadoop hive ql metadata hiveexception
import org apache hadoop hive ql metadata hiveutils
import org apache hadoop hive ql metadata partition
import org apache hadoop hive ql parse semanticexception
import org apache hadoop hive ql plan partitiondesc
import org apache hadoop hive ql plan tabledesc
/**
* index handler for indexes that use tables to store indexes.
*/
public abstract class tablebasedindexhandler extends abstractindexhandler
protected configuration configuration
@override
public list<task<?>> generateindexbuildtasklist
org apache hadoop hive ql metadata table basetbl
org apache hadoop hive metastore api index index
list<partition> indextblpartitions  list<partition> basetblpartitions
org apache hadoop hive ql metadata table indextbl
set<readentity> inputs  set<writeentity> outputs  throws hiveexception
try
tabledesc desc   utilities gettabledesc indextbl
list<partition> newbasetblpartitions   new arraylist<partition>
list<task<?>> indexbuildertasks   new arraylist<task<?>>
if   basetbl ispartitioned
// the table does not have any partition, then create index for the
// whole table
task<?> indexbuilder   getindexbuildermapredtask inputs  outputs  index getsd   getcols    false
new partitiondesc desc  null   indextbl gettablename
new partitiondesc utilities gettabledesc basetbl   null
basetbl gettablename    indextbl getdbname
indexbuildertasks add indexbuilder
else
// check whether the index table partitions are still exists in base
// table
for  int i   0  i < indextblpartitions size    i
partition indexpart   indextblpartitions get i
partition basepart   null
for  int j   0  j < basetblpartitions size    j
if  basetblpartitions get j  getname   equals indexpart getname
basepart   basetblpartitions get j
newbasetblpartitions add basetblpartitions get j
break
if  basepart    null
throw new runtimeexception
// for each partition, spawn a map reduce task.
task<?> indexbuilder   getindexbuildermapredtask inputs  outputs  index getsd   getcols    true
new partitiondesc indexpart   indextbl gettablename
new partitiondesc basepart   basetbl gettablename    indextbl getdbname
indexbuildertasks add indexbuilder
return indexbuildertasks
catch  exception e
throw new semanticexception e
abstract protected task<?> getindexbuildermapredtask set<readentity> inputs  set<writeentity> outputs
list<fieldschema> indexfield  boolean partitioned
partitiondesc indextblpartdesc  string indextablename
partitiondesc basetablepartdesc  string basetablename  string dbname  throws hiveexception
protected list<string> getpartkvpairstringarray
linkedhashmap<string  string> partspec
list<string> ret   new arraylist<string> partspec size
iterator<entry<string  string>> iter   partspec entryset   iterator
while  iter hasnext
stringbuilder sb   new stringbuilder
entry<string  string> p   iter next
sb append hiveutils unparseidentifier p getkey
sb append
sb append
sb append hiveutils escapestring p getvalue
sb append
ret add sb tostring
return ret
@override
public boolean usesindextable
return true
@override
public configuration getconf
return configuration
@override
public void setconf configuration conf
this configuration   conf