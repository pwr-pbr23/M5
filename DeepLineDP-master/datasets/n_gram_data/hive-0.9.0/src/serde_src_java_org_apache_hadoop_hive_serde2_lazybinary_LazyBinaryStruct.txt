/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive serde2 lazybinary
import java util arraylist
import java util arrays
import java util list
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop hive serde2 serdestatsstruct
import org apache hadoop hive serde2 lazy bytearrayref
import org apache hadoop hive serde2 lazybinary lazybinaryutils recordinfo
import org apache hadoop hive serde2 lazybinary objectinspector lazybinarystructobjectinspector
import org apache hadoop hive serde2 objectinspector objectinspector
import org apache hadoop hive serde2 objectinspector structfield
import org apache hadoop hive serde2 objectinspector structobjectinspector
/**
* lazybinarystruct is serialized as follows: start a b a b a b end bytes[] ->
* |-----|---------|--- ... ---|-----|---------|
*
* section a is one null-byte, corresponding to eight struct fields in section
* b. each bit indicates whether the corresponding field is null (0) or not null
* (1). each field is a lazybinaryobject.
*
* following b, there is another section a and b. this pattern repeats until the
* all struct fields are serialized.
*/
public class lazybinarystruct extends
lazybinarynonprimitive<lazybinarystructobjectinspector> implements serdestatsstruct
private static log log   logfactory getlog lazybinarystruct class getname
/**
* whether the data is already parsed or not.
*/
boolean parsed
/**
* size of serialized data
*/
long serializedsize
/**
* the fields of the struct.
*/
lazybinaryobject fields
/**
* whether a field is initialized or not.
*/
boolean fieldinited
/**
* whether a field is null or not. because length is 0 does not means the
* field is null. in particular, a 0-length string is not null.
*/
boolean fieldisnull
/**
* the start positions and lengths of struct fields. only valid when the data
* is parsed.
*/
int fieldstart
int fieldlength
/**
* construct a lazybinarystruct object with an objectinspector.
*/
protected lazybinarystruct lazybinarystructobjectinspector oi
super oi
@override
public void init bytearrayref bytes  int start  int length
super init bytes  start  length
parsed   false
serializedsize   length
recordinfo recordinfo   new lazybinaryutils recordinfo
boolean missingfieldwarned   false
boolean extrafieldwarned   false
/**
* parse the byte[] and fill fieldstart, fieldlength, fieldinited and
* fieldisnull.
*/
private void parse
list<? extends structfield> fieldrefs     structobjectinspector  oi
getallstructfieldrefs
if  fields    null
fields   new lazybinaryobject
for  int i   0  i < fields length  i
objectinspector insp   fieldrefs get i  getfieldobjectinspector
fields   insp    null ? null   lazybinaryfactory createlazybinaryobject insp
fieldinited   new boolean
fieldisnull   new boolean
fieldstart   new int
fieldlength   new int
/**
* please note that one null byte is followed by eight fields, then more
* null byte and fields.
*/
int fieldid   0
int structbyteend   start   length
byte bytes   this bytes getdata
byte nullbyte   bytes
int lastfieldbyteend   start   1
// go through all bytes in the byte[]
for  int i   0  i < fields length  i
fieldisnull   true
if   nullbyte    1 <<  i % 8       0
fieldisnull   false
lazybinaryutils checkobjectbyteinfo fieldrefs get i
getfieldobjectinspector    bytes  lastfieldbyteend  recordinfo
fieldstart   lastfieldbyteend   recordinfo elementoffset
fieldlength   recordinfo elementsize
lastfieldbyteend   fieldstart   fieldlength
// count how many fields are there
if  lastfieldbyteend <  structbyteend
fieldid
// next byte is a null byte if there are more bytes to go
if  7     i % 8
if  lastfieldbyteend < structbyteend
nullbyte   bytes
lastfieldbyteend
else
// otherwise all null afterwards
nullbyte   0
lastfieldbyteend
// extra bytes at the end?
if   extrafieldwarned    lastfieldbyteend < structbyteend
extrafieldwarned   true
log warn
// missing fields?
if   missingfieldwarned    lastfieldbyteend > structbyteend
missingfieldwarned   true
log info     fields length
fieldid
arrays fill fieldinited  false
parsed   true
/**
* get one field out of the struct.
*
* if the field is a primitive field, return the actual object. otherwise
* return the lazyobject. this is because primitiveobjectinspector does not
* have control over the object used by the user - the user simply directly
* use the object instead of going through object
* primitiveobjectinspector.get(object).
*
* @param fieldid
*          the field id
* @return the field as a lazyobject
*/
public object getfield int fieldid
if   parsed
parse
return uncheckedgetfield fieldid
/**
* get the field out of the row without checking parsed. this is called by
* both getfield and getfieldsaslist.
*
* @param fieldid
*          the id of the field starting from 0.
* @return the value of the field
*/
private object uncheckedgetfield int fieldid
// test the length first so in most cases we avoid doing a byte[]
// comparison.
if  fieldisnull
return null
if   fieldinited
fieldinited   true
fields init bytes  fieldstart  fieldlength
return fields getobject
arraylist<object> cachedlist
/**
* get the values of the fields as an arraylist.
*
* @return the values of the fields as an arraylist.
*/
public arraylist<object> getfieldsaslist
if   parsed
parse
if  cachedlist    null
cachedlist   new arraylist<object>
else
cachedlist clear
for  int i   0  i < fields length  i
cachedlist add uncheckedgetfield i
return cachedlist
@override
public object getobject
return this
public long getrawdataserializedsize
return serializedsize