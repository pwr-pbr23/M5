/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql parse
import static org apache hadoop hive ql parse hiveparser tok_ifexists
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop hive conf hiveconf
import org apache hadoop hive conf hiveconf confvars
import org apache hadoop hive ql exec functionregistry
import org apache hadoop hive ql exec taskfactory
import org apache hadoop hive ql plan createfunctiondesc
import org apache hadoop hive ql plan dropfunctiondesc
import org apache hadoop hive ql plan functionwork
/**
* functionsemanticanalyzer.
*
*/
public class functionsemanticanalyzer extends basesemanticanalyzer
private static final log log   logfactory
getlog functionsemanticanalyzer class
public functionsemanticanalyzer hiveconf conf  throws semanticexception
super conf
@override
public void analyzeinternal astnode ast  throws semanticexception
if  ast gettoken   gettype      hiveparser tok_createfunction
analyzecreatefunction ast
if  ast gettoken   gettype      hiveparser tok_dropfunction
analyzedropfunction ast
log info
private void analyzecreatefunction astnode ast  throws semanticexception
string functionname   ast getchild 0  gettext
string classname   unescapesqlstring ast getchild 1  gettext
createfunctiondesc desc   new createfunctiondesc functionname  classname
roottasks add taskfactory get new functionwork desc   conf
private void analyzedropfunction astnode ast  throws semanticexception
string functionname   ast getchild 0  gettext
boolean ifexists    ast getfirstchildwithtype tok_ifexists     null
// we want to signal an error if the function doesn't exist and we're
// configured not to ignore this
boolean throwexception
ifexists     hiveconf getboolvar conf  confvars dropignoresnonexistent
if  throwexception    functionregistry getfunctioninfo functionname     null
throw new semanticexception errormsg invalid_function getmsg functionname
dropfunctiondesc desc   new dropfunctiondesc functionname
roottasks add taskfactory get new functionwork desc   conf