/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql exec
import java lang reflect method
import java util arraylist
import java util arrays
import java util list
import org apache hadoop hive serde2 typeinfo typeinfo
import org apache hadoop hive serde2 typeinfo typeinfofactory
import org apache hadoop hive serde2 typeinfo typeinfoutils
/**
* the class implements the method resolution for operators like (> < <= >= =
* <>). the resolution logic is as follows: 1. if one of the parameters is null,
* then it resolves to evaluate(double, double) 2. if both of the parameters are
* of type t, then it resolves to evaluate(t, t) 3. if 1 and 2 fails then it
* resolves to evaluate(double, double).
*/
public class comparisonopmethodresolver implements udfmethodresolver
/**
* the udfclass for which resolution is needed.
*/
private final class<? extends udf> udfclass
/**
* constuctor.
*/
public comparisonopmethodresolver class<? extends udf> udfclass
this udfclass   udfclass
/*
* (non-javadoc)
*
* @see
* org.apache.hadoop.hive.ql.exec.udfmethodresolver#getevalmethod(java.util
* .list)
*/
@override
public method getevalmethod list<typeinfo> argtypeinfos  throws udfargumentexception
assert  argtypeinfos size      2
list<typeinfo> ptypeinfos   null
if  argtypeinfos get 0  equals typeinfofactory voidtypeinfo
argtypeinfos get 1  equals typeinfofactory voidtypeinfo
ptypeinfos   new arraylist<typeinfo>
ptypeinfos add typeinfofactory doubletypeinfo
ptypeinfos add typeinfofactory doubletypeinfo
else if  argtypeinfos get 0  equals typeinfofactory booleantypeinfo
argtypeinfos get 1  equals typeinfofactory booleantypeinfo
ptypeinfos   new arraylist<typeinfo>
ptypeinfos add typeinfofactory inttypeinfo
ptypeinfos add typeinfofactory inttypeinfo
else if  argtypeinfos get 0     argtypeinfos get 1
ptypeinfos   argtypeinfos
else
ptypeinfos   new arraylist<typeinfo>
ptypeinfos add typeinfofactory doubletypeinfo
ptypeinfos add typeinfofactory doubletypeinfo
method udfmethod   null
list<method> evaluatemethods   new arraylist<method>
for  method m   arrays aslist udfclass getmethods
if  m getname   equals
evaluatemethods add m
list<typeinfo> acceptedtypeinfos   typeinfoutils getparametertypeinfos
m  ptypeinfos size
if  acceptedtypeinfos    null
// null means the method does not accept number of arguments passed.
continue
boolean match    acceptedtypeinfos size      ptypeinfos size
for  int i   0  i < ptypeinfos size      match  i
typeinfo accepted   acceptedtypeinfos get i
if  accepted    ptypeinfos get i
match   false
if  match
if  udfmethod    null
throw new ambiguousmethodexception udfclass  argtypeinfos
arrays aslist new method udfmethod  m
else
udfmethod   m
if  udfmethod    null
throw new nomatchingmethodexception udfclass  argtypeinfos  evaluatemethods
return udfmethod