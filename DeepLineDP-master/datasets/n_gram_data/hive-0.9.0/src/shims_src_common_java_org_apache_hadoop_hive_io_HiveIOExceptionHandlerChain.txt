/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive io
import java io ioexception
import java util arraylist
import java util list
import org apache hadoop mapred inputformat
import org apache hadoop mapred jobconf
import org apache hadoop mapred recordreader
import org apache hadoop util reflectionutils
/**
* an exception handler chain that process the input exception by going through
* all exceptions defined in this chain one by one until either one exception
* handler returns true or it reaches the end of the chain. if it reaches the
* end of the chain, and still no exception handler returns true, throw the
* exception to the caller.
*/
public class hiveioexceptionhandlerchain
public static string hive_io_exception_handle_chain
@suppresswarnings
public static hiveioexceptionhandlerchain gethiveioexceptionhandlerchain
jobconf conf
hiveioexceptionhandlerchain chain   new hiveioexceptionhandlerchain
string exceptionhandlerstr   conf get hive_io_exception_handle_chain
list<hiveioexceptionhandler> handlerchain   new arraylist<hiveioexceptionhandler>
if  exceptionhandlerstr    null     exceptionhandlerstr trim   equals
string handlerarr   exceptionhandlerstr split
if  handlerarr    null    handlerarr length > 0
for  string handlerstr   handlerarr
if   handlerstr trim   equals
try
class<? extends hiveioexceptionhandler> handlercls
class<? extends hiveioexceptionhandler>  class forname handlerstr
hiveioexceptionhandler handler   reflectionutils newinstance handlercls  null
handlerchain add handler
catch  exception e
chain sethandlerchain handlerchain
return chain
private list<hiveioexceptionhandler> handlerchain
/**
* @return the exception handler chain defined
*/
protected list<hiveioexceptionhandler> gethandlerchain
return handlerchain
/**
* set the exception handler chain
* @param handlerchain
*/
protected void sethandlerchain list<hiveioexceptionhandler> handlerchain
this handlerchain   handlerchain
public recordreader<? ?>  handlerecordreadercreationexception exception e  throws ioexception
recordreader<?  ?> ret   null
if  handlerchain    null    handlerchain size   > 0
for  hiveioexceptionhandler handler   handlerchain
ret   handler handlerecordreadercreationexception e
if  ret    null
return ret
//re-throw the exception as an ioexception
throw new ioexception e
/**
* this is to handle exception when doing next operations. here we use a
* hiveioexceptionnexthandleresult to store the results of each handler. if
* the exception is handled by one handler, the handler should set
* hiveioexceptionnexthandleresult to be handled, and also set the handle
* result. the handle result is used to return the reader's next to determine
* if need to open a new file for read or not.
*/
public boolean handlerecordreadernextexception exception e
throws ioexception
hiveioexceptionnexthandleresult result   new hiveioexceptionnexthandleresult
if  handlerchain    null    handlerchain size   > 0
for  hiveioexceptionhandler handler   handlerchain
handler handlerecorreadernextexception e  result
if  result gethandled
return result gethandleresult
//re-throw the exception as an ioexception
throw new ioexception e