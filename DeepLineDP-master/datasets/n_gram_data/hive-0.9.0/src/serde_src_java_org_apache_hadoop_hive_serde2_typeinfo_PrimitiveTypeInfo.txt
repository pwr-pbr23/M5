/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive serde2 typeinfo
import java io serializable
import org apache hadoop hive serde2 objectinspector objectinspector category
import org apache hadoop hive serde2 objectinspector primitiveobjectinspector primitivecategory
import org apache hadoop hive serde2 objectinspector primitive primitiveobjectinspectorutils
/**
* there are limited number of primitive types. all primitive types are defined
* by typeinfofactory.isprimitiveclass().
*
* always use the typeinfofactory to create new typeinfo objects, instead of
* directly creating an instance of this class.
*/
public final class primitivetypeinfo extends typeinfo implements serializable
private static final long serialversionuid   1l
private string typename
/**
* for java serialization use only.
*/
public primitivetypeinfo
/**
* for typeinfofactory use only.
*/
primitivetypeinfo string typename
this typename   typename
/**
* returns the category of this typeinfo.
*/
@override
public category getcategory
return category primitive
public primitivecategory getprimitivecategory
return primitiveobjectinspectorutils gettypeentryfromtypename typename  primitivecategory
public class<?> getprimitivewritableclass
return primitiveobjectinspectorutils gettypeentryfromtypename typename  primitivewritableclass
public class<?> getprimitivejavaclass
return primitiveobjectinspectorutils gettypeentryfromtypename typename  primitivejavaclass
// the following 2 methods are for java serialization use only.
public void settypename string typename
this typename   typename
@override
public string gettypename
return typename
/**
* compare if 2 typeinfos are the same. we use typeinfofactory to cache
* typeinfos, so we only need to compare the object pointer.
*/
@override
public boolean equals object other
return this    other
/**
* generate the hashcode for this typeinfo.
*/
@override
public int hashcode
return typename hashcode