/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql exec
/**
* base class for all user-defined aggregation function (udaf) classes.
*
* udaf classes are required to inherit from this class.
*
* required for a udaf class: 1. implement the init() method, which reset the
* status of the aggregation function. 2. implement a single method called
* "aggregate" that returns boolean. the method should always return "true" on
* valid inputs, or the framework will throw an exception. following are some
* examples: public boolean aggregate(double a); public boolean aggregate(int
* b); public boolean aggregate(double c, double d); 3. implement a single
* method called "evaluate" that returns the final aggregation result.
* "evaluate" should never return "null" or an exception will be thrown.
* following are some examples. public int evaluate(); public long evaluate();
* public double evaluate(); public double evaluate(); public string evaluate();
*
* optional for a udaf class (by implementing these 2 methods, the user declares
* that the udaf support partial aggregations): 1. implement a single method
* called "evaluatepartial" that returns the partial aggregation result.
* "evaluatepartial" should never return "null" or an exception will be thrown.
* 2. implement a single method called "aggregatepartial" that takes a partial
* aggregation result and returns a boolean. the method should always return
* "true" on valid inputs, or the framework will throw an exception.
*
* following are some examples: public int evaluatepartial(); public boolean
* aggregatepartial(int partial);
*
* public string evaluatepartial(); public boolean aggregatepartial(string
* partial);
*
*/
public class udaf
/**
* the resolver used for method resolution.
*/
udafevaluatorresolver rslv
/**
* the default constructor.
*/
public udaf
rslv   new defaultudafevaluatorresolver this getclass
/**
* the constructor with a particular type of resolver.
*/
public udaf udafevaluatorresolver rslv
this rslv   rslv
/**
* sets the resolver.
*
* @param rslv
*          the method resolver to use for method resolution.
*/
public void setresolver udafevaluatorresolver rslv
this rslv   rslv
/**
* gets the resolver.
*/
public udafevaluatorresolver getresolver
return rslv