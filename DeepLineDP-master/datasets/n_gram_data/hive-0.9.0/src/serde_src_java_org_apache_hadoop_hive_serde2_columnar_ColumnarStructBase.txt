/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive serde2 columnar
import java io ioexception
import java util arraylist
import java util list
import org apache hadoop hive serde2 serdestatsstruct
import org apache hadoop hive serde2 lazy bytearrayref
import org apache hadoop hive serde2 lazy lazyobjectbase
import org apache hadoop hive serde2 objectinspector objectinspector
import org apache hadoop hive serde2 objectinspector structfield
import org apache hadoop hive serde2 objectinspector structobjectinspector
public abstract class columnarstructbase implements serdestatsstruct
class fieldinfo
lazyobjectbase field
/*
* use an array instead of only one object in case in future hive does not do
* the byte copy.
*/
bytearrayref cachedbytearrayref
bytesrefwritable rawbytesfield
boolean inited
boolean fieldskipped
objectinspector objectinspector
public fieldinfo lazyobjectbase lazyobject  boolean fieldskipped  objectinspector oi
field   lazyobject
cachedbytearrayref   new bytearrayref
objectinspector   oi
if  fieldskipped
this fieldskipped   true
inited   true
else
inited   false
/*
* ============================ [perf] ===================================
* this function is called for every row. setting up the selected/projected
* columns at the first call, and don't do that for the following calls.
* ideally this should be done in the constructor where we don't need to
* branch in the function for each row.
* =========================================================================
*/
public void init bytesrefwritable col
if  col    null
rawbytesfield   col
inited   false
else
// select columns that actually do not exist in the file.
fieldskipped   true
/**
* return the uncompressed size of this field
*/
public long getserializedsize
if  rawbytesfield    null
return 0
return rawbytesfield getlength
/**
* get the field out of the row without checking parsed. this is called by
* both getfield and getfieldsaslist.
*
* @return the value of the field
*/
protected object uncheckedgetfield
if  fieldskipped
return null
if   inited
try
cachedbytearrayref setdata rawbytesfield getdata
catch  ioexception e
throw new runtimeexception e
inited   true
int bytelength   getlength objectinspector  cachedbytearrayref  rawbytesfield getstart
rawbytesfield getlength
if  bytelength     1
return null
field init cachedbytearrayref  rawbytesfield getstart    bytelength
return field getobject
else
if  getlength objectinspector  cachedbytearrayref  rawbytesfield getstart
rawbytesfield getlength        1
return null
return field getobject
protected int prjcolids   null
private fieldinfo fieldinfolist   null
private arraylist<object> cachedlist
public columnarstructbase objectinspector oi
arraylist<integer> notskippedcolumnids
list<? extends structfield> fieldrefs     structobjectinspector  oi
getallstructfieldrefs
int num   fieldrefs size
fieldinfolist   new fieldinfo
// if no columns is set to be skipped, add all columns in
// 'notskippedcolumnids'
if  notskippedcolumnids    null    notskippedcolumnids size      0
for  int i   0  i < num  i
notskippedcolumnids add i
for  int i   0  i < num  i
objectinspector foi   fieldrefs get i  getfieldobjectinspector
fieldinfolist   new fieldinfo
createlazyobjectbase foi
notskippedcolumnids contains i
foi
// maintain a list of non-null column ids
int min   notskippedcolumnids size   > num ? num   notskippedcolumnids
size
prjcolids   new int
for  int i   0  index   0  i < notskippedcolumnids size      i
int readcol   notskippedcolumnids get i  intvalue
if  readcol < num
prjcolids   readcol
index
/**
* get one field out of the struct.
*
* if the field is a primitive field, return the actual object. otherwise
* return the lazyobject. this is because primitiveobjectinspector does not
* have control over the object used by the user - the user simply directly
* use the object instead of going through object
* primitiveobjectinspector.get(object).
*
* note: separator and nullsequence has to be the same each time this method
* is called. these two parameters are used only once to parse each record.
*
* @param fieldid
*          the field id
* @return the field as a lazyobject
*/
public object getfield int fieldid
return fieldinfolist uncheckedgetfield
/**
* check if the object is null and return the length of the stream
*
* @param objectinspector
* @param cachedbytearrayref
*          the bytes of the object
* @param start
*          the start offset
* @param length
*          the length
*
* @return -1 for null, >=0 for length
*/
protected abstract int getlength objectinspector objectinspector
bytearrayref cachedbytearrayref  int start  int length
/**
* create the lazy object for this field
*
* @param objectinspector
*          the object inspector for the field
* @return the lazy object for the field
*/
protected abstract lazyobjectbase createlazyobjectbase objectinspector objectinspector
public void init bytesrefarraywritable cols
for  int i   0  i < prjcolids length    i
int fieldindex   prjcolids
if  fieldindex < cols size
fieldinfolist init cols uncheckedget fieldindex
else
// select columns that actually do not exist in the file.
fieldinfolist init null
/**
* get the values of the fields as an arraylist.
*
* @return the values of the fields as an arraylist.
*/
public arraylist<object> getfieldsaslist
if  cachedlist    null
cachedlist   new arraylist<object>
else
cachedlist clear
for  int i   0  i < fieldinfolist length  i
cachedlist add fieldinfolist uncheckedgetfield
return cachedlist
public long getrawdataserializedsize
long serializedsize   0
for  int i   0  i < fieldinfolist length    i
serializedsize    fieldinfolist getserializedsize
return serializedsize