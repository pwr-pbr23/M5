/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql udf generic
import java util list
import java util arraylist
import java util hashmap
import java util map
import java util collections
import java util iterator
import java util comparator
import org apache hadoop hive serde2 io doublewritable
import org apache hadoop io text
import org apache hadoop hive ql metadata hiveexception
import org apache commons logging log
import org apache commons logging logfactory
/**
* a generic, re-usable n-gram estimation class that supports partial aggregations.
* the algorithm is based on the heuristic from the following paper:
* yael ben-haim and elad tom-tov, "a streaming parallel decision tree algorithm",
* j. machine learning research 11 (2010), pp. 849--872.
*
* in particular, it is guaranteed that frequencies will be under-counted. with large
* data and a reasonable precision factor, this undercounting appears to be on the order
* of 5%.
*/
public class ngramestimator
/* class private variables */
private int k
private int pf
private int n
private hashmap<arraylist<string>  double> ngrams
/**
* creates a new n-gram estimator object. the 'n' for n-grams is computed dynamically
* when data is fed to the object.
*/
public ngramestimator
k    0
pf   0
n    0
ngrams   new hashmap<arraylist<string>  double>
/**
* returns true if the 'k' and 'pf' parameters have been set.
*/
public boolean isinitialized
return  k    0
/**
* sets the 'k' and 'pf' parameters.
*/
public void initialize int pk  int ppf  int pn  throws hiveexception
assert pk > 0    ppf > 0    pn > 0
k   pk
pf   ppf
n   pn
// enforce a minimum precision factor
if k   pf < 1000
pf   1000   k
/**
* resets an n-gram estimator object to its initial state.
*/
public void reset
ngrams clear
n   pf   k   0
/**
* returns the final top-k n-grams in a format suitable for returning to hive.
*/
public arraylist<object> getngrams   throws hiveexception
trim true
if ngrams size   < 1       sql standard   return null for zero elements
return null
// sort the n-gram list by frequencies in descending order
arraylist<object> result   new arraylist<object>
arraylist<map entry<arraylist<string>  double>> list   new arraylist ngrams entryset
collections sort list  new comparator<map entry<arraylist<string>  double>>
public int compare map entry<arraylist<string>  double> o1
map entry<arraylist<string>  double> o2
return o2 getvalue   compareto o1 getvalue
// convert the n-gram list to a format suitable for hive
for int i   0  i < list size    i
arraylist<string> key   list get i  getkey
double val   list get i  getvalue
object curgram   new object
arraylist<text> ng   new arraylist<text>
for int j   0  j < key size    j
ng add new text key get j
curgram   ng
curgram   new doublewritable val doublevalue
result add curgram
return result
/**
* returns the number of n-grams in our buffer.
*/
public int size
return ngrams size
/**
* adds a new n-gram to the estimation.
*
* @param ng the n-gram to add to the estimation
*/
public void add arraylist<string> ng  throws hiveexception
assert ng    null    ng size   > 0    ng get 0     null
double curfreq   ngrams get ng
if curfreq    null
// new n-gram
curfreq   new double 1 0
else
// existing n-gram, just increment count
curfreq
ngrams put ng  curfreq
// set 'n' if we haven't done so before
if n    0
n   ng size
else
if n    ng size
throw new hiveexception getclass   getsimplename
n
ng size
// trim down the total number of n-grams if we've exceeded the maximum amount of memory allowed
//
// note: although 'k'*'pf' specifies the size of the estimation buffer, we don't want to keep
//       performing n.log(n) trim operations each time the maximum hashmap size is exceeded.
//       to handle this, we *actually* maintain an estimation buffer of size 2*'k'*'pf', and
//       trim down to 'k'*'pf' whenever the hashmap size exceeds 2*'k'*'pf'. this really has
//       a significant effect when 'k'*'pf' is very high.
if ngrams size   > k   pf   2
trim false
/**
* trims an n-gram estimation down to either 'pf' * 'k' n-grams, or 'k' n-grams if
* finaltrim is true.
*/
private void trim boolean finaltrim  throws hiveexception
arraylist<map entry<arraylist<string> double>> list   new arraylist ngrams entryset
collections sort list  new comparator<map entry<arraylist<string> double>>
public int compare map entry<arraylist<string> double> o1
map entry<arraylist<string> double> o2
return o1 getvalue   compareto o2 getvalue
for int i   0  i < list size      finaltrim ? k   pf k   i
ngrams remove  list get i  getkey
/**
* takes a serialized n-gram estimator object created by the serialize() method and merges
* it with the current n-gram object.
*
* @param other a serialized n-gram object created by the serialize() method
*/
public void merge list<text> other  throws hiveexception
if other    null
return
// get estimation parameters
int otherk   integer parseint other get 0  tostring
int othern   integer parseint other get 1  tostring
int otherpf   integer parseint other get 2  tostring
if k > 0    k    otherk
throw new hiveexception getclass   getsimplename
k
otherk
if n > 0    othern    n
throw new hiveexception getclass   getsimplename
n
othern
if pf > 0    otherpf    pf
throw new hiveexception getclass   getsimplename
pf
otherpf
k   otherk
pf   otherpf
n   othern
// merge the other estimation into the current one
for int i   3  i < other size    i
arraylist<string> key   new arraylist<string>
for int j   0  j < n  j
text word   other get i j
key add word tostring
i    n
double val   double parsedouble  other get i  tostring
double myval   ngrams get key
if myval    null
myval   new double val
else
myval    val
ngrams put key  myval
trim false
/**
* in preparation for a hive merge() call, serializes the current n-gram estimator object into an
* arraylist of text objects. this list is deserialized and merged by the
* merge method.
*
* @return an arraylist of hadoop text objects that represents the current
* n-gram estimation.
* @see #merge
*/
public arraylist<text> serialize   throws hiveexception
arraylist<text> result   new arraylist<text>
result add new text integer tostring k
result add new text integer tostring n
result add new text integer tostring pf
for iterator<arraylist<string> > it   ngrams keyset   iterator    it hasnext
arraylist<string> mykey   it next
assert mykey size   > 0
for int i   0  i < mykey size    i
result add new text mykey get i
double myval   ngrams get mykey
result add new text myval tostring
return result