/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive contrib fileformat base64
import java io ioexception
import java io unsupportedencodingexception
import java util properties
import org apache commons codec binary base64
import org apache hadoop fs path
import org apache hadoop hive ql exec filesinkoperator recordwriter
import org apache hadoop hive ql io hiveignorekeytextoutputformat
import org apache hadoop io byteswritable
import org apache hadoop io text
import org apache hadoop io writable
import org apache hadoop io writablecomparable
import org apache hadoop mapred jobconf
import org apache hadoop mapred jobconfigurable
import org apache hadoop util progressable
/**
* fileoutputformat for base64 encoded text files.
*
* each line is a base64-encoded record. the key is a longwritable which is the
* offset. the value is a byteswritable containing the base64-decoded bytes.
*
* this class accepts a configurable parameter:
* "base64.text.output.format.signature"
*
* the utf-8 encoded signature will be prepended to each byteswritable before we
* do base64 encoding.
*/
public class base64textoutputformat<k extends writablecomparable  v extends writable>
extends hiveignorekeytextoutputformat<k  v>
/**
* base64recordwriter.
*
*/
public static class base64recordwriter implements recordwriter
jobconfigurable
recordwriter writer
byteswritable byteswritable
public base64recordwriter recordwriter writer
this writer   writer
byteswritable   new byteswritable
@override
public void write writable w  throws ioexception
// get input data
byte input
int inputlength
if  w instanceof text
input     text  w  getbytes
inputlength     text  w  getlength
else
assert  w instanceof byteswritable
input     byteswritable  w  getbytes
inputlength     byteswritable  w  getlength
// add signature
byte wrapped   new byte
for  int i   0  i < signature length  i
wrapped   signature
for  int i   0  i < inputlength  i
wrapped   input
// encode
byte output   base64 encode wrapped
byteswritable set output  0  output length
writer write byteswritable
@override
public void close boolean abort  throws ioexception
writer close abort
private byte signature
private final base64 base64   base64textinputformat createbase64
@override
public void configure jobconf job
try
string signaturestring   job get
if  signaturestring    null
signature   signaturestring getbytes
else
signature   new byte
catch  unsupportedencodingexception e
e printstacktrace
@override
public recordwriter gethiverecordwriter jobconf jc  path finaloutpath
class<? extends writable> valueclass  boolean iscompressed
properties tableproperties  progressable progress  throws ioexception
base64recordwriter writer   new base64recordwriter super
gethiverecordwriter jc  finaloutpath  byteswritable class
iscompressed  tableproperties  progress
writer configure jc
return writer