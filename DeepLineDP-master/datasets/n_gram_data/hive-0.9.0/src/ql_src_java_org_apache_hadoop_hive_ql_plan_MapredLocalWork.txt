/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql plan
import java io file
import java io serializable
import java util arraylist
import java util iterator
import java util linkedhashmap
import java util list
import java util map entry
import org apache hadoop fs path
import org apache hadoop hive ql exec bucketmatcher
import org apache hadoop hive ql exec operator
/**
* mapredlocalwork.
*
*/
@explain displayname
public class mapredlocalwork implements serializable
private static final long serialversionuid   1l
private linkedhashmap<string  operator<? extends serializable>> aliastowork
private linkedhashmap<string  fetchwork> aliastofetchwork
private boolean inputfilechangesensitive
private bucketmapjoincontext bucketmapjoincontext
private string tmpfileuri
private string stageid
private list<operator<? extends serializable>> dummyparentop
public mapredlocalwork
public mapredlocalwork
final linkedhashmap<string  operator<? extends serializable>> aliastowork
final linkedhashmap<string  fetchwork> aliastofetchwork
this aliastowork   aliastowork
this aliastofetchwork   aliastofetchwork
public mapredlocalwork mapredlocalwork clone
this tmpfileuri   clone tmpfileuri
this inputfilechangesensitive clone inputfilechangesensitive
public void setdummyparentop list<operator<? extends serializable>> op
this dummyparentop op
public list<operator<? extends serializable>> getdummyparentop
return this dummyparentop
@explain displayname
public linkedhashmap<string  operator<? extends serializable>> getaliastowork
return aliastowork
public string getstageid
return stageid
public void setstageid string stageid
this stageid   stageid
public void setaliastowork
final linkedhashmap<string  operator<? extends serializable>> aliastowork
this aliastowork   aliastowork
/**
* @return the aliastofetchwork
*/
@explain displayname
public linkedhashmap<string  fetchwork> getaliastofetchwork
return aliastofetchwork
/**
* @param aliastofetchwork
*          the aliastofetchwork to set
*/
public void setaliastofetchwork
final linkedhashmap<string  fetchwork> aliastofetchwork
this aliastofetchwork   aliastofetchwork
public boolean getinputfilechangesensitive
return inputfilechangesensitive
public void setinputfilechangesensitive boolean inputfilechangesensitive
this inputfilechangesensitive   inputfilechangesensitive
public void deriveexplainattributes
if  bucketmapjoincontext    null
bucketmapjoincontext derivebucketmapjoinmapping
for  fetchwork fetchwork   aliastofetchwork values
if  fetchwork gettbldesc      null
continue
planutils configureinputjobpropertiesforstoragehandler
fetchwork gettbldesc
@explain displayname      normalexplain   false
public bucketmapjoincontext getbucketmapjoincontext
return bucketmapjoincontext
public void setbucketmapjoincontext bucketmapjoincontext bucketmapjoincontext
this bucketmapjoincontext   bucketmapjoincontext
public void settmpfileuri string tmpfileuri
this tmpfileuri   tmpfileuri
public string gettmpfileuri
return tmpfileuri
public static class bucketmapjoincontext implements serializable
private static final long serialversionuid   1l
// used for bucket map join
private linkedhashmap<string  linkedhashmap<string  arraylist<string>>> aliasbucketfilenamemapping
private string mapjoinbigtablealias
private class<? extends bucketmatcher> bucketmatcherclass
private linkedhashmap<string  linkedhashmap<string  arraylist<string>>> aliasbucketbasefilenamemapping
private linkedhashmap<string  integer> bucketfilenamemapping
public void setmapjoinbigtablealias string bigtablealias
this mapjoinbigtablealias   bigtablealias
public void derivebucketmapjoinmapping
if  aliasbucketfilenamemapping    null
iterator<entry<string  linkedhashmap<string  arraylist<string>>>> iter
aliasbucketfilenamemapping entryset   iterator
aliasbucketbasefilenamemapping   new linkedhashmap<string  linkedhashmap<string  arraylist<string>>>
while  iter hasnext
entry<string  linkedhashmap<string  arraylist<string>>> old   iter next
linkedhashmap<string  arraylist<string>> newbucketbasefilenamemapping   new linkedhashmap<string  arraylist<string>>
iterator<entry<string  arraylist<string>>> oldaliasfilenamemappingiter   old getvalue   entryset   iterator
while  oldaliasfilenamemappingiter hasnext
//for a give table and its bucket full file path list, only keep the base file name (remove file path etc).
//and put the new list into the new mapping.
entry<string  arraylist<string>> oldtablebucketfilenames    oldaliasfilenamemappingiter next
arraylist<string> oldtablebucketnames   oldtablebucketfilenames getvalue
arraylist<string> newtablebucketfilebasename   new arraylist<string>  oldtablebucketnames size
//for each bucket file, only keep its base files and store into a new list.
if  oldtablebucketnames    null
for  string bucketfname   oldtablebucketnames
newtablebucketfilebasename add getbasefilename bucketfname
string bigtblbucketfilename   getbasefilename oldtablebucketfilenames getkey
if newbucketbasefilenamemapping containskey bigtblbucketfilename
string fullpath   oldtablebucketfilenames getkey
string dir   getbasefilename fullpath substring 0  fullpath lastindexof bigtblbucketfilename
bigtblbucketfilename   dir   file separator   bigtblbucketfilename
//put the new mapping
newbucketbasefilenamemapping put bigtblbucketfilename  newtablebucketfilebasename
string tablealias   old getkey
aliasbucketbasefilenamemapping put tablealias  newbucketbasefilenamemapping
private string getbasefilename  string path
try
return   new path path   getname
catch  exception ex
// this could be due to either uri syntax error or file constructor
// illegal arg; we don't really care which one it is.
return path
public string getmapjoinbigtablealias
return mapjoinbigtablealias
public class<? extends bucketmatcher> getbucketmatcherclass
return bucketmatcherclass
public void setbucketmatcherclass
class<? extends bucketmatcher> bucketmatcherclass
this bucketmatcherclass   bucketmatcherclass
@explain displayname      normalexplain   false
public linkedhashmap<string  linkedhashmap<string  arraylist<string>>> getaliasbucketfilenamemapping
return aliasbucketfilenamemapping
public void setaliasbucketfilenamemapping
linkedhashmap<string  linkedhashmap<string  arraylist<string>>> aliasbucketfilenamemapping
this aliasbucketfilenamemapping   aliasbucketfilenamemapping
@override
public string tostring
if  aliasbucketfilenamemapping    null
return     aliasbucketfilenamemapping tostring
else
return
@explain displayname      normalexplain   false
public linkedhashmap<string  linkedhashmap<string  arraylist<string>>> getaliasbucketbasefilenamemapping
return aliasbucketbasefilenamemapping
public void setaliasbucketbasefilenamemapping
linkedhashmap<string  linkedhashmap<string  arraylist<string>>> aliasbucketbasefilenamemapping
this aliasbucketbasefilenamemapping   aliasbucketbasefilenamemapping
@explain displayname      normalexplain   false
public linkedhashmap<string  integer> getbucketfilenamemapping
return bucketfilenamemapping
public void setbucketfilenamemapping linkedhashmap<string  integer> bucketfilenamemapping
this bucketfilenamemapping   bucketfilenamemapping