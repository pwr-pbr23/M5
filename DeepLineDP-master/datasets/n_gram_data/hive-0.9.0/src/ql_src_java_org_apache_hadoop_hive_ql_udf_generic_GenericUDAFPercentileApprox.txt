/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql udf generic
import java util arraylist
import java util list
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop hive ql exec description
import org apache hadoop hive ql exec udfargumenttypeexception
import org apache hadoop hive ql metadata hiveexception
import org apache hadoop hive ql parse semanticexception
import org apache hadoop hive serde2 io doublewritable
import org apache hadoop hive serde2 objectinspector constantobjectinspector
import org apache hadoop hive serde2 objectinspector listobjectinspector
import org apache hadoop hive serde2 objectinspector objectinspector
import org apache hadoop hive serde2 objectinspector objectinspectorfactory
import org apache hadoop hive serde2 objectinspector objectinspectorutils
import org apache hadoop hive serde2 objectinspector primitiveobjectinspector
import org apache hadoop hive serde2 objectinspector standardmapobjectinspector
import org apache hadoop hive serde2 objectinspector standardlistobjectinspector
import org apache hadoop hive serde2 objectinspector structobjectinspector
import org apache hadoop hive serde2 objectinspector structfield
import org apache hadoop hive serde2 objectinspector primitive doubleobjectinspector
import org apache hadoop hive serde2 objectinspector primitive writabledoubleobjectinspector
import org apache hadoop hive serde2 objectinspector primitive primitiveobjectinspectorfactory
import org apache hadoop hive serde2 objectinspector primitive primitiveobjectinspectorutils
import org apache hadoop util stringutils
/**
* computes an approximate percentile (quantile) from an approximate histogram, for very
* large numbers of rows where the regular percentile() udaf might run out of memory.
*
* the input is a single double value or an array of double values representing the quantiles
* requested. the output, corresponding to the input, is either an single double value or an
* array of doubles that are the quantile values.
*/
@description name
value
extended
public class genericudafpercentileapprox extends abstractgenericudafresolver
static final log log   logfactory getlog genericudafpercentileapprox class getname
@override
public genericudafevaluator getevaluator genericudafparameterinfo info  throws semanticexception
objectinspector parameters   info getparameterobjectinspectors
if  parameters length    2    parameters length    3
throw new udfargumenttypeexception parameters length   1
// validate the first parameter, which is the expression to compute over. this should be a
// numeric primitive type.
if  parameters getcategory      objectinspector category primitive
throw new udfargumenttypeexception 0
parameters gettypename
switch    primitiveobjectinspector  parameters  getprimitivecategory
case byte
case short
case int
case long
case float
case double
case timestamp
break
default
throw new udfargumenttypeexception 0
parameters gettypename
// validate the second parameter, which is either a solitary double or an array of doubles.
boolean wantmanyquantiles   false
switch parameters getcategory
case primitive
// only a single double was passed as parameter 2, a single quantile is being requested
switch   primitiveobjectinspector  parameters  getprimitivecategory
case float
case double
break
default
throw new udfargumenttypeexception 1
parameters gettypename
break
case list
// an array was passed as parameter 2, make sure it's an array of primitives
if   listobjectinspector  parameters  getlistelementobjectinspector   getcategory
objectinspector category primitive
throw new udfargumenttypeexception 1
parameters gettypename
// now make sure it's an array of doubles or floats. we don't allow integer types here
// because percentile (really, quantile) values should generally be strictly between 0 and 1.
switch   primitiveobjectinspector   listobjectinspector  parameters  getlistelementobjectinspector
getprimitivecategory
case float
case double
break
default
throw new udfargumenttypeexception 1
parameters gettypename
wantmanyquantiles   true
break
default
throw new udfargumenttypeexception 1
parameters gettypename
// also make sure it is a constant.
if   objectinspectorutils isconstantobjectinspector parameters
throw new udfargumenttypeexception 1
parameters gettypename
// if a third parameter has been specified, it should be an integer that specifies the number
// of histogram bins to use in the percentile approximation.
if parameters length    3
if parameters getcategory      objectinspector category primitive
throw new udfargumenttypeexception 2
parameters gettypename
switch   primitiveobjectinspector  parameters  getprimitivecategory
case byte
case short
case int
case long
case timestamp
break
default
throw new udfargumenttypeexception 2
parameters gettypename
// also make sure it is a constant.
if   objectinspectorutils isconstantobjectinspector parameters
throw new udfargumenttypeexception 2
parameters gettypename
// return an evaluator depending on the return type
if wantmanyquantiles
return new genericudafmultiplepercentileapproxevaluator
else
return new genericudafsinglepercentileapproxevaluator
public static class genericudafsinglepercentileapproxevaluator extends
genericudafpercentileapproxevaluator
@override
public objectinspector init mode m  objectinspector parameters  throws hiveexception
super init m  parameters
// init input object inspectors
if  m    mode partial1    m    mode complete
inputoi    primitiveobjectinspector  parameters
quantiles   getquantilearray  constantobjectinspector parameters
if parameters length > 2
nbins   primitiveobjectinspectorutils getint
constantobjectinspector  parameters  getwritableconstantvalue
primitiveobjectinspector parameters
else
loi    standardlistobjectinspector  parameters
// init output object inspectors.
//
// the return type for a partial aggregation is still a list of doubles, as in
// genericudafhistogramnumeric, but we add on the percentile values requested to the
// end, and handle serializing/deserializing before we pass things on to the parent
// method.
// the return type for final and complete is a full aggregation result, which is a
// single double value
if  m    mode partial1    m    mode partial2
return objectinspectorfactory getstandardlistobjectinspector
primitiveobjectinspectorfactory writabledoubleobjectinspector
else
return primitiveobjectinspectorfactory writabledoubleobjectinspector
@override
public object terminate aggregationbuffer agg  throws hiveexception
percentileaggbuf myagg    percentileaggbuf  agg
if  myagg histogram getusedbins   < 1       sql standard   return null for zero elements
return null
else
assert myagg quantiles    null
return new doublewritable myagg histogram quantile myagg quantiles
public static class genericudafmultiplepercentileapproxevaluator extends
genericudafpercentileapproxevaluator
@override
public objectinspector init mode m  objectinspector parameters  throws hiveexception
super init m  parameters
// init input object inspectors
if  m    mode partial1    m    mode complete
inputoi    primitiveobjectinspector  parameters
quantiles   getquantilearray  constantobjectinspector parameters
if parameters length > 2
nbins   primitiveobjectinspectorutils getint
constantobjectinspector  parameters  getwritableconstantvalue
primitiveobjectinspector parameters
else
loi    standardlistobjectinspector  parameters
// init output object inspectors.
//
// the return type for a partial aggregation is still a list of doubles, as in
// genericudafhistogramnumeric, but we add on the percentile values requested to the
// end, and handle serializing/deserializing before we pass things on to the parent
// method.
// the return type for final and complete is a full aggregation result, which is also
// a list of doubles
return objectinspectorfactory getstandardlistobjectinspector
primitiveobjectinspectorfactory writabledoubleobjectinspector
@override
public object terminate aggregationbuffer agg  throws hiveexception
percentileaggbuf myagg    percentileaggbuf  agg
if  myagg histogram getusedbins   < 1       sql standard   return null for zero elements
return null
else
arraylist<doublewritable> result   new arraylist<doublewritable>
assert myagg quantiles    null
for int i   0  i < myagg quantiles length  i
result add new doublewritable myagg histogram quantile myagg quantiles
return result
/**
* construct a histogram using the algorithm described by ben-haim and tom-tov, and then
* use it to compute an approximate percentile value.
*/
public abstract static class genericudafpercentileapproxevaluator extends genericudafevaluator
// for partial1 and complete: objectinspectors for original data
protected primitiveobjectinspector inputoi
protected double quantiles
protected integer nbins   10000
// for partial2 and final: objectinspectors for partial aggregations (list of doubles)
protected standardlistobjectinspector loi
@override
public void merge aggregationbuffer agg  object partial  throws hiveexception
if partial    null
return
percentileaggbuf myagg    percentileaggbuf  agg
list<doublewritable> partialhistogram    list<doublewritable>  loi getlist partial
// remove requested quantiles from the head of the list
int nquantiles    int  partialhistogram get 0  get
if nquantiles > 0
myagg quantiles   new double
for int i   1  i <  nquantiles  i
myagg quantiles   partialhistogram get i  get
partialhistogram sublist 0  nquantiles 1  clear
// merge histograms
myagg histogram merge partialhistogram
@override
public object terminatepartial aggregationbuffer agg  throws hiveexception
percentileaggbuf myagg    percentileaggbuf  agg
arraylist<doublewritable> result   new arraylist<doublewritable>
if myagg quantiles    null
result add new doublewritable myagg quantiles length
for int i   0  i < myagg quantiles length  i
result add new doublewritable myagg quantiles
else
result add new doublewritable 0
result addall myagg histogram serialize
return result
@override
public void iterate aggregationbuffer agg  object parameters  throws hiveexception
assert  parameters length    2    parameters length    3
if parameters    null    parameters    null
return
percentileaggbuf myagg    percentileaggbuf  agg
// get and process the current datum
double v   primitiveobjectinspectorutils getdouble parameters  inputoi
myagg histogram add v
// aggregation buffer methods. we wrap genericudafhistogramnumeric's aggregation buffer
// inside our own, so that we can also store requested quantile values between calls
static class percentileaggbuf implements aggregationbuffer
numerichistogram histogram       histogram used for quantile approximation
double quantiles               the quantiles requested
@override
public aggregationbuffer getnewaggregationbuffer   throws hiveexception
percentileaggbuf result   new percentileaggbuf
result histogram   new numerichistogram
reset result
return result
protected double getquantilearray constantobjectinspector quantileoi
throws hiveexception
double result   null
object quantileobj   quantileoi getwritableconstantvalue
if  quantileoi instanceof listobjectinspector
objectinspector elemoi
listobjectinspector quantileoi  getlistelementobjectinspector
result   new double
assert result length >  1
for  int ii   0  ii < result length    ii
result   primitiveobjectinspectorutils getdouble
list<?> quantileobj  get ii
primitiveobjectinspector elemoi
else
result   new double
result   primitiveobjectinspectorutils getdouble
quantileobj
primitiveobjectinspector quantileoi
for int ii   0  ii < result length    ii
if  result <  0    result >  1
throw new hiveexception
getclass   getsimplename
result
return result
@override
public void reset aggregationbuffer agg  throws hiveexception
percentileaggbuf result    percentileaggbuf  agg
result histogram reset
result quantiles   null
result histogram allocate nbins
result quantiles   quantiles