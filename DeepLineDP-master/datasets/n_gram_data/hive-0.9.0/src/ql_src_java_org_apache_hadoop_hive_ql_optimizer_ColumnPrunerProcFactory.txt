/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql optimizer
import java io serializable
import java util arraylist
import java util collections
import java util hashmap
import java util iterator
import java util list
import java util map
import java util set
import java util stack
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop hive ql exec columninfo
import org apache hadoop hive ql exec commonjoinoperator
import org apache hadoop hive ql exec filesinkoperator
import org apache hadoop hive ql exec filteroperator
import org apache hadoop hive ql exec groupbyoperator
import org apache hadoop hive ql exec joinoperator
import org apache hadoop hive ql exec lateralviewjoinoperator
import org apache hadoop hive ql exec limitoperator
import org apache hadoop hive ql exec mapjoinoperator
import org apache hadoop hive ql exec operator
import org apache hadoop hive ql exec reducesinkoperator
import org apache hadoop hive ql exec rowschema
import org apache hadoop hive ql exec scriptoperator
import org apache hadoop hive ql exec selectoperator
import org apache hadoop hive ql exec tablescanoperator
import org apache hadoop hive ql exec udtfoperator
import org apache hadoop hive ql exec unionoperator
import org apache hadoop hive ql exec utilities
import org apache hadoop hive ql lib node
import org apache hadoop hive ql lib nodeprocessor
import org apache hadoop hive ql lib nodeprocessorctx
import org apache hadoop hive ql metadata virtualcolumn
import org apache hadoop hive ql parse opparsecontext
import org apache hadoop hive ql parse rowresolver
import org apache hadoop hive ql parse semanticexception
import org apache hadoop hive ql plan aggregationdesc
import org apache hadoop hive ql plan exprnodedesc
import org apache hadoop hive ql plan groupbydesc
import org apache hadoop hive ql plan joindesc
import org apache hadoop hive ql plan mapjoindesc
import org apache hadoop hive ql plan planutils
import org apache hadoop hive ql plan reducesinkdesc
import org apache hadoop hive ql plan selectdesc
import org apache hadoop hive ql plan tabledesc
import org apache hadoop hive ql plan tablescandesc
/**
* factory for generating the different node processors used by columnpruner.
*/
public final class columnprunerprocfactory
protected static final log log   logfactory getlog columnprunerprocfactory class getname
private columnprunerprocfactory
// prevent instantiation
/**
* node processor for column pruning on filter operators.
*/
public static class columnprunerfilterproc implements nodeprocessor
public object process node nd  stack<node> stack  nodeprocessorctx ctx
object    nodeoutputs  throws semanticexception
filteroperator op    filteroperator  nd
columnprunerprocctx cppctx    columnprunerprocctx  ctx
exprnodedesc condn   op getconf   getpredicate
// get list of columns used in the filter
list<string> cl   condn getcols
// merge it with the downstream col list
cppctx getprunedcollists   put op
utilities mergeuniqelems cppctx gencollists op   cl
pruneoperator cppctx  op  cppctx getprunedcollists   get op
return null
/**
* factory method to get the columnprunerfilterproc class.
*
* @return columnprunerfilterproc
*/
public static columnprunerfilterproc getfilterproc
return new columnprunerfilterproc
/**
* node processor for column pruning on group by operators.
*/
public static class columnprunergroupbyproc implements nodeprocessor
public object process node nd  stack<node> stack  nodeprocessorctx ctx
object    nodeoutputs  throws semanticexception
groupbyoperator op    groupbyoperator  nd
columnprunerprocctx cppctx    columnprunerprocctx  ctx
list<string> collists   new arraylist<string>
groupbydesc conf   op getconf
arraylist<exprnodedesc> keys   conf getkeys
for  exprnodedesc key   keys
collists   utilities mergeuniqelems collists  key getcols
arraylist<aggregationdesc> aggrs   conf getaggregators
for  aggregationdesc aggr   aggrs
arraylist<exprnodedesc> params   aggr getparameters
for  exprnodedesc param   params
collists   utilities mergeuniqelems collists  param getcols
cppctx getprunedcollists   put op  collists
return null
/**
* factory method to get the columnprunergroupbyproc class.
*
* @return columnprunergroupbyproc
*/
public static columnprunergroupbyproc getgroupbyproc
return new columnprunergroupbyproc
/**
* the default node processor for column pruning.
*/
public static class columnprunerdefaultproc implements nodeprocessor
public object process node nd  stack<node> stack  nodeprocessorctx ctx
object    nodeoutputs  throws semanticexception
columnprunerprocctx cppctx    columnprunerprocctx  ctx
cppctx getprunedcollists   put  operator<? extends serializable>  nd
cppctx gencollists  operator<? extends serializable>  nd
return null
/**
* factory method to get the columnprunerdefaultproc class.
*
* @return columnprunerdefaultproc
*/
public static columnprunerdefaultproc getdefaultproc
return new columnprunerdefaultproc
/**
* the node processor for column pruning on table scan operators. it will
* store needed columns in tablescandesc.
*/
public static class columnprunertablescanproc implements nodeprocessor
public object process node nd  stack<node> stack  nodeprocessorctx ctx
object    nodeoutputs  throws semanticexception
tablescanoperator scanop    tablescanoperator  nd
columnprunerprocctx cppctx    columnprunerprocctx  ctx
list<string> cols   cppctx
gencollists  operator<? extends serializable>  nd
cppctx getprunedcollists   put  operator<? extends serializable>  nd
cols
arraylist<integer> needed_columns   new arraylist<integer>
rowresolver inputrr   cppctx getoptoparsectxmap   get scanop  getrowresolver
tablescandesc desc   scanop getconf
list<virtualcolumn> virtualcols   desc getvirtualcols
list<virtualcolumn> newvirtualcols   new arraylist<virtualcolumn>
// add virtual columns for analyze table
if scanop getconf   isgatherstats
cols add virtualcolumn rawdatasize getname
for  int i   0  i < cols size    i
string tabcol   inputrr reverselookup cols get i
if tabcol    null
continue
columninfo colinfo   inputrr get tabcol  tabcol
if  colinfo getisvirtualcol
// part is also a virtual column, but part col should not in this
// list.
for  int j   0  j < virtualcols size    j
virtualcolumn vc   virtualcols get j
if  vc getname   equals colinfo getinternalname
newvirtualcols add vc
//no need to pass virtual columns to reader.
continue
int position   inputrr getposition cols get i
if  position > 0
needed_columns add position
desc setvirtualcols newvirtualcols
scanop setneededcolumnids needed_columns
return null
/**
* factory method to get the columnprunerdefaultproc class.
*
* @return columnprunertablescanproc
*/
public static columnprunertablescanproc gettablescanproc
return new columnprunertablescanproc
/**
* the node processor for column pruning on reduce sink operators.
*/
public static class columnprunerreducesinkproc implements nodeprocessor
public object process node nd  stack<node> stack  nodeprocessorctx ctx
object    nodeoutputs  throws semanticexception
reducesinkoperator op    reducesinkoperator  nd
columnprunerprocctx cppctx    columnprunerprocctx  ctx
hashmap<operator<? extends serializable>  opparsecontext> optoparsectxmap   cppctx
getoptoparsectxmap
rowresolver redsinkrr   optoparsectxmap get op  getrowresolver
reducesinkdesc conf   op getconf
list<operator<? extends serializable>> childoperators   op
getchildoperators
list<operator<? extends serializable>> parentoperators   op
getparentoperators
list<string> collists   new arraylist<string>
arraylist<exprnodedesc> keys   conf getkeycols
for  exprnodedesc key   keys
collists   utilities mergeuniqelems collists  key getcols
if   childoperators size      1
childoperators get 0  instanceof joinoperator
assert parentoperators size      1
operator<? extends serializable> par   parentoperators get 0
joinoperator childjoin    joinoperator  childoperators get 0
rowresolver parrr   optoparsectxmap get par  getrowresolver
list<string> childjoincols   cppctx getjoinprunedcollists   get
childjoin  get  byte  conf gettag
boolean flags   new boolean
for  int i   0  i < flags length  i
flags   false
if  childjoincols    null    childjoincols size   > 0
map<string  exprnodedesc> exprmap   op getcolumnexprmap
for  string childcol   childjoincols
exprnodedesc desc   exprmap get childcol
int index   conf getvaluecols   indexof desc
flags   true
string nm   redsinkrr reverselookup childcol
if  nm    null
columninfo cinfo   parrr get nm  nm
if   collists contains cinfo getinternalname
collists add cinfo getinternalname
collections sort collists
prunereducesinkoperator flags  op  cppctx
else
// reduce sink contains the columns needed - no need to aggregate from
// children
arraylist<exprnodedesc> vals   conf getvaluecols
for  exprnodedesc val   vals
collists   utilities mergeuniqelems collists  val getcols
cppctx getprunedcollists   put op  collists
return null
/**
* the factory method to get columnprunerreducesinkproc class.
*
* @return columnprunerreducesinkproc
*/
public static columnprunerreducesinkproc getreducesinkproc
return new columnprunerreducesinkproc
/**
* the node processor for column pruning on lateral view join operators.
*/
public static class columnprunerlateralviewjoinproc implements nodeprocessor
public object process node nd  stack<node> stack  nodeprocessorctx ctx
object    nodeoutputs  throws semanticexception
lateralviewjoinoperator op    lateralviewjoinoperator  nd
columnprunerprocctx cppctx    columnprunerprocctx  ctx
list<string> cols   new arraylist<string>
cols   cppctx gencollists op
map<string  exprnodedesc> colexprmap   op getcolumnexprmap
// as columns go down the dag, the lvj will transform internal column
// names from something like 'key' to '_col0'. because of this, we need
// to undo this transformation using the column expression map as the
// column names propagate up the dag.
list<string> colsafterreplacement   new arraylist<string>
for  string col   cols
if  colexprmap containskey col
exprnodedesc expr   colexprmap get col
colsafterreplacement addall expr getcols
else
colsafterreplacement add col
cppctx getprunedcollists   put op
colsafterreplacement
return null
/**
* the node processor for column pruning on select operators.
*/
public static class columnprunerselectproc implements nodeprocessor
public object process node nd  stack<node> stack  nodeprocessorctx ctx
object    nodeoutputs  throws semanticexception
selectoperator op    selectoperator  nd
columnprunerprocctx cppctx    columnprunerprocctx  ctx
list<string> cols   new arraylist<string>
if  op getchildoperators      null
for  operator<? extends serializable> child   op getchildoperators
// if one of my children is a filesink or script, return all columns.
// without this break, a bug in reducesink to extract edge column
// pruning will manifest
// which should be fixed before remove this
if   child instanceof filesinkoperator
child instanceof scriptoperator
child instanceof udtfoperator
child instanceof limitoperator
child instanceof unionoperator
cppctx getprunedcollists
put op  cppctx getcolsfromselectexpr op
return null
cols   cppctx gencollists op
selectdesc conf   op getconf
// the input to the select does not matter. go over the expressions
// and return the ones which have a marked column
cppctx getprunedcollists   put op
cppctx getselectcolsfromchildren op  cols
if  conf isselstarnocompute
return null
// do we need to prune the select operator?
list<exprnodedesc> originalcollist   op getconf   getcollist
list<string> columns   new arraylist<string>
for  exprnodedesc expr   originalcollist
utilities mergeuniqelems columns  expr getcols
// by now, 'prunedcols' are columns used by child operators, and 'columns'
// are columns used by this select operator.
arraylist<string> originaloutputcolumnnames   conf getoutputcolumnnames
if  cols size   < originaloutputcolumnnames size
arraylist<exprnodedesc> newcollist   new arraylist<exprnodedesc>
arraylist<string> newoutputcolumnnames   new arraylist<string>
arraylist<columninfo> rs_oldsignature   op getschema   getsignature
arraylist<columninfo> rs_newsignature   new arraylist<columninfo>
rowresolver old_rr   cppctx getoptoparsectxmap   get op  getrowresolver
rowresolver new_rr   new rowresolver
for  string col   cols
int index   originaloutputcolumnnames indexof col
newoutputcolumnnames add col
newcollist add originalcollist get index
rs_newsignature add rs_oldsignature get index
string tabcol   old_rr reverselookup col
columninfo columninfo   old_rr get tabcol  tabcol
new_rr put tabcol  tabcol  columninfo
cppctx getoptoparsectxmap   get op  setrowresolver new_rr
op getschema   setsignature rs_newsignature
conf setcollist newcollist
conf setoutputcolumnnames newoutputcolumnnames
handlechildren op  cols  cppctx
return null
/**
* since we pruned the select operator, we should let its children operator
* know that. reducesinkoperator may send out every output columns of its
* parent select. when the select operator is pruned, its child reduce
* sink(direct child) operator should also be pruned.
*
* @param op
* @param retainedseloutputcols
* @throws semanticexception
*/
private void handlechildren selectoperator op
list<string> retainedseloutputcols  columnprunerprocctx cppctx  throws semanticexception
for  operator<? extends serializable> child   op getchildoperators
if  child instanceof reducesinkoperator
boolean flags   getprunereducesinkopretainflags
retainedseloutputcols   reducesinkoperator  child
prunereducesinkoperator flags   reducesinkoperator  child  cppctx
else if  child instanceof filteroperator
// filter operator has the same output columns as its parent
for  operator<? extends serializable> filterchild   child
getchildoperators
if  filterchild instanceof reducesinkoperator
boolean flags   getprunereducesinkopretainflags
retainedseloutputcols   reducesinkoperator  filterchild
prunereducesinkoperator flags   reducesinkoperator  filterchild
cppctx
private static boolean getprunereducesinkopretainflags
list<string> retainedparentopoutputcols  reducesinkoperator reduce
reducesinkdesc reduceconf   reduce getconf
java util arraylist<exprnodedesc> originalvalueeval   reduceconf
getvaluecols
boolean flags   new boolean
for  int i   0  i < originalvalueeval size    i
flags   false
list<string> current   originalvalueeval get i  getcols
if  current    null    current size      0
flags   true
else
for  int j   0  j < current size    j
if  retainedparentopoutputcols contains current get j
flags   true
break
return flags
private static void prunereducesinkoperator boolean retainflags
reducesinkoperator reduce  columnprunerprocctx cppctx  throws semanticexception
reducesinkdesc reduceconf   reduce getconf
map<string  exprnodedesc> oldmap   reduce getcolumnexprmap
map<string  exprnodedesc> newmap   new hashmap<string  exprnodedesc>
arraylist<columninfo> sig   new arraylist<columninfo>
rowresolver oldrr   cppctx getoptoparsectxmap   get reduce  getrowresolver
rowresolver newrr   new rowresolver
arraylist<string> originalvalueoutputcolnames   reduceconf
getoutputvaluecolumnnames
java util arraylist<exprnodedesc> originalvalueeval   reduceconf
getvaluecols
arraylist<string> newoutputcolnames   new arraylist<string>
java util arraylist<exprnodedesc> newvalueeval   new arraylist<exprnodedesc>
for  int i   0  i < retainflags length  i
if  retainflags
newvalueeval add originalvalueeval get i
string outputcol   originalvalueoutputcolnames get i
newoutputcolnames add outputcol
string nm   oldrr reverselookup outputcol
if  nm    null
outputcol   utilities reducefield value tostring         outputcol
nm   oldrr reverselookup outputcol
newmap put outputcol  oldmap get outputcol
columninfo colinfo   oldrr get nm  nm
newrr put nm  nm  colinfo
sig add colinfo
arraylist<exprnodedesc> keycols   reduceconf getkeycols
list<string> keys   new arraylist<string>
rowresolver parresover   cppctx getoptoparsectxmap   get
reduce getparentoperators   get 0   getrowresolver
for  int i   0  i < keycols size    i
keys   utilities mergeuniqelems keys  keycols get i  getcols
for  int i   0  i < keys size    i
string outputcol   keys get i
string nm   parresover reverselookup outputcol
columninfo colinfo   oldrr get nm  nm
if  colinfo    null
string internalname colinfo getinternalname
newmap put internalname  oldmap get internalname
newrr put nm  nm  colinfo
cppctx getoptoparsectxmap   get reduce  setrowresolver newrr
reduce setcolumnexprmap newmap
reduce getschema   setsignature sig
reduceconf setoutputvaluecolumnnames newoutputcolnames
reduceconf setvaluecols newvalueeval
tabledesc newvaluetable   planutils getreducevaluetabledesc planutils
getfieldschemasfromcolumnlist reduceconf getvaluecols
newoutputcolnames  0
reduceconf setvalueserializeinfo newvaluetable
/**
* the factory method to get the columnprunerselectproc class.
*
* @return columnprunerselectproc
*/
public static columnprunerselectproc getselectproc
return new columnprunerselectproc
public static columnprunerlateralviewjoinproc getlateralviewjoinproc
return new columnprunerlateralviewjoinproc
/**
* the node processor for column pruning on join operators.
*/
public static class columnprunerjoinproc implements nodeprocessor
public object process node nd  stack<node> stack  nodeprocessorctx ctx
object    nodeoutputs  throws semanticexception
joinoperator op    joinoperator  nd
prunejoinoperator ctx  op  op getconf    op getcolumnexprmap    null
false
return null
/**
* the factory method to get columnjoinproc class.
*
* @return columnprunerjoinproc
*/
public static columnprunerjoinproc getjoinproc
return new columnprunerjoinproc
/**
* the node processor for column pruning on map join operators.
*/
public static class columnprunermapjoinproc implements nodeprocessor
public object process node nd  stack<node> stack  nodeprocessorctx ctx
object    nodeoutputs  throws semanticexception
mapjoinoperator op    mapjoinoperator  nd
prunejoinoperator ctx  op  op getconf    op getcolumnexprmap    op
getconf   getretainlist    true
return null
private static void pruneoperator nodeprocessorctx ctx
operator<? extends serializable> op
list<string> cols
throws semanticexception
// the pruning needs to preserve the order of columns in the input schema
rowschema inputschema   op getschema
if  inputschema    null
arraylist<columninfo> rs   new arraylist<columninfo>
arraylist<columninfo> inputcols   inputschema getsignature
for  columninfo i  inputcols
if  cols contains i getinternalname
rs add i
op getschema   setsignature rs
private static void prunejoinoperator nodeprocessorctx ctx
commonjoinoperator op  joindesc conf
map<string  exprnodedesc> columnexprmap
map<byte  list<integer>> retainmap  boolean mapjoin  throws semanticexception
columnprunerprocctx cppctx    columnprunerprocctx  ctx
map<byte  list<string>> prunedcollists   new hashmap<byte  list<string>>
list<operator<? extends serializable>> childoperators   op
getchildoperators
for  operator<? extends serializable> child   childoperators
if  child instanceof filesinkoperator
return
list<string> childcollists   cppctx gencollists op
//add the columns in join filters
set<map entry<byte  list<exprnodedesc>>> filters
conf getfilters   entryset
iterator<map entry<byte  list<exprnodedesc>>> iter   filters iterator
while  iter hasnext
map entry<byte  list<exprnodedesc>> entry   iter next
byte tag   entry getkey
for  exprnodedesc desc   entry getvalue
list<string> cols   prunedcollists get tag
cols   utilities mergeuniqelems cols  desc getcols
prunedcollists put tag  cols
rowresolver joinrr   cppctx getoptoparsectxmap   get op  getrowresolver
rowresolver newjoinrr   new rowresolver
arraylist<string> outputcols   new arraylist<string>
arraylist<columninfo> rs   new arraylist<columninfo>
map<string  exprnodedesc> newcolexprmap   new hashmap<string  exprnodedesc>
for  int i   0  i < conf getoutputcolumnnames   size    i
string internalname   conf getoutputcolumnnames   get i
exprnodedesc desc   columnexprmap get internalname
byte tag   conf getreversedexprs   get internalname
if   childcollists contains internalname
int index   conf getexprs   get tag  indexof desc
if  index < 0
continue
conf getexprs   get tag  remove desc
if  retainmap    null
retainmap get tag  remove index
else
list<string> prunedrslist   prunedcollists get tag
if  prunedrslist    null
prunedrslist   new arraylist<string>
prunedcollists put tag  prunedrslist
prunedrslist   utilities mergeuniqelems prunedrslist  desc getcols
outputcols add internalname
newcolexprmap put internalname  desc
if  mapjoin
// regenerate the valuetabledesc
list<tabledesc> valuetabledescs   new arraylist<tabledesc>
for  int pos   0  pos < op getparentoperators   size    pos
list<exprnodedesc> valuecols   conf getexprs
get byte valueof  byte  pos
stringbuilder keyorder   new stringbuilder
for  int i   0  i < valuecols size    i
keyorder append
tabledesc valuetabledesc   planutils getmapjoinvaluetabledesc planutils
getfieldschemasfromcolumnlist valuecols
valuetabledescs add valuetabledesc
mapjoindesc  conf  setvaluetbldescs valuetabledescs
set<map entry<byte  list<exprnodedesc>>> exprs     mapjoindesc  conf
getkeys   entryset
iterator<map entry<byte  list<exprnodedesc>>> iters   exprs iterator
while  iters hasnext
map entry<byte  list<exprnodedesc>> entry   iters next
list<exprnodedesc> lists   entry getvalue
for  int j   0  j < lists size    j
exprnodedesc desc   lists get j
byte tag   entry getkey
list<string> cols   prunedcollists get tag
cols   utilities mergeuniqelems cols  desc getcols
prunedcollists put tag  cols
for  operator<? extends serializable> child   childoperators
if  child instanceof reducesinkoperator
boolean flags   getprunereducesinkopretainflags childcollists
reducesinkoperator  child
prunereducesinkoperator flags   reducesinkoperator  child  cppctx
for  int i   0  i < outputcols size    i
string internalname   outputcols get i
string nm   joinrr reverselookup internalname
columninfo col   joinrr get nm  nm
newjoinrr put nm  nm  col
rs add col
op setcolumnexprmap newcolexprmap
conf setoutputcolumnnames outputcols
op getschema   setsignature rs
cppctx getoptoparsectxmap   get op  setrowresolver newjoinrr
cppctx getjoinprunedcollists   put op  prunedcollists
/**
* the factory method to get columnmapjoinproc class.
*
* @return columnprunermapjoinproc
*/
public static columnprunermapjoinproc getmapjoinproc
return new columnprunermapjoinproc