/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive jdbc
import java io ioexception
import java net url
import java sql connection
import java sql driver
import java sql driverpropertyinfo
import java sql sqlexception
import java util properties
import java util jar attributes
import java util jar manifest
import java util regex pattern
/**
* hivedriver.
*
*/
public class hivedriver implements driver
static
try
java sql drivermanager registerdriver new hivedriver
catch  sqlexception e
// todo auto-generated catch block
e printstacktrace
/**
* is this driver jdbc compliant?
*/
private static final boolean jdbc_compliant   false
/**
* the required prefix for the connection url.
*/
private static final string url_prefix
/**
* if host is provided, without a port.
*/
private static final string default_port
/**
* property key for the database name.
*/
private static final string dbname_property_key
/**
* property key for the hive server host.
*/
private static final string host_property_key
/**
* property key for the hive server port.
*/
private static final string port_property_key
/**
*
*/
public hivedriver
// todo auto-generated constructor stub
securitymanager security   system getsecuritymanager
if  security    null
security checkwrite
/**
* checks whether a given url is in a valid format.
*
* the current uri format is: jdbc:hive://[host[:port]]
*
* jdbc:hive:// - run in embedded mode jdbc:hive://localhost - connect to
* localhost default port (10000) jdbc:hive://localhost:5050 - connect to
* localhost port 5050
*
* todo: - write a better regex. - decide on uri format
*/
public boolean acceptsurl string url  throws sqlexception
return pattern matches url_prefix      url
public connection connect string url  properties info  throws sqlexception
return new hiveconnection url  info
/**
* package scoped access to the driver's major version
* @return the major version number of the driver. -1 if it cannot be determined from the
* manifest.mf file.
*/
static int getmajordriverversion
int version    1
try
string fullversion   hivedriver fetchmanifestattribute
attributes name implementation_version
string tokens   fullversion split       $non nls 1$
if tokens    null    tokens length > 0    tokens    null
version   integer parseint tokens
catch  exception e
// possible reasons to end up here:
// - unable to read version from manifest.mf
// - version string is not in the proper x.x.xxx format
version    1
return version
/**
* package scoped access to the driver's minor version
* @return the minor version number of the driver. -1 if it cannot be determined from the
* manifest.mf file.
*/
static int getminordriverversion
int version    1
try
string fullversion   hivedriver fetchmanifestattribute
attributes name implementation_version
string tokens   fullversion split       $non nls 1$
if tokens    null    tokens length > 1    tokens    null
version   integer parseint tokens
catch  exception e
// possible reasons to end up here:
// - unable to read version from manifest.mf
// - version string is not in the proper x.x.xxx format
version    1
return version
/**
* returns the major version of this driver.
*/
public int getmajorversion
return hivedriver getmajordriverversion
/**
* returns the minor version of this driver.
*/
public int getminorversion
return hivedriver getminordriverversion
public driverpropertyinfo getpropertyinfo string url  properties info  throws sqlexception
if  info    null
info   new properties
if   url    null     url startswith url_prefix
info   parseurl url  info
driverpropertyinfo hostprop   new driverpropertyinfo host_property_key
info getproperty host_property_key
hostprop required   false
hostprop description
driverpropertyinfo portprop   new driverpropertyinfo port_property_key
info getproperty port_property_key
portprop required   false
portprop description
driverpropertyinfo dbprop   new driverpropertyinfo dbname_property_key
info getproperty dbname_property_key
dbprop required   false
dbprop description
driverpropertyinfo dpi   new driverpropertyinfo
dpi   hostprop
dpi   portprop
dpi   dbprop
return dpi
/**
* returns whether the driver is jdbc compliant.
*/
public boolean jdbccompliant
return jdbc_compliant
/**
* takes a url in the form of jdbc:hive://[hostname]:[port]/[db_name] and
* parses it. everything after jdbc:hive// is optional.
*
* @param url
* @param defaults
* @return
* @throws java.sql.sqlexception
*/
private properties parseurl string url  properties defaults  throws sqlexception
properties urlprops    defaults    null  ? new properties defaults
new properties
if  url    null     url startswith url_prefix
throw new sqlexception     url
if  url length   <  url_prefix length
return urlprops
// [hostname]:[port]/[db_name]
string connectioninfo   url substring url_prefix length
// [hostname]:[port] [db_name]
string hostportanddatabase   connectioninfo split    2
// [hostname]:[port]
if  hostportanddatabase length   > 0
string hostandport   hostportanddatabase split    2
urlprops put host_property_key  hostandport
if  hostandport length > 1
urlprops put port_property_key  hostandport
else
urlprops put port_property_key  default_port
// [db_name]
if  hostportanddatabase length > 1
urlprops put dbname_property_key  hostportanddatabase
return urlprops
/**
* lazy-load manifest attributes as needed.
*/
private static attributes manifestattributes   null
/**
* loads the manifest attributes from the jar.
*
* @throws java.net.malformedurlexception
* @throws ioexception
*/
private static synchronized void loadmanifestattributes   throws ioexception
if  manifestattributes    null
return
class<?> clazz   hivedriver class
string classcontainer   clazz getprotectiondomain   getcodesource
getlocation   tostring
url manifesturl   new url     classcontainer
manifest manifest   new manifest manifesturl openstream
manifestattributes   manifest getmainattributes
/**
* package scoped to allow manifest fetching from other hivedriver classes
* helper to initialize attributes and return one.
*
* @param attributename
* @return
* @throws sqlexception
*/
static string fetchmanifestattribute attributes name attributename
throws sqlexception
try
loadmanifestattributes
catch  ioexception e
throw new sqlexception    e
return manifestattributes getvalue attributename