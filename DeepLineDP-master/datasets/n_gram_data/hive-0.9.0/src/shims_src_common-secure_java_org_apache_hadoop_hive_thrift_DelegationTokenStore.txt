/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive thrift
import java io closeable
import java util list
import org apache hadoop conf configurable
import org apache hadoop security token delegation abstractdelegationtokensecretmanager delegationtokeninformation
/**
* interface for pluggable token store that can be implemented with shared external
* storage for load balancing and high availability (for example using zookeeper).
* internal, store specific errors are translated into {@link tokenstoreexception}.
*/
public interface delegationtokenstore extends configurable  closeable
/**
* exception for internal token store errors that typically cannot be handled by the caller.
*/
public static class tokenstoreexception extends runtimeexception
private static final long serialversionuid    8693819817623074083l
public tokenstoreexception throwable cause
super cause
public tokenstoreexception string message  throwable cause
super message  cause
/**
* add new master key. the token store assigns and returns the sequence number.
* caller needs to use the identifier to update the key (since it is embedded in the key).
*
* @param s
* @return sequence number for new key
*/
int addmasterkey string s  throws tokenstoreexception
/**
* update master key (for expiration and setting store assigned sequence within key)
* @param keyseq
* @param s
* @throws tokenstoreexception
*/
void updatemasterkey int keyseq  string s  throws tokenstoreexception
/**
* remove key for given id.
* @param keyseq
* @return false if key no longer present, true otherwise.
*/
boolean removemasterkey int keyseq
/**
* return all master keys.
* @return
* @throws tokenstoreexception
*/
string getmasterkeys   throws tokenstoreexception
/**
* add token. if identifier is already present, token won't be added.
* @param tokenidentifier
* @param token
* @return true if token was added, false for existing identifier
*/
boolean addtoken delegationtokenidentifier tokenidentifier
delegationtokeninformation token  throws tokenstoreexception
/**
* get token. returns null if the token does not exist.
* @param tokenidentifier
* @return
*/
delegationtokeninformation gettoken delegationtokenidentifier tokenidentifier
throws tokenstoreexception
/**
* remove token. return value can be used by caller to detect concurrency.
* @param tokenidentifier
* @return true if token was removed, false if it was already removed.
* @throws tokenstoreexception
*/
boolean removetoken delegationtokenidentifier tokenidentifier  throws tokenstoreexception
/**
* list of all token identifiers in the store. this is used to remove expired tokens
* and a potential scalability improvement would be to partition by master key id
* @return
*/
list<delegationtokenidentifier> getalldelegationtokenidentifiers