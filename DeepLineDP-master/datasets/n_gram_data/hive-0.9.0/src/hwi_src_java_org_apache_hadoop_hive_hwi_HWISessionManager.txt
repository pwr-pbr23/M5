/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive hwi
import java util arraylist
import java util collection
import java util set
import java util treemap
import java util treeset
import org apache commons logging log
import org apache commons logging logfactory
/**
* hivesessionmanager is a runnable started inside a web application context.
* it's basic function is to hold a collection of sessionitem(s). it also works
* as a facade, as jsp clients can not create a hive session directly. hive
* sessions are long lived, unlike a traditional query and block system clients
* set up the query to be started with an instance of this class.
*
*/
public class hwisessionmanager implements runnable
protected static final log l4j   logfactory getlog hwisessionmanager class
getname
private boolean goon
private treemap<hwiauth  set<hwisessionitem>> items
protected hwisessionmanager
goon   true
items   new treemap<hwiauth  set<hwisessionitem>>
/**
* this method scans the sessionitem collection. if a sessionitem is in the
* query_set state that signals that its thread should be started. if the
* sessionitem is in the destroy state it should be cleaned up and removed
* from the collection. currently we are using a sleep. a wait/notify could be
* implemented. queries will run for a long time, a one second wait on start
* will not be noticed.
*
*/
public void run
l4j debug
while  goon
l4j debug
synchronized  items
for  hwiauth a   items keyset
for  hwisessionitem i   items get a
if  i getstatus      hwisessionitem websessionitemstatus destroy
items get a  remove i
if  i getstatus      hwisessionitem websessionitemstatus kill_query
l4j debug     i getsessionname
i killit
l4j debug     i getsessionname
items get a  remove i
end sync
try
thread sleep 100
catch  interruptedexception ex
l4j error    ex
end while
l4j debug
// cleanup used here to stop all threads
synchronized  items
for  hwiauth a   items keyset
for  hwisessionitem i   items get a
try
if  i getstatus      hwisessionitem websessionitemstatus query_running
l4j debug i getsessionname
i runnable join 1000
l4j debug i getsessionname
catch  interruptedexception ex
l4j error i getsessionname        ex
end run
protected boolean isgoon
return goon
protected void setgoon boolean goon
this goon   goon
protected treemap<hwiauth  set<hwisessionitem>> getitems
return items
protected void setitems treemap<hwiauth  set<hwisessionitem>> items
this items   items
// client methods called from jsp
/**
* rather then return the actual items we return a list copies. this enforces
* our hwisessionmanager by preventing the ability of the client(jsp) to
* create sessionitems.
*
* @return a set of sessionitems this framework manages
*/
public arraylist<hwisessionitem> findallsessionitems
arraylist<hwisessionitem> otheritems   new arraylist<hwisessionitem>
for  hwiauth a   items keyset
otheritems addall items get a
return otheritems
/**
* here we handle creating the sessionitem, we do this for the jsp client
* because we need to set parameters the client is not aware of. one such
* parameter is the command line arguments the server was started with.
*
* @param a
*          authenticated user
* @param sessionname
*          represents the session name
* @return a new sessionitem or null if a session with that name already
*         exists
*/
public hwisessionitem createsession hwiauth a  string sessionname
l4j debug     sessionname
hwisessionitem si   null
synchronized  items
if  findsessionitembyname a  sessionname     null
l4j debug     sessionname
a getuser
si   new hwisessionitem a  sessionname
if   items containskey a
l4j debug     a getuser
treeset<hwisessionitem> list   new treeset<hwisessionitem>
list add si
items put a  list
l4j debug     si getsessionname
a getuser
else
items get a  add si
l4j debug     si getsessionname
a getuser
else
l4j debug     sessionname
a getuser
return si
/**
* helper method useful when you know the session name you wish to reference.
*
* @param sessionname
* @return a sessionitem matching the sessionname or null if it does not
*         exists
*/
public hwisessionitem findsessionitembyname hwiauth auth  string sessionname
collection<hwisessionitem> sessforuser   items get auth
if  sessforuser    null
return null
for  hwisessionitem si   sessforuser
if  si getsessionname   equals sessionname
return si
return null
/**
* used to list all users that have at least one session.
*
* @return keyset of items all users that have any sessions
*/
public set<hwiauth> findalluserswithsessions
return items keyset
/**
* used to list all the sessions of a user.
*
* @param auth
*          the user being enquired about
* @return all the sessions of that user
*/
public set<hwisessionitem> findallsessionsforuser hwiauth auth
return items get auth