/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive serde2 dynamic_type
import java util collections
import java util hashmap
import java util map
import org apache hadoop hive serde2 serdeexception
import org apache hadoop hive serde2 objectinspector mapobjectinspector
import org apache hadoop hive serde2 objectinspector objectinspector
import org apache hadoop hive serde2 thrift writenullsprotocol
import org apache thrift texception
import org apache thrift protocol tmap
import org apache thrift protocol tprotocol
import org apache thrift protocol ttype
/**
* dynamicserdetypemap.
*
*/
public class dynamicserdetypemap extends dynamicserdetypebase
@override
public boolean isprimitive
return false
@override
public boolean ismap
return true
// production is: map<fieldtype(),fieldtype()>
private final byte fd_keytype   0
private final byte fd_valuetype   1
// returns map<?,?>
@override
public class getrealtype
try
class c   getkeytype   getrealtype
class c2   getvaluetype   getrealtype
object o   c newinstance
object o2   c2 newinstance
map<?  ?> l   collections singletonmap o  o2
return l getclass
catch  exception e
e printstacktrace
throw new runtimeexception e
public dynamicserdetypemap int i
super i
public dynamicserdetypemap thrift_grammar p  int i
super p  i
public dynamicserdetypebase getkeytype
return   dynamicserdefieldtype  jjtgetchild fd_keytype   getmytype
public dynamicserdetypebase getvaluetype
return   dynamicserdefieldtype  jjtgetchild fd_valuetype   getmytype
@override
public string tostring
return     getkeytype   tostring         getvaluetype   tostring
@override
public map<object  object> deserialize object reuse  tprotocol iprot
throws serdeexception  texception  illegalaccessexception
hashmap<object  object> deserializereuse
if  reuse    null
deserializereuse    hashmap<object  object>  reuse
deserializereuse clear
else
deserializereuse   new hashmap<object  object>
tmap themap   iprot readmapbegin
if  themap    null
return null
// themap might be reused by the protocol.
int mapsize   themap size
for  int i   0  i < mapsize  i
object key   getkeytype   deserialize null  iprot
object value   getvaluetype   deserialize null  iprot
deserializereuse put key  value
// in theory, the below call isn't needed in non thrift_mode, but let's not
// get too crazy
iprot readmapend
return deserializereuse
tmap serializemap   null
@override
public void serialize object o  objectinspector oi  tprotocol oprot
throws texception  serdeexception  nosuchfieldexception  illegalaccessexception
dynamicserdetypebase keytype   getkeytype
dynamicserdetypebase valuetype   getvaluetype
writenullsprotocol nullprotocol
oprot instanceof writenullsprotocol  ?  writenullsprotocol  oprot   null
assert  oi getcategory      objectinspector category map
mapobjectinspector moi    mapobjectinspector  oi
objectinspector koi   moi getmapkeyobjectinspector
objectinspector voi   moi getmapvalueobjectinspector
map<?  ?> map   moi getmap o
serializemap   new tmap keytype gettype    valuetype gettype    map size
oprot writemapbegin serializemap
for  object element   map entryset
map entry it    map entry  element
object key   it getkey
object value   it getvalue
keytype serialize key  koi  oprot
if  value    null
assert  nullprotocol    null
nullprotocol writenull
else
valuetype serialize value  voi  oprot
// in theory, the below call isn't needed in non thrift_mode, but let's not
// get too crazy
oprot writemapend
@override
public byte gettype
return ttype map