/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql udf generic
import java util arraylist
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop hive ql exec description
import org apache hadoop hive ql exec udfargumenttypeexception
import org apache hadoop hive ql metadata hiveexception
import org apache hadoop hive ql parse semanticexception
import org apache hadoop hive serde2 io doublewritable
import org apache hadoop hive serde2 objectinspector objectinspector
import org apache hadoop hive serde2 objectinspector objectinspectorfactory
import org apache hadoop hive serde2 objectinspector primitiveobjectinspector
import org apache hadoop hive serde2 objectinspector structfield
import org apache hadoop hive serde2 objectinspector structobjectinspector
import org apache hadoop hive serde2 objectinspector primitive doubleobjectinspector
import org apache hadoop hive serde2 objectinspector primitive longobjectinspector
import org apache hadoop hive serde2 objectinspector primitive primitiveobjectinspectorfactory
import org apache hadoop hive serde2 objectinspector primitive primitiveobjectinspectorutils
import org apache hadoop hive serde2 typeinfo primitivetypeinfo
import org apache hadoop hive serde2 typeinfo typeinfo
import org apache hadoop io longwritable
/**
* compute the pearson correlation coefficient corr(x, y), using the following
* stable one-pass method, based on:
* "formulas for robust, one-pass parallel computation of covariances and
* arbitrary-order statistical moments", philippe pebay, sandia labs
* and "the art of computer programming, volume 2: seminumerical algorithms",
* donald knuth.
*
*  incremental:
*   n : <count>
*   mx_n = mx_(n-1) + [x_n - mx_(n-1)]/n : <xavg>
*   my_n = my_(n-1) + [y_n - my_(n-1)]/n : <yavg>
*   c_n = c_(n-1) + (x_n - mx_(n-1))*(y_n - my_n) : <covariance * n>
*   vx_n = vx_(n-1) + (x_n - mx_n)(x_n - mx_(n-1)): <variance * n>
*   vy_n = vy_(n-1) + (y_n - my_n)(y_n - my_(n-1)): <variance * n>
*
*  merge:
*   c_(a,b) = c_a + c_b + (mx_a - mx_b)*(my_a - my_b)*n_a*n_b/(n_a+n_b)
*   vx_(a,b) = vx_a + vx_b + (mx_a - mx_b)*(mx_a - mx_b)*n_a*n_b/(n_a+n_b)
*   vy_(a,b) = vy_a + vy_b + (my_a - my_b)*(my_a - my_b)*n_a*n_b/(n_a+n_b)
*
*/
@description name
value
extended
public class genericudafcorrelation extends abstractgenericudafresolver
static final log log   logfactory getlog genericudafcorrelation class getname
@override
public genericudafevaluator getevaluator typeinfo parameters  throws semanticexception
if  parameters length    2
throw new udfargumenttypeexception parameters length   1
if  parameters getcategory      objectinspector category primitive
throw new udfargumenttypeexception 0
parameters gettypename
if  parameters getcategory      objectinspector category primitive
throw new udfargumenttypeexception 1
parameters gettypename
switch    primitivetypeinfo  parameters  getprimitivecategory
case byte
case short
case int
case long
case float
case double
case timestamp
switch    primitivetypeinfo  parameters  getprimitivecategory
case byte
case short
case int
case long
case float
case double
case timestamp
return new genericudafcorrelationevaluator
case string
case boolean
default
throw new udfargumenttypeexception 1
parameters gettypename
case string
case boolean
default
throw new udfargumenttypeexception 0
parameters gettypename
/**
* evaluate the pearson correlation coefficient using a stable one-pass
* algorithm, based on work by philippe pãâ©bay and donald knuth.
*
*  incremental:
*   n : <count>
*   mx_n = mx_(n-1) + [x_n - mx_(n-1)]/n : <xavg>
*   my_n = my_(n-1) + [y_n - my_(n-1)]/n : <yavg>
*   c_n = c_(n-1) + (x_n - mx_(n-1))*(y_n - my_n) : <covariance * n>
*   vx_n = vx_(n-1) + (x_n - mx_n)(x_n - mx_(n-1)): <variance * n>
*   vy_n = vy_(n-1) + (y_n - my_n)(y_n - my_(n-1)): <variance * n>
*
*  merge:
*   c_x = c_a + c_b + (mx_a - mx_b)*(my_a - my_b)*n_a*n_b/n_x
*   vx_(a,b) = vx_a + vx_b + (mx_a - mx_b)*(mx_a - mx_b)*n_a*n_b/(n_a+n_b)
*   vy_(a,b) = vy_a + vy_b + (my_a - my_b)*(my_a - my_b)*n_a*n_b/(n_a+n_b)
*
*/
public static class genericudafcorrelationevaluator extends genericudafevaluator
// for partial1 and complete
private primitiveobjectinspector xinputoi
private primitiveobjectinspector yinputoi
// for partial2 and final
private structobjectinspector soi
private structfield countfield
private structfield xavgfield
private structfield yavgfield
private structfield xvarfield
private structfield yvarfield
private structfield covarfield
private longobjectinspector countfieldoi
private doubleobjectinspector xavgfieldoi
private doubleobjectinspector yavgfieldoi
private doubleobjectinspector xvarfieldoi
private doubleobjectinspector yvarfieldoi
private doubleobjectinspector covarfieldoi
// for partial1 and partial2
private object partialresult
// for final and complete
private doublewritable result
@override
public objectinspector init mode m  objectinspector parameters  throws hiveexception
super init m  parameters
// init input
if  mode    mode partial1    mode    mode complete
assert  parameters length    2
xinputoi    primitiveobjectinspector  parameters
yinputoi    primitiveobjectinspector  parameters
else
assert  parameters length    1
soi    structobjectinspector  parameters
countfield   soi getstructfieldref
xavgfield   soi getstructfieldref
yavgfield   soi getstructfieldref
xvarfield   soi getstructfieldref
yvarfield   soi getstructfieldref
covarfield   soi getstructfieldref
countfieldoi
longobjectinspector  countfield getfieldobjectinspector
xavgfieldoi
doubleobjectinspector  xavgfield getfieldobjectinspector
yavgfieldoi
doubleobjectinspector  yavgfield getfieldobjectinspector
xvarfieldoi
doubleobjectinspector  xvarfield getfieldobjectinspector
yvarfieldoi
doubleobjectinspector  yvarfield getfieldobjectinspector
covarfieldoi
doubleobjectinspector  covarfield getfieldobjectinspector
// init output
if  mode    mode partial1    mode    mode partial2
// the output of a partial aggregation is a struct containing
// a long count, two double averages, two double variances,
// and a double covariance.
arraylist<objectinspector> foi   new arraylist<objectinspector>
foi add primitiveobjectinspectorfactory writablelongobjectinspector
foi add primitiveobjectinspectorfactory writabledoubleobjectinspector
foi add primitiveobjectinspectorfactory writabledoubleobjectinspector
foi add primitiveobjectinspectorfactory writabledoubleobjectinspector
foi add primitiveobjectinspectorfactory writabledoubleobjectinspector
foi add primitiveobjectinspectorfactory writabledoubleobjectinspector
arraylist<string> fname   new arraylist<string>
fname add
fname add
fname add
fname add
fname add
fname add
partialresult   new object
partialresult   new longwritable 0
partialresult   new doublewritable 0
partialresult   new doublewritable 0
partialresult   new doublewritable 0
partialresult   new doublewritable 0
partialresult   new doublewritable 0
return objectinspectorfactory getstandardstructobjectinspector fname  foi
else
setresult new doublewritable 0
return primitiveobjectinspectorfactory writabledoubleobjectinspector
static class stdagg implements aggregationbuffer
long count     number n of elements
double xavg     average of x elements
double yavg     average of y elements
double xvar     n times the variance of x elements
double yvar     n times the variance of y elements
double covar     n times the covariance
@override
public aggregationbuffer getnewaggregationbuffer   throws hiveexception
stdagg result   new stdagg
reset result
return result
@override
public void reset aggregationbuffer agg  throws hiveexception
stdagg myagg    stdagg  agg
myagg count   0
myagg xavg   0
myagg yavg   0
myagg xvar   0
myagg yvar   0
myagg covar   0
@override
public void iterate aggregationbuffer agg  object parameters  throws hiveexception
assert  parameters length    2
object px   parameters
object py   parameters
if  px    null    py    null
stdagg myagg    stdagg  agg
double vx   primitiveobjectinspectorutils getdouble px  xinputoi
double vy   primitiveobjectinspectorutils getdouble py  yinputoi
double xavgold   myagg xavg
double yavgold   myagg yavg
myagg count
myagg xavg     vx   xavgold    myagg count
myagg yavg     vy   yavgold    myagg count
if  myagg count > 1
myagg covar     vx   xavgold     vy   myagg yavg
myagg xvar     vx   xavgold     vx   myagg xavg
myagg yvar     vy   yavgold     vy   myagg yavg
@override
public object terminatepartial aggregationbuffer agg  throws hiveexception
stdagg myagg    stdagg  agg
longwritable  partialresult  set myagg count
doublewritable  partialresult  set myagg xavg
doublewritable  partialresult  set myagg yavg
doublewritable  partialresult  set myagg xvar
doublewritable  partialresult  set myagg yvar
doublewritable  partialresult  set myagg covar
return partialresult
@override
public void merge aggregationbuffer agg  object partial  throws hiveexception
if  partial    null
stdagg myagg    stdagg  agg
object partialcount   soi getstructfielddata partial  countfield
object partialxavg   soi getstructfielddata partial  xavgfield
object partialyavg   soi getstructfielddata partial  yavgfield
object partialxvar   soi getstructfielddata partial  xvarfield
object partialyvar   soi getstructfielddata partial  yvarfield
object partialcovar   soi getstructfielddata partial  covarfield
long na   myagg count
long nb   countfieldoi get partialcount
if  na    0
// just copy the information since there is nothing so far
myagg count   countfieldoi get partialcount
myagg xavg   xavgfieldoi get partialxavg
myagg yavg   yavgfieldoi get partialyavg
myagg xvar   xvarfieldoi get partialxvar
myagg yvar   yvarfieldoi get partialyvar
myagg covar   covarfieldoi get partialcovar
if  na    0    nb    0
// merge the two partials
double xavga   myagg xavg
double yavga   myagg yavg
double xavgb   xavgfieldoi get partialxavg
double yavgb   yavgfieldoi get partialyavg
double xvarb   xvarfieldoi get partialxvar
double yvarb   yvarfieldoi get partialyvar
double covarb   covarfieldoi get partialcovar
myagg count    nb
myagg xavg    xavga   na   xavgb   nb    myagg count
myagg yavg    yavga   na   yavgb   nb    myagg count
myagg xvar    xvarb    xavga   xavgb     xavga   xavgb    myagg count
myagg yvar    yvarb    yavga   yavgb     yavga   yavgb    myagg count
myagg covar
covarb    xavga   xavgb     yavga   yavgb      double   na   nb    myagg count
@override
public object terminate aggregationbuffer agg  throws hiveexception
stdagg myagg    stdagg  agg
if  myagg count < 2       sql standard   return null for zero or one pair
return null
else
getresult   set
myagg covar
java lang math sqrt myagg xvar
java lang math sqrt myagg yvar
return getresult
public void setresult doublewritable result
this result   result
public doublewritable getresult
return result