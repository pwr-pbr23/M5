/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql optimizer physical
import java util arraylist
import java util linkedhashmap
import java util list
import java util map
import java util stack
import org apache hadoop hive conf hiveconf
import org apache hadoop hive ql exec groupbyoperator
import org apache hadoop hive ql exec hashtabledummyoperator
import org apache hadoop hive ql exec hashtablesinkoperator
import org apache hadoop hive ql exec mapjoinoperator
import org apache hadoop hive ql exec operator
import org apache hadoop hive ql exec operatorfactory
import org apache hadoop hive ql exec rowschema
import org apache hadoop hive ql exec tablescanoperator
import org apache hadoop hive ql lib defaultgraphwalker
import org apache hadoop hive ql lib defaultruledispatcher
import org apache hadoop hive ql lib dispatcher
import org apache hadoop hive ql lib graphwalker
import org apache hadoop hive ql lib node
import org apache hadoop hive ql lib nodeprocessor
import org apache hadoop hive ql lib nodeprocessorctx
import org apache hadoop hive ql lib rule
import org apache hadoop hive ql lib ruleregexp
import org apache hadoop hive ql optimizer physical mapjoinresolver localmapjoinprocctx
import org apache hadoop hive ql parse semanticexception
import org apache hadoop hive ql plan hashtabledummydesc
import org apache hadoop hive ql plan hashtablesinkdesc
import org apache hadoop hive ql plan operatordesc
import org apache hadoop hive ql plan planutils
import org apache hadoop hive ql plan tabledesc
/**
* node processor factory for map join resolver. what it did is to replace the
* map-join operator in the local map join task with a hash-table dump operator.
* and if the map join is followed by a group by, the hash-table sink
* operator/mapjoin operator should be configured to use less memory to avoid
* oom in group by operator.
*/
public final class localmapjoinprocfactory
public static nodeprocessor getjoinproc
return new localmapjoinprocessor
public static nodeprocessor getgroupbyproc
return new mapjoinfollowedbygroupbyprocessor
public static nodeprocessor getdefaultproc
return new nodeprocessor
@override
public object process node nd  stack<node> stack  nodeprocessorctx procctx
object    nodeoutputs  throws semanticexception
return null
/**
* mapjoinfollowbyprocessor.
*
*/
public static class mapjoinfollowedbygroupbyprocessor implements nodeprocessor
public object process node nd  stack<node> stack  nodeprocessorctx ctx  object    nodeoutputs
throws semanticexception
localmapjoinprocctx context    localmapjoinprocctx  ctx
if   nd getname   equals
return null
context setfollowedbygroupby true
groupbyoperator groupbyop    groupbyoperator  nd
float groupbymemoryusage   context getparsectx   getconf   getfloatvar
hiveconf confvars hivemapjoinfollowedbymapaggrhashmemory
groupbyop getconf   setgroupbymemoryusage groupbymemoryusage
return null
/**
* localmapjoinprocessor.
*
*/
public static class localmapjoinprocessor implements nodeprocessor
public object process node nd  stack<node> stack  nodeprocessorctx ctx  object    nodeoutputs
throws semanticexception
localmapjoinprocctx context    localmapjoinprocctx  ctx
if   nd getname   equals
return null
mapjoinoperator mapjoinop    mapjoinoperator  nd
try
hasgroupby mapjoinop  context
catch  exception e
e printstacktrace
hashtablesinkdesc hashtablesinkdesc   new hashtablesinkdesc mapjoinop getconf
hashtablesinkoperator hashtablesinkop    hashtablesinkoperator  operatorfactory
get hashtablesinkdesc
// set hashtable memory usage
float hashtablememoryusage
if  context isfollowedbygroupby
hashtablememoryusage   context getparsectx   getconf   getfloatvar
hiveconf confvars hivehashtablefollowbygbymaxmemoryusage
else
hashtablememoryusage   context getparsectx   getconf   getfloatvar
hiveconf confvars hivehashtablemaxmemoryusage
hashtablesinkop getconf   sethashtablememoryusage hashtablememoryusage
// get the last operator for processing big tables
int bigtable   mapjoinop getconf   getposbigtable
byte order   mapjoinop getconf   gettagorder
int bigtablealias    int  order
// the parent ops for hashtablesinkop
list<operator<? extends operatordesc>> smalltablesparentop
new arraylist<operator<? extends operatordesc>>
list<operator<? extends operatordesc>> dummyoperators
new arraylist<operator<? extends operatordesc>>
// get all parents
list<operator<? extends operatordesc>> parentsop   mapjoinop getparentoperators
for  int i   0  i < parentsop size    i
if  i    bigtablealias
smalltablesparentop add null
continue
operator<? extends operatordesc> parent   parentsop get i
// let hashtable op be the child of this parent
parent replacechild mapjoinop  hashtablesinkop
// keep the parent id correct
smalltablesparentop add parent
// create an new operator: hashtable dummyopeator, which share the table desc
hashtabledummydesc desc   new hashtabledummydesc
hashtabledummyoperator dummyop    hashtabledummyoperator  operatorfactory get desc
tabledesc tbl
if  parent getschema      null
if  parent instanceof tablescanoperator
tbl     tablescanoperator  parent  gettabledesc
else
throw new semanticexception
else
// get parent schema
rowschema rowschema   parent getschema
tbl   planutils getintermediatefiletabledesc planutils getfieldschemasfromrowschema
rowschema
dummyop getconf   settbl tbl
// let the dummy op be the parent of mapjoin op
mapjoinop replaceparent parent  dummyop
list<operator<? extends operatordesc>> dummychildren
new arraylist<operator<? extends operatordesc>>
dummychildren add mapjoinop
dummyop setchildoperators dummychildren
// add this dummy op to the dummp operator list
dummyoperators add dummyop
hashtablesinkop setparentoperators smalltablesparentop
for  operator<? extends operatordesc> op   dummyoperators
context adddummyparentop op
return null
public void hasgroupby operator<? extends operatordesc> mapjoinop
localmapjoinprocctx localmapjoinprocctx  throws exception
list<operator<? extends operatordesc>> childops   mapjoinop getchildoperators
map<rule  nodeprocessor> oprules   new linkedhashmap<rule  nodeprocessor>
oprules put new ruleregexp    groupbyoperator getoperatorname
localmapjoinprocfactory getgroupbyproc
// the dispatcher fires the processor corresponding to the closest
// matching rule and passes the context along
dispatcher disp   new defaultruledispatcher localmapjoinprocfactory getdefaultproc
oprules  localmapjoinprocctx
graphwalker ogw   new defaultgraphwalker disp
// iterator the reducer operator tree
arraylist<node> topnodes   new arraylist<node>
topnodes addall childops
ogw startwalking topnodes  null
private localmapjoinprocfactory
// prevent instantiation