/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive serde2 lazy
import java io ioexception
import java util arrays
import java util list
import java util map
import java util properties
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop conf configuration
import org apache hadoop hive serde serdeconstants
import org apache hadoop hive serde2 bytestream
import org apache hadoop hive serde2 serde
import org apache hadoop hive serde2 serdeexception
import org apache hadoop hive serde2 serdestats
import org apache hadoop hive serde2 objectinspector listobjectinspector
import org apache hadoop hive serde2 objectinspector mapobjectinspector
import org apache hadoop hive serde2 objectinspector objectinspector
import org apache hadoop hive serde2 objectinspector primitiveobjectinspector
import org apache hadoop hive serde2 objectinspector structfield
import org apache hadoop hive serde2 objectinspector structobjectinspector
import org apache hadoop hive serde2 objectinspector unionobjectinspector
import org apache hadoop hive serde2 objectinspector objectinspector category
import org apache hadoop hive serde2 objectinspector primitive primitiveobjectinspectorfactory
import org apache hadoop hive serde2 typeinfo structtypeinfo
import org apache hadoop hive serde2 typeinfo typeinfo
import org apache hadoop hive serde2 typeinfo typeinfofactory
import org apache hadoop hive serde2 typeinfo typeinfoutils
import org apache hadoop io byteswritable
import org apache hadoop io text
import org apache hadoop io writable
/**
* lazysimpleserde can be used to read the same data format as
* metadatatypedcolumnsetserde and tctlseparatedprotocol.
*
* however, lazysimpleserde creates objects in a lazy way, to provide better
* performance.
*
* also lazysimpleserde outputs typed columns instead of treating all columns as
* string like metadatatypedcolumnsetserde.
*/
public class lazysimpleserde implements serde
public static final log log   logfactory getlog lazysimpleserde class
getname
public static final byte defaultseparators     byte  1   byte  2   byte  3
private objectinspector cachedobjectinspector
private long serializedsize
private serdestats stats
private boolean lastoperationserialize
private boolean lastoperationdeserialize
@override
public string tostring
return getclass   tostring
arrays aslist serdeparams separators
structtypeinfo  serdeparams rowtypeinfo  getallstructfieldnames
structtypeinfo  serdeparams rowtypeinfo
getallstructfieldtypeinfos
public lazysimpleserde   throws serdeexception
/**
* return the byte value of the number string.
*
* @param altvalue
*          the string containing a number.
* @param defaultval
*          if the altvalue does not represent a number, return the
*          defaultval.
*/
public static byte getbyte string altvalue  byte defaultval
if  altvalue    null    altvalue length   > 0
try
return byte valueof altvalue  bytevalue
catch  numberformatexception e
return  byte  altvalue charat 0
return defaultval
/**
* serdeparameters.
*
*/
public static class serdeparameters
byte separators   defaultseparators
string nullstring
text nullsequence
typeinfo rowtypeinfo
boolean lastcolumntakesrest
list<string> columnnames
list<typeinfo> columntypes
boolean escaped
byte escapechar
boolean needsescape
public list<typeinfo> getcolumntypes
return columntypes
public list<string> getcolumnnames
return columnnames
public byte getseparators
return separators
public string getnullstring
return nullstring
public text getnullsequence
return nullsequence
public typeinfo getrowtypeinfo
return rowtypeinfo
public boolean islastcolumntakesrest
return lastcolumntakesrest
public boolean isescaped
return escaped
public byte getescapechar
return escapechar
public boolean getneedsescape
return needsescape
serdeparameters serdeparams   null
/**
* initialize the serde given the parameters. serialization.format: separator
* char or byte code (only supports byte-value up to 127) columns:
* ","-separated column names columns.types: ",", ":", or ";"-separated column
* types
*
* @see serde#initialize(configuration, properties)
*/
public void initialize configuration job  properties tbl
throws serdeexception
serdeparams   lazysimpleserde initserdeparams job  tbl  getclass
getname
// create the objectinspectors for the fields
cachedobjectinspector   lazyfactory createlazystructinspector serdeparams
getcolumnnames    serdeparams getcolumntypes    serdeparams
getseparators    serdeparams getnullsequence    serdeparams
islastcolumntakesrest    serdeparams isescaped    serdeparams
getescapechar
cachedlazystruct    lazystruct  lazyfactory
createlazyobject cachedobjectinspector
log debug getclass   getname
serdeparams columnnames       serdeparams columntypes
arrays aslist serdeparams separators
serdeparams nullstring
serdeparams lastcolumntakesrest
serializedsize   0
stats   new serdestats
lastoperationserialize   false
lastoperationdeserialize   false
public static serdeparameters initserdeparams configuration job
properties tbl  string serdename  throws serdeexception
serdeparameters serdeparams   new serdeparameters
// read the separators: we use 8 levels of separators by default, but we
// should change this when we allow users to specify more than 10 levels
// of separators through ddl.
serdeparams separators   new byte
serdeparams separators   getbyte tbl getproperty serdeconstants field_delim
tbl getproperty serdeconstants serialization_format    defaultseparators
serdeparams separators   getbyte tbl
getproperty serdeconstants collection_delim   defaultseparators
serdeparams separators   getbyte
tbl getproperty serdeconstants mapkey_delim   defaultseparators
for  int i   3  i < serdeparams separators length  i
serdeparams separators    byte   i   1
serdeparams nullstring   tbl getproperty
serdeconstants serialization_null_format
serdeparams nullsequence   new text serdeparams nullstring
string lastcolumntakesreststring   tbl
getproperty serdeconstants serialization_last_column_takes_rest
serdeparams lastcolumntakesrest    lastcolumntakesreststring    null    lastcolumntakesreststring
equalsignorecase
lazyutils extractcolumninfo tbl  serdeparams  serdename
// create the lazyobject for storing the rows
serdeparams rowtypeinfo   typeinfofactory getstructtypeinfo
serdeparams columnnames  serdeparams columntypes
// get the escape information
string escapeproperty   tbl getproperty serdeconstants escape_char
serdeparams escaped    escapeproperty    null
if  serdeparams escaped
serdeparams escapechar   getbyte escapeproperty   byte
if  serdeparams escaped
serdeparams needsescape   new boolean
for  int i   0  i < 128  i
serdeparams needsescape   false
serdeparams needsescape   true
for  int i   0  i < serdeparams separators length  i
serdeparams needsescape]   true
return serdeparams
// the object for storing row data
lazystruct cachedlazystruct
// the wrapper for byte array
bytearrayref bytearrayref
/**
* deserialize a row from the writable to a lazyobject.
*
* @param field
*          the writable that contains the data
* @return the deserialized row object.
* @see serde#deserialize(writable)
*/
public object deserialize writable field  throws serdeexception
if  bytearrayref    null
bytearrayref   new bytearrayref
if  field instanceof byteswritable
byteswritable b    byteswritable  field
// for backward-compatibility with hadoop 0.17
bytearrayref setdata b getbytes
cachedlazystruct init bytearrayref  0  b getlength
else if  field instanceof text
text t    text  field
bytearrayref setdata t getbytes
cachedlazystruct init bytearrayref  0  t getlength
else
throw new serdeexception getclass   tostring
lastoperationserialize   false
lastoperationdeserialize   true
return cachedlazystruct
/**
* returns the objectinspector for the row.
*/
public objectinspector getobjectinspector   throws serdeexception
return cachedobjectinspector
/**
* returns the writable class after serialization.
*
* @see serde#getserializedclass()
*/
public class<? extends writable> getserializedclass
return text class
text serializecache   new text
bytestream output serializestream   new bytestream output
/**
* serialize a row of data.
*
* @param obj
*          the row object
* @param objinspector
*          the objectinspector for the row object
* @return the serialized writable object
* @throws ioexception
* @see serde#serialize(object, objectinspector)
*/
public writable serialize object obj  objectinspector objinspector
throws serdeexception
if  objinspector getcategory      category struct
throw new serdeexception getclass   tostring
objinspector gettypename
// prepare the field objectinspectors
structobjectinspector soi    structobjectinspector  objinspector
list<? extends structfield> fields   soi getallstructfieldrefs
list<object> list   soi getstructfieldsdataaslist obj
list<? extends structfield> declaredfields    serdeparams rowtypeinfo    null      structtypeinfo  serdeparams rowtypeinfo
getallstructfieldnames   size   > 0  ?   structobjectinspector  getobjectinspector
getallstructfieldrefs

serializestream reset
serializedsize   0
// serialize each field
for  int i   0  i < fields size    i
// append the separator if needed.
if  i > 0
serializestream write serdeparams separators
// get the field objectinspector and the field object.
objectinspector foi   fields get i  getfieldobjectinspector
object f    list    null ? null   list get i
if  declaredfields    null    i >  declaredfields size
throw new serdeexception     declaredfields size
i           obj
serdeparams rowtypeinfo tostring
typeinfoutils gettypeinfofromobjectinspector objinspector
serializefield serializestream  f  foi  serdeparams
// todo: the copy of data is unnecessary, but there is no work-around
// since we cannot directly set the private byte[] field inside text.
serializecache
set serializestream getdata    0  serializestream getcount
serializedsize   serializestream getcount
lastoperationserialize   true
lastoperationdeserialize   false
return serializecache
protected void serializefield bytestream output out  object obj  objectinspector objinspector
serdeparameters serdeparams  throws serdeexception
try
serialize out  obj  objinspector  serdeparams separators  1  serdeparams nullsequence
serdeparams escaped  serdeparams escapechar  serdeparams needsescape
catch  ioexception e
throw new serdeexception e
/**
* serialize the row into the stringbuilder.
*
* @param out
*          the stringbuilder to store the serialized data.
* @param obj
*          the object for the current field.
* @param objinspector
*          the objectinspector for the current object.
* @param separators
*          the separators array.
* @param level
*          the current level of separator.
* @param nullsequence
*          the byte sequence representing the null value.
* @param escaped
*          whether we need to escape the data when writing out
* @param escapechar
*          which char to use as the escape char, e.g. '\\'
* @param needsescape
*          which chars needs to be escaped. this array should have size of
*          128. negative byte values (or byte values >= 128) are never
*          escaped.
* @throws ioexception
*/
public static void serialize bytestream output out  object obj
objectinspector objinspector  byte separators  int level
text nullsequence  boolean escaped  byte escapechar  boolean needsescape
throws ioexception
if  obj    null
out write nullsequence getbytes    0  nullsequence getlength
return
char separator
list<?> list
switch  objinspector getcategory
case primitive
lazyutils writeprimitiveutf8 out  obj
primitiveobjectinspector  objinspector  escaped  escapechar
needsescape
return
case list
separator    char  separators
listobjectinspector loi    listobjectinspector  objinspector
list   loi getlist obj
objectinspector eoi   loi getlistelementobjectinspector
if  list    null
out write nullsequence getbytes    0  nullsequence getlength
else
for  int i   0  i < list size    i
if  i > 0
out write separator
serialize out  list get i   eoi  separators  level   1  nullsequence
escaped  escapechar  needsescape
return
case map
separator    char  separators
char keyvalueseparator    char  separators
mapobjectinspector moi    mapobjectinspector  objinspector
objectinspector koi   moi getmapkeyobjectinspector
objectinspector voi   moi getmapvalueobjectinspector
map<?  ?> map   moi getmap obj
if  map    null
out write nullsequence getbytes    0  nullsequence getlength
else
boolean first   true
for  map entry<?  ?> entry   map entryset
if  first
first   false
else
out write separator
serialize out  entry getkey    koi  separators  level   2
nullsequence  escaped  escapechar  needsescape
out write keyvalueseparator
serialize out  entry getvalue    voi  separators  level   2
nullsequence  escaped  escapechar  needsescape
return
case struct
separator    char  separators
structobjectinspector soi    structobjectinspector  objinspector
list<? extends structfield> fields   soi getallstructfieldrefs
list   soi getstructfieldsdataaslist obj
if  list    null
out write nullsequence getbytes    0  nullsequence getlength
else
for  int i   0  i < list size    i
if  i > 0
out write separator
serialize out  list get i   fields get i  getfieldobjectinspector
separators  level   1  nullsequence  escaped  escapechar
needsescape
return
case union
separator    char  separators
unionobjectinspector uoi    unionobjectinspector  objinspector
list<? extends objectinspector> ois   uoi getobjectinspectors
if  ois    null
out write nullsequence getbytes    0  nullsequence getlength
else
lazyutils writeprimitiveutf8 out  new byte uoi gettag obj
primitiveobjectinspectorfactory javabyteobjectinspector
escaped  escapechar  needsescape
out write separator
serialize out  uoi getfield obj   ois get uoi gettag obj
separators  level   1  nullsequence  escaped  escapechar
needsescape
return
default
break
throw new runtimeexception
objinspector getcategory
/**
* returns the statistics after (de)serialization)
*/
public serdestats getserdestats
// must be different
assert  lastoperationserialize    lastoperationdeserialize
if  lastoperationserialize
stats setrawdatasize serializedsize
else
stats setrawdatasize cachedlazystruct getrawdataserializedsize
return stats