/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive cli
import java io bufferedreader
import java io file
import java io filenotfoundexception
import java io filereader
import java io ioexception
import java io printstream
import java io unsupportedencodingexception
import java util arraylist
import java util arrays
import java util list
import java util map
import java util set
import jline argumentcompletor
import jline completor
import jline consolereader
import jline history
import jline simplecompletor
import jline argumentcompletor abstractargumentdelimiter
import jline argumentcompletor argumentdelimiter
import org apache commons lang stringutils
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop conf configuration
import org apache hadoop hive common hiveinterruptutils
import org apache hadoop hive common logutils
import org apache hadoop hive common logutils loginitializationexception
import org apache hadoop hive common io cachingprintstream
import org apache hadoop hive conf hiveconf
import org apache hadoop hive metastore api fieldschema
import org apache hadoop hive ql commandneedretryexception
import org apache hadoop hive ql driver
import org apache hadoop hive ql exec functionregistry
import org apache hadoop hive ql exec hadoopjobexechelper
import org apache hadoop hive ql exec utilities
import org apache hadoop hive ql exec utilities streamprinter
import org apache hadoop hive ql parse parsedriver
import org apache hadoop hive ql parse variablesubstitution
import org apache hadoop hive ql processors commandprocessor
import org apache hadoop hive ql processors commandprocessorfactory
import org apache hadoop hive ql processors commandprocessorresponse
import org apache hadoop hive ql session sessionstate
import org apache hadoop hive ql session sessionstate loghelper
import org apache hadoop hive service hiveclient
import org apache hadoop hive service hiveserverexception
import org apache hadoop hive shims shimloader
import org apache hadoop io ioutils
import org apache thrift texception
import sun misc signal
import sun misc signalhandler
/**
* clidriver.
*
*/
public class clidriver
public static string prompt   null
public static string prompt2   null     when   is not yet seen
public static final int lines_to_fetch   40     number of lines to fetch in batch from remote hive server
public static final string hivercfile
private final loghelper console
private configuration conf
public clidriver
sessionstate ss   sessionstate get
conf    ss    null  ? ss getconf     new configuration
log log   logfactory getlog
console   new loghelper log
public int processcmd string cmd
clisessionstate ss    clisessionstate  sessionstate get
// flush the print stream, so it doesn't include output from the last command
ss err flush
string cmd_trimmed   cmd trim
string tokens   tokenizecmd cmd_trimmed
int ret   0
if  cmd_trimmed tolowercase   equals       cmd_trimmed tolowercase   equals
// if we have come this far - either the previous commands
// are all successful or this is command line. in either case
// this counts as a successful run
ss close
system exit 0
else if  tokens equalsignorecase
string cmd_1   getfirstcmd cmd_trimmed  tokens length
file sourcefile   new file cmd_1
if    sourcefile isfile
console printerror    cmd_1
ret   1
else
try
this processfile cmd_1
catch  ioexception e
console printerror    cmd_1     e getlocalizedmessage
org apache hadoop util stringutils stringifyexception e
ret   1
else if  cmd_trimmed startswith
string shell_cmd   cmd_trimmed substring 1
shell_cmd   new variablesubstitution   substitute ss getconf    shell_cmd
// shell_cmd = "/bin/bash -c \'" + shell_cmd + "\'";
try
process executor   runtime getruntime   exec shell_cmd
streamprinter outprinter   new streamprinter executor getinputstream    null  ss out
streamprinter errprinter   new streamprinter executor geterrorstream    null  ss err
outprinter start
errprinter start
ret   executor waitfor
if  ret    0
console printerror     ret
catch  exception e
console printerror     e getlocalizedmessage
org apache hadoop util stringutils stringifyexception e
ret   1
else if  tokens tolowercase   equals
sessionstate resourcetype t
if  tokens length < 2     t   sessionstate find_resource_type tokens      null
console printerror
stringutils join sessionstate resourcetype values
ret   1
else
list<string> filter   null
if  tokens length >  3
system arraycopy tokens  2  tokens  0  tokens length   2
filter   arrays aslist tokens
set<string> s   ss list_resource t  filter
if  s    null     s isempty
ss out println stringutils join s
else if  ss isremotemode         remote mode    connecting to remote hive server
hiveclient client   ss getclient
printstream out   ss out
printstream err   ss err
try
client execute cmd_trimmed
list<string> results
do
results   client fetchn lines_to_fetch
for  string line   results
out println line
while  results size      lines_to_fetch
catch  hiveserverexception e
ret   e geterrorcode
if  ret    0       ok if ret    0    reached the eof
string errmsg   e getmessage
if  errmsg    null
errmsg   e tostring
ret   e geterrorcode
err println     errmsg
catch  texception e
string errmsg   e getmessage
if  errmsg    null
errmsg   e tostring
ret    10002
err println     errmsg
finally
try
client clean
catch  texception e
string errmsg   e getmessage
if  errmsg    null
errmsg   e tostring
err println
errmsg
else      local mode
commandprocessor proc   commandprocessorfactory get tokens   hiveconf  conf
ret   processlocalcmd cmd  proc  ss
return ret
/**
* for testing purposes to inject configuration dependency
* @param conf to replace default
*/
void setconf configuration conf
this conf   conf
/**
* extract and clean up the first command in the input.
*/
private string getfirstcmd string cmd  int length
return cmd substring length  trim
private string tokenizecmd string cmd
return cmd split
int processlocalcmd string cmd  commandprocessor proc  clisessionstate ss
int trycount   0
boolean needretry
int ret   0
do
try
needretry   false
if  proc    null
if  proc instanceof driver
driver qp    driver  proc
printstream out   ss out
long start   system currenttimemillis
if  ss getisverbose
out println cmd
qp settrycount trycount
ret   qp run cmd  getresponsecode
if  ret    0
qp close
return ret
arraylist<string> res   new arraylist<string>
printheader qp  out
try
while  qp getresults res
for  string r   res
out println r
res clear
if  out checkerror
break
catch  ioexception e
console printerror     e getclass   getname
e getmessage
org apache hadoop util stringutils stringifyexception e
ret   1
int cret   qp close
if  ret    0
ret   cret
long end   system currenttimemillis
if  end > start
double timetaken    end   start    1000 0
console printinfo     timetaken      null
else
string firsttoken   tokenizecmd cmd trim
string cmd_1   getfirstcmd cmd trim    firsttoken length
if  ss getisverbose
ss out println firsttoken       cmd_1
commandprocessorresponse res   proc run cmd_1
if  res getresponsecode      0
ss out println     res getresponsecode
res geterrormessage
ret   res getresponsecode
catch  commandneedretryexception e
console printinfo
trycount
needretry   true
while  needretry
return ret
/**
* if enabled and applicable to this command, print the field headers
* for the output.
*
* @param qp driver that executed the command
* @param out printstream which to send output to
*/
private void printheader driver qp  printstream out
list<fieldschema> fieldschemas   qp getschema   getfieldschemas
if  hiveconf getboolvar conf  hiveconf confvars hive_cli_print_header
fieldschemas    null
// print the column names
boolean first_col   true
for  fieldschema fs   fieldschemas
if   first_col
out print
out print fs getname
first_col   false
out println
public int processline string line
return processline line  false
/**
* processes a line of semicolon separated commands
*
* @param line
*          the commands to process
* @param allowinterupting
*          when true the function will handle sig_int (ctrl+c) by interrupting the processing and
*          returning -1
* @return 0 if ok
*/
public int processline string line  boolean allowinterupting
signalhandler oldsignal   null
signal interupsignal   null
if  allowinterupting
// remember all threads that were running at the time we started line processing.
// hook up the custom ctrl+c handler while processing this line
interupsignal   new signal
oldsignal   signal handle interupsignal  new signalhandler
private final thread clithread   thread currentthread
private boolean interruptrequested
@override
public void handle signal signal
boolean initialrequest    interruptrequested
interruptrequested   true
// kill the vm on second ctrl+c
if   initialrequest
console printinfo
system exit 127
// interrupt the cli thread to stop the current statement and return
// to prompt
console printinfo
console printinfo
// first, kill any running mr jobs
hadoopjobexechelper killrunningjobs
hiveinterruptutils interrupt
this clithread interrupt
try
int lastret   0  ret   0
string command
for  string onecmd   line split
if  stringutils endswith onecmd
command    stringutils chop onecmd
continue
else
command    onecmd
if  stringutils isblank command
continue
ret   processcmd command
//wipe cli query state
sessionstate ss   sessionstate get
ss setcommandtype null
command
lastret   ret
boolean ignoreerrors   hiveconf getboolvar conf  hiveconf confvars cliignoreerrors
if  ret    0     ignoreerrors
commandprocessorfactory clean  hiveconf  conf
return ret
commandprocessorfactory clean  hiveconf  conf
return lastret
finally
// once we are done processing the line, restore the old handler
if  oldsignal    null    interupsignal    null
signal handle interupsignal  oldsignal
public int processreader bufferedreader r  throws ioexception
string line
stringbuilder qsb   new stringbuilder
while   line   r readline       null
// skipping through comments
if    line startswith
qsb append line
return  processline qsb tostring
public int processfile string filename  throws ioexception
filereader filereader   null
bufferedreader bufferreader   null
int rc   0
try
filereader   new filereader filename
bufferreader   new bufferedreader filereader
rc   processreader bufferreader
bufferreader close
bufferreader   null
finally
ioutils closestream bufferreader
return rc
public void processinitfiles clisessionstate ss  throws ioexception
boolean savesilent   ss getissilent
ss setissilent true
for  string initfile   ss initfiles
int rc   processfile initfile
if  rc    0
system exit rc
if  ss initfiles size      0
if  system getenv       null
string hivercdefault   system getenv      file separator
file separator   hivercfile
if  new file hivercdefault  exists
int rc   processfile hivercdefault
if  rc    0
system exit rc
console printerror
if  system getenv       null
string hivercdefault   system getenv      file separator
hivercfile
if  new file hivercdefault  exists
int rc   processfile hivercdefault
if  rc    0
system exit rc
if  system getproperty       null
string hivercuser   system getproperty      file separator
hivercfile
if  new file hivercuser  exists
int rc   processfile hivercuser
if  rc    0
system exit rc
ss setissilent savesilent
public void processselectdatabase clisessionstate ss  throws ioexception
string database   ss database
if  database    null
int rc   processline     database
if  rc    0
system exit rc
public static completor getcommandcompletor
// simplecompletor matches against a pre-defined wordlist
// we start with an empty wordlist and build it up
simplecompletor sc   new simplecompletor new string
// we add hive function names
// for functions that aren't infix operators, we add an open
// parenthesis at the end.
for  string s   functionregistry getfunctionnames
if  s matches
sc addcandidatestring s
else
sc addcandidatestring s
// we add hive keywords, including lower-cased versions
for  string s   parsedriver getkeywords
sc addcandidatestring s
sc addcandidatestring s tolowercase
// because we use parentheses in addition to whitespace
// as a keyword delimiter, we need to define a new argumentdelimiter
// that recognizes parenthesis as a delimiter.
argumentdelimiter delim   new abstractargumentdelimiter
@override
public boolean isdelimiterchar  string buffer  int pos
char c   buffer charat pos
return  character iswhitespace c     c         c
c         c
// the argumentcompletor allows us to match multiple tokens
// in the same line.
final argumentcompletor ac   new argumentcompletor sc  delim
// by default argumentcompletor is in "strict" mode meaning
// a token is only auto-completed if all prior tokens
// match. we don't want that since there are valid tokens
// that are not in our wordlist (eg. table and column names)
ac setstrict false
// argumentcompletor always adds a space after a matched token.
// this is undesirable for function names because a space after
// the opening parenthesis is unnecessary (and uncommon) in hive.
// we stack a custom completor on top of our argumentcompletor
// to reverse this.
completor completor   new completor
public int complete  string buffer  int offset  list completions
list<string> comp    list<string>  completions
int ret   ac complete buffer  offset  completions
// consolereader will do the substitution if and only if there
// is exactly one valid completion, so we ignore other cases.
if  completions size      1
if  comp get 0  endswith
comp set 0  comp get 0  trim
return ret
hiveconf confvars confs   hiveconf confvars values
string vars   new string
for  int i   0  i < vars length  i
vars   confs varname
simplecompletor conf   new simplecompletor vars
conf setdelimiter
simplecompletor set   new simplecompletor
@override
public int complete string buffer  int cursor  list clist
return buffer    null    buffer equals    ? super complete buffer  cursor  clist     1
argumentcompletor propcompletor   new argumentcompletor new completor set  conf
@override
@suppresswarnings
public int complete string buffer  int offset  list completions
int ret   super complete buffer  offset  completions
if  completions size      1
completions set 0    string completions get 0   trim
return ret
return new completor  propcompletor  completor
public static void main string args  throws exception
int ret   run args
system exit ret
public static int run string args  throws exception
optionsprocessor oproc   new optionsprocessor
if   oproc process_stage1 args
return 1
// note: it is critical to do this here so that log4j is reinitialized
// before any of the other core hive classes are loaded
boolean loginitfailed   false
string loginitdetailmessage
try
loginitdetailmessage   logutils inithivelog4j
catch  loginitializationexception e
loginitfailed   true
loginitdetailmessage   e getmessage
clisessionstate ss   new clisessionstate new hiveconf sessionstate class
ss in   system in
try
ss out   new printstream system out  true
ss info   new printstream system err  true
ss err   new cachingprintstream system err  true
catch  unsupportedencodingexception e
return 3
if   oproc process_stage2 ss
return 2
if   ss getissilent
if  loginitfailed
system err println loginitdetailmessage
else
sessionstate getconsole   printinfo loginitdetailmessage
// set all properties specified via command line
hiveconf conf   ss getconf
for  map entry<object  object> item   ss cmdproperties entryset
conf set  string  item getkey     string  item getvalue
ss getoverriddenconfigurations   put  string  item getkey     string  item getvalue
// read prompt configuration and substitute variables.
prompt   conf getvar hiveconf confvars cliprompt
prompt   new variablesubstitution   substitute conf  prompt
prompt2   spacesforstring prompt
sessionstate start ss
// connect to hive server
if  ss gethost      null
ss connect
if  ss isremotemode
prompt       ss host       ss port       prompt
char spaces   new char
arrays fill spaces
prompt2   new string spaces
// cli remote mode is a thin client: only load auxjars in local mode
if   ss isremotemode       shimloader gethadoopshims   usesjobshell
// hadoop-20 and above - we need to augment classpath using hiveconf
// components
// see also: code in execdriver.java
classloader loader   conf getclassloader
string auxjars   hiveconf getvar conf  hiveconf confvars hiveauxjars
if  stringutils isnotblank auxjars
loader   utilities addtoclasspath loader  stringutils split auxjars
conf setclassloader loader
thread currentthread   setcontextclassloader loader
clidriver cli   new clidriver
cli sethivevariables oproc gethivevariables
// use the specified database if specified
cli processselectdatabase ss
// execute -i init files (always in silent mode)
cli processinitfiles ss
if  ss execstring    null
return cli processline ss execstring
try
if  ss filename    null
return cli processfile ss filename
catch  filenotfoundexception e
system err println     e getmessage
return 3
consolereader reader   new consolereader
reader setbellenabled false
// reader.setdebug(new printwriter(new filewriter("writer.debug", true)));
for  completor completor   getcommandcompletor
reader addcompletor completor
string line
final string historyfile
string historydirectory   system getproperty
try
if   new file historydirectory   exists
string historyfile   historydirectory   file separator   historyfile
reader sethistory new history new file historyfile
else
system err println     historydirectory
catch  exception e
system err println
system err println e getmessage
int ret   0
string prefix
string curdb   getformatteddb conf  ss
string curprompt   prompt   curdb
string dbspaces   spacesforstring curdb
while   line   reader readline curprompt          null
if   prefix equals
prefix
if  line trim   endswith        line trim   endswith
line   prefix   line
ret   cli processline line  true
prefix
curdb   getformatteddb conf  ss
curprompt   prompt   curdb
dbspaces   dbspaces length      curdb length   ? dbspaces   spacesforstring curdb
else
prefix   prefix   line
curprompt   prompt2   dbspaces
continue
ss close
return ret
/**
* retrieve the current database name string to display, based on the
* configuration value.
* @param conf storing whether or not to show current db
* @param ss clisessionstate to query for db name
* @return string to show user for current db value
*/
private static string getformatteddb hiveconf conf  clisessionstate ss
if   hiveconf getboolvar conf  hiveconf confvars cliprintcurrentdb
return
string currdb   ss getcurrentdbname
if  currdb    null
return
return     currdb
/**
* generate a string of whitespace the same length as the parameter
*
* @param s string for which to generate equivalent whitespace
* @return  whitespace
*/
private static string spacesforstring string s
if  s    null    s length      0
return
return string format     s length
public void sethivevariables map<string  string> hivevariables
sessionstate get   sethivevariables hivevariables