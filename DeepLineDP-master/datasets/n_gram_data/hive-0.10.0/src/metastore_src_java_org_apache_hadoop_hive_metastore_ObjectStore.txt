/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive metastore
import static org apache commons lang stringutils join
import java net uri
import java net urisyntaxexception
import java util arraylist
import java util collection
import java util collections
import java util hashmap
import java util hashset
import java util iterator
import java util list
import java util map
import java util map entry
import java util properties
import java util set
import java util concurrent locks lock
import java util concurrent locks reentrantlock
import javax jdo jdohelper
import javax jdo jdoobjectnotfoundexception
import javax jdo persistencemanager
import javax jdo persistencemanagerfactory
import javax jdo query
import javax jdo transaction
import javax jdo datastore datastorecache
import org antlr runtime charstream
import org antlr runtime commontokenstream
import org antlr runtime recognitionexception
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop conf configurable
import org apache hadoop conf configuration
import org apache hadoop hive common fileutils
import org apache hadoop hive common classification interfaceaudience
import org apache hadoop hive common classification interfacestability
import org apache hadoop hive conf hiveconf
import org apache hadoop hive conf hiveconf confvars
import org apache hadoop hive metastore api binarycolumnstatsdata
import org apache hadoop hive metastore api booleancolumnstatsdata
import org apache hadoop hive metastore api columnstatistics
import org apache hadoop hive metastore api columnstatisticsdata
import org apache hadoop hive metastore api columnstatisticsdesc
import org apache hadoop hive metastore api columnstatisticsobj
import org apache hadoop hive metastore api database
import org apache hadoop hive metastore api doublecolumnstatsdata
import org apache hadoop hive metastore api fieldschema
import org apache hadoop hive metastore api hiveobjectprivilege
import org apache hadoop hive metastore api hiveobjectref
import org apache hadoop hive metastore api hiveobjecttype
import org apache hadoop hive metastore api index
import org apache hadoop hive metastore api invalidinputexception
import org apache hadoop hive metastore api invalidobjectexception
import org apache hadoop hive metastore api invalidpartitionexception
import org apache hadoop hive metastore api longcolumnstatsdata
import org apache hadoop hive metastore api metaexception
import org apache hadoop hive metastore api nosuchobjectexception
import org apache hadoop hive metastore api order
import org apache hadoop hive metastore api partition
import org apache hadoop hive metastore api partitioneventtype
import org apache hadoop hive metastore api principalprivilegeset
import org apache hadoop hive metastore api principaltype
import org apache hadoop hive metastore api privilegebag
import org apache hadoop hive metastore api privilegegrantinfo
import org apache hadoop hive metastore api role
import org apache hadoop hive metastore api serdeinfo
import org apache hadoop hive metastore api skewedinfo
import org apache hadoop hive metastore api storagedescriptor
import org apache hadoop hive metastore api stringcolumnstatsdata
import org apache hadoop hive metastore api table
import org apache hadoop hive metastore api type
import org apache hadoop hive metastore api unknowndbexception
import org apache hadoop hive metastore api unknownpartitionexception
import org apache hadoop hive metastore api unknowntableexception
import org apache hadoop hive metastore model mcolumndescriptor
import org apache hadoop hive metastore model mdbprivilege
import org apache hadoop hive metastore model mdatabase
import org apache hadoop hive metastore model mfieldschema
import org apache hadoop hive metastore model mglobalprivilege
import org apache hadoop hive metastore model mindex
import org apache hadoop hive metastore model morder
import org apache hadoop hive metastore model mpartition
import org apache hadoop hive metastore model mpartitioncolumnprivilege
import org apache hadoop hive metastore model mpartitioncolumnstatistics
import org apache hadoop hive metastore model mpartitionevent
import org apache hadoop hive metastore model mpartitionprivilege
import org apache hadoop hive metastore model mrole
import org apache hadoop hive metastore model mrolemap
import org apache hadoop hive metastore model mserdeinfo
import org apache hadoop hive metastore model mstoragedescriptor
import org apache hadoop hive metastore model mstringlist
import org apache hadoop hive metastore model mtable
import org apache hadoop hive metastore model mtablecolumnprivilege
import org apache hadoop hive metastore model mtablecolumnstatistics
import org apache hadoop hive metastore model mtableprivilege
import org apache hadoop hive metastore model mtype
import org apache hadoop hive metastore parser expressiontree antlrnocasestringstream
import org apache hadoop hive metastore parser filterlexer
import org apache hadoop hive metastore parser filterparser
import org apache hadoop util stringutils
/**
* this class is the interface between the application logic and the database
* store that contains the objects. refrain putting any logic in mode.m* objects
* or in this file as former could be auto generated and this class would need
* to be made into a interface that can read both from a database and a
* filestore.
*/
public class objectstore implements rawstore  configurable
private static properties prop   null
private static persistencemanagerfactory pmf   null
private static lock pmfproplock   new reentrantlock
private static final log log   logfactory getlog objectstore class getname
private static enum txn_status
no_state  open  commited  rollback
private static final map<string  class> pinclassmap
static
map<string  class> map   new hashmap
map put    mtable class
map put    mstoragedescriptor class
map put    mserdeinfo class
map put    mpartition class
map put    mdatabase class
map put    mtype class
map put    mfieldschema class
map put    morder class
pinclassmap   collections unmodifiablemap map
private boolean isinitialized   false
private persistencemanager pm   null
private configuration hiveconf
int opentrasactioncalls   0
private transaction currenttransaction   null
private txn_status transactionstatus   txn_status no_state
public objectstore
public configuration getconf
return hiveconf
/**
* called whenever this object is instantiated using reflectionuils, and also
* on connection retries. in cases of connection retries, conf will usually
* contain modified values.
*/
@suppresswarnings
public void setconf configuration conf
// although an instance of objectstore is accessed by one thread, there may
// be many threads with objectstore instances. so the static variables
// pmf and prop need to be protected with locks.
pmfproplock lock
try
isinitialized   false
hiveconf   conf
properties propsfromconf   getdatasourceprops conf
boolean propschanged    propsfromconf equals prop
if  propschanged
pmf   null
prop   null
assert  isactivetransaction
shutdown
// always want to re-create pm as we don't know if it were created by the
// most recent instance of the pmf
pm   null
opentrasactioncalls   0
currenttransaction   null
transactionstatus   txn_status no_state
initialize propsfromconf
if   isinitialized
throw new runtimeexception
else
log info
finally
pmfproplock unlock
private classloader classloader
classloader   thread currentthread   getcontextclassloader
if  classloader    null
classloader   objectstore class getclassloader
@suppresswarnings
private void initialize properties dsprops
log info
prop   dsprops
pm   getpersistencemanager
isinitialized   pm    null
return
/**
* properties specified in hive-default.xml override the properties specified
* in jpox.properties.
*/
@suppresswarnings
private static properties getdatasourceprops configuration conf
properties prop   new properties
iterator<map entry<string  string>> iter   conf iterator
while  iter hasnext
map entry<string  string> e   iter next
if  e getkey   contains       e getkey   contains
object prevval   prop setproperty e getkey    conf get e getkey
if  log isdebugenabled
e getkey   equals hiveconf confvars metastorepwd varname
log debug     e getkey         prevval
e getvalue
if  log isdebugenabled
for  entry<object  object> e   prop entryset
if   e getkey   equals hiveconf confvars metastorepwd varname
log debug e getkey         e getvalue
return prop
private static persistencemanagerfactory getpmf
if  pmf    null
pmf   jdohelper getpersistencemanagerfactory prop
datastorecache dsc   pmf getdatastorecache
if  dsc    null
hiveconf conf   new hiveconf objectstore class
string objtypes   hiveconf getvar conf  hiveconf confvars metastore_cache_pinobjtypes
log info
if  objtypes    null    objtypes length   > 0
objtypes   objtypes tolowercase
string typetokens   objtypes split
for  string type   typetokens
type   type trim
if  pinclassmap containskey type
dsc pinall true  pinclassmap get type
else
log warn type       org apache commons lang stringutils join pinclassmap keyset
else
log warn
return pmf
@interfaceaudience limitedprivate
@interfacestability evolving
public persistencemanager getpersistencemanager
return getpmf   getpersistencemanager
public void shutdown
if  pm    null
pm close
/**
* opens a new one or the one already created every call of this function must
* have corresponding commit or rollback function call
*
* @return an active transaction
*/
public boolean opentransaction
opentrasactioncalls
if  opentrasactioncalls    1
currenttransaction   pm currenttransaction
currenttransaction begin
transactionstatus   txn_status open
else
// something is wrong since opentransactioncalls is greater than 1 but
// currenttransaction is not active
assert   currenttransaction    null      currenttransaction isactive
return currenttransaction isactive
/**
* if this is the commit of the first open call then an actual commit is
* called.
*
* @return always returns true
*/
@suppresswarnings
public boolean committransaction
if  txn_status rollback    transactionstatus
return false
if  opentrasactioncalls <  0
throw new runtimeexception
opentrasactioncalls
if   currenttransaction isactive
throw new runtimeexception
opentrasactioncalls
if   opentrasactioncalls    0     currenttransaction isactive
transactionstatus   txn_status commited
currenttransaction commit
return true
/**
* @return true if there is an active transaction. if the current transaction
*         is either committed or rolled back it returns false
*/
public boolean isactivetransaction
if  currenttransaction    null
return false
return currenttransaction isactive
/**
* rolls back the current transaction if it is active
*/
public void rollbacktransaction
if  opentrasactioncalls < 1
return
opentrasactioncalls   0
if  currenttransaction isactive
transactionstatus    txn_status rollback
transactionstatus   txn_status rollback
// could already be rolled back
currenttransaction rollback
public void createdatabase database db  throws invalidobjectexception  metaexception
boolean commited   false
mdatabase mdb   new mdatabase
mdb setname db getname   tolowercase
mdb setlocationuri db getlocationuri
mdb setdescription db getdescription
mdb setparameters db getparameters
try
opentransaction
pm makepersistent mdb
commited   committransaction
finally
if   commited
rollbacktransaction
@suppresswarnings
private mdatabase getmdatabase string name  throws nosuchobjectexception
mdatabase mdb   null
boolean commited   false
try
opentransaction
name   name tolowercase   trim
query query   pm newquery mdatabase class
query declareparameters
query setunique true
mdb    mdatabase  query execute name
pm retrieve mdb
commited   committransaction
finally
if   commited
rollbacktransaction
if  mdb    null
throw new nosuchobjectexception     name
return mdb
public database getdatabase string name  throws nosuchobjectexception
mdatabase mdb   null
boolean commited   false
try
opentransaction
mdb   getmdatabase name
commited   committransaction
finally
if   commited
rollbacktransaction
database db   new database
db setname mdb getname
db setdescription mdb getdescription
db setlocationuri mdb getlocationuri
db setparameters mdb getparameters
return db
/**
* alter the database object in metastore. currently only the parameters
* of the database can be changed.
* @param dbname the database name
* @param db the hive database object
* @throws metaexception
* @throws nosuchobjectexception
*/
public boolean alterdatabase string dbname  database db
throws metaexception  nosuchobjectexception
mdatabase mdb   null
boolean committed   false
try
mdb   getmdatabase dbname
// currently only allow changing database parameters
mdb setparameters db getparameters
opentransaction
pm makepersistent mdb
committed   committransaction
finally
if   committed
rollbacktransaction
return false
return true
public boolean dropdatabase string dbname  throws nosuchobjectexception  metaexception
boolean success   false
log info     dbname
dbname   dbname tolowercase
try
opentransaction
// then drop the database
mdatabase db   getmdatabase dbname
pm retrieve db
if  db    null
list<mdbprivilege> dbgrants   this listdatabasegrants dbname
if  dbgrants    null    dbgrants size   > 0
pm deletepersistentall dbgrants
pm deletepersistent db
success   committransaction
finally
if   success
rollbacktransaction
return success
public list<string> getdatabases string pattern  throws metaexception
boolean commited   false
list<string> databases   null
try
opentransaction
// take the pattern and split it on the | to get all the composing
// patterns
string subpatterns   pattern trim   split
string query
boolean first   true
for  string subpattern   subpatterns
subpattern       subpattern replaceall
if   first
query   query
query   query
first   false
query   query
query q   pm newquery query
q setresult
q setordering
collection names    collection  q execute
databases   new arraylist<string>
for  iterator i   names iterator    i hasnext
databases add  string  i next
commited   committransaction
finally
if   commited
rollbacktransaction
return databases
public list<string> getalldatabases   throws metaexception
return getdatabases
private mtype getmtype type type
list<mfieldschema> fields   new arraylist<mfieldschema>
if  type getfields      null
for  fieldschema field   type getfields
fields add new mfieldschema field getname    field gettype    field
getcomment
return new mtype type getname    type gettype1    type gettype2    fields
private type gettype mtype mtype
list<fieldschema> fields   new arraylist<fieldschema>
if  mtype getfields      null
for  mfieldschema field   mtype getfields
fields add new fieldschema field getname    field gettype    field
getcomment
type ret   new type
ret setname mtype getname
ret settype1 mtype gettype1
ret settype2 mtype gettype2
ret setfields fields
return ret
public boolean createtype type type
boolean success   false
mtype mtype   getmtype type
boolean commited   false
try
opentransaction
pm makepersistent mtype
commited   committransaction
success   true
finally
if   commited
rollbacktransaction
return success
public type gettype string typename
type type   null
boolean commited   false
try
opentransaction
query query   pm newquery mtype class
query declareparameters
query setunique true
mtype mtype    mtype  query execute typename trim
pm retrieve type
if  mtype    null
type   gettype mtype
commited   committransaction
finally
if   commited
rollbacktransaction
return type
public boolean droptype string typename
boolean success   false
try
opentransaction
query query   pm newquery mtype class
query declareparameters
query setunique true
mtype type    mtype  query execute typename trim
pm retrieve type
if  type    null
pm deletepersistent type
success   committransaction
catch  jdoobjectnotfoundexception e
success   committransaction
log debug     typename  e
finally
if   success
rollbacktransaction
return success
public void createtable table tbl  throws invalidobjectexception  metaexception
boolean commited   false
try
opentransaction
mtable mtbl   converttomtable tbl
pm makepersistent mtbl
principalprivilegeset principalprivs   tbl getprivileges
list<object> topersistprivobjs   new arraylist<object>
if  principalprivs    null
int now    int  system currenttimemillis   1000
map<string  list<privilegegrantinfo>> userprivs   principalprivs getuserprivileges
putpersistentprivobjects mtbl  topersistprivobjs  now  userprivs  principaltype user
map<string  list<privilegegrantinfo>> groupprivs   principalprivs getgroupprivileges
putpersistentprivobjects mtbl  topersistprivobjs  now  groupprivs  principaltype group
map<string  list<privilegegrantinfo>> roleprivs   principalprivs getroleprivileges
putpersistentprivobjects mtbl  topersistprivobjs  now  roleprivs  principaltype role
pm makepersistentall topersistprivobjs
commited   committransaction
finally
if   commited
rollbacktransaction
/**
* convert privilegegrantinfo from privmap to mtableprivilege, and add all of
* them to the topersistprivobjs. these privilege objects will be persisted as
* part of createtable.
*
* @param mtbl
* @param topersistprivobjs
* @param now
* @param privmap
* @param type
*/
private void putpersistentprivobjects mtable mtbl  list<object> topersistprivobjs
int now  map<string  list<privilegegrantinfo>> privmap  principaltype type
if  privmap    null
for  map entry<string  list<privilegegrantinfo>> entry   privmap
entryset
string principalname   entry getkey
list<privilegegrantinfo> privs   entry getvalue
for  int i   0  i < privs size    i
privilegegrantinfo priv   privs get i
if  priv    null
continue
mtableprivilege mtblsec   new mtableprivilege
principalname  type tostring    mtbl  priv getprivilege
now  priv getgrantor    priv getgrantortype   tostring    priv
isgrantoption
topersistprivobjs add mtblsec
public boolean droptable string dbname  string tablename  throws metaexception
nosuchobjectexception  invalidobjectexception  invalidinputexception
boolean success   false
try
opentransaction
mtable tbl   getmtable dbname  tablename
pm retrieve tbl
if  tbl    null
// first remove all the grants
list<mtableprivilege> tabgrants   listalltablegrants dbname  tablename
if  tabgrants    null    tabgrants size   > 0
pm deletepersistentall tabgrants
list<mtablecolumnprivilege> tblcolgrants   listtableallcolumngrants dbname
tablename
if  tblcolgrants    null    tblcolgrants size   > 0
pm deletepersistentall tblcolgrants
list<mpartitionprivilege> partgrants   this listtableallpartitiongrants dbname  tablename
if  partgrants    null    partgrants size   > 0
pm deletepersistentall partgrants
list<mpartitioncolumnprivilege> partcolgrants   listtableallpartitioncolumngrants dbname
tablename
if  partcolgrants    null    partcolgrants size   > 0
pm deletepersistentall partcolgrants
// delete column statistics if present
try
deletetablecolumnstatistics dbname  tablename  null
catch  nosuchobjectexception e
log info     dbname
tablename
predropstoragedescriptor tbl getsd
// then remove the table
pm deletepersistentall tbl
success   committransaction
finally
if   success
rollbacktransaction
return success
public table gettable string dbname  string tablename  throws metaexception
boolean commited   false
table tbl   null
try
opentransaction
tbl   converttotable getmtable dbname  tablename
commited   committransaction
finally
if   commited
rollbacktransaction
return tbl
public list<string> gettables string dbname  string pattern
throws metaexception
boolean commited   false
list<string> tbls   null
try
opentransaction
dbname   dbname tolowercase   trim
// take the pattern and split it on the | to get all the composing
// patterns
string subpatterns   pattern trim   split
string query
boolean first   true
for  string subpattern   subpatterns
subpattern       subpattern replaceall
if   first
query   query
query   query
first   false
query   query
query q   pm newquery query
q declareparameters
q setresult
q setordering
collection names    collection  q execute dbname
tbls   new arraylist<string>
for  iterator i   names iterator    i hasnext
tbls add  string  i next
commited   committransaction
finally
if   commited
rollbacktransaction
return tbls
public list<string> getalltables string dbname  throws metaexception
return gettables dbname
private mtable getmtable string db  string table
mtable mtbl   null
boolean commited   false
try
opentransaction
db   db tolowercase   trim
table   table tolowercase   trim
query query   pm newquery mtable class
query declareparameters
query setunique true
mtbl    mtable  query execute table  db
pm retrieve mtbl
commited   committransaction
finally
if   commited
rollbacktransaction
return mtbl
public list<table> gettableobjectsbyname string db  list<string> tbl_names
throws metaexception  unknowndbexception
list<table> tables   new arraylist<table>
boolean committed   false
try
opentransaction
db   db tolowercase   trim
query dbexistsquery   pm newquery mdatabase class
dbexistsquery declareparameters
dbexistsquery setunique true
dbexistsquery setresult
string dbnameifexists    string  dbexistsquery execute db
if  dbnameifexists    null    dbnameifexists isempty
throw new unknowndbexception     db
list<string> lowered_tbl_names   new arraylist<string>
for  string t   tbl_names
lowered_tbl_names add t tolowercase   trim
query query   pm newquery mtable class
query setfilter
query declareparameters
collection mtables    collection  query execute db  lowered_tbl_names
for  iterator iter   mtables iterator    iter hasnext
tables add converttotable  mtable  iter next
committed   committransaction
finally
if   committed
rollbacktransaction
return tables
private table converttotable mtable mtbl  throws metaexception
if  mtbl    null
return null
string tabletype   mtbl gettabletype
if  tabletype    null
// for backwards compatibility with old metastore persistence
if  mtbl getvieworiginaltext      null
tabletype   tabletype virtual_view tostring
else if    equals mtbl getparameters   get
tabletype   tabletype external_table tostring
else
tabletype   tabletype managed_table tostring
return new table mtbl gettablename    mtbl getdatabase   getname    mtbl
getowner    mtbl getcreatetime    mtbl getlastaccesstime    mtbl
getretention    converttostoragedescriptor mtbl getsd
converttofieldschemas mtbl getpartitionkeys     mtbl getparameters
mtbl getvieworiginaltext    mtbl getviewexpandedtext
tabletype
private mtable converttomtable table tbl  throws invalidobjectexception
metaexception
if  tbl    null
return null
mdatabase mdb   null
try
mdb   getmdatabase tbl getdbname
catch  nosuchobjectexception e
log error stringutils stringifyexception e
throw new invalidobjectexception     tbl getdbname
// if the table has property external set, update table type
// accordingly
string tabletype   tbl gettabletype
boolean isexternal     equals tbl getparameters   get
if  tabletype managed_table tostring   equals tabletype
if  isexternal
tabletype   tabletype external_table tostring
if  tabletype external_table tostring   equals tabletype
if   isexternal
tabletype   tabletype managed_table tostring
// a new table is always created with a new column descriptor
return new mtable tbl gettablename   tolowercase    mdb
converttomstoragedescriptor tbl getsd     tbl getowner    tbl
getcreatetime    tbl getlastaccesstime    tbl getretention
converttomfieldschemas tbl getpartitionkeys     tbl getparameters
tbl getvieworiginaltext    tbl getviewexpandedtext
tabletype
private list<mfieldschema> converttomfieldschemas list<fieldschema> keys
list<mfieldschema> mkeys   null
if  keys    null
mkeys   new arraylist<mfieldschema> keys size
for  fieldschema part   keys
mkeys add new mfieldschema part getname   tolowercase
part gettype    part getcomment
return mkeys
private list<fieldschema> converttofieldschemas list<mfieldschema> mkeys
list<fieldschema> keys   null
if  mkeys    null
keys   new arraylist<fieldschema> mkeys size
for  mfieldschema part   mkeys
keys add new fieldschema part getname    part gettype    part
getcomment
return keys
private list<morder> converttomorders list<order> keys
list<morder> mkeys   null
if  keys    null
mkeys   new arraylist<morder> keys size
for  order part   keys
mkeys add new morder part getcol   tolowercase    part getorder
return mkeys
private list<order> converttoorders list<morder> mkeys
list<order> keys   null
if  mkeys    null
keys   new arraylist<order> mkeys size
for  morder part   mkeys
keys add new order part getcol    part getorder
return keys
private serdeinfo convertoserdeinfo mserdeinfo ms  throws metaexception
if  ms    null
throw new metaexception
return new serdeinfo ms getname    ms getserializationlib    ms
getparameters
private mserdeinfo convertomserdeinfo serdeinfo ms  throws metaexception
if  ms    null
throw new metaexception
return new mserdeinfo ms getname    ms getserializationlib    ms
getparameters
/**
* given a list of model field schemas, create a new model column descriptor.
* @param cols the columns the column descriptor contains
* @return a new column descriptor db-backed object
*/
private mcolumndescriptor createnewmcolumndescriptor list<mfieldschema> cols
if  cols    null
return null
return new mcolumndescriptor cols
// msd and sd should be same objects. not sure how to make then same right now
// mserdeinfo *& serdeinfo should be same as well
private storagedescriptor converttostoragedescriptor mstoragedescriptor msd
boolean nofs
throws metaexception
if  msd    null
return null
list<mfieldschema> mfieldschemas   msd getcd      null ? null   msd getcd   getcols
storagedescriptor sd   new storagedescriptor nofs ? null   converttofieldschemas mfieldschemas
msd getlocation    msd getinputformat    msd getoutputformat    msd
iscompressed    msd getnumbuckets    convertoserdeinfo msd
getserdeinfo     msd getbucketcols    converttoorders msd
getsortcols     msd getparameters
skewedinfo skewedinfo   new skewedinfo msd getskewedcolnames
converttoskewedvalues msd getskewedcolvalues
coverttoskewedmap msd getskewedcolvaluelocationmaps
sd setskewedinfo skewedinfo
sd setstoredassubdirectories msd isstoredassubdirectories
return sd
private storagedescriptor converttostoragedescriptor mstoragedescriptor msd
throws metaexception
return converttostoragedescriptor msd  false
/**
* convert a list of mstringlist to a list of list string
*
* @param mlists
* @return
*/
private list<list<string>> converttoskewedvalues list<mstringlist> mlists
list<list<string>> lists   null
if  mlists    null
lists   new arraylist<list<string>> mlists size
for  mstringlist element   mlists
lists add new arraylist<string> element getinternallist
return lists
private list<mstringlist> converttomstringlists list<list<string>> mlists
list<mstringlist> lists   null
if  null    mlists
lists   new arraylist<mstringlist>
for  list<string> mlist   mlists
lists add new mstringlist mlist
return lists
/**
* convert a mstringlist map to a map
* @param mmap
* @return
*/
private map<list<string>  string> coverttoskewedmap map<mstringlist  string> mmap
map<list<string>  string> map   null
if  mmap    null
map   new hashmap<list<string>  string> mmap size
set<mstringlist> keys   mmap keyset
for  mstringlist key   keys
map put new arraylist<string> key getinternallist     mmap get key
return map
/**
* covert a map to a mstringlist map
* @param mmap
* @return
*/
private map<mstringlist  string> coverttomapmstringlist map<list<string>  string> mmap
map<mstringlist  string> map   null
if  mmap    null
map   new hashmap<mstringlist  string> mmap size
set<list<string>> keys   mmap keyset
for  list<string> key   keys
map put new mstringlist key   mmap get key
return map
/**
* converts a storage descriptor to a db-backed storage descriptor.  creates a
*   new db-backed column descriptor object for this sd.
* @param sd the storage descriptor to wrap in a db-backed object
* @return the storage descriptor db-backed object
* @throws metaexception
*/
private mstoragedescriptor converttomstoragedescriptor storagedescriptor sd
throws metaexception
if  sd    null
return null
mcolumndescriptor mcd   createnewmcolumndescriptor converttomfieldschemas sd getcols
return converttomstoragedescriptor sd  mcd
/**
* converts a storage descriptor to a db-backed storage descriptor.  it points the
* storage descriptor's column descriptor to the one passed as an argument,
* so it does not create a new mcolumn descriptor object.
* @param sd the storage descriptor to wrap in a db-backed object
* @param mcd the db-backed column descriptor
* @return the db-backed storage descriptor object
* @throws metaexception
*/
private mstoragedescriptor converttomstoragedescriptor storagedescriptor sd
mcolumndescriptor mcd  throws metaexception
if  sd    null
return null
return new mstoragedescriptor mcd  sd
getlocation    sd getinputformat    sd getoutputformat    sd
iscompressed    sd getnumbuckets    convertomserdeinfo sd
getserdeinfo     sd getbucketcols
converttomorders sd getsortcols     sd getparameters
null    sd getskewedinfo    ? null
sd getskewedinfo   getskewedcolnames
converttomstringlists  null    sd getskewedinfo    ? null   sd getskewedinfo
getskewedcolvalues
coverttomapmstringlist  null    sd getskewedinfo    ? null   sd getskewedinfo
getskewedcolvaluelocationmaps     sd isstoredassubdirectories
public boolean addpartition partition part  throws invalidobjectexception
metaexception
boolean success   false
boolean commited   false
try
mtable table   this getmtable part getdbname    part gettablename
list<mtableprivilege> tabgrants   null
list<mtablecolumnprivilege> tabcolumngrants   null
if    equalsignorecase table getparameters   get
tabgrants   this listalltablegrants part
getdbname    part gettablename
tabcolumngrants   this listtableallcolumngrants
part getdbname    part gettablename
opentransaction
mpartition mpart   converttompart part  true
pm makepersistent mpart
int now    int  system currenttimemillis   1000
list<object> topersist   new arraylist<object>
if  tabgrants    null
for  mtableprivilege tab  tabgrants
mpartitionprivilege partgrant   new mpartitionprivilege tab
getprincipalname    tab getprincipaltype
mpart  tab getprivilege    now  tab getgrantor    tab
getgrantortype    tab getgrantoption
topersist add partgrant
if  tabcolumngrants    null
for  mtablecolumnprivilege col   tabcolumngrants
mpartitioncolumnprivilege partcolumn   new mpartitioncolumnprivilege col
getprincipalname    col getprincipaltype    mpart  col
getcolumnname    col getprivilege    now  col getgrantor    col
getgrantortype    col getgrantoption
topersist add partcolumn
if  topersist size   > 0
pm makepersistentall topersist
commited   committransaction
success   true
finally
if   commited
rollbacktransaction
return success
public partition getpartition string dbname  string tablename
list<string> part_vals  throws nosuchobjectexception  metaexception
opentransaction
partition part   converttopart getmpartition dbname  tablename  part_vals
committransaction
if part    null
throw new nosuchobjectexception
part_vals tostring
part setvalues part_vals
return part
private mpartition getmpartition string dbname  string tablename
list<string> part_vals  throws metaexception
mpartition mpart   null
boolean commited   false
try
opentransaction
dbname   dbname tolowercase   trim
tablename   tablename tolowercase   trim
mtable mtbl   getmtable dbname  tablename
if  mtbl    null
commited   committransaction
return null
// change the query to use part_vals instead of the name which is
// redundant
string name   warehouse makepartname converttofieldschemas mtbl
getpartitionkeys     part_vals
query query   pm newquery mpartition class
query declareparameters
query setunique true
mpart    mpartition  query execute tablename  dbname  name
pm retrieve mpart
commited   committransaction
finally
if   commited
rollbacktransaction
return mpart
/**
* convert a partition object into an mpartition, which is an object backed by the db
* if the partition's set of columns is the same as the parent table's and usetablecd
* is true, then this partition's storage descriptor's column descriptor will point
* to the same one as the table's storage descriptor.
* @param part the partition to convert
* @param usetablecd whether to try to use the parent table's column descriptor.
* @return the model partition object
* @throws invalidobjectexception
* @throws metaexception
*/
private mpartition converttompart partition part  boolean usetablecd
throws invalidobjectexception  metaexception
if  part    null
return null
mtable mt   getmtable part getdbname    part gettablename
if  mt    null
throw new invalidobjectexception
// if this partition's set of columns is the same as the parent table's,
// use the parent table's, so we do not create a duplicate column descriptor,
// thereby saving space
mstoragedescriptor msd
if  usetablecd
mt getsd      null    mt getsd   getcd      null
mt getsd   getcd   getcols      null
part getsd      null
converttofieldschemas mt getsd   getcd   getcols
equals part getsd   getcols
msd   converttomstoragedescriptor part getsd    mt getsd   getcd
else
msd   converttomstoragedescriptor part getsd
return new mpartition warehouse makepartname converttofieldschemas mt
getpartitionkeys     part getvalues     mt  part getvalues    part
getcreatetime    part getlastaccesstime
msd  part getparameters
private partition converttopart mpartition mpart  throws metaexception
if  mpart    null
return null
return new partition mpart getvalues    mpart gettable   getdatabase
getname    mpart gettable   gettablename    mpart getcreatetime
mpart getlastaccesstime    converttostoragedescriptor mpart getsd
mpart getparameters
private partition converttopart string dbname  string tblname  mpartition mpart
throws metaexception
if  mpart    null
return null
return new partition mpart getvalues    dbname  tblname  mpart getcreatetime
mpart getlastaccesstime    converttostoragedescriptor mpart getsd    true
mpart getparameters
@override
public boolean droppartition string dbname  string tablename
list<string> part_vals  throws metaexception  nosuchobjectexception  invalidobjectexception
invalidinputexception
boolean success   false
try
opentransaction
mpartition part   getmpartition dbname  tablename  part_vals
droppartitioncommon part
success   committransaction
finally
if   success
rollbacktransaction
return success
/**
* drop an mpartition and cascade deletes (e.g., delete partition privilege grants,
*   drop the storage descriptor cleanly, etc.)
* @param part - the mpartition to drop
* @return whether the transaction committed successfully
* @throws invalidinputexception
* @throws invalidobjectexception
* @throws metaexception
* @throws nosuchobjectexception
*/
private boolean droppartitioncommon mpartition part  throws nosuchobjectexception  metaexception
invalidobjectexception  invalidinputexception
boolean success   false
try
opentransaction
if  part    null
list<mfieldschema> schemas   part gettable   getpartitionkeys
list<string> colnames   new arraylist<string>
for  mfieldschema col  schemas
colnames add col getname
string partname   fileutils makepartname colnames  part getvalues
list<mpartitionprivilege> partgrants   listpartitiongrants
part gettable   getdatabase   getname
part gettable   gettablename
partname
if  partgrants    null    partgrants size   > 0
pm deletepersistentall partgrants
list<mpartitioncolumnprivilege> partcolumngrants   listpartitionallcolumngrants
part gettable   getdatabase   getname
part gettable   gettablename
partname
if  partcolumngrants    null    partcolumngrants size   > 0
pm deletepersistentall partcolumngrants
string dbname   part gettable   getdatabase   getname
string tablename   part gettable   gettablename
// delete partition level column stats if it exists
try
deletepartitioncolumnstatistics dbname  tablename  partname  part getvalues    null
catch  nosuchobjectexception e
log info
predropstoragedescriptor part getsd
pm deletepersistent part
success   committransaction
finally
if   success
rollbacktransaction
return success
public list<partition> getpartitions string dbname  string tablename  int max
throws metaexception
opentransaction
list<partition> parts   converttoparts listmpartitions dbname  tablename  max
committransaction
return parts
@override
public list<partition> getpartitionswithauth string dbname  string tblname
short max  string username  list<string> groupnames
throws metaexception  nosuchobjectexception  invalidobjectexception
boolean success   false
try
opentransaction
list<mpartition> mparts   listmpartitions dbname  tblname  max
list<partition> parts   new arraylist<partition> mparts size
if  mparts    null    mparts size  >0
for  mpartition mpart   mparts
mtable mtbl   mpart gettable
partition part   converttopart mpart
parts add part
if    equalsignorecase mtbl getparameters   get
string partname   warehouse makepartname this converttofieldschemas mtbl
getpartitionkeys     part getvalues
principalprivilegeset partauth   this getpartitionprivilegeset dbname
tblname  partname  username  groupnames
part setprivileges partauth
success    committransaction
return parts
finally
if   success
rollbacktransaction
@override
public partition getpartitionwithauth string dbname  string tblname
list<string> partvals  string user_name  list<string> group_names
throws nosuchobjectexception  metaexception  invalidobjectexception
boolean success   false
try
opentransaction
mpartition mpart   getmpartition dbname  tblname  partvals
if  mpart    null
committransaction
throw new nosuchobjectexception
partvals tostring
partition part   null
mtable mtbl   mpart gettable
part   converttopart mpart
if    equalsignorecase mtbl getparameters   get
string partname   warehouse makepartname this converttofieldschemas mtbl
getpartitionkeys     partvals
principalprivilegeset partauth   this getpartitionprivilegeset dbname
tblname  partname  user_name  group_names
part setprivileges partauth
success   committransaction
return part
finally
if   success
rollbacktransaction
private list<partition> converttoparts list<mpartition> mparts
throws metaexception
list<partition> parts   new arraylist<partition> mparts size
for  mpartition mp   mparts
parts add converttopart mp
return parts
private list<partition> converttoparts string dbname  string tblname  list<mpartition> mparts
throws metaexception
list<partition> parts   new arraylist<partition> mparts size
for  mpartition mp   mparts
parts add converttopart dbname  tblname  mp
return parts
// todo:pc implement max
public list<string> listpartitionnames string dbname  string tablename
short max  throws metaexception
list<string> pns   new arraylist<string>
boolean success   false
try
opentransaction
log debug
dbname   dbname tolowercase   trim
tablename   tablename tolowercase   trim
query q   pm newquery
q declareparameters
q setresult
if max > 0
q setrange 0  max
collection names    collection  q execute dbname  tablename
for  iterator i   names iterator    i hasnext
pns add  string  i next
success   committransaction
finally
if   success
rollbacktransaction
return pns
/**
* retrieves a collection of partition-related results from the database that match
*  the partial specification given for a specific table.
* @param dbname the name of the database
* @param tablename the name of the table
* @param part_vals the partial specification values
* @param max_parts the maximum number of partitions to return
* @param resultscol the metadata column of the data to return, e.g. partitionname, etc.
*        if resultscol is empty or null, a collection of mpartition objects is returned
* @throws nosuchobjectexception
* @results a collection of partition-related items from the db that match the partial spec
*          for a table.  the type of each item in the collection corresponds to the column
*          you want results for.  e.g., if resultscol is partitionname, the collection
*          has types of string, and if resultscol is null, the types are mpartition.
*/
private collection getpartitionpsqueryresults string dbname  string tablename
list<string> part_vals  short max_parts  string resultscol
throws metaexception  nosuchobjectexception
dbname   dbname tolowercase   trim
tablename   tablename tolowercase   trim
table table   gettable dbname  tablename
if  table    null
throw new nosuchobjectexception dbname       tablename
list<fieldschema> partcols   table getpartitionkeys
int numpartkeys   partcols size
if  part_vals size   > numpartkeys
throw new metaexception
partcols   partcols sublist 0  part_vals size
//construct a pattern of the form: partkey=partval/partkey2=partval2/...
// where partval is either the escaped partition value given as input,
// or a regex of the form ".*"
//this works because the "=" and "/" separating key names and partition key/values
// are not escaped.
string partnamematcher   warehouse makepartname partcols  part_vals
//add ".*" to the regex to match anything else afterwards the partial spec.
if  part_vals size   < numpartkeys
partnamematcher
query q   pm newquery mpartition class
stringbuilder queryfilter   new stringbuilder
queryfilter append
queryfilter append
q setfilter queryfilter tostring
q declareparameters
if  max_parts >  0
//user specified a row limit, set it on the query
q setrange 0  max_parts
if  resultscol    null     resultscol isempty
q setresult resultscol
return  collection  q execute dbname  tablename  partnamematcher
@override
public list<partition> listpartitionspswithauth string db_name  string tbl_name
list<string> part_vals  short max_parts  string username  list<string> groupnames
throws metaexception  invalidobjectexception  nosuchobjectexception
list<partition> partitions   new arraylist<partition>
boolean success   false
try
opentransaction
log debug
collection parts   getpartitionpsqueryresults db_name  tbl_name
part_vals  max_parts  null
mtable mtbl   getmtable db_name  tbl_name
for  object o   parts
partition part   converttopart  mpartition  o
//set auth privileges
if  null    username    null    groupnames
equalsignorecase mtbl getparameters   get
string partname   warehouse makepartname this converttofieldschemas mtbl
getpartitionkeys     part getvalues
principalprivilegeset partauth   getpartitionprivilegeset db_name
tbl_name  partname  username  groupnames
part setprivileges partauth
partitions add part
success   committransaction
finally
if   success
rollbacktransaction
return partitions
@override
public list<string> listpartitionnamesps string dbname  string tablename
list<string> part_vals  short max_parts  throws metaexception  nosuchobjectexception
list<string> partitionnames   new arraylist<string>
boolean success   false
try
opentransaction
log debug
collection names   getpartitionpsqueryresults dbname  tablename
part_vals  max_parts
for  object o   names
partitionnames add  string  o
success   committransaction
finally
if   success
rollbacktransaction
return partitionnames
// todo:pc implement max
private list<mpartition> listmpartitions string dbname  string tablename
int max
boolean success   false
list<mpartition> mparts   null
try
opentransaction
log debug
dbname   dbname tolowercase   trim
tablename   tablename tolowercase   trim
query query   pm newquery mpartition class
query declareparameters
query setordering
if max > 0
query setrange 0  max
mparts    list<mpartition>  query execute tablename  dbname
log debug
pm retrieveall mparts
success   committransaction
log debug
finally
if   success
rollbacktransaction
return mparts
@override
public list<partition> getpartitionsbynames string dbname  string tblname
list<string> partnames  throws metaexception  nosuchobjectexception
boolean success   false
try
opentransaction
stringbuilder sb   new stringbuilder
int n   0
map<string  string> params   new hashmap<string  string>
for  iterator<string> itr   partnames iterator    itr hasnext
string pn       n
n
string part   itr next
params put pn  part
sb append    append pn
sb append
sb setlength sb length     4      remove the last
sb append
query query   pm newquery mpartition class  sb tostring
log debug     sb tostring
params put    tblname trim
params put    dbname trim
string parameterdeclaration   makeparameterdeclarationstring params
query declareparameters parameterdeclaration
query setordering
list<mpartition> mparts    list<mpartition>  query executewithmap params
// pm.retrieveall(mparts); // retrieveall is pessimistic. some fields may not be needed
list<partition> results   converttoparts dbname  tblname  mparts
// pm.maketransientall(mparts); // maketransient will prohibit future access of unfetched fields
query closeall
success   committransaction
return results
finally
if   success
rollbacktransaction
@override
public list<partition> getpartitionsbyfilter string dbname  string tblname
string filter  short maxparts  throws metaexception  nosuchobjectexception
opentransaction
list<partition> parts   converttoparts listmpartitionsbyfilter dbname
tblname  filter  maxparts
log info     parts size
committransaction
return parts
private filterparser getfilterparser string filter  throws metaexception
charstream cs   new antlrnocasestringstream filter
filterlexer lexer   new filterlexer cs
commontokenstream tokens   new commontokenstream
tokens settokensource  lexer
filterparser parser   new filterparser tokens
try
parser filter
catch recognitionexception re
throw new metaexception     re
if  lexer errormsg    null
throw new metaexception     lexer errormsg
return parser
/**
* makes a jdo query filter string
* if mtable is not null, generates the query to filter over partitions in a table.
* if mtable is null, generates the query to filter over tables in a database
*/
private string makequeryfilterstring mtable mtable  string filter
map<string  object> params
throws metaexception
stringbuilder querybuilder   new stringbuilder
if  mtable    null
querybuilder append
else
querybuilder append
if  filter    null    filter length   > 0
filterparser parser   getfilterparser filter
string jdofilter
if  mtable    null
table table   converttotable mtable
jdofilter   parser tree generatejdofilter table  params
else
jdofilter   parser tree generatejdofilter null  params
log debug     jdofilter
if  jdofilter trim   length   > 0
querybuilder append
querybuilder append jdofilter trim
querybuilder append
return querybuilder tostring
private string maketablequeryfilterstring string filter
map<string  object> params
throws metaexception
return makequeryfilterstring null  filter  params
private string makeparameterdeclarationstring map<string  string> params
//create the parameter declaration string
stringbuilder paramdecl   new stringbuilder
for  string key   params keyset
paramdecl append     key
return paramdecl tostring
private string makeparameterdeclarationstringobj map<string  object> params
//create the parameter declaration string
stringbuilder paramdecl   new stringbuilder
for  entry<string  object> entry   params entryset
paramdecl append
paramdecl append entry getvalue   getclass   getname
paramdecl append
paramdecl append entry getkey
return paramdecl tostring
private list<mpartition> listmpartitionsbyfilter string dbname  string tablename
string filter  short maxparts  throws metaexception  nosuchobjectexception
boolean success   false
list<mpartition> mparts   null
try
opentransaction
log debug
dbname   dbname tolowercase
tablename   tablename tolowercase
mtable mtable   getmtable dbname  tablename
if  mtable    null
throw new nosuchobjectexception
dbname       tablename
map<string  object> params   new hashmap<string  object>
string queryfilterstring
makequeryfilterstring mtable  filter  params
query query   pm newquery mpartition class
queryfilterstring
if  maxparts >  0
//user specified a row limit, set it on the query
query setrange 0  maxparts
log debug     filter
queryfilterstring
params put    tablename trim
params put    dbname trim
string parameterdeclaration   makeparameterdeclarationstringobj params
query declareparameters parameterdeclaration
query setordering
mparts    list<mpartition>  query executewithmap params
log debug
pm retrieveall mparts
success   committransaction
log debug
finally
if   success
rollbacktransaction
return mparts
@override
public list<string> listtablenamesbyfilter string dbname  string filter  short maxtables
throws metaexception
boolean success   false
list<string> tablenames   new arraylist<string>
try
opentransaction
log debug
dbname   dbname tolowercase   trim
map<string  object> params   new hashmap<string  object>
string queryfilterstring   maketablequeryfilterstring filter  params
query query   pm newquery mtable class
query declareimports
query setresult
query setresultclass java lang string class
if  maxtables >  0
query setrange 0  maxtables
log debug     filter           queryfilterstring
params put    dbname
for  entry<string  object> entry   params entryset
log debug     entry getkey         entry getvalue
entry getvalue   getclass   getname
string parameterdeclaration   makeparameterdeclarationstringobj params
query declareparameters parameterdeclaration
query setfilter queryfilterstring
collection names    collection  query executewithmap params
//have to emulate "distinct", otherwise tables with the same name may be returned
set<string> tablenamesset   new hashset<string>
for  iterator i   names iterator    i hasnext
tablenamesset add  string  i next
tablenames   new arraylist<string> tablenamesset
log debug
success   committransaction
log debug
finally
if   success
rollbacktransaction
return tablenames
@override
public list<string> listpartitionnamesbyfilter string dbname  string tablename
string filter  short maxparts  throws metaexception
boolean success   false
list<string> partnames   new arraylist<string>
try
opentransaction
log debug
dbname   dbname tolowercase
tablename   tablename tolowercase
mtable mtable   getmtable dbname  tablename
if  mtable    null
// to be consistent with the behavior of listpartitionnames, if the
// table or db does not exist, we return an empty list
return partnames
map<string  object> params   new hashmap<string  object>
string queryfilterstring
makequeryfilterstring mtable  filter  params
query query   pm newquery
queryfilterstring
if  maxparts >  0
//user specified a row limit, set it on the query
query setrange 0  maxparts
log debug     filter
queryfilterstring
log debug     params
params put    tablename trim
params put    dbname trim
string parameterdeclaration   makeparameterdeclarationstringobj params
query declareparameters parameterdeclaration
query setordering
query setresult
collection names    collection  query executewithmap params
partnames   new arraylist<string>
for  iterator i   names iterator    i hasnext
partnames add  string  i next
log debug
success   committransaction
log debug
finally
if   success
rollbacktransaction
return partnames
public void altertable string dbname  string name  table newtable
throws invalidobjectexception  metaexception
boolean success   false
try
opentransaction
name   name tolowercase
dbname   dbname tolowercase
mtable newt   converttomtable newtable
if  newt    null
throw new invalidobjectexception
mtable oldt   getmtable dbname  name
if  oldt    null
throw new metaexception     name
// for now only alter name, owner, paramters, cols, bucketcols are allowed
oldt settablename newt gettablename   tolowercase
oldt setparameters newt getparameters
oldt setowner newt getowner
// fully copy over the contents of the new sd into the old sd,
// so we don't create an extra sd in the metastore db that has no references.
copymsd newt getsd    oldt getsd
oldt setdatabase newt getdatabase
oldt setretention newt getretention
oldt setpartitionkeys newt getpartitionkeys
oldt settabletype newt gettabletype
oldt setlastaccesstime newt getlastaccesstime
oldt setvieworiginaltext newt getvieworiginaltext
oldt setviewexpandedtext newt getviewexpandedtext
// commit the changes
success   committransaction
finally
if   success
rollbacktransaction
public void alterindex string dbname  string basetblname  string name  index newindex
throws invalidobjectexception  metaexception
boolean success   false
try
opentransaction
name   name tolowercase
basetblname   basetblname tolowercase
dbname   dbname tolowercase
mindex newi   converttomindex newindex
if  newi    null
throw new invalidobjectexception
mindex oldi   getmindex dbname  basetblname  name
if  oldi    null
throw new metaexception     name
// for now only alter paramters are allowed
oldi setparameters newi getparameters
// commit the changes
success   committransaction
finally
if   success
rollbacktransaction
private void alterpartitionnotxn string dbname  string name  list<string> part_vals
partition newpart  throws invalidobjectexception  metaexception
name   name tolowercase
dbname   dbname tolowercase
mpartition oldp   getmpartition dbname  name  part_vals
mpartition newp   converttompart newpart  false
if  oldp    null    newp    null
throw new invalidobjectexception
oldp setvalues newp getvalues
oldp setpartitionname newp getpartitionname
oldp setparameters newpart getparameters
copymsd newp getsd    oldp getsd
if  newp getcreatetime      oldp getcreatetime
oldp setcreatetime newp getcreatetime
if  newp getlastaccesstime      oldp getlastaccesstime
oldp setlastaccesstime newp getlastaccesstime
public void alterpartition string dbname  string name  list<string> part_vals  partition newpart
throws invalidobjectexception  metaexception
boolean success   false
try
opentransaction
alterpartitionnotxn dbname  name  part_vals  newpart
// commit the changes
success   committransaction
finally
if   success
rollbacktransaction
throw new metaexception
public void alterpartitions string dbname  string name  list<list<string>> part_vals
list<partition> newparts  throws invalidobjectexception  metaexception
boolean success   false
try
opentransaction
iterator<list<string>> part_val_itr   part_vals iterator
for  partition tmppart  newparts
list<string> tmppartvals   part_val_itr next
alterpartitionnotxn dbname  name  tmppartvals  tmppart
// commit the changes
success   committransaction
finally
if   success
rollbacktransaction
throw new metaexception
private void copymsd mstoragedescriptor newsd  mstoragedescriptor oldsd
oldsd setlocation newsd getlocation
mcolumndescriptor oldcd   oldsd getcd
// if the columns of the old column descriptor != the columns of the new one,
// then change the old storage descriptor's column descriptor.
// convert the mfieldschema's to their thrift object counterparts, because we maintain
// datastore identity (i.e., identity of the model objects are managed by jdo,
// not the application).
if    oldsd    null    oldsd getcd      null
oldsd getcd   getcols      null
newsd    null    newsd getcd      null
newsd getcd   getcols      null
converttofieldschemas newsd getcd   getcols
equals converttofieldschemas oldsd getcd   getcols
oldsd setcd newsd getcd
//if oldcd does not have any more references, then we should delete it
// from the backend db
removeunusedcolumndescriptor oldcd
oldsd setbucketcols newsd getbucketcols
oldsd setcompressed newsd iscompressed
oldsd setinputformat newsd getinputformat
oldsd setoutputformat newsd getoutputformat
oldsd setnumbuckets newsd getnumbuckets
oldsd getserdeinfo   setname newsd getserdeinfo   getname
oldsd getserdeinfo   setserializationlib
newsd getserdeinfo   getserializationlib
oldsd getserdeinfo   setparameters newsd getserdeinfo   getparameters
oldsd setskewedcolnames newsd getskewedcolnames
oldsd setskewedcolvalues newsd getskewedcolvalues
oldsd setskewedcolvaluelocationmaps newsd getskewedcolvaluelocationmaps
oldsd setsortcols newsd getsortcols
oldsd setparameters newsd getparameters
oldsd setstoredassubdirectories newsd isstoredassubdirectories
/**
* checks if a column descriptor has any remaining references by storage descriptors
* in the db.  if it does not, then delete the cd.  if it does, then do nothing.
* @param oldcd the column descriptor to delete if it is no longer referenced anywhere
*/
private void removeunusedcolumndescriptor mcolumndescriptor oldcd
if  oldcd    null
return
boolean success   false
try
opentransaction
log debug
list<mstoragedescriptor> referencedsds   liststoragedescriptorswithcd oldcd  1
//if no other sd references this cd, we can throw it out.
if  referencedsds    null    referencedsds isempty
pm retrieve oldcd
pm deletepersistent oldcd
success   committransaction
log debug
finally
if   success
rollbacktransaction
/**
* called right before an action that would drop a storage descriptor.
* this function makes the sd's reference to a cd null, and then deletes the cd
* if it no longer is referenced in the table.
* @param msd the storage descriptor to drop
*/
private void predropstoragedescriptor mstoragedescriptor msd
if  msd    null    msd getcd      null
return
mcolumndescriptor mcd   msd getcd
// because there is a 1-n relationship between cds and sds,
// we must set the sd's cd to null first before dropping the storage descriptor
// to satisfy foriegn key constraints.
msd setcd null
removeunusedcolumndescriptor mcd
/**
* get a list of storage descriptors that reference a particular column descriptor
* @param oldcd the column descriptor to get storage descriptors for
* @param maxsds the maximum number of sds to return
* @return a list of storage descriptors
*/
private list<mstoragedescriptor> liststoragedescriptorswithcd mcolumndescriptor oldcd
long maxsds
boolean success   false
list<mstoragedescriptor> sds   null
try
opentransaction
log debug
query query   pm newquery mstoragedescriptor class
query declareparameters
if maxsds >  0
//user specified a row limit, set it on the query
query setrange 0  maxsds
sds    list<mstoragedescriptor>  query execute oldcd
log debug
pm retrieveall sds
success   committransaction
log debug
finally
if   success
rollbacktransaction
return sds
@override
public boolean addindex index index  throws invalidobjectexception
metaexception
boolean commited   false
try
opentransaction
mindex idx   converttomindex index
pm makepersistent idx
commited   committransaction
return true
finally
if   commited
rollbacktransaction
return false
private mindex converttomindex index index  throws invalidobjectexception
metaexception
storagedescriptor sd   index getsd
if  sd    null
throw new invalidobjectexception
mstoragedescriptor msd   this converttomstoragedescriptor sd
mtable origtable   getmtable index getdbname    index getorigtablename
if  origtable    null
throw new invalidobjectexception
mtable indextable   getmtable index getdbname    index getindextablename
if  indextable    null
throw new invalidobjectexception
return new mindex index getindexname    origtable  index getcreatetime
index getlastaccesstime    index getparameters    indextable  msd
index getindexhandlerclass    index isdeferredrebuild
@override
public boolean dropindex string dbname  string origtablename  string indexname
throws metaexception
boolean success   false
try
opentransaction
mindex index   getmindex dbname  origtablename  indexname
if  index    null
pm deletepersistent index
success   committransaction
finally
if   success
rollbacktransaction
return success
private mindex getmindex string dbname  string originaltblname  string indexname  throws metaexception
mindex midx   null
boolean commited   false
try
opentransaction
dbname   dbname tolowercase   trim
originaltblname   originaltblname tolowercase   trim
mtable mtbl   getmtable dbname  originaltblname
if  mtbl    null
commited   committransaction
return null
query query   pm newquery mindex class
query declareparameters
query setunique true
midx    mindex  query execute originaltblname  dbname  indexname
pm retrieve midx
commited   committransaction
finally
if   commited
rollbacktransaction
return midx
@override
public index getindex string dbname  string origtablename  string indexname
throws metaexception
opentransaction
mindex mindex   this getmindex dbname  origtablename  indexname
index ret   converttoindex mindex
committransaction
return ret
private index converttoindex mindex mindex  throws metaexception
if mindex    null
return null
return new index
mindex getindexname
mindex getindexhandlerclass
mindex getorigtable   getdatabase   getname
mindex getorigtable   gettablename
mindex getcreatetime
mindex getlastaccesstime
mindex getindextable   gettablename
this converttostoragedescriptor mindex getsd
mindex getparameters
mindex getdeferredrebuild
@override
public list<index> getindexes string dbname  string origtablename  int max
throws metaexception
boolean success   false
try
opentransaction
list<mindex> mindexlist   listmindexes dbname  origtablename  max
list<index> indexes   new arraylist<index> mindexlist size
for  mindex midx   mindexlist
indexes add this converttoindex midx
success   committransaction
return indexes
finally
if   success
rollbacktransaction
private list<mindex> listmindexes string dbname  string origtablename
int max
boolean success   false
list<mindex> mindexes   null
try
opentransaction
log debug
dbname   dbname tolowercase   trim
origtablename   origtablename tolowercase   trim
query query   pm newquery mindex class
query declareparameters
mindexes    list<mindex>  query execute origtablename  dbname
log debug
pm retrieveall mindexes
success   committransaction
log debug
finally
if   success
rollbacktransaction
return mindexes
@override
public list<string> listindexnames string dbname  string origtablename
short max  throws metaexception
list<string> pns   new arraylist<string>
boolean success   false
try
opentransaction
log debug
dbname   dbname tolowercase   trim
origtablename   origtablename tolowercase   trim
query q   pm newquery
q declareparameters
q setresult
collection names    collection  q execute dbname  origtablename
for  iterator i   names iterator    i hasnext
pns add  string  i next
success   committransaction
finally
if   success
rollbacktransaction
return pns
@override
public boolean addrole string rolename  string ownername
throws invalidobjectexception  metaexception  nosuchobjectexception
boolean success   false
boolean commited   false
try
opentransaction
mrole namecheck   this getmrole rolename
if  namecheck    null
throw new invalidobjectexception     rolename
int now    int  system currenttimemillis   1000
mrole mrole   new mrole rolename  now
ownername
pm makepersistent mrole
commited   committransaction
success   true
finally
if   commited
rollbacktransaction
return success
@override
public boolean grantrole role role  string username
principaltype principaltype  string grantor  principaltype grantortype
boolean grantoption  throws metaexception  nosuchobjectexception invalidobjectexception
boolean success   false
boolean commited   false
try
mrolemap rolemap   null
try
rolemap   this getmsecurityuserrolemap username  principaltype  role
getrolename
catch  exception e
if  rolemap    null
throw new invalidobjectexception     username
role getrolename
opentransaction
mrole mrole   getmrole role getrolename
long now   system currenttimemillis   1000
mrolemap rolemember   new mrolemap username  principaltype tostring
mrole   int  now  grantor  grantortype tostring    grantoption
pm makepersistent rolemember
commited   committransaction
success   true
finally
if   commited
rollbacktransaction
return success
@override
public boolean revokerole role role  string username  principaltype principaltype  throws metaexception  nosuchobjectexception
boolean success   false
try
opentransaction
mrolemap rolemember   getmsecurityuserrolemap username  principaltype
role getrolename
pm deletepersistent rolemember
success   committransaction
finally
if   success
rollbacktransaction
return success
private mrolemap getmsecurityuserrolemap string username
principaltype principaltype  string rolename
mrolemap mrolemember   null
boolean commited   false
try
opentransaction
query query   pm newquery mrolemap class
query declareparameters
query setunique true
mrolemember    mrolemap  query executewitharray username  principaltype tostring    rolename
pm retrieve mrolemember
commited   committransaction
finally
if   commited
rollbacktransaction
return mrolemember
@override
public boolean removerole string rolename  throws metaexception
nosuchobjectexception
boolean success   false
try
opentransaction
mrole mrol   getmrole rolename
pm retrieve mrol
if  mrol    null
// first remove all the membership, the membership that this role has
// been granted
list<mrolemap> rolemap   listrolemembers mrol
if  rolemap size   > 0
pm deletepersistentall rolemap
list<mrolemap> rolemember   listmsecurityprincipalmembershiprole mrol
getrolename    principaltype role
if  rolemember size   > 0
pm deletepersistentall rolemember
// then remove all the grants
list<mglobalprivilege> usergrants   listprincipalglobalgrants
mrol getrolename    principaltype role
if  usergrants size   > 0
pm deletepersistentall usergrants
list<mdbprivilege> dbgrants   listprincipalalldbgrant mrol
getrolename    principaltype role
if  dbgrants size   > 0
pm deletepersistentall dbgrants
list<mtableprivilege> tabpartgrants   listprincipalalltablegrants
mrol getrolename    principaltype role
if  tabpartgrants size   > 0
pm deletepersistentall tabpartgrants
list<mpartitionprivilege> partgrants   listprincipalallpartitiongrants
mrol getrolename    principaltype role
if  partgrants size   > 0
pm deletepersistentall partgrants
list<mtablecolumnprivilege> tblcolumngrants   listprincipalalltablecolumngrants
mrol getrolename    principaltype role
if  tblcolumngrants size   > 0
pm deletepersistentall tblcolumngrants
list<mpartitioncolumnprivilege> partcolumngrants   listprincipalallpartitioncolumngrants
mrol getrolename    principaltype role
if  tblcolumngrants size   > 0
pm deletepersistentall partcolumngrants
// finally remove the role
pm deletepersistent mrol
success   committransaction
finally
if   success
rollbacktransaction
return success
private list<mrolemap> listroles string username
list<string> groupnames
list<mrolemap> ret   new arraylist<mrolemap>
if username    null
ret addall listroles username  principaltype user
if  groupnames    null
for  string groupname  groupnames
ret addall listroles groupname  principaltype group
return ret
@suppresswarnings
@override
public list<mrolemap> listroles string principalname
principaltype principaltype
boolean success   false
list<mrolemap> mrolemember   null
try
opentransaction
log debug
query query   pm
newquery
mrolemap class
query
declareparameters
query setunique false
mrolemember    list<mrolemap>  query executewitharray
principalname  principaltype tostring
log debug
pm retrieveall mrolemember
success   committransaction
log debug
finally
if   success
rollbacktransaction
return mrolemember
@suppresswarnings
private list<mrolemap> listmsecurityprincipalmembershiprole final string rolename
final principaltype principaltype
boolean success   false
list<mrolemap> mrolememebership   null
try
opentransaction
log debug
query query   pm newquery mrolemap class
query
declareparameters
mrolememebership    list<mrolemap>  query execute rolename  principaltype tostring
log
debug
pm retrieveall mrolememebership
success   committransaction
log
debug
finally
if   success
rollbacktransaction
return mrolememebership
public role getrole string rolename  throws nosuchobjectexception
mrole mrole   this getmrole rolename
if  mrole    null
throw new nosuchobjectexception rolename
role ret   new role mrole getrolename    mrole getcreatetime    mrole
getownername
return ret
private mrole getmrole string rolename
mrole mrole   null
boolean commited   false
try
opentransaction
query query   pm newquery mrole class
query declareparameters
query setunique true
mrole    mrole  query execute rolename
pm retrieve mrole
commited   committransaction
finally
if   commited
rollbacktransaction
return mrole
public list<string> listrolenames
boolean success   false
try
opentransaction
log debug
query query   pm newquery
query setresult
collection names    collection  query execute
list<string> rolenames    new arraylist<string>
for  iterator i   names iterator    i hasnext
rolenames add  string  i next
success   committransaction
return rolenames
finally
if   success
rollbacktransaction
@override
public principalprivilegeset getuserprivilegeset string username
list<string> groupnames  throws invalidobjectexception  metaexception
boolean commited   false
principalprivilegeset ret   new principalprivilegeset
try
opentransaction
if  username    null
list<mglobalprivilege> user   this listprincipalglobalgrants username  principaltype user
if user size  >0
map<string  list<privilegegrantinfo>> userpriv   new hashmap<string  list<privilegegrantinfo>>
list<privilegegrantinfo> grantinfos   new arraylist<privilegegrantinfo> user size
for  int i   0  i < user size    i
mglobalprivilege item   user get i
grantinfos add new privilegegrantinfo item getprivilege    item
getcreatetime    item getgrantor    getprincipaltypefromstr item
getgrantortype     item getgrantoption
userpriv put username  grantinfos
ret setuserprivileges userpriv
if  groupnames    null    groupnames size   > 0
map<string  list<privilegegrantinfo>> grouppriv   new hashmap<string  list<privilegegrantinfo>>
for string groupname  groupnames
list<mglobalprivilege> group   this listprincipalglobalgrants groupname  principaltype group
if group size  >0
list<privilegegrantinfo> grantinfos   new arraylist<privilegegrantinfo> group size
for  int i   0  i < group size    i
mglobalprivilege item   group get i
grantinfos add new privilegegrantinfo item getprivilege    item
getcreatetime    item getgrantor    getprincipaltypefromstr item
getgrantortype     item getgrantoption
grouppriv put groupname  grantinfos
ret setgroupprivileges grouppriv
commited   committransaction
finally
if   commited
rollbacktransaction
return ret
public list<privilegegrantinfo> getdbprivilege string dbname
string principalname  principaltype principaltype
throws invalidobjectexception  metaexception
dbname   dbname tolowercase   trim
if  principalname    null
list<mdbprivilege> usernamedbpriv   this listprincipaldbgrants
principalname  principaltype  dbname
if  usernamedbpriv    null    usernamedbpriv size   > 0
list<privilegegrantinfo> grantinfos   new arraylist<privilegegrantinfo>
usernamedbpriv size
for  int i   0  i < usernamedbpriv size    i
mdbprivilege item   usernamedbpriv get i
grantinfos add new privilegegrantinfo item getprivilege    item
getcreatetime    item getgrantor    getprincipaltypefromstr item
getgrantortype     item getgrantoption
return grantinfos
return new arraylist<privilegegrantinfo> 0
@override
public principalprivilegeset getdbprivilegeset string dbname
string username  list<string> groupnames  throws invalidobjectexception
metaexception
boolean commited   false
dbname   dbname tolowercase   trim
principalprivilegeset ret   new principalprivilegeset
try
opentransaction
if  username    null
map<string  list<privilegegrantinfo>> dbuserpriv   new hashmap<string  list<privilegegrantinfo>>
dbuserpriv put username  getdbprivilege dbname  username
principaltype user
ret setuserprivileges dbuserpriv
if  groupnames    null    groupnames size   > 0
map<string  list<privilegegrantinfo>> dbgrouppriv   new hashmap<string  list<privilegegrantinfo>>
for  string groupname   groupnames
dbgrouppriv put groupname  getdbprivilege dbname  groupname
principaltype group
ret setgroupprivileges dbgrouppriv
list<mrolemap> roles   listroles username  groupnames
if  roles    null    roles size   > 0
map<string  list<privilegegrantinfo>> dbrolepriv   new hashmap<string  list<privilegegrantinfo>>
for  mrolemap role   roles
string name   role getrole   getrolename
dbrolepriv
put name  getdbprivilege dbname  name  principaltype role
ret setroleprivileges dbrolepriv
commited   committransaction
finally
if   commited
rollbacktransaction
return ret
@override
public principalprivilegeset getpartitionprivilegeset string dbname
string tablename  string partition  string username
list<string> groupnames  throws invalidobjectexception  metaexception
boolean commited   false
principalprivilegeset ret   new principalprivilegeset
tablename   tablename tolowercase   trim
dbname   dbname tolowercase   trim
try
opentransaction
if  username    null
map<string  list<privilegegrantinfo>> partuserpriv   new hashmap<string  list<privilegegrantinfo>>
partuserpriv put username  getpartitionprivilege dbname
tablename  partition  username  principaltype user
ret setuserprivileges partuserpriv
if  groupnames    null    groupnames size   > 0
map<string  list<privilegegrantinfo>> partgrouppriv   new hashmap<string  list<privilegegrantinfo>>
for  string groupname   groupnames
partgrouppriv put groupname  getpartitionprivilege dbname  tablename
partition  groupname  principaltype group
ret setgroupprivileges partgrouppriv
list<mrolemap> roles   listroles username  groupnames
if  roles    null    roles size   > 0
map<string  list<privilegegrantinfo>> partrolepriv   new hashmap<string  list<privilegegrantinfo>>
for  mrolemap role   roles
string rolename   role getrole   getrolename
partrolepriv put rolename  getpartitionprivilege dbname  tablename
partition  rolename  principaltype role
ret setroleprivileges partrolepriv
commited   committransaction
finally
if   commited
rollbacktransaction
return ret
@override
public principalprivilegeset gettableprivilegeset string dbname
string tablename  string username  list<string> groupnames
throws invalidobjectexception  metaexception
boolean commited   false
principalprivilegeset ret   new principalprivilegeset
tablename   tablename tolowercase   trim
dbname   dbname tolowercase   trim
try
opentransaction
if  username    null
map<string  list<privilegegrantinfo>> tableuserpriv   new hashmap<string  list<privilegegrantinfo>>
tableuserpriv put username  gettableprivilege dbname
tablename  username  principaltype user
ret setuserprivileges tableuserpriv
if  groupnames    null    groupnames size   > 0
map<string  list<privilegegrantinfo>> tablegrouppriv   new hashmap<string  list<privilegegrantinfo>>
for  string groupname   groupnames
tablegrouppriv put groupname  gettableprivilege dbname  tablename
groupname  principaltype group
ret setgroupprivileges tablegrouppriv
list<mrolemap> roles   listroles username  groupnames
if  roles    null    roles size   > 0
map<string  list<privilegegrantinfo>> tablerolepriv   new hashmap<string  list<privilegegrantinfo>>
for  mrolemap role   roles
string rolename   role getrole   getrolename
tablerolepriv put rolename  gettableprivilege dbname  tablename
rolename  principaltype role
ret setroleprivileges tablerolepriv
commited   committransaction
finally
if   commited
rollbacktransaction
return ret
@override
public principalprivilegeset getcolumnprivilegeset string dbname
string tablename  string partitionname  string columnname
string username  list<string> groupnames  throws invalidobjectexception
metaexception
tablename   tablename tolowercase   trim
dbname   dbname tolowercase   trim
columnname   columnname tolowercase   trim
boolean commited   false
principalprivilegeset ret   new principalprivilegeset
try
opentransaction
if  username    null
map<string  list<privilegegrantinfo>> columnuserpriv   new hashmap<string  list<privilegegrantinfo>>
columnuserpriv put username  getcolumnprivilege dbname  tablename
columnname  partitionname  username  principaltype user
ret setuserprivileges columnuserpriv
if  groupnames    null    groupnames size   > 0
map<string  list<privilegegrantinfo>> columngrouppriv   new hashmap<string  list<privilegegrantinfo>>
for  string groupname   groupnames
columngrouppriv put groupname  getcolumnprivilege dbname  tablename
columnname  partitionname  groupname  principaltype group
ret setgroupprivileges columngrouppriv
list<mrolemap> roles   listroles username  groupnames
if  roles    null    roles size   > 0
map<string  list<privilegegrantinfo>> columnrolepriv   new hashmap<string  list<privilegegrantinfo>>
for  mrolemap role   roles
string rolename   role getrole   getrolename
columnrolepriv put rolename  getcolumnprivilege dbname  tablename
columnname  partitionname  rolename  principaltype role
ret setroleprivileges columnrolepriv
commited   committransaction
finally
if   commited
rollbacktransaction
return ret
private list<privilegegrantinfo> getpartitionprivilege string dbname
string tablename  string partname  string principalname
principaltype principaltype
tablename   tablename tolowercase   trim
dbname   dbname tolowercase   trim
if  principalname    null
list<mpartitionprivilege> usernametabpartpriv   this
listprincipalpartitiongrants principalname  principaltype
dbname  tablename  partname
if  usernametabpartpriv    null    usernametabpartpriv size   > 0
list<privilegegrantinfo> grantinfos   new arraylist<privilegegrantinfo>
usernametabpartpriv size
for  int i   0  i < usernametabpartpriv size    i
mpartitionprivilege item   usernametabpartpriv get i
grantinfos add new privilegegrantinfo item getprivilege    item
getcreatetime    item getgrantor
getprincipaltypefromstr item getgrantortype     item getgrantoption
return grantinfos
return new arraylist<privilegegrantinfo> 0
private principaltype getprincipaltypefromstr string str
return str    null ? null   principaltype valueof str
private list<privilegegrantinfo> gettableprivilege string dbname
string tablename  string principalname  principaltype principaltype
tablename   tablename tolowercase   trim
dbname   dbname tolowercase   trim
if  principalname    null
list<mtableprivilege> usernametabpartpriv   this
listalltablegrants principalname  principaltype
dbname  tablename
if  usernametabpartpriv    null    usernametabpartpriv size   > 0
list<privilegegrantinfo> grantinfos   new arraylist<privilegegrantinfo>
usernametabpartpriv size
for  int i   0  i < usernametabpartpriv size    i
mtableprivilege item   usernametabpartpriv get i
grantinfos add new privilegegrantinfo item getprivilege    item
getcreatetime    item getgrantor    getprincipaltypefromstr item
getgrantortype     item getgrantoption
return grantinfos
return new arraylist<privilegegrantinfo> 0
private list<privilegegrantinfo> getcolumnprivilege string dbname
string tablename  string columnname  string partitionname
string principalname  principaltype principaltype
tablename   tablename tolowercase   trim
dbname   dbname tolowercase   trim
columnname   columnname tolowercase   trim
if  partitionname    null
list<mtablecolumnprivilege> usernamecolumnpriv   this
listprincipaltablecolumngrants principalname  principaltype
dbname  tablename  columnname
if  usernamecolumnpriv    null    usernamecolumnpriv size   > 0
list<privilegegrantinfo> grantinfos   new arraylist<privilegegrantinfo>
usernamecolumnpriv size
for  int i   0  i < usernamecolumnpriv size    i
mtablecolumnprivilege item   usernamecolumnpriv get i
grantinfos add new privilegegrantinfo item getprivilege    item
getcreatetime    item getgrantor    getprincipaltypefromstr item
getgrantortype     item getgrantoption
return grantinfos
else
list<mpartitioncolumnprivilege> usernamecolumnpriv   this
listprincipalpartitioncolumngrants principalname
principaltype  dbname  tablename  partitionname  columnname
if  usernamecolumnpriv    null    usernamecolumnpriv size   > 0
list<privilegegrantinfo> grantinfos   new arraylist<privilegegrantinfo>
usernamecolumnpriv size
for  int i   0  i < usernamecolumnpriv size    i
mpartitioncolumnprivilege item   usernamecolumnpriv get i
grantinfos add new privilegegrantinfo item getprivilege    item
getcreatetime    item getgrantor    getprincipaltypefromstr item
getgrantortype     item getgrantoption
return grantinfos
return new arraylist<privilegegrantinfo> 0
@override
public boolean grantprivileges privilegebag privileges  throws invalidobjectexception
metaexception  nosuchobjectexception
boolean committed   false
int now    int   system currenttimemillis     1000
try
opentransaction
list<object> persistentobjs   new arraylist<object>
list<hiveobjectprivilege> privilegelist   privileges getprivileges
if  privilegelist    null    privilegelist size   > 0
iterator<hiveobjectprivilege> priviter   privilegelist iterator
set<string> privset   new hashset<string>
while  priviter hasnext
hiveobjectprivilege privdef   priviter next
hiveobjectref hiveobject   privdef gethiveobject
string privilegestr   privdef getgrantinfo   getprivilege
string privs   privilegestr split
string username   privdef getprincipalname
principaltype principaltype   privdef getprincipaltype
string grantor   privdef getgrantinfo   getgrantor
string grantortype   privdef getgrantinfo   getgrantortype   tostring
boolean grantoption   privdef getgrantinfo   isgrantoption
privset clear
if  hiveobject getobjecttype      hiveobjecttype global
list<mglobalprivilege> globalprivs   this
listprincipalglobalgrants username  principaltype
if  globalprivs    null
for  mglobalprivilege priv   globalprivs
if  priv getgrantor   equalsignorecase grantor
privset add priv getprivilege
for  string privilege   privs
if  privset contains privilege
throw new invalidobjectexception privilege
grantor
mglobalprivilege mglobalprivs   new mglobalprivilege username
principaltype tostring    privilege  now  grantor  grantortype  grantoption
persistentobjs add mglobalprivs
else if  hiveobject getobjecttype      hiveobjecttype database
mdatabase dbobj   getmdatabase hiveobject getdbname
if  dbobj    null
list<mdbprivilege> dbprivs   this listprincipaldbgrants
username  principaltype  hiveobject getdbname
if  dbprivs    null
for  mdbprivilege priv   dbprivs
if  priv getgrantor   equalsignorecase grantor
privset add priv getprivilege
for  string privilege   privs
if  privset contains privilege
throw new invalidobjectexception privilege
hiveobject getdbname         grantor
mdbprivilege mdb   new mdbprivilege username  principaltype
tostring    dbobj  privilege  now  grantor  grantortype  grantoption
persistentobjs add mdb
else if  hiveobject getobjecttype      hiveobjecttype table
mtable tblobj   getmtable hiveobject getdbname    hiveobject
getobjectname
if  tblobj    null
list<mtableprivilege> tableprivs   this
listalltablegrants username  principaltype
hiveobject getdbname    hiveobject getobjectname
if  tableprivs    null
for  mtableprivilege priv   tableprivs
if  priv getgrantor      null
priv getgrantor   equalsignorecase grantor
privset add priv getprivilege
for  string privilege   privs
if  privset contains privilege
throw new invalidobjectexception privilege
hiveobject getdbname
hiveobject getobjectname         grantor
mtableprivilege mtab   new mtableprivilege
username  principaltype tostring    tblobj
privilege  now  grantor  grantortype  grantoption
persistentobjs add mtab
else if  hiveobject getobjecttype      hiveobjecttype partition
mpartition partobj   this getmpartition hiveobject getdbname
hiveobject getobjectname    hiveobject getpartvalues
string partname   null
if  partobj    null
partname   partobj getpartitionname
list<mpartitionprivilege> partprivs   this
listprincipalpartitiongrants username
principaltype  hiveobject getdbname    hiveobject
getobjectname    partobj getpartitionname
if  partprivs    null
for  mpartitionprivilege priv   partprivs
if  priv getgrantor   equalsignorecase grantor
privset add priv getprivilege
for  string privilege   privs
if  privset contains privilege
throw new invalidobjectexception privilege
hiveobject getdbname
hiveobject getobjectname
partname       grantor
mpartitionprivilege mtab   new mpartitionprivilege username
principaltype tostring    partobj  privilege  now  grantor
grantortype  grantoption
persistentobjs add mtab
else if  hiveobject getobjecttype      hiveobjecttype column
mtable tblobj   getmtable hiveobject getdbname    hiveobject
getobjectname
if  tblobj    null
if  hiveobject getpartvalues      null
mpartition partobj   null
list<mpartitioncolumnprivilege> colprivs   null
partobj   this getmpartition hiveobject getdbname    hiveobject
getobjectname    hiveobject getpartvalues
if  partobj    null
continue
colprivs   this listprincipalpartitioncolumngrants
username  principaltype  hiveobject getdbname    hiveobject
getobjectname    partobj getpartitionname
hiveobject getcolumnname
if  colprivs    null
for  mpartitioncolumnprivilege priv   colprivs
if  priv getgrantor   equalsignorecase grantor
privset add priv getprivilege
for  string privilege   privs
if  privset contains privilege
throw new invalidobjectexception privilege
hiveobject getcolumnname
hiveobject getdbname
hiveobject getobjectname
partobj getpartitionname         grantor
mpartitioncolumnprivilege mcol   new mpartitioncolumnprivilege username
principaltype tostring    partobj  hiveobject
getcolumnname    privilege  now  grantor  grantortype
grantoption
persistentobjs add mcol
else
list<mtablecolumnprivilege> colprivs   null
colprivs   this listprincipaltablecolumngrants
username  principaltype  hiveobject getdbname    hiveobject
getobjectname    hiveobject getcolumnname
if  colprivs    null
for  mtablecolumnprivilege priv   colprivs
if  priv getgrantor   equalsignorecase grantor
privset add priv getprivilege
for  string privilege   privs
if  privset contains privilege
throw new invalidobjectexception privilege
hiveobject getcolumnname
hiveobject getdbname
hiveobject getobjectname         grantor
mtablecolumnprivilege mcol   new mtablecolumnprivilege username
principaltype tostring    tblobj  hiveobject
getcolumnname    privilege  now  grantor  grantortype
grantoption
persistentobjs add mcol
if  persistentobjs size   > 0
pm makepersistentall persistentobjs
committed   committransaction
finally
if   committed
rollbacktransaction
return committed
@override
public boolean revokeprivileges privilegebag privileges
throws invalidobjectexception  metaexception  nosuchobjectexception
boolean committed   false
try
opentransaction
list<object> persistentobjs   new arraylist<object>
list<hiveobjectprivilege> privilegelist   privileges getprivileges
if  privilegelist    null    privilegelist size   > 0
iterator<hiveobjectprivilege> priviter   privilegelist iterator
while  priviter hasnext
hiveobjectprivilege privdef   priviter next
hiveobjectref hiveobject   privdef gethiveobject
string privilegestr   privdef getgrantinfo   getprivilege
if  privilegestr    null    privilegestr trim   equals
continue
string privs   privilegestr split
string username   privdef getprincipalname
principaltype principaltype   privdef getprincipaltype
if  hiveobject getobjecttype      hiveobjecttype global
list<mglobalprivilege> msecuser   this listprincipalglobalgrants
username  principaltype
boolean found   false
if  msecuser    null
for  string privilege   privs
for  mglobalprivilege usergrant   msecuser
string usergrantprivs   usergrant getprivilege
if  privilege equals usergrantprivs
found   true
persistentobjs add usergrant
break
if   found
throw new invalidobjectexception
privilege
else if  hiveobject getobjecttype      hiveobjecttype database
mdatabase dbobj   getmdatabase hiveobject getdbname
if  dbobj    null
string db   hiveobject getdbname
boolean found   false
list<mdbprivilege> dbgrants   this listprincipaldbgrants
username  principaltype  db
for  string privilege   privs
for  mdbprivilege dbgrant   dbgrants
string dbgrantpriv   dbgrant getprivilege
if  privilege equals dbgrantpriv
found   true
persistentobjs add dbgrant
break
if   found
throw new invalidobjectexception
privilege
db
else if  hiveobject getobjecttype      hiveobjecttype table
boolean found   false
list<mtableprivilege> tablegrants   this
listalltablegrants username  principaltype
hiveobject getdbname    hiveobject getobjectname
for  string privilege   privs
for  mtableprivilege tabgrant   tablegrants
string tablegrantpriv   tabgrant getprivilege
if  privilege equalsignorecase tablegrantpriv
found   true
persistentobjs add tabgrant
break
if   found
throw new invalidobjectexception     privilege
hiveobject getobjectname
hiveobject getdbname
else if  hiveobject getobjecttype      hiveobjecttype partition
boolean found   false
table tabobj   this gettable hiveobject getdbname    hiveobject getobjectname
string partname   null
if  hiveobject getpartvalues      null
partname   warehouse makepartname tabobj getpartitionkeys    hiveobject getpartvalues
list<mpartitionprivilege> partitiongrants   this
listprincipalpartitiongrants username  principaltype
hiveobject getdbname    hiveobject getobjectname    partname
for  string privilege   privs
for  mpartitionprivilege partgrant   partitiongrants
string partpriv   partgrant getprivilege
if  partpriv equalsignorecase privilege
found   true
persistentobjs add partgrant
break
if   found
throw new invalidobjectexception     privilege
tabobj gettablename
partname       tabobj getdbname
else if  hiveobject getobjecttype      hiveobjecttype column
table tabobj   this gettable hiveobject getdbname    hiveobject
getobjectname
string partname   null
if  hiveobject getpartvalues      null
partname   warehouse makepartname tabobj getpartitionkeys
hiveobject getpartvalues
if  partname    null
list<mpartitioncolumnprivilege> mseccol   listprincipalpartitioncolumngrants
username  principaltype  hiveobject getdbname    hiveobject
getobjectname    partname  hiveobject getcolumnname
boolean found   false
if  mseccol    null
for  string privilege   privs
for  mpartitioncolumnprivilege col   mseccol
string colpriv   col getprivilege
if  colpriv equalsignorecase privilege
found   true
persistentobjs add col
break
if   found
throw new invalidobjectexception     privilege
tabobj gettablename
partname
hiveobject getcolumnname
tabobj getdbname
else
list<mtablecolumnprivilege> mseccol   listprincipaltablecolumngrants
username  principaltype  hiveobject getdbname    hiveobject
getobjectname    hiveobject getcolumnname
boolean found   false
if  mseccol    null
for  string privilege   privs
for  mtablecolumnprivilege col   mseccol
string colpriv   col getprivilege
if  colpriv equalsignorecase privilege
found   true
persistentobjs add col
break
if   found
throw new invalidobjectexception     privilege
tabobj gettablename
hiveobject getcolumnname
tabobj getdbname
if  persistentobjs size   > 0
pm deletepersistentall persistentobjs
committed   committransaction
finally
if   committed
rollbacktransaction
return committed
@suppresswarnings
private list<mrolemap> listrolemembers
mrole mrol
boolean success   false
list<mrolemap> mrolememeberlist   null
try
opentransaction
log debug
query query   pm newquery mrolemap class
query declareparameters
query setunique false
mrolememeberlist    list<mrolemap>  query execute
mrol getrolename
log debug
pm retrieveall mrolememeberlist
success   committransaction
log debug
finally
if   success
rollbacktransaction
return mrolememeberlist
@suppresswarnings
@override
public list<mglobalprivilege> listprincipalglobalgrants string principalname  principaltype principaltype
boolean commited   false
list<mglobalprivilege> usernamedbpriv   null
try
opentransaction
if  principalname    null
query query   pm newquery mglobalprivilege class
query declareparameters
usernamedbpriv    list<mglobalprivilege>  query
executewitharray principalname  principaltype tostring
pm retrieveall usernamedbpriv
commited   committransaction
finally
if   commited
rollbacktransaction
return usernamedbpriv
@suppresswarnings
@override
public list<mdbprivilege> listprincipaldbgrants string principalname
principaltype principaltype  string dbname
boolean success   false
list<mdbprivilege> msecuritydblist   null
dbname   dbname tolowercase   trim
try
opentransaction
log debug
query query   pm newquery mdbprivilege class
query
declareparameters
msecuritydblist    list<mdbprivilege>  query executewitharray principalname  principaltype tostring    dbname
log debug
pm retrieveall msecuritydblist
success   committransaction
log debug
finally
if   success
rollbacktransaction
return msecuritydblist
@suppresswarnings
private list<mdbprivilege> listprincipalalldbgrant
string principalname  principaltype principaltype
boolean success   false
list<mdbprivilege> msecuritydblist   null
try
opentransaction
log debug
query query   pm newquery mdbprivilege class
query
declareparameters
msecuritydblist    list<mdbprivilege>  query execute principalname  principaltype tostring
log debug
pm retrieveall msecuritydblist
success   committransaction
log debug
finally
if   success
rollbacktransaction
return msecuritydblist
@suppresswarnings
public list<mtableprivilege> listalltablegrants string dbname
string tablename
boolean success   false
tablename   tablename tolowercase   trim
dbname   dbname tolowercase   trim
list<mtableprivilege> msecuritytablist   null
tablename   tablename tolowercase   trim
dbname   dbname tolowercase   trim
try
opentransaction
log debug
string querystr
query query   pm newquery
mtableprivilege class  querystr
query declareparameters
msecuritytablist    list<mtableprivilege>  query
executewitharray tablename  dbname
log debug
pm retrieveall msecuritytablist
success   committransaction
log
debug
finally
if   success
rollbacktransaction
return msecuritytablist
@suppresswarnings
public list<mpartitionprivilege> listtableallpartitiongrants string dbname
string tablename
tablename   tablename tolowercase   trim
dbname   dbname tolowercase   trim
boolean success   false
list<mpartitionprivilege> msecuritytabpartlist   null
try
opentransaction
log debug
string querystr
query query   pm newquery
mpartitionprivilege class  querystr
query declareparameters
msecuritytabpartlist    list<mpartitionprivilege>  query
executewitharray tablename  dbname
log debug
pm retrieveall msecuritytabpartlist
success   committransaction
log
debug
finally
if   success
rollbacktransaction
return msecuritytabpartlist
@suppresswarnings
public list<mtablecolumnprivilege> listtableallcolumngrants string dbname
string tablename
boolean success   false
list<mtablecolumnprivilege> mtblcolprivilegelist   null
tablename   tablename tolowercase   trim
dbname   dbname tolowercase   trim
try
opentransaction
log debug
string querystr
query query   pm newquery mtablecolumnprivilege class  querystr
query declareparameters
mtblcolprivilegelist    list<mtablecolumnprivilege>  query
executewitharray tablename  dbname
log debug
pm retrieveall mtblcolprivilegelist
success   committransaction
log debug
finally
if   success
rollbacktransaction
return mtblcolprivilegelist
@suppresswarnings
public list<mpartitioncolumnprivilege> listtableallpartitioncolumngrants string dbname
string tablename
boolean success   false
tablename   tablename tolowercase   trim
dbname   dbname tolowercase   trim
list<mpartitioncolumnprivilege> msecuritycollist   null
try
opentransaction
log debug
string querystr
query query   pm newquery mpartitioncolumnprivilege class  querystr
query declareparameters
msecuritycollist    list<mpartitioncolumnprivilege>  query
executewitharray tablename  dbname
log debug
pm retrieveall msecuritycollist
success   committransaction
log debug
finally
if   success
rollbacktransaction
return msecuritycollist
@suppresswarnings
public list<mpartitioncolumnprivilege> listpartitionallcolumngrants string dbname
string tablename  string partname
boolean success   false
tablename   tablename tolowercase   trim
dbname   dbname tolowercase   trim
list<mpartitioncolumnprivilege> msecuritycollist   null
try
opentransaction
log debug
string querystr
query query   pm newquery mpartitioncolumnprivilege class  querystr
query declareparameters
msecuritycollist    list<mpartitioncolumnprivilege>  query
executewitharray tablename  dbname  partname
log debug
pm retrieveall msecuritycollist
success   committransaction
log debug
finally
if   success
rollbacktransaction
return msecuritycollist
@suppresswarnings
private list<mdbprivilege> listdatabasegrants string dbname
dbname   dbname tolowercase   trim
boolean success   false
try
opentransaction
log debug
query query   pm newquery mdbprivilege class
query declareparameters
list<mdbprivilege> msecuritydblist    list<mdbprivilege>  query
executewitharray dbname
log debug
pm retrieveall msecuritydblist
success   committransaction
log debug
return msecuritydblist
finally
if   success
rollbacktransaction
@suppresswarnings
private list<mpartitionprivilege> listpartitiongrants string dbname  string tablename
string partname
tablename   tablename tolowercase   trim
dbname   dbname tolowercase   trim
boolean success   false
list<mpartitionprivilege> msecuritytabpartlist   null
try
opentransaction
log debug
query query   pm newquery mpartitionprivilege class
query declareparameters
msecuritytabpartlist    list<mpartitionprivilege>  query
executewitharray tablename  dbname  partname
log debug
pm retrieveall msecuritytabpartlist
success   committransaction
log debug
finally
if   success
rollbacktransaction
return msecuritytabpartlist
@suppresswarnings
public list<mtableprivilege> listalltablegrants
string principalname  principaltype principaltype  string dbname
string tablename
tablename   tablename tolowercase   trim
dbname   dbname tolowercase   trim
boolean success   false
list<mtableprivilege> msecuritytabpartlist   null
try
opentransaction
log debug
query query   pm newquery
mtableprivilege class
query declareparameters
msecuritytabpartlist    list<mtableprivilege>  query
executewitharray principalname  principaltype tostring    tablename  dbname
log debug
pm retrieveall msecuritytabpartlist
success   committransaction
log
debug
finally
if   success
rollbacktransaction
return msecuritytabpartlist
@suppresswarnings
@override
public list<mpartitionprivilege> listprincipalpartitiongrants
string principalname  principaltype principaltype  string dbname
string tablename  string partname
boolean success   false
tablename   tablename tolowercase   trim
dbname   dbname tolowercase   trim
list<mpartitionprivilege> msecuritytabpartlist   null
try
opentransaction
log debug
query query   pm newquery
mpartitionprivilege class
query declareparameters
msecuritytabpartlist    list<mpartitionprivilege>  query
executewitharray principalname  principaltype tostring    tablename  dbname  partname
log debug
pm retrieveall msecuritytabpartlist
success   committransaction
log debug
finally
if   success
rollbacktransaction
return msecuritytabpartlist
@suppresswarnings
@override
public list<mtablecolumnprivilege> listprincipaltablecolumngrants
string principalname  principaltype principaltype  string dbname
string tablename  string columnname
boolean success   false
tablename   tablename tolowercase   trim
dbname   dbname tolowercase   trim
columnname   columnname tolowercase   trim
list<mtablecolumnprivilege> msecuritycollist   null
try
opentransaction
log debug
string querystr
query query   pm newquery mtablecolumnprivilege class  querystr
query
declareparameters
msecuritycollist    list<mtablecolumnprivilege>  query executewitharray
principalname  principaltype tostring    tablename  dbname  columnname
log debug
pm retrieveall msecuritycollist
success   committransaction
log
debug
finally
if   success
rollbacktransaction
return msecuritycollist
@suppresswarnings
public list<mpartitioncolumnprivilege> listprincipalpartitioncolumngrants
string principalname  principaltype principaltype  string dbname
string tablename  string partitionname  string columnname
boolean success   false
tablename   tablename tolowercase   trim
dbname   dbname tolowercase   trim
columnname   columnname tolowercase   trim
list<mpartitioncolumnprivilege> msecuritycollist   null
try
opentransaction
log debug
query query   pm
newquery
mpartitioncolumnprivilege class
query
declareparameters
msecuritycollist    list<mpartitioncolumnprivilege>  query
executewitharray principalname  principaltype tostring    tablename
dbname  partitionname  columnname
log debug
pm retrieveall msecuritycollist
success   committransaction
log
debug
finally
if   success
rollbacktransaction
return msecuritycollist
@suppresswarnings
private list<mtableprivilege> listprincipalalltablegrants
string principalname  principaltype principaltype
boolean success   false
list<mtableprivilege> msecuritytabpartlist   null
try
opentransaction
log debug
query query   pm newquery mtableprivilege class
query declareparameters
msecuritytabpartlist    list<mtableprivilege>  query execute
principalname  principaltype tostring
log
debug
pm retrieveall msecuritytabpartlist
success   committransaction
log
debug
finally
if   success
rollbacktransaction
return msecuritytabpartlist
@suppresswarnings
private list<mpartitionprivilege> listprincipalallpartitiongrants
string principalname  principaltype principaltype
boolean success   false
list<mpartitionprivilege> msecuritytabpartlist   null
try
opentransaction
log debug
query query   pm newquery mpartitionprivilege class
query declareparameters
msecuritytabpartlist    list<mpartitionprivilege>  query execute
principalname  principaltype tostring
log
debug
pm retrieveall msecuritytabpartlist
success   committransaction
log
debug
finally
if   success
rollbacktransaction
return msecuritytabpartlist
@suppresswarnings
private list<mtablecolumnprivilege> listprincipalalltablecolumngrants
string principalname  principaltype principaltype
boolean success   false
list<mtablecolumnprivilege> msecuritycolumnlist   null
try
opentransaction
log debug
query query   pm newquery mtablecolumnprivilege class
query
declareparameters
msecuritycolumnlist    list<mtablecolumnprivilege>  query execute
principalname  principaltype tostring
log debug
pm retrieveall msecuritycolumnlist
success   committransaction
log debug
finally
if   success
rollbacktransaction
return msecuritycolumnlist
@suppresswarnings
private list<mpartitioncolumnprivilege> listprincipalallpartitioncolumngrants
string principalname  principaltype principaltype
boolean success   false
list<mpartitioncolumnprivilege> msecuritycolumnlist   null
try
opentransaction
log debug
query query   pm newquery mpartitioncolumnprivilege class
query
declareparameters
msecuritycolumnlist    list<mpartitioncolumnprivilege>  query execute
principalname  principaltype tostring
log debug
pm retrieveall msecuritycolumnlist
success   committransaction
log debug
finally
if   success
rollbacktransaction
return msecuritycolumnlist
@override
public boolean ispartitionmarkedforevent string dbname  string tblname
map<string  string> partname  partitioneventtype evttype  throws unknowntableexception
metaexception  invalidpartitionexception  unknownpartitionexception
collection<mpartitionevent> partevents
boolean success   false
log debug
try
opentransaction
query query   pm newquery mpartitionevent class
query declareparameters
table tbl   gettable dbname  tblname      make sure dbname and tblname are valid
if null    tbl
throw new unknowntableexception    tblname
partevents    collection<mpartitionevent>  query executewitharray dbname  tblname  getpartitionstr tbl  partname   evttype getvalue
pm retrieveall partevents
success   committransaction
log debug
finally
if   success
rollbacktransaction
return  partevents    null      partevents isempty    ? true   false
@override
public table markpartitionforevent string dbname  string tblname  map<string string> partname
partitioneventtype evttype  throws metaexception  unknowntableexception  invalidpartitionexception  unknownpartitionexception
log debug
boolean success   false
table tbl   null
try
opentransaction
tbl   gettable dbname  tblname      make sure dbname and tblname are valid
if null    tbl
throw new unknowntableexception    tblname
pm makepersistent new mpartitionevent dbname tblname getpartitionstr tbl  partname   evttype getvalue
success   committransaction
log debug
finally
if  success
rollbacktransaction
return tbl
private string getpartitionstr table tbl  map<string string> partname  throws invalidpartitionexception
if tbl getpartitionkeyssize      partname size
throw new invalidpartitionexception    tbl getpartitionkeyssize
partname size
final list<string> storedvals   new arraylist<string> tbl getpartitionkeyssize
for fieldschema partkey   tbl getpartitionkeys
string partval   partname get partkey getname
if null    partval
throw new invalidpartitionexception   partkey getname
storedvals add partval
return join storedvals
/** the following api
*
*  - executejdoqlselect
*
* is used by hivemetatool. this api **shouldn't** be exposed via thrift.
*
*/
public collection<?> executejdoqlselect string query
boolean committed   false
collection<?> result   null
try
opentransaction
query q   pm newquery query
result    collection<?>  q execute
committed   committransaction
if  committed
return result
else
return null
finally
if   committed
rollbacktransaction
/** the following api
*
*  - executejdoqlupdate
*
* is used by hivemetatool. this api **shouldn't** be exposed via thrift.
*
*/
public long executejdoqlupdate string query
boolean committed   false
long numupdated   0
try
opentransaction
query q   pm newquery query
numupdated    long  q execute
committed   committransaction
if  committed
return numupdated
else
return  1
finally
if   committed
rollbacktransaction
/** the following api
*
*  - listfsroots
*
* is used by hivemetatool. this api **shouldn't** be exposed via thrift.
*
*/
public set<string> listfsroots
boolean committed   false
set<string> fsroots   new hashset<string>
try
opentransaction
query query   pm newquery mdatabase class
list<mdatabase> mdbs    list<mdatabase>  query execute
pm retrieveall mdbs
for  mdatabase mdb mdbs
fsroots add mdb getlocationuri
committed   committransaction
if  committed
return fsroots
else
return null
finally
if   committed
rollbacktransaction
private boolean shouldupdateuri uri ondiskuri  uri inputuri
string ondiskhost   ondiskuri gethost
string inputhost   inputuri gethost
int ondiskport   ondiskuri getport
int inputport   inputuri getport
string ondiskscheme   ondiskuri getscheme
string inputscheme   inputuri getscheme
//compare ports
if  inputport     1
if  inputport    ondiskport
return false
//compare schemes
if  inputscheme    null
if  ondiskscheme    null
return false
if   inputscheme equalsignorecase ondiskscheme
return false
//compare hosts
if  ondiskhost    null
if   inputhost equalsignorecase ondiskhost
return false
else
return false
return true
public class updatemdatabaseuriretval
private list<string> badrecords
private map<string  string> updatelocations
updatemdatabaseuriretval list<string> badrecords  map<string  string> updatelocations
this badrecords   badrecords
this updatelocations   updatelocations
public list<string> getbadrecords
return badrecords
public void setbadrecords list<string> badrecords
this badrecords   badrecords
public map<string  string> getupdatelocations
return updatelocations
public void setupdatelocations map<string  string> updatelocations
this updatelocations   updatelocations
/** the following apis
*
*  - updatemdatabaseuri
*
* is used by hivemetatool. this api **shouldn't** be exposed via thrift.
*
*/
public updatemdatabaseuriretval updatemdatabaseuri uri oldloc  uri newloc  boolean dryrun
boolean committed   false
map<string  string> updatelocations   new hashmap<string  string>
list<string> badrecords   new arraylist<string>
updatemdatabaseuriretval retval   null
try
opentransaction
query query   pm newquery mdatabase class
list<mdatabase> mdbs    list<mdatabase>  query execute
pm retrieveall mdbs
for mdatabase mdb mdbs
uri locationuri   null
string location   mdb getlocationuri
try
locationuri   new uri location
catch urisyntaxexception e
badrecords add location
catch  nullpointerexception e
badrecords add location
if  locationuri    null
badrecords add location
else
if  shouldupdateuri locationuri  oldloc
string dbloc   mdb getlocationuri   replaceall oldloc tostring    newloc tostring
updatelocations put locationuri tostring    dbloc
if   dryrun
mdb setlocationuri dbloc
committed   committransaction
if  committed
retval   new updatemdatabaseuriretval badrecords  updatelocations
return retval
finally
if   committed
rollbacktransaction
public class updatemstoragedescriptortblpropuriretval
private list<string> badrecords
private map<string  string> updatelocations
updatemstoragedescriptortblpropuriretval list<string> badrecords
map<string  string> updatelocations
this badrecords   badrecords
this updatelocations   updatelocations
public list<string> getbadrecords
return badrecords
public void setbadrecords list<string> badrecords
this badrecords   badrecords
public map<string  string> getupdatelocations
return updatelocations
public void setupdatelocations map<string  string> updatelocations
this updatelocations   updatelocations
/** the following apis
*
*  - updatemstoragedescriptortblpropuri
*
* is used by hivemetatool. this api **shouldn't** be exposed via thrift.
*
*/
public updatemstoragedescriptortblpropuriretval updatemstoragedescriptortblpropuri uri oldloc
uri newloc  string tblpropkey  boolean isdryrun
boolean committed   false
map<string  string> updatelocations   new hashmap<string  string>
list<string> badrecords   new arraylist<string>
updatemstoragedescriptortblpropuriretval retval   null
try
opentransaction
query query   pm newquery mstoragedescriptor class
list<mstoragedescriptor> msdss    list<mstoragedescriptor>  query execute
pm retrieveall msdss
for mstoragedescriptor msds msdss
uri tableproplocationuri   null
if  msds getparameters   containskey tblpropkey
string tableproplocation   msds getparameters   get tblpropkey
try
tableproplocationuri   new uri tableproplocation
catch  urisyntaxexception e
badrecords add tableproplocation
catch  nullpointerexception e
badrecords add tableproplocation
// if tablepropkey that was passed in lead to a valid uri resolution, update it if
//parts of it match the old-nn-loc, else add to badrecords
if  tableproplocationuri    null
badrecords add tableproplocation
else
if  shouldupdateuri tableproplocationuri  oldloc
string tblproploc   msds getparameters   get tblpropkey  replaceall oldloc tostring
newloc tostring
updatelocations put tableproplocationuri tostring    tblproploc
if   isdryrun
msds getparameters   put tblpropkey  tblproploc
committed   committransaction
if  committed
retval   new updatemstoragedescriptortblpropuriretval badrecords  updatelocations
return retval
finally
if   committed
rollbacktransaction
public class updatemstoragedescriptortbluriretval
private list<string> badrecords
private map<string  string> updatelocations
updatemstoragedescriptortbluriretval list<string> badrecords
map<string  string> updatelocations
this badrecords   badrecords
this updatelocations   updatelocations
public list<string> getbadrecords
return badrecords
public void setbadrecords list<string> badrecords
this badrecords   badrecords
public map<string  string> getupdatelocations
return updatelocations
public void setupdatelocations map<string  string> updatelocations
this updatelocations   updatelocations
/** the following apis
*
*  - updatemstoragedescriptortbluri
*
* is used by hivemetatool. this api **shouldn't** be exposed via thrift.
*
*/
public updatemstoragedescriptortbluriretval updatemstoragedescriptortbluri uri oldloc  uri newloc
boolean isdryrun
boolean committed   false
map<string  string> updatelocations   new hashmap<string  string>
list<string> badrecords   new arraylist<string>
updatemstoragedescriptortbluriretval retval   null
try
opentransaction
query query   pm newquery mstoragedescriptor class
list<mstoragedescriptor> msdss    list<mstoragedescriptor>  query execute
pm retrieveall msdss
for mstoragedescriptor msds msdss
uri locationuri   null
string location   msds getlocation
try
locationuri   new uri location
catch  urisyntaxexception e
badrecords add location
catch  nullpointerexception e
badrecords add location
if  locationuri    null
badrecords add location
else
if  shouldupdateuri locationuri  oldloc
string tblloc   msds getlocation   replaceall oldloc tostring    newloc tostring
updatelocations put locationuri tostring    tblloc
if   isdryrun
msds setlocation tblloc
committed   committransaction
if  committed
retval   new updatemstoragedescriptortbluriretval badrecords  updatelocations
return retval
finally
if   committed
rollbacktransaction
public class updateserdeuriretval
private list<string> badrecords
private map<string  string> updatelocations
updateserdeuriretval list<string> badrecords  map<string  string> updatelocations
this badrecords   badrecords
this updatelocations   updatelocations
public list<string> getbadrecords
return badrecords
public void setbadrecords list<string> badrecords
this badrecords   badrecords
public map<string  string> getupdatelocations
return updatelocations
public void setupdatelocations map<string  string> updatelocations
this updatelocations   updatelocations
/** the following apis
*
*  - updateserdeuri
*
* is used by hivemetatool. this api **shouldn't** be exposed via thrift.
*
*/
public updateserdeuriretval updateserdeuri uri oldloc  uri newloc  string serdeprop
boolean isdryrun
boolean committed   false
map<string  string> updatelocations   new hashmap<string  string>
list<string> badrecords   new arraylist<string>
updateserdeuriretval retval   null
try
opentransaction
query query   pm newquery mserdeinfo class
list<mserdeinfo> mserdes    list<mserdeinfo>  query execute
pm retrieveall mserdes
for mserdeinfo mserde mserdes
if  mserde getparameters   containskey serdeprop
string schemaloc   mserde getparameters   get serdeprop
uri schemalocuri   null
try
schemalocuri   new uri schemaloc
catch  urisyntaxexception e
badrecords add schemaloc
catch  nullpointerexception e
badrecords add schemaloc
if  schemalocuri    null
badrecords add schemaloc
else
if  shouldupdateuri schemalocuri  oldloc
string newschemaloc   schemaloc replaceall oldloc tostring    newloc tostring
updatelocations put schemalocuri tostring    newschemaloc
if   isdryrun
mserde getparameters   put serdeprop  newschemaloc
committed   committransaction
if  committed
retval   new updateserdeuriretval badrecords  updatelocations
return retval
finally
if   committed
rollbacktransaction
// methods to persist, maintain and retrieve column statistics
private mtablecolumnstatistics converttomtablecolumnstatistics columnstatisticsdesc statsdesc
columnstatisticsobj statsobj  throws nosuchobjectexception
metaexception  invalidobjectexception
if  statsobj    null    statsdesc    null
throw new invalidobjectexception
string dbname   statsdesc getdbname
string tablename   statsdesc gettablename
mtable table   getmtable dbname  tablename
if  table    null
throw new nosuchobjectexception     tablename
mtablecolumnstatistics mcolstats   new mtablecolumnstatistics
mcolstats settable table
mcolstats setdbname statsdesc getdbname
mcolstats settablename statsdesc gettablename
mcolstats setlastanalyzed statsdesc getlastanalyzed
mcolstats setcolname statsobj getcolname
mcolstats setcoltype statsobj getcoltype
if  statsobj getstatsdata   issetbooleanstats
booleancolumnstatsdata boolstats   statsobj getstatsdata   getbooleanstats
mcolstats setbooleanstats boolstats getnumtrues    boolstats getnumfalses
boolstats getnumnulls
else if  statsobj getstatsdata   issetlongstats
longcolumnstatsdata longstats   statsobj getstatsdata   getlongstats
mcolstats setlongstats longstats getnumnulls    longstats getnumdvs
longstats getlowvalue    longstats gethighvalue
else if  statsobj getstatsdata   issetdoublestats
doublecolumnstatsdata doublestats   statsobj getstatsdata   getdoublestats
mcolstats setdoublestats doublestats getnumnulls    doublestats getnumdvs
doublestats getlowvalue    doublestats gethighvalue
else if  statsobj getstatsdata   issetstringstats
stringcolumnstatsdata stringstats   statsobj getstatsdata   getstringstats
mcolstats setstringstats stringstats getnumnulls    stringstats getnumdvs
stringstats getmaxcollen    stringstats getavgcollen
else if  statsobj getstatsdata   issetbinarystats
binarycolumnstatsdata binarystats   statsobj getstatsdata   getbinarystats
mcolstats setbinarystats binarystats getnumnulls    binarystats getmaxcollen
binarystats getavgcollen
return mcolstats
private columnstatisticsobj gettablecolumnstatisticsobj mtablecolumnstatistics mstatsobj
columnstatisticsobj statsobj   new columnstatisticsobj
statsobj setcoltype mstatsobj getcoltype
statsobj setcolname mstatsobj getcolname
string coltype   mstatsobj getcoltype
columnstatisticsdata colstatsdata   new columnstatisticsdata
if  coltype equalsignorecase
booleancolumnstatsdata boolstats   new booleancolumnstatsdata
boolstats setnumfalses mstatsobj getnumfalses
boolstats setnumtrues mstatsobj getnumtrues
boolstats setnumnulls mstatsobj getnumnulls
colstatsdata setbooleanstats boolstats
else if  coltype equalsignorecase
stringcolumnstatsdata stringstats   new stringcolumnstatsdata
stringstats setnumnulls mstatsobj getnumnulls
stringstats setavgcollen mstatsobj getavgcollen
stringstats setmaxcollen mstatsobj getmaxcollen
stringstats setnumdvs mstatsobj getnumdvs
colstatsdata setstringstats stringstats
else if  coltype equalsignorecase
binarycolumnstatsdata binarystats   new binarycolumnstatsdata
binarystats setnumnulls mstatsobj getnumnulls
binarystats setavgcollen mstatsobj getavgcollen
binarystats setmaxcollen mstatsobj getmaxcollen
colstatsdata setbinarystats binarystats
else if  coltype equalsignorecase       coltype equalsignorecase
coltype equalsignorecase       coltype equalsignorecase
coltype equalsignorecase
longcolumnstatsdata longstats   new longcolumnstatsdata
longstats setnumnulls mstatsobj getnumnulls
longstats sethighvalue mstatsobj getlonghighvalue
longstats setlowvalue mstatsobj getlonglowvalue
longstats setnumdvs mstatsobj getnumdvs
colstatsdata setlongstats longstats
else if  coltype equalsignorecase       coltype equalsignorecase
doublecolumnstatsdata doublestats   new doublecolumnstatsdata
doublestats setnumnulls mstatsobj getnumnulls
doublestats sethighvalue mstatsobj getdoublehighvalue
doublestats setlowvalue mstatsobj getdoublelowvalue
doublestats setnumdvs mstatsobj getnumdvs
colstatsdata setdoublestats doublestats
statsobj setstatsdata colstatsdata
return statsobj
private columnstatisticsdesc gettablecolumnstatisticsdesc mtablecolumnstatistics mstatsobj
columnstatisticsdesc statsdesc   new columnstatisticsdesc
statsdesc setistbllevel true
statsdesc setdbname mstatsobj getdbname
statsdesc settablename mstatsobj gettablename
statsdesc setlastanalyzed mstatsobj getlastanalyzed
return statsdesc
private columnstatistics converttotablecolumnstatistics mtablecolumnstatistics mstatsobj
throws metaexception
if  mstatsobj    null
return null
columnstatisticsdesc statsdesc   gettablecolumnstatisticsdesc mstatsobj
columnstatisticsobj statsobj   gettablecolumnstatisticsobj mstatsobj
list<columnstatisticsobj> statsobjs   new arraylist<columnstatisticsobj>
statsobjs add statsobj
columnstatistics colstats   new columnstatistics
colstats setstatsdesc statsdesc
colstats setstatsobj statsobjs
return colstats
private mpartitioncolumnstatistics converttompartitioncolumnstatistics columnstatisticsdesc
statsdesc  columnstatisticsobj statsobj  list<string> partval
throws metaexception  nosuchobjectexception
if  statsdesc    null    statsobj    null    partval    null
return null
mpartition partition    getmpartition statsdesc getdbname    statsdesc gettablename    partval
if  partition    null
throw new nosuchobjectexception
mpartitioncolumnstatistics mcolstats   new mpartitioncolumnstatistics
mcolstats setpartition partition
mcolstats setdbname statsdesc getdbname
mcolstats settablename statsdesc gettablename
mcolstats setpartitionname statsdesc getpartname
mcolstats setlastanalyzed statsdesc getlastanalyzed
mcolstats setcolname statsobj getcolname
mcolstats setcoltype statsobj getcoltype
if  statsobj getstatsdata   issetbooleanstats
booleancolumnstatsdata boolstats   statsobj getstatsdata   getbooleanstats
mcolstats setbooleanstats boolstats getnumtrues    boolstats getnumfalses
boolstats getnumnulls
else if  statsobj getstatsdata   issetlongstats
longcolumnstatsdata longstats   statsobj getstatsdata   getlongstats
mcolstats setlongstats longstats getnumnulls    longstats getnumdvs
longstats getlowvalue    longstats gethighvalue
else if  statsobj getstatsdata   issetdoublestats
doublecolumnstatsdata doublestats   statsobj getstatsdata   getdoublestats
mcolstats setdoublestats doublestats getnumnulls    doublestats getnumdvs
doublestats getlowvalue    doublestats gethighvalue
else if  statsobj getstatsdata   issetstringstats
stringcolumnstatsdata stringstats   statsobj getstatsdata   getstringstats
mcolstats setstringstats stringstats getnumnulls    stringstats getnumdvs
stringstats getmaxcollen    stringstats getavgcollen
else if  statsobj getstatsdata   issetbinarystats
binarycolumnstatsdata binarystats   statsobj getstatsdata   getbinarystats
mcolstats setbinarystats binarystats getnumnulls    binarystats getmaxcollen
binarystats getavgcollen
return mcolstats
private void writemtablecolumnstatistics mtablecolumnstatistics mstatsobj
throws nosuchobjectexception  metaexception  invalidobjectexception  invalidinputexception
string dbname   mstatsobj getdbname
string tablename   mstatsobj gettablename
string colname   mstatsobj getcolname
log info     dbname       tablename
colname
mtable mtable   getmtable mstatsobj getdbname    mstatsobj gettablename
boolean foundcol   false
if  mtable    null
throw new
nosuchobjectexception     tablename
mstoragedescriptor msds   mtable getsd
list<mfieldschema> collist   msds getcd   getcols
for mfieldschema mcol collist
if  mcol getname   equals mstatsobj getcolname   trim
foundcol   true
break
if   foundcol
throw new
nosuchobjectexception     colname
mtablecolumnstatistics oldstatsobj   getmtablecolumnstatistics dbname  tablename  colname
if  oldstatsobj    null
oldstatsobj setavgcollen mstatsobj getavgcollen
oldstatsobj setlonghighvalue mstatsobj getlonghighvalue
oldstatsobj setdoublehighvalue mstatsobj getdoublehighvalue
oldstatsobj setlastanalyzed mstatsobj getlastanalyzed
oldstatsobj setlonglowvalue mstatsobj getlonglowvalue
oldstatsobj setdoublelowvalue mstatsobj getdoublelowvalue
oldstatsobj setmaxcollen mstatsobj getmaxcollen
oldstatsobj setnumdvs mstatsobj getnumdvs
oldstatsobj setnumfalses mstatsobj getnumfalses
oldstatsobj setnumtrues mstatsobj getnumtrues
oldstatsobj setnumnulls mstatsobj getnumnulls
else
pm makepersistent mstatsobj
private columnstatisticsobj getpartitioncolumnstatisticsobj mpartitioncolumnstatistics mstatsobj
columnstatisticsobj statsobj   new columnstatisticsobj
statsobj setcoltype mstatsobj getcoltype
statsobj setcolname mstatsobj getcolname
string coltype   mstatsobj getcoltype
columnstatisticsdata colstatsdata   new columnstatisticsdata
if  coltype equalsignorecase
booleancolumnstatsdata boolstats   new booleancolumnstatsdata
boolstats setnumfalses mstatsobj getnumfalses
boolstats setnumtrues mstatsobj getnumtrues
boolstats setnumnulls mstatsobj getnumnulls
colstatsdata setbooleanstats boolstats
else if  coltype equalsignorecase
stringcolumnstatsdata stringstats   new stringcolumnstatsdata
stringstats setnumnulls mstatsobj getnumnulls
stringstats setavgcollen mstatsobj getavgcollen
stringstats setmaxcollen mstatsobj getmaxcollen
stringstats setnumdvs mstatsobj getnumdvs
colstatsdata setstringstats stringstats
else if  coltype equalsignorecase
binarycolumnstatsdata binarystats   new binarycolumnstatsdata
binarystats setnumnulls mstatsobj getnumnulls
binarystats setavgcollen mstatsobj getavgcollen
binarystats setmaxcollen mstatsobj getmaxcollen
colstatsdata setbinarystats binarystats
else if  coltype equalsignorecase       coltype equalsignorecase
coltype equalsignorecase       coltype equalsignorecase
coltype equalsignorecase
longcolumnstatsdata longstats   new longcolumnstatsdata
longstats setnumnulls mstatsobj getnumnulls
longstats sethighvalue mstatsobj getlonghighvalue
longstats setlowvalue mstatsobj getlonglowvalue
longstats setnumdvs mstatsobj getnumdvs
colstatsdata setlongstats longstats
else if  coltype equalsignorecase       coltype equalsignorecase
doublecolumnstatsdata doublestats   new doublecolumnstatsdata
doublestats setnumnulls mstatsobj getnumnulls
doublestats sethighvalue mstatsobj getdoublehighvalue
doublestats setlowvalue mstatsobj getdoublelowvalue
doublestats setnumdvs mstatsobj getnumdvs
colstatsdata setdoublestats doublestats
statsobj setstatsdata colstatsdata
return statsobj
private columnstatisticsdesc getpartitioncolumnstatisticsdesc
mpartitioncolumnstatistics mstatsobj
columnstatisticsdesc statsdesc   new columnstatisticsdesc
statsdesc setistbllevel false
statsdesc setdbname mstatsobj getdbname
statsdesc settablename mstatsobj gettablename
statsdesc setpartname mstatsobj getpartitionname
statsdesc setlastanalyzed mstatsobj getlastanalyzed
return statsdesc
private void writempartitioncolumnstatistics mpartitioncolumnstatistics mstatsobj
list<string> partval  throws nosuchobjectexception  metaexception  invalidobjectexception
invalidinputexception
string dbname   mstatsobj getdbname
string tablename   mstatsobj gettablename
string partname   mstatsobj getpartitionname
string colname   mstatsobj getcolname
log info     dbname
tablename       partname       colname
mtable mtable   getmtable mstatsobj getdbname    mstatsobj gettablename
boolean foundcol   false
if  mtable    null
throw new
nosuchobjectexception     tablename
mpartition mpartition
getmpartition mstatsobj getdbname    mstatsobj gettablename    partval
if  mpartition    null
throw new
nosuchobjectexception     partname
mstoragedescriptor msds   mpartition getsd
list<mfieldschema> collist   msds getcd   getcols
for mfieldschema mcol collist
if  mcol getname   equals mstatsobj getcolname   trim
foundcol   true
break
if   foundcol
throw new
nosuchobjectexception     colname
mpartitioncolumnstatistics oldstatsobj   getmpartitioncolumnstatistics dbname  tablename
partname  partval  colname
if  oldstatsobj    null
oldstatsobj setavgcollen mstatsobj getavgcollen
oldstatsobj setlonghighvalue mstatsobj getlonghighvalue
oldstatsobj setdoublehighvalue mstatsobj getdoublehighvalue
oldstatsobj setlastanalyzed mstatsobj getlastanalyzed
oldstatsobj setlonglowvalue mstatsobj getlonglowvalue
oldstatsobj setdoublelowvalue mstatsobj getdoublelowvalue
oldstatsobj setmaxcollen mstatsobj getmaxcollen
oldstatsobj setnumdvs mstatsobj getnumdvs
oldstatsobj setnumfalses mstatsobj getnumfalses
oldstatsobj setnumtrues mstatsobj getnumtrues
oldstatsobj setnumnulls mstatsobj getnumnulls
else
pm makepersistent mstatsobj
public boolean updatetablecolumnstatistics columnstatistics colstats
throws nosuchobjectexception  metaexception  invalidobjectexception  invalidinputexception
boolean committed   false
try
opentransaction
list<columnstatisticsobj> statsobjs   colstats getstatsobj
columnstatisticsdesc statsdesc   colstats getstatsdesc
for  columnstatisticsobj statsobj statsobjs
mtablecolumnstatistics mstatsobj   converttomtablecolumnstatistics statsdesc  statsobj
writemtablecolumnstatistics mstatsobj
committed   committransaction
return committed
finally
if   committed
rollbacktransaction
public boolean updatepartitioncolumnstatistics columnstatistics colstats  list<string> partvals
throws nosuchobjectexception  metaexception  invalidobjectexception  invalidinputexception
boolean committed   false
try
opentransaction
list<columnstatisticsobj> statsobjs   colstats getstatsobj
columnstatisticsdesc statsdesc   colstats getstatsdesc
for  columnstatisticsobj statsobj statsobjs
mpartitioncolumnstatistics mstatsobj
converttompartitioncolumnstatistics statsdesc  statsobj  partvals
writempartitioncolumnstatistics mstatsobj  partvals
committed   committransaction
return committed
finally
if   committed
rollbacktransaction
private mtablecolumnstatistics getmtablecolumnstatistics string dbname  string tablename
string colname  throws nosuchobjectexception  invalidinputexception  metaexception
boolean committed   false
if  dbname    null
dbname   metastoreutils default_database_name
if  tablename    null    colname    null
throw new invalidinputexception
try
opentransaction
mtablecolumnstatistics mstatsobj   null
mtable mtable   getmtable dbname trim    tablename trim
boolean foundcol   false
if  mtable    null
throw new nosuchobjectexception     tablename
mstoragedescriptor msds   mtable getsd
list<mfieldschema> collist   msds getcd   getcols
for mfieldschema mcol collist
if  mcol getname   equals colname trim
foundcol   true
break
if   foundcol
throw new nosuchobjectexception     colname
query query   pm newquery mtablecolumnstatistics class
query setfilter
query
declareparameters
query setunique true
mstatsobj    mtablecolumnstatistics  query execute tablename trim
dbname trim    colname trim
pm retrieve mstatsobj
committed   committransaction
return mstatsobj
finally
if   committed
rollbacktransaction
return null
public columnstatistics gettablecolumnstatistics string dbname  string tablename  string colname
throws metaexception  nosuchobjectexception  invalidinputexception
columnstatistics statsobj
mtablecolumnstatistics mstatsobj   getmtablecolumnstatistics dbname  tablename  colname
if  mstatsobj    null
throw new nosuchobjectexception     dbname       tablename
colname
statsobj   converttotablecolumnstatistics mstatsobj
return statsobj
public columnstatistics getpartitioncolumnstatistics string dbname  string tablename
string partname  list<string> partval  string colname
throws metaexception  nosuchobjectexception  invalidinputexception
columnstatistics statsobj
mpartitioncolumnstatistics mstatsobj
getmpartitioncolumnstatistics dbname  tablename  partname  partval  colname
if  mstatsobj    null
throw new nosuchobjectexception     dbname       tablename
partname       colname
statsobj   converttopartcolumnstatistics mstatsobj
return statsobj
private columnstatistics converttopartcolumnstatistics mpartitioncolumnstatistics mstatsobj
if  mstatsobj    null
return null
columnstatisticsdesc statsdesc   getpartitioncolumnstatisticsdesc mstatsobj
columnstatisticsobj statsobj   getpartitioncolumnstatisticsobj mstatsobj
list<columnstatisticsobj> statsobjs   new arraylist<columnstatisticsobj>
statsobjs add statsobj
columnstatistics colstats   new columnstatistics
colstats setstatsdesc statsdesc
colstats setstatsobj statsobjs
return colstats
private mpartitioncolumnstatistics getmpartitioncolumnstatistics string dbname  string tablename
string partname  list<string> partval  string colname  throws nosuchobjectexception
invalidinputexception  metaexception
boolean committed   false
mpartitioncolumnstatistics mstatsobj   null
if  dbname    null
dbname   metastoreutils default_database_name
if  tablename    null    partval    null    colname    null
throw new invalidinputexception
try
opentransaction
mtable mtable   getmtable dbname trim    tablename trim
boolean foundcol   false
if  mtable    null
throw new nosuchobjectexception      tablename
mpartition mpartition
getmpartition dbname  tablename  partval
if  mpartition    null
throw new
nosuchobjectexception     partname
mstoragedescriptor msds   mpartition getsd
list<mfieldschema> collist   msds getcd   getcols
for mfieldschema mcol collist
if  mcol getname   equals colname trim
foundcol   true
break
if   foundcol
throw new nosuchobjectexception     colname
query query   pm newquery mpartitioncolumnstatistics class
query setfilter
query
declareparameters
query setunique true
mstatsobj    mpartitioncolumnstatistics  query executewitharray partname trim
dbname trim    tablename trim
colname trim
pm retrieve mstatsobj
committed   committransaction
return mstatsobj
finally
if   committed
rollbacktransaction
public boolean deletepartitioncolumnstatistics string dbname  string tablename
string partname  list<string> partvals string colname
throws nosuchobjectexception  metaexception  invalidobjectexception  invalidinputexception
boolean ret   false
if  dbname    null
dbname   metastoreutils default_database_name
if  tablename    null
throw new invalidinputexception
try
opentransaction
mtable mtable   getmtable dbname  tablename
mpartitioncolumnstatistics mstatsobj
list<mpartitioncolumnstatistics> mstatsobjcoll
if  mtable    null
throw new
nosuchobjectexception     tablename
mpartition mpartition
getmpartition dbname  tablename  partvals
if  mpartition    null
throw new
nosuchobjectexception     partname
query query   pm newquery mpartitioncolumnstatistics class
string filter
string parameters
if  colname    null
filter
parameters
else
filter
parameters
query setfilter filter
query
declareparameters parameters
if  colname    null
query setunique true
mstatsobj    mpartitioncolumnstatistics query executewitharray partname trim
dbname trim    tablename trim    colname trim
pm retrieve mstatsobj
if  mstatsobj    null
pm deletepersistent mstatsobj
else
throw new nosuchobjectexception    dbname
tablename       partname       colname
else
mstatsobjcoll   list<mpartitioncolumnstatistics> query execute partname trim
dbname trim    tablename trim
pm retrieveall mstatsobjcoll
if  mstatsobjcoll    null
pm deletepersistentall mstatsobjcoll
else
throw new nosuchobjectexception     dbname
tablename       partname
ret   committransaction
catch nosuchobjectexception e
rollbacktransaction
throw e
finally
if   ret
rollbacktransaction
return ret
public boolean deletetablecolumnstatistics string dbname  string tablename  string colname
throws nosuchobjectexception  metaexception  invalidobjectexception  invalidinputexception
boolean ret   false
if  dbname    null
dbname   metastoreutils default_database_name
if  tablename    null
throw new invalidinputexception
try
opentransaction
mtable mtable   getmtable dbname  tablename
mtablecolumnstatistics mstatsobj
list<mtablecolumnstatistics> mstatsobjcoll
if  mtable    null
throw new
nosuchobjectexception     tablename
query query   pm newquery mtablecolumnstatistics class
string filter
string parameters
if  colname    null
filter
parameters
else
filter
parameters
query setfilter filter
query
declareparameters parameters
if  colname    null
query setunique true
mstatsobj    mtablecolumnstatistics query execute tablename trim
dbname trim    colname trim
pm retrieve mstatsobj
if  mstatsobj    null
pm deletepersistent mstatsobj
else
throw new nosuchobjectexception    dbname
tablename       colname
else
mstatsobjcoll   list<mtablecolumnstatistics> query execute tablename trim    dbname trim
pm retrieveall mstatsobjcoll
if  mstatsobjcoll    null
pm deletepersistentall mstatsobjcoll
else
throw new nosuchobjectexception     dbname
tablename
ret   committransaction
catch nosuchobjectexception e
rollbacktransaction
throw e
finally
if   ret
rollbacktransaction
return ret
@override
public long cleanupevents
boolean commited   false
long delcnt
log debug
long expirytime   hiveconf getlongvar getconf    confvars metastore_event_expiry_duration    1000l
long curtime   system currenttimemillis
try
opentransaction
query query   pm newquery mpartitionevent class
query declareparameters
delcnt   query deletepersistentall curtime  expirytime
commited   committransaction
finally
if   commited
rollbacktransaction
log debug
return delcnt