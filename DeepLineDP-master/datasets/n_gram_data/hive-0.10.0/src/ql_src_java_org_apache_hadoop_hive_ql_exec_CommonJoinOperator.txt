/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql exec
import java io serializable
import java util arraylist
import java util hashmap
import java util iterator
import java util list
import java util map
import java util set
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop conf configuration
import org apache hadoop hive conf hiveconf
import org apache hadoop hive ql exec persistence abstractrowcontainer
import org apache hadoop hive ql exec persistence rowcontainer
import org apache hadoop hive ql metadata hiveexception
import org apache hadoop hive ql plan joinconddesc
import org apache hadoop hive ql plan joindesc
import org apache hadoop hive ql plan tabledesc
import org apache hadoop hive serde2 io bytewritable
import org apache hadoop hive serde2 lazybinary lazybinaryserde
import org apache hadoop hive serde2 objectinspector objectinspector
import org apache hadoop hive serde2 objectinspector objectinspectorfactory
import org apache hadoop hive serde2 objectinspector structobjectinspector
import org apache hadoop hive serde2 objectinspector primitive primitiveobjectinspectorfactory
/**
* join operator implementation.
*/
public abstract class commonjoinoperator<t extends joindesc> extends
operator<t> implements serializable
private static final long serialversionuid   1l
protected static final log log   logfactory getlog commonjoinoperator class
getname
/**
* intermediateobject.
*
*/
public static class intermediateobject
arraylist<object> objs
int cursize
public intermediateobject arraylist<object> objs  int cursize
this objs   objs
this cursize   cursize
public arraylist<object> getobjs
return objs
public int getcursize
return cursize
public void pushobj arraylist<object> newobj
objs   newobj
public void popobj
cursize
public object topobj
return objs
protected transient int numaliases     number of aliases
/**
* the expressions for join inputs.
*/
protected transient map<byte  list<exprnodeevaluator>> joinvalues
/**
* the filters for join
*/
protected transient map<byte  list<exprnodeevaluator>> joinfilters
protected transient int filtermap
/**
* the objectinspectors for the join inputs.
*/
protected transient map<byte  list<objectinspector>> joinvaluesobjectinspectors
/**
* the objectinspectors for join filters.
*/
protected transient
map<byte  list<objectinspector>> joinfilterobjectinspectors
/**
* the standard objectinspectors for the join inputs.
*/
protected transient map<byte  list<objectinspector>> joinvaluesstandardobjectinspectors
/**
* the standard objectinspectors for the row container.
*/
protected transient
map<byte  list<objectinspector>> rowcontainerstandardobjectinspectors
protected transient byte order     order in which the results should
// be output
protected transient joinconddesc condn
protected transient boolean nullsafes
public transient boolean noouterjoin
protected transient object dummyobj     for outer joins  contains the
// potential nulls for the concerned
// aliases
protected transient rowcontainer<arraylist<object>> dummyobjvectors     empty
// rows
// for
// each
// table
protected transient int totalsz     total size of the composite object
// keys are the column names. basically this maps the position of the column
// in
// the output of the commonjoinoperator to the input columninfo.
private transient map<integer  set<string>> postoaliasmap
transient lazybinaryserde spilltableserde
protected transient map<byte  tabledesc> spilltabledesc     spill tables are
// used if the join
// input is too large
// to fit in memory
hashmap<byte  abstractrowcontainer<arraylist<object>>> storage     map b w table alias
// to rowcontainer
int joinemitinterval    1
int joincachesize   0
int nextsz   0
transient byte lastalias   null
transient boolean handleskewjoin   false
transient boolean hasleftsemijoin   false
protected transient int countafterreport
protected transient int heartbeatinterval
protected static final int notskipbigtable    1
public commonjoinoperator
public commonjoinoperator commonjoinoperator<t> clone
this joinemitinterval   clone joinemitinterval
this joincachesize   clone joincachesize
this nextsz   clone nextsz
this childoperators   clone childoperators
this parentoperators   clone parentoperators
this counternames   clone counternames
this counternametoenum   clone counternametoenum
this done   clone done
this operatorid   clone operatorid
this storage   clone storage
this condn   clone condn
this conf   clone getconf
this setschema clone getschema
this alias   clone alias
this begintime   clone begintime
this inputrows   clone inputrows
this childoperatorsarray   clone childoperatorsarray
this childoperatorstag   clone childoperatorstag
this colexprmap   clone colexprmap
this counters   clone counters
this dummyobj   clone dummyobj
this dummyobjvectors   clone dummyobjvectors
this forwardcache   clone forwardcache
this groupkeyobject   clone groupkeyobject
this handleskewjoin   clone handleskewjoin
this hconf   clone hconf
this id   clone id
this inputobjinspectors   clone inputobjinspectors
this inputrows   clone inputrows
this noouterjoin   clone noouterjoin
this numaliases   clone numaliases
this operatorid   clone operatorid
this postoaliasmap   clone postoaliasmap
this spilltabledesc   clone spilltabledesc
this statsmap   clone statsmap
this joinfilters   clone joinfilters
this joinfilterobjectinspectors   clone joinfilterobjectinspectors
protected static <t extends joindesc> objectinspector getjoinoutputobjectinspector
byte order  map<byte  list<objectinspector>> aliastoobjectinspectors
t conf
arraylist<objectinspector> structfieldobjectinspectors   new arraylist<objectinspector>
for  byte alias   order
list<objectinspector> oilist   aliastoobjectinspectors get alias
structfieldobjectinspectors addall oilist
structobjectinspector joinoutputobjectinspector   objectinspectorfactory
getstandardstructobjectinspector conf getoutputcolumnnames
structfieldobjectinspectors
return joinoutputobjectinspector
configuration hconf
@override
protected void initializeop configuration hconf  throws hiveexception
this handleskewjoin   conf gethandleskewjoin
this hconf   hconf
heartbeatinterval   hiveconf getintvar hconf
hiveconf confvars hivesendheartbeat
countafterreport   0
totalsz   0
// map that contains the rows for each alias
storage   new hashmap<byte  abstractrowcontainer<arraylist<object>>>
numaliases   conf getexprs   size
joinvalues   new hashmap<byte  list<exprnodeevaluator>>
joinfilters   new hashmap<byte  list<exprnodeevaluator>>
order   conf gettagorder
condn   conf getconds
nullsafes   conf getnullsafes
noouterjoin   conf isnoouterjoin
totalsz   joinutil populatejoinkeyvalue joinvalues  conf getexprs
order notskipbigtable
//process join filters
joinfilters   new hashmap<byte  list<exprnodeevaluator>>
joinutil populatejoinkeyvalue joinfilters  conf getfilters   order notskipbigtable
joinvaluesobjectinspectors   joinutil getobjectinspectorsfromevaluators joinvalues
inputobjinspectors notskipbigtable
joinfilterobjectinspectors   joinutil getobjectinspectorsfromevaluators joinfilters
inputobjinspectors notskipbigtable
joinvaluesstandardobjectinspectors   joinutil getstandardobjectinspectors
joinvaluesobjectinspectors notskipbigtable
filtermap   conf getfiltermap
if  noouterjoin
rowcontainerstandardobjectinspectors   joinvaluesstandardobjectinspectors
else
map<byte  list<objectinspector>> rowcontainerobjectinspectors
new hashmap<byte  list<objectinspector>>
for  byte alias   order
arraylist<objectinspector> rcois   new arraylist<objectinspector>
rcois addall joinvaluesobjectinspectors get alias
// for each alias, add object inspector for boolean as the last element
rcois add
primitiveobjectinspectorfactory writablebyteobjectinspector
rowcontainerobjectinspectors put alias  rcois
rowcontainerstandardobjectinspectors
joinutil getstandardobjectinspectors rowcontainerobjectinspectors notskipbigtable
dummyobj   new object
dummyobjvectors   new rowcontainer
joinemitinterval   hiveconf getintvar hconf
hiveconf confvars hivejoinemitinterval
joincachesize   hiveconf getintvar hconf
hiveconf confvars hivejoincachesize
// construct dummy null row (indicating empty table) and
// construct spill table serde which is used if input is too
// large to fit into main memory.
byte pos   0
for  byte alias   order
int sz   conf getexprs   get alias  size
arraylist<object> nr   new arraylist<object> sz
for  int j   0  j < sz  j
nr add null
if   noouterjoin
// add whether the row is filtered or not
// this value does not matter for the dummyobj
// because the join values are already null
nr add new bytewritable
dummyobj   nr
// there should be only 1 dummy object in the rowcontainer
rowcontainer<arraylist<object>> values   joinutil getrowcontainer hconf
rowcontainerstandardobjectinspectors get  byte pos
alias  1  spilltabledesc  conf   hasfilter pos   reporter
values add  arraylist<object>  dummyobj
dummyobjvectors   values
// if serde is null, the input doesn't need to be spilled out
// e.g., the output columns does not contains the input table
rowcontainer rc   joinutil getrowcontainer hconf
rowcontainerstandardobjectinspectors get  byte pos
alias  joincachesize spilltabledesc  conf   hasfilter pos   reporter
storage put pos  rc
pos
forwardcache   new object
outputobjinspector   getjoinoutputobjectinspector order
joinvaluesstandardobjectinspectors  conf
for  int i   0  i < condn length  i
if condn gettype      joindesc left_semi_join
hasleftsemijoin   true
log info
structobjectinspector  outputobjinspector  gettypename
totalsz
transient boolean newgroupstarted   false
@override
public void startgroup   throws hiveexception
log trace
newgroupstarted   true
for  abstractrowcontainer<arraylist<object>> alw   storage values
alw clear
protected int getnextsize int sz
// a very simple counter to keep track of join entries for a key
if  sz >  100000
return sz   100000
return 2   sz
protected transient byte alias
transient object forwardcache
private void createforwardjoinobject intermediateobject intobj
boolean nullsarr  throws hiveexception
int p   0
for  int i   0  i < numaliases  i
byte alias   order
int sz   joinvalues get alias  size
if  nullsarr
for  int j   0  j < sz  j
forwardcache   null
else
arraylist<object> obj   intobj getobjs
for  int j   0  j < sz  j
forwardcache   obj get j
forward forwardcache  outputobjinspector
countafterreport   0
private void copyoldarray boolean src  boolean dest
for  int i   0  i < src length  i
dest   src
private arraylist<boolean> joinobjectsinnerjoin
arraylist<boolean> resnulls  arraylist<boolean> inputnulls
arraylist<object> newobj  intermediateobject intobj  int left
boolean newobjnull
if  newobjnull
return resnulls
iterator<boolean> nullsiter   inputnulls iterator
while  nullsiter hasnext
boolean oldnulls   nullsiter next
boolean oldobjnull   oldnulls
if   oldobjnull
boolean newnulls   new boolean
copyoldarray oldnulls  newnulls
newnulls   false
resnulls add newnulls
return resnulls
/**
* implement semi join operator.
*/
private arraylist<boolean> joinobjectsleftsemijoin
arraylist<boolean> resnulls  arraylist<boolean> inputnulls
arraylist<object> newobj  intermediateobject intobj  int left
boolean newobjnull
if  newobjnull
return resnulls
iterator<boolean> nullsiter   inputnulls iterator
while  nullsiter hasnext
boolean oldnulls   nullsiter next
boolean oldobjnull   oldnulls
if   oldobjnull
boolean newnulls   new boolean
copyoldarray oldnulls  newnulls
newnulls   false
resnulls add newnulls
return resnulls
private arraylist<boolean> joinobjectsleftouterjoin
arraylist<boolean> resnulls  arraylist<boolean> inputnulls
arraylist<object> newobj  intermediateobject intobj  int left  int right
boolean newobjnull
// newobj is null if is already null or
// if the row corresponding to the left alias does not pass through filter
newobjnull    isleftfiltered left  right  intobj getobjs
iterator<boolean> nullsiter   inputnulls iterator
while  nullsiter hasnext
boolean oldnulls   nullsiter next
boolean oldobjnull   oldnulls
boolean newnulls   new boolean
copyoldarray oldnulls  newnulls
if  oldobjnull
newnulls   true
else
newnulls   newobjnull
resnulls add newnulls
return resnulls
private arraylist<boolean> joinobjectsrightouterjoin
arraylist<boolean> resnulls  arraylist<boolean> inputnulls
arraylist<object> newobj  intermediateobject intobj  int left  int right
boolean newobjnull  boolean firstrow
if  newobjnull
return resnulls
if  inputnulls isempty      firstrow
boolean newnulls   new boolean
for  int i   0  i < intobj getcursize     1  i
newnulls   true
newnulls   newobjnull
resnulls add newnulls
return resnulls
boolean alloldobjsnull   firstrow
iterator<boolean> nullsiter   inputnulls iterator
while  nullsiter hasnext
boolean oldnulls   nullsiter next
if   oldnulls
alloldobjsnull   false
break
// if the row does not pass through filter, all old objects are null
if  isrightfiltered left  right  newobj
alloldobjsnull   true
nullsiter   inputnulls iterator
while  nullsiter hasnext
boolean oldnulls   nullsiter next
boolean oldobjnull   oldnulls    alloldobjsnull
if   oldobjnull
boolean newnulls   new boolean
copyoldarray oldnulls  newnulls
newnulls   newobjnull
resnulls add newnulls
else if  alloldobjsnull
boolean newnulls   new boolean
for  int i   0  i < intobj getcursize     1  i
newnulls   true
newnulls   newobjnull
resnulls add newnulls
return resnulls
return resnulls
private arraylist<boolean> joinobjectsfullouterjoin
arraylist<boolean> resnulls  arraylist<boolean> inputnulls
arraylist<object> newobj  intermediateobject intobj  int left  int right
boolean newobjnull  boolean firstrow
if  newobjnull
iterator<boolean> nullsiter   inputnulls iterator
while  nullsiter hasnext
boolean oldnulls   nullsiter next
boolean newnulls   new boolean
copyoldarray oldnulls  newnulls
newnulls   newobjnull
resnulls add newnulls
return resnulls
if  inputnulls isempty      firstrow
boolean newnulls   new boolean
for  int i   0  i < intobj getcursize     1  i
newnulls   true
newnulls   newobjnull
resnulls add newnulls
return resnulls
boolean alloldobjsnull   firstrow
iterator<boolean> nullsiter   inputnulls iterator
while  nullsiter hasnext
boolean oldnulls   nullsiter next
if   oldnulls
alloldobjsnull   false
break
// if the row does not pass through filter, all old objects are null
if  isrightfiltered left  right  newobj
alloldobjsnull   true
boolean rhspreserved   false
nullsiter   inputnulls iterator
while  nullsiter hasnext
boolean oldnulls   nullsiter next
// old obj is null even if the row corresponding to the left alias
// does not pass through filter
boolean oldobjnull   oldnulls    alloldobjsnull
isleftfiltered left  right  intobj getobjs
if   oldobjnull
boolean newnulls   new boolean
copyoldarray oldnulls  newnulls
newnulls   newobjnull
resnulls add newnulls
else if  oldobjnull
boolean newnulls   new boolean
copyoldarray oldnulls  newnulls
newnulls   true
resnulls add newnulls
if  alloldobjsnull     rhspreserved
newnulls   new boolean
for  int i   0  i < oldnulls length  i
newnulls   true
newnulls   false
resnulls add newnulls
rhspreserved   true
return resnulls
/*
* the new input is added to the list of existing inputs. each entry in the
* array of inputnulls denotes the entries in the intermediate object to be
* used. the intermediate object is augmented with the new object, and list of
* nulls is changed appropriately. the list will contain all non-nulls for a
* inner join. the outer joins are processed appropriately.
*/
private arraylist<boolean> joinobjects arraylist<boolean> inputnulls
arraylist<object> newobj  intermediateobject intobj  int joinpos
boolean firstrow
arraylist<boolean> resnulls   new arraylist<boolean>
boolean newobjnull   newobj    dummyobj ? true   false
if  joinpos    0
if  newobjnull
return null
boolean nulls   new boolean
nulls   newobjnull
resnulls add nulls
return resnulls
int left   condn getleft
int right   condn getright
int type   condn gettype
// process all nulls for right and full outer joins
if    type    joindesc right_outer_join      type    joindesc full_outer_join
newobjnull     inputnulls    null     firstrow
boolean newnulls   new boolean
for  int i   0  i < newnulls length   1  i
newnulls   true
newnulls   false
resnulls add newnulls
return resnulls
if  inputnulls    null
return null
if  type    joindesc inner_join
return joinobjectsinnerjoin resnulls  inputnulls  newobj  intobj  left
newobjnull
else if  type    joindesc left_outer_join
return joinobjectsleftouterjoin resnulls  inputnulls  newobj  intobj
left  right  newobjnull
else if  type    joindesc right_outer_join
return joinobjectsrightouterjoin resnulls  inputnulls  newobj  intobj
left  right  newobjnull  firstrow
else if  type    joindesc left_semi_join
return joinobjectsleftsemijoin resnulls  inputnulls  newobj  intobj
left  newobjnull
assert  type    joindesc full_outer_join
return joinobjectsfullouterjoin resnulls  inputnulls  newobj  intobj  left  right
newobjnull  firstrow
/*
* genobject is a recursive function. for the inputs, a array of bitvectors is
* maintained (inputnulls) where each entry denotes whether the element is to
* be used or not (whether it is null or not). the size of the bitvector is
* same as the number of inputs under consideration currently. when all inputs
* are accounted for, the output is forwarded appropriately.
*/
private void genobject arraylist<boolean> inputnulls  int aliasnum
intermediateobject intobj  boolean firstrow  throws hiveexception
boolean childfirstrow   firstrow
boolean skipping   false
if  aliasnum < numaliases
// search for match in the rhs table
abstractrowcontainer<arraylist<object>> aliasres   storage get order
for  arraylist<object> newobj   aliasres first    newobj    null  newobj   aliasres
next
// check for skipping in case of left semi join
if  aliasnum > 0
condn gettype      joindesc left_semi_join
newobj    dummyobj       successful match
skipping   true
intobj pushobj newobj
// execute the actual join algorithm
arraylist<boolean> newnulls   joinobjects inputnulls  newobj  intobj
aliasnum  childfirstrow
// recursively call the join the other rhs tables
genobject newnulls  aliasnum   1  intobj  firstrow
intobj popobj
firstrow   false
// if left-semi-join found a match, skipping the rest of the rows in the
// rhs table of the semijoin
if  skipping
break
else
if  inputnulls    null
return
iterator<boolean> nullsiter   inputnulls iterator
while  nullsiter hasnext
boolean nullsvec   nullsiter next
createforwardjoinobject intobj  nullsvec
/**
* forward a record of join results.
*
* @throws hiveexception
*/
@override
public void endgroup   throws hiveexception
log trace     numaliases
checkandgenobject
private void genuniquejoinobject int aliasnum  int forwardcachepos
throws hiveexception
abstractrowcontainer<arraylist<object>> alias   storage get order
for  arraylist<object> row   alias first    row    null  row   alias next
int sz   joinvalues get order  size
int p   forwardcachepos
for  int j   0  j < sz  j
forwardcache   row get j
if  aliasnum    numaliases   1
forward forwardcache  outputobjinspector
countafterreport   0
else
genuniquejoinobject aliasnum   1  p
private void genalloneuniquejoinobject
throws hiveexception
int p   0
for  int i   0  i < numaliases  i
int sz   joinvalues get order  size
arraylist<object> obj   storage get order  first
for  int j   0  j < sz  j
forwardcache   obj get j
forward forwardcache  outputobjinspector
countafterreport   0
protected void checkandgenobject   throws hiveexception
if  condn gettype      joindesc unique_join
// check if results need to be emitted.
// results only need to be emitted if there is a non-null entry in a table
// that is preserved or if there are no non-null entries
boolean preserve   false     will be true if there is a non null entry
// in a preserved table
boolean hasnulls   false     will be true if there are null entries
boolean allone   true
for  int i   0  i < numaliases  i
byte alias   order
abstractrowcontainer<arraylist<object>> alw   storage get alias
if  alw size      1
allone   false
if  alw size      0
alw add  arraylist<object>  dummyobj
hasnulls   true
else if  condn getpreserved
preserve   true
if  hasnulls     preserve
return
if  allone
log info
genalloneuniquejoinobject
log info
else
log trace
genuniquejoinobject 0  0
log trace
else
// does any result need to be emitted
boolean mayhasmorethanone   false
boolean hasempty   false
for  int i   0  i < numaliases  i
byte alias   order
abstractrowcontainer<arraylist<object>> alw   storage get alias
if  noouterjoin
if  alw size      0
log trace     i
return
else if  alw size   > 1
mayhasmorethanone   true
else
if  alw size      0
hasempty   true
alw add  arraylist<object>  dummyobj
else if   hasempty    alw size      1
if  hasanyfiltered alias  alw first
hasempty   true
else
mayhasmorethanone   true
if   hasempty
for  arraylist<object> row   alw first    row    null  row   alw next
if  hasanyfiltered alias  row
hasempty   true
break
if   hasempty     mayhasmorethanone
log trace
genalloneuniquejoinobject
log trace
else if   hasempty     hasleftsemijoin
log trace
genuniquejoinobject 0  0
log trace
else
log trace
genobject null  0  new intermediateobject new arraylist  0
true
log trace
// returns filter result of left object by filters associated with right alias
private boolean isleftfiltered int left  int right  list<object> leftobj
if  joinvalues get order  size   < leftobj size
bytewritable filter    bytewritable  leftobj get leftobj size     1
return joinutil isfiltered filter get    right
return false
// returns filter result of right object by filters associated with left alias
private boolean isrightfiltered int left  int right  list<object> rightobj
if  joinvalues get order  size   < rightobj size
bytewritable filter    bytewritable  rightobj get rightobj size     1
return joinutil isfiltered filter get    left
return false
// returns object has any filtered tag
private boolean hasanyfiltered int alias  list<object> row
return row    dummyobj
hasfilter alias     joinutil hasanyfiltered   bytewritable  row get row size     1   get
protected final boolean hasfilter int alias
return filtermap    null    filtermap    null
protected void reportprogress
// send some status periodically
countafterreport
if   countafterreport % heartbeatinterval     0
reporter    null
reporter progress
countafterreport   0
/**
* all done.
*
*/
@override
public void closeop boolean abort  throws hiveexception
log trace
for  abstractrowcontainer<arraylist<object>> alw   storage values
if  alw    null
alw clear       clean up the temp files
storage clear
@override
public string getname
return getoperatorname
static public string getoperatorname
return
/**
* @return the postoaliasmap
*/
public map<integer  set<string>> getpostoaliasmap
return postoaliasmap
/**
* @param postoaliasmap
*          the postoaliasmap to set
*/
public void setpostoaliasmap map<integer  set<string>> postoaliasmap
this postoaliasmap   postoaliasmap