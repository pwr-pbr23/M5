/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive metastore
import java lang reflect invocationhandler
import java lang reflect invocationtargetexception
import java lang reflect method
import java lang reflect proxy
import java lang reflect undeclaredthrowableexception
import org apache commons lang exception exceptionutils
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop conf configuration
import org apache hadoop hive common javautils
import org apache hadoop hive common classification interfaceaudience
import org apache hadoop hive common classification interfacestability
import org apache hadoop hive conf hiveconf
import org apache hadoop hive metastore api metaexception
import org apache hadoop hive metastore hooks jdoconnectionurlhook
import org apache hadoop util reflectionutils
@interfaceaudience private
@interfacestability evolving
public class retryinghmshandler implements invocationhandler
private static final log log   logfactory getlog retryinghmshandler class
private final ihmshandler base
private metastoreinit metastoreinitdata metastoreinitdata
new metastoreinit metastoreinitdata
private final hiveconf hiveconf
protected retryinghmshandler hiveconf hiveconf  string name  throws metaexception
this hiveconf   hiveconf
// this has to be called before initializing the instance of hmshandler
init
this base    ihmshandler  new hivemetastore hmshandler name  hiveconf
public static ihmshandler getproxy hiveconf hiveconf  string name  throws metaexception
retryinghmshandler handler   new retryinghmshandler hiveconf  name
return  ihmshandler  proxy newproxyinstance
retryinghmshandler class getclassloader
new class   ihmshandler class    handler
private void init   throws metaexception
// using the hook on startup ensures that the hook always has priority
// over settings in *.xml.  the thread local conf needs to be used because at this point
// it has already been initialized using hiveconf.
metastoreinit updateconnectionurl hiveconf  getconf    null  metastoreinitdata
private void initms
base setconf getconf
@override
public object invoke object proxy  method method  object args  throws throwable
object ret   null
boolean gotnewconnecturl   false
boolean reloadconf   hiveconf getboolvar hiveconf
hiveconf confvars hmshandlerforcereloadconf
int retryinterval   hiveconf getintvar hiveconf
hiveconf confvars hmshandlerinterval
int retrylimit   hiveconf getintvar hiveconf
hiveconf confvars hmshandlerattempts
if  reloadconf
metastoreinit updateconnectionurl hiveconf  getconf
null  metastoreinitdata
int retrycount   0
// exception caughtexception = null;
throwable caughtexception   null
while  true
try
if  reloadconf    gotnewconnecturl
initms
ret   method invoke base  args
break
catch  javax jdo jdoexception e
caughtexception   e
catch  undeclaredthrowableexception e
if  e getcause      null
if  e getcause   instanceof javax jdo jdoexception
// due to reflection, the jdo exception is wrapped in
// invocationtargetexception
caughtexception   e getcause
else
throw e getcause
else
throw e
catch  invocationtargetexception e
if  e getcause   instanceof javax jdo jdoexception
// due to reflection, the jdo exception is wrapped in
// invocationtargetexception
caughtexception   e getcause
else
throw e getcause
if  retrycount >  retrylimit
// since returning exceptions with a nested "cause" can be a problem in
// thrift, we are stuffing the stack trace into the message itself.
throw new metaexception exceptionutils getstacktrace caughtexception
assert  retryinterval >  0
retrycount
log error
string format
retryinterval  retrycount  retrylimit
thread sleep retryinterval
// if we have a connection error, the jdo connection url hook might
// provide us with a new url to access the datastore.
string lasturl   metastoreinit getconnectionurl getconf
gotnewconnecturl   metastoreinit updateconnectionurl hiveconf  getconf
lasturl  metastoreinitdata
return ret
public configuration getconf
return hiveconf