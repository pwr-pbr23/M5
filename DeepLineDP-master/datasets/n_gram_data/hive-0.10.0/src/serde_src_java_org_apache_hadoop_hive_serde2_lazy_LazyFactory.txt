/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive serde2 lazy
import java util arraylist
import java util list
import org apache hadoop hive serde2 lazy objectinspector lazylistobjectinspector
import org apache hadoop hive serde2 lazy objectinspector lazymapobjectinspector
import org apache hadoop hive serde2 lazy objectinspector lazyobjectinspectorfactory
import org apache hadoop hive serde2 lazy objectinspector lazysimplestructobjectinspector
import org apache hadoop hive serde2 lazy objectinspector lazyunionobjectinspector
import org apache hadoop hive serde2 lazy objectinspector primitive lazybooleanobjectinspector
import org apache hadoop hive serde2 lazy objectinspector primitive lazybinaryobjectinspector
import org apache hadoop hive serde2 lazy objectinspector primitive lazybyteobjectinspector
import org apache hadoop hive serde2 lazy objectinspector primitive lazydoubleobjectinspector
import org apache hadoop hive serde2 lazy objectinspector primitive lazyfloatobjectinspector
import org apache hadoop hive serde2 lazy objectinspector primitive lazyintobjectinspector
import org apache hadoop hive serde2 lazy objectinspector primitive lazylongobjectinspector
import org apache hadoop hive serde2 lazy objectinspector primitive lazyprimitiveobjectinspectorfactory
import org apache hadoop hive serde2 lazy objectinspector primitive lazyshortobjectinspector
import org apache hadoop hive serde2 lazy objectinspector primitive lazystringobjectinspector
import org apache hadoop hive serde2 lazy objectinspector primitive lazytimestampobjectinspector
import org apache hadoop hive serde2 lazydio lazydioboolean
import org apache hadoop hive serde2 lazydio lazydiobyte
import org apache hadoop hive serde2 lazydio lazydiodouble
import org apache hadoop hive serde2 lazydio lazydiofloat
import org apache hadoop hive serde2 lazydio lazydiointeger
import org apache hadoop hive serde2 lazydio lazydiolong
import org apache hadoop hive serde2 lazydio lazydioshort
import org apache hadoop hive serde2 objectinspector objectinspector
import org apache hadoop hive serde2 objectinspector objectinspectorfactory
import org apache hadoop hive serde2 objectinspector primitiveobjectinspector
import org apache hadoop hive serde2 objectinspector objectinspector category
import org apache hadoop hive serde2 objectinspector primitiveobjectinspector primitivecategory
import org apache hadoop hive serde2 typeinfo listtypeinfo
import org apache hadoop hive serde2 typeinfo maptypeinfo
import org apache hadoop hive serde2 typeinfo primitivetypeinfo
import org apache hadoop hive serde2 typeinfo structtypeinfo
import org apache hadoop hive serde2 typeinfo typeinfo
import org apache hadoop hive serde2 typeinfo uniontypeinfo
import org apache hadoop io text
import org apache hadoop io writable
/**
* lazyfactory.
*
*/
public final class lazyfactory
/**
* create a lazy primitive object instance given a primitive object inspector based on it's
* type. it takes a boolean switch to decide whether to return a binary or standard variant
* of the lazy object.
*
* @param poi primitiveobjectinspector
* @param typebinary a switch to return either a lazyprimtive class or it's binary
*        companion
* @return lazyprimitive<? extends objectinspector, ? extends writable>
*/
public static lazyprimitive<? extends objectinspector  ? extends writable>
createlazyprimitiveclass primitiveobjectinspector poi  boolean typebinary
if  typebinary
return createlazyprimitivebinaryclass poi
else
return createlazyprimitiveclass poi
/**
* create a lazy primitive class given the type name.
*/
public static lazyprimitive<? extends objectinspector  ? extends writable>
createlazyprimitiveclass primitiveobjectinspector oi
primitivecategory p   oi getprimitivecategory
switch  p
case boolean
return new lazyboolean  lazybooleanobjectinspector  oi
case byte
return new lazybyte  lazybyteobjectinspector  oi
case short
return new lazyshort  lazyshortobjectinspector  oi
case int
return new lazyinteger  lazyintobjectinspector  oi
case long
return new lazylong  lazylongobjectinspector  oi
case float
return new lazyfloat  lazyfloatobjectinspector  oi
case double
return new lazydouble  lazydoubleobjectinspector  oi
case string
return new lazystring  lazystringobjectinspector  oi
case timestamp
return new lazytimestamp  lazytimestampobjectinspector  oi
case binary
return new lazybinary  lazybinaryobjectinspector  oi
default
throw new runtimeexception     p
public static lazyprimitive<? extends objectinspector  ? extends writable>
createlazyprimitivebinaryclass primitiveobjectinspector poi
primitivecategory pc   poi getprimitivecategory
switch  pc
case boolean
return new lazydioboolean  lazybooleanobjectinspector  poi
case byte
return new lazydiobyte  lazybyteobjectinspector  poi
case short
return new lazydioshort  lazyshortobjectinspector  poi
case int
return new lazydiointeger  lazyintobjectinspector  poi
case long
return new lazydiolong  lazylongobjectinspector  poi
case float
return new lazydiofloat  lazyfloatobjectinspector  poi
case double
return new lazydiodouble  lazydoubleobjectinspector  poi
default
throw new runtimeexception     poi
/**
* create a hierarchical lazyobject based on the given typeinfo.
*/
public static lazyobject<? extends objectinspector> createlazyobject objectinspector oi
objectinspector category c   oi getcategory
switch  c
case primitive
return createlazyprimitiveclass  primitiveobjectinspector  oi
case map
return new lazymap  lazymapobjectinspector  oi
case list
return new lazyarray  lazylistobjectinspector  oi
case struct
return new lazystruct  lazysimplestructobjectinspector  oi
case union
return new lazyunion  lazyunionobjectinspector  oi
throw new runtimeexception
/**
* creates a lazyobject based on the lazyobjectinspector. will create binary variants for
* primitive objects when the switch <code>typebinary</code> is specified as true.
*
* @param oi objectinspector
* @param typebinary boolean value used as switch to return variants of lazyprimitive
*                   objects which are initialized from a binary format for the data.
* @return lazyobject<? extends objectinspector>
*/
public static lazyobject<? extends objectinspector>
createlazyobject objectinspector oi  boolean typebinary
if  oi getcategory      category primitive
return createlazyprimitiveclass  primitiveobjectinspector  oi  typebinary
else
return createlazyobject oi
/**
* create a hierarchical objectinspector for lazyobject with the given
* typeinfo.
*
* @param typeinfo
*          the type information for the lazyobject
* @param separator
*          the array of separators for delimiting each level
* @param separatorindex
*          the current level (for separators). list(array), struct uses 1
*          level of separator, and map uses 2 levels: the first one for
*          delimiting entries, the second one for delimiting key and values.
* @param nullsequence
*          the sequence of bytes representing null.
* @return the objectinspector
*/
public static objectinspector createlazyobjectinspector typeinfo typeinfo
byte separator  int separatorindex  text nullsequence  boolean escaped
byte escapechar
objectinspector category c   typeinfo getcategory
switch  c
case primitive
return lazyprimitiveobjectinspectorfactory getlazyobjectinspector
primitivetypeinfo  typeinfo  getprimitivecategory    escaped
escapechar
case map
return lazyobjectinspectorfactory getlazysimplemapobjectinspector
createlazyobjectinspector   maptypeinfo  typeinfo
getmapkeytypeinfo    separator  separatorindex   2
nullsequence  escaped  escapechar   createlazyobjectinspector
maptypeinfo  typeinfo  getmapvaluetypeinfo    separator
separatorindex   2  nullsequence  escaped  escapechar
separator  separator
nullsequence  escaped  escapechar
case list
return lazyobjectinspectorfactory getlazysimplelistobjectinspector
createlazyobjectinspector   listtypeinfo  typeinfo
getlistelementtypeinfo    separator  separatorindex   1
nullsequence  escaped  escapechar   separator
nullsequence  escaped  escapechar
case struct
structtypeinfo structtypeinfo    structtypeinfo  typeinfo
list<string> fieldnames   structtypeinfo getallstructfieldnames
list<typeinfo> fieldtypeinfos   structtypeinfo
getallstructfieldtypeinfos
list<objectinspector> fieldobjectinspectors   new arraylist<objectinspector>
fieldtypeinfos size
for  int i   0  i < fieldtypeinfos size    i
fieldobjectinspectors add createlazyobjectinspector fieldtypeinfos
get i   separator  separatorindex   1  nullsequence  escaped
escapechar
return lazyobjectinspectorfactory getlazysimplestructobjectinspector
fieldnames  fieldobjectinspectors  separator
nullsequence  false  escaped  escapechar
case union
uniontypeinfo uniontypeinfo    uniontypeinfo  typeinfo
list<objectinspector> lazyois   new arraylist<objectinspector>
for  typeinfo uti   uniontypeinfo getallunionobjecttypeinfos
lazyois add createlazyobjectinspector uti  separator
separatorindex   1  nullsequence  escaped
escapechar
return lazyobjectinspectorfactory getlazyunionobjectinspector lazyois
separator  nullsequence  escaped  escapechar
throw new runtimeexception
/**
* create a hierarchical objectinspector for lazystruct with the given
* columnnames and columntypeinfos.
*
* @param lastcolumntakesrest
*          whether the last column of the struct should take the rest of the
*          row if there are extra fields.
* @see lazyfactory#createlazyobjectinspector(typeinfo, byte[], int, text,
*      boolean, byte)
*/
public static objectinspector createlazystructinspector
list<string> columnnames  list<typeinfo> typeinfos  byte separators
text nullsequence  boolean lastcolumntakesrest  boolean escaped
byte escapechar
arraylist<objectinspector> columnobjectinspectors   new arraylist<objectinspector>
typeinfos size
for  int i   0  i < typeinfos size    i
columnobjectinspectors add lazyfactory createlazyobjectinspector
typeinfos get i   separators  1  nullsequence  escaped  escapechar
return lazyobjectinspectorfactory getlazysimplestructobjectinspector
columnnames  columnobjectinspectors  separators  nullsequence
lastcolumntakesrest  escaped  escapechar
/**
* create a hierarchical objectinspector for columnarstruct with the given
* columnnames and columntypeinfos.
*
* @see lazyfactory#createlazyobjectinspector(typeinfo, byte[], int, text,
*      boolean, byte)
*/
public static objectinspector createcolumnarstructinspector
list<string> columnnames  list<typeinfo> columntypes  byte separators
text nullsequence  boolean escaped  byte escapechar
arraylist<objectinspector> columnobjectinspectors   new arraylist<objectinspector>
columntypes size
for  int i   0  i < columntypes size    i
columnobjectinspectors
add lazyfactory createlazyobjectinspector columntypes get i
separators  1  nullsequence  escaped  escapechar
return objectinspectorfactory getcolumnarstructobjectinspector columnnames
columnobjectinspectors
private lazyfactory
// prevent instantiation