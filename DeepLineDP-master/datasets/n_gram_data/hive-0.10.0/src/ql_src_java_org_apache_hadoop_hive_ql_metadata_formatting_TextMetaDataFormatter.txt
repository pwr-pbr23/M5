/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql metadata formatting
import java io dataoutputstream
import java io outputstream
import java io ioexception
import java util arraylist
import java util iterator
import java util list
import java util map
import java util set
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop fs filestatus
import org apache hadoop fs filesystem
import org apache hadoop fs path
import org apache hadoop hive conf hiveconf
import org apache hadoop hive metastore metastoreutils
import org apache hadoop hive metastore api fieldschema
import org apache hadoop hive ql exec utilities
import org apache hadoop hive ql metadata hive
import org apache hadoop hive ql metadata hiveexception
import org apache hadoop hive ql metadata partition
import org apache hadoop hive ql metadata table
import org apache hadoop hive ql session sessionstate loghelper
import org apache hadoop hive shims shimloader
/**
* format table and index information for human readability using
* simple lines of text.
*/
public class textmetadataformatter implements metadataformatter
private static final log log   logfactory getlog
private static final int separator   utilities tabcode
private static final int terminator   utilities newlinecode
/**
* write an error message.
*/
public void error outputstream out  string msg  int errorcode
throws hiveexception
try
out write msg getbytes
out write terminator
catch  exception e
throw new hiveexception e
/**
* write a log warn message.
*/
public void logwarn outputstream out  string msg  int errorcode
throws hiveexception
log warn msg
/**
* write a log info message.
*/
public void loginfo outputstream out  string msg  int errorcode
throws hiveexception
log info msg
/**
* write a console error message.
*/
public void consoleerror loghelper console  string msg  int errorcode
console printerror msg
/**
* write a console error message.
*/
public void consoleerror loghelper console  string msg  string detail
int errorcode
console printerror msg  detail
/**
* show a list of tables.
*/
public void showtables dataoutputstream out  set<string> tables
throws hiveexception
iterator<string> itertbls   tables iterator
try
while  itertbls hasnext
// create a row per table name
out writebytes itertbls next
out write terminator
catch  ioexception e
throw new hiveexception e
public void describetable dataoutputstream outstream
string colpath  string tablename
table tbl  partition part  list<fieldschema> cols
boolean isformatted  boolean isext
throws hiveexception
try
if  colpath equals tablename
if   isformatted
outstream writebytes metadataformatutils displaycolsunformatted cols
else
outstream writebytes
metadataformatutils getallcolumnsinformation cols
tbl ispartitioned   ? tbl getpartcols     null
else
if  isformatted
outstream writebytes metadataformatutils getallcolumnsinformation cols
else
outstream writebytes metadataformatutils displaycolsunformatted cols
if  tablename equals colpath
if  isformatted
if  part    null
outstream writebytes metadataformatutils getpartitioninformation part
else
outstream writebytes metadataformatutils gettableinformation tbl
// if extended desc table then show the complete details of the table
if  isext
// add empty line
outstream write terminator
if  part    null
// show partition information
outstream writebytes
outstream write separator
outstream writebytes part gettpartition   tostring
outstream write separator
// comment column is empty
outstream write terminator
else
// show table information
outstream writebytes
outstream write separator
outstream writebytes tbl getttable   tostring
outstream write separator
outstream write terminator
catch  ioexception e
throw new hiveexception e
public void showtablestatus dataoutputstream outstream
hive db
hiveconf conf
list<table> tbls
map<string  string> part
partition par
throws hiveexception
try
iterator<table> itertables   tbls iterator
while  itertables hasnext
// create a row per table name
table tbl   itertables next
string tablename   tbl gettablename
string tblloc   null
string inputformattcls   null
string outputformattcls   null
if  part    null
if  par    null
if  par getlocation      null
tblloc   par getdatalocation   tostring
inputformattcls   par getinputformatclass   getname
outputformattcls   par getoutputformatclass   getname
else
if  tbl getpath      null
tblloc   tbl getdatalocation   tostring
inputformattcls   tbl getinputformatclass   getname
outputformattcls   tbl getoutputformatclass   getname
string owner   tbl getowner
list<fieldschema> cols   tbl getcols
string ddlcols   metastoreutils getddlfromfieldschema    cols
boolean ispartitioned   tbl ispartitioned
string partitioncols
if  ispartitioned
partitioncols   metastoreutils getddlfromfieldschema
tbl getpartcols
outstream writebytes     tablename
outstream write terminator
outstream writebytes     owner
outstream write terminator
outstream writebytes     tblloc
outstream write terminator
outstream writebytes     inputformattcls
outstream write terminator
outstream writebytes     outputformattcls
outstream write terminator
outstream writebytes     ddlcols
outstream write terminator
outstream writebytes     ispartitioned
outstream write terminator
outstream writebytes     partitioncols
outstream write terminator
// output file system information
path tblpath   tbl getpath
list<path> locations   new arraylist<path>
if  ispartitioned
if  par    null
for  partition curpart   db getpartitions tbl
if  curpart getlocation      null
locations add new path curpart getlocation
else
if  par getlocation      null
locations add new path par getlocation
else
if  tblpath    null
locations add tblpath
if   locations isempty
writefilesystemstats outstream  conf  locations  tblpath  false  0
outstream write terminator
catch  ioexception e
throw new hiveexception e
private void writefilesystemstats dataoutputstream outstream
hiveconf conf
list<path> locations
path tblpath  boolean partspecified  int indent
throws ioexception
long totalfilesize   0
long maxfilesize   0
long minfilesize   long max_value
long lastaccesstime   0
long lastupdatetime   0
int numoffiles   0
boolean unknown   false
filesystem fs   tblpath getfilesystem conf
// in case all files in locations do not exist
try
filestatus tmpstatus   fs getfilestatus tblpath
lastaccesstime   shimloader gethadoopshims   getaccesstime tmpstatus
lastupdatetime   tmpstatus getmodificationtime
if  partspecified
// check whether the part exists or not in fs
tmpstatus   fs getfilestatus locations get 0
catch  ioexception e
log warn
e
unknown   true
if   unknown
for  path loc   locations
try
filestatus status   fs getfilestatus tblpath
filestatus files   fs liststatus loc
long accesstime   shimloader gethadoopshims   getaccesstime status
long updatetime   status getmodificationtime
// no matter loc is the table location or part location, it must be a
// directory.
if   status isdir
continue
if  accesstime > lastaccesstime
lastaccesstime   accesstime
if  updatetime > lastupdatetime
lastupdatetime   updatetime
for  filestatus currentstatus   files
if  currentstatus isdir
continue
numoffiles
long filelen   currentstatus getlen
totalfilesize    filelen
if  filelen > maxfilesize
maxfilesize   filelen
if  filelen < minfilesize
minfilesize   filelen
accesstime   shimloader gethadoopshims   getaccesstime
currentstatus
updatetime   currentstatus getmodificationtime
if  accesstime > lastaccesstime
lastaccesstime   accesstime
if  updatetime > lastupdatetime
lastupdatetime   updatetime
catch  ioexception e
// ignore
string unknownstring
for  int k   0  k < indent  k
outstream writebytes utilities indent
outstream writebytes
outstream writebytes unknown ? unknownstring       numoffiles
outstream write terminator
for  int k   0  k < indent  k
outstream writebytes utilities indent
outstream writebytes
outstream writebytes unknown ? unknownstring       totalfilesize
outstream write terminator
for  int k   0  k < indent  k
outstream writebytes utilities indent
outstream writebytes
outstream writebytes unknown ? unknownstring       maxfilesize
outstream write terminator
for  int k   0  k < indent  k
outstream writebytes utilities indent
outstream writebytes
if  numoffiles > 0
outstream writebytes unknown ? unknownstring       minfilesize
else
outstream writebytes unknown ? unknownstring       0
outstream write terminator
for  int k   0  k < indent  k
outstream writebytes utilities indent
outstream writebytes
outstream writebytes  unknown    lastaccesstime < 0  ? unknownstring
lastaccesstime
outstream write terminator
for  int k   0  k < indent  k
outstream writebytes utilities indent
outstream writebytes
outstream writebytes unknown ? unknownstring       lastupdatetime
outstream write terminator
/**
* show the table partitions.
*/
public void showtablepartitons dataoutputstream outstream  list<string> parts
throws hiveexception
try
for  string part   parts
outstream writebytes part
outstream write terminator
catch  ioexception e
throw new hiveexception e
/**
* show the list of databases
*/
public void showdatabases dataoutputstream outstream  list<string> databases
throws hiveexception
try
for  string database   databases
// create a row per database name
outstream writebytes database
outstream write terminator
catch  ioexception e
throw new hiveexception e
/**
* describe a database
*/
public void showdatabasedescription dataoutputstream outstream
string database
string comment
string location
map<string  string> params
throws hiveexception
try
outstream writebytes database
outstream write separator
if  comment    null
outstream writebytes comment
outstream write separator
if  location    null
outstream writebytes location
outstream write separator
if  params    null     params isempty
outstream writebytes params tostring
outstream write terminator
catch  ioexception e
throw new hiveexception e