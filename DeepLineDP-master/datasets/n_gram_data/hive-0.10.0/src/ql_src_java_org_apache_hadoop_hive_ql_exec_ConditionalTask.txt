/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql exec
import java io serializable
import java util list
import org apache hadoop hive conf hiveconf
import org apache hadoop hive ql context
import org apache hadoop hive ql drivercontext
import org apache hadoop hive ql queryplan
import org apache hadoop hive ql plan conditionalresolver
import org apache hadoop hive ql plan conditionalwork
import org apache hadoop hive ql plan api stagetype
/**
* conditional task implementation.
*/
public class conditionaltask extends task<conditionalwork> implements serializable
private static final long serialversionuid   1l
private list<task<? extends serializable>> listtasks
private boolean resolved   false
private list<task<? extends serializable>> restasks
private conditionalresolver resolver
private object resolverctx
public conditionaltask
super
@override
public boolean ismapredtask
for  task<? extends serializable> task   listtasks
if  task ismapredtask
return true
return false
@override
public boolean hasreduce
for  task<? extends serializable> task   listtasks
if  task hasreduce
return true
return false
@override
public void initialize hiveconf conf  queryplan queryplan  drivercontext drivercontext
super initialize conf  queryplan  drivercontext
@override
public int execute drivercontext drivercontext
restasks   resolver gettasks conf  resolverctx
resolved   true
for  task<? extends serializable> tsk   getlisttasks
if   restasks contains tsk
drivercontext getrunnable   remove tsk
console printinfo hadoopjobexechelper getjobendmsg     utilities randgen nextint
if  tsk ismapredtask
drivercontext inccurjobno 1
//recursively remove this task from its children's parent task
tsk removefromchildrentasks
else
// resolved task
if   drivercontext getrunnable   contains tsk
drivercontext addtorunnable tsk
return 0
/**
* @return the resolver
*/
public conditionalresolver getresolver
return resolver
/**
* @param resolver
*          the resolver to set
*/
public void setresolver conditionalresolver resolver
this resolver   resolver
/**
* @return the resolverctx
*/
public object getresolverctx
return resolverctx
// used to determine whether child tasks can be run.
@override
public boolean done
boolean ret   true
list<task<? extends serializable>> parenttasks   getparenttasks
if  parenttasks    null
for  task<? extends serializable> par   parenttasks
ret   ret    par done
list<task<? extends serializable>> rettasks
if  resolved
rettasks   restasks
else
rettasks   getlisttasks
if  ret    rettasks    null
for  task<? extends serializable> tsk   rettasks
ret   ret    tsk done
return ret
/**
* @param resolverctx
*          the resolverctx to set
*/
public void setresolverctx object resolverctx
this resolverctx   resolverctx
/**
* @return the listtasks
*/
public list<task<? extends serializable>> getlisttasks
return listtasks
/**
* @param listtasks
*          the listtasks to set
*/
public void setlisttasks list<task<? extends serializable>> listtasks
this listtasks   listtasks
@override
public stagetype gettype
return stagetype conditional
@override
public string getname
return
/**
* add a dependent task on the current conditional task. the task will not be a direct child of
* conditional task. actually it will be added as child task of associated tasks.
*
* @return true if the task got added false if it already existed
*/
@override
public boolean adddependenttask task<? extends serializable> dependent
boolean ret   false
if  getlisttasks      null
for  task<? extends serializable> tsk   getlisttasks
ret   ret   tsk adddependenttask dependent
return ret
@override
protected void localizemrtmpfilesimpl context ctx
if  getlisttasks      null
for  task<? extends serializable> t   getlisttasks
t localizemrtmpfiles ctx
@override
public list<task<? extends serializable>> getdependenttasks
return listtasks