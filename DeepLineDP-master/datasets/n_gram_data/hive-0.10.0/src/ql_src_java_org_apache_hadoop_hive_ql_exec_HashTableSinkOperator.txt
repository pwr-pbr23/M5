/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql exec
import java io file
import java io serializable
import java util arraylist
import java util hashmap
import java util list
import java util map
import java util map entry
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop conf configuration
import org apache hadoop fs filesystem
import org apache hadoop fs path
import org apache hadoop hive conf hiveconf
import org apache hadoop hive ql exec persistence abstractmapjoinkey
import org apache hadoop hive ql exec persistence hashmapwrapper
import org apache hadoop hive ql exec persistence mapjoinobjectvalue
import org apache hadoop hive ql exec persistence mapjoinrowcontainer
import org apache hadoop hive ql exec persistence rowcontainer
import org apache hadoop hive ql metadata hiveexception
import org apache hadoop hive ql plan hashtablesinkdesc
import org apache hadoop hive ql plan tabledesc
import org apache hadoop hive ql plan api operatortype
import org apache hadoop hive ql session sessionstate loghelper
import org apache hadoop hive serde2 serde
import org apache hadoop hive serde2 serdeexception
import org apache hadoop hive serde2 objectinspector objectinspector
import org apache hadoop hive serde2 objectinspector objectinspectorfactory
import org apache hadoop hive serde2 objectinspector objectinspectorutils
import org apache hadoop hive serde2 objectinspector objectinspectorutils objectinspectorcopyoption
import org apache hadoop hive serde2 objectinspector standardstructobjectinspector
import org apache hadoop hive serde2 objectinspector primitive primitiveobjectinspectorfactory
import org apache hadoop util reflectionutils
public class hashtablesinkoperator extends terminaloperator<hashtablesinkdesc> implements
serializable
private static final long serialversionuid   1l
private static final log log   logfactory getlog hashtablesinkoperator class getname
// from abstract map join operator
/**
* the expressions for join inputs's join keys.
*/
protected transient map<byte  list<exprnodeevaluator>> joinkeys
/**
* the objectinspectors for the join inputs's join keys.
*/
protected transient map<byte  list<objectinspector>> joinkeysobjectinspectors
/**
* the standard objectinspectors for the join inputs's join keys.
*/
protected transient map<byte  list<objectinspector>> joinkeysstandardobjectinspectors
protected transient int posbigtabletag    1     one of the tables that is not in memory
protected transient int posbigtablealias    1     one of the tables that is not in memory
transient int mapjoinrowskey     rows for a given key
protected transient rowcontainer<arraylist<object>> emptylist   null
transient int nummaprowsread
protected transient int totalsz     total size of the composite object
transient boolean firstrow
/**
* the filters for join
*/
protected transient map<byte  list<exprnodeevaluator>> joinfilters
protected transient int filtermap
protected transient int numaliases     number of aliases
/**
* the expressions for join outputs.
*/
protected transient map<byte  list<exprnodeevaluator>> joinvalues
/**
* the objectinspectors for the join inputs.
*/
protected transient map<byte  list<objectinspector>> joinvaluesobjectinspectors
/**
* the objectinspectors for join filters.
*/
protected transient map<byte  list<objectinspector>> joinfilterobjectinspectors
/**
* the standard objectinspectors for the join inputs.
*/
protected transient map<byte  list<objectinspector>> joinvaluesstandardobjectinspectors
protected transient map<byte  list<objectinspector>> rowcontainerstandardobjectinspectors
protected transient byte order     order in which the results should
configuration hconf
protected transient byte alias
protected transient map<byte  tabledesc> spilltabledesc     spill tables are
protected transient map<byte  hashmapwrapper<abstractmapjoinkey  mapjoinobjectvalue>> mapjointables
protected transient boolean noouterjoin
private long rownumber   0
protected transient loghelper console
private long hashtablescale
private boolean isabort   false
public static class hashtablesinkobjectctx
objectinspector standardoi
serde serde
tabledesc tbldesc
configuration conf
/**
* @param standardoi
* @param serde
*/
public hashtablesinkobjectctx objectinspector standardoi  serde serde  tabledesc tbldesc
configuration conf
this standardoi   standardoi
this serde   serde
this tbldesc   tbldesc
this conf   conf
/**
* @return the standardoi
*/
public objectinspector getstandardoi
return standardoi
/**
* @return the serde
*/
public serde getserde
return serde
public tabledesc gettbldesc
return tbldesc
public configuration getconf
return conf
private static final transient string fatal_err_msg
null     counter value 0 means no error
private final int metadatakeytag    1
transient int metadatavaluetag
public hashtablesinkoperator
public hashtablesinkoperator mapjoinoperator mjop
this conf   new hashtablesinkdesc mjop getconf
@override
protected void initializeop configuration hconf  throws hiveexception
boolean issilent   hiveconf getboolvar hconf  hiveconf confvars hivesessionsilent
console   new loghelper log  issilent
nummaprowsread   0
firstrow   true
// for small tables only; so get the big table position first
posbigtabletag   conf getposbigtable
order   conf gettagorder
posbigtablealias   order
// initialize some variables, which used to be initialized in commonjoinoperator
numaliases   conf getexprs   size
this hconf   hconf
totalsz   0
noouterjoin   conf isnoouterjoin
filtermap   conf getfiltermap
// process join keys
joinkeys   new hashmap<byte  list<exprnodeevaluator>>
joinutil populatejoinkeyvalue joinkeys  conf getkeys    order  posbigtablealias
joinkeysobjectinspectors   joinutil getobjectinspectorsfromevaluators joinkeys
inputobjinspectors  posbigtablealias
joinkeysstandardobjectinspectors   joinutil getstandardobjectinspectors
joinkeysobjectinspectors  posbigtablealias
// process join values
joinvalues   new hashmap<byte  list<exprnodeevaluator>>
joinutil populatejoinkeyvalue joinvalues  conf getexprs    order  posbigtablealias
joinvaluesobjectinspectors   joinutil getobjectinspectorsfromevaluators joinvalues
inputobjinspectors  posbigtablealias
joinvaluesstandardobjectinspectors   joinutil getstandardobjectinspectors
joinvaluesobjectinspectors  posbigtablealias
// process join filters
joinfilters   new hashmap<byte  list<exprnodeevaluator>>
joinutil populatejoinkeyvalue joinfilters  conf getfilters    order  posbigtablealias
joinfilterobjectinspectors   joinutil getobjectinspectorsfromevaluators joinfilters
inputobjinspectors  posbigtablealias
if  noouterjoin
rowcontainerstandardobjectinspectors   joinvaluesstandardobjectinspectors
else
map<byte  list<objectinspector>> rowcontainerobjectinspectors   new hashmap<byte  list<objectinspector>>
for  byte alias   order
if  alias    posbigtablealias
continue
list<objectinspector> rcois   joinvaluesobjectinspectors get alias
if  filtermap    null    filtermap    null
// for each alias, add object inspector for filter tag as the last element
rcois   new arraylist<objectinspector> rcois
rcois add primitiveobjectinspectorfactory writablebyteobjectinspector
rowcontainerobjectinspectors put alias  rcois
rowcontainerstandardobjectinspectors   getstandardobjectinspectors rowcontainerobjectinspectors
metadatavaluetag   new int
for  int pos   0  pos < numaliases  pos
metadatavaluetag    1
mapjointables   new hashmap<byte  hashmapwrapper<abstractmapjoinkey  mapjoinobjectvalue>>
int hashtablethreshold   hiveconf getintvar hconf  hiveconf confvars hivehashtablethreshold
float hashtableloadfactor   hiveconf getfloatvar hconf
hiveconf confvars hivehashtableloadfactor
float hashtablemaxmemoryusage   this getconf   gethashtablememoryusage
hashtablescale   hiveconf getlongvar hconf  hiveconf confvars hivehashtablescale
if  hashtablescale <  0
hashtablescale   1
// initialize the hash tables for other tables
for  byte pos   order
if  pos    posbigtabletag
continue
hashmapwrapper<abstractmapjoinkey  mapjoinobjectvalue> hashtable   new hashmapwrapper<abstractmapjoinkey  mapjoinobjectvalue>
hashtablethreshold  hashtableloadfactor  hashtablemaxmemoryusage
mapjointables put pos  hashtable
protected static hashmap<byte  list<objectinspector>> getstandardobjectinspectors
map<byte  list<objectinspector>> aliastoobjectinspectors
hashmap<byte  list<objectinspector>> result   new hashmap<byte  list<objectinspector>>
for  entry<byte  list<objectinspector>> oientry   aliastoobjectinspectors entryset
byte alias   oientry getkey
list<objectinspector> oilist   oientry getvalue
arraylist<objectinspector> fieldoilist   new arraylist<objectinspector> oilist size
for  int i   0  i < oilist size    i
fieldoilist add objectinspectorutils getstandardobjectinspector oilist get i
objectinspectorcopyoption writable
result put alias  fieldoilist
return result
private void setkeymetadata   throws serdeexception
tabledesc keytabledesc   conf getkeytbldesc
serde keyserializer    serde  reflectionutils newinstance keytabledesc getdeserializerclass

keyserializer initialize null  keytabledesc getproperties
mapjoinmetadata clear
mapjoinmetadata put integer valueof metadatakeytag   new hashtablesinkobjectctx
objectinspectorutils getstandardobjectinspector keyserializer getobjectinspector
objectinspectorcopyoption writable   keyserializer  keytabledesc  hconf
/*
* this operator only process small tables read the key/value pairs load them into hashtable
*/
@override
public void processop object row  int tag  throws hiveexception
// let the mapjoinop process these small tables
try
if  firstrow
// generate the map metadata
setkeymetadata
firstrow   false
alias   order
// alias = (byte)tag;
// compute keys and values as standardobjects
abstractmapjoinkey keymap   joinutil computemapjoinkeys row  joinkeys get alias
joinkeysobjectinspectors get alias
object value   joinutil computemapjoinvalues row  joinvalues get alias
joinvaluesobjectinspectors get alias   joinfilters get alias   joinfilterobjectinspectors
get alias   filtermap    null ? null   filtermap
hashmapwrapper<abstractmapjoinkey  mapjoinobjectvalue> hashtable   mapjointables
get  byte  tag
mapjoinobjectvalue o   hashtable get keymap
mapjoinrowcontainer<object> res   null
boolean neednewkey   true
if  o    null
res   new mapjoinrowcontainer<object>
res add value
if  metadatavaluetag     1
metadatavaluetag   order
setvaluemetadata tag
// construct externalizable objects for key and value
if  neednewkey
mapjoinobjectvalue valueobj   new mapjoinobjectvalue metadatavaluetag  res
rownumber
if  rownumber > hashtablescale    rownumber % hashtablescale    0
isabort   hashtable isabort rownumber  console
if  isabort
throw new hiveexception
hashtable put keymap  valueobj
else
res   o getobj
res add value
catch  serdeexception e
throw new hiveexception e
private void setvaluemetadata int tag  throws serdeexception
tabledesc valuetabledesc   conf getvaluetblfiltereddescs   get tag
serde valueserde    serde  reflectionutils newinstance valuetabledesc getdeserializerclass

valueserde initialize null  valuetabledesc getproperties
list<objectinspector> newfields   rowcontainerstandardobjectinspectors get  byte  alias
int length   newfields size
list<string> newnames   new arraylist<string> length
for  int i   0  i < length  i
string tmp   new string     i
newnames add tmp
standardstructobjectinspector standardoi   objectinspectorfactory
getstandardstructobjectinspector newnames  newfields
mapjoinmetadata put integer valueof metadatavaluetag   new hashtablesinkobjectctx
standardoi  valueserde  valuetabledesc  hconf
@override
public void closeop boolean abort  throws hiveexception
try
if  mapjointables    null
// get tmp file uri
string tmpuri   this getexeccontext   getlocalwork   gettmpfileuri
log info     tmpuri
long filelength
for  map entry<byte  hashmapwrapper<abstractmapjoinkey  mapjoinobjectvalue>> hashtables   mapjointables
entryset
// get the key and value
byte tag   hashtables getkey
hashmapwrapper<abstractmapjoinkey  mapjoinobjectvalue> hashtable   hashtables getvalue
// get current input file name
string bigbucketfilename   getexeccontext   getcurrentbigbucketfile
string filename   getexeccontext   getlocalwork   getbucketfilename bigbucketfilename
// get the tmp uri path; it will be a hdfs path if not local mode
string dumpfileprefix   conf getdumpfileprefix
string tmpuripath   utilities generatepath tmpuri  dumpfileprefix  tag  filename
hashtable isabort rownumber  console
console printinfo utilities now         tmpuripath
// get the hashtable file and path
path path   new path tmpuripath
filesystem fs   path getfilesystem hconf
file file   new file path touri   getpath
fs create path
filelength   hashtable flushmemorycachetopersistent file
console printinfo utilities now         tmpuripath
filelength
hashtable close
super closeop abort
catch  exception e
log error
e printstacktrace
/**
* implements the getname function for the node interface.
*
* @return the name of the operator
*/
@override
public string getname
return getoperatorname
static public string getoperatorname
return
@override
public operatortype gettype
return operatortype hashtablesink