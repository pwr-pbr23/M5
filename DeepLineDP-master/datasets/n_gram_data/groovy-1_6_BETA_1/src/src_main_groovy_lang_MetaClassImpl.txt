/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package groovy lang
import org codehaus groovy groovybugerror
import org codehaus groovy ast classnode
import org codehaus groovy classgen bytecodehelper
import org codehaus groovy control compilationunit
import org codehaus groovy control phases
import org codehaus groovy reflection
import org codehaus groovy runtime
import org codehaus groovy runtime callsite
import org codehaus groovy runtime metaclass
import org codehaus groovy runtime typehandling defaulttypetransformation
import org codehaus groovy runtime typehandling numbermathmodificationinfo
import org codehaus groovy runtime wrappers wrapper
import org objectweb asm classvisitor
import java beans
import java lang reflect constructor
import java lang reflect method
import java lang reflect modifier
import java lang reflect proxy
import java net url
import java security accesscontroller
import java security privilegedaction
import java security privilegedactionexception
import java security privilegedexceptionaction
import java util
/**
* allows methods to be dynamically added to existing classes at runtime
*
* @author <a href="mailto:james@coredevelopers.net">james strachan</a>
* @author guillaume laforge
* @author jochen theodorou
* @author graeme rocher
* @author alex tkachman
* @version $revision$
* @see groovy.lang.metaclass
*/
public class metaclassimpl implements metaclass  mutablemetaclass
private static final string closure_call_method
private static final string closure_do_call_method
private static final string closure_curry_method
protected static final string static_method_missing
protected static final string static_property_missing
protected static final string method_missing
protected static final string property_missing
private static final class method_missing_args   new class string class  object class
private static final class getter_missing_args   new class string class
private static final class setter_missing_args   method_missing_args
protected final class theclass
protected final cachedclass thecachedclass
private static final metamethod empty   new metamethod
public final cachedclass getthecachedclass
return thecachedclass
protected metaclassregistry registry
protected final boolean isgroovyobject
protected final boolean ismap
private classnode classnode
private final index classpropertyindex   new methodindex
private index classpropertyindexforsuper   new methodindex
private final singlekeyhashmap staticpropertyindex   new singlekeyhashmap
private final map listeners   new hashmap
private fastarray constructors
private final list allmethods   new arraylist
private list interfacemethods
private boolean initialized
// we only need one of these that can be reused over and over.
private final metaproperty arraylengthproperty   new metaarraylengthproperty
private static final metamethod ambiguous_listener_method   new dummymetamethod
private static final object empty_arguments
private final set newgroovymethodsset   new hashset
private metamethod genericgetmethod
private metamethod genericsetmethod
private metamethod propertymissingget
private metamethod propertymissingset
private static final metamethod null_method   new dummymetamethod
private metamethod methodmissing
private metamethodindex header mainclassmethodheader
private final metamethodindex metamethodindex
private final metamethod  mynewmetamethods
private final metamethod  additionalmetamethods
public metaclassimpl final class theclass  metamethod  add
this theclass   theclass
thecachedclass   reflectioncache getcachedclass theclass
this isgroovyobject   groovyobject class isassignablefrom theclass
this ismap   map class isassignablefrom theclass
this registry   groovysystem getmetaclassregistry
metamethodindex   new metamethodindex thecachedclass
final metamethod metamethods   thecachedclass getnewmetamethods
if  add    null      add length    0
arraylist arr   new arraylist
arr addall arrays aslist metamethods
arr addall arrays aslist add
mynewmetamethods    metamethod arr toarray new metamethod
additionalmetamethods   metamethods
else
mynewmetamethods   metamethods
additionalmetamethods   empty
public metaclassimpl final class theclass
this theclass  null
public metaclassimpl metaclassregistry registry  final class theclass  metamethod add
this theclass  add
this registry   registry
this constructors   new fastarray thecachedclass getconstructors
public metaclassimpl metaclassregistry registry  final class theclass
this registry  theclass  null
/**
* @see metaobjectprotocol#respondsto(object,string, object[])
*/
public list respondsto object obj  string name  object argtypes
class classes   metaclasshelper castargumentstoclassarray argtypes
metamethod m   getmetamethod name  classes
list methods   new arraylist
if  m    null
methods add m
return methods
/**
* @see metaobjectprotocol#respondsto(object,string, object[])
*/
public list respondsto final object obj  final string name
final object o   getmethods gettheclass    name  false
if  o instanceof fastarray
return   fastarray o  tolist
else
return collections singletonlist o
/**
* @see metaobjectprotocol#hasproperty(object,string)
*/
public metaproperty hasproperty object obj  string name
return getmetaproperty name
/**
* @see metaobjectprotocol#getmetaproperty(string)
*/
public metaproperty getmetaproperty string name
singlekeyhashmap propertymap   classpropertyindex getnotnull thecachedclass
if  propertymap containskey name
return  metaproperty  propertymap get name
else if  staticpropertyindex containskey name
return  metaproperty  staticpropertyindex get name
else
propertymap   classpropertyindexforsuper getnotnull thecachedclass
return  metaproperty  propertymap get name
/**
* @see metaobjectprotocol#getstaticmetamethod(string, object[])
*/
public metamethod getstaticmetamethod string name  object argtypes
class classes   metaclasshelper castargumentstoclassarray argtypes
return pickstaticmethod name  classes
/**
* @see metaobjectprotocol#getmetamethod(string, object[])
*/
public metamethod getmetamethod string name  object argtypes
class classes   metaclasshelper castargumentstoclassarray argtypes
return pickmethod name  classes
public class gettheclass
return this theclass
public boolean isgroovyobject
return isgroovyobject
private void fillmethodindex
mainclassmethodheader   metamethodindex getheader theclass
linkedlist superclasses   getsuperclasses
cachedclass firstgroovysuper   calcfirstgroovysuperclass superclasses
set interfaces   thecachedclass getinterfaces
addinterfacemethods interfaces
populatemethods superclasses  firstgroovysuper
inheritinterfacenewmetamethods interfaces
if  isgroovyobject
metamethodindex copymethodstosuper
connectmultimethods superclasses  firstgroovysuper
removemultimethodsoverloadedwithprivatemethods
replacewithmopcalls thecachedclass mopmethods
private void populatemethods linkedlist superclasses  cachedclass firstgroovysuper
iterator iter   superclasses iterator
metamethodindex header header   metamethodindex getheader firstgroovysuper gettheclass
cachedclass c
for    iter hasnext
c    cachedclass  iter next
cachedmethod cachedmethods   c getmethods
for  int i   0  i < cachedmethods length  i
metamethod metamethod   cachedmethods
addtoallmethodsifpublic metamethod
if   metamethod isprivate      c    firstgroovysuper
addmetamethodtoindex metamethod  header
metamethod cachedmethods1   getnewmetamethods c
for  int i   0  i < cachedmethods1 length  i
final metamethod method   cachedmethods1
if   newgroovymethodsset contains method
newgroovymethodsset add method
addmetamethodtoindex method  header
if  c    firstgroovysuper
break
metamethodindex header last   header
for   iter hasnext
c    cachedclass  iter next
header   metamethodindex getheader c gettheclass
if  last    null
metamethodindex copynonprivatemethods last  header
last   header
cachedmethod cachedmethods   c getmethods
for  int i   0  i < cachedmethods length  i
metamethod metamethod   cachedmethods
addtoallmethodsifpublic metamethod
addmetamethodtoindex metamethod  header
metamethod cachedmethods1   getnewmetamethods c
for  int i   0  i < cachedmethods1 length  i
final metamethod method   cachedmethods1
if   newgroovymethodsset contains method
newgroovymethodsset add method
addmetamethodtoindex method  header
private metamethod getnewmetamethods cachedclass c
if  thecachedclass    c
return c getnewmetamethods
return mynewmetamethods
private void addinterfacemethods set interfaces
metamethodindex header header   metamethodindex getheader theclass
for  iterator iter   interfaces iterator    iter hasnext
cachedclass c    cachedclass  iter next
final cachedmethod m   c getmethods
for  int i 0  i    m length    i
metamethod method   m
string name   method getname
metamethodindex entry e   metamethodindex getorputmethods name  header
e methods   metamethodindex addmethodtolist e methods  method
protected linkedlist<cachedclass> getsuperclasses
linkedlist<cachedclass> superclasses   new linkedlist<cachedclass>
if  theclass isinterface
superclasses addfirst reflectioncache object_class
else
for  cachedclass c   thecachedclass  c    null  c   c getcachedsuperclass
superclasses addfirst c
if  thecachedclass isarray    theclass    object class     theclass getcomponenttype   isprimitive
superclasses addfirst reflectioncache object_array_class
return superclasses
private void removemultimethodsoverloadedwithprivatemethods
methodindexaction mia   new methodindexaction
public boolean skipclass class clazz
return clazz    theclass
public void methodnameaction class clazz  metamethodindex entry e
if  e methods    null
return
boolean hasprivate   false
if  e methods instanceof fastarray
fastarray methods    fastarray  e methods
final int len   methods size
final object data   methods getarray
for  int i   0  i    len    i
metamethod method    metamethod  data
if  method isprivate      clazz    method getdeclaringclass   gettheclass
hasprivate   true
break
else
metamethod method    metamethod  e methods
if  method isprivate      clazz    method getdeclaringclass   gettheclass
hasprivate   true
if   hasprivate  return
// we have private methods for that name, so remove the
// multimethods. that is the same as in our index for
// super, so just copy the list from there. it is not
// possible to use a pointer here, because the methods
// in the index for super are replaced later by mop
// methods like super$5$foo
final object o   e methodsforsuper
if  o instanceof fastarray
e methods     fastarray  o  copy
else
e methods   o
mia iterate
private void replacewithmopcalls final cachedmethod mopmethods
// no mop methods if not a child of groovyobject
if   isgroovyobject  return
class mopiter extends methodindexaction
boolean usethis
public boolean skipclass cachedclass clazz
return  usethis    clazz    thecachedclass
public void methodnameaction class clazz  metamethodindex entry e
if  usethis
if  e methods    null
return
if  e methods instanceof fastarray
fastarray methods    fastarray  e methods
processfastarray methods
else
metamethod method    metamethod  e methods
if  method instanceof newmetamethod
return
if  usethis ^  method getmodifiers      modifier public   modifier protected      0
return
string mopname   method getmopname
int index   arrays binarysearch mopmethods  mopname  cachedclass cachedmethodcomparatorwithstring instance
if  index >  0
int from   index
while  from > 0    mopmethods getname   equals mopname
from
int to   index
while  to < mopmethods length 1    mopmethods getname   equals mopname
to
int matchingmethod   findmatchingmethod mopmethods  from  to  method
if  matchingmethod     1
e methods   mopmethods
else
if  e methodsforsuper    null
return
if  e methodsforsuper instanceof fastarray
fastarray methods    fastarray  e methodsforsuper
processfastarray methods
else
metamethod method    metamethod  e methodsforsuper
if  method instanceof newmetamethod
return
if  usethis ^  method getmodifiers      modifier public   modifier protected      0
return
string mopname   method getmopname
int index   arrays binarysearch mopmethods  mopname  cachedclass cachedmethodcomparatorwithstring instance
if  index >  0
int from   index
while  from > 0    mopmethods getname   equals mopname
from
int to   index
while  to < mopmethods length 1    mopmethods getname   equals mopname
to
int matchingmethod   findmatchingmethod mopmethods  from  to  method
if  matchingmethod     1
e methodsforsuper   mopmethods
private void processfastarray fastarray methods
final int len   methods size
final object data   methods getarray
for  int i   0  i    len    i
metamethod method    metamethod  data
if  method instanceof newmetamethod
continue
if  usethis ^  method getmodifiers      modifier public   modifier protected      0  continue
string mopname   method getmopname
int index   arrays binarysearch mopmethods  mopname  cachedclass cachedmethodcomparatorwithstring instance
if  index >  0
int from   index
while  from > 0    mopmethods getname   equals mopname
from
int to   index
while  to < mopmethods length 1    mopmethods getname   equals mopname
to
int matchingmethod   findmatchingmethod mopmethods  from  to  method
if  matchingmethod     1
methods set i  mopmethods
mopiter iter   new mopiter
// replace all calls for super with the correct mop method
iter usethis   false
iter iterate
// replace all calls for this with the correct mop method
iter usethis   true
iter iterate
private void inheritinterfacenewmetamethods set interfaces
// add methods declared by dgm for interfaces
for  iterator it   interfaces iterator    it hasnext
cachedclass cls    cachedclass  it next
metamethod methods    getnewmetamethods cls
for  int i   0  i < methods length  i
metamethod method   methods
if   newgroovymethodsset contains method
newgroovymethodsset add method
metamethodindex entry e   metamethodindex getorputmethods method getname    mainclassmethodheader
e methods   metamethodindex addmethodtolist e methods  method
private void populateinterfaces set interfaces
//        for (iterator iter = interfaces.iterator(); iter.hasnext();) {
//            cachedclass iclass = (cachedclass) iter.next();
//            classindex.copynonprivatemethods(mainclassmethodheader, classindex.getheader(iclass.getcachedclass()));
//        }
private void connectmultimethods list superclasses  cachedclass firstgroovyclass
superclasses   defaultgroovymethods reverse superclasses
metamethodindex header last   null
for  iterator iter   superclasses iterator    iter hasnext
cachedclass c    cachedclass  iter next
metamethodindex header methodindex   metamethodindex getheader c gettheclass
// we don't copy dgm methods to superclasses' indexes
// the reason we can do that is particular set of dgm methods in use,
// if at some point we will define dgm method for some groovy class or
// for a class derived from such, we will need to revise this condition.
// it saves us a lot of space and some noticable time
if  last    null  metamethodindex copynonprivatenonnewmetamethods last  methodindex
last   methodindex
if  c    firstgroovyclass
break
private cachedclass calcfirstgroovysuperclass collection superclasses
if  thecachedclass isinterface
return reflectioncache object_class
cachedclass firstgroovy   null
iterator iter   superclasses iterator
for    iter hasnext
cachedclass c    cachedclass  iter next
if  groovyobject class isassignablefrom c gettheclass
firstgroovy   c
break
if  firstgroovy    null
firstgroovy   thecachedclass
else
if  firstgroovy gettheclass      groovyobjectsupport class    iter hasnext
firstgroovy    cachedclass  iter next
if  firstgroovy gettheclass      closure class    iter hasnext
firstgroovy    cachedclass  iter next
return groovyobject class isassignablefrom firstgroovy gettheclass    ? firstgroovy getcachedsuperclass     firstgroovy
/**
* @return all the normal instance methods avaiable on this class for the
*         given name
*/
private object getmethods class sender  string name  boolean iscalltosuper
object answer
final metamethodindex entry entry   metamethodindex getmethods sender  name
if  entry    null
answer   fastarray empty_list
else
if  iscalltosuper
answer   entry methodsforsuper
else
answer   entry methods
if  answer    null  answer   fastarray empty_list
if   iscalltosuper
list used   groovycategorysupport getcategorymethods name
if  used    null
fastarray arr
if  answer instanceof metamethod
arr   new fastarray
arr add answer
else
arr     fastarray  answer  copy
for  iterator iter   used iterator    iter hasnext
metamethod element    metamethod  iter next
if   element getdeclaringclass   gettheclass   isassignablefrom sender
continue
filtermatchingmethodforcategory arr  element
answer   arr
return answer
/**
* @return all the normal static methods avaiable on this class for the
*         given name
*/
private object getstaticmethods class sender  string name
final metamethodindex entry entry   metamethodindex getmethods sender  name
if  entry    null
return fastarray empty_list
object answer   entry staticmethods
if  answer    null
return fastarray empty_list
return answer
public boolean ismodified
return false      metaclassimpl not designed for modification  just return false
public void addnewinstancemethod method method
final cachedmethod cachedmethod   cachedmethod find method
newinstancemetamethod newmethod   new newinstancemetamethod cachedmethod
final cachedclass declaringclass   newmethod getdeclaringclass
addnewinstancemethodtoindex newmethod  metamethodindex getheader declaringclass gettheclass
private void addnewinstancemethodtoindex metamethod newmethod  metamethodindex header header
if   newgroovymethodsset contains newmethod
newgroovymethodsset add newmethod
addmetamethodtoindex newmethod  header
public void addnewstaticmethod method method
final cachedmethod cachedmethod   cachedmethod find method
newstaticmetamethod newmethod   new newstaticmetamethod cachedmethod
final cachedclass declaringclass   newmethod getdeclaringclass
addnewstaticmethodtoindex newmethod  metamethodindex getheader declaringclass gettheclass
private void addnewstaticmethodtoindex metamethod newmethod  metamethodindex header header
if   newgroovymethodsset contains newmethod
newgroovymethodsset add newmethod
addmetamethodtoindex newmethod  header
public object invokemethod object object  string methodname  object arguments
if  arguments    null
return invokemethod object  methodname  metaclasshelper empty_array
if  arguments instanceof tuple
tuple tuple    tuple  arguments
return invokemethod object  methodname  tuple toarray
if  arguments instanceof object
return invokemethod object  methodname   object  arguments
else
return invokemethod object  methodname  new object arguments
public object invokemissingmethod object instance  string methodname  object arguments
return invokemissingmethod instance  methodname  arguments  null
public object invokemissingproperty object instance  string propertyname  object optionalvalue  boolean isgetter
try
if    instance instanceof class
if  isgetter    propertymissingget    null
return propertymissingget invoke instance  new object propertyname
else
if  propertymissingset    null
return propertymissingset invoke instance  new object propertyname  optionalvalue
catch  invokerinvocationexception iie
boolean shouldhandle   isgetter    propertymissingget instanceof closuremetamethod
if   shouldhandle  shouldhandle    isgetter    propertymissingset instanceof closuremetamethod
if  shouldhandle     iie getcause   instanceof missingpropertyexception
throw  missingpropertyexception  iie getcause
throw iie
throw new missingpropertyexceptionnostack propertyname  theclass
private object invokemissingmethod object instance  string methodname  object arguments  runtimeexception original
if  methodmissing    null
try
return methodmissing invoke instance  new object methodname  arguments
catch  invokerinvocationexception iie
if  methodmissing instanceof closuremetamethod    iie getcause   instanceof missingmethodexception
missingmethodexception mme     missingmethodexception  iie getcause
throw new missingmethodexecutionfailed  mme getmethod    mme getclass
mme getarguments   mme isstatic   mme
throw iie
else if  original    null  throw original
else throw new missingmethodexceptionnostack methodname  theclass  arguments  false
/**
* hook to deal with the case of missingproperty for static properties. the method will look attempt to look up
* "propertymissing" handlers and invoke them otherwise thrown a missingpropertyexception
*
* @param instance      the instance
* @param propertyname  the name of the property
* @param optionalvalue the value in the case of a setter
* @param isgetter      true if its a getter
* @return the value in the case of a getter or a missingpropertyexception
*/
protected object invokestaticmissingproperty object instance  string propertyname  object optionalvalue  boolean isgetter
metaclass mc   instance instanceof class ? registry getmetaclass  class  instance    this
if  isgetter
metamethod propertymissing   mc getmetamethod static_property_missing  getter_missing_args
if  propertymissing    null
return propertymissing invoke instance  new object propertyname
else
metamethod propertymissing   mc getmetamethod static_property_missing  setter_missing_args
if  propertymissing    null
return propertymissing invoke instance  new object propertyname  optionalvalue
if  instance instanceof class
throw new missingpropertyexception propertyname   class  instance
throw new missingpropertyexception propertyname  theclass
/**
* invokes the given method on the object.
* todo: should this be deprecated? if so, we have to propogate to many places.
*/
public object invokemethod object object  string methodname  object originalarguments
return invokemethod theclass  object  methodname  originalarguments  false  false
/**
* invokes the given method on the object.
*/
public object invokemethod class sender  object object  string methodname  object originalarguments  boolean iscalltosuper  boolean frominsideclass
checkinitalised
if  object    null
throw new nullpointerexception     methodname
final object arguments   originalarguments    null ? empty_arguments   originalarguments
//        final class[] argclasses = metaclasshelper.converttotypearray(arguments);
//
//        unwrap(arguments);
metamethod method   getmethodwithcaching sender  methodname  arguments  iscalltosuper
metaclasshelper unwrap arguments
if  method    null
method   trylistparammetamethod sender  methodname  iscalltosuper  arguments
final boolean isclosure   object instanceof closure
if  isclosure
final closure closure    closure  object
final object owner   closure getowner
if  closure_call_method equals methodname     closure_do_call_method equals methodname
final class objectclass   object getclass
if  objectclass    methodclosure class
final methodclosure mc    methodclosure  object
methodname   mc getmethod
final class ownerclass   owner instanceof class ?  class  owner   owner getclass
final metaclass ownermetaclass   registry getmetaclass ownerclass
return ownermetaclass invokemethod ownerclass  owner  methodname  arguments  false  false
else if  objectclass    curriedclosure class
final curriedclosure cc    curriedclosure  object
// change the arguments for an uncurried call
final object curriedarguments   cc getuncurriedarguments arguments
final class ownerclass   owner instanceof class ?  class  owner   owner getclass
final metaclass ownermetaclass   registry getmetaclass ownerclass
return ownermetaclass invokemethod owner  methodname  curriedarguments
if  method  null  invokemissingmethod object methodname arguments
else if  closure_curry_method equals methodname
return closure curry arguments
final object delegate   closure getdelegate
final boolean isclosurenotowner   owner    closure
final int resolvestrategy   closure getresolvestrategy
final class argclasses   metaclasshelper converttotypearray arguments
switch  resolvestrategy
case closure to_self
method   closure getmetaclass   pickmethod methodname  argclasses
if  method    null  return method invoke closure  arguments
break
case closure delegate_only
if  method    null    delegate    closure    delegate    null
metaclass delegatemetaclass   lookupobjectmetaclass delegate
method   delegatemetaclass pickmethod methodname  argclasses
if  method    null
return delegatemetaclass invokemethod delegate  methodname  originalarguments
else if  delegate    closure     delegate instanceof groovyobject
return invokemethodongroovyobject methodname  originalarguments  delegate
break
case closure owner_only
if  method    null    owner    closure
metaclass ownermetaclass   lookupobjectmetaclass owner
return ownermetaclass invokemethod owner  methodname  originalarguments
break
case closure delegate_first
if  method    null    delegate    closure    delegate    null
metaclass delegatemetaclass   lookupobjectmetaclass delegate
method   delegatemetaclass pickmethod methodname  argclasses
if  method    null
return delegatemetaclass invokemethod delegate  methodname  originalarguments
if  method    null    owner    closure
metaclass ownermetaclass   lookupobjectmetaclass owner
method   ownermetaclass pickmethod methodname  argclasses
if  method    null  return ownermetaclass invokemethod owner  methodname  originalarguments
if  method    null    resolvestrategy    closure to_self
// still no methods found, test if delegate or owner are groovyobjects
// and invoke the method on them if so.
missingmethodexception last   null
if  delegate    closure     delegate instanceof groovyobject
try
return invokemethodongroovyobject methodname  originalarguments  delegate
catch  missingmethodexception mme
if  last    null  last   mme
if  isclosurenotowner     owner instanceof groovyobject
try
return invokemethodongroovyobject methodname  originalarguments  owner
catch  missingmethodexception mme
last   mme
if  last    null  return invokemissingmethod object  methodname  originalarguments  last
break
default
if  method    null    owner    closure
metaclass ownermetaclass   lookupobjectmetaclass owner
method   ownermetaclass pickmethod methodname  argclasses
if  method    null  return ownermetaclass invokemethod owner  methodname  originalarguments
if  method    null    delegate    closure    delegate    null
metaclass delegatemetaclass   lookupobjectmetaclass delegate
method   delegatemetaclass pickmethod methodname  argclasses
if  method    null
return delegatemetaclass invokemethod delegate  methodname  originalarguments
if  method    null    resolvestrategy    closure to_self
// still no methods found, test if delegate or owner are groovyobjects
// and invoke the method on them if so.
missingmethodexception last   null
if  isclosurenotowner     owner instanceof groovyobject
try
return invokemethodongroovyobject methodname  originalarguments  owner
catch  missingmethodexception mme
if  last    null  last   mme
if  delegate    closure     delegate instanceof groovyobject
try
return invokemethodongroovyobject methodname  originalarguments  delegate
catch  missingmethodexception mme
last   mme
if  last    null  return invokemissingmethod object  methodname  originalarguments  last
if  method    null
return method domethodinvoke object  arguments
else
return invokepropertyormissing object  methodname  originalarguments  frominsideclass
private metamethod trylistparammetamethod class sender  string methodname  boolean iscalltosuper  object arguments
metamethod method   null
if  arguments length    1    arguments instanceof list
object newarguments     list  arguments  toarray
method   getmethodwithcaching sender  methodname  newarguments  iscalltosuper
if  method    null
method   new transformmetamethod method
public object invoke object object  object arguments
object firstargument   arguments
list list    list  firstargument
arguments   list toarray
return super invoke object  arguments
return method
private object invokepropertyormissing object object  string methodname  object originalarguments  boolean frominsideclass
// if no method was found, try to find a closure defined as a field of the class and run it
object value   null
final metaproperty metaproperty   this getmetaproperty methodname  false
if  metaproperty    null
value   metaproperty getproperty object
else
if  object instanceof map
value     map object  get methodname
if  value instanceof closure        this test ensures that value    this if you ever change this ensure that value    this
closure closure    closure  value
metaclass delegatemetaclass   closure getmetaclass
return delegatemetaclass invokemethod closure getclass    closure  closure_do_call_method  originalarguments  false  frominsideclass
return invokemissingmethod object  methodname  originalarguments
private metaclass lookupobjectmetaclass object object
if  object instanceof groovyobject
groovyobject go    groovyobject  object
return go getmetaclass
class ownerclass   object getclass
if  ownerclass    class class  ownerclass    class  object
metaclass metaclass   registry getmetaclass ownerclass
return metaclass
private object invokemethodongroovyobject string methodname  object originalarguments  object owner
groovyobject go    groovyobject  owner
return go invokemethod methodname  originalarguments
public metamethod getmethodwithcaching class sender  string methodname  object arguments  boolean iscalltosuper
// lets try use the cache to find the method
if   iscalltosuper    groovycategorysupport hascategoryincurrentthread
return getmethodwithoutcaching sender  methodname  metaclasshelper converttotypearray arguments   iscalltosuper
else
final metamethodindex entry e   metamethodindex getmethods sender  methodname
if  e    null
return null
return iscalltosuper ? getsupermethodwithcaching arguments  e    getnormalmethodwithcaching arguments  e
private static boolean sameclasses class params  class arguments  boolean weaknullcheck
// we do here a null check because the params field might not have been
// set yet
if  params  null  return false
if  params length    arguments length
return false
for  int i   params length 1  i >  0  i
object arg   arguments
if  arg    null
if  params    arguments
return false
else
if   weaknullcheck
return false
return true
// this method should be called by callsite only
private metamethod getmethodwithcachinginternal  class sender  callsite site  class  params
if  site usage get      0    groovycategorysupport hascategoryincurrentthread
return getmethodwithoutcaching sender  site name  params  false
final metamethodindex entry e   metamethodindex getmethods sender  site name
if  e    null
return null
metamethodindex cacheentry cacheentry
final object methods   e methods
if  methods    null
return null
cacheentry   e cachedmethod
if  cacheentry    null
sameclasses cacheentry params  params  methods instanceof metamethod
return cacheentry method
cacheentry   new metamethodindex cacheentry
cacheentry params   params
cacheentry method    metamethod  choosemethod e name  methods  params
e cachedmethod   cacheentry
return cacheentry method
private metamethod getsupermethodwithcaching object arguments  metamethodindex entry e
metamethodindex cacheentry cacheentry
if  e methodsforsuper    null
return null
cacheentry   e cachedmethodforsuper
if  cacheentry    null
metaclasshelper sameclasses cacheentry params  arguments  e methodsforsuper instanceof metamethod
metamethod method   cacheentry method
if  method  null  return method
cacheentry   new metamethodindex cacheentry
final class classes   metaclasshelper converttotypearray arguments
cacheentry params   classes
cacheentry method    metamethod  choosemethod e name  e methodsforsuper  classes
if  cacheentry method isabstract    cacheentry method   null
e cachedmethodforsuper   cacheentry
return cacheentry method
private metamethod getnormalmethodwithcaching object arguments  metamethodindex entry e
metamethodindex cacheentry cacheentry
final object methods   e methods
if  methods    null
return null
cacheentry   e cachedmethod
if  cacheentry    null
metaclasshelper sameclasses cacheentry params  arguments  methods instanceof metamethod
metamethod method   cacheentry method
if  method  null  return method
cacheentry   new metamethodindex cacheentry
final class classes   metaclasshelper converttotypearray arguments
cacheentry params   classes
cacheentry method    metamethod  choosemethod e name  methods  classes
e cachedmethod   cacheentry
return cacheentry method
public constructor retrieveconstructor class arguments
cachedconstructor constructor    cachedconstructor  choosemethod    constructors  arguments
if  constructor    null
return constructor cachedconstructor
constructor    cachedconstructor  choosemethod    constructors  arguments
if  constructor    null
return constructor cachedconstructor
return null
public metamethod retrievestaticmethod string methodname  object arguments
final metamethodindex entry e   metamethodindex getmethods theclass  methodname
metamethodindex cacheentry cacheentry
if  e    null
cacheentry   e cachedstaticmethod
if  cacheentry    null
metaclasshelper sameclasses cacheentry params  arguments  e staticmethods instanceof metamethod
return cacheentry method
cacheentry   new metamethodindex cacheentry
final class classes   metaclasshelper converttotypearray arguments
cacheentry params   classes
cacheentry method   pickstaticmethod methodname  classes
e cachedstaticmethod   cacheentry
return cacheentry method
else
return pickstaticmethod methodname  metaclasshelper converttotypearray arguments
public metamethod getmethodwithoutcaching class sender  string methodname  class arguments  boolean iscalltosuper
metamethod method   null
object methods   getmethods sender  methodname  iscalltosuper
if  methods    null
method    metamethod  choosemethod methodname  methods  arguments
return method
public object invokestaticmethod object object  string methodname  object arguments
checkinitalised
final class sender   object instanceof class ?  class  object   object getclass
if  sender    theclass
metaclass mc   registry getmetaclass sender
return mc invokestaticmethod sender  methodname  arguments
if  sender    class class
return invokemethod object  methodname  arguments
if  arguments    null  arguments   empty_arguments
//        class[] argclasses = metaclasshelper.converttotypearray(arguments);
metamethod method   retrievestaticmethod methodname  arguments
// lets try use the cache to find the method
if  method    null
metaclasshelper unwrap arguments
return method domethodinvoke object  arguments
object prop   null
try
prop   getproperty theclass  theclass  methodname  false  false
catch  missingpropertyexception mpe
// ignore
if  prop instanceof closure
return invokestaticclosureproperty arguments  prop
object originalarguments    object  arguments clone
metaclasshelper unwrap arguments
class superclass   sender getsuperclass
class argclasses   metaclasshelper converttotypearray arguments
while  superclass    object class    superclass    null
metaclass mc   registry getmetaclass superclass
method   mc getstaticmetamethod methodname  argclasses
if  method    null  return method domethodinvoke object  arguments
try
prop   mc getproperty superclass  superclass  methodname  false  false
catch  missingpropertyexception mpe
// ignore
if  prop instanceof closure
return invokestaticclosureproperty originalarguments  prop
superclass   superclass getsuperclass
return invokestaticmissingmethod sender  methodname  arguments
private object invokestaticclosureproperty object originalarguments  object prop
closure closure    closure  prop
metaclass delegatemetaclass   closure getmetaclass
return delegatemetaclass invokemethod closure getclass    closure  closure_do_call_method  originalarguments  false  false
private object invokestaticmissingmethod class sender  string methodname  object arguments
metamethod metamethod   getstaticmetamethod static_method_missing  method_missing_args
if  metamethod    null
return metamethod invoke sender  new object methodname  arguments
throw new missingmethodexception methodname  sender  arguments  true
private metamethod pickstaticmethod string methodname  class arguments
metamethod method   null
object methods   getstaticmethods theclass  methodname
if    methods instanceof fastarray        fastarray methods  isempty
method    metamethod  choosemethod methodname  methods  arguments
if  method    null    theclass    class class
metaclass classmetaclass   registry getmetaclass class class
method   classmetaclass pickmethod methodname  arguments
if  method    null
method    metamethod  choosemethod methodname  methods  metaclasshelper converttotypearray arguments
return method
/**
* warning, this method will be removed
*
* @deprecated use invokeconstructor instead
*/
public object invokeconstructorat class at  object arguments
return invokeconstructor arguments
public object invokeconstructor object arguments
return invokeconstructor theclass  arguments
public int selectconstructorandtransformarguments int numberofcosntructors  object arguments
//todo: that is just a quick prototype, not the real thing!
if  numberofcosntructors    constructors size
throw new incompatibleclasschangeerror
this theclass getname         numberofcosntructors       constructors size
if  arguments    null  arguments   empty_arguments
class argclasses   metaclasshelper converttotypearray arguments
metaclasshelper unwrap arguments
cachedconstructor constructor    cachedconstructor  choosemethod    constructors  argclasses
if  constructor    null
constructor    cachedconstructor  choosemethod    constructors  argclasses
if  constructor    null
throw new groovyruntimeexception
theclass getname
invokerhelper totypestring arguments
list l   new arraylist constructors tolist
comparator comp   new comparator
public int compare object arg0  object arg1
cachedconstructor c0    cachedconstructor  arg0
cachedconstructor c1    cachedconstructor  arg1
string descriptor0   bytecodehelper getmethoddescriptor void type  c0 getnativeparametertypes
string descriptor1   bytecodehelper getmethoddescriptor void type  c1 getnativeparametertypes
return descriptor0 compareto descriptor1
collections sort l  comp
int found    1
for  int i   0  i < l size    i
if  l get i     constructor  continue
found   i
break
// note: must be changed to "1 |" if constructor was vargs
return 0    found << 8
/**
* checks if the initialisation of the class id complete.
* this method should be called as a form of assert, it is no
* way to test if there is still initialisation work to be done.
* such logic must be implemented in a different way.
*
* @throws illegalstateexception if the initialisation is incomplete yet
*/
protected void checkinitalised
if   isinitialized
throw new illegalstateexception
theclass
this getclass
private object invokeconstructor class at  object arguments
checkinitalised
if  arguments    null  arguments   empty_arguments
class argclasses   metaclasshelper converttotypearray arguments
metaclasshelper unwrap arguments
cachedconstructor constructor    cachedconstructor  choosemethod    constructors  argclasses
if  constructor    null
return constructor doconstructorinvoke arguments
if  arguments length    1
object firstargument   arguments
if  firstargument instanceof map
constructor    cachedconstructor  choosemethod    constructors  metaclasshelper empty_type_array
if  constructor    null
object bean   constructor doconstructorinvoke metaclasshelper empty_array
setproperties bean    map  firstargument
return bean
throw new groovyruntimeexception
theclass getname
invokerhelper totypestring arguments
/**
* sets a number of bean properties from the given map where the keys are
* the string names of properties and the values are the values of the
* properties to set
*/
public void setproperties object bean  map map
checkinitalised
for  iterator iter   map entryset   iterator    iter hasnext
map entry entry    map entry  iter next
string key   entry getkey   tostring
object value   entry getvalue
setproperty bean  key  value
/**
* @return the given property's value on the object
*/
public object getproperty class sender  object object  string name  boolean usesuper  boolean frominsideclass
//----------------------------------------------------------------------
// handling of static
//----------------------------------------------------------------------
boolean isstatic   theclass    class class    object instanceof class
if  isstatic    object    theclass
metaclass mc   registry getmetaclass  class  object
return mc getproperty sender  object  name  usesuper  false
checkinitalised
//----------------------------------------------------------------------
// turn getproperty on a map to get on the map itself
//----------------------------------------------------------------------
if   isstatic    this ismap
return   map  object  get name
metamethod method   null
object arguments   empty_arguments
//----------------------------------------------------------------------
// getter
//----------------------------------------------------------------------
metaproperty mp   getmetaproperty sender  name  usesuper  isstatic
if  mp    null
if  mp instanceof metabeanproperty
metabeanproperty mbp    metabeanproperty  mp
method   mbp getgetter
mp   mbp getfield
// check for a category method named like a getter
if   usesuper     isstatic    groovycategorysupport hascategoryincurrentthread
string gettername       metaclasshelper capitalize name
metamethod categorymethod   getcategorymethodgetter sender  gettername  false
if  categorymethod    null  method   categorymethod
//----------------------------------------------------------------------
// field
//----------------------------------------------------------------------
if  method    null    mp    null
try
return mp getproperty object
catch  illegalargumentexception e
// can't access the field directly but there may be a getter
mp   null
//----------------------------------------------------------------------
// generic get method
//----------------------------------------------------------------------
// check for a generic get method provided through a category
if  method    null     usesuper     isstatic    groovycategorysupport hascategoryincurrentthread
method   getcategorymethodgetter sender     true
if  method    null  arguments   new object name
// the generic method is valid, if available (!=null), if static or
// if it is not static and we do no static access
if  method    null    genericgetmethod    null       genericgetmethod isstatic      isstatic
arguments   new object name
method   genericgetmethod
//----------------------------------------------------------------------
// special cases
//----------------------------------------------------------------------
if  method    null
/** todo these special cases should be special metaclasses maybe */
if  theclass    class class    object instanceof class
metaclass mc   registry getmetaclass class class
return mc getproperty class class  object  name  usesuper  false
else if  object instanceof collection
return defaultgroovymethods getat  collection  object  name
else if  object instanceof object
return defaultgroovymethods getat arrays aslist  object  object   name
else
metamethod addlistenermethod    metamethod  listeners get name
if  addlistenermethod    null
//todo: one day we could try return the previously registered closure listener for easy removal
return null
else
//----------------------------------------------------------------------
// executing the getter method
//----------------------------------------------------------------------
return method domethodinvoke object  arguments
//----------------------------------------------------------------------
// error due to missing method/field
//----------------------------------------------------------------------
if  isstatic    object instanceof class
return invokestaticmissingproperty object  name  null  true
else
return invokemissingproperty object  name  null  true
public metaproperty geteffectivegetmetaproperty final class sender  final object object  string name  final boolean usesuper
//----------------------------------------------------------------------
// handling of static
//----------------------------------------------------------------------
boolean isstatic   theclass    class class    object instanceof class
if  isstatic    object    theclass
return new metaproperty name  object class
final metaclass mc   registry getmetaclass  class  object
public object getproperty object object
return mc getproperty sender  object  name  usesuper false
public void setproperty object object  object newvalue
throw new unsupportedoperationexception
checkinitalised
//----------------------------------------------------------------------
// turn getproperty on a map to get on the map itself
//----------------------------------------------------------------------
if   isstatic    this ismap
return new metaproperty name  object class
public object getproperty object object
return   map  object  get name
public void setproperty object object  object newvalue
throw new unsupportedoperationexception
metamethod method   null
//----------------------------------------------------------------------
// getter
//----------------------------------------------------------------------
metaproperty mp   getmetaproperty sender  name  usesuper  isstatic
if  mp    null
if  mp instanceof metabeanproperty
metabeanproperty mbp    metabeanproperty  mp
method   mbp getgetter
mp   mbp getfield
// check for a category method named like a getter
if   usesuper     isstatic    groovycategorysupport hascategoryincurrentthread
string gettername       metaclasshelper capitalize name
metamethod categorymethod   getcategorymethodgetter sender  gettername  false
if  categorymethod    null
method   categorymethod
//----------------------------------------------------------------------
// field
//----------------------------------------------------------------------
if  method    null
return new getbeanmethodmetaproperty name  method
if  mp    null
return mp
//            try {
//                return mp.getproperty(object);
//            } catch (illegalargumentexception e) {
//                // can't access the field directly but there may be a getter
//                mp = null;
//            }
//----------------------------------------------------------------------
// generic get method
//----------------------------------------------------------------------
// check for a generic get method provided through a category
if   usesuper     isstatic    groovycategorysupport hascategoryincurrentthread
method   getcategorymethodgetter sender     true
if  method    null
return new getmethodmetaproperty name  method
// the generic method is valid, if available (!=null), if static or
// if it is not static and we do no static access
if  genericgetmethod    null       genericgetmethod isstatic      isstatic
method   genericgetmethod
if  method    null
return new getmethodmetaproperty name  method
//----------------------------------------------------------------------
// special cases
//----------------------------------------------------------------------
/** todo these special cases should be special metaclasses maybe */
if  theclass    class class    object instanceof class
return new metaproperty name  object class
public object getproperty object object
metaclass mc   registry getmetaclass class class
return mc getproperty class class  object  name  usesuper  false
public void setproperty object object  object newvalue
throw new unsupportedoperationexception
else if  object instanceof collection
return new metaproperty name  object class
public object getproperty object object
return defaultgroovymethods getat  collection  object  name
public void setproperty object object  object newvalue
throw new unsupportedoperationexception
else if  object instanceof object
return new metaproperty name  object class
public object getproperty object object
return defaultgroovymethods getat arrays aslist  object  object   name
public void setproperty object object  object newvalue
throw new unsupportedoperationexception
else
metamethod addlistenermethod    metamethod  listeners get name
if  addlistenermethod    null
//todo: one day we could try return the previously registered closure listener for easy removal
return new metaproperty name  object class
public object getproperty object object
return null
public void setproperty object object  object newvalue
throw new unsupportedoperationexception
//----------------------------------------------------------------------
// error due to missing method/field
//----------------------------------------------------------------------
if  isstatic    object instanceof class
return new metaproperty name  object class
public object getproperty object object
return invokestaticmissingproperty object  name  null  true
public void setproperty object object  object newvalue
throw new unsupportedoperationexception
else
return new metaproperty name  object class
public object getproperty object object
return invokemissingproperty object  name  null  true
public void setproperty object object  object newvalue
throw new unsupportedoperationexception
private metamethod getcategorymethodgetter class sender  string name  boolean uselongversion
list possiblegenericmethods   groovycategorysupport getcategorymethods name
if  possiblegenericmethods    null
for  iterator iter   possiblegenericmethods iterator    iter hasnext
metamethod mmethod    metamethod  iter next
if   mmethod getdeclaringclass   gettheclass   isassignablefrom sender
continue
cachedclass paramtypes   mmethod getparametertypes
if  uselongversion
if  paramtypes length    1    paramtypes gettheclass      string class
return mmethod
else
if  paramtypes length    0  return mmethod
return null
private metamethod getcategorymethodsetter class sender  string name  boolean uselongversion
list possiblegenericmethods   groovycategorysupport getcategorymethods name
if  possiblegenericmethods    null
for  iterator iter   possiblegenericmethods iterator    iter hasnext
metamethod mmethod    metamethod  iter next
if   mmethod getdeclaringclass   gettheclass   isassignablefrom sender
continue
cachedclass paramtypes   mmethod getparametertypes
if  uselongversion
if  paramtypes length    2    paramtypes gettheclass      string class
return mmethod
else
if  paramtypes length    1  return mmethod
return null
/**
* get all the properties defined for this type
*
* @return a list of metaproperty objects
*/
public list getproperties
checkinitalised
singlekeyhashmap propertymap   classpropertyindex getnullable thecachedclass
// simply return the values of the metaproperty map as a list
list ret   new arraylist propertymap size
for  complexkeyhashmap entryiterator iter   propertymap getentrysetiterator    iter hasnext
metaproperty element    metaproperty    singlekeyhashmap entry  iter next    value
if  element instanceof cachedfield  continue
// filter out dgm beans
if  element instanceof metabeanproperty
metabeanproperty mp    metabeanproperty  element
boolean setter   true
boolean getter   true
if  mp getgetter      null    mp getgetter   instanceof generatedmetamethod    mp getgetter   instanceof newinstancemetamethod
getter   false
if  mp getsetter      null    mp getsetter   instanceof generatedmetamethod    mp getsetter   instanceof newinstancemetamethod
setter   false
if   setter     getter  continue
if   setter    mp getsetter      null
element   new metabeanproperty mp getname    mp gettype    mp getgetter    null
if   getter    mp getgetter      null
element   new metabeanproperty mp getname    mp gettype    null  mp getsetter
ret add element
return ret
private metamethod findpropertymethod object methodorlist  boolean isgetter
if  methodorlist    null
return null
object ret   null
if  methodorlist instanceof metamethod
metamethod element    metamethod methodorlist
if   isgetter
//(element.getreturntype() == void.class || element.getreturntype() == void.type) &&
element getparametertypes   length    1
ret   addelementtolist ret  element
if  isgetter
element getreturntype      void class    element getreturntype      void type
element getparametertypes   length    0
ret   addelementtolist ret  element
else
fastarray methods    fastarray  methodorlist
final int len   methods size
final object data   methods getarray
for  int i   0  i    len    i
metamethod element    metamethod  data
if   isgetter
//(element.getreturntype() == void.class || element.getreturntype() == void.type) &&
element getparametertypes   length    1
ret   addelementtolist ret  element
if  isgetter
element getreturntype      void class    element getreturntype      void type
element getparametertypes   length    0
ret   addelementtolist ret  element
if  ret    null  return null
if  ret instanceof metamethod  return  metamethod  ret
// we found multiple matching methods
// this is a problem, because we can use only one
// if it is a getter, then use the most general return
// type to decide which method to use. if it is a setter
// we use the type of the first parameter
metamethod method   null
int distance    1
for  iterator iter     list  ret  iterator    iter hasnext
metamethod element    metamethod  iter next
class c
if  isgetter
c   element getreturntype
else
c   element getparametertypes   gettheclass
int localdistance   distancetoobject c
//todo: maybe implement the case localdistance==distance
if  distance     1    distance > localdistance
distance   localdistance
method   element
return method
private object addelementtolist object ret  metamethod element
if  ret    null
ret   element
else if  ret instanceof list
list  ret  add element
else
list list   new linkedlist
list add ret
list add element
ret   list
return ret
private static int distancetoobject class c
int count
for  count   0  c    null  count
c   c getsuperclass
return count
/**
* this will build up the property map (map of metaproperty objects, keyed on
* property name).
*/
private void setupproperties propertydescriptor propertydescriptors
if  thecachedclass isinterface
linkedlist superclasses   new linkedlist
superclasses add reflectioncache object_class
set interfaces   thecachedclass getinterfaces
classpropertyindexforsuper   classpropertyindex
final singlekeyhashmap cpi   classpropertyindex getnotnull thecachedclass
for  iterator interfaceiter   interfaces iterator    interfaceiter hasnext
cachedclass iclass    cachedclass  interfaceiter next
singlekeyhashmap ipropertyindex   cpi
addfields iclass  ipropertyindex
classpropertyindex put iclass  ipropertyindex
classpropertyindex put reflectioncache object_class  cpi
applypropertydescriptors propertydescriptors
applystraypropertymethods superclasses  classpropertyindex  true
makestaticpropertyindex
else
linkedlist superclasses   getsuperclasses
set interfaces   thecachedclass getinterfaces
// if this an array, then add the special read-only "length" property
if  thecachedclass isarray
singlekeyhashmap map   new singlekeyhashmap
map put    arraylengthproperty
classpropertyindex put thecachedclass  map
inheritstaticinterfacefields superclasses  interfaces
inheritfields superclasses
applypropertydescriptors propertydescriptors
applystraypropertymethods superclasses  classpropertyindex  true
applystraypropertymethods superclasses  classpropertyindexforsuper  false
copyclasspropertyindexforsuper classpropertyindexforsuper
makestaticpropertyindex
private void makestaticpropertyindex
singlekeyhashmap propertymap   classpropertyindex getnotnull thecachedclass
for  complexkeyhashmap entryiterator iter   propertymap getentrysetiterator    iter hasnext
singlekeyhashmap entry entry     singlekeyhashmap entry  iter next
metaproperty mp    metaproperty  entry getvalue
if  mp instanceof cachedfield
cachedfield mfp    cachedfield  mp
if   mfp isstatic    continue
else if  mp instanceof metabeanproperty
metaproperty result   establishstaticmetaproperty mp
if  result    null  continue
else
mp   result
else
continue     ignore all other types
staticpropertyindex put entry getkey    mp
private metaproperty establishstaticmetaproperty metaproperty mp
metabeanproperty mbp    metabeanproperty  mp
metaproperty result   null
final metamethod gettermethod   mbp getgetter
final metamethod settermethod   mbp getsetter
final cachedfield metafield   mbp getfield
boolean getter   gettermethod    null    gettermethod isstatic
boolean setter   settermethod    null    settermethod isstatic
boolean field   metafield    null    metafield isstatic
if   getter     setter     field
return result
else
final string propertyname   mbp getname
final class propertytype   mbp gettype
if  setter    getter
if  field
result   mbp     nothing to do
else
result   new metabeanproperty propertyname  propertytype  gettermethod  settermethod
else if  getter     setter
if  gettermethod    null
result   metafield
else
metabeanproperty newmp   new metabeanproperty propertyname  propertytype  gettermethod  null
if  field  newmp setfield metafield
result   newmp
else if  setter     getter
if  settermethod    null
result   metafield
else
metabeanproperty newmp   new metabeanproperty propertyname  propertytype  null  settermethod
if  field  newmp setfield metafield
result   newmp
else
result   metafield
return result
private void copyclasspropertyindexforsuper index dest
for  complexkeyhashmap entryiterator iter   classpropertyindex getentrysetiterator    iter hasnext
singlekeyhashmap entry entry    singlekeyhashmap entry  iter next
singlekeyhashmap newval   new singlekeyhashmap
dest put  cachedclass  entry getkey    newval
private void inheritstaticinterfacefields linkedlist superclasses  set interfaces
for  iterator interfaceiter   interfaces iterator    interfaceiter hasnext
cachedclass iclass    cachedclass  interfaceiter next
singlekeyhashmap ipropertyindex   classpropertyindex getnotnull iclass
addfields iclass  ipropertyindex
for  iterator classiter   superclasses iterator    classiter hasnext
cachedclass sclass    cachedclass  classiter next
if   iclass gettheclass   isassignablefrom sclass gettheclass     continue
singlekeyhashmap spropertyindex   classpropertyindex getnotnull sclass
copynonprivatefields ipropertyindex  spropertyindex
private void inheritfields linkedlist superclasses
singlekeyhashmap last   null
for  iterator iter   superclasses iterator    iter hasnext
cachedclass klass    cachedclass  iter next
singlekeyhashmap propertyindex   classpropertyindex getnotnull klass
if  last    null
copynonprivatefields last  propertyindex
last   propertyindex
addfields klass  propertyindex
private void addfields final cachedclass klass  singlekeyhashmap propertyindex
cachedfield fields   klass getfields
for  int i   0  i < fields length  i
propertyindex put fields getname    fields
private void copynonprivatefields singlekeyhashmap from  singlekeyhashmap to
for  complexkeyhashmap entryiterator iter   from getentrysetiterator    iter hasnext
singlekeyhashmap entry entry    singlekeyhashmap entry  iter next
cachedfield mfp    cachedfield  entry getvalue
if   modifier ispublic mfp getmodifiers        modifier isprotected mfp getmodifiers     continue
to put entry getkey    mfp
private void applystraypropertymethods linkedlist superclasses  index classpropertyindex  boolean isthis
// now look for any stray getters that may be used to define a property
for  iterator iter   superclasses iterator    iter hasnext
cachedclass klass    cachedclass  iter next
metamethodindex header header   metamethodindex getheader klass gettheclass
singlekeyhashmap propertyindex   classpropertyindex getnotnull klass
for  metamethodindex entry e   header head  e    null  e   e nextclassentry
string methodname   e name
// name too short?
if  methodname length   < 4  continue
// possible getter/setter?
boolean isgetter   methodname startswith
boolean issetter   methodname startswith
if   isgetter     issetter  continue
metamethod propertymethod   findpropertymethod isthis ? e methods   e methodsforsuper  isgetter
if  propertymethod    null  continue
string propname   getpropname methodname
createmetabeanproperty propertyindex  propname  isgetter  propertymethod
private static final hashmap propnames   new hashmap 1024
private string getpropname string methodname
string name    string  propnames get methodname
if  name    null
return name
synchronized  propnames
// get the name of the property
final int len   methodname length     3
char pn   new char
methodname getchars 3  3   len  pn  0
pn   character tolowercase pn
string propname   new string pn
propnames put methodname  propname
return propname
private void createmetabeanproperty singlekeyhashmap propertyindex  string propname  boolean isgetter  metamethod propertymethod
// is this property already accounted for?
metaproperty mp    metaproperty  propertyindex get propname
if  mp    null
if  isgetter
mp   new metabeanproperty propname
propertymethod getreturntype
propertymethod  null
else
//issetter
mp   new metabeanproperty propname
propertymethod getparametertypes   gettheclass
null  propertymethod
else
metabeanproperty mbp
cachedfield mfp
if  mp instanceof metabeanproperty
mbp    metabeanproperty  mp
mfp   mbp getfield
else if  mp instanceof cachedfield
mfp    cachedfield  mp
mbp   new metabeanproperty propname
mfp gettype
null  null
else
throw new groovybugerror     mp getclass
// we may have already found one for this name
if  isgetter    mbp getgetter      null
mbp setgetter propertymethod
else if   isgetter    mbp getsetter      null
mbp setsetter propertymethod
mbp setfield mfp
mp   mbp
propertyindex put propname  mp
private void applypropertydescriptors propertydescriptor propertydescriptors
// now iterate over the map of property descriptors and generate
// metabeanproperty objects
for  int i   0  i < propertydescriptors length  i
propertydescriptor pd   propertydescriptors
// skip if the property type is unknown (this seems to be the case if the
// property descriptor is based on a setx() method that has two parameters,
// which is not a valid property)
if  pd getpropertytype      null
continue
// get the getter method
method method   pd getreadmethod
metamethod getter
if  method    null
getter   findmethod cachedmethod find method
else
getter   null
// get the setter method
metamethod setter
method   pd getwritemethod
if  method    null
setter   findmethod cachedmethod find method
else
setter   null
// now create the metaproperty object
metabeanproperty mp   new metabeanproperty pd getname    pd getpropertytype    getter  setter
addmetabeanproperty mp
/**
* adds a new metabeanproperty to this metaclass
*
* @param mp the metabeanproperty
*/
public void addmetabeanproperty metabeanproperty mp
metaproperty staticproperty   establishstaticmetaproperty mp
if  staticproperty    null
staticpropertyindex put mp getname    mp
else
singlekeyhashmap propertymap   classpropertyindex getnotnull thecachedclass
//keep field
cachedfield field
metaproperty old    metaproperty  propertymap get mp getname
if  old    null
if  old instanceof metabeanproperty
field     metabeanproperty  old  getfield
else
field    cachedfield  old
mp setfield field
// put it in the list
// this will overwrite a possible field property
propertymap put mp getname    mp
/**
* sets the property value on an object
*/
public void setproperty class sender  object object  string name  object newvalue  boolean usesuper  boolean frominsideclass
checkinitalised
//----------------------------------------------------------------------
// handling of static
//----------------------------------------------------------------------
boolean isstatic   theclass    class class    object instanceof class
if  isstatic    object    theclass
metaclass mc   registry getmetaclass  class  object
mc getproperty sender  object  name  usesuper  frominsideclass
return
//----------------------------------------------------------------------
// unwrap wrapped values fo now - the new mop will handle them properly
//----------------------------------------------------------------------
if  newvalue instanceof wrapper  newvalue     wrapper  newvalue  unwrap
//----------------------------------------------------------------------
// turn setproperty on a map to put on the map itself
//----------------------------------------------------------------------
if   isstatic    this ismap
map  object  put name  newvalue
return
metamethod method   null
object arguments   null
//----------------------------------------------------------------------
// setter
//----------------------------------------------------------------------
metaproperty mp   getmetaproperty sender  name  usesuper  isstatic
metaproperty field   null
if  mp    null
if  mp instanceof metabeanproperty
metabeanproperty mbp    metabeanproperty  mp
method   mbp getsetter
metaproperty f   mbp getfield
if  method    null     f    null     modifier isfinal f getmodifiers
arguments   new object newvalue
field   f
else
field   mp
// check for a category method named like a setter
if   usesuper     isstatic    groovycategorysupport hascategoryincurrentthread
string gettername       metaclasshelper capitalize name
metamethod categorymethod   getcategorymethodsetter sender  gettername  false
if  categorymethod    null
method   categorymethod
arguments   new object newvalue
//----------------------------------------------------------------------
// listener method
//----------------------------------------------------------------------
boolean ambiguouslistener   false
if  method    null
method    metamethod  listeners get name
ambiguouslistener   method    ambiguous_listener_method
if  method    null
ambiguouslistener
newvalue instanceof closure
// lets create a dynamic proxy
object proxy   proxy newproxyinstance
theclass getclassloader
new class method getparametertypes   gettheclass
new convertedclosure  closure  newvalue  name
arguments   new object proxy
newvalue   proxy
else
method   null
//----------------------------------------------------------------------
// field
//----------------------------------------------------------------------
if  method    null    field    null
if  modifier isfinal field getmodifiers
throw new readonlypropertyexception name  theclass
field setproperty object  newvalue
return
//----------------------------------------------------------------------
// generic set method
//----------------------------------------------------------------------
// check for a generic get method provided through a category
if  method    null     usesuper     isstatic    groovycategorysupport hascategoryincurrentthread
method   getcategorymethodsetter sender     true
if  method    null  arguments   new object name  newvalue
// the generic method is valid, if available (!=null), if static or
// if it is not static and we do no static access
if  method    null    genericsetmethod    null       genericsetmethod isstatic      isstatic
arguments   new object name  newvalue
method   genericsetmethod
//----------------------------------------------------------------------
// executing the getter method
//----------------------------------------------------------------------
if  method    null
if  arguments length    1
newvalue   defaulttypetransformation casttotype
newvalue
method getparametertypes   gettheclass
arguments   newvalue
else
newvalue   defaulttypetransformation casttotype
newvalue
method getparametertypes   gettheclass
arguments   newvalue
method domethodinvoke object  arguments
return
//----------------------------------------------------------------------
// error due to missing method/field
//----------------------------------------------------------------------
if  ambiguouslistener
throw new groovyruntimeexception     name
if  mp    null
throw new readonlypropertyexception name  theclass
invokemissingproperty object  name  newvalue  false
private metaproperty getmetaproperty class _clazz  string name  boolean usesuper  boolean usestatic
if  _clazz    theclass
return getmetaproperty name  usestatic
cachedclass clazz   reflectioncache getcachedclass _clazz
while  true
singlekeyhashmap propertymap
if  usestatic
propertymap   staticpropertyindex
else if  usesuper
propertymap   classpropertyindexforsuper getnullable clazz
else
propertymap   classpropertyindex getnullable clazz
if  propertymap    null
if  clazz    thecachedclass
clazz   thecachedclass
continue
else
return null
return  metaproperty  propertymap get name
private metaproperty getmetaproperty string name  boolean usestatic
cachedclass clazz   thecachedclass
singlekeyhashmap propertymap
if  usestatic
propertymap   staticpropertyindex
else
propertymap   classpropertyindex getnullable clazz
if  propertymap    null
return null
return  metaproperty  propertymap get name
public object getattribute class sender  object receiver  string messagename  boolean usesuper
return getattribute receiver  messagename
/**
* looks up the given attribute (field) on the given object
*/
public object getattribute class sender  object object  string attribute  boolean usesuper  boolean frominsideclass
checkinitalised
boolean isstatic   theclass    class class    object instanceof class
if  isstatic    object    theclass
metaclass mc   registry getmetaclass  class  object
return mc getattribute sender  object  attribute  usesuper
metaproperty mp   getmetaproperty sender  attribute  usesuper  isstatic
if  mp    null
if  mp instanceof metabeanproperty
metabeanproperty mbp    metabeanproperty  mp
mp   mbp getfield
try
// delegate the get operation to the metaproperty
if  mp    null  return mp getproperty object
catch  exception e
throw new groovyruntimeexception     attribute  e
throw new missingfieldexception attribute  theclass
/**
* sets the given attribute (field) on the given object
*/
public void setattribute class sender  object object  string attribute  object newvalue  boolean usesuper  boolean frominsideclass
checkinitalised
boolean isstatic   theclass    class class    object instanceof class
if  isstatic    object    theclass
metaclass mc   registry getmetaclass  class  object
mc setattribute sender  object  attribute  newvalue  usesuper  frominsideclass
return
metaproperty mp   getmetaproperty sender  attribute  usesuper  isstatic
if  mp    null
if  mp instanceof metabeanproperty
metabeanproperty mbp    metabeanproperty  mp
mp   mbp getfield
if  mp    null
mp setproperty object  newvalue
return
throw new missingfieldexception attribute  theclass
public classnode getclassnode
if  classnode    null    groovyobject class isassignablefrom theclass
// lets try load it from the classpath
string groovyfile   theclass getname
int idx   groovyfile indexof
if  idx > 0
groovyfile   groovyfile substring 0  idx
groovyfile   groovyfile replace
//system.out.println("attempting to load: " + groovyfile);
url url   theclass getclassloader   getresource groovyfile
if  url    null
url   thread currentthread   getcontextclassloader   getresource groovyfile
if  url    null
try
/**
* todo there is no compileunit in scope so class name
* checking won't work but that mostly affects the bytecode
* generation rather than viewing the ast
*/
compilationunit classgencallback search   new compilationunit classgencallback
public void call classvisitor writer  classnode node
if  node getname   equals theclass getname
metaclassimpl this classnode   node
final classloader parent   theclass getclassloader
groovyclassloader gcl    groovyclassloader  accesscontroller doprivileged new privilegedaction
public object run
return new groovyclassloader parent
compilationunit unit   new compilationunit
unit setclassgencallback search
unit addsource url
unit compile phases class_generation
catch  exception e
throw new groovyruntimeexception     groovyfile       e  e
return classnode
public string tostring
return super tostring         theclass
// implementation methods
//-------------------------------------------------------------------------
/**
* adds a metamethod to this class. warning: this method will not
* do the neccessary steps for multimethod logic and using this
* method doesn't mean, that a method added here is replacing another
* method from a parent class completely. these steps are usually done
* by initalize, which means if you need these steps, you have to add
* the method before running initialize the first time.
*
* @param method the metamethod
* @see #initialize()
*/
public void addmetamethod metamethod method
if  isinitialized
throw new runtimeexception     method
final cachedclass declaringclass   method getdeclaringclass
addmetamethodtoindex method  metamethodindex getheader declaringclass gettheclass
private void addmetamethodtoindex metamethod method  metamethodindex header header
checkifstdmethod method
string name   method getname
metamethodindex entry e   metamethodindex getorputmethods name  header
if  method isstatic
e staticmethods   metamethodindex addmethodtolist e staticmethods  method
e methods   metamethodindex addmethodtolist e methods  method
private void checkifstdmethod metamethod method
if  isgenericgetmethod method     genericgetmethod    null
genericgetmethod   method
else if  metaclasshelper isgenericsetmethod method     genericsetmethod    null
genericsetmethod   method
if  propertymissingget    null    method getname   equals property_missing
cachedclass parametertypes   method getparametertypes
if  parametertypes length    1
propertymissingget   method
if  propertymissingset    null    method getname   equals property_missing
cachedclass parametertypes   method getparametertypes
if  parametertypes length    2
propertymissingset   method
if  method getname   equals method_missing
cachedclass parametertypes   method getparametertypes
if  parametertypes length    2
parametertypes gettheclass      string class
parametertypes gettheclass      object class
methodmissing   method
if  thecachedclass isnumber
numbermathmodificationinfo instance checkifstdmethod  method
protected boolean isinitialized
return initialized
/**
* return false: add method
*        null:  ignore method
*        true:  replace
*/
private boolean getmatchkindforcategory metamethod amethod  metamethod categorymethod
cachedclass params1   amethod getparametertypes
cachedclass params2   categorymethod getparametertypes
if  params1 length    params2 length  return boolean false
for  int i   0  i < params1 length  i
if  params1    params2  return boolean false
class amethodclass   amethod getdeclaringclass   gettheclass
class categorymethodclass   categorymethod getdeclaringclass   gettheclass
if  amethodclass  categorymethodclass  return boolean true
boolean match   amethodclass isassignablefrom categorymethodclass
if  match  return boolean true
return null
private void filtermatchingmethodforcategory fastarray list  metamethod method
int len   list size
if  len  0
list add method
return
object data   list getarray
for  int j   0  j    len    j
metamethod amethod    metamethod  data
boolean match   getmatchkindforcategory amethod  method
// true == replace
if  match  boolean true
list set j  method
return
// null == ignore (we have a better method already)
else if  match  null
return
// the casese true and null for a match are through, the
// remaining case is false and that means adding the method
// to our list
list add method
private int findmatchingmethod cachedmethod data  int from  int to  metamethod method
for  int j   from  j <  to    j
cachedmethod amethod   data
cachedclass params1   amethod getparametertypes
cachedclass params2   method getparametertypes
if  params1 length    params2 length
boolean matches   true
for  int i   0  i < params1 length  i
if  params1    params2
matches   false
break
if  matches
return j
return  1
/**
* @return the matching method which should be found
*/
private metamethod findmethod cachedmethod amethod
object methods   getmethods theclass  amethod getname    false
if  methods instanceof fastarray
fastarray m     fastarray  methods
final int len   m size
final object data   m getarray
for  int i   0  i    len    i
metamethod method    metamethod  data
if  method ismethod amethod
return method
else
metamethod method    metamethod  methods
if  method ismethod amethod
return method
//log.warning("creating reflection based dispatcher for: " + amethod);
synchronized  amethod cachedclass
return amethod
/**
* chooses the correct method to use from a list of methods which match by
* name.
*
* @param methodorlist   the possible methods to choose from
* @param arguments
*/
private object choosemethod string methodname  object methodorlist  class arguments
if  methodorlist instanceof metamethod
if    parametertypes  methodorlist  isvalidmethod arguments
return methodorlist
return null
fastarray methods    fastarray  methodorlist
int methodcount   methods size
if  methodcount <  0
return null
else if  methodcount    1
object method   methods get 0
if    parametertypes  method  isvalidmethod arguments
return method
return null
object answer
if  arguments    null    arguments length    0
answer   metaclasshelper chooseemptymethodparams methods
else if  arguments length    1    arguments    null
answer   metaclasshelper choosemostgeneralmethodwith1nullparam methods
else
object matchingmethods   null
final int len   methods size
object data   methods getarray
for  int i   0  i    len    i
object method   data
// making this false helps find matches
if    parametertypes  method  isvalidmethod arguments
if  matchingmethods    null
matchingmethods   method
else
if  matchingmethods instanceof arraylist
arraylist matchingmethods  add method
else
arraylist arr   new arraylist 4
arr add matchingmethods
arr add method
matchingmethods   arr
if  matchingmethods    null
return null
else if    matchingmethods instanceof arraylist
return matchingmethods
return choosemostspecificparams methodname   list  matchingmethods  arguments
if  answer    null
return answer
throw new methodselectionexception methodname  methods  arguments
private object choosemostspecificparams string name  list matchingmethods  class arguments
long matchesdistance    1
linkedlist matches   new linkedlist
for  iterator iter   matchingmethods iterator    iter hasnext
object method   iter next
parametertypes paramtypes    parametertypes  method
long dist   metaclasshelper calculateparameterdistance arguments  paramtypes
if  dist    0  return method
if  matches size      0
matches add method
matchesdistance   dist
else if  dist < matchesdistance
matchesdistance   dist
matches clear
matches add method
else if  dist    matchesdistance
matches add method
if  matches size      1
return matches getfirst
if  matches size      0
return null
//more than one matching method found --> ambiguous!
string msg
msg    theclass getname         name
msg
msg    invokerhelper tostring arguments
msg
for  iterator iter   matches iterator    iter hasnext
class types     parametertypes  iter next    getnativeparametertypes
msg        invokerhelper tostring types
throw new groovyruntimeexception msg
private boolean isgenericgetmethod metamethod method
if  method getname   equals
cachedclass parametertypes   method getparametertypes
return parametertypes length    1    parametertypes gettheclass      string class
return false
public synchronized void initialize
if   isinitialized
fillmethodindex
addproperties
initialized   true
private void addproperties
beaninfo info
final class stopclass
//     introspect
try
if  isbeanderivative theclass
info    beaninfo  accesscontroller doprivileged new privilegedexceptionaction
public object run   throws introspectionexception
return introspector getbeaninfo theclass  introspector ignore_all_beaninfo
else
info    beaninfo  accesscontroller doprivileged new privilegedexceptionaction
public object run   throws introspectionexception
return introspector getbeaninfo theclass
catch  privilegedactionexception pae
throw new groovyruntimeexception    pae getexception
propertydescriptor descriptors   info getpropertydescriptors
// build up the metaproperties based on the public fields, property descriptors,
// and the getters and setters
setupproperties descriptors
eventsetdescriptor eventdescriptors   info geteventsetdescriptors
for  int i   0  i < eventdescriptors length  i
eventsetdescriptor descriptor   eventdescriptors
method listenermethods   descriptor getlistenermethods
for  int j   0  j < listenermethods length  j
method listenermethod   listenermethods
final metamethod metamethod   cachedmethod find descriptor getaddlistenermethod
addtoallmethodsifpublic metamethod
string name   listenermethod getname
if  listeners containskey name
listeners put name  ambiguous_listener_method
else
listeners put name  metamethod
private boolean isbeanderivative class theclass
class next   theclass
while  next    null
if  arrays aslist next getinterfaces    contains beaninfo class   return true
next   next getsuperclass
return false
private void addtoallmethodsifpublic metamethod metamethod
if  modifier ispublic metamethod getmodifiers
allmethods add metamethod
public list getmethods
return allmethods
public list getmetamethods
return new arraylist newgroovymethodsset
protected void dropstaticmethodcache string name
metamethodindex clearcaches name
protected void dropmethodcache string name
metamethodindex clearcaches name
public callsite createpojocallsite callsite site  object receiver  object args
if    this instanceof adaptingmetaclass
class  params   metaclasshelper converttotypearray args
metamethod metamethod   getmethodwithcachinginternal gettheclass    site  params
if  metamethod    null
return pojometamethodsite createpojometamethodsite site  this  metamethod  params  receiver  args
return new pojometaclasssite site  this
public callsite createstaticsite callsite site  object args
if    this instanceof adaptingmetaclass
class  params   metaclasshelper converttotypearray args
metamethod metamethod   retrievestaticmethod site name  args
if  metamethod    null
return staticmetamethodsite createstaticmetamethodsite site  this  metamethod  params  args
return new staticmetaclasssite site  this
public callsite createpogocallsite callsite site  object args
if    this instanceof adaptingmetaclass
class  params   metaclasshelper converttotypearray args
metamethod metamethod   getmethodwithcachinginternal theclass  site  params
if  metamethod    null
return pogometamethodsite createpogometamethodsite site  this  metamethod  params  args
return new pogometaclasssite site  this
public callsite createpogocallcurrentsite callsite site  class sender  object args
if    this instanceof adaptingmetaclass
class  params   metaclasshelper converttotypearray args
metamethod metamethod   getmethodwithcachinginternal sender  site  params
if  metamethod    null
return pogometamethodsite createpogometamethodsite site  this  metamethod  params  args
return new pogometaclasssite site  this
public callsite createconstructorsite callsite site  object args
if    this instanceof adaptingmetaclass
class params   metaclasshelper converttotypearray args
cachedconstructor constructor    cachedconstructor  choosemethod    constructors  params
if  constructor    null
return constructorsite createconstructorsite site  this constructor params  args
else
if  args length    1    args instanceof map
constructor    cachedconstructor  choosemethod    constructors  metaclasshelper empty_type_array
if  constructor    null
return new constructorsite noparamsite site  this constructor params
return new metaclassconstructorsite site  this
public classinfo getclassinfo
return thecachedclass classinfo
public int getversion
return thecachedclass classinfo getversion
public metamethod getadditionalmetamethods
return additionalmetamethods
private abstract class methodindexaction
public void iterate
final complexkeyhashmap entry table   metamethodindex methodheaders gettable
int len   table length
for  int i   0  i    len    i
for  singlekeyhashmap entry classentry    singlekeyhashmap entry  table
classentry    null
classentry    singlekeyhashmap entry  classentry next
class clazz    class  classentry getkey
if  skipclass clazz   continue
metamethodindex header header    metamethodindex header  classentry getvalue
for  metamethodindex entry nameentry   header head  nameentry    null  nameentry   nameentry nextclassentry
methodnameaction clazz  nameentry
public abstract void methodnameaction class clazz  metamethodindex entry methods
public boolean skipclass class clazz
return false
public object getproperty object object  string property
return getproperty theclass  object  property  false  false
public void setproperty object object  string property  object newvalue
setproperty theclass  object  property  newvalue  false  false
public object getattribute object object  string attribute
return getattribute theclass  object  attribute  false  false
public void setattribute object object  string attribute  object newvalue
setattribute theclass  object  attribute  newvalue  false  false
public metamethod pickmethod string methodname  class arguments
return getmethodwithoutcaching theclass  methodname  arguments  false
/**
* @deprecated use pickmethod instead
*/
protected metamethod retrievemethod string methodname  class arguments
return pickmethod methodname  arguments
/**
* remove all method call cache entries. this should be done if a
* method is added during runtime, but not by using a category.
*/
protected void clearinvocationcaches
metamethodindex clearcaches
private static final singlekeyhashmap copier name_index_copier   new singlekeyhashmap copier
public object copy object value
if  value instanceof fastarray
return   fastarray  value  copy
else
return value
private static final singlekeyhashmap copier method_index_copier   new singlekeyhashmap copier
public object copy object value
return singlekeyhashmap copy new singlekeyhashmap false    singlekeyhashmap  value  name_index_copier
class methodindex extends index
public methodindex boolean b
super false
public methodindex int size
super size
public methodindex
super
methodindex copy
return  methodindex  singlekeyhashmap copy new methodindex false   this  method_index_copier
protected object clone   throws clonenotsupportedexception
return super clone
public static class index extends singlekeyhashmap
public index int size
public index
public index boolean size
super false
public singlekeyhashmap getnotnull cachedclass key
entry res   getorput key
if  res value    null
res value   new singlekeyhashmap
return  singlekeyhashmap  res value
public void put cachedclass key  singlekeyhashmap value
entry  getorput key   value   value
public singlekeyhashmap getnullable cachedclass clazz
return  singlekeyhashmap  get clazz
public boolean checkequals complexkeyhashmap entry e  object key
return   entry  e  key equals key
private static class dummymetamethod extends metamethod
public int getmodifiers
return 0
public string getname
return null
public class getreturntype
return null
public cachedclass getdeclaringclass
return null
public parametertypes getparamtypes
return null
public object invoke object object  object arguments
return null
private static class getmethodmetaproperty extends metaproperty
private final metamethod themethod
public getmethodmetaproperty string name  metamethod themethod
super name  object class
this themethod   themethod
public object getproperty object object
return themethod domethodinvoke object  new object name
public void setproperty object object  object newvalue
throw new unsupportedoperationexception
private static class getbeanmethodmetaproperty extends metaproperty
private final metamethod themethod
public getbeanmethodmetaproperty string name  metamethod themethod
super name  object class
this themethod   themethod
public object getproperty object object
return themethod domethodinvoke object  empty_arguments
public void setproperty object object  object newvalue
throw new unsupportedoperationexception