/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org codehaus groovy antlr
/**
* process to decorate antlr ast with ending line/col info, and if
* possible the snipppet of source from the start/end line/col for each node.
*
* @author <a href="mailto:groovy@ross-rayner.com">jeremy rayner</a>
* @version $revision$
*/
import antlr collections ast
import java util
public class antlrastprocesssnippets implements antlrastprocessor
private final sourcebuffer sourcebuffer
public antlrastprocesssnippets sourcebuffer sourcebuffer
this sourcebuffer   sourcebuffer
/**
* decorate antlr ast with ending line/col info, and if
* possible the snipppet of source from the start/end line/col for each node.
* @param t the ast to decorate
* @return the decorated ast
*/
public ast process ast t
// first visit
list l   new arraylist
t   traverse  groovysourceast t l null
//system.out.println("l:" + l);
// second visit
iterator itr   l iterator
if  itr hasnext      itr next       discard first
t   traverse  groovysourceast t null itr
return t
/**
* traverse an ast node
* @param t the ast node to traverse
* @param l a list to add line/col info to
* @param itr an iterator over a list of line/col
* @return a decorated ast node
*/
private ast traverse groovysourceast t list l iterator itr
if  t    null    return t
// first visit of node
if  l    null
l add new linecolumn t getline   t getcolumn
// second vist of node
if  itr    null    itr hasnext
linecolumn lc    linecolumn itr next
if  t getlinelast      0
int nextline   lc getline
int nextcolumn   lc getcolumn
if  nextline < t getline       nextline    t getline      nextcolumn < t getcolumn
nextline   t getline
nextcolumn   t getcolumn
t setlinelast nextline
t setcolumnlast nextcolumn
// this is a good point to call t.setsnippet(),
// but it bulks up the ast too much for production code.
groovysourceast child    groovysourceast t getfirstchild
if  child    null
traverse child l itr
groovysourceast sibling    groovysourceast t getnextsibling
if  sibling    null
traverse sibling l itr
return t