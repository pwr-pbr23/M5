/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org codehaus groovy control
import org codehaus groovy ast classcodevisitorsupport
import org codehaus groovy ast classnode
import org codehaus groovy ast genericstype
/**
* class used to verify correct usage of generics in
* class header (class and superclass declaration)
* @author jochen theodorou
*/
public class genericsvisitor extends classcodevisitorsupport
private sourceunit source
public genericsvisitor sourceunit source
this source   source
protected sourceunit getsourceunit
return source
public void visitclass classnode node
boolean error checkwildcard node
if  error  return
checkgenericsusage node getunresolvedsuperclass false   node getsuperclass
classnode interfaces   node getinterfaces
for  int i   0  i < interfaces length  i
checkgenericsusage interfaces  interfaces redirect
private boolean checkwildcard classnode cn
classnode sn   cn getunresolvedsuperclass false
if  sn  null  return false
genericstype generics   sn getgenericstypes
if  generics  null  return false
boolean error false
for  int i   0  i < generics length  i
if generics iswildcard
adderror   sn
error   true
return error
private void checkgenericsusage classnode n  classnode cn
genericstype ntypes   n getgenericstypes
genericstype cntypes   cn getgenericstypes
// raw type usage is always allowed
if  ntypes  null  return
// parameterize a type by using all of the parameters only
if  cntypes  null
adderror    n getname
cn getname     ntypes length
n
return
if  ntypes length  cntypes length
adderror    n getname
cn getname     ntypes length
cntypes length  n
return
// check bounds
for  int i 0  i<ntypes length  i
classnode ntype   ntypes gettype
classnode cntype   cntypes gettype
if   ntype isderivedfrom cntype
if  cntype isinterface      ntype declaresinterface cntype getname     continue
adderror   ntypes getname
getprintname cntypes    n
private string getprintname genericstype gt
string ret   gt getname
classnode upperbounds   gt getupperbounds
classnode lowerbound   gt getlowerbound
if  upperbounds  null
ret
for  int i   0  i < upperbounds length  i
ret    getprintname upperbounds
if  i 1<upperbounds length  ret
else if  lowerbound  null
ret      getprintname lowerbound
return ret
private string getprintname classnode cn
string ret   cn getname
genericstype gts   cn getgenericstypes
if  gts  null
ret
for  int i   0  i < gts length  i
if  i  0  ret
ret  getprintname gts
ret
return ret
private void checkbounds classnode given  classnode restrictions
if  restrictions  null  return
for  int i 0  i<given length  i
for  int j 0  j<restrictions length  j
if    given isderivedfrom restrictions