/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org codehaus groovy tools javac
import org codehaus groovy ast
import org codehaus groovy ast expr argumentlistexpression
import org codehaus groovy ast expr constantexpression
import org codehaus groovy ast expr constructorcallexpression
import org codehaus groovy ast expr expression
import org codehaus groovy ast stmt blockstatement
import org codehaus groovy ast stmt expressionstatement
import org codehaus groovy ast stmt statement
import org codehaus groovy classgen verifier
import org codehaus groovy control resolvevisitor
import org objectweb asm opcodes
import java io
import java util
public class javastubgenerator
private boolean java5   false
private boolean requiresuperresolved   false
private file outputpath
private list tocompile   new arraylist
public javastubgenerator final file outputpath  final boolean requiresuperresolved  final boolean java5
this outputpath   outputpath
this requiresuperresolved   requiresuperresolved
this java5   java5
public javastubgenerator final file outputpath
this outputpath  false  false
private void mkdirs file parent  string relativefile
int index   relativefile lastindexof
if  index   1  return
file dir   new file parent relativefile substring 0 index
dir mkdirs
public void generateclass classnode classnode  throws filenotfoundexception
// only attempt to render our self if our super-class is resolved, else wait for it
if  requiresuperresolved     classnode getsuperclass   isresolved
return
string filename   classnode getname   replace
mkdirs outputpath filename
tocompile add filename
file file   new file outputpath  filename
fileoutputstream fos   new fileoutputstream file
printwriter out   new printwriter fos
verifier verifier   new verifier
public void addcovariantmethods classnode cn
protected void addtimestamp classnode node
protected void addinitialization classnode node
public void visitproperty propertynode node
verifier visitclass classnode
try
string packagename   classnode getpackagename
if  packagename    null
out println     packagename
genimports classnode  out
boolean isinterface   classnode isinterface
boolean isenum    classnode getmodifiers     opcodes acc_enum    0
printmodifiers out  classnode getmodifiers
~ isinterface ? opcodes acc_abstract   0
if  isinterface
out print
else if  isenum
out print
else
out print
out println classnode getnamewithoutpackage
writegenericsbounds out  classnode  true
classnode superclass   classnode getunresolvedsuperclass false
if   isinterface     isenum
out print
printtype superclass out
classnode interfaces   classnode getinterfaces
if  interfaces    null    interfaces length > 0
if  isinterface
out println
else
out println
for  int i   0  i < interfaces length   1    i
out print
printtype interfaces  out
out print
out print
printtype interfaces out
out println
genfields classnode  out  isenum
genmethods classnode  out  isenum
genprops classnode  out
out println
finally
try
out close
catch  exception e
// ignore
try
fos close
catch  ioexception e
// ignore
private void genmethods classnode classnode  printwriter out  boolean isenum
if   isenum  getconstructors classnode  out
list methods   classnode getmethods
if  methods    null
for  iterator it   methods iterator    it hasnext
methodnode methodnode    methodnode  it next
if isenum    methodnode issynthetic
// skip values() method and valueof(string)
string name   methodnode getname
parameter params   methodnode getparameters
if  name equals       params length  0  continue
if  name equals
params length  1
params gettype   equals classhelper string_type
continue
genmethod classnode  methodnode  out
private void getconstructors classnode classnode  printwriter out
list constrs   classnode getdeclaredconstructors
if  constrs    null
for  iterator it   constrs iterator    it hasnext
constructornode constrnode    constructornode  it next
genconstructor classnode  constrnode  out
private void genfields classnode classnode  printwriter out  boolean isenum
list fields   classnode getfields
if  fields    null  return
arraylist enumfields   new arraylist fields size
arraylist normalfields   new arraylist fields size
for  iterator it   fields iterator    it hasnext
fieldnode fieldnode    fieldnode  it next
boolean isenumfield    fieldnode getmodifiers     opcodes acc_enum    0
boolean issynthetic    fieldnode getmodifiers     opcodes acc_synthetic    0
if  isenumfield
enumfields add fieldnode
else if   issynthetic
normalfields add fieldnode
genenumfields enumfields  out
for  iterator iterator   normalfields iterator    iterator hasnext
fieldnode fieldnode    fieldnode  iterator next
genfield fieldnode  out
private void genprops classnode classnode  printwriter out
list props   classnode getproperties
if  props    null
for  iterator it   props iterator    it hasnext
propertynode propnode    propertynode  it next
genprop propnode  out
private void genprop propertynode propnode  printwriter out
string name   propnode getname   substring 0  1  touppercase
propnode getname   substring 1
string gettername       name
boolean skipgetter   false
list gettercandidates   propnode getfield   getowner   getmethods gettername
if  gettercandidates    null
for  iterator it   gettercandidates iterator    it hasnext
methodnode method    methodnode  it next
if  method getparameters   length    0
skipgetter   true
if   skipgetter
printmodifiers out  propnode getmodifiers
printtype propnode gettype    out
out print
out print gettername
out print
printreturn out  propnode gettype
out println
string settername       name
boolean skipsetter   false
list settercandidates   propnode getfield   getowner   getmethods  settername
if  settercandidates    null
for  iterator it   settercandidates iterator    it hasnext
methodnode method    methodnode  it next
if  method getparameters   length    1
skipsetter   true
if   skipsetter
printmodifiers out  propnode getmodifiers
out print
out print settername
out print
printtype propnode gettype    out
out println
private void genenumfields list fields  printwriter out
if  fields size    0  return
boolean first   true
for  iterator iterator   fields iterator    iterator hasnext
fieldnode fieldnode    fieldnode  iterator next
if   first
out print
else
first   false
out print fieldnode getname
out println
private void genfield fieldnode fieldnode  printwriter out
if   fieldnode getmodifiers   opcodes acc_private   0  return
printmodifiers out  fieldnode getmodifiers
printtype fieldnode gettype    out
out print
out print fieldnode getname
out println
private constructorcallexpression getconstructorcallexpression
constructornode constructornode
statement code   constructornode getcode
if    code instanceof blockstatement
return null
blockstatement block    blockstatement  code
list stats   block getstatements
if  stats    null    stats size      0
return null
statement stat    statement  stats get 0
if    stat instanceof expressionstatement
return null
expression expr     expressionstatement  stat  getexpression
if    expr instanceof constructorcallexpression
return null
return  constructorcallexpression  expr
private void genconstructor classnode clazz  constructornode constructornode  printwriter out
// printmodifiers(out, constructornode.getmodifiers());
out print        temporary hack
out print clazz getnamewithoutpackage
printparams constructornode  out
constructorcallexpression constrcall   getconstructorcallexpression constructornode
if  constrcall    null     constrcall isspecialcall
out println
else
out println
genspecialconstructorargs out  constructornode  constrcall
out println
private parameter selectaccessibleconstructorfromsuper constructornode node
classnode type   node getdeclaringclass
classnode supertype   type getsuperclass
boolean hadprivateconstructor   false
for  iterator iter   supertype getdeclaredconstructors   iterator    iter hasnext
constructornode c    constructornode iter next
// only look at things we can actually call
if  c ispublic      c isprotected
return c getparameters
// fall back for parameterless constructor
if  supertype isprimaryclassnode
return parameter empty_array
return null
private void genspecialconstructorargs printwriter out  constructornode node  constructorcallexpression constrcall
// select a constructor from our class, or super-class which is legal to call,
// then write out an invoke w/nulls using casts to avoid abigous crapo
parameter params   selectaccessibleconstructorfromsuper node
if  params    null
out print
for  int i 0  i<params length  i
printdefaultvalue out  params gettype
if  i   1 < params length
out print
out println
return
// otherwise try the older method based on the constructor's call expression
expression arguments   constrcall getarguments
if  constrcall issupercall
out print
else
out print
// else try to render some arguments
if  arguments instanceof argumentlistexpression
argumentlistexpression argumentlistexpression    argumentlistexpression  arguments
list args   argumentlistexpression getexpressions
for  iterator it   args iterator    it hasnext
expression arg    expression  it next
if  arg instanceof constantexpression
constantexpression expression    constantexpression  arg
object o   expression getvalue
if  o instanceof string
out print
else
out print expression gettext
else
printdefaultvalue out  arg gettype
if  arg    args get args size     1
out print
out println
private void genmethod classnode clazz  methodnode methodnode  printwriter out
if  methodnode getname   equals     return
if   clazz isinterface    printmodifiers out  methodnode getmodifiers
printtype methodnode getreturntype    out
out print
out print methodnode getname
printparams methodnode  out
classnode exceptions   methodnode getexceptions
for  int i 0  i<exceptions length  i
classnode exception   exceptions
if  i  0
out print
else
out print
printtype exception out
if   methodnode getmodifiers     opcodes acc_abstract     0
out println
else
out print
classnode rettype   methodnode getreturntype
printreturn out  rettype
out println
private void printreturn printwriter out  classnode rettype
string retname   rettype getname
if   retname equals
out print
printdefaultvalue out  rettype
out print
private void printdefaultvalue printwriter out  classnode type
if  type redirect    classhelper object_type
out print
printtype type out
out print
if  classhelper isprimitivetype type
if  type  classhelper boolean_type
out print
else
out print
else
out print
private void printtype classnode type  printwriter out
if  type isarray
printtype type getcomponenttype   out
out print
else
writegenericsbounds out type false
private void printtypename classnode type  printwriter out
if  classhelper isprimitivetype type
if  type  classhelper boolean_type
out print
else if  type  classhelper char_type
out print
else if  type  classhelper int_type
out print
else if  type  classhelper short_type
out print
else if  type  classhelper long_type
out print
else if  type  classhelper float_type
out print
else if  type  classhelper double_type
out print
else if  type  classhelper byte_type
out print
else
out print
else
out print type redirect   getname   replace
private void writegenericsbounds printwriter out  classnode type  boolean skipname
if   skipname  printtypename type out
if  java5
type isgenericsplaceholder
classhelper iscachedtype type
writegenericsbounds out type getgenericstypes
private void writegenericsbounds printwriter out  genericstype genericstypes
if  genericstypes  null    genericstypes length  0  return
out print
for  int i   0  i < genericstypes length  i
if  i  0  out print
writegenericsbounds out genericstypes
out print
private void writegenericsbounds printwriter out  genericstype genericstype
if  genericstype isplaceholder
out print genericstype getname
else
printtype genericstype gettype   out
classnode upperbounds   genericstype getupperbounds
classnode lowerbound   genericstype getlowerbound
if  upperbounds    null
out print
for  int i   0  i < upperbounds length  i
printtype upperbounds  out
if  i   1 < upperbounds length  out print
else if  lowerbound    null
out print
printtype lowerbound  out
private void printparams methodnode methodnode  printwriter out
out print
parameter parameters   methodnode getparameters
if  parameters    null    parameters length    0
for  int i   0  i    parameters length    i
printtype parameters gettype    out
out print
out print parameters getname
if  i   1 < parameters length
out print
out print
private void printmodifiers printwriter out  int modifiers
if   modifiers   opcodes acc_public     0
out print
if   modifiers   opcodes acc_protected     0
out print
if   modifiers   opcodes acc_private     0
out print
if   modifiers   opcodes acc_static     0
out print
if   modifiers   opcodes acc_synchronized     0
out print
if   modifiers   opcodes acc_abstract     0
out print
private void genimports classnode classnode  printwriter out
set imports   new hashset
//
// hack: add the default imports... since things like closure and groovyobject seem to parse out w/o fully qualified classnames.
//
imports addall arrays aslist resolvevisitor default_imports
modulenode modulenode   classnode getmodule
for  iterator it   modulenode getimportpackages   iterator    it hasnext
imports add it next
for  iterator it   modulenode getimports   iterator    it hasnext
importnode imp    importnode  it next
string name   imp gettype   getname
int lastdot   name lastindexof
if  lastdot     1
imports add name substring 0  lastdot   1
for  iterator it   imports iterator    it hasnext
string imp    string  it next
out print
out print imp
out println
out println
public void clean
for  iterator it   tocompile iterator    it hasnext
string path    string  it next
new file outputpath  path      delete