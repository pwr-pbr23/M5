/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org codehaus groovy classgen
import java util
import org codehaus groovy ast
import org codehaus groovy ast stmt returnstatement
import org codehaus groovy ast expr
import org codehaus groovy control errorcollector
import org codehaus groovy control sourceunit
import org codehaus groovy control messages syntaxerrormessage
import org codehaus groovy syntax syntaxexception
import org codehaus groovy vmplugin vmpluginfactory
/**
* an annotation visitor responsible with:
* - reading annotation metadata (@retention, @target, attribute types)
* - verify that an <code>annotationnode</code> conforms to annotation meta
* - enhancing an <code>annotationnode</code> ast to reflect real annotation meta
*
* @author <a href='mailto:the[dot]mindstorm[at]gmail[dot]com'>alex popescu</a>
*/
public class annotationvisitor
private sourceunit source
private errorcollector errorcollector
private annotationnode annotation
private classnode reportclass
public annotationvisitor sourceunit source  errorcollector errorcollector
this source   source
this errorcollector   errorcollector
public void setreportclass classnode cn
reportclass   cn
public annotationnode visit annotationnode node
this annotation   node
this reportclass   node getclassnode
if  isvalidannotationclass node getclassnode
adderror     node getclassnode   getname
return node
map attributes   node getmembers
for iterator it   attributes entryset   iterator    it hasnext
map entry entry    map entry  it next
string attrname    string  entry getkey
expression attrexpr    expression  entry getvalue
classnode attrtype   getattributetype node  attrname
visitexpression attrname  attrexpr  attrtype
vmpluginfactory getplugin   configureannotation node
return this annotation
private classnode getattributetype annotationnode node  string attrname
list methods   node getclassnode   getmethods attrname
// if size is >1, then the method was overwritten or something, we ignore that
// if it is an error, we have to test it at another place. but size==0 is
// an error, because it means that no such attribute exists.
if  methods size      0
adderror     attrname       node getclassnode    node
return classhelper object_type
methodnode method    methodnode  methods get 0
return method getreturntype
private boolean isvalidannotationclass classnode node
return node implementsinterface
protected void visitexpression string attrname  expression attrexp  classnode attrtype
if  attrtype isarray
// check needed as @test(attr = {"elem"}) passes through the parser
if  attrexp instanceof listexpression
listexpression le    listexpression  attrexp
visitlistexpression attrname   listexpression  attrexp  attrtype getcomponenttype
else if  attrexp instanceof closureexpression
adderror    attrexp
else
// treat like a singleton list as per java
listexpression listexp   new listexpression
listexp addexpression attrexp
if  annotation    null
annotation setmember attrname  listexp
visitexpression attrname  listexp  attrtype
else if  classhelper isprimitivetype attrtype
visitconstantexpression attrname  getconstantexpression attrexp   classhelper getwrapper attrtype
else if  classhelper string_type equals attrtype
visitconstantexpression attrname  getconstantexpression attrexp   classhelper string_type
else if  classhelper class_type equals attrtype
if    attrexp instanceof classexpression
adderror   attrname   attrexp
else if  attrtype isderivedfrom classhelper enum_type
if  attrexp instanceof propertyexpression
visitenumexpression attrname   propertyexpression  attrexp  attrtype
else
adderror     attrname  attrexp
else if  isvalidannotationclass attrtype
if  attrexp instanceof annotationconstantexpression
visitannotationexpression attrname   annotationconstantexpression  attrexp  attrtype
else
adderror   attrtype getname     attrname  attrexp
else
adderror   attrtype getname   attrexp
public void checkreturntype classnode attrtype astnode node
if attrtype isarray
checkreturntype attrtype getcomponenttype   node
else if  classhelper isprimitivetype attrtype
return
else if  classhelper string_type equals attrtype
return
else if  classhelper class_type equals attrtype
return
else if  attrtype isderivedfrom classhelper enum_type
return
else if  isvalidannotationclass attrtype
return
else
adderror   attrtype getname   node
private constantexpression getconstantexpression expression exp
if  exp instanceof constantexpression
return  constantexpression  exp
else
adderror   exp
return constantexpression emtpy_expression
/**
* @param attrname
* @param expression
* @param attrtype
*/
protected void visitannotationexpression string attrname  annotationconstantexpression expression  classnode attrtype
annotationnode annotationnode    annotationnode  expression getvalue
annotationvisitor visitor   new annotationvisitor this source  this errorcollector
visitor visit annotationnode
protected void visitlistexpression string attrname  listexpression listexpr  classnode elementtype
list expressions   listexpr getexpressions
for  int i   0  i < expressions size    i
visitexpression attrname   expression  expressions get i   elementtype
protected void visitconstantexpression string attrname  constantexpression constexpr  classnode attrtype
if  constexpr gettype   isderivedfrom attrtype
adderror     attrname       attrtype getname
constexpr gettype   getname
constexpr
protected void visitenumexpression string attrname  propertyexpression propexpr  classnode attrtype
if  propexpr getobjectexpression   gettype   isderivedfrom attrtype
adderror     attrname       attrtype getname
propexpr getobjectexpression   gettype   getname
propexpr
protected void adderror string msg
adderror msg this annotation
protected void adderror string msg  astnode expr
this errorcollector adderrorandcontinue
new syntaxerrormessage new syntaxexception msg
this reportclass getname
expr getlinenumber
expr getcolumnnumber     this source
public void checkcircularreference classnode searchclass  classnode attrtype expression startexp
if   isvalidannotationclass attrtype   return
annotationconstantexpression ace    annotationconstantexpression  startexp
annotationnode annotationnode    annotationnode  ace getvalue
if  annotationnode getclassnode   equals searchclass
adderror    searchclass getname   startexp
return
classnode cn   annotationnode getclassnode
list methods   cn getmethods
for iterator it methods iterator    it hasnext
methodnode method    methodnode  it next
if  method getreturntype   equals searchclass
adderror    cn getname   startexp
returnstatement code    returnstatement  method getcode
if  code  null  continue
checkcircularreference searchclass method getreturntype   code getexpression