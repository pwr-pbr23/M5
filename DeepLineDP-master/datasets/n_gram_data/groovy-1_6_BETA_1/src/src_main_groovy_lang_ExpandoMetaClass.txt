/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package groovy lang
import org codehaus groovy reflection cachedclass
import org codehaus groovy reflection reflectioncache
import org codehaus groovy runtime
import org codehaus groovy runtime callsite
import org codehaus groovy runtime metaclass closuremetamethod
import org codehaus groovy runtime metaclass closurestaticmetamethod
import org codehaus groovy runtime metaclass threadmanagedmetabeanproperty
import java lang reflect constructor
import java lang reflect method
import java lang reflect modifier
import java util
import java util concurrent concurrenthashmap
/**
* a metaclass that implements groovyobject and behaves like an expando, allowing the addition of new methods on the fly
*
* <code><pre>
* // defines or replaces instance method:
* metaclass.mymethod = { args -> }
*
* // defines a new instance method
* metaclass.mymethod << { args -> }
*
* // creates multiple overloaded methods of the same name
* metaclass.mymethod << { string s -> } << { integer i -> }
*
* // defines or replaces a static method with the 'static' qualifier
* metaclass.'static'.mymethod = { args ->  }
*
* // defines a new static method with the 'static' qualifier
* metaclass.'static'.mymethod << { args ->  }
*
* // defines a new constructor
* metaclass.constructor << { string arg -> }
*
* // defines or replaces a constructor
* metaclass.constructor = { string arg -> }
*
* // defines a new property with an initial value of "blah"
* metaclass.myproperty = "blah"
*
* </code></pre>
*
* by default methods are only allowed to be added before initialize() is called. in other words you create a new
* expandometaclass, add some methods and then call initialize(). if you attempt to add new methods after initialize()
* has been called an error will be thrown.
*
* this is to ensure that the metaclass can operate appropriately in multi threaded environments as it forces you
* to do all method additions at the beginning, before using the metaclass.
*
* if you need more fine grained control of how a method is matched you can use dynamicmethodsmetaclass
*
* warning: this metaclass uses a thread-bound threadlocal instance to store and retrieve properties.
* in addition properties stored use soft references so they are both bound by the life of the thread and by the soft
* references. the implication here is you should never use dynamic properties if you want their values to stick around
* for long periods because as soon as the jvm is running low on memory or the thread dies they will be garbage collected.
*
* @author graeme rocher
* @since 1.1
*/
public class expandometaclass extends metaclassimpl implements groovyobject
private static final string meta_class
private static final string class
private static final string meta_methods
private static final string methods
private static final string properties
public static final string static_qualifier
private static final class zero_arguments   new class
private static final string constructor
private static final string get_property_method
private static final string set_property_method
private static final string invoke_method_method
private static final string class_property
private static final string meta_class_property
private static final string groovy_constructor
// these two properties are used when no expandometaclasscreationhandle is present
private metaclass mymetaclass
private boolean allowchangesafterinit
private boolean initialized
private boolean initcalled
private boolean modified
private boolean inregistry
private final set inheritedmetamethods   new hashset
private final map beanpropertycache   new concurrenthashmap
private final map staticbeanpropertycache   new concurrenthashmap
private final map expandomethods   new concurrenthashmap
private final map expandoproperties   new concurrenthashmap
private metamethod getpropertymethod
private metamethod invokemethodmethod
private metamethod setpropertymethod
private closurestaticmetamethod invokestaticmethodmethod
/**
* constructs a new expandometaclass instance for the given class
*
* @param theclass the class that the metaclass applies to
*/
public expandometaclass class theclass
super groovysystem getmetaclassregistry    theclass
this mymetaclass   invokerhelper getmetaclass this
public expandometaclass class theclass  metamethod  add
super groovysystem getmetaclassregistry    theclass  add
this mymetaclass   invokerhelper getmetaclass this
/**
* constructs a new expandometaclass instance for the given class optionally placing the metaclass
* in the metaclassregistry automatically
*
* @param theclass the class that the metaclass applies to
* @param register true if the metaclass should be registered inside the metaclassregistry. this defaults to true and expandometaclass will effect all instances if changed
*/
public expandometaclass class theclass  boolean register
this theclass
this inregistry   register
public expandometaclass class theclass  boolean register  metamethod  add
this theclass  add
this inregistry   register
/**
* constructs a new expandometaclass instance for the given class optionally placing the metaclass
* in the metaclassregistry automatically
*
* @param theclass the class that the metaclass applies to
* @param register true if the metaclass should be registered inside the metaclassregistry. this defaults to true and expandometaclass will effect all instances if changed
* @param allowchangesafterinit should the meta class be modifiable after initialization. default is false.
*/
public expandometaclass class theclass  boolean register  boolean allowchangesafterinit
this theclass
this inregistry   register
this allowchangesafterinit   allowchangesafterinit
/**
* overrides the default missing method behaviour and adds the capability to look up a method from super class
*
* @see metaclassimpl#invokemissingmethod(object, string, object[])
*/
public object invokemissingmethod object instance  string methodname  object arguments
class superclass   instance instanceof class ?  class instance   instance getclass
while superclass    object class
final metamethod method   findmethodinclassheirarchy methodname  arguments  superclass
if method    null
addsupermethodifnotoverriden method
return method invoke instance  arguments
superclass   superclass getsuperclass
// still not method here, so see if there is an invokemethod method up the heirarchy
final object invokemethodargs    methodname  arguments
final metamethod method   findmethodinclassheirarchy invoke_method_method  invokemethodargs  theclass
if method  null    method instanceof closuremetamethod
this invokemethodmethod   method
return method invoke instance  invokemethodargs
return super invokemissingmethod instance  methodname  arguments
/**
* overrides the default missing method behaviour and adds the capability to look up a method from the super class in the case
* where it has been overriden
*
* @param instance the instance of the object
* @param propertyname the property name
* @param optionalvalue the property value in the case of a setter
* @param isgetter true if it is a getter
* @return the return value if of a getproperty call or a missingpropertyexception is thrown
*/
public object invokemissingproperty object instance  string propertyname  object optionalvalue  boolean isgetter
class theclass   instance instanceof class ?  class instance   instance getclass
cachedclass superclass   thecachedclass
while superclass    reflectioncache object_class
final metabeanproperty property   findpropertyinclasshierarchy propertyname  superclass
if property    null
addmetabeanproperty property
if  isgetter
property setproperty instance  optionalvalue
return null
else
return property getproperty instance
superclass   superclass getcachedsuperclass
// got here to property not found, look for getproperty or setproperty overrides
if isgetter
final object getpropertyargs    propertyname
final metamethod method   findmethodinclassheirarchy get_property_method  getpropertyargs  theclass
if method    null    method instanceof closuremetamethod
this getpropertymethod    closuremetamethod method
return method invoke instance getpropertyargs
else
final object setpropertyargs    propertyname  optionalvalue
final metamethod method   findmethodinclassheirarchy set_property_method  setpropertyargs  theclass
if method    null    method instanceof closuremetamethod
this setpropertymethod    closuremetamethod method
return method invoke instance  setpropertyargs
return super invokemissingproperty instance  propertyname  optionalvalue  isgetter
private metabeanproperty findpropertyinclasshierarchy string propertyname  cachedclass theclass
metabeanproperty property  null
final cachedclass superclass   theclass getcachedsuperclass
metaclass metaclass   this registry getmetaclass superclass gettheclass
if metaclass instanceof mutablemetaclass
property   getmetapropertyfrommutablemetaclass propertyname metaclass
if property    null
if superclass    reflectioncache object_class
property   findpropertyinclasshierarchy propertyname  superclass
if property    null
final class interfaces   theclass gettheclass   getinterfaces
property   searchinterfacesformetaproperty propertyname  interfaces
return property
private metabeanproperty searchinterfacesformetaproperty string propertyname  class interfaces
metabeanproperty property   null
for  int i   0  i < interfaces length  i
class aninterface   interfaces
metaclass metaclass   this registry getmetaclass aninterface
if metaclass instanceof mutablemetaclass
property   getmetapropertyfrommutablemetaclass propertyname metaclass
if property    null  break
class superinterfaces   aninterface getinterfaces
if superinterfaces length > 0
property   searchinterfacesformetaproperty propertyname  superinterfaces
if property  null  break
return property
private metabeanproperty getmetapropertyfrommutablemetaclass string propertyname  metaclass metaclass
final boolean ismodified     mutablemetaclass  metaclass  ismodified
final metaproperty metaproperty   metaclass getmetaproperty propertyname
if metaproperty instanceof metabeanproperty
return ismodified ?  metabeanproperty metaproperty   null
else
return null
private metamethod findmethodinclassheirarchy string methodname  object arguments  class theclass
metamethod method   null
final class superclass   theclass getsuperclass
if  superclass    null
return null
metaclass metaclass   this registry getmetaclass superclass
if metaclass instanceof mutablemetaclass
method   getmetamethodfrommutablemetaclass methodname  arguments  metaclass
if method    null
if superclass    object class
method   findmethodinclassheirarchy methodname  arguments  superclass
if method    null
final class interfaces   theclass getinterfaces
method   searchinterfacesformetamethod methodname  arguments  interfaces
return method
private metamethod searchinterfacesformetamethod string methodname  object arguments  class interfaces
metamethod method   null
for  int i   0  i < interfaces length  i
class aninterface   interfaces
metaclass metaclass   this registry getmetaclass aninterface
if metaclass instanceof mutablemetaclass
method   getmetamethodfrommutablemetaclass methodname  arguments  metaclass
if method    null  break
class superinterfaces   aninterface getinterfaces
if superinterfaces length > 0
method   searchinterfacesformetamethod methodname arguments  superinterfaces
if method  null  break
return method
private metamethod getmetamethodfrommutablemetaclass string methodname  object arguments  metaclass metaclass
final boolean ismodified     mutablemetaclass  metaclass  ismodified
return ismodified ? metaclass getmetamethod methodname  arguments    null
public synchronized boolean ismodified
return this modified
/**
* for simulating closures in java
*/
private interface callable
void call
/**
* call to enable global use of global use of expandometaclass within the registry. this has the advantage that
* inheritance will function correctly, but has a higher memory usage on the jvm than normal groovy
*/
public static void enableglobally
expandometaclasscreationhandle enable
/**
* call to disable the global use of expandometaclass
*/
public static void disableglobally
expandometaclasscreationhandle disable
/* (non-javadoc)
* @see groovy.lang.metaclassimpl#initialize()
*/
public synchronized void initialize
if   isinitialized
super initialize
setinitialized true
this initcalled   true
/* (non-javadoc)
* @see groovy.lang.metaclassimpl#isinitialized()
*/
protected synchronized boolean isinitialized
return this initialized
protected synchronized void setinitialized boolean b
this initialized   b
private void addsupermethodifnotoverriden final metamethod metamethodfromsuper
performoperationonmetaclass new callable
public void call
metamethod existing   null
try
existing   pickmethod metamethodfromsuper getname    metamethodfromsuper getnativeparametertypes
catch   groovyruntimeexception e
// ignore, this happens with overlapping method definitions
if existing    null
addmethodwithkey metamethodfromsuper
else
boolean isgroovymethod   getmetamethods   contains existing
if isgroovymethod
addmethodwithkey metamethodfromsuper
else if inheritedmetamethods contains existing
inheritedmetamethods remove existing
addmethodwithkey metamethodfromsuper
private void addmethodwithkey final metamethod metamethodfromsuper
inheritedmetamethods add metamethodfromsuper
if metamethodfromsuper instanceof closuremetamethod
closuremetamethod closuremethod    closuremetamethod metamethodfromsuper
closure cloned    closure closuremethod getclosure   clone
string name   metamethodfromsuper getname
closuremetamethod localmethod   new closuremetamethod name  getjavaclass    cloned
addmetamethod localmethod
methodkey key   new defaultcachedmethodkey getjavaclass   name  localmethod getparametertypes   false
//                    cacheinstancemethod(key, localmethod);
checkifgroovyobjectmethod localmethod  name
expandomethods put key localmethod
/**
* instances of this class are returned when using the << left shift operator.
*
* example:
*
* metaclass.mymethod << { string args -> }
*
* this allows callbacks to the expandometaclass for registering appending methods
*
* @author graeme rocher
*
*/
protected class expandometaproperty extends groovyobjectsupport
protected string propertyname
protected boolean isstatic
protected expandometaproperty string name
this name  false
protected expandometaproperty string name  boolean isstatic
this propertyname   name
this isstatic   isstatic
public string getpropertyname     return this propertyname
public boolean isstatic     return this isstatic
public object leftshift object arg
registerifclosure arg  false
return this
private void registerifclosure object arg  boolean replace
if arg instanceof closure
closure callable    closure arg
class paramtypes   callable getparametertypes
if paramtypes    null paramtypes   zero_arguments
if  this isstatic
method foundmethod   checkifmethodexists theclass  propertyname  paramtypes  false
if foundmethod    null     replace  throw new groovyruntimeexception   propertyname   defaultgroovymethods inspect paramtypes
registerinstancemethod new closuremetamethod propertyname  theclass callable
else
method foundmethod   checkifmethodexists theclass  propertyname  paramtypes  true
if foundmethod    null     replace  throw new groovyruntimeexception   propertyname   defaultgroovymethods inspect paramtypes
registerstaticmethod propertyname  callable
private method checkifmethodexists class methodclass  string methodname  class paramtypes  boolean staticmethod
method foundmethod   null
method methods   methodclass getmethods
for  int i   0  i < methods length  i
if methods getname   equals methodname     modifier isstatic methods getmodifiers       staticmethod
if metaclasshelper parametersarecompatible  paramtypes  methods getparametertypes
foundmethod   methods
break
return foundmethod
/* (non-javadoc)
* @see groovy.lang.groovyobjectsupport#getproperty(java.lang.string)
*/
public object getproperty string property
this propertyname   property
return this
/* (non-javadoc)
* @see groovy.lang.groovyobjectsupport#setproperty(java.lang.string, java.lang.object)
*/
public void setproperty string property  object newvalue
this propertyname   property
registerifclosure newvalue  true
/* (non-javadoc)
* @see groovy.lang.metaclassimpl#invokeconstructor(java.lang.object[])
*/
public object invokeconstructor object arguments
// todo this is the only area where this metaclass needs to do some interception because groovy's current
// metaclass uses hard coded references to the java.lang.reflect.constructor class so you can't simply
// inject constructor like you can do properties, methods and fields. when groovy's metaclassimpl is
// refactored we can fix this
class argclasses   metaclasshelper converttotypearray arguments
metamethod method   pickmethod groovy_constructor  argclasses
if method  null    method getparametertypes   length    arguments length
return method invoke theclass  arguments
return super invokeconstructor arguments
/**
* handles the ability to use the left shift operator to append new constructors
*
* @author graeme rocher
*
*/
protected class expandometaconstructor extends groovyobjectsupport
public object leftshift closure c
if c    null
class paramtypes   c getparametertypes
if paramtypes    null paramtypes   zero_arguments
constructor ctor   retrieveconstructor paramtypes
if ctor    null  throw new groovyruntimeexception   defaultgroovymethods inspect paramtypes
registerinstancemethod new closuremetamethod groovy_constructor  theclass c
return this
/* (non-javadoc)
* @see groovy.lang.groovyobject#getmetaclass()
*/
public metaclass getmetaclass
return mymetaclass
/* (non-javadoc)
* @see groovy.lang.groovyobject#getproperty(java.lang.string)
*/
public object getproperty string property
if isvalidexpandoproperty property
if property equals static_qualifier
return new expandometaproperty property  true
else if property equals constructor
return new expandometaconstructor
else
if  mymetaclass hasproperty this  property     null
return new expandometaproperty property
else
return mymetaclass getproperty this  property
else
return mymetaclass getproperty this  property
private boolean isvalidexpandoproperty string property
return   property equals meta_class     property equals class     property equals meta_methods     property equals methods     property equals properties
/* (non-javadoc)
* @see groovy.lang.groovyobject#invokemethod(java.lang.string, java.lang.object)
*/
public object invokemethod string name  object args
return mymetaclass invokemethod this  name  args
/* (non-javadoc)
* @see groovy.lang.groovyobject#setmetaclass(groovy.lang.metaclass)
*/
public void setmetaclass metaclass metaclass
this mymetaclass   metaclass
/* (non-javadoc)
* @see groovy.lang.groovyobject#setproperty(java.lang.string, java.lang.object)
*/
public void setproperty string property  object newvalue
if newvalue instanceof closure
if property equals constructor
property   groovy_constructor
closure callable    closure newvalue
// here we don't care if the method exists or not we assume the
// developer is responsible and wants to override methods where necessary
registerinstancemethod new closuremetamethod property  theclass callable
else
registerbeanproperty property  newvalue
protected synchronized void performoperationonmetaclass callable c
try
if allowchangesafterinit
setinitialized false
c call
finally
if initcalled
setinitialized true
/**
* registers a new bean property
*
* @param property the property name
* @param newvalue the properties initial value
*/
protected void registerbeanproperty final string property  final object newvalue
performoperationonmetaclass new callable
public void call
class type   newvalue    null ? object class   newvalue getclass
metabeanproperty mbp   newvalue instanceof metabeanproperty ?  metabeanproperty newvalue   new threadmanagedmetabeanproperty theclass property type newvalue
final metamethod getter   mbp getgetter
final methodkey getterkey   new defaultcachedmethodkey theclass getter getname    cachedclass empty_array false
final metamethod setter   mbp getsetter
final methodkey setterkey   new defaultcachedmethodkey theclass setter getname    setter getparametertypes   false
addmetamethod getter
addmetamethod setter
expandomethods put setterkey setter
expandomethods put getterkey getter
expandoproperties put mbp getname   mbp
addmetabeanproperty mbp
performregistrycallbacks
/**
* registers a new instance method for the given method name and closure on this metaclass
*
* @param metamethod
*/
public void registerinstancemethod final metamethod metamethod
final boolean inited   this initcalled
performoperationonmetaclass new callable
public void call
string methodname   metamethod getname
checkifgroovyobjectmethod metamethod  methodname
methodkey key   new defaultcachedmethodkey theclass methodname  metamethod getparametertypes   false
addmetamethod metamethod
dropmethodcache methodname
expandomethods put key metamethod
if inited    isgetter methodname  metamethod getparametertypes
string propertyname   getpropertyforgetter methodname
registerbeanpropertyformethod metamethod  propertyname  true  false
else if inited    issetter methodname  metamethod getparametertypes
string propertyname   getpropertyforsetter methodname
registerbeanpropertyformethod metamethod  propertyname  false  false
performregistrycallbacks
public void registerinstancemethod string name  closure closure
registerinstancemethod new closuremetamethod name  closure
/**
* overrides the behaviour of parent getmethods() method to make metaclass aware of added expando methods
*
* @see metaobjectprotocol#getmethods()
*
* @return a list of metamethods
*/
public list getmethods
list methodlist    new arraylist
methodlist addall this expandomethods values
methodlist addall super getmethods
return methodlist
public list getproperties
list propertylist   new arraylist
propertylist addall super getproperties
return propertylist
/**
* checks if the metamethod is a method from the groovyobject interface such as setproperty, getproperty and invokemethod
*
* @param metamethod the metamethod instance
* @param methodname the method name
*
* @see groovy.lang.groovyobject
*/
private void checkifgroovyobjectmethod metamethod metamethod  string methodname
if isgetpropertymethod metamethod
getpropertymethod   metamethod
else if isinvokemethod metamethod
invokemethodmethod   metamethod
else if issetpropertymethod metamethod
setpropertymethod   metamethod
private boolean issetpropertymethod metamethod metamethod
return set_property_method equals metamethod getname        metamethod getparametertypes   length    2
private boolean isgetpropertymethod metamethod metamethod
return get_property_method equals metamethod getname
private boolean isinvokemethod metamethod metamethod
return invoke_method_method equals metamethod getname       metamethod getparametertypes   length    2
private void performregistrycallbacks
metaclassregistry registry    groovysystem getmetaclassregistry
if  modified
modified   true
// implementation note: by default groovy uses soft references to store metaclass
// this insures the registry doesn't grow and get out of hand. by doing this we're
// saying this this emc will be a hard reference in the registry. as we're only
// going have a small number of classes that have modified emc this is ok
if inregistry
metaclass currmetaclass   registry getmetaclass theclass
if   currmetaclass instanceof expandometaclass     currmetaclass instanceof adaptingmetaclass
adaptingmetaclass currmetaclass  setadaptee this
else
registry setmetaclass theclass  this
// implementation note: emc handles most cases by itself except for the case where yuou
// want to call a dynamically injected method registered with a parent on a child class
// for this to work the metaclassregistry needs to have an expandometaclasscreationhandle
// what this does is ensure that every class created in the registry uses an emc
// then when an emc changes it reports back to the emccreationhandle which will
// tell child classes of this class to re-inherit their methods
if registry getmetaclasscreationhandler   instanceof expandometaclasscreationhandle
expandometaclasscreationhandle creationhandler    expandometaclasscreationhandle registry getmetaclasscreationhandler
if  creationhandler hasmodifiedmetaclass this
creationhandler registermodifiedmetaclass this
private void registerbeanpropertyformethod metamethod metamethod  string propertyname  boolean getter  boolean isstatic
map propertycache   isstatic ? staticbeanpropertycache   beanpropertycache
metabeanproperty beanproperty    metabeanproperty propertycache get propertyname
if beanproperty    null
if getter
beanproperty   new metabeanproperty propertyname object class metamethod null
else
beanproperty   new metabeanproperty propertyname object class null metamethod
propertycache put propertyname  beanproperty
else
if getter
metamethod settermethod   beanproperty getsetter
class type   settermethod    null ? settermethod getparametertypes   gettheclass     object class
beanproperty   new metabeanproperty propertyname type metamethod settermethod
propertycache put propertyname  beanproperty
else
metamethod gettermethod   beanproperty getgetter
beanproperty   new metabeanproperty propertyname  metamethod getparametertypes   gettheclass   gettermethod metamethod
propertycache  put propertyname  beanproperty
expandoproperties put beanproperty getname   beanproperty
addmetabeanproperty beanproperty
/**
* registers a new static method for the given method name and closure on this metaclass
*
* @param name the method name
* @param callable the callable closure
*/
protected void registerstaticmethod final string name  final closure callable
performoperationonmetaclass new callable
public void call
string methodname
if name equals method_missing
methodname   static_method_missing
else if name equals property_missing
methodname   static_property_missing
else
methodname   name
closurestaticmetamethod metamethod   new closurestaticmetamethod methodname  theclass callable
if methodname equals invoke_method_method     callable getparametertypes   length    2
invokestaticmethodmethod   metamethod
else
if methodname equals method_missing
methodname   static_method_missing
methodkey key   new defaultcachedmethodkey theclass methodname  metamethod getparametertypes    false
addmetamethod metamethod
dropstaticmethodcache  methodname
//                    cachestaticmethod(key,metamethod);
if isgetter methodname  metamethod getparametertypes
string propertyname   getpropertyforgetter methodname
registerbeanpropertyformethod metamethod  propertyname  true  true
else if issetter methodname  metamethod getparametertypes
string propertyname   getpropertyforsetter methodname
registerbeanpropertyformethod metamethod  propertyname  false  true
performregistrycallbacks
expandomethods put key metamethod
/**
* @return the java class enhanced by this metaclass
*/
public class getjavaclass
return theclass
/**
* called from expandometaclasscreationhandle in the registry if it exists to setup inheritance
* handling
*
* @param modifiedsuperexpandos a list of modified super expandometaclass
*/
public void refreshinheritedmethods set modifiedsuperexpandos
for  iterator i   modifiedsuperexpandos iterator    i hasnext
expandometaclass superexpando    expandometaclass  i next
if superexpando    this
list metamethods   superexpando getexpandomethods
for  iterator j   metamethods iterator    j hasnext
metamethod metamethod    metamethod  j next
if metamethod isstatic    continue     don't inherit static methodsw
addsupermethodifnotoverriden metamethod
collection metaproperties   superexpando getexpandoproperties
for  iterator j   metaproperties iterator    j hasnext
metabeanproperty property    metabeanproperty  j next
expandoproperties put property getname   property
addmetabeanproperty property
/**
* returns a list of expando metamethod instances added to this expandometaclass
*
* @return the expandomethods
*/
public list getexpandomethods
return collections unmodifiablelist defaultgroovymethods tolist expandomethods values
/**
* returns a list of metabeanproperty instances added to this expandometaclass
*
* @return the expandoproperties
*/
public collection getexpandoproperties
return collections unmodifiablecollection expandoproperties values
/**
* overrides default implementation just in case invokemethod has been overriden by expandometaclass
*
* @see groovy.lang.metaclassimpl#invokemethod(class, object, string, object[], boolean, boolean)
*/
public object invokemethod class sender  object object  string methodname  object originalarguments  boolean iscalltosuper  boolean frominsideclass
if invokemethodmethod  null
return invokemethodmethod invoke object  new object methodname  originalarguments
return super invokemethod sender  object  methodname  originalarguments  iscalltosuper  frominsideclass
/**
* overrides default implementation just in case a static invoke method has been set on expandometaclass
* @see metaclassimpl#invokestaticmethod(object, string, object[])
*/
public object invokestaticmethod object object  string methodname  object arguments
if invokestaticmethodmethod    null
return invokestaticmethodmethod invoke object  new object methodname  arguments
return super invokestaticmethod object  methodname  arguments
/**
* overrides default implementation just in case getproperty method has been overriden by expandometaclass
*
* @see metaclassimpl#getproperty(class, object, string, boolean, boolean)
*/
public object getproperty class sender  object object  string name  boolean usesuper  boolean frominsideclass
if hasoverridegetproperty name     getjavaclass   isinstance object
return getpropertymethod invoke object  new object name
return super getproperty sender  object  name  usesuper  frominsideclass
/**
* overrides default implementation just in case getproperty method has been overriden by expandometaclass
*
* @see metaclassimpl#getproperty(object, string)
*/
public object getproperty object object  string name
if hasoverridegetproperty name     getjavaclass   isinstance object
return getpropertymethod invoke object  new object name
return super getproperty object name
private boolean hasoverridegetproperty string name
return getpropertymethod    null     name equals meta_class_property     name equals class_property
/**
* overrides default implementation just in case setproperty method has been overriden by expandometaclass
*
* @see metaclassimpl#setproperty(class, object, string, object, boolean, boolean)
*/
public void setproperty class sender  object object  string name  object newvalue  boolean usesuper  boolean frominsideclass
if setpropertymethod  null      name equals meta_class_property     getjavaclass   isinstance object
setpropertymethod invoke object  new object name  newvalue
return
super setproperty sender  object  name  newvalue  usesuper  frominsideclass
/**
* looks up an existing metaproperty by name
*
* @param name the name of the metaproperty
* @return the metaproperty or null if it doesn't exist
*/
public metaproperty getmetaproperty string name
metaproperty mp    metaproperty  this expandoproperties get name
if  mp    null  return mp
return super getmetaproperty name
/**
* returns true if the metaclass has the given property
*
* @param name the name of the metaproperty
* @return true it exists as a metaproperty
*/
public boolean hasmetaproperty string name
return getmetaproperty name     null
/**
* checks whether a metamethod for the given name and arguments exists
*
* @param name the name of the metamethod
* @param args the arguments to the meta method
* @return true if the method exists otherwise null
*/
public boolean hasmetamethod string name  class args
return super pickmethod name  args     null
/**
* returns true if the name of the method specified and the number of arguments make it a javabean property
*
* @param name true if its a javabean property
* @param args the arguments
* @return true if it is a javabean property method
*/
private boolean isgetter string name  cachedclass args
if name    null    name length      0    args    null return false
if args length    0 return false
if name startswith
name   name substring 3
if name length   > 0    character isuppercase name charat 0    return true
else if name startswith
name   name substring 2
if name length   > 0    character isuppercase name charat 0    return true
return false
/**
* returns a property name equivalent for the given getter name or null if it is not a getter
*
* @param gettername the getter name
* @return the property name equivalent
*/
private string getpropertyforgetter string gettername
if gettername    null    gettername length      0 return null
if gettername startswith
string prop   gettername substring 3
return convertpropertyname prop
else if gettername startswith
string prop   gettername substring 2
return convertpropertyname prop
return null
private string convertpropertyname string prop
if character isuppercase prop charat 0       prop length   > 1    character isuppercase prop charat 1
return prop
else if character isdigit prop charat 0
return prop
else
return character tolowercase prop charat 0      prop length   > 1 ? prop substring 1
/**
* returns a property name equivalent for the given setter name or null if it is not a getter
*
* @param settername the setter name
* @return the property name equivalent
*/
public string getpropertyforsetter string settername
if settername    null    settername length      0 return null
if settername startswith
string prop   settername substring 3
return convertpropertyname prop
return null
public boolean issetter string name  cachedclass args
if name    null    name length      0    args    null return false
if name startswith
if args length    1  return false
name   name substring 3
if name length   > 0    character isuppercase name charat 0    return true
return false
public callsite createpojocallsite callsite site  object receiver  object args
if  invokemethodmethod    null
return new pojometaclasssite site  this
return super createpojocallsite site  receiver  args
public callsite createstaticsite callsite site  object args
if invokestaticmethodmethod    null
return new staticmetaclasssite site  this
return super createstaticsite site  args
public callsite createpogocallsite callsite site  object args
if  invokemethodmethod    null
return new pogometaclasssite site  this
return super createpogocallsite site  args
public callsite createpogocallcurrentsite callsite site  class sender  string name  object args
if  invokemethodmethod    null
return new pogometaclasssite site  this
return super createpogocallcurrentsite site  sender  args
public callsite createconstructorsite callsite site  object args
class params   metaclasshelper converttotypearray args
metamethod method   pickmethod groovy_constructor  params
if method  null    method getparametertypes   length    args length
return new constructormetamethodsite site  this  method  params
return super createconstructorsite site  args