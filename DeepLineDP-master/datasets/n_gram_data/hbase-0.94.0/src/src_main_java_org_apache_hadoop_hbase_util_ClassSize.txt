/**
* copyright 2010 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase util
import org apache commons logging log
import org apache commons logging logfactory
import java lang reflect field
import java lang reflect modifier
/**
* class for determining the "size" of a class, an attempt to calculate the
* actual bytes that an object of this class will occupy in memory
*
* the core of this class is taken from the derby project
*/
public class classsize
static final log log   logfactory getlog classsize class
private static int nrofrefsperobj   2
/** array overhead */
public static final int array
/** overhead for arraylist(0) */
public static final int arraylist
/** overhead for bytebuffer */
public static final int byte_buffer
/** overhead for an integer */
public static final int integer
/** overhead for entry in map */
public static final int map_entry
/** object overhead is minimum 2 * reference size (8 bytes on 64-bit) */
public static final int object
/** reference size is 8 bytes on 64-bit, 4 bytes on 32-bit */
public static final int reference
/** string overhead */
public static final int string
/** overhead for treemap */
public static final int treemap
/** overhead for concurrenthashmap */
public static final int concurrent_hashmap
/** overhead for concurrenthashmap.entry */
public static final int concurrent_hashmap_entry
/** overhead for concurrenthashmap.segment */
public static final int concurrent_hashmap_segment
/** overhead for concurrentskiplistmap */
public static final int concurrent_skiplistmap
/** overhead for concurrentskiplistmap entry */
public static final int concurrent_skiplistmap_entry
/** overhead for reentrantreadwritelock */
public static final int reentrant_lock
/** overhead for atomiclong */
public static final int atomic_long
/** overhead for atomicinteger */
public static final int atomic_integer
/** overhead for atomicboolean */
public static final int atomic_boolean
/** overhead for copyonwritearrayset */
public static final int copyonwrite_arrayset
/** overhead for copyonwritearraylist */
public static final int copyonwrite_arraylist
/**
* method for reading the arc settings and setting overheads according
* to 32-bit or 64-bit architecture.
*/
static
//default value is set to 8, covering the case when arcmodel is unknown
if  is32bitjvm
reference   4
else
reference   8
object   2   reference
array   align 3   reference
arraylist   align object   align reference    align array
2   bytes sizeof_int
//noinspection pointlessarithmeticexpression
byte_buffer   align object   align reference    align array
5   bytes sizeof_int
3   bytes sizeof_boolean    bytes sizeof_long
integer   align object   bytes sizeof_int
map_entry   align object   5   reference   bytes sizeof_boolean
treemap   align object    2   bytes sizeof_int    align 7   reference
string   align object   array   reference   3   bytes sizeof_int
concurrent_hashmap   align  2   bytes sizeof_int    array
6   reference    object
concurrent_hashmap_entry   align reference   object    3   reference
2   bytes sizeof_int
concurrent_hashmap_segment   align reference   object
3   bytes sizeof_int    bytes sizeof_float   array
concurrent_skiplistmap   align bytes sizeof_int   object    8   reference
concurrent_skiplistmap_entry   align
align object    3   reference        one node per entry
align  object    3   reference   2       one index per two entries
reentrant_lock   align object    3   reference
atomic_long   align object   bytes sizeof_long
atomic_integer   align object   bytes sizeof_int
atomic_boolean   align object   bytes sizeof_boolean
copyonwrite_arrayset   align object   reference
copyonwrite_arraylist   align object    2   reference    array
/**
* the estimate of the size of a class instance depends on whether the jvm
* uses 32 or 64 bit addresses, that is it depends on the size of an object
* reference. it is a linear function of the size of a reference, e.g.
* 24 + 5*r where r is the size of a reference (usually 4 or 8 bytes).
*
* this method returns the coefficients of the linear function, e.g. {24, 5}
* in the above example.
*
* @param cl a class whose instance size is to be estimated
* @param debug debug flag
* @return an array of 3 integers. the first integer is the size of the
* primitives, the second the number of arrays and the third the number of
* references.
*/
@suppresswarnings
private static int  getsizecoefficients class cl  boolean debug
int primitives   0
int arrays   0
//the number of references that a new object takes
int references   nrofrefsperobj
int index   0
for     null    cl  cl   cl getsuperclass
field field   cl getdeclaredfields
if  null    field
for  field afield   field
if  modifier isstatic afield getmodifiers     continue
class fieldclass   afield gettype
if  fieldclass isarray
arrays
references
else if   fieldclass isprimitive
references
else     is simple primitive
string name   fieldclass getname
if  name equals       name equals
primitives    bytes sizeof_int
else if  name equals       name equals
primitives    bytes sizeof_long
else if  name equals       name equals
primitives    bytes sizeof_boolean
else if  name equals       name equals
primitives    bytes sizeof_short
else if  name equals       name equals
primitives    bytes sizeof_byte
else if  name equals       name equals
primitives    bytes sizeof_char
else if  name equals       name equals
primitives    bytes sizeof_float
else if  name equals       name equals
primitives    bytes sizeof_double
if  debug
if  log isdebugenabled
// write out region name as string and its encoded name.
log debug     index       afield getname         afield gettype
index
return new int   primitives  arrays  references
/**
* estimate the static space taken up by a class instance given the
* coefficients returned by getsizecoefficients.
*
* @param coeff the coefficients
*
* @param debug debug flag
* @return the size estimate, in bytes
*/
private static long estimatebasefromcoefficients int  coeff  boolean debug
long prealign_size   coeff   align coeff   array    coeff   reference
// round up to a multiple of 8
long size   align prealign_size
if debug
if  log isdebugenabled
// write out region name as string and its encoded name.
log debug     coeff       coeff
nrofrefsperobj
coeff       reference
size       prealign_size
return size
/**
* estimate the static space taken up by the fields of a class. this includes
* the space taken up by by references (the pointer) but not by the referenced
* object. so the estimated size of an array field does not depend on the size
* of the array. similarly the size of an object (reference) field does not
* depend on the object.
*
* @param cl class
* @param debug debug flag
* @return the size estimate in bytes.
*/
@suppresswarnings
public static long estimatebase class cl  boolean debug
return estimatebasefromcoefficients  getsizecoefficients cl  debug   debug
/**
* aligns a number to 8.
* @param num number to align to 8
* @return smallest number >= input that is a multiple of 8
*/
public static int align int num
return  int  align  long num
/**
* aligns a number to 8.
* @param num number to align to 8
* @return smallest number >= input that is a multiple of 8
*/
public static long align long num
//the 7 comes from that the alignsize is 8 which is the number of bytes
//stored and sent together
return    num   7  >> 3  << 3
/**
* determines if we are running in a 32-bit jvm. some unit tests need to
* know this too.
*/
public static boolean is32bitjvm
return system getproperty    equals