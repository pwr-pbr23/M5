/*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase zookeeper
import java util concurrent atomic atomicboolean
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop hbase stoppable
import org apache hadoop hbase util bytes
import org apache zookeeper keeperexception
/**
* handles coordination of a single "leader" instance among many possible
* candidates.  the first {@link zkleadermanager} to successfully create
* the given znode becomes the leader, allowing the instance to continue
* with whatever processing must be protected.  other {@link zkleadermanager}
* instances will wait to be notified of changes to the leader znode.
* if the current master instance fails, the ephemeral leader znode will
* be removed, and all waiting instances will be notified, with the race
* to claim the leader znode beginning all over again.
*/
public class zkleadermanager extends zookeeperlistener
private static log log   logfactory getlog zkleadermanager class
private final atomicboolean leaderexists   new atomicboolean
private string leaderznode
private byte nodeid
private stoppable candidate
public zkleadermanager zookeeperwatcher watcher  string leaderznode
byte identifier  stoppable candidate
super watcher
this leaderznode   leaderznode
this nodeid   identifier
this candidate   candidate
public void start
try
watcher registerlistener this
string parent   zkutil getparent leaderznode
if  zkutil checkexists watcher  parent  < 0
zkutil createwithparents watcher  parent
catch  keeperexception ke
watcher abort    ke
candidate stop   ke getmessage
@override
public void nodecreated string path
if  leaderznode equals path      candidate isstopped
handleleaderchange
@override
public void nodedeleted string path
if  leaderznode equals path      candidate isstopped
handleleaderchange
private void handleleaderchange
try
synchronized leaderexists
if  zkutil watchandcheckexists watcher  leaderznode
log info   leaderznode
leaderexists set true
else
log info
leaderexists set false
leaderexists notifyall
catch  keeperexception ke
watcher abort    ke
candidate stop   ke getmessage
/**
* blocks until this instance has claimed the leader znode in zookeeper
*/
public void waittobecomeleader
while   candidate isstopped
try
if  zkutil createephemeralnodeandwatch watcher  leaderznode  nodeid
// claimed the leader znode
leaderexists set true
if  log isdebugenabled
log debug
bytes tostringbinary nodeid
return
// if claiming the node failed, there should be another existing node
byte currentid   zkutil getdataandwatch watcher  leaderznode
if  currentid    null    bytes equals currentid  nodeid
// claimed with our id, but we didn't grab it, possibly restarted?
log info
bytes tostringbinary nodeid
zkutil deletenode watcher  leaderznode
leaderexists set false
else
log info   bytes tostringbinary nodeid
leaderexists set true
catch  keeperexception ke
watcher abort    ke
candidate stop   ke getmessage
return
// wait for next chance
synchronized leaderexists
while  leaderexists get       candidate isstopped
try
leaderexists wait
catch  interruptedexception ie
log debug    ie
/**
* removes the leader znode, if it is currently claimed by this instance.
*/
public void stepdownasleader
try
synchronized leaderexists
if   leaderexists get
return
byte leaderid   zkutil getdata watcher  leaderznode
if  leaderid    null    bytes equals nodeid  leaderid
log info
zkutil deletenodefailsilent watcher  leaderznode
leaderexists set false
else
log info
catch  keeperexception ke
watcher abort    ke
candidate stop
ke getmessage
public boolean hasleader
return leaderexists get