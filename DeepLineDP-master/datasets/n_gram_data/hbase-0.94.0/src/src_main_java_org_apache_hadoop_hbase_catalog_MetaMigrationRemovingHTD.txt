/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase catalog
import java io ioexception
import java util hashset
import java util list
import java util set
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop hbase hconstants
import org apache hadoop hbase hregioninfo
import org apache hadoop hbase htabledescriptor
import org apache hadoop hbase catalog metareader visitor
import org apache hadoop hbase client put
import org apache hadoop hbase client result
import org apache hadoop hbase master masterservices
import org apache hadoop hbase migration hregioninfo090x
import org apache hadoop hbase util bytes
import org apache hadoop hbase util writables
/**
* tools to help with migration of meta tables so they no longer host
* instances of htabledescriptor.
* @deprecated used migration from 0.90 to 0.92 so will be going away in next
* release
*/
public class metamigrationremovinghtd
private static final log log   logfactory getlog metamigrationremovinghtd class
/**
* update legacy meta rows, removing htd from hri.
* @param masterservices
* @return list of table descriptors.
* @throws ioexception
*/
public static set<htabledescriptor> updatemetawithnewregioninfo
final masterservices masterservices
throws ioexception
migratingvisitor v   new migratingvisitor masterservices
metareader fullscan masterservices getcatalogtracker    v
updaterootwithmetamigrationstatus masterservices getcatalogtracker
return v htds
/**
* update the root with new hri. (hri with no htd)
* @param masterservices
* @return list of table descriptors
* @throws ioexception
*/
static set<htabledescriptor> updaterootwithnewregioninfo
final masterservices masterservices
throws ioexception
migratingvisitor v   new migratingvisitor masterservices
metareader fullscan masterservices getcatalogtracker    v  null  true
return v htds
/**
* meta visitor that migrates the info:regioninfo as it visits.
*/
static class migratingvisitor implements visitor
private final masterservices services
final set<htabledescriptor> htds   new hashset<htabledescriptor>
migratingvisitor final masterservices services
this services   services
@override
public boolean visit result r  throws ioexception
if  r     null    r isempty    return true
// check info:regioninfo, info:splita, and info:splitb.  make sure all
// have migrated hregioninfos... that there are no leftover 090 version
// hregioninfos.
byte  hribytes   getbytes r  hconstants regioninfo_qualifier
// presumes that an edit updating all three cells either succeeds or
// doesn't -- that we don't have case of info:regioninfo migrated but not
// info:splita.
if  ismigrated hribytes   return true
// ok. need to migrate this row in meta.
hregioninfo090x hri090   gethregioninfo090x hribytes
htabledescriptor htd   hri090 gettabledesc
if  htd    null
log warn     hri090 tostring
return true
if   this htds contains htd
// if first time we are adding a table, then write it out to fs.
// presumes that first region in table has the table's schema which
// might not be too bad of a presumption since it'll be first region
// 'altered'
this services getmasterfilesystem   createtabledescriptor htd
this htds add htd
// this will 'migrate' the hregioninfo from 090 version to 092.
hregioninfo hri   new hregioninfo hri090
// now make a put to write back to meta.
put p   new put hri getregionname
p add hconstants catalog_family  hconstants regioninfo_qualifier
writables getbytes hri
// now check info:splita and info:splitb if present.  migrate these too.
checksplit r  p  hconstants splita_qualifier
checksplit r  p  hconstants splitb_qualifier
// below we fake out puttocatalogtable
metaeditor puttocatalogtable this services getcatalogtracker    p
log info     bytes tostring p getrow
return true
static void checksplit final result r  final put p  final byte  which
throws ioexception
byte  hrisplitbytes   getbytes r  which
if   ismigrated hrisplitbytes
// this will convert the hri from 090 to 092 hri.
hregioninfo hri   writables gethregioninfo hrisplitbytes
p add hconstants catalog_family  which  writables getbytes hri
/**
* @param r result to dig in.
* @param qualifier qualifier to look at in the passed <code>r</code>.
* @return bytes for an hregioninfo or null if no bytes or empty bytes found.
*/
static byte  getbytes final result r  final byte  qualifier
byte  hribytes   r getvalue hconstants catalog_family  qualifier
if  hribytes    null    hribytes length <  0  return null
return hribytes
/**
* @param r result to look in.
* @param qualifier what to look at in the passed result.
* @return either a 090 vintage hregioninfo or null if no hregioninfo or
* the hregioninfo is up to date and not in need of migration.
* @throws ioexception
*/
static hregioninfo090x get090hri final result r  final byte  qualifier
throws ioexception
byte  hribytes   r getvalue hconstants catalog_family  qualifier
if  hribytes    null    hribytes length <  0  return null
if  ismigrated hribytes   return null
return gethregioninfo090x hribytes
static boolean ismigrated final byte  hribytes
if  hribytes    null    hribytes length <  0  return true
// else, what version this hregioninfo instance is at.  the first byte
// is the version byte in a serialized hregioninfo.  if its same as our
// current hri, then nothing to do.
if  hribytes    hregioninfo version  return true
if  hribytes    hregioninfo version_pre_092  return false
// unknown version.  return true that its 'migrated' but log warning.
// should 'never' happen.
assert false      bytes tostringbinary hribytes
return true
/**
* migrate root and meta to newer version. this updates the meta and root
* and removes the htd from hri.
* @param masterservices
* @throws ioexception
*/
public static void migraterootandmeta final masterservices masterservices
throws ioexception
updaterootwithnewregioninfo masterservices
updatemetawithnewregioninfo masterservices
/**
* update the version flag in -root-.
* @param catalogtracker
* @throws ioexception
*/
public static void updaterootwithmetamigrationstatus final catalogtracker catalogtracker
throws ioexception
put p   new put hregioninfo first_meta_regioninfo getregionname
metaeditor puttoroottable catalogtracker  setmetaversion p
log info     hconstants meta_version
static put setmetaversion final put p
p add hconstants catalog_family  hconstants meta_version_qualifier
bytes tobytes hconstants meta_version
return p
/**
* @return true if the meta table has been migrated.
* @throws ioexception
*/
// public because used in tests
public static boolean ismetahriupdated final masterservices services
throws ioexception
list<result> results   metareader fullscanofroot services getcatalogtracker
if  results    null    results isempty
log info
return false
// presume only the one result because we only support on meta region.
result r   results get 0
short version   getmetaversion r
boolean migrated   version >  hconstants meta_version
log info     version       migrated
return migrated
/**
* @param r result to look at
* @return current meta table version or -1 if no version found.
*/
static short getmetaversion final result r
byte  value   r getvalue hconstants catalog_family
hconstants meta_version_qualifier
return value    null    value length <  0?  1  bytes toshort value
/**
* @return true if migrated.
* @throws ioexception
*/
public static boolean updatemetawithnewhri final masterservices services
throws ioexception
if  ismetahriupdated services
log info
return true
log info
try
migraterootandmeta services
log info
return true
catch  ioexception e
throw new runtimeexception
/**
* get hregioninfoformigration serialized from bytes.
* @param bytes serialized bytes
* @return an instance of a 090 hri or null if we failed deserialize
*/
public static hregioninfo090x gethregioninfo090x final byte  bytes
if  bytes    null    bytes length    0  return null
hregioninfo090x hri   null
try
hri    hregioninfo090x writables getwritable bytes  new hregioninfo090x
catch  ioexception ioe
log warn
bytes tostringbinary bytes   ioe
return hri