/*
* copyright 2010 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase filter
import java io datainput
import java io dataoutput
import java io ioexception
import java util arraylist
import org apache hadoop hbase keyvalue
import com google common base preconditions
/**
* a filter, based on the columncountgetfilter, takes two arguments: limit and offset.
* this filter can be used for row-based indexing, where references to other tables are stored across many columns,
* in order to efficient lookups and paginated results for end users.
*/
public class columnpaginationfilter extends filterbase
private int limit   0
private int offset   0
private int count   0
/**
* used during serialization. do not use.
*/
public columnpaginationfilter
super
public columnpaginationfilter final int limit  final int offset
preconditions checkargument limit >  0     limit
preconditions checkargument offset >  0     offset
this limit   limit
this offset   offset
/**
* @return limit
*/
public int getlimit
return limit
/**
* @return offset
*/
public int getoffset
return offset
@override
public returncode filterkeyvalue keyvalue v
if count >  offset   limit
return returncode next_row
returncode code   count < offset ? returncode skip   returncode include
count
return code
@override
public void reset
this count   0
public static filter createfilterfromarguments arraylist<byte > filterarguments
preconditions checkargument filterarguments size      2
filterarguments size
int limit   parsefilter convertbytearraytoint filterarguments get 0
int offset   parsefilter convertbytearraytoint filterarguments get 1
return new columnpaginationfilter limit  offset
public void readfields datainput in  throws ioexception
this limit   in readint
this offset   in readint
public void write dataoutput out  throws ioexception
out writeint this limit
out writeint this offset
@override
public string tostring
return string format    this getclass   getsimplename
this limit  this offset