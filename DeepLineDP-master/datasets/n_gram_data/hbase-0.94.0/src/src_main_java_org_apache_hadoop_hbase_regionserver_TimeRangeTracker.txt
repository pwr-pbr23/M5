/**
* copyright 2010 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase regionserver
import java io datainput
import java io dataoutput
import java io ioexception
import org apache hadoop hbase keyvalue
import org apache hadoop hbase keyvalue type
import org apache hadoop hbase io timerange
import org apache hadoop hbase util bytes
import org apache hadoop io writable
/**
* stores the minimum and maximum timestamp values (both are inclusive).
* can be used to find if any given time range overlaps with its time range
* memstores use this class to track its minimum and maximum timestamps.
* when writing storefiles, this information is stored in meta blocks and used
* at read time to match against the required timerange.
*/
public class timerangetracker implements writable
long minimumtimestamp    1
long maximumtimestamp    1
/**
* default constructor.
* initializes timerange to be null
*/
public timerangetracker
/**
* copy constructor
* @param trt source timerangetracker
*/
public timerangetracker final timerangetracker trt
this minimumtimestamp   trt getminimumtimestamp
this maximumtimestamp   trt getmaximumtimestamp
public timerangetracker long minimumtimestamp  long maximumtimestamp
this minimumtimestamp   minimumtimestamp
this maximumtimestamp   maximumtimestamp
/**
* update the current timestamprange to include the timestamp from keyvalue
* if the key is of type deletecolumn or deletefamily, it includes the
* entire time range from 0 to timestamp of the key.
* @param kv the keyvalue to include
*/
public void includetimestamp final keyvalue kv
includetimestamp kv gettimestamp
if  kv isdeletecolumnorfamily
includetimestamp 0
/**
* update the current timestamprange to include the timestamp from key.
* if the key is of type deletecolumn or deletefamily, it includes the
* entire time range from 0 to timestamp of the key.
* @param key
*/
public void includetimestamp final byte key
includetimestamp bytes tolong key key length keyvalue timestamp_type_size
int type   key
if  type    type deletecolumn getcode
type    type deletefamily getcode
includetimestamp 0
/**
* if required, update the current timestamprange to include timestamp
* @param timestamp the timestamp value to include
*/
private void includetimestamp final long timestamp
if  maximumtimestamp     1
minimumtimestamp   timestamp
maximumtimestamp   timestamp
else if  minimumtimestamp > timestamp
minimumtimestamp   timestamp
else if  maximumtimestamp < timestamp
maximumtimestamp   timestamp
return
/**
* check if the range has any overlap with timerange
* @param tr timerange
* @return true if there is overlap, false otherwise
*/
public boolean includestimerange final timerange tr
return  this minimumtimestamp < tr getmax
this maximumtimestamp >  tr getmin
/**
* @return the minimumtimestamp
*/
public long getminimumtimestamp
return minimumtimestamp
/**
* @return the maximumtimestamp
*/
public long getmaximumtimestamp
return maximumtimestamp
public void write final dataoutput out  throws ioexception
out writelong minimumtimestamp
out writelong maximumtimestamp
public void readfields final datainput in  throws ioexception
this minimumtimestamp   in readlong
this maximumtimestamp   in readlong
@override
public string tostring
return     minimumtimestamp       maximumtimestamp