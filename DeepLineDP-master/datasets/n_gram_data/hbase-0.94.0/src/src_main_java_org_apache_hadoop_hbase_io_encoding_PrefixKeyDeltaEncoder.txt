/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements. see the notice file distributed with this
* work for additional information regarding copyright ownership. the asf
* licenses this file to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
* http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis, without
* warranties or conditions of any kind, either express or implied. see the
* license for the specific language governing permissions and limitations
* under the license.
*/
package org apache hadoop hbase io encoding
import java io datainputstream
import java io dataoutputstream
import java io ioexception
import java nio bytebuffer
import org apache hadoop hbase keyvalue
import org apache hadoop hbase util bytebufferutils
import org apache hadoop hbase util bytes
import org apache hadoop io rawcomparator
/**
* compress key by storing size of common prefix with previous keyvalue
* and storing raw size of rest.
*
* format:
* 1-5 bytes: compressed key length minus prefix (7-bit encoding)
* 1-5 bytes: compressed value length (7-bit encoding)
* 1-3 bytes: compressed length of common key prefix
* ... bytes: rest of key (including timestamp)
* ... bytes: value
*
* in a worst case compressed keyvalue will be three bytes longer than original.
*
*/
public class prefixkeydeltaencoder extends buffereddatablockencoder
private int addkv int prevkeyoffset  dataoutputstream out
bytebuffer in  int prevkeylength  throws ioexception
int keylength   in getint
int valuelength   in getint
if  prevkeyoffset     1
// copy the key, there is no common prefix with none
bytebufferutils putcompressedint out  keylength
bytebufferutils putcompressedint out  valuelength
bytebufferutils putcompressedint out  0
bytebufferutils movebuffertostream out  in  keylength   valuelength
else
// find a common prefix and skip it
int common   bytebufferutils findcommonprefix
in  prevkeyoffset   keyvalue row_offset
in position
math min prevkeylength  keylength
bytebufferutils putcompressedint out  keylength   common
bytebufferutils putcompressedint out  valuelength
bytebufferutils putcompressedint out  common
bytebufferutils skip in  common
bytebufferutils movebuffertostream out  in  keylength   common
valuelength
return keylength
@override
public void compresskeyvalues dataoutputstream writehere
bytebuffer in  boolean includesmemstorets  throws ioexception
in rewind
bytebufferutils putint writehere  in limit
int prevoffset    1
int offset   0
int keylength   0
while  in hasremaining
offset   in position
keylength   addkv prevoffset  writehere  in  keylength
afterencodingkeyvalue in  writehere  includesmemstorets
prevoffset   offset
@override
public bytebuffer uncompresskeyvalues datainputstream source
int allocheaderlength  int skiplastbytes  boolean includesmemstorets
throws ioexception
int decompressedsize   source readint
bytebuffer buffer   bytebuffer allocate decompressedsize
allocheaderlength
buffer position allocheaderlength
int prevkeyoffset   0
while  source available   > skiplastbytes
prevkeyoffset   uncompresskeyvalue source  buffer  prevkeyoffset
afterdecodingkeyvalue source  buffer  includesmemstorets
if  source available      skiplastbytes
throw new illegalstateexception
buffer limit buffer position
return buffer
private int uncompresskeyvalue datainputstream source  bytebuffer buffer
int prevkeyoffset
throws ioexception  encoderbuffertoosmallexception
int keylength   bytebufferutils readcompressedint source
int valuelength   bytebufferutils readcompressedint source
int commonlength   bytebufferutils readcompressedint source
int keyoffset
keylength    commonlength
bytebufferutils ensurespace buffer  keylength   valuelength
keyvalue row_offset
buffer putint keylength
buffer putint valuelength
// copy the prefix
if  commonlength > 0
keyoffset   buffer position
bytebufferutils copyfrombuffertobuffer buffer  buffer  prevkeyoffset
commonlength
else
keyoffset   buffer position
// copy rest of the key and value
int len   keylength   commonlength   valuelength
bytebufferutils copyfromstreamtobuffer buffer  source  len
return keyoffset
@override
public bytebuffer getfirstkeyinblock bytebuffer block
block mark
block position bytes sizeof_int
int keylength   bytebufferutils readcompressedint block
bytebufferutils readcompressedint block
int commonlength   bytebufferutils readcompressedint block
if  commonlength    0
throw new assertionerror
commonlength
int pos   block position
block reset
return bytebuffer wrap block array    pos  keylength  slice
@override
public string tostring
return prefixkeydeltaencoder class getsimplename
@override
public encodedseeker createseeker rawcomparator<byte> comparator
final boolean includesmemstorets
return new bufferedencodedseeker<seekerstate> comparator
@override
protected void decodenext
current keylength   bytebufferutils readcompressedint currentbuffer
current valuelength   bytebufferutils readcompressedint currentbuffer
current lastcommonprefix
bytebufferutils readcompressedint currentbuffer
current keylength    current lastcommonprefix
current ensurespaceforkey
currentbuffer get current keybuffer  current lastcommonprefix
current keylength   current lastcommonprefix
current valueoffset   currentbuffer position
bytebufferutils skip currentbuffer  current valuelength
if  includesmemstorets
current memstorets   bytebufferutils readvlong currentbuffer
else
current memstorets   0
current nextkvoffset   currentbuffer position
@override
protected void decodefirst
bytebufferutils skip currentbuffer  bytes sizeof_int
decodenext