/**
* copyright 2010 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase util
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop hbase stoppable
/**
* sleeper for current thread.
* sleeps for passed period.  also checks passed boolean and if interrupted,
* will return if the flag is set (rather than go back to sleep until its
* sleep time is up).
*/
public class sleeper
private final log log   logfactory getlog this getclass   getname
private final int period
private final stoppable stopper
private static final long minimal_delta_for_logging   10000
private final object sleeplock   new object
private boolean triggerwake   false
/**
* @param sleep sleep time in milliseconds
* @param stopper when {@link stoppable#isstopped()} is true, this thread will
* cleanup and exit cleanly.
*/
public sleeper final int sleep  final stoppable stopper
this period   sleep
this stopper   stopper
/**
* sleep for period.
*/
public void sleep
sleep system currenttimemillis
/**
* if currently asleep, stops sleeping; if not asleep, will skip the next
* sleep cycle.
*/
public void skipsleepcycle
synchronized  sleeplock
triggerwake   true
sleeplock notifyall
/**
* sleep for period adjusted by passed <code>starttime<code>
* @param starttime time some task started previous to now.  time to sleep
* will be docked current time minus passed <code>starttime<code>.
*/
public void sleep final long starttime
if  this stopper isstopped
return
long now   system currenttimemillis
long waittime   this period    now   starttime
if  waittime > this period
log warn     this period
system currenttimemillis
starttime
waittime   this period
while  waittime > 0
long woke    1
try
synchronized  sleeplock
if  triggerwake  break
sleeplock wait waittime
woke   system currenttimemillis
long slept   woke   now
if  slept   this period > minimal_delta_for_logging
log warn     slept       this period
catch interruptedexception iex
// we we interrupted because we're meant to stop?  if not, just
// continue ignoring the interruption
if  this stopper isstopped
return
// recalculate waittime.
woke    woke     1 ? system currenttimemillis    woke
waittime   this period    woke   starttime
triggerwake   false