/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase coprocessor
import java io ioexception
import java util list
import org apache hadoop hbase client mutation
import org apache hadoop hbase ipc coprocessorprotocol
import org apache hadoop hbase regionserver hregion
/**
* defines a protocol to perform multi row transactions.
* see {@link multirowmutationendpoint} for the implementation.
* </br>
* see
* {@link hregion#mutaterowswithlocks(java.util.collection, java.util.collection)}
* for details and limitations.
* </br>
* example:
* <code><pre>
* list<mutation> mutations = ...;
* put p1 = new put(row1);
* put p2 = new put(row2);
* ...
* mutations.add(p1);
* mutations.add(p2);
* multirowmutationprotocol mrop = t.coprocessorproxy(
*   multirowmutationprotocol.class, row1);
* mrop.mutaterows(mutations);
* </pre></code>
*/
public interface multirowmutationprotocol extends coprocessorprotocol
public void mutaterows list<mutation> mutations  throws ioexception