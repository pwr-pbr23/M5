/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements. see the notice file distributed with this
* work for additional information regarding copyright ownership. the asf
* licenses this file to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
* http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis, without
* warranties or conditions of any kind, either express or implied. see the
* license for the specific language governing permissions and limitations under
* the license.
*/
package org apache hadoop hbase io hfile
import java io ioexception
import java io inputstream
import org apache hadoop fs fsdatainputstream
/**
* boundedrangefileinputstream abstracts a contiguous region of a hadoop
* fsdatainputstream as a regular input stream. one can create multiple
* boundedrangefileinputstream on top of the same fsdatainputstream and they
* would not interfere with each other.
* copied from hadoop-335 tfile.
*/
class boundedrangefileinputstream  extends inputstream
private fsdatainputstream in
private long pos
private long end
private long mark
private final byte onebyte   new byte
private final boolean pread
/**
* constructor
*
* @param in
*          the fsdatainputstream we connect to.
* @param offset
*          beginning offset of the region.
* @param length
*          length of the region.
* @param pread if true, use filesystem positional read rather than seek+read.
*
*          the actual length of the region may be smaller if (off_begin +
*          length) goes beyond the end of fs input stream.
*/
public boundedrangefileinputstream fsdatainputstream in  long offset
long length  final boolean pread
if  offset < 0    length < 0
throw new indexoutofboundsexception     offset
length
this in   in
this pos   offset
this end   offset   length
this mark    1
this pread   pread
@override
public int available   throws ioexception
int avail   in available
if  pos   avail > end
avail    int   end   pos
return avail
@override
public int read   throws ioexception
int ret   read onebyte
if  ret    1  return onebyte   0xff
return  1
@override
public int read byte b  throws ioexception
return read b  0  b length
@override
public int read byte b  int off  int len  throws ioexception
if   off   len    off   len     b length    off   len    < 0
throw new indexoutofboundsexception
int n    int  math min integer max_value  math min len   end   pos
if  n    0  return  1
int ret   0
if  this pread
ret   in read pos  b  off  n
else
synchronized  in
in seek pos
ret   in read b  off  n
if  ret < 0
end   pos
return  1
pos    ret
return ret
@override
/*
* we may skip beyond the end of the file.
*/
public long skip long n  throws ioexception
long len   math min n  end   pos
pos    len
return len
@override
public void mark int readlimit
mark   pos
@override
public void reset   throws ioexception
if  mark < 0  throw new ioexception
pos   mark
@override
public boolean marksupported
return true
@override
public void close
// invalidate the state of the stream.
in   null
pos   end
mark    1