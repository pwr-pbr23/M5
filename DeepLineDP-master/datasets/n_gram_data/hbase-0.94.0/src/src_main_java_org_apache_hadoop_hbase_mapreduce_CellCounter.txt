/**
* copyright 2011 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase mapreduce
import java io ioexception
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop conf configuration
import org apache hadoop hbase hbaseconfiguration
import org apache hadoop hbase keyvalue
import org apache hadoop hbase client result
import org apache hadoop hbase client scan
import org apache hadoop hbase filter
import org apache hadoop hbase io immutablebyteswritable
import org apache hadoop hbase util bytes
import org apache hadoop mapreduce job
import org apache hadoop mapreduce lib output nulloutputformat
import org apache hadoop util genericoptionsparser
import org apache hadoop mapreduce lib output fileoutputformat
import org apache hadoop mapreduce lib output textoutputformat
import org apache hadoop fs path
import org apache hadoop mapreduce lib reduce intsumreducer
import org apache hadoop io intwritable
import org apache hadoop mapreduce reducer
import org apache hadoop io text
/**
* a job with a a map and reduce phase to count cells in a table.
* the counter lists the following stats for a given table:
* <pre>
* 1. total number of rows in the table
* 2. total number of cfs across all rows
* 3. total qualifiers across all rows
* 4. total occurrence of each cf
* 5. total occurrence  of each qualifier
* 6. total number of versions of each qualifier.
* </pre>
*
* the cellcounter takes two optional parameters one to use a user
* supplied row/family/qualifier string to use in the report and
* second a regex based or prefix based row filter to restrict the
* count operation to a limited subset of rows from the table.
*/
public class cellcounter
private static final log log
logfactory getlog cellcounter class getname
/**
* name of this 'program'.
*/
static final string name
/**
* mapper that runs the count.
*/
static class cellcountermapper
extends tablemapper<text  intwritable>
/**
* counter enumeration to count the actual rows.
*/
public static enum counters
rows
/**
* maps the data.
*
* @param row     the current table row key.
* @param values  the columns.
* @param context the current context.
* @throws ioexception when something is broken with the data.
* @see org.apache.hadoop.mapreduce.mapper#map(keyin, valuein,
*      org.apache.hadoop.mapreduce.mapper.context)
*/
@override
public void map immutablebyteswritable row  result values
context context
throws ioexception
string currentfamilyname   null
string currentqualifiername   null
string currentrowkey   null
configuration config   context getconfiguration
string separator   config get
try
if  values    null
context getcounter counters rows  increment 1
context write new text     new intwritable 1
for  keyvalue value   values list
currentrowkey   bytes tostringbinary value getrow
string thisrowfamilyname   bytes tostringbinary value getfamily
if  thisrowfamilyname    null
thisrowfamilyname equals currentfamilyname
currentfamilyname   thisrowfamilyname
context getcounter    thisrowfamilyname  increment 1
context write new text
new intwritable 1
context write new text thisrowfamilyname   new intwritable 1
string thisrowqualifiername
thisrowfamilyname   separator   bytes tostringbinary value getqualifier
if  thisrowqualifiername    null
thisrowqualifiername equals currentqualifiername
currentqualifiername   thisrowqualifiername
context getcounter    thisrowqualifiername  increment 1
context write new text
new intwritable 1
context write new text thisrowqualifiername   new intwritable 1
// intialize versions
context getcounter    currentrowkey   separator
thisrowqualifiername  increment 1
context write new text currentrowkey   separator   thisrowqualifiername
new intwritable 1
else
// increment versions
currentqualifiername   thisrowqualifiername
context getcounter    currentrowkey   separator
thisrowqualifiername  increment 1
context write new text currentrowkey   separator   thisrowqualifiername
new intwritable 1
catch  interruptedexception e
e printstacktrace
static class intsumreducer<key> extends reducer<key  intwritable
key  intwritable>
private intwritable result   new intwritable
public void reduce key key  iterable<intwritable> values
context context
throws ioexception  interruptedexception
int sum   0
for  intwritable val   values
sum    val get
result set sum
context write key  result
/**
* sets up the actual job.
*
* @param conf the current configuration.
* @param args the command line parameters.
* @return the newly created job.
* @throws ioexception when setting up the job fails.
*/
public static job createsubmittablejob configuration conf  string args
throws ioexception
string tablename   args
path outputdir   new path args
string reportseparatorstring    args length > 2  ? args
conf set    reportseparatorstring
job job   new job conf  name       tablename
job setjarbyclass cellcounter class
scan scan   getconfiguredscanforjob conf  args
tablemapreduceutil inittablemapperjob tablename  scan
cellcountermapper class  immutablebyteswritable class  result class  job
job setnumreducetasks 1
job setmapoutputkeyclass text class
job setmapoutputvalueclass intwritable class
job setoutputformatclass textoutputformat class
job setoutputkeyclass text class
job setoutputvalueclass intwritable class
fileoutputformat setoutputpath job  outputdir
job setreducerclass intsumreducer class
return job
private static scan getconfiguredscanforjob configuration conf  string args  throws ioexception
scan s   new scan
// set scan versions
s setmaxversions integer max_value
s setcacheblocks false
// set scan column family
if  conf get tableinputformat scan_column_family     null
s addfamily bytes tobytes conf get tableinputformat scan_column_family
// set rowfilter or prefix filter if applicable.
filter rowfilter   getrowfilter args
if  rowfilter   null
log info
s setfilter rowfilter
return s
private static filter getrowfilter string args
filter rowfilter   null
string filtercriteria    args length > 3  ? args  null
if  filtercriteria    null  return null
if  filtercriteria startswith
string regexpattern   filtercriteria substring 1  filtercriteria length
rowfilter   new rowfilter comparefilter compareop equal  new regexstringcomparator regexpattern
else
rowfilter   new prefixfilter bytes tobytes filtercriteria
return rowfilter
/**
* main entry point.
*
* @param args the command line parameters.
* @throws exception when running the job fails.
*/
public static void main string args  throws exception
configuration conf   hbaseconfiguration create
string otherargs   new genericoptionsparser conf  args  getremainingargs
if  otherargs length < 1
system err println     args length
system err println
system err println
system err println
system err println
system err println     tableinputformat scan_column_family
system err println
system err println
system exit  1
job job   createsubmittablejob conf  otherargs
system exit job waitforcompletion true  ? 0   1