/**
* copyright 2010 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase zookeeper
import java util list
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop hbase hregioninfo
import org apache hadoop hbase servername
import org apache hadoop hbase executor regiontransitiondata
import org apache hadoop hbase executor eventhandler eventtype
import org apache zookeeper asynccallback
import org apache zookeeper keeperexception
import org apache zookeeper keeperexception code
import org apache zookeeper keeperexception nonodeexception
import org apache zookeeper keeperexception nodeexistsexception
import org apache zookeeper data stat
/**
* utility class for doing region assignment in zookeeper.  this class extends
* stuff done in {@link zkutil} to cover specific assignment operations.
* <p>
* contains only static methods and constants.
* <p>
* used by both the master and regionserver.
* <p>
* all valid transitions outlined below:
* <p>
* <b>master</b>
* <ol>
*   <li>
*     master creates an unassigned node as offline.
*     - cluster startup and table enabling.
*   </li>
*   <li>
*     master forces an existing unassigned node to offline.
*     - regionserver failure.
*     - allows transitions from all states to offline.
*   </li>
*   <li>
*     master deletes an unassigned node that was in a opened state.
*     - normal region transitions.  besides cluster startup, no other deletions
*     of unassigned nodes is allowed.
*   </li>
*   <li>
*     master deletes all unassigned nodes regardless of state.
*     - cluster startup before any assignment happens.
*   </li>
* </ol>
* <p>
* <b>regionserver</b>
* <ol>
*   <li>
*     regionserver creates an unassigned node as closing.
*     - all region closes will do this in response to a close rpc from master.
*     - a node can never be transitioned to closing, only created.
*   </li>
*   <li>
*     regionserver transitions an unassigned node from closing to closed.
*     - normal region closes.  cas operation.
*   </li>
*   <li>
*     regionserver transitions an unassigned node from offline to opening.
*     - all region opens will do this in response to an open rpc from the master.
*     - normal region opens.  cas operation.
*   </li>
*   <li>
*     regionserver transitions an unassigned node from opening to opened.
*     - normal region opens.  cas operation.
*   </li>
* </ol>
*/
public class zkassign
private static final log log   logfactory getlog zkassign class
/**
* gets the full path node name for the unassigned node for the specified
* region.
* @param zkw zk reference
* @param regionname region name
* @return full path node name
*/
public static string getnodename zookeeperwatcher zkw  string regionname
return zkutil joinznode zkw assignmentznode  regionname
/**
* gets the region name from the full path node name of an unassigned node.
* @param path full zk path
* @return region name
*/
public static string getregionname zookeeperwatcher zkw  string path
return path substring zkw assignmentznode length   1
// master methods
/**
* creates a new unassigned node in the offline state for the specified region.
*
* <p>does not transition nodes from other states.  if a node already exists
* for this region, a {@link nodeexistsexception} will be thrown.
*
* <p>sets a watcher on the unassigned region node if the method is successful.
*
* <p>this method should only be used during cluster startup and the enabling
* of a table.
*
* @param zkw zk reference
* @param region region to be created as offline
* @param servername server event originates from
* @throws keeperexception if unexpected zookeeper exception
* @throws keeperexception.nodeexistsexception if node already exists
*/
public static void createnodeoffline zookeeperwatcher zkw  hregioninfo region
servername servername
throws keeperexception  keeperexception nodeexistsexception
createnodeoffline zkw  region  servername  eventtype m_zk_region_offline
public static void createnodeoffline zookeeperwatcher zkw  hregioninfo region
servername servername  final eventtype event
throws keeperexception  keeperexception nodeexistsexception
log debug zkw prefix
region getencodedname
regiontransitiondata data   new regiontransitiondata event
region getregionname    servername
string node   getnodename zkw  region getencodedname
zkutil createandwatch zkw  node  data getbytes
/**
* creates an unassigned node in the offline state for the specified region.
* <p>
* runs asynchronously.  depends on no pre-existing znode.
*
* <p>sets a watcher on the unassigned region node.
*
* @param zkw zk reference
* @param region region to be created as offline
* @param servername server event originates from
* @param cb
* @param ctx
* @throws keeperexception if unexpected zookeeper exception
* @throws keeperexception.nodeexistsexception if node already exists
*/
public static void asynccreatenodeoffline zookeeperwatcher zkw
hregioninfo region  servername servername
final asynccallback stringcallback cb  final object ctx
throws keeperexception
log debug zkw prefix
region getencodedname
regiontransitiondata data   new regiontransitiondata
eventtype m_zk_region_offline  region getregionname    servername
string node   getnodename zkw  region getencodedname
zkutil asynccreate zkw  node  data getbytes    cb  ctx
/**
* forces an existing unassigned node to the offline state for the specified
* region.
*
* <p>does not create a new node.  if a node does not already exist for this
* region, a {@link nonodeexception} will be thrown.
*
* <p>sets a watcher on the unassigned region node if the method is
* successful.
*
* <p>this method should only be used during recovery of regionserver failure.
*
* @param zkw zk reference
* @param region region to be forced as offline
* @param servername server event originates from
* @throws keeperexception if unexpected zookeeper exception
* @throws keeperexception.nonodeexception if node does not exist
*/
public static void forcenodeoffline zookeeperwatcher zkw  hregioninfo region
servername servername
throws keeperexception  keeperexception nonodeexception
log debug zkw prefix
region getencodedname
regiontransitiondata data   new regiontransitiondata
eventtype m_zk_region_offline  region getregionname    servername
string node   getnodename zkw  region getencodedname
zkutil setdata zkw  node  data getbytes
/**
* creates or force updates an unassigned node to the offline state for the
* specified region.
* <p>
* attempts to create the node but if it exists will force it to transition to
* and offline state.
*
* <p>sets a watcher on the unassigned region node if the method is
* successful.
*
* <p>this method should be used when assigning a region.
*
* @param zkw zk reference
* @param region region to be created as offline
* @param servername server event originates from
* @return the version of the znode created in offline state, -1 if
*         unsuccessful.
* @throws keeperexception if unexpected zookeeper exception
* @throws keeperexception.nodeexistsexception if node already exists
*/
public static int createorforcenodeoffline zookeeperwatcher zkw
hregioninfo region  servername servername  throws keeperexception
return createorforcenodeoffline zkw  region  servername  false  true
/**
* creates or force updates an unassigned node to the offline state for the
* specified region.
* <p>
* attempts to create the node but if it exists will force it to transition to
* and offline state.
* <p>
* sets a watcher on the unassigned region node if the method is successful.
*
* <p>
* this method should be used when assigning a region.
*
* @param zkw
*          zk reference
* @param region
*          region to be created as offline
* @param servername
*          server event originates from
* @param hijack
*          - true if to be hijacked and reassigned, false otherwise
* @param allowcreation
*          - true if the node has to be created newly, false otherwise
* @throws keeperexception
*           if unexpected zookeeper exception
* @return the version of the znode created in offline state, -1 if
*         unsuccessful.
* @throws keeperexception.nodeexistsexception
*           if node already exists
*/
public static int createorforcenodeoffline zookeeperwatcher zkw
hregioninfo region  servername servername
boolean hijack  boolean allowcreation
throws keeperexception
log debug zkw prefix
region getencodedname
regiontransitiondata data   new regiontransitiondata
eventtype m_zk_region_offline  region getregionname    servername
string node   getnodename zkw  region getencodedname
stat stat   new stat
zkw sync node
int version   zkutil checkexists zkw  node
if  version     1
// while trying to transit a node to offline that was in previously in
// opening state but before it could transit to offline state if rs had
// opened the region then the master deletes the assigned region znode.
// in that case the znode will not exist. so we should not
// create the znode again which will lead to double assignment.
if  hijack     allowcreation
return  1
return zkutil createandwatch zkw  node  data getbytes
else
regiontransitiondata curdatainznode   zkassign getdatanowatch zkw  region
getencodedname    stat
// do not move the node to offline if znode is in any of the following
// state.
// because these are already executed states.
if  hijack    null    curdatainznode
eventtype eventtype   curdatainznode geteventtype
if  eventtype equals eventtype m_zk_region_closing
eventtype equals eventtype rs_zk_region_closed
eventtype equals eventtype rs_zk_region_opened
return  1
boolean setdata   false
try
setdata   zkutil setdata zkw  node  data getbytes    version
// setdata throws keeperexception which aborts the master. so we are
// catching it here.
// if just before setting the znode to offline if the rs has made any
// change to the
// znode state then we need to return -1.
catch  keeperexception kpe
log info
return  1
if   setdata
return  1
else
// we successfully forced to offline, reset watch and handle if
// the state changed in between our set and the watch
regiontransitiondata curdata
zkassign getdata zkw  region getencodedname
if  curdata geteventtype      data geteventtype
// state changed, need to process
return  1
return stat getversion     1
/**
* deletes an existing unassigned node that is in the opened state for the
* specified region.
*
* <p>if a node does not already exist for this region, a
* {@link nonodeexception} will be thrown.
*
* <p>no watcher is set whether this succeeds or not.
*
* <p>returns false if the node was not in the proper state but did exist.
*
* <p>this method is used during normal region transitions when a region
* finishes successfully opening.  this is the master acknowledging completion
* of the specified regions transition.
*
* @param zkw zk reference
* @param regionname opened region to be deleted from zk
* @throws keeperexception if unexpected zookeeper exception
* @throws keeperexception.nonodeexception if node does not exist
*/
public static boolean deleteopenednode zookeeperwatcher zkw
string regionname
throws keeperexception  keeperexception nonodeexception
return deletenode zkw  regionname  eventtype rs_zk_region_opened
/**
* deletes an existing unassigned node that is in the offline state for the
* specified region.
*
* <p>if a node does not already exist for this region, a
* {@link nonodeexception} will be thrown.
*
* <p>no watcher is set whether this succeeds or not.
*
* <p>returns false if the node was not in the proper state but did exist.
*
* <p>this method is used during master failover when the regions on an rs
* that has died are all set to offline before being processed.
*
* @param zkw zk reference
* @param regionname closed region to be deleted from zk
* @throws keeperexception if unexpected zookeeper exception
* @throws keeperexception.nonodeexception if node does not exist
*/
public static boolean deleteofflinenode zookeeperwatcher zkw
string regionname
throws keeperexception  keeperexception nonodeexception
return deletenode zkw  regionname  eventtype m_zk_region_offline
/**
* deletes an existing unassigned node that is in the closed state for the
* specified region.
*
* <p>if a node does not already exist for this region, a
* {@link nonodeexception} will be thrown.
*
* <p>no watcher is set whether this succeeds or not.
*
* <p>returns false if the node was not in the proper state but did exist.
*
* <p>this method is used during table disables when a region finishes
* successfully closing.  this is the master acknowledging completion
* of the specified regions transition to being closed.
*
* @param zkw zk reference
* @param regionname closed region to be deleted from zk
* @throws keeperexception if unexpected zookeeper exception
* @throws keeperexception.nonodeexception if node does not exist
*/
public static boolean deleteclosednode zookeeperwatcher zkw
string regionname
throws keeperexception  keeperexception nonodeexception
return deletenode zkw  regionname  eventtype rs_zk_region_closed
/**
* deletes an existing unassigned node that is in the closing state for the
* specified region.
*
* <p>if a node does not already exist for this region, a
* {@link nonodeexception} will be thrown.
*
* <p>no watcher is set whether this succeeds or not.
*
* <p>returns false if the node was not in the proper state but did exist.
*
* <p>this method is used during table disables when a region finishes
* successfully closing.  this is the master acknowledging completion
* of the specified regions transition to being closed.
*
* @param zkw zk reference
* @param region closing region to be deleted from zk
* @throws keeperexception if unexpected zookeeper exception
* @throws keeperexception.nonodeexception if node does not exist
*/
public static boolean deleteclosingnode zookeeperwatcher zkw
hregioninfo region
throws keeperexception  keeperexception nonodeexception
string regionname   region getencodedname
return deletenode zkw  regionname  eventtype m_zk_region_closing
/**
* deletes an existing unassigned node that is in the specified state for the
* specified region.
*
* <p>if a node does not already exist for this region, a
* {@link nonodeexception} will be thrown.
*
* <p>no watcher is set whether this succeeds or not.
*
* <p>returns false if the node was not in the proper state but did exist.
*
* <p>this method is used when a region finishes opening/closing.
* the master acknowledges completion
* of the specified regions transition to being closed/opened.
*
* @param zkw zk reference
* @param regionname region to be deleted from zk
* @param expectedstate state region must be in for delete to complete
* @throws keeperexception if unexpected zookeeper exception
* @throws keeperexception.nonodeexception if node does not exist
*/
public static boolean deletenode zookeeperwatcher zkw  string regionname
eventtype expectedstate
throws keeperexception  keeperexception nonodeexception
return deletenode zkw  regionname  expectedstate   1
/**
* deletes an existing unassigned node that is in the specified state for the
* specified region.
*
* <p>if a node does not already exist for this region, a
* {@link nonodeexception} will be thrown.
*
* <p>no watcher is set whether this succeeds or not.
*
* <p>returns false if the node was not in the proper state but did exist.
*
* <p>this method is used when a region finishes opening/closing.
* the master acknowledges completion
* of the specified regions transition to being closed/opened.
*
* @param zkw zk reference
* @param regionname region to be deleted from zk
* @param expectedstate state region must be in for delete to complete
* @param expectedversion of the znode that is to be deleted.
*        if expectedversion need not be compared while deleting the znode
*        pass -1
* @throws keeperexception if unexpected zookeeper exception
* @throws keeperexception.nonodeexception if node does not exist
*/
public static boolean deletenode zookeeperwatcher zkw  string regionname
eventtype expectedstate  int expectedversion
throws keeperexception  keeperexception nonodeexception
log debug zkw prefix
regionname       expectedstate
string node   getnodename zkw  regionname
zkw sync node
stat stat   new stat
byte  bytes   zkutil getdatanowatch zkw  node  stat
if  bytes    null
// if it came back null, node does not exist.
throw keeperexception create code nonode
regiontransitiondata data   regiontransitiondata frombytes bytes
if   data geteventtype   equals expectedstate
log warn zkw prefix
regionname       expectedstate
data geteventtype
return false
if  expectedversion     1
stat getversion      expectedversion
log warn     regionname
return false
if  zkutil deletenode zkw  node  stat getversion
log warn zkw prefix
regionname       expectedstate
return false
log debug zkw prefix
regionname       expectedstate
return true
/**
* deletes all unassigned nodes regardless of their state.
*
* <p>no watchers are set.
*
* <p>this method is used by the master during cluster startup to clear out
* any existing state from other cluster runs.
*
* @param zkw zk reference
* @throws keeperexception if unexpected zookeeper exception
*/
public static void deleteallnodes zookeeperwatcher zkw
throws keeperexception
log debug zkw prefix
zkutil deletechildrenrecursively zkw  zkw assignmentznode
// regionserver methods
/**
* creates a new unassigned node in the closing state for the specified
* region.
*
* <p>does not transition nodes from any states.  if a node already exists
* for this region, a {@link nodeexistsexception} will be thrown.
*
* <p>if creation is successful, returns the version number of the closing
* node created.
*
* <p>does not set any watches.
*
* <p>this method should only be used by a regionserver when initiating a
* close of a region after receiving a close rpc from the master.
*
* @param zkw zk reference
* @param region region to be created as closing
* @param servername server event originates from
* @return version of node after transition, -1 if unsuccessful transition
* @throws keeperexception if unexpected zookeeper exception
* @throws keeperexception.nodeexistsexception if node already exists
*/
public static int createnodeclosing zookeeperwatcher zkw  hregioninfo region
servername servername
throws keeperexception  keeperexception nodeexistsexception
log debug zkw prefix
region getencodedname
regiontransitiondata data   new regiontransitiondata
eventtype m_zk_region_closing  region getregionname    servername
string node   getnodename zkw  region getencodedname
return zkutil createandwatch zkw  node  data getbytes
/**
* transitions an existing unassigned node for the specified region which is
* currently in the closing state to be in the closed state.
*
* <p>does not transition nodes from other states.  if for some reason the
* node could not be transitioned, the method returns -1.  if the transition
* is successful, the version of the node after transition is returned.
*
* <p>this method can fail and return false for three different reasons:
* <ul><li>unassigned node for this region does not exist</li>
* <li>unassigned node for this region is not in closing state</li>
* <li>after verifying closing state, update fails because of wrong version
* (someone else already transitioned the node)</li>
* </ul>
*
* <p>does not set any watches.
*
* <p>this method should only be used by a regionserver when initiating a
* close of a region after receiving a close rpc from the master.
*
* @param zkw zk reference
* @param region region to be transitioned to closed
* @param servername server event originates from
* @return version of node after transition, -1 if unsuccessful transition
* @throws keeperexception if unexpected zookeeper exception
*/
public static int transitionnodeclosed zookeeperwatcher zkw
hregioninfo region  servername servername  int expectedversion
throws keeperexception
return transitionnode zkw  region  servername
eventtype m_zk_region_closing
eventtype rs_zk_region_closed  expectedversion
/**
* transitions an existing unassigned node for the specified region which is
* currently in the offline state to be in the opening state.
*
* <p>does not transition nodes from other states.  if for some reason the
* node could not be transitioned, the method returns -1.  if the transition
* is successful, the version of the node written as opening is returned.
*
* <p>this method can fail and return -1 for three different reasons:
* <ul><li>unassigned node for this region does not exist</li>
* <li>unassigned node for this region is not in offline state</li>
* <li>after verifying offline state, update fails because of wrong version
* (someone else already transitioned the node)</li>
* </ul>
*
* <p>does not set any watches.
*
* <p>this method should only be used by a regionserver when initiating an
* open of a region after receiving an open rpc from the master.
*
* @param zkw zk reference
* @param region region to be transitioned to opening
* @param servername server event originates from
* @return version of node after transition, -1 if unsuccessful transition
* @throws keeperexception if unexpected zookeeper exception
*/
public static int transitionnodeopening zookeeperwatcher zkw
hregioninfo region  servername servername
throws keeperexception
return transitionnodeopening zkw  region  servername
eventtype m_zk_region_offline
public static int transitionnodeopening zookeeperwatcher zkw
hregioninfo region  servername servername  final eventtype beginstate
throws keeperexception
return transitionnode zkw  region  servername  beginstate
eventtype rs_zk_region_opening   1
/**
* retransitions an existing unassigned node for the specified region which is
* currently in the opening state to be in the opening state.
*
* <p>does not transition nodes from other states.  if for some reason the
* node could not be transitioned, the method returns -1.  if the transition
* is successful, the version of the node rewritten as opening is returned.
*
* <p>this method can fail and return -1 for three different reasons:
* <ul><li>unassigned node for this region does not exist</li>
* <li>unassigned node for this region is not in opening state</li>
* <li>after verifying opening state, update fails because of wrong version
* (someone else already transitioned the node)</li>
* </ul>
*
* <p>does not set any watches.
*
* <p>this method should only be used by a regionserver when initiating an
* open of a region after receiving an open rpc from the master.
*
* @param zkw zk reference
* @param region region to be transitioned to opening
* @param servername server event originates from
* @return version of node after transition, -1 if unsuccessful transition
* @throws keeperexception if unexpected zookeeper exception
*/
public static int retransitionnodeopening zookeeperwatcher zkw
hregioninfo region  servername servername  int expectedversion
throws keeperexception
return transitionnode zkw  region  servername
eventtype rs_zk_region_opening
eventtype rs_zk_region_opening  expectedversion
/**
* transitions an existing unassigned node for the specified region which is
* currently in the opening state to be in the opened state.
*
* <p>does not transition nodes from other states.  if for some reason the
* node could not be transitioned, the method returns -1.  if the transition
* is successful, the version of the node after transition is returned.
*
* <p>this method can fail and return false for three different reasons:
* <ul><li>unassigned node for this region does not exist</li>
* <li>unassigned node for this region is not in opening state</li>
* <li>after verifying opening state, update fails because of wrong version
* (this should never actually happen since an rs only does this transition
* following a transition to opening.  if two rs are conflicting, one would
* fail the original transition to opening and not this transition)</li>
* </ul>
*
* <p>does not set any watches.
*
* <p>this method should only be used by a regionserver when completing the
* open of a region.
*
* @param zkw zk reference
* @param region region to be transitioned to opened
* @param servername server event originates from
* @return version of node after transition, -1 if unsuccessful transition
* @throws keeperexception if unexpected zookeeper exception
*/
public static int transitionnodeopened zookeeperwatcher zkw
hregioninfo region  servername servername  int expectedversion
throws keeperexception
return transitionnode zkw  region  servername
eventtype rs_zk_region_opening
eventtype rs_zk_region_opened  expectedversion
/**
* method that actually performs unassigned node transitions.
*
* <p>attempts to transition the unassigned node for the specified region
* from the expected state to the state in the specified transition data.
*
* <p>method first reads existing data and verifies it is in the expected
* state.  if the node does not exist or the node is not in the expected
* state, the method returns -1.  if the transition is successful, the
* version number of the node following the transition is returned.
*
* <p>if the read state is what is expected, it attempts to write the new
* state and data into the node.  when doing this, it includes the expected
* version (determined when the existing state was verified) to ensure that
* only one transition is successful.  if there is a version mismatch, the
* method returns -1.
*
* <p>if the write is successful, no watch is set and the method returns true.
*
* @param zkw zk reference
* @param region region to be transitioned to opened
* @param servername server event originates from
* @param endstate state to transition node to if all checks pass
* @param beginstate state the node must currently be in to do transition
* @param expectedversion expected version of data before modification, or -1
* @return version of node after transition, -1 if unsuccessful transition
* @throws keeperexception if unexpected zookeeper exception
*/
public static int transitionnode zookeeperwatcher zkw  hregioninfo region
servername servername  eventtype beginstate  eventtype endstate
int expectedversion
throws keeperexception
return transitionnode zkw  region  servername  beginstate  endstate
expectedversion  null
public static int transitionnode zookeeperwatcher zkw  hregioninfo region
servername servername  eventtype beginstate  eventtype endstate
int expectedversion  final byte  payload
throws keeperexception
string encoded   region getencodedname
if log isdebugenabled
log debug zkw prefix
hregioninfo prettyprint encoded
beginstate tostring         endstate tostring
string node   getnodename zkw  encoded
zkw sync node
// read existing data of the node
stat stat   new stat
byte  existingbytes   zkutil getdatanowatch zkw  node  stat
if  existingbytes    null
// node no longer exists.  return -1. it means unsuccessful transition.
return  1
regiontransitiondata existingdata
regiontransitiondata frombytes existingbytes
// verify it is the expected version
if expectedversion     1    stat getversion      expectedversion
log warn zkw prefix
encoded
beginstate       endstate
stat getversion
expectedversion
return  1
else if  beginstate equals eventtype m_zk_region_offline
endstate equals eventtype rs_zk_region_opening
expectedversion     1    stat getversion      0
// the below check ensures that double assignment doesnot happen.
// when the node is created for the first time then the expected version
// that is passed will be -1 and the version in znode will be 0.
// in all other cases the version in znode will be > 0.
log warn zkw prefix
encoded       beginstate       endstate
stat getversion
expectedversion
return  1
// verify it is in expected state
if  existingdata geteventtype   equals beginstate
log warn zkw prefix
encoded
beginstate       endstate
existingdata geteventtype
servername
return  1
// write new data, ensuring data has not changed since we last read it
try
regiontransitiondata data   new regiontransitiondata endstate
region getregionname    servername  payload
if  zkutil setdata zkw  node  data getbytes    stat getversion
log warn zkw prefix
encoded
beginstate       endstate
return  1
if log isdebugenabled
log debug zkw prefix     encoded
beginstate       endstate
return stat getversion     1
catch  keeperexception nonodeexception nne
log warn zkw prefix
encoded
beginstate       endstate
return  1
/**
* gets the current data in the unassigned node for the specified region name
* or fully-qualified path.
*
* <p>returns null if the region does not currently have a node.
*
* <p>sets a watch on the node if the node exists.
*
* @param zkw zk reference
* @param pathorregionname fully-specified path or region name
* @return data for the unassigned node
* @throws keeperexception if unexpected zookeeper exception
*/
public static regiontransitiondata getdata zookeeperwatcher zkw
string pathorregionname
throws keeperexception
string node   pathorregionname startswith    ?
pathorregionname   getnodename zkw  pathorregionname
byte  data   zkutil getdataandwatch zkw  node
if data    null
return null
return regiontransitiondata frombytes data
/**
* gets the current data in the unassigned node for the specified region name
* or fully-qualified path.
*
* <p>returns null if the region does not currently have a node.
*
* <p>sets a watch on the node if the node exists.
*
* @param zkw zk reference
* @param pathorregionname fully-specified path or region name
* @param stat object to populate the version.
* @return data for the unassigned node
* @throws keeperexception if unexpected zookeeper exception
*/
public static regiontransitiondata getdataandwatch zookeeperwatcher zkw
string pathorregionname  stat stat
throws keeperexception
string node   pathorregionname startswith    ?
pathorregionname   getnodename zkw  pathorregionname
byte  data   zkutil getdataandwatch zkw  node  stat
if data    null
return null
return regiontransitiondata frombytes data
/**
* gets the current data in the unassigned node for the specified region name
* or fully-qualified path.
*
* <p>returns null if the region does not currently have a node.
*
* <p>does not set a watch.
*
* @param zkw zk reference
* @param pathorregionname fully-specified path or region name
* @param stat object to store node info into on getdata call
* @return data for the unassigned node or null if node does not exist
* @throws keeperexception if unexpected zookeeper exception
*/
public static regiontransitiondata getdatanowatch zookeeperwatcher zkw
string pathorregionname  stat stat
throws keeperexception
string node   pathorregionname startswith    ?
pathorregionname   getnodename zkw  pathorregionname
byte  data   zkutil getdatanowatch zkw  node  stat
if  data    null
return null
return regiontransitiondata frombytes data
/**
* get the version of the specified znode
* @param zkw zk reference
* @param region region's info
* @return the version of the znode, -1 if it doesn't exist
* @throws keeperexception
*/
public static int getversion zookeeperwatcher zkw  hregioninfo region
throws keeperexception
string znode   getnodename zkw  region getencodedname
return zkutil checkexists zkw  znode
/**
* delete the assignment node regardless of its current state.
* <p>
* fail silent even if the node does not exist at all.
* @param watcher
* @param regioninfo
* @throws keeperexception
*/
public static void deletenodefailsilent zookeeperwatcher watcher
hregioninfo regioninfo
throws keeperexception
string node   getnodename watcher  regioninfo getencodedname
zkutil deletenodefailsilent watcher  node
/**
* blocks until there are no node in regions in transition.
* <p>
* used in testing only.
* @param zkw zk reference
* @throws keeperexception
* @throws interruptedexception
*/
public static void blockuntilnorit zookeeperwatcher zkw
throws keeperexception  interruptedexception
while  zkutil nodehaschildren zkw  zkw assignmentznode
list<string> znodes
zkutil listchildrenandwatchfornewchildren zkw  zkw assignmentznode
if  znodes    null     znodes isempty
for  string znode   znodes
log debug     znode
thread sleep 100
/**
* blocks until there is at least one node in regions in transition.
* <p>
* used in testing only.
* @param zkw zk reference
* @throws keeperexception
* @throws interruptedexception
*/
public static void blockuntilrit zookeeperwatcher zkw
throws keeperexception  interruptedexception
while   zkutil nodehaschildren zkw  zkw assignmentznode
list<string> znodes
zkutil listchildrenandwatchfornewchildren zkw  zkw assignmentznode
if  znodes    null    znodes isempty
log debug
thread sleep 100
/**
* verifies that the specified region is in the specified state in zookeeper.
* <p>
* returns true if region is in transition and in the specified state in
* zookeeper.  returns false if the region does not exist in zk or is in
* a different state.
* <p>
* method synchronizes() with zk so will yield an up-to-date result but is
* a slow read.
* @param zkw
* @param region
* @param expectedstate
* @return true if region exists and is in expected state
*/
public static boolean verifyregionstate zookeeperwatcher zkw
hregioninfo region  eventtype expectedstate
throws keeperexception
string encoded   region getencodedname
string node   getnodename zkw  encoded
zkw sync node
// read existing data of the node
byte  existingbytes   null
try
existingbytes   zkutil getdataandwatch zkw  node
catch  keeperexception nonodeexception nne
return false
catch  keeperexception e
throw e
if  existingbytes    null  return false
regiontransitiondata existingdata
regiontransitiondata frombytes existingbytes
if  existingdata geteventtype      expectedstate
return true
return false