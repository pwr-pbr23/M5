/**
* copyright 2007 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase mapreduce
import java io ioexception
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop io writable
import org apache hadoop mapreduce outputformat
/**
* convenience class that simply writes all values (which must be
* {@link org.apache.hadoop.hbase.client.put put} or
* {@link org.apache.hadoop.hbase.client.delete delete} instances)
* passed to it out to the configured hbase table. this works in combination
* with {@link tableoutputformat} which actually does the writing to hbase.<p>
*
* keys are passed along but ignored in tableoutputformat.  however, they can
* be used to control how your values will be divided up amongst the specified
* number of reducers. <p>
*
* you can also use the {@link tablemapreduceutil} class to set up the two
* classes in one step:
* <blockquote><code>
* tablemapreduceutil.inittablereducerjob("table", identitytablereducer.class, job);
* </code></blockquote>
* this will also set the proper {@link tableoutputformat} which is given the
* <code>table</code> parameter. the
* {@link org.apache.hadoop.hbase.client.put put} or
* {@link org.apache.hadoop.hbase.client.delete delete} define the
* row and columns implicitly.
*/
public class identitytablereducer
extends tablereducer<writable  writable  writable>
@suppresswarnings
private static final log log   logfactory getlog identitytablereducer class
/**
* writes each given record, consisting of the row key and the given values,
* to the configured {@link outputformat}. it is emitting the row key and each
* {@link org.apache.hadoop.hbase.client.put put} or
* {@link org.apache.hadoop.hbase.client.delete delete} as separate pairs.
*
* @param key  the current row key.
* @param values  the {@link org.apache.hadoop.hbase.client.put put} or
*   {@link org.apache.hadoop.hbase.client.delete delete} list for the given
*   row.
* @param context  the context of the reduce.
* @throws ioexception when writing the record fails.
* @throws interruptedexception when the job gets interrupted.
*/
@override
public void reduce writable key  iterable<writable> values  context context
throws ioexception  interruptedexception
for writable putordelete   values
context write key  putordelete