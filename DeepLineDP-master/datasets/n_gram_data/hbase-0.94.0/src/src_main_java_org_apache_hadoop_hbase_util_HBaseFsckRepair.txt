/**
* copyright 2010 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase util
import java io ioexception
import java util list
import java util map
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop conf configuration
import org apache hadoop fs path
import org apache hadoop hbase hconstants
import org apache hadoop hbase hregioninfo
import org apache hadoop hbase htabledescriptor
import org apache hadoop hbase servername
import org apache hadoop hbase zookeeperconnectionexception
import org apache hadoop hbase client hbaseadmin
import org apache hadoop hbase client hconnection
import org apache hadoop hbase client htable
import org apache hadoop hbase client put
import org apache hadoop hbase ipc hregioninterface
import org apache hadoop hbase master assignmentmanager regionstate
import org apache hadoop hbase regionserver hregion
import org apache hadoop hbase regionserver wal hlog
import org apache zookeeper keeperexception
/**
* this class contains helper methods that repair parts of hbase's filesystem
* contents.
*/
public class hbasefsckrepair
public static final log log   logfactory getlog hbasefsckrepair class
/**
* fix multiple assignment by doing silent closes on each rs hosting the region
* and then force zk unassigned node to offline to trigger assignment by
* master.
*
* @param admin hbase admin used to undeploy
* @param region region to undeploy
* @param servers list of servers to undeploy from
*/
public static void fixmultiassignment hbaseadmin admin  hregioninfo region
list<servername> servers
throws ioexception  keeperexception  interruptedexception
hregioninfo actualregion   new hregioninfo region
// close region on the servers silently
for servername server   servers
closeregionsilentlyandwait admin  server  actualregion
// force zk node to offline so master assigns
forceofflineinzk admin  actualregion
/**
* fix unassigned by creating/transition the unassigned zk node for this
* region to offline state with a special flag to tell the master that this is
* a forced operation by hbck.
*
* this assumes that info is in meta.
*
* @param conf
* @param region
* @throws ioexception
* @throws keeperexception
*/
public static void fixunassigned hbaseadmin admin  hregioninfo region
throws ioexception  keeperexception
hregioninfo actualregion   new hregioninfo region
// force zk node to offline so master assigns
forceofflineinzk admin  actualregion
/**
* in 0.90, this forces an hri offline by setting the regiontransitiondata
* in zk to have hbck_code_name as the server.  this is a special case in
* the assignmentmanager that attempts an assign call by the master.
*
* @see org.apache.hadoop.hbase.master.assignementmanager#handlehbck
*
* this doesn't seem to work properly in the updated version of 0.92+'s hbck
* so we use assign to force the region into transition.  this has the
* side-effect of requiring a hregioninfo that considers regionid (timestamp)
* in comparators that is addressed by hbase-5563.
*/
private static void forceofflineinzk hbaseadmin admin  final hregioninfo region
throws zookeeperconnectionexception  keeperexception  ioexception
admin assign region getregionname
/*
* should we check all assignments or just not in rit?
*/
public static void waituntilassigned hbaseadmin admin
hregioninfo region  throws ioexception  interruptedexception
long timeout   admin getconfiguration   getlong    120000
long expiration   timeout   system currenttimemillis
while  system currenttimemillis   < expiration
try
map<string  regionstate> rits
admin getclusterstatus   getregionsintransition
if  rits keyset      null     rits keyset   contains region getencodedname
// yay! no longer rit
return
// still in rit
log info
region
catch  ioexception e
log warn
e
thread sleep 1000
throw new ioexception     region
timeout
/**
* contacts a region server and waits up to hbase.hbck.close.timeout ms
* (default 120s) to close the region.  this bypasses the active hmaster.
*/
public static void closeregionsilentlyandwait hbaseadmin admin
servername server  hregioninfo region  throws ioexception  interruptedexception
hconnection connection   admin getconnection
hregioninterface rs   connection gethregionconnection server gethostname
server getport
rs closeregion region  false
long timeout   admin getconfiguration
getlong    120000
long expiration   timeout   system currenttimemillis
while  system currenttimemillis   < expiration
try
hregioninfo rsregion   rs getregioninfo region getregionname
if  rsregion    null
return
catch  ioexception ioe
return
thread sleep 1000
throw new ioexception     region
timeout
/**
* puts the specified hregioninfo into meta.
*/
public static void fixmetaholeonline configuration conf
hregioninfo hri  throws ioexception
put p   new put hri getregionname
p add hconstants catalog_family  hconstants regioninfo_qualifier
writables getbytes hri
htable meta   new htable conf  hconstants meta_table_name
meta put p
meta close
/**
* creates, flushes, and closes a new region.
*/
public static hregion createhdfsregiondir configuration conf
hregioninfo hri  htabledescriptor htd  throws ioexception
// create hregion
path root   fsutils getrootdir conf
hregion region   hregion createhregion hri  root  conf  htd
hlog hlog   region getlog
// close the new region to flush to disk. close log file too.
region close
hlog closeanddelete
return region