/**
* copyright 2009 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase io hfile
import java io ioexception
import java util list
import org apache hadoop conf configuration
/**
* block cache interface. anything that implements the {@link cacheable}
* interface can be put in the cache.
*/
public interface blockcache
/**
* add block to cache.
* @param cachekey the block's cache key.
* @param buf the block contents wrapped in a bytebuffer.
* @param inmemory whether block should be treated as in-memory
*/
public void cacheblock blockcachekey cachekey  cacheable buf  boolean inmemory
/**
* add block to cache (defaults to not in-memory).
* @param cachekey the block's cache key.
* @param buf the object to cache.
*/
public void cacheblock blockcachekey cachekey  cacheable buf
/**
* fetch block from cache.
* @param cachekey block to fetch.
* @param caching whether this request has caching enabled (used for stats)
* @return block or null if block is not in 2 cache.
*/
public cacheable getblock blockcachekey cachekey  boolean caching
/**
* evict block from cache.
* @param cachekey block to evict
* @return true if block existed and was evicted, false if not
*/
public boolean evictblock blockcachekey cachekey
/**
* evicts all blocks for the given hfile.
*
* @return the number of blocks evicted
*/
public int evictblocksbyhfilename string hfilename
/**
* get the statistics for this block cache.
* @return stats
*/
public cachestats getstats
/**
* shutdown the cache.
*/
public void shutdown
/**
* returns the total size of the block cache, in bytes.
* @return size of cache, in bytes
*/
public long size
/**
* returns the free size of the block cache, in bytes.
* @return free space in cache, in bytes
*/
public long getfreesize
/**
* returns the occupied size of the block cache, in bytes.
* @return occupied space in cache, in bytes
*/
public long getcurrentsize
/**
* returns the number of evictions that have occurred.
* @return number of evictions
*/
public long getevictedcount
/**
* returns the number of blocks currently cached in the block cache.
* @return number of blocks in the cache
*/
public long getblockcount
/**
* performs a blockcache summary and returns a list of blockcachecolumnfamilysummary objects.
* this method could be fairly heavyweight in that it evaluates the entire hbase file-system
* against what is in the regionserver blockcache.
* <br><br>
* the contract of this interface is to return the list in sorted order by table name, then
* columnfamily.
*
* @param conf hbaseconfiguration
* @return list of blockcachecolumnfamilysummary
* @throws ioexception exception
*/
public list<blockcachecolumnfamilysummary> getblockcachecolumnfamilysummaries configuration conf  throws ioexception