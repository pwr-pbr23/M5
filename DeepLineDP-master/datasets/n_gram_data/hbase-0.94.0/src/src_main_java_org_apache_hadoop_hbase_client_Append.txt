/*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase client
import java io datainput
import java io dataoutput
import java io ioexception
import java util arraylist
import java util arrays
import java util list
import java util map
import org apache hadoop hbase keyvalue
import org apache hadoop hbase util bytes
import org apache hadoop io writable
/**
* performs append operations on a single row.
* <p>
* note that this operation does not appear atomic to readers. appends are done
* under a single row lock, so write operations to a row are synchronized, but
* readers do not take row locks so get and scan operations can see this
* operation partially completed.
* <p>
* to append to a set of columns of a row, instantiate an append object with the
* row to append to. at least one column to append must be specified using the
* {@link #add(byte[], byte[], byte[])} method.
*/
public class append extends mutation
private static final string return_results
private static final byte append_version    byte 1
/**
* @param returnresults
*          true (default) if the append operation should return the results.
*          a client that is not interested in the result can save network
*          bandwidth setting this to false.
*/
public void setreturnresults boolean returnresults
setattribute return_results  bytes tobytes returnresults
/**
* @return current setting for returnresults
*/
public boolean isreturnresults
byte v   getattribute return_results
return v    null ? true   bytes toboolean v
/** constructor for writable.  do not use */
public append
/**
* create a append operation for the specified row.
* <p>
* at least one column must be appended to.
* @param row row key
*/
public append byte row
this row   arrays copyof row  row length
/**
* add the specified column and value to this append operation.
* @param family family name
* @param qualifier column qualifier
* @param value value to append to specified column
* @return this
*/
public append add byte  family  byte  qualifier  byte  value
list<keyvalue> list   familymap get family
if list    null
list   new arraylist<keyvalue>
list add new keyvalue
this row  family  qualifier  this ts  keyvalue type put  value
familymap put family  list
return this
@override
public void readfields final datainput in
throws ioexception
int version   in readbyte
if  version > append_version
throw new ioexception   version
this row   bytes readbytearray in
this ts   in readlong
this lockid   in readlong
this writetowal   in readboolean
int numfamilies   in readint
if   this familymap isempty    this familymap clear
for int i 0 i<numfamilies i
byte  family   bytes readbytearray in
int numkeys   in readint
list<keyvalue> keys   new arraylist<keyvalue> numkeys
int totallen   in readint
byte  buf   new byte
int offset   0
for  int j   0  j < numkeys  j
int keylength   in readint
in readfully buf  offset  keylength
keys add new keyvalue buf  offset  keylength
offset    keylength
this familymap put family  keys
readattributes in
@override
public void write final dataoutput out
throws ioexception
out writebyte append_version
bytes writebytearray out  this row
out writelong this ts
out writelong this lockid
out writeboolean this writetowal
out writeint familymap size
for  map entry<byte   list<keyvalue>> entry   familymap entryset
bytes writebytearray out  entry getkey
list<keyvalue> keys   entry getvalue
out writeint keys size
int totallen   0
for keyvalue kv   keys
totallen    kv getlength
out writeint totallen
for keyvalue kv   keys
out writeint kv getlength
out write kv getbuffer    kv getoffset    kv getlength
writeattributes out