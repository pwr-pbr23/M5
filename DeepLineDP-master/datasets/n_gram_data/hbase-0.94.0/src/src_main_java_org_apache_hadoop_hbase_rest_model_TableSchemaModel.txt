/*
* copyright 2010 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase rest model
import java io ioexception
import java io serializable
import java util arraylist
import java util hashmap
import java util iterator
import java util list
import java util map
import javax xml bind annotation xmlanyattribute
import javax xml bind annotation xmlattribute
import javax xml bind annotation xmlelement
import javax xml bind annotation xmlrootelement
import javax xml namespace qname
import org apache hadoop hbase hcolumndescriptor
import org apache hadoop hbase hconstants
import org apache hadoop hbase htabledescriptor
import org apache hadoop hbase io immutablebyteswritable
import org apache hadoop hbase rest protobufmessagehandler
import org apache hadoop hbase rest protobuf generated columnschemamessage columnschema
import org apache hadoop hbase rest protobuf generated tableschemamessage tableschema
import org apache hadoop hbase util bytes
/**
* a representation of hbase table descriptors.
*
* <pre>
* &lt;complextype name="tableschema"&gt;
*   &lt;sequence&gt;
*     &lt;element name="column" type="tns:columnschema"
*       maxoccurs="unbounded" minoccurs="1"&gt;&lt;/element&gt;
*   &lt;/sequence&gt;
*   &lt;attribute name="name" type="string"&gt;&lt;/attribute&gt;
*   &lt;anyattribute&gt;&lt;/anyattribute&gt;
* &lt;/complextype&gt;
* </pre>
*/
@xmlrootelement name
public class tableschemamodel implements serializable  protobufmessagehandler
private static final long serialversionuid   1l
private static final qname is_meta   new qname htabledescriptor is_meta
private static final qname is_root   new qname htabledescriptor is_root
private static final qname readonly   new qname htabledescriptor readonly
private static final qname ttl   new qname hcolumndescriptor ttl
private static final qname versions   new qname hconstants versions
private static final qname compression
new qname hcolumndescriptor compression
private string name
private map<qname object> attrs   new hashmap<qname object>
private list<columnschemamodel> columns   new arraylist<columnschemamodel>
/**
* default constructor.
*/
public tableschemamodel
/**
* constructor
* @param htd the table descriptor
*/
public tableschemamodel htabledescriptor htd
setname htd getnameasstring
for  map entry<immutablebyteswritable  immutablebyteswritable> e
htd getvalues   entryset
addattribute bytes tostring e getkey   get
bytes tostring e getvalue   get
for  hcolumndescriptor hcd  htd getfamilies
columnschemamodel columnmodel   new columnschemamodel
columnmodel setname hcd getnameasstring
for  map entry<immutablebyteswritable  immutablebyteswritable> e
hcd getvalues   entryset
columnmodel addattribute bytes tostring e getkey   get
bytes tostring e getvalue   get
addcolumnfamily columnmodel
/**
* add an attribute to the table descriptor
* @param name attribute name
* @param value attribute value
*/
public void addattribute string name  object value
attrs put new qname name   value
/**
* return a table descriptor value as a string. calls tostring() on the
* object stored in the descriptor value map.
* @param name the attribute name
* @return the attribute value
*/
public string getattribute string name
object o   attrs get new qname name
return o    null ? o tostring     null
/**
* add a column family to the table descriptor
* @param family the column family model
*/
public void addcolumnfamily columnschemamodel family
columns add family
/**
* retrieve the column family at the given index from the table descriptor
* @param index the index
* @return the column family model
*/
public columnschemamodel getcolumnfamily int index
return columns get index
/**
* @return the table name
*/
@xmlattribute
public string getname
return name
/**
* @return the map for holding unspecified (user) attributes
*/
@xmlanyattribute
public map<qname object> getany
return attrs
/**
* @return the columns
*/
@xmlelement name
public list<columnschemamodel> getcolumns
return columns
/**
* @param name the table name
*/
public void setname string name
this name   name
/**
* @param columns the columns to set
*/
public void setcolumns list<columnschemamodel> columns
this columns   columns
/* (non-javadoc)
* @see java.lang.object#tostring()
*/
@override
public string tostring
stringbuilder sb   new stringbuilder
sb append
sb append name
sb append
for  map entry<qname object> e  attrs entryset
sb append
sb append e getkey   getlocalpart
sb append
sb append e getvalue   tostring
sb append
sb append
iterator<columnschemamodel> i   columns iterator
while  i hasnext
columnschemamodel family   i next
sb append family tostring
if  i hasnext
sb append
sb append
sb append
return sb tostring
// getters and setters for common schema attributes
// cannot be standard bean type getters and setters, otherwise this would
// confuse jaxb
/**
* @return true if is_meta attribute exists and is truel
*/
public boolean __getismeta
object o   attrs get is_meta
return o    null ? boolean valueof o tostring      false
/**
* @return true if is_root attribute exists and is truel
*/
public boolean __getisroot
object o   attrs get is_root
return o    null ? boolean valueof o tostring      false
/**
* @return true if readonly attribute exists and is truel
*/
public boolean __getreadonly
object o   attrs get readonly
return o    null ?
boolean valueof o tostring      htabledescriptor default_readonly
/**
* @param value desired value of is_meta attribute
*/
public void __setismeta boolean value
attrs put is_meta  boolean tostring value
/**
* @param value desired value of is_root attribute
*/
public void __setisroot boolean value
attrs put is_root  boolean tostring value
/**
* @param value desired value of readonly attribute
*/
public void __setreadonly boolean value
attrs put readonly  boolean tostring value
@override
public byte createprotobufoutput
tableschema builder builder   tableschema newbuilder
builder setname name
for  map entry<qname  object> e  attrs entryset
tableschema attribute builder attrbuilder
tableschema attribute newbuilder
attrbuilder setname e getkey   getlocalpart
attrbuilder setvalue e getvalue   tostring
builder addattrs attrbuilder
for  columnschemamodel family  columns
map<qname  object> familyattrs   family getany
columnschema builder familybuilder   columnschema newbuilder
familybuilder setname family getname
for  map entry<qname  object> e  familyattrs entryset
columnschema attribute builder attrbuilder
columnschema attribute newbuilder
attrbuilder setname e getkey   getlocalpart
attrbuilder setvalue e getvalue   tostring
familybuilder addattrs attrbuilder
if  familyattrs containskey ttl
familybuilder setttl
integer valueof familyattrs get ttl  tostring
if  familyattrs containskey versions
familybuilder setmaxversions
integer valueof familyattrs get versions  tostring
if  familyattrs containskey compression
familybuilder setcompression familyattrs get compression  tostring
builder addcolumns familybuilder
if  attrs containskey readonly
builder setreadonly
boolean valueof attrs get readonly  tostring
return builder build   tobytearray
@override
public protobufmessagehandler getobjectfrommessage byte message
throws ioexception
tableschema builder builder   tableschema newbuilder
builder mergefrom message
this setname builder getname
for  tableschema attribute attr  builder getattrslist
this addattribute attr getname    attr getvalue
if  builder hasreadonly
this addattribute htabledescriptor readonly  builder getreadonly
for  columnschema family  builder getcolumnslist
columnschemamodel familymodel   new columnschemamodel
familymodel setname family getname
for  columnschema attribute attr  family getattrslist
familymodel addattribute attr getname    attr getvalue
if  family hasttl
familymodel addattribute hcolumndescriptor ttl  family getttl
if  family hasmaxversions
familymodel addattribute hconstants versions
family getmaxversions
if  family hascompression
familymodel addattribute hcolumndescriptor compression
family getcompression
this addcolumnfamily familymodel
return this
/**
* @return a table descriptor
*/
public htabledescriptor gettabledescriptor
htabledescriptor htd   new htabledescriptor getname
for  map entry<qname  object> e  getany   entryset
htd setvalue e getkey   getlocalpart    e getvalue   tostring
for  columnschemamodel column  getcolumns
hcolumndescriptor hcd   new hcolumndescriptor column getname
for  map entry<qname  object> e  column getany   entryset
hcd setvalue e getkey   getlocalpart    e getvalue   tostring
htd addfamily hcd
return htd