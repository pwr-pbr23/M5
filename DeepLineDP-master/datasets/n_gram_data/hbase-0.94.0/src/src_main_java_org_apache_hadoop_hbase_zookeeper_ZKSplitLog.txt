/**
* copyright 2011 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase zookeeper
import java io ioexception
import java io unsupportedencodingexception
import java lang reflect field
import java net urldecoder
import java net urlencoder
import java util arraylist
import java util arrays
import java util list
import java util concurrent atomic atomiclong
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop fs filesystem
import org apache hadoop fs path
import org apache hadoop hbase hconstants
import org apache hadoop hbase master splitlogmanager
import org apache hadoop hbase regionserver splitlogworker
import org apache hadoop hbase util bytes
/**
* common methods and attributes used by {@link splitlogmanager} and
* {@link splitlogworker}
*/
public class zksplitlog
private static final log log   logfactory getlog zksplitlog class
public static final int default_timeout   25000     25 sec
public static final int default_zk_retries   3
public static final int default_max_resubmit   3
public static final int default_unassigned_timeout    3   60   1000     3 min
/**
* gets the full path node name for the log file being split.
* this method will url encode the filename.
* @param zkw zk reference
* @param filename log file name (only the basename)
*/
public static string getencodednodename zookeeperwatcher zkw
string filename
return zkutil joinznode zkw splitlogznode  encode filename
public static string getfilename string node
string basename   node substring node lastindexof      1
return decode basename
public static string encode string s
try
return urlencoder encode s
catch  unsupportedencodingexception e
throw new runtimeexception
public static string decode string s
try
return urldecoder decode s
catch  unsupportedencodingexception e
throw new runtimeexception
public static string getrescannode zookeeperwatcher zkw
return zkutil joinznode zkw splitlogznode
public static boolean isrescannode zookeeperwatcher zkw  string path
string prefix   getrescannode zkw
if  path length   <  prefix length
return false
for  int i   0  i < prefix length    i
if  prefix charat i     path charat i
return false
return true
public static boolean istaskpath zookeeperwatcher zkw  string path
string dirname   path substring 0  path lastindexof
return dirname equals zkw splitlogznode
public static enum taskstate
task_unassigned
task_owned
task_resigned
task_done
task_err
private final byte state
private taskstate string s
state   s getbytes
public byte get string servername
return  bytes add state    getbytes    servername getbytes
public string getwritername byte data
string str   bytes tostring data
return str substring str indexof      1
/**
* @param s
* @return true if {@link #state} is a prefix of s. false otherwise.
*/
public boolean equals byte s
if  s length < state length
return  false
for  int i   0  i < state length  i
if  state    s
return  false
return  true
public boolean equals byte s  string servername
return  arrays equals s  get servername
@override
public string tostring
return new string state
public static path getsplitlogdir path rootdir  string tmpname
return new path new path rootdir  hconstants split_logdir_name   tmpname
public static path stripsplitlogtempdir path rootdir  path file
int skipdepth   rootdir depth     2
list<string> components   new arraylist<string> 10
do
components add file getname
file   file getparent
while  file depth   > skipdepth
path ret   rootdir
for  int i   components size     1  i >  0  i
ret   new path ret  components get i
return ret
public static string getsplitlogdirtmpcomponent string worker  string file
return  worker       zksplitlog encode file
public static void markcorrupted path rootdir  string tmpname
filesystem fs
path file   new path getsplitlogdir rootdir  tmpname
try
fs createnewfile file
catch  ioexception e
log warn
file  e
public static boolean iscorrupted path rootdir  string tmpname
filesystem fs  throws ioexception
path file   new path getsplitlogdir rootdir  tmpname
boolean iscorrupt
iscorrupt   fs exists file
return iscorrupt
public static boolean iscorruptflagfile path file
return file getname   equals
public static class counters
//splitlogmanager counters
public static atomiclong tot_mgr_log_split_batch_start   new atomiclong 0
public static atomiclong tot_mgr_log_split_batch_success
new atomiclong 0
public static atomiclong tot_mgr_log_split_batch_err   new atomiclong 0
public static atomiclong tot_mgr_new_unexpected_hlogs   new atomiclong 0
public static atomiclong tot_mgr_log_split_start   new atomiclong 0
public static atomiclong tot_mgr_log_split_success   new atomiclong 0
public static atomiclong tot_mgr_log_split_err   new atomiclong 0
public static atomiclong tot_mgr_node_create_queued   new atomiclong 0
public static atomiclong tot_mgr_node_create_result   new atomiclong 0
public static atomiclong tot_mgr_node_already_exists   new atomiclong 0
public static atomiclong tot_mgr_node_create_err   new atomiclong 0
public static atomiclong tot_mgr_node_create_retry   new atomiclong 0
public static atomiclong tot_mgr_get_data_queued   new atomiclong 0
public static atomiclong tot_mgr_get_data_result   new atomiclong 0
public static atomiclong tot_mgr_get_data_nonode   new atomiclong 0
public static atomiclong tot_mgr_get_data_err   new atomiclong 0
public static atomiclong tot_mgr_get_data_retry   new atomiclong 0
public static atomiclong tot_mgr_node_delete_queued   new atomiclong 0
public static atomiclong tot_mgr_node_delete_result   new atomiclong 0
public static atomiclong tot_mgr_node_delete_err   new atomiclong 0
public static atomiclong tot_mgr_resubmit   new atomiclong 0
public static atomiclong tot_mgr_resubmit_failed   new atomiclong 0
public static atomiclong tot_mgr_null_data   new atomiclong 0
public static atomiclong tot_mgr_orphan_task_acquired   new atomiclong 0
public static atomiclong tot_mgr_wait_for_zk_delete   new atomiclong 0
public static atomiclong tot_mgr_unacquired_orphan_done   new atomiclong 0
public static atomiclong tot_mgr_resubmit_threshold_reached
new atomiclong 0
public static atomiclong tot_mgr_missing_state_in_delete
new atomiclong 0
public static atomiclong tot_mgr_heartbeat   new atomiclong 0
public static atomiclong tot_mgr_rescan   new atomiclong 0
public static atomiclong tot_mgr_rescan_deleted   new atomiclong 0
public static atomiclong tot_mgr_task_deleted   new atomiclong 0
public static atomiclong tot_mgr_resubmit_unassigned   new atomiclong 0
public static atomiclong tot_mgr_relist_logdir   new atomiclong 0
public static atomiclong tot_mgr_resubmit_dead_server_task
new atomiclong 0
// splitlogworker counters
public static atomiclong tot_wkr_failed_to_grab_task_no_data
new atomiclong 0
public static atomiclong tot_wkr_failed_to_grab_task_exception
new atomiclong 0
public static atomiclong tot_wkr_failed_to_grab_task_owned
new atomiclong 0
public static atomiclong tot_wkr_failed_to_grab_task_lost_race
new atomiclong 0
public static atomiclong tot_wkr_task_acquired   new atomiclong 0
public static atomiclong tot_wkr_task_resigned   new atomiclong 0
public static atomiclong tot_wkr_task_done   new atomiclong 0
public static atomiclong tot_wkr_task_err   new atomiclong 0
public static atomiclong tot_wkr_task_heartbeat   new atomiclong 0
public static atomiclong tot_wkr_task_acquired_rescan   new atomiclong 0
public static atomiclong tot_wkr_get_data_queued   new atomiclong 0
public static atomiclong tot_wkr_get_data_result   new atomiclong 0
public static atomiclong tot_wkr_get_data_retry   new atomiclong 0
public static atomiclong tot_wkr_preempt_task   new atomiclong 0
public static atomiclong tot_wkr_task_heartbeat_failed   new atomiclong 0
public static atomiclong tot_wkr_final_transistion_failed
new atomiclong 0
public static void resetcounters   throws exception
class<?> cl    new counters    getclass
field flds   cl getdeclaredfields
for  field fld   flds
atomiclong fld get null   set 0