/*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase util
import java io ioexception
import java lang reflect constructor
import java util zip checksum
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop conf configuration
import org apache hadoop hbase util checksumfactory
/**
* checksum types. the checksum type is a one byte number
* that stores a representation of the checksum algorithm
* used to encode a hfile. the ordinal of these cannot
* change or else you risk breaking all existing hfiles out there.
*/
public enum checksumtype
null  byte 0
@override
public string getname
return
@override
public void initialize
// do nothing
@override
public checksum getchecksumobject   throws ioexception
return null     checksums not used
crc32  byte 1
private volatile constructor<?> ctor
@override
public string getname
return
@override
public void initialize
final string purecrc32
final string jdkcrc
log   logfactory getlog checksumtype class
// check if hadoop library is available
try
ctor   checksumfactory newconstructor purecrc32
log info     purecrc32
catch  exception e
log info purecrc32
try
// the default checksum class name is java.util.zip.crc32.
// this is available on all jvms.
if  ctor    null
ctor   checksumfactory newconstructor jdkcrc
log info     jdkcrc
catch  exception e
log warn jdkcrc       e
@override
public checksum getchecksumobject   throws ioexception
if  ctor    null
throw new ioexception     getname
try
return  checksum ctor newinstance
catch  exception e
throw new ioexception e
crc32c  byte 2
private transient constructor<?> ctor
@override
public string getname
return
@override
public void initialize
final string purecrc32c
log   logfactory getlog checksumtype class
try
ctor   checksumfactory newconstructor purecrc32c
log info     purecrc32c
catch  exception e
log info purecrc32c
@override
public checksum getchecksumobject   throws ioexception
if  ctor    null
throw new ioexception     getname
try
return  checksum ctor newinstance
catch  exception e
throw new ioexception e
private final byte code
protected log log
/** initializes the relevant checksum class object */
abstract void initialize
/** returns the name of this checksum type */
public abstract string getname
private checksumtype final byte c
this code   c
initialize
/** returns a object that can be used to generate/validate checksums */
public abstract checksum getchecksumobject   throws ioexception
public byte getcode
return this code
/**
* cannot rely on enum ordinals . they change if item is removed or moved.
* do our own codes.
* @param b
* @return type associated with passed code.
*/
public static checksumtype codetotype final byte b
for  checksumtype t   checksumtype values
if  t getcode      b
return t
throw new runtimeexception     b
/**
* map a checksum name to a specific type.
* do our own names.
* @param b
* @return type associated with passed code.
*/
public static checksumtype nametotype final string name
for  checksumtype t   checksumtype values
if  t getname   equals name
return t
throw new runtimeexception     name