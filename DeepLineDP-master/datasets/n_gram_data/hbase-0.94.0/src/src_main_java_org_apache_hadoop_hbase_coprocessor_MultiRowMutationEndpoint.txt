/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase coprocessor
import java io ioexception
import java util list
import java util sortedset
import java util treeset
import org apache hadoop hbase donotretryioexception
import org apache hadoop hbase hregioninfo
import org apache hadoop hbase client mutation
import org apache hadoop hbase regionserver hregion
import org apache hadoop hbase regionserver wrongregionexception
import org apache hadoop hbase util bytes
/**
* this class demonstrates how to implement atomic multi row transactions using
* {@link hregion#mutaterowswithlocks(java.util.collection, java.util.collection)}
* and coprocessor endpoints.
*/
public class multirowmutationendpoint extends baseendpointcoprocessor implements
multirowmutationprotocol
@override
public void mutaterows list<mutation> mutations  throws ioexception
// get the coprocessor environment
regioncoprocessorenvironment env    regioncoprocessorenvironment  getenvironment
// set of rows to lock, sorted to avoid deadlocks
sortedset<byte> rowstolock   new treeset<byte> bytes bytes_comparator
hregioninfo regioninfo   env getregion   getregioninfo
for  mutation m   mutations
// check whether rows are in range for this region
if   hregion rowisinrange regioninfo  m getrow
string msg
bytes tostringbinary m getrow
if  rowstolock isempty
// if this is the first row, region might have moved,
// allow client to retry
throw new wrongregionexception msg
else
// rows are split between regions, do not retry
throw new donotretryioexception msg
rowstolock add m getrow
// call utility method on region
env getregion   mutaterowswithlocks mutations  rowstolock