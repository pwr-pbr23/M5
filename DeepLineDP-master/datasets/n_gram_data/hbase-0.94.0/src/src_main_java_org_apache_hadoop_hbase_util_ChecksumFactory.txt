/**
* copyright the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase util
import java io ioexception
import java lang classnotfoundexception
import java util zip checksum
import java lang reflect constructor
/**
* utility class that is used to generate a checksum object.
* the checksum implementation is pluggable and an application
* can specify their own class that implements their own
* checksum algorithm.
*/
public class checksumfactory
static private final class<?> empty_array   new class
/**
* create a new instance of a checksum object.
* @return the newly created checksum object
*/
static public checksum newinstance string classname  throws ioexception
try
class<?> clazz   getclassbyname classname
return  checksum newinstance clazz
catch  classnotfoundexception e
throw new ioexception e
/**
* returns a constructor that can be used to create a checksum object.
* @return the constructor that can be used to create a
* new checksum object.
* @param theclass classname for which an constructor is created
* @return a new constructor object
*/
static public constructor<?> newconstructor string classname
throws ioexception
try
class<?> clazz   getclassbyname classname
constructor<?> ctor   clazz getdeclaredconstructor empty_array
ctor setaccessible true
return ctor
catch  classnotfoundexception e
throw new ioexception e
catch  java lang nosuchmethodexception e
throw new ioexception e
/** create an object for the given class and initialize it from conf
*
* @param theclass class of which an object is created
* @return a new object
*/
static private <t> t newinstance class<t> theclass
t result
try
constructor<t> ctor   theclass getdeclaredconstructor empty_array
ctor setaccessible true
result   ctor newinstance
catch  exception e
throw new runtimeexception e
return result
/**
* load a class by name.
* @param name the class name.
* @return the class object.
* @throws classnotfoundexception if the class is not found.
*/
static private class<?> getclassbyname string name
throws classnotfoundexception
classloader classloader   thread currentthread   getcontextclassloader
return class forname name  true  classloader