/*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase security token
import javax crypto secretkey
import java io ioexception
import java util iterator
import java util map
import java util concurrent concurrenthashmap
import java util concurrent atomic atomiclong
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop conf configuration
import org apache hadoop hbase stoppable
import org apache hadoop hbase util bytes
import org apache hadoop hbase util environmentedgemanager
import org apache hadoop hbase zookeeper clusterid
import org apache hadoop hbase zookeeper zkleadermanager
import org apache hadoop hbase zookeeper zkutil
import org apache hadoop hbase zookeeper zookeeperwatcher
import org apache hadoop io text
import org apache hadoop io writableutils
import org apache hadoop security token secretmanager
import org apache hadoop security token token
import org apache zookeeper keeperexception
/**
* manages an internal list of secret keys used to sign new authentication
* tokens as they are generated, and to valid existing tokens used for
* authentication.
*
* <p>
* a single instance of {@code authenticationtokensecretmanager} will be
* running as the "leader" in a given hbase cluster.  the leader is responsible
* for periodically generating new secret keys, which are then distributed to
* followers via zookeeper, and for expiring previously used secret keys that
* are no longer needed (as any tokens using them have expired).
* </p>
*/
public class authenticationtokensecretmanager
extends secretmanager<authenticationtokenidentifier>
static final string name_prefix
private static log log   logfactory getlog
authenticationtokensecretmanager class
private long lastkeyupdate
private long keyupdateinterval
private long tokenmaxlifetime
private zksecretwatcher zkwatcher
private leaderelector leaderelector
private clusterid clusterid
private map<integer authenticationkey> allkeys
new concurrenthashmap<integer  authenticationkey>
private authenticationkey currentkey
private int idseq
private atomiclong tokenseq   new atomiclong
private string name
/**
* create a new secret manager instance for generating keys.
* @param conf configuration to use
* @param zk connection to zookeeper for handling leader elections
* @param keyupdateinterval time (in milliseconds) between rolling a new master key for token signing
* @param tokenmaxlifetime maximum age (in milliseconds) before a token expires and is no longer valid
*/
/* todo: restrict access to this constructor to make rogues instances more difficult.
* for the moment this class is instantiated from
* org.apache.hadoop.hbase.ipc.secureserver so public access is needed.
*/
public authenticationtokensecretmanager configuration conf
zookeeperwatcher zk  string servername
long keyupdateinterval  long tokenmaxlifetime
this zkwatcher   new zksecretwatcher conf  zk  this
this keyupdateinterval   keyupdateinterval
this tokenmaxlifetime   tokenmaxlifetime
this leaderelector   new leaderelector zk  servername
this name   name_prefix servername
this clusterid   new clusterid zk  zk
public void start
try
// populate any existing keys
this zkwatcher start
// try to become leader
this leaderelector start
catch  keeperexception ke
log error    ke
public void stop
this leaderelector stop
public boolean ismaster
return leaderelector ismaster
public string getname
return name
@override
protected byte createpassword authenticationtokenidentifier identifier
long now   environmentedgemanager currenttimemillis
authenticationkey secretkey   currentkey
identifier setkeyid secretkey getkeyid
identifier setissuedate now
identifier setexpirationdate now   tokenmaxlifetime
identifier setsequencenumber tokenseq getandincrement
return createpassword writableutils tobytearray identifier
secretkey getkey
@override
public byte retrievepassword authenticationtokenidentifier identifier
throws invalidtoken
long now   environmentedgemanager currenttimemillis
if  identifier getexpirationdate   < now
throw new invalidtoken
authenticationkey masterkey   allkeys get identifier getkeyid
if  masterkey    null
throw new invalidtoken
identifier getkeyid
// regenerate the password
return createpassword writableutils tobytearray identifier
masterkey getkey
@override
public authenticationtokenidentifier createidentifier
return new authenticationtokenidentifier
public token<authenticationtokenidentifier> generatetoken string username
authenticationtokenidentifier ident
new authenticationtokenidentifier username
token<authenticationtokenidentifier> token
new token<authenticationtokenidentifier> ident  this
if  clusterid hasid
token setservice new text clusterid getid
return token
public synchronized void addkey authenticationkey key  throws ioexception
// ignore zk changes when running as master
if  leaderelector ismaster
if  log isdebugenabled
log debug   key getkeyid
return
if  log isdebugenabled
log debug   key getkeyid
allkeys put key getkeyid    key
if  currentkey    null    key getkeyid   > currentkey getkeyid
currentkey   key
// update current sequence
if  key getkeyid   > idseq
idseq   key getkeyid
synchronized void removekey integer keyid
// ignore zk changes when running as master
if  leaderelector ismaster
if  log isdebugenabled
log debug   keyid
return
if  log isdebugenabled
log debug   keyid
allkeys remove keyid
authenticationkey getcurrentkey
return currentkey
authenticationkey getkey int keyid
return allkeys get keyid
synchronized void removeexpiredkeys
if   leaderelector ismaster
log info
return
long now   environmentedgemanager currenttimemillis
iterator<authenticationkey> iter   allkeys values   iterator
while  iter hasnext
authenticationkey key   iter next
if  key getexpiration   < now
if  log isdebugenabled
log debug   key getkeyid
iter remove
zkwatcher removekeyfromzk key
synchronized void rollcurrentkey
if   leaderelector ismaster
log info
return
long now   environmentedgemanager currenttimemillis
authenticationkey prev   currentkey
authenticationkey newkey   new authenticationkey   idseq
long max_value     don s replaced by a new key
generatesecret
allkeys put newkey getkeyid    newkey
currentkey   newkey
zkwatcher addkeytozk newkey
lastkeyupdate   now
if  prev    null
// make sure previous key is still stored
prev setexpiration now   tokenmaxlifetime
allkeys put prev getkeyid    prev
zkwatcher updatekeyinzk prev
public static secretkey createsecretkey byte raw
return secretmanager createsecretkey raw
private class leaderelector extends thread implements stoppable
private boolean stopped   false
/** flag indicating whether we're in charge of rolling/expiring keys */
private boolean ismaster   false
private zkleadermanager zkleader
public leaderelector zookeeperwatcher watcher  string servername
setdaemon true
setname
zkleader   new zkleadermanager watcher
zkutil joinznode zkwatcher getrootkeyznode
bytes tobytes servername   this
public boolean ismaster
return ismaster
@override
public boolean isstopped
return stopped
@override
public void stop string reason
if  stopped
return
stopped   true
// prevent further key generation when stopping
if  ismaster
zkleader stepdownasleader
ismaster   false
log info   reason
interrupt
public void run
zkleader start
zkleader waittobecomeleader
ismaster   true
while   stopped
long now   environmentedgemanager currenttimemillis
// clear any expired
removeexpiredkeys
if  lastkeyupdate   keyupdateinterval < now
// roll a new master key
rollcurrentkey
try
thread sleep 5000
catch  interruptedexception ie
if  log isdebugenabled
log debug    ie