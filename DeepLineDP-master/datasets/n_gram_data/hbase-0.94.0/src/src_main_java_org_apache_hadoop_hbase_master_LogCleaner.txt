/**
* copyright 2010 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase master
import java io ioexception
import java util linkedlist
import java util list
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop conf configuration
import org apache hadoop fs filestatus
import org apache hadoop fs filesystem
import org apache hadoop fs path
import org apache hadoop hbase chore
import org apache hadoop hbase remoteexceptionhandler
import org apache hadoop hbase stoppable
import org apache hadoop hbase regionserver wal hlog
import org apache hadoop hbase util fsutils
import static org apache hadoop hbase hconstants hbase_master_logcleaner_plugins
/**
* this chore, everytime it runs, will clear the hlogs in the old logs folder
* that are deletable for each log cleaner in the chain.
*/
public class logcleaner extends chore
static final log log   logfactory getlog logcleaner class getname
private final filesystem fs
private final path oldlogdir
private list<logcleanerdelegate> logcleanerschain
private final configuration conf
/**
*
* @param p the period of time to sleep between each run
* @param s the stopper
* @param conf configuration to use
* @param fs handle to the fs
* @param oldlogdir the path to the archived logs
*/
public logcleaner final int p  final stoppable s
configuration conf  filesystem fs
path oldlogdir
super    p  s
this fs   fs
this oldlogdir   oldlogdir
this conf   conf
this logcleanerschain   new linkedlist<logcleanerdelegate>
initlogcleanerschain
/*
* initialize the chain of log cleaners from the configuration. the default
* in this chain are: timetolivelogcleaner and replicationlogcleaner.
*/
private void initlogcleanerschain
string logcleaners   conf getstrings hbase_master_logcleaner_plugins
if  logcleaners    null
for  string classname   logcleaners
logcleanerdelegate logcleaner   newlogcleaner classname  conf
addlogcleaner logcleaner
/**
* a utility method to create new instances of logcleanerdelegate based
* on the class name of the logcleanerdelegate.
* @param classname fully qualified class name of the logcleanerdelegate
* @param conf
* @return the new instance
*/
public static logcleanerdelegate newlogcleaner string classname  configuration conf
try
class c   class forname classname
logcleanerdelegate cleaner    logcleanerdelegate  c newinstance
cleaner setconf conf
return cleaner
catch exception e
log warn     classname  e
// skipping if can't instantiate
return null
/**
* add a logcleanerdelegate to the log cleaner chain. a log file is deletable
* if it is deletable for each logcleanerdelegate in the chain.
* @param logcleaner
*/
public void addlogcleaner logcleanerdelegate logcleaner
if  logcleaner    null     logcleanerschain contains logcleaner
logcleanerschain add logcleaner
log debug     logcleaner getclass   getname
@override
protected void chore
try
filestatus  files   fsutils liststatus this fs  this oldlogdir  null
if  files    null  return
file  for  filestatus file   files
path filepath   file getpath
if  hlog validatehlogfilename filepath getname
for  logcleanerdelegate logcleaner   logcleanerschain
if  logcleaner isstopped
log warn
return
if   logcleaner islogdeletable filepath
// this log is not deletable, continue to process next log file
continue file
// delete this log file if it passes all the log cleaners
this fs delete filepath  true
else
log warn
file getpath   getname
this fs delete filepath  true
catch  ioexception e
e   remoteexceptionhandler checkioexception e
log warn    e
@override
public void run
try
super run
finally
for  logcleanerdelegate lc  this logcleanerschain
try
lc stop
catch  throwable t
log warn    t