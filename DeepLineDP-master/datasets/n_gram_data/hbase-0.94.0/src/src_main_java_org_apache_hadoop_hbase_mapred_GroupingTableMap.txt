/**
* copyright 2010 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase mapred
import java io ioexception
import java io unsupportedencodingexception
import java util arraylist
import java util map
import org apache hadoop hbase hconstants
import org apache hadoop hbase keyvalue
import org apache hadoop hbase io immutablebyteswritable
import org apache hadoop hbase client result
import org apache hadoop hbase util bytes
import org apache hadoop mapred jobconf
import org apache hadoop mapred mapreducebase
import org apache hadoop mapred outputcollector
import org apache hadoop mapred reporter
/**
* extract grouping columns from input record
*/
@deprecated
public class groupingtablemap
extends mapreducebase
implements tablemap<immutablebyteswritable result>
/**
* jobconf parameter to specify the columns used to produce the key passed to
* collect from the map phase
*/
public static final string group_columns
protected byte  columns
/**
* use this before submitting a tablemap job. it will appropriately set up the
* jobconf.
*
* @param table table to be processed
* @param columns space separated list of columns to fetch
* @param groupcolumns space separated list of columns used to form the key
* used in collect
* @param mapper map class
* @param job job configuration object
*/
@suppresswarnings
public static void initjob string table  string columns  string groupcolumns
class<? extends tablemap> mapper  jobconf job
tablemapreduceutil inittablemapjob table  columns  mapper
immutablebyteswritable class  result class  job
job set group_columns  groupcolumns
@override
public void configure jobconf job
super configure job
string cols   job get group_columns     split
columns   new byte
for int i   0  i < cols length  i
columns   bytes tobytes cols
/**
* extract the grouping columns from value to construct a new key.
*
* pass the new key and value to reduce.
* if any of the grouping columns are not found in the value, the record is skipped.
* @param key
* @param value
* @param output
* @param reporter
* @throws ioexception
*/
public void map immutablebyteswritable key  result value
outputcollector<immutablebyteswritable result> output
reporter reporter  throws ioexception
byte keyvals   extractkeyvalues value
if keyvals    null
immutablebyteswritable tkey   creategroupkey keyvals
output collect tkey  value
/**
* extract columns values from the current record. this method returns
* null if any of the columns are not found.
*
* override this method if you want to deal with nulls differently.
*
* @param r
* @return array of byte values
*/
protected byte extractkeyvalues result r
byte keyvals   null
arraylist<byte> foundlist   new arraylist<byte>
int numcols   columns length
if  numcols > 0
for  keyvalue value  r list
byte  column   keyvalue makecolumn value getfamily
value getqualifier
for  int i   0  i < numcols  i
if  bytes equals column  columns
foundlist add value getvalue
break
if foundlist size      numcols
keyvals   foundlist toarray new byte
return keyvals
/**
* create a key by concatenating multiple column values.
* override this function in order to produce different types of keys.
*
* @param vals
* @return key generated by concatenating multiple column values
*/
protected immutablebyteswritable creategroupkey byte vals
if vals    null
return null
stringbuilder sb    new stringbuilder
for int i   0  i < vals length  i
if i > 0
sb append
try
sb append new string vals  hconstants utf8_encoding
catch  unsupportedencodingexception e
throw new runtimeexception e
return new immutablebyteswritable bytes tobytes sb tostring