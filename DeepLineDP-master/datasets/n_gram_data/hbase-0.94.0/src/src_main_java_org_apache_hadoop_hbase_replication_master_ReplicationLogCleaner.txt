/*
* copyright 2010 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase replication master
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop conf configuration
import org apache hadoop fs path
import org apache hadoop hbase abortable
import org apache hadoop hbase hconstants
import org apache hadoop hbase client hconnectionmanager
import org apache hadoop hbase master logcleanerdelegate
import org apache hadoop hbase replication replicationzookeeper
import org apache hadoop hbase zookeeper zookeeperwatcher
import org apache zookeeper keeperexception
import java io ioexception
import java util hashset
import java util list
import java util set
/**
* implementation of a log cleaner that checks if a log is still scheduled for
* replication before deleting it when its ttl is over.
*/
public class replicationlogcleaner implements logcleanerdelegate  abortable
private static final log log   logfactory getlog replicationlogcleaner class
private configuration conf
private replicationzookeeper zkhelper
private set<string> hlogs   new hashset<string>
private boolean stopped   false
private boolean aborted
/**
* instantiates the cleaner, does nothing more.
*/
public replicationlogcleaner
@override
public boolean islogdeletable path filepath
try
if   zkhelper getreplication
return false
catch  keeperexception e
abort    e
return false
// all members of this class are null if replication is disabled, and we
// return true since false would render the logscleaner useless
if  this conf    null
return true
string log   filepath getname
// if we saw the hlog previously, let's consider it's still used
// at some point in the future we will refresh the list and it will be gone
if  this hlogs contains log
return false
// let's see it's still there
// this solution makes every miss very expensive to process since we
// almost completely refresh the cache each time
return  refreshhlogsandsearch log
/**
* search through all the hlogs we have in zk to refresh the cache
* if a log is specified and found, then we early out and return true
* @param searchedlog log we are searching for, pass null to cache everything
*                    that's in zookeeper.
* @return false until a specified log is found.
*/
private boolean refreshhlogsandsearch string searchedlog
this hlogs clear
final boolean lookforlog   searchedlog    null
list<string> rss   zkhelper getlistofreplicators
if  rss    null
log debug
searchedlog
return false
for  string rs  rss
list<string> listofpeers   zkhelper getlistpeersforrs rs
// if rs just died, this will be null
if  listofpeers    null
continue
for  string id   listofpeers
list<string> peershlogs   zkhelper getlisthlogsforpeerforrs rs  id
if  peershlogs    null
this hlogs addall peershlogs
// early exit if we found the log
if lookforlog    this hlogs contains searchedlog
log debug     searchedlog
return true
log debug     searchedlog
return false
@override
public void setconf configuration conf
// if replication is disabled, keep all members null
if   conf getboolean hconstants replication_enable_key  false
return
// make my own configuration.  then i'll have my own connection to zk that
// i can close myself when comes time.
this conf   new configuration conf
try
zookeeperwatcher zkw
new zookeeperwatcher this conf     null
this zkhelper   new replicationzookeeper this  this conf  zkw
catch  keeperexception e
log error     this getclass   getname    e
catch  ioexception e
log error     this getclass   getname    e
refreshhlogsandsearch null
@override
public configuration getconf
return conf
@override
public void stop string why
if  this stopped  return
this stopped   true
if  this zkhelper    null
log info     this zkhelper getzookeeperwatcher
this zkhelper getzookeeperwatcher   close
// not sure why we're deleting a connection that we never acquired or used
hconnectionmanager deleteconnection this conf  true
@override
public boolean isstopped
return this stopped
@override
public void abort string why  throwable e
log warn     why  e
this aborted   true
stop why
@override
public boolean isaborted
return this aborted