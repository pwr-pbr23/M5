/**
* copyright 2008 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase mapreduce
import java io ioexception
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop conf configurable
import org apache hadoop conf configuration
import org apache hadoop hbase hbaseconfiguration
import org apache hadoop hbase client htable
import org apache hadoop hbase io immutablebyteswritable
import org apache hadoop hbase util bytes
import org apache hadoop mapreduce partitioner
/**
* this is used to partition the output keys into groups of keys.
* keys are grouped according to the regions that currently exist
* so that each reducer fills a single region so load is distributed.
*
* <p>this class is not suitable as partitioner creating hfiles
* for incremental bulk loads as region spread will likely change between time of
* hfile creation and load time. see {@link loadincrementalhfiles}
* and <a href="http://hbase.apache.org/docs/current/bulk-loads.html">bulk load</a>.
*
* @param <key>  the type of the key.
* @param <value>  the type of the value.
*/
public class hregionpartitioner<key  value>
extends partitioner<immutablebyteswritable  value>
implements configurable
private final log log   logfactory getlog tableinputformat class
private configuration conf   null
private htable table
private byte startkeys
/**
* gets the partition number for a given key (hence record) given the total
* number of partitions i.e. number of reduce-tasks for the job.
*
* <p>typically a hash function on a all or a subset of the key.</p>
*
* @param key  the key to be partitioned.
* @param value  the entry value.
* @param numpartitions  the total number of partitions.
* @return the partition number for the <code>key</code>.
* @see org.apache.hadoop.mapreduce.partitioner#getpartition(
*   java.lang.object, java.lang.object, int)
*/
@override
public int getpartition immutablebyteswritable key
value value  int numpartitions
byte region   null
// only one region return 0
if  this startkeys length    1
return 0
try
// not sure if this is cached after a split so we could have problems
// here if a region splits while mapping
region   table getregionlocation key get    getregioninfo   getstartkey
catch  ioexception e
log error e
for  int i   0  i < this startkeys length  i
if  bytes compareto region  this startkeys     0
if  i >  numpartitions 1
// cover if we have less reduces then regions.
return  integer tostring i  hashcode
integer max_value  % numpartitions
return i
// if above fails to find start key that match we need to return something
return 0
/**
* returns the current configuration.
*
* @return the current configuration.
* @see org.apache.hadoop.conf.configurable#getconf()
*/
@override
public configuration getconf
return conf
/**
* sets the configuration. this is used to determine the start keys for the
* given table.
*
* @param configuration  the configuration to set.
* @see org.apache.hadoop.conf.configurable#setconf(
*   org.apache.hadoop.conf.configuration)
*/
@override
public void setconf configuration configuration
this conf   hbaseconfiguration create configuration
try
this table   new htable this conf
configuration get tableoutputformat output_table
catch  ioexception e
log error e
try
this startkeys   this table getstartkeys
catch  ioexception e
log error e