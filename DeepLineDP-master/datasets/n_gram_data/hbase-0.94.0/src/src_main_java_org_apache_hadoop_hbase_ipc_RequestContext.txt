/*
* copyright the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase ipc
import org apache hadoop hbase security user
import java net inetaddress
/**
* represents client information (authenticated username, remote address, protocol)
* for the currently executing request within a rpc server handler thread.  if
* called outside the context of a rpc request, all values will be
* <code>null</code>.
*/
public class requestcontext
private static threadlocal<requestcontext> instance
new threadlocal<requestcontext>
protected requestcontext initialvalue
return new requestcontext null  null  null
public static requestcontext get
return instance get
/**
* returns the user credentials associated with the current rpc request or
* <code>null</code> if no credentials were provided.
* @return a user
*/
public static user getrequestuser
requestcontext ctx   instance get
if  ctx    null
return ctx getuser
return null
/**
* returns the username for any user associated with the current rpc
* request or <code>null</code> if no user is set.
*/
public static string getrequestusername
user user   getrequestuser
if  user    null
return user getshortname
return null
/**
* indicates whether or not the current thread is within scope of executing
* an rpc request.
*/
public static boolean isinrequestcontext
requestcontext ctx   instance get
if  ctx    null
return ctx isinrequest
return false
/**
* initializes the client credentials for the current request.
* @param user
* @param remoteaddress
* @param protocol
*/
public static void set user user
inetaddress remoteaddress
class<? extends versionedprotocol> protocol
requestcontext ctx   instance get
ctx user   user
ctx remoteaddress   remoteaddress
ctx protocol   protocol
ctx inrequest   true
/**
* clears out the client credentials for a given request.
*/
public static void clear
requestcontext ctx   instance get
ctx user   null
ctx remoteaddress   null
ctx protocol   null
ctx inrequest   false
private user user
private inetaddress remoteaddress
private class<? extends versionedprotocol> protocol
// indicates we're within a rpc request invocation
private boolean inrequest
private requestcontext user user  inetaddress remoteaddr
class<? extends versionedprotocol> protocol
this user   user
this remoteaddress   remoteaddr
this protocol   protocol
public user getuser
return user
public inetaddress getremoteaddress
return remoteaddress
public class<? extends versionedprotocol> getprotocol
return protocol
public boolean isinrequest
return inrequest