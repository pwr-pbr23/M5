/**
* copyright 2010 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase coprocessor
import java io ioexception
import org apache hadoop hbase keyvalue
import org apache hadoop hbase client coprocessor longcolumninterpreter
import org apache hadoop io writable
/**
* defines how value for specific column is interpreted and provides utility
* methods like compare, add, multiply etc for them. takes column family, column
* qualifier and return the cell value. its concrete implementation should
* handle null case gracefully. refer to {@link longcolumninterpreter} for an
* example.
* <p>
* takes two generic parameters. the cell value type of the interpreter is <t>.
* during some computations like sum, average, the return type can be different
* than the cell value data type, for eg, sum of int cell values might overflow
* in case of a int result, we should use long for its result. therefore, this
* class mandates to use a different (promoted) data type for result of these
* computations <s>. all computations are performed on the promoted data type
* <s>. there is a conversion method
* {@link columninterpreter#casttoreturntype(object)} which takes a <t> type and
* returns a <s> type.
* @param <t> cell value data type
* @param <s> promoted data type
*/
public interface columninterpreter<t  s> extends writable
/**
* @param colfamily
* @param colqualifier
* @param kv
* @return value of type t
* @throws ioexception
*/
t getvalue byte colfamily  byte colqualifier  keyvalue kv
throws ioexception
/**
* @param l1
* @param l2
* @return sum or non null value among (if either of them is null); otherwise
* returns a null.
*/
public s add s l1  s l2
/**
* returns the maximum value for this type t
* @return max
*/
t getmaxvalue
t getminvalue
/**
* @param o1
* @param o2
* @return multiplication
*/
s multiply s o1  s o2
/**
* @param o
* @return increment
*/
s increment s o
/**
* provides casting opportunity between the data types.
* @param o
* @return cast
*/
s casttoreturntype t o
/**
* this takes care if either of arguments are null. returns 0 if they are
* equal or both are null;
* <ul>
* <li>>0 if l1 > l2 or l1 is not null and l2 is null.
* <li>< 0 if l1 < l2 or l1 is null and l2 is not null.
*/
int compare final t l1  final t l2
/**
* used for computing average of <s> data values. not providing the divide
* method that takes two <s> values as it is not needed as of now.
* @param o
* @param l
* @return average
*/
double divideforavg s o  long l