/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase mapreduce
import java io ioexception
import java lang reflect constructor
import java lang reflect method
import java util concurrent executorservice
import java util concurrent executors
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop conf configuration
import org apache hadoop hbase client result
import org apache hadoop hbase io immutablebyteswritable
import org apache hadoop mapreduce counter
import org apache hadoop mapreduce inputsplit
import org apache hadoop mapreduce job
import org apache hadoop mapreduce jobcontext
import org apache hadoop mapreduce mapcontext
import org apache hadoop mapreduce mapper
import org apache hadoop mapreduce outputcommitter
import org apache hadoop mapreduce recordreader
import org apache hadoop mapreduce recordwriter
import org apache hadoop mapreduce statusreporter
import org apache hadoop mapreduce taskattemptcontext
import org apache hadoop mapreduce taskattemptid
import org apache hadoop util reflectionutils
/**
* multithreaded implementation for @link org.apache.hbase.mapreduce.tablemapper
* <p>
* it can be used instead when the map operation is not cpu
* bound in order to improve throughput.
* <p>
* mapper implementations using this maprunnable must be thread-safe.
* <p>
* the map-reduce job has to be configured with the mapper to use via
* {@link #setmapperclass(configuration, class)} and
* the number of thread the thread-pool can use with the
* {@link #getnumberofthreads(configuration) method. the default
* value is 10 threads.
* <p>
*/
public class multithreadedtablemapper<k2  v2> extends tablemapper<k2  v2>
private static final log log   logfactory getlog multithreadedtablemapper class
private class<? extends mapper<immutablebyteswritable  result k2 v2>> mapclass
private context outer
private executorservice executor
public static final string number_of_threads
public static final string mapper_class
/**
* the number of threads in the thread pool that will run the map function.
* @param job the job
* @return the number of threads
*/
public static int getnumberofthreads jobcontext job
return job getconfiguration
getint number_of_threads  10
/**
* set the number of threads in the pool for running maps.
* @param job the job to modify
* @param threads the new number of threads
*/
public static void setnumberofthreads job job  int threads
job getconfiguration   setint number_of_threads
threads
/**
* get the application's mapper class.
* @param <k2> the map's output key type
* @param <v2> the map's output value type
* @param job the job
* @return the mapper class to run
*/
@suppresswarnings
public static <k2 v2>
class<mapper<immutablebyteswritable  result k2 v2>> getmapperclass jobcontext job
return  class<mapper<immutablebyteswritable  result k2 v2>>
job getconfiguration   getclass  mapper_class
mapper class
/**
* set the application's mapper class.
* @param <k2> the map output key type
* @param <v2> the map output value type
* @param job the job to modify
* @param cls the class to use as the mapper
*/
public static <k2 v2>
void setmapperclass job job
class<? extends mapper<immutablebyteswritable  result k2 v2>> cls
if  multithreadedtablemapper class isassignablefrom cls
throw new illegalargumentexception
job getconfiguration   setclass mapper_class
cls  mapper class
/**
* run the application's maps using a thread pool.
*/
@override
public void run context context  throws ioexception  interruptedexception
outer   context
int numberofthreads   getnumberofthreads context
mapclass   getmapperclass context
if  log isdebugenabled
log debug     numberofthreads
executor   executors newfixedthreadpool numberofthreads
for int i 0  i < numberofthreads    i
maprunner thread   new maprunner context
executor execute thread
executor shutdown
while   executor isterminated
// wait till all the threads are done
thread sleep 1000
private class submaprecordreader
extends recordreader<immutablebyteswritable  result>
private immutablebyteswritable key
private result value
private configuration conf
@override
public void close   throws ioexception
@override
public float getprogress   throws ioexception  interruptedexception
return 0
@override
public void initialize inputsplit split
taskattemptcontext context
throws ioexception  interruptedexception
conf   context getconfiguration
@override
public boolean nextkeyvalue   throws ioexception  interruptedexception
synchronized  outer
if   outer nextkeyvalue
return false
key   reflectionutils copy outer getconfiguration
outer getcurrentkey    key
value   reflectionutils copy conf  outer getcurrentvalue    value
return true
public immutablebyteswritable getcurrentkey
return key
@override
public result getcurrentvalue
return value
private class submaprecordwriter extends recordwriter<k2 v2>
@override
public void close taskattemptcontext context  throws ioexception
interruptedexception
@override
public void write k2 key  v2 value  throws ioexception
interruptedexception
synchronized  outer
outer write key  value
private class submapstatusreporter extends statusreporter
@override
public counter getcounter enum<?> name
return outer getcounter name
@override
public counter getcounter string group  string name
return outer getcounter group  name
@override
public void progress
outer progress
@override
public void setstatus string status
outer setstatus status
public float getprogress
return 0
private class maprunner implements runnable
private mapper<immutablebyteswritable  result  k2 v2> mapper
private context subcontext
private throwable throwable
@suppresswarnings
maprunner context context  throws ioexception  interruptedexception
mapper   reflectionutils newinstance mapclass
context getconfiguration
try
constructor c   context getclass   getconstructor
mapper class
configuration class
taskattemptid class
recordreader class
recordwriter class
outputcommitter class
statusreporter class
inputsplit class
c setaccessible true
subcontext    context  c newinstance
mapper
outer getconfiguration
outer gettaskattemptid
new submaprecordreader
new submaprecordwriter
context getoutputcommitter
new submapstatusreporter
outer getinputsplit
catch  exception e
try
constructor c   class forname    getconstructor
configuration class
taskattemptid class
recordreader class
recordwriter class
outputcommitter class
statusreporter class
inputsplit class
c setaccessible true
mapcontext mc    mapcontext  c newinstance
outer getconfiguration
outer gettaskattemptid
new submaprecordreader
new submaprecordwriter
context getoutputcommitter
new submapstatusreporter
outer getinputsplit
class<?> wrappedmapperclass   class forname
method getmapcontext   wrappedmapperclass getmethod    mapcontext class
subcontext    context  getmapcontext invoke wrappedmapperclass newinstance    mc
catch  exception ee
// rethrow as ioe
throw new ioexception e
@override
public void run
try
mapper run subcontext
catch  throwable ie
throwable   ie