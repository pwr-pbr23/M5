/*
* copyright 2009 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase client
import org apache hadoop io writable
import org apache hadoop hbase io hbaseobjectwritable
import org apache hadoop hbase util bytes
import java io dataoutput
import java io ioexception
import java io datainput
import java util arraylist
import java util list
import java util map
import java util set
import java util treemap
/**
* container for actions (i.e. get, delete, or put), which are grouped by
* regionname. intended to be used with hconnectionmanager.processbatch()
*/
public final class multiaction<r> implements writable
// map of regions to lists of puts/gets/deletes for that region.
public map<byte  list<action<r>>> actions
new treemap<byte  list<action<r>>>
bytes bytes_comparator
public multiaction
/**
* get the total number of actions
*
* @return total number of actions for all groups in this container.
*/
public int size
int size   0
for  list l   actions values
size    l size
return size
/**
* add an action to this container based on it's regionname. if the regionname
* is wrong, the initial execution will fail, but will be automatically
* retried after looking up the correct region.
*
* @param regionname
* @param a
*/
public void add byte regionname  action<r> a
list<action<r>> rsactions   actions get regionname
if  rsactions    null
rsactions   new arraylist<action<r>>
actions put regionname  rsactions
rsactions add a
public set<byte> getregions
return actions keyset
/**
* @return all actions from all regions in this container
*/
public list<action<r>> allactions
list<action<r>> res   new arraylist<action<r>>
for  list<action<r>> lst   actions values
res addall lst
return res
@override
public void write dataoutput out  throws ioexception
out writeint actions size
for  map entry<byte  list<action<r>>> e   actions entryset
bytes writebytearray out  e getkey
list<action<r>> lst   e getvalue
out writeint lst size
for  action a   lst
hbaseobjectwritable writeobject out  a  a getclass    null
@override
public void readfields datainput in  throws ioexception
actions clear
int mapsize   in readint
for  int i   0  i < mapsize  i
byte key   bytes readbytearray in
int listsize   in readint
list<action<r>> lst   new arraylist<action<r>> listsize
for  int j   0  j < listsize  j
lst add  action  hbaseobjectwritable readobject in  null
actions put key  lst