/**
* copyright 2010 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase zookeeper
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop hbase abortable
import org apache zookeeper keeperexception
/**
* tracks the availability and value of a single zookeeper node.
*
* <p>utilizes the {@link zookeeperlistener} interface to get the necessary
* zookeeper events related to the node.
*
* <p>this is the base class used by trackers in both the master and
* regionservers.
*/
public abstract class zookeepernodetracker extends zookeeperlistener
static final log log   logfactory getlog zookeepernodetracker class
/** path of node being tracked */
protected final string node
/** data of the node being tracked */
private byte  data
/** used to abort if a fatal error occurs */
protected final abortable abortable
private boolean stopped   false
/**
* constructs a new zk node tracker.
*
* <p>after construction, use {@link #start} to kick off tracking.
*
* @param watcher
* @param node
* @param abortable
*/
public zookeepernodetracker zookeeperwatcher watcher  string node
abortable abortable
super watcher
this node   node
this abortable   abortable
this data   null
/**
* starts the tracking of the node in zookeeper.
*
* <p>use {@link #blockuntilavailable()} to block until the node is available
* or {@link #getdata(boolean)} to get the data of the node if it is available.
*/
public synchronized void start
try
zkutil waitforzkconnectionifauthenticating watcher
catch  interruptedexception e
throw new illegalstateexception     this node
e
this watcher registerlistener this
try
if zkutil watchandcheckexists watcher  node
byte  data   zkutil getdataandwatch watcher  node
if data    null
this data   data
else
// it existed but now does not, try again to ensure a watch is set
log debug     node
start
catch  keeperexception e
abortable abort    e
public synchronized void stop
this stopped   true
notifyall
/**
* gets the data of the node, blocking until the node is available.
*
* @return data of the node
* @throws interruptedexception if the waiting thread is interrupted
*/
public synchronized byte  blockuntilavailable
throws interruptedexception
return blockuntilavailable 0  false
/**
* gets the data of the node, blocking until the node is available or the
* specified timeout has elapsed.
*
* @param timeout maximum time to wait for the node data to be available,
* n milliseconds.  pass 0 for no timeout.
* @return data of the node
* @throws interruptedexception if the waiting thread is interrupted
*/
public synchronized byte  blockuntilavailable long timeout  boolean refresh
throws interruptedexception
if  timeout < 0  throw new illegalargumentexception
boolean notimeout   timeout    0
long starttime   system currenttimemillis
long remaining   timeout
if  refresh
try
this data   zkutil getdataandwatch watcher  node
catch keeperexception e
abortable abort    e
while   this stopped     notimeout    remaining > 0     this data    null
// we expect a notification; but we wait with a
//  a timeout to lower the impact of a race condition if any
wait 100
remaining   timeout    system currenttimemillis     starttime
return this data
/**
* gets the data of the node.
*
* <p>if the node is currently available, the most up-to-date known version of
* the data is returned.  if the node is not currently available, null is
* returned.
* @param refresh whether to refresh the data by calling zk directly.
* @return data of the node, null if unavailable
*/
public synchronized byte  getdata boolean refresh
if  refresh
try
this data   zkutil getdataandwatch watcher  node
catch keeperexception e
abortable abort    e
return this data
public string getnode
return this node
@override
public synchronized void nodecreated string path
if   path equals node   return
try
byte  data   zkutil getdataandwatch watcher  node
if  data    null
this data   data
notifyall
else
nodedeleted path
catch keeperexception e
abortable abort    e
@override
public synchronized void nodedeleted string path
if path equals node
try
if zkutil watchandcheckexists watcher  node
nodecreated path
else
this data   null
catch keeperexception e
abortable abort    e
@override
public synchronized void nodedatachanged string path
if path equals node
nodecreated path
/**
* checks if the baseznode set as per the property 'zookeeper.znode.parent'
* exists.
* @return true if baseznode exists.
*         false if doesnot exists.
*/
public boolean checkifbasenodeavailable
try
if  zkutil checkexists watcher  watcher baseznode      1
return false
catch  keeperexception e
abortable
abort
e
return true