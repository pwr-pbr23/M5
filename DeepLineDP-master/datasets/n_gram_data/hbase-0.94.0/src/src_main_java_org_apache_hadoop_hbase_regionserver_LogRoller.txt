/**
* copyright 2010 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase regionserver
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop fs path
import org apache hadoop hbase
import org apache hadoop hbase regionserver wal failedlogcloseexception
import org apache hadoop hbase regionserver wal hlogkey
import org apache hadoop hbase regionserver wal waledit
import org apache hadoop hbase regionserver wal walactionslistener
import org apache hadoop hbase util bytes
import org apache hadoop hbase util hasthread
import java io ioexception
import java util concurrent atomic atomicboolean
import java util concurrent locks reentrantlock
/**
* runs periodically to determine if the hlog should be rolled.
*
* note: this class extends thread rather than chore because the sleep time
* can be interrupted when there is something to do, rather than the chore
* sleep time which is invariant.
*/
class logroller extends hasthread implements walactionslistener
static final log log   logfactory getlog logroller class
private final reentrantlock rolllock   new reentrantlock
private final atomicboolean rolllog   new atomicboolean false
private final server server
private final regionserverservices services
private volatile long lastrolltime   system currenttimemillis
// period to roll log.
private final long rollperiod
private final int threadwakefrequency
/** @param server */
public logroller final server server  final regionserverservices services
super
this server   server
this services   services
this rollperiod   this server getconfiguration
getlong    3600000
this threadwakefrequency   this server getconfiguration
getint hconstants thread_wake_frequency  10   1000
@override
public void run
while   server isstopped
long now   system currenttimemillis
boolean periodic   false
if   rolllog get
periodic    now   this lastrolltime  > this rollperiod
if   periodic
synchronized  rolllog
try
rolllog wait this threadwakefrequency
catch  interruptedexception e
// fall through
continue
// time for periodic roll
if  log isdebugenabled
log debug     this rollperiod
else if  log isdebugenabled
log debug
rolllock lock       findbugs ul_unreleased_lock_exception_path
try
this lastrolltime   now
// this is array of actual region names.
byte  regionstoflush   this services getwal   rollwriter rolllog get
if  regionstoflush    null
for  byte  r  regionstoflush  scheduleflush r
catch  failedlogcloseexception e
server abort    e
catch  java net connectexception e
server abort    e
catch  ioexception ex
// abort if we get here.  we probably won't recover an ioe. hbase-1132
server abort
remoteexceptionhandler checkioexception ex
catch  exception ex
log error    ex
server abort    ex
finally
rolllog set false
rolllock unlock
log info
/**
* @param encodedregionname encoded name of region to flush.
*/
private void scheduleflush final byte  encodedregionname
boolean scheduled   false
hregion r   this services getfromonlineregions bytes tostring encodedregionname
flushrequester requester   null
if  r    null
requester   this services getflushrequester
if  requester    null
requester requestflush r
scheduled   true
if   scheduled
log warn
bytes tostring encodedregionname        r
requester
public void logrollrequested
synchronized  rolllog
rolllog set true
rolllog notifyall
/**
* called by region server to wake up this thread if it sleeping.
* it is sleeping if rolllock is not held.
*/
public void interruptifnecessary
try
rolllock lock
this interrupt
finally
rolllock unlock
@override
public void prelogroll path oldpath  path newpath  throws ioexception
// not interested
@override
public void postlogroll path oldpath  path newpath  throws ioexception
// not interested
@override
public void prelogarchive path oldpath  path newpath  throws ioexception
// not interested
@override
public void postlogarchive path oldpath  path newpath  throws ioexception
// not interested
@override
public void visitlogentrybeforewrite hregioninfo info  hlogkey logkey
waledit logedit
// not interested.
@override
public void visitlogentrybeforewrite htabledescriptor htd  hlogkey logkey
waledit logedit
//not interested
@override
public void logcloserequested
// not interested