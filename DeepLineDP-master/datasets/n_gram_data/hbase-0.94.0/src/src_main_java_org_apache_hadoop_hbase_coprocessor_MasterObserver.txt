/*
* copyright 2011 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
* http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase coprocessor
import org apache hadoop hbase
import java io ioexception
/**
* defines coprocessor hooks for interacting with operations on the
* {@link org.apache.hadoop.hbase.master.hmaster} process.
*/
public interface masterobserver extends coprocessor
/**
* called before a new table is created by
* {@link org.apache.hadoop.hbase.master.hmaster}.
* it can't bypass the default action, e.g., ctx.bypass() won't have effect.
* @param ctx the environment to interact with the framework and master
* @param desc the htabledescriptor for the table
* @param regions the initial regions created for the table
* @throws ioexception
*/
void precreatetable final observercontext<mastercoprocessorenvironment> ctx
htabledescriptor desc  hregioninfo regions  throws ioexception
/**
* called after the createtable operation has been requested.
* @param ctx the environment to interact with the framework and master
* @param desc the htabledescriptor for the table
* @param regions the initial regions created for the table
* @throws ioexception
*/
void postcreatetable final observercontext<mastercoprocessorenvironment> ctx
htabledescriptor desc  hregioninfo regions  throws ioexception
/**
* called before {@link org.apache.hadoop.hbase.master.hmaster} deletes a
* table
* it can't bypass the default action, e.g., ctx.bypass() won't have effect.
* @param ctx the environment to interact with the framework and master
* @param tablename the name of the table
*/
void predeletetable final observercontext<mastercoprocessorenvironment> ctx
byte tablename  throws ioexception
/**
* called after the deletetable operation has been requested.
* @param ctx the environment to interact with the framework and master
* @param tablename the name of the table
*/
void postdeletetable final observercontext<mastercoprocessorenvironment> ctx
byte tablename  throws ioexception
/**
* called prior to modifying a table's properties.
* it can't bypass the default action, e.g., ctx.bypass() won't have effect.
* @param ctx the environment to interact with the framework and master
* @param tablename the name of the table
* @param htd the htabledescriptor
*/
void premodifytable final observercontext<mastercoprocessorenvironment> ctx
final byte tablename  htabledescriptor htd  throws ioexception
/**
* called after the modifytable operation has been requested.
* @param ctx the environment to interact with the framework and master
* @param tablename the name of the table
* @param htd the htabledescriptor
*/
void postmodifytable final observercontext<mastercoprocessorenvironment> ctx
final byte tablename  htabledescriptor htd  throws ioexception
/**
* called prior to adding a new column family to the table.
* @param ctx the environment to interact with the framework and master
* @param tablename the name of the table
* @param column the hcolumndescriptor
*/
void preaddcolumn final observercontext<mastercoprocessorenvironment> ctx
byte tablename  hcolumndescriptor column  throws ioexception
/**
* called after the new column family has been created.
* @param ctx the environment to interact with the framework and master
* @param tablename the name of the table
* @param column the hcolumndescriptor
*/
void postaddcolumn final observercontext<mastercoprocessorenvironment> ctx
byte tablename  hcolumndescriptor column  throws ioexception
/**
* called prior to modifying a column family's attributes.
* @param ctx the environment to interact with the framework and master
* @param tablename the name of the table
* @param descriptor the hcolumndescriptor
*/
void premodifycolumn final observercontext<mastercoprocessorenvironment> ctx
byte  tablename  hcolumndescriptor descriptor  throws ioexception
/**
* called after the column family has been updated.
* @param ctx the environment to interact with the framework and master
* @param tablename the name of the table
* @param descriptor the hcolumndescriptor
*/
void postmodifycolumn final observercontext<mastercoprocessorenvironment> ctx
byte tablename  hcolumndescriptor descriptor  throws ioexception
/**
* called prior to deleting the entire column family.
* @param ctx the environment to interact with the framework and master
* @param tablename the name of the table
* @param c the column
*/
void predeletecolumn final observercontext<mastercoprocessorenvironment> ctx
final byte  tablename  final byte c  throws ioexception
/**
* called after the column family has been deleted.
* @param ctx the environment to interact with the framework and master
* @param tablename the name of the table
* @param c the column
*/
void postdeletecolumn final observercontext<mastercoprocessorenvironment> ctx
final byte  tablename  final byte c  throws ioexception
/**
* called prior to enabling a table.
* it can't bypass the default action, e.g., ctx.bypass() won't have effect.
* @param ctx the environment to interact with the framework and master
* @param tablename the name of the table
*/
void preenabletable final observercontext<mastercoprocessorenvironment> ctx
final byte tablename  throws ioexception
/**
* called after the enabletable operation has been requested.
* @param ctx the environment to interact with the framework and master
* @param tablename the name of the table
*/
void postenabletable final observercontext<mastercoprocessorenvironment> ctx
final byte tablename  throws ioexception
/**
* called prior to disabling a table.
* it can't bypass the default action, e.g., ctx.bypass() won't have effect.
* @param ctx the environment to interact with the framework and master
* @param tablename the name of the table
*/
void predisabletable final observercontext<mastercoprocessorenvironment> ctx
final byte tablename  throws ioexception
/**
* called after the disabletable operation has been requested.
* @param ctx the environment to interact with the framework and master
* @param tablename the name of the table
*/
void postdisabletable final observercontext<mastercoprocessorenvironment> ctx
final byte tablename  throws ioexception
/**
* called prior to moving a given region from one region server to another.
* @param ctx the environment to interact with the framework and master
* @param region the hregioninfo
* @param srcserver the source servername
* @param destserver the destination servername
*/
void premove final observercontext<mastercoprocessorenvironment> ctx
final hregioninfo region  final servername srcserver
final servername destserver
throws ioexception
/**
* called after the region move has been requested.
* @param ctx the environment to interact with the framework and master
* @param region the hregioninfo
* @param srcserver the source servername
* @param destserver the destination servername
*/
void postmove final observercontext<mastercoprocessorenvironment> ctx
final hregioninfo region  final servername srcserver
final servername destserver
throws ioexception
/**
* called prior to assigning a specific region.
* @param ctx the environment to interact with the framework and master
* @param regioninfo the regioninfo of the region
*/
void preassign final observercontext<mastercoprocessorenvironment> ctx
final hregioninfo regioninfo  throws ioexception
/**
* called after the region assignment has been requested.
* @param ctx the environment to interact with the framework and master
* @param regioninfo the regioninfo of the region
*/
void postassign final observercontext<mastercoprocessorenvironment> ctx
final hregioninfo regioninfo  throws ioexception
/**
* called prior to unassigning a given region.
* @param ctx the environment to interact with the framework and master
* @param regioninfo
* @param force whether to force unassignment or not
*/
void preunassign final observercontext<mastercoprocessorenvironment> ctx
final hregioninfo regioninfo  final boolean force  throws ioexception
/**
* called after the region unassignment has been requested.
* @param ctx the environment to interact with the framework and master
* @param regioninfo
* @param force whether to force unassignment or not
*/
void postunassign final observercontext<mastercoprocessorenvironment> ctx
final hregioninfo regioninfo  final boolean force  throws ioexception
/**
* called prior to requesting rebalancing of the cluster regions, though after
* the initial checks for regions in transition and the balance switch flag.
* @param ctx the environment to interact with the framework and master
*/
void prebalance final observercontext<mastercoprocessorenvironment> ctx
throws ioexception
/**
* called after the balancing plan has been submitted.
* @param ctx the environment to interact with the framework and master
*/
void postbalance final observercontext<mastercoprocessorenvironment> ctx
throws ioexception
/**
* called prior to modifying the flag used to enable/disable region balancing.
* @param ctx the coprocessor instance's environment
* @param newvalue the new flag value submitted in the call
*/
boolean prebalanceswitch final observercontext<mastercoprocessorenvironment> ctx
final boolean newvalue  throws ioexception
/**
* called after the flag to enable/disable balancing has changed.
* @param ctx the coprocessor instance's environment
* @param oldvalue the previously set balanceswitch value
* @param newvalue the newly set balanceswitch value
*/
void postbalanceswitch final observercontext<mastercoprocessorenvironment> ctx
final boolean oldvalue  final boolean newvalue  throws ioexception
/**
* called prior to shutting down the full hbase cluster, including this
* {@link org.apache.hadoop.hbase.master.hmaster} process.
*/
void preshutdown final observercontext<mastercoprocessorenvironment> ctx
throws ioexception
/**
* called immediately prior to stopping this
* {@link org.apache.hadoop.hbase.master.hmaster} process.
*/
void prestopmaster final observercontext<mastercoprocessorenvironment> ctx
throws ioexception
/**
* called immediately after an active master instance has completed
* initialization.  will not be called on standby master instances unless
* they take over the active role.
*/
void poststartmaster final observercontext<mastercoprocessorenvironment> ctx
throws ioexception