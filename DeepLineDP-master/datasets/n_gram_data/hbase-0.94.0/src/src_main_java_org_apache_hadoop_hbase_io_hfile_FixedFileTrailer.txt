/*
* copyright 2011 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase io hfile
import java io bytearrayinputstream
import java io bytearrayoutputstream
import java io datainputstream
import java io dataoutput
import java io dataoutputstream
import java io ioexception
import java nio bytebuffer
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop fs fsdatainputstream
import org apache hadoop hbase util bytes
import org apache hadoop io rawcomparator
import static org apache hadoop hbase io hfile hfile min_format_version
import static org apache hadoop hbase io hfile hfile max_format_version
import com google common io nulloutputstream
/**
* the {@link hfile} has a fixed trailer which contains offsets to other
* variable parts of the file. also includes basic metadata on this file. the
* trailer size is fixed within a given {@link hfile} format version only, but
* we always store the version number as the last four-byte integer of the file.
* the version number itself is split into two portions, a major
* version and a minor version.
* the last three bytes of a file is the major
* version and a single preceding byte is the minor number. the major version
* determines which readers/writers to use to read/write a hfile while a minor
* version determines smaller changes in hfile format that do not need a new
* reader/writer type.
*/
public class fixedfiletrailer
private static final log log   logfactory getlog fixedfiletrailer class
/**
* we store the comparator class name as a fixed-length field in the trailer.
*/
private static final int max_comparator_name_length   128
/**
* offset to the fileinfo data, a small block of vitals. necessary in v1 but
* only potentially useful for pretty-printing in v2.
*/
private long fileinfooffset
/**
* in version 1, the offset to the data block index. starting from version 2,
* the meaning of this field is the offset to the section of the file that
* should be loaded at the time the file is being opened, and as of the time
* of writing, this happens to be the offset of the file info section.
*/
private long loadonopendataoffset
/** the number of entries in the root data index. */
private int dataindexcount
/** total uncompressed size of all blocks of the data index */
private long uncompresseddataindexsize
/** the number of entries in the meta index */
private int metaindexcount
/** the total uncompressed size of keys/values stored in the file. */
private long totaluncompressedbytes
/**
* the number of key/value pairs in the file. this field was int in version 1,
* but is now long.
*/
private long entrycount
/** the compression codec used for all blocks. */
private compression algorithm compressioncodec   compression algorithm none
/**
* the number of levels in the potentially multi-level data index. used from
* version 2 onwards.
*/
private int numdataindexlevels
/** the offset of the first data block. */
private long firstdatablockoffset
/**
* it is guaranteed that no key/value data blocks start after this offset in
* the file.
*/
private long lastdatablockoffset
/** raw key comparator class name in version 2 */
private string comparatorclassname   rawcomparator class getname
/** the {@link hfile} format major version. */
private final int majorversion
/** the {@link hfile} format minor version. */
private final int minorversion
fixedfiletrailer int majorversion  int minorversion
this majorversion   majorversion
this minorversion   minorversion
hfile checkformatversion majorversion
private static int computetrailersizebyversion
int versiontosize   new int
for  int version   min_format_version
version <  max_format_version
version
fixedfiletrailer fft   new fixedfiletrailer version
hfileblock minor_version_no_checksum
dataoutputstream dos   new dataoutputstream new nulloutputstream
try
fft serialize dos
catch  ioexception ex
// the above has no reason to fail.
throw new runtimeexception ex
versiontosize   dos size
return versiontosize
private static int getmaxtrailersize
int maxsize   0
for  int version   min_format_version
version <  max_format_version
version
maxsize   math max gettrailersize version   maxsize
return maxsize
private static final int trailer_size   computetrailersizebyversion
private static final int max_trailer_size   getmaxtrailersize
static int gettrailersize int version
return trailer_size
public int gettrailersize
return gettrailersize majorversion
/**
* write the trailer to a data stream. we support writing version 1 for
* testing and for determining version 1 trailer size. it is also easy to see
* what fields changed in version 2.
*
* @param outputstream
* @throws ioexception
*/
void serialize dataoutputstream outputstream  throws ioexception
hfile checkformatversion majorversion
bytearrayoutputstream baos   new bytearrayoutputstream
dataoutput baosdos   new dataoutputstream baos
blocktype trailer write baosdos
baosdos writelong fileinfooffset
baosdos writelong loadonopendataoffset
baosdos writeint dataindexcount
if  majorversion    1
// this used to be metaindexoffset, but it was not used in version 1.
baosdos writelong 0
else
baosdos writelong uncompresseddataindexsize
baosdos writeint metaindexcount
baosdos writelong totaluncompressedbytes
if  majorversion    1
baosdos writeint  int  math min integer max_value  entrycount
else
// this field is long from version 2 onwards.
baosdos writelong entrycount
baosdos writeint compressioncodec ordinal
if  majorversion > 1
baosdos writeint numdataindexlevels
baosdos writelong firstdatablockoffset
baosdos writelong lastdatablockoffset
bytes writestringfixedsize baosdos  comparatorclassname
max_comparator_name_length
// serialize the major and minor versions
baosdos writeint materializeversion majorversion  minorversion
outputstream write baos tobytearray
/**
* deserialize the fixed file trailer from the given stream. the version needs
* to already be specified. make sure this is consistent with
* {@link #serialize(dataoutputstream)}.
*
* @param inputstream
* @param version
* @throws ioexception
*/
void deserialize datainputstream inputstream  throws ioexception
hfile checkformatversion majorversion
blocktype trailer readandcheck inputstream
fileinfooffset   inputstream readlong
loadonopendataoffset   inputstream readlong
dataindexcount   inputstream readint
if  majorversion    1
inputstream readlong       read and skip metaindexoffset
else
uncompresseddataindexsize   inputstream readlong
metaindexcount   inputstream readint
totaluncompressedbytes   inputstream readlong
entrycount   majorversion    1 ? inputstream readint     inputstream readlong
compressioncodec   compression algorithm values
if  majorversion > 1
numdataindexlevels   inputstream readint
firstdatablockoffset   inputstream readlong
lastdatablockoffset   inputstream readlong
comparatorclassname
bytes readstringfixedsize inputstream  max_comparator_name_length
int version   inputstream readint
expectmajorversion extractmajorversion version
expectminorversion extractminorversion version
private void append stringbuilder sb  string s
if  sb length   > 0
sb append
sb append s
@override
public string tostring
stringbuilder sb   new stringbuilder
append sb      fileinfooffset
append sb      loadonopendataoffset
append sb      dataindexcount
append sb      metaindexcount
append sb      totaluncompressedbytes
append sb      entrycount
append sb      compressioncodec
if  majorversion    2
append sb      uncompresseddataindexsize
append sb      numdataindexlevels
append sb      firstdatablockoffset
append sb      lastdatablockoffset
append sb      comparatorclassname
append sb      majorversion
append sb      minorversion
return sb tostring
/**
* reads a file trailer from the given file.
*
* @param istream the input stream with the ability to seek. does not have to
*          be buffered, as only one read operation is made.
* @param filesize the file size. can be obtained using
*          {@link org.apache.hadoop.fs.filesystem#getfilestatus(
*          org.apache.hadoop.fs.path)}.
* @return the fixed file trailer read
* @throws ioexception if failed to read from the underlying stream, or the
*           trailer is corrupted, or the version of the trailer is
*           unsupported
*/
public static fixedfiletrailer readfromstream fsdatainputstream istream
long filesize  throws ioexception
int buffersize   max_trailer_size
long seekpoint   filesize   buffersize
if  seekpoint < 0
// it is hard to imagine such a small hfile.
seekpoint   0
buffersize    int  filesize
istream seek seekpoint
bytebuffer buf   bytebuffer allocate buffersize
istream readfully buf array    buf arrayoffset
buf arrayoffset     buf limit
// read the version from the last int of the file.
buf position buf limit     bytes sizeof_int
int version   buf getint
// extract the major and minor versions.
int majorversion   extractmajorversion version
int minorversion   extractminorversion version
try
hfile checkformatversion majorversion
catch  illegalargumentexception iae
// in this context, an invalid version might indicate a corrupt hfile.
throw new ioexception iae
int trailersize   gettrailersize majorversion
fixedfiletrailer fft   new fixedfiletrailer majorversion  minorversion
fft deserialize new datainputstream new bytearrayinputstream buf array
buf arrayoffset     buffersize   trailersize  trailersize
return fft
public void expectmajorversion int expected
if  majorversion    expected
throw new illegalargumentexception
majorversion
expected
public void expectminorversion int expected
if  minorversion    expected
throw new illegalargumentexception
minorversion       expected
public void expectatleastmajorversion int lowerbound
if  majorversion < lowerbound
throw new illegalargumentexception
majorversion
lowerbound
public long getfileinfooffset
return fileinfooffset
public void setfileinfooffset long fileinfooffset
this fileinfooffset   fileinfooffset
public long getloadonopendataoffset
return loadonopendataoffset
public void setloadonopenoffset long loadonopendataoffset
this loadonopendataoffset   loadonopendataoffset
public int getdataindexcount
return dataindexcount
public void setdataindexcount int dataindexcount
this dataindexcount   dataindexcount
public int getmetaindexcount
return metaindexcount
public void setmetaindexcount int metaindexcount
this metaindexcount   metaindexcount
public long gettotaluncompressedbytes
return totaluncompressedbytes
public void settotaluncompressedbytes long totaluncompressedbytes
this totaluncompressedbytes   totaluncompressedbytes
public long getentrycount
return entrycount
public void setentrycount long newentrycount
if  majorversion    1
int intentrycount    int  math min integer max_value  newentrycount
if  intentrycount    newentrycount
log info     newentrycount
intentrycount       majorversion
entrycount   intentrycount
return
entrycount   newentrycount
public compression algorithm getcompressioncodec
return compressioncodec
public void setcompressioncodec compression algorithm compressioncodec
this compressioncodec   compressioncodec
public int getnumdataindexlevels
expectatleastmajorversion 2
return numdataindexlevels
public void setnumdataindexlevels int numdataindexlevels
expectatleastmajorversion 2
this numdataindexlevels   numdataindexlevels
public long getlastdatablockoffset
expectatleastmajorversion 2
return lastdatablockoffset
public void setlastdatablockoffset long lastdatablockoffset
expectatleastmajorversion 2
this lastdatablockoffset   lastdatablockoffset
public long getfirstdatablockoffset
expectatleastmajorversion 2
return firstdatablockoffset
public void setfirstdatablockoffset long firstdatablockoffset
expectatleastmajorversion 2
this firstdatablockoffset   firstdatablockoffset
/**
* returns the major version of this hfile format
*/
public int getmajorversion
return majorversion
/**
* returns the minor version of this hfile format
*/
int getminorversion
return minorversion
@suppresswarnings
public void setcomparatorclass class<? extends rawcomparator> klass
expectatleastmajorversion 2
comparatorclassname   klass getname
@suppresswarnings
private static class<? extends rawcomparator<byte>> getcomparatorclass
string comparatorclassname  throws ioexception
try
return  class<? extends rawcomparator<byte>>
class forname comparatorclassname
catch  classnotfoundexception ex
throw new ioexception ex
public static rawcomparator<byte> createcomparator
string comparatorclassname  throws ioexception
try
return getcomparatorclass comparatorclassname  newinstance
catch  instantiationexception e
throw new ioexception e
catch  illegalaccessexception e
throw new ioexception e
rawcomparator<byte> createcomparator   throws ioexception
expectatleastmajorversion 2
return createcomparator comparatorclassname
public long getuncompresseddataindexsize
if  majorversion    1
return 0
return uncompresseddataindexsize
public void setuncompresseddataindexsize
long uncompresseddataindexsize
expectatleastmajorversion 2
this uncompresseddataindexsize   uncompresseddataindexsize
/**
* extracts the major version for a 4-byte serialized version data.
* the major version is the 3 least significant bytes
*/
private static int extractmajorversion int serializedversion
return  serializedversion   0x00ffffff
/**
* extracts the minor version for a 4-byte serialized version data.
* the major version are the 3 the most significant bytes
*/
private static int extractminorversion int serializedversion
return  serializedversion >>> 24
/**
* create a 4 byte serialized version number by combining the
* minor and major version numbers.
*/
private static int materializeversion int majorversion  int minorversion
return   majorversion   0x00ffffff     minorversion << 24