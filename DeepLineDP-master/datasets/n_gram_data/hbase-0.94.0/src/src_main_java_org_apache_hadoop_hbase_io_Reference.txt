/**
* copyright 2008 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase io
import java io datainput
import java io dataoutput
import java io ioexception
import org apache hadoop fs fsdatainputstream
import org apache hadoop fs fsdataoutputstream
import org apache hadoop fs filesystem
import org apache hadoop fs path
import org apache hadoop hbase keyvalue
import org apache hadoop hbase util bytes
import org apache hadoop hbase util fsutils
import org apache hadoop io writable
/**
* a reference to the top or bottom half of a store file.  the file referenced
* lives under a different region.  references are made at region split time.
*
* <p>references work with a special half store file type.  references know how
* to write out the reference format in the file system and are whats juggled
* when references are mixed in with direct store files.  the half store file
* type is used reading the referred to file.
*
* <p>references to store files located over in some other region look like
* this in the file system
* <code>1278437856009925445.3323223323</code>:
* i.e. an id followed by hash of the referenced region.
* note, a region is itself not splitable if it has instances of store file
* references.  references are cleaned up by compactions.
*/
public class reference implements writable
private byte  splitkey
private range region
/**
* for split hstorefiles, it specifies if the file covers the lower half or
* the upper half of the key range
*/
public static enum range
/** hstorefile contains upper half of key range */
top
/** hstorefile contains lower half of key range */
bottom
/**
* constructor
* @param splitrow this is row we are splitting around.
* @param fr
*/
public reference final byte  splitrow  final range fr
this splitkey   splitrow    null?
null  keyvalue createfirstonrow splitrow  getkey
this region   fr
/**
* used by serializations.
*/
public reference
this null  range bottom
/**
*
* @return range
*/
public range getfileregion
return this region
/**
* @return splitkey
*/
public byte  getsplitkey
return splitkey
/**
* @see java.lang.object#tostring()
*/
@override
public string tostring
return     this region
// make it serializable.
public void write dataoutput out  throws ioexception
// write true if we're doing top of the file.
out writeboolean istopfileregion this region
bytes writebytearray out  this splitkey
public void readfields datainput in  throws ioexception
boolean tmp   in readboolean
// if true, set region to top.
this region   tmp? range top  range bottom
this splitkey   bytes readbytearray in
public static boolean istopfileregion final range r
return r equals range top
public path write final filesystem fs  final path p
throws ioexception
fsdataoutputstream out   fs create p  false
try
write out
finally
out close
return p
/**
* read a reference from filesystem.
* @param fs
* @param p
* @return new reference made from passed <code>p</code>
* @throws ioexception
*/
public static reference read final filesystem fs  final path p
throws ioexception
fsdatainputstream in   fs open p
try
reference r   new reference
r readfields in
return r
finally
in close