/*
* copyright 2010 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase security
import org apache commons logging logfactory
import org apache hadoop conf configuration
import org apache hadoop hbase hbaseconfiguration
import org apache hadoop hbase util methods
import org apache hadoop mapred jobconf
import org apache hadoop mapreduce job
import org apache hadoop security usergroupinformation
import java io ioexception
import java lang reflect constructor
import java lang reflect undeclaredthrowableexception
import java security privilegedaction
import java security privilegedexceptionaction
import org apache commons logging log
/**
* wrapper to abstract out usage of user and group information in hbase.
*
* <p>
* this class provides a common interface for interacting with user and group
* information across changing apis in different versions of hadoop.  it only
* provides access to the common set of functionality in
* {@link org.apache.hadoop.security.usergroupinformation} currently needed by
* hbase, but can be extended as needs change.
* </p>
*/
public abstract class user
public static final string hbase_security_conf_key
/**
* flag to differentiate between api-incompatible changes to
* {@link org.apache.hadoop.security.usergroupinformation} between vanilla
* hadoop 0.20.x and secure hadoop 0.20+.
*/
private static boolean is_secure_hadoop   true
static
try
usergroupinformation class getmethod
catch  nosuchmethodexception nsme
is_secure_hadoop   false
private static log log   logfactory getlog user class
protected usergroupinformation ugi
public usergroupinformation getugi
return ugi
/**
* returns the full user name.  for kerberos principals this will include
* the host and realm portions of the principal name.
* @return user full name.
*/
public string getname
return ugi getusername
/**
* returns the list of groups of which this user is a member.  on secure
* hadoop this returns the group information for the user as resolved on the
* server.  for 0.20 based hadoop, the group names are passed from the client.
*/
public string getgroupnames
return ugi getgroupnames
/**
* returns the shortened version of the user name -- the portion that maps
* to an operating system user name.
* @return short name
*/
public abstract string getshortname
/**
* executes the given action within the context of this user.
*/
public abstract <t> t runas privilegedaction<t> action
/**
* executes the given action within the context of this user.
*/
public abstract <t> t runas privilegedexceptionaction<t> action
throws ioexception  interruptedexception
/**
* requests an authentication token for this user and stores it in the
* user's credentials.
*
* @throws ioexception
*/
public abstract void obtainauthtokenforjob configuration conf  job job
throws ioexception  interruptedexception
/**
* requests an authentication token for this user and stores it in the
* user's credentials.
*
* @throws ioexception
*/
public abstract void obtainauthtokenforjob jobconf job
throws ioexception  interruptedexception
public string tostring
return ugi tostring
/**
* returns the {@code user} instance within current execution context.
*/
public static user getcurrent   throws ioexception
user user
if  is_secure_hadoop
user   new securehadoopuser
else
user   new hadoopuser
if  user getugi      null
return null
return user
/**
* wraps an underlying {@code usergroupinformation} instance.
* @param ugi the base hadoop user
* @return user
*/
public static user create usergroupinformation ugi
if  ugi    null
return null
if  is_secure_hadoop
return new securehadoopuser ugi
return new hadoopuser ugi
/**
* generates a new {@code user} instance specifically for use in test code.
* @param name the full username
* @param groups the group names to which the test user will belong
* @return a new <code>user</code> instance
*/
public static user createuserfortesting configuration conf
string name  string groups
if  is_secure_hadoop
return securehadoopuser createuserfortesting conf  name  groups
return hadoopuser createuserfortesting conf  name  groups
/**
* log in the current process using the given configuration keys for the
* credential file and login principal.
*
* <p><strong>this is only applicable when
* running on secure hadoop</strong> -- see
* org.apache.hadoop.security.securityutil#login(configuration,string,string,string).
* on regular hadoop (without security features), this will safely be ignored.
* </p>
*
* @param conf the configuration data to use
* @param fileconfkey property key used to configure path to the credential file
* @param principalconfkey property key used to configure login principal
* @param localhost current hostname to use in any credentials
* @throws ioexception underlying exception from securityutil.login() call
*/
public static void login configuration conf  string fileconfkey
string principalconfkey  string localhost  throws ioexception
if  is_secure_hadoop
securehadoopuser login conf  fileconfkey  principalconfkey  localhost
else
hadoopuser login conf  fileconfkey  principalconfkey  localhost
/**
* returns whether or not kerberos authentication is configured for hadoop.
* for non-secure hadoop, this always returns <code>false</code>.
* for secure hadoop, it will return the value from
* {@code usergroupinformation.issecurityenabled()}.
*/
public static boolean issecurityenabled
if  is_secure_hadoop
return securehadoopuser issecurityenabled
else
return hadoopuser issecurityenabled
/**
* returns whether or not secure authentication is enabled for hbase
* (whether <code>hbase.security.authentication</code> is set to
* <code>kerberos</code>.
*/
public static boolean ishbasesecurityenabled configuration conf
return   equalsignorecase conf get hbase_security_conf_key
/* concrete implementations */
/**
* bridges {@link user} calls to invocations of the appropriate methods
* in {@link org.apache.hadoop.security.usergroupinformation} in regular
* hadoop 0.20 (asf hadoop and other versions without the backported security
* features).
*/
private static class hadoopuser extends user
private hadoopuser
try
ugi    usergroupinformation  callstatic
if  ugi    null
// secure hadoop ugi will perform an implicit login if the current
// user is null.  emulate the same behavior here for consistency
configuration conf   hbaseconfiguration create
ugi    usergroupinformation  callstatic
new class  configuration class    new object  conf
if  ugi    null
callstatic
new class  usergroupinformation class    new object  ugi
catch  runtimeexception re
throw re
catch  exception e
throw new undeclaredthrowableexception e
private hadoopuser usergroupinformation ugi
this ugi   ugi
@override
public string getshortname
return ugi    null ? ugi getusername     null
@override
public <t> t runas privilegedaction<t> action
t result   null
usergroupinformation previous   null
try
previous    usergroupinformation  callstatic
try
if  ugi    null
callstatic    new class usergroupinformation class
new object ugi
result   action run
finally
callstatic    new class usergroupinformation class
new object previous
catch  runtimeexception re
throw re
catch  exception e
throw new undeclaredthrowableexception e
return result
@override
public <t> t runas privilegedexceptionaction<t> action
throws ioexception  interruptedexception
t result   null
try
usergroupinformation previous
usergroupinformation  callstatic
try
if  ugi    null
callstatic    new class usergroupinformation class
new object ugi
result   action run
finally
callstatic    new class usergroupinformation class
new object previous
catch  exception e
if  e instanceof ioexception
throw  ioexception e
else if  e instanceof interruptedexception
throw  interruptedexception e
else if  e instanceof runtimeexception
throw  runtimeexception e
else
throw new undeclaredthrowableexception e
return result
@override
public void obtainauthtokenforjob configuration conf  job job
throws ioexception  interruptedexception
// this is a no-op.  token creation is only supported for kerberos
// authenticated clients
@override
public void obtainauthtokenforjob jobconf job
throws ioexception  interruptedexception
// this is a no-op.  token creation is only supported for kerberos
// authenticated clients
/** @see user#createuserfortesting(org.apache.hadoop.conf.configuration, string, string[]) */
public static user createuserfortesting configuration conf
string name  string groups
try
class c   class forname
constructor constructor   c getconstructor string class  string class
if  constructor    null
throw new nullpointerexception
usergroupinformation newuser
usergroupinformation constructor newinstance name  groups
// set user in configuration -- hack for regular hadoop
conf set    newuser tostring
return new hadoopuser newuser
catch  classnotfoundexception cnfe
throw new runtimeexception
cnfe
catch  nosuchmethodexception nsme
throw new runtimeexception
nsme
catch  runtimeexception re
throw re
catch  exception e
throw new undeclaredthrowableexception e
/**
* no-op since we're running on a version of hadoop that doesn't support
* logins.
* @see user#login(org.apache.hadoop.conf.configuration, string, string, string)
*/
public static void login configuration conf  string fileconfkey
string principalconfkey  string localhost  throws ioexception
log info
/** always returns {@code false}. */
public static boolean issecurityenabled
return false
/**
* bridges {@code user} invocations to underlying calls to
* {@link org.apache.hadoop.security.usergroupinformation} for secure hadoop
* 0.20 and versions 0.21 and above.
*/
private static class securehadoopuser extends user
private string shortname
private securehadoopuser   throws ioexception
try
ugi    usergroupinformation  callstatic
catch  ioexception ioe
throw ioe
catch  runtimeexception re
throw re
catch  exception e
throw new undeclaredthrowableexception e
private securehadoopuser usergroupinformation ugi
this ugi   ugi
@override
public string getshortname
if  shortname    null  return shortname
try
shortname    string call ugi     null  null
return shortname
catch  runtimeexception re
throw re
catch  exception e
throw new undeclaredthrowableexception e
@override
public <t> t runas privilegedaction<t> action
try
return  t  call ugi     new class privilegedaction class
new object action
catch  runtimeexception re
throw re
catch  exception e
throw new undeclaredthrowableexception e
@override
public <t> t runas privilegedexceptionaction<t> action
throws ioexception  interruptedexception
try
return  t  call ugi
new class privilegedexceptionaction class
new object action
catch  ioexception ioe
throw ioe
catch  interruptedexception ie
throw ie
catch  runtimeexception re
throw re
catch  exception e
throw new undeclaredthrowableexception e
@override
public void obtainauthtokenforjob configuration conf  job job
throws ioexception  interruptedexception
try
class c   class forname
methods call c  null
new class configuration class  usergroupinformation class
job class
new object conf  ugi  job
catch  classnotfoundexception cnfe
throw new runtimeexception
cnfe
catch  ioexception ioe
throw ioe
catch  interruptedexception ie
throw ie
catch  runtimeexception re
throw re
catch  exception e
throw new undeclaredthrowableexception e
@override
public void obtainauthtokenforjob jobconf job
throws ioexception  interruptedexception
try
class c   class forname
methods call c  null
new class jobconf class  usergroupinformation class
new object job  ugi
catch  classnotfoundexception cnfe
throw new runtimeexception
cnfe
catch  ioexception ioe
throw ioe
catch  interruptedexception ie
throw ie
catch  runtimeexception re
throw re
catch  exception e
throw new undeclaredthrowableexception e
/** @see user#createuserfortesting(org.apache.hadoop.conf.configuration, string, string[]) */
public static user createuserfortesting configuration conf
string name  string groups
try
return new securehadoopuser
usergroupinformation callstatic
new class string class  string class
new object name  groups
catch  runtimeexception re
throw re
catch  exception e
throw new undeclaredthrowableexception e
/**
* obtain credentials for the current process using the configured
* kerberos keytab file and principal.
* @see user#login(org.apache.hadoop.conf.configuration, string, string, string)
*
* @param conf the configuration to use
* @param fileconfkey configuration property key used to store the path
* to the keytab file
* @param principalconfkey configuration property key used to store the
* principal name to login as
* @param localhost the local hostname
*/
public static void login configuration conf  string fileconfkey
string principalconfkey  string localhost  throws ioexception
if  issecurityenabled
// check for securityutil class
try
class c   class forname
class types   new class
configuration class  string class  string class  string class
object args   new object
conf  fileconfkey  principalconfkey  localhost
methods call c  null     types  args
catch  classnotfoundexception cnfe
throw new runtimeexception
cnfe
catch  ioexception ioe
throw ioe
catch  runtimeexception re
throw re
catch  exception e
throw new undeclaredthrowableexception e
/**
* returns the result of {@code usergroupinformation.issecurityenabled()}.
*/
public static boolean issecurityenabled
try
return  boolean callstatic
catch  runtimeexception re
throw re
catch  exception e
throw new undeclaredthrowableexception e
/* reflection helper methods */
private static object callstatic string methodname  throws exception
return call null  methodname  null  null
private static object callstatic string methodname  class types
object args  throws exception
return call null  methodname  types  args
private static object call usergroupinformation instance  string methodname
class types  object args  throws exception
return methods call usergroupinformation class  instance  methodname  types
args