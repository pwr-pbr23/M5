/*
* copyright 2011 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase client coprocessor
import java io datainput
import java io dataoutput
import java io ioexception
import org apache hadoop hbase keyvalue
import org apache hadoop hbase coprocessor columninterpreter
import org apache hadoop hbase util bytes
/**
* a concrete column interpreter implementation. the cell value is a long value
* and its promoted data type is also a long value. for computing aggregation
* function, this class is used to find the datatype of the cell value. client
* is supposed to instantiate it and passed along as a parameter. see
* testaggregateprotocol methods for its sample usage.
* its methods handle null arguments gracefully.
*/
public class longcolumninterpreter implements columninterpreter<long  long>
public long getvalue byte colfamily  byte colqualifier  keyvalue kv
throws ioexception
if  kv    null    kv getvaluelength      bytes sizeof_long
return null
return bytes tolong kv getbuffer    kv getvalueoffset
@override
public long add long l1  long l2
if  l1    null ^ l2    null
return  l1    null  ? l2   l1     either of one is null
else if  l1    null     both are null
return null
return l1   l2
@override
public int compare final long l1  final long l2
if  l1    null ^ l2    null
return l1    null ?  1   1     either of one is null
else if  l1    null
return 0     both are null
return l1 compareto l2      natural ordering
@override
public long getmaxvalue
return long max_value
@override
public long increment long o
return o    null ? null    o   1l
@override
public long multiply long l1  long l2
return  l1    null    l2    null  ? null   l1   l2
@override
public long getminvalue
return long min_value
@override
public void readfields datainput arg0  throws ioexception
// nothing to serialize
@override
public void write dataoutput arg0  throws ioexception
// nothing to serialize
@override
public double divideforavg long l1  long l2
return  l2    null    l1    null  ? double nan    l1 doublevalue     l2
doublevalue
@override
public long casttoreturntype long o
return o