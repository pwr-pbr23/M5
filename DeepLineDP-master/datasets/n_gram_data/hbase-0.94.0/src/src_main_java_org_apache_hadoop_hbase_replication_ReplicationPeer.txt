/*
* copyright 2010 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase replication
import java io ioexception
import java util arraylist
import java util list
import java util concurrent atomic atomicboolean
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop conf configuration
import org apache hadoop hbase abortable
import org apache hadoop hbase servername
import org apache hadoop hbase replication replicationzookeeper peerstate
import org apache hadoop hbase util bytes
import org apache hadoop hbase zookeeper zkutil
import org apache hadoop hbase zookeeper zookeepernodetracker
import org apache hadoop hbase zookeeper zookeeperwatcher
import org apache zookeeper keeperexception
/**
* this class acts as a wrapper for all the objects used to identify and
* communicate with remote peers and is responsible for answering to expired
* sessions and re-establishing the zk connections.
*/
public class replicationpeer implements abortable
private static final log log   logfactory getlog replicationpeer class
private final string clusterkey
private final string id
private list<servername> regionservers   new arraylist<servername> 0
private final atomicboolean peerenabled   new atomicboolean
// cannot be final since a new object needs to be recreated when session fails
private zookeeperwatcher zkw
private final configuration conf
private peerstatetracker peerstatetracker
/**
* constructor that takes all the objects required to communicate with the
* specified peer, except for the region server addresses.
* @param conf configuration object to this peer
* @param key cluster key used to locate the peer
* @param id string representation of this peer's identifier
*/
public replicationpeer configuration conf  string key
string id  throws ioexception
this conf   conf
this clusterkey   key
this id   id
this reloadzkwatcher
/**
* start a state tracker to check whether this peer is enabled or not
*
* @param zookeeper zk watcher for the local cluster
* @param peerstatenode path to zk node which stores peer state
* @throws keeperexception
*/
public void startstatetracker zookeeperwatcher zookeeper  string peerstatenode
throws keeperexception
if  zkutil checkexists zookeeper  peerstatenode      1
zkutil createandwatch zookeeper  peerstatenode
bytes tobytes peerstate enabled name         enabled by default
this peerstatetracker   new peerstatetracker peerstatenode  zookeeper
this
this peerstatetracker start
this readpeerstateznode
private void readpeerstateznode
string currentstate   bytes tostring peerstatetracker getdata false
this peerenabled set peerstate enabled equals peerstate
valueof currentstate
/**
* get the cluster key of that peer
* @return string consisting of zk ensemble addresses, client port
* and root znode
*/
public string getclusterkey
return clusterkey
/**
* get the state of this peer
* @return atomic boolean that holds the status
*/
public atomicboolean getpeerenabled
return peerenabled
/**
* get a list of all the addresses of all the region servers
* for this peer cluster
* @return list of addresses
*/
public list<servername> getregionservers
return regionservers
/**
* set the list of region servers for that peer
* @param regionservers list of addresses for the region servers
*/
public void setregionservers list<servername> regionservers
this regionservers   regionservers
/**
* get the zk connection to this peer
* @return zk connection
*/
public zookeeperwatcher getzkw
return zkw
/**
* get the identifier of this peer
* @return string representation of the id (short)
*/
public string getid
return id
/**
* get the configuration object required to communicate with this peer
* @return configuration object
*/
public configuration getconfiguration
return conf
@override
public void abort string why  throwable e
log warn     clusterkey
why  e
/**
* closes the current zkw (if not null) and creates a new one
* @throws ioexception if anything goes wrong connecting
*/
public void reloadzkwatcher   throws ioexception
if  zkw    null  zkw close
zkw   new zookeeperwatcher conf
id  this
@override
public boolean isaborted
// currently the replication peer is never "aborted", we just log when the
// abort method is called.
return false
/**
* tracker for state of this peer
*/
public class peerstatetracker extends zookeepernodetracker
public peerstatetracker string peerstateznode  zookeeperwatcher watcher
abortable abortable
super watcher  peerstateznode  abortable
@override
public synchronized void nodedatachanged string path
if  path equals node
super nodedatachanged path
readpeerstateznode