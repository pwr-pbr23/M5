/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase metrics histogram
import java util concurrent atomic atomiclong
import java util concurrent atomic atomicreference
import org apache hadoop metrics metricsrecord
import org apache hadoop metrics util metricsbase
import org apache hadoop metrics util metricsregistry
public class metricshistogram extends metricsbase
// 1028 items implies 99.9% ci w/ 5% margin of error
// (assuming a normal distribution on the underlying data)
private static final int default_sample_size   1028
// the bias towards sampling from more recent data.
// per cormode et al. an alpha of 0.015 strongly biases to the last 5 minutes
private static final double default_alpha   0 015
/**
* constructor to create a new histogram metric
* @param nam           the name to publish the metric under
* @param registry      where the metrics object will be registered
* @param description   the metric's description
* @param forwardbiased true if you want this histogram to give more
*                      weight to recent data,
*                      false if you want all data to have uniform weight
*/
public metricshistogram final string nam  final metricsregistry registry
final string description  boolean forwardbiased
super nam  description
this min   new atomiclong
this max   new atomiclong
this sum   new atomiclong
this sample   forwardbiased ?
new exponentiallydecayingsample default_sample_size  default_alpha
new uniformsample default_sample_size
this variance    new atomicreference<double> new double  1  0
this count   new atomiclong
this clear
if  registry    null
registry add nam  this
/**
* constructor create a new (forward biased) histogram metric
* @param nam         the name to publish the metric under
* @param registry    where the metrics object will be registered
* @param description the metric's description
*/
public metricshistogram final string nam  metricsregistry registry
final string description
this nam  registry  no_description  true
/**
* constructor - create a new (forward biased) histogram metric
* @param nam the name of the metrics to be used to publish the metric
* @param registry - where the metrics object will be registered
*/
public metricshistogram final string nam  metricsregistry registry
this nam  registry  no_description
private final sample sample
private final atomiclong min
private final atomiclong max
private final atomiclong sum
// these are for computing a running-variance,
// without letting floating point errors accumulate via welford's algorithm
private final atomicreference<double> variance
private final atomiclong count
/**
* clears all recorded values.
*/
public void clear
this sample clear
this count set 0
this max set long min_value
this min set long max_value
this sum set 0
variance set new double  1  0
public void update int val
update  long  val
public void update final long val
count incrementandget
sample update val
setmax val
setmin val
sum getandadd val
updatevariance val
private void setmax final long potentialmax
boolean done   false
while   done
final long currentmax   max get
done   currentmax >  potentialmax
max compareandset currentmax  potentialmax
private void setmin long potentialmin
boolean done   false
while   done
final long currentmin   min get
done   currentmin <  potentialmin
min compareandset currentmin  potentialmin
private void updatevariance long value
boolean done   false
while   done
final double oldvalues   variance get
final double newvalues   new double
if  oldvalues     1
newvalues   value
newvalues   0
else
final double oldm   oldvalues
final double olds   oldvalues
final double newm   oldm     value   oldm    getcount
final double news   olds     value   oldm     value   newm
newvalues   newm
newvalues   news
done   variance compareandset oldvalues  newvalues
public long getcount
return count get
public long getmax
if  getcount   > 0
return max get
return 0l
public long getmin
if  getcount   > 0
return min get
return 0l
public double getmean
if  getcount   > 0
return sum get      double  getcount
return 0 0
public double getstddev
if  getcount   > 0
return math sqrt getvariance
return 0 0
public snapshot getsnapshot
return sample getsnapshot
private double getvariance
if  getcount   <  1
return 0 0
return variance get      getcount     1
@override
public void pushmetric metricsrecord mr
final snapshot s   this getsnapshot
mr setmetric getname        this getcount
mr setmetric getname        this getmin
mr setmetric getname        this getmax
mr setmetric getname         float  this getmean
mr setmetric getname         float  this getstddev
mr setmetric getname         float  s getmedian
mr setmetric getname
float  s get75thpercentile
mr setmetric getname
float  s get95thpercentile
mr setmetric getname
float  s get99thpercentile