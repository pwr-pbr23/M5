/**
* copyright 2010 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase ipc
import java io ioexception
import java util list
import org apache hadoop hbase clusterstatus
import org apache hadoop hbase hcolumndescriptor
import org apache hadoop hbase htabledescriptor
import org apache hadoop hbase unknownregionexception
import org apache hadoop hbase security tokeninfo
import org apache hadoop hbase security kerberosinfo
import org apache hadoop hbase util pair
/**
* clients interact with the hmasterinterface to gain access to meta-level
* hbase functionality, like finding an hregionserver and creating/destroying
* tables.
*
* <p>note: if you change the interface, you must change the rpc version
* number in hbaserpcprotocolversion
*
*/
@kerberosinfo
serverprincipal
@tokeninfo
public interface hmasterinterface extends versionedprotocol
/**
* this interfaces' version. version changes when the interface changes.
*/
// all hbase interfaces used derive from hbaserpcprotocolversion.  it
// maintained a single global version number on all hbase interfaces.  this
// meant all hbase rpc was broke though only one of the three rpc interfaces
// had changed.  this has since been undone.
// 29:  4/3/2010 - changed clusterstatus serialization
// 30: 3/20/2012 - hbase-5589: added offline method
// note: not bumped from 29 to maintain compatibility since this addition is
// after the v0.92.0 releases this is applied to.  this is not bumped for
// 0.94.0 to maintain rolling restart compatibility with 0.92.x.
public static final long version   29l
/** @return true if master is available */
public boolean ismasterrunning
// admin tools would use these cmds
/**
* creates a new table asynchronously.  if splitkeys are specified, then the
* table will be created with an initial set of multiple regions.
* if splitkeys is null, the table will be created with a single region.
* @param desc table descriptor
* @param splitkeys
* @throws ioexception
*/
public void createtable htabledescriptor desc  byte  splitkeys
throws ioexception
/**
* deletes a table
* @param tablename table to delete
* @throws ioexception e
*/
public void deletetable final byte  tablename  throws ioexception
/**
* used by the client to get the number of regions that have received the
* updated schema
*
* @param tablename
* @return pair indicating the number of regions updated pair.getfirst() is the
*         regions that are yet to be updated pair.getsecond() is the total number
*         of regions of the table
* @throws ioexception
*/
public pair<integer  integer> getalterstatus byte tablename
throws ioexception
/**
* adds a column to the specified table
* @param tablename table to modify
* @param column column descriptor
* @throws ioexception e
*/
public void addcolumn final byte  tablename  hcolumndescriptor column
throws ioexception
/**
* modifies an existing column on the specified table
* @param tablename table name
* @param descriptor new column descriptor
* @throws ioexception e
*/
public void modifycolumn final byte  tablename  hcolumndescriptor descriptor
throws ioexception
/**
* deletes a column from the specified table. table must be disabled.
* @param tablename table to alter
* @param columnname column family to remove
* @throws ioexception e
*/
public void deletecolumn final byte  tablename  final byte  columnname
throws ioexception
/**
* puts the table on-line (only needed if table has been previously taken offline)
* @param tablename table to enable
* @throws ioexception e
*/
public void enabletable final byte  tablename  throws ioexception
/**
* take table offline
*
* @param tablename table to take offline
* @throws ioexception e
*/
public void disabletable final byte  tablename  throws ioexception
/**
* modify a table's metadata
*
* @param tablename table to modify
* @param htd new descriptor for table
* @throws ioexception e
*/
public void modifytable byte tablename  htabledescriptor htd
throws ioexception
/**
* shutdown an hbase cluster.
* @throws ioexception e
*/
public void shutdown   throws ioexception
/**
* stop hbase master only.
* does not shutdown the cluster.
* @throws ioexception e
*/
public void stopmaster   throws ioexception
/**
* return cluster status.
* @return status object
*/
public clusterstatus getclusterstatus
/**
* move the region <code>r</code> to <code>dest</code>.
* @param encodedregionname the encoded region name; i.e. the hash that makes
* up the region name suffix: e.g. if regionname is
* <code>testtable,0094429456,1289497600452.527db22f95c8a9e0116f0cc13c680396.</code>,
* then the encoded region name is: <code>527db22f95c8a9e0116f0cc13c680396</code>.
* @param destservername the servername of the destination regionserver.  if
* passed the empty byte array we'll assign to a random server.  a server name
* is made of host, port and startcode.  here is an example:
* <code> host187.example.com,60020,1289493121758</code>.
* @throws unknownregionexception thrown if we can't find a region named
* <code>encodedregionname</code>
*/
public void move final byte  encodedregionname  final byte  destservername
throws unknownregionexception
/**
* assign a region to a server chosen at random.
* @param regionname region to assign.  will use existing regionplan if one
* found.
* @param force if true, will force the assignment.
* @throws ioexception
* @deprecated the <code>force</code> is unused.use {@link #assign(byte[])}
*/
public void assign final byte  regionname  final boolean force
throws ioexception
/**
* assign a region to a server chosen at random.
*
* @param regionname
*          region to assign. will use existing regionplan if one found.
* @throws ioexception
*/
public void assign final byte regionname  throws ioexception
/**
* unassign a region from current hosting regionserver.  region will then be
* assigned to a regionserver chosen at random.  region could be reassigned
* back to the same server.  use {@link #move(byte[], byte[])} if you want
* to control the region movement.
* @param regionname region to unassign. will clear any existing regionplan
* if one found.
* @param force if true, force unassign (will remove region from
* regions-in-transition too if present as well as from assigned regions --
* radical!.if results in double assignment use hbck -fix to resolve.
* @throws ioexception
*/
public void unassign final byte  regionname  final boolean force
throws ioexception
/**
* offline a region from the assignment manager's in-memory state.  the
* region should be in a closed state and there will be no attempt to
* automatically reassign the region as in unassign.   this is a special
* method, and should only be used by experts or hbck.
* @param regionname region to offline.  will clear any existing regionplan
* if one found.
* @throws ioexception
*/
public void offline final byte regionname  throws ioexception
/**
* run the balancer.  will run the balancer and if regions to move, it will
* go ahead and do the reassignments.  can not run for various reasons.  check
* logs.
* @return true if balancer ran and was able to tell the region servers to
* unassign all the regions to balance (the re-assignment itself is async),
* false otherwise.
*/
public boolean balance
/**
* turn the load balancer on or off.
* @param b if true, enable balancer. if false, disable balancer.
* @return previous balancer value
*/
public boolean balanceswitch final boolean b
/**
* turn the load balancer on or off.
* it waits until current balance() call, if outstanding, to return.
* @param b if true, enable balancer. if false, disable balancer.
* @return previous balancer value
*/
public boolean synchronousbalanceswitch final boolean b
/**
* get array of all htds.
* @return array of htabledescriptor
*/
public htabledescriptor gethtabledescriptors
/**
* get array of htds for requested tables.
* @param tablenames
* @return array of htabledescriptor
*/
public htabledescriptor gethtabledescriptors list<string> tablenames