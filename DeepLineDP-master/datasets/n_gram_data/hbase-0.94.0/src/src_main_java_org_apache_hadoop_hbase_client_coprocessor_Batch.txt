/*
* copyright 2010 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase client coprocessor
import org apache commons lang reflect methodutils
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop hbase ipc coprocessorprotocol
import java io ioexception
import java lang reflect invocationhandler
import java lang reflect invocationtargetexception
import java lang reflect method
import java lang reflect proxy
/**
* a collection of interfaces and utilities used for interacting with custom rpc
* interfaces exposed by coprocessors.
*/
public abstract class batch
private static log log   logfactory getlog batch class
/**
* creates a new {@link batch.call} instance that invokes a method
* with the given parameters and returns the result.
*
* <p>
* note that currently the method is naively looked up using the method name
* and class types of the passed arguments, which means that
* <em>none of the arguments can be <code>null</code></em>.
* for more flexibility, see
* {@link batch#formethod(java.lang.reflect.method, object...)}.
* </p>
*
* @param protocol the protocol class being called
* @param method the method name
* @param args zero or more arguments to be passed to the method
* (individual args cannot be <code>null</code>!)
* @param <t> the class type of the protocol implementation being invoked
* @param <r> the return type for the method call
* @return a {@code callable} instance that will invoke the given method
* and return the results
* @throws nosuchmethodexception if the method named, with the given argument
*     types, cannot be found in the protocol class
* @see batch#formethod(java.lang.reflect.method, object...)
* @see org.apache.hadoop.hbase.client.htable#coprocessorexec(class, byte[], byte[], org.apache.hadoop.hbase.client.coprocessor.batch.call, org.apache.hadoop.hbase.client.coprocessor.batch.callback)
*/
public static <t extends coprocessorprotocol r> call<t r> formethod
final class<t> protocol  final string method  final object    args
throws nosuchmethodexception
class types   new class
for  int i 0  i<args length  i
if  args    null
throw new nullpointerexception
types   args getclass
method m   methodutils getmatchingaccessiblemethod protocol  method  types
if  m    null
throw new nosuchmethodexception
method
m setaccessible true
return formethod m  args
/**
* creates a new {@link batch.call} instance that invokes a method
* with the given parameters and returns the result.
*
* @param method the method reference to invoke
* @param args zero or more arguments to be passed to the method
* @param <t> the class type of the protocol implementation being invoked
* @param <r> the return type for the method call
* @return a {@code callable} instance that will invoke the given method and
* return the results
* @see org.apache.hadoop.hbase.client.htable#coprocessorexec(class, byte[], byte[], org.apache.hadoop.hbase.client.coprocessor.batch.call, org.apache.hadoop.hbase.client.coprocessor.batch.callback)
*/
public static <t extends coprocessorprotocol r> call<t r> formethod
final method method  final object    args
return new call<t r>
public r call t instance  throws ioexception
try
if  proxy isproxyclass instance getclass
invocationhandler invoker   proxy getinvocationhandler instance
return  r invoker invoke instance  method  args
else
log warn   method getname
return  r method invoke instance  args
catch  illegalaccessexception iae
throw new ioexception
method getname      iae
catch  invocationtargetexception ite
throw new ioexception ite tostring    ite
catch  throwable t
throw new ioexception t tostring    t
/**
* defines a unit of work to be executed.
*
* <p>
* when used with
* {@link org.apache.hadoop.hbase.client.htable#coprocessorexec(class, byte[], byte[], org.apache.hadoop.hbase.client.coprocessor.batch.call, org.apache.hadoop.hbase.client.coprocessor.batch.callback)}
* the implementations {@link batch.call#call(object)} method will be invoked
* with a proxy to the
* {@link org.apache.hadoop.hbase.ipc.coprocessorprotocol}
* sub-type instance.
* </p>
* @see org.apache.hadoop.hbase.client.coprocessor
* @see org.apache.hadoop.hbase.client.htable#coprocessorexec(class, byte[], byte[], org.apache.hadoop.hbase.client.coprocessor.batch.call)
* @see org.apache.hadoop.hbase.client.htable#coprocessorexec(class, byte[], byte[], org.apache.hadoop.hbase.client.coprocessor.batch.call, org.apache.hadoop.hbase.client.coprocessor.batch.callback)
* @param <t> the instance type to be passed to
* {@link batch.call#call(object)}
* @param <r> the return type from {@link batch.call#call(object)}
*/
public static interface call<t r>
public r call t instance  throws ioexception
/**
* defines a generic callback to be triggered for each {@link batch.call#call(object)}
* result.
*
* <p>
* when used with
* {@link org.apache.hadoop.hbase.client.htable#coprocessorexec(class, byte[], byte[], org.apache.hadoop.hbase.client.coprocessor.batch.call, org.apache.hadoop.hbase.client.coprocessor.batch.callback)},
* the implementation's {@link batch.callback#update(byte[], byte[], object)}
* method will be called with the {@link batch.call#call(object)} return value
* from each region in the selected range.
* </p>
* @param <r> the return type from the associated {@link batch.call#call(object)}
* @see org.apache.hadoop.hbase.client.htable#coprocessorexec(class, byte[], byte[], org.apache.hadoop.hbase.client.coprocessor.batch.call, org.apache.hadoop.hbase.client.coprocessor.batch.callback)
*/
public static interface callback<r>
public void update byte region  byte row  r result