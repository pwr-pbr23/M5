/**
* copyright 2010 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase util
import org apache hadoop conf configuration
/**
* this class represents a common api for hashing functions.
*/
public abstract class hash
/** constant to denote invalid hash type. */
public static final int invalid_hash    1
/** constant to denote {@link jenkinshash}. */
public static final int jenkins_hash   0
/** constant to denote {@link murmurhash}. */
public static final int murmur_hash    1
/**
* this utility method converts string representation of hash function name
* to a symbolic constant. currently two function types are supported,
* "jenkins" and "murmur".
* @param name hash function name
* @return one of the predefined constants
*/
public static int parsehashtype string name
if    equalsignorecase name
return jenkins_hash
else if    equalsignorecase name
return murmur_hash
else
return invalid_hash
/**
* this utility method converts the name of the configured
* hash type to a symbolic constant.
* @param conf configuration
* @return one of the predefined constants
*/
public static int gethashtype configuration conf
string name   conf get
return parsehashtype name
/**
* get a singleton instance of hash function of a given type.
* @param type predefined hash type
* @return hash function instance, or null if type is invalid
*/
public static hash getinstance int type
switch type
case jenkins_hash
return jenkinshash getinstance
case murmur_hash
return murmurhash getinstance
default
return null
/**
* get a singleton instance of hash function of a type
* defined in the configuration.
* @param conf current configuration
* @return defined hash type, or null if type is invalid
*/
public static hash getinstance configuration conf
int type   gethashtype conf
return getinstance type
/**
* calculate a hash using all bytes from the input argument, and
* a seed of -1.
* @param bytes input bytes
* @return hash value
*/
public int hash byte bytes
return hash bytes  bytes length   1
/**
* calculate a hash using all bytes from the input argument,
* and a provided seed value.
* @param bytes input bytes
* @param initval seed value
* @return hash value
*/
public int hash byte bytes  int initval
return hash bytes  0  bytes length  initval
/**
* calculate a hash using bytes from 0 to <code>length</code>, and
* the provided seed value
* @param bytes input bytes
* @param length length of the valid bytes after offset to consider
* @param initval seed value
* @return hash value
*/
public int hash byte bytes  int length  int initval
return hash bytes  0  length  initval
/**
* calculate a hash using bytes from <code>offset</code> to <code>offset +
* length</code>, and the provided seed value.
* @param bytes input bytes
* @param offset the offset into the array to start consideration
* @param length length of the valid bytes after offset to consider
* @param initval seed value
* @return hash value
*/
public abstract int hash byte bytes  int offset  int length  int initval