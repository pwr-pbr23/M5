/**
* copyright 2011 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase regionserver
import java util concurrent concurrentmap
import java util concurrent concurrentskiplistmap
import java util concurrent atomic atomiclong
import org apache hadoop hbase util bytes
/**
* regionserveraccounting keeps record of some basic real time information about
* the region server. currently, it only keeps record the global memstore size.
*/
public class regionserveraccounting
private final atomiclong atomicglobalmemstoresize   new atomiclong 0
// store the edits size during replaying hlog. use this to roll back the
// global memstore size once a region opening failed.
private final concurrentmap<byte  atomiclong> replayeditsperregion
new concurrentskiplistmap<byte  atomiclong> bytes bytes_comparator
/**
* @return the global memstore size in the regionserver
*/
public long getglobalmemstoresize
return atomicglobalmemstoresize get
/**
* @param memstoresize the memstore size will be added to
*        the global memstore size
* @return the global memstore size in the regionserver
*/
public long addandgetglobalmemstoresize long memstoresize
return atomicglobalmemstoresize addandget memstoresize
/***
* add memstoresize to replayeditsperregion.
*
* @param regionname region name.
* @param memstoresize the memstore size will be added to replayeditsperregion.
* @return the replay edits size for region hri.
*/
public long addandgetregionreplayeditssize byte regionname  long memstoresize
atomiclong replayedistssize   replayeditsperregion get regionname
if  replayedistssize    null
replayedistssize   new atomiclong 0
replayeditsperregion put regionname  replayedistssize
return replayedistssize addandget memstoresize
/**
* roll back the global memstore size for a specified region when this region
* can't be opened.
*
* @param regionname the region which could not open.
* @return the global memstore size in the regionserver
*/
public long rollbackregionreplayeditssize byte regionname
atomiclong replayeditssize   replayeditsperregion get regionname
long editssizelong   0l
if  replayeditssize    null
editssizelong    replayeditssize get
clearregionreplayeditssize regionname
return addandgetglobalmemstoresize editssizelong
/**
* clear a region from replayeditsperregion.
*
* @param regionname region name.
*/
public void clearregionreplayeditssize byte regionname
replayeditsperregion remove regionname