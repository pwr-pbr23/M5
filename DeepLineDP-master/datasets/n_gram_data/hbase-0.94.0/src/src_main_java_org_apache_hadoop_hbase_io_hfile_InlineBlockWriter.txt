/*
* copyright 2011 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase io hfile
import java io dataoutput
import java io ioexception
/**
* a way to write "inline" blocks into an {@link hfile}. inline blocks are
* interspersed with data blocks. for example, bloom filter chunks and
* leaf-level blocks of a multi-level block index are stored as inline blocks.
*/
public interface inlineblockwriter
/**
* determines whether there is a new block to be written out.
*
* @param closing
*          whether the file is being closed, in which case we need to write
*          out all available data and not wait to accumulate another block
*/
boolean shouldwriteblock boolean closing
/**
* writes the block to the provided stream. must not write any magic records.
* called only if {@link #shouldwriteblock(boolean)} returned true.
*
* @param out
*          a stream (usually a compressing stream) to write the block to
*/
void writeinlineblock dataoutput out  throws ioexception
/**
* called after a block has been written, and its offset, raw size, and
* compressed size have been determined. can be used to add an entry to a
* block index. if this type of inline blocks needs a block index, the inline
* block writer is responsible for maintaining it.
*
* @param offset the offset of the block in the stream
* @param ondisksize the on-disk size of the block
* @param uncompressedsize the uncompressed size of the block
*/
void blockwritten long offset  int ondisksize  int uncompressedsize
/**
* the type of blocks this block writer produces.
*/
blocktype getinlineblocktype
/**
* @return true if inline blocks produced by this writer should be cached
*/
boolean cacheonwrite