/**
* copyright 2010 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase zookeeper
import org apache hadoop hbase abortable
import org apache hadoop hbase servername
import org apache hadoop hbase catalog rootlocationeditor
import org apache hadoop hbase util addressing
import org apache hadoop hbase util bytes
import org apache zookeeper keeperexception
/**
* tracks the root region server location node in zookeeper.
* root region location is set by {@link rootlocationeditor} usually called
* out of <code>regionserverservices</code>.
* this class has a watcher on the root location and notices changes.
*/
public class rootregiontracker extends zookeepernodetracker
/**
* creates a root region location tracker.
*
* <p>after construction, use {@link #start} to kick off tracking.
*
* @param watcher
* @param abortable
*/
public rootregiontracker zookeeperwatcher watcher  abortable abortable
super watcher  watcher rootserverznode  abortable
/**
* checks if the root region location is available.
* @return true if root region location is available, false if not
*/
public boolean islocationavailable
return super getdata true     null
/**
* gets the root region location, if available.  null if not.  does not block.
* @return server name
* @throws interruptedexception
*/
public servername getrootregionlocation   throws interruptedexception
return datatoservername super getdata true
/**
* gets the root region location, if available, and waits for up to the
* specified timeout if not immediately available.
* given the zookeeper notification could be delayed, we will try to
* get the latest data.
* @param timeout maximum time to wait, in millis
* @return server name for server hosting root region formatted as per
* {@link servername}, or null if none available
* @throws interruptedexception if interrupted while waiting
*/
public servername waitrootregionlocation long timeout
throws interruptedexception
if  false    checkifbasenodeavailable
string errormsg
log error errormsg
throw new illegalargumentexception errormsg
return datatoservername super blockuntilavailable timeout  true
/*
* @param data
* @return returns null if <code>data</code> is null else converts passed data
* to a servername instance.
*/
private static servername datatoservername final byte  data
// the str returned could be old style -- pre hbase-1502 -- which was
// hostname and port seperated by a colon rather than hostname, port and
// startcode delimited by a ','.
if  data    null    data length <  0  return null
string str   bytes tostring data
int index   str indexof servername servername_separator
if  index     1
// presume its servername.tostring() format.
return servername parseservername str
// presume it a hostname:port format.
string hostname   addressing parsehostname str
int port   addressing parseport str
return new servername hostname  port   1l