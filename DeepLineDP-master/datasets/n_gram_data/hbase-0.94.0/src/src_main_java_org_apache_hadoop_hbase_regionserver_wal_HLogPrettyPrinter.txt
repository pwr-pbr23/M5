/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase regionserver wal
import java io filenotfoundexception
import java io ioexception
import java io printstream
import java util arraylist
import java util date
import java util hashmap
import java util list
import java util map
import org apache commons cli commandline
import org apache commons cli commandlineparser
import org apache commons cli helpformatter
import org apache commons cli options
import org apache commons cli parseexception
import org apache commons cli posixparser
import org apache hadoop conf configuration
import org apache hadoop fs filesystem
import org apache hadoop fs path
import org apache hadoop hbase hbaseconfiguration
import org apache hadoop hbase keyvalue
import org apache hadoop hbase regionserver wal hlog reader
import org apache hadoop hbase util bytes
import org codehaus jackson map objectmapper
/**
* hlogprettyprinter prints the contents of a given hlog with a variety of
* options affecting formatting and extent of content.
*
* it targets two usage cases: pretty printing for ease of debugging directly by
* humans, and json output for consumption by monitoring and/or maintenance
* scripts.
*
* it can filter by row, region, or sequence id.
*
* it can also toggle output of values.
*
*/
public class hlogprettyprinter
private boolean outputvalues
private boolean outputjson
// the following enable filtering by sequence, region, and row, respectively
private long sequence
private string region
private string row
// enable in order to output a single list of transactions from several files
private boolean persistentoutput
private boolean firsttxn
// useful for programatic capture of json output
private printstream out
// for json encoding
private objectmapper mapper
/**
* basic constructor that simply initializes values to reasonable defaults.
*/
public hlogprettyprinter
outputvalues   false
outputjson   false
sequence    1
region   null
row   null
persistentoutput   false
firsttxn   true
out   system out
mapper   new objectmapper
/**
* fully specified constructor.
*
* @param outputvalues
*          when true, enables output of values along with other log
*          information
* @param outputjson
*          when true, enables output in json format rather than a
*          "pretty string"
* @param sequence
*          when nonnegative, serves as a filter; only log entries with this
*          sequence id will be printed
* @param region
*          when not null, serves as a filter; only log entries from this
*          region will be printed
* @param row
*          when not null, serves as a filter; only log entries from this row
*          will be printed
* @param persistentoutput
*          keeps a single list running for multiple files. if enabled, the
*          endpersistentoutput() method must be used!
* @param out
*          specifies an alternative to stdout for the destination of this
*          prettyprinter's output.
*/
public hlogprettyprinter boolean outputvalues  boolean outputjson
long sequence  string region  string row  boolean persistentoutput
printstream out
this outputvalues   outputvalues
this outputjson   outputjson
this sequence   sequence
this region   region
this row   row
this persistentoutput   persistentoutput
if  persistentoutput
beginpersistentoutput
this out   out
this firsttxn   true
/**
* turns value output on
*/
public void enablevalues
outputvalues   true
/**
* turns value output off
*/
public void disablevalues
outputvalues   false
/**
* turns json output on
*/
public void enablejson
outputjson   true
/**
* turns json output off, and turns on "pretty strings" for human consumption
*/
public void disablejson
outputjson   false
/**
* sets the region by which output will be filtered
*
* @param sequence
*          when nonnegative, serves as a filter; only log entries with this
*          sequence id will be printed
*/
public void setsequencefilter long sequence
this sequence   sequence
/**
* sets the region by which output will be filtered
*
* @param region
*          when not null, serves as a filter; only log entries from this
*          region will be printed
*/
public void setregionfilter string region
this region   region
/**
* sets the region by which output will be filtered
*
* @param row
*          when not null, serves as a filter; only log entries from this row
*          will be printed
*/
public void setrowfilter string row
this row   row
/**
* enables output as a single, persistent list. at present, only relevant in
* the case of json output.
*/
public void beginpersistentoutput
if  persistentoutput
return
persistentoutput   true
firsttxn   true
if  outputjson
out print
/**
* ends output of a single, persistent list. at present, only relevant in the
* case of json output.
*/
public void endpersistentoutput
if   persistentoutput
return
persistentoutput   false
if  outputjson
out print
/**
* reads a log file and outputs its contents, one transaction at a time, as
* specified by the currently configured options
*
* @param conf
*          the hbase configuration relevant to this log file
* @param p
*          the path of the log file to be read
* @throws ioexception
*           may be unable to access the configured filesystem or requested
*           file.
*/
public void processfile final configuration conf  final path p
throws ioexception
filesystem fs   filesystem get conf
if   fs exists p
throw new filenotfoundexception p tostring
if   fs isfile p
throw new ioexception p
if  outputjson     persistentoutput
out print
firsttxn   true
reader log   hlog getreader fs  p  conf
try
hlog entry entry
while   entry   log next       null
hlogkey key   entry getkey
waledit edit   entry getedit
// begin building a transaction structure
map<string  object> txn   key tostringmap
// check output filters
if  sequence >  0      long  txn get        sequence
continue
if  region    null       string  txn get     equals region
continue
// initialize list into which we will store atomic actions
list<map> actions   new arraylist<map>
for  keyvalue kv   edit getkeyvalues
// add atomic operation to txn
map<string  object> op
new hashmap<string  object> kv tostringmap
if  outputvalues
op put    bytes tostringbinary kv getvalue
// check row output filter
if  row    null      string  op get     equals row
actions add op
if  actions size      0
continue
txn put    actions
if  outputjson
// json output is a straightforward "tostring" on the txn object
if  firsttxn
firsttxn   false
else
out print
// encode and print json
out print mapper writevalueasstring txn
else
// pretty output, complete with indentation by atomic action
out println     txn get
txn get
txn get
for  int i   0  i < actions size    i
map op   actions get i
out println
out println     op get
out println     op get
op get
out println
new date  long  op get
if  outputvalues
out println     op get
finally
log close
if  outputjson     persistentoutput
out print
public static void main string args  throws ioexception
run args
/**
* pass one or more log file names and formatting options and it will dump out
* a text version of the contents on <code>stdout</code>.
*
* @param args
*          command line arguments
* @throws ioexception
*           thrown upon file system errors etc.
* @throws parseexception
*           thrown if command-line parsing fails.
*/
public static void run string args  throws ioexception
// create options
options options   new options
options addoption       false
options addoption       false
options addoption       false
options addoption       true
options addoption       true
options addoption       true
hlogprettyprinter printer   new hlogprettyprinter
commandlineparser parser   new posixparser
list files   null
try
commandline cmd   parser parse options  args
files   cmd getarglist
if  files size      0    cmd hasoption
helpformatter formatter   new helpformatter
formatter printhelp    options  true
system exit  1
// configure the pretty printer using command line options
if  cmd hasoption
printer enablevalues
if  cmd hasoption
printer enablejson
if  cmd hasoption
printer setregionfilter cmd getoptionvalue
if  cmd hasoption
printer setsequencefilter long parselong cmd getoptionvalue
if  cmd hasoption
printer setrowfilter cmd getoptionvalue
catch  parseexception e
e printstacktrace
helpformatter formatter   new helpformatter
formatter printhelp    options  true
system exit  1
// get configuration, file system, and process the given files
configuration conf   hbaseconfiguration create
conf set
conf get org apache hadoop hbase hconstants hbase_dir
conf set
conf get org apache hadoop hbase hconstants hbase_dir
// begin output
printer beginpersistentoutput
for  object f   files
path file   new path  string  f
filesystem fs   file getfilesystem conf
if   fs exists file
system err println     file
return
printer processfile conf  file
printer endpersistentoutput