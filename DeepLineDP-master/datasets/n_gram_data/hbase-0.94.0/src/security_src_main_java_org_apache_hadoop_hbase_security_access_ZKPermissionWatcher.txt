/*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase security access
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop conf configuration
import org apache hadoop hbase util bytes
import org apache hadoop hbase zookeeper zkutil
import org apache hadoop hbase zookeeper zookeeperlistener
import org apache hadoop hbase zookeeper zookeeperwatcher
import org apache zookeeper keeperexception
import java io ioexception
import java util list
/**
* handles synchronization of access control list entries and updates
* throughout all nodes in the cluster.  the {@link accesscontroller} instance
* on the {@code _acl_} table regions, creates a znode for each table as
* {@code /hbase/acl/tablename}, with the znode data containing a serialized
* list of the permissions granted for the table.  the {@code accesscontroller}
* instances on all other cluster hosts watch the znodes for updates, which
* trigger updates in the {@link tableauthmanager} permission cache.
*/
public class zkpermissionwatcher extends zookeeperlistener
private static log log   logfactory getlog zkpermissionwatcher class
// parent node for permissions lists
static final string acl_node
tableauthmanager authmanager
string aclznode
public zkpermissionwatcher zookeeperwatcher watcher
tableauthmanager authmanager  configuration conf
super watcher
this authmanager   authmanager
string aclznodeparent   conf get    acl_node
this aclznode   zkutil joinznode watcher baseznode  aclznodeparent
public void start   throws keeperexception
watcher registerlistener this
if  zkutil watchandcheckexists watcher  aclznode
list<zkutil nodeanddata> existing
zkutil getchilddataandwatchfornewchildren watcher  aclznode
if  existing    null
refreshnodes existing
@override
public void nodecreated string path
if  path equals aclznode
try
list<zkutil nodeanddata> nodes
zkutil getchilddataandwatchfornewchildren watcher  aclznode
refreshnodes nodes
catch  keeperexception ke
log error    ke
// only option is to abort
watcher abort    ke
@override
public void nodedeleted string path
if  aclznode equals zkutil getparent path
string table   zkutil getnodename path
authmanager remove bytes tobytes table
@override
public void nodedatachanged string path
if  aclznode equals zkutil getparent path
// update cache on an existing table node
string table   zkutil getnodename path
try
byte data   zkutil getdataandwatch watcher  path
authmanager refreshcachefromwritable bytes tobytes table   data
catch  keeperexception ke
log error   table  ke
// only option is to abort
watcher abort     table  ke
catch  ioexception ioe
log error    ioe
@override
public void nodechildrenchanged string path
if  path equals aclznode
// table permissions changed
try
list<zkutil nodeanddata> nodes
zkutil getchilddataandwatchfornewchildren watcher  aclznode
refreshnodes nodes
catch  keeperexception ke
log error   path  ke
watcher abort   path  ke
private void refreshnodes list<zkutil nodeanddata> nodes
for  zkutil nodeanddata n   nodes
if  n isempty    continue
string path   n getnode
string table   zkutil getnodename path
try
byte nodedata   n getdata
if  log isdebugenabled
log debug   table
bytes tostringbinary nodedata
authmanager refreshcachefromwritable bytes tobytes table
nodedata
catch  ioexception ioe
log error     table
ioe
/***
* write a table's access controls to the permissions mirror in zookeeper
* @param tablename
* @param permsdata
*/
public void writetozookeeper string tablename
byte permsdata
string zknode
zkutil joinznode zkutil joinznode watcher baseznode  acl_node
tablename
try
zkutil createwithparents watcher  zknode
zkutil updateexistingnodedata watcher  zknode
permsdata   1
catch  keeperexception e
log error     tablename
e
watcher abort   zknode    e