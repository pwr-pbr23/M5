/**
* copyright 2010 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase zookeeper
import java util hashmap
import java util hashset
import java util list
import java util map
import java util set
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop hbase master assignmentmanager
import org apache hadoop hbase util bytes
import org apache zookeeper keeperexception
/**
* helper class for table state tracking for use by {@link assignmentmanager}.
* reads, caches and sets state up in zookeeper.  if multiple read/write
* clients, will make for confusion.  read-only clients other than
* assignmentmanager interested in learning table state can use the
* read-only utility methods {@link #isenabledtable(zookeeperwatcher, string)}
* and {@link #isdisabledtable(zookeeperwatcher, string)}.
*
* <p>to save on trips to the zookeeper ensemble, internally we cache table
* state.
*/
public class zktable
// a znode will exist under the table directory if it is in any of the
// following states: {@link tablestate#enabling} , {@link tablestate#disabling},
// or {@link tablestate#disabled}.  if {@link tablestate#enabled}, there will
// be no entry for a table in zk.  thats how it currently works.
private static final log log   logfactory getlog zktable class
private final zookeeperwatcher watcher
/**
* cache of what we found in zookeeper so we don't have to go to zk ensemble
* for every query.  synchronize access rather than use concurrent map because
* synchronization needs to span query of zk.
*/
private final map<string  tablestate> cache
new hashmap<string  tablestate>
// todo: make it so always a table znode. put table schema here as well as table state.
// have watcher on table znode so all are notified of state or schema change.
/**
* states a table can be in.
* {@link tablestate#enabled} is not used currently; its the absence of state
* in zookeeper that indicates an enabled table currently.
*/
public static enum tablestate
enabled
disabled
disabling
enabling
public zktable final zookeeperwatcher zkw  throws keeperexception
super
this watcher   zkw
populatetablestates
/**
* gets a list of all the tables set as disabled in zookeeper.
* @throws keeperexception
*/
private void populatetablestates
throws keeperexception
synchronized  this cache
list<string> children
zkutil listchildrennowatch this watcher  this watcher tableznode
if  children    null  return
for  string child  children
tablestate state   gettablestate this watcher  child
if  state    null  this cache put child  state
/**
* @param zkw
* @param child
* @return null or {@link tablestate} found in znode.
* @throws keeperexception
*/
private static tablestate gettablestate final zookeeperwatcher zkw
final string child
throws keeperexception
string znode   zkutil joinznode zkw tableznode  child
byte  data   zkutil getdata zkw  znode
if  data    null    data length <  0
// null if table is enabled.
return null
string str   bytes tostring data
try
return tablestate valueof str
catch  illegalargumentexception e
throw new illegalargumentexception str
/**
* sets the specified table as disabled in zookeeper.  fails silently if the
* table is already disabled in zookeeper.  sets no watches.
* @param tablename
* @throws keeperexception unexpected zookeeper exception
*/
public void setdisabledtable string tablename
throws keeperexception
synchronized  this cache
if   isdisablingordisabledtable tablename
log warn     tablename
this cache get tablename
settablestate tablename  tablestate disabled
/**
* sets the specified table as disabling in zookeeper.  fails silently if the
* table is already disabled in zookeeper.  sets no watches.
* @param tablename
* @throws keeperexception unexpected zookeeper exception
*/
public void setdisablingtable final string tablename
throws keeperexception
synchronized  this cache
if   isenabledordisablingtable tablename
log warn     tablename
this cache get tablename
settablestate tablename  tablestate disabling
/**
* sets the specified table as enabling in zookeeper.  fails silently if the
* table is already disabled in zookeeper.  sets no watches.
* @param tablename
* @throws keeperexception unexpected zookeeper exception
*/
public void setenablingtable final string tablename
throws keeperexception
synchronized  this cache
if   isdisabledorenablingtable tablename
log warn     tablename
this cache get tablename
settablestate tablename  tablestate enabling
/**
* sets the specified table as enabling in zookeeper atomically
* if the table is already in enabling state, no operation is performed
* @param tablename
* @return if the operation succeeds or not
* @throws keeperexception unexpected zookeeper exception
*/
public boolean checkandsetenablingtable final string tablename
throws keeperexception
synchronized  this cache
if  isenablingtable tablename
return false
settablestate tablename  tablestate enabling
return true
/**
* sets the specified table as enabling in zookeeper atomically
* if the table isn't in disabled state, no operation is performed
* @param tablename
* @return if the operation succeeds or not
* @throws keeperexception unexpected zookeeper exception
*/
public boolean checkdisabledandsetenablingtable final string tablename
throws keeperexception
synchronized  this cache
if   isdisabledtable tablename
return false
settablestate tablename  tablestate enabling
return true
/**
* sets the specified table as disabling in zookeeper atomically
* if the table isn't in enabled state, no operation is performed
* @param tablename
* @return if the operation succeeds or not
* @throws keeperexception unexpected zookeeper exception
*/
public boolean checkenabledandsetdisablingtable final string tablename
throws keeperexception
synchronized  this cache
if  this cache get tablename     null     isenabledtable tablename
return false
settablestate tablename  tablestate disabling
return true
private void settablestate final string tablename  final tablestate state
throws keeperexception
string znode   zkutil joinznode this watcher tableznode  tablename
if  zkutil checkexists this watcher  znode      1
zkutil createandfailsilent this watcher  znode
synchronized  this cache
zkutil setdata this watcher  znode  bytes tobytes state tostring
this cache put tablename  state
public boolean isdisabledtable final string tablename
return istablestate tablename  tablestate disabled
/**
* go to zookeeper and see if state of table is {@link tablestate#disabled}.
* this method does not use cache as {@link #isdisabledtable(string)} does.
* this method is for clients other than {@link assignmentmanager}
* @param zkw
* @param tablename
* @return true if table is enabled.
* @throws keeperexception
*/
public static boolean isdisabledtable final zookeeperwatcher zkw
final string tablename
throws keeperexception
tablestate state   gettablestate zkw  tablename
return istablestate tablestate disabled  state
public boolean isdisablingtable final string tablename
return istablestate tablename  tablestate disabling
public boolean isenablingtable final string tablename
return istablestate tablename  tablestate enabling
public boolean isenabledtable string tablename
return istablestate tablename  tablestate enabled
/**
* go to zookeeper and see if state of table is {@link tablestate#enabled}.
* this method does not use cache as {@link #isenabledtable(string)} does.
* this method is for clients other than {@link assignmentmanager}
* @param zkw
* @param tablename
* @return true if table is enabled.
* @throws keeperexception
*/
public static boolean isenabledtable final zookeeperwatcher zkw
final string tablename
throws keeperexception
return gettablestate zkw  tablename     tablestate enabled
public boolean isdisablingordisabledtable final string tablename
synchronized  this cache
return isdisablingtable tablename     isdisabledtable tablename
/**
* go to zookeeper and see if state of table is {@link tablestate#disabling}
* of {@link tablestate#disabled}.
* this method does not use cache as {@link #isenabledtable(string)} does.
* this method is for clients other than {@link assignmentmanager}.
* @param zkw
* @param tablename
* @return true if table is enabled.
* @throws keeperexception
*/
public static boolean isdisablingordisabledtable final zookeeperwatcher zkw
final string tablename
throws keeperexception
tablestate state   gettablestate zkw  tablename
return istablestate tablestate disabling  state
istablestate tablestate disabled  state
public boolean isenabledordisablingtable final string tablename
synchronized  this cache
return isenabledtable tablename     isdisablingtable tablename
public boolean isdisabledorenablingtable final string tablename
synchronized  this cache
return isdisabledtable tablename     isenablingtable tablename
private boolean istablestate final string tablename  final tablestate state
synchronized  this cache
tablestate currentstate   this cache get tablename
return istablestate currentstate  state
private static boolean istablestate final tablestate expectedstate
final tablestate currentstate
return currentstate    null    currentstate equals expectedstate
/**
* deletes the table in zookeeper.  fails silently if the
* table is not currently disabled in zookeeper.  sets no watches.
* @param tablename
* @throws keeperexception unexpected zookeeper exception
*/
public void setdeletedtable final string tablename
throws keeperexception
synchronized  this cache
if  this cache remove tablename     null
log warn     tablename
zkutil deletenodefailsilent this watcher
zkutil joinznode this watcher tableznode  tablename
/**
* sets the enabled state in the cache and deletes the zookeeper node. fails
* silently if the node is not in enabled in zookeeper
*
* @param tablename
* @throws keeperexception
*/
public void setenabledtable final string tablename  throws keeperexception
settablestate tablename  tablestate enabled
/**
* check if table is present .
*
* @param tablename
* @return true if the table is present
*/
public boolean istablepresent final string tablename
synchronized  this cache
tablestate state   this cache get tablename
return   state    null
/**
* gets a list of all the tables set as disabled in zookeeper.
* @return set of disabled tables, empty set if none
*/
public set<string> getdisabledtables
set<string> disabledtables   new hashset<string>
synchronized  this cache
set<string> tables   this cache keyset
for  string table  tables
if  isdisabledtable table   disabledtables add table
return disabledtables
/**
* gets a list of all the tables set as disabled in zookeeper.
* @return set of disabled tables, empty set if none
* @throws keeperexception
*/
public static set<string> getdisabledtables zookeeperwatcher zkw
throws keeperexception
set<string> disabledtables   new hashset<string>
list<string> children
zkutil listchildrennowatch zkw  zkw tableznode
for  string child  children
tablestate state   gettablestate zkw  child
if  state    tablestate disabled  disabledtables add child
return disabledtables
/**
* gets a list of all the tables set as disabled in zookeeper.
* @return set of disabled tables, empty set if none
* @throws keeperexception
*/
public static set<string> getdisabledordisablingtables zookeeperwatcher zkw
throws keeperexception
set<string> disabledtables   new hashset<string>
list<string> children
zkutil listchildrennowatch zkw  zkw tableznode
for  string child  children
tablestate state   gettablestate zkw  child
if  state    tablestate disabled    state    tablestate disabling
disabledtables add child
return disabledtables