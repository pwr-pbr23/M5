/**
* copyright 2010 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase util
import java util stringtokenizer
import java util regex matcher
import java util regex pattern
/**
* utility creating hbase friendly keys.
* use fabricating row names or column qualifiers.
* <p>todo: add createschemeless key, a key that doesn't care if scheme is
* http or https.
* @see bytes#split(byte[], byte[], int)
*/
public class keying
private static final string scheme
private static final pattern uri_re_parser
pattern compile
/**
* makes a key out of passed uri for use as row name or column qualifier.
*
* this method runs transforms on the passed uri so it sits better
* as a key (or portion-of-a-key) in hbase.  the <code>host</code> portion of
* the uri authority is reversed so subdomains sort under their parent
* domain.  the returned string is an opaque uri of an artificial
* <code>r:</code> scheme to prevent the result being considered an uri of
* the original scheme.  here is an example of the transform: the url
* <code>http://lucene.apache.org/index.html?query=something#middle<code> is
* returned as
* <code>r:http://org.apache.lucene/index.html?query=something#middle</code>
* the transforms are reversible.  no transform is done if passed uri is
* not hierarchical.
*
* <p>if authority <code>userinfo</code> is present, will mess up the sort
* (until we do more work).</p>
*
* @param u url to transform.
* @return an opaque uri of artificial 'r' scheme with host portion of uri
* authority reversed (if present).
* @see #keytouri(string)
* @see <a href="http://www.ietf.org/rfc/rfc2396.txt">rfc2396</a>
*/
public static string createkey final string u
if  u startswith scheme
throw new illegalargumentexception     scheme
matcher m   getmatcher u
if  m    null     m matches
// if no match, return original string.
return u
return scheme   m group 1    reversehostname m group 2     m group 3
/**
* reverse the {@link #createkey(string)} transform.
*
* @param s <code>uri</code> made by {@link #createkey(string)}.
* @return 'restored' uri made by reversing the {@link #createkey(string)}
* transform.
*/
public static string keytouri final string s
if   s startswith scheme
return s
matcher m   getmatcher s substring scheme length
if  m    null     m matches
// if no match, return original string.
return s
return m group 1    reversehostname m group 2     m group 3
private static matcher getmatcher final string u
if  u    null    u length   <  0
return null
return uri_re_parser matcher u
private static string reversehostname final string hostname
if  hostname    null
return
stringbuilder sb   new stringbuilder hostname length
for  stringtokenizer st   new stringtokenizer hostname     false
st hasmoreelements
object next   st nextelement
if  sb length   > 0
sb insert 0
sb insert 0  next
return sb tostring