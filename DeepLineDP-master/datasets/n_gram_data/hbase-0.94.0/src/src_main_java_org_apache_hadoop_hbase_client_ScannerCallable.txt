/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase client
import java io ioexception
import java net unknownhostexception
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop hbase client metrics scanmetrics
import org apache hadoop hbase donotretryioexception
import org apache hadoop hbase hregioninfo
import org apache hadoop hbase notservingregionexception
import org apache hadoop hbase remoteexceptionhandler
import org apache hadoop hbase regionserver regionserverstoppedexception
import org apache hadoop ipc remoteexception
import org apache hadoop net dns
/**
* retries scanner operations such as create, next, etc.
* used by {@link resultscanner}s made by {@link htable}.
*/
public class scannercallable extends servercallable<result>
private static final log log   logfactory getlog scannercallable class
private long scannerid    1l
private boolean instantiated   false
private boolean closed   false
private scan scan
private int caching   1
private scanmetrics scanmetrics
// indicate if it is a remote server call
private boolean isregionserverremote   true
/**
* @param connection which connection
* @param tablename table callable is on
* @param scan the scan to execute
* @param scanmetrics the scanmetrics to used, if it is null, scannercallable
* won't collect metrics
*/
public scannercallable  hconnection connection  byte  tablename  scan scan
scanmetrics scanmetrics
super connection  tablename  scan getstartrow
this scan   scan
this scanmetrics   scanmetrics
/**
* @param reload force reload of server location
* @throws ioexception
*/
@override
public void connect boolean reload  throws ioexception
if   instantiated    reload
super connect reload
checkifregionserverisremote
instantiated   true
// check how often we retry.
// hconnectionmanager will call instantiateserver with reload==true
// if and only if for retries.
if  reload    this scanmetrics    null
this scanmetrics countofrpcretries inc
if  isregionserverremote
this scanmetrics countofremoterpcretries inc
/**
* compare the local machine hostname with region server's hostname
* to decide if hbase client connects to a remote region server
* @throws unknownhostexception.
*/
private void checkifregionserverisremote   throws unknownhostexception
string myaddress   dns getdefaulthost
if  this location gethostname   equalsignorecase myaddress
isregionserverremote   false
else
isregionserverremote   true
/**
* @see java.util.concurrent.callable#call()
*/
public result  call   throws ioexception
if  scannerid     1l    closed
close
else if  scannerid     1l     closed
this scannerid   openscanner
else
result  rrs   null
try
incrpccallsmetrics
rrs   server next scannerid  caching
updateresultsmetrics rrs
catch  ioexception e
ioexception ioe   null
if  e instanceof remoteexception
ioe   remoteexceptionhandler decoderemoteexception  remoteexception e
if  ioe    null  throw new ioexception e
if  ioe instanceof notservingregionexception
// throw a dnre so that we break out of cycle of calling nsre
// when what we need is to open scanner against new location.
// attach nsre to signal client that it needs to resetup scanner.
if  this scanmetrics    null
this scanmetrics countofnsre inc
throw new donotretryioexception    ioe
else if  ioe instanceof regionserverstoppedexception
// throw a dnre so that we break out of cycle of calling rsse
// when what we need is to open scanner against new location.
// attach rsse to signal client that it needs to resetup scanner.
throw new donotretryioexception    ioe
else
// the outer layers will retry
throw ioe
return rrs
return null
private void incrpccallsmetrics
if  this scanmetrics    null
return
this scanmetrics countofrpccalls inc
if  isregionserverremote
this scanmetrics countofremoterpccalls inc
private void updateresultsmetrics result rrs
if  this scanmetrics    null    rrs    null
return
for  result rr   rrs
this scanmetrics countofbytesinresults inc rr getbytes   getlength
if  isregionserverremote
this scanmetrics countofbytesinremoteresults inc
rr getbytes   getlength
private void close
if  this scannerid     1l
return
try
incrpccallsmetrics
this server close this scannerid
catch  ioexception e
log warn    e
this scannerid    1l
protected long openscanner   throws ioexception
incrpccallsmetrics
return this server openscanner this location getregioninfo   getregionname
this scan
protected scan getscan
return scan
/**
* call this when the next invocation of call should close the scanner
*/
public void setclose
this closed   true
/**
* @return the hregioninfo for the current region
*/
public hregioninfo gethregioninfo
if   instantiated
return null
return location getregioninfo
/**
* get the number of rows that will be fetched on next
* @return the number of rows for caching
*/
public int getcaching
return caching
/**
* set the number of rows that will be fetched on next
* @param caching the number of rows for caching
*/
public void setcaching int caching
this caching   caching