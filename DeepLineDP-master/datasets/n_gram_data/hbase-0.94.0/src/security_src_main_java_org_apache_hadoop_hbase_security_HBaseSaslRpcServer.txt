/*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase security
import java io bytearrayinputstream
import java io datainput
import java io datainputstream
import java io dataoutput
import java io ioexception
import java util map
import java util treemap
import javax security auth callback callback
import javax security auth callback callbackhandler
import javax security auth callback namecallback
import javax security auth callback passwordcallback
import javax security auth callback unsupportedcallbackexception
import javax security sasl authorizecallback
import javax security sasl realmcallback
import javax security sasl sasl
import org apache commons codec binary base64
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop conf configuration
import org apache hadoop hbase ipc hbaseserver
import org apache hadoop hbase ipc secureserver
import org apache hadoop ipc server
import org apache hadoop security usergroupinformation
import org apache hadoop security token secretmanager
import org apache hadoop security token tokenidentifier
import org apache hadoop security usergroupinformation authenticationmethod
import org apache hadoop security token secretmanager invalidtoken
/**
* a utility class for dealing with sasl on rpc server
*/
public class hbasesaslrpcserver
public static final log log   logfactory getlog hbasesaslrpcserver class
public static final string sasl_default_realm
public static final map<string  string> sasl_props
new treemap<string  string>
public static final int switch_to_simple_auth    88
public static enum qualityofprotection
authentication
integrity
privacy
public final string saslqop
private qualityofprotection string saslqop
this saslqop   saslqop
public string getsaslqop
return saslqop
public static void init configuration conf
qualityofprotection saslqop   qualityofprotection authentication
string rpcprotection   conf get
qualityofprotection authentication name   tolowercase
if  qualityofprotection integrity name   tolowercase
equals rpcprotection
saslqop   qualityofprotection integrity
else if  qualityofprotection privacy name   tolowercase   equals
rpcprotection
saslqop   qualityofprotection privacy
sasl_props put sasl qop  saslqop getsaslqop
sasl_props put sasl server_auth
static string encodeidentifier byte identifier
return new string base64 encodebase64 identifier
static byte decodeidentifier string identifier
return base64 decodebase64 identifier getbytes
public static <t extends tokenidentifier> t getidentifier string id
secretmanager<t> secretmanager  throws invalidtoken
byte tokenid   decodeidentifier id
t tokenidentifier   secretmanager createidentifier
try
tokenidentifier readfields new datainputstream new bytearrayinputstream
tokenid
catch  ioexception e
throw  invalidtoken  new invalidtoken
initcause e
return tokenidentifier
static char encodepassword byte password
return new string base64 encodebase64 password   tochararray
/** splitting fully qualified kerberos name into parts */
public static string splitkerberosname string fullname
return fullname split
public enum saslstatus
success  0
error  1
public final int state
private saslstatus int state
this state   state
/** authentication method */
public static enum authmethod
simple  byte  80     authenticationmethod simple
kerberos  byte  81     authenticationmethod kerberos
digest  byte  82     authenticationmethod token
/** the code for this method. */
public final byte code
public final string mechanismname
public final authenticationmethod authenticationmethod
private authmethod byte code  string mechanismname
authenticationmethod authmethod
this code   code
this mechanismname   mechanismname
this authenticationmethod   authmethod
private static final int first_code   values   code
/** return the object represented by the code. */
private static authmethod valueof byte code
final int i    code   0xff    first_code
return i < 0    i >  values   length ? null   values
/** return the sasl mechanism name */
public string getmechanismname
return mechanismname
/** read from in */
public static authmethod read datainput in  throws ioexception
return valueof in readbyte
/** write to out */
public void write dataoutput out  throws ioexception
out write code
/** callbackhandler for sasl digest-md5 mechanism */
public static class sasldigestcallbackhandler implements callbackhandler
private secretmanager<tokenidentifier> secretmanager
private secureserver secureconnection connection
public sasldigestcallbackhandler
secretmanager<tokenidentifier> secretmanager
secureserver secureconnection connection
this secretmanager   secretmanager
this connection   connection
private char getpassword tokenidentifier tokenid  throws invalidtoken
return encodepassword secretmanager retrievepassword tokenid
/** {@inheritdoc} */
@override
public void handle callback callbacks  throws invalidtoken
unsupportedcallbackexception
namecallback nc   null
passwordcallback pc   null
authorizecallback ac   null
for  callback callback   callbacks
if  callback instanceof authorizecallback
ac    authorizecallback  callback
else if  callback instanceof namecallback
nc    namecallback  callback
else if  callback instanceof passwordcallback
pc    passwordcallback  callback
else if  callback instanceof realmcallback
continue     realm is ignored
else
throw new unsupportedcallbackexception callback
if  pc    null
tokenidentifier tokenidentifier   getidentifier nc getdefaultname    secretmanager
char password   getpassword tokenidentifier
usergroupinformation user   null
user   tokenidentifier getuser       may throw exception
connection attemptinguser   user
if  log isdebugenabled
log debug
tokenidentifier getuser
pc setpassword password
if  ac    null
string authid   ac getauthenticationid
string authzid   ac getauthorizationid
if  authid equals authzid
ac setauthorized true
else
ac setauthorized false
if  ac isauthorized
if  log isdebugenabled
string username
getidentifier authzid  secretmanager  getuser   getusername
log debug
username
ac setauthorizedid authzid
/** callbackhandler for sasl gssapi kerberos mechanism */
public static class saslgsscallbackhandler implements callbackhandler
/** {@inheritdoc} */
@override
public void handle callback callbacks  throws
unsupportedcallbackexception
authorizecallback ac   null
for  callback callback   callbacks
if  callback instanceof authorizecallback
ac    authorizecallback  callback
else
throw new unsupportedcallbackexception callback
if  ac    null
string authid   ac getauthenticationid
string authzid   ac getauthorizationid
if  authid equals authzid
ac setauthorized true
else
ac setauthorized false
if  ac isauthorized
if  log isdebugenabled
log debug
authzid
ac setauthorizedid authzid