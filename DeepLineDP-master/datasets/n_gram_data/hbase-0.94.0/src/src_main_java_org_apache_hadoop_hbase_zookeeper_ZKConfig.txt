/**
* copyright 2010 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase zookeeper
import java io ioexception
import java io inputstream
import java net inetaddress
import java net unknownhostexception
import java util arraylist
import java util list
import java util properties
import java util map entry
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop conf configuration
import org apache hadoop hbase hconstants
import org apache hadoop util stringutils
/**
* utility methods for reading, parsing, and building zookeeper configuration.
*/
public class zkconfig
private static final log log   logfactory getlog zkconfig class
private static final string variable_start
private static final int variable_start_length   variable_start length
private static final string variable_end
private static final int variable_end_length   variable_end length
/**
* make a properties object holding zookeeper config equivalent to zoo.cfg.
* if there is a zoo.cfg in the classpath, simply read it in. otherwise parse
* the corresponding config options from the hbase xml configs and generate
* the appropriate zookeeper properties.
* @param conf configuration to read from.
* @return properties holding mappings representing zookeeper zoo.cfg file.
*/
public static properties makezkprops configuration conf
// first check if there is a zoo.cfg in the classpath. if so, simply read
// it and grab its configuration properties.
classloader cl   hquorumpeer class getclassloader
final inputstream inputstream
cl getresourceasstream hconstants zookeeper_config_name
if  inputstream    null
try
return parsezoocfg conf  inputstream
catch  ioexception e
log warn     hconstants zookeeper_config_name
e
// otherwise, use the configuration options from hbase's xml files.
properties zkproperties   new properties
// directly map all of the hbase.zookeeper.property.key properties.
for  entry<string  string> entry   conf
string key   entry getkey
if  key startswith hconstants zk_cfg_property_prefix
string zkkey   key substring hconstants zk_cfg_property_prefix_len
string value   entry getvalue
// if the value has variables substitutions, need to do a get.
if  value contains variable_start
value   conf get key
zkproperties put zkkey  value
// if clientport is not set, assign the default.
if  zkproperties getproperty hconstants client_port_str     null
zkproperties put hconstants client_port_str
hconstants default_zookeper_client_port
// create the server.x properties.
int peerport   conf getint    2888
int leaderport   conf getint    3888
final string serverhosts   conf getstrings hconstants zookeeper_quorum
hconstants localhost
for  int i   0  i < serverhosts length    i
string serverhost   serverhosts
string address   serverhost       peerport       leaderport
string key       i
zkproperties put key  address
return zkproperties
/**
* parse zookeeper's zoo.cfg, injecting hbase configuration variables in.
* this method is used for testing so we can pass our own inputstream.
* @param conf hbaseconfiguration to use for injecting variables.
* @param inputstream inputstream to read from.
* @return properties parsed from config stream with variables substituted.
* @throws ioexception if anything goes wrong parsing config
*/
public static properties parsezoocfg configuration conf
inputstream inputstream  throws ioexception
properties properties   new properties
try
properties load inputstream
catch  ioexception e
final string msg
hconstants zookeeper_config_name
log fatal msg
throw new ioexception msg  e
for  entry<object  object> entry   properties entryset
string value   entry getvalue   tostring   trim
string key   entry getkey   tostring   trim
stringbuilder newvalue   new stringbuilder
int varstart   value indexof variable_start
int varend   0
while  varstart     1
varend   value indexof variable_end  varstart
if  varend     1
string msg       varstart
log fatal msg
throw new ioexception msg
string variable   value substring varstart   variable_start_length  varend
string substitutevalue   system getproperty variable
if  substitutevalue    null
substitutevalue   conf get variable
if  substitutevalue    null
string msg       variable
log fatal msg
throw new ioexception msg
newvalue append substitutevalue
varend    variable_end_length
varstart   value indexof variable_start  varend
// special case for 'hbase.cluster.distributed' property being 'true'
if  key startswith
boolean mode   conf getboolean hconstants cluster_distributed  hconstants default_cluster_distributed
if  mode    hconstants cluster_is_distributed    value startswith hconstants localhost
string msg
getting started
log fatal msg
throw new ioexception msg
newvalue append value substring varend
properties setproperty key  newvalue tostring
return properties
/**
* return the zk quorum servers string given zk properties returned by
* makezkprops
* @param properties
* @return quorum servers string
*/
public static string getzkquorumserversstring properties properties
string clientport   null
list<string> servers   new arraylist<string>
// the clientport option may come after the server.x hosts, so we need to
// grab everything and then create the final host:port comma separated list.
boolean anyvalid   false
for  entry<object object> property   properties entryset
string key   property getkey   tostring   trim
string value   property getvalue   tostring   trim
if  key equals
clientport   value
else if  key startswith
string host   value substring 0  value indexof
servers add host
try
//noinspection resultofmethodcallignored
inetaddress getbyname host
anyvalid   true
catch  unknownhostexception e
log warn stringutils stringifyexception e
if   anyvalid
log error     hconstants zookeeper_config_name
return null
if  clientport    null
log error     hconstants zookeeper_config_name
return null
if  servers isempty
log fatal
return null
stringbuilder hostportbuilder   new stringbuilder
for  int i   0  i < servers size      i
string host   servers get i
if  i > 0
hostportbuilder append
hostportbuilder append host
hostportbuilder append
hostportbuilder append clientport
return hostportbuilder tostring
/**
* return the zk quorum servers string given the specified configuration.
* @param conf
* @return quorum servers
*/
public static string getzkquorumserversstring configuration conf
return getzkquorumserversstring makezkprops conf