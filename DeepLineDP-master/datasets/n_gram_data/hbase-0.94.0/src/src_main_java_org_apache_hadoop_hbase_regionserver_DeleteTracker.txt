/**
* copyright 2010 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase regionserver
/**
* this interface is used for the tracking and enforcement of deletes
* during the course of a get or scan operation.
* <p>
* this class is utilized through three methods:
* <ul><li>{@link #add} when encountering a delete
* <li>{@link #isdeleted} when checking if a put keyvalue has been deleted
* <li>{@link #update} when reaching the end of a storefile
*/
public interface deletetracker
/**
* add the specified keyvalue to the list of deletes to check against for
* this row operation.
* <p>
* this is called when a delete is encountered in a storefile.
* @param buffer keyvalue buffer
* @param qualifieroffset column qualifier offset
* @param qualifierlength column qualifier length
* @param timestamp timestamp
* @param type delete type as byte
*/
public void add byte  buffer  int qualifieroffset  int qualifierlength
long timestamp  byte type
/**
* check if the specified keyvalue buffer has been deleted by a previously
* seen delete.
* @param buffer keyvalue buffer
* @param qualifieroffset column qualifier offset
* @param qualifierlength column qualifier length
* @param timestamp timestamp
* @return deleteresult the result tells whether the keyvalue is deleted and why
*/
public deleteresult isdeleted byte  buffer  int qualifieroffset
int qualifierlength  long timestamp
/**
* @return true if there are no current delete, false otherwise
*/
public boolean isempty
/**
* called at the end of every storefile.
* <p>
* many optimized implementations of trackers will require an update at
* when the end of each storefile is reached.
*/
public void update
/**
* called between rows.
* <p>
* this clears everything as if a new deletetracker was instantiated.
*/
public void reset
/**
* return codes for comparison of two deletes.
* <p>
* the codes tell the merging function what to do.
* <p>
* include means add the specified delete to the merged list.
* next means move to the next element in the specified list(s).
*/
enum deletecompare
include_old_next_old
include_old_next_both
include_new_next_new
include_new_next_both
next_old
next_new
/**
* returns codes for delete result.
* the codes tell the scanquerymatcher whether the kv is deleted and why.
* based on the delete result, the scanquerymatcher will decide the next
* operation
*/
public static enum deleteresult
family_deleted     the keyvalue is deleted by a delete family
column_deleted     the keyvalue is deleted by a delete column
version_deleted     the keyvalue is deleted by a version delete
not_deleted