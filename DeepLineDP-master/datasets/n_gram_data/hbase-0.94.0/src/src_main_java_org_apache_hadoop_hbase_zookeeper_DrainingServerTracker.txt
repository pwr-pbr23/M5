/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase zookeeper
import java io ioexception
import java util list
import java util navigableset
import java util treeset
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop hbase abortable
import org apache hadoop hbase servername
import org apache hadoop hbase hserveraddress
import org apache hadoop hbase master servermanager
import org apache zookeeper keeperexception
/**
* tracks the list of draining region servers via zk.
*
* <p>this class is responsible for watching for changes to the draining
* servers list.  it handles adds/deletes in the draining rs list and
* watches each node.
*
* <p>if an rs gets deleted from draining list, we call
* {@link servermanager#removeserverfromdrainlist(servername)}
*
* <p>if an rs gets added to the draining list, we add a watcher to it and call
* {@link servermanager#addservertodrainlist(servername)}
*
*/
public class drainingservertracker extends zookeeperlistener
private static final log log   logfactory getlog drainingservertracker class
private servermanager servermanager
private navigableset<servername> drainingservers   new treeset<servername>
private abortable abortable
public drainingservertracker zookeeperwatcher watcher
abortable abortable  servermanager servermanager
super watcher
this abortable   abortable
this servermanager   servermanager
/**
* starts the tracking of draining regionservers.
*
* <p>all draining rss will be tracked after this method is called.
*
* @throws keeperexception
*/
public void start   throws keeperexception  ioexception
watcher registerlistener this
list<string> servers
zkutil listchildrenandwatchthem watcher  watcher drainingznode
add servers
private void add final list<string> servers  throws ioexception
synchronized this drainingservers
this drainingservers clear
for  string n  servers
final servername sn   new servername zkutil getnodename n
this drainingservers add sn
this servermanager addservertodrainlist sn
log info
sn
private void remove final servername sn
synchronized this drainingservers
this drainingservers remove sn
this servermanager removeserverfromdrainlist sn
@override
public void nodedeleted final string path
if path startswith watcher drainingznode
final servername sn   new servername zkutil getnodename path
log info
sn
remove sn
@override
public void nodechildrenchanged final string path
if path equals watcher drainingznode
try
final list<string> newnodes
zkutil listchildrenandwatchthem watcher  watcher drainingznode
add newnodes
catch  keeperexception e
abortable abort    e
catch  ioexception e
abortable abort    e