/*
* copyright 2010 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase filter
import org apache hadoop hbase keyvalue
import org apache hadoop hbase util bytes
import java io dataoutput
import java io ioexception
import java io datainput
import java util arraylist
import com google common base preconditions
/**
* this filter is used for selecting only those keys with columns that are
* between mincolumn to maxcolumn. for example, if mincolumn is 'an', and
* maxcolumn is 'be', it will pass keys with columns like 'ana', 'bad', but not
* keys with columns like 'bed', 'eye'
*
* if mincolumn is null, there is no lower bound. if maxcolumn is null, there is
* no upper bound.
*
* mincolumninclusive and maxcolumninclusive specify if the ranges are inclusive
* or not.
*/
public class columnrangefilter extends filterbase
protected byte mincolumn   null
protected boolean mincolumninclusive   true
protected byte maxcolumn   null
protected boolean maxcolumninclusive   false
public columnrangefilter
super
/**
* create a filter to select those keys with columns that are between mincolumn
* and maxcolumn.
* @param mincolumn minimum value for the column range. if if it's null,
* there is no lower bound.
* @param mincolumninclusive if true, include mincolumn in the range.
* @param maxcolumn maximum value for the column range. if it's null,
* @param maxcolumninclusive if true, include maxcolumn in the range.
* there is no upper bound.
*/
public columnrangefilter final byte mincolumn  boolean mincolumninclusive
final byte maxcolumn  boolean maxcolumninclusive
this mincolumn   mincolumn
this mincolumninclusive   mincolumninclusive
this maxcolumn   maxcolumn
this maxcolumninclusive   maxcolumninclusive
/**
* @return if min column range is inclusive.
*/
public boolean ismincolumninclusive
return mincolumninclusive
/**
* @return if max column range is inclusive.
*/
public boolean ismaxcolumninclusive
return maxcolumninclusive
/**
* @return the min column range for the filter
*/
public byte getmincolumn
return this mincolumn
/**
* @return true if min column is inclusive, false otherwise
*/
public boolean getmincolumninclusive
return this mincolumninclusive
/**
* @return the max column range for the filter
*/
public byte getmaxcolumn
return this maxcolumn
/**
* @return true if max column is inclusive, false otherwise
*/
public boolean getmaxcolumninclusive
return this maxcolumninclusive
@override
public returncode filterkeyvalue keyvalue kv
byte buffer   kv getbuffer
int qualifieroffset   kv getqualifieroffset
int qualifierlength   kv getqualifierlength
int cmpmin   1
if  this mincolumn    null
cmpmin   bytes compareto buffer  qualifieroffset  qualifierlength
this mincolumn  0  this mincolumn length
if  cmpmin < 0
return returncode seek_next_using_hint
if   this mincolumninclusive    cmpmin    0
return returncode skip
if  this maxcolumn    null
return returncode include
int cmpmax   bytes compareto buffer  qualifieroffset  qualifierlength
this maxcolumn  0  this maxcolumn length
if  this maxcolumninclusive    cmpmax <  0
this maxcolumninclusive    cmpmax < 0
return returncode include
return returncode next_row
public static filter createfilterfromarguments arraylist<byte > filterarguments
preconditions checkargument filterarguments size      4
filterarguments size
byte  mincolumn   parsefilter removequotesfrombytearray filterarguments get 0
boolean mincolumninclusive   parsefilter convertbytearraytoboolean filterarguments get 1
byte  maxcolumn   parsefilter removequotesfrombytearray filterarguments get 2
boolean maxcolumninclusive   parsefilter convertbytearraytoboolean filterarguments get 3
if  mincolumn length    0
mincolumn   null
if  maxcolumn length    0
maxcolumn   null
return new columnrangefilter mincolumn  mincolumninclusive
maxcolumn  maxcolumninclusive
@override
public void write dataoutput out  throws ioexception
// need to write out a flag for null value separately. otherwise,
// we will not be able to differentiate empty string and null
out writeboolean this mincolumn    null
bytes writebytearray out  this mincolumn
out writeboolean this mincolumninclusive
out writeboolean this maxcolumn    null
bytes writebytearray out  this maxcolumn
out writeboolean this maxcolumninclusive
@override
public void readfields datainput in  throws ioexception
boolean ismincolumnnull   in readboolean
this mincolumn   bytes readbytearray in
if  ismincolumnnull
this mincolumn   null
this mincolumninclusive   in readboolean
boolean ismaxcolumnnull   in readboolean
this maxcolumn   bytes readbytearray in
if  ismaxcolumnnull
this maxcolumn   null
this maxcolumninclusive   in readboolean
@override
public keyvalue getnextkeyhint keyvalue kv
return keyvalue createfirstonrow kv getbuffer    kv getrowoffset    kv
getrowlength    kv getbuffer    kv getfamilyoffset    kv
getfamilylength    this mincolumn  0  this mincolumn    null ? 0
this mincolumn length
@override
public string tostring
return this getclass   getsimplename
this mincolumninclusive ?          bytes tostringbinary this mincolumn
bytes tostringbinary this maxcolumn
this maxcolumninclusive ?