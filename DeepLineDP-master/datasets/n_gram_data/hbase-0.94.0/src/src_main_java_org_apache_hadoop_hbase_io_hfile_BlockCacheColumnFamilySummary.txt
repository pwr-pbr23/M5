/**
* copyright 2011 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase io hfile
import java io datainput
import java io dataoutput
import java io ioexception
import org apache hadoop fs path
import org apache hadoop io writable
/**
* blockcachecolumnfamilysummary represents a summary of the blockcache usage
* at table/columnfamily granularity.
* <br><br>
* as columnfamilies are owned by tables, a summary by columnfamily implies that
* the owning table is included in the summarization.
*
*/
public class blockcachecolumnfamilysummary implements writable  comparable<blockcachecolumnfamilysummary>
private string table
private string columnfamily
private int blocks
private long heapsize
/**
* default constructor for writable
*/
public blockcachecolumnfamilysummary
/**
*
* @param table table
* @param columnfamily columnfamily
*/
public blockcachecolumnfamilysummary string table  string columnfamily
this table   table
this columnfamily   columnfamily
/**
*
* @return table
*/
public string gettable
return table
/**
*
* @param table (table that owns the cached block)
*/
public void settable string table
this table   table
/**
*
* @return columnfamily
*/
public string getcolumnfamily
return columnfamily
/**
*
* @param columnfamily (columnfamily that owns the cached block)
*/
public void setcolumnfamily string columnfamily
this columnfamily   columnfamily
/**
*
* @return blocks in the cache
*/
public int getblocks
return blocks
/**
*
* @param blocks in the cache
*/
public void setblocks int blocks
this blocks   blocks
/**
*
* @return heapsize in the cache
*/
public long getheapsize
return heapsize
/**
* increments the number of blocks in the cache for this entry
*/
public void incrementblocks
this blocks
/**
*
* @param heapsize to increment
*/
public void incrementheapsize long heapsize
this heapsize   this heapsize   heapsize
/**
*
* @param heapsize (total heapsize for the table/cf)
*/
public void setheapsize long heapsize
this heapsize   heapsize
@override
public void readfields datainput in  throws ioexception
table   in readutf
columnfamily   in readutf
blocks   in readint
heapsize   in readlong
@override
public void write dataoutput out  throws ioexception
out writeutf table
out writeutf columnfamily
out writeint blocks
out writelong heapsize
@override
public int hashcode
final int prime   31
int result   1
result   prime   result
columnfamily    null  ? 0   columnfamily hashcode
result   prime   result     table    null  ? 0   table hashcode
return result
@override
public boolean equals object obj
if  this    obj
return true
if  obj    null
return false
if  getclass      obj getclass
return false
blockcachecolumnfamilysummary other    blockcachecolumnfamilysummary  obj
if  columnfamily    null
if  other columnfamily    null
return false
else if   columnfamily equals other columnfamily
return false
if  table    null
if  other table    null
return false
else if   table equals other table
return false
return true
@override
public string tostring
return     table
columnfamily       blocks       heapsize
/**
* construct a blockcachesummaryentry from a full storefile path
* <br><br>
* the path is expected to be in the format of...
* <pre>
* hdfs://localhost:51169/user/userid/-root-/70236052/info/3944417774205889744
* </pre>
* ... where: <br>
*  '-root-' = table <br>
* '70236052' = region <br>
* 'info' = columnfamily <br>
* '3944417774205889744' = storefile
*
* @param path (full storefile path)
* @return blockcachesummaryentry
*/
public static blockcachecolumnfamilysummary createfromstorefilepath path path
// the full path will look something like this...
// hdfs://localhost:51169/user/doug.meil/-root-/70236052/info/3944417774205889744
//                                        tbl    region   cf   sf
string sp   path tostring
string s   sp split
blockcachecolumnfamilysummary bcse   null
if  s length >  4
// why 4?   storefile, cf, region, table
string table   s      4th from the end
string cf   s         2nd from the end
bcse   new blockcachecolumnfamilysummary table  cf
return bcse
@override
public int compareto blockcachecolumnfamilysummary o
int i   table compareto o gettable
if  i    0
return i
return columnfamily compareto o getcolumnfamily
/**
* creates a new blockcachesummaryentry
*
* @param e blockcachesummaryentry
* @return new blockcachesummaryentry
*/
public static blockcachecolumnfamilysummary create blockcachecolumnfamilysummary e
blockcachecolumnfamilysummary e2   new blockcachecolumnfamilysummary
e2 settable e gettable
e2 setcolumnfamily e getcolumnfamily
return e2