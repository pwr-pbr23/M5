/**
* copyright 2010 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase client
import org apache hadoop conf configuration
import org apache hadoop hbase keyvalue
import org apache hadoop hbase filter filter
import org apache hadoop hbase io timerange
import org apache hadoop hbase util bytes
import org apache hadoop io writable
import org apache hadoop io writablefactories
import java io datainput
import java io dataoutput
import java io ioexception
import java util arraylist
import java util hashmap
import java util list
import java util map
import java util navigableset
import java util set
import java util treemap
import java util treeset
/**
* used to perform get operations on a single row.
* <p>
* to get everything for a row, instantiate a get object with the row to get.
* to further define the scope of what to get, perform additional methods as
* outlined below.
* <p>
* to get all columns from specific families, execute {@link #addfamily(byte[]) addfamily}
* for each family to retrieve.
* <p>
* to get specific columns, execute {@link #addcolumn(byte[], byte[]) addcolumn}
* for each column to retrieve.
* <p>
* to only retrieve columns within a specific range of version timestamps,
* execute {@link #settimerange(long, long) settimerange}.
* <p>
* to only retrieve columns with a specific timestamp, execute
* {@link #settimestamp(long) settimestamp}.
* <p>
* to limit the number of versions of each column to be returned, execute
* {@link #setmaxversions(int) setmaxversions}.
* <p>
* to add a filter, execute {@link #setfilter(filter) setfilter}.
*/
public class get extends operationwithattributes
implements writable  row  comparable<row>
private static final byte get_version    byte 2
private byte  row   null
private long lockid    1l
private int maxversions   1
private boolean cacheblocks   true
private filter filter   null
private timerange tr   new timerange
private map<byte   navigableset<byte >> familymap
new treemap<byte   navigableset<byte >> bytes bytes_comparator
/** constructor for writable.  do not use */
public get
/**
* create a get operation for the specified row.
* <p>
* if no further operations are done, this will get the latest version of
* all columns in all families of the specified row.
* @param row row key
*/
public get byte  row
this row  null
/**
* create a get operation for the specified row, using an existing row lock.
* <p>
* if no further operations are done, this will get the latest version of
* all columns in all families of the specified row.
* @param row row key
* @param rowlock previously acquired row lock, or null
*/
public get byte  row  rowlock rowlock
this row   row
if rowlock    null
this lockid   rowlock getlockid
/**
* get all columns from the specified family.
* <p>
* overrides previous calls to addcolumn for this family.
* @param family family name
* @return the get object
*/
public get addfamily byte  family
familymap remove family
familymap put family  null
return this
/**
* get the column from the specific family with the specified qualifier.
* <p>
* overrides previous calls to addfamily for this family.
* @param family family name
* @param qualifier column qualifier
* @return the get objec
*/
public get addcolumn byte  family  byte  qualifier
navigableset<byte > set   familymap get family
if set    null
set   new treeset<byte > bytes bytes_comparator
set add qualifier
familymap put family  set
return this
/**
* get versions of columns only within the specified timestamp range,
* [minstamp, maxstamp).
* @param minstamp minimum timestamp value, inclusive
* @param maxstamp maximum timestamp value, exclusive
* @throws ioexception if invalid time range
* @return this for invocation chaining
*/
public get settimerange long minstamp  long maxstamp
throws ioexception
tr   new timerange minstamp  maxstamp
return this
/**
* get versions of columns with the specified timestamp.
* @param timestamp version timestamp
* @return this for invocation chaining
*/
public get settimestamp long timestamp
try
tr   new timerange timestamp  timestamp 1
catch ioexception e
// will never happen
return this
/**
* get all available versions.
* @return this for invocation chaining
*/
public get setmaxversions
this maxversions   integer max_value
return this
/**
* get up to the specified number of versions of each column.
* @param maxversions maximum versions for each column
* @throws ioexception if invalid number of versions
* @return this for invocation chaining
*/
public get setmaxversions int maxversions  throws ioexception
if maxversions <  0
throw new ioexception
this maxversions   maxversions
return this
/**
* apply the specified server-side filter when performing the get.
* only {@link filter#filterkeyvalue(keyvalue)} is called after all tests
* for ttl, column match, deletes and max versions have been run.
* @param filter filter to run on the server
* @return this for invocation chaining
*/
public get setfilter filter filter
this filter   filter
return this
/* accessors */
/**
* @return filter
*/
public filter getfilter
return this filter
/**
* set whether blocks should be cached for this get.
* <p>
* this is true by default.  when true, default settings of the table and
* family are used (this will never override caching blocks if the block
* cache is disabled for that family or entirely).
*
* @param cacheblocks if false, default settings are overridden and blocks
* will not be cached
*/
public void setcacheblocks boolean cacheblocks
this cacheblocks   cacheblocks
/**
* get whether blocks should be cached for this get.
* @return true if default caching should be used, false if blocks should not
* be cached
*/
public boolean getcacheblocks
return cacheblocks
/**
* method for retrieving the get's row
* @return row
*/
public byte  getrow
return this row
/**
* method for retrieving the get's rowlock
* @return rowlock
*/
public rowlock getrowlock
return new rowlock this row  this lockid
/**
* method for retrieving the get's lockid
* @return lockid
*/
public long getlockid
return this lockid
/**
* method for retrieving the get's maximum number of version
* @return the maximum number of version to fetch for this get
*/
public int getmaxversions
return this maxversions
/**
* method for retrieving the get's timerange
* @return timerange
*/
public timerange gettimerange
return this tr
/**
* method for retrieving the keys in the familymap
* @return keys in the current familymap
*/
public set<byte> familyset
return this familymap keyset
/**
* method for retrieving the number of families to get from
* @return number of families
*/
public int numfamilies
return this familymap size
/**
* method for checking if any families have been inserted into this get
* @return true if familymap is non empty false otherwise
*/
public boolean hasfamilies
return  this familymap isempty
/**
* method for retrieving the get's familymap
* @return familymap
*/
public map<byte navigableset<byte>> getfamilymap
return this familymap
/**
* compile the table and column family (i.e. schema) information
* into a string. useful for parsing and aggregation by debugging,
* logging, and administration tools.
* @return map
*/
@override
public map<string  object> getfingerprint
map<string  object> map   new hashmap<string  object>
list<string> families   new arraylist<string>
map put    families
for  map entry<byte   navigableset<byte>> entry
this familymap entryset
families add bytes tostringbinary entry getkey
return map
/**
* compile the details beyond the scope of getfingerprint (row, columns,
* timestamps, etc.) into a map along with the fingerprinted information.
* useful for debugging, logging, and administration tools.
* @param maxcols a limit on the number of columns output prior to truncation
* @return map
*/
@override
public map<string  object> tomap int maxcols
// we start with the fingerprint map and build on top of it.
map<string  object> map   getfingerprint
// replace the fingerprint's simple list of families with a
// map from column families to lists of qualifiers and kv details
map<string  list<string>> columns   new hashmap<string  list<string>>
map put    columns
// add scalar information first
map put    bytes tostringbinary this row
map put    this maxversions
map put    this cacheblocks
list<long> timerange   new arraylist<long>
timerange add this tr getmin
timerange add this tr getmax
map put    timerange
int colcount   0
// iterate through affected families and add details
for  map entry<byte   navigableset<byte>> entry
this familymap entryset
list<string> familylist   new arraylist<string>
columns put bytes tostringbinary entry getkey     familylist
if entry getvalue      null
colcount
maxcols
familylist add
else
colcount    entry getvalue   size
if  maxcols <  0
continue
for  byte  column   entry getvalue
if    maxcols <  0
continue
familylist add bytes tostringbinary column
map put    colcount
if  this filter    null
map put    this filter tostring
return map
//row
public int compareto row other
return bytes compareto this getrow    other getrow
//writable
public void readfields final datainput in
throws ioexception
int version   in readbyte
if  version > get_version
throw new ioexception
this row   bytes readbytearray in
this lockid   in readlong
this maxversions   in readint
boolean hasfilter   in readboolean
if  hasfilter
this filter    filter createforname bytes tostring bytes readbytearray in
this filter readfields in
this cacheblocks   in readboolean
this tr   new timerange
tr readfields in
int numfamilies   in readint
this familymap
new treemap<byte  navigableset<byte >> bytes bytes_comparator
for int i 0  i<numfamilies  i
byte  family   bytes readbytearray in
boolean hascolumns   in readboolean
navigableset<byte > set   null
if hascolumns
int numcolumns   in readint
set   new treeset<byte > bytes bytes_comparator
for int j 0  j<numcolumns  j
byte  qualifier   bytes readbytearray in
set add qualifier
this familymap put family  set
readattributes in
public void write final dataoutput out
throws ioexception
out writebyte get_version
bytes writebytearray out  this row
out writelong this lockid
out writeint this maxversions
if this filter    null
out writeboolean false
else
out writeboolean true
bytes writebytearray out  bytes tobytes filter getclass   getname
filter write out
out writeboolean this cacheblocks
tr write out
out writeint familymap size
for map entry<byte   navigableset<byte >> entry
familymap entryset
bytes writebytearray out  entry getkey
navigableset<byte > columnset   entry getvalue
if columnset    null
out writeboolean false
else
out writeboolean true
out writeint columnset size
for byte  qualifier   columnset
bytes writebytearray out  qualifier
writeattributes out
@suppresswarnings
private writable createforname string classname
try
class<? extends writable> clazz
class<? extends writable>  class forname classname
return writablefactories newinstance clazz  new configuration
catch  classnotfoundexception e
throw new runtimeexception     classname