/**
* copyright 2009 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase io
import java util
/**
* a static interface.
* instead of having this code in the the hbasemapwritable code, where it
* blocks the possibility of altering the variables and changing their types,
* it is put here in this static interface where the static final maps are
* loaded one time. only byte[] and cell are supported at this time.
*/
public interface codetoclassandback
/**
* static map that contains mapping from code to class
*/
public static final map<byte  class<?>> code_to_class
new hashmap<byte  class<?>>
/**
* static map that contains mapping from class to code
*/
public static final map<class<?>  byte> class_to_code
new hashmap<class<?>  byte>
/**
* class list for supported classes
*/
public class<?> classlist    byte class
/**
* the static loader that is used instead of the static constructor in
* hbasemapwritable.
*/
public internalstaticloader sl
new internalstaticloader classlist  code_to_class  class_to_code
/**
* class that loads the static maps with their values.
*/
public class internalstaticloader
internalstaticloader class<?> classlist
map<byte class<?>> code_to_class  map<class<?>  byte> class_to_code
byte code   1
for int i 0  i<classlist length  i
class_to_code put classlist  code
code_to_class put code  classlist
code