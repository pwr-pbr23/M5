/**
* copyright 2007 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase mapreduce
import java io datainput
import java io dataoutput
import java io ioexception
import java util arrays
import org apache hadoop hbase hconstants
import org apache hadoop hbase util bytes
import org apache hadoop io writable
import org apache hadoop mapreduce inputsplit
/**
* a table split corresponds to a key range (low, high). all references to row
* below refer to the key of the row.
*/
public class tablesplit extends inputsplit
implements writable  comparable<tablesplit>
private byte  tablename
private byte  startrow
private byte  endrow
private string regionlocation
/** default constructor. */
public tablesplit
this hconstants empty_byte_array  hconstants empty_byte_array
hconstants empty_byte_array
/**
* creates a new instance while assigning all variables.
*
* @param tablename  the name of the current table.
* @param startrow  the start row of the split.
* @param endrow  the end row of the split.
* @param location  the location of the region.
*/
public tablesplit byte  tablename  byte  startrow  byte  endrow
final string location
this tablename   tablename
this startrow   startrow
this endrow   endrow
this regionlocation   location
/**
* returns the table name.
*
* @return the table name.
*/
public byte  gettablename
return tablename
/**
* returns the start row.
*
* @return the start row.
*/
public byte  getstartrow
return startrow
/**
* returns the end row.
*
* @return the end row.
*/
public byte  getendrow
return endrow
/**
* returns the region location.
*
* @return the region's location.
*/
public string getregionlocation
return regionlocation
/**
* returns the region's location as an array.
*
* @return the array containing the region location.
* @see org.apache.hadoop.mapreduce.inputsplit#getlocations()
*/
@override
public string getlocations
return new string  regionlocation
/**
* returns the length of the split.
*
* @return the length of the split.
* @see org.apache.hadoop.mapreduce.inputsplit#getlength()
*/
@override
public long getlength
// not clear how to obtain this... seems to be used only for sorting splits
return 0
/**
* reads the values of each field.
*
* @param in  the input to read from.
* @throws ioexception when reading the input fails.
*/
@override
public void readfields datainput in  throws ioexception
tablename   bytes readbytearray in
startrow   bytes readbytearray in
endrow   bytes readbytearray in
regionlocation   bytes tostring bytes readbytearray in
/**
* writes the field values to the output.
*
* @param out  the output to write to.
* @throws ioexception when writing the values to the output fails.
*/
@override
public void write dataoutput out  throws ioexception
bytes writebytearray out  tablename
bytes writebytearray out  startrow
bytes writebytearray out  endrow
bytes writebytearray out  bytes tobytes regionlocation
/**
* returns the details about this instance as a string.
*
* @return the values of this instance as a string.
* @see java.lang.object#tostring()
*/
@override
public string tostring
return regionlocation
bytes tostringbinary startrow        bytes tostringbinary endrow
/**
* compares this split against the given one.
*
* @param split  the split to compare to.
* @return the result of the comparison.
* @see java.lang.comparable#compareto(java.lang.object)
*/
@override
public int compareto tablesplit split
return bytes compareto getstartrow    split getstartrow
@override
public boolean equals object o
if  o    null      o instanceof tablesplit
return false
return bytes equals tablename    tablesplit o  tablename
bytes equals startrow    tablesplit o  startrow
bytes equals endrow    tablesplit o  endrow
regionlocation equals   tablesplit o  regionlocation
@override
public int hashcode
int result   tablename    null ? arrays hashcode tablename    0
result   31   result    startrow    null ? arrays hashcode startrow    0
result   31   result    endrow    null ? arrays hashcode endrow    0
result   31   result    regionlocation    null ? regionlocation hashcode     0
return result