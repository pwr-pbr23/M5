/*
* copyright 2010 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase filter
import org apache hadoop hbase keyvalue
import java io datainput
import java io dataoutput
import java io ioexception
import java util list
/**
* a wrapper filter that filters an entire row if any of the keyvalue checks do
* not pass.
* <p>
* for example, if all columns in a row represent weights of different things,
* with the values being the actual weights, and we want to filter out the
* entire row if any of its weights are zero.  in this case, we want to prevent
* rows from being emitted if a single key is filtered.  combine this filter
* with a {@link valuefilter}:
* <p>
* <pre>
* scan.setfilter(new skipfilter(new valuefilter(compareop.equal,
*     new binarycomparator(bytes.tobytes(0))));
* </code>
* any row which contained a column whose value was 0 will be filtered out.
* without this filter, the other non-zero valued columns in the row would still
* be emitted.
*/
public class skipfilter extends filterbase
private boolean filterrow   false
private filter filter
public skipfilter
super
public skipfilter filter filter
this filter   filter
public filter getfilter
return filter
public void reset
filter reset
filterrow   false
private void changefr boolean value
filterrow   filterrow    value
public returncode filterkeyvalue keyvalue v
returncode c   filter filterkeyvalue v
changefr c    returncode include
return c
@override
public keyvalue transform keyvalue v
return filter transform v
public boolean filterrow
return filterrow
public void write dataoutput out  throws ioexception
out writeutf this filter getclass   getname
this filter write out
public void readfields datainput in  throws ioexception
string classname   in readutf
try
this filter    filter  class forname classname  newinstance
this filter readfields in
catch  instantiationexception e
throw new runtimeexception    e
catch  illegalaccessexception e
throw new runtimeexception    e
catch  classnotfoundexception e
throw new runtimeexception    e
@override
public string tostring
return this getclass   getsimplename         this filter tostring