/**
* copyright 2010 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase client
import java io ioexception
import java lang reflect undeclaredthrowableexception
import java net connectexception
import java net sockettimeoutexception
import java util arraylist
import java util list
import java util concurrent callable
import org apache hadoop conf configuration
import org apache hadoop hbase donotretryioexception
import org apache hadoop hbase hconstants
import org apache hadoop hbase hregionlocation
import org apache hadoop hbase ipc hbaserpc
import org apache hadoop hbase ipc hregioninterface
import org apache hadoop hbase util bytes
import org apache hadoop ipc remoteexception
/**
* abstract class that implements {@link callable}.  implementation stipulates
* return type and method we actually invoke on remote server.  usually
* used inside a try/catch that fields usual connection failures all wrapped
* up in a retry loop.
* <p>call {@link #connect(boolean)} to connect to server hosting region
* that contains the passed row in the passed table before invoking
* {@link #call()}.
* @see hconnection#getregionserverwithoutretries(servercallable)
* @param <t> the class that the servercallable handles
*/
public abstract class servercallable<t> implements callable<t>
protected final hconnection connection
protected final byte  tablename
protected final byte  row
protected hregionlocation location
protected hregioninterface server
protected int calltimeout
protected long starttime  endtime
/**
* @param connection connection to use.
* @param tablename table name to which <code>row</code> belongs.
* @param row the row we want in <code>tablename</code>.
*/
public servercallable hconnection connection  byte  tablename  byte  row
this connection  tablename  row  hconstants default_hbase_client_operation_timeout
public servercallable hconnection connection  byte  tablename  byte  row  int calltimeout
this connection   connection
this tablename   tablename
this row   row
this calltimeout   calltimeout
/**
* connect to the server hosting region with row from tablename.
* @param reload set this to true if connection should re-find the region
* @throws ioexception e
*/
public void connect final boolean reload  throws ioexception
this location   connection getregionlocation tablename  row  reload
this server   connection gethregionconnection location gethostname
location getport
/** @return the server name
* @deprecated just use {@link #tostring()} instead.
*/
public string getservername
if  location    null  return null
return location gethostnameport
/** @return the region name
* @deprecated just use {@link #tostring()} instead.
*/
public byte getregionname
if  location    null  return null
return location getregioninfo   getregionname
/** @return the row
* @deprecated just use {@link #tostring()} instead.
*/
public byte  getrow
return row
public void beforecall
hbaserpc setrpctimeout this calltimeout
this starttime   system currenttimemillis
public void aftercall
hbaserpc resetrpctimeout
this endtime   system currenttimemillis
public void shouldretry throwable throwable  throws ioexception
if  this calltimeout    hconstants default_hbase_client_operation_timeout
if  throwable instanceof sockettimeoutexception
this endtime   this starttime > this calltimeout
throw  sockettimeoutexception   sockettimeoutexception  new sockettimeoutexception
bytes tostring row
bytes tostring tablename
throwable
initcause throwable
else
this calltimeout     int   this endtime   this starttime
/**
* @return {@link hconnection} instance used by this callable.
*/
hconnection getconnection
return this connection
/**
* run this instance with retries, timed waits,
* and refinds of missing regions.
*
* @param <t> the type of the return value
* @return an object of type t
* @throws ioexception if a remote or network exception occurs
* @throws runtimeexception other unspecified error
*/
public t withretries
throws ioexception  runtimeexception
configuration c   getconnection   getconfiguration
final long pause   c getlong hconstants hbase_client_pause
hconstants default_hbase_client_pause
final int numretries   c getint hconstants hbase_client_retries_number
hconstants default_hbase_client_retries_number
list<retriesexhaustedexception throwablewithextracontext> exceptions
new arraylist<retriesexhaustedexception throwablewithextracontext>
for  int tries   0  tries < numretries  tries
try
beforecall
connect tries    0
return call
catch  throwable t
shouldretry t
t   translateexception t
if  t instanceof sockettimeoutexception
t instanceof connectexception
t instanceof retriesexhaustedexception
// if thrown these exceptions, we clear all the cache entries that
// map to that slow/dead server; otherwise, let cache miss and ask
// .meta. again to find the new location
hregionlocation hrl   location
if  hrl    null
getconnection   clearcaches hrl gethostnameport
retriesexhaustedexception throwablewithextracontext qt
new retriesexhaustedexception throwablewithextracontext t
system currenttimemillis    tostring
exceptions add qt
if  tries    numretries   1
throw new retriesexhaustedexception tries  exceptions
finally
aftercall
try
thread sleep connectionutils getpausetime pause  tries
catch  interruptedexception e
thread currentthread   interrupt
throw new ioexception     tries  e
return null
/**
* run this instance against the server once.
* @param <t> the type of the return value
* @return an object of type t
* @throws ioexception if a remote or network exception occurs
* @throws runtimeexception other unspecified error
*/
public t withoutretries
throws ioexception  runtimeexception
try
beforecall
connect false
return call
catch  throwable t
throwable t2   translateexception t
if  t2 instanceof ioexception
throw  ioexception t2
else
throw new runtimeexception t2
finally
aftercall
private static throwable translateexception throwable t  throws ioexception
if  t instanceof undeclaredthrowableexception
t   t getcause
if  t instanceof remoteexception
t     remoteexception t  unwrapremoteexception
if  t instanceof donotretryioexception
throw  donotretryioexception t
return t