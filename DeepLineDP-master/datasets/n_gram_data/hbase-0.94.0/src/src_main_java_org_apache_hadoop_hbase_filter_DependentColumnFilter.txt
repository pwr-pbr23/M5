/**
* copyright 2010 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase filter
import java io datainput
import java io dataoutput
import java io ioexception
import java util hashset
import java util iterator
import java util list
import java util set
import java util arraylist
import org apache hadoop hbase keyvalue
import org apache hadoop hbase util bytes
import com google common base preconditions
/**
* a filter for adding inter-column timestamp matching
* only cells with a correspondingly timestamped entry in
* the target column will be retained
* not compatible with scan.setbatch as operations need
* full rows for correct filtering
*/
public class dependentcolumnfilter extends comparefilter
protected byte columnfamily
protected byte columnqualifier
protected boolean dropdependentcolumn
protected set<long> stampset   new hashset<long>
/**
* should only be used for writable
*/
public dependentcolumnfilter
/**
* build a dependent column filter with value checking
* dependent column varies will be compared using the supplied
* compareop and comparator, for usage of which
* refer to {@link comparefilter}
*
* @param family dependent column family
* @param qualifier dependent column qualifier
* @param dropdependentcolumn whether the column should be discarded after
* @param valuecompareop comparison op
* @param valuecomparator comparator
*/
public dependentcolumnfilter final byte  family  final byte qualifier
final boolean dropdependentcolumn  final compareop valuecompareop
final writablebytearraycomparable valuecomparator
// set up the comparator
super valuecompareop  valuecomparator
this columnfamily   family
this columnqualifier   qualifier
this dropdependentcolumn   dropdependentcolumn
/**
* constructor for dependentcolumn filter.
* keyvalues where a keyvalue from target column
* with the same timestamp do not exist will be dropped.
*
* @param family name of target column family
* @param qualifier name of column qualifier
*/
public dependentcolumnfilter final byte  family  final byte  qualifier
this family  qualifier  false
/**
* constructor for dependentcolumn filter.
* keyvalues where a keyvalue from target column
* with the same timestamp do not exist will be dropped.
*
* @param family name of dependent column family
* @param qualifier name of dependent qualifier
* @param dropdependentcolumn whether the dependent columns keyvalues should be discarded
*/
public dependentcolumnfilter final byte  family  final byte  qualifier
final boolean dropdependentcolumn
this family  qualifier  dropdependentcolumn  compareop no_op  null
/**
* @return the column family
*/
public byte getfamily
return this columnfamily
/**
* @return the column qualifier
*/
public byte getqualifier
return this columnqualifier
/**
* @return true if we should drop the dependent column, false otherwise
*/
public boolean dropdependentcolumn
return this dropdependentcolumn
public boolean getdropdependentcolumn
return this dropdependentcolumn
@override
public boolean filterallremaining
return false
@override
public returncode filterkeyvalue keyvalue v
// check if the column and qualifier match
if   v matchingcolumn this columnfamily  this columnqualifier
// include non-matches for the time being, they'll be discarded afterwards
return returncode include
// if it doesn't pass the op, skip it
if  comparator    null
docompare compareop  comparator  v getbuffer    v getvalueoffset
v getvaluelength
return returncode skip
stampset add v gettimestamp
if dropdependentcolumn
return returncode skip
return returncode include
@override
public void filterrow list<keyvalue> kvs
iterator<keyvalue> it   kvs iterator
keyvalue kv
while it hasnext
kv   it next
if  stampset contains kv gettimestamp
it remove
@override
public boolean hasfilterrow
return true
@override
public boolean filterrow
return false
@override
public boolean filterrowkey byte buffer  int offset  int length
return false
@override
public void reset
stampset clear
public static filter createfilterfromarguments arraylist<byte > filterarguments
preconditions checkargument filterarguments size      2
filterarguments size      3
filterarguments size      5
filterarguments size
if  filterarguments size      2
byte  family   parsefilter removequotesfrombytearray filterarguments get 0
byte  qualifier   parsefilter removequotesfrombytearray filterarguments get 1
return new dependentcolumnfilter family  qualifier
else if  filterarguments size      3
byte  family   parsefilter removequotesfrombytearray filterarguments get 0
byte  qualifier   parsefilter removequotesfrombytearray filterarguments get 1
boolean dropdependentcolumn   parsefilter convertbytearraytoboolean filterarguments get 2
return new dependentcolumnfilter family  qualifier  dropdependentcolumn
else if  filterarguments size      5
byte  family   parsefilter removequotesfrombytearray filterarguments get 0
byte  qualifier   parsefilter removequotesfrombytearray filterarguments get 1
boolean dropdependentcolumn   parsefilter convertbytearraytoboolean filterarguments get 2
compareop compareop   parsefilter createcompareop filterarguments get 3
writablebytearraycomparable comparator   parsefilter createcomparator
parsefilter removequotesfrombytearray filterarguments get 4
return new dependentcolumnfilter family  qualifier  dropdependentcolumn
compareop  comparator
else
throw new illegalargumentexception     filterarguments size
@override
public void readfields datainput in  throws ioexception
super readfields in
this columnfamily   bytes readbytearray in
if this columnfamily length    0
this columnfamily   null
this columnqualifier   bytes readbytearray in
if this columnqualifier length    0
this columnqualifier   null
this dropdependentcolumn   in readboolean
@override
public void write dataoutput out  throws ioexception
super write out
bytes writebytearray out  this columnfamily
bytes writebytearray out  this columnqualifier
out writeboolean this dropdependentcolumn
@override
public string tostring
return string format
this getclass   getsimplename
bytes tostringbinary this columnfamily
bytes tostringbinary this columnqualifier
this dropdependentcolumn
this compareop name
bytes tostringbinary this comparator getvalue