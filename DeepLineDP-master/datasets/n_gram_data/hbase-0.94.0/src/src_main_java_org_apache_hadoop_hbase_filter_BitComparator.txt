/*
* copyright 2010 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase filter
import java io datainput
import java io dataoutput
import java io ioexception
/**
* a bit comparator which performs the specified bitwise operation on each of the bytes
* with the specified byte array. then returns whether the result is non-zero.
*/
public class bitcomparator extends writablebytearraycomparable
/** nullary constructor for writable, do not use */
public bitcomparator
/** bit operators. */
public enum bitwiseop
/** and */
and
/** or */
or
/** xor */
xor
protected bitwiseop bitoperator
/**
* constructor
* @param value value
* @param bitoperator operator to use on the bit comparison
*/
public bitcomparator byte value  bitwiseop bitoperator
super value
this bitoperator   bitoperator
/**
* @return the bitwise operator
*/
public bitwiseop getoperator
return bitoperator
@override
public void readfields datainput in  throws ioexception
super readfields in
bitoperator   bitwiseop valueof in readutf
@override
public void write dataoutput out  throws ioexception
super write out
out writeutf bitoperator name
@override
public int compareto byte value  int offset  int length
if  length    this value length
return 1
int b   0
//iterating backwards is faster because we can quit after one non-zero byte.
for  int i   value length   1  i >  0    b    0  i
switch  bitoperator
case and
b    this value   value    0xff
break
case or
b    this value   value    0xff
break
case xor
b    this value ^ value    0xff
break
return b    0 ? 1   0