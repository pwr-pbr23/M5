/*
* copyright 2009 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase zookeeper
import java io bufferedreader
import java io file
import java io ioexception
import java io inputstreamreader
import java io outputstream
import java io reader
import java net bindexception
import java net inetsocketaddress
import java net socket
import java util arraylist
import java util list
import java util random
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop conf configuration
import org apache hadoop fs fileutil
import org apache hadoop hbase hconstants
import org apache zookeeper server nioservercnxnfactory
import org apache zookeeper server zookeeperserver
import org apache zookeeper server persistence filetxnlog
/**
* todo: most of the code in this class is ripped from zookeeper tests. instead
* of redoing it, we should contribute updates to their code which let us more
* easily access testing helper objects.
*/
public class minizookeepercluster
private static final log log   logfactory getlog minizookeepercluster class
private static final int tick_time   2000
private static final int connection_timeout   30000
private boolean started
/** the default port. if zero, we use a random port. */
private int defaultclientport   0
private int clientport
private list<nioservercnxnfactory> standaloneserverfactorylist
private list<zookeeperserver> zookeeperservers
private list<integer> clientportlist
private int activezkserverindex
private int ticktime   0
private configuration configuration
public minizookeepercluster
this new configuration
public minizookeepercluster configuration configuration
this started   false
this configuration   configuration
activezkserverindex    1
zookeeperservers   new arraylist<zookeeperserver>
clientportlist   new arraylist<integer>
standaloneserverfactorylist   new arraylist<nioservercnxnfactory>
public void setdefaultclientport int clientport
if  clientport <  0
throw new illegalargumentexception
clientport
this defaultclientport   clientport
/**
* selects a zk client port. returns the default port if specified.
* otherwise, returns a random port. the random port is selected from the
* range between 49152 to 65535. these ports cannot be registered with iana
* and are intended for dynamic allocation (see http://bit.ly/dynports).
*/
private int selectclientport
if  defaultclientport > 0
return defaultclientport
return 0xc000   new random   nextint 0x3f00
public void setticktime int ticktime
this ticktime   ticktime
public int getbackupzookeeperservernum
return zookeeperservers size   1
public int getzookeeperservernum
return zookeeperservers size
// / xxx: from o.a.zk.t.clientbase
private static void setuptestenv
// during the tests we run with 100k prealloc in the logs.
// on windows systems prealloc of 64m was seen to take ~15seconds
// resulting in test failure (client timeout on first session).
// set env and directly in order to handle static init/gc issues
system setproperty
filetxnlog setpreallocsize 100
public int startup file basedir  throws ioexception  interruptedexception
return startup basedir 1
/**
* @param basedir
* @param numzookeeperservers
* @return clientport server bound to.
* @throws ioexception
* @throws interruptedexception
*/
public int startup file basedir  int numzookeeperservers  throws ioexception
interruptedexception
if  numzookeeperservers <  0
return  1
setuptestenv
shutdown
int tentativeport   selectclientport
// running all the zk servers
for  int i   0  i < numzookeeperservers  i
file dir   new file basedir    i  getabsolutefile
recreatedir dir
int ticktimetouse
if  this ticktime > 0
ticktimetouse   this ticktime
else
ticktimetouse   tick_time
zookeeperserver server   new zookeeperserver dir  dir  ticktimetouse
nioservercnxnfactory standaloneserverfactory
while  true
try
standaloneserverfactory   new nioservercnxnfactory
standaloneserverfactory configure
new inetsocketaddress tentativeport
configuration getint hconstants zookeeper_max_client_cnxns
1000
catch  bindexception e
log debug
tentativeport
// this port is already in use, try to use another.
tentativeport
continue
break
// start up this zk server
standaloneserverfactory startup server
if   waitforserverup tentativeport  connection_timeout
throw new ioexception
// we have selected this port as a client port.
clientportlist add tentativeport
standaloneserverfactorylist add standaloneserverfactory
zookeeperservers add server
// set the first one to be active zk; others are backups
activezkserverindex   0
started   true
clientport   clientportlist get activezkserverindex
log info
clientport
return clientport
private void recreatedir file dir  throws ioexception
if  dir exists
fileutil fullydelete dir
try
dir mkdirs
catch  securityexception e
throw new ioexception     dir  e
/**
* @throws ioexception
*/
public void shutdown   throws ioexception
if   started
return
// shut down all the zk servers
for  int i   0  i < standaloneserverfactorylist size    i
nioservercnxnfactory standaloneserverfactory
standaloneserverfactorylist get i
int clientport   clientportlist get i
standaloneserverfactory shutdown
if   waitforserverdown clientport  connection_timeout
throw new ioexception
// clear everything
started   false
activezkserverindex   0
standaloneserverfactorylist clear
clientportlist clear
zookeeperservers clear
log info
/**@return clientport return clientport if there is another zk backup can run
*         when killing the current active; return -1, if there is no backups.
* @throws ioexception
* @throws interruptedexception
*/
public int killcurrentactivezookeeperserver   throws ioexception
interruptedexception
if   started    activezkserverindex < 0
return  1
// shutdown the current active one
nioservercnxnfactory standaloneserverfactory
standaloneserverfactorylist get activezkserverindex
int clientport   clientportlist get activezkserverindex
standaloneserverfactory shutdown
if   waitforserverdown clientport  connection_timeout
throw new ioexception
// remove the current active zk server
standaloneserverfactorylist remove activezkserverindex
clientportlist remove activezkserverindex
zookeeperservers remove activezkserverindex
log info
clientport
if  standaloneserverfactorylist size      0
// there is no backup servers;
return  1
clientport   clientportlist get activezkserverindex
log info
clientport
// return the next back zk server's port
return clientport
/**
* kill one back up zk servers
* @throws ioexception
* @throws interruptedexception
*/
public void killonebackupzookeeperserver   throws ioexception
interruptedexception
if   started    activezkserverindex < 0
standaloneserverfactorylist size   <  1
return
int backupzkserverindex   activezkserverindex 1
// shutdown the current active one
nioservercnxnfactory standaloneserverfactory
standaloneserverfactorylist get backupzkserverindex
int clientport   clientportlist get backupzkserverindex
standaloneserverfactory shutdown
if   waitforserverdown clientport  connection_timeout
throw new ioexception
// remove this backup zk server
standaloneserverfactorylist remove backupzkserverindex
clientportlist remove backupzkserverindex
zookeeperservers remove backupzkserverindex
log info
clientport
// xxx: from o.a.zk.t.clientbase
private static boolean waitforserverdown int port  long timeout
long start   system currenttimemillis
while  true
try
socket sock   new socket    port
try
outputstream outstream   sock getoutputstream
outstream write   getbytes
outstream flush
finally
sock close
catch  ioexception e
return true
if  system currenttimemillis   > start   timeout
break
try
thread sleep 250
catch  interruptedexception e
// ignore
return false
// xxx: from o.a.zk.t.clientbase
private static boolean waitforserverup int port  long timeout
long start   system currenttimemillis
while  true
try
socket sock   new socket    port
bufferedreader reader   null
try
outputstream outstream   sock getoutputstream
outstream write   getbytes
outstream flush
reader isr   new inputstreamreader sock getinputstream
reader   new bufferedreader isr
string line   reader readline
if  line    null    line startswith
return true
finally
sock close
if  reader    null
reader close
catch  ioexception e
// ignore as this is expected
log info     port       e
if  system currenttimemillis   > start   timeout
break
try
thread sleep 250
catch  interruptedexception e
// ignore
return false
public int getclientport
return clientport