/*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase security
import java io bufferedinputstream
import java io bufferedoutputstream
import java io datainputstream
import java io dataoutputstream
import java io ioexception
import java io inputstream
import java io outputstream
import javax security auth callback callback
import javax security auth callback callbackhandler
import javax security auth callback namecallback
import javax security auth callback passwordcallback
import javax security auth callback unsupportedcallbackexception
import javax security sasl realmcallback
import javax security sasl realmchoicecallback
import javax security sasl sasl
import javax security sasl saslexception
import javax security sasl saslclient
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop io writableutils
import org apache hadoop ipc remoteexception
import org apache hadoop hbase security hbasesaslrpcserver authmethod
import org apache hadoop hbase security hbasesaslrpcserver saslstatus
import org apache hadoop security saslinputstream
import org apache hadoop security sasloutputstream
import org apache hadoop security token token
import org apache hadoop security token tokenidentifier
/**
* a utility class that encapsulates sasl logic for rpc client.
* copied from <code>org.apache.hadoop.security</code>
*/
public class hbasesaslrpcclient
public static final log log   logfactory getlog hbasesaslrpcclient class
private final saslclient saslclient
/**
* create a hbasesaslrpcclient for an authentication method
*
* @param method
*          the requested authentication method
* @param token
*          token to use if needed by the authentication method
*/
public hbasesaslrpcclient authmethod method
token<? extends tokenidentifier> token  string serverprincipal
throws ioexception
switch  method
case digest
if  log isdebugenabled
log debug     authmethod digest getmechanismname
token getservice
saslclient   sasl createsaslclient new string   authmethod digest
getmechanismname      null  null  hbasesaslrpcserver sasl_default_realm
hbasesaslrpcserver sasl_props  new saslclientcallbackhandler token
break
case kerberos
if  log isdebugenabled
log
debug     authmethod kerberos getmechanismname
serverprincipal
if  serverprincipal    null    serverprincipal length      0
throw new ioexception
string names   hbasesaslrpcserver splitkerberosname serverprincipal
if  names length    3
throw new ioexception
serverprincipal
saslclient   sasl createsaslclient new string   authmethod kerberos
getmechanismname      null  names  names
hbasesaslrpcserver sasl_props  null
break
default
throw new ioexception     method
if  saslclient    null
throw new ioexception
private static void readstatus datainputstream instream  throws ioexception
int id   instream readint       read and discard dummy id
int status   instream readint       read status
if  status    saslstatus success state
throw new remoteexception writableutils readstring instream
writableutils readstring instream
/**
* do client side sasl authentication with server via the given inputstream
* and outputstream
*
* @param ins
*          inputstream to use
* @param outs
*          outputstream to use
* @return true if connection is set up, or false if needs to switch
*             to simple auth.
* @throws ioexception
*/
public boolean saslconnect inputstream ins  outputstream outs
throws ioexception
datainputstream instream   new datainputstream new bufferedinputstream ins
dataoutputstream outstream   new dataoutputstream new bufferedoutputstream
outs
try
byte sasltoken   new byte
if  saslclient hasinitialresponse
sasltoken   saslclient evaluatechallenge sasltoken
if  sasltoken    null
outstream writeint sasltoken length
outstream write sasltoken  0  sasltoken length
outstream flush
if  log isdebugenabled
log debug     sasltoken length
if   saslclient iscomplete
readstatus instream
int len   instream readint
if  len    hbasesaslrpcserver switch_to_simple_auth
if  log isdebugenabled
log debug
saslclient dispose
return false
sasltoken   new byte
if  log isdebugenabled
log debug     sasltoken length
instream readfully sasltoken
while   saslclient iscomplete
sasltoken   saslclient evaluatechallenge sasltoken
if  sasltoken    null
if  log isdebugenabled
log debug     sasltoken length
outstream writeint sasltoken length
outstream write sasltoken  0  sasltoken length
outstream flush
if   saslclient iscomplete
readstatus instream
sasltoken   new byte
if  log isdebugenabled
log debug     sasltoken length
instream readfully sasltoken
if  log isdebugenabled
log debug
saslclient getnegotiatedproperty sasl qop
return true
catch  ioexception e
try
saslclient dispose
catch  saslexception ignored
// ignore further exceptions during cleanup
throw e
/**
* get a sasl wrapped inputstream. can be called only after saslconnect() has
* been called.
*
* @param in
*          the inputstream to wrap
* @return a sasl wrapped inputstream
* @throws ioexception
*/
public inputstream getinputstream inputstream in  throws ioexception
if   saslclient iscomplete
throw new ioexception
return new saslinputstream in  saslclient
/**
* get a sasl wrapped outputstream. can be called only after saslconnect() has
* been called.
*
* @param out
*          the outputstream to wrap
* @return a sasl wrapped outputstream
* @throws ioexception
*/
public outputstream getoutputstream outputstream out  throws ioexception
if   saslclient iscomplete
throw new ioexception
return new sasloutputstream out  saslclient
/** release resources used by wrapped saslclient */
public void dispose   throws saslexception
saslclient dispose
private static class saslclientcallbackhandler implements callbackhandler
private final string username
private final char userpassword
public saslclientcallbackhandler token<? extends tokenidentifier> token
this username   hbasesaslrpcserver encodeidentifier token getidentifier
this userpassword   hbasesaslrpcserver encodepassword token getpassword
public void handle callback callbacks
throws unsupportedcallbackexception
namecallback nc   null
passwordcallback pc   null
realmcallback rc   null
for  callback callback   callbacks
if  callback instanceof realmchoicecallback
continue
else if  callback instanceof namecallback
nc    namecallback  callback
else if  callback instanceof passwordcallback
pc    passwordcallback  callback
else if  callback instanceof realmcallback
rc    realmcallback  callback
else
throw new unsupportedcallbackexception callback
if  nc    null
if  log isdebugenabled
log debug     username
nc setname username
if  pc    null
if  log isdebugenabled
log debug
pc setpassword userpassword
if  rc    null
if  log isdebugenabled
log debug
rc getdefaulttext
rc settext rc getdefaulttext