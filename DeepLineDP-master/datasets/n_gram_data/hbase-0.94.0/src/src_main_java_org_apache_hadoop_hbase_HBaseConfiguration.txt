/**
* copyright 2007 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase
import java util map entry
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop conf configuration
import org apache hadoop hbase util versioninfo
/**
* adds hbase configuration files to a configuration
*/
public class hbaseconfiguration extends configuration
private static final log log   logfactory getlog hbaseconfiguration class
// a constant to convert a fraction to a percentage
private static final int convert_to_percentage   100
/**
* instantinating hbaseconfiguration() is deprecated. please use
* hbaseconfiguration#create() to construct a plain configuration
*/
@deprecated
public hbaseconfiguration
//todo:replace with private constructor, hbaseconfiguration should not extend configuration
super
addhbaseresources this
log warn
/**
* instantiating hbaseconfiguration() is deprecated. please use
* hbaseconfiguration#create(conf) to construct a plain configuration
*/
@deprecated
public hbaseconfiguration final configuration c
//todo:replace with private constructor
this
merge this  c
private static void checkdefaultsversion configuration conf
if  true  return     remove
if  conf getboolean    boolean false   return
string defaultsversion   conf get
string thisversion   versioninfo getversion
if   thisversion equals defaultsversion
throw new runtimeexception
defaultsversion       thisversion
private static void checkforclusterfreememorylimit configuration conf
float globalmemstorelimit   conf getfloat    0 4f
int gml    int  globalmemstorelimit   convert_to_percentage
float blockcacheupperlimit
conf getfloat hconstants hfile_block_cache_size_key
hconstants hfile_block_cache_size_default
int bcul    int  blockcacheupperlimit   convert_to_percentage
if  convert_to_percentage    gml   bcul
<  int  convert_to_percentage
hconstants hbase_cluster_minimum_memory_threshold
throw new runtimeexception
globalmemstorelimit
blockcacheupperlimit
public static configuration addhbaseresources configuration conf
conf addresource
conf addresource
checkdefaultsversion conf
checkforclusterfreememorylimit conf
return conf
/**
* creates a configuration with hbase resources
* @return a configuration with hbase resources
*/
public static configuration create
configuration conf   new configuration
return addhbaseresources conf
/**
* creates a clone of passed configuration.
* @param that configuration to clone.
* @return a clone of passed configuration.
*/
public static configuration create final configuration that
return new configuration that
/**
* merge two configurations.
* @param destconf the configuration that will be overwritten with items
*                 from the srcconf
* @param srcconf the source configuration
**/
public static void merge configuration destconf  configuration srcconf
for  entry<string  string> e   srcconf
destconf set e getkey    e getvalue
/**
*
* @return whether to show hbase configuration in servlet
*/
public static boolean isshowconfinservlet
boolean isshowconf   false
try
if  class forname       null
isshowconf   true
catch  exception e
return isshowconf