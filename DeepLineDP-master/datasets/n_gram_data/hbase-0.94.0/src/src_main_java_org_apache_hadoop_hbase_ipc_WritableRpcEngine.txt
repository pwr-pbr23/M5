/*
* copyright 2010 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase ipc
import java lang reflect proxy
import java lang reflect method
import java lang reflect array
import java lang reflect invocationhandler
import java lang reflect invocationtargetexception
import java net inetsocketaddress
import java io
import java util map
import java util hashmap
import javax net socketfactory
import org apache commons logging
import org apache hadoop hbase hregioninfo
import org apache hadoop hbase client operation
import org apache hadoop hbase io hbaseobjectwritable
import org apache hadoop hbase monitoring monitoredrpchandler
import org apache hadoop hbase regionserver hregionserver
import org apache hadoop hbase util bytes
import org apache hadoop hbase util objects
import org apache hadoop io
import org apache hadoop ipc rpc
import org apache hadoop hbase ipc versionedprotocol
import org apache hadoop hbase security user
import org apache hadoop security authorize serviceauthorizationmanager
import org apache hadoop conf
import org codehaus jackson map objectmapper
/** an rpcengine implementation for writable data. */
class writablerpcengine implements rpcengine
// log is not in hbase subpackage intentionally so that the default hbase
// debug log level does not emit rpc-level logging.
private static final log log   logfactory getlog
/* cache a client using its socket factory as the hash key */
static private class clientcache
private map<socketfactory  hbaseclient> clients
new hashmap<socketfactory  hbaseclient>
protected clientcache
/**
* construct & cache an ipc client with the user-provided socketfactory
* if no cached client exists.
*
* @param conf configuration
* @param factory socket factory
* @return an ipc client
*/
protected synchronized hbaseclient getclient configuration conf
socketfactory factory
// construct & cache client.  the configuration is only used for timeout,
// and clients have connection pools.  so we can either (a) lose some
// connection pooling and leak sockets, or (b) use the same timeout for
// all configurations.  since the ipc is usually intended globally, not
// per-job, we choose (a).
hbaseclient client   clients get factory
if  client    null
// make an hbase client instead of hadoop client.
client   new hbaseclient hbaseobjectwritable class  conf  factory
clients put factory  client
else
client inccount
return client
/**
* construct & cache an ipc client with the default socketfactory
* if no cached client exists.
*
* @param conf configuration
* @return an ipc client
*/
protected synchronized hbaseclient getclient configuration conf
return getclient conf  socketfactory getdefault
/**
* stop a rpc client connection
* a rpc client is closed only when its reference count becomes zero.
* @param client client to stop
*/
protected void stopclient hbaseclient client
synchronized  this
client deccount
if  client iszeroreference
clients remove client getsocketfactory
if  client iszeroreference
client stop
protected final static clientcache clients   new clientcache
private static class invoker implements invocationhandler
private class<? extends versionedprotocol> protocol
private inetsocketaddress address
private user ticket
private hbaseclient client
private boolean isclosed   false
final private int rpctimeout
public invoker class<? extends versionedprotocol> protocol
inetsocketaddress address  user ticket
configuration conf  socketfactory factory  int rpctimeout
this protocol   protocol
this address   address
this ticket   ticket
this client   clients getclient conf  factory
this rpctimeout   rpctimeout
public object invoke object proxy  method method  object args
throws throwable
final boolean logdebug   log isdebugenabled
long starttime   0
if  logdebug
starttime   system currenttimemillis
hbaseobjectwritable value    hbaseobjectwritable
client call new invocation method  args   address
protocol  ticket  rpctimeout
if  logdebug
// figure how to turn this off!
long calltime   system currenttimemillis     starttime
log debug     method getname         calltime
return value get
/* close the ipc client that's responsible for this invoker's rpcs */
synchronized protected void close
if   isclosed
isclosed   true
clients stopclient client
/** construct a client-side proxy object that implements the named protocol,
* talking to a server at the named address. */
public versionedprotocol getproxy
class<? extends versionedprotocol> protocol  long clientversion
inetsocketaddress addr  user ticket
configuration conf  socketfactory factory  int rpctimeout
throws ioexception
versionedprotocol proxy
versionedprotocol  proxy newproxyinstance
protocol getclassloader    new class   protocol
new invoker protocol  addr  ticket  conf  factory  rpctimeout
if  proxy instanceof versionedprotocol
long serverversion     versionedprotocol proxy
getprotocolversion protocol getname    clientversion
if  serverversion    clientversion
throw new hbaserpc versionmismatch protocol getname    clientversion
serverversion
return proxy
/**
* stop this proxy and release its invoker's resource
* @param proxy the proxy to be stopped
*/
public void stopproxy versionedprotocol proxy
if  proxy  null
invoker proxy getinvocationhandler proxy   close
/** expert: make multiple, parallel calls to a set of servers. */
public object call method method  object params
inetsocketaddress addrs
class<? extends versionedprotocol> protocol
user ticket  configuration conf
throws ioexception  interruptedexception
invocation invocations   new invocation
for  int i   0  i < params length  i
invocations   new invocation method  params
hbaseclient client   clients getclient conf
try
writable wrappedvalues
client call invocations  addrs  protocol  ticket
if  method getreturntype      void type
return null
object values
object array newinstance method getreturntype    wrappedvalues length
for  int i   0  i < values length  i
if  wrappedvalues    null
values     hbaseobjectwritable wrappedvalues  get
return values
finally
clients stopclient client
/** construct a server for a protocol implementation instance listening on a
* port and address. */
public server getserver class<? extends versionedprotocol> protocol
object instance
class<?> ifaces
string bindaddress  int port
int numhandlers
int metahandlercount  boolean verbose
configuration conf  int highprioritylevel
throws ioexception
return new server instance  ifaces  conf  bindaddress  port  numhandlers
metahandlercount  verbose  highprioritylevel
/** an rpc server. */
public static class server extends hbaseserver
private object instance
private class<?> implementation
private class<?> ifaces
private boolean verbose
private boolean authorize   false
// for json encoding
private static objectmapper mapper   new objectmapper
private static final string warn_response_time
private static final string warn_response_size
/** default value for above params */
private static final int default_warn_response_time   10000     milliseconds
private static final int default_warn_response_size   100   1024   1024
/** names for suffixed metrics */
private static final string above_one_sec_metric
private final int warnresponsetime
private final int warnresponsesize
private static string classnamebase string classname
string names   classname split     1
if  names    null    names length    0
return classname
return names
/** construct an rpc server.
* @param instance the instance whose methods will be called
* @param conf the configuration to use
* @param bindaddress the address to bind on to listen for connection
* @param port the port to listen for connections on
* @param numhandlers the number of method handler threads to run
* @param verbose whether each call should be logged
* @throws ioexception e
*/
public server object instance  final class<?> ifaces
configuration conf  string bindaddress   int port
int numhandlers  int metahandlercount  boolean verbose
int highprioritylevel  throws ioexception
super bindaddress  port  invocation class  numhandlers  metahandlercount
conf  classnamebase instance getclass   getname
highprioritylevel
this instance   instance
this implementation   instance getclass
this verbose   verbose
this ifaces   ifaces
// create metrics for the advertised interfaces this server implements.
string  metricsuffixes   new string   above_one_sec_metric
this rpcmetrics createmetrics this ifaces  false  metricsuffixes
this authorize
conf getboolean
serviceauthorizationmanager service_authorization_config  false
this warnresponsetime   conf getint warn_response_time
default_warn_response_time
this warnresponsesize   conf getint warn_response_size
default_warn_response_size
@override
public writable call class<? extends versionedprotocol> protocol
writable param  long receivedtime  monitoredrpchandler status
throws ioexception
try
invocation call    invocation param
if call getmethodname      null
throw new ioexception
if  verbose  log     call
status setrpc call getmethodname    call getparameters    receivedtime
status setrpcpacket param
status resume
method method
protocol getmethod call getmethodname
call getparameterclasses
method setaccessible true
//verify protocol version.
//bypass the version check for versionedprotocol
if   method getdeclaringclass   equals versionedprotocol class
long clientversion   call getprotocolversion
protocolsignature serverinfo     versionedprotocol  instance
getprotocolsignature protocol getcanonicalname    call
getprotocolversion    call getclientmethodshash
long serverversion   serverinfo getversion
if  serverversion    clientversion
log warn     clientversion
serverversion
throw new rpc versionmismatch protocol getname    clientversion
serverversion
object impl   null
if  protocol isassignablefrom this implementation
impl   this instance
else
throw new hbaserpc unknownprotocolexception protocol
long starttime   system currenttimemillis
object params   call getparameters
object value   method invoke impl  params
int processingtime    int   system currenttimemillis     starttime
int qtime    int   starttime receivedtime
if  tracelog isdebugenabled
tracelog debug     curcall get   id
protocol getsimplename     call getmethodname
qtime
processingtime
objects describequantity params
rpcmetrics rpcqueuetime inc qtime
rpcmetrics rpcprocessingtime inc processingtime
rpcmetrics inc call getmethodname    processingtime
if  verbose  log   value
hbaseobjectwritable retval
new hbaseobjectwritable method getreturntype    value
long responsesize   retval getwritablesize
// log any rpc responses that are slower than the configured warn
// response time or larger than configured warning size
boolean tooslow    processingtime > warnresponsetime
warnresponsetime >  1
boolean toolarge    responsesize > warnresponsesize
warnresponsesize >  1
if  tooslow    toolarge
// when tagging, we let toolarge trump toosmall to keep output simple
// note that large responses will often also be slow.
logresponse call   toolarge ?
status getclient    starttime  processingtime  qtime
responsesize
// provides a count of log-reported slow responses
if  tooslow
rpcmetrics rpcslowresponsetime inc processingtime
if  processingtime > 1000
// we use a hard-coded one second period so that we can clearly
// indicate the time period we're warning about in the name of the
// metric itself
rpcmetrics inc call getmethodname     above_one_sec_metric
processingtime
return retval
catch  invocationtargetexception e
throwable target   e gettargetexception
if  target instanceof ioexception
throw  ioexception target
ioexception ioe   new ioexception target tostring
ioe setstacktrace target getstacktrace
throw ioe
catch  throwable e
if    e instanceof ioexception
log error    e
ioexception ioe   new ioexception e tostring
ioe setstacktrace e getstacktrace
throw ioe
/**
* logs an rpc response to the log file, producing valid json objects for
* client operations.
* @param call the call to log.
* @param tag  the tag that will be used to indicate this event in the log.
* @param client          the address of the client who made this call.
* @param starttime       the time that the call was initiated, in ms.
* @param processingtime  the duration that the call took to run, in ms.
* @param qtime           the duration that the call spent on the queue
*                        prior to being initiated, in ms.
* @param responsesize    the size in bytes of the response buffer.
*/
private void logresponse invocation call  string tag  string clientaddress
long starttime  int processingtime  int qtime  long responsesize
throws ioexception
object params   call getparameters
// for json encoding
objectmapper mapper   new objectmapper
// base information that is reported regardless of type of call
map<string  object> responseinfo   new hashmap<string  object>
responseinfo put    starttime
responseinfo put    processingtime
responseinfo put    qtime
responseinfo put    responsesize
responseinfo put    clientaddress
responseinfo put    instance getclass   getsimplename
responseinfo put    call getmethodname
if  params length    2    instance instanceof hregionserver
params instanceof byte
params instanceof operation
// if the slow process is a query, we want to log its table as well
// as its own fingerprint
byte  tablename
hregioninfo parseregionname  byte  params
responseinfo put    bytes tostringbinary tablename
// annotate the response map with operation details
responseinfo putall   operation  params  tomap
// report to the log file
log warn     tag
mapper writevalueasstring responseinfo
else if  params length    1    instance instanceof hregionserver
params instanceof operation
// annotate the response map with operation details
responseinfo putall   operation  params  tomap
// report to the log file
log warn     tag
mapper writevalueasstring responseinfo
else
// can't get json details, so just report call.tostring() along with
// a more generic tag.
responseinfo put    call tostring
log warn     tag
mapper writevalueasstring responseinfo
protected static void log string value
string v   value
if  v    null    v length   > 55
v   v substring 0  55
log info v