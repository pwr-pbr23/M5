/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase metrics histogram
import java util arraylist
import java util list
import java util random
import java util concurrent atomic atomiclong
import java util concurrent atomic atomiclongarray
/**
* a random sample of a stream of longs. uses vitter's algorithm r to produce a
* statistically representative sample.
*
* see: http://www.cs.umd.edu/~samir/498/vitter.pdf
*/
public class uniformsample implements sample
private static final random random   new random
private static final int bits_per_long   63
private final atomiclong count   new atomiclong
private final atomiclongarray values
/**
* creates a new uniformsample
*
* @param reservoirsize the number of samples to keep
*/
public uniformsample int reservoirsize
this values   new atomiclongarray reservoirsize
clear
@override
public void clear
for  int i   0  i < values length    i
values set i  0
count set 0
@override
public int size
final long c   count get
if  c > values length
return values length
return  int  c
@override
public void update long value
final long c   count incrementandget
if  c <  values length
values set  int  c   1  value
else
final long r   nextlong c
if  r < values length
values set  int  r  value
/**
* get a pseudo-random long uniformly between 0 and n-1. stolen from
* {@link java.util.random#nextint()}.
*
* @param n the bound
* @return a value select randomly from the range {@code [0..n)}.
*/
private static long nextlong long n
long bits  val
do
bits   random nextlong      ~ 1l << bits_per_long
val   bits % n
while  bits   val    n   1  < 0l
return val
@override
public snapshot getsnapshot
final int s   size
final list<long> copy   new arraylist<long> s
for  int i   0  i < s  i
copy add values get i
return new snapshot copy