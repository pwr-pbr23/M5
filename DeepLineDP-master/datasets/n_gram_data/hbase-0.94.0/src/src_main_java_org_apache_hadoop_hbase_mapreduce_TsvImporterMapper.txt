/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase mapreduce
import org apache hadoop io longwritable
import org apache hadoop io text
import org apache hadoop hbase io immutablebyteswritable
import org apache hadoop hbase client put
import org apache hadoop hbase util base64
import org apache hadoop hbase keyvalue
import org apache hadoop mapreduce mapper
import org apache hadoop mapreduce counter
import org apache hadoop conf configuration
import java io ioexception
/**
* write table content out to files in hdfs.
*/
public class tsvimportermapper
extends mapper<longwritable  text  immutablebyteswritable  put>
/** timestamp for all inserted rows */
private long ts
/** column seperator */
private string separator
/** should skip bad lines */
private boolean skipbadlines
private counter badlinecount
private importtsv tsvparser parser
public long getts
return ts
public boolean getskipbadlines
return skipbadlines
public counter getbadlinecount
return badlinecount
public void incrementbadlinecount int count
this badlinecount increment count
/**
* handles initializing this class with objects specific to it (i.e., the parser).
* common initialization that might be leveraged by a subsclass is done in
* <code>dosetup</code>. hence a subclass may choose to override this method
* and call <code>dosetup</code> as well before handling it's own custom params.
*
* @param context
*/
@override
protected void setup context context
dosetup context
configuration conf   context getconfiguration
parser   new importtsv tsvparser conf get importtsv columns_conf_key
separator
if  parser getrowkeycolumnindex       1
throw new runtimeexception
/**
* handles common parameter initialization that a subclass might want to leverage.
* @param context
*/
protected void dosetup context context
configuration conf   context getconfiguration
// if a custom separator has been used,
// decode it back from base64 encoding.
separator   conf get importtsv separator_conf_key
if  separator    null
separator   importtsv default_separator
else
separator   new string base64 decode separator
ts   conf getlong importtsv timestamp_conf_key  system currenttimemillis
skipbadlines   context getconfiguration   getboolean
importtsv skip_lines_conf_key  true
badlinecount   context getcounter
/**
* convert a line of tsv text into an hbase table row.
*/
@override
public void map longwritable offset  text value
context context
throws ioexception
byte linebytes   value getbytes
try
importtsv tsvparser parsedline parsed   parser parse
linebytes  value getlength
immutablebyteswritable rowkey
new immutablebyteswritable linebytes
parsed getrowkeyoffset
parsed getrowkeylength
put put   new put rowkey copybytes
for  int i   0  i < parsed getcolumncount    i
if  i    parser getrowkeycolumnindex    continue
keyvalue kv   new keyvalue
linebytes  parsed getrowkeyoffset    parsed getrowkeylength
parser getfamily i   0  parser getfamily i  length
parser getqualifier i   0  parser getqualifier i  length
ts
keyvalue type put
linebytes  parsed getcolumnoffset i   parsed getcolumnlength i
put add kv
context write rowkey  put
catch  importtsv tsvparser badtsvlineexception badline
if  skipbadlines
system err println
offset get
badline getmessage
incrementbadlinecount 1
return
else
throw new ioexception badline
catch  illegalargumentexception e
if  skipbadlines
system err println
offset get
e getmessage
incrementbadlinecount 1
return
else
throw new ioexception e
catch  interruptedexception e
e printstacktrace