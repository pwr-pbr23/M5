/**
* copyright 2011 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase thrift2
import org apache hadoop hbase hconstants
import org apache hadoop hbase keyvalue
import org apache hadoop hbase client
import org apache hadoop hbase thrift2 generated
import java io ioexception
import java nio bytebuffer
import java util
public class thriftutilities
private thriftutilities
throw new unsupportedoperationexception
/**
* creates a {@link get} (hbase) from a {@link tget} (thrift).
*
* this ignores any timestamps set on {@link tcolumn} objects.
*
* @param in the <code>tget</code> to convert
*
* @return <code>get</code> object
*
* @throws ioexception if an invalid time range or max version parameter is given
*/
public static get getfromthrift tget in  throws ioexception
get out   new get in getrow
// timestamp overwrites time range if both are set
if  in issettimestamp
out settimestamp in gettimestamp
else if  in issettimerange
out settimerange in gettimerange   getminstamp    in gettimerange   getmaxstamp
if  in issetmaxversions
out setmaxversions in getmaxversions
if   in issetcolumns
return out
for  tcolumn column   in getcolumns
if  column issetqualifier
out addcolumn column getfamily    column getqualifier
else
out addfamily column getfamily
return out
/**
* converts multiple {@link tget}s (thrift) into a list of {@link get}s (hbase).
*
* @param in list of <code>tget</code>s to convert
*
* @return list of <code>get</code> objects
*
* @throws ioexception if an invalid time range or max version parameter is given
* @see #getfromthrift(tget)
*/
public static list<get> getsfromthrift list<tget> in  throws ioexception
list<get> out   new arraylist<get> in size
for  tget get   in
out add getfromthrift get
return out
/**
* creates a {@link tresult} (thrift) from a {@link result} (hbase).
*
* @param in the <code>result</code> to convert
*
* @return converted result, returns an empty result if the input is <code>null</code>
*/
public static tresult resultfromhbase result in
keyvalue raw   in raw
tresult out   new tresult
byte row   in getrow
if  row    null
out setrow in getrow
list<tcolumnvalue> columnvalues   new arraylist<tcolumnvalue>
for  keyvalue kv   raw
tcolumnvalue col   new tcolumnvalue
col setfamily kv getfamily
col setqualifier kv getqualifier
col settimestamp kv gettimestamp
col setvalue kv getvalue
columnvalues add col
out setcolumnvalues columnvalues
return out
/**
* converts multiple {@link result}s (hbase) into a list of {@link tresult}s (thrift).
*
* @param in array of <code>result</code>s to convert
*
* @return list of converted <code>tresult</code>s
*
* @see #resultfromhbase(result)
*/
public static list<tresult> resultsfromhbase result in
list<tresult> out   new arraylist<tresult> in length
for  result result   in
out add resultfromhbase result
return out
/**
* creates a {@link put} (hbase) from a {@link tput} (thrift)
*
* @param in the <code>tput</code> to convert
*
* @return converted <code>put</code>
*/
public static put putfromthrift tput in
put out
if  in issettimestamp
out   new put in getrow    in gettimestamp    null
else
out   new put in getrow
out setwritetowal in iswritetowal
for  tcolumnvalue columnvalue   in getcolumnvalues
if  columnvalue issettimestamp
out add columnvalue getfamily    columnvalue getqualifier    columnvalue gettimestamp
columnvalue getvalue
else
out add columnvalue getfamily    columnvalue getqualifier    columnvalue getvalue
return out
/**
* converts multiple {@link tput}s (thrift) into a list of {@link put}s (hbase).
*
* @param in list of <code>tput</code>s to convert
*
* @return list of converted <code>put</code>s
*
* @see #putfromthrift(tput)
*/
public static list<put> putsfromthrift list<tput> in
list<put> out   new arraylist<put> in size
for  tput put   in
out add putfromthrift put
return out
/**
* creates a {@link delete} (hbase) from a {@link tdelete} (thrift).
*
* @param in the <code>tdelete</code> to convert
*
* @return converted <code>delete</code>
*/
public static delete deletefromthrift tdelete in
delete out
if  in issetcolumns
out   new delete in getrow
for  tcolumn column   in getcolumns
if  column issetqualifier
if  column issettimestamp
if  in issetdeletetype
in getdeletetype   equals tdeletetype delete_columns
out deletecolumns column getfamily    column getqualifier    column gettimestamp
else
out deletecolumn column getfamily    column getqualifier    column gettimestamp
else
if  in issetdeletetype
in getdeletetype   equals tdeletetype delete_columns
out deletecolumns column getfamily    column getqualifier
else
out deletecolumn column getfamily    column getqualifier
else
if  column issettimestamp
out deletefamily column getfamily    column gettimestamp
else
out deletefamily column getfamily
else
if  in issettimestamp
out   new delete in getrow    in gettimestamp    null
else
out   new delete in getrow
out setwritetowal in iswritetowal
return out
/**
* converts multiple {@link tdelete}s (thrift) into a list of {@link delete}s (hbase).
*
* @param in list of <code>tdelete</code>s to convert
*
* @return list of converted <code>delete</code>s
*
* @see #deletefromthrift(tdelete)
*/
public static list<delete> deletesfromthrift list<tdelete> in
list<delete> out   new arraylist<delete> in size
for  tdelete delete   in
out add deletefromthrift delete
return out
public static tdelete deletefromhbase delete in
tdelete out   new tdelete bytebuffer wrap in getrow
list<tcolumn> columns   new arraylist<tcolumn>
long rowtimestamp   in gettimestamp
if  rowtimestamp    hconstants latest_timestamp
out settimestamp rowtimestamp
// map<family, list<keyvalue>>
for  map entry<byte  list<keyvalue>> familyentry   in getfamilymap   entryset
tcolumn column   new tcolumn bytebuffer wrap familyentry getkey
for  keyvalue keyvalue   familyentry getvalue
byte family   keyvalue getfamily
byte qualifier   keyvalue getqualifier
long timestamp   keyvalue gettimestamp
if  family    null
column setfamily family
if  qualifier    null
column setqualifier qualifier
if  timestamp    hconstants latest_timestamp
column settimestamp keyvalue gettimestamp
columns add column
out setcolumns columns
return out
public static list<tdelete> deletesfromhbase list<delete> in
list<tdelete> out   new arraylist<tdelete> in size
for  delete delete   in
if  delete    null
out add null
else
out add deletefromhbase delete
return out
public static scan scanfromthrift tscan in  throws ioexception
scan out   new scan
if  in issetstartrow
out setstartrow in getstartrow
if  in issetstoprow
out setstoprow in getstoprow
if  in issetcaching
out setcaching in getcaching
if  in issetmaxversions
out setmaxversions in getmaxversions
if  in issetcolumns
for  tcolumn column   in getcolumns
if  column issetqualifier
out addcolumn column getfamily    column getqualifier
else
out addfamily column getfamily
ttimerange timerange   in gettimerange
if  timerange    null
timerange issetminstamp      timerange issetmaxstamp
out settimerange timerange getminstamp    timerange getmaxstamp
return out
public static increment incrementfromthrift tincrement in  throws ioexception
increment out   new increment in getrow
for  tcolumnincrement column   in getcolumns
out addcolumn column getfamily    column getqualifier    column getamount
out setwritetowal in iswritetowal
return out