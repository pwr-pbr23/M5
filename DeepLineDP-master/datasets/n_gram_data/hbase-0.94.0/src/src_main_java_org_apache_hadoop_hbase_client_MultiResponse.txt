/*
* copyright 2009 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase client
import org apache hadoop io writable
import org apache hadoop hbase io hbaseobjectwritable
import org apache hadoop hbase util bytes
import org apache hadoop hbase util pair
import org apache hadoop hbase hserveraddress
import org apache hadoop io writableutils
import org apache hadoop util stringutils
import java io dataoutput
import java io ioexception
import java io datainput
import java lang reflect constructor
import java lang reflect invocationtargetexception
import java util collection
import java util list
import java util map
import java util arraylist
import java util treemap
/**
* a container for result objects, grouped by regionname.
*/
public class multiresponse implements writable
// map of regionname to list of (results paired to the original index for that
// result)
private map<byte  list<pair<integer  object>>> results
new treemap<byte  list<pair<integer  object>>> bytes bytes_comparator
public multiresponse
/**
* @return number of pairs in this container
*/
public int size
int size   0
for  collection<?> c   results values
size    c size
return size
/**
* add the pair to the container, grouped by the regionname
*
* @param regionname
* @param r
*          first item in the pair is the original index of the action
*          (request). second item is the result. result will be empty for
*          successful put and delete actions.
*/
public void add byte regionname  pair<integer  object> r
list<pair<integer  object>> rs   results get regionname
if  rs    null
rs   new arraylist<pair<integer  object>>
results put regionname  rs
rs add r
public void add byte regionname  int originalindex  object resorex
add regionname  new pair<integer object> originalindex  resorex
public map<byte  list<pair<integer  object>>> getresults
return results
@override
public void write dataoutput out  throws ioexception
out writeint results size
for  map entry<byte  list<pair<integer  object>>> e   results entryset
bytes writebytearray out  e getkey
list<pair<integer  object>> lst   e getvalue
out writeint lst size
for  pair<integer  object> r   lst
if  r    null
out writeint  1      cant have index  1  on other side we recognize  1 as
else
out writeint r getfirst        can this can npe ?
object obj   r getsecond
if  obj instanceof throwable
out writeboolean true      true  throwable exception
throwable t    throwable  obj
// serialize exception
writableutils writestring out  t getclass   getname
writableutils writestring out
stringutils stringifyexception t
else
out writeboolean false      no exception
if     obj instanceof writable
obj   null     squash all non writables to null
hbaseobjectwritable writeobject out  r getsecond
obj    null ? obj getclass     writable class  null
@override
public void readfields datainput in  throws ioexception
results clear
int mapsize   in readint
for  int i   0  i < mapsize  i
byte key   bytes readbytearray in
int listsize   in readint
list<pair<integer  object>> lst   new arraylist<pair<integer  object>>
listsize
for  int j   0  j < listsize  j
integer idx   in readint
if  idx     1
lst add null
else
boolean isexception   in readboolean
object o   null
if  isexception
string klass   writableutils readstring in
string desc   writableutils readstring in
try
// the type-unsafe insertion, but since we control what klass is..
class<? extends throwable> c    class<? extends throwable>  class forname klass
constructor<? extends throwable> cn   c getdeclaredconstructor string class
o   cn newinstance desc
catch  classnotfoundexception ignored
catch  nosuchmethodexception ignored
catch  invocationtargetexception ignored
catch  instantiationexception ignored
catch  illegalaccessexception ignored
else
o   hbaseobjectwritable readobject in  null
lst add new pair<integer  object> idx  o
results put key  lst