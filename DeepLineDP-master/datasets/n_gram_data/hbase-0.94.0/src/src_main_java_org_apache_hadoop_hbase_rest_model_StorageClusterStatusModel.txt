/*
* copyright 2010 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase rest model
import java io ioexception
import java io serializable
import java util arraylist
import java util list
import javax xml bind annotation xmlattribute
import javax xml bind annotation xmlelement
import javax xml bind annotation xmlelementwrapper
import javax xml bind annotation xmlrootelement
import org apache hadoop hbase rest protobufmessagehandler
import org apache hadoop hbase rest protobuf generated storageclusterstatusmessage storageclusterstatus
import org apache hadoop hbase util bytes
import com google protobuf bytestring
/**
* representation of the status of a storage cluster:
* <p>
* <ul>
* <li>regions: the total number of regions served by the cluster</li>
* <li>requests: the total number of requests per second handled by the
* cluster in the last reporting interval</li>
* <li>averageload: the average load of the region servers in the cluster</li>
* <li>livenodes: detailed status of the live region servers</li>
* <li>deadnodes: the names of region servers declared dead</li>
* </ul>
*
* <pre>
* &lt;complextype name="storageclusterstatus"&gt;
*   &lt;sequence&gt;
*     &lt;element name="livenode" type="tns:node"
*       maxoccurs="unbounded" minoccurs="0"&gt;
*     &lt;/element&gt;
*     &lt;element name="deadnode" type="string" maxoccurs="unbounded"
*       minoccurs="0"&gt;
*     &lt;/element&gt;
*   &lt;/sequence&gt;
*   &lt;attribute name="regions" type="int"&gt;&lt;/attribute&gt;
*   &lt;attribute name="requests" type="int"&gt;&lt;/attribute&gt;
*   &lt;attribute name="averageload" type="float"&gt;&lt;/attribute&gt;
* &lt;/complextype&gt;
*
* &lt;complextype name="node"&gt;
*   &lt;sequence&gt;
*     &lt;element name="region" type="tns:region"
*       maxoccurs="unbounded" minoccurs="0"&gt;&lt;/element&gt;
*   &lt;/sequence&gt;
*   &lt;attribute name="name" type="string"&gt;&lt;/attribute&gt;
*   &lt;attribute name="startcode" type="int"&gt;&lt;/attribute&gt;
*   &lt;attribute name="requests" type="int"&gt;&lt;/attribute&gt;
*   &lt;attribute name="heapsizemb" type="int"&gt;&lt;/attribute&gt;
*   &lt;attribute name="maxheapsizemb" type="int"&gt;&lt;/attribute&gt;
* &lt;/complextype&gt;
*
* &lt;complextype name="region"&gt;
*   &lt;attribute name="name" type="base64binary"&gt;&lt;/attribute&gt;
*   &lt;attribute name="stores" type="int"&gt;&lt;/attribute&gt;
*   &lt;attribute name="storefiles" type="int"&gt;&lt;/attribute&gt;
*   &lt;attribute name="storefilesizemb" type="int"&gt;&lt;/attribute&gt;
*   &lt;attribute name="memstoresizemb" type="int"&gt;&lt;/attribute&gt;
*   &lt;attribute name="storefileindexsizemb" type="int"&gt;&lt;/attribute&gt;
*   &lt;attribute name="readrequestscount" type="int"&gt;&lt;/attribute&gt;
*   &lt;attribute name="writerequestscount" type="int"&gt;&lt;/attribute&gt;
*   &lt;attribute name="rootindexsizekb" type="int"&gt;&lt;/attribute&gt;
*   &lt;attribute name="totalstaticindexsizekb" type="int"&gt;&lt;/attribute&gt;
*   &lt;attribute name="totalstaticbloomsizekb" type="int"&gt;&lt;/attribute&gt;
*   &lt;attribute name="totalcompactingkvs" type="int"&gt;&lt;/attribute&gt;
*   &lt;attribute name="currentcompactedkvs" type="int"&gt;&lt;/attribute&gt;
* &lt;/complextype&gt;
* </pre>
*/
@xmlrootelement name
public class storageclusterstatusmodel
implements serializable  protobufmessagehandler
private static final long serialversionuid   1l
/**
* represents a region server.
*/
public static class node
/**
* represents a region hosted on a region server.
*/
public static class region
private byte name
private int stores
private int storefiles
private int storefilesizemb
private int memstoresizemb
private int storefileindexsizemb
private long readrequestscount
private long writerequestscount
private int rootindexsizekb
private int totalstaticindexsizekb
private int totalstaticbloomsizekb
private long totalcompactingkvs
private long currentcompactedkvs
/**
* default constructor
*/
public region
/**
* constructor
* @param name the region name
*/
public region byte name
this name   name
/**
* constructor
* @param name the region name
* @param stores the number of stores
* @param storefiles the number of store files
* @param storefilesizemb total size of store files, in mb
* @param memstoresizemb total size of memstore, in mb
* @param storefileindexsizemb total size of store file indexes, in mb
*/
public region byte name  int stores  int storefiles
int storefilesizemb  int memstoresizemb  int storefileindexsizemb
long readrequestscount  long writerequestscount  int rootindexsizekb
int totalstaticindexsizekb  int totalstaticbloomsizekb
long totalcompactingkvs  long currentcompactedkvs
this name   name
this stores   stores
this storefiles   storefiles
this storefilesizemb   storefilesizemb
this memstoresizemb   memstoresizemb
this storefileindexsizemb   storefileindexsizemb
this readrequestscount   readrequestscount
this writerequestscount   writerequestscount
this rootindexsizekb   rootindexsizekb
this totalstaticindexsizekb   totalstaticindexsizekb
this totalstaticbloomsizekb   totalstaticbloomsizekb
this totalcompactingkvs   totalcompactingkvs
this currentcompactedkvs   currentcompactedkvs
/**
* @return the region name
*/
@xmlattribute
public byte getname
return name
/**
* @return the number of stores
*/
@xmlattribute
public int getstores
return stores
/**
* @return the number of store files
*/
@xmlattribute
public int getstorefiles
return storefiles
/**
* @return the total size of store files, in mb
*/
@xmlattribute
public int getstorefilesizemb
return storefilesizemb
/**
* @return memstore size, in mb
*/
@xmlattribute
public int getmemstoresizemb
return memstoresizemb
/**
* @return the total size of store file indexes, in mb
*/
@xmlattribute
public int getstorefileindexsizemb
return storefileindexsizemb
/**
* @return the current total read requests made to region
*/
@xmlattribute
public long getreadrequestscount
return readrequestscount
/**
* @return the current total write requests made to region
*/
@xmlattribute
public long getwriterequestscount
return writerequestscount
/**
* @return the current total size of root-level indexes for the region, in kb.
*/
@xmlattribute
public int getrootindexsizekb
return rootindexsizekb
/**
* @return the total size of static index, in kb
*/
@xmlattribute
public int gettotalstaticindexsizekb
return totalstaticindexsizekb
/**
* @return the total size of static bloom, in kb
*/
@xmlattribute
public int gettotalstaticbloomsizekb
return totalstaticbloomsizekb
/**
* @return the total number of compacting key-values
*/
@xmlattribute
public long gettotalcompactingkvs
return totalcompactingkvs
/**
* @return the number of current compacted key-values
*/
@xmlattribute
public long getcurrentcompactedkvs
return currentcompactedkvs
/**
* @param readrequestscount the current total read requests made to region
*/
public void setreadrequestscount long readrequestscount
this readrequestscount   readrequestscount
/**
* @param rootindexsizekb the current total size of root-level indexes
*                        for the region, in kb
*/
public void setrootindexsizekb int rootindexsizekb
this rootindexsizekb   rootindexsizekb
/**
* @param writerequestscount the current total write requests made to region
*/
public void setwriterequestscount long writerequestscount
this writerequestscount   writerequestscount
/**
* @param currentcompactedkvs the completed count of key values
*                            in currently running compaction
*/
public void setcurrentcompactedkvs long currentcompactedkvs
this currentcompactedkvs   currentcompactedkvs
/**
* @param totalcompactingkvs the total compacting key values
*                           in currently running compaction
*/
public void settotalcompactingkvs long totalcompactingkvs
this totalcompactingkvs   totalcompactingkvs
/**
* @param totalstaticbloomsizekb the total size of all bloom filter blocks,
*                               not just loaded into the block cache, in kb.
*/
public void settotalstaticbloomsizekb int totalstaticbloomsizekb
this totalstaticbloomsizekb   totalstaticbloomsizekb
/**
* @param totalstaticindexsizekb the total size of all index blocks,
*                               not just the root level, in kb.
*/
public void settotalstaticindexsizekb int totalstaticindexsizekb
this totalstaticindexsizekb   totalstaticindexsizekb
/**
* @param name the region name
*/
public void setname byte name
this name   name
/**
* @param stores the number of stores
*/
public void setstores int stores
this stores   stores
/**
* @param storefiles the number of store files
*/
public void setstorefiles int storefiles
this storefiles   storefiles
/**
* @param storefilesizemb total size of store files, in mb
*/
public void setstorefilesizemb int storefilesizemb
this storefilesizemb   storefilesizemb
/**
* @param memstoresizemb memstore size, in mb
*/
public void setmemstoresizemb int memstoresizemb
this memstoresizemb   memstoresizemb
/**
* @param storefileindexsizemb total size of store file indexes, in mb
*/
public void setstorefileindexsizemb int storefileindexsizemb
this storefileindexsizemb   storefileindexsizemb
private string name
private long startcode
private int requests
private int heapsizemb
private int maxheapsizemb
private list<region> regions   new arraylist<region>
/**
* add a region name to the list
* @param name the region name
*/
public void addregion byte name  int stores  int storefiles
int storefilesizemb  int memstoresizemb  int storefileindexsizemb
long readrequestscount  long writerequestscount  int rootindexsizekb
int totalstaticindexsizekb  int totalstaticbloomsizekb
long totalcompactingkvs  long currentcompactedkvs
regions add new region name  stores  storefiles  storefilesizemb
memstoresizemb  storefileindexsizemb  readrequestscount
writerequestscount  rootindexsizekb  totalstaticindexsizekb
totalstaticbloomsizekb  totalcompactingkvs  currentcompactedkvs
/**
* @param index the index
* @return the region name
*/
public region getregion int index
return regions get index
/**
* default constructor
*/
public node
/**
* constructor
* @param name the region server name
* @param startcode the region server's start code
*/
public node string name  long startcode
this name   name
this startcode   startcode
/**
* @return the region server's name
*/
@xmlattribute
public string getname
return name
/**
* @return the region server's start code
*/
@xmlattribute
public long getstartcode
return startcode
/**
* @return the current heap size, in mb
*/
@xmlattribute
public int getheapsizemb
return heapsizemb
/**
* @return the maximum heap size, in mb
*/
@xmlattribute
public int getmaxheapsizemb
return maxheapsizemb
/**
* @return the list of regions served by the region server
*/
@xmlelement name
public list<region> getregions
return regions
/**
* @return the number of requests per second processed by the region server
*/
@xmlattribute
public int getrequests
return requests
/**
* @param name the region server's hostname
*/
public void setname string name
this name   name
/**
* @param startcode the region server's start code
*/
public void setstartcode long startcode
this startcode   startcode
/**
* @param heapsizemb the current heap size, in mb
*/
public void setheapsizemb int heapsizemb
this heapsizemb   heapsizemb
/**
* @param maxheapsizemb the maximum heap size, in mb
*/
public void setmaxheapsizemb int maxheapsizemb
this maxheapsizemb   maxheapsizemb
/**
* @param regions a list of regions served by the region server
*/
public void setregions list<region> regions
this regions   regions
/**
* @param requests the number of requests per second processed by the
* region server
*/
public void setrequests int requests
this requests   requests
private list<node> livenodes   new arraylist<node>
private list<string> deadnodes   new arraylist<string>
private int regions
private int requests
private double averageload
/**
* add a live node to the cluster representation.
* @param name the region server name
* @param startcode the region server's start code
* @param heapsizemb the current heap size, in mb
* @param maxheapsizemb the maximum heap size, in mb
*/
public node addlivenode string name  long startcode  int heapsizemb
int maxheapsizemb
node node   new node name  startcode
node setheapsizemb heapsizemb
node setmaxheapsizemb maxheapsizemb
livenodes add node
return node
/**
* @param index the index
* @return the region server model
*/
public node getlivenode int index
return livenodes get index
/**
* add a dead node to the cluster representation.
* @param node the dead region server's name
*/
public void adddeadnode string node
deadnodes add node
/**
* @param index the index
* @return the dead region server's name
*/
public string getdeadnode int index
return deadnodes get index
/**
* default constructor
*/
public storageclusterstatusmodel
/**
* @return the list of live nodes
*/
@xmlelement name
@xmlelementwrapper name
public list<node> getlivenodes
return livenodes
/**
* @return the list of dead nodes
*/
@xmlelement name
@xmlelementwrapper name
public list<string> getdeadnodes
return deadnodes
/**
* @return the total number of regions served by the cluster
*/
@xmlattribute
public int getregions
return regions
/**
* @return the total number of requests per second handled by the cluster in
* the last reporting interval
*/
@xmlattribute
public int getrequests
return requests
/**
* @return the average load of the region servers in the cluster
*/
@xmlattribute
public double getaverageload
return averageload
/**
* @param nodes the list of live node models
*/
public void setlivenodes list<node> nodes
this livenodes   nodes
/**
* @param nodes the list of dead node names
*/
public void setdeadnodes list<string> nodes
this deadnodes   nodes
/**
* @param regions the total number of regions served by the cluster
*/
public void setregions int regions
this regions   regions
/**
* @param requests the total number of requests per second handled by the
* cluster
*/
public void setrequests int requests
this requests   requests
/**
* @param averageload the average load of region servers in the cluster
*/
public void setaverageload double averageload
this averageload   averageload
/* (non-javadoc)
* @see java.lang.object#tostring()
*/
@override
public string tostring
stringbuilder sb   new stringbuilder
sb append string format
livenodes size    deadnodes size
averageload
if   livenodes isempty
sb append livenodes size
sb append
for  node node  livenodes
sb append
sb append node name
sb append
sb append node startcode
sb append
sb append node requests
sb append
sb append node regions size
sb append
sb append node heapsizemb
sb append
sb append node maxheapsizemb
sb append
for  node region region  node regions
sb append
sb append bytes tostring region name
sb append
sb append region stores
sb append
sb append region storefiles
sb append
sb append region storefilesizemb
sb append
sb append region memstoresizemb
sb append
sb append region storefileindexsizemb
sb append
sb append region readrequestscount
sb append
sb append region writerequestscount
sb append
sb append region rootindexsizekb
sb append
sb append region totalstaticindexsizekb
sb append
sb append region totalstaticbloomsizekb
sb append
sb append region totalcompactingkvs
sb append
sb append region currentcompactedkvs
sb append
sb append
if   deadnodes isempty
sb append
sb append deadnodes size
sb append
for  string node  deadnodes
sb append
sb append node
sb append
return sb tostring
@override
public byte createprotobufoutput
storageclusterstatus builder builder   storageclusterstatus newbuilder
builder setregions regions
builder setrequests requests
builder setaverageload averageload
for  node node  livenodes
storageclusterstatus node builder nodebuilder
storageclusterstatus node newbuilder
nodebuilder setname node name
nodebuilder setstartcode node startcode
nodebuilder setrequests node requests
nodebuilder setheapsizemb node heapsizemb
nodebuilder setmaxheapsizemb node maxheapsizemb
for  node region region  node regions
storageclusterstatus region builder regionbuilder
storageclusterstatus region newbuilder
regionbuilder setname bytestring copyfrom region name
regionbuilder setstores region stores
regionbuilder setstorefiles region storefiles
regionbuilder setstorefilesizemb region storefilesizemb
regionbuilder setmemstoresizemb region memstoresizemb
regionbuilder setstorefileindexsizemb region storefileindexsizemb
regionbuilder setreadrequestscount region readrequestscount
regionbuilder setwriterequestscount region writerequestscount
regionbuilder setrootindexsizekb region rootindexsizekb
regionbuilder settotalstaticindexsizekb region totalstaticindexsizekb
regionbuilder settotalstaticbloomsizekb region totalstaticbloomsizekb
regionbuilder settotalcompactingkvs region totalcompactingkvs
regionbuilder setcurrentcompactedkvs region currentcompactedkvs
nodebuilder addregions regionbuilder
builder addlivenodes nodebuilder
for  string node  deadnodes
builder adddeadnodes node
return builder build   tobytearray
@override
public protobufmessagehandler getobjectfrommessage byte message
throws ioexception
storageclusterstatus builder builder   storageclusterstatus newbuilder
builder mergefrom message
if  builder hasregions
regions   builder getregions
if  builder hasrequests
requests   builder getrequests
if  builder hasaverageload
averageload   builder getaverageload
for  storageclusterstatus node node  builder getlivenodeslist
long startcode   node hasstartcode   ? node getstartcode      1
storageclusterstatusmodel node nodemodel
addlivenode node getname    startcode  node getheapsizemb
node getmaxheapsizemb
int requests   node hasrequests   ? node getrequests     0
nodemodel setrequests requests
for  storageclusterstatus region region  node getregionslist
nodemodel addregion
region getname   tobytearray
region getstores
region getstorefiles
region getstorefilesizemb
region getmemstoresizemb
region getstorefileindexsizemb
region getreadrequestscount
region getwriterequestscount
region getrootindexsizekb
region gettotalstaticindexsizekb
region gettotalstaticbloomsizekb
region gettotalcompactingkvs
region getcurrentcompactedkvs
for  string node  builder getdeadnodeslist
adddeadnode node
return this