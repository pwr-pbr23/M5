/**
* copyright 2010 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase ipc
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop hbase ipc versionedprotocol
import org apache hadoop metrics metricscontext
import org apache hadoop metrics metricsrecord
import org apache hadoop metrics metricsutil
import org apache hadoop metrics updater
import org apache hadoop metrics util
import java lang reflect method
/**
*
* this class is for maintaining  the various rpc statistics
* and publishing them through the metrics interfaces.
* this also registers the jmx mbean for rpc.
* <p>
* this class has a number of metrics variables that are publicly accessible;
* these variables (objects) have methods to update their values;
* for example:
*  <p> {@link #rpcqueuetime}.inc(time)
*
*/
public class hbaserpcmetrics implements updater
public static final string name_delim
private final metricsregistry registry   new metricsregistry
private final metricsrecord metricsrecord
private static log log   logfactory getlog hbaserpcmetrics class
private final hbaserpcstatistics rpcstatistics
public hbaserpcmetrics string hostname  string port
metricscontext context   metricsutil getcontext
metricsrecord   metricsutil createrecord context
metricsrecord settag    port
log info
hostname       port
context registerupdater this
initmethods hmasterinterface class
initmethods hmasterregioninterface class
initmethods hregioninterface class
rpcstatistics   new hbaserpcstatistics this registry  hostname  port
/**
* the metrics variables are public:
*  - they can be set directly by calling their set/inc methods
*  -they can also be read directly - e.g. jmx does this.
*/
public final metricstimevaryinglong receivedbytes
new metricstimevaryinglong    registry
public final metricstimevaryinglong sentbytes
new metricstimevaryinglong    registry
public final metricstimevaryingrate rpcqueuetime
new metricstimevaryingrate    registry
public metricstimevaryingrate rpcprocessingtime
new metricstimevaryingrate    registry
public final metricsintvalue numopenconnections
new metricsintvalue    registry
public final metricsintvalue callqueuelen
new metricsintvalue    registry
public final metricsintvalue prioritycallqueuelen
new metricsintvalue    registry
public final metricstimevaryingint authenticationfailures
new metricstimevaryingint    registry
public final metricstimevaryingint authenticationsuccesses
new metricstimevaryingint    registry
public final metricstimevaryingint authorizationfailures
new metricstimevaryingint    registry
public final metricstimevaryingint authorizationsuccesses
new metricstimevaryingint    registry
public metricstimevaryingrate rpcslowresponsetime
new metricstimevaryingrate    registry
private void initmethods class<? extends versionedprotocol> protocol
for  method m   protocol getdeclaredmethods
if  get m getname       null
create m getname
private metricstimevaryingrate get string key
return  metricstimevaryingrate  registry get key
private metricstimevaryingrate create string key
return new metricstimevaryingrate key  this registry
public void inc string name  int amt
metricstimevaryingrate m   get name
if  m    null
log warn
name
return     ignore methods that dont exist
m inc amt
/**
* generate metrics entries for all the methods defined in the list of
* interfaces.  a {@link metricstimevaryingrate} counter will be created for
* each {@code class.getmethods().getname()} entry.
* @param ifaces define metrics for all methods in the given classes
*/
public void createmetrics class<?> ifaces
createmetrics ifaces  false
/**
* generate metrics entries for all the methods defined in the list of
* interfaces.  a {@link metricstimevaryingrate} counter will be created for
* each {@code class.getmethods().getname()} entry.
*
* <p>
* if {@code prefixwithclass} is {@code true}, each metric will be named as
* {@code [class.getsimplename()].[method.getname()]}.  otherwise each metric
* will just be named according to the method -- {@code method.getname()}.
* </p>
* @param ifaces define metrics for all methods in the given classes
* @param prefixwithclass if {@code true}, each metric will be named as
*     "classname.method"
*/
public void createmetrics class<?> ifaces  boolean prefixwithclass
createmetrics ifaces  prefixwithclass  null
/**
* generate metrics entries for all the methods defined in the list of
* interfaces. a {@link metricstimevaryingrate} counter will be created for
* each {@code class.getmethods().getname()} entry.
*
* <p>
* if {@code prefixwithclass} is {@code true}, each metric will be named as
* {@code [class.getsimplename()].[method.getname()]}. otherwise each metric
* will just be named according to the method -- {@code method.getname()}.
* </p>
*
* <p>
* additionally, if {@code suffixes} is defined, additional metrics will be
* created for each method named as the original metric concatenated with
* the suffix.
* </p>
* @param ifaces define metrics for all methods in the given classes
* @param prefixwithclass if {@code true}, each metric will be named as
* "classname.method"
* @param suffixes if not null, each method will get additional metrics ending
* in each of the suffixes.
*/
public void createmetrics class<?> ifaces  boolean prefixwithclass
string  suffixes
for  class<?> iface   ifaces
method methods   iface getmethods
for  method method   methods
string attrname   prefixwithclass ?
getmetricname iface  method getname      method getname
if  get attrname     null
create attrname
if  suffixes    null
// create metrics for each requested suffix
for  string s   suffixes
string metricname   attrname   s
if  get metricname     null
create metricname
public static string getmetricname class<?> c  string method
return c getsimplename     name_delim   method
/**
* push the metrics to the monitoring subsystem on doupdate() call.
*/
public void doupdates final metricscontext context
// both getmetricslist() and pushmetric() are thread-safe
for  metricsbase m   registry getmetricslist
m pushmetric metricsrecord
metricsrecord update
public void shutdown
if  rpcstatistics    null
rpcstatistics shutdown