/*
* copyright the apache software foundation
*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements. see the notice file distributed with this
* work for additional information regarding copyright ownership. the asf
* licenses this file to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
* http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis, without
* warranties or conditions of any kind, either express or implied. see the
* license for the specific language governing permissions and limitations
* under the license.
*/
package org apache hadoop hbase regionserver metrics
import java util map
import java util concurrent concurrenthashmap
import java util concurrent concurrentmap
import java util concurrent atomic atomicinteger
import java util concurrent atomic atomiclong
import org apache hadoop classification interfaceaudience
import org apache hadoop hbase util pair
/**
* this class if for maintaining the maps used to power metrics for hfiles,
* regions, and regionservers. it has methods to mutate and get state of metrics
* numbers. these numbers are exposed to hadoop metrics through
* regionserverdynamicmetrics.
*/
@interfaceaudience private
public class regionmetricsstorage
// for simple numeric metrics (# of blocks read from block cache)
private static final concurrentmap<string  atomiclong> numericmetrics
new concurrenthashmap<string  atomiclong>
// for simple numeric metrics (current block cache size)
// these ones are not reset to zero when queried, unlike the previous.
private static final concurrentmap<string  atomiclong> numericpersistentmetrics
new concurrenthashmap<string  atomiclong>
/**
* used for metrics where we want track a metrics (such as latency) over a
* number of operations.
*/
private static final concurrentmap<string  pair<atomiclong  atomicinteger>> timevaryingmetrics
new concurrenthashmap<string  pair<atomiclong  atomicinteger>>
public static map<string  atomiclong> getnumericmetrics
return numericmetrics
public static map<string  atomiclong> getnumericpersistentmetrics
return numericpersistentmetrics
public static map<string  pair<atomiclong  atomicinteger>> gettimevaryingmetrics
return timevaryingmetrics
public static void incrnumericmetric string key  long amount
atomiclong oldval   numericmetrics get key
if  oldval    null
oldval   numericmetrics putifabsent key  new atomiclong amount
if  oldval    null
return
oldval addandget amount
public static void incrtimevaryingmetric string key  long amount
pair<atomiclong  atomicinteger> oldval   timevaryingmetrics get key
if  oldval    null
oldval
timevaryingmetrics putifabsent key
new pair<atomiclong  atomicinteger>
new atomiclong amount
new atomicinteger 1
if  oldval    null
return
oldval getfirst   addandget amount      total time
oldval getsecond   incrementandget       increment ops by 1
public static void incrnumericpersistentmetric string key  long amount
atomiclong oldval   numericpersistentmetrics get key
if  oldval    null
oldval   numericpersistentmetrics putifabsent key  new atomiclong amount
if  oldval    null
return
oldval addandget amount
public static void setnumericmetric string key  long amount
numericmetrics put key  new atomiclong amount
public static long getnumericmetric string key
atomiclong m   numericmetrics get key
if  m    null
return 0
return m get
public static pair<long  integer> gettimevaryingmetric string key
pair<atomiclong  atomicinteger> pair   timevaryingmetrics get key
if  pair    null
return new pair<long  integer> 0l  0
return new pair<long  integer> pair getfirst   get    pair getsecond   get
public static long getnumericpersistentmetric string key
atomiclong m   numericpersistentmetrics get key
if  m    null
return 0
return m get
/**
* clear all copies of the metrics this stores.
*/
public static void clear
timevaryingmetrics clear
numericmetrics clear
numericpersistentmetrics clear