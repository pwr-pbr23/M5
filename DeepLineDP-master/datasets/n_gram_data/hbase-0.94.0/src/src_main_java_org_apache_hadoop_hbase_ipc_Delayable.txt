/**
* copyright 2011 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase ipc
import java io ioexception
/**
* a call whose response can be delayed by the server.
*/
public interface delayable
/**
* signal that the call response should be delayed, thus freeing the rpc
* server to handle different requests.
*
* @param delayreturnvalue controls whether the return value of the call
* should be set when ending the delay or right away.  there are cases when
* the return value can be set right away, even if the call is delayed.
*/
public void startdelay boolean delayreturnvalue
/**
* @return is the call delayed?
*/
public boolean isdelayed
/**
* @return is the return value delayed?
*/
public boolean isreturnvaluedelayed
/**
* signal that the  rpc server is now allowed to send the response.
* @param result the value to return to the caller.  if the corresponding
* delay response specified that the return value should
* not be delayed, this parameter must be null.
* @throws ioexception
*/
public void enddelay object result  throws ioexception
/**
* signal the end of a delayed rpc, without specifying the return value.  use
* this only if the return value was not delayed
* @throws ioexception
*/
public void enddelay   throws ioexception
/**
* end the call, throwing and exception to the caller.  this works regardless
* of the return value being delayed.
* @param t object to throw to the client.
* @throws ioexception
*/
public void enddelaythrowing throwable t  throws ioexception