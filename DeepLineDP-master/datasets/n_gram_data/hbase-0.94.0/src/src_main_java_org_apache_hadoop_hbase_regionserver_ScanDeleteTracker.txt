/**
* copyright 2010 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase regionserver
import org apache hadoop hbase keyvalue
import org apache hadoop hbase util bytes
/**
* this class is responsible for the tracking and enforcement of deletes
* during the course of a scan operation.
*
* it only has to enforce delete and deletecolumn, since the
* deletefamily is handled at a higher level.
*
* <p>
* this class is utilized through three methods:
* <ul><li>{@link #add} when encountering a delete or deletecolumn
* <li>{@link #isdeleted} when checking if a put keyvalue has been deleted
* <li>{@link #update} when reaching the end of a storefile or row for scans
* <p>
* this class is not thread-safe as queries are never multi-threaded
*/
public class scandeletetracker implements deletetracker
private boolean hasfamilystamp   false
private long familystamp   0l
private byte  deletebuffer   null
private int deleteoffset   0
private int deletelength   0
private byte deletetype   0
private long deletetimestamp   0l
/**
* constructor for scandeletetracker
*/
public scandeletetracker
super
/**
* add the specified keyvalue to the list of deletes to check against for
* this row operation.
* <p>
* this is called when a delete is encountered in a storefile.
* @param buffer keyvalue buffer
* @param qualifieroffset column qualifier offset
* @param qualifierlength column qualifier length
* @param timestamp timestamp
* @param type delete type as byte
*/
@override
public void add byte buffer  int qualifieroffset  int qualifierlength
long timestamp  byte type
if   hasfamilystamp    timestamp > familystamp
if  type    keyvalue type deletefamily getcode
hasfamilystamp   true
familystamp   timestamp
return
if  deletebuffer    null    type < deletetype
// same column, so ignore less specific delete
if  bytes equals deletebuffer  deleteoffset  deletelength
buffer  qualifieroffset  qualifierlength
return
// new column, or more general delete type
deletebuffer   buffer
deleteoffset   qualifieroffset
deletelength   qualifierlength
deletetype   type
deletetimestamp   timestamp
// missing else is never called.
/**
* check if the specified keyvalue buffer has been deleted by a previously
* seen delete.
*
* @param buffer keyvalue buffer
* @param qualifieroffset column qualifier offset
* @param qualifierlength column qualifier length
* @param timestamp timestamp
* @return deleteresult
*/
@override
public deleteresult isdeleted byte  buffer  int qualifieroffset
int qualifierlength  long timestamp
if  hasfamilystamp    timestamp <  familystamp
return deleteresult family_deleted
if  deletebuffer    null
int ret   bytes compareto deletebuffer  deleteoffset  deletelength
buffer  qualifieroffset  qualifierlength
if  ret    0
if  deletetype    keyvalue type deletecolumn getcode
return deleteresult column_deleted
// delete (aka deleteversion)
// if the timestamp is the same, keep this one
if  timestamp    deletetimestamp
return deleteresult version_deleted
// use assert or not?
assert timestamp < deletetimestamp
// different timestamp, let's clear the buffer.
deletebuffer   null
else if ret < 0
// next column case.
deletebuffer   null
else
throw new illegalstateexception
bytes tostringbinary deletebuffer  deleteoffset  deletelength
bytes tostringbinary buffer  qualifieroffset  qualifierlength
timestamp       ret
return deleteresult not_deleted
@override
public boolean isempty
return deletebuffer    null     hasfamilystamp
@override
// called between every row.
public void reset
hasfamilystamp   false
familystamp   0l
deletebuffer   null
@override
// should not be called at all even (!)
public void update
this reset