/**
* copyright 2010 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase master
import java util collection
import java util hashset
import java util iterator
import java util set
import org apache commons lang notimplementedexception
import org apache hadoop hbase servername
/**
* class to hold dead servers list and utility querying dead server list.
*/
public class deadserver implements set<servername>
/**
* set of known dead servers.  on znode expiration, servers are added here.
* this is needed in case of a network partitioning where the server's lease
* expires, but the server is still running. after the network is healed,
* and it's server logs are recovered, it will be told to call server startup
* because by then, its regions have probably been reassigned.
*/
private final set<servername> deadservers   new hashset<servername>
/** number of dead servers currently being processed */
private int numprocessing
public deadserver
super
this numprocessing   0
/**
* @param servername server name
* @return true if server is dead
*/
public boolean isdeadserver final string servername
return isdeadserver new servername servername
/**
* a dead server that comes back alive has a different start code.
* @param newservername servername as either <code>host:port</code> or
* <code>host,port,startcode</code>.
* @return true if this server was dead before and coming back alive again
*/
public boolean cleanpreviousinstance final servername newservername
servername sn
servername findserverwithsamehostnameport this deadservers  newservername
if  sn    null  return false
return this deadservers remove sn
/**
* @param servername
* @return true if this server is on the dead servers list.
*/
boolean isdeadserver final servername servername
return this deadservers contains servername
/**
* @return true if we have a server with matching hostname and port.
*/
boolean isdeadserverwithsamehostnameport final servername servername
return servername findserverwithsamehostnameport this deadservers
servername     null
/**
* checks if there are currently any dead servers being processed by the
* master.  returns true if at least one region server is currently being
* processed as dead.
* @return true if any rs are being processed as dead
*/
public boolean aredeadserversinprogress
return numprocessing    0
public synchronized set<servername> clone
set<servername> clone   new hashset<servername> this deadservers size
clone addall this deadservers
return clone
public synchronized boolean add servername e
this numprocessing
return deadservers add e
public synchronized void finish servername e
this numprocessing
public synchronized int size
return deadservers size
public synchronized boolean isempty
return deadservers isempty
public synchronized boolean contains object o
return deadservers contains o
public iterator<servername> iterator
return this deadservers iterator
public synchronized object toarray
return deadservers toarray
public synchronized <t> t toarray t a
return deadservers toarray a
public synchronized boolean remove object o
return this deadservers remove o
public synchronized boolean containsall collection<?> c
return deadservers containsall c
public synchronized boolean addall collection<? extends servername> c
return deadservers addall c
public synchronized boolean retainall collection<?> c
return deadservers retainall c
public synchronized boolean removeall collection<?> c
return deadservers removeall c
public synchronized void clear
throw new notimplementedexception
public synchronized boolean equals object o
return deadservers equals o
public synchronized int hashcode
return deadservers hashcode
public synchronized string tostring
return this deadservers tostring