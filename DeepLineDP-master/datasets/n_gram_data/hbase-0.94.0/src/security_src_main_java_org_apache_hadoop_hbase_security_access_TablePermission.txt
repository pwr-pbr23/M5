/*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase security access
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop hbase keyvalue
import org apache hadoop hbase util bytes
import java io datainput
import java io dataoutput
import java io ioexception
/**
* represents an authorization for access for the given actions, optionally
* restricted to the given column family or column qualifier, over the
* given table.  if the family property is <code>null</code>, it implies
* full table access.
*/
public class tablepermission extends permission
private static log log   logfactory getlog tablepermission class
private byte table
private byte family
private byte qualifier
/** nullary constructor for writable, do not use */
public tablepermission
super
/**
* create a new permission for the given table and (optionally) column family,
* allowing the given actions.
* @param table the table
* @param family the family, can be null if a global permission on the table
* @param assigned the list of allowed actions
*/
public tablepermission byte table  byte family  action    assigned
this table  family  null  assigned
/**
* creates a new permission for the given table, restricted to the given
* column family and qualifer, allowing the assigned actions to be performed.
* @param table the table
* @param family the family, can be null if a global permission on the table
* @param assigned the list of allowed actions
*/
public tablepermission byte table  byte family  byte qualifier
action    assigned
super assigned
this table   table
this family   family
this qualifier   qualifier
/**
* creates a new permission for the given table, family and column qualifier,
* allowing the actions matching the provided byte codes to be performed.
* @param table the table
* @param family the family, can be null if a global permission on the table
* @param actioncodes the list of allowed action codes
*/
public tablepermission byte table  byte family  byte qualifier
byte actioncodes
super actioncodes
this table   table
this family   family
this qualifier   qualifier
public byte gettable
return table
public byte getfamily
return family
public byte getqualifier
return qualifier
/**
* checks that a given table operation is authorized by this permission
* instance.
*
* @param table the table where the operation is being performed
* @param family the column family to which the operation is restricted,
*   if <code>null</code> implies "all"
* @param qualifier the column qualifier to which the action is restricted,
*   if <code>null</code> implies "all"
* @param action the action being requested
* @return <code>true</code> if the action within the given scope is allowed
*   by this permission, <code>false</code>
*/
public boolean implies byte table  byte family  byte qualifier
action action
if   bytes equals this table  table
return false
if  this family    null
family    null
bytes equals this family  family
return false
if  this qualifier    null
qualifier    null
bytes equals this qualifier  qualifier
return false
// check actions
return super implies action
/**
* checks if this permission grants access to perform the given action on
* the given table and key value.
* @param table the table on which the operation is being performed
* @param kv the keyvalue on which the operation is being requested
* @param action the action requested
* @return <code>true</code> if the action is allowed over the given scope
*   by this permission, otherwise <code>false</code>
*/
public boolean implies byte table  keyvalue kv  action action
if   bytes equals this table  table
return false
if  family    null
bytes compareto family  0  family length
kv getbuffer    kv getfamilyoffset    kv getfamilylength       0
return false
if  qualifier    null
bytes compareto qualifier  0  qualifier length
kv getbuffer    kv getqualifieroffset    kv getqualifierlength       0
return false
// check actions
return super implies action
/**
* returns <code>true</code> if this permission matches the given column
* family at least.  this only indicates a partial match against the table
* and column family, however, and does not guarantee that implies() for the
* column same family would return <code>true</code>.  in the case of a
* column-qualifier specific permission, for example, implies() would still
* return false.
*/
public boolean matchesfamily byte table  byte family  action action
if   bytes equals this table  table
return false
if  this family    null
family    null
bytes equals this family  family
return false
// ignore qualifier
// check actions
return super implies action
/**
* returns if the given permission matches the given qualifier.
* @param table the table name to match
* @param family the column family to match
* @param qualifier the qualifier name to match
* @param action the action requested
* @return <code>true</code> if the table, family and qualifier match,
*   otherwise <code>false</code>
*/
public boolean matchesfamilyqualifier byte table  byte family  byte qualifier
action action
if   matchesfamily table  family  action
return false
else
if  this qualifier    null
qualifier    null
bytes equals this qualifier  qualifier
return false
return super implies action
@override
public boolean equals object obj
if    obj instanceof tablepermission
return false
tablepermission other    tablepermission obj
if    bytes equals table  other gettable
family    null    other getfamily      null
bytes equals family  other getfamily
qualifier    null    other getqualifier      null
bytes equals qualifier  other getqualifier
return false
// check actions
return super equals other
@override
public int hashcode
final int prime   37
int result   super hashcode
if  table    null
result   prime   result   bytes hashcode table
if  family    null
result   prime   result   bytes hashcode family
if  qualifier    null
result   prime   result   bytes hashcode qualifier
return result
public string tostring
stringbuilder str   new stringbuilder
append    append bytes tostring table
append    append bytes tostring family
append    append bytes tostring qualifier
append
if  actions    null
for  int i 0  i<actions length  i
if  i > 0
str append
if  actions    null
str append actions tostring
else
str append
str append
return str tostring
@override
public void readfields datainput in  throws ioexception
super readfields in
table   bytes readbytearray in
if  in readboolean
family   bytes readbytearray in
if  in readboolean
qualifier   bytes readbytearray in
@override
public void write dataoutput out  throws ioexception
super write out
bytes writebytearray out  table
out writeboolean family    null
if  family    null
bytes writebytearray out  family
out writeboolean qualifier    null
if  qualifier    null
bytes writebytearray out  qualifier