/**
* copyright 2010 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase regionserver handler
import java io ioexception
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop hbase hregioninfo
import org apache hadoop hbase server
import org apache hadoop hbase executor eventhandler
import org apache hadoop hbase regionserver hregion
import org apache hadoop hbase regionserver regionserverservices
import org apache hadoop hbase zookeeper zkassign
import org apache zookeeper keeperexception
/**
* handles closing of a region on a region server.
*/
public class closeregionhandler extends eventhandler
// note on priorities shutting down.  there are none for close. there are some
// for open.  i think that is right.  on shutdown, we want the meta to close
// before root and both to close after the user regions have closed.  what
// about the case where master tells us to shutdown a catalog region and we
// have a running queue of user regions to close?
private static final log log   logfactory getlog closeregionhandler class
private final int failed    1
int expectedversion   failed
private final regionserverservices rsservices
private final hregioninfo regioninfo
// if true, the hosting server is aborting.  region close process is different
// when we are aborting.
private final boolean abort
// update zk on closing transitions. usually true.  its false if cluster
// is going down.  in this case, its the rs that initiates the region
// close -- not the master process so state up in zk will unlikely be
// closing.
private final boolean zk
// this is executed after receiving an close rpc from the master.
public closeregionhandler final server server
final regionserverservices rsservices  hregioninfo regioninfo
this server  rsservices  regioninfo  false  true   1
/**
* this method used internally by the regionserver to close out regions.
* @param server
* @param rsservices
* @param regioninfo
* @param abort if the regionserver is aborting.
* @param zk if the close should be noted out in zookeeper.
*/
public closeregionhandler final server server
final regionserverservices rsservices
final hregioninfo regioninfo  final boolean abort  final boolean zk
final int versionofclosingnode
this server  rsservices   regioninfo  abort  zk  versionofclosingnode
eventtype m_rs_close_region
protected closeregionhandler final server server
final regionserverservices rsservices  hregioninfo regioninfo
boolean abort  final boolean zk  final int versionofclosingnode
eventtype eventtype
super server  eventtype
this server   server
this rsservices   rsservices
this regioninfo   regioninfo
this abort   abort
this zk   zk
this expectedversion   versionofclosingnode
public hregioninfo getregioninfo
return regioninfo
@override
public void process
try
string name   regioninfo getregionnameasstring
log debug     name
string encodedregionname   regioninfo getencodedname
// check that this region is being served here
hregion region   this rsservices getfromonlineregions encodedregionname
if  region    null
log warn     name
return
// close the region
try
// todo: if we need to keep updating closing stamp to prevent against
// a timeout if this is long-running, need to spin up a thread?
if  region close abort     null
// this region got closed.  most likely due to a split. so instead
// of doing the setclosedstate() below, let's just ignore cont
// the split message will clean up the master state.
log warn
regioninfo getregionnameasstring
return
catch  throwable t
// a throwable here indicates that we couldn't successfully flush the
// memstore before closing. so, we need to abort the server and allow
// the master to split our logs in order to recover the data.
server abort
regioninfo getregionnameasstring        t
throw new runtimeexception t
this rsservices removefromonlineregions regioninfo getencodedname
if  this zk
if  setclosedstate this expectedversion  region
log debug
name       this server getservername
else
log debug
name       this server getservername
// done!  region is closed on this rs
log debug     region getregionnameasstring
finally
this rsservices getregionsintransitioninrs
remove this regioninfo getencodednameasbytes
/**
* transition zk node to closed
* @param expectedversion
* @return if the state is set successfully
*/
private boolean setclosedstate final int expectedversion  final hregion region
try
if  zkassign transitionnodeclosed server getzookeeper    regioninfo
server getservername    expectedversion     failed
log warn
region close
return false
catch  nullpointerexception e
// i've seen npe when table was deleted while close was running in unit tests.
log warn    e
return false
catch  keeperexception e
log error    e
return false
catch  ioexception e
log error    e
return false
return true