/*
* copyright 2011 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase util
import org apache hadoop hbase keyvalue
import org apache hadoop io rawcomparator
public class compoundbloomfilterbase implements bloomfilterbase
/**
* at read time, the total number of chunks. at write time, the number of
* chunks created so far. the first chunk has an id of 0, and the current
* chunk has the id of numchunks - 1.
*/
protected int numchunks
/**
* the bloom filter version. there used to be a dynamicbytebloomfilter which
* had version 2.
*/
public static final int version   3
/** target error rate for configuring the filter and for information */
protected float errorrate
/** the total number of keys in all chunks */
protected long totalkeycount
protected long totalbytesize
protected long totalmaxkeys
/** hash function type to use, as defined in {@link hash} */
protected int hashtype
/** comparator used to compare bloom filter keys */
protected rawcomparator<byte> comparator
@override
public long getmaxkeys
return totalmaxkeys
@override
public long getkeycount
return totalkeycount
@override
public long getbytesize
return totalbytesize
private static final byte dummy   new byte
/**
* prepare an ordered pair of row and qualifier to be compared using
* keyvalue.keycomparator. this is only used for row-column bloom
* filters.
*/
@override
public byte createbloomkey byte row  int roffset  int rlength
byte qualifier  int qoffset  int qlength
if  qualifier    null
qualifier   dummy
// make sure this does not specify a timestamp so that the default maximum
// (most recent) timestamp is used.
keyvalue kv   keyvalue createfirstonrow row  roffset  rlength  dummy  0  0
qualifier  qoffset  qlength
return kv getkey
@override
public rawcomparator<byte> getcomparator
return comparator