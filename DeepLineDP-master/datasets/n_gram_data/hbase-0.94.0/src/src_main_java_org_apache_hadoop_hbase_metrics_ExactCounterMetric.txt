/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase metrics
import java util collections
import java util comparator
import java util list
import java util map
import java util map entry
import java util concurrent atomic atomiclong
import java util concurrent locks readwritelock
import java util concurrent locks reentrantreadwritelock
import org apache hadoop hbase util pair
import org apache hadoop metrics metricsrecord
import org apache hadoop metrics util metricsbase
import org apache hadoop metrics util metricsregistry
import org cliffc high_scale_lib counter
import com google common base function
import com google common collect lists
import com google common collect mapmaker
public class exactcountermetric extends metricsbase
private static final int default_top_n   5
// only publish stats on the topn items (default to default_top_n)
private final int topn
private final map<string  counter> counts
// all access to the 'counts' map should use this lock.
// take a write lock iff you want to guarantee exclusive access
// (the map stripes locks internally, so it's already thread safe -
// this lock is just so you can take a consistent snapshot of data)
private final readwritelock lock
/**
* constructor to create a new counter metric
* @param nam         the name to publish this metric under
* @param registry    where the metrics object will be registered
* @param description metrics description
* @param topn        how many 'keys' to publish metrics on
*/
public exactcountermetric final string nam  final metricsregistry registry
final string description  int topn
super nam  description
this counts   new mapmaker   makecomputingmap
new function<string  counter>
@override
public counter apply string input
return new counter
this lock   new reentrantreadwritelock
this topn   topn
if  registry    null
registry add nam  this
/**
* constructor creates a new exactcountermetric
* @param nam       the name of the metrics to be used to publish the metric
* @param registry  where the metrics object will be registered
*/
public exactcountermetric final string nam  metricsregistry registry
this nam  registry  no_description  default_top_n
public void update string type
this lock readlock   lock
try
this counts get type  increment
finally
this lock readlock   unlock
public void update string type  long count
this lock readlock   lock
try
this counts get type  add count
finally
this lock readlock   unlock
public list<pair<string  long>> gettop int n
final list<pair<string  long>> countssnapshot
lists newarraylistwithcapacity this counts size
// no updates are allowed while i'm holding this lock, so move fast
this lock writelock   lock
try
for entry<string  counter> entry   this counts entryset
countssnapshot add pair newpair entry getkey
entry getvalue   get
finally
this lock writelock   unlock
collections sort countssnapshot  new comparator<pair<string  long>>
@override
public int compare pair<string  long> a  pair<string  long> b
return b getsecond   compareto a getsecond
return countssnapshot sublist 0  math min n  countssnapshot size
@override
public void pushmetric metricsrecord mr
final list<pair<string  long>> topkeys   gettop integer max_value
int sum   0
int counter   0
for  pair<string  long> keycount   topkeys
counter
// only push stats on the topn keys
if  counter <  this topn
mr setmetric getname         keycount getfirst
keycount getsecond
sum    keycount getsecond
mr setmetric getname        this counts size
mr setmetric getname        sum