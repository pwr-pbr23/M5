/**
* copyright 2010 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase master
import java io ioexception
import java lang thread uncaughtexceptionhandler
import java util concurrent executors
import org apache hadoop hbase server
import com google common util concurrent threadfactorybuilder
/**
* base class used bulk assigning and unassigning regions.
* encapsulates a fixed size thread pool of executors to run assignment/unassignment.
* implement {@link #populatepool(java.util.concurrent.executorservice)} and
* {@link #waituntildone(long)}.  the default implementation of
* the {@link #getuncaughtexceptionhandler()} is to abort the hosting
* server.
*/
public abstract class bulkassigner
protected final server server
/**
* @param server an instance of server
*/
public bulkassigner final server server
this server   server
/**
* @return what to use for a thread prefix when executor runs.
*/
protected string getthreadnameprefix
return this server getservername         this getclass   getname
protected uncaughtexceptionhandler getuncaughtexceptionhandler
return new uncaughtexceptionhandler
@override
public void uncaughtexception thread t  throwable e
// abort if exception of any kind.
server abort     t getname    e
protected int getthreadcount
return this server getconfiguration
getint    20
protected long gettimeoutonrit
return this server getconfiguration
getlong    5   60   1000
protected abstract void populatepool
final java util concurrent executorservice pool  throws ioexception
public boolean bulkassign   throws interruptedexception  ioexception
return bulkassign true
/**
* run the bulk assign.
*
* @param sync
*          whether to assign synchronously.
* @throws interruptedexception
* @return true if done.
* @throws ioexception
*/
public boolean bulkassign boolean sync  throws interruptedexception
ioexception
boolean result   false
threadfactorybuilder builder   new threadfactorybuilder
builder setdaemon true
builder setnameformat getthreadnameprefix
builder setuncaughtexceptionhandler getuncaughtexceptionhandler
int threadcount   getthreadcount
java util concurrent executorservice pool
executors newfixedthreadpool threadcount  builder build
try
populatepool pool
// how long to wait on empty regions-in-transition.  if we timeout, the
// rit monitor should do fixup.
if  sync  result   waituntildone gettimeoutonrit
finally
// we're done with the pool.  it'll exit when its done all in queue.
pool shutdown
return result
/**
* wait until bulk assign is done.
* @param timeout how long to wait.
* @throws interruptedexception
* @return true if the condition we were waiting on happened.
*/
protected abstract boolean waituntildone final long timeout
throws interruptedexception