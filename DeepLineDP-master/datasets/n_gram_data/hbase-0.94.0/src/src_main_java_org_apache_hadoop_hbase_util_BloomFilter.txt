/*
* copyright 2010 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase util
import java nio bytebuffer
/**
* defines the general behavior of a bloom filter.
*
* <p>
* the bloom filter is a data structure that was introduced in 1970 and that
* has been adopted by the networking research community in the past decade
* thanks to the bandwidth efficiencies that it offers for the transmission of
* set membership information between networked hosts. a sender encodes the
* information into a bit vector, the bloom filter, that is more compact than a
* conventional representation. computation and space costs for construction
* are linear in the number of elements. the receiver uses the filter to test
* whether various elements are members of the set. though the filter will
* occasionally return a false positive, it will never return a false negative.
* when creating the filter, the sender can choose its desired point in a
* trade-off between the false positive rate and the size.
*
* @see bloomfilterwriter for the ability to add elements to a bloom filter
*/
public interface bloomfilter extends bloomfilterbase
/**
* check if the specified key is contained in the bloom filter.
*
* @param buf data to check for existence of
* @param offset offset into the data
* @param length length of the data
* @param bloom bloom filter data to search. this can be null if auto-loading
*        is supported.
* @return true if matched by bloom, false if not
*/
boolean contains byte  buf  int offset  int length  bytebuffer bloom
/**
* @return true if this bloom filter can automatically load its data
*         and thus allows a null byte buffer to be passed to contains()
*/
boolean supportsautoloading