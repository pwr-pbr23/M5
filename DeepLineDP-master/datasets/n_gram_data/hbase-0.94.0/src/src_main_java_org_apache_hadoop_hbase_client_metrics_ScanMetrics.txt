/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase client metrics
import java io datainput
import java io dataoutput
import java io ioexception
import java util arraylist
import java util collection
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop hbase hconstants
import org apache hadoop io writable
import org apache hadoop metrics util metricsbase
import org apache hadoop metrics util metricsregistry
import org apache hadoop metrics util metricstimevaryinglong
/**
* provides client-side metrics related to scan operations
* the data can be passed to mapreduce framework or other systems.
* currently metrics framework won't be able to support the scenario
* where multiple scan instances run on the same machine trying to
* update the same metric. we use metrics objects in the class,
* so that it can be easily switched to metrics framework later when it support
* this scenario.
* some of these metrics are general for any client operation such as put
* however, there is no need for this. so they are defined under scan operation
* for now.
*/
public class scanmetrics implements writable
private static final byte scanmetrics_version    byte 1
private static final log log   logfactory getlog scanmetrics class
private metricsregistry registry   new metricsregistry
/**
* number of rpc calls
*/
public final metricstimevaryinglong countofrpccalls
new metricstimevaryinglong    registry
/**
* number of remote rpc calls
*/
public final metricstimevaryinglong countofremoterpccalls
new metricstimevaryinglong    registry
/**
* sum of milliseconds between sequential next calls
*/
public final metricstimevaryinglong sumofmillissecbetweennexts
new metricstimevaryinglong    registry
/**
* number of notservingregionexception caught
*/
public final metricstimevaryinglong countofnsre
new metricstimevaryinglong    registry
/**
* number of bytes in result objects from region servers
*/
public final metricstimevaryinglong countofbytesinresults
new metricstimevaryinglong    registry
/**
* number of bytes in result objects from remote region servers
*/
public final metricstimevaryinglong countofbytesinremoteresults
new metricstimevaryinglong    registry
/**
* number of regions
*/
public final metricstimevaryinglong countofregions
new metricstimevaryinglong    registry
/**
* number of rpc retries
*/
public final metricstimevaryinglong countofrpcretries
new metricstimevaryinglong    registry
/**
* number of remote rpc retries
*/
public final metricstimevaryinglong countofremoterpcretries
new metricstimevaryinglong    registry
/**
* constructor
*/
public scanmetrics
/**
* serialize all the metricstimevaryinglong
*/
public void write dataoutput out  throws ioexception
out writebyte scanmetrics_version
collection<metricsbase> mbs   registry getmetricslist
// we only handle metricstimevaryinglong for now.
int metricscount   0
for  metricsbase mb   mbs
if   mb instanceof metricstimevaryinglong
metricscount
else
throw new ioexception
mb getname         mb getdescription
out writeint metricscount
for  metricsbase mb   mbs
out writeutf mb getname
out writelong   metricstimevaryinglong  mb  getcurrentintervalvalue
public void readfields datainput in  throws ioexception
int version   in readbyte
if  version >  int scanmetrics_version
throw new ioexception     version
int metricscount   in readint
for  int i 0  i<metricscount  i
string metricsname   in readutf
long v   in readlong
metricsbase mb   registry get metricsname
if   mb instanceof metricstimevaryinglong
metricstimevaryinglong  mb  inc v
else
log warn
mb getname         mb getdescription
public metricstimevaryinglong getmetricstimevaryinglongarray
collection<metricsbase> mbs   registry getmetricslist
arraylist<metricstimevaryinglong> mlv
new arraylist<metricstimevaryinglong>
for  metricsbase mb   mbs
if   mb instanceof metricstimevaryinglong
mlv add  metricstimevaryinglong  mb
return mlv toarray new metricstimevaryinglong