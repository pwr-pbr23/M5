/*
* copyright 2010 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase ipc
import org apache hadoop conf configurable
import org apache hadoop conf configuration
import org apache hadoop hbase io hbaseobjectwritable
import org apache hadoop io versionmismatchexception
import org apache hadoop io versionedwritable
import java io datainput
import java io dataoutput
import java io ioexception
import java lang reflect field
import java lang reflect method
/** a method invocation, including the method name and its parameters.*/
public class invocation extends versionedwritable implements configurable
protected string methodname
@suppresswarnings
protected class parameterclasses
protected object parameters
protected configuration conf
private long clientversion
private int clientmethodshash
private static byte rpc_version   1
public invocation
public invocation method method  object parameters
this methodname   method getname
this parameterclasses   method getparametertypes
this parameters   parameters
if  method getdeclaringclass   equals versionedprotocol class
//versionedprotocol is exempted from version check.
clientversion   0
clientmethodshash   0
else
try
field versionfield   method getdeclaringclass   getfield
versionfield setaccessible true
this clientversion   versionfield getlong method getdeclaringclass
catch  nosuchfieldexception ex
throw new runtimeexception     method getdeclaringclass    ex
catch  illegalaccessexception ex
throw new runtimeexception ex
this clientmethodshash   protocolsignature getfingerprint method
getdeclaringclass   getmethods
/** @return the name of the method invoked. */
public string getmethodname     return methodname
/** @return the parameter classes. */
@suppresswarnings
public class getparameterclasses     return parameterclasses
/** @return the parameter instances. */
public object getparameters     return parameters
long getprotocolversion
return clientversion
protected int getclientmethodshash
return clientmethodshash
/**
* returns the rpc version used by the client.
* @return rpcversion
*/
public long getrpcversion
return rpc_version
public void readfields datainput in  throws ioexception
try
super readfields in
methodname   in readutf
clientversion   in readlong
clientmethodshash   in readint
catch  versionmismatchexception e
// versionmismatchexception doesn't provide an api to access
// expectedversion and foundversion.  this is really sad.
if  e tostring   endswith
// try to be a bit backwards compatible.  in previous versions of
// hbase (before hbase-3939 in 0.92) invocation wasn't a
// versionedwritable and thus the first thing on the wire was always
// the 2-byte length of the method name.  because no method name is
// longer than 255 characters, and all method names are in ascii,
// the following code is equivalent to `in.readutf()', which we can't
// call again here, because `super.readfields(in)' already consumed
// the first byte of input, which can't be "unread" back into `in'.
final short len    short   in readbyte     0xff       unsigned byte
final byte buf   new byte
in readfully buf  0  len
methodname   new string buf
parameters   new object
parameterclasses   new class
hbaseobjectwritable objectwritable   new hbaseobjectwritable
for  int i   0  i < parameters length  i
parameters   hbaseobjectwritable readobject in  objectwritable
this conf
parameterclasses   objectwritable getdeclaredclass
public void write dataoutput out  throws ioexception
super write out
out writeutf this methodname
out writelong clientversion
out writeint clientmethodshash
out writeint parameterclasses length
for  int i   0  i < parameterclasses length  i
hbaseobjectwritable writeobject out  parameters  parameterclasses
conf
@override
public string tostring
stringbuilder buffer   new stringbuilder 256
buffer append methodname
buffer append
for  int i   0  i < parameters length  i
if  i    0
buffer append
buffer append parameters
buffer append
buffer append   rpc_version
buffer append   clientversion
buffer append   clientmethodshash
return buffer tostring
public void setconf configuration conf
this conf   conf
public configuration getconf
return this conf
@override
public byte getversion
return rpc_version