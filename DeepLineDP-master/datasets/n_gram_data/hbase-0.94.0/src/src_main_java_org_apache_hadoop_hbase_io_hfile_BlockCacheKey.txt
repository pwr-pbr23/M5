/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase io hfile
import org apache hadoop hbase io heapsize
import org apache hadoop hbase io encoding datablockencoding
import org apache hadoop hbase util bytes
import org apache hadoop hbase util classsize
/**
* cache key for use with implementations of {@link blockcache}
*/
public class blockcachekey implements heapsize
private final string hfilename
private final long offset
private final datablockencoding encoding
public blockcachekey string file  long offset  datablockencoding encoding
blocktype blocktype
this hfilename   file
this offset   offset
// we add encoding to the cache key only for data blocks. if the block type
// is unknown (this should never be the case in production), we just use
// the provided encoding, because it might be a data block.
this encoding    blocktype    null    blocktype isdata    ? encoding
datablockencoding none
/**
* construct a new blockcachekey
* @param file the name of the hfile this block belongs to.
* @param offset offset of the block into the file
*/
public blockcachekey string file  long offset
this file  offset  datablockencoding none  null
@override
public int hashcode
return hfilename hashcode     127    int   offset ^  offset >>> 32
encoding ordinal     17
@override
public boolean equals object o
if  o instanceof blockcachekey
blockcachekey k    blockcachekey  o
return offset    k offset
hfilename    null ? k hfilename    null   hfilename
equals k hfilename
else
return false
@override
public string tostring
return hfilename       offset
encoding    datablockencoding none ?         encoding
/**
* strings have two bytes per character due to default java unicode encoding
* (hence length times 2).
*/
@override
public long heapsize
return classsize align classsize object   2   hfilename length
bytes sizeof_long   2   classsize reference
// can't avoid this unfortunately
/**
* @return the hfilename portion of this cache key
*/
public string gethfilename
return hfilename
public datablockencoding getdatablockencoding
return encoding