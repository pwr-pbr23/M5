/*
* copyright 2010 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase rest model
import java io serializable
import java util hashmap
import java util map
import javax xml bind annotation xmlanyattribute
import javax xml bind annotation xmlattribute
import javax xml bind annotation xmlrootelement
import javax xml namespace qname
import org apache hadoop hbase hcolumndescriptor
import org apache hadoop hbase hconstants
/**
* representation of a column family schema.
*
* <pre>
* &lt;complextype name="columnschema"&gt;
*   &lt;attribute name="name" type="string"&gt;&lt;/attribute&gt;
*   &lt;anyattribute&gt;&lt;/anyattribute&gt;
* &lt;/complextype&gt;
* </pre>
*/
@xmlrootelement name
public class columnschemamodel implements serializable
private static final long serialversionuid   1l
private static qname blockcache   new qname hcolumndescriptor blockcache
private static qname blocksize   new qname hcolumndescriptor blocksize
private static qname bloomfilter   new qname hcolumndescriptor bloomfilter
private static qname compression   new qname hcolumndescriptor compression
private static qname in_memory   new qname hconstants in_memory
private static qname ttl   new qname hcolumndescriptor ttl
private static qname versions   new qname hconstants versions
private string name
private map<qname object> attrs   new hashmap<qname object>
/**
* default constructor
*/
public columnschemamodel
/**
* add an attribute to the column family schema
* @param name the attribute name
* @param value the attribute value
*/
public void addattribute string name  object value
attrs put new qname name   value
/**
* @param name the attribute name
* @return the attribute value
*/
public string getattribute string name
object o   attrs get new qname name
return o    null ? o tostring    null
/**
* @return the column name
*/
@xmlattribute
public string getname
return name
/**
* @return the map for holding unspecified (user) attributes
*/
@xmlanyattribute
public map<qname object> getany
return attrs
/**
* @param name the table name
*/
public void setname string name
this name   name
/* (non-javadoc)
* @see java.lang.object#tostring()
*/
@override
public string tostring
stringbuilder sb   new stringbuilder
sb append
sb append name
sb append
for  map entry<qname object> e  attrs entryset
sb append
sb append e getkey   getlocalpart
sb append
sb append e getvalue   tostring
sb append
sb append
return sb tostring
// getters and setters for common schema attributes
// cannot be standard bean type getters and setters, otherwise this would
// confuse jaxb
/**
* @return true if the blockcache attribute is present and true
*/
public boolean __getblockcache
object o   attrs get blockcache
return o    null ?
boolean valueof o tostring      hcolumndescriptor default_blockcache
/**
* @return the value of the blocksize attribute or its default if it is unset
*/
public int __getblocksize
object o   attrs get blocksize
return o    null ?
integer valueof o tostring      hcolumndescriptor default_blocksize
/**
* @return the value of the bloomfilter attribute or its default if unset
*/
public string __getbloomfilter
object o   attrs get bloomfilter
return o    null ? o tostring     hcolumndescriptor default_bloomfilter
/**
* @return the value of the compression attribute or its default if unset
*/
public string __getcompression
object o   attrs get compression
return o    null ? o tostring     hcolumndescriptor default_compression
/**
* @return true if the in_memory attribute is present and true
*/
public boolean __getinmemory
object o   attrs get in_memory
return o    null ?
boolean valueof o tostring      hcolumndescriptor default_in_memory
/**
* @return the value of the ttl attribute or its default if it is unset
*/
public int __getttl
object o   attrs get ttl
return o    null ?
integer valueof o tostring      hcolumndescriptor default_ttl
/**
* @return the value of the versions attribute or its default if it is unset
*/
public int __getversions
object o   attrs get versions
return o    null ?
integer valueof o tostring      hcolumndescriptor default_versions
/**
* @param value the desired value of the blocksize attribute
*/
public void __setblocksize int value
attrs put blocksize  integer tostring value
/**
* @param value the desired value of the blockcache attribute
*/
public void __setblockcache boolean value
attrs put blockcache  boolean tostring value
public void __setbloomfilter string value
attrs put bloomfilter  value
/**
* @param value the desired value of the compression attribute
*/
public void __setcompression string value
attrs put compression  value
/**
* @param value the desired value of the in_memory attribute
*/
public void __setinmemory boolean value
attrs put in_memory  boolean tostring value
/**
* @param value the desired value of the ttl attribute
*/
public void __setttl int value
attrs put ttl  integer tostring value
/**
* @param value the desired value of the versions attribute
*/
public void __setversions int value
attrs put versions  integer tostring value