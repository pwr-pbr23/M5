/**
* copyright 2010 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase client
import java io datainput
import java io dataoutput
import java io ioexception
import java util map
import java util navigablemap
import java util set
import java util treemap
import org apache hadoop hbase io timerange
import org apache hadoop hbase util bytes
import org apache hadoop io writable
/**
* used to perform increment operations on a single row.
* <p>
* this operation does not appear atomic to readers.  increments are done
* under a single row lock, so write operations to a row are synchronized, but
* readers do not take row locks so get and scan operations can see this
* operation partially completed.
* <p>
* to increment columns of a row, instantiate an increment object with the row
* to increment.  at least one column to increment must be specified using the
* {@link #addcolumn(byte[], byte[], long)} method.
*/
public class increment implements row
private static final byte increment_version    byte 2
private byte  row   null
private long lockid    1l
private boolean writetowal   true
private timerange tr   new timerange
private map<byte   navigablemap<byte   long>> familymap
new treemap<byte   navigablemap<byte   long>> bytes bytes_comparator
/** constructor for writable.  do not use */
public increment
/**
* create a increment operation for the specified row.
* <p>
* at least one column must be incremented.
* @param row row key
*/
public increment byte  row
this row  null
/**
* create a increment operation for the specified row, using an existing row
* lock.
* <p>
* at least one column must be incremented.
* @param row row key
* @param rowlock previously acquired row lock, or null
*/
public increment byte  row  rowlock rowlock
this row   row
if rowlock    null
this lockid   rowlock getlockid
/**
* increment the column from the specific family with the specified qualifier
* by the specified amount.
* <p>
* overrides previous calls to addcolumn for this family and qualifier.
* @param family family name
* @param qualifier column qualifier
* @param amount amount to increment by
* @return the increment object
*/
public increment addcolumn byte  family  byte  qualifier  long amount
navigablemap<byte   long> set   familymap get family
if set    null
set   new treemap<byte   long> bytes bytes_comparator
set put qualifier  amount
familymap put family  set
return this
/* accessors */
/**
* method for retrieving the increment's row
* @return row
*/
public byte  getrow
return this row
/**
* method for retrieving the increment's rowlock
* @return rowlock
*/
public rowlock getrowlock
return new rowlock this row  this lockid
/**
* method for retrieving the increment's lockid
* @return lockid
*/
public long getlockid
return this lockid
/**
* method for retrieving whether wal will be written to or not
* @return true if wal should be used, false if not
*/
public boolean getwritetowal
return this writetowal
/**
* sets whether this operation should write to the wal or not.
* @param writetowal true if wal should be used, false if not
* @return this increment operation
*/
public increment setwritetowal boolean writetowal
this writetowal   writetowal
return this
/**
* gets the timerange used for this increment.
* @return timerange
*/
public timerange gettimerange
return this tr
/**
* sets the timerange to be used on the get for this increment.
* <p>
* this is useful for when you have counters that only last for specific
* periods of time (ie. counters that are partitioned by time).  by setting
* the range of valid times for this increment, you can potentially gain
* some performance with a more optimal get operation.
* <p>
* this range is used as [minstamp, maxstamp).
* @param minstamp minimum timestamp value, inclusive
* @param maxstamp maximum timestamp value, exclusive
* @throws ioexception if invalid time range
* @return this
*/
public increment settimerange long minstamp  long maxstamp
throws ioexception
tr   new timerange minstamp  maxstamp
return this
/**
* method for retrieving the keys in the familymap
* @return keys in the current familymap
*/
public set<byte> familyset
return this familymap keyset
/**
* method for retrieving the number of families to increment from
* @return number of families
*/
public int numfamilies
return this familymap size
/**
* method for retrieving the number of columns to increment
* @return number of columns across all families
*/
public int numcolumns
if   hasfamilies    return 0
int num   0
for  navigablemap<byte   long> family   familymap values
num    family size
return num
/**
* method for checking if any families have been inserted into this increment
* @return true if familymap is non empty false otherwise
*/
public boolean hasfamilies
return  this familymap isempty
/**
* method for retrieving the increment's familymap
* @return familymap
*/
public map<byte navigablemap<byte  long>> getfamilymap
return this familymap
/**
* @return string
*/
@override
public string tostring
stringbuilder sb   new stringbuilder
sb append
sb append bytes tostringbinary this row
if this familymap size      0
sb append
return sb tostring
sb append
boolean morethanone   false
for map entry<byte   navigablemap<byte  long>> entry
this familymap entryset
if morethanone
sb append
else
morethanone   true
sb append
sb append
sb append bytes tostring entry getkey
sb append
if entry getvalue      null
sb append
else
sb append
boolean morethanoneb   false
for map entry<byte   long> column   entry getvalue   entryset
if morethanoneb
sb append
else
morethanoneb   true
sb append bytes tostringbinary column getkey          column getvalue
sb append
sb append
return sb tostring
//writable
public void readfields final datainput in
throws ioexception
int version   in readbyte
if  version > increment_version
throw new ioexception
this row   bytes readbytearray in
this tr   new timerange
tr readfields in
this lockid   in readlong
int numfamilies   in readint
if  numfamilies    0
throw new ioexception
this familymap
new treemap<byte  navigablemap<byte   long>> bytes bytes_comparator
for int i 0  i<numfamilies  i
byte  family   bytes readbytearray in
boolean hascolumns   in readboolean
navigablemap<byte   long> set   null
if hascolumns
int numcolumns   in readint
set   new treemap<byte   long> bytes bytes_comparator
for int j 0  j<numcolumns  j
byte  qualifier   bytes readbytearray in
set put qualifier  in readlong
else
throw new ioexception
this familymap put family  set
if  version > 1
this writetowal   in readboolean
public void write final dataoutput out
throws ioexception
out writebyte increment_version
bytes writebytearray out  this row
tr write out
out writelong this lockid
if  familymap size      0
throw new ioexception
out writeint familymap size
for map entry<byte   navigablemap<byte   long>> entry
familymap entryset
bytes writebytearray out  entry getkey
navigablemap<byte   long> columnset   entry getvalue
if columnset    null
throw new ioexception
else
out writeboolean true
out writeint columnset size
for map entry<byte   long> qualifier   columnset entryset
bytes writebytearray out  qualifier getkey
out writelong qualifier getvalue
out writeboolean writetowal
@override
public int compareto row i
return bytes compareto this getrow    i getrow