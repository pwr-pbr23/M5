/**
* copyright 2011 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase io hfile slab
import java nio bytebuffer
import java util concurrent concurrentlinkedqueue
import java util concurrent linkedblockingqueue
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop hbase util classsize
import org apache hadoop hbase util directmemoryutils
import com google common base preconditions
/**
* slab is a class which is designed to allocate blocks of a certain size.
* constructor creates a number of directbytebuffers and slices them into the
* requisite size, then puts them all in a buffer.
**/
class slab implements org apache hadoop hbase io heapsize
static final log log   logfactory getlog slab class
/** this is where our items, or blocks of the slab, are stored. */
private linkedblockingqueue<bytebuffer> buffers
/** this is where our slabs are stored */
private concurrentlinkedqueue<bytebuffer> slabs
private final int blocksize
private final int numblocks
private long heapsize
slab int blocksize  int numblocks
buffers   new linkedblockingqueue<bytebuffer>
slabs   new concurrentlinkedqueue<bytebuffer>
this blocksize   blocksize
this numblocks   numblocks
this heapsize   classsize estimatebase this getclass    false
int maxblocksperslab   integer max_value   blocksize
int maxslabsize   maxblocksperslab   blocksize
int numfullslabs   numblocks   maxblocksperslab
int partialslabsize    numblocks % maxblocksperslab    blocksize
for  int i   0  i < numfullslabs  i
allocateandslice maxslabsize  blocksize
if  partialslabsize > 0
allocateandslice partialslabsize  blocksize
private void allocateandslice int size  int slicesize
bytebuffer newslab   bytebuffer allocatedirect size
slabs add newslab
for  int j   0  j < newslab capacity    j    slicesize
newslab limit j   slicesize  position j
bytebuffer aslice   newslab slice
buffers add aslice
heapsize    classsize estimatebase aslice getclass    false
/*
* shutdown deallocates the memory for all the directbytebuffers. each
* directbytebuffer has a "cleaner" method, which is similar to a
* deconstructor in c++.
*/
void shutdown
for  bytebuffer aslab   slabs
try
directmemoryutils destroydirectbytebuffer aslab
catch  exception e
log warn    e
int getblocksize
return this blocksize
int getblockcapacity
return this numblocks
int getblocksremaining
return this buffers size
/*
* throws an exception if you try to allocate a
* bigger size than the allocator can handle. alloc will block until a buffer is available.
*/
bytebuffer alloc int buffersize  throws interruptedexception
int newcapacity   preconditions checkpositionindex buffersize  blocksize
bytebuffer returnedbuffer   buffers take
returnedbuffer clear   limit newcapacity
return returnedbuffer
void free bytebuffer tobefreed
preconditions checkargument tobefreed capacity      blocksize
buffers add tobefreed
@override
public long heapsize
return heapsize