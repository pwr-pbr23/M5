/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase regionserver wal
import java io datainput
import java io dataoutput
import java io ioexception
import org apache hadoop hbase keyvalue
import org apache hadoop hbase util bytes
import org apache hadoop io writableutils
/**
* compression class for {@link keyvalue}s written to the wal. this is not
* synchronized, so synchronization should be handled outside.
*
* class only compresses and uncompresses row keys, family names, and the
* qualifier. more may be added depending on use patterns.
*/
class keyvaluecompression
/**
* uncompresses a keyvalue from a datainput and returns it.
*
* @param in the datainput
* @param readcontext the compressioncontext to use.
* @return an uncompressed keyvalue
* @throws ioexception
*/
public static keyvalue readkv datainput in  compressioncontext readcontext
throws ioexception
int keylength   writableutils readvint in
int vlength   writableutils readvint in
int length   keyvalue keyvalue_infrastructure_size   keylength   vlength
byte backingarray   new byte
int pos   0
pos   bytes putint backingarray  pos  keylength
pos   bytes putint backingarray  pos  vlength
// the row
int elemlen   compressor uncompressintoarray backingarray
pos   bytes sizeof_short  in  readcontext rowdict
checklength elemlen  short max_value
pos   bytes putshort backingarray  pos   short elemlen
pos    elemlen
// family
elemlen   compressor uncompressintoarray backingarray
pos   bytes sizeof_byte  in  readcontext familydict
checklength elemlen  byte max_value
pos   bytes putbyte backingarray  pos   byte elemlen
pos    elemlen
// qualifier
elemlen   compressor uncompressintoarray backingarray  pos  in
readcontext qualifierdict
pos    elemlen
// the rest
in readfully backingarray  pos  length   pos
return new keyvalue backingarray
private static void checklength int len  int max  throws ioexception
if  len < 0    len > max
throw new ioexception
len
/**
* compresses and writes ourkv to out, a dataoutput.
*
* @param out the dataoutput
* @param keyval the kv to compress and write
* @param writecontext the compressioncontext to use.
* @throws ioexception
*/
public static void writekv final dataoutput out  keyvalue keyval
compressioncontext writecontext  throws ioexception
byte backingarray   keyval getbuffer
int offset   keyval getoffset
// we first write the keyvalue infrastructure as vints.
writableutils writevint out  keyval getkeylength
writableutils writevint out  keyval getvaluelength
// now we write the row key, as the row key is likely to be repeated
// we save space only if we attempt to compress elements with duplicates
compressor writecompressed keyval getbuffer    keyval getrowoffset
keyval getrowlength    out  writecontext rowdict
// now family, if it exists. if it doesn't, we write a 0 length array.
compressor writecompressed keyval getbuffer    keyval getfamilyoffset
keyval getfamilylength    out  writecontext familydict
// qualifier next
compressor writecompressed keyval getbuffer    keyval getqualifieroffset
keyval getqualifierlength    out
writecontext qualifierdict
// now we write the rest uncompressed
int pos   keyval gettimestampoffset
int remaininglength   keyval getlength     offset    pos
out write backingarray  pos  remaininglength