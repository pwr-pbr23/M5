/**
* copyright 2011 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase
import java util collection
import java util regex pattern
import org apache hadoop hbase util addressing
import org apache hadoop hbase util bytes
/**
* instance of an hbase servername.
* a server name is used uniquely identifying a server instance and is made
* of the combination of hostname, port, and startcode. the startcode
* distingushes restarted servers on same hostname and port (startcode is
* usually timestamp of server startup). the {@link #tostring()} format of
* servername is safe to use in the  filesystem and as znode name up in
* zookeeper.  its format is:
* <code>&lt;hostname> '{@link #servername_separator}' &lt;port> '{@link #servername_separator}' &lt;startcode></code>.
* for example, if hostname is <code>example.org</code>, port is <code>1234</code>,
* and the startcode for the regionserver is <code>1212121212</code>, then
* the {@link #tostring()} would be <code>example.org,1234,1212121212</code>.
*
* <p>you can obtain a versioned serialized form of this class by calling
* {@link #getversionedbytes()}.  to deserialize, call {@link #parseversionedservername(byte[])}
*
* <p>immutable.
*/
public class servername implements comparable<servername>
/**
* version for this class.
* its a short rather than a byte so i can for sure distinguish between this
* version of this class and the version previous to this which did not have
* a version.
*/
private static final short version   0
static final byte  version_bytes   bytes tobytes version
/**
* what to use if no startcode supplied.
*/
public static final int non_startcode    1
/**
* this character is used as separator between server hostname, port and
* startcode.
*/
public static final string servername_separator
public static pattern servername_pattern
pattern compile     servername_separator
servername_separator   addressing valid_port_regex
servername_separator   addressing valid_port_regex
/**
* what to use if server name is unknown.
*/
public static final string unknown_servername
private final string servername
private final string hostname
private final int port
private final long startcode
/**
* cached versioned bytes of this servername instance.
* @see #getversionedbytes()
*/
private byte  bytes
public servername final string hostname  final int port  final long startcode
this hostname   hostname
this port   port
this startcode   startcode
this servername   getservername hostname  port  startcode
public servername final string servername
this parsehostname servername   parseport servername
parsestartcode servername
public servername final string hostandport  final long startcode
this addressing parsehostname hostandport
addressing parseport hostandport   startcode
public static string parsehostname final string servername
if  servername    null    servername length   <  0
throw new illegalargumentexception
int index   servername indexof servername_separator
return servername substring 0  index
public static int parseport final string servername
string  split   servername split servername_separator
return integer parseint split
public static long parsestartcode final string servername
int index   servername lastindexof servername_separator
return long parselong servername substring index   1
@override
public string tostring
return getservername
/**
* @return {@link #getservername()} as bytes with a short-sized prefix with
* the servername#version of this class.
*/
public synchronized byte  getversionedbytes
if  this bytes    null
this bytes   bytes add version_bytes  bytes tobytes getservername
return this bytes
public string getservername
return servername
public string gethostname
return hostname
public int getport
return port
public long getstartcode
return startcode
/**
* @param hostname
* @param port
* @param startcode
* @return server name made of the concatenation of hostname, port and
* startcode formatted as <code>&lt;hostname> ',' &lt;port> ',' &lt;startcode></code>
*/
public static string getservername string hostname  int port  long startcode
final stringbuilder name   new stringbuilder hostname length     1   5   1   13
name append hostname
name append servername_separator
name append port
name append servername_separator
name append startcode
return name tostring
/**
* @param hostandport string in form of &lt;hostname> ':' &lt;port>
* @param startcode
* @return server name made of the concatenation of hostname, port and
* startcode formatted as <code>&lt;hostname> ',' &lt;port> ',' &lt;startcode></code>
*/
public static string getservername final string hostandport
final long startcode
int index   hostandport indexof
if  index <  0  throw new illegalargumentexception
return getservername hostandport substring 0  index
integer parseint hostandport substring index   1    startcode
/**
* @return hostname and port formatted as described at
* {@link addressing#createhostandportstr(string, int)}
*/
public string gethostandport
return addressing createhostandportstr this hostname  this port
/**
* @param servername servername in form specified by {@link #getservername()}
* @return the server start code parsed from <code>servername</code>
*/
public static long getserverstartcodefromservername final string servername
int index   servername lastindexof servername_separator
return long parselong servername substring index   1
/**
* utility method to excise the start code from a server name
* @param inservername full server name
* @return server name less its start code
*/
public static string getservernamelessstartcode string inservername
if  inservername    null    inservername length   > 0
int index   inservername lastindexof servername_separator
if  index > 0
return inservername substring 0  index
return inservername
@override
public int compareto servername other
int compare   this gethostname   tolowercase
compareto other gethostname   tolowercase
if  compare    0  return compare
compare   this getport     other getport
if  compare    0  return compare
return  int  this getstartcode     other getstartcode
@override
public int hashcode
return getservername   hashcode
@override
public boolean equals object o
if  this    o  return true
if  o    null  return false
if    o instanceof servername   return false
return this compareto  servername o     0
/**
* @return servername with matching hostname and port.
*/
public static servername findserverwithsamehostnameport final collection<servername> names
final servername servername
for  servername sn  names
if  issamehostnameandport servername  sn   return sn
return null
/**
* @param left
* @param right
* @return true if <code>other</code> has same hostname and port.
*/
public static boolean issamehostnameandport final servername left
final servername right
if  left    null  return false
if  right    null  return false
return left gethostname   equals right gethostname
left getport      right getport
/**
* use this method instantiating a {@link servername} from bytes
* gotten from a call to {@link #getversionedbytes()}.  will take care of the
* case where bytes were written by an earlier version of hbase.
* @param versionedbytes pass bytes gotten from a call to {@link #getversionedbytes()}
* @return a servername instance.
* @see #getversionedbytes()
*/
public static servername parseversionedservername final byte  versionedbytes
// version is a short.
short version   bytes toshort versionedbytes
if  version    version
int length   versionedbytes length   bytes sizeof_short
return new servername bytes tostring versionedbytes  bytes sizeof_short  length
// presume the bytes were written with an old version of hbase and that the
// bytes are actually a string of the form "'<hostname>' ':' '<port>'".
return new servername bytes tostring versionedbytes   non_startcode
/**
* @param str either an instance of {@link servername#tostring()} or a
* "'<hostname>' ':' '<port>'".
* @return a servername instance.
*/
public static servername parseservername final string str
return servername_pattern matcher str  matches  ? new servername str
new servername str  non_startcode