/*
* copyright 2011 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase util
import java io datainput
import java io ioexception
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop conf configuration
import org apache hadoop hbase keyvalue
import org apache hadoop hbase io hfile cacheconfig
import org apache hadoop hbase io hfile hfile
import org apache hadoop hbase regionserver storefile
import org apache hadoop hbase regionserver storefile bloomtype
/**
* handles bloom filter initialization based on configuration and serialized
* metadata in the reader and writer of {@link storefile}.
*/
public final class bloomfilterfactory
private static final log log
logfactory getlog bloomfilterfactory class getname
/** this class should not be instantiated. */
private bloomfilterfactory
/**
* specifies the target error rate to use when selecting the number of keys
* per bloom filter.
*/
public static final string io_storefile_bloom_error_rate
/**
* maximum folding factor allowed. the bloom filter will be shrunk by
* the factor of up to 2 ** this times if we oversize it initially.
*/
public static final string io_storefile_bloom_max_fold
/**
* for default (single-block) bloom filters this specifies the maximum number
* of keys.
*/
public static final string io_storefile_bloom_max_keys
/** master switch to enable bloom filters */
public static final string io_storefile_bloom_enabled
/** master switch to enable delete family bloom filters */
public static final string io_storefile_deletefamily_bloom_enabled
/**
* target bloom block size. bloom filter blocks of approximately this size
* are interleaved with data blocks.
*/
public static final string io_storefile_bloom_block_size
/** maximum number of times a bloom filter can be "folded" if oversized */
private static final int max_allowed_fold_factor   7
/**
* instantiates the correct bloom filter class based on the version provided
* in the meta block data.
*
* @param meta the byte array holding the bloom filter's metadata, including
*          version information
* @param reader the {@link hfile} reader to use to lazily load bloom filter
*          blocks
* @return an instance of the correct type of bloom filter
* @throws illegalargumentexception
*/
public static bloomfilter
createfrommeta datainput meta  hfile reader reader
throws illegalargumentexception  ioexception
int version   meta readint
switch  version
case bytebloomfilter version
// this is only possible in a version 1 hfile. we are ignoring the
// passed comparator because raw byte comparators are always used
// in version 1 bloom filters.
return new bytebloomfilter meta
case compoundbloomfilterbase version
return new compoundbloomfilter meta  reader
default
throw new illegalargumentexception
version
/**
* @return true if general bloom (row or rowcol) filters are enabled in the
* given configuration
*/
public static boolean isgeneralbloomenabled configuration conf
return conf getboolean io_storefile_bloom_enabled  true
/**
* @return true if delete family bloom filters are enabled in the given configuration
*/
public static boolean isdeletefamilybloomenabled configuration conf
return conf getboolean io_storefile_deletefamily_bloom_enabled  true
/**
* @return the bloom filter error rate in the given configuration
*/
public static float geterrorrate configuration conf
return conf getfloat io_storefile_bloom_error_rate   float  0 01
/**
* @return the value for bloom filter max fold in the given configuration
*/
public static int getmaxfold configuration conf
return conf getint io_storefile_bloom_max_fold  max_allowed_fold_factor
/** @return the compound bloom filter block size from the configuration */
public static int getbloomblocksize configuration conf
return conf getint io_storefile_bloom_block_size  128   1024
/**
* @return max key for the bloom filter from the configuration
*/
public static int getmaxkeys configuration conf
return conf getint io_storefile_bloom_max_keys  128   1000   1000
/**
* creates a new general (row or rowcol) bloom filter at the time of
* {@link org.apache.hadoop.hbase.regionserver.storefile} writing.
*
* @param conf
* @param cacheconf
* @param bloomtype
* @param maxkeys an estimate of the number of keys we expect to insert.
*        irrelevant if compound bloom filters are enabled.
* @param writer the hfile writer
* @return the new bloom filter, or null in case bloom filters are disabled
*         or when failed to create one.
*/
public static bloomfilterwriter creategeneralbloomatwrite configuration conf
cacheconfig cacheconf  bloomtype bloomtype  int maxkeys
hfile writer writer
if   isgeneralbloomenabled conf
log trace
writer getpath
conf    null ?
return null
else if  bloomtype    bloomtype none
log trace
return null
float err   geterrorrate conf
// in case of row/column bloom filter lookups, each lookup is an or if two
// separate lookups. therefore, if each lookup's false positive rate is p,
// the resulting false positive rate is err = 1 - (1 - p)^2, and
// p = 1 - sqrt(1 - err).
if  bloomtype    bloomtype rowcol
err    float   1   math sqrt 1   err
int maxfold   conf getint io_storefile_bloom_max_fold
max_allowed_fold_factor
// do we support compound bloom filters?
if  hfile getformatversion conf  > hfile min_format_version
// in case of compound bloom filters we ignore the maxkeys hint.
compoundbloomfilterwriter bloomwriter   new compoundbloomfilterwriter
getbloomblocksize conf   err  hash gethashtype conf   maxfold
cacheconf shouldcachebloomsonwrite    bloomtype    bloomtype rowcol
? keyvalue key_comparator   bytes bytes_rawcomparator
writer addinlineblockwriter bloomwriter
return bloomwriter
else
// a single-block bloom filter. only used when testing hfile format
// version 1.
int toobig   conf getint io_storefile_bloom_max_keys
128   1000   1000
if  maxkeys <  0
log warn     maxkeys
return null
else if  maxkeys < toobig
bloomfilterwriter bloom   new bytebloomfilter  int  maxkeys  err
hash gethashtype conf   maxfold
bloom allocbloom
return bloom
else
log debug
maxkeys
return null
/**
* creates a new delete family bloom filter at the time of
* {@link org.apache.hadoop.hbase.regionserver.storefile} writing.
* @param conf
* @param cacheconf
* @param maxkeys an estimate of the number of keys we expect to insert.
*        irrelevant if compound bloom filters are enabled.
* @param writer the hfile writer
* @return the new bloom filter, or null in case bloom filters are disabled
*         or when failed to create one.
*/
public static bloomfilterwriter createdeletebloomatwrite configuration conf
cacheconfig cacheconf  int maxkeys  hfile writer writer
if   isdeletefamilybloomenabled conf
log info
writer getpath
conf    null ?
return null
float err   geterrorrate conf
if  hfile getformatversion conf  > hfile min_format_version
int maxfold   getmaxfold conf
// in case of compound bloom filters we ignore the maxkeys hint.
compoundbloomfilterwriter bloomwriter   new compoundbloomfilterwriter
getbloomblocksize conf   err  hash gethashtype conf
maxfold
cacheconf shouldcachebloomsonwrite    bytes bytes_rawcomparator
writer addinlineblockwriter bloomwriter
return bloomwriter
else
log info
return null