/**
* copyright 2009 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase io hfile
import com google common collect minmaxpriorityqueue
import org apache hadoop hbase io heapsize
/**
* a memory-bound queue that will grow until an element brings
* total size >= maxsize.  from then on, only entries that are sorted larger
* than the smallest current entry will be inserted/replaced.
*
* <p>use this when you want to find the largest elements (according to their
* ordering, not their heap size) that consume as close to the specified
* maxsize as possible.  default behavior is to grow just above rather than
* just below specified max.
*
* <p>object used in this queue must implement {@link heapsize} as well as
* {@link comparable}.
*/
public class cachedblockqueue implements heapsize
private minmaxpriorityqueue<cachedblock> queue
private long heapsize
private long maxsize
/**
* @param maxsize the target size of elements in the queue
* @param blocksize expected average size of blocks
*/
public cachedblockqueue long maxsize  long blocksize
int initialsize    int  maxsize   blocksize
if initialsize    0  initialsize
queue   minmaxpriorityqueue expectedsize initialsize  create
heapsize   0
this maxsize   maxsize
/**
* attempt to add the specified cached block to this queue.
*
* <p>if the queue is smaller than the max size, or if the specified element
* is ordered before the smallest element in the queue, the element will be
* added to the queue.  otherwise, there is no side effect of this call.
* @param cb block to try to add to the queue
*/
public void add cachedblock cb
if heapsize < maxsize
queue add cb
heapsize    cb heapsize
else
cachedblock head   queue peek
if cb compareto head  > 0
heapsize    cb heapsize
heapsize    head heapsize
if heapsize > maxsize
queue poll
else
heapsize    head heapsize
queue add cb
/**
* @return the next element in this queue, or {@code null} if the queue is
* empty.
*/
public cachedblock poll
return queue poll
/**
* @return the last element in this queue, or {@code null} if the queue is
* empty.
*/
public cachedblock polllast
return queue polllast
/**
* total size of all elements in this queue.
* @return size of all elements currently in queue, in bytes
*/
public long heapsize
return heapsize