/**
* copyright 2011 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase filter
import org apache hadoop hbase ipc hregioninterface
import org apache hadoop hbase util bytes
import java nio bytebuffer
import java util hashmap
import org apache hadoop hbase filter
/**
* parseconstants holds a bunch of constants related to parsing filter strings
* used by {@link parsefilter}
*/
public final class parseconstants
/**
* ascii code for lparen
*/
public static final int lparen
/**
* ascii code for rparen
*/
public static final int rparen
/**
* ascii code for whitespace
*/
public static final int whitespace
/**
* ascii code for tab
*/
public static final int tab
/**
* ascii code for 'a'
*/
public static final int a
/**
* ascii code for 'n'
*/
public static final int n
/**
* ascii code for 'd'
*/
public static final int d
/**
* ascii code for 'o'
*/
public static final int o
/**
* ascii code for 'r'
*/
public static final int r
/**
* ascii code for 's'
*/
public static final int s
/**
* ascii code for 'k'
*/
public static final int k
/**
* ascii code for 'i'
*/
public static final int i
/**
* ascii code for 'p'
*/
public static final int p
/**
* skip array
*/
public static final byte  skip_array   new byte
public static final bytebuffer skip_buffer   bytebuffer wrap skip_array
/**
* ascii code for 'w'
*/
public static final int w
/**
* ascii code for 'h'
*/
public static final int h
/**
* ascii code for 'l'
*/
public static final int l
/**
* ascii code for 'e'
*/
public static final int e
/**
* while array
*/
public static final byte  while_array   new byte
public static final bytebuffer while_buffer   bytebuffer wrap while_array
/**
* or array
*/
public static final byte  or_array   new byte
public static final bytebuffer or_buffer   bytebuffer wrap or_array
/**
* and array
*/
public static final byte  and_array   new byte
public static final bytebuffer and_buffer   bytebuffer wrap and_array
/**
* ascii code for backslash
*/
public static final int backslash
/**
* ascii code for a single quote
*/
public static final int single_quote
/**
* ascii code for a comma
*/
public static final int comma
/**
* less_than array
*/
public static final byte  less_than_array   new byte
public static final bytebuffer less_than_buffer   bytebuffer wrap less_than_array
/**
* less_than_or_equal_to array
*/
public static final byte  less_than_or_equal_to_array   new byte
public static final bytebuffer less_than_or_equal_to_buffer
bytebuffer wrap less_than_or_equal_to_array
/**
* greater_than array
*/
public static final byte  greater_than_array   new byte
public static final bytebuffer greater_than_buffer   bytebuffer wrap greater_than_array
/**
* greater_than_or_equal_to array
*/
public static final byte  greater_than_or_equal_to_array   new byte
public static final bytebuffer greater_than_or_equal_to_buffer
bytebuffer wrap greater_than_or_equal_to_array
/**
* equal_to array
*/
public static final byte  equal_to_array   new byte
public static final bytebuffer equal_to_buffer   bytebuffer wrap equal_to_array
/**
* not_equal_to array
*/
public static final byte  not_equal_to_array   new byte
public static final bytebuffer not_equal_to_buffer   bytebuffer wrap not_equal_to_array
/**
* ascii code for equal to (=)
*/
public static final int equal_to
/**
* and byte array
*/
public static final byte  and   new byte
/**
* or byte array
*/
public static final byte  or   new byte
/**
* lparen array
*/
public static final byte  lparen_array   new byte
public static final bytebuffer lparen_buffer   bytebuffer wrap lparen_array
/**
* ascii code for colon (:)
*/
public static final int colon
/**
* ascii code for zero
*/
public static final int zero
/**
* ascii code foe nine
*/
public static final int nine
/**
* binarytype byte array
*/
public static final byte  binarytype   new byte
/**
* binaryprefixtype byte array
*/
public static final byte  binaryprefixtype   new byte
/**
* regexstringtype byte array
*/
public static final byte  regexstringtype   new byte
/**
* substringtype byte array
*/
public static final byte  substringtype   new byte
/**
* ascii for minus sign
*/
public static final int minus_sign
/**
* package containing filters
*/
public static final string filter_package