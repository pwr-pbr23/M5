/**
* copyright 2010 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase zookeeper
import java io ioexception
import java util arraylist
import java util hashset
import java util list
import java util set
import java util concurrent copyonwritearraylist
import java util concurrent countdownlatch
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop conf configuration
import org apache hadoop hbase abortable
import org apache hadoop hbase hconstants
import org apache hadoop hbase zookeeperconnectionexception
import org apache hadoop hbase util threads
import org apache zookeeper keeperexception
import org apache zookeeper watchedevent
import org apache zookeeper watcher
import org apache zookeeper zoodefs
import org apache zookeeper data acl
/**
* acts as the single zookeeper watcher.  one instance of this is instantiated
* for each master, regionserver, and client process.
*
* <p>this is the only class that implements {@link watcher}.  other internal
* classes which need to be notified of zookeeper events must register with
* the local instance of this watcher via {@link #registerlistener}.
*
* <p>this class also holds and manages the connection to zookeeper.  code to
* deal with connection related events and exceptions are handled here.
*/
public class zookeeperwatcher implements watcher  abortable
private static final log log   logfactory getlog zookeeperwatcher class
// identifier for this watcher (for logging only).  it is made of the prefix
// passed on construction and the zookeeper sessionid.
private string identifier
// zookeeper quorum
private string quorum
// zookeeper connection
private recoverablezookeeper recoverablezookeeper
// abortable in case of zk failure
private abortable abortable
// listeners to be notified
private final list<zookeeperlistener> listeners
new copyonwritearraylist<zookeeperlistener>
// used by zkutil:waitforzkconnectionifauthenticating to wait for sasl
// negotiation to complete
public countdownlatch sasllatch   new countdownlatch 1
// set of unassigned nodes watched
private set<string> unassignednodes   new hashset<string>
// node names
// base znode for this cluster
public string baseznode
// znode containing location of server hosting root region
public string rootserverznode
// znode containing ephemeral nodes of the regionservers
public string rsznode
// znode containing ephemeral nodes of the draining regionservers
public string drainingznode
// znode of currently active master
public string masteraddressznode
// znode of this master in backup master directory, if not the active master
public string backupmasteraddressesznode
// znode containing the current cluster state
public string clusterstateznode
// znode used for region transitioning and assignment
public string assignmentznode
// znode used for table disabling/enabling
public string tableznode
// znode containing the unique cluster id
public string clusteridznode
// znode used for log splitting work assignment
public string splitlogznode
// certain zookeeper nodes need to be world-readable
public static final arraylist<acl> creator_all_and_world_readable
new arraylist<acl>
add new acl zoodefs perms read zoodefs ids anyone_id_unsafe
add new acl zoodefs perms all zoodefs ids auth_ids
private final configuration conf
private final exception constructorcaller
/**
* instantiate a zookeeper connection and watcher.
* @param descriptor descriptive string that is added to zookeeper sessionid
* and used as identifier for this instance.
* @throws ioexception
* @throws zookeeperconnectionexception
*/
public zookeeperwatcher configuration conf  string descriptor
abortable abortable  throws zookeeperconnectionexception  ioexception
this conf  descriptor  abortable  false
/**
* instantiate a zookeeper connection and watcher.
* @param descriptor descriptive string that is added to zookeeper sessionid
* and used as identifier for this instance.
* @throws ioexception
* @throws zookeeperconnectionexception
*/
public zookeeperwatcher configuration conf  string descriptor
abortable abortable  boolean cancreatebaseznode
throws ioexception  zookeeperconnectionexception
this conf   conf
// capture a stack trace now.  will print it out later if problem so we can
// distingush amongst the myriad zkws.
try
throw new exception
catch  exception e
this constructorcaller   e
this quorum   zkconfig getzkquorumserversstring conf
// identifier will get the sessionid appended later below down when we
// handle the syncconnect event.
this identifier   descriptor
this abortable   abortable
setnodenames conf
this recoverablezookeeper   zkutil connect conf  quorum  this  descriptor
if  cancreatebaseznode
createbaseznodes
private void createbaseznodes   throws zookeeperconnectionexception
try
// create all the necessary "directories" of znodes
zkutil createandfailsilent this  baseznode
zkutil createandfailsilent this  assignmentznode
zkutil createandfailsilent this  rsznode
zkutil createandfailsilent this  drainingznode
zkutil createandfailsilent this  tableznode
zkutil createandfailsilent this  splitlogznode
zkutil createandfailsilent this  backupmasteraddressesznode
catch  keeperexception e
throw new zookeeperconnectionexception
prefix     e
private boolean isfinishedretryingrecoverable final long finished
return system currenttimemillis   < finished
@override
public string tostring
return this identifier
/**
* adds this instance's identifier as a prefix to the passed <code>str</code>
* @param str string to amend.
* @return a new string with this instance's identifier as prefix: e.g.
* if passed 'hello world', the returned string could be
*/
public string prefix final string str
return this tostring         str
/**
* set the local variable node names using the specified configuration.
*/
private void setnodenames configuration conf
baseznode   conf get hconstants zookeeper_znode_parent
hconstants default_zookeeper_znode_parent
rootserverznode   zkutil joinznode baseznode
conf get
rsznode   zkutil joinznode baseznode
conf get
drainingznode   zkutil joinznode baseznode
conf get
masteraddressznode   zkutil joinznode baseznode
conf get
backupmasteraddressesznode   zkutil joinznode baseznode
conf get
clusterstateznode   zkutil joinznode baseznode
conf get
assignmentznode   zkutil joinznode baseznode
conf get
tableznode   zkutil joinznode baseznode
conf get
clusteridznode   zkutil joinznode baseznode
conf get
splitlogznode   zkutil joinznode baseznode
conf get    hconstants split_logdir_name
/**
* register the specified listener to receive zookeeper events.
* @param listener
*/
public void registerlistener zookeeperlistener listener
listeners add listener
/**
* register the specified listener to receive zookeeper events and add it as
* the first in the list of current listeners.
* @param listener
*/
public void registerlistenerfirst zookeeperlistener listener
listeners add 0  listener
/**
* get the connection to zookeeper.
* @return connection reference to zookeeper
*/
public recoverablezookeeper getrecoverablezookeeper
return recoverablezookeeper
/**
* get the quorum address of this instance.
* @return quorum string of this zookeeper connection instance
*/
public string getquorum
return quorum
/**
* method called from zookeeper for events and connection status.
* <p>
* valid events are passed along to listeners.  connection status changes
* are dealt with locally.
*/
@override
public void process watchedevent event
log debug prefix
event gettype
event getstate
event getpath
switch event gettype
// if event type is none, this is a connection status change
case none
connectionevent event
break
// otherwise pass along to the listeners
case nodecreated
for zookeeperlistener listener   listeners
listener nodecreated event getpath
break
case nodedeleted
for zookeeperlistener listener   listeners
listener nodedeleted event getpath
break
case nodedatachanged
for zookeeperlistener listener   listeners
listener nodedatachanged event getpath
break
case nodechildrenchanged
for zookeeperlistener listener   listeners
listener nodechildrenchanged event getpath
break
// connection management
/**
* called when there is a connection-related event via the watcher callback.
* <p>
* if disconnected or expired, this should shutdown the cluster. but, since
* we send a keeperexception.sessionexpiredexception along with the abort
* call, it's possible for the abortable to catch it and try to create a new
* session with zookeeper. this is what the client does in hcm.
* <p>
* @param event
*/
private void connectionevent watchedevent event
switch event getstate
case syncconnected
// now, this callback can be invoked before the this.zookeeper is set.
// wait a little while.
long finished   system currenttimemillis
this conf getlong    2000
while  system currenttimemillis   < finished
threads sleep 1
if  this recoverablezookeeper    null  break
if  this recoverablezookeeper    null
log error
this constructorcaller
throw new nullpointerexception
this identifier   this identifier
long tohexstring this recoverablezookeeper getsessionid
// update our identifier.  otherwise ignore.
log debug this identifier
break
case saslauthenticated
if  zkutil issecurezookeeper this conf
// we are authenticated, clients can proceed.
sasllatch countdown
break
case authfailed
if  zkutil issecurezookeeper this conf
// we could not be authenticated, but clients should proceed anyway.
// only access to znodes that require sasl authentication will be
// denied. the client may never need to access them.
sasllatch countdown
break
// abort the server if disconnected or expired
case disconnected
log debug prefix
break
case expired
if  zkutil issecurezookeeper this conf
// we consider expired equivalent to authfailed for this
// connection. authentication is never going to complete. the
// client should proceed to do cleanup.
sasllatch countdown
string msg   prefix this identifier
// todo: one thought is to add call to zookeeperlistener so say,
// zookeepernodetracker can zero out its data values.
if  this abortable    null  this abortable abort msg
new keeperexception sessionexpiredexception
break
/**
* forces a synchronization of this zookeeper client connection.
* <p>
* executing this method before running other methods will ensure that the
* subsequent operations are up-to-date and consistent as of the time that
* the sync is complete.
* <p>
* this is used for compareandswap type operations where we need to read the
* data of an existing node and delete or transition that node, utilizing the
* previously read version and data.  we want to ensure that the version read
* is up-to-date from when we begin the operation.
*/
public void sync string path
this recoverablezookeeper sync path  null  null
/**
* handles keeperexceptions in client calls.
* <p>
* this may be temporary but for now this gives one place to deal with these.
* <p>
* todo: currently this method rethrows the exception to let the caller handle
* <p>
* @param ke
* @throws keeperexception
*/
public void keeperexception keeperexception ke
throws keeperexception
log error prefix     ke
throw ke
/**
* handles interruptedexceptions in client calls.
* <p>
* this may be temporary but for now this gives one place to deal with these.
* <p>
* todo: currently, this method does nothing.
*       is this ever expected to happen?  do we abort or can we let it run?
*       maybe this should be logged as warn?  it shouldn't happen?
* <p>
* @param ie
*/
public void interruptedexception interruptedexception ie
log debug prefix     ie
// at least preserver interrupt.
thread currentthread   interrupt
// no-op
/**
* close the connection to zookeeper.
* @throws interruptedexception
*/
public void close
try
if  recoverablezookeeper    null
recoverablezookeeper close
//        super.close();
catch  interruptedexception e
public configuration getconfiguration
return conf
@override
public void abort string why  throwable e
this abortable abort why  e
@override
public boolean isaborted
return this abortable isaborted