/**
* copyright 2007 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase
import java io ioexception
import java security privilegedexceptionaction
import java util arraylist
import java util collections
import java util list
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop conf configuration
import org apache hadoop hbase client hbaseadmin
import org apache hadoop hbase regionserver hregionserver
import org apache hadoop hbase security user
import org apache hadoop hbase util bytes
import org apache hadoop hbase util jvmclusterutil regionserverthread
import org apache hadoop hbase util threads
import java util concurrent copyonwritearraylist
import org apache hadoop hbase master hmaster
import org apache hadoop hbase util jvmclusterutil
/**
* this class creates a single process hbase cluster. one thread is created for
* a master and one per region server.
*
* call {@link #startup()} to start the cluster running and {@link #shutdown()}
* to close it all down. {@link #join} the cluster is you want to wait on
* shutdown completion.
*
* <p>runs master on port 60000 by default.  because we can't just kill the
* process -- not till hadoop-1700 gets fixed and even then.... -- we need to
* be able to find the master with a remote client to run shutdown.  to use a
* port other than 60000, set the hbase.master to a value of 'local:port':
* that is 'local', not 'localhost', and the port number the master should use
* instead of 60000.
*
*/
public class localhbasecluster
static final log log   logfactory getlog localhbasecluster class
private final list<jvmclusterutil masterthread> masterthreads
new copyonwritearraylist<jvmclusterutil masterthread>
private final list<jvmclusterutil regionserverthread> regionthreads
new copyonwritearraylist<jvmclusterutil regionserverthread>
private final static int default_no   1
/** local mode */
public static final string local
/** 'local:' */
public static final string local_colon   local
private final configuration conf
private final class<? extends hmaster> masterclass
private final class<? extends hregionserver> regionserverclass
/**
* constructor.
* @param conf
* @throws ioexception
*/
public localhbasecluster final configuration conf
throws ioexception
this conf  default_no
/**
* constructor.
* @param conf configuration to use.  post construction has the master's
* address.
* @param noregionservers count of regionservers to start.
* @throws ioexception
*/
public localhbasecluster final configuration conf  final int noregionservers
throws ioexception
this conf  1  noregionservers  getmasterimplementation conf
getregionserverimplementation conf
/**
* constructor.
* @param conf configuration to use.  post construction has the active master
* address.
* @param nomasters count of masters to start.
* @param noregionservers count of regionservers to start.
* @throws ioexception
*/
public localhbasecluster final configuration conf  final int nomasters
final int noregionservers
throws ioexception
this conf  nomasters  noregionservers  getmasterimplementation conf
getregionserverimplementation conf
@suppresswarnings
private static class<? extends hregionserver> getregionserverimplementation final configuration conf
return  class<? extends hregionserver> conf getclass hconstants region_server_impl
hregionserver class
@suppresswarnings
private static class<? extends hmaster> getmasterimplementation final configuration conf
return  class<? extends hmaster> conf getclass hconstants master_impl
hmaster class
/**
* constructor.
* @param conf configuration to use.  post construction has the master's
* address.
* @param nomasters count of masters to start.
* @param noregionservers count of regionservers to start.
* @param masterclass
* @param regionserverclass
* @throws ioexception
*/
@suppresswarnings
public localhbasecluster final configuration conf  final int nomasters
final int noregionservers  final class<? extends hmaster> masterclass
final class<? extends hregionserver> regionserverclass
throws ioexception
this conf   conf
// always have masters and regionservers come up on port '0' so we don't
// clash over default ports.
conf set hconstants master_port
conf set hconstants regionserver_port
// start the hmasters.
this masterclass
class<? extends hmaster> conf getclass hconstants master_impl
masterclass
for  int i   0  i < nomasters  i
addmaster new configuration conf   i
// start the hregionservers.
this regionserverclass
class<? extends hregionserver> conf getclass hconstants region_server_impl
regionserverclass
for  int i   0  i < noregionservers  i
addregionserver new configuration conf   i
public jvmclusterutil regionserverthread addregionserver
throws ioexception
return addregionserver new configuration conf   this regionthreads size
public jvmclusterutil regionserverthread addregionserver
configuration config  final int index
throws ioexception
// create each regionserver with its own configuration instance so each has
// its hconnection instance rather than share (see hbase_instances down in
// the guts of hconnectionmanager.
jvmclusterutil regionserverthread rst
jvmclusterutil createregionserverthread config
this regionserverclass  index
this regionthreads add rst
return rst
public jvmclusterutil regionserverthread addregionserver
final configuration config  final int index  user user
throws ioexception  interruptedexception
return user runas
new privilegedexceptionaction<jvmclusterutil regionserverthread>
public jvmclusterutil regionserverthread run   throws exception
return addregionserver config  index
public jvmclusterutil masterthread addmaster   throws ioexception
return addmaster new configuration conf   this masterthreads size
public jvmclusterutil masterthread addmaster configuration c  final int index
throws ioexception
// create each master with its own configuration instance so each has
// its hconnection instance rather than share (see hbase_instances down in
// the guts of hconnectionmanager.
jvmclusterutil masterthread mt
jvmclusterutil createmasterthread c
this masterclass  index
this masterthreads add mt
return mt
public jvmclusterutil masterthread addmaster
final configuration c  final int index  user user
throws ioexception  interruptedexception
return user runas
new privilegedexceptionaction<jvmclusterutil masterthread>
public jvmclusterutil masterthread run   throws exception
return addmaster c  index
/**
* @param servernumber
* @return region server
*/
public hregionserver getregionserver int servernumber
return regionthreads get servernumber  getregionserver
/**
* @return read-only list of region server threads.
*/
public list<jvmclusterutil regionserverthread> getregionservers
return collections unmodifiablelist this regionthreads
/**
* @return list of running servers (some servers may have been killed or
* aborted during lifetime of cluster; these servers are not included in this
* list).
*/
public list<jvmclusterutil regionserverthread> getliveregionservers
list<jvmclusterutil regionserverthread> liveservers
new arraylist<jvmclusterutil regionserverthread>
list<regionserverthread> list   getregionservers
for  jvmclusterutil regionserverthread rst  list
if  rst isalive    liveservers add rst
else log info     rst getname
return liveservers
/**
* wait for the specified region server to stop
* removes this thread from list of running threads.
* @param servernumber
* @return name of region server that just went down.
*/
public string waitonregionserver int servernumber
jvmclusterutil regionserverthread regionserverthread
this regionthreads remove servernumber
while  regionserverthread isalive
try
log info
regionserverthread getregionserver   tostring
regionserverthread join
catch  interruptedexception e
e printstacktrace
return regionserverthread getname
/**
* wait for the specified region server to stop
* removes this thread from list of running threads.
* @param rst
* @return name of region server that just went down.
*/
public string waitonregionserver jvmclusterutil regionserverthread rst
while  rst isalive
try
log info
rst getregionserver   tostring
rst join
catch  interruptedexception e
e printstacktrace
for  int i 0 i<regionthreads size   i
if  regionthreads get i     rst
regionthreads remove i
break
return rst getname
/**
* @param servernumber
* @return the hmaster thread
*/
public hmaster getmaster int servernumber
return masterthreads get servernumber  getmaster
/**
* gets the current active master, if available.  if no active master, returns
* null.
* @return the hmaster for the active master
*/
public hmaster getactivemaster
for  jvmclusterutil masterthread mt   masterthreads
if  mt getmaster   isactivemaster
// ensure that the current active master is not stopped.
// we don't want to return a stopping master as an active master.
if  mt getmaster   isactivemaster        mt getmaster   isstopped
return mt getmaster
return null
/**
* @return read-only list of master threads.
*/
public list<jvmclusterutil masterthread> getmasters
return collections unmodifiablelist this masterthreads
/**
* @return list of running master servers (some servers may have been killed
* or aborted during lifetime of cluster; these servers are not included in
* this list).
*/
public list<jvmclusterutil masterthread> getlivemasters
list<jvmclusterutil masterthread> liveservers
new arraylist<jvmclusterutil masterthread>
list<jvmclusterutil masterthread> list   getmasters
for  jvmclusterutil masterthread mt  list
if  mt isalive
liveservers add mt
return liveservers
/**
* wait for the specified master to stop
* removes this thread from list of running threads.
* @param servernumber
* @return name of master that just went down.
*/
public string waitonmaster int servernumber
jvmclusterutil masterthread masterthread
this masterthreads remove servernumber
while  masterthread isalive
try
log info
masterthread getmaster   getservername   tostring
masterthread join
catch  interruptedexception e
e printstacktrace
return masterthread getname
/**
* wait for the specified master to stop
* removes this thread from list of running threads.
* @param masterthread
* @return name of master that just went down.
*/
public string waitonmaster jvmclusterutil masterthread masterthread
while  masterthread isalive
try
log info
masterthread getmaster   getservername   tostring
masterthread join
catch  interruptedexception e
e printstacktrace
for  int i 0 i<masterthreads size   i
if  masterthreads get i     masterthread
masterthreads remove i
break
return masterthread getname
/**
* wait for mini hbase cluster to shut down.
* presumes you've already called {@link #shutdown()}.
*/
public void join
if  this regionthreads    null
for thread t  this regionthreads
if  t isalive
try
threads threaddumpingisalive t
catch  interruptedexception e
log debug    e
if  this masterthreads    null
for  thread t   this masterthreads
if  t isalive
try
threads threaddumpingisalive t
catch  interruptedexception e
log debug    e
/**
* start the cluster.
*/
public void startup   throws ioexception
jvmclusterutil startup this masterthreads  this regionthreads
/**
* shut down the mini hbase cluster
*/
public void shutdown
jvmclusterutil shutdown this masterthreads  this regionthreads
/**
* @param c configuration to check.
* @return true if a 'local' address in hbase.master value.
*/
public static boolean islocal final configuration c
boolean mode   c getboolean hconstants cluster_distributed  hconstants default_cluster_distributed
return mode    hconstants cluster_is_local
/**
* test things basically work.
* @param args
* @throws ioexception
*/
public static void main string args  throws ioexception
configuration conf   hbaseconfiguration create
localhbasecluster cluster   new localhbasecluster conf
cluster startup
hbaseadmin admin   new hbaseadmin conf
htabledescriptor htd
new htabledescriptor bytes tobytes cluster getclass   getname
admin createtable htd
cluster shutdown