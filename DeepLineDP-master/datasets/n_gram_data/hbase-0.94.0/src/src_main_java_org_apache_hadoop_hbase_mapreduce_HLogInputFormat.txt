/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase mapreduce
import java io datainput
import java io dataoutput
import java io eofexception
import java io ioexception
import java util arraylist
import java util collections
import java util list
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop classification interfaceaudience
import org apache hadoop conf configuration
import org apache hadoop fs filestatus
import org apache hadoop fs filesystem
import org apache hadoop fs path
import org apache hadoop hbase regionserver wal hlog
import org apache hadoop hbase regionserver wal hlogkey
import org apache hadoop hbase regionserver wal waledit
import org apache hadoop io writable
import org apache hadoop mapreduce inputformat
import org apache hadoop mapreduce inputsplit
import org apache hadoop mapreduce jobcontext
import org apache hadoop mapreduce recordreader
import org apache hadoop mapreduce taskattemptcontext
/**
* simple {@link inputformat} for {@link hlog} files.
*/
@interfaceaudience public
public class hloginputformat extends inputformat<hlogkey  waledit>
private static log log   logfactory getlog hloginputformat class
public static string start_time_key
public static string end_time_key
/**
* {@link inputsplit} for {@link hlog} files. each split represent
* exactly one log file.
*/
static class hlogsplit extends inputsplit implements writable
private string logfilename
private long filesize
private long starttime
private long endtime
/** for serialization */
public hlogsplit
/**
* represent an hlogsplit, i.e. a single hlog file.
* start- and endtime are managed by the split, so that hlog files can be
* filtered before waledits are passed to the mapper(s).
* @param logfilename
* @param filesize
* @param starttime
* @param endtime
*/
public hlogsplit string logfilename  long filesize  long starttime  long endtime
this logfilename   logfilename
this filesize   filesize
this starttime   starttime
this endtime   endtime
@override
public long getlength   throws ioexception  interruptedexception
return filesize
@override
public string getlocations   throws ioexception  interruptedexception
// todo: find the data node with the most blocks for this hlog?
return new string
public string getlogfilename
return logfilename
public long getstarttime
return starttime
public long getendtime
return endtime
@override
public void readfields datainput in  throws ioexception
logfilename   in readutf
filesize   in readlong
starttime   in readlong
endtime   in readlong
@override
public void write dataoutput out  throws ioexception
out writeutf logfilename
out writelong filesize
out writelong starttime
out writelong endtime
@override
public string tostring
return logfilename       starttime       endtime       filesize
/**
* {@link recordreader} for an {@link hlog} file.
*/
static class hlogrecordreader extends recordreader<hlogkey  waledit>
private hlog reader reader   null
private hlog entry currententry   new hlog entry
private long starttime
private long endtime
@override
public void initialize inputsplit split  taskattemptcontext context
throws ioexception  interruptedexception
hlogsplit hsplit    hlogsplit split
path logfile   new path hsplit getlogfilename
configuration conf   context getconfiguration
log info   split
try
this reader   hlog getreader logfile getfilesystem conf   logfile  conf
catch  eofexception x
log info     logfile
this starttime   hsplit getstarttime
this endtime   hsplit getendtime
@override
public boolean nextkeyvalue   throws ioexception  interruptedexception
if  reader    null  return false
hlog entry temp
long i    1
do
// skip older entries
try
temp   reader next currententry
i
catch  eofexception x
log info
return false
while temp    null    temp getkey   getwritetime   < starttime
if  temp    null
if  i > 0  log info     i
log info
return false
else if  i > 0
log info     i       temp getkey   getwritetime
boolean res   temp getkey   getwritetime   <  endtime
if   res
log info     temp getkey   getwritetime
return res
@override
public hlogkey getcurrentkey   throws ioexception  interruptedexception
return currententry getkey
@override
public waledit getcurrentvalue   throws ioexception  interruptedexception
return currententry getedit
@override
public float getprogress   throws ioexception  interruptedexception
// n/a depends on total number of entries, which is unknown
return 0
@override
public void close   throws ioexception
log info
if  reader    null  this reader close
@override
public list<inputsplit> getsplits jobcontext context  throws ioexception
interruptedexception
configuration conf   context getconfiguration
path inputdir   new path conf get
long starttime   conf getlong start_time_key  long min_value
long endtime   conf getlong end_time_key  long max_value
filesystem fs   inputdir getfilesystem conf
list<filestatus> files   getfiles fs  inputdir  starttime  endtime
list<inputsplit> splits   new arraylist<inputsplit> files size
for  filestatus file   files
splits add new hlogsplit file getpath   tostring    file getlen    starttime  endtime
return splits
private list<filestatus> getfiles filesystem fs  path dir  long starttime  long endtime
throws ioexception
list<filestatus> result   new arraylist<filestatus>
log debug     dir tostring
filestatus files   fs liststatus dir
if  files    null  return collections emptylist
for  filestatus file   files
if  file isdir
// recurse into sub directories
result addall getfiles fs  file getpath    starttime  endtime
else
string name   file getpath   tostring
int idx   name lastindexof
if  idx > 0
try
long filestarttime   long parselong name substring idx 1
if  filestarttime <  endtime
log info     name
result add file
catch  numberformatexception x
idx   0
if  idx    0
log warn     name
return result
@override
public recordreader<hlogkey  waledit> createrecordreader inputsplit split
taskattemptcontext context  throws ioexception  interruptedexception
return new hlogrecordreader