/**
* copyright 2008 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase io hfile
import java lang ref referencequeue
import java lang ref softreference
import java util hashmap
import java util list
import java util map
import org apache hadoop conf configuration
/**
* simple one rfile soft reference cache.
*/
public class simpleblockcache implements blockcache
private static class ref extends softreference<cacheable>
public blockcachekey blockid
public ref blockcachekey blockid  cacheable block  referencequeue q
super block  q
this blockid   blockid
private map<blockcachekey ref> cache
new hashmap<blockcachekey ref>
private referencequeue q   new referencequeue
public int dumps   0
/**
* constructor
*/
public simpleblockcache
super
void processqueue
ref r
while    r    ref q poll       null
cache remove r blockid
dumps
/**
* @return the size
*/
public synchronized long size
processqueue
return cache size
public synchronized cacheable getblock blockcachekey cachekey  boolean caching
processqueue       clear out some crap
ref ref   cache get cachekey
if  ref    null
return null
return ref get
public synchronized void cacheblock blockcachekey cachekey  cacheable block
cache put cachekey  new ref cachekey  block  q
public synchronized void cacheblock blockcachekey cachekey  cacheable block
boolean inmemory
cache put cachekey  new ref cachekey  block  q
@override
public boolean evictblock blockcachekey cachekey
return cache remove cachekey     null
public void shutdown
// noop
@override
public cachestats getstats
// todo: implement this if we ever actually use this block cache
return null
@override
public long getfreesize
// todo: implement this if we ever actually use this block cache
return 0
@override
public long getcurrentsize
// todo: implement this if we ever actually use this block cache
return 0
@override
public long getevictedcount
// todo: implement this if we ever actually use this block cache
return 0
@override
public int evictblocksbyhfilename string string
throw new unsupportedoperationexception
@override
public list<blockcachecolumnfamilysummary> getblockcachecolumnfamilysummaries configuration conf
throw new unsupportedoperationexception
@override
public long getblockcount
// todo: implement this if we ever actually use this block cache
return 0