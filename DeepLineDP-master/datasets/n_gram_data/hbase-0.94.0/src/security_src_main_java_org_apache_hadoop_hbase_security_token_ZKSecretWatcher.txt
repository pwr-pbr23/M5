/*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase security token
import java io ioexception
import java util list
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop conf configuration
import org apache hadoop hbase util writables
import org apache hadoop hbase zookeeper zkutil
import org apache hadoop hbase zookeeper zookeeperlistener
import org apache hadoop hbase zookeeper zookeeperwatcher
import org apache zookeeper keeperexception
/**
* synchronizes token encryption keys across cluster nodes.
*/
public class zksecretwatcher extends zookeeperlistener
private static final string default_root_node
private static final string default_keys_parent
private static log log   logfactory getlog zksecretwatcher class
private authenticationtokensecretmanager secretmanager
private string basekeyznode
private string keysparentznode
public zksecretwatcher configuration conf
zookeeperwatcher watcher
authenticationtokensecretmanager secretmanager
super watcher
this secretmanager   secretmanager
string keyznodeparent   conf get    default_root_node
this basekeyznode   zkutil joinznode watcher baseznode  keyznodeparent
this keysparentznode   zkutil joinznode basekeyznode  default_keys_parent
public void start   throws keeperexception
watcher registerlistener this
// make sure the base node exists
zkutil createwithparents watcher  keysparentznode
if  zkutil watchandcheckexists watcher  keysparentznode
list<zkutil nodeanddata> nodes
zkutil getchilddataandwatchfornewchildren watcher  keysparentznode
refreshnodes nodes
@override
public void nodecreated string path
if  path equals keysparentznode
try
list<zkutil nodeanddata> nodes
zkutil getchilddataandwatchfornewchildren watcher  keysparentznode
refreshnodes nodes
catch  keeperexception ke
log fatal    ke
watcher abort   path  ke
@override
public void nodedeleted string path
if  keysparentznode equals zkutil getparent path
string keyid   zkutil getnodename path
try
integer id   new integer keyid
secretmanager removekey id
catch  numberformatexception nfe
log error   keyid    nfe
@override
public void nodedatachanged string path
if  keysparentznode equals zkutil getparent path
try
byte data   zkutil getdataandwatch watcher  path
if  data    null    data length    0
log debug   path
return
authenticationkey key    authenticationkey writables getwritable data
new authenticationkey
secretmanager addkey key
catch  keeperexception ke
log fatal    ke
watcher abort   path  ke
catch  ioexception ioe
log fatal    ioe
watcher abort   path  ioe
@override
public void nodechildrenchanged string path
if  path equals keysparentznode
// keys changed
try
list<zkutil nodeanddata> nodes
zkutil getchilddataandwatchfornewchildren watcher  keysparentznode
refreshnodes nodes
catch  keeperexception ke
log fatal    ke
watcher abort    ke
public string getrootkeyznode
return basekeyznode
private void refreshnodes list<zkutil nodeanddata> nodes
for  zkutil nodeanddata n   nodes
string path   n getnode
string keyid   zkutil getnodename path
try
byte data   n getdata
if  data    null    data length    0
log debug   path
continue
authenticationkey key    authenticationkey writables getwritable
data  new authenticationkey
secretmanager addkey key
catch  ioexception ioe
log fatal     keyid
ioe
watcher abort   path  ioe
private string getkeynode int keyid
return zkutil joinznode keysparentznode  integer tostring keyid
public void removekeyfromzk authenticationkey key
string keyznode   getkeynode key getkeyid
try
zkutil deletenode watcher  keyznode
catch  keeperexception nonodeexception nne
log error   keyznode   key getkeyid    nne
catch  keeperexception ke
log fatal   keyznode   key getkeyid
ke
watcher abort   keyznode
key getkeyid    ke
public void addkeytozk authenticationkey key
string keyznode   getkeynode key getkeyid
try
byte keydata   writables getbytes key
// todo: is there any point in retrying beyond what zk client does?
zkutil createsetdata watcher  keyznode  keydata
catch  keeperexception ke
log fatal   key getkeyid
keyznode  ke
watcher abort
key getkeyid      ke
catch  ioexception ioe
// this can only happen from an error serializing the key
watcher abort   key getkeyid    ioe
public void updatekeyinzk authenticationkey key
string keyznode   getkeynode key getkeyid
try
byte keydata   writables getbytes key
try
zkutil updateexistingnodedata watcher  keyznode  keydata   1
catch  keeperexception nonodeexception ne
// node was somehow removed, try adding it back
zkutil createsetdata watcher  keyznode  keydata
catch  keeperexception ke
log fatal   key getkeyid
keyznode
watcher abort
key getkeyid      ke
catch  ioexception ioe
// this can only happen from an error serializing the key
watcher abort   key getkeyid    ioe