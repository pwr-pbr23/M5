/*
* copyright 2010 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance                                                                       with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase filter
import org apache hadoop hbase keyvalue
import java util list
import java util arraylist
/**
* abstract base class to help you implement new filters.  common "ignore" or noop type
* methods can go here, helping to reduce boiler plate in an ever-expanding filter
* library.
*
* if you could instantiate filterbase, it would end up being a "null" filter -
* that is one that never filters anything.
*/
public abstract class filterbase implements filter
/**
* filters that are purely stateless and do nothing in their reset() methods can inherit
* this null/empty implementation.
*
* @inheritdoc
*/
@override
public void reset
/**
* filters that do not filter by row key can inherit this implementation that
* never filters anything. (ie: returns false).
*
* @inheritdoc
*/
@override
public boolean filterrowkey byte  buffer  int offset  int length
return false
/**
* filters that never filter all remaining can inherit this implementation that
* never stops the filter early.
*
* @inheritdoc
*/
@override
public boolean filterallremaining
return false
/**
* filters that dont filter by key value can inherit this implementation that
* includes all keyvalues.
*
* @inheritdoc
*/
@override
public returncode filterkeyvalue keyvalue ignored
return returncode include
/**
* by default no transformation takes place
*
* @inheritdoc
*/
@override
public keyvalue transform keyvalue v
return v
/**
* filters that never filter by modifying the returned list of keyvalues can
* inherit this implementation that does nothing.
*
* @inheritdoc
*/
@override
public void filterrow list<keyvalue> ignored
/**
* fitlers that never filter by modifying the returned list of keyvalues can
* inherit this implementation that does nothing.
*
* @inheritdoc
*/
@override
public boolean hasfilterrow
return false
/**
* filters that never filter by rows based on previously gathered state from
* {@link #filterkeyvalue(keyvalue)} can inherit this implementation that
* never filters a row.
*
* @inheritdoc
*/
@override
public boolean filterrow
return false
/**
* filters that are not sure which key must be next seeked to, can inherit
* this implementation that, by default, returns a null keyvalue.
*
* @inheritdoc
*/
public keyvalue getnextkeyhint keyvalue currentkv
return null
/**
* given the filter's arguments it constructs the filter
* <p>
* @param filterarguments the filter's arguments
* @return constructed filter object
*/
public static filter createfilterfromarguments arraylist<byte > filterarguments
throw new illegalargumentexception
/**
* return filter's info for debugging and logging purpose.
*/
public string tostring
return this getclass   getsimplename