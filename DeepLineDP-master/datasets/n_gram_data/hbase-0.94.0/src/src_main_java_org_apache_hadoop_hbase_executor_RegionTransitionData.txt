/**
* copyright 2010 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase executor
import java io datainput
import java io dataoutput
import java io ioexception
import org apache hadoop hbase servername
import org apache hadoop hbase executor eventhandler eventtype
import org apache hadoop hbase util bytes
import org apache hadoop hbase util writables
import org apache hadoop io writable
/**
* data serialized into zookeeper for region transitions.
*/
public class regiontransitiondata implements writable
/**
* type of transition event (offline, opening, opened, closing, closed).
* required.
*/
private eventtype eventtype
/** region being transitioned.  required. */
private byte  regionname
/** server event originated from.  optional. */
private servername origin
/** time the event was created.  required but automatically set. */
private long stamp
private byte  payload
/**
* writable constructor.  do not use directly.
*/
public regiontransitiondata
/**
* construct data for a new region transition event with the specified event
* type and region name.
*
* <p>used when the server name is not known (the master is setting it).  this
* happens during cluster startup or during failure scenarios.  when
* processing a failed regionserver, the master assigns the regions from that
* server to other servers though the region was never 'closed'.  during
* master failover, the new master may have regions stuck in transition
* without a destination so may have to set regions offline and generate a new
* assignment.
*
* <p>since only the master uses this constructor, the type should always be
* {@link eventtype#m_zk_region_offline}.
*
* @param eventtype type of event
* @param regionname name of region as per <code>hregioninfo#getregionname()</code>
*/
public regiontransitiondata eventtype eventtype  byte  regionname
this eventtype  regionname  null
/**
* construct data for a new region transition event with the specified event
* type, region name, and server name.
*
* <p>used when the server name is known (a regionserver is setting it).
*
* <p>valid types for this constructor are {@link eventtype#m_zk_region_closing},
* {@link eventtype#rs_zk_region_closed}, {@link eventtype#rs_zk_region_opening},
* {@link eventtype#rs_zk_region_splitting},
* and {@link eventtype#rs_zk_region_opened}.
*
* @param eventtype type of event
* @param regionname name of region as per <code>hregioninfo#getregionname()</code>
* @param origin originating {@link servername}
*/
public regiontransitiondata eventtype eventtype  byte  regionname
final servername origin
this eventtype  regionname  origin  null
/**
* construct data for a new region transition event with the specified event
* type, region name, and server name.
*
* <p>used when the server name is known (a regionserver is setting it).
*
* <p>valid types for this constructor are {@link eventtype#rs_zk_region_split}
* since split is only type that currently carries a payload.
*
* @param eventtype type of event
* @param regionname name of region as per <code>hregioninfo#getregionname()</code>
* @param servername originating {@link servername}
* @param payload payload examples include the daughters involved in a
* {@link eventtype#rs_zk_region_split}. can be null
*/
public regiontransitiondata eventtype eventtype  byte  regionname
final servername servername  final byte  payload
this eventtype   eventtype
this stamp   system currenttimemillis
this regionname   regionname
this origin   servername
this payload   payload
/**
* gets the type of region transition event.
*
* <p>one of:
* <ul>
* <li>{@link eventtype#m_zk_region_offline}
* <li>{@link eventtype#m_zk_region_closing}
* <li>{@link eventtype#rs_zk_region_closed}
* <li>{@link eventtype#rs_zk_region_opening}
* <li>{@link eventtype#rs_zk_region_opened}
* <li>{@link eventtype#rs_zk_region_splitting}
* <li>{@link eventtype#rs_zk_region_split}
* </ul>
* @return type of region transition event
*/
public eventtype geteventtype
return eventtype
/**
* gets the name of the region being transitioned.
*
* <p>region name is required so this never returns null.
* @return region name, the result of a call to <code>hregioninfo#getregionname()</code>
*/
public byte  getregionname
return regionname
/**
* gets the server the event originated from.  if null, this event originated
* from the master.
*
* @return server name of originating regionserver, or null if from master
*/
public servername getorigin
return origin
/**
* gets the timestamp when this event was created.
*
* @return stamp event was created
*/
public long getstamp
return stamp
/**
* @return payload if any.
*/
public byte  getpayload
return this payload
@override
public void readfields datainput in  throws ioexception
// the event type byte
eventtype   eventtype values
// the timestamp
stamp   in readlong
// the encoded name of the region being transitioned
regionname   bytes readbytearray in
// remaining fields are optional so prefixed with boolean
// the name of the regionserver sending the data
if  in readboolean
byte  versionedbytes   bytes readbytearray in
this origin   servername parseversionedservername versionedbytes
if  in readboolean
this payload   bytes readbytearray in
@override
public void write dataoutput out  throws ioexception
out writeshort eventtype ordinal
out writelong system currenttimemillis
bytes writebytearray out  regionname
// remaining fields are optional so prefixed with boolean
out writeboolean this origin    null
if  this origin    null
bytes writebytearray out  this origin getversionedbytes
out writeboolean this payload    null
if  this payload    null
bytes writebytearray out  this payload
/**
* get the bytes for this instance.  throws a {@link runtimeexception} if
* there is an error deserializing this instance because it represents a code
* bug.
* @return binary representation of this instance
*/
public byte  getbytes
try
return writables getbytes this
catch ioexception e
throw new runtimeexception e
/**
* get an instance from bytes.  throws a {@link runtimeexception} if
* there is an error serializing this instance from bytes because it
* represents a code bug.
* @param bytes binary representation of this instance
* @return instance of this class
*/
public static regiontransitiondata frombytes byte  bytes
try
regiontransitiondata data   new regiontransitiondata
writables getwritable bytes  data
return data
catch ioexception e
throw new runtimeexception e
@override
public string tostring
return     bytes tostringbinary regionname        this origin
eventtype