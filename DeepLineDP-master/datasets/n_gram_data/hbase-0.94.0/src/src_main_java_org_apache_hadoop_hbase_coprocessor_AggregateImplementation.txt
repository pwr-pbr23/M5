/*
* copyright 2011 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase coprocessor
import java io ioexception
import java util arraylist
import java util list
import java util navigableset
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop hbase keyvalue
import org apache hadoop hbase client scan
import org apache hadoop hbase filter firstkeyonlyfilter
import org apache hadoop hbase ipc protocolsignature
import org apache hadoop hbase regionserver internalscanner
import org apache hadoop hbase util pair
/**
* a concrete aggregateprotocol implementation. its system level coprocessor
* that computes the aggregate function at a region level.
*/
public class aggregateimplementation extends baseendpointcoprocessor implements
aggregateprotocol
protected static log log   logfactory getlog aggregateimplementation class
@override
public protocolsignature getprotocolsignature
string protocol  long version  int clientmethodshashcode
throws ioexception
if  aggregateprotocol class getname   equals protocol
return new protocolsignature aggregateprotocol version  null
throw new ioexception     protocol
@override
public <t  s> t getmax columninterpreter<t  s> ci  scan scan
throws ioexception
t temp
t max   null
internalscanner scanner     regioncoprocessorenvironment  getenvironment
getregion   getscanner scan
list<keyvalue> results   new arraylist<keyvalue>
byte colfamily   scan getfamilies
byte qualifier   scan getfamilymap   get colfamily  pollfirst
// qualifier can be null.
try
boolean hasmorerows   false
do
hasmorerows   scanner next results
for  keyvalue kv   results
temp   ci getvalue colfamily  qualifier  kv
max    max    null     temp    null    ci compare temp  max  > 0   ? temp   max
results clear
while  hasmorerows
finally
scanner close
log info
regioncoprocessorenvironment  getenvironment    getregion
getregionnameasstring         max
return max
@override
public <t  s> t getmin columninterpreter<t  s> ci  scan scan
throws ioexception
t min   null
t temp
internalscanner scanner     regioncoprocessorenvironment  getenvironment
getregion   getscanner scan
list<keyvalue> results   new arraylist<keyvalue>
byte colfamily   scan getfamilies
byte qualifier   scan getfamilymap   get colfamily  pollfirst
try
boolean hasmorerows   false
do
hasmorerows   scanner next results
for  keyvalue kv   results
temp   ci getvalue colfamily  qualifier  kv
min    min    null     temp    null    ci compare temp  min  < 0   ? temp   min
results clear
while  hasmorerows
finally
scanner close
log info
regioncoprocessorenvironment  getenvironment    getregion
getregionnameasstring         min
return min
@override
public <t  s> s getsum columninterpreter<t  s> ci  scan scan
throws ioexception
long sum   0l
s sumval   null
t temp
internalscanner scanner     regioncoprocessorenvironment  getenvironment
getregion   getscanner scan
byte colfamily   scan getfamilies
byte qualifier   scan getfamilymap   get colfamily  pollfirst
list<keyvalue> results   new arraylist<keyvalue>
try
boolean hasmorerows   false
do
hasmorerows   scanner next results
for  keyvalue kv   results
temp   ci getvalue colfamily  qualifier  kv
if  temp    null
sumval   ci add sumval  ci casttoreturntype temp
results clear
while  hasmorerows
finally
scanner close
log debug
regioncoprocessorenvironment  getenvironment    getregion
getregionnameasstring         sum
return sumval
@override
public <t  s> long getrownum columninterpreter<t  s> ci  scan scan
throws ioexception
long counter   0l
list<keyvalue> results   new arraylist<keyvalue>
byte colfamily   scan getfamilies
byte qualifier   scan getfamilymap   get colfamily  pollfirst
if  scan getfilter      null    qualifier    null
scan setfilter new firstkeyonlyfilter
internalscanner scanner     regioncoprocessorenvironment  getenvironment
getregion   getscanner scan
try
boolean hasmorerows   false
do
hasmorerows   scanner next results
if  results size   > 0
counter
results clear
while  hasmorerows
finally
scanner close
log info
regioncoprocessorenvironment  getenvironment    getregion
getregionnameasstring         counter
return counter
@override
public <t  s> pair<s  long> getavg columninterpreter<t  s> ci  scan scan
throws ioexception
s sumval   null
long rowcountval   0l
internalscanner scanner     regioncoprocessorenvironment  getenvironment
getregion   getscanner scan
byte colfamily   scan getfamilies
byte qualifier   scan getfamilymap   get colfamily  pollfirst
list<keyvalue> results   new arraylist<keyvalue>
boolean hasmorerows   false
try
do
results clear
hasmorerows   scanner next results
for  keyvalue kv   results
sumval   ci add sumval  ci casttoreturntype ci getvalue colfamily
qualifier  kv
rowcountval
while  hasmorerows
finally
scanner close
pair<s  long> pair   new pair<s  long> sumval  rowcountval
return pair
@override
public <t  s> pair<list<s>  long> getstd columninterpreter<t  s> ci  scan scan
throws ioexception
s sumval   null  sumsqval   null  tempval   null
long rowcountval   0l
internalscanner scanner     regioncoprocessorenvironment  getenvironment
getregion   getscanner scan
byte colfamily   scan getfamilies
byte qualifier   scan getfamilymap   get colfamily  pollfirst
list<keyvalue> results   new arraylist<keyvalue>
boolean hasmorerows   false
try
do
tempval   null
hasmorerows   scanner next results
for  keyvalue kv   results
tempval   ci add tempval  ci casttoreturntype ci getvalue colfamily
qualifier  kv
results clear
sumval   ci add sumval  tempval
sumsqval   ci add sumsqval  ci multiply tempval  tempval
rowcountval
while  hasmorerows
finally
scanner close
list<s> l   new arraylist<s>
l add sumval
l add sumsqval
pair<list<s>  long> p   new pair<list<s>  long> l  rowcountval
return p
@override
public <t  s> list<s> getmedian columninterpreter<t  s> ci  scan scan
throws ioexception
s sumval   null  sumweights   null  tempval   null  tempweight   null
internalscanner scanner     regioncoprocessorenvironment  getenvironment
getregion   getscanner scan
byte colfamily   scan getfamilies
navigableset<byte> quals   scan getfamilymap   get colfamily
byte valqualifier   quals pollfirst
// if weighted median is requested, get qualifier for the weight column
byte weightqualifier   quals size   > 1 ? quals polllast     null
list<keyvalue> results   new arraylist<keyvalue>
boolean hasmorerows   false
try
do
tempval   null
tempweight   null
hasmorerows   scanner next results
for  keyvalue kv   results
tempval   ci add tempval  ci casttoreturntype ci getvalue colfamily
valqualifier  kv
if  weightqualifier    null
tempweight   ci add tempweight
ci casttoreturntype ci getvalue colfamily  weightqualifier  kv
results clear
sumval   ci add sumval  tempval
sumweights   ci add sumweights  tempweight
while  hasmorerows
finally
scanner close
list<s> l   new arraylist<s>
l add sumval
l add sumweights    null ? ci casttoreturntype ci getminvalue      sumweights
return l