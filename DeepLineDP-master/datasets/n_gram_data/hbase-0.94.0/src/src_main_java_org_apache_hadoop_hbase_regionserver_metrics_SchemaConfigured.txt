/*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase regionserver metrics
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop conf configuration
import org apache hadoop fs path
import org apache hadoop hbase io heapsize
import org apache hadoop hbase io hfile hfile
import org apache hadoop hbase regionserver hregion
import org apache hadoop hbase regionserver metrics schemametrics schemaaware
import org apache hadoop hbase util classsize
/**
* a base class for objects that are associated with a particular table and
* column family. provides a way to obtain the schema metrics object.
* <p>
* due to the variety of things that can be associated with a table/cf, there
* are many ways to initialize this base class, either in the constructor, or
* from another similar object. for example, an hfile reader configures hfile
* blocks it reads with its own table/cf name.
*/
public class schemaconfigured implements heapsize  schemaaware
private static final log log   logfactory getlog schemaconfigured class
// these are not final because we set them at runtime e.g. for hfile blocks.
private string cfname
private string tablename
/**
* schema metrics. can only be initialized when we know our column family
* name, table name, and have had a chance to take a look at the
* configuration (in {@link schemametrics#configureglobally(configuration))
* so we know whether we are using per-table metrics. therefore, initialized
* lazily. we don't make this volatile because even if a thread sees a stale
* value of null, it will be re-initialized to the same value that other
* threads see.
*/
private schemametrics schemametrics
static
if  classsize object <  0    classsize reference <  0
throw new assertionerror
/**
* estimated heap size of this object. we don't count table name and column
* family name characters because these strings are shared among many
* objects. we need unaligned size to reuse this in subclasses.
*/
public static final int schema_configured_unaligned_heap_size
classsize object   3   classsize reference
private static final int schema_configured_aligned_heap_size
classsize align schema_configured_unaligned_heap_size
/** a helper constructor that configures the "use table name" flag. */
private schemaconfigured configuration conf
if  conf    null
schemametrics configureglobally conf
// even though we now know if table-level metrics are used, we can't
// initialize schemametrics yet, because cf and table name are only known
// to the calling constructor.
/**
* creates an instance corresponding to an unknown table and column family.
* used in unit tests.
*/
public static schemaconfigured createunknown
return new schemaconfigured null  schemametrics unknown
schemametrics unknown
/**
* default constructor. only use when column/family name are not known at
* construction (i.e. for hfile blocks).
*/
public schemaconfigured
/**
* initialize table and column family name from an hfile path. if
* configuration is null,
* {@link schemametrics#configureglobally(configuration)} should have been
* called already.
*/
public schemaconfigured configuration conf  path path
this conf
if  path    null
string splits   path tostring   split
int numpathlevels   splits length
if  numpathlevels > 0    splits isempty
// this path starts with an '/'.
numpathlevels
if  numpathlevels < hfile min_num_hfile_path_levels
log warn
path
hfile min_num_hfile_path_levels
path   null
else
cfname   splits
if  cfname equals hregion region_temp_subdir
// this is probably a compaction or flush output file. we will set
// the real cf name later.
cfname   null
else
cfname   cfname intern
tablename   splits intern
return
// this might also happen if we were passed an incorrect path.
cfname   schemametrics unknown
tablename   schemametrics unknown
/**
* used when we know an hfile path to deduce table and cf name from, but do
* not have a configuration.
* @param path an hfile path
*/
public schemaconfigured path path
this null  path
/**
* used when we know table and column family name. if configuration is null,
* {@link schemametrics#configureglobally(configuration)} should have been
* called already.
*/
public schemaconfigured configuration conf  string tablename  string cfname
this conf
this tablename   tablename    null ? tablename intern     tablename
this cfname   cfname    null ? cfname intern     cfname
public schemaconfigured schemaaware that
tablename   that gettablename   intern
cfname   that getcolumnfamilyname   intern
schemametrics   that getschemametrics
@override
public string gettablename
return tablename
@override
public string getcolumnfamilyname
return cfname
@override
public schemametrics getschemametrics
if  schemametrics    null
if  tablename    null    cfname    null
throw new illegalstateexception
schemaconfasjson
schemametrics   schemametrics getinstance tablename  cfname
return schemametrics
/**
* configures the given object (e.g. an hfile block) with the current table
* and column family name, and the associated collection of metrics. please
* note that this method configures the <b>other</b> object, not <b>this</b>
* object.
*/
public void passschemametricsto schemaconfigured target
if  isnull
resetschemametricsconf target
return
if   isschemaconfigured
// cannot configure another object if we are not configured ourselves.
throw new illegalstateexception
schemaconfasjson
if  conflictingwith target
// make sure we don't try to change table or cf name.
throw new illegalargumentexception  "
tablename      cf name to      cfname     from "
target schemaconfasjson
target tablename   tablename intern
target cfname   cfname intern
target schemametrics   schemametrics
target schemaconfigurationchanged
/**
* reset schema metrics configuration in this particular instance. used when
* legitimately need to re-initialize the object with another table/cf.
* this is a static method because its use is discouraged and reserved for
* when it is really necessary (e.g. writing hfiles in a temp direcdtory
* on compaction).
*/
public static void resetschemametricsconf schemaconfigured target
target tablename   null
target cfname   null
target schemametrics   null
target schemaconfigurationchanged
@override
public long heapsize
return schema_configured_aligned_heap_size
public string schemaconfasjson
return  tablename     cfname  "   cfname
"
protected boolean isschemaconfigured
return tablename    null    cfname    null
private boolean isnull
return tablename    null    cfname    null    schemametrics    null
/**
* determines if the current object's table/cf settings are not in conflict
* with the other object's table and cf. if the other object's table/cf are
* undefined, they are not considered to be in conflict. used to sanity-check
* configuring the other object with this object's table/cf.
*/
boolean conflictingwith schemaconfigured other
return  other tablename    null     tablename equals other tablename
other cfname    null     cfname equals other cfname
/**
* a hook method called when schema configuration changes. can be used to
* update schema-aware member fields.
*/
protected void schemaconfigurationchanged