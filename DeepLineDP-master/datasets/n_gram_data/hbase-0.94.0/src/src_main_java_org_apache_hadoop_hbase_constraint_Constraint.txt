/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase constraint
import org apache hadoop conf configurable
import org apache hadoop hbase htabledescriptor
import org apache hadoop hbase client put
/**
* apply a {@link constraint} (in traditional database terminology) to a htable.
* any number of {@link constraint constraints} can be added to the table, in
* any order.
* <p>
* a {@link constraint} must be added to a table before the table is loaded via
* {@link constraints#add(htabledescriptor, class...)} or
* {@link constraints#add(htabledescriptor, org.apache.hadoop.hbase.util.pair...)}
* (if you want to add a configuration with the {@link constraint}). constraints
* will be run in the order that they are added. further, a constraint will be
* configured before it is run (on load).
* <p>
* see {@link constraints#enableconstraint(htabledescriptor, class)} and
* {@link constraints#disableconstraint(htabledescriptor, class)} for
* enabling/disabling of a given {@link constraint} after it has been added.
* <p>
* if a {@link put} is invalid, the constraint should throw some sort of
* {@link constraintexception}, indicating that the {@link put} has failed. when
* this exception is thrown, not further retries of the {@link put} are
* attempted nor are any other {@link constraint constraints} attempted (the
* {@link put} is clearly not valid). therefore, there are performance
* implications in the order in which {@link baseconstraint constraints} are
* specified.
* <p>
* if a {@link constraint} fails to fail the {@link put} via a
* {@link constraintexception}, but instead throws a {@link runtimeexception},
* the entire constraint processing mechanism ({@link constraintprocessor}) will
* be unloaded from the table. this ensures that the region server is still
* functional, but no more {@link put puts} will be checked via
* {@link constraint constraints}.
* <p>
* further, {@link constraint constraints} should probably not be used to
* enforce cross-table references as it will cause tremendous write slowdowns,
* but it is possible.
* <p>
* note: implementing classes must have a nullary (no-args) constructor
*
* @see baseconstraint
* @see constraints
*/
public interface constraint extends configurable
/**
* check a {@link put} to ensure it is valid for the table. if the {@link put}
* is valid, then just return from the method. otherwise, throw an
* {@link exception} specifying what happened. this {@link exception} is
* propagated back to the client so you can see what caused the {@link put} to
* fail.
* @param p {@link put} to check
* @throws constraintexception when the {@link put} does not match the
*         constraint.
*/
public void check put p  throws constraintexception