/*
* copyright 2011 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase util
import java util arraylist
import java util collections
import java util iterator
import java util list
import java util sortedset
import org apache hadoop hbase keyvalue
import org apache hadoop hbase regionserver nonlazykeyvaluescanner
/**
* utility scanner that wraps a sortable collection and serves
* as a keyvaluescanner.
*/
public class collectionbackedscanner extends nonlazykeyvaluescanner
final private iterable<keyvalue> data
final keyvalue kvcomparator comparator
private iterator<keyvalue> iter
private keyvalue current
public collectionbackedscanner sortedset<keyvalue> set
this set  keyvalue comparator
public collectionbackedscanner sortedset<keyvalue> set
keyvalue kvcomparator comparator
this comparator   comparator
data   set
init
public collectionbackedscanner list<keyvalue> list
this list  keyvalue comparator
public collectionbackedscanner list<keyvalue> list
keyvalue kvcomparator comparator
collections sort list  comparator
this comparator   comparator
data   list
init
public collectionbackedscanner keyvalue kvcomparator comparator
keyvalue    array
this comparator   comparator
list<keyvalue> tmp   new arraylist<keyvalue> array length
for  int i   0  i < array length     i
tmp add array
collections sort tmp  comparator
data   tmp
init
private void init
iter   data iterator
if iter hasnext
current   iter next
@override
public keyvalue peek
return current
@override
public keyvalue next
keyvalue oldcurrent   current
if iter hasnext
current   iter next
else
current   null
return oldcurrent
@override
public boolean seek keyvalue seekkv
// restart iterator
iter   data iterator
return reseek seekkv
@override
public boolean reseek keyvalue seekkv
while iter hasnext
keyvalue next   iter next
int ret   comparator compare next  seekkv
if ret >  0
current   next
return true
return false
@override
public long getsequenceid
return 0
@override
public void close
// do nothing