/**
* copyright 2011 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase mapreduce
import java io ioexception
import org apache hadoop hbase client htable
import org apache hadoop hbase client result
import org apache hadoop hbase client scan
import org apache hadoop hbase io immutablebyteswritable
import org apache hadoop mapreduce inputsplit
import org apache hadoop mapreduce recordreader
import org apache hadoop mapreduce taskattemptcontext
/**
* iterate over an hbase table data, return (immutablebyteswritable, result)
* pairs.
*/
public class tablerecordreader
extends recordreader<immutablebyteswritable  result>
private tablerecordreaderimpl recordreaderimpl   new tablerecordreaderimpl
/**
* restart from survivable exceptions by creating a new scanner.
*
* @param firstrow  the first row to start at.
* @throws ioexception when restarting fails.
*/
public void restart byte firstrow  throws ioexception
this recordreaderimpl restart firstrow
/**
* sets the hbase table.
*
* @param htable  the {@link htable} to scan.
*/
public void sethtable htable htable
this recordreaderimpl sethtable htable
/**
* sets the scan defining the actual details like columns etc.
*
* @param scan  the scan to set.
*/
public void setscan scan scan
this recordreaderimpl setscan scan
/**
* closes the split.
*
* @see org.apache.hadoop.mapreduce.recordreader#close()
*/
@override
public void close
this recordreaderimpl close
/**
* returns the current key.
*
* @return the current key.
* @throws ioexception
* @throws interruptedexception when the job is aborted.
* @see org.apache.hadoop.mapreduce.recordreader#getcurrentkey()
*/
@override
public immutablebyteswritable getcurrentkey   throws ioexception
interruptedexception
return this recordreaderimpl getcurrentkey
/**
* returns the current value.
*
* @return the current value.
* @throws ioexception when the value is faulty.
* @throws interruptedexception when the job is aborted.
* @see org.apache.hadoop.mapreduce.recordreader#getcurrentvalue()
*/
@override
public result getcurrentvalue   throws ioexception  interruptedexception
return this recordreaderimpl getcurrentvalue
/**
* initializes the reader.
*
* @param inputsplit  the split to work with.
* @param context  the current task context.
* @throws ioexception when setting up the reader fails.
* @throws interruptedexception when the job is aborted.
* @see org.apache.hadoop.mapreduce.recordreader#initialize(
*   org.apache.hadoop.mapreduce.inputsplit,
*   org.apache.hadoop.mapreduce.taskattemptcontext)
*/
@override
public void initialize inputsplit inputsplit
taskattemptcontext context  throws ioexception
interruptedexception
this recordreaderimpl initialize inputsplit  context
/**
* positions the record reader to the next record.
*
* @return <code>true</code> if there was another record.
* @throws ioexception when reading the record failed.
* @throws interruptedexception when the job was aborted.
* @see org.apache.hadoop.mapreduce.recordreader#nextkeyvalue()
*/
@override
public boolean nextkeyvalue   throws ioexception  interruptedexception
return this recordreaderimpl nextkeyvalue
/**
* the current progress of the record reader through its data.
*
* @return a number between 0.0 and 1.0, the fraction of the data read.
* @see org.apache.hadoop.mapreduce.recordreader#getprogress()
*/
@override
public float getprogress
return this recordreaderimpl getprogress