/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license
*/
package org apache hadoop hbase regionserver wal
import org apache hadoop classification interfaceaudience
import java io datainput
import java io dataoutput
import java io ioexception
import org apache hadoop hbase hbaseconfiguration
import org apache hadoop hbase hconstants
import org apache hadoop hbase regionserver wal hlog entry
import org apache hadoop hbase util bytes
import org apache hadoop io writableutils
import org apache hadoop conf configuration
import org apache hadoop fs filesystem
import org apache hadoop fs path
import com google common base preconditions
/**
* a set of static functions for running our custom wal compression/decompression.
* also contains a command line tool to compress and uncompress hlogs.
*/
@interfaceaudience private
public class compressor
/**
* command line tool to compress and uncompress wals.
*/
public static void main string args  throws ioexception
if  args length    2    args equals       args equals
printhelp
system exit  1
path inputpath   new path args
path outputpath   new path args
transformfile inputpath  outputpath
private static void printhelp
system err println
system err println
system err println
return
private static void transformfile path input  path output
throws ioexception
sequencefilelogreader in   new sequencefilelogreader
sequencefilelogwriter out   new sequencefilelogwriter
try
configuration conf   hbaseconfiguration create
filesystem infs   input getfilesystem conf
filesystem outfs   output getfilesystem conf
in init infs  input  conf
boolean compress   in reader iswalcompressionenabled
conf setboolean hconstants enable_wal_compression   compress
out init outfs  output  conf
entry e   null
while   e   in next       null  out append e
finally
in close
out close
/**
* reads the next compressed entry and returns it as a byte array
*
* @param in the datainput to read from
* @param dict the dictionary we use for our read.
*
* @param the uncompressed array.
*/
static byte readcompressed datainput in  dictionary dict
throws ioexception
byte status   in readbyte
if  status    dictionary not_in_dictionary
int length   writableutils readvint in
// if this isn't in the dictionary, we need to add to the dictionary.
byte arr   new byte
in readfully arr
if  dict    null  dict addentry arr  0  length
return arr
else
// status here is the higher-order byte of index of the dictionary entry
// (when its not dictionary.not_in_dictionary -- dictionary indices are
// shorts).
short dictidx   toshort status  in readbyte
byte entry   dict getentry dictidx
if  entry    null
throw new ioexception
dictidx
return entry
/**
* reads a compressed entry into an array.
* the output into the array ends up length-prefixed.
*
* @param to the array to write into
* @param offset array offset to start writing to
* @param in the datainput to read from
* @param dict the dictionary to use for compression
*
* @return the length of the uncompressed data
*/
static int uncompressintoarray byte to  int offset  datainput in
dictionary dict  throws ioexception
byte status   in readbyte
if  status    dictionary not_in_dictionary
// status byte indicating that data to be read is not in dictionary.
// if this isn't in the dictionary, we need to add to the dictionary.
int length   writableutils readvint in
in readfully to  offset  length
dict addentry to  offset  length
return length
else
// the status byte also acts as the higher order byte of the dictionary
// entry
short dictidx   toshort status  in readbyte
byte entry   dict getentry dictidx
if  entry    null
throw new ioexception
dictidx
// now we write the uncompressed value.
bytes putbytes to  offset  entry  0  entry length
return entry length
/**
* compresses and writes an array to a dataoutput
*
* @param data the array to write.
* @param out the dataoutput to write into
* @param dict the dictionary to use for compression
*/
static void writecompressed byte data  int offset  int length
dataoutput out  dictionary dict
throws ioexception
short dictidx   dictionary not_in_dictionary
if  dict    null
dictidx   dict findentry data  offset  length
if  dictidx    dictionary not_in_dictionary
// not in dict
out writebyte dictionary not_in_dictionary
writableutils writevint out  length
out write data  offset  length
else
out writeshort dictidx
static short toshort byte hi  byte lo
short s    short     hi   0xff  << 8     lo   0xff
preconditions checkargument s >  0
return s