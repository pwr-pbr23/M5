/*
* copyright the apache software foundation
*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements. see the notice file distributed with this
* work for additional information regarding copyright ownership. the asf
* licenses this file to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
* http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis, without
* warranties or conditions of any kind, either express or implied. see the
* license for the specific language governing permissions and limitations
* under the license.
*/
package org apache hadoop hbase regionserver metrics
import java util arraylist
import java util arrays
import java util collection
import java util collections
import java util list
import java util map
import java util set
import java util treemap
import java util treeset
import java util concurrent concurrenthashmap
import java util regex matcher
import java util regex pattern
import org apache commons lang mutable mutabledouble
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop conf configuration
import org apache hadoop hbase hconstants
import org apache hadoop hbase io hfile blocktype blockcategory
import org apache hadoop hbase regionserver hregion
import org apache hadoop hbase util bytes
import org apache hadoop hbase util pair
/**
* a collection of metric names in a given column family or a (table, column
* family) combination. the following "dimensions" are supported:
* <ul>
* <li>table name (optional; enabled based on configuration)</li>
* <li>per-column family vs. aggregated. the aggregated mode is only supported
* when table name is not included.</li>
* <li>block category (data, index, bloom filter, etc.)</li>
* <li>whether the request is part of a compaction</li>
* <li>metric type (read time, block read count, cache hits/misses, etc.)</li>
* </ul>
* <p>
* an instance of this class does not store any metric values. it just allows
* to determine the correct metric name for each combination of the above
* dimensions.
* <p>
* <table>
* <tr>
* <th rowspan="2">metric key</th>
* <th colspan="2">per-table metrics conf setting</th>
* <th rowspan="2">description</th>
* </tr>
* <tr>
* <th>on</th>
* <th>off</th>
* </th>
* <tr>
*   <td> tbl.t.cf.cf.m </td> <td> include </td> <td> skip    </td>
*   <td> a specific column family of a specific table        </td>
* </tr>
* <tr>
*   <td> tbl.t.m       </td> <td> skip    </td> <td> skip    </td>
*   <td> all column families in the given table              </td>
* </tr>
* <tr>
*   <td> cf.cf.m       </td> <td> skip    </td> <td> include </td>
*   <td> a specific column family in all tables              </td>
* </tr>
* <tr>
*   <td> m             </td> <td> include </td> <td> include </td>
*   <td> all column families in all tables                   </td>
* </tr>
* </table>
*/
public class schemametrics
public interface schemaaware
public string gettablename
public string getcolumnfamilyname
public schemametrics getschemametrics
private static final log log   logfactory getlog schemametrics class
public static enum blockmetrictype
// metric configuration: compactionaware, timevarying
read_time                      true  true
read_count             true  false
cache_hit      true  false
cache_miss    true  false
cache_size           false  false
cached          false  false
evicted        false  false
private final string metricstr
private final boolean compactionaware
private final boolean timevarying
blockmetrictype string metricstr  boolean compactionaware
boolean timevarying
this metricstr   metricstr
this compactionaware   compactionaware
this timevarying   timevarying
@override
public string tostring
return metricstr
private static final string block_metric_type_re
static
stringbuilder sb   new stringbuilder
for  blockmetrictype bmt   values
if  sb length   > 0
sb append
sb append bmt
block_metric_type_re   sb tostring
public static enum storemetrictype
store_file_count
store_file_index_size
store_file_size_mb
static_bloom_size_kb
memstore_size_mb
static_index_size_kb
flush_size
private final string metricstr
storemetrictype string metricstr
this metricstr   metricstr
@override
public string tostring
return metricstr
// constants
/**
* a string used when column family or table name is unknown, and in some
* unit tests. this should not normally show up in metric names but if it
* does it is better than creating a silent discrepancy in total vs.
* per-cf/table metrics.
*/
public static final string unknown
public static final string table_prefix
public static final string cf_prefix
public static final string block_type_prefix
public static final string region_prefix
public static final string cf_unknown_prefix   cf_prefix   unknown
public static final string cf_bad_family_prefix   cf_prefix
/** use for readability when obtaining non-compaction counters */
public static final boolean no_compaction   false
/**
* a special schema metric value that means "all tables aggregated" or
* "all column families aggregated" when used as a table name or a column
* family name.
*/
public static final string total_key
/**
* special handling for meta-block-specific metrics for
* backwards-compatibility.
*/
private static final string meta_block_category_str
private static final int num_block_categories
blockcategory values   length
private static final int num_metric_types
blockmetrictype values   length
static final boolean bool_values   new boolean   false  true
private static final int num_block_metrics
num_block_categories       blockcategory
bool_values length         iscompaction
num_metric_types           metrictype
private static final int num_store_metric_types
storemetrictype values   length
/** conf key controlling whether we include table name in metric names */
private static final string show_table_name_conf_key
/** we use this when too many column families are involved in a request. */
private static final string more_cfs_omitted_str
/**
* maximum length of a metric name prefix. used when constructing metric
* names from a set of column families participating in a request.
*/
private static final int max_metric_prefix_length
256   more_cfs_omitted_str length
// global variables
/**
* maps a string key consisting of table name and column family name, with
* table name optionally replaced with {@link #total_key} if per-table
* metrics are disabled, to an instance of this class.
*/
private static final concurrenthashmap<string  schemametrics>
tableandfamilytometrics   new concurrenthashmap<string  schemametrics>
/** metrics for all tables and column families. */
// this has to be initialized after cftometrics.
public static final schemametrics all_schema_metrics
getinstance total_key  total_key
/**
* whether to include table name in metric names. if this is null, it has not
* been initialized. this is a global instance, but we also have a copy of it
* per a {@link schemametrics} object to avoid synchronization overhead.
*/
private static volatile boolean usetablenameglobally
/** whether we logged a message about configuration inconsistency */
private static volatile boolean loggedconfinconsistency
// instance variables
private final string blockmetricnames   new string
private final boolean blockmetrictimevarying
new boolean
private final string bloommetricnames   new string
private final string storemetricnames   new string
private final string storemetricnamesmax   new string
private schemametrics final string tablename  final string cfname
string metricprefix   schemametrics generateschemametricsprefix
tablename  cfname
for  blockcategory blockcategory   blockcategory values
for  boolean iscompaction   bool_values
for  blockmetrictype metrictype   blockmetrictype values
if   metrictype compactionaware    iscompaction
continue
stringbuilder sb   new stringbuilder metricprefix
if  blockcategory    blockcategory all_categories
blockcategory    blockcategory meta
string categorystr   blockcategory tostring
categorystr   categorystr charat 0
categorystr substring 1  tolowercase
sb append block_type_prefix   categorystr
if  metrictype compactionaware
sb append iscompaction ?
// a special-case for meta blocks for backwards-compatibility.
if  blockcategory    blockcategory meta
sb append meta_block_category_str
sb append metrictype
int i   getblockmetricindex blockcategory  iscompaction  metrictype
blockmetricnames   sb tostring   intern
blockmetrictimevarying   metrictype timevarying
for  boolean isinbloom   bool_values
bloommetricnames   metricprefix
isinbloom ?
for  storemetrictype storemetric   storemetrictype values
string corename   metricprefix   storemetric tostring
storemetricnames   corename
storemetricnamesmax   corename
/**
* returns a {@link schemametrics} object for the given table and column
* family, instantiating it if necessary.
*
* @param tablename table name (null is interpreted as "unknown"). this is
*          ignored
* @param cfname column family name (null is interpreted as "unknown")
*/
public static schemametrics getinstance string tablename  string cfname
if  tablename    null
tablename   unknown
if  cfname    null
cfname   unknown
tablename   geteffectivetablename tablename
final string instancekey   tablename       cfname
schemametrics schemametrics   tableandfamilytometrics get instancekey
if  schemametrics    null
return schemametrics
schemametrics   new schemametrics tablename  cfname
schemametrics existingmetrics
tableandfamilytometrics putifabsent instancekey  schemametrics
return existingmetrics    null ? existingmetrics   schemametrics
private static final int getblockmetricindex blockcategory blockcategory
boolean iscompaction  blockmetrictype metrictype
int i   0
i   i   num_block_categories   blockcategory ordinal
i   i   bool_values length    iscompaction ? 1   0
i   i   num_metric_types   metrictype ordinal
return i
public string getblockmetricname blockcategory blockcategory
boolean iscompaction  blockmetrictype metrictype
if  iscompaction     metrictype compactionaware
throw new illegalargumentexception
metrictype
return blockmetricnames[getblockmetricindex blockcategory  iscompaction
metrictype ]
public string getbloommetricname boolean isinbloom
return bloommetricnames
/**
* increments the given metric, both per-cf and aggregate, for both the given
* category and all categories in aggregate (four counters total).
*/
private void incrnumericmetric blockcategory blockcategory
boolean iscompaction  blockmetrictype metrictype
if  blockcategory    null
blockcategory   blockcategory unknown      so that we see this in stats
regionmetricsstorage incrnumericmetric getblockmetricname blockcategory
iscompaction  metrictype   1
if  blockcategory    blockcategory all_categories
incrnumericmetric blockcategory all_categories  iscompaction
metrictype
private void addtoreadtime blockcategory blockcategory
boolean iscompaction  long timems
regionmetricsstorage incrtimevaryingmetric getblockmetricname blockcategory
iscompaction  blockmetrictype read_time   timems
// also update the read time aggregated across all block categories
if  blockcategory    blockcategory all_categories
addtoreadtime blockcategory all_categories  iscompaction  timems
/**
* used to accumulate store metrics across multiple regions in a region
* server.  these metrics are not "persistent", i.e. we keep overriding them
* on every update instead of incrementing, so we need to accumulate them in
* a temporary map before pushing them to the global metric collection.
* @param tmpmap a temporary map for accumulating store metrics
* @param storemetrictype the store metric type to increment
* @param val the value to add to the metric
*/
public void accumulatestoremetric final map<string  mutabledouble> tmpmap
storemetrictype storemetrictype  double val
final string key   getstoremetricname storemetrictype
if  tmpmap get key     null
tmpmap put key  new mutabledouble val
else
tmpmap get key  add val
if  this    all_schema_metrics
// also compute the max value across all stores on this server
final string maxkey   getstoremetricnamemax storemetrictype
mutabledouble cur   tmpmap get maxkey
if  cur    null
tmpmap put maxkey  new mutabledouble val
else if  cur doublevalue   < val
cur setvalue val
else
all_schema_metrics accumulatestoremetric tmpmap  storemetrictype  val
public string getstoremetricname storemetrictype storemetrictype
return storemetricnames
public string getstoremetricnamemax storemetrictype storemetrictype
return storemetricnamesmax
/**
* update a metric that does not get reset on every poll.
* @param storemetrictype the store metric to update
* @param value the value to update the metric to
*/
public void updatepersistentstoremetric storemetrictype storemetrictype
long value
regionmetricsstorage incrnumericpersistentmetric
storemetricnames  value
/**
* updates the number of hits and the total number of block reads on a block
* cache hit.
*/
public void updateoncachehit blockcategory blockcategory
boolean iscompaction
blockcategory expectspecific
incrnumericmetric blockcategory  iscompaction  blockmetrictype cache_hit
incrnumericmetric blockcategory  iscompaction  blockmetrictype read_count
if  this    all_schema_metrics
all_schema_metrics updateoncachehit blockcategory  iscompaction
/**
* updates read time, the number of misses, and the total number of block
* reads on a block cache miss.
*/
public void updateoncachemiss blockcategory blockcategory
boolean iscompaction  long timems
blockcategory expectspecific
addtoreadtime blockcategory  iscompaction  timems
incrnumericmetric blockcategory  iscompaction  blockmetrictype cache_miss
incrnumericmetric blockcategory  iscompaction  blockmetrictype read_count
if  this    all_schema_metrics
all_schema_metrics updateoncachemiss blockcategory  iscompaction
timems
/**
* adds the given delta to the cache size for the given block category and
* the aggregate metric for all block categories. updates both the per-cf
* counter and the counter for all cfs (four metrics total). the cache size
* metric is "persistent", i.e. it does not get reset when metrics are
* collected.
*/
public void addtocachesize blockcategory category  long cachesizedelta
if  category    null
category   blockcategory all_categories
regionmetricsstorage incrnumericpersistentmetric getblockmetricname category  false
blockmetrictype cache_size   cachesizedelta
if  category    blockcategory all_categories
addtocachesize blockcategory all_categories  cachesizedelta
public void updateoncacheputorevict blockcategory blockcategory
long cachesizedelta  boolean iseviction
addtocachesize blockcategory  cachesizedelta
incrnumericmetric blockcategory  false
iseviction ? blockmetrictype evicted   blockmetrictype cached
if  this    all_schema_metrics
all_schema_metrics updateoncacheputorevict blockcategory  cachesizedelta
iseviction
/**
* increments both the per-cf and the aggregate counter of bloom
* positives/negatives as specified by the argument.
*/
public void updatebloommetrics boolean isinbloom
regionmetricsstorage incrnumericmetric getbloommetricname isinbloom   1
if  this    all_schema_metrics
all_schema_metrics updatebloommetrics isinbloom
/**
* sets the flag whether to use table name in metric names according to the
* given configuration. this must be called at least once before
* instantiating hfile readers/writers.
*/
public static void configureglobally configuration conf
final boolean usetablenamenew
conf getboolean show_table_name_conf_key  false
setusetablename usetablenamenew
/**
* determine the table name to be included in metric keys. if the global
* configuration says that we should not use table names in metrics,
* we always return {@link #total_key} even if nontrivial table name is
* provided.
*
* @param tablename a table name or {@link #total_key} when aggregating
* across all tables
* @return the table name to use in metric keys
*/
private static string geteffectivetablename string tablename
if   tablename equals total_key
// we are provided with a non-trivial table name (including "unknown").
// we need to know whether table name should be included into metrics.
if  usetablenameglobally    null
throw new illegalstateexception
show_table_name_conf_key
final boolean usetablename   usetablenameglobally
if   usetablename
// don't include table name in metric keys.
tablename   total_key
return tablename
/**
* method to transform a combination of a table name and a column family name
* into a metric key prefix. tables/column family names equal to
* {@link #total_key} are omitted from the prefix.
*
* @param tablename the table name or {@link #total_key} for all tables
* @param cfname the column family name or {@link #total_key} for all cfs
* @return the metric name prefix, ending with a dot.
*/
public static string generateschemametricsprefix string tablename
final string cfname
tablename   geteffectivetablename tablename
string schemametricprefix
tablename equals total_key  ?     table_prefix   tablename
schemametricprefix
cfname equals total_key  ?     cf_prefix   cfname
return schemametricprefix
public static string generateschemametricsprefix byte tablename
byte cfname
return generateschemametricsprefix bytes tostring tablename
bytes tostring cfname
/**
* method to transform a set of column families in byte[] format with table
* name into a metric key prefix.
*
* @param tablename the table name or {@link #total_key} for all tables
* @param families the ordered set of column families
* @return the metric name prefix, ending with a dot, or an empty string in
*         case of invalid arguments. this is ok since we always expect
*         some cfs to be included.
*/
public static string generateschemametricsprefix string tablename
set<byte> families
if  families    null    families isempty
tablename    null    tablename isempty
return
if  families size      1
return generateschemametricsprefix tablename
bytes tostring families iterator   next
tablename   geteffectivetablename tablename
list<byte> sortedfamilies   new arraylist<byte> families
collections sort sortedfamilies  bytes bytes_comparator
stringbuilder sb   new stringbuilder
int numcfsleft   families size
for  byte family   sortedfamilies
if  sb length   > max_metric_prefix_length
sb append more_cfs_omitted_str
break
numcfsleft
sb append bytes tostring family
if  numcfsleft > 0
sb append
return schemametrics generateschemametricsprefix tablename  sb tostring
/**
* get the prefix for metrics generated about a single region.
*
* @param tablename
*          the table name or {@link #total_key} for all tables
* @param regionname
*          regionname
* @return the prefix for this table/region combination.
*/
static string generateregionmetricsprefix string tablename  string regionname
tablename   geteffectivetablename tablename
string schemametricprefix   tablename equals total_key  ?     table_prefix   tablename
schemametricprefix    regionname equals total_key  ?     region_prefix   regionname
return schemametricprefix
/**
* sets the flag of whether to use table name in metric names. this flag
* is specified in configuration and is not expected to change at runtime,
* so we log an error message when it does change.
*/
private static void setusetablename final boolean usetablenamenew
if  usetablenameglobally    null
// this configuration option has not yet been set.
usetablenameglobally   usetablenamenew
else if  usetablenameglobally    usetablenamenew
loggedconfinconsistency
// the configuration is inconsistent and we have not reported it
// previously. once we report it, just keep ignoring the new setting.
log error
usetablenameglobally
usetablenamenew
loggedconfinconsistency   true
// methods used in testing
private static final string regexescape string s
return s replace
/**
* assume that table names used in tests don't contain dots, except for the
* meta table.
*/
private static final string word_and_dot_re_str
regexescape bytes tostring hconstants meta_table_name
/** "tbl.<table_name>." */
private static final string table_name_re_str
regexescape table_prefix    word_and_dot_re_str
/** "cf.<cf_name>." */
private static final string cf_name_re_str
regexescape cf_prefix    word_and_dot_re_str
private static final pattern cf_name_re   pattern compile cf_name_re_str
/** "tbl.<table_name>.cf.<cf_name>." */
private static final pattern table_and_cf_name_re   pattern compile
table_name_re_str   cf_name_re_str
private static final pattern block_category_re   pattern compile
regexescape block_type_prefix
// also remove the special-case block type marker for meta blocks
meta_block_category_str
blockmetrictype block_metric_type_re
/**
* a suffix for the "number of operations" part of "time-varying metrics". we
* only use this for metric verification in unit testing. time-varying
* metrics are handled by a different code path in production.
*/
private static string num_ops_suffix
/**
* a custom suffix that we use for verifying the second component of
* a "time-varying metric".
*/
private static string total_suffix
private static final pattern time_varying_suffix_re   pattern compile
num_ops_suffix       total_suffix
void printmetricnames
for  blockcategory blockcategory   blockcategory values
for  boolean iscompaction   bool_values
for  blockmetrictype metrictype   blockmetrictype values
int i   getblockmetricindex blockcategory  iscompaction  metrictype
log debug     blockcategory
metrictype       iscompaction
blockmetricnames
private collection<string> getallmetricnames
list<string> allmetricnames   new arraylist<string>
for  int i   0  i < blockmetricnames length    i
final string blockmetricname   blockmetricnames
final boolean timevarying   blockmetrictimevarying
if  blockmetricname    null
if  timevarying
allmetricnames add blockmetricname   num_ops_suffix
allmetricnames add blockmetricname   total_suffix
else
allmetricnames add blockmetricname
allmetricnames addall arrays aslist bloommetricnames
return allmetricnames
private static final boolean istimevaryingkey string metrickey
return metrickey endswith num_ops_suffix
metrickey endswith total_suffix
private static final string striptimevaryingsuffix string metrickey
return time_varying_suffix_re matcher metrickey  replaceall
public static map<string  long> getmetricssnapshot
map<string  long> metricssnapshot   new treemap<string  long>
for  schemametrics cfm   tableandfamilytometrics values
for  string metricname   cfm getallmetricnames
long metricvalue
if  istimevaryingkey metricname
pair<long  integer> totalandcount
regionmetricsstorage gettimevaryingmetric striptimevaryingsuffix metricname
metricvalue   metricname endswith total_suffix  ?
totalandcount getfirst     totalandcount getsecond
else
metricvalue   regionmetricsstorage getnumericmetric metricname
metricssnapshot put metricname  metricvalue
return metricssnapshot
public static long getlong map<string  long> m  string k
long l   m get k
return l    null ? l   0
private static void putlong map<string  long> m  string k  long v
if  v    0
m put k  v
else
m remove k
/**
* @return the difference between two sets of metrics (second minus first).
*         only includes keys that have nonzero difference.
*/
public static map<string  long> diffmetrics map<string  long> a
map<string  long> b
set<string> allkeys   new treeset<string> a keyset
allkeys addall b keyset
map<string  long> diff   new treemap<string  long>
for  string k   allkeys
long aval   getlong a  k
long bval   getlong b  k
if  aval    bval
diff put k  bval   aval
return diff
public static void validatemetricchanges map<string  long> oldmetrics
final map<string  long> newmetrics   getmetricssnapshot
final map<string  long> allcfdeltas   new treemap<string  long>
final map<string  long> allblockcategorydeltas
new treemap<string  long>
final map<string  long> deltas   diffmetrics oldmetrics  newmetrics
final pattern cftablemetricre
usetablenameglobally ? table_and_cf_name_re   cf_name_re
final set<string> allkeys   new treeset<string> oldmetrics keyset
allkeys addall newmetrics keyset
for  schemametrics cfm   tableandfamilytometrics values
for  string metricname   cfm getallmetricnames
if  metricname startswith cf_prefix   cf_prefix
throw new assertionerror
metricname
final long oldvalue   getlong oldmetrics  metricname
final long newvalue   getlong newmetrics  metricname
final long delta   newvalue   oldvalue
// re-calculate values of metrics with no column family (or cf/table)
// specified based on all metrics with cf (or cf/table) specified.
if  delta    0
if  cfm    all_schema_metrics
final string aggregatemetricname
cftablemetricre matcher metricname  replaceall
if   aggregatemetricname equals metricname
log debug     delta       metricname
aggregatemetricname
putlong allcfdeltas  aggregatemetricname
getlong allcfdeltas  aggregatemetricname    delta
else
log debug     metricname       delta
matcher matcher   block_category_re matcher metricname
if  matcher find
// only process per-block-category metrics
string metricnoblockcategory   matcher replaceall
putlong allblockcategorydeltas  metricnoblockcategory
getlong allblockcategorydeltas  metricnoblockcategory    delta
stringbuilder errors   new stringbuilder
for  string key   all_schema_metrics getallmetricnames
long actual   getlong deltas  key
long expected   getlong allcfdeltas  key
if  actual    expected
if  errors length   > 0
errors append
errors append     key
actual
expected
// verify metrics computed for all block types based on the aggregation
// of per-block-type metrics.
for  string key   allkeys
if  block_category_re matcher key  find
key contains all_schema_metrics getbloommetricname false
key contains all_schema_metrics getbloommetricname true
// skip per-block-category metrics. also skip bloom filters, because
// they are not aggregated per block type.
continue
long actual   getlong deltas  key
long expected   getlong allblockcategorydeltas  key
if  actual    expected
if  errors length   > 0
errors append
errors append     key
actual
expected
if  errors length   > 0
throw new assertionerror errors tostring
/**
* creates an instance pretending both the table and column family are
* unknown. used in unit tests.
*/
public static schemametrics getunknowninstancefortest
return getinstance unknown  unknown
/**
* set the flag to use or not use table name in metric names. used in unit
* tests, so the flag can be set arbitrarily.
*/
public static void setusetablenameintest final boolean usetablenamenew
usetablenameglobally   usetablenamenew
/** formats the given map of metrics in a human-readable way. */
public static string formatmetrics map<string  long> metrics
stringbuilder sb   new stringbuilder
for  map entry<string  long> entry   metrics entryset
if  sb length   > 0
sb append
sb append entry getkey         entry getvalue
return sb tostring