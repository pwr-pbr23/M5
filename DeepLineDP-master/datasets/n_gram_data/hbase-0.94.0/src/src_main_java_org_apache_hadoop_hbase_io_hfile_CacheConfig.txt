/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase io hfile
import java lang management managementfactory
import java lang management memoryusage
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop conf configuration
import org apache hadoop hbase hcolumndescriptor
import org apache hadoop hbase hconstants
import org apache hadoop hbase io hfile blocktype blockcategory
import org apache hadoop hbase regionserver storefile
import org apache hadoop hbase util directmemoryutils
import org apache hadoop util stringutils
/**
* stores all of the cache objects and configuration for a single hfile.
*/
public class cacheconfig
private static final log log   logfactory getlog cacheconfig class getname
/**
* configuration key to cache data blocks on write. there are separate
* switches for bloom blocks and non-root index blocks.
*/
public static final string cache_blocks_on_write_key
/**
* configuration key to cache leaf and intermediate-level index blocks on
* write.
*/
public static final string cache_index_blocks_on_write_key
/**
* configuration key to cache compound bloom filter blocks on write.
*/
public static final string cache_bloom_blocks_on_write_key
/**
* todo: implement this (jgray)
* configuration key to cache data blocks in compressed format.
*/
public static final string cache_data_blocks_compressed_key
/**
* configuration key to evict all blocks of a given file from the block cache
* when the file is closed.
*/
public static final string evict_blocks_on_close_key
// defaults
public static final boolean default_cache_data_on_read   true
public static final boolean default_cache_data_on_write   false
public static final boolean default_in_memory   false
public static final boolean default_cache_indexes_on_write   false
public static final boolean default_cache_blooms_on_write   false
public static final boolean default_evict_on_close   false
public static final boolean default_compressed_cache   false
/** local reference to the block cache, null if completely disabled */
private final blockcache blockcache
/**
* whether blocks should be cached on read (default is on if there is a
* cache but this can be turned off on a per-family or per-request basis)
*/
private boolean cachedataonread
/** whether blocks should be flagged as in-memory when being cached */
private final boolean inmemory
/** whether data blocks should be cached when new files are written */
private boolean cachedataonwrite
/** whether index blocks should be cached when new files are written */
private final boolean cacheindexesonwrite
/** whether compound bloom filter blocks should be cached on write */
private final boolean cachebloomsonwrite
/** whether blocks of a file should be evicted when the file is closed */
private boolean evictonclose
/** whether data blocks should be stored in compressed form in the cache */
private final boolean cachecompressed
/**
* create a cache configuration using the specified configuration object and
* family descriptor.
* @param conf hbase configuration
* @param family column family configuration
*/
public cacheconfig configuration conf  hcolumndescriptor family
this cacheconfig instantiateblockcache conf
family isblockcacheenabled    family isinmemory
conf getboolean cache_blocks_on_write_key  default_cache_data_on_write
conf getboolean cache_index_blocks_on_write_key
default_cache_indexes_on_write
conf getboolean cache_bloom_blocks_on_write_key
default_cache_blooms_on_write
conf getboolean evict_blocks_on_close_key  default_evict_on_close
conf getboolean cache_data_blocks_compressed_key  default_compressed_cache
/**
* create a cache configuration using the specified configuration object and
* defaults for family level settings.
* @param conf hbase configuration
*/
public cacheconfig configuration conf
this cacheconfig instantiateblockcache conf
default_cache_data_on_read
default_in_memory     this is a family level setting so can't be set
// strictly from conf
conf getboolean cache_blocks_on_write_key  default_cache_data_on_write
conf getboolean cache_index_blocks_on_write_key
default_cache_indexes_on_write
conf getboolean cache_bloom_blocks_on_write_key
default_cache_blooms_on_write
conf getboolean evict_blocks_on_close_key  default_evict_on_close
conf getboolean cache_data_blocks_compressed_key
default_compressed_cache
/**
* create a block cache configuration with the specified cache and
* configuration parameters.
* @param blockcache reference to block cache, null if completely disabled
* @param cachedataonread whether data blocks should be cached on read
* @param inmemory whether blocks should be flagged as in-memory
* @param cachedataonwrite whether data blocks should be cached on write
* @param cacheindexesonwrite whether index blocks should be cached on write
* @param cachebloomsonwrite whether blooms should be cached on write
* @param evictonclose whether blocks should be evicted when hfile is closed
* @param cachecompressed whether to store blocks as compressed in the cache
*/
cacheconfig final blockcache blockcache
final boolean cachedataonread  final boolean inmemory
final boolean cachedataonwrite  final boolean cacheindexesonwrite
final boolean cachebloomsonwrite  final boolean evictonclose
final boolean cachecompressed
this blockcache   blockcache
this cachedataonread   cachedataonread
this inmemory   inmemory
this cachedataonwrite   cachedataonwrite
this cacheindexesonwrite   cacheindexesonwrite
this cachebloomsonwrite   cachebloomsonwrite
this evictonclose   evictonclose
this cachecompressed   cachecompressed
/**
* constructs a cache configuration copied from the specified configuration.
* @param cacheconf
*/
public cacheconfig cacheconfig cacheconf
this cacheconf blockcache  cacheconf cachedataonread  cacheconf inmemory
cacheconf cachedataonwrite  cacheconf cacheindexesonwrite
cacheconf cachebloomsonwrite  cacheconf evictonclose
cacheconf cachecompressed
/**
* checks whether the block cache is enabled.
*/
public boolean isblockcacheenabled
return this blockcache    null
/**
* returns the block cache.
* @return the block cache, or null if caching is completely disabled
*/
public blockcache getblockcache
return this blockcache
/**
* returns whether the blocks of this hfile should be cached on read or not.
* @return true if blocks should be cached on read, false if not
*/
public boolean shouldcachedataonread
return isblockcacheenabled      cachedataonread
/**
* should we cache a block of a particular category? we always cache
* important blocks such as index blocks, as long as the block cache is
* available.
*/
public boolean shouldcacheblockonread blockcategory category
boolean shouldcache   isblockcacheenabled
cachedataonread
category    blockcategory index
category    blockcategory bloom
return shouldcache
/**
* @return true if blocks in this file should be flagged as in-memory
*/
public boolean isinmemory
return isblockcacheenabled      this inmemory
/**
* @return true if data blocks should be written to the cache when an hfile is
*         written, false if not
*/
public boolean shouldcachedataonwrite
return isblockcacheenabled      this cachedataonwrite
/**
* only used for testing.
* @param cachedataonwrite whether data blocks should be written to the cache
*                         when an hfile is written
*/
public void setcachedataonwrite boolean cachedataonwrite
this cachedataonwrite   cachedataonwrite
/**
* @return true if index blocks should be written to the cache when an hfile
*         is written, false if not
*/
public boolean shouldcacheindexesonwrite
return isblockcacheenabled      this cacheindexesonwrite
/**
* @return true if bloom blocks should be written to the cache when an hfile
*         is written, false if not
*/
public boolean shouldcachebloomsonwrite
return isblockcacheenabled      this cachebloomsonwrite
/**
* @return true if blocks should be evicted from the cache when an hfile
*         reader is closed, false if not
*/
public boolean shouldevictonclose
return isblockcacheenabled      this evictonclose
/**
* only used for testing.
* @param evictonclose whether blocks should be evicted from the cache when an
*                     hfile reader is closed
*/
public void setevictonclose boolean evictonclose
this evictonclose   evictonclose
/**
* @return true if blocks should be compressed in the cache, false if not
*/
public boolean shouldcachecompressed
return isblockcacheenabled      this cachecompressed
@override
public string tostring
if   isblockcacheenabled
return
return
shouldcachedataonread
shouldcachedataonwrite
shouldcacheindexesonwrite
shouldcachebloomsonwrite
shouldevictonclose
shouldcachecompressed
// static block cache reference and methods
/**
* static reference to the block cache, or null if no caching should be used
* at all.
*/
private static blockcache globalblockcache
/** boolean whether we have disabled the block cache entirely. */
private static boolean blockcachedisabled   false
/**
* returns the block cache or <code>null</code> in case none should be used.
*
* @param conf  the current configuration.
* @return the block cache or <code>null</code>.
*/
private static synchronized blockcache instantiateblockcache
configuration conf
if  globalblockcache    null  return globalblockcache
if  blockcachedisabled  return null
float cachepercentage   conf getfloat hconstants hfile_block_cache_size_key
hconstants hfile_block_cache_size_default
if  cachepercentage    0l
blockcachedisabled   true
return null
if  cachepercentage > 1 0
throw new illegalargumentexception hconstants hfile_block_cache_size_key
// calculate the amount of heap to give the heap.
memoryusage mu   managementfactory getmemorymxbean   getheapmemoryusage
long cachesize    long  mu getmax     cachepercentage
int blocksize   conf getint
hfile default_blocksize
long offheapcachesize
long   conf getfloat     float  0
directmemoryutils getdirectmemorysize
log info
stringutils humanreadableint cachesize
if  offheapcachesize <  0
globalblockcache   new lrublockcache cachesize
storefile default_blocksize_small
else
globalblockcache   new doubleblockcache cachesize  offheapcachesize
storefile default_blocksize_small  blocksize  conf
return globalblockcache