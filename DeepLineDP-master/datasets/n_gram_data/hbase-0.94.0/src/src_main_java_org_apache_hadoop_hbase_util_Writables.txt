/**
* copyright 2010 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase util
import org apache hadoop hbase hregioninfo
import org apache hadoop hbase migration hregioninfo090x
import org apache hadoop io datainputbuffer
import org apache hadoop io writable
import java io bytearrayinputstream
import java io bytearrayoutputstream
import java io datainputstream
import java io dataoutputstream
import java io ioexception
import java util arraylist
import java util list
/**
* utility class with methods for manipulating writable objects
*/
public class writables
/**
* @param w writable
* @return the bytes of <code>w</code> gotten by running its
* {@link writable#write(java.io.dataoutput)} method.
* @throws ioexception e
* @see #getwritable(byte[], writable)
*/
public static byte  getbytes final writable w  throws ioexception
if  w    null
throw new illegalargumentexception
bytearrayoutputstream bytestream   new bytearrayoutputstream
dataoutputstream out   new dataoutputstream bytestream
try
w write out
out close
out   null
return bytestream tobytearray
finally
if  out    null
out close
/**
* put a bunch of writables as bytes all into the one byte array.
* @param ws writable
* @return the bytes of <code>w</code> gotten by running its
* {@link writable#write(java.io.dataoutput)} method.
* @throws ioexception e
* @see #gethregioninfos(byte[], int, int)
*/
public static byte  getbytes final writable    ws  throws ioexception
list<byte > bytes   new arraylist<byte >
int size   0
for  writable w  ws
byte  b   getbytes w
size    b length
bytes add b
byte  result   new byte
int offset   0
for  byte  b  bytes
system arraycopy b  0  result  offset  b length
offset    b length
return result
/**
* set bytes into the passed writable by calling its
* {@link writable#readfields(java.io.datainput)}.
* @param bytes serialized bytes
* @param w an empty writable (usually made by calling the null-arg
* constructor).
* @return the passed writable after its readfields has been called fed
* by the passed <code>bytes</code> array or illegalargumentexception
* if passed null or an empty <code>bytes</code> array.
* @throws ioexception e
* @throws illegalargumentexception
*/
public static writable getwritable final byte  bytes  final writable w
throws ioexception
return getwritable bytes  0  bytes length  w
/**
* set bytes into the passed writable by calling its
* {@link writable#readfields(java.io.datainput)}.
* @param bytes serialized bytes
* @param offset offset into array
* @param length length of data
* @param w an empty writable (usually made by calling the null-arg
* constructor).
* @return the passed writable after its readfields has been called fed
* by the passed <code>bytes</code> array or illegalargumentexception
* if passed null or an empty <code>bytes</code> array.
* @throws ioexception e
* @throws illegalargumentexception
*/
public static writable getwritable final byte  bytes  final int offset
final int length  final writable w
throws ioexception
if  bytes    null    length < 0
throw new illegalargumentexception
if  w    null
throw new illegalargumentexception
datainputbuffer in   new datainputbuffer
try
in reset bytes  offset  length
w readfields in
return w
finally
in close
/**
* @param bytes serialized bytes
* @return a hregioninfo instance built out of passed <code>bytes</code>.
* @throws ioexception e
*/
public static hregioninfo gethregioninfo final byte  bytes
throws ioexception
return  hregioninfo getwritable bytes  new hregioninfo
/**
* @param bytes serialized bytes
* @return all the hregioninfos that are in the byte array.  keeps reading
* till we hit the end.
* @throws ioexception e
*/
public static list<hregioninfo> gethregioninfos final byte  bytes
final int offset  final int length
throws ioexception
if  bytes    null
throw new illegalargumentexception
datainputbuffer in   new datainputbuffer
list<hregioninfo> hris   new arraylist<hregioninfo>
try
in reset bytes  offset  length
while  in available   > 0
hregioninfo hri   new hregioninfo
hri readfields in
hris add hri
finally
in close
return hris
/**
* @param bytes serialized bytes
* @return a hregioninfo instance built out of passed <code>bytes</code>
* or <code>null</code> if passed bytes are null or an empty array.
* @throws ioexception e
*/
public static hregioninfo gethregioninfoornull final byte  bytes
throws ioexception
return  bytes    null    bytes length <  0 ?
null   gethregioninfo bytes
/**
* copy one writable to another.  copies bytes using data streams.
* @param src source writable
* @param tgt target writable
* @return the target writable.
* @throws ioexception e
*/
public static writable copywritable final writable src  final writable tgt
throws ioexception
return copywritable getbytes src   tgt
/**
* copy one writable to another.  copies bytes using data streams.
* @param bytes source writable
* @param tgt target writable
* @return the target writable.
* @throws ioexception e
*/
public static writable copywritable final byte  bytes  final writable tgt
throws ioexception
datainputstream dis   new datainputstream new bytearrayinputstream bytes
try
tgt readfields dis
finally
dis close
return tgt