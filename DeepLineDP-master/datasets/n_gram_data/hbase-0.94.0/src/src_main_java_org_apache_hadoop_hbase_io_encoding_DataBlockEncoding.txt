/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements. see the notice file distributed with this
* work for additional information regarding copyright ownership. the asf
* licenses this file to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
* http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis, without
* warranties or conditions of any kind, either express or implied. see the
* license for the specific language governing permissions and limitations
* under the license.
*/
package org apache hadoop hbase io encoding
import java io ioexception
import java io outputstream
import java util arraylist
import java util hashmap
import java util list
import java util map
import org apache hadoop hbase util bytes
/**
* provide access to all data block encoding algorithms. all of the algorithms
* are required to have unique id which should <b>never</b> be changed. if you
* want to add a new algorithm/version, assign it a new id. announce the new id
* in the hbase mailing list to prevent collisions.
*/
public enum datablockencoding
/** disable data block encoding. */
none 0  null
// id 1 is reserved for the bitset algorithm to be added later
prefix 2  new prefixkeydeltaencoder
diff 3  new diffkeydeltaencoder
fast_diff 4  new fastdiffdeltaencoder
private final short id
private final byte idinbytes
private final datablockencoder encoder
public static final int id_size   bytes sizeof_short
/** maps data block encoding ids to enum instances. */
private static map<short  datablockencoding> idtoencoding
new hashmap<short  datablockencoding>
static
for  datablockencoding algo   values
if  idtoencoding containskey algo id
throw new runtimeexception string format
idtoencoding get algo id  tostring    algo tostring
int  algo id
idtoencoding put algo id  algo
private datablockencoding int id  datablockencoder encoder
if  id < short min_value    id > short max_value
throw new assertionerror
id
this id    short  id
this idinbytes   bytes tobytes this id
if  idinbytes length    id_size
// white this may seem redundant, if we accidentally serialize
// the id as e.g. an int instead of a short, all encoders will break.
throw new runtimeexception
bytes tostringbinary idinbytes
this encoder   encoder
/**
* @return name converted to bytes.
*/
public byte getnameinbytes
return bytes tobytes tostring
/**
* @return the id of a data block encoder.
*/
public short getid
return id
/**
* writes id in bytes.
* @param stream where the id should be written.
*/
public void writeidinbytes outputstream stream  throws ioexception
stream write idinbytes
/**
* return new data block encoder for given algorithm type.
* @return data block encoder if algorithm is specified, null if none is
*         selected.
*/
public datablockencoder getencoder
return encoder
/**
* provide access to all data block encoders, even those which are not
* exposed in the enum. useful for testing and benchmarking.
* @return list of all data block encoders.
*/
public static list<datablockencoder> getallencoders
arraylist<datablockencoder> encoders   new arraylist<datablockencoder>
for  datablockencoding algo   values
datablockencoder encoder   algo getencoder
if  encoder    null
encoders add encoder
// add encoders that are only used in testing.
encoders add new copykeydatablockencoder
return encoders
/**
* find and create data block encoder for given id;
* @param encoderid id of data block encoder.
* @return newly created data block encoder.
*/
public static datablockencoder getdatablockencoderbyid short encoderid
if   idtoencoding containskey encoderid
throw new illegalargumentexception string format
int  encoderid
return idtoencoding get encoderid  getencoder
/**
* find and return the name of data block encoder for the given id.
* @param encoderid id of data block encoder
* @return name, same as used in options in column family
*/
public static string getnamefromid short encoderid
return idtoencoding get encoderid  tostring
/**
* check if given encoder has this id.
* @param encoder encoder which id will be checked
* @param encoderid id which we except
* @return true if id is right for given encoder, false otherwise
* @exception illegalargumentexception
*            thrown when there is no matching data block encoder
*/
public static boolean iscorrectencoder datablockencoder encoder
short encoderid
if   idtoencoding containskey encoderid
throw new illegalargumentexception string format
int  encoderid
datablockencoding algorithm   idtoencoding get encoderid
return algorithm getclass   equals encoder getclass
public static datablockencoding getencodingbyid short datablockencodingid
return idtoencoding get datablockencodingid