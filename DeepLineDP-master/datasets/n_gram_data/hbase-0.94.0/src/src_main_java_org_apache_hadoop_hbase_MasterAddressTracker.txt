/**
* copyright 2010 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase
import org apache hadoop hbase util bytes
import org apache hadoop hbase zookeeper zookeepernodetracker
import org apache hadoop hbase zookeeper zookeeperwatcher
/**
* manages the location of the current active master for this regionserver.
* <p>
* listens for zookeeper events related to the master address. the node
* <code>/master</code> will contain the address of the current master.
* this listener is interested in
* <code>nodedeleted</code> and <code>nodecreated</code> events on
* <code>/master</code>.
* <p>
* utilizes {@link zookeepernodetracker} for zk interactions.
* <p>
* you can get the current master via {@link #getmasteraddress()}
*/
public class masteraddresstracker extends zookeepernodetracker
/**
* construct a master address listener with the specified
* <code>zookeeper</code> reference.
* <p>
* this constructor does not trigger any actions, you must call methods
* explicitly.  normally you will just want to execute {@link #start()} to
* begin tracking of the master address.
*
* @param watcher zk reference and watcher
* @param abortable abortable in case of fatal error
*/
public masteraddresstracker zookeeperwatcher watcher  abortable abortable
super watcher  watcher masteraddressznode  abortable
/**
* get the address of the current master if one is available.  returns null
* if no current master.
* @return server name or null if timed out.
*/
public servername getmasteraddress
return bytestoservername super getdata false
/**
* check if there is a master available.
* @return true if there is a master set, false if not.
*/
public boolean hasmaster
return super getdata false     null
/**
* @param bytes byte array of {@link servername#tostring()}
* @return a {@link servername} instance.
*/
private servername bytestoservername final byte  bytes
return bytes    null ? null  servername parseversionedservername bytes