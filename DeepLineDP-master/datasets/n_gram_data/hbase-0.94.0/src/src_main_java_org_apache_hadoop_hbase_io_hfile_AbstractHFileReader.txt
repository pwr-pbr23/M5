/*
* copyright 2011 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase io hfile
import java io ioexception
import java nio bytebuffer
import java util concurrent atomic atomiclong
import org apache hadoop fs fsdatainputstream
import org apache hadoop fs path
import org apache hadoop hbase keyvalue
import org apache hadoop hbase fs hfilesystem
import org apache hadoop hbase io encoding datablockencoding
import org apache hadoop hbase io hfile hfile fileinfo
import org apache hadoop hbase regionserver metrics schemaconfigured
import org apache hadoop io rawcomparator
/**
* common functionality needed by all versions of {@link hfile} readers.
*/
public abstract class abstracthfilereader extends schemaconfigured
implements hfile reader
/** filesystem-level block reader for this hfile format version. */
protected hfileblock fsreader fsblockreader
/** stream to read from. does checksum verifications in file system */
protected fsdatainputstream istream
/** the file system stream of the underlying {@link hfile} that
* does not do checksum verification in the file system */
protected fsdatainputstream istreamnofschecksum
/**
* true if we should close the input stream when done. we don't close it if we
* didn't open it.
*/
protected final boolean closeistream
/** data block index reader keeping the root data index in memory */
protected hfileblockindex blockindexreader datablockindexreader
/** meta block index reader -- always single level */
protected hfileblockindex blockindexreader metablockindexreader
protected final fixedfiletrailer trailer
/** filled when we read in the trailer. */
protected final compression algorithm compressalgo
/**
* what kind of data block encoding should be used while reading, writing,
* and handling cache.
*/
protected hfiledatablockencoder datablockencoder
noopdatablockencoder instance
/** last key in the file. filled in when we read in the file info */
protected byte  lastkey   null
/** average key length read from file info */
protected int avgkeylen    1
/** average value length read from file info */
protected int avgvaluelen    1
/** key comparator */
protected rawcomparator<byte > comparator
/** size of this file. */
protected final long filesize
/** block cache configuration. */
protected final cacheconfig cacheconf
protected atomiclong cachehits   new atomiclong
protected atomiclong blockloads   new atomiclong
protected atomiclong metaloads   new atomiclong
/** path of file */
protected final path path
/** file name to be used for block names */
protected final string name
protected fileinfo fileinfo
/** the filesystem used for accesing data */
protected hfilesystem hfs
protected abstracthfilereader path path  fixedfiletrailer trailer
final fsdatainputstream fsdis  final long filesize
final boolean closeistream
final cacheconfig cacheconf
this path  trailer  fsdis  fsdis  filesize  closeistream  cacheconf  null
protected abstracthfilereader path path  fixedfiletrailer trailer
final fsdatainputstream fsdis  final fsdatainputstream fsdisnofschecksum
final long filesize
final boolean closeistream
final cacheconfig cacheconf  final hfilesystem hfs
super null  path
this trailer   trailer
this compressalgo   trailer getcompressioncodec
this cacheconf   cacheconf
this filesize   filesize
this istream   fsdis
this closeistream   closeistream
this path   path
this name   path getname
this hfs   hfs
this istreamnofschecksum   fsdisnofschecksum
@suppresswarnings
public static class blockindexnotloadedexception
extends illegalstateexception
public blockindexnotloadedexception
// add a message in case anyone relies on it as opposed to class name.
super
protected string tostringfirstkey
return keyvalue keytostring getfirstkey
protected string tostringlastkey
return keyvalue keytostring getlastkey
public abstract boolean isfileinfoloaded
@override
public string tostring
return     path tostring
isfileinfoloaded  ?
compressalgo getname
cacheconf
tostringfirstkey
tostringlastkey
avgkeylen
avgvaluelen
trailer getentrycount
filesize
@override
public long length
return filesize
/**
* create a scanner on this file. no seeks or reads are done on creation. call
* {@link hfilescanner#seekto(byte[])} to position an start the read. there is
* nothing to clean up in a scanner. letting go of your references to the
* scanner is sufficient. note: do not use this overload of getscanner for
* compactions.
*
* @param cacheblocks true if we should cache blocks read in by this scanner.
* @param pread use positional read rather than seek+read if true (pread is
*          better for random reads, seek+read is better scanning).
* @return scanner on this file.
*/
@override
public hfilescanner getscanner boolean cacheblocks  final boolean pread
return getscanner cacheblocks  pread  false
/**
* @return the first key in the file. may be null if file has no entries. note
*         that this is not the first row key, but rather the byte form of the
*         first keyvalue.
*/
@override
public byte  getfirstkey
if  datablockindexreader    null
throw new blockindexnotloadedexception
return datablockindexreader isempty   ? null
datablockindexreader getrootblockkey 0
/**
* todo left from {@link hfile} version 1: move this to storefile after ryan's
* patch goes in to eliminate {@link keyvalue} here.
*
* @return the first row key, or null if the file is empty.
*/
@override
public byte getfirstrowkey
byte firstkey   getfirstkey
if  firstkey    null
return null
return keyvalue createkeyvaluefromkey firstkey  getrow
/**
* todo left from {@link hfile} version 1: move this to storefile after
* ryan's patch goes in to eliminate {@link keyvalue} here.
*
* @return the last row key, or null if the file is empty.
*/
@override
public byte getlastrowkey
byte lastkey   getlastkey
if  lastkey    null
return null
return keyvalue createkeyvaluefromkey lastkey  getrow
/** @return number of kv entries in this hfile */
@override
public long getentries
return trailer getentrycount
/** @return comparator */
@override
public rawcomparator<byte > getcomparator
return comparator
/** @return compression algorithm */
@override
public compression algorithm getcompressionalgorithm
return compressalgo
/**
* @return the total heap size of data and meta block indexes in bytes. does
*         not take into account non-root blocks of a multilevel data index.
*/
public long indexsize
return  datablockindexreader    null ? datablockindexreader heapsize     0
metablockindexreader    null  ? metablockindexreader heapsize
0
@override
public string getname
return name
@override
public hfileblockindex blockindexreader getdatablockindexreader
return datablockindexreader
@override
public fixedfiletrailer gettrailer
return trailer
@override
public fileinfo loadfileinfo   throws ioexception
return fileinfo
/**
* an exception thrown when an operation requiring a scanner to be seeked
* is invoked on a scanner that is not seeked.
*/
@suppresswarnings
public static class notseekedexception extends illegalstateexception
public notseekedexception
super
protected static abstract class scanner implements hfilescanner
protected bytebuffer blockbuffer
protected boolean cacheblocks
protected final boolean pread
protected final boolean iscompaction
protected int currkeylen
protected int currvaluelen
protected int currmemstoretslen
protected long currmemstorets
protected int blockfetches
protected final hfile reader reader
public scanner final hfile reader reader  final boolean cacheblocks
final boolean pread  final boolean iscompaction
this reader   reader
this cacheblocks   cacheblocks
this pread   pread
this iscompaction   iscompaction
@override
public boolean isseeked
return blockbuffer    null
@override
public string tostring
return     string valueof getreader
protected void assertseeked
if   isseeked
throw new notseekedexception
@override
public int seekto byte key  throws ioexception
return seekto key  0  key length
@override
public boolean seekbefore byte key  throws ioexception
return seekbefore key  0  key length
@override
public int reseekto byte key  throws ioexception
return reseekto key  0  key length
@override
public hfile reader getreader
return reader
/** for testing */
hfileblock fsreader getuncachedblockreader
return fsblockreader
public path getpath
return path
@override
public datablockencoding getencodingondisk
return datablockencoder getencodingondisk