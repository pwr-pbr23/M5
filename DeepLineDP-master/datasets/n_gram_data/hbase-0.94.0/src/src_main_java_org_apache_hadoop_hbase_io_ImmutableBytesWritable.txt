/**
* copyright 2009 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase io
import java io ioexception
import java io datainput
import java io dataoutput
import java util arrays
import java util list
import org apache hadoop io byteswritable
import org apache hadoop io writablecomparable
import org apache hadoop io writablecomparator
/**
* a byte sequence that is usable as a key or value.  based on
* {@link org.apache.hadoop.io.byteswritable} only this class is not resizable
* and does not distinguish between the size of the seqeunce and the current
* capacity as {@link org.apache.hadoop.io.byteswritable} does. hence its
* comparatively 'immutable'. when creating a new instance of this class,
* the underlying byte [] is not copied, just referenced.  the backing
* buffer is accessed when we go to serialize.
*/
public class immutablebyteswritable
implements writablecomparable<immutablebyteswritable>
private byte bytes
private int offset
private int length
/**
* create a zero-size sequence.
*/
public immutablebyteswritable
super
/**
* create a immutablebyteswritable using the byte array as the initial value.
* @param bytes this array becomes the backing storage for the object.
*/
public immutablebyteswritable byte bytes
this bytes  0  bytes length
/**
* set the new immutablebyteswritable to the contents of the passed
* <code>ibw</code>.
* @param ibw the value to set this immutablebyteswritable to.
*/
public immutablebyteswritable final immutablebyteswritable ibw
this ibw get    0  ibw getsize
/**
* set the value to a given byte range
* @param bytes the new byte range to set to
* @param offset the offset in newdata to start at
* @param length the number of bytes in the range
*/
public immutablebyteswritable final byte bytes  final int offset
final int length
this bytes   bytes
this offset   offset
this length   length
/**
* get the data from the byteswritable.
* @return the data is only valid between offset and offset+length.
*/
public byte  get
if  this bytes    null
throw new illegalstateexception
return this bytes
/**
* @param b use passed bytes as backing array for this instance.
*/
public void set final byte  b
set b  0  b length
/**
* @param b use passed bytes as backing array for this instance.
* @param offset
* @param length
*/
public void set final byte  b  final int offset  final int length
this bytes   b
this offset   offset
this length   length
/**
* @return the number of valid bytes in the buffer
*/
public int getsize
if  this bytes    null
throw new illegalstateexception
return this length
/**
* @return the number of valid bytes in the buffer
*/
//should probably deprecate getsize() so that we keep the same calls for all
//byte []
public int getlength
if  this bytes    null
throw new illegalstateexception
return this length
/**
* @return offset
*/
public int getoffset
return this offset
public void readfields final datainput in  throws ioexception
this length   in readint
this bytes   new byte
in readfully this bytes  0  this length
this offset   0
public void write final dataoutput out  throws ioexception
out writeint this length
out write this bytes  this offset  this length
// below methods copied from byteswritable
@override
public int hashcode
int hash   1
for  int i   offset  i < offset   length  i
hash    31   hash     int bytes
return hash
/**
* define the sort order of the byteswritable.
* @param that the other bytes writable
* @return positive if left is bigger than right, 0 if they are equal, and
*         negative if left is smaller than right.
*/
public int compareto immutablebyteswritable that
return writablecomparator comparebytes
this bytes  this offset  this length
that bytes  that offset  that length
/**
* compares the bytes in this object to the specified byte array
* @param that
* @return positive if left is bigger than right, 0 if they are equal, and
*         negative if left is smaller than right.
*/
public int compareto final byte  that
return writablecomparator comparebytes
this bytes  this offset  this length
that  0  that length
/**
* @see java.lang.object#equals(java.lang.object)
*/
@override
public boolean equals object right_obj
if  right_obj instanceof byte
return compareto  byte  right_obj     0
if  right_obj instanceof immutablebyteswritable
return compareto  immutablebyteswritable right_obj     0
return false
/**
* @see java.lang.object#tostring()
*/
@override
public string tostring
stringbuilder sb   new stringbuilder 3 this bytes length
for  int idx   offset  idx < offset   length  idx
// if not the first, put a blank separator in
if  idx    offset
sb append
string num   integer tohexstring bytes
// if it is only one digit, add a leading 0.
if  num length   < 2
sb append
sb append num
return sb tostring
/** a comparator optimized for immutablebyteswritable.
*/
public static class comparator extends writablecomparator
private byteswritable comparator comparator
new byteswritable comparator
/** constructor */
public comparator
super immutablebyteswritable class
/**
* @see org.apache.hadoop.io.writablecomparator#compare(byte[], int, int, byte[], int, int)
*/
@override
public int compare byte b1  int s1  int l1  byte b2  int s2  int l2
return comparator compare b1  s1  l1  b2  s2  l2
static      register this comparator
writablecomparator define immutablebyteswritable class  new comparator
/**
* @param array list of byte [].
* @return array of byte [].
*/
public static byte  toarray final list<byte > array
// list#toarray doesn't work on lists of byte [].
byte results   new byte
for  int i   0  i < array size    i
results   array get i
return results
/**
* returns a copy of the bytes referred to by this writable
*/
public byte copybytes
return arrays copyofrange bytes  offset  offset length