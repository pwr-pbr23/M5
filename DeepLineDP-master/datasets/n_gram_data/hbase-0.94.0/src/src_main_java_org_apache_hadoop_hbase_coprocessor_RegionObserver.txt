/*
* copyright 2010 the apache software foundation
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase coprocessor
import java io ioexception
import java util list
import org apache hadoop hbase coprocessor
import org apache hadoop hbase hregioninfo
import org apache hadoop hbase keyvalue
import org apache hadoop hbase client append
import org apache hadoop hbase client delete
import org apache hadoop hbase client get
import org apache hadoop hbase client increment
import org apache hadoop hbase client put
import org apache hadoop hbase client result
import org apache hadoop hbase client scan
import org apache hadoop hbase filter comparefilter compareop
import org apache hadoop hbase filter writablebytearraycomparable
import org apache hadoop hbase regionserver hregion
import org apache hadoop hbase regionserver internalscanner
import org apache hadoop hbase regionserver regionscanner
import org apache hadoop hbase regionserver store
import org apache hadoop hbase regionserver storefile
import org apache hadoop hbase regionserver wal hlogkey
import org apache hadoop hbase regionserver wal waledit
import com google common collect immutablelist
/**
* coprocessors implement this interface to observe and mediate client actions
* on the region.
*/
public interface regionobserver extends coprocessor
/**
* called before the region is reported as open to the master.
* @param c the environment provided by the region server
*/
void preopen final observercontext<regioncoprocessorenvironment> c
/**
* called after the region is reported as open to the master.
* @param c the environment provided by the region server
*/
void postopen final observercontext<regioncoprocessorenvironment> c
/**
* called before the memstore is flushed to disk.
* @param c the environment provided by the region server
*/
void preflush final observercontext<regioncoprocessorenvironment> c
/**
* called after the memstore is flushed to disk.
* @param c the environment provided by the region server
*/
void postflush final observercontext<regioncoprocessorenvironment> c
/**
* called prior to selecting the {@link storefile}s to compact from the list
* of available candidates.  to alter the files used for compaction, you may
* mutate the passed in list of candidates.
* @param c the environment provided by the region server
* @param store the store where compaction is being requested
* @param candidates the store files currently available for compaction
*/
void precompactselection final observercontext<regioncoprocessorenvironment> c
final store store  final list<storefile> candidates
/**
* called after the {@link storefile}s to compact have been selected from the
* available candidates.
* @param c the environment provided by the region server
* @param store the store being compacted
* @param selected the store files selected to compact
*/
void postcompactselection final observercontext<regioncoprocessorenvironment> c
final store store  final immutablelist<storefile> selected
/**
* called prior to writing the {@link storefile}s selected for compaction into
* a new {@code storefile}.  to override or modify the compaction process,
* implementing classes have two options:
* <ul>
*   <li>wrap the provided {@link internalscanner} with a custom
*   implementation that is returned from this method.  the custom scanner
*   can then inspect {@link keyvalue}s from the wrapped scanner, applying
*   its own policy to what gets written.</li>
*   <li>call {@link org.apache.hadoop.hbase.coprocessor.observercontext#bypass()}
*   and provide a custom implementation for writing of new
*   {@link storefile}s.  <strong>note: any implementations bypassing
*   core compaction using this approach must write out new store files
*   themselves or the existing data will no longer be available after
*   compaction.</strong></li>
* </ul>
* @param c the environment provided by the region server
* @param store the store being compacted
* @param scanner the scanner over existing data used in the store file
* rewriting
* @return the scanner to use during compaction.  should not be {@code null}
* unless the implementation is writing new store files on its own.
*/
internalscanner precompact final observercontext<regioncoprocessorenvironment> c
final store store  final internalscanner scanner
/**
* called after compaction has completed and the new store file has been
* moved in to place.
* @param c the environment provided by the region server
* @param store the store being compacted
* @param resultfile the new store file written out during compaction
*/
void postcompact final observercontext<regioncoprocessorenvironment> c
final store store  storefile resultfile
/**
* called before the region is split.
* @param c the environment provided by the region server
* (e.getregion() returns the parent region)
*/
void presplit final observercontext<regioncoprocessorenvironment> c
/**
* called after the region is split.
* @param c the environment provided by the region server
* (e.getregion() returns the parent region)
* @param l the left daughter region
* @param r the right daughter region
*/
void postsplit final observercontext<regioncoprocessorenvironment> c  final hregion l
final hregion r
/**
* called before the region is reported as closed to the master.
* @param c the environment provided by the region server
* @param abortrequested true if the region server is aborting
*/
void preclose final observercontext<regioncoprocessorenvironment> c
boolean abortrequested
/**
* called after the region is reported as closed to the master.
* @param c the environment provided by the region server
* @param abortrequested true if the region server is aborting
*/
void postclose final observercontext<regioncoprocessorenvironment> c
boolean abortrequested
/**
* called before a client makes a getclosestrowbefore request.
* <p>
* call coprocessorenvironment#bypass to skip default actions
* <p>
* call coprocessorenvironment#complete to skip any subsequent chained
* coprocessors
* @param c the environment provided by the region server
* @param row the row
* @param family the family
* @param result the result to return to the client if default processing
* is bypassed. can be modified. will not be used if default processing
* is not bypassed.
* @throws ioexception if an error occurred on the coprocessor
*/
void pregetclosestrowbefore final observercontext<regioncoprocessorenvironment> c
final byte  row  final byte  family  final result result
throws ioexception
/**
* called after a client makes a getclosestrowbefore request.
* <p>
* call coprocessorenvironment#complete to skip any subsequent chained
* coprocessors
* @param c the environment provided by the region server
* @param row the row
* @param family the desired family
* @param result the result to return to the client, modify as necessary
* @throws ioexception if an error occurred on the coprocessor
*/
void postgetclosestrowbefore final observercontext<regioncoprocessorenvironment> c
final byte  row  final byte  family  final result result
throws ioexception
/**
* called before the client performs a get
* <p>
* call coprocessorenvironment#bypass to skip default actions
* <p>
* call coprocessorenvironment#complete to skip any subsequent chained
* coprocessors
* @param c the environment provided by the region server
* @param get the get request
* @param result the result to return to the client if default processing
* is bypassed. can be modified. will not be used if default processing
* is not bypassed.
* @throws ioexception if an error occurred on the coprocessor
*/
void preget final observercontext<regioncoprocessorenvironment> c  final get get
final list<keyvalue> result
throws ioexception
/**
* called after the client performs a get
* <p>
* call coprocessorenvironment#complete to skip any subsequent chained
* coprocessors
* @param c the environment provided by the region server
* @param get the get request
* @param result the result to return to the client, modify as necessary
* @throws ioexception if an error occurred on the coprocessor
*/
void postget final observercontext<regioncoprocessorenvironment> c  final get get
final list<keyvalue> result
throws ioexception
/**
* called before the client tests for existence using a get.
* <p>
* call coprocessorenvironment#bypass to skip default actions
* <p>
* call coprocessorenvironment#complete to skip any subsequent chained
* coprocessors
* @param c the environment provided by the region server
* @param get the get request
* @param exists
* @return the value to return to the client if bypassing default processing
* @throws ioexception if an error occurred on the coprocessor
*/
boolean preexists final observercontext<regioncoprocessorenvironment> c  final get get
final boolean exists
throws ioexception
/**
* called after the client tests for existence using a get.
* <p>
* call coprocessorenvironment#complete to skip any subsequent chained
* coprocessors
* @param c the environment provided by the region server
* @param get the get request
* @param exists the result returned by the region server
* @return the result to return to the client
* @throws ioexception if an error occurred on the coprocessor
*/
boolean postexists final observercontext<regioncoprocessorenvironment> c  final get get
final boolean exists
throws ioexception
/**
* called before the client stores a value.
* <p>
* call coprocessorenvironment#bypass to skip default actions
* <p>
* call coprocessorenvironment#complete to skip any subsequent chained
* coprocessors
* @param c the environment provided by the region server
* @param put the put object
* @param edit the waledit object that will be written to the wal
* @param writetowal true if the change should be written to the wal
* @throws ioexception if an error occurred on the coprocessor
*/
void preput final observercontext<regioncoprocessorenvironment> c
final put put  final waledit edit  final boolean writetowal
throws ioexception
/**
* called after the client stores a value.
* <p>
* call coprocessorenvironment#complete to skip any subsequent chained
* coprocessors
* @param c the environment provided by the region server
* @param put the put object
* @param edit the waledit object for the wal
* @param writetowal true if the change should be written to the wal
* @throws ioexception if an error occurred on the coprocessor
*/
void postput final observercontext<regioncoprocessorenvironment> c
final put put  final waledit edit  final boolean writetowal
throws ioexception
/**
* called before the client deletes a value.
* <p>
* call coprocessorenvironment#bypass to skip default actions
* <p>
* call coprocessorenvironment#complete to skip any subsequent chained
* coprocessors
* @param c the environment provided by the region server
* @param delete the delete object
* @param edit the waledit object for the wal
* @param writetowal true if the change should be written to the wal
* @throws ioexception if an error occurred on the coprocessor
*/
void predelete final observercontext<regioncoprocessorenvironment> c
final delete delete  final waledit edit  final boolean writetowal
throws ioexception
/**
* called after the client deletes a value.
* <p>
* call coprocessorenvironment#complete to skip any subsequent chained
* coprocessors
* @param c the environment provided by the region server
* @param delete the delete object
* @param edit the waledit object for the wal
* @param writetowal true if the change should be written to the wal
* @throws ioexception if an error occurred on the coprocessor
*/
void postdelete final observercontext<regioncoprocessorenvironment> c
final delete delete  final waledit edit  final boolean writetowal
throws ioexception
/**
* called before checkandput
* <p>
* call coprocessorenvironment#bypass to skip default actions
* <p>
* call coprocessorenvironment#complete to skip any subsequent chained
* coprocessors
* @param c the environment provided by the region server
* @param row row to check
* @param family column family
* @param qualifier column qualifier
* @param compareop the comparison operation
* @param comparator the comparator
* @param put data to put if check succeeds
* @param result
* @return the return value to return to client if bypassing default
* processing
* @throws ioexception if an error occurred on the coprocessor
*/
boolean precheckandput final observercontext<regioncoprocessorenvironment> c
final byte  row  final byte  family  final byte  qualifier
final compareop compareop  final writablebytearraycomparable comparator
final put put  final boolean result
throws ioexception
/**
* called after checkandput
* <p>
* call coprocessorenvironment#complete to skip any subsequent chained
* coprocessors
* @param c the environment provided by the region server
* @param row row to check
* @param family column family
* @param qualifier column qualifier
* @param compareop the comparison operation
* @param comparator the comparator
* @param put data to put if check succeeds
* @param result from the checkandput
* @return the possibly transformed return value to return to client
* @throws ioexception if an error occurred on the coprocessor
*/
boolean postcheckandput final observercontext<regioncoprocessorenvironment> c
final byte  row  final byte  family  final byte  qualifier
final compareop compareop  final writablebytearraycomparable comparator
final put put  final boolean result
throws ioexception
/**
* called before checkanddelete
* <p>
* call coprocessorenvironment#bypass to skip default actions
* <p>
* call coprocessorenvironment#complete to skip any subsequent chained
* coprocessors
* @param c the environment provided by the region server
* @param row row to check
* @param family column family
* @param qualifier column qualifier
* @param compareop the comparison operation
* @param comparator the comparator
* @param delete delete to commit if check succeeds
* @param result
* @return the value to return to client if bypassing default processing
* @throws ioexception if an error occurred on the coprocessor
*/
boolean precheckanddelete final observercontext<regioncoprocessorenvironment> c
final byte  row  final byte  family  final byte  qualifier
final compareop compareop  final writablebytearraycomparable comparator
final delete delete  final boolean result
throws ioexception
/**
* called after checkanddelete
* <p>
* call coprocessorenvironment#complete to skip any subsequent chained
* coprocessors
* @param c the environment provided by the region server
* @param row row to check
* @param family column family
* @param qualifier column qualifier
* @param compareop the comparison operation
* @param comparator the comparator
* @param delete delete to commit if check succeeds
* @param result from the checkanddelete
* @return the possibly transformed returned value to return to client
* @throws ioexception if an error occurred on the coprocessor
*/
boolean postcheckanddelete final observercontext<regioncoprocessorenvironment> c
final byte  row  final byte  family  final byte  qualifier
final compareop compareop  final writablebytearraycomparable comparator
final delete delete  final boolean result
throws ioexception
/**
* called before incrementcolumnvalue
* <p>
* call coprocessorenvironment#bypass to skip default actions
* <p>
* call coprocessorenvironment#complete to skip any subsequent chained
* coprocessors
* @param c the environment provided by the region server
* @param row row to check
* @param family column family
* @param qualifier column qualifier
* @param amount long amount to increment
* @param writetowal true if the change should be written to the wal
* @return value to return to the client if bypassing default processing
* @throws ioexception if an error occurred on the coprocessor
*/
long preincrementcolumnvalue final observercontext<regioncoprocessorenvironment> c
final byte  row  final byte  family  final byte  qualifier
final long amount  final boolean writetowal
throws ioexception
/**
* called after incrementcolumnvalue
* <p>
* call coprocessorenvironment#complete to skip any subsequent chained
* coprocessors
* @param c the environment provided by the region server
* @param row row to check
* @param family column family
* @param qualifier column qualifier
* @param amount long amount to increment
* @param writetowal true if the change should be written to the wal
* @param result the result returned by incrementcolumnvalue
* @return the result to return to the client
* @throws ioexception if an error occurred on the coprocessor
*/
long postincrementcolumnvalue final observercontext<regioncoprocessorenvironment> c
final byte  row  final byte  family  final byte  qualifier
final long amount  final boolean writetowal  final long result
throws ioexception
/**
* called before append
* <p>
* call coprocessorenvironment#bypass to skip default actions
* <p>
* call coprocessorenvironment#complete to skip any subsequent chained
* coprocessors
* @param c the environment provided by the region server
* @param append append object
* @return result to return to the client if bypassing default processing
* @throws ioexception if an error occurred on the coprocessor
*/
result preappend final observercontext<regioncoprocessorenvironment> c
final append append
throws ioexception
/**
* called after append
* <p>
* call coprocessorenvironment#complete to skip any subsequent chained
* coprocessors
* @param c the environment provided by the region server
* @param append append object
* @param result the result returned by increment
* @return the result to return to the client
* @throws ioexception if an error occurred on the coprocessor
*/
result postappend final observercontext<regioncoprocessorenvironment> c
final append append  final result result
throws ioexception
/**
* called before increment
* <p>
* call coprocessorenvironment#bypass to skip default actions
* <p>
* call coprocessorenvironment#complete to skip any subsequent chained
* coprocessors
* @param c the environment provided by the region server
* @param increment increment object
* @return result to return to the client if bypassing default processing
* @throws ioexception if an error occurred on the coprocessor
*/
result preincrement final observercontext<regioncoprocessorenvironment> c
final increment increment
throws ioexception
/**
* called after increment
* <p>
* call coprocessorenvironment#complete to skip any subsequent chained
* coprocessors
* @param c the environment provided by the region server
* @param increment increment object
* @param result the result returned by increment
* @return the result to return to the client
* @throws ioexception if an error occurred on the coprocessor
*/
result postincrement final observercontext<regioncoprocessorenvironment> c
final increment increment  final result result
throws ioexception
/**
* called before the client opens a new scanner.
* <p>
* call coprocessorenvironment#bypass to skip default actions
* <p>
* call coprocessorenvironment#complete to skip any subsequent chained
* coprocessors
* @param c the environment provided by the region server
* @param scan the scan specification
* @param s if not null, the base scanner
* @return an regionscanner instance to use instead of the base scanner if
* overriding default behavior, null otherwise
* @throws ioexception if an error occurred on the coprocessor
*/
regionscanner prescanneropen final observercontext<regioncoprocessorenvironment> c
final scan scan  final regionscanner s
throws ioexception
/**
* called after the client opens a new scanner.
* <p>
* call coprocessorenvironment#complete to skip any subsequent chained
* coprocessors
* @param c the environment provided by the region server
* @param scan the scan specification
* @param s if not null, the base scanner
* @return the scanner instance to use
* @throws ioexception if an error occurred on the coprocessor
*/
regionscanner postscanneropen final observercontext<regioncoprocessorenvironment> c
final scan scan  final regionscanner s
throws ioexception
/**
* called before the client asks for the next row on a scanner.
* <p>
* call coprocessorenvironment#bypass to skip default actions
* <p>
* call coprocessorenvironment#complete to skip any subsequent chained
* coprocessors
* @param c the environment provided by the region server
* @param s the scanner
* @param result the result to return to the client if default processing
* is bypassed. can be modified. will not be returned if default processing
* is not bypassed.
* @param limit the maximum number of results to return
* @param hasnext the 'has more' indication
* @return 'has more' indication that should be sent to client
* @throws ioexception if an error occurred on the coprocessor
*/
boolean prescannernext final observercontext<regioncoprocessorenvironment> c
final internalscanner s  final list<result> result
final int limit  final boolean hasnext
throws ioexception
/**
* called after the client asks for the next row on a scanner.
* <p>
* call coprocessorenvironment#complete to skip any subsequent chained
* coprocessors
* @param c the environment provided by the region server
* @param s the scanner
* @param result the result to return to the client, can be modified
* @param limit the maximum number of results to return
* @param hasnext the 'has more' indication
* @return 'has more' indication that should be sent to client
* @throws ioexception if an error occurred on the coprocessor
*/
boolean postscannernext final observercontext<regioncoprocessorenvironment> c
final internalscanner s  final list<result> result  final int limit
final boolean hasnext
throws ioexception
/**
* called before the client closes a scanner.
* <p>
* call coprocessorenvironment#bypass to skip default actions
* <p>
* call coprocessorenvironment#complete to skip any subsequent chained
* coprocessors
* @param c the environment provided by the region server
* @param s the scanner
* @throws ioexception if an error occurred on the coprocessor
*/
void prescannerclose final observercontext<regioncoprocessorenvironment> c
final internalscanner s
throws ioexception
/**
* called after the client closes a scanner.
* <p>
* call coprocessorenvironment#complete to skip any subsequent chained
* coprocessors
* @param c the environment provided by the region server
* @param s the scanner
* @throws ioexception if an error occurred on the coprocessor
*/
void postscannerclose final observercontext<regioncoprocessorenvironment> c
final internalscanner s
throws ioexception
/**
* called before a {@link org.apache.hadoop.hbase.regionserver.wal.waledit}
* replayed for this region.
*
* @param ctx
* @param info
* @param logkey
* @param logedit
* @throws ioexception
*/
void prewalrestore final observercontext<regioncoprocessorenvironment> ctx
hregioninfo info  hlogkey logkey  waledit logedit  throws ioexception
/**
* called after a {@link org.apache.hadoop.hbase.regionserver.wal.waledit}
* replayed for this region.
*
* @param ctx
* @param info
* @param logkey
* @param logedit
* @throws ioexception
*/
void postwalrestore final observercontext<regioncoprocessorenvironment> ctx
hregioninfo info  hlogkey logkey  waledit logedit  throws ioexception