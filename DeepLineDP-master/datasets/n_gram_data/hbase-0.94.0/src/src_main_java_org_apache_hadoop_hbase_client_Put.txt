/*
* copyright 2010 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase client
import org apache hadoop hbase hconstants
import org apache hadoop hbase keyvalue
import org apache hadoop hbase io heapsize
import org apache hadoop hbase util bytes
import org apache hadoop hbase util classsize
import org apache hadoop io writable
import java io datainput
import java io dataoutput
import java io ioexception
import java util arraylist
import java util arrays
import java util list
import java util map
import java util treemap
/**
* used to perform put operations for a single row.
* <p>
* to perform a put, instantiate a put object with the row to insert to and
* for each column to be inserted, execute {@link #add(byte[], byte[], byte[]) add} or
* {@link #add(byte[], byte[], long, byte[]) add} if setting the timestamp.
*/
public class put extends mutation
implements heapsize  writable  comparable<row>
private static final byte put_version    byte 2
private static final long overhead   classsize align
classsize object   2   classsize reference
2   bytes sizeof_long   bytes sizeof_boolean
classsize reference   classsize treemap
/** constructor for writable. do not use */
public put
/**
* create a put operation for the specified row.
* @param row row key
*/
public put byte  row
this row  null
/**
* create a put operation for the specified row, using an existing row lock.
* @param row row key
* @param rowlock previously acquired row lock, or null
*/
public put byte  row  rowlock rowlock
this row  hconstants latest_timestamp  rowlock
/**
* create a put operation for the specified row, using a given timestamp.
*
* @param row row key
* @param ts timestamp
*/
public put byte row  long ts
this row  ts  null
/**
* create a put operation for the specified row, using a given timestamp, and an existing row lock.
* @param row row key
* @param ts timestamp
* @param rowlock previously acquired row lock, or null
*/
public put byte  row  long ts  rowlock rowlock
if row    null    row length > hconstants max_row_length
throw new illegalargumentexception
this row   arrays copyof row  row length
this ts   ts
if rowlock    null
this lockid   rowlock getlockid
/**
* copy constructor.  creates a put operation cloned from the specified put.
* @param puttocopy put to copy
*/
public put put puttocopy
this puttocopy getrow    puttocopy ts  puttocopy getrowlock
this familymap
new treemap<byte   list<keyvalue>> bytes bytes_comparator
for map entry<byte   list<keyvalue>> entry
puttocopy getfamilymap   entryset
this familymap put entry getkey    entry getvalue
this writetowal   puttocopy writetowal
/**
* add the specified column and value to this put operation.
* @param family family name
* @param qualifier column qualifier
* @param value column value
* @return this
*/
public put add byte  family  byte  qualifier  byte  value
return add family  qualifier  this ts  value
/**
* add the specified column and value, with the specified timestamp as
* its version to this put operation.
* @param family family name
* @param qualifier column qualifier
* @param ts version timestamp
* @param value column value
* @return this
*/
public put add byte  family  byte  qualifier  long ts  byte  value
list<keyvalue> list   getkeyvaluelist family
keyvalue kv   createputkeyvalue family  qualifier  ts  value
list add kv
familymap put kv getfamily    list
return this
/**
* add the specified keyvalue to this put operation.  operation assumes that
* the passed keyvalue is immutable and its backing array will not be modified
* for the duration of this put.
* @param kv individual keyvalue
* @return this
* @throws java.io.ioexception e
*/
public put add keyvalue kv  throws ioexception
byte  family   kv getfamily
list<keyvalue> list   getkeyvaluelist family
//checking that the row of the kv is the same as the put
int res   bytes compareto this row  0  row length
kv getbuffer    kv getrowoffset    kv getrowlength
if res    0
throw new ioexception
bytes tostringbinary kv getbuffer    kv getrowoffset
kv getrowlength
bytes tostringbinary this row
list add kv
familymap put family  list
return this
/*
* create a keyvalue with this objects row key and the put identifier.
*
* @return a keyvalue with this objects row key and the put identifier.
*/
private keyvalue createputkeyvalue byte family  byte qualifier  long ts
byte value
return  new keyvalue this row  family  qualifier  ts  keyvalue type put
value
/**
* a convenience method to determine if this object's familymap contains
* a value assigned to the given family & qualifier.
* both given arguments must match the keyvalue object to return true.
*
* @param family column family
* @param qualifier column qualifier
* @return returns true if the given family and qualifier already has an
* existing keyvalue object in the family map.
*/
public boolean has byte  family  byte  qualifier
return has family  qualifier  this ts  new byte  true  true
/**
* a convenience method to determine if this object's familymap contains
* a value assigned to the given family, qualifier and timestamp.
* all 3 given arguments must match the keyvalue object to return true.
*
* @param family column family
* @param qualifier column qualifier
* @param ts timestamp
* @return returns true if the given family, qualifier and timestamp already has an
* existing keyvalue object in the family map.
*/
public boolean has byte  family  byte  qualifier  long ts
return has family  qualifier  ts  new byte  false  true
/**
* a convenience method to determine if this object's familymap contains
* a value assigned to the given family, qualifier and timestamp.
* all 3 given arguments must match the keyvalue object to return true.
*
* @param family column family
* @param qualifier column qualifier
* @param value value to check
* @return returns true if the given family, qualifier and value already has an
* existing keyvalue object in the family map.
*/
public boolean has byte  family  byte  qualifier  byte  value
return has family  qualifier  this ts  value  true  false
/**
* a convenience method to determine if this object's familymap contains
* the given value assigned to the given family, qualifier and timestamp.
* all 4 given arguments must match the keyvalue object to return true.
*
* @param family column family
* @param qualifier column qualifier
* @param ts timestamp
* @param value value to check
* @return returns true if the given family, qualifier timestamp and value
* already has an existing keyvalue object in the family map.
*/
public boolean has byte  family  byte  qualifier  long ts  byte  value
return has family  qualifier  ts  value  false  false
/*
* private method to determine if this object's familymap contains
* the given value assigned to the given family, qualifier and timestamp
* respecting the 2 boolean arguments
*
* @param family
* @param qualifier
* @param ts
* @param value
* @param ignorets
* @param ignorevalue
* @return returns true if the given family, qualifier timestamp and value
* already has an existing keyvalue object in the family map.
*/
private boolean has byte  family  byte  qualifier  long ts  byte  value
boolean ignorets  boolean ignorevalue
list<keyvalue> list   getkeyvaluelist family
if  list size      0
return false
// boolean analysis of ignorets/ignorevalue.
// t t => 2
// t f => 3 (first is always true)
// f t => 2
// f f => 1
if   ignorets     ignorevalue
keyvalue kv   createputkeyvalue family  qualifier  ts  value
return  list contains kv
else if  ignorevalue
for  keyvalue kv  list
if  arrays equals kv getfamily    family     arrays equals kv getqualifier    qualifier
kv gettimestamp      ts
return true
else
// ignorets is always true
for  keyvalue kv  list
if  arrays equals kv getfamily    family     arrays equals kv getqualifier    qualifier
arrays equals kv getvalue    value
return true
return false
/**
* returns a list of all keyvalue objects with matching column family and qualifier.
*
* @param family column family
* @param qualifier column qualifier
* @return a list of keyvalue objects with the matching family and qualifier,
* returns an empty list if one doesnt exist for the given family.
*/
public list<keyvalue> get byte family  byte qualifier
list<keyvalue> filteredlist   new arraylist<keyvalue>
for  keyvalue kv  getkeyvaluelist family
if  arrays equals kv getqualifier    qualifier
filteredlist add kv
return filteredlist
/**
* creates an empty list if one doesnt exist for the given column family
* or else it returns the associated list of keyvalue objects.
*
* @param family column family
* @return a list of keyvalue objects, returns an empty list if one doesnt exist.
*/
private list<keyvalue> getkeyvaluelist byte family
list<keyvalue> list   familymap get family
if list    null
list   new arraylist<keyvalue> 0
return list
//heapsize
public long heapsize
long heapsize   overhead
//adding row
heapsize    classsize align classsize array   this row length
//adding map overhead
heapsize
classsize align this familymap size     classsize map_entry
for map entry<byte   list<keyvalue>> entry   this familymap entryset
//adding key overhead
heapsize
classsize align classsize array   entry getkey   length
//this part is kinds tricky since the jvm can reuse references if you
//store the same value, but have a good match with sizeof at the moment
//adding value overhead
heapsize    classsize align classsize arraylist
int size   entry getvalue   size
heapsize    classsize align classsize array
size   classsize reference
for keyvalue kv   entry getvalue
heapsize    kv heapsize
heapsize    getattributesize
return classsize align  int heapsize
//writable
public void readfields final datainput in
throws ioexception
int version   in readbyte
if  version > put_version
throw new ioexception
this row   bytes readbytearray in
this ts   in readlong
this lockid   in readlong
this writetowal   in readboolean
int numfamilies   in readint
if   this familymap isempty    this familymap clear
for int i 0 i<numfamilies i
byte  family   bytes readbytearray in
int numkeys   in readint
list<keyvalue> keys   new arraylist<keyvalue> numkeys
int totallen   in readint
byte  buf   new byte
int offset   0
for  int j   0  j < numkeys  j
int keylength   in readint
in readfully buf  offset  keylength
keys add new keyvalue buf  offset  keylength
offset    keylength
this familymap put family  keys
if  version > 1
readattributes in
public void write final dataoutput out
throws ioexception
out writebyte put_version
bytes writebytearray out  this row
out writelong this ts
out writelong this lockid
out writeboolean this writetowal
out writeint familymap size
for  map entry<byte   list<keyvalue>> entry   familymap entryset
bytes writebytearray out  entry getkey
list<keyvalue> keys   entry getvalue
out writeint keys size
int totallen   0
for keyvalue kv   keys
totallen    kv getlength
out writeint totallen
for keyvalue kv   keys
out writeint kv getlength
out write kv getbuffer    kv getoffset    kv getlength
writeattributes out