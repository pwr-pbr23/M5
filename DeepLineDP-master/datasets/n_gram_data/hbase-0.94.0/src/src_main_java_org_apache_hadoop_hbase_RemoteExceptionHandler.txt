/**
* copyright 2007 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase
import java io ioexception
import java lang reflect constructor
import java lang reflect invocationtargetexception
import org apache hadoop ipc remoteexception
/**
* an immutable class which contains a static method for handling
* org.apache.hadoop.ipc.remoteexception exceptions.
*/
public class remoteexceptionhandler
/* not instantiable */
private remoteexceptionhandler    super
/**
* examine passed throwable.  see if its carrying a remoteexception. if so,
* run {@link #decoderemoteexception(remoteexception)} on it.  otherwise,
* pass back <code>t</code> unaltered.
* @param t throwable to examine.
* @return decoded remoteexception carried by <code>t</code> or
* <code>t</code> unaltered.
*/
public static throwable checkthrowable final throwable t
throwable result   t
if  t instanceof remoteexception
try
result
remoteexceptionhandler decoderemoteexception  remoteexception t
catch  throwable tt
result   tt
return result
/**
* examine passed ioexception.  see if its carrying a remoteexception. if so,
* run {@link #decoderemoteexception(remoteexception)} on it.  otherwise,
* pass back <code>e</code> unaltered.
* @param e exception to examine.
* @return decoded remoteexception carried by <code>e</code> or
* <code>e</code> unaltered.
*/
public static ioexception checkioexception final ioexception e
throwable t   checkthrowable e
return t instanceof ioexception?  ioexception t  new ioexception t
/**
* converts org.apache.hadoop.ipc.remoteexception into original exception,
* if possible. if the original exception is an error or a runtimeexception,
* throws the original exception.
*
* @param re original exception
* @return decoded remoteexception if it is an instance of or a subclass of
*         ioexception, or the original remoteexception if it cannot be decoded.
*
* @throws ioexception indicating a server error ocurred if the decoded
*         exception is not an ioexception. the decoded exception is set as
*         the cause.
* @deprecated use {@link remoteexception#unwrapremoteexception()} instead.
* in fact we should look into deprecating this whole class - st.ack 2010929
*/
public static ioexception decoderemoteexception final remoteexception re
throws ioexception
ioexception i   re
try
class<?> c   class forname re getclassname
class<?> parametertypes     string class
constructor<?> ctor   c getconstructor parametertypes
object arguments     re getmessage
throwable t    throwable  ctor newinstance arguments
if  t instanceof ioexception
i    ioexception  t
else
i   new ioexception
i initcause t
throw i
catch  classnotfoundexception x
// continue
catch  nosuchmethodexception x
// continue
catch  illegalaccessexception x
// continue
catch  invocationtargetexception x
// continue
catch  instantiationexception x
// continue
return i