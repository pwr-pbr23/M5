/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements. see the notice file distributed with this
* work for additional information regarding copyright ownership. the asf
* licenses this file to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
* http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis, without
* warranties or conditions of any kind, either express or implied. see the
* license for the specific language governing permissions and limitations
* under the license.
*/
package org apache hadoop hbase io hfile
import java io ioexception
import java nio bytebuffer
import org apache hadoop hbase io encoding datablockencoding
import org apache hadoop hbase regionserver storefile
import org apache hadoop hbase util pair
/**
* controls what kind of data block encoding is used. if data block encoding is
* not set or the given block is not a data block (encoded or not), methods
* should just return the unmodified block.
*/
public interface hfiledatablockencoder
/**
* converts a block from the on-disk format to the in-cache format. called in
* the following cases:
* <ul>
* <li>after an encoded or unencoded data block is read from disk, but before
* it is put into the cache.</li>
* <li>to convert brand-new blocks to the in-cache format when doing
* cache-on-write.</li>
* </ul>
* @param block a block in an on-disk format (read from hfile or freshly
*          generated).
* @return non null block which is coded according to the settings.
*/
public hfileblock disktocacheformat hfileblock block
boolean iscompaction
/**
* should be called before an encoded or unencoded data block is written to
* disk.
* @param in keyvalues next to each other
* @param dummyheader a dummy header to be written as a placeholder
* @return a non-null on-heap buffer containing the contents of the
*         hfileblock with unfilled header and block type
*/
public pair<bytebuffer  blocktype> beforewritetodisk
bytebuffer in  boolean includesmemstorets  byte dummyheader
/**
* decides whether we should use a scanner over encoded blocks.
* @param iscompaction whether we are in a compaction.
* @return whether to use encoded scanner.
*/
public boolean useencodedscanner boolean iscompaction
/**
* save metadata in storefile which will be written to disk
* @param storefilewriter writer for a given storefile
* @exception ioexception on disk problems
*/
public void savemetadata storefile writer storefilewriter
throws ioexception
/** @return the on-disk data block encoding */
public datablockencoding getencodingondisk
/** @return the preferred in-cache data block encoding for normal reads */
public datablockencoding getencodingincache
/**
* @return the effective in-cache data block encoding, taking into account
*         whether we are doing a compaction.
*/
public datablockencoding geteffectiveencodingincache boolean iscompaction