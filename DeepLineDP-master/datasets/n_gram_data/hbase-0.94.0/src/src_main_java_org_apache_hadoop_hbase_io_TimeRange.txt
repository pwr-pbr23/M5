/*
* copyright 2009 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase io
import java io datainput
import java io dataoutput
import java io ioexception
import org apache hadoop io writable
import org apache hadoop hbase util bytes
/**
* represents an interval of version timestamps.
* <p>
* evaluated according to minstamp <= timestamp < maxstamp
* or [minstamp,maxstamp) in interval notation.
* <p>
* only used internally; should not be accessed directly by clients.
*/
public class timerange implements writable
private long minstamp   0l
private long maxstamp   long max_value
private boolean alltime   false
/**
* default constructor.
* represents interval [0, long.max_value) (alltime)
*/
public timerange
alltime   true
/**
* represents interval [minstamp, long.max_value)
* @param minstamp the minimum timestamp value, inclusive
*/
public timerange long minstamp
this minstamp   minstamp
/**
* represents interval [minstamp, long.max_value)
* @param minstamp the minimum timestamp value, inclusive
*/
public timerange byte  minstamp
this minstamp   bytes tolong minstamp
/**
* represents interval [minstamp, maxstamp)
* @param minstamp the minimum timestamp, inclusive
* @param maxstamp the maximum timestamp, exclusive
* @throws ioexception
*/
public timerange long minstamp  long maxstamp
throws ioexception
if maxstamp < minstamp
throw new ioexception
this minstamp   minstamp
this maxstamp   maxstamp
/**
* represents interval [minstamp, maxstamp)
* @param minstamp the minimum timestamp, inclusive
* @param maxstamp the maximum timestamp, exclusive
* @throws ioexception
*/
public timerange byte  minstamp  byte  maxstamp
throws ioexception
this bytes tolong minstamp   bytes tolong maxstamp
/**
* @return the smallest timestamp that should be considered
*/
public long getmin
return minstamp
/**
* @return the biggest timestamp that should be considered
*/
public long getmax
return maxstamp
/**
* check if the specified timestamp is within this timerange.
* <p>
* returns true if within interval [minstamp, maxstamp), false
* if not.
* @param bytes timestamp to check
* @param offset offset into the bytes
* @return true if within timerange, false if not
*/
public boolean withintimerange byte  bytes  int offset
if alltime  return true
return withintimerange bytes tolong bytes  offset
/**
* check if the specified timestamp is within this timerange.
* <p>
* returns true if within interval [minstamp, maxstamp), false
* if not.
* @param timestamp timestamp to check
* @return true if within timerange, false if not
*/
public boolean withintimerange long timestamp
if alltime  return true
// check if >= minstamp
return  minstamp <  timestamp    timestamp < maxstamp
/**
* check if the specified timestamp is within this timerange.
* <p>
* returns true if within interval [minstamp, maxstamp), false
* if not.
* @param timestamp timestamp to check
* @return true if within timerange, false if not
*/
public boolean withinoraftertimerange long timestamp
if alltime  return true
// check if >= minstamp
return  timestamp >  minstamp
/**
* compare the timestamp to timerange
* @param timestamp
* @return -1 if timestamp is less than timerange,
* 0 if timestamp is within timerange,
* 1 if timestamp is greater than timerange
*/
public int compare long timestamp
if  timestamp < minstamp
return  1
else if  timestamp >  maxstamp
return 1
else
return 0
@override
public string tostring
stringbuilder sb   new stringbuilder
sb append
sb append this maxstamp
sb append
sb append this minstamp
return sb tostring
//writable
public void readfields final datainput in  throws ioexception
this minstamp   in readlong
this maxstamp   in readlong
this alltime   in readboolean
public void write final dataoutput out  throws ioexception
out writelong minstamp
out writelong maxstamp
out writeboolean this alltime