/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase regionserver
import java io ioexception
import java util list
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop hbase hconstants
import org apache hadoop hbase htabledescriptor
import org apache hadoop hbase util bytes
/**
* split size is the number of regions that are on this server that all are
* of the same table, squared, times the region flush size or the maximum
* region split size, whichever is smaller.  for example, if the flush size
* is 128m, then on first flush we will split which will make two regions
* that will split when their size is 2 * 2 * 128m = 512m.  if one of these
* regions splits, then there are three regions and now the split size is
* 3 * 3 * 128m =  1152m, and so on until we reach the configured
* maximum filesize and then from there on out, we'll use that.
*/
public class increasingtoupperboundregionsplitpolicy
extends constantsizeregionsplitpolicy
static final log log
logfactory getlog increasingtoupperboundregionsplitpolicy class
private long flushsize
@override
protected void configureforregion hregion region
super configureforregion region
this flushsize   region gettabledesc      null?
region gettabledesc   getmemstoreflushsize
getconf   getlong hconstants hregion_memstore_flush_size
htabledescriptor default_memstore_flush_size
@override
protected boolean shouldsplit
if  region shouldforcesplit    return true
boolean foundabigstore   false
// get count of regions that have the same common table as this.region
int tableregionscount   getcountofcommontableregions
// get size to check
long sizetocheck   getsizetocheck tableregionscount
for  store store   region getstores   values
// if any of the stores is unable to split (eg they contain reference files)
// then don't split
if    store cansplit
return false
// mark if any store is big enough
long size   store getsize
if  size > sizetocheck
log debug     store getcolumnfamilyname
size       sizetocheck
tableregionscount
foundabigstore   true
break
return foundabigstore
/**
* @return region max size or <code>count of regions squared * flushsize, which ever is
* smaller; guard against there being zero regions on this server.
*/
long getsizetocheck final int tableregionscount
return tableregionscount    0? getdesiredmaxfilesize
math min getdesiredmaxfilesize
this flushsize    tableregionscount   tableregionscount
/**
* @return count of regions on this server that share the table this.region
* belongs to
*/
private int getcountofcommontableregions
regionserverservices rss   this region getregionserverservices
// can be null in tests
if  rss    null  return 0
byte  tablename   this region gettabledesc   getname
int tableregionscount   0
try
list<hregion> hri   rss getonlineregions tablename
tableregionscount   hri    null    hri isempty  ? 0  hri size
catch  ioexception e
log debug     bytes tostring tablename   e
return tableregionscount