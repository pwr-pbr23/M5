/**
* copyright 2011 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase monitoring
import org apache hadoop hbase client operation
import org apache hadoop hbase io writablewithsize
import org apache hadoop hbase util bytes
import org apache hadoop io writable
import org codehaus jackson map objectmapper
import java io ioexception
import java util arraylist
import java util hashmap
import java util map
/**
* a monitoredtask implementation designed for use with rpc handlers
* handling frequent, short duration tasks. string concatenations and object
* allocations are avoided in methods that will be hit by every rpc call.
*/
public class monitoredrpchandlerimpl extends monitoredtaskimpl
implements monitoredrpchandler
private string clientaddress
private int remoteport
private long rpcqueuetime
private long rpcstarttime
private string methodname
private object  params
private writable packet
public monitoredrpchandlerimpl
super
// in this implementation, waiting indicates that the handler is not
// actively servicing an rpc call.
setstate state waiting
@override
public synchronized monitoredrpchandlerimpl clone
return  monitoredrpchandlerimpl  super clone
/**
* gets the status of this handler; if it is currently servicing an rpc,
* this status will include the rpc information.
* @return a string describing the current status.
*/
@override
public string getstatus
if  getstate      state running
return super getstatus
return super getstatus         getclient         getrpc
/**
* accesses the queue time for the currently running rpc on the
* monitored handler.
* @return the queue timestamp or -1 if there is no rpc currently running.
*/
public long getrpcqueuetime
if  getstate      state running
return  1
return rpcqueuetime
/**
* accesses the start time for the currently running rpc on the
* monitored handler.
* @return the start timestamp or -1 if there is no rpc currently running.
*/
public long getrpcstarttime
if  getstate      state running
return  1
return rpcstarttime
/**
* produces a string representation of the method currently being serviced
* by this handler.
* @return a string representing the method call without parameters
*/
public string getrpc
return getrpc false
/**
* produces a string representation of the method currently being serviced
* by this handler.
* @param withparams toggle inclusion of parameters in the rpc string
* @return a human-readable string representation of the method call.
*/
public synchronized string getrpc boolean withparams
if  getstate      state running
// no rpc is currently running
return
stringbuilder buffer   new stringbuilder 256
buffer append methodname
if  withparams
buffer append
for  int i   0  i < params length  i
if  i    0
buffer append
buffer append params
buffer append
return buffer tostring
/**
* produces a string representation of the method currently being serviced
* by this handler.
* @return a human-readable string representation of the method call.
*/
public long getrpcpacketlength
if  getstate      state running    packet    null
// no rpc is currently running, or we don't have an rpc's packet info
return  1l
if    packet instanceof writablewithsize
// the packet passed to us doesn't expose size information
return  1l
return   writablewithsize  packet  getwritablesize
/**
* if an rpc call is currently running, produces a string representation of
* the connection from which it was received.
* @return a human-readable string representation of the address and port
*  of the client.
*/
public string getclient
return clientaddress       remoteport
/**
* indicates to the client whether this task is monitoring a currently active
* rpc call.
* @return true if the monitored handler is currently servicing an rpc call.
*/
public boolean isrpcrunning
return getstate      state running
/**
* indicates to the client whether this task is monitoring a currently active
* rpc call to a database command. (as defined by
* o.a.h.h.client.operation)
* @return true if the monitored handler is currently servicing an rpc call
* to a database command.
*/
public boolean isoperationrunning
if  isrpcrunning
return false
for object param   params
if  param instanceof operation
return true
return false
/**
* tells this instance that it is monitoring a new rpc call.
* @param methodname the name of the method that will be called by the rpc.
* @param params the parameters that will be passed to the indicated method.
*/
public synchronized void setrpc string methodname  object  params
long queuetime
this methodname   methodname
this params   params
this rpcstarttime   system currenttimemillis
this rpcqueuetime   queuetime
this state   state running
/**
* gives this instance a reference to the writable received by the rpc, so
* that it can later compute its size if asked for it.
* @param param the writable received by the rpc for this call
*/
public void setrpcpacket writable param
this packet   param
/**
* registers current handler client details.
* @param clientaddress the address of the current client
* @param remoteport the port from which the client connected
*/
public void setconnection string clientaddress  int remoteport
this clientaddress   clientaddress
this remoteport   remoteport
@override
public void markcomplete string status
super markcomplete status
this params   null
this packet   null
public synchronized map<string  object> tomap
// only include rpc info if the handler is actively servicing an rpc call
map<string  object> map   super tomap
if  getstate      state running
return map
map<string  object> rpcjson   new hashmap<string  object>
arraylist paramlist   new arraylist
map put    rpcjson
rpcjson put    getrpcqueuetime
rpcjson put    getrpcstarttime
rpcjson put    clientaddress
rpcjson put    remoteport
rpcjson put    getrpcpacketlength
rpcjson put    methodname
rpcjson put    paramlist
for object param   params
if param instanceof byte
paramlist add bytes tostringbinary  byte   param
else if  param instanceof operation
paramlist add   operation  param  tomap
else
paramlist add param tostring
return map
@override
public string tostring
if  getstate      state running
return super tostring
return super tostring         getrpc