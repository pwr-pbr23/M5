/*
* copyright 2011 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase util
import java io ioexception
import java io interruptedioexception
import java util concurrent concurrenthashmap
import java util concurrent concurrentmap
/**
* allows multiple concurrent clients to lock on a numeric id with a minimal
* memory overhead. the intended usage is as follows:
*
* <pre>
* idlock.entry lockentry = idlock.getlockentry(id);
* try {
*   // user code.
* } finally {
*   idlock.releaselockentry(lockentry);
* }</pre>
*/
public class idlock
/** an entry returned to the client as a lock object */
public static class entry
private final long id
private int numwaiters
private boolean islocked   true
private entry long id
this id   id
public string tostring
return     id       numwaiters
islocked
private concurrentmap<long  entry> map
new concurrenthashmap<long  entry>
/**
* blocks until the lock corresponding to the given id is acquired.
*
* @param id an arbitrary number to lock on
* @return an "entry" to pass to {@link #releaselockentry(entry)} to release
*         the lock
* @throws ioexception if interrupted
*/
public entry getlockentry long id  throws ioexception
entry entry   new entry id
entry existing
while   existing   map putifabsent entry id  entry      null
synchronized  existing
if  existing islocked
existing numwaiters      add ourselves to waiters
while  existing islocked
try
existing wait
catch  interruptedexception e
existing numwaiters      remove ourselves from waiters
throw new interruptedioexception
existing numwaiters      remove ourselves from waiters
existing islocked   true
return existing
// if the entry is not locked, it might already be deleted from the
// map, so we cannot return it. we need to get our entry into the map
// or get someone else's locked entry.
return entry
/**
* must be called in a finally block to decrease the internal counter and
* remove the monitor object for the given id if the caller is the last
* client.
*
* @param entry the return value of {@link #getlockentry(long)}
*/
public void releaselockentry entry entry
synchronized  entry
entry islocked   false
if  entry numwaiters > 0
entry notify
else
map remove entry id
/** for testing */
void assertmapempty
assert map size      0