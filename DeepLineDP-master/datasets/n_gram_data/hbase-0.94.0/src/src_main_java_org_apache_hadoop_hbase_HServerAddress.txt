/**
* copyright 2007 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase
import java io datainput
import java io dataoutput
import java io ioexception
import java net inetaddress
import java net inetsocketaddress
import org apache commons logging logfactory
import org apache hadoop io writablecomparable
/**
* hserveraddress hosts a {@link inetsocketaddress} and makes it
* {@link writablecomparable}.  resolves on construction and on
* deserialization -- since we're internally creating an inetsocketaddress --
* so could end up with different results if the two ends of serialization have
* different resolvers. be careful where you use it.  should only be used when
* you need to pass an inetsocketaddress across an rpc.  even then its a bad
* idea because of the above resolve issue.
* @deprecated use {@link inetsocketaddress} or {@link servername} or
* a hostname string and port.
*/
public class hserveraddress implements writablecomparable<hserveraddress>
// hard to deprecate this class. its in the api as internal class,
// in particular as an inner class of hregionlocation.  besides, sometimes
// we do want to serialize a inetsocketaddress; this class can be used then.
private inetsocketaddress address   null
private string cachedtostring
/**
* constructor for deserialization use only.
*/
public hserveraddress
super
/**
* construct an instance from an {@link inetsocketaddress}.
* @param address inetsocketaddress of server
*/
public hserveraddress inetsocketaddress address
this address   address
checkbindaddresscanberesolved
this cachedtostring   createcachedtostring
private string createcachedtostring
return this address tostring
/**
* @param hostname hostname
* @param port port number
*/
public hserveraddress final string hostname  final int port
this getresolvedaddress new inetsocketaddress hostname  port
/**
* copy-constructor.
* @param other hserveraddress to copy from
*/
public hserveraddress hserveraddress other
this getresolvedaddress new inetsocketaddress other gethostname    other getport
private static inetsocketaddress getresolvedaddress inetsocketaddress address
string bindaddress   getbindaddressinternal address
int port   address getport
return new inetsocketaddress bindaddress  port
/** @return bind address -- the raw ip, the result of a call to
* inetsocketaddress#getaddress()#gethostaddress() --
* or null if cannot resolve */
public string getbindaddress
return getbindaddressinternal address
private static string getbindaddressinternal inetsocketaddress address
final inetaddress addr   address getaddress
if  addr    null
return addr gethostaddress
else
logfactory getlog hserveraddress class  error
address gethostname
return null
private void checkbindaddresscanberesolved
if  getbindaddress      null
throw new illegalargumentexception
this address tostring
/** @return port number */
public int getport
return this address getport
/** @return hostname */
public string gethostname
// kerberos is case-sensitive, and dictates that, where hostnames are
// case-insensitive (as in dns), the lowercase version must be used
// so here we lowercase to properly interact with kerberos auth
return this address gethostname   tolowercase
/**
* @return returns <hostname> ':' <port>
*/
public string gethostnameandport
return gethostname         getport
/** @return the inetsocketaddress */
public inetsocketaddress getinetsocketaddress
return this address
/**
* @return string formatted as <code>&lt;bind address> ':' &lt;port></code>
*/
@override
public string tostring
return this cachedtostring
@override
public boolean equals object o
if  this    o  return true
if  o    null  return false
if  getclass      o getclass    return false
return compareto  hserveraddress o     0
@override
public int hashcode
int result   address    null? 0  address hashcode
result ^  tostring   hashcode
return result
//
// writable
//
public void readfields datainput in  throws ioexception
string hostname   in readutf
int port   in readint
if  hostname    null    hostname length   > 0
this address   getresolvedaddress new inetsocketaddress hostname  port
checkbindaddresscanberesolved
createcachedtostring
public void write dataoutput out  throws ioexception
if  this address    null
out writeutf
out writeint 0
else
out writeutf this address getaddress   gethostname
out writeint this address getport
//
// comparable
//
public int compareto hserveraddress o
// addresses as strings may not compare though address is for the one
// server with only difference being that one address has hostname
// resolved whereas other only has ip.
if  this address equals o address   return 0
return tostring   compareto o tostring