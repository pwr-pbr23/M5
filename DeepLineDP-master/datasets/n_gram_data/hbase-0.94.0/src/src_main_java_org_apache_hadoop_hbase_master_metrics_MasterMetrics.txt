/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase master metrics
import java io ioexception
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop hbase metrics hbaseinfo
import org apache hadoop hbase metrics metricsrate
import org apache hadoop hbase metrics persistentmetricstimevaryingrate
import org apache hadoop metrics contextfactory
import org apache hadoop metrics metricscontext
import org apache hadoop metrics metricsrecord
import org apache hadoop metrics metricsutil
import org apache hadoop metrics updater
import org apache hadoop metrics jvm jvmmetrics
import org apache hadoop metrics util metricslongvalue
import org apache hadoop metrics util metricsregistry
/**
* this class is for maintaining the various master statistics
* and publishing them through the metrics interfaces.
* <p>
* this class has a number of metrics variables that are publicly accessible;
* these variables (objects) have methods to update their values.
*/
public class mastermetrics implements updater
private final log log   logfactory getlog this getclass
private final metricsrecord metricsrecord
private final metricsregistry registry   new metricsregistry
private final masterstatistics masterstatistics
private long lastupdate   system currenttimemillis
private long lastextupdate   system currenttimemillis
private long extendedperiod   0
/*
* count of requests to the cluster since last call to metrics update
*/
private final metricsrate cluster_requests
new metricsrate    registry
/** time it takes to finish hlog.splitlog() */
final persistentmetricstimevaryingrate splittime
new persistentmetricstimevaryingrate    registry
/** size of hlog files being split */
final persistentmetricstimevaryingrate splitsize
new persistentmetricstimevaryingrate    registry
public mastermetrics final string name
metricscontext context   metricsutil getcontext
metricsrecord   metricsutil createrecord context
metricsrecord settag    name
context registerupdater this
jvmmetrics init    name
hbaseinfo init
// expose the mbean for metrics
masterstatistics   new masterstatistics this registry
// get custom attributes
try
object m
contextfactory getfactory   getattribute
if  m instanceof string
this extendedperiod   long parselong  string  m  1000
catch  ioexception ioe
log info
log info
public void shutdown
if  masterstatistics    null
masterstatistics shutdown
/**
* since this object is a registered updater, this method will be called
* periodically, e.g. every 5 seconds.
* @param unused
*/
public void doupdates metricscontext unused
synchronized  this
this lastupdate   system currenttimemillis
// has the extended period for long-living stats elapsed?
if  this extendedperiod > 0
this lastupdate   this lastextupdate >  this extendedperiod
this lastextupdate   this lastupdate
this splittime resetminmaxavg
this splitsize resetminmaxavg
this resetallminmax
this cluster_requests pushmetric metricsrecord
this splittime pushmetric metricsrecord
this splitsize pushmetric metricsrecord
this metricsrecord update
public void resetallminmax
// nothing to do
/**
* record a single instance of a split
* @param time time that the split took
* @param size length of original hlogs that were split
*/
public synchronized void addsplit long time  long size
splittime inc time
splitsize inc size
/**
* @return count of requests.
*/
public float getrequests
return this cluster_requests getpreviousintervalvalue
/**
* @param inc how much to add to requests.
*/
public void incrementrequests final int inc
this cluster_requests inc inc