/*
* copyright 2010 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase filter
import org apache hadoop hbase keyvalue
import org apache hadoop hbase util bytes
import java io datainput
import java io dataoutput
import java io ioexception
import java util list
import java util arraylist
import com google common base preconditions
/**
* a filter that stops after the given row.  there is no "rowstopfilter" because
* the scan spec allows you to specify a stop row.
*
* use this filter to include the stop row, eg: [a,z].
*/
public class inclusivestopfilter extends filterbase
private byte  stoprowkey
private boolean done   false
public inclusivestopfilter
super
public inclusivestopfilter final byte  stoprowkey
this stoprowkey   stoprowkey
public byte getstoprowkey
return this stoprowkey
public boolean filterrowkey byte buffer  int offset  int length
if  buffer    null
//noinspection redundantifstatement
if  this stoprowkey    null
return true    filter
return false
// if stoprowkey is <= buffer, then true, filter row.
int cmp   bytes compareto stoprowkey  0  stoprowkey length
buffer  offset  length
if cmp < 0
done   true
return done
public boolean filterallremaining
return done
public static filter createfilterfromarguments  arraylist<byte > filterarguments
preconditions checkargument filterarguments size      1
filterarguments size
byte  stoprowkey   parsefilter removequotesfrombytearray filterarguments get 0
return new inclusivestopfilter stoprowkey
public void write dataoutput out  throws ioexception
bytes writebytearray out  this stoprowkey
public void readfields datainput in  throws ioexception
this stoprowkey   bytes readbytearray in
@override
public string tostring
return this getclass   getsimplename         bytes tostringbinary this stoprowkey