/**
* copyright 2010 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase regionserver
import org apache hadoop hbase keyvalue
import java io closeable
import java io ioexception
import java util list
/**
* internal scanners differ from client-side scanners in that they operate on
* hstorekeys and byte[] instead of rowresults. this is because they are
* actually close to how the data is physically stored, and therefore it is more
* convenient to interact with them that way. it is also much easier to merge
* the results across sortedmaps than rowresults.
*
* <p>additionally, we need to be able to determine if the scanner is doing
* wildcard column matches (when only a column family is specified or if a
* column regex is specified) or if multiple members of the same column family
* were specified. if so, we need to ignore the timestamp to ensure that we get
* all the family members, as they may have been last updated at different
* times.
*/
public interface internalscanner extends closeable
/**
* grab the next row's worth of values.
* @param results return output array
* @return true if more rows exist after this one, false if scanner is done
* @throws ioexception e
*/
public boolean next list<keyvalue> results  throws ioexception
/**
* grab the next row's worth of values with a limit on the number of values
* to return.
* @param result return output array
* @param limit limit on row count to get
* @return true if more rows exist after this one, false if scanner is done
* @throws ioexception e
*/
public boolean next list<keyvalue> result  int limit  throws ioexception
/**
* closes the scanner and releases any resources it has allocated
* @throws ioexception
*/
public void close   throws ioexception