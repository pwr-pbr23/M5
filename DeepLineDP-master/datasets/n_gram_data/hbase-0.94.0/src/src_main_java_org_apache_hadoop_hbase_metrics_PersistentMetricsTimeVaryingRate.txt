/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase metrics
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop metrics metricsrecord
import org apache hadoop metrics util metricsregistry
import org apache hadoop metrics util metricstimevaryingrate
import org apache hadoop util stringutils
/**
* this class extends metricstimevaryingrate to let the metrics
* persist past a pushmetric() call
*/
public class persistentmetricstimevaryingrate extends metricstimevaryingrate
protected static final log log
logfactory getlog
protected boolean reset   false
protected long lastoper   0
protected long totalops   0
/**
* constructor - create a new metric
* @param nam the name of the metrics to be used to publish the metric
* @param registry - where the metrics object will be registered
* @param description metrics description
*/
public persistentmetricstimevaryingrate final string nam
final metricsregistry registry
final string description
super nam  registry  description
/**
* constructor - create a new metric
* @param nam the name of the metrics to be used to publish the metric
* @param registry - where the metrics object will be registered
*/
public persistentmetricstimevaryingrate final string nam
metricsregistry registry
this nam  registry  no_description
/**
* push updated metrics to the mr.
*
* note this does not push to jmx
* (jmx gets the info via {@link #getpreviousintervalaveragetime()} and
* {@link #getpreviousintervalnumops()}
*
* @param mr owner of this metric
*/
@override
public synchronized void pushmetric final metricsrecord mr
// this will reset the currentinterval & num_ops += previnterval()
super pushmetric mr
// since we're retaining previnterval(), we don't want to do the incr
// instead, we want to set that value because we have absolute ops
try
mr setmetric getname        totalops
catch  exception e
log info     getname
stringutils stringifyexception e
if  reset
// use the previous avg as our starting min/max/avg
super inc getpreviousintervalaveragetime
reset   false
else
// maintain the stats that pushmetric() cleared
maintainstats
/**
* increment the metrics for numops operations
* @param numops - number of operations
* @param time - time for numops operations
*/
@override
public synchronized void inc final int numops  final long time
super inc numops  time
totalops    numops
/**
* increment the metrics for numops operations
* @param time - time for numops operations
*/
@override
public synchronized void inc final long time
super inc time
totalops
/**
* rollover to a new interval
* note: does not reset numops.  this is an absolute value
*/
public synchronized void resetminmaxavg
reset   true
/* metricstimevaryingrate will reset every time pushmetric() is called
* this is annoying for long-running stats that might not get a single
* operation in the polling period.  this function ensures that values
* for those stat entries don't get reset.
*/
protected void maintainstats
int curops   this getpreviousintervalnumops
if  curops > 0
long curtime   this getpreviousintervalaveragetime
long totaltime   curtime   curops
if  curtime    0    totaltime   curtime    curops
super inc curops  totaltime
else
log info     this getname