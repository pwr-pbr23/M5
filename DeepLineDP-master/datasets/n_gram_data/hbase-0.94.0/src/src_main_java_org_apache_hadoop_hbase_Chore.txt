/**
* copyright 2007 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop hbase util hasthread
import org apache hadoop hbase util sleeper
/**
* chore is a task performed on a period in hbase.  the chore is run in its own
* thread. this base abstract class provides while loop and sleeping facility.
* if an unhandled exception, the threads exit is logged.
* implementers just need to add checking if there is work to be done and if
* so, do it.  its the base of most of the chore threads in hbase.
*
* <p>don't subclass chore if the task relies on being woken up for something to
* do, such as an entry being added to a queue, etc.
*/
public abstract class chore extends hasthread
private final log log   logfactory getlog this getclass
private final sleeper sleeper
protected final stoppable stopper
/**
* @param p period at which we should run.  will be adjusted appropriately
* should we find work and it takes time to complete.
* @param stopper when {@link stoppable#isstopped()} is true, this thread will
* cleanup and exit cleanly.
*/
public chore string name  final int p  final stoppable stopper
super name
this sleeper   new sleeper p  stopper
this stopper   stopper
/**
* @see java.lang.thread#run()
*/
@override
public void run
try
boolean initialchorecomplete   false
while   this stopper isstopped
long starttime   system currenttimemillis
try
if   initialchorecomplete
initialchorecomplete   initialchore
else
chore
catch  exception e
log error    e
if  this stopper isstopped
continue
this sleeper sleep starttime
catch  throwable t
log fatal getname        t
finally
log info getname
/**
* if the thread is currently sleeping, trigger the core to happen immediately.
* if it's in the middle of its operation, will begin another operation
* immediately after finishing this one.
*/
public void triggernow
this sleeper skipsleepcycle
/**
* override to run a task before we start looping.
* @return true if initial chore was successful
*/
protected boolean initialchore
// default does nothing.
return true
/**
* look for chores.  if any found, do them else just return.
*/
protected abstract void chore
/**
* sleep for period.
*/
protected void sleep
this sleeper sleep