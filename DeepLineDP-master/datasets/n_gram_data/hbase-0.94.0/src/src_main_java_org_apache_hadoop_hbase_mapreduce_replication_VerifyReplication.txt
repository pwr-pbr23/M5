/**
* copyright 2010 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase mapreduce replication
import java io ioexception
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop conf configuration
import org apache hadoop hbase hbaseconfiguration
import org apache hadoop hbase hconstants
import org apache hadoop hbase keyvalue
import org apache hadoop hbase client hconnection
import org apache hadoop hbase client hconnectionmanager
import org apache hadoop hbase client hconnectionmanager hconnectable
import org apache hadoop hbase client htable
import org apache hadoop hbase client put
import org apache hadoop hbase client result
import org apache hadoop hbase client resultscanner
import org apache hadoop hbase client scan
import org apache hadoop hbase client replication replicationadmin
import org apache hadoop hbase io immutablebyteswritable
import org apache hadoop hbase mapreduce tableinputformat
import org apache hadoop hbase mapreduce tablemapreduceutil
import org apache hadoop hbase mapreduce tablemapper
import org apache hadoop hbase replication replicationpeer
import org apache hadoop hbase replication replicationzookeeper
import org apache hadoop hbase util bytes
import org apache hadoop mapreduce job
import org apache hadoop mapreduce lib output nulloutputformat
import org apache zookeeper keeperexception
/**
* this map-only job compares the data from a local table with a remote one.
* every cell is compared and must have exactly the same keys (even timestamp)
* as well as same value. it is possible to restrict the job by time range and
* families. the peer id that's provided must match the one given when the
* replication stream was setup.
* <p>
* two counters are provided, verifier.counters.goodrows and badrows. the reason
* for a why a row is different is shown in the map's log.
*/
public class verifyreplication
private static final log log
logfactory getlog verifyreplication class
public final static string name
static long starttime   0
static long endtime   0
static string tablename   null
static string families   null
static string peerid   null
/**
* map-only comparator for 2 tables
*/
public static class verifier
extends tablemapper<immutablebyteswritable  put>
public static enum counters  goodrows  badrows
private resultscanner replicatedscanner
/**
* map method that compares every scanned row with the equivalent from
* a distant cluster.
* @param row  the current table row key.
* @param value  the columns.
* @param context  the current context.
* @throws ioexception when something is broken with the data.
*/
@override
public void map immutablebyteswritable row  final result value
context context
throws ioexception
if  replicatedscanner    null
configuration conf   context getconfiguration
final scan scan   new scan
scan setcaching conf getint tableinputformat scan_cachedrows  1
long starttime   conf getlong name      0
long endtime   conf getlong name      0
string families   conf get name      null
if families    null
string fams   families split
for string fam   fams
scan addfamily bytes tobytes fam
if  starttime    0
scan settimerange starttime
endtime    0 ? hconstants latest_timestamp   endtime
hconnectionmanager execute new hconnectable<void> conf
@override
public void connect hconnection conn  throws ioexception
try
replicationzookeeper zk   new replicationzookeeper conn  conf
conn getzookeeperwatcher
replicationpeer peer   zk getpeer conf get name
htable replicatedtable   new htable peer getconfiguration
conf get name
scan setstartrow value getrow
replicatedscanner   replicatedtable getscanner scan
catch  keeperexception e
throw new ioexception    e
return null
result res   replicatedscanner next
try
result compareresults value  res
context getcounter counters goodrows  increment 1
catch  exception e
log warn    e
context getcounter counters badrows  increment 1
protected void cleanup context context
replicatedscanner close
/**
* sets up the actual job.
*
* @param conf  the current configuration.
* @param args  the command line parameters.
* @return the newly created job.
* @throws java.io.ioexception when setting up the job fails.
*/
public static job createsubmittablejob configuration conf  string args
throws ioexception
if   docommandline args
return null
if   conf getboolean hconstants replication_enable_key  false
throw new ioexception
hconnectionmanager execute new hconnectable<void> conf
@override
public void connect hconnection conn  throws ioexception
try
replicationzookeeper zk   new replicationzookeeper conn  conf
conn getzookeeperwatcher
// just verifying it we can connect
replicationpeer peer   zk getpeer peerid
if  peer    null
throw new ioexception
catch  keeperexception ex
throw new ioexception
ex
return null
conf set name    peerid
conf set name    tablename
conf setlong name    starttime
conf setlong name    endtime
if  families    null
conf set name    families
job job   new job conf  name       tablename
job setjarbyclass verifyreplication class
scan scan   new scan
if  starttime    0
scan settimerange starttime
endtime    0 ? hconstants latest_timestamp   endtime
if families    null
string fams   families split
for string fam   fams
scan addfamily bytes tobytes fam
tablemapreduceutil inittablemapperjob tablename  scan
verifier class  null  null  job
job setoutputformatclass nulloutputformat class
job setnumreducetasks 0
return job
private static boolean docommandline final string args
if  args length < 2
printusage null
return false
try
for  int i   0  i < args length  i
string cmd   args
if  cmd equals       cmd startswith
printusage null
return false
final string starttimeargkey
if  cmd startswith starttimeargkey
starttime   long parselong cmd substring starttimeargkey length
continue
final string endtimeargkey
if  cmd startswith endtimeargkey
endtime   long parselong cmd substring endtimeargkey length
continue
final string familiesargkey
if  cmd startswith familiesargkey
families   cmd substring familiesargkey length
continue
if  i    args length 2
peerid   cmd
if  i    args length 1
tablename   cmd
catch  exception e
e printstacktrace
printusage     e getmessage
return false
return true
/*
* @param errormsg error message.  can be null.
*/
private static void printusage final string errormsg
if  errormsg    null    errormsg length   > 0
system err println     errormsg
system err println
system err println
system err println
system err println
system err println
system err println
system err println
system err println
system err println
system err println
system err println
system err println
system err println
system err println
system err println
/**
* main entry point.
*
* @param args  the command line parameters.
* @throws exception when running the job fails.
*/
public static void main string args  throws exception
configuration conf   hbaseconfiguration create
job job   createsubmittablejob conf  args
if  job    null
system exit job waitforcompletion true  ? 0   1