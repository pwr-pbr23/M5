/*
* copyright the apache software foundation
*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements. see the notice file distributed with this
* work for additional information regarding copyright ownership. the asf
* licenses this file to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
* http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis, without
* warranties or conditions of any kind, either express or implied. see the
* license for the specific language governing permissions and limitations
* under the license.
*/
package org apache hadoop hbase thrift
import java lang reflect method
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop conf configuration
import org apache hadoop hbase thrift generated hbase
import org apache hadoop metrics metricscontext
import org apache hadoop metrics metricsrecord
import org apache hadoop metrics metricsutil
import org apache hadoop metrics updater
import org apache hadoop metrics util metricsbase
import org apache hadoop metrics util metricsintvalue
import org apache hadoop metrics util metricsregistry
import org apache hadoop metrics util metricstimevaryingint
import org apache hadoop metrics util metricstimevaryinglong
import org apache hadoop metrics util metricstimevaryingrate
/**
* this class is for maintaining the various statistics of thrift server
* and publishing them through the metrics interfaces.
*/
public class thriftmetrics implements updater
public final static log log   logfactory getlog thriftmetrics class
public final static string context_name
private final metricscontext context
private final metricsrecord metricsrecord
private final metricsregistry registry   new metricsregistry
private final long slowresponsetime
public static final string slow_response_nano_sec
public static final long default_slow_response_nano_sec   10   1000   1000
private final metricsintvalue callqueuelen
new metricsintvalue    registry
private final metricstimevaryingrate numrowkeysinbatchget
new metricstimevaryingrate    registry
private final metricstimevaryingrate numrowkeysinbatchmutate
new metricstimevaryingrate    registry
private final metricstimevaryingrate timeinqueue
new metricstimevaryingrate    registry
private metricstimevaryingrate thriftcall
new metricstimevaryingrate    registry
private metricstimevaryingrate slowthriftcall
new metricstimevaryingrate    registry
public thriftmetrics int port  configuration conf  class<?> iface
slowresponsetime   conf getlong
slow_response_nano_sec  default_slow_response_nano_sec
context   metricsutil getcontext context_name
metricsrecord   metricsutil createrecord context  context_name
metricsrecord settag    port
log info     port
context registerupdater this
createmetricsformethods iface
public void inctimeinqueue long time
timeinqueue inc time
public void setcallqueuelen int len
callqueuelen set len
public void incnumrowkeysinbatchget int diff
numrowkeysinbatchget inc diff
public void incnumrowkeysinbatchmutate int diff
numrowkeysinbatchmutate inc diff
public void incmethodtime string name  int time
metricstimevaryingrate methodtimemetrc   getmethodtimemetrics name
if  methodtimemetrc    null
log warn
name
return     ignore methods that dont exist
// inc method specific processtime
methodtimemetrc inc time
// inc general processtime
thriftcall inc time
if  time > slowresponsetime
slowthriftcall inc time
private void createmetricsformethods class<?> iface
log debug     iface tostring
for  method m   iface getdeclaredmethods
if  getmethodtimemetrics m getname       null
log debug     m getname
createmethodtimemetrics m getname
private metricstimevaryingrate getmethodtimemetrics string key
return  metricstimevaryingrate  registry get key
private metricstimevaryingrate createmethodtimemetrics string key
return new metricstimevaryingrate key  this registry
/**
* push the metrics to the monitoring subsystem on doupdate() call.
*/
public void doupdates final metricscontext context
// getmetricslist() and pushmetric() are thread safe methods
for  metricsbase m   registry getmetricslist
m pushmetric metricsrecord
metricsrecord update