/*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase filter
import org apache hadoop hbase keyvalue
import org apache hadoop hbase util bytes
import java io dataoutput
import java io ioexception
import java io datainput
import java util arrays
import java util comparator
import java util treeset
import java util arraylist
/**
* this filter is used for selecting only those keys with columns that matches
* a particular prefix. for example, if prefix is 'an', it will pass keys will
* columns like 'and', 'anti' but not keys with columns like 'ball', 'act'.
*/
public class multiplecolumnprefixfilter extends filterbase
protected byte  hint   null
protected treeset<byte > sortedprefixes   createtreeset
private final static int max_log_prefixes   5
public multiplecolumnprefixfilter
super
public multiplecolumnprefixfilter final byte  prefixes
if  prefixes    null
for  int i   0  i < prefixes length  i
if   sortedprefixes add prefixes
throw new illegalargumentexception
public byte  getprefix
int count   0
byte  temp   new byte
for  byte  prefixes   sortedprefixes
temp    prefixes
return temp
@override
public returncode filterkeyvalue keyvalue kv
if  sortedprefixes size      0    kv getbuffer      null
return returncode include
else
return filtercolumn kv getbuffer    kv getqualifieroffset    kv getqualifierlength
public returncode filtercolumn byte buffer  int qualifieroffset  int qualifierlength
byte  qualifier   arrays copyofrange buffer  qualifieroffset
qualifierlength   qualifieroffset
treeset<byte > lesserorequalprefixes
treeset<byte >  sortedprefixes headset qualifier  true
if  lesserorequalprefixes size      0
byte  largestprefixsmallerthanqualifier   lesserorequalprefixes last
if  bytes startswith qualifier  largestprefixsmallerthanqualifier
return returncode include
if  lesserorequalprefixes size      sortedprefixes size
return returncode next_row
else
hint   sortedprefixes higher largestprefixsmallerthanqualifier
return returncode seek_next_using_hint
else
hint   sortedprefixes first
return returncode seek_next_using_hint
public static filter createfilterfromarguments arraylist<byte > filterarguments
byte  prefixes   new byte
for  int i   0   i < filterarguments size    i
byte  columnprefix   parsefilter removequotesfrombytearray filterarguments get i
prefixes   columnprefix
return new multiplecolumnprefixfilter prefixes
public void write dataoutput out  throws ioexception
out writeint sortedprefixes size
for  byte  element   sortedprefixes
bytes writebytearray out  element
public void readfields datainput in  throws ioexception
int x   in readint
this sortedprefixes   createtreeset
for  int j   0  j < x  j
sortedprefixes add bytes readbytearray in
public keyvalue getnextkeyhint keyvalue kv
return keyvalue createfirstonrow
kv getbuffer    kv getrowoffset    kv getrowlength    kv getbuffer
kv getfamilyoffset    kv getfamilylength    hint  0  hint length
public treeset<byte > createtreeset
return new treeset<byte > new comparator<object>
@override
public int compare  object o1  object o2
if  o1    null    o2    null
throw new illegalargumentexception
byte  b1    byte   o1
byte  b2    byte   o2
return bytes compareto  b1  0  b1 length  b2  0  b2 length
@override
public string tostring
return tostring max_log_prefixes
protected string tostring int maxprefixes
stringbuilder prefixes   new stringbuilder
int count   0
for  byte ba   this sortedprefixes
if  count >  maxprefixes
break
count
prefixes append bytes tostringbinary ba
if  count < this sortedprefixes size      count < maxprefixes
prefixes append
return string format    this getclass   getsimplename
count  this sortedprefixes size    prefixes tostring