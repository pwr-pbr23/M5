/*
* copyright 2011 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase util
import java io datainput
import java io ioexception
import java nio bytebuffer
import org apache hadoop hbase io hfile blocktype
import org apache hadoop hbase io hfile fixedfiletrailer
import org apache hadoop hbase io hfile hfile
import org apache hadoop hbase io hfile hfileblock
import org apache hadoop hbase io hfile hfileblockindex
import org apache hadoop io rawcomparator
/**
* a bloom filter implementation built on top of {@link bytebloomfilter},
* encapsulating a set of fixed-size bloom filters written out at the time of
* {@link org.apache.hadoop.hbase.io.hfile.hfile} generation into the data
* block stream, and loaded on demand at query time. this class only provides
* reading capabilities.
*/
public class compoundbloomfilter extends compoundbloomfilterbase
implements bloomfilter
/** used to load chunks on demand */
private hfile reader reader
private hfileblockindex blockindexreader index
private int hashcount
private hash hash
private long numqueriesperchunk
private long numpositivesperchunk
/**
* de-serialization for compound bloom filter metadata. must be consistent
* with what {@link compoundbloomfilterwriter} does.
*
* @param meta serialized bloom filter metadata without any magic blocks
* @throws ioexception
*/
public compoundbloomfilter datainput meta  hfile reader reader
throws ioexception
this reader   reader
totalbytesize   meta readlong
hashcount   meta readint
hashtype   meta readint
totalkeycount   meta readlong
totalmaxkeys   meta readlong
numchunks   meta readint
comparator   fixedfiletrailer createcomparator
bytes tostring bytes readbytearray meta
hash   hash getinstance hashtype
if  hash    null
throw new illegalargumentexception     hashtype
index   new hfileblockindex blockindexreader comparator  1
index readrootindex meta  numchunks
@override
public boolean contains byte key  int keyoffset  int keylength
bytebuffer bloom
// we try to store the result in this variable so we can update stats for
// testing, but when an error happens, we log a message and return.
boolean result
int block   index rootblockcontainingkey key  keyoffset  keylength
if  block < 0
result   false     this key is not in the file
else
hfileblock bloomblock
try
// we cache the block and use a positional read.
bloomblock   reader readblock index getrootblockoffset block
index getrootblockdatasize block   true  true  false
blocktype bloom_chunk
catch  ioexception ex
// the bloom filter is broken, turn it off.
throw new illegalargumentexception
bytes tostringbinary key  keyoffset  keylength   ex
bytebuffer bloombuf   bloomblock getbufferreadonly
result   bytebloomfilter contains key  keyoffset  keylength
bloombuf array    bloombuf arrayoffset     bloomblock headersize
bloomblock getuncompressedsizewithoutheader    hash  hashcount
if  numqueriesperchunk    null    block >  0
// update statistics. only used in unit tests.
numqueriesperchunk
if  result
numpositivesperchunk
return result
public boolean supportsautoloading
return true
public int getnumchunks
return numchunks
@override
public rawcomparator<byte> getcomparator
return comparator
public void enabletestingstats
numqueriesperchunk   new long
numpositivesperchunk   new long
public string formattestingstats
stringbuilder sb   new stringbuilder
for  int i   0  i < numchunks    i
sb append
sb append i
sb append
sb append numqueriesperchunk
sb append
sb append numpositivesperchunk
sb append
sb append numpositivesperchunk   1 0   numqueriesperchunk
sb append
return sb tostring
public long getnumqueriesfortesting int chunk
return numqueriesperchunk
public long getnumpositivesfortesting int chunk
return numpositivesperchunk
@override
public string tostring
stringbuilder sb   new stringbuilder
sb append bytebloomfilter formatstats this
sb append bytebloomfilter stats_record_sep
numchunks
sb append bytebloomfilter stats_record_sep
comparator getclass   getsimplename
return sb tostring