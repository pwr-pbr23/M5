/**
* copyright 2011 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase regionserver compactions
import java util arraylist
import java util calendar
import java util gregoriancalendar
import java util list
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop conf configuration
import org apache hadoop hbase regionserver storefile
public class compactselection
private static final long serialversionuid   1l
static final log log   logfactory getlog compactselection class
// the actual list - this is needed to handle methods like "sublist"
// correctly
list<storefile> filestocompact   new arraylist<storefile>
/**
* number of off peak compactions either in the compaction queue or
* happening now. please lock compactioncountlock before modifying.
*/
static long numoutstandingoffpeakcompactions   0
/**
* lock object for numoutstandingoffpeakcompactions
*/
private final static object compactioncountlock   new object
// hbase conf object
configuration conf
// was this compaction promoted to an off-peak
boolean isoffpeakcompaction   false
// compactratio: double on purpose!  float.max < long.max < double.max
// with float, java will downcast your long to float for comparisons (bad)
private double compactratio
// compaction ratio off-peak
private double compactratiooffpeak
// offpeak start time
private int offpeakstarthour    1
// off peak end time
private int offpeakendhour    1
public compactselection configuration conf  list<storefile> filestocompact
this filestocompact   filestocompact
this conf   conf
this compactratio   conf getfloat    1 2f
this compactratiooffpeak   conf getfloat    5 0f
// peak time is from [offpeakstarthour, offpeakendhour). valid numbers are [0, 23]
this offpeakstarthour   conf getint     1
this offpeakendhour   conf getint     1
if   isvalidhour this offpeakstarthour      isvalidhour this offpeakendhour
if    this offpeakstarthour     1    this offpeakendhour     1
log warn
this offpeakstarthour       this offpeakendhour
this offpeakstarthour   this offpeakendhour    1
/**
* select the expired store files to compact
*
* @param maxexpiredtimestamp
*          the store file will be marked as expired if its max time stamp is
*          less than this maxexpiredtimestamp.
* @return a compactselection contains the expired store files as
*         filestocompact
*/
public compactselection selectexpiredstorefilestocompact
long maxexpiredtimestamp
if  filestocompact    null    filestocompact size      0
return null
arraylist<storefile> expiredstorefiles   null
boolean hasexpiredstorefiles   false
compactselection expiredsfselection   null
for  storefile storefile   this filestocompact
if  storefile getreader   getmaxtimestamp   < maxexpiredtimestamp
log info
storefile getpath
storefile getreader   getmaxtimestamp
maxexpiredtimestamp
if   hasexpiredstorefiles
expiredstorefiles   new arraylist<storefile>
hasexpiredstorefiles   true
expiredstorefiles add storefile
if  hasexpiredstorefiles
expiredsfselection   new compactselection conf  expiredstorefiles
return expiredsfselection
/**
* if the current hour falls in the off peak times and there are no
* outstanding off peak compactions, the current compaction is
* promoted to an off peak compaction. currently only one off peak
* compaction is present in the compaction queue.
*
* @param currenthour
* @return
*/
public double getcompactselectionratio
double r   this compactratio
synchronized compactioncountlock
if  isoffpeakhour      numoutstandingoffpeakcompactions    0
r   this compactratiooffpeak
numoutstandingoffpeakcompactions
isoffpeakcompaction   true
if isoffpeakcompaction
log info
compactratiooffpeak
numoutstandingoffpeakcompactions
return r
/**
* the current compaction finished, so reset the off peak compactions count
* if this was an off peak compaction.
*/
public void finishrequest
if  isoffpeakcompaction
synchronized compactioncountlock
numoutstandingoffpeakcompactions
isoffpeakcompaction   false
log info
numoutstandingoffpeakcompactions
public list<storefile> getfilestocompact
return filestocompact
/**
* removes all files from the current compaction list, and resets off peak
* compactions is set.
*/
public void emptyfilelist
filestocompact clear
if  isoffpeakcompaction
synchronized compactioncountlock
// reset the off peak count
numoutstandingoffpeakcompactions
isoffpeakcompaction   false
log info
numoutstandingoffpeakcompactions
public boolean isoffpeakcompaction
return this isoffpeakcompaction
private boolean isoffpeakhour
int currenthour    new gregoriancalendar    get calendar hour_of_day
// if offpeak time checking is disabled just return false.
if  this offpeakstarthour    this offpeakendhour
return false
if  this offpeakstarthour < this offpeakendhour
return  currenthour >  this offpeakstarthour    currenthour < this offpeakendhour
return  currenthour >  this offpeakstarthour    currenthour < this offpeakendhour
public compactselection sublist int start  int end
throw new unsupportedoperationexception
public compactselection getsublist int start  int end
filestocompact   filestocompact sublist start  end
return this
public void clearsublist int start  int end
filestocompact sublist start  end  clear
private boolean isvalidhour int hour
return  hour >  0    hour <  23