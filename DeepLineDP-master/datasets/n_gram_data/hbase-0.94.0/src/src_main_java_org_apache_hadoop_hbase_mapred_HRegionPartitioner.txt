/**
* copyright 2010 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase mapred
import java io ioexception
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop hbase hbaseconfiguration
import org apache hadoop hbase client htable
import org apache hadoop hbase io immutablebyteswritable
import org apache hadoop hbase util bytes
import org apache hadoop mapred jobconf
import org apache hadoop mapred partitioner
/**
* this is used to partition the output keys into groups of keys.
* keys are grouped according to the regions that currently exist
* so that each reducer fills a single region so load is distributed.
*
* @param <k2>
* @param <v2>
*/
@deprecated
public class hregionpartitioner<k2 v2>
implements partitioner<immutablebyteswritable  v2>
private final log log   logfactory getlog tableinputformat class
private htable table
private byte startkeys
public void configure jobconf job
try
this table   new htable hbaseconfiguration create job
job get tableoutputformat output_table
catch  ioexception e
log error e
try
this startkeys   this table getstartkeys
catch  ioexception e
log error e
public int getpartition immutablebyteswritable key
v2 value  int numpartitions
byte region   null
// only one region return 0
if  this startkeys length    1
return 0
try
// not sure if this is cached after a split so we could have problems
// here if a region splits while mapping
region   table getregionlocation key get    getregioninfo   getstartkey
catch  ioexception e
log error e
for  int i   0  i < this startkeys length  i
if  bytes compareto region  this startkeys     0
if  i >  numpartitions 1
// cover if we have less reduces then regions.
return  integer tostring i  hashcode
integer max_value  % numpartitions
return i
// if above fails to find start key that match we need to return something
return 0