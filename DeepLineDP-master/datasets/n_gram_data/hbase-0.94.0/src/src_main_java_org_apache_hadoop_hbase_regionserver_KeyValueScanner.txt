/**
* copyright 2010 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase regionserver
import java io ioexception
import java util sortedset
import org apache hadoop hbase keyvalue
import org apache hadoop hbase client scan
/**
* scanner that returns the next keyvalue.
*/
public interface keyvaluescanner
/**
* look at the next keyvalue in this scanner, but do not iterate scanner.
* @return the next keyvalue
*/
public keyvalue peek
/**
* return the next keyvalue in this scanner, iterating the scanner
* @return the next keyvalue
*/
public keyvalue next   throws ioexception
/**
* seek the scanner at or after the specified keyvalue.
* @param key seek value
* @return true if scanner has values left, false if end of scanner
*/
public boolean seek keyvalue key  throws ioexception
/**
* reseek the scanner at or after the specified keyvalue.
* this method is guaranteed to seek at or after the required key only if the
* key comes after the current position of the scanner. should not be used
* to seek to a key which may come before the current position.
* @param key seek value (should be non-null)
* @return true if scanner has values left, false if end of scanner
*/
public boolean reseek keyvalue key  throws ioexception
/**
* get the sequence id associated with this keyvaluescanner. this is required
* for comparing multiple files to find out which one has the latest data.
* the default implementation for this would be to return 0. a file having
* lower sequence id will be considered to be the older one.
*/
public long getsequenceid
/**
* close the keyvalue scanner.
*/
public void close
/**
* allows to filter out scanners (both storefile and memstore) that we don't
* want to use based on criteria such as bloom filters and timestamp ranges.
* @param scan the scan that we are selecting scanners for
* @param columns the set of columns in the current column family, or null if
*          not specified by the scan
* @param oldestunexpiredts the oldest timestamp we are interested in for
*          this query, based on ttl
* @return true if the scanner should be included in the query
*/
public boolean shouldusescanner scan scan  sortedset<byte> columns
long oldestunexpiredts
// "lazy scanner" optimizations
/**
* similar to {@link #seek} (or {@link #reseek} if forward is true) but only
* does a seek operation after checking that it is really necessary for the
* row/column combination specified by the kv parameter. this function was
* added to avoid unnecessary disk seeks by checking row-column bloom filters
* before a seek on multi-column get/scan queries, and to optimize by looking
* up more recent files first.
* @param forward do a forward-only "reseek" instead of a random-access seek
* @param usebloom whether to enable multi-column bloom filter optimization
*/
public boolean requestseek keyvalue kv  boolean forward  boolean usebloom
throws ioexception
/**
* we optimize our store scanners by checking the most recent store file
* first, so we sometimes pretend we have done a seek but delay it until the
* store scanner bubbles up to the top of the key-value heap. this method is
* then used to ensure the top store file scanner has done a seek operation.
*/
public boolean realseekdone
/**
* does the real seek operation in case it was skipped by
* seektorowcol(keyvalue, boolean) (todo: whats this?). note that this function should
* be never called on scanners that always do real seek operations (i.e. most
* of the scanners). the easiest way to achieve this is to call
* {@link #realseekdone()} first.
*/
public void enforceseek   throws ioexception
/**
* @return true if this is a file scanner. otherwise a memory scanner is
*         assumed.
*/
public boolean isfilescanner