/**
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase tool
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop util tool
import org apache hadoop util toolrunner
import org apache hadoop conf configuration
import org apache hadoop hbase hregioninfo
import org apache hadoop hbase htabledescriptor
import org apache hadoop hbase hcolumndescriptor
import org apache hadoop hbase hbaseconfiguration
import org apache hadoop hbase tablenotfoundexception
import org apache hadoop hbase client get
import org apache hadoop hbase client htable
import org apache hadoop hbase client hbaseadmin
/**
* hbase canary tool, that that can be used to do
* "canary monitoring" of a running hbase cluster.
*
* foreach region tries to get one row per column family
* and outputs some information about failure or latency.
*/
public final class canary implements tool
// sink interface used by the canary to outputs information
public interface sink
public void publishreadfailure hregioninfo region
public void publishreadfailure hregioninfo region  hcolumndescriptor column
public void publishreadtiming hregioninfo region  hcolumndescriptor column  long mstime
// simple implementation of canary sink that allows to plot on
// file or standard output timings or failures.
public static class stdoutsink implements sink
@override
public void publishreadfailure hregioninfo region
log error string format    region getregionnameasstring
@override
public void publishreadfailure hregioninfo region  hcolumndescriptor column
log error string format
region getregionnameasstring    column getnameasstring
@override
public void publishreadtiming hregioninfo region  hcolumndescriptor column  long mstime
log info string format
region getregionnameasstring    column getnameasstring    mstime
private static final long default_interval   6000
private static final log log   logfactory getlog canary class
private configuration conf   null
private hbaseadmin admin   null
private long interval   0
private sink sink   null
public canary
this new stdoutsink
public canary sink sink
this sink   sink
@override
public configuration getconf
return conf
@override
public void setconf configuration conf
this conf   conf
@override
public int run string args  throws exception
int tables_index    1
// process command line args
for  int i   0  i < args length  i
string cmd   args
if  cmd startswith
if  tables_index >  0
// command line args must be in the form: [opts] [table 1 [table 2 ...]]
system err println
printusageandexit
if  cmd equals
// user asked for help, print the help and quit.
printusageandexit
else if  cmd equals       interval    0
// user asked for daemon mode, set a default interval between checks
interval   default_interval
else if  cmd equals
// user has specified an interval for canary breaths (-interval n)
i
if  i    args length
system err println
printusageandexit
try
interval   long parselong args    1000
catch  numberformatexception e
system err println
printusageandexit
else
// no options match
system err println cmd
printusageandexit
else if  tables_index < 0
// keep track of first table name specified by the user
tables_index   i
// initialize hbase conf and admin
if  conf    null  conf   hbaseconfiguration create
admin   new hbaseadmin conf
// lets the canary monitor the cluster
do
if  admin isaborted
log error
return 1
if  tables_index >  0
for  int i   tables_index  i < args length  i
sniff args
else
sniff
thread sleep interval
while  interval > 0
return 0
private void printusageandexit
system err printf    getclass   getname
system err println
system err println
system err println
system err println
system exit 1
/*
* canary entry point to monitor all the tables.
*/
private void sniff   throws exception
for  htabledescriptor table   admin listtables
sniff table
/*
* canary entry point to monitor specified table.
*/
private void sniff string tablename  throws exception
if  admin istableavailable tablename
sniff admin gettabledescriptor tablename getbytes
else
log warn string format    tablename
/*
* loops over regions that owns this table,
* and output some information abouts the state.
*/
private void sniff htabledescriptor tabledesc  throws exception
htable table   null
try
table   new htable admin getconfiguration    tabledesc getname
catch  tablenotfoundexception e
return
for  hregioninfo region   admin gettableregions tabledesc getname
try
sniffregion region  table
catch  exception e
sink publishreadfailure region
/*
* for each column family of the region tries to get one row
* and outputs the latency, or the failure.
*/
private void sniffregion hregioninfo region  htable table  throws exception
htabledescriptor tabledesc   table gettabledescriptor
for  hcolumndescriptor column   tabledesc getcolumnfamilies
get get   new get region getstartkey
get addfamily column getname
try
long starttime   system currenttimemillis
table get get
long time   system currenttimemillis     starttime
sink publishreadtiming region  column  time
catch  exception e
sink publishreadfailure region  column
public static void main string args  throws exception
int exitcode   toolrunner run new canary    args
system exit exitcode