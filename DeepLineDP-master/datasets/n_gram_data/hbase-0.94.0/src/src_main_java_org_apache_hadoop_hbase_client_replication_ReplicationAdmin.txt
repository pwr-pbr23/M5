/**
* copyright 2010 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase client replication
import java io closeable
import java io ioexception
import java util map
import org apache hadoop conf configuration
import org apache hadoop hbase hconstants
import org apache hadoop hbase client hconnection
import org apache hadoop hbase client hconnectionmanager
import org apache hadoop hbase replication replicationzookeeper
import org apache hadoop hbase zookeeper zookeeperwatcher
import org apache zookeeper keeperexception
/**
* <p>
* this class provides the administrative interface to hbase cluster
* replication. in order to use it, the cluster and the client using
* replicationadmin must be configured with <code>hbase.replication</code>
* set to true.
* </p>
* <p>
* adding a new peer results in creating new outbound connections from every
* region server to a subset of region servers on the slave cluster. each
* new stream of replication will start replicating from the beginning of the
* current hlog, meaning that edits from that past will be replicated.
* </p>
* <p>
* removing a peer is a destructive and irreversible operation that stops
* all the replication streams for the given cluster and deletes the metadata
* used to keep track of the replication state.
* </p>
* <p>
* enabling and disabling peers is currently not supported.
* </p>
* <p>
* as cluster replication is still experimental, a kill switch is provided
* in order to stop all replication-related operations, see
* {@link #setreplicating(boolean)}. when setting it back to true, the new
* state of all the replication streams will be unknown and may have holes.
* use at your own risk.
* </p>
* <p>
* to see which commands are available in the shell, type
* <code>replication</code>.
* </p>
*/
public class replicationadmin implements closeable
private final replicationzookeeper replicationzk
private final hconnection connection
/**
* constructor that creates a connection to the local zookeeper ensemble.
* @param conf configuration to use
* @throws ioexception if the connection to zk cannot be made
* @throws runtimeexception if replication isn't enabled.
*/
public replicationadmin configuration conf  throws ioexception
if   conf getboolean hconstants replication_enable_key  false
throw new runtimeexception
this connection   hconnectionmanager getconnection conf
zookeeperwatcher zkw   this connection getzookeeperwatcher
try
this replicationzk   new replicationzookeeper this connection  conf  zkw
catch  keeperexception e
throw new ioexception    e
/**
* add a new peer cluster to replicate to.
* @param id a short that identifies the cluster
* @param clusterkey the concatenation of the slave cluster's
* <code>hbase.zookeeper.quorum:hbase.zookeeper.property.clientport:zookeeper.znode.parent</code>
* @throws illegalstateexception if there's already one slave since
* multi-slave isn't supported yet.
*/
public void addpeer string id  string clusterkey  throws ioexception
this replicationzk addpeer id  clusterkey
/**
* removes a peer cluster and stops the replication to it.
* @param id a short that identifies the cluster
*/
public void removepeer string id  throws ioexception
this replicationzk removepeer id
/**
* restart the replication stream to the specified peer.
* @param id a short that identifies the cluster
*/
public void enablepeer string id  throws ioexception
this replicationzk enablepeer id
/**
* stop the replication stream to the specified peer.
* @param id a short that identifies the cluster
*/
public void disablepeer string id  throws ioexception
this replicationzk disablepeer id
/**
* get the number of slave clusters the local cluster has.
* @return number of slave clusters
*/
public int getpeerscount
return this replicationzk listpeersidsandwatch   size
/**
* map of this cluster's peers for display.
* @return a map of peer ids to peer cluster keys
*/
public map<string  string> listpeers
return this replicationzk listpeers
/**
* get state of the peer
*
* @param id peer's identifier
* @return current state of the peer
*/
public string getpeerstate string id  throws ioexception
try
return this replicationzk getpeerstate id  name
catch  keeperexception e
throw new ioexception     id  e
/**
* get the current status of the kill switch, if the cluster is replicating
* or not.
* @return true if the cluster is replicated, otherwise false
*/
public boolean getreplicating   throws ioexception
try
return this replicationzk getreplication
catch  keeperexception e
throw new ioexception
/**
* kill switch for all replication-related features
* @param newstate true to start replication, false to stop it.
* completely
* @return the previous state
*/
public boolean setreplicating boolean newstate  throws ioexception
boolean prev   true
try
prev   getreplicating
this replicationzk setreplicating newstate
catch  keeperexception e
throw new ioexception    e
return prev
/**
* get the zk-support tool created and used by this object for replication.
* @return the zk-support tool
*/
replicationzookeeper getreplicationzk
return replicationzk
@override
public void close   throws ioexception
if  this connection    null
this connection close