/**
* copyright 2010 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase util
import java io printwriter
import java lang thread uncaughtexceptionhandler
import java util concurrent linkedblockingqueue
import java util concurrent threadfactory
import java util concurrent threadpoolexecutor
import java util concurrent timeunit
import java util concurrent atomic atomicinteger
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop util reflectionutils
/**
* thread utility
*/
public class threads
protected static final log log   logfactory getlog threads class
/**
* utility method that sets name, daemon status and starts passed thread.
* @param t thread to run
* @return returns the passed thread <code>t</code>.
*/
public static thread setdaemonthreadrunning final thread t
return setdaemonthreadrunning t  t getname
/**
* utility method that sets name, daemon status and starts passed thread.
* @param t thread to frob
* @param name new name
* @return returns the passed thread <code>t</code>.
*/
public static thread setdaemonthreadrunning final thread t
final string name
return setdaemonthreadrunning t  name  null
/**
* utility method that sets name, daemon status and starts passed thread.
* @param t thread to frob
* @param name new name
* @param handler a handler to set on the thread.  pass null if want to
* use default handler.
* @return returns the passed thread <code>t</code>.
*/
public static thread setdaemonthreadrunning final thread t
final string name  final uncaughtexceptionhandler handler
t setname name
if  handler    null
t setuncaughtexceptionhandler handler
t setdaemon true
t start
return t
/**
* shutdown passed thread using isalive and join.
* @param t thread to shutdown
*/
public static void shutdown final thread t
shutdown t  0
/**
* shutdown passed thread using isalive and join.
* @param joinwait pass 0 if we're to wait forever.
* @param t thread to shutdown
*/
public static void shutdown final thread t  final long joinwait
if  t    null  return
while  t isalive
try
t join joinwait
catch  interruptedexception e
log warn t getname         joinwait  e
/**
* @param t waits on the passed thread to die dumping a threaddump every
* minute while its up.
* @throws interruptedexception
*/
public static void threaddumpingisalive final thread t
throws interruptedexception
if  t    null
return
while  t isalive
t join 60   1000
if  t isalive
reflectionutils printthreadinfo new printwriter system out
t getname
/**
* @param millis how long to sleep for in milliseconds.
*/
public static void sleep int millis
try
thread sleep millis
catch  interruptedexception e
e printstacktrace
/**
* sleeps for the given amount of time even if interrupted. preserves
* the interrupt status.
* @param mstowait the amount of time to sleep in milliseconds
*/
public static void sleepwithoutinterrupt final long mstowait
long timemillis   system currenttimemillis
long endtime   timemillis   mstowait
boolean interrupted   false
while  timemillis < endtime
try
thread sleep endtime   timemillis
catch  interruptedexception ex
interrupted   true
timemillis   system currenttimemillis
if  interrupted
thread currentthread   interrupt
/**
* create a new cachedthreadpool with a bounded number as the maximum
* thread size in the pool.
*
* @param maxcachedthread the maximum thread could be created in the pool
* @param timeout the maximum time to wait
* @param unit the time unit of the timeout argument
* @param threadfactory the factory to use when creating new threads
* @return threadpoolexecutor the cachedthreadpool with a bounded number
* as the maximum thread size in the pool.
*/
public static threadpoolexecutor getboundedcachedthreadpool
int maxcachedthread  long timeout  timeunit unit
threadfactory threadfactory
threadpoolexecutor boundedcachedthreadpool
new threadpoolexecutor maxcachedthread  maxcachedthread  timeout
timeunit seconds  new linkedblockingqueue<runnable>    threadfactory
// allow the core pool threads timeout and terminate
boundedcachedthreadpool allowcorethreadtimeout true
return boundedcachedthreadpool
/**
* returns a {@link java.util.concurrent.threadfactory} that names each
* created thread uniquely, with a common prefix.
*
* @param prefix  the prefix of every created thread's name
* @return a {@link java.util.concurrent.threadfactory} that names threads
*/
public static threadfactory getnamedthreadfactory final string prefix
return new threadfactory
private final atomicinteger threadnumber   new atomicinteger 1
@override
public thread newthread runnable r
return new thread r  prefix   threadnumber getandincrement