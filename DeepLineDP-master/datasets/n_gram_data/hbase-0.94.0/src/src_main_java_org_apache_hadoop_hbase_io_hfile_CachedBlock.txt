/**
* copyright 2009 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase io hfile
import org apache hadoop hbase io heapsize
import org apache hadoop hbase util bytes
import org apache hadoop hbase util classsize
/**
* represents an entry in the {@link lrublockcache}.
*
* <p>makes the block memory-aware with {@link heapsize} and comparable
* to sort by access time for the lru.  it also takes care of priority by
* either instantiating as in-memory or handling the transition from single
* to multiple access.
*/
public class cachedblock implements heapsize  comparable<cachedblock>
public final static long per_block_overhead   classsize align
classsize object    3   classsize reference     2   bytes sizeof_long
classsize string   classsize byte_buffer
static enum blockpriority
/**
* accessed a single time (used for scan-resistance)
*/
single
/**
* accessed multiple times
*/
multi
/**
* block from in-memory store
*/
memory
private final blockcachekey cachekey
private final cacheable buf
private volatile long accesstime
private long size
private blockpriority priority
public cachedblock blockcachekey cachekey  cacheable buf  long accesstime
this cachekey  buf  accesstime  false
public cachedblock blockcachekey cachekey  cacheable buf  long accesstime
boolean inmemory
this cachekey   cachekey
this buf   buf
this accesstime   accesstime
// we approximate the size of this class by the size of its name string
// plus the size of its byte buffer plus the overhead associated with all
// the base classes. we also include the base class
// sizes in the per_block_overhead variable rather than align()ing them with
// their buffer lengths. this variable is used elsewhere in unit tests.
this size   classsize align cachekey heapsize
classsize align buf heapsize      per_block_overhead
if inmemory
this priority   blockpriority memory
else
this priority   blockpriority single
/**
* block has been accessed.  update its local access time.
*/
public void access long accesstime
this accesstime   accesstime
if this priority    blockpriority single
this priority   blockpriority multi
public long heapsize
return size
public int compareto cachedblock that
if this accesstime    that accesstime  return 0
return this accesstime < that accesstime ? 1    1
public cacheable getbuffer
return this buf
public blockcachekey getcachekey
return this cachekey
public blockpriority getpriority
return this priority