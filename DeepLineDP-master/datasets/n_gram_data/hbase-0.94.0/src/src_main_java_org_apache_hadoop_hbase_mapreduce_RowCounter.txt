/**
* copyright 2008 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase mapreduce
import java io ioexception
import org apache hadoop conf configuration
import org apache hadoop hbase hbaseconfiguration
import org apache hadoop hbase keyvalue
import org apache hadoop hbase client result
import org apache hadoop hbase client scan
import org apache hadoop hbase filter firstkeyonlyfilter
import org apache hadoop hbase io immutablebyteswritable
import org apache hadoop hbase util bytes
import org apache hadoop mapreduce job
import org apache hadoop mapreduce lib output nulloutputformat
import org apache hadoop util genericoptionsparser
/**
* a job with a just a map phase to count rows. map outputs table rows if the
* input row has columns that have content.
*/
public class rowcounter
/** name of this 'program'. */
static final string name
/**
* mapper that runs the count.
*/
static class rowcountermapper
extends tablemapper<immutablebyteswritable  result>
/** counter enumeration to count the actual rows. */
public static enum counters  rows
/**
* maps the data.
*
* @param row  the current table row key.
* @param values  the columns.
* @param context  the current context.
* @throws ioexception when something is broken with the data.
* @see org.apache.hadoop.mapreduce.mapper#map(keyin, valuein,
*   org.apache.hadoop.mapreduce.mapper.context)
*/
@override
public void map immutablebyteswritable row  result values
context context
throws ioexception
// count every row containing data, whether it's in qualifiers or values
context getcounter counters rows  increment 1
/**
* sets up the actual job.
*
* @param conf  the current configuration.
* @param args  the command line parameters.
* @return the newly created job.
* @throws ioexception when setting up the job fails.
*/
public static job createsubmittablejob configuration conf  string args
throws ioexception
string tablename   args
string startkey   null
string endkey   null
stringbuilder sb   new stringbuilder
final string rangeswitch
// first argument is table name, starting from second
for  int i   1  i < args length  i
if  args startswith rangeswitch
string startend   args substring rangeswitch length    split    2
if  startend length    2    startend contains
printusage    range a b
range  b    range a
return null
startkey   startend
endkey   startend
else
// if no switch, assume column names
sb append args
sb append
job job   new job conf  name       tablename
job setjarbyclass rowcounter class
scan scan   new scan
scan setcacheblocks false
if  startkey    null     startkey equals
scan setstartrow bytes tobytes startkey
if  endkey    null     endkey equals
scan setstoprow bytes tobytes endkey
scan setfilter new firstkeyonlyfilter
if  sb length   > 0
for  string columnname   sb tostring   trim   split
string  fields   columnname split
if fields length    1
scan addfamily bytes tobytes fields
else
scan addcolumn bytes tobytes fields   bytes tobytes fields
job setoutputformatclass nulloutputformat class
tablemapreduceutil inittablemapperjob tablename  scan
rowcountermapper class  immutablebyteswritable class  result class  job
job setnumreducetasks 0
return job
/*
* @param errormessage can attach a message when error occurs.
*/
private static void printusage string errormessage
system err println     errormessage
printusage
/*
* prints usage without error message
*/
private static void printusage
system err println
system err println
/**
* main entry point.
*
* @param args  the command line parameters.
* @throws exception when running the job fails.
*/
public static void main string args  throws exception
configuration conf   hbaseconfiguration create
string otherargs   new genericoptionsparser conf  args  getremainingargs
if  otherargs length < 1
printusage     args length
system exit  1
job job   createsubmittablejob conf  otherargs
if  job    null
system exit  1
system exit job waitforcompletion true  ? 0   1