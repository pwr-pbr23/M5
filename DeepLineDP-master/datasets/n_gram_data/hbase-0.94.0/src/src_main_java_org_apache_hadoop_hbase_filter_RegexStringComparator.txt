/**
* copyright 2010 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase filter
import org apache hadoop hbase hconstants
import org apache hadoop hbase util bytes
import org apache commons logging log
import org apache commons logging logfactory
import java io datainput
import java io dataoutput
import java io ioexception
import java nio charset charset
import java nio charset illegalcharsetnameexception
import java util regex pattern
/**
* this comparator is for use with {@link comparefilter} implementations, such
* as {@link rowfilter}, {@link qualifierfilter}, and {@link valuefilter}, for
* filtering based on the value of a given column. use it to test if a given
* regular expression matches a cell value in the column.
* <p>
* only equal or not_equal comparisons are valid with this comparator.
* <p>
* for example:
* <p>
* <pre>
* valuefilter vf = new valuefilter(compareop.equal,
*     new regexstringcomparator(
*       // v4 ip address
*       "(((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3,3}" +
*         "(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))(\\/[0-9]+)?" +
*         "|" +
*       // v6 ip address
*       "((([\\da-fa-f]{1,4}:){7}[\\da-fa-f]{1,4})(:([\\d]{1,3}.)" +
*         "{3}[\\d]{1,3})?)(\\/[0-9]+)?"));
* </pre>
*/
public class regexstringcomparator extends writablebytearraycomparable
private static final log log   logfactory getlog regexstringcomparator class
private charset charset   charset forname hconstants utf8_encoding
private pattern pattern
/** nullary constructor for writable, do not use */
public regexstringcomparator
/**
* constructor
* @param expr a valid regular expression
*/
public regexstringcomparator string expr
super bytes tobytes expr
this pattern   pattern compile expr  pattern dotall
/**
* specifies the {@link charset} to use to convert the row key to a string.
* <p>
* the row key needs to be converted to a string in order to be matched
* against the regular expression.  this method controls which charset is
* used to do this conversion.
* <p>
* if the row key is made of arbitrary bytes, the charset {@code iso-8859-1}
* is recommended.
* @param charset the charset to use.
*/
public void setcharset final charset charset
this charset   charset
@override
public int compareto byte value  int offset  int length
// use find() for subsequence match instead of matches() (full sequence
// match) to adhere to the principle of least surprise.
return pattern matcher new string value  offset  length  charset   find   ? 0
1
@override
public void readfields datainput in  throws ioexception
final string expr   in readutf
this value   bytes tobytes expr
this pattern   pattern compile expr
final string charset   in readutf
if  charset length   > 0
try
this charset   charset forname charset
catch  illegalcharsetnameexception e
log error    e
@override
public void write dataoutput out  throws ioexception
out writeutf pattern tostring
out writeutf charset name