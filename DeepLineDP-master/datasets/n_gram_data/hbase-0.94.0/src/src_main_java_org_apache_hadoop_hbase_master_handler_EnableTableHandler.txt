/**
* copyright 2011 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase master handler
import java io ioexception
import java util list
import java util concurrent executorservice
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop hbase hregioninfo
import org apache hadoop hbase server
import org apache hadoop hbase tablenotdisabledexception
import org apache hadoop hbase tablenotfoundexception
import org apache hadoop hbase catalog catalogtracker
import org apache hadoop hbase catalog metareader
import org apache hadoop hbase executor eventhandler
import org apache hadoop hbase master assignmentmanager
import org apache hadoop hbase master bulkassigner
import org apache hadoop hbase util bytes
import org apache zookeeper keeperexception
/**
* handler to run enable of a table.
*/
public class enabletablehandler extends eventhandler
private static final log log   logfactory getlog enabletablehandler class
private final byte  tablename
private final string tablenamestr
private final assignmentmanager assignmentmanager
private final catalogtracker ct
public enabletablehandler server server  byte  tablename
catalogtracker catalogtracker  assignmentmanager assignmentmanager
boolean skiptablestatecheck
throws tablenotfoundexception  tablenotdisabledexception  ioexception
super server  eventtype c_m_enable_table
this tablename   tablename
this tablenamestr   bytes tostring tablename
this ct   catalogtracker
this assignmentmanager   assignmentmanager
// check if table exists
if   metareader tableexists catalogtracker  this tablenamestr
throw new tablenotfoundexception bytes tostring tablename
// there could be multiple client requests trying to disable or enable
// the table at the same time. ensure only the first request is honored
// after that, no other requests can be accepted until the table reaches
// disabled or enabled.
if   skiptablestatecheck
try
if   this assignmentmanager getzktable   checkdisabledandsetenablingtable
this tablenamestr
log info     tablenamestr
throw new tablenotdisabledexception this tablenamestr
catch  keeperexception e
throw new ioexception
e
@override
public string tostring
string name
if server    null    server getservername      null
name   server getservername   tostring
return getclass   getsimplename         name       getseqid
tablenamestr
@override
public void process
try
log info     this tablenamestr
handleenabletable
catch  ioexception e
log error     this tablenamestr  e
catch  keeperexception e
log error     this tablenamestr  e
private void handleenabletable   throws ioexception  keeperexception
// i could check table is disabling and if so, not enable but require
// that user first finish disabling but that might be obnoxious.
// set table enabling flag up in zk.
this assignmentmanager getzktable   setenablingtable this tablenamestr
boolean done   false
// get the regions of this table. we're done when all listed
// tables are onlined.
list<hregioninfo> regionsinmeta
regionsinmeta   metareader gettableregions this ct  tablename  true
int countofregionsintable   regionsinmeta size
list<hregioninfo> regions   regionstoassign regionsinmeta
int regionscount   regions size
if  regionscount    0
done   true
log info     countofregionsintable
regionscount
bulkenabler bd   new bulkenabler this server  regions
countofregionsintable
try
if  bd bulkassign
done   true
catch  interruptedexception e
log warn
// preserve the interrupt.
thread currentthread   interrupt
// flip the table to enabled.
if  done  this assignmentmanager getzktable   setenabledtable
this tablenamestr
log info     done
/**
* @param regionsinmeta this datastructure is edited by this method.
* @return the <code>regionsinmeta</code> list minus the regions that have
* been onlined; i.e. list of regions that need onlining.
* @throws ioexception
*/
private list<hregioninfo> regionstoassign
final list<hregioninfo> regionsinmeta
throws ioexception
final list<hregioninfo> onlineregions
this assignmentmanager getregionsoftable tablename
regionsinmeta removeall onlineregions
return regionsinmeta
/**
* run bulk enable.
*/
class bulkenabler extends bulkassigner
private final list<hregioninfo> regions
// count of regions in table at time this assign was launched.
private final int countofregionsintable
bulkenabler final server server  final list<hregioninfo> regions
final int countofregionsintable
super server
this regions   regions
this countofregionsintable   countofregionsintable
@override
protected void populatepool executorservice pool  throws ioexception
boolean roundrobinassignment   this server getconfiguration   getboolean
false
if   roundrobinassignment
for  hregioninfo region   regions
if  assignmentmanager isregionintransition region     null
continue
final hregioninfo hri   region
pool execute new runnable
public void run
assignmentmanager assign hri  true
else
try
assignmentmanager assignuserregionstoonlineservers regions
catch  interruptedexception e
log warn
thread currentthread   interrupt
@override
protected boolean waituntildone long timeout
throws interruptedexception
long starttime   system currenttimemillis
long remaining   timeout
list<hregioninfo> regions   null
int lastnumberofregions   0
while   server isstopped      remaining > 0
thread sleep waitingtimeforevents
regions   assignmentmanager getregionsoftable tablename
if  isdone regions   break
// punt on the timeout as long we make progress
if  regions size   > lastnumberofregions
lastnumberofregions   regions size
timeout    waitingtimeforevents
remaining   timeout    system currenttimemillis     starttime
return isdone regions
private boolean isdone final list<hregioninfo> regions
return regions    null    regions size   >  this countofregionsintable