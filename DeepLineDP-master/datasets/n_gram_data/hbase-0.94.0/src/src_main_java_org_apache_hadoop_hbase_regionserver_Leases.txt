/**
* copyright 2007 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase regionserver
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop hbase util hasthread
import java util concurrentmodificationexception
import java util hashmap
import java util map
import java util concurrent delayed
import java util concurrent delayqueue
import java util concurrent timeunit
import java io ioexception
/**
* leases
*
* there are several server classes in hbase that need to track external
* clients that occasionally send heartbeats.
*
* <p>these external clients hold resources in the server class.
* those resources need to be released if the external client fails to send a
* heartbeat after some interval of time passes.
*
* <p>the leases class is a general reusable class for this kind of pattern.
* an instance of the leases class will create a thread to do its dirty work.
* you should close() the instance if you want to clean up the thread properly.
*
* <p>
* note: this class extends thread rather than chore because the sleep time
* can be interrupted when there is something to do, rather than the chore
* sleep time which is invariant.
*/
public class leases extends hasthread
private static final log log   logfactory getlog leases class getname
private final int leaseperiod
private final int leasecheckfrequency
private volatile delayqueue<lease> leasequeue   new delayqueue<lease>
protected final map<string  lease> leases   new hashmap<string  lease>
private volatile boolean stoprequested   false
/**
* creates a lease monitor
*
* @param leaseperiod - length of time (milliseconds) that the lease is valid
* @param leasecheckfrequency - how often the lease should be checked
* (milliseconds)
*/
public leases final int leaseperiod  final int leasecheckfrequency
this leaseperiod   leaseperiod
this leasecheckfrequency   leasecheckfrequency
setdaemon true
/**
* @see java.lang.thread#run()
*/
@override
public void run
while   stoprequested     stoprequested    leasequeue size   > 0
lease lease   null
try
lease   leasequeue poll leasecheckfrequency  timeunit milliseconds
catch  interruptedexception e
continue
catch  concurrentmodificationexception e
continue
catch  throwable e
log fatal    e
break
if  lease    null
continue
// a lease expired.  run the expired code before removing from queue
// since its presence in queue is used to see if lease exists still.
if  lease getlistener      null
log error     lease getleasename
else
lease getlistener   leaseexpired
synchronized  leasequeue
leases remove lease getleasename
close
/**
* shuts down this lease instance when all outstanding leases expire.
* like {@link #close()} but rather than violently end all leases, waits
* first on extant leases to finish.  use this method if the lease holders
* could loose data, leak locks, etc.  presumes client has shutdown
* allocation of new leases.
*/
public void closeafterleasesexpire
this stoprequested   true
/**
* shut down this leases instance.  all pending leases will be destroyed,
* without any cancellation calls.
*/
public void close
log info thread currentthread   getname
this stoprequested   true
synchronized  leasequeue
leasequeue clear
leases clear
leasequeue notifyall
log info thread currentthread   getname
/**
* obtain a lease
*
* @param leasename name of the lease
* @param listener listener that will process lease expirations
* @throws leasestillheldexception
*/
public void createlease string leasename  final leaselistener listener
throws leasestillheldexception
addlease new lease leasename  listener
/**
* inserts lease.  resets expiration before insertion.
* @param lease
* @throws leasestillheldexception
*/
public void addlease final lease lease  throws leasestillheldexception
if  this stoprequested
return
lease setexpirationtime system currenttimemillis     this leaseperiod
synchronized  leasequeue
if  leases containskey lease getleasename
throw new leasestillheldexception lease getleasename
leases put lease getleasename    lease
leasequeue add lease
/**
* thrown if we are asked create a lease but lease on passed name already
* exists.
*/
@suppresswarnings
public static class leasestillheldexception extends ioexception
private final string leasename
/**
* @param name
*/
public leasestillheldexception final string name
this leasename   name
/** @return name of lease */
public string getname
return this leasename
/**
* renew a lease
*
* @param leasename name of lease
* @throws leaseexception
*/
public void renewlease final string leasename  throws leaseexception
synchronized  leasequeue
lease lease   leases get leasename
// we need to check to see if the remove is successful as the poll in the run()
// method could have completed between the get and the remove which will result
// in a corrupt leasequeue.
if  lease    null     leasequeue remove lease
throw new leaseexception     leasename
lease setexpirationtime system currenttimemillis     leaseperiod
leasequeue add lease
/**
* client explicitly cancels a lease.
* @param leasename name of lease
* @throws leaseexception
*/
public void cancellease final string leasename  throws leaseexception
removelease leasename
/**
* remove named lease.
* lease is removed from the list of leases and removed from the delay queue.
* lease can be resinserted using {@link #addlease(lease)}
*
* @param leasename name of lease
* @throws leaseexception
* @return removed lease
*/
lease removelease final string leasename  throws leaseexception
lease lease    null
synchronized  leasequeue
lease   leases remove leasename
if  lease    null
throw new leaseexception     leasename
leasequeue remove lease
return lease
/** this class tracks a single lease. */
static class lease implements delayed
private final string leasename
private final leaselistener listener
private long expirationtime
lease final string leasename  leaselistener listener
this leasename  listener  0
lease final string leasename  leaselistener listener  long expirationtime
this leasename   leasename
this listener   listener
this expirationtime   expirationtime
/** @return the lease name */
public string getleasename
return leasename
/** @return listener */
public leaselistener getlistener
return this listener
@override
public boolean equals object obj
if  this    obj
return true
if  obj    null
return false
if  getclass      obj getclass
return false
return this hashcode        lease  obj  hashcode
@override
public int hashcode
return this leasename hashcode
public long getdelay timeunit unit
return unit convert this expirationtime   system currenttimemillis
timeunit milliseconds
public int compareto delayed o
long delta   this getdelay timeunit milliseconds
o getdelay timeunit milliseconds
return this equals o  ? 0    delta > 0 ? 1    1
/** @param expirationtime the expirationtime to set */
public void setexpirationtime long expirationtime
this expirationtime   expirationtime