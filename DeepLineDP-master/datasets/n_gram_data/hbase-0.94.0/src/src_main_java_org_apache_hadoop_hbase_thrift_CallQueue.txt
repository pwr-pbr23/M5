/*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase thrift
import java util arraylist
import java util collection
import java util iterator
import java util list
import java util concurrent blockingqueue
import java util concurrent timeunit
import org apache commons logging log
import org apache commons logging logfactory
/**
* a blockingqueue reports waiting time in queue and queue length to
* thriftmetrics.
*/
public class callqueue implements blockingqueue<runnable>
private static log log   logfactory getlog callqueue class
private final blockingqueue<call> underlyingqueue
private final thriftmetrics metrics
public callqueue blockingqueue<call> underlyingqueue
thriftmetrics metrics
this underlyingqueue   underlyingqueue
this metrics   metrics
private static long now
return system nanotime
public static class call implements runnable
final long starttime
final runnable underlyingrunnable
call runnable underlyingrunnable
this underlyingrunnable   underlyingrunnable
this starttime   now
@override
public void run
underlyingrunnable run
public long timeinqueue
return now     starttime
@override
public boolean equals object other
if  other instanceof call
call othercall    call  other
return this underlyingrunnable equals othercall underlyingrunnable
else if  other instanceof runnable
return this underlyingrunnable equals other
return false
@override
public int hashcode
return this underlyingrunnable hashcode
@override
public runnable poll
call result   underlyingqueue poll
updatemetrics result
return result
private void updatemetrics call result
if  result    null
return
metrics inctimeinqueue result timeinqueue
metrics setcallqueuelen this size
@override
public runnable poll long timeout  timeunit unit  throws interruptedexception
call result   underlyingqueue poll timeout  unit
updatemetrics result
return result
@override
public runnable remove
call result   underlyingqueue remove
updatemetrics result
return result
@override
public runnable take   throws interruptedexception
call result   underlyingqueue take
updatemetrics result
return result
@override
public int drainto collection<? super runnable> destination
return drainto destination  integer max_value
@override
public int drainto collection<? super runnable> destination
int maxelements
if  destination    this
throw new illegalargumentexception
list<call> drained   new arraylist<call>
underlyingqueue drainto drained  maxelements
for  call r   drained
updatemetrics r
destination addall drained
int sz   drained size
log info     sz
return sz
@override
public boolean offer runnable element
return underlyingqueue offer new call element
@override
public boolean offer runnable element  long timeout  timeunit unit
throws interruptedexception
return underlyingqueue offer new call element   timeout  unit
@override
public void put runnable element  throws interruptedexception
underlyingqueue put new call element
@override
public boolean add runnable element
return underlyingqueue add new call element
@override
public boolean addall collection<? extends runnable> elements
int added   0
for  runnable r   elements
added    underlyingqueue add new call r   ? 1   0
return added    0
@override
public runnable element
return underlyingqueue element
@override
public runnable peek
return underlyingqueue peek
@override
public void clear
underlyingqueue clear
@override
public boolean containsall collection<?> elements
return underlyingqueue containsall elements
@override
public boolean isempty
return underlyingqueue isempty
@override
public iterator<runnable> iterator
return new iterator<runnable>
final iterator<call> underlyingiterator   underlyingqueue iterator
@override
public runnable next
return underlyingiterator next
@override
public boolean hasnext
return underlyingiterator hasnext
@override
public void remove
underlyingiterator remove
@override
public boolean removeall collection<?> elements
return underlyingqueue removeall elements
@override
public boolean retainall collection<?> elements
return underlyingqueue retainall elements
@override
public int size
return underlyingqueue size
@override
public object toarray
return underlyingqueue toarray
@override
public <t> t toarray t array
return underlyingqueue toarray array
@override
public boolean contains object element
return underlyingqueue contains element
@override
public int remainingcapacity
return underlyingqueue remainingcapacity
@override
public boolean remove object element
return underlyingqueue remove element