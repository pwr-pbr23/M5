/*
* copyright 2011 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase util
import java util collection
import java util comparator
import java util iterator
import java util sortedset
import java util treeset
/**
* simple {@link java.util.sortedset} implementation that uses an internal
* {@link java.util.treeset} to provide ordering. all mutation operations
* create a new copy of the <code>treeset</code> instance, so are very
* expensive.  this class is only intended for use on small, very rarely
* written collections that expect highly concurrent reads. read operations
* are performed on a reference to the internal <code>treeset</code> at the
* time of invocation, so will not see any mutations to the collection during
* their operation.
*
* <p>note that due to the use of a {@link java.util.treeset} internally,
* a {@link java.util.comparator} instance must be provided, or collection
* elements must implement {@link java.lang.comparable}.
* </p>
* @param <e> a class implementing {@link java.lang.comparable} or able to be
* compared by a provided comparator.
*/
public class sortedcopyonwriteset<e> implements sortedset<e>
private sortedset<e> internalset
public sortedcopyonwriteset
this internalset   new treeset<e>
public sortedcopyonwriteset collection<? extends e> c
this internalset   new treeset<e> c
public sortedcopyonwriteset comparator<? super e> comparator
this internalset   new treeset<e> comparator
@override
public int size
return internalset size
@override
public boolean isempty
return internalset isempty
@override
public boolean contains object o
return internalset contains o
@override
public iterator<e> iterator
return internalset iterator
@override
public object toarray
return internalset toarray
@override
public <t> t toarray t a
return internalset toarray a
@override
public synchronized boolean add e e
sortedset<e> newset   new treeset<e> internalset
boolean added   newset add e
internalset   newset
return added
@override
public synchronized boolean remove object o
sortedset<e> newset   new treeset<e> internalset
boolean removed   newset remove o
internalset   newset
return removed
@override
public boolean containsall collection<?> c
return internalset containsall c
@override
public synchronized boolean addall collection<? extends e> c
sortedset<e> newset   new treeset<e> internalset
boolean changed   newset addall c
internalset   newset
return changed
@override
public synchronized boolean retainall collection<?> c
sortedset<e> newset   new treeset<e> internalset
boolean changed   newset retainall c
internalset   newset
return changed
@override
public synchronized boolean removeall collection<?> c
sortedset<e> newset   new treeset<e> internalset
boolean changed   newset removeall c
internalset   newset
return changed
@override
public synchronized void clear
comparator<? super e> comparator   internalset comparator
if  comparator    null
internalset   new treeset<e> comparator
else
internalset   new treeset<e>
@override
public comparator<? super e> comparator
return internalset comparator
@override
public sortedset<e> subset e fromelement  e toelement
return internalset subset fromelement  toelement
@override
public sortedset<e> headset e toelement
return internalset headset toelement
@override
public sortedset<e> tailset e fromelement
return internalset tailset fromelement
@override
public e first
return internalset first
@override
public e last
return internalset last