/**
* copyright 2011 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase coprocessor
import java io ioexception
import java util list
import org apache hadoop hbase client scan
import org apache hadoop hbase client coprocessor aggregationclient
import org apache hadoop hbase ipc coprocessorprotocol
import org apache hadoop hbase util pair
/**
* defines the aggregation functions that are to be supported in this
* coprocessor. for each method, it takes a scan object and a columninterpreter.
* the scan object should have a column family (else an exception will be
* thrown), and an optional column qualifier. in the current implementation
* {@link aggregateimplementation}, only one column family and column qualifier
* combination is served. in case there are more than one, only first one will
* be picked. refer to {@link aggregationclient} for some general conditions on
* input parameters.
*/
public interface aggregateprotocol extends coprocessorprotocol
public static final long version   1l
/**
* gives the maximum for a given combination of column qualifier and column
* family, in the given row range as defined in the scan object. in its
* current implementation, it takes one column family and one column qualifier
* (if provided). in case of null column qualifier, maximum value for the
* entire column family will be returned.
* @param ci
* @param scan
* @return max value as mentioned above
* @throws ioexception
*/
<t  s> t getmax columninterpreter<t  s> ci  scan scan  throws ioexception
/**
* gives the minimum for a given combination of column qualifier and column
* family, in the given row range as defined in the scan object. in its
* current implementation, it takes one column family and one column qualifier
* (if provided). in case of null column qualifier, minimum value for the
* entire column family will be returned.
* @param ci
* @param scan
* @return min as mentioned above
* @throws ioexception
*/
<t  s> t getmin columninterpreter<t  s> ci  scan scan  throws ioexception
/**
* gives the sum for a given combination of column qualifier and column
* family, in the given row range as defined in the scan object. in its
* current implementation, it takes one column family and one column qualifier
* (if provided). in case of null column qualifier, sum for the entire column
* family will be returned.
* @param ci
* @param scan
* @return sum of values as defined by the column interpreter
* @throws ioexception
*/
<t  s> s getsum columninterpreter<t  s> ci  scan scan  throws ioexception
/**
* @param ci
* @param scan
* @return row count for the given column family and column qualifier, in
* the given row range as defined in the scan object.
* @throws ioexception
*/
<t  s> long getrownum columninterpreter<t  s> ci  scan scan
throws ioexception
/**
* gives a pair with first object as sum and second object as row count,
* computed for a given combination of column qualifier and column family in
* the given row range as defined in the scan object. in its current
* implementation, it takes one column family and one column qualifier (if
* provided). in case of null column qualifier, an aggregate sum over all the
* entire column family will be returned.
* <p>
* the average is computed in
* {@link aggregationclient#avg(byte[], columninterpreter, scan)} by
* processing results from all regions, so its "ok" to pass sum and a long
* type.
* @param ci
* @param scan
* @return average
* @throws ioexception
*/
<t  s> pair<s  long> getavg columninterpreter<t  s> ci  scan scan
throws ioexception
/**
* gives a pair with first object a list containing sum and sum of squares,
* and the second object as row count. it is computed for a given combination of
* column qualifier and column family in the given row range as defined in the
* scan object. in its current implementation, it takes one column family and
* one column qualifier (if provided). the idea is get the value of variance first:
* the average of the squares less the square of the average a standard
* deviation is square root of variance.
* @param ci
* @param scan
* @return std
* @throws ioexception
*/
<t  s> pair<list<s>  long> getstd columninterpreter<t  s> ci  scan scan
throws ioexception
/**
* gives a list containing sum of values and sum of weights.
* it is computed for the combination of column
* family and column qualifier(s) in the given row range as defined in the
* scan object. in its current implementation, it takes one column family and
* two column qualifiers. the first qualifier is for values column and
* the second qualifier (optional) is for weight column.
* @param ci
* @param scan
* @return pair
* @throws ioexception
*/
<t  s> list<s> getmedian columninterpreter<t  s> ci  scan scan
throws ioexception