/**
* copyright 2007 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase
import java io datainput
import java io dataoutput
import java io ioexception
import java util arrays
import java util collections
import java util map
import java util set
import java util treemap
import java util treeset
import org apache hadoop hbase util bytes
import org apache hadoop hbase util strings
import org apache hadoop io versionedwritable
import org apache hadoop io writablecomparable
import org apache hadoop io writableutils
/**
* this class is used exporting current state of load on a regionserver.
*/
public class hserverload extends versionedwritable
implements writablecomparable<hserverload>
private static final byte version   2
// empty load instance.
public static final hserverload empty_hserverload   new hserverload
/** number of requests per second since last report.
*/
// todo: instead build this up out of region counters.
private int numberofrequests   0
/** total number of requests from the start of the region server.
*/
private int totalnumberofrequests   0
/** the amount of used heap, in mb */
private int usedheapmb   0
/** the maximum allowable size of the heap, in mb */
private int maxheapmb   0
// regionserver-level coprocessors, e.g., walobserver implementations.
// region-level coprocessors, on the other hand, are stored inside regionload
// objects.
private set<string> coprocessors
new treeset<string>
/**
* hbase-4070: improve region server metrics to report loaded coprocessors.
*
* @return returns the set of all coprocessors on this
* regionserver, where this set is the union of the
* regionserver-level coprocessors on one hand, and all of the region-level
* coprocessors, on the other.
*
* we must iterate through all regions loaded on this regionserver to
* obtain all of the region-level coprocessors.
*/
public string getcoprocessors
treeset<string> returnvalue   new treeset<string> coprocessors
for  map entry<byte  regionload> rls  getregionsload   entryset
for  string coprocessor  rls getvalue   getcoprocessors
returnvalue add coprocessor
return returnvalue toarray new string
/** per-region load metrics */
private map<byte  regionload> regionload
new treemap<byte  regionload> bytes bytes_comparator
/** @return the object version number */
public byte getversion
return version
/**
* encapsulates per-region loading metrics.
*/
public static class regionload extends versionedwritable
private static final byte version   2
/** @return the object version number */
public byte getversion
return version
/** the region name */
private byte name
/** the number of stores for the region */
private int stores
/** the number of storefiles for the region */
private int storefiles
/** the total size of the store files for the region, uncompressed, in mb */
private int storeuncompressedsizemb
/** the current total size of the store files for the region, in mb */
private int storefilesizemb
/** the current size of the memstore for the region, in mb */
private int memstoresizemb
/**
* the current total size of root-level store file indexes for the region,
* in mb. the same as {@link #rootindexsizekb} but in mb.
*/
private int storefileindexsizemb
/** the current total read requests made to region */
private long readrequestscount
/** the current total write requests made to region */
private long writerequestscount
/** the total compacting key values in currently running compaction */
private long totalcompactingkvs
/** the completed count of key values in currently running compaction */
private long currentcompactedkvs
/** the current total size of root-level indexes for the region, in kb. */
private int rootindexsizekb
/** the total size of all index blocks, not just the root level, in kb. */
private int totalstaticindexsizekb
/**
* the total size of all bloom filter blocks, not just loaded into the
* block cache, in kb.
*/
private int totalstaticbloomsizekb
// region-level coprocessors.
set<string> coprocessors
new treeset<string>
/**
* constructor, for writable
*/
public regionload
super
/**
* @param name
* @param stores
* @param storefiles
* @param storeuncompressedsizemb
* @param storefilesizemb
* @param memstoresizemb
* @param storefileindexsizemb
* @param readrequestscount
* @param writerequestscount
* @param totalcompactingkvs
* @param currentcompactedkvs
* @param coprocessors
*/
public regionload final byte name  final int stores
final int storefiles  final int storeuncompressedsizemb
final int storefilesizemb
final int memstoresizemb  final int storefileindexsizemb
final int rootindexsizekb  final int totalstaticindexsizekb
final int totalstaticbloomsizekb
final long readrequestscount  final long writerequestscount
final long totalcompactingkvs  final long currentcompactedkvs
final set<string> coprocessors
this name   name
this stores   stores
this storefiles   storefiles
this storeuncompressedsizemb   storeuncompressedsizemb
this storefilesizemb   storefilesizemb
this memstoresizemb   memstoresizemb
this storefileindexsizemb   storefileindexsizemb
this rootindexsizekb   rootindexsizekb
this totalstaticindexsizekb   totalstaticindexsizekb
this totalstaticbloomsizekb   totalstaticbloomsizekb
this readrequestscount   readrequestscount
this writerequestscount   writerequestscount
this totalcompactingkvs   totalcompactingkvs
this currentcompactedkvs   currentcompactedkvs
this coprocessors   coprocessors
// getters
private string getcoprocessors
return coprocessors toarray new string
/**
* @return the region name
*/
public byte getname
return name
/**
* @return the region name as a string
*/
public string getnameasstring
return bytes tostring name
/**
* @return the number of stores
*/
public int getstores
return stores
/**
* @return the number of storefiles
*/
public int getstorefiles
return storefiles
/**
* @return the total size of the storefiles, in mb
*/
public int getstorefilesizemb
return storefilesizemb
/**
* @return the memstore size, in mb
*/
public int getmemstoresizemb
return memstoresizemb
/**
* @return the approximate size of storefile indexes on the heap, in mb
*/
public int getstorefileindexsizemb
return storefileindexsizemb
/**
* @return the number of requests made to region
*/
public long getrequestscount
return readrequestscount   writerequestscount
/**
* @return the number of read requests made to region
*/
public long getreadrequestscount
return readrequestscount
/**
* @return the number of read requests made to region
*/
public long getwriterequestscount
return writerequestscount
/**
* @return the current total size of root-level indexes for the region, in kb.
*/
public int getrootindexsizekb
return rootindexsizekb
/**
* @return the total size of all index blocks, not just the root level, in kb.
*/
public int gettotalstaticindexsizekb
return totalstaticindexsizekb
/**
* @return the total size of all bloom filter blocks, not just loaded into the
* block cache, in kb.
*/
public int gettotalstaticbloomsizekb
return totalstaticbloomsizekb
/**
* @return the total number of kvs in current compaction
*/
public long gettotalcompactingkvs
return totalcompactingkvs
/**
* @return the number of already compacted kvs in current compaction
*/
public long getcurrentcompactedkvs
return currentcompactedkvs
// setters
/**
* @param name the region name
*/
public void setname byte name
this name   name
/**
* @param stores the number of stores
*/
public void setstores int stores
this stores   stores
/**
* @param storefiles the number of storefiles
*/
public void setstorefiles int storefiles
this storefiles   storefiles
/**
* @param memstoresizemb the memstore size, in mb
*/
public void setmemstoresizemb int memstoresizemb
this memstoresizemb   memstoresizemb
/**
* @param storefileindexsizemb the approximate size of storefile indexes
*  on the heap, in mb
*/
public void setstorefileindexsizemb int storefileindexsizemb
this storefileindexsizemb   storefileindexsizemb
/**
* @param requestscount the number of read requests to region
*/
public void setreadrequestscount int requestscount
this readrequestscount   requestscount
/**
* @param requestscount the number of write requests to region
*/
public void setwriterequestscount int requestscount
this writerequestscount   requestscount
/**
* @param totalcompactingkvs the number of kvs total in current compaction
*/
public void settotalcompactingkvs long totalcompactingkvs
this totalcompactingkvs   totalcompactingkvs
/**
* @param currentcompactedkvs the number of kvs already compacted in
* current compaction
*/
public void setcurrentcompactedkvs long currentcompactedkvs
this currentcompactedkvs   currentcompactedkvs
/**
* hbase-5256 and hbase-5283 introduced incompatible serialization changes
* this method reads the fields in 0.92 serialization format, ex-version field
* @param in
* @throws ioexception
*/
private void readfields92 datainput in  throws ioexception
// in 0.92, the version was actually written twice, consume the second copy
int version   in readbyte
int namelen   in readint
this name   new byte
in readfully this name
this stores   in readint
this storefiles   in readint
this storeuncompressedsizemb   in readint
this storefilesizemb   in readint
this memstoresizemb   in readint
this storefileindexsizemb   in readint
this readrequestscount   in readint
this writerequestscount   in readint
this rootindexsizekb   in readint
this totalstaticindexsizekb   in readint
this totalstaticbloomsizekb   in readint
this totalcompactingkvs   in readlong
this currentcompactedkvs   in readlong
int coprocessorssize   in readint
coprocessors   new treeset<string>
for  int i   0  i < coprocessorssize  i
coprocessors add in readutf
// writable
public void readfields datainput in  throws ioexception
int version   in readbyte
if  version > version  throw new ioexception     version
if  version    1
readfields92 in
return
int namelen   writableutils readvint in
this name   new byte
in readfully this name
this stores   writableutils readvint in
this storefiles   writableutils readvint in
this storeuncompressedsizemb   writableutils readvint in
this storefilesizemb   writableutils readvint in
this memstoresizemb   writableutils readvint in
this storefileindexsizemb   writableutils readvint in
this readrequestscount   writableutils readvlong in
this writerequestscount   writableutils readvlong in
this rootindexsizekb   writableutils readvint in
this totalstaticindexsizekb   writableutils readvint in
this totalstaticbloomsizekb   writableutils readvint in
this totalcompactingkvs   writableutils readvlong in
this currentcompactedkvs   writableutils readvlong in
int coprocessorssize   writableutils readvint in
coprocessors   new treeset<string>
for  int i   0  i < coprocessorssize  i
coprocessors add in readutf
public void write dataoutput out  throws ioexception
super write out
writableutils writevint out  name length
out write name
writableutils writevint out  stores
writableutils writevint out  storefiles
writableutils writevint out  storeuncompressedsizemb
writableutils writevint out  storefilesizemb
writableutils writevint out  memstoresizemb
writableutils writevint out  storefileindexsizemb
writableutils writevlong out  readrequestscount
writableutils writevlong out  writerequestscount
writableutils writevint out  rootindexsizekb
writableutils writevint out  totalstaticindexsizekb
writableutils writevint out  totalstaticbloomsizekb
writableutils writevlong out  totalcompactingkvs
writableutils writevlong out  currentcompactedkvs
writableutils writevint out  coprocessors size
for  string coprocessor  coprocessors
out writeutf coprocessor
/**
* @see java.lang.object#tostring()
*/
@override
public string tostring
stringbuilder sb   strings appendkeyvalue new stringbuilder
integer valueof this stores
sb   strings appendkeyvalue sb
integer valueof this storefiles
sb   strings appendkeyvalue sb
integer valueof this storeuncompressedsizemb
sb   strings appendkeyvalue sb
integer valueof this storefilesizemb
if  this storeuncompressedsizemb    0
sb   strings appendkeyvalue sb
string format     float this storefilesizemb
float this storeuncompressedsizemb
sb   strings appendkeyvalue sb
integer valueof this memstoresizemb
sb   strings appendkeyvalue sb
integer valueof this storefileindexsizemb
sb   strings appendkeyvalue sb
long valueof this readrequestscount
sb   strings appendkeyvalue sb
long valueof this writerequestscount
sb   strings appendkeyvalue sb
integer valueof this rootindexsizekb
sb   strings appendkeyvalue sb
integer valueof this totalstaticindexsizekb
sb   strings appendkeyvalue sb
integer valueof this totalstaticbloomsizekb
sb   strings appendkeyvalue sb
long valueof this totalcompactingkvs
sb   strings appendkeyvalue sb
long valueof this currentcompactedkvs
float compactionprogresspct   float nan
if  this totalcompactingkvs > 0
compactionprogresspct   float valueof
this currentcompactedkvs   this totalcompactingkvs
sb   strings appendkeyvalue sb
compactionprogresspct
string coprocessors   arrays tostring getcoprocessors
if  coprocessors    null
sb   strings appendkeyvalue sb
arrays tostring getcoprocessors
return sb tostring
/*
* todo: other metrics that might be considered when the master is actually
* doing load balancing instead of merely trying to decide where to assign
* a region:
* <ul>
*   <li># of cpus, heap size (to determine the "class" of machine). for
*       now, we consider them to be homogeneous.</li>
*   <li>#requests per region (map<{string|hregioninfo}, integer>)</li>
*   <li>#compactions and/or #splits (churn)</li>
*   <li>server death rate (maybe there is something wrong with this server)</li>
* </ul>
*/
/** default constructor (used by writable) */
public hserverload
super
/**
* constructor
* @param numberofrequests
* @param usedheapmb
* @param maxheapmb
* @param coprocessors : coprocessors loaded at the regionserver-level
*/
public hserverload final int totalnumberofrequests
final int numberofrequests  final int usedheapmb  final int maxheapmb
final map<byte  regionload> regionload
final set<string> coprocessors
this numberofrequests   numberofrequests
this usedheapmb   usedheapmb
this maxheapmb   maxheapmb
this regionload   regionload
this totalnumberofrequests   totalnumberofrequests
this coprocessors   coprocessors
/**
* constructor
* @param hsl the template hserverload
*/
public hserverload final hserverload hsl
this hsl totalnumberofrequests  hsl numberofrequests  hsl usedheapmb
hsl maxheapmb  hsl getregionsload    hsl coprocessors
for  map entry<byte  regionload> e   hsl regionload entryset
this regionload put e getkey    e getvalue
/**
* originally, this method factored in the effect of requests going to the
* server as well. however, this does not interact very well with the current
* region rebalancing code, which only factors number of regions. for the
* interim, until we can figure out how to make rebalancing use all the info
* available, we're just going to make load purely the number of regions.
*
* @return load factor for this server
*/
public int getload
// int load = numberofrequests == 0 ? 1 : numberofrequests;
// load *= numberofregions == 0 ? 1 : numberofregions;
// return load;
return this regionload size
/**
* @see java.lang.object#tostring()
*/
@override
public string tostring
return tostring 1
/**
* returns tostring() with the number of requests divided by the message
* interval in seconds
* @param msginterval
* @return the load as a string
*/
public string tostring int msginterval
int numberofregions   this regionload size
stringbuilder sb   new stringbuilder
sb   strings appendkeyvalue sb
integer valueof numberofrequests msginterval
sb   strings appendkeyvalue sb
integer valueof numberofregions
sb   strings appendkeyvalue sb
integer valueof this usedheapmb
sb   strings appendkeyvalue sb     integer valueof maxheapmb
return sb tostring
/**
* @see java.lang.object#equals(java.lang.object)
*/
@override
public boolean equals object o
if  this    o
return true
if  o    null
return false
if  getclass      o getclass
return false
return compareto  hserverload o     0
// getters
/**
* @return the numberofregions
*/
public int getnumberofregions
return this regionload size
/**
* @return the numberofrequests per second.
*/
public int getnumberofrequests
return numberofrequests
/**
* @return the numberofrequests
*/
public int gettotalnumberofrequests
return totalnumberofrequests
/**
* @return the amount of heap in use, in mb
*/
public int getusedheapmb
return usedheapmb
/**
* @return the maximum allowable heap size, in mb
*/
public int getmaxheapmb
return maxheapmb
/**
* @return region load metrics
*/
public map<byte  regionload> getregionsload
return collections unmodifiablemap regionload
/**
* @return count of storefiles on this regionserver
*/
public int getstorefiles
int count   0
for  regionload info  regionload values
count    info getstorefiles
return count
/**
* @return total size of store files in mb
*/
public int getstorefilesizeinmb
int count   0
for  regionload info  regionload values
count    info getstorefilesizemb
return count
/**
* @return size of memstores in mb
*/
public int getmemstoresizeinmb
int count   0
for  regionload info  regionload values
count    info getmemstoresizemb
return count
/**
* @return size of store file indexes in mb
*/
public int getstorefileindexsizeinmb
int count   0
for  regionload info  regionload values
count    info getstorefileindexsizemb
return count
// writable
public void readfields datainput in  throws ioexception
super readfields in
int version   in readbyte
if  version > version  throw new ioexception     version
numberofrequests   in readint
usedheapmb   in readint
maxheapmb   in readint
int numberofregions   in readint
for  int i   0  i < numberofregions  i
regionload rl   new regionload
rl readfields in
regionload put rl getname    rl
totalnumberofrequests   in readint
int coprocessorssize   in readint
for int i   0  i < coprocessorssize  i
coprocessors add in readutf
public void write dataoutput out  throws ioexception
super write out
out writebyte version
out writeint numberofrequests
out writeint usedheapmb
out writeint maxheapmb
out writeint this regionload size
for  regionload rl  regionload values
rl write out
out writeint totalnumberofrequests
out writeint coprocessors size
for  string coprocessor  coprocessors
out writeutf coprocessor
// comparable
public int compareto hserverload o
return this getload     o getload