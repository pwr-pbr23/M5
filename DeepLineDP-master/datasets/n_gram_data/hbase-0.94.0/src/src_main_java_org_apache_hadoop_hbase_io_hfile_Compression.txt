/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements. see the notice file distributed with this
* work for additional information regarding copyright ownership. the asf
* licenses this file to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
* http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis, without
* warranties or conditions of any kind, either express or implied. see the
* license for the specific language governing permissions and limitations under
* the license.
*/
package org apache hadoop hbase io hfile
import java io bufferedinputstream
import java io bufferedoutputstream
import java io filteroutputstream
import java io ioexception
import java io inputstream
import java io outputstream
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop conf configurable
import org apache hadoop conf configuration
import org apache hadoop io compress codecpool
import org apache hadoop io compress compressioncodec
import org apache hadoop io compress compressioninputstream
import org apache hadoop io compress compressionoutputstream
import org apache hadoop io compress compressor
import org apache hadoop io compress decompressor
import org apache hadoop io compress gzipcodec
import org apache hadoop io compress defaultcodec
import org apache hadoop util reflectionutils
/**
* compression related stuff.
* copied from hadoop-3315 tfile.
*/
public final class compression
static final log log   logfactory getlog compression class
/**
* prevent the instantiation of class.
*/
private compression
super
static class finishonflushcompressionstream extends filteroutputstream
public finishonflushcompressionstream compressionoutputstream cout
super cout
@override
public void write byte b  int off  int len  throws ioexception
out write b  off  len
@override
public void flush   throws ioexception
compressionoutputstream cout    compressionoutputstream  out
cout finish
cout flush
cout resetstate
/**
* returns the classloader to load the codec class from.
* @return
*/
private static classloader getclassloaderforcodec
classloader cl   thread currentthread   getcontextclassloader
if  cl    null
cl   compression class getclassloader
if  cl    null
cl   classloader getsystemclassloader
if  cl    null
throw new runtimeexception
return cl
/**
* compression algorithms. the ordinal of these cannot change or else you
* risk breaking all existing hfiles out there.  even the ones that are
* not compressed! (they use the none algorithm)
*/
public static enum algorithm
lzo
// use base type to avoid compile-time dependencies.
private transient compressioncodec lzocodec
@override
compressioncodec getcodec configuration conf
if  lzocodec    null
try
class<?> externalcodec
getclassloaderforcodec   loadclass
lzocodec    compressioncodec  reflectionutils newinstance externalcodec
new configuration conf
catch  classnotfoundexception e
throw new runtimeexception e
return lzocodec
gz
private transient gzipcodec codec
@override
defaultcodec getcodec configuration conf
if  codec    null
codec   new reusablestreamgzipcodec
codec setconf new configuration conf
return codec
none
@override
defaultcodec getcodec configuration conf
return null
@override
public synchronized inputstream createdecompressionstream
inputstream downstream  decompressor decompressor
int downstreambuffersize  throws ioexception
if  downstreambuffersize > 0
return new bufferedinputstream downstream  downstreambuffersize
// else {
// make sure we bypass fsinputchecker buffer.
// return new bufferedinputstream(downstream, 1024);
// }
// }
return downstream
@override
public synchronized outputstream createcompressionstream
outputstream downstream  compressor compressor
int downstreambuffersize  throws ioexception
if  downstreambuffersize > 0
return new bufferedoutputstream downstream  downstreambuffersize
return downstream
snappy
// use base type to avoid compile-time dependencies.
private transient compressioncodec snappycodec
@override
compressioncodec getcodec configuration conf
if  snappycodec    null
try
class<?> externalcodec
getclassloaderforcodec   loadclass
snappycodec    compressioncodec  reflectionutils newinstance externalcodec
conf
catch  classnotfoundexception e
throw new runtimeexception e
return snappycodec
private final configuration conf
private final string compressname
// data input buffer size to absorb small reads from application.
private static final int data_ibuf_size   1   1024
// data output buffer size to absorb small writes from application.
private static final int data_obuf_size   4   1024
algorithm string name
this conf   new configuration
this conf setboolean    true
this compressname   name
abstract compressioncodec getcodec configuration conf
public inputstream createdecompressionstream
inputstream downstream  decompressor decompressor
int downstreambuffersize  throws ioexception
compressioncodec codec   getcodec conf
// set the internal buffer size to read from down stream.
if  downstreambuffersize > 0
configurable codec  getconf   setint
downstreambuffersize
compressioninputstream cis
codec createinputstream downstream  decompressor
bufferedinputstream bis2   new bufferedinputstream cis  data_ibuf_size
return bis2
public outputstream createcompressionstream
outputstream downstream  compressor compressor  int downstreambuffersize
throws ioexception
outputstream bos1   null
if  downstreambuffersize > 0
bos1   new bufferedoutputstream downstream  downstreambuffersize
else
bos1   downstream
compressionoutputstream cos
createplaincompressionstream bos1  compressor
bufferedoutputstream bos2
new bufferedoutputstream new finishonflushcompressionstream cos
data_obuf_size
return bos2
/**
* creates a compression stream without any additional wrapping into
* buffering streams.
*/
compressionoutputstream createplaincompressionstream
outputstream downstream  compressor compressor  throws ioexception
compressioncodec codec   getcodec conf
configurable codec  getconf   setint    32   1024
return codec createoutputstream downstream  compressor
public compressor getcompressor
compressioncodec codec   getcodec conf
if  codec    null
compressor compressor   codecpool getcompressor codec
if  compressor    null
if  compressor finished
// somebody returns the compressor to codecpool but is still using
// it.
log
warn
// throw new assertionerror(
// "compressor obtained from codecpool is already finished()");
compressor reset
return compressor
return null
public void returncompressor compressor compressor
if  compressor    null
codecpool returncompressor compressor
public decompressor getdecompressor
compressioncodec codec   getcodec conf
if  codec    null
decompressor decompressor   codecpool getdecompressor codec
if  decompressor    null
if  decompressor finished
// somebody returns the decompressor to codecpool but is still using
// it.
log
warn
// throw new assertionerror(
// "decompressor obtained from codecpool is already finished()");
decompressor reset
return decompressor
return null
public void returndecompressor decompressor decompressor
if  decompressor    null
codecpool returndecompressor decompressor
public string getname
return compressname
public static algorithm getcompressionalgorithmbyname string compressname
algorithm algos   algorithm class getenumconstants
for  algorithm a   algos
if  a getname   equals compressname
return a
throw new illegalargumentexception
compressname
static string getsupportedalgorithms
algorithm algos   algorithm class getenumconstants
string ret   new string
int i   0
for  algorithm a   algos
ret   a getname
return ret