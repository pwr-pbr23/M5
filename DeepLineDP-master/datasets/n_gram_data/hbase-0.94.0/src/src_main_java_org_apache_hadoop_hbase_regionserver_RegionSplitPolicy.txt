/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase regionserver
import java io ioexception
import java util map
import org apache hadoop conf configuration
import org apache hadoop conf configured
import org apache hadoop hbase hconstants
import org apache hadoop hbase htabledescriptor
import org apache hadoop util reflectionutils
import com google common base preconditions
/**
* a split policy determines when a region should be split.
* {@see constantsizeregionsplitpolicy}
*/
public abstract class regionsplitpolicy extends configured
private static final class<? extends regionsplitpolicy>
default_split_policy_class   increasingtoupperboundregionsplitpolicy class
/**
* the region configured for this split policy.
*/
protected hregion region
/**
* upon construction, this method will be called with the region
* to be governed. it will be called once and only once.
*/
protected void configureforregion hregion region
preconditions checkstate
this region    null
this region
this region   region
/**
* @return true if the specified region should be split.
*/
protected abstract boolean shouldsplit
/**
* @return the key at which the region should be split, or null
* if it cannot be split. this will only be called if shouldsplit
* previously returned true.
*/
protected byte getsplitpoint
byte explicitsplitpoint   this region getexplicitsplitpoint
if  explicitsplitpoint    null
return explicitsplitpoint
map<byte  store> stores   region getstores
byte splitpointfromlargeststore   null
long largeststoresize   0
for  store s   stores values
byte splitpoint   s getsplitpoint
long storesize   s getsize
if  splitpoint    null    largeststoresize < storesize
splitpointfromlargeststore   splitpoint
largeststoresize   storesize
return splitpointfromlargeststore
/**
* create the regionsplitpolicy configured for the given table.
* each
* @param htd
* @param conf
* @return
* @throws ioexception
*/
public static regionsplitpolicy create hregion region
configuration conf  throws ioexception
class<? extends regionsplitpolicy> clazz   getsplitpolicyclass
region gettabledesc    conf
regionsplitpolicy policy   reflectionutils newinstance clazz  conf
policy configureforregion region
return policy
static class<? extends regionsplitpolicy> getsplitpolicyclass
htabledescriptor htd  configuration conf  throws ioexception
string classname   htd getregionsplitpolicyclassname
if  classname    null
classname   conf get hconstants hbase_region_split_policy_key
default_split_policy_class getname
try
class<? extends regionsplitpolicy> clazz
class forname classname  assubclass regionsplitpolicy class
return clazz
catch  exception  e
throw new ioexception
classname       htd getnameasstring
e