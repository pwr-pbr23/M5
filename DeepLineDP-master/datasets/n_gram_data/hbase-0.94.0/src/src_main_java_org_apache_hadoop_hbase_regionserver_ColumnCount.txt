/**
* copyright 2010 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase regionserver
/**
* simple wrapper for a byte buffer and a counter.  does not copy.
* <p>
* not thread-safe because it is not used in a multi-threaded context, yet.
*/
public class columncount
private final byte  bytes
private final int offset
private final int length
private int count
/**
* constructor
* @param column the qualifier to count the versions for
*/
public columncount byte  column
this column  0
/**
* constructor
* @param column the qualifier to count the versions for
* @param count initial count
*/
public columncount byte  column  int count
this column  0  column length  count
/**
* constuctor
* @param column the qualifier to count the versions for
* @param offset in the passed buffer where to start the qualifier from
* @param length of the qualifier
* @param count initial count
*/
public columncount byte  column  int offset  int length  int count
this bytes   column
this offset   offset
this length   length
this count   count
/**
* @return the buffer
*/
public byte  getbuffer
return this bytes
/**
* @return the offset
*/
public int getoffset
return this offset
/**
* @return the length
*/
public int getlength
return this length
/**
* decrement the current version count
* @return current count
*/
public int decrement
return   count
/**
* increment the current version count
* @return current count
*/
public int increment
return   count
/**
* set the current count to a new count
* @param count new count to set
*/
public void setcount int count
this count   count