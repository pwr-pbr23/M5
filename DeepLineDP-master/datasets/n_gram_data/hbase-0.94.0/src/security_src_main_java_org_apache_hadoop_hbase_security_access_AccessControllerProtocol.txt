/*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase security access
import java io ioexception
import java util list
import org apache hadoop hbase ipc coprocessorprotocol
/**
* a custom protocol defined for maintaining and querying access control lists.
*/
public interface accesscontrollerprotocol extends coprocessorprotocol
public static final long version   1l
/**
* grants the given user or group the privilege to perform the given actions
* over the specified scope contained in {@link tablepermission}
* @param user the user name, or, if prefixed with "@", group name receiving
* the grant
* @param permission the details of the provided permissions
* @throws ioexception if the grant could not be applied
*/
public void grant byte user  tablepermission permission
throws ioexception
/**
* revokes a previously granted privilege from a user or group.
* note that the provided {@link tablepermission} details must exactly match
* a stored grant.  for example, if user "bob" has been granted "read" access
* to table "data", over column family and qualifer "info:cola", then the
* table, column family and column qualifier must all be specified.
* attempting to revoke permissions over just the "data" table will have
* no effect.
* @param user the user name, or, if prefixed with "@", group name whose
* privileges are being revoked
* @param permission the details of the previously granted permission to revoke
* @throws ioexception if the revocation could not be performed
*/
public void revoke byte user  tablepermission permission
throws ioexception
/**
* queries the permissions currently stored for the given table, returning
* a list of currently granted permissions, along with the user or group
* each is associated with.
* @param tablename the table of the permission grants to return
* @return a list of the currently granted permissions, with associated user
* or group names
* @throws ioexception if there is an error querying the permissions
*/
public list<userpermission> getuserpermissions byte tablename
throws ioexception
/**
* checks whether the given permissions will pass the access checks for the
* current user. global permissions can be checked from the -acl- table
* or any other table, however tablepermissions can only be checked by
* the table's regions. if access control checks fail this method throws
* accessdeniedexception.
* @param permissions to check for. permission subclasses can be used
* to do more specific checks at the table/family/column level.
* @throws ioexception if there is an error checking the permissions
*/
public void checkpermissions permission permissions
throws ioexception