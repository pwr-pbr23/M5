/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements. see the notice file distributed with this
* work for additional information regarding copyright ownership. the asf
* licenses this file to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
* http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis, without
* warranties or conditions of any kind, either express or implied. see the
* license for the specific language governing permissions and limitations
* under the license.
*/
package org apache hadoop hbase io hfile
import java io bytearrayoutputstream
import java io dataoutputstream
import java io ioexception
import java nio bytebuffer
import org apache hadoop hbase io encoding datablockencoder
import org apache hadoop hbase io encoding datablockencoding
import org apache hadoop hbase io hfile hfileblock
import org apache hadoop hbase io hfile hfile fileinfo
import org apache hadoop hbase regionserver storefile
import org apache hadoop hbase util bytes
import org apache hadoop hbase util pair
import com google common base preconditions
/**
* do different kinds of data block encoding according to column family
* options.
*/
public class hfiledatablockencoderimpl implements hfiledatablockencoder
private final datablockencoding ondisk
private final datablockencoding incache
public hfiledatablockencoderimpl datablockencoding encoding
this encoding  encoding
/**
* do data block encoding with specified options.
* @param ondisk what kind of data block encoding will be used before writing
*          hfileblock to disk. this must be either the same as incache or
*          {@link datablockencoding#none}.
* @param incache what kind of data block encoding will be used in block
*          cache.
*/
public hfiledatablockencoderimpl datablockencoding ondisk
datablockencoding incache
this ondisk   ondisk    null ?
ondisk   datablockencoding none
this incache   incache    null ?
incache   datablockencoding none
preconditions checkargument ondisk    datablockencoding none
ondisk    incache      ondisk
incache
datablockencoding none
public static hfiledatablockencoder createfromfileinfo
fileinfo fileinfo  datablockencoding preferredencodingincache
throws ioexception
boolean haspreferredcacheencoding   preferredencodingincache    null
preferredencodingincache    datablockencoding none
byte datablockencodingtype   fileinfo get storefile data_block_encoding
if  datablockencodingtype    null     haspreferredcacheencoding
return noopdatablockencoder instance
datablockencoding ondisk
if  datablockencodingtype    null
ondisk   datablockencoding none
else
string datablockencodingstr   bytes tostring datablockencodingtype
try
ondisk   datablockencoding valueof datablockencodingstr
catch  illegalargumentexception ex
throw new ioexception
datablockencodingstr  ex
datablockencoding incache
if  ondisk    datablockencoding none
// this is an "in-cache-only" encoding or fully-unencoded scenario.
// either way, we use the given encoding (possibly none) specified by
// the column family in cache.
incache   preferredencodingincache
else
// leave blocks in cache encoded the same way as they are on disk.
// if we switch encoding type for the cf or the in-cache-only encoding
// flag, old files will keep their encoding both on disk and in cache,
// but new files will be generated with the new encoding.
incache   ondisk
return new hfiledatablockencoderimpl ondisk  incache
@override
public void savemetadata storefile writer storefilewriter
throws ioexception
storefilewriter appendfileinfo storefile data_block_encoding
ondisk getnameinbytes
@override
public datablockencoding getencodingondisk
return ondisk
@override
public datablockencoding getencodingincache
return incache
@override
public datablockencoding geteffectiveencodingincache boolean iscompaction
if   useencodedscanner iscompaction
return datablockencoding none
return incache
@override
public hfileblock disktocacheformat hfileblock block  boolean iscompaction
if  block getblocktype      blocktype data
if   useencodedscanner iscompaction
// unencoded block, and we don't want to encode in cache.
return block
// encode the unencoded block with the in-cache encoding.
return encodedatablock block  incache  block doesincludememstorets
if  block getblocktype      blocktype encoded_data
if  block getdatablockencodingid      ondisk getid
// the block is already in the desired in-cache encoding.
return block
// we don't want to re-encode a block in a different encoding. the hfile
// reader should have been instantiated in such a way that we would not
// have to do this.
throw new assertionerror
ondisk       block getdatablockencoding
return block
/**
* precondition: a non-encoded buffer.
* postcondition: on-disk encoding.
*/
@override
public pair<bytebuffer  blocktype> beforewritetodisk bytebuffer in
boolean includesmemstorets  byte dummyheader
if  ondisk    datablockencoding none
// there is no need to encode the block before writing it to disk
return new pair<bytebuffer  blocktype> in  blocktype data
bytebuffer encodedbuffer   encodebuffertohfileblockbuffer in
ondisk  includesmemstorets  dummyheader
return new pair<bytebuffer  blocktype> encodedbuffer
blocktype encoded_data
@override
public boolean useencodedscanner boolean iscompaction
if  iscompaction    ondisk    datablockencoding none
return false
return incache    datablockencoding none
private bytebuffer encodebuffertohfileblockbuffer bytebuffer in
datablockencoding algo  boolean includesmemstorets
byte dummyheader
bytearrayoutputstream encodedstream   new bytearrayoutputstream
dataoutputstream dataout   new dataoutputstream encodedstream
datablockencoder encoder   algo getencoder
try
encodedstream write dummyheader
algo writeidinbytes dataout
encoder compresskeyvalues dataout  in
includesmemstorets
catch  ioexception e
throw new runtimeexception string format
algo tostring     e
return bytebuffer wrap encodedstream tobytearray
private hfileblock encodedatablock hfileblock block
datablockencoding algo  boolean includesmemstorets
bytebuffer compressedbuffer   encodebuffertohfileblockbuffer
block getbufferwithoutheader    algo  includesmemstorets
block getdummyheaderforversion
int sizewithoutheader   compressedbuffer limit     block headersize
hfileblock encodedblock   new hfileblock blocktype encoded_data
block getondisksizewithoutheader
sizewithoutheader  block getprevblockoffset
compressedbuffer  hfileblock fill_header  block getoffset
includesmemstorets  block getminorversion
block getbytesperchecksum    block getchecksumtype
block getondiskdatasizewithheader
block passschemametricsto encodedblock
return encodedblock
@override
public string tostring
return getclass   getsimplename         ondisk
incache