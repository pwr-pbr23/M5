/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase util hbck
import java io ioexception
import java util collection
import org apache hadoop hbase util hbasefsck hbckinfo
import org apache hadoop hbase util hbasefsck tableinfo
/**
* this interface provides callbacks for handling particular table integrity
* invariant violations.  this could probably be boiled down to handling holes
* and handling overlaps but currently preserves the older more specific error
* condition codes.
*/
public interface tableintegrityerrorhandler
tableinfo gettableinfo
/**
* set the tableinfo used by all hregioninfos fabricated by other callbacks
*/
void settableinfo tableinfo ti
/**
* callback for handling case where a table has a first region that does not
* have an empty start key.
*
* @param hi an hbckinfo of the second region in a table.  this should have
*    a non-empty startkey, and can be used to fabricate a first region that
*    has an empty start key.
*/
void handleregionstartkeynotempty hbckinfo hi  throws ioexception
/**
* callback for handling a region that has the same start and end key.
*
* @param hi an hbckinfo for a degenerate key.
*/
void handledegenerateregion hbckinfo hi  throws ioexception
/**
* callback for handling two regions that have the same start key.  this is
* a specific case of a region overlap.
* @param hi1 one of the overlapping hbckinfo
* @param hi2 the other overlapping hbckinfo
*/
void handleduplicatestartkeys hbckinfo hi1  hbckinfo hi2  throws ioexception
/**
* callback for handling two reigons that overlap in some arbitrary way.
* this is a specific case of region overlap, and called for each possible
* pair. if two regions have the same start key, the handleduplicatestartkeys
* method is called.
* @param hi1 one of the overlapping hbckinfo
* @param hi2 the other overlapping hbckinfo
*/
void handleoverlapinregionchain hbckinfo hi1  hbckinfo hi2
throws ioexception
/**
* callback for handling a region hole between two keys.
* @param holestartkey key at the beginning of the region hole
* @param holeendkey key at the end of the region hole
*/
void handleholeinregionchain byte holestartkey  byte holeendkey
throws ioexception
/**
* callback for handling an group of regions that overlap.
* @param overlap collection of overlapping regions.
*/
void handleoverlapgroup collection<hbckinfo> overlap  throws ioexception