/**
* copyright 2010 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase filter
import org apache hadoop hbase io hbaseobjectwritable
import org apache hadoop hbase util bytes
import java io datainput
import java io dataoutput
import java io ioexception
import java util arraylist
import com google common base preconditions
/**
* this is a generic filter to be used to filter by comparison.  it takes an
* operator (equal, greater, not equal, etc) and a byte [] comparator.
* <p>
* to filter by row key, use {@link rowfilter}.
* <p>
* to filter by column qualifier, use {@link qualifierfilter}.
* <p>
* to filter by value, use {@link singlecolumnvaluefilter}.
* <p>
* these filters can be wrapped with {@link skipfilter} and {@link whilematchfilter}
* to add more control.
* <p>
* multiple filters can be combined using {@link filterlist}.
*/
public abstract class comparefilter extends filterbase
/** comparison operators. */
public enum compareop
/** less than */
less
/** less than or equal to */
less_or_equal
/** equals */
equal
/** not equal */
not_equal
/** greater than or equal to */
greater_or_equal
/** greater than */
greater
/** no operation */
no_op
protected compareop compareop
protected writablebytearraycomparable comparator
/**
* writable constructor, do not use.
*/
public comparefilter
/**
* constructor.
* @param compareop the compare op for row matching
* @param comparator the comparator for row matching
*/
public comparefilter final compareop compareop
final writablebytearraycomparable comparator
this compareop   compareop
this comparator   comparator
/**
* @return operator
*/
public compareop getoperator
return compareop
/**
* @return the comparator
*/
public writablebytearraycomparable getcomparator
return comparator
protected boolean docompare final compareop compareop
final writablebytearraycomparable comparator  final byte  data
final int offset  final int length
if  compareop    compareop no_op
return true
int compareresult   comparator compareto data  offset  length
switch  compareop
case less
return compareresult <  0
case less_or_equal
return compareresult < 0
case equal
return compareresult    0
case not_equal
return compareresult    0
case greater_or_equal
return compareresult > 0
case greater
return compareresult >  0
default
throw new runtimeexception
compareop name
public static arraylist extractarguments arraylist<byte > filterarguments
preconditions checkargument filterarguments size      2
filterarguments size
compareop compareop   parsefilter createcompareop filterarguments get 0
writablebytearraycomparable comparator   parsefilter createcomparator
parsefilter removequotesfrombytearray filterarguments get 1
if  comparator instanceof regexstringcomparator
comparator instanceof substringcomparator
if  compareop    compareop equal
compareop    compareop not_equal
throw new illegalargumentexception
arraylist arguments   new arraylist
arguments add compareop
arguments add comparator
return arguments
public void readfields datainput in  throws ioexception
compareop   compareop valueof in readutf
comparator    writablebytearraycomparable
hbaseobjectwritable readobject in  null
public void write dataoutput out  throws ioexception
out writeutf compareop name
hbaseobjectwritable writeobject out  comparator
writablebytearraycomparable class  null
@override
public string tostring
return string format
this getclass   getsimplename
this compareop name
bytes tostringbinary this comparator getvalue