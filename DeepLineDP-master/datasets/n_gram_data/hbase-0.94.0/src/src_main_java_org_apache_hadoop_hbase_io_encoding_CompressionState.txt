/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements. see the notice file distributed with this
* work for additional information regarding copyright ownership. the asf
* licenses this file to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
* http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis, without
* warranties or conditions of any kind, either express or implied. see the
* license for the specific language governing permissions and limitations
* under the license.
*/
package org apache hadoop hbase io encoding
import java nio bytebuffer
import org apache hadoop hbase keyvalue
import org apache hadoop hbase util bytebufferutils
/**
* stores the state of data block encoder at the beginning of new key.
*/
class compressionstate
int keylength
int valuelength
short rowlength
int prevoffset   first_key
byte familylength
int qualifierlength
byte type
private final static int first_key    1
boolean isfirst
return prevoffset    first_key
/**
* analyze the key and fill the state.
* uses mark() and reset() in bytebuffer.
* @param in buffer at the position where key starts
* @param keylength length of key in bytes
* @param valuelength length of values in bytes
*/
void readkey bytebuffer in  int keylength  int valuelength
readkey in  keylength  valuelength  0  null
/**
* analyze the key and fill the state assuming we know previous state.
* uses mark() and reset() in bytebuffer to avoid moving the position.
* <p>
* this method overrides all the fields of this instance, except
* {@link #prevoffset}, which is usually manipulated directly by encoders
* and decoders.
* @param in buffer at the position where key starts
* @param keylength length of key in bytes
* @param valuelength length of values in bytes
* @param commonprefix how many first bytes are common with previous keyvalue
* @param previousstate state from previous keyvalue
*/
void readkey bytebuffer in  int keylength  int valuelength
int commonprefix  compressionstate previousstate
this keylength   keylength
this valuelength   valuelength
// fill the state
in mark       mark beginning of key
if  commonprefix < keyvalue row_length_size
rowlength   in getshort
bytebufferutils skip in  rowlength
familylength   in get
qualifierlength   keylength   rowlength   familylength
keyvalue key_infrastructure_size
bytebufferutils skip in  familylength   qualifierlength
else
rowlength   previousstate rowlength
familylength   previousstate familylength
qualifierlength   previousstate qualifierlength
keylength   previousstate keylength
bytebufferutils skip in   keyvalue row_length_size
keyvalue family_length_size
rowlength   familylength   qualifierlength
readtimestamp in
type   in get
in reset
protected void readtimestamp bytebuffer in
// used in subclasses to add timestamp to state
bytebufferutils skip in  keyvalue timestamp_size
void copyfrom compressionstate state
keylength   state keylength
valuelength   state valuelength
rowlength   state rowlength
prevoffset   state prevoffset
familylength   state familylength
qualifierlength   state qualifierlength
type   state type