/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase ipc
import java io datainput
import java io dataoutput
import java io ioexception
import java lang reflect method
import java util arrays
import java util hashmap
import org apache hadoop io writable
import org apache hadoop io writablefactories
import org apache hadoop io writablefactory
public class protocolsignature implements writable
static                    register a ctor
writablefactories setfactory
protocolsignature class
new writablefactory
public writable newinstance     return new protocolsignature
private long version
private int methods   null     an array of method hash codes
/**
* default constructor
*/
public protocolsignature
/**
* constructor
*
* @param version server version
* @param methodhashcodes hash codes of the methods supported by server
*/
public protocolsignature long version  int methodhashcodes
this version   version
this methods   methodhashcodes
public long getversion
return version
public int getmethods
return methods
@override
public void readfields datainput in  throws ioexception
version   in readlong
boolean hasmethods   in readboolean
if  hasmethods
int nummethods   in readint
methods   new int
for  int i 0  i<nummethods  i
methods   in readint
@override
public void write dataoutput out  throws ioexception
out writelong version
if  methods    null
out writeboolean false
else
out writeboolean true
out writeint methods length
for  int method   methods
out writeint method
/**
* calculate a method's hash code considering its method
* name, returning type, and its parameter types
*
* @param method a method
* @return its hash code
*/
static int getfingerprint method method
int hashcode   method getname   hashcode
hashcode    hashcode   31 method getreturntype   getname   hashcode
for  class<?> type   method getparametertypes
hashcode   31 hashcode ^ type getname   hashcode
return hashcode
/**
* convert an array of method into an array of hash codes
*
* @param methods
* @return array of hash codes
*/
private static int getfingerprints method methods
if  methods    null
return null
int hashcodes   new int
for  int i   0  i<methods length  i
hashcodes   getfingerprint methods
return hashcodes
/**
* get the hash code of an array of methods
* methods are sorted before hashcode is calculated.
* so the returned value is irrelevant of the method order in the array.
*
* @param methods an array of methods
* @return the hash code
*/
static int getfingerprint method methods
return getfingerprint getfingerprints methods
/**
* get the hash code of an array of hashcodes
* hashcodes are sorted before hashcode is calculated.
* so the returned value is irrelevant of the hashcode order in the array.
*
* @param methods an array of methods
* @return the hash code
*/
static int getfingerprint int hashcodes
arrays sort hashcodes
return arrays hashcode hashcodes
private static class protocolsigfingerprint
private protocolsignature signature
private int fingerprint
protocolsigfingerprint protocolsignature sig  int fingerprint
this signature   sig
this fingerprint   fingerprint
/**
* a cache that maps a protocol's name to its signature & finger print
*/
final private static hashmap<string  protocolsigfingerprint>
protocol_fingerprint_cache
new hashmap<string  protocolsigfingerprint>
/**
* return a protocol's signature and finger print from cache
*
* @param protocol a protocol class
* @param serverversion protocol version
* @return its signature and finger print
*/
private static protocolsigfingerprint getsigfingerprint
class <? extends versionedprotocol> protocol  long serverversion
string protocolname   protocol getname
synchronized  protocol_fingerprint_cache
protocolsigfingerprint sig   protocol_fingerprint_cache get protocolname
if  sig    null
int servermethodhashcodes   getfingerprints protocol getmethods
sig   new protocolsigfingerprint
new protocolsignature serverversion  servermethodhashcodes
getfingerprint servermethodhashcodes
protocol_fingerprint_cache put protocolname  sig
return sig
/**
* get a server protocol's signature
*
* @param clientmethodshashcode client protocol methods hashcode
* @param serverversion server protocol version
* @param protocol protocol
* @return the server's protocol signature
*/
static protocolsignature getprotocolsignature
int clientmethodshashcode
long serverversion
class<? extends versionedprotocol> protocol
// try to get the finger print & signature from the cache
protocolsigfingerprint sig   getsigfingerprint protocol  serverversion
// check if the client side protocol matches the one on the server side
if  clientmethodshashcode    sig fingerprint
return new protocolsignature serverversion  null       null indicates a match
return sig signature
/**
* get a server protocol's signature
*
* @param server server implementation
* @param protocol server protocol
* @param clientversion client's version
* @param clientmethodshash client's protocol's hash code
* @return the server protocol's signature
* @throws ioexception if any error occurs
*/
@suppresswarnings
public static protocolsignature getprotocolsignature versionedprotocol server
string protocol
long clientversion  int clientmethodshash  throws ioexception
class<? extends versionedprotocol> inter
try
inter    class<? extends versionedprotocol> class forname protocol
catch  exception e
throw new ioexception e
long serverversion   server getprotocolversion protocol  clientversion
return protocolsignature getprotocolsignature
clientmethodshash  serverversion  inter