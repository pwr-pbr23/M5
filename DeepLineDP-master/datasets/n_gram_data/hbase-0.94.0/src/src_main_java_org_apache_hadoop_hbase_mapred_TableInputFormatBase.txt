/**
* copyright 2010 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase mapred
import java io ioexception
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop hbase hconstants
import org apache hadoop hbase client htable
import org apache hadoop hbase client result
import org apache hadoop hbase filter filter
import org apache hadoop hbase io immutablebyteswritable
import org apache hadoop hbase regionserver hregion
import org apache hadoop mapred inputformat
import org apache hadoop mapred inputsplit
import org apache hadoop mapred jobconf
import org apache hadoop mapred recordreader
import org apache hadoop mapred reporter
/**
* a base for {@link tableinputformat}s. receives a {@link htable}, a
* byte[] of input columns and optionally a {@link filter}.
* subclasses may use other tablerecordreader implementations.
* <p>
* an example of a subclass:
* <pre>
*   class exampletif extends tableinputformatbase implements jobconfigurable {
*
*     public void configure(jobconf job) {
*       htable exampletable = new htable(hbaseconfiguration.create(job),
*         bytes.tobytes("exampletable"));
*       // mandatory
*       sethtable(exampletable);
*       text[] inputcolumns = new byte [][] { bytes.tobytes("columna"),
*         bytes.tobytes("columnb") };
*       // mandatory
*       setinputcolumns(inputcolumns);
*       rowfilterinterface examplefilter = new regexprowfilter("keyprefix.*");
*       // optional
*       setrowfilter(examplefilter);
*     }
*
*     public void validateinput(jobconf job) throws ioexception {
*     }
*  }
* </pre>
*/
@deprecated
public abstract class tableinputformatbase
implements inputformat<immutablebyteswritable  result>
final log log   logfactory getlog tableinputformatbase class
private byte  inputcolumns
private htable table
private tablerecordreader tablerecordreader
private filter rowfilter
/**
* builds a tablerecordreader. if no tablerecordreader was provided, uses
* the default.
*
* @see org.apache.hadoop.mapred.inputformat#getrecordreader(inputsplit,
*      jobconf, reporter)
*/
public recordreader<immutablebyteswritable  result> getrecordreader
inputsplit split  jobconf job  reporter reporter
throws ioexception
tablesplit tsplit    tablesplit  split
tablerecordreader trr   this tablerecordreader
// if no table record reader was provided use default
if  trr    null
trr   new tablerecordreader
trr setstartrow tsplit getstartrow
trr setendrow tsplit getendrow
trr sethtable this table
trr setinputcolumns this inputcolumns
trr setrowfilter this rowfilter
trr init
return trr
/**
* calculates the splits that will serve as input for the map tasks.
* <ul>
* splits are created in number equal to the smallest between numsplits and
* the number of {@link hregion}s in the table. if the number of splits is
* smaller than the number of {@link hregion}s then splits are spanned across
* multiple {@link hregion}s and are grouped the most evenly possible. in the
* case splits are uneven the bigger splits are placed first in the
* {@link inputsplit} array.
*
* @param job the map task {@link jobconf}
* @param numsplits a hint to calculate the number of splits (mapred.map.tasks).
*
* @return the input splits
*
* @see org.apache.hadoop.mapred.inputformat#getsplits(org.apache.hadoop.mapred.jobconf, int)
*/
public inputsplit getsplits jobconf job  int numsplits  throws ioexception
if  this table    null
throw new ioexception
byte  startkeys   this table getstartkeys
if  startkeys    null    startkeys length    0
throw new ioexception
if  this inputcolumns    null    this inputcolumns length    0
throw new ioexception
int realnumsplits   numsplits > startkeys length? startkeys length
numsplits
inputsplit splits   new inputsplit
int middle   startkeys length   realnumsplits
int startpos   0
for  int i   0  i < realnumsplits  i
int lastpos   startpos   middle
lastpos   startkeys length % realnumsplits > i ? lastpos   1   lastpos
string regionlocation   table getregionlocation startkeys
gethostname
splits   new tablesplit this table gettablename
startkeys    i   1  < realnumsplits  ? startkeys
hconstants empty_start_row  regionlocation
log info     i       splits
startpos   lastpos
return splits
/**
* @param inputcolumns to be passed in {@link result} to the map task.
*/
protected void setinputcolumns byte  inputcolumns
this inputcolumns   inputcolumns
/**
* allows subclasses to get the {@link htable}.
*/
protected htable gethtable
return this table
/**
* allows subclasses to set the {@link htable}.
*
* @param table to get the data from
*/
protected void sethtable htable table
this table   table
/**
* allows subclasses to set the {@link tablerecordreader}.
*
* @param tablerecordreader
*                to provide other {@link tablerecordreader} implementations.
*/
protected void settablerecordreader tablerecordreader tablerecordreader
this tablerecordreader   tablerecordreader
/**
* allows subclasses to set the {@link filter} to be used.
*
* @param rowfilter
*/
protected void setrowfilter filter rowfilter
this rowfilter   rowfilter