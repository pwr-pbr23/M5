/**
* copyright 2009 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hbase mapreduce
import java io ioexception
import java util hashmap
import java util map
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop conf configuration
import org apache hadoop hbase hbaseconfiguration
import org apache hadoop hbase client delete
import org apache hadoop hbase client htable
import org apache hadoop hbase client put
import org apache hadoop hbase io immutablebyteswritable
import org apache hadoop hbase util bytes
import org apache hadoop io writable
import org apache hadoop mapreduce jobcontext
import org apache hadoop mapreduce outputcommitter
import org apache hadoop mapreduce outputformat
import org apache hadoop mapreduce recordwriter
import org apache hadoop mapreduce taskattemptcontext
/**
* <p>
* hadoop output format that writes to one or more hbase tables. the key is
* taken to be the table name while the output value <em>must</em> be either a
* {@link put} or a {@link delete} instance. all tables must already exist, and
* all puts and deletes must reference only valid column families.
* </p>
*
* <p>
* write-ahead logging (hlog) for puts can be disabled by setting
* {@link #wal_property} to {@link #wal_off}. default value is {@link #wal_on}.
* note that disabling write-ahead logging is only appropriate for jobs where
* loss of data due to region server failure can be tolerated (for example,
* because it is easy to rerun a bulk import).
* </p>
*/
public class multitableoutputformat extends outputformat<immutablebyteswritable  writable>
/** set this to {@link #wal_off} to turn off write-ahead logging (hlog) */
public static final string wal_property
/** property value to use write-ahead logging */
public static final boolean wal_on   true
/** property value to disable write-ahead logging */
public static final boolean wal_off   false
/**
* record writer for outputting to multiple htables.
*/
protected static class multitablerecordwriter extends
recordwriter<immutablebyteswritable  writable>
private static final log log   logfactory getlog multitablerecordwriter class
map<immutablebyteswritable  htable> tables
configuration conf
boolean usewriteaheadlogging
/**
* @param conf
*          hbaseconfiguration to used
* @param usewriteaheadlogging
*          whether to use write ahead logging. this can be turned off (
*          <tt>false</tt>) to improve performance when bulk loading data.
*/
public multitablerecordwriter configuration conf
boolean usewriteaheadlogging
log debug
usewriteaheadlogging ?
this tables   new hashmap<immutablebyteswritable  htable>
this conf   conf
this usewriteaheadlogging   usewriteaheadlogging
/**
* @param tablename
*          the name of the table, as a string
* @return the named table
* @throws ioexception
*           if there is a problem opening a table
*/
htable gettable immutablebyteswritable tablename  throws ioexception
if   tables containskey tablename
log debug
htable table   new htable conf  tablename get
table setautoflush false
tables put tablename  table
return tables get tablename
@override
public void close taskattemptcontext context  throws ioexception
for  htable table   tables values
table flushcommits
/**
* writes an action (put or delete) to the specified table.
*
* @param tablename
*          the table being updated.
* @param action
*          the update, either a put or a delete.
* @throws illegalargumentexception
*          if the action is not a put or a delete.
*/
@override
public void write immutablebyteswritable tablename  writable action  throws ioexception
htable table   gettable tablename
// the actions are not immutable, so we defensively copy them
if  action instanceof put
put put   new put  put  action
put setwritetowal usewriteaheadlogging
table put put
else if  action instanceof delete
delete delete   new delete  delete  action
table delete delete
else
throw new illegalargumentexception
@override
public void checkoutputspecs jobcontext context  throws ioexception
interruptedexception
// we can't know ahead of time if it's going to blow up when the user
// passes a table name that doesn't exist, so nothing useful here.
@override
public outputcommitter getoutputcommitter taskattemptcontext context
throws ioexception  interruptedexception
return new tableoutputcommitter
@override
public recordwriter<immutablebyteswritable  writable> getrecordwriter taskattemptcontext context
throws ioexception  interruptedexception
configuration conf   context getconfiguration
return new multitablerecordwriter hbaseconfiguration create conf
conf getboolean wal_property  wal_on