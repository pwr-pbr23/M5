/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel component bean
import java lang annotation annotation
import java lang reflect accessibleobject
import java lang reflect annotatedelement
import java lang reflect invocationtargetexception
import java lang reflect method
import java lang reflect modifier
import java util arraylist
import java util arrays
import java util iterator
import java util list
import java util concurrent executorservice
import java util concurrent atomic atomicboolean
import org apache camel asynccallback
import org apache camel camelcontext
import org apache camel exchange
import org apache camel exchangepattern
import org apache camel expression
import org apache camel expressionevaluationexception
import org apache camel notypeconversionavailableexception
import org apache camel pattern
import org apache camel processor
import org apache camel runtimeexchangeexception
import org apache camel processor dynamicrouter
import org apache camel processor recipientlist
import org apache camel processor routingslip
import org apache camel processor aggregate aggregationstrategy
import org apache camel support expressionadapter
import org apache camel util camelcontexthelper
import org apache camel util objecthelper
import org apache camel util servicehelper
import org apache camel util stringhelper
import org slf4j logger
import org slf4j loggerfactory
import static org apache camel util objecthelper asstring
/**
* information about a method to be used for invocation.
*
* @version
*/
public class methodinfo
private static final transient logger log   loggerfactory getlogger methodinfo class
private camelcontext camelcontext
private class<?> type
private method method
private final list<parameterinfo> parameters
private final list<parameterinfo> bodyparameters
private final boolean hascustomannotation
private final boolean hashandlerannotation
private expression parametersexpression
private exchangepattern pattern   exchangepattern inout
private recipientlist recipientlist
private routingslip routingslip
private dynamicrouter dynamicrouter
/**
* adapter to invoke the method which has been annotated with the @dynamicrouter
*/
private final class dynamicrouterexpression extends expressionadapter
private final object pojo
private dynamicrouterexpression object pojo
this pojo   pojo
@override
public object evaluate exchange exchange
// evaluate arguments on each invocation as the parameters can have changed/updated since last invocation
final object arguments   parametersexpression evaluate exchange  object class
try
return invoke method  pojo  arguments  exchange
catch  exception e
throw objecthelper wrapruntimecamelexception e
@override
public string tostring
return     method       pojo
public methodinfo camelcontext camelcontext  class<?> type  method method  list<parameterinfo> parameters  list<parameterinfo> bodyparameters
boolean hascustomannotation  boolean hashandlerannotation
this camelcontext   camelcontext
this type   type
this method   method
this parameters   parameters
this bodyparameters   bodyparameters
this hascustomannotation   hascustomannotation
this hashandlerannotation   hashandlerannotation
this parametersexpression   createparametersexpression
pattern oneway   findonewayannotation method
if  oneway    null
pattern   oneway value
if  method getannotation org apache camel routingslip class     null
matchcontext method getannotation org apache camel routingslip class  context
org apache camel routingslip annotation   method getannotation org apache camel routingslip class
routingslip   new routingslip camelcontext
routingslip setdelimiter annotation delimiter
routingslip setignoreinvalidendpoints annotation ignoreinvalidendpoints
// add created routingslip as a service so we have its lifecycle managed
try
camelcontext addservice routingslip
catch  exception e
throw objecthelper wrapruntimecamelexception e
if  method getannotation org apache camel dynamicrouter class     null
matchcontext method getannotation org apache camel dynamicrouter class  context
org apache camel dynamicrouter annotation   method getannotation org apache camel dynamicrouter class
dynamicrouter   new dynamicrouter camelcontext
dynamicrouter setdelimiter annotation delimiter
dynamicrouter setignoreinvalidendpoints annotation ignoreinvalidendpoints
// add created dynamicrouter as a service so we have its lifecycle managed
try
camelcontext addservice dynamicrouter
catch  exception e
throw objecthelper wrapruntimecamelexception e
if  method getannotation org apache camel recipientlist class     null
matchcontext method getannotation org apache camel recipientlist class  context
org apache camel recipientlist annotation   method getannotation org apache camel recipientlist class
recipientlist   new recipientlist camelcontext  annotation delimiter
recipientlist setstoponexception annotation stoponexception
recipientlist setignoreinvalidendpoints annotation ignoreinvalidendpoints
recipientlist setparallelprocessing annotation parallelprocessing
recipientlist setstreaming annotation streaming
recipientlist settimeout annotation timeout
recipientlist setshareunitofwork annotation shareunitofwork
if  objecthelper isnotempty annotation executorserviceref
executorservice executor   camelcontext getexecutorservicemanager   newdefaultthreadpool this  annotation executorserviceref
recipientlist setexecutorservice executor
if  annotation parallelprocessing      recipientlist getexecutorservice      null
// we are running in parallel so we need a thread pool
executorservice executor   camelcontext getexecutorservicemanager   newdefaultthreadpool this
recipientlist setexecutorservice executor
if  objecthelper isnotempty annotation strategyref
aggregationstrategy strategy   camelcontexthelper mandatorylookup camelcontext  annotation strategyref    aggregationstrategy class
recipientlist setaggregationstrategy strategy
if  objecthelper isnotempty annotation onprepareref
processor onprepare   camelcontexthelper mandatorylookup camelcontext  annotation onprepareref    processor class
recipientlist setonprepare onprepare
// add created recipientlist as a service so we have its lifecycle managed
try
camelcontext addservice recipientlist
catch  exception e
throw objecthelper wrapruntimecamelexception e
/**
* does the given context match this camel context
*/
private boolean matchcontext string context
if  objecthelper isnotempty context
if   camelcontext getname   equals context
return false
return true
public string tostring
return method tostring
public methodinvocation createmethodinvocation final object pojo  final exchange exchange
final object arguments   parametersexpression evaluate exchange  object class
return new methodinvocation
public method getmethod
return method
public object getarguments
return arguments
public object proceed asynccallback callback  atomicboolean donesync  throws exception
// dynamic router should be invoked beforehand
if  dynamicrouter    null
if   dynamicrouter isstarted
servicehelper startservice dynamicrouter
// use a expression which invokes the method to be used by dynamic router
expression expression   new dynamicrouterexpression pojo
boolean sync   dynamicrouter doroutingslip exchange  expression  callback
// must remember the done sync returned from the dynamic router
donesync set sync
return void type
// invoke pojo
if  log istraceenabled
log trace    new object method  pojo  asstring arguments   exchange
object result   invoke method  pojo  arguments  exchange
if  recipientlist    null
// ensure its started
if   recipientlist isstarted
servicehelper startservice recipientlist
boolean sync   recipientlist sendtorecipientlist exchange  result  callback
// must remember the done sync returned from the recipient list
donesync set sync
// we don't want to return the list of endpoints
// return void to indicate to beanprocessor that there is no reply
return void type
if  routingslip    null
if   routingslip isstarted
servicehelper startservice routingslip
boolean sync   routingslip doroutingslip exchange  result  callback
// must remember the done sync returned from the routing slip
donesync set sync
return void type
return result
public object getthis
return pojo
public accessibleobject getstaticpart
return method
public class<?> gettype
return type
public method getmethod
return method
/**
* returns the {@link org.apache.camel.exchangepattern} that should be used when invoking this method. this value
* defaults to {@link org.apache.camel.exchangepattern#inout} unless some {@link org.apache.camel.pattern} annotation is used
* to override the message exchange pattern.
*
* @return the exchange pattern to use for invoking this method.
*/
public exchangepattern getpattern
return pattern
public expression getparametersexpression
return parametersexpression
public list<parameterinfo> getbodyparameters
return bodyparameters
public class<?> getbodyparametertype
if  bodyparameters isempty
return null
parameterinfo parameterinfo   bodyparameters get 0
return parameterinfo gettype
public boolean bodyparametermatches class<?> bodytype
class<?> actualtype   getbodyparametertype
return actualtype    null    objecthelper isassignablefrom bodytype  actualtype
public list<parameterinfo> getparameters
return parameters
public boolean hasbodyparameter
return  bodyparameters isempty
public boolean hascustomannotation
return hascustomannotation
public boolean hashandlerannotation
return hashandlerannotation
public boolean isreturntypevoid
return method getreturntype   getname   equals
public boolean isstaticmethod
return modifier isstatic method getmodifiers
protected object invoke method mth  object pojo  object arguments  exchange exchange  throws illegalaccessexception  invocationtargetexception
try
return mth invoke pojo  arguments
catch  illegalargumentexception e
throw new runtimeexchangeexception     mth       arrays aslist arguments   exchange  e
protected expression createparametersexpression
final int size   parameters size
log trace    size
final expression expressions   new expression
for  int i   0  i < size  i
expression parameterexpression   parameters get i  getexpression
expressions   parameterexpression
log trace    i  parameterexpression
return new expression
@suppresswarnings
public <t> t evaluate exchange exchange  class<t> type
object answer   new object
object body   exchange getin   getbody
boolean multiparameterarray   false
if  exchange getin   getheader exchange bean_multi_parameter_array     null
multiparameterarray   exchange getin   getheader exchange bean_multi_parameter_array  boolean class
// if there was an explicit method name to invoke, then we should support using
// any provided parameter values in the method name
string methodname   exchange getin   getheader exchange bean_method_name     string class
// the parameter values is between the parenthesis
string methodparameters   objecthelper between methodname
// use an iterator to walk the parameter values
iterator it   null
if  methodparameters    null
it   objecthelper createiterator methodparameters
// remove headers as they should not be propagated
// we need to do this before the expressions gets evaluated as it may contain
// a @bean expression which would by mistake read these headers. so the headers
// must be removed at this point of time
exchange getin   removeheader exchange bean_multi_parameter_array
exchange getin   removeheader exchange bean_method_name
for  int i   0  i < size  i
// grab the parameter value for the given index
object parametervalue   it    null    it hasnext   ? it next     null
// and the expected parameter type
class<?> parametertype   parameters get i  gettype
// the value for the parameter to use
object value   null
if  multiparameterarray
// get the value from the array
value     object body
else
// prefer to use parameter value if given, as they override any bean parameter binding
// we should skip * as its a type placeholder to indicate any type
if  parametervalue    null     parametervalue equals
// evaluate the parameter value binding
value   evaluateparametervalue exchange  i  parametervalue  parametertype
// use bean parameter binding, if still no value
expression expression   expressions
if  value    null    expression    null
value   evaluateparameterbinding exchange  expression  i  parametertype
// remember the value to use
if  value    void type
answer   value
return  t  answer
/**
* evaluate using parameter values where the values can be provided in the method name syntax.
* <p/>
* this methods returns accordingly:
* <ul>
*     <li><tt>null</tt> - if not a parameter value</li>
*     <li><tt>void.type</tt> - if an explicit null, forcing camel to pass in <tt>null</tt> for that given parameter</li>
*     <li>a non <tt>null</tt> value - if the parameter was a parameter value, and to be used</li>
* </ul>
*
* @since 2.9
*/
private object evaluateparametervalue exchange exchange  int index  object parametervalue  class<?> parametertype
object answer   null
// convert the parameter value to a string
string exp   exchange getcontext   gettypeconverter   convertto string class  parametervalue
if  exp    null
// must trim first as there may be spaces between parameters
exp   exp trim
// check if its a valid parameter value
boolean valid   beanhelper isvalidparametervalue exp
if   valid
// it may be a parameter type instead, and if so, then we should return null,
// as this method is only for evaluating parameter values
boolean isclass   beanhelper isassignabletoexpectedtype exchange getcontext   getclassresolver    exp  parametertype
// the method will return a non null value if exp is a class
if  isclass    null
return null
// use simple language to evaluate the expression, as it may use the simple language to refer to message body, headers etc.
expression expression   null
try
expression   exchange getcontext   resolvelanguage    createexpression exp
parametervalue   expression evaluate exchange  object class
catch  exception e
throw new expressionevaluationexception expression      exp
index       getmethod    exchange  e
if  parametervalue    null
// special for explicit null parameter values (as end users can explicit indicate they want null as parameter)
// see method javadoc for details
if    equals parametervalue
return void type
// the parameter value was not already valid, but since the simple language have evaluated the expression
// which may change the parametervalue, so we have to check it again to see if its now valid
exp   exchange getcontext   gettypeconverter   convertto string class  parametervalue
// string values from the simple language is always valid
if   valid
// re validate if the parameter was not valid the first time (string values should be accepted)
valid   parametervalue instanceof string    beanhelper isvalidparametervalue exp
if  valid
// we need to unquote string parameters, as the enclosing quotes is there to denote a parameter value
if  parametervalue instanceof string
parametervalue   stringhelper removeleadingandendingquotes  string  parametervalue
try
// its a valid parameter value, so convert it to the expected type of the parameter
answer   exchange getcontext   gettypeconverter   mandatoryconvertto parametertype  parametervalue
if  log istraceenabled
log trace    new object index  answer  objecthelper type answer
catch  notypeconversionavailableexception e
throw objecthelper wrapcamelexecutionexception exchange  e
return answer
/**
* evaluate using classic parameter binding using the pre compute expression
*/
private object evaluateparameterbinding exchange exchange  expression expression  int index  class<?> parametertype
object answer   null
// use object first to avoid type conversion so we know if there is a value or not
object result   expression evaluate exchange  object class
if  result    null
// we got a value now try to convert it to the expected type
try
answer   exchange getcontext   gettypeconverter   mandatoryconvertto parametertype  result
if  log istraceenabled
log trace    new object index  answer  objecthelper type answer
catch  notypeconversionavailableexception e
throw objecthelper wrapcamelexecutionexception exchange  e
else
log trace    index
return answer
@override
public string tostring
return     arrays aslist expressions
/**
* finds the oneway annotation in priority order; look for method level annotations first, then the class level annotations,
* then super class annotations then interface annotations
*
* @param method the method on which to search
* @return the first matching annotation or none if it is not available
*/
protected pattern findonewayannotation method method
pattern answer   getpatternannotation method
if  answer    null
class<?> type   method getdeclaringclass
// create the search order of types to scan
list<class<?>> typestosearch   new arraylist<class<?>>
addtypeandsupertypes type  typestosearch
class<?> interfaces   type getinterfaces
for  class<?> aninterface   interfaces
addtypeandsupertypes aninterface  typestosearch
// now let's scan for a type which the current declared class overloads
answer   findonewayannotationonmethod typestosearch  method
if  answer    null
answer   findonewayannotation typestosearch
return answer
/**
* returns the pattern annotation on the given annotated element; either as a direct annotation or
* on an annotation which is also annotated
*
* @param annotatedelement the element to look for the annotation
* @return the first matching annotation or null if none could be found
*/
protected pattern getpatternannotation annotatedelement annotatedelement
return getpatternannotation annotatedelement  2
/**
* returns the pattern annotation on the given annotated element; either as a direct annotation or
* on an annotation which is also annotated
*
* @param annotatedelement the element to look for the annotation
* @param depth the current depth
* @return the first matching annotation or null if none could be found
*/
protected pattern getpatternannotation annotatedelement annotatedelement  int depth
pattern answer   annotatedelement getannotation pattern class
int nextdepth   depth   1
if  nextdepth > 0
// look at all the annotations to see if any of those are annotated
annotation annotations   annotatedelement getannotations
for  annotation annotation   annotations
class<? extends annotation> annotationtype   annotation annotationtype
if  annotation instanceof pattern    annotationtype equals annotatedelement
continue
else
pattern another   getpatternannotation annotationtype  nextdepth
if  pattern    null
if  answer    null
answer   another
else
log warn     another       annotation
return answer
/**
* adds the current class and all of its base classes (apart from {@link object} to the given list
*/
protected void addtypeandsupertypes class<?> type  list<class<?>> result
for  class<?> t   type  t    null    t    object class  t   t getsuperclass
result add t
/**
* finds the first annotation on the base methods defined in the list of classes
*/
protected pattern findonewayannotationonmethod list<class<?>> classes  method method
for  class<?> type   classes
try
method definedmethod   type getmethod method getname    method getparametertypes
pattern answer   getpatternannotation definedmethod
if  answer    null
return answer
catch  nosuchmethodexception e
// ignore
return null
/**
* finds the first annotation on the given list of classes
*/
protected pattern findonewayannotation list<class<?>> classes
for  class<?> type   classes
pattern answer   getpatternannotation type
if  answer    null
return answer
return null
protected boolean hasexceptionparameter
for  parameterinfo parameter   parameters
if  exception class isassignablefrom parameter gettype
return true
return false