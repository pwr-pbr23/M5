/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel component jms
import java io file
import java io inputstream
import java io reader
import java io serializable
import java nio bytebuffer
import java util date
import java util enumeration
import java util hashmap
import java util map
import java util map entry
import java util set
import javax jms bytesmessage
import javax jms destination
import javax jms jmsexception
import javax jms mapmessage
import javax jms message
import javax jms messageformatexception
import javax jms objectmessage
import javax jms session
import javax jms streammessage
import javax jms textmessage
import org w3c dom node
import org apache camel camelcontext
import org apache camel exchange
import org apache camel notypeconversionavailableexception
import org apache camel runtimecamelexception
import org apache camel streamcache
import org apache camel wrappedfile
import org apache camel impl defaultexchangeholder
import org apache camel spi headerfilterstrategy
import org apache camel util camelcontexthelper
import org apache camel util exchangehelper
import org apache camel util objecthelper
import org slf4j logger
import org slf4j loggerfactory
import static org apache camel component jms jmsmessagehelper normalizedestinationname
import static org apache camel component jms jmsmessagetype bytes
import static org apache camel component jms jmsmessagetype map
import static org apache camel component jms jmsmessagetype object
import static org apache camel component jms jmsmessagetype text
/**
* a strategy used to convert between a camel {@link exchange} and {@link jmsmessage}
* to and from a jms {@link message}
*
* @version
*/
public class jmsbinding
private static final transient logger log   loggerfactory getlogger jmsbinding class
private final jmsendpoint endpoint
private final headerfilterstrategy headerfilterstrategy
private final jmskeyformatstrategy jmskeyformatstrategy
public jmsbinding
this endpoint   null
headerfilterstrategy   new jmsheaderfilterstrategy
jmskeyformatstrategy   new defaultjmskeyformatstrategy
public jmsbinding jmsendpoint endpoint
this endpoint   endpoint
if  endpoint getheaderfilterstrategy      null
headerfilterstrategy   endpoint getheaderfilterstrategy
else
headerfilterstrategy   new jmsheaderfilterstrategy
if  endpoint getjmskeyformatstrategy      null
jmskeyformatstrategy   endpoint getjmskeyformatstrategy
else
jmskeyformatstrategy   new defaultjmskeyformatstrategy
/**
* extracts the body from the jms message
*
* @param exchange the exchange
* @param message  the message to extract its body
* @return the body, can be <tt>null</tt>
*/
public object extractbodyfromjms exchange exchange  message message
try
// is a custom message converter configured on endpoint then use it instead of doing the extraction
// based on message type
if  endpoint    null    endpoint getmessageconverter      null
if  log istraceenabled
log trace    endpoint getmessageconverter    message
return endpoint getmessageconverter   frommessage message
// if we are configured to not map the jms message then return it as body
if  endpoint    null     endpoint getconfiguration   ismapjmsmessage
log trace    message
return message
if  message instanceof objectmessage
log trace    message
objectmessage objectmessage    objectmessage message
object payload   objectmessage getobject
if  payload instanceof defaultexchangeholder
defaultexchangeholder holder    defaultexchangeholder  payload
defaultexchangeholder unmarshal exchange  holder
return exchange getin   getbody
else
return objectmessage getobject
else if  message instanceof textmessage
log trace    message
textmessage textmessage    textmessage message
return textmessage gettext
else if  message instanceof mapmessage
log trace    message
return createmapfrommapmessage  mapmessage message
else if  message instanceof bytesmessage
log trace    message
return createbytearrayfrombytesmessage  bytesmessage message
else if  message instanceof streammessage
log trace    message
return message
else
return null
catch  jmsexception e
throw new runtimecamelexception     e       message  e
public map<string  object> extractheadersfromjms message jmsmessage  exchange exchange
map<string  object> map   new hashmap<string  object>
if  jmsmessage    null
// lets populate the standard jms message headers
try
map put    jmsmessage getjmscorrelationid
map put    jmsmessage getjmsdeliverymode
map put    jmsmessage getjmsdestination
map put    jmsmessage getjmsexpiration
map put    jmsmessage getjmsmessageid
map put    jmsmessage getjmspriority
map put    jmsmessage getjmsredelivered
map put    jmsmessage getjmstimestamp
map put    jmsmessagehelper getjmsreplyto jmsmessage
map put    jmsmessagehelper getjmstype jmsmessage
// this works around a bug in the activemq property handling
map put    jmsmessage getstringproperty
catch  jmsexception e
throw new runtimecamelexception e
enumeration names
try
names   jmsmessage getpropertynames
catch  jmsexception e
throw new runtimecamelexception e
while  names hasmoreelements
string name   names nextelement   tostring
try
object value   jmsmessage getobjectproperty name
if  headerfilterstrategy    null
headerfilterstrategy applyfiltertoexternalheaders name  value  exchange
continue
// must decode back from safe jms header name to original header name
// when storing on this camel jmsmessage object.
string key   jmskeyformatstrategy decodekey name
map put key  value
catch  jmsexception e
throw new runtimecamelexception name  e
return map
public object getobjectproperty message jmsmessage  string name  throws jmsexception
// try a direct lookup first
object answer   jmsmessage getobjectproperty name
if  answer    null
// then encode the key and do another lookup
string key   jmskeyformatstrategy encodekey name
answer   jmsmessage getobjectproperty key
return answer
protected byte createbytearrayfrombytesmessage bytesmessage message  throws jmsexception
if  message getbodylength   > integer max_value
log warn     message getbodylength
return null
byte result   new byte
message readbytes result
return result
/**
* creates a jms message from the camel exchange and message
*
* @param exchange the current exchange
* @param session the jms session used to create the message
* @return a newly created jms message instance containing the
* @throws jmsexception if the message could not be created
*/
public message makejmsmessage exchange exchange  session session  throws jmsexception
return makejmsmessage exchange  exchange getin    session  null
/**
* creates a jms message from the camel exchange and message
*
* @param exchange the current exchange
* @param camelmessage the body to make a javax.jms.message as
* @param session the jms session used to create the message
* @param cause optional exception occurred that should be sent as reply instead of a regular body
* @return a newly created jms message instance containing the
* @throws jmsexception if the message could not be created
*/
public message makejmsmessage exchange exchange  org apache camel message camelmessage  session session  exception cause  throws jmsexception
message answer   null
boolean alwayscopy   endpoint    null    endpoint getconfiguration   isalwayscopymessage
boolean force   endpoint    null    endpoint getconfiguration   isforcesendoriginalmessage
if   alwayscopy    camelmessage instanceof jmsmessage
jmsmessage jmsmessage    jmsmessage camelmessage
if   jmsmessage shouldcreatenewmessage      force
answer   jmsmessage getjmsmessage
if   force
// answer must match endpoint type
jmsmessagetype type   endpoint    null ? endpoint getconfiguration   getjmsmessagetype     null
if  type    null    answer    null
if  type    jmsmessagetype text
answer   answer instanceof textmessage ? answer   null
else if  type    jmsmessagetype bytes
answer   answer instanceof bytesmessage ? answer   null
else if  type    jmsmessagetype map
answer   answer instanceof mapmessage ? answer   null
else if  type    jmsmessagetype object
answer   answer instanceof objectmessage ? answer   null
else if  type    jmsmessagetype stream
answer   answer instanceof streammessage ? answer   null
if  answer    null
if  cause    null
// an exception occurred so send it as response
log debug    cause
// create jms message containing the caused exception
answer   createjmsmessage cause  session
else
objecthelper notnull camelmessage
// create regular jms message using the camel message body
answer   createjmsmessage exchange  camelmessage getbody    camelmessage getheaders    session  exchange getcontext
appendjmsproperties answer  exchange  camelmessage
return answer
/**
* appends the jms headers from the camel {@link jmsmessage}
*/
public void appendjmsproperties message jmsmessage  exchange exchange  throws jmsexception
appendjmsproperties jmsmessage  exchange  exchange getin
/**
* appends the jms headers from the camel {@link jmsmessage}
*/
public void appendjmsproperties message jmsmessage  exchange exchange  org apache camel message in  throws jmsexception
set<map entry<string  object>> entries   in getheaders   entryset
for  map entry<string  object> entry   entries
string headername   entry getkey
object headervalue   entry getvalue
appendjmsproperty jmsmessage  exchange  in  headername  headervalue
public void appendjmsproperty message jmsmessage  exchange exchange  org apache camel message in
string headername  object headervalue  throws jmsexception
if  isstandardjmsheader headername
if  headername equals
jmsmessage setjmscorrelationid exchangehelper converttotype exchange  string class  headervalue
else if  headername equals       headervalue    null
if  headervalue instanceof string
// if the value is a string we must normalize it first
headervalue   normalizedestinationname  string  headervalue
destination replyto   exchangehelper converttotype exchange  destination class  headervalue
jmsmessagehelper setjmsreplyto jmsmessage  replyto
else if  headername equals
jmsmessage setjmstype exchangehelper converttotype exchange  string class  headervalue
else if  headername equals
jmsmessage setjmspriority exchangehelper converttotype exchange  integer class  headervalue
else if  headername equals
jmsmessagehelper setjmsdeliverymode exchange  jmsmessage  headervalue
else if  headername equals
jmsmessage setjmsexpiration exchangehelper converttotype exchange  long class  headervalue
else
// the following properties are set by the messageproducer:
// jmsdestination
// the following are set on the underlying jms provider:
// jmsmessageid, jmstimestamp, jmsredelivered
// log at trace level to not spam log
log trace    headername  headervalue
else if  shouldoutputheader in  headername  headervalue  exchange
// only primitive headers and strings is allowed as properties
// see message properties: http://java.sun.com/j2ee/1.4/docs/api/javax/jms/message.html
object value   getvalidjmsheadervalue headername  headervalue
if  value    null
// must encode to safe jms header name before setting property on jmsmessage
string key   jmskeyformatstrategy encodekey headername
// set the property
jmsmessagehelper setproperty jmsmessage  key  value
else if  log isdebugenabled
// okay the value is not a primitive or string so we cannot sent it over the wire
log debug
new object headername  headervalue getclass   getname    headervalue
/**
* is the given header a standard jms header
* @param headername the header name
* @return <tt>true</tt> if its a standard jms header
*/
protected boolean isstandardjmsheader string headername
if   headername startswith
return false
if  headername startswith
return false
// vendors will use jms_xxx as their special headers (where xxx is vendor name, such as jms_ibm)
if  headername startswith
return false
// the 4th char must be a letter to be a standard jms header
if  headername length   > 3
character fourth   headername charat 3
if  character isletter fourth
return true
return false
/**
* strategy to test if the given header is valid according to the jms spec to be set as a property
* on the jms message.
* <p/>
* this default implementation will allow:
* <ul>
*   <li>any primitives and their counter objects (integer, double etc.)</li>
*   <li>string and any other literals, character, charsequence</li>
*   <li>boolean</li>
*   <li>number</li>
*   <li>java.util.date</li>
* </ul>
*
* @param headername   the header name
* @param headervalue  the header value
* @return  the value to use, <tt>null</tt> to ignore this header
*/
protected object getvalidjmsheadervalue string headername  object headervalue
if  headervalue instanceof string
return headervalue
else if  headervalue instanceof number
return headervalue
else if  headervalue instanceof character
return headervalue
else if  headervalue instanceof charsequence
return headervalue tostring
else if  headervalue instanceof boolean
return headervalue
else if  headervalue instanceof date
return headervalue tostring
return null
protected message createjmsmessage exception cause  session session  throws jmsexception
log trace    object
message answer   session createobjectmessage cause
// ensure default delivery mode is used by default
answer setjmsdeliverymode message default_delivery_mode
return answer
protected message createjmsmessage exchange exchange  object body  map<string  object> headers  session session  camelcontext context  throws jmsexception
jmsmessagetype type   null
// special for transferexchange
if  endpoint    null    endpoint istransferexchange
log trace
serializable holder   defaultexchangeholder marshal exchange
message answer   session createobjectmessage holder
// ensure default delivery mode is used by default
answer setjmsdeliverymode message default_delivery_mode
return answer
// use a custom message converter
if  endpoint    null    endpoint getmessageconverter      null
if  log istraceenabled
log trace    endpoint getmessageconverter    body
return endpoint getmessageconverter   tomessage body  session
// check if header have a type set, if so we force to use it
if  headers containskey jmsconstants jms_message_type
type   context gettypeconverter   convertto jmsmessagetype class  headers get jmsconstants jms_message_type
else if  endpoint    null    endpoint getconfiguration   getjmsmessagetype      null
// force a specific type from the endpoint configuration
type   endpoint getconfiguration   getjmsmessagetype
else
type   getjmsmessagetypeforbody exchange  body  headers  session  context
// create the jmsmessage based on the type
if  type    null
log trace    type
message answer   createjmsmessagefortype exchange  body  headers  session  context  type
// ensure default delivery mode is used by default
answer setjmsdeliverymode message default_delivery_mode
return answer
// warn if the body could not be mapped
if  body    null    log iswarnenabled
log warn
objecthelper classcanonicalname body
// return a default message
message answer   session createmessage
// ensure default delivery mode is used by default
answer setjmsdeliverymode message default_delivery_mode
return answer
/**
* return the {@link jmsmessagetype}
*
* @return type or null if no mapping was possible
*/
protected jmsmessagetype getjmsmessagetypeforbody exchange exchange  object body  map<string  object> headers  session session  camelcontext context
jmsmessagetype type   null
// let body determine the type
if  body instanceof node    body instanceof string
type   text
else if  body instanceof byte    body instanceof wrappedfile    body instanceof file    body instanceof reader
body instanceof inputstream    body instanceof bytebuffer    body instanceof streamcache
type   bytes
else if  body instanceof map
type   map
else if  body instanceof serializable
type   object
else if  exchange getcontext   gettypeconverter   convertto file class  body     null
exchange getcontext   gettypeconverter   convertto inputstream class  body     null
type   bytes
return type
/**
*
* create the {@link message}
*
* @return jmsmessage or null if the mapping was not successfully
*/
protected message createjmsmessagefortype exchange exchange  object body  map<string  object> headers  session session  camelcontext context  jmsmessagetype type  throws jmsexception
switch  type
case text
textmessage message   session createtextmessage
string payload   context gettypeconverter   convertto string class  exchange  body
message settext payload
return message
case bytes
bytesmessage message   session createbytesmessage
byte payload   context gettypeconverter   convertto byte class  exchange  body
message writebytes payload
return message
case map
mapmessage message   session createmapmessage
map payload   context gettypeconverter   convertto map class  exchange  body
populatemapmessage message  payload  context
return message
case object
serializable payload
try
payload   context gettypeconverter   mandatoryconvertto serializable class  exchange  body
catch  notypeconversionavailableexception e
// cannot convert to serializable then thrown an exception to avoid sending a null message
jmsexception cause   new messageformatexception e getmessage
cause initcause e
throw cause
return session createobjectmessage payload
default
break
return null
/**
* populates a {@link mapmessage} from a {@link map} instance.
*/
protected void populatemapmessage mapmessage message  map<?  ?> map  camelcontext context
throws jmsexception
for  entry<?  ?> entry   map entryset
string keystring   camelcontexthelper convertto context  string class  entry getkey
if  keystring    null
message setobject keystring  entry getvalue
/**
* extracts a {@link map} from a {@link mapmessage}
*/
public map<string  object> createmapfrommapmessage mapmessage message  throws jmsexception
map<string  object> answer   new hashmap<string  object>
enumeration names   message getmapnames
while  names hasmoreelements
string name   names nextelement   tostring
object value   message getobject name
answer put name  value
return answer
/**
* strategy to allow filtering of headers which are put on the jms message
* <p/>
* <b>note</b>: currently only supports sending java identifiers as keys
*/
protected boolean shouldoutputheader org apache camel message camelmessage  string headername
object headervalue  exchange exchange
return headerfilterstrategy    null
headerfilterstrategy applyfiltertocamelheaders headername  headervalue  exchange