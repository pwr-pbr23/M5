/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel model
import java util arraylist
import java util list
import java util concurrent executorservice
import java util concurrent scheduledexecutorservice
import javax xml bind annotation xmlaccesstype
import javax xml bind annotation xmlaccessortype
import javax xml bind annotation xmlattribute
import javax xml bind annotation xmlelement
import javax xml bind annotation xmlelementref
import javax xml bind annotation xmlrootelement
import javax xml bind annotation xmltransient
import org apache camel expression
import org apache camel predicate
import org apache camel processor
import org apache camel builder expressionclause
import org apache camel model language expressiondefinition
import org apache camel processor unitofworkprocessor
import org apache camel processor aggregate aggregateprocessor
import org apache camel processor aggregate aggregationstrategy
import org apache camel processor aggregate groupedexchangeaggregationstrategy
import org apache camel spi aggregationrepository
import org apache camel spi executorservicemanager
import org apache camel spi routecontext
import org apache camel spi threadpoolprofile
import org apache camel util concurrent synchronousexecutorservice
/**
* represents an xml &lt;aggregate/&gt; element
*
* @version
*/
@xmlrootelement name
@xmlaccessortype xmlaccesstype field
public class aggregatedefinition extends processordefinition<aggregatedefinition> implements executorserviceawaredefinition<aggregatedefinition>
@xmlelement name      required   true
private expressionsubelementdefinition correlationexpression
@xmlelement name
private expressionsubelementdefinition completionpredicate
@xmlelement name
private expressionsubelementdefinition completiontimeoutexpression
@xmlelement name
private expressionsubelementdefinition completionsizeexpression
@xmltransient
private expressiondefinition expression
@xmlelementref
private list<processordefinition> outputs   new arraylist<processordefinition>
@xmltransient
private aggregationstrategy aggregationstrategy
@xmltransient
private executorservice executorservice
@xmltransient
private scheduledexecutorservice timeoutcheckerexecutorservice
@xmltransient
private aggregationrepository aggregationrepository
@xmlattribute
private boolean parallelprocessing
@xmlattribute
private string executorserviceref
@xmlattribute
private string timeoutcheckerexecutorserviceref
@xmlattribute
private string aggregationrepositoryref
@xmlattribute
private string strategyref
@xmlattribute
private integer completionsize
@xmlattribute
private long completioninterval
@xmlattribute
private long completiontimeout
@xmlattribute
private boolean completionfrombatchconsumer
@xmlattribute
private boolean groupexchanges
@xmlattribute
private boolean eagercheckcompletion
@xmlattribute
private boolean ignoreinvalidcorrelationkeys
@xmlattribute
private integer closecorrelationkeyoncompletion
@xmlattribute
private boolean discardoncompletiontimeout
@xmlattribute
private boolean forcecompletiononstop
public aggregatedefinition
public aggregatedefinition predicate predicate
this
if  predicate    null
setexpression new expressiondefinition predicate
public aggregatedefinition expression correlationexpression
this
if  correlationexpression    null
setexpression new expressiondefinition correlationexpression
public aggregatedefinition expressiondefinition correlationexpression
this
this expression   correlationexpression
public aggregatedefinition expression correlationexpression  aggregationstrategy aggregationstrategy
this correlationexpression
this aggregationstrategy   aggregationstrategy
@override
public string tostring
return     description         getoutputs
protected string description
return getexpression      null ? getexpression   getlabel
@override
public string getshortname
return
@override
public string getlabel
return     description
@override
public processor createprocessor routecontext routecontext  throws exception
return createaggregator routecontext
protected aggregateprocessor createaggregator routecontext routecontext  throws exception
processor processor   this createchildprocessor routecontext  true
// wrap the aggregated route in a unit of work processor
processor   new unitofworkprocessor routecontext  processor
expression correlation   getexpression   createexpression routecontext
aggregationstrategy strategy   createaggregationstrategy routecontext
executorservice   processordefinitionhelper getconfiguredexecutorservice routecontext     this
if  executorservice    null
// executor service is mandatory for the aggregator
executorservicemanager executorservicemanager   routecontext getcamelcontext   getexecutorservicemanager
if  isparallelprocessing
executorservice   executorservicemanager newdefaultthreadpool this
else
// we do not run in parallel mode, but use a synchronous executor, so we run in current thread
executorservice   new synchronousexecutorservice
if  timeoutcheckerexecutorserviceref    null    timeoutcheckerexecutorservice    null
timeoutcheckerexecutorservice   getconfiguredscheduledexecutorservice routecontext
aggregateprocessor answer   new aggregateprocessor routecontext getcamelcontext    processor  correlation  strategy  executorservice
aggregationrepository repository   createaggregationrepository routecontext
if  repository    null
answer setaggregationrepository repository
if  gettimeoutcheckerexecutorservice      null
answer settimeoutcheckerexecutorservice timeoutcheckerexecutorservice
// set other options
answer setparallelprocessing isparallelprocessing
if  getcompletionpredicate      null
predicate predicate   getcompletionpredicate   createpredicate routecontext
answer setcompletionpredicate predicate
if  getcompletiontimeoutexpression      null
expression expression   getcompletiontimeoutexpression   createexpression routecontext
answer setcompletiontimeoutexpression expression
if  getcompletiontimeout      null
answer setcompletiontimeout getcompletiontimeout
if  getcompletioninterval      null
answer setcompletioninterval getcompletioninterval
if  getcompletionsizeexpression      null
expression expression   getcompletionsizeexpression   createexpression routecontext
answer setcompletionsizeexpression expression
if  getcompletionsize      null
answer setcompletionsize getcompletionsize
if  getcompletionfrombatchconsumer      null
answer setcompletionfrombatchconsumer iscompletionfrombatchconsumer
if  geteagercheckcompletion      null
answer seteagercheckcompletion iseagercheckcompletion
if  getignoreinvalidcorrelationkeys      null
answer setignoreinvalidcorrelationkeys isignoreinvalidcorrelationkeys
if  getclosecorrelationkeyoncompletion      null
answer setclosecorrelationkeyoncompletion getclosecorrelationkeyoncompletion
if  getdiscardoncompletiontimeout      null
answer setdiscardoncompletiontimeout isdiscardoncompletiontimeout
if  getforcecompletiononstop      null
answer setforcecompletiononstop getforcecompletiononstop
return answer
private scheduledexecutorservice getconfiguredscheduledexecutorservice routecontext routecontext
// todo: maybe rather than this one-off method to support an executorservice & scheduledexecutorservice for the aggregator,
// create scheduledexecutorserviceawaredefinition and the change other definitions that currently use scheduledexecutorservices to
// use that one instead of the more generic executorserviceawaredefinition
scheduledexecutorservice answer   routecontext getcamelcontext   getregistry   lookup timeoutcheckerexecutorserviceref  scheduledexecutorservice class
if  answer    null
executorservicemanager manager   routecontext getcamelcontext   getexecutorservicemanager
// then create a thread pool assuming the ref is a thread pool profile id
threadpoolprofile profile   manager getthreadpoolprofile timeoutcheckerexecutorserviceref
if  profile    null
// okay we need to grab the pool size from the ref
integer poolsize   profile getpoolsize
if  poolsize    null
// fallback and use the default pool size, if none was set on the profile
poolsize   manager getdefaultthreadpoolprofile   getpoolsize
answer   manager newscheduledthreadpool this     poolsize
return answer
@override
protected void configurechild processordefinition output
if  expression    null    expression instanceof expressionclause
expressionclause clause    expressionclause  expression
if  clause getexpressiontype      null
// if using the java dsl then the expression may have been set using the
// expressionclause which is a fancy builder to define expressions and predicates
// using fluent builders in the dsl. however we need afterwards a callback to
// reset the expression to the expression type the expressionclause did build for us
expression   clause getexpressiontype
// set the correlation expression from the expression type, as the model definition
// would then be accurate
correlationexpression   new expressionsubelementdefinition
correlationexpression setexpressiontype clause getexpressiontype
private aggregationstrategy createaggregationstrategy routecontext routecontext
aggregationstrategy strategy   getaggregationstrategy
if  strategy    null    strategyref    null
strategy   routecontext lookup strategyref  aggregationstrategy class
if  groupexchanges    null    groupexchanges
if  strategy    null    strategyref    null
throw new illegalargumentexception
if  eagercheckcompletion    null     eagercheckcompletion
throw new illegalargumentexception
// set eager check to enabled by default when using grouped exchanges
seteagercheckcompletion true
// if grouped exchange is enabled then use special strategy for that
strategy   new groupedexchangeaggregationstrategy
if  strategy    null
throw new illegalargumentexception     this
return strategy
private aggregationrepository createaggregationrepository routecontext routecontext
aggregationrepository repository   getaggregationrepository
if  repository    null    aggregationrepositoryref    null
repository   routecontext lookup aggregationrepositoryref  aggregationrepository class
if  repository    null
throw new illegalargumentexception     aggregationrepositoryref
return repository
public aggregationstrategy getaggregationstrategy
return aggregationstrategy
public void setaggregationstrategy aggregationstrategy aggregationstrategy
this aggregationstrategy   aggregationstrategy
public string getaggregationstrategyref
return strategyref
public void setaggregationstrategyref string aggregationstrategyref
this strategyref   aggregationstrategyref
public integer getcompletionsize
return completionsize
public void setcompletionsize integer completionsize
this completionsize   completionsize
public long getcompletioninterval
return completioninterval
public void setcompletioninterval long completioninterval
this completioninterval   completioninterval
public long getcompletiontimeout
return completiontimeout
public void setcompletiontimeout long completiontimeout
this completiontimeout   completiontimeout
public expressionsubelementdefinition getcompletionpredicate
return completionpredicate
public void setcompletionpredicate expressionsubelementdefinition completionpredicate
this completionpredicate   completionpredicate
public expressionsubelementdefinition getcompletiontimeoutexpression
return completiontimeoutexpression
public void setcompletiontimeoutexpression expressionsubelementdefinition completiontimeoutexpression
this completiontimeoutexpression   completiontimeoutexpression
public expressionsubelementdefinition getcompletionsizeexpression
return completionsizeexpression
public void setcompletionsizeexpression expressionsubelementdefinition completionsizeexpression
this completionsizeexpression   completionsizeexpression
public boolean getgroupexchanges
return groupexchanges
public boolean isgroupexchanges
return groupexchanges    null    groupexchanges
public void setgroupexchanges boolean groupexchanges
this groupexchanges   groupexchanges
public boolean getcompletionfrombatchconsumer
return completionfrombatchconsumer
public boolean iscompletionfrombatchconsumer
return completionfrombatchconsumer    null    completionfrombatchconsumer
public void setcompletionfrombatchconsumer boolean completionfrombatchconsumer
this completionfrombatchconsumer   completionfrombatchconsumer
public executorservice getexecutorservice
return executorservice
public void setexecutorservice executorservice executorservice
this executorservice   executorservice
public boolean getparallelprocessing
return parallelprocessing
public boolean isparallelprocessing
return parallelprocessing    null    parallelprocessing
public void setparallelprocessing boolean parallelprocessing
this parallelprocessing   parallelprocessing
public string getexecutorserviceref
return executorserviceref
public void setexecutorserviceref string executorserviceref
this executorserviceref   executorserviceref
public string getstrategyref
return strategyref
public void setstrategyref string strategyref
this strategyref   strategyref
public boolean geteagercheckcompletion
return eagercheckcompletion
public boolean iseagercheckcompletion
return eagercheckcompletion    null    eagercheckcompletion
public void seteagercheckcompletion boolean eagercheckcompletion
this eagercheckcompletion   eagercheckcompletion
public boolean getignoreinvalidcorrelationkeys
return ignoreinvalidcorrelationkeys
public boolean isignoreinvalidcorrelationkeys
return ignoreinvalidcorrelationkeys    null    ignoreinvalidcorrelationkeys
public void setignoreinvalidcorrelationkeys boolean ignoreinvalidcorrelationkeys
this ignoreinvalidcorrelationkeys   ignoreinvalidcorrelationkeys
public integer getclosecorrelationkeyoncompletion
return closecorrelationkeyoncompletion
public void setclosecorrelationkeyoncompletion integer closecorrelationkeyoncompletion
this closecorrelationkeyoncompletion   closecorrelationkeyoncompletion
public aggregationrepository getaggregationrepository
return aggregationrepository
public void setaggregationrepository aggregationrepository aggregationrepository
this aggregationrepository   aggregationrepository
public string getaggregationrepositoryref
return aggregationrepositoryref
public void setaggregationrepositoryref string aggregationrepositoryref
this aggregationrepositoryref   aggregationrepositoryref
public boolean getdiscardoncompletiontimeout
return discardoncompletiontimeout
public boolean isdiscardoncompletiontimeout
return discardoncompletiontimeout    null    discardoncompletiontimeout
public void setdiscardoncompletiontimeout boolean discardoncompletiontimeout
this discardoncompletiontimeout   discardoncompletiontimeout
public void settimeoutcheckerexecutorservice scheduledexecutorservice timeoutcheckerexecutorservice
this timeoutcheckerexecutorservice   timeoutcheckerexecutorservice
public scheduledexecutorservice gettimeoutcheckerexecutorservice
return timeoutcheckerexecutorservice
public void settimeoutcheckerexecutorserviceref string timeoutcheckerexecutorserviceref
this timeoutcheckerexecutorserviceref   timeoutcheckerexecutorserviceref
public string gettimeoutcheckerexecutorserviceref
return timeoutcheckerexecutorserviceref
// fluent api
//-------------------------------------------------------------------------
/**
* use eager completion checking which means that the {{completionpredicate}} will use the incoming exchange.
* at opposed to without eager completion checking the {{completionpredicate}} will use the aggregated exchange.
*
* @return builder
*/
public aggregatedefinition eagercheckcompletion
seteagercheckcompletion true
return this
/**
* if a correlation key cannot be successfully evaluated it will be ignored by logging a {{debug}} and then just
* ignore the incoming exchange.
*
* @return builder
*/
public aggregatedefinition ignoreinvalidcorrelationkeys
setignoreinvalidcorrelationkeys true
return this
/**
* closes a correlation key when its complete. any <i>late</i> received exchanges which has a correlation key
* that has been closed, it will be defined and a {@link org.apache.camel.processor.aggregate.closedcorrelationkeyexception}
* is thrown.
*
* @param capacity the maximum capacity of the closed correlation key cache.
*                 use <tt>0</tt> or negative value for unbounded capacity.
* @return builder
*/
public aggregatedefinition closecorrelationkeyoncompletion int capacity
setclosecorrelationkeyoncompletion capacity
return this
/**
* discards the aggregated message on completion timeout.
* <p/>
* this means on timeout the aggregated message is dropped and not sent out of the aggregator.
*
* @return builder
*/
public aggregatedefinition discardoncompletiontimeout
setdiscardoncompletiontimeout true
return this
/**
* enables the batch completion mode where we aggregate from a {@link org.apache.camel.batchconsumer}
* and aggregate the total number of exchanges the {@link org.apache.camel.batchconsumer} has reported
* as total by checking the exchange property {@link org.apache.camel.exchange#batch_complete} when its complete.
*
* @return builder
*/
public aggregatedefinition completionfrombatchconsumer
setcompletionfrombatchconsumer true
return this
/**
* sets the completion size, which is the number of aggregated exchanges which would
* cause the aggregate to consider the group as complete and send out the aggregated exchange.
*
* @param completionsize  the completion size
* @return builder
*/
public aggregatedefinition completionsize int completionsize
setcompletionsize completionsize
return this
/**
* sets the completion size, which is the number of aggregated exchanges which would
* cause the aggregate to consider the group as complete and send out the aggregated exchange.
*
* @param completionsize  the completion size as an {@link org.apache.camel.expression} which is evaluated as a {@link integer} type
* @return builder
*/
public aggregatedefinition completionsize expression completionsize
setcompletionsizeexpression new expressionsubelementdefinition completionsize
return this
/**
* sets the completion interval, which would cause the aggregate to consider the group as complete
* and send out the aggregated exchange.
*
* @param completioninterval  the interval in millis
* @return the builder
*/
public aggregatedefinition completioninterval long completioninterval
setcompletioninterval completioninterval
return this
/**
* sets the completion timeout, which would cause the aggregate to consider the group as complete
* and send out the aggregated exchange.
*
* @param completiontimeout  the timeout in millis
* @return the builder
*/
public aggregatedefinition completiontimeout long completiontimeout
setcompletiontimeout completiontimeout
return this
/**
* sets the completion timeout, which would cause the aggregate to consider the group as complete
* and send out the aggregated exchange.
*
* @param completiontimeout  the timeout as an {@link expression} which is evaluated as a {@link long} type
* @return the builder
*/
public aggregatedefinition completiontimeout expression completiontimeout
setcompletiontimeoutexpression new expressionsubelementdefinition completiontimeout
return this
/**
* sets the aggregate strategy to use
*
* @param aggregationstrategy  the aggregate strategy to use
* @return the builder
*/
public aggregatedefinition aggregationstrategy aggregationstrategy aggregationstrategy
setaggregationstrategy aggregationstrategy
return this
/**
* sets the aggregate strategy to use
*
* @param aggregationstrategyref  reference to the strategy to lookup in the registry
* @return the builder
*/
public aggregatedefinition aggregationstrategyref string aggregationstrategyref
setaggregationstrategyref aggregationstrategyref
return this
/**
* sets the custom aggregate repository to use.
* <p/>
* will by default use {@link org.apache.camel.processor.aggregate.memoryaggregationrepository}
*
* @param aggregationrepository  the aggregate repository to use
* @return the builder
*/
public aggregatedefinition aggregationrepository aggregationrepository aggregationrepository
setaggregationrepository aggregationrepository
return this
/**
* sets the custom aggregate repository to use
* <p/>
* will by default use {@link org.apache.camel.processor.aggregate.memoryaggregationrepository}
*
* @param aggregationrepositoryref  reference to the repository to lookup in the registry
* @return the builder
*/
public aggregatedefinition aggregationrepositoryref string aggregationrepositoryref
setaggregationrepositoryref aggregationrepositoryref
return this
/**
* enables grouped exchanges, so the aggregator will group all aggregated exchanges into a single
* combined exchange holding all the aggregated exchanges in a {@link java.util.list} as a exchange
* property with the key {@link org.apache.camel.exchange#grouped_exchange}.
*
* @return the builder
*/
public aggregatedefinition groupexchanges
setgroupexchanges true
// must use eager check when using grouped exchanges
seteagercheckcompletion true
return this
/**
* sets the predicate used to determine if the aggregation is completed
*
* @param predicate  the predicate
* @return the builder
*/
public aggregatedefinition completionpredicate predicate predicate
checknocompletedpredicate
setcompletionpredicate new expressionsubelementdefinition predicate
return this
/**
* sets the force completion on stop flag, which considers the current group as complete
* and sends out the aggregated exchange when the stop event is executed
*
* @return builder
*/
public aggregatedefinition forcecompletiononstop
setforcecompletiononstop true
return this
public boolean getforcecompletiononstop
return forcecompletiononstop
public boolean isforcecompletiononstop
return forcecompletiononstop    null    forcecompletiononstop
public void setforcecompletiononstop boolean forcecompletiononstop
this forcecompletiononstop   forcecompletiononstop
/**
* sending the aggregated output in parallel
*
* @return the builder
*/
public aggregatedefinition parallelprocessing
setparallelprocessing true
return this
public aggregatedefinition executorservice executorservice executorservice
setexecutorservice executorservice
return this
public aggregatedefinition executorserviceref string executorserviceref
setexecutorserviceref executorserviceref
return this
public aggregatedefinition timeoutcheckerexecutorservice scheduledexecutorservice executorservice
settimeoutcheckerexecutorservice executorservice
return this
public aggregatedefinition timeoutcheckerexecutorserviceref string executorserviceref
settimeoutcheckerexecutorserviceref executorserviceref
return this
protected void checknocompletedpredicate
if  getcompletionpredicate      null
throw new illegalargumentexception     this
public void setcorrelationexpression expressionsubelementdefinition correlationexpression
this correlationexpression   correlationexpression
public expressionsubelementdefinition getcorrelationexpression
return correlationexpression
// section - methods from expressionnode
// needed to copy methods from expressionnode here so that i could specify the
// correlation expression as optional in jaxb
public expressiondefinition getexpression
if  expression    null    correlationexpression    null
expression   correlationexpression getexpressiontype
return expression
public void setexpression expressiondefinition expression
this expression   expression
public list<processordefinition> getoutputs
return outputs
public boolean isoutputsupported
return true
public void setoutputs list<processordefinition> outputs
this outputs   outputs