/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel bam
import java util arraylist
import java util hashmap
import java util list
import java util map
import org apache camel camelcontext
import org apache camel endpoint
import org apache camel processor
import org apache camel bam model activitydefinition
import org apache camel bam model processdefinition
import org apache camel bam model processinstance
import org apache camel bam processor activitymonitorengine
import org apache camel bam processor jpabamprocessor
import org apache camel bam rules processrules
import org apache camel builder routebuilder
import org apache camel impl defaultcamelcontext
import org apache camel util castutils
import org apache camel util objecthelper
import org springframework orm jpa jpatemplate
import org springframework transaction transactionstatus
import org springframework transaction support transactioncallbackwithoutresult
import org springframework transaction support transactiontemplate
import static org apache camel util objecthelper notnull
/**
* a builder of a process definition
*
* @version
*/
public abstract class processbuilder extends routebuilder
private static int processcounter
private jpatemplate jpatemplate
private transactiontemplate transactiontemplate
private string processname
private list<activitybuilder> activitybuilders   new arraylist<activitybuilder>
private class<processinstance> entitytype   processinstance class
private processrules processrules   new processrules
private processdefinition processdefinition
private activitymonitorengine engine
protected processbuilder
protected processbuilder jpatemplate jpatemplate  transactiontemplate transactiontemplate
this jpatemplate  transactiontemplate  createprocessname
protected processbuilder jpatemplate jpatemplate  transactiontemplate transactiontemplate  string processname
this jpatemplate   jpatemplate
this transactiontemplate   transactiontemplate
this processname   processname
protected static synchronized string createprocessname
return        processcounter
public activitybuilder activity string endpointuri
return activity endpoint endpointuri
public activitybuilder activity endpoint endpoint
activitybuilder answer   new activitybuilder this  endpoint
activitybuilders add answer
return answer
/**
* sets the process entity type used to perform state management
*/
public processbuilder entitytype class<processinstance> entitytype
this entitytype   entitytype
return this
public processor createactivityprocessor activitybuilder activitybuilder
notnull jpatemplate
transactiontemplate execute new transactioncallbackwithoutresult
protected void dointransactionwithoutresult transactionstatus status
processrules setprocessdefinition getprocessdefinition
return new jpabamprocessor gettransactiontemplate    getjpatemplate    activitybuilder getcorrelationexpression    activitybuilder getactivityrules    getentitytype
// properties
// -----------------------------------------------------------------------
public list<activitybuilder> getactivitybuilders
return activitybuilders
public class<processinstance> getentitytype
return entitytype
public jpatemplate getjpatemplate
return jpatemplate
public void setjpatemplate jpatemplate jpatemplate
this jpatemplate   jpatemplate
public transactiontemplate gettransactiontemplate
return transactiontemplate
public void settransactiontemplate transactiontemplate transactiontemplate
this transactiontemplate   transactiontemplate
public processrules getprocessrules
return processrules
public string getprocessname
return processname
public processdefinition getprocessdefinition
if  processdefinition    null
processdefinition   findorcreateprocessdefinition
return processdefinition
public void setprocessdefinition processdefinition processdefinition
this processdefinition   processdefinition
// implementation methods
// -------------------------------------------------------------------------
protected void populateroutes   throws exception
objecthelper notnull getjpatemplate       this
objecthelper notnull gettransactiontemplate       this
// add the monitoring service - should there be an easier way??
if  engine    null
engine   new activitymonitorengine getjpatemplate    gettransactiontemplate    getprocessrules
camelcontext camelcontext   getcontext
if  camelcontext instanceof defaultcamelcontext
defaultcamelcontext defaultcamelcontext    defaultcamelcontext  camelcontext
defaultcamelcontext addservice engine
// create the routes for the activities
for  activitybuilder builder   activitybuilders
from builder getendpoint    process builder getprocessor
super populateroutes
// implementation methods
// -------------------------------------------------------------------------
public activitydefinition findorcreateactivitydefinition string activityname
processdefinition definition   getprocessdefinition
map<string  object> params   new hashmap<string  object> 2
params put    definition
params put    activityname
list<activitydefinition> list   castutils cast jpatemplate findbynamedparams
queryutils gettypename activitydefinition class       params
if   list isempty
return list get 0
else
activitydefinition answer   new activitydefinition
answer setname activityname
answer setprocessdefinition processdefinition getrefreshedprocessdefinition jpatemplate  definition
jpatemplate persist answer
return answer
protected processdefinition findorcreateprocessdefinition
map<string  object> params   new hashmap<string  object> 1
params put    processname
list<processdefinition> list   castutils cast jpatemplate findbynamedparams
queryutils gettypename processdefinition class       params
if   list isempty
return list get 0
else
processdefinition answer   new processdefinition
answer setname processname
jpatemplate persist answer
return answer