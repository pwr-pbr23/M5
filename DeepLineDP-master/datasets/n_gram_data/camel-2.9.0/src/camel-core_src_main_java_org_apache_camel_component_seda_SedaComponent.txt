/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel component seda
import java util hashmap
import java util map
import java util concurrent blockingqueue
import java util concurrent linkedblockingqueue
import org apache camel endpoint
import org apache camel exchange
import org apache camel impl defaultcomponent
/**
* an implementation of the <a href="http://camel.apache.org/seda.html">seda components</a>
* for asynchronous seda exchanges on a {@link blockingqueue} within a camelcontext
*
* @version
*/
public class sedacomponent extends defaultcomponent
protected final int maxconcurrentconsumers   500
protected int queuesize
protected int defaultconcurrentconsumers   1
private final map<string  blockingqueue<exchange>> queues   new hashmap<string  blockingqueue<exchange>>
public void setqueuesize int size
queuesize   size
public int getqueuesize
return queuesize
public void setconcurrentconsumers int size
defaultconcurrentconsumers   size
public int getconcurrentconsumers
return defaultconcurrentconsumers
public synchronized blockingqueue<exchange> createqueue string uri  map<string  object> parameters
string key   getqueuekey uri
if  queues containskey key
return queues get key
// create queue
blockingqueue<exchange> queue
integer size   getandremoveparameter parameters     integer class
if  size    null    size > 0
queue   new linkedblockingqueue<exchange> size
else
if  getqueuesize   > 0
queue   new linkedblockingqueue<exchange> getqueuesize
else
queue   new linkedblockingqueue<exchange>
queues put key  queue
return queue
@override
protected endpoint createendpoint string uri  string remaining  map<string  object> parameters  throws exception
int consumers   getandremoveparameter parameters     integer class  defaultconcurrentconsumers
boolean limitconcurrentconsumers   getandremoveparameter parameters     boolean class  true
if  limitconcurrentconsumers    consumers >  maxconcurrentconsumers
throw new illegalargumentexception
maxconcurrentconsumers       consumers
sedaendpoint answer   new sedaendpoint uri  this  createqueue uri  parameters   consumers
answer configureproperties parameters
return answer
protected string getqueuekey string uri
if  uri contains
// strip parameters
uri   uri substring 0  uri indexof
return uri
@override
protected void dostop   throws exception
queues clear
super dostop