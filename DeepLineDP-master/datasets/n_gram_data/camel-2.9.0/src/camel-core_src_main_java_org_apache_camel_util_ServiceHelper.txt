/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel util
import java util arrays
import java util collection
import java util list
import org apache camel service
import org apache camel shutdownableservice
import org apache camel statefulservice
import org apache camel suspendableservice
import org slf4j logger
import org slf4j loggerfactory
/**
* a collection of helper methods for working with {@link service} objects
*
* @version
*/
public final class servicehelper
private static final transient logger log   loggerfactory getlogger servicehelper class
/**
* utility classes should not have a public constructor.
*/
private servicehelper
/**
* starts all of the given services
*/
public static void startservice object value  throws exception
if  value instanceof service
startservice  service value
else if  value instanceof collection
startservices  collection<?> value
/**
* starts all of the given services
*/
public static void startservice service service  throws exception
service start
/**
* starts all of the given services
*/
public static void startservices object    services  throws exception
if  services    null
return
for  object value   services
startservice value
/**
* starts all of the given services
*/
public static void startservices collection<?> services  throws exception
if  services    null
return
for  object value   services
startservice value
/**
* stops all of the given services, throwing the first exception caught
*/
public static void stopservices object    services  throws exception
if  services    null
return
list<object> list   arrays aslist services
stopservices list
/**
* stops all of the given services, throwing the first exception caught
*/
public static void stopservice object value  throws exception
if  isstopped value
// only stop service if not already stopped
log trace    value
return
if  value instanceof service
service service    service value
log trace    value
service stop
else if  value instanceof collection
stopservices  collection<?> value
/**
* stops all of the given services, throwing the first exception caught
*/
public static void stopservices collection<?> services  throws exception
if  services    null
return
exception firstexception   null
for  object value   services
try
stopservice value
catch  exception e
if  log isdebugenabled
log debug     value  e
if  firstexception    null
firstexception   e
if  firstexception    null
throw firstexception
/**
* stops and shutdowns all of the given services, throwing the first exception caught
*/
public static void stopandshutdownservices object    services  throws exception
if  services    null
return
list<object> list   arrays aslist services
stopandshutdownservices list
/**
* stops and shutdowns all of the given services, throwing the first exception caught
*/
public static void stopandshutdownservice service value  throws exception
stopservice value
// then try to shutdown
if  value instanceof shutdownableservice
shutdownableservice service    shutdownableservice value
log trace    value
service shutdown
/**
* stops and shutdowns all of the given services, throwing the first exception caught
*/
public static void stopandshutdownservices collection<?> services  throws exception
if  services    null
return
exception firstexception   null
for  object value   services
// must stop it first
stopservice value
// then try to shutdown
if  value instanceof shutdownableservice
shutdownableservice service    shutdownableservice value
try
log trace    service
service shutdown
catch  exception e
if  log isdebugenabled
log debug     service  e
if  firstexception    null
firstexception   e
if  firstexception    null
throw firstexception
public static void resumeservices collection<?> services  throws exception
if  services    null
return
exception firstexception   null
for  object value   services
if  value instanceof service
service service    service value
try
resumeservice service
catch  exception e
if  log isdebugenabled
log debug     service  e
if  firstexception    null
firstexception   e
if  firstexception    null
throw firstexception
/**
* resumes the given service.
* <p/>
* if the service is a {@link org.apache.camel.suspendableservice} then the <tt>resume</tt>
* operation is <b>only</b> invoked if the service is suspended.
* <p/>
* if the service is a {@link org.apache.camel.support.servicesupport} then the <tt>start</tt>
* operation is <b>only</b> invoked if the service is startable.
* <p/>
* otherwise the service is started.
*
* @param service the service
* @return <tt>true</tt> if either <tt>resume</tt> or <tt>start</tt> was invoked,
* <tt>false</tt> if the service is already in the desired state.
* @throws exception is thrown if error occurred
*/
public static boolean resumeservice service service  throws exception
if  service instanceof suspendableservice
suspendableservice ss    suspendableservice  service
if  ss issuspended
log debug    service
ss resume
return true
else
return false
else
startservice service
return true
public static void suspendservices collection<?> services  throws exception
if  services    null
return
exception firstexception   null
for  object value   services
if  value instanceof service
service service    service value
try
suspendservice service
catch  exception e
if  log isdebugenabled
log debug     service  e
if  firstexception    null
firstexception   e
if  firstexception    null
throw firstexception
/**
* suspends the given service.
* <p/>
* if the service is a {@link org.apache.camel.suspendableservice} then the <tt>suspend</tt>
* operation is <b>only</b> invoked if the service is <b>not</b> suspended.
* <p/>
* if the service is a {@link org.apache.camel.support.servicesupport} then the <tt>stop</tt>
* operation is <b>only</b> invoked if the service is stoppable.
* <p/>
* otherwise the service is stopped.
*
* @param service the service
* @return <tt>true</tt> if either <tt>suspend</tt> or <tt>stop</tt> was invoked,
* <tt>false</tt> if the service is already in the desired state.
* @throws exception is thrown if error occurred
*/
public static boolean suspendservice service service  throws exception
if  service instanceof suspendableservice
suspendableservice ss    suspendableservice  service
if   ss issuspended
log trace    service
ss suspend
return true
else
return false
else
stopservice service
return true
/**
* is the given service stopping or stopped?
*
* @return <tt>true</tt> if already stopped, otherwise <tt>false</tt>
*/
public static boolean isstopped object value
if  value instanceof statefulservice
statefulservice service    statefulservice  value
if  service isstopping      service isstopped
return true
return false
/**
* is the given service starting or started?
*
* @return <tt>true</tt> if already started, otherwise <tt>false</tt>
*/
public static boolean isstarted object value
if  value instanceof statefulservice
statefulservice service    statefulservice  value
if  service isstarting      service isstarted
return true
return false