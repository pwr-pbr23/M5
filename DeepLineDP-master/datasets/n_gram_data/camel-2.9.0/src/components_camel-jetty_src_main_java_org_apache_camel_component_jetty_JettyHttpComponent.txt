/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel component jetty
import java io file
import java lang reflect invocationtargetexception
import java lang reflect method
import java net uri
import java util hashmap
import java util list
import java util map
import javax management mbeanserver
import javax servlet filter
import org apache camel camelcontext
import org apache camel endpoint
import org apache camel runtimecamelexception
import org apache camel component http camelservlet
import org apache camel component http httpbinding
import org apache camel component http httpcomponent
import org apache camel component http httpconsumer
import org apache camel component http httpendpoint
import org apache camel spi managementagent
import org apache camel spi managementstrategy
import org apache camel util castutils
import org apache camel util introspectionsupport
import org apache camel util objecthelper
import org apache camel util urisupport
import org apache camel util unsafeuricharactersencoder
import org apache camel util jsse sslcontextparameters
import org eclipse jetty client address
import org eclipse jetty client httpclient
import org eclipse jetty http ssl sslcontextfactory
import org eclipse jetty jmx mbeancontainer
import org eclipse jetty server connector
import org eclipse jetty server handler
import org eclipse jetty server server
import org eclipse jetty server handler contexthandlercollection
import org eclipse jetty server handler handlercollection
import org eclipse jetty server handler handlerwrapper
import org eclipse jetty server nio selectchannelconnector
import org eclipse jetty server session sessionhandler
import org eclipse jetty server ssl sslselectchannelconnector
import org eclipse jetty servlet filterholder
import org eclipse jetty servlet servletcontexthandler
import org eclipse jetty servlet servletholder
import org eclipse jetty servlets multipartfilter
import org eclipse jetty util component lifecycle
import org eclipse jetty util thread queuedthreadpool
import org eclipse jetty util thread threadpool
import org slf4j logger
import org slf4j loggerfactory
/**
* an httpcomponent which starts an embedded jetty for to handle consuming from
* the http endpoints.
*
* @version
*/
public class jettyhttpcomponent extends httpcomponent
public static final string tmp_dir
protected static final hashmap<string  connectorref> connectors   new hashmap<string  connectorref>
private static final transient logger log   loggerfactory getlogger jettyhttpcomponent class
private static final string jetty_ssl_keystore
private static final string jetty_ssl_keypassword
private static final string jetty_ssl_password
protected string sslkeypassword
protected string sslpassword
protected string sslkeystore
protected map<integer  sslselectchannelconnector> sslsocketconnectors
protected map<integer  selectchannelconnector> socketconnectors
protected map<string  object> sslsocketconnectorproperties
protected map<string  object> socketconnectorproperties
protected httpclient httpclient
protected threadpool httpclientthreadpool
protected integer httpclientminthreads
protected integer httpclientmaxthreads
protected integer minthreads
protected integer maxthreads
protected threadpool threadpool
protected mbeancontainer mbcontainer
protected boolean enablejmx
protected jettyhttpbinding jettyhttpbinding
protected long continuationtimeout
protected boolean usecontinuation   true
protected sslcontextparameters sslcontextparameters
protected boolean isexplicithttpclient
class connectorref
server server
connector connector
camelservlet servlet
int refcount
public connectorref server server  connector connector  camelservlet servlet
this server   server
this connector   connector
this servlet   servlet
increment
}
public int increment
return   refcount
}
public int decrement
return   refcount
}
public int getrefcount
return refcount
}
}
@override
protected endpoint createendpoint string uri  string remaining  map<string  object> parameters  throws exception
map<string  object> httpclientparameters   new hashmap<string  object> parameters
// must extract well known parameters before we create the endpoint
list<handler> handlerlist   resolveandremovereferencelistparameter parameters     handler class
httpbinding binding   resolveandremovereferenceparameter parameters     httpbinding class
jettyhttpbinding jettybinding   resolveandremovereferenceparameter parameters     jettyhttpbinding class
boolean throwexceptiononfailure   getandremoveparameter parameters     boolean class
boolean transferexception   getandremoveparameter parameters     boolean class
boolean bridgeendpoint   getandremoveparameter parameters     boolean class
boolean matchonuriprefix   getandremoveparameter parameters     boolean class
boolean enablejmx   getandremoveparameter parameters     boolean class
boolean enablemultipartfilter   getandremoveparameter parameters
boolean class  true
filter multipartfilter   resolveandremovereferenceparameter parameters     filter class
list<filter> filters   resolveandremovereferencelistparameter parameters     filter class
long continuationtimeout   getandremoveparameter parameters     long class
boolean usecontinuation   getandremoveparameter parameters     boolean class
sslcontextparameters sslcontextparameters   resolveandremovereferenceparameter parameters     sslcontextparameters class
// configure http client if we have url configuration for it
// http client is only used for jetty http producer (hence not very commonly used)
httpclient client   null
if  introspectionsupport hasproperties parameters        sslcontextparameters    null
client   getnewhttpclient
if  introspectionsupport hasproperties parameters
if  isexplicithttpclient
log warn
}
// set additional parameters on http client
introspectionsupport setproperties client  parameters
// validate that we could resolve all httpclient. parameters as this component is lenient
validateparameters uri  parameters
}
// note that the component level instance is already configured in getnewhttpclient.
// we replace it here for endpoint level config.
if  sslcontextparameters    null
if  isexplicithttpclient
log warn
}
camelhttpclient  client  setsslcontext sslcontextparameters createsslcontext
}
else
// either we use the default one created by the component or we are using
// one explicitly set by the end user, either way, we just use it as is.
client   gethttpclient
}
// keep the configure parameters for the http client
for  string key   parameters keyset
httpclientparameters remove key
}
string address   uri startswith    ? remaining   uri
uri addressuri   new uri unsafeuricharactersencoder encode address
uri endpointuri   urisupport createremaininguri addressuri  castutils cast httpclientparameters
// restructure uri to be based on the parameters left as we dont want to include the camel internal options
uri httpuri   urisupport createremaininguri addressuri  castutils cast parameters
// create endpoint after all known parameters have been extracted from parameters
jettyhttpendpoint endpoint   new jettyhttpendpoint this  endpointuri tostring    httpuri
setendpointheaderfilterstrategy endpoint
if  client    null
endpoint setclient client
}
if  handlerlist size   > 0
endpoint sethandlers handlerlist
}
// prefer to use endpoint configured over component configured
if  binding    null
// fallback to component configured
binding   gethttpbinding
}
if  binding    null
endpoint setbinding binding
}
// prefer to use endpoint configured over component configured
if  jettybinding    null
// fallback to component configured
jettybinding   getjettyhttpbinding
}
if  jettybinding    null
endpoint setjettybinding jettybinding
}
// should we use an exception for failed error codes?
if  throwexceptiononfailure    null
endpoint setthrowexceptiononfailure throwexceptiononfailure
}
// should we transfer exception as serialized object
if  transferexception    null
endpoint settransferexception transferexception
}
if  bridgeendpoint    null
endpoint setbridgeendpoint bridgeendpoint
}
if  matchonuriprefix    null
endpoint setmatchonuriprefix matchonuriprefix
}
if  enablejmx    null
endpoint setenablejmx enablejmx
else
// set this option based on setting of jettyhttpcomponent
endpoint setenablejmx isenablejmx
}
endpoint setenablemultipartfilter enablemultipartfilter
if  multipartfilter    null
endpoint setmultipartfilter multipartfilter
endpoint setenablemultipartfilter true
}
if  filters    null
endpoint setfilters filters
}
if  continuationtimeout    null
endpoint setcontinuationtimeout continuationtimeout
}
if  usecontinuation    null
endpoint setusecontinuation usecontinuation
}
if  sslcontextparameters    null
sslcontextparameters   this sslcontextparameters
}
endpoint setsslcontextparameters sslcontextparameters
setproperties endpoint  parameters
return endpoint
}
/**
* connects the url specified on the endpoint to the specified processor.
*/
@override
public void connect httpconsumer consumer  throws exception
// make sure that there is a connector for the requested endpoint.
jettyhttpendpoint endpoint    jettyhttpendpoint consumer getendpoint
string connectorkey   getconnectorkey endpoint
synchronized  connectors
connectorref connectorref   connectors get connectorkey
if  connectorref    null
connector connector
if    equals endpoint getprotocol
connector   getsslsocketconnector endpoint
else
connector   getsocketconnector endpoint getport
}
connector setport endpoint getport
connector sethost endpoint gethttpuri   gethost
if    equalsignorecase endpoint gethttpuri   gethost
log warn
endpoint
}
server server   createserver
if  endpoint isenablejmx
enablejmx server
}
server addconnector connector
connectorref   new connectorref server  connector  createservletforconnector server  connector  endpoint gethandlers    endpoint
// must enable session before we start
if  endpoint issessionsupport
enablesessionsupport connectorref server  connectorkey
}
connectorref server start
connectors put connectorkey  connectorref
else
// ref track the connector
connectorref increment
}
// check the session support
if  endpoint issessionsupport
enablesessionsupport connectorref server  connectorkey
}
if  endpoint isenablemultipartfilter
enablemultipartfilter endpoint  connectorref server  connectorkey
}
if  endpoint getfilters      null    endpoint getfilters   size   > 0
setfilters endpoint  connectorref server  connectorkey
}
connectorref servlet connect consumer
}
}
private void enablejmx server server
mbeancontainer containertoregister   getmbcontainer
if  containertoregister    null
log info
server getcontainer   addeventlistener containertoregister
// since we may have many servers running, don't tie the mbeancontainer
// to a server lifecycle or we end up closing it while it is still in use.
//server.addbean(mbcontainer);
}
}
private void enablesessionsupport server server  string connectorkey  throws exception
servletcontexthandler context    servletcontexthandler server getchildhandlerbyclass servletcontexthandler class
if  context getsessionhandler      null
sessionhandler sessionhandler   new sessionhandler
if  context isstarted
throw new illegalstateexception     connectorkey
else
context setsessionhandler sessionhandler
}
}
}
private void setfilters jettyhttpendpoint endpoint  server server  string connectorkey
servletcontexthandler context = (servletcontexthandler) server
.getchildhandlerbyclass(servletcontexthandler.class);
list<filter> filters   endpoint getfilters
for  filter filter   filters
filterholder filterholder = new filterholder();
filterholder.setfilter(new camelfilterwrapper(filter));
string pathspec = endpoint.getpath();
if (pathspec == null || "".equals(pathspec)) {
pathspec = "/";
}
if (endpoint.ismatchonuriprefix()) {
pathspec = pathspec.endswith("/") ? pathspec + "*" : pathspec + "/*";
}
context.addfilter(filterholder, pathspec, 0);
}
}
private void enablemultipartfilter(httpendpoint endpoint, server server, string connectorkey) throws exception {
servletcontexthandler context = (servletcontexthandler) server
.getchildhandlerbyclass(servletcontexthandler.class);
camelcontext camelcontext = this.getcamelcontext();
filterholder filterholder = new filterholder();
filterholder.setinitparameter("deletefiles", "true");
if (objecthelper.isnotempty(camelcontext.getproperties().get(tmp_dir))) {
file file = new file(camelcontext.getproperties().get(tmp_dir));
if (!file.isdirectory()) {
throw new runtimecamelexception(
"the temp file directory of camel-jetty is not exists, please recheck it with directory name :"
+ camelcontext.getproperties().get(tmp_dir));
}
context.setattribute("javax.servlet.context.tempdir", file);
}
// if a filter ref was provided, use it.
filter filter = ((jettyhttpendpoint) endpoint).getmultipartfilter();
if (filter == null) {
// if no filter ref was provided, use the default filter
filter = new multipartfilter();
}
filterholder.setfilter(new camelfilterwrapper(filter));
string pathspec = endpoint.getpath();
if (pathspec == null || "".equals(pathspec)) {
pathspec = "/";
}
if (endpoint.ismatchonuriprefix()) {
pathspec = pathspec.endswith("/") ? pathspec + "*" : pathspec + "/*";
}
context.addfilter(filterholder, pathspec, 0);
log.debug("using multipart filter implementation " + filter.getclass().getname() + " for path " + pathspec);
}
/**
* disconnects the url specified on the endpoint from the specified processor.
*/
@override
public void disconnect httpconsumer consumer  throws exception
// if the connector is not needed anymore then stop it
httpendpoint endpoint   consumer getendpoint
string connectorkey   getconnectorkey endpoint
synchronized  connectors
connectorref connectorref   connectors get connectorkey
if  connectorref    null
connectorref servlet disconnect consumer
if  connectorref decrement      0
connectorref server removeconnector connectorref connector
connectorref connector stop
connectorref server stop
connectors remove connectorkey
// camel controls the lifecycle of these entities so remove the
// registered mbeans when camel is done with the managed objects.
if  mbcontainer    null
mbcontainer removebean connectorref server
mbcontainer removebean connectorref connector
}
}
}
}
}
private string getconnectorkey httpendpoint endpoint
return endpoint getprotocol         endpoint gethttpuri   gethost         endpoint getport
}
// properties
// -------------------------------------------------------------------------
public string getsslkeypassword
return sslkeypassword
}
public void setsslkeypassword string sslkeypassword
this sslkeypassword   sslkeypassword
}
public string getsslpassword
return sslpassword
}
public void setsslpassword string sslpassword
this sslpassword   sslpassword
}
public void setkeystore string sslkeystore
this sslkeystore   sslkeystore
}
public string getkeystore
return sslkeystore
}
protected sslselectchannelconnector getsslsocketconnector jettyhttpendpoint endpoint  throws exception
sslselectchannelconnector answer   null
if  sslsocketconnectors    null
answer   sslsocketconnectors get endpoint getport
}
if  answer    null
answer   createsslsocketconnector endpoint
}
return answer
}
protected sslselectchannelconnector createsslsocketconnector jettyhttpendpoint endpoint  throws exception
sslselectchannelconnector answer   null
// note that this was set on the endpoint when it was constructed.  it was
// either explicitly set at the component or on the endpoint, but either way,
// the value is already set.  we therefore do not need to look at the component
// level sslcontextparameters again in this method.
sslcontextparameters endpointsslcontextparameters   endpoint getsslcontextparameters
if  endpointsslcontextparameters    null
sslcontextfactory contextfact   new sslcontextfactory
/**
* we are going to provide the context so none of the configuration options
* matter in the factory.  this method does not account for this scenario so
* we short-circuit it here to just let things go when the context is already
* provided.
*/
// this method is for jetty 7.0.x ~ 7.4.x
@suppresswarnings
public boolean checkconfig
if  getsslcontext      null
return checksslcontextfactoryconfig this
else
return true
}
}
// this method is for jetty 7.5.x
public void checkkeystore
// here we don't check the sslcontext as it is already created
}
contextfact setsslcontext endpointsslcontextparameters createsslcontext
answer   new sslselectchannelconnector contextfact
else
answer   new sslselectchannelconnector
// with default null values, jetty ssl system properties
// and console will be read by jetty implementation
string keystoreproperty   system getproperty jetty_ssl_keystore
if  keystoreproperty    null
answer getsslcontextfactory   setkeystore keystoreproperty
else if  sslkeystore    null
answer getsslcontextfactory   setkeystore sslkeystore
}
string keystorepassword   system getproperty jetty_ssl_keypassword
if  keystorepassword    null
answer getsslcontextfactory   setkeymanagerpassword keystorepassword
else if  sslkeypassword    null
answer getsslcontextfactory   setkeymanagerpassword sslkeypassword
}
string password   system getproperty jetty_ssl_password
if  password    null
answer getsslcontextfactory   setkeystorepassword password
else if  sslpassword    null
answer getsslcontextfactory   setkeystorepassword sslpassword
}
}
if  getsslsocketconnectorproperties      null
if  endpointsslcontextparameters    null
log warn
}
// must copy the map otherwise it will be deleted
map<string  object> properties   new hashmap<string  object> getsslsocketconnectorproperties
introspectionsupport setproperties answer  properties
if  properties size   > 0
throw new illegalargumentexception     properties size
properties
}
}
return answer
}
protected boolean checksslcontextfactoryconfig sslcontextfactory instance
try {
method method   sslcontextfactory class getmethod
return  boolean method invoke instance
catch  nosuchmethodexception ex
// ignore
catch  illegalargumentexception e
// ignore
catch  illegalaccessexception e
// ignore
catch  invocationtargetexception e
// ignore
}
return false
}
public map<integer  sslselectchannelconnector> getsslsocketconnectors
return sslsocketconnectors
}
public void setsslsocketconnectors map <integer  sslselectchannelconnector> connectors
sslsocketconnectors   connectors
}
public selectchannelconnector getsocketconnector int port  throws exception
selectchannelconnector answer   null
if  socketconnectors    null
answer   socketconnectors get port
}
if  answer    null
answer   createsocketconnector
}
return answer
}
protected selectchannelconnector createsocketconnector   throws exception
selectchannelconnector answer   new selectchannelconnector
if  getsocketconnectorproperties      null
// must copy the map otherwise it will be deleted
map<string  object> properties   new hashmap<string  object> getsocketconnectorproperties
introspectionsupport setproperties answer  properties
if  properties size   > 0
throw new illegalargumentexception     properties size
properties
}
}
return answer
}
public void setsocketconnectors map<integer  selectchannelconnector> socketconnectors
this socketconnectors   socketconnectors
}
public synchronized httpclient gethttpclient   throws exception
if  httpclient    null
httpclient   this getnewhttpclient
}
return httpclient
}
public camelhttpclient getnewhttpclient   throws exception
camelhttpclient httpclient   new camelhttpclient
httpclient setconnectortype httpclient connector_select_channel
if  system getproperty       null    system getproperty       null
string host   system getproperty
int port   integer parseint system getproperty
if  log isdebugenabled
log debug    host  port
}
httpclient setproxy new address host  port
}
// use queuethreadpool as the default bounded is deprecated (see smxcomp-157)
if  gethttpclientthreadpool      null
queuedthreadpool qtp = new queuedthreadpool();
if  httpclientminthreads    null
qtp setminthreads httpclientminthreads intvalue
}
if  httpclientmaxthreads    null
qtp setmaxthreads httpclientmaxthreads intvalue
}
// let the thread names indicate they are from the client
qtp setname     objecthelper getidentityhashcode httpclient
try {
qtp.start();
} catch (exception e) {
throw new runtimecamelexception     qtp  e
}
sethttpclientthreadpool qtp
}
httpclient setthreadpool gethttpclientthreadpool
if  this sslcontextparameters    null
httpclient setsslcontext this sslcontextparameters createsslcontext
}
return httpclient
}
public void sethttpclient httpclient httpclient
if  httpclient    null
this isexplicithttpclient   true
else
this isexplicithttpclient   false
}
this httpclient   httpclient
}
public threadpool gethttpclientthreadpool
return httpclientthreadpool
}
public void sethttpclientthreadpool threadpool httpclientthreadpool
this httpclientthreadpool   httpclientthreadpool
}
public integer gethttpclientminthreads
return httpclientminthreads
}
public void sethttpclientminthreads integer httpclientminthreads
this httpclientminthreads   httpclientminthreads
}
public integer gethttpclientmaxthreads
return httpclientmaxthreads
}
public void sethttpclientmaxthreads integer httpclientmaxthreads
this httpclientmaxthreads   httpclientmaxthreads
}
public integer getminthreads
return minthreads
}
public void setminthreads integer minthreads
this minthreads   minthreads
}
public integer getmaxthreads
return maxthreads
}
public void setmaxthreads integer maxthreads
this maxthreads   maxthreads
}
public threadpool getthreadpool
return threadpool
}
public void setthreadpool threadpool threadpool
this threadpool   threadpool
}
public void setenablejmx boolean enablejmx
this enablejmx   enablejmx
}
public boolean isenablejmx
return enablejmx
}
public jettyhttpbinding getjettyhttpbinding
return jettyhttpbinding
}
public void setjettyhttpbinding jettyhttpbinding jettyhttpbinding
this jettyhttpbinding   jettyhttpbinding
}
public synchronized mbeancontainer getmbcontainer
// if null, provide the default implementation.
if  mbcontainer    null
mbeanserver mbs   null
final managementstrategy mstrategy   this getcamelcontext   getmanagementstrategy
final managementagent magent   mstrategy getmanagementagent
if  magent    null
mbs   magent getmbeanserver
}
if  mbs    null
mbcontainer   new mbeancontainer mbs
startmbcontainer
else
log warn
}
}
return this mbcontainer
}
public void setmbcontainer mbeancontainer mbcontainer
this mbcontainer   mbcontainer
}
public map<string  object> getsslsocketconnectorproperties
return sslsocketconnectorproperties
}
public void setsslsocketconnectorproperties map<string  object> sslsocketconnectorproperties
this sslsocketconnectorproperties   sslsocketconnectorproperties
}
public map<string  object> getsocketconnectorproperties
return socketconnectorproperties
}
public void setsocketconnectorproperties map<string  object> socketconnectorproperties
this socketconnectorproperties   socketconnectorproperties
}
public void addsocketconnectorproperty string key  object value
if  socketconnectorproperties    null
socketconnectorproperties   new hashmap<string  object>
}
socketconnectorproperties put key  value
}
public void addsslsocketconnectorproperty string key  object value
if  sslsocketconnectorproperties    null
sslsocketconnectorproperties   new hashmap<string  object>
}
sslsocketconnectorproperties put key  value
}
public long getcontinuationtimeout
return continuationtimeout
}
public void setcontinuationtimeout long continuationtimeout
this continuationtimeout   continuationtimeout
}
public boolean isusecontinuation
return usecontinuation
}
public void setusecontinuation boolean usecontinuation
this usecontinuation   usecontinuation
}
public sslcontextparameters getsslcontextparameters
return sslcontextparameters
}
public void setsslcontextparameters sslcontextparameters sslcontextparameters
this sslcontextparameters   sslcontextparameters
}
// implementation methods
// -------------------------------------------------------------------------
protected camelservlet createservletforconnector server server  connector connector
list<handler> handlers  jettyhttpendpoint endpoint  throws exception
servletcontexthandler context   new servletcontexthandler server     servletcontexthandler no_security   servletcontexthandler no_sessions
context setconnectornames new string  connector getname
if  handlers    null     handlers isempty
for  handler handler   handlers
if  handler instanceof handlerwrapper
handlerwrapper  handler  sethandler server gethandler
server sethandler handler
else
handlercollection handlercollection   new handlercollection
handlercollection addhandler server gethandler
handlercollection addhandler handler
server sethandler handlercollection
}
}
}
camelservlet camelservlet
boolean jetty   endpoint getusecontinuation      null ? endpoint getusecontinuation     isusecontinuation
if  jetty
// use jetty continuations
camelcontinuationservlet jettyservlet   new camelcontinuationservlet
// configure timeout and log it so end user know what we are using
long timeout   endpoint getcontinuationtimeout      null ? endpoint getcontinuationtimeout     getcontinuationtimeout
if  timeout    null
log info     timeout       endpoint
jettyservlet setcontinuationtimeout timeout
else
log info     endpoint
}
// use the jetty servlet
camelservlet   jettyservlet
else
// do not use jetty so use a plain servlet
camelservlet   new camelservlet
log info     endpoint
}
servletholder holder   new servletholder
holder setservlet camelservlet
context addservlet holder
return camelservlet;
}
protected server createserver() throws exception {
server server = new server();
contexthandlercollection collection = new contexthandlercollection();
server.sethandler(collection);
// configure thread pool if min/max given
if (minthreads != null || maxthreads != null) {
if (getthreadpool() != null) {
throw new illegalargumentexception("you cannot configure both minthreads/maxthreads and a custom threadpool on jettyhttpcomponent: " + this);
}
queuedthreadpool qtp = new queuedthreadpool();
if (minthreads != null) {
qtp.setminthreads(minthreads.intvalue());
}
if (maxthreads != null) {
qtp.setmaxthreads(maxthreads.intvalue());
}
// let the thread names indicate they are from the server
qtp.setname("cameljettyserver(" + objecthelper.getidentityhashcode(server) + ")");
try {
qtp.start();
} catch (exception e) {
throw new runtimecamelexception("error starting jettyserver thread pool: " + qtp, e);
}
server.setthreadpool(qtp);
}
if (getthreadpool() != null) {
server.setthreadpool(getthreadpool());
}
return server;
}
/**
* starts {@link #mbcontainer} and registers the container with itself as a managed bean
* logging an error if there is a problem starting the container.
* does nothing if {@link #mbcontainer} is {@code null}.
*/
protected void startmbcontainer
if  mbcontainer    null     mbcontainer isstarted
try {
mbcontainer start
// publish the container itself for consistency with
// traditional embedded jetty configurations.
mbcontainer addbean mbcontainer
catch  throwable e
log warn    e
}
}
}
@override
protected void dostart   throws exception
super dostart
if  httpclientthreadpool    null    httpclientthreadpool instanceof lifecycle
lifecycle lc    lifecycle  httpclientthreadpool
lc start
}
if  httpclient    null     httpclient isstarted
httpclient start
}
startmbcontainer
}
@override
protected void dostop   throws exception
super dostop
if  connectors size   > 0
for  string connectorkey   connectors keyset
connectorref connectorref   connectors get connectorkey
if  connectorref    null    connectorref getrefcount      0
connectorref server removeconnector connectorref connector
connectorref connector stop
connectorref server stop
// camel controls the lifecycle of these entities so remove the
// registered mbeans when camel is done with the managed objects.
if  mbcontainer    null
mbcontainer removebean connectorref server
mbcontainer removebean connectorref connector
}
connectors remove connectorkey
}
}
}
if  httpclient    null
httpclient stop
}
if  httpclientthreadpool    null    httpclientthreadpool instanceof lifecycle
lifecycle lc    lifecycle  httpclientthreadpool
lc stop
}
if  mbcontainer    null
mbcontainer stop
}
}
}