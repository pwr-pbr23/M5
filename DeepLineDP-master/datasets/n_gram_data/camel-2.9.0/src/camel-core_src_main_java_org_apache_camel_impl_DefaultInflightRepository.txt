/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel impl
import java util concurrent concurrenthashmap
import java util concurrent atomic atomicinteger
import org apache camel endpoint
import org apache camel exchange
import org apache camel spi inflightrepository
import org apache camel support servicesupport
import org slf4j logger
import org slf4j loggerfactory
/**
* default implement which just uses a counter
*
* @version
*/
public class defaultinflightrepository extends servicesupport implements inflightrepository
private static final transient logger log   loggerfactory getlogger defaultinflightrepository class
private final atomicinteger totalcount   new atomicinteger
// use endpoint key as key so endpoints with lenient properties is registered using the same key (eg dynamic http endpoints)
private final concurrenthashmap<string  atomicinteger> endpointcount   new concurrenthashmap<string  atomicinteger>
public void add exchange exchange
int count   totalcount incrementandget
log trace    count  exchange getexchangeid
if  exchange getfromendpoint      null
return
string key   exchange getfromendpoint   getendpointkey
atomicinteger existing   endpointcount putifabsent key  new atomicinteger 1
if  existing    null
existing addandget 1
public void remove exchange exchange
int count   totalcount decrementandget
log trace    count  exchange getexchangeid
if  exchange getfromendpoint      null
return
string key   exchange getfromendpoint   getendpointkey
atomicinteger existing   endpointcount get key
if  existing    null
existing addandget  1
public int size
return totalcount get
public int size endpoint endpoint
atomicinteger answer   endpointcount get endpoint getendpointkey
return answer    null ? answer get     0
@override
protected void dostart   throws exception
@override
protected void dostop   throws exception
int count   size
if  count > 0
log warn     count
else
log info
endpointcount clear