/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel impl
import java net uri
import java util arraylist
import java util list
import java util map
import org apache camel camelcontext
import org apache camel component
import org apache camel endpoint
import org apache camel endpointconfiguration
import org apache camel resolveendpointfailedexception
import org apache camel support servicesupport
import org apache camel util camelcontexthelper
import org apache camel util endpointhelper
import org apache camel util introspectionsupport
import org apache camel util objecthelper
import org apache camel util urisupport
import org apache camel util unsafeuricharactersencoder
import org slf4j logger
import org slf4j loggerfactory
/**
* default component to use for base for components implementations.
*
* @version
*/
public abstract class defaultcomponent extends servicesupport implements component
private static final transient logger log   loggerfactory getlogger defaultcomponent class
private camelcontext camelcontext
public defaultcomponent
public defaultcomponent camelcontext context
this camelcontext   context
@deprecated
protected string preprocessuri string uri
// give components a chance to preprocess uris and migrate to uri syntax that discourages invalid uris
// (see camel-4425)
// check uri string to the unsafe uri characters
string encodeduri   unsafeuricharactersencoder encode uri
if   encodeduri equals uri
// uri supplied is not really valid
log warn    uri
return encodeduri
public endpoint createendpoint string uri  throws exception
objecthelper notnull getcamelcontext
// check uri string to the unsafe uri characters
string encodeduri   preprocessuri uri
uri u   new uri encodeduri
string path   u getschemespecificpart
// lets trim off any query arguments
if  path startswith
path   path substring 2
int idx   path indexof
if  idx >  1
path   path substring 0  idx
map<string  object> parameters   urisupport parseparameters u
validateuri encodeduri  path  parameters
if  log isdebugenabled
log debug    new object urisupport sanitizeuri encodeduri   path  parameters
endpoint endpoint   createendpoint encodeduri  path  parameters
if  endpoint    null
return null
if  parameters    null     parameters isempty
endpoint configureproperties parameters
if  useintrospectiononendpoint
setproperties endpoint  parameters
// if endpoint is strict (not lenient) and we have unknown parameters configured then
// fail if there are parameters that could not be set, then they are probably misspell or not supported at all
if   endpoint islenientproperties
validateparameters encodeduri  parameters  null
afterconfiguration encodeduri  path  endpoint  parameters
return endpoint
public endpointconfiguration createconfiguration string uri  throws exception
mappedendpointconfiguration config   new mappedendpointconfiguration this
config seturi new uri uri
return config
/**
* strategy to do post configuration logic.
* <p/>
* can be used to construct an uri based on the remaining parameters. for example the parameters that configures
* the endpoint have been removed from the parameters which leaves only the additional parameters left.
*
* @param endpoint the created endpoint
* @param parameters the remaining parameters after the endpoint has been created and parsed the parameters
* @throws exception can be thrown to indicate error creating the endpoint
*/
protected void afterconfiguration string uri  string remaining  endpoint endpoint  map<string  object> parameters  throws exception
// noop
/**
* strategy for validation of parameters, that was not able to be resolved to any endpoint options.
*
* @param uri          the uri - the uri the end user provided untouched
* @param parameters   the parameters, an empty map if no parameters given
* @param optionprefix optional prefix to filter the parameters for validation. use <tt>null</tt> for validate all.
* @throws resolveendpointfailedexception should be thrown if the uri validation failed
*/
protected void validateparameters string uri  map<string  object> parameters  string optionprefix
map<string  object> param   parameters
if  optionprefix    null
param   introspectionsupport extractproperties parameters  optionprefix
if  param size   > 0
throw new resolveendpointfailedexception uri      param size
param
/**
* strategy for validation of the uri when creating the endpoint.
*
* @param uri        the uri - the uri the end user provided untouched
* @param path       the path - part after the scheme
* @param parameters the parameters, an empty map if no parameters given
* @throws resolveendpointfailedexception should be thrown if the uri validation failed
*/
protected void validateuri string uri  string path  map<string  object> parameters
// check for uri containing & but no ? marker
if  uri contains        uri contains
throw new resolveendpointfailedexception uri
// check for uri containing double && markers
if  uri contains
throw new resolveendpointfailedexception uri
// if we have a trailing & then that is invalid as well
if  uri endswith
throw new resolveendpointfailedexception uri
public camelcontext getcamelcontext
return camelcontext
public void setcamelcontext camelcontext context
this camelcontext   context
protected void dostart   throws exception
objecthelper notnull getcamelcontext
protected void dostop   throws exception
// noop
/**
* a factory method allowing derived components to create a new endpoint
* from the given uri, remaining path and optional parameters
*
* @param uri the full uri of the endpoint
* @param remaining the remaining part of the uri without the query
*                parameters or component prefix
* @param parameters the optional parameters passed in
* @return a newly created endpoint or null if the endpoint cannot be
*         created based on the inputs
*/
protected abstract endpoint createendpoint string uri  string remaining  map<string  object> parameters
throws exception
/**
* sets the bean properties on the given bean
*
* @param bean  the bean
* @param parameters  properties to set
*/
protected void setproperties object bean  map<string  object> parameters  throws exception
// set reference properties first as they use # syntax that fools the regular properties setter
endpointhelper setreferenceproperties getcamelcontext    bean  parameters
endpointhelper setproperties getcamelcontext    bean  parameters
/**
* derived classes may wish to overload this to prevent the default introspection of uri parameters
* on the created endpoint instance
*/
protected boolean useintrospectiononendpoint
return true
/**
* gets the parameter and remove it from the parameter map. this method doesn't resolve
* reference parameters in the registry.
*
* @param parameters the parameters
* @param key        the key
* @param type       the requested type to convert the value from the parameter
* @return  the converted value parameter, <tt>null</tt> if parameter does not exists.
* @see #resolveandremovereferenceparameter(map, string, class)
*/
public <t> t getandremoveparameter map<string  object> parameters  string key  class<t> type
return getandremoveparameter parameters  key  type  null
/**
* gets the parameter and remove it from the parameter map. this method doesn't resolve
* reference parameters in the registry.
*
* @param parameters    the parameters
* @param key           the key
* @param type          the requested type to convert the value from the parameter
* @param defaultvalue  use this default value if the parameter does not contain the key
* @return  the converted value parameter
* @see #resolveandremovereferenceparameter(map, string, class, object)
*/
public <t> t getandremoveparameter map<string  object> parameters  string key  class<t> type  t defaultvalue
object value   parameters remove key
if  value    null
value   defaultvalue
if  value    null
return null
return camelcontexthelper convertto getcamelcontext    type  value
/**
* resolves a reference parameter in the registry and removes it from the map.
*
* @param <t>           type of object to lookup in the registry.
* @param parameters    parameter map.
* @param key           parameter map key.
* @param type          type of object to lookup in the registry.
* @return the referenced object or <code>null</code> if the parameter map
*         doesn't contain the key.
* @throws illegalargumentexception if a non-null reference was not found in
*         registry.
*/
public <t> t resolveandremovereferenceparameter map<string  object> parameters  string key  class<t> type
return resolveandremovereferenceparameter parameters  key  type  null
/**
* resolves a reference parameter in the registry and removes it from the map.
*
* @param <t>           type of object to lookup in the registry.
* @param parameters    parameter map.
* @param key           parameter map key.
* @param type          type of object to lookup in the registry.
* @param defaultvalue  default value to use if the parameter map doesn't
*                      contain the key.
* @return the referenced object or the default value.
* @throws illegalargumentexception if referenced object was not found in
*         registry.
*/
public <t> t resolveandremovereferenceparameter map<string  object> parameters  string key  class<t> type  t defaultvalue
string value   getandremoveparameter parameters  key  string class
if  value    null
return defaultvalue
else
return endpointhelper resolvereferenceparameter getcamelcontext    value tostring    type
/**
* resolves a reference list parameter in the registry and removes it from
* the map.
*
* @param parameters
*            parameter map.
* @param key
*            parameter map key.
* @param elementtype
*            result list element type.
* @return the list of referenced objects or an empty list if the parameter
*         map doesn't contain the key.
* @throws illegalargumentexception if any of the referenced objects was
*         not found in registry.
* @see endpointhelper#resolvereferencelistparameter(camelcontext, string, class)
*/
public <t> list<t> resolveandremovereferencelistparameter map<string  object> parameters  string key  class<t> elementtype
return resolveandremovereferencelistparameter parameters  key  elementtype  new arraylist<t> 0
/**
* resolves a reference list parameter in the registry and removes it from
* the map.
*
* @param parameters
*            parameter map.
* @param key
*            parameter map key.
* @param elementtype
*            result list element type.
* @param defaultvalue
*            default value to use if the parameter map doesn't
*            contain the key.
* @return the list of referenced objects or the default value.
* @throws illegalargumentexception if any of the referenced objects was
*         not found in registry.
* @see endpointhelper#resolvereferencelistparameter(camelcontext, string, class)
*/
public <t> list<t> resolveandremovereferencelistparameter map<string  object> parameters  string key  class<t> elementtype  list<t>  defaultvalue
string value   getandremoveparameter parameters  key  string class
if  value    null
return defaultvalue
else
return endpointhelper resolvereferencelistparameter getcamelcontext    value tostring    elementtype
/**
* returns the reminder of the text if it starts with the prefix.
* <p/>
* is useable for string parameters that contains commands.
*
* @param prefix  the prefix
* @param text  the text
* @return the reminder, or null if no reminder
*/
protected string ifstartswithreturnremainder string prefix  string text
if  text startswith prefix
string remainder   text substring prefix length
if  remainder length   > 0
return remainder
return null