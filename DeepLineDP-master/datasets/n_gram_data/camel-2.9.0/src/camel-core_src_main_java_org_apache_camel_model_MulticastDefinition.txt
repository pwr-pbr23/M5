/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel model
import java util list
import java util concurrent executorservice
import javax xml bind annotation xmlaccesstype
import javax xml bind annotation xmlaccessortype
import javax xml bind annotation xmlattribute
import javax xml bind annotation xmlrootelement
import javax xml bind annotation xmltransient
import org apache camel processor
import org apache camel processor multicastprocessor
import org apache camel processor subunitofworkprocessor
import org apache camel processor aggregate aggregationstrategy
import org apache camel processor aggregate uselatestaggregationstrategy
import org apache camel spi executorservicemanager
import org apache camel spi routecontext
import org apache camel util camelcontexthelper
/**
* represents an xml &lt;multicast/&gt; element
*
* @version
*/
@xmlrootelement name
@xmlaccessortype xmlaccesstype field
public class multicastdefinition extends outputdefinition<multicastdefinition> implements executorserviceawaredefinition<multicastdefinition>
@xmlattribute
private boolean parallelprocessing
@xmlattribute
private string strategyref
@xmltransient
private executorservice executorservice
@xmlattribute
private string executorserviceref
@xmlattribute
private boolean streaming
@xmlattribute
private boolean stoponexception
@xmlattribute
private long timeout
@xmltransient
private aggregationstrategy aggregationstrategy
@xmlattribute
private string onprepareref
@xmltransient
private processor onprepare
@xmlattribute
private boolean shareunitofwork
public multicastdefinition
@override
public string tostring
return     getoutputs
@override
public string getlabel
return
@override
public string getshortname
return
@override
public processor createprocessor routecontext routecontext  throws exception
return this createchildprocessor routecontext  true
// fluent api
// -------------------------------------------------------------------------
/**
* set the multicasting aggregationstrategy
*
* @return the builder
*/
public multicastdefinition aggregationstrategy aggregationstrategy aggregationstrategy
setaggregationstrategy aggregationstrategy
return this
/**
* set the aggregationstrategy
*
* @param aggregationstrategyref a reference to a strategy to lookup
* @return the builder
*/
public multicastdefinition aggregationstrategyref string aggregationstrategyref
setstrategyref aggregationstrategyref
return this
/**
* uses the {@link java.util.concurrent.executorservice} to do the multicasting work
*
* @return the builder
*/
public multicastdefinition parallelprocessing
setparallelprocessing true
return this
/**
* aggregates the responses as the are done (e.g. out of order sequence)
*
* @return the builder
*/
public multicastdefinition streaming
setstreaming true
return this
/**
* will now stop further processing if an exception or failure occurred during processing of an
* {@link org.apache.camel.exchange} and the caused exception will be thrown.
* <p/>
* will also stop if processing the exchange failed (has a fault message) or an exception
* was thrown and handled by the error handler (such as using onexception). in all situations
* the multicast will stop further processing. this is the same behavior as in pipeline, which
* is used by the routing engine.
* <p/>
* the default behavior is to <b>not</b> stop but continue processing till the end
*
* @return the builder
*/
public multicastdefinition stoponexception
setstoponexception true
return this
public multicastdefinition executorservice executorservice executorservice
setexecutorservice executorservice
return this
public multicastdefinition executorserviceref string executorserviceref
setexecutorserviceref executorserviceref
return this
/**
* uses the {@link processor} when preparing the {@link org.apache.camel.exchange} to be send.
* this can be used to deep-clone messages that should be send, or any custom logic needed before
* the exchange is send.
*
* @param onprepare the processor
* @return the builder
*/
public multicastdefinition onprepare processor onprepare
setonprepare onprepare
return this
/**
* uses the {@link processor} when preparing the {@link org.apache.camel.exchange} to be send.
* this can be used to deep-clone messages that should be send, or any custom logic needed before
* the exchange is send.
*
* @param onprepareref reference to the processor to lookup in the {@link org.apache.camel.spi.registry}
* @return the builder
*/
public multicastdefinition onprepareref string onprepareref
setonprepareref onprepareref
return this
/**
* sets a timeout value in millis to use when using parallelprocessing.
*
* @param timeout timeout in millis
* @return the builder
*/
public multicastdefinition timeout long timeout
settimeout timeout
return this
/**
* shares the {@link org.apache.camel.spi.unitofwork} with the parent and each of the sub messages.
*
* @return the builder.
* @see org.apache.camel.spi.subunitofwork
*/
public multicastdefinition shareunitofwork
setshareunitofwork true
return this
protected processor createcompositeprocessor routecontext routecontext  list<processor> list  throws exception
if  strategyref    null
aggregationstrategy   routecontext lookup strategyref  aggregationstrategy class
if  aggregationstrategy    null
// default to use latest aggregation strategy
aggregationstrategy   new uselatestaggregationstrategy
executorservicemanager executorservicemanager   routecontext getcamelcontext   getexecutorservicemanager
if  isparallelprocessing      executorservice    null
string ref   this executorserviceref    null ? this executorserviceref
executorservice   executorservicemanager newdefaultthreadpool this  ref
long timeout   gettimeout      null ? gettimeout     0
if  timeout > 0     isparallelprocessing
throw new illegalargumentexception
if  onprepareref    null
onprepare   camelcontexthelper mandatorylookup routecontext getcamelcontext    onprepareref  processor class
multicastprocessor answer   new multicastprocessor routecontext getcamelcontext    list  aggregationstrategy  isparallelprocessing
executorservice  isstreaming    isstoponexception    timeout  onprepare  isshareunitofwork
if  isshareunitofwork
// wrap answer in a sub unit of work, since we share the unit of work
return new subunitofworkprocessor answer
return answer
public aggregationstrategy getaggregationstrategy
return aggregationstrategy
public multicastdefinition setaggregationstrategy aggregationstrategy aggregationstrategy
this aggregationstrategy   aggregationstrategy
return this
public boolean getparallelprocessing
return parallelprocessing
public void setparallelprocessing boolean parallelprocessing
this parallelprocessing   parallelprocessing
public boolean isparallelprocessing
return parallelprocessing    null    parallelprocessing
public boolean getstreaming
return streaming
public void setstreaming boolean streaming
this streaming   streaming
public boolean isstreaming
return streaming    null    streaming
public boolean getstoponexception
return stoponexception
public void setstoponexception boolean stoponexception
this stoponexception   stoponexception
public boolean isstoponexception
return stoponexception    null    stoponexception
public executorservice getexecutorservice
return executorservice
public void setexecutorservice executorservice executorservice
this executorservice   executorservice
public string getstrategyref
return strategyref
public void setstrategyref string strategyref
this strategyref   strategyref
public string getexecutorserviceref
return executorserviceref
public void setexecutorserviceref string executorserviceref
this executorserviceref   executorserviceref
public long gettimeout
return timeout
public void settimeout long timeout
this timeout   timeout
public string getonprepareref
return onprepareref
public void setonprepareref string onprepareref
this onprepareref   onprepareref
public processor getonprepare
return onprepare
public void setonprepare processor onprepare
this onprepare   onprepare
public boolean getshareunitofwork
return shareunitofwork
public void setshareunitofwork boolean shareunitofwork
this shareunitofwork   shareunitofwork
public boolean isshareunitofwork
return shareunitofwork    null    shareunitofwork