/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel model
import java util concurrent executorservice
import java util concurrent scheduledexecutorservice
import javax xml bind annotation xmlaccesstype
import javax xml bind annotation xmlaccessortype
import javax xml bind annotation xmlattribute
import javax xml bind annotation xmlrootelement
import javax xml bind annotation xmltransient
import org apache camel expression
import org apache camel processor
import org apache camel builder expressionbuilder
import org apache camel model language expressiondefinition
import org apache camel processor delayer
import org apache camel spi routecontext
import org apache camel util objecthelper
/**
* represents an xml &lt;delay/&gt; element
*
* @version
*/
@xmlrootelement name
@xmlaccessortype xmlaccesstype field
public class delaydefinition extends expressionnode implements executorserviceawaredefinition<delaydefinition>
// todo: camel 3.0 should extend nooutputexpressionnode
@xmltransient
private executorservice executorservice
@xmlattribute
private string executorserviceref
@xmlattribute
private boolean asyncdelayed
@xmlattribute
private boolean callerrunswhenrejected
public delaydefinition
public delaydefinition expression delay
super delay
@override
public string getlabel
return     getexpression
@override
public string getshortname
return
@override
public string tostring
return     getexpression         getoutputs
@override
public processor createprocessor routecontext routecontext  throws exception
processor childprocessor   this createchildprocessor routecontext  false
expression delay   createabsolutetimedelayexpression routecontext
scheduledexecutorservice scheduled   null
if  getasyncdelayed      null    getasyncdelayed
scheduled   processordefinitionhelper getconfiguredscheduledexecutorservice routecontext     this
if  scheduled    null
scheduled   routecontext getcamelcontext   getexecutorservicemanager   newdefaultscheduledthreadpool this
delayer answer   new delayer childprocessor  delay  scheduled
if  getasyncdelayed      null
answer setasyncdelayed getasyncdelayed
if  getcallerrunswhenrejected      null
// should be default true
answer setcallerrunswhenrejected true
else
answer setcallerrunswhenrejected getcallerrunswhenrejected
return answer
private expression createabsolutetimedelayexpression routecontext routecontext
expressiondefinition expr   getexpression
if  expr    null
if  objecthelper isnotempty expr getexpression       expr getexpressionvalue      null
return expr createexpression routecontext
return null
// fluent api
// -------------------------------------------------------------------------
/**
* sets the delay time in millis to delay
*
* @param delay delay time in millis
* @return the builder
*/
public delaydefinition delaytime long delay
setexpression new expressiondefinition expressionbuilder constantexpression delay
return this
/**
* whether or not the caller should run the task when it was rejected by the thread pool.
* <p/>
* is by default <tt>true</tt>
*
* @param callerrunswhenrejected whether or not the caller should run
* @return the builder
*/
public delaydefinition callerrunswhenrejected boolean callerrunswhenrejected
setcallerrunswhenrejected callerrunswhenrejected
return this
/**
* enables asynchronous delay which means the thread will <b>noy</b> block while delaying.
*
* @return the builder
*/
public delaydefinition asyncdelayed
setasyncdelayed true
return this
public delaydefinition executorservice executorservice executorservice
setexecutorservice executorservice
return this
public delaydefinition executorserviceref string executorserviceref
setexecutorserviceref executorserviceref
return this
// properties
// -------------------------------------------------------------------------
public boolean getasyncdelayed
return asyncdelayed
public void setasyncdelayed boolean asyncdelayed
this asyncdelayed   asyncdelayed
public boolean getcallerrunswhenrejected
return callerrunswhenrejected
public void setcallerrunswhenrejected boolean callerrunswhenrejected
this callerrunswhenrejected   callerrunswhenrejected
public executorservice getexecutorservice
return executorservice
public void setexecutorservice executorservice executorservice
this executorservice   executorservice
public string getexecutorserviceref
return executorserviceref
public void setexecutorserviceref string executorserviceref
this executorserviceref   executorserviceref