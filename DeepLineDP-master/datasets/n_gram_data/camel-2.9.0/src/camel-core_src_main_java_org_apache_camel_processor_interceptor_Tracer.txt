/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel processor interceptor
import java util list
import java util concurrent copyonwritearraylist
import org apache camel camelcontext
import org apache camel endpoint
import org apache camel logginglevel
import org apache camel predicate
import org apache camel processor
import org apache camel service
import org apache camel model processordefinition
import org apache camel model routedefinitionhelper
import org apache camel processor camellogprocessor
import org apache camel spi exchangeformatter
import org apache camel spi interceptstrategy
import org apache camel util camellogger
/**
* an interceptor strategy for tracing routes
*
* @version
*/
public class tracer implements interceptstrategy  service
private static final string jpa_trace_event_message
private traceformatter formatter   new defaulttraceformatter
private boolean enabled   true
private string logname   tracer class getname
private logginglevel loglevel   logginglevel info
private predicate tracefilter
private boolean traceinterceptors
private boolean traceexceptions   true
private boolean logstacktrace
private boolean traceoutexchanges
private string destinationuri
private endpoint destination
private boolean usejpa
private camellogprocessor logger
private traceinterceptorfactory traceinterceptorfactory   new defaulttraceinterceptorfactory
private copyonwritearraylist<traceeventhandler> tracehandlers
private string jpatraceeventmessageclassname   jpa_trace_event_message
private boolean jmxtracenotifications
private int tracebodysize   10000
public tracer
tracehandlers   new copyonwritearraylist<traceeventhandler>
tracehandlers add new defaulttraceeventhandler this
/**
* creates a new tracer.
*
* @param context camel context
* @return a new tracer
*/
public static tracer createtracer camelcontext context
tracer tracer   new tracer
// lets see if we have a formatter if so use it
traceformatter formatter   context getregistry   lookup    traceformatter class
if  formatter    null
tracer setformatter formatter
return tracer
/**
* a helper method to return the tracer instance if one is enabled
*
* @return the tracer or null if none can be found
*/
public static tracer gettracer camelcontext context
list<interceptstrategy> list   context getinterceptstrategies
for  interceptstrategy interceptstrategy   list
if  interceptstrategy instanceof tracer
return  tracer  interceptstrategy
return null
/**
* gets the logger to be used for tracers that can format and log a given exchange.
*
* @param formatter the exchange formatter
* @return the logger to use
*/
public synchronized camellogprocessor getlogger exchangeformatter formatter
if  logger    null
logger   new camellogprocessor new camellogger getlogname    getloglevel     formatter
return logger
public processor wrapprocessorininterceptors camelcontext context  processordefinition<?> definition
processor target  processor nexttarget  throws exception
// force the creation of an id, otherwise the id is not available when the trace formatter is
// outputting trace information
routedefinitionhelper forceassignids context  definition
return gettraceinterceptorfactory   createtraceinterceptor definition  target  formatter  this
public traceformatter getformatter
return formatter
public defaulttraceformatter getdefaulttraceformatter
if  formatter instanceof defaulttraceformatter
return  defaulttraceformatter  formatter
return null
public void setformatter traceformatter formatter
this formatter   formatter
public void setenabled boolean flag
enabled   flag
public boolean isenabled
return enabled
public boolean istraceinterceptors
return traceinterceptors
/**
* sets whether interceptors should be traced or not
*/
public void settraceinterceptors boolean traceinterceptors
this traceinterceptors   traceinterceptors
public predicate gettracefilter
return tracefilter
/**
* sets a predicate to be used as filter when tracing
*/
public void settracefilter predicate tracefilter
this tracefilter   tracefilter
public logginglevel getloglevel
return loglevel
/**
* sets the logging level to output tracing. will use <tt>info</tt> level by default.
*/
public void setloglevel logginglevel loglevel
this loglevel   loglevel
// update logger if its in use
if  logger    null
logger getlogger   setlevel loglevel
public boolean istraceexceptions
return traceexceptions
/**
* sets whether thrown exceptions should be traced
*/
public void settraceexceptions boolean traceexceptions
this traceexceptions   traceexceptions
public boolean islogstacktrace
return logstacktrace
/**
* sets whether thrown exception stacktrace should be traced, if disabled then only the exception message is logged
*/
public void setlogstacktrace boolean logstacktrace
this logstacktrace   logstacktrace
public string getlogname
return logname
/**
* sets the logging name to use.
* will default use <tt>org.apache.camel.processor.interceptor.traceinterceptor<tt>.
*/
public void setlogname string logname
this logname   logname
// update logger if its in use
if  logger    null
logger getlogger   setlogname logname
/**
* sets whether exchanges coming out of processors should be traced
*/
public void settraceoutexchanges boolean traceoutexchanges
this traceoutexchanges   traceoutexchanges
public boolean istraceoutexchanges
return traceoutexchanges
public string getdestinationuri
return destinationuri
/**
* sets an optional destination to send the traced exchange.
* <p/>
* can be used to store tracing as files, in a database or whatever. the routing of the exchange
* will happen synchronously and the original route will first continue when this destination routing
* has been completed.
*/
public void setdestinationuri string destinationuri
this destinationuri   destinationuri
public endpoint getdestination
return destination
/**
* see {@link #setdestinationuri(string)}
*/
public void setdestination endpoint destination
this destination   destination
public boolean isusejpa
return usejpa
/**
* sets whether we should use a jpatraceeventmessage instead of
* an ordinary {@link org.apache.camel.processor.interceptor.defaulttraceeventmessage}
* <p/>
* use this to allow persistence of trace events into a database using jpa.
* this requires camel-jpa in the classpath.
*/
public void setusejpa boolean usejpa
this usejpa   usejpa
public traceinterceptorfactory gettraceinterceptorfactory
return this traceinterceptorfactory
/**
* set the factory to be used to create the trace interceptor.
* it is expected that the factory will create a subclass of traceinterceptor.
* <p/>
* use this to take complete control of how trace events are handled.
* the traceinterceptorfactory should only be set before any routes are created, hence this
* method is not thread safe.
*/
public void settraceinterceptorfactory traceinterceptorfactory traceinterceptorfactory
this traceinterceptorfactory   traceinterceptorfactory
/**
*
* @return the first trace event handler
*/
@deprecated
public traceeventhandler gettracehandler
return tracehandlers get 0
/**
*
* @return list of tracehandlers
*/
public list<traceeventhandler> gettracehandlers
return tracehandlers
/**
* set the object to be used to perform tracing.
* <p/>
* use this to take more control of how trace events are persisted.
* setting the tracehandler provides a simpler mechanism for controlling tracing
* than the traceinterceptorfactory.
* the tracehandler should only be set before any routes are created, hence this
* method is not thread safe.
*/
@deprecated
public void settracehandler traceeventhandler tracehandler
this tracehandlers clear
this tracehandlers add tracehandler
/**
* add the given tracehandler
* @param tracehandler
*/
public void addtracehandler traceeventhandler tracehandler
this tracehandlers add tracehandler
/**
* remove the given tracehandler
* @param tracehandler
*/
public void removetracehandler traceeventhandler tracehandler
this tracehandlers add tracehandler
public string getjpatraceeventmessageclassname
return jpatraceeventmessageclassname
/**
* set the fully qualified name of the class to be used by the jpa event tracing.
* <p/>
* the class must exist in the classpath and be available for dynamic loading.
* the class name should only be set before any routes are created, hence this
* method is not thread safe.
*/
public void setjpatraceeventmessageclassname string jpatraceeventmessageclassname
this jpatraceeventmessageclassname   jpatraceeventmessageclassname
public boolean isjmxtracenotifications
return jmxtracenotifications
public void setjmxtracenotifications boolean jmxtracenotifications
this jmxtracenotifications   jmxtracenotifications
public int gettracebodysize
return tracebodysize
public void settracebodysize int tracebodysize
this tracebodysize   tracebodysize
@override
public string tostring
return
public void start   throws exception
public void stop   throws exception