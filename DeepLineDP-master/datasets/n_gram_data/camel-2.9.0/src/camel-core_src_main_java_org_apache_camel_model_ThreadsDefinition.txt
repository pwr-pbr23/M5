/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel model
import java util arraylist
import java util list
import java util concurrent executorservice
import java util concurrent timeunit
import javax xml bind annotation xmlaccesstype
import javax xml bind annotation xmlaccessortype
import javax xml bind annotation xmlattribute
import javax xml bind annotation xmlrootelement
import javax xml bind annotation xmltransient
import javax xml bind annotation adapters xmljavatypeadapter
import org apache camel processor
import org apache camel threadpoolrejectedpolicy
import org apache camel builder threadpoolprofilebuilder
import org apache camel builder xml timeunitadapter
import org apache camel processor pipeline
import org apache camel processor threadsprocessor
import org apache camel spi executorservicemanager
import org apache camel spi routecontext
import org apache camel spi threadpoolprofile
/**
* represents an xml &lt;threads/&gt; element
*
* @version
*/
@xmlrootelement name
@xmlaccessortype xmlaccesstype field
public class threadsdefinition extends outputdefinition<threadsdefinition> implements executorserviceawaredefinition<threadsdefinition>
// todo: camel 3.0 should extend nooutputdefinition
@xmltransient
private executorservice executorservice
@xmlattribute
private string executorserviceref
@xmlattribute
private integer poolsize
@xmlattribute
private integer maxpoolsize
@xmlattribute
private long keepalivetime
@xmlattribute
@xmljavatypeadapter timeunitadapter class
private timeunit timeunit
@xmlattribute
private integer maxqueuesize
@xmlattribute
private string threadname
@xmlattribute
private threadpoolrejectedpolicy rejectedpolicy
@xmlattribute
private boolean callerrunswhenrejected
public threadsdefinition
this threadname
@override
public processor createprocessor routecontext routecontext  throws exception
// the threads name
string name   getthreadname      null ? getthreadname
// prefer any explicit configured executor service
executorservice   processordefinitionhelper getconfiguredexecutorservice routecontext  name  this
// if no explicit then create from the options
if  executorservice    null
executorservicemanager manager   routecontext getcamelcontext   getexecutorservicemanager
// create the thread pool using a builder
threadpoolprofile profile   new threadpoolprofilebuilder name
poolsize getpoolsize
maxpoolsize getmaxpoolsize
keepalivetime getkeepalivetime    gettimeunit
maxqueuesize getmaxqueuesize
rejectedpolicy getrejectedpolicy
build
executorservice   manager newthreadpool this  name  profile
threadsprocessor thread   new threadsprocessor routecontext getcamelcontext    executorservice
if  getcallerrunswhenrejected      null
// should be true by default
thread setcallerrunswhenrejected true
else
thread setcallerrunswhenrejected getcallerrunswhenrejected
list<processor> pipe   new arraylist<processor> 2
pipe add thread
pipe add createchildprocessor routecontext  true
// wrap in nested pipeline so this appears as one processor
// (recipient list definition does this as well)
return new pipeline routecontext getcamelcontext    pipe
@override
public string tostring
return     getoutputs
@override
public string getlabel
return
@override
public string getshortname
return
@override
public string tostring
return     getoutputs
public threadsdefinition executorservice executorservice executorservice
setexecutorservice executorservice
return this
public threadsdefinition executorserviceref string executorserviceref
setexecutorserviceref executorserviceref
return this
/**
* sets the core pool size for the underlying {@link java.util.concurrent.executorservice}.
*
* @param poolsize the core pool size to keep minimum in the pool
* @return the builder
*/
public threadsdefinition poolsize int poolsize
setpoolsize poolsize
return this
/**
* sets the maximum pool size for the underlying {@link java.util.concurrent.executorservice}.
*
* @param maxpoolsize the maximum pool size
* @return the builder
*/
public threadsdefinition maxpoolsize int maxpoolsize
setmaxpoolsize maxpoolsize
return this
/**
* sets the keep alive time for idle threads
*
* @param keepalivetime keep alive time
* @return the builder
*/
public threadsdefinition keepalivetime long keepalivetime
setkeepalivetime keepalivetime
return this
/**
* sets the keep alive time unit.
* by default seconds is used.
*
* @param keepalivetimeunits time unit
* @return the builder
*/
public threadsdefinition timeunit timeunit keepalivetimeunits
settimeunit keepalivetimeunits
return this
/**
* sets the maximum number of tasks in the work queue.
* <p/>
* use <tt>-1</tt> or <tt>integer.max_value</tt> for an unbounded queue
*
* @param maxqueuesize the max queue size
* @return the builder
*/
public threadsdefinition maxqueuesize int maxqueuesize
setmaxqueuesize maxqueuesize
return this
/**
* sets the handler for tasks which cannot be executed by the thread pool.
*
* @param rejectedpolicy  the policy for the handler
* @return the builder
*/
public threadsdefinition rejectedpolicy threadpoolrejectedpolicy rejectedpolicy
setrejectedpolicy rejectedpolicy
return this
/**
* sets the thread name to use.
*
* @param threadname the thread name
* @return the builder
*/
public threadsdefinition threadname string threadname
setthreadname threadname
return this
/**
* whether or not the caller should run the task when it was rejected by the thread pool.
* <p/>
* is by default <tt>true</tt>
*
* @param callerrunswhenrejected whether or not the caller should run
* @return the builder
*/
public threadsdefinition callerrunswhenrejected boolean callerrunswhenrejected
setcallerrunswhenrejected callerrunswhenrejected
return this
public executorservice getexecutorservice
return executorservice
public void setexecutorservice executorservice executorservice
this executorservice   executorservice
public string getexecutorserviceref
return executorserviceref
public void setexecutorserviceref string executorserviceref
this executorserviceref   executorserviceref
public integer getpoolsize
return poolsize
public void setpoolsize integer poolsize
this poolsize   poolsize
public integer getmaxpoolsize
return maxpoolsize
public void setmaxpoolsize integer maxpoolsize
this maxpoolsize   maxpoolsize
public long getkeepalivetime
return keepalivetime
public void setkeepalivetime long keepalivetime
this keepalivetime   keepalivetime
public timeunit gettimeunit
return timeunit
public void settimeunit timeunit timeunit
this timeunit   timeunit
public integer getmaxqueuesize
return maxqueuesize
public void setmaxqueuesize integer maxqueuesize
this maxqueuesize   maxqueuesize
public string getthreadname
return threadname
public void setthreadname string threadname
this threadname   threadname
public threadpoolrejectedpolicy getrejectedpolicy
return rejectedpolicy
public void setrejectedpolicy threadpoolrejectedpolicy rejectedpolicy
this rejectedpolicy   rejectedpolicy
public boolean getcallerrunswhenrejected
return callerrunswhenrejected
public void setcallerrunswhenrejected boolean callerrunswhenrejected
this callerrunswhenrejected   callerrunswhenrejected