/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel component cometd
import java net url
import java util arraylist
import java util linkedhashmap
import java util list
import java util map
import javax net ssl sslcontext
import org apache camel endpoint
import org apache camel runtimecamelexception
import org apache camel impl defaultcomponent
import org apache camel util jsse sslcontextparameters
import org cometd bayeux server bayeuxserver
import org cometd bayeux server securitypolicy
import org cometd server bayeuxserverimpl
import org cometd server cometdservlet
import org eclipse jetty http ssl sslcontextfactory
import org eclipse jetty server connector
import org eclipse jetty server server
import org eclipse jetty server handler contexthandlercollection
import org eclipse jetty server nio selectchannelconnector
import org eclipse jetty server session hashsessionmanager
import org eclipse jetty server session sessionhandler
import org eclipse jetty server ssl sslconnector
import org eclipse jetty server ssl sslselectchannelconnector
import org eclipse jetty servlet servletcontexthandler
import org eclipse jetty servlet servletholder
import org eclipse jetty util resource resource
import org slf4j logger
import org slf4j loggerfactory
/**
* component for jetty cometd
*/
public class cometdcomponent extends defaultcomponent
private static final transient logger log   loggerfactory getlogger cometdcomponent class
private final map<string  connectorref> connectors   new linkedhashmap<string  connectorref>
private server server
private string sslkeypassword
private string sslpassword
private string sslkeystore
private securitypolicy securitypolicy
private list<bayeuxserver extension> extensions
private sslcontextparameters sslcontextparameters
class connectorref
connector connector
cometdservlet servlet
int refcount
public connectorref connector connector  cometdservlet servlet
this connector   connector
this servlet   servlet
increment
}
public int increment
return   refcount
}
public int decrement
return   refcount
}
}
public cometdcomponent
}
@override
protected endpoint createendpoint string uri  string remaining  map<string  object> parameters  throws exception
setproperties this  parameters
return new cometdendpoint this  uri  remaining  parameters
}
/**
* connects the url specified on the endpoint to the specified processor.
*/
public void connect cometdproducerconsumer prodcon  throws exception
// make sure that there is a connector for the requested endpoint.
cometdendpoint endpoint    cometdendpoint  prodcon getendpoint
string connectorkey   endpoint getprotocol         endpoint geturi   gethost         endpoint getport
synchronized  connectors
connectorref connectorref   connectors get connectorkey
if  connectorref    null
connector connector
if    equals endpoint getprotocol
connector   getsslsocketconnector
} else {
connector   new selectchannelconnector
}
connector setport endpoint getport
connector sethost endpoint geturi   gethost
if    equalsignorecase endpoint geturi   gethost
log warn
}
getserver   addconnector connector
cometdservlet servlet   createservletforconnector connector  endpoint
connectorref   new connectorref connector  servlet
getserver   start
connectors put connectorkey  connectorref
} else {
connectorref increment
}
bayeuxserverimpl bayeux   connectorref servlet getbayeux
if  securitypolicy    null
bayeux setsecuritypolicy securitypolicy
}
if  extensions    null
for  bayeuxserver extension extension   extensions
bayeux addextension extension
}
}
prodcon setbayeux bayeux
}
}
/**
* disconnects the url specified on the endpoint from the specified
* processor.
*/
public void disconnect cometdproducerconsumer prodcon  throws exception
cometdendpoint endpoint   prodcon getendpoint
string connectorkey   endpoint getprotocol         endpoint geturi   gethost         endpoint getport
synchronized  connectors
connectorref connectorref   connectors get connectorkey
if  connectorref    null
if  connectorref decrement      0
getserver   removeconnector connectorref connector
connectorref.connector.stop();
connectors remove connectorkey
}
}
}
}
protected cometdservlet createservletforconnector connector connector  cometdendpoint endpoint  throws exception
cometdservlet servlet   new cometdservlet
servletcontexthandler context   new servletcontexthandler server     servletcontexthandler no_security   servletcontexthandler no_sessions
context setconnectornames new string connector getname
servletholder holder   new servletholder
holder setservlet servlet
holder setasyncsupported true
// use baseresource to pass as a parameter the url
// pointing to by example classpath:webapp
if  endpoint getbaseresource      null
string resources   endpoint getbaseresource   split
if  log isdebugenabled
log debug     resources       resources
}
if  resources equals
context setbaseresource resource newresource resources
else if  resources equals
// create a url handler using classpath protocol
url url   this getcamelcontext   getclassresolver   loadresourceasurl resources
context setbaseresource resource newresource url
}
}
context addservlet holder
context.addservlet("org.eclipse.jetty.servlet.defaultservlet", "/");
context.setsessionhandler(new sessionhandler(new hashsessionmanager()));
holder.setinitparameter("timeout", integer.tostring(endpoint.gettimeout()));
holder.setinitparameter("interval", integer.tostring(endpoint.getinterval()));
holder.setinitparameter("maxinterval", integer.tostring(endpoint.getmaxinterval()));
holder.setinitparameter("multiframeinterval", integer.tostring(endpoint.getmultiframeinterval()));
holder.setinitparameter("jsoncommented", boolean.tostring(endpoint.isjsoncommented()));
holder.setinitparameter("loglevel", integer.tostring(endpoint.getloglevel()));
return servlet;
}
protected sslconnector getsslsocketconnector() {
sslselectchannelconnector sslsocketconnector = null;
if (sslcontextparameters != null) {
sslcontextfactory sslcontextfactory = new cometdcomponentsslcontextfactory();
try {
sslcontextfactory.setsslcontext(sslcontextparameters.createsslcontext());
} catch (exception e) {
throw new runtimecamelexception("error initiating sslcontext.", e);
}
sslsocketconnector = new sslselectchannelconnector(sslcontextfactory);
} else {
sslsocketconnector = new sslselectchannelconnector();
// with default null values, jetty ssl system properties
// and console will be read by jetty implementation
sslsocketconnector.getsslcontextfactory().setkeymanagerpassword(sslpassword);
sslsocketconnector.getsslcontextfactory().setkeystorepassword(sslkeypassword);
if (sslkeystore != null) {
sslsocketconnector.getsslcontextfactory().setkeystore(sslkeystore);
}
}
return sslsocketconnector;
}
public server getserver() throws exception {
if (server == null) {
server = createserver();
}
return server;
}
public void setserver(server server) {
this.server = server;
}
public string getsslkeypassword() {
return sslkeypassword;
}
public string getsslpassword() {
return sslpassword;
}
public string getsslkeystore() {
return sslkeystore;
}
public void setsslkeypassword(string sslkeypassword) {
this.sslkeypassword = sslkeypassword;
}
public void setsslpassword(string sslpassword) {
this.sslpassword = sslpassword;
}
public void setsslkeystore(string sslkeystore) {
this.sslkeystore = sslkeystore;
}
public void setsecuritypolicy(securitypolicy securitypolicy) {
this.securitypolicy = securitypolicy;
}
public securitypolicy getsecuritypolicy() {
return securitypolicy;
}
public list<bayeuxserver.extension> getextensions() {
return extensions;
}
public void setextensions(list<bayeuxserver.extension> extensions) {
this.extensions = extensions;
}
public void addextension(bayeuxserver.extension extension) {
if (extensions == null) {
extensions = new arraylist<bayeuxserver.extension>();
}
extensions.add(extension);
}
public sslcontextparameters getsslcontextparameters() {
return sslcontextparameters;
}
public void setsslcontextparameters(sslcontextparameters sslcontextparameters) {
this.sslcontextparameters = sslcontextparameters;
}
protected server createserver() throws exception {
server server = new server();
contexthandlercollection collection = new contexthandlercollection();
server.sethandler(collection);
return server;
}
@override
protected void dostop() throws exception {
for (connectorref connectorref : connectors.values()) {
connectorref.connector.stop();
}
connectors.clear();
if (server != null) {
server.stop();
}
super.dostop();
}
@override
protected void dostart() throws exception {
super.dostart();
}
/**
* override the key/trust store check method as it does not account for a factory that has
* a pre-configured {@link sslcontext}.
*/
private static final class cometdcomponentsslcontextfactory extends sslcontextfactory
@override
public void checkkeystore
}
}
}