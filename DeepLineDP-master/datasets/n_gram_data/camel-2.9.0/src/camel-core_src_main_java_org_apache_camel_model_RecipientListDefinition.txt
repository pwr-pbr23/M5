/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel model
import java util arraylist
import java util list
import java util concurrent executorservice
import javax xml bind annotation xmlaccesstype
import javax xml bind annotation xmlaccessortype
import javax xml bind annotation xmlattribute
import javax xml bind annotation xmlrootelement
import javax xml bind annotation xmltransient
import org apache camel expression
import org apache camel processor
import org apache camel model language expressiondefinition
import org apache camel processor evaluateexpressionprocessor
import org apache camel processor pipeline
import org apache camel processor recipientlist
import org apache camel processor aggregate aggregationstrategy
import org apache camel processor aggregate uselatestaggregationstrategy
import org apache camel spi executorservicemanager
import org apache camel spi routecontext
import org apache camel util camelcontexthelper
/**
* represents an xml &lt;recipientlist/&gt; element
*
* @version
*/
@xmlrootelement name
@xmlaccessortype xmlaccesstype field
public class recipientlistdefinition<type extends processordefinition> extends nooutputexpressionnode implements executorserviceawaredefinition<recipientlistdefinition>
@xmltransient
private aggregationstrategy aggregationstrategy
@xmltransient
private executorservice executorservice
@xmlattribute
private string delimiter
@xmlattribute
private boolean parallelprocessing
@xmlattribute
private string strategyref
@xmlattribute
private string executorserviceref
@xmlattribute
private boolean stoponexception
@xmlattribute
private boolean ignoreinvalidendpoints
@xmlattribute
private boolean streaming
@xmlattribute
private long timeout
@xmlattribute
private string onprepareref
@xmltransient
private processor onprepare
@xmlattribute
private boolean shareunitofwork
public recipientlistdefinition
public recipientlistdefinition expressiondefinition expression
super expression
public recipientlistdefinition expression expression
super expression
@override
public string tostring
return     getexpression
@override
public string getshortname
return
@override
public string getlabel
return     getexpression
@override
public processor createprocessor routecontext routecontext  throws exception
final expression expression   getexpression   createexpression routecontext
recipientlist answer
if  delimiter    null
answer   new recipientlist routecontext getcamelcontext    expression  delimiter
else
answer   new recipientlist routecontext getcamelcontext    expression
answer setaggregationstrategy createaggregationstrategy routecontext
answer setparallelprocessing isparallelprocessing
answer setstreaming isstreaming
answer setshareunitofwork isshareunitofwork
if  onprepareref    null
onprepare   camelcontexthelper mandatorylookup routecontext getcamelcontext    onprepareref  processor class
if  onprepare    null
answer setonprepare onprepare
if  stoponexception    null
answer setstoponexception isstoponexception
if  ignoreinvalidendpoints    null
answer setignoreinvalidendpoints ignoreinvalidendpoints
if  gettimeout      null
answer settimeout gettimeout
if  isparallelprocessing      executorservice    null
string ref   this executorserviceref    null ? this executorserviceref
executorservicemanager manager   routecontext getcamelcontext   getexecutorservicemanager
executorservice   manager newdefaultthreadpool this  ref
answer setexecutorservice executorservice
long timeout   gettimeout      null ? gettimeout     0
if  timeout > 0     isparallelprocessing
throw new illegalargumentexception
// create a pipeline with two processors
// the first is the eval processor which evaluates the expression to use
// the second is the recipient list
list<processor> pipe   new arraylist<processor> 2
// the eval processor must be wrapped in error handler, so in case there was an
// error during evaluation, the error handler can deal with it
// the recipient list is not in error handler, as its has its own special error handling
// when sending to the recipients individually
processor evalprocessor   new evaluateexpressionprocessor expression
evalprocessor   super wrapinerrorhandler routecontext  evalprocessor
pipe add evalprocessor
pipe add answer
// wrap in nested pipeline so this appears as one processor
// (threads definition does this as well)
return new pipeline routecontext getcamelcontext    pipe
@override
public string tostring
return     expression
private aggregationstrategy createaggregationstrategy routecontext routecontext
if  aggregationstrategy    null    strategyref    null
aggregationstrategy   routecontext lookup strategyref  aggregationstrategy class
if  aggregationstrategy    null
// fallback to use latest
aggregationstrategy   new uselatestaggregationstrategy
return aggregationstrategy
// fluent api
// -------------------------------------------------------------------------
@override
@suppresswarnings
public type end
// allow end() to return to previous type so you can continue in the dsl
return  type  super end
/**
* set the aggregationstrategy
*
* @param aggregationstrategy the strategy
* @return the builder
*/
public recipientlistdefinition<type> aggregationstrategy aggregationstrategy aggregationstrategy
setaggregationstrategy aggregationstrategy
return this
/**
* set the aggregationstrategy
*
* @param aggregationstrategyref a reference to a strategy to lookup
* @return the builder
*/
public recipientlistdefinition<type> aggregationstrategyref string aggregationstrategyref
setstrategyref aggregationstrategyref
return this
/**
* ignore the invalidate endpoint exception when try to create a producer with that endpoint
*
* @return the builder
*/
public recipientlistdefinition<type> ignoreinvalidendpoints
setignoreinvalidendpoints true
return this
/**
* doing the recipient list work in parallel
*
* @return the builder
*/
public recipientlistdefinition<type> parallelprocessing
setparallelprocessing true
return this
/**
* doing the recipient list work in streaming model
*
* @return the builder
*/
public recipientlistdefinition<type> streaming
setstreaming true
return this
/**
* will now stop further processing if an exception or failure occurred during processing of an
* {@link org.apache.camel.exchange} and the caused exception will be thrown.
* <p/>
* will also stop if processing the exchange failed (has a fault message) or an exception
* was thrown and handled by the error handler (such as using onexception). in all situations
* the recipient list will stop further processing. this is the same behavior as in pipeline, which
* is used by the routing engine.
* <p/>
* the default behavior is to <b>not</b> stop but continue processing till the end
*
* @return the builder
*/
public recipientlistdefinition<type> stoponexception
setstoponexception true
return this
public recipientlistdefinition<type> executorservice executorservice executorservice
setexecutorservice executorservice
return this
public recipientlistdefinition<type> executorserviceref string executorserviceref
setexecutorserviceref executorserviceref
return this
/**
* uses the {@link processor} when preparing the {@link org.apache.camel.exchange} to be used send.
* this can be used to deep-clone messages that should be send, or any custom logic needed before
* the exchange is send.
*
* @param onprepare the processor
* @return the builder
*/
public recipientlistdefinition<type> onprepare processor onprepare
setonprepare onprepare
return this
/**
* uses the {@link processor} when preparing the {@link org.apache.camel.exchange} to be send.
* this can be used to deep-clone messages that should be send, or any custom logic needed before
* the exchange is send.
*
* @param onprepareref reference to the processor to lookup in the {@link org.apache.camel.spi.registry}
* @return the builder
*/
public recipientlistdefinition<type> onprepareref string onprepareref
setonprepareref onprepareref
return this
/**
* sets a timeout value in millis to use when using parallelprocessing.
*
* @param timeout timeout in millis
* @return the builder
*/
public recipientlistdefinition<type> timeout long timeout
settimeout timeout
return this
/**
* shares the {@link org.apache.camel.spi.unitofwork} with the parent and each of the sub messages.
*
* @return the builder.
* @see org.apache.camel.spi.subunitofwork
*/
public recipientlistdefinition<type> shareunitofwork
setshareunitofwork true
return this
// properties
//-------------------------------------------------------------------------
public string getdelimiter
return delimiter
public void setdelimiter string delimiter
this delimiter   delimiter
public boolean getparallelprocessing
return parallelprocessing
public void setparallelprocessing boolean parallelprocessing
this parallelprocessing   parallelprocessing
public boolean isparallelprocessing
return parallelprocessing    null    parallelprocessing
public string getstrategyref
return strategyref
public void setstrategyref string strategyref
this strategyref   strategyref
public string getexecutorserviceref
return executorserviceref
public void setexecutorserviceref string executorserviceref
this executorserviceref   executorserviceref
public boolean getignoreinvalidendpoints
return ignoreinvalidendpoints
public void setignoreinvalidendpoints boolean ignoreinvalidendpoints
this ignoreinvalidendpoints   ignoreinvalidendpoints
public boolean isignoreinvalidendpoints
return ignoreinvalidendpoints    null    ignoreinvalidendpoints
public boolean getstoponexception
return stoponexception
public void setstoponexception boolean stoponexception
this stoponexception   stoponexception
public boolean isstoponexception
return stoponexception    null    stoponexception
public aggregationstrategy getaggregationstrategy
return aggregationstrategy
public void setaggregationstrategy aggregationstrategy aggregationstrategy
this aggregationstrategy   aggregationstrategy
public executorservice getexecutorservice
return executorservice
public void setexecutorservice executorservice executorservice
this executorservice   executorservice
public boolean getstreaming
return streaming
public void setstreaming boolean streaming
this streaming   streaming
public boolean isstreaming
return streaming    null    streaming
public long gettimeout
return timeout
public void settimeout long timeout
this timeout   timeout
public string getonprepareref
return onprepareref
public void setonprepareref string onprepareref
this onprepareref   onprepareref
public processor getonprepare
return onprepare
public void setonprepare processor onprepare
this onprepare   onprepare
public boolean getshareunitofwork
return shareunitofwork
public void setshareunitofwork boolean shareunitofwork
this shareunitofwork   shareunitofwork
public boolean isshareunitofwork
return shareunitofwork    null    shareunitofwork