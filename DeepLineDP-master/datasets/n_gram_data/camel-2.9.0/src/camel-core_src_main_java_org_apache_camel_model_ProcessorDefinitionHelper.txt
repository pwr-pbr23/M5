/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel model
import java util arraylist
import java util iterator
import java util list
import java util concurrent executorservice
import java util concurrent scheduledexecutorservice
import org apache camel nosuchbeanexception
import org apache camel spi executorservicemanager
import org apache camel spi routecontext
import org apache camel spi threadpoolprofile
import org apache camel util objecthelper
/**
* helper class for processordefinition and the other model classes.
*/
public final class processordefinitionhelper
private processordefinitionhelper
/**
* looks for the given type in the list of outputs and recurring all the children as well.
*
* @param outputs  list of outputs, can be null or empty.
* @param type     the type to look for
* @return         the found definitions, or <tt>null</tt> if not found
*/
public static <t> iterator<t> filtertypeinoutputs list<processordefinition> outputs  class<t> type
list<t> found   new arraylist<t>
dofindtype outputs  type  found
return found iterator
/**
* looks for the given type in the list of outputs and recurring all the children as well.
* will stop at first found and return it.
*
* @param outputs  list of outputs, can be null or empty.
* @param type     the type to look for
* @return         the first found type, or <tt>null</tt> if not found
*/
public static <t> t findfirsttypeinoutputs list<processordefinition> outputs  class<t> type
list<t> found   new arraylist<t>
dofindtype outputs  type  found
if  found isempty
return null
return found iterator   next
/**
* is the given child the first in the outputs from the parent?
*
* @param parenttype the type the parent must be
* @param node the node
* @return <tt>true</tt> if first child, <tt>false</tt> otherwise
*/
public static boolean isfirstchildoftype class<?> parenttype  processordefinition<?> node
if  node    null    node getparent      null
return false
if  node getparent   getoutputs   isempty
return false
if    node getparent   getclass   equals parenttype
return false
return node getparent   getoutputs   get 0  equals node
/**
* is the given node parent(s) of the given type
* @param parenttype   the parent type
* @param node         the current node
* @param recursive    whether or not to check grand parent(s) as well
* @return <tt>true</tt> if parent(s) is of given type, <tt>false</tt> otherwise
*/
public static boolean isparentoftype class<?> parenttype  processordefinition<?> node  boolean recursive
if  node    null    node getparent      null
return false
if  parenttype isassignablefrom node getparent   getclass
return true
else if  recursive
// recursive up the tree of parents
return isparentoftype parenttype  node getparent    true
else
// no match
return false
/**
* gets the route definition the given node belongs to.
*
* @param node the node
* @return the route, or <tt>null</tt> if not possible to find
*/
public static routedefinition getroute processordefinition<?> node
if  node    null
return null
processordefinition def   node
// drill to the top
while  def    null    def getparent      null
def   def getparent
if  def instanceof routedefinition
return  routedefinition  def
else
// not found
return null
@suppresswarnings
private static <t> void dofindtype list<processordefinition> outputs  class<t> type  list<t> found
if  outputs    null    outputs isempty
return
for  processordefinition out   outputs
if  type isinstance out
found add  t out
// send is much common
if  out instanceof senddefinition
senddefinition send    senddefinition  out
list<processordefinition> children   send getoutputs
dofindtype children  type  found
// special for choice
if  out instanceof choicedefinition
choicedefinition choice    choicedefinition  out
for  whendefinition when   choice getwhenclauses
list<processordefinition> children   when getoutputs
dofindtype children  type  found
// otherwise is optional
if  choice getotherwise      null
list<processordefinition> children   choice getotherwise   getoutputs
dofindtype children  type  found
// try children as well
list<processordefinition> children   out getoutputs
dofindtype children  type  found
/**
* is there any outputs in the given list.
* <p/>
* is used for check if the route output has any real outputs (non abstracts)
*
* @param outputs           the outputs
* @param excludeabstract   whether or not to exclude abstract outputs (e.g. skip onexception etc.)
* @return <tt>true</tt> if has outputs, otherwise <tt>false</tt> is returned
*/
@suppresswarnings
public static boolean hasoutputs list<processordefinition> outputs  boolean excludeabstract
if  outputs    null    outputs isempty
return false
if   excludeabstract
return  outputs isempty
for  processordefinition output   outputs
if  output instanceof transacteddefinition    output instanceof policydefinition
// special for those as they wrap entire output, so we should just check its output
return hasoutputs output getoutputs    excludeabstract
if   output isabstract
return true
return false
/**
* will lookup and get the configured {@link java.util.concurrent.executorservice} from the given definition.
* <p/>
* this method will lookup for configured thread pool in the following order
* <ul>
*   <li>from the definition if any explicit configured executor service.</li>
*   <li>from the {@link org.apache.camel.spi.registry} if found</li>
*   <li>from the known list of {@link org.apache.camel.spi.threadpoolprofile threadpoolprofile(s)}.</li>
*   <li>if none found, then <tt>null</tt> is returned.</li>
* </ul>
* the various {@link executorserviceawaredefinition} should use this helper method to ensure they support
* configured executor services in the same coherent way.
*
* @param routecontext   the route context
* @param name           name which is appended to the thread name, when the {@link java.util.concurrent.executorservice}
*                       is created based on a {@link org.apache.camel.spi.threadpoolprofile}.
* @param definition     the node definition which may leverage executor service.
* @return the configured executor service, or <tt>null</tt> if none was configured.
* @throws nosuchbeanexception is thrown if lookup of executor service in {@link org.apache.camel.spi.registry} was not found
*/
public static executorservice getconfiguredexecutorservice routecontext routecontext  string name
executorserviceawaredefinition definition  throws nosuchbeanexception
executorservicemanager manager   routecontext getcamelcontext   getexecutorservicemanager
objecthelper notnull manager     routecontext getcamelcontext
// prefer to use explicit configured executor on the definition
if  definition getexecutorservice      null
return definition getexecutorservice
else if  definition getexecutorserviceref      null
// lookup in registry first and use existing thread pool if exists
executorservice answer   routecontext getcamelcontext   getregistry   lookup definition getexecutorserviceref    executorservice class
if  answer    null
// then create a thread pool assuming the ref is a thread pool profile id
answer   manager newthreadpool definition  name  definition getexecutorserviceref
if  answer    null
throw new nosuchbeanexception definition getexecutorserviceref
return answer
return null
/**
* will lookup and get the configured {@link java.util.concurrent.scheduledexecutorservice} from the given definition.
* <p/>
* this method will lookup for configured thread pool in the following order
* <ul>
*   <li>from the definition if any explicit configured executor service.</li>
*   <li>from the {@link org.apache.camel.spi.registry} if found</li>
*   <li>from the known list of {@link org.apache.camel.spi.threadpoolprofile threadpoolprofile(s)}.</li>
*   <li>if none found, then <tt>null</tt> is returned.</li>
* </ul>
* the various {@link executorserviceawaredefinition} should use this helper method to ensure they support
* configured executor services in the same coherent way.
*
* @param routecontext   the rout context
* @param name           name which is appended to the thread name, when the {@link java.util.concurrent.executorservice}
*                       is created based on a {@link org.apache.camel.spi.threadpoolprofile}.
* @param definition     the node definition which may leverage executor service.
* @return the configured executor service, or <tt>null</tt> if none was configured.
* @throws illegalargumentexception is thrown if the found instance is not a scheduledexecutorservice type.
* @throws nosuchbeanexception is thrown if lookup of executor service in {@link org.apache.camel.spi.registry} was not found
*/
public static scheduledexecutorservice getconfiguredscheduledexecutorservice routecontext routecontext  string name
executorserviceawaredefinition definition  throws illegalargumentexception  nosuchbeanexception
executorservicemanager manager   routecontext getcamelcontext   getexecutorservicemanager
objecthelper notnull manager     routecontext getcamelcontext
// prefer to use explicit configured executor on the definition
if  definition getexecutorservice      null
executorservice executorservice   definition getexecutorservice
if  executorservice instanceof scheduledexecutorservice
return  scheduledexecutorservice  executorservice
throw new illegalargumentexception     definition getexecutorserviceref
else if  definition getexecutorserviceref      null
scheduledexecutorservice answer   routecontext getcamelcontext   getregistry   lookup definition getexecutorserviceref    scheduledexecutorservice class
if  answer    null
// then create a thread pool assuming the ref is a thread pool profile id
threadpoolprofile profile   manager getthreadpoolprofile definition getexecutorserviceref
if  profile    null
answer   manager newscheduledthreadpool definition  name  profile
if  answer    null
throw new nosuchbeanexception definition getexecutorserviceref
return answer
return null