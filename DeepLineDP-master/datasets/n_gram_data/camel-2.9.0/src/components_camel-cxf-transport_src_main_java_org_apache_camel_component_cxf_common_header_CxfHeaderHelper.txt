/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel component cxf common header
import java util arraylist
import java util list
import java util map
import java util treemap
import org apache camel exchange
import org apache camel spi headerfilterstrategy
import org apache cxf endpoint client
import org apache cxf helpers castutils
import org apache cxf message message
/**
* utility class to propagate headers to and from cxf message.
*
* @version
*/
public final class cxfheaderhelper
/**
* utility class does not have public constructor
*/
private cxfheaderhelper
/**
* propagates camel headers to cxf message.
*
* @param strategy header filter strategy
* @param headers camel header
* @param message cxf message
* @param exchange provides context for filtering
*/
public static void propagatecameltocxf headerfilterstrategy strategy
map<string  object> headers  message message  exchange exchange
map<string  list<string>> cxfheaders
castutils cast  map message get message protocol_headers
if  cxfheaders    null
// use a treemap to keep ordering and ignore key case
cxfheaders   new treemap<string  list<string>> string case_insensitive_order
message put message protocol_headers  cxfheaders
for  map entry<string  object> entry   headers entryset
if  strategy    null
strategy applyfiltertocamelheaders entry getkey    entry getvalue    exchange
if  exchange content_type equals entry getkey
message put message content_type  entry getvalue
else if  client request_context equals entry getkey
client response_context equals entry getkey
message response_code equals entry getkey
message put entry getkey    entry getvalue
else
list<string> listvalue   new arraylist<string>
listvalue add entry getvalue   tostring
cxfheaders put entry getkey    listvalue
public static void propagatecxftocamel headerfilterstrategy strategy
message message  map<string  object> headers  exchange exchange
if  strategy    null
return
// copy the cxf protocol headers to the camel headers
map<string  list<string>> cxfheaders
castutils cast  map message get message protocol_headers
if  cxfheaders    null
for  map entry<string  list<string>> entry   cxfheaders entryset
if   strategy applyfiltertoexternalheaders entry getkey    entry getvalue    exchange
headers put entry getkey    entry getvalue   get 0
// propagate content type
string key   message content_type
object value   message get key
if  value    null     strategy applyfiltertoexternalheaders key  value  exchange
headers put exchange content_type  value
// propagate request context
key   client request_context
value   message get key
if  value    null     strategy applyfiltertoexternalheaders key  value  exchange
headers put key  value
// propagate response context
key   client response_context
value   message get key
if  value    null     strategy applyfiltertoexternalheaders key  value  exchange
headers put key  value
// propagate response code
key   message response_code
value   message get key
if  value    null     strategy applyfiltertoexternalheaders key  value  exchange
headers put exchange http_response_code  value