/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel model
import java util concurrent executorservice
import java util concurrent scheduledexecutorservice
import javax xml bind annotation xmlaccesstype
import javax xml bind annotation xmlaccessortype
import javax xml bind annotation xmlattribute
import javax xml bind annotation xmlrootelement
import javax xml bind annotation xmltransient
import org apache camel expression
import org apache camel processor
import org apache camel builder expressionbuilder
import org apache camel model language expressiondefinition
import org apache camel processor throttler
import org apache camel spi routecontext
import org apache camel util objecthelper
/**
* represents an xml &lt;throttle/&gt; element
*
* @version
*/
@xmlrootelement name
@xmlaccessortype xmlaccesstype field
public class throttledefinition extends expressionnode implements executorserviceawaredefinition<throttledefinition>
// todo: camel 3.0 should not support outputs
@xmltransient
private executorservice executorservice
@xmlattribute
private string executorserviceref
@xmlattribute
private long timeperiodmillis
@xmlattribute
private boolean asyncdelayed
@xmlattribute
private boolean callerrunswhenrejected
public throttledefinition
public throttledefinition expression maximumrequestsperperiod
super maximumrequestsperperiod
@override
public string tostring
return     description         getoutputs
protected string description
return getexpression         gettimeperiodmillis
@override
public string getshortname
return
@override
public string getlabel
return     description
@override
public processor createprocessor routecontext routecontext  throws exception
processor childprocessor   this createchildprocessor routecontext  true
scheduledexecutorservice scheduled   null
if  getasyncdelayed      null    getasyncdelayed
scheduled   processordefinitionhelper getconfiguredscheduledexecutorservice routecontext     this
if  scheduled    null
scheduled   routecontext getcamelcontext   getexecutorservicemanager   newdefaultscheduledthreadpool this
// should be default 1000 millis
long period   gettimeperiodmillis      null ? gettimeperiodmillis     1000l
expression maxrequestsexpression   createmaxrequestsperperiodexpression routecontext
throttler answer   new throttler childprocessor  maxrequestsexpression  period  scheduled
if  getasyncdelayed      null
answer setasyncdelayed getasyncdelayed
if  getcallerrunswhenrejected      null
// should be true by default
answer setcallerrunswhenrejected true
else
answer setcallerrunswhenrejected getcallerrunswhenrejected
return answer
private expression createmaxrequestsperperiodexpression routecontext routecontext
if  getexpression      null
if  objecthelper isnotempty getexpression   getexpression       getexpression   getexpressionvalue      null
return getexpression   createexpression routecontext
return null
// fluent api
// -------------------------------------------------------------------------
/**
* sets the time period during which the maximum request count is valid for
*
* @param timeperiodmillis  period in millis
* @return the builder
*/
public throttledefinition timeperiodmillis long timeperiodmillis
settimeperiodmillis timeperiodmillis
return this
/**
* sets the time period during which the maximum request count per period
*
* @param maximumrequestsperperiod  the maximum request count number per time period
* @return the builder
*/
public throttledefinition maximumrequestsperperiod long maximumrequestsperperiod
setexpression new expressiondefinition expressionbuilder constantexpression maximumrequestsperperiod
return this
/**
* whether or not the caller should run the task when it was rejected by the thread pool.
* <p/>
* is by default <tt>true</tt>
*
* @param callerrunswhenrejected whether or not the caller should run
* @return the builder
*/
public throttledefinition callerrunswhenrejected boolean callerrunswhenrejected
setcallerrunswhenrejected callerrunswhenrejected
return this
/**
* enables asynchronous delay which means the thread will <b>noy</b> block while delaying.
*
* @return the builder
*/
public throttledefinition asyncdelayed
setasyncdelayed true
return this
public throttledefinition executorservice executorservice executorservice
setexecutorservice executorservice
return this
public throttledefinition executorserviceref string executorserviceref
setexecutorserviceref executorserviceref
return this
// properties
// -------------------------------------------------------------------------
public long gettimeperiodmillis
return timeperiodmillis
public void settimeperiodmillis long timeperiodmillis
this timeperiodmillis   timeperiodmillis
public boolean getasyncdelayed
return asyncdelayed
public void setasyncdelayed boolean asyncdelayed
this asyncdelayed   asyncdelayed
public boolean getcallerrunswhenrejected
return callerrunswhenrejected
public void setcallerrunswhenrejected boolean callerrunswhenrejected
this callerrunswhenrejected   callerrunswhenrejected
public executorservice getexecutorservice
return executorservice
public void setexecutorservice executorservice executorservice
this executorservice   executorservice
public string getexecutorserviceref
return executorserviceref
public void setexecutorserviceref string executorserviceref
this executorserviceref   executorserviceref