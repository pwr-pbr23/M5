/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel util
import java util arraylist
import java util list
import java util regex matcher
import java util regex pattern
/**
* helper for camel ognl (object-graph navigation language) expressions.
*
* @version
*/
public final class ognlhelper
private static final pattern index_pattern   pattern compile
private ognlhelper
/**
* tests whether or not the given string is a camel ognl expression.
* <p/>
* an expression is considered an ognl expression when it contains either one of the following chars: . or [
*
* @param expression  the string
* @return <tt>true</tt> if a camel ognl expression, otherwise <tt>false</tt>.
*/
public static boolean isvalidognlexpression string expression
if  objecthelper isempty expression
return false
// the brackets should come in a pair
int bracketbegin   stringhelper countchar expression
int bracketend   stringhelper countchar expression
if  bracketbegin > 0    bracketend > 0
return bracketbegin    bracketend
return expression contains
public static boolean isinvalidvalidognlexpression string expression
if  objecthelper isempty expression
return false
if   expression contains        expression contains        expression contains
return false
// the brackets should come in pair
int bracketbegin   stringhelper countchar expression
int bracketend   stringhelper countchar expression
if  bracketbegin > 0    bracketend > 0
return bracketbegin    bracketend
// check for double dots
if  expression contains
return true
return false
/**
* tests whether or not the given camel ognl expression is using the elvis operator or not.
*
* @param ognlexpression the camel ognl expression
* @return <tt>true</tt> if the elvis operator is used, otherwise <tt>false</tt>.
*/
public static boolean isnullsafeoperator string ognlexpression
if  objecthelper isempty ognlexpression
return false
return ognlexpression startswith
/**
* removes any leading operators from the camel ognl expression.
* <p/>
* will remove any leading of the following chars: ? or .
*
* @param ognlexpression  the camel ognl expression
* @return the camel ognl expression without any leading operators.
*/
public static string removeleadingoperators string ognlexpression
if  objecthelper isempty ognlexpression
return ognlexpression
if  ognlexpression startswith
ognlexpression   ognlexpression substring 1
if  ognlexpression startswith
ognlexpression   ognlexpression substring 1
return ognlexpression
/**
* removes any trailing operators from the camel ognl expression.
*
* @param ognlexpression  the camel ognl expression
* @return the camel ognl expression without any trailing operators.
*/
public static string removetrailingoperators string ognlexpression
if  objecthelper isempty ognlexpression
return ognlexpression
if  ognlexpression contains
return objecthelper before ognlexpression
return ognlexpression
public static string removeoperators string ognlexpression
return removeleadingoperators removetrailingoperators ognlexpression
public static keyvalueholder<string  string> isognlindex string ognlexpression
matcher matcher   index_pattern matcher ognlexpression
if  matcher matches
// to avoid empty strings as we want key/value to be null in such cases
string key   matcher group 1
if  objecthelper isempty key
key   null
// to avoid empty strings as we want key/value to be null in such cases
string value   matcher group 2
if  objecthelper isempty value
value   null
return new keyvalueholder<string  string> key  value
return null
/**
* regular expression with repeating groups is a pain to get right
* and then nobody understands the reg exp afterwards.
* so we use a bit ugly/low-level java code to split the ognl into methods.
*/
public static list<string> splitognl string ognl
list<string> methods   new arraylist<string>
stringbuilder sb   new stringbuilder
int j   0     j is used as counter per method
boolean squarebracket   false     special to keep track if we are inside a square bracket block    eg
for  int i   0  i < ognl length    i
char ch   ognl charat i
// special for starting a new method
if  j    0     j    1    ognl charat i   1
ch         ch         ch
sb append ch
// special if we are doing square bracket
if  ch
squarebracket   true
j       advance
else
if  ch          squarebracket
// only treat dot as a method separator if not inside a square bracket block
// as dots can be used in key names when accessing maps
// a dit denotes end of this method and a new method is to be invoked
string s   sb tostring
// reset sb
sb setlength 0
// pass over ? to the new method
if  s endswith
sb append
s   s substring 0  s length     1
// add the method
methods add s
// reset j to begin a new method
j   0
else if  ch
// append ending ] to method name
sb append ch
string s   sb tostring
// reset sb
sb setlength 0
// add the method
methods add s
// reset j to begin a new method
j   0
// no more square bracket
squarebracket   false
// and dont lose the char if its not an ] end marker (as we already added that)
if  ch
sb append ch
// only advance if already begun on the new method
if  j > 0
j
// add remainder in buffer when reached end of data
if  sb length   > 0
methods add sb tostring
return methods