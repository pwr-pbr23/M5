/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel util
import java io file
import java io fileinputstream
import java io fileoutputstream
import java io ioexception
import java nio channels filechannel
import java util iterator
import java util locale
import java util random
import java util stack
import org slf4j logger
import org slf4j loggerfactory
/**
* file utilities
*/
public final class fileutil
public static final int buffer_size   128   1024
private static final transient logger log   loggerfactory getlogger fileutil class
private static final int retry_sleep_millis   10
private static file defaulttempdir
private fileutil
/**
* normalizes the path to cater for windows and other platforms
*/
public static string normalizepath string path
if  path    null
return null
if  iswindows
// special handling for windows where we need to convert / to \\
return path replace
else
// for other systems make sure we use / as separators
return path replace
public static boolean iswindows
string osname   system getproperty    tolowercase locale us
return osname indexof    >  1
public static file createtempfile string prefix  string suffix  throws ioexception
return createtempfile prefix  suffix  null
public static file createtempfile string prefix  string suffix  file parentdir  throws ioexception
file parent    parentdir    null  ? getdefaulttempdir     parentdir
if  suffix    null
suffix
if  prefix    null
prefix
else if  prefix length   < 3
prefix   prefix
// create parent folder
parent mkdirs
return file createtempfile prefix  suffix  parent
/**
* strip any leading separators
*/
public static string stripleadingseparator string name
if  name    null
return null
while  name startswith       name startswith file separator
name   name substring 1
return name
/**
* does the name start with a leading separator
*/
public static boolean hasleadingseparator string name
if  name    null
return false
if  name startswith       name startswith file separator
return true
return false
/**
* strip first leading separator
*/
public static string stripfirstleadingseparator string name
if  name    null
return null
if  name startswith       name startswith file separator
name   name substring 1
return name
/**
* strip any trailing separators
*/
public static string striptrailingseparator string name
if  name    null
return null
while  name endswith       name endswith file separator
name   name substring 0  name length     1
return name
/**
* strips any leading paths
*/
public static string strippath string name
if  name    null
return null
int posunix   name lastindexof
int poswin   name lastindexof
int pos   math max posunix  poswin
if  pos     1
return name substring pos   1
return name
public static string stripext string name
if  name    null
return null
int pos   name lastindexof
if  pos     1
return name substring 0  pos
return name
/**
* returns only the leading path (returns <tt>null</tt> if no path)
*/
public static string onlypath string name
if  name    null
return null
int posunix   name lastindexof
int poswin   name lastindexof
int pos   math max posunix  poswin
if  pos > 0
return name substring 0  pos
else if  pos    0
// name is in the root path, so extract the path as the first char
return name substring 0  1
// no path in name
return null
/**
* compacts a path by stacking it and reducing <tt>..</tt>
*/
public static string compactpath string path
if  path    null
return null
// only normalize path if it contains .. as we want to avoid: path/../sub/../sub2 as this can leads to trouble
if  path indexof        1
return path
// only normalize if contains a path separator
if  path indexof file separator      1
return path
stack<string> stack   new stack<string>
string separatorregex   file separator
if  fileutil iswindows
separatorregex
string parts   path split separatorregex
for  string part   parts
if  part equals        stack isempty
// only pop if there is a previous path
stack pop
else
stack push part
// build path based on stack
stringbuilder sb   new stringbuilder
for  iterator<string> it   stack iterator    it hasnext
sb append it next
if  it hasnext
sb append file separator
return sb tostring
private static synchronized file getdefaulttempdir
if  defaulttempdir    null    defaulttempdir exists
return defaulttempdir
string s   system getproperty
file checkexists   new file s
if   checkexists exists
throw new runtimeexception
checkexists getabsolutepath
// create a sub folder with a random number
random ran   new random
int x   ran nextint 1000000
file f   new file s      x
while   f mkdir
x   ran nextint 1000000
f   new file s      x
defaulttempdir   f
// create shutdown hook to remove the temp dir
thread hook   new thread
@override
public void run
removedir defaulttempdir
runtime getruntime   addshutdownhook hook
return defaulttempdir
private static void removedir file d
string list   d list
if  list    null
list   new string
for  string s   list
file f   new file d  s
if  f isdirectory
removedir f
else
delete f
delete d
private static void delete file f
if   f delete
if  iswindows
system gc
try
thread sleep retry_sleep_millis
catch  interruptedexception ex
// ignore exception
if   f delete
f deleteonexit
/**
* renames a file.
*
* @param from the from file
* @param to   the to file
* @param copyanddeleteonrenamefail whether to fallback and do copy and delete, if renameto fails
* @return <tt>true</tt> if the file was renamed, otherwise <tt>false</tt>
* @throws java.io.ioexception is thrown if error renaming file
*/
public static boolean renamefile file from  file to  boolean copyanddeleteonrenamefail  throws ioexception
// do not try to rename non existing files
if   from exists
return false
// some os such as windows can have problem doing rename io operations so we may need to
// retry a couple of times to let it work
boolean renamed   false
int count   0
while   renamed    count < 3
if  log isdebugenabled      count > 0
log debug    new object count  from  to
renamed   from renameto to
if   renamed    count > 0
try
thread sleep 1000
catch  interruptedexception e
// ignore
count
// we could not rename using renameto, so lets fallback and do a copy/delete approach.
// for example if you move files between different file systems (linux -> windows etc.)
if   renamed    copyanddeleteonrenamefail
// now do a copy and delete as all rename attempts failed
log debug    from  to
copyfile from  to
if   deletefile from
throw new ioexception     from       to       from
else
renamed   true
if  log isdebugenabled      count > 0
log debug    new object count  from  to  renamed
return renamed
public static void copyfile file from  file to  throws ioexception
filechannel in   new fileinputstream from  getchannel
filechannel out   new fileoutputstream to  getchannel
try
if  log istraceenabled
log trace     in       out
long size   in size
long position   0
while  position < size
position    in transferto position  buffer_size  out
finally
iohelper close in  from getname    log
iohelper close out  to getname    log
public static boolean deletefile file file
// do not try to delete non existing files
if   file exists
return false
// some os such as windows can have problem doing delete io operations so we may need to
// retry a couple of times to let it work
boolean deleted   false
int count   0
while   deleted    count < 3
log debug    count  file
deleted   file delete
if   deleted    count > 0
try
thread sleep 1000
catch  interruptedexception e
// ignore
count
if  log isdebugenabled      count > 0
log debug    new object count  file  deleted
return deleted
/**
* is the given file an absolute file.
* <p/>
* will also work around issue on windows to consider files on windows starting with a \
* as absolute files. this makes the logic consistent across all os platforms.
*
* @param file  the file
* @return <tt>true</ff> if its an absolute path, <tt>false</tt> otherwise.
*/
public static boolean isabsolute file file
if  iswindows
// special for windows
string path   file getpath
if  path startswith file separator
return true
return file isabsolute