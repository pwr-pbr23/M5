/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel component quartz
import java io ioexception
import java io inputstream
import java net uri
import java text parseexception
import java util arraylist
import java util calendar
import java util date
import java util list
import java util map
import java util properties
import java util concurrent atomic atomicinteger
import org apache camel camelcontext
import org apache camel startuplistener
import org apache camel impl defaultcomponent
import org apache camel util introspectionsupport
import org apache camel util objecthelper
import org quartz crontrigger
import org quartz jobdetail
import org quartz scheduler
import org quartz schedulerexception
import org quartz schedulerfactory
import org quartz simpletrigger
import org quartz trigger
import org quartz impl stdschedulerfactory
import org slf4j logger
import org slf4j loggerfactory
/**
* a <a href="http://camel.apache.org/quartz.html">quartz component</a>
* <p/>
* for a brief tutorial on setting cron expression see
* <a href="http://www.opensymphony.com/quartz/wikidocs/crontriggers%20tutorial.html">quartz cron tutorial</a>.
*
* @version
*/
public class quartzcomponent extends defaultcomponent implements startuplistener
private static final transient logger log   loggerfactory getlogger quartzcomponent class
private final atomicinteger jobs   new atomicinteger
private scheduler scheduler
private final list<jobtoadd> jobstoadd   new arraylist<jobtoadd>
private schedulerfactory factory
private properties properties
private string propertiesfile
private int startdelayedseconds
private boolean autostartscheduler   true
private static final class jobtoadd
private final jobdetail job
private final trigger trigger
private jobtoadd jobdetail job  trigger trigger
this job   job
this trigger   trigger
public jobdetail getjob
return job
public trigger gettrigger
return trigger
public quartzcomponent
public quartzcomponent final camelcontext context
super context
@override
protected quartzendpoint createendpoint final string uri  final string remaining  final map<string  object> parameters  throws exception
// lets split the remaining into a group/name
uri u   new uri uri
string path   objecthelper after u getpath
string host   u gethost
string cron   getandremoveparameter parameters     string class
boolean firenow   getandremoveparameter parameters     boolean class  boolean false
// host can be null if the uri did contain invalid host characters such as an underscore
if  host    null
host   objecthelper before remaining
// group can be optional, if so set it to camel
string name
string group
if  objecthelper isnotempty path     objecthelper isnotempty host
group   host
name   path
else
group
name   host
map<string  object> triggerparameters   introspectionsupport extractproperties parameters
map<string  object> jobparameters   introspectionsupport extractproperties parameters
trigger trigger
boolean stateful     equals parameters get
// if we're starting up and not running in quartz clustered mode or not stateful then check for a name conflict.
if   isclustered       stateful
// check to see if this trigger already exists
trigger   getscheduler   gettrigger name  group
if  trigger    null
string msg       name       group
throw new illegalargumentexception msg
// create the trigger either cron or simple
if  objecthelper isnotempty cron
trigger   createcrontrigger cron
else
trigger   new simpletrigger
if  firenow
string intervalstring    string  triggerparameters get
if  intervalstring    null
long interval   long valueof intervalstring
trigger setstarttime new date system currenttimemillis     interval
quartzendpoint answer   new quartzendpoint uri  this
setproperties answer getjobdetail    jobparameters
setproperties trigger  triggerparameters
trigger setname name
trigger setgroup group
answer settrigger trigger
return answer
protected crontrigger createcrontrigger string path  throws parseexception
// replace + back to space so it's a cron expression
path   path replaceall
crontrigger cron   new crontrigger
cron setcronexpression path
return cron
public void oncamelcontextstarted camelcontext camelcontext  boolean alreadystarted  throws exception
if  scheduler    null
// register current camel context to scheduler so we can look it up when jobs is being triggered
scheduler getcontext   put quartzconstants quartz_camel_context       getcamelcontext   getname    getcamelcontext
// if not configure to auto start then don't start it
if   isautostartscheduler
log info
return
// only start scheduler when camelcontext have finished starting
startscheduler
@override
protected void dostart   throws exception
super dostart
if  scheduler    null
scheduler   getscheduler
@override
protected void dostop   throws exception
super dostop
if  scheduler    null
int number   jobs get
if  number > 0
log info     scheduler getschedulername         number
else
// no more jobs then shutdown the scheduler
log info     scheduler getschedulername
scheduler shutdown
scheduler   null
public void addjob jobdetail job  trigger trigger  throws schedulerexception
if  scheduler    null
// add job to internal list because we will defer adding to the scheduler when camel context has been fully started
jobstoadd add new jobtoadd job  trigger
else
// add job directly to scheduler
doaddjob job  trigger
private void doaddjob jobdetail job  trigger trigger  throws schedulerexception
jobs incrementandget
trigger existingtrigger   getscheduler   gettrigger trigger getname    trigger getgroup
if  existingtrigger    null
log debug    trigger getgroup    trigger getname
getscheduler   schedulejob job  trigger
else if  hastriggerchanged existingtrigger  trigger
log debug    trigger getgroup    trigger getname
scheduler addjob job  true
trigger setjobname job getname
scheduler reschedulejob trigger getname    trigger getgroup    trigger
else
log debug    trigger getgroup    trigger getname
if   isclustered
trigger setstarttime calendar getinstance   gettime
scheduler reschedulejob trigger getname    trigger getgroup    trigger
private boolean hastriggerchanged trigger oldtrigger  trigger newtrigger
if  oldtrigger instanceof crontrigger    oldtrigger equals newtrigger
crontrigger oldcron    crontrigger  oldtrigger
crontrigger newcron    crontrigger  newtrigger
return  oldcron getcronexpression   equals newcron getcronexpression
else
return  newtrigger equals oldtrigger
public void pausejob trigger trigger  throws schedulerexception
jobs decrementandget
if  isclustered
// do not pause jobs which are clustered, as we want the jobs to continue running on the other nodes
log debug    trigger getgroup    trigger getname
else
log debug    trigger getgroup    trigger getname
getscheduler   pausetrigger trigger getname    trigger getgroup
getscheduler   pausejob trigger getname    trigger getgroup
public void deletejob string name  string group  throws schedulerexception
if  isclustered
// do not pause jobs which are clustered, as we want the jobs to continue running on the other nodes
log debug    group  name
else
trigger trigger    getscheduler   gettrigger name  group
if  trigger    null
log debug    group  name
getscheduler   unschedulejob name  group
/**
* to force shutdown the quartz scheduler
*
* @throws schedulerexception can be thrown if error shutting down
*/
public void shutdownscheduler   throws schedulerexception
if  scheduler    null
log info     scheduler getschedulername
scheduler shutdown
scheduler   null
/**
* is the quartz scheduler clustered?
*/
public boolean isclustered   throws schedulerexception
try
return getscheduler   getmetadata   isjobstoreclustered
catch  nosuchmethoderror e
log debug
return false
/**
* to force starting the quartz scheduler
*
* @throws schedulerexception can be thrown if error starting
*/
public void startscheduler   throws schedulerexception
for  jobtoadd add   jobstoadd
doaddjob add getjob    add gettrigger
jobstoadd clear
if   getscheduler   isstarted
if  getstartdelayedseconds   > 0
log info     getscheduler   getschedulername         getstartdelayedseconds
try
getscheduler   startdelayed getstartdelayedseconds
catch  nosuchmethoderror e
log warn
getscheduler   getschedulername
getscheduler   start
else
log info     getscheduler   getschedulername
getscheduler   start
// properties
// -------------------------------------------------------------------------
public schedulerfactory getfactory   throws schedulerexception
if  factory    null
factory   createschedulerfactory
return factory
public void setfactory schedulerfactory factory
this factory   factory
public synchronized scheduler getscheduler   throws schedulerexception
if  scheduler    null
scheduler   createscheduler
return scheduler
public void setscheduler final scheduler scheduler
this scheduler   scheduler
public properties getproperties
return properties
public void setproperties properties properties
this properties   properties
public string getpropertiesfile
return propertiesfile
public void setpropertiesfile string propertiesfile
this propertiesfile   propertiesfile
public int getstartdelayedseconds
return startdelayedseconds
public void setstartdelayedseconds int startdelayedseconds
this startdelayedseconds   startdelayedseconds
public boolean isautostartscheduler
return autostartscheduler
public void setautostartscheduler boolean autostartscheduler
this autostartscheduler   autostartscheduler
// implementation methods
// -------------------------------------------------------------------------
protected properties loadproperties   throws schedulerexception
properties answer   getproperties
if  answer    null    getpropertiesfile      null
log info    getpropertiesfile
inputstream is   getcamelcontext   getclassresolver   loadresourceasstream getpropertiesfile
if  is    null
throw new schedulerexception     getpropertiesfile
answer   new properties
try
answer load is
catch  ioexception e
throw new schedulerexception     getpropertiesfile    e
return answer
protected schedulerfactory createschedulerfactory   throws schedulerexception
schedulerfactory answer
properties prop   loadproperties
if  prop    null
// force disabling update checker (will do online check over the internet)
prop put
answer   new stdschedulerfactory prop
else
// read default props to be able to use a single scheduler per camel context
// if we need more than one scheduler per context use setscheduler(scheduler)
// or setfactory(schedulerfactory) methods
// must use classloader from stdschedulerfactory to work even in osgi
inputstream is   stdschedulerfactory class getclassloader   getresourceasstream
if  is    null
throw new schedulerexception
prop   new properties
try
prop load is
catch  ioexception e
throw new schedulerexception    e
// camel context name will be a suffix to use one scheduler per context
string identity   getcamelcontext   getname
string instname   prop getproperty stdschedulerfactory prop_sched_instance_name
if  instname    null
instname       identity
else
instname   instname       identity
prop setproperty stdschedulerfactory prop_sched_instance_name  instname
// force disabling update checker (will do online check over the internet)
prop put
answer   new stdschedulerfactory prop
if  log isdebugenabled
string name   prop getproperty stdschedulerfactory prop_sched_instance_name
log debug    name  prop
return answer
protected scheduler createscheduler   throws schedulerexception
scheduler scheduler   getfactory   getscheduler
// register current camel context to scheduler so we can look it up when jobs is being triggered
scheduler getcontext   put quartzconstants quartz_camel_context       getcamelcontext   getname    getcamelcontext
return scheduler