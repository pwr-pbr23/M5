/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel dataformat bindy kvp
import java io inputstream
import java io inputstreamreader
import java io outputstream
import java util arraylist
import java util arrays
import java util hashmap
import java util list
import java util map
import java util scanner
import org apache camel exchange
import org apache camel dataformat bindy bindyabstractdataformat
import org apache camel dataformat bindy bindyabstractfactory
import org apache camel dataformat bindy bindykeyvaluepairfactory
import org apache camel dataformat bindy util converter
import org apache camel spi dataformat
import org apache camel spi packagescanclassresolver
import org apache camel util iohelper
import org apache camel util objecthelper
import org slf4j logger
import org slf4j loggerfactory
/**
* a <a href="http://camel.apache.org/data-format.html">data format</a> (
* {@link dataformat}) using bindy to marshal to and from csv files
*/
public class bindykeyvaluepairdataformat extends bindyabstractdataformat
private static final transient logger log   loggerfactory getlogger bindykeyvaluepairdataformat class
public bindykeyvaluepairdataformat
public bindykeyvaluepairdataformat string    packages
super packages
@suppresswarnings
public void marshal exchange exchange  object body  outputstream outputstream  throws exception
bindyabstractfactory factory   getfactory exchange getcontext   getpackagescanclassresolver
list<map<string  object>> models    arraylist<map<string  object>> body
byte crlf
// get crlf
crlf   converter getbytereturn factory getcarriagereturn
for  map<string  object> model   models
string result   factory unbind model
byte bytes   exchange getcontext   gettypeconverter   convertto byte class  exchange  result
outputstream write bytes
// add a carriage return
outputstream write crlf
public object unmarshal exchange exchange  inputstream inputstream  throws exception
bindykeyvaluepairfactory factory    bindykeyvaluepairfactory getfactory exchange getcontext   getpackagescanclassresolver
// list of pojos
list<map<string  object>> models   new arraylist<map<string  object>>
// pojos of the model
map<string  object> model
// map to hold the model @onetomany classes while binding
map<string  list<object>> lists   new hashmap<string  list<object>>
inputstreamreader in   new inputstreamreader inputstream
// scanner is used to read big file
scanner scanner   new scanner in
// retrieve the pair separator defined to split the record
objecthelper notnull factory getpairseparator
string separator   factory getpairseparator
int count   0
try
while  scanner hasnextline
// read the line
string line   scanner nextline   trim
if  objecthelper isempty line
// skip if line is empty
continue
// increment counter
count
// create pojo
model   factory factory
// split the message according to the pair separator defined in
// annotated class @message
list<string> result   arrays aslist line split separator
if  result size      0    result isempty
throw new java lang illegalargumentexception
if  result size   > 0
// bind data from message with model classes
// counter is used to detect line where error occurs
factory bind result  model  count  lists
// link objects together
factory link model
// add objects graph to the list
models add model
log debug    model
// test if models list is empty or not
// if this is the case (correspond to an empty stream, ...)
if  models size      0
throw new java lang illegalargumentexception
else
return models
finally
scanner close
iohelper close in     log
protected bindyabstractfactory createmodelfactory packagescanclassresolver resolver  throws exception
return new bindykeyvaluepairfactory resolver  getpackages