/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel builder
import java util list
import org apache camel errorhandlerfactory
import org apache camel processor
import org apache camel model modelcamelcontext
import org apache camel model onexceptiondefinition
import org apache camel spi routecontext
import org apache camel util objecthelper
/**
* represents a proxy to an error handler builder which is resolved by named reference
*
* @version
*/
public class errorhandlerbuilderref extends errorhandlerbuildersupport
public static final string default_error_handler_builder
private final string ref
private errorhandlerbuilder handler
private boolean supporttransacted
public errorhandlerbuilderref string ref
this ref   ref
@override
public void adderrorhandlers onexceptiondefinition exception
if  handler    null
handler adderrorhandlers exception
super adderrorhandlers exception
public processor createerrorhandler routecontext routecontext  processor processor  throws exception
if  handler    null
handler   createerrorhandler routecontext
return handler createerrorhandler routecontext  processor
public boolean supporttransacted
return supporttransacted
/**
* lookup the error handler by the given ref
*
* @param routecontext the route context
* @param ref          reference id for the error handler
* @return the error handler
*/
public static errorhandlerfactory lookuperrorhandlerbuilder routecontext routecontext  string ref
errorhandlerfactory answer
// if the ref is the default then we do not have any explicit error handler configured
// if that is the case then use error handlers configured on the route, as for instance
// the transacted error handler could have been configured on the route so we should use that one
if   iserrorhandlerbuilderconfigured ref
// see if there has been configured a route builder on the route
answer   routecontext getroute   geterrorhandlerbuilder
if  answer    null    routecontext getroute   geterrorhandlerref      null
answer   routecontext lookup routecontext getroute   geterrorhandlerref    errorhandlerbuilder class
if  answer    null
// fallback to the default error handler if none configured on the route
answer   new defaulterrorhandlerbuilder
// check if its also a ref with no error handler configuration like me
if  answer instanceof errorhandlerbuilderref
errorhandlerbuilderref other    errorhandlerbuilderref  answer
string otherref   other getref
if   iserrorhandlerbuilderconfigured otherref
// the other has also no explicit error handler configured then fallback to the handler
// configured on the parent camel context
answer   lookuperrorhandlerbuilder  modelcamelcontext routecontext getcamelcontext
if  answer    null
// the other has also no explicit error handler configured then fallback to the default error handler
// otherwise we could recursive loop forever (triggered by createerrorhandler method)
answer   new defaulterrorhandlerbuilder
// inherit the error handlers from the other as they are to be shared
// this is needed by camel-spring when none error handler has been explicit configured
errorhandlerbuilder answer  seterrorhandlers other geterrorhandlers
else
// use specific configured error handler
answer   routecontext lookup ref  errorhandlerbuilder class
if  answer    null
throw new illegalargumentexception     ref
return answer
protected static errorhandlerfactory lookuperrorhandlerbuilder modelcamelcontext camelcontext
@suppresswarnings
errorhandlerfactory answer   camelcontext geterrorhandlerbuilder
if  answer instanceof errorhandlerbuilderref
errorhandlerbuilderref other    errorhandlerbuilderref  answer
string otherref   other getref
if  iserrorhandlerbuilderconfigured otherref
answer   camelcontext getregistry   lookup otherref  errorhandlerbuilder class
if  answer    null
throw new illegalargumentexception     otherref
return answer
/**
* returns whether a specific error handler builder has been configured or not.
* <p/>
* can be used to test if none has been configured and then install a custom error handler builder
* replacing the default error handler (that would have been used as fallback otherwise).
* <br/>
* this is for instance used by the transacted policy to setup a transactederrorhandlerbuilder
* in camel-spring.
*/
public static boolean iserrorhandlerbuilderconfigured string ref
return  default_error_handler_builder equals ref
public string getref
return ref
public errorhandlerfactory gethandler
return handler
private errorhandlerbuilder createerrorhandler routecontext routecontext
handler    errorhandlerbuilder lookuperrorhandlerbuilder routecontext  getref
objecthelper notnull handler      ref
// configure if the handler support transacted
supporttransacted   handler supporttransacted
list<onexceptiondefinition> list   geterrorhandlers
for  onexceptiondefinition exceptiontype   list
handler adderrorhandlers exceptiontype
return handler
@override
public string tostring
return     ref