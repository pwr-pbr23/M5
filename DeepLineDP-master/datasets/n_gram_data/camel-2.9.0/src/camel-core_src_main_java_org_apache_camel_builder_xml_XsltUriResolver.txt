/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel builder xml
import java io file
import java io inputstream
import javax xml transform source
import javax xml transform transformerexception
import javax xml transform uriresolver
import javax xml transform stream streamsource
import org apache camel spi classresolver
import org apache camel util fileutil
import org apache camel util objecthelper
import org slf4j logger
import org slf4j loggerfactory
/**
* camel specific {@link javax.xml.transform.uriresolver} which is capable of loading files
* from the classpath and file system.
* <p/>
* use prefix <tt>classpath:</tt> or <tt>file:</tt> to denote either classpath or file system.
* if no prefix is provided then the prefix from the <tt>location</tt> parameter is used.
* if it neither has a prefix then <tt>classpath:</tt> is used.
* <p/>
* this implementation <b>cannot</b> load files over http.
*
* @version
*/
public class xslturiresolver implements uriresolver
private static final transient logger log   loggerfactory getlogger xslturiresolver class
private final classresolver resolver
private final string location
public xslturiresolver classresolver resolver  string location
this resolver   resolver
this location   location
public source resolve string href  string base  throws transformerexception
if  objecthelper isempty href
throw new transformerexception
log trace    href  base
if  href startswith
log debug    href
string name   objecthelper after href
inputstream is   resolver loadresourceasstream name
if  is    null
throw new transformerexception     name
return new streamsource is
if  href startswith
log debug    href
string name   objecthelper after href
file file   new file name
return new streamsource file
// okay then its relative to the starting location from the xslt component
string path   fileutil onlypath location
if  objecthelper isempty path
// default to use classpath: location
path       href
return resolve path  base
else
// default to use classpath: location
path       path   file separator   href
return resolve path  base