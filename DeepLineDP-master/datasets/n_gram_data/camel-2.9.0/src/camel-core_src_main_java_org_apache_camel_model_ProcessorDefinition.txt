/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel model
import java util arraylist
import java util arrays
import java util collection
import java util comparator
import java util hashmap
import java util iterator
import java util linkedlist
import java util list
import java util map
import java util concurrent executorservice
import java util concurrent timeunit
import javax xml bind annotation xmlaccesstype
import javax xml bind annotation xmlaccessortype
import javax xml bind annotation xmlanyattribute
import javax xml bind annotation xmlattribute
import javax xml bind annotation xmltransient
import javax xml namespace qname
import org apache camel channel
import org apache camel endpoint
import org apache camel errorhandlerfactory
import org apache camel exchange
import org apache camel exchangepattern
import org apache camel expression
import org apache camel logginglevel
import org apache camel predicate
import org apache camel processor
import org apache camel route
import org apache camel builder dataformatclause
import org apache camel builder expressionbuilder
import org apache camel builder expressionclause
import org apache camel builder processorbuilder
import org apache camel model language constantexpression
import org apache camel model language expressiondefinition
import org apache camel model language languageexpression
import org apache camel processor interceptendpointprocessor
import org apache camel processor pipeline
import org apache camel processor aggregate aggregationstrategy
import org apache camel processor interceptor defaultchannel
import org apache camel processor interceptor delayer
import org apache camel processor interceptor handlefault
import org apache camel processor interceptor streamcaching
import org apache camel processor loadbalancer loadbalancer
import org apache camel spi dataformat
import org apache camel spi idempotentrepository
import org apache camel spi interceptstrategy
import org apache camel spi lifecyclestrategy
import org apache camel spi policy
import org apache camel spi routecontext
import org apache camel spi transactedpolicy
import org apache camel util introspectionsupport
import org apache camel util objecthelper
import org slf4j logger
import org slf4j loggerfactory
/**
* base class for processor types that most xml types extend.
*
* @version
*/
@xmlaccessortype xmlaccesstype property
public abstract class processordefinition<type extends processordefinition<type>> extends optionalidentifieddefinition implements block
protected final transient logger log   loggerfactory getlogger getclass
protected boolean inheriterrorhandler
private nodefactory nodefactory
private final linkedlist<block> blocks   new linkedlist<block>
private processordefinition<?> parent
private final list<interceptstrategy> interceptstrategies   new arraylist<interceptstrategy>
// use xs:any to support optional property placeholders
private map<qname  object> otherattributes
// else to use an optional attribute in jaxb2
public abstract list<processordefinition> getoutputs
public abstract boolean isoutputsupported
/**
* whether this model is abstract or not.
* <p/>
* an abstract model is something that is used for configuring cross cutting concerns such as
* error handling, transaction policies, interceptors etc.
* <p/>
* regular definitions is what is part of the route, such as todefinition, wiretapdefinition and the likes.
* <p/>
* will by default return <tt>false</tt> to indicate regular definition, so all the abstract definitions
* must override this method and return <tt>true</tt> instead.
* <p/>
* this information is used in camel-spring to let camel work a bit on the model provided by jaxb from the
* spring xml file. this is needed to handle those cross cutting concerns properly. the java dsl does not
* have this issue as it can work this out directly using the fluent builder methods.
*
* @return <tt>true</tt> for abstract, otherwise <tt>false</tt> for regular.
*/
public boolean isabstract
return false
/**
* override this in definition class and implement logic to create the processor
* based on the definition model.
*/
public processor createprocessor routecontext routecontext  throws exception
throw new unsupportedoperationexception     getclass   getname
/**
* prefer to use {#link #createchildprocessor}.
*/
public processor createoutputsprocessor routecontext routecontext  throws exception
collection<processordefinition> outputs   getoutputs
return createoutputsprocessor routecontext  outputs
/**
* creates the child processor (outputs) from the current definition
*
* @param routecontext   the route context
* @param mandatory      whether or not children is mandatory (ie the definition should have outputs)
* @return the created children, or <tt>null</tt> if definition had no output
* @throws exception is thrown if error creating the child or if it was mandatory and there was no output defined on definition
*/
public processor createchildprocessor routecontext routecontext  boolean mandatory  throws exception
processor children   null
// at first use custom factory
if  routecontext getcamelcontext   getprocessorfactory      null
children   routecontext getcamelcontext   getprocessorfactory   createchildprocessor routecontext  this  mandatory
// fallback to default implementation if factory did not create the child
if  children    null
children   createoutputsprocessor routecontext
if  children    null    mandatory
throw new illegalargumentexception     this
return children
public void addoutput processordefinition output
if   blocks isempty
// let the block deal with the output
block block   blocks getlast
block addoutput output
return
output setparent this
output setnodefactory getnodefactory
configurechild output
getoutputs   add output
public void clearoutput
getoutputs   clear
blocks clear
public void addroutes routecontext routecontext  collection<route> routes  throws exception
processor processor   makeprocessor routecontext
if  processor    null
// no processor to add
return
if   routecontext isrouteadded
boolean endpointinterceptor   false
// are we routing to an endpoint interceptor, if so we should not add it as an event driven
// processor as we use the producer to trigger the interceptor
if  processor instanceof channel
channel channel    channel  processor
processor next   channel getnextprocessor
if  next instanceof interceptendpointprocessor
endpointinterceptor   true
// only add regular processors as event driven
if  endpointinterceptor
log debug    processor
else
log trace    processor
routecontext addeventdrivenprocessor processor
/**
* wraps the child processor in whatever necessary interceptors and error handlers
*/
public processor wrapprocessor routecontext routecontext  processor processor  throws exception
// dont double wrap
if  processor instanceof channel
return processor
return wrapchannel routecontext  processor  null
protected processor wrapchannel routecontext routecontext  processor processor  processordefinition child  throws exception
// put a channel in between this and each output to control the route flow logic
modelchannel channel   createchannel routecontext
channel setnextprocessor processor
// add interceptor strategies to the channel must be in this order: camel context, route context, local
addinterceptstrategies routecontext  channel  routecontext getcamelcontext   getinterceptstrategies
addinterceptstrategies routecontext  channel  routecontext getinterceptstrategies
addinterceptstrategies routecontext  channel  this getinterceptstrategies
// must do this ugly cast to avoid compiler error on aix/hp-ux
processordefinition defn    processordefinition  this
// set the child before init the channel
channel setchilddefinition child
channel initchannel defn  routecontext
// set the error handler, must be done after init as we can set the error handler as first in the chain
if  defn instanceof trydefinition    defn instanceof catchdefinition    defn instanceof finallydefinition
// do not use error handler for try .. catch .. finally blocks as it will handle errors itself
log trace    defn
else if  processordefinitionhelper isparentoftype trydefinition class  defn  true
processordefinitionhelper isparentoftype catchdefinition class  defn  true
processordefinitionhelper isparentoftype finallydefinition class  defn  true
// do not use error handler for try .. catch .. finally blocks as it will handle errors itself
// by checking that any of our parent(s) is not a try .. catch or finally type
log trace    defn
else if  defn instanceof onexceptiondefinition    processordefinitionhelper isparentoftype onexceptiondefinition class  defn  true
log trace    defn
// do not use error handler for onexceptions blocks as it will handle errors itself
else if  defn instanceof multicastdefinition
// do not use error handler for multicast as it offers fine grained error handlers for its outputs
// however if share unit of work is enabled, we need to wrap an error handler on the multicast parent
multicastdefinition def    multicastdefinition  defn
if  def isshareunitofwork      child    null
// only wrap the parent (not the children of the multicast)
wrapchannelinerrorhandler channel  routecontext
else
log trace    defn
else if  defn instanceof recipientlistdefinition
// do not use error handler for recipient list as it offers fine grained error handlers for its outputs
// however if share unit of work is enabled, we need to wrap an error handler on the recipient list parent
recipientlistdefinition def    recipientlistdefinition  defn
if  def isshareunitofwork
// note a recipient list cannot have children so no need for a child == null check
wrapchannelinerrorhandler channel  routecontext
else
log trace    defn
else
// use error handler by default or if configured to do so
wrapchannelinerrorhandler channel  routecontext
// do post init at the end
channel postinitchannel defn  routecontext
log trace    defn  channel
return channel
/**
* wraps the given channel in error handler (if error handler is inherited)
*
* @param channel       the channel
* @param routecontext  the route context
* @throws exception can be thrown if failed to create error handler builder
*/
private void wrapchannelinerrorhandler channel channel  routecontext routecontext  throws exception
if  isinheriterrorhandler      null    isinheriterrorhandler
log trace    this
processor output   channel getoutput
processor errorhandler   wrapinerrorhandler routecontext  output
// set error handler on channel
channel seterrorhandler errorhandler
else
log debug    this
/**
* wraps the given output in an error handler
*
* @param routecontext the route context
* @param output the output
* @return the output wrapped with the error handler
* @throws exception can be thrown if failed to create error handler builder
*/
protected processor wrapinerrorhandler routecontext routecontext  processor output  throws exception
errorhandlerfactory builder   routecontext getroute   geterrorhandlerbuilder
// create error handler
processor errorhandler   builder createerrorhandler routecontext  output
// invoke lifecycles so we can manage this error handler builder
for  lifecyclestrategy strategy   routecontext getcamelcontext   getlifecyclestrategies
strategy onerrorhandleradd routecontext  errorhandler  builder
return errorhandler
/**
* adds the given list of interceptors to the channel.
*
* @param routecontext  the route context
* @param channel       the channel to add strategies
* @param strategies    list of strategies to add.
*/
protected void addinterceptstrategies routecontext routecontext  channel channel  list<interceptstrategy> strategies
for  interceptstrategy strategy   strategies
if   routecontext isstreamcaching      strategy instanceof streamcaching
// stream cache is disabled so we should not add it
continue
if   routecontext ishandlefault      strategy instanceof handlefault
// handle fault is disabled so we should not add it
continue
if  strategy instanceof delayer
if  routecontext getdelayer      null    routecontext getdelayer   <  0
// delayer is disabled so we should not add it
continue
else
// replace existing delayer as delayer have individual configuration
iterator<interceptstrategy> it   channel getinterceptstrategies   iterator
while  it hasnext
interceptstrategy existing   it next
if  existing instanceof delayer
it remove
// add the new correct delayer
channel addinterceptstrategy strategy
continue
// add strategy
channel addinterceptstrategy strategy
/**
* creates a new instance of some kind of composite processor which defaults
* to using a {@link pipeline} but derived classes could change the behaviour
*/
protected processor createcompositeprocessor routecontext routecontext  list<processor> list  throws exception
return new pipeline routecontext getcamelcontext    list
/**
* creates a new instance of the {@link channel}.
*/
protected modelchannel createchannel routecontext routecontext  throws exception
return new defaultchannel
protected processor createoutputsprocessor routecontext routecontext  collection<processordefinition> outputs  throws exception
list<processor> list   new arraylist<processor>
for  processordefinition<?> output   outputs
// resolve properties before we create the processor
resolvepropertyplaceholders routecontext  output
processor processor   null
// at first use custom factory
if  routecontext getcamelcontext   getprocessorfactory      null
processor   routecontext getcamelcontext   getprocessorfactory   createprocessor routecontext  output
// fallback to default implementation if factory did not create the processor
if  processor    null
processor   output createprocessor routecontext
if  output instanceof channel    processor    null
continue
processor channel   wrapchannel routecontext  processor  output
list add channel
// if more than one output wrap than in a composite processor else just keep it as is
processor processor   null
if   list isempty
if  list size      1
processor   list get 0
else
processor   createcompositeprocessor routecontext  list
return processor
/**
* creates the processor and wraps it in any necessary interceptors and error handlers
*/
protected processor makeprocessor routecontext routecontext  throws exception
processor processor   null
// resolve properties before we create the processor
resolvepropertyplaceholders routecontext  this
// resolve constant fields (eg exchange.file_name)
resolveknownconstantfields this
// allow any custom logic before we create the processor
precreateprocessor
// at first use custom factory
if  routecontext getcamelcontext   getprocessorfactory      null
processor   routecontext getcamelcontext   getprocessorfactory   createprocessor routecontext  this
// fallback to default implementation if factory did not create the processor
if  processor    null
processor   createprocessor routecontext
if  processor    null
// no processor to make
return null
return wrapprocessor routecontext  processor
/**
* inspects the given processor definition and resolves any property placeholders from its properties.
* <p/>
* this implementation will check all the getter/setter pairs on this instance and for all the values
* (which is a string type) will be property placeholder resolved.
*
* @param routecontext the route context
* @param definition   the processor definition
* @throws exception is thrown if property placeholders was used and there was an error resolving them
* @see org.apache.camel.camelcontext#resolvepropertyplaceholders(string)
* @see org.apache.camel.component.properties.propertiescomponent
*/
protected void resolvepropertyplaceholders routecontext routecontext  processordefinition definition  throws exception
log trace    definition
// find all getter/setter which we can use for property placeholders
map<object  object> properties   new hashmap<object  object>
introspectionsupport getproperties definition  properties  null
// include additional properties which have the camel placeholder qname
// and when the definition parameter is this (otherattributes belong to this)
if  definition getotherattributes      null
for  object key   definition getotherattributes   keyset
qname qname    qname  key
if  constants placeholder_qname equals qname getnamespaceuri
string local   qname getlocalpart
object value   definition getotherattributes   get key
if  value    null    value instanceof string
// value must be enclosed with placeholder tokens
string s    string  value
string prefixtoken   routecontext getcamelcontext   getpropertyprefixtoken
string suffixtoken   routecontext getcamelcontext   getpropertysuffixtoken
if  prefixtoken    null
throw new illegalargumentexception     local
if   s startswith prefixtoken
s   prefixtoken   s
if   s endswith suffixtoken
s   s   suffixtoken
value   s
properties put local  value
if   properties isempty
log trace    properties size    definition
// lookup and resolve properties for string based properties
for  map entry entry   properties entryset
// the name is always a string
string name    string  entry getkey
object value   entry getvalue
if  value instanceof string
// value must be a string, as a string is the key for a property placeholder
string text    string  value
text   routecontext getcamelcontext   resolvepropertyplaceholders text
if  text    value
// invoke setter as the text has changed
boolean changed   introspectionsupport setproperty routecontext getcamelcontext   gettypeconverter    definition  name  text
if   changed
throw new illegalargumentexception     name       text       definition
if  log isdebugenabled
log debug    new object name  value  text
/**
* inspects the given processor definition and resolves known fields
* <p/>
* this implementation will check all the getter/setter pairs on this instance and for all the values
* (which is a string type) will check if it refers to a known field (such as on exchange).
*
* @param definition   the processor definition
*/
protected void resolveknownconstantfields processordefinition definition  throws exception
log trace    definition
// find all string getter/setter
map<object  object> properties   new hashmap<object  object>
introspectionsupport getproperties definition  properties  null
if   properties isempty
log trace    properties size    definition
// lookup and resolve known constant fields for string based properties
for  map entry entry   properties entryset
// the name is always a string
string name    string  entry getkey
object value   entry getvalue
if  value instanceof string
// we can only resolve string typed values
string text    string  value
// is the value a known field (currently we only support constants from exchange.class)
if  text startswith
string field   objecthelper after text
string constant   objecthelper lookupconstantfieldvalue exchange class  field
if  constant    null
// invoke setter as the text has changed
introspectionsupport setproperty definition  name  constant
if  log isdebugenabled
log debug    new object name  value  constant
else
throw new illegalargumentexception     field
/**
* strategy to execute any custom logic before the {@link processor} is created.
*/
protected void precreateprocessor
// noop
/**
* strategy for children to do any custom configuration
*
* @param output the child to be added as output to this
*/
protected void configurechild processordefinition output
// noop
// fluent api
// -------------------------------------------------------------------------
/**
* adds a placeholder for the given option
* <p/>
* requires using the {@link org.apache.camel.component.properties.propertiescomponent}
*
* @param option  the name of the option
* @param key     the placeholder key
* @return the builder
*/
public type placeholder string option  string key
qname name   new qname constants placeholder_qname  option
return attribute name  key
/**
* adds an optional attribute
*
* @param name    the name of the attribute
* @param value   the value
* @return the builder
*/
@suppresswarnings
public type attribute qname name  object value
if  otherattributes    null
otherattributes   new hashmap<qname  object>
otherattributes put name  value
return  type  this
/**
* sends the exchange to the given endpoint
*
* @param uri  the endpoint to send to
* @return the builder
*/
@suppresswarnings
public type to string uri
addoutput new todefinition uri
return  type  this
/**
* sends the exchange to the given endpoint
*
* @param uri  the string formatted endpoint uri to send to
* @param args arguments for the string formatting of the uri
* @return the builder
*/
@suppresswarnings
public type tof string uri  object    args
addoutput new todefinition string format uri  args
return  type  this
/**
* sends the exchange to the given endpoint
*
* @param endpoint  the endpoint to send to
* @return the builder
*/
@suppresswarnings
public type to endpoint endpoint
addoutput new todefinition endpoint
return  type  this
/**
* sends the exchange with certain exchange pattern to the given endpoint
* <p/>
* notice the existing mep is preserved
*
* @param pattern the pattern to use for the message exchange
* @param uri  the endpoint to send to
* @return the builder
*/
@suppresswarnings
public type to exchangepattern pattern  string uri
addoutput new todefinition uri  pattern
return  type  this
/**
* sends the exchange with certain exchange pattern to the given endpoint
* <p/>
* notice the existing mep is preserved
*
* @param pattern the pattern to use for the message exchange
* @param endpoint  the endpoint to send to
* @return the builder
*/
@suppresswarnings
public type to exchangepattern pattern  endpoint endpoint
addoutput new todefinition endpoint  pattern
return  type  this
/**
* sends the exchange to a list of endpoints
*
* @param uris  list of endpoints to send to
* @return the builder
*/
@suppresswarnings
public type to string    uris
for  string uri   uris
addoutput new todefinition uri
return  type  this
/**
* sends the exchange to a list of endpoints
*
* @param endpoints  list of endpoints to send to
* @return the builder
*/
@suppresswarnings
public type to endpoint    endpoints
for  endpoint endpoint   endpoints
addoutput new todefinition endpoint
return  type  this
/**
* sends the exchange to a list of endpoints
*
* @param endpoints  list of endpoints to send to
* @return the builder
*/
@suppresswarnings
public type to iterable<endpoint> endpoints
for  endpoint endpoint   endpoints
addoutput new todefinition endpoint
return  type  this
/**
* sends the exchange to a list of endpoints
* <p/>
* notice the existing mep is preserved
*
* @param pattern the pattern to use for the message exchanges
* @param uris  list of endpoints to send to
* @return the builder
*/
@suppresswarnings
public type to exchangepattern pattern  string    uris
for  string uri   uris
addoutput new todefinition uri  pattern
return  type  this
/**
* sends the exchange to a list of endpoints
* <p/>
* notice the existing mep is preserved
*
* @param pattern the pattern to use for the message exchanges
* @param endpoints  list of endpoints to send to
* @return the builder
*/
@suppresswarnings
public type to exchangepattern pattern  endpoint    endpoints
for  endpoint endpoint   endpoints
addoutput new todefinition endpoint  pattern
return  type  this
/**
* sends the exchange to a list of endpoints
*
* @param pattern the pattern to use for the message exchanges
* @param endpoints  list of endpoints to send to
* @return the builder
*/
@suppresswarnings
public type to exchangepattern pattern  iterable<endpoint> endpoints
for  endpoint endpoint   endpoints
addoutput new todefinition endpoint  pattern
return  type  this
/**
* <a href="http://camel.apache.org/exchange-pattern.html">exchangepattern:</a>
* set the {@link exchangepattern} into the {@link exchange}.
* <p/>
* the pattern set on the {@link exchange} will
*
* @param exchangepattern  instance of {@link exchangepattern}
* @return the builder
*/
@suppresswarnings
public type setexchangepattern exchangepattern exchangepattern
addoutput new setexchangepatterndefinition exchangepattern
return  type  this
/**
* <a href="http://camel.apache.org/exchange-pattern.html">exchangepattern:</a>
* set the exchange's exchangepattern {@link exchangepattern} to be inonly
*
* @return the builder
* @deprecated use {@link #setexchangepattern(org.apache.camel.exchangepattern)} instead
*/
@deprecated
public type inonly
return setexchangepattern exchangepattern inonly
/**
* sends the message to the given endpoint using an
* <a href="http://camel.apache.org/event-message.html">event message</a> or
* <a href="http://camel.apache.org/exchange-pattern.html">inonly exchange pattern</a>
* <p/>
* notice the existing mep is restored after the message has been sent to the given endpoint.
*
* @param uri the endpoint uri which is used for sending the exchange
* @return the builder
*/
public type inonly string uri
return to exchangepattern inonly  uri
/**
* sends the message to the given endpoint using an
* <a href="http://camel.apache.org/event-message.html">event message</a> or
* <a href="http://camel.apache.org/exchange-pattern.html">inonly exchange pattern</a>
* <p/>
* notice the existing mep is restored after the message has been sent to the given endpoint.
*
* @param endpoint the endpoint which is used for sending the exchange
* @return the builder
*/
public type inonly endpoint endpoint
return to exchangepattern inonly  endpoint
/**
* sends the message to the given endpoints using an
* <a href="http://camel.apache.org/event-message.html">event message</a> or
* <a href="http://camel.apache.org/exchange-pattern.html">inonly exchange pattern</a>
* <p/>
* notice the existing mep is restored after the message has been sent to the given endpoint.
*
* @param uris  list of endpoints to send to
* @return the builder
*/
public type inonly string    uris
return to exchangepattern inonly  uris
/**
* sends the message to the given endpoints using an
* <a href="http://camel.apache.org/event-message.html">event message</a> or
* <a href="http://camel.apache.org/exchange-pattern.html">inonly exchange pattern</a>
* <p/>
* notice the existing mep is restored after the message has been sent to the given endpoint.
*
* @param endpoints  list of endpoints to send to
* @return the builder
*/
public type inonly endpoint    endpoints
return to exchangepattern inonly  endpoints
/**
* sends the message to the given endpoints using an
* <a href="http://camel.apache.org/event-message.html">event message</a> or
* <a href="http://camel.apache.org/exchange-pattern.html">inonly exchange pattern</a>
* <p/>
* notice the existing mep is restored after the message has been sent to the given endpoint.
*
* @param endpoints  list of endpoints to send to
* @return the builder
*/
public type inonly iterable<endpoint> endpoints
return to exchangepattern inonly  endpoints
/**
* <a href="http://camel.apache.org/exchange-pattern.html">exchangepattern:</a>
* set the exchange's exchangepattern {@link exchangepattern} to be inout
*
* @return the builder
* @deprecated use {@link #setexchangepattern(org.apache.camel.exchangepattern)} instead
*/
@deprecated
public type inout
return setexchangepattern exchangepattern inout
/**
* sends the message to the given endpoint using an
* <a href="http://camel.apache.org/request-reply.html">request reply</a> or
* <a href="http://camel.apache.org/exchange-pattern.html">inout exchange pattern</a>
* <p/>
* notice the existing mep is restored after the message has been sent to the given endpoint.
*
* @param uri the endpoint uri which is used for sending the exchange
* @return the builder
*/
public type inout string uri
return to exchangepattern inout  uri
/**
* sends the message to the given endpoint using an
* <a href="http://camel.apache.org/request-reply.html">request reply</a> or
* <a href="http://camel.apache.org/exchange-pattern.html">inout exchange pattern</a>
* <p/>
* notice the existing mep is restored after the message has been sent to the given endpoint.
*
* @param endpoint the endpoint which is used for sending the exchange
* @return the builder
*/
public type inout endpoint endpoint
return to exchangepattern inout  endpoint
/**
* sends the message to the given endpoints using an
* <a href="http://camel.apache.org/request-reply.html">request reply</a> or
* <a href="http://camel.apache.org/exchange-pattern.html">inout exchange pattern</a>
* <p/>
* notice the existing mep is restored after the message has been sent to the given endpoint.
*
* @param uris  list of endpoints to send to
* @return the builder
*/
public type inout string    uris
return to exchangepattern inout  uris
/**
* sends the message to the given endpoints using an
* <a href="http://camel.apache.org/request-reply.html">request reply</a> or
* <a href="http://camel.apache.org/exchange-pattern.html">inout exchange pattern</a>
* <p/>
* notice the existing mep is restored after the message has been sent to the given endpoint.
*
* @param endpoints  list of endpoints to send to
* @return the builder
*/
public type inout endpoint    endpoints
return to exchangepattern inout  endpoints
/**
* sends the message to the given endpoints using an
* <a href="http://camel.apache.org/request-reply.html">request reply</a> or
* <a href="http://camel.apache.org/exchange-pattern.html">inout exchange pattern</a>
* <p/>
* notice the existing mep is restored after the message has been sent to the given endpoint.
*
* @param endpoints  list of endpoints to send to
* @return the builder
*/
public type inout iterable<endpoint> endpoints
return to exchangepattern inout  endpoints
/**
* sets the id of this node
*
* @param id  the id
* @return the builder
*/
@suppresswarnings
public type id string id
if  getoutputs   isempty
// set id on this
setid id
else
// set it on last output as this is what the user means to do
// for block(s) with non empty getoutputs() the id probably refers
//  to the last definition in the current block
list<processordefinition> outputs   getoutputs
if   blocks isempty
if  blocks getlast   instanceof processordefinition
processordefinition block    processordefinition blocks getlast
if   block getoutputs   isempty
outputs   block getoutputs
outputs get outputs size     1  setid id
return  type  this
/**
* set the route id for this route
*
* @param id  the route id
* @return the builder
*/
@suppresswarnings
public type routeid string id
processordefinition def   this
routedefinition route   processordefinitionhelper getroute def
if  route    null
route setid id
return  type  this
/**
* <a href="http://camel.apache.org/multicast.html">multicast eip:</a>
* multicasts messages to all its child outputs; so that each processor and
* destination gets a copy of the original message to avoid the processors
* interfering with each other.
*
* @return the builder
*/
public multicastdefinition multicast
multicastdefinition answer   new multicastdefinition
addoutput answer
return answer
/**
* <a href="http://camel.apache.org/multicast.html">multicast eip:</a>
* multicasts messages to all its child outputs; so that each processor and
* destination gets a copy of the original message to avoid the processors
* interfering with each other.
*
* @param aggregationstrategy the strategy used to aggregate responses for
*          every part
* @param parallelprocessing if is <tt>true</tt> camel will fork thread to call the endpoint producer
* @return the builder
*/
public multicastdefinition multicast aggregationstrategy aggregationstrategy  boolean parallelprocessing
multicastdefinition answer   new multicastdefinition
addoutput answer
answer setaggregationstrategy aggregationstrategy
answer setparallelprocessing parallelprocessing
return answer
/**
* <a href="http://camel.apache.org/multicast.html">multicast eip:</a>
* multicasts messages to all its child outputs; so that each processor and
* destination gets a copy of the original message to avoid the processors
* interfering with each other.
*
* @param aggregationstrategy the strategy used to aggregate responses for every part
* @return the builder
*/
public multicastdefinition multicast aggregationstrategy aggregationstrategy
multicastdefinition answer   new multicastdefinition
addoutput answer
answer setaggregationstrategy aggregationstrategy
return answer
/**
* <a href="http://camel.apache.org/pipes-nd-filters.html">pipes and filters eip:</a>
* creates a {@link pipeline} so that the message
* will get processed by each endpoint in turn and for request/response the
* output of one endpoint will be the input of the next endpoint
*
* @return the builder
*/
public pipelinedefinition pipeline
pipelinedefinition answer   new pipelinedefinition
addoutput answer
return answer
/**
* <a href="http://camel.apache.org/pipes-nd-filters.html">pipes and filters eip:</a>
* creates a {@link pipeline} of the list of endpoints so that the message
* will get processed by each endpoint in turn and for request/response the
* output of one endpoint will be the input of the next endpoint
*
* @param uris  list of endpoints
* @return the builder
*/
public type pipeline string    uris
return to uris
/**
* <a href="http://camel.apache.org/pipes-nd-filters.html">pipes and filters eip:</a>
* creates a {@link pipeline} of the list of endpoints so that the message
* will get processed by each endpoint in turn and for request/response the
* output of one endpoint will be the input of the next endpoint
*
* @param endpoints  list of endpoints
* @return the builder
*/
public type pipeline endpoint    endpoints
return to endpoints
/**
* <a href="http://camel.apache.org/pipes-nd-filters.html">pipes and filters eip:</a>
* creates a {@link pipeline} of the list of endpoints so that the message
* will get processed by each endpoint in turn and for request/response the
* output of one endpoint will be the input of the next endpoint
*
* @param endpoints  list of endpoints
* @return the builder
*/
public type pipeline collection<endpoint> endpoints
return to endpoints
/**
* continues processing the {@link org.apache.camel.exchange} using asynchronous routing engine.
*
* @return the builder
*/
public threadsdefinition threads
threadsdefinition answer   new threadsdefinition
addoutput answer
return answer
/**
* continues processing the {@link org.apache.camel.exchange} using asynchronous routing engine.
*
* @param poolsize the core pool size
* @return the builder
*/
public threadsdefinition threads int poolsize
threadsdefinition answer   threads
answer setpoolsize poolsize
return answer
/**
* continues processing the {@link org.apache.camel.exchange} using asynchronous routing engine.
*
* @param poolsize    the core pool size
* @param maxpoolsize the maximum pool size
* @return the builder
*/
public threadsdefinition threads int poolsize  int maxpoolsize
threadsdefinition answer   threads
answer setpoolsize poolsize
answer setmaxpoolsize maxpoolsize
return answer
/**
* wraps the sub route using aop allowing you to do before and after work (aop around).
*
* @return the builder
* @deprecated to be removed in the near future. instead you can use interceptors or processors to do aop with camel.
*/
@deprecated
public aopdefinition aop
aopdefinition answer   new aopdefinition
addoutput answer
return answer
/**
* ends the current block
*
* @return the builder
*/
public processordefinition end
// must do this ugly cast to avoid compiler error on aix/hp-ux
processordefinition defn    processordefinition  this
// when using dotry .. docatch .. dofinally we should always
// end the try definition to avoid having to use 2 x end() in the route
// this is counter intuitive for end users
// todo (camel-3.0): this should be done inside of trydefinition or even better
//  in block(s) in general, but the api needs to be revisited for that.
if  defn instanceof trydefinition    defn instanceof choicedefinition
popblock
if  blocks isempty
if  parent    null
return this endparent
return parent endparent
popblock
return this endparent
/**
* strategy to allow {@link processordefinition}s to have special logic when using end() in the dsl
* to return back to the intended parent.
* <p/>
* for example a content based router we return back to the {@link choicedefinition} when we end()
* from a {@link whendefinition}.
*
* @return the end
*/
public processordefinition endparent
return this
/**
* ends the current block and returns back to the {@link choicedefinition choice()} dsl.
*
* @return the builder
*/
public choicedefinition endchoice
processordefinition def   end
if  def instanceof whendefinition
return  choicedefinition  def getparent
else if  def instanceof otherwisedefinition
return  choicedefinition  def getparent
else
return  choicedefinition  def
/**
* ends the current block and returns back to the {@link trydefinition dotry()} dsl.
*
* @return the builder
*/
public trydefinition enddotry
return  trydefinition  end
/**
* <a href="http://camel.apache.org/idempotent-consumer.html">idempotent consumer eip:</a>
* creates an {@link org.apache.camel.processor.idempotent.idempotentconsumer idempotentconsumer}
* to avoid duplicate messages
*
* @param messageidexpression  expression to test of duplicate messages
* @return the builder
*/
public idempotentconsumerdefinition idempotentconsumer expression messageidexpression
idempotentconsumerdefinition answer   new idempotentconsumerdefinition
answer setexpression new expressiondefinition messageidexpression
addoutput answer
return answer
/**
* <a href="http://camel.apache.org/idempotent-consumer.html">idempotent consumer eip:</a>
* creates an {@link org.apache.camel.processor.idempotent.idempotentconsumer idempotentconsumer}
* to avoid duplicate messages
*
* @param messageidexpression  expression to test of duplicate messages
* @param idempotentrepository  the repository to use for duplicate check
* @return the builder
*/
public idempotentconsumerdefinition idempotentconsumer expression messageidexpression  idempotentrepository<?> idempotentrepository
idempotentconsumerdefinition answer   new idempotentconsumerdefinition messageidexpression  idempotentrepository
addoutput answer
return answer
/**
* <a href="http://camel.apache.org/idempotent-consumer.html">idempotent consumer eip:</a>
* creates an {@link org.apache.camel.processor.idempotent.idempotentconsumer idempotentconsumer}
* to avoid duplicate messages
*
* @param idempotentrepository the repository to use for duplicate check
* @return the builder used to create the expression
* @deprecated will be removed in camel 3.0. instead use any of the other methods
*/
@deprecated
public expressionclause<idempotentconsumerdefinition> idempotentconsumer idempotentrepository<?> idempotentrepository
idempotentconsumerdefinition answer   new idempotentconsumerdefinition
answer setmessageidrepository idempotentrepository
addoutput answer
return expressionclause createandsetexpression answer
/**
* <a href="http://camel.apache.org/message-filter.html">message filter eip:</a>
* creates a predicate expression which only if it is <tt>true</tt> then the
* exchange is forwarded to the destination
*
* @return the clause used to create the filter expression
*/
public expressionclause<? extends filterdefinition> filter
filterdefinition filter   new filterdefinition
addoutput filter
return expressionclause createandsetexpression filter
/**
* <a href="http://camel.apache.org/message-filter.html">message filter eip:</a>
* creates a predicate which is applied and only if it is <tt>true</tt> then the
* exchange is forwarded to the destination
*
* @param predicate  predicate to use
* @return the builder
*/
public filterdefinition filter predicate predicate
filterdefinition filter   new filterdefinition predicate
addoutput filter
return filter
/**
* <a href="http://camel.apache.org/message-filter.html">message filter eip:</a>
* creates a predicate expression which only if it is <tt>true</tt> then the
* exchange is forwarded to the destination
*
* @param expression  the predicate expression to use
* @return the builder
*/
public filterdefinition filter expressiondefinition expression
filterdefinition filter   getnodefactory   createfilter
filter setexpression expression
addoutput filter
return filter
/**
* <a href="http://camel.apache.org/message-filter.html">message filter eip:</a>
* creates a predicate language expression which only if it is <tt>true</tt> then the
* exchange is forwarded to the destination
*
* @param language     language for expression
* @param expression   the expression
* @return the builder
*/
public filterdefinition filter string language  string expression
return filter new languageexpression language  expression
/**
* creates a validation expression which only if it is <tt>true</tt> then the
* exchange is forwarded to the destination.
* otherwise a {@link org.apache.camel.processor.validation.predicatevalidationexception} is thrown.
*
* @param expression  the expression
* @return the builder
*/
public validatedefinition validate expression expression
validatedefinition answer   new validatedefinition
answer setexpression new expressiondefinition expression
addoutput answer
return answer
/**
* creates a validation expression which only if it is <tt>true</tt> then the
* exchange is forwarded to the destination.
* otherwise a {@link org.apache.camel.processor.validation.predicatevalidationexception} is thrown.
*
* @param predicate  the predicate
* @return the builder
*/
public validatedefinition validate predicate predicate
validatedefinition answer   new validatedefinition
answer setexpression new expressiondefinition predicate
addoutput answer
return answer
/**
* creates a validation expression which only if it is <tt>true</tt> then the
* exchange is forwarded to the destination.
* otherwise a {@link org.apache.camel.processor.validation.predicatevalidationexception} is thrown.
*
* @return the builder
*/
public expressionclause<validatedefinition> validate
validatedefinition answer   new validatedefinition
addoutput answer
return expressionclause createandsetexpression answer
/**
* <a href="http://camel.apache.org/load-balancer.html">load balancer eip:</a>
* creates a loadbalance
*
* @return  the builder
*/
public loadbalancedefinition loadbalance
loadbalancedefinition answer   new loadbalancedefinition
addoutput answer
return answer
/**
* <a href="http://camel.apache.org/load-balancer.html">load balancer eip:</a>
* creates a loadbalance
*
* @param loadbalancer a custom load balancer to use
* @return  the builder
*/
public loadbalancedefinition loadbalance loadbalancer loadbalancer
loadbalancedefinition answer   new loadbalancedefinition
addoutput answer
return answer loadbalance loadbalancer
/**
* creates a log message to be logged at info level.
*
* @param message the log message, (you can use {@link org.apache.camel.language.simple.simplelanguage} syntax)
* @return the builder
*/
@suppresswarnings
public type log string message
logdefinition answer   new logdefinition message
addoutput answer
return  type  this
/**
* creates a log message to be logged at the given level.
*
* @param logginglevel the logging level to use
* @param message the log message, (you can use {@link org.apache.camel.language.simple.simplelanguage} syntax)
* @return the builder
*/
@suppresswarnings
public type log logginglevel logginglevel  string message
logdefinition answer   new logdefinition message
answer setlogginglevel logginglevel
addoutput answer
return  type  this
/**
* creates a log message to be logged at the given level and name.
*
* @param logginglevel the logging level to use
* @param logname the log name to use
* @param message the log message, (you can use {@link org.apache.camel.language.simple.simplelanguage} syntax)
* @return the builder
*/
@suppresswarnings
public type log logginglevel logginglevel  string logname  string message
logdefinition answer   new logdefinition message
answer setlogginglevel logginglevel
answer setlogname logname
addoutput answer
return  type  this
/**
* creates a log message to be logged at the given level and name.
*
*
* @param logginglevel the logging level to use
* @param logname the log name to use
* @param marker  log marker name
* @param message the log message, (you can use {@link org.apache.camel.language.simple.simplelanguage} syntax)
* @return the builder
*/
@suppresswarnings
public type log logginglevel logginglevel  string logname  string marker  string message
logdefinition answer   new logdefinition message
answer setlogginglevel logginglevel
answer setlogname logname
answer setmarker marker
addoutput answer
return  type  this
/**
* <a href="http://camel.apache.org/content-based-router.html">content based router eip:</a>
* creates a choice of one or more predicates with an otherwise clause
*
* @return the builder for a choice expression
*/
public choicedefinition choice
choicedefinition answer   new choicedefinition
addoutput answer
return answer
/**
* creates a try/catch block
*
* @return the builder for a tryblock expression
*/
public trydefinition dotry
trydefinition answer   new trydefinition
addoutput answer
return answer
/**
* <a href="http://camel.apache.org/recipient-list.html">recipient list eip:</a>
* creates a dynamic recipient list allowing you to route messages to a number of dynamically specified recipients.
* <p/>
* will use comma as default delimiter.
*
* @param recipients expression to decide the destinations
* @return the builder
*/
public recipientlistdefinition<type> recipientlist expression recipients
recipientlistdefinition<type> answer   new recipientlistdefinition<type> recipients
addoutput answer
return answer
/**
* <a href="http://camel.apache.org/recipient-list.html">recipient list eip:</a>
* creates a dynamic recipient list allowing you to route messages to a number of dynamically specified recipients
*
* @param recipients expression to decide the destinations
* @param delimiter  a custom delimiter to use
* @return the builder
*/
public recipientlistdefinition<type> recipientlist expression recipients  string delimiter
recipientlistdefinition<type> answer   new recipientlistdefinition<type> recipients
answer setdelimiter delimiter
addoutput answer
return answer
/**
* <a href="http://camel.apache.org/recipient-list.html">recipient list eip:</a>
* creates a dynamic recipient list allowing you to route messages to a number of dynamically specified recipients
*
* @return the expression clause to configure the expression to decide the destinations
*/
public expressionclause<recipientlistdefinition<type>> recipientlist
recipientlistdefinition<type> answer   new recipientlistdefinition<type>
addoutput answer
return expressionclause createandsetexpression answer
/**
* <a href="http://camel.apache.org/routing-slip.html">routing slip eip:</a>
* creates a routing slip allowing you to route a message consecutively through a series of processing
* steps where the sequence of steps is not known at design time and can vary for each message.
* <p/>
* the route slip will be evaluated <i>once</i>, use {@link #dynamicrouter()} if you need even more dynamic routing.
*
* @param header  is the header that the {@link org.apache.camel.processor.routingslip routingslip}
*                class will look in for the list of uris to route the message to.
* @param uridelimiter  is the delimiter that will be used to split up
*                      the list of uris in the routing slip.
* @return the builder
* @deprecated prefer to use {@link #routingslip(org.apache.camel.expression, string)} instead
*/
@suppresswarnings
@deprecated
public type routingslip string header  string uridelimiter
routingslipdefinition answer   new routingslipdefinition header  uridelimiter
addoutput answer
return  type  this
/**
* <a href="http://camel.apache.org/routing-slip.html">routing slip eip:</a>
* creates a routing slip allowing you to route a message consecutively through a series of processing
* steps where the sequence of steps is not known at design time and can vary for each message.
* <p/>
* the list of uris will be split based on the default delimiter {@link routingslipdefinition#default_delimiter}
* <p/>
* the route slip will be evaluated <i>once</i>, use {@link #dynamicrouter()} if you need even more dynamic routing.
*
* @param header  is the header that the {@link org.apache.camel.processor.routingslip routingslip}
*                class will look in for the list of uris to route the message to.
* @return the builder
* @deprecated prefer to use {@link #routingslip(org.apache.camel.expression)} instead
*/
@suppresswarnings
@deprecated
public type routingslip string header
routingslipdefinition answer   new routingslipdefinition header
addoutput answer
return  type  this
/**
* <a href="http://camel.apache.org/routing-slip.html">routing slip eip:</a>
* creates a routing slip allowing you to route a message consecutively through a series of processing
* steps where the sequence of steps is not known at design time and can vary for each message.
* <p/>
* the route slip will be evaluated <i>once</i>, use {@link #dynamicrouter()} if you need even more dynamic routing.
*
* @param header  is the header that the {@link org.apache.camel.processor.routingslip routingslip}
*                class will look in for the list of uris to route the message to.
* @param uridelimiter  is the delimiter that will be used to split up
*                      the list of uris in the routing slip.
* @param ignoreinvalidendpoints if this parameter is true, routingslip will ignore the endpoints which
*                               cannot be resolved or a producer cannot be created or started
* @return the builder
* @deprecated prefer to use {@link #routingslip()} instead
*/
@suppresswarnings
@deprecated
public type routingslip string header  string uridelimiter  boolean ignoreinvalidendpoints
routingslipdefinition answer   new routingslipdefinition header  uridelimiter
answer setignoreinvalidendpoints ignoreinvalidendpoints
addoutput answer
return  type  this
/**
* <a href="http://camel.apache.org/routing-slip.html">routing slip eip:</a>
* creates a routing slip allowing you to route a message consecutively through a series of processing
* steps where the sequence of steps is not known at design time and can vary for each message.
* <p/>
* the list of uris will be split based on the default delimiter {@link routingslipdefinition#default_delimiter}
* <p/>
* the route slip will be evaluated <i>once</i>, use {@link #dynamicrouter()} if you need even more dynamic routing.
*
* @param header  is the header that the {@link org.apache.camel.processor.routingslip routingslip}
*                class will look in for the list of uris to route the message to.
* @param ignoreinvalidendpoints if this parameter is true, routingslip will ignore the endpoints which
*                               cannot be resolved or a producer cannot be created or started
* @return the builder
* @deprecated prefer to use {@link #routingslip()} instead
*/
@suppresswarnings
@deprecated
public type routingslip string header  boolean ignoreinvalidendpoints
routingslipdefinition answer   new routingslipdefinition header
answer setignoreinvalidendpoints ignoreinvalidendpoints
addoutput answer
return  type  this
/**
* <a href="http://camel.apache.org/routing-slip.html">routing slip eip:</a>
* creates a routing slip allowing you to route a message consecutively through a series of processing
* steps where the sequence of steps is not known at design time and can vary for each message.
* <p/>
* the route slip will be evaluated <i>once</i>, use {@link #dynamicrouter()} if you need even more dynamic routing.
*
* @param expression  to decide the destinations
* @param uridelimiter  is the delimiter that will be used to split up
*                      the list of uris in the routing slip.
* @return the builder
*/
public routingslipdefinition<type> routingslip expression expression  string uridelimiter
routingslipdefinition<type> answer   new routingslipdefinition<type> expression  uridelimiter
addoutput answer
return answer
/**
* <a href="http://camel.apache.org/routing-slip.html">routing slip eip:</a>
* creates a routing slip allowing you to route a message consecutively through a series of processing
* steps where the sequence of steps is not known at design time and can vary for each message.
* <p/>
* the list of uris will be split based on the default delimiter {@link routingslipdefinition#default_delimiter}
* <p/>
* the route slip will be evaluated <i>once</i>, use {@link #dynamicrouter()} if you need even more dynamic routing.
*
* @param expression  to decide the destinations
* @return the builder
*/
public routingslipdefinition<type> routingslip expression expression
routingslipdefinition<type> answer   new routingslipdefinition<type> expression
addoutput answer
return answer
/**
* <a href="http://camel.apache.org/routing-slip.html">routing slip eip:</a>
* creates a routing slip allowing you to route a message consecutively through a series of processing
* steps where the sequence of steps is not known at design time and can vary for each message.
* <p/>
* the list of uris will be split based on the default delimiter {@link routingslipdefinition#default_delimiter}
* <p/>
* the route slip will be evaluated <i>once</i>, use {@link #dynamicrouter()} if you need even more dynamic routing.
*
* @return the expression clause to configure the expression to decide the destinations
*/
public expressionclause<routingslipdefinition<type>> routingslip
routingslipdefinition<type> answer   new routingslipdefinition<type>
addoutput answer
return expressionclause createandsetexpression answer
/**
* <a href="http://camel.apache.org/dynamic-router.html">dynamic router eip:</a>
* creates a dynamic router allowing you to route a message consecutively through a series of processing
* steps where the sequence of steps is not known at design time and can vary for each message.
* <p/>
* <br/><b>important:</b> the expression will be invoked repeatedly until it returns <tt>null</tt>, so be sure it does that,
* otherwise it will be invoked endlessly.
*
* @param expression  to decide the destinations, which will be invoked repeatedly
*                    until it evaluates <tt>null</tt> to indicate no more destinations.
* @return the builder
*/
public dynamicrouterdefinition<type> dynamicrouter expression expression
dynamicrouterdefinition<type> answer   new dynamicrouterdefinition<type> expression
addoutput answer
return answer
/**
* <a href="http://camel.apache.org/dynamic-router.html">dynamic router eip:</a>
* creates a dynamic router allowing you to route a message consecutively through a series of processing
* steps where the sequence of steps is not known at design time and can vary for each message.
* <p/>
* <br/><b>important:</b> the expression will be invoked repeatedly until it returns <tt>null</tt>, so be sure it does that,
* otherwise it will be invoked endlessly.
*
* @return the expression clause to configure the expression to decide the destinations,
* which will be invoked repeatedly until it evaluates <tt>null</tt> to indicate no more destinations.
*/
public expressionclause<dynamicrouterdefinition<type>> dynamicrouter
dynamicrouterdefinition<type> answer   new dynamicrouterdefinition<type>
addoutput answer
return expressionclause createandsetexpression answer
/**
* <a href="http://camel.apache.org/sampling.html">sampling throttler</a>
* creates a sampling throttler allowing you to extract a sample of
* exchanges from the traffic on a route. it is configured with a sampling
* period, during which only a single exchange is allowed to pass through.
* all other exchanges will be stopped.
* <p/>
* default period is one second.
*
* @return the builder
*/
public samplingdefinition sample
return sample 1  timeunit seconds
/**
* <a href="http://camel.apache.org/sampling.html">sampling throttler</a>
* creates a sampling throttler allowing you to extract a sample of exchanges
* from the traffic through a route. it is configured with a sampling period
* during which only a single exchange is allowed to pass through.
* all other exchanges will be stopped.
*
* @param sampleperiod this is the sample interval, only one exchange is
*            allowed through in this interval
* @param unit this is the units for the sampleperiod e.g. seconds
* @return the builder
*/
public samplingdefinition sample long sampleperiod  timeunit unit
samplingdefinition answer   new samplingdefinition sampleperiod  unit
addoutput answer
return answer
/**
* <a href="http://camel.apache.org/sampling.html">sampling throttler</a>
* creates a sampling throttler allowing you to extract a sample of exchanges
* from the traffic through a route. it is configured with a sampling message frequency
* during which only a single exchange is allowed to pass through.
* all other exchanges will be stopped.
*
* @param messagefrequency this is the sample message frequency, only one exchange is
*              allowed through for this many messages received
* @return the builder
*/
public samplingdefinition sample long messagefrequency
samplingdefinition answer   new samplingdefinition messagefrequency
addoutput answer
return answer
/**
* <a href="http://camel.apache.org/splitter.html">splitter eip:</a>
* creates a splitter allowing you split a message into a number of pieces and process them individually.
* <p>
* this splitter responds with the original input message. you can use a custom {@link aggregationstrategy} to
* control what to respond from the splitter.
*
* @return the expression clause builder for the expression on which to split
*/
public expressionclause<splitdefinition> split
splitdefinition answer   new splitdefinition
addoutput answer
return expressionclause createandsetexpression answer
/**
* <a href="http://camel.apache.org/splitter.html">splitter eip:</a>
* creates a splitter allowing you split a message into a number of pieces and process them individually.
* <p>
* this splitter responds with the original input message. you can use a custom {@link aggregationstrategy} to
* control what to respond from the splitter.
*
* @param expression  the expression on which to split the message
* @return the builder
*/
public splitdefinition split expression expression
splitdefinition answer   new splitdefinition expression
addoutput answer
return answer
/**
* <a href="http://camel.apache.org/splitter.html">splitter eip:</a>
* creates a splitter allowing you split a message into a number of pieces and process them individually.
* <p>
* the splitter responds with the answer produced by the given {@link aggregationstrategy}.
*
* @param expression  the expression on which to split
* @param aggregationstrategy  the strategy used to aggregate responses for every part
* @return the builder
*/
public splitdefinition split expression expression  aggregationstrategy aggregationstrategy
splitdefinition answer   new splitdefinition expression
addoutput answer
answer setaggregationstrategy aggregationstrategy
return answer
/**
* <a href="http://camel.apache.org/resequencer.html">resequencer eip:</a>
* creates a resequencer allowing you to reorganize messages based on some comparator.
*
* @return the expression clause for the expressions on which to compare messages in order
*/
public expressionclause<resequencedefinition> resequence
resequencedefinition answer   new resequencedefinition
expressionclause<resequencedefinition> clause   new expressionclause<resequencedefinition> answer
answer setexpression clause
addoutput answer
return clause
/**
* <a href="http://camel.apache.org/resequencer.html">resequencer eip:</a>
* creates a resequencer allowing you to reorganize messages based on some comparator.
*
* @param expression the expression on which to compare messages in order
* @return the builder
*/
public resequencedefinition resequence expression expression
resequencedefinition answer   new resequencedefinition
answer setexpression new expressiondefinition expression
addoutput answer
return answer
/**
* <a href="http://camel.apache.org/aggregator.html">aggregator eip:</a>
* creates an aggregator allowing you to combine a number of messages together into a single message.
*
* @return the expression clause to be used as builder to configure the correlation expression
*/
public expressionclause<aggregatedefinition> aggregate
aggregatedefinition answer   new aggregatedefinition
expressionclause<aggregatedefinition> clause   new expressionclause<aggregatedefinition> answer
answer setexpression clause
addoutput answer
return clause
/**
* <a href="http://camel.apache.org/aggregator.html">aggregator eip:</a>
* creates an aggregator allowing you to combine a number of messages together into a single message.
*
* @param aggregationstrategy the strategy used for the aggregation
* @return the expression clause to be used as builder to configure the correlation expression
*/
public expressionclause<aggregatedefinition> aggregate aggregationstrategy aggregationstrategy
aggregatedefinition answer   new aggregatedefinition
expressionclause<aggregatedefinition> clause   new expressionclause<aggregatedefinition> answer
answer setexpression clause
answer setaggregationstrategy aggregationstrategy
addoutput answer
return clause
/**
* <a href="http://camel.apache.org/aggregator.html">aggregator eip:</a>
* creates an aggregator allowing you to combine a number of messages together into a single message.
*
* @param correlationexpression the expression used to calculate the
*                              correlation key. for a jms message this could be the
*                              expression <code>header("jmsdestination")</code> or
*                              <code>header("jmscorrelationid")</code>
* @return the builder
*/
public aggregatedefinition aggregate expression correlationexpression
aggregatedefinition answer   new aggregatedefinition correlationexpression
addoutput answer
return answer
/**
* <a href="http://camel.apache.org/aggregator.html">aggregator eip:</a>
* creates an aggregator allowing you to combine a number of messages together into a single message.
*
* @param correlationexpression the expression used to calculate the
*                              correlation key. for a jms message this could be the
*                              expression <code>header("jmsdestination")</code> or
*                              <code>header("jmscorrelationid")</code>
* @param aggregationstrategy the strategy used for the aggregation
* @return the builder
*/
public aggregatedefinition aggregate expression correlationexpression  aggregationstrategy aggregationstrategy
aggregatedefinition answer   new aggregatedefinition correlationexpression  aggregationstrategy
addoutput answer
return answer
/**
* <a href="http://camel.apache.org/delayer.html">delayer eip:</a>
* creates a delayer allowing you to delay the delivery of messages to some destination.
*
* @param delay  an expression to calculate the delay time in millis
* @return the builder
*/
public delaydefinition delay expression delay
delaydefinition answer   new delaydefinition delay
addoutput answer
return answer
/**
* <a href="http://camel.apache.org/delayer.html">delayer eip:</a>
* creates a delayer allowing you to delay the delivery of messages to some destination.
*
* @return the expression clause to create the expression
*/
public expressionclause<delaydefinition> delay
delaydefinition answer   new delaydefinition
addoutput answer
return expressionclause createandsetexpression answer
/**
* <a href="http://camel.apache.org/delayer.html">delayer eip:</a>
* creates a delayer allowing you to delay the delivery of messages to some destination.
*
* @param delay  the delay in millis
* @return the builder
*/
public delaydefinition delay long delay
return delay expressionbuilder constantexpression delay
/**
* <a href="http://camel.apache.org/throttler.html">throttler eip:</a>
* creates a throttler allowing you to ensure that a specific endpoint does not get overloaded,
* or that we don't exceed an agreed sla with some external service.
* <p/>
* will default use a time period of 1 second, so setting the maximumrequestcount to eg 10
* will default ensure at most 10 messages per second.
*
* @param maximumrequestcount  the maximum messages
* @return the builder
*/
public throttledefinition throttle long maximumrequestcount
return throttle expressionbuilder constantexpression maximumrequestcount
/**
* <a href="http://camel.apache.org/throttler.html">throttler eip:</a>
* creates a throttler allowing you to ensure that a specific endpoint does not get overloaded,
* or that we don't exceed an agreed sla with some external service.
* <p/>
* will default use a time period of 1 second, so setting the maximumrequestcount to eg 10
* will default ensure at most 10 messages per second.
*
* @param maximumrequestcount  an expression to calculate the maximum request count
* @return the builder
*/
public throttledefinition throttle expression maximumrequestcount
throttledefinition answer   new throttledefinition maximumrequestcount
addoutput answer
return answer
/**
* <a href="http://camel.apache.org/loop.html">loop eip:</a>
* creates a loop allowing to process the a message a number of times and possibly process them
* in a different way. useful mostly for testing.
*
* @return the clause used to create the loop expression
*/
public expressionclause<loopdefinition> loop
loopdefinition loop   new loopdefinition
addoutput loop
return expressionclause createandsetexpression loop
/**
* <a href="http://camel.apache.org/loop.html">loop eip:</a>
* creates a loop allowing to process the a message a number of times and possibly process them
* in a different way. useful mostly for testing.
*
* @param expression the loop expression
* @return the builder
*/
public loopdefinition loop expression expression
loopdefinition loop   getnodefactory   createloop
loop setexpression expression
addoutput loop
return loop
/**
* <a href="http://camel.apache.org/loop.html">loop eip:</a>
* creates a loop allowing to process the a message a number of times and possibly process them
* in a different way. useful mostly for testing.
*
* @param count  the number of times
* @return the builder
*/
public loopdefinition loop int count
loopdefinition loop   getnodefactory   createloop
loop setexpression new constantexpression integer tostring count
addoutput loop
return loop
/**
* sets the exception on the {@link org.apache.camel.exchange}
*
* @param exception the exception to throw
* @return the builder
*/
@suppresswarnings
public type throwexception exception exception
throwexceptiondefinition answer   new throwexceptiondefinition
answer setexception exception
addoutput answer
return  type  this
/**
* marks the exchange for rollback only.
* <p/>
* does <b>not</b> set any exception as opposed to {@link #rollback()} methods.
*
* @return the builder
* @see #rollback()
* @see #rollback(string)
* @see #markrollbackonlylast()
*/
@suppresswarnings
public type markrollbackonly
rollbackdefinition answer   new rollbackdefinition
answer setmarkrollbackonly true
addoutput answer
return  type  this
/**
* marks the exchange for rollback only, but only for the last (current) transaction.
* <p/>
* a last rollback is used when you have nested transactions and only want the last local transaction to rollback,
* where as the outer transaction can still be completed
* <p/>
* does <b>not</b> set any exception as opposed to {@link #rollback()} methods.
*
* @return the builder
* @see #rollback()
* @see #rollback(string)
* @see #markrollbackonly()
*/
@suppresswarnings
public type markrollbackonlylast
rollbackdefinition answer   new rollbackdefinition
answer setmarkrollbackonlylast true
addoutput answer
return  type  this
/**
* marks the exchange for rollback only and sets an exception with a default message.
* <p/>
* this is done by setting a {@link org.apache.camel.rollbackexchangeexception} on the exchange
* and mark it for rollback.
*
* @return the builder
* @see #markrollbackonly()
*/
public type rollback
return rollback null
/**
* marks the exchange for rollback and sets an exception with the provided message.
* <p/>
* this is done by setting a {@link org.apache.camel.rollbackexchangeexception} on the exchange
* and mark it for rollback.
*
* @param message an optional message used for logging purpose why the rollback was triggered
* @return the builder
* @see #markrollbackonly()
*/
@suppresswarnings
public type rollback string message
rollbackdefinition answer   new rollbackdefinition message
addoutput answer
return  type  this
/**
* <a href="http://camel.apache.org/wiretap.html">wiretap eip:</a>
* sends messages to all its child outputs; so that each processor and
* destination gets a copy of the original message to avoid the processors
* interfering with each other using {@link exchangepattern#inonly}.
*
* @param uri  the destination
* @return the builder
*/
public wiretapdefinition<type> wiretap string uri
wiretapdefinition<type> answer   new wiretapdefinition<type>
answer seturi uri
addoutput answer
return answer
/**
* <a href="http://camel.apache.org/wiretap.html">wiretap eip:</a>
* sends messages to all its child outputs; so that each processor and
* destination gets a copy of the original message to avoid the processors
* interfering with each other using {@link exchangepattern#inonly}.
*
* @param uri  the destination
* @param      executorservice a custom {@link executorservice} to use as thread pool
*             for sending tapped exchanges
* @return the builder
* @deprecated use the fluent builder from {@link wiretapdefinition}, will be removed in camel 3.0
*/
@deprecated
public wiretapdefinition<type> wiretap string uri  executorservice executorservice
wiretapdefinition<type> answer   new wiretapdefinition<type>
answer seturi uri
answer setexecutorservice executorservice
addoutput answer
return answer
/**
* <a href="http://camel.apache.org/wiretap.html">wiretap eip:</a>
* sends messages to all its child outputs; so that each processor and
* destination gets a copy of the original message to avoid the processors
* interfering with each other using {@link exchangepattern#inonly}.
*
* @param uri  the destination
* @param      executorserviceref reference to lookup a custom {@link executorservice}
*             to use as thread pool for sending tapped exchanges
* @return the builder
* @deprecated use the fluent builder from {@link wiretapdefinition}, will be removed in camel 3.0
*/
@deprecated
public wiretapdefinition<type> wiretap string uri  string executorserviceref
wiretapdefinition<type> answer   new wiretapdefinition<type>
answer seturi uri
answer setexecutorserviceref executorserviceref
addoutput answer
return answer
/**
* <a href="http://camel.apache.org/wiretap.html">wiretap eip:</a>
* sends a new {@link org.apache.camel.exchange} to the destination
* using {@link exchangepattern#inonly}.
* <p/>
* will use a copy of the original exchange which is passed in as argument
* to the given expression
*
* @param uri  the destination
* @param body expression that creates the body to send
* @return the builder
* @deprecated use the fluent builder from {@link wiretapdefinition}, will be removed in camel 3.0
*/
@deprecated
public wiretapdefinition<type> wiretap string uri  expression body
return wiretap uri  true  body
/**
* <a href="http://camel.apache.org/wiretap.html">wiretap eip:</a>
* sends a new {@link org.apache.camel.exchange} to the destination
* using {@link exchangepattern#inonly}.
*
* @param uri  the destination
* @param copy whether or not use a copy of the original exchange or a new empty exchange
* @param body expression that creates the body to send
* @return the builder
* @deprecated use the fluent builder from {@link wiretapdefinition}, will be removed in camel 3.0
*/
@deprecated
public wiretapdefinition<type> wiretap string uri  boolean copy  expression body
wiretapdefinition<type> answer   new wiretapdefinition<type>
answer seturi uri
answer setcopy copy
answer setnewexchangeexpression body
addoutput answer
return answer
/**
* <a href="http://camel.apache.org/wiretap.html">wiretap eip:</a>
* sends a new {@link org.apache.camel.exchange} to the destination
* using {@link exchangepattern#inonly}.
* <p/>
* will use a copy of the original exchange which is passed in as argument
* to the given processor
*
* @param uri  the destination
* @param processor  processor preparing the new exchange to send
* @return the builder
* @deprecated use the fluent builder from {@link wiretapdefinition}, will be removed in camel 3.0
*/
@deprecated
public wiretapdefinition<type> wiretap string uri  processor processor
return wiretap uri  true  processor
/**
* <a href="http://camel.apache.org/wiretap.html">wiretap eip:</a>
* sends a new {@link org.apache.camel.exchange} to the destination
* using {@link exchangepattern#inonly}.
*
* @param uri  the destination
* @param copy whether or not use a copy of the original exchange or a new empty exchange
* @param processor  processor preparing the new exchange to send
* @return the builder
* @deprecated use the fluent builder from {@link wiretapdefinition}, will be removed in camel 3.0
*/
@deprecated
public wiretapdefinition<type> wiretap string uri  boolean copy  processor processor
wiretapdefinition<type> answer   new wiretapdefinition<type>
answer seturi uri
answer setcopy copy
answer setnewexchangeprocessor processor
addoutput answer
return answer
/**
* pushes the given block on the stack as current block
*
* @param block  the block
*/
void pushblock block block
blocks add block
/**
* pops the block off the stack as current block
*
* @return the block
*/
block popblock
return blocks isempty   ? null   blocks removelast
/**
* stops continue routing the current {@link org.apache.camel.exchange} and marks it as completed.
*
* @return the builder
*/
@suppresswarnings
public type stop
stopdefinition stop   new stopdefinition
addoutput stop
return  type  this
/**
* <a href="http://camel.apache.org/exception-clause.html">exception clause</a>
* for catching certain exceptions and handling them.
*
* @param exceptiontype  the exception to catch
* @return the exception builder to configure
*/
public onexceptiondefinition onexception class exceptiontype
onexceptiondefinition answer   new onexceptiondefinition exceptiontype
addoutput answer
return answer
/**
* <a href="http://camel.apache.org/exception-clause.html">exception clause</a>
* for catching certain exceptions and handling them.
*
* @param exceptions list of exceptions to catch
* @return the exception builder to configure
*/
public onexceptiondefinition onexception class    exceptions
onexceptiondefinition answer   new onexceptiondefinition arrays aslist exceptions
addoutput answer
return answer
/**
* apply a {@link policy}.
* <p/>
* policy can be used for transactional policies.
*
* @param policy  the policy to apply
* @return the policy builder to configure
*/
public policydefinition policy policy policy
policydefinition answer   new policydefinition policy
addoutput answer
return answer
/**
* apply a {@link policy}.
* <p/>
* policy can be used for transactional policies.
*
* @param ref  reference to lookup a policy in the registry
* @return the policy builder to configure
*/
public policydefinition policy string ref
policydefinition answer   new policydefinition
answer setref ref
addoutput answer
return answer
/**
* marks this route as transacted and uses the default transacted policy found in the registry.
*
* @return the policy builder to configure
*/
public policydefinition transacted
policydefinition answer   new policydefinition
answer settype transactedpolicy class
addoutput answer
return answer
/**
* marks this route as transacted.
*
* @param ref  reference to lookup a transacted policy in the registry
* @return the policy builder to configure
*/
public policydefinition transacted string ref
policydefinition answer   new policydefinition
answer settype transactedpolicy class
answer setref ref
addoutput answer
return answer
// transformers
// -------------------------------------------------------------------------
/**
* <a href="http://camel.apache.org/message-translator.html">message translator eip:</a>
* adds the custom processor to this destination which could be a final
* destination, or could be a transformation in a pipeline
*
* @param processor  the custom {@link processor}
* @return the builder
*/
@suppresswarnings
public type process processor processor
processdefinition answer   new processdefinition processor
addoutput answer
return  type  this
/**
* <a href="http://camel.apache.org/message-translator.html">message translator eip:</a>
* adds the custom processor reference to this destination which could be a final
* destination, or could be a transformation in a pipeline
*
* @param ref   reference to a {@link processor} to lookup in the registry
* @return the builder
*/
@suppresswarnings
public type processref string ref
processdefinition answer   new processdefinition
answer setref ref
addoutput answer
return  type  this
/**
* <a href="http://camel.apache.org/message-translator.html">message translator eip:</a>
* adds a bean which is invoked which could be a final destination, or could be a transformation in a pipeline
*
* @param bean  the bean to invoke
* @return the builder
*/
@suppresswarnings
public type bean object bean
beandefinition answer   new beandefinition
answer setbean bean
addoutput answer
return  type  this
/**
* <a href="http://camel.apache.org/message-translator.html">message translator eip:</a>
* adds a bean which is invoked which could be a final destination, or could be a transformation in a pipeline
*
* @param bean  the bean to invoke
* @param method  the method name to invoke on the bean (can be used to avoid ambiguity)
* @return the builder
*/
@suppresswarnings
public type bean object bean  string method
beandefinition answer   new beandefinition
answer setbean bean
answer setmethod method
addoutput answer
return  type  this
/**
* <a href="http://camel.apache.org/message-translator.html">message translator eip:</a>
* adds a bean which is invoked which could be a final destination, or could be a transformation in a pipeline
*
* @param  beantype  the bean class, camel will instantiate an object at runtime
* @return the builder
*/
@suppresswarnings
public type bean class beantype
beandefinition answer   new beandefinition
answer setbeantype beantype getname
addoutput answer
return  type  this
/**
* <a href="http://camel.apache.org/message-translator.html">message translator eip:</a>
* adds a bean which is invoked which could be a final destination, or could be a transformation in a pipeline
*
* @param  beantype  the bean class, camel will instantiate an object at runtime
* @param method  the method name to invoke on the bean (can be used to avoid ambiguity)
* @return the builder
*/
@suppresswarnings
public type bean class beantype  string method
beandefinition answer   new beandefinition
answer setbeantype beantype getname
answer setmethod method
addoutput answer
return  type  this
/**
* <a href="http://camel.apache.org/message-translator.html">message translator eip:</a>
* adds a bean which is invoked which could be a final destination, or could be a transformation in a pipeline
*
* @param ref  reference to a bean to lookup in the registry
* @return the builder
*/
@suppresswarnings
public type beanref string ref
beandefinition answer   new beandefinition ref
addoutput answer
return  type  this
/**
* <a href="http://camel.apache.org/message-translator.html">message translator eip:</a>
* adds a bean which is invoked which could be a final destination, or could be a transformation in a pipeline
*
* @param ref  reference to a bean to lookup in the registry
* @param method  the method name to invoke on the bean (can be used to avoid ambiguity)
* @return the builder
*/
@suppresswarnings
public type beanref string ref  string method
beandefinition answer   new beandefinition ref  method
addoutput answer
return  type  this
/**
* <a href="http://camel.apache.org/message-translator.html">message translator eip:</a>
* adds a processor which sets the body on the in message
*
* @return a expression builder clause to set the body
*/
public expressionclause<processordefinition<type>> setbody
expressionclause<processordefinition<type>> clause   new expressionclause<processordefinition<type>> this
setbodydefinition answer   new setbodydefinition clause
addoutput answer
return clause
/**
* <a href="http://camel.apache.org/message-translator.html">message translator eip:</a>
* adds a processor which sets the body on the in message
*
* @param expression   the expression used to set the body
* @return the builder
*/
@suppresswarnings
public type setbody expression expression
setbodydefinition answer   new setbodydefinition expression
addoutput answer
return  type  this
/**
* <a href="http://camel.apache.org/message-translator.html">message translator eip:</a>
* adds a processor which sets the body on the out message
*
* @param expression   the expression used to set the body
* @return the builder
*/
@suppresswarnings
public type transform expression expression
transformdefinition answer   new transformdefinition expression
addoutput answer
return  type  this
/**
* <a href="http://camel.apache.org/message-translator.html">message translator eip:</a>
* adds a processor which sets the body on the out message
*
* @return a expression builder clause to set the body
*/
public expressionclause<processordefinition<type>> transform
expressionclause<processordefinition<type>> clause
new expressionclause<processordefinition<type>>  processordefinition<type>  this
transformdefinition answer   new transformdefinition clause
addoutput answer
return clause
/**
* adds a processor which sets the body on the fault message
*
* @param expression   the expression used to set the body
* @return the builder
*/
public type setfaultbody expression expression
return process processorbuilder setfaultbody expression
/**
* adds a processor which sets the header on the in message
*
* @param name  the header name
* @return a expression builder clause to set the header
*/
public expressionclause<processordefinition<type>> setheader string name
expressionclause<processordefinition<type>> clause   new expressionclause<processordefinition<type>> this
setheaderdefinition answer   new setheaderdefinition name  clause
addoutput answer
return clause
/**
* adds a processor which sets the header on the in message
*
* @param name  the header name
* @param expression  the expression used to set the header
* @return the builder
*/
@suppresswarnings
public type setheader string name  expression expression
setheaderdefinition answer   new setheaderdefinition name  expression
addoutput answer
return  type  this
/**
* adds a processor which sets the header on the out message
*
* @param name  the header name
* @return a expression builder clause to set the header
* @deprecated use {@link #setheader(string)}
*/
@deprecated
public expressionclause<processordefinition<type>> setoutheader string name
expressionclause<processordefinition<type>> clause   new expressionclause<processordefinition<type>> this
setoutheaderdefinition answer   new setoutheaderdefinition name  clause
addoutput answer
return clause
/**
* adds a processor which sets the header on the out message
*
* @param name  the header name
* @param expression  the expression used to set the header
* @return the builder
* @deprecated use {@link #setheader(string, org.apache.camel.expression)}
*/
@suppresswarnings
@deprecated
public type setoutheader string name  expression expression
setoutheaderdefinition answer   new setoutheaderdefinition name  expression
addoutput answer
return  type  this
/**
* adds a processor which sets the header on the fault message
*
* @param name  the header name
* @param expression  the expression used to set the header
* @return the builder
* @deprecated use {@link #setheader(string, org.apache.camel.expression)}
*/
@deprecated
public type setfaultheader string name  expression expression
return process processorbuilder setfaultheader name  expression
/**
* adds a processor which sets the exchange property
*
* @param name  the property name
* @param expression  the expression used to set the property
* @return the builder
*/
@suppresswarnings
public type setproperty string name  expression expression
setpropertydefinition answer   new setpropertydefinition name  expression
addoutput answer
return  type  this
/**
* adds a processor which sets the exchange property
*
* @param name  the property name
* @return a expression builder clause to set the property
*/
public expressionclause<processordefinition<type>> setproperty string name
expressionclause<processordefinition<type>> clause   new expressionclause<processordefinition<type>> this
setpropertydefinition answer   new setpropertydefinition name  clause
addoutput answer
return clause
/**
* adds a processor which removes the header on the in message
*
* @param name  the header name
* @return the builder
*/
@suppresswarnings
public type removeheader string name
removeheaderdefinition answer   new removeheaderdefinition name
addoutput answer
return  type  this
/**
* adds a processor which removes the headers on the in message
*
* @param pattern  a pattern to match header names to be removed
* @return the builder
*/
@suppresswarnings
public type removeheaders string pattern
removeheadersdefinition answer   new removeheadersdefinition pattern
addoutput answer
return  type  this
/**
* adds a processor which removes the headers on the in message
*
* @param pattern  a pattern to match header names to be removed
* @param excludepatterns one or more pattern of header names that should be excluded (= preserved)
* @return the builder
*/
@suppresswarnings
public type removeheaders string pattern  string    excludepatterns
removeheadersdefinition answer   new removeheadersdefinition pattern  excludepatterns
addoutput answer
return  type  this
/**
* adds a processor which removes the header on the fault message
*
* @param name  the header name
* @return the builder
* @deprecated will be removed in the near future. instead use {@link #removeheader(string)}
*/
@deprecated
public type removefaultheader string name
return process processorbuilder removefaultheader name
/**
* adds a processor which removes the exchange property
*
* @param name  the property name
* @return the builder
*/
@suppresswarnings
public type removeproperty string name
removepropertydefinition answer   new removepropertydefinition name
addoutput answer
return  type  this
/**
* converts the in message body to the specified type
*
* @param type the type to convert to
* @return the builder
*/
@suppresswarnings
public type convertbodyto class type
addoutput new convertbodydefinition type
return  type  this
/**
* converts the in message body to the specified type
*
* @param type the type to convert to
* @param charset the charset to use by type converters (not all converters support specifc charset)
* @return the builder
*/
@suppresswarnings
public type convertbodyto class type  string charset
addoutput new convertbodydefinition type  charset
return  type  this
/**
* sorts the expression using a default sorting based on tostring representation.
*
* @param expression  the expression, must be convertable to {@link list}
* @return the builder
*/
public type sort expression expression
return sort expression  null
/**
* sorts the expression using the given comparator
*
* @param expression  the expression, must be convertable to {@link list}
* @param comparator  the comparator to use for sorting
* @return the builder
*/
@suppresswarnings
public type sort expression expression  comparator comparator
addoutput new sortdefinition expression  comparator
return  type  this
/**
* sorts the expression
*
* @return the builder
*/
public expressionclause<sortdefinition> sort
sortdefinition answer   new sortdefinition
addoutput answer
return expressionclause createandsetexpression answer
/**
* the <a href="http://camel.apache.org/content-enricher.html">content enricher eip</a>
* enriches an exchange with additional data obtained from a <code>resourceuri</code>.
*
* @param resourceuri           uri of resource endpoint for obtaining additional data.
* @param aggregationstrategy   aggregation strategy to aggregate input data and additional data.
* @return the builder
* @see org.apache.camel.processor.enricher
*/
@suppresswarnings
public type enrich string resourceuri  aggregationstrategy aggregationstrategy
addoutput new enrichdefinition aggregationstrategy  resourceuri
return  type  this
/**
* the <a href="http://camel.apache.org/content-enricher.html">content enricher eip</a>
* enriches an exchange with additional data obtained from a <code>resourceuri</code>.
* <p/>
* the difference between this and {@link #pollenrich(string)} is that this uses a producer
* to obatin the additional data, where as pollenrich uses a polling consumer.
*
* @param resourceuri           uri of resource endpoint for obtaining additional data.
* @return the builder
* @see org.apache.camel.processor.enricher
*/
@suppresswarnings
public type enrich string resourceuri
addoutput new enrichdefinition resourceuri
return  type  this
/**
* the <a href="http://camel.apache.org/content-enricher.html">content enricher eip</a>
* enriches an exchange with additional data obtained from a <code>resourceuri</code>.
* <p/>
* the difference between this and {@link #pollenrich(string)} is that this uses a producer
* to obtain the additional data, where as pollenrich uses a polling consumer.
*
* @param resourceref            reference of resource endpoint for obtaining additional data.
* @param aggregationstrategyref reference of aggregation strategy to aggregate input data and additional data.
* @return the builder
* @see org.apache.camel.processor.enricher
*/
@suppresswarnings
public type enrichref string resourceref  string aggregationstrategyref
enrichdefinition enrich   new enrichdefinition
enrich setresourceref resourceref
enrich setaggregationstrategyref aggregationstrategyref
addoutput enrich
return  type  this
/**
* the <a href="http://camel.apache.org/content-enricher.html">content enricher eip</a>
* enriches an exchange with additional data obtained from a <code>resourceuri</code>
* using a {@link org.apache.camel.pollingconsumer} to poll the endpoint.
* <p/>
* the difference between this and {@link #enrich(string)} is that this uses a consumer
* to obtain the additional data, where as enrich uses a producer.
* <p/>
* this method will block until data is avialable, use the method with timeout if you do not
* want to risk waiting a long time before data is available from the resourceuri.
*
* @param resourceuri           uri of resource endpoint for obtaining additional data.
* @return the builder
* @see org.apache.camel.processor.pollenricher
*/
@suppresswarnings
public type pollenrich string resourceuri
addoutput new pollenrichdefinition null  resourceuri  0
return  type  this
/**
* the <a href="http://camel.apache.org/content-enricher.html">content enricher eip</a>
* enriches an exchange with additional data obtained from a <code>resourceuri</code>
* using a {@link org.apache.camel.pollingconsumer} to poll the endpoint.
* <p/>
* the difference between this and {@link #enrich(string)} is that this uses a consumer
* to obtain the additional data, where as enrich uses a producer.
* <p/>
* this method will block until data is avialable, use the method with timeout if you do not
* want to risk waiting a long time before data is available from the resourceuri.
*
* @param resourceuri           uri of resource endpoint for obtaining additional data.
* @param aggregationstrategy   aggregation strategy to aggregate input data and additional data.
* @return the builder
* @see org.apache.camel.processor.pollenricher
*/
@suppresswarnings
public type pollenrich string resourceuri  aggregationstrategy aggregationstrategy
addoutput new pollenrichdefinition aggregationstrategy  resourceuri  0
return  type  this
/**
* the <a href="http://camel.apache.org/content-enricher.html">content enricher eip</a>
* enriches an exchange with additional data obtained from a <code>resourceuri</code>
* using a {@link org.apache.camel.pollingconsumer} to poll the endpoint.
* <p/>
* the difference between this and {@link #enrich(string)} is that this uses a consumer
* to obtain the additional data, where as enrich uses a producer.
* <p/>
* the timeout controls which operation to use on {@link org.apache.camel.pollingconsumer}.
* if timeout is negative, we use <tt>receive</tt>. if timeout is 0 then we use <tt>receivenowait</tt>
* otherwise we use <tt>receive(timeout)</tt>.
*
* @param resourceuri           uri of resource endpoint for obtaining additional data.
* @param timeout               timeout in millis to wait at most for data to be available.
* @param aggregationstrategy   aggregation strategy to aggregate input data and additional data.
* @return the builder
* @see org.apache.camel.processor.pollenricher
*/
@suppresswarnings
public type pollenrich string resourceuri  long timeout  aggregationstrategy aggregationstrategy
addoutput new pollenrichdefinition aggregationstrategy  resourceuri  timeout
return  type  this
/**
* the <a href="http://camel.apache.org/content-enricher.html">content enricher eip</a>
* enriches an exchange with additional data obtained from a <code>resourceuri</code>
* using a {@link org.apache.camel.pollingconsumer} to poll the endpoint.
* <p/>
* the difference between this and {@link #enrich(string)} is that this uses a consumer
* to obtain the additional data, where as enrich uses a producer.
* <p/>
* the timeout controls which operation to use on {@link org.apache.camel.pollingconsumer}.
* if timeout is negative, we use <tt>receive</tt>. if timeout is 0 then we use <tt>receivenowait</tt>
* otherwise we use <tt>receive(timeout)</tt>.
*
* @param resourceuri           uri of resource endpoint for obtaining additional data.
* @param timeout               timeout in millis to wait at most for data to be available.
* @return the builder
* @see org.apache.camel.processor.pollenricher
*/
@suppresswarnings
public type pollenrich string resourceuri  long timeout
addoutput new pollenrichdefinition null  resourceuri  timeout
return  type  this
/**
* the <a href="http://camel.apache.org/content-enricher.html">content enricher eip</a>
* enriches an exchange with additional data obtained from a <code>resourceuri</code>
* using a {@link org.apache.camel.pollingconsumer} to poll the endpoint.
* <p/>
* the difference between this and {@link #enrich(string)} is that this uses a consumer
* to obtain the additional data, where as enrich uses a producer.
* <p/>
* the timeout controls which operation to use on {@link org.apache.camel.pollingconsumer}.
* if timeout is negative, we use <tt>receive</tt>. if timeout is 0 then we use <tt>receivenowait</tt>
* otherwise we use <tt>receive(timeout)</tt>.
*
* @param resourceref            reference of resource endpoint for obtaining additional data.
* @param timeout                timeout in millis to wait at most for data to be available.
* @param aggregationstrategyref reference of aggregation strategy to aggregate input data and additional data.
* @return the builder
* @see org.apache.camel.processor.pollenricher
*/
@suppresswarnings
public type pollenrichref string resourceref  long timeout  string aggregationstrategyref
pollenrichdefinition pollenrich   new pollenrichdefinition
pollenrich setresourceref resourceref
pollenrich settimeout timeout
pollenrich setaggregationstrategyref aggregationstrategyref
addoutput pollenrich
return  type  this
/**
* adds a oncomplection {@link org.apache.camel.spi.synchronization} hook that invoke this route as
* a callback when the {@link org.apache.camel.exchange} has finished being processed.
* the hook invoke callbacks for either oncomplete or onfailure.
* <p/>
* will by default always trigger when the {@link org.apache.camel.exchange} is complete
* (either with success or failed).
* <br/>
* you can limit the callback to either oncomplete or onfailure but invoking the nested
* builder method.
* <p/>
* for onfailure the caused exception is stored as a property on the {@link org.apache.camel.exchange}
* with the key {@link org.apache.camel.exchange#exception_caught}.
*
* @return the builder
*/
public oncompletiondefinition oncompletion
oncompletiondefinition answer   new oncompletiondefinition
// we must remove all existing on completion definition (as they are global)
// and thus we are the only one as route scoped should override any global scoped
answer removealloncompletiondefinition this
popblock
addoutput answer
pushblock answer
return answer
// dataformat support
// -------------------------------------------------------------------------
/**
* <a href="http://camel.apache.org/data-format.html">dataformat:</a>
* unmarshals the in body using a {@link dataformat} expression to define
* the format of the input message and the output will be set on the out message body.
*
* @return the expression to create the {@link dataformat}
*/
public dataformatclause<processordefinition<type>> unmarshal
return new dataformatclause<processordefinition<type>> this  dataformatclause operation unmarshal
/**
* <a href="http://camel.apache.org/data-format.html">dataformat:</a>
* unmarshals the in body using the specified {@link dataformat}
* and sets the output on the out message body.
*
* @param dataformattype  the dataformat
* @return the builder
*/
@suppresswarnings
public type unmarshal dataformatdefinition dataformattype
addoutput new unmarshaldefinition dataformattype
return  type  this
/**
* <a href="http://camel.apache.org/data-format.html">dataformat:</a>
* unmarshals the in body using the specified {@link dataformat}
* and sets the output on the out message body.
*
* @param dataformat  the dataformat
* @return the builder
*/
public type unmarshal dataformat dataformat
return unmarshal new dataformatdefinition dataformat
/**
* <a href="http://camel.apache.org/data-format.html">dataformat:</a>
* unmarshals the in body using the specified {@link dataformat}
* reference in the {@link org.apache.camel.spi.registry} and sets
* the output on the out message body.
*
* @param datatyperef  reference to a {@link dataformat} to lookup in the registry
* @return the builder
*/
@suppresswarnings
public type unmarshal string datatyperef
addoutput new unmarshaldefinition datatyperef
return  type  this
/**
* <a href="http://camel.apache.org/data-format.html">dataformat:</a>
* marshals the in body using a {@link dataformat} expression to define
* the format of the output which will be added to the out body.
*
* @return the expression to create the {@link dataformat}
*/
public dataformatclause<processordefinition<type>> marshal
return new dataformatclause<processordefinition<type>> this  dataformatclause operation marshal
/**
* <a href="http://camel.apache.org/data-format.html">dataformat:</a>
* marshals the in body using the specified {@link dataformat}
* and sets the output on the out message body.
*
* @param dataformattype  the dataformat
* @return the builder
*/
@suppresswarnings
public type marshal dataformatdefinition dataformattype
addoutput new marshaldefinition dataformattype
return  type  this
/**
* <a href="http://camel.apache.org/data-format.html">dataformat:</a>
* marshals the in body using the specified {@link dataformat}
* and sets the output on the out message body.
*
* @param dataformat  the dataformat
* @return the builder
*/
public type marshal dataformat dataformat
return marshal new dataformatdefinition dataformat
/**
* <a href="http://camel.apache.org/data-format.html">dataformat:</a>
* marshals the in body the specified {@link dataformat}
* reference in the {@link org.apache.camel.spi.registry} and sets
* the output on the out message body.
*
* @param datatyperef  reference to a {@link dataformat} to lookup in the registry
* @return the builder
*/
@suppresswarnings
public type marshal string datatyperef
addoutput new marshaldefinition datatyperef
return  type  this
/**
* sets whether or not to inherit the configured error handler.
* <br/>
* the default value is <tt>true</tt>.
* <p/>
* you can use this to disable using the inherited error handler for a given
* dsl such as a load balancer where you want to use a custom error handler strategy.
*
* @param inheriterrorhandler whether to not to inherit the error handler for this node
* @return the builder
*/
@suppresswarnings
public type inheriterrorhandler boolean inheriterrorhandler
// set on last output
int size   getoutputs   size
if  size    0
// if no outputs then configure this dsl
setinheriterrorhandler inheriterrorhandler
else
// configure on last output as its the intended
processordefinition output   getoutputs   get size   1
if  output    null
output setinheriterrorhandler inheriterrorhandler
return  type  this
// properties
// -------------------------------------------------------------------------
@xmltransient
public processordefinition getparent
return parent
public void setparent processordefinition parent
this parent   parent
@xmltransient
public nodefactory getnodefactory
if  nodefactory    null
nodefactory   new nodefactory
return nodefactory
public void setnodefactory nodefactory nodefactory
this nodefactory   nodefactory
@xmltransient
public list<interceptstrategy> getinterceptstrategies
return interceptstrategies
public void addinterceptstrategy interceptstrategy strategy
this interceptstrategies add strategy
public boolean isinheriterrorhandler
return inheriterrorhandler
@xmlattribute
public void setinheriterrorhandler boolean inheriterrorhandler
this inheriterrorhandler   inheriterrorhandler
public map<qname  object> getotherattributes
return otherattributes
@xmlanyattribute
public void setotherattributes map<qname  object> otherattributes
this otherattributes   otherattributes
/**
* returns a label to describe this node such as the expression if some kind of expression node
*/
public string getlabel
return