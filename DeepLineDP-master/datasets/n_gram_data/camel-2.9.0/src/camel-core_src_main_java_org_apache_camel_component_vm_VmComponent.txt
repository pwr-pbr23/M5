/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel component vm
import java util hashmap
import java util map
import java util concurrent blockingqueue
import java util concurrent linkedblockingqueue
import java util concurrent atomic atomicinteger
import org apache camel exchange
import org apache camel component seda sedacomponent
/**
* an implementation of the <a href="http://camel.apache.org/vm.html">vm components</a>
* for asynchronous seda exchanges on a {@link blockingqueue} within the classloader tree containing
* the camel-core.jar. i.e. to handle communicating across camelcontext instances and possibly across
* web application contexts, providing that camel-core.jar is on the system classpath.
*
* @version
*/
public class vmcomponent extends sedacomponent
protected static final map<string  blockingqueue<exchange>> queues   new hashmap<string  blockingqueue<exchange>>
private static final atomicinteger start_counter   new atomicinteger
@override
public synchronized blockingqueue<exchange> createqueue string uri  map<string  object> parameters
string key   getqueuekey uri
if  queues containskey key
return queues get key
// create queue
blockingqueue<exchange> queue
integer size   getandremoveparameter parameters     integer class
if  size    null    size > 0
queue   new linkedblockingqueue<exchange> size
else
if  getqueuesize   > 0
queue   new linkedblockingqueue<exchange> getqueuesize
else
queue   new linkedblockingqueue<exchange>
queues put key  queue
return queue
@override
protected void dostart   throws exception
super dostart
start_counter incrementandget
@override
protected void dostop   throws exception
super dostop
if  start_counter decrementandget      0
synchronized  queues
for  blockingqueue<exchange> q   queues values
q clear
queues clear