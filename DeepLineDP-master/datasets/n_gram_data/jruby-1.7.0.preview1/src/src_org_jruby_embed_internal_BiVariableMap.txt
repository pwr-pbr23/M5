/**
* **** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2009-2011 yoko harada <yokolet@gmail.com>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
* **** end license block *****
*/
package org jruby embed internal
import java util arraylist
import java util collection
import java util hashmap
import java util hashset
import java util iterator
import java util list
import java util map
import java util set
import org jruby rubyobject
import org jruby embed localvariablebehavior
import org jruby embed variable bivariable
import org jruby embed variable variableinterceptor
import org jruby runtime builtin irubyobject
import org jruby runtime scope manyvarsdynamicscope
/**
* ruby-java bi-directional variable map implementation. keys of this map
* should be string, and values should be {@link bivariable} type object.
* this map does not permit null or empty key. each operation of this class is not
* synchronized; however, concurrent access to values are synchronized. when
* {@link scriptingcontainer} is shared by multiple threads, specify thread safe
* for a local context scope, which makes a map thread local.
*
* usage example:
* <pre>
*         scriptingcontainer container = new scriptingcontainer();
*         map map = container.getvarmap();
*         map.put("@coefficient", new float(3.14));</pre>
* or, using a shortcut method:
* * <pre>
*         scriptingcontainer container = new scriptingcontainer();
*         container.put("@coefficient", new float(3.14));</pre>
*
* @author yoko harada <yokolet@gmail.com>
*/
public class bivariablemap<k  v> implements map<k  v>
private final localcontextprovider provider
private final list<string> varnames   new arraylist<string>
private final list<bivariable> variables   new arraylist<bivariable>
private boolean lazy
/**
* constructs an empty map. users do not instantiate this map. the map is created
* internally.
*
* @param runtime is environment where variables are used to execute ruby scripts.
* @param behavior is one of variable behaviors defined in variablebehavior.
*/
public bivariablemap localcontextprovider provider  boolean lazy
this provider   provider
this lazy   lazy
/**
* returns a list of all names in this map.
*
* @return a list of all names.
*/
public list<string> getnames
return varnames
/**
* returns a list of all values in this map.
*
* @return a list of all values.
*/
public list<bivariable> getvariables
return variables
/**
* returns a local variable behavior
*
* @return a local variable behavior
*/
public localvariablebehavior getlocalvariablebehavior
return provider getlocalvariablebehavior
/**
* returns a map whose value is a java object not a bivariable type object.
*
* @return a map of key and value pair, in which values are simple java objects.
*/
public map getmap
map m   new hashmap
for  bivariable v   variables
m put v getname    v getjavaobject
return m
/**
* returns the number of key-value mappings in this map.
*
* @return the number of key-value mappings in this map
*/
public int size
return varnames size
/**
* returns <tt>true</tt> if this map contains no key-value mappings.
*
* @return <tt>true</tt> if this map contains no key-value mappings
*/
public boolean isempty
return varnames isempty
private void checkkey object key
if  key    null
throw new nullpointerexception
if    key instanceof string
throw new classcastexception
if    string key  length      0
throw new illegalargumentexception
/**
* returns <tt>true</tt> if this map contains a mapping for the specified
* key.
*
* @param key is a key to be tested its presence
* @return <tt>true</tt> if this map contains a mapping for the specified key
*/
public boolean containskey object key
checkkey key
return varnames contains  string key
/**
* returns <tt>true</tt> if this map maps one or more keys to the
* specified value.
*
* @param value is a java object to be tested it presence
* @return returns <tt>true</tt> if this map maps one or more keys to the
* specified value.
*/
public boolean containsvalue object value
iterator itr   variables iterator
while  itr hasnext
bivariable v    bivariable itr next
if  value    v getjavaobject
return true
return false
/**
* returns the value in simple java object to which the specified key is mapped,
* or {@code null} if this map contains no mapping for the key.
*
* @param key is the key whose associated value is to be returned
* @return the value in simple java object to which the specified key is mapped, or
*         {@code null} if this map contains no mapping for the key
*/
public v get object key
return get provider getruntime   gettopself    key
/**
* returns the value in simple java object to which the specified receiver
* and key is mapped, or {@code null} if this map contains no mapping
* for the key in a given receiver.
*
* @param receiver is a receiver object to get the value from
* @param key is the key whose associated value is to be returned
* @return the value in simple java object to which the specified key is mapped, or
*         {@code null} if this map contains no mapping for the key
*/
public v get object receiver  object key
checkkey key
rubyobject robj   getreceiverobject receiver
// attemps to retrieve global variables
if  lazy  variableinterceptor trylazyretrieval provider getlocalvariablebehavior    this  robj  key
bivariable var   getvariable robj   string key
if  var    null  return null
else return  v  var getjavaobject
private rubyobject getreceiverobject object receiver
if  receiver    null      receiver instanceof irubyobject   return  rubyobject provider getruntime   gettopself
else if  receiver instanceof rubyobject  return  rubyobject receiver
else return  rubyobject   irubyobject receiver  getruntime   gettopself
/**
* returns the value in bivariable type to which the specified key is mapped,
* or {@code null} if this map contains no mapping for the key.
*
* @param key is the key whose associated bivariable object is to be returned
* @return the bivariable type object to which the specified key is mapped, or
*         {@code null} if this map contains no mapping for the key
*/
@deprecated
public bivariable getvariable string key
return getvariable  rubyobject provider getruntime   gettopself    key
/**
* returns the value in bivariable type to which the specified key is mapped,
* or {@code null} if this map contains no mapping for the key.
*
* @param receiver is a receiver object to get key-value pair from
* @param key is the key whose associated bivariable object is to be returned
* @return the bivariable type object to which the specified key is mapped, or
*         {@code null} if this map contains no mapping for the key
*/
public bivariable getvariable rubyobject receiver  string key
for  int i 0  i<varnames size    i
if  key equals varnames get i
bivariable var   null
while  var    null
try
var   variables get i
catch  exception e
var   null
if  var isreceiveridentical receiver
return var
return null
@deprecated
public void setvariable bivariable var
setvariable  rubyobject provider getruntime   gettopself    var
public void setvariable rubyobject receiver  bivariable var
if  var    null
return
string key   var getname
bivariable old   getvariable receiver  key
if  old    null
// updates the value of an existing key-value pair
old setjavaobject receiver getruntime    var getjavaobject
else
update key  var
/**
* associates the specified value with the specified key in this map.
* the values is a simple java object. if the map previously contained a mapping for
* the key, the old value is replaced by the specified value.
*
* @param key the key with which the specified value is to be associated
* @param value a simple java object to be associated with the specified key
* @return the previous value associated with <tt>key</tt>, or
*         <tt>null</tt> if there was no mapping for <tt>key</tt>.
*/
public v put  k key  v value
return put provider getruntime   gettopself    key  value
/**
* associates the specified value with the specified key in this map.
* the values is a simple java object. if the map previously contained a mapping for
* the key, the old value is replaced by the specified value.
*
* @param receiver a receiver object to associate a given key-value pair with
* @param key the key with which the specified value is to be associated
* @param value a simple java object to be associated with the specified key
* @return the previous value associated with <tt>key</tt>, or
*         <tt>null</tt> if there was no mapping for <tt>key</tt>.
*/
public v put  object receiver  k key  v value
checkkey key
rubyobject robj   getreceiverobject receiver
string name     string key  intern
bivariable v   getvariable robj  name
object oldvalue   null
if  v    null
// updates
oldvalue   v getjavaobject
v setjavaobject robj getruntime    value
else
// creates new value
v   variableinterceptor getvariableinstance provider getlocalvariablebehavior    robj  name  value
if  v    null
update name  v
return  v oldvalue
/**
* returns ruby's local variable names this map has. the returned array is mainly
* used to inject local variables to ruby scripts while parsing.
*
* @return string array of ruby's local variable names
*/
public string getlocalvarnames
list<string> localvarnames   new arraylist<string>
for  bivariable v   variables
if  v gettype      bivariable type localvariable
localvarnames add v getname
if  localvarnames size   > 0
return localvarnames toarray new string
return null
/**
* returns ruby's local variable values this map has. the returned array is
* mainly used to inject local variables to ruby scripts while evaluating.
*
* @return irubyobject array of ruby's local variable names.
*/
public irubyobject getlocalvarvalues
list<irubyobject> localvarvalues   new arraylist<irubyobject>
for  bivariable v   variables
if  v gettype      bivariable type localvariable
localvarvalues add v getrubyobject
if  localvarvalues size   > 0
return localvarvalues toarray new irubyobject
return null
void inject manyvarsdynamicscope scope  int depth  irubyobject receiver
variableinterceptor inject this  provider getruntime    scope  depth  receiver
void retrieve irubyobject receiver
rubyobject robj   getreceiverobject receiver
variableinterceptor retrieve provider getlocalvariablebehavior    this  robj
void terminate
variableinterceptor terminateglobalvariables provider getlocalvariablebehavior    variables  provider getruntime
variableinterceptor terminatelocalvariables provider getlocalvariablebehavior    varnames  variables
/**
* removes the mapping for a key from this map if it is present in a top level.
*
* <p>returns the value to which this map previously associated the key,
* or <tt>null</tt> if the map contained no mapping for the key.
* @param key the key whose mapping is to be removed from the map
* @return the previous value associated with <tt>key</tt>, or
*         <tt>null</tt> if there was no mapping for <tt>key</tt>.
*/
public v remove object key
return remove provider getruntime   gettopself    key
/**
* removes the mapping for a key from this map if it is present in a given
* receiver.
*
* <p>returns the value to which this map previously associated the key,
* or <tt>null</tt> if the map contained no mapping for the key.
* @param key the key whose mapping is to be removed from the map
* @return the previous value associated with <tt>key</tt>, or
*         <tt>null</tt> if there was no mapping for <tt>key</tt>.
*/
public v remove object receiver  object key
checkkey key
rubyobject robj   getreceiverobject receiver
string name     string key  intern
for  int i 0  i<varnames size    i
if  name equals varnames get i
bivariable var   variables get i
if  var getreceiver      robj
varnames remove i
bivariable v   variables remove i
v remove
return  v v getjavaobject
return null
/**
* copies all of the mappings from the specified map to this map.
*
* @param t mappings to be stored in this map
*/
public void putall map<? extends k  ? extends v> t
if  t    null
throw new nullpointerexception
if  t isempty
throw new illegalargumentexception
set set   t entryset
iterator itr   set iterator
while  itr hasnext
map entry entry    map entry itr next
if  entry getkey   instanceof string
k key    k entry getkey
v value    v entry getvalue
put key  value
else
throw new classcastexception
/**
* removes all of the mappings from this map.
* the map will be empty after this call returns. ruby variables are also
* removed from ruby instance. however, ruby instance keep having global variable
* names with null value.
*/
public void clear
varnames clear
for  bivariable v   variables
if  v    null
v remove
variables clear
/**
* returns a {@link set} view of the keys contained in this map.
* the set is backed by the map, so changes to the map should be
* reflected in the set, and vice-versa. however, the implementation
* does not reflect changes currently.
*
* @return a set view of the keys contained in this map
*/
public set keyset
if  varnames isempty
return null
set s   new hashset
for  string name   varnames
s add name
return s
/**
* returns a {@link collection} view of the values contained in this map.
* the collection is backed by the map, so changes to the map should be
* reflected in the collection, and vice-versa. however, the implementation
* does not reflect changes currently.
*
* @return a collection view of the values contained in this map
*/
public collection values
if  varnames isempty
return null
list l   new arraylist
for  bivariable v   variables
l add v getjavaobject
return l
/**
* returns a {@link set} view of the mappings contained in this map.
* the set is backed by the map, so changes to the map should be
* reflected in the set, and vice-versa. however, the implementation
* does not reflect changes currently.
*
* @return an entry set of a map
*/
public set entryset
if  varnames isempty
return null
return getmap   entryset
/**
* adds a key-value pair of ruby local variable to double array.
*
* @param name is a ruby's local variable name
* @param value is bivariable type object corresponding to the name
*/
public void update string name  bivariable value
varnames add name
variables add value
/**
* returns true when eager retrieval is requird or false when eager retrieval is
* unnecessary.
*
* @return true for eager retrieve, false for on-demand retrieval
*/
public boolean islazy
return lazy