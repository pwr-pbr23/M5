/**
* **** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2009-2010 yoko harada <yokolet@gmail.com>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
* **** end license block *****
*/
package org jruby embed internal
import java io ioexception
import java io printwriter
import java io writer
import org jruby ruby
import org jruby rubyinstanceconfig compilemode
import org jruby rubysystemexit
import org jruby ast node
import org jruby ast executable script
import org jruby embed attributename
import org jruby embed embedevalunit
import org jruby embed evalfailedexception
import org jruby embed scriptingcontainer
import org jruby exceptions raiseexception
import org jruby runtime builtin irubyobject
import org jruby runtime scope manyvarsdynamicscope
/**
* implementation of org.jruby.javasupport.javaembedutils.evalunit for embeddiing.
* this class is created when a ruby script has been parsed. once parsed, the script
* is ready to run many times without parsing.
*
* <p>users do not instantiate explicitly. instead, they can get the instance by parsing
* ruby script by parse method of {@link scriptingcontainer}.
*
* @author yoko harada <yokolet@gmail.com>
*/
public class embedevalunitimpl implements embedevalunit
private scriptingcontainer container
private node node
private manyvarsdynamicscope scope
private script script
public embedevalunitimpl scriptingcontainer container  node node  manyvarsdynamicscope scope
this container  node  scope  null
public embedevalunitimpl scriptingcontainer container  node node  manyvarsdynamicscope scope  script script
this container   container
this node   node
this scope   scope
this script   script
/**
* returns a root node of parsed ruby script.
*
* @return a root node of parsed ruby script
*/
public node getnode
return node
/**
* returns a manyvarsdynamicscope used to parse a script. a returned value
* is used to inject ruby's local variable when script is evaluated.
*
* @return a scope to refer local variables
*/
public manyvarsdynamicscope getscope
return scope
/**
* evaluates a ruby script, which has been parsed before.
*
* @return results of executing this evaluation unit
*/
public irubyobject run
if  node    null    script    null
return null
ruby runtime   container getprovider   getruntime
bivariablemap vars   container getvarmap
boolean sharing_variables   true
object obj   container getattribute attributename sharing_variables
if  obj    null    obj instanceof boolean      boolean  obj     false
sharing_variables   false
try
if  sharing_variables
vars inject scope  0  null
runtime getcurrentcontext   pushscope scope
irubyobject ret
compilemode mode   runtime getinstanceconfig   getcompilemode
if  mode    compilemode force
ret   runtime runscriptbody script
else
ret   runtime runinterpreter node
if  sharing_variables
vars retrieve ret
return ret
catch  raiseexception e
// handle exits as simple script termination
if  e getexception   instanceof rubysystemexit
return   rubysystemexit e getexception    status
runtime printerror e getexception
throw new evalfailedexception e getmessage    e
catch  stackoverflowerror soe
throw runtime newsystemstackerror    soe
catch  throwable e
throw new evalfailedexception e
finally
if  sharing_variables
runtime getcurrentcontext   popscope
vars terminate
/* below lines doesn't work. neither does classcache.flush(). how to clear cache?
classcache classcache = javaembedutils.createclasscache(getruntime().getclassloader());
getruntime().getinstanceconfig().setclasscache(classcache);
*/