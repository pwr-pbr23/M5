/*
**** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2001 alan moore <alan_moore@gmx.net>
* copyright (c) 2001-2002 benoit cerrina <b.cerrina@wanadoo.fr>
* copyright (c) 2001-2004 jan arne petersen <jpetersen@uni-bonn.de>
* copyright (c) 2002-2004 anders bengtsson <ndrsbngtssn@yahoo.se>
* copyright (c) 2002-2006 thomas e enebo <enebo@acm.org>
* copyright (c) 2004 stefan matthias aust <sma@3plus4.de>
* copyright (c) 2004 david corbin <dcorbin@users.sourceforge.net>
* copyright (c) 2005 tim azzopardi <tim@tigerfive.com>
* copyright (c) 2006 miguel covarrubias <mlcovarrubias@gmail.com>
* copyright (c) 2006 ola bini <ola@ologix.com>
* copyright (c) 2007 nick sieger <nicksieger@gmail.com>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby
import static org jruby compatversion ruby1_8
import static org jruby compatversion ruby1_9
import static org jruby rubyenumerator enumeratorize
import static org jruby anno framefield backref
import static org jruby javasupport util runtimehelpers invokedynamic
import static org jruby runtime methodindex op_cmp
import static org jruby runtime methodindex op_equal
import static org jruby runtime visibility private
import static org jruby util stringsupport cr_7bit
import static org jruby util stringsupport cr_broken
import static org jruby util stringsupport cr_mask
import static org jruby util stringsupport cr_unknown
import static org jruby util stringsupport cr_valid
import static org jruby util stringsupport codelength
import static org jruby util stringsupport codepoint
import static org jruby util stringsupport coderangescan
import static org jruby util stringsupport searchnonascii
import static org jruby util stringsupport strlengthwithcoderange
import static org jruby util stringsupport tolower
import static org jruby util stringsupport toupper
import static org jruby util stringsupport unpackarg
import static org jruby util stringsupport unpackresult
import java io unsupportedencodingexception
import java nio bytebuffer
import java nio charset charactercodingexception
import java nio charset charset
import java nio charset charsetdecoder
import java nio charset charsetencoder
import java nio charset codingerroraction
import java util hashset
import java util locale
import java util set
import org jcodings encoding
import org jcodings encodingdb
import org jcodings ascii asciitables
import org jcodings constants charactertype
import org jcodings specific asciiencoding
import org jcodings specific usasciiencoding
import org jcodings specific utf8encoding
import org jcodings util caseinsensitivebyteshash
import org jcodings util inthash
import org joni matcher
import org joni option
import org joni regex
import org joni region
import org jruby anno jrubyclass
import org jruby anno jrubymethod
import org jruby javasupport util runtimehelpers
import org jruby runtime block
import org jruby runtime classindex
import org jruby runtime dynamicscope
import org jruby runtime objectallocator
import org jruby runtime threadcontext
import org jruby runtime builtin irubyobject
import org jruby runtime encoding encodingcapable
import org jruby runtime marshal unmarshalstream
import org jruby util bytelist
import org jruby util convertbytes
import org jruby util murmurhash
import org jruby util numeric
import org jruby util pack
import org jruby util regexpoptions
import org jruby util sprintf
import org jruby util stringsupport
import org jruby util typeconverter
import org jruby util log logger
import org jruby util log loggerfactory
import org jruby util string javacrypt
/**
* implementation of ruby string class
*
* concurrency: no synchronization is required among readers, but
* all users must synchronize externally with writers.
*
*/
@jrubyclass name    include
public class rubystring extends rubyobject implements encodingcapable
private static final logger log   loggerfactory getlogger
private static final asciiencoding ascii   asciiencoding instance
private static final utf8encoding utf8   utf8encoding instance
private static final byte empty_byte_array   new byte
// string doesn't share any resources
private static final int share_level_none   0
// string has it's own bytelist, but it's pointing to a shared buffer (byte[])
private static final int share_level_buffer   1
// string doesn't have it's own bytelist (values)
private static final int share_level_bytelist   2
private volatile int sharelevel   share_level_none
private bytelist value
public static rubyclass createstringclass ruby runtime
rubyclass stringclass   runtime defineclass    runtime getobject    string_allocator
runtime setstring stringclass
stringclass index   classindex string
stringclass setreifiedclass rubystring class
stringclass kindof   new rubymodule kindof
@override
public boolean iskindof irubyobject obj  rubymodule type
return obj instanceof rubystring
stringclass includemodule runtime getcomparable
if   runtime is1_9    stringclass includemodule runtime getenumerable
stringclass defineannotatedmethods rubystring class
return stringclass
private static objectallocator string_allocator   new objectallocator
public irubyobject allocate ruby runtime  rubyclass klass
return rubystring newemptystring runtime  klass
public encoding getencoding
return value getencoding
public void setencoding encoding encoding
value setencoding encoding
public void associateencoding encoding enc
if  value getencoding      enc
if   iscoderangeasciionly       enc isasciicompatible    clearcoderange
value setencoding enc
public final void setencodingandcoderange encoding enc  int cr
value setencoding enc
setcoderange cr
public final encoding toencoding ruby runtime
return runtime getencodingservice   findencoding this
public final int getcoderange
return flags   cr_mask
public final void setcoderange int coderange
clearcoderange
flags    coderange   cr_mask
public final void clearcoderange
flags    ~cr_mask
private void keepcoderange
if  getcoderange      cr_broken  clearcoderange
// enc_coderange_asciionly
public final boolean iscoderangeasciionly
return getcoderange      cr_7bit
// rb_enc_str_asciionly_p
public final boolean isasciionly
return value getencoding   isasciicompatible      scanforcoderange      cr_7bit
public final boolean iscoderangevalid
return  flags   cr_valid     0
public final boolean iscoderangebroken
return  flags   cr_broken     0
static int coderangeand int cr1  int cr2
if  cr1    cr_7bit  return cr2
if  cr1    cr_valid  return cr2    cr_7bit ? cr_valid   cr2
return cr_unknown
private void copycoderangeforsubstr rubystring from  encoding enc
int fromcr   from getcoderange
if  fromcr    cr_7bit
setcoderange fromcr
else if  fromcr    cr_valid
if   enc isasciicompatible      searchnonascii value      1
setcoderange cr_valid
else
setcoderange cr_7bit
else
if  value getrealsize      0
setcoderange  enc isasciicompatible   ? cr_valid   cr_7bit
private void copycoderange rubystring from
value setencoding from value getencoding
setcoderange from getcoderange
// rb_enc_str_coderange
final int scanforcoderange
int cr   getcoderange
if  cr    cr_unknown
cr   coderangescan value getencoding    value
setcoderange cr
return cr
final boolean singlebyteoptimizable
return getcoderange      cr_7bit    value getencoding   issinglebyte
final boolean singlebyteoptimizable encoding enc
return getcoderange      cr_7bit    enc issinglebyte
private encoding iscompatiblewith rubystring other
encoding enc1   value getencoding
encoding enc2   other value getencoding
if  enc1    enc2  return enc1
if  other value getrealsize      0  return enc1
if  value getrealsize      0  return enc2
if   enc1 isasciicompatible       enc2 isasciicompatible    return null
return rubyencoding arecompatible enc1  scanforcoderange    enc2  other scanforcoderange
final encoding iscompatiblewith encodingcapable other
if  other instanceof rubystring  return checkencoding  rubystring other
encoding enc1   value getencoding
encoding enc2   other getencoding
if  enc1    enc2  return enc1
if  value getrealsize      0  return enc2
if   enc1 isasciicompatible       enc2 isasciicompatible    return null
if  enc2 instanceof usasciiencoding  return enc1
if  scanforcoderange      cr_7bit  return enc2
return null
public final encoding checkencoding rubystring other
encoding enc   iscompatiblewith other
if  enc    null  throw getruntime   newencodingcompatibilityerror
value getencoding         other value getencoding
return enc
final encoding checkencoding encodingcapable other
encoding enc   iscompatiblewith other
if  enc    null  throw getruntime   newencodingcompatibilityerror
value getencoding         other getencoding
return enc
private encoding checkdummyencoding
encoding enc   value getencoding
if  enc isdummy    throw getruntime   newencodingcompatibilityerror
enc
return enc
private boolean iscomparablewith rubystring other
bytelist othervalue   other value
if  value getencoding      othervalue getencoding
value getrealsize      0    othervalue getrealsize      0  return true
return iscomparableviacoderangewith other
private boolean iscomparableviacoderangewith rubystring other
int cr1   scanforcoderange
int cr2   other scanforcoderange
if  cr1    cr_7bit     cr2    cr_7bit    other value getencoding   isasciicompatible     return true
if  cr2    cr_7bit    value getencoding   isasciicompatible    return true
return false
private int strlength encoding enc
if  singlebyteoptimizable enc   return value getrealsize
return strlength value  enc
public final int strlength
if  singlebyteoptimizable    return value getrealsize
return strlength value
private int strlength bytelist bytes
return strlength bytes  bytes getencoding
private int strlength bytelist bytes  encoding enc
if  iscoderangevalid      enc instanceof utf8encoding  return stringsupport utf8length value
long lencr   strlengthwithcoderange bytes  enc
int cr   unpackarg lencr
if  cr    0  setcoderange cr
return unpackresult lencr
final int sublength int pos
if  singlebyteoptimizable      pos < 0  return pos
return stringsupport strlength value getencoding    value getunsafebytes    value getbegin    value getbegin     pos
/** short circuit for string key comparison
*
*/
@override
public final boolean eql irubyobject other
ruby runtime   getruntime
if  getmetaclass      runtime getstring      getmetaclass      other getmetaclass    return super eql other
return runtime is1_9   ? eql19 runtime  other    eql18 runtime  other
private boolean eql18 ruby runtime  irubyobject other
return value equal   rubystring other  value
// rb_str_hash_cmp
private boolean eql19 ruby runtime  irubyobject other
rubystring otherstring    rubystring other
return iscomparablewith otherstring     value equal   rubystring other  value
public rubystring ruby runtime  rubyclass rubyclass
this runtime  rubyclass  empty_byte_array
public rubystring ruby runtime  rubyclass rubyclass  charsequence value
super runtime  rubyclass
assert value    null
charset charset   null
encoding defaultencoding   runtime getencodingservice   getlocaleencoding
if  defaultencoding    null  defaultencoding   utf8
charset   defaultencoding getcharset
byte bytes   rubyencoding encode value  charset
this value   new bytelist bytes  defaultencoding  false
public rubystring ruby runtime  rubyclass rubyclass  byte value
super runtime  rubyclass
assert value    null
this value   new bytelist value
public rubystring ruby runtime  rubyclass rubyclass  bytelist value
super runtime  rubyclass
assert value    null
this value   value
public rubystring ruby runtime  rubyclass rubyclass  bytelist value  boolean objectspace
super runtime  rubyclass  objectspace
assert value    null
this value   value
public rubystring ruby runtime  rubyclass rubyclass  bytelist value  encoding encoding  boolean objectspace
this runtime  rubyclass  value  objectspace
value setencoding encoding
protected rubystring ruby runtime  rubyclass rubyclass  bytelist value  encoding enc  int cr
this runtime  rubyclass  value
value setencoding enc
flags    cr
protected rubystring ruby runtime  rubyclass rubyclass  bytelist value  encoding enc
this runtime  rubyclass  value
value setencoding enc
protected rubystring ruby runtime  rubyclass rubyclass  bytelist value  int cr
this runtime  rubyclass  value
flags    cr
// deprecated string construction routines
/** create a new string which uses the same ruby runtime and the same
*  class like this string.
*
*  this method should be used to satisfy rcr #38.
*  @deprecated
*/
@deprecated
public rubystring newstring charsequence s
return new rubystring getruntime    gettype    s
/** create a new string which uses the same ruby runtime and the same
*  class like this string.
*
*  this method should be used to satisfy rcr #38.
*  @deprecated
*/
@deprecated
public rubystring newstring bytelist s
return new rubystring getruntime    getmetaclass    s
@deprecated
public static rubystring newstring ruby runtime  rubyclass clazz  charsequence str
return new rubystring runtime  clazz  str
public static rubystring newstringlight ruby runtime  bytelist bytes
return new rubystring runtime  runtime getstring    bytes  false
public static rubystring newstringlight ruby runtime  int size
return new rubystring runtime  runtime getstring    new bytelist size   false
public static rubystring newstringlight ruby runtime  int size  encoding encoding
return new rubystring runtime  runtime getstring    new bytelist size   encoding  false
public static rubystring newstring ruby runtime  charsequence str
return new rubystring runtime  runtime getstring    str
public static rubystring newstring ruby runtime  string str
return new rubystring runtime  runtime getstring    str
public static rubystring newstring ruby runtime  byte bytes
return new rubystring runtime  runtime getstring    bytes
public static rubystring newstring ruby runtime  byte bytes  int start  int length
byte copy   new byte
system arraycopy bytes  start  copy  0  length
return new rubystring runtime  runtime getstring    new bytelist copy  false
public static rubystring newstring ruby runtime  bytelist bytes
return new rubystring runtime  runtime getstring    bytes
public static rubystring newstring ruby runtime  bytelist bytes  encoding encoding
return new rubystring runtime  runtime getstring    bytes  encoding
public static rubystring newunicodestring ruby runtime  string str
bytelist bytelist   new bytelist rubyencoding encodeutf8 str   utf8encoding instance  false
return new rubystring runtime  runtime getstring    bytelist
public static rubystring newunicodestring ruby runtime  charsequence str
bytelist bytelist   new bytelist rubyencoding encodeutf8 str   utf8encoding instance  false
return new rubystring runtime  runtime getstring    bytelist
/**
* return a new ruby string encoded as the default internal encoding given a java string that
* has come from an external source. if there is no default internal encoding set, the ruby
* string will be encoded using java's default external encoding. if an internal encoding is
* set, that encoding will be used for the ruby string.
*
* @param runtime
* @param str
* @return
*/
public static rubystring newinternalfromjavaexternal ruby runtime  string str
// ruby internal
encoding internal   runtime getdefaultinternalencoding
charset rubyint   null
if  internal    null    internal getcharset      null  rubyint   internal getcharset
// java external, used if no internal
charset javaext   charset defaultcharset
encoding javaextencoding   runtime getencodingservice   getjavadefault
if  rubyint    null
return rubystring newstring
runtime
new bytelist str getbytes    javaextencoding
else
return rubystring newstring
runtime
new bytelist rubyencoding encode str  rubyint   internal
// string construction routines by not byte[] buffer and making the target string shared
public static rubystring newstringshared ruby runtime  rubystring orig
orig sharelevel   share_level_bytelist
rubystring str   new rubystring runtime  runtime getstring    orig value
str sharelevel   share_level_bytelist
return str
public static rubystring newstringshared ruby runtime  bytelist bytes
return newstringshared runtime  runtime getstring    bytes
public static rubystring newstringshared ruby runtime  bytelist bytes  encoding encoding
return newstringshared runtime  runtime getstring    bytes  encoding
public static rubystring newstringshared ruby runtime  bytelist bytes  int coderange
rubystring str   new rubystring runtime  runtime getstring    bytes  coderange
str sharelevel   share_level_bytelist
return str
public static rubystring newstringshared ruby runtime  rubyclass clazz  bytelist bytes
rubystring str   new rubystring runtime  clazz  bytes
str sharelevel   share_level_bytelist
return str
public static rubystring newstringshared ruby runtime  rubyclass clazz  bytelist bytes  encoding encoding
rubystring str   new rubystring runtime  clazz  bytes  encoding
str sharelevel   share_level_bytelist
return str
public static rubystring newstringshared ruby runtime  byte bytes
return newstringshared runtime  new bytelist bytes  false
public static rubystring newstringshared ruby runtime  byte bytes  int start  int length
return newstringshared runtime  new bytelist bytes  start  length  false
public static rubystring newemptystring ruby runtime
return newemptystring runtime  runtime getstring
public static rubystring newemptystring ruby runtime  rubyclass metaclass
rubystring empty   new rubystring runtime  metaclass  bytelist empty_bytelist
empty sharelevel   share_level_bytelist
return empty
// string construction routines by not byte[] buffer and not making the target string shared
public static rubystring newstringnocopy ruby runtime  bytelist bytes
return newstringnocopy runtime  runtime getstring    bytes
public static rubystring newstringnocopy ruby runtime  rubyclass clazz  bytelist bytes
return new rubystring runtime  clazz  bytes
public static rubystring newstringnocopy ruby runtime  byte bytes  int start  int length
return newstringnocopy runtime  new bytelist bytes  start  length  false
public static rubystring newstringnocopy ruby runtime  byte bytes
return newstringnocopy runtime  new bytelist bytes  false
/** encoding aware string construction routines for 1.9
*
*/
private static final class emptybytelistholder
final bytelist bytes
final int cr
emptybytelistholder encoding enc
this bytes   new bytelist bytelist null_array  enc
this cr   bytes getencoding   isasciicompatible   ? cr_7bit   cr_valid
private static emptybytelistholder empty_bytelists   new emptybytelistholder
static emptybytelistholder getemptybytelist encoding enc
if  enc    null  enc   asciiencoding instance
int index   enc getindex
emptybytelistholder bytes
if  index < empty_bytelists length     bytes   empty_bytelists     null
return bytes
return prepareemptybytelist enc
private static emptybytelistholder prepareemptybytelist encoding enc
if  enc    null  enc   asciiencoding instance
int index   enc getindex
if  index >  empty_bytelists length
emptybytelistholder tmp   new emptybytelistholder
system arraycopy empty_bytelists 0  tmp  0  empty_bytelists length
empty_bytelists   tmp
return empty_bytelists   new emptybytelistholder enc
public static rubystring newemptystring ruby runtime  rubyclass metaclass  encoding enc
emptybytelistholder holder   getemptybytelist enc
rubystring empty   new rubystring runtime  metaclass  holder bytes  holder cr
empty sharelevel   share_level_bytelist
return empty
public static rubystring newemptystring ruby runtime  encoding enc
return newemptystring runtime  runtime getstring    enc
public static rubystring newstringnocopy ruby runtime  rubyclass clazz  bytelist bytes  encoding enc  int cr
return new rubystring runtime  clazz  bytes  enc  cr
public static rubystring newstringnocopy ruby runtime  bytelist bytes  encoding enc  int cr
return newstringnocopy runtime  runtime getstring    bytes  enc  cr
public static rubystring newusasciistringnocopy ruby runtime  bytelist bytes
return newstringnocopy runtime  bytes  usasciiencoding instance  cr_7bit
public static rubystring newusasciistringshared ruby runtime  bytelist bytes
rubystring str   newstringnocopy runtime  bytes  usasciiencoding instance  cr_7bit
str sharelevel   share_level_bytelist
return str
public static rubystring newusasciistringshared ruby runtime  byte bytes  int start  int length
byte copy   new byte
system arraycopy bytes  start  copy  0  length
return newusasciistringshared runtime  new bytelist copy  false
@override
public int getnativetypeindex
return classindex string
@override
public class getjavaclass
return string class
@override
public rubystring converttostring
return this
@override
public string tostring
return decodestring
/**
* convert this ruby string to a java string. this version is encoding-aware.
*
* @return a decoded java string, based on this ruby string's encoding.
*/
public string decodestring
ruby runtime   getruntime
// note: we always choose utf-8 for outbound strings in 1.8 mode.  this is clearly undesirable
// but we do not mark any incoming strings from ji with their real encoding so we just pick utf-8.
if  runtime is1_9
encoding encoding   getencoding
if  encoding    utf8
// faster utf8 decoding
return rubyencoding decodeutf8 value getunsafebytes    value begin    value length
charset charset   runtime getencodingservice   charsetforencoding encoding
encoding getcharset
// charset is not defined for this encoding in jcodings db.  try letting java resolve this.
if  charset    null
try
return new string value getunsafebytes    value begin    value length    encoding tostring
catch  unsupportedencodingexception uee
return value tostring
return rubyencoding decode value getunsafebytes    value begin    value length    charset
else
// fast utf8 decoding
return rubyencoding decodeutf8 value getunsafebytes    value begin    value length
/**
* overridden dup for fast-path logic.
*
* @return a new rubystring sharing the original backing store.
*/
@override
public irubyobject dup
rubyclass mc   metaclass getrealclass
if  mc index    classindex string  return super dup
return strdup mc getclassruntime    mc getrealclass
/** rb_str_dup
*
*/
@deprecated
public final rubystring strdup
return strdup getruntime    getmetaclass
public final rubystring strdup ruby runtime
return strdup runtime  getmetaclass
@deprecated
final rubystring strdup rubyclass clazz
return strdup getruntime    getmetaclass
final rubystring strdup ruby runtime  rubyclass clazz
sharelevel   share_level_bytelist
rubystring dup   new rubystring runtime  clazz  value
dup sharelevel   share_level_bytelist
dup flags    flags    cr_mask   tainted_f   untrusted_f
return dup
/* rb_str_subseq */
public final rubystring makesharedstring ruby runtime  int index  int len
return makeshared runtime  runtime getstring    index  len
public rubystring makesharedstring19 ruby runtime  int index  int len
return makeshared19 runtime  runtime getstring    value  index  len
public final rubystring makeshared ruby runtime  int index  int len
return makeshared runtime  gettype    index  len
public final rubystring makeshared ruby runtime  rubyclass meta  int index  int len
final rubystring shared
if  len    0
shared   newemptystring runtime  meta
else if  len    1
shared   newstringshared runtime  meta
rubyinteger single_char_bytelists   0xff]
else
if  sharelevel    share_level_none  sharelevel   share_level_buffer
shared   new rubystring runtime  meta  value makeshared index  len
shared sharelevel   share_level_buffer
shared infectby this
return shared
public final rubystring makeshared19 ruby runtime  int index  int len
return makeshared19 runtime  value  index  len
private rubystring makeshared19 ruby runtime  bytelist value  int index  int len
return makeshared19 runtime  gettype    value  index  len
private rubystring makeshared19 ruby runtime  rubyclass meta  bytelist value  int index  int len
final rubystring shared
encoding enc   value getencoding
if  len    0
shared   newemptystring runtime  meta  enc
else
if  sharelevel    share_level_none  sharelevel   share_level_buffer
shared   new rubystring runtime  meta  value makeshared index  len
shared sharelevel   share_level_buffer
shared copycoderangeforsubstr this  enc      no need to assign encoding  same bytelist shared
shared infectby this
return shared
public final void setbytelistshared
if  sharelevel    share_level_bytelist  sharelevel   share_level_bytelist
/**
* check that the string can be modified, raising error otherwise.
*
* if you plan to modify a string with shared backing store, this
* method is not sufficient; you will need to call modify() instead.
*/
public final void modifycheck
frozencheck
if   istaint      getruntime   getsafelevel   >  4
throw getruntime   newsecurityerror
private void modifycheck byte b  int len
if  value getunsafebytes      b    value getrealsize      len  throw getruntime   newruntimeerror
private void modifycheck byte b  int len  encoding enc
if  value getunsafebytes      b    value getrealsize      len    value getencoding      enc  throw getruntime   newruntimeerror
private void frozencheck
frozencheck false
private void frozencheck boolean runtimeerror
if  isfrozen    throw getruntime   newfrozenerror    runtimeerror
/** rb_str_modify
*
*/
public final void modify
modifycheck
if  sharelevel    share_level_none
if  sharelevel    share_level_bytelist
value   value dup
else
value unshare
sharelevel   share_level_none
value invalidate
public final void modify19
modify
clearcoderange
private void modifyandkeepcoderange
modify
keepcoderange
/** rb_str_modify (with length bytes ensured)
*
*/
public final void modify int length
modifycheck
if  sharelevel    share_level_none
if  sharelevel    share_level_bytelist
value   value dup length
else
value unshare length
sharelevel   share_level_none
else
value ensure length
value invalidate
public final void modify19 int length
modify length
clearcoderange
/** rb_str_resize
*/
public final void resize int length
modify
if  value getrealsize   > length
value setrealsize length
else if  value length   < length
value length length
public final void view bytelist bytes
modifycheck
value   bytes
sharelevel   share_level_none
private void view bytebytes
modifycheck
value   new bytelist bytes
sharelevel   share_level_none
value invalidate
private void view int index  int len
modifycheck
if  sharelevel    share_level_none
if  sharelevel    share_level_bytelist
// if len == 0 then shared empty
value   value makeshared index  len
sharelevel   share_level_buffer
else
value view index  len
else
value view index  len
// fixme this below is temporary, but its much safer for cow (it prevents not shared strings with begin != 0)
// this allows now e.g.: bytelist#set not to be begin aware
sharelevel   share_level_buffer
value invalidate
public static string bytestostring byte bytes  int beg  int len
return new string bytelist plain bytes  beg  len
public static string bytelisttostring bytelist bytes
return bytestostring bytes getunsafebytes    bytes begin    bytes length
public static string bytestostring byte bytes
return bytestostring bytes  0  bytes length
public static byte stringtobytes string string
return bytelist plain string
@override
public rubystring asstring
return this
@override
public irubyobject checkstringtype
return this
@override
public irubyobject checkstringtype19
return this
@jrubymethod name      meta   true  compat   ruby1_9
public static irubyobject try_convert threadcontext context  irubyobject recv  irubyobject str
return str checkstringtype
@jrubymethod name
@override
public irubyobject to_s
ruby runtime   getruntime
if  getmetaclass   getrealclass      runtime getstring
return strdup runtime  runtime getstring
return this
@override
public final int compareto irubyobject other
ruby runtime   getruntime
if  other instanceof rubystring
rubystring otherstring    rubystring other
return runtime is1_9   ? op_cmp19 otherstring    op_cmp otherstring
return  int op_cmpcommon runtime getcurrentcontext    other  converttointeger   getlongvalue
/* rb_str_cmp_m */
@jrubymethod name      compat   ruby1_8
@override
public irubyobject op_cmp threadcontext context  irubyobject other
if  other instanceof rubystring
return context getruntime   newfixnum op_cmp  rubystring other
return op_cmpcommon context  other
@jrubymethod name      compat   ruby1_9
public irubyobject op_cmp19 threadcontext context  irubyobject other
if  other instanceof rubystring
return context getruntime   newfixnum op_cmp19  rubystring other
return op_cmpcommon context  other
private irubyobject op_cmpcommon threadcontext context  irubyobject other
ruby runtime   context getruntime
// deal with case when "other" is not a string
if  other respondsto       other respondsto
irubyobject result   invokedynamic context  other  op_cmp  this
if  result isnil    return result
if  result instanceof rubyfixnum
return rubyfixnum newfixnum runtime     rubyfixnum result  getlongvalue
else
return rubyfixnum zero runtime  callmethod context     result
return runtime getnil
/** rb_str_equal
*
*/
@jrubymethod name      compat   ruby1_8
@override
public irubyobject op_equal threadcontext context  irubyobject other
ruby runtime   context getruntime
if  this    other  return runtime gettrue
if  other instanceof rubystring
return value equal   rubystring other  value  ? runtime gettrue     runtime getfalse
return op_equalcommon context  other
@jrubymethod name           compat   ruby1_9
public irubyobject op_equal19 threadcontext context  irubyobject other
ruby runtime   context getruntime
if  this    other  return runtime gettrue
if  other instanceof rubystring
rubystring otherstring    rubystring other
return iscomparablewith otherstring     value equal otherstring value  ? runtime gettrue     runtime getfalse
return op_equalcommon context  other
private irubyobject op_equalcommon threadcontext context  irubyobject other
ruby runtime   context getruntime
if   other respondsto     return runtime getfalse
return invokedynamic context  other  op_equal  this  istrue   ? runtime gettrue     runtime getfalse
@jrubymethod name      required   1  compat   ruby1_8
public irubyobject op_plus threadcontext context  irubyobject _str
rubystring str   _str converttostring
rubystring resultstr   newstring context getruntime    addbytelists value  str value
resultstr infectby flags   str flags
return resultstr
@jrubymethod name      required   1  compat   ruby1_9
public irubyobject op_plus19 threadcontext context  irubyobject _str
rubystring str   _str converttostring
encoding enc   checkencoding str
rubystring resultstr   newstringnocopy context getruntime    addbytelists value  str value
enc  coderangeand getcoderange    str getcoderange
resultstr infectby flags   str flags
return resultstr
private bytelist addbytelists bytelist value1  bytelist value2
bytelist result   new bytelist value1 getrealsize     value2 getrealsize
result setrealsize value1 getrealsize     value2 getrealsize
system arraycopy value1 getunsafebytes    value1 getbegin    result getunsafebytes    0  value1 getrealsize
system arraycopy value2 getunsafebytes    value2 getbegin    result getunsafebytes    value1 getrealsize    value2 getrealsize
return result
@jrubymethod name      required   1  compat   ruby1_8
public irubyobject op_mul threadcontext context  irubyobject other
return multiplybytelist context  other
@jrubymethod name      required   1  compat   ruby1_9
public irubyobject op_mul19 threadcontext context  irubyobject other
rubystring result   multiplybytelist context  other
result value setencoding value getencoding
result copycoderange this
return result
private rubystring multiplybytelist threadcontext context  irubyobject arg
int len   rubynumeric num2int arg
if  len < 0  throw context getruntime   newargumenterror
// we limit to int because bytebuffer can only allocate int sizes
if  len > 0    integer max_value   len < value getrealsize
throw context getruntime   newargumenterror
bytelist bytes   new bytelist len    value getrealsize
if  len > 0
bytes setrealsize len
int n   value getrealsize
system arraycopy value getunsafebytes    value getbegin    bytes getunsafebytes    0  n
while  n <  len >> 1
system arraycopy bytes getunsafebytes    0  bytes getunsafebytes    n  n
n <<  1
system arraycopy bytes getunsafebytes    0  bytes getunsafebytes    n  len   n
rubystring result   new rubystring context getruntime    getmetaclass    bytes
result infectby this
return result
@jrubymethod name      required   1
public irubyobject op_format threadcontext context  irubyobject arg
return opformatcommon context  arg  context getruntime   getinstanceconfig   getcompatversion
private irubyobject opformatcommon threadcontext context  irubyobject arg  compatversion compat
irubyobject tmp
if  context runtime is1_9      arg instanceof rubyhash
tmp   arg
else
tmp   arg checkarraytype
if  tmp isnil    tmp   arg
bytelist out   new bytelist value getrealsize
out setencoding value getencoding
boolean tainted
// fixme: should we make this work with platform's locale,
// or continue hardcoding us?
switch  compat
case ruby1_8
tainted   sprintf sprintf out  locale us  value  tmp
break
case ruby1_9
case ruby2_0
tainted   sprintf sprintf1_9 out  locale us  value  tmp
break
default
throw new runtimeexception     compat
rubystring str   newstring context getruntime    out
str settaint tainted    istaint
return str
@jrubymethod name
@override
public rubyfixnum hash
ruby runtime   getruntime
return rubyfixnum newfixnum runtime  strhashcode runtime
@override
public int hashcode
return strhashcode getruntime
/**
* generate a murmurhash for the string, using its associated ruby instance's hash seed.
*
* @param runtime
* @return
*/
public int strhashcode ruby runtime
int hash   murmurhash hash32 value getunsafebytes    value getbegin    value getrealsize    runtime gethashseed
if  runtime is1_9
hash ^   value getencoding   isasciicompatible      scanforcoderange      cr_7bit ? 0   value getencoding   getindex
return hash
/**
* generate a murmurhash for the string, without a seed.
*
* @param runtime
* @return
*/
public int unseededstrhashcode ruby runtime
int hash   murmurhash hash32 value getunsafebytes    value getbegin    value getrealsize    0
if  runtime is1_9
hash ^   value getencoding   isasciicompatible      scanforcoderange      cr_7bit ? 0   value getencoding   getindex
return hash
@override
public boolean equals object other
if  this    other  return true
if  other instanceof rubystring
if    rubystring  other  value equal value   return true
return false
/** rb_obj_as_string
*
*/
public static rubystring objasstring threadcontext context  irubyobject obj
if  obj instanceof rubystring  return  rubystring  obj
irubyobject str   obj callmethod context
if    str instanceof rubystring   return  rubystring  obj anytostring
if  obj istaint    str settaint true
return  rubystring  str
/** rb_str_cmp
*
*/
public final int op_cmp rubystring other
return value cmp other value
public final int op_cmp19 rubystring other
int ret   value cmp other value
if  ret    0     iscomparablewith other
return value getencoding   getindex   > other value getencoding   getindex   ? 1    1
return ret
/** rb_to_id
*
*/
@override
public string asjavastring
return tostring
public irubyobject doclone
return newstring getruntime    value dup
public final rubystring cat byte str
modify value getrealsize     str length
system arraycopy str  0  value getunsafebytes    value getbegin     value getrealsize    str length
value setrealsize value getrealsize     str length
return this
public final rubystring cat byte str  int beg  int len
modify value getrealsize     len
system arraycopy str  beg  value getunsafebytes    value getbegin     value getrealsize    len
value setrealsize value getrealsize     len
return this
// // rb_str_buf_append
public final rubystring cat19 rubystring str
bytelist other   str value
int othercr   cat other getunsafebytes    other getbegin    other getrealsize
other getencoding    str getcoderange
infectby str
str setcoderange othercr
return this
public final rubystring cat rubystring str
return cat str getbytelist
public final rubystring cat bytelist str
modify value getrealsize     str getrealsize
system arraycopy str getunsafebytes    str getbegin    value getunsafebytes    value getbegin     value getrealsize    str getrealsize
value setrealsize value getrealsize     str getrealsize
return this
public final rubystring cat byte ch
modify value getrealsize     1
value getunsafebytes     ch
value setrealsize value getrealsize     1
return this
public final rubystring cat int ch
return cat  byte ch
public final rubystring cat int code  encoding enc
int n   codelength getruntime    enc  code
modify value getrealsize     n
enc codetombc code  value getunsafebytes    value getbegin     value getrealsize
value setrealsize value getrealsize     n
return this
public final int cat bytebytes  int p  int len  encoding enc  int cr
modify value getrealsize     len
int tocr   getcoderange
encoding toenc   value getencoding
int cr2   cr
if  toenc    enc
if  tocr    cr_unknown     toenc    asciiencoding instance    tocr    cr_7bit
cr   cr_unknown
else if  cr    cr_unknown
cr   coderangescan enc  bytes  p  len
else
if   toenc isasciicompatible       enc isasciicompatible
if  len    0  return tocr
if  value getrealsize      0
system arraycopy bytes  p  value getunsafebytes    value getbegin     value getrealsize    len
value setrealsize value getrealsize     len
setencodingandcoderange enc  cr
return cr
throw getruntime   newencodingcompatibilityerror     toenc       enc
if  cr    cr_unknown  cr   coderangescan enc  bytes  p  len
if  tocr    cr_unknown
if  toenc    asciiencoding instance    cr    cr_7bit  tocr   scanforcoderange
if  cr2    0  cr2   cr
if  toenc    enc    tocr    cr_7bit    cr    cr_7bit
throw getruntime   newencodingcompatibilityerror     toenc       enc
final int rescr
final encoding resenc
if  tocr    cr_unknown
resenc   toenc
rescr   cr_unknown
else if  tocr    cr_7bit
if  cr    cr_7bit
resenc   toenc    asciiencoding instance ? toenc   enc
rescr   cr_7bit
else
resenc   enc
rescr   cr
else if  tocr    cr_valid
resenc   toenc
if  cr    cr_7bit    cr    cr_valid
rescr   tocr
else
rescr   cr
else
resenc   toenc
rescr   len > 0 ? cr_unknown   tocr
if  len < 0  throw getruntime   newargumenterror
system arraycopy bytes  p  value getunsafebytes    value getbegin     value getrealsize    len
value setrealsize value getrealsize     len
setencodingandcoderange resenc  rescr
return cr2
public final int cat bytebytes  int p  int len  encoding enc
return cat bytes  p  len  enc  cr_unknown
public final rubystring catascii bytebytes  int p  int len
encoding enc   value getencoding
if  enc isasciicompatible
cat bytes  p  len  enc  cr_7bit
else
byte buf   new byte
int end   p   len
while  p < end
int c   bytes
int cl   codelength getruntime    enc  c
enc codetombc c  buf  0
cat buf  0  cl  enc  cr_valid
p
return this
/** rb_str_replace_m
*
*/
@jrubymethod name           required   1  compat   ruby1_8
public irubyobject replace irubyobject other
if  this    other  return this
replacecommon other
return this
@jrubymethod name           required   1  compat   ruby1_9
public rubystring replace19 irubyobject other
modifycheck
if  this    other  return this
setcoderange replacecommon other  getcoderange        encoding doesn't have to be copied
return this
private rubystring replacecommon irubyobject other
modifycheck
rubystring otherstr   other converttostring
otherstr sharelevel   sharelevel   share_level_bytelist
value   otherstr value
infectby otherstr
return otherstr
@jrubymethod name      compat   ruby1_9
public rubystring clear
modifycheck
encoding enc   value getencoding
emptybytelistholder holder   getemptybytelist enc
value   holder bytes
sharelevel   share_level_bytelist
setcoderange holder cr
return this
@jrubymethod name      compat   ruby1_8
public irubyobject reverse threadcontext context
ruby runtime   context getruntime
if  value getrealsize   <  1  return strdup context getruntime
bytebytes   value getunsafebytes
int p   value getbegin
int len   value getrealsize
byteobytes   new byte
for  int i   0  i <  len >> 1  i
obytes   bytes
obytes   bytes
return new rubystring runtime  getmetaclass    new bytelist obytes  false   infectby this
@jrubymethod name      compat   ruby1_9
public irubyobject reverse19 threadcontext context
ruby runtime   context getruntime
if  value getrealsize   <  1  return strdup context getruntime
bytebytes   value getunsafebytes
int p   value getbegin
int len   value getrealsize
byteobytes   new byte
boolean single   true
encoding enc   value getencoding
// this really needs to be inlined here
if  singlebyteoptimizable enc
for  int i   0  i <  len >> 1  i
obytes   bytes
obytes   bytes
else
int end   p   len
int op   len
while  p < end
int cl   stringsupport length enc  bytes  p  end
if  cl > 1     bytes   0x80     0
single   false
op    cl
system arraycopy bytes  p  obytes  op  cl
p    cl
else
obytes   bytes
rubystring result   new rubystring runtime  getmetaclass    new bytelist obytes  false
if  getcoderange      cr_unknown  setcoderange single ? cr_7bit   cr_valid
encoding encoding   value getencoding
result value setencoding encoding
result copycoderangeforsubstr this  encoding
return result infectby this
@jrubymethod name      compat   ruby1_8
public rubystring reverse_bang threadcontext context
if  value getrealsize   > 1
modify
bytebytes   value getunsafebytes
int p   value getbegin
int len   value getrealsize
for  int i   0  i < len >> 1  i
byte b   bytes
bytes   bytes
bytes   b
return this
@jrubymethod name      compat   ruby1_9
public rubystring reverse_bang19 threadcontext context
modifycheck
if  value getrealsize   > 1
modifyandkeepcoderange
bytebytes   value getunsafebytes
int p   value getbegin
int len   value getrealsize
encoding enc   value getencoding
// this really needs to be inlined here
if  singlebyteoptimizable enc
for  int i   0  i < len >> 1  i
byte b   bytes
bytes   bytes
bytes   b
else
int end   p   len
int op   len
byteobytes   new byte
boolean single   true
while  p < end
int cl   stringsupport length enc  bytes  p  end
if  cl > 1     bytes   0x80     0
single   false
op    cl
system arraycopy bytes  p  obytes  op  cl
p    cl
else
obytes   bytes
value setunsafebytes obytes
if  getcoderange      cr_unknown  setcoderange single ? cr_7bit   cr_valid
return this
/** rb_str_s_new
*
*/
public static rubystring newinstance irubyobject recv  irubyobject args  block block
rubystring newstring   newstringshared recv getruntime    bytelist empty_bytelist
newstring setmetaclass  rubyclass  recv
newstring callinit args  block
return newstring
@jrubymethod visibility   private  compat   ruby1_8
@override
public irubyobject initialize threadcontext context
return this
@jrubymethod visibility   private  compat   ruby1_8
public irubyobject initialize threadcontext context  irubyobject arg0
replace arg0
return this
@jrubymethod name      visibility   private  compat   ruby1_9
@override
public irubyobject initialize19 threadcontext context
return this
@jrubymethod name      visibility   private  compat   ruby1_9
public irubyobject initialize19 threadcontext context  irubyobject arg0
replace19 arg0
return this
@jrubymethod compat   ruby1_8
public irubyobject casecmp threadcontext context  irubyobject other
return rubyfixnum newfixnum context getruntime    value caseinsensitivecmp other converttostring   value
@jrubymethod name      compat   ruby1_9
public irubyobject casecmp19 threadcontext context  irubyobject other
ruby runtime   context getruntime
rubystring otherstr   other converttostring
encoding enc   iscompatiblewith otherstr
if  enc    null  return runtime getnil
if  singlebyteoptimizable      otherstr singlebyteoptimizable
return rubyfixnum newfixnum runtime  value caseinsensitivecmp otherstr value
else
return multibytecasecmp runtime  enc  value  otherstr value
private irubyobject multibytecasecmp ruby runtime  encoding enc  bytelist value  bytelist othervalue
bytebytes   value getunsafebytes
int p   value getbegin
int end   p   value getrealsize
byteobytes   othervalue getunsafebytes
int op   othervalue getbegin
int oend   op   othervalue getrealsize
while  p < end    op < oend
final int c  oc
if  enc isasciicompatible
c   bytes   0xff
oc   obytes   0xff
else
c   stringsupport precisecodepoint enc  bytes  p  end
oc   stringsupport precisecodepoint enc  obytes  op  oend
int cl  ocl
if  encoding isascii c     encoding isascii oc
byte uc   asciitables touppercasetable
byte uoc   asciitables touppercasetable
if  uc    uoc
return uc < uoc ? rubyfixnum minus_one runtime    rubyfixnum one runtime
cl   ocl   1
else
cl   stringsupport length enc  bytes  p  end
ocl   stringsupport length enc  obytes  op  oend
// todo: opt for 2 and 3 ?
int ret   stringsupport casecmp bytes  p  obytes  op  cl < ocl ? cl   ocl
if  ret    0  return ret < 0 ? rubyfixnum minus_one runtime    rubyfixnum one runtime
if  cl    ocl  return cl < ocl ? rubyfixnum minus_one runtime    rubyfixnum one runtime
p    cl
op    ocl
if  end   p    oend   op  return rubyfixnum zero runtime
return end   p > oend   op ? rubyfixnum one runtime    rubyfixnum minus_one runtime
/** rb_str_match
*
*/
@jrubymethod name      compat   ruby1_8  writes   backref
@override
public irubyobject op_match threadcontext context  irubyobject other
if  other instanceof rubyregexp  return   rubyregexp  other  op_match context  this
if  other instanceof rubystring  throw context getruntime   newtypeerror
return other callmethod context     this
@jrubymethod name      compat   ruby1_9  writes   backref
@override
public irubyobject op_match19 threadcontext context  irubyobject other
if  other instanceof rubyregexp  return   rubyregexp  other  op_match19 context  this
if  other instanceof rubystring  throw context getruntime   newtypeerror
return other callmethod context     this
/**
* string#match(pattern)
*
* rb_str_match_m
*
* @param pattern regexp or string
*/
@jrubymethod compat   ruby1_8  reads   backref
public irubyobject match threadcontext context  irubyobject pattern
return getpattern pattern  callmethod context     this
@jrubymethod name      compat   ruby1_9  reads   backref
public irubyobject match19 threadcontext context  irubyobject pattern  block block
irubyobject result   getpattern pattern  callmethod context     this
return block isgiven       result isnil   ? block yield context  result    result
@jrubymethod name      required   1  rest   true  compat   ruby1_9  reads   backref
public irubyobject match19 threadcontext context  irubyobject args  block block
rubyregexp pattern   getpattern args
args   this
irubyobject result   pattern callmethod context     args
return block isgiven       result isnil   ? block yield context  result    result
/** rb_str_capitalize / rb_str_capitalize_bang
*
*/
@jrubymethod name      compat   ruby1_8
public irubyobject capitalize threadcontext context
rubystring str   strdup context getruntime
str capitalize_bang context
return str
@jrubymethod name      compat   ruby1_8
public irubyobject capitalize_bang threadcontext context
ruby runtime   context getruntime
if  value getrealsize      0
modifycheck
return runtime getnil
modify
int s   value getbegin
int end   s   value getrealsize
bytebytes   value getunsafebytes
boolean modify   false
int c   bytes   0xff
if  ascii islower c
bytes   asciitables touppercasetable
modify   true
while    s < end
c   bytes   0xff
if  ascii isupper c
bytes   asciitables tolowercasetable
modify   true
return modify ? this   runtime getnil
@jrubymethod name      compat   ruby1_9
public irubyobject capitalize19 threadcontext context
rubystring str   strdup context getruntime
str capitalize_bang19 context
return str
@jrubymethod name      compat   ruby1_9
public irubyobject capitalize_bang19 threadcontext context
ruby runtime   context getruntime
encoding enc   checkdummyencoding
if  value getrealsize      0
modifycheck
return runtime getnil
modifyandkeepcoderange
int s   value getbegin
int end   s   value getrealsize
bytebytes   value getunsafebytes
boolean modify   false
int c   codepoint runtime  enc  bytes  s  end
if  enc islower c
enc codetombc toupper enc  c   bytes  s
modify   true
s    codelength runtime  enc  c
while  s < end
c   codepoint runtime  enc  bytes  s  end
if  enc isupper c
enc codetombc tolower enc  c   bytes  s
modify   true
s    codelength runtime  enc  c
return modify ? this   runtime getnil
@jrubymethod name      compat   ruby1_8
public irubyobject op_ge threadcontext context  irubyobject other
if  other instanceof rubystring  return context getruntime   newboolean op_cmp  rubystring  other  >  0
return rubycomparable op_ge context  this  other
@jrubymethod name      compat   ruby1_9
public irubyobject op_ge19 threadcontext context  irubyobject other
if  other instanceof rubystring  return context getruntime   newboolean op_cmp19  rubystring  other  >  0
return rubycomparable op_ge context  this  other
@jrubymethod name      compat   ruby1_8
public irubyobject op_gt threadcontext context  irubyobject other
if  other instanceof rubystring  return context getruntime   newboolean op_cmp  rubystring  other  > 0
return rubycomparable op_gt context  this  other
@jrubymethod name      compat   ruby1_9
public irubyobject op_gt19 threadcontext context  irubyobject other
if  other instanceof rubystring  return context getruntime   newboolean op_cmp19  rubystring  other  > 0
return rubycomparable op_gt context  this  other
@jrubymethod name      compat   ruby1_8
public irubyobject op_le threadcontext context  irubyobject other
if  other instanceof rubystring  return context getruntime   newboolean op_cmp  rubystring  other  <  0
return rubycomparable op_le context  this  other
@jrubymethod name      compat   ruby1_9
public irubyobject op_le19 threadcontext context  irubyobject other
if  other instanceof rubystring  return context getruntime   newboolean op_cmp19  rubystring  other  <  0
return rubycomparable op_le context  this  other
@jrubymethod name      compat   ruby1_8
public irubyobject op_lt threadcontext context  irubyobject other
if  other instanceof rubystring  return context getruntime   newboolean op_cmp  rubystring  other  < 0
return rubycomparable op_lt context  this  other
@jrubymethod name      compat   ruby1_9
public irubyobject op_lt19 threadcontext context  irubyobject other
if  other instanceof rubystring  return context getruntime   newboolean op_cmp19  rubystring  other  < 0
return rubycomparable op_lt context  this  other
@jrubymethod name      compat   ruby1_8
public irubyobject str_eql_p threadcontext context  irubyobject other
ruby runtime   context getruntime
if  other instanceof rubystring    value equal   rubystring other  value   return runtime gettrue
return runtime getfalse
@jrubymethod name      compat   ruby1_9
public irubyobject str_eql_p19 threadcontext context  irubyobject other
ruby runtime   context getruntime
if  other instanceof rubystring
rubystring otherstring    rubystring other
if  iscomparablewith otherstring     value equal otherstring value   return runtime gettrue
return runtime getfalse
/** rb_str_upcase / rb_str_upcase_bang
*
*/
@jrubymethod name      compat   ruby1_8
public rubystring upcase threadcontext context
rubystring str   strdup context getruntime
str upcase_bang context
return str
@jrubymethod name      compat   ruby1_8
public irubyobject upcase_bang threadcontext context
ruby runtime   context getruntime
if  value getrealsize      0
modifycheck
return runtime getnil
modify
return singlebyteupcase runtime  value getunsafebytes    value getbegin    value getbegin     value getrealsize
@jrubymethod name      compat   ruby1_9
public rubystring upcase19 threadcontext context
rubystring str   strdup context getruntime
str upcase_bang19 context
return str
@jrubymethod name      compat   ruby1_9
public irubyobject upcase_bang19 threadcontext context
ruby runtime   context getruntime
encoding enc   checkdummyencoding
if  value getrealsize      0
modifycheck
return runtime getnil
modifyandkeepcoderange
int s   value getbegin
int end   s   value getrealsize
bytebytes   value getunsafebytes
if  singlebyteoptimizable enc
return singlebyteupcase runtime  bytes  s  end
else
return multibyteupcase runtime  enc  bytes  s  end
private irubyobject singlebyteupcase ruby runtime  bytebytes  int s  int end
boolean modify   false
while  s < end
int c   bytes   0xff
if  ascii islower c
bytes   asciitables touppercasetable
modify   true
s
return modify ? this   runtime getnil
private irubyobject multibyteupcase ruby runtime  encoding enc  bytebytes  int s  int end
boolean modify   false
int c
while  s < end
if  enc isasciicompatible      encoding isascii c   bytes   0xff
if  ascii islower c
bytes   asciitables touppercasetable
modify   true
s
else
c   codepoint runtime  enc  bytes  s  end
if  enc islower c
enc codetombc toupper enc  c   bytes  s
modify   true
s    codelength runtime  enc  c
return modify ? this   runtime getnil
/** rb_str_downcase / rb_str_downcase_bang
*
*/
@jrubymethod name      compat   ruby1_8
public rubystring downcase threadcontext context
rubystring str   strdup context getruntime
str downcase_bang context
return str
@jrubymethod name      compat   ruby1_8
public irubyobject downcase_bang threadcontext context
ruby runtime   context getruntime
if  value getrealsize      0
modifycheck
return runtime getnil
modify
return singlebytedowncase runtime  value getunsafebytes    value getbegin    value getbegin     value getrealsize
@jrubymethod name      compat   ruby1_9
public rubystring downcase19 threadcontext context
rubystring str   strdup context getruntime
str downcase_bang19 context
return str
@jrubymethod name      compat   ruby1_9
public irubyobject downcase_bang19 threadcontext context
ruby runtime   context getruntime
encoding enc   checkdummyencoding
if  value getrealsize      0
modifycheck
return runtime getnil
modifyandkeepcoderange
int s   value getbegin
int end   s   value getrealsize
bytebytes   value getunsafebytes
if  singlebyteoptimizable enc
return singlebytedowncase runtime  bytes  s  end
else
return multibytedowncase runtime  enc  bytes  s  end
private irubyobject singlebytedowncase ruby runtime  bytebytes  int s  int end
boolean modify   false
while  s < end
int c   bytes   0xff
if  ascii isupper c
bytes   asciitables tolowercasetable
modify   true
s
return modify ? this   runtime getnil
private irubyobject multibytedowncase ruby runtime  encoding enc  bytebytes  int s  int end
boolean modify   false
int c
while  s < end
if  enc isasciicompatible      encoding isascii c   bytes   0xff
if  ascii isupper c
bytes   asciitables tolowercasetable
modify   true
s
else
c   codepoint runtime  enc  bytes  s  end
if  enc isupper c
enc codetombc tolower enc  c   bytes  s
modify   true
s    codelength runtime  enc  c
return modify ? this   runtime getnil
/** rb_str_swapcase / rb_str_swapcase_bang
*
*/
@jrubymethod name      compat   ruby1_8
public rubystring swapcase threadcontext context
rubystring str   strdup context getruntime
str swapcase_bang context
return str
@jrubymethod name      compat   ruby1_8
public irubyobject swapcase_bang threadcontext context
ruby runtime   context getruntime
if  value getrealsize      0
modifycheck
return runtime getnil
modify
return singlebyteswapcase runtime  value getunsafebytes    value getbegin    value getbegin     value getrealsize
@jrubymethod name      compat   ruby1_9
public rubystring swapcase19 threadcontext context
rubystring str   strdup context getruntime
str swapcase_bang19 context
return str
@jrubymethod name      compat   ruby1_9
public irubyobject swapcase_bang19 threadcontext context
ruby runtime   context getruntime
encoding enc   checkdummyencoding
if  value getrealsize      0
modifycheck
return runtime getnil
modifyandkeepcoderange
int s   value getbegin
int end   s   value getrealsize
bytebytes   value getunsafebytes
if  singlebyteoptimizable enc
return singlebyteswapcase runtime  bytes  s  end
else
return multibyteswapcase runtime  enc  bytes  s  end
private irubyobject singlebyteswapcase ruby runtime  bytebytes  int s  int end
boolean modify   false
while  s < end
int c   bytes   0xff
if  ascii isupper c
bytes   asciitables tolowercasetable
modify   true
else if  ascii islower c
bytes   asciitables touppercasetable
modify   true
s
return modify ? this   runtime getnil
private irubyobject multibyteswapcase ruby runtime  encoding enc  bytebytes  int s  int end
boolean modify   false
while  s < end
int c   codepoint runtime  enc  bytes  s  end
if  enc isupper c
enc codetombc tolower enc  c   bytes  s
modify   true
else if  enc islower c
enc codetombc toupper enc  c   bytes  s
modify   true
s    codelength runtime  enc  c
return modify ? this   runtime getnil
/** rb_str_dump
*
*/
@jrubymethod name      compat   ruby1_8
public irubyobject dump
return dumpcommon false
@jrubymethod name      compat   ruby1_9
public irubyobject dump19
return dumpcommon true
private irubyobject dumpcommon boolean is1_9
ruby runtime   getruntime
bytelist buf   null
encoding enc   value getencoding
int p   value getbegin
int end   p   value getrealsize
bytebytes   value getunsafebytes
int len   2
while  p < end
int c   bytes   0xff
switch  c
case   case   case   case   case   case
case    case    case    case
len    2
break
case
len    isevstr bytes  p  end  ? 2   1
break
default
if  ascii isprint c
len
else
if  is1_9    enc instanceof utf8encoding
int n   stringsupport preciselength enc  bytes  p   1  end    1
if  n > 0
if  buf    null  buf   new bytelist
int cc   codepoint runtime  enc  bytes  p   1  end
sprintf sprintf runtime  buf     cc
len    buf getrealsize     4
buf setrealsize 0
p    n
break
len    4
break
if  is1_9     enc isasciicompatible
len         length
bytelist outbytes   new bytelist len
byte out   outbytes getunsafebytes
int q   0
p   value getbegin
end   p   value getrealsize
out
while  p < end
int c   bytes   0xff
if  c         c
out
out    byte c
else if  c
if  isevstr bytes  p  end   out
out
else if   is1_9    ascii isprint c
out    byte c
else if  c
out
out
else if  c
out
out
else if  c
out
out
else if  c
out
out
else if  c
out
out
else if  c
out
out
else if  c
out
out
else if  c
out
out
else if  is1_9    ascii isprint c
out    byte c
else
out
if  is1_9
if  enc instanceof utf8encoding
int n   stringsupport preciselength enc  bytes  p   1  end    1
if  n > 0
int cc   codepoint runtime  enc  bytes  p   1  end
p    n
outbytes setrealsize q
sprintf sprintf runtime  outbytes     cc
q   outbytes getrealsize
continue
outbytes setrealsize q
sprintf sprintf runtime  outbytes     c
q   outbytes getrealsize
else
outbytes setrealsize q
sprintf sprintf runtime  outbytes     c
q   outbytes getrealsize
out
outbytes setrealsize q
assert out    outbytes getunsafebytes       must not reallocate
final rubystring result   new rubystring runtime  getmetaclass    outbytes
if  is1_9
if   enc isasciicompatible
result cat  " getbytes
result cat enc getname
result cat  byte    cat  byte
enc   ascii
result associateencoding enc
result setcoderange cr_7bit
return result infectby this
@jrubymethod name      compat   ruby1_8
public irubyobject insert threadcontext context  irubyobject indexarg  irubyobject stringarg
assert  context getruntime   is1_9
rubystring str   stringarg converttostring
int index   rubynumeric num2int indexarg
if  index     1  return append stringarg
if  index < 0  index
replaceinternal checkindex index  value getrealsize     0  str
return this
@jrubymethod name      compat   ruby1_9
public irubyobject insert19 threadcontext context  irubyobject indexarg  irubyobject stringarg
rubystring str   stringarg converttostring
int index   rubynumeric num2int indexarg
if  index     1  return append19 stringarg
if  index < 0  index
replaceinternal19 checkindex index  strlength     0  str
return this
private int checkindex int beg  int len
if  beg > len  raiseindexoutofstring beg
if  beg < 0
if   beg > len  raiseindexoutofstring beg
beg    len
return beg
private int checkindexforref int beg  int len
if  beg >  len  raiseindexoutofstring beg
if  beg < 0
if   beg > len  raiseindexoutofstring beg
beg    len
return beg
private int checklength int len
if  len < 0  throw getruntime   newindexerror     len
return len
private void raiseindexoutofstring int index
throw getruntime   newindexerror     index
private void prefixescapecat int c
cat
cat c
private boolean isevstr bytebytes  int p  int end
return p < end ? isevstr bytes   0xff    false
public boolean isevstr int c
return c         c         c
/** rb_str_inspect
*
*/
@jrubymethod name      compat   ruby1_8
@override
public irubyobject inspect
ruby runtime   getruntime
byte bytes   value getunsafebytes
int p   value getbegin
int end   p   value getrealsize
rubystring result   new rubystring runtime  runtime getstring    new bytelist end   p
encoding enc   runtime getkcode   getencoding
result cat
while  p < end
int c   bytes   0xff
int n   enc length  byte c
if  n > 1    p   1 <  end   n
result cat bytes  p   1  n
p    n   1
continue
else if  c        c          c         isevstr bytes  p  end
result prefixescapecat c
else if  ascii isprint c
result cat c
else if  c
result prefixescapecat
else if  c
result prefixescapecat
else if  c
result prefixescapecat
else if  c
result prefixescapecat
else if  c
result prefixescapecat
else if  c
result prefixescapecat
else if  c
result prefixescapecat
else if  c
result prefixescapecat
else
sprintf sprintf runtime  result value     c   0377
result cat
return result infectby this
@jrubymethod name      compat   ruby1_9
public irubyobject inspect19
ruby runtime   getruntime
byte bytes   value getunsafebytes
int p   value getbegin
int end   p   value getrealsize
rubystring result   new rubystring runtime  runtime getstring    new bytelist end   p
encoding enc   getencoding
encoding resultenc   runtime getdefaultinternalencoding
if  resultenc    null  resultenc   runtime getdefaultexternalencoding
if   resultenc isasciicompatible    resultenc   usasciiencoding instance
result associateencoding resultenc
boolean isunicode   stringsupport isunicode enc
encodingdb entry e   null
caseinsensitivebyteshash<encodingdb entry> encodings   runtime getencodingservice   getencodings
if  enc    encodings get   getbytes    getencoding      end   p > 1
int c0   bytes   0xff
int c1   bytes   0xff
if  c0    0xfe    c1    0xff
e   encodings get   getbytes
else if  c0    0xff    c1    0xfe
e   encodings get   getbytes
else
isunicode   false
else if  enc    encodings get   getbytes    getencoding      end   p > 3
int c0   bytes   0xff
int c1   bytes   0xff
int c2   bytes   0xff
int c3   bytes   0xff
if  c0    0    c1    0    c2    0xfe    c3    0xff
e   encodings get   getbytes
else if  c3    0    c2    0    c1    0xfe    c0    0xff
e   encodings get   getbytes
else
isunicode   false
if  e    null  enc   e getencoding
result cat
int prev   p
while  p < end
int cc   0
int n   stringsupport preciselength enc  bytes  p  end
if  n <  0
if  p > prev  result cat bytes  prev  p   prev
n   enc minlength
if  end < p   n  n   end   p
while  n   > 0
sprintf sprintf runtime  result getbytelist       bytes   0377
prev     p
continue
int c   enc mbctocode bytes  p  end
p    n
if   enc isasciicompatible      isunicode
c         c
c         p < end     stringsupport preciselength enc  bytes  p  end  > 0
cc   codepoint runtime  enc  bytes  p  end           cc         cc
if  p   n > prev  result cat bytes  prev  p   n   prev
result cat
if  enc isasciicompatible      enc    resultenc
prev   p   n
continue
switch  c
case    cc      break
case    cc      break
case    cc      break
case    cc      break
case    cc      break
case    cc      break
case    cc      break
case 033  cc      break
default  cc   0  break
if  cc    0
if  p   n > prev  result cat bytes  prev  p   n   prev
result cat
result cat cc
prev   p
continue
if   enc    resultenc    enc isprint c       enc isasciicompatible      encoding isascii c     enc isprint c
continue
else
if  p   n > prev  result cat bytes  prev  p   n   prev
sprintf sprintf runtime  result getbytelist     stringsupport escapedcharformat c  isunicode   c
prev   p
continue
if  p > prev  result cat bytes  prev  p   prev
result cat
return result infectby this
public int size
return value getrealsize
/** rb_str_length
*
*/
@jrubymethod name           compat   ruby1_8
public rubyfixnum length
return getruntime   newfixnum value getrealsize
@jrubymethod name           compat   ruby1_9
public rubyfixnum length19
return getruntime   newfixnum strlength
@jrubymethod name
public rubyfixnum bytesize
return length       use 1 8 impl
/** rb_str_empty
*
*/
@jrubymethod name
public rubyboolean empty_p threadcontext context
return isempty   ? context getruntime   gettrue     context getruntime   getfalse
public boolean isempty
return value length      0
/** rb_str_append
*
*/
public rubystring append irubyobject other
rubystring otherstr   other converttostring
infectby otherstr
return cat otherstr value
public rubystring append19 irubyobject other
return cat19 other converttostring
/** rb_str_concat
*
*/
@jrubymethod name           compat   ruby1_8
public rubystring concat irubyobject other
if  other instanceof rubyfixnum
long longvalue     rubyfixnum  other  getlongvalue
if  longvalue >  0    longvalue < 256  return cat  byte  longvalue
return append other
@jrubymethod name           compat   ruby1_9
public rubystring concat19 threadcontext context  irubyobject other
ruby runtime   context getruntime
if  other instanceof rubyfixnum
int c   rubynumeric num2int other
if  c < 0
throw runtime newrangeerror
return concatnumeric runtime  c
else if  other instanceof rubybignum
if    rubybignum  other  getbigintegervalue   signum   < 0
throw runtime newrangeerror
long c     rubybignum  other  getlongvalue
return concatnumeric runtime   int  c
return append19 other
private rubystring concatnumeric ruby runtime  int c
encoding enc   value getencoding
int cl   codelength runtime  enc  c
modify19 value getrealsize     cl
enc codetombc c  value getunsafebytes    value getbegin     value getrealsize
value setrealsize value getrealsize     cl
return this
/**
* rb_str_prepend
*/
@jrubymethod compat   ruby1_9
public irubyobject prepend threadcontext context  irubyobject other
return replace19 other converttostring   op_plus19 context  this
/** rb_str_crypt
*
*/
@jrubymethod name
public rubystring crypt threadcontext context  irubyobject other
rubystring otherstr   other converttostring
bytelist salt   otherstr getbytelist
if  salt getrealsize   < 2
throw context getruntime   newargumenterror
salt   salt makeshared 0  2
rubystring result   rubystring newstringshared context getruntime    javacrypt crypt salt  this getbytelist
result infectby this
result infectby otherstr
return result
/* rubystring aka rb_string_value */
public static rubystring stringvalue irubyobject object
return  rubystring   object instanceof rubystring ? object
object converttostring
/** rb_str_sub / rb_str_sub_bang
*
*/
@jrubymethod reads   backref  writes   backref  compat   ruby1_8
public irubyobject sub threadcontext context  irubyobject arg0  block block
rubystring str   strdup context getruntime
str sub_bang context  arg0  block
return str
@jrubymethod reads   backref  writes   backref  compat   ruby1_8
public irubyobject sub threadcontext context  irubyobject arg0  irubyobject arg1  block block
rubystring str   strdup context getruntime
str sub_bang context  arg0  arg1  block
return str
@jrubymethod name      reads   backref  writes   backref  compat   ruby1_8
public irubyobject sub_bang threadcontext context  irubyobject arg0  block block
if  block isgiven    return subbangiter context  getquotedpattern arg0   block
throw context getruntime   newargumenterror 1  2
@jrubymethod name      reads   backref  writes   backref  compat   ruby1_8
public irubyobject sub_bang threadcontext context  irubyobject arg0  irubyobject arg1  block block
return subbangnoiter context  getquotedpattern arg0   arg1 converttostring
private irubyobject subbangiter threadcontext context  regex pattern  block block
int range   value getbegin     value getrealsize
matcher matcher   pattern matcher value getunsafebytes    value getbegin    range
dynamicscope scope   context getcurrentscope
if  matcher search value getbegin    range  option none  >  0
frozencheck true
byte bytes   value getunsafebytes
int size   value getrealsize
rubymatchdata match   rubyregexp updatebackref context  this  scope  matcher  pattern
rubystring repl   objasstring context  block yield context
makeshared context getruntime    matcher getbegin    matcher getend     matcher getbegin
modifycheck bytes  size
frozencheck true
scope setbackref match
return subbangcommon context  pattern  matcher  repl  repl flags
else
return scope setbackref context getruntime   getnil
private irubyobject subbangnoiter threadcontext context  regex pattern  rubystring repl
int tuflags   repl flags
int range   value getbegin     value getrealsize
matcher matcher   pattern matcher value getunsafebytes    value getbegin    range
dynamicscope scope   context getcurrentscope
if  matcher search value getbegin    range  option none  >  0
repl   rubyregexp regsub repl  this  matcher  context getruntime   getkcode   getencoding
rubyregexp updatebackref context  this  scope  matcher  pattern
return subbangcommon context  pattern  matcher  repl  tuflags
else
return scope setbackref context getruntime   getnil
private irubyobject subbangcommon threadcontext context  regex pattern  matcher matcher  rubystring repl  int tuflags
final int beg   matcher getbegin
final int plen   matcher getend     beg
bytelist replvalue   repl value
if  replvalue getrealsize   > plen
modify value getrealsize     replvalue getrealsize     plen
else
modify
if  replvalue getrealsize      plen
int src   value getbegin     beg   plen
int dst   value getbegin     beg   replvalue getrealsize
int length   value getrealsize     beg   plen
system arraycopy value getunsafebytes    src  value getunsafebytes    dst  length
system arraycopy replvalue getunsafebytes    replvalue getbegin    value getunsafebytes    value getbegin     beg  replvalue getrealsize
value setrealsize value getrealsize     replvalue getrealsize     plen
infectby tuflags
return this
@jrubymethod name      reads   backref  writes   backref  compat   ruby1_9
public irubyobject sub19 threadcontext context  irubyobject arg0  block block
rubystring str   strdup context getruntime
str sub_bang19 context  arg0  block
return str
@jrubymethod name      reads   backref  writes   backref  compat   ruby1_9
public irubyobject sub19 threadcontext context  irubyobject arg0  irubyobject arg1  block block
rubystring str   strdup context getruntime
str sub_bang19 context  arg0  arg1  block
return str
@jrubymethod name      reads   backref  writes   backref  compat   ruby1_9
public irubyobject sub_bang19 threadcontext context  irubyobject arg0  block block
ruby runtime   context getruntime
frozencheck
final regex pattern  prepared
final rubyregexp regexp
if  arg0 instanceof rubyregexp
regexp    rubyregexp arg0
pattern   regexp getpattern
prepared   regexp preparepattern this
else
regexp   null
pattern   getstringpattern19 runtime  arg0
prepared   rubyregexp preparepattern runtime  pattern  this
if  block isgiven    return subbangiter19 runtime  context  pattern  prepared  null  block  regexp
throw context getruntime   newargumenterror 1  2
@jrubymethod name      reads   backref  writes   backref  compat   ruby1_9
public irubyobject sub_bang19 threadcontext context  irubyobject arg0  irubyobject arg1  block block
ruby runtime   context getruntime
irubyobject hash   typeconverter converttotypewithcheck arg1  runtime gethash
frozencheck
final regex pattern  prepared
final rubyregexp regexp
if  arg0 instanceof rubyregexp
regexp    rubyregexp arg0
pattern   regexp getpattern
prepared   regexp preparepattern this
else
regexp   null
pattern   getstringpattern19 runtime  arg0
prepared   rubyregexp preparepattern runtime  pattern  this
if  hash isnil
return subbangnoiter19 runtime  context  pattern  prepared  arg1 converttostring    regexp
else
return subbangiter19 runtime  context  pattern  prepared   rubyhash hash  block  regexp
private irubyobject subbangiter19 ruby runtime  threadcontext context  regex pattern  regex prepared  rubyhash hash  block block  rubyregexp regexp
int begin   value getbegin
int len   value getrealsize
int range   begin   len
bytebytes   value getunsafebytes
encoding enc   value getencoding
final matcher matcher   prepared matcher bytes  begin  range
dynamicscope scope   context getcurrentscope
if  matcher search begin  range  option none  >  0
rubymatchdata match   rubyregexp updatebackref19 context  this  scope  matcher  pattern
match regexp   regexp
final rubystring repl
final int tuflags
irubyobject substr   makeshared19 runtime  matcher getbegin    matcher getend     matcher getbegin
if  hash    null
tuflags   0
repl   objasstring context  block yield context  substr
else
tuflags   hash flags
repl   objasstring context  hash op_aref context  substr
modifycheck bytes  len  enc
frozencheck
scope setbackref match
return subbangcommon19 context  pattern  matcher  repl  tuflags   repl flags
else
return scope setbackref runtime getnil
private irubyobject subbangnoiter19 ruby runtime  threadcontext context  regex pattern  regex prepared  rubystring repl  rubyregexp regexp
int begin   value getbegin
int range   begin   value getrealsize
final matcher matcher   prepared matcher value getunsafebytes    begin  range
dynamicscope scope   context getcurrentscope
if  matcher search begin  range  option none  >  0
repl   rubyregexp regsub19 repl  this  matcher  pattern
rubymatchdata match   rubyregexp updatebackref19 context  this  scope  matcher  pattern
match regexp   regexp
return subbangcommon19 context  pattern  matcher  repl  repl flags
else
return scope setbackref runtime getnil
private irubyobject subbangcommon19 threadcontext context  regex pattern  matcher matcher  rubystring repl  int tuflags
final int beg   matcher getbegin
final int end   matcher getend
int cr   getcoderange
encoding enc   iscompatiblewith repl
if  enc    null  enc   subbangverifyencoding context  repl  beg  end
final int plen   end   beg
bytelist replvalue   repl value
if  replvalue getrealsize   > plen
modify19 value getrealsize     replvalue getrealsize     plen
else
modify19
associateencoding enc
if  cr > cr_unknown    cr < cr_broken
int cr2   repl getcoderange
if  cr2    cr_broken     cr    cr_valid    cr2    cr_7bit
cr   cr_unknown
else
cr   cr2
if  replvalue getrealsize      plen
int src   value getbegin     beg   plen
int dst   value getbegin     beg   replvalue getrealsize
int length   value getrealsize     beg   plen
system arraycopy value getunsafebytes    src  value getunsafebytes    dst  length
system arraycopy replvalue getunsafebytes    replvalue getbegin    value getunsafebytes    value getbegin     beg  replvalue getrealsize
value setrealsize value getrealsize     replvalue getrealsize     plen
setcoderange cr
return infectby tuflags
private encoding subbangverifyencoding threadcontext context  rubystring repl  int beg  int end
bytebytes   value getunsafebytes
int p   value getbegin
int len   value getrealsize
encoding strenc   value getencoding
if  coderangescan strenc  bytes  p  beg     cr_7bit
coderangescan strenc  bytes  p   end  len   end     cr_7bit
throw context getruntime   newargumenterror
strenc       repl value getencoding
return repl value getencoding
/** rb_str_gsub / rb_str_gsub_bang
*
*/
@jrubymethod reads   backref  writes   backref  compat   ruby1_8
public irubyobject gsub threadcontext context  irubyobject arg0  block block
return gsub context  arg0  block  false
@jrubymethod reads   backref  writes   backref  compat   ruby1_8
public irubyobject gsub threadcontext context  irubyobject arg0  irubyobject arg1  block block
return gsub context  arg0  arg1  block  false
@jrubymethod name      reads   backref  writes   backref  compat   ruby1_8
public irubyobject gsub_bang threadcontext context  irubyobject arg0  block block
return gsub context  arg0  block  true
@jrubymethod name      reads   backref  writes   backref  compat   ruby1_8
public irubyobject gsub_bang threadcontext context  irubyobject arg0  irubyobject arg1  block block
return gsub context  arg0  arg1  block  true
private irubyobject gsub threadcontext context  irubyobject arg0  block block  final boolean bang
if  block isgiven
return gsubcommon context  bang  arg0  block  null  0
else
return enumeratorize context getruntime    this  bang ?        arg0
private irubyobject gsub threadcontext context  irubyobject arg0  irubyobject arg1  block block  final boolean bang
rubystring repl   arg1 converttostring
return gsubcommon context  bang  arg0  block  repl  repl flags
private irubyobject gsubcommon threadcontext context  final boolean bang  irubyobject arg  block block  rubystring repl  int tuflags
ruby runtime   context getruntime
dynamicscope scope   context getcurrentscope
regex pattern   getquotedpattern arg
int begin   value getbegin
int slen   value getrealsize
int range   begin   slen
bytebytes   value getunsafebytes
matcher matcher   pattern matcher bytes  begin  range
int beg   matcher search begin  range  option none
if  beg < 0
scope setbackref runtime getnil
return bang ? runtime getnil     strdup runtime      bang  true  no match  no substitution
else if  repl    null    bang    isfrozen
throw getruntime   newruntimeerror
int blen   slen   30     len   margin
bytelist dest   new bytelist blen
dest setrealsize blen
int offset   0  buf   0  bp   0  cp   begin
encoding enc   getencodingforkcodedefault runtime  pattern  arg
rubymatchdata match   null
while  beg >  0
final rubystring val
final int begz   matcher getbegin
final int endz   matcher getend
if  repl    null       block given
match   rubyregexp updatebackref context  this  scope  matcher  pattern
val   objasstring context  block yield context  substr runtime  begz  endz   begz
modifycheck bytes  slen
if  bang  frozencheck
else
val   rubyregexp regsub repl  this  matcher  enc
tuflags    val flags
bytelist vbuf   val value
int len    bp   buf     beg   offset    vbuf getrealsize     3
if  blen < len
while  blen < len  blen <<  1
len   bp   buf
dest realloc blen
dest setrealsize blen
bp   buf   len
len   beg   offset     copy pre match substr
system arraycopy bytes  cp  dest getunsafebytes    bp  len
bp    len
system arraycopy vbuf getunsafebytes    vbuf getbegin    dest getunsafebytes    bp  vbuf getrealsize
bp    vbuf getrealsize
offset   endz
if  begz    endz
if  slen <  endz  break
len   enc length bytes  begin   endz  range
system arraycopy bytes  begin   endz  dest getunsafebytes    bp  len
bp    len
offset   endz   len
cp   begin   offset
if  offset > slen  break
beg   matcher search cp  range  option none
if  repl    null       block given
scope setbackref match
else
rubyregexp updatebackref context  this  scope  matcher  pattern
if  slen > offset
int len   bp   buf
if  blen   len < slen   offset
blen   len   slen   offset
dest realloc blen
bp   buf   len
system arraycopy bytes  cp  dest getunsafebytes    bp  slen   offset
bp    slen   offset
dest setrealsize bp   buf
if  bang
view dest
return infectby tuflags
else
return new rubystring runtime  getmetaclass    dest  infectby tuflags   flags
@jrubymethod name      reads   backref  writes   backref  compat   ruby1_9
public irubyobject gsub19 threadcontext context  irubyobject arg0  block block
return block isgiven   ? gsubcommon19 context  block  null  null  arg0  false  0    enumeratorize context getruntime    this     arg0
@jrubymethod name      reads   backref  writes   backref  compat   ruby1_9
public irubyobject gsub19 threadcontext context  irubyobject arg0  irubyobject arg1  block block
return gsub19 context  arg0  arg1  block  false
@jrubymethod name      reads   backref  writes   backref  compat   ruby1_9
public irubyobject gsub_bang19 threadcontext context  irubyobject arg0  block block
checkfrozen
return block isgiven   ? gsubcommon19 context  block  null  null  arg0  true  0    enumeratorize context getruntime    this     arg0
@jrubymethod name      reads   backref  writes   backref  compat   ruby1_9
public irubyobject gsub_bang19 threadcontext context  irubyobject arg0  irubyobject arg1  block block
checkfrozen
return gsub19 context  arg0  arg1  block  true
private irubyobject gsub19 threadcontext context  irubyobject arg0  irubyobject arg1  block block  final boolean bang
ruby runtime   context getruntime
irubyobject tryhash   typeconverter converttotypewithcheck arg1  runtime gethash
final rubyhash hash
final rubystring str
final int tuflags
if  tryhash isnil
hash   null
str   arg1 converttostring
tuflags   str flags
else
hash    rubyhash tryhash
str   null
tuflags   hash flags   tainted_f
return gsubcommon19 context  block  str  hash  arg0  bang  tuflags
private irubyobject gsubcommon19 threadcontext context  block block  rubystring repl
rubyhash hash  irubyobject arg0  final boolean bang  int tuflags
ruby runtime   context getruntime
final regex pattern  prepared
final rubyregexp regexp
if  arg0 instanceof rubyregexp
regexp    rubyregexp arg0
pattern   regexp getpattern
prepared   regexp preparepattern this
else
regexp   null
pattern   getstringpattern19 runtime  arg0
prepared   rubyregexp preparepattern runtime  pattern  this
final int begin   value getbegin
int slen   value getrealsize
final int range   begin   slen
bytebytes   value getunsafebytes
final matcher matcher   prepared matcher bytes  begin  range
final dynamicscope scope   context getcurrentscope
int beg   matcher search begin  range  option none
if  beg < 0
scope setbackref runtime getnil
return bang ? runtime getnil     strdup runtime      bang  true  no match  no substitution
rubystring dest   new rubystring runtime  getmetaclass    new bytelist slen   30
int offset   0  cp   begin
encoding enc   value getencoding
dest setencoding enc
dest setcoderange enc isasciicompatible   ? cr_7bit   cr_valid
rubymatchdata match   null
do
final rubystring val
int begz   matcher getbegin
int endz   matcher getend
if  repl    null           string given
val   rubyregexp regsub19 repl  this  matcher  pattern
else
final rubystring substr   makeshared19 runtime  begz  endz   begz
if  hash    null       hash given
val   objasstring context  hash op_aref context  substr
else                 block given
match   rubyregexp updatebackref19 context  this  scope  matcher  pattern
match regexp   regexp
val   objasstring context  block yield context  substr
modifycheck bytes  slen  enc
if  bang  frozencheck
tuflags    val flags
int len   beg   offset
if  len    0  dest cat bytes  cp  len  enc
dest cat19 val
offset   endz
if  begz    endz
if  slen <  endz  break
len   stringsupport length enc  bytes  begin   endz  range
dest cat bytes  begin   endz  len  enc
offset   endz   len
cp   begin   offset
if  offset > slen  break
beg   matcher search cp  range  option none
while  beg >  0
if  slen > offset  dest cat bytes  cp  slen   offset  enc
if  match    null       block given
scope setbackref match
else
match   rubyregexp updatebackref19 context  this  scope  matcher  pattern
match regexp   regexp
if  bang
view dest value
setcoderange dest getcoderange
return infectby tuflags
else
return dest infectby tuflags   flags
/** rb_str_index_m
*
*/
@jrubymethod name      reads   backref  writes   backref  compat   ruby1_8
public irubyobject index threadcontext context  irubyobject arg0
return indexcommon context getruntime    context  arg0  0
@jrubymethod name      reads   backref  writes   backref  compat   ruby1_8
public irubyobject index threadcontext context  irubyobject arg0  irubyobject arg1
int pos   rubynumeric num2int arg1
ruby runtime   context getruntime
if  pos < 0
pos    value getrealsize
if  pos < 0
if  arg0 instanceof rubyregexp
context getcurrentscope   setbackref runtime getnil
return runtime getnil
return indexcommon runtime  context  arg0  pos
private irubyobject indexcommon ruby runtime  threadcontext context  irubyobject sub  int pos
if  sub instanceof rubyregexp
rubyregexp regsub    rubyregexp  sub
pos   regsub adjuststartpos this  pos  false
pos   regsub search context  this  pos  false
else if  sub instanceof rubyfixnum
int c_int   rubynumeric fix2int  rubyfixnum sub
if  c_int < 0x00    c_int > 0xff
// out of byte range
// there will be no match for sure
return runtime getnil
byte c    byte  c_int
byte bytes   value getunsafebytes
int end   value getbegin     value getrealsize
pos    value getbegin
for    pos < end  pos
if  bytes    c  return rubyfixnum newfixnum runtime  pos   value getbegin
return runtime getnil
else if  sub instanceof rubystring
pos   strindex  rubystring  sub  pos
else
irubyobject tmp   sub checkstringtype
if  tmp isnil    throw runtime newtypeerror     sub getmetaclass   getname
pos   strindex  rubystring  tmp  pos
return pos     1 ? runtime getnil     rubyfixnum newfixnum runtime  pos
private int strindex rubystring sub  int offset
bytelist bytelist   value
if  offset < 0
offset    bytelist getrealsize
if  offset < 0  return  1
bytelist other   sub value
if  sizeissmaller bytelist  offset  other   return  1
if  other getrealsize      0  return offset
return bytelist indexof other  offset
private static boolean sizeissmaller bytelist bytelist  int offset  bytelist other
return bytelist getrealsize     offset < other getrealsize
@jrubymethod name      reads   backref  writes   backref  compat   ruby1_9
public irubyobject index19 threadcontext context  irubyobject arg0
return indexcommon19 context getruntime    context  arg0  0
@jrubymethod name      reads   backref  writes   backref  compat   ruby1_9
public irubyobject index19 threadcontext context  irubyobject arg0  irubyobject arg1
int pos   rubynumeric num2int arg1
ruby runtime   context getruntime
if  pos < 0
pos    strlength
if  pos < 0
if  arg0 instanceof rubyregexp  context getcurrentscope   setbackref runtime getnil
return runtime getnil
return indexcommon19 runtime  context  arg0  pos
private irubyobject indexcommon19 ruby runtime  threadcontext context  irubyobject sub  int pos
if  sub instanceof rubyregexp
rubyregexp regsub    rubyregexp  sub
pos   singlebyteoptimizable   ? pos
stringsupport nth checkencoding regsub   value getunsafebytes    value getbegin
value getbegin     value getrealsize
pos
pos   regsub adjuststartpos19 this  pos  false
pos   regsub search19 context  this  pos  false
pos   sublength pos
else if  sub instanceof rubystring
pos   strindex19  rubystring  sub  pos
pos   sublength pos
else
irubyobject tmp   sub checkstringtype
if  tmp isnil    throw runtime newtypeerror     sub getmetaclass   getname
pos   strindex19  rubystring  tmp  pos
pos   sublength pos
return pos     1 ? runtime getnil     rubyfixnum newfixnum runtime  pos
private int strindex19 rubystring sub  int offset
encoding enc   checkencoding sub
if  sub scanforcoderange      cr_broken  return  1
int len   strlength enc
int slen   sub strlength enc
if  offset < 0
offset    len
if  offset < 0  return  1
if  len   offset < slen  return  1
bytebytes   value getunsafebytes
int p   value getbegin
int end   p   value getrealsize
if  offset    0
offset   singlebyteoptimizable   ? offset   stringsupport offset enc  bytes  p  end  offset
p    offset
if  slen    0  return offset
while  true
int pos   value indexof sub value  p   value getbegin
if  pos < 0  return pos
pos     p   value getbegin
int t   enc rightadjustcharhead bytes  p  p   pos  end
if  t    p   pos  return pos   offset
if   len    t   p  <  0  return  1
offset    t   p
p   t
/** rb_str_rindex_m
*
*/
@jrubymethod name      reads   backref  writes   backref  compat   ruby1_8
public irubyobject rindex threadcontext context  irubyobject arg0
return rindexcommon context getruntime    context  arg0  value getrealsize
@jrubymethod name      reads   backref  writes   backref  compat   ruby1_8
public irubyobject rindex threadcontext context  irubyobject arg0  irubyobject arg1
int pos   rubynumeric num2int arg1
ruby runtime   context getruntime
if  pos < 0
pos    value getrealsize
if  pos < 0
if  arg0 instanceof rubyregexp  context getcurrentscope   setbackref runtime getnil
return runtime getnil
if  pos > value getrealsize    pos   value getrealsize
return rindexcommon runtime  context  arg0  pos
private irubyobject rindexcommon ruby runtime  threadcontext context  final irubyobject sub  int pos
if  sub instanceof rubyregexp
rubyregexp regsub    rubyregexp  sub
if  regsub length   > 0
pos   regsub adjuststartpos this  pos  true
pos   regsub search context  this  pos  true
else if  sub instanceof rubystring
pos   strrindex  rubystring  sub  pos
else if  sub instanceof rubyfixnum
int c_int   rubynumeric fix2int  rubyfixnum sub
if  c_int < 0x00    c_int > 0xff
// out of byte range
// there will be no match for sure
return runtime getnil
byte c    byte  c_int
byte bytes   value getunsafebytes
int pbeg   value getbegin
int p   pbeg   pos
if  pos    value getrealsize
if  pos    0  return runtime getnil
p
while  pbeg <  p
if  bytes    c  return rubyfixnum newfixnum runtime  p   value getbegin
p
return runtime getnil
else
irubyobject tmp   sub checkstringtype
if  tmp isnil    throw runtime newtypeerror     sub getmetaclass   getname
pos   strrindex  rubystring  tmp  pos
if  pos >  0  return rubyfixnum newfixnum runtime  pos
return runtime getnil
private int strrindex rubystring sub  int pos
int sublength   sub value getrealsize
/* substring longer than string */
if  value getrealsize   < sublength  return  1
if  value getrealsize     pos < sublength  pos   value getrealsize     sublength
return value lastindexof sub value  pos
@jrubymethod name      reads   backref  writes   backref  compat   ruby1_9
public irubyobject rindex19 threadcontext context  irubyobject arg0
return rindexcommon19 context getruntime    context  arg0  strlength
@jrubymethod name      reads   backref  writes   backref  compat   ruby1_9
public irubyobject rindex19 threadcontext context  irubyobject arg0  irubyobject arg1
int pos   rubynumeric num2int arg1
ruby runtime   context getruntime
int length   strlength
if  pos < 0
pos    length
if  pos < 0
if  arg0 instanceof rubyregexp  context getcurrentscope   setbackref runtime getnil
return runtime getnil
if  pos > length  pos   length
return rindexcommon19 runtime  context  arg0  pos
private irubyobject rindexcommon19 ruby runtime  threadcontext context  final irubyobject sub  int pos
if  sub instanceof rubyregexp
rubyregexp regsub    rubyregexp  sub
pos   singlebyteoptimizable   ? pos
stringsupport nth value getencoding    value getunsafebytes    value getbegin
value getbegin     value getrealsize
pos
if  regsub length   > 0
pos   regsub adjuststartpos19 this  pos  true
pos   regsub search19 context  this  pos  true
pos   sublength pos
else if  sub instanceof rubystring
pos   strrindex19  rubystring  sub  pos
else
irubyobject tmp   sub checkstringtype
if  tmp isnil    throw runtime newtypeerror     sub getmetaclass   getname
pos   strrindex19  rubystring  tmp  pos
if  pos >  0  return rubyfixnum newfixnum runtime  pos
return runtime getnil
private int strrindex19 rubystring sub  int pos
encoding enc   checkencoding sub
if  sub scanforcoderange      cr_broken  return  1
int len   strlength enc
int slen   sub strlength enc
if  len < slen  return  1
if  len   pos < slen  pos   len   slen
if  len    0  return pos
bytebytes   value getunsafebytes
int p   value getbegin
int end   p   value getrealsize
bytesbytes   sub value getunsafebytes
int sp   sub value getbegin
slen   sub value getrealsize
boolean singlebyte   singlebyteoptimizable
while  true
int s   singlebyte ? p   pos   stringsupport nth enc  bytes  p  end  pos
if  s     1  return  1
if  bytelist memcmp bytes  s  sbytes  sp  slen     0  return pos
if  pos    0  return  1
pos
@deprecated
public final irubyobject substr int beg  int len
return substr getruntime    beg  len
/* rb_str_substr */
public final irubyobject substr ruby runtime  int beg  int len
int length   value length
if  len < 0    beg > length  return runtime getnil
if  beg < 0
beg    length
if  beg < 0  return runtime getnil
int end   math min length  beg   len
return makeshared runtime  beg  end   beg
/* str_byte_substr */
private irubyobject bytesubstr ruby runtime  int beg  int len
int length   value length
int s   value getbegin
if  len < 0    beg > length  return runtime getnil
int p
if  beg < 0
beg    length
if  beg < 0  return runtime getnil
if  beg   len > length  len   length   beg
if  len <  0
len   0
p   0
else
p   s   beg
return makeshared19 runtime  p  len
/* str_byte_aref */
private irubyobject bytearef ruby runtime  irubyobject idx
final int index
if  idx instanceof rubyrange
int beglen     rubyrange  idx  beglenint getbytelist   length    0
return beglen    null ? runtime getnil     bytesubstr runtime  beglen  beglen
else if  idx instanceof rubyfixnum
index   rubynumeric fix2int  rubyfixnum idx
else
index   rubynumeric num2int idx
irubyobject obj   bytesubstr runtime  index  1
if  obj isnil        rubystring obj  getbytelist   length      0  return runtime getnil
return obj
public final irubyobject substr19 ruby runtime  int beg  int len
if  len < 0  return runtime getnil
int length   value getrealsize
if  length    0  len   0
encoding enc   value getencoding
if  singlebyteoptimizable enc
if  beg > length  return runtime getnil
if  beg < 0
beg    length
if  beg < 0  return runtime getnil
if  beg   len > length  len   length   beg
if  len <  0  len   beg   0
return makeshared19 runtime  beg  len
else
return multibytesubstr19 runtime  enc  len  beg  length
private irubyobject multibytesubstr19 ruby runtime  encoding enc  int len  int beg  int length
int p
int s   value getbegin
int end   s   length
bytebytes   value getunsafebytes
if  beg < 0
if  len >  beg  len    beg
if   beg   enc maxlength   < length >>> 3
beg    beg
int e   end
while  beg   > len     e   enc prevcharhead bytes  s  e  e       1        nothing
p   e
if  p     1  return runtime getnil
while  len   > 0     p   enc prevcharhead bytes  s  p  e       1        nothing
if  p     1  return runtime getnil
return makeshared19 runtime  p   s  e   p
else
beg    strlength enc
if  beg < 0  return runtime getnil
else if  beg > 0    beg > strlength enc
return runtime getnil
if  len    0
p   0
else if  iscoderangevalid      enc instanceof utf8encoding
p   stringsupport utf8nth bytes  s  end  beg
len   stringsupport utf8offset bytes  p  end  len
else if  enc isfixedwidth
int w   enc maxlength
p   s   beg   w
if  p > end
p   end
len   0
else if  len   w > end   p
len   end   p
else
len    w
else if   p   stringsupport nth enc  bytes  s  end  beg      end
len   0
else
len   stringsupport offset enc  bytes  p  end  len
return makeshared19 runtime  p   s  len
/* rb_str_splice */
private irubyobject replaceinternal int beg  int len  rubystring repl
int oldlength   value getrealsize
if  beg   len >  oldlength  len   oldlength   beg
bytelist replbytes   repl value
int repllength   replbytes getrealsize
int newlength   oldlength   repllength   len
byteoldbytes   value getunsafebytes
int oldbegin   value getbegin
modify newlength
if  repllength    len
system arraycopy oldbytes  oldbegin   beg   len  value getunsafebytes    beg   repllength  oldlength    beg   len
if  repllength > 0  system arraycopy replbytes getunsafebytes    replbytes getbegin    value getunsafebytes    beg  repllength
value setrealsize newlength
return infectby repl
private void replaceinternal19 int beg  int len  rubystring repl
encoding enc   checkencoding repl
int p   value getbegin
int e
if  singlebyteoptimizable
p    beg
e   p   len
else
int end   p   value getrealsize
bytebytes   value getunsafebytes
p   stringsupport nth enc  bytes  p  end  beg
if  p     1  p   end
e   stringsupport nth enc  bytes  p  end  len
if  e     1  e   end
int cr   getcoderange
if  cr    cr_broken  clearcoderange
replaceinternal p   value getbegin    e   p  repl
associateencoding enc
cr   coderangeand cr  repl getcoderange
if  cr    cr_broken  setcoderange cr
/** rb_str_aref, rb_str_aref_m
*
*/
@jrubymethod name           reads   backref  writes   backref  compat   ruby1_8
public irubyobject op_aref threadcontext context  irubyobject arg1  irubyobject arg2
ruby runtime   context getruntime
if  arg1 instanceof rubyregexp  return subpat runtime  context   rubyregexp arg1  rubynumeric num2int arg2
return substr runtime  rubynumeric num2int arg1   rubynumeric num2int arg2
@jrubymethod name           reads   backref  writes   backref  compat   ruby1_8
public irubyobject op_aref threadcontext context  irubyobject arg
ruby runtime   context getruntime
if  arg instanceof rubyfixnum
return op_aref runtime  rubyfixnum fix2int  rubyfixnum arg
if  arg instanceof rubyregexp
return subpat runtime  context   rubyregexp arg  0
else if  arg instanceof rubystring
rubystring str    rubystring arg
return value indexof str value      1 ? str strdup runtime    runtime getnil
else if  arg instanceof rubyrange
int beglen     rubyrange  arg  beglenint value length    0
return beglen    null ? runtime getnil     substr runtime  beglen  beglen
return op_aref runtime  rubyfixnum num2int arg
private irubyobject op_aref ruby runtime  int idx
if  idx < 0  idx    value getrealsize
return idx < 0    idx >  value getrealsize   ? runtime getnil     runtime newfixnum value get idx    0xff
@jrubymethod name           reads   backref  writes   backref  compat   ruby1_9
public irubyobject op_aref19 threadcontext context  irubyobject arg1  irubyobject arg2
ruby runtime   context getruntime
if  arg1 instanceof rubyregexp  return subpat19 runtime  context   rubyregexp arg1  arg2
return substr19 runtime  rubynumeric num2int arg1   rubynumeric num2int arg2
@jrubymethod name           reads   backref  writes   backref  compat   ruby1_9
public irubyobject op_aref19 threadcontext context  irubyobject arg
ruby runtime   context getruntime
if  arg instanceof rubyfixnum
return op_aref19 runtime  rubynumeric fix2int  rubyfixnum arg
else if  arg instanceof rubyregexp
return subpat19 runtime  context   rubyregexp arg
else if  arg instanceof rubystring
rubystring str    rubystring arg
return strindex19 str  0      1 ? str strdup runtime    runtime getnil
else if  arg instanceof rubyrange
int len   strlength
int beglen     rubyrange  arg  beglenint len  0
return beglen    null ? runtime getnil     substr19 runtime  beglen  beglen
return op_aref19 runtime  rubynumeric num2int arg
@jrubymethod compat   ruby1_9
public irubyobject byteslice threadcontext context  irubyobject arg1  irubyobject arg2
return bytesubstr context runtime  rubynumeric num2int arg1   rubynumeric num2int arg2
@jrubymethod compat   ruby1_9
public irubyobject byteslice threadcontext context  irubyobject arg
return bytearef context runtime  arg
private irubyobject op_aref19 ruby runtime  int idx
irubyobject str   substr19 runtime  idx  1
return  str isnil        rubystring  str  value getrealsize      0 ? runtime getnil     str
/**
* rb_str_subpat_set
*
*/
private void subpatset threadcontext context  rubyregexp regexp  int nth  irubyobject repl
ruby runtime   context getruntime
if  regexp search context  this  0  false  < 0  throw runtime newindexerror
rubymatchdata match    rubymatchdata context getcurrentscope   getbackref runtime
nth   subpatsetcheck runtime  nth  match regs
final int start  end
if  match regs    null
start   match begin
end   match end
else
start   match regs beg
end   match regs end
if  start     1  throw runtime newindexerror     nth
replaceinternal start  end   start  repl converttostring
private int subpatsetcheck ruby runtime  int nth  region regs
int numregs   regs    null ? 1   regs numregs
if  nth < numregs
if  nth < 0
if   nth < numregs  return nth   numregs
else
return nth
throw runtime newindexerror     nth
private irubyobject subpat ruby runtime  threadcontext context  rubyregexp regex  int nth
if  regex search context  this  0  false  >  0
return rubyregexp nth_match nth  context getcurrentscope   getbackref runtime
return runtime getnil
private void subpatset19 threadcontext context  rubyregexp regexp  irubyobject backref  irubyobject repl
ruby runtime   context getruntime
if  regexp search19 context  this  0  false  < 0  throw runtime newindexerror
rubymatchdata match    rubymatchdata context getcurrentscope   getbackref runtime
int nth   backref    null ? 0   subpatsetcheck runtime  match backrefnumber backref   match regs
final int start  end
if  match regs    null
start   match begin
end   match end
else
start   match regs beg
end   match regs end
if  start     1  throw runtime newindexerror     nth
rubystring replstr    repl converttostring
encoding enc   checkencoding replstr
// todo: keep cr
replaceinternal start  end   start  replstr      todo  rb_str_splice_0
associateencoding enc
private irubyobject subpat19 ruby runtime  threadcontext context  rubyregexp regex  irubyobject backref
if  regex search19 context  this  0  false  >  0
rubymatchdata match    rubymatchdata context getcurrentscope   getbackref runtime
return rubyregexp nth_match match backrefnumber backref   context getcurrentscope   getbackref runtime
return runtime getnil
private irubyobject subpat19 ruby runtime  threadcontext context  rubyregexp regex
if  regex search19 context  this  0  false  >  0
return rubyregexp nth_match 0  context getcurrentscope   getbackref runtime
return runtime getnil
/** rb_str_aset, rb_str_aset_m
*
*/
@jrubymethod name      reads   backref  compat   ruby1_8
public irubyobject op_aset threadcontext context  irubyobject arg0  irubyobject arg1
if  arg0 instanceof rubyfixnum
return op_aset context  rubynumeric fix2int  rubyfixnum arg0   arg1
else if  arg0 instanceof rubyregexp
subpatset context   rubyregexp arg0  0  arg1 converttostring
return arg1
else if  arg0 instanceof rubystring
rubystring orig    rubystring arg0
int beg   value indexof orig value
if  beg < 0  throw context getruntime   newindexerror
replaceinternal beg  orig value getrealsize    arg1 converttostring
return arg1
else if  arg0 instanceof rubyrange
int beglen     rubyrange  arg0  beglenint value getrealsize    2
replaceinternal beglen  beglen  arg1 converttostring
return arg1
return op_aset context  rubynumeric num2int arg0   arg1
private irubyobject op_aset threadcontext context  int idx  irubyobject arg1
idx   checkindexforref idx  value getrealsize
if  arg1 instanceof rubyfixnum
modify
value set idx  rubynumeric fix2int  rubyfixnum arg1
else
replaceinternal idx  1  arg1 converttostring
return arg1
@jrubymethod name      reads   backref  compat   ruby1_8
public irubyobject op_aset threadcontext context  irubyobject arg0  irubyobject arg1  irubyobject arg2
if  arg0 instanceof rubyregexp
subpatset context   rubyregexp arg0  rubynumeric num2int arg1   arg2
else
int beg   rubynumeric num2int arg0
int len   rubynumeric num2int arg1
checklength len
rubystring repl   arg2 converttostring
replaceinternal checkindex beg  value getrealsize     len  repl
return arg2
@jrubymethod name      reads   backref  compat   ruby1_9
public irubyobject op_aset19 threadcontext context  irubyobject arg0  irubyobject arg1
if  arg0 instanceof rubyfixnum
return op_aset19 context  rubynumeric fix2int  rubyfixnum arg0   arg1
else if  arg0 instanceof rubyregexp
subpatset19 context   rubyregexp arg0  null  arg1
return arg1
else if  arg0 instanceof rubystring
rubystring orig    rubystring arg0
int beg   strindex19 orig  0
if  beg < 0  throw context getruntime   newindexerror
beg   sublength beg
replaceinternal19 beg  orig strlength    arg1 converttostring
return arg1
else if  arg0 instanceof rubyrange
int beglen     rubyrange  arg0  beglenint strlength    2
replaceinternal19 beglen  beglen  arg1 converttostring
return arg1
return op_aset19 context  rubynumeric num2int arg0   arg1
private irubyobject op_aset19 threadcontext context  int idx  irubyobject arg1
replaceinternal19 checkindex idx  strlength     1  arg1 converttostring
return arg1
@jrubymethod name      reads   backref  compat   ruby1_9
public irubyobject op_aset19 threadcontext context  irubyobject arg0  irubyobject arg1  irubyobject arg2
if  arg0 instanceof rubyregexp
subpatset19 context   rubyregexp arg0  arg1  arg2
else
int beg   rubynumeric num2int arg0
int len   rubynumeric num2int arg1
checklength len
rubystring repl   arg2 converttostring
replaceinternal19 checkindex beg  strlength     len  repl
return arg2
private boolean isheadslice int beg  int len
return beg    0    len > 0    len <  value getrealsize
private boolean istailslice int beg  int len
return beg >  0    len > 0     beg   len     value getrealsize
/**
* excises (removes) a slice of the string that starts at index zero
*
* @param len the number of bytes to remove.
*/
private void excisehead int len
// just adjust the view start
view len  value getrealsize     len
/**
* excises (removes) a slice of the string that ends at the last byte in the string
*
* @param len the number of bytes to remove.
*/
private void excisetail int len
// just adjust the view length
view 0  value getrealsize     len
/** rb_str_slice_bang
*
*/
@jrubymethod name      reads   backref  writes   backref  compat   ruby1_8
public irubyobject slice_bang threadcontext context  irubyobject arg0
irubyobject result   op_aref context  arg0
if   result isnil
// optimize slice!(0), slice!(0..len), and slice!(pos..-1)
int beg    1
int len   1
if  arg0 instanceof rubyfixnum
beg   rubynumeric num2int arg0
else if  arg0 instanceof rubyrange
int beglen     rubyrange  arg0  beglenint value getrealsize    2
beg   beglen
len   beglen
if  isheadslice beg  len
excisehead len
else if  istailslice beg  len
excisetail len
else
op_aset context  arg0  rubystring newemptystring context getruntime
return result
@jrubymethod name      reads   backref  writes   backref  compat   ruby1_8
public irubyobject slice_bang threadcontext context  irubyobject arg0  irubyobject arg1
irubyobject result   op_aref context  arg0  arg1
if   result isnil
// optimize slice!(0, len) and slice!(str.length - len, len)
int beg    1
int len   0
if  arg0 instanceof rubyfixnum    arg1 instanceof rubyfixnum
beg   rubynumeric num2int arg0
len   rubynumeric num2int arg1
if  isheadslice beg  len
excisehead len
else if  istailslice beg  len
excisetail len
else
op_aset context  arg0  arg1  rubystring newemptystring context getruntime
return result
@jrubymethod name      reads   backref  writes   backref  compat   ruby1_9
public irubyobject slice_bang19 threadcontext context  irubyobject arg0
irubyobject result   op_aref19 context  arg0
if  result isnil
modifycheck       keep cr ?
else
op_aset19 context  arg0  rubystring newemptystring context getruntime
return result
@jrubymethod name      reads   backref  writes   backref  compat   ruby1_9
public irubyobject slice_bang19 threadcontext context  irubyobject arg0  irubyobject arg1
irubyobject result   op_aref19 context  arg0  arg1
if  result isnil
modifycheck       keep cr ?
else
op_aset19 context  arg0  arg1  rubystring newemptystring context getruntime
return result
@jrubymethod name           compat   ruby1_8
public irubyobject succ threadcontext context
rubystring str   strdup context getruntime
str succ_bang
return str
@jrubymethod name           compat   ruby1_8
public irubyobject succ_bang
if  value getrealsize      0
modifycheck
return this
modify
boolean alnumseen   false
int pos    1  n   0
int p   value getbegin
int end   p   value getrealsize
bytebytes   value getunsafebytes
for  int i   end   1  i >  p  i
int c   bytes   0xff
if  ascii isalnum c
alnumseen   true
if   ascii isdigit c     c <        ascii islower c     c <        ascii isupper c     c <
bytes    byte  c   1
pos    1
break
pos   i
n   ascii isdigit c  ?      ascii islower c  ?
bytes   ascii isdigit c  ?  byte     ascii islower c  ?  byte      byte
if   alnumseen
for  int i   end   1  i >  p  i
int c   bytes   0xff
if  c < 0xff
bytes    byte  c   1
pos    1
break
pos   i
n
bytes   0
if  pos >  1
// this represents left most digit in a set of incremented
// values?  therefore leftmost numeric must be '1' and not '0'
// 999 -> 1000, not 999 -> 0000.  whereas chars should be
// zzz -> aaaa and non-alnum byte values should be "\377" -> "\001\000"
value insert pos   byte  n
return this
private static enum neighborchar  not_char  found  wrapped
private static neighborchar succchar encoding enc  bytebytes  int p  int len
while  true
int i   len   1
for    i >  0    bytes     byte 0xff  i    bytes   0
if  i < 0  return neighborchar wrapped
bytes    byte   bytes   0xff    1
int cl   stringsupport preciselength enc  bytes  p  p   len
if  cl > 0
if  cl    len
return neighborchar found
else
for  int j   p   cl  j < p   len   cl  j    bytes    byte 0xff
if  cl     1    i < len   1
int len2   len   1
for    len2 > 0  len2
if  stringsupport preciselength enc  bytes  p  p   len2      1  break
for  int j   p   len2   1  j < p   len    len2   1   j    bytes    byte 0xff
private static neighborchar predchar encoding enc  bytebytes  int p  int len
while  true
int i   len   1
for    i >  0    bytes    0  i    bytes    byte 0xff
if  i < 0  return neighborchar wrapped
bytes    byte   bytes   0xff    1
int cl   stringsupport preciselength enc  bytes  p  p   len
if  cl > 0
if  cl    len
return neighborchar found
else
for  int j   p   cl  j < p   len   cl  j    bytes   0
if  cl     1    i < len   1
int len2   len   1
for    len2 > 0  len2
if  stringsupport preciselength enc  bytes  p  p   len2      1  break
for  int j   p   len2   1  j < p   len    len2   1   j    bytes   0
private static neighborchar succalnumchar encoding enc  bytebytes  int p  int len  bytecarry  int carryp
byte save   new byte
int c   enc mbctocode bytes  p  p   len
final int ctype
if  enc isdigit c
ctype   charactertype digit
else if  enc isalpha c
ctype   charactertype alpha
else
return neighborchar not_char
system arraycopy bytes  p  save  0  len
neighborchar ret   succchar enc  bytes  p  len
if  ret    neighborchar found
c   enc mbctocode bytes  p  p   len
if  enc iscodectype c  ctype   return neighborchar found
system arraycopy save  0  bytes  p  len
int range   1
while  true
system arraycopy bytes  p  save  0  len
ret   predchar enc  bytes  p  len
if  ret    neighborchar found
c   enc mbctocode bytes  p  p   len
if   enc iscodectype c  ctype
system arraycopy save  0  bytes  p  len
break
else
system arraycopy save  0  bytes  p  len
break
range
if  range    1  return neighborchar not_char
if  ctype    charactertype digit
system arraycopy bytes  p  carry  carryp  len
return neighborchar wrapped
system arraycopy bytes  p  carry  carryp  len
succchar enc  carry  carryp  len
return neighborchar wrapped
@jrubymethod name           compat   ruby1_9
public irubyobject succ19 threadcontext context
ruby runtime   context getruntime
final rubystring str
if  value getrealsize   > 0
str   new rubystring runtime  getmetaclass    succcommon19 value
// todo: rescan code range ?
else
str   newemptystring runtime  gettype    value getencoding
return str infectby this
@jrubymethod name           compat   ruby1_9
public irubyobject succ_bang19
modifycheck
if  value getrealsize   > 0
value   succcommon19 value
sharelevel   share_level_none
// todo: rescan code range ?
return this
private bytelist succcommon19 bytelist original
byte carry   new byte
int carryp   0
carry   1
int carrylen   1
bytelist valuecopy   new bytelist original
valuecopy setencoding original getencoding
encoding enc   original getencoding
int p   valuecopy getbegin
int end   p   valuecopy getrealsize
int s   end
bytebytes   valuecopy getunsafebytes
neighborchar neighbor   neighborchar found
int lastalnum    1
boolean alnumseen   false
while   s   enc prevcharhead bytes  p  s  end       1
if  neighbor    neighborchar not_char    lastalnum     1
if  ascii isalpha bytes   0xff  ?
ascii isdigit bytes   0xff
ascii isdigit bytes   0xff  ?
ascii isalpha bytes   0xff    false
s   lastalnum
break
int cl   stringsupport preciselength enc  bytes  s  end
if  cl <  0  continue
switch  neighbor   succalnumchar enc  bytes  s  cl  carry  0
case not_char  continue
case found     return valuecopy
case wrapped   lastalnum   s
alnumseen   true
carryp   s   p
carrylen   cl
if   alnumseen
s   end
while   s   enc prevcharhead bytes  p  s  end       1
int cl   stringsupport preciselength enc  bytes  s  end
if  cl <  0  continue
neighbor   succchar enc  bytes  s  cl
if  neighbor    neighborchar found  return valuecopy
if  stringsupport preciselength enc  bytes  s  s   1     cl  succchar enc  bytes  s  cl      wrapped to  0    0   search next valid char
if   enc isasciicompatible
system arraycopy bytes  s  carry  0  cl
carrylen   cl
carryp   s   p
valuecopy ensure valuecopy getbegin     valuecopy getrealsize     carrylen
s   valuecopy getbegin     carryp
system arraycopy valuecopy getunsafebytes    s  valuecopy getunsafebytes    s   carrylen  valuecopy getrealsize     carryp
system arraycopy carry  0  valuecopy getunsafebytes    s  carrylen
valuecopy setrealsize valuecopy getrealsize     carrylen
return valuecopy
/** rb_str_upto_m
*
*/
@jrubymethod name      compat   ruby1_8
public irubyobject upto18 threadcontext context  irubyobject end  block block
return uptocommon18 context  end  false  block
@jrubymethod name      compat   ruby1_8
public irubyobject upto18 threadcontext context  irubyobject end  irubyobject excl  block block
return uptocommon18 context  end  excl istrue    block
final irubyobject uptocommon18 threadcontext context  irubyobject arg  boolean excl  block block
rubystring end   arg converttostring
checkencoding end
int n   op_cmp19 end
if  n > 0     excl    n    0   return this
irubyobject afterend   end callmethod context
rubystring current   this
while   current op_equal19 context  afterend  istrue
block yield context  current
if   excl    current op_equal19 context  end  istrue    break
current   current callmethod context     converttostring
if  excl    current op_equal19 context  end  istrue    break
if  current value getrealsize   > end value getrealsize      current value getrealsize      0  break
return this
@jrubymethod name      compat   ruby1_9
public irubyobject upto19 threadcontext context  irubyobject end  block block
ruby runtime   context getruntime
return block isgiven   ? uptocommon19 context  end  false  block    enumeratorize runtime  this     end
@jrubymethod name      compat   ruby1_9
public irubyobject upto19 threadcontext context  irubyobject end  irubyobject excl  block block
return block isgiven   ? uptocommon19 context  end  excl istrue    block
enumeratorize context getruntime    this     new irubyobject end  excl
final irubyobject uptocommon19 threadcontext context  irubyobject arg  boolean excl  block block
return uptocommon19 context  arg  excl  block  false
final irubyobject uptocommon19 threadcontext context  irubyobject arg  boolean excl  block block  boolean assymbol
ruby runtime   context getruntime
if  arg instanceof rubysymbol  throw runtime newtypeerror
rubystring end   arg converttostring
encoding enc   checkencoding end
boolean isascii   scanforcoderange      cr_7bit    end scanforcoderange      cr_7bit
if  value getrealsize      1    end value getrealsize      1    isascii
byte c   value getunsafebytes
byte e   end value getunsafebytes
if  c > e     excl    c    e   return this
while  true
rubystring s   new rubystring runtime  runtime getstring    rubyinteger single_char_bytelists
enc  cr_7bit
s sharelevel   share_level_bytelist
block yield context  assymbol ? runtime newsymbol s tostring      s
if   excl    c    e  break
c
if  excl    c    e  break
return this
else if  isascii    ascii isdigit value getunsafebytes       ascii isdigit end value getunsafebytes
int s   value getbegin
int send   s   value getrealsize
bytebytes   value getunsafebytes
while  s < send
if   ascii isdigit bytes   0xff   return uptocommon19nodigits context  end  excl  block  assymbol
s
s   end value getbegin
send   s   end value getrealsize
bytes   end value getunsafebytes
while  s < send
if   ascii isdigit bytes   0xff   return uptocommon19nodigits context  end  excl  block  assymbol
s
irubyobject b   stringtoinum19 10  false
irubyobject e   end stringtoinum19 10  false
irubyobjectargs   new irubyobject
args   rubyfixnum newfixnum runtime  value length
rubyarray argsarr   runtime newarraynocopy args
if  b instanceof rubyfixnum    e instanceof rubyfixnum
int bi   rubynumeric fix2int b
int ei   rubynumeric fix2int e
while  bi <  ei
if  excl    bi    ei  break
args   rubyfixnum newfixnum runtime  bi
bytelist to   new bytelist value length     5
sprintf sprintf to     argsarr
rubystring str   rubystring newstringnocopy runtime  to  usasciiencoding instance  cr_7bit
block yield context  assymbol ? runtime newsymbol str tostring      str
bi
else
string op   excl ?
while  b callmethod context  op  e  istrue
args   b
bytelist to   new bytelist value length     5
sprintf sprintf to     argsarr
rubystring str   rubystring newstringnocopy runtime  to  usasciiencoding instance  cr_7bit
block yield context  assymbol ? runtime newsymbol str tostring      str
b   b callmethod context
return this
return uptocommon19nodigits context  end  excl  block  assymbol
private irubyobject uptocommon19nodigits threadcontext context  rubystring end  boolean excl  block block  boolean assymbol
ruby runtime   context runtime
int n   op_cmp19 end
if  n > 0     excl    n    0   return this
irubyobject afterend   end callmethod context
rubystring current   strdup context runtime
while   current op_equal19 context  afterend  istrue
irubyobject next   null
if  excl     current op_equal19 context  end  istrue    next   current callmethod context
block yield context  assymbol ? runtime newsymbol current tostring      current
if  next    null  break
current   next converttostring
if  excl    current op_equal19 context  end  istrue    break
if  current getbytelist   length   > end getbytelist   length      current getbytelist   length      0  break
return this
/** rb_str_include
*
*/
@jrubymethod name      compat   ruby1_8
public rubyboolean include_p threadcontext context  irubyobject obj
ruby runtime   context getruntime
if  obj instanceof rubyfixnum
int c   rubynumeric fix2int  rubyfixnum obj
for  int i   0  i < value getrealsize    i
if  value get i      byte c  return runtime gettrue
return runtime getfalse
return value indexof obj converttostring   value      1 ? runtime getfalse     runtime gettrue
@jrubymethod name      compat   ruby1_9
public rubyboolean include_p19 threadcontext context  irubyobject obj
ruby runtime   context getruntime
return strindex19 obj converttostring    0      1 ? runtime getfalse     runtime gettrue
@jrubymethod name      compat   ruby1_9
public irubyobject chr threadcontext context
return substr19 context getruntime    0  1
@jrubymethod name      compat   ruby1_9
public irubyobject getbyte threadcontext context  irubyobject index
ruby runtime   context getruntime
int i   rubynumeric num2int index
if  i < 0  i    value getrealsize
if  i < 0    i >  value getrealsize    return runtime getnil
return rubyfixnum newfixnum runtime  value getunsafebytes     0xff
@jrubymethod name      compat   ruby1_9
public irubyobject setbyte threadcontext context  irubyobject index  irubyobject val
modifyandkeepcoderange
int i   rubynumeric num2int index
int b   rubynumeric num2int val
value getunsafebytes      byte b
return val
/** rb_str_to_i
*
*/
@jrubymethod name      compat   ruby1_8
public irubyobject to_i
return stringtoinum 10  false
/** rb_str_to_i
*
*/
@jrubymethod name      compat   ruby1_8
public irubyobject to_i irubyobject arg0
long base   checkbase arg0
return stringtoinum  int base  false
@jrubymethod name      compat   ruby1_9
public irubyobject to_i19
return stringtoinum19 10  false
@jrubymethod name      compat   ruby1_9
public irubyobject to_i19 irubyobject arg0
long base   checkbase arg0
return stringtoinum19  int base  false
private long checkbase irubyobject arg0
long base   arg0 converttointeger   getlongvalue
if base < 0
throw getruntime   newargumenterror     base
return base
/** rb_str_to_inum
*
*/
public irubyobject stringtoinum int base  boolean badcheck
bytelist s   this value
return convertbytes bytelisttoinum getruntime    s  base  badcheck
public irubyobject stringtoinum19 int base  boolean badcheck
bytelist s   this value
return convertbytes bytelisttoinum19 getruntime    s  base  badcheck
/** rb_str_oct
*
*/
@jrubymethod name      compat   ruby1_8
public irubyobject oct threadcontext context
return stringtoinum  8  false
@jrubymethod name      compat   ruby1_9
public irubyobject oct19 threadcontext context
if   value getencoding   isasciicompatible
throw context getruntime   newencodingcompatibilityerror     value getencoding
return oct context
/** rb_str_hex
*
*/
@jrubymethod name      compat   ruby1_8
public irubyobject hex threadcontext context
return stringtoinum 16  false
@jrubymethod name      compat   ruby1_9
public irubyobject hex19 threadcontext context
if   value getencoding   isasciicompatible
throw context getruntime   newencodingcompatibilityerror     value getencoding
return stringtoinum19 16  false
/** rb_str_to_f
*
*/
@jrubymethod name      compat   ruby1_8
public irubyobject to_f
return rubynumeric str2fnum getruntime    this
@jrubymethod name      compat   ruby1_9
public irubyobject to_f19
return rubynumeric str2fnum19 getruntime    this  false
/** rb_str_split_m
*
*/
@jrubymethod name      writes   backref  compat   ruby1_8
public rubyarray split threadcontext context
return split context  context getruntime   getnil
@jrubymethod name      writes   backref  compat   ruby1_8
public rubyarray split threadcontext context  irubyobject arg0
return splitcommon arg0  false  0  0  context
@jrubymethod name      writes   backref  compat   ruby1_8
public rubyarray split threadcontext context  irubyobject arg0  irubyobject arg1
final int lim   rubynumeric num2int arg1
if  lim <  0
return splitcommon arg0  false  lim  1  context
else
if  lim    1  return value getrealsize      0 ? context getruntime   newarray     context getruntime   newarray this
return splitcommon arg0  true  lim  1  context
private rubyarray splitcommon irubyobject spat  final boolean limit  final int lim  final int i  threadcontext context
final rubyarray result
if  spat isnil       spat   context getruntime   getglobalvariables   get     isnil
result   awksplit limit  lim  i
else
if  spat instanceof rubystring      rubystring  spat  value getrealsize      1
rubystring strspat    rubystring  spat
if  strspat value getunsafebytes       byte
result   awksplit limit  lim  i
else
result   regexsplit context  spat  limit  lim  i
else
result   regexsplit context  spat  limit  lim  i
if   limit    lim    0
while  result size   > 0      rubystring  result eltinternal result size     1   value getrealsize      0
result pop context
return result
private rubyarray regexsplit threadcontext context  irubyobject pat  boolean limit  int lim  int i
ruby runtime   context getruntime
final regex pattern   getquotedpattern pat
int begin   value getbegin
int len   value getrealsize
int range   begin   len
bytebytes   value getunsafebytes
final matcher matcher   pattern matcher bytes  begin  range
rubyarray result   runtime newarray
encoding enc   getencodingforkcodedefault runtime  pattern  pat
boolean captures   pattern numberofcaptures      0
int end  beg   0
boolean lastnull   false
int start   begin
while   end   matcher search start  range  option none   >  0
if  start    end   begin    matcher getbegin      matcher getend
if  len    0
result append newemptystring runtime  getmetaclass    infectby this
break
else if  lastnull
result append makeshared runtime  beg  enc length bytes  begin   beg  range
beg   start   begin
else
start    start    range ? 1   enc length bytes  start  range
lastnull   true
continue
else
result append makeshared runtime  beg  end   beg
beg   matcher getend
start   begin   beg
lastnull   false
if  captures  populatecapturesforsplit runtime  result  matcher  false
if  limit    lim <    i  break
// only this case affects backrefs
context getcurrentscope   setbackref runtime getnil
if  len > 0     limit    len > beg    lim < 0   result append makeshared runtime  beg  len   beg
return result
private encoding getencodingforkcodedefault ruby runtime  regex pattern  irubyobject pat
encoding enc   pattern getencoding
if  enc    runtime getkcode   getencoding      pat instanceof rubyregexp
rubyregexp regexp    rubyregexp  pat
if  regexp iskcodedefault
enc   runtime getkcode   getencoding
return enc
private void populatecapturesforsplit ruby runtime  rubyarray result  matcher matcher  boolean is19
region region   matcher getregion
for  int i   1  i < region numregs  i
int beg   region beg
if  beg     1  continue
result append is19 ? makeshared19 runtime  beg  region end   beg    makeshared runtime  beg  region end   beg
private rubyarray awksplit boolean limit  int lim  int i
ruby runtime   getruntime
rubyarray result   runtime newarray
bytebytes   value getunsafebytes
int p   value getbegin
int len   value getrealsize
int end   p   len
boolean skip   true
int e   0  b   0
while  p < end
int c   bytes   0xff
if  skip
if  ascii isspace c
b
else
e   b   1
skip   false
if  limit    lim <  i  break
else
if  ascii isspace c
result append makeshared runtime  b  e   b
skip   true
b   e   1
if  limit  i
else
e
if  len > 0     limit    len > b    lim < 0   result append makeshared runtime  b  len   b
return result
@jrubymethod name      writes   backref  compat   ruby1_9
public rubyarray split19 threadcontext context
return split19 context  context getruntime   getnil
@jrubymethod name      writes   backref  compat   ruby1_9
public rubyarray split19 threadcontext context  irubyobject arg0
return splitcommon19 arg0  false  0  0  context
@jrubymethod name      writes   backref  compat   ruby1_9
public rubyarray split19 threadcontext context  irubyobject arg0  irubyobject arg1
final int lim   rubynumeric num2int arg1
if  lim <  0
return splitcommon19 arg0  false  lim  1  context
else
if  lim    1  return value getrealsize      0 ? context getruntime   newarray     context getruntime   newarray this
return splitcommon19 arg0  true  lim  1  context
private rubyarray splitcommon19 irubyobject spat  final boolean limit  final int lim  final int i  threadcontext context
final rubyarray result
if  spat isnil       spat   context getruntime   getglobalvariables   get     isnil
result   awksplit19 limit  lim  i
else
if  spat instanceof rubystring
bytelist spatvalue     rubystring spat  value
int len   spatvalue getrealsize
encoding spatenc   spatvalue getencoding
if  len    0
regex pattern   rubyregexp getregexpfromcache context getruntime    spatvalue  spatenc  new regexpoptions
result   regexsplit19 context  pattern  pattern  limit  lim  i
else
final int c
bytebytes   spatvalue getunsafebytes
int p   spatvalue getbegin
if  spatenc isasciicompatible
c   len    1 ? bytes   0xff    1
else
c   len    stringsupport preciselength spatenc  bytes  p  p   len  ? spatenc mbctocode bytes  p  p   len     1
result   c      ? awksplit19 limit  lim  i    stringsplit19 context   rubystring spat  limit  lim  i
else
final regex pattern  prepared
final rubyregexp regexp
ruby runtime   context getruntime
if  spat instanceof rubyregexp
regexp    rubyregexp spat
pattern   regexp getpattern
prepared   regexp preparepattern this
else
regexp   null
pattern   getstringpattern19 runtime  spat
prepared   rubyregexp preparepattern runtime  pattern  this
result   regexsplit19 context  pattern  prepared  limit  lim  i
if   limit    lim    0
while  result size   > 0      rubystring  result eltinternal result size     1   value getrealsize      0
result pop context
return result
private rubyarray regexsplit19 threadcontext context  regex pattern  regex prepared  boolean limit  int lim  int i
ruby runtime   context getruntime
int begin   value getbegin
int len   value getrealsize
int range   begin   len
bytebytes   value getunsafebytes
final matcher matcher   prepared matcher bytes  begin  range
rubyarray result   runtime newarray
encoding enc   value getencoding
boolean captures   pattern numberofcaptures      0
int end  beg   0
boolean lastnull   false
int start   begin
while   end   matcher search start  range  option none   >  0
if  start    end   begin    matcher getbegin      matcher getend
if  len    0
result append newemptystring runtime  getmetaclass    infectby this
break
else if  lastnull
result append makeshared19 runtime  beg  stringsupport length enc  bytes  begin   beg  range
beg   start   begin
else
start    start    range ? 1   stringsupport length enc  bytes  start  range
lastnull   true
continue
else
result append makeshared19 runtime  beg  end   beg
beg   matcher getend
start   begin   beg
lastnull   false
if  captures  populatecapturesforsplit runtime  result  matcher  true
if  limit    lim <    i  break
// only this case affects backrefs
context getcurrentscope   setbackref runtime getnil
if  len > 0     limit    len > beg    lim < 0   result append makeshared19 runtime  beg  len   beg
return result
private rubyarray awksplit19 boolean limit  int lim  int i
ruby runtime   getruntime
rubyarray result   runtime newarray
bytebytes   value getunsafebytes
int p   value getbegin
int ptr   p
int len   value getrealsize
int end   p   len
encoding enc   value getencoding
boolean skip   true
int e   0  b   0
boolean singlebyte   singlebyteoptimizable enc
while  p < end
final int c
if  singlebyte
c   bytes   0xff
else
c   stringsupport codepoint runtime  enc  bytes  p  end
p    stringsupport length enc  bytes  p  end
if  skip
if  enc isspace c
b   p   ptr
else
e   p   ptr
skip   false
if  limit    lim <  i  break
else
if  enc isspace c
result append makeshared19 runtime  b  e   b
skip   true
b   p   ptr
if  limit  i
else
e   p   ptr
if  len > 0     limit    len > b    lim < 0   result append makeshared19 runtime  b  len   b
return result
private rubyarray stringsplit19 threadcontext context  rubystring spat  boolean limit  int lim  int i
ruby runtime   context getruntime
if  scanforcoderange      cr_broken  throw runtime newargumenterror     value getencoding
if  spat scanforcoderange      cr_broken  throw runtime newargumenterror     spat value getencoding
rubyarray result   runtime newarray
encoding enc   checkencoding spat
bytelist pattern   spat value
int e  p   0
while  p < value getrealsize       e   value indexof pattern  p   >  0
int t   enc rightadjustcharhead value getunsafebytes    p   value getbegin    e  p   value getrealsize
if  t    e
p   t
continue
result append makeshared19 runtime  p  e   p
p   e   pattern getrealsize
if  limit    lim <    i  break
if  value getrealsize   > 0     limit    value getrealsize   > p    lim < 0
result append makeshared19 runtime  p  value getrealsize     p
return result
private rubystring getstringforpattern irubyobject obj
if  obj instanceof rubystring  return  rubystring obj
irubyobject val   obj checkstringtype
if  val isnil    throw getruntime   newtypeerror     obj getmetaclass
return  rubystring val
/** get_pat (used by match/match19)
*
*/
private rubyregexp getpattern irubyobject obj
if  obj instanceof rubyregexp  return  rubyregexp obj
return rubyregexp newregexp getruntime    getstringforpattern obj  value
private regex getquotedpattern irubyobject obj
if  obj instanceof rubyregexp  return   rubyregexp obj  getpattern
ruby runtime   getruntime
return rubyregexp getquotedregexpfromcache runtime  getstringforpattern obj  value  runtime getkcode   getencoding    new regexpoptions
private regex getstringpattern ruby runtime  encoding enc  irubyobject obj
return rubyregexp getquotedregexpfromcache runtime  getstringforpattern obj  value  enc  new regexpoptions
private regex getstringpattern19 ruby runtime  irubyobject obj
rubystring str   getstringforpattern obj
if  str scanforcoderange      cr_broken
throw runtime newregexperror
rubyregexp regexpdescription19 runtime  str value  new regexpoptions    str value getencoding    tostring
if  str value getencoding   isdummy
throw runtime newargumenterror
return rubyregexp getquotedregexpfromcache19 runtime  str value  new regexpoptions    str isasciionly
/** rb_str_scan
*
*/
@jrubymethod reads   backref  writes   backref  compat   ruby1_8
public irubyobject scan threadcontext context  irubyobject arg  block block
ruby runtime   context getruntime
encoding enc   runtime getkcode   getencoding
final regex pattern
final int tuflags
if  arg instanceof rubyregexp
rubyregexp regex    rubyregexp arg
pattern   regex getpattern
tuflags   regex flags
else
pattern   getstringpattern runtime  enc  arg
if  arg istaint
tuflags   rubybasicobject tainted_f
else
tuflags   0
int begin   value getbegin
int range   begin   value getrealsize
final matcher matcher   pattern matcher value getunsafebytes    begin  range
if  block isgiven
return scaniter context  pattern  matcher  enc  block  begin  range  tuflags
else
return scannoiter context  pattern  matcher  enc  begin  range  tuflags
private irubyobject scaniter threadcontext context  regex pattern  matcher matcher  encoding enc  block block  int begin  int range  int tuflags
ruby runtime   context getruntime
bytebytes   value getunsafebytes
int size   value getrealsize
rubymatchdata match   null
dynamicscope scope   context getcurrentscope
int end   0
if  pattern numberofcaptures      0
while  matcher search begin   end  range  option none  >  0
end   positionend matcher  enc  begin  range
match   rubyregexp updatebackref context  this  scope  matcher  pattern
rubystring substr   makeshared runtime  matcher getbegin    matcher getend     matcher getbegin
substr infectby tuflags
match infectby tuflags
block yield context  substr
modifycheck bytes  size
else
while  matcher search begin   end  range  option none  >  0
end   positionend matcher  enc  begin  range
match   rubyregexp updatebackref context  this  scope  matcher  pattern
match infectby tuflags
block yield context  populatecapturesforscan runtime  matcher  range  tuflags  false
modifycheck bytes  size
scope setbackref match    null ? runtime getnil     match
return this
private irubyobject scannoiter threadcontext context  regex pattern  matcher matcher  encoding enc  int begin  int range  int tuflags
ruby runtime   context getruntime
rubyarray ary   runtime newarray
int end   0
if  pattern numberofcaptures      0
while  matcher search begin   end  range  option none  >  0
end   positionend matcher  enc  begin  range
rubystring substr   makeshared runtime  matcher getbegin    matcher getend     matcher getbegin
substr infectby tuflags
ary append substr
else
while  matcher search begin   end  range  option none  >  0
end   positionend matcher  enc  begin  range
ary append populatecapturesforscan runtime  matcher  range  tuflags  false
dynamicscope scope   context getcurrentscope
if  ary size   > 0
rubymatchdata match   rubyregexp updatebackref context  this  scope  matcher  pattern
match infectby tuflags
else
scope setbackref runtime getnil
return ary
private int positionend matcher matcher  encoding enc  int begin  int range
int end   matcher getend
if  matcher getbegin      end
if  value getrealsize   > end
return end   enc length value getunsafebytes    begin   end  range
else
return end   1
else
return end
private irubyobject populatecapturesforscan ruby runtime  matcher matcher  int range  int tuflags  boolean is19
region region   matcher getregion
rubyarray result   getruntime   newarray region numregs
for  int i 1  i<region numregs  i
int beg   region beg
if  beg     1
result append runtime getnil
else
rubystring substr   is19 ? makeshared19 runtime  beg  region end   beg    makeshared runtime  beg  region end   beg
substr infectby tuflags
result append substr
return result
@jrubymethod name      reads   backref  writes   backref  compat   ruby1_9
public irubyobject scan19 threadcontext context  irubyobject arg  block block
ruby runtime   context getruntime
encoding enc   value getencoding
final regex pattern  prepared
final rubyregexp regexp
final int tuflags
if  arg instanceof rubyregexp
regexp    rubyregexp arg
tuflags   regexp flags
pattern   regexp getpattern
prepared   regexp preparepattern this
else
regexp   null
tuflags   arg istaint   ? rubybasicobject tainted_f   0
pattern   getstringpattern19 runtime  arg
prepared   rubyregexp preparepattern runtime  pattern  this
if  block isgiven
return scaniter19 context  pattern  prepared  enc  block  regexp  tuflags
else
return scannoiter19 context  pattern  prepared  enc  regexp  tuflags
private irubyobject scaniter19 threadcontext context  regex pattern  regex prepared  encoding enc  block block  rubyregexp regexp  int tuflags
ruby runtime   context getruntime
bytebytes   value getunsafebytes
int begin   value getbegin
int len   value getrealsize
int range   begin   len
final matcher matcher   prepared matcher bytes  begin  range
dynamicscope scope   context getcurrentscope
int end   0
rubymatchdata match   null
if  pattern numberofcaptures      0
while  matcher search begin   end  range  option none  >  0
end   positionend matcher  enc  begin  range
match   rubyregexp updatebackref19 context  this  scope  matcher  pattern
match regexp   regexp
rubystring substr   makeshared19 runtime  matcher getbegin    matcher getend     matcher getbegin
substr infectby tuflags
match infectby tuflags
block yield context  substr
modifycheck bytes  len  enc
else
while  matcher search begin   end  range  option none  >  0
end   positionend matcher  enc  begin  range
match   rubyregexp updatebackref19 context  this  scope  matcher  pattern
match regexp   regexp
match infectby tuflags
block yield context  populatecapturesforscan runtime  matcher  range  tuflags  true
modifycheck bytes  len  enc
scope setbackref match    null ? runtime getnil     match
return this
private irubyobject scannoiter19 threadcontext context  regex pattern  regex prepared  encoding enc  rubyregexp regexp  int tuflags
ruby runtime   context getruntime
bytebytes   value getunsafebytes
int begin   value getbegin
int range   begin   value getrealsize
final matcher matcher   prepared matcher bytes  begin  range
rubyarray ary   runtime newarray
int end   0
if  pattern numberofcaptures      0
while  matcher search begin   end  range  option none  >  0
end   positionend matcher  enc  begin  range
rubystring substr   makeshared19 runtime  matcher getbegin    matcher getend     matcher getbegin
substr infectby tuflags
ary append substr
else
while  matcher search begin   end  range  option none  >  0
end   positionend matcher  enc  begin  range
ary append populatecapturesforscan runtime  matcher  range  tuflags  true
dynamicscope scope   context getcurrentscope
if  ary size   > 0
rubymatchdata match   rubyregexp updatebackref19 context  this  scope  matcher  pattern
match regexp   regexp
match infectby tuflags
else
scope setbackref runtime getnil
return ary
@jrubymethod name
public irubyobject start_with_p threadcontext context
return context getruntime   getfalse
@jrubymethod name
public irubyobject start_with_p threadcontext context  irubyobject arg
return start_with_pcommon arg  ? context getruntime   gettrue     context getruntime   getfalse
@jrubymethod name      rest   true
public irubyobject start_with_p threadcontext context  irubyobjectargs
for  int i   0  i < args length  i
if  start_with_pcommon args   return context getruntime   gettrue
return context getruntime   getfalse
private boolean start_with_pcommon irubyobject arg
irubyobject tmp   arg checkstringtype
if  tmp isnil    return false
rubystring otherstring    rubystring tmp
checkencoding otherstring
if  value getrealsize   < otherstring value getrealsize    return false
return value startswith otherstring value
@jrubymethod name
public irubyobject end_with_p threadcontext context
return context getruntime   getfalse
@jrubymethod name
public irubyobject end_with_p threadcontext context  irubyobject arg
return end_with_pcommon arg  ? context getruntime   gettrue     context getruntime   getfalse
@jrubymethod name      rest   true
public irubyobject end_with_p threadcontext context  irubyobjectargs
for  int i   0  i < args length  i
if  end_with_pcommon args   return context getruntime   gettrue
return context getruntime   getfalse
private boolean end_with_pcommon irubyobject arg
irubyobject tmp   arg checkstringtype
if  tmp isnil    return false
rubystring otherstring    rubystring tmp
encoding enc   checkencoding otherstring
if  value getrealsize   < otherstring value getrealsize    return false
int p   value getbegin
int end   p   value getrealsize
int s   end   otherstring value getrealsize
if  enc leftadjustcharhead value getunsafebytes    p  s  end     s  return false
return value endswith otherstring value
private static final bytelist space_bytelist   new bytelist bytelist plain
private irubyobject justify irubyobject arg0  int jflag
ruby runtime   getruntime
return justifycommon runtime  space_bytelist  rubyfixnum num2int arg0   jflag
private irubyobject justify irubyobject arg0  irubyobject arg1  int jflag
ruby runtime   getruntime
rubystring padstr   arg1 converttostring
bytelist pad   padstr value
if  pad getrealsize      0  throw runtime newargumenterror
int width   rubyfixnum num2int arg0
rubystring result   justifycommon runtime  pad  width  jflag
if  value getrealsize   < width  result infectby padstr
return result
private rubystring justifycommon ruby runtime  bytelist pad  int width  int jflag
if  width < 0    value getrealsize   >  width  return strdup runtime
bytelist res   new bytelist width
res setrealsize width
int padp   pad getbegin
int padlen   pad getrealsize
byte padbytes   pad getunsafebytes
int p   res getbegin
byte bytes   res getunsafebytes
if  jflag
int n   width   value getrealsize
int end   p     jflag       ? n   n   2
if  padlen <  1
while  p < end
bytes   padbytes
else
int q   padp
while  p   padlen <  end
system arraycopy padbytes  padp  bytes  p  padlen
p    padlen
while  p < end
bytes   padbytes
system arraycopy value getunsafebytes    value getbegin    bytes  p  value getrealsize
if  jflag
p    value getrealsize
int end   res getbegin     width
if  padlen <  1
while  p < end
bytes   padbytes
else
while  p   padlen <  end
system arraycopy padbytes  padp  bytes  p  padlen
p    padlen
while  p < end
bytes   padbytes
rubystring result   new rubystring runtime  getmetaclass    res
if    runtime is1_9        rubyfixnum num2int result length      > rubyfixnum num2int length
runtime is1_9        rubyfixnum num2int result length19    > rubyfixnum num2int length19
result infectby this
return result
private irubyobject justify19 irubyobject arg0  int jflag
ruby runtime   getruntime
rubystring result   justifycommon runtime  space_bytelist
1
true  value getencoding    rubyfixnum num2int arg0   jflag
if  getcoderange      cr_broken  result setcoderange getcoderange
return result
private irubyobject justify19 irubyobject arg0  irubyobject arg1  int jflag
ruby runtime   getruntime
rubystring padstr   arg1 converttostring
bytelist pad   padstr value
encoding enc   checkencoding padstr
int padcharlen   padstr strlength enc
if  pad getrealsize      0    padcharlen    0  throw runtime newargumenterror
int width   rubyfixnum num2int arg0
rubystring result   justifycommon runtime  pad
padcharlen
padstr singlebyteoptimizable
enc  width  jflag
if  rubyfixnum num2int result length19    > rubyfixnum num2int length19     result infectby padstr
int cr   coderangeand getcoderange    padstr getcoderange
if  cr    cr_broken  result setcoderange cr
return result
private rubystring justifycommon ruby runtime  bytelist pad  int padcharlen  boolean padsinglebyte  encoding enc  int width  int jflag
int len   strlength enc
if  width < 0    len >  width  return strdup runtime
int n   width   len
int llen    jflag       ? 0     jflag       ? n   n   2
int rlen   n   llen
int padp   pad getbegin
int padlen   pad getrealsize
byte padbytes   pad getunsafebytes
bytelist res   new bytelist value getrealsize     n   padlen   padcharlen   2
int p   res getbegin
byte bytes   res getunsafebytes
while  llen > 0
if  padlen <  1
bytes   padbytes
llen
else if  llen > padcharlen
system arraycopy padbytes  padp  bytes  p  padlen
p    padlen
llen    padcharlen
else
int padpp   padsinglebyte ? padp   llen   stringsupport nth enc  padbytes  padp  padp   padlen  llen
n   padpp   padp
system arraycopy padbytes  padp  bytes  p  n
p    n
break
system arraycopy value getunsafebytes    value getbegin    bytes  p  value getrealsize
p    value getrealsize
while  rlen > 0
if  padlen <  1
bytes   padbytes
rlen
else if  rlen > padcharlen
system arraycopy padbytes  padp  bytes  p  padlen
p    padlen
rlen    padcharlen
else
int padpp   padsinglebyte ? padp   rlen   stringsupport nth enc  padbytes  padp  padp   padlen  rlen
n   padpp   padp
system arraycopy padbytes  padp  bytes  p  n
p    n
break
res setrealsize p
rubystring result   new rubystring runtime  getmetaclass    res
if    runtime is1_9        rubyfixnum num2int result length      > rubyfixnum num2int length
runtime is1_9        rubyfixnum num2int result length19    > rubyfixnum num2int length19
result infectby this
result associateencoding enc
return result
/** rb_str_ljust
*
*/
@jrubymethod name      compat   ruby1_8
public irubyobject ljust irubyobject arg0
return justify arg0
@jrubymethod name      compat   ruby1_8
public irubyobject ljust irubyobject arg0  irubyobject arg1
return justify arg0  arg1
@jrubymethod name      compat   ruby1_9
public irubyobject ljust19 irubyobject arg0
return justify19 arg0
@jrubymethod name      compat   ruby1_9
public irubyobject ljust19 irubyobject arg0  irubyobject arg1
return justify19 arg0  arg1
/** rb_str_rjust
*
*/
@jrubymethod name      compat   ruby1_8
public irubyobject rjust irubyobject arg0
return justify arg0
@jrubymethod name      compat   ruby1_8
public irubyobject rjust irubyobject arg0  irubyobject arg1
return justify arg0  arg1
@jrubymethod name      compat   ruby1_9
public irubyobject rjust19 irubyobject arg0
return justify19 arg0
@jrubymethod name      compat   ruby1_9
public irubyobject rjust19 irubyobject arg0  irubyobject arg1
return justify19 arg0  arg1
/** rb_str_center
*
*/
@jrubymethod compat   ruby1_8
public irubyobject center irubyobject arg0
return justify arg0
@jrubymethod compat   ruby1_8
public irubyobject center irubyobject arg0  irubyobject arg1
return justify arg0  arg1
@jrubymethod name      compat   ruby1_9
public irubyobject center19 irubyobject arg0
return justify19 arg0
@jrubymethod name      compat   ruby1_9
public irubyobject center19 irubyobject arg0  irubyobject arg1
return justify19 arg0  arg1
@jrubymethod
public irubyobject partition threadcontext context  block block
return rubyenumerable partition context  this  block
@jrubymethod
public irubyobject partition threadcontext context  irubyobject arg  block block
ruby runtime   context getruntime
final int pos
final rubystring sep
if  arg instanceof rubyregexp
rubyregexp regex    rubyregexp arg
pos   regex search19 context  this  0  false
if  pos < 0  return partitionmismatch runtime
sep    rubystring subpat19 runtime  context  regex
if  pos    0    sep value getrealsize      0  return partitionmismatch runtime
else
irubyobject tmp   arg checkstringtype
if  tmp isnil    throw runtime newtypeerror     arg getmetaclass   getname
sep    rubystring tmp
pos   strindex19 sep  0
if  pos < 0  return partitionmismatch runtime
return rubyarray newarray runtime  new irubyobject
makeshared19 runtime  0  pos
sep
makeshared19 runtime  pos   sep value getrealsize    value getrealsize     pos   sep value getrealsize
private irubyobject partitionmismatch ruby runtime
return rubyarray newarray runtime  new irubyobject this  newemptystring runtime   newemptystring runtime
@jrubymethod name
public irubyobject rpartition threadcontext context  irubyobject arg
ruby runtime   context getruntime
final int pos
final rubystring sep
if  arg instanceof rubyregexp
rubyregexp regex    rubyregexp arg
pos   regex search19 context  this  value getrealsize    true
if  pos < 0  return rpartitionmismatch runtime
sep    rubystring rubyregexp nth_match 0  context getcurrentscope   getbackref runtime
else
irubyobject tmp   arg checkstringtype
if  tmp isnil    throw runtime newtypeerror     arg getmetaclass   getname
sep    rubystring tmp
pos   strrindex19 sep  sublength value getrealsize
if  pos < 0  return rpartitionmismatch runtime
return rubyarray newarray runtime  new irubyobject
substr19 runtime  0  pos
sep
substr19 runtime  pos   sep strlength    value getrealsize
private irubyobject rpartitionmismatch ruby runtime
return rubyarray newarray runtime  new irubyobject newemptystring runtime   newemptystring runtime   this
/** rb_str_chop / rb_str_chop_bang
*
*/
@jrubymethod name      compat   ruby1_8
public irubyobject chop threadcontext context
if  value getrealsize      0  return newemptystring context getruntime    getmetaclass    infectby this
return makeshared context getruntime    0  choppedlength
@jrubymethod name      compat   ruby1_8
public irubyobject chop_bang threadcontext context
if  value getrealsize      0  return context getruntime   getnil
view 0  choppedlength
return this
private int choppedlength
int end   value getrealsize     1
if   value getunsafebytes
if  end > 0     value getunsafebytes          end
return end
@jrubymethod name      compat   ruby1_9
public irubyobject chop19 threadcontext context
ruby runtime   context getruntime
if  value getrealsize      0  return newemptystring runtime  getmetaclass    value getencoding    infectby this
return makeshared19 runtime  0  choppedlength19 runtime
@jrubymethod name      compat   ruby1_9
public irubyobject chop_bang19 threadcontext context
modifycheck
ruby runtime   context getruntime
if  value getrealsize      0  return runtime getnil
view 0  choppedlength19 runtime
if  getcoderange      cr_7bit  clearcoderange
return this
private int choppedlength19 ruby runtime
int p   value getbegin
int end   p   value getrealsize
if  p > end  return 0
byte bytes   value getunsafebytes
encoding enc   value getencoding
int s   enc prevcharhead bytes  p  end  end
if  s     1  return 0
if  s > p    codepoint runtime  enc  bytes  s  end
int s2   enc prevcharhead bytes  p  s  end
if  s2     1    codepoint runtime  enc  bytes  s2  end        s   s2
return s   p
/** rb_str_chop
*
*/
@jrubymethod name      compat   ruby1_8
public rubystring chomp threadcontext context
rubystring str   strdup context getruntime
str chomp_bang context
return str
@jrubymethod name      compat   ruby1_8
public rubystring chomp threadcontext context  irubyobject arg0
rubystring str   strdup context getruntime
str chomp_bang context  arg0
return str
/**
* rb_str_chomp_bang
*
* in the common case, removes cr and lf characters in various ways depending on the value of
*   the optional args[0].
* if args.length==0 removes one instance of cr, crlf or lf from the end of the string.
* if args.length>0 and args[0] is "\n" then same behaviour as args.length==0 .
* if args.length>0 and args[0] is "" then removes trailing multiple lf or crlf (but no crs at
*   all(!)).
*/
@jrubymethod name      compat   ruby1_8
public irubyobject chomp_bang threadcontext context
ruby runtime   context getruntime
if  value getrealsize      0  return runtime getnil
irubyobject rsobj   runtime getglobalvariables   get
if  rsobj    runtime getglobalvariables   getdefaultseparator    return smartchopbangcommon runtime
return chompbangcommon runtime  rsobj
@jrubymethod name      compat   ruby1_8
public irubyobject chomp_bang threadcontext context  irubyobject arg0
ruby runtime   context getruntime
if  value getrealsize      0  return runtime getnil
return chompbangcommon runtime  arg0
private irubyobject chompbangcommon ruby runtime  irubyobject rsobj
if  rsobj isnil    return rsobj
rubystring rs   rsobj converttostring
int p   value getbegin
int len   value getrealsize
byte bytes   value getunsafebytes
int rslen   rs value getrealsize
if  rslen    0
while  len > 0    bytes     byte
len
if  len > 0    bytes     byte    len
if  len < value getrealsize
view 0  len
return this
return runtime getnil
if  rslen > len  return runtime getnil
byte newline   rs value getunsafebytes
if  rslen    1    newline     byte    return smartchopbangcommon runtime
if  bytes    newline    rslen <  1    value endswith rs value
view 0  value getrealsize     rslen
return this
return runtime getnil
private irubyobject smartchopbangcommon ruby runtime
bytelist v   this value
int len   v getrealsize
int p   v getbegin
byte bytes   v getunsafebytes
byte b   bytes
if  b     byte
len
if  len > 0    bytes     byte    len
view 0  len
else if  b     byte
len
view 0  len
else
modifycheck
return runtime getnil
return this
@jrubymethod name      compat   ruby1_9
public rubystring chomp19 threadcontext context
rubystring str   strdup context getruntime
str chomp_bang19 context
return str
@jrubymethod name      compat   ruby1_9
public rubystring chomp19 threadcontext context  irubyobject arg0
rubystring str   strdup context getruntime
str chomp_bang19 context  arg0
return str
@jrubymethod name      compat   ruby1_9
public irubyobject chomp_bang19 threadcontext context
ruby runtime   context getruntime
if  value getrealsize      0  return runtime getnil
irubyobject rsobj   runtime getglobalvariables   get
if  rsobj    runtime getglobalvariables   getdefaultseparator    return smartchopbangcommon19 runtime
return chompbangcommon19 runtime  rsobj
@jrubymethod name      compat   ruby1_9
public irubyobject chomp_bang19 threadcontext context  irubyobject arg0
modifycheck
ruby runtime   context getruntime
if  value getrealsize      0  return runtime getnil
return chompbangcommon19 runtime  arg0
private irubyobject chompbangcommon19 ruby runtime  irubyobject rsobj
if  rsobj isnil    return rsobj
rubystring rs   rsobj converttostring
int p   value getbegin
int len   value getrealsize
int end   p   len
byte bytes   value getunsafebytes
int rslen   rs value getrealsize
if  rslen    0
while  len > 0    bytes     byte
len
if  len > 0    bytes     byte    len
if  len < value getrealsize
keepcoderange
view 0  len
return this
return runtime getnil
if  rslen > len  return runtime getnil
byte newline   rs value getunsafebytes
if  rslen    1    newline     byte    return smartchopbangcommon19 runtime
encoding enc   checkencoding rs
if  rs scanforcoderange      cr_broken  return runtime getnil
int pp   end   rslen
if  bytes    newline    rslen <  1    value endswith rs value
if  enc leftadjustcharhead bytes  p  pp  end     pp  return runtime getnil
if  getcoderange      cr_7bit  clearcoderange
view 0  value getrealsize     rslen
return this
return runtime getnil
private irubyobject smartchopbangcommon19 ruby runtime
final int p   value getbegin
int len   value getrealsize
int end   p   len
byte bytes   value getunsafebytes
encoding enc   value getencoding
keepcoderange
if  enc minlength   > 1
int pp   enc leftadjustcharhead bytes  p  end   enc minlength    end
if  enc isnewline bytes  pp  end   end   pp
pp   end   enc minlength
if  pp >  p
pp   enc leftadjustcharhead bytes  p  pp  end
if  stringsupport preciselength enc  bytes  pp  end  > 0
enc mbctocode bytes  pp  end        end   pp
if  end    p   value getrealsize
modifycheck
return runtime getnil
len   end   p
view 0  len
else
if  bytes     byte
len
if  len > 0    bytes     byte    len
view 0  len
else if  bytes     byte
len
view 0  len
else
modifycheck
return runtime getnil
return this
/** rb_str_lstrip / rb_str_lstrip_bang
*
*/
@jrubymethod name      compat   ruby1_8
public irubyobject lstrip threadcontext context
rubystring str   strdup context getruntime
str lstrip_bang context
return str
@jrubymethod name      compat   ruby1_8
public irubyobject lstrip_bang threadcontext context
ruby runtime   context getruntime
if  value getrealsize      0  return runtime getnil
return singlebytelstrip runtime  value getunsafebytes    value getbegin    value getbegin     value getrealsize
@jrubymethod name      compat   ruby1_9
public irubyobject lstrip19 threadcontext context
rubystring str   strdup context getruntime
str lstrip_bang19 context
return str
@jrubymethod name      compat   ruby1_9
public irubyobject lstrip_bang19 threadcontext context
modifycheck
ruby runtime   context getruntime
if  value getrealsize      0
return runtime getnil
encoding enc   value getencoding
int s   value getbegin
int end   s   value getrealsize
bytebytes   value getunsafebytes
final irubyobject result
if  singlebyteoptimizable enc
result   singlebytelstrip runtime  bytes  s  end
else
result   multibytelstrip runtime  enc  bytes  s  end
keepcoderange
return result
private irubyobject singlebytelstrip ruby runtime  bytebytes  int s  int end
int p   s
while  p < end    ascii isspace bytes   0xff   p
if  p > s
view p   s  end   p
return this
return runtime getnil
private irubyobject multibytelstrip ruby runtime  encoding enc  bytebytes  int s  int end
int p   s
while  p < end
int c   codepoint runtime  enc  bytes  p  end
if   ascii isspace c   break
p    codelength runtime  enc  c
if  p > s
view p   s  end   p
return this
return runtime getnil
/** rb_str_rstrip / rb_str_rstrip_bang
*
*/
@jrubymethod name      compat   ruby1_8
public irubyobject rstrip threadcontext context
rubystring str   strdup context getruntime
str rstrip_bang context
return str
@jrubymethod name      compat   ruby1_8
public irubyobject rstrip_bang threadcontext context
ruby runtime   context getruntime
if  value getrealsize      0  return runtime getnil
return singlebyterstrip runtime  value getunsafebytes    value getbegin    value getbegin     value getrealsize
@jrubymethod name      compat   ruby1_9
public irubyobject rstrip19 threadcontext context
rubystring str   strdup context getruntime
str rstrip_bang19 context
return str
@jrubymethod name      compat   ruby1_9
public irubyobject rstrip_bang19 threadcontext context
modifycheck
ruby runtime   context getruntime
if  value getrealsize      0
return runtime getnil
irubyobject result   singlebyteoptimizable value getencoding    ?
singlebyterstrip19 runtime    multibyterstrip19 runtime
keepcoderange
return result
// in 1.8 we will strip rightmost \0 followed by any \s
private irubyobject singlebyterstrip ruby runtime  bytebytes  int s  int end
int endp   end   1
while  endp >  s    bytes    0  endp
while  endp >  s    ascii isspace bytes   0xff   endp
if  endp < end   1
view 0  endp   s   1
return this
return runtime getnil
// in 1.9 we strip any combination of \0 and \s
private irubyobject singlebyterstrip19 ruby runtime
byte bytes   value getunsafebytes
int start   value getbegin
int end   start   value getrealsize
int endp   end   1
while  endp >  start     bytes    0
ascii isspace bytes   0xff    endp
if  endp < end   1
view 0  endp   start   1
return this
return runtime getnil
// in 1.9 we strip any combination of \0 and \s
private irubyobject multibyterstrip19 ruby runtime
byte bytes   value getunsafebytes
int start   value getbegin
int end   start   value getrealsize
encoding enc   value getencoding
int endp   end
int prev
while   prev   enc prevcharhead bytes  start  endp  end       1
int point   codepoint runtime  enc  bytes  prev  end
if  point    0     ascii isspace point   break
endp   prev
if  endp < end
view 0  endp   start
return this
return runtime getnil
/** rb_str_strip / rb_str_strip_bang
*
*/
@jrubymethod name      compat   ruby1_8
public irubyobject strip threadcontext context
rubystring str   strdup context getruntime
str strip_bang context
return str
@jrubymethod name      compat   ruby1_8
public irubyobject strip_bang threadcontext context
ruby runtime   context getruntime
if  value getrealsize      0  return runtime getnil
return singlebytestrip runtime  value getunsafebytes    value getbegin    value getbegin     value getrealsize
@jrubymethod name      compat   ruby1_9
public irubyobject strip19 threadcontext context
rubystring str   strdup context getruntime
str strip_bang19 context
return str
@jrubymethod name      compat   ruby1_9
public irubyobject strip_bang19 threadcontext context
modifycheck
irubyobject left   lstrip_bang19 context
irubyobject right   rstrip_bang19 context
return left isnil      right isnil   ? context getruntime   getnil     this
private irubyobject singlebytestrip ruby runtime  bytebytes  int s  int end
int p   s
while  p < end    ascii isspace bytes   0xff   p
int endp   end   1
while  endp >  p    bytes    0  endp
while  endp >  p    ascii isspace bytes   0xff   endp
if  p > s    endp < end   1
view p   s  endp   p   1
return this
return runtime getnil
/** rb_str_count
*
*/
@jrubymethod name      compat   ruby1_8
public irubyobject count threadcontext context
throw context getruntime   newargumenterror
@jrubymethod name      compat   ruby1_8
public irubyobject count threadcontext context  irubyobject arg
final booleantable   new boolean
arg converttostring   trsetuptable table  true
return countcommon context getruntime    table
@jrubymethod name      required   1  rest   true  compat   ruby1_8
public irubyobject count threadcontext context  irubyobject args
ruby runtime   context getruntime
if  value getrealsize      0  return rubyfixnum zero runtime
final booleantable   new boolean
args converttostring   trsetuptable table  true
for  int i   1  i<args length  i
args converttostring   trsetuptable table  false
return countcommon runtime  table
private irubyobject countcommon ruby runtime  booleantable
int i   0
bytebytes   value getunsafebytes
int p   value getbegin
int end   p   value getrealsize
while  p < end  if  table   0xff]  i
return runtime newfixnum i
@jrubymethod name      compat   ruby1_9
public irubyobject count19 threadcontext context
throw context getruntime   newargumenterror
@jrubymethod name      compat   ruby1_9
public irubyobject count19 threadcontext context  irubyobject arg
ruby runtime   context getruntime
if  value getrealsize      0  return rubyfixnum zero runtime
rubystring otherstr   arg converttostring
encoding enc   checkencoding otherstr
int c
if  otherstr value length      1    enc isasciicompatible
c   otherstr value unsafebytes     0xff   < 0x80    scanforcoderange      cr_broken
if  value length     0  return rubyfixnum zero runtime
bytebytes   value unsafebytes
int p   value getbegin
int end   p   value length
int n   0
while  p < end
if   bytes   0xff     c  n
return rubyfixnum newfixnum runtime  n
final booleantable   new boolean
trtables tables   otherstr trsetuptable context getruntime    table  null  true  enc
return countcommon19 runtime  table  tables  enc
@jrubymethod name      required   1  rest   true  compat   ruby1_9
public irubyobject count19 threadcontext context  irubyobject args
ruby runtime   context getruntime
if  value getrealsize      0  return rubyfixnum zero runtime
rubystring otherstr   args converttostring
encoding enc   checkencoding otherstr
final booleantable   new boolean
trtables tables   otherstr trsetuptable runtime  table  null  true  enc
for  int i   1  i<args length  i
otherstr   args converttostring
enc   checkencoding otherstr
tables   otherstr trsetuptable runtime  table  tables  false  enc
return countcommon19 runtime  table  tables  enc
private irubyobject countcommon19 ruby runtime  booleantable  trtables tables  encoding enc
int i   0
bytebytes   value getunsafebytes
int p   value getbegin
int end   p   value getrealsize
int c
while  p < end
if  enc isasciicompatible       c   bytes   0xff  < 0x80
if  table  i
p
else
c   codepoint runtime  enc  bytes  p  end
int cl   codelength runtime  enc  c
if  trfind c  table  tables   i
p    cl
return runtime newfixnum i
/** rb_str_delete / rb_str_delete_bang
*
*/
@jrubymethod name      compat   ruby1_8
public irubyobject delete threadcontext context
throw context getruntime   newargumenterror
@jrubymethod name      compat   ruby1_8
public irubyobject delete threadcontext context  irubyobject arg
rubystring str   strdup context getruntime
str delete_bang context  arg
return str
@jrubymethod name      required   1  rest   true  compat   ruby1_8
public irubyobject delete threadcontext context  irubyobject args
rubystring str   strdup context getruntime
str delete_bang context  args
return str
@jrubymethod name      compat   ruby1_8
public irubyobject delete_bang threadcontext context
throw context getruntime   newargumenterror
@jrubymethod name      compat   ruby1_8
public irubyobject delete_bang threadcontext context  irubyobject arg
ruby runtime   context getruntime
if  value getrealsize      0  return runtime getnil
final booleansqueeze   new boolean
arg converttostring   trsetuptable squeeze  true
return delete_bangcommon runtime  squeeze
@jrubymethod name      required   1  rest   true  compat   ruby1_8
public irubyobject delete_bang threadcontext context  irubyobject args
ruby runtime   context getruntime
if  value getrealsize      0  return runtime getnil
booleansqueeze   new boolean
args converttostring   trsetuptable squeeze  true
for  int i 1  i<args length  i
args converttostring   trsetuptable squeeze  false
return delete_bangcommon runtime  squeeze
private irubyobject delete_bangcommon ruby runtime  booleansqueeze
modify
int s   value getbegin
int t   s
int send   s   value getrealsize
bytebytes   value getunsafebytes
boolean modify   false
while  s < send
if  squeeze   0xff]
modify   true
else
bytes   bytes
s
value setrealsize t   value getbegin
return modify ? this   runtime getnil
@jrubymethod name      compat   ruby1_9
public irubyobject delete19 threadcontext context
throw context getruntime   newargumenterror
@jrubymethod name      compat   ruby1_9
public irubyobject delete19 threadcontext context  irubyobject arg
rubystring str   strdup context getruntime
str delete_bang19 context  arg
return str
@jrubymethod name      required   1  rest   true  compat   ruby1_9
public irubyobject delete19 threadcontext context  irubyobject args
rubystring str   strdup context getruntime
str delete_bang19 context  args
return str
@jrubymethod name      compat   ruby1_9
public irubyobject delete_bang19 threadcontext context
throw context getruntime   newargumenterror
@jrubymethod name      compat   ruby1_9
public irubyobject delete_bang19 threadcontext context  irubyobject arg
ruby runtime   context getruntime
if  value getrealsize      0  return runtime getnil
rubystring otherstr   arg converttostring
encoding enc   checkencoding otherstr
final booleansqueeze   new boolean
trtables tables   otherstr trsetuptable runtime  squeeze  null  true  enc
return delete_bangcommon19 runtime  squeeze  tables  enc
@jrubymethod name      required   1  rest   true  compat   ruby1_9
public irubyobject delete_bang19 threadcontext context  irubyobject args
ruby runtime   context getruntime
if  value getrealsize      0  return runtime getnil
rubystring otherstr   args converttostring
encoding enc   checkencoding otherstr
booleansqueeze   new boolean
trtables tables   otherstr trsetuptable runtime  squeeze  null  true  enc
for  int i 1  i<args length  i
otherstr   args converttostring
enc   checkencoding otherstr
tables   otherstr trsetuptable runtime  squeeze  tables  false  enc
return delete_bangcommon19 runtime  squeeze  tables  enc
private irubyobject delete_bangcommon19 ruby runtime  booleansqueeze  trtables tables  encoding enc
modifyandkeepcoderange
int s   value getbegin
int t   s
int send   s   value getrealsize
bytebytes   value getunsafebytes
boolean modify   false
boolean asciicompatible   enc isasciicompatible
int cr   asciicompatible ? cr_7bit   cr_valid
while  s < send
int c
if  asciicompatible    encoding isascii c   bytes   0xff
if  squeeze
modify   true
else
if  t    s  bytes    byte c
t
s
else
c   codepoint runtime  enc  bytes  s  send
int cl   codelength runtime  enc  c
if  trfind c  squeeze  tables
modify   true
else
if  t    s  enc codetombc c  bytes  t
t    cl
if  cr    cr_7bit  cr   cr_valid
s    cl
value setrealsize t   value getbegin
setcoderange cr
return modify ? this   runtime getnil
/** rb_str_squeeze / rb_str_squeeze_bang
*
*/
@jrubymethod name      compat   ruby1_8
public irubyobject squeeze threadcontext context
rubystring str   strdup context getruntime
str squeeze_bang context
return str
@jrubymethod name      compat   ruby1_8
public irubyobject squeeze threadcontext context  irubyobject arg
rubystring str   strdup context getruntime
str squeeze_bang context  arg
return str
@jrubymethod name      rest   true  compat   ruby1_8
public irubyobject squeeze threadcontext context  irubyobject args
rubystring str   strdup context getruntime
str squeeze_bang context  args
return str
@jrubymethod name      compat   ruby1_8
public irubyobject squeeze_bang threadcontext context
ruby runtime   context getruntime
if  value getrealsize      0
modifycheck
return runtime getnil
final boolean squeeze   new boolean
for  int i 0  i<trans_size  i    squeeze   true
modify
return squeezecommon runtime  squeeze
@jrubymethod name      compat   ruby1_8
public irubyobject squeeze_bang threadcontext context  irubyobject arg
ruby runtime   context getruntime
if  value getrealsize      0
modifycheck
return runtime getnil
final boolean squeeze   new boolean
arg converttostring   trsetuptable squeeze  true
modify
return squeezecommon runtime  squeeze
@jrubymethod name      rest   true  compat   ruby1_8
public irubyobject squeeze_bang threadcontext context  irubyobject args
if  args length    0  return squeeze_bang context
ruby runtime   context getruntime
if  value getrealsize      0
modifycheck
return runtime getnil
final boolean squeeze   new boolean
args converttostring   trsetuptable squeeze  true
for  int i 1  i<args length  i
args converttostring   trsetuptable squeeze  false
modify
return squeezecommon runtime  squeeze
private irubyobject squeezecommon ruby runtime  boolean squeeze
int s   value getbegin
int t   s
int send   s   value getrealsize
bytebytes   value getunsafebytes
int save    1
while  s < send
int c   bytes   0xff
if  c    save     squeeze  bytes    byte  save   c
if  t   value getbegin      value getrealsize         modified
value setrealsize t   value getbegin
return this
return runtime getnil
@jrubymethod name      compat   ruby1_9
public irubyobject squeeze19 threadcontext context
rubystring str   strdup context getruntime
str squeeze_bang19 context
return str
@jrubymethod name      compat   ruby1_9
public irubyobject squeeze19 threadcontext context  irubyobject arg
rubystring str   strdup context getruntime
str squeeze_bang19 context  arg
return str
@jrubymethod name      rest   true  compat   ruby1_9
public irubyobject squeeze19 threadcontext context  irubyobject args
rubystring str   strdup context getruntime
str squeeze_bang19 context  args
return str
@jrubymethod name      compat   ruby1_9
public irubyobject squeeze_bang19 threadcontext context
ruby runtime   context getruntime
if  value getrealsize      0
modifycheck
return runtime getnil
final boolean squeeze   new boolean
for  int i 0  i<trans_size  i    squeeze   true
modifyandkeepcoderange
if  singlebyteoptimizable
return squeezecommon runtime  squeeze      1 8
else
return squeezecommon19 runtime  squeeze  null  value getencoding    false
@jrubymethod name      compat   ruby1_9
public irubyobject squeeze_bang19 threadcontext context  irubyobject arg
ruby runtime   context getruntime
if  value getrealsize      0
modifycheck
return runtime getnil
rubystring otherstr   arg converttostring
final boolean squeeze   new boolean
trtables tables   otherstr trsetuptable runtime  squeeze  null  true  checkencoding otherstr
modifyandkeepcoderange
if  singlebyteoptimizable      otherstr singlebyteoptimizable
return squeezecommon runtime  squeeze      1 8
else
return squeezecommon19 runtime  squeeze  tables  value getencoding    true
@jrubymethod name      rest   true  compat   ruby1_9
public irubyobject squeeze_bang19 threadcontext context  irubyobject args
ruby runtime   context getruntime
if  value getrealsize      0
modifycheck
return runtime getnil
rubystring otherstr   args converttostring
encoding enc   checkencoding otherstr
final boolean squeeze   new boolean
trtables tables   otherstr trsetuptable runtime  squeeze  null  true  enc
boolean singlebyte   singlebyteoptimizable      otherstr singlebyteoptimizable
for  int i 1  i<args length  i
otherstr   args converttostring
enc   checkencoding otherstr
singlebyte   singlebyte    otherstr singlebyteoptimizable
tables   otherstr trsetuptable runtime  squeeze  tables  false  enc
modifyandkeepcoderange
if  singlebyte
return squeezecommon runtime  squeeze      1 8
else
return squeezecommon19 runtime  squeeze  tables  enc  true
private irubyobject squeezecommon19 ruby runtime  boolean squeeze  trtables tables  encoding enc  boolean isarg
int s   value getbegin
int t   s
int send   s   value getrealsize
bytebytes   value getunsafebytes
int save    1
int c
while  s < send
if  enc isasciicompatible       c   bytes   0xff  < 0x80
if  c    save     isarg     squeeze   bytes    byte  save   c
s
else
c   codepoint runtime  enc  bytes  s  send
int cl   codelength runtime  enc  c
if  c    save     isarg     trfind c  squeeze  tables
if  t    s  enc codetombc c  bytes  t
save   c
t    cl
s    cl
if  t   value getbegin      value getrealsize         modified
value setrealsize t   value getbegin
return this
return runtime getnil
/** rb_str_tr / rb_str_tr_bang
*
*/
@jrubymethod name      compat   ruby1_8
public irubyobject tr threadcontext context  irubyobject src  irubyobject repl
rubystring str   strdup context getruntime
str trtrans context  src  repl  false
return str
@jrubymethod name      compat   ruby1_8
public irubyobject tr_bang threadcontext context  irubyobject src  irubyobject repl
return trtrans context  src  repl  false
@jrubymethod name      compat   ruby1_9
public irubyobject tr19 threadcontext context  irubyobject src  irubyobject repl
rubystring str   strdup context getruntime
str trtrans19 context  src  repl  false
return str
@jrubymethod name
public irubyobject tr_bang19 threadcontext context  irubyobject src  irubyobject repl
return trtrans19 context  src  repl  false
private static final class tr
tr bytelist bytes
p   bytes getbegin
pend   bytes getrealsize     p
buf   bytes getunsafebytes
now   max   0
gen   false
int p  pend  now  max
boolean gen
bytebuf
private static final int trans_size   256
/** tr_setup_table
*
*/
private void trsetuptable booleantable  boolean init
final tr tr   new tr value
boolean cflag   false
if  value getrealsize   > 1    value getunsafebytes
cflag   true
tr p
if  init  for  int i 0  i<trans_size  i    table   true
final booleanbuf   new boolean
for  int i 0  i<trans_size  i    buf   cflag
int c
while   c   trnext tr   >  0  buf    cflag
for  int i 0  i<trans_size  i    table   table    buf
private static final class trtables
private inthash<irubyobject> del  nodel
private trtables trsetuptable ruby runtime  booleantable  trtables tables  boolean init  encoding enc
final tr tr   new tr value
boolean cflag   false
if  value getrealsize   > 1
if  enc isasciicompatible
if   value getunsafebytes     0xff
cflag   true
tr p
else
int l   stringsupport preciselength enc  tr buf  tr p  tr pend
if  enc mbctocode tr buf  tr p  tr pend
cflag   true
tr p    l
if  init
for  int i 0  i<trans_size  i    table   true
table   cflag
else if  table     cflag
table   false
final booleanbuf   new boolean
for  int i 0  i<trans_size  i    buf   cflag
int c
inthash<irubyobject> hash   null  phash   null
while   c   trnext tr  runtime  enc   >  0
if  c < trans_size
buf    cflag
else
if  hash    null
hash   new inthash<irubyobject>
if  tables    null  tables   new trtables
if  cflag
phash   tables nodel
tables nodel   hash
else
phash    tables del
tables del   hash
if  phash    null    phash get c     null  hash put c  never
for  int i 0  i<trans_size  i    table   table    buf
return tables
private boolean trfind int c  booleantable  trtables tables
if  c < trans_size
return table
else
if  tables    null
if  tables del    null
if  tables nodel    null    tables nodel get c     null  return true
else if  tables nodel    null    tables nodel get c     null  return false
return table
/** tr_trans
*
*/
private irubyobject trtrans threadcontext context  irubyobject src  irubyobject repl  boolean sflag
ruby runtime   context getruntime
if  value getrealsize      0  return runtime getnil
bytelist repllist   repl converttostring   value
if  repllist getrealsize      0  return delete_bang context  src
bytelist srclist   src converttostring   value
final tr trsrc   new tr srclist
boolean cflag   false
if  srclist getrealsize   >  2    srclist getunsafebytes
cflag   true
trsrc p
int c
final inttrans   new int
final tr trrepl   new tr repllist
if  cflag
for  int i 0  i<trans_size  i    trans   1
while   c   trnext trsrc   >  0  trans    1
while   c   trnext trrepl   >  0
for  int i 0  i<trans_size  i
if  trans >  0  trans   trrepl now
else
for  int i 0  i<trans_size  i    trans    1
while   c   trnext trsrc   >  0
int r   trnext trrepl
if  r     1  r   trrepl now
trans   r
modify
int s   value getbegin
int send   s   value getrealsize
byte sbytes   value getunsafebytes
boolean modify   false
if  sflag
int t   s
int last    1
while  s < send
int c0   sbytes
if   c   trans  >  0
if  last    c  continue
last   c
sbytes    byte  c   0xff
modify   true
else
last    1
sbytes    byte c0
if  value getrealsize   >  t   value getbegin
value setrealsize t   value getbegin
modify   true
else
while  s < send
if   c   trans   0xff]  >  0
sbytes    byte  c   0xff
modify   true
s
return modify ? this   runtime getnil
private irubyobject trtrans19 threadcontext context  irubyobject src  irubyobject repl  boolean sflag
ruby runtime   context getruntime
if  value getrealsize      0  return runtime getnil
rubystring replstr   repl converttostring
bytelist repllist   replstr value
if  repllist getrealsize      0  return delete_bang19 context  src
rubystring srcstr   src converttostring
bytelist srclist   srcstr value
encoding e1   checkencoding srcstr
encoding e2   checkencoding replstr
encoding enc   e1    e2 ? e1   srcstr checkencoding replstr
int cr   getcoderange
final tr trsrc   new tr srclist
boolean cflag   false
if  value getrealsize   > 1
if  enc isasciicompatible
if  trsrc buf length > 0     trsrc buf   0xff          trsrc p   1 < trsrc pend
cflag   true
trsrc p
else
int cl   stringsupport preciselength enc  trsrc buf  trsrc p  trsrc pend
if  enc mbctocode trsrc buf  trsrc p  trsrc pend          trsrc p   cl < trsrc pend
cflag   true
trsrc p    cl
boolean singlebyte   singlebyteoptimizable
int c
final inttrans   new int
inthash<integer> hash   null
final tr trrepl   new tr repllist
int last   0
if  cflag
for  int i 0  i<trans_size  i    trans   1
while   c   trnext trsrc  runtime  enc   >  0
if  c < trans_size
trans    1
else
if  hash    null  hash   new inthash<integer>
hash put c  1      qtrue
while   c   trnext trrepl  runtime  enc   >  0         retrieve last replacer
last   trrepl now
for  int i 0  i<trans_size  i
if  trans >  0  trans   last
else
for  int i 0  i<trans_size  i    trans    1
while   c   trnext trsrc  runtime  enc   >  0
int r   trnext trrepl  runtime  enc
if  r     1  r   trrepl now
if  c < trans_size
trans   r
if  codelength runtime  enc  r     1  singlebyte   false
else
if  hash    null  hash   new inthash<integer>
hash put c  r
if  cr    cr_valid  cr   cr_7bit
modifyandkeepcoderange
int s   value getbegin
int send   s   value getrealsize
byte sbytes   value getunsafebytes
int max   value getrealsize
boolean modify   false
int clen  tlen  c0
if  sflag
int save    1
bytebuf   new byte
int t   0
while  s < send
boolean maymodify   false
c0   c   codepoint runtime  e1  sbytes  s  send
clen   codelength runtime  e1  c
tlen   enc    e1 ? clen   codelength runtime  enc  c
s    clen
c   trcode c  trans  hash  cflag  last  false
if  c     1
if  save    c
if  cr    cr_7bit     encoding isascii c   cr   cr_valid
continue
save   c
tlen   codelength runtime  enc  c
modify   true
else
save    1
c   c0
if  enc    e1  maymodify   true
while  t   tlen >  max
max <<  1
bytetbuf   new byte
system arraycopy buf  0  tbuf  0  buf length
buf   tbuf
enc codetombc c  buf  t
if  maymodify     tlen    1 ? sbytes    buf   bytelist memcmp sbytes  s  buf  t  tlen     0   modify   true
if  cr    cr_7bit     encoding isascii c   cr   cr_valid
t    tlen
value setunsafebytes buf
value setrealsize t
else if  enc issinglebyte       singlebyte    hash    null
while  s < send
c   sbytes   0xff
if  trans     1
if   cflag
c   trans
sbytes    byte c
else
sbytes    byte last
modify   true
if  cr    cr_7bit     encoding isascii c   cr   cr_valid
s
else
max    max >> 1
bytebuf   new byte
int t   0
while  s < send
boolean maymodify   false
c0   c   codepoint runtime  e1  sbytes  s  send
clen   codelength runtime  e1  c
tlen   enc    e1 ? clen   codelength runtime  enc  c
c   trcode c  trans  hash  cflag  last  true
if  c     1
tlen   codelength runtime  enc  c
modify   true
else
c   c0
if  enc    e1  maymodify   true
while  t   tlen >  max
max <<  1
bytetbuf   new byte
system arraycopy buf  0  tbuf  0  buf length
buf   tbuf
enc codetombc c  buf  t
if  maymodify     tlen    1 ? sbytes    buf   bytelist memcmp sbytes  s  buf  t  tlen     0   modify   true
if  cr    cr_7bit     encoding isascii c   cr   cr_valid
s    clen
t    tlen
value setunsafebytes buf
value setrealsize t
if  modify
if  cr    cr_broken  setcoderange cr
associateencoding enc
return this
return runtime getnil
private int trcode int c  inttrans  inthash<integer> hash  boolean cflag  int last  boolean set
if  c < trans_size
return trans
else if  hash    null
integer tmp   hash get c
if  tmp    null
return cflag ? last    1
else
return cflag ?  1   tmp
else
return cflag    set ? last    1
/** trnext
*
*/
private int trnext tr t
bytebuf   t buf
for
if   t gen
if  t p    t pend  return  1
if  t p < t pend  1    buf       t p
t now   buf   0xff
if  t p < t pend   1    buf
t p
if  t p < t pend
if  t now >  buf   0xff
t p
continue
t gen   true
t max   buf   0xff
return t now
else if    t now < t max
return t now
else
t gen   false
return t max
private int trnext tr t  ruby runtime  encoding enc
bytebuf   t buf
for
if   t gen
if  t p    t pend  return  1
if  t p < t pend  1    buf       t p
t now   codepoint runtime  enc  buf  t p  t pend
t p    codelength runtime  enc  t now
if  t p < t pend   1    buf
t p
if  t p < t pend
int c   codepoint runtime  enc  buf  t p  t pend
t p    codelength runtime  enc  c
if  t now > c
if  t now < 0x80    c < 0x80
throw runtime newargumenterror  "
char  t now        char  c     in string transliteration"
throw runtime newargumenterror
t gen   true
t max   c
return t now
else if    t now < t max
return t now
else
t gen   false
return t max
/** rb_str_tr_s / rb_str_tr_s_bang
*
*/
@jrubymethod name     compat   ruby1_8
public irubyobject tr_s threadcontext context  irubyobject src  irubyobject repl
rubystring str   strdup context getruntime
str trtrans context  src  repl  true
return str
@jrubymethod name      compat   ruby1_8
public irubyobject tr_s_bang threadcontext context  irubyobject src  irubyobject repl
return trtrans context  src  repl  true
@jrubymethod name     compat   ruby1_9
public irubyobject tr_s19 threadcontext context  irubyobject src  irubyobject repl
rubystring str   strdup context getruntime
str trtrans19 context  src  repl  true
return str
@jrubymethod name      compat   ruby1_9
public irubyobject tr_s_bang19 threadcontext context  irubyobject src  irubyobject repl
return trtrans19 context  src  repl  true
/** rb_str_each_line
*
*/
public irubyobject each_line threadcontext context  block block
return each_linecommon context  context getruntime   getglobalvariables   get     block
public irubyobject each_line threadcontext context  irubyobject arg  block block
return each_linecommon context  arg  block
public irubyobject each_linecommon threadcontext context  irubyobject sep  block block
ruby runtime   context getruntime
if  sep isnil
block yield context  this
return this
rubystring sepstr   sep converttostring
bytelist sepvalue   sepstr value
int rslen   sepvalue getrealsize
final byte newline
if  rslen    0
newline
else
newline   sepvalue getunsafebytes
int p   value getbegin
int end   p   value getrealsize
int ptr   p  s   p
int len   value getrealsize
byte bytes   value getunsafebytes
p    rslen
for    p < end  p
if  rslen    0    bytes
if    p    end    bytes       continue
while p < end    bytes       p
if  ptr < p    bytes    newline
rslen <  1
bytelist memcmp sepvalue getunsafebytes    sepvalue getbegin    rslen  bytes  p   rslen  rslen     0
block yield context  makeshared runtime  s   ptr  p   s  infectby this
modifycheck bytes  len
s   p
if  s    end
if  p > end  p   end
block yield context  makeshared runtime  s   ptr  p   s  infectby this
return this
@jrubymethod name      compat   ruby1_8
public irubyobject each18 threadcontext context  block block
return block isgiven   ? each_line context  block
enumeratorize context getruntime    this
@jrubymethod name      compat   ruby1_8
public irubyobject each18 threadcontext context  irubyobject arg  block block
return block isgiven   ? each_linecommon context  arg  block
enumeratorize context getruntime    this     arg
@jrubymethod name      compat   ruby1_8
public irubyobject each_line18 threadcontext context  block block
return block isgiven   ? each_line context  block
enumeratorize context getruntime    this
@jrubymethod name      compat   ruby1_8
public irubyobject each_line18 threadcontext context  irubyobject arg  block block
return block isgiven   ? each_linecommon context  arg  block
enumeratorize context getruntime    this     arg
@jrubymethod name      compat   ruby1_8
public irubyobject lines18 threadcontext context  block block
return block isgiven   ? each_line context  block
enumeratorize context getruntime    this
@jrubymethod name      compat   ruby1_8
public irubyobject lines18 threadcontext context  irubyobject arg  block block
return block isgiven   ? each_linecommon context  arg  block
enumeratorize context getruntime    this     arg
@jrubymethod name      compat   ruby1_9
public irubyobject each_line19 threadcontext context  block block
return block isgiven   ? each_linecommon19 context  block
enumeratorize context getruntime    this
@jrubymethod name      compat   ruby1_9
public irubyobject each_line19 threadcontext context  irubyobject arg  block block
return block isgiven   ? each_linecommon19 context  arg  block
enumeratorize context getruntime    this     arg
@jrubymethod compat   ruby1_9
public irubyobject lines threadcontext context  block block
return block isgiven   ? each_linecommon19 context  block
enumeratorize context getruntime    this
@jrubymethod compat   ruby1_9
public irubyobject lines threadcontext context  irubyobject arg  block block
return block isgiven   ? each_linecommon19 context  arg  block
enumeratorize context getruntime    this     arg
private irubyobject each_linecommon19 threadcontext context  block block
return each_linecommon19 context  context getruntime   getglobalvariables   get     block
private irubyobject each_linecommon19 threadcontext context  irubyobject sep  block block
ruby runtime   context getruntime
if  sep isnil
block yield context  this
return this
if    sep respondsto
throw runtime newtypeerror     sep getmetaclass
bytelist val   value shallowdup
int p   val getbegin
int s   p
int offset   p
int len   val getrealsize
int end   p   len
bytebytes   val getunsafebytes
final encoding enc
rubystring sepstr   sep converttostring
if  sepstr    runtime getglobalvariables   getdefaultseparator
enc   val getencoding
while  p < end
if  bytes     byte
int p0   enc leftadjustcharhead bytes  s  p  end
if  enc isnewline bytes  p0  end
p   p0   stringsupport length enc  bytes  p0  end
block yield context  makeshared19 runtime  val  s   offset  p   s  infectby this
s   p
continue
p
else
enc   checkencoding sepstr
bytelist sepvalue   sepstr value
final int newline
int rslen   sepvalue getrealsize
if  rslen    0
newline
else
newline   codepoint runtime  enc  sepvalue getunsafebytes    sepvalue getbegin    sepvalue getbegin     sepvalue getrealsize
while  p < end
int c   codepoint runtime  enc  bytes  p  end
again  do
int n   codelength runtime  enc  c
if  rslen    0    c    newline
p    n
if  p < end     c   codepoint runtime  enc  bytes  p  end      newline  continue again
while  p < end    codepoint runtime  enc  bytes  p  end     newline  p    n
p    n
if  c    newline     rslen <  1
bytelist memcmp sepvalue getunsafebytes    sepvalue getbegin    rslen  bytes  p  rslen     0
block yield context  makeshared19 runtime  val  s   offset  p   s    rslen    0 ? rslen   n   infectby this
s   p    rslen    0 ? rslen   n
p    n
while  false
if  s    end
block yield context  makeshared19 runtime  val  s offset  end   s  infectby this
return this
/**
* rb_str_each_byte
*/
public rubystring each_byte threadcontext context  block block
ruby runtime   context getruntime
// check the length every iteration, since
// the block can modify this string.
for  int i   0  i < value length    i
block yield context  runtime newfixnum value get i    0xff
return this
@jrubymethod name
public irubyobject each_byte19 threadcontext context  block block
return block isgiven   ? each_byte context  block    enumeratorize context getruntime    this
@jrubymethod
public irubyobject bytes threadcontext context  block block
return block isgiven   ? each_byte context  block    enumeratorize context getruntime    this
/** rb_str_each_char
*
*/
@jrubymethod name      compat   ruby1_8
public irubyobject each_char18 threadcontext context  block block
return block isgiven   ? each_charcommon18 context  block    enumeratorize context getruntime    this
@jrubymethod name      compat   ruby1_8
public irubyobject chars18 threadcontext context  block block
return block isgiven   ? each_charcommon18 context  block    enumeratorize context getruntime    this
private irubyobject each_charcommon18 threadcontext context  block block
byte bytes   value getunsafebytes
int p   value getbegin
int end   p   value getrealsize
ruby runtime   context getruntime
encoding enc   runtime getkcode   getencoding
bytelist val   value shallowdup
while  p < end
int n   stringsupport length enc  bytes  p  end
block yield context  makeshared19 runtime  val  p val getbegin    n
p    n
return this
@jrubymethod name      compat   ruby1_9
public irubyobject each_char19 threadcontext context  block block
return block isgiven   ? each_charcommon19 context  block    enumeratorize context getruntime    this
@jrubymethod name      compat   ruby1_9
public irubyobject chars19 threadcontext context  block block
return block isgiven   ? each_charcommon19 context  block    enumeratorize context getruntime    this
private irubyobject each_charcommon19 threadcontext context  block block
byte bytes   value getunsafebytes
int p   value getbegin
int end   p   value getrealsize
encoding enc   value getencoding
ruby runtime   context getruntime
bytelist val   value shallowdup
while  p < end
int n   stringsupport length enc  bytes  p  end
block yield context  makeshared19 runtime  val  p value getbegin    n
p    n
return this
/** rb_str_each_codepoint
*
*/
@jrubymethod compat   ruby1_9
public irubyobject each_codepoint threadcontext context  block block
if   block isgiven    return enumeratorize context getruntime    this
return singlebyteoptimizable   ? each_byte context  block    each_codepointcommon context  block
@jrubymethod compat   ruby1_9
public irubyobject codepoints threadcontext context  block block
if   block isgiven    return enumeratorize context getruntime    this
return singlebyteoptimizable   ? each_byte context  block    each_codepointcommon context  block
private irubyobject each_codepointcommon threadcontext context  block block
ruby runtime   context getruntime
byte bytes   value getunsafebytes
int p   value getbegin
int end   p   value getrealsize
encoding enc   value getencoding
while  p < end
int c   codepoint runtime  enc  bytes  p  end
int n   codelength runtime  enc  c
block yield context  runtime newfixnum c
p    n
return this
/** rb_str_intern
*
*/
private rubysymbol to_sym
rubysymbol symbol   getruntime   getsymboltable   getsymbol value
if  symbol getbytes      value  sharelevel   share_level_bytelist
return symbol
@jrubymethod name           compat   ruby1_8
public rubysymbol intern
if  value getrealsize      0  throw getruntime   newargumenterror
for  int i   0  i < value getrealsize    i
if  value getunsafebytes      0  throw getruntime   newargumenterror
return to_sym
@jrubymethod name           compat   ruby1_9
public rubysymbol intern19
return to_sym
@jrubymethod name      compat   ruby1_9
public irubyobject ord threadcontext context
ruby runtime   context getruntime
return rubyfixnum newfixnum runtime  codepoint runtime  value getencoding    value getunsafebytes    value getbegin
value getbegin     value getrealsize
@jrubymethod name
public irubyobject sum threadcontext context
return sumcommon context  16
@jrubymethod name
public irubyobject sum threadcontext context  irubyobject arg
return sumcommon context  rubynumeric num2long arg
public irubyobject sumcommon threadcontext context  long bits
ruby runtime   context getruntime
bytebytes   value getunsafebytes
int p   value getbegin
int len   value getrealsize
int end   p   len
if  bits >  8   8       long size   bits in byte
irubyobject one   rubyfixnum one runtime
irubyobject sum   rubyfixnum zero runtime
while  p < end
modifycheck bytes  len
sum   sum callmethod context     rubyfixnum newfixnum runtime  bytes   0xff
if  bits    0
irubyobject mod   one callmethod context     rubyfixnum newfixnum runtime  bits
sum   sum callmethod context     mod callmethod context     one
return sum
else
long sum   0
while  p < end
modifycheck bytes  len
sum    bytes   0xff
return rubyfixnum newfixnum runtime  bits    0 ? sum   sum    1l << bits    1l
/** string_to_c
*
*/
@jrubymethod name      reads   backref  writes   backref  compat   ruby1_9
public irubyobject to_c threadcontext context
ruby runtime   context getruntime
dynamicscope scope   context getcurrentscope
irubyobject backref   scope getbackref runtime
if  backref instanceof rubymatchdata    rubymatchdata backref  use
irubyobject s   runtimehelpers invoke
context  this
rubyregexp newdummyregexp runtime  numeric complexpatterns underscores_pat
runtime newstring new bytelist new byte
rubyarray a   rubycomplex str_to_c_internal context  s
scope setbackref backref
if   a eltinternal 0  isnil
return a eltinternal 0
else
return rubycomplex newcomplexcanonicalize context  rubyfixnum zero runtime
/** string_to_r
*
*/
@jrubymethod name      reads   backref  writes   backref  compat   ruby1_9
public irubyobject to_r threadcontext context
ruby runtime   context getruntime
dynamicscope scope   context getcurrentscope
irubyobject backref   scope getbackref runtime
if  backref instanceof rubymatchdata    rubymatchdata backref  use
irubyobject s   runtimehelpers invoke
context  this
rubyregexp newdummyregexp runtime  numeric complexpatterns underscores_pat
runtime newstring new bytelist new byte
rubyarray a   rubyrational str_to_r_internal context  s
scope setbackref backref
if   a eltinternal 0  isnil
return a eltinternal 0
else
return rubyrational newrationalcanonicalize context  rubyfixnum zero runtime
public static rubystring unmarshalfrom unmarshalstream input  throws java io ioexception
rubystring result   newstring input getruntime    input unmarshalstring
input registerlinktarget result
return result
/**
* @see org.jruby.util.pack#unpack
*/
@jrubymethod name
public rubyarray unpack irubyobject obj
return pack unpack getruntime    this value  stringvalue obj  value
public void empty
value   bytelist empty_bytelist
sharelevel   share_level_bytelist
@jrubymethod name      compat   ruby1_9
public irubyobject encoding threadcontext context
return context getruntime   getencodingservice   getencoding value getencoding
@jrubymethod name      compat   ruby1_9
public irubyobject encode_bang threadcontext context
modify19
ruby runtime   context getruntime
encoding defaultinternal   runtime getdefaultinternalencoding
if  defaultinternal    null  return dup
value   transcode context  value  null  defaultinternal  runtime getnil
return this
@jrubymethod name      compat   ruby1_9
public irubyobject encode_bang threadcontext context  irubyobject enc
ruby runtime   context getruntime
modify19
value   transcode context  value  null  getencoding runtime  enc   runtime getnil
return this
@jrubymethod name      compat   ruby1_9
public irubyobject encode_bang threadcontext context  irubyobject toencoding  irubyobject arg
ruby runtime   context getruntime
modify19
encoding forceencoding
irubyobject options
if  arg instanceof rubyhash
forceencoding   null
options   arg
else
forceencoding   getencoding runtime  arg
options   runtime getnil
value   transcode context  value  forceencoding  getencoding runtime  toencoding   options
return this
@jrubymethod name      compat   ruby1_9
public irubyobject encode_bang threadcontext context  irubyobject toencoding  irubyobject forceencoding  irubyobject opts
ruby runtime   context getruntime
modify19
value   transcode context  value  getencoding runtime  forceencoding
getencoding runtime  toencoding   opts
return this
@jrubymethod name      compat   ruby1_9
public irubyobject encode threadcontext context
ruby runtime   context getruntime
encoding defaultinternal   runtime getdefaultinternalencoding
if  defaultinternal    null  return dup
return runtime newstring transcode context  value  null  defaultinternal  runtime getnil
@jrubymethod name      compat   ruby1_9
public irubyobject encode threadcontext context  irubyobject arg
ruby runtime   context getruntime
encoding forceencoding
irubyobject options
if  arg instanceof rubyhash
forceencoding   runtime getdefaultinternalencoding
if  forceencoding    null  forceencoding   runtime getencodingservice   getlocaleencoding
if  forceencoding    null  return dup
options   arg
else
forceencoding   getencoding runtime  arg
options   runtime getnil
return runtime newstring transcode context  value  null  forceencoding  options
@jrubymethod name      compat   ruby1_9
public irubyobject encode threadcontext context  irubyobject toencoding  irubyobject arg
ruby runtime   context getruntime
encoding forceencoding
irubyobject options
if  arg instanceof rubyhash
forceencoding   null
options   arg
else
forceencoding   getencoding runtime  arg
options   runtime getnil
return runtime newstring transcode context  value  forceencoding
getencoding runtime  toencoding   options
@jrubymethod name      compat   ruby1_9
public irubyobject encode threadcontext context  irubyobject toencoding
irubyobject forcedencoding  irubyobject opts
ruby runtime   context getruntime
return runtime newstring transcode context  value  getencoding runtime  forcedencoding
getencoding runtime  toencoding   opts
// java seems to find these specific java charsets but they seem to trancode
// some strings a little differently than mri.  since java charset transcoding
// is a temporary implementation for us, having this gruesome hack is ok
// for the time being.
private static set<string> bad_transcodings_hack   new hashset<string>
add
add
add
private static charset transcodecharsetfor ruby runtime  encoding encoding  string fromname  string toname
charset from   null
string realencodingname   new string encoding getname
// doing a manual forname over and over sucks, but this is only meant
// to be a transitional impl.  the reason for this extra mechanism is
// that jcodings is representing these encodings with an alias.  so,
// for example, ibm866 ends up being associated with iso-8859-1 which
// will not know how to trancsode higher than ascii values properly.
if   realencodingname equals encoding getcharsetname        bad_transcodings_hack contains realencodingname
try
from   charset forname realencodingname
if  from    null
return from
catch  exception e
try
from   encoding getcharset
if  from    null  return from
catch  exception e
try      we try looking up based on java's supported charsets   likely missing charset entry in jcodings
from   charset forname encoding tostring
catch  exception e
if  from    null  throw runtime newconverternotfounderror
fromname       toname
return from
/*
* this will try and transcode the supplied bytelist to the supplied toencoding.  it will use
* forceencoding as its encoding if it is supplied; otherwise it will use the encoding it has
* tucked away in the bytelist.  this will return a new copy of a bytelist in the request
* encoding or die trying (converternotfound).
*
* c: rb_str_conv_enc_opts
*/
public static bytelist transcode threadcontext context  bytelist value  encoding forceencoding
encoding toencoding  irubyobject opts
if  toencoding    null  return value
ruby runtime   context getruntime
encoding fromencoding   forceencoding    null ? forceencoding   value getencoding
string fromname   fromencoding tostring
string toname   toencoding tostring
charset from   transcodecharsetfor runtime  fromencoding  fromencoding tostring    toencoding tostring
charset to   transcodecharsetfor runtime  toencoding  fromencoding tostring    toencoding tostring
charsetencoder encoder   getcharsetencoder context  to  opts
charsetdecoder decoder   getcharsetdecoder context  from  opts
bytebuffer frombytes   bytebuffer wrap value getunsafebytes    value begin    value length
// mri does not allow ascii-8bit chars > 127 to transcode to multibyte encodings
if  fromname equals       encoder maxbytesperchar   > 1 0
for  byte b   frombytes array
if   b   0xff  > 0x7f
throw runtime newundefinedconversionerror
x"   integer tohexstring b   0xff  touppercase
from "   fromname
toname
try
bytebuffer tobytes   encoder encode decoder decode frombytes
// charsetencoder#encode guarantees a newly-allocated buffer, so no need to copy.
return new bytelist tobytes array    tobytes arrayoffset
tobytes limit     tobytes arrayoffset    toencoding  false
catch  charactercodingexception e
throw runtime newundefinedconversionerror e getlocalizedmessage
private static charsetdecoder getcharsetdecoder threadcontext context  charset charset  irubyobject opts
charsetdecoder decoder   charset newdecoder
codingerroractions actions   getcodingerroractions context  opts
decoder onunmappablecharacter actions onunmappablecharacter
decoder onmalformedinput actions onmalformedinput
if  actions replacewith    null
decoder replacewith actions replacewith tostring
return decoder
private static charsetencoder getcharsetencoder threadcontext context  charset charset  irubyobject opts
charsetencoder encoder   charset newencoder
codingerroractions actions   getcodingerroractions context  opts
encoder onunmappablecharacter actions onunmappablecharacter
encoder onmalformedinput actions onmalformedinput
if  actions replacewith    null
encoder replacewith actions replacewith getbytes
return encoder
private static class codingerroractions
final codingerroraction onunmappablecharacter
final codingerroraction onmalformedinput
final rubystring replacewith
codingerroractions
codingerroraction onunmappablecharacter
codingerroraction onmalformedinput
rubystring replacewith
this onunmappablecharacter   onunmappablecharacter
this onmalformedinput   onmalformedinput
this replacewith   replacewith
private static codingerroractions getcodingerroractions threadcontext context  irubyobject opts
if  opts isnil
return new codingerroractions
codingerroraction report
codingerroraction report

else
ruby runtime   context runtime
rubyhash hash    rubyhash  opts
codingerroraction onmalformedinput   codingerroraction report
codingerroraction onunmappablecharacter   codingerroraction report
rubystring replacewith   null
irubyobject replace   hash fastaref runtime newsymbol
if  replace    null     replace isnil
rubystring replacewithstr   replace converttostring
if  replacewithstr size      1       we can only replacewith a single char
replacewith   replacewithstr
irubyobject invalid   hash fastaref runtime newsymbol
if  invalid    null    invalid op_equal context  runtime newsymbol     istrue
onmalformedinput   codingerroraction replace
irubyobject undef   hash fastaref runtime newsymbol
if  undef    null    undef op_equal context  runtime newsymbol     istrue
onunmappablecharacter   codingerroraction replace
return new codingerroractions
onunmappablecharacter
onmalformedinput
replacewith
/*
missing options from mri 1.9.3 source:
*  :replace ::
*    sets the replacement string to the given value. the default replacement
*    string is "\ufffd" for unicode encoding forms, and "?" otherwise.
*  :fallback ::
*    sets the replacement string by the given object for undefined
*    character.  the object should be a hash, a proc, a method, or an
*    object which has [] method.
*    its key is an undefined character encoded in the source encoding
*    of current transcoder. its value can be any encoding until it
*    can be converted into the destination encoding of the transcoder.
*  :xml ::
*    the value must be +:text+ or +:attr+.
*    if the value is +:text+ #encode replaces undefined characters with their
*    (upper-case hexadecimal) numeric character references. '&', '<', and '>'
*    are converted to "&amp;", "&lt;", and "&gt;", respectively.
*    if the value is +:attr+, #encode also quotes the replacement result
*    (using '"'), and replaces '"' with "&quot;".
*  :cr_newline ::
*    replaces lf ("\n") with cr ("\r") if value is true.
*  :crlf_newline ::
*    replaces lf ("\n") with crlf ("\r\n") if value is true.
*  :universal_newline ::
*    replaces crlf ("\r\n") and cr ("\r") with lf ("\n") if value is true.
*
*/
private static encoding getencoding ruby runtime  irubyobject toenc
try
return runtime getencodingservice   getencodingfromobject toenc
catch  exception e
throw runtime newconverternotfounderror     toenc tostring
@jrubymethod name      compat   ruby1_9
public irubyobject force_encoding threadcontext context  irubyobject enc
modify19
encoding encoding   context runtime getencodingservice   getencodingfromobject enc
associateencoding encoding
clearcoderange
return this
@jrubymethod name      compat   ruby1_9
public irubyobject valid_encoding_p threadcontext context
ruby runtime   context getruntime
return scanforcoderange      cr_broken ? runtime getfalse     runtime gettrue
@jrubymethod name      compat   ruby1_9
public irubyobject ascii_only_p threadcontext context
ruby runtime   context getruntime
return scanforcoderange      cr_7bit ? runtime gettrue     runtime getfalse
/**
* mutator for internal string representation.
*
* @param value the new java.lang.string this rubystring should encapsulate
* @deprecated
*/
public void setvalue charsequence value
view bytelist plain value
public void setvalue bytelist value
view value
public charsequence getvalue
return tostring
public byte getbytes
return value bytes
public bytelist getbytelist
return value
/** used by ar-jdbc
*
*/
public string getunicodevalue
return rubyencoding decodeutf8 value getunsafebytes    value getbegin    value getrealsize
@override
public object tojava class target
if  target isassignablefrom string class
return decodestring
else if  target isassignablefrom bytelist class
return value
else
return super tojava target