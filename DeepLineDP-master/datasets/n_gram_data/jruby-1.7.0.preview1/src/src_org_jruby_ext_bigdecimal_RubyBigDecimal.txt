/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2006 ola bini <ola@ologix.com>
* copyright (c) 2009 joseph lafata <joe@quibb.org>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby ext bigdecimal
import java math bigdecimal
import java math biginteger
import java math mathcontext
import java math roundingmode
import java util arraylist
import java util list
import java util regex matcher
import java util regex pattern
import org jruby compatversion
import org jruby ruby
import org jruby rubyarray
import org jruby rubybignum
import org jruby rubyboolean
import org jruby rubyclass
import org jruby rubyfixnum
import org jruby rubyfloat
import org jruby rubyinteger
import org jruby rubymodule
import org jruby rubynumeric
import org jruby rubyobject
import org jruby rubyrational
import org jruby rubystring
import org jruby anno jrubyclass
import org jruby anno jrubyconstant
import org jruby anno jrubymethod
import org jruby runtime arity
import org jruby runtime block
import org jruby runtime objectallocator
import org jruby runtime threadcontext
import org jruby runtime visibility
import org jruby runtime builtin irubyobject
import org jruby util numeric
import org jruby util safedoubleparser
/**
* @author <a href="mailto:ola.bini@ki.se">ola bini</a>
*/
@jrubyclass name    parent
public class rubybigdecimal extends rubynumeric
private static final objectallocator bigdecimal_allocator   new objectallocator
public irubyobject allocate ruby runtime  rubyclass klass
return new rubybigdecimal runtime  klass
@jrubyconstant
public final static int round_down   bigdecimal round_down
@jrubyconstant
public final static int round_ceiling   bigdecimal round_ceiling
@jrubyconstant
public final static int round_up   bigdecimal round_up
@jrubyconstant
public final static int round_half_down   bigdecimal round_half_down
@jrubyconstant
public final static int round_half_even   bigdecimal round_half_even
@jrubyconstant
public final static int round_half_up   bigdecimal round_half_up
@jrubyconstant
public final static int round_floor   bigdecimal round_floor
@jrubyconstant
public final static int sign_positive_infinite 3
@jrubyconstant
public final static int exception_overflow 8
@jrubyconstant
public final static int sign_positive_zero 1
@jrubyconstant
public final static int exception_all 255
@jrubyconstant
public final static int sign_negative_finite  2
@jrubyconstant
public final static int exception_underflow 4
@jrubyconstant
public final static int sign_nan 0
@jrubyconstant
public final static int base 10000
@jrubyconstant
public final static int round_mode 256
@jrubyconstant
public final static int sign_positive_finite 2
@jrubyconstant
public final static int exception_infinity 1
@jrubyconstant
public final static int sign_negative_infinite  3
@jrubyconstant
public final static int exception_zerodivide 1
@jrubyconstant
public final static int sign_negative_zero  1
@jrubyconstant
public final static int exception_nan 2
// static constants
private static final bigdecimal two   new bigdecimal 2
private static final double sqrt_10   3 162277660168379332
public static rubyclass createbigdecimal ruby runtime
rubyclass result   runtime defineclass   runtime getnumeric    bigdecimal_allocator
runtime getkernel   defineannotatedmethods bigdecimalkernelmethods class
result setinternalmodulevariable    rubyfixnum zero runtime
result setinternalmodulevariable    rubyfixnum zero runtime
result setinternalmodulevariable    runtime newfixnum round_half_up
result defineannotatedmethods rubybigdecimal class
result defineannotatedconstants rubybigdecimal class
return result
private boolean isnan   false
private int infinitysign   0
private int zerosign   0
private bigdecimal value
public bigdecimal getvalue
return value
public rubybigdecimal ruby runtime  rubyclass klass
super runtime  klass
public rubybigdecimal ruby runtime  bigdecimal value
super runtime  runtime getclass
this value   value
public static class bigdecimalkernelmethods
@jrubymethod name      rest   true  module   true  visibility   visibility private
public static irubyobject newbigdecimal irubyobject recv  irubyobject args
return rubybigdecimal newbigdecimal recv  args  block null_block
public static rubybigdecimal newbigdecimal irubyobject recv  irubyobject args  block unusedblock
return newinstance recv getruntime   getclass     args
@jrubymethod name      meta   true
public static irubyobject ver irubyobject recv
return recv getruntime   newstring
@jrubymethod name      optional   1
public irubyobject dump irubyobject args  block unusedblock
rubystring precision   rubystring newunicodestring getruntime
return precision append asstring
@jrubymethod name      required   1  meta   true
public static rubybigdecimal load irubyobject recv  irubyobject from  block block
rubybigdecimal rubybigdecimal    rubybigdecimal     rubyclass recv  allocate
string precisionandvalue   from converttostring   asjavastring
string value   precisionandvalue substring precisionandvalue indexof    1
rubybigdecimal value   new bigdecimal value
return rubybigdecimal
@jrubymethod name      meta   true
public static irubyobject double_fig irubyobject recv
return recv getruntime   newfixnum 20
@jrubymethod name      optional   1  meta   true
public static irubyobject limit irubyobject recv  irubyobject args
ruby runtime   recv getruntime
rubymodule c    rubymodule recv
irubyobject ncur   c searchinternalmodulevariable
if  args length > 0
irubyobject arg   args
if   arg isnil
if    arg instanceof rubyfixnum
throw runtime newtypeerror arg  runtime getfixnum
if  0 >   rubyfixnum arg  getlongvalue
throw runtime newargumenterror
c setinternalmodulevariable    arg
return ncur
@jrubymethod name      required   1  optional   1  meta   true
public static irubyobject mode threadcontext context  irubyobject recv  irubyobject args
// fixme: i doubt any of the constants referenced in this method
// are ever redefined -- should compare to the known values, rather
// than do an expensive constant lookup.
ruby runtime   recv getruntime
rubyclass clazz   runtime getclass
rubymodule c    rubymodule recv
args   arity scanargs runtime  args  1  1
irubyobject mode   args
irubyobject value   args
if    mode instanceof rubyfixnum
throw runtime newtypeerror     mode getmetaclass
long longmode     rubyfixnum mode  getlongvalue
long exception_all     rubyfixnum clazz getconstant     getlongvalue
if   longmode   exception_all     0
if  value isnil
return c searchinternalmodulevariable
if    value isnil         value instanceof rubyboolean
throw runtime newtypeerror
rubyfixnum currentexceptionmode    rubyfixnum c searchinternalmodulevariable
rubyfixnum newexceptionmode   new rubyfixnum runtime  currentexceptionmode getlongvalue
rubyfixnum exception_infinity    rubyfixnum clazz getconstant
if   longmode   exception_infinity getlongvalue       0
newexceptionmode    value istrue    ?  rubyfixnum currentexceptionmode callcoerced context     exception_infinity
rubyfixnum currentexceptionmode callcoerced context     new rubyfixnum runtime  ~ exception_infinity  getlongvalue
rubyfixnum exception_nan    rubyfixnum clazz getconstant
if   longmode   exception_nan getlongvalue       0
newexceptionmode    value istrue    ?  rubyfixnum currentexceptionmode callcoerced context     exception_nan
rubyfixnum currentexceptionmode callcoerced context     new rubyfixnum runtime  ~ exception_nan  getlongvalue
rubyfixnum exception_underflow    rubyfixnum clazz getconstant
if   longmode   exception_underflow getlongvalue       0
newexceptionmode    value istrue    ?  rubyfixnum currentexceptionmode callcoerced context     exception_underflow
rubyfixnum currentexceptionmode callcoerced context     new rubyfixnum runtime  ~ exception_underflow  getlongvalue
rubyfixnum exception_overflow    rubyfixnum clazz getconstant
if   longmode   exception_overflow getlongvalue       0
newexceptionmode    value istrue    ?  rubyfixnum currentexceptionmode callcoerced context     exception_overflow
rubyfixnum currentexceptionmode callcoerced context     new rubyfixnum runtime  ~ exception_overflow  getlongvalue
c setinternalmodulevariable    newexceptionmode
return newexceptionmode
long round_mode     rubyfixnum clazz getconstant     getlongvalue
if  longmode    round_mode
if  value isnil
return c searchinternalmodulevariable
if    value instanceof rubyfixnum
throw runtime newtypeerror     mode getmetaclass
rubyfixnum roundingmode    rubyfixnum value
if  roundingmode    clazz getconstant
roundingmode    clazz getconstant
roundingmode    clazz getconstant
roundingmode    clazz getconstant
roundingmode    clazz getconstant
roundingmode    clazz getconstant
roundingmode    clazz getconstant
c setinternalmodulevariable    roundingmode
else
throw runtime newtypeerror
return c searchinternalmodulevariable
throw runtime newtypeerror
private roundingmode getroundingmode ruby runtime
rubyfixnum roundingmode    rubyfixnum runtime getclass
searchinternalmodulevariable
return roundingmode valueof  int roundingmode getlongvalue
private static boolean isnanexceptionmode ruby runtime
rubyfixnum currentexceptionmode    rubyfixnum runtime getclass
searchinternalmodulevariable
rubyfixnum exception_nan    rubyfixnum runtime getclass
getconstant
return  currentexceptionmode getlongvalue     exception_nan getlongvalue       0
private static boolean isinfinityexceptionmode ruby runtime
rubyfixnum currentexceptionmode    rubyfixnum runtime getclass
searchinternalmodulevariable
rubyfixnum exception_infinity    rubyfixnum runtime getclass
getconstant
return  currentexceptionmode getlongvalue     exception_infinity getlongvalue       0
private static boolean isoverflowexceptionmode ruby runtime
rubyfixnum currentexceptionmode    rubyfixnum runtime getclass
searchinternalmodulevariable
rubyfixnum exception_overflow    rubyfixnum runtime getclass
getconstant
return  currentexceptionmode getlongvalue     exception_overflow getlongvalue       0
private static rubybigdecimal cannotbecoerced threadcontext context  irubyobject v  boolean must
if must
string err
if  v isimmediate
err   rubyobject inspect context  v  tostring
else
err   v getmetaclass   getbasename
throw context runtime newtypeerror err
return null
private static rubybigdecimal unabletocoercewithoutprec threadcontext context  irubyobject v  boolean must
if  must
throw context runtime newargumenterror v getmetaclass   getbasename
return null
private static rubybigdecimal getvpvalue19 threadcontext context  irubyobject v  boolean must
return getvpvaluewithprec19 context  v   1  must
private static irubyobject getvprubyobjectwithprec19inner threadcontext context  rubyrational r  long precision  boolean must
rubyrational orig   null
irubyobject numerator   null
while  true
irubyobject value
boolean div
if  orig    null
orig   r
div   true
else
div   orig    r
if  div
numerator   r numerator context
rubybigdecimal pv   getvpvaluewithprec19 context  numerator   1  must
if  pv    null  cannotbecoerced context  r  must
value   pv div19 context  r denominator context       fixme  this should propagate precision
else
value   orig
if  value instanceof rubyfloat  value     rubyfloat  value  to_r context
if    value instanceof rubyrational   return value
r    rubyrational  value
private static rubybigdecimal getvpvaluewithprec19 threadcontext context  irubyobject value  long precision  boolean must
while  true
if  value instanceof rubyfloat
//                if (precision < 0) return unabletocoercewithoutprec(context, value, must);
if  precision > long max_value  cannotbecoerced context  value  must
value   getvprubyobjectwithprec19inner context   rubyrational    rubyfloat  value  to_r context   precision  must      mri uses built in
continue
else if  value instanceof rubyrational
if  precision < 0  return unabletocoercewithoutprec context  value  must
value   getvprubyobjectwithprec19inner context   rubyrational  value  precision  must
continue
else if  value instanceof rubybigdecimal
return  rubybigdecimal  value
else if  value instanceof rubyfixnum    value instanceof rubybignum
string s   value tostring
return newinstance value getruntime   getclass    new irubyobject value getruntime   newstring s
return cannotbecoerced context  value  must
private static rubybigdecimal getvpvalue irubyobject v  boolean must
if v instanceof rubybigdecimal
return  rubybigdecimal v
else if v instanceof rubyfixnum    v instanceof rubybignum
string s   v tostring
return newinstance v getruntime   getclass    new irubyobject v getruntime   newstring s
return cannotbecoerced v getruntime   getcurrentcontext    v  must
@jrubymethod name      required   1  meta   true
public static irubyobject induced_from irubyobject recv  irubyobject arg
return getvpvalue arg  true
private final static pattern infinity_pattern   pattern compile
private final static pattern number_pattern
pattern compile
@jrubymethod name      required   1  optional   1  meta   true
public static rubybigdecimal newinstance irubyobject recv  irubyobject args
bigdecimal decimal
ruby runtime   recv getruntime
if  args length    0
decimal   new bigdecimal 0
else
string strvalue   args converttostring   tostring
strvalue   strvalue trim
if    equals strvalue
return newnan runtime
matcher m   infinity_pattern matcher strvalue
if  m matches
int sign   1
string signgroup   m group 1
if    equals signgroup
sign    1
return newinfinity runtime  sign
// clean-up string representation so that it could be understood
// by java's bigdecimal. not terribly efficient for now.
// 1. mri allows d and d as exponent separators
strvalue   strvalue replacefirst
// 2. mri allows underscores anywhere
strvalue   strvalue replaceall
// 3. mri ignores the trailing junk
strvalue   number_pattern matcher strvalue  replacefirst
try
decimal   new bigdecimal strvalue
catch numberformatexception e
if  isoverflowexceptionmode runtime
throw runtime newfloatdomainerror
decimal   new bigdecimal 0
if  decimal signum      0
// mri behavior: -0 and +0 are two different things
if  strvalue matches
return newzero runtime   1
else
return newzero runtime  1
return new rubybigdecimal runtime  decimal
private static rubybigdecimal newzero ruby runtime  int sign
rubybigdecimal rbd    new rubybigdecimal runtime  bigdecimal zero
if  sign < 0
rbd zerosign    1
else
rbd zerosign   1
return rbd
private static rubybigdecimal newnan ruby runtime
if  isnanexceptionmode runtime
throw runtime newfloatdomainerror
rubybigdecimal rbd    new rubybigdecimal runtime  bigdecimal zero
rbd isnan   true
return rbd
private static rubybigdecimal newinfinity ruby runtime  int sign
rubybigdecimal rbd    new rubybigdecimal runtime  bigdecimal zero
if  isinfinityexceptionmode runtime
throw runtime newfloatdomainerror
if  sign < 0
rbd infinitysign    1
else
rbd infinitysign   1
return rbd
private rubybigdecimal setresult
return setresult 0
private rubybigdecimal setresult int scale
int prec   rubyfixnum fix2int getruntime   getclass    searchinternalmodulevariable
int prec2   math max scale prec
if prec2 > 0    this value scale   >  prec2 getexponent
this value   this value setscale prec2 getexponent   bigdecimal round_half_up
return this
@override
@jrubymethod name
public rubyfixnum hash
return getruntime   newfixnum value hashcode
@jrubymethod name           required   1  compat   compatversion ruby1_8
public irubyobject op_mod threadcontext context  irubyobject arg
// todo: full-precision remainder is 1000x slower than mri!
ruby runtime   context getruntime
if  isinfinity      isnan
return newnan runtime
rubybigdecimal val   getvpvalue arg  false
if  val    null
return callcoerced context     arg  true
if  val isinfinity      val isnan      val iszero
return newnan runtime
// java and mri definitions of modulo are different.
bigdecimal modulo   value remainder val value
if  modulo signum     val value signum   < 0
modulo   modulo add val value
return new rubybigdecimal runtime  modulo  setresult
@jrubymethod name           required   1  compat   compatversion ruby1_9
public irubyobject op_mod19 threadcontext context  irubyobject other
// todo: full-precision divmod is 1000x slower than mri!
ruby runtime   context getruntime
rubybigdecimal val   getvpvalue other  false
if  val    null
return callcoerced context     other  true
if  isnan      val isnan       isinfinity      val isinfinity
return newnan runtime
if  val iszero
throw context getruntime   newzerodivisionerror
if  isinfinity
return newnan runtime
if  val isinfinity
return this
if  iszero
return newzero runtime  value signum
// java and mri definitions of modulo are different.
bigdecimal modulo   value remainder val value
if  modulo signum     val value signum   < 0
modulo   modulo add val value
return new rubybigdecimal runtime  modulo  setresult
@override
@jrubymethod name      required   1
public irubyobject remainder threadcontext context  irubyobject arg
// todo: full-precision remainder is 1000x slower than mri!
ruby runtime   context getruntime
if  isinfinity      isnan
return newnan runtime
rubybigdecimal val   getvpvalue arg false
if  val    null
return callcoerced context     arg  true
if  val isinfinity      val isnan      val iszero
return newnan runtime
// java and mri definitions of remainder are the same.
return new rubybigdecimal runtime  value remainder val value   setresult
@jrubymethod name      required   1
public irubyobject op_mul threadcontext context  irubyobject arg
return mult2 context  arg  getruntime   getclass
searchinternalmodulevariable
@jrubymethod name      required   2
public irubyobject mult2 threadcontext context  irubyobject b  irubyobject n
ruby runtime   context getruntime
rubybigdecimal val   getvpvalue b false
if val    null
// todo: what about n arg?
return callcoerced context     b
int digits   rubynumeric fix2int n
if  isnan      val isnan
return newnan runtime
if    isinfinity      val iszero        iszero      val isinfinity
return newnan runtime
if  iszero      val iszero
int sign1   iszero  ? zerosign   value signum
int sign2   val iszero   ?  val zerosign   val value signum
return newzero runtime  sign1   sign2
if  isinfinity      val isinfinity
int sign1   isinfinity   ? infinitysign   value signum
int sign2   val isinfinity   ? val infinitysign   val value signum
return newinfinity runtime  sign1   sign2
bigdecimal res   value multiply val value
if  res precision   > digits
// todo: rounding mode should not be hard-coded. see #mode.
res   res round new mathcontext digits   roundingmode half_up
return new rubybigdecimal runtime  res  setresult
@jrubymethod name           required   1  compat   compatversion ruby1_8
public irubyobject op_pow irubyobject arg
if    arg instanceof rubyfixnum
throw getruntime   newtypeerror     arg getmetaclass
if  isnan      isinfinity
return newnan getruntime
int times   rubynumeric fix2int arg converttointeger
if  times < 0
if  iszero
return newinfinity getruntime    value signum
// note: mri has a very non-trivial way of calculating the precision,
// so we use very simple approximation here:
int precision     times   4     getalldigits   length     4
return new rubybigdecimal getruntime
value pow times  new mathcontext precision  roundingmode half_up
else
return new rubybigdecimal getruntime    value pow times
@jrubymethod name           required   1  compat   compatversion ruby1_9
public irubyobject op_pow19 irubyobject exp
if    exp instanceof rubyfixnum
throw getruntime   newtypeerror     exp getmetaclass
ruby runtime   getruntime
threadcontext context   runtime getcurrentcontext
if  isnan
return newnan runtime
if  isinfinity
if  numeric f_negative_p context  exp
if  infinitysign < 0
if  numeric f_integer_p context  exp  istrue
if  is_even exp
/* (-infinity) ** (-even_integer) -> +0 */
return newzero runtime  1
else
/* (-infinity) ** (-odd_integer) -> -0 */
return newzero runtime   1
else
/* (-infinity) ** (-non_integer) -> -0 */
return newzero runtime   1
else
return newzero runtime  0
else
if  infinitysign < 0
if  numeric f_integer_p context  exp  istrue
if  is_even exp
return newinfinity runtime  1
else
return newinfinity runtime   1
else
throw runtime newmathdomainerror
else
return newinfinity runtime  1
int times   rubynumeric fix2int exp converttointeger
if  times < 0
if  iszero
return newinfinity getruntime    value signum
// note: mri has a very non-trivial way of calculating the precision,
// so we use very simple approximation here:
int precision     times   4     getalldigits   length     4
return new rubybigdecimal getruntime
value pow times  new mathcontext precision  roundingmode half_up
else
return new rubybigdecimal getruntime    value pow times
@jrubymethod name
public irubyobject op_plus threadcontext context  irubyobject b
return addinternal context  b     getruntime   getclass
searchinternalmodulevariable
@jrubymethod name
public irubyobject add2 threadcontext context  irubyobject b  irubyobject digits
return addinternal context  b     digits
private irubyobject addinternal threadcontext context  irubyobject b  string op  irubyobject digits
ruby runtime   context getruntime
int prec   getpositiveint context  digits
rubybigdecimal val   getvpvalue b  false
if  val    null
// todo:
// mri behavior: call "+" or "add", depending on the call.
// but this leads to exceptions when floats are added. see:
// http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-core/17374
// return callcoerced(context, op, b, true); -- this is mri behavior.
// we'll use ours for now, thus providing an ability to add floats.
return callcoerced context     b  true
rubybigdecimal res   handleaddspecialvalues val
if  res    null
return res
roundingmode roundmode   getroundingmode runtime
return new rubybigdecimal runtime  value add
val value  new mathcontext prec  roundmode        todo  why this   setresult
private int getpositiveint threadcontext context  irubyobject arg
ruby runtime   context getruntime
if  arg instanceof rubyfixnum
int value   rubynumeric fix2int arg
if  value < 0
throw runtime newargumenterror
return value
else
throw runtime newtypeerror arg  runtime getfixnum
private rubybigdecimal handleaddspecialvalues rubybigdecimal val
if  isnan      val isnan
return newnan getruntime
// todo: don't calculate the same value 3 times
if  infinitysign   val infinitysign > 0
return isinfinity   ? this   val
if  infinitysign   val infinitysign < 0
return newnan getruntime
if  infinitysign   val infinitysign    0
int sign   infinitysign   val infinitysign
if  sign    0
return newinfinity getruntime    sign
return null
@override
@jrubymethod name
public irubyobject op_uplus
return this
@jrubymethod name      required   1
public irubyobject op_minus threadcontext context  irubyobject arg
rubybigdecimal val   getvpvalue arg  false
if val    null
return callcoerced context     arg
rubybigdecimal res   handleminusspecialvalues val
if  res    null
return res
return new rubybigdecimal getruntime   value subtract val value   setresult
@jrubymethod name      required   2
public irubyobject sub2 threadcontext context  irubyobject b  irubyobject n
rubybigdecimal val   getvpvalue b  false
if val    null
return callcoerced context     b
rubybigdecimal res   handleminusspecialvalues val
if  res    null
return res
return new rubybigdecimal getruntime   value subtract val value   setresult
private rubybigdecimal handleminusspecialvalues rubybigdecimal val
if  isnan      val isnan
return newnan getruntime
// todo: 3 times calculate the same value below
if  infinitysign   val infinitysign > 0
return newnan getruntime
if  infinitysign   val infinitysign < 0
return this
if  infinitysign   val infinitysign    0
if  isinfinity
return this
if  val isinfinity
return newinfinity getruntime    val infinitysign    1
int sign   infinitysign   val infinitysign
if  sign    0
return newinfinity getruntime    sign
return null
@jrubymethod name
public irubyobject op_uminus
ruby runtime   getruntime
if  isnan
return newnan runtime
if  isinfinity
return newinfinity runtime   infinitysign
if  iszero
return newzero runtime   zerosign
return new rubybigdecimal getruntime    value negate
@jrubymethod name           compat   compatversion ruby1_8
public irubyobject op_quo threadcontext context  irubyobject other
// regular division with some default precision
// todo: proper algorithm to set the precision
return op_div context  other  getruntime   newfixnum 200
@jrubymethod name           compat   compatversion ruby1_9
public irubyobject op_quo19 threadcontext context  irubyobject other
other   getvpvalue19 context  other  true
// regular division with some default precision
// todo: proper algorithm to set the precision
return op_div context  other  getruntime   newfixnum 200
@jrubymethod name      compat   compatversion ruby1_8
public irubyobject op_div threadcontext context  irubyobject other
// integer division
rubybigdecimal val   getvpvalue other  false
if  val    null
return callcoerced context     other
if  isnan      val iszero      val isnan
return newnan getruntime
if  isinfinity      val isinfinity
return newnan getruntime
return new rubybigdecimal getruntime
this value dividetointegralvalue val value   setresult
@jrubymethod name      compat   compatversion ruby1_9
public irubyobject op_div19 threadcontext context  irubyobject r
irubyobject b   getvpvalue19 context  r  true
if  b    null  return cannotbecoerced context  b  true
return op_div context  r
@jrubymethod name      compat   compatversion ruby1_8
public irubyobject op_div threadcontext context  irubyobject other  irubyobject digits
// todo: take bigdecimal.mode into account.
int scale   rubynumeric fix2int digits
rubybigdecimal val   getvpvalue other  false
if  val    null
return callcoerced context     other
if  isnan       iszero      val iszero       val isnan
return newnan getruntime
if  val iszero
int sign1   isinfinity   ? infinitysign   value signum
return newinfinity getruntime    sign1   val zerosign
if  isinfinity       val isinfinity
return newinfinity getruntime    infinitysign   val value signum
if   isinfinity      val isinfinity
return newzero getruntime    value signum     val infinitysign
if  isinfinity      val isinfinity
return newnan getruntime
if  scale    0
// mri behavior: "if digits is 0, the result is the same as the / operator."
return op_quo context  other
else
// todo: better algorithm to set precision needed
int prec   math max 200  scale
return new rubybigdecimal getruntime
value divide val value  new mathcontext prec  roundingmode half_up    setresult scale
@jrubymethod name      compat   compatversion ruby1_9
public irubyobject op_div19 threadcontext context  irubyobject other  irubyobject digits
rubybigdecimal val   getvpvalue other  false
if  isnan      val isnan
throw context getruntime   newfloatdomainerror
return op_div context  other  digits
private irubyobject cmp threadcontext context  irubyobject r  char op
int e   0
rubybigdecimal rb   getvpvalue r false
if rb    null
irubyobject ee   callcoerced context    r
if ee isnil
if  op
return getruntime   getnil
else if  op         isnan
return getruntime   getfalse
else
throw getruntime   newargumenterror
e   rubynumeric fix2int ee
else
if  isnan     rb isnan
return  op       ? getruntime   getnil     getruntime   getfalse
if  infinitysign    0    rb infinitysign    0
e   infinitysign   rb infinitysign
else
e   value compareto rb value
switch op
case    return getruntime   newfixnum e
case    return  e  0 ?getruntime   gettrue   getruntime   getfalse
case    return  e  0 ?getruntime   gettrue   getruntime   getfalse
case    return  e> 0 ?getruntime   gettrue   getruntime   getfalse
case    return  e> 0 ?getruntime   gettrue   getruntime   getfalse
case    return  e< 0 ?getruntime   gettrue   getruntime   getfalse
case    return  e< 0 ?getruntime   gettrue   getruntime   getfalse
return getruntime   getnil
@override
@jrubymethod name      required   1
public irubyobject op_cmp threadcontext context  irubyobject arg
return cmp context  arg
@override
@jrubymethod name              required   1
public irubyobject eql_p threadcontext context  irubyobject arg
return cmp context  arg
@jrubymethod name      required   1
public irubyobject op_lt threadcontext context  irubyobject arg
return cmp context  arg
@jrubymethod name      required   1
public irubyobject op_le threadcontext context  irubyobject arg
return cmp context  arg
@jrubymethod name      required   1
public irubyobject op_gt threadcontext context  irubyobject arg
return cmp context  arg
@jrubymethod name      required   1
public irubyobject op_ge threadcontext context  irubyobject arg
return cmp context  arg
@jrubymethod name
public irubyobject abs
ruby runtime   getruntime
if  isnan
return newnan runtime
if  isinfinity
return newinfinity runtime  1
return new rubybigdecimal getruntime    value abs    setresult
@jrubymethod name      optional   1
public irubyobject ceil irubyobject args
if  isnan
return newnan getruntime
if  isinfinity
return newinfinity getruntime    infinitysign
int n   0
if  args length > 0
n   rubynumeric fix2int args
if  value scale   > n       rounding neccessary
return new rubybigdecimal getruntime
value setscale n  roundingmode ceiling
else
return this
@jrubymethod name      optional   1  compat   compatversion ruby1_9
public irubyobject ceil19 irubyobject args
checkfloatdomain
if  args length    0
biginteger ceil   value setscale 0  roundingmode ceiling  tobiginteger
if  ceil compareto biginteger valueof  long ceil intvalue        0
// it fits in fixnum
return rubyinteger int2fix getruntime    ceil intvalue
return rubybignum newbignum getruntime    ceil
return ceil args
@jrubymethod name      required   1
@override
public irubyobject coerce irubyobject other
irubyobject obj
if other instanceof rubyfloat
obj   getruntime   newarray other to_f
else
obj   getruntime   newarray getvpvalue other  true  this
return obj
@override
public double getdoublevalue     return safedoubleparser doublevalue value
@override
public long getlongvalue     return value longvalue
@override
public biginteger getbigintegervalue
return value tobiginteger
public rubynumeric multiplywith threadcontext context  rubyinteger value
return  rubynumeric op_mul context  value
public rubynumeric multiplywith threadcontext context  rubyfloat value
return  rubynumeric op_mul context  value
public rubynumeric multiplywith threadcontext context  rubybignum value
return  rubynumeric op_mul context  value
@override
@jrubymethod name      required   1  compat   compatversion ruby1_8
public irubyobject divmod threadcontext context  irubyobject other
// todo: full-precision divmod is 1000x slower than mri!
ruby runtime   context getruntime
if  isinfinity      isnan
return rubyarray newarray runtime  newnan runtime   newnan runtime
rubybigdecimal val   getvpvalue other  false
if  val    null
return callcoerced context     other  true
if  val isinfinity      val isnan      val iszero
return rubyarray newarray runtime  newnan runtime   newnan runtime
// java and mri definitions of divmod are different.
bigdecimal divmod   value divideandremainder val value
bigdecimal div   divmod
bigdecimal mod   divmod
if  mod signum     val value signum   < 0
div   div subtract bigdecimal one
mod   mod add val value
return rubyarray newarray runtime
new rubybigdecimal runtime  div
new rubybigdecimal runtime  mod
@override
@jrubymethod name      required   1  compat   compatversion ruby1_9
public irubyobject divmod19 threadcontext context  irubyobject other
// todo: full-precision divmod is 1000x slower than mri!
ruby runtime   context getruntime
rubybigdecimal val   getvpvalue other  false
if  val    null
return callcoerced context     other  true
if  isnan      val isnan       isinfinity      val isinfinity
return rubyarray newarray runtime  newnan runtime   newnan runtime
if  val iszero
throw context getruntime   newzerodivisionerror
if  isinfinity
int sign    infinitysign    val value signum    ? 1    1
return rubyarray newarray runtime  newinfinity runtime  sign   newnan runtime
if  val isinfinity
return rubyarray newarray runtime  newzero runtime  val value signum     this
if  iszero
return rubyarray newarray runtime  newzero runtime
value signum     newzero runtime  value signum
// java and mri definitions of divmod are different.
bigdecimal divmod   value divideandremainder val value
bigdecimal div   divmod
bigdecimal mod   divmod
if  mod signum     val value signum   < 0
div   div subtract bigdecimal one
mod   mod add val value
return rubyarray newarray runtime
new rubybigdecimal runtime  div
new rubybigdecimal runtime  mod
@jrubymethod name
public irubyobject exponent
return getruntime   newfixnum getexponent
@jrubymethod name
public irubyobject finite_p
if  isnan
return getruntime   getfalse
return getruntime   newboolean  isinfinity
@jrubymethod name      optional   1
public irubyobject floor irubyobjectargs
if  isnan
return newnan getruntime
if  isinfinity
return newinfinity getruntime    infinitysign
int n   0
if  args length > 0
n   rubynumeric fix2int args
if  value scale   > n       rounding neccessary
return new rubybigdecimal getruntime
value setscale n  roundingmode floor
else
return this
@jrubymethod name      optional  1  compat   compatversion ruby1_9
public irubyobject floor19 irubyobject args
if  isnan    isinfinity
throw getruntime   newfloatdomainerror     to_s args  asjavastring
return floor args
@jrubymethod name
public irubyobject frac
if  isnan
return newnan getruntime
if  isinfinity
return newinfinity getruntime    infinitysign
if  value scale   > 0    value precision   < value scale
return new rubybigdecimal getruntime    value
bigdecimal val   value subtract   rubybigdecimal fix    value
return new rubybigdecimal getruntime    val
@jrubymethod name
public irubyobject infinite_p
if  infinitysign    0
return getruntime   getnil
return getruntime   newfixnum infinitysign
@jrubymethod name
public irubyobject inspect threadcontext context
stringbuilder val   new stringbuilder    append integer tohexstring system identityhashcode this    append
val append    append this callmethod context      append    append
val append getsignificantdigits   length    append
int len   getalldigits   length
int pow   len   4
val append  pow   1    4  append    append
return getruntime   newstring val tostring
@jrubymethod name
public irubyobject nan_p
return getruntime   newboolean isnan
@jrubymethod name
public irubyobject nonzero_p
return iszero   ? getruntime   getnil     this
@jrubymethod name
public irubyobject precs
final ruby runtime   getruntime
final irubyobject array   new irubyobject
array   runtime newfixnum getsignificantdigits   length
int len   getalldigits   length
int pow   len   4
array   runtime newfixnum  pow   1    4
return rubyarray newarraynocopy runtime  array
@deprecated
public irubyobject round irubyobject args
return round getruntime   getcurrentcontext    args
@jrubymethod name      optional   2
public irubyobject round threadcontext context  irubyobject args
int scale   args length > 0 ? num2int args    0
roundingmode mode    args length > 1  ? javaroundingmodefromrubyroundingmode args    getroundingmode context runtime
// jruby-914: java 1.4 bigdecimal does not allow a negative scale, so we have to simulate it
if  scale < 0
// shift the decimal point just to the right of the digit to be rounded to (divide by 10**(abs(scale)))
// -1 -> 10's digit, -2 -> 100's digit, etc.
bigdecimal normalized   value movepointright scale
// ...round to that digit
bigdecimal rounded   normalized setscale 0 mode
// ...and shift the result back to the left (multiply by 10**(abs(scale)))
return new rubybigdecimal getruntime    rounded movepointleft scale
else
return new rubybigdecimal getruntime    value setscale scale  mode
//this relies on the ruby rounding enumerations == java ones, which they (currently) all are
private roundingmode javaroundingmodefromrubyroundingmode irubyobject arg
return roundingmode valueof num2int arg
@jrubymethod name
public irubyobject sign
if  isnan
return getmetaclass   getconstant
if  isinfinity
if  infinitysign < 0
return getmetaclass   getconstant
else
return getmetaclass   getconstant
if  iszero
if  zerosign < 0
return getmetaclass   getconstant
else
return getmetaclass   getconstant
if  value signum   < 0
return getmetaclass   getconstant
else
return getmetaclass   getconstant
@jrubymethod name
public rubyarray split
final ruby runtime   getruntime
final irubyobject array   new irubyobject
// sign
final rubyfixnum sign
if  isnan
sign   rubyfixnum zero runtime
else if  isinfinity
sign   runtime newfixnum infinitysign
else if  iszero
sign   runtime newfixnum zerosign
else
sign   runtime newfixnum value signum
array   sign
// significant digits and exponent
final rubystring digits
final rubyfixnum exp
if  isnan
digits   runtime newstring
exp   rubyfixnum zero runtime
else if  isinfinity
digits   runtime newstring
exp   rubyfixnum zero runtime
else if  iszero
digits   runtime newstring
exp   rubyfixnum zero runtime
else
// normalize the value
digits   runtime newstring getsignificantdigits
exp   runtime newfixnum getexponent
array   digits
array   exp
// base
array   runtime newfixnum 10
return rubyarray newarraynocopy runtime  array
// it doesn't handle special cases
private string getsignificantdigits
// todo: no need to calculate every time.
bigdecimal val   value abs   striptrailingzeros
return val unscaledvalue   tostring
private string getalldigits
// todo: no need to calculate every time.
bigdecimal val   value abs
return val unscaledvalue   tostring
// it doesn't handle special cases
private int getexponent
// todo: no need to calculate every time.
if  iszero
return 0
bigdecimal val   value abs   striptrailingzeros
return val precision     val scale
@jrubymethod name      required   1
public irubyobject sqrt irubyobject arg
ruby runtime   getruntime
if  isnan
throw runtime newfloatdomainerror
if   isinfinity      infinitysign < 0     value signum   < 0
throw runtime newfloatdomainerror
if  isinfinity      infinitysign > 0
return newinfinity runtime  1
// note: mri's sqrt precision is limited by 100,
// but we allow values more than 100.
int n   rubynumeric fix2int arg
if  n < 0
throw runtime newargumenterror
n    4     just in case  add a bit of extra precision
return new rubybigdecimal getruntime
bigsqrt this value  new mathcontext n  roundingmode half_up    setresult
@jrubymethod name
public irubyobject to_f
if  isnan
return rubyfloat newfloat getruntime    double nan
if  isinfinity
return rubyfloat newfloat getruntime
infinitysign < 0 ? double negative_infinity   double positive_infinity
if  iszero
return rubyfloat newfloat getruntime
zerosign < 0 ?  0 0   0 0
if   value scale   > rubyfloat max_10_exp
switch  value signum
case  1
return rubyfloat newfloat getruntime    double negative_infinity
case 0
return rubyfloat newfloat getruntime    0
case 1
return rubyfloat newfloat getruntime    double positive_infinity
default
// eh?!
return rubyfloat newfloat getruntime    safedoubleparser doublevalue value
@jrubymethod name           compat   compatversion ruby1_8
public irubyobject to_int
if  isnan      infinitysign    0
return getruntime   getnil
try
return rubynumeric int2fix getruntime    value longvalueexact
catch  arithmeticexception ae
return rubybignum bignorm getruntime    value tobiginteger
@jrubymethod name           compat   compatversion ruby1_9
public irubyobject to_int19
checkfloatdomain
return to_int
private string removetrailingzeroes string in
while in length   > 0    in charat in length   1
in   in substring 0 in length   1
return in
public static boolean formathasleadingplus string format
return format startswith
public static boolean formathasleadingspace string format
return format startswith
public static boolean formathasfloatingpointnotation string format
return format endswith
public static int formatfractionaldigitgroups string format
int groups   0
pattern p   pattern compile
matcher m   p matcher format
if  m matches
groups   integer parseint m group 2
return groups
private boolean hasarg irubyobject args
return args length    0     args isnil
private string format irubyobject args
return args tostring
private string firstargument irubyobject args
if  hasarg args
return format args
return null
private boolean posspace string arg
if  null    arg
return formathasleadingspace arg
return false
private boolean possign string arg
if  null    arg
return formathasleadingplus arg     posspace arg
return false
private boolean asengineering string arg
if  null    arg
return  formathasfloatingpointnotation arg
return true
private int groups string arg
if  null    arg
return formatfractionaldigitgroups arg
return 0
private boolean iszero
return  isnan       isinfinity       value signum      0
private boolean isnan
return isnan
private boolean isinfinity
return infinitysign    0
private string unscaledvalue
return value abs   unscaledvalue   tostring
private irubyobject engineeringvalue string arg
int exponent   getexponent
int signum   value signum
stringbuilder build   new stringbuilder
build append signum     1 ?      signum    1 ?  possign arg  ?  posspace arg  ?
build append
if  0    groups arg
string s   removetrailingzeroes unscaledvalue
if    equals s
build append
else
build append s
else
int index   0
string sep
while  index < unscaledvalue   length
int next   index   groups arg
if  next > unscaledvalue   length
next   unscaledvalue   length
build append sep  append unscaledvalue   substring index  next
sep
index    groups arg
build append    append exponent
return getruntime   newstring build tostring
private irubyobject floatingpointvalue string arg
string values   value abs   striptrailingzeros   toplainstring   split
string whole
if  values length > 0
whole   values
string after
if  values length > 1
after   values
int signum   value signum
stringbuilder build   new stringbuilder
build append signum     1 ?      signum    1 ?  possign arg  ?  posspace arg  ?
if  groups arg     0
build append whole
if  null    after
build append    append after
else
int index   0
string sep
while  index < whole length
int next   index   groups arg
if  next > whole length
next   whole length
build append sep  append whole substring index  next
sep
index    groups arg
if  null    after
build append
index   0
sep
while  index < after length
int next   index   groups arg
if  next > after length
next   after length
build append sep  append after substring index  next
sep
index    groups arg
return getruntime   newstring build tostring
@jrubymethod name      optional   1
public irubyobject to_s irubyobject args
string arg   firstargument args
if  isnan
return getruntime   newstring
if  infinitysign    0
if  infinitysign     1
return getruntime   newstring
else
return getruntime   newstring
if  iszero
string zero
if  zerosign < 0
zero       zero
return getruntime   newstring zero
if asengineering arg
return engineeringvalue arg
else
return floatingpointvalue arg
// note: #fix has only no-arg form, but truncate allows optional parameter.
@jrubymethod
public irubyobject fix
irubyobject ary     rubyfixnum zero getruntime
return truncate ary
@jrubymethod name      optional   1  compat   compatversion ruby1_8
public irubyobject truncate irubyobject args
if  args length    0
irubyobject ary     rubyfixnum zero getruntime
return truncate ary
if  isnan
return newnan getruntime
if  isinfinity
return newinfinity getruntime    infinitysign
int n   rubynumeric fix2int args
int precision   value precision     value scale     n
if  precision > 0
return new rubybigdecimal getruntime
value round new mathcontext precision  roundingmode down
else
// todo: proper sign
return new rubybigdecimal getruntime    bigdecimal zero
@jrubymethod name      optional   1  compat   compatversion ruby1_9
public irubyobject truncate19 irubyobject args
if  args length    0
return   rubybigdecimal  truncate args   to_int19
else
return truncate args
@jrubymethod name
public irubyobject zero_p
return getruntime   newboolean iszero
/**
* returns the correctly rounded square root of a positive
* bigdecimal. this method performs the fast <i>square root by
* coupled newton iteration</i> algorithm by timm ahrendt, from
* the book "pi, unleashed" by jãâ¶rg arndt in a neat loop.
* <p>
* the code is based on frans lelieveld's code , used here with
* permission.
*
* @param squard the number to get the root from.
* @param rootmc precision and rounding mode.
* @return the root of the argument number
* @throws arithmeticexception
*                 if the argument number is negative
* @throws illegalargumentexception
*                 if rootmc has precision 0
* @see http://oldblog.novaloka.nl/blogger.xs4all.nl/novaloka/archive/2007/09/15/295396.html
*/
public static bigdecimal bigsqrt bigdecimal squard  mathcontext rootmc
// general number and precision checking
int sign   squard signum
if  sign     1
throw new arithmeticexception     squard
else if sign    0
return squard round rootmc
int prec   rootmc getprecision                 the requested precision
if  prec    0
throw new illegalargumentexception
// initial precision is that of double numbers 2^63/2 ~ 4e18
int bits   62                                  63 1 an even number of number bits
int ninit   16                                 precision seems 16 to 18 digits
mathcontext nmc   new mathcontext 18  roundingmode half_down
// iteration variables, for the square root x and the reciprocal v
bigdecimal x   null  e   null                  initial x   x0 ~ sqrt
bigdecimal v   null  g   null                  initial v   v0   1  2 x
// estimate the square root with the foremost 62 bits of squard
biginteger bi   squard unscaledvalue           bi and scale are a tandem
int bilen   bi bitlength
int shift   math max 0  bilen   bits    bilen%2    0 ? 0   1         even shift
bi   bi shiftright shift                         floors to 62 or 63 bit biginteger
double root   math sqrt safedoubleparser doublevalue bi
bigdecimal halfback   new bigdecimal biginteger one shiftleft shift 2
int scale   squard scale
if  scale % 2    1
root    sqrt_10                            5  > 2   5  >  3 need half a scale more
scale    int  math ceil scale 2                 where 100  > 10 shifts the scale
// initial x - use double root - multiply by halfback to unshift - set new scale
x   new bigdecimal root  nmc
x   x multiply halfback  nmc                   x0 ~ sqrt
if  scale    0
x   x movepointleft scale
if  prec < ninit                      for prec 15 root x0 must surely be ok
return x round rootmc             return small prec roots without iterations
// initial v - the reciprocal
v   bigdecimal one divide two multiply x   nmc             v0   1  2 x
// collect iteration precisions beforehand
list<integer> nprecs   new arraylist<integer>
assert ninit > 3                        assume ninit   16 <  prec
// let m be the exact digits precision in an earlier! loop
for  int m   prec   1  m > ninit  m   m 2    m > 100 ? 1   2
nprecs add m
// the loop of "square root by coupled newton iteration"
for  int i   nprecs size     1  i >  1  i
// increase precision - next iteration supplies n exact digits
nmc   new mathcontext nprecs get i    i%2    1  ? roundingmode half_up
roundingmode half_down
// next x                                        // e = d - x^2
e   squard subtract x multiply x  nmc   nmc
if  i    0
x   x add e multiply v  nmc                     x    e v     ~ sqrt
else
x   x add e multiply v  rootmc   rootmc         root x is ready
break
// next v                                        // g = 1 - 2*x*v
g   bigdecimal one subtract two multiply x  multiply v  nmc
v   v add g multiply v  nmc                         v    g v     ~ 1 2 sqrt
return x                          return sqrt squard  with precision of rootmc
private void checkfloatdomain
if  isnan
throw this getruntime   newfloatdomainerror
if  infinitysign    0
if  infinitysign     1
throw getruntime   newfloatdomainerror
else
throw getruntime   newfloatdomainerror
private boolean is_even irubyobject x
if  x instanceof rubyfixnum
return rubynumeric fix2long  rubyfixnum  x  % 2    0
if  x instanceof rubybignum
return rubybignum big2long  rubybignum  x  % 2    0
return false
rubybigdecimal