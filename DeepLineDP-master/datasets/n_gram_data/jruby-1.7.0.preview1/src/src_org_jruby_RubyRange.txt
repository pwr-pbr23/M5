/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2001 chad fowler <chadfowler@chadfowler.com>
* copyright (c) 2001 alan moore <alan_moore@gmx.net>
* copyright (c) 2001 ed sinjiashvili <slorcim@users.sourceforge.net>
* copyright (c) 2001-2004 jan arne petersen <jpetersen@uni-bonn.de>
* copyright (c) 2002 benoit cerrina <b.cerrina@wanadoo.fr>
* copyright (c) 2002-2006 thomas e enebo <enebo@acm.org>
* copyright (c) 2002-2004 anders bengtsson <ndrsbngtssn@yahoo.se>
* copyright (c) 2004 stefan matthias aust <sma@3plus4.de>
* copyright (c) 2005 charles o nutter <headius@headius.com>
* copyright (c) 2006 miguel covarrubias <mlcovarrubias@gmail.com>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby
import static org jruby rubyenumerator enumeratorize
import java io ioexception
import java util list
import org jcodings encoding
import org jruby anno jrubyclass
import org jruby anno jrubymethod
import org jruby exceptions jumpexception
import org jruby exceptions raiseexception
import org jruby javasupport util runtimehelpers
import org jruby runtime arity
import org jruby runtime block
import org jruby runtime blockbody
import org jruby runtime blockcallback
import org jruby runtime callblock
import org jruby runtime classindex
import org jruby runtime objectallocator
import org jruby runtime objectmarshal
import org jruby runtime threadcontext
import static org jruby runtime visibility
import static org jruby compatversion
import org jruby runtime builtin irubyobject
import org jruby runtime builtin variable
import org jruby runtime component variableentry
import org jruby runtime marshal marshalstream
import org jruby runtime marshal unmarshalstream
import org jruby util bytelist
import org jruby util typeconverter
import static org jruby javasupport util runtimehelpers invokedynamic
import static org jruby runtime methodindex hash
import static org jruby runtime methodindex op_cmp
/**
* @author jpetersen
*/
@jrubyclass name    include
public class rubyrange extends rubyobject
private irubyobject begin
private irubyobject end
private boolean isexclusive
public static rubyclass createrangeclass ruby runtime
rubyclass result   runtime defineclass    runtime getobject    range_allocator
runtime setrange result
result index   classindex range
result setreifiedclass rubyrange class
result kindof   new rubymodule kindof
public boolean iskindof irubyobject obj  rubymodule type
return obj instanceof rubyrange
result setmarshal range_marshal
result includemodule runtime getenumerable
result defineannotatedmethods rubyrange class
return result
private static final objectallocator range_allocator   new objectallocator
public irubyobject allocate ruby runtime  rubyclass klass
return new rubyrange runtime  klass
private rubyrange ruby runtime  rubyclass klass
super runtime  klass
begin   end   runtime getnil
public static rubyrange newrange ruby runtime  threadcontext context  irubyobject begin  irubyobject end  boolean isexclusive
rubyrange range   new rubyrange runtime  runtime getrange
range init context  begin  end  isexclusive
return range
public static rubyrange newexclusiverange ruby runtime  threadcontext context  irubyobject begin  irubyobject end
rubyrange range   new rubyrange runtime  runtime getrange
range init context  begin  end  true
return range
public static rubyrange newinclusiverange ruby runtime  threadcontext context  irubyobject begin  irubyobject end
rubyrange range   new rubyrange runtime  runtime getrange
range init context  begin  end  false
return range
@override
public void copyspecialinstancevariables irubyobject clone
rubyrange range    rubyrange clone
range begin   begin
range end   end
range isexclusive   isexclusive
final boolean checkbegin long length
long beg   rubynumeric num2long this begin
if beg < 0
beg    length
if beg < 0
return false
else if length < beg
return false
return true
final long beglen long len  int err
long beg   rubynumeric num2long this begin
long end   rubynumeric num2long this end
if  beg < 0
beg    len
if  beg < 0
if  err    0  throw getruntime   newrangeerror beg        isexclusive ?          end
return null
if  err    0    err    2
if  beg > len
if  err    0  throw getruntime   newrangeerror beg        isexclusive ?          end
return null
if  end > len  end   len
if  end < 0  end    len
if   isexclusive  end
len   end   beg
if  len < 0  len   0
return new long beg  len
final int beglenint int len  int err
int beg   rubynumeric num2int this begin
int end   rubynumeric num2int this end
if  beg < 0
beg    len
if  beg < 0
if  err    0  throw getruntime   newrangeerror beg        isexclusive ?          end
return null
if  err    0    err    2
if  beg > len
if  err    0  throw getruntime   newrangeerror beg        isexclusive ?          end
return null
if  end > len  end   len
if  end < 0  end    len
if   isexclusive  end
len   end   beg
if  len < 0  len   0
return new int beg  len
private void init threadcontext context  irubyobject begin  irubyobject end  boolean isexclusive
if    begin instanceof rubyfixnum    end instanceof rubyfixnum
try
irubyobject result   invokedynamic context  begin  op_cmp  end
if  result isnil    throw getruntime   newargumenterror
catch  raiseexception re
throw getruntime   newargumenterror
this begin   begin
this end   end
this isexclusive   isexclusive
@jrubymethod required   2  optional   1  visibility   private
public irubyobject initialize threadcontext context  irubyobject args  block unusedblock
if   begin isnil       end isnil
throw getruntime   newnameerror
init context  args  args  args length > 2    args istrue
return getruntime   getnil
@jrubymethod name
public irubyobject first
return begin
@jrubymethod name
public irubyobject last
return end
@jrubymethod name
public rubyfixnum hash threadcontext context
long hash   isexclusive ? 1   0
long h   hash
long v   invokedynamic context  begin  hash  converttointeger   getlongvalue
hash ^  v << 1
v   invokedynamic context  end  hash  converttointeger   getlongvalue
hash ^  v << 9
hash ^  h << 24
return getruntime   newfixnum hash
private static byte dotdotdot     getbytes
private static byte dotdot     getbytes
@jrubymethod name
public irubyobject inspect threadcontext context
rubystring str   inspect context  begin  strdup context getruntime
rubystring str2   inspect context  end
str cat isexclusive ? dotdotdot   dotdot
str concat str2
str infectby str2
return str
@jrubymethod name
public irubyobject to_s threadcontext context
rubystring str   rubystring objasstring context  begin  strdup context getruntime
rubystring str2   rubystring objasstring context  end
str cat isexclusive ? dotdotdot   dotdot
str concat str2
str infectby str2
return str
@jrubymethod name
public rubyboolean exclude_end_p
return getruntime   newboolean isexclusive
@jrubymethod name      required   1
public irubyobject op_equal threadcontext context  irubyobject other
if  this    other  return getruntime   gettrue
if    other instanceof rubyrange   return getruntime   getfalse
rubyrange otherrange    rubyrange  other
if  equalinternal context  begin  otherrange begin
equalinternal context  end  otherrange end
isexclusive    otherrange isexclusive  return getruntime   gettrue
return getruntime   getfalse
@jrubymethod name      required   1
public irubyobject eql_p threadcontext context  irubyobject other
if  this    other  return getruntime   gettrue
if    other instanceof rubyrange   return getruntime   getfalse
rubyrange otherrange    rubyrange other
if  eqlinternal context  begin  otherrange begin
eqlinternal context  end  otherrange end
isexclusive    otherrange isexclusive  return getruntime   gettrue
return getruntime   getfalse
private static abstract class rangecallback
abstract void call threadcontext context  irubyobject arg
private static final class stepblockcallback extends rangecallback implements blockcallback
final block block
irubyobject iter
final irubyobject step
stepblockcallback block block  irubyobject iter  irubyobject step
this block   block
this iter   iter
this step   step
public irubyobject call threadcontext context  irubyobject args  block originalblock
call context  args
return context getruntime   getnil
void call threadcontext context  irubyobject arg
if  iter instanceof rubyfixnum
iter   rubyfixnum newfixnum context getruntime      rubyfixnum iter  getlongvalue     1
else
iter   iter callmethod context     rubyfixnum one context getruntime
if  iter    rubyfixnum zero context getruntime
block yield context  arg
iter   step
private irubyobject rangelt threadcontext context  irubyobject a  irubyobject b
irubyobject result   invokedynamic context  a  op_cmp  b
if  result isnil    return null
return rubycomparable cmpint context  result  a  b  < 0 ? getruntime   gettrue     null
private irubyobject rangele threadcontext context  irubyobject a  irubyobject b
irubyobject result   invokedynamic context  a  op_cmp  b
if  result isnil    return null
int c   rubycomparable cmpint context  result  a  b
if  c    0  return rubyfixnum zero getruntime
return c < 0 ? getruntime   gettrue     null
private void rangeeach threadcontext context  rangecallback callback
irubyobject v   begin
if  isexclusive
while  rangelt context  v  end     null
callback call context  v
v   v callmethod context
else
irubyobject c
while   c   rangele context  v  end      null    c istrue
callback call context  v
if  c    rubyfixnum zero getruntime     break
v   v callmethod context
@jrubymethod
public irubyobject to_a threadcontext context  final block block
final ruby runtime   context getruntime
if  begin instanceof rubyfixnum    end instanceof rubyfixnum
long lim     rubyfixnum  end  getlongvalue
if   isexclusive  lim
long base     rubyfixnum  begin  getlongvalue
long size   lim   base
if  size > integer max_value
throw runtime newrangeerror
if  size < 0  return rubyarray newemptyarray runtime
irubyobject array   new irubyobject
for  int i   0  i < size  i
array   rubyfixnum newfixnum runtime  base   i
return rubyarray newarraynocopy runtime  array
else
return rubyenumerable to_a context  this
@jrubymethod compat   ruby1_8
public irubyobject each threadcontext context  final block block
final ruby runtime   context getruntime
if   block isgiven    return enumeratorize runtime  this
if  begin instanceof rubyfixnum    end instanceof rubyfixnum
fixnumeach context  runtime  block
else if  begin instanceof rubystring
rubystring  begin  uptocommon18 context  end  isexclusive  block
else
if   begin respondsto     throw getruntime   newtypeerror
begin getmetaclass   getname
rangeeach context  new rangecallback
@override
void call threadcontext context  irubyobject arg
block yield context  arg
return this
private void fixnumeach threadcontext context  ruby runtime  block block
long lim     rubyfixnum  end  getlongvalue
if   isexclusive  lim
if  block getbody   getargumenttype      blockbody zero_args
final irubyobject nil   runtime getnil
for  long i     rubyfixnum  begin  getlongvalue    i < lim  i
block yield context  nil
else
for  long i     rubyfixnum  begin  getlongvalue    i < lim  i
block yield context  rubyfixnum newfixnum runtime  i
@jrubymethod name      compat   ruby1_9
public irubyobject each19 final threadcontext context  final block block
ruby runtime   context getruntime
if   block isgiven    return enumeratorize runtime  this
if  begin instanceof rubyfixnum    end instanceof rubyfixnum
fixnumeach context  runtime  block
else if  begin instanceof rubystring
rubystring  begin  uptocommon19 context  end  isexclusive  block
else if  begin instanceof rubysymbol
begin asstring   uptocommon19 context  end asstring    isexclusive  block  true
else
if   begin respondsto     throw getruntime   newtypeerror
begin getmetaclass   getname
rangeeach context  new rangecallback
@override
void call threadcontext context  irubyobject arg
block yield context  arg
return this
@jrubymethod compat   ruby1_8
public irubyobject step threadcontext context  irubyobject step  block block
return block isgiven   ? stepcommon context  step  block    enumeratorize context getruntime    this     step
@jrubymethod compat   ruby1_8
public irubyobject step threadcontext context  block block
return block isgiven   ? stepcommon context  rubyfixnum one context getruntime     block     enumeratorize context getruntime    this
private irubyobject stepcommon threadcontext context  irubyobject step  block block
final ruby runtime   context getruntime
long unit   rubynumeric num2long step
if  unit < 0  throw runtime newargumenterror
if  begin instanceof rubyfixnum    end instanceof rubyfixnum
if  unit    0  throw runtime newargumenterror
fixnumstep context  runtime  unit  block
else
irubyobject tmp   begin checkstringtype
if   tmp isnil
if  unit    0  throw runtime newargumenterror
// rb_iterate((value(*)_((value)))str_step, (value)args, step_i, (value)iter);
stepblockcallback callback   new stepblockcallback block  rubyfixnum one runtime   step
block blockcallback   callblock newcallclosure this  runtime getrange    arity singleargument    callback  context
rubystring tmp  uptocommon18 context  end  isexclusive  blockcallback
else if  begin instanceof rubynumeric
if  equalinternal context  step  rubyfixnum zero runtime    throw runtime newargumenterror
numericstep context  runtime  step  block
else
if  unit    0  throw runtime newargumenterror
if   begin respondsto     throw runtime newtypeerror     begin getmetaclass   getname
// range_each_func(range, step_i, b, e, args);
rangeeach context  new stepblockcallback block  rubyfixnum one runtime   step
return this
private void fixnumstep threadcontext context  ruby runtime  long unit  block block
long e     rubyfixnum end  getlongvalue
if   isexclusive  e
for  long i     rubyfixnum begin  getlongvalue    i < e  i    unit
block yield context  rubyfixnum newfixnum runtime  i
private void numericstep threadcontext context  ruby runtime  irubyobject step  block block
final string method   isexclusive ?
irubyobject beg   begin
while  beg callmethod context  method  end  istrue
block yield context  beg
beg   beg callmethod context     step
@jrubymethod name      compat   ruby1_9
public irubyobject step19 final threadcontext context  final block block
return block isgiven   ? stepcommon19 context  rubyfixnum one context getruntime     block    enumeratorize context getruntime    this
@jrubymethod name      compat   ruby1_9
public irubyobject step19 final threadcontext context  irubyobject step  final block block
ruby runtime   context getruntime
if   block isgiven    return enumeratorize runtime  this     step
if    step instanceof rubynumeric   step   step converttointeger
irubyobject zero   rubyfixnum zero runtime
if  step callmethod context     zero  istrue    throw runtime newargumenterror
if   step callmethod context     zero  istrue    throw runtime newargumenterror
return stepcommon19 context  step  block
private irubyobject stepcommon19 threadcontext context  irubyobject step  block block
ruby runtime   context getruntime
if  begin instanceof rubyfixnum    end instanceof rubyfixnum    step instanceof rubyfixnum
fixnumstep context  runtime    rubyfixnum step  getlongvalue    block
else if  begin instanceof rubyfloat    end instanceof rubyfloat    step instanceof rubyfloat
rubynumeric floatstep19 context  runtime  begin  end  step  isexclusive  block
else if  begin instanceof rubynumeric
typeconverter checkintegertype runtime  begin     isnil
typeconverter checkintegertype runtime  end     isnil
numericstep19 context  runtime  step  block
else
irubyobject tmp   begin checkstringtype
if   tmp isnil
stepblockcallback callback   new stepblockcallback block  rubyfixnum one runtime   step
block blockcallback   callblock newcallclosure this  runtime getrange    arity singleargument    callback  context
rubystring tmp  uptocommon19 context  end  isexclusive  blockcallback
else
if   begin respondsto     throw runtime newtypeerror     begin getmetaclass   getname
// range_each_func(range, step_i, b, e, args);
rangeeach context  new stepblockcallback block  rubyfixnum one runtime   step
return this
private void numericstep19 threadcontext context  ruby runtime  irubyobject step  block block
final string method   isexclusive ?
irubyobject beg   begin
long i   0
while  beg callmethod context  method  end  istrue
block yield context  beg
i
beg   begin callmethod context     rubyfixnum newfixnum runtime  i  callmethod context     step
@jrubymethod name              required   1  compat   ruby1_8
public rubyboolean include_p threadcontext context  irubyobject obj
if  rangele context  begin  obj     null
if  isexclusive
if  rangelt context  obj  end     null  return context getruntime   gettrue
else
if  rangele context  obj  end     null  return context getruntime   gettrue
return context getruntime   getfalse
// framed for invokesuper
@jrubymethod name           frame   true  compat   ruby1_9
public irubyobject include_p19 threadcontext context  irubyobject obj
ruby runtime   context getruntime
if  begin instanceof rubynumeric    end instanceof rubynumeric
typeconverter converttotypewithcheck begin  runtime getinteger       isnil
typeconverter converttotypewithcheck end  runtime getinteger       isnil
if  rangele context  begin  obj     null
if  isexclusive
if  rangelt context  obj  end     null  return runtime gettrue
else
if  rangele context  obj  end     null  return runtime gettrue
return runtime getfalse
else if  begin instanceof rubystring    end instanceof rubystring
rubystring  begin  getbytelist   getrealsize      1
rubystring  end  getbytelist   getrealsize      1
if  obj isnil    return runtime getfalse
if  obj instanceof rubystring
bytelist vbytes     rubystring obj  getbytelist
if  vbytes getrealsize      1  return runtime getfalse
int v   vbytes getunsafebytes     0xff
bytelist bbytes     rubystring begin  getbytelist
int b   bbytes getunsafebytes     0xff
bytelist ebytes     rubystring end  getbytelist
int e   ebytes getunsafebytes     0xff
if  encoding isascii v     encoding isascii b     encoding isascii e
if   b <  v    v < e       isexclusive    v    e   return runtime gettrue
return runtime getfalse
return runtimehelpers invokesuper context  this  obj  block null_block
@jrubymethod name      compat   ruby1_9
public irubyobject eqq_p19 threadcontext context  irubyobject obj
return callmethod context     obj
@jrubymethod name      compat   ruby1_9
public irubyobject cover_p threadcontext context  irubyobject obj
return include_p context  obj      1 8
@jrubymethod compat   ruby1_9  frame   true
public irubyobject min threadcontext context  block block
if  block isgiven
return runtimehelpers invokesuper context  this  block
else
int c   rubycomparable cmpint context  invokedynamic context  begin  op_cmp  end   begin  end
if  c > 0     c    0    isexclusive   return context getruntime   getnil
return begin
@jrubymethod compat   ruby1_9  frame   true
public irubyobject max threadcontext context  block block
if  begin callmethod context     end  istrue
return context getruntime   getnil
if  block isgiven      isexclusive      end instanceof rubynumeric
return runtimehelpers invokesuper context  this  block
else
int c   rubycomparable cmpint context  invokedynamic context  begin  op_cmp  end   begin  end
ruby runtime   context getruntime
if  isexclusive
if    end instanceof rubyinteger   throw runtime newtypeerror
if  c    0  return runtime getnil
if  end instanceof rubyfixnum  return rubyfixnum newfixnum runtime    rubyfixnum end  getlongvalue     1
return end callmethod context     rubyfixnum one runtime
return end
@jrubymethod name      compat   ruby1_9
public irubyobject first threadcontext context
return begin
@jrubymethod name      compat   ruby1_9
public irubyobject first threadcontext context  irubyobject arg
final ruby runtime   context getruntime
final int num   rubynumeric num2int arg
final rubyarray result   runtime newarray num
try
rubyenumerable calleach runtime  context  this  arity one_argument  new blockcallback
int n   num
public irubyobject call threadcontext ctx  irubyobject largs  block blk
if  n   <  0  throw jumpexception special_jump
result append largs
return runtime getnil
catch  jumpexception specialjump sj
return result
@jrubymethod name      compat   ruby1_9
public irubyobject last threadcontext context
return end
@jrubymethod name      compat   ruby1_9
public irubyobject last threadcontext context  irubyobject arg
return   rubyarray rubykernel new_array context  this  this   last arg
private static final objectmarshal range_marshal   new objectmarshal
public void marshalto ruby runtime  object obj  rubyclass type
marshalstream marshalstream  throws ioexception
rubyrange range    rubyrange obj
marshalstream registerlinktarget range
list<variable<object>> attrs   range getvariablelist
attrs add new variableentry<object>    range begin
attrs add new variableentry<object>    range end
attrs add new variableentry<object>    range isexclusive ? runtime gettrue     runtime getfalse
marshalstream dumpvariables attrs
public object unmarshalfrom ruby runtime  rubyclass type
unmarshalstream unmarshalstream  throws ioexception
rubyrange range    rubyrange type allocate
unmarshalstream registerlinktarget range
// fixme: maybe we can just gank these off the line directly?
unmarshalstream defaultvariablesunmarshal range
range begin    irubyobject range removeinternalvariable
range end    irubyobject range removeinternalvariable
range isexclusive     irubyobject range removeinternalvariable     istrue
return range