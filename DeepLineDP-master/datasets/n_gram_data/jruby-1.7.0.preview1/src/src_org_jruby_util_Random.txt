/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby util
import java math biginteger
import java util arrays
public class random
public static int n   624
private static int m   397
private static int matrix_a   0x9908b0df     constant vector a
private static int umask   0x80000000     most significant w r bits
private static int lmask   0x7fffffff     least significant r bits
private static int mixbits int u  int v
return  u   umask     v   lmask
private static int twist int u  int v
return  mixbits u  v  >>> 1  ^    v   1     0  ? matrix_a   0
private final int state   new int
private int left   1
public random int s
initgenrand s
public random int initkey
initbyarray initkey
public random random orig
system arraycopy orig state  0  this state  0  this state length
this left   orig left
public random int state  int left
if  state length    this state length
throw new illegalstateexception     state length
system arraycopy state  0  this state  0  this state length
this left   left
@override
public boolean equals object obj
if  this    obj
return true
else if    obj instanceof random
return false
random rhs    random  obj
return  left    rhs left     arrays equals state  rhs state
@override
public int hashcode
// using 17 as the initializer, 37 as the multiplier.
return  629   left    37   state hashcode
private void initgenrand int s
state   s
for  int j   1  j < n  j
state    1812433253    state ^  state >>> 30     j
left   1
private void initbyarray int initkey
initgenrand 19650218
int len   initkey length
int i   1
int j   0
int k   n > len ? n   len
for    k > 0  k
state    state ^   state ^  state >>> 30     1664525     initkey
j
i
j
if  i >  n
state   state
i   1
if  j >  len
j   0
for  k   n   1  k > 0  k
state    state ^   state ^  state >>> 30     1566083941     i
i
if  i >  n
state   state
i   1
state   0x80000000
private void nextstate
int p   0
left   n
for  int j   n   m   1    j > 0  p
state   state ^ twist state  state
for  int j   m    j > 0  p
state   state ^ twist state  state
state   state ^ twist state  state
public int genrandint32
if    left <  0
nextstate
int y   state
/* tempering */
y ^   y >>> 11
y ^   y << 7    0x9d2c5680l
y ^   y << 15    0xefc60000l
y ^   y >>> 18
return y
public double genrandreal
int a   genrandint32   >>> 5
int b   genrandint32   >>> 6
return  a   67108864 0   b     1 0   9007199254740992 0
public double genrandreal2
int a   genrandint32
int b   genrandint32
return intpairtorealinclusive a  b
private static final biginteger intpair_const   biginteger valueof  1l << 53    1
private static final double ldexp_const   math pow 2 0   53
// c: ldexp((a<< 32)|b) * ((1<<53)+1) >> 64, -53)
// todo: not enough prec...
private double intpairtorealinclusive int a  int b
biginteger c   biginteger valueof a   0xffffffffl
biginteger d   biginteger valueof b   0xffffffffl
return c shiftleft 32  or d  multiply intpair_const  shiftright 64  doublevalue
ldexp_const
public int getstate
return state
public int getleft
return left