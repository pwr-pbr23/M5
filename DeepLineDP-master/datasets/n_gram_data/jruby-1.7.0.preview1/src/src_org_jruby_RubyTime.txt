/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2001 chad fowler <chadfowler@chadfowler.com>
* copyright (c) 2001-2004 jan arne petersen <jpetersen@uni-bonn.de>
* copyright (c) 2002 benoit cerrina <b.cerrina@wanadoo.fr>
* copyright (c) 2002-2004 anders bengtsson <ndrsbngtssn@yahoo.se>
* copyright (c) 2004 joey gibson <joey@joeygibson.com>
* copyright (c) 2004 charles o nutter <headius@headius.com>
* copyright (c) 2004 stefan matthias aust <sma@3plus4.de>
* copyright (c) 2006 thomas e enebo <enebo@acm.org>
* copyright (c) 2006 ola bini <ola.bini@ki.se>
* copyright (c) 2006 miguel covarrubias <mlcovarrubias@gmail.com>
* copyright (c) 2009 joseph lafata <joe@quibb.org>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby
import java util calendar
import java util date
import java util gregoriancalendar
import java util hashmap
import java util locale
import java util map
import java util timezone
import java util regex matcher
import java util regex pattern
import org joda time datetime
import org joda time datetimezone
import org joda time format datetimeformat
import org joda time format datetimeformatter
import org jruby anno jrubyclass
import org jruby anno jrubymethod
import org jruby runtime block
import org jruby runtime classindex
import org jruby runtime objectallocator
import org jruby runtime threadcontext
import static org jruby runtime visibility private
import org jruby runtime builtin irubyobject
import org jruby util bytelist
import org jruby util rubydateformat
import static org jruby compatversion
import static org jruby javasupport util runtimehelpers invokedynamic
import static org jruby runtime methodindex op_cmp
/** the time class.
*
* @author chadfowler, jpetersen
*/
@jrubyclass name    include
public class rubytime extends rubyobject
public static final string utc
private datetime dt
private long nsec
private final static datetimeformatter one_day_ctime_formatter   datetimeformat forpattern    withlocale locale english
private final static datetimeformatter two_day_ctime_formatter   datetimeformat forpattern    withlocale locale english
private final static datetimeformatter to_s_formatter   datetimeformat forpattern    withlocale locale english
private final static datetimeformatter to_s_utc_formatter   datetimeformat forpattern    withlocale locale english
private final static datetimeformatter to_s_formatter_19   datetimeformat forpattern    withlocale locale english
private final static datetimeformatter to_s_utc_formatter_19   datetimeformat forpattern    withlocale locale english
// there are two different popular tz formats: legacy (ast+3:00:00, gmt-3), and
// newer one (us/pacific, america/los_angeles). this pattern is to detect
// the legacy tz format in order to convert it to the newer format
// understood by java api.
private static final pattern tz_pattern
pattern compile
private static final pattern time_offset_pattern
pattern compile
private static final bytelist tz_string   bytelist create
/* jruby-3560
* joda-time disallows use of three-letter time zone ids.
* since mri accepts these values, we need to translate them.
*/
private static final map<string  string> long_tzname   new hashmap<string  string>
put           jruby 2579
put           republic of china
put           western european time
/* some tz values need to be overriden for time#zone
*/
private static final map<string  string> short_std_tzname   new hashmap<string  string>
put
put           needs to be overriden
put
private static final map<string  string> short_dl_tzname   new hashmap<string  string>
put
put           needs to be overriden
put
@override
public int getnativetypeindex
return classindex time
private static irubyobject getenvtimezone ruby runtime
rubystring tzvar   runtime newstring tz_string
rubyhash h     rubyhash runtime getobject   getconstant
irubyobject tz   h op_aref runtime getcurrentcontext    tzvar
return tz
public static datetimezone getlocaltimezone ruby runtime
irubyobject tz   getenvtimezone runtime
if  tz    null       tz instanceof rubystring
return datetimezone getdefault
else
return gettimezone runtime  tz tostring
public static datetimezone gettimezone ruby runtime  string zone
datetimezone cachedzone   runtime gettimezonecache   get zone
if  cachedzone    null  return cachedzone
string originalzone   zone
timezone tz   timezone gettimezone getenvtimezone runtime  tostring
// value of "tz" property is of a bit different format,
// which confuses the java's timezone.gettimezone(id) method,
// and so, we need to convert it.
matcher tzmatcher   tz_pattern matcher zone
if  tzmatcher matches
string sign   tzmatcher group 2
string hours   tzmatcher group 3
string minutes   tzmatcher group 4
// gmt+00:00 --> etc/gmt, see "mri behavior"
// comment below.
if     equals hours       equals hours
minutes    null      equals minutes       equals minutes
zone
else
// invert the sign, since tz format and java format
// use opposite signs, sigh... also, java api requires
// the sign to be always present, be it "+" or "-".
sign      equals sign ?
// always use "gmt" since that's required by java api.
zone       sign   hours
if  minutes    null
zone    minutes
tz   timezone gettimezone zone
else
if  long_tzname containskey zone   tz setid long_tzname get zone touppercase
// mri behavior: with tz equal to "gmt" or "utc", time.now
// is *not* considered as a proper gmt/utc time:
//   env['tz']="gmt"
//   time.now.gmt? ==> false
//   env['tz']="utc"
//   time.now.utc? ==> false
// hence, we need to adjust for that.
if    equalsignorecase zone       equalsignorecase zone
zone       zone
tz   timezone gettimezone zone
datetimezone dtz   datetimezone fortimezone tz
runtime gettimezonecache   put originalzone  dtz
return dtz
public rubytime ruby runtime  rubyclass rubyclass
super runtime  rubyclass
public rubytime ruby runtime  rubyclass rubyclass  datetime dt
super runtime  rubyclass
this dt   dt
private static objectallocator time_allocator   new objectallocator
public irubyobject allocate ruby runtime  rubyclass klass
datetimezone dtz   getlocaltimezone runtime
datetime dt   new datetime dtz
rubytime rt    new rubytime runtime  klass  dt
rt setnsec 0
return rt
public static rubyclass createtimeclass ruby runtime
rubyclass timeclass   runtime defineclass    runtime getobject    time_allocator
timeclass index   classindex time
timeclass setreifiedclass rubytime class
runtime settime timeclass
timeclass includemodule runtime getcomparable
timeclass defineannotatedmethods rubytime class
return timeclass
public void setnsec long nsec
this nsec   nsec
public long getnsec
return nsec
public void setusec long usec
this nsec   1000   usec
public long getusec
return nsec   1000
public void updatecal datetime dt
this dt   dt
protected long gettimeinmillis
return dt getmillis
public static rubytime newtime ruby runtime  long milliseconds
return newtime runtime  new datetime milliseconds
public static rubytime newtime ruby runtime  datetime dt
return new rubytime runtime  runtime gettime    dt
public static rubytime newtime ruby runtime  datetime dt  long nsec
rubytime t   new rubytime runtime  runtime gettime    dt
t setnsec nsec
return t
@override
public class<?> getjavaclass
return date class
@jrubymethod name      required   1
@override
public irubyobject initialize_copy irubyobject original
if    original instanceof rubytime
throw getruntime   newtypeerror
rubytime originaltime    rubytime  original
// we can just use dt, since it is immutable
dt   originaltime dt
nsec   originaltime nsec
return this
@jrubymethod name
public rubytime succ
return newtime getruntime   dt plusseconds 1
@jrubymethod name
public rubytime gmtime
dt   dt withzone datetimezone utc
return this
@jrubymethod name
public rubytime localtime
dt   dt withzone getlocaltimezone getruntime
return this
@jrubymethod name      optional   1  compat   ruby1_9
public rubytime localtime19 threadcontext context  irubyobject args
if  args length    0  return localtime
string offset   args asjavastring
matcher offsetmatcher   time_offset_pattern matcher offset
if    offsetmatcher matches
throw context getruntime   newargumenterror   hh mm   hh mm
string sign   offsetmatcher group 1
string hours   offsetmatcher group 2
string minutes   offsetmatcher group 3
string zone
if    equals hours       equals minutes
zone
else
// java needs the sign inverted
string sgn     equals sign  ?
zone       sgn   hours   minutes
datetimezone dtz   gettimezone context getruntime    zone
return newtime context getruntime    dt withzone dtz   nsec
@jrubymethod name
public rubyboolean gmt
return getruntime   newboolean dt getzone   getid   equals
@jrubymethod name
public rubytime getgm
return newtime getruntime    dt withzone datetimezone utc   getusec
@jrubymethod name
public rubytime getlocal
return newtime getruntime    dt withzone getlocaltimezone getruntime      getusec
@jrubymethod name      required   1
public rubystring strftime irubyobject format
final rubydateformat rubydateformat   new rubydateformat    locale us  getruntime   is1_9
rubydateformat applypattern format converttostring   getunicodevalue
rubydateformat setdatetime dt
rubydateformat setnsec nsec
string result   rubydateformat format null
return getruntime   newstring result
@jrubymethod name      required   1  compat  compatversion ruby1_9
public irubyobject op_equal threadcontext context  irubyobject other
if  other isnil
return rubyboolean newboolean getruntime    false
else if  other instanceof rubytime
return getruntime   newboolean cmp  rubytime  other     0
return rubycomparable op_equal context  this  other
@jrubymethod name      required   1
public irubyobject op_ge threadcontext context  irubyobject other
if  other instanceof rubytime
return getruntime   newboolean cmp  rubytime  other  >  0
return rubycomparable op_ge context  this  other
@jrubymethod name      required   1
public irubyobject op_gt threadcontext context  irubyobject other
if  other instanceof rubytime
return getruntime   newboolean cmp  rubytime  other  > 0
return rubycomparable op_gt context  this  other
@jrubymethod name      required   1
public irubyobject op_le threadcontext context  irubyobject other
if  other instanceof rubytime
return getruntime   newboolean cmp  rubytime  other  <  0
return rubycomparable op_le context  this  other
@jrubymethod name      required   1
public irubyobject op_lt threadcontext context  irubyobject other
if  other instanceof rubytime
return getruntime   newboolean cmp  rubytime  other  < 0
return rubycomparable op_lt context  this  other
private int cmp rubytime other
ruby runtime   getruntime
long millis   gettimeinmillis
long millis_other   other gettimeinmillis
// ignore < usec on 1.8
long nsec   runtime is1_9   ? this nsec    this nsec   1000   1000
long nsec_other   runtime is1_9   ? other nsec    other nsec   1000   1000
if  millis > millis_other     millis    millis_other    nsec > nsec_other
return 1
else if  millis < millis_other     millis    millis_other    nsec < nsec_other
return  1
return 0
@jrubymethod name      required   1  compat   compatversion ruby1_8
public irubyobject op_plus irubyobject other
if  other instanceof rubytime
throw getruntime   newtypeerror
long adjustment   math round rubynumeric num2dbl other    1000000
return opplusmicros adjustment
@jrubymethod name      required   1  compat   compatversion ruby1_9
public irubyobject op_plus19 threadcontext context  irubyobject other
checkopcoercion context  other
if  other instanceof rubytime
throw getruntime   newtypeerror
other   other callmethod context
long adjustnanos    long  rubynumeric num2dbl other    1000000000
return opplusnanos adjustnanos
private irubyobject opplusmicros long adjustmicros
long adjustnanos   adjustmicros   1000
long currentnanos   gettimeinmillis     1000000   nsec
long newnanos   currentnanos    adjustnanos
long newmillispart   newnanos   1000000
long newnanospart   newnanos % 1000000
rubytime newtime   new rubytime getruntime    getmetaclass
newtime dt   new datetime newmillispart  withzone dt getzone
newtime setnsec newnanospart
return newtime
private irubyobject opplusnanos long adjustnanos
double currentnanos   gettimeinmillis     1000000   nsec
double newnanos   currentnanos   adjustnanos
double newmillispart   newnanos   1000000
double newnanospart   newnanos % 1000000
rubytime newtime   new rubytime getruntime    getmetaclass
newtime dt   new datetime  long newmillispart  withzone dt getzone
newtime setnsec  long newnanospart
return newtime
private void checkopcoercion threadcontext context  irubyobject other
if  other instanceof rubystring
throw context getruntime   newtypeerror
else if  other isnil
throw context getruntime   newtypeerror
else if   other respondsto
throw context getruntime   newtypeerror     other getmetaclass   getbasename
private irubyobject opminus rubytime other
long time   gettimeinmillis     1000000   getnsec
time    other gettimeinmillis     1000000   other getnsec
return rubyfloat newfloat getruntime    time   1000000000 0      float number of seconds
@jrubymethod name      required   1  compat   compatversion ruby1_8
public irubyobject op_minus irubyobject other
if  other instanceof rubytime  return opminus  rubytime  other
return opminuscommon other
@jrubymethod name      required   1  compat   compatversion ruby1_9
public irubyobject op_minus19 threadcontext context  irubyobject other
checkopcoercion context  other
if  other instanceof rubytime  return opminus  rubytime  other
return opminuscommon other callmethod context
private irubyobject opminuscommon irubyobject other
long time   gettimeinmillis
long adjustment   math round rubynumeric num2dbl other    1000000
long nano    adjustment % 1000    1000
adjustment   adjustment   1000
time    adjustment
if  getnsec   < nano
time
nano   1000000    nano   getnsec
else
nano   getnsec     nano
rubytime newtime   new rubytime getruntime    getmetaclass
newtime dt   new datetime time  withzone dt getzone
newtime setnsec nano
return newtime
@jrubymethod name      required   1
@override
public irubyobject op_eqq threadcontext context  irubyobject other
return  rubynumeric fix2int invokedynamic context  this  op_cmp  other      0  ? getruntime   gettrue     getruntime   getfalse
@jrubymethod name      required   1
public irubyobject op_cmp threadcontext context  irubyobject other
if  other instanceof rubytime
return context getruntime   newfixnum cmp  rubytime  other
return context getruntime   getnil
@jrubymethod name      required   1
@override
public irubyobject eql_p irubyobject other
if  other instanceof rubytime
rubytime othertime    rubytime other
return  nsec    othertime nsec    gettimeinmillis      othertime gettimeinmillis    ? getruntime   gettrue     getruntime   getfalse
return getruntime   getfalse
@jrubymethod name
public rubystring asctime
datetimeformatter simpledateformat
if  dt getdayofmonth   < 10
simpledateformat   one_day_ctime_formatter
else
simpledateformat   two_day_ctime_formatter
string result   simpledateformat print dt
return getruntime   newstring result
@jrubymethod name           compat   compatversion ruby1_8
@override
public irubyobject to_s
return inspectcommon to_s_formatter  to_s_utc_formatter
@jrubymethod name           compat   compatversion ruby1_9
public irubyobject to_s19
return inspectcommon to_s_formatter_19  to_s_utc_formatter_19
private irubyobject inspectcommon datetimeformatter formatter  datetimeformatter utcformatter
datetimeformatter simpledateformat
if  dt getzone      datetimezone utc
simpledateformat   utcformatter
else
simpledateformat   formatter
string result   simpledateformat print dt
return getruntime   newstring result
@jrubymethod name
@override
public rubyarray to_a
return getruntime   newarraynocopy new irubyobject   sec    min    hour    mday    month
year    wday    yday    isdst    zone
@jrubymethod name
public rubyfloat to_f
long millis   gettimeinmillis
long nanos   nsec
double secs   0
if  millis    0  secs     millis   1000 0
if  nanos    0  secs     nanos   1000000000 0
return rubyfloat newfloat getruntime    secs
@jrubymethod name
public rubyinteger to_i
return getruntime   newfixnum gettimeinmillis     1000
@jrubymethod name           compat   ruby1_9
public rubyinteger nsec
return getruntime   newfixnum  gettimeinmillis   % 1000    1000000   nsec
@jrubymethod name      compat   compatversion ruby1_9
public irubyobject to_r threadcontext context
irubyobject rational   to_f   to_r context
if  rational instanceof rubyrational
irubyobject denominator     rubyrational rational  denominator context
if  rubynumeric num2long denominator     1
return   rubyrational rational  numerator context
return rational
@jrubymethod name
public rubyinteger usec
return getruntime   newfixnum dt getmillisofsecond     1000   getusec
public void setmicroseconds long mic
long millis   gettimeinmillis   % 1000
long withoutmillis   gettimeinmillis     millis
withoutmillis     mic   1000
dt   dt withmillis withoutmillis
nsec    mic % 1000    1000
public long microseconds
return gettimeinmillis   % 1000   1000   getusec
@jrubymethod name
public rubyinteger sec
return getruntime   newfixnum dt getsecondofminute
@jrubymethod name
public rubyinteger min
return getruntime   newfixnum dt getminuteofhour
@jrubymethod name
public rubyinteger hour
return getruntime   newfixnum dt gethourofday
@jrubymethod name
public rubyinteger mday
return getruntime   newfixnum dt getdayofmonth
@jrubymethod name
public rubyinteger month
return getruntime   newfixnum dt getmonthofyear
@jrubymethod name
public rubyinteger year
return getruntime   newfixnum dt getyear
@jrubymethod name
public rubyinteger wday
return getruntime   newfixnum  dt getdayofweek  %7
@jrubymethod name
public rubyinteger yday
return getruntime   newfixnum dt getdayofyear
@jrubymethod name      compat   compatversion ruby1_9
public irubyobject subsec
ruby runtime   getruntime
long nsec   dt getmillisofsecond     1000000   this nsec
if  nsec % 1000000000    0  return rubyfixnum zero runtime
return runtime newrationalreduced
nsec  1000000000
@jrubymethod name
public rubyinteger gmt_offset
int offset   dt getzone   getoffset dt getmillis
return getruntime   newfixnum  int  offset 1000
@jrubymethod name
public rubyboolean isdst
return getruntime   newboolean  dt getzone   isstandardoffset dt getmillis
@jrubymethod name
public rubystring zone
ruby runtime   getruntime
string envtz   getenvtimezone runtime  tostring
// see declaration of short_tzname
if  short_std_tzname containskey envtz       dt getzone   totimezone   indaylighttime dt todate
return runtime newstring short_std_tzname get envtz
if  short_dl_tzname containskey envtz     dt getzone   totimezone   indaylighttime dt todate
return runtime newstring short_dl_tzname get envtz
string zone   dt getzone   getshortname dt getmillis
matcher offsetmatcher   time_offset_pattern matcher zone
if  offsetmatcher matches
boolean minus_p   offsetmatcher group 1  tostring   equals
int houroffset    integer valueof offsetmatcher group 2
if  zone equals
zone
else
// try non-localized time zone name
zone   dt getzone   getnamekey dt getmillis
if  zone    null
char sign   minus_p ?
zone       sign   houroffset
return runtime newstring zone
public void setdatetime datetime dt
this dt   dt
public datetime getdatetime
return this dt
public date getjavadate
return this dt todate
@jrubymethod name
@override
public rubyfixnum hash
// modified to match how hash is calculated in 1.8.2
return getruntime   newfixnum  int    dt getmillis     1000  ^ microseconds    << 1  >> 1
@jrubymethod name      optional   1
public rubystring dump irubyobject args  block unusedblock
rubystring str    rubystring  mdump
str syncvariables this
return str
public rubyobject mdump
ruby runtime   getruntime
rubytime obj   this
datetime datetime   obj dt todatetime datetimezone utc
byte dumpvalue   new byte
long nanos   this nsec
long usec   this nsec   1000
long nsec   this nsec % 1000
int pe
0x1                                 << 31
obj gmt   istrue   ? 0x1   0x0    << 30
datetime getyear   1900            << 14
datetime getmonthofyear   1        << 10
datetime getdayofmonth              << 5
datetime gethourofday
int se
datetime getminuteofhour            << 26
datetime getsecondofminute          << 20
datetime getmillisofsecond     1000    int usec      dump usec  not msec
for int i   0  i < 4  i
dumpvalue    byte  pe   0xff
pe >>>  8
for int i   4  i < 8  i
dumpvalue    byte  se   0xff
se >>>  8
rubystring string   rubystring newstring obj getruntime    new bytelist dumpvalue
// 1.9 includes more nsecs
if  runtime is1_9
copyinstancevariablesinto string
// nanos in numerator/denominator form
if  nsec    0
string setinternalvariable    runtime newfixnum nsec
string setinternalvariable    runtime newfixnum 1
// submicro for 1.9.1 compat
byte submicro   new byte
int len   2
submicro    byte   nsec % 10  << 4
nsec    10
submicro    byte  nsec % 10
nsec    10
submicro     byte   nsec % 10  << 4
if  submicro    0  len   1
string setinternalvariable    rubystring newstring runtime  submicro  0  len
// time zone
if  dt getzone      datetimezone utc
long offset   dt getzone   getoffset dt getmillis
string setinternalvariable    runtime newfixnum offset   1000
return string
@jrubymethod visibility   private
public irubyobject initialize block block
return this
/* time class methods */
public static irubyobject s_new irubyobject recv  irubyobject args  block block
ruby runtime   recv getruntime
rubytime time   new rubytime runtime   rubyclass  recv  new datetime getlocaltimezone runtime
time callinit args block
return time
/**
* @deprecated use {@link #newinstance(threadcontext, irubyobject)}
*/
@deprecated
public static irubyobject newinstance threadcontext context  irubyobject recv  irubyobject args  block block
return newinstance context  recv
@jrubymethod name      meta   true  compat   compatversion ruby1_8
public static irubyobject times threadcontext context  irubyobject recv
context getruntime   getwarnings   warn
return rubyprocess times context  recv  block null_block
@jrubymethod name      meta   true
public static irubyobject newinstance threadcontext context  irubyobject recv
irubyobject obj     rubyclass  recv  allocate
obj getmetaclass   getbasecallsites   call context  recv  obj
return obj
@jrubymethod name       meta   true
public static irubyobject at threadcontext context  irubyobject recv  irubyobject arg
ruby runtime   context getruntime
final rubytime time
if  arg instanceof rubytime
rubytime other    rubytime  arg
time   new rubytime runtime   rubyclass  recv  other dt
time setnsec other getnsec
else
time   new rubytime runtime   rubyclass  recv
new datetime 0l  getlocaltimezone runtime
long seconds   rubynumeric num2long arg
long millisecs   0
long nanosecs   0
// in the case of two arguments, mri will discard the portion of
// the first argument after a decimal point (i.e., "floor").
// however in the case of a single argument, any portion after
// the decimal point is honored.
if  arg instanceof rubyfloat    arg instanceof rubyrational
double dbl   rubynumeric num2dbl arg
long nano
if  runtime is1_9
nano   math round  dbl   seconds    1000000000
else
long micro   math round  dbl   seconds    1000000
nano   micro   1000
if  dbl < 0    nano    0
nano    1000000000
millisecs   nano   1000000
nanosecs   nano % 1000000
time setnsec nanosecs
time dt   time dt withmillis seconds   1000   millisecs
time getmetaclass   getbasecallsites   call context  recv  time
return time
@jrubymethod name      meta   true
public static irubyobject at threadcontext context  irubyobject recv  irubyobject arg1  irubyobject arg2
ruby runtime   context getruntime
rubytime time   new rubytime runtime   rubyclass  recv
new datetime 0l  getlocaltimezone runtime
long seconds   rubynumeric num2long arg1
long millisecs   0
long nanosecs   0
if  arg2 instanceof rubyfloat    arg2 instanceof rubyrational
double micros   rubynumeric num2dbl arg2
double nanos   micros   1000
millisecs    long  nanos   1000000
nanosecs    long  nanos % 1000000
else
long micros   rubynumeric num2long arg2
long nanos   micros   1000
millisecs   nanos   1000000
nanosecs   nanos % 1000000
time setnsec nanosecs
time dt   time dt withmillis seconds   1000   millisecs
time getmetaclass   getbasecallsites   call context  recv  time
return time
@jrubymethod name           required   1  optional   9  meta   true
public static rubytime new_local irubyobject recv  irubyobject args
return createtime recv  args  false
@jrubymethod name      optional   10  meta   true  compat   ruby1_9
public static irubyobject new19 threadcontext context  irubyobject recv  irubyobject args
if  args length    0
return newinstance context  recv
return createtime recv  args  false
@jrubymethod name           required   1  optional   9  meta   true
public static rubytime new_utc irubyobject recv  irubyobject args
return createtime recv  args  true
@jrubymethod name      meta   true
public static rubytime load irubyobject recv  irubyobject from  block block
return s_mload recv   rubytime    rubyclass recv  allocate     from
@override
public object tojava class target
if  target equals date class
return getjavadate
else if  target equals calendar class
calendar cal   gregoriancalendar getinstance
cal settime getjavadate
return cal
else if  target equals datetime class
return this dt
else if  target equals java sql date class
return new java sql date dt getmillis
else if  target equals java sql time class
return new java sql time dt getmillis
else if  target equals java sql timestamp class
return new java sql timestamp dt getmillis
else if  target isassignablefrom date class
return getjavadate
else
return super tojava target
protected static rubytime s_mload irubyobject recv  rubytime time  irubyobject from
ruby runtime   recv getruntime
datetime dt   new datetime datetimezone utc
byte fromasbytes   null
fromasbytes   from converttostring   getbytes
if fromasbytes length    8
throw runtime newtypeerror
int p 0
int s 0
for  int i   0  i < 4  i
p      int fromasbytes   0xff  <<  8   i
for  int i   4  i < 8  i
s      int fromasbytes   0xff  <<  8    i   4
boolean utc   false
if   p    1<<31      0
dt   dt withmillis p   1000l
time setusec  s   0xfffff  % 1000
else
p    ~ 1<<31
utc     p >>> 30   0x1     0x1
dt   dt withyear   p >>> 14    0xffff    1900
dt   dt withmonthofyear   p >>> 10    0xf    1
dt   dt withdayofmonth   p >>> 5     0x1f
dt   dt withhourofday  p   0x1f
dt   dt withminuteofhour   s >>> 26    0x3f
dt   dt withsecondofminute   s >>> 20    0x3f
// marsaling dumps usec, not msec
dt   dt withmillisofsecond  s   0xfffff    1000
time setusec  s   0xfffff  % 1000
time setdatetime dt
if   utc  time localtime
from getinstancevariables   copyinstancevariablesinto time
if  runtime is1_9
// pull out nanos, offset
irubyobject nano_num    irubyobject  from getinternalvariables   getinternalvariable
irubyobject nano_den    irubyobject  from getinternalvariables   getinternalvariable
irubyobject offset    irubyobject  from getinternalvariables   getinternalvariable
if  nano_num    null    nano_den    null
long nanos   nano_num converttointeger   getlongvalue     nano_den converttointeger   getlongvalue
time nsec    nanos
if  offset    null
long tz   offset converttointeger   getlongvalue
time dt   dt withzone datetimezone foroffsetmillis  int  tz   1000
return time
private static final string months
private static final map<string  integer> months_map   new hashmap<string  integer>
static
for  int i   0  i < months length  i
months_map put months  i   1
private static final int time_min    1  0  0  0  integer min_value
private static final int time_max    31  23  59  60  integer max_value
private static final int arg_size   7
private static rubytime createtime irubyobject recv  irubyobject args  boolean gmt
ruby runtime   recv getruntime
int len   arg_size
boolean isdst   null
datetimezone dtz
if  gmt
dtz   datetimezone utc
else if  args length    10    args instanceof rubystring
dtz   gettimezone runtime    rubystring  args  tostring
else
dtz   getlocaltimezone runtime
if  args length    10
if args instanceof rubyboolean
isdst     rubyboolean args  istrue
args   new irubyobject   args  args  args  args  args  args  runtime getnil
else
// mri accepts additional wday argument which appears to be ignored.
len   args length
if  len < arg_size
irubyobject newargs   new irubyobject
system arraycopy args  0  newargs  0  args length
for  int i   len  i < arg_size  i
newargs   runtime getnil
args   newargs
len   arg_size
if  args instanceof rubystring
args   rubynumeric str2inum runtime   rubystring  args  10  false
int year    int  rubynumeric num2long args
int month   1
if  len > 1
if   args isnil
irubyobject tmp   args checkstringtype
if   tmp isnil
string monthstring   tmp tostring   tolowercase
integer monthint   months_map get monthstring
if  monthint    null
month   monthint
else
try
month   integer parseint monthstring
catch  numberformatexception nfexcptn
throw runtime newargumenterror
else
month    int  rubynumeric num2long args
if  1 > month    month > 12
throw runtime newargumenterror     month
int int_args     1  0  0  0  0  0
for  int i   0  int_args length >  i   2  i
if   args isnil
if    args instanceof rubynumeric
args   args callmethod
runtime getcurrentcontext
long value   rubynumeric num2long args
if  time_min > value    value > time_max
throw runtime newargumenterror
int_args    int  value
if   runtime is1_9
if  0 <  year    year < 39
year    2000
else if  69 <  year    year < 139
year    1900
datetime dt
// set up with min values and then add to allow rolling over
try
dt   new datetime year  1  1  0  0  0  0  datetimezone utc
dt   dt plusmonths month   1
plusdays int_args   1
plushours int_args
plusminutes int_args
plusseconds int_args
// 1.9 will observe fractional seconds *if* not given usec
if  runtime is1_9       args isnil
args isnil
double millis   rubyfloat num2dbl args
int int_millis    int   millis   1000  % 1000
dt   dt plusmillis int_millis
dt   dt withzoneretainfields dtz
// we might need to perform a dst correction
if  isdst    null
// the instant at which we will ask dtz what the difference between dst and
// standard time is
long offsetcalculationinstant   dt getmillis
// if we might be moving this time from !dst -> dst, the offset is assumed
// to be the same as it was just before we last moved from dst -> !dst
if  dtz isstandardoffset dt getmillis
offsetcalculationinstant   dtz previoustransition offsetcalculationinstant
int offset   dtz getstandardoffset offsetcalculationinstant
dtz getoffset offsetcalculationinstant
if   isdst     dtz isstandardoffset dt getmillis
dt   dt minusmillis offset
if  isdst    dtz isstandardoffset dt getmillis
dt   dt plusmillis offset
catch  org joda time illegalfieldvalueexception e
throw runtime newargumenterror
rubytime time   new rubytime runtime   rubyclass  recv  dt
// ignores usec if 8 args (for compatibility with parsedate) or if not supplied.
if  args length    8     args isnil
boolean fractionalusecgiven   args instanceof rubyfloat    args instanceof rubyrational
if  runtime is1_9      fractionalusecgiven
double micros   rubynumeric num2dbl args
double nanos   micros   1000
time dt   dt withmillis dt getmillis     math round micros   1000
time setnsec  long  nanos % 1000000
else
int usec   int_args % 1000
int msec   int_args   1000
if  int_args < 0
msec    1
usec    1000
time dt   dt withmillis dt getmillis     msec
time setusec usec
time callinit irubyobject null_array  block null_block
return time