/*
**** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2001 alan moore <alan_moore@gmx.net>
* copyright (c) 2001-2004 jan arne petersen <jpetersen@uni-bonn.de>
* copyright (c) 2002 anders bengtsson <ndrsbngtssn@yahoo.se>
* copyright (c) 2002 benoit cerrina <b.cerrina@wanadoo.fr>
* copyright (c) 2002-2004 thomas e enebo <enebo@acm.org>
* copyright (c) 2004 stefan matthias aust <sma@3plus4.de>
* copyright (c) 2005 charles o nutter <headius@headius.com>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby
import static org jruby rubyenumerator enumeratorize
import static org jruby util numeric checkinteger
import static org jruby util numeric f_gcd
import static org jruby util numeric f_lcm
import org jcodings encoding
import org jcodings exception encodingexception
import org jcodings specific asciiencoding
import org jcodings specific usasciiencoding
import org jruby anno jrubyclass
import org jruby anno jrubymethod
import org jruby runtime block
import org jruby runtime blockbody
import org jruby runtime classindex
import org jruby runtime objectallocator
import org jruby runtime threadcontext
import org jruby runtime builtin irubyobject
import org jruby util bytelist
import org jruby util numeric
/** implementation of the integer class.
*
* @author  jpetersen
*/
@jrubyclass name    parent    include
public abstract class rubyinteger extends rubynumeric
public static rubyclass createintegerclass ruby runtime
rubyclass integer   runtime defineclass    runtime getnumeric
objectallocator not_allocatable_allocator
runtime setinteger integer
integer index   classindex integer
integer setreifiedclass rubyinteger class
integer kindof   new rubymodule kindof
@override
public boolean iskindof irubyobject obj  rubymodule type
return obj instanceof rubyinteger
integer getsingletonclass   undefinemethod
if   runtime is1_9
integer includemodule runtime getprecision
integer defineannotatedmethods rubyinteger class
return integer
public rubyinteger ruby runtime  rubyclass rubyclass
super runtime  rubyclass
public rubyinteger rubyclass rubyclass
super rubyclass
public rubyinteger ruby runtime  rubyclass rubyclass  boolean useobjectspace
super runtime  rubyclass  useobjectspace
@deprecated
public rubyinteger ruby runtime  rubyclass rubyclass  boolean useobjectspace  boolean canbetainted
super runtime  rubyclass  useobjectspace  canbetainted
@override
public rubyinteger converttointeger
return this
// conversion
protected rubyfloat tofloat
return rubyfloat newfloat getruntime    getdoublevalue
/*  ================
*  instance methods
*  ================
*/
/** int_int_p
*
*/
@override
@jrubymethod name
public irubyobject integer_p
return getruntime   gettrue
/** int_upto
*
*/
@jrubymethod
public irubyobject upto threadcontext context  irubyobject to  block block
if  block isgiven
if  this instanceof rubyfixnum    to instanceof rubyfixnum
fixnumupto context    rubyfixnum this  getlongvalue      rubyfixnum to  getlongvalue    block
else
duckupto context  this  to  block
return this
else
return enumeratorize context getruntime    this     to
private static void fixnumupto threadcontext context  long from  long to  block block
ruby runtime   context getruntime
if  block getbody   getargumenttype      blockbody zero_args
irubyobject nil   runtime getnil
for  long i   from  i <  to  i
block yield context  nil
else
for  long i   from  i <  to  i
block yield context  rubyfixnum newfixnum runtime  i
private static void duckupto threadcontext context  irubyobject from  irubyobject to  block block
ruby runtime   context getruntime
irubyobject i   from
rubyfixnum one   rubyfixnum one runtime
while  true
if  i callmethod context     to  istrue
break
block yield context  i
i   i callmethod context     one
/** int_downto
*
*/
// todo: make callcoerced work in block context...then fix downto, step, and upto.
@jrubymethod
public irubyobject downto threadcontext context  irubyobject to  block block
if  block isgiven
if  this instanceof rubyfixnum    to instanceof rubyfixnum
fixnumdownto context    rubyfixnum this  getlongvalue      rubyfixnum to  getlongvalue    block
else
duckdownto context  this  to  block
return this
else
return enumeratorize context getruntime    this     to
private static void fixnumdownto threadcontext context  long from  long to  block block
ruby runtime   context getruntime
if  block getbody   getargumenttype      blockbody zero_args
final irubyobject nil   runtime getnil
for  long i   from  i >  to  i
block yield context  nil
else
for  long i   from  i >  to  i
block yield context  rubyfixnum newfixnum runtime  i
private static void duckdownto threadcontext context  irubyobject from  irubyobject to  block block
ruby runtime   context getruntime
irubyobject i   from
rubyfixnum one   rubyfixnum one runtime
while  true
if  i callmethod context     to  istrue
break
block yield context  i
i   i callmethod context     one
@jrubymethod
public irubyobject times threadcontext context  block block
if  block isgiven
ruby runtime   context getruntime
irubyobject i   rubyfixnum zero runtime
rubyfixnum one   rubyfixnum one runtime
while  true
if   i callmethod context     this  istrue
break
block yield context  i
i   i callmethod context     one
return this
else
return enumeratorize context getruntime    this
/** int_succ
*
*/
@jrubymethod name
public irubyobject succ threadcontext context
if  this instanceof rubyfixnum
return rubyfixnum newfixnum context getruntime    getlongvalue     1l
else
return callmethod context     rubyfixnum one context getruntime
static final bytelist single_char_bytelists
static final bytelist single_char_bytelists19
static
single_char_bytelists   new bytelist
single_char_bytelists19   new bytelist
for  int i   0  i < 256  i
bytelist usascii   new bytelist new byte  byte i   false
single_char_bytelists   usascii
single_char_bytelists19   i < 0x80 ?
new bytelist new byte  byte i   usasciiencoding instance
new bytelist
new byte  byte i
asciiencoding instance
/** int_chr
*
*/
@jrubymethod name      compat   compatversion ruby1_8
public rubystring chr threadcontext context
ruby runtime   context getruntime
long value   getlongvalue
if  value < 0    value > 0xff  throw runtime newrangeerror this tostring
return rubystring newstringshared runtime  single_char_bytelists
@jrubymethod name      compat   compatversion ruby1_9
public rubystring chr19 threadcontext context
ruby runtime   context getruntime
int value    int getlongvalue
if  value >  0    value <  0xff
bytelist bytes   single_char_bytelists19
return rubystring newstringshared runtime  bytes  bytes getencoding
else
encoding enc   runtime getdefaultinternalencoding
if  value > 0xff     enc    null    enc    asciiencoding instance
throw runtime newrangeerror this tostring
else
if  enc    null  enc   usasciiencoding instance
return rubystring newstringnocopy runtime  fromencodedbytes runtime  enc   int value   enc  0
@jrubymethod name      compat   compatversion ruby1_9
public rubystring chr19 threadcontext context  irubyobject arg
ruby runtime   context getruntime
long value   getlongvalue
encoding enc
if  arg instanceof rubyencoding
enc     rubyencoding arg  getencoding
else
enc    arg converttostring   toencoding runtime
if  enc    asciiencoding instance    value >  0x80
return chr19 context
return rubystring newstringnocopy runtime  fromencodedbytes runtime  enc   int value   enc  0
private bytelist fromencodedbytes ruby runtime  encoding enc  int value
int n
try
n   value < 0 ? 0   enc codetombclength value
catch  encodingexception ee
n   0
if  n <  0  throw runtime newrangeerror this tostring
bytelist bytes   new bytelist n
enc codetombc value  bytes getunsafebytes    0
bytes setrealsize n
return bytes
/** int_ord
*
*/
@jrubymethod name
public irubyobject ord threadcontext context
return this
/** int_to_i
*
*/
@jrubymethod name
public irubyobject to_i
return this
@override
@jrubymethod name      compat   compatversion ruby1_8
public irubyobject round
return this
@jrubymethod name      compat   compatversion ruby1_9
public irubyobject round19
return this
@jrubymethod name      compat   compatversion ruby1_9
public irubyobject round19 threadcontext context  irubyobject arg
int ndigits   rubynumeric num2int arg
if  ndigits > 0  return rubykernel new_float this  this
if  ndigits    0  return this
ruby runtime   context getruntime
long bytes    this instanceof rubyfixnum  ? 8   rubyfixnum fix2long callmethod
/* if 10**n/2 > this, return 0 */
/* we have log_256(10) > 0.415241 and log_256(1/2)=-0.125 */
if   0 415241   ndigits   0 125 > bytes
return rubyfixnum zero runtime
irubyobject f   numeric int_pow context  10   ndigits
if  this instanceof rubyfixnum    f instanceof rubyfixnum
long x     rubyfixnum this  getlongvalue
long y     rubyfixnum f  getlongvalue
boolean neg   x < 0
if  neg  x    x
x    x   y   2    y   y
if  neg  x    x
return rubyfixnum newfixnum runtime  x
else if  f instanceof rubyfloat
return rubyfixnum zero runtime
else
irubyobject h   f callmethod context     rubyfixnum two runtime
irubyobject r   callmethod context     f
irubyobject n   callmethod context     r
string op   callmethod context     rubyfixnum zero runtime   istrue   ?
if   r callmethod context  op  h  istrue    n   n callmethod context     f
return n
/** integer_to_r
*
*/
@jrubymethod name      compat   compatversion ruby1_9
public irubyobject to_r threadcontext context
return rubyrational newrationalcanonicalize context  this
/** integer_rationalize
*
*/
@jrubymethod name      optional   1  compat   compatversion ruby1_9
public irubyobject rationalize threadcontext context  irubyobject args
return to_r context
@jrubymethod name
public rubyboolean odd_p threadcontext context
ruby runtime   context getruntime
if  callmethod context     rubyfixnum two runtime      rubyfixnum zero runtime
return runtime gettrue
return runtime getfalse
@jrubymethod name
public rubyboolean even_p threadcontext context
ruby runtime   context getruntime
if  callmethod context     rubyfixnum two runtime      rubyfixnum zero runtime
return runtime gettrue
return runtime getfalse
@jrubymethod name
public irubyobject pred threadcontext context
return callmethod context     rubyfixnum one context getruntime
/** rb_gcd
*
*/
@jrubymethod name      compat   compatversion ruby1_9
public irubyobject gcd threadcontext context  irubyobject other
checkinteger context  other
return f_gcd context  this  rubyrational intvalue context  other
/** rb_lcm
*
*/
@jrubymethod name      compat   compatversion ruby1_9
public irubyobject lcm threadcontext context  irubyobject other
checkinteger context  other
return f_lcm context  this  rubyrational intvalue context  other
/** rb_gcdlcm
*
*/
@jrubymethod name      compat   compatversion ruby1_9
public irubyobject gcdlcm threadcontext context  irubyobject other
checkinteger context  other
other   rubyrational intvalue context  other
return context getruntime   newarray f_gcd context  this  other   f_lcm context  this  other
@override
@jrubymethod name      compat   compatversion ruby1_9
public irubyobject numerator threadcontext context
return this
@override
@jrubymethod name      compat   compatversion ruby1_9
public irubyobject denominator threadcontext context
return rubyfixnum one context getruntime
/*  ================
*  singleton methods
*  ================
*/
/** rb_int_induced_from
*
*/
@jrubymethod name      meta   true  compat   compatversion ruby1_8
public static irubyobject induced_from threadcontext context  irubyobject recv  irubyobject other
if  other instanceof rubyfixnum    other instanceof rubybignum
return other
else if  other instanceof rubyfloat    other instanceof rubyrational
return other callmethod context
else
throw recv getruntime   newtypeerror
other getmetaclass   getname