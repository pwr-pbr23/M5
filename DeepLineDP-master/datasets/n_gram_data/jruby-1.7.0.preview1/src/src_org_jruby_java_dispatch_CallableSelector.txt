package org jruby java dispatch
import java util arraylist
import java util arrays
import java util iterator
import java util list
import java util map
import org jruby ruby
import org jruby rubyclass
import org jruby rubymodule
import org jruby exceptions raiseexception
import org jruby java proxies concretejavaproxy
import org jruby javasupport javacallable
import org jruby javasupport javaclass
import org jruby javasupport javaconstructor
import org jruby javasupport javamethod
import org jruby javasupport javautil
import org jruby javasupport parametertypes
import org jruby javasupport proxy javaproxyconstructor
import org jruby runtime threadcontext
import org jruby runtime builtin irubyobject
import org jruby util codegenutils
/**
* method selection logic for calling from ruby to java.
*/
public class callableselector
public static parametertypes matchingcallablearityn map cache  parametertypes methods  irubyobject args  int argslength
int signaturecode   argshashcode args
parametertypes method    parametertypes cache get signaturecode
if  method    null
method   findmatchingcallableforargs cache  signaturecode  methods  args
return method
// note: the five match methods are arity-split to avoid the cost of boxing arguments
// when there's already a cached match. do not condense them into a single
// method.
public static javacallable matchingcallablearityn map cache  javacallable methods  irubyobject args  int argslength
int signaturecode   argshashcode args
javacallable method    javacallable cache get signaturecode
if  method    null
method    javacallable findmatchingcallableforargs cache  signaturecode  methods  args
return method
public static javacallable matchingcallablearityone map cache  javacallable methods  irubyobject arg0
int signaturecode   argshashcode arg0
javacallable method    javacallable cache get signaturecode
if  method    null
method    javacallable findmatchingcallableforargs cache  signaturecode  methods  arg0
return method
public static javacallable matchingcallablearitytwo map cache  javacallable methods  irubyobject arg0  irubyobject arg1
int signaturecode   argshashcode arg0  arg1
javacallable method    javacallable cache get signaturecode
if  method    null
method    javacallable findmatchingcallableforargs cache  signaturecode  methods  arg0  arg1
return method
public static javacallable matchingcallablearitythree map cache  javacallable methods  irubyobject arg0  irubyobject arg1  irubyobject arg2
int signaturecode   argshashcode arg0  arg1  arg2
javacallable method    javacallable cache get signaturecode
if  method    null
method    javacallable findmatchingcallableforargs cache  signaturecode  methods  arg0  arg1  arg2
return method
public static javacallable matchingcallablearityfour map cache  javacallable methods  irubyobject arg0  irubyobject arg1  irubyobject arg2  irubyobject arg3
int signaturecode   argshashcode arg0  arg1  arg2  arg3
javacallable method    javacallable cache get signaturecode
if  method    null
method    javacallable findmatchingcallableforargs cache  signaturecode  methods  arg0  arg1  arg2  arg3
return method
private static parametertypes findmatchingcallableforargs map cache  int signaturecode  parametertypes methods  irubyobject    args
parametertypes method   null
// try the new way first
list<parametertypes> newfinds   findcallable methods  args
if  newfinds size   > 0
// new way found one, so let's go with that
if  newfinds size   > 1    args getruntime   isdebug
// warn about multiple potentials during debug (should only happen once per ambiguity)
warnmultiplematches args  newfinds
method   newfinds get 0
// fall back on old ways
if  method    null
method   findcallable methods  exact  args
if  method    null
method   findcallable methods  assignableandprimitivable  args
if  method    null
method   findcallable methods  assignableorduckable  args
if  method    null
method   findcallable methods  assignableandprimitivablewithvarargs  args
// cache found result
if  method    null  cache put signaturecode  method
return method
private static void warnmultiplematches irubyobject args  list<parametertypes> newfinds
rubyclass argtypes   new rubyclass
for  int i   0  i < argtypes length  i
argtypes   args getmetaclass
stringbuilder builder   new stringbuilder
boolean first   true
for  rubyclass argtype   argtypes
if   first
builder append
first   false
builder append argtype
builder append
for  parametertypes types   newfinds
builder append    append types
args getruntime   getwarnings   warn builder tostring
private static parametertypes findcallable parametertypes callables  callableacceptor acceptor  irubyobject    args
parametertypes bestcallable   null
int bestscore    1
for  int k   0  k < callables length  k
parametertypes callable   callables
if  acceptor accept callable  args
int currentscore   getexactnessscore callable  args
if  currentscore > bestscore
bestcallable   callable
bestscore   currentscore
return bestcallable
private static list<parametertypes> findcallable parametertypes callables  irubyobject    args
list<parametertypes> retainedcallables   new arraylist<parametertypes> callables length
list<parametertypes> incomingcallables   new arraylist<parametertypes> arrays aslist callables
for  int currentarg   0  currentarg < args length  currentarg
retainedcallables clear
for  matcher matcher   match_sequence
for  iterator<parametertypes> callableiter   incomingcallables iterator    callableiter hasnext
parametertypes callable   callableiter next
class types   callable getparametertypes
if  matcher match types  args
callableiter remove
retainedcallables add callable
incomingcallables clear
incomingcallables addall retainedcallables
return retainedcallables
private static int getexactnessscore parametertypes paramtypes  irubyobject args
class types   paramtypes getparametertypes
int count   0
if  paramtypes isvarargs
// varargs exactness gives the last n args as +1 since they'll already
// have been determined to fit
// dig out as many trailing args as possible that match varargs type
int nonvarargs   types length   1
// add one for vararg
count    1
// check remaining args
for  int i   0  i < nonvarargs    i < args length  i
if  types equals argclass args
count
else
for  int i   0  i < args length  i
if  types equals argclass args
count
return count
private static interface callableacceptor
public boolean accept parametertypes types  irubyobject args
private static final callableacceptor exact   new callableacceptor
public boolean accept parametertypes types  irubyobject args
return exactmatch types  args
private static final callableacceptor assignableandprimitivable   new callableacceptor
public boolean accept parametertypes types  irubyobject args
return assignableandprimitivable types  args
private static final callableacceptor assignableorduckable   new callableacceptor
public boolean accept parametertypes types  irubyobject args
return assignableorduckable types  args
private static final callableacceptor assignableandprimitivablewithvarargs   new callableacceptor
public boolean accept parametertypes types  irubyobject args
return assignableandprimitivablewithvarargs types  args
private interface matcher
public boolean match class type  irubyobject arg
private static boolean exactmatch parametertypes paramtypes  irubyobject    args
class types   paramtypes getparametertypes
if  args length    types length  return false
for  int i   0  i < types length  i
if   exact match types  args
return false
return true
private static matcher exact   new matcher
public boolean match class type  irubyobject arg
return type equals argclass arg
type isprimitive      codegenutils getboxtype type     argclass arg
private static matcher assignable   new matcher
public boolean match class type  irubyobject arg
return assignable type  arg
private static matcher primitivable   new matcher
public boolean match class type  irubyobject arg
return primitivable type  arg
private static matcher duckable   new matcher
public boolean match class type  irubyobject arg
return duckable type  arg
private static final matcher match_sequence   new matcher  exact  primitivable  assignable  duckable
private static boolean assignableandprimitivable parametertypes paramtypes  irubyobject    args
class types   paramtypes getparametertypes
if  args length    types length  return false
for  int i   0  i < types length  i
if    assignable match types  args     primitivable match types  args
return false
return true
private static boolean assignableorduckable parametertypes paramtypes  irubyobject    args
class types   paramtypes getparametertypes
if  args length    types length  return false
for  int i   0  i < types length  i
if    assignable match types  args     duckable match types  args
return false
return true
private static boolean assignableandprimitivablewithvarargs parametertypes paramtypes  irubyobject    args
// bail out if this is not a varargs method
if   paramtypes isvarargs    return false
class types   paramtypes getparametertypes
class varargarraytype   types
class varargtype   varargarraytype getcomponenttype
// if there's no args, we only match when there's just varargs
if  args length    0
return types length <  1
// dig out as many trailing args as will fit, ensuring they match varargs type
int nonvarargs   types length   1
for  int i   args length   1  i >  nonvarargs  i
if    assignable match varargtype  args     primitivable match varargtype  args
return false
// check remaining args
for  int i   0  i < nonvarargs  i
if    assignable match types  args     primitivable match types  args
return false
return true
private static boolean assignable class type  irubyobject arg
return javaclass assignable type  argclass arg
/**
* this method checks whether an argument can be *directly* converted into
* the target primitive, i.e. without changing from integral to floating-point.
*
* @param type the target type
* @param arg the argument to convert
* @return whether the argument can be directly converted to the target primitive type
*/
private static boolean primitivable class type  irubyobject arg
class argclass   argclass arg
if  type isprimitive
// todo: this is where we would want to do precision checks to see
// if it's non-destructive to coerce a given type into the target
// integral primitive
if  type    integer type    type    long type    type    short type    type    character type
return argclass    long class       long first because it's what fixnum claims to be
argclass    byte class
argclass    short class
argclass    char class
argclass    int class
argclass    long class
argclass    byte class
argclass    short class
argclass    character class
argclass    integer class
else if  type    float type    type    double type
return argclass    double class       double first because it's what float claims to be
argclass    float class
argclass    float class
argclass    double class
else if  type    boolean type
return argclass    boolean class
argclass    boolean class
return false
private static boolean duckable class type  irubyobject arg
return javautil isducktypeconvertable argclass arg   type
private static int argshashcode irubyobject a0
return 31   classhashcode a0
private static int argshashcode irubyobject a0  irubyobject a1
return 31   argshashcode a0    classhashcode a1
private static int argshashcode irubyobject a0  irubyobject a1  irubyobject a2
return 31   argshashcode a0  a1    classhashcode a2
private static int argshashcode irubyobject a0  irubyobject a1  irubyobject a2  irubyobject a3
return 31   argshashcode a0  a1  a2    classhashcode a3
private static int argshashcode irubyobject a
if  a    null
return 0
int result   1
for  irubyobject element   a
result   31   result   classhashcode element
return result
private static int classhashcode irubyobject o
return o    null ? 0   o getjavaclass   hashcode
private static class argclass irubyobject a
if  a    null
return void class
return a getjavaclass
public static raiseexception argtypesdonotmatch ruby runtime  irubyobject receiver  javacallable methods  object    args
class argtypes   new class
for  int i   0  i < args length  i
argtypes   argclasstypeerror args
return argumenterror runtime getcurrentcontext    methods  receiver  argtypes
private static class argclasstypeerror object object
if  object    null
return void class
if  object instanceof concretejavaproxy
return   concretejavaproxy object  getjavaclass
return object getclass
private static raiseexception argumenterror threadcontext context  parametertypes methods  irubyobject receiver  class argtypes
boolean constructor   methods instanceof javaconstructor    methods instanceof javaproxyconstructor
stringbuffer fullerror   new stringbuffer
fullerror append
if  constructor
fullerror append
else
fullerror append
append   javamethod methods  name   tostring
append
fullerror append
append codegenutils prettyparams argtypes
append
if  receiver instanceof rubymodule
fullerror append   rubymodule receiver  getname
else
fullerror append receiver getmetaclass   getrealclass   getname
if  methods length > 1
fullerror append
for  parametertypes method   methods
fullerror append     codegenutils prettyparams method getparametertypes
return context runtime newnameerror fullerror tostring    null