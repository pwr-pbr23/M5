/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2010 charles o nutter <headius@headius.com>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby ext psych
import java io inputstreamreader
import java io stringreader
import java util map
import org jcodings specific utf16beencoding
import org jcodings specific utf16leencoding
import org jcodings specific utf8encoding
import org jruby ruby
import org jruby rubyarray
import org jruby rubyclass
import org jruby rubyencoding
import org jruby rubyexception
import org jruby rubyio
import org jruby rubykernel
import org jruby rubymodule
import org jruby rubyobject
import org jruby rubystring
import org jruby anno jrubymethod
import org jruby runtime block
import org jruby runtime objectallocator
import org jruby runtime threadcontext
import org jruby runtime builtin irubyobject
import org jruby util ioinputstream
import org jruby util log logger
import org jruby util log loggerfactory
import org jruby util unsafe unsafefactory
import org yaml snakeyaml error mark
import org yaml snakeyaml error markedyamlexception
import org yaml snakeyaml events aliasevent
import org yaml snakeyaml events documentendevent
import org yaml snakeyaml events documentstartevent
import org yaml snakeyaml events event
import org yaml snakeyaml events event id
import org yaml snakeyaml events mappingstartevent
import org yaml snakeyaml events scalarevent
import org yaml snakeyaml events sequencestartevent
import org yaml snakeyaml parser parser
import org yaml snakeyaml parser parserexception
import org yaml snakeyaml parser parserimpl
import org yaml snakeyaml reader readerexception
import org yaml snakeyaml reader streamreader
import org yaml snakeyaml scanner scannerexception
import static org jruby javasupport util runtimehelpers invoke
public class psychparser extends rubyobject
private static final logger log   loggerfactory getlogger
public static final int yaml_any_encoding   0
public static final int yaml_utf8_encoding   utf8encoding instance getindex
public static final int yaml_utf16le_encoding   utf16leencoding instance getindex
public static final int yaml_utf16be_encoding   utf16beencoding instance getindex
public static void initpsychparser ruby runtime  rubymodule psych
rubyclass psychparser   runtime defineclassunder    runtime getobject    new objectallocator
public irubyobject allocate ruby runtime  rubyclass klazz
return new psychparser runtime  klazz
psych
psychparser defineconstant    runtime newfixnum yaml_any_encoding
psychparser defineconstant    runtime newfixnum yaml_utf8_encoding
psychparser defineconstant    runtime newfixnum yaml_utf16le_encoding
psychparser defineconstant    runtime newfixnum yaml_utf16be_encoding
psychparser defineannotatedmethods psychparser class
psych defineclassunder    runtime getsyntaxerror    rubyexception exception_allocator
public psychparser ruby runtime  rubyclass klass
super runtime  klass
@jrubymethod
public irubyobject parse threadcontext context  irubyobject yaml
ruby runtime   context runtime
return parse context  yaml  rubystring newstring runtime
@jrubymethod
public irubyobject parse threadcontext context  irubyobject yaml  irubyobject path
ruby runtime   context runtime
boolean tainted   yaml istaint
// fixme? only supports unicode, since we have to produces strings...
try
streamreader reader
if  yaml respondsto
reader   new streamreader new inputstreamreader new ioinputstream yaml   rubyencoding utf8
if  yaml instanceof rubyio
tainted   true
else
reader   new streamreader new stringreader yaml converttostring   asjavastring
parser   new parserimpl reader
irubyobject handler   getinstancevariable
while  true
event   parser getevent
// fixme: event should expose a getid, so it can be switched
if  event is id streamstart
invoke
context
handler
runtime newfixnum yaml_any_encoding
else if  event is id documentstart
documentstartevent dse    documentstartevent event
integer versionints   dse getversion
irubyobject version   versionints    null ?
rubyarray newarray runtime
rubyarray newarray runtime  runtime newfixnum versionints   runtime newfixnum versionints
map<string  string> tagsmap   dse gettags
rubyarray tags   rubyarray newarray runtime
if  tags size   > 0
for  map entry<string  string> tag   tagsmap entryset
rubystring key     rubystring newstring runtime  tag getkey
rubystring value   rubystring newstring runtime  tag getvalue
key settaint tainted
value settaint tainted
tags append rubyarray newarray
runtime
key
value
invoke
context
handler
version
tags
runtime newboolean  dse getexplicit
else if  event is id documentend
documentendevent dee    documentendevent event
invoke
context
handler
runtime newboolean  dee getexplicit
else if  event is id alias
aliasevent ae    aliasevent event
irubyobject alias   runtime getnil
if  ae getanchor      null
alias   rubystring newstring runtime  ae getanchor
alias settaint tainted
invoke
context
handler
alias
else if  event is id scalar
scalarevent se    scalarevent event
irubyobject anchor   se getanchor      null ?
runtime getnil
rubystring newstring runtime  se getanchor
irubyobject tag   se gettag      null ?
runtime getnil
rubystring newstring runtime  se gettag
irubyobject plain_implicit   runtime newboolean se getimplicit   canomittaginplainscalar
irubyobject quoted_implicit   runtime newboolean se getimplicit   canomittaginnonplainscalar
irubyobject style   runtime newfixnum translatestyle se getstyle
irubyobject val   rubystring newstring runtime  se getvalue
val settaint tainted
anchor settaint tainted
tag settaint tainted
invoke
context
handler
val
anchor
tag
plain_implicit
quoted_implicit
style
else if  event is id sequencestart
sequencestartevent sse    sequencestartevent event
irubyobject anchor   sse getanchor      null ?
runtime getnil
rubystring newstring runtime  sse getanchor
irubyobject tag   sse gettag      null ?
runtime getnil
rubystring newstring runtime  sse gettag
irubyobject implicit   runtime newboolean sse getimplicit
irubyobject style   runtime newfixnum translateflowstyle sse getflowstyle
anchor settaint tainted
tag settaint tainted
invoke
context
handler
anchor
tag
implicit
style
else if  event is id sequenceend
invoke
context
handler
else if  event is id mappingstart
mappingstartevent mse    mappingstartevent event
irubyobject anchor   mse getanchor      null ?
runtime getnil
rubystring newstring runtime  mse getanchor
irubyobject tag   mse gettag      null ?
runtime getnil
rubystring newstring runtime  mse gettag
irubyobject implicit   runtime newboolean mse getimplicit
irubyobject style   runtime newfixnum translateflowstyle mse getflowstyle
anchor settaint tainted
tag settaint tainted
invoke
context
handler
anchor
tag
implicit
style
else if  event is id mappingend
invoke
context
handler
else if  event is id streamend
invoke
context
handler
break
catch  parserexception pe
parser   null
rubykernel raise context  runtime getkernel
new irubyobject  runtime getmodule    getconstant     runtime newstring syntaxerror context  yaml  pe
block null_block
catch  scannerexception se
parser   null
stringbuilder message   new stringbuilder
if  se getproblemmark      null
message append se getproblemmark   tostring
throw runtime newargumenterror message tostring
catch  readerexception re
parser   null
rubykernel raise context  runtime getkernel
new irubyobject  runtime getmodule    getconstant     runtime newstring re getlocalizedmessage
block null_block
catch  throwable t
unsafefactory getunsafe   throwexception t
return this
return this
private static string syntaxerror threadcontext context  irubyobject yaml  markedyamlexception mye
string path
if  yaml respondsto
path   yaml callmethod context     tostring
else
path
return path       mye getproblemmark   getline         mye getproblemmark   getcolumn
private static int translatestyle character style
if  style    null  return 0     any
switch  style
case 0  return 1     plain
case    return 2     single quoted
case    return 3     double quoted
case    return 4     literal
case    return 5     folded
default  return 0     any
private static int translateflowstyle boolean flowstyle
if  flowstyle    null  return 0     any
if  flowstyle  return 2
return 1
@jrubymethod
public irubyobject mark threadcontext context
ruby runtime   context runtime
event event   null
if  parser    null
event   parser peekevent
if  event    null
event   this event
if  event    null
return   rubyclass context runtime getclassfrompath     newinstance
context
runtime newfixnum 0
runtime newfixnum 0
runtime newfixnum 0
block null_block
mark mark   event getstartmark
return   rubyclass context runtime getclassfrompath     newinstance
context
runtime newfixnum mark getindex
runtime newfixnum mark getline
runtime newfixnum mark getcolumn
block null_block
@jrubymethod name
public irubyobject external_encoding_set threadcontext context  irubyobject encoding
// stubbed
return encoding
private parser parser
private event event