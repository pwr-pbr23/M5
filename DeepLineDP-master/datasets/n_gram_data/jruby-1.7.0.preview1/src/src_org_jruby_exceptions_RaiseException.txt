/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2001 alan moore <alan_moore@gmx.net>
* copyright (c) 2001-2004 jan arne petersen <jpetersen@uni-bonn.de>
* copyright (c) 2002 benoit cerrina <b.cerrina@wanadoo.fr>
* copyright (c) 2002-2004 anders bengtsson <ndrsbngtssn@yahoo.se>
* copyright (c) 2004 thomas e enebo <enebo@acm.org>
* copyright (c) 2004 joey gibson <joey@joeygibson.com>
* copyright (c) 2004 stefan matthias aust <sma@3plus4.de>
* copyright (c) 2005 charles o nutter <headius@headius.com>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby exceptions
import java io bytearrayoutputstream
import java io printstream
import java io printwriter
import java io stringwriter
import java lang reflect member
import org jruby nativeexception
import org jruby ruby
import org jruby rubyclass
import org jruby rubyexception
import org jruby rubyinstanceconfig
import org jruby rubystring
import org jruby javasupport util runtimehelpers
import org jruby runtime rubyevent
import org jruby runtime threadcontext
import org jruby runtime backtrace rubystacktraceelement
import org jruby runtime backtrace tracetype
import org jruby runtime builtin irubyobject
public class raiseexception extends jumpexception
public static final boolean debug   false
private static final long serialversionuid    7612079169559973951l
private rubyexception exception
private string providedmessage
private boolean nativeexception
/**
* construct a new raiseexception to wrap the given ruby exception for java-land
* throwing purposes.
*
* this constructor will generate a backtrace using the java
* stack trace and the interpreted ruby frames for the current thread.
*
* @param actexception the ruby exception to wrap
*/
public raiseexception rubyexception actexception
this actexception  false
/**
* construct a new raiseexception to wrap the given ruby exception for java-land
* throwing purposes.
*
* this constructor will not generate a backtrace and will instead use the
* one specified by the
*
* @param exception the ruby exception to wrap
* @param backtrace
*/
public raiseexception rubyexception exception  irubyobject backtrace
super exception message tostring
if  debug
thread dumpstack
setexception exception  false
preraise exception getruntime   getcurrentcontext    backtrace
public raiseexception ruby runtime  rubyclass excptnclass  string msg  boolean nativeexception
super msg
if  msg    null
msg
providedmessage       excptnclass getname         msg
this nativeexception   nativeexception
if  debug
thread dumpstack
setexception  rubyexception runtimehelpers invoke
runtime getcurrentcontext
excptnclass
rubystring newunicodestring excptnclass getruntime    msg
nativeexception
preraise runtime getcurrentcontext
public raiseexception ruby runtime  rubyclass excptnclass  string msg  irubyobject backtrace  boolean nativeexception
super msg
if  msg    null
msg
providedmessage       excptnclass getname         msg
this nativeexception   nativeexception
if  debug
thread dumpstack
setexception  rubyexception runtimehelpers invoke
runtime getcurrentcontext
excptnclass
rubystring newunicodestring excptnclass getruntime    msg
nativeexception
preraise runtime getcurrentcontext    backtrace
public raiseexception rubyexception exception  boolean isnativeexception
super exception message tostring
if  debug
thread dumpstack
this nativeexception   isnativeexception
setexception exception  isnativeexception
preraise exception getruntime   getcurrentcontext
public raiseexception throwable cause  nativeexception nativeexception
super buildmessage cause   cause
providedmessage   buildmessage cause
setexception nativeexception  true
preraise nativeexception getruntime   getcurrentcontext    nativeexception getcause   getstacktrace
/**
* method still in use by jruby-openssl <= 0.5.2
*/
public static raiseexception createnativeraiseexception ruby runtime  throwable cause
return createnativeraiseexception runtime  cause  null
public static raiseexception createnativeraiseexception ruby runtime  throwable cause  member target
nativeexception nativeexception   new nativeexception runtime  runtime getnativeexception    cause
// fixme: someday, add back filtering of reflection/handle methods between jruby and target
return new raiseexception cause  nativeexception
private static string buildmessage throwable exception
stringbuilder sb   new stringbuilder
stringwriter stacktrace   new stringwriter
exception printstacktrace new printwriter stacktrace
sb append    append exception getclass    append
sb append    append exception getmessage    append
sb append    append stacktrace getbuffer   tostring
return sb tostring
@override
public string getmessage
if  providedmessage    null
providedmessage       exception getmetaclass   getbasename         exception message exception getruntime   getcurrentcontext    asjavastring
return providedmessage
/**
* gets the exception
* @return returns a rubyexception
*/
public rubyexception getexception
return exception
private void preraise threadcontext context
preraise context   irubyobject null
private void preraise threadcontext context  stacktraceelement javatrace
context runtime incrementexceptioncount
dosetlasterror context
docalleventhook context
exception prepareintegratedbacktrace context  javatrace
if  rubyinstanceconfig log_exceptions  tracetype dumpexception exception
private void preraise threadcontext context  irubyobject backtrace
context runtime incrementexceptioncount
dosetlasterror context
docalleventhook context
if  backtrace    null
exception preparebacktrace context  nativeexception
else
exception forcebacktrace backtrace
// call throwable.setstacktrace so that when raiseexception appears nested inside another exception,
// ruby stack trace gets displayed
// jruby-2673: if wrapping a nativeexception, use the actual java exception's trace as our java trace
if  exception instanceof nativeexception
setstacktrace   nativeexception exception  getcause   getstacktrace
else
setstacktrace javatracefromrubytrace exception getbacktraceelements
if  rubyinstanceconfig log_exceptions  tracetype dumpexception exception
private void docalleventhook threadcontext context
if  context runtime haseventhooks
context runtime calleventhooks context  rubyevent raise  context getfile    context getline    context getframename    context getframeklazz
private void dosetlasterror threadcontext context
if   context iswithindefined
context runtime getglobalvariables   set    exception
/**
* sets the exception
* @param newexception the exception to set
*/
protected void setexception rubyexception newexception  boolean nativeexception
this exception   newexception
this nativeexception   nativeexception
private stacktraceelement javatracefromrubytrace rubystacktraceelement trace
stacktraceelement newtrace   new stacktraceelement
for  int i   0  i < newtrace length  i
newtrace   trace getelement
return newtrace