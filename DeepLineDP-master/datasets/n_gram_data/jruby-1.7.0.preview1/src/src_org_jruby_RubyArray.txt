/*
**** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2001 alan moore <alan_moore@gmx.net>
* copyright (c) 2001 chad fowler <chadfowler@chadfowler.com>
* copyright (c) 2001-2002 benoit cerrina <b.cerrina@wanadoo.fr>
* copyright (c) 2001-2004 jan arne petersen <jpetersen@uni-bonn.de>
* copyright (c) 2002-2004 anders bengtsson <ndrsbngtssn@yahoo.se>
* copyright (c) 2002-2005 thomas e enebo <enebo@acm.org>
* copyright (c) 2004-2005 charles o nutter <headius@headius.com>
* copyright (c) 2004 stefan matthias aust <sma@3plus4.de>
* copyright (c) 2006 ola bini <ola.bini@ki.se>
* copyright (c) 2006 daniel steer <damian.steer@hp.com>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby
import static org jruby rubyenumerator enumeratorize
import java io ioexception
import java lang reflect array
import java util arrays
import java util collection
import java util comparator
import java util identityhashmap
import java util iterator
import java util list
import java util listiterator
import java util randomaccess
import java util concurrent callable
import org jcodings encoding
import org jcodings specific usasciiencoding
import org jruby anno jrubyclass
import org jruby anno jrubymethod
import org jruby common irubywarnings id
import org jruby java addons arrayjavaaddons
import org jruby javasupport javautil
import org jruby javasupport util runtimehelpers
import org jruby runtime arity
import org jruby runtime block
import org jruby runtime blockbody
import org jruby runtime classindex
import org jruby runtime methodindex
import org jruby runtime objectallocator
import org jruby runtime threadcontext
import static org jruby runtime visibility
import static org jruby compatversion
import org jruby runtime builtin irubyobject
import org jruby runtime encoding encodingcapable
import org jruby runtime marshal marshalstream
import org jruby runtime marshal unmarshalstream
import org jruby util bytelist
import org jruby util pack
import org jruby util qsort
import org jruby util recursivecomparator
import org jruby util typeconverter
import static org jruby javasupport util runtimehelpers invokedynamic
import static org jruby runtime methodindex hash
import static org jruby runtime methodindex op_cmp
/**
* the implementation of the built-in class array in ruby.
*
* concurrency: no synchronization is required among readers, but
* all users must synchronize externally with writers.
*
*/
@jrubyclass name
public class rubyarray extends rubyobject implements list  randomaccess
public static final int default_inspect_str_size   10
public static rubyclass createarrayclass ruby runtime
rubyclass arrayc   runtime defineclass    runtime getobject    array_allocator
runtime setarray arrayc
arrayc index   classindex array
arrayc setreifiedclass rubyarray class
arrayc kindof   new rubymodule kindof
@override
public boolean iskindof irubyobject obj  rubymodule type
return obj instanceof rubyarray
arrayc includemodule runtime getenumerable
arrayc defineannotatedmethods rubyarray class
return arrayc
private static objectallocator array_allocator   new objectallocator
public irubyobject allocate ruby runtime  rubyclass klass
return new rubyarray runtime  klass  irubyobject null_array
@override
public int getnativetypeindex
return classindex array
private final void concurrentmodification
concurrentmodification getruntime
private static void concurrentmodification ruby runtime
throw runtime newconcurrencyerror
/** rb_ary_s_create
*
*/
@jrubymethod name      rest   true  meta   true
public static irubyobject create irubyobject klass  irubyobject args  block block
rubyarray arr    rubyarray    rubyclass  klass  allocate
if  args length > 0
arr values   new irubyobject
system arraycopy args  0  arr values  0  args length
arr reallength   args length
return arr
/** rb_ary_new2
*
*/
public static final rubyarray newarray final ruby runtime  final long len
checklength runtime  len
return newarray runtime   int len
public static final rubyarray newarraylight final ruby runtime  final long len
checklength runtime  len
return newarraylight runtime   int len
public static final rubyarray newarray final ruby runtime  final int len
rubyarray array   new rubyarray runtime  len
runtimehelpers fillnil array values  0  array values length  runtime
return array
public static final rubyarray newarraylight final ruby runtime  final int len
rubyarray array   new rubyarray runtime  len  false
runtimehelpers fillnil array values  0  array values length  runtime
return array
/** rb_ary_new
*
*/
public static final rubyarray newarray final ruby runtime
return newarray runtime  array_default_size
/** rb_ary_new
*
*/
public static final rubyarray newarraylight final ruby runtime
/* ruby arrays default to holding 16 elements, so we create an
* arraylist of the same size if we're not told otherwise
*/
return newarraylight runtime  array_default_size
public static rubyarray newarray ruby runtime  irubyobject obj
return new rubyarray runtime  new irubyobject   obj
public static rubyarray newarraylight ruby runtime  irubyobject obj
return new rubyarray runtime  new irubyobject   obj    false
public static rubyarray newarraylight ruby runtime  irubyobject    objs
return new rubyarray runtime  objs  false
/** rb_assoc_new
*
*/
public static rubyarray newarray ruby runtime  irubyobject car  irubyobject cdr
return new rubyarray runtime  new irubyobject   car  cdr
public static rubyarray newemptyarray ruby runtime
return new rubyarray runtime  null_array
/** rb_ary_new4, rb_ary_new3
*
*/
public static rubyarray newarray ruby runtime  irubyobject args
rubyarray arr   new rubyarray runtime  new irubyobject
system arraycopy args  0  arr values  0  args length
arr reallength   args length
return arr
public static rubyarray newarraynocopy ruby runtime  irubyobject args
return new rubyarray runtime  args
public static rubyarray newarraynocopy ruby runtime  irubyobject args  int begin
return new rubyarray runtime  args  begin
public static rubyarray newarraynocopy ruby runtime  irubyobject args  int begin  int length
assert begin >  0
assert length >  0
return new rubyarray runtime  args  begin  length
public static rubyarray newarraynocopylight ruby runtime  irubyobject args
rubyarray arr   new rubyarray runtime  false
arr values   args
arr reallength   args length
return arr
public static rubyarray newarray ruby runtime  collection<? extends irubyobject> collection
return new rubyarray runtime  collection toarray new irubyobject
public static final int array_default_size   16
// volatile to ensure that initial nil-fill is visible to other threads
private volatile irubyobject values
private static final int tmplock_arr_f   1 << 9
private static final int tmplock_or_frozen_arr_f   tmplock_arr_f   frozen_f
private volatile boolean isshared   false
private int begin   0
private int reallength   0
/*
* plain internal array assignment
*/
private rubyarray ruby runtime  irubyobject vals
super runtime  runtime getarray
values   vals
reallength   vals length
/*
* plain internal array assignment
*/
private rubyarray ruby runtime  irubyobject vals  boolean objectspace
super runtime  runtime getarray    objectspace
values   vals
reallength   vals length
/*
* plain internal array assignment
*/
private rubyarray ruby runtime  irubyobject vals  int begin
super runtime  runtime getarray
this values   vals
this begin   begin
this reallength   vals length   begin
this isshared   true
private rubyarray ruby runtime  irubyobject vals  int begin  int length
super runtime  runtime getarray
this values   vals
this begin   begin
this reallength   length
this isshared   true
private rubyarray ruby runtime  rubyclass metaclass  irubyobject vals  int begin  int length
super runtime  metaclass
this values   vals
this begin   begin
this reallength   length
this isshared   true
protected rubyarray ruby runtime  int length
super runtime  runtime getarray
values   new irubyobject
private rubyarray ruby runtime  int length  boolean objectspace
super runtime  runtime getarray    objectspace
values   new irubyobject
/* newobj and objsetup equivalent
* fastest one, for shared arrays, optional objectspace
*/
private rubyarray ruby runtime  boolean objectspace
super runtime  runtime getarray    objectspace
private rubyarray ruby runtime  rubyclass klass
super runtime  klass
/* array constructors taking the metaclass to fulfil mri array subclass behaviour
*
*/
private rubyarray ruby runtime  rubyclass klass  int length
super runtime  klass
values   new irubyobject
private rubyarray ruby runtime  rubyclass klass  irubyobjectvals  boolean objectspace
super runtime  klass  objectspace
values   vals
private rubyarray ruby runtime  rubyclass klass  boolean objectspace
super runtime  klass  objectspace
private rubyarray ruby runtime  rubyclass klass  rubyarray original
super runtime  klass
reallength   original reallength
values   new irubyobject
safearraycopy runtime  original values  original begin  values  0  reallength
private rubyarray ruby runtime  rubyclass klass  irubyobject vals
super runtime  klass
values   vals
reallength   vals length
private void alloc int length
final irubyobject newvalues   new irubyobject
runtimehelpers fillnil newvalues  getruntime
values   newvalues
begin   0
private void realloc int newlength  int valueslength
irubyobject reallocated   new irubyobject
if  newlength > valueslength
runtimehelpers fillnil reallocated  valueslength  newlength  getruntime
safearraycopy values  begin  reallocated  0  valueslength      elements and trailing nils
else
safearraycopy values  begin  reallocated  0  newlength      ???
begin   0
values   reallocated
private static void fill irubyobjectarr  int from  int to  irubyobject with
for  int i from  i<to  i
arr   with
private static final void checklength ruby runtime  long length
if  length < 0
throw runtime newargumenterror
if  length >  integer max_value
throw runtime newargumenterror
/** getter for property list.
* @return value of property list.
*/
public list getlist
return arrays aslist tojavaarray
public int getlength
return reallength
public irubyobject tojavaarray
irubyobject copy   new irubyobject
safearraycopy values  begin  copy  0  reallength
return copy
public irubyobject tojavaarrayunsafe
return  isshared ? values   tojavaarray
public irubyobject tojavaarraymaybeunsafe
return   isshared    begin    0    values length    reallength  ? values   tojavaarray
/** rb_ary_make_shared
*
*/
private rubyarray makeshared
return makeshared begin  reallength  getmetaclass
private rubyarray makeshared int beg  int len  rubyclass klass
return makeshared beg  len  new rubyarray klass getruntime    klass
private rubyarray makeshared int beg  int len  rubyarray sharedarray
isshared   true
sharedarray values   values
sharedarray isshared   true
sharedarray begin   beg
sharedarray reallength   len
return sharedarray
/** ary_shared_first
*
*/
private rubyarray makesharedfirst threadcontext context  irubyobject num  boolean last  rubyclass klass
int n   rubynumeric num2int num
if  n > reallength
n   reallength
else if  n < 0
throw context getruntime   newargumenterror
return makeshared last ? begin   reallength   n   begin  n  klass
/** rb_ary_modify_check
*
*/
private final void modifycheck
if   flags   tmplock_or_frozen_arr_f     0
if   flags   frozen_f     0  throw getruntime   newfrozenerror
if   flags   tmplock_arr_f     0  throw getruntime   newtypeerror
if   istaint      getruntime   getsafelevel   >  4
throw getruntime   newsecurityerror
/** rb_ary_modify
*
*/
private final void modify
modifycheck
if  isshared
irubyobject vals   new irubyobject
isshared   false
safearraycopy values  begin  vals  0  reallength
begin   0
values   vals
/*  ================
*  instance methods
*  ================
*/
/**
* variable arity version for compatibility. not bound to a ruby method.
* @deprecated use the versions with zero, one, or two args.
*/
public irubyobject initialize threadcontext context  irubyobject args  block block
switch  args length
case 0
return initialize context  block
case 1
return initializecommon context  args  null  block
case 2
return initializecommon context  args  args  block
default
arity raiseargumenterror getruntime    args length  0  2
return null     not reached
/** rb_ary_initialize
*
*/
@jrubymethod visibility   private
public irubyobject initialize threadcontext context  block block
modifycheck
ruby runtime   context getruntime
reallength   0
if  block isgiven      runtime isverbose
runtime getwarnings   warning id block_unused
return this
/** rb_ary_initialize
*
*/
@jrubymethod visibility   private
public irubyobject initialize threadcontext context  irubyobject arg0  block block
return initializecommon context  arg0  null  block
/** rb_ary_initialize
*
*/
@jrubymethod visibility   private
public irubyobject initialize threadcontext context  irubyobject arg0  irubyobject arg1  block block
return initializecommon context  arg0  arg1  block
private irubyobject initializecommon threadcontext context  irubyobject arg0  irubyobject arg1  block block
ruby runtime   context getruntime
if  arg1    null      arg0 instanceof rubyfixnum
irubyobject val   arg0 checkarraytype
if   val isnil
replace val
return this
long len   rubynumeric num2long arg0
if  len < 0  throw runtime newargumenterror
if  len >  integer max_value  throw runtime newargumenterror
int ilen    int  len
modify
if  ilen > values length   begin
values   new irubyobject
begin   0
if  block isgiven
if  arg1    null
runtime getwarnings   warn id block_beats_default_value
if  block getbody   getargumenttype      blockbody zero_args
irubyobject nil   runtime getnil
for  int i   0  i < ilen  i
store i  block yield context  nil
reallength   i   1
else
for  int i   0  i < ilen  i
store i  block yield context  rubyfixnum newfixnum runtime  i
reallength   i   1
else
try
if  arg1    null
runtimehelpers fillnil values  begin  begin   ilen  runtime
else
fill values  begin  begin   ilen  arg1
catch  arrayindexoutofboundsexception e
concurrentmodification
reallength   ilen
return this
/** rb_ary_initialize_copy
*
*/
@jrubymethod name        required   1  visibility private
@override
public irubyobject initialize_copy irubyobject orig
return this replace orig
/**
* overridden dup for fast-path logic.
*
* @return a new rubyarray sharing the original backing store.
*/
public irubyobject dup
if  metaclass index    classindex array  return super dup
rubyarray dup   new rubyarray metaclass getclassruntime    values  begin  reallength
dup isshared   isshared   true
dup flags    flags   tainted_f     from dup_setup
dup flags    flags   untrusted_f
return dup
/** rb_ary_replace
*
*/
@jrubymethod name        required   1
public irubyobject replace irubyobject orig
modifycheck
rubyarray origarr   orig converttoarray
if  this    orig  return this
origarr isshared   true
isshared   true
values   origarr values
reallength   origarr reallength
begin   origarr begin
return this
/** rb_ary_to_s
*
*/
@jrubymethod name
@override
public irubyobject to_s
if  getruntime   is1_9
// 1.9 seems to just do inspect for to_s now
return inspect
if  reallength    0  return rubystring newemptystring getruntime
return join getruntime   getcurrentcontext    getruntime   getglobalvariables   get
public boolean includes threadcontext context  irubyobject item
int mybegin   this begin
int end   mybegin   reallength
irubyobject values   this values
for  int i   mybegin  i < end  i
final irubyobject value   safearrayref values  i
if  equalinternal context  value  item   return true
return false
/** rb_ary_hash
*
*/
@jrubymethod name      compat   ruby1_8
public rubyfixnum hash threadcontext context
ruby runtime   context getruntime
if  runtime isinspecting this   return  rubyfixnum zero runtime
try
runtime registerinspecting this
int mybegin   this begin
int h   reallength
for  int i   mybegin  i < mybegin   reallength  i
h    h << 1     h < 0 ? 1   0
final irubyobject value   safearrayref values  i
h ^  rubynumeric num2long invokedynamic context  value  hash
return runtime newfixnum h
finally
runtime unregisterinspecting this
/** rb_ary_hash
*
*/
@jrubymethod name      compat   ruby1_9
public rubyfixnum hash19 final threadcontext context
return  rubyfixnum  getruntime   execrecursiveouter new ruby recursivefunction
public irubyobject call irubyobject obj  boolean recur
int begin   rubyarray this begin
long h   reallength
if  recur
h ^  rubynumeric num2long invokedynamic context  context runtime getarray    hash
else
for  int i   begin  i < begin   reallength  i
h    h << 1     h < 0 ? 1   0
final irubyobject value   safearrayref values  i
h ^  rubynumeric num2long invokedynamic context  value  hash
return getruntime   newfixnum h
rubyarray this
/** rb_ary_store
*
*/
public final irubyobject store long index  irubyobject value
if  index < 0     index    reallength  < 0  throw getruntime   newindexerror      index   reallength
modify
if  index >  reallength
int valueslength   values length   begin
if  index >  valueslength  storerealloc index  valueslength
reallength    int  index   1
safearrayset values  begin    int  index  value
return value
private void storerealloc long index  int valueslength
long newlength   valueslength >> 1
if  newlength < array_default_size  newlength   array_default_size
newlength    index
if  index >  integer max_value    newlength >  integer max_value
throw getruntime   newargumenterror
realloc  int  newlength  valueslength
/** rb_ary_elt
*
*/
private final irubyobject elt long offset
if  offset < 0    offset >  reallength
return getruntime   getnil
return eltok offset
public final irubyobject eltok long offset
return safearrayref values  begin    int offset
/** rb_ary_entry
*
*/
public final irubyobject entry long offset
return  offset < 0   ? elt offset   reallength    elt offset
public final irubyobject entry int offset
return  offset < 0   ? elt offset   reallength    elt offset
public final irubyobject eltinternal int offset
return values
public final irubyobject eltinternalset int offset  irubyobject item
return values   item
/**
* variable arity version for compatibility. not bound to a ruby method.
* @deprecated use the versions with zero, one, or two args.
*/
public irubyobject fetch threadcontext context  irubyobject args  block block
switch  args length
case 1
return fetch context  args  block
case 2
return fetch context  args  args  block
default
arity raiseargumenterror getruntime    args length  1  2
return null     not reached
/** rb_ary_fetch
*
*/
@jrubymethod
public irubyobject fetch threadcontext context  irubyobject arg0  block block
long index   rubynumeric num2long arg0
if  index < 0  index    reallength
if  index < 0    index >  reallength
if  block isgiven    return block yield context  arg0
throw getruntime   newindexerror     index
return safearrayref values  begin    int  index
/** rb_ary_fetch
*
*/
@jrubymethod
public irubyobject fetch threadcontext context  irubyobject arg0  irubyobject arg1  block block
if  block isgiven    getruntime   getwarnings   warn id block_beats_default_value
long index   rubynumeric num2long arg0
if  index < 0  index    reallength
if  index < 0    index >  reallength
if  block isgiven    return block yield context  arg0
return arg1
return safearrayref values  begin    int  index
/** rb_ary_to_ary
*
*/
private static rubyarray arytoary irubyobject obj
if  obj instanceof rubyarray  return  rubyarray  obj
if  obj respondsto     return obj converttoarray
rubyarray arr   new rubyarray obj getruntime    false      possibly should not in object space
arr values   new irubyobject obj
arr reallength   1
return arr
/** rb_ary_splice
*
*/
private final void splice long beg  long len  irubyobject rpl  boolean onenine
if  len < 0  throw getruntime   newindexerror     len
if  beg < 0     beg    reallength  < 0  throw getruntime   newindexerror      beg   reallength
final rubyarray rplarr
final int rlen
if  rpl    null     rpl isnil       onenine
rplarr   null
rlen   0
else if  rpl isnil
// 1.9 replaces with nil
rplarr   newarray getruntime    rpl
rlen   1
else
rplarr   arytoary rpl
rlen   rplarr reallength
modify
int valueslength   values length   begin
if  beg >  reallength
len   beg   rlen
if  len >  valueslength  splicerealloc  int len  valueslength
try
runtimehelpers fillnil values  begin   reallength  begin     int beg   getruntime
catch  arrayindexoutofboundsexception e
concurrentmodification
reallength    int  len
else
if  beg   len > reallength  len   reallength   beg
int alen   reallength   rlen    int len
if  alen >  valueslength  splicerealloc alen  valueslength
if  len    rlen
safearraycopy values  begin    int   beg   len   values  begin    int  beg   rlen  reallength    int   beg   len
reallength   alen
if  rlen > 0
safearraycopy rplarr values  rplarr begin  values  begin    int  beg  rlen
/** rb_ary_splice
*
*/
private final void spliceone long beg  irubyobject rpl
if  beg < 0     beg    reallength  < 0  throw getruntime   newindexerror      beg   reallength
modify
int valueslength   values length   begin
if  beg >  reallength
int len    int beg   1
if  len >  valueslength  splicerealloc  int len  valueslength
runtimehelpers fillnil values  begin   reallength  begin     int beg   getruntime
reallength    int  len
else
int len   beg > reallength ? reallength    int beg   0
int alen   reallength   1   len
if  alen >  valueslength  splicerealloc  int alen  valueslength
if  len    0
safearraycopy values  begin    int  beg  values  begin    int  beg   1  reallength    int  beg
reallength   alen
safearrayset values  begin    int beg  rpl
private void splicerealloc int length  int valueslength
int trylength   valueslength    valueslength >> 1
int len   length > trylength ? length   trylength
irubyobject vals   new irubyobject
system arraycopy values  begin  vals  0  reallength
// only fill if there actually will remain trailing storage
if  len > length  runtimehelpers fillnil vals  length  len  getruntime
begin   0
values   vals
@jrubymethod
public irubyobject insert
throw getruntime   newargumenterror 0  1
/** rb_ary_insert
*
*/
@jrubymethod name      compat   ruby1_8
public irubyobject insert irubyobject arg
return this
@jrubymethod name      compat   ruby1_9
public irubyobject insert19 irubyobject arg
modifycheck
return insert arg
@jrubymethod name      compat   ruby1_8
public irubyobject insert irubyobject arg1  irubyobject arg2
long pos   rubynumeric num2long arg1
if  pos     1  pos   reallength
if  pos < 0  pos
spliceone pos  arg2      rb_ary_new4
return this
@jrubymethod name      compat   ruby1_9
public irubyobject insert19 irubyobject arg1  irubyobject arg2
modifycheck
return insert arg1  arg2
@jrubymethod name      required   1  rest   true  compat   ruby1_8
public irubyobject insert irubyobject args
if  args length    1  return this
long pos   rubynumeric num2long args
if  pos     1  pos   reallength
if  pos < 0  pos
rubyarray inserted   new rubyarray getruntime    false
inserted values   args
inserted begin   1
inserted reallength   args length   1
splice pos  0  inserted  false      rb_ary_new4
return this
@jrubymethod name      required   1  rest   true  compat   ruby1_9
public irubyobject insert19 irubyobject args
modifycheck
return insert args
/** rb_ary_dup
*
*/
public final rubyarray arydup
rubyarray dup   new rubyarray metaclass getclassruntime    metaclass  values  begin  reallength
dup isshared   true
isshared   true
dup flags    flags    tainted_f   untrusted_f      from dup_setup
// rb_copy_generic_ivar from dup_setup here ...unlikely..
return dup
public final rubyarray arydup19
// in 1.9, rb_ary_dup logic changed so that on subclasses of array,
// dup returns an instance of array, rather than an instance of the subclass
// also, taintedness and trustedness are not inherited to duplicates
rubyarray dup   new rubyarray metaclass getclassruntime    values  begin  reallength
dup isshared   true
isshared   true
// rb_copy_generic_ivar from dup_setup here ...unlikely..
return dup
/** rb_ary_transpose
*
*/
@jrubymethod name
public rubyarray transpose
rubyarray tmp  result   null
int alen   reallength
if  alen    0  return arydup
ruby runtime   getruntime
int elen    1
int end   begin   alen
for  int i   begin  i < end  i
tmp   elt i  converttoarray
if  elen < 0
elen   tmp reallength
result   new rubyarray runtime  elen
for  int j   0  j < elen  j
result store j  new rubyarray runtime  alen
else if  elen    tmp reallength
throw runtime newindexerror     tmp reallength
elen
for  int j   0  j < elen  j
rubyarray  result elt j   store i   begin  tmp elt j
return result
/** rb_values_at (internal)
*
*/
private final irubyobject values_at long olen  irubyobject args
rubyarray result   new rubyarray getruntime    args length
for  int i   0  i < args length  i
if  args instanceof rubyfixnum
result append entry   rubyfixnum args  getlongvalue
continue
long beglen
if    args instanceof rubyrange
else if   beglen     rubyrange  args  beglen olen  0      null
continue
else
int beg    int  beglen
int len    int  beglen
int end   begin   len
for  int j   begin  j < end  j
result append entry j   beg
continue
result append entry rubynumeric num2long args
runtimehelpers fillnil result values  result reallength  result values length  getruntime
return result
/** rb_values_at
*
*/
@jrubymethod name      rest   true
public irubyobject values_at irubyobject args
return values_at reallength  args
/** rb_ary_subseq
*
*/
public irubyobject subseq long beg  long len
int reallength   this reallength
if  beg > reallength    beg < 0    len < 0  return getruntime   getnil
if  beg   len > reallength
len   reallength   beg
if  len < 0  len   0
if  len    0  return new rubyarray getruntime    getmetaclass    irubyobject null_array
return makeshared begin    int  beg   int  len  getmetaclass
/** rb_ary_subseq
*
*/
public irubyobject subseqlight long beg  long len
ruby runtime   getruntime
if  beg > reallength    beg < 0    len < 0  return runtime getnil
if  beg   len > reallength
len   reallength   beg
if  len < 0  len   0
if  len    0  return new rubyarray runtime  getmetaclass    irubyobject null_array  false
return makeshared begin    int  beg   int  len  new rubyarray runtime  getmetaclass    false
/** rb_ary_length
*
*/
@jrubymethod name      alias
public rubyfixnum length
return getruntime   newfixnum reallength
/** rb_ary_push - specialized rb_ary_store
*
*/
@jrubymethod name      required   1
public rubyarray append irubyobject item
modify
int valueslength   values length   begin
if  reallength    valueslength
if  reallength    integer max_value  throw getruntime   newargumenterror
long newlength   valueslength    valueslength >> 1
if  newlength > integer max_value
newlength   integer max_value
else if  newlength < array_default_size
newlength   array_default_size
realloc  int  newlength  valueslength
safearrayset values  begin   reallength    item
return this
/** rb_ary_push_m - instance method push
*
*/
@jrubymethod name      rest   true  compat   ruby1_8
public rubyarray push_m irubyobject items
for  int i   0  i < items length  i
append items
return this
@jrubymethod name      rest   true  compat   ruby1_9
public rubyarray push_m19 irubyobject items
modifycheck
return push_m items
/** rb_ary_pop
*
*/
@jrubymethod
public irubyobject pop threadcontext context
modifycheck
if  reallength    0  return context getruntime   getnil
if  isshared
return safearrayref values  begin     reallength
else
int index   begin     reallength
return safearrayrefset values  index  context getruntime   getnil
@jrubymethod
public irubyobject pop threadcontext context  irubyobject num
modifycheck
rubyarray result   makesharedfirst context  num  true  context getruntime   getarray
reallength    result reallength
return result
/** rb_ary_shift
*
*/
@jrubymethod name
public irubyobject shift threadcontext context
modifycheck
ruby runtime   context getruntime
if  reallength    0  return runtime getnil
final irubyobject obj   safearrayrefcondset values  begin   isshared  runtime getnil
begin
reallength
return obj
@jrubymethod name
public irubyobject shift threadcontext context  irubyobject num
modify
rubyarray result   makesharedfirst context  num  false  context getruntime   getarray
int n   result reallength
begin    n
reallength    n
return result
@jrubymethod name      compat   ruby1_8
public irubyobject unshift
return this
@jrubymethod name      compat   ruby1_9
public irubyobject unshift19
modifycheck
return this
/** rb_ary_unshift
*
*/
@jrubymethod name      compat   ruby1_8
public irubyobject unshift irubyobject item
if  begin    0    isshared
modify
final int valueslength   values length   begin
if  reallength    valueslength
int newlength   valueslength >> 1
if  newlength < array_default_size  newlength   array_default_size
newlength    valueslength
irubyobjectvals   new irubyobject
safearraycopy values  begin  vals  1  valueslength
runtimehelpers fillnil vals  valueslength   1  newlength  getruntime
values   vals
begin   0
else
safearraycopy values  begin  values  begin   1  reallength
else
modifycheck
begin
reallength
values   item
return this
@jrubymethod name      compat   ruby1_9
public irubyobject unshift19 irubyobject item
modifycheck
return unshift item
@jrubymethod name      rest   true  compat   ruby1_8
public irubyobject unshift irubyobject items
long len   reallength
if  items length    0  return this
store len   items length   1  getruntime   getnil
try
system arraycopy values  begin  values  begin   items length   int  len
system arraycopy items  0  values  begin  items length
catch  arrayindexoutofboundsexception e
concurrentmodification
return this
@jrubymethod name      rest   true  compat   ruby1_9
public irubyobject unshift19 irubyobject items
modifycheck
return unshift items
/** rb_ary_includes
*
*/
@jrubymethod name      required   1
public rubyboolean include_p threadcontext context  irubyobject item
return context getruntime   newboolean includes context  item
/** rb_ary_frozen_p
*
*/
@jrubymethod name
@override
public rubyboolean frozen_p threadcontext context
return context getruntime   newboolean isfrozen       flags   tmplock_arr_f     0
/**
* variable arity version for compatibility. not bound to a ruby method.
* @deprecated use the versions with zero, one, or two args.
*/
public irubyobject aref irubyobject args
switch  args length
case 1
return aref args
case 2
return aref args  args
default
arity raiseargumenterror getruntime    args length  1  2
return null     not reached
/** rb_ary_aref
*/
@jrubymethod name           compat   ruby1_8
public irubyobject aref irubyobject arg0
assert  arg0 getruntime   is1_9
if  arg0 instanceof rubyfixnum  return entry   rubyfixnum arg0  getlongvalue
if  arg0 instanceof rubysymbol  throw getruntime   newtypeerror
return arefcommon arg0
@jrubymethod name           compat   ruby1_9
public irubyobject aref19 irubyobject arg0
return arg0 instanceof rubyfixnum ? entry   rubyfixnum arg0  getlongvalue      arefcommon arg0
private irubyobject arefcommon irubyobject arg0
if  arg0 instanceof rubyrange
long beglen     rubyrange  arg0  beglen reallength  0
return beglen    null ? getruntime   getnil     subseq beglen  beglen
return entry rubynumeric num2long arg0
@jrubymethod name           compat   ruby1_8
public irubyobject aref irubyobject arg0  irubyobject arg1
assert  arg0 getruntime   is1_9
if  arg0 instanceof rubysymbol  throw getruntime   newtypeerror
return arefcommon arg0  arg1
@jrubymethod name           compat   ruby1_9
public irubyobject aref19 irubyobject arg0  irubyobject arg1
return arefcommon arg0  arg1
private irubyobject arefcommon irubyobject arg0  irubyobject arg1
long beg   rubynumeric num2long arg0
if  beg < 0  beg    reallength
return subseq beg  rubynumeric num2long arg1
/**
* variable arity version for compatibility. not bound to a ruby method.
* @deprecated use the versions with zero, one, or two args.
*/
public irubyobject aset irubyobject args
switch  args length
case 2
return aset args  args
case 3
return aset args  args  args
default
throw getruntime   newargumenterror     args length
@jrubymethod name      compat   ruby1_8
public irubyobject aset irubyobject arg0  irubyobject arg1
assert  getruntime   is1_9
if  arg0 instanceof rubyfixnum
store   rubyfixnum arg0  getlongvalue    arg1
else if  arg0 instanceof rubyrange
long beglen     rubyrange  arg0  beglen reallength  1
splice beglen  beglen  arg1  false
else if arg0 instanceof rubysymbol
throw getruntime   newtypeerror
else
store rubynumeric num2long arg0   arg1
return arg1
@jrubymethod name      compat   ruby1_9
public irubyobject aset19 irubyobject arg0  irubyobject arg1
modifycheck
if  arg0 instanceof rubyfixnum
store   rubyfixnum arg0  getlongvalue    arg1
else if  arg0 instanceof rubyrange
long beglen     rubyrange  arg0  beglen reallength  1
splice beglen  beglen  arg1  true
else
store rubynumeric num2long arg0   arg1
return arg1
/** rb_ary_aset
*
*/
@jrubymethod name      compat   ruby1_8
public irubyobject aset irubyobject arg0  irubyobject arg1  irubyobject arg2
assert  getruntime   is1_9
if  arg0 instanceof rubysymbol  throw getruntime   newtypeerror
if  arg1 instanceof rubysymbol  throw getruntime   newtypeerror
splice rubynumeric num2long arg0   rubynumeric num2long arg1   arg2  false
return arg2
@jrubymethod name      compat   ruby1_9
public irubyobject aset19 irubyobject arg0  irubyobject arg1  irubyobject arg2
modifycheck
splice rubynumeric num2long arg0   rubynumeric num2long arg1   arg2  true
return arg2
/** rb_ary_at
*
*/
@jrubymethod name      required   1
public irubyobject at irubyobject pos
return entry rubynumeric num2long pos
/** rb_ary_concat
*
*/
@jrubymethod name      required   1  compat   ruby1_8
public rubyarray concat irubyobject obj
rubyarray ary   obj converttoarray
if  ary reallength > 0  splice reallength  0  ary  false
return this
@jrubymethod name      required   1  compat   ruby1_9
public rubyarray concat19 irubyobject obj
modifycheck
return concat obj
/** inspect_ary
*
*/
private irubyobject inspectary threadcontext context
encoding encoding   context runtime getdefaultinternalencoding
if  encoding    null  encoding   usasciiencoding instance
rubystring str   rubystring newstringlight context runtime  default_inspect_str_size  encoding
str cat  byte
boolean tainted   istaint
boolean untrust   isuntrusted
for  int i   0  i < reallength  i
if  i > 0  str cat  byte    cat  byte
rubystring str2   inspect context  safearrayref values  begin   i
if  str2 istaint    tainted   true
if  str2 isuntrusted    untrust   true
// safe for both 1.9 and 1.8
str cat19 str2
str cat  byte
if  tainted  str settaint true
if  untrust  str setuntrusted true
return str
/** rb_ary_inspect
*
*/
@jrubymethod name
@override
public irubyobject inspect
if  reallength    0  return getruntime   newstring
if  getruntime   isinspecting this   return  getruntime   newstring
try
getruntime   registerinspecting this
return inspectary getruntime   getcurrentcontext
finally
getruntime   unregisterinspecting this
/**
* variable arity version for compatibility. not bound to a ruby method.
* @deprecated use the versions with zero, one, or two args.
*/
public irubyobject first irubyobject args
switch  args length
case 0
return first
case 1
return first args
default
arity raiseargumenterror getruntime    args length  0  1
return null     not reached
/** rb_ary_first
*
*/
@jrubymethod name
public irubyobject first
if  reallength    0  return getruntime   getnil
return values
/** rb_ary_first
*
*/
@jrubymethod name
public irubyobject first irubyobject arg0
long n   rubynumeric num2long arg0
if  n > reallength
n   reallength
else if  n < 0
throw getruntime   newargumenterror
return makeshared begin   int  n  getruntime   getarray
/**
* variable arity version for compatibility. not bound to a ruby method.
* @deprecated use the versions with zero, one, or two args.
*/
public irubyobject last irubyobject args
switch  args length
case 0
return last
case 1
return last args
default
arity raiseargumenterror getruntime    args length  0  1
return null     not reached
/** rb_ary_last
*
*/
@jrubymethod name
public irubyobject last
if  reallength    0  return getruntime   getnil
return values
/** rb_ary_last
*
*/
@jrubymethod name
public irubyobject last irubyobject arg0
long n   rubynumeric num2long arg0
if  n > reallength
n   reallength
else if  n < 0
throw getruntime   newargumenterror
return makeshared begin   reallength    int  n   int  n  getruntime   getarray
/** rb_ary_each
*
*/
public irubyobject eachcommon threadcontext context  block block
if   block isgiven
throw context getruntime   newlocaljumperrornoblock
for  int i   0  i < reallength  i
// do not coarsen the "safe" catch, since it will misinterpret aioobe from the yielded code.
// see jruby-5434
block yield context  safearrayref values  begin   i
return this
@jrubymethod
public irubyobject each threadcontext context  block block
return block isgiven   ? eachcommon context  block    enumeratorize context getruntime    this
public irubyobject eachslice threadcontext context  int size  block block
ruby runtime   context getruntime
// local copies of everything
int localreallength   reallength
irubyobject localvalues   values
int localbegin   begin
// sliding window
rubyarray window   newarraynocopy runtime  localvalues  localbegin  size
makeshared
// don't expose shared array to ruby
final boolean specificarity    block arity   isfixed        block arity   required      1
for    localreallength >  size  localreallength    size
block yield context  window
if  specificarity       array is never exposed to ruby  just use for yielding
window begin   localbegin    size
else      array may be exposed to ruby  create new
window   newarraynocopy runtime  localvalues  localbegin    size  size
// remainder
if  localreallength > 0
window reallength   localreallength
block yield context  window
return runtime getnil
@jrubymethod
public irubyobject each_slice threadcontext context  irubyobject arg  block block
final int size   rubynumeric num2int arg
final ruby runtime   context getruntime
if  size <  0  throw runtime newargumenterror
return block isgiven   ? eachslice context  size  block    enumeratorize context getruntime    this     arg
/** rb_ary_each_index
*
*/
public irubyobject eachindex threadcontext context  block block
ruby runtime   context getruntime
if   block isgiven
throw runtime newlocaljumperrornoblock
for  int i   0  i < reallength  i
block yield context  runtime newfixnum i
return this
@jrubymethod
public irubyobject each_index threadcontext context  block block
return block isgiven   ? eachindex context  block    enumeratorize context getruntime    this
/** rb_ary_reverse_each
*
*/
public irubyobject reverseeach threadcontext context  block block
int len   reallength
while len   > 0
// do not coarsen the "safe" catch, since it will misinterpret aioobe from the yielded code.
// see jruby-5434
block yield context  safearrayref values  begin   len
if  reallength < len  len   reallength
return this
@jrubymethod
public irubyobject reverse_each threadcontext context  block block
return block isgiven   ? reverseeach context  block    enumeratorize context getruntime    this
private irubyobject inspectjoin threadcontext context  rubyarray tmp  irubyobject sep
ruby runtime   context getruntime
// if already inspecting, there is no need to register/unregister again.
if  runtime isinspecting this
return tmp join context  sep
try
runtime registerinspecting this
return tmp join context  sep
finally
runtime unregisterinspecting this
/** rb_ary_join
*
*/
@jrubymethod name      compat   ruby1_8
public irubyobject join threadcontext context  irubyobject sep
final ruby runtime   context getruntime
if  reallength    0  return rubystring newemptystring runtime
boolean taint   istaint      sep istaint
boolean untrusted   isuntrusted      sep isuntrusted
int len   1
for  int i   begin  i < begin   reallength  i
// do not coarsen the "safe" catch, since it will misinterpret aioobe from to_str.
// see jruby-5434
irubyobject value   safearrayref values  i
irubyobject tmp   value checkstringtype
len    tmp isnil   ? 10     rubystring  tmp  getbytelist   length
bytelist sepbytes   null
if   sep isnil
sepbytes   sep converttostring   getbytelist
len    sepbytes getrealsize      reallength   1
bytelist buf   new bytelist len
for  int i   0  i < reallength  i
// do not coarsen the "safe" catch, since it will misinterpret aioobe from inspect.
// see jruby-5434
irubyobject tmp   safearrayref values  begin   i
if    tmp instanceof rubystring
if  tmp instanceof rubyarray
if  tmp    this    runtime isinspecting tmp
tmp   runtime newstring
else
tmp   inspectjoin context   rubyarray tmp  sep
else
tmp   rubystring objasstring context  tmp
if  i > 0    sepbytes    null  buf append sepbytes
buf append tmp asstring   getbytelist
if  tmp istaint    taint   true
if  tmp isuntrusted    untrusted   true
rubystring result   runtime newstring buf
if  taint  result settaint true
if  untrusted  result untrust context
return result
@jrubymethod name      compat   ruby1_8
public irubyobject join threadcontext context
return join context  context getruntime   getglobalvariables   get
// 1.9 mri: ary_join_0
private rubystring joinstrings rubystring sep  int max  rubystring result
irubyobject first   values
if  max   begin > 0    first instanceof encodingcapable
result setencoding   encodingcapable first  getencoding
try
for int i   begin  i < max  i
if  i > begin    sep    null  result append19 sep
result append19 values
catch  arrayindexoutofboundsexception e
concurrentmodification
return result
// 1.9 mri: ary_join_1
private rubystring joinany threadcontext context  irubyobject obj  rubystring sep
int i  rubystring result
assert i >  begin
rubyclass arrayclass   context getruntime   getarray
for    i < begin   reallength  i
if  i > begin    sep    null  result append19 sep
irubyobject val   safearrayref values  i
if  val instanceof rubystring
result append19 val
else if  val instanceof rubyarray
obj   val
recursivejoin context  obj  sep  result  val
else
irubyobject tmp   val checkstringtype19
if   tmp isnil
result append19 tmp
continue
tmp   typeconverter converttotypewithcheck val  arrayclass
if   tmp isnil
obj   val
recursivejoin context  obj  sep  result  tmp
else
result append19 rubystring objasstring context  val
return result
private void recursivejoin final threadcontext context  final irubyobject outvalue
final rubystring sep  final rubystring result  final irubyobject ary
final ruby runtime   context getruntime
if  ary    this  throw runtime newargumenterror
runtime execrecursive new ruby recursivefunction
public irubyobject call irubyobject obj  boolean recur
if  recur  throw runtime newargumenterror
rubyarray recary     rubyarray  ary
recary joinany context  outvalue  sep  recary begin  result
return runtime getnil
outvalue
/** rb_ary_join
*
*/
@jrubymethod name      compat   ruby1_9
public irubyobject join19 final threadcontext context  final irubyobject sep
final ruby runtime   context getruntime
if  reallength    0  return rubystring newemptystring runtime  usasciiencoding instance
int len   1
rubystring sepstring   null
if   sep isnil
sepstring   sep converttostring
len    sepstring size      reallength   1
for  int i   begin  i < begin   reallength  i
irubyobject val   safearrayref values  i
irubyobject tmp   val checkstringtype19
if  tmp isnil      tmp    val
len      begin   reallength    i    10
final rubystring result    rubystring  rubystring newstringlight runtime  len  usasciiencoding instance  infectby this
final rubystring sepstringfinal   sepstring
final int ifinal   i
return runtime recursivelistoperation new callable<irubyobject>
public irubyobject call
return joinany context  rubyarray this  sepstringfinal  ifinal  joinstrings sepstringfinal  ifinal  result
len      rubystring  tmp  getbytelist   length
return joinstrings sepstring  begin   reallength
rubystring  rubystring newstringlight runtime  len  infectby this
@jrubymethod name      compat   ruby1_9
public irubyobject join19 threadcontext context
return join19 context  context getruntime   getglobalvariables   get
/** rb_ary_to_a
*
*/
@jrubymethod name
@override
public rubyarray to_a
if getmetaclass      getruntime   getarray
rubyarray dup   new rubyarray getruntime    getruntime   isobjectspaceenabled
isshared   true
dup isshared   true
dup values   values
dup reallength   reallength
dup begin   begin
return dup
return this
@jrubymethod name
public irubyobject to_ary
return this
@override
public rubyarray converttoarray
return this
@override
public irubyobject checkarraytype
return this
/** rb_ary_equal
*
*/
@jrubymethod name      required   1
@override
public irubyobject op_equal threadcontext context  irubyobject obj
if  this    obj
return context getruntime   gettrue
if    obj instanceof rubyarray
if   obj respondsto
return context getruntime   getfalse
return runtimehelpers rbequal context  obj  this
return recursivecomparator compare context  methodindex op_equal  this  obj
public rubyboolean compare threadcontext context  int method  irubyobject other
ruby runtime   context getruntime
if    other instanceof rubyarray
if   other respondsto
return runtime getfalse
else
return runtimehelpers rbequal context  other  this
rubyarray ary    rubyarray  other
if  reallength    ary reallength
return runtime getfalse
for  int i   0  i < reallength  i
if   invokedynamic context  elt i   method  ary elt i   istrue
return runtime getfalse
return runtime gettrue
/** rb_ary_eql
*
*/
@jrubymethod name      required   1
public irubyobject eql threadcontext context  irubyobject obj
return recursivecomparator compare context  methodindex eql  this  obj
/** rb_ary_compact_bang
*
*/
@jrubymethod name
public irubyobject compact_bang
modify
int p   begin
int t   p
int end   p   reallength
try
while  t < end
if  values isnil
t
else
values   values
catch  arrayindexoutofboundsexception e
concurrentmodification
p    begin
if  reallength    p  return getruntime   getnil
realloc p  values length   begin
reallength   p
return this
/** rb_ary_compact
*
*/
@jrubymethod name      compat   ruby1_8
public irubyobject compact
rubyarray ary   arydup
ary compact_bang
return ary
@jrubymethod name      compat   ruby1_9
public irubyobject compatc19
rubyarray ary   arydup19
ary compact_bang
return ary
/** rb_ary_empty_p
*
*/
@jrubymethod name
public irubyobject empty_p
return reallength    0 ? getruntime   gettrue     getruntime   getfalse
/** rb_ary_clear
*
*/
@jrubymethod name
public irubyobject rb_clear
modifycheck
if  isshared
alloc array_default_size
isshared   false
else if  values length > array_default_size << 1
alloc array_default_size << 1
else
try
begin   0
runtimehelpers fillnil values  0  reallength  getruntime
catch  arrayindexoutofboundsexception e
concurrentmodification
reallength   0
return this
@jrubymethod
public irubyobject fill threadcontext context  block block
if  block isgiven    return fillcommon context  0  reallength  block
throw context getruntime   newargumenterror 0  1
@jrubymethod
public irubyobject fill threadcontext context  irubyobject arg  block block
if  block isgiven
if  arg instanceof rubyrange
int beglen     rubyrange  arg  beglenint reallength  1
return fillcommon context  beglen  beglen  block
int beg
return fillcommon context  beg   fillbegin arg   filllen beg  null    block
else
return fillcommon context  0  reallength  arg
@jrubymethod
public irubyobject fill threadcontext context  irubyobject arg1  irubyobject arg2  block block
if  block isgiven
int beg
return fillcommon context  beg   fillbegin arg1   filllen beg  arg2   block
else
if  arg2 instanceof rubyrange
int beglen     rubyrange  arg2  beglenint reallength  1
return fillcommon context  beglen  beglen  arg1
int beg
return fillcommon context  beg   fillbegin arg2   filllen beg  null   arg1
@jrubymethod
public irubyobject fill threadcontext context  irubyobject arg1  irubyobject arg2  irubyobject arg3  block block
if  block isgiven
throw context getruntime   newargumenterror 3  2
else
int beg
return fillcommon context  beg   fillbegin arg2   filllen beg  arg3   arg1
private int fillbegin irubyobject arg
int beg   arg isnil   ? 0   rubynumeric num2int arg
if  beg < 0
beg   reallength   beg
if  beg < 0  beg   0
return beg
private long filllen long beg  irubyobject arg
if  arg    null    arg isnil
return reallength   beg
else
return rubynumeric num2long arg
// todo: in mri 1.9, an explicit check for negative length is
// added here. indexerror is raised when length is negative.
// see [ruby-core:12953] for more details.
//
// new note: this is actually under re-evaluation,
// see [ruby-core:17483].
private irubyobject fillcommon threadcontext context  int beg  long len  irubyobject item
modify
// see [ruby-core:17483]
if  len < 0  return this
if  len > integer max_value   beg  throw context getruntime   newargumenterror
int end    int  beg   len
if  end > reallength
int valueslength   values length   begin
if  end >  valueslength  realloc end  valueslength
reallength   end
if  len > 0
try
fill values  begin   beg  begin   end  item
catch  arrayindexoutofboundsexception e
concurrentmodification
return this
private irubyobject fillcommon threadcontext context  int beg  long len  block block
modify
// see [ruby-core:17483]
if  len < 0  return this
if  len > integer max_value   beg  throw getruntime   newargumenterror
int end    int  beg   len
if  end > reallength
int valueslength   values length   begin
if  end >  valueslength  realloc end  valueslength
reallength   end
ruby runtime   context getruntime
for  int i   beg  i < end  i
irubyobject v   block yield context  runtime newfixnum i
if  i >  reallength  break
safearrayset values  begin   i  v
return this
/** rb_ary_index
*
*/
public irubyobject index threadcontext context  irubyobject obj
ruby runtime   context getruntime
for  int i   0  i < reallength  i
if  equalinternal context  eltok i   obj   return runtime newfixnum i
return runtime getnil
@jrubymethod name
public irubyobject index threadcontext context  irubyobject obj  block unused
if  unused isgiven    context getruntime   getwarnings   warn id block_unused
return index context  obj
@jrubymethod name
public irubyobject index threadcontext context  block block
ruby runtime   context getruntime
if   block isgiven    return enumeratorize runtime  this
for  int i   0  i < reallength  i
if  block yield context  eltok i   istrue    return runtime newfixnum i
return runtime getnil
/** rb_ary_rindex
*
*/
public irubyobject rindex threadcontext context  irubyobject obj
ruby runtime   context getruntime
int i   reallength
while  i   > 0
if  i > reallength
i   reallength
continue
if  equalinternal context  eltok i   obj   return runtime newfixnum i
return runtime getnil
@jrubymethod
public irubyobject rindex threadcontext context  irubyobject obj  block unused
if  unused isgiven    context getruntime   getwarnings   warn id block_unused
return rindex context  obj
@jrubymethod
public irubyobject rindex threadcontext context  block block
ruby runtime   context getruntime
if   block isgiven    return enumeratorize runtime  this
int i   reallength
while  i   > 0
if  i >  reallength
i   reallength
continue
if  block yield context  eltok i   istrue    return runtime newfixnum i
return runtime getnil
/** rb_ary_indexes
*
*/
@jrubymethod name           required   1  rest   true
public irubyobject indexes irubyobject args
getruntime   getwarnings   warn id deprecated_method
rubyarray ary   new rubyarray getruntime    args length
for  int i   0  i < args length  i
ary append aref args
return ary
/** rb_ary_reverse_bang
*
*/
@jrubymethod name
public irubyobject reverse_bang
modify
try
if  reallength > 1
irubyobject vals   values
int p   begin
int len   reallength
for  int i   0  i < len >> 1  i
irubyobject tmp   vals
vals   vals
vals   tmp
catch  arrayindexoutofboundsexception e
concurrentmodification
return this
/** rb_ary_reverse_m
*
*/
@jrubymethod name
public irubyobject reverse
if  reallength > 1
rubyarray dup   safereverse
dup flags    flags   tainted_f     from dup_setup
dup flags    flags   untrusted_f     from dup_setup
// rb_copy_generic_ivar from dup_setup here ...unlikely..
return dup
else
return dup
private rubyarray safereverse
int length   reallength
int mybegin   this begin
irubyobject myvalues   this values
irubyobject vals   new irubyobject
try
for  int i   0  i <  length >> 1  i
vals   myvalues
vals   myvalues
catch  arrayindexoutofboundsexception e
concurrentmodification
return new rubyarray getruntime    getmetaclass    vals
/** rb_ary_collect
*
*/
@jrubymethod name           compat   ruby1_8
public irubyobject collect threadcontext context  block block
ruby runtime   context getruntime
if   block isgiven    return new rubyarray runtime  runtime getarray    this
irubyobject arr   new irubyobject
for  int i   0  i < reallength  i
// do not coarsen the "safe" check, since it will misinterpret aioobe from the yield
// see jruby-5434
arr   block yield context  safearrayref values  i   begin
return new rubyarray runtime  arr
@jrubymethod name        compat   ruby1_9
public irubyobject collect19 threadcontext context  block block
return block isgiven   ? collect context  block    enumeratorize context getruntime    this
@jrubymethod name        compat   ruby1_9
public irubyobject map19 threadcontext context  block block
return block isgiven   ? collect context  block    enumeratorize context getruntime    this
/** rb_ary_collect_bang
*
*/
public rubyarray collectbang threadcontext context  block block
if   block isgiven    throw context getruntime   newlocaljumperrornoblock
modify
for  int i   0  len   reallength  i < len  i
// do not coarsen the "safe" check, since it will misinterpret aioobe from the yield
// see jruby-5434
store i  block yield context  safearrayref values  begin   i
return this
/** rb_ary_collect_bang
*
*/
@jrubymethod name
public irubyobject collect_bang threadcontext context  block block
return block isgiven   ? collectbang context  block    enumeratorize context getruntime    this
/** rb_ary_collect_bang
*
*/
@jrubymethod name
public irubyobject map_bang threadcontext context  block block
return block isgiven   ? collectbang context  block    enumeratorize context getruntime    this
/** rb_ary_select
*
*/
public irubyobject selectcommon threadcontext context  block block
ruby runtime   context getruntime
rubyarray result   new rubyarray runtime  reallength
for  int i   0  i < reallength  i
// do not coarsen the "safe" check, since it will misinterpret aioobe from the yield
// see jruby-5434
irubyobject value   safearrayref values  begin   i
if  block yield context  value  istrue    result append value
runtimehelpers fillnil result values  result reallength  result values length  runtime
return result
@jrubymethod
public irubyobject select threadcontext context  block block
return block isgiven   ? selectcommon context  block    enumeratorize context getruntime    this
@jrubymethod name      compat   ruby1_9
public irubyobject select_bang threadcontext context  block block
ruby runtime   context getruntime
if   block isgiven    return enumeratorize runtime  this
modify
int newlength   0
irubyobject aux   new irubyobject
for  int oldindex   0  oldindex < reallength  oldindex
// do not coarsen the "safe" check, since it will misinterpret
// aioobe from the yield (see jruby-5434)
irubyobject value   safearrayref values  begin   oldindex
if   block yield context  value  istrue    continue
aux   value
if  reallength    newlength  return runtime getnil       no change
safearraycopy aux  begin  values  begin  newlength
reallength   newlength
return this
@jrubymethod compat   ruby1_9
public irubyobject keep_if threadcontext context  block block
if   block isgiven
return enumeratorize context getruntime    this
select_bang context  block
return this
/** rb_ary_delete
*
*/
@jrubymethod required   1
public irubyobject delete threadcontext context  irubyobject item  block block
int i2   0
ruby runtime   context getruntime
for  int i1   0  i1 < reallength  i1
// do not coarsen the "safe" check, since it will misinterpret aioobe from equalinternal
// see jruby-5434
irubyobject e   safearrayref values  begin   i1
if  equalinternal context  e  item   continue
if  i1    i2  store i2  e
i2
if  reallength    i2
if  block isgiven    return block yield context  item
return runtime getnil
modify
final int myreallength   this reallength
final int mybegin   this begin
final irubyobject myvalues   this values
try
if  myreallength > i2
runtimehelpers fillnil myvalues  mybegin   i2  mybegin   myreallength  context getruntime
this reallength   i2
int valueslength   myvalues length   mybegin
if  i2 << 1 < valueslength    valueslength > array_default_size  realloc i2 << 1  valueslength
catch  arrayindexoutofboundsexception e
concurrentmodification
return item
/** rb_ary_delete_at
*
*/
public final irubyobject delete_at int pos
int len   reallength
if  pos >  len     pos < 0     pos    len  < 0   return getruntime   getnil
modify
irubyobject nil   getruntime   getnil
irubyobject obj   null     should never return null below
try
obj   values
// fast paths for head and tail
if  pos    0
values   nil
begin
reallength
return obj
else if  pos    reallength   1
values   nil
reallength
return obj
system arraycopy values  begin   pos   1  values  begin   pos  len    pos   1
values   getruntime   getnil
catch  arrayindexoutofboundsexception e
concurrentmodification
reallength
return obj
/** rb_ary_delete_at_m
*
*/
@jrubymethod name      required   1
public irubyobject delete_at irubyobject obj
return delete_at  int  rubynumeric num2long obj
/** rb_ary_reject_bang
*
*/
public irubyobject rejectcommon threadcontext context  block block
rubyarray ary   arydup
ary reject_bang context  block
return ary
@jrubymethod
public irubyobject reject threadcontext context  block block
return block isgiven   ? rejectcommon context  block    enumeratorize context getruntime    this
/** rb_ary_reject_bang
*
*/
public irubyobject rejectbang threadcontext context  block block
if   block isgiven    throw context getruntime   newlocaljumperrornoblock
int i2   0
modify
for  int i1   0  i1 < reallength  i1
// do not coarsen the "safe" check, since it will misinterpret aioobe from the yield
// see jruby-5434
irubyobject v   safearrayref values  begin   i1
if  block yield context  v  istrue    continue
if  i1    i2  store i2  v
i2
if  reallength    i2  return context getruntime   getnil
if  i2 < reallength
try
runtimehelpers fillnil values  begin   i2  begin   reallength  context getruntime
catch  arrayindexoutofboundsexception e
concurrentmodification
reallength   i2
return this
@jrubymethod name
public irubyobject reject_bang threadcontext context  block block
return block isgiven   ? rejectbang context  block    enumeratorize context getruntime    this
/** rb_ary_delete_if
*
*/
public irubyobject deleteif threadcontext context  block block
reject_bang context  block
return this
@jrubymethod
public irubyobject delete_if threadcontext context  block block
return block isgiven   ? deleteif context  block    enumeratorize context getruntime    this
/** rb_ary_zip
*
*/
@jrubymethod optional   1  rest   true
public irubyobject zip threadcontext context  irubyobject args  block block
ruby runtime   context getruntime
// array#zip whether 1.8 or 1.9 uses to_ary unlike enumerable version
args   rubyenumerable zipcommonconvert runtime  args
if  block isgiven
for  int i   0  i < reallength  i
irubyobject tmp   new irubyobject
// do not coarsen the "safe" check, since it will misinterpret aioobe from the yield
// see jruby-5434
tmp   safearrayref values  begin   i
for  int j   0  j < args length  j
tmp     rubyarray  args  elt i
block yield context  newarraynocopylight runtime  tmp
return runtime getnil
irubyobject result   new irubyobject
try
for  int i   0  i < reallength  i
irubyobject tmp   new irubyobject
tmp   values
for  int j   0  j < args length  j
tmp     rubyarray  args  elt i
result   newarraynocopylight runtime  tmp
catch  arrayindexoutofboundsexception aioob
concurrentmodification
return newarraynocopy runtime  result
/** rb_ary_cmp
*
*/
@jrubymethod name      required   1
public irubyobject op_cmp threadcontext context  irubyobject obj
ruby runtime   context getruntime
irubyobject ary2   runtime getnil
boolean isanarray    obj instanceof rubyarray     obj getmetaclass   getsuperclass      runtime getarray
if   isanarray     obj respondsto
return ary2
else if   isanarray
ary2   obj callmethod context
else
ary2   obj converttoarray
return cmpcommon context  runtime   rubyarray  ary2
private irubyobject cmpcommon threadcontext context  ruby runtime  rubyarray ary2
if  this    ary2    runtime isinspecting this   return rubyfixnum zero runtime
try
runtime registerinspecting this
int len   reallength
if  len > ary2 reallength  len   ary2 reallength
for  int i   0  i < len  i
irubyobject v   invokedynamic context  elt i   op_cmp  ary2 elt i
if    v instanceof rubyfixnum       rubyfixnum  v  getlongvalue      0  return v
finally
runtime unregisterinspecting this
int len   reallength   ary2 reallength
if  len    0  return rubyfixnum zero runtime
if  len > 0  return rubyfixnum one runtime
return rubyfixnum minus_one runtime
/**
* variable arity version for compatibility. not bound to a ruby method.
* @deprecated use the versions with zero, one, or two args.
*/
public irubyobject slice_bang irubyobject args
switch  args length
case 1
return slice_bang args
case 2
return slice_bang args  args
default
arity raiseargumenterror getruntime    args length  1  2
return null     not reached
private irubyobject slice_internal long pos  long len
irubyobject arg0  irubyobject arg1  ruby runtime
if len < 0  return runtime getnil
int orig_len   reallength
if pos < 0
pos    orig_len
if pos < 0
return runtime getnil
else if orig_len < pos
return runtime getnil
if orig_len < pos   len
len   orig_len   pos
if len    0
return runtime newemptyarray
arg1   makeshared begin    int pos   int len  getmetaclass
splice pos  len  null  false
return arg1
/** rb_ary_slice_bang
*
*/
@jrubymethod name
public irubyobject slice_bang irubyobject arg0
modifycheck
ruby runtime   getruntime
if  arg0 instanceof rubyrange
rubyrange range    rubyrange  arg0
if   range checkbegin reallength
return runtime getnil
long beglen   range beglen reallength  1
long pos   beglen
long len   beglen
return slice_internal pos  len  arg0  null  runtime
return delete_at  int  rubynumeric num2long arg0
/** rb_ary_slice_bang
*
*/
@jrubymethod name
public irubyobject slice_bang irubyobject arg0  irubyobject arg1
modifycheck
long pos   rubynumeric num2long arg0
long len   rubynumeric num2long arg1
return slice_internal pos  len  arg0  arg1  getruntime
/** rb_ary_assoc
*
*/
@jrubymethod name      required   1
public irubyobject assoc threadcontext context  irubyobject key
ruby runtime   context getruntime
for  int i   0  i < reallength  i
irubyobject v   eltok i
if  v instanceof rubyarray
rubyarray arr    rubyarray v
if  arr reallength > 0    equalinternal context  arr elt 0   key   return arr
return runtime getnil
/** rb_ary_rassoc
*
*/
@jrubymethod name      required   1
public irubyobject rassoc threadcontext context  irubyobject value
ruby runtime   context getruntime
for  int i   0  i < reallength  i
irubyobject v   eltok i
if  v instanceof rubyarray
rubyarray arr    rubyarray v
if  arr reallength > 1    equalinternal context  arr eltok 1   value   return arr
return runtime getnil
private boolean flatten threadcontext context  int level  rubyarray result
ruby runtime   context getruntime
rubyarray stack   new rubyarray runtime  array_default_size  false
identityhashmap<object  object> memo   new identityhashmap<object  object>
rubyarray ary   this
memo put ary  never
boolean modified   false
int i   0
try
while  true
irubyobject tmp
while  i < ary reallength
irubyobject elt   ary values
tmp   elt checkarraytype
if  tmp isnil       level >  0    stack reallength   2 >  level
result append elt
else
modified   true
if  memo get tmp     null  throw runtime newargumenterror
memo put tmp  never
stack append ary
stack append rubyfixnum newfixnum runtime  i
ary    rubyarray tmp
i   0
if  stack reallength    0  break
memo remove ary
tmp   stack pop context
i    int   rubyfixnum tmp  getlongvalue
ary    rubyarray stack pop context
catch  arrayindexoutofboundsexception aioob
concurrentmodification
return modified
@jrubymethod name      compat   ruby1_8
public irubyobject flatten_bang threadcontext context
ruby runtime   context getruntime
rubyarray result   new rubyarray runtime  getmetaclass    reallength
if  flatten context   1  result
modifycheck
isshared   false
begin   0
reallength   result reallength
values   result values
return this
return runtime getnil
@jrubymethod name      compat   ruby1_9
public irubyobject flatten_bang19 threadcontext context
modifycheck
return flatten_bang context
@jrubymethod name      compat   ruby1_8
public irubyobject flatten_bang threadcontext context  irubyobject arg
ruby runtime   context getruntime
int level   rubynumeric num2int arg
if  level    0  return runtime getnil
rubyarray result   new rubyarray runtime  getmetaclass    reallength
if  flatten context  level  result
isshared   false
begin   0
reallength   result reallength
values   result values
return this
return runtime getnil
@jrubymethod name      compat   ruby1_9
public irubyobject flatten_bang19 threadcontext context  irubyobject arg
modifycheck
return flatten_bang context  arg
@jrubymethod name      compat   ruby1_8
public irubyobject flatten threadcontext context
ruby runtime   context getruntime
rubyarray result   new rubyarray runtime  getmetaclass    reallength
flatten context   1  result
result infectby this
return result
@jrubymethod name      compat   ruby1_8
public irubyobject flatten threadcontext context  irubyobject arg
ruby runtime   context getruntime
int level   rubynumeric num2int arg
if  level    0  return this
rubyarray result   new rubyarray runtime  getmetaclass    reallength
flatten context  level  result
result infectby this
return result
@jrubymethod name      compat   ruby1_9
public irubyobject flatten19 threadcontext context
ruby runtime   context getruntime
rubyarray result   new rubyarray runtime  getmetaclass    reallength
flatten context   1  result
result infectby this
return result
@jrubymethod name      compat   ruby1_9
public irubyobject flatten19 threadcontext context  irubyobject arg
ruby runtime   context getruntime
int level   rubynumeric num2int arg
if  level    0  return makeshared
rubyarray result   new rubyarray runtime  getmetaclass    reallength
flatten context  level  result
result infectby this
return result
@jrubymethod name
public irubyobject count threadcontext context  block block
if  block isgiven
int n   0
for  int i   0  i < reallength  i
if  block yield context  elt i   istrue    n
return rubyfixnum newfixnum context getruntime    n
else
return rubyfixnum newfixnum context getruntime    reallength
@jrubymethod name
public irubyobject count threadcontext context  irubyobject obj  block block
if  block isgiven    context getruntime   getwarnings   warn id block_unused
int n   0
for  int i   0  i < reallength  i
if  equalinternal context  elt i   obj   n
return rubyfixnum newfixnum context getruntime    n
/** rb_ary_nitems
*
*/
@jrubymethod name
public irubyobject nitems
int n   0
for  int i   0  i < reallength  i
if   eltok i  isnil    n
return getruntime   newfixnum n
/** rb_ary_plus
*
*/
@jrubymethod name      required   1
public irubyobject op_plus irubyobject obj
rubyarray y   obj converttoarray
int len   reallength   y reallength
rubyarray z   new rubyarray getruntime    len
try
system arraycopy values  begin  z values  0  reallength
system arraycopy y values  y begin  z values  reallength  y reallength
catch  arrayindexoutofboundsexception e
concurrentmodification
z reallength   len
return z
/** rb_ary_times
*
*/
@jrubymethod name      required   1  compat   ruby1_8
public irubyobject op_times threadcontext context  irubyobject times
irubyobject tmp   times checkstringtype
if   tmp isnil    return join context  tmp
long len   rubynumeric num2long times
ruby runtime   context getruntime
if  len    0  return new rubyarray runtime  getmetaclass    irubyobject null_array
if  len < 0  throw runtime newargumenterror
if  long max_value   len < reallength
throw runtime newargumenterror
len    reallength
checklength runtime  len
rubyarray ary2   new rubyarray runtime  getmetaclass     int len
ary2 reallength   ary2 values length
try
for  int i   0  i < len  i    reallength
system arraycopy values  begin  ary2 values  i  reallength
catch  arrayindexoutofboundsexception e
concurrentmodification
ary2 infectby this
return ary2
/** rb_ary_times
*
*/
@jrubymethod name      required   1  compat   ruby1_9
public irubyobject op_times19 threadcontext context  irubyobject times
irubyobject tmp   times checkstringtype
if   tmp isnil    return join19 context  tmp
long len   rubynumeric num2long times
ruby runtime   context getruntime
if  len    0  return new rubyarray runtime  getmetaclass    irubyobject null_array  infectby this
if  len < 0  throw runtime newargumenterror
if  long max_value   len < reallength
throw runtime newargumenterror
len    reallength
checklength runtime  len
rubyarray ary2   new rubyarray runtime  getmetaclass     int len
ary2 reallength   ary2 values length
try
for  int i   0  i < len  i    reallength
system arraycopy values  begin  ary2 values  i  reallength
catch  arrayindexoutofboundsexception e
concurrentmodification
ary2 infectby this
return ary2
/** ary_make_hash
*
*/
private rubyhash makehash
return makehash new rubyhash getruntime    false
private rubyhash makehash rubyhash hash
int mybegin   this begin
for  int i   mybegin  i < mybegin   reallength  i
hash fastaset values  never
return hash
private rubyhash makehash rubyarray ary2
return ary2 makehash makehash
private rubyhash makehash threadcontext context  block block
return makehash context  new rubyhash getruntime    false   block
private rubyhash makehash threadcontext context  rubyhash hash  block block
int mybegin   this begin
for  int i   mybegin  i < mybegin   reallength  i
irubyobject v   elt i
irubyobject k   block yield context  v
if  hash fastaref k     null  hash fastaset k  v
return hash
/** rb_ary_uniq_bang
*
*/
@jrubymethod name      compat   ruby1_8
public irubyobject uniq_bang threadcontext context
rubyhash hash   makehash
if  reallength    hash size    return context getruntime   getnil
int j   0
for  int i   0  i < reallength  i
irubyobject v   elt i
if  hash fastdelete v   store j    v
reallength   j
return this
@jrubymethod name      compat   ruby1_9
public irubyobject uniq_bang19 threadcontext context  block block
modifycheck
if   block isgiven    return uniq_bang context
rubyhash hash   makehash context  block
if  reallength    hash size    return context getruntime   getnil
reallength   0
hash visitall new rubyhash visitor
@override
public void visit irubyobject key  irubyobject value
append value
return this
/** rb_ary_uniq
*
*/
@jrubymethod name      compat   ruby1_8
public irubyobject uniq threadcontext context
rubyhash hash   makehash
if  reallength    hash size    return makeshared
rubyarray result   new rubyarray context getruntime    getmetaclass    hash size
int j   0
try
for  int i   0  i < reallength  i
irubyobject v   elt i
if  hash fastdelete v   result values   v
catch  arrayindexoutofboundsexception aioob
concurrentmodification
result reallength   j
return result
@jrubymethod name      compat   ruby1_9
public irubyobject uniq19 threadcontext context  block block
if   block isgiven    return uniq context
rubyhash hash   makehash context  block
final rubyarray result   new rubyarray context getruntime    getmetaclass    hash size
hash visitall new rubyhash visitor
@override
public void visit irubyobject key  irubyobject value
result append value
return result
/** rb_ary_diff
*
*/
@jrubymethod name      required   1
public irubyobject op_diff irubyobject other
rubyhash hash   other converttoarray   makehash
rubyarray ary3   new rubyarray getruntime    array_default_size
int mybegin   this begin
try
for  int i   mybegin  i < mybegin   reallength  i
if  hash fastaref values     null  continue
ary3 append elt i   mybegin
catch  arrayindexoutofboundsexception aioob
concurrentmodification
runtimehelpers fillnil ary3 values  ary3 reallength  ary3 values length  getruntime
return ary3
/** rb_ary_and
*
*/
@jrubymethod name      required   1
public irubyobject op_and irubyobject other
rubyarray ary2   other converttoarray
rubyhash hash   ary2 makehash
rubyarray ary3   new rubyarray getruntime    reallength < ary2 reallength ? reallength   ary2 reallength
for  int i   0  i < reallength  i
irubyobject v   elt i
if  hash fastdelete v   ary3 append v
runtimehelpers fillnil ary3 values  ary3 reallength  ary3 values length  getruntime
return ary3
/** rb_ary_or
*
*/
@jrubymethod name      required   1
public irubyobject op_or irubyobject other
rubyarray ary2   other converttoarray
rubyhash set   makehash ary2
rubyarray ary3   new rubyarray getruntime    reallength   ary2 reallength
for  int i   0  i < reallength  i
irubyobject v   elt i
if  set fastdelete v   ary3 append v
for  int i   0  i < ary2 reallength  i
irubyobject v   ary2 elt i
if  set fastdelete v   ary3 append v
runtimehelpers fillnil ary3 values  ary3 reallength  ary3 values length  getruntime
return ary3
/** rb_ary_sort
*
*/
@jrubymethod compat   ruby1_8
public rubyarray sort threadcontext context  block block
rubyarray ary   arydup
ary sort_bang context  block
return ary
@jrubymethod name      compat   ruby1_9
public rubyarray sort19 threadcontext context  block block
rubyarray ary   arydup19
ary sort_bang19 context  block
return ary
/** rb_ary_sort_bang
*
*/
@jrubymethod name      compat   ruby1_8
public irubyobject sort_bang threadcontext context  block block
modify
if  reallength > 1
flags    tmplock_arr_f
try
return block isgiven   ? sortinternal context  block   sortinternal context  false
finally
flags    ~tmplock_arr_f
return this
@jrubymethod name      compat   ruby1_9
public irubyobject sort_bang19 threadcontext context  block block
modify
if  reallength > 1
return block isgiven   ? sortinternal context  block    sortinternal context  true
return this
private irubyobject sortinternal final threadcontext context  boolean honoroverride
// one check per specialized fast-path to make the check invariant.
final boolean fixnumbypass    honoroverride    context getruntime   newfixnum 0  isbuiltin
final boolean stringbypass    honoroverride    context getruntime   newstring    isbuiltin
try
qsort sort values  begin  begin   reallength  new comparator
public int compare object o1  object o2
if  fixnumbypass    o1 instanceof rubyfixnum    o2 instanceof rubyfixnum
return comparefixnums  rubyfixnum  o1   rubyfixnum  o2
if  stringbypass    o1 instanceof rubystring    o2 instanceof rubystring
return   rubystring  o1  op_cmp  rubystring  o2
return compareothers context   irubyobject o1   irubyobject o2
catch  arrayindexoutofboundsexception aioob
concurrentmodification
return this
private static int comparefixnums rubyfixnum o1  rubyfixnum o2
long a   o1 getlongvalue
long b   o2 getlongvalue
return a > b ? 1   a    b ? 0    1
private static int compareothers threadcontext context  irubyobject o1  irubyobject o2
irubyobject ret   invokedynamic context  o1  op_cmp  o2
int n   rubycomparable cmpint context  ret  o1  o2
//todo: ary_sort_check should be done here
return n
private irubyobject sortinternal final threadcontext context  final block block
irubyobject newvalues   new irubyobject
int length   reallength
safearraycopy values  begin  newvalues  0  length
qsort sort newvalues  0  length  new comparator
public int compare object o1  object o2
irubyobject obj1    irubyobject  o1
irubyobject obj2    irubyobject  o2
irubyobject ret   block yieldarray context  getruntime   newarray obj1  obj2   null  null
//todo: ary_sort_check should be done here
return rubycomparable cmpint context  ret  obj1  obj2
values   newvalues
begin   0
reallength   length
return this
/** rb_ary_sort_by_bang
*
*/
@jrubymethod name      compat   ruby1_9
public irubyobject sort_by_bang threadcontext context  block block
if   block isgiven    return enumeratorize context getruntime    this
modifycheck
rubyarray sorted   runtimehelpers invoke context  this     block  converttoarray
values   sorted values
isshared   false
begin   0
return this
/** rb_ary_take
*
*/
@jrubymethod name      compat   ruby1_9
public irubyobject take threadcontext context  irubyobject n
ruby runtime   context getruntime
long len   rubynumeric num2long n
if  len < 0  throw runtime newargumenterror
return subseq 0  len
/** rb_ary_take_while
*
*/
@jrubymethod name      compat   ruby1_9
public irubyobject take_while threadcontext context  block block
ruby runtime   context getruntime
if   block isgiven    return enumeratorize runtime  this
int i   0
for    i < reallength  i
if   block yield context  eltok i   istrue    break
return subseq 0  i
/** rb_ary_take
*
*/
@jrubymethod name      compat   ruby1_9
public irubyobject drop threadcontext context  irubyobject n
ruby runtime   context getruntime
long pos   rubynumeric num2long n
if  pos < 0  throw runtime newargumenterror
irubyobject result   subseq pos  reallength
return result isnil   ? runtime newemptyarray     result
/** rb_ary_take_while
*
*/
@jrubymethod name      compat   ruby1_9
public irubyobject drop_while threadcontext context  block block
ruby runtime   context getruntime
if   block isgiven    return enumeratorize runtime  this
int i   0
for    i < reallength  i
if   block yield context  eltok i   istrue    break
irubyobject result   subseq i  reallength
return result isnil   ? runtime newemptyarray     result
/** rb_ary_cycle
*
*/
@jrubymethod name
public irubyobject cycle threadcontext context  block block
if   block isgiven    return enumeratorize context getruntime    this
return cyclecommon context   1  block
/** rb_ary_cycle
*
*/
@jrubymethod name
public irubyobject cycle threadcontext context  irubyobject arg  block block
if  arg isnil    return cycle context  block
if   block isgiven    return enumeratorize context getruntime    this     arg
long times   rubynumeric num2long arg
if  times <  0  return context getruntime   getnil
return cyclecommon context  times  block
private irubyobject cyclecommon threadcontext context  long n  block block
while  reallength > 0     n < 0    0 < n
for  int i   0  i < reallength  i
block yield context  eltok i
return context getruntime   getnil
/** rb_ary_product
*
*/
@jrubymethod name      rest   true  compat   ruby1_8
public irubyobject product threadcontext context  irubyobject args
return product19 context  args  block null_block
@jrubymethod name      rest   true  compat   ruby1_9
public irubyobject product19 threadcontext context  irubyobject args  block block
ruby runtime   context getruntime
boolean useblock   block isgiven
int n   args length   1
rubyarray arrays   new rubyarray
int counters   new int
arrays   this
for  int i   1  i < n  i    arrays   args converttoarray
int resultlen   1
for  int i   0  i < n  i
int k   arrays reallength
int l   resultlen
if  k    0  return useblock ? this   newemptyarray runtime
resultlen    k
if  resultlen < k    resultlen < l    resultlen   k    l
if   block isgiven    throw runtime newrangeerror
rubyarray result   useblock ? null   newarray runtime  resultlen
for  int i   0  i < resultlen  i
rubyarray sub   newarray runtime  n
for  int j   0  j < n  j    sub append arrays entry counters
if  useblock
block yieldspecific context  sub
else
result append sub
int m   n   1
counters
while  m > 0    counters    arrays reallength
counters   0
m
counters
return useblock ? this   result
/** rb_ary_combination
*
*/
@jrubymethod name
public irubyobject combination threadcontext context  irubyobject num  block block
ruby runtime   context getruntime
if   block isgiven    return enumeratorize runtime  this     num
int n   rubynumeric num2int num
if  n    0
block yield context  newemptyarray runtime
else if  n    1
for  int i   0  i < reallength  i
block yield context  newarray runtime  eltok i
else if  n >  0    reallength >  n
int stack   new int
irubyobject chosen   new irubyobject
int lev   0
stack    1
for
chosen   eltok stack
for  lev    lev < n  lev
chosen   eltok stack   stack   1
block yield context  newarray runtime  chosen
do
if  lev    0  return this
stack
while  stack   n    reallength   lev   1
return this
@jrubymethod name      compat   ruby1_9
public irubyobject repeatedcombination threadcontext context  irubyobject num  block block
ruby runtime   context getruntime
if   block isgiven    return enumeratorize runtime  this     num
int n   rubynumeric num2int num
int myreallength   reallength
irubyobject myvalues   new irubyobject
safearraycopy values  begin  myvalues  0  reallength
if  n < 0
// yield nothing
else if  n    0
block yield context  newemptyarray runtime
else if  n    1
for  int i   0  i < myreallength  i
block yield context  newarray runtime  myvalues
else
int stack   new int
repeatcombination context  runtime  myvalues  stack  0  myreallength   1  block
return this
private static void repeatcombination threadcontext context  ruby runtime  irubyobject values  int stack  int index  int max  block block
if  index    stack length
irubyobject obj   new irubyobject
for  int i   0  i < obj length  i
int idx   stack
obj   values
block yield context  newarray runtime  obj
else
int minvalue   0
if  index > 0
minvalue   stack
for  int i   minvalue  i <  max  i
stack   i
repeatcombination context  runtime  values  stack  index   1  max  block
private void permute threadcontext context  int n  int r  intp  int index  booleanused  boolean repeat  rubyarray values  block block
for  int i   0  i < n  i
if  repeat     used
p   i
if  index < r   1
used   true
permute context  n  r  p  index   1  used  repeat  values  block
used   false
else
rubyarray result   newarray context getruntime    r
for  int j   0  j < r  j
result values   values values]
result reallength   r
block yield context  result
/** rb_ary_permutation
*
*/
@jrubymethod name
public irubyobject permutation threadcontext context  irubyobject num  block block
return block isgiven   ? permutationcommon context  rubynumeric num2int num   false  block    enumeratorize context getruntime    this     num
@jrubymethod name
public irubyobject permutation threadcontext context  block block
return block isgiven   ? permutationcommon context  reallength  false  block    enumeratorize context getruntime    this
@jrubymethod name      compat   ruby1_9
public irubyobject repeated_permutation threadcontext context  irubyobject num  block block
return block isgiven   ? permutationcommon context  rubynumeric num2int num   true  block    enumeratorize context getruntime    this     num
@jrubymethod name      compat   ruby1_9
public irubyobject repeated_permutation threadcontext context  block block
return block isgiven   ? permutationcommon context  reallength  true  block    enumeratorize context getruntime    this
private irubyobject permutationcommon threadcontext context  int r  boolean repeat  block block
if  r    0
block yield context  newemptyarray context getruntime
else if  r    1
for  int i   0  i < reallength  i
block yield context  newarray context getruntime    eltok i
else if  r >  0
int n   reallength
permute context  n  r
new int  0
new boolean
repeat
makeshared begin  n  getmetaclass     block
return this
@jrubymethod name      compat   ruby1_8
public irubyobject choice threadcontext context
if  reallength    0
return context nil
return eltok  int   context runtime getdefaultrand   genrandreal     reallength
@jrubymethod name      compat   ruby1_8
public irubyobject shuffle_bang threadcontext context
modify
int i   reallength
try
while  i > 0
int r    int  context runtime getdefaultrand   genrandreal     i
irubyobject tmp   eltok   i
values   eltok r
values   tmp
catch  arrayindexoutofboundsexception e
concurrentmodification
return this
@jrubymethod name      optional   1  compat   ruby1_9
public irubyobject shuffle_bang threadcontext context  irubyobject args
modify
irubyobject randgen   context runtime getrandomclass
if  args length > 0
irubyobject hash   typeconverter checkhashtype context runtime  args
if   hash isnil
randgen     rubyhash  hash  fastaref context runtime newsymbol
int i   reallength
try
while  i > 0
int r    int   rubyrandom randomreal context  randgen    i
irubyobject tmp   eltok   i
values   eltok r
values   tmp
catch  arrayindexoutofboundsexception e
concurrentmodification
return this
@jrubymethod name      compat   ruby1_8
public irubyobject shuffle threadcontext context
rubyarray ary   arydup
ary shuffle_bang context
return ary
@jrubymethod name      optional   1  compat   ruby1_9
public irubyobject shuffle threadcontext context  irubyobject args
rubyarray ary   arydup19
ary shuffle_bang context  args
return ary
private static int sorted_threshold   10
@jrubymethod name      optional   2  compat   ruby1_9
public irubyobject sample threadcontext context  irubyobject args
try
irubyobject randgen   context runtime getrandomclass
if  args length    0
if  reallength    0
return context nil
int i   reallength    1 ? 0   randomreal context  randgen  reallength
return eltok i
if  args length > 0
irubyobject hash   typeconverter checkhashtype context runtime
args
if   hash isnil
randgen     rubyhash  hash  fastaref context runtime newsymbol
irubyobject newargs   new irubyobject
system arraycopy args  0  newargs  0  args length   1
args   newargs
if  args length    0
if  reallength    0
return context nil
else if  reallength    1
return eltok 0
return eltok randomreal context  randgen  reallength
ruby runtime   context getruntime
int n   rubynumeric num2int args
if  n < 0
throw runtime newargumenterror
if  n > reallength
n   reallength
double rnds   new double
if  n <  sorted_threshold
for  int idx   0  idx < n    idx
rnds   rubyrandom randomreal context  randgen
int i  j  k
switch  n
case 0
return newemptyarray runtime
case 1
if  reallength <  0
return newemptyarray runtime
return newarray runtime  eltok  int   rnds   reallength
case 2
i    int   rnds   reallength
j    int   rnds    reallength   1
if  j >  i
j
return newarray runtime  eltok i   eltok j
case 3
i    int   rnds   reallength
j    int   rnds    reallength   1
k    int   rnds    reallength   2
int l   j
g   i
if  j >  i
l   i
g     j
if  k >  l       k >  g
k
return new rubyarray runtime  new irubyobject   eltok i
eltok j   eltok k
int len   reallength
if  n > len
n   len
if  n < sorted_threshold
int idx   new int
int sorted   new int
sorted   idx    int   rnds   len
for  i   1  i < n  i
k    int   rnds     len
for  j   0  j < i  j
if  k < sorted
break
k
system arraycopy sorted  j  sorted  j   1  i   j
sorted   idx   k
irubyobject result   new irubyobject
for  i   0  i < n  i
result   eltok idx
return new rubyarray runtime  result
else
irubyobject result   new irubyobject
system arraycopy values  begin  result  0  len
for  i   0  i < n  i
j   randomreal context  randgen  len   i    i
irubyobject tmp   result
result   result
result   tmp
rubyarray ary   new rubyarray runtime  result
ary reallength   n
return ary
catch  arrayindexoutofboundsexception aioob
concurrentmodification
return this     not reached
private int randomreal threadcontext context  irubyobject randgen  int len
return  int   rubyrandom randomreal context  randgen    len
private static void aryreverse irubyobject _p1  int p1  irubyobject _p2  int p2
while p1 < p2
irubyobject tmp   _p1
_p1   _p2
_p2   tmp
private irubyobject internalrotatebang threadcontext context  int cnt
modify
try
if cnt    0
irubyobject ptr   values
int len   reallength
if len > 0     cnt   rotatecount cnt  len   > 0
len
if cnt < len  aryreverse ptr  begin   cnt  ptr  begin   len
if   cnt > 0  aryreverse ptr  begin  ptr  begin   cnt
if len > 0    aryreverse ptr  begin  ptr  begin   len
return this
catch  arrayindexoutofboundsexception aioob
concurrentmodification
return context getruntime   getnil
private static int rotatecount int cnt  int len
return  cnt < 0  ?  len    ~cnt % len    1     cnt % len
private irubyobject internalrotate threadcontext context  int cnt
int len   reallength
rubyarray rotated   arydup
rotated modify
try
if len > 0
cnt   rotatecount cnt  len
irubyobject ptr   this values
irubyobject ptr2   rotated values
len    cnt
system arraycopy ptr  begin   cnt  ptr2  0  len
system arraycopy ptr  begin  ptr2  len  cnt
catch  arrayindexoutofboundsexception aioob
concurrentmodification
return rotated
@jrubymethod name      compat   ruby1_9
public irubyobject rotate_bang threadcontext context
internalrotatebang context  1
return this
@jrubymethod name      compat   ruby1_9
public irubyobject rotate_bang threadcontext context  irubyobject cnt
internalrotatebang context  rubynumeric fix2int cnt
return this
@jrubymethod name      compat   ruby1_9
public irubyobject rotate threadcontext context
return internalrotate context  1
@jrubymethod name      compat   ruby1_9
public irubyobject rotate threadcontext context  irubyobject cnt
return internalrotate context  rubynumeric fix2int cnt
// enumerable direct implementations (non-"each" versions)
public irubyobject all_p threadcontext context  block block
if   isbuiltin     return rubyenumerable all_pcommon context  this  block
if   block isgiven    return all_pblockless context
for  int i   0  i < reallength  i
if   block yield context  eltok i   istrue    return context getruntime   getfalse
return context getruntime   gettrue
private irubyobject all_pblockless threadcontext context
for  int i   0  i < reallength  i
if   eltok i  istrue    return context getruntime   getfalse
return context getruntime   gettrue
public irubyobject any_p threadcontext context  block block
if   isbuiltin     return rubyenumerable any_pcommon context  this  block
if   block isgiven    return any_pblockless context
for  int i   0  i < reallength  i
if  block yield context  eltok i   istrue    return context getruntime   gettrue
return context getruntime   getfalse
private irubyobject any_pblockless threadcontext context
for  int i   0  i < reallength  i
if  eltok i  istrue    return context getruntime   gettrue
return context getruntime   getfalse
public irubyobject find threadcontext context  irubyobject ifnone  block block
if   isbuiltin     return rubyenumerable detectcommon context  this  block
return detectcommon context  ifnone  block
public irubyobject find_index threadcontext context  block block
if   isbuiltin     return rubyenumerable find_indexcommon context  this  block
for  int i   0  i < reallength  i
if  block yield context  eltok i   istrue    return context getruntime   newfixnum i
return context getruntime   getnil
public irubyobject find_index threadcontext context  irubyobject cond
if   isbuiltin     return rubyenumerable find_indexcommon context  this  cond
for  int i   0  i < reallength  i
if  eltok i  equals cond   return context getruntime   newfixnum i
return context getruntime   getnil
public irubyobject detectcommon threadcontext context  irubyobject ifnone  block block
for  int i   0  i < reallength  i
irubyobject value   eltok i
if  block yield context  value  istrue    return value
return ifnone    null ? ifnone callmethod context
context getruntime   getnil
public static void marshalto rubyarray array  marshalstream output  throws ioexception
output registerlinktarget array
int length   array reallength
int begin   array begin
irubyobject ary   array values
output writeint length
try
for  int i   0  i < length  i
output dumpobject ary
catch  arrayindexoutofboundsexception aioob
concurrentmodification array getruntime
public static rubyarray unmarshalfrom unmarshalstream input  throws ioexception
int size   input unmarshalint
// we create this now with an empty, nulled array so it's available for links in the marshal data
rubyarray result   input getruntime   newarray size
input registerlinktarget result
for  int i   0  i < size  i
result append input unmarshalobject
return result
@jrubymethod name      meta   true  compat   ruby1_9
public static irubyobject try_convert threadcontext context  irubyobject self  irubyobject arg
return arg checkarraytype
/**
* @see org.jruby.util.pack#pack
*/
@jrubymethod name      required   1  compat   ruby1_8
public rubystring pack threadcontext context  irubyobject obj
rubystring ifmt   obj converttostring
try
return pack pack getruntime    this  ifmt getbytelist    ifmt istaint
catch  arrayindexoutofboundsexception aioob
concurrentmodification
return null     not reached
@jrubymethod name      required   1  compat   ruby1_9
public rubystring pack19 threadcontext context  irubyobject obj
rubystring ifmt   obj converttostring
try
return pack pack19 context  context getruntime    this  ifmt
catch  arrayindexoutofboundsexception aioob
concurrentmodification
return null     not reached
@override
public class getjavaclass
return list class
/**
* copy the values contained in this array into the target array at the specified offset.
* it is expected that the target array is large enough to hold all necessary values.
*/
public void copyinto irubyobject target  int start
assert target length   start >  reallength
safearraycopy values  begin  target  start  reallength
// satisfy java.util.list interface (for java integration)
public int size
return reallength
public boolean isempty
return reallength    0
public boolean contains object element
return indexof element      1
public object toarray
// no catch for arrayindexoutofbounds here because this impls a list method
object array   new object
for  int i   0  i < reallength  i
array   values tojava object class
return array
public object toarray final object arg
// no catch for arrayindexoutofbounds here because this impls a list method
object array   arg
class type   array getclass   getcomponenttype
if  array length < reallength
array    object  array newinstance type  reallength
int length   reallength   begin
for  int i   0  i < length  i
array   values tojava type
return array
@override
public object tojava class target
if  target isarray
class type   target getcomponenttype
object rawjavaarray   array newinstance type  reallength
try
arrayjavaaddons copydatatojavaarraydirect getruntime   getcurrentcontext    this  rawjavaarray
catch  arrayindexoutofboundsexception aioob
concurrentmodification
return rawjavaarray
else
return super tojava target
public boolean add object element
append javautil convertjavatousablerubyobject getruntime    element
return true
public boolean remove object element
ruby runtime   getruntime
threadcontext context   runtime getcurrentcontext
irubyobject item   javautil convertjavatousablerubyobject runtime  element
boolean listchanged   false
for  int i1   0  i1 < reallength  i1
irubyobject e   values
if  equalinternal context  e  item
delete_at i1
listchanged   true
break
return listchanged
public boolean containsall collection c
for  iterator iter   c iterator    iter hasnext
if  indexof iter next        1
return false
return true
public boolean addall collection c
for  iterator iter   c iterator    iter hasnext
add iter next
return  c isempty
public boolean addall int index  collection c
iterator iter   c iterator
for  int i   index  iter hasnext    i
add i  iter next
return  c isempty
public boolean removeall collection c
boolean listchanged   false
for  iterator iter   c iterator    iter hasnext
irubyobject deleted   delete getruntime   getcurrentcontext    javautil convertjavatousablerubyobject getruntime    iter next     block null_block
if   deleted isnil
listchanged   true
return listchanged
public boolean retainall collection c
boolean listchanged   false
for  iterator iter   iterator    iter hasnext
object element   iter next
if   c contains element
remove element
listchanged   true
return listchanged
public object get int index
return elt index  tojava object class
public object set int index  object element
return store index  javautil convertjavatousablerubyobject getruntime    element
// todo: make more efficient by not creating irubyarray[]
public void add int index  object element
insert new irubyobject rubyfixnum newfixnum getruntime    index   javautil convertjavatousablerubyobject getruntime    element
public object remove int index
return delete_at index  tojava object class
public int indexof object element
int mybegin   this begin
if  element    null
irubyobject convertedelement   javautil convertjavatousablerubyobject getruntime    element
for  int i   mybegin  i < mybegin   reallength  i
if  convertedelement equals values
return i
return  1
public int lastindexof object element
int mybegin   this begin
if  element    null
irubyobject convertedelement   javautil convertjavatousablerubyobject getruntime    element
for  int i   mybegin   reallength   1  i >  mybegin  i
if  convertedelement equals values
return i
return  1
public class rubyarrayconversioniterator implements iterator
protected int index   0
protected int last    1
public boolean hasnext
return index < reallength
public object next
irubyobject element   elt index
last   index
return element tojava object class
public void remove
if  last     1  throw new illegalstateexception
delete_at last
if  last < index  index
last    1
public iterator iterator
return new rubyarrayconversioniterator
final class rubyarrayconversionlistiterator extends rubyarrayconversioniterator implements listiterator
public rubyarrayconversionlistiterator
public rubyarrayconversionlistiterator int index
this index   index
public boolean hasprevious
return index >  0
public object previous
return elt last     index  tojava object class
public int nextindex
return index
public int previousindex
return index   1
public void set object obj
if  last     1
throw new illegalstateexception
store last  javautil convertjavatousablerubyobject getruntime    obj
public void add object obj
insert new irubyobject   rubyfixnum newfixnum getruntime    index     javautil convertjavatousablerubyobject getruntime    obj
last    1
public listiterator listiterator
return new rubyarrayconversionlistiterator
public listiterator listiterator int index
return new rubyarrayconversionlistiterator index
// todo: list.sublist(from, to).clear() is supposed to clear the sublist from the list.
// how can we support this operation?
public list sublist int fromindex  int toindex
if  fromindex < 0    toindex > size      fromindex > toindex
throw new indexoutofboundsexception
irubyobject sublist   subseq fromindex  toindex   fromindex   1
return sublist isnil   ? null    list  sublist
public void clear
rb_clear
private irubyobject safearrayref irubyobject values  int i
return safearrayref getruntime    values  i
private irubyobject safearrayref ruby runtime  irubyobject values  int i
try
return values
catch  arrayindexoutofboundsexception x
concurrentmodification runtime
return null     not reached
private irubyobject safearrayset irubyobject values  int i  irubyobject value
return safearrayset getruntime    values  i  value
private static irubyobject safearrayset ruby runtime  irubyobject values  int i  irubyobject value
try
return values   value
catch  arrayindexoutofboundsexception e
concurrentmodification runtime
return null     not reached
private irubyobject safearrayrefset irubyobject values  int i  irubyobject value
return safearrayrefset getruntime    values  i  value
private static irubyobject safearrayrefset ruby runtime  irubyobject values  int i  irubyobject value
try
irubyobject tmp   values
values   value
return tmp
catch  arrayindexoutofboundsexception e
concurrentmodification runtime
return null     not reached
private irubyobject safearrayrefcondset irubyobject values  int i  boolean doset  irubyobject value
return safearrayrefcondset getruntime    values  i  doset  value
private static irubyobject safearrayrefcondset ruby runtime  irubyobject values  int i  boolean doset  irubyobject value
try
irubyobject tmp   values
if  doset  values   value
return tmp
catch  arrayindexoutofboundsexception e
concurrentmodification runtime
return null     not reached
private void safearraycopy irubyobject source  int sourcestart  irubyobject target  int targetstart  int length
safearraycopy getruntime    source  sourcestart  target  targetstart  length
private void safearraycopy ruby runtime  irubyobject source  int sourcestart  irubyobject target  int targetstart  int length
try
system arraycopy source  sourcestart  target  targetstart  length
catch  arrayindexoutofboundsexception e
concurrentmodification runtime
// not reached