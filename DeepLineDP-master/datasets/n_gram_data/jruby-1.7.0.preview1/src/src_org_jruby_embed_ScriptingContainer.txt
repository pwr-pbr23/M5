/**
* **** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2009-2011 yoko harada <yokolet@gmail.com>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
* **** end license block *****
*/
package org jruby embed
import java io unsupportedencodingexception
import org jruby embed internal localcontextprovider
import java io inputstream
import java io printstream
import java io printwriter
import java io reader
import java io writer
import java net urisyntaxexception
import java util hashmap
import java util list
import java util map
import org jruby compatversion
import org jruby profile
import org jruby ruby
import org jruby rubyglobal inputglobalvariable
import org jruby rubyglobal outputglobalvariable
import org jruby rubyio
import org jruby rubyinstanceconfig compilemode
import org jruby rubyinstanceconfig loadservicecreator
import org jruby rubyinstanceconfig profilingmode
import org jruby embed internal bivariablemap
import org jruby embed internal concurrentlocalcontextprovider
import org jruby embed internal embedrubyinterfaceadapterimpl
import org jruby embed internal embedrubyobjectadapterimpl
import org jruby embed internal embedrubyruntimeadapterimpl
import org jruby embed internal singlethreadlocalcontextprovider
import org jruby embed internal singletonlocalcontextprovider
import org jruby embed internal threadsafelocalcontextprovider
import org jruby embed io readerinputstream
import org jruby embed io writeroutputstream
import org jruby embed util systempropertycatcher
import org jruby javasupport javaembedutils
import org jruby runtime block
import org jruby runtime builtin irubyobject
import org jruby util classcache
import org jruby util kcode
import org jruby util cli outputstrings
/**
* scriptingcontainer provides various methods and resources that are useful
* for embedding ruby in java. using this class, users can run ruby scripts from
* java programs easily. also, users can use methods defined or implemented by ruby.
*
* scriptingcontainer allows users to set various configuration parameters.
* some of them are per-container properties, while others are per-evaluation attributes.
* for example, a local context scope, local variable behavior, load paths are
* per-container properties. please see {@link propertyname} and {@link attributename}
* for more details. be aware that the per-container properties should be set prior to
* get ruby runtime be instantiated; otherwise, default values are applied to.
* scriptingcontainer delays ruby runtime initialization as much as possible to
* improve startup time. when values are put into the scriptingcontainer, or runscriptlet
* method gets run ruby runtime is created internally. however, the default, singleton
* local context scope behave slightly different. if ruby runtime has been already instantiated
* by another scriptingcontainer, application, etc, the same runtime will be used.
*
* below are examples.
*
* the first example is a very simple hello world. after initializing a scriptingcontainer,
* a ruby script, puts "hello world!", runs and produces "hello world!."
* <pre>example 1:
*
*         scriptingcontainer container = new scriptingcontainer();
*         container.runscriptlet("puts \"hello world!\"");
*
* produces:
* hello world!</pre>
*
* the second example shows how to share variables between java and ruby.
* in this example, a local variable "x" is shared. to make this happen, a local variable
* behavior should be transient or persistent. as for jsr223 jruby engine, set these
* types using system property, org.jruby.embed.localvariable.behavior. if the local
* variable behavior is one of transient or persistent,
* ruby's local, instance, global variables and constants are available to share
* between java and ruby. (a class variable sharing does not work on current version)
* thus, "x" in java is also "x" in ruby.
*
* <pre>example 2:
*
*         scriptingcontainer container = new scriptingcontainer();
*         container.put("x", 12345);
*         container.runscriptlet("puts x.to_s(2)");
*
* produces:
* 11000000111001</pre>
*
* the third examples shows how to keep local variables across multiple evaluations.
* this feature simulates bsf engine for jruby. in terms of ruby semantics,
* local variables should not survive after the evaluation has completed. thus,
* this behavior is optional, and users need to specify localvariablebehavior.persistent
* when the container is instantiated.
*
* <pre>example 3:
*
*         scriptingcontainer container = new scriptingcontainer(localvariablebehavior.persistent);
*         container.runscriptlet("p=9.0");
*         container.runscriptlet("q = math.sqrt p");
*         container.runscriptlet("puts \"square root of #{p} is #{q}\"");
*         system.out.println("ruby used values: p = " + container.get("p") +
*               ", q = " + container.get("q"));
*
* produces:
* square root of 9.0 is 3.0
* ruby used values: p = 9.0, q = 3.0</pre>
*
* also, scriptingcontainer provides better i18n support. for example,
* unicode escape sequence can be included in ruby scripts.
*
* <p>in addition, scriptingcontainer supports a parse-once-eval-many-times feature,
* invoking methods defined by ruby, and getting an instance of a specified interface
* that has been implemented by ruby.
*
* <pre>example 4:
*         scriptingcontainer container = new scriptingcontainer();
*         script =
*          "def message\n" +
*              "\"message: #{@message}\"\n" +
*          "end\n" +
*          "message";
*         container.put("@message", "what's up?");
*         evalunit unit = container.parse(script);
*         irubyobject ret = unit.run();
*         system.out.println(javaembedutils.rubytojava(ret));
*         container.put("@message", "fabulous!");
*         ret = unit.run();
*         system.out.println(javaembedutils.rubytojava(ret));
*         container.put("@message", "that's the way you are.");
*         ret = unit.run();
*         system.out.println(javaembedutils.rubytojava(ret));
*
* produces:
*     message: what's up?
*     message: fabulous!
*     message: that's the way you are.</pre>
*
* see more details at project's
* {@see <a href="http://kenai.com/projects/jruby/pages/redbridge">wiki</a>}
*
* @author yoko harada <yokolet@gmail.com>
*/
public class scriptingcontainer implements embedrubyinstanceconfigadapter
private map basicproperties   null
private localcontextprovider provider   null
private embedrubyruntimeadapter runtimeadapter   new embedrubyruntimeadapterimpl this
private embedrubyobjectadapter objectadapter   new embedrubyobjectadapterimpl this
private embedrubyinterfaceadapter interfaceadapter   new embedrubyinterfaceadapterimpl this
/**
* constructs a scriptingcontainer with a default values.
*/
public scriptingcontainer
this localcontextscope singleton  localvariablebehavior transient  true
/**
* constructs a scriptingcontainer with a specified local context type.
*
* @param scope a local context type.
*/
public scriptingcontainer localcontextscope scope
this scope  localvariablebehavior transient  true
/**
* constructs a scriptingcontainer with a specified local variable behavior.
*
* @param behavior a local variable behavior
*/
public scriptingcontainer localvariablebehavior behavior
this localcontextscope singleton  behavior  true
/**
* constructs a scriptingcontainer with a specified local context type and
* variable behavior.
*
* @param scope a local context type
* @param behavior a local variable behavior
*/
public scriptingcontainer localcontextscope scope  localvariablebehavior behavior
this scope  behavior  true
/**
* constructs a scriptingcontainer with a specified local context scope,
* local variable behavior and laziness.
*
* @param scope is one of a local context scope defined by {@link localcontextscope}
* @param behavior is one of a local variable behavior defined by {@link localvariablebehavior}
* @param lazy is a switch to do lazy retrieval of variables/constants from
*        ruby runtime. default is true. when this value is true, scriptingcontainer tries to
*        get as many variables/constants as possible from ruby runtime.
*/
public scriptingcontainer localcontextscope scope  localvariablebehavior behavior  boolean lazy
provider   getproviderinstance scope  behavior  lazy
try
initconfig
catch  exception ex
throw new runtimeexception ex
setbasicproperties
private localcontextprovider getproviderinstance localcontextscope scope  localvariablebehavior behavior  boolean lazy
switch scope
case threadsafe
return new threadsafelocalcontextprovider behavior  lazy
case concurrent
return new concurrentlocalcontextprovider behavior  lazy
case singlethread
return new singlethreadlocalcontextprovider behavior  lazy
case singleton
default
localvariablebehavior b   singletonlocalcontextprovider getlocalvariablebehaviorornull
if  b    null  return new singletonlocalcontextprovider behavior  lazy
else return new singletonlocalcontextprovider b  lazy
private void initconfig   throws urisyntaxexception  unsupportedencodingexception
list<string> paths   systempropertycatcher findloadpaths
provider getrubyinstanceconfig   setloadpaths paths
string home   systempropertycatcher findjrubyhome this
if  home    null
provider getrubyinstanceconfig   setjrubyhome home
provider getrubyinstanceconfig   setcompilemode compilemode off
provider getrubyinstanceconfig   setscriptfilename
// maybe these properties are not used at all?
private void setbasicproperties
basicproperties   new hashmap
basicproperties put    new string
basicproperties put    new string
basicproperties put    new string
basicproperties put    new string
/**
* returns a list of load paths for ruby scripts/libraries. if no paths is
* given, the list is created from java.class.path system property.
*
* @since jruby 1.5.0.
*
* @return a list of load paths.
*/
public list<string> getloadpaths
return provider getrubyinstanceconfig   getloadpaths
/**
* changes a list of load paths ruby scripts/libraries. the default value
* is an empty array. if no paths is given, the list is created from
* java.class.path system property. this value can be set by
* org.jruby.embed.class.path system property, also.
* call this method before you use put/get, runscriptlet, and parse methods so that
* the given paths will be used.
*
* @since jruby 1.5.0.
*
* @param paths a new list of load paths.
*/
public void setloadpaths list<string> paths
provider getrubyinstanceconfig   setloadpaths paths
/**
* returns an input stream assigned to stdin and $stdin.
*
* @since jruby 1.5.0.
*
* @return input stream of stdin and $stdin
*/
public inputstream getinput
return provider getrubyinstanceconfig   getinput
/**
* changes stdin and $stdin to a given input stream. the default standard input
* is java.lang.system.in.
* call this method before you use put/get, runscriptlet, and parse methods so that
* the given input stream will be used.
*
* @since jruby 1.5.0.
*
* @param istream an input stream to be set
*/
public void setinput inputstream istream
provider getrubyinstanceconfig   setinput istream
/**
* changes stdin and $stdin to a given reader. no reader is set by default.
* call this method before you use put/get, runscriptlet, and parse methods so that
* the given reader will be used.
*
* @since jruby 1.5.0.
*
* @param reader a reader to be set
*/
public void setinput reader reader
if  reader    null
provider getrubyinstanceconfig   setinput null
else
readerinputstream istream   new readerinputstream reader
provider getrubyinstanceconfig   setinput istream
/**
* returns an output stream assigned to stdout and $stdout.
*
* @since jruby 1.5.0.
*
* @return an output stream of stdout and $stdout
*/
public printstream getoutput
return provider getrubyinstanceconfig   getoutput
/**
* changes stdout and $stdout to a given output stream. the default standard
* output is java.lang.system.out.
* call this method before you use put/get, runscriptlet, and parse methods so that
* the given output stream will be used.
*
* @since jruby 1.5.0.
*
* @param pstream an output stream to be set
*/
public void setoutput printstream pstream
provider getrubyinstanceconfig   setoutput pstream
/**
* changes stdout and $stdout to a given writer. no writer is set by default.
* call this method before you use put/get, runscriptlet, and parse methods so that
* the given writer will be used.
*
* @since jruby 1.5.0.
*
* @param writer a writer to be set
*/
public void setoutput writer writer
if  writer    null
provider getrubyinstanceconfig   setoutput null
else
writeroutputstream ostream   new writeroutputstream writer
printstream pstream   new printstream ostream
provider getrubyinstanceconfig   setoutput pstream
/**
* returns an error stream assigned to stderr and $stderr.
*
* @since jruby 1.5.0.
*
* @return output stream for error stream
*/
public printstream geterror
return provider getrubyinstanceconfig   geterror
/**
* changes stderr and $stderr to a given print stream. the default standard error
* is java.lang.system.err.
* call this method before you use put/get, runscriptlet, and parse methods so that
* the given print stream will be used.
*
* @since jruby 1.5.0.
*
* @param pstream a print stream to be set
*/
public void seterror printstream pstream
provider getrubyinstanceconfig   seterror pstream
/**
* changes stderr and $stderr to a given writer. no writer is set by default.
* call this method before you use put/get, runscriptlet, and parse methods so that
* the given writer will be used.
*
* @since jruby 1.5.0.
*
* @param writer a writer to be set
*/
public void seterror writer writer
if  writer    null
provider getrubyinstanceconfig   seterror null
else
writeroutputstream ostream   new writeroutputstream writer
printstream pstream   new printstream ostream
provider getrubyinstanceconfig   seterror pstream
/**
* returns a compile mode currently chosen, which is one of compilemode.jit,
* compilemode.force, compilemode.off. the default mode is compilemode.off
* if compatversion.ruby1_9 is chosen, otherwise, compilemode.jit. also,
* compilemode.off is chosen when a security restriction is set.
*
* @since jruby 1.5.0.
*
* @return a compile mode.
*/
public compilemode getcompilemode
return provider getrubyinstanceconfig   getcompilemode
/**
* changes a compile mode to a given mode, which should be one of compilemode.jit,
* compilemode.force, compilemode.off.
* call this method before you use put/get, runscriptlet, and parse methods so that
* the given mode will be used.
*
* @since jruby 1.5.0.
*
* @param mode compile mode
*/
public void setcompilemode compilemode mode
provider getrubyinstanceconfig   setcompilemode mode
/**
* tests whether ruby runs in a process or not.
*
* @since jruby 1.5.0.
*
* @return true if ruby is configured to run in a process, otherwise, false.
*/
public boolean isrunrubyinprocess
return provider getrubyinstanceconfig   isrunrubyinprocess
/**
* changes the value to determine whether ruby runs in a process or not. the
* default value is true.
* call this method before you use put/get, runscriptlet, and parse methods so that
* the given condition will be set.
*
* @since jruby 1.5.0.
*
* @param inprocess true when ruby is set to run in the process, or false not to
* run in the process.
*/
public void setrunrubyinprocess boolean inprocess
provider getrubyinstanceconfig   setrunrubyinprocess inprocess
/**
* returns a ruby version currently chosen, which is one of compatversion.ruby1_8,
* compatversion.ruby1_9, or compatversion.both. the default version is
* compatversion.ruby1_8.
*
* @since jruby 1.5.0.
*
* @return a ruby version
*/
public compatversion getcompatversion
return provider getrubyinstanceconfig   getcompatversion
/**
* changes a ruby version to be evaluated into one of compatversion.ruby1_8,
* compatversion.ruby1_9, or compatversion.both. the default version is
* compatversion.ruby1_8.
* call this method before you use put/get, runscriptlet, and parse methods so that
* the given version will be set.
*
* @since jruby 1.5.0.
*
* @param version a ruby version
*/
public void setcompatversion compatversion version
provider getrubyinstanceconfig   setcompatversion version
/**
* tests whether the object space is enabled or not.
*
* @since jruby 1.5.0.
*
* @return true if the object space is able to use, otherwise, false.
*/
public boolean isobjectspaceenabled
return provider getrubyinstanceconfig   isobjectspaceenabled
/**
* changes the value to determine whether the object space is enabled or not. the
* default value is false.
* call this method before you use put/get, runscriptlet, and parse methods so that
* the given condition will be used.
*
* @since jruby 1.5.0.
*
* this value can be set by jruby.objectspace.enabled system property.
*
* @param enable true to enable the object space, or false to disable.
*/
public void setobjectspaceenabled boolean enable
provider getrubyinstanceconfig   setobjectspaceenabled enable
/**
* returns a map of environment variables.
*
* @since jruby 1.5.0.
*
* @return a map that has environment variables' key-value pairs.
*/
public map getenvironment
return provider getrubyinstanceconfig   getenvironment
/**
* changes an environment variables' map.
* call this method before you use put/get, runscriptlet, and parse methods so that
* initial configurations will work.
*
* @since jruby 1.5.0.
*
* @param environment a new map of environment variables.
*/
public void setenvironment map environment
provider getrubyinstanceconfig   setenvironment environment
/**
* returns a current directory.
*
* the default current directory is identical to a value of "user.dir" system
* property if no security restriction is set. if the "user.dir" directory is
* protected by the security restriction, the default value is "/".
*
* @since jruby 1.5.0.
*
* @return a current directory.
*/
public string getcurrentdirectory
if  provider isruntimeinitialized
return provider getruntime   getcurrentdirectory
return provider getrubyinstanceconfig   getcurrentdirectory
/**
* changes a current directory to a given directory.
* the current directory can be changed anytime.
*
* @since jruby 1.5.0.
*
* @param directory a new directory to be set.
*/
public void setcurrentdirectory string directory
if  provider isruntimeinitialized
provider getruntime   setcurrentdirectory directory
else
provider getrubyinstanceconfig   setcurrentdirectory directory
/**
* returns a jruby home directory.
*
* the default jruby home is the value of jruby_home environment variable,
* or "jruby.home" system property when no security restriction is set to
* those directories. if none of jruby_home or jruby.home is set and jruby-complete.jar
* is used, the default jruby home is "/meta-inf/jruby.home" in the jar archive.
* otherwise, "java.io.tmpdir" system property is the default value.
*
* @since jruby 1.5.0.
*
* @return a jruby home directory.
*/
public string gethomedirectory
return provider getrubyinstanceconfig   getjrubyhome
/**
* changes a jruby home directory to a directory of a given name.
* call this method before you use put/get, runscriptlet, and parse methods so that
* the given directory will be used.
*
* @since jruby 1.5.0.
*
* @param home a name of new jruby home directory.
*/
public void sethomedirectory string home
provider getrubyinstanceconfig   setjrubyhome home
/**
* returns a classcache object that is tied to a class loader. the default classcache
* object is tied to a current thread' context loader if it exists. otherwise, it is
* tied to the class loader that loaded rubyinstanceconfig.
*
* @since jruby 1.5.0.
*
* @return a classcache object.
*/
public classcache getclasscache
return provider getrubyinstanceconfig   getclasscache
/**
* changes a classcache object to a given one.
* call this method before you use put/get, runscriptlet, and parse methods so that
* the given class cache will be used.
*
* @since jruby 1.5.0.
*
* @param cache a new classcache object to be set.
*/
public void setclasscache classcache cache
provider getrubyinstanceconfig   setclasscache cache
/**
* returns a class loader object that is currently used. this loader loads
* ruby files and libraries.
*
* @since jruby 1.5.0.
*
* @return a class loader object that is currently used.
*/
public classloader getclassloader
return provider getrubyinstanceconfig   getloader
/**
* changes a class loader to a given loader.
* call this method before you use put/get, runscriptlet, and parse methods so that
* the given class loader will be used.
*
* @since jruby 1.5.0.
*
* @param loader a new class loader to be set.
*/
public void setclassloader classloader loader
provider getrubyinstanceconfig   setloader loader
/**
* returns a profile currently used. the default value is profile.default,
* which has the same behavior to profile.all.
* profile allows you to define a restricted subset of code to be loaded during
* the runtime initialization. when you use jruby in restricted environment
* such as google app engine, profile is a helpful option.
*
* @since jruby 1.5.0.
*
* @return a current profiler.
*/
public profile getprofile
return provider getrubyinstanceconfig   getprofile
/**
* changes a profile to a given one. the default value is profile.default,
* which has the same behavior to profile.all.
* call this method before you use put/get, runscriptlet, and parse methods so that
* initial configurations will work.
*
* profile allows you to define a restricted subset of code to be loaded during
* the runtime initialization. when you use jruby in restricted environment
* such as google app engine, profile is a helpful option. for example,
* profile.no_file_class doesn't load file class.
*
* @since jruby 1.5.0.
*
* @param profile a new profiler to be set.
*/
public void setprofile profile profile
provider getrubyinstanceconfig   setprofile profile
/**
* returns a profilingmode currently used. the default value is profilingmode.off.
*
* @since jruby 1.6.6.
*
* @return a current profiling mode.
*/
public profilingmode getprofilingmode
return provider getrubyinstanceconfig   getprofilingmode
/**
* changes a profilingmode to a given one. the default value is profiling.off.
* call this method before you use put/get, runscriptlet, and parse methods so that
* initial configurations will work.
*
* profilingmode allows you to change profiling style.
*
* profiling.off - default. profiling off.
* profiling.api - activates ruby profiler api. equivalent to --profile.api command line option
* profiling.flat - synonym for --profile command line option equivalent to --profile.flat command line option
* profiling.graph - runs with instrumented (timed) profiling, graph format. equivalent to --profile.graph command line option.
*
* @since jruby 1.6.6.
*
* @param mode a new profiling mode to be set.
*/
public void setprofile profilingmode mode
provider getrubyinstanceconfig   setprofilingmode mode
/**
* returns a loadservicecreator currently used.
*
* @since jruby 1.5.0.
*
* @return a current loadservicecreator.
*/
public loadservicecreator getloadservicecreator
return provider getrubyinstanceconfig   getloadservicecreator
/**
* changes a loadservicecreator to a given one.
* call this method before you use put/get, runscriptlet, and parse methods so that
* initial configurations will work.
*
* @since jruby 1.5.0.
*
* @param creator a new loadservicecreator
*/
public void setloadservicecreator loadservicecreator creator
provider getrubyinstanceconfig   setloadservicecreator creator
/**
* returns a list of argument.
*
* @since jruby 1.5.0.
*
* @return an arguments' list.
*/
public string getargv
return provider getrubyinstanceconfig   getargv
/**
* changes values of the arguments' list.
*
* @since jruby 1.5.0.
*
* @param argv a new arguments' list.
*/
public void setargv string argv
provider getrubyinstanceconfig   setargv argv
/**
* returns a script filename to run. the default value is "&lt;script&gt;".
*
* @since jruby 1.5.0.
*
* @return a script filename.
*/
public string getscriptfilename
return provider getrubyinstanceconfig   getscriptfilename
/**
* changes a script filename to run. the default value is "&lt;script&gt;".
* call this before you use put/get, runscriptlet, and parse methods so that
* initial configurations will work.
*
* @since jruby 1.5.0.
*
* @param filename a new script filename.
*/
public void setscriptfilename string filename
provider getrubyinstanceconfig   setscriptfilename filename
/**
* returns a record separator. the default value is "\n".
*
* @since jruby 1.5.0.
*
* @return a record separator.
*/
public string getrecordseparator
return provider getrubyinstanceconfig   getrecordseparator
/**
* changes a record separator to a given value. if "0" is given, the record
* separator goes to "\n\n", "777" goes to "\uffff", otherwise, an octal value
* of the given number.
* call this before you use put/get, runscriptlet, and parse methods so that
* initial configurations will work.
*
* @since jruby 1.5.0.
*
* @param separator a new record separator value, "0" or "777"
*/
public void setrecordseparator string separator
provider getrubyinstanceconfig   setrecordseparator separator
/**
* returns a value of kcode currently used. the default value is kcode.none.
*
* @since jruby 1.5.0.
*
* @return a kcode value.
*/
public kcode getkcode
return provider getrubyinstanceconfig   getkcode
/**
* changes a value of kcode to a given value. the value should be one of
* kcode.none, kcode.utf8, kcode.sjis, or kcode.euc. the default value is kcode.none.
* call this method before you use put/get, runscriptlet, and parse methods so that
* the given value will be used.
*
* @since jruby 1.5.0.
*
* @param kcode a new kcode value.
*/
public void setkcode kcode kcode
provider getrubyinstanceconfig   setkcode kcode
/**
* returns the value of n, which means that jitted methods are logged in
* every n methods. the default value is 0.
*
* @since jruby 1.5.0.
*
* @return a value that determines how often jitted methods are logged.
*/
public int getjitlogevery
return provider getrubyinstanceconfig   getjitlogevery
/**
* changes a value of n, so that jitted methods are logged in every n methods.
* the default value is 0. this value can be set by the jruby.jit.logevery system
* property.
* call this method before you use put/get, runscriptlet, and parse methods so that
* the configurations will work.
*
* @since jruby 1.5.0.
*
* @param logevery a new number of methods.
*/
public void setjitlogevery int logevery
provider getrubyinstanceconfig   setjitlogevery logevery
/**
* returns a value of the threshold that determines whether jitted methods'
* call reached to the limit or not. the default value is -1 when security
* restriction is applied, or 50 when no security restriction exists.
*
* @since jruby 1.5.0.
*
* @return a value of the threshold.
*/
public int getjitthreshold
return provider getrubyinstanceconfig   getjitthreshold
/**
* changes a value of the threshold that determines whether jitted methods'
* call reached to the limit or not. the default value is -1 when security
* restriction is applied, or 50 when no security restriction exists. this
* value can be set by jruby.jit.threshold system property.
* call this method before you use put/get, runscriptlet, and parse methods so that
* the configurations will work.
*
* @since jruby 1.5.0.
*
* @param threshold a new value of the threshold.
*/
public void setjitthreshold int threshold
provider getrubyinstanceconfig   setjitthreshold threshold
/**
* returns a value of a max class cache size. the default value is 0 when
* security restriction is applied, or 4096 when no security restriction exists.
*
* @since jruby 1.5.0.
*
* @return a value of a max class cache size.
*/
public int getjitmax
return provider getrubyinstanceconfig   getjitmax
/**
* changes a value of a max class cache size. the default value is 0 when
* security restriction is applied, or 4096 when no security restriction exists.
* this value can be set by jruby.jit.max system property.
* call this method before you use put/get, runscriptlet, and parse methods so that
* the configurations will work.
*
* @since jruby 1.5.0.
*
* @param max a new value of a max class cache size.
*/
public void setjitmax int max
provider getrubyinstanceconfig   setjitmax max
/**
* returns a value of a max size of the bytecode generated by compiler. the
* default value is -1 when security restriction is applied, or 10000 when
* no security restriction exists.
*
* @since jruby 1.5.0.
*
* @return a value of a max size of the bytecode.
*/
public int getjitmaxsize
return provider getrubyinstanceconfig   getjitmaxsize
/**
* changes a value of a max size of the bytecode generated by compiler. the
* default value is -1 when security restriction is applied, or 10000 when
* no security restriction exists. this value can be set by jruby.jit.maxsize
* system property.
* call this method before you use put/get, runscriptlet, and parse methods so that
* the configurations will work.
*
* @since jruby 1.5.0.
*
* @param maxsize a new value of a max size of the bytecode.
*/
public void setjitmaxsize int maxsize
provider getrubyinstanceconfig   setjitmaxsize maxsize
/**
* returns version information about jruby and ruby supported by this platform.
*
* @return version information.
*/
public string getsupportedrubyversion
return outputstrings getversionstring provider getrubyinstanceconfig   getcompatversion    trim
/**
* returns an array of values associated to a key.
*
* @param key is a key in a property file
* @return values associated to the key
*/
public string getproperty string key
if  basicproperties containskey key
return  string  basicproperties get key
else
return null
/**
* returns a provider instance of {@link localcontextprovider}. when users
* want to configure ruby runtime, they can do by setting class loading paths,
* {@link org.jruby.rubyinstanceconfig} or {@link org.jruby.util.classcache}
* to the provider before they get ruby runtime.
*
* @return a provider of {@link localcontextprovider}
*/
public localcontextprovider getprovider
return provider
/**
* returns a ruby runtime in one of {@link localcontextscope}.
*
* @deprecated as of jruby 1.5.0. use getprovider().getruntime() method instead.
*
* @return ruby runtime of a specified local context
*/
@deprecated
public ruby getruntime
return provider getruntime
/**
* returns a variable map in one of {@link localcontextscope}. variables
* in this map is used to share between java and ruby. map keys are ruby's
* variable names, thus they must be valid ruby names.
*
* @return a variable map specific to the current thread
*/
public bivariablemap getvarmap
return provider getvarmap
/**
* returns a attribute map in one of {@link localcontextscope}. attributes
* in this map accept any key value pair, types of which are java.lang.object.
* ruby scripts do not look up this map.
*
* @return an attribute map specific to the current thread
*/
public map getattributemap
return provider getattributemap
/**
* returns an attribute value associated with the specified key in
* a attribute map. this is a short cut method of
* scriptingcontainer#getattributemap().get(key).
*
* @param key is the attribute key
* @return value is a value associated to the specified key
*/
public object getattribute object key
return provider getattributemap   get key
/**
* associates the specified value with the specified key in a
* attribute map. if the map previously contained a mapping for the key,
* the old value is replaced. this is a short cut method of
* scriptingcontainer#getattributemap().put(key, value).
*
* @param key is a key that the specified value is to be associated with
* @param value is a value to be associated with the specified key
* @return the previous value associated with key, or null if there was no mapping for key.
*/
public object setattribute object key  object value
return provider getattributemap   put key  value
/**
* removes the specified value with the specified key in a
* attribute map. if the map previously contained a mapping for the key,
* the old value is returned. this is a short cut method of
* scriptingcontainer#getattributemap().remove(key).
*
* @param key is a key that the specified value is to be removed from
* @return the previous value associated with key, or null if there was no mapping for key.
*/
public object removeattribute object key
return provider getattributemap   remove key
/**
* returns a value of the specified key in a top level of runtime or null
* if this map doesn't have a mapping for the key. the key
* must be a valid ruby variable or constant name.
*
* @param key is a key whose associated value is to be returned
* @return a value to which the specified key is mapped, or null if this
*         map contains no mapping for the key
*/
public object get string key
return provider getvarmap   get provider getruntime   gettopself    key
/**
* returns a value of a specified key in a specified receiver or null if
* a variable map doesn't have a mapping for the key in a given
* receiver. the key must be a valid ruby variable or constant name. a global
* variable doesn't depend on the receiver.
*
* @param receiver a receiver to get the value from
* @param key is a key whose associated value is to be returned
* @return a value to which the specified key is mapped, or null if this
*         map contains no mapping for the key
*/
public object get object receiver  string key
return provider getvarmap   get receiver  key
/**
* associates the specified value with the specified key in a
* variable map. this key-value pair is injected to a top level of runtime
* during evaluation. if the map previously contained a mapping for the key,
* the old value is replaced. the key must be a valid ruby variable or
* constant name. it will be a top level variable or constant.
*
* @param key is a key that the specified value is to be associated with
* @param value is a value to be associated with the specified key
* @return a previous value associated with a key, or null if there was
*         no mapping for this key.
*/
public object put string key  object value
return provider getvarmap   put provider getruntime   gettopself    key  value
/**
* associates the specified value with the specified key in a variable map.
* this key-value pair is injected to a given receiver during evaluation.
* if the map previously contained a mapping for the key,
* the old value is replaced. the key must be a valid ruby variable or
* constant name. a given receiver limits the scope of a variable or constant.
* however, a global variable is accessible globally always.
*
* @param receiver a receiver to put the value in
* @param key is a key that the specified value is to be associated with
* @param value is a value to be associated with the specified key
* @return a previous value associated with a key, or null if there was
*         no mapping for this key.
*/
public object put object receiver  string key  object value
return provider getvarmap   put receiver  key  value
/**
* removes the specified ruby variable with the specified variable name from a
* variable map and runtime top level. if the map previously contained a
* mapping for the key, the old value is returned. the key must be a valid
* ruby variable name.
*
* @param key is a key that the specified value is to be associated with
* @return a previous value associated with a key, or null if there was
*         no mapping for this key.
*/
public object remove string key
return remove provider getruntime   gettopself    key
/**
* removes the specified ruby variable with the specified variable name in a
* variable map and given receiver. if the map previously contained a mapping for the key,
* the old value is returned. the key must be a valid ruby variable name.
* this is a short cut method of scriptingcontainer#getvarmap().remove(key).
*
* @param receiver a receiver to remove the value from
* @param key is a key that the specified value is to be associated with
* @return a previous value associated with a key, or null if there was
*         no mapping for this key.
*/
public object remove object receiver  string key
return provider getvarmap   remove receiver  key
/**
* removes all of the mappings from this map.
* the map will be empty after this call returns. ruby variables are also
* removed from ruby instance. however, ruby instance keep having global variable
* names with null value.
* this is a short cut method of scriptingcontainer#getvarmap().clear().
*/
public void clear
provider getvarmap   clear
/**
* parses a script and return an object which can be run(). this allows
* the script to be parsed once and evaluated many times.
*
* @param script is a ruby script to be parsed
* @param lines are linenumbers to display for parse errors and backtraces.
*        this field is optional. only the first argument is used for parsing.
*        when no line number is specified, 0 is applied to.
* @return an object which can be run
*/
public embedevalunit parse string script  int    lines
return runtimeadapter parse script  lines
/**
* parses a script given by a reader and return an object which can be run().
* this allows the script to be parsed once and evaluated many times.
*
* @param reader is used to read a script from
* @param filename is used as in information, for example, appears in a stack trace
*        of an exception
* @param lines are linenumbers to display for parse errors and backtraces.
*        this field is optional. only the first argument is used for parsing.
*        when no line number is specified, 0 is applied to.
* @return an object which can be run
*/
public embedevalunit parse reader reader  string filename  int    lines
return runtimeadapter parse reader  filename  lines
/**
* parses a script read from a specified path and return an object which can be run().
* this allows the script to be parsed once and evaluated many times.
*
* @param type is one of the types {@link pathtype} defines
* @param filename is used as in information, for example, appears in a stack trace
*        of an exception
* @param lines are linenumbers to display for parse errors and backtraces.
*        this field is optional. only the first argument is used for parsing.
*        when no line number is specified, 0 is applied to.
* @return an object which can be run
*/
public embedevalunit parse pathtype type  string filename  int    lines
return runtimeadapter parse type  filename  lines
/**
* parses a script given by a input stream and return an object which can be run().
* this allows the script to be parsed once and evaluated many times.
*
* @param istream is an input stream to get a script from
* @param filename filename is used as in information, for example, appears in a stack trace
*        of an exception
* @param lines are linenumbers to display for parse errors and backtraces.
*        this field is optional. only the first argument is used for parsing.
*        when no line number is specified, 0 is applied to.
* @return an object which can be run
*/
public embedevalunit parse inputstream istream  string filename  int    lines
return runtimeadapter parse istream  filename  lines
/**
* evaluates a script under the current scope (perhaps the top-level
* scope) and returns a result only if a script returns a value.
* right after the parsing, the script is evaluated once.
*
* @param script is a ruby script to get run
* @return an evaluated result converted to a java object
*/
public object runscriptlet string script
embedevalunit unit   parse script
return rununit unit
private object rununit embedevalunit unit
if  unit    null
return null
irubyobject ret   unit run
return javaembedutils rubytojava ret
/**
* evaluates a script read from a reader under the current scope
* (perhaps the top-level scope) and returns a result only if a script
* returns a value. right after the parsing, the script is evaluated once.
*
* @param reader is used to read a script from
* @param filename is used as in information, for example, appears in a stack trace
*        of an exception
* @return an evaluated result converted to a java object
*/
public object runscriptlet reader reader  string filename
embedevalunit unit   parse reader  filename
return rununit unit
/**
* evaluates a script read from a input stream under the current scope
* (perhaps the top-level scope) and returns a result only if a script
* returns a value. right after the parsing, the script is evaluated once.
*
* @param istream is used to input a script from
* @param filename is used as in information, for example, appears in a stack trace
*        of an exception
* @return an evaluated result converted to a java object
*/
public object runscriptlet inputstream istream  string filename
embedevalunit unit   parse istream  filename
return rununit unit
/**
* reads a script file from specified path and evaluates it under the current
* scope (perhaps the top-level scope) and returns a result only if a script
* returns a value. right after the parsing, the script is evaluated once.
*
* @param type is one of the types {@link pathtype} defines
* @param filename is used to read the script from and an information
* @return an evaluated result converted to a java object
*/
public object runscriptlet pathtype type  string filename
embedevalunit unit   parse type  filename
return rununit unit
/**
* returns an instance of {@link embedrubyruntimeadapter} for embedders to parse
* scripts.
*
* @return an instance of {@link embedrubyruntimeadapter}.
*/
public embedrubyruntimeadapter newruntimeadapter
return runtimeadapter
/**
* returns an instance of {@link embedrubyobjectadapter} for embedders to invoke
* methods defined by ruby. the script must be evaluated prior to a method call.
* in most cases, users don't need to use this method. scriptingcontainer's
* callmethods are the shortcut and work in the same way.
*
* <pre>example
*         # calendar.rb
*         require 'date'
*         class calendar
*           def initialize;@today = datetime.now;end
*           def next_year;@today.year + 1;end
*         end
*         calendar.new
*
*
*         scriptingcontainer container = new scriptingcontainer();
*         string filename =  "ruby/calendar.rb";
*         object receiver = instance.runscriptlet(pathtype.classpath, filename);
*         embedrubyobjectadapter adapter = instance.newobjectadapter();
*         integer result =
*             (integer) adapter.callmethod(receiver, "next_year", integer.class);
*         system.out.println("next year: " + result);
*         system.out.println(instance.get("@today"));
*
* outputs:
*     next year: 2010
*     2009-05-19t17:46:44-04:00</pre>
*
* @return an instance of {@link embedrubyobjectadapter}
*/
public embedrubyobjectadapter newobjectadapter
return objectadapter
/**
* executes a method defined in ruby script. this method is used when a ruby
* method does not have any argument.
*
* @param receiver is an instance that will receive this method call
* @param methodname is a method name to be called
* @param args is an array of method arguments
* @return an instance of requested java type
*/
public object callmethod object receiver  string methodname  object    args
return objectadapter callmethod receiver  methodname  args
/**
* executes a method defined in ruby script. this method is used when a ruby
* method does not have any argument.
*
* @param receiver is an instance that will receive this method call
* @param methodname is a method name to be called
* @param block is a block to be executed in this method
* @param args is an array of method arguments
* @return an instance of requested java type
*/
public object callmethod object receiver  string methodname  block block  object    args
return objectadapter callmethod receiver  methodname  block  args
/**
* executes a method defined in ruby script. this method is used when a ruby
* method does not have any argument.
*
* @param receiver is an instance that will receive this method call
* @param methodname is a method name to be called
* @param returntype is the type we want it to convert to
* @return an instance of requested java type
*/
public <t> t callmethod object receiver  string methodname  class<t> returntype
return objectadapter callmethod receiver  methodname  returntype
/**
* executes a method defined in ruby script. this method is used when a ruby
* method have only one argument.
*
* @param receiver is an instance that will receive this method call
* @param methodname is a method name to be called
* @param singlearg is an method argument
* @param returntype returntype is the type we want it to convert to
* @return an instance of requested java type
*/
public <t> t callmethod object receiver  string methodname  object singlearg  class<t> returntype
return objectadapter callmethod receiver  methodname  singlearg  returntype
/**
* executes a method defined in ruby script. this method is used when a ruby
* method have multiple arguments.
*
* @param receiver is an instance that will receive this method call
* @param methodname is a method name to be called
* @param args is an array of method arguments
* @param returntype is the type we want it to convert to
* @return an instance of requested java type
*/
public <t> t callmethod object receiver  string methodname  object args  class<t> returntype
return objectadapter callmethod receiver  methodname  args  returntype
/**
* executes a method defined in ruby script. this method is used when a ruby
* method have multiple arguments, one of which is a block.
*
* @param receiver is an instance that will receive this method call
* @param methodname is a method name to be called
* @param args is an array of method arguments except a block
* @param block is a block to be executed in this method
* @param returntype is the type we want it to convert to
* @return an instance of requested java type
*/
public <t> t callmethod object receiver  string methodname  object args  block block  class<t> returntype
return objectadapter callmethod receiver  methodname  args  block  returntype
/**
* executes a method defined in ruby script. this method is used when a ruby
* method does not have any argument, and users want to inject ruby's local
* variables' values from java.
*
* @param receiver is an instance that will receive this method call
* @param methodname is a method name to be called
* @param returntype is the type we want it to convert to
* @param unit is parsed unit
* @return an instance of requested java type
*/
public <t> t callmethod object receiver  string methodname  class<t> returntype  embedevalunit unit
return objectadapter callmethod receiver  methodname  returntype  unit
/**
* executes a method defined in ruby script. this method is used when a ruby
* method have multiple arguments, and users want to inject ruby's local
* variables' values from java.
*
* @param receiver is an instance that will receive this method call
* @param methodname is a method name to be called
* @param args is an array of method arguments
* @param returntype is the type we want it to convert to
* @param unit is parsed unit
* @return an instance of requested java type
*/
public <t> t callmethod object receiver  string methodname  object args  class<t> returntype  embedevalunit unit
return objectadapter callmethod receiver  methodname  args  returntype  unit
/**
* executes a method defined in ruby script. this method is used when a ruby
* method have multiple arguments, one of which is a block, and users want to
* inject ruby's local variables' values from java.
*
* @param receiver is an instance that will receive this method call
* @param methodname is a method name to be called
* @param args is an array of method arguments except a block
* @param block is a block to be executed in this method
* @param returntype is the type we want it to convert to
* @param unit is parsed unit
* @return is the type we want it to convert to
*/
public <t> t callmethod object receiver  string methodname  object args  block block  class<t> returntype  embedevalunit unit
return objectadapter callmethod receiver  methodname  args  block  returntype  unit
/**
*
* @param receiver is an instance that will receive this method call
* @param args is an array of method arguments
* @param returntype is the type we want it to convert to
* @return is the type we want it to convert to
*/
public <t> t callsuper object receiver  object args  class<t> returntype
return objectadapter callsuper receiver  args  returntype
/**
*
* @param receiver is an instance that will receive this method call
* @param args is an array of method arguments except a block
* @param block is a block to be executed in this method
* @param returntype is the type we want it to convert to
* @return is the type we want it to convert to
*/
public <t> t callsuper object receiver  object args  block block  class<t> returntype
return objectadapter callsuper receiver  args  block  returntype
/**
* returns an instance of a requested interface type. an implementation of
* the requested interface is done by a ruby script, which has been evaluated
* before getting the instance.
* in most cases, users don't need to use this method. scriptingcontainer's
* runscriptlet method returns an instance of the interface type that is
* implemented by ruby.
*
* <pre>example
* interface
*     //quadraticformula.java
*     package org.jruby.embed;
*     import java.util.list;
*     public interface quadraticformula {
*         list solve(int a, int b, int c) throws exception;
*     }
*
* implementation
*     #quadratic_formula.rb
*     def solve(a, b, c)
*       v = b ** 2 - 4 * a * c
*       if v < 0: raise rangeerror end
*       s0 = ((-1)*b - math.sqrt(v))/(2*a)
*       s1 = ((-1)*b + math.sqrt(v))/(2*a)
*       return s0, s1
*     end
*
* usage
*     scriptingcontainer container = new scriptingcontainer();
*     string filename = "ruby/quadratic_formula_class.rb";
*     object receiver = container.runscriptlet(pathtype.classpath, filename);
*     quadraticformula qf = container.getinstance(receiver, quadraticformula.class);
*     try {
*          list<double> solutions = qf.solve(1, -2, -13);
*          printsolutions(solutions);
*          solutions = qf.solve(1, -2, 13);
*          for (double s : solutions) {
*              system.out.print(s + ", ");
*          }
*     } catch (exception e) {
*          e.printstacktrace();
*     }
*
* output
*     -2.7416573867739413, 4.741657386773941,
* </pre>
*
*
* @param receiver is an instance that implements the interface
* @param clazz is a requested interface
* @return an instance of a requested interface type
*/
public <t> t getinstance object receiver  class<t> clazz
return interfaceadapter getinstance receiver  clazz
/**
* replaces a standard input by a specified reader
*
* @param reader is a reader to be set
*/
public void setreader reader reader
if  reader    null
return
map map   getattributemap
if  map containskey attributename reader
reader old    reader  map get attributename reader
if  old    reader
return
map put attributename reader  reader
inputstream istream   new readerinputstream reader
ruby runtime   provider getruntime
rubyio io   new rubyio runtime  istream
io getopenfile   getmainstream   setsync true
runtime definevariable new inputglobalvariable runtime     io
runtime getobject   storeconstant    io
/**
* returns a reader set in an attribute map.
*
* @return a reader in an attribute map
*/
public reader getreader
map map   getattributemap
if  map containskey attributename reader
return  reader  getattributemap   get attributename reader
return null
/**
* returns an input stream that ruby runtime has. the stream is set when
* ruby runtime is initialized.
*
* @deprecated as of jruby 1.5.0, replaced by getinput().
*
* @return an input stream that ruby runtime has.
*/
@deprecated
public inputstream getin
return getinput
/**
* replaces a standard output by a specified writer.
*
* @param writer is a writer to be set
*/
public void setwriter writer writer
if  writer    null
return
map map   getattributemap
if  map containskey attributename writer
writer old    writer  map get attributename writer
if  old    writer
return
map put attributename writer  writer
printstream pstream   new printstream new writeroutputstream writer
setoutputstream pstream
private void setoutputstream printstream pstream
if  pstream    null
return
ruby runtime   provider getruntime
rubyio io   new rubyio runtime  pstream
io getopenfile   getmainstream   setsync true
runtime definevariable new outputglobalvariable runtime     io
runtime getobject   storeconstant    io
runtime getglobalvariables   alias
runtime getglobalvariables   alias
public void resetwriter
printstream pstream   provider getrubyinstanceconfig   getoutput
setoutputstream pstream
/**
* returns a writer set in an attribute map.
*
* @return a writer in a attribute map
*/
public writer getwriter
map map   getattributemap
if  map containskey attributename writer
return  writer  getattributemap   get attributename writer
return null
/**
* returns an output stream that ruby runtime has. the stream is set when
* ruby runtime is initialized.
*
* @deprecated as of jruby 1.5.0, replaced by getoutput().
*
* @return an output stream that ruby runtime has
*/
@deprecated
public printstream getout
return getoutput
/**
* replaces a standard error by a specified writer.
*
* @param errorwriter is a writer to be set
*/
public void seterrorwriter writer errorwriter
if  errorwriter    null
return
map map   getattributemap
if  map containskey attributename error_writer
writer old    writer  map get attributename error_writer
if  old    errorwriter
return
map put attributename error_writer  errorwriter
printstream pstream   new printstream new writeroutputstream errorwriter
seterrorstream pstream
private void seterrorstream printstream error
if  error    null
return
ruby runtime   provider getruntime
rubyio io   new rubyio runtime  error
io getopenfile   getmainstream   setsync true
runtime definevariable new outputglobalvariable runtime     io
runtime getobject   storeconstant    io
runtime getglobalvariables   alias
public void reseterrorwriter
printstream error   provider getrubyinstanceconfig   geterror
seterrorstream error
/**
* returns an error writer set in an attribute map.
*
* @return an error writer in a attribute map
*/
public writer geterrorwriter
map map   getattributemap
if  map containskey attributename error_writer
return  writer  getattributemap   get attributename error_writer
return null
/**
* returns an error output stream that ruby runtime has. the stream is set when
* ruby runtime is initialized.
*
* @deprecated as of jruby 1.5.0, replaced by geterror()
*
* @return an error output stream that ruby runtime has
*/
@deprecated
public printstream geterr
return geterror
/**
* cleanly shut down this scriptingcontainer and any jruby resources it holds.
* all scriptingcontainer instances should be terminated when you are done with
* them, rather then leaving them for gc to finalize.
*
* @since jruby 1.5.0
*/
public void terminate
if  getprovider   isruntimeinitialized    getprovider   getruntime   teardown false
getprovider   terminate
/**
* ensure this scriptingcontainer instance is terminated when nobody holds any
* references to it (and gc wants to reclaim it).
*
* @throws throwable
*
* @since jruby 1.6.0
*/
public void finalize   throws throwable
super finalize
terminate