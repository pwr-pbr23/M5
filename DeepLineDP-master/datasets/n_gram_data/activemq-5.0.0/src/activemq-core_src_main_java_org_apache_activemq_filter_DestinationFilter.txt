/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq filter
import java io ioexception
import javax jms jmsexception
import org apache activemq command activemqdestination
import org apache activemq util jmsexceptionsupport
/**
* represents a filter which only operates on destinations
*
* @version $revision: 1.3 $
*/
public abstract class destinationfilter implements booleanexpression
public static final string any_descendent
public static final string any_child
public object evaluate messageevaluationcontext message  throws jmsexception
return matches message  ? boolean true   boolean false
public boolean matches messageevaluationcontext message  throws jmsexception
try
if  message isdropped
return false
return matches message getmessage   getdestination
catch  ioexception e
throw jmsexceptionsupport create e
public abstract boolean matches activemqdestination destination
public static destinationfilter parsefilter activemqdestination destination
if  destination iscomposite
return new compositedestinationfilter destination
string paths   destinationpath getdestinationpaths destination
int idx   paths length   1
if  idx >  0
string lastpath   paths
if  lastpath equals any_descendent
return new prefixdestinationfilter paths
else
while  idx >  0
lastpath   paths
if  lastpath equals any_child
return new wildcarddestinationfilter paths
// if none of the paths contain a wildcard then use equality
return new simpledestinationfilter destination