/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq util
import java io datainput
import java io dataoutput
import java io ioexception
/**
* simple bitarray to enable setting multiple boolean values efficently used
* instead of bitset because bitset does not allow for efficent serialization.
* will store up to 64 boolean values
*
* @version $revision: 1.1.1.1 $
*/
public class bitarray
static final int long_size   64
static final int int_size   32
static final int short_size   16
static final int byte_size   8
private static final long bit_values    0x0000000000000001l  0x0000000000000002l  0x0000000000000004l
0x0000000000000008l  0x0000000000000010l  0x0000000000000020l
0x0000000000000040l  0x0000000000000080l  0x0000000000000100l
0x0000000000000200l  0x0000000000000400l  0x0000000000000800l
0x0000000000001000l  0x0000000000002000l  0x0000000000004000l
0x0000000000008000l  0x0000000000010000l  0x0000000000020000l
0x0000000000040000l  0x0000000000080000l  0x0000000000100000l
0x0000000000200000l  0x0000000000400000l  0x0000000000800000l
0x0000000001000000l  0x0000000002000000l  0x0000000004000000l
0x0000000008000000l  0x0000000010000000l  0x0000000020000000l
0x0000000040000000l  0x0000000080000000l  0x0000000100000000l
0x0000000200000000l  0x0000000400000000l  0x0000000800000000l
0x0000001000000000l  0x0000002000000000l  0x0000004000000000l
0x0000008000000000l  0x0000010000000000l  0x0000020000000000l
0x0000040000000000l  0x0000080000000000l  0x0000100000000000l
0x0000200000000000l  0x0000400000000000l  0x0000800000000000l
0x0001000000000000l  0x0002000000000000l  0x0004000000000000l
0x0008000000000000l  0x0010000000000000l  0x0020000000000000l
0x0040000000000000l  0x0080000000000000l  0x0100000000000000l
0x0200000000000000l  0x0400000000000000l  0x0800000000000000l
0x1000000000000000l  0x2000000000000000l  0x4000000000000000l
0x8000000000000000l
private long bits
private int length
/**
* @return the length of bits set
*/
public int length
return length
/**
* @return the long containing the bits
*/
public long getbits
return bits
/**
* set the boolean value at the index
*
* @param index
* @param flag
* @return the old value held at this index
*/
public boolean set int index  boolean flag
length   math max length  index   1
boolean oldvalue    bits   bit_values     0
if  flag
bits    bit_values
else if  oldvalue
bits    ~ bit_values
return oldvalue
/**
* @param index
* @return the boolean value at this index
*/
public boolean get int index
return  bits   bit_values     0
/**
* reset all the bit values to false
*/
public void reset
bits   0
/**
* reset all the bits to the value supplied
*
* @param bits
*/
public void reset long bits
this bits   bits
/**
* write the bits to an output stream
*
* @param dataout
* @throws ioexception
*/
public void writetostream dataoutput dataout  throws ioexception
dataout writebyte length
if  length <  byte_size
dataout writebyte  int bits
else if  length <  short_size
dataout writeshort  short bits
else if  length <  int_size
dataout writeint  int bits
else
dataout writelong bits
/**
* read the bits from an input stream
*
* @param datain
* @throws ioexception
*/
public void readfromstream datainput datain  throws ioexception
length   datain readbyte
if  length <  byte_size
bits   datain readbyte
else if  length <  short_size
bits   datain readshort
else if  length <  int_size
bits   datain readint
else
bits   datain readlong