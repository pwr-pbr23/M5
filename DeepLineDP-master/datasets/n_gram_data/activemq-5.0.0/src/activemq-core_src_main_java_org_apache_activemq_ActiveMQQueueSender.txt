/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq
import javax jms jmsexception
import javax jms message
import javax jms queue
import javax jms queuesender
import org apache activemq command activemqdestination
/**
* a client uses a <code>queuesender</code> object to send messages to a
* queue. <p/>
* <p>
* normally, the <code>queue</code> is specified when a <code>queuesender
* </code>
* is created. in this case, an attempt to use the <code>send</code> methods
* for an unidentified <code>queuesender</code> will throw a <code>
* java.lang.unsupportedoperationexception</code>.
* <p/>
* <p>
* if the <code>queuesender</code> is created with an unidentified <code>
* queue</code>,
* an attempt to use the <code>send</code> methods that assume that the
* <code>queue</code> has been identified will throw a <code>
* java.lang.unsupportedoperationexception</code>.
* <p/>
* <p>
* during the execution of its <code>send</code> method, a message must not be
* changed by other threads within the client. if the message is modified, the
* result of the <code>send</code> is undefined. <p/>
* <p>
* after sending a message, a client may retain and modify it without affecting
* the message that has been sent. the same message object may be sent multiple
* times. <p/>
* <p>
* the following message headers are set as part of sending a message:
* <code>jmsdestination</code>, <code>jmsdeliverymode</code>,<code>jmsexpiration</code>,<code>jmspriority</code>,
* <code>jmsmessageid</code> and <code>jmstimestamp</code>. when the
* message is sent, the values of these headers are ignored. after the
* completion of the <code>send</code>, the headers hold the values specified
* by the method sending the message. it is possible for the <code>send</code>
* method not to set <code>jmsmessageid</code> and <code>jmstimestamp</code>
* if the setting of these headers is explicitly disabled by the
* <code>messageproducer.setdisablemessageid</code> or
* <code>messageproducer.setdisablemessagetimestamp</code> method. <p/>
* <p>
* creating a <code>messageproducer</code> provides the same features as
* creating a <code>queuesender</code>. a <code>messageproducer</code>
* object is recommended when creating new code. the <code>queuesender</code>
* is provided to support existing code.
*
* @see javax.jms.messageproducer
* @see javax.jms.queuesession#createsender(queue)
*/
public class activemqqueuesender extends activemqmessageproducer implements queuesender
protected activemqqueuesender activemqsession session  activemqdestination destination
throws jmsexception
super session  session getnextproducerid    destination
/**
* gets the queue associated with this <code>queuesender</code>.
*
* @return this sender's queue
* @throws jmsexception if the jms provider fails to get the queue for this
*                 <code>queuesender</code> due to some internal error.
*/
public queue getqueue   throws jmsexception
return  queue super getdestination
/**
* sends a message to a queue for an unidentified message producer. uses the
* <code>queuesender</code>'s default delivery mode, priority, and time
* to live. <p/>
* <p>
* typically, a message producer is assigned a queue at creation time;
* however, the jms api also supports unidentified message producers, which
* require that the queue be supplied every time a message is sent.
*
* @param queue the queue to send this message to
* @param message the message to send
* @throws jmsexception if the jms provider fails to send the message due to
*                 some internal error.
* @see javax.jms.messageproducer#getdeliverymode()
* @see javax.jms.messageproducer#gettimetolive()
* @see javax.jms.messageproducer#getpriority()
*/
public void send queue queue  message message  throws jmsexception
super send queue  message
/**
* sends a message to a queue for an unidentified message producer,
* specifying delivery mode, priority and time to live. <p/>
* <p>
* typically, a message producer is assigned a queue at creation time;
* however, the jms api also supports unidentified message producers, which
* require that the queue be supplied every time a message is sent.
*
* @param queue the queue to send this message to
* @param message the message to send
* @param deliverymode the delivery mode to use
* @param priority the priority for this message
* @param timetolive the message's lifetime (in milliseconds)
* @throws jmsexception if the jms provider fails to send the message due to
*                 some internal error.
*/
public void send queue queue  message message  int deliverymode  int priority  long timetolive
throws jmsexception
super send queue  message  deliverymode  priority  timetolive