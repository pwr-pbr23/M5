/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq web
import javax servlet servletcontext
import javax servlet servletcontextevent
import javax servlet servletcontextlistener
import org apache activemq broker brokerservice
import org apache activemq xbean brokerfactorybean
import org springframework core io resource
import org springframework web context support servletcontextresource
/**
* used to configure and instance of activemq <tt>brokerservice</tt> using
* activemq/spring's xml configuration. <p/> the configuration file is specified
* via the context init parameter <tt>brokeruri</tt>, typically: <code>
* &lt;context-param&gt;
* &lt;param-name&gt;brokeruri&lt;/param-name&gt;
* &lt;param-value&gt;/web-inf/activemq.xml&lt;/param-value&gt;
* &lt;/context-param&gt;
* </code>
* as a a default, if a <tt>brokeruri</tt> is not specified it will look up
* for <tt>activemq.xml</tt>
*
* @version $revision: 1.1 $
*/
public class springbrokercontextlistener implements servletcontextlistener
/** broker uri context parameter name: <tt>brokeruri</tt> */
public static final string init_param_broker_uri
/** the broker container instance */
private brokerservice brokercontainer
/**
* set the broker container to be used by this listener
*
* @param container the container to be used.
*/
protected void setbrokerservice brokerservice container
this brokercontainer   container
/**
* return the broker container.
*/
protected brokerservice getbrokerservice
return this brokercontainer
public void contextinitialized servletcontextevent event
servletcontext context   event getservletcontext
context log
brokercontainer   createbroker context
context log
try
brokercontainer start
context log
catch  exception e
context log     e  e
public void contextdestroyed servletcontextevent event
servletcontext context   event getservletcontext
if  brokercontainer    null
try
brokercontainer stop
catch  exception e
context log     e  e
brokercontainer   null
/**
* factory method to create a new activemq broker
*/
protected brokerservice createbroker servletcontext context
string brokeruri   context getinitparameter init_param_broker_uri
if  brokeruri    null
brokeruri
context log     brokeruri
resource resource   new servletcontextresource context  brokeruri
brokerfactorybean factory   new brokerfactorybean resource
try
factory afterpropertiesset
catch  exception e
context log     e  e
return factory getbroker