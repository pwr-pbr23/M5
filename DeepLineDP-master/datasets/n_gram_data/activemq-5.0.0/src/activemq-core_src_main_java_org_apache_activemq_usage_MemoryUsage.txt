/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq usage
/**
* used to keep track of how much of something is being used so that a
* productive working set usage can be controlled. main use case is manage
* memory usage.
*
* @org.apache.xbean.xbean
* @version $revision: 1.3 $
*/
public class memoryusage extends usage<memoryusage>
private long usage
public memoryusage
this null  null
/**
* create the memory manager linked to a parent. when the memory manager is
* linked to a parent then when usage increased or decreased, the parent's
* usage is also increased or decreased.
*
* @param parent
*/
public memoryusage memoryusage parent
this parent
public memoryusage string name
this null  name
public memoryusage memoryusage parent  string name
this parent  name  1 0f
public memoryusage memoryusage parent  string name  float portion
super parent  name  portion
/**
* @throws interruptedexception
*/
public void waitforspace   throws interruptedexception
if  parent    null
parent waitforspace
synchronized  usagemutex
for  int i   0  percentusage >  100  i
usagemutex wait
/**
* @param timeout
* @throws interruptedexception
* @return true if space
*/
public boolean waitforspace long timeout  throws interruptedexception
if  parent    null
if   parent waitforspace timeout
return false
synchronized  usagemutex
if  percentusage >  100
usagemutex wait timeout
return percentusage < 100
public boolean isfull
if  parent    null    parent isfull
return true
synchronized  usagemutex
return percentusage >  100
/**
* tries to increase the usage by value amount but blocks if this object is
* currently full.
*
* @param value
* @throws interruptedexception
*/
public void enqueueusage long value  throws interruptedexception
waitforspace
increaseusage value
/**
* increases the usage by the value amount.
*
* @param value
*/
public void increaseusage long value
if  value    0
return
int percentusage
synchronized  usagemutex
usage    value
percentusage   caclpercentusage
setpercentusage percentusage
if  parent    null
memoryusage parent  increaseusage value
/**
* decreases the usage by the value amount.
*
* @param value
*/
public void decreaseusage long value
if  value    0
return
int percentusage
synchronized  usagemutex
usage    value
percentusage   caclpercentusage
setpercentusage percentusage
if  parent    null
parent decreaseusage value
protected long retrieveusage
return usage
public long getusage
return usage
public void setusage long usage
this usage   usage