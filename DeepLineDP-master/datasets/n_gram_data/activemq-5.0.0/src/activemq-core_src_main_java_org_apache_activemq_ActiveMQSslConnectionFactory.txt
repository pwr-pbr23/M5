/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq
import java security securerandom
import javax jms jmsexception
import javax net ssl keymanager
import javax net ssl trustmanager
import org apache activemq transport transport
import org apache activemq transport tcp ssltransportfactory
import org apache activemq util jmsexceptionsupport
/**
* an activemqconnectionfactory that allows access to the key and trust managers
* used for sslconnections. there is no reason to use this class unless ssl is
* being used and the key and trust managers need to be specified from within
* code. in fact, if the uri passed to this class does not have an "ssl" scheme,
* this class will pass all work on to its superclass.
*
* @author sepandm@gmail.com
*/
public class activemqsslconnectionfactory extends activemqconnectionfactory
// the key and trust managers used to initialize the used sslcontext.
protected keymanager keymanager
protected trustmanager trustmanager
protected securerandom securerandom
/**
* sets the key and trust managers used when creating ssl connections.
*
* @param km the keymanagers used.
* @param tm the trustmanagers used.
* @param random the securerandom number used.
*/
public void setkeyandtrustmanagers final keymanager km  final trustmanager tm  final securerandom random
keymanager   km
trustmanager   tm
securerandom   random
/**
* overriding to make special considerations for ssl connections. if we are
* not using ssl, the superclass's method is called. if we are using ssl, an
* sslconnectionfactory is used and it is given the needed key and trust
* managers.
*
* @author sepandm@gmail.com
*/
protected transport createtransport   throws jmsexception
// if the given uri is non-ssl, let superclass handle it.
if   brokerurl getscheme   equals
return super createtransport
try
ssltransportfactory sslfactory   new ssltransportfactory
sslfactory setkeyandtrustmanagers keymanager  trustmanager  securerandom
return sslfactory doconnect brokerurl
catch  exception e
throw jmsexceptionsupport create     e  e