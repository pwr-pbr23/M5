/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq security
import java util iterator
import java util map
import java util set
import java util concurrent copyonwritearraylist
import org apache activemq broker broker
import org apache activemq broker brokerfilter
import org apache activemq broker connectioncontext
import org apache activemq command connectioninfo
/**
* handles authenticating a users against a simple user name/password map.
*
* @version $revision$
*/
public class simpleauthenticationbroker extends brokerfilter
private final map userpasswords
private final map usergroups
private final copyonwritearraylist<securitycontext> securitycontexts   new copyonwritearraylist<securitycontext>
public simpleauthenticationbroker broker next  map userpasswords  map usergroups
super next
this userpasswords   userpasswords
this usergroups   usergroups
public void addconnection connectioncontext context  connectioninfo info  throws exception
if  context getsecuritycontext      null
// check the username and password.
string pw    string userpasswords get info getusername
if  pw    null     pw equals info getpassword
throw new securityexception
final set groups    set usergroups get info getusername
securitycontext s   new securitycontext info getusername
public set<?> getprincipals
return groups
context setsecuritycontext s
securitycontexts add s
super addconnection context  info
public void removeconnection connectioncontext context  connectioninfo info  throwable error
throws exception
super removeconnection context  info  error
if  securitycontexts remove context getsecuritycontext
context setsecuritycontext null
/**
* previously logged in users may no longer have the same access anymore.
* refresh all the logged into users.
*/
public void refresh
for  iterator<securitycontext> iter   securitycontexts iterator    iter hasnext
securitycontext sc   iter next
sc getauthorizedreaddests   clear
sc getauthorizedwritedests   clear